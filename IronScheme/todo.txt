Release notes for IronScheme 1.0 alpha3
=======================================

What is IronScheme?

IronScheme will aim to be a compliant R5RS/R6RS Scheme implementation on the Microsoft DLR.
IronScheme provides 2 run modes: either via direct invocation on the commandline or via a REPL interactive
environment.


Notably lacking for R6RS:

- Custom ports
- call/cc only supports outward continuations
- Guard does not work as expected (due to above)
- Unicode: title casing is kinda broken, fold casing not implemented
- Complex numbers
- Fractions only work in REPL
- Some functionality lacking in ports (endianess, buffer-mode, file-options, eol options)
- Some functionality lacking in number conversions/printing

Limitations:

- Enumerations limited to 64 symbols

Differences:

- all raise's are continuable in the sense they can be caught
- no tail calls in dynamic-wind

Extras:

- a generic load procedure for toplevel R6RS files
- many extras procedures and macros in (ironscheme) library, mostly provided by psyntax
- syntactic CLR integration, automatic conversion of closures into delegates

Notes:

- you can refer to variables defined in the REPL by importing the (ironscheme interaction) library
- libraries defined in the REPL can be accessed from their given library name
- values is represented as a vector

Credits:

- Abdulaziz Ghuloum and Kent Dybvig for psyntax (and friends)
- Derick Eddington for making SRFI-1 R6RS compatible
- Philip L. Bewig for SRFI-41
- Marc Feeley for pretty-print

Planned to-do's (before final release):

- testing of correct argument types
- testing of correct argument type conversions
- testing of overflow arithmetic cases
- testing of expected exceptions
- testing of anything else
- any additional CLR integration required
- most of the lacking procedures
- documentation

And finally, it's slow compared to other implementations like Ikarus.

License:

Microsoft Public License

