using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.Scripting;

namespace IronScheme.Hosting
{
  static class Identifiers
  {
    readonly static List<object> ids;

    public static List<object> GetR6RSIds()
    {
      return ids;
    }

    static Identifiers()
    {
      ids = new List<object>();

      #region Huge list

      string[] allids = 
        {
    "import",
    "library",
    "expand",
    "installed-libraries",
    "library-path",
    "library-exists?",
    "library-locator",
    "make-parameter",
    "parameterize",
    "clr-library-locator",
    "lambda",
    "and",
    "begin",
    "case",
    "cond",
    "define",
    "define-syntax",
    "identifier-syntax",
    "if",
    "let",
    "let*",
    "let*-values",
    "let-syntax",
    "let-values",
    "letrec",
    "letrec*",
    "letrec-syntax",
    "or",
    "quasiquote",
    "quote",
    "set!",
    "syntax-rules",
    "unquote",
    "unquote-splicing",
    "<",
    "<=",
    "=",
    ">",
    ">=",
    "+",
    "-",
    "*",
    "/",
    "abs",
    "acos",
    "angle",
    "append",
    "apply",
    "asin",
    "assert",
    "assertion-violation",
    "atan",
    "boolean=?",
    "boolean?",
    "car",
    "cdr",
    "caar",
    "cadr",
    "cdar",
    "cddr",
    "caaar",
    "caadr",
    "cadar",
    "caddr",
    "cdaar",
    "cdadr",
    "cddar",
    "cdddr",
    "caaaar",
    "caaadr",
    "caadar",
    "caaddr",
    "cadaar",
    "cadadr",
    "caddar",
    "cadddr",
    "cdaaar",
    "cdaadr",
    "cdadar",
    "cdaddr",
    "cddaar",
    "cddadr",
    "cdddar",
    "cddddr",
    "call-with-current-continuation",
    "call/cc",
    "call-with-values",
    "ceiling",
    "char->integer",
    "char<=?",
    "char<?",
    "char=?",
    "char>=?",
    "char>?",
    "char?",
    "complex?",
    "cons",
    "cos",
    "denominator",
    "div",
    "mod",
    "div-and-mod",
    "div0",
    "mod0",
    "div0-and-mod0",
    "dynamic-wind",
    "eq?",
    "equal?",
    "eqv?",
    "error",
    "even?",
    "exact",
    "exact-integer-sqrt",
    "exact?",
    "exp",
    "expt",
    "finite?",
    "floor",
    "for-each",
    "gcd",
    "imag-part",
    "inexact",
    "inexact?",
    "infinite?",
    "integer->char",
    "integer-valued?",
    "integer?",
    "lcm",
    "length",
    "list",
    "list->string",
    "list->vector",
    "list-ref",
    "list-tail",
    "list?",
    "log",
    "magnitude",
    "make-polar",
    "make-rectangular",
    "make-string",
    "make-vector",
    "map",
    "max",
    "min",
    "nan?",
    "negative?",
    "not",
    "null?",
    "number->string",
    "number?",
    "numerator",
    "odd?",
    "pair?",
    "positive?",
    "procedure?",
    "rational-valued?",
    "rational?",
    "rationalize",
    "real-part",
    "real-valued?",
    "real?",
    "reverse",
    "round",
    "sin",
    "sqrt",
    "string",
    "string->list",
    "string->number",
    "string->symbol",
    "string-append",
    "string-copy",
    "string-for-each",
    "string-length",
    "string-ref",
    "string<=?",
    "string<?",
    "string=?",
    "string>=?",
    "string>?",
    "string?",
    "substring",
    "symbol->string",
    "symbol=?",
    "symbol?",
    "tan",
    "truncate",
    "values",
    "vector",
    "vector->list",
    "vector-fill!",
    "vector-for-each",
    "vector-length",
    "vector-map",
    "vector-ref",
    "vector-set!",
    "vector?",
    "zero?",
    "...",
    "=>",
    "_",
    "else",
    "bitwise-arithmetic-shift",
    "bitwise-arithmetic-shift-left",
    "bitwise-arithmetic-shift-right",
    "bitwise-not",
    "bitwise-and",
    "bitwise-ior",
    "bitwise-xor",
    "bitwise-bit-count",
    "bitwise-bit-field",
    "bitwise-bit-set?",
    "bitwise-copy-bit",
    "bitwise-copy-bit-field",
    "bitwise-first-bit-set",
    "bitwise-if",
    "bitwise-length",
    "bitwise-reverse-bit-field",
    "bitwise-rotate-bit-field",
    "fixnum?",
    "fixnum-width", 
    "least-fixnum", 
    "greatest-fixnum", 
    "fx*",
    "fx*/carry",
    "fx+",
    "fx+/carry",
    "fx-",
    "fx-/carry",
    "fx<=?",
    "fx<?",
    "fx=?",
    "fx>=?",
    "fx>?",
    "fxand",
    "fxarithmetic-shift",
    "fxarithmetic-shift-left",
    "fxarithmetic-shift-right",
    "fxbit-count",
    "fxbit-field",
    "fxbit-set?",
    "fxcopy-bit",
    "fxcopy-bit-field",
    "fxdiv",
    "fxdiv-and-mod",
    "fxdiv0",
    "fxdiv0-and-mod0",
    "fxeven?",
    "fxfirst-bit-set",
    "fxif",
    "fxior",
    "fxlength",
    "fxmax",
    "fxmin",
    "fxmod",
    "fxmod0",
    "fxnegative?",
    "fxnot",
    "fxodd?",
    "fxpositive?",
    "fxreverse-bit-field",
    "fxrotate-bit-field",
    "fxxor",
    "fxzero?",
    "fixnum->flonum",
    "fl*",
    "fl+",
    "fl-",
    "fl/",
    "fl<=?",
    "fl<?",
    "fl=?",
    "fl>=?",
    "fl>?",
    "flabs",
    "flacos",
    "flasin",
    "flatan",
    "flceiling",
    "flcos",
    "fldenominator",
    "fldiv",
    "fldiv-and-mod",
    "fldiv0",
    "fldiv0-and-mod0",
    "fleven?",
    "flexp",
    "flexpt",
    "flfinite?",
    "flfloor",
    "flinfinite?",
    "flinteger?",
    "fllog",
    "flmax",
    "flmin",
    "flmod",
    "flmod0",
    "flnan?",
    "flnegative?",
    "flnumerator",
    "flodd?",
    "flonum?",
    "flpositive?",
    "flround",
    "flsin",
    "flsqrt",
    "fltan",
    "fltruncate",
    "flzero?",
    "real->flonum",
    "make-no-infinities-violation",
    "make-no-nans-violation",
    "&no-infinities",
    "no-infinities-violation?",
    "&no-nans",
    "no-nans-violation?",
    "bytevector->sint-list",
    "bytevector->u8-list",
    "bytevector->uint-list",
    "bytevector-copy",
    "bytevector-copy!",
    "bytevector-fill!",
    "bytevector-ieee-double-native-ref",
    "bytevector-ieee-double-native-set!",
    "bytevector-ieee-double-ref",
    "bytevector-ieee-double-set!",
    "bytevector-ieee-single-native-ref",
    "bytevector-ieee-single-native-set!",
    "bytevector-ieee-single-ref",
    "bytevector-ieee-single-set!",    
    "bytevector-length",
    "bytevector-s16-native-ref",
    "bytevector-s16-native-set!",
    "bytevector-s16-ref",
    "bytevector-s16-set!",
    "bytevector-s32-native-ref",
    "bytevector-s32-native-set!",
    "bytevector-s32-ref",
    "bytevector-s32-set!",
    "bytevector-s64-native-ref",
    "bytevector-s64-native-set!",
    "bytevector-s64-ref",
    "bytevector-s64-set!",
    "bytevector-s8-ref",
    "bytevector-s8-set!",
    "bytevector-sint-ref",
    "bytevector-sint-set!",
    "bytevector-u16-native-ref",
    "bytevector-u16-native-set!",
    "bytevector-u16-ref",
    "bytevector-u16-set!",
    "bytevector-u32-native-ref",
    "bytevector-u32-native-set!",
    "bytevector-u32-ref",
    "bytevector-u32-set!",
    "bytevector-u64-native-ref",
    "bytevector-u64-native-set!",
    "bytevector-u64-ref",
    "bytevector-u64-set!",
    "bytevector-u8-ref",
    "bytevector-u8-set!",
    "bytevector-uint-ref",
    "bytevector-uint-set!",
    "bytevector=?",
    "bytevector?",
    "endianness",
    "native-endianness",
    "sint-list->bytevector",
    "string->utf16",
    "string->utf32",
    "string->utf8",
    "u8-list->bytevector",
    "uint-list->bytevector",
    "utf8->string",
    "utf16->string",
    "utf32->string",
    "condition?",
    "&assertion",
    "assertion-violation?",
    "&condition",
    "condition",
    "condition-accessor",
    "condition-irritants",
    "condition-message",
    "condition-predicate",
    "condition-who",
    "define-condition-type",
    "&error",
    "error?",
    "&implementation-restriction",
    "implementation-restriction-violation?",
    "&irritants",
    "irritants-condition?",
    "&lexical",
    "lexical-violation?",
    "make-assertion-violation",
    "make-error",
    "make-implementation-restriction-violation",
    "make-irritants-condition",
    "make-lexical-violation",
    "make-message-condition",
    "make-non-continuable-violation",
    "make-serious-condition",
    "make-syntax-violation",
    "make-undefined-violation",
    "make-violation",
    "make-warning",
    "make-who-condition",
    "&message",
    "message-condition?",
    "&non-continuable",
    "non-continuable-violation?",
    "&serious",
    "serious-condition?",
    "simple-conditions",
    "&syntax",
    "syntax-violation",
    "syntax-violation-form",
    "syntax-violation-subform",
    "syntax-violation?",
    "&undefined",
    "undefined-violation?",
    "&violation",
    "violation?",
    "&warning",
    "warning?",
    "&who",
    "who-condition?",
    "case-lambda",
    "do",
    "unless",
    "when",
    "define-enumeration",
    "enum-set->list",
    "enum-set-complement",
    "enum-set-constructor",
    "enum-set-difference",
    "enum-set-indexer",
    "enum-set-intersection",
    "enum-set-member?",
    "enum-set-projection",
    "enum-set-subset?",
    "enum-set-union",
    "enum-set-universe",
    "enum-set=?",
    "make-enumeration",
    "environment",
    "eval",
    "raise",
    "raise-continuable",
    "with-exception-handler",
    "guard",
    "assoc",
    "assp",
    "assq",
    "assv",
    "cons*",
    "filter",
    "find",
    "fold-left",
    "fold-right",
    "for-all",
    "exists",
    "member",
    "memp",
    "memq",
    "memv",
    "partition",
    "remq",
    "remp",
    "remv",
    "remove",
    "set-car!",
    "set-cdr!",
    "string-set!",
    "string-fill!",
    "command-line",
    "exit",
    "delay",
    "exact->inexact",
    "force",
    "inexact->exact",
    "modulo",
    "remainder",
    "null-environment",
    "quotient",
    "scheme-report-environment",
    "binary-port?",
    "buffer-mode",
    "buffer-mode?",
    "bytevector->string",
    "call-with-bytevector-output-port",
    "call-with-port",
    "call-with-string-output-port",
    "close-port",
    "eol-style",
    "error-handling-mode",
    "file-options",
    "flush-output-port",
    "get-bytevector-all",
    "get-bytevector-n",
    "get-bytevector-n!",
    "get-bytevector-some",
    "get-char",
    "get-datum",
    "get-line",
    "get-string-all",
    "get-string-n",
    "get-string-n!",
    "get-u8",
    "&i/o",
    "&i/o-decoding",
    "i/o-decoding-error?",
    "&i/o-encoding",
    "i/o-encoding-error-char",
    "i/o-encoding-error?",
    "i/o-error-filename",
    "i/o-error-port",
    "i/o-error?",
    "&i/o-file-already-exists",
    "i/o-file-already-exists-error?",
    "&i/o-file-does-not-exist",
    "i/o-file-does-not-exist-error?",
    "&i/o-file-is-read-only",
    "i/o-file-is-read-only-error?",
    "&i/o-file-protection",
    "i/o-file-protection-error?",
    "&i/o-filename",
    "i/o-filename-error?",
    "&i/o-invalid-position",
    "i/o-invalid-position-error?",
    "&i/o-port",
    "i/o-port-error?",
    "&i/o-read",
    "i/o-read-error?",
    "&i/o-write",
    "i/o-write-error?",
    "lookahead-char",
    "lookahead-u8",
    "make-bytevector",
    "make-custom-binary-input-port",
    "make-custom-binary-input/output-port",
    "make-custom-binary-output-port",
    "make-custom-textual-input-port",
    "make-custom-textual-input/output-port",
    "make-custom-textual-output-port",
    "make-i/o-decoding-error",
    "make-i/o-encoding-error",
    "make-i/o-error",
    "make-i/o-file-already-exists-error",
    "make-i/o-file-does-not-exist-error",
    "make-i/o-file-is-read-only-error",
    "make-i/o-file-protection-error",
    "make-i/o-filename-error",
    "make-i/o-invalid-position-error",
    "make-i/o-port-error",
    "make-i/o-read-error",
    "make-i/o-write-error",
    "latin-1-codec",
    "make-transcoder",
    "native-eol-style",
    "native-transcoder",
    "open-bytevector-input-port",
    "open-bytevector-output-port",
    "open-file-input-port",
    "open-file-input/output-port",
    "open-file-output-port",
    "open-string-input-port",
    "open-string-output-port",
    "output-port-buffer-mode",
    "port-eof?",
    "port-has-port-position?",
    "port-has-set-port-position!?",
    "port-position",
    "port-transcoder",
    "port?",
    "put-bytevector",
    "put-char",
    "put-datum",
    "put-string",
    "put-u8",
    "set-port-position!",
    "standard-error-port",
    "standard-input-port",
    "standard-output-port",
    "string->bytevector",
    "textual-port?",
    "transcoded-port",
    "transcoder-codec",
    "transcoder-eol-style",
    "transcoder-error-handling-mode",
    "utf-16-codec",
    "utf-8-codec",
    "input-port?",
    "output-port?",
    "current-input-port",
    "current-output-port",
    "current-error-port",
    "eof-object",
    "eof-object?",
    "close-input-port",
    "close-output-port",
    "display",
    "newline",
    "open-input-file",
    "open-output-file",
    "peek-char",
    "read",
    "read-char",
    "with-input-from-file",
    "with-output-to-file",
    "write",
    "write-char",
    "call-with-input-file",
    "call-with-output-file",
    "hashtable-clear!",
    "hashtable-contains?",
    "hashtable-copy",
    "hashtable-delete!",
    "hashtable-entries",
    "hashtable-keys",
    "hashtable-mutable?",
    "hashtable-ref",
    "hashtable-set!",
    "hashtable-size",
    "hashtable-update!",
    "hashtable?",
    "make-eq-hashtable",
    "make-eqv-hashtable",
    "hashtable-hash-function",
    "make-hashtable",
    "hashtable-equivalence-function",
    "equal-hash",
    "string-hash",
    "string-ci-hash",
    "symbol-hash",
    "list-sort",
    "vector-sort",
    "vector-sort!",
    "file-exists?",
    "delete-file",
    "define-record-type",
    "fields",
    "immutable",
    "mutable",
    "opaque",
    "parent",
    "parent-rtd",
    "protocol",
    "record-constructor-descriptor",
    "record-type-descriptor",
    "sealed",
    "nongenerative",
    "record-field-mutable?",
    "record-rtd",
    "record-type-field-names",
    "record-type-generative?",
    "record-type-name",
    "record-type-opaque?",
    "record-type-parent",
    "record-type-sealed?",
    "record-type-uid",
    "record?",
    "make-record-constructor-descriptor",
    "make-record-type-descriptor",
    "record-accessor",
    "record-constructor",
    "record-mutator",
    "record-predicate",
    "record-type-descriptor?",
    "bound-identifier=?",
    "datum->syntax",
    "syntax",
    "syntax->datum",
    "syntax-case",
    "unsyntax",
    "unsyntax-splicing",
    "quasisyntax",
    "with-syntax",
    "free-identifier=?",
    "generate-temporaries",
    "identifier?",
    "make-variable-transformer",
    "char-alphabetic?",
    "char-ci<=?",
    "char-ci<?",
    "char-ci=?",
    "char-ci>=?",
    "char-ci>?",
    "char-downcase",
    "char-foldcase",
    "char-titlecase",
    "char-upcase",
    "char-general-category",
    "char-lower-case?",
    "char-numeric?",
    "char-title-case?",
    "char-upper-case?",
    "char-whitespace?",
    "string-ci<=?",
    "string-ci<?",
    "string-ci=?",
    "string-ci>=?",
    "string-ci>?",
    "string-downcase",
    "string-foldcase",
    "string-normalize-nfc",
    "string-normalize-nfd",
    "string-normalize-nfkc",
    "string-normalize-nfkd",
    "string-titlecase",
    "string-upcase",
    "load",
    "void",
    "pretty-print",
    "ironscheme-build",
    "stacktrace",
    "load-r5rs",
    "last-pair",
    "clr-call",
    "clr-static-call",
    "clr-cast",
    "clr-new",
    "clr-foreach",
    "make-list",
    "read-annotated",
    "annotation?",
    "annotation-expression",
    "annotation-source",
    "annotation-stripped",
        };

      #endregion

      foreach (string id in allids)
      {
        Add(id);
      }
      

      ids.Sort();
    }

    static void Add(string id)
    {
      ids.Add(id);
    }
  }
}
