//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  0.6.2.196 (2007-11-13)
//  Machine:  DT01276
//  DateTime: 2009/08/11 02:52:38 PM
//  UserName: pritchl
//  GPLEX input file <IronScheme.lex>
//  GPLEX frame file <c:\DevProjects\IronScheme\IronScheme\tools\gplexx.frame>
//
//  Option settings: unicode, parser, stack, minimize, classes, compressmap, compressnext
//

#define BACKUP
#define STACK
//
// gplexx.frame
// Version 0.6.2 of 13-November-2007
// Derived from gplex.frame version of 2-September-2006. 
// Left and Right Anchored state support.
// Start condition stack. Two generic params.
// Using fixed length context handling for right anchors
//
using System;
using System.IO;
using System.Collections.Generic;
using Microsoft.Scripting;
using System.Text;
#if !STANDALONE
using gppg;
#endif


namespace IronScheme.Compiler
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

    public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

    public abstract class ScanBase
    {
        public abstract int yylex();
#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
    public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE

    public abstract class ScanBuff
    {
        public const int EOF = -1;
        public abstract int Pos { get; set; }
        public abstract int Read();
        public abstract int Peek();
        public abstract int ReadPos { get; }
        public abstract string GetString(int b, int e);
    }
    
    // If the compiler can't find ScanBase maybe you need to run
    // GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
    public sealed partial class Scanner : ScanBase, IColorScan
    {
        public ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
    public sealed partial class Scanner : ScanBase
    {
        public ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        private static int GetMaxParseToken() {
            System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 266;
        const int initial = 267;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int ML_COMMENT = 1;

/* ****************************************************************************
 * Copyright (c) Llewellyn Pritchard. 
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. 
 * A copy of the license can be found in the License.html file at the root of this distribution. 
 * By using this source code in any fashion, you are agreeing to be bound by the terms of the 
 * Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 * ***************************************************************************/
void FixLineNum(string text)
{
  if (text.EndsWith("\n") || text.EndsWith("\r"))
  {
    lNum--;
  }
}

public override void yyerror(string format, params object[] args)
{
  if (!format.Contains("EOF"))
  {
    Console.Error.WriteLine(format, args);
  }
}

int diff()
{
  return chr == -1 ? 0 : -1;
}

public int MakeSymbol()
{
  string t = yytext;
  FixLineNum(t);
  t = t.Substring(0, t.Length + diff());
  yylval.text = t;
  yyless(t.Length);
  yylloc = new LexLocation(yyline,yycol,yyline,yycol + yyleng);
  return (int)Tokens.SYMBOL;
}

public int MakeBoolean()
{
  string t = yytext;
  FixLineNum(t);
  t = t.Substring(0, t.Length + diff());
  yylval.text = t.ToLower();
  yyless(t.Length);
  yylloc = new LexLocation(yyline,yycol,yyline,yycol + yyleng);
  return (int)Tokens.LITERAL;
}

public int MakeNumber()
{
  string t = yytext;
  FixLineNum(t);
  t = t.Substring(0, t.Length + diff());
  yylval.text = t;
  yyless(t.Length);
  yylloc = new LexLocation(yyline,yycol,yyline,yycol + yyleng);
  return (int)Tokens.NUMBER;
}

public int MakeChar()
{
  string t = yytext;
  FixLineNum(t);
  t = t.Substring(0, t.Length + diff());
  yylval.text = Helper.ParseChar(t);
  yyless(t.Length);
  yylloc = new LexLocation(yyline,yycol,yyline,yycol + yyleng);
  return (int)Tokens.CHARACTER;
}


public int Make(Tokens token)
{
  yylval.text = yytext;
  yylloc = new LexLocation(yyline,yycol,yyline,yycol + yyleng);
  return (int)token;
}
        int state;
        int currentStart = initial;
        int chr;           // last character read
        int cNum = 0;      // ordinal number of chr
        int lNum = 0;      // current line number
        int lineStartNum;  // ordinal number at start of line
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokNum;        // ordinal number of first character
        int tokLen;        // number of characters in token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = {267, 347, 0};

#region CharacterMap
    //
    // There are 63 equivalence classes
    // There are 95 character sequence regions
    // There are 33 tables, 5416 entries
    // There are 62 runs, 0 singletons
    //
    static sbyte[] map0 = new sbyte[248] {
/* \0     */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 2, 0, 1, 3, 0, 0, 
/* \020   */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \040   */ 29, 5, 47, 4, 23, 23, 23, 61, 58, 34, 23, 27, 62, 10, 28, 30, 
/* 0      */ 52, 51, 54, 54, 54, 54, 54, 54, 59, 20, 23, 22, 23, 23, 16, 23, 
/* @      */ 24, 21, 48, 21, 55, 50, 33, 17, 17, 49, 17, 17, 56, 17, 17, 53, 
/* P      */ 17, 17, 17, 56, 32, 17, 17, 17, 57, 17, 17, 25, 18, 26, 23, 23, 
/* `      */ 60, 12, 39, 11, 9, 14, 6, 46, 17, 43, 17, 40, 8, 38, 15, 7, 
/* p      */ 41, 17, 37, 13, 42, 36, 45, 44, 19, 17, 17, 0, 31, 0, 23, 0, 
/* \200   */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \220   */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \240   */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 
/* \260   */ 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 
/* \300   */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \320   */ 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \340   */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \360   */ 17, 17, 17, 17, 17, 17, 17, 0 };
    static sbyte[] map2 = new sbyte[45] {
/* \u02C2 */ 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u02D2 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 
/* \u02E2 */ 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17 };
    static sbyte[] map4 = new sbyte[125] {
/* \u037A */ 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 17, 17, 
/* \u038A */ 17, 0, 17, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u039A */ 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 
/* \u03AA */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u03BA */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u03CA */ 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u03DA */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u03EA */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0 };
    static sbyte[] map8 = new sbyte[116] {
/* \u0514 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0524 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 
/* \u0534 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0544 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0554 */ 17, 17, 17, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 
/* \u0564 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0574 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0584 */ 17, 17, 17, 17 };
    static sbyte[] map10 = new sbyte[161] {
/* \u05D0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u05E0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 
/* \u05F0 */ 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0600 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0610 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0620 */ 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0630 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 
/* \u0640 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 
/* \u0650 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0660 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 
0 };
    static sbyte[] map12 = new sbyte[295] {
/* \u06D4 */ 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u06E4 */ 0, 17, 17, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 0, 0, 
/* \u06F4 */ 0, 0, 0, 0, 0, 0, 17, 17, 17, 0, 0, 17, 0, 0, 0, 0, 
/* \u0704 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 17, 17, 
/* \u0714 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0724 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 
/* \u0734 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0744 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 
/* \u0754 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0764 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 
/* \u0774 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 
/* \u0784 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0794 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u07A4 */ 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 
/* \u07B4 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u07C4 */ 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u07D4 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u07E4 */ 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u07F4 */ 17, 17, 0, 0, 0, 0, 17 };
    static sbyte[] map14 = new sbyte[694] {
/* \u0904 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0914 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0924 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0934 */ 17, 17, 17, 17, 17, 17, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 
/* \u0944 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 
/* \u0954 */ 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 
/* \u0964 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0974 */ 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 0, 0, 0, 0, 
/* \u0984 */ 0, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 17, 17, 0, 0, 17, 
/* \u0994 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u09A4 */ 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 0, 17, 0, 
/* \u09B4 */ 0, 0, 17, 17, 17, 17, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 
/* \u09C4 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 
/* \u09D4 */ 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 17, 17, 17, 0, 0, 
/* \u09E4 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 
/* \u09F4 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0A04 */ 0, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 17, 17, 0, 0, 17, 
/* \u0A14 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0A24 */ 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 
/* \u0A34 */ 0, 17, 17, 0, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0A44 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0A54 */ 0, 0, 0, 0, 0, 17, 17, 17, 17, 0, 17, 0, 0, 0, 0, 0, 
/* \u0A64 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 
/* \u0A74 */ 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0A84 */ 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 0, 17, 
/* \u0A94 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0AA4 */ 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 
/* \u0AB4 */ 0, 17, 17, 17, 17, 17, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 
/* \u0AC4 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 
/* \u0AD4 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 
/* \u0AE4 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0AF4 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0B04 */ 0, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 17, 17, 0, 0, 17, 
/* \u0B14 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0B24 */ 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 
/* \u0B34 */ 0, 17, 17, 17, 17, 17, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 
/* \u0B44 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0B54 */ 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 17, 17, 17, 0, 0, 
/* \u0B64 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 
/* \u0B74 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 
/* \u0B84 */ 0, 17, 17, 17, 17, 17, 17, 0, 0, 0, 17, 17, 17, 0, 17, 17, 
/* \u0B94 */ 17, 17, 0, 0, 0, 17, 17, 0, 17, 0, 17, 17, 0, 0, 0, 17, 
/* \u0BA4 */ 17, 0, 0, 0, 17, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 
/* \u0BB4 */ 17, 17, 17, 17, 17, 17 };
    static sbyte[] map16 = new sbyte[903] {
/* \u0C05 */ 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 0, 17, 17, 17, 
/* \u0C15 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0C25 */ 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 
/* \u0C35 */ 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0C45 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0C55 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 0, 
/* \u0C65 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0C75 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0C85 */ 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 0, 17, 17, 17, 
/* \u0C95 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0CA5 */ 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 
/* \u0CB5 */ 17, 17, 17, 17, 17, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 
/* \u0CC5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0CD5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 17, 17, 0, 0, 0, 
/* \u0CE5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0CF5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0D05 */ 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 0, 17, 17, 17, 
/* \u0D15 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0D25 */ 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0D35 */ 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0D45 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0D55 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 0, 
/* \u0D65 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0D75 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0D85 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0D95 */ 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0DA5 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 
/* \u0DB5 */ 17, 17, 17, 17, 17, 17, 17, 0, 17, 0, 0, 17, 17, 17, 17, 17, 
/* \u0DC5 */ 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0DD5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0DE5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0DF5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 
/* \u0E05 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0E15 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0E25 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 0, 
/* \u0E35 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 
/* \u0E45 */ 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0E55 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0E65 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0E75 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 17, 
/* \u0E85 */ 0, 0, 17, 17, 0, 17, 0, 0, 17, 0, 0, 0, 0, 0, 0, 17, 
/* \u0E95 */ 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 0, 
/* \u0EA5 */ 17, 0, 17, 0, 0, 17, 17, 0, 17, 17, 17, 17, 0, 17, 17, 0, 
/* \u0EB5 */ 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 17, 17, 17, 17, 17, 
/* \u0EC5 */ 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0ED5 */ 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 0, 0, 0, 0, 0, 
/* \u0EE5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0EF5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 
/* \u0F05 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0F15 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0F25 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0F35 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 
/* \u0F45 */ 17, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0F55 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u0F65 */ 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0F75 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u0F85 */ 0, 0, 0, 17, 17, 17, 17 };
    static sbyte[] map18 = new sbyte[86] {
/* \u1000 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1010 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1020 */ 17, 17, 0, 17, 17, 17, 17, 17, 0, 17, 17, 0, 0, 0, 0, 0, 
/* \u1030 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u1040 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u1050 */ 17, 17, 17, 17, 17, 17 };
    static sbyte[] map20 = new sbyte[96] {
/* \u10A0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u10B0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u10C0 */ 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u10D0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u10E0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u10F0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 0, 0, 0 };
    static sbyte[] map28 = new sbyte[207] {
/* \u1249 */ 0, 17, 17, 17, 17, 0, 0, 17, 17, 17, 17, 17, 17, 17, 0, 17, 
/* \u1259 */ 0, 17, 17, 17, 17, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1269 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1279 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1289 */ 0, 17, 17, 17, 17, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1299 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u12A9 */ 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 0, 0, 17, 
/* \u12B9 */ 17, 17, 17, 17, 17, 17, 0, 17, 0, 17, 17, 17, 17, 0, 0, 17, 
/* \u12C9 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 
/* \u12D9 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u12E9 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u12F9 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1309 */ 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 0, 0 };
    static sbyte[] map30 = new sbyte[69] {
/* \u135B */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u136B */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u137B */ 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u138B */ 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u139B */ 0, 0, 0, 0, 0 };
    static sbyte[] map34 = new sbyte[51] {
/* \u166D */ 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 
/* \u167D */ 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u168D */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 
/* \u169D */ 0, 0, 0 };
    static sbyte[] map36 = new sbyte[242] {
/* \u16EB */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u16FB */ 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u170B */ 17, 17, 0, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u171B */ 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u172B */ 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u173B */ 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u174B */ 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u175B */ 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u176B */ 17, 17, 0, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u177B */ 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u178B */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u179B */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u17AB */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 
/* \u17BB */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u17CB */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 
/* \u17DB */ 0, 17 };
    static sbyte[] map39 = new sbyte[49] {
/* \u1878 */ 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1888 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1898 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
17 };
    static sbyte[] map41 = new sbyte[279] {
/* \u1900 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1910 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 
/* \u1920 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u1930 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u1940 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u1950 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1960 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 
/* \u1970 */ 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u1980 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1990 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u19A0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 
/* \u19B0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u19C0 */ 0, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u19D0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u19E0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u19F0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u1A00 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1A10 */ 17, 17, 17, 17, 17, 17, 17 };
    static sbyte[] map43 = new sbyte[71] {
/* \u1B05 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1B15 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1B25 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 
/* \u1B35 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u1B45 */ 17, 17, 17, 17, 17, 17, 17 };
    static sbyte[] map50 = new sbyte[259] {
/* \u1EFA */ 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1F0A */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 17, 17, 
/* \u1F1A */ 17, 17, 17, 17, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1F2A */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1F3A */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 17, 17, 
/* \u1F4A */ 17, 17, 17, 17, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 
/* \u1F5A */ 0, 17, 0, 17, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1F6A */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1F7A */ 17, 17, 17, 17, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1F8A */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1F9A */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1FAA */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 
/* \u1FBA */ 17, 17, 17, 0, 17, 0, 0, 0, 17, 17, 17, 0, 17, 17, 17, 17, 
/* \u1FCA */ 17, 17, 17, 0, 0, 0, 17, 17, 17, 17, 0, 0, 17, 17, 17, 17, 
/* \u1FDA */ 17, 17, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u1FEA */ 17, 17, 17, 0, 0, 0, 0, 0, 17, 17, 17, 0, 17, 17, 17, 17, 
/* \u1FFA */ 17, 17, 17 };
    static sbyte[] map52 = new sbyte[36] {
/* \u2071 */ 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 
/* \u2081 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 
/* \u2091 */ 17, 17, 17, 17 };
    static sbyte[] map54 = new sbyte[131] {
/* \u2102 */ 17, 0, 0, 0, 0, 17, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2112 */ 17, 17, 0, 17, 0, 0, 0, 17, 17, 17, 17, 17, 0, 0, 0, 0, 
/* \u2122 */ 0, 0, 17, 0, 17, 0, 17, 0, 17, 17, 17, 17, 0, 17, 17, 17, 
/* \u2132 */ 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 17, 17, 17, 17, 0, 0, 
/* \u2142 */ 0, 0, 0, 17, 17, 17, 17, 17, 0, 0, 0, 0, 17, 0, 0, 0, 
/* \u2152 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u2162 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u2172 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u2182 */ 0, 17, 17 };
    static sbyte[] map56 = new sbyte[128] {
/* \u2C00 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2C10 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2C20 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 
/* \u2C30 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2C40 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2C50 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 
/* \u2C60 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 
/* \u2C70 */ 0, 0, 0, 0, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] map58 = new sbyte[250] {
/* \u2CE5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u2CF5 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 
/* \u2D05 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2D15 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2D25 */ 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 
/* \u2D35 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2D45 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2D55 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2D65 */ 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 
/* \u2D75 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 
/* \u2D85 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u2D95 */ 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 
/* \u2DA5 */ 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 
/* \u2DB5 */ 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 
/* \u2DC5 */ 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 17, 17, 17, 
/* \u2DD5 */ 17, 17, 0, 17, 17, 17, 17, 17, 17, 17 };
    static sbyte[] map60 = new sbyte[60] {
/* \u3005 */ 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u3015 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u3025 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 
/* \u3035 */ 17, 0, 0, 0, 0, 0, 17, 17, 0, 0, 0, 0 };
    static sbyte[] map62 = new sbyte[10] {
/* \u3097 */ 0, 0, 0, 0, 0, 0, 17, 17, 17, 0 };
    static sbyte[] map64 = new sbyte[54] {
/* \u30FB */ 0, 17, 17, 17, 17, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 
/* \u310B */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u311B */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u312B */ 17, 17, 0, 0, 0, 0 };
    static sbyte[] map66 = new sbyte[113] {
/* \u318F */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u319F */ 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \u31AF */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 
/* \u31BF */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u31CF */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u31DF */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \u31EF */ 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
17 };
    static sbyte[] map76 = new sbyte[116] {
/* \uA800 */ 17, 17, 0, 17, 17, 17, 0, 17, 17, 17, 17, 0, 17, 17, 17, 17, 
/* \uA810 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uA820 */ 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uA830 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uA840 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uA850 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uA860 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uA870 */ 17, 17, 17, 17 };
    static sbyte[] map81 = new sbyte[66] {
/* \uFA2E */ 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFA3E */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFA4E */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFA5E */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 
/* \uFA6E */ 0, 0 };
    static sbyte[] map83 = new sbyte[108] {
/* \uFADA */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uFAEA */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uFAFA */ 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 
/* \uFB0A */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 0, 0, 
/* \uFB1A */ 0, 0, 0, 17, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 
/* \uFB2A */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 17, 17, 
/* \uFB3A */ 17, 17, 17, 0, 17, 0, 17, 17, 0, 17, 17, 0 };
    static sbyte[] map88 = new sbyte[172] {
/* \uFD50 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFD60 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFD70 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFD80 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFD90 */ 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFDA0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFDB0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFDC0 */ 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uFDD0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uFDE0 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uFDF0 */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17 };
    static sbyte[] map90 = new sbyte[6] {
/* \uFE70 */ 17, 17, 17, 17, 17, 0 };
    static sbyte[] map92 = new sbyte[105] {
/* \uFEFD */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uFF0D */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uFF1D */ 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFF2D */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 
/* \uFF3D */ 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
/* \uFF4D */ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 
/* \uFF5D */ 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    static sbyte[] map94 = new sbyte[65] {
/* \uFFBF */ 0, 0, 0, 17, 17, 17, 17, 17, 17, 0, 0, 17, 17, 17, 17, 17, 
/* \uFFCF */ 17, 0, 0, 17, 17, 17, 17, 17, 17, 0, 0, 17, 17, 17, 0, 0, 
/* \uFFDF */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* \uFFEF */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0 };

    sbyte Map(int chr)
    { // '\0' <= chr <= '\uFFFF'
      if (chr < 7680) // '\0' <= chr <= '\u1DFF'
        if (chr < 4447) // '\0' <= chr <= '\u115E'
          if (chr < 1649) // '\0' <= chr <= '\u0670'
            if (chr < 1015) // '\0' <= chr <= '\u03F6'
              if (chr < 706) // '\0' <= chr <= '\u02C1'
                if (chr < 248) return map0[chr - 0];
                else return (sbyte)17;
              else // '\u02C2' <= chr <= '\u03F6'
                if (chr < 751) return map2[chr - 706];
                else // '\u02EF' <= chr <= '\u03F6'
                  if (chr < 890) return (sbyte)0;
                  else return map4[chr - 890];
            else // '\u03F7' <= chr <= '\u0670'
              if (chr < 1300) // '\u03F7' <= chr <= '\u0513'
                if (chr < 1154) return (sbyte)17;
                else // '\u0482' <= chr <= '\u0513'
                  if (chr < 1162) return (sbyte)0;
                  else return (sbyte)17;
              else // '\u0514' <= chr <= '\u0670'
                if (chr < 1416) return map8[chr - 1300];
                else // '\u0588' <= chr <= '\u0670'
                  if (chr < 1488) return (sbyte)0;
                  else return map10[chr - 1488];
          else // '\u0671' <= chr <= '\u115E'
            if (chr < 3980) // '\u0671' <= chr <= '\u0F8B'
              if (chr < 2308) // '\u0671' <= chr <= '\u0903'
                if (chr < 1748) return (sbyte)17;
                else // '\u06D4' <= chr <= '\u0903'
                  if (chr < 2043) return map12[chr - 1748];
                  else return (sbyte)0;
              else // '\u0904' <= chr <= '\u0F8B'
                if (chr < 3002) return map14[chr - 2308];
                else // '\u0BBA' <= chr <= '\u0F8B'
                  if (chr < 3077) return (sbyte)0;
                  else return map16[chr - 3077];
            else // '\u0F8C' <= chr <= '\u115E'
              if (chr < 4256) // '\u0F8C' <= chr <= '\u109F'
                if (chr < 4096) return (sbyte)0;
                else // '\u1000' <= chr <= '\u109F'
                  if (chr < 4182) return map18[chr - 4096];
                  else return (sbyte)0;
              else // '\u10A0' <= chr <= '\u115E'
                if (chr < 4352) return map20[chr - 4256];
                else // '\u1100' <= chr <= '\u115E'
                  if (chr < 4442) return (sbyte)17;
                  else return (sbyte)0;
        else // '\u115F' <= chr <= '\u1DFF'
          if (chr < 5792) // '\u115F' <= chr <= '\u169F'
            if (chr < 4888) // '\u115F' <= chr <= '\u1317'
              if (chr < 4602) // '\u115F' <= chr <= '\u11F9'
                if (chr < 4515) return (sbyte)17;
                else // '\u11A3' <= chr <= '\u11F9'
                  if (chr < 4520) return (sbyte)0;
                  else return (sbyte)17;
              else // '\u11FA' <= chr <= '\u1317'
                if (chr < 4608) return (sbyte)0;
                else // '\u1200' <= chr <= '\u1317'
                  if (chr < 4681) return (sbyte)17;
                  else return map28[chr - 4681];
            else // '\u1318' <= chr <= '\u169F'
              if (chr < 5109) // '\u1318' <= chr <= '\u13F4'
                if (chr < 4955) return (sbyte)17;
                else // '\u135B' <= chr <= '\u13F4'
                  if (chr < 5024) return map30[chr - 4955];
                  else return (sbyte)17;
              else // '\u13F5' <= chr <= '\u169F'
                if (chr < 5121) return (sbyte)0;
                else // '\u1401' <= chr <= '\u169F'
                  if (chr < 5741) return (sbyte)17;
                  else return map34[chr - 5741];
          else // '\u16A0' <= chr <= '\u1DFF'
            if (chr < 6400) // '\u16A0' <= chr <= '\u18FF'
              if (chr < 6176) // '\u16A0' <= chr <= '\u181F'
                if (chr < 5867) return (sbyte)17;
                else // '\u16EB' <= chr <= '\u181F'
                  if (chr < 6109) return map36[chr - 5867];
                  else return (sbyte)0;
              else // '\u1820' <= chr <= '\u18FF'
                if (chr < 6264) return (sbyte)17;
                else // '\u1878' <= chr <= '\u18FF'
                  if (chr < 6313) return map39[chr - 6264];
                  else return (sbyte)0;
            else // '\u1900' <= chr <= '\u1DFF'
              if (chr < 6988) // '\u1900' <= chr <= '\u1B4B'
                if (chr < 6679) return map41[chr - 6400];
                else // '\u1A17' <= chr <= '\u1B4B'
                  if (chr < 6917) return (sbyte)0;
                  else return map43[chr - 6917];
              else // '\u1B4C' <= chr <= '\u1DFF'
                if (chr < 7424) return (sbyte)0;
                else // '\u1D00' <= chr <= '\u1DFF'
                  if (chr < 7616) return (sbyte)17;
                  else return (sbyte)0;
      else // '\u1E00' <= chr <= '\uFFFF'
        if (chr < 40892) // '\u1E00' <= chr <= '\u9FBB'
          if (chr < 11743) // '\u1E00' <= chr <= '\u2DDE'
            if (chr < 8341) // '\u1E00' <= chr <= '\u2094'
              if (chr < 7930) // '\u1E00' <= chr <= '\u1EF9'
                if (chr < 7836) return (sbyte)17;
                else // '\u1E9C' <= chr <= '\u1EF9'
                  if (chr < 7840) return (sbyte)0;
                  else return (sbyte)17;
              else // '\u1EFA' <= chr <= '\u2094'
                if (chr < 8189) return map50[chr - 7930];
                else // '\u1FFD' <= chr <= '\u2094'
                  if (chr < 8305) return (sbyte)0;
                  else return map52[chr - 8305];
            else // '\u2095' <= chr <= '\u2DDE'
              if (chr < 11264) // '\u2095' <= chr <= '\u2BFF'
                if (chr < 8450) return (sbyte)0;
                else // '\u2102' <= chr <= '\u2BFF'
                  if (chr < 8581) return map54[chr - 8450];
                  else return (sbyte)0;
              else // '\u2C00' <= chr <= '\u2DDE'
                if (chr < 11392) return map56[chr - 11264];
                else // '\u2C80' <= chr <= '\u2DDE'
                  if (chr < 11493) return (sbyte)17;
                  else return map58[chr - 11493];
          else // '\u2DDF' <= chr <= '\u9FBB'
            if (chr < 12593) // '\u2DDF' <= chr <= '\u3130'
              if (chr < 12439) // '\u2DDF' <= chr <= '\u3096'
                if (chr < 12293) return (sbyte)0;
                else // '\u3005' <= chr <= '\u3096'
                  if (chr < 12353) return map60[chr - 12293];
                  else return (sbyte)17;
              else // '\u3097' <= chr <= '\u3130'
                if (chr < 12449) return map62[chr - 12439];
                else // '\u30A1' <= chr <= '\u3130'
                  if (chr < 12539) return (sbyte)17;
                  else return map64[chr - 12539];
            else // '\u3131' <= chr <= '\u9FBB'
              if (chr < 13312) // '\u3131' <= chr <= '\u33FF'
                if (chr < 12687) return (sbyte)17;
                else // '\u318F' <= chr <= '\u33FF'
                  if (chr < 12800) return map66[chr - 12687];
                  else return (sbyte)0;
              else // '\u3400' <= chr <= '\u9FBB'
                if (chr < 19894) return (sbyte)17;
                else // '\u4DB6' <= chr <= '\u9FBB'
                  if (chr < 19968) return (sbyte)0;
                  else return (sbyte)17;
        else // '\u9FBC' <= chr <= '\uFFFF'
          if (chr < 64218) // '\u9FBC' <= chr <= '\uFAD9'
            if (chr < 43124) // '\u9FBC' <= chr <= '\uA873'
              if (chr < 42775) // '\u9FBC' <= chr <= '\uA716'
                if (chr < 40960) return (sbyte)0;
                else // '\uA000' <= chr <= '\uA716'
                  if (chr < 42125) return (sbyte)17;
                  else return (sbyte)0;
              else // '\uA717' <= chr <= '\uA873'
                if (chr < 42779) return (sbyte)17;
                else // '\uA71B' <= chr <= '\uA873'
                  if (chr < 43008) return (sbyte)0;
                  else return map76[chr - 43008];
            else // '\uA874' <= chr <= '\uFAD9'
              if (chr < 63744) // '\uA874' <= chr <= '\uF8FF'
                if (chr < 44032) return (sbyte)0;
                else // '\uAC00' <= chr <= '\uF8FF'
                  if (chr < 55204) return (sbyte)17;
                  else return (sbyte)0;
              else // '\uF900' <= chr <= '\uFAD9'
                if (chr < 64046) return (sbyte)17;
                else // '\uFA2E' <= chr <= '\uFAD9'
                  if (chr < 64112) return map81[chr - 64046];
                  else return (sbyte)17;
          else // '\uFADA' <= chr <= '\uFFFF'
            if (chr < 65020) // '\uFADA' <= chr <= '\uFDFB'
              if (chr < 64467) // '\uFADA' <= chr <= '\uFBD2'
                if (chr < 64326) return map83[chr - 64218];
                else // '\uFB46' <= chr <= '\uFBD2'
                  if (chr < 64434) return (sbyte)17;
                  else return (sbyte)0;
              else // '\uFBD3' <= chr <= '\uFDFB'
                if (chr < 64830) return (sbyte)17;
                else // '\uFD3E' <= chr <= '\uFDFB'
                  if (chr < 64848) return (sbyte)0;
                  else return map88[chr - 64848];
            else // '\uFDFC' <= chr <= '\uFFFF'
              if (chr < 65277) // '\uFDFC' <= chr <= '\uFEFC'
                if (chr < 65136) return (sbyte)0;
                else // '\uFE70' <= chr <= '\uFEFC'
                  if (chr < 65142) return map90[chr - 65136];
                  else return (sbyte)17;
              else // '\uFEFD' <= chr <= '\uFFFF'
                if (chr < 65382) return map92[chr - 65277];
                else // '\uFF66' <= chr <= '\uFFFF'
                  if (chr < 65471) return (sbyte)17;
                  else return map94[chr - 65471];
    }
#endregion

    static Table[] NxS = new Table[348];

    static Scanner() {
    NxS[0] = new Table(0, 0, 0, null);    NxS[1] = new Table(0, 0, -1, null);    NxS[2] = new Table(1, 35, -1, new short[] {2, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2});
    NxS[3] = new Table(3, 1, -1, new short[] {4});
    NxS[4] = new Table(0, 0, -1, null);    NxS[5] = new Table(31, 55, -1, new short[] {126, 287, 287, -1, -1, -1, 
          -1, -1, 293, -1, -1, 287, 290, -1, 294, -1, -1, 293, 290, 290, -1, -1, 
          288, -1, 289, -1, 292, 127, -1, 128, 129, 130, -1, -1, -1, -1, -1, 286, 
          287, 288, -1, 289, -1, -1, -1, -1, 290, -1, -1, -1, 291, 292, -1, -1, 
          125});
    NxS[6] = new Table(18, 50, 122, new short[] {123, 122, 122, 122, 29, 122, 
          122, 124, 29, 122, 122, 29, 122, 71, 122, 122, 29, 29, 122, 122, 122, 122, 
          122, 122, 122, 122, 122, 122, 122, 29, 122, 122, 122, 122, 122, 122, 122, 122, 
          122, 122, 29, 122, 71, 71, 71, 71, 29, 30, 29, 29});
    NxS[7] = new Table(15, 53, 71, new short[] {72, 122, 71, 71, 71, 73, 
          71, 29, 71, 71, 29, 29, 71, 74, 29, 71, 71, 71, 71, 29, 29, 71, 
          71, 71, 71, 71, 71, 71, 75, 71, 71, 71, 29, 71, 71, 71, 73, 73, 
          71, 73, 71, 71, 71, 29, 73, 71, 71, 71, 71, 29, 30, 29, 29});
    NxS[8] = new Table(19, 1, -1, new short[] {283});
    NxS[9] = new Table(43, 56, 76, new short[] {-1, 76, 76, 76, 31, 76, 
          76, 120, 117, 117, 76, 117, 120, 120, 76, 31, 117, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 120, 76, 120, 120, 82, 76, 76, 120, 120, 76, 76, 76, 
          76, 76, 117, 76, 31, 76, 81, 31, 31, 82, 118, 31, 112, 112, 76, 120, 
          31, 31});
    NxS[10] = new Table(2, 1, 10, new short[] {-1});
    NxS[11] = new Table(0, 0, -1, null);    NxS[12] = new Table(0, 0, -1, null);    NxS[13] = new Table(15, 53, 71, new short[] {72, 71, 71, 71, 71, 73, 
          71, 29, 71, 71, 29, 29, 71, 74, 29, 71, 71, 71, 71, 29, 29, 71, 
          71, 71, 71, 71, 71, 71, 75, 71, 71, 71, 29, 71, 71, 71, 73, 73, 
          71, 73, 71, 71, 71, 29, 73, 71, 71, 71, 71, 29, 30, 29, 29});
    NxS[14] = new Table(20, 48, 23, new short[] {26, 23, 24, 23, 23, 24, 
          24, 23, 27, 24, 23, 23, 23, 23, 24, 24, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 24, 23, 23, 23, 26, 26, 23, 26, 23, 23, 23, 
          24, 26, 23, 23, 23, 23, 24, 25, 24, 24});
    NxS[15] = new Table(0, 0, -1, null);    NxS[16] = new Table(18, 30, 268, new short[] {269, 268, 268, 268, 268, 268, 
          268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 
          268, 268, 268, 268, 268, 268, 268, 22});
    NxS[17] = new Table(0, 0, -1, null);    NxS[18] = new Table(0, 0, -1, null);    NxS[19] = new Table(0, 0, -1, null);    NxS[20] = new Table(24, 1, -1, new short[] {21});
    NxS[21] = new Table(0, 0, -1, null);    NxS[22] = new Table(0, 0, -1, null);    NxS[23] = new Table(22, 46, 23, new short[] {-1, 23, 23, -1, -1, 23, 
          23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, -1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, -1, 23, 
          23, 23, 23, 23, -1, -1, -1, -1});
    NxS[24] = new Table(0, 0, -1, null);    NxS[25] = new Table(3, 1, -1, new short[] {24});
    NxS[26] = new Table(47, 52, 23, new short[] {31, 23, 23, 33, 26, 26, 
          23, 26, 33, 33, 23, 31, 26, 23, 23, 23, 23, 31, 32, 31, 31, 23, 
          33, 23, 33, 33, 35, 23, 23, 33, 33, 23, 23, 23, 23, 23, 26, 23, 
          31, 23, 34, 31, 31, 35, 23, 31, 23, 36, 23, 33, 31, 31});
    NxS[27] = new Table(22, 46, 23, new short[] {-1, 23, 23, -1, -1, 23, 
          28, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, -1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, -1, 23, 
          23, 23, 23, 23, -1, -1, -1, -1});
    NxS[28] = new Table(22, 46, 23, new short[] {29, 23, 23, 29, 29, 23, 
          23, 29, 23, 23, 23, 23, 29, 29, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 29, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 29, 23, 
          23, 23, 23, 23, 29, 30, 29, 29});
    NxS[29] = new Table(0, 0, -1, null);    NxS[30] = new Table(3, 1, -1, new short[] {29});
    NxS[31] = new Table(0, 0, -1, null);    NxS[32] = new Table(3, 1, -1, new short[] {31});
    NxS[33] = new Table(47, 52, 23, new short[] {-1, 23, 23, 23, 70, 70, 
          23, 70, 23, 23, 23, -1, 70, 23, 23, 23, 23, -1, -1, -1, -1, 23, 
          23, 23, 23, 23, 69, 23, 23, 23, 23, 23, 23, 23, 23, 23, 70, 23, 
          -1, 23, 23, -1, -1, 69, 23, -1, 23, 23, 23, 23, -1, -1});
    NxS[34] = new Table(47, 52, 23, new short[] {-1, 23, 23, 23, 55, 55, 
          23, 55, 23, 23, 23, -1, 55, 23, 23, 23, 23, -1, -1, -1, -1, 23, 
          23, 23, 23, 23, 54, 23, 23, 23, 23, 23, 23, 23, 23, 23, 55, 23, 
          -1, 23, 23, -1, -1, 54, 56, -1, 23, 23, 23, 23, -1, -1});
    NxS[35] = new Table(15, 53, 23, new short[] {38, 23, 23, 23, 23, 39, 
          23, -1, 23, 23, -1, -1, 23, 40, -1, 23, 23, 23, 23, -1, -1, 23, 
          23, 23, 23, 23, 23, 23, 41, 23, 23, 23, -1, 23, 23, 23, 39, 39, 
          23, 39, 23, 23, 23, -1, 39, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[36] = new Table(20, 48, 23, new short[] {37, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 37, 37, 23, 37, 23, 23, 23, 
          -1, 37, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[37] = new Table(47, 52, 23, new short[] {31, 23, 23, 23, 37, 37, 
          23, 37, 23, 23, 23, 31, 37, 23, 23, 23, 23, 31, 32, 31, 31, 23, 
          23, 23, 23, 23, 35, 23, 23, 23, 23, 23, 23, 23, 23, 23, 37, 23, 
          31, 23, 34, 31, 31, 35, 23, 31, 23, 23, 23, 23, 31, 31});
    NxS[38] = new Table(47, 52, 23, new short[] {-1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 23, 23, -1, -1, -1, -1, 23, 
          23, 23, 23, 23, 23, 23, 53, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          -1, 23, 23, -1, -1, 23, 23, -1, 23, 23, 23, 23, -1, -1});
    NxS[39] = new Table(43, 56, 23, new short[] {46, 23, 23, 23, -1, 23, 
          23, 48, 39, 39, 23, 39, 48, 48, 23, -1, 39, 23, 23, 23, 23, -1, 
          -1, -1, -1, 23, 48, 23, 48, 48, 23, 23, 23, 48, 48, 23, 23, 23, 
          23, 23, 39, 23, -1, 23, 23, -1, -1, 23, 47, -1, 49, 49, 23, 48, 
          -1, -1});
    NxS[40] = new Table(20, 48, 23, new short[] {47, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 47, 47, 23, 47, 23, 23, 23, 
          -1, 47, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[41] = new Table(47, 52, 23, new short[] {31, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 31, 23, 23, 23, 23, 23, 31, 32, 31, 31, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 42, 23, 23, 23, 23, 23, 23, 
          31, 23, 23, 31, 31, 23, 23, 31, 23, 23, 23, 23, 31, 31});
    NxS[42] = new Table(22, 48, 23, new short[] {-1, 23, 23, -1, -1, 23, 
          23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, -1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, -1, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, 23, 43});
    NxS[43] = new Table(22, 46, 23, new short[] {-1, 23, 23, -1, -1, 23, 
          44, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, -1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, -1, 23, 
          23, 23, 23, 23, -1, -1, -1, -1});
    NxS[44] = new Table(22, 46, 23, new short[] {-1, 23, 23, -1, -1, 23, 
          23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, -1, 23, 23, 23, 23, 45, 23, 23, 23, 23, 23, -1, 23, 
          23, 23, 23, 23, -1, -1, -1, -1});
    NxS[45] = new Table(22, 46, 23, new short[] {-1, 23, 23, -1, -1, 23, 
          23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 23, 46, 
          23, 23, 23, -1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, -1, 23, 
          23, 23, 23, 23, -1, -1, -1, -1});
    NxS[46] = new Table(22, 46, 23, new short[] {31, 23, 23, 31, 31, 23, 
          23, 31, 23, 23, 23, 23, 31, 31, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 31, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 31, 23, 
          23, 23, 23, 23, 31, 32, 31, 31});
    NxS[47] = new Table(43, 56, 23, new short[] {46, 23, 23, 23, -1, 23, 
          23, 48, 47, 47, 23, 47, 48, 48, 23, -1, 47, 23, 23, 23, 23, -1, 
          -1, -1, -1, 23, 48, 23, 48, 48, 23, 23, 23, 48, 48, 23, 23, 23, 
          23, 23, 47, 23, -1, 23, 23, -1, -1, 23, 23, -1, 23, 49, 23, 48, 
          -1, -1});
    NxS[48] = new Table(47, 52, 23, new short[] {-1, 23, 23, 23, 52, 52, 
          23, 52, 23, 23, 23, -1, 52, 23, 23, 23, 23, -1, -1, -1, -1, 23, 
          23, 23, 23, 23, 51, 23, 23, 23, 23, 23, 23, 23, 23, 23, 52, 23, 
          -1, 23, 23, -1, -1, 51, 23, -1, 23, 23, 23, 23, -1, -1});
    NxS[49] = new Table(20, 48, 23, new short[] {50, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 50, 50, 23, 50, 23, 23, 23, 
          -1, 50, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[50] = new Table(20, 48, 23, new short[] {50, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 46, 23, 23, 23, -1, 23, 23, 23, 50, 50, 23, 50, 23, 23, 23, 
          -1, 50, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[51] = new Table(20, 48, 23, new short[] {52, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 52, 52, 23, 52, 23, 23, 23, 
          -1, 52, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[52] = new Table(20, 48, 23, new short[] {52, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 49, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 46, 23, 23, 23, -1, 23, 23, 23, 52, 52, 23, 52, 23, 23, 23, 
          -1, 52, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[53] = new Table(47, 52, 23, new short[] {-1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 23, 23, -1, -1, -1, -1, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 43, 23, 23, 23, 23, 23, 23, 
          -1, 23, 23, -1, -1, 23, 23, -1, 23, 23, 23, 23, -1, -1});
    NxS[54] = new Table(15, 53, 23, new short[] {63, 23, 23, 23, 23, 55, 
          23, -1, 23, 23, -1, -1, 23, 56, -1, 23, 23, 23, 23, -1, -1, 23, 
          23, 23, 23, 23, 23, 23, 64, 23, 23, 23, -1, 23, 23, 23, 55, 55, 
          23, 55, 23, 23, 23, -1, 55, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[55] = new Table(47, 52, 23, new short[] {31, 23, 23, 58, 55, 55, 
          23, 55, 58, 58, 23, 31, 55, 23, 23, 23, 23, 31, 32, 31, 31, 23, 
          58, 23, 58, 58, 23, 23, 23, 58, 58, 23, 23, 23, 23, 23, 55, 23, 
          31, 23, 23, 31, 31, 23, 57, 31, 59, 59, 23, 58, 31, 31});
    NxS[56] = new Table(20, 48, 23, new short[] {57, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 57, 57, 23, 57, 23, 23, 23, 
          -1, 57, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[57] = new Table(47, 52, 23, new short[] {31, 23, 23, 58, 57, 57, 
          23, 57, 58, 58, 23, 31, 57, 23, 23, 23, 23, 31, 32, 31, 31, 23, 
          58, 23, 58, 58, 23, 23, 23, 58, 58, 23, 23, 23, 23, 23, 57, 23, 
          31, 23, 23, 31, 31, 23, 23, 31, 23, 59, 23, 58, 31, 31});
    NxS[58] = new Table(47, 52, 23, new short[] {-1, 23, 23, 23, 62, 62, 
          23, 62, 23, 23, 23, -1, 62, 23, 23, 23, 23, -1, -1, -1, -1, 23, 
          23, 23, 23, 23, 61, 23, 23, 23, 23, 23, 23, 23, 23, 23, 62, 23, 
          -1, 23, 23, -1, -1, 61, 23, -1, 23, 23, 23, 23, -1, -1});
    NxS[59] = new Table(20, 48, 23, new short[] {60, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 60, 60, 23, 60, 23, 23, 23, 
          -1, 60, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[60] = new Table(20, 48, 23, new short[] {60, 23, 31, 23, 23, 31, 
          31, 23, 23, 31, 23, 23, 23, 23, 31, 31, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 31, 23, 23, 23, 60, 60, 23, 60, 23, 23, 23, 
          31, 60, 23, 23, 23, 23, 31, 32, 31, 31});
    NxS[61] = new Table(20, 48, 23, new short[] {62, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 62, 62, 23, 62, 23, 23, 23, 
          -1, 62, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[62] = new Table(20, 48, 23, new short[] {62, 23, 31, 23, 23, 31, 
          31, 23, 23, 31, 23, 59, 23, 23, 31, 31, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, 31, 23, 23, 23, 62, 62, 23, 62, 23, 23, 23, 
          31, 62, 23, 23, 23, 23, 31, 32, 31, 31});
    NxS[63] = new Table(47, 52, 23, new short[] {-1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 23, 23, -1, -1, -1, -1, 23, 
          23, 23, 23, 23, 23, 23, 68, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
          -1, 23, 23, -1, -1, 23, 23, -1, 23, 23, 23, 23, -1, -1});
    NxS[64] = new Table(47, 52, 23, new short[] {-1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 23, 23, -1, -1, -1, -1, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 65, 23, 23, 23, 23, 23, 23, 
          -1, 23, 23, -1, -1, 23, 23, -1, 23, 23, 23, 23, -1, -1});
    NxS[65] = new Table(22, 48, 23, new short[] {-1, 23, 23, -1, -1, 23, 
          23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, -1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, -1, 23, 
          23, 23, 23, 23, -1, -1, -1, -1, 23, 66});
    NxS[66] = new Table(22, 46, 23, new short[] {-1, 23, 23, -1, -1, 23, 
          67, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, -1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, -1, 23, 
          23, 23, 23, 23, -1, -1, -1, -1});
    NxS[67] = new Table(22, 46, 23, new short[] {-1, 23, 23, -1, -1, 23, 
          23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, -1, 23, 23, 23, 23, 46, 23, 23, 23, 23, 23, -1, 23, 
          23, 23, 23, 23, -1, -1, -1, -1});
    NxS[68] = new Table(47, 52, 23, new short[] {-1, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 23, 23, -1, -1, -1, -1, 23, 
          23, 23, 23, 23, 23, 23, 23, 23, 23, 66, 23, 23, 23, 23, 23, 23, 
          -1, 23, 23, -1, -1, 23, 23, -1, 23, 23, 23, 23, -1, -1});
    NxS[69] = new Table(20, 48, 23, new short[] {70, 23, -1, 23, 23, -1, 
          -1, 23, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, 23, 23, 23, 23, 
          23, 23, 23, 23, 23, -1, 23, 23, 23, 70, 70, 23, 70, 23, 23, 23, 
          -1, 70, 23, 23, 23, 23, -1, -1, -1, -1});
    NxS[70] = new Table(47, 52, 23, new short[] {31, 23, 23, 23, 70, 70, 
          23, 70, 23, 23, 23, 31, 70, 23, 23, 23, 23, 31, 32, 31, 31, 23, 
          23, 23, 23, 23, 35, 23, 23, 23, 23, 23, 23, 23, 23, 23, 70, 23, 
          31, 23, 34, 31, 31, 35, 23, 31, 23, 36, 23, 23, 31, 31});
    NxS[71] = new Table(0, 0, -1, null);    NxS[72] = new Table(12, 1, -1, new short[] {279});
    NxS[73] = new Table(43, 56, 76, new short[] {272, 76, 76, 76, 31, 76, 
          76, 110, 116, 116, 76, 116, 110, 110, 76, 31, 116, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 110, 76, 110, 110, 82, 76, 76, 110, 110, 76, 76, 76, 
          76, 76, 116, 76, 31, 76, 81, 31, 31, 82, 111, 31, 112, 112, 76, 110, 
          31, 31});
    NxS[74] = new Table(51, 33, -1, new short[] {278, 278, -1, 278, -1, -1, 
          -1, -1, 278, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 278});
    NxS[75] = new Table(15, 53, 76, new short[] {77, 76, 76, 76, 76, 76, 
          76, 31, 76, 76, 31, 31, 76, 76, 31, 76, 76, 76, 76, 31, 31, 76, 
          76, 76, 76, 76, 76, 76, -1, 76, 76, 76, 31, 76, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, 31, 76, 76, 76, 76, 76, 31, 32, 31, 31});
    NxS[76] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[77] = new Table(22, 48, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1, 76, 78});
    NxS[78] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          79, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[79] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 80, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[80] = new Table(22, 52, 76, new short[] {31, 76, 81, 31, 31, 82, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 82});
    NxS[81] = new Table(20, 54, 76, new short[] {98, 76, -1, 76, 76, -1, 
          -1, 97, 99, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 98, 98, 76, 98, 76, 76, 76, 
          -1, 98, 76, 76, 76, 76, -1, -1, -1, -1, 76, 76, 76, 76, 76, 97});
    NxS[82] = new Table(15, 53, 76, new short[] {83, 76, 76, 76, 76, 84, 
          76, -1, 76, 76, -1, -1, 76, 85, -1, 76, 76, 76, 76, -1, -1, 76, 
          76, 76, 76, 76, 76, 76, 273, 76, 76, 76, -1, 76, 76, 76, 84, 84, 
          76, 84, 76, 76, 76, -1, 84, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[83] = new Table(58, 53, 76, new short[] {-1, 76, 76, 76, 76, 76, 
          -1, -1, -1, -1, 76, 76, 76, 76, 76, 76, 76, 96, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, -1, 76, 76, -1, -1, 76, 76, -1, 76, 76, 76, 
          76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 76, 76, 76, -1});
    NxS[84] = new Table(43, 56, 76, new short[] {272, 76, 76, 76, -1, 76, 
          76, 91, 84, 84, 76, 84, 91, 91, 76, -1, 84, 76, 76, 76, 76, -1, 
          -1, -1, -1, 76, 91, 76, 91, 91, 76, 76, 76, 91, 91, 76, 76, 76, 
          76, 76, 84, 76, -1, 76, 76, -1, -1, 76, 90, -1, 92, 92, 76, 91, 
          -1, -1});
    NxS[85] = new Table(20, 48, 76, new short[] {90, 76, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 90, 90, 76, 90, 76, 76, 76, 
          -1, 90, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[86] = new Table(22, 48, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1, 76, 87});
    NxS[87] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          88, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[88] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 89, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[89] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[90] = new Table(43, 56, 76, new short[] {272, 76, 76, 76, -1, 76, 
          76, 91, 90, 90, 76, 90, 91, 91, 76, -1, 90, 76, 76, 76, 76, -1, 
          -1, -1, -1, 76, 91, 76, 91, 91, 76, 76, 76, 91, 91, 76, 76, 76, 
          76, 76, 90, 76, -1, 76, 76, -1, -1, 76, 76, -1, 76, 92, 76, 91, 
          -1, -1});
    NxS[91] = new Table(20, 54, 76, new short[] {95, 76, -1, 76, 76, -1, 
          -1, 94, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 95, 95, 76, 95, 76, 76, 76, 
          -1, 95, 76, 76, 76, 76, -1, -1, -1, -1, 76, 76, 76, 76, 76, 94});
    NxS[92] = new Table(20, 48, 76, new short[] {93, 76, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 93, 93, 76, 93, 76, 76, 76, 
          -1, 93, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[93] = new Table(20, 48, 76, new short[] {93, 76, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, 272, 76, 76, 76, -1, 76, 76, 76, 93, 93, 76, 93, 76, 76, 76, 
          -1, 93, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[94] = new Table(20, 48, 76, new short[] {95, 76, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 95, 95, 76, 95, 76, 76, 76, 
          -1, 95, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[95] = new Table(20, 48, 76, new short[] {95, 76, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 92, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, 272, 76, 76, 76, -1, 76, 76, 76, 95, 95, 76, 95, 76, 76, 76, 
          -1, 95, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[96] = new Table(15, 53, 76, new short[] {87, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, -1, -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 
          76, 76, 76, 76, 76, 76, -1, 76, 76, 76, -1, 76, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, -1, 76, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[97] = new Table(15, 53, 76, new short[] {105, 76, 76, 76, 76, 98, 
          76, -1, 76, 76, -1, -1, 76, 99, -1, 76, 76, 76, 76, -1, -1, 76, 
          76, 76, 76, 76, 76, 76, 274, 76, 76, 76, -1, 76, 76, 76, 98, 98, 
          76, 98, 76, 76, 76, -1, 98, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[98] = new Table(43, 56, 76, new short[] {-1, 76, 76, 76, 31, 76, 
          76, 101, 98, 98, 76, 98, 101, 101, 76, 31, 98, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 101, 76, 101, 101, 76, 76, 76, 101, 101, 76, 76, 76, 
          76, 76, 98, 76, 31, 76, 76, 31, 31, 76, 100, 31, 102, 102, 76, 101, 
          31, 31});
    NxS[99] = new Table(20, 48, 76, new short[] {100, 76, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 100, 100, 76, 100, 76, 76, 76, 
          -1, 100, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[100] = new Table(43, 56, 76, new short[] {-1, 76, 76, 76, 31, 76, 
          76, 101, 100, 100, 76, 100, 101, 101, 76, 31, 100, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 101, 76, 101, 101, 76, 76, 76, 101, 101, 76, 76, 76, 
          76, 76, 100, 76, 31, 76, 76, 31, 31, 76, 76, 31, 76, 102, 76, 101, 
          31, 31});
    NxS[101] = new Table(20, 54, 76, new short[] {104, 76, -1, 76, 76, -1, 
          -1, 102, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 104, 104, 76, 104, 76, 76, 76, 
          -1, 104, 76, 76, 76, 76, -1, -1, -1, -1, 76, 76, 76, 76, 76, 102});
    NxS[102] = new Table(20, 48, 76, new short[] {103, 76, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 103, 103, 76, 103, 76, 76, 76, 
          -1, 103, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[103] = new Table(20, 48, 76, new short[] {103, 76, 31, 76, 76, 31, 
          31, 76, 76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, 31, 76, 76, 76, 103, 103, 76, 103, 76, 76, 76, 
          31, 103, 76, 76, 76, 76, 31, 32, 31, 31});
    NxS[104] = new Table(20, 48, 76, new short[] {104, 76, 31, 76, 76, 31, 
          31, 76, 76, 31, 76, 102, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, 31, 76, 76, 76, 104, 104, 76, 104, 76, 76, 76, 
          31, 104, 76, 76, 76, 76, 31, 32, 31, 31});
    NxS[105] = new Table(58, 53, 76, new short[] {-1, 76, 76, 76, 76, 76, 
          -1, -1, -1, -1, 76, 76, 76, 76, 76, 76, 76, 106, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, -1, 76, 76, -1, -1, 76, 76, -1, 76, 76, 76, 
          76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 76, 76, 76, -1});
    NxS[106] = new Table(15, 53, 76, new short[] {107, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, -1, -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 
          76, 76, 76, 76, 76, 76, -1, 76, 76, 76, -1, 76, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, -1, 76, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[107] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          108, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[108] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 109, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[109] = new Table(22, 46, 76, new short[] {31, 76, 76, 31, 31, 76, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31});
    NxS[110] = new Table(20, 54, 76, new short[] {115, 76, -1, 76, 76, -1, 
          -1, 114, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 115, 115, 76, 115, 76, 76, 76, 
          -1, 115, 76, 76, 76, 76, -1, -1, -1, -1, 76, 76, 76, 76, 76, 114});
    NxS[111] = new Table(43, 56, 76, new short[] {272, 76, 76, 76, 31, 76, 
          76, 110, 111, 111, 76, 111, 110, 110, 76, 31, 111, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 110, 76, 110, 110, 82, 76, 76, 110, 110, 76, 76, 76, 
          76, 76, 111, 76, 31, 76, 81, 31, 31, 82, 76, 31, 76, 112, 76, 110, 
          31, 31});
    NxS[112] = new Table(20, 48, 76, new short[] {113, 76, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 113, 113, 76, 113, 76, 76, 76, 
          -1, 113, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[113] = new Table(20, 54, 76, new short[] {113, 76, 31, 76, 81, 31, 
          31, 82, 76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 
          76, 272, 76, 76, 76, 31, 76, 76, 76, 113, 113, 76, 113, 76, 76, 76, 
          31, 113, 76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 82});
    NxS[114] = new Table(20, 48, 76, new short[] {115, 76, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 115, 115, 76, 115, 76, 76, 76, 
          -1, 115, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[115] = new Table(20, 54, 76, new short[] {115, 76, 31, 76, 81, 31, 
          31, 82, 76, 31, 76, 112, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 
          76, 272, 76, 76, 76, 31, 76, 76, 76, 115, 115, 76, 115, 76, 76, 76, 
          31, 115, 76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 82});
    NxS[116] = new Table(43, 56, 76, new short[] {272, 76, 76, 76, 31, 76, 
          76, 110, 116, 116, 76, 116, 110, 110, 76, 31, 116, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 110, 76, 110, 110, 82, 76, 76, 110, 110, 76, 76, 76, 
          76, 76, 116, 76, 31, 76, 81, 31, 31, 82, 111, 31, 112, 112, 76, 110, 
          31, 31});
    NxS[117] = new Table(43, 56, 76, new short[] {-1, 76, 76, 76, 31, 76, 
          76, 120, 117, 117, 76, 117, 120, 120, 76, 31, 117, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 120, 76, 120, 120, 82, 76, 76, 120, 120, 76, 76, 76, 
          76, 76, 117, 76, 31, 76, 81, 31, 31, 82, 118, 31, 112, 112, 76, 120, 
          31, 31});
    NxS[118] = new Table(43, 56, 76, new short[] {-1, 76, 76, 76, 31, 76, 
          76, 120, 118, 118, 76, 118, 120, 120, 76, 31, 118, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 120, 76, 120, 120, 82, 76, 76, 120, 120, 76, 76, 76, 
          76, 76, 118, 76, 31, 76, 81, 31, 31, 82, 76, 31, 76, 112, 76, 120, 
          31, 31});
    NxS[119] = new Table(20, 54, 76, new short[] {119, 76, 31, 76, 81, 31, 
          31, 82, 76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, 31, 76, 76, 76, 119, 119, 76, 119, 76, 76, 76, 
          31, 119, 76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 82});
    NxS[120] = new Table(20, 54, 76, new short[] {121, 76, -1, 76, 76, -1, 
          -1, 112, 76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, -1, 76, 76, 76, 121, 121, 76, 121, 76, 76, 76, 
          -1, 121, 76, 76, 76, 76, -1, -1, -1, -1, 76, 76, 76, 76, 76, 112});
    NxS[121] = new Table(20, 54, 76, new short[] {121, 76, 31, 76, 81, 31, 
          31, 82, 76, 31, 76, 112, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, 76, 31, 76, 76, 76, 121, 121, 76, 121, 76, 76, 76, 
          31, 121, 76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 82});
    NxS[122] = new Table(18, 50, 122, new short[] {123, 122, 122, 122, 29, 122, 
          122, 124, 29, 122, 122, 29, 122, 71, 122, 122, 29, 29, 122, 122, 122, 122, 
          122, 122, 122, 122, 122, 122, 122, 29, 122, 122, 122, 122, 122, 122, 122, 122, 
          122, 122, 29, 122, 71, 71, 71, 71, 29, 30, 29, 29});
    NxS[123] = new Table(19, 1, -1, new short[] {283});
    NxS[124] = new Table(26, 1, -1, new short[] {285});
    NxS[125] = new Table(0, 0, -1, null);    NxS[126] = new Table(0, 0, -1, null);    NxS[127] = new Table(0, 0, -1, null);    NxS[128] = new Table(0, 0, -1, null);    NxS[129] = new Table(0, 0, -1, null);    NxS[130] = new Table(24, 1, -1, new short[] {131});
    NxS[131] = new Table(0, 0, -1, null);    NxS[132] = new Table(0, 0, -1, null);    NxS[133] = new Table(22, 52, 76, new short[] {-1, 76, 76, -1, -1, 141, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 142, 142, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1, 76, 76, 76, 76, 76, 141});
    NxS[134] = new Table(15, 53, 76, new short[] {83, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, -1, -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 
          76, 76, 76, 76, 76, 76, 273, 76, 76, 76, -1, 76, 76, 76, 138, 138, 
          76, 76, 76, 76, 76, -1, 76, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[135] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 137, 137, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[136] = new Table(22, 52, 76, new short[] {31, 76, 133, 31, 31, 134, 
          76, 31, 135, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 136, 136, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 134});
    NxS[137] = new Table(22, 52, 76, new short[] {31, 76, 133, 31, 31, 134, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 137, 137, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 134});
    NxS[138] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 139, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, -1, 76, 76, 76, 138, 138, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[139] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 140, 140, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[140] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, -1, 76, 76, 76, 140, 140, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[141] = new Table(15, 53, 76, new short[] {105, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, -1, -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 
          76, 76, 76, 76, 76, 76, 274, 76, 76, 76, -1, 76, 76, 76, 142, 142, 
          76, 76, 76, 76, 76, -1, 76, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[142] = new Table(22, 46, 76, new short[] {31, 76, 76, 31, 31, 76, 
          76, 31, 143, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 142, 142, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31});
    NxS[143] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 144, 144, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[144] = new Table(22, 46, 76, new short[] {31, 76, 76, 31, 31, 76, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 144, 144, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31});
    NxS[145] = new Table(22, 52, 76, new short[] {31, 76, 133, 31, 31, 134, 
          76, 31, 135, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 145, 145, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 134});
    NxS[146] = new Table(22, 52, 76, new short[] {31, 76, 133, 31, 31, 134, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 146, 146, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 134});
    NxS[147] = new Table(22, 48, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1, 76, 148});
    NxS[148] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          149, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[149] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 150, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[150] = new Table(22, 52, 76, new short[] {31, 76, 133, 31, 31, 134, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 134});
    NxS[151] = new Table(22, 48, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1, 76, 152});
    NxS[152] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          153, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[153] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 154, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[154] = new Table(22, 52, 76, new short[] {31, 76, 155, 31, 31, 156, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 156});
    NxS[155] = new Table(20, 58, 76, new short[] {160, 160, -1, 76, 76, -1, 
          -1, 161, 76, -1, 76, 76, 76, 160, -1, -1, 76, 76, 76, 160, 76, 76, 
          76, -1, 76, 76, 76, -1, 160, 76, 160, 160, 160, 76, 160, 160, 76, 76, 
          -1, 160, 76, 76, 76, 76, -1, -1, -1, -1, 76, 160, 76, 76, 160, 161, 
          160, 160, 76, 160});
    NxS[156] = new Table(5, 59, -1, new short[] {76, 157, 76, 76, 157, 76, 
          157, 157, 76, 157, 83, 76, 76, 76, 76, 157, 157, -1, 76, 76, -1, -1, 
          76, 76, -1, 76, 76, 76, 157, -1, -1, 76, 76, 76, 157, 76, 76, 76, 
          273, 76, 76, 76, -1, 157, 76, 157, 157, 157, 76, 157, 157, 76, 76, -1, 
          157, 76, 76, 76, 76});
    NxS[157] = new Table(20, 58, 76, new short[] {157, 157, -1, 76, 76, -1, 
          -1, 76, 76, -1, 158, 76, 76, 157, -1, -1, 76, 76, 76, 157, 76, 76, 
          76, 272, 76, 76, 76, -1, 157, 76, 157, 157, 157, 76, 157, 157, 76, 76, 
          -1, 157, 76, 76, 76, 76, -1, -1, -1, -1, 76, 157, 76, 76, 157, 76, 
          157, 157, 76, 157});
    NxS[158] = new Table(20, 58, 76, new short[] {159, 159, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 159, -1, -1, 76, 76, 76, 159, 76, 76, 
          76, -1, 76, 76, 76, -1, 159, 76, 159, 159, 159, 76, 159, 159, 76, 76, 
          -1, 159, 76, 76, 76, 76, -1, -1, -1, -1, 76, 159, 76, 76, 159, 76, 
          159, 159, 76, 159});
    NxS[159] = new Table(20, 58, 76, new short[] {159, 159, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 159, -1, -1, 76, 76, 76, 159, 76, 76, 
          76, 272, 76, 76, 76, -1, 159, 76, 159, 159, 159, 76, 159, 159, 76, 76, 
          -1, 159, 76, 76, 76, 76, -1, -1, -1, -1, 76, 159, 76, 76, 159, 76, 
          159, 159, 76, 159});
    NxS[160] = new Table(20, 58, 76, new short[] {160, 160, 31, 76, 76, 31, 
          31, 76, 76, 31, 162, 76, 76, 160, 31, 31, 76, 76, 76, 160, 76, 76, 
          76, -1, 76, 76, 76, 31, 160, 76, 160, 160, 160, 76, 160, 160, 76, 76, 
          31, 160, 76, 76, 76, 76, 31, 32, 31, 31, 76, 160, 76, 76, 160, 76, 
          160, 160, 76, 160});
    NxS[161] = new Table(5, 59, -1, new short[] {76, 160, 76, 76, 160, 76, 
          160, 160, 76, 160, 105, 76, 76, 76, 76, 160, 160, -1, 76, 76, -1, -1, 
          76, 76, -1, 76, 76, 76, 160, -1, -1, 76, 76, 76, 160, 76, 76, 76, 
          274, 76, 76, 76, -1, 160, 76, 160, 160, 160, 76, 160, 160, 76, 76, -1, 
          160, 76, 76, 76, 76});
    NxS[162] = new Table(20, 58, 76, new short[] {163, 163, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 163, -1, -1, 76, 76, 76, 163, 76, 76, 
          76, -1, 76, 76, 76, -1, 163, 76, 163, 163, 163, 76, 163, 163, 76, 76, 
          -1, 163, 76, 76, 76, 76, -1, -1, -1, -1, 76, 163, 76, 76, 163, 76, 
          163, 163, 76, 163});
    NxS[163] = new Table(20, 58, 76, new short[] {163, 163, 31, 76, 76, 31, 
          31, 76, 76, 31, 76, 76, 76, 163, 31, 31, 76, 76, 76, 163, 76, 76, 
          76, -1, 76, 76, 76, 31, 163, 76, 163, 163, 163, 76, 163, 163, 76, 76, 
          31, 163, 76, 76, 76, 76, 31, 32, 31, 31, 76, 163, 76, 76, 163, 76, 
          163, 163, 76, 163});
    NxS[164] = new Table(20, 58, 76, new short[] {164, 164, 31, 76, 155, 31, 
          31, 156, 76, 31, 165, 76, 76, 164, 31, 31, 76, 76, 76, 164, 76, 76, 
          76, 272, 76, 76, 76, 31, 164, 76, 164, 164, 164, 76, 164, 164, 76, 76, 
          31, 164, 76, 76, 76, 76, 31, 32, 31, 31, 76, 164, 76, 76, 164, 156, 
          164, 164, 76, 164});
    NxS[165] = new Table(20, 58, 76, new short[] {166, 166, -1, 76, 76, -1, 
          -1, 76, 76, -1, 76, 76, 76, 166, -1, -1, 76, 76, 76, 166, 76, 76, 
          76, -1, 76, 76, 76, -1, 166, 76, 166, 166, 166, 76, 166, 166, 76, 76, 
          -1, 166, 76, 76, 76, 76, -1, -1, -1, -1, 76, 166, 76, 76, 166, 76, 
          166, 166, 76, 166});
    NxS[166] = new Table(20, 58, 76, new short[] {166, 166, 31, 76, 155, 31, 
          31, 156, 76, 31, 76, 76, 76, 166, 31, 31, 76, 76, 76, 166, 76, 76, 
          76, 272, 76, 76, 76, 31, 166, 76, 166, 166, 166, 76, 166, 166, 76, 76, 
          31, 166, 76, 76, 76, 76, 31, 32, 31, 31, 76, 166, 76, 76, 166, 156, 
          166, 166, 76, 166});
    NxS[167] = new Table(20, 58, 76, new short[] {167, 167, 31, 76, 155, 31, 
          31, 156, 76, 31, 165, 76, 76, 167, 31, 31, 76, 76, 76, 167, 76, 76, 
          76, -1, 76, 76, 76, 31, 167, 76, 167, 167, 167, 76, 167, 167, 76, 76, 
          31, 167, 76, 76, 76, 76, 31, 32, 31, 31, 76, 167, 76, 76, 167, 156, 
          167, 167, 76, 167});
    NxS[168] = new Table(20, 58, 76, new short[] {168, 168, 31, 76, 155, 31, 
          31, 156, 76, 31, 76, 76, 76, 168, 31, 31, 76, 76, 76, 168, 76, 76, 
          76, -1, 76, 76, 76, 31, 168, 76, 168, 168, 168, 76, 168, 168, 76, 76, 
          31, 168, 76, 76, 76, 76, 31, 32, 31, 31, 76, 168, 76, 76, 168, 156, 
          168, 168, 76, 168});
    NxS[169] = new Table(22, 46, 185, new short[] {179, 185, 185, 179, 179, 185, 
          185, 179, 185, 185, 185, 185, 179, 179, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, 179, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 179, 185, 
          185, 185, 185, 185, 179, 171, 179, 179});
    NxS[170] = new Table(22, 46, 185, new short[] {179, 185, 185, 179, 179, 185, 
          185, 179, 185, 185, 185, 185, 179, 179, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, 179, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 179, 185, 
          185, 185, 185, 185, 179, 171, 179, 179});
    NxS[171] = new Table(3, 1, -1, new short[] {179});
    NxS[172] = new Table(22, 46, 185, new short[] {179, 185, 185, 179, 179, 185, 
          185, 179, 185, 185, 185, 185, 179, 179, 185, 185, 185, 185, 185, 185, 185, 212, 
          185, 185, 185, 179, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 179, 185, 
          185, 185, 185, 185, 179, 171, 179, 179});
    NxS[173] = new Table(47, 52, 185, new short[] {179, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, 179, 185, 185, 185, 185, 185, 179, 171, 179, 179, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 209, 185, 185, 185, 185, 185, 185, 185, 
          179, 185, 185, 179, 179, 185, 185, 179, 185, 185, 185, 185, 179, 179});
    NxS[174] = new Table(22, 50, 185, new short[] {179, 185, 185, 179, 179, 185, 
          185, 179, 185, 185, 185, 185, 179, 179, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, 179, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 179, 185, 
          185, 185, 185, 185, 179, 171, 179, 179, 185, 185, 185, 206});
    NxS[175] = new Table(22, 46, 185, new short[] {179, 185, 185, 179, 179, 185, 
          185, 179, 185, 185, 185, 185, 179, 179, 185, 185, 185, 185, 185, 194, 185, 185, 
          185, 185, 185, 179, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 179, 185, 
          185, 185, 185, 185, 179, 171, 179, 179});
    NxS[176] = new Table(47, 52, 185, new short[] {179, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, 179, 185, 185, 185, 185, 185, 179, 171, 179, 179, 185, 
          185, 185, 185, 185, 185, 185, 185, 205, 185, 185, 185, 185, 185, 185, 185, 185, 
          179, 185, 185, 179, 179, 185, 185, 179, 185, 185, 185, 185, 179, 179});
    NxS[177] = new Table(47, 53, 185, new short[] {179, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, 179, 185, 185, 185, 185, 185, 179, 171, 179, 179, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 200, 185, 185, 185, 185, 185, 185, 185, 
          179, 185, 185, 179, 179, 185, 185, 179, 185, 185, 185, 185, 179, 179, 201});
    NxS[178] = new Table(47, 56, 185, new short[] {179, 178, 185, 178, 178, 178, 
          185, 178, 178, 185, 185, 179, 178, 185, 185, 185, 185, 179, 171, 179, 179, 185, 
          178, 185, 185, 178, 185, 178, 178, 185, 178, 185, 185, 185, 185, 185, 178, 178, 
          179, 185, 185, 179, 179, 185, 185, 179, 185, 185, 185, 178, 179, 179, 185, 185, 
          185, 178});
    NxS[179] = new Table(0, 0, -1, null);    NxS[180] = new Table(47, 52, 185, new short[] {179, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, 179, 185, 185, 185, 185, 185, 179, 171, 179, 179, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 196, 185, 185, 185, 185, 185, 185, 185, 
          179, 185, 185, 179, 179, 185, 185, 179, 185, 185, 185, 185, 179, 179});
    NxS[181] = new Table(47, 52, 185, new short[] {179, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, 179, 185, 185, 185, 185, 185, 179, 171, 179, 179, 185, 
          185, 185, 185, 185, 185, 185, 190, 185, 185, 185, 185, 185, 185, 185, 185, 185, 
          179, 185, 185, 179, 179, 185, 185, 179, 185, 185, 185, 185, 179, 179});
    NxS[182] = new Table(47, 52, 185, new short[] {179, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, 179, 185, 185, 185, 185, 185, 179, 171, 179, 179, 185, 
          185, 185, 185, 185, 185, 185, 188, 185, 185, 185, 185, 185, 185, 185, 185, 185, 
          179, 185, 185, 179, 179, 185, 185, 179, 185, 185, 185, 185, 179, 179});
    NxS[183] = new Table(47, 52, 185, new short[] {179, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, 179, 185, 185, 185, 185, 185, 179, 171, 179, 179, 185, 
          185, 185, 185, 185, 185, 185, 187, 185, 185, 185, 185, 185, 185, 185, 185, 185, 
          179, 185, 185, 179, 179, 185, 185, 179, 185, 185, 185, 185, 179, 179});
    NxS[184] = new Table(22, 46, 185, new short[] {179, 185, 185, 179, 179, 185, 
          185, 179, 185, 185, 185, 185, 179, 179, 185, 185, 185, 185, 185, 185, 186, 185, 
          185, 185, 185, 179, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 179, 185, 
          185, 185, 185, 185, 179, 171, 179, 179});
    NxS[185] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[186] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 187, 185, 185, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[187] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 169, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[188] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 189, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[189] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 169, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[190] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 191, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[191] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 192, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[192] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 185, 193, 185, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[193] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 194, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[194] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 195, 185, 185, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[195] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 189, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[196] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 197, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[197] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 198, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[198] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 199, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[199] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 185, 169, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[200] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 185, 185, 
          202, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[201] = new Table(22, 50, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1, 185, 185, 185, 169});
    NxS[202] = new Table(22, 50, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1, 185, 185, 185, 203});
    NxS[203] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 185, 204, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[204] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 185, 189, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[205] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 169, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[206] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 207, 185, 185, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[207] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 208, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[208] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 169, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[209] = new Table(22, 50, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1, 185, 185, 185, 210});
    NxS[210] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 211, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[211] = new Table(22, 46, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 189, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1});
    NxS[212] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 185, 213, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[213] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 214, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[214] = new Table(22, 48, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1, 185, 215});
    NxS[215] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 216, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[216] = new Table(47, 52, 185, new short[] {-1, 185, 185, 185, 185, 185, 
          185, 185, 185, 185, 185, -1, 185, 185, 185, 185, 185, -1, -1, -1, -1, 185, 
          185, 185, 185, 185, 185, 185, 185, 185, 217, 185, 185, 185, 185, 185, 185, 185, 
          -1, 185, 185, -1, -1, 185, 185, -1, 185, 185, 185, 185, -1, -1});
    NxS[217] = new Table(22, 51, 185, new short[] {-1, 185, 185, -1, -1, 185, 
          185, -1, 185, 185, 185, 185, -1, -1, 185, 185, 185, 185, 185, 185, 185, 185, 
          185, 185, 185, -1, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, -1, 185, 
          185, 185, 185, 185, -1, -1, -1, -1, 185, 185, 185, 185, 169});
    NxS[218] = new Table(22, 52, 76, new short[] {-1, 76, 76, -1, -1, 226, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 227, 227, 76, 227, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1, 76, 76, 76, 76, 76, 226});
    NxS[219] = new Table(15, 53, 76, new short[] {83, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, -1, -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 
          76, 76, 76, 76, 76, 76, 273, 76, 76, 76, -1, 76, 76, 76, 223, 223, 
          76, 223, 76, 76, 76, -1, 76, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[220] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 222, 222, 76, 222, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[221] = new Table(22, 52, 76, new short[] {31, 76, 218, 31, 31, 219, 
          76, 31, 220, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 221, 221, 76, 221, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 219});
    NxS[222] = new Table(22, 52, 76, new short[] {31, 76, 218, 31, 31, 219, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 222, 222, 76, 222, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 219});
    NxS[223] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 224, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, -1, 76, 76, 76, 223, 223, 76, 223, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[224] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 225, 225, 76, 225, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[225] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, -1, 76, 76, 76, 225, 225, 76, 225, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[226] = new Table(15, 53, 76, new short[] {105, 76, 76, 76, 76, 76, 
          76, -1, 76, 76, -1, -1, 76, 76, -1, 76, 76, 76, 76, -1, -1, 76, 
          76, 76, 76, 76, 76, 76, 274, 76, 76, 76, -1, 76, 76, 76, 227, 227, 
          76, 227, 76, 76, 76, -1, 76, 76, 76, 76, 76, -1, -1, -1, -1});
    NxS[227] = new Table(22, 46, 76, new short[] {31, 76, 76, 31, 31, 76, 
          76, 31, 228, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 227, 227, 76, 227, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31});
    NxS[228] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 229, 229, 76, 229, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[229] = new Table(22, 46, 76, new short[] {31, 76, 76, 31, 31, 76, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 229, 229, 76, 229, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31});
    NxS[230] = new Table(22, 52, 76, new short[] {31, 76, 218, 31, 31, 219, 
          76, 31, 220, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 230, 230, 76, 230, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 219});
    NxS[231] = new Table(22, 52, 76, new short[] {31, 76, 218, 31, 31, 219, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 231, 231, 76, 231, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 219});
    NxS[232] = new Table(22, 48, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1, 76, 233});
    NxS[233] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          234, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[234] = new Table(22, 46, 76, new short[] {-1, 76, 76, -1, -1, 76, 
          76, -1, 76, 76, 76, 76, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, -1, 76, 76, 76, 76, 235, 76, 76, 76, 76, 76, -1, 76, 
          76, 76, 76, 76, -1, -1, -1, -1});
    NxS[235] = new Table(22, 52, 76, new short[] {31, 76, 218, 31, 31, 219, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 219});
    NxS[236] = new Table(22, 46, 236, new short[] {-1, 236, 236, -1, -1, 236, 
          236, -1, 236, 236, 236, 236, -1, -1, 236, 236, 236, 236, 236, 236, 236, 236, 
          236, 236, 236, -1, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, -1, 236, 
          236, 236, 236, 236, -1, -1, -1, -1});
    NxS[237] = new Table(0, 0, -1, null);    NxS[238] = new Table(3, 1, -1, new short[] {237});
    NxS[239] = new Table(18, 50, 239, new short[] {340, 239, 239, 239, -1, 239, 
          239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, 239, 239, -1, 239, 239, 239, 239, 239, 239, 239, 239, 
          239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[240] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 256, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[241] = new Table(16, 1, -1, new short[] {239});
    NxS[242] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 245, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[243] = new Table(0, 0, -1, null);    NxS[244] = new Table(2, 1, 244, new short[] {-1});
    NxS[245] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 246, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[246] = new Table(18, 52, 239, new short[] {340, 239, 239, 239, -1, 239, 
          239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, 239, 239, -1, 239, 239, 239, 239, 239, 239, 239, 239, 
          239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 247});
    NxS[247] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 248, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[248] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 249, 239, 239, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[249] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 250, 239, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[250] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 251, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[251] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 239, 252, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[252] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 239, 239, 253, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[253] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 239, 239, 239, 254, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[254] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 239, 239, 239, 239, 255, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[255] = new Table(18, 50, 239, new short[] {340, 239, 239, 239, -1, 239, 
          239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, 239, 239, -1, 239, 239, 239, 239, 239, 239, 239, 239, 
          239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[256] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 257, 239, 239, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[257] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 258, 239, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[258] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 259, 239, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[259] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 239, 260, 239, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[260] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 239, 239, 261, 239, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[261] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 239, 239, 239, 262, 239, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[262] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          239, 239, 239, 239, 239, 239, 239, 239, 263, 239, 239, 239, 340, 239, 239, 239, 
          -1, 239, 239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1});
    NxS[263] = new Table(18, 50, 239, new short[] {340, 239, 239, 239, -1, 239, 
          239, 346, -1, 239, 239, -1, 239, -1, 239, 239, -1, -1, 239, 239, 239, 239, 
          239, 239, 239, 239, 239, 239, 239, -1, 239, 239, 239, 239, 239, 239, 239, 239, 
          239, 239, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[264] = new Table(2, 30, 264, new short[] {-1, 264, 264, 264, 264, 264, 
          264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 
          264, 264, 264, 264, 264, 264, 264, -1});
    NxS[265] = new Table(4, 1, -1, new short[] {266});
    NxS[266] = new Table(0, 0, -1, null);    NxS[267] = new Table(47, 52, 6, new short[] {16, 6, 6, 6, 9, 9, 
          6, 9, 6, 6, 6, 17, 9, 18, 19, 20, 1, 2, 3, 4, 5, 6, 
          6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 8, 6, 9, 6, 
          10, 6, 1, 11, 12, 13, 14, 2, 6, 1, 6, 6, 15, 2});
    NxS[268] = new Table(18, 30, 268, new short[] {269, 268, 268, 268, 268, 268, 
          268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 
          268, 268, 268, 268, 268, 268, 268, 22});
    NxS[269] = new Table(37, 46, -1, new short[] {268, -1, 268, -1, -1, 268, 
          -1, -1, 268, -1, 268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 268, 268, -1, -1, 268, -1, -1, -1, -1, -1, 
          268, -1, -1, 268, -1, -1, 268, 270});
    NxS[270] = new Table(33, 52, -1, new short[] {271, -1, -1, -1, -1, -1, 
          271, -1, -1, -1, -1, -1, -1, -1, -1, 271, -1, 271, 271, 271, -1, 271, 
          271, -1, -1, -1, 271, -1, -1, -1, -1, -1, -1, -1, -1, -1, 271, -1, 
          -1, 271, -1, 271, 271, -1, 271, -1, -1, -1, -1, -1, 271, 271});
    NxS[271] = new Table(33, 53, -1, new short[] {271, -1, -1, -1, -1, -1, 
          271, -1, -1, -1, -1, -1, -1, -1, -1, 271, -1, 271, 271, 271, -1, 271, 
          271, -1, -1, -1, 271, -1, -1, -1, -1, -1, -1, -1, -1, -1, 271, -1, 
          -1, 271, -1, 271, 271, -1, 271, -1, -1, -1, -1, -1, 271, 271, 268});
    NxS[272] = new Table(22, 46, 76, new short[] {31, 76, 76, 31, 31, 76, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31});
    NxS[273] = new Table(15, 53, 76, new short[] {86, 76, 76, 76, 76, 76, 
          76, 31, 76, 76, 31, 31, 76, 76, 31, 76, 76, 76, 76, 31, 31, 76, 
          76, 76, 76, 76, 76, 76, -1, 76, 76, 76, 31, 76, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, 31, 76, 76, 76, 76, 76, 31, 32, 31, 31});
    NxS[274] = new Table(15, 1, -1, new short[] {275});
    NxS[275] = new Table(6, 1, -1, new short[] {276});
    NxS[276] = new Table(28, 1, -1, new short[] {277});
    NxS[277] = new Table(52, 1, -1, new short[] {272});
    NxS[278] = new Table(43, 56, 76, new short[] {272, 76, 76, 76, 31, 76, 
          76, 110, 111, 111, 76, 111, 110, 110, 76, 31, 111, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 110, 76, 110, 110, 82, 76, 76, 110, 110, 76, 76, 76, 
          76, 76, 111, 76, 31, 76, 81, 31, 31, 82, 76, 31, 76, 112, 76, 110, 
          31, 31});
    NxS[279] = new Table(15, 1, -1, new short[] {280});
    NxS[280] = new Table(28, 1, -1, new short[] {281});
    NxS[281] = new Table(52, 1, -1, new short[] {282});
    NxS[282] = new Table(22, 52, 76, new short[] {31, 76, 81, 31, 31, 82, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 82});
    NxS[283] = new Table(33, 52, -1, new short[] {284, -1, -1, -1, -1, -1, 
          284, -1, -1, -1, -1, -1, -1, -1, -1, 284, -1, 284, 284, 284, -1, 284, 
          284, -1, -1, -1, 284, -1, -1, -1, -1, -1, -1, -1, -1, -1, 284, -1, 
          -1, 284, -1, 284, 284, -1, 284, -1, -1, -1, -1, -1, 284, 284});
    NxS[284] = new Table(33, 53, -1, new short[] {284, -1, -1, -1, -1, -1, 
          284, -1, -1, -1, -1, -1, -1, -1, -1, 284, -1, 284, 284, 284, -1, 284, 
          284, -1, -1, -1, 284, -1, -1, -1, -1, -1, -1, -1, -1, -1, 284, -1, 
          -1, 284, -1, 284, 284, -1, 284, -1, -1, -1, -1, -1, 284, 284, 285});
    NxS[285] = new Table(18, 50, 122, new short[] {123, 122, 122, 122, 29, 122, 
          122, 124, 29, 122, 122, 29, 122, 71, 122, 122, 29, 29, 122, 122, 122, 122, 
          122, 122, 122, 122, 122, 122, 122, 29, 122, 122, 122, 122, 122, 122, 122, 122, 
          122, 122, 29, 122, 71, 71, 71, 71, 29, 30, 29, 29});
    NxS[286] = new Table(47, 52, 239, new short[] {-1, 239, 239, 239, -1, -1, 
          239, -1, 239, 239, 239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 239, 
          240, 239, 239, 239, 241, 239, 239, 239, 239, 242, 239, 239, 340, 239, -1, 239, 
          -1, 239, -1, -1, -1, 243, 341, 342, 244, -1, 239, 239, -1, 342});
    NxS[287] = new Table(22, 46, 236, new short[] {237, 236, 236, 237, 237, 236, 
          236, 237, 236, 236, 236, 236, 237, 237, 236, 236, 236, 236, 236, 236, 236, 236, 
          236, 236, 236, 237, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 237, 236, 
          236, 236, 236, 236, 237, 238, 237, 237});
    NxS[288] = new Table(51, 40, -1, new short[] {330, 330, -1, 330, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 339, -1, -1, -1, -1, -1, 
          329, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 329});
    NxS[289] = new Table(51, 41, -1, new short[] {320, 320, -1, 320, -1, -1, 
          -1, -1, 320, -1, -1, -1, -1, -1, -1, -1, 338, -1, -1, -1, -1, -1, 
          321, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320, -1, -1, -1, -1, -1, 
          -1, 321, 325});
    NxS[290] = new Table(51, 41, -1, new short[] {320, 320, -1, 320, -1, -1, 
          -1, -1, 320, -1, -1, -1, -1, -1, -1, -1, 319, -1, -1, -1, -1, -1, 
          321, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320, -1, -1, -1, -1, -1, 
          -1, 321, 325});
    NxS[291] = new Table(58, 53, 169, new short[] {170, 169, 169, 169, 169, 169, 
          170, 171, 170, 170, 169, 169, 169, 172, 173, 169, 169, 174, 175, 176, 177, 169, 
          169, 169, 178, 169, 169, 170, 169, 169, 170, 170, 169, 169, 179, 169, 169, 169, 
          169, 170, 170, 169, 180, 169, 181, 169, 182, 183, 169, 169, 184, 169, 170});
    NxS[292] = new Table(48, 55, -1, new short[] {309, -1, 309, 309, 309, -1, 
          309, 309, -1, -1, -1, 309, -1, -1, -1, -1, -1, -1, -1, 308, -1, 309, 
          -1, -1, 309, 310, 309, 309, -1, 309, -1, -1, -1, -1, -1, 309, 309, -1, 
          -1, -1, -1, -1, 310, -1, -1, -1, -1, -1, 309, -1, -1, -1, -1, -1, 
          309});
    NxS[293] = new Table(51, 40, -1, new short[] {299, 299, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 297, -1, -1, -1, -1, -1, 
          298, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 298});
    NxS[294] = new Table(36, 1, -1, new short[] {295});
    NxS[295] = new Table(59, 1, -1, new short[] {296});
    NxS[296] = new Table(58, 1, -1, new short[] {132});
    NxS[297] = new Table(43, 35, -1, new short[] {307, -1, -1, -1, -1, -1, 
          307, 307, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 307});
    NxS[298] = new Table(43, 36, -1, new short[] {301, -1, -1, -1, -1, -1, 
          -1, -1, 302, 302, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 300});
    NxS[299] = new Table(22, 52, 76, new short[] {31, 76, 133, 31, 31, 134, 
          76, 31, 135, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 136, 136, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 134});
    NxS[300] = new Table(12, 1, -1, new short[] {303});
    NxS[301] = new Table(15, 53, 76, new short[] {147, 76, 76, 76, 76, 76, 
          76, 31, 76, 76, 31, 31, 76, 76, 31, 76, 76, 76, 76, 31, 31, 76, 
          76, 76, 76, 76, 76, 76, -1, 76, 76, 76, 31, 76, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, 31, 76, 76, 76, 76, 76, 31, 32, 31, 31});
    NxS[302] = new Table(22, 52, 76, new short[] {31, 76, 133, 31, 31, 134, 
          76, 31, 135, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 145, 145, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 134});
    NxS[303] = new Table(15, 1, -1, new short[] {304});
    NxS[304] = new Table(28, 1, -1, new short[] {305});
    NxS[305] = new Table(52, 1, -1, new short[] {306});
    NxS[306] = new Table(22, 52, 76, new short[] {31, 76, 133, 31, 31, 134, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 134});
    NxS[307] = new Table(51, 40, -1, new short[] {299, 299, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          298, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 298});
    NxS[308] = new Table(43, 35, -1, new short[] {318, -1, -1, -1, -1, -1, 
          318, 318, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 318});
    NxS[309] = new Table(20, 58, 76, new short[] {167, 167, 31, 76, 155, 31, 
          31, 156, 76, 31, 165, 76, 76, 167, 31, 31, 76, 76, 76, 167, 76, 76, 
          76, -1, 76, 76, 76, 31, 167, 76, 167, 167, 167, 76, 167, 167, 76, 76, 
          31, 167, 76, 76, 76, 76, 31, 32, 31, 31, 76, 167, 76, 76, 167, 156, 
          167, 167, 76, 167});
    NxS[310] = new Table(33, 52, -1, new short[] {311, -1, -1, -1, -1, -1, 
          311, -1, -1, -1, 313, -1, -1, -1, -1, 311, -1, 311, 311, 311, -1, 311, 
          311, -1, -1, -1, 311, -1, -1, -1, -1, -1, -1, -1, -1, -1, 311, -1, 
          -1, 311, -1, 311, 311, -1, 311, 312, -1, -1, -1, -1, 311, 311});
    NxS[311] = new Table(20, 58, 76, new short[] {164, 164, 31, 76, 155, 31, 
          31, 156, 76, 31, 165, 76, 76, 164, 31, 31, 76, 76, 76, 164, 76, 76, 
          76, 272, 76, 76, 76, 31, 164, 76, 164, 164, 164, 76, 164, 164, 76, 76, 
          31, 164, 76, 76, 76, 76, 31, 32, 31, 31, 76, 164, 76, 76, 164, 156, 
          164, 164, 76, 164});
    NxS[312] = new Table(12, 1, -1, new short[] {314});
    NxS[313] = new Table(15, 53, 76, new short[] {151, 76, 76, 76, 76, 76, 
          76, 31, 76, 76, 31, 31, 76, 76, 31, 76, 76, 76, 76, 31, 31, 76, 
          76, 76, 76, 76, 76, 76, -1, 76, 76, 76, 31, 76, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, 31, 76, 76, 76, 76, 76, 31, 32, 31, 31});
    NxS[314] = new Table(15, 1, -1, new short[] {315});
    NxS[315] = new Table(28, 1, -1, new short[] {316});
    NxS[316] = new Table(52, 1, -1, new short[] {317});
    NxS[317] = new Table(22, 52, 76, new short[] {31, 76, 155, 31, 31, 156, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 156});
    NxS[318] = new Table(6, 54, -1, new short[] {309, -1, -1, 309, 310, 309, 
          309, -1, 309, -1, -1, -1, -1, -1, 309, 309, -1, -1, -1, -1, -1, 310, 
          -1, -1, -1, -1, -1, 309, -1, -1, -1, -1, -1, 309, -1, -1, -1, -1, 
          -1, -1, -1, -1, 309, -1, 309, 309, 309, -1, 309, 309, -1, -1, -1, 309});
    NxS[319] = new Table(39, 44, -1, new short[] {307, -1, -1, -1, -1, -1, 
          -1, -1, -1, 307, -1, -1, -1, -1, 327, -1, 328, -1, 318, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 327, -1, 328, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 318});
    NxS[320] = new Table(43, 56, 76, new short[] {-1, 76, 76, 76, 31, 76, 
          76, 120, 117, 117, 76, 117, 120, 120, 76, 31, 117, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 120, 76, 120, 120, 82, 76, 76, 120, 120, 76, 76, 76, 
          76, 76, 117, 76, 31, 76, 81, 31, 31, 82, 118, 31, 112, 112, 76, 120, 
          31, 31});
    NxS[321] = new Table(15, 45, -1, new short[] {323, -1, -1, -1, -1, 324, 
          -1, -1, -1, -1, -1, -1, -1, 325, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 326, -1, -1, -1, -1, -1, -1, -1, 324, 324, 
          -1, 324, -1, -1, -1, -1, 324});
    NxS[322] = new Table(43, 56, 76, new short[] {-1, 76, 76, 76, 31, 76, 
          76, 120, 118, 118, 76, 118, 120, 120, 76, 31, 118, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 120, 76, 120, 120, 82, 76, 76, 120, 120, 76, 76, 76, 
          76, 76, 118, 76, 31, 76, 81, 31, 31, 82, 76, 31, 76, 112, 76, 120, 
          31, 31});
    NxS[323] = new Table(12, 1, -1, new short[] {279});
    NxS[324] = new Table(43, 56, 76, new short[] {272, 76, 76, 76, 31, 76, 
          76, 110, 116, 116, 76, 116, 110, 110, 76, 31, 116, 76, 76, 76, 76, 31, 
          32, 31, 31, 76, 110, 76, 110, 110, 82, 76, 76, 110, 110, 76, 76, 76, 
          76, 76, 116, 76, 31, 76, 81, 31, 31, 82, 111, 31, 112, 112, 76, 110, 
          31, 31});
    NxS[325] = new Table(51, 33, -1, new short[] {278, 278, -1, 278, -1, -1, 
          -1, -1, 278, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 278});
    NxS[326] = new Table(15, 53, 76, new short[] {77, 76, 76, 76, 76, 76, 
          76, 31, 76, 76, 31, 31, 76, 76, 31, 76, 76, 76, 76, 31, 31, 76, 
          76, 76, 76, 76, 76, 76, -1, 76, 76, 76, 31, 76, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, 31, 76, 76, 76, 76, 76, 31, 32, 31, 31});
    NxS[327] = new Table(51, 40, -1, new short[] {330, 330, -1, 330, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          329, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 329});
    NxS[328] = new Table(51, 41, -1, new short[] {320, 320, -1, 320, -1, -1, 
          -1, -1, 320, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          321, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320, -1, -1, -1, -1, -1, 
          -1, 321, 325});
    NxS[329] = new Table(43, 36, -1, new short[] {332, -1, -1, -1, -1, -1, 
          -1, -1, 333, 333, -1, 333, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 331});
    NxS[330] = new Table(22, 52, 76, new short[] {31, 76, 218, 31, 31, 219, 
          76, 31, 220, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, -1, 
          76, 76, 76, 31, 76, 76, 76, 221, 221, 76, 221, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 219});
    NxS[331] = new Table(12, 1, -1, new short[] {334});
    NxS[332] = new Table(15, 53, 76, new short[] {232, 76, 76, 76, 76, 76, 
          76, 31, 76, 76, 31, 31, 76, 76, 31, 76, 76, 76, 76, 31, 31, 76, 
          76, 76, 76, 76, 76, 76, -1, 76, 76, 76, 31, 76, 76, 76, 76, 76, 
          76, 76, 76, 76, 76, 31, 76, 76, 76, 76, 76, 31, 32, 31, 31});
    NxS[333] = new Table(22, 52, 76, new short[] {31, 76, 218, 31, 31, 219, 
          76, 31, 220, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 230, 230, 76, 230, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 219});
    NxS[334] = new Table(15, 1, -1, new short[] {335});
    NxS[335] = new Table(28, 1, -1, new short[] {336});
    NxS[336] = new Table(52, 1, -1, new short[] {337});
    NxS[337] = new Table(22, 52, 76, new short[] {31, 76, 218, 31, 31, 219, 
          76, 31, 76, 76, 76, 76, 31, 31, 76, 76, 76, 76, 76, 76, 76, 272, 
          76, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 76, 
          76, 76, 76, 76, 31, 32, 31, 31, 76, 76, 76, 76, 76, 219});
    NxS[338] = new Table(43, 35, -1, new short[] {328, -1, -1, -1, -1, -1, 
          328, 328, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 328});
    NxS[339] = new Table(43, 35, -1, new short[] {327, -1, -1, -1, -1, -1, 
          327, 327, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 327});
    NxS[340] = new Table(19, 1, -1, new short[] {344});
    NxS[341] = new Table(28, 1, -1, new short[] {343});
    NxS[342] = new Table(29, 7, -1, new short[] {342, 244, -1, -1, -1, -1, 
          342});
    NxS[343] = new Table(28, 1, -1, new short[] {243});
    NxS[344] = new Table(33, 52, -1, new short[] {345, -1, -1, -1, -1, -1, 
          345, -1, -1, -1, -1, -1, -1, -1, -1, 345, -1, 345, 345, 345, -1, 345, 
          345, -1, -1, -1, 345, -1, -1, -1, -1, -1, -1, -1, -1, -1, 345, -1, 
          -1, 345, -1, 345, 345, -1, 345, -1, -1, -1, -1, -1, 345, 345});
    NxS[345] = new Table(33, 53, -1, new short[] {345, -1, -1, -1, -1, -1, 
          345, -1, -1, -1, -1, -1, -1, -1, -1, 345, -1, 345, 345, 345, -1, 345, 
          345, -1, -1, -1, 345, -1, -1, -1, -1, -1, -1, -1, -1, -1, 345, -1, 
          -1, 345, -1, 345, 345, -1, 345, -1, -1, -1, -1, -1, 345, 345, 239});
    NxS[346] = new Table(26, 1, -1, new short[] {239});
    NxS[347] = new Table(2, 30, 264, new short[] {-1, 264, 264, 264, 264, 264, 
          264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 
          264, 264, 264, 264, 264, 264, 264, 265});
    }

int NextState(int qStat) {
    if (chr == ScanBuff.EOF)
        return (qStat <= maxAccept && qStat != currentStart ? currentStart : eofNum);
    else {
        int rslt;
        int idx = Map(chr) - NxS[qStat].min;
        if (idx < 0) idx += 63;
        if ((uint)idx >= (uint)NxS[qStat].rng) rslt = NxS[qStat].dflt;
        else rslt = NxS[qStat].nxt[idx];
        return (rslt == goStart ? currentStart : rslt);
    }
}

int NextState() {
    if (chr == ScanBuff.EOF)
        return (state <= maxAccept && state != currentStart ? currentStart : eofNum);
    else {
        int rslt;
        int idx = Map(chr) - NxS[state].min;
        if (idx < 0) idx += 63;
        if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
        else rslt = NxS[state].nxt[idx];
        return (rslt == goStart ? currentStart : rslt);
    }
}
#endregion


#if BACKUP
        // ====================== Nested class ==========================

        internal class Context // class used for automaton backup.
        {
            public int bPos;
            public int cNum;
            public int state;
            public int cChr;
        }
#endif // BACKUP

        // ==============================================================
        // ===== Nested classes for various ScanBuff derived classes ====
        // ==============================================================

        public sealed class StringBuff : ScanBuff
        {
            string str;        // input buffer
            int bPos;          // current position in buffer
            int sLen;

            public StringBuff(string str)
            {
                this.str = str;
                this.sLen = str.Length;
            }

            public override int Read()
            {
                if (bPos < sLen) return str[bPos++];
#if BABEL
                else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see newline
#endif // BABEL
                else { bPos++; return EOF; }                      // two strikes and you're out!
            }
            
            public override int ReadPos { get { return bPos - 1; } }

            public override int Peek()
            {
                if (bPos < sLen) return str[bPos];
                else return '\n';
            }

            public override string GetString(int beg, int end)
            {
                //  "end" can be greater than sLen with the BABEL
                //  option set.  Read returns a "virtual" EOL if
                //  an attempt is made to read past the end of the
                //  string buffer.  Without the guard any attempt 
                //  to fetch yytext for a token that includes the 
                //  EOL will throw an index exception.
                if (end > sLen) end = sLen;
                if (end <= beg) return ""; 
                else return str.Substring(beg, end - beg);
            }

            public override int Pos
            {
                get { return bPos; }
                set { bPos = value; }
            }
        }

       // ====================== Nested class ==========================
       //  The LineBuff class contributed by Nigel Horspool, 
       //  nigelh@cs.uvic.cs
       // ==============================================================

        public sealed class LineBuff : ScanBuff
        {
            IList<string> line;    // list of source lines from a file
            int numLines;          // number of strings in line list
            string curLine;        // current line in that list
            int cLine;             // index of current line in the list
            int curLen;            // length of current line
            int curLineStart;      // position of line start in whole file
            int curLineEnd;        // position of line end in whole file
            int maxPos;            // max position ever visited in whole file
            int cPos;              // ordinal number of chr in source

            // Constructed from a list of strings, one per source line.
            // The lines have had trailing '\n' characters removed.
            public LineBuff(IList<string> lineList)
            {
                line = lineList;
                numLines = line.Count;
                cPos = curLineStart = 0;
                curLine = numLines>0? line[0] : "";
                maxPos = curLineEnd = curLen = curLine.Length;
                cLine = 1;
            }

            public override int Read()
            {
                if (cPos < curLineEnd)
                    return curLine[cPos++ - curLineStart];
                if (cPos++ == curLineEnd)
                    return '\n';
                if (cLine >= numLines)
                    return EOF;
                curLine = line[cLine];
                curLen = curLine.Length;
                curLineStart = curLineEnd + 1;
                curLineEnd = curLineStart + curLen;
                if (curLineEnd>maxPos)
                    maxPos = curLineEnd;
                cLine++;
                return curLen>0? curLine[0] : '\n';
            }

            public override int Peek()
            {
                return (cPos < curLineEnd)? curLine[cPos - curLineStart] : '\n';
            }

            // To speed up searches for the line containing a position
            private int cachedPos = 0;
            private int cachedIx = 0;
            private int cachedLstart = 0;

            // Given a position pos within the entire source, the results are
            //   ix     -- the index of the containing line
            //   lstart -- the position of the first character on that line
            private void findIndex( int pos, out int ix, out int lstart )
            {
                if (pos >= cachedPos) {
                    ix = cachedIx;  lstart = cachedLstart;
                } else {
                    ix = lstart = 0;
                }
                for( ; ; ) {
                    int len = line[ix].Length + 1;
                    if (pos < lstart+len) break;
                    lstart += len;
                    ix++;
                }
                cachedPos = pos;
                cachedIx = ix;
                cachedLstart = lstart;
            }
        
            public override string GetString(int beg, int end)
            {
                if (beg >= maxPos || end <= beg) return "";
                int endIx, begIx, endLineStart, begLineStart;
                findIndex(beg, out begIx, out begLineStart);
                int begCol = beg - begLineStart;
                findIndex(end, out endIx, out endLineStart);
                int endCol = end - endLineStart;
                string s = line[begIx];
                if (begIx == endIx) {
                    // the usual case, substring all on one line
                    return (endCol <= s.Length)?
                        s.Substring(begCol, endCol-begCol)
                        : s.Substring(begCol) + "\n";
                }
                // the string spans multiple lines, yuk!
                StringBuilder sb = new StringBuilder();
                if (begCol < s.Length)
                    sb.Append(s.Substring(begCol));
                for( ; ; ) {
                    sb.Append("\n");
                    s = line[++begIx];
                    if (begIx >= endIx) break;
                    sb.Append(s);
                }
                if (endCol <= s.Length) {
                    sb.Append(s.Substring(0, endCol));
                } else {
                    sb.Append(s);
                    sb.Append("\n");
                }
                return sb.ToString();
            }

            public override int Pos
            {
                get { return cPos; }
                set {
                    cPos = value;
                    findIndex(cPos, out cLine, out curLineStart);
                    curLine = line[cLine];
                    curLineEnd = curLineStart+curLine.Length;
                }
            }
            
            public override int ReadPos { get { return cPos - 1; } }
        }
        
        // ====================== Nested class ==========================

        public sealed class StreamBuff : ScanBuff
        {
            BufferedStream bStrm;   // input buffer
            int delta = 1;          // number of bytes in chr, could be 0 for EOF.

            public StreamBuff(Stream str) { this.bStrm = new BufferedStream(str); }

            public override int Read() {
                int ch0 = bStrm.ReadByte();
                delta = (ch0 == EOF ? 0 : 1);
                return ch0; 
            }
            
            public override int ReadPos {
                get { return (int)bStrm.Position - delta; }
            }

            public override int Peek()
            {
                int rslt = bStrm.ReadByte();
                bStrm.Seek(-delta, SeekOrigin.Current);
                return rslt;
            }

            public override string GetString(int beg, int end)
            {
                if (end - beg <= 0) return "";
                long savePos = bStrm.Position;
                char[] arr = new char[end - beg];
                bStrm.Position = (long)beg;
                for (int i = 0; i < (end - beg); i++)
                    arr[i] = (char)bStrm.ReadByte();
                bStrm.Position = savePos;
                return new String(arr);
            }

            // Pos is the position *after* reading chr!
            public override int Pos
            {
                get { return (int)bStrm.Position; }
                set { bStrm.Position = value; }
            }
        }
        

        // ====================== Nested class ==========================

        /// <summary>
        /// This is the Buffer for UTF8 files.
        /// It attempts to read the encoding preamble, which for 
        /// this encoding should be unicode point \uFEFF which is 
        /// encoded as EF BB BF
        /// </summary>
        public class TextBuff : ScanBuff
        {
            protected BufferedStream bStrm;   // input buffer
            protected int delta = 1;          // length of chr, zero for EOF!
            
            private Exception BadUTF8()
            { return new Exception(String.Format("BadUTF8 Character")); }

            /// <summary>
            /// TextBuff factory.  Reads the file preamble
            /// and returns a TextBuff, LittleEndTextBuff or
            /// BigEndTextBuff according to the result.
            /// </summary>
            /// <param name="strm">The underlying stream</param>
            /// <returns></returns>
            public static ScanBuff NewTextBuff(Stream strm)
            {
                // First check if this is a UTF16 file
                //
                int b0 = strm.ReadByte();
                int b1 = strm.ReadByte();

                if (b0 == 0xfe && b1 == 0xff)
                    return new BigEndTextBuff(strm);
                if (b0 == 0xff && b1 == 0xfe)
                    return new LittleEndTextBuff(strm);
                
                int b2 = strm.ReadByte();
                if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                    return new TextBuff(strm);
                //
                // There is no unicode preamble, so we
                // must go back to the Latin1 default.
                //
                strm.Seek(0, SeekOrigin.Begin);
                return new StreamBuff(strm);
            }

            protected TextBuff(Stream str) { 
                this.bStrm = new BufferedStream(str);
            }

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1;
                int ch2;
                if (ch0 < 0x7f)
                {
                    delta = (ch0 == EOF ? 0 : 1);
                    return ch0;
                }
                else if ((ch0 & 0xe0) == 0xc0)
                {
                    delta = 2;
                    ch1 = bStrm.ReadByte();
                    if ((ch1 & 0xc0) == 0x80)
                        return ((ch0 & 0x1f) << 6) + (ch1 & 0x3f);
                }
                else if ((ch0 & 0xf0) == 0xe0)
                {
                    delta = 3;
                    ch1 = bStrm.ReadByte();
                    ch2 = bStrm.ReadByte();
                    if ((ch1 & ch2 & 0xc0) == 0x80)
                        return ((ch0 & 0xf) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);
                }
                return (int)IronScheme.Runtime.Builtins.LexicalError("Bad UTF8 character", (char)ch0 );
            }

            public sealed override int ReadPos
            {
                get { return (int)bStrm.Position - delta; }
            }

            public sealed override int Peek()
            {
                int rslt = Read();
                bStrm.Seek(-delta, SeekOrigin.Current);
                return rslt;
            }

            /// <summary>
            /// Returns the string from the buffer between
            /// the given file positions.  This needs to be
            /// done carefully, as the number of characters
            /// is, in general, not equal to (end - beg).
            /// </summary>
            /// <param name="beg">Begin filepos</param>
            /// <param name="end">End filepos</param>
            /// <returns></returns>
            public sealed override string GetString(int beg, int end)
            {
                int i;
                if (end - beg <= 0) return "";
                long savePos = bStrm.Position;
                char[] arr = new char[end - beg];
                bStrm.Position = (long)beg;
                for (i = 0; bStrm.Position < end; i++)
                    arr[i] = (char)Read();
                bStrm.Position = savePos;
                return new String(arr, 0, i);
            }

            // Pos is the position *after* reading chr!
            public sealed override int Pos
            {
                get { return (int)bStrm.Position; }
                set { bStrm.Position = value; }
            }
        }

        // ====================== Nested class ==========================
        /// <summary>
        /// This is the Buffer for Big-endian UTF16 files.
        /// </summary>
        public sealed class BigEndTextBuff : TextBuff
        {
            internal BigEndTextBuff(Stream str) : base(str) { } // 

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1 = bStrm.ReadByte();
                if (ch1 == EOF)
                {
                    // An EOF in either byte counts as an EOF
                    delta = (ch0 == EOF ? 0 : 1);
                    return -1;
                }
                else
                {
                    delta = 2;
                    return (ch0 << 8) + ch1;
                }
            }
        }
        
        // ====================== Nested class ==========================
        /// <summary>
        /// This is the Buffer for Little-endian UTF16 files.
        /// </summary>
        public sealed class LittleEndTextBuff : TextBuff
        {
            internal LittleEndTextBuff(Stream str) : base(str) { } // { this.bStrm = new BufferedStream(str); }

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1 = bStrm.ReadByte();
                if (ch1 == EOF)
                {
                    // An EOF in either byte counts as an EOF
                    delta = (ch0 == EOF ? 0 : 1);
                    return -1;
                }
                else
                {
                    delta = 2;
                    return (ch1 << 8) + ch0;
                }
            }
        }
        // =================== End Nested classes =======================

        public Scanner(Stream file) {
            buffer = TextBuff.NewTextBuff(file); // selected by /unicode option
            this.cNum = -1;
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            GetChr();
        }

        public Scanner() { }

        bool eofseen = false;

        void GetChr()
        {
            if (chr == '\n') 
            { 
                lineStartNum = cNum + 1; 
                lNum++; 
            }
            chr = buffer.Read();
            if (chr == -1 && !eofseen)
            {
              chr = ' ';
              eofseen = true;
            }
            else 
            {
              eofseen = false;
            }
            cNum++;
        }
        
        void MarkToken()
        {
            tokPos = buffer.ReadPos;
            tokNum = cNum;
            tokLin = lNum;
            tokCol = cNum - lineStartNum;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokLen = cNum - tokNum;
            tokEPos = buffer.ReadPos;
            tokELin = lNum;
            tokECol = cNum - lineStartNum;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        public void SetSource(string source, int offset)
        {
            this.buffer = new StringBuff(source);
            this.buffer.Pos = offset;
            this.cNum = offset - 1;
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            this.eofseen = false;
            GetChr();
        }
        
        // ================ LineBuffer Initialization ===================

        public void SetSource(IList<string> source)
        {
            this.buffer = new LineBuff(source);
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            this.cNum = -1;
            this.eofseen = false;
            GetChr();
        }
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
            Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
            next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== IScanner<> Implementation =========

        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseTokeen is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        int yyleng { get { return tokLen; } }
        int yypos { get { return tokPos; } }
        int yyline { get { return tokLin; } }
        int yycol { get { return tokCol; } }

        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        void yyless(int n) { 
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cNum = tokNum - 1;
            for (int i = 0; i <= n; i++) GetChr();
            MarkEnd();
        }

        // ============ methods available in actions ==============

        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; } 
        }
        
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    bool inAccept = false; // inAccept ==> current state is an accept state
                    Result rslt = Result.noMatch;
                    // skip "idle" transitions
#if LEFTANCHORS
                    if (lineStartNum == cNum && NextState(anchorState[currentScOrd]) != currentStart)
                        state = anchorState[currentScOrd];
                    else {
                        state = currentStart;
                        while (NextState() == state) {
                            GetChr();
                            if (lineStartNum == cNum) {
                                int anchor = anchorState[currentScOrd];
                                if (NextState(anchor) != state) {
                                    state = anchor; 
                                    break;
                                }
                            }
                        }
                    }
#else // !LEFTANCHORS
                    state = currentStart;
                    while (NextState() == state) 
                        GetChr(); // skip "idle" transitions
#endif // LEFTANCHORS
                    MarkToken();
                    
                    while ((next = NextState()) != currentStart)
                        if (inAccept && next > maxAccept) // need to prepare backup data
                        {
                            Context ctx = new Context();
                            rslt = Recurse2(ctx, next);
                            if (rslt == Result.noMatch) RestoreStateAndPos(ctx);
                            break;
                        }
                        else
                        {
                            state = next;
                            GetChr();
                            if (state <= maxAccept) inAccept = true;
                        }
#else // !BACKUP
#if LEFTANCHORS
                    if (lineStartNum == cNum) {
                        int anchor = anchorState[currentScOrd];
                        if (NextState(anchor) != currentStart)
                            state = anchor;
                    }
                    else {
                        state = currentStart;
                        while (NextState() == state) {
                            GetChr();
                            if (lineStartNum == cNum) {
                                int anchor = anchorState[currentScOrd];
                                if (NextState(anchor) != state) {
                                    state = anchor;
                                    break;
                                }
                            }
                        }
                    }
#else // !LEFTANCHORS
                    state = currentStart;
                    while (NextState() == state) 
                        GetChr(); // skip "idle" transitions
#endif // LEFTANCHORS
                    MarkToken();
                    // common code
                    while ((next = NextState()) != currentStart)
                    {
                        state = next;
                        GetChr();
                    }
#endif // BACKUP
                    if (state > maxAccept) 
                        state = currentStart;
                    else
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            return (int)Tokens.EOF;
        case 1:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 13:
        case 16:
Errors.Add(SourceUnit, string.Format("bad input|{0}", yytext), 
                          new SourceSpan( new SourceLocation(1,tokLin,tokCol + 1) , new SourceLocation(1,tokLin,tokCol + yytext.Length + 1)), 2, Microsoft.Scripting.Hosting.Severity.Error);
            break;
        case 2:
;
            break;
        case 3:
        case 4:
;
            break;
        case 10:
{  }
            break;
        case 11:
return Make(Tokens.LBRACK);
            break;
        case 12:
return Make(Tokens.RBRACK);
            break;
        case 14:
        case 24:
        case 25:
yyless(1); return Make(Tokens.DOT);
            break;
        case 15:
return Make(Tokens.RBRACE);
            break;
        case 17:
return Make(Tokens.LBRACE);
            break;
        case 18:
return Make(Tokens.QUASIQUOTE);
            break;
        case 19:
return Make(Tokens.QUOTE);
            break;
        case 20:
return Make(Tokens.UNQUOTE);
            break;
        case 21:
return Make(Tokens.UNQUOTESPLICING);
            break;
        case 22:
return Make(Tokens.STRING);
            break;
        case 23:
        case 26:
        case 27:
        case 28:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
Errors.Add(SourceUnit, string.Format("bad dot|{0}", yytext), 
                          new SourceSpan( new SourceLocation(1,tokLin,tokCol + 1) , new SourceLocation(1,tokLin,tokCol + yytext.Length + 1)), 2, Microsoft.Scripting.Hosting.Severity.Error);
            break;
        case 29:
        case 30:
        case 124:
return MakeSymbol();
            break;
        case 31:
        case 32:
return MakeNumber();
            break;
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 122:
        case 123:
Errors.Add(SourceUnit, string.Format("bad identifier|{0}", yytext), 
                          new SourceSpan( new SourceLocation(1,tokLin,tokCol + 1) , new SourceLocation(1,tokLin,tokCol + yytext.Length + 1)), 2, Microsoft.Scripting.Hosting.Severity.Error);
            break;
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 166:
        case 167:
        case 168:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
        case 225:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
Errors.Add(SourceUnit, string.Format("bad number|{0}", yytext), 
                          new SourceSpan( new SourceLocation(1,tokLin,tokCol + 1) , new SourceLocation(1,tokLin,tokCol + yytext.Length + 1)), 2, Microsoft.Scripting.Hosting.Severity.Error);
            break;
        case 125:
return Make(Tokens.IGNOREDATUM);
            break;
        case 126:
yy_push_state(ML_COMMENT);
            break;
        case 127:
return Make(Tokens.VECTORLBRACE);
            break;
        case 128:
return Make(Tokens.QUASISYNTAX);
            break;
        case 129:
return Make(Tokens.SYNTAX);
            break;
        case 130:
return Make(Tokens.UNSYNTAX);
            break;
        case 131:
return Make(Tokens.UNSYNTAXSPLICING);
            break;
        case 132:
return Make(Tokens.BYTEVECTORLBRACE);
            break;
        case 169:
        case 172:
        case 173:
        case 174:
        case 175:
        case 176:
        case 177:
        case 178:
        case 180:
        case 181:
        case 182:
        case 183:
        case 184:
        case 185:
        case 186:
        case 187:
        case 188:
        case 189:
        case 190:
        case 191:
        case 192:
        case 193:
        case 194:
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
Errors.Add(SourceUnit, string.Format("bad char|{0}", yytext), 
                          new SourceSpan( new SourceLocation(1,tokLin,tokCol + 1) , new SourceLocation(1,tokLin,tokCol + yytext.Length + 1)), 2, Microsoft.Scripting.Hosting.Severity.Error);
            break;
        case 170:
        case 171:
        case 179:
return MakeChar();
            break;
        case 236:
Errors.Add(SourceUnit, string.Format("bad boolean|{0}", yytext), 
                          new SourceSpan( new SourceLocation(1,tokLin,tokCol + 1) , new SourceLocation(1,tokLin,tokCol + yytext.Length + 1)), 2, Microsoft.Scripting.Hosting.Severity.Error);
            break;
        case 237:
        case 238:
return MakeBoolean();
            break;
        case 239:
        case 240:
        case 241:
        case 242:
        case 243:
        case 244:
        case 245:
        case 246:
        case 247:
        case 248:
        case 249:
        case 250:
        case 251:
        case 252:
        case 253:
        case 254:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 261:
        case 262:
return Make(Tokens.DIRECTIVE);
            break;
        case 255:
return Make(Tokens.NOFOLDCASE);
            break;
        case 263:
return Make(Tokens.FOLDCASE);
            break;
        case 264:
;
            break;
        case 265:
;
            break;
        case 266:
yy_pop_state();
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
        }

#if BACKUP
        Result Recurse2(Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, chr) != currentStart AND
            //         NextState(state, chr) is not an accept state.
            //
            bool inAccept;
            SaveStateAndPos(ctx);
            state = next;
            if (state == eofNum) return Result.accept;
            GetChr();
            inAccept = false;

            while ((next = NextState()) != currentStart)
            {
                if (inAccept && next > maxAccept) // need to prepare backup data
                    SaveStateAndPos(ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetChr(); 
                inAccept = (state <= maxAccept);
            }
            if (inAccept) return Result.accept; else return Result.noMatch;
        }

        void SaveStateAndPos(Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.cNum  = cNum;
            ctx.state = state;
            ctx.cChr  = chr;
        }

        void RestoreStateAndPos(Context ctx)
        {
            buffer.Pos = ctx.bPos;
            cNum  = ctx.cNum;
            state = ctx.state;
            chr   = ctx.cChr;
        }

        void RestorePos(Context ctx) { buffer.Pos = ctx.bPos; cNum = ctx.cNum; }
#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        internal void yy_clear_stack() { scStack.Clear(); }
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class Scanner
} // end namespace
