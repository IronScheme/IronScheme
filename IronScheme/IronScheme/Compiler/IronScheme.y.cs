// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2006
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.0.3.86 (2007-03-11)
// options: lines


using System;
using System.Collections.Generic;
using System.Text;
using gppg;
using IronScheme.Runtime;
using Microsoft.Scripting;

namespace IronScheme.Compiler
{
public enum Tokens {
    error=1,EOF=2,LBRACE=3,RBRACE=4,LBRACK=5,RBRACK=6,QUOTE=7,QUASIQUOTE=8,
    UNQUOTE=9,UNQUOTESPLICING=10,VECTORLBRACE=11,DOT=12,SYMBOL=13,LITERAL=14,STRING=15,INTEGER=16,
    REAL=17,CHARACTER=18};

public struct ValueType
#line 76 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{
  public Cons list;
  public object elem;
  public string text;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : IScanner<ValueType,LexLocation> {
  private LexLocation __yylloc;
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#line 15 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"


public Cons parsed;

static Cons Last(Cons c)
{
  while (c.Cdr != null)
  {
    c = c.Cdr as Cons;
  }
  return c;
}

static Cons Append(Cons c, Cons t)
{
  if (c == null)
  {
    return t;
  }
  if (t == null)
  {
    return c;
  }
  Last(c).Cdr = t;
  return c;
}

public static Dictionary<Cons,SourceSpan> sourcemap = new Dictionary<Cons,SourceSpan>();

static SourceSpan GetLocation(gppg.LexLocation start, gppg.LexLocation end)
{
  return new SourceSpan(
    new SourceLocation(1, start.sLin, start.sCol + 1),
    new SourceLocation(1, end.eLin, end.eCol + 1));
}

protected override SourceSpan GetLocation(gppg.LexLocation loc)
{
  return new SourceSpan(
    new SourceLocation(1, loc.sLin, loc.sCol + 1),
    new SourceLocation(1, loc.eLin, loc.eCol + 1));
}

static Cons SetLocation(Cons o, gppg.LexLocation start, gppg.LexLocation end)
{
  if (o == null)
  {
    return null;
  }
  sourcemap[o] = GetLocation(start, end);
  return o;
}

static readonly SymbolId quote = SymbolTable.StringToId("quote");
static readonly SymbolId unquote_splicing = SymbolTable.StringToId("unquote-splicing");
static readonly SymbolId quasiquote = SymbolTable.StringToId("quasiquote");
static readonly SymbolId unquote = SymbolTable.StringToId("unquote");

  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[31];
    AddState(0,new State(-7,new int[]{-3,1,-1,3}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{3,6,5,13,7,18,10,19,8,20,9,21,13,22,15,23,16,24,14,25,17,26,18,27,11,28,2,-2},new int[]{-4,4,-2,5,-5,16}));
    AddState(4,new State(-8));
    AddState(5,new State(-9));
    AddState(6,new State(-7,new int[]{-1,7}));
    AddState(7,new State(new int[]{4,8,3,6,5,13,7,18,10,19,8,20,9,21,13,22,15,23,16,24,14,25,17,26,18,27,11,28},new int[]{-4,9,-2,5,-5,16}));
    AddState(8,new State(-3));
    AddState(9,new State(new int[]{12,10,4,-8,3,-8,5,-8,7,-8,10,-8,8,-8,9,-8,13,-8,15,-8,16,-8,14,-8,17,-8,18,-8,11,-8}));
    AddState(10,new State(new int[]{3,6,5,13,7,18,10,19,8,20,9,21,13,22,15,23,16,24,14,25,17,26,18,27,11,28},new int[]{-4,11,-2,5,-5,16}));
    AddState(11,new State(new int[]{4,12}));
    AddState(12,new State(-5));
    AddState(13,new State(-7,new int[]{-1,14}));
    AddState(14,new State(new int[]{6,15,3,6,5,13,7,18,10,19,8,20,9,21,13,22,15,23,16,24,14,25,17,26,18,27,11,28},new int[]{-4,4,-2,5,-5,16}));
    AddState(15,new State(-4));
    AddState(16,new State(new int[]{3,6,5,13,7,18,10,19,8,20,9,21,13,22,15,23,16,24,14,25,17,26,18,27,11,28},new int[]{-4,17,-2,5,-5,16}));
    AddState(17,new State(-6));
    AddState(18,new State(-17));
    AddState(19,new State(-18));
    AddState(20,new State(-19));
    AddState(21,new State(-20));
    AddState(22,new State(-10));
    AddState(23,new State(-11));
    AddState(24,new State(-12));
    AddState(25,new State(-13));
    AddState(26,new State(-14));
    AddState(27,new State(-15));
    AddState(28,new State(-7,new int[]{-1,29}));
    AddState(29,new State(new int[]{4,30,3,6,5,13,7,18,10,19,8,20,9,21,13,22,15,23,16,24,14,25,17,26,18,27,11,28},new int[]{-4,4,-2,5,-5,16}));
    AddState(30,new State(-16));

    rules=new Rule[21];
    rules[1]=new Rule(-6, new int[]{-3,2});
    rules[2]=new Rule(-3, new int[]{-1});
    rules[3]=new Rule(-2, new int[]{3,-1,4});
    rules[4]=new Rule(-2, new int[]{5,-1,6});
    rules[5]=new Rule(-2, new int[]{3,-1,-4,12,-4,4});
    rules[6]=new Rule(-2, new int[]{-5,-4});
    rules[7]=new Rule(-1, new int[]{});
    rules[8]=new Rule(-1, new int[]{-1,-4});
    rules[9]=new Rule(-4, new int[]{-2});
    rules[10]=new Rule(-4, new int[]{13});
    rules[11]=new Rule(-4, new int[]{15});
    rules[12]=new Rule(-4, new int[]{16});
    rules[13]=new Rule(-4, new int[]{14});
    rules[14]=new Rule(-4, new int[]{17});
    rules[15]=new Rule(-4, new int[]{18});
    rules[16]=new Rule(-4, new int[]{11,-1,4});
    rules[17]=new Rule(-5, new int[]{7});
    rules[18]=new Rule(-5, new int[]{10});
    rules[19]=new Rule(-5, new int[]{8});
    rules[20]=new Rule(-5, new int[]{9});

    nonTerminals = new string[] {"", "exprlist", "list", "file", "expr", 
      "specexpr", "$accept", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // file -> exprlist 
#line 93 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ parsed = value_stack.array[value_stack.top-1].list; }
        break;
      case 3: // list -> LBRACE exprlist RBRACE 
#line 97 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = SetLocation(value_stack.array[value_stack.top-2].list,location_stack.array[location_stack.top-3],location_stack.array[location_stack.top-1]); }
        break;
      case 4: // list -> LBRACK exprlist RBRACK 
#line 98 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = SetLocation(value_stack.array[value_stack.top-2].list,location_stack.array[location_stack.top-3],location_stack.array[location_stack.top-1]); }
        break;
      case 5: // list -> LBRACE exprlist expr DOT expr RBRACE 
#line 99 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = SetLocation(Append(value_stack.array[value_stack.top-5].list, new Cons(value_stack.array[value_stack.top-4].elem,value_stack.array[value_stack.top-2].elem)),location_stack.array[location_stack.top-6],location_stack.array[location_stack.top-1]); }
        break;
      case 6: // list -> specexpr expr 
#line 100 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = new Cons(value_stack.array[value_stack.top-2].elem, new Cons(value_stack.array[value_stack.top-1].elem)); }
        break;
      case 7: // exprlist -> 
#line 104 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = null; }
        break;
      case 8: // exprlist -> exprlist expr 
#line 105 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = Append(value_stack.array[value_stack.top-2].list,new Cons(value_stack.array[value_stack.top-1].elem)); }
        break;
      case 9: // expr -> list 
#line 109 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = value_stack.array[value_stack.top-1].list;}
        break;
      case 10: // expr -> SYMBOL 
#line 110 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = SymbolTable.StringToId(value_stack.array[value_stack.top-1].text); }
        break;
      case 11: // expr -> STRING 
#line 111 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = value_stack.array[value_stack.top-1].text.Trim('"'); }
        break;
      case 12: // expr -> INTEGER 
#line 112 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = Convert.ToInt32(value_stack.array[value_stack.top-1].text);}
        break;
      case 13: // expr -> LITERAL 
#line 113 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = value_stack.array[value_stack.top-1].text == "#t" ? (object)true : (value_stack.array[value_stack.top-1].text == "#f" ? (object)false : null);}
        break;
      case 14: // expr -> REAL 
#line 114 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = Convert.ToDouble(value_stack.array[value_stack.top-1].text);}
        break;
      case 15: // expr -> CHARACTER 
#line 115 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = value_stack.array[value_stack.top-1].text[0];}
        break;
      case 16: // expr -> VECTORLBRACE exprlist RBRACE 
#line 116 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = Builtins.ListToVector(value_stack.array[value_stack.top-2].list);}
        break;
      case 17: // specexpr -> QUOTE 
#line 120 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = quote;}
        break;
      case 18: // specexpr -> UNQUOTESPLICING 
#line 121 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = unquote_splicing; }
        break;
      case 19: // specexpr -> QUASIQUOTE 
#line 122 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = quasiquote; }
        break;
      case 20: // specexpr -> UNQUOTE 
#line 123 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = unquote; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 126 "C:\Documents and Settings\bps\My Documents\IronScheme\IronScheme\Compiler\IronScheme.y"










    
}
}
