// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2007
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.2.0.115 (2007-11-7)
// options: lines


using System;
using System.Collections.Generic;
using System.Text;
using gppg;
using IronScheme.Runtime;
using Microsoft.Scripting;

namespace IronScheme.Compiler
{
public enum Tokens {
    error=1,EOF=2,LBRACE=3,RBRACE=4,LBRACK=5,RBRACK=6,QUOTE=7,QUASIQUOTE=8,
    UNQUOTE=9,UNQUOTESPLICING=10,VECTORLBRACE=11,DOT=12,BYTEVECTORLBRACE=13,UNSYNTAX=14,SYNTAX=15,UNSYNTAXSPLICING=16,
    QUASISYNTAX=17,IGNOREDATUM=18,SYMBOL=19,LITERAL=20,STRING=21,NUMBER=22,CHARACTER=23};

public struct ValueType
#line 141 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{
  public Cons list;
  public object elem;
  public string text;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : IScanner<ValueType,LexLocation> {
  private LexLocation __yylloc;
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#line 15 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"


public Cons parsed;

static Cons Last(Cons c)
{
  while (c.cdr != null)
  {
    c = c.cdr as Cons;
  }
  return c;
}

static Cons Append(Cons c, Cons t)
{
  if (c == null || c.car == Ignore)
  {
    return t;
  }
  if (t == null || t.car == Ignore)
  {
    return c;
  }
  Last(c).cdr = t;
  return c;
}

public static Dictionary<object,SourceSpan> sourcemap = new Dictionary<object,SourceSpan>();

static SourceSpan GetLocation(gppg.LexLocation start, gppg.LexLocation end)
{
  int ecol = end.eCol + 1;
  if (ecol <= 0)
  {
    ecol = 1;
  }
  return new SourceSpan(
    new SourceLocation(1, start.sLin, start.sCol + 1),
    new SourceLocation(1, end.eLin, ecol));
}

protected override SourceSpan GetLocation(gppg.LexLocation loc)
{
  return new SourceSpan(
    new SourceLocation(1, loc.sLin, loc.sCol + 1),
    new SourceLocation(1, loc.eLin, loc.eCol + 1));
}

static object SetLocation(object o, gppg.LexLocation start, gppg.LexLocation end)
{
  if (o == null)
  {
    return null;
  }
  sourcemap[o] = GetLocation(start, end);
  return o;
}

static Cons SetLocation(Cons o, gppg.LexLocation start, gppg.LexLocation end)
{
  if (o == null)
  {
    return null;
  }
  sourcemap[o] = GetLocation(start, end);
  return o;
}


static string CleanString(string input)
{
  input = input.Substring(1, input.Length - 2);
  input = input.Replace("\\\\", "\\");
  input = input.Replace("\\\"", "\"");
  input = input.Replace("\\r", "\r");
  input = input.Replace("\\n", "\n");
  input = input.Replace("\\t", "\t");
  input = input.Replace("\r", "");
  // deal with string continuations
  string[] lines = input.Split('\n');
  
  List<string> fixup = new List<string>();
  
  for (int i = 0; i < lines.Length; i++)
  {
    if (lines[i].EndsWith("\\") && lines.Length > 1)
    {
      string line = lines[i];
      string tail = lines[i + 1];
      
      int index = 0;
      for (int j = 0; j < tail.Length; j++)
      {
        if (!(tail[j] == ' ' || tail[j] == '\t'))
        {
          index = j;
          break;
        }
      }
      
      string newline = line.Substring(0, line.Length - 1) + tail.Substring(index);
      fixup.Add(newline);
      i++;
    }
    else
    {
      fixup.Add(lines[i]);
    }
  }
  
  return string.Join("\n", fixup.ToArray());
}

static readonly object Ignore = new object();
static readonly SymbolId quote = SymbolTable.StringToId("quote");
static readonly SymbolId unquote_splicing = SymbolTable.StringToId("unquote-splicing");
static readonly SymbolId quasiquote = SymbolTable.StringToId("quasiquote");
static readonly SymbolId unquote = SymbolTable.StringToId("unquote");
static readonly SymbolId syntax = SymbolTable.StringToId("syntax");
static readonly SymbolId unsyntax_splicing = SymbolTable.StringToId("unsyntax-splicing");
static readonly SymbolId quasisyntax = SymbolTable.StringToId("quasisyntax");
static readonly SymbolId unsyntax = SymbolTable.StringToId("unsyntax");

  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[39];
    AddState(0,new State(-7,new int[]{-3,1,-1,3}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{3,6,5,13,7,18,10,19,8,20,9,21,15,22,16,23,17,24,14,25,19,26,21,27,22,28,20,29,23,30,11,31,13,34,18,37,2,-2},new int[]{-4,4,-2,5,-5,16}));
    AddState(4,new State(-8));
    AddState(5,new State(-9));
    AddState(6,new State(-7,new int[]{-1,7}));
    AddState(7,new State(new int[]{4,8,3,6,5,13,7,18,10,19,8,20,9,21,15,22,16,23,17,24,14,25,19,26,21,27,22,28,20,29,23,30,11,31,13,34,18,37},new int[]{-4,9,-2,5,-5,16}));
    AddState(8,new State(-3));
    AddState(9,new State(new int[]{12,10,4,-8,3,-8,5,-8,7,-8,10,-8,8,-8,9,-8,15,-8,16,-8,17,-8,14,-8,19,-8,21,-8,22,-8,20,-8,23,-8,11,-8,13,-8,18,-8}));
    AddState(10,new State(new int[]{3,6,5,13,7,18,10,19,8,20,9,21,15,22,16,23,17,24,14,25,19,26,21,27,22,28,20,29,23,30,11,31,13,34,18,37},new int[]{-4,11,-2,5,-5,16}));
    AddState(11,new State(new int[]{4,12}));
    AddState(12,new State(-5));
    AddState(13,new State(-7,new int[]{-1,14}));
    AddState(14,new State(new int[]{6,15,3,6,5,13,7,18,10,19,8,20,9,21,15,22,16,23,17,24,14,25,19,26,21,27,22,28,20,29,23,30,11,31,13,34,18,37},new int[]{-4,4,-2,5,-5,16}));
    AddState(15,new State(-4));
    AddState(16,new State(new int[]{3,6,5,13,7,18,10,19,8,20,9,21,15,22,16,23,17,24,14,25,19,26,21,27,22,28,20,29,23,30,11,31,13,34,18,37},new int[]{-4,17,-2,5,-5,16}));
    AddState(17,new State(-6));
    AddState(18,new State(-18));
    AddState(19,new State(-19));
    AddState(20,new State(-20));
    AddState(21,new State(-21));
    AddState(22,new State(-22));
    AddState(23,new State(-23));
    AddState(24,new State(-24));
    AddState(25,new State(-25));
    AddState(26,new State(-10));
    AddState(27,new State(-11));
    AddState(28,new State(-12));
    AddState(29,new State(-13));
    AddState(30,new State(-14));
    AddState(31,new State(-7,new int[]{-1,32}));
    AddState(32,new State(new int[]{4,33,3,6,5,13,7,18,10,19,8,20,9,21,15,22,16,23,17,24,14,25,19,26,21,27,22,28,20,29,23,30,11,31,13,34,18,37},new int[]{-4,4,-2,5,-5,16}));
    AddState(33,new State(-15));
    AddState(34,new State(-7,new int[]{-1,35}));
    AddState(35,new State(new int[]{4,36,3,6,5,13,7,18,10,19,8,20,9,21,15,22,16,23,17,24,14,25,19,26,21,27,22,28,20,29,23,30,11,31,13,34,18,37},new int[]{-4,4,-2,5,-5,16}));
    AddState(36,new State(-16));
    AddState(37,new State(new int[]{3,6,5,13,7,18,10,19,8,20,9,21,15,22,16,23,17,24,14,25,19,26,21,27,22,28,20,29,23,30,11,31,13,34,18,37},new int[]{-4,38,-2,5,-5,16}));
    AddState(38,new State(-17));

    rules=new Rule[26];
    rules[1]=new Rule(-6, new int[]{-3,2});
    rules[2]=new Rule(-3, new int[]{-1});
    rules[3]=new Rule(-2, new int[]{3,-1,4});
    rules[4]=new Rule(-2, new int[]{5,-1,6});
    rules[5]=new Rule(-2, new int[]{3,-1,-4,12,-4,4});
    rules[6]=new Rule(-2, new int[]{-5,-4});
    rules[7]=new Rule(-1, new int[]{});
    rules[8]=new Rule(-1, new int[]{-1,-4});
    rules[9]=new Rule(-4, new int[]{-2});
    rules[10]=new Rule(-4, new int[]{19});
    rules[11]=new Rule(-4, new int[]{21});
    rules[12]=new Rule(-4, new int[]{22});
    rules[13]=new Rule(-4, new int[]{20});
    rules[14]=new Rule(-4, new int[]{23});
    rules[15]=new Rule(-4, new int[]{11,-1,4});
    rules[16]=new Rule(-4, new int[]{13,-1,4});
    rules[17]=new Rule(-4, new int[]{18,-4});
    rules[18]=new Rule(-5, new int[]{7});
    rules[19]=new Rule(-5, new int[]{10});
    rules[20]=new Rule(-5, new int[]{8});
    rules[21]=new Rule(-5, new int[]{9});
    rules[22]=new Rule(-5, new int[]{15});
    rules[23]=new Rule(-5, new int[]{16});
    rules[24]=new Rule(-5, new int[]{17});
    rules[25]=new Rule(-5, new int[]{14});

    nonTerminals = new string[] {"", "exprlist", "list", "file", "expr", 
      "specexpr", "$accept", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // file -> exprlist 
#line 159 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ parsed = value_stack.array[value_stack.top-1].list; }
        break;
      case 3: // list -> LBRACE exprlist RBRACE 
#line 163 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = SetLocation(value_stack.array[value_stack.top-2].list,location_stack.array[location_stack.top-3],location_stack.array[location_stack.top-1]); }
        break;
      case 4: // list -> LBRACK exprlist RBRACK 
#line 164 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = SetLocation(value_stack.array[value_stack.top-2].list,location_stack.array[location_stack.top-3],location_stack.array[location_stack.top-1]); }
        break;
      case 5: // list -> LBRACE exprlist expr DOT expr RBRACE 
#line 165 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = SetLocation(Append(value_stack.array[value_stack.top-5].list, new Cons(value_stack.array[value_stack.top-4].elem,value_stack.array[value_stack.top-2].elem)),location_stack.array[location_stack.top-6],location_stack.array[location_stack.top-1]); }
        break;
      case 6: // list -> specexpr expr 
#line 166 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = SetLocation(new Cons(value_stack.array[value_stack.top-2].elem, new Cons(value_stack.array[value_stack.top-1].elem)), location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 7: // exprlist -> 
#line 170 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = null; }
        break;
      case 8: // exprlist -> exprlist expr 
#line 171 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.list = Append(value_stack.array[value_stack.top-2].list,new Cons(value_stack.array[value_stack.top-1].elem)); }
        break;
      case 9: // expr -> list 
#line 175 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = value_stack.array[value_stack.top-1].list;}
        break;
      case 10: // expr -> SYMBOL 
#line 176 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = SymbolTable.StringToId(value_stack.array[value_stack.top-1].text); }
        break;
      case 11: // expr -> STRING 
#line 177 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = CleanString(value_stack.array[value_stack.top-1].text); }
        break;
      case 12: // expr -> NUMBER 
#line 178 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = Builtins.StringToNumber(value_stack.array[value_stack.top-1].text);}
        break;
      case 13: // expr -> LITERAL 
#line 179 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = value_stack.array[value_stack.top-1].text == "#t" ? Builtins.TRUE : (value_stack.array[value_stack.top-1].text == "#f" ? Builtins.FALSE : null);}
        break;
      case 14: // expr -> CHARACTER 
#line 180 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = value_stack.array[value_stack.top-1].text[0];}
        break;
      case 15: // expr -> VECTORLBRACE exprlist RBRACE 
#line 181 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = SetLocation(Builtins.ListToVector(value_stack.array[value_stack.top-2].list),location_stack.array[location_stack.top-3],location_stack.array[location_stack.top-1]);}
        break;
      case 16: // expr -> BYTEVECTORLBRACE exprlist RBRACE 
#line 182 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = SetLocation(Builtins.ListToByteVector(value_stack.array[value_stack.top-2].list),location_stack.array[location_stack.top-3],location_stack.array[location_stack.top-1]); }
        break;
      case 17: // expr -> IGNOREDATUM expr 
#line 183 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = Ignore; }
        break;
      case 18: // specexpr -> QUOTE 
#line 187 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = quote;}
        break;
      case 19: // specexpr -> UNQUOTESPLICING 
#line 188 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = unquote_splicing; }
        break;
      case 20: // specexpr -> QUASIQUOTE 
#line 189 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = quasiquote; }
        break;
      case 21: // specexpr -> UNQUOTE 
#line 190 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = unquote; }
        break;
      case 22: // specexpr -> SYNTAX 
#line 191 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = syntax;}
        break;
      case 23: // specexpr -> UNSYNTAXSPLICING 
#line 192 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = unsyntax_splicing; }
        break;
      case 24: // specexpr -> QUASISYNTAX 
#line 193 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = quasisyntax; }
        break;
      case 25: // specexpr -> UNSYNTAX 
#line 194 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"
			{ yyval.elem = unsyntax; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 198 "C:\dev\IronScheme\IronScheme\Compiler\IronScheme.y"










    
}
}
