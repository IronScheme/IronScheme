;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(void)

(void)

((case-lambda ((g$make-eq-hashtable$13407 g$make-eqv-hashtable$13409 g$make-hashtable$13411 g$hashtable?$13413 g$hashtable-size$13415 g$hashtable-ref$13417 g$hashtable-set!$13419 g$hashtable-delete!$13421 g$hashtable-contains?$13423 g$hashtable-update!$13425 g$hashtable-copy$13427 g$hashtable-clear!$13429 g$hashtable-keys$13431 g$hashtable-entries$13433 g$hashtable-equivalence-function$13435 g$hashtable-hash-function$13437 g$hashtable-mutable?$13439 g$equal-hash$13441 g$string-hash$13443 g$string-ci-hash$13445 g$symbol-hash$13447) (begin (set! g$make-eq-hashtable$13407 (case-lambda (() (clr-new-internal 'system.collections.hashtable)) ((g$k$13449) (clr-new-internal 'system.collections.hashtable g$k$13449)))) (set! g$make-eqv-hashtable$13409 (case-lambda (() (clr-new-internal 'system.collections.hashtable)) ((g$k$13451) (clr-new-internal 'system.collections.hashtable g$k$13451)))) (set! g$make-hashtable$13411 '#f) (set! g$hashtable?$13413 '#f) (set! g$hashtable-size$13415 (case-lambda ((g$ht$13453) (clr-call-internal 'system.collections.hashtable:get_count g$ht$13453)))) (set! g$hashtable-ref$13417 (case-lambda ((g$ht$13455 g$key$13456 g$default$13457) ((case-lambda ((g$r$13461) (begin (set! g$r$13461 (clr-call-internal 'system.collections.hashtable:get_item g$ht$13455 g$key$13456)) (if (not (null? g$r$13461)) g$r$13461 g$default$13457)))) '#f)))) (set! g$hashtable-set!$13419 (case-lambda ((g$ht$13463 g$key$13464 g$obj$13465) (clr-call-internal 'system.collections.hashtable:set_item g$ht$13463 g$key$13464 g$obj$13465)))) (set! g$hashtable-delete!$13421 (case-lambda ((g$ht$13469 g$key$13470) (clr-call-internal 'system.collections.hashtable:remove g$ht$13469 g$key$13470)))) (set! g$hashtable-contains?$13423 (case-lambda ((g$ht$13473 g$key$13474) (clr-call-internal 'system.collections.hashtable:containskey g$ht$13473 g$key$13474)))) (set! g$hashtable-update!$13425 '#f) (set! g$hashtable-copy$13427 '#f) (set! g$hashtable-clear!$13429 (case-lambda ((g$ht$13477) (clr-call-internal 'system.collections.hashtable:clear g$ht$13477)))) (set! g$hashtable-keys$13431 '#f) (set! g$hashtable-entries$13433 '#f) (set! g$hashtable-equivalence-function$13435 '#f) (set! g$hashtable-hash-function$13437 '#f) (set! g$hashtable-mutable?$13439 '#f) (set! g$equal-hash$13441 '#f) (set! g$string-hash$13443 '#f) (set! g$string-ci-hash$13445 '#f) (set! g$symbol-hash$13447 '#f) (begin (set! g$g$symbol-hash$13447$13479 g$symbol-hash$13447) (set! g$g$string-ci-hash$13445$13480 g$string-ci-hash$13445) (set! g$g$string-hash$13443$13481 g$string-hash$13443) (set! g$g$equal-hash$13441$13482 g$equal-hash$13441) (set! g$g$hashtable-mutable?$13439$13483 g$hashtable-mutable?$13439) (set! g$g$hashtable-hash-function$13437$13484 g$hashtable-hash-function$13437) (set! g$g$hashtable-equivalence-function$13435$13485 g$hashtable-equivalence-function$13435) (set! g$g$hashtable-entries$13433$13486 g$hashtable-entries$13433) (set! g$g$hashtable-keys$13431$13487 g$hashtable-keys$13431) (set! g$g$hashtable-clear!$13429$13488 g$hashtable-clear!$13429) (set! g$g$hashtable-copy$13427$13489 g$hashtable-copy$13427) (set! g$g$hashtable-update!$13425$13490 g$hashtable-update!$13425) (set! g$g$hashtable-contains?$13423$13491 g$hashtable-contains?$13423) (set! g$g$hashtable-delete!$13421$13492 g$hashtable-delete!$13421) (set! g$g$hashtable-set!$13419$13493 g$hashtable-set!$13419) (set! g$g$hashtable-ref$13417$13494 g$hashtable-ref$13417) (set! g$g$hashtable-size$13415$13495 g$hashtable-size$13415) (set! g$g$hashtable?$13413$13496 g$hashtable?$13413) (set! g$g$make-hashtable$13411$13497 g$make-hashtable$13411) (set! g$g$make-eqv-hashtable$13409$13498 g$make-eqv-hashtable$13409) (set! g$g$make-eq-hashtable$13407$13499 g$make-eq-hashtable$13407))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

(void)

((case-lambda ((g$make-parameter$13524 g$file-options-spec$13721) (begin (set! g$make-parameter$13524 (case-lambda ((g$x$13723) (g$make-parameter$13524 g$x$13723 (case-lambda ((g$x$13725) g$x$13725)))) ((g$x$13727 g$fender$13728) (begin (if (procedure? g$fender$13728) (void) (error 'assert '"assertion failed" '(procedure? fender))) ((case-lambda ((g$x$13731) (case-lambda (() g$x$13731) ((g$v$13733) (set! g$x$13731 (g$fender$13728 g$v$13733)))))) (g$fender$13728 g$x$13727)))))) (set! g$file-options-spec$13721 (case-lambda ((g$x$13735) (error 'file-options-spec '"not implemented")))) (begin (set! g$g$file-options-spec$13721$13737 g$file-options-spec$13721) (set! g$g$make-parameter$13524$13740 g$make-parameter$13524))))) '#f '#f)

((case-lambda ((g$current-primitive-locations$13742 g$mutable?$13744 g$rewriter$13746 g$need-quote-hack?$13748 g$expanded->core$13750 g$compile-core-expr-to-port$13752) (begin (set! g$current-primitive-locations$13742 (g$g$make-parameter$13524$13740 (case-lambda ((g$x$13754) '#f)) (case-lambda ((g$p$13756) (begin (if (procedure? g$p$13756) (void) (error 'assert '"assertion failed" '(procedure? p))) g$p$13756))))) (set! g$mutable?$13744 (case-lambda ((g$x$13758) ((case-lambda ((g$simple?$13760) (begin (set! g$simple?$13760 (case-lambda ((g$x$13762) ((case-lambda ((g$t$13764) (if g$t$13764 g$t$13764 ((case-lambda ((g$t$13766) (if g$t$13766 g$t$13766 ((case-lambda ((g$t$13768) (if g$t$13768 g$t$13768 ((case-lambda ((g$t$13770) (if g$t$13770 g$t$13770 (begin '#f (number? g$x$13762))))) (boolean? g$x$13762))))) (symbol? g$x$13762))))) (char? g$x$13762))))) (null? g$x$13762))))) (not (g$simple?$13760 g$x$13758))))) '#f)))) (set! g$rewriter$13746 (case-lambda ((g$quote-hack?$13772) ((case-lambda ((g$f$13774) (begin (set! g$f$13774 (case-lambda ((g$x$13776) (if (pair? g$x$13776) ((case-lambda ((g$t$13778) (if (memv g$t$13778 '(quote)) (if (if g$quote-hack?$13772 (begin '#f (g$mutable?$13744 (cadr g$x$13776))) '#f) ((case-lambda ((g$g$13803) (begin (set-symbol-value! g$g$13803 (cadr g$x$13776)) g$g$13803))) (gensym)) g$x$13776) (if (memv g$t$13778 '(case-lambda)) (cons 'case-lambda (map (case-lambda ((g$x$13801) (cons (car g$x$13801) (map g$f$13774 (cdr g$x$13801))))) (cdr g$x$13776))) (if (memv g$t$13778 '(lambda)) (cons* 'lambda (cadr g$x$13776) (map g$f$13774 (cddr g$x$13776))) (if (memv g$t$13778 '(letrec)) ((case-lambda ((g$bindings$13793 g$body*$13794) ((case-lambda ((g$lhs*$13797 g$rhs*$13798) (cons* 'letrec (map list g$lhs*$13797 (map g$f$13774 g$rhs*$13798)) (map g$f$13774 g$body*$13794)))) (map car g$bindings$13793) (map cadr g$bindings$13793)))) (cadr g$x$13776) (cddr g$x$13776)) (if (memv g$t$13778 '(letrec*)) ((case-lambda ((g$bindings$13785 g$body*$13786) ((case-lambda ((g$lhs*$13789 g$rhs*$13790) (cons* 'letrec* (map list g$lhs*$13789 (map g$f$13774 g$rhs*$13790)) (map g$f$13774 g$body*$13786)))) (map car g$bindings$13785) (map cadr g$bindings$13785)))) (cadr g$x$13776) (cddr g$x$13776)) (if (memv g$t$13778 '(begin)) (cons 'begin (map g$f$13774 (cdr g$x$13776))) (if (memv g$t$13778 '(set!)) (list 'set! (cadr g$x$13776) (g$f$13774 (caddr g$x$13776))) (if (memv g$t$13778 '(primitive)) ((case-lambda ((g$op$13779) ((case-lambda ((g$t$13781) (if g$t$13781 ((case-lambda ((g$loc$13783) g$loc$13783)) g$t$13781) g$op$13779))) ((g$current-primitive-locations$13742) g$op$13779)))) (cadr g$x$13776)) (if (memv g$t$13778 '(define)) g$x$13776 (if (list? g$x$13776) (map g$f$13774 g$x$13776) (error 'rewrite '"invalid form ~s ~s" g$x$13776 (list? g$x$13776)))))))))))))) (car g$x$13776)) g$x$13776)))) g$f$13774))) '#f)))) (set! g$need-quote-hack?$13748 ((case-lambda ((g$x$13805) (not (eq? (eval-core (list 'quote g$x$13805)) (eval-core (list 'quote g$x$13805)))))) (cons '1 '2))) (set! g$expanded->core$13750 (case-lambda ((g$x$13807) ((g$rewriter$13746 g$need-quote-hack?$13748) g$x$13807)))) (set! g$compile-core-expr-to-port$13752 (case-lambda ((g$x$13809 g$p$13810) (begin (pretty-print ((g$rewriter$13746 '#f) g$x$13809) g$p$13810) (newline g$p$13810))))) (begin (set! g$g$compile-core-expr-to-port$13752$13813 g$compile-core-expr-to-port$13752) (set! g$g$expanded->core$13750$13814 g$expanded->core$13750) (set! g$g$need-quote-hack?$13748$13815 g$need-quote-hack?$13748) (set! g$g$rewriter$13746$13816 g$rewriter$13746) (set! g$g$mutable?$13744$13817 g$mutable?$13744) (set! g$g$current-primitive-locations$13742$13818 g$current-primitive-locations$13742))))) '#f '#f '#f '#f '#f '#f)

(void)

((case-lambda ((g$make-collection$13882 g$current-library-collection$13884 g$make-library$13887 g$library?$13889 g$library-id$13891 g$library-name$13893 g$library-version$13895 g$library-imp*$13897 g$library-vis*$13899 g$library-inv*$13901 g$library-subst$13903 g$library-env$13905 g$library-visit-state$13907 g$library-invoke-state$13909 g$library-visible?$13911 g$set-library-id!$13913 g$set-library-name!$13915 g$set-library-version!$13917 g$set-library-imp*!$13919 g$set-library-vis*!$13921 g$set-library-inv*!$13923 g$set-library-subst!$13925 g$set-library-env!$13927 g$set-library-visit-state!$13929 g$set-library-invoke-state!$13931 g$set-library-visible?!$13933 g$find-dependencies$13935 g$find-library-by$13937 g$library-path$13939 g$library-name->file-name$13941 g$file-locator$13943 g$library-locator$13945 g$current-library-expander$13947 g$external-pending-libraries$13949 g$find-external-library$13951 g$find-library-by-name$13953 g$library-exists?$13955 g$find-library-by-spec/die$13957 g$label->binding-table$13959 g$install-library-record$13961 g$install-library$13963 g$extend-library-subst!$13965 g$extend-library-env!$13967 g$imported-label->binding$13969 g$invoke-library$13971 g$visit-library$13973 g$invoke-library-by-spec$13975 g$installed-libraries$13977 g$library-spec$13979) (begin (set! g$make-collection$13882 (case-lambda (() ((case-lambda ((g$set$13981) ((case-lambda ((g$set-cons$13983) (begin (set! g$set-cons$13983 (case-lambda ((g$x$13985 g$ls$13986) (if (memq g$x$13985 g$ls$13986) g$ls$13986 (cons g$x$13985 g$ls$13986))))) (case-lambda (() g$set$13981) ((g$x$13989) (set! g$set$13981 (g$set-cons$13983 g$x$13989 g$set$13981))))))) '#f))) '())))) (set! g$current-library-collection$13884 (g$g$make-parameter$13524$13740 (g$make-collection$13882) (case-lambda ((g$x$13991) (begin (if (procedure? g$x$13991) (void) (error 'current-library-collection '"not a procedure" g$x$13991)) g$x$13991))))) (set! g$make-library$13887 (case-lambda ((g$id$13993 g$name$13994 g$version$13995 g$imp*$13996 g$vis*$13997 g$inv*$13998 g$subst$13999 g$env$14000 g$visit-state$14001 g$invoke-state$14002 g$visible?$14003) (vector 'g$13886 g$id$13993 g$name$13994 g$version$13995 g$imp*$13996 g$vis*$13997 g$inv*$13998 g$subst$13999 g$env$14000 g$visit-state$14001 g$invoke-state$14002 g$visible?$14003)))) (set! g$library?$13889 (case-lambda ((g$x$14015) (if (vector? g$x$14015) (if (= (vector-length g$x$14015) (+ '1 (length '(id name version imp* vis* inv* subst env visit-state invoke-state visible?)))) (begin '#f (eq? (vector-ref g$x$14015 '0) 'g$13886)) '#f) '#f)))) (set! g$library-id$13891 (case-lambda ((g$x$14017) (if (g$library?$13889 g$x$14017) (vector-ref g$x$14017 '1) (error 'library-id '"~s is not of type ~s" g$x$14017 'library))))) (set! g$library-name$13893 (case-lambda ((g$x$14019) (if (g$library?$13889 g$x$14019) (vector-ref g$x$14019 '2) (error 'library-name '"~s is not of type ~s" g$x$14019 'library))))) (set! g$library-version$13895 (case-lambda ((g$x$14021) (if (g$library?$13889 g$x$14021) (vector-ref g$x$14021 '3) (error 'library-version '"~s is not of type ~s" g$x$14021 'library))))) (set! g$library-imp*$13897 (case-lambda ((g$x$14023) (if (g$library?$13889 g$x$14023) (vector-ref g$x$14023 '4) (error 'library-imp* '"~s is not of type ~s" g$x$14023 'library))))) (set! g$library-vis*$13899 (case-lambda ((g$x$14025) (if (g$library?$13889 g$x$14025) (vector-ref g$x$14025 '5) (error 'library-vis* '"~s is not of type ~s" g$x$14025 'library))))) (set! g$library-inv*$13901 (case-lambda ((g$x$14027) (if (g$library?$13889 g$x$14027) (vector-ref g$x$14027 '6) (error 'library-inv* '"~s is not of type ~s" g$x$14027 'library))))) (set! g$library-subst$13903 (case-lambda ((g$x$14029) (if (g$library?$13889 g$x$14029) (vector-ref g$x$14029 '7) (error 'library-subst '"~s is not of type ~s" g$x$14029 'library))))) (set! g$library-env$13905 (case-lambda ((g$x$14031) (if (g$library?$13889 g$x$14031) (vector-ref g$x$14031 '8) (error 'library-env '"~s is not of type ~s" g$x$14031 'library))))) (set! g$library-visit-state$13907 (case-lambda ((g$x$14033) (if (g$library?$13889 g$x$14033) (vector-ref g$x$14033 '9) (error 'library-visit-state '"~s is not of type ~s" g$x$14033 'library))))) (set! g$library-invoke-state$13909 (case-lambda ((g$x$14035) (if (g$library?$13889 g$x$14035) (vector-ref g$x$14035 '10) (error 'library-invoke-state '"~s is not of type ~s" g$x$14035 'library))))) (set! g$library-visible?$13911 (case-lambda ((g$x$14037) (if (g$library?$13889 g$x$14037) (vector-ref g$x$14037 '11) (error 'library-visible? '"~s is not of type ~s" g$x$14037 'library))))) (set! g$set-library-id!$13913 (case-lambda ((g$x$14039 g$v$14040) (if (g$library?$13889 g$x$14039) (vector-set! g$x$14039 '1 g$v$14040) (error 'set-library-id! '"~s is not of type ~s" g$x$14039 'library))))) (set! g$set-library-name!$13915 (case-lambda ((g$x$14043 g$v$14044) (if (g$library?$13889 g$x$14043) (vector-set! g$x$14043 '2 g$v$14044) (error 'set-library-name! '"~s is not of type ~s" g$x$14043 'library))))) (set! g$set-library-version!$13917 (case-lambda ((g$x$14047 g$v$14048) (if (g$library?$13889 g$x$14047) (vector-set! g$x$14047 '3 g$v$14048) (error 'set-library-version! '"~s is not of type ~s" g$x$14047 'library))))) (set! g$set-library-imp*!$13919 (case-lambda ((g$x$14051 g$v$14052) (if (g$library?$13889 g$x$14051) (vector-set! g$x$14051 '4 g$v$14052) (error 'set-library-imp*! '"~s is not of type ~s" g$x$14051 'library))))) (set! g$set-library-vis*!$13921 (case-lambda ((g$x$14055 g$v$14056) (if (g$library?$13889 g$x$14055) (vector-set! g$x$14055 '5 g$v$14056) (error 'set-library-vis*! '"~s is not of type ~s" g$x$14055 'library))))) (set! g$set-library-inv*!$13923 (case-lambda ((g$x$14059 g$v$14060) (if (g$library?$13889 g$x$14059) (vector-set! g$x$14059 '6 g$v$14060) (error 'set-library-inv*! '"~s is not of type ~s" g$x$14059 'library))))) (set! g$set-library-subst!$13925 (case-lambda ((g$x$14063 g$v$14064) (if (g$library?$13889 g$x$14063) (vector-set! g$x$14063 '7 g$v$14064) (error 'set-library-subst! '"~s is not of type ~s" g$x$14063 'library))))) (set! g$set-library-env!$13927 (case-lambda ((g$x$14067 g$v$14068) (if (g$library?$13889 g$x$14067) (vector-set! g$x$14067 '8 g$v$14068) (error 'set-library-env! '"~s is not of type ~s" g$x$14067 'library))))) (set! g$set-library-visit-state!$13929 (case-lambda ((g$x$14071 g$v$14072) (if (g$library?$13889 g$x$14071) (vector-set! g$x$14071 '9 g$v$14072) (error 'set-library-visit-state! '"~s is not of type ~s" g$x$14071 'library))))) (set! g$set-library-invoke-state!$13931 (case-lambda ((g$x$14075 g$v$14076) (if (g$library?$13889 g$x$14075) (vector-set! g$x$14075 '10 g$v$14076) (error 'set-library-invoke-state! '"~s is not of type ~s" g$x$14075 'library))))) (set! g$set-library-visible?!$13933 (case-lambda ((g$x$14079 g$v$14080) (if (g$library?$13889 g$x$14079) (vector-set! g$x$14079 '11 g$v$14080) (error 'set-library-visible?! '"~s is not of type ~s" g$x$14079 'library))))) (set! g$find-dependencies$13935 (case-lambda ((g$ls$14083) (if (null? g$ls$14083) '() (error 'find-dependencies '"cannot handle deps yet"))))) (set! g$find-library-by$13937 (case-lambda ((g$pred$14085) (letrec ((g$f$14087 (case-lambda ((g$ls$14089) (if (null? g$ls$14089) '#f (if (g$pred$14085 (car g$ls$14089)) (car g$ls$14089) (g$f$14087 (cdr g$ls$14089)))))))) (g$f$14087 ((g$current-library-collection$13884))))))) (set! g$library-path$13939 (g$g$make-parameter$13524$13740 '(".") (case-lambda ((g$x$14091) (if (if (list? g$x$14091) (begin '#f (for-all string? g$x$14091)) '#f) (map (case-lambda ((g$x$14093) g$x$14093)) g$x$14091) (error 'library-path '"not a list of strings" g$x$14091)))))) (set! g$library-name->file-name$13941 (case-lambda ((g$x$14095) (call-with-values (case-lambda (() (open-string-output-port))) (case-lambda ((g$p$14097 g$extract$14098) ((case-lambda ((g$display-hex$14101) (begin (set! g$display-hex$14101 (case-lambda ((g$n$14103) (if (<= '0 g$n$14103 '9) (display g$n$14103 g$p$14097) (display (integer->char (+ (char->integer '#\A) (- g$n$14103 '10))) g$p$14097))))) (begin (letrec ((g$f$14105 (case-lambda ((g$ls$14107) (if (null? g$ls$14107) (display '".ss" g$p$14097) (begin (display '"/" g$p$14097) (for-each (case-lambda ((g$c$14109) (if ((case-lambda ((g$t$14111) (if g$t$14111 g$t$14111 ((case-lambda ((g$t$14113) (if g$t$14113 g$t$14113 ((case-lambda ((g$t$14115) (if g$t$14115 g$t$14115 (begin '#f (memv g$c$14109 '(#\- #\. #\_ #\~)))))) (char<=? '#\0 g$c$14109 '#\9))))) (char<=? '#\A g$c$14109 '#\Z))))) (char<=? '#\a g$c$14109 '#\z)) (display g$c$14109 g$p$14097) (begin (display '"%" g$p$14097) ((case-lambda ((g$n$14117) (begin (g$display-hex$14101 (quotient g$n$14117 '16)) (g$display-hex$14101 (remainder g$n$14117 '16))))) (char->integer g$c$14109)))))) (string->list (symbol->string (car g$ls$14107)))) (g$f$14105 (cdr g$ls$14107)))))))) (g$f$14105 g$x$14095)) (g$extract$14098))))) '#f))))))) (set! g$file-locator$13943 (g$g$make-parameter$13524$13740 (case-lambda ((g$x$14119) ((case-lambda ((g$str$14121) (letrec ((g$f$14123 (case-lambda ((g$ls$14125) (if (pair? g$ls$14125) (begin '#f ((case-lambda ((g$name$14127) (if (file-exists? g$name$14127) g$name$14127 (g$f$14123 (cdr g$ls$14125))))) (string-append (car g$ls$14125) g$str$14121))) '#f))))) (g$f$14123 (g$library-path$13939))))) (g$library-name->file-name$13941 g$x$14119)))) (case-lambda ((g$f$14129) (if (procedure? g$f$14129) g$f$14129 (error 'file-locator '"not a procedure" g$f$14129)))))) (set! g$library-locator$13945 (g$g$make-parameter$13524$13740 (case-lambda ((g$x$14131) ((case-lambda ((g$file-name$14133) (if (string? g$file-name$14133) (begin '#f (with-input-from-file g$file-name$14133 read)) '#f))) ((g$file-locator$13943) g$x$14131)))) (case-lambda ((g$f$14135) (if (procedure? g$f$14135) g$f$14135 (error 'library-locator '"not a procedure" g$f$14135)))))) (set! g$current-library-expander$13947 (g$g$make-parameter$13524$13740 (case-lambda ((g$x$14137) (error 'library-expander '"not initialized"))) (case-lambda ((g$f$14139) (if (procedure? g$f$14139) g$f$14139 (error 'library-expander '"not a procedure" g$f$14139)))))) (set! g$external-pending-libraries$13949 (g$g$make-parameter$13524$13740 '())) (set! g$find-external-library$13951 (case-lambda ((g$name$14141) (begin (if (member g$name$14141 (g$external-pending-libraries$13949)) (error '#f '"circular attempt to import library was detected" g$name$14141) (void)) ((case-lambda ((g$g$t$14143$14145 g$g$t$14144$14146) ((case-lambda ((g$swap$14149) (dynamic-wind g$swap$14149 (case-lambda (() ((case-lambda ((g$lib-expr$14151) (begin (if g$lib-expr$14151 (void) (error '#f '"cannot find library" g$name$14141)) ((g$current-library-expander$13947) g$lib-expr$14151) ((case-lambda ((g$t$14153) (if g$t$14153 g$t$14153 (begin '#f (error '#f '"handling external library did not yield the currect library" g$name$14141))))) (g$find-library-by$13937 (case-lambda ((g$x$14155) (equal? (g$library-name$13893 g$x$14155) g$name$14141)))))))) ((g$library-locator$13945) g$name$14141)))) g$swap$14149))) (case-lambda (() ((case-lambda ((g$t$14157) (begin (g$g$t$14143$14145 g$g$t$14144$14146) (set! g$g$t$14144$14146 g$t$14157)))) (g$g$t$14143$14145))))))) g$external-pending-libraries$13949 (cons g$name$14141 (g$external-pending-libraries$13949))))))) (set! g$find-library-by-name$13953 (case-lambda ((g$name$14159) ((case-lambda ((g$t$14161) (if g$t$14161 g$t$14161 (begin '#f (g$find-external-library$13951 g$name$14159))))) (g$find-library-by$13937 (case-lambda ((g$x$14163) (equal? (g$library-name$13893 g$x$14163) g$name$14159)))))))) (set! g$library-exists?$13955 (case-lambda ((g$name$14165) (if (g$find-library-by$13937 (case-lambda ((g$x$14167) (equal? (g$library-name$13893 g$x$14167) g$name$14165)))) (begin '#f '#t) '#f)))) (set! g$find-library-by-spec/die$13957 (case-lambda ((g$spec$14169) ((case-lambda ((g$id$14171) ((case-lambda ((g$t$14173) (if g$t$14173 g$t$14173 (begin '#f (error '#f '"cannot find library with required spec" g$spec$14169))))) (g$find-library-by$13937 (case-lambda ((g$x$14175) (eq? g$id$14171 (g$library-id$13891 g$x$14175)))))))) (car g$spec$14169))))) (set! g$label->binding-table$13959 (g$g$make-eq-hashtable$13407$13499)) (set! g$install-library-record$13961 (case-lambda ((g$lib$14177) (begin ((case-lambda ((g$exp-env$14179) (for-each (case-lambda ((g$x$14181) ((case-lambda ((g$label$14183 g$binding$14184) ((case-lambda ((g$binding$14187) (g$g$hashtable-set!$13419$13493 g$label->binding-table$13959 g$label$14183 g$binding$14187))) ((case-lambda ((g$t$14189) (if (memv g$t$14189 '(global)) (cons 'global (cons g$lib$14177 (cdr g$binding$14184))) (if (memv g$t$14189 '(global-macro)) (cons 'global-macro (cons g$lib$14177 (cdr g$binding$14184))) (if (memv g$t$14189 '(global-macro!)) (cons 'global-macro! (cons g$lib$14177 (cdr g$binding$14184))) g$binding$14184))))) (car g$binding$14184))))) (car g$x$14181) (cdr g$x$14181)))) g$exp-env$14179))) (g$library-env$13905 g$lib$14177)) ((g$current-library-collection$13884) g$lib$14177))))) (set! g$install-library$13963 (case-lambda ((g$id$14190 g$name$14191 g$ver$14192 g$imp*$14193 g$vis*$14194 g$inv*$14195 g$exp-subst$14196 g$exp-env$14197 g$visit-code$14198 g$invoke-code$14199 g$visible?$14200) ((case-lambda ((g$imp-lib*$14212 g$vis-lib*$14213 g$inv-lib*$14214) (begin (if (if (symbol? g$id$14190) (if (list? g$name$14191) (begin '#f (list? g$ver$14192)) '#f) '#f) (void) (error 'install-library '"invalid spec with id/name/ver" g$id$14190 g$name$14191 g$ver$14192)) (if (g$library-exists?$13955 g$name$14191) (error 'install-library '"library is already installed" g$name$14191) (void)) ((case-lambda ((g$lib$14218) (g$install-library-record$13961 g$lib$14218))) (g$make-library$13887 g$id$14190 g$name$14191 g$ver$14192 g$imp-lib*$14212 g$vis-lib*$14213 g$inv-lib*$14214 g$exp-subst$14196 g$exp-env$14197 g$visit-code$14198 g$invoke-code$14199 g$visible?$14200))))) (map g$find-library-by-spec/die$13957 g$imp*$14193) (map g$find-library-by-spec/die$13957 g$vis*$14194) (map g$find-library-by-spec/die$13957 g$inv*$14195))))) (set! g$extend-library-subst!$13965 (case-lambda ((g$lib$14220 g$sym$14221 g$label$14222) (g$set-library-subst!$13925 g$lib$14220 (cons (cons g$sym$14221 g$label$14222) (g$library-subst$13903 g$lib$14220)))))) (set! g$extend-library-env!$13967 (case-lambda ((g$lib$14226 g$label$14227 g$binding$14228) (begin (g$set-library-env!$13927 g$lib$14226 (cons (cons g$label$14227 g$binding$14228) (g$library-env$13905 g$lib$14226))) (g$g$hashtable-set!$13419$13493 g$label->binding-table$13959 g$label$14227 g$binding$14228))))) (set! g$imported-label->binding$13969 (case-lambda ((g$lab$14232) (g$g$hashtable-ref$13417$13494 g$label->binding-table$13959 g$lab$14232 '#f)))) (set! g$invoke-library$13971 (case-lambda ((g$lib$14234) ((case-lambda ((g$invoke$14236) (if (procedure? g$invoke$14236) (begin (g$set-library-invoke-state!$13931 g$lib$14234 (case-lambda (() (error 'invoke '"circularity detected" g$lib$14234)))) (for-each g$invoke-library$13971 (g$library-inv*$13901 g$lib$14234)) (g$set-library-invoke-state!$13931 g$lib$14234 (case-lambda (() (error 'invoke '"first invoke did not return" g$lib$14234)))) (g$invoke$14236) (g$set-library-invoke-state!$13931 g$lib$14234 '#t)) (void)))) (g$library-invoke-state$13909 g$lib$14234))))) (set! g$visit-library$13973 (case-lambda ((g$lib$14238) ((case-lambda ((g$visit$14240) (if (procedure? g$visit$14240) (begin (g$set-library-visit-state!$13929 g$lib$14238 (case-lambda (() (error 'visit '"circularity detected" g$lib$14238)))) (for-each g$invoke-library$13971 (g$library-vis*$13899 g$lib$14238)) (g$set-library-visit-state!$13929 g$lib$14238 (case-lambda (() (error 'invoke '"first visit did not return" g$lib$14238)))) (g$visit$14240) (g$set-library-visit-state!$13929 g$lib$14238 '#t)) (void)))) (g$library-visit-state$13907 g$lib$14238))))) (set! g$invoke-library-by-spec$13975 (case-lambda ((g$spec$14242) (g$invoke-library$13971 (g$find-library-by-spec/die$13957 g$spec$14242))))) (set! g$installed-libraries$13977 (case-lambda ((g$all?$14244) (letrec ((g$f$14246 (case-lambda ((g$ls$14248) (if (null? g$ls$14248) '() (if ((case-lambda ((g$t$14250) (if g$t$14250 g$t$14250 (begin '#f (g$library-visible?$13911 (car g$ls$14248)))))) g$all?$14244) (cons (car g$ls$14248) (g$f$14246 (cdr g$ls$14248))) (g$f$14246 (cdr g$ls$14248)))))))) (g$f$14246 ((g$current-library-collection$13884))))) (() (g$installed-libraries$13977 '#f)))) (set! g$library-spec$13979 (case-lambda ((g$x$14252) (begin (if (g$library?$13889 g$x$14252) (void) (error 'library-spec '"not a library" g$x$14252)) (list (g$library-id$13891 g$x$14252) (g$library-name$13893 g$x$14252) (g$library-version$13895 g$x$14252)))))) (begin (set! g$g$library-spec$13979$14254 g$library-spec$13979) (set! g$g$installed-libraries$13977$14255 g$installed-libraries$13977) (set! g$g$invoke-library-by-spec$13975$14256 g$invoke-library-by-spec$13975) (set! g$g$visit-library$13973$14257 g$visit-library$13973) (set! g$g$invoke-library$13971$14258 g$invoke-library$13971) (set! g$g$imported-label->binding$13969$14259 g$imported-label->binding$13969) (set! g$g$extend-library-env!$13967$14260 g$extend-library-env!$13967) (set! g$g$extend-library-subst!$13965$14261 g$extend-library-subst!$13965) (set! g$g$install-library$13963$14262 g$install-library$13963) (set! g$g$install-library-record$13961$14263 g$install-library-record$13961) (set! g$g$label->binding-table$13959$14264 g$label->binding-table$13959) (set! g$g$find-library-by-spec/die$13957$14265 g$find-library-by-spec/die$13957) (set! g$g$library-exists?$13955$14266 g$library-exists?$13955) (set! g$g$find-library-by-name$13953$14267 g$find-library-by-name$13953) (set! g$g$find-external-library$13951$14268 g$find-external-library$13951) (set! g$g$external-pending-libraries$13949$14269 g$external-pending-libraries$13949) (set! g$g$current-library-expander$13947$14270 g$current-library-expander$13947) (set! g$g$library-locator$13945$14271 g$library-locator$13945) (set! g$g$file-locator$13943$14272 g$file-locator$13943) (set! g$g$library-name->file-name$13941$14273 g$library-name->file-name$13941) (set! g$g$library-path$13939$14274 g$library-path$13939) (set! g$g$find-library-by$13937$14275 g$find-library-by$13937) (set! g$g$find-dependencies$13935$14276 g$find-dependencies$13935) (set! g$g$set-library-visible?!$13933$14277 g$set-library-visible?!$13933) (set! g$g$set-library-invoke-state!$13931$14278 g$set-library-invoke-state!$13931) (set! g$g$set-library-visit-state!$13929$14279 g$set-library-visit-state!$13929) (set! g$g$set-library-env!$13927$14280 g$set-library-env!$13927) (set! g$g$set-library-subst!$13925$14281 g$set-library-subst!$13925) (set! g$g$set-library-inv*!$13923$14282 g$set-library-inv*!$13923) (set! g$g$set-library-vis*!$13921$14283 g$set-library-vis*!$13921) (set! g$g$set-library-imp*!$13919$14284 g$set-library-imp*!$13919) (set! g$g$set-library-version!$13917$14285 g$set-library-version!$13917) (set! g$g$set-library-name!$13915$14286 g$set-library-name!$13915) (set! g$g$set-library-id!$13913$14287 g$set-library-id!$13913) (set! g$g$library-visible?$13911$14288 g$library-visible?$13911) (set! g$g$library-invoke-state$13909$14289 g$library-invoke-state$13909) (set! g$g$library-visit-state$13907$14290 g$library-visit-state$13907) (set! g$g$library-env$13905$14291 g$library-env$13905) (set! g$g$library-subst$13903$14292 g$library-subst$13903) (set! g$g$library-inv*$13901$14293 g$library-inv*$13901) (set! g$g$library-vis*$13899$14294 g$library-vis*$13899) (set! g$g$library-imp*$13897$14295 g$library-imp*$13897) (set! g$g$library-version$13895$14296 g$library-version$13895) (set! g$g$library-name$13893$14297 g$library-name$13893) (set! g$g$library-id$13891$14298 g$library-id$13891) (set! g$g$library?$13889$14299 g$library?$13889) (set! g$g$make-library$13887$14300 g$make-library$13887) (set! g$g$current-library-collection$13884$14301 g$current-library-collection$13884) (set! g$g$make-collection$13882$14302 g$make-collection$13882))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)

((case-lambda ((g$build-global-define$14304 g$build-lambda$14422 g$build-case-lambda$14424 g$build-let$14426 g$build-sequence$14490 g$build-void$14492 g$build-letrec$14494 g$build-letrec*$14496) (begin (set! g$build-global-define$14304 (case-lambda ((g$x$14498) (g$build-void$14492)))) (set! g$build-lambda$14422 (case-lambda ((g$ae$14500 g$vars$14501 g$exp$14502) (list 'case-lambda (list g$vars$14501 g$exp$14502))))) (set! g$build-case-lambda$14424 (case-lambda ((g$ae$14506 g$vars*$14507 g$exp*$14508) (cons 'case-lambda (map list g$vars*$14507 g$exp*$14508))))) (set! g$build-let$14426 (case-lambda ((g$ae$14512 g$lhs*$14513 g$rhs*$14514 g$body$14515) (cons (g$build-lambda$14422 g$ae$14512 g$lhs*$14513 g$body$14515) g$rhs*$14514)))) (set! g$build-sequence$14490 (case-lambda ((g$ae$14520 g$exps$14521) (letrec ((g$loop$14524 (case-lambda ((g$exps$14526) (if (null? (cdr g$exps$14526)) (car g$exps$14526) (if (equal? (car g$exps$14526) (g$build-void$14492)) (g$loop$14524 (cdr g$exps$14526)) (cons 'begin g$exps$14526))))))) (g$loop$14524 g$exps$14521))))) (set! g$build-void$14492 (case-lambda (() '((primitive void))))) (set! g$build-letrec$14494 (case-lambda ((g$ae$14528 g$vars$14529 g$val-exps$14530 g$body-exp$14531) (if (null? g$vars$14529) g$body-exp$14531 (list 'letrec (map list g$vars$14529 g$val-exps$14530) g$body-exp$14531))))) (set! g$build-letrec*$14496 (case-lambda ((g$ae$14536 g$vars$14537 g$val-exps$14538 g$body-exp$14539) (if (null? g$vars$14537) g$body-exp$14539 (g$build-let$14426 g$ae$14536 g$vars$14537 (map (case-lambda ((g$x$14544) (list 'quote '#f))) g$vars$14537) (g$build-sequence$14490 g$ae$14536 (append (map (case-lambda ((g$lhs$14546 g$rhs$14547) (list 'set! g$lhs$14546 g$rhs$14547))) g$vars$14537 g$val-exps$14538) (list g$body-exp$14539)))))))) (begin (set! g$g$build-letrec*$14496$14550 g$build-letrec*$14496) (set! g$g$build-letrec$14494$14551 g$build-letrec$14494) (set! g$g$build-void$14492$14552 g$build-void$14492) (set! g$g$build-sequence$14490$14553 g$build-sequence$14490) (set! g$g$build-let$14426$14557 g$build-let$14426) (set! g$g$build-case-lambda$14424$14558 g$build-case-lambda$14424) (set! g$g$build-lambda$14422$14559 g$build-lambda$14422) (set! g$g$build-global-define$14304$14567 g$build-global-define$14304))))) '#f '#f '#f '#f '#f '#f '#f '#f)

((case-lambda ((g$set-cons$14569 g$set-union$14571 g$top-mark*$14576 g$top-marked?$14578 g$gen-lexical$14580 g$gen-global$14582 g$gen-label$14584 g$make-rib$14587 g$rib?$14589 g$rib-sym*$14591 g$rib-mark**$14593 g$rib-label*$14595 g$rib-sealed/freq$14597 g$set-rib-sym*!$14599 g$set-rib-mark**!$14601 g$set-rib-label*!$14603 g$set-rib-sealed/freq!$14605 g$make-empty-rib$14607 g$extend-rib!$14609 g$seal-rib!$14611 g$unseal-rib!$14613 g$increment-rib-frequency!$14615 g$make-full-rib$14617 g$make-stx$14620 g$stx?$14622 g$stx-expr$14624 g$stx-mark*$14626 g$stx-subst*$14628 g$set-stx-expr!$14630 g$set-stx-mark*!$14632 g$set-stx-subst*!$14634 g$datum->stx$14636 g$gen-mark$14638 g$anti-mark$14640 g$anti-mark?$14642 g$join-wraps$14644 g$mkstx$14646 g$add-mark$14648 g$add-subst$14650 g$syntax-kind?$14652 g$syntax-vector->list$14654 g$syntax-pair?$14656 g$syntax-vector?$14658 g$syntax-null?$14660 g$syntax-list?$14662 g$syntax-car$14664 g$syntax->list$14666 g$syntax-cdr$14668 g$id?$14670 g$id->sym$14672 g$same-marks?$14674 g$bound-id=?$14676 g$free-id=?$14678 g$valid-bound-ids?$14680 g$distinct-bound-ids?$14682 g$bound-id-member?$14684 g$self-evaluating?$14686 g$strip$14688 g$stx->datum$14690 g$id->label$14692 g$label->binding$14694 g$make-binding$14696 g$binding-type$14698 g$binding-value$14700 g$syntax-type$14702 g$sanitize-binding$14729 g$make-variable-transformer$14731 g$make-eval-transformer$14733 g$parse-define$15095 g$parse-define-syntax$15097 g$scheme-stx$15099 g$add-lexical$15101 g$add-lexicals$15103 g$let-values-transformer$15105 g$letrec-helper$15107 g$letrec-transformer$15109 g$letrec*-transformer$15111 g$type-descriptor-transformer$15113 g$record-type-descriptor-transformer$15115 g$record-constructor-descriptor-transformer$15117 g$when-transformer$15119 g$unless-transformer$15121 g$if-transformer$15123 g$case-transformer$15125 g$quote-transformer$15127 g$case-lambda-transformer$15129 g$lambda-transformer$15131 g$bless$15133 g$with-syntax-macro$15135 g$let-macro$15137 g$trace-lambda-macro$15139 g$trace-define-macro$15141 g$guard-macro$15143 g$define-enumeration-macro$15145 g$time-macro$15147 g$delay-macro$15149 g$assert-macro$15151 g$endianness-macro$15153 g$identifier-syntax-macro$15155 g$do-macro$15157 g$let*-macro$15159 g$or-macro$15161 g$and-macro$15163 g$cond-macro$15165 g$include-macro$15167 g$syntax-rules-macro$15169 g$quasiquote-macro$15171 g$quasisyntax-macro$15173 g$define-struct-macro$15175 g$define-record-type-macro$15177 g$define-condition-type-macro$15179 g$incorrect-usage-macro$15181 g$parameterize-transformer$15183 g$foreign-call-transformer$15185 g$convert-pattern$15187 g$syntax-dispatch$15189 g$ellipsis?$15191 g$syntax-case-transformer$15193 g$syntax-transformer$15195 g$core-macro-transformer$15197 g$file-options-macro$15199 g$symbol-macro$15201 g$macro-transformer$15203 g$local-macro-transformer$15205 g$chi-macro$15207 g$chi-local-macro$15209 g$chi-global-macro$15211 g$chi-expr*$15213 g$chi-application$15215 g$chi-expr$15217 g$chi-set!$15219 g$chi-lambda-clause$15221 g$chi-lambda-clause*$15223 g$chi-rhs$15225 g$chi-rhs*$15227 g$find-bound=?$15229 g$find-dups$15231 g$chi-internal$15233 g$parse-module$15235 g$chi-internal-module$15237 g$chi-body*$15239 g$set-global-macro-binding!$15241 g$gen-global-macro-binding$15243 g$gen-global-var-binding$15245 g$chi-top-set!$15247 g$chi-top*$15249 g$expand-transformer$15251 g$parse-exports$15253 g$parse-library-name$15255 g$parse-library$15257 g$parse-import-spec*$15259 g$make-top-rib$15261 g$make-collector$15263 g$inv-collector$15265 g$vis-collector$15267 g$chi-library-internal$15269 g$library-body-expander$15271 g$core-library-expander$15273 g$parse-top-level-program$15275 g$top-level-expander$15277 g$make-env$15280 g$env?$15282 g$env-subst$15284 g$env-imp*$15286 g$set-env-subst!$15288 g$set-env-imp*!$15290 g$environment?$15292 g$environment$15294 g$null-environment$15296 g$scheme-report-environment$15298 g$expand$15300 g$eval$15302 g$library-expander$15304 g$boot-library-expand$15306 g$rev-map-append$15308 g$build-exports$15310 g$make-export-subst$15312 g$make-export-env/macros$15314 g$generate-temporaries$15316 g$free-identifier=?$15318 g$bound-identifier=?$15320 g$syntax-error$15322 g$identifier?$15324 g$datum->syntax$15326 g$syntax->datum$15328 g$eval-r6rs-top-level$15330 g$interaction-library$15332 g$interaction-sym->label$15334 g$eval-top-level$15336) (begin (set! g$set-cons$14569 (case-lambda ((g$x$15338 g$ls$15339) (if (memq g$x$15338 g$ls$15339) g$ls$15339 (cons g$x$15338 g$ls$15339))))) (set! g$set-union$14571 (case-lambda ((g$ls1$15342 g$ls2$15343) (if (null? g$ls1$15342) g$ls2$15343 (if (memq (car g$ls1$15342) g$ls2$15343) (g$set-union$14571 (cdr g$ls1$15342) g$ls2$15343) (cons (car g$ls1$15342) (g$set-union$14571 (cdr g$ls1$15342) g$ls2$15343))))))) (set! g$top-mark*$14576 '(top)) (set! g$top-marked?$14578 (case-lambda ((g$m*$15346) (memq 'top g$m*$15346)))) (set! g$gen-lexical$14580 (case-lambda ((g$sym$15348) (if (symbol? g$sym$15348) (gensym g$sym$15348) (if (g$stx?$14622 g$sym$15348) (g$gen-lexical$14580 (g$id->sym$14672 g$sym$15348)) (error 'gen-lexical '"BUG: invalid arg" g$sym$15348)))))) (set! g$gen-global$14582 (case-lambda ((g$x$15350) (g$gen-lexical$14580 g$x$15350)))) (set! g$gen-label$14584 (case-lambda ((g$_$15352) (gensym)))) (set! g$make-rib$14587 (case-lambda ((g$sym*$15354 g$mark**$15355 g$label*$15356 g$sealed/freq$15357) (vector 'g$14586 g$sym*$15354 g$mark**$15355 g$label*$15356 g$sealed/freq$15357)))) (set! g$rib?$14589 (case-lambda ((g$x$15362) (if (vector? g$x$15362) (if (= (vector-length g$x$15362) (+ '1 (length '(sym* mark** label* sealed/freq)))) (begin '#f (eq? (vector-ref g$x$15362 '0) 'g$14586)) '#f) '#f)))) (set! g$rib-sym*$14591 (case-lambda ((g$x$15364) (if (g$rib?$14589 g$x$15364) (vector-ref g$x$15364 '1) (error 'rib-sym* '"~s is not of type ~s" g$x$15364 'rib))))) (set! g$rib-mark**$14593 (case-lambda ((g$x$15366) (if (g$rib?$14589 g$x$15366) (vector-ref g$x$15366 '2) (error 'rib-mark** '"~s is not of type ~s" g$x$15366 'rib))))) (set! g$rib-label*$14595 (case-lambda ((g$x$15368) (if (g$rib?$14589 g$x$15368) (vector-ref g$x$15368 '3) (error 'rib-label* '"~s is not of type ~s" g$x$15368 'rib))))) (set! g$rib-sealed/freq$14597 (case-lambda ((g$x$15370) (if (g$rib?$14589 g$x$15370) (vector-ref g$x$15370 '4) (error 'rib-sealed/freq '"~s is not of type ~s" g$x$15370 'rib))))) (set! g$set-rib-sym*!$14599 (case-lambda ((g$x$15372 g$v$15373) (if (g$rib?$14589 g$x$15372) (vector-set! g$x$15372 '1 g$v$15373) (error 'set-rib-sym*! '"~s is not of type ~s" g$x$15372 'rib))))) (set! g$set-rib-mark**!$14601 (case-lambda ((g$x$15376 g$v$15377) (if (g$rib?$14589 g$x$15376) (vector-set! g$x$15376 '2 g$v$15377) (error 'set-rib-mark**! '"~s is not of type ~s" g$x$15376 'rib))))) (set! g$set-rib-label*!$14603 (case-lambda ((g$x$15380 g$v$15381) (if (g$rib?$14589 g$x$15380) (vector-set! g$x$15380 '3 g$v$15381) (error 'set-rib-label*! '"~s is not of type ~s" g$x$15380 'rib))))) (set! g$set-rib-sealed/freq!$14605 (case-lambda ((g$x$15384 g$v$15385) (if (g$rib?$14589 g$x$15384) (vector-set! g$x$15384 '4 g$v$15385) (error 'set-rib-sealed/freq! '"~s is not of type ~s" g$x$15384 'rib))))) (set! g$make-empty-rib$14607 (case-lambda (() (g$make-rib$14587 '() '() '() '#f)))) (set! g$extend-rib!$14609 (case-lambda ((g$rib$15388 g$id$15389 g$label$15390) ((case-lambda ((g$find$15394) (begin (set! g$find$15394 (case-lambda ((g$sym$15396 g$mark*$15397 g$sym*$15398 g$mark**$15399) (if (pair? g$sym*$15398) (begin '#f ((case-lambda ((g$t$15404) (if g$t$15404 g$t$15404 (begin '#f (g$find$15394 g$sym$15396 g$mark*$15397 (cdr g$sym*$15398) (cdr g$mark**$15399)))))) (if (eq? g$sym$15396 (car g$sym*$15398)) (begin '#f (g$same-marks?$14674 g$mark*$15397 (car g$mark**$15399))) '#f))) '#f)))) (begin (if (g$rib-sealed/freq$14597 g$rib$15388) (error 'extend-rib! '"rib is sealed" g$rib$15388) (void)) ((case-lambda ((g$sym$15406 g$mark*$15407) ((case-lambda ((g$sym*$15410) (begin (if (if (memq g$sym$15406 (g$rib-sym*$14591 g$rib$15388)) (begin '#f (g$find$15394 g$sym$15406 g$mark*$15407 g$sym*$15410 (g$rib-mark**$14593 g$rib$15388))) '#f) (error 'expander '"cannot redefine" (g$strip$14688 g$id$15389 '())) (void)) (g$set-rib-sym*!$14599 g$rib$15388 (cons g$sym$15406 g$sym*$15410)) (g$set-rib-mark**!$14601 g$rib$15388 (cons g$mark*$15407 (g$rib-mark**$14593 g$rib$15388))) (g$set-rib-label*!$14603 g$rib$15388 (cons g$label$15390 (g$rib-label*$14595 g$rib$15388)))))) (g$rib-sym*$14591 g$rib$15388)))) (g$id->sym$14672 g$id$15389) (g$stx-mark*$14626 g$id$15389)))))) '#f)))) (set! g$seal-rib!$14611 (case-lambda ((g$rib$15412) ((case-lambda ((g$sym*$15414) (if (null? g$sym*$15414) (void) ((case-lambda ((g$sym*$15416) (begin (g$set-rib-sym*!$14599 g$rib$15412 g$sym*$15416) (g$set-rib-mark**!$14601 g$rib$15412 (list->vector (g$rib-mark**$14593 g$rib$15412))) (g$set-rib-label*!$14603 g$rib$15412 (list->vector (g$rib-label*$14595 g$rib$15412))) (g$set-rib-sealed/freq!$14605 g$rib$15412 (make-vector (vector-length g$sym*$15416) '0))))) (list->vector g$sym*$15414))))) (g$rib-sym*$14591 g$rib$15412))))) (set! g$unseal-rib!$14613 (case-lambda ((g$rib$15418) (if (g$rib-sealed/freq$14597 g$rib$15418) (begin (g$set-rib-sealed/freq!$14605 g$rib$15418 '#f) (g$set-rib-sym*!$14599 g$rib$15418 (vector->list (g$rib-sym*$14591 g$rib$15418))) (g$set-rib-mark**!$14601 g$rib$15418 (vector->list (g$rib-mark**$14593 g$rib$15418))) (g$set-rib-label*!$14603 g$rib$15418 (vector->list (g$rib-label*$14595 g$rib$15418)))) (void))))) (set! g$increment-rib-frequency!$14615 (case-lambda ((g$rib$15420 g$idx$15421) ((case-lambda ((g$freq*$15424) ((case-lambda ((g$freq$15426) ((case-lambda ((g$i$15428) (begin (vector-set! g$freq*$15424 g$i$15428 (+ g$freq$15426 '1)) (if (= g$i$15428 g$idx$15421) (void) ((case-lambda ((g$sym*$15430 g$mark**$15431 g$label*$15432) (begin ((case-lambda ((g$sym$15436) (begin (vector-set! g$sym*$15430 g$idx$15421 (vector-ref g$sym*$15430 g$i$15428)) (vector-set! g$sym*$15430 g$i$15428 g$sym$15436)))) (vector-ref g$sym*$15430 g$idx$15421)) ((case-lambda ((g$mark*$15438) (begin (vector-set! g$mark**$15431 g$idx$15421 (vector-ref g$mark**$15431 g$i$15428)) (vector-set! g$mark**$15431 g$i$15428 g$mark*$15438)))) (vector-ref g$mark**$15431 g$idx$15421)) ((case-lambda ((g$label$15440) (begin (vector-set! g$label*$15432 g$idx$15421 (vector-ref g$label*$15432 g$i$15428)) (vector-set! g$label*$15432 g$i$15428 g$label$15440)))) (vector-ref g$label*$15432 g$idx$15421))))) (g$rib-sym*$14591 g$rib$15420) (g$rib-mark**$14593 g$rib$15420) (g$rib-label*$14595 g$rib$15420)))))) (letrec ((g$f$15442 (case-lambda ((g$i$15444) (if (zero? g$i$15444) '0 ((case-lambda ((g$j$15446) (if (= g$freq$15426 (vector-ref g$freq*$15424 g$j$15446)) (g$f$15442 g$j$15446) g$i$15444))) (- g$i$15444 '1))))))) (g$f$15442 g$idx$15421))))) (vector-ref g$freq*$15424 g$idx$15421)))) (g$rib-sealed/freq$14597 g$rib$15420))))) (set! g$make-full-rib$14617 (case-lambda ((g$id*$15448 g$label*$15449) (g$make-rib$14587 (map g$id->sym$14672 g$id*$15448) (map g$stx-mark*$14626 g$id*$15448) g$label*$15449 '#f)))) (set! g$make-stx$14620 (case-lambda ((g$expr$15452 g$mark*$15453 g$subst*$15454) (vector 'g$14619 g$expr$15452 g$mark*$15453 g$subst*$15454)))) (set! g$stx?$14622 (case-lambda ((g$x$15458) (if (vector? g$x$15458) (if (= (vector-length g$x$15458) (+ '1 (length '(expr mark* subst*)))) (begin '#f (eq? (vector-ref g$x$15458 '0) 'g$14619)) '#f) '#f)))) (set! g$stx-expr$14624 (case-lambda ((g$x$15460) (if (g$stx?$14622 g$x$15460) (vector-ref g$x$15460 '1) (error 'stx-expr '"~s is not of type ~s" g$x$15460 'stx))))) (set! g$stx-mark*$14626 (case-lambda ((g$x$15462) (if (g$stx?$14622 g$x$15462) (vector-ref g$x$15462 '2) (error 'stx-mark* '"~s is not of type ~s" g$x$15462 'stx))))) (set! g$stx-subst*$14628 (case-lambda ((g$x$15464) (if (g$stx?$14622 g$x$15464) (vector-ref g$x$15464 '3) (error 'stx-subst* '"~s is not of type ~s" g$x$15464 'stx))))) (set! g$set-stx-expr!$14630 (case-lambda ((g$x$15466 g$v$15467) (if (g$stx?$14622 g$x$15466) (vector-set! g$x$15466 '1 g$v$15467) (error 'set-stx-expr! '"~s is not of type ~s" g$x$15466 'stx))))) (set! g$set-stx-mark*!$14632 (case-lambda ((g$x$15470 g$v$15471) (if (g$stx?$14622 g$x$15470) (vector-set! g$x$15470 '2 g$v$15471) (error 'set-stx-mark*! '"~s is not of type ~s" g$x$15470 'stx))))) (set! g$set-stx-subst*!$14634 (case-lambda ((g$x$15474 g$v$15475) (if (g$stx?$14622 g$x$15474) (vector-set! g$x$15474 '3 g$v$15475) (error 'set-stx-subst*! '"~s is not of type ~s" g$x$15474 'stx))))) (set! g$datum->stx$14636 (case-lambda ((g$id$15478 g$datum$15479) (g$make-stx$14620 g$datum$15479 (g$stx-mark*$14626 g$id$15478) (g$stx-subst*$14628 g$id$15478))))) (set! g$gen-mark$14638 (case-lambda (() (string '#\m)))) (set! g$anti-mark$14640 '#f) (set! g$anti-mark?$14642 not) (set! g$join-wraps$14644 (case-lambda ((g$m1*$15482 g$s1*$15483 g$e$15484) ((case-lambda ((g$cancel$15488) (begin (set! g$cancel$15488 (case-lambda ((g$ls1$15490 g$ls2$15491) (letrec ((g$f$15494 (case-lambda ((g$x$15496 g$ls1$15497) (if (null? g$ls1$15497) (cdr g$ls2$15491) (cons g$x$15496 (g$f$15494 (car g$ls1$15497) (cdr g$ls1$15497)))))))) (g$f$15494 (car g$ls1$15490) (cdr g$ls1$15490)))))) ((case-lambda ((g$m2*$15500 g$s2*$15501) (if (if (not (null? g$m1*$15482)) (if (not (null? g$m2*$15500)) (begin '#f (g$anti-mark?$14642 (car g$m2*$15500))) '#f) '#f) (values (g$cancel$15488 g$m1*$15482 g$m2*$15500) (g$cancel$15488 g$s1*$15483 g$s2*$15501)) (values (append g$m1*$15482 g$m2*$15500) (append g$s1*$15483 g$s2*$15501))))) (g$stx-mark*$14626 g$e$15484) (g$stx-subst*$14628 g$e$15484))))) '#f)))) (set! g$mkstx$14646 (case-lambda ((g$e$15504 g$m*$15505 g$s*$15506) (if (g$stx?$14622 g$e$15504) (call-with-values (case-lambda (() (g$join-wraps$14644 g$m*$15505 g$s*$15506 g$e$15504))) (case-lambda ((g$m*$15510 g$s*$15511) (g$make-stx$14620 (g$stx-expr$14624 g$e$15504) g$m*$15510 g$s*$15511)))) (g$make-stx$14620 g$e$15504 g$m*$15505 g$s*$15506))))) (set! g$add-mark$14648 (case-lambda ((g$m$15514 g$e$15515) (g$mkstx$14646 g$e$15515 (list g$m$15514) '(shift))))) (set! g$add-subst$14650 (case-lambda ((g$subst$15518 g$e$15519) (g$mkstx$14646 g$e$15519 '() (list g$subst$15518))))) (set! g$syntax-kind?$14652 (case-lambda ((g$x$15522 g$p?$15523) (if (g$stx?$14622 g$x$15522) (g$syntax-kind?$14652 (g$stx-expr$14624 g$x$15522) g$p?$15523) (g$p?$15523 g$x$15522))))) (set! g$syntax-vector->list$14654 (case-lambda ((g$x$15526) (if (g$stx?$14622 g$x$15526) ((case-lambda ((g$ls$15528 g$m*$15529 g$s*$15530) (map (case-lambda ((g$x$15534) (g$mkstx$14646 g$x$15534 g$m*$15529 g$s*$15530))) g$ls$15528))) (g$syntax-vector->list$14654 (g$stx-expr$14624 g$x$15526)) (g$stx-mark*$14626 g$x$15526) (g$stx-subst*$14628 g$x$15526)) (if (vector? g$x$15526) (vector->list g$x$15526) (error 'syntax-vector->list '"not a syntax vector" g$x$15526)))))) (set! g$syntax-pair?$14656 (case-lambda ((g$x$15536) (g$syntax-kind?$14652 g$x$15536 pair?)))) (set! g$syntax-vector?$14658 (case-lambda ((g$x$15538) (g$syntax-kind?$14652 g$x$15538 vector?)))) (set! g$syntax-null?$14660 (case-lambda ((g$x$15540) (g$syntax-kind?$14652 g$x$15540 null?)))) (set! g$syntax-list?$14662 (case-lambda ((g$x$15542) ((case-lambda ((g$t$15544) (if g$t$15544 g$t$15544 (begin '#f (if (g$syntax-pair?$14656 g$x$15542) (begin '#f (g$syntax-list?$14662 (g$syntax-cdr$14668 g$x$15542))) '#f))))) (g$syntax-null?$14660 g$x$15542))))) (set! g$syntax-car$14664 (case-lambda ((g$x$15546) (if (g$stx?$14622 g$x$15546) (g$mkstx$14646 (g$syntax-car$14664 (g$stx-expr$14624 g$x$15546)) (g$stx-mark*$14626 g$x$15546) (g$stx-subst*$14628 g$x$15546)) (if (pair? g$x$15546) (car g$x$15546) (error 'syntax-car '"not a pair" g$x$15546)))))) (set! g$syntax->list$14666 (case-lambda ((g$x$15548) (if (g$syntax-pair?$14656 g$x$15548) (cons (g$syntax-car$14664 g$x$15548) (g$syntax->list$14666 (g$syntax-cdr$14668 g$x$15548))) (if (g$syntax-null?$14660 g$x$15548) '() (error 'syntax->list '"invalid argument" g$x$15548)))))) (set! g$syntax-cdr$14668 (case-lambda ((g$x$15550) (if (g$stx?$14622 g$x$15550) (g$mkstx$14646 (g$syntax-cdr$14668 (g$stx-expr$14624 g$x$15550)) (g$stx-mark*$14626 g$x$15550) (g$stx-subst*$14628 g$x$15550)) (if (pair? g$x$15550) (cdr g$x$15550) (error 'syntax-cdr '"not a pair" g$x$15550)))))) (set! g$id?$14670 (case-lambda ((g$x$15552) (g$syntax-kind?$14652 g$x$15552 symbol?)))) (set! g$id->sym$14672 (case-lambda ((g$x$15554) (if (g$stx?$14622 g$x$15554) (g$id->sym$14672 (g$stx-expr$14624 g$x$15554)) (if (symbol? g$x$15554) g$x$15554 (error 'id->sym '"not an id" g$x$15554)))))) (set! g$same-marks?$14674 (case-lambda ((g$x$15556 g$y$15557) ((case-lambda ((g$t$15560) (if g$t$15560 g$t$15560 (begin '#f (if (pair? g$x$15556) (if (pair? g$y$15557) (if (eq? (car g$x$15556) (car g$y$15557)) (begin '#f (g$same-marks?$14674 (cdr g$x$15556) (cdr g$y$15557))) '#f) '#f) '#f))))) (if (null? g$x$15556) (begin '#f (null? g$y$15557)) '#f))))) (set! g$bound-id=?$14676 (case-lambda ((g$x$15562 g$y$15563) (if (eq? (g$id->sym$14672 g$x$15562) (g$id->sym$14672 g$y$15563)) (begin '#f (g$same-marks?$14674 (g$stx-mark*$14626 g$x$15562) (g$stx-mark*$14626 g$y$15563))) '#f)))) (set! g$free-id=?$14678 (case-lambda ((g$i$15566 g$j$15567) ((case-lambda ((g$t0$15570 g$t1$15571) (if ((case-lambda ((g$t$15574) (if g$t$15574 g$t$15574 (begin '#f g$t1$15571)))) g$t0$15570) (eq? g$t0$15570 g$t1$15571) (eq? (g$id->sym$14672 g$i$15566) (g$id->sym$14672 g$j$15567))))) (g$id->label$14692 g$i$15566) (g$id->label$14692 g$j$15567))))) (set! g$valid-bound-ids?$14680 (case-lambda ((g$id*$15576) (if (for-all g$id?$14670 g$id*$15576) (begin '#f (g$distinct-bound-ids?$14682 g$id*$15576)) '#f)))) (set! g$distinct-bound-ids?$14682 (case-lambda ((g$id*$15578) ((case-lambda ((g$t$15580) (if g$t$15580 g$t$15580 (begin '#f (if (not (g$bound-id-member?$14684 (car g$id*$15578) (cdr g$id*$15578))) (begin '#f (g$distinct-bound-ids?$14682 (cdr g$id*$15578))) '#f))))) (null? g$id*$15578))))) (set! g$bound-id-member?$14684 (case-lambda ((g$id$15582 g$id*$15583) (if (pair? g$id*$15583) (begin '#f ((case-lambda ((g$t$15586) (if g$t$15586 g$t$15586 (begin '#f (g$bound-id-member?$14684 g$id$15582 (cdr g$id*$15583)))))) (g$bound-id=?$14676 g$id$15582 (car g$id*$15583)))) '#f)))) (set! g$self-evaluating?$14686 (case-lambda ((g$x$15588) ((case-lambda ((g$t$15590) (if g$t$15590 g$t$15590 ((case-lambda ((g$t$15592) (if g$t$15592 g$t$15592 ((case-lambda ((g$t$15594) (if g$t$15594 g$t$15594 (begin '#f (boolean? g$x$15588))))) (char? g$x$15588))))) (string? g$x$15588))))) (number? g$x$15588))))) (set! g$strip$14688 (case-lambda ((g$x$15596 g$m*$15597) (if (g$top-marked?$14578 g$m*$15597) g$x$15596 (letrec ((g$f$15600 (case-lambda ((g$x$15602) (if (g$stx?$14622 g$x$15602) (g$strip$14688 (g$stx-expr$14624 g$x$15602) (g$stx-mark*$14626 g$x$15602)) (if (pair? g$x$15602) ((case-lambda ((g$a$15604 g$d$15605) (if (if (eq? g$a$15604 (car g$x$15602)) (begin '#f (eq? g$d$15605 (cdr g$x$15602))) '#f) g$x$15602 (cons g$a$15604 g$d$15605)))) (g$f$15600 (car g$x$15602)) (g$f$15600 (cdr g$x$15602))) (if (vector? g$x$15602) ((case-lambda ((g$old$15608) ((case-lambda ((g$new$15610) (if (for-all eq? g$old$15608 g$new$15610) g$x$15602 (list->vector g$new$15610)))) (map g$f$15600 g$old$15608)))) (vector->list g$x$15602)) g$x$15602))))))) (g$f$15600 g$x$15596)))))) (set! g$stx->datum$14690 (case-lambda ((g$x$15612) (g$strip$14688 g$x$15612 '())))) (set! g$id->label$14692 (case-lambda ((g$id$15614) ((case-lambda ((g$sym$15616) (letrec ((g$search$15618 (case-lambda ((g$subst*$15620 g$mark*$15621) (if (null? g$subst*$15620) (g$interaction-sym->label$15334 g$sym$15616) (if (eq? (car g$subst*$15620) 'shift) (g$search$15618 (cdr g$subst*$15620) (cdr g$mark*$15621)) ((case-lambda ((g$rib$15624) (if (g$rib-sealed/freq$14597 g$rib$15624) ((case-lambda ((g$sym*$15626) (letrec ((g$f$15628 (case-lambda ((g$i$15630 g$j$15631) (if (= g$i$15630 g$j$15631) (g$search$15618 (cdr g$subst*$15620) g$mark*$15621) (if (if (eq? (vector-ref g$sym*$15626 g$i$15630) g$sym$15616) (begin '#f (g$same-marks?$14674 g$mark*$15621 (vector-ref (g$rib-mark**$14593 g$rib$15624) g$i$15630))) '#f) ((case-lambda ((g$label$15634) (begin (g$increment-rib-frequency!$14615 g$rib$15624 g$i$15630) g$label$15634))) (vector-ref (g$rib-label*$14595 g$rib$15624) g$i$15630)) (g$f$15628 (+ g$i$15630 '1) g$j$15631))))))) (g$f$15628 '0 (vector-length g$sym*$15626))))) (g$rib-sym*$14591 g$rib$15624)) (letrec ((g$f$15636 (case-lambda ((g$sym*$15638 g$mark**$15639 g$label*$15640) (if (null? g$sym*$15638) (g$search$15618 (cdr g$subst*$15620) g$mark*$15621) (if (if (eq? (car g$sym*$15638) g$sym$15616) (begin '#f (g$same-marks?$14674 (car g$mark**$15639) g$mark*$15621)) '#f) (car g$label*$15640) (g$f$15636 (cdr g$sym*$15638) (cdr g$mark**$15639) (cdr g$label*$15640)))))))) (g$f$15636 (g$rib-sym*$14591 g$rib$15624) (g$rib-mark**$14593 g$rib$15624) (g$rib-label*$14595 g$rib$15624)))))) (car g$subst*$15620)))))))) (g$search$15618 (g$stx-subst*$14628 g$id$15614) (g$stx-mark*$14626 g$id$15614))))) (g$id->sym$14672 g$id$15614))))) (set! g$label->binding$14694 (case-lambda ((g$x$15644 g$r$15645) ((case-lambda ((g$t$15648) (if g$t$15648 ((case-lambda ((g$b$15650) (if (if (pair? g$b$15650) (begin '#f (eq? (car g$b$15650) '$core-rtd)) '#f) (cons '$rtd (map g$bless$15133 (cdr g$b$15650))) g$b$15650))) g$t$15648) ((case-lambda ((g$t$15652) (if g$t$15652 (cdr g$t$15652) '(displaced-lexical . #f)))) (assq g$x$15644 g$r$15645))))) (g$g$imported-label->binding$13969$14259 g$x$15644))))) (set! g$make-binding$14696 cons) (set! g$binding-type$14698 car) (set! g$binding-value$14700 cdr) (set! g$syntax-type$14702 (case-lambda ((g$e$15654 g$r$15655) (if (g$id?$14670 g$e$15654) ((case-lambda ((g$id$15658) ((case-lambda ((g$label$15660) ((case-lambda ((g$b$15662) ((case-lambda ((g$type$15664) ((case-lambda (() (begin (if g$label$15660 (void) (error 'expander '"unbound identifier" (g$strip$14688 g$e$15654 '()))) ((case-lambda ((g$t$15666) (if (memv g$t$15666 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd)) (values g$type$15664 (g$binding-value$14700 g$b$15662) g$id$15658) (values 'other '#f '#f)))) g$type$15664))))))) (g$binding-type$14698 g$b$15662)))) (g$label->binding$14694 g$label$15660 g$r$15655)))) (g$id->label$14692 g$id$15658)))) g$e$15654) (if (g$syntax-pair?$14656 g$e$15654) ((case-lambda ((g$id$15667) (if (g$id?$14670 g$id$15667) ((case-lambda ((g$label$15669) ((case-lambda ((g$b$15671) ((case-lambda ((g$type$15673) ((case-lambda (() (begin (if g$label$15669 (void) (error 'expander '"unbound identifier" (g$strip$14688 g$e$15654 '()))) ((case-lambda ((g$t$15675) (if (memv g$t$15675 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import $core-rtd)) (values g$type$15673 (g$binding-value$14700 g$b$15671) g$id$15667) (values 'call '#f '#f)))) g$type$15673))))))) (g$binding-type$14698 g$b$15671)))) (g$label->binding$14694 g$label$15669 g$r$15655)))) (g$id->label$14692 g$id$15667)) (values 'call '#f '#f)))) (g$syntax-car$14664 g$e$15654)) ((case-lambda ((g$d$15676) (if (g$self-evaluating?$14686 g$d$15676) (values 'constant g$d$15676 '#f) (values 'other '#f '#f)))) (g$stx->datum$14690 g$e$15654))))))) (set! g$sanitize-binding$14729 (case-lambda ((g$x$15678 g$src$15679) (if (procedure? g$x$15678) (cons* 'local-macro g$x$15678 g$src$15679) (if (if (pair? g$x$15678) (if (eq? (car g$x$15678) 'macro!) (begin '#f (procedure? (cdr g$x$15678))) '#f) '#f) (cons* 'local-macro! (cdr g$x$15678) g$src$15679) (if (if (pair? g$x$15678) (begin '#f (eq? (car g$x$15678) '$rtd)) '#f) g$x$15678 (error 'expand '"invalid transformer" g$x$15678))))))) (set! g$make-variable-transformer$14731 (case-lambda ((g$x$15682) (if (procedure? g$x$15682) (cons 'macro! g$x$15682) (error 'make-variable-transformer '"not a procedure" g$x$15682))))) (set! g$make-eval-transformer$14733 (case-lambda ((g$x$15684) (g$sanitize-binding$14729 (eval-core (g$g$expanded->core$13750$13814 g$x$15684)) g$x$15684)))) (set! g$parse-define$15095 (case-lambda ((g$x$15686) ((case-lambda ((g$t$15688) ((case-lambda ((g$ls/false$15690) (if (if g$ls/false$15690 (begin '#f (apply (case-lambda ((g$id$15692 g$fmls$15693 g$b$15694 g$b*$15695) (g$id?$14670 g$id$15692))) g$ls/false$15690)) '#f) (apply (case-lambda ((g$id$15700 g$fmls$15701 g$b$15702 g$b*$15703) (values g$id$15700 (cons 'defun (cons g$fmls$15701 (cons g$b$15702 g$b*$15703)))))) g$ls/false$15690) ((case-lambda ((g$t$15708) ((case-lambda ((g$ls/false$15710) (if (if g$ls/false$15710 (begin '#f (apply (case-lambda ((g$id$15712 g$val$15713) (g$id?$14670 g$id$15712))) g$ls/false$15710)) '#f) (apply (case-lambda ((g$id$15716 g$val$15717) (values g$id$15716 (cons 'expr g$val$15717)))) g$ls/false$15710) (error 'expander '"invalid syntax" (g$strip$14688 g$t$15708 '()))))) ((case-lambda ((g$x$15720) (if (g$syntax-pair?$14656 g$x$15720) (begin '#f ((case-lambda ((g$q$15722) (if g$q$15722 (begin '#f ((case-lambda ((g$r$15724) (if g$r$15724 (begin '#f (append g$q$15722 g$r$15724)) '#f))) ((case-lambda ((g$x$15726) (if (g$syntax-pair?$14656 g$x$15726) (begin '#f ((case-lambda ((g$q$15728) (if g$q$15728 (begin '#f ((case-lambda ((g$r$15730) (if g$r$15730 (begin '#f (append g$q$15728 g$r$15730)) '#f))) ((case-lambda ((g$x$15732) (if (g$syntax-pair?$14656 g$x$15732) (begin '#f ((case-lambda ((g$q$15734) (if g$q$15734 (begin '#f ((case-lambda ((g$r$15736) (if g$r$15736 (begin '#f (append g$q$15734 g$r$15736)) '#f))) ((case-lambda ((g$x$15738) (if (equal? (g$stx->datum$14690 g$x$15738) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$15732)))) '#f))) ((case-lambda ((g$x$15740) (list g$x$15740))) (g$syntax-car$14664 g$x$15732)))) '#f))) (g$syntax-cdr$14668 g$x$15726)))) '#f))) ((case-lambda ((g$x$15742) (list g$x$15742))) (g$syntax-car$14664 g$x$15726)))) '#f))) (g$syntax-cdr$14668 g$x$15720)))) '#f))) ((case-lambda ((g$x$15744) '())) (g$syntax-car$14664 g$x$15720)))) '#f))) g$t$15708)))) g$t$15688)))) ((case-lambda ((g$x$15746) (if (g$syntax-pair?$14656 g$x$15746) (begin '#f ((case-lambda ((g$q$15748) (if g$q$15748 (begin '#f ((case-lambda ((g$r$15750) (if g$r$15750 (begin '#f (append g$q$15748 g$r$15750)) '#f))) ((case-lambda ((g$x$15752) (if (g$syntax-pair?$14656 g$x$15752) (begin '#f ((case-lambda ((g$q$15754) (if g$q$15754 (begin '#f ((case-lambda ((g$r$15756) (if g$r$15756 (begin '#f (append g$q$15754 g$r$15756)) '#f))) ((case-lambda ((g$x$15758) (if (g$syntax-pair?$14656 g$x$15758) (begin '#f ((case-lambda ((g$q$15760) (if g$q$15760 (begin '#f ((case-lambda ((g$r$15762) (if g$r$15762 (begin '#f (append g$q$15760 g$r$15762)) '#f))) ((letrec ((g$f$15764 (case-lambda ((g$x$15766) (if (g$syntax-pair?$14656 g$x$15766) ((case-lambda ((g$cars/f$15768) (if g$cars/f$15768 (begin '#f ((case-lambda ((g$cdrs/f$15770) (if g$cdrs/f$15770 (begin '#f (map cons g$cars/f$15768 g$cdrs/f$15770)) '#f))) (g$f$15764 (g$syntax-cdr$14668 g$x$15766)))) '#f))) ((case-lambda ((g$x$15772) (list g$x$15772))) (g$syntax-car$14664 g$x$15766))) (if (g$syntax-null?$14660 g$x$15766) (list (begin 'b* '())) '#f)))))) g$f$15764) (g$syntax-cdr$14668 g$x$15758)))) '#f))) ((case-lambda ((g$x$15774) (list g$x$15774))) (g$syntax-car$14664 g$x$15758)))) '#f))) (g$syntax-cdr$14668 g$x$15752)))) '#f))) ((case-lambda ((g$x$15776) (if (g$syntax-pair?$14656 g$x$15776) (begin '#f ((case-lambda ((g$q$15778) (if g$q$15778 (begin '#f ((case-lambda ((g$r$15780) (if g$r$15780 (begin '#f (append g$q$15778 g$r$15780)) '#f))) ((case-lambda ((g$x$15782) (list g$x$15782))) (g$syntax-cdr$14668 g$x$15776)))) '#f))) ((case-lambda ((g$x$15784) (list g$x$15784))) (g$syntax-car$14664 g$x$15776)))) '#f))) (g$syntax-car$14664 g$x$15752)))) '#f))) (g$syntax-cdr$14668 g$x$15746)))) '#f))) ((case-lambda ((g$x$15786) '())) (g$syntax-car$14664 g$x$15746)))) '#f))) g$t$15688)))) g$x$15686)))) (set! g$parse-define-syntax$15097 (case-lambda ((g$x$15788) ((case-lambda ((g$t$15790) ((case-lambda ((g$ls/false$15792) (if (if g$ls/false$15792 (begin '#f (apply (case-lambda ((g$id$15794 g$val$15795) (g$id?$14670 g$id$15794))) g$ls/false$15792)) '#f) (apply (case-lambda ((g$id$15798 g$val$15799) (values g$id$15798 g$val$15799))) g$ls/false$15792) (error 'expander '"invalid syntax" (g$strip$14688 g$t$15790 '()))))) ((case-lambda ((g$x$15802) (if (g$syntax-pair?$14656 g$x$15802) (begin '#f ((case-lambda ((g$q$15804) (if g$q$15804 (begin '#f ((case-lambda ((g$r$15806) (if g$r$15806 (begin '#f (append g$q$15804 g$r$15806)) '#f))) ((case-lambda ((g$x$15808) (if (g$syntax-pair?$14656 g$x$15808) (begin '#f ((case-lambda ((g$q$15810) (if g$q$15810 (begin '#f ((case-lambda ((g$r$15812) (if g$r$15812 (begin '#f (append g$q$15810 g$r$15812)) '#f))) ((case-lambda ((g$x$15814) (if (g$syntax-pair?$14656 g$x$15814) (begin '#f ((case-lambda ((g$q$15816) (if g$q$15816 (begin '#f ((case-lambda ((g$r$15818) (if g$r$15818 (begin '#f (append g$q$15816 g$r$15818)) '#f))) ((case-lambda ((g$x$15820) (if (equal? (g$stx->datum$14690 g$x$15820) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$15814)))) '#f))) ((case-lambda ((g$x$15822) (list g$x$15822))) (g$syntax-car$14664 g$x$15814)))) '#f))) (g$syntax-cdr$14668 g$x$15808)))) '#f))) ((case-lambda ((g$x$15824) (list g$x$15824))) (g$syntax-car$14664 g$x$15808)))) '#f))) (g$syntax-cdr$14668 g$x$15802)))) '#f))) ((case-lambda ((g$x$15826) '())) (g$syntax-car$14664 g$x$15802)))) '#f))) g$t$15790)))) g$x$15788)))) (set! g$scheme-stx$15099 (case-lambda ((g$sym$15828) ((case-lambda ((g$subst$15830) ((case-lambda ((g$t$15832) (if g$t$15832 ((case-lambda ((g$x$15834) ((case-lambda ((g$name$15836 g$label$15837) (g$add-subst$14650 (g$make-rib$14587 (list g$name$15836) (list g$top-mark*$14576) (list g$label$15837) '#f) (g$mkstx$14646 g$sym$15828 g$top-mark*$14576 '())))) (car g$x$15834) (cdr g$x$15834)))) g$t$15832) (g$mkstx$14646 g$sym$15828 g$top-mark*$14576 '())))) (assq g$sym$15828 g$subst$15830)))) (g$g$library-subst$13903$14292 (g$g$find-library-by-name$13953$14267 '(psyntax system $all))))))) (set! g$add-lexical$15101 (case-lambda ((g$lab$15840 g$lex$15841 g$r$15842) (cons (cons* g$lab$15840 'lexical g$lex$15841) g$r$15842)))) (set! g$add-lexicals$15103 (case-lambda ((g$lab*$15846 g$lex*$15847 g$r$15848) (if (null? g$lab*$15846) g$r$15848 (g$add-lexicals$15103 (cdr g$lab*$15846) (cdr g$lex*$15847) (g$add-lexical$15101 (car g$lab*$15846) (car g$lex*$15847) g$r$15848)))))) (set! g$let-values-transformer$15105 (case-lambda ((g$e$15852 g$r$15853 g$mr$15854) ((case-lambda ((g$t$15858) ((case-lambda ((g$ls/false$15860) (if (if g$ls/false$15860 (begin '#f (apply (case-lambda ((g$fml**$15862 g$rhs*$15863 g$b$15864 g$b*$15865) '#t)) g$ls/false$15860)) '#f) (apply (case-lambda ((g$fml**$15870 g$rhs*$15871 g$b$15872 g$b*$15873) ((case-lambda ((g$rhs*$15878) ((case-lambda ((g$lex**$15880 g$lab**$15881) ((case-lambda ((g$fml*$15884 g$lab*$15885 g$lex*$15886) (letrec ((g$f$15890 (case-lambda ((g$lex**$15892 g$rhs*$15893) (if (null? g$lex**$15892) (g$chi-internal$15233 (g$add-subst$14650 (g$make-full-rib$14617 g$fml*$15884 g$lab*$15885) (cons g$b$15872 g$b*$15873)) (g$add-lexicals$15103 g$lab*$15885 g$lex*$15886 g$r$15853) g$mr$15854) (list '(primitive call-with-values) (g$g$build-lambda$14422$14559 '#f '() (car g$rhs*$15893)) (g$g$build-lambda$14422$14559 '#f (car g$lex**$15892) (g$f$15890 (cdr g$lex**$15892) (cdr g$rhs*$15893))))))))) (g$f$15890 g$lex**$15880 g$rhs*$15878)))) (apply append g$fml**$15870) (apply append g$lab**$15881) (apply append g$lex**$15880)))) (map (case-lambda ((g$ls$15896) (map g$gen-lexical$14580 g$ls$15896))) g$fml**$15870) (map (case-lambda ((g$ls$15898) (map g$gen-label$14584 g$ls$15898))) g$fml**$15870)))) (g$chi-expr*$15213 g$rhs*$15871 g$r$15853 g$mr$15854)))) g$ls/false$15860) (error 'expander '"invalid syntax" (g$strip$14688 g$t$15858 '()))))) ((case-lambda ((g$x$15900) (if (g$syntax-pair?$14656 g$x$15900) (begin '#f ((case-lambda ((g$q$15902) (if g$q$15902 (begin '#f ((case-lambda ((g$r$15904) (if g$r$15904 (begin '#f (append g$q$15902 g$r$15904)) '#f))) ((case-lambda ((g$x$15906) (if (g$syntax-pair?$14656 g$x$15906) (begin '#f ((case-lambda ((g$q$15908) (if g$q$15908 (begin '#f ((case-lambda ((g$r$15910) (if g$r$15910 (begin '#f (append g$q$15908 g$r$15910)) '#f))) ((case-lambda ((g$x$15912) (if (g$syntax-pair?$14656 g$x$15912) (begin '#f ((case-lambda ((g$q$15914) (if g$q$15914 (begin '#f ((case-lambda ((g$r$15916) (if g$r$15916 (begin '#f (append g$q$15914 g$r$15916)) '#f))) ((letrec ((g$f$15918 (case-lambda ((g$x$15920) (if (g$syntax-pair?$14656 g$x$15920) ((case-lambda ((g$cars/f$15922) (if g$cars/f$15922 (begin '#f ((case-lambda ((g$cdrs/f$15924) (if g$cdrs/f$15924 (begin '#f (map cons g$cars/f$15922 g$cdrs/f$15924)) '#f))) (g$f$15918 (g$syntax-cdr$14668 g$x$15920)))) '#f))) ((case-lambda ((g$x$15926) (list g$x$15926))) (g$syntax-car$14664 g$x$15920))) (if (g$syntax-null?$14660 g$x$15920) (list (begin 'b* '())) '#f)))))) g$f$15918) (g$syntax-cdr$14668 g$x$15912)))) '#f))) ((case-lambda ((g$x$15928) (list g$x$15928))) (g$syntax-car$14664 g$x$15912)))) '#f))) (g$syntax-cdr$14668 g$x$15906)))) '#f))) ((letrec ((g$f$15930 (case-lambda ((g$x$15932) (if (g$syntax-pair?$14656 g$x$15932) ((case-lambda ((g$cars/f$15934) (if g$cars/f$15934 (begin '#f ((case-lambda ((g$cdrs/f$15936) (if g$cdrs/f$15936 (begin '#f (map cons g$cars/f$15934 g$cdrs/f$15936)) '#f))) (g$f$15930 (g$syntax-cdr$14668 g$x$15932)))) '#f))) ((case-lambda ((g$x$15938) (if (g$syntax-pair?$14656 g$x$15938) (begin '#f ((case-lambda ((g$q$15940) (if g$q$15940 (begin '#f ((case-lambda ((g$r$15942) (if g$r$15942 (begin '#f (append g$q$15940 g$r$15942)) '#f))) ((case-lambda ((g$x$15944) (if (g$syntax-pair?$14656 g$x$15944) (begin '#f ((case-lambda ((g$q$15946) (if g$q$15946 (begin '#f ((case-lambda ((g$r$15948) (if g$r$15948 (begin '#f (append g$q$15946 g$r$15948)) '#f))) ((case-lambda ((g$x$15950) (if (equal? (g$stx->datum$14690 g$x$15950) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$15944)))) '#f))) ((case-lambda ((g$x$15952) (list g$x$15952))) (g$syntax-car$14664 g$x$15944)))) '#f))) (g$syntax-cdr$14668 g$x$15938)))) '#f))) ((letrec ((g$f$15954 (case-lambda ((g$x$15956) (if (g$syntax-pair?$14656 g$x$15956) ((case-lambda ((g$cars/f$15958) (if g$cars/f$15958 (begin '#f ((case-lambda ((g$cdrs/f$15960) (if g$cdrs/f$15960 (begin '#f (map cons g$cars/f$15958 g$cdrs/f$15960)) '#f))) (g$f$15954 (g$syntax-cdr$14668 g$x$15956)))) '#f))) ((case-lambda ((g$x$15962) (list g$x$15962))) (g$syntax-car$14664 g$x$15956))) (if (g$syntax-null?$14660 g$x$15956) (list (begin 'fml** '())) '#f)))))) g$f$15954) (g$syntax-car$14664 g$x$15938)))) '#f))) (g$syntax-car$14664 g$x$15932))) (if (g$syntax-null?$14660 g$x$15932) (list (begin 'fml** '()) (begin 'rhs* '())) '#f)))))) g$f$15930) (g$syntax-car$14664 g$x$15906)))) '#f))) (g$syntax-cdr$14668 g$x$15900)))) '#f))) ((case-lambda ((g$x$15964) '())) (g$syntax-car$14664 g$x$15900)))) '#f))) g$t$15858)))) g$e$15852)))) (set! g$letrec-helper$15107 (case-lambda ((g$e$15966 g$r$15967 g$mr$15968 g$build$15969) ((case-lambda ((g$t$15974) ((case-lambda ((g$ls/false$15976) (if (if g$ls/false$15976 (begin '#f (apply (case-lambda ((g$lhs*$15978 g$rhs*$15979 g$b$15980 g$b*$15981) '#t)) g$ls/false$15976)) '#f) (apply (case-lambda ((g$lhs*$15986 g$rhs*$15987 g$b$15988 g$b*$15989) (if (not (g$valid-bound-ids?$14680 g$lhs*$15986)) (error 'expander '"invalid identifiers" (g$strip$14688 g$e$15966 '())) ((case-lambda ((g$lex*$15994 g$lab*$15995) ((case-lambda ((g$rib$15998 g$r$15999) ((case-lambda ((g$body$16002 g$rhs*$16003) (g$build$15969 '#f g$lex*$15994 g$rhs*$16003 g$body$16002))) (g$chi-internal$15233 (g$add-subst$14650 g$rib$15998 (cons g$b$15988 g$b*$15989)) g$r$15999 g$mr$15968) (g$chi-expr*$15213 (map (case-lambda ((g$x$16006) (g$add-subst$14650 g$rib$15998 g$x$16006))) g$rhs*$15987) g$r$15999 g$mr$15968)))) (g$make-full-rib$14617 g$lhs*$15986 g$lab*$15995) (g$add-lexicals$15103 g$lab*$15995 g$lex*$15994 g$r$15967)))) (map g$gen-lexical$14580 g$lhs*$15986) (map g$gen-label$14584 g$lhs*$15986))))) g$ls/false$15976) (error 'expander '"invalid syntax" (g$strip$14688 g$t$15974 '()))))) ((case-lambda ((g$x$16008) (if (g$syntax-pair?$14656 g$x$16008) (begin '#f ((case-lambda ((g$q$16010) (if g$q$16010 (begin '#f ((case-lambda ((g$r$16012) (if g$r$16012 (begin '#f (append g$q$16010 g$r$16012)) '#f))) ((case-lambda ((g$x$16014) (if (g$syntax-pair?$14656 g$x$16014) (begin '#f ((case-lambda ((g$q$16016) (if g$q$16016 (begin '#f ((case-lambda ((g$r$16018) (if g$r$16018 (begin '#f (append g$q$16016 g$r$16018)) '#f))) ((case-lambda ((g$x$16020) (if (g$syntax-pair?$14656 g$x$16020) (begin '#f ((case-lambda ((g$q$16022) (if g$q$16022 (begin '#f ((case-lambda ((g$r$16024) (if g$r$16024 (begin '#f (append g$q$16022 g$r$16024)) '#f))) ((letrec ((g$f$16026 (case-lambda ((g$x$16028) (if (g$syntax-pair?$14656 g$x$16028) ((case-lambda ((g$cars/f$16030) (if g$cars/f$16030 (begin '#f ((case-lambda ((g$cdrs/f$16032) (if g$cdrs/f$16032 (begin '#f (map cons g$cars/f$16030 g$cdrs/f$16032)) '#f))) (g$f$16026 (g$syntax-cdr$14668 g$x$16028)))) '#f))) ((case-lambda ((g$x$16034) (list g$x$16034))) (g$syntax-car$14664 g$x$16028))) (if (g$syntax-null?$14660 g$x$16028) (list (begin 'b* '())) '#f)))))) g$f$16026) (g$syntax-cdr$14668 g$x$16020)))) '#f))) ((case-lambda ((g$x$16036) (list g$x$16036))) (g$syntax-car$14664 g$x$16020)))) '#f))) (g$syntax-cdr$14668 g$x$16014)))) '#f))) ((letrec ((g$f$16038 (case-lambda ((g$x$16040) (if (g$syntax-pair?$14656 g$x$16040) ((case-lambda ((g$cars/f$16042) (if g$cars/f$16042 (begin '#f ((case-lambda ((g$cdrs/f$16044) (if g$cdrs/f$16044 (begin '#f (map cons g$cars/f$16042 g$cdrs/f$16044)) '#f))) (g$f$16038 (g$syntax-cdr$14668 g$x$16040)))) '#f))) ((case-lambda ((g$x$16046) (if (g$syntax-pair?$14656 g$x$16046) (begin '#f ((case-lambda ((g$q$16048) (if g$q$16048 (begin '#f ((case-lambda ((g$r$16050) (if g$r$16050 (begin '#f (append g$q$16048 g$r$16050)) '#f))) ((case-lambda ((g$x$16052) (if (g$syntax-pair?$14656 g$x$16052) (begin '#f ((case-lambda ((g$q$16054) (if g$q$16054 (begin '#f ((case-lambda ((g$r$16056) (if g$r$16056 (begin '#f (append g$q$16054 g$r$16056)) '#f))) ((case-lambda ((g$x$16058) (if (equal? (g$stx->datum$14690 g$x$16058) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$16052)))) '#f))) ((case-lambda ((g$x$16060) (list g$x$16060))) (g$syntax-car$14664 g$x$16052)))) '#f))) (g$syntax-cdr$14668 g$x$16046)))) '#f))) ((case-lambda ((g$x$16062) (list g$x$16062))) (g$syntax-car$14664 g$x$16046)))) '#f))) (g$syntax-car$14664 g$x$16040))) (if (g$syntax-null?$14660 g$x$16040) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$16038) (g$syntax-car$14664 g$x$16014)))) '#f))) (g$syntax-cdr$14668 g$x$16008)))) '#f))) ((case-lambda ((g$x$16064) '())) (g$syntax-car$14664 g$x$16008)))) '#f))) g$t$15974)))) g$e$15966)))) (set! g$letrec-transformer$15109 (case-lambda ((g$e$16066 g$r$16067 g$mr$16068) (g$letrec-helper$15107 g$e$16066 g$r$16067 g$mr$16068 g$g$build-letrec$14494$14551)))) (set! g$letrec*-transformer$15111 (case-lambda ((g$e$16072 g$r$16073 g$mr$16074) (g$letrec-helper$15107 g$e$16072 g$r$16073 g$mr$16074 g$g$build-letrec*$14496$14550)))) (set! g$type-descriptor-transformer$15113 (case-lambda ((g$e$16078 g$r$16079 g$mr$16080) ((case-lambda ((g$t$16084) ((case-lambda ((g$ls/false$16086) (if (if g$ls/false$16086 (begin '#f (apply (case-lambda ((g$id$16088) (g$id?$14670 g$id$16088))) g$ls/false$16086)) '#f) (apply (case-lambda ((g$id$16090) ((case-lambda ((g$lab$16092) ((case-lambda ((g$b$16094) ((case-lambda ((g$type$16096) ((case-lambda (() (begin (if g$lab$16092 (void) (error 'expander '"unbound identifier" (g$strip$14688 g$e$16078 '()))) (if (if (eq? g$type$16096 '$rtd) (begin '#f (not (list? (g$binding-value$14700 g$b$16094)))) '#f) (void) (error 'expander '"invalid type" (g$strip$14688 g$e$16078 '()))) (list 'quote (g$binding-value$14700 g$b$16094)))))))) (g$binding-type$14698 g$b$16094)))) (g$label->binding$14694 g$lab$16092 g$r$16079)))) (g$id->label$14692 g$id$16090)))) g$ls/false$16086) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16084 '()))))) ((case-lambda ((g$x$16098) (if (g$syntax-pair?$14656 g$x$16098) (begin '#f ((case-lambda ((g$q$16100) (if g$q$16100 (begin '#f ((case-lambda ((g$r$16102) (if g$r$16102 (begin '#f (append g$q$16100 g$r$16102)) '#f))) ((case-lambda ((g$x$16104) (if (g$syntax-pair?$14656 g$x$16104) (begin '#f ((case-lambda ((g$q$16106) (if g$q$16106 (begin '#f ((case-lambda ((g$r$16108) (if g$r$16108 (begin '#f (append g$q$16106 g$r$16108)) '#f))) ((case-lambda ((g$x$16110) (if (equal? (g$stx->datum$14690 g$x$16110) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$16104)))) '#f))) ((case-lambda ((g$x$16112) (list g$x$16112))) (g$syntax-car$14664 g$x$16104)))) '#f))) (g$syntax-cdr$14668 g$x$16098)))) '#f))) ((case-lambda ((g$x$16114) '())) (g$syntax-car$14664 g$x$16098)))) '#f))) g$t$16084)))) g$e$16078)))) (set! g$record-type-descriptor-transformer$15115 (case-lambda ((g$e$16116 g$r$16117 g$mr$16118) ((case-lambda ((g$t$16122) ((case-lambda ((g$ls/false$16124) (if (if g$ls/false$16124 (begin '#f (apply (case-lambda ((g$id$16126) (g$id?$14670 g$id$16126))) g$ls/false$16124)) '#f) (apply (case-lambda ((g$id$16128) ((case-lambda ((g$lab$16130) ((case-lambda ((g$b$16132) ((case-lambda ((g$type$16134) ((case-lambda (() (begin (if g$lab$16130 (void) (error 'expander '"unbound identifier" (g$strip$14688 g$e$16116 '()))) (if (if (eq? g$type$16134 '$rtd) (begin '#f (list? (g$binding-value$14700 g$b$16132))) '#f) (void) (error 'expander '"invalid type" (g$strip$14688 g$e$16116 '()))) (g$chi-expr$15217 (car (g$binding-value$14700 g$b$16132)) g$r$16117 g$mr$16118))))))) (g$binding-type$14698 g$b$16132)))) (g$label->binding$14694 g$lab$16130 g$r$16117)))) (g$id->label$14692 g$id$16128)))) g$ls/false$16124) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16122 '()))))) ((case-lambda ((g$x$16136) (if (g$syntax-pair?$14656 g$x$16136) (begin '#f ((case-lambda ((g$q$16138) (if g$q$16138 (begin '#f ((case-lambda ((g$r$16140) (if g$r$16140 (begin '#f (append g$q$16138 g$r$16140)) '#f))) ((case-lambda ((g$x$16142) (if (g$syntax-pair?$14656 g$x$16142) (begin '#f ((case-lambda ((g$q$16144) (if g$q$16144 (begin '#f ((case-lambda ((g$r$16146) (if g$r$16146 (begin '#f (append g$q$16144 g$r$16146)) '#f))) ((case-lambda ((g$x$16148) (if (equal? (g$stx->datum$14690 g$x$16148) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$16142)))) '#f))) ((case-lambda ((g$x$16150) (list g$x$16150))) (g$syntax-car$14664 g$x$16142)))) '#f))) (g$syntax-cdr$14668 g$x$16136)))) '#f))) ((case-lambda ((g$x$16152) '())) (g$syntax-car$14664 g$x$16136)))) '#f))) g$t$16122)))) g$e$16116)))) (set! g$record-constructor-descriptor-transformer$15117 (case-lambda ((g$e$16154 g$r$16155 g$mr$16156) ((case-lambda ((g$t$16160) ((case-lambda ((g$ls/false$16162) (if (if g$ls/false$16162 (begin '#f (apply (case-lambda ((g$id$16164) (g$id?$14670 g$id$16164))) g$ls/false$16162)) '#f) (apply (case-lambda ((g$id$16166) ((case-lambda ((g$lab$16168) ((case-lambda ((g$b$16170) ((case-lambda ((g$type$16172) ((case-lambda (() (begin (if g$lab$16168 (void) (error 'expander '"unbound identifier" (g$strip$14688 g$e$16154 '()))) (if (if (eq? g$type$16172 '$rtd) (begin '#f (list? (g$binding-value$14700 g$b$16170))) '#f) (void) (error 'expander '"invalid type" (g$strip$14688 g$e$16154 '()))) (g$chi-expr$15217 (cadr (g$binding-value$14700 g$b$16170)) g$r$16155 g$mr$16156))))))) (g$binding-type$14698 g$b$16170)))) (g$label->binding$14694 g$lab$16168 g$r$16155)))) (g$id->label$14692 g$id$16166)))) g$ls/false$16162) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16160 '()))))) ((case-lambda ((g$x$16174) (if (g$syntax-pair?$14656 g$x$16174) (begin '#f ((case-lambda ((g$q$16176) (if g$q$16176 (begin '#f ((case-lambda ((g$r$16178) (if g$r$16178 (begin '#f (append g$q$16176 g$r$16178)) '#f))) ((case-lambda ((g$x$16180) (if (g$syntax-pair?$14656 g$x$16180) (begin '#f ((case-lambda ((g$q$16182) (if g$q$16182 (begin '#f ((case-lambda ((g$r$16184) (if g$r$16184 (begin '#f (append g$q$16182 g$r$16184)) '#f))) ((case-lambda ((g$x$16186) (if (equal? (g$stx->datum$14690 g$x$16186) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$16180)))) '#f))) ((case-lambda ((g$x$16188) (list g$x$16188))) (g$syntax-car$14664 g$x$16180)))) '#f))) (g$syntax-cdr$14668 g$x$16174)))) '#f))) ((case-lambda ((g$x$16190) '())) (g$syntax-car$14664 g$x$16174)))) '#f))) g$t$16160)))) g$e$16154)))) (set! g$when-transformer$15119 (case-lambda ((g$e$16192 g$r$16193 g$mr$16194) ((case-lambda ((g$t$16198) ((case-lambda ((g$ls/false$16200) (if (if g$ls/false$16200 (begin '#f (apply (case-lambda ((g$test$16202 g$e$16203 g$e*$16204) '#t)) g$ls/false$16200)) '#f) (apply (case-lambda ((g$test$16208 g$e$16209 g$e*$16210) (list 'if (g$chi-expr$15217 g$test$16208 g$r$16193 g$mr$16194) (g$g$build-sequence$14490$14553 '#f (g$chi-expr*$15213 (cons g$e$16209 g$e*$16210) g$r$16193 g$mr$16194)) (g$g$build-void$14492$14552)))) g$ls/false$16200) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16198 '()))))) ((case-lambda ((g$x$16214) (if (g$syntax-pair?$14656 g$x$16214) (begin '#f ((case-lambda ((g$q$16216) (if g$q$16216 (begin '#f ((case-lambda ((g$r$16218) (if g$r$16218 (begin '#f (append g$q$16216 g$r$16218)) '#f))) ((case-lambda ((g$x$16220) (if (g$syntax-pair?$14656 g$x$16220) (begin '#f ((case-lambda ((g$q$16222) (if g$q$16222 (begin '#f ((case-lambda ((g$r$16224) (if g$r$16224 (begin '#f (append g$q$16222 g$r$16224)) '#f))) ((case-lambda ((g$x$16226) (if (g$syntax-pair?$14656 g$x$16226) (begin '#f ((case-lambda ((g$q$16228) (if g$q$16228 (begin '#f ((case-lambda ((g$r$16230) (if g$r$16230 (begin '#f (append g$q$16228 g$r$16230)) '#f))) ((letrec ((g$f$16232 (case-lambda ((g$x$16234) (if (g$syntax-pair?$14656 g$x$16234) ((case-lambda ((g$cars/f$16236) (if g$cars/f$16236 (begin '#f ((case-lambda ((g$cdrs/f$16238) (if g$cdrs/f$16238 (begin '#f (map cons g$cars/f$16236 g$cdrs/f$16238)) '#f))) (g$f$16232 (g$syntax-cdr$14668 g$x$16234)))) '#f))) ((case-lambda ((g$x$16240) (list g$x$16240))) (g$syntax-car$14664 g$x$16234))) (if (g$syntax-null?$14660 g$x$16234) (list (begin 'e* '())) '#f)))))) g$f$16232) (g$syntax-cdr$14668 g$x$16226)))) '#f))) ((case-lambda ((g$x$16242) (list g$x$16242))) (g$syntax-car$14664 g$x$16226)))) '#f))) (g$syntax-cdr$14668 g$x$16220)))) '#f))) ((case-lambda ((g$x$16244) (list g$x$16244))) (g$syntax-car$14664 g$x$16220)))) '#f))) (g$syntax-cdr$14668 g$x$16214)))) '#f))) ((case-lambda ((g$x$16246) '())) (g$syntax-car$14664 g$x$16214)))) '#f))) g$t$16198)))) g$e$16192)))) (set! g$unless-transformer$15121 (case-lambda ((g$e$16248 g$r$16249 g$mr$16250) ((case-lambda ((g$t$16254) ((case-lambda ((g$ls/false$16256) (if (if g$ls/false$16256 (begin '#f (apply (case-lambda ((g$test$16258 g$e$16259 g$e*$16260) '#t)) g$ls/false$16256)) '#f) (apply (case-lambda ((g$test$16264 g$e$16265 g$e*$16266) (list 'if (g$chi-expr$15217 g$test$16264 g$r$16249 g$mr$16250) (g$g$build-void$14492$14552) (g$g$build-sequence$14490$14553 '#f (g$chi-expr*$15213 (cons g$e$16265 g$e*$16266) g$r$16249 g$mr$16250))))) g$ls/false$16256) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16254 '()))))) ((case-lambda ((g$x$16270) (if (g$syntax-pair?$14656 g$x$16270) (begin '#f ((case-lambda ((g$q$16272) (if g$q$16272 (begin '#f ((case-lambda ((g$r$16274) (if g$r$16274 (begin '#f (append g$q$16272 g$r$16274)) '#f))) ((case-lambda ((g$x$16276) (if (g$syntax-pair?$14656 g$x$16276) (begin '#f ((case-lambda ((g$q$16278) (if g$q$16278 (begin '#f ((case-lambda ((g$r$16280) (if g$r$16280 (begin '#f (append g$q$16278 g$r$16280)) '#f))) ((case-lambda ((g$x$16282) (if (g$syntax-pair?$14656 g$x$16282) (begin '#f ((case-lambda ((g$q$16284) (if g$q$16284 (begin '#f ((case-lambda ((g$r$16286) (if g$r$16286 (begin '#f (append g$q$16284 g$r$16286)) '#f))) ((letrec ((g$f$16288 (case-lambda ((g$x$16290) (if (g$syntax-pair?$14656 g$x$16290) ((case-lambda ((g$cars/f$16292) (if g$cars/f$16292 (begin '#f ((case-lambda ((g$cdrs/f$16294) (if g$cdrs/f$16294 (begin '#f (map cons g$cars/f$16292 g$cdrs/f$16294)) '#f))) (g$f$16288 (g$syntax-cdr$14668 g$x$16290)))) '#f))) ((case-lambda ((g$x$16296) (list g$x$16296))) (g$syntax-car$14664 g$x$16290))) (if (g$syntax-null?$14660 g$x$16290) (list (begin 'e* '())) '#f)))))) g$f$16288) (g$syntax-cdr$14668 g$x$16282)))) '#f))) ((case-lambda ((g$x$16298) (list g$x$16298))) (g$syntax-car$14664 g$x$16282)))) '#f))) (g$syntax-cdr$14668 g$x$16276)))) '#f))) ((case-lambda ((g$x$16300) (list g$x$16300))) (g$syntax-car$14664 g$x$16276)))) '#f))) (g$syntax-cdr$14668 g$x$16270)))) '#f))) ((case-lambda ((g$x$16302) '())) (g$syntax-car$14664 g$x$16270)))) '#f))) g$t$16254)))) g$e$16248)))) (set! g$if-transformer$15123 (case-lambda ((g$e$16304 g$r$16305 g$mr$16306) ((case-lambda ((g$t$16310) ((case-lambda ((g$ls/false$16312) (if (if g$ls/false$16312 (begin '#f (apply (case-lambda ((g$e0$16314 g$e1$16315 g$e2$16316) '#t)) g$ls/false$16312)) '#f) (apply (case-lambda ((g$e0$16320 g$e1$16321 g$e2$16322) (list 'if (g$chi-expr$15217 g$e0$16320 g$r$16305 g$mr$16306) (g$chi-expr$15217 g$e1$16321 g$r$16305 g$mr$16306) (g$chi-expr$15217 g$e2$16322 g$r$16305 g$mr$16306)))) g$ls/false$16312) ((case-lambda ((g$t$16326) ((case-lambda ((g$ls/false$16328) (if (if g$ls/false$16328 (begin '#f (apply (case-lambda ((g$e0$16330 g$e1$16331) '#t)) g$ls/false$16328)) '#f) (apply (case-lambda ((g$e0$16334 g$e1$16335) (list 'if (g$chi-expr$15217 g$e0$16334 g$r$16305 g$mr$16306) (g$chi-expr$15217 g$e1$16335 g$r$16305 g$mr$16306) (g$g$build-void$14492$14552)))) g$ls/false$16328) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16326 '()))))) ((case-lambda ((g$x$16338) (if (g$syntax-pair?$14656 g$x$16338) (begin '#f ((case-lambda ((g$q$16340) (if g$q$16340 (begin '#f ((case-lambda ((g$r$16342) (if g$r$16342 (begin '#f (append g$q$16340 g$r$16342)) '#f))) ((case-lambda ((g$x$16344) (if (g$syntax-pair?$14656 g$x$16344) (begin '#f ((case-lambda ((g$q$16346) (if g$q$16346 (begin '#f ((case-lambda ((g$r$16348) (if g$r$16348 (begin '#f (append g$q$16346 g$r$16348)) '#f))) ((case-lambda ((g$x$16350) (if (g$syntax-pair?$14656 g$x$16350) (begin '#f ((case-lambda ((g$q$16352) (if g$q$16352 (begin '#f ((case-lambda ((g$r$16354) (if g$r$16354 (begin '#f (append g$q$16352 g$r$16354)) '#f))) ((case-lambda ((g$x$16356) (if (equal? (g$stx->datum$14690 g$x$16356) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$16350)))) '#f))) ((case-lambda ((g$x$16358) (list g$x$16358))) (g$syntax-car$14664 g$x$16350)))) '#f))) (g$syntax-cdr$14668 g$x$16344)))) '#f))) ((case-lambda ((g$x$16360) (list g$x$16360))) (g$syntax-car$14664 g$x$16344)))) '#f))) (g$syntax-cdr$14668 g$x$16338)))) '#f))) ((case-lambda ((g$x$16362) '())) (g$syntax-car$14664 g$x$16338)))) '#f))) g$t$16326)))) g$t$16310)))) ((case-lambda ((g$x$16364) (if (g$syntax-pair?$14656 g$x$16364) (begin '#f ((case-lambda ((g$q$16366) (if g$q$16366 (begin '#f ((case-lambda ((g$r$16368) (if g$r$16368 (begin '#f (append g$q$16366 g$r$16368)) '#f))) ((case-lambda ((g$x$16370) (if (g$syntax-pair?$14656 g$x$16370) (begin '#f ((case-lambda ((g$q$16372) (if g$q$16372 (begin '#f ((case-lambda ((g$r$16374) (if g$r$16374 (begin '#f (append g$q$16372 g$r$16374)) '#f))) ((case-lambda ((g$x$16376) (if (g$syntax-pair?$14656 g$x$16376) (begin '#f ((case-lambda ((g$q$16378) (if g$q$16378 (begin '#f ((case-lambda ((g$r$16380) (if g$r$16380 (begin '#f (append g$q$16378 g$r$16380)) '#f))) ((case-lambda ((g$x$16382) (if (g$syntax-pair?$14656 g$x$16382) (begin '#f ((case-lambda ((g$q$16384) (if g$q$16384 (begin '#f ((case-lambda ((g$r$16386) (if g$r$16386 (begin '#f (append g$q$16384 g$r$16386)) '#f))) ((case-lambda ((g$x$16388) (if (equal? (g$stx->datum$14690 g$x$16388) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$16382)))) '#f))) ((case-lambda ((g$x$16390) (list g$x$16390))) (g$syntax-car$14664 g$x$16382)))) '#f))) (g$syntax-cdr$14668 g$x$16376)))) '#f))) ((case-lambda ((g$x$16392) (list g$x$16392))) (g$syntax-car$14664 g$x$16376)))) '#f))) (g$syntax-cdr$14668 g$x$16370)))) '#f))) ((case-lambda ((g$x$16394) (list g$x$16394))) (g$syntax-car$14664 g$x$16370)))) '#f))) (g$syntax-cdr$14668 g$x$16364)))) '#f))) ((case-lambda ((g$x$16396) '())) (g$syntax-car$14664 g$x$16364)))) '#f))) g$t$16310)))) g$e$16304)))) (set! g$case-transformer$15125 (case-lambda ((g$e$16398 g$r$16399 g$mr$16400) ((case-lambda ((g$build-one$16404 g$build-last$16406) (begin (set! g$build-one$16404 (case-lambda ((g$t$16514 g$cls$16515 g$rest$16516) ((case-lambda ((g$t$16520) ((case-lambda ((g$ls/false$16522) (if (if g$ls/false$16522 (begin '#f (apply (case-lambda ((g$d*$16524 g$e$16525 g$e*$16526) '#t)) g$ls/false$16522)) '#f) (apply (case-lambda ((g$d*$16530 g$e$16531 g$e*$16532) (list 'if (list '(primitive memv) g$t$16514 (list 'quote (g$stx->datum$14690 g$d*$16530))) (g$g$build-sequence$14490$14553 '#f (g$chi-expr*$15213 (cons g$e$16531 g$e*$16532) g$r$16399 g$mr$16400)) g$rest$16516))) g$ls/false$16522) ((case-lambda ((g$t$16536) ((case-lambda ((g$ls/false$16538) (if (if g$ls/false$16538 (begin '#f (apply (case-lambda ((g$else$16540) '#t)) g$ls/false$16538)) '#f) (apply (case-lambda ((g$else$16542) (error 'expander '"invalid syntax" (g$stx->datum$14690 g$e$16398)))) g$ls/false$16538) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16536 '()))))) ((case-lambda ((g$x$16544) (list g$x$16544))) g$t$16536)))) g$t$16520)))) ((case-lambda ((g$x$16546) (if (g$syntax-pair?$14656 g$x$16546) (begin '#f ((case-lambda ((g$q$16548) (if g$q$16548 (begin '#f ((case-lambda ((g$r$16550) (if g$r$16550 (begin '#f (append g$q$16548 g$r$16550)) '#f))) ((case-lambda ((g$x$16552) (if (g$syntax-pair?$14656 g$x$16552) (begin '#f ((case-lambda ((g$q$16554) (if g$q$16554 (begin '#f ((case-lambda ((g$r$16556) (if g$r$16556 (begin '#f (append g$q$16554 g$r$16556)) '#f))) ((letrec ((g$f$16558 (case-lambda ((g$x$16560) (if (g$syntax-pair?$14656 g$x$16560) ((case-lambda ((g$cars/f$16562) (if g$cars/f$16562 (begin '#f ((case-lambda ((g$cdrs/f$16564) (if g$cdrs/f$16564 (begin '#f (map cons g$cars/f$16562 g$cdrs/f$16564)) '#f))) (g$f$16558 (g$syntax-cdr$14668 g$x$16560)))) '#f))) ((case-lambda ((g$x$16566) (list g$x$16566))) (g$syntax-car$14664 g$x$16560))) (if (g$syntax-null?$14660 g$x$16560) (list (begin 'e* '())) '#f)))))) g$f$16558) (g$syntax-cdr$14668 g$x$16552)))) '#f))) ((case-lambda ((g$x$16568) (list g$x$16568))) (g$syntax-car$14664 g$x$16552)))) '#f))) (g$syntax-cdr$14668 g$x$16546)))) '#f))) ((letrec ((g$f$16570 (case-lambda ((g$x$16572) (if (g$syntax-pair?$14656 g$x$16572) ((case-lambda ((g$cars/f$16574) (if g$cars/f$16574 (begin '#f ((case-lambda ((g$cdrs/f$16576) (if g$cdrs/f$16576 (begin '#f (map cons g$cars/f$16574 g$cdrs/f$16576)) '#f))) (g$f$16570 (g$syntax-cdr$14668 g$x$16572)))) '#f))) ((case-lambda ((g$x$16578) (list g$x$16578))) (g$syntax-car$14664 g$x$16572))) (if (g$syntax-null?$14660 g$x$16572) (list (begin 'd* '())) '#f)))))) g$f$16570) (g$syntax-car$14664 g$x$16546)))) '#f))) g$t$16520)))) g$cls$16515)))) (set! g$build-last$16406 (case-lambda ((g$t$16408 g$cls$16409) ((case-lambda ((g$t$16412) ((case-lambda ((g$ls/false$16414) (if (if g$ls/false$16414 (begin '#f (apply (case-lambda ((g$d*$16416 g$e$16417 g$e*$16418) '#t)) g$ls/false$16414)) '#f) (apply (case-lambda ((g$d*$16422 g$e$16423 g$e*$16424) (g$build-one$16404 g$t$16408 g$cls$16409 (g$g$build-void$14492$14552)))) g$ls/false$16414) ((case-lambda ((g$t$16428) ((case-lambda ((g$ls/false$16430) (if (if g$ls/false$16430 (begin '#f (apply (case-lambda ((g$else-kwd$16432 g$x$16433 g$x*$16434) '#t)) g$ls/false$16430)) '#f) (apply (case-lambda ((g$else-kwd$16438 g$x$16439 g$x*$16440) (if (if (g$id?$14670 g$else-kwd$16438) (begin '#f (g$free-id=?$14678 g$else-kwd$16438 (g$scheme-stx$15099 'else))) '#f) (g$g$build-sequence$14490$14553 '#f (g$chi-expr*$15213 (cons g$x$16439 g$x*$16440) g$r$16399 g$mr$16400)) (error 'expander '"invalid syntax" (g$stx->datum$14690 g$e$16398))))) g$ls/false$16430) ((case-lambda ((g$t$16444) ((case-lambda ((g$ls/false$16446) (if (if g$ls/false$16446 (begin '#f (apply (case-lambda ((g$else$16448) '#t)) g$ls/false$16446)) '#f) (apply (case-lambda ((g$else$16450) (error 'expander '"invalid syntax" (g$stx->datum$14690 g$e$16398)))) g$ls/false$16446) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16444 '()))))) ((case-lambda ((g$x$16452) (list g$x$16452))) g$t$16444)))) g$t$16428)))) ((case-lambda ((g$x$16454) (if (g$syntax-pair?$14656 g$x$16454) (begin '#f ((case-lambda ((g$q$16456) (if g$q$16456 (begin '#f ((case-lambda ((g$r$16458) (if g$r$16458 (begin '#f (append g$q$16456 g$r$16458)) '#f))) ((case-lambda ((g$x$16460) (if (g$syntax-pair?$14656 g$x$16460) (begin '#f ((case-lambda ((g$q$16462) (if g$q$16462 (begin '#f ((case-lambda ((g$r$16464) (if g$r$16464 (begin '#f (append g$q$16462 g$r$16464)) '#f))) ((letrec ((g$f$16466 (case-lambda ((g$x$16468) (if (g$syntax-pair?$14656 g$x$16468) ((case-lambda ((g$cars/f$16470) (if g$cars/f$16470 (begin '#f ((case-lambda ((g$cdrs/f$16472) (if g$cdrs/f$16472 (begin '#f (map cons g$cars/f$16470 g$cdrs/f$16472)) '#f))) (g$f$16466 (g$syntax-cdr$14668 g$x$16468)))) '#f))) ((case-lambda ((g$x$16474) (list g$x$16474))) (g$syntax-car$14664 g$x$16468))) (if (g$syntax-null?$14660 g$x$16468) (list (begin 'x* '())) '#f)))))) g$f$16466) (g$syntax-cdr$14668 g$x$16460)))) '#f))) ((case-lambda ((g$x$16476) (list g$x$16476))) (g$syntax-car$14664 g$x$16460)))) '#f))) (g$syntax-cdr$14668 g$x$16454)))) '#f))) ((case-lambda ((g$x$16478) (list g$x$16478))) (g$syntax-car$14664 g$x$16454)))) '#f))) g$t$16428)))) g$t$16412)))) ((case-lambda ((g$x$16480) (if (g$syntax-pair?$14656 g$x$16480) (begin '#f ((case-lambda ((g$q$16482) (if g$q$16482 (begin '#f ((case-lambda ((g$r$16484) (if g$r$16484 (begin '#f (append g$q$16482 g$r$16484)) '#f))) ((case-lambda ((g$x$16486) (if (g$syntax-pair?$14656 g$x$16486) (begin '#f ((case-lambda ((g$q$16488) (if g$q$16488 (begin '#f ((case-lambda ((g$r$16490) (if g$r$16490 (begin '#f (append g$q$16488 g$r$16490)) '#f))) ((letrec ((g$f$16492 (case-lambda ((g$x$16494) (if (g$syntax-pair?$14656 g$x$16494) ((case-lambda ((g$cars/f$16496) (if g$cars/f$16496 (begin '#f ((case-lambda ((g$cdrs/f$16498) (if g$cdrs/f$16498 (begin '#f (map cons g$cars/f$16496 g$cdrs/f$16498)) '#f))) (g$f$16492 (g$syntax-cdr$14668 g$x$16494)))) '#f))) ((case-lambda ((g$x$16500) (list g$x$16500))) (g$syntax-car$14664 g$x$16494))) (if (g$syntax-null?$14660 g$x$16494) (list (begin 'e* '())) '#f)))))) g$f$16492) (g$syntax-cdr$14668 g$x$16486)))) '#f))) ((case-lambda ((g$x$16502) (list g$x$16502))) (g$syntax-car$14664 g$x$16486)))) '#f))) (g$syntax-cdr$14668 g$x$16480)))) '#f))) ((letrec ((g$f$16504 (case-lambda ((g$x$16506) (if (g$syntax-pair?$14656 g$x$16506) ((case-lambda ((g$cars/f$16508) (if g$cars/f$16508 (begin '#f ((case-lambda ((g$cdrs/f$16510) (if g$cdrs/f$16510 (begin '#f (map cons g$cars/f$16508 g$cdrs/f$16510)) '#f))) (g$f$16504 (g$syntax-cdr$14668 g$x$16506)))) '#f))) ((case-lambda ((g$x$16512) (list g$x$16512))) (g$syntax-car$14664 g$x$16506))) (if (g$syntax-null?$14660 g$x$16506) (list (begin 'd* '())) '#f)))))) g$f$16504) (g$syntax-car$14664 g$x$16480)))) '#f))) g$t$16412)))) g$cls$16409)))) ((case-lambda ((g$t$16580) ((case-lambda ((g$ls/false$16582) (if (if g$ls/false$16582 (begin '#f (apply (case-lambda ((g$expr$16584) '#t)) g$ls/false$16582)) '#f) (apply (case-lambda ((g$expr$16586) (g$g$build-sequence$14490$14553 '#f (list (g$chi-expr$15217 g$expr$16586 g$r$16399 g$mr$16400) (g$g$build-void$14492$14552))))) g$ls/false$16582) ((case-lambda ((g$t$16588) ((case-lambda ((g$ls/false$16590) (if (if g$ls/false$16590 (begin '#f (apply (case-lambda ((g$expr$16592 g$cls$16593 g$cls*$16594) '#t)) g$ls/false$16590)) '#f) (apply (case-lambda ((g$expr$16598 g$cls$16599 g$cls*$16600) ((case-lambda ((g$t$16604) (g$g$build-let$14426$14557 '#f (list g$t$16604) (list (g$chi-expr$15217 g$expr$16598 g$r$16399 g$mr$16400)) (letrec ((g$f$16606 (case-lambda ((g$cls$16608 g$cls*$16609) (if (null? g$cls*$16609) (g$build-last$16406 g$t$16604 g$cls$16608) (g$build-one$16404 g$t$16604 g$cls$16608 (g$f$16606 (car g$cls*$16609) (cdr g$cls*$16609)))))))) (g$f$16606 g$cls$16599 g$cls*$16600))))) (g$gen-lexical$14580 't)))) g$ls/false$16590) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16588 '()))))) ((case-lambda ((g$x$16612) (if (g$syntax-pair?$14656 g$x$16612) (begin '#f ((case-lambda ((g$q$16614) (if g$q$16614 (begin '#f ((case-lambda ((g$r$16616) (if g$r$16616 (begin '#f (append g$q$16614 g$r$16616)) '#f))) ((case-lambda ((g$x$16618) (if (g$syntax-pair?$14656 g$x$16618) (begin '#f ((case-lambda ((g$q$16620) (if g$q$16620 (begin '#f ((case-lambda ((g$r$16622) (if g$r$16622 (begin '#f (append g$q$16620 g$r$16622)) '#f))) ((case-lambda ((g$x$16624) (if (g$syntax-pair?$14656 g$x$16624) (begin '#f ((case-lambda ((g$q$16626) (if g$q$16626 (begin '#f ((case-lambda ((g$r$16628) (if g$r$16628 (begin '#f (append g$q$16626 g$r$16628)) '#f))) ((letrec ((g$f$16630 (case-lambda ((g$x$16632) (if (g$syntax-pair?$14656 g$x$16632) ((case-lambda ((g$cars/f$16634) (if g$cars/f$16634 (begin '#f ((case-lambda ((g$cdrs/f$16636) (if g$cdrs/f$16636 (begin '#f (map cons g$cars/f$16634 g$cdrs/f$16636)) '#f))) (g$f$16630 (g$syntax-cdr$14668 g$x$16632)))) '#f))) ((case-lambda ((g$x$16638) (list g$x$16638))) (g$syntax-car$14664 g$x$16632))) (if (g$syntax-null?$14660 g$x$16632) (list (begin 'cls* '())) '#f)))))) g$f$16630) (g$syntax-cdr$14668 g$x$16624)))) '#f))) ((case-lambda ((g$x$16640) (list g$x$16640))) (g$syntax-car$14664 g$x$16624)))) '#f))) (g$syntax-cdr$14668 g$x$16618)))) '#f))) ((case-lambda ((g$x$16642) (list g$x$16642))) (g$syntax-car$14664 g$x$16618)))) '#f))) (g$syntax-cdr$14668 g$x$16612)))) '#f))) ((case-lambda ((g$x$16644) '())) (g$syntax-car$14664 g$x$16612)))) '#f))) g$t$16588)))) g$t$16580)))) ((case-lambda ((g$x$16646) (if (g$syntax-pair?$14656 g$x$16646) (begin '#f ((case-lambda ((g$q$16648) (if g$q$16648 (begin '#f ((case-lambda ((g$r$16650) (if g$r$16650 (begin '#f (append g$q$16648 g$r$16650)) '#f))) ((case-lambda ((g$x$16652) (if (g$syntax-pair?$14656 g$x$16652) (begin '#f ((case-lambda ((g$q$16654) (if g$q$16654 (begin '#f ((case-lambda ((g$r$16656) (if g$r$16656 (begin '#f (append g$q$16654 g$r$16656)) '#f))) ((case-lambda ((g$x$16658) (if (equal? (g$stx->datum$14690 g$x$16658) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$16652)))) '#f))) ((case-lambda ((g$x$16660) (list g$x$16660))) (g$syntax-car$14664 g$x$16652)))) '#f))) (g$syntax-cdr$14668 g$x$16646)))) '#f))) ((case-lambda ((g$x$16662) '())) (g$syntax-car$14664 g$x$16646)))) '#f))) g$t$16580)))) g$e$16398)))) '#f '#f)))) (set! g$quote-transformer$15127 (case-lambda ((g$e$16664 g$r$16665 g$mr$16666) ((case-lambda ((g$t$16670) ((case-lambda ((g$ls/false$16672) (if (if g$ls/false$16672 (begin '#f (apply (case-lambda ((g$datum$16674) '#t)) g$ls/false$16672)) '#f) (apply (case-lambda ((g$datum$16676) (list 'quote (g$stx->datum$14690 g$datum$16676)))) g$ls/false$16672) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16670 '()))))) ((case-lambda ((g$x$16678) (if (g$syntax-pair?$14656 g$x$16678) (begin '#f ((case-lambda ((g$q$16680) (if g$q$16680 (begin '#f ((case-lambda ((g$r$16682) (if g$r$16682 (begin '#f (append g$q$16680 g$r$16682)) '#f))) ((case-lambda ((g$x$16684) (if (g$syntax-pair?$14656 g$x$16684) (begin '#f ((case-lambda ((g$q$16686) (if g$q$16686 (begin '#f ((case-lambda ((g$r$16688) (if g$r$16688 (begin '#f (append g$q$16686 g$r$16688)) '#f))) ((case-lambda ((g$x$16690) (if (equal? (g$stx->datum$14690 g$x$16690) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$16684)))) '#f))) ((case-lambda ((g$x$16692) (list g$x$16692))) (g$syntax-car$14664 g$x$16684)))) '#f))) (g$syntax-cdr$14668 g$x$16678)))) '#f))) ((case-lambda ((g$x$16694) '())) (g$syntax-car$14664 g$x$16678)))) '#f))) g$t$16670)))) g$e$16664)))) (set! g$case-lambda-transformer$15129 (case-lambda ((g$e$16696 g$r$16697 g$mr$16698) ((case-lambda ((g$t$16702) ((case-lambda ((g$ls/false$16704) (if (if g$ls/false$16704 (begin '#f (apply (case-lambda ((g$fmls*$16706 g$b*$16707 g$b**$16708) '#t)) g$ls/false$16704)) '#f) (apply (case-lambda ((g$fmls*$16712 g$b*$16713 g$b**$16714) (call-with-values (case-lambda (() (g$chi-lambda-clause*$15223 g$fmls*$16712 (map cons g$b*$16713 g$b**$16714) g$r$16697 g$mr$16698))) (case-lambda ((g$fmls*$16718 g$body*$16719) (g$g$build-case-lambda$14424$14558 '#f g$fmls*$16718 g$body*$16719)))))) g$ls/false$16704) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16702 '()))))) ((case-lambda ((g$x$16722) (if (g$syntax-pair?$14656 g$x$16722) (begin '#f ((case-lambda ((g$q$16724) (if g$q$16724 (begin '#f ((case-lambda ((g$r$16726) (if g$r$16726 (begin '#f (append g$q$16724 g$r$16726)) '#f))) ((letrec ((g$f$16728 (case-lambda ((g$x$16730) (if (g$syntax-pair?$14656 g$x$16730) ((case-lambda ((g$cars/f$16732) (if g$cars/f$16732 (begin '#f ((case-lambda ((g$cdrs/f$16734) (if g$cdrs/f$16734 (begin '#f (map cons g$cars/f$16732 g$cdrs/f$16734)) '#f))) (g$f$16728 (g$syntax-cdr$14668 g$x$16730)))) '#f))) ((case-lambda ((g$x$16736) (if (g$syntax-pair?$14656 g$x$16736) (begin '#f ((case-lambda ((g$q$16738) (if g$q$16738 (begin '#f ((case-lambda ((g$r$16740) (if g$r$16740 (begin '#f (append g$q$16738 g$r$16740)) '#f))) ((case-lambda ((g$x$16742) (if (g$syntax-pair?$14656 g$x$16742) (begin '#f ((case-lambda ((g$q$16744) (if g$q$16744 (begin '#f ((case-lambda ((g$r$16746) (if g$r$16746 (begin '#f (append g$q$16744 g$r$16746)) '#f))) ((letrec ((g$f$16748 (case-lambda ((g$x$16750) (if (g$syntax-pair?$14656 g$x$16750) ((case-lambda ((g$cars/f$16752) (if g$cars/f$16752 (begin '#f ((case-lambda ((g$cdrs/f$16754) (if g$cdrs/f$16754 (begin '#f (map cons g$cars/f$16752 g$cdrs/f$16754)) '#f))) (g$f$16748 (g$syntax-cdr$14668 g$x$16750)))) '#f))) ((case-lambda ((g$x$16756) (list g$x$16756))) (g$syntax-car$14664 g$x$16750))) (if (g$syntax-null?$14660 g$x$16750) (list (begin 'b** '())) '#f)))))) g$f$16748) (g$syntax-cdr$14668 g$x$16742)))) '#f))) ((case-lambda ((g$x$16758) (list g$x$16758))) (g$syntax-car$14664 g$x$16742)))) '#f))) (g$syntax-cdr$14668 g$x$16736)))) '#f))) ((case-lambda ((g$x$16760) (list g$x$16760))) (g$syntax-car$14664 g$x$16736)))) '#f))) (g$syntax-car$14664 g$x$16730))) (if (g$syntax-null?$14660 g$x$16730) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f)))))) g$f$16728) (g$syntax-cdr$14668 g$x$16722)))) '#f))) ((case-lambda ((g$x$16762) '())) (g$syntax-car$14664 g$x$16722)))) '#f))) g$t$16702)))) g$e$16696)))) (set! g$lambda-transformer$15131 (case-lambda ((g$e$16764 g$r$16765 g$mr$16766) ((case-lambda ((g$t$16770) ((case-lambda ((g$ls/false$16772) (if (if g$ls/false$16772 (begin '#f (apply (case-lambda ((g$fmls$16774 g$b$16775 g$b*$16776) '#t)) g$ls/false$16772)) '#f) (apply (case-lambda ((g$fmls$16780 g$b$16781 g$b*$16782) (call-with-values (case-lambda (() (g$chi-lambda-clause$15221 g$fmls$16780 (cons g$b$16781 g$b*$16782) g$r$16765 g$mr$16766))) (case-lambda ((g$fmls$16786 g$body$16787) (g$g$build-lambda$14422$14559 '#f g$fmls$16786 g$body$16787)))))) g$ls/false$16772) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16770 '()))))) ((case-lambda ((g$x$16790) (if (g$syntax-pair?$14656 g$x$16790) (begin '#f ((case-lambda ((g$q$16792) (if g$q$16792 (begin '#f ((case-lambda ((g$r$16794) (if g$r$16794 (begin '#f (append g$q$16792 g$r$16794)) '#f))) ((case-lambda ((g$x$16796) (if (g$syntax-pair?$14656 g$x$16796) (begin '#f ((case-lambda ((g$q$16798) (if g$q$16798 (begin '#f ((case-lambda ((g$r$16800) (if g$r$16800 (begin '#f (append g$q$16798 g$r$16800)) '#f))) ((case-lambda ((g$x$16802) (if (g$syntax-pair?$14656 g$x$16802) (begin '#f ((case-lambda ((g$q$16804) (if g$q$16804 (begin '#f ((case-lambda ((g$r$16806) (if g$r$16806 (begin '#f (append g$q$16804 g$r$16806)) '#f))) ((letrec ((g$f$16808 (case-lambda ((g$x$16810) (if (g$syntax-pair?$14656 g$x$16810) ((case-lambda ((g$cars/f$16812) (if g$cars/f$16812 (begin '#f ((case-lambda ((g$cdrs/f$16814) (if g$cdrs/f$16814 (begin '#f (map cons g$cars/f$16812 g$cdrs/f$16814)) '#f))) (g$f$16808 (g$syntax-cdr$14668 g$x$16810)))) '#f))) ((case-lambda ((g$x$16816) (list g$x$16816))) (g$syntax-car$14664 g$x$16810))) (if (g$syntax-null?$14660 g$x$16810) (list (begin 'b* '())) '#f)))))) g$f$16808) (g$syntax-cdr$14668 g$x$16802)))) '#f))) ((case-lambda ((g$x$16818) (list g$x$16818))) (g$syntax-car$14664 g$x$16802)))) '#f))) (g$syntax-cdr$14668 g$x$16796)))) '#f))) ((case-lambda ((g$x$16820) (list g$x$16820))) (g$syntax-car$14664 g$x$16796)))) '#f))) (g$syntax-cdr$14668 g$x$16790)))) '#f))) ((case-lambda ((g$x$16822) '())) (g$syntax-car$14664 g$x$16790)))) '#f))) g$t$16770)))) g$e$16764)))) (set! g$bless$15133 (case-lambda ((g$x$16824) (g$mkstx$14646 (letrec ((g$f$16826 (case-lambda ((g$x$16828) (if (g$stx?$14622 g$x$16828) g$x$16828 (if (pair? g$x$16828) (cons (g$f$16826 (car g$x$16828)) (g$f$16826 (cdr g$x$16828))) (if (symbol? g$x$16828) (g$scheme-stx$15099 g$x$16828) (if (vector? g$x$16828) (list->vector (map g$f$16826 (vector->list g$x$16828))) g$x$16828)))))))) (g$f$16826 g$x$16824)) '() '())))) (set! g$with-syntax-macro$15135 (case-lambda ((g$e$16830) ((case-lambda ((g$t$16832) ((case-lambda ((g$ls/false$16834) (if (if g$ls/false$16834 (begin '#f (apply (case-lambda ((g$fml*$16836 g$expr*$16837 g$b$16838 g$b*$16839) '#t)) g$ls/false$16834)) '#f) (apply (case-lambda ((g$fml*$16844 g$expr*$16845 g$b$16846 g$b*$16847) (g$bless$15133 (list 'syntax-case (cons 'list g$expr*$16845) '() (list g$fml*$16844 (cons 'begin (cons g$b$16846 g$b*$16847))))))) g$ls/false$16834) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16832 '()))))) ((case-lambda ((g$x$16852) (if (g$syntax-pair?$14656 g$x$16852) (begin '#f ((case-lambda ((g$q$16854) (if g$q$16854 (begin '#f ((case-lambda ((g$r$16856) (if g$r$16856 (begin '#f (append g$q$16854 g$r$16856)) '#f))) ((case-lambda ((g$x$16858) (if (g$syntax-pair?$14656 g$x$16858) (begin '#f ((case-lambda ((g$q$16860) (if g$q$16860 (begin '#f ((case-lambda ((g$r$16862) (if g$r$16862 (begin '#f (append g$q$16860 g$r$16862)) '#f))) ((case-lambda ((g$x$16864) (if (g$syntax-pair?$14656 g$x$16864) (begin '#f ((case-lambda ((g$q$16866) (if g$q$16866 (begin '#f ((case-lambda ((g$r$16868) (if g$r$16868 (begin '#f (append g$q$16866 g$r$16868)) '#f))) ((letrec ((g$f$16870 (case-lambda ((g$x$16872) (if (g$syntax-pair?$14656 g$x$16872) ((case-lambda ((g$cars/f$16874) (if g$cars/f$16874 (begin '#f ((case-lambda ((g$cdrs/f$16876) (if g$cdrs/f$16876 (begin '#f (map cons g$cars/f$16874 g$cdrs/f$16876)) '#f))) (g$f$16870 (g$syntax-cdr$14668 g$x$16872)))) '#f))) ((case-lambda ((g$x$16878) (list g$x$16878))) (g$syntax-car$14664 g$x$16872))) (if (g$syntax-null?$14660 g$x$16872) (list (begin 'b* '())) '#f)))))) g$f$16870) (g$syntax-cdr$14668 g$x$16864)))) '#f))) ((case-lambda ((g$x$16880) (list g$x$16880))) (g$syntax-car$14664 g$x$16864)))) '#f))) (g$syntax-cdr$14668 g$x$16858)))) '#f))) ((letrec ((g$f$16882 (case-lambda ((g$x$16884) (if (g$syntax-pair?$14656 g$x$16884) ((case-lambda ((g$cars/f$16886) (if g$cars/f$16886 (begin '#f ((case-lambda ((g$cdrs/f$16888) (if g$cdrs/f$16888 (begin '#f (map cons g$cars/f$16886 g$cdrs/f$16888)) '#f))) (g$f$16882 (g$syntax-cdr$14668 g$x$16884)))) '#f))) ((case-lambda ((g$x$16890) (if (g$syntax-pair?$14656 g$x$16890) (begin '#f ((case-lambda ((g$q$16892) (if g$q$16892 (begin '#f ((case-lambda ((g$r$16894) (if g$r$16894 (begin '#f (append g$q$16892 g$r$16894)) '#f))) ((case-lambda ((g$x$16896) (if (g$syntax-pair?$14656 g$x$16896) (begin '#f ((case-lambda ((g$q$16898) (if g$q$16898 (begin '#f ((case-lambda ((g$r$16900) (if g$r$16900 (begin '#f (append g$q$16898 g$r$16900)) '#f))) ((case-lambda ((g$x$16902) (if (equal? (g$stx->datum$14690 g$x$16902) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$16896)))) '#f))) ((case-lambda ((g$x$16904) (list g$x$16904))) (g$syntax-car$14664 g$x$16896)))) '#f))) (g$syntax-cdr$14668 g$x$16890)))) '#f))) ((case-lambda ((g$x$16906) (list g$x$16906))) (g$syntax-car$14664 g$x$16890)))) '#f))) (g$syntax-car$14664 g$x$16884))) (if (g$syntax-null?$14660 g$x$16884) (list (begin 'fml* '()) (begin 'expr* '())) '#f)))))) g$f$16882) (g$syntax-car$14664 g$x$16858)))) '#f))) (g$syntax-cdr$14668 g$x$16852)))) '#f))) ((case-lambda ((g$x$16908) '())) (g$syntax-car$14664 g$x$16852)))) '#f))) g$t$16832)))) g$e$16830)))) (set! g$let-macro$15137 (case-lambda ((g$stx$16910) ((case-lambda ((g$t$16912) ((case-lambda ((g$ls/false$16914) (if (if g$ls/false$16914 (begin '#f (apply (case-lambda ((g$lhs*$16916 g$rhs*$16917 g$b$16918 g$b*$16919) '#t)) g$ls/false$16914)) '#f) (apply (case-lambda ((g$lhs*$16924 g$rhs*$16925 g$b$16926 g$b*$16927) (if (g$valid-bound-ids?$14680 g$lhs*$16924) (g$bless$15133 (cons (cons 'lambda (cons g$lhs*$16924 (cons g$b$16926 g$b*$16927))) g$rhs*$16925)) (error 'expander '"invalid bindings" (g$strip$14688 g$stx$16910 '()))))) g$ls/false$16914) ((case-lambda ((g$t$16932) ((case-lambda ((g$ls/false$16934) (if (if g$ls/false$16934 (begin '#f (apply (case-lambda ((g$f$16936 g$lhs*$16937 g$rhs*$16938 g$b$16939 g$b*$16940) (g$id?$14670 g$f$16936))) g$ls/false$16934)) '#f) (apply (case-lambda ((g$f$16946 g$lhs*$16947 g$rhs*$16948 g$b$16949 g$b*$16950) (if (g$valid-bound-ids?$14680 g$lhs*$16947) (g$bless$15133 (list 'letrec (list (list g$f$16946 (cons 'lambda (cons g$lhs*$16947 (cons g$b$16949 g$b*$16950))))) (cons g$f$16946 g$rhs*$16948))) (error 'expander '"invalid syntax" (g$strip$14688 g$stx$16910 '()))))) g$ls/false$16934) (error 'expander '"invalid syntax" (g$strip$14688 g$t$16932 '()))))) ((case-lambda ((g$x$16956) (if (g$syntax-pair?$14656 g$x$16956) (begin '#f ((case-lambda ((g$q$16958) (if g$q$16958 (begin '#f ((case-lambda ((g$r$16960) (if g$r$16960 (begin '#f (append g$q$16958 g$r$16960)) '#f))) ((case-lambda ((g$x$16962) (if (g$syntax-pair?$14656 g$x$16962) (begin '#f ((case-lambda ((g$q$16964) (if g$q$16964 (begin '#f ((case-lambda ((g$r$16966) (if g$r$16966 (begin '#f (append g$q$16964 g$r$16966)) '#f))) ((case-lambda ((g$x$16968) (if (g$syntax-pair?$14656 g$x$16968) (begin '#f ((case-lambda ((g$q$16970) (if g$q$16970 (begin '#f ((case-lambda ((g$r$16972) (if g$r$16972 (begin '#f (append g$q$16970 g$r$16972)) '#f))) ((case-lambda ((g$x$16974) (if (g$syntax-pair?$14656 g$x$16974) (begin '#f ((case-lambda ((g$q$16976) (if g$q$16976 (begin '#f ((case-lambda ((g$r$16978) (if g$r$16978 (begin '#f (append g$q$16976 g$r$16978)) '#f))) ((letrec ((g$f$16980 (case-lambda ((g$x$16982) (if (g$syntax-pair?$14656 g$x$16982) ((case-lambda ((g$cars/f$16984) (if g$cars/f$16984 (begin '#f ((case-lambda ((g$cdrs/f$16986) (if g$cdrs/f$16986 (begin '#f (map cons g$cars/f$16984 g$cdrs/f$16986)) '#f))) (g$f$16980 (g$syntax-cdr$14668 g$x$16982)))) '#f))) ((case-lambda ((g$x$16988) (list g$x$16988))) (g$syntax-car$14664 g$x$16982))) (if (g$syntax-null?$14660 g$x$16982) (list (begin 'b* '())) '#f)))))) g$f$16980) (g$syntax-cdr$14668 g$x$16974)))) '#f))) ((case-lambda ((g$x$16990) (list g$x$16990))) (g$syntax-car$14664 g$x$16974)))) '#f))) (g$syntax-cdr$14668 g$x$16968)))) '#f))) ((letrec ((g$f$16992 (case-lambda ((g$x$16994) (if (g$syntax-pair?$14656 g$x$16994) ((case-lambda ((g$cars/f$16996) (if g$cars/f$16996 (begin '#f ((case-lambda ((g$cdrs/f$16998) (if g$cdrs/f$16998 (begin '#f (map cons g$cars/f$16996 g$cdrs/f$16998)) '#f))) (g$f$16992 (g$syntax-cdr$14668 g$x$16994)))) '#f))) ((case-lambda ((g$x$17000) (if (g$syntax-pair?$14656 g$x$17000) (begin '#f ((case-lambda ((g$q$17002) (if g$q$17002 (begin '#f ((case-lambda ((g$r$17004) (if g$r$17004 (begin '#f (append g$q$17002 g$r$17004)) '#f))) ((case-lambda ((g$x$17006) (if (g$syntax-pair?$14656 g$x$17006) (begin '#f ((case-lambda ((g$q$17008) (if g$q$17008 (begin '#f ((case-lambda ((g$r$17010) (if g$r$17010 (begin '#f (append g$q$17008 g$r$17010)) '#f))) ((case-lambda ((g$x$17012) (if (equal? (g$stx->datum$14690 g$x$17012) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17006)))) '#f))) ((case-lambda ((g$x$17014) (list g$x$17014))) (g$syntax-car$14664 g$x$17006)))) '#f))) (g$syntax-cdr$14668 g$x$17000)))) '#f))) ((case-lambda ((g$x$17016) (list g$x$17016))) (g$syntax-car$14664 g$x$17000)))) '#f))) (g$syntax-car$14664 g$x$16994))) (if (g$syntax-null?$14660 g$x$16994) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$16992) (g$syntax-car$14664 g$x$16968)))) '#f))) (g$syntax-cdr$14668 g$x$16962)))) '#f))) ((case-lambda ((g$x$17018) (list g$x$17018))) (g$syntax-car$14664 g$x$16962)))) '#f))) (g$syntax-cdr$14668 g$x$16956)))) '#f))) ((case-lambda ((g$x$17020) '())) (g$syntax-car$14664 g$x$16956)))) '#f))) g$t$16932)))) g$t$16912)))) ((case-lambda ((g$x$17022) (if (g$syntax-pair?$14656 g$x$17022) (begin '#f ((case-lambda ((g$q$17024) (if g$q$17024 (begin '#f ((case-lambda ((g$r$17026) (if g$r$17026 (begin '#f (append g$q$17024 g$r$17026)) '#f))) ((case-lambda ((g$x$17028) (if (g$syntax-pair?$14656 g$x$17028) (begin '#f ((case-lambda ((g$q$17030) (if g$q$17030 (begin '#f ((case-lambda ((g$r$17032) (if g$r$17032 (begin '#f (append g$q$17030 g$r$17032)) '#f))) ((case-lambda ((g$x$17034) (if (g$syntax-pair?$14656 g$x$17034) (begin '#f ((case-lambda ((g$q$17036) (if g$q$17036 (begin '#f ((case-lambda ((g$r$17038) (if g$r$17038 (begin '#f (append g$q$17036 g$r$17038)) '#f))) ((letrec ((g$f$17040 (case-lambda ((g$x$17042) (if (g$syntax-pair?$14656 g$x$17042) ((case-lambda ((g$cars/f$17044) (if g$cars/f$17044 (begin '#f ((case-lambda ((g$cdrs/f$17046) (if g$cdrs/f$17046 (begin '#f (map cons g$cars/f$17044 g$cdrs/f$17046)) '#f))) (g$f$17040 (g$syntax-cdr$14668 g$x$17042)))) '#f))) ((case-lambda ((g$x$17048) (list g$x$17048))) (g$syntax-car$14664 g$x$17042))) (if (g$syntax-null?$14660 g$x$17042) (list (begin 'b* '())) '#f)))))) g$f$17040) (g$syntax-cdr$14668 g$x$17034)))) '#f))) ((case-lambda ((g$x$17050) (list g$x$17050))) (g$syntax-car$14664 g$x$17034)))) '#f))) (g$syntax-cdr$14668 g$x$17028)))) '#f))) ((letrec ((g$f$17052 (case-lambda ((g$x$17054) (if (g$syntax-pair?$14656 g$x$17054) ((case-lambda ((g$cars/f$17056) (if g$cars/f$17056 (begin '#f ((case-lambda ((g$cdrs/f$17058) (if g$cdrs/f$17058 (begin '#f (map cons g$cars/f$17056 g$cdrs/f$17058)) '#f))) (g$f$17052 (g$syntax-cdr$14668 g$x$17054)))) '#f))) ((case-lambda ((g$x$17060) (if (g$syntax-pair?$14656 g$x$17060) (begin '#f ((case-lambda ((g$q$17062) (if g$q$17062 (begin '#f ((case-lambda ((g$r$17064) (if g$r$17064 (begin '#f (append g$q$17062 g$r$17064)) '#f))) ((case-lambda ((g$x$17066) (if (g$syntax-pair?$14656 g$x$17066) (begin '#f ((case-lambda ((g$q$17068) (if g$q$17068 (begin '#f ((case-lambda ((g$r$17070) (if g$r$17070 (begin '#f (append g$q$17068 g$r$17070)) '#f))) ((case-lambda ((g$x$17072) (if (equal? (g$stx->datum$14690 g$x$17072) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17066)))) '#f))) ((case-lambda ((g$x$17074) (list g$x$17074))) (g$syntax-car$14664 g$x$17066)))) '#f))) (g$syntax-cdr$14668 g$x$17060)))) '#f))) ((case-lambda ((g$x$17076) (list g$x$17076))) (g$syntax-car$14664 g$x$17060)))) '#f))) (g$syntax-car$14664 g$x$17054))) (if (g$syntax-null?$14660 g$x$17054) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$17052) (g$syntax-car$14664 g$x$17028)))) '#f))) (g$syntax-cdr$14668 g$x$17022)))) '#f))) ((case-lambda ((g$x$17078) '())) (g$syntax-car$14664 g$x$17022)))) '#f))) g$t$16912)))) g$stx$16910)))) (set! g$trace-lambda-macro$15139 (case-lambda ((g$stx$17080) ((case-lambda ((g$t$17082) ((case-lambda ((g$ls/false$17084) (if (if g$ls/false$17084 (begin '#f (apply (case-lambda ((g$who$17086 g$fmls$17087 g$b$17088 g$b*$17089) '#t)) g$ls/false$17084)) '#f) (apply (case-lambda ((g$who$17094 g$fmls$17095 g$b$17096 g$b*$17097) (if (g$valid-bound-ids?$14680 g$fmls$17095) (g$bless$15133 (list 'make-traced-procedure (list 'quote g$who$17094) (cons 'lambda (cons g$fmls$17095 (cons g$b$17096 g$b*$17097))))) (error 'expander '"invalid formals" (g$strip$14688 g$stx$17080 '()))))) g$ls/false$17084) ((case-lambda ((g$t$17102) ((case-lambda ((g$ls/false$17104) (if (if g$ls/false$17104 (begin '#f (apply (case-lambda ((g$who$17106 g$fmls$17107 g$last$17108 g$b$17109 g$b*$17110) '#t)) g$ls/false$17104)) '#f) (apply (case-lambda ((g$who$17116 g$fmls$17117 g$last$17118 g$b$17119 g$b*$17120) (if (g$valid-bound-ids?$14680 (cons g$last$17118 g$fmls$17117)) (g$bless$15133 (list 'make-traced-procedure (list 'quote g$who$17116) (cons 'lambda (cons (append g$fmls$17117 g$last$17118) (cons g$b$17119 g$b*$17120))))) (error 'expander '"invalid formals" (g$strip$14688 g$stx$17080 '()))))) g$ls/false$17104) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17102 '()))))) ((case-lambda ((g$x$17126) (if (g$syntax-pair?$14656 g$x$17126) (begin '#f ((case-lambda ((g$q$17128) (if g$q$17128 (begin '#f ((case-lambda ((g$r$17130) (if g$r$17130 (begin '#f (append g$q$17128 g$r$17130)) '#f))) ((case-lambda ((g$x$17132) (if (g$syntax-pair?$14656 g$x$17132) (begin '#f ((case-lambda ((g$q$17134) (if g$q$17134 (begin '#f ((case-lambda ((g$r$17136) (if g$r$17136 (begin '#f (append g$q$17134 g$r$17136)) '#f))) ((case-lambda ((g$x$17138) (if (g$syntax-pair?$14656 g$x$17138) (begin '#f ((case-lambda ((g$q$17140) (if g$q$17140 (begin '#f ((case-lambda ((g$r$17142) (if g$r$17142 (begin '#f (append g$q$17140 g$r$17142)) '#f))) ((case-lambda ((g$x$17144) (if (g$syntax-pair?$14656 g$x$17144) (begin '#f ((case-lambda ((g$q$17146) (if g$q$17146 (begin '#f ((case-lambda ((g$r$17148) (if g$r$17148 (begin '#f (append g$q$17146 g$r$17148)) '#f))) ((letrec ((g$f$17150 (case-lambda ((g$x$17152) (if (g$syntax-pair?$14656 g$x$17152) ((case-lambda ((g$cars/f$17154) (if g$cars/f$17154 (begin '#f ((case-lambda ((g$cdrs/f$17156) (if g$cdrs/f$17156 (begin '#f (map cons g$cars/f$17154 g$cdrs/f$17156)) '#f))) (g$f$17150 (g$syntax-cdr$14668 g$x$17152)))) '#f))) ((case-lambda ((g$x$17158) (list g$x$17158))) (g$syntax-car$14664 g$x$17152))) (if (g$syntax-null?$14660 g$x$17152) (list (begin 'b* '())) '#f)))))) g$f$17150) (g$syntax-cdr$14668 g$x$17144)))) '#f))) ((case-lambda ((g$x$17160) (list g$x$17160))) (g$syntax-car$14664 g$x$17144)))) '#f))) (g$syntax-cdr$14668 g$x$17138)))) '#f))) ((letrec ((g$f$17162 (case-lambda ((g$x$17168) (if (g$syntax-pair?$14656 g$x$17168) ((case-lambda ((g$cars/f$17170) (if g$cars/f$17170 (begin '#f ((case-lambda ((g$d/f$17172) (if g$d/f$17172 (begin '#f (cons (map cons g$cars/f$17170 (car g$d/f$17172)) (cdr g$d/f$17172))) '#f))) (g$f$17162 (g$syntax-cdr$14668 g$x$17168)))) '#f))) ((case-lambda ((g$x$17174) (list g$x$17174))) (g$syntax-car$14664 g$x$17168))) ((case-lambda ((g$d$17176) (if g$d$17176 (begin '#f (cons (list (begin 'fmls '())) g$d$17176)) '#f))) ((case-lambda ((g$x$17178) (list g$x$17178))) g$x$17168))))))) (case-lambda ((g$x$17164) ((case-lambda ((g$x$17166) (if g$x$17166 (begin '#f (append (car g$x$17166) (cdr g$x$17166))) '#f))) (g$f$17162 g$x$17164))))) (g$syntax-car$14664 g$x$17138)))) '#f))) (g$syntax-cdr$14668 g$x$17132)))) '#f))) ((case-lambda ((g$x$17180) (list g$x$17180))) (g$syntax-car$14664 g$x$17132)))) '#f))) (g$syntax-cdr$14668 g$x$17126)))) '#f))) ((case-lambda ((g$x$17182) '())) (g$syntax-car$14664 g$x$17126)))) '#f))) g$t$17102)))) g$t$17082)))) ((case-lambda ((g$x$17184) (if (g$syntax-pair?$14656 g$x$17184) (begin '#f ((case-lambda ((g$q$17186) (if g$q$17186 (begin '#f ((case-lambda ((g$r$17188) (if g$r$17188 (begin '#f (append g$q$17186 g$r$17188)) '#f))) ((case-lambda ((g$x$17190) (if (g$syntax-pair?$14656 g$x$17190) (begin '#f ((case-lambda ((g$q$17192) (if g$q$17192 (begin '#f ((case-lambda ((g$r$17194) (if g$r$17194 (begin '#f (append g$q$17192 g$r$17194)) '#f))) ((case-lambda ((g$x$17196) (if (g$syntax-pair?$14656 g$x$17196) (begin '#f ((case-lambda ((g$q$17198) (if g$q$17198 (begin '#f ((case-lambda ((g$r$17200) (if g$r$17200 (begin '#f (append g$q$17198 g$r$17200)) '#f))) ((case-lambda ((g$x$17202) (if (g$syntax-pair?$14656 g$x$17202) (begin '#f ((case-lambda ((g$q$17204) (if g$q$17204 (begin '#f ((case-lambda ((g$r$17206) (if g$r$17206 (begin '#f (append g$q$17204 g$r$17206)) '#f))) ((letrec ((g$f$17208 (case-lambda ((g$x$17210) (if (g$syntax-pair?$14656 g$x$17210) ((case-lambda ((g$cars/f$17212) (if g$cars/f$17212 (begin '#f ((case-lambda ((g$cdrs/f$17214) (if g$cdrs/f$17214 (begin '#f (map cons g$cars/f$17212 g$cdrs/f$17214)) '#f))) (g$f$17208 (g$syntax-cdr$14668 g$x$17210)))) '#f))) ((case-lambda ((g$x$17216) (list g$x$17216))) (g$syntax-car$14664 g$x$17210))) (if (g$syntax-null?$14660 g$x$17210) (list (begin 'b* '())) '#f)))))) g$f$17208) (g$syntax-cdr$14668 g$x$17202)))) '#f))) ((case-lambda ((g$x$17218) (list g$x$17218))) (g$syntax-car$14664 g$x$17202)))) '#f))) (g$syntax-cdr$14668 g$x$17196)))) '#f))) ((letrec ((g$f$17220 (case-lambda ((g$x$17222) (if (g$syntax-pair?$14656 g$x$17222) ((case-lambda ((g$cars/f$17224) (if g$cars/f$17224 (begin '#f ((case-lambda ((g$cdrs/f$17226) (if g$cdrs/f$17226 (begin '#f (map cons g$cars/f$17224 g$cdrs/f$17226)) '#f))) (g$f$17220 (g$syntax-cdr$14668 g$x$17222)))) '#f))) ((case-lambda ((g$x$17228) (list g$x$17228))) (g$syntax-car$14664 g$x$17222))) (if (g$syntax-null?$14660 g$x$17222) (list (begin 'fmls '())) '#f)))))) g$f$17220) (g$syntax-car$14664 g$x$17196)))) '#f))) (g$syntax-cdr$14668 g$x$17190)))) '#f))) ((case-lambda ((g$x$17230) (list g$x$17230))) (g$syntax-car$14664 g$x$17190)))) '#f))) (g$syntax-cdr$14668 g$x$17184)))) '#f))) ((case-lambda ((g$x$17232) '())) (g$syntax-car$14664 g$x$17184)))) '#f))) g$t$17082)))) g$stx$17080)))) (set! g$trace-define-macro$15141 (case-lambda ((g$stx$17234) ((case-lambda ((g$t$17236) ((case-lambda ((g$ls/false$17238) (if (if g$ls/false$17238 (begin '#f (apply (case-lambda ((g$who$17240 g$fmls$17241 g$b$17242 g$b*$17243) '#t)) g$ls/false$17238)) '#f) (apply (case-lambda ((g$who$17248 g$fmls$17249 g$b$17250 g$b*$17251) (if (g$valid-bound-ids?$14680 g$fmls$17249) (g$bless$15133 (list 'define g$who$17248 (list 'make-traced-procedure (list 'quote g$who$17248) (cons 'lambda (cons g$fmls$17249 (cons g$b$17250 g$b*$17251)))))) (error 'expander '"invalid formals" (g$strip$14688 g$stx$17234 '()))))) g$ls/false$17238) ((case-lambda ((g$t$17256) ((case-lambda ((g$ls/false$17258) (if (if g$ls/false$17258 (begin '#f (apply (case-lambda ((g$who$17260 g$fmls$17261 g$last$17262 g$b$17263 g$b*$17264) '#t)) g$ls/false$17258)) '#f) (apply (case-lambda ((g$who$17270 g$fmls$17271 g$last$17272 g$b$17273 g$b*$17274) (if (g$valid-bound-ids?$14680 (cons g$last$17272 g$fmls$17271)) (g$bless$15133 (list 'define g$who$17270 (list 'make-traced-procedure (list 'quote g$who$17270) (cons 'lambda (cons (append g$fmls$17271 g$last$17272) (cons g$b$17273 g$b*$17274)))))) (error 'expander '"invalid formals" (g$strip$14688 g$stx$17234 '()))))) g$ls/false$17258) ((case-lambda ((g$t$17280) ((case-lambda ((g$ls/false$17282) (if (if g$ls/false$17282 (begin '#f (apply (case-lambda ((g$who$17284 g$expr$17285) '#t)) g$ls/false$17282)) '#f) (apply (case-lambda ((g$who$17288 g$expr$17289) (if (g$id?$14670 g$who$17288) (g$bless$15133 (list 'define g$who$17288 (list 'let (list (list 'v g$expr$17289)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$who$17288) '(v))) '((error 'trace-define "not a procedure" v)))))))) (error 'expander '"invalid formals" (g$strip$14688 g$stx$17234 '()))))) g$ls/false$17282) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17280 '()))))) ((case-lambda ((g$x$17292) (if (g$syntax-pair?$14656 g$x$17292) (begin '#f ((case-lambda ((g$q$17294) (if g$q$17294 (begin '#f ((case-lambda ((g$r$17296) (if g$r$17296 (begin '#f (append g$q$17294 g$r$17296)) '#f))) ((case-lambda ((g$x$17298) (if (g$syntax-pair?$14656 g$x$17298) (begin '#f ((case-lambda ((g$q$17300) (if g$q$17300 (begin '#f ((case-lambda ((g$r$17302) (if g$r$17302 (begin '#f (append g$q$17300 g$r$17302)) '#f))) ((case-lambda ((g$x$17304) (if (g$syntax-pair?$14656 g$x$17304) (begin '#f ((case-lambda ((g$q$17306) (if g$q$17306 (begin '#f ((case-lambda ((g$r$17308) (if g$r$17308 (begin '#f (append g$q$17306 g$r$17308)) '#f))) ((case-lambda ((g$x$17310) (if (equal? (g$stx->datum$14690 g$x$17310) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17304)))) '#f))) ((case-lambda ((g$x$17312) (list g$x$17312))) (g$syntax-car$14664 g$x$17304)))) '#f))) (g$syntax-cdr$14668 g$x$17298)))) '#f))) ((case-lambda ((g$x$17314) (list g$x$17314))) (g$syntax-car$14664 g$x$17298)))) '#f))) (g$syntax-cdr$14668 g$x$17292)))) '#f))) ((case-lambda ((g$x$17316) '())) (g$syntax-car$14664 g$x$17292)))) '#f))) g$t$17280)))) g$t$17256)))) ((case-lambda ((g$x$17318) (if (g$syntax-pair?$14656 g$x$17318) (begin '#f ((case-lambda ((g$q$17320) (if g$q$17320 (begin '#f ((case-lambda ((g$r$17322) (if g$r$17322 (begin '#f (append g$q$17320 g$r$17322)) '#f))) ((case-lambda ((g$x$17324) (if (g$syntax-pair?$14656 g$x$17324) (begin '#f ((case-lambda ((g$q$17326) (if g$q$17326 (begin '#f ((case-lambda ((g$r$17328) (if g$r$17328 (begin '#f (append g$q$17326 g$r$17328)) '#f))) ((case-lambda ((g$x$17330) (if (g$syntax-pair?$14656 g$x$17330) (begin '#f ((case-lambda ((g$q$17332) (if g$q$17332 (begin '#f ((case-lambda ((g$r$17334) (if g$r$17334 (begin '#f (append g$q$17332 g$r$17334)) '#f))) ((letrec ((g$f$17336 (case-lambda ((g$x$17338) (if (g$syntax-pair?$14656 g$x$17338) ((case-lambda ((g$cars/f$17340) (if g$cars/f$17340 (begin '#f ((case-lambda ((g$cdrs/f$17342) (if g$cdrs/f$17342 (begin '#f (map cons g$cars/f$17340 g$cdrs/f$17342)) '#f))) (g$f$17336 (g$syntax-cdr$14668 g$x$17338)))) '#f))) ((case-lambda ((g$x$17344) (list g$x$17344))) (g$syntax-car$14664 g$x$17338))) (if (g$syntax-null?$14660 g$x$17338) (list (begin 'b* '())) '#f)))))) g$f$17336) (g$syntax-cdr$14668 g$x$17330)))) '#f))) ((case-lambda ((g$x$17346) (list g$x$17346))) (g$syntax-car$14664 g$x$17330)))) '#f))) (g$syntax-cdr$14668 g$x$17324)))) '#f))) ((case-lambda ((g$x$17348) (if (g$syntax-pair?$14656 g$x$17348) (begin '#f ((case-lambda ((g$q$17350) (if g$q$17350 (begin '#f ((case-lambda ((g$r$17352) (if g$r$17352 (begin '#f (append g$q$17350 g$r$17352)) '#f))) ((letrec ((g$f$17354 (case-lambda ((g$x$17360) (if (g$syntax-pair?$14656 g$x$17360) ((case-lambda ((g$cars/f$17362) (if g$cars/f$17362 (begin '#f ((case-lambda ((g$d/f$17364) (if g$d/f$17364 (begin '#f (cons (map cons g$cars/f$17362 (car g$d/f$17364)) (cdr g$d/f$17364))) '#f))) (g$f$17354 (g$syntax-cdr$14668 g$x$17360)))) '#f))) ((case-lambda ((g$x$17366) (list g$x$17366))) (g$syntax-car$14664 g$x$17360))) ((case-lambda ((g$d$17368) (if g$d$17368 (begin '#f (cons (list (begin 'fmls '())) g$d$17368)) '#f))) ((case-lambda ((g$x$17370) (list g$x$17370))) g$x$17360))))))) (case-lambda ((g$x$17356) ((case-lambda ((g$x$17358) (if g$x$17358 (begin '#f (append (car g$x$17358) (cdr g$x$17358))) '#f))) (g$f$17354 g$x$17356))))) (g$syntax-cdr$14668 g$x$17348)))) '#f))) ((case-lambda ((g$x$17372) (list g$x$17372))) (g$syntax-car$14664 g$x$17348)))) '#f))) (g$syntax-car$14664 g$x$17324)))) '#f))) (g$syntax-cdr$14668 g$x$17318)))) '#f))) ((case-lambda ((g$x$17374) '())) (g$syntax-car$14664 g$x$17318)))) '#f))) g$t$17256)))) g$t$17236)))) ((case-lambda ((g$x$17376) (if (g$syntax-pair?$14656 g$x$17376) (begin '#f ((case-lambda ((g$q$17378) (if g$q$17378 (begin '#f ((case-lambda ((g$r$17380) (if g$r$17380 (begin '#f (append g$q$17378 g$r$17380)) '#f))) ((case-lambda ((g$x$17382) (if (g$syntax-pair?$14656 g$x$17382) (begin '#f ((case-lambda ((g$q$17384) (if g$q$17384 (begin '#f ((case-lambda ((g$r$17386) (if g$r$17386 (begin '#f (append g$q$17384 g$r$17386)) '#f))) ((case-lambda ((g$x$17388) (if (g$syntax-pair?$14656 g$x$17388) (begin '#f ((case-lambda ((g$q$17390) (if g$q$17390 (begin '#f ((case-lambda ((g$r$17392) (if g$r$17392 (begin '#f (append g$q$17390 g$r$17392)) '#f))) ((letrec ((g$f$17394 (case-lambda ((g$x$17396) (if (g$syntax-pair?$14656 g$x$17396) ((case-lambda ((g$cars/f$17398) (if g$cars/f$17398 (begin '#f ((case-lambda ((g$cdrs/f$17400) (if g$cdrs/f$17400 (begin '#f (map cons g$cars/f$17398 g$cdrs/f$17400)) '#f))) (g$f$17394 (g$syntax-cdr$14668 g$x$17396)))) '#f))) ((case-lambda ((g$x$17402) (list g$x$17402))) (g$syntax-car$14664 g$x$17396))) (if (g$syntax-null?$14660 g$x$17396) (list (begin 'b* '())) '#f)))))) g$f$17394) (g$syntax-cdr$14668 g$x$17388)))) '#f))) ((case-lambda ((g$x$17404) (list g$x$17404))) (g$syntax-car$14664 g$x$17388)))) '#f))) (g$syntax-cdr$14668 g$x$17382)))) '#f))) ((case-lambda ((g$x$17406) (if (g$syntax-pair?$14656 g$x$17406) (begin '#f ((case-lambda ((g$q$17408) (if g$q$17408 (begin '#f ((case-lambda ((g$r$17410) (if g$r$17410 (begin '#f (append g$q$17408 g$r$17410)) '#f))) ((letrec ((g$f$17412 (case-lambda ((g$x$17414) (if (g$syntax-pair?$14656 g$x$17414) ((case-lambda ((g$cars/f$17416) (if g$cars/f$17416 (begin '#f ((case-lambda ((g$cdrs/f$17418) (if g$cdrs/f$17418 (begin '#f (map cons g$cars/f$17416 g$cdrs/f$17418)) '#f))) (g$f$17412 (g$syntax-cdr$14668 g$x$17414)))) '#f))) ((case-lambda ((g$x$17420) (list g$x$17420))) (g$syntax-car$14664 g$x$17414))) (if (g$syntax-null?$14660 g$x$17414) (list (begin 'fmls '())) '#f)))))) g$f$17412) (g$syntax-cdr$14668 g$x$17406)))) '#f))) ((case-lambda ((g$x$17422) (list g$x$17422))) (g$syntax-car$14664 g$x$17406)))) '#f))) (g$syntax-car$14664 g$x$17382)))) '#f))) (g$syntax-cdr$14668 g$x$17376)))) '#f))) ((case-lambda ((g$x$17424) '())) (g$syntax-car$14664 g$x$17376)))) '#f))) g$t$17236)))) g$stx$17234)))) (set! g$guard-macro$15143 (case-lambda ((g$x$17426) ((case-lambda ((g$gen-clauses$17428) (begin (set! g$gen-clauses$17428 (case-lambda ((g$con$17430 g$outerk$17431 g$clause*$17432) ((case-lambda ((g$f$17436 g$f*$17438) (begin (set! g$f$17436 (case-lambda ((g$x$17532 g$k$17533) ((case-lambda ((g$t$17536) ((case-lambda ((g$ls/false$17538) (if (if g$ls/false$17538 (begin '#f (apply (case-lambda ((g$e$17540 g$p$17541) '#t)) g$ls/false$17538)) '#f) (apply (case-lambda ((g$e$17544 g$p$17545) ((case-lambda ((g$t$17548) (list 'let (list (list g$t$17548 g$e$17544)) (list 'if g$t$17548 (list g$p$17545 g$t$17548) g$k$17533)))) (gensym)))) g$ls/false$17538) ((case-lambda ((g$t$17550) ((case-lambda ((g$ls/false$17552) (if (if g$ls/false$17552 (begin '#f (apply (case-lambda ((g$e$17554) '#t)) g$ls/false$17552)) '#f) (apply (case-lambda ((g$e$17556) ((case-lambda ((g$t$17558) (list 'let (list (list g$t$17558 g$e$17556)) (list 'if g$t$17558 g$t$17558 g$k$17533)))) (gensym)))) g$ls/false$17552) ((case-lambda ((g$t$17560) ((case-lambda ((g$ls/false$17562) (if (if g$ls/false$17562 (begin '#f (apply (case-lambda ((g$e$17564 g$v$17565 g$v*$17566) '#t)) g$ls/false$17562)) '#f) (apply (case-lambda ((g$e$17570 g$v$17571 g$v*$17572) (list 'if g$e$17570 (cons 'begin (cons g$v$17571 g$v*$17572)) g$k$17533))) g$ls/false$17562) ((case-lambda ((g$t$17576) ((case-lambda ((g$ls/false$17578) (if (if g$ls/false$17578 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$17578)) '#f) (apply (case-lambda (() (error 'expander '"invalid guard clause" (g$strip$14688 g$x$17532 '())))) g$ls/false$17578) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17576 '()))))) ((case-lambda ((g$x$17580) '())) g$t$17576)))) g$t$17560)))) ((case-lambda ((g$x$17582) (if (g$syntax-pair?$14656 g$x$17582) (begin '#f ((case-lambda ((g$q$17584) (if g$q$17584 (begin '#f ((case-lambda ((g$r$17586) (if g$r$17586 (begin '#f (append g$q$17584 g$r$17586)) '#f))) ((case-lambda ((g$x$17588) (if (g$syntax-pair?$14656 g$x$17588) (begin '#f ((case-lambda ((g$q$17590) (if g$q$17590 (begin '#f ((case-lambda ((g$r$17592) (if g$r$17592 (begin '#f (append g$q$17590 g$r$17592)) '#f))) ((letrec ((g$f$17594 (case-lambda ((g$x$17596) (if (g$syntax-pair?$14656 g$x$17596) ((case-lambda ((g$cars/f$17598) (if g$cars/f$17598 (begin '#f ((case-lambda ((g$cdrs/f$17600) (if g$cdrs/f$17600 (begin '#f (map cons g$cars/f$17598 g$cdrs/f$17600)) '#f))) (g$f$17594 (g$syntax-cdr$14668 g$x$17596)))) '#f))) ((case-lambda ((g$x$17602) (list g$x$17602))) (g$syntax-car$14664 g$x$17596))) (if (g$syntax-null?$14660 g$x$17596) (list (begin 'v* '())) '#f)))))) g$f$17594) (g$syntax-cdr$14668 g$x$17588)))) '#f))) ((case-lambda ((g$x$17604) (list g$x$17604))) (g$syntax-car$14664 g$x$17588)))) '#f))) (g$syntax-cdr$14668 g$x$17582)))) '#f))) ((case-lambda ((g$x$17606) (list g$x$17606))) (g$syntax-car$14664 g$x$17582)))) '#f))) g$t$17560)))) g$t$17550)))) ((case-lambda ((g$x$17608) (if (g$syntax-pair?$14656 g$x$17608) (begin '#f ((case-lambda ((g$q$17610) (if g$q$17610 (begin '#f ((case-lambda ((g$r$17612) (if g$r$17612 (begin '#f (append g$q$17610 g$r$17612)) '#f))) ((case-lambda ((g$x$17614) (if (equal? (g$stx->datum$14690 g$x$17614) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17608)))) '#f))) ((case-lambda ((g$x$17616) (list g$x$17616))) (g$syntax-car$14664 g$x$17608)))) '#f))) g$t$17550)))) g$t$17536)))) ((case-lambda ((g$x$17618) (if (g$syntax-pair?$14656 g$x$17618) (begin '#f ((case-lambda ((g$q$17620) (if g$q$17620 (begin '#f ((case-lambda ((g$r$17622) (if g$r$17622 (begin '#f (append g$q$17620 g$r$17622)) '#f))) ((case-lambda ((g$x$17624) (if (g$syntax-pair?$14656 g$x$17624) (begin '#f ((case-lambda ((g$q$17626) (if g$q$17626 (begin '#f ((case-lambda ((g$r$17628) (if g$r$17628 (begin '#f (append g$q$17626 g$r$17628)) '#f))) ((case-lambda ((g$x$17630) (if (g$syntax-pair?$14656 g$x$17630) (begin '#f ((case-lambda ((g$q$17632) (if g$q$17632 (begin '#f ((case-lambda ((g$r$17634) (if g$r$17634 (begin '#f (append g$q$17632 g$r$17634)) '#f))) ((case-lambda ((g$x$17636) (if (equal? (g$stx->datum$14690 g$x$17636) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17630)))) '#f))) ((case-lambda ((g$x$17638) (list g$x$17638))) (g$syntax-car$14664 g$x$17630)))) '#f))) (g$syntax-cdr$14668 g$x$17624)))) '#f))) ((case-lambda ((g$x$17640) (if (g$id?$14670 g$x$17640) (if (g$free-id=?$14678 g$x$17640 (g$scheme-stx$15099 '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$17624)))) '#f))) (g$syntax-cdr$14668 g$x$17618)))) '#f))) ((case-lambda ((g$x$17642) (list g$x$17642))) (g$syntax-car$14664 g$x$17618)))) '#f))) g$t$17536)))) g$x$17532)))) (set! g$f*$17438 (case-lambda ((g$x*$17440) ((case-lambda ((g$t$17442) ((case-lambda ((g$ls/false$17444) (if (if g$ls/false$17444 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$17444)) '#f) (apply (case-lambda (() ((case-lambda ((g$g$17446) (values (list g$g$17446 (list 'lambda '() (list 'raise g$con$17430))) g$g$17446))) (gensym)))) g$ls/false$17444) ((case-lambda ((g$t$17448) ((case-lambda ((g$ls/false$17450) (if (if g$ls/false$17450 (begin '#f (apply (case-lambda ((g$e$17452 g$e*$17453) '#t)) g$ls/false$17450)) '#f) (apply (case-lambda ((g$e$17456 g$e*$17457) (values (cons 'begin (cons g$e$17456 g$e*$17457)) '#f))) g$ls/false$17450) ((case-lambda ((g$t$17460) ((case-lambda ((g$ls/false$17462) (if (if g$ls/false$17462 (begin '#f (apply (case-lambda ((g$cls$17464 g$cls*$17465) '#t)) g$ls/false$17462)) '#f) (apply (case-lambda ((g$cls$17468 g$cls*$17469) (call-with-values (case-lambda (() (g$f*$17438 g$cls*$17469))) (case-lambda ((g$e$17472 g$g$17473) (values (g$f$17436 g$cls$17468 g$e$17472) g$g$17473)))))) g$ls/false$17462) ((case-lambda ((g$t$17476) ((case-lambda ((g$ls/false$17478) (if (if g$ls/false$17478 (begin '#f (apply (case-lambda ((g$others$17480) '#t)) g$ls/false$17478)) '#f) (apply (case-lambda ((g$others$17482) (error 'expander '"invalid guard clause" (g$strip$14688 g$others$17482 '())))) g$ls/false$17478) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17476 '()))))) ((case-lambda ((g$x$17484) (list g$x$17484))) g$t$17476)))) g$t$17460)))) ((case-lambda ((g$x$17486) (if (g$syntax-pair?$14656 g$x$17486) (begin '#f ((case-lambda ((g$q$17488) (if g$q$17488 (begin '#f ((case-lambda ((g$r$17490) (if g$r$17490 (begin '#f (append g$q$17488 g$r$17490)) '#f))) ((case-lambda ((g$x$17492) (list g$x$17492))) (g$syntax-cdr$14668 g$x$17486)))) '#f))) ((case-lambda ((g$x$17494) (list g$x$17494))) (g$syntax-car$14664 g$x$17486)))) '#f))) g$t$17460)))) g$t$17448)))) ((case-lambda ((g$x$17496) (if (g$syntax-pair?$14656 g$x$17496) (begin '#f ((case-lambda ((g$q$17498) (if g$q$17498 (begin '#f ((case-lambda ((g$r$17500) (if g$r$17500 (begin '#f (append g$q$17498 g$r$17500)) '#f))) ((case-lambda ((g$x$17502) (if (equal? (g$stx->datum$14690 g$x$17502) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17496)))) '#f))) ((case-lambda ((g$x$17504) (if (g$syntax-pair?$14656 g$x$17504) (begin '#f ((case-lambda ((g$q$17506) (if g$q$17506 (begin '#f ((case-lambda ((g$r$17508) (if g$r$17508 (begin '#f (append g$q$17506 g$r$17508)) '#f))) ((case-lambda ((g$x$17510) (if (g$syntax-pair?$14656 g$x$17510) (begin '#f ((case-lambda ((g$q$17512) (if g$q$17512 (begin '#f ((case-lambda ((g$r$17514) (if g$r$17514 (begin '#f (append g$q$17512 g$r$17514)) '#f))) ((letrec ((g$f$17516 (case-lambda ((g$x$17518) (if (g$syntax-pair?$14656 g$x$17518) ((case-lambda ((g$cars/f$17520) (if g$cars/f$17520 (begin '#f ((case-lambda ((g$cdrs/f$17522) (if g$cdrs/f$17522 (begin '#f (map cons g$cars/f$17520 g$cdrs/f$17522)) '#f))) (g$f$17516 (g$syntax-cdr$14668 g$x$17518)))) '#f))) ((case-lambda ((g$x$17524) (list g$x$17524))) (g$syntax-car$14664 g$x$17518))) (if (g$syntax-null?$14660 g$x$17518) (list (begin 'e* '())) '#f)))))) g$f$17516) (g$syntax-cdr$14668 g$x$17510)))) '#f))) ((case-lambda ((g$x$17526) (list g$x$17526))) (g$syntax-car$14664 g$x$17510)))) '#f))) (g$syntax-cdr$14668 g$x$17504)))) '#f))) ((case-lambda ((g$x$17528) (if (g$id?$14670 g$x$17528) (if (g$free-id=?$14678 g$x$17528 (g$scheme-stx$15099 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$17504)))) '#f))) (g$syntax-car$14664 g$x$17496)))) '#f))) g$t$17448)))) g$t$17442)))) ((case-lambda ((g$x$17530) (if (equal? (g$stx->datum$14690 g$x$17530) '()) (begin '#f '()) '#f))) g$t$17442)))) g$x*$17440)))) (call-with-values (case-lambda (() (g$f*$17438 g$clause*$17432))) (case-lambda ((g$code$17644 g$raisek$17645) (if g$raisek$17645 (list (list 'call/cc (list 'lambda (list g$raisek$17645) (list g$outerk$17431 (list 'lambda '() g$code$17644))))) (list g$outerk$17431 (list 'lambda '() g$code$17644))))))))) '#f '#f)))) ((case-lambda ((g$t$17648) ((case-lambda ((g$ls/false$17650) (if (if g$ls/false$17650 (begin '#f (apply (case-lambda ((g$con$17652 g$clause*$17653 g$b$17654 g$b*$17655) (g$id?$14670 g$con$17652))) g$ls/false$17650)) '#f) (apply (case-lambda ((g$con$17660 g$clause*$17661 g$b$17662 g$b*$17663) ((case-lambda ((g$outerk$17668) (g$bless$15133 (list (list 'call/cc (list 'lambda (list g$outerk$17668) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$con$17660) (g$gen-clauses$17428 g$con$17660 g$outerk$17668 g$clause*$17661)) (cons 'lambda (cons '() (cons '#f (cons g$b$17662 g$b*$17663)))))))))))) (gensym)))) g$ls/false$17650) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17648 '()))))) ((case-lambda ((g$x$17670) (if (g$syntax-pair?$14656 g$x$17670) (begin '#f ((case-lambda ((g$q$17672) (if g$q$17672 (begin '#f ((case-lambda ((g$r$17674) (if g$r$17674 (begin '#f (append g$q$17672 g$r$17674)) '#f))) ((case-lambda ((g$x$17676) (if (g$syntax-pair?$14656 g$x$17676) (begin '#f ((case-lambda ((g$q$17678) (if g$q$17678 (begin '#f ((case-lambda ((g$r$17680) (if g$r$17680 (begin '#f (append g$q$17678 g$r$17680)) '#f))) ((case-lambda ((g$x$17682) (if (g$syntax-pair?$14656 g$x$17682) (begin '#f ((case-lambda ((g$q$17684) (if g$q$17684 (begin '#f ((case-lambda ((g$r$17686) (if g$r$17686 (begin '#f (append g$q$17684 g$r$17686)) '#f))) ((letrec ((g$f$17688 (case-lambda ((g$x$17690) (if (g$syntax-pair?$14656 g$x$17690) ((case-lambda ((g$cars/f$17692) (if g$cars/f$17692 (begin '#f ((case-lambda ((g$cdrs/f$17694) (if g$cdrs/f$17694 (begin '#f (map cons g$cars/f$17692 g$cdrs/f$17694)) '#f))) (g$f$17688 (g$syntax-cdr$14668 g$x$17690)))) '#f))) ((case-lambda ((g$x$17696) (list g$x$17696))) (g$syntax-car$14664 g$x$17690))) (if (g$syntax-null?$14660 g$x$17690) (list (begin 'b* '())) '#f)))))) g$f$17688) (g$syntax-cdr$14668 g$x$17682)))) '#f))) ((case-lambda ((g$x$17698) (list g$x$17698))) (g$syntax-car$14664 g$x$17682)))) '#f))) (g$syntax-cdr$14668 g$x$17676)))) '#f))) ((case-lambda ((g$x$17700) (if (g$syntax-pair?$14656 g$x$17700) (begin '#f ((case-lambda ((g$q$17702) (if g$q$17702 (begin '#f ((case-lambda ((g$r$17704) (if g$r$17704 (begin '#f (append g$q$17702 g$r$17704)) '#f))) ((letrec ((g$f$17706 (case-lambda ((g$x$17708) (if (g$syntax-pair?$14656 g$x$17708) ((case-lambda ((g$cars/f$17710) (if g$cars/f$17710 (begin '#f ((case-lambda ((g$cdrs/f$17712) (if g$cdrs/f$17712 (begin '#f (map cons g$cars/f$17710 g$cdrs/f$17712)) '#f))) (g$f$17706 (g$syntax-cdr$14668 g$x$17708)))) '#f))) ((case-lambda ((g$x$17714) (list g$x$17714))) (g$syntax-car$14664 g$x$17708))) (if (g$syntax-null?$14660 g$x$17708) (list (begin 'clause* '())) '#f)))))) g$f$17706) (g$syntax-cdr$14668 g$x$17700)))) '#f))) ((case-lambda ((g$x$17716) (list g$x$17716))) (g$syntax-car$14664 g$x$17700)))) '#f))) (g$syntax-car$14664 g$x$17676)))) '#f))) (g$syntax-cdr$14668 g$x$17670)))) '#f))) ((case-lambda ((g$x$17718) '())) (g$syntax-car$14664 g$x$17670)))) '#f))) g$t$17648)))) g$x$17426)))) '#f)))) (set! g$define-enumeration-macro$15145 (case-lambda ((g$stx$17720) ((case-lambda ((g$set?$17722) (begin (set! g$set?$17722 (case-lambda ((g$x$17724) ((case-lambda ((g$t$17726) (if g$t$17726 g$t$17726 (begin '#f (if (not (memq (car g$x$17724) (cdr g$x$17724))) (begin '#f (g$set?$17722 (cdr g$x$17724))) '#f))))) (null? g$x$17724))))) ((case-lambda ((g$t$17728) ((case-lambda ((g$ls/false$17730) (if (if g$ls/false$17730 (begin '#f (apply (case-lambda ((g$name$17732 g$id*$17733 g$maker$17734) (if (g$id?$14670 g$name$17732) (if (g$id?$14670 g$maker$17734) (begin '#f (for-all g$id?$14670 g$id*$17733)) '#f) '#f))) g$ls/false$17730)) '#f) (apply (case-lambda ((g$name$17738 g$id*$17739 g$maker$17740) ((case-lambda ((g$name*$17744 g$mk$17745) (begin (if (g$set?$17722 g$name*$17744) (void) (error 'expander '"duplicate names in enumeration set" (g$strip$14688 g$stx$17720 '()))) (g$bless$15133 (list 'begin (list 'define g$mk$17745 (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$name*$17744)))) (list 'define-syntax g$name$17738 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$name*$17744)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$name*$17744))))))) (list 'define-syntax g$maker$17740 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$name*$17744)) '((syntax-error n "not a member of set"))))) '((syntax (n* ...))))) (list 'syntax (cons g$mk$17745 '('(n* ...)))))))))))))) (g$syntax->datum$15328 g$id*$17739) (gensym)))) g$ls/false$17730) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17728 '()))))) ((case-lambda ((g$x$17748) (if (g$syntax-pair?$14656 g$x$17748) (begin '#f ((case-lambda ((g$q$17750) (if g$q$17750 (begin '#f ((case-lambda ((g$r$17752) (if g$r$17752 (begin '#f (append g$q$17750 g$r$17752)) '#f))) ((case-lambda ((g$x$17754) (if (g$syntax-pair?$14656 g$x$17754) (begin '#f ((case-lambda ((g$q$17756) (if g$q$17756 (begin '#f ((case-lambda ((g$r$17758) (if g$r$17758 (begin '#f (append g$q$17756 g$r$17758)) '#f))) ((case-lambda ((g$x$17760) (if (g$syntax-pair?$14656 g$x$17760) (begin '#f ((case-lambda ((g$q$17762) (if g$q$17762 (begin '#f ((case-lambda ((g$r$17764) (if g$r$17764 (begin '#f (append g$q$17762 g$r$17764)) '#f))) ((case-lambda ((g$x$17766) (if (g$syntax-pair?$14656 g$x$17766) (begin '#f ((case-lambda ((g$q$17768) (if g$q$17768 (begin '#f ((case-lambda ((g$r$17770) (if g$r$17770 (begin '#f (append g$q$17768 g$r$17770)) '#f))) ((case-lambda ((g$x$17772) (if (equal? (g$stx->datum$14690 g$x$17772) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17766)))) '#f))) ((case-lambda ((g$x$17774) (list g$x$17774))) (g$syntax-car$14664 g$x$17766)))) '#f))) (g$syntax-cdr$14668 g$x$17760)))) '#f))) ((letrec ((g$f$17776 (case-lambda ((g$x$17778) (if (g$syntax-pair?$14656 g$x$17778) ((case-lambda ((g$cars/f$17780) (if g$cars/f$17780 (begin '#f ((case-lambda ((g$cdrs/f$17782) (if g$cdrs/f$17782 (begin '#f (map cons g$cars/f$17780 g$cdrs/f$17782)) '#f))) (g$f$17776 (g$syntax-cdr$14668 g$x$17778)))) '#f))) ((case-lambda ((g$x$17784) (list g$x$17784))) (g$syntax-car$14664 g$x$17778))) (if (g$syntax-null?$14660 g$x$17778) (list (begin 'id* '())) '#f)))))) g$f$17776) (g$syntax-car$14664 g$x$17760)))) '#f))) (g$syntax-cdr$14668 g$x$17754)))) '#f))) ((case-lambda ((g$x$17786) (list g$x$17786))) (g$syntax-car$14664 g$x$17754)))) '#f))) (g$syntax-cdr$14668 g$x$17748)))) '#f))) ((case-lambda ((g$x$17788) '())) (g$syntax-car$14664 g$x$17748)))) '#f))) g$t$17728)))) g$stx$17720)))) '#f)))) (set! g$time-macro$15147 (case-lambda ((g$stx$17790) ((case-lambda ((g$t$17792) ((case-lambda ((g$ls/false$17794) (if (if g$ls/false$17794 (begin '#f (apply (case-lambda ((g$expr$17796) '#t)) g$ls/false$17794)) '#f) (apply (case-lambda ((g$expr$17798) (g$bless$15133 (list 'time-it (list 'quote g$expr$17798) (list 'lambda '() g$expr$17798))))) g$ls/false$17794) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17792 '()))))) ((case-lambda ((g$x$17800) (if (g$syntax-pair?$14656 g$x$17800) (begin '#f ((case-lambda ((g$q$17802) (if g$q$17802 (begin '#f ((case-lambda ((g$r$17804) (if g$r$17804 (begin '#f (append g$q$17802 g$r$17804)) '#f))) ((case-lambda ((g$x$17806) (if (g$syntax-pair?$14656 g$x$17806) (begin '#f ((case-lambda ((g$q$17808) (if g$q$17808 (begin '#f ((case-lambda ((g$r$17810) (if g$r$17810 (begin '#f (append g$q$17808 g$r$17810)) '#f))) ((case-lambda ((g$x$17812) (if (equal? (g$stx->datum$14690 g$x$17812) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17806)))) '#f))) ((case-lambda ((g$x$17814) (list g$x$17814))) (g$syntax-car$14664 g$x$17806)))) '#f))) (g$syntax-cdr$14668 g$x$17800)))) '#f))) ((case-lambda ((g$x$17816) '())) (g$syntax-car$14664 g$x$17800)))) '#f))) g$t$17792)))) g$stx$17790)))) (set! g$delay-macro$15149 (case-lambda ((g$stx$17818) ((case-lambda ((g$t$17820) ((case-lambda ((g$ls/false$17822) (if (if g$ls/false$17822 (begin '#f (apply (case-lambda ((g$expr$17824) '#t)) g$ls/false$17822)) '#f) (apply (case-lambda ((g$expr$17826) (g$bless$15133 (list 'make-promise (list 'lambda '() g$expr$17826))))) g$ls/false$17822) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17820 '()))))) ((case-lambda ((g$x$17828) (if (g$syntax-pair?$14656 g$x$17828) (begin '#f ((case-lambda ((g$q$17830) (if g$q$17830 (begin '#f ((case-lambda ((g$r$17832) (if g$r$17832 (begin '#f (append g$q$17830 g$r$17832)) '#f))) ((case-lambda ((g$x$17834) (if (g$syntax-pair?$14656 g$x$17834) (begin '#f ((case-lambda ((g$q$17836) (if g$q$17836 (begin '#f ((case-lambda ((g$r$17838) (if g$r$17838 (begin '#f (append g$q$17836 g$r$17838)) '#f))) ((case-lambda ((g$x$17840) (if (equal? (g$stx->datum$14690 g$x$17840) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17834)))) '#f))) ((case-lambda ((g$x$17842) (list g$x$17842))) (g$syntax-car$14664 g$x$17834)))) '#f))) (g$syntax-cdr$14668 g$x$17828)))) '#f))) ((case-lambda ((g$x$17844) '())) (g$syntax-car$14664 g$x$17828)))) '#f))) g$t$17820)))) g$stx$17818)))) (set! g$assert-macro$15151 (case-lambda ((g$stx$17846) ((case-lambda ((g$t$17848) ((case-lambda ((g$ls/false$17850) (if (if g$ls/false$17850 (begin '#f (apply (case-lambda ((g$expr$17852) '#t)) g$ls/false$17850)) '#f) (apply (case-lambda ((g$expr$17854) (g$bless$15133 (list 'unless g$expr$17854 (list 'error ''assert '"assertion failed" (list 'quote g$expr$17854)))))) g$ls/false$17850) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17848 '()))))) ((case-lambda ((g$x$17856) (if (g$syntax-pair?$14656 g$x$17856) (begin '#f ((case-lambda ((g$q$17858) (if g$q$17858 (begin '#f ((case-lambda ((g$r$17860) (if g$r$17860 (begin '#f (append g$q$17858 g$r$17860)) '#f))) ((case-lambda ((g$x$17862) (if (g$syntax-pair?$14656 g$x$17862) (begin '#f ((case-lambda ((g$q$17864) (if g$q$17864 (begin '#f ((case-lambda ((g$r$17866) (if g$r$17866 (begin '#f (append g$q$17864 g$r$17866)) '#f))) ((case-lambda ((g$x$17868) (if (equal? (g$stx->datum$14690 g$x$17868) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17862)))) '#f))) ((case-lambda ((g$x$17870) (list g$x$17870))) (g$syntax-car$14664 g$x$17862)))) '#f))) (g$syntax-cdr$14668 g$x$17856)))) '#f))) ((case-lambda ((g$x$17872) '())) (g$syntax-car$14664 g$x$17856)))) '#f))) g$t$17848)))) g$stx$17846)))) (set! g$endianness-macro$15153 (case-lambda ((g$stx$17874) ((case-lambda ((g$t$17876) ((case-lambda ((g$ls/false$17878) (if (if g$ls/false$17878 (begin '#f (apply (case-lambda ((g$e$17880) '#t)) g$ls/false$17878)) '#f) (apply (case-lambda ((g$e$17882) ((case-lambda ((g$t$17884) (if (memv g$t$17884 '(little)) (g$bless$15133 ''little) (if (memv g$t$17884 '(big)) (g$bless$15133 ''big) (error 'expander '"endianness must be big or little" (g$strip$14688 g$stx$17874 '())))))) (g$syntax->datum$15328 g$e$17882)))) g$ls/false$17878) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17876 '()))))) ((case-lambda ((g$x$17885) (if (g$syntax-pair?$14656 g$x$17885) (begin '#f ((case-lambda ((g$q$17887) (if g$q$17887 (begin '#f ((case-lambda ((g$r$17889) (if g$r$17889 (begin '#f (append g$q$17887 g$r$17889)) '#f))) ((case-lambda ((g$x$17891) (if (g$syntax-pair?$14656 g$x$17891) (begin '#f ((case-lambda ((g$q$17893) (if g$q$17893 (begin '#f ((case-lambda ((g$r$17895) (if g$r$17895 (begin '#f (append g$q$17893 g$r$17895)) '#f))) ((case-lambda ((g$x$17897) (if (equal? (g$stx->datum$14690 g$x$17897) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17891)))) '#f))) ((case-lambda ((g$x$17899) (list g$x$17899))) (g$syntax-car$14664 g$x$17891)))) '#f))) (g$syntax-cdr$14668 g$x$17885)))) '#f))) ((case-lambda ((g$x$17901) '())) (g$syntax-car$14664 g$x$17885)))) '#f))) g$t$17876)))) g$stx$17874)))) (set! g$identifier-syntax-macro$15155 (case-lambda ((g$stx$17903) ((case-lambda ((g$t$17905) ((case-lambda ((g$ls/false$17907) (if (if g$ls/false$17907 (begin '#f (apply (case-lambda ((g$expr$17909) '#t)) g$ls/false$17907)) '#f) (apply (case-lambda ((g$expr$17911) (g$bless$15133 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$expr$17911)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$expr$17911) '((syntax (e* ...))))))))))) g$ls/false$17907) ((case-lambda ((g$t$17913) ((case-lambda ((g$ls/false$17915) (if (if g$ls/false$17915 (begin '#f (apply (case-lambda ((g$id1$17917 g$expr1$17918 g$id2$17919 g$expr2$17920 g$expr3$17921) (if (g$id?$14670 g$id1$17917) (if (g$id?$14670 g$id2$17919) (begin '#f (g$id?$14670 g$expr2$17920)) '#f) '#f))) g$ls/false$17915)) '#f) (apply (case-lambda ((g$id1$17927 g$expr1$17928 g$id2$17929 g$expr2$17930 g$expr3$17931) (g$bless$15133 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$expr1$17928)) (list (list 'set! 'id g$expr2$17930) (list 'syntax g$expr3$17931)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons g$expr1$17928 '(e* ...)))))))))) g$ls/false$17915) (error 'expander '"invalid syntax" (g$strip$14688 g$t$17913 '()))))) ((case-lambda ((g$x$17937) (if (g$syntax-pair?$14656 g$x$17937) (begin '#f ((case-lambda ((g$q$17939) (if g$q$17939 (begin '#f ((case-lambda ((g$r$17941) (if g$r$17941 (begin '#f (append g$q$17939 g$r$17941)) '#f))) ((case-lambda ((g$x$17943) (if (g$syntax-pair?$14656 g$x$17943) (begin '#f ((case-lambda ((g$q$17945) (if g$q$17945 (begin '#f ((case-lambda ((g$r$17947) (if g$r$17947 (begin '#f (append g$q$17945 g$r$17947)) '#f))) ((case-lambda ((g$x$17949) (if (g$syntax-pair?$14656 g$x$17949) (begin '#f ((case-lambda ((g$q$17951) (if g$q$17951 (begin '#f ((case-lambda ((g$r$17953) (if g$r$17953 (begin '#f (append g$q$17951 g$r$17953)) '#f))) ((case-lambda ((g$x$17955) (if (equal? (g$stx->datum$14690 g$x$17955) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17949)))) '#f))) ((case-lambda ((g$x$17957) (if (g$syntax-pair?$14656 g$x$17957) (begin '#f ((case-lambda ((g$q$17959) (if g$q$17959 (begin '#f ((case-lambda ((g$r$17961) (if g$r$17961 (begin '#f (append g$q$17959 g$r$17961)) '#f))) ((case-lambda ((g$x$17963) (if (g$syntax-pair?$14656 g$x$17963) (begin '#f ((case-lambda ((g$q$17965) (if g$q$17965 (begin '#f ((case-lambda ((g$r$17967) (if g$r$17967 (begin '#f (append g$q$17965 g$r$17967)) '#f))) ((case-lambda ((g$x$17969) (if (equal? (g$stx->datum$14690 g$x$17969) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17963)))) '#f))) ((case-lambda ((g$x$17971) (list g$x$17971))) (g$syntax-car$14664 g$x$17963)))) '#f))) (g$syntax-cdr$14668 g$x$17957)))) '#f))) ((case-lambda ((g$x$17973) (if (g$syntax-pair?$14656 g$x$17973) (begin '#f ((case-lambda ((g$q$17975) (if g$q$17975 (begin '#f ((case-lambda ((g$r$17977) (if g$r$17977 (begin '#f (append g$q$17975 g$r$17977)) '#f))) ((case-lambda ((g$x$17979) (if (g$syntax-pair?$14656 g$x$17979) (begin '#f ((case-lambda ((g$q$17981) (if g$q$17981 (begin '#f ((case-lambda ((g$r$17983) (if g$r$17983 (begin '#f (append g$q$17981 g$r$17983)) '#f))) ((case-lambda ((g$x$17985) (if (g$syntax-pair?$14656 g$x$17985) (begin '#f ((case-lambda ((g$q$17987) (if g$q$17987 (begin '#f ((case-lambda ((g$r$17989) (if g$r$17989 (begin '#f (append g$q$17987 g$r$17989)) '#f))) ((case-lambda ((g$x$17991) (if (equal? (g$stx->datum$14690 g$x$17991) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$17985)))) '#f))) ((case-lambda ((g$x$17993) (list g$x$17993))) (g$syntax-car$14664 g$x$17985)))) '#f))) (g$syntax-cdr$14668 g$x$17979)))) '#f))) ((case-lambda ((g$x$17995) (list g$x$17995))) (g$syntax-car$14664 g$x$17979)))) '#f))) (g$syntax-cdr$14668 g$x$17973)))) '#f))) ((case-lambda ((g$x$17997) (if (g$id?$14670 g$x$17997) (if (g$free-id=?$14678 g$x$17997 (g$scheme-stx$15099 'set!)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$17973)))) '#f))) (g$syntax-car$14664 g$x$17957)))) '#f))) (g$syntax-car$14664 g$x$17949)))) '#f))) (g$syntax-cdr$14668 g$x$17943)))) '#f))) ((case-lambda ((g$x$17999) (if (g$syntax-pair?$14656 g$x$17999) (begin '#f ((case-lambda ((g$q$18001) (if g$q$18001 (begin '#f ((case-lambda ((g$r$18003) (if g$r$18003 (begin '#f (append g$q$18001 g$r$18003)) '#f))) ((case-lambda ((g$x$18005) (if (g$syntax-pair?$14656 g$x$18005) (begin '#f ((case-lambda ((g$q$18007) (if g$q$18007 (begin '#f ((case-lambda ((g$r$18009) (if g$r$18009 (begin '#f (append g$q$18007 g$r$18009)) '#f))) ((case-lambda ((g$x$18011) (if (equal? (g$stx->datum$14690 g$x$18011) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18005)))) '#f))) ((case-lambda ((g$x$18013) (list g$x$18013))) (g$syntax-car$14664 g$x$18005)))) '#f))) (g$syntax-cdr$14668 g$x$17999)))) '#f))) ((case-lambda ((g$x$18015) (list g$x$18015))) (g$syntax-car$14664 g$x$17999)))) '#f))) (g$syntax-car$14664 g$x$17943)))) '#f))) (g$syntax-cdr$14668 g$x$17937)))) '#f))) ((case-lambda ((g$x$18017) '())) (g$syntax-car$14664 g$x$17937)))) '#f))) g$t$17913)))) g$t$17905)))) ((case-lambda ((g$x$18019) (if (g$syntax-pair?$14656 g$x$18019) (begin '#f ((case-lambda ((g$q$18021) (if g$q$18021 (begin '#f ((case-lambda ((g$r$18023) (if g$r$18023 (begin '#f (append g$q$18021 g$r$18023)) '#f))) ((case-lambda ((g$x$18025) (if (g$syntax-pair?$14656 g$x$18025) (begin '#f ((case-lambda ((g$q$18027) (if g$q$18027 (begin '#f ((case-lambda ((g$r$18029) (if g$r$18029 (begin '#f (append g$q$18027 g$r$18029)) '#f))) ((case-lambda ((g$x$18031) (if (equal? (g$stx->datum$14690 g$x$18031) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18025)))) '#f))) ((case-lambda ((g$x$18033) (list g$x$18033))) (g$syntax-car$14664 g$x$18025)))) '#f))) (g$syntax-cdr$14668 g$x$18019)))) '#f))) ((case-lambda ((g$x$18035) '())) (g$syntax-car$14664 g$x$18019)))) '#f))) g$t$17905)))) g$stx$17903)))) (set! g$do-macro$15157 (case-lambda ((g$stx$18037) ((case-lambda ((g$bind$18039) (begin (set! g$bind$18039 (case-lambda ((g$x$18041) ((case-lambda ((g$t$18043) ((case-lambda ((g$ls/false$18045) (if (if g$ls/false$18045 (begin '#f (apply (case-lambda ((g$x$18047 g$init$18048) '#t)) g$ls/false$18045)) '#f) (apply (case-lambda ((g$x$18051 g$init$18052) (list g$x$18051 g$init$18052 g$x$18051))) g$ls/false$18045) ((case-lambda ((g$t$18055) ((case-lambda ((g$ls/false$18057) (if (if g$ls/false$18057 (begin '#f (apply (case-lambda ((g$x$18059 g$init$18060 g$step$18061) '#t)) g$ls/false$18057)) '#f) (apply (case-lambda ((g$x$18065 g$init$18066 g$step$18067) (list g$x$18065 g$init$18066 g$step$18067))) g$ls/false$18057) ((case-lambda ((g$t$18071) ((case-lambda ((g$ls/false$18073) (if (if g$ls/false$18073 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$18073)) '#f) (apply (case-lambda (() (error 'expander '"invalid binding" (g$strip$14688 g$stx$18037 '())))) g$ls/false$18073) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18071 '()))))) ((case-lambda ((g$x$18075) '())) g$t$18071)))) g$t$18055)))) ((case-lambda ((g$x$18077) (if (g$syntax-pair?$14656 g$x$18077) (begin '#f ((case-lambda ((g$q$18079) (if g$q$18079 (begin '#f ((case-lambda ((g$r$18081) (if g$r$18081 (begin '#f (append g$q$18079 g$r$18081)) '#f))) ((case-lambda ((g$x$18083) (if (g$syntax-pair?$14656 g$x$18083) (begin '#f ((case-lambda ((g$q$18085) (if g$q$18085 (begin '#f ((case-lambda ((g$r$18087) (if g$r$18087 (begin '#f (append g$q$18085 g$r$18087)) '#f))) ((case-lambda ((g$x$18089) (if (g$syntax-pair?$14656 g$x$18089) (begin '#f ((case-lambda ((g$q$18091) (if g$q$18091 (begin '#f ((case-lambda ((g$r$18093) (if g$r$18093 (begin '#f (append g$q$18091 g$r$18093)) '#f))) ((case-lambda ((g$x$18095) (if (equal? (g$stx->datum$14690 g$x$18095) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18089)))) '#f))) ((case-lambda ((g$x$18097) (list g$x$18097))) (g$syntax-car$14664 g$x$18089)))) '#f))) (g$syntax-cdr$14668 g$x$18083)))) '#f))) ((case-lambda ((g$x$18099) (list g$x$18099))) (g$syntax-car$14664 g$x$18083)))) '#f))) (g$syntax-cdr$14668 g$x$18077)))) '#f))) ((case-lambda ((g$x$18101) (list g$x$18101))) (g$syntax-car$14664 g$x$18077)))) '#f))) g$t$18055)))) g$t$18043)))) ((case-lambda ((g$x$18103) (if (g$syntax-pair?$14656 g$x$18103) (begin '#f ((case-lambda ((g$q$18105) (if g$q$18105 (begin '#f ((case-lambda ((g$r$18107) (if g$r$18107 (begin '#f (append g$q$18105 g$r$18107)) '#f))) ((case-lambda ((g$x$18109) (if (g$syntax-pair?$14656 g$x$18109) (begin '#f ((case-lambda ((g$q$18111) (if g$q$18111 (begin '#f ((case-lambda ((g$r$18113) (if g$r$18113 (begin '#f (append g$q$18111 g$r$18113)) '#f))) ((case-lambda ((g$x$18115) (if (equal? (g$stx->datum$14690 g$x$18115) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18109)))) '#f))) ((case-lambda ((g$x$18117) (list g$x$18117))) (g$syntax-car$14664 g$x$18109)))) '#f))) (g$syntax-cdr$14668 g$x$18103)))) '#f))) ((case-lambda ((g$x$18119) (list g$x$18119))) (g$syntax-car$14664 g$x$18103)))) '#f))) g$t$18043)))) g$x$18041)))) ((case-lambda ((g$t$18121) ((case-lambda ((g$ls/false$18123) (if (if g$ls/false$18123 (begin '#f (apply (case-lambda ((g$binding*$18125 g$test$18126 g$expr*$18127 g$command*$18128) '#t)) g$ls/false$18123)) '#f) (apply (case-lambda ((g$binding*$18133 g$test$18134 g$expr*$18135 g$command*$18136) ((case-lambda ((g$t$18141) ((case-lambda ((g$ls/false$18143) (if (if g$ls/false$18143 (begin '#f (apply (case-lambda ((g$x*$18145 g$init*$18146 g$step*$18147) '#t)) g$ls/false$18143)) '#f) (apply (case-lambda ((g$x*$18151 g$init*$18152 g$step*$18153) (if (g$valid-bound-ids?$14680 g$x*$18151) (g$bless$15133 (list 'letrec (list (list 'loop (list 'lambda g$x*$18151 (list 'if g$test$18134 (cons 'begin (cons '(if #f #f) g$expr*$18135)) (cons 'begin (append g$command*$18136 (list (cons 'loop g$step*$18153)))))))) (cons 'loop g$init*$18152))) (error 'expander '"invalid bindings" (g$strip$14688 g$stx$18037 '()))))) g$ls/false$18143) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18141 '()))))) ((letrec ((g$f$18157 (case-lambda ((g$x$18159) (if (g$syntax-pair?$14656 g$x$18159) ((case-lambda ((g$cars/f$18161) (if g$cars/f$18161 (begin '#f ((case-lambda ((g$cdrs/f$18163) (if g$cdrs/f$18163 (begin '#f (map cons g$cars/f$18161 g$cdrs/f$18163)) '#f))) (g$f$18157 (g$syntax-cdr$14668 g$x$18159)))) '#f))) ((case-lambda ((g$x$18165) (if (g$syntax-pair?$14656 g$x$18165) (begin '#f ((case-lambda ((g$q$18167) (if g$q$18167 (begin '#f ((case-lambda ((g$r$18169) (if g$r$18169 (begin '#f (append g$q$18167 g$r$18169)) '#f))) ((case-lambda ((g$x$18171) (if (g$syntax-pair?$14656 g$x$18171) (begin '#f ((case-lambda ((g$q$18173) (if g$q$18173 (begin '#f ((case-lambda ((g$r$18175) (if g$r$18175 (begin '#f (append g$q$18173 g$r$18175)) '#f))) ((case-lambda ((g$x$18177) (if (g$syntax-pair?$14656 g$x$18177) (begin '#f ((case-lambda ((g$q$18179) (if g$q$18179 (begin '#f ((case-lambda ((g$r$18181) (if g$r$18181 (begin '#f (append g$q$18179 g$r$18181)) '#f))) ((case-lambda ((g$x$18183) (if (equal? (g$stx->datum$14690 g$x$18183) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18177)))) '#f))) ((case-lambda ((g$x$18185) (list g$x$18185))) (g$syntax-car$14664 g$x$18177)))) '#f))) (g$syntax-cdr$14668 g$x$18171)))) '#f))) ((case-lambda ((g$x$18187) (list g$x$18187))) (g$syntax-car$14664 g$x$18171)))) '#f))) (g$syntax-cdr$14668 g$x$18165)))) '#f))) ((case-lambda ((g$x$18189) (list g$x$18189))) (g$syntax-car$14664 g$x$18165)))) '#f))) (g$syntax-car$14664 g$x$18159))) (if (g$syntax-null?$14660 g$x$18159) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f)))))) g$f$18157) g$t$18141)))) (map g$bind$18039 g$binding*$18133)))) g$ls/false$18123) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18121 '()))))) ((case-lambda ((g$x$18191) (if (g$syntax-pair?$14656 g$x$18191) (begin '#f ((case-lambda ((g$q$18193) (if g$q$18193 (begin '#f ((case-lambda ((g$r$18195) (if g$r$18195 (begin '#f (append g$q$18193 g$r$18195)) '#f))) ((case-lambda ((g$x$18197) (if (g$syntax-pair?$14656 g$x$18197) (begin '#f ((case-lambda ((g$q$18199) (if g$q$18199 (begin '#f ((case-lambda ((g$r$18201) (if g$r$18201 (begin '#f (append g$q$18199 g$r$18201)) '#f))) ((case-lambda ((g$x$18203) (if (g$syntax-pair?$14656 g$x$18203) (begin '#f ((case-lambda ((g$q$18205) (if g$q$18205 (begin '#f ((case-lambda ((g$r$18207) (if g$r$18207 (begin '#f (append g$q$18205 g$r$18207)) '#f))) ((letrec ((g$f$18209 (case-lambda ((g$x$18211) (if (g$syntax-pair?$14656 g$x$18211) ((case-lambda ((g$cars/f$18213) (if g$cars/f$18213 (begin '#f ((case-lambda ((g$cdrs/f$18215) (if g$cdrs/f$18215 (begin '#f (map cons g$cars/f$18213 g$cdrs/f$18215)) '#f))) (g$f$18209 (g$syntax-cdr$14668 g$x$18211)))) '#f))) ((case-lambda ((g$x$18217) (list g$x$18217))) (g$syntax-car$14664 g$x$18211))) (if (g$syntax-null?$14660 g$x$18211) (list (begin 'command* '())) '#f)))))) g$f$18209) (g$syntax-cdr$14668 g$x$18203)))) '#f))) ((case-lambda ((g$x$18219) (if (g$syntax-pair?$14656 g$x$18219) (begin '#f ((case-lambda ((g$q$18221) (if g$q$18221 (begin '#f ((case-lambda ((g$r$18223) (if g$r$18223 (begin '#f (append g$q$18221 g$r$18223)) '#f))) ((letrec ((g$f$18225 (case-lambda ((g$x$18227) (if (g$syntax-pair?$14656 g$x$18227) ((case-lambda ((g$cars/f$18229) (if g$cars/f$18229 (begin '#f ((case-lambda ((g$cdrs/f$18231) (if g$cdrs/f$18231 (begin '#f (map cons g$cars/f$18229 g$cdrs/f$18231)) '#f))) (g$f$18225 (g$syntax-cdr$14668 g$x$18227)))) '#f))) ((case-lambda ((g$x$18233) (list g$x$18233))) (g$syntax-car$14664 g$x$18227))) (if (g$syntax-null?$14660 g$x$18227) (list (begin 'expr* '())) '#f)))))) g$f$18225) (g$syntax-cdr$14668 g$x$18219)))) '#f))) ((case-lambda ((g$x$18235) (list g$x$18235))) (g$syntax-car$14664 g$x$18219)))) '#f))) (g$syntax-car$14664 g$x$18203)))) '#f))) (g$syntax-cdr$14668 g$x$18197)))) '#f))) ((letrec ((g$f$18237 (case-lambda ((g$x$18239) (if (g$syntax-pair?$14656 g$x$18239) ((case-lambda ((g$cars/f$18241) (if g$cars/f$18241 (begin '#f ((case-lambda ((g$cdrs/f$18243) (if g$cdrs/f$18243 (begin '#f (map cons g$cars/f$18241 g$cdrs/f$18243)) '#f))) (g$f$18237 (g$syntax-cdr$14668 g$x$18239)))) '#f))) ((case-lambda ((g$x$18245) (list g$x$18245))) (g$syntax-car$14664 g$x$18239))) (if (g$syntax-null?$14660 g$x$18239) (list (begin 'binding* '())) '#f)))))) g$f$18237) (g$syntax-car$14664 g$x$18197)))) '#f))) (g$syntax-cdr$14668 g$x$18191)))) '#f))) ((case-lambda ((g$x$18247) '())) (g$syntax-car$14664 g$x$18191)))) '#f))) g$t$18121)))) g$stx$18037)))) '#f)))) (set! g$let*-macro$15159 (case-lambda ((g$stx$18249) ((case-lambda ((g$t$18251) ((case-lambda ((g$ls/false$18253) (if (if g$ls/false$18253 (begin '#f (apply (case-lambda ((g$lhs*$18255 g$rhs*$18256 g$b$18257 g$b*$18258) (for-all g$id?$14670 g$lhs*$18255))) g$ls/false$18253)) '#f) (apply (case-lambda ((g$lhs*$18263 g$rhs*$18264 g$b$18265 g$b*$18266) (g$bless$15133 (letrec ((g$f$18271 (case-lambda ((g$x*$18273) (if (null? g$x*$18273) (cons 'let (cons '() (cons g$b$18265 g$b*$18266))) (list 'let (list (car g$x*$18273)) (g$f$18271 (cdr g$x*$18273)))))))) (g$f$18271 (map list g$lhs*$18263 g$rhs*$18264)))))) g$ls/false$18253) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18251 '()))))) ((case-lambda ((g$x$18275) (if (g$syntax-pair?$14656 g$x$18275) (begin '#f ((case-lambda ((g$q$18277) (if g$q$18277 (begin '#f ((case-lambda ((g$r$18279) (if g$r$18279 (begin '#f (append g$q$18277 g$r$18279)) '#f))) ((case-lambda ((g$x$18281) (if (g$syntax-pair?$14656 g$x$18281) (begin '#f ((case-lambda ((g$q$18283) (if g$q$18283 (begin '#f ((case-lambda ((g$r$18285) (if g$r$18285 (begin '#f (append g$q$18283 g$r$18285)) '#f))) ((case-lambda ((g$x$18287) (if (g$syntax-pair?$14656 g$x$18287) (begin '#f ((case-lambda ((g$q$18289) (if g$q$18289 (begin '#f ((case-lambda ((g$r$18291) (if g$r$18291 (begin '#f (append g$q$18289 g$r$18291)) '#f))) ((letrec ((g$f$18293 (case-lambda ((g$x$18295) (if (g$syntax-pair?$14656 g$x$18295) ((case-lambda ((g$cars/f$18297) (if g$cars/f$18297 (begin '#f ((case-lambda ((g$cdrs/f$18299) (if g$cdrs/f$18299 (begin '#f (map cons g$cars/f$18297 g$cdrs/f$18299)) '#f))) (g$f$18293 (g$syntax-cdr$14668 g$x$18295)))) '#f))) ((case-lambda ((g$x$18301) (list g$x$18301))) (g$syntax-car$14664 g$x$18295))) (if (g$syntax-null?$14660 g$x$18295) (list (begin 'b* '())) '#f)))))) g$f$18293) (g$syntax-cdr$14668 g$x$18287)))) '#f))) ((case-lambda ((g$x$18303) (list g$x$18303))) (g$syntax-car$14664 g$x$18287)))) '#f))) (g$syntax-cdr$14668 g$x$18281)))) '#f))) ((letrec ((g$f$18305 (case-lambda ((g$x$18307) (if (g$syntax-pair?$14656 g$x$18307) ((case-lambda ((g$cars/f$18309) (if g$cars/f$18309 (begin '#f ((case-lambda ((g$cdrs/f$18311) (if g$cdrs/f$18311 (begin '#f (map cons g$cars/f$18309 g$cdrs/f$18311)) '#f))) (g$f$18305 (g$syntax-cdr$14668 g$x$18307)))) '#f))) ((case-lambda ((g$x$18313) (if (g$syntax-pair?$14656 g$x$18313) (begin '#f ((case-lambda ((g$q$18315) (if g$q$18315 (begin '#f ((case-lambda ((g$r$18317) (if g$r$18317 (begin '#f (append g$q$18315 g$r$18317)) '#f))) ((case-lambda ((g$x$18319) (if (g$syntax-pair?$14656 g$x$18319) (begin '#f ((case-lambda ((g$q$18321) (if g$q$18321 (begin '#f ((case-lambda ((g$r$18323) (if g$r$18323 (begin '#f (append g$q$18321 g$r$18323)) '#f))) ((case-lambda ((g$x$18325) (if (equal? (g$stx->datum$14690 g$x$18325) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18319)))) '#f))) ((case-lambda ((g$x$18327) (list g$x$18327))) (g$syntax-car$14664 g$x$18319)))) '#f))) (g$syntax-cdr$14668 g$x$18313)))) '#f))) ((case-lambda ((g$x$18329) (list g$x$18329))) (g$syntax-car$14664 g$x$18313)))) '#f))) (g$syntax-car$14664 g$x$18307))) (if (g$syntax-null?$14660 g$x$18307) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$18305) (g$syntax-car$14664 g$x$18281)))) '#f))) (g$syntax-cdr$14668 g$x$18275)))) '#f))) ((case-lambda ((g$x$18331) '())) (g$syntax-car$14664 g$x$18275)))) '#f))) g$t$18251)))) g$stx$18249)))) (set! g$or-macro$15161 (case-lambda ((g$stx$18333) ((case-lambda ((g$t$18335) ((case-lambda ((g$ls/false$18337) (if (if g$ls/false$18337 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$18337)) '#f) (apply (case-lambda (() '#f)) g$ls/false$18337) ((case-lambda ((g$t$18339) ((case-lambda ((g$ls/false$18341) (if (if g$ls/false$18341 (begin '#f (apply (case-lambda ((g$e$18343 g$e*$18344) '#t)) g$ls/false$18341)) '#f) (apply (case-lambda ((g$e$18347 g$e*$18348) (g$bless$15133 (letrec ((g$f$18351 (case-lambda ((g$e$18353 g$e*$18354) (if (null? g$e*$18354) (list 'begin '#f g$e$18353) (list 'let (list (list 't g$e$18353)) (list 'if 't 't (g$f$18351 (car g$e*$18354) (cdr g$e*$18354))))))))) (g$f$18351 g$e$18347 g$e*$18348))))) g$ls/false$18341) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18339 '()))))) ((case-lambda ((g$x$18357) (if (g$syntax-pair?$14656 g$x$18357) (begin '#f ((case-lambda ((g$q$18359) (if g$q$18359 (begin '#f ((case-lambda ((g$r$18361) (if g$r$18361 (begin '#f (append g$q$18359 g$r$18361)) '#f))) ((case-lambda ((g$x$18363) (if (g$syntax-pair?$14656 g$x$18363) (begin '#f ((case-lambda ((g$q$18365) (if g$q$18365 (begin '#f ((case-lambda ((g$r$18367) (if g$r$18367 (begin '#f (append g$q$18365 g$r$18367)) '#f))) ((letrec ((g$f$18369 (case-lambda ((g$x$18371) (if (g$syntax-pair?$14656 g$x$18371) ((case-lambda ((g$cars/f$18373) (if g$cars/f$18373 (begin '#f ((case-lambda ((g$cdrs/f$18375) (if g$cdrs/f$18375 (begin '#f (map cons g$cars/f$18373 g$cdrs/f$18375)) '#f))) (g$f$18369 (g$syntax-cdr$14668 g$x$18371)))) '#f))) ((case-lambda ((g$x$18377) (list g$x$18377))) (g$syntax-car$14664 g$x$18371))) (if (g$syntax-null?$14660 g$x$18371) (list (begin 'e* '())) '#f)))))) g$f$18369) (g$syntax-cdr$14668 g$x$18363)))) '#f))) ((case-lambda ((g$x$18379) (list g$x$18379))) (g$syntax-car$14664 g$x$18363)))) '#f))) (g$syntax-cdr$14668 g$x$18357)))) '#f))) ((case-lambda ((g$x$18381) '())) (g$syntax-car$14664 g$x$18357)))) '#f))) g$t$18339)))) g$t$18335)))) ((case-lambda ((g$x$18383) (if (g$syntax-pair?$14656 g$x$18383) (begin '#f ((case-lambda ((g$q$18385) (if g$q$18385 (begin '#f ((case-lambda ((g$r$18387) (if g$r$18387 (begin '#f (append g$q$18385 g$r$18387)) '#f))) ((case-lambda ((g$x$18389) (if (equal? (g$stx->datum$14690 g$x$18389) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18383)))) '#f))) ((case-lambda ((g$x$18391) '())) (g$syntax-car$14664 g$x$18383)))) '#f))) g$t$18335)))) g$stx$18333)))) (set! g$and-macro$15163 (case-lambda ((g$stx$18393) ((case-lambda ((g$t$18395) ((case-lambda ((g$ls/false$18397) (if (if g$ls/false$18397 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$18397)) '#f) (apply (case-lambda (() '#t)) g$ls/false$18397) ((case-lambda ((g$t$18399) ((case-lambda ((g$ls/false$18401) (if (if g$ls/false$18401 (begin '#f (apply (case-lambda ((g$e$18403 g$e*$18404) '#t)) g$ls/false$18401)) '#f) (apply (case-lambda ((g$e$18407 g$e*$18408) (g$bless$15133 (letrec ((g$f$18411 (case-lambda ((g$e$18413 g$e*$18414) (if (null? g$e*$18414) (list 'begin '#f g$e$18413) (cons 'if (cons g$e$18413 (cons (g$f$18411 (car g$e*$18414) (cdr g$e*$18414)) '(#f))))))))) (g$f$18411 g$e$18407 g$e*$18408))))) g$ls/false$18401) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18399 '()))))) ((case-lambda ((g$x$18417) (if (g$syntax-pair?$14656 g$x$18417) (begin '#f ((case-lambda ((g$q$18419) (if g$q$18419 (begin '#f ((case-lambda ((g$r$18421) (if g$r$18421 (begin '#f (append g$q$18419 g$r$18421)) '#f))) ((case-lambda ((g$x$18423) (if (g$syntax-pair?$14656 g$x$18423) (begin '#f ((case-lambda ((g$q$18425) (if g$q$18425 (begin '#f ((case-lambda ((g$r$18427) (if g$r$18427 (begin '#f (append g$q$18425 g$r$18427)) '#f))) ((letrec ((g$f$18429 (case-lambda ((g$x$18431) (if (g$syntax-pair?$14656 g$x$18431) ((case-lambda ((g$cars/f$18433) (if g$cars/f$18433 (begin '#f ((case-lambda ((g$cdrs/f$18435) (if g$cdrs/f$18435 (begin '#f (map cons g$cars/f$18433 g$cdrs/f$18435)) '#f))) (g$f$18429 (g$syntax-cdr$14668 g$x$18431)))) '#f))) ((case-lambda ((g$x$18437) (list g$x$18437))) (g$syntax-car$14664 g$x$18431))) (if (g$syntax-null?$14660 g$x$18431) (list (begin 'e* '())) '#f)))))) g$f$18429) (g$syntax-cdr$14668 g$x$18423)))) '#f))) ((case-lambda ((g$x$18439) (list g$x$18439))) (g$syntax-car$14664 g$x$18423)))) '#f))) (g$syntax-cdr$14668 g$x$18417)))) '#f))) ((case-lambda ((g$x$18441) '())) (g$syntax-car$14664 g$x$18417)))) '#f))) g$t$18399)))) g$t$18395)))) ((case-lambda ((g$x$18443) (if (g$syntax-pair?$14656 g$x$18443) (begin '#f ((case-lambda ((g$q$18445) (if g$q$18445 (begin '#f ((case-lambda ((g$r$18447) (if g$r$18447 (begin '#f (append g$q$18445 g$r$18447)) '#f))) ((case-lambda ((g$x$18449) (if (equal? (g$stx->datum$14690 g$x$18449) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18443)))) '#f))) ((case-lambda ((g$x$18451) '())) (g$syntax-car$14664 g$x$18443)))) '#f))) g$t$18395)))) g$stx$18393)))) (set! g$cond-macro$15165 (case-lambda ((g$stx$18453) ((case-lambda ((g$t$18455) ((case-lambda ((g$ls/false$18457) (if (if g$ls/false$18457 (begin '#f (apply (case-lambda ((g$cls$18459 g$cls*$18460) '#t)) g$ls/false$18457)) '#f) (apply (case-lambda ((g$cls$18463 g$cls*$18464) (g$bless$15133 (letrec ((g$f$18467 (case-lambda ((g$cls$18469 g$cls*$18470) (if (null? g$cls*$18470) ((case-lambda ((g$t$18473) ((case-lambda ((g$ls/false$18475) (if (if g$ls/false$18475 (begin '#f (apply (case-lambda ((g$e$18477 g$e*$18478) '#t)) g$ls/false$18475)) '#f) (apply (case-lambda ((g$e$18481 g$e*$18482) (cons 'begin (cons g$e$18481 g$e*$18482)))) g$ls/false$18475) ((case-lambda ((g$t$18485) ((case-lambda ((g$ls/false$18487) (if (if g$ls/false$18487 (begin '#f (apply (case-lambda ((g$e$18489 g$p$18490) '#t)) g$ls/false$18487)) '#f) (apply (case-lambda ((g$e$18493 g$p$18494) (list 'let (list (list 't g$e$18493)) (list 'if 't (cons g$p$18494 '(t)))))) g$ls/false$18487) ((case-lambda ((g$t$18497) ((case-lambda ((g$ls/false$18499) (if (if g$ls/false$18499 (begin '#f (apply (case-lambda ((g$e$18501) '#t)) g$ls/false$18499)) '#f) (apply (case-lambda ((g$e$18503) (cons 'or (cons g$e$18503 '((if #f #f)))))) g$ls/false$18499) ((case-lambda ((g$t$18505) ((case-lambda ((g$ls/false$18507) (if (if g$ls/false$18507 (begin '#f (apply (case-lambda ((g$e$18509 g$e*$18510) '#t)) g$ls/false$18507)) '#f) (apply (case-lambda ((g$e$18513 g$e*$18514) (list 'if g$e$18513 (cons 'begin g$e*$18514)))) g$ls/false$18507) ((case-lambda ((g$t$18517) ((case-lambda ((g$ls/false$18519) (if (if g$ls/false$18519 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$18519)) '#f) (apply (case-lambda (() (error 'expander '"invalid last clause" (g$strip$14688 g$stx$18453 '())))) g$ls/false$18519) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18517 '()))))) ((case-lambda ((g$x$18521) '())) g$t$18517)))) g$t$18505)))) ((case-lambda ((g$x$18523) (if (g$syntax-pair?$14656 g$x$18523) (begin '#f ((case-lambda ((g$q$18525) (if g$q$18525 (begin '#f ((case-lambda ((g$r$18527) (if g$r$18527 (begin '#f (append g$q$18525 g$r$18527)) '#f))) ((letrec ((g$f$18529 (case-lambda ((g$x$18531) (if (g$syntax-pair?$14656 g$x$18531) ((case-lambda ((g$cars/f$18533) (if g$cars/f$18533 (begin '#f ((case-lambda ((g$cdrs/f$18535) (if g$cdrs/f$18535 (begin '#f (map cons g$cars/f$18533 g$cdrs/f$18535)) '#f))) (g$f$18529 (g$syntax-cdr$14668 g$x$18531)))) '#f))) ((case-lambda ((g$x$18537) (list g$x$18537))) (g$syntax-car$14664 g$x$18531))) (if (g$syntax-null?$14660 g$x$18531) (list (begin 'e* '())) '#f)))))) g$f$18529) (g$syntax-cdr$14668 g$x$18523)))) '#f))) ((case-lambda ((g$x$18539) (list g$x$18539))) (g$syntax-car$14664 g$x$18523)))) '#f))) g$t$18505)))) g$t$18497)))) ((case-lambda ((g$x$18541) (if (g$syntax-pair?$14656 g$x$18541) (begin '#f ((case-lambda ((g$q$18543) (if g$q$18543 (begin '#f ((case-lambda ((g$r$18545) (if g$r$18545 (begin '#f (append g$q$18543 g$r$18545)) '#f))) ((case-lambda ((g$x$18547) (if (equal? (g$stx->datum$14690 g$x$18547) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18541)))) '#f))) ((case-lambda ((g$x$18549) (list g$x$18549))) (g$syntax-car$14664 g$x$18541)))) '#f))) g$t$18497)))) g$t$18485)))) ((case-lambda ((g$x$18551) (if (g$syntax-pair?$14656 g$x$18551) (begin '#f ((case-lambda ((g$q$18553) (if g$q$18553 (begin '#f ((case-lambda ((g$r$18555) (if g$r$18555 (begin '#f (append g$q$18553 g$r$18555)) '#f))) ((case-lambda ((g$x$18557) (if (g$syntax-pair?$14656 g$x$18557) (begin '#f ((case-lambda ((g$q$18559) (if g$q$18559 (begin '#f ((case-lambda ((g$r$18561) (if g$r$18561 (begin '#f (append g$q$18559 g$r$18561)) '#f))) ((case-lambda ((g$x$18563) (if (g$syntax-pair?$14656 g$x$18563) (begin '#f ((case-lambda ((g$q$18565) (if g$q$18565 (begin '#f ((case-lambda ((g$r$18567) (if g$r$18567 (begin '#f (append g$q$18565 g$r$18567)) '#f))) ((case-lambda ((g$x$18569) (if (equal? (g$stx->datum$14690 g$x$18569) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18563)))) '#f))) ((case-lambda ((g$x$18571) (list g$x$18571))) (g$syntax-car$14664 g$x$18563)))) '#f))) (g$syntax-cdr$14668 g$x$18557)))) '#f))) ((case-lambda ((g$x$18573) (if (g$id?$14670 g$x$18573) (if (g$free-id=?$14678 g$x$18573 (g$scheme-stx$15099 '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$18557)))) '#f))) (g$syntax-cdr$14668 g$x$18551)))) '#f))) ((case-lambda ((g$x$18575) (list g$x$18575))) (g$syntax-car$14664 g$x$18551)))) '#f))) g$t$18485)))) g$t$18473)))) ((case-lambda ((g$x$18577) (if (g$syntax-pair?$14656 g$x$18577) (begin '#f ((case-lambda ((g$q$18579) (if g$q$18579 (begin '#f ((case-lambda ((g$r$18581) (if g$r$18581 (begin '#f (append g$q$18579 g$r$18581)) '#f))) ((case-lambda ((g$x$18583) (if (g$syntax-pair?$14656 g$x$18583) (begin '#f ((case-lambda ((g$q$18585) (if g$q$18585 (begin '#f ((case-lambda ((g$r$18587) (if g$r$18587 (begin '#f (append g$q$18585 g$r$18587)) '#f))) ((letrec ((g$f$18589 (case-lambda ((g$x$18591) (if (g$syntax-pair?$14656 g$x$18591) ((case-lambda ((g$cars/f$18593) (if g$cars/f$18593 (begin '#f ((case-lambda ((g$cdrs/f$18595) (if g$cdrs/f$18595 (begin '#f (map cons g$cars/f$18593 g$cdrs/f$18595)) '#f))) (g$f$18589 (g$syntax-cdr$14668 g$x$18591)))) '#f))) ((case-lambda ((g$x$18597) (list g$x$18597))) (g$syntax-car$14664 g$x$18591))) (if (g$syntax-null?$14660 g$x$18591) (list (begin 'e* '())) '#f)))))) g$f$18589) (g$syntax-cdr$14668 g$x$18583)))) '#f))) ((case-lambda ((g$x$18599) (list g$x$18599))) (g$syntax-car$14664 g$x$18583)))) '#f))) (g$syntax-cdr$14668 g$x$18577)))) '#f))) ((case-lambda ((g$x$18601) (if (g$id?$14670 g$x$18601) (if (g$free-id=?$14678 g$x$18601 (g$scheme-stx$15099 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$18577)))) '#f))) g$t$18473)))) g$cls$18469) ((case-lambda ((g$t$18603) ((case-lambda ((g$ls/false$18605) (if (if g$ls/false$18605 (begin '#f (apply (case-lambda ((g$e$18607 g$e*$18608) '#t)) g$ls/false$18605)) '#f) (apply (case-lambda ((g$e$18611 g$e*$18612) (error 'expander '"incorrect position of keyword else" (g$strip$14688 g$stx$18453 '())))) g$ls/false$18605) ((case-lambda ((g$t$18615) ((case-lambda ((g$ls/false$18617) (if (if g$ls/false$18617 (begin '#f (apply (case-lambda ((g$e$18619 g$p$18620) '#t)) g$ls/false$18617)) '#f) (apply (case-lambda ((g$e$18623 g$p$18624) (list 'let (list (list 't g$e$18623)) (list 'if 't (cons g$p$18624 '(t)) (g$f$18467 (car g$cls*$18470) (cdr g$cls*$18470)))))) g$ls/false$18617) ((case-lambda ((g$t$18627) ((case-lambda ((g$ls/false$18629) (if (if g$ls/false$18629 (begin '#f (apply (case-lambda ((g$e$18631) '#t)) g$ls/false$18629)) '#f) (apply (case-lambda ((g$e$18633) (list 'or g$e$18633 (g$f$18467 (car g$cls*$18470) (cdr g$cls*$18470))))) g$ls/false$18629) ((case-lambda ((g$t$18635) ((case-lambda ((g$ls/false$18637) (if (if g$ls/false$18637 (begin '#f (apply (case-lambda ((g$e$18639 g$e*$18640) '#t)) g$ls/false$18637)) '#f) (apply (case-lambda ((g$e$18643 g$e*$18644) (list 'if g$e$18643 (cons 'begin g$e*$18644) (g$f$18467 (car g$cls*$18470) (cdr g$cls*$18470))))) g$ls/false$18637) ((case-lambda ((g$t$18647) ((case-lambda ((g$ls/false$18649) (if (if g$ls/false$18649 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$18649)) '#f) (apply (case-lambda (() (error 'expander '"invalid last clause" (g$strip$14688 g$stx$18453 '())))) g$ls/false$18649) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18647 '()))))) ((case-lambda ((g$x$18651) '())) g$t$18647)))) g$t$18635)))) ((case-lambda ((g$x$18653) (if (g$syntax-pair?$14656 g$x$18653) (begin '#f ((case-lambda ((g$q$18655) (if g$q$18655 (begin '#f ((case-lambda ((g$r$18657) (if g$r$18657 (begin '#f (append g$q$18655 g$r$18657)) '#f))) ((letrec ((g$f$18659 (case-lambda ((g$x$18661) (if (g$syntax-pair?$14656 g$x$18661) ((case-lambda ((g$cars/f$18663) (if g$cars/f$18663 (begin '#f ((case-lambda ((g$cdrs/f$18665) (if g$cdrs/f$18665 (begin '#f (map cons g$cars/f$18663 g$cdrs/f$18665)) '#f))) (g$f$18659 (g$syntax-cdr$14668 g$x$18661)))) '#f))) ((case-lambda ((g$x$18667) (list g$x$18667))) (g$syntax-car$14664 g$x$18661))) (if (g$syntax-null?$14660 g$x$18661) (list (begin 'e* '())) '#f)))))) g$f$18659) (g$syntax-cdr$14668 g$x$18653)))) '#f))) ((case-lambda ((g$x$18669) (list g$x$18669))) (g$syntax-car$14664 g$x$18653)))) '#f))) g$t$18635)))) g$t$18627)))) ((case-lambda ((g$x$18671) (if (g$syntax-pair?$14656 g$x$18671) (begin '#f ((case-lambda ((g$q$18673) (if g$q$18673 (begin '#f ((case-lambda ((g$r$18675) (if g$r$18675 (begin '#f (append g$q$18673 g$r$18675)) '#f))) ((case-lambda ((g$x$18677) (if (equal? (g$stx->datum$14690 g$x$18677) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18671)))) '#f))) ((case-lambda ((g$x$18679) (list g$x$18679))) (g$syntax-car$14664 g$x$18671)))) '#f))) g$t$18627)))) g$t$18615)))) ((case-lambda ((g$x$18681) (if (g$syntax-pair?$14656 g$x$18681) (begin '#f ((case-lambda ((g$q$18683) (if g$q$18683 (begin '#f ((case-lambda ((g$r$18685) (if g$r$18685 (begin '#f (append g$q$18683 g$r$18685)) '#f))) ((case-lambda ((g$x$18687) (if (g$syntax-pair?$14656 g$x$18687) (begin '#f ((case-lambda ((g$q$18689) (if g$q$18689 (begin '#f ((case-lambda ((g$r$18691) (if g$r$18691 (begin '#f (append g$q$18689 g$r$18691)) '#f))) ((case-lambda ((g$x$18693) (if (g$syntax-pair?$14656 g$x$18693) (begin '#f ((case-lambda ((g$q$18695) (if g$q$18695 (begin '#f ((case-lambda ((g$r$18697) (if g$r$18697 (begin '#f (append g$q$18695 g$r$18697)) '#f))) ((case-lambda ((g$x$18699) (if (equal? (g$stx->datum$14690 g$x$18699) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18693)))) '#f))) ((case-lambda ((g$x$18701) (list g$x$18701))) (g$syntax-car$14664 g$x$18693)))) '#f))) (g$syntax-cdr$14668 g$x$18687)))) '#f))) ((case-lambda ((g$x$18703) (if (g$id?$14670 g$x$18703) (if (g$free-id=?$14678 g$x$18703 (g$scheme-stx$15099 '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$18687)))) '#f))) (g$syntax-cdr$14668 g$x$18681)))) '#f))) ((case-lambda ((g$x$18705) (list g$x$18705))) (g$syntax-car$14664 g$x$18681)))) '#f))) g$t$18615)))) g$t$18603)))) ((case-lambda ((g$x$18707) (if (g$syntax-pair?$14656 g$x$18707) (begin '#f ((case-lambda ((g$q$18709) (if g$q$18709 (begin '#f ((case-lambda ((g$r$18711) (if g$r$18711 (begin '#f (append g$q$18709 g$r$18711)) '#f))) ((case-lambda ((g$x$18713) (if (g$syntax-pair?$14656 g$x$18713) (begin '#f ((case-lambda ((g$q$18715) (if g$q$18715 (begin '#f ((case-lambda ((g$r$18717) (if g$r$18717 (begin '#f (append g$q$18715 g$r$18717)) '#f))) ((letrec ((g$f$18719 (case-lambda ((g$x$18721) (if (g$syntax-pair?$14656 g$x$18721) ((case-lambda ((g$cars/f$18723) (if g$cars/f$18723 (begin '#f ((case-lambda ((g$cdrs/f$18725) (if g$cdrs/f$18725 (begin '#f (map cons g$cars/f$18723 g$cdrs/f$18725)) '#f))) (g$f$18719 (g$syntax-cdr$14668 g$x$18721)))) '#f))) ((case-lambda ((g$x$18727) (list g$x$18727))) (g$syntax-car$14664 g$x$18721))) (if (g$syntax-null?$14660 g$x$18721) (list (begin 'e* '())) '#f)))))) g$f$18719) (g$syntax-cdr$14668 g$x$18713)))) '#f))) ((case-lambda ((g$x$18729) (list g$x$18729))) (g$syntax-car$14664 g$x$18713)))) '#f))) (g$syntax-cdr$14668 g$x$18707)))) '#f))) ((case-lambda ((g$x$18731) (if (g$id?$14670 g$x$18731) (if (g$free-id=?$14678 g$x$18731 (g$scheme-stx$15099 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$18707)))) '#f))) g$t$18603)))) g$cls$18469)))))) (g$f$18467 g$cls$18463 g$cls*$18464))))) g$ls/false$18457) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18455 '()))))) ((case-lambda ((g$x$18733) (if (g$syntax-pair?$14656 g$x$18733) (begin '#f ((case-lambda ((g$q$18735) (if g$q$18735 (begin '#f ((case-lambda ((g$r$18737) (if g$r$18737 (begin '#f (append g$q$18735 g$r$18737)) '#f))) ((case-lambda ((g$x$18739) (if (g$syntax-pair?$14656 g$x$18739) (begin '#f ((case-lambda ((g$q$18741) (if g$q$18741 (begin '#f ((case-lambda ((g$r$18743) (if g$r$18743 (begin '#f (append g$q$18741 g$r$18743)) '#f))) ((letrec ((g$f$18745 (case-lambda ((g$x$18747) (if (g$syntax-pair?$14656 g$x$18747) ((case-lambda ((g$cars/f$18749) (if g$cars/f$18749 (begin '#f ((case-lambda ((g$cdrs/f$18751) (if g$cdrs/f$18751 (begin '#f (map cons g$cars/f$18749 g$cdrs/f$18751)) '#f))) (g$f$18745 (g$syntax-cdr$14668 g$x$18747)))) '#f))) ((case-lambda ((g$x$18753) (list g$x$18753))) (g$syntax-car$14664 g$x$18747))) (if (g$syntax-null?$14660 g$x$18747) (list (begin 'cls* '())) '#f)))))) g$f$18745) (g$syntax-cdr$14668 g$x$18739)))) '#f))) ((case-lambda ((g$x$18755) (list g$x$18755))) (g$syntax-car$14664 g$x$18739)))) '#f))) (g$syntax-cdr$14668 g$x$18733)))) '#f))) ((case-lambda ((g$x$18757) '())) (g$syntax-car$14664 g$x$18733)))) '#f))) g$t$18455)))) g$stx$18453)))) (set! g$include-macro$15167 (case-lambda ((g$e$18759) ((case-lambda ((g$t$18761) ((case-lambda ((g$ls/false$18763) (if (if g$ls/false$18763 (begin '#f (apply (case-lambda ((g$id$18765 g$filename$18766) '#t)) g$ls/false$18763)) '#f) (apply (case-lambda ((g$id$18769 g$filename$18770) ((case-lambda ((g$filename$18773) (begin (if (string? g$filename$18773) (void) (error 'expander '"invalid syntax" (g$stx->datum$14690 g$e$18759))) (with-input-from-file g$filename$18773 (case-lambda (() (letrec ((g$f$18775 (case-lambda ((g$ls$18777) ((case-lambda ((g$x$18779) (if (eof-object? g$x$18779) (cons (g$bless$15133 'begin) (g$datum->stx$14636 g$id$18769 (reverse g$ls$18777))) (g$f$18775 (cons g$x$18779 g$ls$18777))))) (read)))))) (g$f$18775 '())))))))) (g$stx->datum$14690 g$filename$18770)))) g$ls/false$18763) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18761 '()))))) ((case-lambda ((g$x$18781) (if (g$syntax-pair?$14656 g$x$18781) (begin '#f ((case-lambda ((g$q$18783) (if g$q$18783 (begin '#f ((case-lambda ((g$r$18785) (if g$r$18785 (begin '#f (append g$q$18783 g$r$18785)) '#f))) ((case-lambda ((g$x$18787) (if (g$syntax-pair?$14656 g$x$18787) (begin '#f ((case-lambda ((g$q$18789) (if g$q$18789 (begin '#f ((case-lambda ((g$r$18791) (if g$r$18791 (begin '#f (append g$q$18789 g$r$18791)) '#f))) ((case-lambda ((g$x$18793) (if (equal? (g$stx->datum$14690 g$x$18793) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18787)))) '#f))) ((case-lambda ((g$x$18795) (list g$x$18795))) (g$syntax-car$14664 g$x$18787)))) '#f))) (g$syntax-cdr$14668 g$x$18781)))) '#f))) ((case-lambda ((g$x$18797) (list g$x$18797))) (g$syntax-car$14664 g$x$18781)))) '#f))) g$t$18761)))) g$e$18759)))) (set! g$syntax-rules-macro$15169 (case-lambda ((g$e$18799) ((case-lambda ((g$t$18801) ((case-lambda ((g$ls/false$18803) (if (if g$ls/false$18803 (begin '#f (apply (case-lambda ((g$lits$18805 g$pat*$18806 g$tmp*$18807) '#t)) g$ls/false$18803)) '#f) (apply (case-lambda ((g$lits$18811 g$pat*$18812 g$tmp*$18813) (begin (if (for-all (case-lambda ((g$x$18817) (if (g$id?$14670 g$x$18817) (if (not (g$free-id=?$14678 g$x$18817 (g$scheme-stx$15099 '...))) (begin '#f (not (g$free-id=?$14678 g$x$18817 (g$scheme-stx$15099 '_)))) '#f) '#f))) g$lits$18811) (void) (error 'expander '"invalid literals" (g$strip$14688 g$e$18799 '()))) (g$bless$15133 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$lits$18811 (map (case-lambda ((g$pat$18819 g$tmp$18820) (list g$pat$18819 (list 'syntax g$tmp$18820)))) g$pat*$18812 g$tmp*$18813))))))))) g$ls/false$18803) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18801 '()))))) ((case-lambda ((g$x$18823) (if (g$syntax-pair?$14656 g$x$18823) (begin '#f ((case-lambda ((g$q$18825) (if g$q$18825 (begin '#f ((case-lambda ((g$r$18827) (if g$r$18827 (begin '#f (append g$q$18825 g$r$18827)) '#f))) ((case-lambda ((g$x$18829) (if (g$syntax-pair?$14656 g$x$18829) (begin '#f ((case-lambda ((g$q$18831) (if g$q$18831 (begin '#f ((case-lambda ((g$r$18833) (if g$r$18833 (begin '#f (append g$q$18831 g$r$18833)) '#f))) ((letrec ((g$f$18835 (case-lambda ((g$x$18837) (if (g$syntax-pair?$14656 g$x$18837) ((case-lambda ((g$cars/f$18839) (if g$cars/f$18839 (begin '#f ((case-lambda ((g$cdrs/f$18841) (if g$cdrs/f$18841 (begin '#f (map cons g$cars/f$18839 g$cdrs/f$18841)) '#f))) (g$f$18835 (g$syntax-cdr$14668 g$x$18837)))) '#f))) ((case-lambda ((g$x$18843) (if (g$syntax-pair?$14656 g$x$18843) (begin '#f ((case-lambda ((g$q$18845) (if g$q$18845 (begin '#f ((case-lambda ((g$r$18847) (if g$r$18847 (begin '#f (append g$q$18845 g$r$18847)) '#f))) ((case-lambda ((g$x$18849) (if (g$syntax-pair?$14656 g$x$18849) (begin '#f ((case-lambda ((g$q$18851) (if g$q$18851 (begin '#f ((case-lambda ((g$r$18853) (if g$r$18853 (begin '#f (append g$q$18851 g$r$18853)) '#f))) ((case-lambda ((g$x$18855) (if (equal? (g$stx->datum$14690 g$x$18855) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$18849)))) '#f))) ((case-lambda ((g$x$18857) (list g$x$18857))) (g$syntax-car$14664 g$x$18849)))) '#f))) (g$syntax-cdr$14668 g$x$18843)))) '#f))) ((case-lambda ((g$x$18859) (list g$x$18859))) (g$syntax-car$14664 g$x$18843)))) '#f))) (g$syntax-car$14664 g$x$18837))) (if (g$syntax-null?$14660 g$x$18837) (list (begin 'pat* '()) (begin 'tmp* '())) '#f)))))) g$f$18835) (g$syntax-cdr$14668 g$x$18829)))) '#f))) ((letrec ((g$f$18861 (case-lambda ((g$x$18863) (if (g$syntax-pair?$14656 g$x$18863) ((case-lambda ((g$cars/f$18865) (if g$cars/f$18865 (begin '#f ((case-lambda ((g$cdrs/f$18867) (if g$cdrs/f$18867 (begin '#f (map cons g$cars/f$18865 g$cdrs/f$18867)) '#f))) (g$f$18861 (g$syntax-cdr$14668 g$x$18863)))) '#f))) ((case-lambda ((g$x$18869) (list g$x$18869))) (g$syntax-car$14664 g$x$18863))) (if (g$syntax-null?$14660 g$x$18863) (list (begin 'lits '())) '#f)))))) g$f$18861) (g$syntax-car$14664 g$x$18829)))) '#f))) (g$syntax-cdr$14668 g$x$18823)))) '#f))) ((case-lambda ((g$x$18871) '())) (g$syntax-car$14664 g$x$18823)))) '#f))) g$t$18801)))) g$e$18799)))) (set! g$quasiquote-macro$15171 ((case-lambda (() ((case-lambda ((g$quasicons*$18908 g$quasicons$18910 g$quasiappend$18912 g$quasivector$18914 g$vquasi$18916 g$quasi$18918) (begin (set! g$quasicons*$18908 (case-lambda ((g$x$19530 g$y$19531) (letrec ((g$f$19534 (case-lambda ((g$x$19536) (if (null? g$x$19536) g$y$19531 (g$quasicons$18910 (car g$x$19536) (g$f$19534 (cdr g$x$19536)))))))) (g$f$19534 g$x$19530))))) (set! g$quasicons$18910 (case-lambda ((g$x$19424 g$y$19425) ((case-lambda ((g$t$19428) ((case-lambda ((g$ls/false$19430) (if (if g$ls/false$19430 (begin '#f (apply (case-lambda ((g$dy$19432) '#t)) g$ls/false$19430)) '#f) (apply (case-lambda ((g$dy$19434) ((case-lambda ((g$t$19436) ((case-lambda ((g$ls/false$19438) (if (if g$ls/false$19438 (begin '#f (apply (case-lambda ((g$dx$19440) '#t)) g$ls/false$19438)) '#f) (apply (case-lambda ((g$dx$19442) (list (g$scheme-stx$15099 'quote) (cons g$dx$19442 g$dy$19434)))) g$ls/false$19438) ((case-lambda ((g$t$19444) ((case-lambda ((g$ls/false$19446) (if (if g$ls/false$19446 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19446)) '#f) (apply (case-lambda (() ((case-lambda ((g$t$19448) ((case-lambda ((g$ls/false$19450) (if (if g$ls/false$19450 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19450)) '#f) (apply (case-lambda (() (list (g$scheme-stx$15099 'list) g$x$19424))) g$ls/false$19450) ((case-lambda ((g$t$19452) ((case-lambda ((g$ls/false$19454) (if (if g$ls/false$19454 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19454)) '#f) (apply (case-lambda (() (list (g$scheme-stx$15099 'cons) g$x$19424 g$y$19425))) g$ls/false$19454) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19452 '()))))) ((case-lambda ((g$x$19456) '())) g$t$19452)))) g$t$19448)))) ((case-lambda ((g$x$19458) (if (equal? (g$stx->datum$14690 g$x$19458) '()) (begin '#f '()) '#f))) g$t$19448)))) g$dy$19434))) g$ls/false$19446) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19444 '()))))) ((case-lambda ((g$x$19460) '())) g$t$19444)))) g$t$19436)))) ((case-lambda ((g$x$19462) (if (g$syntax-pair?$14656 g$x$19462) (begin '#f ((case-lambda ((g$q$19464) (if g$q$19464 (begin '#f ((case-lambda ((g$r$19466) (if g$r$19466 (begin '#f (append g$q$19464 g$r$19466)) '#f))) ((case-lambda ((g$x$19468) (if (g$syntax-pair?$14656 g$x$19468) (begin '#f ((case-lambda ((g$q$19470) (if g$q$19470 (begin '#f ((case-lambda ((g$r$19472) (if g$r$19472 (begin '#f (append g$q$19470 g$r$19472)) '#f))) ((case-lambda ((g$x$19474) (if (equal? (g$stx->datum$14690 g$x$19474) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19468)))) '#f))) ((case-lambda ((g$x$19476) (list g$x$19476))) (g$syntax-car$14664 g$x$19468)))) '#f))) (g$syntax-cdr$14668 g$x$19462)))) '#f))) ((case-lambda ((g$x$19478) (if (g$id?$14670 g$x$19478) (if (g$free-id=?$14678 g$x$19478 (g$scheme-stx$15099 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19462)))) '#f))) g$t$19436)))) g$x$19424))) g$ls/false$19430) ((case-lambda ((g$t$19480) ((case-lambda ((g$ls/false$19482) (if (if g$ls/false$19482 (begin '#f (apply (case-lambda ((g$stuff$19484) '#t)) g$ls/false$19482)) '#f) (apply (case-lambda ((g$stuff$19486) (cons* (g$scheme-stx$15099 'list) g$x$19424 g$stuff$19486))) g$ls/false$19482) ((case-lambda ((g$t$19488) ((case-lambda ((g$ls/false$19490) (if (if g$ls/false$19490 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19490)) '#f) (apply (case-lambda (() (list (g$scheme-stx$15099 'cons) g$x$19424 g$y$19425))) g$ls/false$19490) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19488 '()))))) ((case-lambda ((g$x$19492) '())) g$t$19488)))) g$t$19480)))) ((case-lambda ((g$x$19494) (if (g$syntax-pair?$14656 g$x$19494) (begin '#f ((case-lambda ((g$q$19496) (if g$q$19496 (begin '#f ((case-lambda ((g$r$19498) (if g$r$19498 (begin '#f (append g$q$19496 g$r$19498)) '#f))) ((letrec ((g$f$19500 (case-lambda ((g$x$19502) (if (g$syntax-pair?$14656 g$x$19502) ((case-lambda ((g$cars/f$19504) (if g$cars/f$19504 (begin '#f ((case-lambda ((g$cdrs/f$19506) (if g$cdrs/f$19506 (begin '#f (map cons g$cars/f$19504 g$cdrs/f$19506)) '#f))) (g$f$19500 (g$syntax-cdr$14668 g$x$19502)))) '#f))) ((case-lambda ((g$x$19508) (list g$x$19508))) (g$syntax-car$14664 g$x$19502))) (if (g$syntax-null?$14660 g$x$19502) (list (begin 'stuff '())) '#f)))))) g$f$19500) (g$syntax-cdr$14668 g$x$19494)))) '#f))) ((case-lambda ((g$x$19510) (if (g$id?$14670 g$x$19510) (if (g$free-id=?$14678 g$x$19510 (g$scheme-stx$15099 'list)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19494)))) '#f))) g$t$19480)))) g$t$19428)))) ((case-lambda ((g$x$19512) (if (g$syntax-pair?$14656 g$x$19512) (begin '#f ((case-lambda ((g$q$19514) (if g$q$19514 (begin '#f ((case-lambda ((g$r$19516) (if g$r$19516 (begin '#f (append g$q$19514 g$r$19516)) '#f))) ((case-lambda ((g$x$19518) (if (g$syntax-pair?$14656 g$x$19518) (begin '#f ((case-lambda ((g$q$19520) (if g$q$19520 (begin '#f ((case-lambda ((g$r$19522) (if g$r$19522 (begin '#f (append g$q$19520 g$r$19522)) '#f))) ((case-lambda ((g$x$19524) (if (equal? (g$stx->datum$14690 g$x$19524) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19518)))) '#f))) ((case-lambda ((g$x$19526) (list g$x$19526))) (g$syntax-car$14664 g$x$19518)))) '#f))) (g$syntax-cdr$14668 g$x$19512)))) '#f))) ((case-lambda ((g$x$19528) (if (g$id?$14670 g$x$19528) (if (g$free-id=?$14678 g$x$19528 (g$scheme-stx$15099 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19512)))) '#f))) g$t$19428)))) g$y$19425)))) (set! g$quasiappend$18912 (case-lambda ((g$x$19358 g$y$19359) ((case-lambda ((g$ls$19362) (if (null? g$ls$19362) (list (g$scheme-stx$15099 'quote) '()) (if (null? (cdr g$ls$19362)) (car g$ls$19362) (cons* (g$scheme-stx$15099 'append) g$ls$19362))))) (letrec ((g$f$19364 (case-lambda ((g$x$19366) (if (null? g$x$19366) ((case-lambda ((g$t$19368) ((case-lambda ((g$ls/false$19370) (if (if g$ls/false$19370 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19370)) '#f) (apply (case-lambda (() '())) g$ls/false$19370) ((case-lambda ((g$t$19372) ((case-lambda ((g$ls/false$19374) (if (if g$ls/false$19374 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19374)) '#f) (apply (case-lambda (() (list g$y$19359))) g$ls/false$19374) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19372 '()))))) ((case-lambda ((g$x$19376) '())) g$t$19372)))) g$t$19368)))) ((case-lambda ((g$x$19378) (if (g$syntax-pair?$14656 g$x$19378) (begin '#f ((case-lambda ((g$q$19380) (if g$q$19380 (begin '#f ((case-lambda ((g$r$19382) (if g$r$19382 (begin '#f (append g$q$19380 g$r$19382)) '#f))) ((case-lambda ((g$x$19384) (if (g$syntax-pair?$14656 g$x$19384) (begin '#f ((case-lambda ((g$q$19386) (if g$q$19386 (begin '#f ((case-lambda ((g$r$19388) (if g$r$19388 (begin '#f (append g$q$19386 g$r$19388)) '#f))) ((case-lambda ((g$x$19390) (if (equal? (g$stx->datum$14690 g$x$19390) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19384)))) '#f))) ((case-lambda ((g$x$19392) (if (equal? (g$stx->datum$14690 g$x$19392) '()) (begin '#f '()) '#f))) (g$syntax-car$14664 g$x$19384)))) '#f))) (g$syntax-cdr$14668 g$x$19378)))) '#f))) ((case-lambda ((g$x$19394) (if (g$id?$14670 g$x$19394) (if (g$free-id=?$14678 g$x$19394 (g$scheme-stx$15099 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19378)))) '#f))) g$t$19368)))) g$y$19359) ((case-lambda ((g$t$19396) ((case-lambda ((g$ls/false$19398) (if (if g$ls/false$19398 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19398)) '#f) (apply (case-lambda (() (g$f$19364 (cdr g$x$19366)))) g$ls/false$19398) ((case-lambda ((g$t$19400) ((case-lambda ((g$ls/false$19402) (if (if g$ls/false$19402 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19402)) '#f) (apply (case-lambda (() (cons (car g$x$19366) (g$f$19364 (cdr g$x$19366))))) g$ls/false$19402) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19400 '()))))) ((case-lambda ((g$x$19404) '())) g$t$19400)))) g$t$19396)))) ((case-lambda ((g$x$19406) (if (g$syntax-pair?$14656 g$x$19406) (begin '#f ((case-lambda ((g$q$19408) (if g$q$19408 (begin '#f ((case-lambda ((g$r$19410) (if g$r$19410 (begin '#f (append g$q$19408 g$r$19410)) '#f))) ((case-lambda ((g$x$19412) (if (g$syntax-pair?$14656 g$x$19412) (begin '#f ((case-lambda ((g$q$19414) (if g$q$19414 (begin '#f ((case-lambda ((g$r$19416) (if g$r$19416 (begin '#f (append g$q$19414 g$r$19416)) '#f))) ((case-lambda ((g$x$19418) (if (equal? (g$stx->datum$14690 g$x$19418) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19412)))) '#f))) ((case-lambda ((g$x$19420) (if (equal? (g$stx->datum$14690 g$x$19420) '()) (begin '#f '()) '#f))) (g$syntax-car$14664 g$x$19412)))) '#f))) (g$syntax-cdr$14668 g$x$19406)))) '#f))) ((case-lambda ((g$x$19422) (if (g$id?$14670 g$x$19422) (if (g$free-id=?$14678 g$x$19422 (g$scheme-stx$15099 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19406)))) '#f))) g$t$19396)))) (car g$x$19366))))))) (g$f$19364 g$x$19358)))))) (set! g$quasivector$18914 (case-lambda ((g$x$19198) ((case-lambda ((g$pat-x$19200) ((case-lambda ((g$t$19202) ((case-lambda ((g$ls/false$19204) (if (if g$ls/false$19204 (begin '#f (apply (case-lambda ((g$x*$19206) '#t)) g$ls/false$19204)) '#f) (apply (case-lambda ((g$x*$19208) (list (g$scheme-stx$15099 'quote) (list->vector g$x*$19208)))) g$ls/false$19204) ((case-lambda ((g$t$19210) ((case-lambda ((g$ls/false$19212) (if (if g$ls/false$19212 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19212)) '#f) (apply (case-lambda (() (letrec ((g$f$19214 (case-lambda ((g$x$19218 g$k$19219) ((case-lambda ((g$t$19222) ((case-lambda ((g$ls/false$19224) (if (if g$ls/false$19224 (begin '#f (apply (case-lambda ((g$x*$19226) '#t)) g$ls/false$19224)) '#f) (apply (case-lambda ((g$x*$19228) (g$k$19219 (map (case-lambda ((g$x$19230) (list (g$scheme-stx$15099 'quote) g$x$19230))) g$x*$19228)))) g$ls/false$19224) ((case-lambda ((g$t$19232) ((case-lambda ((g$ls/false$19234) (if (if g$ls/false$19234 (begin '#f (apply (case-lambda ((g$x*$19236) '#t)) g$ls/false$19234)) '#f) (apply (case-lambda ((g$x*$19238) (g$k$19219 g$x*$19238))) g$ls/false$19234) ((case-lambda ((g$t$19240) ((case-lambda ((g$ls/false$19242) (if (if g$ls/false$19242 (begin '#f (apply (case-lambda ((g$x$19244 g$y$19245) '#t)) g$ls/false$19242)) '#f) (apply (case-lambda ((g$x$19248 g$y$19249) (g$f$19214 g$y$19249 (case-lambda ((g$ls$19252) (g$k$19219 (cons g$x$19248 g$ls$19252))))))) g$ls/false$19242) ((case-lambda ((g$t$19254) ((case-lambda ((g$ls/false$19256) (if (if g$ls/false$19256 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19256)) '#f) (apply (case-lambda (() (list (g$scheme-stx$15099 'list->vector) g$pat-x$19200))) g$ls/false$19256) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19254 '()))))) ((case-lambda ((g$x$19258) '())) g$t$19254)))) g$t$19240)))) ((case-lambda ((g$x$19260) (if (g$syntax-pair?$14656 g$x$19260) (begin '#f ((case-lambda ((g$q$19262) (if g$q$19262 (begin '#f ((case-lambda ((g$r$19264) (if g$r$19264 (begin '#f (append g$q$19262 g$r$19264)) '#f))) ((case-lambda ((g$x$19266) (if (g$syntax-pair?$14656 g$x$19266) (begin '#f ((case-lambda ((g$q$19268) (if g$q$19268 (begin '#f ((case-lambda ((g$r$19270) (if g$r$19270 (begin '#f (append g$q$19268 g$r$19270)) '#f))) ((case-lambda ((g$x$19272) (if (g$syntax-pair?$14656 g$x$19272) (begin '#f ((case-lambda ((g$q$19274) (if g$q$19274 (begin '#f ((case-lambda ((g$r$19276) (if g$r$19276 (begin '#f (append g$q$19274 g$r$19276)) '#f))) ((case-lambda ((g$x$19278) (if (equal? (g$stx->datum$14690 g$x$19278) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19272)))) '#f))) ((case-lambda ((g$x$19280) (list g$x$19280))) (g$syntax-car$14664 g$x$19272)))) '#f))) (g$syntax-cdr$14668 g$x$19266)))) '#f))) ((case-lambda ((g$x$19282) (list g$x$19282))) (g$syntax-car$14664 g$x$19266)))) '#f))) (g$syntax-cdr$14668 g$x$19260)))) '#f))) ((case-lambda ((g$x$19284) (if (g$id?$14670 g$x$19284) (if (g$free-id=?$14678 g$x$19284 (g$scheme-stx$15099 'cons)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19260)))) '#f))) g$t$19240)))) g$t$19232)))) ((case-lambda ((g$x$19286) (if (g$syntax-pair?$14656 g$x$19286) (begin '#f ((case-lambda ((g$q$19288) (if g$q$19288 (begin '#f ((case-lambda ((g$r$19290) (if g$r$19290 (begin '#f (append g$q$19288 g$r$19290)) '#f))) ((letrec ((g$f$19292 (case-lambda ((g$x$19294) (if (g$syntax-pair?$14656 g$x$19294) ((case-lambda ((g$cars/f$19296) (if g$cars/f$19296 (begin '#f ((case-lambda ((g$cdrs/f$19298) (if g$cdrs/f$19298 (begin '#f (map cons g$cars/f$19296 g$cdrs/f$19298)) '#f))) (g$f$19292 (g$syntax-cdr$14668 g$x$19294)))) '#f))) ((case-lambda ((g$x$19300) (list g$x$19300))) (g$syntax-car$14664 g$x$19294))) (if (g$syntax-null?$14660 g$x$19294) (list (begin 'x* '())) '#f)))))) g$f$19292) (g$syntax-cdr$14668 g$x$19286)))) '#f))) ((case-lambda ((g$x$19302) (if (g$id?$14670 g$x$19302) (if (g$free-id=?$14678 g$x$19302 (g$scheme-stx$15099 'list)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19286)))) '#f))) g$t$19232)))) g$t$19222)))) ((case-lambda ((g$x$19304) (if (g$syntax-pair?$14656 g$x$19304) (begin '#f ((case-lambda ((g$q$19306) (if g$q$19306 (begin '#f ((case-lambda ((g$r$19308) (if g$r$19308 (begin '#f (append g$q$19306 g$r$19308)) '#f))) ((case-lambda ((g$x$19310) (if (g$syntax-pair?$14656 g$x$19310) (begin '#f ((case-lambda ((g$q$19312) (if g$q$19312 (begin '#f ((case-lambda ((g$r$19314) (if g$r$19314 (begin '#f (append g$q$19312 g$r$19314)) '#f))) ((case-lambda ((g$x$19316) (if (equal? (g$stx->datum$14690 g$x$19316) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19310)))) '#f))) ((letrec ((g$f$19318 (case-lambda ((g$x$19320) (if (g$syntax-pair?$14656 g$x$19320) ((case-lambda ((g$cars/f$19322) (if g$cars/f$19322 (begin '#f ((case-lambda ((g$cdrs/f$19324) (if g$cdrs/f$19324 (begin '#f (map cons g$cars/f$19322 g$cdrs/f$19324)) '#f))) (g$f$19318 (g$syntax-cdr$14668 g$x$19320)))) '#f))) ((case-lambda ((g$x$19326) (list g$x$19326))) (g$syntax-car$14664 g$x$19320))) (if (g$syntax-null?$14660 g$x$19320) (list (begin 'x* '())) '#f)))))) g$f$19318) (g$syntax-car$14664 g$x$19310)))) '#f))) (g$syntax-cdr$14668 g$x$19304)))) '#f))) ((case-lambda ((g$x$19328) (if (g$id?$14670 g$x$19328) (if (g$free-id=?$14678 g$x$19328 (g$scheme-stx$15099 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19304)))) '#f))) g$t$19222)))) g$x$19218))))) (g$f$19214 g$x$19198 (case-lambda ((g$ls$19216) (cons* (g$scheme-stx$15099 'vector) g$ls$19216))))))) g$ls/false$19212) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19210 '()))))) ((case-lambda ((g$x$19330) '())) g$t$19210)))) g$t$19202)))) ((case-lambda ((g$x$19332) (if (g$syntax-pair?$14656 g$x$19332) (begin '#f ((case-lambda ((g$q$19334) (if g$q$19334 (begin '#f ((case-lambda ((g$r$19336) (if g$r$19336 (begin '#f (append g$q$19334 g$r$19336)) '#f))) ((case-lambda ((g$x$19338) (if (g$syntax-pair?$14656 g$x$19338) (begin '#f ((case-lambda ((g$q$19340) (if g$q$19340 (begin '#f ((case-lambda ((g$r$19342) (if g$r$19342 (begin '#f (append g$q$19340 g$r$19342)) '#f))) ((case-lambda ((g$x$19344) (if (equal? (g$stx->datum$14690 g$x$19344) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19338)))) '#f))) ((letrec ((g$f$19346 (case-lambda ((g$x$19348) (if (g$syntax-pair?$14656 g$x$19348) ((case-lambda ((g$cars/f$19350) (if g$cars/f$19350 (begin '#f ((case-lambda ((g$cdrs/f$19352) (if g$cdrs/f$19352 (begin '#f (map cons g$cars/f$19350 g$cdrs/f$19352)) '#f))) (g$f$19346 (g$syntax-cdr$14668 g$x$19348)))) '#f))) ((case-lambda ((g$x$19354) (list g$x$19354))) (g$syntax-car$14664 g$x$19348))) (if (g$syntax-null?$14660 g$x$19348) (list (begin 'x* '())) '#f)))))) g$f$19346) (g$syntax-car$14664 g$x$19338)))) '#f))) (g$syntax-cdr$14668 g$x$19332)))) '#f))) ((case-lambda ((g$x$19356) (if (g$id?$14670 g$x$19356) (if (g$free-id=?$14678 g$x$19356 (g$scheme-stx$15099 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19332)))) '#f))) g$t$19202)))) g$pat-x$19200))) g$x$19198)))) (set! g$vquasi$18916 (case-lambda ((g$p$19104 g$lev$19105) ((case-lambda ((g$t$19108) ((case-lambda ((g$ls/false$19110) (if (if g$ls/false$19110 (begin '#f (apply (case-lambda ((g$p$19112 g$q$19113) '#t)) g$ls/false$19110)) '#f) (apply (case-lambda ((g$p$19116 g$q$19117) ((case-lambda ((g$t$19120) ((case-lambda ((g$ls/false$19122) (if (if g$ls/false$19122 (begin '#f (apply (case-lambda ((g$p$19124) '#t)) g$ls/false$19122)) '#f) (apply (case-lambda ((g$p$19126) (if (= g$lev$19105 '0) (g$quasicons*$18908 g$p$19126 (g$vquasi$18916 g$q$19117 g$lev$19105)) (g$quasicons$18910 (g$quasicons$18910 (list (g$scheme-stx$15099 'quote) 'unquote) (g$quasi$18918 g$p$19126 (- g$lev$19105 '1))) (g$vquasi$18916 g$q$19117 g$lev$19105))))) g$ls/false$19122) ((case-lambda ((g$t$19128) ((case-lambda ((g$ls/false$19130) (if (if g$ls/false$19130 (begin '#f (apply (case-lambda ((g$p$19132) '#t)) g$ls/false$19130)) '#f) (apply (case-lambda ((g$p$19134) (if (= g$lev$19105 '0) (g$quasiappend$18912 g$p$19134 (g$vquasi$18916 g$q$19117 g$lev$19105)) (g$quasicons$18910 (g$quasicons$18910 (list (g$scheme-stx$15099 'quote) 'unquote-splicing) (g$quasi$18918 g$p$19134 (- g$lev$19105 '1))) (g$vquasi$18916 g$q$19117 g$lev$19105))))) g$ls/false$19130) ((case-lambda ((g$t$19136) ((case-lambda ((g$ls/false$19138) (if (if g$ls/false$19138 (begin '#f (apply (case-lambda ((g$p$19140) '#t)) g$ls/false$19138)) '#f) (apply (case-lambda ((g$p$19142) (g$quasicons$18910 (g$quasi$18918 g$p$19142 g$lev$19105) (g$vquasi$18916 g$q$19117 g$lev$19105)))) g$ls/false$19138) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19136 '()))))) ((case-lambda ((g$x$19144) (list g$x$19144))) g$t$19136)))) g$t$19128)))) ((case-lambda ((g$x$19146) (if (g$syntax-pair?$14656 g$x$19146) (begin '#f ((case-lambda ((g$q$19148) (if g$q$19148 (begin '#f ((case-lambda ((g$r$19150) (if g$r$19150 (begin '#f (append g$q$19148 g$r$19150)) '#f))) ((letrec ((g$f$19152 (case-lambda ((g$x$19154) (if (g$syntax-pair?$14656 g$x$19154) ((case-lambda ((g$cars/f$19156) (if g$cars/f$19156 (begin '#f ((case-lambda ((g$cdrs/f$19158) (if g$cdrs/f$19158 (begin '#f (map cons g$cars/f$19156 g$cdrs/f$19158)) '#f))) (g$f$19152 (g$syntax-cdr$14668 g$x$19154)))) '#f))) ((case-lambda ((g$x$19160) (list g$x$19160))) (g$syntax-car$14664 g$x$19154))) (if (g$syntax-null?$14660 g$x$19154) (list (begin 'p '())) '#f)))))) g$f$19152) (g$syntax-cdr$14668 g$x$19146)))) '#f))) ((case-lambda ((g$x$19162) (if (g$id?$14670 g$x$19162) (if (g$free-id=?$14678 g$x$19162 (g$scheme-stx$15099 'unquote-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19146)))) '#f))) g$t$19128)))) g$t$19120)))) ((case-lambda ((g$x$19164) (if (g$syntax-pair?$14656 g$x$19164) (begin '#f ((case-lambda ((g$q$19166) (if g$q$19166 (begin '#f ((case-lambda ((g$r$19168) (if g$r$19168 (begin '#f (append g$q$19166 g$r$19168)) '#f))) ((letrec ((g$f$19170 (case-lambda ((g$x$19172) (if (g$syntax-pair?$14656 g$x$19172) ((case-lambda ((g$cars/f$19174) (if g$cars/f$19174 (begin '#f ((case-lambda ((g$cdrs/f$19176) (if g$cdrs/f$19176 (begin '#f (map cons g$cars/f$19174 g$cdrs/f$19176)) '#f))) (g$f$19170 (g$syntax-cdr$14668 g$x$19172)))) '#f))) ((case-lambda ((g$x$19178) (list g$x$19178))) (g$syntax-car$14664 g$x$19172))) (if (g$syntax-null?$14660 g$x$19172) (list (begin 'p '())) '#f)))))) g$f$19170) (g$syntax-cdr$14668 g$x$19164)))) '#f))) ((case-lambda ((g$x$19180) (if (g$id?$14670 g$x$19180) (if (g$free-id=?$14678 g$x$19180 (g$scheme-stx$15099 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19164)))) '#f))) g$t$19120)))) g$p$19116))) g$ls/false$19110) ((case-lambda ((g$t$19182) ((case-lambda ((g$ls/false$19184) (if (if g$ls/false$19184 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19184)) '#f) (apply (case-lambda (() (list (g$scheme-stx$15099 'quote) '()))) g$ls/false$19184) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19182 '()))))) ((case-lambda ((g$x$19186) (if (equal? (g$stx->datum$14690 g$x$19186) '()) (begin '#f '()) '#f))) g$t$19182)))) g$t$19108)))) ((case-lambda ((g$x$19188) (if (g$syntax-pair?$14656 g$x$19188) (begin '#f ((case-lambda ((g$q$19190) (if g$q$19190 (begin '#f ((case-lambda ((g$r$19192) (if g$r$19192 (begin '#f (append g$q$19190 g$r$19192)) '#f))) ((case-lambda ((g$x$19194) (list g$x$19194))) (g$syntax-cdr$14668 g$x$19188)))) '#f))) ((case-lambda ((g$x$19196) (list g$x$19196))) (g$syntax-car$14664 g$x$19188)))) '#f))) g$t$19108)))) g$p$19104)))) (set! g$quasi$18918 (case-lambda ((g$p$18920 g$lev$18921) ((case-lambda ((g$t$18924) ((case-lambda ((g$ls/false$18926) (if (if g$ls/false$18926 (begin '#f (apply (case-lambda ((g$p$18928) '#t)) g$ls/false$18926)) '#f) (apply (case-lambda ((g$p$18930) (if (= g$lev$18921 '0) g$p$18930 (g$quasicons$18910 (list (g$scheme-stx$15099 'quote) 'unquote) (g$quasi$18918 (list g$p$18930) (- g$lev$18921 '1)))))) g$ls/false$18926) ((case-lambda ((g$t$18932) ((case-lambda ((g$ls/false$18934) (if (if g$ls/false$18934 (begin '#f (apply (case-lambda ((g$p$18936 g$q$18937) '#t)) g$ls/false$18934)) '#f) (apply (case-lambda ((g$p$18940 g$q$18941) (if (= g$lev$18921 '0) (g$quasicons*$18908 g$p$18940 (g$quasi$18918 g$q$18941 g$lev$18921)) (g$quasicons$18910 (g$quasicons$18910 (list (g$scheme-stx$15099 'quote) 'unquote) (g$quasi$18918 g$p$18940 (- g$lev$18921 '1))) (g$quasi$18918 g$q$18941 g$lev$18921))))) g$ls/false$18934) ((case-lambda ((g$t$18944) ((case-lambda ((g$ls/false$18946) (if (if g$ls/false$18946 (begin '#f (apply (case-lambda ((g$p$18948 g$q$18949) '#t)) g$ls/false$18946)) '#f) (apply (case-lambda ((g$p$18952 g$q$18953) (if (= g$lev$18921 '0) (g$quasiappend$18912 g$p$18952 (g$quasi$18918 g$q$18953 g$lev$18921)) (g$quasicons$18910 (g$quasicons$18910 (list (g$scheme-stx$15099 'quote) 'unquote-splicing) (g$quasi$18918 g$p$18952 (- g$lev$18921 '1))) (g$quasi$18918 g$q$18953 g$lev$18921))))) g$ls/false$18946) ((case-lambda ((g$t$18956) ((case-lambda ((g$ls/false$18958) (if (if g$ls/false$18958 (begin '#f (apply (case-lambda ((g$p$18960) '#t)) g$ls/false$18958)) '#f) (apply (case-lambda ((g$p$18962) (g$quasicons$18910 (list (g$scheme-stx$15099 'quote) 'quasiquote) (g$quasi$18918 (list g$p$18962) (+ g$lev$18921 '1))))) g$ls/false$18958) ((case-lambda ((g$t$18964) ((case-lambda ((g$ls/false$18966) (if (if g$ls/false$18966 (begin '#f (apply (case-lambda ((g$p$18968 g$q$18969) '#t)) g$ls/false$18966)) '#f) (apply (case-lambda ((g$p$18972 g$q$18973) (g$quasicons$18910 (g$quasi$18918 g$p$18972 g$lev$18921) (g$quasi$18918 g$q$18973 g$lev$18921)))) g$ls/false$18966) ((case-lambda ((g$t$18976) ((case-lambda ((g$ls/false$18978) (if (if g$ls/false$18978 (begin '#f (apply (case-lambda ((g$x$18980) (not (g$stx?$14622 g$x$18980)))) g$ls/false$18978)) '#f) (apply (case-lambda ((g$x$18982) (g$quasivector$18914 (g$vquasi$18916 g$x$18982 g$lev$18921)))) g$ls/false$18978) ((case-lambda ((g$t$18984) ((case-lambda ((g$ls/false$18986) (if (if g$ls/false$18986 (begin '#f (apply (case-lambda ((g$p$18988) '#t)) g$ls/false$18986)) '#f) (apply (case-lambda ((g$p$18990) (list (g$scheme-stx$15099 'quote) g$p$18990))) g$ls/false$18986) (error 'expander '"invalid syntax" (g$strip$14688 g$t$18984 '()))))) ((case-lambda ((g$x$18992) (list g$x$18992))) g$t$18984)))) g$t$18976)))) ((case-lambda ((g$x$18994) (if (g$syntax-vector?$14658 g$x$18994) (begin '#f ((letrec ((g$f$18996 (case-lambda ((g$x$18998) (if (g$syntax-pair?$14656 g$x$18998) ((case-lambda ((g$cars/f$19000) (if g$cars/f$19000 (begin '#f ((case-lambda ((g$cdrs/f$19002) (if g$cdrs/f$19002 (begin '#f (map cons g$cars/f$19000 g$cdrs/f$19002)) '#f))) (g$f$18996 (g$syntax-cdr$14668 g$x$18998)))) '#f))) ((case-lambda ((g$x$19004) (list g$x$19004))) (g$syntax-car$14664 g$x$18998))) (if (g$syntax-null?$14660 g$x$18998) (list (begin 'x '())) '#f)))))) g$f$18996) (g$syntax-vector->list$14654 g$x$18994))) '#f))) g$t$18976)))) g$t$18964)))) ((case-lambda ((g$x$19006) (if (g$syntax-pair?$14656 g$x$19006) (begin '#f ((case-lambda ((g$q$19008) (if g$q$19008 (begin '#f ((case-lambda ((g$r$19010) (if g$r$19010 (begin '#f (append g$q$19008 g$r$19010)) '#f))) ((case-lambda ((g$x$19012) (list g$x$19012))) (g$syntax-cdr$14668 g$x$19006)))) '#f))) ((case-lambda ((g$x$19014) (list g$x$19014))) (g$syntax-car$14664 g$x$19006)))) '#f))) g$t$18964)))) g$t$18956)))) ((case-lambda ((g$x$19016) (if (g$syntax-pair?$14656 g$x$19016) (begin '#f ((case-lambda ((g$q$19018) (if g$q$19018 (begin '#f ((case-lambda ((g$r$19020) (if g$r$19020 (begin '#f (append g$q$19018 g$r$19020)) '#f))) ((case-lambda ((g$x$19022) (if (g$syntax-pair?$14656 g$x$19022) (begin '#f ((case-lambda ((g$q$19024) (if g$q$19024 (begin '#f ((case-lambda ((g$r$19026) (if g$r$19026 (begin '#f (append g$q$19024 g$r$19026)) '#f))) ((case-lambda ((g$x$19028) (if (equal? (g$stx->datum$14690 g$x$19028) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19022)))) '#f))) ((case-lambda ((g$x$19030) (list g$x$19030))) (g$syntax-car$14664 g$x$19022)))) '#f))) (g$syntax-cdr$14668 g$x$19016)))) '#f))) ((case-lambda ((g$x$19032) (if (g$id?$14670 g$x$19032) (if (g$free-id=?$14678 g$x$19032 (g$scheme-stx$15099 'quasiquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19016)))) '#f))) g$t$18956)))) g$t$18944)))) ((case-lambda ((g$x$19034) (if (g$syntax-pair?$14656 g$x$19034) (begin '#f ((case-lambda ((g$q$19036) (if g$q$19036 (begin '#f ((case-lambda ((g$r$19038) (if g$r$19038 (begin '#f (append g$q$19036 g$r$19038)) '#f))) ((case-lambda ((g$x$19040) (list g$x$19040))) (g$syntax-cdr$14668 g$x$19034)))) '#f))) ((case-lambda ((g$x$19042) (if (g$syntax-pair?$14656 g$x$19042) (begin '#f ((case-lambda ((g$q$19044) (if g$q$19044 (begin '#f ((case-lambda ((g$r$19046) (if g$r$19046 (begin '#f (append g$q$19044 g$r$19046)) '#f))) ((letrec ((g$f$19048 (case-lambda ((g$x$19050) (if (g$syntax-pair?$14656 g$x$19050) ((case-lambda ((g$cars/f$19052) (if g$cars/f$19052 (begin '#f ((case-lambda ((g$cdrs/f$19054) (if g$cdrs/f$19054 (begin '#f (map cons g$cars/f$19052 g$cdrs/f$19054)) '#f))) (g$f$19048 (g$syntax-cdr$14668 g$x$19050)))) '#f))) ((case-lambda ((g$x$19056) (list g$x$19056))) (g$syntax-car$14664 g$x$19050))) (if (g$syntax-null?$14660 g$x$19050) (list (begin 'p '())) '#f)))))) g$f$19048) (g$syntax-cdr$14668 g$x$19042)))) '#f))) ((case-lambda ((g$x$19058) (if (g$id?$14670 g$x$19058) (if (g$free-id=?$14678 g$x$19058 (g$scheme-stx$15099 'unquote-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19042)))) '#f))) (g$syntax-car$14664 g$x$19034)))) '#f))) g$t$18944)))) g$t$18932)))) ((case-lambda ((g$x$19060) (if (g$syntax-pair?$14656 g$x$19060) (begin '#f ((case-lambda ((g$q$19062) (if g$q$19062 (begin '#f ((case-lambda ((g$r$19064) (if g$r$19064 (begin '#f (append g$q$19062 g$r$19064)) '#f))) ((case-lambda ((g$x$19066) (list g$x$19066))) (g$syntax-cdr$14668 g$x$19060)))) '#f))) ((case-lambda ((g$x$19068) (if (g$syntax-pair?$14656 g$x$19068) (begin '#f ((case-lambda ((g$q$19070) (if g$q$19070 (begin '#f ((case-lambda ((g$r$19072) (if g$r$19072 (begin '#f (append g$q$19070 g$r$19072)) '#f))) ((letrec ((g$f$19074 (case-lambda ((g$x$19076) (if (g$syntax-pair?$14656 g$x$19076) ((case-lambda ((g$cars/f$19078) (if g$cars/f$19078 (begin '#f ((case-lambda ((g$cdrs/f$19080) (if g$cdrs/f$19080 (begin '#f (map cons g$cars/f$19078 g$cdrs/f$19080)) '#f))) (g$f$19074 (g$syntax-cdr$14668 g$x$19076)))) '#f))) ((case-lambda ((g$x$19082) (list g$x$19082))) (g$syntax-car$14664 g$x$19076))) (if (g$syntax-null?$14660 g$x$19076) (list (begin 'p '())) '#f)))))) g$f$19074) (g$syntax-cdr$14668 g$x$19068)))) '#f))) ((case-lambda ((g$x$19084) (if (g$id?$14670 g$x$19084) (if (g$free-id=?$14678 g$x$19084 (g$scheme-stx$15099 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19068)))) '#f))) (g$syntax-car$14664 g$x$19060)))) '#f))) g$t$18932)))) g$t$18924)))) ((case-lambda ((g$x$19086) (if (g$syntax-pair?$14656 g$x$19086) (begin '#f ((case-lambda ((g$q$19088) (if g$q$19088 (begin '#f ((case-lambda ((g$r$19090) (if g$r$19090 (begin '#f (append g$q$19088 g$r$19090)) '#f))) ((case-lambda ((g$x$19092) (if (g$syntax-pair?$14656 g$x$19092) (begin '#f ((case-lambda ((g$q$19094) (if g$q$19094 (begin '#f ((case-lambda ((g$r$19096) (if g$r$19096 (begin '#f (append g$q$19094 g$r$19096)) '#f))) ((case-lambda ((g$x$19098) (if (equal? (g$stx->datum$14690 g$x$19098) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19092)))) '#f))) ((case-lambda ((g$x$19100) (list g$x$19100))) (g$syntax-car$14664 g$x$19092)))) '#f))) (g$syntax-cdr$14668 g$x$19086)))) '#f))) ((case-lambda ((g$x$19102) (if (g$id?$14670 g$x$19102) (if (g$free-id=?$14678 g$x$19102 (g$scheme-stx$15099 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19086)))) '#f))) g$t$18924)))) g$p$18920)))) (case-lambda ((g$x$19538) ((case-lambda ((g$t$19540) ((case-lambda ((g$ls/false$19542) (if (if g$ls/false$19542 (begin '#f (apply (case-lambda ((g$e$19544) '#t)) g$ls/false$19542)) '#f) (apply (case-lambda ((g$e$19546) (g$quasi$18918 g$e$19546 '0))) g$ls/false$19542) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19540 '()))))) ((case-lambda ((g$x$19548) (if (g$syntax-pair?$14656 g$x$19548) (begin '#f ((case-lambda ((g$q$19550) (if g$q$19550 (begin '#f ((case-lambda ((g$r$19552) (if g$r$19552 (begin '#f (append g$q$19550 g$r$19552)) '#f))) ((case-lambda ((g$x$19554) (if (g$syntax-pair?$14656 g$x$19554) (begin '#f ((case-lambda ((g$q$19556) (if g$q$19556 (begin '#f ((case-lambda ((g$r$19558) (if g$r$19558 (begin '#f (append g$q$19556 g$r$19558)) '#f))) ((case-lambda ((g$x$19560) (if (equal? (g$stx->datum$14690 g$x$19560) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19554)))) '#f))) ((case-lambda ((g$x$19562) (list g$x$19562))) (g$syntax-car$14664 g$x$19554)))) '#f))) (g$syntax-cdr$14668 g$x$19548)))) '#f))) ((case-lambda ((g$x$19564) '())) (g$syntax-car$14664 g$x$19548)))) '#f))) g$t$19540)))) g$x$19538)))))) '#f '#f '#f '#f '#f '#f))))) (set! g$quasisyntax-macro$15173 ((case-lambda (() ((case-lambda ((g$quasi$19566) (begin (set! g$quasi$19566 (case-lambda ((g$p$19568 g$lev$19569) ((case-lambda ((g$t$19572) ((case-lambda ((g$ls/false$19574) (if (if g$ls/false$19574 (begin '#f (apply (case-lambda ((g$p$19576) '#t)) g$ls/false$19574)) '#f) (apply (case-lambda ((g$p$19578) (if (= g$lev$19569 '0) ((case-lambda ((g$g$19580) (values (list g$g$19580) (list g$p$19578) g$g$19580))) (gensym)) (call-with-values (case-lambda (() (g$quasi$19566 g$p$19578 (- g$lev$19569 '1)))) (case-lambda ((g$lhs*$19582 g$rhs*$19583 g$p$19584) (values g$lhs*$19582 g$rhs*$19583 (list 'unsyntax g$p$19584)))))))) g$ls/false$19574) ((case-lambda ((g$t$19588) ((case-lambda ((g$ls/false$19590) (if (if g$ls/false$19590 (begin '#f (apply (case-lambda (() (= g$lev$19569 '0))) g$ls/false$19590)) '#f) (apply (case-lambda (() (error 'expander '"incorrect use of unsyntax" (g$strip$14688 g$p$19568 '())))) g$ls/false$19590) ((case-lambda ((g$t$19592) ((case-lambda ((g$ls/false$19594) (if (if g$ls/false$19594 (begin '#f (apply (case-lambda ((g$p$19596 g$q$19597) '#t)) g$ls/false$19594)) '#f) (apply (case-lambda ((g$p$19600 g$q$19601) (call-with-values (case-lambda (() (g$quasi$19566 g$q$19601 g$lev$19569))) (case-lambda ((g$lhs*$19604 g$rhs*$19605 g$q$19606) (if (= g$lev$19569 '0) ((case-lambda ((g$g$19610) (values (cons (cons g$g$19610 '(...)) g$lhs*$19604) (cons g$p$19600 g$rhs*$19605) (cons g$g$19610 (cons '... g$q$19606))))) (gensym)) (call-with-values (case-lambda (() (g$quasi$19566 g$p$19600 (- g$lev$19569 '1)))) (case-lambda ((g$lhs2*$19612 g$rhs2*$19613 g$p$19614) (values (append g$lhs2*$19612 g$lhs*$19604) (append g$rhs2*$19613 g$rhs*$19605) (cons (list 'unsyntax-splicing g$p$19614) g$q$19606))))))))))) g$ls/false$19594) ((case-lambda ((g$t$19618) ((case-lambda ((g$ls/false$19620) (if (if g$ls/false$19620 (begin '#f (apply (case-lambda (() (= g$lev$19569 '0))) g$ls/false$19620)) '#f) (apply (case-lambda (() (error 'expander '"incorrect use of unsyntax-splicing" (g$strip$14688 g$p$19568 '())))) g$ls/false$19620) ((case-lambda ((g$t$19622) ((case-lambda ((g$ls/false$19624) (if (if g$ls/false$19624 (begin '#f (apply (case-lambda ((g$p$19626) '#t)) g$ls/false$19624)) '#f) (apply (case-lambda ((g$p$19628) (call-with-values (case-lambda (() (g$quasi$19566 g$p$19628 (+ g$lev$19569 '1)))) (case-lambda ((g$lhs*$19630 g$rhs*$19631 g$p$19632) (values g$lhs*$19630 g$rhs*$19631 (list 'quasisyntax g$p$19632))))))) g$ls/false$19624) ((case-lambda ((g$t$19636) ((case-lambda ((g$ls/false$19638) (if (if g$ls/false$19638 (begin '#f (apply (case-lambda ((g$p$19640 g$q$19641) '#t)) g$ls/false$19638)) '#f) (apply (case-lambda ((g$p$19644 g$q$19645) (call-with-values (case-lambda (() (g$quasi$19566 g$p$19644 g$lev$19569))) (case-lambda ((g$lhs*$19648 g$rhs*$19649 g$p$19650) (call-with-values (case-lambda (() (g$quasi$19566 g$q$19645 g$lev$19569))) (case-lambda ((g$lhs2*$19651 g$rhs2*$19652 g$q$19653) (values (append g$lhs2*$19651 g$lhs*$19648) (append g$rhs2*$19652 g$rhs*$19649) (cons g$p$19650 g$q$19653)))))))))) g$ls/false$19638) ((case-lambda ((g$t$19660) ((case-lambda ((g$ls/false$19662) (if (if g$ls/false$19662 (begin '#f (apply (case-lambda ((g$x$19664) (not (g$stx?$14622 g$p$19568)))) g$ls/false$19662)) '#f) (apply (case-lambda ((g$x$19666) (call-with-values (case-lambda (() (letrec ((g$f$19668 (case-lambda ((g$x$19670) (if (null? g$x$19670) (values '() '() '()) (call-with-values (case-lambda (() (g$quasi$19566 (car g$x$19670) g$lev$19569))) (case-lambda ((g$lhs*$19672 g$rhs*$19673 g$a$19674) (call-with-values (case-lambda (() (g$f$19668 (cdr g$x$19670)))) (case-lambda ((g$lhs2*$19678 g$rhs2*$19679 g$d$19680) (values (append g$lhs*$19672 g$lhs2*$19678) (append g$rhs*$19673 g$rhs2*$19679) (cons g$a$19674 g$d$19680))))))))))))) (g$f$19668 g$x$19666)))) (case-lambda ((g$lhs*$19684 g$rhs*$19685 g$x*$19686) (values g$lhs*$19684 g$rhs*$19685 (list->vector g$x*$19686))))))) g$ls/false$19662) ((case-lambda ((g$t$19690) ((case-lambda ((g$ls/false$19692) (if (if g$ls/false$19692 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$19692)) '#f) (apply (case-lambda (() (values '() '() g$p$19568))) g$ls/false$19692) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19690 '()))))) ((case-lambda ((g$x$19694) '())) g$t$19690)))) g$t$19660)))) ((case-lambda ((g$x$19696) (if (g$syntax-vector?$14658 g$x$19696) (begin '#f ((letrec ((g$f$19698 (case-lambda ((g$x$19700) (if (g$syntax-pair?$14656 g$x$19700) ((case-lambda ((g$cars/f$19702) (if g$cars/f$19702 (begin '#f ((case-lambda ((g$cdrs/f$19704) (if g$cdrs/f$19704 (begin '#f (map cons g$cars/f$19702 g$cdrs/f$19704)) '#f))) (g$f$19698 (g$syntax-cdr$14668 g$x$19700)))) '#f))) ((case-lambda ((g$x$19706) (list g$x$19706))) (g$syntax-car$14664 g$x$19700))) (if (g$syntax-null?$14660 g$x$19700) (list (begin 'x '())) '#f)))))) g$f$19698) (g$syntax-vector->list$14654 g$x$19696))) '#f))) g$t$19660)))) g$t$19636)))) ((case-lambda ((g$x$19708) (if (g$syntax-pair?$14656 g$x$19708) (begin '#f ((case-lambda ((g$q$19710) (if g$q$19710 (begin '#f ((case-lambda ((g$r$19712) (if g$r$19712 (begin '#f (append g$q$19710 g$r$19712)) '#f))) ((case-lambda ((g$x$19714) (list g$x$19714))) (g$syntax-cdr$14668 g$x$19708)))) '#f))) ((case-lambda ((g$x$19716) (list g$x$19716))) (g$syntax-car$14664 g$x$19708)))) '#f))) g$t$19636)))) g$t$19622)))) ((case-lambda ((g$x$19718) (if (g$syntax-pair?$14656 g$x$19718) (begin '#f ((case-lambda ((g$q$19720) (if g$q$19720 (begin '#f ((case-lambda ((g$r$19722) (if g$r$19722 (begin '#f (append g$q$19720 g$r$19722)) '#f))) ((case-lambda ((g$x$19724) (if (g$syntax-pair?$14656 g$x$19724) (begin '#f ((case-lambda ((g$q$19726) (if g$q$19726 (begin '#f ((case-lambda ((g$r$19728) (if g$r$19728 (begin '#f (append g$q$19726 g$r$19728)) '#f))) ((case-lambda ((g$x$19730) (if (equal? (g$stx->datum$14690 g$x$19730) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19724)))) '#f))) ((case-lambda ((g$x$19732) (list g$x$19732))) (g$syntax-car$14664 g$x$19724)))) '#f))) (g$syntax-cdr$14668 g$x$19718)))) '#f))) ((case-lambda ((g$x$19734) (if (g$id?$14670 g$x$19734) (if (g$free-id=?$14678 g$x$19734 (g$scheme-stx$15099 'quasisyntax)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19718)))) '#f))) g$t$19622)))) g$t$19618)))) ((case-lambda ((g$x$19736) (if (g$id?$14670 g$x$19736) (if (g$free-id=?$14678 g$x$19736 (g$scheme-stx$15099 'unsyntax-splicing)) (begin '#f '()) '#f) '#f))) g$t$19618)))) g$t$19592)))) ((case-lambda ((g$x$19738) (if (g$syntax-pair?$14656 g$x$19738) (begin '#f ((case-lambda ((g$q$19740) (if g$q$19740 (begin '#f ((case-lambda ((g$r$19742) (if g$r$19742 (begin '#f (append g$q$19740 g$r$19742)) '#f))) ((case-lambda ((g$x$19744) (list g$x$19744))) (g$syntax-cdr$14668 g$x$19738)))) '#f))) ((case-lambda ((g$x$19746) (if (g$syntax-pair?$14656 g$x$19746) (begin '#f ((case-lambda ((g$q$19748) (if g$q$19748 (begin '#f ((case-lambda ((g$r$19750) (if g$r$19750 (begin '#f (append g$q$19748 g$r$19750)) '#f))) ((case-lambda ((g$x$19752) (if (g$syntax-pair?$14656 g$x$19752) (begin '#f ((case-lambda ((g$q$19754) (if g$q$19754 (begin '#f ((case-lambda ((g$r$19756) (if g$r$19756 (begin '#f (append g$q$19754 g$r$19756)) '#f))) ((case-lambda ((g$x$19758) (if (equal? (g$stx->datum$14690 g$x$19758) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19752)))) '#f))) ((case-lambda ((g$x$19760) (list g$x$19760))) (g$syntax-car$14664 g$x$19752)))) '#f))) (g$syntax-cdr$14668 g$x$19746)))) '#f))) ((case-lambda ((g$x$19762) (if (g$id?$14670 g$x$19762) (if (g$free-id=?$14678 g$x$19762 (g$scheme-stx$15099 'unsyntax-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19746)))) '#f))) (g$syntax-car$14664 g$x$19738)))) '#f))) g$t$19592)))) g$t$19588)))) ((case-lambda ((g$x$19764) (if (g$id?$14670 g$x$19764) (if (g$free-id=?$14678 g$x$19764 (g$scheme-stx$15099 'unsyntax)) (begin '#f '()) '#f) '#f))) g$t$19588)))) g$t$19572)))) ((case-lambda ((g$x$19766) (if (g$syntax-pair?$14656 g$x$19766) (begin '#f ((case-lambda ((g$q$19768) (if g$q$19768 (begin '#f ((case-lambda ((g$r$19770) (if g$r$19770 (begin '#f (append g$q$19768 g$r$19770)) '#f))) ((case-lambda ((g$x$19772) (if (g$syntax-pair?$14656 g$x$19772) (begin '#f ((case-lambda ((g$q$19774) (if g$q$19774 (begin '#f ((case-lambda ((g$r$19776) (if g$r$19776 (begin '#f (append g$q$19774 g$r$19776)) '#f))) ((case-lambda ((g$x$19778) (if (equal? (g$stx->datum$14690 g$x$19778) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19772)))) '#f))) ((case-lambda ((g$x$19780) (list g$x$19780))) (g$syntax-car$14664 g$x$19772)))) '#f))) (g$syntax-cdr$14668 g$x$19766)))) '#f))) ((case-lambda ((g$x$19782) (if (g$id?$14670 g$x$19782) (if (g$free-id=?$14678 g$x$19782 (g$scheme-stx$15099 'unsyntax)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19766)))) '#f))) g$t$19572)))) g$p$19568)))) (case-lambda ((g$x$19784) ((case-lambda ((g$t$19786) ((case-lambda ((g$ls/false$19788) (if (if g$ls/false$19788 (begin '#f (apply (case-lambda ((g$e$19790) '#t)) g$ls/false$19788)) '#f) (apply (case-lambda ((g$e$19792) (call-with-values (case-lambda (() (g$quasi$19566 g$e$19792 '0))) (case-lambda ((g$lhs*$19794 g$rhs*$19795 g$v$19796) (g$bless$15133 (list 'syntax-case (cons 'list g$rhs*$19795) '() (list g$lhs*$19794 (list 'syntax g$v$19796))))))))) g$ls/false$19788) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19786 '()))))) ((case-lambda ((g$x$19800) (if (g$syntax-pair?$14656 g$x$19800) (begin '#f ((case-lambda ((g$q$19802) (if g$q$19802 (begin '#f ((case-lambda ((g$r$19804) (if g$r$19804 (begin '#f (append g$q$19802 g$r$19804)) '#f))) ((case-lambda ((g$x$19806) (if (g$syntax-pair?$14656 g$x$19806) (begin '#f ((case-lambda ((g$q$19808) (if g$q$19808 (begin '#f ((case-lambda ((g$r$19810) (if g$r$19810 (begin '#f (append g$q$19808 g$r$19810)) '#f))) ((case-lambda ((g$x$19812) (if (equal? (g$stx->datum$14690 g$x$19812) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19806)))) '#f))) ((case-lambda ((g$x$19814) (list g$x$19814))) (g$syntax-car$14664 g$x$19806)))) '#f))) (g$syntax-cdr$14668 g$x$19800)))) '#f))) ((case-lambda ((g$x$19816) '())) (g$syntax-car$14664 g$x$19800)))) '#f))) g$t$19786)))) g$x$19784)))))) '#f))))) (set! g$define-struct-macro$15175 (case-lambda ((g$stx$19818) (error 'expander '"define-struct not supported" (g$strip$14688 g$stx$19818 '()))))) (set! g$define-record-type-macro$15177 (case-lambda ((g$x$19820) ((case-lambda ((g$id$19822 g$get-record-name$19824 g$get-record-constructor-name$19826 g$get-record-predicate-name$19828 g$get-clause$19830 g$foo-rtd-code$19832 g$foo-rcd-code$19834 g$get-protocol-code$19836 g$get-fields$19838 g$get-mutator-indices$19840 g$get-mutators$19842 g$get-accessors$19844 g$enumerate$19846 g$do-define-record$19848) (begin (set! g$id$19822 (case-lambda ((g$ctxt$20870 . g$str*$20872) (g$datum->syntax$15326 g$ctxt$20870 (string->symbol (apply string-append (map (case-lambda ((g$x$20874) (if (symbol? g$x$20874) (symbol->string g$x$20874) (if (string? g$x$20874) g$x$20874 (error 'define-record-type '"BUG"))))) g$str*$20872))))))) (set! g$get-record-name$19824 (case-lambda ((g$spec$20816) ((case-lambda ((g$t$20818) ((case-lambda ((g$ls/false$20820) (if (if g$ls/false$20820 (begin '#f (apply (case-lambda ((g$foo$20822 g$make-foo$20823 g$foo?$20824) '#t)) g$ls/false$20820)) '#f) (apply (case-lambda ((g$foo$20828 g$make-foo$20829 g$foo?$20830) g$foo$20828)) g$ls/false$20820) ((case-lambda ((g$t$20834) ((case-lambda ((g$ls/false$20836) (if (if g$ls/false$20836 (begin '#f (apply (case-lambda ((g$foo$20838) '#t)) g$ls/false$20836)) '#f) (apply (case-lambda ((g$foo$20840) g$foo$20840)) g$ls/false$20836) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20834 '()))))) ((case-lambda ((g$x$20842) (list g$x$20842))) g$t$20834)))) g$t$20818)))) ((case-lambda ((g$x$20844) (if (g$syntax-pair?$14656 g$x$20844) (begin '#f ((case-lambda ((g$q$20846) (if g$q$20846 (begin '#f ((case-lambda ((g$r$20848) (if g$r$20848 (begin '#f (append g$q$20846 g$r$20848)) '#f))) ((case-lambda ((g$x$20850) (if (g$syntax-pair?$14656 g$x$20850) (begin '#f ((case-lambda ((g$q$20852) (if g$q$20852 (begin '#f ((case-lambda ((g$r$20854) (if g$r$20854 (begin '#f (append g$q$20852 g$r$20854)) '#f))) ((case-lambda ((g$x$20856) (if (g$syntax-pair?$14656 g$x$20856) (begin '#f ((case-lambda ((g$q$20858) (if g$q$20858 (begin '#f ((case-lambda ((g$r$20860) (if g$r$20860 (begin '#f (append g$q$20858 g$r$20860)) '#f))) ((case-lambda ((g$x$20862) (if (equal? (g$stx->datum$14690 g$x$20862) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20856)))) '#f))) ((case-lambda ((g$x$20864) (list g$x$20864))) (g$syntax-car$14664 g$x$20856)))) '#f))) (g$syntax-cdr$14668 g$x$20850)))) '#f))) ((case-lambda ((g$x$20866) (list g$x$20866))) (g$syntax-car$14664 g$x$20850)))) '#f))) (g$syntax-cdr$14668 g$x$20844)))) '#f))) ((case-lambda ((g$x$20868) (list g$x$20868))) (g$syntax-car$14664 g$x$20844)))) '#f))) g$t$20818)))) g$spec$20816)))) (set! g$get-record-constructor-name$19826 (case-lambda ((g$spec$20760 g$ctxt$20761) ((case-lambda ((g$t$20764) ((case-lambda ((g$ls/false$20766) (if (if g$ls/false$20766 (begin '#f (apply (case-lambda ((g$foo$20768 g$make-foo$20769 g$foo?$20770) '#t)) g$ls/false$20766)) '#f) (apply (case-lambda ((g$foo$20774 g$make-foo$20775 g$foo?$20776) g$make-foo$20775)) g$ls/false$20766) ((case-lambda ((g$t$20780) ((case-lambda ((g$ls/false$20782) (if (if g$ls/false$20782 (begin '#f (apply (case-lambda ((g$foo$20784) '#t)) g$ls/false$20782)) '#f) (apply (case-lambda ((g$foo$20786) (g$id$19822 g$ctxt$20761 '"make-" (g$stx->datum$14690 g$foo$20786)))) g$ls/false$20782) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20780 '()))))) ((case-lambda ((g$x$20788) (list g$x$20788))) g$t$20780)))) g$t$20764)))) ((case-lambda ((g$x$20790) (if (g$syntax-pair?$14656 g$x$20790) (begin '#f ((case-lambda ((g$q$20792) (if g$q$20792 (begin '#f ((case-lambda ((g$r$20794) (if g$r$20794 (begin '#f (append g$q$20792 g$r$20794)) '#f))) ((case-lambda ((g$x$20796) (if (g$syntax-pair?$14656 g$x$20796) (begin '#f ((case-lambda ((g$q$20798) (if g$q$20798 (begin '#f ((case-lambda ((g$r$20800) (if g$r$20800 (begin '#f (append g$q$20798 g$r$20800)) '#f))) ((case-lambda ((g$x$20802) (if (g$syntax-pair?$14656 g$x$20802) (begin '#f ((case-lambda ((g$q$20804) (if g$q$20804 (begin '#f ((case-lambda ((g$r$20806) (if g$r$20806 (begin '#f (append g$q$20804 g$r$20806)) '#f))) ((case-lambda ((g$x$20808) (if (equal? (g$stx->datum$14690 g$x$20808) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20802)))) '#f))) ((case-lambda ((g$x$20810) (list g$x$20810))) (g$syntax-car$14664 g$x$20802)))) '#f))) (g$syntax-cdr$14668 g$x$20796)))) '#f))) ((case-lambda ((g$x$20812) (list g$x$20812))) (g$syntax-car$14664 g$x$20796)))) '#f))) (g$syntax-cdr$14668 g$x$20790)))) '#f))) ((case-lambda ((g$x$20814) (list g$x$20814))) (g$syntax-car$14664 g$x$20790)))) '#f))) g$t$20764)))) g$spec$20760)))) (set! g$get-record-predicate-name$19828 (case-lambda ((g$spec$20704 g$ctxt$20705) ((case-lambda ((g$t$20708) ((case-lambda ((g$ls/false$20710) (if (if g$ls/false$20710 (begin '#f (apply (case-lambda ((g$foo$20712 g$make-foo$20713 g$foo?$20714) '#t)) g$ls/false$20710)) '#f) (apply (case-lambda ((g$foo$20718 g$make-foo$20719 g$foo?$20720) g$foo?$20720)) g$ls/false$20710) ((case-lambda ((g$t$20724) ((case-lambda ((g$ls/false$20726) (if (if g$ls/false$20726 (begin '#f (apply (case-lambda ((g$foo$20728) '#t)) g$ls/false$20726)) '#f) (apply (case-lambda ((g$foo$20730) (g$id$19822 g$ctxt$20705 (g$stx->datum$14690 g$foo$20730) '"?"))) g$ls/false$20726) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20724 '()))))) ((case-lambda ((g$x$20732) (list g$x$20732))) g$t$20724)))) g$t$20708)))) ((case-lambda ((g$x$20734) (if (g$syntax-pair?$14656 g$x$20734) (begin '#f ((case-lambda ((g$q$20736) (if g$q$20736 (begin '#f ((case-lambda ((g$r$20738) (if g$r$20738 (begin '#f (append g$q$20736 g$r$20738)) '#f))) ((case-lambda ((g$x$20740) (if (g$syntax-pair?$14656 g$x$20740) (begin '#f ((case-lambda ((g$q$20742) (if g$q$20742 (begin '#f ((case-lambda ((g$r$20744) (if g$r$20744 (begin '#f (append g$q$20742 g$r$20744)) '#f))) ((case-lambda ((g$x$20746) (if (g$syntax-pair?$14656 g$x$20746) (begin '#f ((case-lambda ((g$q$20748) (if g$q$20748 (begin '#f ((case-lambda ((g$r$20750) (if g$r$20750 (begin '#f (append g$q$20748 g$r$20750)) '#f))) ((case-lambda ((g$x$20752) (if (equal? (g$stx->datum$14690 g$x$20752) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20746)))) '#f))) ((case-lambda ((g$x$20754) (list g$x$20754))) (g$syntax-car$14664 g$x$20746)))) '#f))) (g$syntax-cdr$14668 g$x$20740)))) '#f))) ((case-lambda ((g$x$20756) (list g$x$20756))) (g$syntax-car$14664 g$x$20740)))) '#f))) (g$syntax-cdr$14668 g$x$20734)))) '#f))) ((case-lambda ((g$x$20758) (list g$x$20758))) (g$syntax-car$14664 g$x$20734)))) '#f))) g$t$20708)))) g$spec$20704)))) (set! g$get-clause$19830 (case-lambda ((g$id$20660 g$ls$20661) ((case-lambda ((g$t$20664) ((case-lambda ((g$ls/false$20666) (if (if g$ls/false$20666 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20666)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20666) ((case-lambda ((g$t$20668) ((case-lambda ((g$ls/false$20670) (if (if g$ls/false$20670 (begin '#f (apply (case-lambda ((g$x$20672 g$rest$20673 g$ls$20674) '#t)) g$ls/false$20670)) '#f) (apply (case-lambda ((g$x$20678 g$rest$20679 g$ls$20680) (if (g$free-id=?$14678 (g$bless$15133 g$id$20660) g$x$20678) (cons g$x$20678 g$rest$20679) (g$get-clause$19830 g$id$20660 g$ls$20680)))) g$ls/false$20670) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20668 '()))))) ((case-lambda ((g$x$20684) (if (g$syntax-pair?$14656 g$x$20684) (begin '#f ((case-lambda ((g$q$20686) (if g$q$20686 (begin '#f ((case-lambda ((g$r$20688) (if g$r$20688 (begin '#f (append g$q$20686 g$r$20688)) '#f))) ((case-lambda ((g$x$20690) (list g$x$20690))) (g$syntax-cdr$14668 g$x$20684)))) '#f))) ((case-lambda ((g$x$20692) (if (g$syntax-pair?$14656 g$x$20692) (begin '#f ((case-lambda ((g$q$20694) (if g$q$20694 (begin '#f ((case-lambda ((g$r$20696) (if g$r$20696 (begin '#f (append g$q$20694 g$r$20696)) '#f))) ((case-lambda ((g$x$20698) (list g$x$20698))) (g$syntax-cdr$14668 g$x$20692)))) '#f))) ((case-lambda ((g$x$20700) (list g$x$20700))) (g$syntax-car$14664 g$x$20692)))) '#f))) (g$syntax-car$14664 g$x$20684)))) '#f))) g$t$20668)))) g$t$20664)))) ((case-lambda ((g$x$20702) (if (equal? (g$stx->datum$14690 g$x$20702) '()) (begin '#f '()) '#f))) g$t$20664)))) g$ls$20661)))) (set! g$foo-rtd-code$19832 (case-lambda ((g$ctxt$20402 g$name$20403 g$clause*$20404) ((case-lambda ((g$convert-field-spec*$20408) (begin (set! g$convert-field-spec*$20408 (case-lambda ((g$ls$20410) (list->vector (map (case-lambda ((g$x$20412) ((case-lambda ((g$t$20414) ((case-lambda ((g$ls/false$20416) (if (if g$ls/false$20416 (begin '#f (apply (case-lambda ((g$name$20418 g$rest$20419) '#t)) g$ls/false$20416)) '#f) (apply (case-lambda ((g$name$20422 g$rest$20423) (list 'mutable g$name$20422))) g$ls/false$20416) ((case-lambda ((g$t$20426) ((case-lambda ((g$ls/false$20428) (if (if g$ls/false$20428 (begin '#f (apply (case-lambda ((g$name$20430 g$rest$20431) '#t)) g$ls/false$20428)) '#f) (apply (case-lambda ((g$name$20434 g$rest$20435) (list 'immutable g$name$20434))) g$ls/false$20428) ((case-lambda ((g$t$20438) ((case-lambda ((g$ls/false$20440) (if (if g$ls/false$20440 (begin '#f (apply (case-lambda ((g$name$20442) '#t)) g$ls/false$20440)) '#f) (apply (case-lambda ((g$name$20444) (list 'immutable g$name$20444))) g$ls/false$20440) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20438 '()))))) ((case-lambda ((g$x$20446) (list g$x$20446))) g$t$20438)))) g$t$20426)))) ((case-lambda ((g$x$20448) (if (g$syntax-pair?$14656 g$x$20448) (begin '#f ((case-lambda ((g$q$20450) (if g$q$20450 (begin '#f ((case-lambda ((g$r$20452) (if g$r$20452 (begin '#f (append g$q$20450 g$r$20452)) '#f))) ((case-lambda ((g$x$20454) (if (g$syntax-pair?$14656 g$x$20454) (begin '#f ((case-lambda ((g$q$20456) (if g$q$20456 (begin '#f ((case-lambda ((g$r$20458) (if g$r$20458 (begin '#f (append g$q$20456 g$r$20458)) '#f))) ((case-lambda ((g$x$20460) (list g$x$20460))) (g$syntax-cdr$14668 g$x$20454)))) '#f))) ((case-lambda ((g$x$20462) (list g$x$20462))) (g$syntax-car$14664 g$x$20454)))) '#f))) (g$syntax-cdr$14668 g$x$20448)))) '#f))) ((case-lambda ((g$x$20464) (if (g$id?$14670 g$x$20464) (if (g$free-id=?$14678 g$x$20464 (g$scheme-stx$15099 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$20448)))) '#f))) g$t$20426)))) g$t$20414)))) ((case-lambda ((g$x$20466) (if (g$syntax-pair?$14656 g$x$20466) (begin '#f ((case-lambda ((g$q$20468) (if g$q$20468 (begin '#f ((case-lambda ((g$r$20470) (if g$r$20470 (begin '#f (append g$q$20468 g$r$20470)) '#f))) ((case-lambda ((g$x$20472) (if (g$syntax-pair?$14656 g$x$20472) (begin '#f ((case-lambda ((g$q$20474) (if g$q$20474 (begin '#f ((case-lambda ((g$r$20476) (if g$r$20476 (begin '#f (append g$q$20474 g$r$20476)) '#f))) ((case-lambda ((g$x$20478) (list g$x$20478))) (g$syntax-cdr$14668 g$x$20472)))) '#f))) ((case-lambda ((g$x$20480) (list g$x$20480))) (g$syntax-car$14664 g$x$20472)))) '#f))) (g$syntax-cdr$14668 g$x$20466)))) '#f))) ((case-lambda ((g$x$20482) (if (g$id?$14670 g$x$20482) (if (g$free-id=?$14678 g$x$20482 (g$scheme-stx$15099 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$20466)))) '#f))) g$t$20414)))) g$x$20412))) g$ls$20410))))) ((case-lambda ((g$parent-rtd-code$20484 g$uid-code$20485 g$sealed?$20486 g$opaque?$20487 g$fields$20488) (g$bless$15133 (list 'make-record-type-descriptor (list 'quote g$name$20403) g$parent-rtd-code$20484 g$uid-code$20485 g$sealed?$20486 g$opaque?$20487 g$fields$20488)))) ((case-lambda ((g$t$20494) ((case-lambda ((g$ls/false$20496) (if (if g$ls/false$20496 (begin '#f (apply (case-lambda ((g$name$20498) '#t)) g$ls/false$20496)) '#f) (apply (case-lambda ((g$name$20500) (list 'record-type-descriptor g$name$20500))) g$ls/false$20496) ((case-lambda ((g$t$20502) ((case-lambda ((g$ls/false$20504) (if (if g$ls/false$20504 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20504)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20504) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20502 '()))))) ((case-lambda ((g$x$20506) '())) g$t$20502)))) g$t$20494)))) ((case-lambda ((g$x$20508) (if (g$syntax-pair?$14656 g$x$20508) (begin '#f ((case-lambda ((g$q$20510) (if g$q$20510 (begin '#f ((case-lambda ((g$r$20512) (if g$r$20512 (begin '#f (append g$q$20510 g$r$20512)) '#f))) ((case-lambda ((g$x$20514) (if (g$syntax-pair?$14656 g$x$20514) (begin '#f ((case-lambda ((g$q$20516) (if g$q$20516 (begin '#f ((case-lambda ((g$r$20518) (if g$r$20518 (begin '#f (append g$q$20516 g$r$20518)) '#f))) ((case-lambda ((g$x$20520) (if (equal? (g$stx->datum$14690 g$x$20520) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20514)))) '#f))) ((case-lambda ((g$x$20522) (list g$x$20522))) (g$syntax-car$14664 g$x$20514)))) '#f))) (g$syntax-cdr$14668 g$x$20508)))) '#f))) ((case-lambda ((g$x$20524) '())) (g$syntax-car$14664 g$x$20508)))) '#f))) g$t$20494)))) (g$get-clause$19830 'parent g$clause*$20404)) ((case-lambda ((g$t$20526) ((case-lambda ((g$ls/false$20528) (if (if g$ls/false$20528 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20528)) '#f) (apply (case-lambda (() (list 'quote (gensym)))) g$ls/false$20528) ((case-lambda ((g$t$20530) ((case-lambda ((g$ls/false$20532) (if (if g$ls/false$20532 (begin '#f (apply (case-lambda ((g$uid$20534) '#t)) g$ls/false$20532)) '#f) (apply (case-lambda ((g$uid$20536) (list 'quote g$uid$20536))) g$ls/false$20532) ((case-lambda ((g$t$20538) ((case-lambda ((g$ls/false$20540) (if (if g$ls/false$20540 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20540)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20540) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20538 '()))))) ((case-lambda ((g$x$20542) '())) g$t$20538)))) g$t$20530)))) ((case-lambda ((g$x$20544) (if (g$syntax-pair?$14656 g$x$20544) (begin '#f ((case-lambda ((g$q$20546) (if g$q$20546 (begin '#f ((case-lambda ((g$r$20548) (if g$r$20548 (begin '#f (append g$q$20546 g$r$20548)) '#f))) ((case-lambda ((g$x$20550) (if (g$syntax-pair?$14656 g$x$20550) (begin '#f ((case-lambda ((g$q$20552) (if g$q$20552 (begin '#f ((case-lambda ((g$r$20554) (if g$r$20554 (begin '#f (append g$q$20552 g$r$20554)) '#f))) ((case-lambda ((g$x$20556) (if (equal? (g$stx->datum$14690 g$x$20556) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20550)))) '#f))) ((case-lambda ((g$x$20558) (list g$x$20558))) (g$syntax-car$14664 g$x$20550)))) '#f))) (g$syntax-cdr$14668 g$x$20544)))) '#f))) ((case-lambda ((g$x$20560) '())) (g$syntax-car$14664 g$x$20544)))) '#f))) g$t$20530)))) g$t$20526)))) ((case-lambda ((g$x$20562) (if (g$syntax-pair?$14656 g$x$20562) (begin '#f ((case-lambda ((g$q$20564) (if g$q$20564 (begin '#f ((case-lambda ((g$r$20566) (if g$r$20566 (begin '#f (append g$q$20564 g$r$20566)) '#f))) ((case-lambda ((g$x$20568) (if (equal? (g$stx->datum$14690 g$x$20568) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20562)))) '#f))) ((case-lambda ((g$x$20570) '())) (g$syntax-car$14664 g$x$20562)))) '#f))) g$t$20526)))) (g$get-clause$19830 'nongenerative g$clause*$20404)) ((case-lambda ((g$t$20572) ((case-lambda ((g$ls/false$20574) (if (if g$ls/false$20574 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20574)) '#f) (apply (case-lambda (() '#t)) g$ls/false$20574) ((case-lambda ((g$t$20576) ((case-lambda ((g$ls/false$20578) (if (if g$ls/false$20578 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20578)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20578) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20576 '()))))) ((case-lambda ((g$x$20580) '())) g$t$20576)))) g$t$20572)))) ((case-lambda ((g$x$20582) (if (g$syntax-pair?$14656 g$x$20582) (begin '#f ((case-lambda ((g$q$20584) (if g$q$20584 (begin '#f ((case-lambda ((g$r$20586) (if g$r$20586 (begin '#f (append g$q$20584 g$r$20586)) '#f))) ((case-lambda ((g$x$20588) (if (g$syntax-pair?$14656 g$x$20588) (begin '#f ((case-lambda ((g$q$20590) (if g$q$20590 (begin '#f ((case-lambda ((g$r$20592) (if g$r$20592 (begin '#f (append g$q$20590 g$r$20592)) '#f))) ((case-lambda ((g$x$20594) (if (equal? (g$stx->datum$14690 g$x$20594) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20588)))) '#f))) ((case-lambda ((g$x$20596) (if (equal? (g$stx->datum$14690 g$x$20596) '#t) (begin '#f '()) '#f))) (g$syntax-car$14664 g$x$20588)))) '#f))) (g$syntax-cdr$14668 g$x$20582)))) '#f))) ((case-lambda ((g$x$20598) '())) (g$syntax-car$14664 g$x$20582)))) '#f))) g$t$20572)))) (g$get-clause$19830 'sealed? g$clause*$20404)) ((case-lambda ((g$t$20600) ((case-lambda ((g$ls/false$20602) (if (if g$ls/false$20602 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20602)) '#f) (apply (case-lambda (() '#t)) g$ls/false$20602) ((case-lambda ((g$t$20604) ((case-lambda ((g$ls/false$20606) (if (if g$ls/false$20606 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20606)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20606) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20604 '()))))) ((case-lambda ((g$x$20608) '())) g$t$20604)))) g$t$20600)))) ((case-lambda ((g$x$20610) (if (g$syntax-pair?$14656 g$x$20610) (begin '#f ((case-lambda ((g$q$20612) (if g$q$20612 (begin '#f ((case-lambda ((g$r$20614) (if g$r$20614 (begin '#f (append g$q$20612 g$r$20614)) '#f))) ((case-lambda ((g$x$20616) (if (g$syntax-pair?$14656 g$x$20616) (begin '#f ((case-lambda ((g$q$20618) (if g$q$20618 (begin '#f ((case-lambda ((g$r$20620) (if g$r$20620 (begin '#f (append g$q$20618 g$r$20620)) '#f))) ((case-lambda ((g$x$20622) (if (equal? (g$stx->datum$14690 g$x$20622) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20616)))) '#f))) ((case-lambda ((g$x$20624) (if (equal? (g$stx->datum$14690 g$x$20624) '#t) (begin '#f '()) '#f))) (g$syntax-car$14664 g$x$20616)))) '#f))) (g$syntax-cdr$14668 g$x$20610)))) '#f))) ((case-lambda ((g$x$20626) '())) (g$syntax-car$14664 g$x$20610)))) '#f))) g$t$20600)))) (g$get-clause$19830 'opaque? g$clause*$20404)) ((case-lambda ((g$t$20628) ((case-lambda ((g$ls/false$20630) (if (if g$ls/false$20630 (begin '#f (apply (case-lambda ((g$field-spec*$20632) '#t)) g$ls/false$20630)) '#f) (apply (case-lambda ((g$field-spec*$20634) (list 'quote (g$convert-field-spec*$20408 g$field-spec*$20634)))) g$ls/false$20630) ((case-lambda ((g$t$20636) ((case-lambda ((g$ls/false$20638) (if (if g$ls/false$20638 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20638)) '#f) (apply (case-lambda (() ''#())) g$ls/false$20638) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20636 '()))))) ((case-lambda ((g$x$20640) '())) g$t$20636)))) g$t$20628)))) ((case-lambda ((g$x$20642) (if (g$syntax-pair?$14656 g$x$20642) (begin '#f ((case-lambda ((g$q$20644) (if g$q$20644 (begin '#f ((case-lambda ((g$r$20646) (if g$r$20646 (begin '#f (append g$q$20644 g$r$20646)) '#f))) ((letrec ((g$f$20648 (case-lambda ((g$x$20650) (if (g$syntax-pair?$14656 g$x$20650) ((case-lambda ((g$cars/f$20652) (if g$cars/f$20652 (begin '#f ((case-lambda ((g$cdrs/f$20654) (if g$cdrs/f$20654 (begin '#f (map cons g$cars/f$20652 g$cdrs/f$20654)) '#f))) (g$f$20648 (g$syntax-cdr$14668 g$x$20650)))) '#f))) ((case-lambda ((g$x$20656) (list g$x$20656))) (g$syntax-car$14664 g$x$20650))) (if (g$syntax-null?$14660 g$x$20650) (list (begin 'field-spec* '())) '#f)))))) g$f$20648) (g$syntax-cdr$14668 g$x$20642)))) '#f))) ((case-lambda ((g$x$20658) '())) (g$syntax-car$14664 g$x$20642)))) '#f))) g$t$20628)))) (g$get-clause$19830 'fields g$clause*$20404)))))) '#f)))) (set! g$foo-rcd-code$19834 (case-lambda ((g$clause*$20362 g$foo-rtd$20363 g$protocol$20364) ((case-lambda ((g$parent-rcd-code$20368) (list 'make-record-constructor-descriptor g$foo-rtd$20363 g$parent-rcd-code$20368 g$protocol$20364))) ((case-lambda ((g$t$20370) ((case-lambda ((g$ls/false$20372) (if (if g$ls/false$20372 (begin '#f (apply (case-lambda ((g$name$20374) '#t)) g$ls/false$20372)) '#f) (apply (case-lambda ((g$name$20376) (list 'record-constructor-descriptor g$name$20376))) g$ls/false$20372) ((case-lambda ((g$t$20378) ((case-lambda ((g$ls/false$20380) (if (if g$ls/false$20380 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20380)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20380) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20378 '()))))) ((case-lambda ((g$x$20382) '())) g$t$20378)))) g$t$20370)))) ((case-lambda ((g$x$20384) (if (g$syntax-pair?$14656 g$x$20384) (begin '#f ((case-lambda ((g$q$20386) (if g$q$20386 (begin '#f ((case-lambda ((g$r$20388) (if g$r$20388 (begin '#f (append g$q$20386 g$r$20388)) '#f))) ((case-lambda ((g$x$20390) (if (g$syntax-pair?$14656 g$x$20390) (begin '#f ((case-lambda ((g$q$20392) (if g$q$20392 (begin '#f ((case-lambda ((g$r$20394) (if g$r$20394 (begin '#f (append g$q$20392 g$r$20394)) '#f))) ((case-lambda ((g$x$20396) (if (equal? (g$stx->datum$14690 g$x$20396) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20390)))) '#f))) ((case-lambda ((g$x$20398) (list g$x$20398))) (g$syntax-car$14664 g$x$20390)))) '#f))) (g$syntax-cdr$14668 g$x$20384)))) '#f))) ((case-lambda ((g$x$20400) '())) (g$syntax-car$14664 g$x$20384)))) '#f))) g$t$20370)))) (g$get-clause$19830 'parent g$clause*$20362)))))) (set! g$get-protocol-code$19836 (case-lambda ((g$clause*$20328) ((case-lambda ((g$t$20330) ((case-lambda ((g$ls/false$20332) (if (if g$ls/false$20332 (begin '#f (apply (case-lambda ((g$expr$20334) '#t)) g$ls/false$20332)) '#f) (apply (case-lambda ((g$expr$20336) g$expr$20336)) g$ls/false$20332) ((case-lambda ((g$t$20338) ((case-lambda ((g$ls/false$20340) (if (if g$ls/false$20340 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20340)) '#f) (apply (case-lambda (() '#f)) g$ls/false$20340) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20338 '()))))) ((case-lambda ((g$x$20342) '())) g$t$20338)))) g$t$20330)))) ((case-lambda ((g$x$20344) (if (g$syntax-pair?$14656 g$x$20344) (begin '#f ((case-lambda ((g$q$20346) (if g$q$20346 (begin '#f ((case-lambda ((g$r$20348) (if g$r$20348 (begin '#f (append g$q$20346 g$r$20348)) '#f))) ((case-lambda ((g$x$20350) (if (g$syntax-pair?$14656 g$x$20350) (begin '#f ((case-lambda ((g$q$20352) (if g$q$20352 (begin '#f ((case-lambda ((g$r$20354) (if g$r$20354 (begin '#f (append g$q$20352 g$r$20354)) '#f))) ((case-lambda ((g$x$20356) (if (equal? (g$stx->datum$14690 g$x$20356) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20350)))) '#f))) ((case-lambda ((g$x$20358) (list g$x$20358))) (g$syntax-car$14664 g$x$20350)))) '#f))) (g$syntax-cdr$14668 g$x$20344)))) '#f))) ((case-lambda ((g$x$20360) '())) (g$syntax-car$14664 g$x$20344)))) '#f))) g$t$20330)))) (g$get-clause$19830 'protocol g$clause*$20328))))) (set! g$get-fields$19838 (case-lambda ((g$clause*$20268) ((case-lambda ((g$t$20270) ((case-lambda ((g$ls/false$20272) (if (if g$ls/false$20272 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20272)) '#f) (apply (case-lambda (() '())) g$ls/false$20272) ((case-lambda ((g$t$20274) ((case-lambda ((g$ls/false$20276) (if (if g$ls/false$20276 (begin '#f (apply (case-lambda ((g$f*$20278) '#t)) g$ls/false$20276)) '#f) (apply (case-lambda ((g$f*$20280) g$f*$20280)) g$ls/false$20276) ((case-lambda ((g$t$20282) ((case-lambda ((g$ls/false$20284) (if (if g$ls/false$20284 (begin '#f (apply (case-lambda ((g$rest$20286) '#t)) g$ls/false$20284)) '#f) (apply (case-lambda ((g$rest$20288) (g$get-fields$19838 g$rest$20288))) g$ls/false$20284) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20282 '()))))) ((case-lambda ((g$x$20290) (if (g$syntax-pair?$14656 g$x$20290) (begin '#f ((case-lambda ((g$q$20292) (if g$q$20292 (begin '#f ((case-lambda ((g$r$20294) (if g$r$20294 (begin '#f (append g$q$20292 g$r$20294)) '#f))) ((case-lambda ((g$x$20296) (list g$x$20296))) (g$syntax-cdr$14668 g$x$20290)))) '#f))) ((case-lambda ((g$x$20298) '())) (g$syntax-car$14664 g$x$20290)))) '#f))) g$t$20282)))) g$t$20274)))) ((case-lambda ((g$x$20300) (if (g$syntax-pair?$14656 g$x$20300) (begin '#f ((case-lambda ((g$q$20302) (if g$q$20302 (begin '#f ((case-lambda ((g$r$20304) (if g$r$20304 (begin '#f (append g$q$20302 g$r$20304)) '#f))) ((case-lambda ((g$x$20306) '())) (g$syntax-cdr$14668 g$x$20300)))) '#f))) ((case-lambda ((g$x$20308) (if (g$syntax-pair?$14656 g$x$20308) (begin '#f ((case-lambda ((g$q$20310) (if g$q$20310 (begin '#f ((case-lambda ((g$r$20312) (if g$r$20312 (begin '#f (append g$q$20310 g$r$20312)) '#f))) ((letrec ((g$f$20314 (case-lambda ((g$x$20316) (if (g$syntax-pair?$14656 g$x$20316) ((case-lambda ((g$cars/f$20318) (if g$cars/f$20318 (begin '#f ((case-lambda ((g$cdrs/f$20320) (if g$cdrs/f$20320 (begin '#f (map cons g$cars/f$20318 g$cdrs/f$20320)) '#f))) (g$f$20314 (g$syntax-cdr$14668 g$x$20316)))) '#f))) ((case-lambda ((g$x$20322) (list g$x$20322))) (g$syntax-car$14664 g$x$20316))) (if (g$syntax-null?$14660 g$x$20316) (list (begin 'f* '())) '#f)))))) g$f$20314) (g$syntax-cdr$14668 g$x$20308)))) '#f))) ((case-lambda ((g$x$20324) (if (g$id?$14670 g$x$20324) (if (g$free-id=?$14678 g$x$20324 (g$scheme-stx$15099 'fields)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$20308)))) '#f))) (g$syntax-car$14664 g$x$20300)))) '#f))) g$t$20274)))) g$t$20270)))) ((case-lambda ((g$x$20326) (if (equal? (g$stx->datum$14690 g$x$20326) '()) (begin '#f '()) '#f))) g$t$20270)))) g$clause*$20268)))) (set! g$get-mutator-indices$19840 (case-lambda ((g$fields$20210) (letrec ((g$f$20212 (case-lambda ((g$fields$20214 g$i$20215) ((case-lambda ((g$t$20218) ((case-lambda ((g$ls/false$20220) (if (if g$ls/false$20220 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20220)) '#f) (apply (case-lambda (() '())) g$ls/false$20220) ((case-lambda ((g$t$20222) ((case-lambda ((g$ls/false$20224) (if (if g$ls/false$20224 (begin '#f (apply (case-lambda ((g$rest$20226) '#t)) g$ls/false$20224)) '#f) (apply (case-lambda ((g$rest$20228) (cons g$i$20215 (g$f$20212 g$rest$20228 (+ g$i$20215 '1))))) g$ls/false$20224) ((case-lambda ((g$t$20230) ((case-lambda ((g$ls/false$20232) (if (if g$ls/false$20232 (begin '#f (apply (case-lambda ((g$rest$20234) '#t)) g$ls/false$20232)) '#f) (apply (case-lambda ((g$rest$20236) (g$f$20212 g$rest$20236 (+ g$i$20215 '1)))) g$ls/false$20232) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20230 '()))))) ((case-lambda ((g$x$20238) (if (g$syntax-pair?$14656 g$x$20238) (begin '#f ((case-lambda ((g$q$20240) (if g$q$20240 (begin '#f ((case-lambda ((g$r$20242) (if g$r$20242 (begin '#f (append g$q$20240 g$r$20242)) '#f))) ((case-lambda ((g$x$20244) (list g$x$20244))) (g$syntax-cdr$14668 g$x$20238)))) '#f))) ((case-lambda ((g$x$20246) '())) (g$syntax-car$14664 g$x$20238)))) '#f))) g$t$20230)))) g$t$20222)))) ((case-lambda ((g$x$20248) (if (g$syntax-pair?$14656 g$x$20248) (begin '#f ((case-lambda ((g$q$20250) (if g$q$20250 (begin '#f ((case-lambda ((g$r$20252) (if g$r$20252 (begin '#f (append g$q$20250 g$r$20252)) '#f))) ((case-lambda ((g$x$20254) (list g$x$20254))) (g$syntax-cdr$14668 g$x$20248)))) '#f))) ((case-lambda ((g$x$20256) (if (g$syntax-pair?$14656 g$x$20256) (begin '#f ((case-lambda ((g$q$20258) (if g$q$20258 (begin '#f ((case-lambda ((g$r$20260) (if g$r$20260 (begin '#f (append g$q$20258 g$r$20260)) '#f))) ((case-lambda ((g$x$20262) '())) (g$syntax-cdr$14668 g$x$20256)))) '#f))) ((case-lambda ((g$x$20264) (if (g$id?$14670 g$x$20264) (if (g$free-id=?$14678 g$x$20264 (g$scheme-stx$15099 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$20256)))) '#f))) (g$syntax-car$14664 g$x$20248)))) '#f))) g$t$20222)))) g$t$20218)))) ((case-lambda ((g$x$20266) (if (equal? (g$stx->datum$14690 g$x$20266) '()) (begin '#f '()) '#f))) g$t$20218)))) g$fields$20214))))) (g$f$20212 g$fields$20210 '0))))) (set! g$get-mutators$19842 (case-lambda ((g$foo$20072 g$fields$20073 g$ctxt$20074) ((case-lambda ((g$gen-name$20078) (begin (set! g$gen-name$20078 (case-lambda ((g$x$20080) (g$datum->syntax$15326 g$ctxt$20074 (string->symbol (string-append '"set-" (symbol->string (g$syntax->datum$15328 g$foo$20072)) '"-" (symbol->string (g$syntax->datum$15328 g$x$20080)) '"!")))))) (letrec ((g$f$20082 (case-lambda ((g$fields$20084) ((case-lambda ((g$t$20086) ((case-lambda ((g$ls/false$20088) (if (if g$ls/false$20088 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$20088)) '#f) (apply (case-lambda (() '())) g$ls/false$20088) ((case-lambda ((g$t$20090) ((case-lambda ((g$ls/false$20092) (if (if g$ls/false$20092 (begin '#f (apply (case-lambda ((g$name$20094 g$accessor$20095 g$mutator$20096 g$rest$20097) '#t)) g$ls/false$20092)) '#f) (apply (case-lambda ((g$name$20102 g$accessor$20103 g$mutator$20104 g$rest$20105) (cons g$mutator$20104 (g$f$20082 g$rest$20105)))) g$ls/false$20092) ((case-lambda ((g$t$20110) ((case-lambda ((g$ls/false$20112) (if (if g$ls/false$20112 (begin '#f (apply (case-lambda ((g$name$20114 g$rest$20115) '#t)) g$ls/false$20112)) '#f) (apply (case-lambda ((g$name$20118 g$rest$20119) (cons (g$gen-name$20078 g$name$20118) (g$f$20082 g$rest$20119)))) g$ls/false$20112) ((case-lambda ((g$t$20122) ((case-lambda ((g$ls/false$20124) (if (if g$ls/false$20124 (begin '#f (apply (case-lambda ((g$rest$20126) '#t)) g$ls/false$20124)) '#f) (apply (case-lambda ((g$rest$20128) (g$f$20082 g$rest$20128))) g$ls/false$20124) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20122 '()))))) ((case-lambda ((g$x$20130) (if (g$syntax-pair?$14656 g$x$20130) (begin '#f ((case-lambda ((g$q$20132) (if g$q$20132 (begin '#f ((case-lambda ((g$r$20134) (if g$r$20134 (begin '#f (append g$q$20132 g$r$20134)) '#f))) ((case-lambda ((g$x$20136) (list g$x$20136))) (g$syntax-cdr$14668 g$x$20130)))) '#f))) ((case-lambda ((g$x$20138) '())) (g$syntax-car$14664 g$x$20130)))) '#f))) g$t$20122)))) g$t$20110)))) ((case-lambda ((g$x$20140) (if (g$syntax-pair?$14656 g$x$20140) (begin '#f ((case-lambda ((g$q$20142) (if g$q$20142 (begin '#f ((case-lambda ((g$r$20144) (if g$r$20144 (begin '#f (append g$q$20142 g$r$20144)) '#f))) ((case-lambda ((g$x$20146) (list g$x$20146))) (g$syntax-cdr$14668 g$x$20140)))) '#f))) ((case-lambda ((g$x$20148) (if (g$syntax-pair?$14656 g$x$20148) (begin '#f ((case-lambda ((g$q$20150) (if g$q$20150 (begin '#f ((case-lambda ((g$r$20152) (if g$r$20152 (begin '#f (append g$q$20150 g$r$20152)) '#f))) ((case-lambda ((g$x$20154) (if (g$syntax-pair?$14656 g$x$20154) (begin '#f ((case-lambda ((g$q$20156) (if g$q$20156 (begin '#f ((case-lambda ((g$r$20158) (if g$r$20158 (begin '#f (append g$q$20156 g$r$20158)) '#f))) ((case-lambda ((g$x$20160) (if (equal? (g$stx->datum$14690 g$x$20160) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20154)))) '#f))) ((case-lambda ((g$x$20162) (list g$x$20162))) (g$syntax-car$14664 g$x$20154)))) '#f))) (g$syntax-cdr$14668 g$x$20148)))) '#f))) ((case-lambda ((g$x$20164) (if (g$id?$14670 g$x$20164) (if (g$free-id=?$14678 g$x$20164 (g$scheme-stx$15099 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$20148)))) '#f))) (g$syntax-car$14664 g$x$20140)))) '#f))) g$t$20110)))) g$t$20090)))) ((case-lambda ((g$x$20166) (if (g$syntax-pair?$14656 g$x$20166) (begin '#f ((case-lambda ((g$q$20168) (if g$q$20168 (begin '#f ((case-lambda ((g$r$20170) (if g$r$20170 (begin '#f (append g$q$20168 g$r$20170)) '#f))) ((case-lambda ((g$x$20172) (list g$x$20172))) (g$syntax-cdr$14668 g$x$20166)))) '#f))) ((case-lambda ((g$x$20174) (if (g$syntax-pair?$14656 g$x$20174) (begin '#f ((case-lambda ((g$q$20176) (if g$q$20176 (begin '#f ((case-lambda ((g$r$20178) (if g$r$20178 (begin '#f (append g$q$20176 g$r$20178)) '#f))) ((case-lambda ((g$x$20180) (if (g$syntax-pair?$14656 g$x$20180) (begin '#f ((case-lambda ((g$q$20182) (if g$q$20182 (begin '#f ((case-lambda ((g$r$20184) (if g$r$20184 (begin '#f (append g$q$20182 g$r$20184)) '#f))) ((case-lambda ((g$x$20186) (if (g$syntax-pair?$14656 g$x$20186) (begin '#f ((case-lambda ((g$q$20188) (if g$q$20188 (begin '#f ((case-lambda ((g$r$20190) (if g$r$20190 (begin '#f (append g$q$20188 g$r$20190)) '#f))) ((case-lambda ((g$x$20192) (if (g$syntax-pair?$14656 g$x$20192) (begin '#f ((case-lambda ((g$q$20194) (if g$q$20194 (begin '#f ((case-lambda ((g$r$20196) (if g$r$20196 (begin '#f (append g$q$20194 g$r$20196)) '#f))) ((case-lambda ((g$x$20198) (if (equal? (g$stx->datum$14690 g$x$20198) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20192)))) '#f))) ((case-lambda ((g$x$20200) (list g$x$20200))) (g$syntax-car$14664 g$x$20192)))) '#f))) (g$syntax-cdr$14668 g$x$20186)))) '#f))) ((case-lambda ((g$x$20202) (list g$x$20202))) (g$syntax-car$14664 g$x$20186)))) '#f))) (g$syntax-cdr$14668 g$x$20180)))) '#f))) ((case-lambda ((g$x$20204) (list g$x$20204))) (g$syntax-car$14664 g$x$20180)))) '#f))) (g$syntax-cdr$14668 g$x$20174)))) '#f))) ((case-lambda ((g$x$20206) (if (g$id?$14670 g$x$20206) (if (g$free-id=?$14678 g$x$20206 (g$scheme-stx$15099 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$20174)))) '#f))) (g$syntax-car$14664 g$x$20166)))) '#f))) g$t$20090)))) g$t$20086)))) ((case-lambda ((g$x$20208) (if (equal? (g$stx->datum$14690 g$x$20208) '()) (begin '#f '()) '#f))) g$t$20086)))) g$fields$20084))))) (g$f$20082 g$fields$20073))))) '#f)))) (set! g$get-accessors$19844 (case-lambda ((g$foo$19900 g$fields$19901 g$ctxt$19902) ((case-lambda ((g$gen-name$19906) (begin (set! g$gen-name$19906 (case-lambda ((g$x$19908) (g$datum->syntax$15326 g$ctxt$19902 (string->symbol (string-append (symbol->string (g$syntax->datum$15328 g$foo$19900)) '"-" (symbol->string (g$syntax->datum$15328 g$x$19908)))))))) (map (case-lambda ((g$field$19910) ((case-lambda ((g$t$19912) ((case-lambda ((g$ls/false$19914) (if (if g$ls/false$19914 (begin '#f (apply (case-lambda ((g$name$19916 g$accessor$19917 g$mutator$19918) (g$id?$14670 g$accessor$19917))) g$ls/false$19914)) '#f) (apply (case-lambda ((g$name$19922 g$accessor$19923 g$mutator$19924) g$accessor$19923)) g$ls/false$19914) ((case-lambda ((g$t$19928) ((case-lambda ((g$ls/false$19930) (if (if g$ls/false$19930 (begin '#f (apply (case-lambda ((g$name$19932 g$accessor$19933) (g$id?$14670 g$accessor$19933))) g$ls/false$19930)) '#f) (apply (case-lambda ((g$name$19936 g$accessor$19937) g$accessor$19937)) g$ls/false$19930) ((case-lambda ((g$t$19940) ((case-lambda ((g$ls/false$19942) (if (if g$ls/false$19942 (begin '#f (apply (case-lambda ((g$name$19944) (g$id?$14670 g$name$19944))) g$ls/false$19942)) '#f) (apply (case-lambda ((g$name$19946) (g$gen-name$19906 g$name$19946))) g$ls/false$19942) ((case-lambda ((g$t$19948) ((case-lambda ((g$ls/false$19950) (if (if g$ls/false$19950 (begin '#f (apply (case-lambda ((g$name$19952) (g$id?$14670 g$name$19952))) g$ls/false$19950)) '#f) (apply (case-lambda ((g$name$19954) (g$gen-name$19906 g$name$19954))) g$ls/false$19950) ((case-lambda ((g$t$19956) ((case-lambda ((g$ls/false$19958) (if (if g$ls/false$19958 (begin '#f (apply (case-lambda ((g$name$19960) (g$id?$14670 g$name$19960))) g$ls/false$19958)) '#f) (apply (case-lambda ((g$name$19962) (g$gen-name$19906 g$name$19962))) g$ls/false$19958) ((case-lambda ((g$t$19964) ((case-lambda ((g$ls/false$19966) (if (if g$ls/false$19966 (begin '#f (apply (case-lambda ((g$others$19968) '#t)) g$ls/false$19966)) '#f) (apply (case-lambda ((g$others$19970) (error 'expander '"invalid field spec" (g$strip$14688 g$field$19910 '())))) g$ls/false$19966) (error 'expander '"invalid syntax" (g$strip$14688 g$t$19964 '()))))) ((case-lambda ((g$x$19972) (list g$x$19972))) g$t$19964)))) g$t$19956)))) ((case-lambda ((g$x$19974) (list g$x$19974))) g$t$19956)))) g$t$19948)))) ((case-lambda ((g$x$19976) (if (g$syntax-pair?$14656 g$x$19976) (begin '#f ((case-lambda ((g$q$19978) (if g$q$19978 (begin '#f ((case-lambda ((g$r$19980) (if g$r$19980 (begin '#f (append g$q$19978 g$r$19980)) '#f))) ((case-lambda ((g$x$19982) (if (g$syntax-pair?$14656 g$x$19982) (begin '#f ((case-lambda ((g$q$19984) (if g$q$19984 (begin '#f ((case-lambda ((g$r$19986) (if g$r$19986 (begin '#f (append g$q$19984 g$r$19986)) '#f))) ((case-lambda ((g$x$19988) (if (equal? (g$stx->datum$14690 g$x$19988) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$19982)))) '#f))) ((case-lambda ((g$x$19990) (list g$x$19990))) (g$syntax-car$14664 g$x$19982)))) '#f))) (g$syntax-cdr$14668 g$x$19976)))) '#f))) ((case-lambda ((g$x$19992) (if (g$id?$14670 g$x$19992) (if (g$free-id=?$14678 g$x$19992 (g$scheme-stx$15099 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19976)))) '#f))) g$t$19948)))) g$t$19940)))) ((case-lambda ((g$x$19994) (if (g$syntax-pair?$14656 g$x$19994) (begin '#f ((case-lambda ((g$q$19996) (if g$q$19996 (begin '#f ((case-lambda ((g$r$19998) (if g$r$19998 (begin '#f (append g$q$19996 g$r$19998)) '#f))) ((case-lambda ((g$x$20000) (if (g$syntax-pair?$14656 g$x$20000) (begin '#f ((case-lambda ((g$q$20002) (if g$q$20002 (begin '#f ((case-lambda ((g$r$20004) (if g$r$20004 (begin '#f (append g$q$20002 g$r$20004)) '#f))) ((case-lambda ((g$x$20006) (if (equal? (g$stx->datum$14690 g$x$20006) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20000)))) '#f))) ((case-lambda ((g$x$20008) (list g$x$20008))) (g$syntax-car$14664 g$x$20000)))) '#f))) (g$syntax-cdr$14668 g$x$19994)))) '#f))) ((case-lambda ((g$x$20010) (if (g$id?$14670 g$x$20010) (if (g$free-id=?$14678 g$x$20010 (g$scheme-stx$15099 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$19994)))) '#f))) g$t$19940)))) g$t$19928)))) ((case-lambda ((g$x$20012) (if (g$syntax-pair?$14656 g$x$20012) (begin '#f ((case-lambda ((g$q$20014) (if g$q$20014 (begin '#f ((case-lambda ((g$r$20016) (if g$r$20016 (begin '#f (append g$q$20014 g$r$20016)) '#f))) ((case-lambda ((g$x$20018) (if (g$syntax-pair?$14656 g$x$20018) (begin '#f ((case-lambda ((g$q$20020) (if g$q$20020 (begin '#f ((case-lambda ((g$r$20022) (if g$r$20022 (begin '#f (append g$q$20020 g$r$20022)) '#f))) ((case-lambda ((g$x$20024) (if (g$syntax-pair?$14656 g$x$20024) (begin '#f ((case-lambda ((g$q$20026) (if g$q$20026 (begin '#f ((case-lambda ((g$r$20028) (if g$r$20028 (begin '#f (append g$q$20026 g$r$20028)) '#f))) ((case-lambda ((g$x$20030) (if (equal? (g$stx->datum$14690 g$x$20030) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20024)))) '#f))) ((case-lambda ((g$x$20032) (list g$x$20032))) (g$syntax-car$14664 g$x$20024)))) '#f))) (g$syntax-cdr$14668 g$x$20018)))) '#f))) ((case-lambda ((g$x$20034) (list g$x$20034))) (g$syntax-car$14664 g$x$20018)))) '#f))) (g$syntax-cdr$14668 g$x$20012)))) '#f))) ((case-lambda ((g$x$20036) (if (g$id?$14670 g$x$20036) (if (g$free-id=?$14678 g$x$20036 (g$scheme-stx$15099 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$20012)))) '#f))) g$t$19928)))) g$t$19912)))) ((case-lambda ((g$x$20038) (if (g$syntax-pair?$14656 g$x$20038) (begin '#f ((case-lambda ((g$q$20040) (if g$q$20040 (begin '#f ((case-lambda ((g$r$20042) (if g$r$20042 (begin '#f (append g$q$20040 g$r$20042)) '#f))) ((case-lambda ((g$x$20044) (if (g$syntax-pair?$14656 g$x$20044) (begin '#f ((case-lambda ((g$q$20046) (if g$q$20046 (begin '#f ((case-lambda ((g$r$20048) (if g$r$20048 (begin '#f (append g$q$20046 g$r$20048)) '#f))) ((case-lambda ((g$x$20050) (if (g$syntax-pair?$14656 g$x$20050) (begin '#f ((case-lambda ((g$q$20052) (if g$q$20052 (begin '#f ((case-lambda ((g$r$20054) (if g$r$20054 (begin '#f (append g$q$20052 g$r$20054)) '#f))) ((case-lambda ((g$x$20056) (if (g$syntax-pair?$14656 g$x$20056) (begin '#f ((case-lambda ((g$q$20058) (if g$q$20058 (begin '#f ((case-lambda ((g$r$20060) (if g$r$20060 (begin '#f (append g$q$20058 g$r$20060)) '#f))) ((case-lambda ((g$x$20062) (if (equal? (g$stx->datum$14690 g$x$20062) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$20056)))) '#f))) ((case-lambda ((g$x$20064) (list g$x$20064))) (g$syntax-car$14664 g$x$20056)))) '#f))) (g$syntax-cdr$14668 g$x$20050)))) '#f))) ((case-lambda ((g$x$20066) (list g$x$20066))) (g$syntax-car$14664 g$x$20050)))) '#f))) (g$syntax-cdr$14668 g$x$20044)))) '#f))) ((case-lambda ((g$x$20068) (list g$x$20068))) (g$syntax-car$14664 g$x$20044)))) '#f))) (g$syntax-cdr$14668 g$x$20038)))) '#f))) ((case-lambda ((g$x$20070) (if (g$id?$14670 g$x$20070) (if (g$free-id=?$14678 g$x$20070 (g$scheme-stx$15099 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$14664 g$x$20038)))) '#f))) g$t$19912)))) g$field$19910))) g$fields$19901)))) '#f)))) (set! g$enumerate$19846 (case-lambda ((g$ls$19892) (letrec ((g$f$19894 (case-lambda ((g$ls$19896 g$i$19897) (if (null? g$ls$19896) '() (cons g$i$19897 (g$f$19894 (cdr g$ls$19896) (+ g$i$19897 '1)))))))) (g$f$19894 g$ls$19892 '0))))) (set! g$do-define-record$19848 (case-lambda ((g$ctxt$19850 g$namespec$19851 g$clause*$19852) ((case-lambda ((g$foo$19856) ((case-lambda ((g$foo-rtd$19858) ((case-lambda ((g$foo-rcd$19860) ((case-lambda ((g$protocol$19862) ((case-lambda ((g$make-foo$19864) ((case-lambda ((g$fields$19866) ((case-lambda ((g$idx*$19868) ((case-lambda ((g$foo-x*$19870) ((case-lambda ((g$set-foo-x!*$19872) ((case-lambda ((g$set-foo-idx*$19874) ((case-lambda ((g$foo?$19876) ((case-lambda ((g$foo-rtd-code$19878) ((case-lambda ((g$foo-rcd-code$19880) ((case-lambda ((g$protocol-code$19882) ((case-lambda (() (g$bless$15133 (cons 'begin (cons (list 'define g$foo-rtd$19858 g$foo-rtd-code$19878) (cons (list 'define g$protocol$19862 g$protocol-code$19882) (cons (list 'define g$foo-rcd$19860 g$foo-rcd-code$19880) (cons (list 'define-syntax g$foo$19856 (list 'list ''$rtd (list 'syntax g$foo-rtd$19858) (list 'syntax g$foo-rcd$19860))) (cons (list 'define g$foo?$19876 (list 'record-predicate g$foo-rtd$19858)) (cons (list 'define g$make-foo$19864 (list 'record-constructor g$foo-rcd$19860)) (append (map (case-lambda ((g$foo-x$19884 g$idx$19885) (list 'define g$foo-x$19884 (list 'record-accessor g$foo-rtd$19858 g$idx$19885)))) g$foo-x*$19870 g$idx*$19868) (map (case-lambda ((g$set-foo-x!$19888 g$idx$19889) (list 'define g$set-foo-x!$19888 (list 'record-mutator g$foo-rtd$19858 g$idx$19889)))) g$set-foo-x!*$19872 g$set-foo-idx*$19874))))))))))))))) (g$get-protocol-code$19836 g$clause*$19852)))) (g$foo-rcd-code$19834 g$clause*$19852 g$foo-rtd$19858 g$protocol$19862)))) (g$foo-rtd-code$19832 g$ctxt$19850 g$foo$19856 g$clause*$19852)))) (g$get-record-predicate-name$19828 g$namespec$19851 g$ctxt$19850)))) (g$get-mutator-indices$19840 g$fields$19866)))) (g$get-mutators$19842 g$foo$19856 g$fields$19866 g$ctxt$19850)))) (g$get-accessors$19844 g$foo$19856 g$fields$19866 g$ctxt$19850)))) (g$enumerate$19846 g$fields$19866)))) (g$get-fields$19838 g$clause*$19852)))) (g$get-record-constructor-name$19826 g$namespec$19851 g$ctxt$19850)))) (gensym)))) (gensym)))) (gensym)))) (g$get-record-name$19824 g$namespec$19851))))) ((case-lambda ((g$t$20876) ((case-lambda ((g$ls/false$20878) (if (if g$ls/false$20878 (begin '#f (apply (case-lambda ((g$ctxt$20880 g$namespec$20881 g$clause*$20882) '#t)) g$ls/false$20878)) '#f) (apply (case-lambda ((g$ctxt$20886 g$namespec$20887 g$clause*$20888) (g$do-define-record$19848 g$ctxt$20886 g$namespec$20887 g$clause*$20888))) g$ls/false$20878) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20876 '()))))) ((case-lambda ((g$x$20892) (if (g$syntax-pair?$14656 g$x$20892) (begin '#f ((case-lambda ((g$q$20894) (if g$q$20894 (begin '#f ((case-lambda ((g$r$20896) (if g$r$20896 (begin '#f (append g$q$20894 g$r$20896)) '#f))) ((case-lambda ((g$x$20898) (if (g$syntax-pair?$14656 g$x$20898) (begin '#f ((case-lambda ((g$q$20900) (if g$q$20900 (begin '#f ((case-lambda ((g$r$20902) (if g$r$20902 (begin '#f (append g$q$20900 g$r$20902)) '#f))) ((letrec ((g$f$20904 (case-lambda ((g$x$20906) (if (g$syntax-pair?$14656 g$x$20906) ((case-lambda ((g$cars/f$20908) (if g$cars/f$20908 (begin '#f ((case-lambda ((g$cdrs/f$20910) (if g$cdrs/f$20910 (begin '#f (map cons g$cars/f$20908 g$cdrs/f$20910)) '#f))) (g$f$20904 (g$syntax-cdr$14668 g$x$20906)))) '#f))) ((case-lambda ((g$x$20912) (list g$x$20912))) (g$syntax-car$14664 g$x$20906))) (if (g$syntax-null?$14660 g$x$20906) (list (begin 'clause* '())) '#f)))))) g$f$20904) (g$syntax-cdr$14668 g$x$20898)))) '#f))) ((case-lambda ((g$x$20914) (list g$x$20914))) (g$syntax-car$14664 g$x$20898)))) '#f))) (g$syntax-cdr$14668 g$x$20892)))) '#f))) ((case-lambda ((g$x$20916) (list g$x$20916))) (g$syntax-car$14664 g$x$20892)))) '#f))) g$t$20876)))) g$x$19820)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$define-condition-type-macro$15179 (case-lambda ((g$x$20918) ((case-lambda ((g$mkname$20920) (begin (set! g$mkname$20920 (case-lambda ((g$name$20922 g$suffix$20923) (g$datum->syntax$15326 g$name$20922 (string->symbol (string-append (symbol->string (g$syntax->datum$15328 g$name$20922)) g$suffix$20923)))))) ((case-lambda ((g$t$20926) ((case-lambda ((g$ls/false$20928) (if (if g$ls/false$20928 (begin '#f (apply (case-lambda ((g$ctxt$20930 g$name$20931 g$super$20932 g$constructor$20933 g$predicate$20934 g$field*$20935 g$accessor*$20936) (if (g$id?$14670 g$name$20931) (if (g$id?$14670 g$super$20932) (if (g$id?$14670 g$constructor$20933) (if (g$id?$14670 g$predicate$20934) (if (for-all g$id?$14670 g$field*$20935) (begin '#f (for-all g$id?$14670 g$accessor*$20936)) '#f) '#f) '#f) '#f) '#f))) g$ls/false$20928)) '#f) (apply (case-lambda ((g$ctxt$20944 g$name$20945 g$super$20946 g$constructor$20947 g$predicate$20948 g$field*$20949 g$accessor*$20950) ((case-lambda ((g$aux-accessor*$20958) (g$bless$15133 (cons 'begin (cons (cons 'define-record-type (cons (list g$name$20945 g$constructor$20947 (gensym)) (cons (list 'parent g$super$20946) (cons (cons 'fields (map (case-lambda ((g$field$20960 g$aux$20961) (list 'immutable g$field$20960 g$aux$20961))) g$field*$20949 g$aux-accessor*$20958)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$predicate$20948 (list 'condition-predicate (list 'record-type-descriptor g$name$20945))) (map (case-lambda ((g$accessor$20964 g$aux$20965) (list 'define g$accessor$20964 (list 'condition-accessor (list 'record-type-descriptor g$name$20945) g$aux$20965)))) g$accessor*$20950 g$aux-accessor*$20958))))))) (map (case-lambda ((g$x$20968) (gensym))) g$accessor*$20950)))) g$ls/false$20928) (error 'expander '"invalid syntax" (g$strip$14688 g$t$20926 '()))))) ((case-lambda ((g$x$20970) (if (g$syntax-pair?$14656 g$x$20970) (begin '#f ((case-lambda ((g$q$20972) (if g$q$20972 (begin '#f ((case-lambda ((g$r$20974) (if g$r$20974 (begin '#f (append g$q$20972 g$r$20974)) '#f))) ((case-lambda ((g$x$20976) (if (g$syntax-pair?$14656 g$x$20976) (begin '#f ((case-lambda ((g$q$20978) (if g$q$20978 (begin '#f ((case-lambda ((g$r$20980) (if g$r$20980 (begin '#f (append g$q$20978 g$r$20980)) '#f))) ((case-lambda ((g$x$20982) (if (g$syntax-pair?$14656 g$x$20982) (begin '#f ((case-lambda ((g$q$20984) (if g$q$20984 (begin '#f ((case-lambda ((g$r$20986) (if g$r$20986 (begin '#f (append g$q$20984 g$r$20986)) '#f))) ((case-lambda ((g$x$20988) (if (g$syntax-pair?$14656 g$x$20988) (begin '#f ((case-lambda ((g$q$20990) (if g$q$20990 (begin '#f ((case-lambda ((g$r$20992) (if g$r$20992 (begin '#f (append g$q$20990 g$r$20992)) '#f))) ((case-lambda ((g$x$20994) (if (g$syntax-pair?$14656 g$x$20994) (begin '#f ((case-lambda ((g$q$20996) (if g$q$20996 (begin '#f ((case-lambda ((g$r$20998) (if g$r$20998 (begin '#f (append g$q$20996 g$r$20998)) '#f))) ((letrec ((g$f$21000 (case-lambda ((g$x$21002) (if (g$syntax-pair?$14656 g$x$21002) ((case-lambda ((g$cars/f$21004) (if g$cars/f$21004 (begin '#f ((case-lambda ((g$cdrs/f$21006) (if g$cdrs/f$21006 (begin '#f (map cons g$cars/f$21004 g$cdrs/f$21006)) '#f))) (g$f$21000 (g$syntax-cdr$14668 g$x$21002)))) '#f))) ((case-lambda ((g$x$21008) (if (g$syntax-pair?$14656 g$x$21008) (begin '#f ((case-lambda ((g$q$21010) (if g$q$21010 (begin '#f ((case-lambda ((g$r$21012) (if g$r$21012 (begin '#f (append g$q$21010 g$r$21012)) '#f))) ((case-lambda ((g$x$21014) (if (g$syntax-pair?$14656 g$x$21014) (begin '#f ((case-lambda ((g$q$21016) (if g$q$21016 (begin '#f ((case-lambda ((g$r$21018) (if g$r$21018 (begin '#f (append g$q$21016 g$r$21018)) '#f))) ((case-lambda ((g$x$21020) (if (equal? (g$stx->datum$14690 g$x$21020) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$21014)))) '#f))) ((case-lambda ((g$x$21022) (list g$x$21022))) (g$syntax-car$14664 g$x$21014)))) '#f))) (g$syntax-cdr$14668 g$x$21008)))) '#f))) ((case-lambda ((g$x$21024) (list g$x$21024))) (g$syntax-car$14664 g$x$21008)))) '#f))) (g$syntax-car$14664 g$x$21002))) (if (g$syntax-null?$14660 g$x$21002) (list (begin 'field* '()) (begin 'accessor* '())) '#f)))))) g$f$21000) (g$syntax-cdr$14668 g$x$20994)))) '#f))) ((case-lambda ((g$x$21026) (list g$x$21026))) (g$syntax-car$14664 g$x$20994)))) '#f))) (g$syntax-cdr$14668 g$x$20988)))) '#f))) ((case-lambda ((g$x$21028) (list g$x$21028))) (g$syntax-car$14664 g$x$20988)))) '#f))) (g$syntax-cdr$14668 g$x$20982)))) '#f))) ((case-lambda ((g$x$21030) (list g$x$21030))) (g$syntax-car$14664 g$x$20982)))) '#f))) (g$syntax-cdr$14668 g$x$20976)))) '#f))) ((case-lambda ((g$x$21032) (list g$x$21032))) (g$syntax-car$14664 g$x$20976)))) '#f))) (g$syntax-cdr$14668 g$x$20970)))) '#f))) ((case-lambda ((g$x$21034) (list g$x$21034))) (g$syntax-car$14664 g$x$20970)))) '#f))) g$t$20926)))) g$x$20918)))) '#f)))) (set! g$incorrect-usage-macro$15181 (case-lambda ((g$e$21036) (error 'expander '"incorrect usage of auxilary keyword" (g$strip$14688 g$e$21036 '()))))) (set! g$parameterize-transformer$15183 (case-lambda ((g$e$21038 g$r$21039 g$mr$21040) ((case-lambda ((g$t$21044) ((case-lambda ((g$ls/false$21046) (if (if g$ls/false$21046 (begin '#f (apply (case-lambda ((g$b$21048 g$b*$21049) '#t)) g$ls/false$21046)) '#f) (apply (case-lambda ((g$b$21052 g$b*$21053) (g$chi-internal$15233 (cons g$b$21052 g$b*$21053) g$r$21039 g$mr$21040))) g$ls/false$21046) ((case-lambda ((g$t$21056) ((case-lambda ((g$ls/false$21058) (if (if g$ls/false$21058 (begin '#f (apply (case-lambda ((g$olhs*$21060 g$orhs*$21061 g$b$21062 g$b*$21063) '#t)) g$ls/false$21058)) '#f) (apply (case-lambda ((g$olhs*$21068 g$orhs*$21069 g$b$21070 g$b*$21071) ((case-lambda ((g$lhs*$21076 g$rhs*$21077 g$t*$21078 g$swap$21079) (g$g$build-let$14426$14557 '#f (append g$lhs*$21076 g$rhs*$21077) (append (g$chi-expr*$15213 g$olhs*$21068 g$r$21039 g$mr$21040) (g$chi-expr*$15213 g$orhs*$21069 g$r$21039 g$mr$21040)) (g$g$build-let$14426$14557 '#f (list g$swap$21079) (list (g$g$build-lambda$14422$14559 '#f '() (g$g$build-sequence$14490$14553 '#f (map (case-lambda ((g$t$21084 g$lhs$21085 g$rhs$21086) (g$g$build-let$14426$14557 '#f (list g$t$21084) (list (list g$lhs$21085)) (g$g$build-sequence$14490$14553 '#f (list (list g$lhs$21085 g$rhs$21086) (list 'set! g$rhs$21086 g$t$21084)))))) g$t*$21078 g$lhs*$21076 g$rhs*$21077)))) (list '(primitive dynamic-wind) g$swap$21079 (g$g$build-lambda$14422$14559 '#f '() (g$chi-internal$15233 (cons g$b$21070 g$b*$21071) g$r$21039 g$mr$21040)) g$swap$21079))))) (map (case-lambda ((g$x$21090) (g$gen-lexical$14580 'lhs))) g$olhs*$21068) (map (case-lambda ((g$x$21092) (g$gen-lexical$14580 'rhs))) g$olhs*$21068) (map (case-lambda ((g$x$21094) (g$gen-lexical$14580 't))) g$olhs*$21068) (g$gen-lexical$14580 'swap)))) g$ls/false$21058) (error 'expander '"invalid syntax" (g$strip$14688 g$t$21056 '()))))) ((case-lambda ((g$x$21096) (if (g$syntax-pair?$14656 g$x$21096) (begin '#f ((case-lambda ((g$q$21098) (if g$q$21098 (begin '#f ((case-lambda ((g$r$21100) (if g$r$21100 (begin '#f (append g$q$21098 g$r$21100)) '#f))) ((case-lambda ((g$x$21102) (if (g$syntax-pair?$14656 g$x$21102) (begin '#f ((case-lambda ((g$q$21104) (if g$q$21104 (begin '#f ((case-lambda ((g$r$21106) (if g$r$21106 (begin '#f (append g$q$21104 g$r$21106)) '#f))) ((case-lambda ((g$x$21108) (if (g$syntax-pair?$14656 g$x$21108) (begin '#f ((case-lambda ((g$q$21110) (if g$q$21110 (begin '#f ((case-lambda ((g$r$21112) (if g$r$21112 (begin '#f (append g$q$21110 g$r$21112)) '#f))) ((letrec ((g$f$21114 (case-lambda ((g$x$21116) (if (g$syntax-pair?$14656 g$x$21116) ((case-lambda ((g$cars/f$21118) (if g$cars/f$21118 (begin '#f ((case-lambda ((g$cdrs/f$21120) (if g$cdrs/f$21120 (begin '#f (map cons g$cars/f$21118 g$cdrs/f$21120)) '#f))) (g$f$21114 (g$syntax-cdr$14668 g$x$21116)))) '#f))) ((case-lambda ((g$x$21122) (list g$x$21122))) (g$syntax-car$14664 g$x$21116))) (if (g$syntax-null?$14660 g$x$21116) (list (begin 'b* '())) '#f)))))) g$f$21114) (g$syntax-cdr$14668 g$x$21108)))) '#f))) ((case-lambda ((g$x$21124) (list g$x$21124))) (g$syntax-car$14664 g$x$21108)))) '#f))) (g$syntax-cdr$14668 g$x$21102)))) '#f))) ((letrec ((g$f$21126 (case-lambda ((g$x$21128) (if (g$syntax-pair?$14656 g$x$21128) ((case-lambda ((g$cars/f$21130) (if g$cars/f$21130 (begin '#f ((case-lambda ((g$cdrs/f$21132) (if g$cdrs/f$21132 (begin '#f (map cons g$cars/f$21130 g$cdrs/f$21132)) '#f))) (g$f$21126 (g$syntax-cdr$14668 g$x$21128)))) '#f))) ((case-lambda ((g$x$21134) (if (g$syntax-pair?$14656 g$x$21134) (begin '#f ((case-lambda ((g$q$21136) (if g$q$21136 (begin '#f ((case-lambda ((g$r$21138) (if g$r$21138 (begin '#f (append g$q$21136 g$r$21138)) '#f))) ((case-lambda ((g$x$21140) (if (g$syntax-pair?$14656 g$x$21140) (begin '#f ((case-lambda ((g$q$21142) (if g$q$21142 (begin '#f ((case-lambda ((g$r$21144) (if g$r$21144 (begin '#f (append g$q$21142 g$r$21144)) '#f))) ((case-lambda ((g$x$21146) (if (equal? (g$stx->datum$14690 g$x$21146) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$21140)))) '#f))) ((case-lambda ((g$x$21148) (list g$x$21148))) (g$syntax-car$14664 g$x$21140)))) '#f))) (g$syntax-cdr$14668 g$x$21134)))) '#f))) ((case-lambda ((g$x$21150) (list g$x$21150))) (g$syntax-car$14664 g$x$21134)))) '#f))) (g$syntax-car$14664 g$x$21128))) (if (g$syntax-null?$14660 g$x$21128) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f)))))) g$f$21126) (g$syntax-car$14664 g$x$21102)))) '#f))) (g$syntax-cdr$14668 g$x$21096)))) '#f))) ((case-lambda ((g$x$21152) '())) (g$syntax-car$14664 g$x$21096)))) '#f))) g$t$21056)))) g$t$21044)))) ((case-lambda ((g$x$21154) (if (g$syntax-pair?$14656 g$x$21154) (begin '#f ((case-lambda ((g$q$21156) (if g$q$21156 (begin '#f ((case-lambda ((g$r$21158) (if g$r$21158 (begin '#f (append g$q$21156 g$r$21158)) '#f))) ((case-lambda ((g$x$21160) (if (g$syntax-pair?$14656 g$x$21160) (begin '#f ((case-lambda ((g$q$21162) (if g$q$21162 (begin '#f ((case-lambda ((g$r$21164) (if g$r$21164 (begin '#f (append g$q$21162 g$r$21164)) '#f))) ((case-lambda ((g$x$21166) (if (g$syntax-pair?$14656 g$x$21166) (begin '#f ((case-lambda ((g$q$21168) (if g$q$21168 (begin '#f ((case-lambda ((g$r$21170) (if g$r$21170 (begin '#f (append g$q$21168 g$r$21170)) '#f))) ((letrec ((g$f$21172 (case-lambda ((g$x$21174) (if (g$syntax-pair?$14656 g$x$21174) ((case-lambda ((g$cars/f$21176) (if g$cars/f$21176 (begin '#f ((case-lambda ((g$cdrs/f$21178) (if g$cdrs/f$21178 (begin '#f (map cons g$cars/f$21176 g$cdrs/f$21178)) '#f))) (g$f$21172 (g$syntax-cdr$14668 g$x$21174)))) '#f))) ((case-lambda ((g$x$21180) (list g$x$21180))) (g$syntax-car$14664 g$x$21174))) (if (g$syntax-null?$14660 g$x$21174) (list (begin 'b* '())) '#f)))))) g$f$21172) (g$syntax-cdr$14668 g$x$21166)))) '#f))) ((case-lambda ((g$x$21182) (list g$x$21182))) (g$syntax-car$14664 g$x$21166)))) '#f))) (g$syntax-cdr$14668 g$x$21160)))) '#f))) ((case-lambda ((g$x$21184) (if (equal? (g$stx->datum$14690 g$x$21184) '()) (begin '#f '()) '#f))) (g$syntax-car$14664 g$x$21160)))) '#f))) (g$syntax-cdr$14668 g$x$21154)))) '#f))) ((case-lambda ((g$x$21186) '())) (g$syntax-car$14664 g$x$21154)))) '#f))) g$t$21044)))) g$e$21038)))) (set! g$foreign-call-transformer$15185 (case-lambda ((g$e$21188 g$r$21189 g$mr$21190) ((case-lambda ((g$t$21194) ((case-lambda ((g$ls/false$21196) (if (if g$ls/false$21196 (begin '#f (apply (case-lambda ((g$name$21198 g$arg*$21199) '#t)) g$ls/false$21196)) '#f) (apply (case-lambda ((g$name$21202 g$arg*$21203) (cons 'foreign-call (cons (g$chi-expr$15217 g$name$21202 g$r$21189 g$mr$21190) (g$chi-expr*$15213 g$arg*$21203 g$r$21189 g$mr$21190))))) g$ls/false$21196) (error 'expander '"invalid syntax" (g$strip$14688 g$t$21194 '()))))) ((case-lambda ((g$x$21206) (if (g$syntax-pair?$14656 g$x$21206) (begin '#f ((case-lambda ((g$q$21208) (if g$q$21208 (begin '#f ((case-lambda ((g$r$21210) (if g$r$21210 (begin '#f (append g$q$21208 g$r$21210)) '#f))) ((case-lambda ((g$x$21212) (if (g$syntax-pair?$14656 g$x$21212) (begin '#f ((case-lambda ((g$q$21214) (if g$q$21214 (begin '#f ((case-lambda ((g$r$21216) (if g$r$21216 (begin '#f (append g$q$21214 g$r$21216)) '#f))) ((letrec ((g$f$21218 (case-lambda ((g$x$21220) (if (g$syntax-pair?$14656 g$x$21220) ((case-lambda ((g$cars/f$21222) (if g$cars/f$21222 (begin '#f ((case-lambda ((g$cdrs/f$21224) (if g$cdrs/f$21224 (begin '#f (map cons g$cars/f$21222 g$cdrs/f$21224)) '#f))) (g$f$21218 (g$syntax-cdr$14668 g$x$21220)))) '#f))) ((case-lambda ((g$x$21226) (list g$x$21226))) (g$syntax-car$14664 g$x$21220))) (if (g$syntax-null?$14660 g$x$21220) (list (begin 'arg* '())) '#f)))))) g$f$21218) (g$syntax-cdr$14668 g$x$21212)))) '#f))) ((case-lambda ((g$x$21228) (list g$x$21228))) (g$syntax-car$14664 g$x$21212)))) '#f))) (g$syntax-cdr$14668 g$x$21206)))) '#f))) ((case-lambda ((g$x$21230) '())) (g$syntax-car$14664 g$x$21206)))) '#f))) g$t$21194)))) g$e$21188)))) (set! g$convert-pattern$15187 (case-lambda ((g$pattern$21232 g$keys$21233) ((case-lambda ((g$cvt*$21236 g$cvt$21238) (begin (set! g$cvt*$21236 (case-lambda ((g$p*$21426 g$n$21427 g$ids$21428) (if (null? g$p*$21426) (values '() g$ids$21428) (call-with-values (case-lambda (() (g$cvt*$21236 (cdr g$p*$21426) g$n$21427 g$ids$21428))) (case-lambda ((g$y$21432 g$ids$21433) (call-with-values (case-lambda (() (g$cvt$21238 (car g$p*$21426) g$n$21427 g$ids$21433))) (case-lambda ((g$x$21436 g$ids$21437) (values (cons g$x$21436 g$y$21432) g$ids$21437))))))))))) (set! g$cvt$21238 (case-lambda ((g$p$21240 g$n$21241 g$ids$21242) ((case-lambda ((g$t$21246) ((case-lambda ((g$ls/false$21248) (if (if g$ls/false$21248 (begin '#f (apply (case-lambda ((g$id$21250) (g$id?$14670 g$id$21250))) g$ls/false$21248)) '#f) (apply (case-lambda ((g$id$21252) (if (g$bound-id-member?$14684 g$p$21240 g$keys$21233) (values (vector 'free-id g$p$21240) g$ids$21242) (if (g$free-id=?$14678 g$p$21240 (g$scheme-stx$15099 '_)) (values '_ g$ids$21242) (values 'any (cons (cons g$p$21240 g$n$21241) g$ids$21242)))))) g$ls/false$21248) ((case-lambda ((g$t$21254) ((case-lambda ((g$ls/false$21256) (if (if g$ls/false$21256 (begin '#f (apply (case-lambda ((g$p$21258 g$dots$21259) (g$ellipsis?$15191 g$dots$21259))) g$ls/false$21256)) '#f) (apply (case-lambda ((g$p$21262 g$dots$21263) (call-with-values (case-lambda (() (g$cvt$21238 g$p$21262 (+ g$n$21241 '1) g$ids$21242))) (case-lambda ((g$p$21266 g$ids$21267) (values (if (eq? g$p$21266 'any) 'each-any (vector 'each g$p$21266)) g$ids$21267)))))) g$ls/false$21256) ((case-lambda ((g$t$21270) ((case-lambda ((g$ls/false$21272) (if (if g$ls/false$21272 (begin '#f (apply (case-lambda ((g$x$21274 g$dots$21275 g$ys$21276 g$z$21277) (g$ellipsis?$15191 g$dots$21275))) g$ls/false$21272)) '#f) (apply (case-lambda ((g$x$21282 g$dots$21283 g$ys$21284 g$z$21285) (call-with-values (case-lambda (() (g$cvt$21238 g$z$21285 g$n$21241 g$ids$21242))) (case-lambda ((g$z$21290 g$ids$21291) (call-with-values (case-lambda (() (g$cvt*$21236 g$ys$21284 g$n$21241 g$ids$21291))) (case-lambda ((g$ys$21294 g$ids$21295) (call-with-values (case-lambda (() (g$cvt$21238 g$x$21282 (+ g$n$21241 '1) g$ids$21295))) (case-lambda ((g$x$21298 g$ids$21299) (values (vector 'each+ g$x$21298 (reverse g$ys$21294) g$z$21290) g$ids$21299)))))))))))) g$ls/false$21272) ((case-lambda ((g$t$21302) ((case-lambda ((g$ls/false$21304) (if (if g$ls/false$21304 (begin '#f (apply (case-lambda ((g$x$21306 g$y$21307) '#t)) g$ls/false$21304)) '#f) (apply (case-lambda ((g$x$21310 g$y$21311) (call-with-values (case-lambda (() (g$cvt$21238 g$y$21311 g$n$21241 g$ids$21242))) (case-lambda ((g$y$21314 g$ids$21315) (call-with-values (case-lambda (() (g$cvt$21238 g$x$21310 g$n$21241 g$ids$21315))) (case-lambda ((g$x$21318 g$ids$21319) (values (cons g$x$21318 g$y$21314) g$ids$21319))))))))) g$ls/false$21304) ((case-lambda ((g$t$21322) ((case-lambda ((g$ls/false$21324) (if (if g$ls/false$21324 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$21324)) '#f) (apply (case-lambda (() (values '() g$ids$21242))) g$ls/false$21324) ((case-lambda ((g$t$21326) ((case-lambda ((g$ls/false$21328) (if (if g$ls/false$21328 (begin '#f (apply (case-lambda ((g$p$21330) (not (g$stx?$14622 g$p$21330)))) g$ls/false$21328)) '#f) (apply (case-lambda ((g$p$21332) (call-with-values (case-lambda (() (g$cvt$21238 g$p$21332 g$n$21241 g$ids$21242))) (case-lambda ((g$p$21334 g$ids$21335) (values (vector 'vector g$p$21334) g$ids$21335)))))) g$ls/false$21328) ((case-lambda ((g$t$21338) ((case-lambda ((g$ls/false$21340) (if (if g$ls/false$21340 (begin '#f (apply (case-lambda ((g$datum$21342) '#t)) g$ls/false$21340)) '#f) (apply (case-lambda ((g$datum$21344) (values (vector 'atom (g$stx->datum$14690 g$datum$21344)) g$ids$21242))) g$ls/false$21340) (error 'expander '"invalid syntax" (g$strip$14688 g$t$21338 '()))))) ((case-lambda ((g$x$21346) (list g$x$21346))) g$t$21338)))) g$t$21326)))) ((case-lambda ((g$x$21348) (if (g$syntax-vector?$14658 g$x$21348) (begin '#f ((letrec ((g$f$21350 (case-lambda ((g$x$21352) (if (g$syntax-pair?$14656 g$x$21352) ((case-lambda ((g$cars/f$21354) (if g$cars/f$21354 (begin '#f ((case-lambda ((g$cdrs/f$21356) (if g$cdrs/f$21356 (begin '#f (map cons g$cars/f$21354 g$cdrs/f$21356)) '#f))) (g$f$21350 (g$syntax-cdr$14668 g$x$21352)))) '#f))) ((case-lambda ((g$x$21358) (list g$x$21358))) (g$syntax-car$14664 g$x$21352))) (if (g$syntax-null?$14660 g$x$21352) (list (begin 'p '())) '#f)))))) g$f$21350) (g$syntax-vector->list$14654 g$x$21348))) '#f))) g$t$21326)))) g$t$21322)))) ((case-lambda ((g$x$21360) (if (equal? (g$stx->datum$14690 g$x$21360) '()) (begin '#f '()) '#f))) g$t$21322)))) g$t$21302)))) ((case-lambda ((g$x$21362) (if (g$syntax-pair?$14656 g$x$21362) (begin '#f ((case-lambda ((g$q$21364) (if g$q$21364 (begin '#f ((case-lambda ((g$r$21366) (if g$r$21366 (begin '#f (append g$q$21364 g$r$21366)) '#f))) ((case-lambda ((g$x$21368) (list g$x$21368))) (g$syntax-cdr$14668 g$x$21362)))) '#f))) ((case-lambda ((g$x$21370) (list g$x$21370))) (g$syntax-car$14664 g$x$21362)))) '#f))) g$t$21302)))) g$t$21270)))) ((case-lambda ((g$x$21372) (if (g$syntax-pair?$14656 g$x$21372) (begin '#f ((case-lambda ((g$q$21374) (if g$q$21374 (begin '#f ((case-lambda ((g$r$21376) (if g$r$21376 (begin '#f (append g$q$21374 g$r$21376)) '#f))) ((case-lambda ((g$x$21378) (if (g$syntax-pair?$14656 g$x$21378) (begin '#f ((case-lambda ((g$q$21380) (if g$q$21380 (begin '#f ((case-lambda ((g$r$21382) (if g$r$21382 (begin '#f (append g$q$21380 g$r$21382)) '#f))) ((letrec ((g$f$21384 (case-lambda ((g$x$21390) (if (g$syntax-pair?$14656 g$x$21390) ((case-lambda ((g$cars/f$21392) (if g$cars/f$21392 (begin '#f ((case-lambda ((g$d/f$21394) (if g$d/f$21394 (begin '#f (cons (map cons g$cars/f$21392 (car g$d/f$21394)) (cdr g$d/f$21394))) '#f))) (g$f$21384 (g$syntax-cdr$14668 g$x$21390)))) '#f))) ((case-lambda ((g$x$21396) (list g$x$21396))) (g$syntax-car$14664 g$x$21390))) ((case-lambda ((g$d$21398) (if g$d$21398 (begin '#f (cons (list (begin 'ys '())) g$d$21398)) '#f))) ((case-lambda ((g$x$21400) (list g$x$21400))) g$x$21390))))))) (case-lambda ((g$x$21386) ((case-lambda ((g$x$21388) (if g$x$21388 (begin '#f (append (car g$x$21388) (cdr g$x$21388))) '#f))) (g$f$21384 g$x$21386))))) (g$syntax-cdr$14668 g$x$21378)))) '#f))) ((case-lambda ((g$x$21402) (list g$x$21402))) (g$syntax-car$14664 g$x$21378)))) '#f))) (g$syntax-cdr$14668 g$x$21372)))) '#f))) ((case-lambda ((g$x$21404) (list g$x$21404))) (g$syntax-car$14664 g$x$21372)))) '#f))) g$t$21270)))) g$t$21254)))) ((case-lambda ((g$x$21406) (if (g$syntax-pair?$14656 g$x$21406) (begin '#f ((case-lambda ((g$q$21408) (if g$q$21408 (begin '#f ((case-lambda ((g$r$21410) (if g$r$21410 (begin '#f (append g$q$21408 g$r$21410)) '#f))) ((case-lambda ((g$x$21412) (if (g$syntax-pair?$14656 g$x$21412) (begin '#f ((case-lambda ((g$q$21414) (if g$q$21414 (begin '#f ((case-lambda ((g$r$21416) (if g$r$21416 (begin '#f (append g$q$21414 g$r$21416)) '#f))) ((case-lambda ((g$x$21418) (if (equal? (g$stx->datum$14690 g$x$21418) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$21412)))) '#f))) ((case-lambda ((g$x$21420) (list g$x$21420))) (g$syntax-car$14664 g$x$21412)))) '#f))) (g$syntax-cdr$14668 g$x$21406)))) '#f))) ((case-lambda ((g$x$21422) (list g$x$21422))) (g$syntax-car$14664 g$x$21406)))) '#f))) g$t$21254)))) g$t$21246)))) ((case-lambda ((g$x$21424) (list g$x$21424))) g$t$21246)))) g$p$21240)))) (g$cvt$21238 g$pattern$21232 '0 '())))) '#f '#f)))) (set! g$syntax-dispatch$15189 (case-lambda ((g$e$21440 g$p$21441) ((case-lambda ((g$stx^$21444 g$match-each$21446 g$match-each+$21448 g$match-each-any$21450 g$match-empty$21452 g$combine$21454 g$match*$21456 g$match$21458) (begin (set! g$stx^$21444 (case-lambda ((g$e$21566 g$m*$21567 g$s*$21568) (if (if (null? g$m*$21567) (begin '#f (null? g$s*$21568)) '#f) g$e$21566 (g$mkstx$14646 g$e$21566 g$m*$21567 g$s*$21568))))) (set! g$match-each$21446 (case-lambda ((g$e$21550 g$p$21551 g$m*$21552 g$s*$21553) (if (pair? g$e$21550) ((case-lambda ((g$first$21558) (if g$first$21558 (begin '#f ((case-lambda ((g$rest$21560) (if g$rest$21560 (begin '#f (cons g$first$21558 g$rest$21560)) '#f))) (g$match-each$21446 (cdr g$e$21550) g$p$21551 g$m*$21552 g$s*$21553))) '#f))) (g$match$21458 (car g$e$21550) g$p$21551 g$m*$21552 g$s*$21553 '())) (if (null? g$e$21550) '() (if (g$stx?$14622 g$e$21550) (call-with-values (case-lambda (() (g$join-wraps$14644 g$m*$21552 g$s*$21553 g$e$21550))) (case-lambda ((g$m*$21562 g$s*$21563) (g$match-each$21446 (g$stx-expr$14624 g$e$21550) g$p$21551 g$m*$21562 g$s*$21563)))) '#f)))))) (set! g$match-each+$21448 (case-lambda ((g$e$21516 g$x-pat$21517 g$y-pat$21518 g$z-pat$21519 g$m*$21520 g$s*$21521 g$r$21522) (letrec ((g$f$21530 (case-lambda ((g$e$21532 g$m*$21533 g$s*$21534) (if (pair? g$e$21532) (call-with-values (case-lambda (() (g$f$21530 (cdr g$e$21532) g$m*$21533 g$s*$21534))) (case-lambda ((g$xr*$21538 g$y-pat$21539 g$r$21540) (if g$r$21540 (if (null? g$y-pat$21539) ((case-lambda ((g$xr$21544) (if g$xr$21544 (values (cons g$xr$21544 g$xr*$21538) g$y-pat$21539 g$r$21540) (values '#f '#f '#f)))) (g$match$21458 (car g$e$21532) g$x-pat$21517 g$m*$21533 g$s*$21534 '())) (values '() (cdr g$y-pat$21539) (g$match$21458 (car g$e$21532) (car g$y-pat$21539) g$m*$21533 g$s*$21534 g$r$21540))) (values '#f '#f '#f))))) (if (g$stx?$14622 g$e$21532) (call-with-values (case-lambda (() (g$join-wraps$14644 g$m*$21533 g$s*$21534 g$e$21532))) (case-lambda ((g$m*$21546 g$s*$21547) (g$f$21530 (g$stx-expr$14624 g$e$21532) g$m*$21546 g$s*$21547)))) (values '() g$y-pat$21518 (g$match$21458 g$e$21532 g$z-pat$21519 g$m*$21533 g$s*$21534 g$r$21522)))))))) (g$f$21530 g$e$21516 g$m*$21520 g$s*$21521))))) (set! g$match-each-any$21450 (case-lambda ((g$e$21504 g$m*$21505 g$s*$21506) (if (pair? g$e$21504) ((case-lambda ((g$l$21510) (if g$l$21510 (begin '#f (cons (g$stx^$21444 (car g$e$21504) g$m*$21505 g$s*$21506) g$l$21510)) '#f))) (g$match-each-any$21450 (cdr g$e$21504) g$m*$21505 g$s*$21506)) (if (null? g$e$21504) '() (if (g$stx?$14622 g$e$21504) (call-with-values (case-lambda (() (g$join-wraps$14644 g$m*$21505 g$s*$21506 g$e$21504))) (case-lambda ((g$m*$21512 g$s*$21513) (g$match-each-any$21450 (g$stx-expr$14624 g$e$21504) g$m*$21512 g$s*$21513)))) '#f)))))) (set! g$match-empty$21452 (case-lambda ((g$p$21499 g$r$21500) (if (null? g$p$21499) g$r$21500 (if (eq? g$p$21499 '_) g$r$21500 (if (eq? g$p$21499 'any) (cons '() g$r$21500) (if (pair? g$p$21499) (g$match-empty$21452 (car g$p$21499) (g$match-empty$21452 (cdr g$p$21499) g$r$21500)) (if (eq? g$p$21499 'each-any) (cons '() g$r$21500) ((case-lambda ((g$t$21503) (if (memv g$t$21503 '(each)) (g$match-empty$21452 (vector-ref g$p$21499 '1) g$r$21500) (if (memv g$t$21503 '(each+)) (g$match-empty$21452 (vector-ref g$p$21499 '1) (g$match-empty$21452 (reverse (vector-ref g$p$21499 '2)) (g$match-empty$21452 (vector-ref g$p$21499 '3) g$r$21500))) (if (memv g$t$21503 '(free-id atom)) g$r$21500 (if (memv g$t$21503 '(vector)) (g$match-empty$21452 (vector-ref g$p$21499 '1) g$r$21500) (error 'syntax-dispatch '"invalid pattern" g$p$21499))))))) (vector-ref g$p$21499 '0)))))))))) (set! g$combine$21454 (case-lambda ((g$r*$21495 g$r$21496) (if (null? (car g$r*$21495)) g$r$21496 (cons (map car g$r*$21495) (g$combine$21454 (map cdr g$r*$21495) g$r$21496)))))) (set! g$match*$21456 (case-lambda ((g$e$21474 g$p$21475 g$m*$21476 g$s*$21477 g$r$21478) (if (null? g$p$21475) (if (null? g$e$21474) (begin '#f g$r$21478) '#f) (if (pair? g$p$21475) (if (pair? g$e$21474) (begin '#f (g$match$21458 (car g$e$21474) (car g$p$21475) g$m*$21476 g$s*$21477 (g$match$21458 (cdr g$e$21474) (cdr g$p$21475) g$m*$21476 g$s*$21477 g$r$21478))) '#f) (if (eq? g$p$21475 'each-any) ((case-lambda ((g$l$21484) (if g$l$21484 (begin '#f (cons g$l$21484 g$r$21478)) '#f))) (g$match-each-any$21450 g$e$21474 g$m*$21476 g$s*$21477)) ((case-lambda ((g$t$21486) (if (memv g$t$21486 '(each)) (if (null? g$e$21474) (g$match-empty$21452 (vector-ref g$p$21475 '1) g$r$21478) ((case-lambda ((g$r*$21493) (if g$r*$21493 (begin '#f (g$combine$21454 g$r*$21493 g$r$21478)) '#f))) (g$match-each$21446 g$e$21474 (vector-ref g$p$21475 '1) g$m*$21476 g$s*$21477))) (if (memv g$t$21486 '(free-id)) (if (symbol? g$e$21474) (if (g$free-id=?$14678 (g$stx^$21444 g$e$21474 g$m*$21476 g$s*$21477) (vector-ref g$p$21475 '1)) (begin '#f g$r$21478) '#f) '#f) (if (memv g$t$21486 '(each+)) (call-with-values (case-lambda (() (g$match-each+$21448 g$e$21474 (vector-ref g$p$21475 '1) (vector-ref g$p$21475 '2) (vector-ref g$p$21475 '3) g$m*$21476 g$s*$21477 g$r$21478))) (case-lambda ((g$xr*$21487 g$y-pat$21488 g$r$21489) (if g$r$21489 (if (null? g$y-pat$21488) (begin '#f (if (null? g$xr*$21487) (g$match-empty$21452 (vector-ref g$p$21475 '1) g$r$21489) (g$combine$21454 g$xr*$21487 g$r$21489))) '#f) '#f)))) (if (memv g$t$21486 '(atom)) (if (equal? (vector-ref g$p$21475 '1) (g$strip$14688 g$e$21474 g$m*$21476)) (begin '#f g$r$21478) '#f) (if (memv g$t$21486 '(vector)) (if (vector? g$e$21474) (begin '#f (g$match$21458 (vector->list g$e$21474) (vector-ref g$p$21475 '1) g$m*$21476 g$s*$21477 g$r$21478)) '#f) (error 'syntax-dispatch '"invalid pattern" g$p$21475)))))))) (vector-ref g$p$21475 '0)))))))) (set! g$match$21458 (case-lambda ((g$e$21460 g$p$21461 g$m*$21462 g$s*$21463 g$r$21464) (if (not g$r$21464) '#f (if (eq? g$p$21461 '_) g$r$21464 (if (eq? g$p$21461 'any) (cons (g$stx^$21444 g$e$21460 g$m*$21462 g$s*$21463) g$r$21464) (if (g$stx?$14622 g$e$21460) (call-with-values (case-lambda (() (g$join-wraps$14644 g$m*$21462 g$s*$21463 g$e$21460))) (case-lambda ((g$m*$21470 g$s*$21471) (g$match$21458 (g$stx-expr$14624 g$e$21460) g$p$21461 g$m*$21470 g$s*$21471 g$r$21464)))) (g$match*$21456 g$e$21460 g$p$21461 g$m*$21462 g$s*$21463 g$r$21464)))))))) (g$match$21458 g$e$21440 g$p$21441 '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$ellipsis?$15191 (case-lambda ((g$x$21572) (if (g$id?$14670 g$x$21572) (begin '#f (g$free-id=?$14678 g$x$21572 (g$scheme-stx$15099 '...))) '#f)))) (set! g$syntax-case-transformer$15193 ((case-lambda (() ((case-lambda ((g$build-dispatch-call$21574 g$invalid-ids-error$21576 g$gen-clause$21578 g$gen-syntax-case$21580) (begin (set! g$build-dispatch-call$21574 (case-lambda ((g$pvars$21714 g$expr$21715 g$y$21716 g$r$21717 g$mr$21718) ((case-lambda ((g$ids$21724 g$levels$21725) ((case-lambda ((g$labels$21728 g$new-vars$21729) ((case-lambda ((g$body$21732) (list '(primitive apply) (g$g$build-lambda$14422$14559 '#f g$new-vars$21729 g$body$21732) g$y$21716))) (g$chi-expr$15217 (g$add-subst$14650 (g$make-full-rib$14617 g$ids$21724 g$labels$21728) g$expr$21715) (append (map (case-lambda ((g$label$21734 g$var$21735 g$level$21736) (cons g$label$21734 (g$make-binding$14696 'syntax (cons g$var$21735 g$level$21736))))) g$labels$21728 g$new-vars$21729 (map cdr g$pvars$21714)) g$r$21717) g$mr$21718)))) (map g$gen-label$14584 g$ids$21724) (map g$gen-lexical$14580 g$ids$21724)))) (map car g$pvars$21714) (map cdr g$pvars$21714))))) (set! g$invalid-ids-error$21576 (case-lambda ((g$id*$21702 g$e$21703 g$class$21704) (letrec ((g$find$21708 (case-lambda ((g$id*$21710 g$ok*$21711) (if (null? g$id*$21710) (error 'expander '"invalid syntax" (g$stx->datum$14690 g$e$21703)) (if (g$id?$14670 (car g$id*$21710)) (if (g$bound-id-member?$14684 (car g$id*$21710) g$ok*$21711) (g$syntax-error$15322 (car g$id*$21710) '"duplicate " g$class$21704) (g$find$21708 (cdr g$id*$21710) (cons (car g$id*$21710) g$ok*$21711))) (g$syntax-error$15322 (car g$id*$21710) '"invalid " g$class$21704))))))) (g$find$21708 g$id*$21702 '()))))) (set! g$gen-clause$21578 (case-lambda ((g$x$21670 g$keys$21671 g$clauses$21672 g$r$21673 g$mr$21674 g$pat$21675 g$fender$21676 g$expr$21677) (call-with-values (case-lambda (() (g$convert-pattern$15187 g$pat$21675 g$keys$21671))) (case-lambda ((g$p$21686 g$pvars$21687) (if (not (g$distinct-bound-ids?$14682 (map car g$pvars$21687))) (g$invalid-ids-error$21576 (map car g$pvars$21687) g$pat$21675 '"pattern variable") (if (not (for-all (case-lambda ((g$x$21690) (not (g$ellipsis?$15191 (car g$x$21690))))) g$pvars$21687)) (error 'expander '"misplaced ellipsis in syntax-case pattern" (g$strip$14688 g$pat$21675 '())) ((case-lambda ((g$y$21692) ((case-lambda ((g$test$21694) ((case-lambda ((g$conseq$21696) ((case-lambda ((g$altern$21698) (list (g$g$build-lambda$14422$14559 '#f (list g$y$21692) (list 'if g$test$21694 g$conseq$21696 g$altern$21698)) (list '(primitive syntax-dispatch) g$x$21670 (list 'quote g$p$21686))))) (g$gen-syntax-case$21580 g$x$21670 g$keys$21671 g$clauses$21672 g$r$21673 g$mr$21674)))) (g$build-dispatch-call$21574 g$pvars$21687 g$expr$21677 g$y$21692 g$r$21673 g$mr$21674)))) (if (eq? g$fender$21676 '#t) g$y$21692 ((case-lambda ((g$call$21700) (list 'if g$y$21692 g$call$21700 (list 'quote '#f)))) (g$build-dispatch-call$21574 g$pvars$21687 g$fender$21676 g$y$21692 g$r$21673 g$mr$21674)))))) (g$gen-lexical$14580 'tmp)))))))))) (set! g$gen-syntax-case$21580 (case-lambda ((g$x$21582 g$keys$21583 g$clauses$21584 g$r$21585 g$mr$21586) (if (null? g$clauses$21584) (list '(primitive syntax-error) g$x$21582) ((case-lambda ((g$t$21592) ((case-lambda ((g$ls/false$21594) (if (if g$ls/false$21594 (begin '#f (apply (case-lambda ((g$pat$21596 g$expr$21597) '#t)) g$ls/false$21594)) '#f) (apply (case-lambda ((g$pat$21600 g$expr$21601) (if (if (g$id?$14670 g$pat$21600) (if (not (g$bound-id-member?$14684 g$pat$21600 g$keys$21583)) (begin '#f (not (g$ellipsis?$15191 g$pat$21600))) '#f) '#f) (if (g$free-id=?$14678 g$pat$21600 (g$scheme-stx$15099 '_)) (g$chi-expr$15217 g$expr$21601 g$r$21585 g$mr$21586) ((case-lambda ((g$lab$21604 g$lex$21605) ((case-lambda ((g$body$21608) (list (g$g$build-lambda$14422$14559 '#f (list g$lex$21605) g$body$21608) g$x$21582))) (g$chi-expr$15217 (g$add-subst$14650 (g$make-full-rib$14617 (list g$pat$21600) (list g$lab$21604)) g$expr$21601) (cons (cons g$lab$21604 (g$make-binding$14696 'syntax (cons g$lex$21605 '0))) g$r$21585) g$mr$21586)))) (g$gen-label$14584 g$pat$21600) (g$gen-lexical$14580 g$pat$21600))) (g$gen-clause$21578 g$x$21582 g$keys$21583 (cdr g$clauses$21584) g$r$21585 g$mr$21586 g$pat$21600 '#t g$expr$21601)))) g$ls/false$21594) ((case-lambda ((g$t$21610) ((case-lambda ((g$ls/false$21612) (if (if g$ls/false$21612 (begin '#f (apply (case-lambda ((g$pat$21614 g$fender$21615 g$expr$21616) '#t)) g$ls/false$21612)) '#f) (apply (case-lambda ((g$pat$21620 g$fender$21621 g$expr$21622) (g$gen-clause$21578 g$x$21582 g$keys$21583 (cdr g$clauses$21584) g$r$21585 g$mr$21586 g$pat$21620 g$fender$21621 g$expr$21622))) g$ls/false$21612) (error 'expander '"invalid syntax" (g$strip$14688 g$t$21610 '()))))) ((case-lambda ((g$x$21626) (if (g$syntax-pair?$14656 g$x$21626) (begin '#f ((case-lambda ((g$q$21628) (if g$q$21628 (begin '#f ((case-lambda ((g$r$21630) (if g$r$21630 (begin '#f (append g$q$21628 g$r$21630)) '#f))) ((case-lambda ((g$x$21632) (if (g$syntax-pair?$14656 g$x$21632) (begin '#f ((case-lambda ((g$q$21634) (if g$q$21634 (begin '#f ((case-lambda ((g$r$21636) (if g$r$21636 (begin '#f (append g$q$21634 g$r$21636)) '#f))) ((case-lambda ((g$x$21638) (if (g$syntax-pair?$14656 g$x$21638) (begin '#f ((case-lambda ((g$q$21640) (if g$q$21640 (begin '#f ((case-lambda ((g$r$21642) (if g$r$21642 (begin '#f (append g$q$21640 g$r$21642)) '#f))) ((case-lambda ((g$x$21644) (if (equal? (g$stx->datum$14690 g$x$21644) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$21638)))) '#f))) ((case-lambda ((g$x$21646) (list g$x$21646))) (g$syntax-car$14664 g$x$21638)))) '#f))) (g$syntax-cdr$14668 g$x$21632)))) '#f))) ((case-lambda ((g$x$21648) (list g$x$21648))) (g$syntax-car$14664 g$x$21632)))) '#f))) (g$syntax-cdr$14668 g$x$21626)))) '#f))) ((case-lambda ((g$x$21650) (list g$x$21650))) (g$syntax-car$14664 g$x$21626)))) '#f))) g$t$21610)))) g$t$21592)))) ((case-lambda ((g$x$21652) (if (g$syntax-pair?$14656 g$x$21652) (begin '#f ((case-lambda ((g$q$21654) (if g$q$21654 (begin '#f ((case-lambda ((g$r$21656) (if g$r$21656 (begin '#f (append g$q$21654 g$r$21656)) '#f))) ((case-lambda ((g$x$21658) (if (g$syntax-pair?$14656 g$x$21658) (begin '#f ((case-lambda ((g$q$21660) (if g$q$21660 (begin '#f ((case-lambda ((g$r$21662) (if g$r$21662 (begin '#f (append g$q$21660 g$r$21662)) '#f))) ((case-lambda ((g$x$21664) (if (equal? (g$stx->datum$14690 g$x$21664) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$21658)))) '#f))) ((case-lambda ((g$x$21666) (list g$x$21666))) (g$syntax-car$14664 g$x$21658)))) '#f))) (g$syntax-cdr$14668 g$x$21652)))) '#f))) ((case-lambda ((g$x$21668) (list g$x$21668))) (g$syntax-car$14664 g$x$21652)))) '#f))) g$t$21592)))) (car g$clauses$21584)))))) (case-lambda ((g$e$21740 g$r$21741 g$mr$21742) ((case-lambda ((g$t$21746) ((case-lambda ((g$ls/false$21748) (if (if g$ls/false$21748 (begin '#f (apply (case-lambda ((g$expr$21750 g$keys$21751 g$clauses$21752) '#t)) g$ls/false$21748)) '#f) (apply (case-lambda ((g$expr$21756 g$keys$21757 g$clauses$21758) (begin (if (for-all (case-lambda ((g$x$21762) (if (g$id?$14670 g$x$21762) (begin '#f (not (g$ellipsis?$15191 g$x$21762))) '#f))) g$keys$21757) (void) (error 'expander '"invalid literals" (g$strip$14688 g$e$21740 '()))) ((case-lambda ((g$x$21764) ((case-lambda ((g$body$21766) (list (g$g$build-lambda$14422$14559 '#f (list g$x$21764) g$body$21766) (g$chi-expr$15217 g$expr$21756 g$r$21741 g$mr$21742)))) (g$gen-syntax-case$21580 g$x$21764 g$keys$21757 g$clauses$21758 g$r$21741 g$mr$21742)))) (g$gen-lexical$14580 'tmp))))) g$ls/false$21748) (error 'expander '"invalid syntax" (g$strip$14688 g$t$21746 '()))))) ((case-lambda ((g$x$21768) (if (g$syntax-pair?$14656 g$x$21768) (begin '#f ((case-lambda ((g$q$21770) (if g$q$21770 (begin '#f ((case-lambda ((g$r$21772) (if g$r$21772 (begin '#f (append g$q$21770 g$r$21772)) '#f))) ((case-lambda ((g$x$21774) (if (g$syntax-pair?$14656 g$x$21774) (begin '#f ((case-lambda ((g$q$21776) (if g$q$21776 (begin '#f ((case-lambda ((g$r$21778) (if g$r$21778 (begin '#f (append g$q$21776 g$r$21778)) '#f))) ((case-lambda ((g$x$21780) (if (g$syntax-pair?$14656 g$x$21780) (begin '#f ((case-lambda ((g$q$21782) (if g$q$21782 (begin '#f ((case-lambda ((g$r$21784) (if g$r$21784 (begin '#f (append g$q$21782 g$r$21784)) '#f))) ((letrec ((g$f$21786 (case-lambda ((g$x$21788) (if (g$syntax-pair?$14656 g$x$21788) ((case-lambda ((g$cars/f$21790) (if g$cars/f$21790 (begin '#f ((case-lambda ((g$cdrs/f$21792) (if g$cdrs/f$21792 (begin '#f (map cons g$cars/f$21790 g$cdrs/f$21792)) '#f))) (g$f$21786 (g$syntax-cdr$14668 g$x$21788)))) '#f))) ((case-lambda ((g$x$21794) (list g$x$21794))) (g$syntax-car$14664 g$x$21788))) (if (g$syntax-null?$14660 g$x$21788) (list (begin 'clauses '())) '#f)))))) g$f$21786) (g$syntax-cdr$14668 g$x$21780)))) '#f))) ((letrec ((g$f$21796 (case-lambda ((g$x$21798) (if (g$syntax-pair?$14656 g$x$21798) ((case-lambda ((g$cars/f$21800) (if g$cars/f$21800 (begin '#f ((case-lambda ((g$cdrs/f$21802) (if g$cdrs/f$21802 (begin '#f (map cons g$cars/f$21800 g$cdrs/f$21802)) '#f))) (g$f$21796 (g$syntax-cdr$14668 g$x$21798)))) '#f))) ((case-lambda ((g$x$21804) (list g$x$21804))) (g$syntax-car$14664 g$x$21798))) (if (g$syntax-null?$14660 g$x$21798) (list (begin 'keys '())) '#f)))))) g$f$21796) (g$syntax-car$14664 g$x$21780)))) '#f))) (g$syntax-cdr$14668 g$x$21774)))) '#f))) ((case-lambda ((g$x$21806) (list g$x$21806))) (g$syntax-car$14664 g$x$21774)))) '#f))) (g$syntax-cdr$14668 g$x$21768)))) '#f))) ((case-lambda ((g$x$21808) '())) (g$syntax-car$14664 g$x$21768)))) '#f))) g$t$21746)))) g$e$21740)))))) '#f '#f '#f '#f))))) (set! g$syntax-transformer$15195 ((case-lambda (() ((case-lambda ((g$gen-syntax$21810 g$gen-ref$21812 g$gen-append$21814 g$gen-mappend$21816 g$gen-map$21818 g$gen-cons$21820 g$gen-vector$21822 g$regen$21824) (begin (set! g$gen-syntax$21810 (case-lambda ((g$src$21896 g$e$21897 g$r$21898 g$maps$21899 g$ellipsis?$21900 g$vec?$21901) ((case-lambda ((g$t$21908) ((case-lambda ((g$ls/false$21910) (if (if g$ls/false$21910 (begin '#f (apply (case-lambda ((g$dots$21912) (g$ellipsis?$21900 g$dots$21912))) g$ls/false$21910)) '#f) (apply (case-lambda ((g$dots$21914) (error 'expander '"misplaced ellipsis in syntax form" (g$strip$14688 g$src$21896 '())))) g$ls/false$21910) ((case-lambda ((g$t$21916) ((case-lambda ((g$ls/false$21918) (if (if g$ls/false$21918 (begin '#f (apply (case-lambda ((g$id$21920) (g$id?$14670 g$id$21920))) g$ls/false$21918)) '#f) (apply (case-lambda ((g$id$21922) ((case-lambda ((g$label$21924) ((case-lambda ((g$b$21926) ((case-lambda (() (if (eq? (g$binding-type$14698 g$b$21926) 'syntax) (call-with-values (case-lambda (() ((case-lambda ((g$var.lev$21928) (g$gen-ref$21812 g$src$21896 (car g$var.lev$21928) (cdr g$var.lev$21928) g$maps$21899))) (g$binding-value$14700 g$b$21926)))) (case-lambda ((g$var$21930 g$maps$21931) (values (list 'ref g$var$21930) g$maps$21931)))) (values (list 'quote g$e$21897) g$maps$21899))))))) (g$label->binding$14694 g$label$21924 g$r$21898)))) (g$id->label$14692 g$e$21897)))) g$ls/false$21918) ((case-lambda ((g$t$21934) ((case-lambda ((g$ls/false$21936) (if (if g$ls/false$21936 (begin '#f (apply (case-lambda ((g$dots$21938 g$e$21939) (g$ellipsis?$21900 g$dots$21938))) g$ls/false$21936)) '#f) (apply (case-lambda ((g$dots$21942 g$e$21943) (if g$vec?$21901 (error 'expander '"misplaced ellipsis in syntax form" (g$strip$14688 g$src$21896 '())) (g$gen-syntax$21810 g$src$21896 g$e$21943 g$r$21898 g$maps$21899 (case-lambda ((g$x$21946) '#f)) '#f)))) g$ls/false$21936) ((case-lambda ((g$t$21948) ((case-lambda ((g$ls/false$21950) (if (if g$ls/false$21950 (begin '#f (apply (case-lambda ((g$x$21952 g$dots$21953 g$y$21954) (g$ellipsis?$21900 g$dots$21953))) g$ls/false$21950)) '#f) (apply (case-lambda ((g$x$21958 g$dots$21959 g$y$21960) (letrec ((g$f$21964 (case-lambda ((g$y$21972 g$k$21973) ((case-lambda ((g$t$21976) ((case-lambda ((g$ls/false$21978) (if (if g$ls/false$21978 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$21978)) '#f) (apply (case-lambda (() (g$k$21973 g$maps$21899))) g$ls/false$21978) ((case-lambda ((g$t$21980) ((case-lambda ((g$ls/false$21982) (if (if g$ls/false$21982 (begin '#f (apply (case-lambda ((g$dots$21984 g$y$21985) (g$ellipsis?$21900 g$dots$21984))) g$ls/false$21982)) '#f) (apply (case-lambda ((g$dots$21988 g$y$21989) (g$f$21964 g$y$21989 (case-lambda ((g$maps$21992) (call-with-values (case-lambda (() (g$k$21973 (cons '() g$maps$21992)))) (case-lambda ((g$x$21994 g$maps$21995) (if (null? (car g$maps$21995)) (error 'expander '"extra ellipsis in syntax form" (g$strip$14688 g$src$21896 '())) (values (g$gen-mappend$21816 g$x$21994 (car g$maps$21995)) (cdr g$maps$21995))))))))))) g$ls/false$21982) ((case-lambda ((g$t$21998) ((case-lambda ((g$ls/false$22000) (if (if g$ls/false$22000 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$22000)) '#f) (apply (case-lambda (() (call-with-values (case-lambda (() (g$gen-syntax$21810 g$src$21896 g$y$21972 g$r$21898 g$maps$21899 g$ellipsis?$21900 g$vec?$21901))) (case-lambda ((g$y$22002 g$maps$22003) (call-with-values (case-lambda (() (g$k$21973 g$maps$22003))) (case-lambda ((g$x$22006 g$maps$22007) (values (g$gen-append$21814 g$x$22006 g$y$22002) g$maps$22007))))))))) g$ls/false$22000) (error 'expander '"invalid syntax" (g$strip$14688 g$t$21998 '()))))) ((case-lambda ((g$x$22010) '())) g$t$21998)))) g$t$21980)))) ((case-lambda ((g$x$22012) (if (g$syntax-pair?$14656 g$x$22012) (begin '#f ((case-lambda ((g$q$22014) (if g$q$22014 (begin '#f ((case-lambda ((g$r$22016) (if g$r$22016 (begin '#f (append g$q$22014 g$r$22016)) '#f))) ((case-lambda ((g$x$22018) (list g$x$22018))) (g$syntax-cdr$14668 g$x$22012)))) '#f))) ((case-lambda ((g$x$22020) (list g$x$22020))) (g$syntax-car$14664 g$x$22012)))) '#f))) g$t$21980)))) g$t$21976)))) ((case-lambda ((g$x$22022) (if (equal? (g$stx->datum$14690 g$x$22022) '()) (begin '#f '()) '#f))) g$t$21976)))) g$y$21972))))) (g$f$21964 g$y$21960 (case-lambda ((g$maps$21966) (call-with-values (case-lambda (() (g$gen-syntax$21810 g$src$21896 g$x$21958 g$r$21898 (cons '() g$maps$21966) g$ellipsis?$21900 '#f))) (case-lambda ((g$x$21968 g$maps$21969) (if (null? (car g$maps$21969)) (error 'expander '"extra ellipsis in syntax form" (g$strip$14688 g$src$21896 '())) (values (g$gen-map$21818 g$x$21968 (car g$maps$21969)) (cdr g$maps$21969)))))))))))) g$ls/false$21950) ((case-lambda ((g$t$22024) ((case-lambda ((g$ls/false$22026) (if (if g$ls/false$22026 (begin '#f (apply (case-lambda ((g$x$22028 g$y$22029) '#t)) g$ls/false$22026)) '#f) (apply (case-lambda ((g$x$22032 g$y$22033) (call-with-values (case-lambda (() (g$gen-syntax$21810 g$src$21896 g$x$22032 g$r$21898 g$maps$21899 g$ellipsis?$21900 '#f))) (case-lambda ((g$xnew$22036 g$maps$22037) (call-with-values (case-lambda (() (g$gen-syntax$21810 g$src$21896 g$y$22033 g$r$21898 g$maps$22037 g$ellipsis?$21900 g$vec?$21901))) (case-lambda ((g$ynew$22040 g$maps$22041) (values (g$gen-cons$21820 g$e$21897 g$x$22032 g$y$22033 g$xnew$22036 g$ynew$22040) g$maps$22041))))))))) g$ls/false$22026) ((case-lambda ((g$t$22044) ((case-lambda ((g$ls/false$22046) (if (if g$ls/false$22046 (begin '#f (apply (case-lambda ((g$ls$22048) (not (g$stx?$14622 g$e$21897)))) g$ls/false$22046)) '#f) (apply (case-lambda ((g$ls$22050) (call-with-values (case-lambda (() (g$gen-syntax$21810 g$src$21896 g$ls$22050 g$r$21898 g$maps$21899 g$ellipsis?$21900 '#t))) (case-lambda ((g$lsnew$22052 g$maps$22053) (values (g$gen-vector$21822 g$e$21897 g$ls$22050 g$lsnew$22052) g$maps$22053)))))) g$ls/false$22046) ((case-lambda ((g$t$22056) ((case-lambda ((g$ls/false$22058) (if (if g$ls/false$22058 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$22058)) '#f) (apply (case-lambda (() (values (list 'quote g$e$21897) g$maps$21899))) g$ls/false$22058) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22056 '()))))) ((case-lambda ((g$x$22060) '())) g$t$22056)))) g$t$22044)))) ((case-lambda ((g$x$22062) (if (g$syntax-vector?$14658 g$x$22062) (begin '#f ((letrec ((g$f$22064 (case-lambda ((g$x$22066) (if (g$syntax-pair?$14656 g$x$22066) ((case-lambda ((g$cars/f$22068) (if g$cars/f$22068 (begin '#f ((case-lambda ((g$cdrs/f$22070) (if g$cdrs/f$22070 (begin '#f (map cons g$cars/f$22068 g$cdrs/f$22070)) '#f))) (g$f$22064 (g$syntax-cdr$14668 g$x$22066)))) '#f))) ((case-lambda ((g$x$22072) (list g$x$22072))) (g$syntax-car$14664 g$x$22066))) (if (g$syntax-null?$14660 g$x$22066) (list (begin 'ls '())) '#f)))))) g$f$22064) (g$syntax-vector->list$14654 g$x$22062))) '#f))) g$t$22044)))) g$t$22024)))) ((case-lambda ((g$x$22074) (if (g$syntax-pair?$14656 g$x$22074) (begin '#f ((case-lambda ((g$q$22076) (if g$q$22076 (begin '#f ((case-lambda ((g$r$22078) (if g$r$22078 (begin '#f (append g$q$22076 g$r$22078)) '#f))) ((case-lambda ((g$x$22080) (list g$x$22080))) (g$syntax-cdr$14668 g$x$22074)))) '#f))) ((case-lambda ((g$x$22082) (list g$x$22082))) (g$syntax-car$14664 g$x$22074)))) '#f))) g$t$22024)))) g$t$21948)))) ((case-lambda ((g$x$22084) (if (g$syntax-pair?$14656 g$x$22084) (begin '#f ((case-lambda ((g$q$22086) (if g$q$22086 (begin '#f ((case-lambda ((g$r$22088) (if g$r$22088 (begin '#f (append g$q$22086 g$r$22088)) '#f))) ((case-lambda ((g$x$22090) (if (g$syntax-pair?$14656 g$x$22090) (begin '#f ((case-lambda ((g$q$22092) (if g$q$22092 (begin '#f ((case-lambda ((g$r$22094) (if g$r$22094 (begin '#f (append g$q$22092 g$r$22094)) '#f))) ((case-lambda ((g$x$22096) (list g$x$22096))) (g$syntax-cdr$14668 g$x$22090)))) '#f))) ((case-lambda ((g$x$22098) (list g$x$22098))) (g$syntax-car$14664 g$x$22090)))) '#f))) (g$syntax-cdr$14668 g$x$22084)))) '#f))) ((case-lambda ((g$x$22100) (list g$x$22100))) (g$syntax-car$14664 g$x$22084)))) '#f))) g$t$21948)))) g$t$21934)))) ((case-lambda ((g$x$22102) (if (g$syntax-pair?$14656 g$x$22102) (begin '#f ((case-lambda ((g$q$22104) (if g$q$22104 (begin '#f ((case-lambda ((g$r$22106) (if g$r$22106 (begin '#f (append g$q$22104 g$r$22106)) '#f))) ((case-lambda ((g$x$22108) (if (g$syntax-pair?$14656 g$x$22108) (begin '#f ((case-lambda ((g$q$22110) (if g$q$22110 (begin '#f ((case-lambda ((g$r$22112) (if g$r$22112 (begin '#f (append g$q$22110 g$r$22112)) '#f))) ((case-lambda ((g$x$22114) (if (equal? (g$stx->datum$14690 g$x$22114) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$22108)))) '#f))) ((case-lambda ((g$x$22116) (list g$x$22116))) (g$syntax-car$14664 g$x$22108)))) '#f))) (g$syntax-cdr$14668 g$x$22102)))) '#f))) ((case-lambda ((g$x$22118) (list g$x$22118))) (g$syntax-car$14664 g$x$22102)))) '#f))) g$t$21934)))) g$t$21916)))) ((case-lambda ((g$x$22120) (list g$x$22120))) g$t$21916)))) g$t$21908)))) ((case-lambda ((g$x$22122) (list g$x$22122))) g$t$21908)))) g$e$21897)))) (set! g$gen-ref$21812 (case-lambda ((g$src$21878 g$var$21879 g$level$21880 g$maps$21881) (if (= g$level$21880 '0) (values g$var$21879 g$maps$21881) (if (null? g$maps$21881) (error 'expander '"missing ellipsis in syntax form" (g$strip$14688 g$src$21878 '())) (call-with-values (case-lambda (() (g$gen-ref$21812 g$src$21878 g$var$21879 (- g$level$21880 '1) (cdr g$maps$21881)))) (case-lambda ((g$outer-var$21886 g$outer-maps$21887) ((case-lambda ((g$t$21890) (if g$t$21890 ((case-lambda ((g$b$21892) (values (cdr g$b$21892) g$maps$21881))) g$t$21890) ((case-lambda ((g$inner-var$21894) (values g$inner-var$21894 (cons (cons (cons g$outer-var$21886 g$inner-var$21894) (car g$maps$21881)) g$outer-maps$21887)))) (g$gen-lexical$14580 'tmp))))) (assq g$outer-var$21886 (car g$maps$21881))))))))))) (set! g$gen-append$21814 (case-lambda ((g$x$21874 g$y$21875) (if (equal? g$y$21875 ''()) g$x$21874 (list 'append g$x$21874 g$y$21875))))) (set! g$gen-mappend$21816 (case-lambda ((g$e$21870 g$map-env$21871) (list 'apply '(primitive append) (g$gen-map$21818 g$e$21870 g$map-env$21871))))) (set! g$gen-map$21818 (case-lambda ((g$e$21852 g$map-env$21853) ((case-lambda ((g$formals$21856 g$actuals$21857) (if (eq? (car g$e$21852) 'ref) (car g$actuals$21857) (if (for-all (case-lambda ((g$x$21860) (if (eq? (car g$x$21860) 'ref) (begin '#f (memq (cadr g$x$21860) g$formals$21856)) '#f))) (cdr g$e$21852)) ((case-lambda ((g$args$21862) (cons 'map (cons (list 'primitive (car g$e$21852)) g$args$21862)))) (map ((case-lambda ((g$r$21864) (case-lambda ((g$x$21866) (cdr (assq (cadr g$x$21866) g$r$21864)))))) (map cons g$formals$21856 g$actuals$21857)) (cdr g$e$21852))) (cons* 'map (list 'lambda g$formals$21856 g$e$21852) g$actuals$21857))))) (map cdr g$map-env$21853) (map (case-lambda ((g$x$21868) (list 'ref (car g$x$21868)))) g$map-env$21853))))) (set! g$gen-cons$21820 (case-lambda ((g$e$21837 g$x$21838 g$y$21839 g$xnew$21840 g$ynew$21841) ((case-lambda ((g$t$21847) (if (memv g$t$21847 '(quote)) (if (eq? (car g$xnew$21840) 'quote) ((case-lambda ((g$xnew$21848 g$ynew$21849) (if (if (eq? g$xnew$21848 g$x$21838) (begin '#f (eq? g$ynew$21849 g$y$21839)) '#f) (list 'quote g$e$21837) (list 'quote (cons g$xnew$21848 g$ynew$21849))))) (cadr g$xnew$21840) (cadr g$ynew$21841)) (if (null? (cadr g$ynew$21841)) (list 'list g$xnew$21840) (list 'cons g$xnew$21840 g$ynew$21841))) (if (memv g$t$21847 '(list)) (cons 'list (cons g$xnew$21840 (cdr g$ynew$21841))) (list 'cons g$xnew$21840 g$ynew$21841))))) (car g$ynew$21841))))) (set! g$gen-vector$21822 (case-lambda ((g$e$21831 g$ls$21832 g$lsnew$21833) (if (eq? (car g$lsnew$21833) 'quote) (if (eq? (cadr g$lsnew$21833) g$ls$21832) (list 'quote g$e$21831) (list 'quote (list->vector (cadr g$lsnew$21833)))) (if (eq? (car g$lsnew$21833) 'list) (cons 'vector (cdr g$lsnew$21833)) (list 'list->vector g$lsnew$21833)))))) (set! g$regen$21824 (case-lambda ((g$x$21826) ((case-lambda ((g$t$21828) (if (memv g$t$21828 '(ref)) (cadr g$x$21826) (if (memv g$t$21828 '(primitive)) (list 'primitive (cadr g$x$21826)) (if (memv g$t$21828 '(quote)) (list 'quote (cadr g$x$21826)) (if (memv g$t$21828 '(lambda)) (g$g$build-lambda$14422$14559 '#f (cadr g$x$21826) (g$regen$21824 (caddr g$x$21826))) (if (memv g$t$21828 '(map)) ((case-lambda ((g$ls$21829) (cons '(primitive map) g$ls$21829))) (map g$regen$21824 (cdr g$x$21826))) (cons (list 'primitive (car g$x$21826)) (map g$regen$21824 (cdr g$x$21826)))))))))) (car g$x$21826))))) (case-lambda ((g$e$22124 g$r$22125 g$mr$22126) ((case-lambda ((g$t$22130) ((case-lambda ((g$ls/false$22132) (if (if g$ls/false$22132 (begin '#f (apply (case-lambda ((g$x$22134) '#t)) g$ls/false$22132)) '#f) (apply (case-lambda ((g$x$22136) (call-with-values (case-lambda (() (g$gen-syntax$21810 g$e$22124 g$x$22136 g$r$22125 '() g$ellipsis?$15191 '#f))) (case-lambda ((g$e$22138 g$maps$22139) (g$regen$21824 g$e$22138)))))) g$ls/false$22132) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22130 '()))))) ((case-lambda ((g$x$22142) (if (g$syntax-pair?$14656 g$x$22142) (begin '#f ((case-lambda ((g$q$22144) (if g$q$22144 (begin '#f ((case-lambda ((g$r$22146) (if g$r$22146 (begin '#f (append g$q$22144 g$r$22146)) '#f))) ((case-lambda ((g$x$22148) (if (g$syntax-pair?$14656 g$x$22148) (begin '#f ((case-lambda ((g$q$22150) (if g$q$22150 (begin '#f ((case-lambda ((g$r$22152) (if g$r$22152 (begin '#f (append g$q$22150 g$r$22152)) '#f))) ((case-lambda ((g$x$22154) (if (equal? (g$stx->datum$14690 g$x$22154) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$22148)))) '#f))) ((case-lambda ((g$x$22156) (list g$x$22156))) (g$syntax-car$14664 g$x$22148)))) '#f))) (g$syntax-cdr$14668 g$x$22142)))) '#f))) ((case-lambda ((g$x$22158) '())) (g$syntax-car$14664 g$x$22142)))) '#f))) g$t$22130)))) g$e$22124)))))) '#f '#f '#f '#f '#f '#f '#f '#f))))) (set! g$core-macro-transformer$15197 (case-lambda ((g$name$22160) ((case-lambda ((g$t$22162) (if (memv g$t$22162 '(quote)) g$quote-transformer$15127 (if (memv g$t$22162 '(lambda)) g$lambda-transformer$15131 (if (memv g$t$22162 '(case-lambda)) g$case-lambda-transformer$15129 (if (memv g$t$22162 '(let-values)) g$let-values-transformer$15105 (if (memv g$t$22162 '(letrec)) g$letrec-transformer$15109 (if (memv g$t$22162 '(letrec*)) g$letrec*-transformer$15111 (if (memv g$t$22162 '(case)) g$case-transformer$15125 (if (memv g$t$22162 '(if)) g$if-transformer$15123 (if (memv g$t$22162 '(when)) g$when-transformer$15119 (if (memv g$t$22162 '(unless)) g$unless-transformer$15121 (if (memv g$t$22162 '(parameterize)) g$parameterize-transformer$15183 (if (memv g$t$22162 '(foreign-call)) g$foreign-call-transformer$15185 (if (memv g$t$22162 '(syntax-case)) g$syntax-case-transformer$15193 (if (memv g$t$22162 '(syntax)) g$syntax-transformer$15195 (if (memv g$t$22162 '(type-descriptor)) g$type-descriptor-transformer$15113 (if (memv g$t$22162 '(record-type-descriptor)) g$record-type-descriptor-transformer$15115 (if (memv g$t$22162 '(record-constructor-descriptor)) g$record-constructor-descriptor-transformer$15117 (error 'macro-transformer '"cannot find transformer" g$name$22160)))))))))))))))))))) g$name$22160)))) (set! g$file-options-macro$15199 (case-lambda ((g$x$22163) ((case-lambda ((g$t$22165) ((case-lambda ((g$ls/false$22167) (if (if g$ls/false$22167 (begin '#f (apply (case-lambda ((g$opt*$22169) (if (for-all g$id?$14670 g$opt*$22169) (begin '#f (g$g$file-options-spec$13721$13737 (map g$id->sym$14672 g$opt*$22169))) '#f))) g$ls/false$22167)) '#f) (apply (case-lambda ((g$opt*$22171) (g$bless$15133 (list 'quote (g$g$file-options-spec$13721$13737 (map g$id->sym$14672 g$opt*$22171)))))) g$ls/false$22167) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22165 '()))))) ((case-lambda ((g$x$22173) (if (g$syntax-pair?$14656 g$x$22173) (begin '#f ((case-lambda ((g$q$22175) (if g$q$22175 (begin '#f ((case-lambda ((g$r$22177) (if g$r$22177 (begin '#f (append g$q$22175 g$r$22177)) '#f))) ((letrec ((g$f$22179 (case-lambda ((g$x$22181) (if (g$syntax-pair?$14656 g$x$22181) ((case-lambda ((g$cars/f$22183) (if g$cars/f$22183 (begin '#f ((case-lambda ((g$cdrs/f$22185) (if g$cdrs/f$22185 (begin '#f (map cons g$cars/f$22183 g$cdrs/f$22185)) '#f))) (g$f$22179 (g$syntax-cdr$14668 g$x$22181)))) '#f))) ((case-lambda ((g$x$22187) (list g$x$22187))) (g$syntax-car$14664 g$x$22181))) (if (g$syntax-null?$14660 g$x$22181) (list (begin 'opt* '())) '#f)))))) g$f$22179) (g$syntax-cdr$14668 g$x$22173)))) '#f))) ((case-lambda ((g$x$22189) '())) (g$syntax-car$14664 g$x$22173)))) '#f))) g$t$22165)))) g$x$22163)))) (set! g$symbol-macro$15201 (case-lambda ((g$x$22191 g$set$22192) ((case-lambda ((g$t$22195) ((case-lambda ((g$ls/false$22197) (if (if g$ls/false$22197 (begin '#f (apply (case-lambda ((g$name$22199) (if (g$id?$14670 g$name$22199) (begin '#f (memq (g$id->sym$14672 g$name$22199) g$set$22192)) '#f))) g$ls/false$22197)) '#f) (apply (case-lambda ((g$name$22201) (g$bless$15133 (list 'quote g$name$22201)))) g$ls/false$22197) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22195 '()))))) ((case-lambda ((g$x$22203) (if (g$syntax-pair?$14656 g$x$22203) (begin '#f ((case-lambda ((g$q$22205) (if g$q$22205 (begin '#f ((case-lambda ((g$r$22207) (if g$r$22207 (begin '#f (append g$q$22205 g$r$22207)) '#f))) ((case-lambda ((g$x$22209) (if (g$syntax-pair?$14656 g$x$22209) (begin '#f ((case-lambda ((g$q$22211) (if g$q$22211 (begin '#f ((case-lambda ((g$r$22213) (if g$r$22213 (begin '#f (append g$q$22211 g$r$22213)) '#f))) ((case-lambda ((g$x$22215) (if (equal? (g$stx->datum$14690 g$x$22215) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$22209)))) '#f))) ((case-lambda ((g$x$22217) (list g$x$22217))) (g$syntax-car$14664 g$x$22209)))) '#f))) (g$syntax-cdr$14668 g$x$22203)))) '#f))) ((case-lambda ((g$x$22219) '())) (g$syntax-car$14664 g$x$22203)))) '#f))) g$t$22195)))) g$x$22191)))) (set! g$macro-transformer$15203 (case-lambda ((g$x$22221) (if (procedure? g$x$22221) g$x$22221 (if (symbol? g$x$22221) ((case-lambda ((g$t$22223) (if (memv g$t$22223 '(define-record-type)) g$define-record-type-macro$15177 (if (memv g$t$22223 '(define-struct)) g$define-struct-macro$15175 (if (memv g$t$22223 '(include)) g$include-macro$15167 (if (memv g$t$22223 '(cond)) g$cond-macro$15165 (if (memv g$t$22223 '(let)) g$let-macro$15137 (if (memv g$t$22223 '(do)) g$do-macro$15157 (if (memv g$t$22223 '(or)) g$or-macro$15161 (if (memv g$t$22223 '(and)) g$and-macro$15163 (if (memv g$t$22223 '(let*)) g$let*-macro$15159 (if (memv g$t$22223 '(syntax-rules)) g$syntax-rules-macro$15169 (if (memv g$t$22223 '(quasiquote)) g$quasiquote-macro$15171 (if (memv g$t$22223 '(quasisyntax)) g$quasisyntax-macro$15173 (if (memv g$t$22223 '(with-syntax)) g$with-syntax-macro$15135 (if (memv g$t$22223 '(identifier-syntax)) g$identifier-syntax-macro$15155 (if (memv g$t$22223 '(time)) g$time-macro$15147 (if (memv g$t$22223 '(delay)) g$delay-macro$15149 (if (memv g$t$22223 '(assert)) g$assert-macro$15151 (if (memv g$t$22223 '(endianness)) g$endianness-macro$15153 (if (memv g$t$22223 '(guard)) g$guard-macro$15143 (if (memv g$t$22223 '(define-enumeration)) g$define-enumeration-macro$15145 (if (memv g$t$22223 '(trace-lambda)) g$trace-lambda-macro$15139 (if (memv g$t$22223 '(trace-define)) g$trace-define-macro$15141 (if (memv g$t$22223 '(define-condition-type)) g$define-condition-type-macro$15179 (if (memv g$t$22223 '(eol-style)) (case-lambda ((g$x$22228) (g$symbol-macro$15201 g$x$22228 '(none lf cr crlf nel crnel ls)))) (if (memv g$t$22223 '(error-handling-mode)) (case-lambda ((g$x$22226) (g$symbol-macro$15201 g$x$22226 '(ignore raise replace)))) (if (memv g$t$22223 '(buffer-mode)) (case-lambda ((g$x$22224) (g$symbol-macro$15201 g$x$22224 '(none line block)))) (if (memv g$t$22223 '(file-options)) g$file-options-macro$15199 (if (memv g$t$22223 '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$incorrect-usage-macro$15181 (error 'macro-transformer '"invalid macro" g$x$22221))))))))))))))))))))))))))))))) g$x$22221) (error 'core-macro-transformer '"invalid macro" g$x$22221)))))) (set! g$local-macro-transformer$15205 (case-lambda ((g$x$22230) (car g$x$22230)))) (set! g$chi-macro$15207 (case-lambda ((g$p$22232 g$e$22233) ((case-lambda ((g$s$22236) (g$add-mark$14648 (g$gen-mark$14638) g$s$22236))) ((g$macro-transformer$15203 g$p$22232) (g$add-mark$14648 g$anti-mark$14640 g$e$22233)))))) (set! g$chi-local-macro$15209 (case-lambda ((g$p$22238 g$e$22239) ((case-lambda ((g$s$22242) (g$add-mark$14648 (g$gen-mark$14638) g$s$22242))) ((g$local-macro-transformer$15205 g$p$22238) (g$add-mark$14648 g$anti-mark$14640 g$e$22239)))))) (set! g$chi-global-macro$15211 (case-lambda ((g$p$22244 g$e$22245) ((case-lambda ((g$lib$22248 g$loc$22249) (begin (g$g$visit-library$13973$14257 g$lib$22248) ((case-lambda ((g$x$22252) ((case-lambda ((g$transformer$22254) ((case-lambda ((g$s$22256) (g$add-mark$14648 (g$gen-mark$14638) g$s$22256))) (g$transformer$22254 (g$add-mark$14648 g$anti-mark$14640 g$e$22245))))) (if (procedure? g$x$22252) g$x$22252 (error 'chi-global-macro '"not a procedure"))))) (symbol-value g$loc$22249))))) (car g$p$22244) (cdr g$p$22244))))) (set! g$chi-expr*$15213 (case-lambda ((g$e*$22258 g$r$22259 g$mr$22260) (if (null? g$e*$22258) '() ((case-lambda ((g$e$22264) (cons g$e$22264 (g$chi-expr*$15213 (cdr g$e*$22258) g$r$22259 g$mr$22260)))) (g$chi-expr$15217 (car g$e*$22258) g$r$22259 g$mr$22260)))))) (set! g$chi-application$15215 (case-lambda ((g$e$22266 g$r$22267 g$mr$22268) ((case-lambda ((g$t$22272) ((case-lambda ((g$ls/false$22274) (if (if g$ls/false$22274 (begin '#f (apply (case-lambda ((g$rator$22276 g$rands$22277) '#t)) g$ls/false$22274)) '#f) (apply (case-lambda ((g$rator$22280 g$rands$22281) ((case-lambda ((g$rator$22284) (cons g$rator$22284 (g$chi-expr*$15213 g$rands$22281 g$r$22267 g$mr$22268)))) (g$chi-expr$15217 g$rator$22280 g$r$22267 g$mr$22268)))) g$ls/false$22274) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22272 '()))))) ((case-lambda ((g$x$22286) (if (g$syntax-pair?$14656 g$x$22286) (begin '#f ((case-lambda ((g$q$22288) (if g$q$22288 (begin '#f ((case-lambda ((g$r$22290) (if g$r$22290 (begin '#f (append g$q$22288 g$r$22290)) '#f))) ((letrec ((g$f$22292 (case-lambda ((g$x$22294) (if (g$syntax-pair?$14656 g$x$22294) ((case-lambda ((g$cars/f$22296) (if g$cars/f$22296 (begin '#f ((case-lambda ((g$cdrs/f$22298) (if g$cdrs/f$22298 (begin '#f (map cons g$cars/f$22296 g$cdrs/f$22298)) '#f))) (g$f$22292 (g$syntax-cdr$14668 g$x$22294)))) '#f))) ((case-lambda ((g$x$22300) (list g$x$22300))) (g$syntax-car$14664 g$x$22294))) (if (g$syntax-null?$14660 g$x$22294) (list (begin 'rands '())) '#f)))))) g$f$22292) (g$syntax-cdr$14668 g$x$22286)))) '#f))) ((case-lambda ((g$x$22302) (list g$x$22302))) (g$syntax-car$14664 g$x$22286)))) '#f))) g$t$22272)))) g$e$22266)))) (set! g$chi-expr$15217 (case-lambda ((g$e$22304 g$r$22305 g$mr$22306) (call-with-values (case-lambda (() (g$syntax-type$14702 g$e$22304 g$r$22305))) (case-lambda ((g$type$22310 g$value$22311 g$kwd$22312) ((case-lambda ((g$t$22316) (if (memv g$t$22316 '(core-macro)) ((case-lambda ((g$transformer$22453) (g$transformer$22453 g$e$22304 g$r$22305 g$mr$22306))) (g$core-macro-transformer$15197 g$value$22311)) (if (memv g$t$22316 '(global)) ((case-lambda ((g$lib$22449) ((case-lambda ((g$loc$22451) ((case-lambda (() (begin ((g$inv-collector$15265) g$lib$22449) g$loc$22451)))))) (cdr g$value$22311)))) (car g$value$22311)) (if (memv g$t$22316 '(core-prim)) ((case-lambda ((g$name$22447) (list 'primitive g$name$22447))) g$value$22311) (if (memv g$t$22316 '(call)) (g$chi-application$15215 g$e$22304 g$r$22305 g$mr$22306) (if (memv g$t$22316 '(lexical)) ((case-lambda ((g$lex$22445) g$lex$22445)) g$value$22311) (if (memv g$t$22316 '(global-macro global-macro!)) (g$chi-expr$15217 (g$chi-global-macro$15211 g$value$22311 g$e$22304) g$r$22305 g$mr$22306) (if (memv g$t$22316 '(local-macro local-macro!)) (g$chi-expr$15217 (g$chi-local-macro$15209 g$value$22311 g$e$22304) g$r$22305 g$mr$22306) (if (memv g$t$22316 '(macro macro!)) (g$chi-expr$15217 (g$chi-macro$15207 g$value$22311 g$e$22304) g$r$22305 g$mr$22306) (if (memv g$t$22316 '(constant)) ((case-lambda ((g$datum$22443) (list 'quote g$datum$22443))) g$value$22311) (if (memv g$t$22316 '(set!)) (g$chi-set!$15219 g$e$22304 g$r$22305 g$mr$22306) (if (memv g$t$22316 '(begin)) ((case-lambda ((g$t$22405) ((case-lambda ((g$ls/false$22407) (if (if g$ls/false$22407 (begin '#f (apply (case-lambda ((g$x$22409 g$x*$22410) '#t)) g$ls/false$22407)) '#f) (apply (case-lambda ((g$x$22413 g$x*$22414) (g$g$build-sequence$14490$14553 '#f (g$chi-expr*$15213 (cons g$x$22413 g$x*$22414) g$r$22305 g$mr$22306)))) g$ls/false$22407) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22405 '()))))) ((case-lambda ((g$x$22417) (if (g$syntax-pair?$14656 g$x$22417) (begin '#f ((case-lambda ((g$q$22419) (if g$q$22419 (begin '#f ((case-lambda ((g$r$22421) (if g$r$22421 (begin '#f (append g$q$22419 g$r$22421)) '#f))) ((case-lambda ((g$x$22423) (if (g$syntax-pair?$14656 g$x$22423) (begin '#f ((case-lambda ((g$q$22425) (if g$q$22425 (begin '#f ((case-lambda ((g$r$22427) (if g$r$22427 (begin '#f (append g$q$22425 g$r$22427)) '#f))) ((letrec ((g$f$22429 (case-lambda ((g$x$22431) (if (g$syntax-pair?$14656 g$x$22431) ((case-lambda ((g$cars/f$22433) (if g$cars/f$22433 (begin '#f ((case-lambda ((g$cdrs/f$22435) (if g$cdrs/f$22435 (begin '#f (map cons g$cars/f$22433 g$cdrs/f$22435)) '#f))) (g$f$22429 (g$syntax-cdr$14668 g$x$22431)))) '#f))) ((case-lambda ((g$x$22437) (list g$x$22437))) (g$syntax-car$14664 g$x$22431))) (if (g$syntax-null?$14660 g$x$22431) (list (begin 'x* '())) '#f)))))) g$f$22429) (g$syntax-cdr$14668 g$x$22423)))) '#f))) ((case-lambda ((g$x$22439) (list g$x$22439))) (g$syntax-car$14664 g$x$22423)))) '#f))) (g$syntax-cdr$14668 g$x$22417)))) '#f))) ((case-lambda ((g$x$22441) '())) (g$syntax-car$14664 g$x$22417)))) '#f))) g$t$22405)))) g$e$22304) (if (memv g$t$22316 '(let-syntax letrec-syntax)) ((case-lambda ((g$t$22317) ((case-lambda ((g$ls/false$22319) (if (if g$ls/false$22319 (begin '#f (apply (case-lambda ((g$xlhs*$22321 g$xrhs*$22322 g$xbody$22323 g$xbody*$22324) (if (g$valid-bound-ids?$14680 g$xlhs*$22321) (void) (error 'expander '"invalid identifiers" (g$strip$14688 g$e$22304 '()))))) g$ls/false$22319)) '#f) (apply (case-lambda ((g$xlhs*$22329 g$xrhs*$22330 g$xbody$22331 g$xbody*$22332) ((case-lambda ((g$xlab*$22337) ((case-lambda ((g$xrib$22339) ((case-lambda ((g$xb*$22341) ((case-lambda (() (g$g$build-sequence$14490$14553 '#f (g$chi-expr*$15213 (map (case-lambda ((g$x$22343) (g$add-subst$14650 g$xrib$22339 g$x$22343))) (cons g$xbody$22331 g$xbody*$22332)) (append (map cons g$xlab*$22337 g$xb*$22341) g$r$22305) (append (map cons g$xlab*$22337 g$xb*$22341) g$mr$22306)))))))) (map (case-lambda ((g$x$22345) (g$make-eval-transformer$14733 (g$expand-transformer$15251 (if (eq? g$type$22310 'let-syntax) g$x$22345 (g$add-subst$14650 g$xrib$22339 g$x$22345)) g$mr$22306)))) g$xrhs*$22330)))) (g$make-full-rib$14617 g$xlhs*$22329 g$xlab*$22337)))) (map g$gen-label$14584 g$xlhs*$22329)))) g$ls/false$22319) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22317 '()))))) ((case-lambda ((g$x$22347) (if (g$syntax-pair?$14656 g$x$22347) (begin '#f ((case-lambda ((g$q$22349) (if g$q$22349 (begin '#f ((case-lambda ((g$r$22351) (if g$r$22351 (begin '#f (append g$q$22349 g$r$22351)) '#f))) ((case-lambda ((g$x$22353) (if (g$syntax-pair?$14656 g$x$22353) (begin '#f ((case-lambda ((g$q$22355) (if g$q$22355 (begin '#f ((case-lambda ((g$r$22357) (if g$r$22357 (begin '#f (append g$q$22355 g$r$22357)) '#f))) ((case-lambda ((g$x$22359) (if (g$syntax-pair?$14656 g$x$22359) (begin '#f ((case-lambda ((g$q$22361) (if g$q$22361 (begin '#f ((case-lambda ((g$r$22363) (if g$r$22363 (begin '#f (append g$q$22361 g$r$22363)) '#f))) ((letrec ((g$f$22365 (case-lambda ((g$x$22367) (if (g$syntax-pair?$14656 g$x$22367) ((case-lambda ((g$cars/f$22369) (if g$cars/f$22369 (begin '#f ((case-lambda ((g$cdrs/f$22371) (if g$cdrs/f$22371 (begin '#f (map cons g$cars/f$22369 g$cdrs/f$22371)) '#f))) (g$f$22365 (g$syntax-cdr$14668 g$x$22367)))) '#f))) ((case-lambda ((g$x$22373) (list g$x$22373))) (g$syntax-car$14664 g$x$22367))) (if (g$syntax-null?$14660 g$x$22367) (list (begin 'xbody* '())) '#f)))))) g$f$22365) (g$syntax-cdr$14668 g$x$22359)))) '#f))) ((case-lambda ((g$x$22375) (list g$x$22375))) (g$syntax-car$14664 g$x$22359)))) '#f))) (g$syntax-cdr$14668 g$x$22353)))) '#f))) ((letrec ((g$f$22377 (case-lambda ((g$x$22379) (if (g$syntax-pair?$14656 g$x$22379) ((case-lambda ((g$cars/f$22381) (if g$cars/f$22381 (begin '#f ((case-lambda ((g$cdrs/f$22383) (if g$cdrs/f$22383 (begin '#f (map cons g$cars/f$22381 g$cdrs/f$22383)) '#f))) (g$f$22377 (g$syntax-cdr$14668 g$x$22379)))) '#f))) ((case-lambda ((g$x$22385) (if (g$syntax-pair?$14656 g$x$22385) (begin '#f ((case-lambda ((g$q$22387) (if g$q$22387 (begin '#f ((case-lambda ((g$r$22389) (if g$r$22389 (begin '#f (append g$q$22387 g$r$22389)) '#f))) ((case-lambda ((g$x$22391) (if (g$syntax-pair?$14656 g$x$22391) (begin '#f ((case-lambda ((g$q$22393) (if g$q$22393 (begin '#f ((case-lambda ((g$r$22395) (if g$r$22395 (begin '#f (append g$q$22393 g$r$22395)) '#f))) ((case-lambda ((g$x$22397) (if (equal? (g$stx->datum$14690 g$x$22397) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$22391)))) '#f))) ((case-lambda ((g$x$22399) (list g$x$22399))) (g$syntax-car$14664 g$x$22391)))) '#f))) (g$syntax-cdr$14668 g$x$22385)))) '#f))) ((case-lambda ((g$x$22401) (list g$x$22401))) (g$syntax-car$14664 g$x$22385)))) '#f))) (g$syntax-car$14664 g$x$22379))) (if (g$syntax-null?$14660 g$x$22379) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f)))))) g$f$22377) (g$syntax-car$14664 g$x$22353)))) '#f))) (g$syntax-cdr$14668 g$x$22347)))) '#f))) ((case-lambda ((g$x$22403) '())) (g$syntax-car$14664 g$x$22347)))) '#f))) g$t$22317)))) g$e$22304) (if (memv g$t$22316 '(displaced-lexical)) (error 'expander '"identifier out of context" (g$strip$14688 g$e$22304 '())) (if (memv g$t$22316 '(syntax)) (error 'expander '"reference to pattern variable outside a syntax form" (g$strip$14688 g$e$22304 '())) (if (memv g$t$22316 '(define define-syntax module import)) (error 'expander '"invalid expression" (g$strip$14688 g$e$22304 '())) (error 'expander '"invalid expression" (g$strip$14688 g$e$22304 '()))))))))))))))))))) g$type$22310))))))) (set! g$chi-set!$15219 (case-lambda ((g$e$22455 g$r$22456 g$mr$22457) ((case-lambda ((g$t$22461) ((case-lambda ((g$ls/false$22463) (if (if g$ls/false$22463 (begin '#f (apply (case-lambda ((g$x$22465 g$v$22466) (g$id?$14670 g$x$22465))) g$ls/false$22463)) '#f) (apply (case-lambda ((g$x$22469 g$v$22470) (call-with-values (case-lambda (() (g$syntax-type$14702 g$x$22469 g$r$22456))) (case-lambda ((g$type$22473 g$value$22474 g$kwd$22475) ((case-lambda ((g$t$22479) (if (memv g$t$22479 '(lexical)) (list 'set! g$value$22474 (g$chi-expr$15217 g$v$22470 g$r$22456 g$mr$22457)) (if (memv g$t$22479 '(global core-prim)) (error 'expander '"cannot modify imported identifier in" (g$strip$14688 g$e$22455 '())) (if (memv g$t$22479 '(global-macro!)) (g$chi-expr$15217 (g$chi-global-macro$15211 g$value$22474 g$e$22455) g$r$22456 g$mr$22457) (if (memv g$t$22479 '(local-macro!)) (g$chi-expr$15217 (g$chi-local-macro$15209 g$value$22474 g$e$22455) g$r$22456 g$mr$22457) (error 'expander '"invalid syntax" (g$stx->datum$14690 g$e$22455)))))))) g$type$22473)))))) g$ls/false$22463) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22461 '()))))) ((case-lambda ((g$x$22480) (if (g$syntax-pair?$14656 g$x$22480) (begin '#f ((case-lambda ((g$q$22482) (if g$q$22482 (begin '#f ((case-lambda ((g$r$22484) (if g$r$22484 (begin '#f (append g$q$22482 g$r$22484)) '#f))) ((case-lambda ((g$x$22486) (if (g$syntax-pair?$14656 g$x$22486) (begin '#f ((case-lambda ((g$q$22488) (if g$q$22488 (begin '#f ((case-lambda ((g$r$22490) (if g$r$22490 (begin '#f (append g$q$22488 g$r$22490)) '#f))) ((case-lambda ((g$x$22492) (if (g$syntax-pair?$14656 g$x$22492) (begin '#f ((case-lambda ((g$q$22494) (if g$q$22494 (begin '#f ((case-lambda ((g$r$22496) (if g$r$22496 (begin '#f (append g$q$22494 g$r$22496)) '#f))) ((case-lambda ((g$x$22498) (if (equal? (g$stx->datum$14690 g$x$22498) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$22492)))) '#f))) ((case-lambda ((g$x$22500) (list g$x$22500))) (g$syntax-car$14664 g$x$22492)))) '#f))) (g$syntax-cdr$14668 g$x$22486)))) '#f))) ((case-lambda ((g$x$22502) (list g$x$22502))) (g$syntax-car$14664 g$x$22486)))) '#f))) (g$syntax-cdr$14668 g$x$22480)))) '#f))) ((case-lambda ((g$x$22504) '())) (g$syntax-car$14664 g$x$22480)))) '#f))) g$t$22461)))) g$e$22455)))) (set! g$chi-lambda-clause$15221 (case-lambda ((g$fmls$22506 g$body*$22507 g$r$22508 g$mr$22509) ((case-lambda ((g$t$22514) ((case-lambda ((g$ls/false$22516) (if (if g$ls/false$22516 (begin '#f (apply (case-lambda ((g$x*$22518) '#t)) g$ls/false$22516)) '#f) (apply (case-lambda ((g$x*$22520) (if (g$valid-bound-ids?$14680 g$x*$22520) ((case-lambda ((g$lex*$22522 g$lab*$22523) (values g$lex*$22522 (g$chi-internal$15233 (g$add-subst$14650 (g$make-full-rib$14617 g$x*$22520 g$lab*$22523) g$body*$22507) (g$add-lexicals$15103 g$lab*$22523 g$lex*$22522 g$r$22508) g$mr$22509)))) (map g$gen-lexical$14580 g$x*$22520) (map g$gen-label$14584 g$x*$22520)) (error 'expander '"invalid fmls" (g$strip$14688 g$fmls$22506 '()))))) g$ls/false$22516) ((case-lambda ((g$t$22526) ((case-lambda ((g$ls/false$22528) (if (if g$ls/false$22528 (begin '#f (apply (case-lambda ((g$x*$22530 g$x$22531) '#t)) g$ls/false$22528)) '#f) (apply (case-lambda ((g$x*$22534 g$x$22535) (if (g$valid-bound-ids?$14680 (cons g$x$22535 g$x*$22534)) ((case-lambda ((g$lex*$22538 g$lab*$22539 g$lex$22540 g$lab$22541) (values (append g$lex*$22538 g$lex$22540) (g$chi-internal$15233 (g$add-subst$14650 (g$make-full-rib$14617 (cons g$x$22535 g$x*$22534) (cons g$lab$22541 g$lab*$22539)) g$body*$22507) (g$add-lexicals$15103 (cons g$lab$22541 g$lab*$22539) (cons g$lex$22540 g$lex*$22538) g$r$22508) g$mr$22509)))) (map g$gen-lexical$14580 g$x*$22534) (map g$gen-label$14584 g$x*$22534) (g$gen-lexical$14580 g$x$22535) (g$gen-label$14584 g$x$22535)) (error 'expander '"invalid fmls" (g$strip$14688 g$fmls$22506 '()))))) g$ls/false$22528) ((case-lambda ((g$t$22546) ((case-lambda ((g$ls/false$22548) (if (if g$ls/false$22548 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$22548)) '#f) (apply (case-lambda (() (error 'expander '"invalid fmls" (g$strip$14688 g$fmls$22506 '())))) g$ls/false$22548) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22546 '()))))) ((case-lambda ((g$x$22550) '())) g$t$22546)))) g$t$22526)))) ((letrec ((g$f$22552 (case-lambda ((g$x$22558) (if (g$syntax-pair?$14656 g$x$22558) ((case-lambda ((g$cars/f$22560) (if g$cars/f$22560 (begin '#f ((case-lambda ((g$d/f$22562) (if g$d/f$22562 (begin '#f (cons (map cons g$cars/f$22560 (car g$d/f$22562)) (cdr g$d/f$22562))) '#f))) (g$f$22552 (g$syntax-cdr$14668 g$x$22558)))) '#f))) ((case-lambda ((g$x$22564) (list g$x$22564))) (g$syntax-car$14664 g$x$22558))) ((case-lambda ((g$d$22566) (if g$d$22566 (begin '#f (cons (list (begin 'x* '())) g$d$22566)) '#f))) ((case-lambda ((g$x$22568) (list g$x$22568))) g$x$22558))))))) (case-lambda ((g$x$22554) ((case-lambda ((g$x$22556) (if g$x$22556 (begin '#f (append (car g$x$22556) (cdr g$x$22556))) '#f))) (g$f$22552 g$x$22554))))) g$t$22526)))) g$t$22514)))) ((letrec ((g$f$22570 (case-lambda ((g$x$22572) (if (g$syntax-pair?$14656 g$x$22572) ((case-lambda ((g$cars/f$22574) (if g$cars/f$22574 (begin '#f ((case-lambda ((g$cdrs/f$22576) (if g$cdrs/f$22576 (begin '#f (map cons g$cars/f$22574 g$cdrs/f$22576)) '#f))) (g$f$22570 (g$syntax-cdr$14668 g$x$22572)))) '#f))) ((case-lambda ((g$x$22578) (list g$x$22578))) (g$syntax-car$14664 g$x$22572))) (if (g$syntax-null?$14660 g$x$22572) (list (begin 'x* '())) '#f)))))) g$f$22570) g$t$22514)))) g$fmls$22506)))) (set! g$chi-lambda-clause*$15223 (case-lambda ((g$fmls*$22580 g$body**$22581 g$r$22582 g$mr$22583) (if (null? g$fmls*$22580) (values '() '()) (call-with-values (case-lambda (() (g$chi-lambda-clause$15221 (car g$fmls*$22580) (car g$body**$22581) g$r$22582 g$mr$22583))) (case-lambda ((g$a$22588 g$b$22589) (call-with-values (case-lambda (() (g$chi-lambda-clause*$15223 (cdr g$fmls*$22580) (cdr g$body**$22581) g$r$22582 g$mr$22583))) (case-lambda ((g$a*$22592 g$b*$22593) (values (cons g$a$22588 g$a*$22592) (cons g$b$22589 g$b*$22593)))))))))))) (set! g$chi-rhs$15225 (case-lambda ((g$rhs$22596 g$r$22597 g$mr$22598) ((case-lambda ((g$t$22602) (if (memv g$t$22602 '(defun)) ((case-lambda ((g$x$22607) ((case-lambda ((g$fmls$22609 g$body*$22610) (call-with-values (case-lambda (() (g$chi-lambda-clause$15221 g$fmls$22609 g$body*$22610 g$r$22597 g$mr$22598))) (case-lambda ((g$fmls$22613 g$body$22614) (g$g$build-lambda$14422$14559 '#f g$fmls$22613 g$body$22614)))))) (car g$x$22607) (cdr g$x$22607)))) (cdr g$rhs$22596)) (if (memv g$t$22602 '(expr)) ((case-lambda ((g$expr$22605) (g$chi-expr$15217 g$expr$22605 g$r$22597 g$mr$22598))) (cdr g$rhs$22596)) (if (memv g$t$22602 '(top-expr)) ((case-lambda ((g$expr$22603) (g$g$build-sequence$14490$14553 '#f (list (g$chi-expr$15217 g$expr$22603 g$r$22597 g$mr$22598) (g$g$build-void$14492$14552))))) (cdr g$rhs$22596)) (error 'chi-rhs '"invalid rhs" g$rhs$22596)))))) (car g$rhs$22596))))) (set! g$chi-rhs*$15227 (case-lambda ((g$rhs*$22617 g$r$22618 g$mr$22619) (letrec ((g$f$22623 (case-lambda ((g$ls$22625) (if (null? g$ls$22625) '() ((case-lambda ((g$a$22627) (cons g$a$22627 (g$f$22623 (cdr g$ls$22625))))) (g$chi-rhs$15225 (car g$ls$22625) g$r$22618 g$mr$22619))))))) (g$f$22623 g$rhs*$22617))))) (set! g$find-bound=?$15229 (case-lambda ((g$x$22629 g$lhs*$22630 g$rhs*$22631) (if (null? g$lhs*$22630) '#f (if (g$bound-id=?$14676 g$x$22629 (car g$lhs*$22630)) (car g$rhs*$22631) (g$find-bound=?$15229 g$x$22629 (cdr g$lhs*$22630) (cdr g$rhs*$22631))))))) (set! g$find-dups$15231 (case-lambda ((g$ls$22635) (letrec ((g$f$22637 (case-lambda ((g$ls$22639 g$dups$22640) (if (null? g$ls$22639) g$dups$22640 ((case-lambda ((g$t$22643) (if g$t$22643 ((case-lambda ((g$x$22645) (g$f$22637 (cdr g$ls$22639) (cons (list (car g$ls$22639) g$x$22645) g$dups$22640)))) g$t$22643) (g$f$22637 (cdr g$ls$22639) g$dups$22640)))) (g$find-bound=?$15229 (car g$ls$22639) (cdr g$ls$22639) (cdr g$ls$22639)))))))) (g$f$22637 g$ls$22635 '()))))) (set! g$chi-internal$15233 (case-lambda ((g$e*$22647 g$r$22648 g$mr$22649) ((case-lambda ((g$rib$22653) (call-with-values (case-lambda (() (g$chi-body*$15239 (map (case-lambda ((g$x$22655) (g$add-subst$14650 g$rib$22653 g$x$22655))) (g$syntax->list$14666 g$e*$22647)) g$r$22648 g$mr$22649 '() '() '() '() g$rib$22653 '#f))) (case-lambda ((g$e*$22657 g$r$22658 g$mr$22659 g$lex*$22660 g$rhs*$22661 g$mod**$22662 g$kwd*$22663) (begin (if (null? g$e*$22657) (error 'expander '"no expression in body" (g$strip$14688 g$e*$22657 '())) (void)) ((case-lambda ((g$rhs*$22671 g$init*$22672) (g$g$build-letrec*$14496$14550 '#f (reverse g$lex*$22660) (reverse g$rhs*$22671) (g$g$build-sequence$14490$14553 '#f g$init*$22672)))) (g$chi-rhs*$15227 g$rhs*$22661 g$r$22658 g$mr$22659) (g$chi-expr*$15213 (append (apply append (reverse g$mod**$22662)) g$e*$22657) g$r$22658 g$mr$22659)))))))) (g$make-empty-rib$14607))))) (set! g$parse-module$15235 (case-lambda ((g$e$22675) ((case-lambda ((g$t$22677) ((case-lambda ((g$ls/false$22679) (if (if g$ls/false$22679 (begin '#f (apply (case-lambda ((g$export*$22681 g$b*$22682) '#t)) g$ls/false$22679)) '#f) (apply (case-lambda ((g$export*$22685 g$b*$22686) (begin (if (for-all g$id?$14670 g$export*$22685) (void) (error 'expander '"module exports must be identifiers" (g$strip$14688 g$e$22675 '()))) (values '#f g$export*$22685 g$b*$22686)))) g$ls/false$22679) ((case-lambda ((g$t$22689) ((case-lambda ((g$ls/false$22691) (if (if g$ls/false$22691 (begin '#f (apply (case-lambda ((g$name$22693 g$export*$22694 g$b*$22695) '#t)) g$ls/false$22691)) '#f) (apply (case-lambda ((g$name$22699 g$export*$22700 g$b*$22701) (begin (if (g$id?$14670 g$name$22699) (void) (error 'expander '"module name must be an identifier" (g$strip$14688 g$e$22675 '()))) (if (for-all g$id?$14670 g$export*$22700) (void) (error 'expander '"module exports must be identifiers" (g$strip$14688 g$e$22675 '()))) (values g$name$22699 g$export*$22700 g$b*$22701)))) g$ls/false$22691) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22689 '()))))) ((case-lambda ((g$x$22705) (if (g$syntax-pair?$14656 g$x$22705) (begin '#f ((case-lambda ((g$q$22707) (if g$q$22707 (begin '#f ((case-lambda ((g$r$22709) (if g$r$22709 (begin '#f (append g$q$22707 g$r$22709)) '#f))) ((case-lambda ((g$x$22711) (if (g$syntax-pair?$14656 g$x$22711) (begin '#f ((case-lambda ((g$q$22713) (if g$q$22713 (begin '#f ((case-lambda ((g$r$22715) (if g$r$22715 (begin '#f (append g$q$22713 g$r$22715)) '#f))) ((case-lambda ((g$x$22717) (if (g$syntax-pair?$14656 g$x$22717) (begin '#f ((case-lambda ((g$q$22719) (if g$q$22719 (begin '#f ((case-lambda ((g$r$22721) (if g$r$22721 (begin '#f (append g$q$22719 g$r$22721)) '#f))) ((letrec ((g$f$22723 (case-lambda ((g$x$22725) (if (g$syntax-pair?$14656 g$x$22725) ((case-lambda ((g$cars/f$22727) (if g$cars/f$22727 (begin '#f ((case-lambda ((g$cdrs/f$22729) (if g$cdrs/f$22729 (begin '#f (map cons g$cars/f$22727 g$cdrs/f$22729)) '#f))) (g$f$22723 (g$syntax-cdr$14668 g$x$22725)))) '#f))) ((case-lambda ((g$x$22731) (list g$x$22731))) (g$syntax-car$14664 g$x$22725))) (if (g$syntax-null?$14660 g$x$22725) (list (begin 'b* '())) '#f)))))) g$f$22723) (g$syntax-cdr$14668 g$x$22717)))) '#f))) ((letrec ((g$f$22733 (case-lambda ((g$x$22735) (if (g$syntax-pair?$14656 g$x$22735) ((case-lambda ((g$cars/f$22737) (if g$cars/f$22737 (begin '#f ((case-lambda ((g$cdrs/f$22739) (if g$cdrs/f$22739 (begin '#f (map cons g$cars/f$22737 g$cdrs/f$22739)) '#f))) (g$f$22733 (g$syntax-cdr$14668 g$x$22735)))) '#f))) ((case-lambda ((g$x$22741) (list g$x$22741))) (g$syntax-car$14664 g$x$22735))) (if (g$syntax-null?$14660 g$x$22735) (list (begin 'export* '())) '#f)))))) g$f$22733) (g$syntax-car$14664 g$x$22717)))) '#f))) (g$syntax-cdr$14668 g$x$22711)))) '#f))) ((case-lambda ((g$x$22743) (list g$x$22743))) (g$syntax-car$14664 g$x$22711)))) '#f))) (g$syntax-cdr$14668 g$x$22705)))) '#f))) ((case-lambda ((g$x$22745) '())) (g$syntax-car$14664 g$x$22705)))) '#f))) g$t$22689)))) g$t$22677)))) ((case-lambda ((g$x$22747) (if (g$syntax-pair?$14656 g$x$22747) (begin '#f ((case-lambda ((g$q$22749) (if g$q$22749 (begin '#f ((case-lambda ((g$r$22751) (if g$r$22751 (begin '#f (append g$q$22749 g$r$22751)) '#f))) ((case-lambda ((g$x$22753) (if (g$syntax-pair?$14656 g$x$22753) (begin '#f ((case-lambda ((g$q$22755) (if g$q$22755 (begin '#f ((case-lambda ((g$r$22757) (if g$r$22757 (begin '#f (append g$q$22755 g$r$22757)) '#f))) ((letrec ((g$f$22759 (case-lambda ((g$x$22761) (if (g$syntax-pair?$14656 g$x$22761) ((case-lambda ((g$cars/f$22763) (if g$cars/f$22763 (begin '#f ((case-lambda ((g$cdrs/f$22765) (if g$cdrs/f$22765 (begin '#f (map cons g$cars/f$22763 g$cdrs/f$22765)) '#f))) (g$f$22759 (g$syntax-cdr$14668 g$x$22761)))) '#f))) ((case-lambda ((g$x$22767) (list g$x$22767))) (g$syntax-car$14664 g$x$22761))) (if (g$syntax-null?$14660 g$x$22761) (list (begin 'b* '())) '#f)))))) g$f$22759) (g$syntax-cdr$14668 g$x$22753)))) '#f))) ((letrec ((g$f$22769 (case-lambda ((g$x$22771) (if (g$syntax-pair?$14656 g$x$22771) ((case-lambda ((g$cars/f$22773) (if g$cars/f$22773 (begin '#f ((case-lambda ((g$cdrs/f$22775) (if g$cdrs/f$22775 (begin '#f (map cons g$cars/f$22773 g$cdrs/f$22775)) '#f))) (g$f$22769 (g$syntax-cdr$14668 g$x$22771)))) '#f))) ((case-lambda ((g$x$22777) (list g$x$22777))) (g$syntax-car$14664 g$x$22771))) (if (g$syntax-null?$14660 g$x$22771) (list (begin 'export* '())) '#f)))))) g$f$22769) (g$syntax-car$14664 g$x$22753)))) '#f))) (g$syntax-cdr$14668 g$x$22747)))) '#f))) ((case-lambda ((g$x$22779) '())) (g$syntax-car$14664 g$x$22747)))) '#f))) g$t$22677)))) g$e$22675)))) (set! g$chi-internal-module$15237 (case-lambda ((g$e$22781 g$r$22782 g$mr$22783 g$lex*$22784 g$rhs*$22785 g$mod**$22786 g$kwd*$22787) (call-with-values (case-lambda (() (g$parse-module$15235 g$e$22781))) (case-lambda ((g$name$22795 g$exp-id*$22796 g$e*$22797) ((case-lambda ((g$rib$22801) ((case-lambda ((g$e*$22803) ((case-lambda (() (call-with-values (case-lambda (() (g$chi-body*$15239 g$e*$22803 g$r$22782 g$mr$22783 g$lex*$22784 g$rhs*$22785 g$mod**$22786 g$kwd*$22787 g$rib$22801 '#f))) (case-lambda ((g$e*$22805 g$r$22806 g$mr$22807 g$lex*$22808 g$rhs*$22809 g$mod**$22810 g$kwd*$22811) ((case-lambda ((g$exp-lab*$22819 g$mod**$22820) (if (not g$name$22795) (values g$lex*$22808 g$rhs*$22809 g$exp-id*$22796 g$exp-lab*$22819 g$r$22806 g$mr$22807 g$mod**$22820 g$kwd*$22811) ((case-lambda ((g$lab$22823 g$iface$22824) (values g$lex*$22808 g$rhs*$22809 (list g$name$22795) (list g$lab$22823) (cons (cons g$lab$22823 (cons '$module g$iface$22824)) g$r$22806) (cons (cons g$lab$22823 (cons '$module g$iface$22824)) g$mr$22807) g$mod**$22820 g$kwd*$22811))) (g$gen-label$14584 'module) (cons g$exp-id*$22796 g$exp-lab*$22819))))) (map (case-lambda ((g$x$22827) ((case-lambda ((g$t$22829) (if g$t$22829 g$t$22829 (begin '#f (error 'expander '"cannot find module export" (g$strip$14688 g$x$22827 '())))))) (g$id->label$14692 (g$mkstx$14646 (g$id->sym$14672 g$x$22827) (g$stx-mark*$14626 g$x$22827) (list g$rib$22801)))))) g$exp-id*$22796) (cons g$e*$22805 g$mod**$22810)))))))))) (map (case-lambda ((g$x$22831) (g$add-subst$14650 g$rib$22801 g$x$22831))) (g$syntax->list$14666 g$e*$22797))))) (g$make-empty-rib$14607)))))))) (set! g$chi-body*$15239 (case-lambda ((g$e*$22833 g$r$22834 g$mr$22835 g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22839 g$rib$22840 g$top?$22841) (if (null? g$e*$22833) (values g$e*$22833 g$r$22834 g$mr$22835 g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22839) ((case-lambda ((g$e$22851) (call-with-values (case-lambda (() (g$syntax-type$14702 g$e$22851 g$r$22834))) (case-lambda ((g$type$22853 g$value$22854 g$kwd$22855) ((case-lambda ((g$kwd*$22859) ((case-lambda ((g$t$22861) (if (memv g$t$22861 '(define)) (call-with-values (case-lambda (() (g$parse-define$15095 g$e$22851))) (case-lambda ((g$id$23047 g$rhs$23048) (begin (if (g$bound-id-member?$14684 g$id$23047 g$kwd*$22859) (error 'expander '"cannot redefine keyword" (g$strip$14688 g$e$22851 '())) (void)) ((case-lambda ((g$lex$23051 g$lab$23052) (begin (g$extend-rib!$14609 g$rib$22840 g$id$23047 g$lab$23052) (g$chi-body*$15239 (cdr g$e*$22833) (g$add-lexical$15101 g$lab$23052 g$lex$23051 g$r$22834) g$mr$22835 (cons g$lex$23051 g$lex*$22836) (cons g$rhs$23048 g$rhs*$22837) g$mod**$22838 g$kwd*$22859 g$rib$22840 g$top?$22841)))) (g$gen-lexical$14580 g$id$23047) (g$gen-label$14584 g$id$23047)))))) (if (memv g$t$22861 '(define-syntax)) (call-with-values (case-lambda (() (g$parse-define-syntax$15097 g$e$22851))) (case-lambda ((g$id$23037 g$rhs$23038) (begin (if (g$bound-id-member?$14684 g$id$23037 g$kwd*$22859) (error 'expander '"cannot redefine keyword" (g$strip$14688 g$e$22851 '())) (void)) ((case-lambda ((g$lab$23041 g$expanded-rhs$23042) (begin (g$extend-rib!$14609 g$rib$22840 g$id$23037 g$lab$23041) ((case-lambda ((g$b$23045) (g$chi-body*$15239 (cdr g$e*$22833) (cons (cons g$lab$23041 g$b$23045) g$r$22834) (cons (cons g$lab$23041 g$b$23045) g$mr$22835) g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22859 g$rib$22840 g$top?$22841))) (g$make-eval-transformer$14733 g$expanded-rhs$23042))))) (g$gen-label$14584 g$id$23037) (g$expand-transformer$15251 g$rhs$23038 g$mr$22835)))))) (if (memv g$t$22861 '(let-syntax letrec-syntax)) ((case-lambda ((g$t$22961) ((case-lambda ((g$ls/false$22963) (if (if g$ls/false$22963 (begin '#f (apply (case-lambda ((g$xlhs*$22965 g$xrhs*$22966 g$xbody*$22967) (if (g$valid-bound-ids?$14680 g$xlhs*$22965) (void) (error 'expander '"invalid identifiers" (g$strip$14688 g$e$22851 '()))))) g$ls/false$22963)) '#f) (apply (case-lambda ((g$xlhs*$22971 g$xrhs*$22972 g$xbody*$22973) ((case-lambda ((g$xlab*$22977) ((case-lambda ((g$xrib$22979) ((case-lambda ((g$xb*$22981) ((case-lambda (() (g$chi-body*$15239 (append (map (case-lambda ((g$x$22983) (g$add-subst$14650 g$xrib$22979 g$x$22983))) g$xbody*$22973) (cdr g$e*$22833)) (append (map cons g$xlab*$22977 g$xb*$22981) g$r$22834) (append (map cons g$xlab*$22977 g$xb*$22981) g$mr$22835) g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22859 g$rib$22840 g$top?$22841)))))) (map (case-lambda ((g$x$22985) (g$make-eval-transformer$14733 (g$expand-transformer$15251 (if (eq? g$type$22853 'let-syntax) g$x$22985 (g$add-subst$14650 g$xrib$22979 g$x$22985)) g$mr$22835)))) g$xrhs*$22972)))) (g$make-full-rib$14617 g$xlhs*$22971 g$xlab*$22977)))) (map g$gen-label$14584 g$xlhs*$22971)))) g$ls/false$22963) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22961 '()))))) ((case-lambda ((g$x$22987) (if (g$syntax-pair?$14656 g$x$22987) (begin '#f ((case-lambda ((g$q$22989) (if g$q$22989 (begin '#f ((case-lambda ((g$r$22991) (if g$r$22991 (begin '#f (append g$q$22989 g$r$22991)) '#f))) ((case-lambda ((g$x$22993) (if (g$syntax-pair?$14656 g$x$22993) (begin '#f ((case-lambda ((g$q$22995) (if g$q$22995 (begin '#f ((case-lambda ((g$r$22997) (if g$r$22997 (begin '#f (append g$q$22995 g$r$22997)) '#f))) ((letrec ((g$f$22999 (case-lambda ((g$x$23001) (if (g$syntax-pair?$14656 g$x$23001) ((case-lambda ((g$cars/f$23003) (if g$cars/f$23003 (begin '#f ((case-lambda ((g$cdrs/f$23005) (if g$cdrs/f$23005 (begin '#f (map cons g$cars/f$23003 g$cdrs/f$23005)) '#f))) (g$f$22999 (g$syntax-cdr$14668 g$x$23001)))) '#f))) ((case-lambda ((g$x$23007) (list g$x$23007))) (g$syntax-car$14664 g$x$23001))) (if (g$syntax-null?$14660 g$x$23001) (list (begin 'xbody* '())) '#f)))))) g$f$22999) (g$syntax-cdr$14668 g$x$22993)))) '#f))) ((letrec ((g$f$23009 (case-lambda ((g$x$23011) (if (g$syntax-pair?$14656 g$x$23011) ((case-lambda ((g$cars/f$23013) (if g$cars/f$23013 (begin '#f ((case-lambda ((g$cdrs/f$23015) (if g$cdrs/f$23015 (begin '#f (map cons g$cars/f$23013 g$cdrs/f$23015)) '#f))) (g$f$23009 (g$syntax-cdr$14668 g$x$23011)))) '#f))) ((case-lambda ((g$x$23017) (if (g$syntax-pair?$14656 g$x$23017) (begin '#f ((case-lambda ((g$q$23019) (if g$q$23019 (begin '#f ((case-lambda ((g$r$23021) (if g$r$23021 (begin '#f (append g$q$23019 g$r$23021)) '#f))) ((case-lambda ((g$x$23023) (if (g$syntax-pair?$14656 g$x$23023) (begin '#f ((case-lambda ((g$q$23025) (if g$q$23025 (begin '#f ((case-lambda ((g$r$23027) (if g$r$23027 (begin '#f (append g$q$23025 g$r$23027)) '#f))) ((case-lambda ((g$x$23029) (if (equal? (g$stx->datum$14690 g$x$23029) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$23023)))) '#f))) ((case-lambda ((g$x$23031) (list g$x$23031))) (g$syntax-car$14664 g$x$23023)))) '#f))) (g$syntax-cdr$14668 g$x$23017)))) '#f))) ((case-lambda ((g$x$23033) (list g$x$23033))) (g$syntax-car$14664 g$x$23017)))) '#f))) (g$syntax-car$14664 g$x$23011))) (if (g$syntax-null?$14660 g$x$23011) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f)))))) g$f$23009) (g$syntax-car$14664 g$x$22993)))) '#f))) (g$syntax-cdr$14668 g$x$22987)))) '#f))) ((case-lambda ((g$x$23035) '())) (g$syntax-car$14664 g$x$22987)))) '#f))) g$t$22961)))) g$e$22851) (if (memv g$t$22861 '(begin)) ((case-lambda ((g$t$22935) ((case-lambda ((g$ls/false$22937) (if (if g$ls/false$22937 (begin '#f (apply (case-lambda ((g$x*$22939) '#t)) g$ls/false$22937)) '#f) (apply (case-lambda ((g$x*$22941) (g$chi-body*$15239 (append g$x*$22941 (cdr g$e*$22833)) g$r$22834 g$mr$22835 g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22859 g$rib$22840 g$top?$22841))) g$ls/false$22937) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22935 '()))))) ((case-lambda ((g$x$22943) (if (g$syntax-pair?$14656 g$x$22943) (begin '#f ((case-lambda ((g$q$22945) (if g$q$22945 (begin '#f ((case-lambda ((g$r$22947) (if g$r$22947 (begin '#f (append g$q$22945 g$r$22947)) '#f))) ((letrec ((g$f$22949 (case-lambda ((g$x$22951) (if (g$syntax-pair?$14656 g$x$22951) ((case-lambda ((g$cars/f$22953) (if g$cars/f$22953 (begin '#f ((case-lambda ((g$cdrs/f$22955) (if g$cdrs/f$22955 (begin '#f (map cons g$cars/f$22953 g$cdrs/f$22955)) '#f))) (g$f$22949 (g$syntax-cdr$14668 g$x$22951)))) '#f))) ((case-lambda ((g$x$22957) (list g$x$22957))) (g$syntax-car$14664 g$x$22951))) (if (g$syntax-null?$14660 g$x$22951) (list (begin 'x* '())) '#f)))))) g$f$22949) (g$syntax-cdr$14668 g$x$22943)))) '#f))) ((case-lambda ((g$x$22959) '())) (g$syntax-car$14664 g$x$22943)))) '#f))) g$t$22935)))) g$e$22851) (if (memv g$t$22861 '(global-macro global-macro!)) (g$chi-body*$15239 (cons (g$add-subst$14650 g$rib$22840 (g$chi-global-macro$15211 g$value$22854 g$e$22851)) (cdr g$e*$22833)) g$r$22834 g$mr$22835 g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22859 g$rib$22840 g$top?$22841) (if (memv g$t$22861 '(local-macro local-macro!)) (g$chi-body*$15239 (cons (g$add-subst$14650 g$rib$22840 (g$chi-local-macro$15209 g$value$22854 g$e$22851)) (cdr g$e*$22833)) g$r$22834 g$mr$22835 g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22859 g$rib$22840 g$top?$22841) (if (memv g$t$22861 '(macro macro!)) (g$chi-body*$15239 (cons (g$add-subst$14650 g$rib$22840 (g$chi-macro$15207 g$value$22854 g$e$22851)) (cdr g$e*$22833)) g$r$22834 g$mr$22835 g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22859 g$rib$22840 g$top?$22841) (if (memv g$t$22861 '(module)) (call-with-values (case-lambda (() (g$chi-internal-module$15237 g$e$22851 g$r$22834 g$mr$22835 g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22859))) (case-lambda ((g$lex*$22915 g$rhs*$22916 g$m-exp-id*$22917 g$m-exp-lab*$22918 g$r$22919 g$mr$22920 g$mod**$22921 g$kwd*$22922) (begin (for-each (case-lambda ((g$id$22931 g$lab$22932) (g$extend-rib!$14609 g$rib$22840 g$id$22931 g$lab$22932))) g$m-exp-id*$22917 g$m-exp-lab*$22918) (g$chi-body*$15239 (cdr g$e*$22833) g$r$22919 g$mr$22920 g$lex*$22915 g$rhs*$22916 g$mod**$22921 g$kwd*$22922 g$rib$22840 g$top?$22841))))) (if (memv g$t$22861 '(import)) (begin ((case-lambda (() ((case-lambda ((g$module-import$22862) (begin (set! g$module-import$22862 (case-lambda ((g$e$22864 g$r$22865) ((case-lambda ((g$t$22868) ((case-lambda ((g$ls/false$22870) (if (if g$ls/false$22870 (begin '#f (apply (case-lambda ((g$id$22872) (g$id?$14670 g$id$22872))) g$ls/false$22870)) '#f) (apply (case-lambda ((g$id$22874) (call-with-values (case-lambda (() (g$syntax-type$14702 g$id$22874 g$r$22865))) (case-lambda ((g$type$22876 g$value$22877 g$kwd$22878) ((case-lambda ((g$t$22882) (if (memv g$t$22882 '($module)) ((case-lambda ((g$iface$22883) ((case-lambda ((g$id*$22885 g$lab*$22886) (values g$id*$22885 g$lab*$22886))) (car g$iface$22883) (cdr g$iface$22883)))) g$value$22877) (error 'expander '"invalid import" (g$strip$14688 g$e$22864 '()))))) g$type$22876)))))) g$ls/false$22870) (error 'expander '"invalid syntax" (g$strip$14688 g$t$22868 '()))))) ((case-lambda ((g$x$22889) (if (g$syntax-pair?$14656 g$x$22889) (begin '#f ((case-lambda ((g$q$22891) (if g$q$22891 (begin '#f ((case-lambda ((g$r$22893) (if g$r$22893 (begin '#f (append g$q$22891 g$r$22893)) '#f))) ((case-lambda ((g$x$22895) (if (g$syntax-pair?$14656 g$x$22895) (begin '#f ((case-lambda ((g$q$22897) (if g$q$22897 (begin '#f ((case-lambda ((g$r$22899) (if g$r$22899 (begin '#f (append g$q$22897 g$r$22899)) '#f))) ((case-lambda ((g$x$22901) (if (equal? (g$stx->datum$14690 g$x$22901) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$22895)))) '#f))) ((case-lambda ((g$x$22903) (list g$x$22903))) (g$syntax-car$14664 g$x$22895)))) '#f))) (g$syntax-cdr$14668 g$x$22889)))) '#f))) ((case-lambda ((g$x$22905) '())) (g$syntax-car$14664 g$x$22889)))) '#f))) g$t$22868)))) g$e$22864)))) (call-with-values (case-lambda (() (g$module-import$22862 g$e$22851 g$r$22834))) (case-lambda ((g$id*$22907 g$lab*$22908) (for-each (case-lambda ((g$id$22911 g$lab$22912) (g$extend-rib!$14609 g$rib$22840 g$id$22911 g$lab$22912))) g$id*$22907 g$lab*$22908))))))) '#f)))) (g$chi-body*$15239 (cdr g$e*$22833) g$r$22834 g$mr$22835 g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22859 g$rib$22840 g$top?$22841)) (if g$top?$22841 (g$chi-body*$15239 (cdr g$e*$22833) g$r$22834 g$mr$22835 (cons (g$gen-lexical$14580 'dummy) g$lex*$22836) (cons (cons 'top-expr g$e$22851) g$rhs*$22837) g$mod**$22838 g$kwd*$22859 g$rib$22840 g$top?$22841) (values g$e*$22833 g$r$22834 g$mr$22835 g$lex*$22836 g$rhs*$22837 g$mod**$22838 g$kwd*$22859))))))))))))) g$type$22853))) (if (g$id?$14670 g$kwd$22855) (cons g$kwd$22855 g$kwd*$22839) g$kwd*$22839))))))) (car g$e*$22833)))))) (set! g$set-global-macro-binding!$15241 (case-lambda ((g$sym$23055 g$loc$23056 g$b$23057) (begin (g$g$extend-library-subst!$13965$14261 (g$interaction-library$15332) g$sym$23055 g$loc$23056) (g$g$extend-library-env!$13967$14260 (g$interaction-library$15332) g$loc$23056 g$b$23057))))) (set! g$gen-global-macro-binding$15243 (case-lambda ((g$id$23061 g$ctxt$23062) (g$gen-global-var-binding$15245 g$id$23061 g$ctxt$23062)))) (set! g$gen-global-var-binding$15245 (case-lambda ((g$id$23065 g$ctxt$23066) ((case-lambda ((g$label$23069) ((case-lambda ((g$b$23071) ((case-lambda ((g$t$23073) (if (memv g$t$23073 '(global)) ((case-lambda ((g$x$23074) ((case-lambda ((g$lib$23076 g$loc$23077) (if (eq? g$lib$23076 (g$interaction-library$15332)) g$loc$23077 (error 'expander '"cannot modify imported binding" (g$strip$14688 g$ctxt$23066 '()))))) (car g$x$23074) (cdr g$x$23074)))) (g$binding-value$14700 g$b$23071)) (error 'expander '"cannot modify binding in" (g$strip$14688 g$ctxt$23066 '()))))) (g$binding-type$14698 g$b$23071)))) (g$g$imported-label->binding$13969$14259 g$label$23069)))) (g$id->label$14692 g$id$23065))))) (set! g$chi-top-set!$15247 (case-lambda ((g$e$23080) ((case-lambda ((g$t$23082) ((case-lambda ((g$ls/false$23084) (if (if g$ls/false$23084 (begin '#f (apply (case-lambda ((g$id$23086 g$rhs$23087) (g$id?$14670 g$id$23086))) g$ls/false$23084)) '#f) (apply (case-lambda ((g$id$23090 g$rhs$23091) ((case-lambda ((g$loc$23094) ((case-lambda ((g$rhs$23096) (values g$loc$23094 g$rhs$23096))) (g$chi-expr$15217 g$rhs$23091 '() '())))) (g$gen-global-var-binding$15245 g$id$23090 g$e$23080)))) g$ls/false$23084) (error 'expander '"invalid syntax" (g$strip$14688 g$t$23082 '()))))) ((case-lambda ((g$x$23098) (if (g$syntax-pair?$14656 g$x$23098) (begin '#f ((case-lambda ((g$q$23100) (if g$q$23100 (begin '#f ((case-lambda ((g$r$23102) (if g$r$23102 (begin '#f (append g$q$23100 g$r$23102)) '#f))) ((case-lambda ((g$x$23104) (if (g$syntax-pair?$14656 g$x$23104) (begin '#f ((case-lambda ((g$q$23106) (if g$q$23106 (begin '#f ((case-lambda ((g$r$23108) (if g$r$23108 (begin '#f (append g$q$23106 g$r$23108)) '#f))) ((case-lambda ((g$x$23110) (if (g$syntax-pair?$14656 g$x$23110) (begin '#f ((case-lambda ((g$q$23112) (if g$q$23112 (begin '#f ((case-lambda ((g$r$23114) (if g$r$23114 (begin '#f (append g$q$23112 g$r$23114)) '#f))) ((case-lambda ((g$x$23116) (if (equal? (g$stx->datum$14690 g$x$23116) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$23110)))) '#f))) ((case-lambda ((g$x$23118) (list g$x$23118))) (g$syntax-car$14664 g$x$23110)))) '#f))) (g$syntax-cdr$14668 g$x$23104)))) '#f))) ((case-lambda ((g$x$23120) (list g$x$23120))) (g$syntax-car$14664 g$x$23104)))) '#f))) (g$syntax-cdr$14668 g$x$23098)))) '#f))) ((case-lambda ((g$x$23122) '())) (g$syntax-car$14664 g$x$23098)))) '#f))) g$t$23082)))) g$e$23080)))) (set! g$chi-top*$15249 (case-lambda ((g$e*$23124 g$init*$23125) (if (null? g$e*$23124) g$init*$23125 ((case-lambda ((g$e$23128) (call-with-values (case-lambda (() (g$syntax-type$14702 g$e$23128 '()))) (case-lambda ((g$type$23130 g$value$23131 g$kwd$23132) ((case-lambda ((g$t$23136) (if (memv g$t$23136 '(define)) (call-with-values (case-lambda (() (g$parse-define$15095 g$e$23128))) (case-lambda ((g$id$23177 g$rhs$23178) ((case-lambda ((g$loc$23181) ((case-lambda ((g$rhs$23183) (g$chi-top*$15249 (cdr g$e*$23124) (cons (cons g$loc$23181 g$rhs$23183) g$init*$23125)))) (g$chi-rhs$15225 g$rhs$23178 '() '())))) (g$gen-global-var-binding$15245 g$id$23177 g$e$23128))))) (if (memv g$t$23136 '(set!)) (call-with-values (case-lambda (() (g$chi-top-set!$15247 g$e$23128))) (case-lambda ((g$loc$23173 g$rhs$23174) (g$chi-top*$15249 (cdr g$e*$23124) (cons (cons g$loc$23173 g$rhs$23174) g$init*$23125))))) (if (memv g$t$23136 '(define-syntax)) (call-with-values (case-lambda (() (g$parse-define-syntax$15097 g$e$23128))) (case-lambda ((g$id$23163 g$rhs$23164) ((case-lambda ((g$loc$23167) ((case-lambda ((g$expanded-rhs$23169) ((case-lambda ((g$b$23171) (begin (g$set-global-macro-binding!$15241 (g$id->sym$14672 g$id$23163) g$loc$23167 g$b$23171) (g$chi-top*$15249 (cdr g$e*$23124) g$init*$23125)))) (g$make-eval-transformer$14733 g$expanded-rhs$23169)))) (g$expand-transformer$15251 g$rhs$23164 '())))) (g$gen-global-macro-binding$15243 g$id$23163 g$e$23128))))) (if (memv g$t$23136 '(let-syntax letrec-syntax)) (error 'chi-top* '"not supported yet at top level" g$type$23130) (if (memv g$t$23136 '(begin)) ((case-lambda ((g$t$23137) ((case-lambda ((g$ls/false$23139) (if (if g$ls/false$23139 (begin '#f (apply (case-lambda ((g$x*$23141) '#t)) g$ls/false$23139)) '#f) (apply (case-lambda ((g$x*$23143) (g$chi-top*$15249 (append g$x*$23143 (cdr g$e*$23124)) g$init*$23125))) g$ls/false$23139) (error 'expander '"invalid syntax" (g$strip$14688 g$t$23137 '()))))) ((case-lambda ((g$x$23145) (if (g$syntax-pair?$14656 g$x$23145) (begin '#f ((case-lambda ((g$q$23147) (if g$q$23147 (begin '#f ((case-lambda ((g$r$23149) (if g$r$23149 (begin '#f (append g$q$23147 g$r$23149)) '#f))) ((letrec ((g$f$23151 (case-lambda ((g$x$23153) (if (g$syntax-pair?$14656 g$x$23153) ((case-lambda ((g$cars/f$23155) (if g$cars/f$23155 (begin '#f ((case-lambda ((g$cdrs/f$23157) (if g$cdrs/f$23157 (begin '#f (map cons g$cars/f$23155 g$cdrs/f$23157)) '#f))) (g$f$23151 (g$syntax-cdr$14668 g$x$23153)))) '#f))) ((case-lambda ((g$x$23159) (list g$x$23159))) (g$syntax-car$14664 g$x$23153))) (if (g$syntax-null?$14660 g$x$23153) (list (begin 'x* '())) '#f)))))) g$f$23151) (g$syntax-cdr$14668 g$x$23145)))) '#f))) ((case-lambda ((g$x$23161) '())) (g$syntax-car$14664 g$x$23145)))) '#f))) g$t$23137)))) g$e$23128) (if (memv g$t$23136 '(global-macro global-macro!)) (g$chi-top*$15249 (cons (g$chi-global-macro$15211 g$value$23131 g$e$23128) (cdr g$e*$23124)) g$init*$23125) (if (memv g$t$23136 '(local-macro local-macro!)) (g$chi-top*$15249 (cons (g$chi-local-macro$15209 g$value$23131 g$e$23128) (cdr g$e*$23124)) g$init*$23125) (if (memv g$t$23136 '(macro macro!)) (g$chi-top*$15249 (cons (g$chi-macro$15207 g$value$23131 g$e$23128) (cdr g$e*$23124)) g$init*$23125) (g$chi-top*$15249 (cdr g$e*$23124) (cons (cons '#f (g$chi-expr$15217 g$e$23128 '() '())) g$init*$23125)))))))))))) g$type$23130)))))) (car g$e*$23124)))))) (set! g$expand-transformer$15251 (case-lambda ((g$expr$23185 g$r$23186) ((case-lambda ((g$rtc$23189) ((case-lambda ((g$expanded-rhs$23191) (begin (for-each ((case-lambda ((g$mark-visit$23193) (case-lambda ((g$x$23195) (begin (g$g$invoke-library$13971$14258 g$x$23195) (g$mark-visit$23193 g$x$23195)))))) (g$vis-collector$15267)) (g$rtc$23189)) g$expanded-rhs$23191))) ((case-lambda ((g$g$t$23197$23201 g$g$t$23198$23202 g$g$t$23199$23203 g$g$t$23200$23204) ((case-lambda ((g$swap$23209) (dynamic-wind g$swap$23209 (case-lambda (() (g$chi-expr$15217 g$expr$23185 g$r$23186 g$r$23186))) g$swap$23209))) (case-lambda (() (begin ((case-lambda ((g$t$23211) (begin (g$g$t$23197$23201 g$g$t$23199$23203) (set! g$g$t$23199$23203 g$t$23211)))) (g$g$t$23197$23201)) ((case-lambda ((g$t$23213) (begin (g$g$t$23198$23202 g$g$t$23200$23204) (set! g$g$t$23200$23204 g$t$23213)))) (g$g$t$23198$23202)))))))) g$inv-collector$15265 g$vis-collector$15267 g$rtc$23189 (case-lambda ((g$x$23215) (values))))))) (g$make-collector$15263))))) (set! g$parse-exports$15253 (case-lambda ((g$exp*$23217) (letrec ((g$f$23219 (case-lambda ((g$exp*$23221 g$int*$23222 g$ext*$23223) (if (null? g$exp*$23221) (begin ((case-lambda ((g$id*$23227) (if (g$valid-bound-ids?$14680 g$id*$23227) (void) (error 'expander '"invalid exports" (g$find-dups$15231 g$id*$23227))))) (map (case-lambda ((g$x$23229) (g$mkstx$14646 g$x$23229 g$top-mark*$14576 '()))) g$ext*$23223)) (values g$int*$23222 g$ext*$23223)) ((case-lambda ((g$t$23231) ((case-lambda ((g$ls/false$23233) (if (if g$ls/false$23233 (begin '#f (apply (case-lambda ((g$rename$23235 g$i*$23236 g$e*$23237) '#t)) g$ls/false$23233)) '#f) (apply (case-lambda ((g$rename$23241 g$i*$23242 g$e*$23243) (begin (if (if (eq? g$rename$23241 'rename) (if (for-all symbol? g$i*$23242) (begin '#f (for-all symbol? g$e*$23243)) '#f) '#f) (void) (error 'expander '"invalid export specifier" (car g$exp*$23221))) (g$f$23219 (cdr g$exp*$23221) (append g$i*$23242 g$int*$23222) (append g$e*$23243 g$ext*$23223))))) g$ls/false$23233) ((case-lambda ((g$t$23247) ((case-lambda ((g$ls/false$23249) (if (if g$ls/false$23249 (begin '#f (apply (case-lambda ((g$ie$23251) '#t)) g$ls/false$23249)) '#f) (apply (case-lambda ((g$ie$23253) (begin (if (symbol? g$ie$23253) (void) (error 'expander '"invalid export" g$ie$23253)) (g$f$23219 (cdr g$exp*$23221) (cons g$ie$23253 g$int*$23222) (cons g$ie$23253 g$ext*$23223))))) g$ls/false$23249) (error 'expander '"invalid syntax" (g$strip$14688 g$t$23247 '()))))) ((case-lambda ((g$x$23255) (list g$x$23255))) g$t$23247)))) g$t$23231)))) ((case-lambda ((g$x$23257) (if (g$syntax-pair?$14656 g$x$23257) (begin '#f ((case-lambda ((g$q$23259) (if g$q$23259 (begin '#f ((case-lambda ((g$r$23261) (if g$r$23261 (begin '#f (append g$q$23259 g$r$23261)) '#f))) ((letrec ((g$f$23263 (case-lambda ((g$x$23265) (if (g$syntax-pair?$14656 g$x$23265) ((case-lambda ((g$cars/f$23267) (if g$cars/f$23267 (begin '#f ((case-lambda ((g$cdrs/f$23269) (if g$cdrs/f$23269 (begin '#f (map cons g$cars/f$23267 g$cdrs/f$23269)) '#f))) (g$f$23263 (g$syntax-cdr$14668 g$x$23265)))) '#f))) ((case-lambda ((g$x$23271) (if (g$syntax-pair?$14656 g$x$23271) (begin '#f ((case-lambda ((g$q$23273) (if g$q$23273 (begin '#f ((case-lambda ((g$r$23275) (if g$r$23275 (begin '#f (append g$q$23273 g$r$23275)) '#f))) ((case-lambda ((g$x$23277) (if (g$syntax-pair?$14656 g$x$23277) (begin '#f ((case-lambda ((g$q$23279) (if g$q$23279 (begin '#f ((case-lambda ((g$r$23281) (if g$r$23281 (begin '#f (append g$q$23279 g$r$23281)) '#f))) ((case-lambda ((g$x$23283) (if (equal? (g$stx->datum$14690 g$x$23283) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$23277)))) '#f))) ((case-lambda ((g$x$23285) (list g$x$23285))) (g$syntax-car$14664 g$x$23277)))) '#f))) (g$syntax-cdr$14668 g$x$23271)))) '#f))) ((case-lambda ((g$x$23287) (list g$x$23287))) (g$syntax-car$14664 g$x$23271)))) '#f))) (g$syntax-car$14664 g$x$23265))) (if (g$syntax-null?$14660 g$x$23265) (list (begin 'i* '()) (begin 'e* '())) '#f)))))) g$f$23263) (g$syntax-cdr$14668 g$x$23257)))) '#f))) ((case-lambda ((g$x$23289) (list g$x$23289))) (g$syntax-car$14664 g$x$23257)))) '#f))) g$t$23231)))) (car g$exp*$23221))))))) (g$f$23219 g$exp*$23217 '() '()))))) (set! g$parse-library-name$15255 (case-lambda ((g$spec$23291) ((case-lambda ((g$parse$23293) (begin (set! g$parse$23293 (case-lambda ((g$x$23295) ((case-lambda ((g$t$23297) ((case-lambda ((g$ls/false$23299) (if (if g$ls/false$23299 (begin '#f (apply (case-lambda ((g$v*$23301) (for-all (case-lambda ((g$x$23303) (if (integer? g$x$23303) (begin '#f (exact? g$x$23303)) '#f))) g$v*$23301))) g$ls/false$23299)) '#f) (apply (case-lambda ((g$v*$23305) (values '() g$v*$23305))) g$ls/false$23299) ((case-lambda ((g$t$23307) ((case-lambda ((g$ls/false$23309) (if (if g$ls/false$23309 (begin '#f (apply (case-lambda ((g$x$23311 g$rest$23312) (symbol? g$x$23311))) g$ls/false$23309)) '#f) (apply (case-lambda ((g$x$23315 g$rest$23316) (call-with-values (case-lambda (() (g$parse$23293 g$rest$23316))) (case-lambda ((g$x*$23319 g$v*$23320) (values (cons g$x$23315 g$x*$23319) g$v*$23320)))))) g$ls/false$23309) ((case-lambda ((g$t$23323) ((case-lambda ((g$ls/false$23325) (if (if g$ls/false$23325 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23325)) '#f) (apply (case-lambda (() (values '() '()))) g$ls/false$23325) ((case-lambda ((g$t$23327) ((case-lambda ((g$ls/false$23329) (if (if g$ls/false$23329 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23329)) '#f) (apply (case-lambda (() (error 'expander '"invalid library name" (g$strip$14688 g$spec$23291 '())))) g$ls/false$23329) (error 'expander '"invalid syntax" (g$strip$14688 g$t$23327 '()))))) ((case-lambda ((g$x$23331) '())) g$t$23327)))) g$t$23323)))) ((case-lambda ((g$x$23333) (if (equal? (g$stx->datum$14690 g$x$23333) '()) (begin '#f '()) '#f))) g$t$23323)))) g$t$23307)))) ((case-lambda ((g$x$23335) (if (g$syntax-pair?$14656 g$x$23335) (begin '#f ((case-lambda ((g$q$23337) (if g$q$23337 (begin '#f ((case-lambda ((g$r$23339) (if g$r$23339 (begin '#f (append g$q$23337 g$r$23339)) '#f))) ((case-lambda ((g$x$23341) (list g$x$23341))) (g$syntax-cdr$14668 g$x$23335)))) '#f))) ((case-lambda ((g$x$23343) (list g$x$23343))) (g$syntax-car$14664 g$x$23335)))) '#f))) g$t$23307)))) g$t$23297)))) ((case-lambda ((g$x$23345) (if (g$syntax-pair?$14656 g$x$23345) (begin '#f ((case-lambda ((g$q$23347) (if g$q$23347 (begin '#f ((case-lambda ((g$r$23349) (if g$r$23349 (begin '#f (append g$q$23347 g$r$23349)) '#f))) ((case-lambda ((g$x$23351) (if (equal? (g$stx->datum$14690 g$x$23351) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$23345)))) '#f))) ((letrec ((g$f$23353 (case-lambda ((g$x$23355) (if (g$syntax-pair?$14656 g$x$23355) ((case-lambda ((g$cars/f$23357) (if g$cars/f$23357 (begin '#f ((case-lambda ((g$cdrs/f$23359) (if g$cdrs/f$23359 (begin '#f (map cons g$cars/f$23357 g$cdrs/f$23359)) '#f))) (g$f$23353 (g$syntax-cdr$14668 g$x$23355)))) '#f))) ((case-lambda ((g$x$23361) (list g$x$23361))) (g$syntax-car$14664 g$x$23355))) (if (g$syntax-null?$14660 g$x$23355) (list (begin 'v* '())) '#f)))))) g$f$23353) (g$syntax-car$14664 g$x$23345)))) '#f))) g$t$23297)))) g$x$23295)))) (call-with-values (case-lambda (() (g$parse$23293 g$spec$23291))) (case-lambda ((g$name*$23363 g$ver*$23364) (begin (if (null? g$name*$23363) (error 'expander '"empty library name" (g$strip$14688 g$spec$23291 '())) (void)) (values g$name*$23363 g$ver*$23364)))))))) '#f)))) (set! g$parse-library$15257 (case-lambda ((g$e$23367) ((case-lambda ((g$t$23369) ((case-lambda ((g$ls/false$23371) (if (if g$ls/false$23371 (begin '#f (apply (case-lambda ((g$library$23373 g$name*$23374 g$export$23375 g$exp*$23376 g$import$23377 g$imp*$23378 g$b*$23379) (if (eq? g$export$23375 'export) (if (eq? g$import$23377 'import) (begin '#f (eq? g$library$23373 'library)) '#f) '#f))) g$ls/false$23371)) '#f) (apply (case-lambda ((g$library$23387 g$name*$23388 g$export$23389 g$exp*$23390 g$import$23391 g$imp*$23392 g$b*$23393) (values g$name*$23388 g$exp*$23390 g$imp*$23392 g$b*$23393))) g$ls/false$23371) ((case-lambda ((g$t$23401) ((case-lambda ((g$ls/false$23403) (if (if g$ls/false$23403 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23403)) '#f) (apply (case-lambda (() (error 'expander '"malformed library" (g$strip$14688 g$e$23367 '())))) g$ls/false$23403) (error 'expander '"invalid syntax" (g$strip$14688 g$t$23401 '()))))) ((case-lambda ((g$x$23405) '())) g$t$23401)))) g$t$23369)))) ((case-lambda ((g$x$23407) (if (g$syntax-pair?$14656 g$x$23407) (begin '#f ((case-lambda ((g$q$23409) (if g$q$23409 (begin '#f ((case-lambda ((g$r$23411) (if g$r$23411 (begin '#f (append g$q$23409 g$r$23411)) '#f))) ((case-lambda ((g$x$23413) (if (g$syntax-pair?$14656 g$x$23413) (begin '#f ((case-lambda ((g$q$23415) (if g$q$23415 (begin '#f ((case-lambda ((g$r$23417) (if g$r$23417 (begin '#f (append g$q$23415 g$r$23417)) '#f))) ((case-lambda ((g$x$23419) (if (g$syntax-pair?$14656 g$x$23419) (begin '#f ((case-lambda ((g$q$23421) (if g$q$23421 (begin '#f ((case-lambda ((g$r$23423) (if g$r$23423 (begin '#f (append g$q$23421 g$r$23423)) '#f))) ((case-lambda ((g$x$23425) (if (g$syntax-pair?$14656 g$x$23425) (begin '#f ((case-lambda ((g$q$23427) (if g$q$23427 (begin '#f ((case-lambda ((g$r$23429) (if g$r$23429 (begin '#f (append g$q$23427 g$r$23429)) '#f))) ((letrec ((g$f$23431 (case-lambda ((g$x$23433) (if (g$syntax-pair?$14656 g$x$23433) ((case-lambda ((g$cars/f$23435) (if g$cars/f$23435 (begin '#f ((case-lambda ((g$cdrs/f$23437) (if g$cdrs/f$23437 (begin '#f (map cons g$cars/f$23435 g$cdrs/f$23437)) '#f))) (g$f$23431 (g$syntax-cdr$14668 g$x$23433)))) '#f))) ((case-lambda ((g$x$23439) (list g$x$23439))) (g$syntax-car$14664 g$x$23433))) (if (g$syntax-null?$14660 g$x$23433) (list (begin 'b* '())) '#f)))))) g$f$23431) (g$syntax-cdr$14668 g$x$23425)))) '#f))) ((case-lambda ((g$x$23441) (if (g$syntax-pair?$14656 g$x$23441) (begin '#f ((case-lambda ((g$q$23443) (if g$q$23443 (begin '#f ((case-lambda ((g$r$23445) (if g$r$23445 (begin '#f (append g$q$23443 g$r$23445)) '#f))) ((letrec ((g$f$23447 (case-lambda ((g$x$23449) (if (g$syntax-pair?$14656 g$x$23449) ((case-lambda ((g$cars/f$23451) (if g$cars/f$23451 (begin '#f ((case-lambda ((g$cdrs/f$23453) (if g$cdrs/f$23453 (begin '#f (map cons g$cars/f$23451 g$cdrs/f$23453)) '#f))) (g$f$23447 (g$syntax-cdr$14668 g$x$23449)))) '#f))) ((case-lambda ((g$x$23455) (list g$x$23455))) (g$syntax-car$14664 g$x$23449))) (if (g$syntax-null?$14660 g$x$23449) (list (begin 'imp* '())) '#f)))))) g$f$23447) (g$syntax-cdr$14668 g$x$23441)))) '#f))) ((case-lambda ((g$x$23457) (list g$x$23457))) (g$syntax-car$14664 g$x$23441)))) '#f))) (g$syntax-car$14664 g$x$23425)))) '#f))) (g$syntax-cdr$14668 g$x$23419)))) '#f))) ((case-lambda ((g$x$23459) (if (g$syntax-pair?$14656 g$x$23459) (begin '#f ((case-lambda ((g$q$23461) (if g$q$23461 (begin '#f ((case-lambda ((g$r$23463) (if g$r$23463 (begin '#f (append g$q$23461 g$r$23463)) '#f))) ((letrec ((g$f$23465 (case-lambda ((g$x$23467) (if (g$syntax-pair?$14656 g$x$23467) ((case-lambda ((g$cars/f$23469) (if g$cars/f$23469 (begin '#f ((case-lambda ((g$cdrs/f$23471) (if g$cdrs/f$23471 (begin '#f (map cons g$cars/f$23469 g$cdrs/f$23471)) '#f))) (g$f$23465 (g$syntax-cdr$14668 g$x$23467)))) '#f))) ((case-lambda ((g$x$23473) (list g$x$23473))) (g$syntax-car$14664 g$x$23467))) (if (g$syntax-null?$14660 g$x$23467) (list (begin 'exp* '())) '#f)))))) g$f$23465) (g$syntax-cdr$14668 g$x$23459)))) '#f))) ((case-lambda ((g$x$23475) (list g$x$23475))) (g$syntax-car$14664 g$x$23459)))) '#f))) (g$syntax-car$14664 g$x$23419)))) '#f))) (g$syntax-cdr$14668 g$x$23413)))) '#f))) ((letrec ((g$f$23477 (case-lambda ((g$x$23479) (if (g$syntax-pair?$14656 g$x$23479) ((case-lambda ((g$cars/f$23481) (if g$cars/f$23481 (begin '#f ((case-lambda ((g$cdrs/f$23483) (if g$cdrs/f$23483 (begin '#f (map cons g$cars/f$23481 g$cdrs/f$23483)) '#f))) (g$f$23477 (g$syntax-cdr$14668 g$x$23479)))) '#f))) ((case-lambda ((g$x$23485) (list g$x$23485))) (g$syntax-car$14664 g$x$23479))) (if (g$syntax-null?$14660 g$x$23479) (list (begin 'name* '())) '#f)))))) g$f$23477) (g$syntax-car$14664 g$x$23413)))) '#f))) (g$syntax-cdr$14668 g$x$23407)))) '#f))) ((case-lambda ((g$x$23487) (list g$x$23487))) (g$syntax-car$14664 g$x$23407)))) '#f))) g$t$23369)))) g$e$23367)))) (set! g$parse-import-spec*$15259 (case-lambda ((g$imp*$23489) ((case-lambda ((g$imp-collector$23491 g$merge-substs$23493 g$exclude*$23495 g$find*$23497 g$rem*$23499 g$remove-dups$23501 g$parse-library-name$23503 g$get-import$23505) (begin (set! g$imp-collector$23491 (g$make-collector$15263)) (set! g$merge-substs$23493 (case-lambda ((g$s$24261 g$subst$24262) ((case-lambda ((g$insert-to-subst$24265) (begin (set! g$insert-to-subst$24265 (case-lambda ((g$a$24267 g$subst$24268) ((case-lambda ((g$name$24271 g$label$24272) ((case-lambda ((g$t$24275) (if g$t$24275 ((case-lambda ((g$x$24277) (if (eq? (cdr g$x$24277) g$label$24272) g$subst$24268 (error 'import '"two imports with different bindings" g$name$24271)))) g$t$24275) (cons g$a$24267 g$subst$24268)))) (assq g$name$24271 g$subst$24268)))) (car g$a$24267) (cdr g$a$24267))))) (if (null? g$s$24261) g$subst$24262 (g$insert-to-subst$24265 (car g$s$24261) (g$merge-substs$23493 (cdr g$s$24261) g$subst$24262)))))) '#f)))) (set! g$exclude*$23495 (case-lambda ((g$sym*$24237 g$subst$24238) ((case-lambda ((g$exclude$24241) (begin (set! g$exclude$24241 (case-lambda ((g$sym$24243 g$subst$24244) (if (null? g$subst$24244) (error 'import '"cannot rename unbound identifier" g$sym$24243) (if (eq? g$sym$24243 (caar g$subst$24244)) (values (cdar g$subst$24244) (cdr g$subst$24244)) ((case-lambda ((g$a$24247) (call-with-values (case-lambda (() (g$exclude$24241 g$sym$24243 (cdr g$subst$24244)))) (case-lambda ((g$old$24249 g$subst$24250) (values g$old$24249 (cons g$a$24247 g$subst$24250))))))) (car g$subst$24244))))))) (if (null? g$sym*$24237) (values '() g$subst$24238) (call-with-values (case-lambda (() (g$exclude$24241 (car g$sym*$24237) g$subst$24238))) (case-lambda ((g$old$24253 g$subst$24254) (call-with-values (case-lambda (() (g$exclude*$23495 (cdr g$sym*$24237) g$subst$24254))) (case-lambda ((g$old*$24257 g$subst$24258) (values (cons g$old$24253 g$old*$24257) g$subst$24258))))))))))) '#f)))) (set! g$find*$23497 (case-lambda ((g$sym*$24229 g$subst$24230) (map (case-lambda ((g$x$24233) ((case-lambda ((g$t$24235) (if g$t$24235 (cdr g$t$24235) (error 'import '"cannot find identifier" g$x$24233)))) (assq g$x$24233 g$subst$24230)))) g$sym*$24229)))) (set! g$rem*$23499 (case-lambda ((g$sym*$24221 g$subst$24222) (letrec ((g$f$24225 (case-lambda ((g$subst$24227) (if (null? g$subst$24227) '() (if (memq (caar g$subst$24227) g$sym*$24221) (g$f$24225 (cdr g$subst$24227)) (cons (car g$subst$24227) (g$f$24225 (cdr g$subst$24227))))))))) (g$f$24225 g$subst$24222))))) (set! g$remove-dups$23501 (case-lambda ((g$ls$24219) (if (null? g$ls$24219) '() (if (memq (car g$ls$24219) (cdr g$ls$24219)) (g$remove-dups$23501 (cdr g$ls$24219)) (cons (car g$ls$24219) (g$remove-dups$23501 (cdr g$ls$24219)))))))) (set! g$parse-library-name$23503 (case-lambda ((g$spec$23799) ((case-lambda ((g$subversion?$23801 g$subversion-pred$23803 g$version-pred$23805) (begin (set! g$subversion?$23801 (case-lambda ((g$x$24147) (if (integer? g$x$24147) (if (exact? g$x$24147) (begin '#f (>= g$x$24147 '0)) '#f) '#f)))) (set! g$subversion-pred$23803 (case-lambda ((g$x*$23957) ((case-lambda ((g$t$23959) ((case-lambda ((g$ls/false$23961) (if (if g$ls/false$23961 (begin '#f (apply (case-lambda ((g$n$23963) (g$subversion?$23801 g$n$23963))) g$ls/false$23961)) '#f) (apply (case-lambda ((g$n$23965) (case-lambda ((g$x$23967) (= g$x$23967 g$n$23965))))) g$ls/false$23961) ((case-lambda ((g$t$23969) ((case-lambda ((g$ls/false$23971) (if (if g$ls/false$23971 (begin '#f (apply (case-lambda ((g$p?$23973 g$sub*$23974) (eq? g$p?$23973 'and))) g$ls/false$23971)) '#f) (apply (case-lambda ((g$p?$23977 g$sub*$23978) ((case-lambda ((g$p*$23981) (case-lambda ((g$x$23983) (for-all (case-lambda ((g$p$23985) (g$p$23985 g$x$23983))) g$p*$23981))))) (map g$subversion-pred$23803 g$sub*$23978)))) g$ls/false$23971) ((case-lambda ((g$t$23987) ((case-lambda ((g$ls/false$23989) (if (if g$ls/false$23989 (begin '#f (apply (case-lambda ((g$p?$23991 g$sub*$23992) (eq? g$p?$23991 'or))) g$ls/false$23989)) '#f) (apply (case-lambda ((g$p?$23995 g$sub*$23996) ((case-lambda ((g$p*$23999) (case-lambda ((g$x$24001) (exists (case-lambda ((g$p$24003) (g$p$24003 g$x$24001))) g$p*$23999))))) (map g$subversion-pred$23803 g$sub*$23996)))) g$ls/false$23989) ((case-lambda ((g$t$24005) ((case-lambda ((g$ls/false$24007) (if (if g$ls/false$24007 (begin '#f (apply (case-lambda ((g$p?$24009 g$sub$24010) (eq? g$p?$24009 'not))) g$ls/false$24007)) '#f) (apply (case-lambda ((g$p?$24013 g$sub$24014) ((case-lambda ((g$p$24017) (case-lambda ((g$x$24019) (not (g$p$24017 g$x$24019)))))) (g$subversion-pred$23803 g$sub$24014)))) g$ls/false$24007) ((case-lambda ((g$t$24021) ((case-lambda ((g$ls/false$24023) (if (if g$ls/false$24023 (begin '#f (apply (case-lambda ((g$p?$24025 g$n$24026) (if (eq? g$p?$24025 '<=) (begin '#f (g$subversion?$23801 g$n$24026)) '#f))) g$ls/false$24023)) '#f) (apply (case-lambda ((g$p?$24029 g$n$24030) (case-lambda ((g$x$24033) (<= g$x$24033 g$n$24030))))) g$ls/false$24023) ((case-lambda ((g$t$24035) ((case-lambda ((g$ls/false$24037) (if (if g$ls/false$24037 (begin '#f (apply (case-lambda ((g$p?$24039 g$n$24040) (if (eq? g$p?$24039 '>=) (begin '#f (g$subversion?$23801 g$n$24040)) '#f))) g$ls/false$24037)) '#f) (apply (case-lambda ((g$p?$24043 g$n$24044) (case-lambda ((g$x$24047) (>= g$x$24047 g$n$24044))))) g$ls/false$24037) ((case-lambda ((g$t$24049) ((case-lambda ((g$ls/false$24051) (if (if g$ls/false$24051 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$24051)) '#f) (apply (case-lambda (() (error 'import '"invalid sub-version spec" g$x*$23957 g$spec$23799))) g$ls/false$24051) (error 'expander '"invalid syntax" (g$strip$14688 g$t$24049 '()))))) ((case-lambda ((g$x$24053) '())) g$t$24049)))) g$t$24035)))) ((case-lambda ((g$x$24055) (if (g$syntax-pair?$14656 g$x$24055) (begin '#f ((case-lambda ((g$q$24057) (if g$q$24057 (begin '#f ((case-lambda ((g$r$24059) (if g$r$24059 (begin '#f (append g$q$24057 g$r$24059)) '#f))) ((case-lambda ((g$x$24061) (if (g$syntax-pair?$14656 g$x$24061) (begin '#f ((case-lambda ((g$q$24063) (if g$q$24063 (begin '#f ((case-lambda ((g$r$24065) (if g$r$24065 (begin '#f (append g$q$24063 g$r$24065)) '#f))) ((case-lambda ((g$x$24067) (if (equal? (g$stx->datum$14690 g$x$24067) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$24061)))) '#f))) ((case-lambda ((g$x$24069) (list g$x$24069))) (g$syntax-car$14664 g$x$24061)))) '#f))) (g$syntax-cdr$14668 g$x$24055)))) '#f))) ((case-lambda ((g$x$24071) (list g$x$24071))) (g$syntax-car$14664 g$x$24055)))) '#f))) g$t$24035)))) g$t$24021)))) ((case-lambda ((g$x$24073) (if (g$syntax-pair?$14656 g$x$24073) (begin '#f ((case-lambda ((g$q$24075) (if g$q$24075 (begin '#f ((case-lambda ((g$r$24077) (if g$r$24077 (begin '#f (append g$q$24075 g$r$24077)) '#f))) ((case-lambda ((g$x$24079) (if (g$syntax-pair?$14656 g$x$24079) (begin '#f ((case-lambda ((g$q$24081) (if g$q$24081 (begin '#f ((case-lambda ((g$r$24083) (if g$r$24083 (begin '#f (append g$q$24081 g$r$24083)) '#f))) ((case-lambda ((g$x$24085) (if (equal? (g$stx->datum$14690 g$x$24085) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$24079)))) '#f))) ((case-lambda ((g$x$24087) (list g$x$24087))) (g$syntax-car$14664 g$x$24079)))) '#f))) (g$syntax-cdr$14668 g$x$24073)))) '#f))) ((case-lambda ((g$x$24089) (list g$x$24089))) (g$syntax-car$14664 g$x$24073)))) '#f))) g$t$24021)))) g$t$24005)))) ((case-lambda ((g$x$24091) (if (g$syntax-pair?$14656 g$x$24091) (begin '#f ((case-lambda ((g$q$24093) (if g$q$24093 (begin '#f ((case-lambda ((g$r$24095) (if g$r$24095 (begin '#f (append g$q$24093 g$r$24095)) '#f))) ((case-lambda ((g$x$24097) (if (g$syntax-pair?$14656 g$x$24097) (begin '#f ((case-lambda ((g$q$24099) (if g$q$24099 (begin '#f ((case-lambda ((g$r$24101) (if g$r$24101 (begin '#f (append g$q$24099 g$r$24101)) '#f))) ((case-lambda ((g$x$24103) (if (equal? (g$stx->datum$14690 g$x$24103) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$24097)))) '#f))) ((case-lambda ((g$x$24105) (list g$x$24105))) (g$syntax-car$14664 g$x$24097)))) '#f))) (g$syntax-cdr$14668 g$x$24091)))) '#f))) ((case-lambda ((g$x$24107) (list g$x$24107))) (g$syntax-car$14664 g$x$24091)))) '#f))) g$t$24005)))) g$t$23987)))) ((case-lambda ((g$x$24109) (if (g$syntax-pair?$14656 g$x$24109) (begin '#f ((case-lambda ((g$q$24111) (if g$q$24111 (begin '#f ((case-lambda ((g$r$24113) (if g$r$24113 (begin '#f (append g$q$24111 g$r$24113)) '#f))) ((letrec ((g$f$24115 (case-lambda ((g$x$24117) (if (g$syntax-pair?$14656 g$x$24117) ((case-lambda ((g$cars/f$24119) (if g$cars/f$24119 (begin '#f ((case-lambda ((g$cdrs/f$24121) (if g$cdrs/f$24121 (begin '#f (map cons g$cars/f$24119 g$cdrs/f$24121)) '#f))) (g$f$24115 (g$syntax-cdr$14668 g$x$24117)))) '#f))) ((case-lambda ((g$x$24123) (list g$x$24123))) (g$syntax-car$14664 g$x$24117))) (if (g$syntax-null?$14660 g$x$24117) (list (begin 'sub* '())) '#f)))))) g$f$24115) (g$syntax-cdr$14668 g$x$24109)))) '#f))) ((case-lambda ((g$x$24125) (list g$x$24125))) (g$syntax-car$14664 g$x$24109)))) '#f))) g$t$23987)))) g$t$23969)))) ((case-lambda ((g$x$24127) (if (g$syntax-pair?$14656 g$x$24127) (begin '#f ((case-lambda ((g$q$24129) (if g$q$24129 (begin '#f ((case-lambda ((g$r$24131) (if g$r$24131 (begin '#f (append g$q$24129 g$r$24131)) '#f))) ((letrec ((g$f$24133 (case-lambda ((g$x$24135) (if (g$syntax-pair?$14656 g$x$24135) ((case-lambda ((g$cars/f$24137) (if g$cars/f$24137 (begin '#f ((case-lambda ((g$cdrs/f$24139) (if g$cdrs/f$24139 (begin '#f (map cons g$cars/f$24137 g$cdrs/f$24139)) '#f))) (g$f$24133 (g$syntax-cdr$14668 g$x$24135)))) '#f))) ((case-lambda ((g$x$24141) (list g$x$24141))) (g$syntax-car$14664 g$x$24135))) (if (g$syntax-null?$14660 g$x$24135) (list (begin 'sub* '())) '#f)))))) g$f$24133) (g$syntax-cdr$14668 g$x$24127)))) '#f))) ((case-lambda ((g$x$24143) (list g$x$24143))) (g$syntax-car$14664 g$x$24127)))) '#f))) g$t$23969)))) g$t$23959)))) ((case-lambda ((g$x$24145) (list g$x$24145))) g$t$23959)))) g$x*$23957)))) (set! g$version-pred$23805 (case-lambda ((g$x*$23807) ((case-lambda ((g$t$23809) ((case-lambda ((g$ls/false$23811) (if (if g$ls/false$23811 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23811)) '#f) (apply (case-lambda (() (case-lambda ((g$x$23813) '#t)))) g$ls/false$23811) ((case-lambda ((g$t$23815) ((case-lambda ((g$ls/false$23817) (if (if g$ls/false$23817 (begin '#f (apply (case-lambda ((g$c$23819 g$ver*$23820) (eq? g$c$23819 'and))) g$ls/false$23817)) '#f) (apply (case-lambda ((g$c$23823 g$ver*$23824) ((case-lambda ((g$p*$23827) (case-lambda ((g$x$23829) (for-all (case-lambda ((g$p$23831) (g$p$23831 g$x$23829))) g$p*$23827))))) (map g$version-pred$23805 g$ver*$23824)))) g$ls/false$23817) ((case-lambda ((g$t$23833) ((case-lambda ((g$ls/false$23835) (if (if g$ls/false$23835 (begin '#f (apply (case-lambda ((g$c$23837 g$ver*$23838) (eq? g$c$23837 'or))) g$ls/false$23835)) '#f) (apply (case-lambda ((g$c$23841 g$ver*$23842) ((case-lambda ((g$p*$23845) (case-lambda ((g$x$23847) (exists (case-lambda ((g$p$23849) (g$p$23849 g$x$23847))) g$p*$23845))))) (map g$version-pred$23805 g$ver*$23842)))) g$ls/false$23835) ((case-lambda ((g$t$23851) ((case-lambda ((g$ls/false$23853) (if (if g$ls/false$23853 (begin '#f (apply (case-lambda ((g$c$23855 g$ver$23856) (eq? g$c$23855 'not))) g$ls/false$23853)) '#f) (apply (case-lambda ((g$c$23859 g$ver$23860) ((case-lambda ((g$p$23863) (case-lambda ((g$x$23865) (not (g$p$23863 g$x$23865)))))) (g$version-pred$23805 g$ver$23860)))) g$ls/false$23853) ((case-lambda ((g$t$23867) ((case-lambda ((g$ls/false$23869) (if (if g$ls/false$23869 (begin '#f (apply (case-lambda ((g$sub*$23871) '#t)) g$ls/false$23869)) '#f) (apply (case-lambda ((g$sub*$23873) ((case-lambda ((g$p*$23875) (case-lambda ((g$x$23877) (letrec ((g$f$23879 (case-lambda ((g$p*$23881 g$x$23882) (if (null? g$p*$23881) '#t (if (null? g$x$23882) '#f (if ((car g$p*$23881) (car g$x$23882)) (begin '#f (g$f$23879 (cdr g$p*$23881) (cdr g$x*$23807))) '#f))))))) (g$f$23879 g$p*$23875 g$x$23877)))))) (map g$subversion-pred$23803 g$sub*$23873)))) g$ls/false$23869) ((case-lambda ((g$t$23885) ((case-lambda ((g$ls/false$23887) (if (if g$ls/false$23887 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$23887)) '#f) (apply (case-lambda (() (error 'import '"invalid version spec" g$x*$23807 g$spec$23799))) g$ls/false$23887) (error 'expander '"invalid syntax" (g$strip$14688 g$t$23885 '()))))) ((case-lambda ((g$x$23889) '())) g$t$23885)))) g$t$23867)))) ((letrec ((g$f$23891 (case-lambda ((g$x$23893) (if (g$syntax-pair?$14656 g$x$23893) ((case-lambda ((g$cars/f$23895) (if g$cars/f$23895 (begin '#f ((case-lambda ((g$cdrs/f$23897) (if g$cdrs/f$23897 (begin '#f (map cons g$cars/f$23895 g$cdrs/f$23897)) '#f))) (g$f$23891 (g$syntax-cdr$14668 g$x$23893)))) '#f))) ((case-lambda ((g$x$23899) (list g$x$23899))) (g$syntax-car$14664 g$x$23893))) (if (g$syntax-null?$14660 g$x$23893) (list (begin 'sub* '())) '#f)))))) g$f$23891) g$t$23867)))) g$t$23851)))) ((case-lambda ((g$x$23901) (if (g$syntax-pair?$14656 g$x$23901) (begin '#f ((case-lambda ((g$q$23903) (if g$q$23903 (begin '#f ((case-lambda ((g$r$23905) (if g$r$23905 (begin '#f (append g$q$23903 g$r$23905)) '#f))) ((case-lambda ((g$x$23907) (if (g$syntax-pair?$14656 g$x$23907) (begin '#f ((case-lambda ((g$q$23909) (if g$q$23909 (begin '#f ((case-lambda ((g$r$23911) (if g$r$23911 (begin '#f (append g$q$23909 g$r$23911)) '#f))) ((case-lambda ((g$x$23913) (if (equal? (g$stx->datum$14690 g$x$23913) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$23907)))) '#f))) ((case-lambda ((g$x$23915) (list g$x$23915))) (g$syntax-car$14664 g$x$23907)))) '#f))) (g$syntax-cdr$14668 g$x$23901)))) '#f))) ((case-lambda ((g$x$23917) (list g$x$23917))) (g$syntax-car$14664 g$x$23901)))) '#f))) g$t$23851)))) g$t$23833)))) ((case-lambda ((g$x$23919) (if (g$syntax-pair?$14656 g$x$23919) (begin '#f ((case-lambda ((g$q$23921) (if g$q$23921 (begin '#f ((case-lambda ((g$r$23923) (if g$r$23923 (begin '#f (append g$q$23921 g$r$23923)) '#f))) ((letrec ((g$f$23925 (case-lambda ((g$x$23927) (if (g$syntax-pair?$14656 g$x$23927) ((case-lambda ((g$cars/f$23929) (if g$cars/f$23929 (begin '#f ((case-lambda ((g$cdrs/f$23931) (if g$cdrs/f$23931 (begin '#f (map cons g$cars/f$23929 g$cdrs/f$23931)) '#f))) (g$f$23925 (g$syntax-cdr$14668 g$x$23927)))) '#f))) ((case-lambda ((g$x$23933) (list g$x$23933))) (g$syntax-car$14664 g$x$23927))) (if (g$syntax-null?$14660 g$x$23927) (list (begin 'ver* '())) '#f)))))) g$f$23925) (g$syntax-cdr$14668 g$x$23919)))) '#f))) ((case-lambda ((g$x$23935) (list g$x$23935))) (g$syntax-car$14664 g$x$23919)))) '#f))) g$t$23833)))) g$t$23815)))) ((case-lambda ((g$x$23937) (if (g$syntax-pair?$14656 g$x$23937) (begin '#f ((case-lambda ((g$q$23939) (if g$q$23939 (begin '#f ((case-lambda ((g$r$23941) (if g$r$23941 (begin '#f (append g$q$23939 g$r$23941)) '#f))) ((letrec ((g$f$23943 (case-lambda ((g$x$23945) (if (g$syntax-pair?$14656 g$x$23945) ((case-lambda ((g$cars/f$23947) (if g$cars/f$23947 (begin '#f ((case-lambda ((g$cdrs/f$23949) (if g$cdrs/f$23949 (begin '#f (map cons g$cars/f$23947 g$cdrs/f$23949)) '#f))) (g$f$23943 (g$syntax-cdr$14668 g$x$23945)))) '#f))) ((case-lambda ((g$x$23951) (list g$x$23951))) (g$syntax-car$14664 g$x$23945))) (if (g$syntax-null?$14660 g$x$23945) (list (begin 'ver* '())) '#f)))))) g$f$23943) (g$syntax-cdr$14668 g$x$23937)))) '#f))) ((case-lambda ((g$x$23953) (list g$x$23953))) (g$syntax-car$14664 g$x$23937)))) '#f))) g$t$23815)))) g$t$23809)))) ((case-lambda ((g$x$23955) (if (equal? (g$stx->datum$14690 g$x$23955) '()) (begin '#f '()) '#f))) g$t$23809)))) g$x*$23807)))) (letrec ((g$f$24149 (case-lambda ((g$x$24151) ((case-lambda ((g$t$24153) ((case-lambda ((g$ls/false$24155) (if (if g$ls/false$24155 (begin '#f (apply (case-lambda ((g$version-spec*$24157) '#t)) g$ls/false$24155)) '#f) (apply (case-lambda ((g$version-spec*$24159) (values '() (g$version-pred$23805 g$version-spec*$24159)))) g$ls/false$24155) ((case-lambda ((g$t$24161) ((case-lambda ((g$ls/false$24163) (if (if g$ls/false$24163 (begin '#f (apply (case-lambda ((g$x$24165 g$x*$24166) (symbol? g$x$24165))) g$ls/false$24163)) '#f) (apply (case-lambda ((g$x$24169 g$x*$24170) (call-with-values (case-lambda (() (g$f$24149 g$x*$24170))) (case-lambda ((g$name$24173 g$pred$24174) (values (cons g$x$24169 g$name$24173) g$pred$24174)))))) g$ls/false$24163) ((case-lambda ((g$t$24177) ((case-lambda ((g$ls/false$24179) (if (if g$ls/false$24179 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$24179)) '#f) (apply (case-lambda (() (values '() (case-lambda ((g$x$24181) '#t))))) g$ls/false$24179) ((case-lambda ((g$t$24183) ((case-lambda ((g$ls/false$24185) (if (if g$ls/false$24185 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$24185)) '#f) (apply (case-lambda (() (error 'expander '"invalid import spec" (g$strip$14688 g$spec$23799 '())))) g$ls/false$24185) (error 'expander '"invalid syntax" (g$strip$14688 g$t$24183 '()))))) ((case-lambda ((g$x$24187) '())) g$t$24183)))) g$t$24177)))) ((case-lambda ((g$x$24189) (if (equal? (g$stx->datum$14690 g$x$24189) '()) (begin '#f '()) '#f))) g$t$24177)))) g$t$24161)))) ((case-lambda ((g$x$24191) (if (g$syntax-pair?$14656 g$x$24191) (begin '#f ((case-lambda ((g$q$24193) (if g$q$24193 (begin '#f ((case-lambda ((g$r$24195) (if g$r$24195 (begin '#f (append g$q$24193 g$r$24195)) '#f))) ((case-lambda ((g$x$24197) (list g$x$24197))) (g$syntax-cdr$14668 g$x$24191)))) '#f))) ((case-lambda ((g$x$24199) (list g$x$24199))) (g$syntax-car$14664 g$x$24191)))) '#f))) g$t$24161)))) g$t$24153)))) ((case-lambda ((g$x$24201) (if (g$syntax-pair?$14656 g$x$24201) (begin '#f ((case-lambda ((g$q$24203) (if g$q$24203 (begin '#f ((case-lambda ((g$r$24205) (if g$r$24205 (begin '#f (append g$q$24203 g$r$24205)) '#f))) ((case-lambda ((g$x$24207) (if (equal? (g$stx->datum$14690 g$x$24207) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$24201)))) '#f))) ((letrec ((g$f$24209 (case-lambda ((g$x$24211) (if (g$syntax-pair?$14656 g$x$24211) ((case-lambda ((g$cars/f$24213) (if g$cars/f$24213 (begin '#f ((case-lambda ((g$cdrs/f$24215) (if g$cdrs/f$24215 (begin '#f (map cons g$cars/f$24213 g$cdrs/f$24215)) '#f))) (g$f$24209 (g$syntax-cdr$14668 g$x$24211)))) '#f))) ((case-lambda ((g$x$24217) (list g$x$24217))) (g$syntax-car$14664 g$x$24211))) (if (g$syntax-null?$14660 g$x$24211) (list (begin 'version-spec* '())) '#f)))))) g$f$24209) (g$syntax-car$14664 g$x$24201)))) '#f))) g$t$24153)))) g$x$24151))))) (g$f$24149 g$spec$23799))))) '#f '#f '#f)))) (set! g$get-import$23505 (case-lambda ((g$spec$23507) ((case-lambda ((g$t$23509) ((case-lambda ((g$ls/false$23511) (if (if g$ls/false$23511 (begin '#f (apply (case-lambda ((g$rename$23513 g$isp$23514 g$old*$23515 g$new*$23516) (if (eq? g$rename$23513 'rename) (if (for-all symbol? g$old*$23515) (begin '#f (for-all symbol? g$new*$23516)) '#f) '#f))) g$ls/false$23511)) '#f) (apply (case-lambda ((g$rename$23521 g$isp$23522 g$old*$23523 g$new*$23524) ((case-lambda ((g$subst$23529) ((case-lambda ((g$old-label*$23531) ((case-lambda ((g$subst$23533) (g$merge-substs$23493 (map cons g$new*$23524 g$old-label*$23531) g$subst$23533))) (g$rem*$23499 g$old*$23523 g$subst$23529)))) (g$find*$23497 g$old*$23523 g$subst$23529)))) (g$get-import$23505 g$isp$23522)))) g$ls/false$23511) ((case-lambda ((g$t$23535) ((case-lambda ((g$ls/false$23537) (if (if g$ls/false$23537 (begin '#f (apply (case-lambda ((g$except$23539 g$isp$23540 g$sym*$23541) (if (eq? g$except$23539 'except) (begin '#f (for-all symbol? g$sym*$23541)) '#f))) g$ls/false$23537)) '#f) (apply (case-lambda ((g$except$23545 g$isp$23546 g$sym*$23547) ((case-lambda ((g$subst$23551) (g$rem*$23499 g$sym*$23547 g$subst$23551))) (g$get-import$23505 g$isp$23546)))) g$ls/false$23537) ((case-lambda ((g$t$23553) ((case-lambda ((g$ls/false$23555) (if (if g$ls/false$23555 (begin '#f (apply (case-lambda ((g$only$23557 g$isp$23558 g$sym*$23559) (if (eq? g$only$23557 'only) (begin '#f (for-all symbol? g$sym*$23559)) '#f))) g$ls/false$23555)) '#f) (apply (case-lambda ((g$only$23563 g$isp$23564 g$sym*$23565) ((case-lambda ((g$subst$23569) ((case-lambda ((g$sym*$23571) ((case-lambda ((g$lab*$23573) (map cons g$sym*$23571 g$lab*$23573))) (g$find*$23497 g$sym*$23571 g$subst$23569)))) (g$remove-dups$23501 g$sym*$23565)))) (g$get-import$23505 g$isp$23564)))) g$ls/false$23555) ((case-lambda ((g$t$23575) ((case-lambda ((g$ls/false$23577) (if (if g$ls/false$23577 (begin '#f (apply (case-lambda ((g$prefix$23579 g$isp$23580 g$p$23581) (if (eq? g$prefix$23579 'prefix) (begin '#f (symbol? g$p$23581)) '#f))) g$ls/false$23577)) '#f) (apply (case-lambda ((g$prefix$23585 g$isp$23586 g$p$23587) ((case-lambda ((g$subst$23591) (map (case-lambda ((g$x$23593) (cons (string->symbol (string-append (symbol->string g$p$23587) (symbol->string (car g$x$23593)))) (cdr g$x$23593)))) g$subst$23591))) (g$get-import$23505 g$isp$23586)))) g$ls/false$23577) ((case-lambda ((g$t$23595) ((case-lambda ((g$ls/false$23597) (if (if g$ls/false$23597 (begin '#f (apply (case-lambda ((g$library$23599 g$spec*$23600) (eq? g$library$23599 'library))) g$ls/false$23597)) '#f) (apply (case-lambda ((g$library$23603 g$spec*$23604) (call-with-values (case-lambda (() (g$parse-library-name$23503 g$spec*$23604))) (case-lambda ((g$name$23607 g$pred$23608) (begin (if (null? g$name$23607) (error 'import '"empty library name" g$spec*$23604) (void)) ((case-lambda ((g$lib$23611) (begin (if g$lib$23611 (void) (error 'import '"cannot find library with required name" g$name$23607)) (if (g$pred$23608 (g$g$library-version$13895$14296 g$lib$23611)) (void) (error 'import '"library does not satisfy version specification" g$lib$23611 g$spec*$23604)) (g$imp-collector$23491 g$lib$23611) (g$g$library-subst$13903$14292 g$lib$23611)))) (g$g$find-library-by-name$13953$14267 g$name$23607)))))))) g$ls/false$23597) ((case-lambda ((g$t$23613) ((case-lambda ((g$ls/false$23615) (if (if g$ls/false$23615 (begin '#f (apply (case-lambda ((g$x$23617 g$x*$23618) (not (memq g$x$23617 '(rename except only prefix library))))) g$ls/false$23615)) '#f) (apply (case-lambda ((g$x$23621 g$x*$23622) (g$get-import$23505 (list 'library (cons g$x$23621 g$x*$23622))))) g$ls/false$23615) ((case-lambda ((g$t$23625) ((case-lambda ((g$ls/false$23627) (if (if g$ls/false$23627 (begin '#f (apply (case-lambda ((g$spec$23629) '#t)) g$ls/false$23627)) '#f) (apply (case-lambda ((g$spec$23631) (error 'import '"invalid import spec" g$spec$23631))) g$ls/false$23627) (error 'expander '"invalid syntax" (g$strip$14688 g$t$23625 '()))))) ((case-lambda ((g$x$23633) (list g$x$23633))) g$t$23625)))) g$t$23613)))) ((case-lambda ((g$x$23635) (if (g$syntax-pair?$14656 g$x$23635) (begin '#f ((case-lambda ((g$q$23637) (if g$q$23637 (begin '#f ((case-lambda ((g$r$23639) (if g$r$23639 (begin '#f (append g$q$23637 g$r$23639)) '#f))) ((letrec ((g$f$23641 (case-lambda ((g$x$23643) (if (g$syntax-pair?$14656 g$x$23643) ((case-lambda ((g$cars/f$23645) (if g$cars/f$23645 (begin '#f ((case-lambda ((g$cdrs/f$23647) (if g$cdrs/f$23647 (begin '#f (map cons g$cars/f$23645 g$cdrs/f$23647)) '#f))) (g$f$23641 (g$syntax-cdr$14668 g$x$23643)))) '#f))) ((case-lambda ((g$x$23649) (list g$x$23649))) (g$syntax-car$14664 g$x$23643))) (if (g$syntax-null?$14660 g$x$23643) (list (begin 'x* '())) '#f)))))) g$f$23641) (g$syntax-cdr$14668 g$x$23635)))) '#f))) ((case-lambda ((g$x$23651) (list g$x$23651))) (g$syntax-car$14664 g$x$23635)))) '#f))) g$t$23613)))) g$t$23595)))) ((case-lambda ((g$x$23653) (if (g$syntax-pair?$14656 g$x$23653) (begin '#f ((case-lambda ((g$q$23655) (if g$q$23655 (begin '#f ((case-lambda ((g$r$23657) (if g$r$23657 (begin '#f (append g$q$23655 g$r$23657)) '#f))) ((case-lambda ((g$x$23659) (if (g$syntax-pair?$14656 g$x$23659) (begin '#f ((case-lambda ((g$q$23661) (if g$q$23661 (begin '#f ((case-lambda ((g$r$23663) (if g$r$23663 (begin '#f (append g$q$23661 g$r$23663)) '#f))) ((case-lambda ((g$x$23665) (if (equal? (g$stx->datum$14690 g$x$23665) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$23659)))) '#f))) ((letrec ((g$f$23667 (case-lambda ((g$x$23669) (if (g$syntax-pair?$14656 g$x$23669) ((case-lambda ((g$cars/f$23671) (if g$cars/f$23671 (begin '#f ((case-lambda ((g$cdrs/f$23673) (if g$cdrs/f$23673 (begin '#f (map cons g$cars/f$23671 g$cdrs/f$23673)) '#f))) (g$f$23667 (g$syntax-cdr$14668 g$x$23669)))) '#f))) ((case-lambda ((g$x$23675) (list g$x$23675))) (g$syntax-car$14664 g$x$23669))) (if (g$syntax-null?$14660 g$x$23669) (list (begin 'spec* '())) '#f)))))) g$f$23667) (g$syntax-car$14664 g$x$23659)))) '#f))) (g$syntax-cdr$14668 g$x$23653)))) '#f))) ((case-lambda ((g$x$23677) (list g$x$23677))) (g$syntax-car$14664 g$x$23653)))) '#f))) g$t$23595)))) g$t$23575)))) ((case-lambda ((g$x$23679) (if (g$syntax-pair?$14656 g$x$23679) (begin '#f ((case-lambda ((g$q$23681) (if g$q$23681 (begin '#f ((case-lambda ((g$r$23683) (if g$r$23683 (begin '#f (append g$q$23681 g$r$23683)) '#f))) ((case-lambda ((g$x$23685) (if (g$syntax-pair?$14656 g$x$23685) (begin '#f ((case-lambda ((g$q$23687) (if g$q$23687 (begin '#f ((case-lambda ((g$r$23689) (if g$r$23689 (begin '#f (append g$q$23687 g$r$23689)) '#f))) ((case-lambda ((g$x$23691) (if (g$syntax-pair?$14656 g$x$23691) (begin '#f ((case-lambda ((g$q$23693) (if g$q$23693 (begin '#f ((case-lambda ((g$r$23695) (if g$r$23695 (begin '#f (append g$q$23693 g$r$23695)) '#f))) ((case-lambda ((g$x$23697) (if (equal? (g$stx->datum$14690 g$x$23697) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$23691)))) '#f))) ((case-lambda ((g$x$23699) (list g$x$23699))) (g$syntax-car$14664 g$x$23691)))) '#f))) (g$syntax-cdr$14668 g$x$23685)))) '#f))) ((case-lambda ((g$x$23701) (list g$x$23701))) (g$syntax-car$14664 g$x$23685)))) '#f))) (g$syntax-cdr$14668 g$x$23679)))) '#f))) ((case-lambda ((g$x$23703) (list g$x$23703))) (g$syntax-car$14664 g$x$23679)))) '#f))) g$t$23575)))) g$t$23553)))) ((case-lambda ((g$x$23705) (if (g$syntax-pair?$14656 g$x$23705) (begin '#f ((case-lambda ((g$q$23707) (if g$q$23707 (begin '#f ((case-lambda ((g$r$23709) (if g$r$23709 (begin '#f (append g$q$23707 g$r$23709)) '#f))) ((case-lambda ((g$x$23711) (if (g$syntax-pair?$14656 g$x$23711) (begin '#f ((case-lambda ((g$q$23713) (if g$q$23713 (begin '#f ((case-lambda ((g$r$23715) (if g$r$23715 (begin '#f (append g$q$23713 g$r$23715)) '#f))) ((letrec ((g$f$23717 (case-lambda ((g$x$23719) (if (g$syntax-pair?$14656 g$x$23719) ((case-lambda ((g$cars/f$23721) (if g$cars/f$23721 (begin '#f ((case-lambda ((g$cdrs/f$23723) (if g$cdrs/f$23723 (begin '#f (map cons g$cars/f$23721 g$cdrs/f$23723)) '#f))) (g$f$23717 (g$syntax-cdr$14668 g$x$23719)))) '#f))) ((case-lambda ((g$x$23725) (list g$x$23725))) (g$syntax-car$14664 g$x$23719))) (if (g$syntax-null?$14660 g$x$23719) (list (begin 'sym* '())) '#f)))))) g$f$23717) (g$syntax-cdr$14668 g$x$23711)))) '#f))) ((case-lambda ((g$x$23727) (list g$x$23727))) (g$syntax-car$14664 g$x$23711)))) '#f))) (g$syntax-cdr$14668 g$x$23705)))) '#f))) ((case-lambda ((g$x$23729) (list g$x$23729))) (g$syntax-car$14664 g$x$23705)))) '#f))) g$t$23553)))) g$t$23535)))) ((case-lambda ((g$x$23731) (if (g$syntax-pair?$14656 g$x$23731) (begin '#f ((case-lambda ((g$q$23733) (if g$q$23733 (begin '#f ((case-lambda ((g$r$23735) (if g$r$23735 (begin '#f (append g$q$23733 g$r$23735)) '#f))) ((case-lambda ((g$x$23737) (if (g$syntax-pair?$14656 g$x$23737) (begin '#f ((case-lambda ((g$q$23739) (if g$q$23739 (begin '#f ((case-lambda ((g$r$23741) (if g$r$23741 (begin '#f (append g$q$23739 g$r$23741)) '#f))) ((letrec ((g$f$23743 (case-lambda ((g$x$23745) (if (g$syntax-pair?$14656 g$x$23745) ((case-lambda ((g$cars/f$23747) (if g$cars/f$23747 (begin '#f ((case-lambda ((g$cdrs/f$23749) (if g$cdrs/f$23749 (begin '#f (map cons g$cars/f$23747 g$cdrs/f$23749)) '#f))) (g$f$23743 (g$syntax-cdr$14668 g$x$23745)))) '#f))) ((case-lambda ((g$x$23751) (list g$x$23751))) (g$syntax-car$14664 g$x$23745))) (if (g$syntax-null?$14660 g$x$23745) (list (begin 'sym* '())) '#f)))))) g$f$23743) (g$syntax-cdr$14668 g$x$23737)))) '#f))) ((case-lambda ((g$x$23753) (list g$x$23753))) (g$syntax-car$14664 g$x$23737)))) '#f))) (g$syntax-cdr$14668 g$x$23731)))) '#f))) ((case-lambda ((g$x$23755) (list g$x$23755))) (g$syntax-car$14664 g$x$23731)))) '#f))) g$t$23535)))) g$t$23509)))) ((case-lambda ((g$x$23757) (if (g$syntax-pair?$14656 g$x$23757) (begin '#f ((case-lambda ((g$q$23759) (if g$q$23759 (begin '#f ((case-lambda ((g$r$23761) (if g$r$23761 (begin '#f (append g$q$23759 g$r$23761)) '#f))) ((case-lambda ((g$x$23763) (if (g$syntax-pair?$14656 g$x$23763) (begin '#f ((case-lambda ((g$q$23765) (if g$q$23765 (begin '#f ((case-lambda ((g$r$23767) (if g$r$23767 (begin '#f (append g$q$23765 g$r$23767)) '#f))) ((letrec ((g$f$23769 (case-lambda ((g$x$23771) (if (g$syntax-pair?$14656 g$x$23771) ((case-lambda ((g$cars/f$23773) (if g$cars/f$23773 (begin '#f ((case-lambda ((g$cdrs/f$23775) (if g$cdrs/f$23775 (begin '#f (map cons g$cars/f$23773 g$cdrs/f$23775)) '#f))) (g$f$23769 (g$syntax-cdr$14668 g$x$23771)))) '#f))) ((case-lambda ((g$x$23777) (if (g$syntax-pair?$14656 g$x$23777) (begin '#f ((case-lambda ((g$q$23779) (if g$q$23779 (begin '#f ((case-lambda ((g$r$23781) (if g$r$23781 (begin '#f (append g$q$23779 g$r$23781)) '#f))) ((case-lambda ((g$x$23783) (if (g$syntax-pair?$14656 g$x$23783) (begin '#f ((case-lambda ((g$q$23785) (if g$q$23785 (begin '#f ((case-lambda ((g$r$23787) (if g$r$23787 (begin '#f (append g$q$23785 g$r$23787)) '#f))) ((case-lambda ((g$x$23789) (if (equal? (g$stx->datum$14690 g$x$23789) '()) (begin '#f '()) '#f))) (g$syntax-cdr$14668 g$x$23783)))) '#f))) ((case-lambda ((g$x$23791) (list g$x$23791))) (g$syntax-car$14664 g$x$23783)))) '#f))) (g$syntax-cdr$14668 g$x$23777)))) '#f))) ((case-lambda ((g$x$23793) (list g$x$23793))) (g$syntax-car$14664 g$x$23777)))) '#f))) (g$syntax-car$14664 g$x$23771))) (if (g$syntax-null?$14660 g$x$23771) (list (begin 'old* '()) (begin 'new* '())) '#f)))))) g$f$23769) (g$syntax-cdr$14668 g$x$23763)))) '#f))) ((case-lambda ((g$x$23795) (list g$x$23795))) (g$syntax-car$14664 g$x$23763)))) '#f))) (g$syntax-cdr$14668 g$x$23757)))) '#f))) ((case-lambda ((g$x$23797) (list g$x$23797))) (g$syntax-car$14664 g$x$23757)))) '#f))) g$t$23509)))) g$spec$23507)))) (letrec ((g$f$24279 (case-lambda ((g$imp*$24281 g$subst$24282) (if (null? g$imp*$24281) (values g$subst$24282 (g$imp-collector$23491)) (g$f$24279 (cdr g$imp*$24281) (g$merge-substs$23493 (g$get-import$23505 (car g$imp*$24281)) g$subst$24282))))))) (g$f$24279 g$imp*$23489 '()))))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$make-top-rib$15261 (case-lambda ((g$subst$24285) ((case-lambda ((g$rib$24287) (begin (for-each (case-lambda ((g$x$24289) ((case-lambda ((g$name$24291 g$label$24292) (g$extend-rib!$14609 g$rib$24287 (g$mkstx$14646 g$name$24291 g$top-mark*$14576 '()) g$label$24292))) (car g$x$24289) (cdr g$x$24289)))) g$subst$24285) g$rib$24287))) (g$make-empty-rib$14607))))) (set! g$make-collector$15263 (case-lambda (() ((case-lambda ((g$ls$24295) (case-lambda (() g$ls$24295) ((g$x$24297) (set! g$ls$24295 (g$set-cons$14569 g$x$24297 g$ls$24295)))))) '())))) (set! g$inv-collector$15265 (g$g$make-parameter$13524$13740 (case-lambda (g$args$24299 (error 'inv-collector '"not initialized"))) (case-lambda ((g$x$24301) (begin (if (procedure? g$x$24301) (void) (error 'inv-collector '"not a procedure" g$x$24301)) g$x$24301))))) (set! g$vis-collector$15267 (g$g$make-parameter$13524$13740 (case-lambda (g$args$24303 (error 'vis-collector '"not initialized"))) (case-lambda ((g$x$24305) (begin (if (procedure? g$x$24305) (void) (error 'vis-collector '"not a procedure" g$x$24305)) g$x$24305))))) (set! g$chi-library-internal$15269 (case-lambda ((g$e*$24307 g$rib$24308 g$top?$24309) (call-with-values (case-lambda (() (g$chi-body*$15239 g$e*$24307 '() '() '() '() '() '() g$rib$24308 g$top?$24309))) (case-lambda ((g$e*$24313 g$r$24314 g$mr$24315 g$lex*$24316 g$rhs*$24317 g$mod**$24318 g$_kwd*$24319) (values (append (apply append (reverse g$mod**$24318)) g$e*$24313) g$r$24314 g$mr$24315 (reverse g$lex*$24316) (reverse g$rhs*$24317)))))))) (set! g$library-body-expander$15271 (case-lambda ((g$exp*$24327 g$imp*$24328 g$b*$24329) (call-with-values (case-lambda (() (g$parse-exports$15253 g$exp*$24327))) (case-lambda ((g$exp-int*$24333 g$exp-ext*$24334) (call-with-values (case-lambda (() (g$parse-import-spec*$15259 g$imp*$24328))) (case-lambda ((g$subst$24335 g$imp*$24336) ((case-lambda ((g$rib$24341) ((case-lambda ((g$b*$24343 g$rtc$24344 g$vtc$24345) ((case-lambda ((g$g$t$24349$24353 g$g$t$24350$24354 g$g$t$24351$24355 g$g$t$24352$24356) ((case-lambda ((g$swap$24361) (dynamic-wind g$swap$24361 (case-lambda (() (call-with-values (case-lambda (() (g$chi-library-internal$15269 g$b*$24343 g$rib$24341 '#f))) (case-lambda ((g$init*$24363 g$r$24364 g$mr$24365 g$lex*$24366 g$rhs*$24367) (begin (g$seal-rib!$14611 g$rib$24341) ((case-lambda ((g$rhs*$24373 g$init*$24374) (begin (g$unseal-rib!$14613 g$rib$24341) ((case-lambda ((g$export-subst$24377) (call-with-values (case-lambda (() (g$make-export-env/macros$15314 g$r$24364))) (case-lambda ((g$export-env$24379 g$global*$24380 g$macro*$24381) ((case-lambda ((g$invoke-body$24385 g$invoke-definitions$24386) (values g$imp*$24336 (g$rtc$24344) (g$vtc$24345) (g$g$build-sequence$14490$14553 '#f (append g$invoke-definitions$24386 (list g$invoke-body$24385))) g$macro*$24381 g$export-subst$24377 g$export-env$24379))) (g$g$build-letrec*$14496$14550 '#f g$lex*$24366 g$rhs*$24373 (g$build-exports$15310 g$global*$24380 g$init*$24374)) (map g$g$build-global-define$14304$14567 (map cdr g$global*$24380)))))))) (g$make-export-subst$15312 g$exp-int*$24333 g$exp-ext*$24334 g$rib$24341))))) (g$chi-rhs*$15227 g$rhs*$24367 g$r$24364 g$mr$24365) (g$chi-expr*$15213 g$init*$24363 g$r$24364 g$mr$24365)))))))) g$swap$24361))) (case-lambda (() (begin ((case-lambda ((g$t$24389) (begin (g$g$t$24349$24353 g$g$t$24351$24355) (set! g$g$t$24351$24355 g$t$24389)))) (g$g$t$24349$24353)) ((case-lambda ((g$t$24391) (begin (g$g$t$24350$24354 g$g$t$24352$24356) (set! g$g$t$24352$24356 g$t$24391)))) (g$g$t$24350$24354)))))))) g$inv-collector$15265 g$vis-collector$15267 g$rtc$24344 g$vtc$24345))) (map (case-lambda ((g$x$24393) (g$mkstx$14646 g$x$24393 g$top-mark*$14576 (list g$rib$24341)))) g$b*$24329) (g$make-collector$15263) (g$make-collector$15263)))) (g$make-top-rib$15261 g$subst$24335))))))))))) (set! g$core-library-expander$15273 (case-lambda ((g$e$24395) (call-with-values (case-lambda (() (g$parse-library$15257 g$e$24395))) (case-lambda ((g$name*$24397 g$exp*$24398 g$imp*$24399 g$b*$24400) (call-with-values (case-lambda (() (g$parse-library-name$15255 g$name*$24397))) (case-lambda ((g$name$24405 g$ver$24406) (call-with-values (case-lambda (() (g$library-body-expander$15271 g$exp*$24398 g$imp*$24399 g$b*$24400))) (case-lambda ((g$imp*$24409 g$invoke-req*$24410 g$visit-req*$24411 g$invoke-code$24412 g$visit-code$24413 g$export-subst$24414 g$export-env$24415) (values g$name$24405 g$ver$24406 g$imp*$24409 g$invoke-req*$24410 g$visit-req*$24411 g$invoke-code$24412 g$visit-code$24413 g$export-subst$24414 g$export-env$24415))))))))))))) (set! g$parse-top-level-program$15275 (case-lambda ((g$e*$24423) ((case-lambda ((g$t$24425) ((case-lambda ((g$ls/false$24427) (if (if g$ls/false$24427 (begin '#f (apply (case-lambda ((g$import$24429 g$imp*$24430 g$b*$24431) (eq? g$import$24429 'import))) g$ls/false$24427)) '#f) (apply (case-lambda ((g$import$24435 g$imp*$24436 g$b*$24437) (values g$imp*$24436 g$b*$24437))) g$ls/false$24427) ((case-lambda ((g$t$24441) ((case-lambda ((g$ls/false$24443) (if (if g$ls/false$24443 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$24443)) '#f) (apply (case-lambda (() (error '"invalid syntax of top-level program"))) g$ls/false$24443) (error 'expander '"invalid syntax" (g$strip$14688 g$t$24441 '()))))) ((case-lambda ((g$x$24445) '())) g$t$24441)))) g$t$24425)))) ((case-lambda ((g$x$24447) (if (g$syntax-pair?$14656 g$x$24447) (begin '#f ((case-lambda ((g$q$24449) (if g$q$24449 (begin '#f ((case-lambda ((g$r$24451) (if g$r$24451 (begin '#f (append g$q$24449 g$r$24451)) '#f))) ((letrec ((g$f$24453 (case-lambda ((g$x$24455) (if (g$syntax-pair?$14656 g$x$24455) ((case-lambda ((g$cars/f$24457) (if g$cars/f$24457 (begin '#f ((case-lambda ((g$cdrs/f$24459) (if g$cdrs/f$24459 (begin '#f (map cons g$cars/f$24457 g$cdrs/f$24459)) '#f))) (g$f$24453 (g$syntax-cdr$14668 g$x$24455)))) '#f))) ((case-lambda ((g$x$24461) (list g$x$24461))) (g$syntax-car$14664 g$x$24455))) (if (g$syntax-null?$14660 g$x$24455) (list (begin 'b* '())) '#f)))))) g$f$24453) (g$syntax-cdr$14668 g$x$24447)))) '#f))) ((case-lambda ((g$x$24463) (if (g$syntax-pair?$14656 g$x$24463) (begin '#f ((case-lambda ((g$q$24465) (if g$q$24465 (begin '#f ((case-lambda ((g$r$24467) (if g$r$24467 (begin '#f (append g$q$24465 g$r$24467)) '#f))) ((letrec ((g$f$24469 (case-lambda ((g$x$24471) (if (g$syntax-pair?$14656 g$x$24471) ((case-lambda ((g$cars/f$24473) (if g$cars/f$24473 (begin '#f ((case-lambda ((g$cdrs/f$24475) (if g$cdrs/f$24475 (begin '#f (map cons g$cars/f$24473 g$cdrs/f$24475)) '#f))) (g$f$24469 (g$syntax-cdr$14668 g$x$24471)))) '#f))) ((case-lambda ((g$x$24477) (list g$x$24477))) (g$syntax-car$14664 g$x$24471))) (if (g$syntax-null?$14660 g$x$24471) (list (begin 'imp* '())) '#f)))))) g$f$24469) (g$syntax-cdr$14668 g$x$24463)))) '#f))) ((case-lambda ((g$x$24479) (list g$x$24479))) (g$syntax-car$14664 g$x$24463)))) '#f))) (g$syntax-car$14664 g$x$24447)))) '#f))) g$t$24425)))) g$e*$24423)))) (set! g$top-level-expander$15277 (case-lambda ((g$e*$24481) (call-with-values (case-lambda (() (g$parse-top-level-program$15275 g$e*$24481))) (case-lambda ((g$imp*$24483 g$b*$24484) (call-with-values (case-lambda (() (g$library-body-expander$15271 '() g$imp*$24483 g$b*$24484))) (case-lambda ((g$imp*$24487 g$invoke-req*$24488 g$visit-req*$24489 g$invoke-code$24490 g$visit-code$24491 g$export-subst$24492 g$export-env$24493) (values g$invoke-req*$24488 g$invoke-code$24490)))))))))) (set! g$make-env$15280 (case-lambda ((g$subst$24501 g$imp*$24502) (vector 'g$15279 g$subst$24501 g$imp*$24502)))) (set! g$env?$15282 (case-lambda ((g$x$24505) (if (vector? g$x$24505) (if (= (vector-length g$x$24505) (+ '1 (length '(subst imp*)))) (begin '#f (eq? (vector-ref g$x$24505 '0) 'g$15279)) '#f) '#f)))) (set! g$env-subst$15284 (case-lambda ((g$x$24507) (if (g$env?$15282 g$x$24507) (vector-ref g$x$24507 '1) (error 'env-subst '"~s is not of type ~s" g$x$24507 'env))))) (set! g$env-imp*$15286 (case-lambda ((g$x$24509) (if (g$env?$15282 g$x$24509) (vector-ref g$x$24509 '2) (error 'env-imp* '"~s is not of type ~s" g$x$24509 'env))))) (set! g$set-env-subst!$15288 (case-lambda ((g$x$24511 g$v$24512) (if (g$env?$15282 g$x$24511) (vector-set! g$x$24511 '1 g$v$24512) (error 'set-env-subst! '"~s is not of type ~s" g$x$24511 'env))))) (set! g$set-env-imp*!$15290 (case-lambda ((g$x$24515 g$v$24516) (if (g$env?$15282 g$x$24515) (vector-set! g$x$24515 '2 g$v$24516) (error 'set-env-imp*! '"~s is not of type ~s" g$x$24515 'env))))) (set! g$environment?$15292 (case-lambda ((g$x$24519) (g$env?$15282 g$x$24519)))) (set! g$environment$15294 (case-lambda (g$imp*$24521 (call-with-values (case-lambda (() (g$parse-import-spec*$15259 g$imp*$24521))) (case-lambda ((g$subst$24523 g$imp*$24524) (g$make-env$15280 g$subst$24523 g$imp*$24524))))))) (set! g$null-environment$15296 (case-lambda ((g$n$24527) (begin (if (eqv? g$n$24527 '5) (void) (error 'null-environment '"not 5" g$n$24527)) (g$environment$15294 '(psyntax null-environment-5)))))) (set! g$scheme-report-environment$15298 (case-lambda ((g$n$24529) (begin (if (eqv? g$n$24529 '5) (void) (error 'scheme-report-environment '"not 5" g$n$24529)) (g$environment$15294 '(psyntax scheme-report-environment-5)))))) (set! g$expand$15300 (case-lambda ((g$x$24531 g$env$24532) (begin (if (g$env?$15282 g$env$24532) (void) (error 'expand '"not an environment" g$env$24532)) ((case-lambda ((g$subst$24535) ((case-lambda ((g$rib$24537) ((case-lambda ((g$x$24539 g$rtc$24540 g$vtc$24541) ((case-lambda ((g$x$24545) (begin (g$seal-rib!$14611 g$rib$24537) (values g$x$24545 (g$rtc$24540))))) ((case-lambda ((g$g$t$24547$24551 g$g$t$24548$24552 g$g$t$24549$24553 g$g$t$24550$24554) ((case-lambda ((g$swap$24559) (dynamic-wind g$swap$24559 (case-lambda (() (g$chi-expr$15217 g$x$24539 '() '()))) g$swap$24559))) (case-lambda (() (begin ((case-lambda ((g$t$24561) (begin (g$g$t$24547$24551 g$g$t$24549$24553) (set! g$g$t$24549$24553 g$t$24561)))) (g$g$t$24547$24551)) ((case-lambda ((g$t$24563) (begin (g$g$t$24548$24552 g$g$t$24550$24554) (set! g$g$t$24550$24554 g$t$24563)))) (g$g$t$24548$24552)))))))) g$inv-collector$15265 g$vis-collector$15267 g$rtc$24540 g$vtc$24541)))) (g$mkstx$14646 g$x$24531 g$top-mark*$14576 (list g$rib$24537)) (g$make-collector$15263) (g$make-collector$15263)))) (g$make-top-rib$15261 g$subst$24535)))) (g$env-subst$15284 g$env$24532)))))) (set! g$eval$15302 (case-lambda ((g$x$24565 g$env$24566) (begin (if (g$env?$15282 g$env$24566) (void) (error 'eval '"not an environment" g$env$24566)) (call-with-values (case-lambda (() (g$expand$15300 g$x$24565 g$env$24566))) (case-lambda ((g$x$24569 g$invoke-req*$24570) (begin (for-each g$g$invoke-library$13971$14258 g$invoke-req*$24570) (eval-core (g$g$expanded->core$13750$13814 g$x$24569)))))))))) (set! g$library-expander$15304 (case-lambda ((g$x$24573) ((case-lambda ((g$build-visit-code$24575 g$visit!$24577) (begin (set! g$build-visit-code$24575 (case-lambda ((g$macro*$24587) (if (null? g$macro*$24587) (g$g$build-void$14492$14552) (g$g$build-sequence$14490$14553 '#f (map (case-lambda ((g$x$24589) ((case-lambda ((g$loc$24591 g$src$24592) (list 'set! g$loc$24591 g$src$24592))) (car g$x$24589) (cddr g$x$24589)))) g$macro*$24587)))))) (set! g$visit!$24577 (case-lambda ((g$macro*$24579) (for-each (case-lambda ((g$x$24581) ((case-lambda ((g$loc$24583 g$proc$24584) (set-symbol-value! g$loc$24583 g$proc$24584))) (car g$x$24581) (cadr g$x$24581)))) g$macro*$24579)))) (call-with-values (case-lambda (() (g$core-library-expander$15273 g$x$24573))) (case-lambda ((g$name$24595 g$ver$24596 g$imp*$24597 g$inv*$24598 g$vis*$24599 g$invoke-code$24600 g$macro*$24601 g$export-subst$24602 g$export-env$24603) ((case-lambda ((g$id$24613 g$name$24614 g$ver$24615 g$imp*$24616 g$vis*$24617 g$inv*$24618) (begin (g$g$install-library$13963$14262 g$id$24613 g$name$24614 g$ver$24615 g$imp*$24616 g$vis*$24617 g$inv*$24618 g$export-subst$24602 g$export-env$24603 (case-lambda (() (g$visit!$24577 g$macro*$24601))) (case-lambda (() (eval-core (g$g$expanded->core$13750$13814 g$invoke-code$24600)))) '#t) (values g$invoke-code$24600 (g$build-visit-code$24575 g$macro*$24601) g$export-subst$24602 g$export-env$24603)))) (gensym) g$name$24595 g$ver$24596 (map g$g$library-spec$13979$14254 g$imp*$24597) (map g$g$library-spec$13979$14254 g$vis*$24599) (map g$g$library-spec$13979$14254 g$inv*$24598)))))))) '#f '#f)))) (set! g$boot-library-expand$15306 (case-lambda ((g$x$24625) (call-with-values (case-lambda (() (g$library-expander$15304 g$x$24625))) (case-lambda ((g$invoke-code$24627 g$visit-code$24628 g$export-subst$24629 g$export-env$24630) (values g$invoke-code$24627 g$export-subst$24629 g$export-env$24630))))))) (set! g$rev-map-append$15308 (case-lambda ((g$f$24635 g$ls$24636 g$ac$24637) (if (null? g$ls$24636) g$ac$24637 (g$rev-map-append$15308 g$f$24635 (cdr g$ls$24636) (cons (g$f$24635 (car g$ls$24636)) g$ac$24637)))))) (set! g$build-exports$15310 (case-lambda ((g$lex*+loc*$24641 g$init*$24642) (g$g$build-sequence$14490$14553 '#f (cons (g$g$build-void$14492$14552) (g$rev-map-append$15308 (case-lambda ((g$x$24645) (list 'set! (cdr g$x$24645) (car g$x$24645)))) g$lex*+loc*$24641 g$init*$24642)))))) (set! g$make-export-subst$15312 (case-lambda ((g$int*$24647 g$ext*$24648 g$rib$24649) (map (case-lambda ((g$int$24653 g$ext$24654) ((case-lambda ((g$id$24657) ((case-lambda ((g$label$24659) ((case-lambda (() (begin (if g$label$24659 (void) (error 'expander '"cannot export unbound identifier" (g$strip$14688 g$id$24657 '()))) (cons g$ext$24654 g$label$24659))))))) (g$id->label$14692 g$id$24657)))) (g$mkstx$14646 g$int$24653 g$top-mark*$14576 (list g$rib$24649))))) g$int*$24647 g$ext*$24648)))) (set! g$make-export-env/macros$15314 (case-lambda ((g$r$24661) (letrec ((g$f$24663 (case-lambda ((g$r$24665 g$env$24666 g$global*$24667 g$macro*$24668) (if (null? g$r$24665) (values g$env$24666 g$global*$24667 g$macro*$24668) ((case-lambda ((g$x$24673) ((case-lambda ((g$label$24675 g$b$24676) ((case-lambda ((g$t$24679) (if (memv g$t$24679 '(lexical)) ((case-lambda ((g$loc$24684) (g$f$24663 (cdr g$r$24665) (cons (cons* g$label$24675 'global g$loc$24684) g$env$24666) (cons (cons (g$binding-value$14700 g$b$24676) g$loc$24684) g$global*$24667) g$macro*$24668))) (g$gen-global$14582 (g$binding-value$14700 g$b$24676))) (if (memv g$t$24679 '(local-macro)) ((case-lambda ((g$loc$24682) (g$f$24663 (cdr g$r$24665) (cons (cons* g$label$24675 'global-macro g$loc$24682) g$env$24666) g$global*$24667 (cons (cons g$loc$24682 (g$binding-value$14700 g$b$24676)) g$macro*$24668)))) (gensym)) (if (memv g$t$24679 '(local-macro!)) ((case-lambda ((g$loc$24680) (g$f$24663 (cdr g$r$24665) (cons (cons* g$label$24675 'global-macro! g$loc$24680) g$env$24666) g$global*$24667 (cons (cons g$loc$24680 (g$binding-value$14700 g$b$24676)) g$macro*$24668)))) (gensym)) (if (memv g$t$24679 '($rtd $module)) (g$f$24663 (cdr g$r$24665) (cons g$x$24673 g$env$24666) g$global*$24667 g$macro*$24668) (error 'expander '"BUG: do not know how to export" (g$binding-type$14698 g$b$24676) (g$binding-value$14700 g$b$24676)))))))) (g$binding-type$14698 g$b$24676)))) (car g$x$24673) (cdr g$x$24673)))) (car g$r$24665))))))) (g$f$24663 g$r$24661 '() '() '()))))) (set! g$generate-temporaries$15316 (case-lambda ((g$ls$24686) ((case-lambda ((g$t$24688) ((case-lambda ((g$ls/false$24690) (if (if g$ls/false$24690 (begin '#f (apply (case-lambda ((g$ls$24692) '#t)) g$ls/false$24690)) '#f) (apply (case-lambda ((g$ls$24694) (map (case-lambda ((g$x$24696) (g$make-stx$14620 (gensym 't) g$top-mark*$14576 '()))) g$ls$24694))) g$ls/false$24690) ((case-lambda ((g$t$24698) ((case-lambda ((g$ls/false$24700) (if (if g$ls/false$24700 (begin '#f (apply (case-lambda (() '#t)) g$ls/false$24700)) '#f) (apply (case-lambda (() (error 'generate-temporaries '"not a list"))) g$ls/false$24700) (error 'expander '"invalid syntax" (g$strip$14688 g$t$24698 '()))))) ((case-lambda ((g$x$24702) '())) g$t$24698)))) g$t$24688)))) ((letrec ((g$f$24704 (case-lambda ((g$x$24706) (if (g$syntax-pair?$14656 g$x$24706) ((case-lambda ((g$cars/f$24708) (if g$cars/f$24708 (begin '#f ((case-lambda ((g$cdrs/f$24710) (if g$cdrs/f$24710 (begin '#f (map cons g$cars/f$24708 g$cdrs/f$24710)) '#f))) (g$f$24704 (g$syntax-cdr$14668 g$x$24706)))) '#f))) ((case-lambda ((g$x$24712) (list g$x$24712))) (g$syntax-car$14664 g$x$24706))) (if (g$syntax-null?$14660 g$x$24706) (list (begin 'ls '())) '#f)))))) g$f$24704) g$t$24688)))) g$ls$24686)))) (set! g$free-identifier=?$15318 (case-lambda ((g$x$24714 g$y$24715) (if (g$id?$14670 g$x$24714) (if (g$id?$14670 g$y$24715) (g$free-id=?$14678 g$x$24714 g$y$24715) (error 'free-identifier=? '"not an identifier" g$y$24715)) (error 'free-identifier=? '"not an identifier" g$x$24714))))) (set! g$bound-identifier=?$15320 (case-lambda ((g$x$24718 g$y$24719) (if (g$id?$14670 g$x$24718) (if (g$id?$14670 g$y$24719) (g$bound-id=?$14676 g$x$24718 g$y$24719) (error 'bound-identifier=? '"not an identifier" g$y$24719)) (error 'bound-identifier=? '"not an identifier" g$x$24718))))) (set! g$syntax-error$15322 (case-lambda ((g$x$24722 . g$args$24724) (begin (if (for-all string? g$args$24724) (void) (error 'syntax-error '"invalid argument" g$args$24724)) (error 'expander '"invalid syntax" (g$stx->datum$14690 g$x$24722) (apply string-append g$args$24724)))))) (set! g$identifier?$15324 (case-lambda ((g$x$24726) (g$id?$14670 g$x$24726)))) (set! g$datum->syntax$15326 (case-lambda ((g$id$24728 g$datum$24729) (if (g$id?$14670 g$id$24728) (g$datum->stx$14636 g$id$24728 g$datum$24729) (error 'datum->syntax '"not an identifier" g$id$24728))))) (set! g$syntax->datum$15328 (case-lambda ((g$x$24732) (g$stx->datum$14690 g$x$24732)))) (set! g$eval-r6rs-top-level$15330 (case-lambda ((g$x*$24734) (call-with-values (case-lambda (() (g$top-level-expander$15277 g$x*$24734))) (case-lambda ((g$lib*$24736 g$invoke-code$24737) (begin (for-each g$g$invoke-library$13971$14258 g$lib*$24736) (eval-core (g$g$expanded->core$13750$13814 g$invoke-code$24737))))))))) (set! g$interaction-library$15332 (g$g$make-parameter$13524$13740 '#f)) (set! g$interaction-sym->label$15334 (case-lambda ((g$sym$24740) ((case-lambda ((g$t$24742) (if g$t$24742 ((case-lambda ((g$lib$24744) ((case-lambda ((g$t$24746) (if g$t$24746 (cdr g$t$24746) ((case-lambda ((g$subst$24748) ((case-lambda ((g$t$24750) (if g$t$24750 ((case-lambda ((g$sym/lab$24752) ((case-lambda ((g$label$24754) (begin (g$g$extend-library-subst!$13965$14261 g$lib$24744 g$sym$24740 g$label$24754) g$label$24754))) (cdr g$sym/lab$24752)))) g$t$24750) ((case-lambda ((g$label$24756) (begin (g$g$extend-library-subst!$13965$14261 g$lib$24744 g$sym$24740 g$label$24756) (g$g$extend-library-env!$13967$14260 g$lib$24744 g$label$24756 (cons 'global (cons g$lib$24744 (g$gen-global$14582 g$sym$24740)))) g$label$24756))) (g$gen-label$14584 g$sym$24740))))) (assq g$sym$24740 g$subst$24748)))) (if (g$g$library-exists?$13955$14266 '(ikarus)) (g$g$library-subst$13903$14292 (g$g$find-library-by-name$13953$14267 '(ikarus))) '()))))) (assq g$sym$24740 (g$g$library-subst$13903$14292 g$lib$24744))))) g$t$24742) '#f))) (g$interaction-library$15332))))) (set! g$eval-top-level$15336 (case-lambda ((g$x$24758) ((case-lambda ((g$eval-binding$24760) (begin (set! g$eval-binding$24760 (case-lambda ((g$x$24762) ((case-lambda ((g$loc$24764 g$expr$24765) (if g$loc$24764 (set-symbol-value! g$loc$24764 (eval-core (g$g$expanded->core$13750$13814 g$expr$24765))) (eval-core (g$g$expanded->core$13750$13814 g$expr$24765))))) (car g$x$24762) (cdr g$x$24762))))) ((case-lambda ((g$rtc$24768 g$vtc$24769) ((case-lambda ((g$init*$24772) (begin (for-each g$g$invoke-library$13971$14258 (g$rtc$24768)) (if (null? g$init*$24772) (void) (begin (for-each g$eval-binding$24760 (reverse (cdr g$init*$24772))) (g$eval-binding$24760 (car g$init*$24772))))))) ((case-lambda ((g$g$t$24774$24780 g$g$t$24775$24781 g$g$t$24776$24782 g$g$t$24777$24783 g$g$t$24778$24784 g$g$t$24779$24785) ((case-lambda ((g$swap$24792) (dynamic-wind g$swap$24792 (case-lambda (() (g$chi-top*$15249 (list (g$mkstx$14646 g$x$24758 g$top-mark*$14576 '())) '()))) g$swap$24792))) (case-lambda (() (begin ((case-lambda ((g$t$24794) (begin (g$g$t$24774$24780 g$g$t$24777$24783) (set! g$g$t$24777$24783 g$t$24794)))) (g$g$t$24774$24780)) ((case-lambda ((g$t$24796) (begin (g$g$t$24775$24781 g$g$t$24778$24784) (set! g$g$t$24778$24784 g$t$24796)))) (g$g$t$24775$24781)) ((case-lambda ((g$t$24798) (begin (g$g$t$24776$24782 g$g$t$24779$24785) (set! g$g$t$24779$24785 g$t$24798)))) (g$g$t$24776$24782)))))))) g$inv-collector$15265 g$vis-collector$15267 g$interaction-library$15332 g$rtc$24768 g$vtc$24769 (g$g$find-library-by-name$13953$14267 '(ikarus interaction)))))) (g$make-collector$15263) (g$make-collector$15263))))) '#f)))) (begin (set! g$g$eval-top-level$15336$24800 g$eval-top-level$15336) (set! g$g$interaction-sym->label$15334$24801 g$interaction-sym->label$15334) (set! g$g$interaction-library$15332$24802 g$interaction-library$15332) (set! g$g$eval-r6rs-top-level$15330$24803 g$eval-r6rs-top-level$15330) (set! g$g$syntax->datum$15328$24804 g$syntax->datum$15328) (set! g$g$datum->syntax$15326$24805 g$datum->syntax$15326) (set! g$g$identifier?$15324$24806 g$identifier?$15324) (set! g$g$syntax-error$15322$24807 g$syntax-error$15322) (set! g$g$bound-identifier=?$15320$24808 g$bound-identifier=?$15320) (set! g$g$free-identifier=?$15318$24809 g$free-identifier=?$15318) (set! g$g$generate-temporaries$15316$24810 g$generate-temporaries$15316) (set! g$g$make-export-env/macros$15314$24811 g$make-export-env/macros$15314) (set! g$g$make-export-subst$15312$24812 g$make-export-subst$15312) (set! g$g$build-exports$15310$24813 g$build-exports$15310) (set! g$g$rev-map-append$15308$24814 g$rev-map-append$15308) (set! g$g$boot-library-expand$15306$24815 g$boot-library-expand$15306) (set! g$g$library-expander$15304$24816 g$library-expander$15304) (set! g$g$eval$15302$24817 g$eval$15302) (set! g$g$expand$15300$24818 g$expand$15300) (set! g$g$scheme-report-environment$15298$24819 g$scheme-report-environment$15298) (set! g$g$null-environment$15296$24820 g$null-environment$15296) (set! g$g$environment$15294$24821 g$environment$15294) (set! g$g$environment?$15292$24822 g$environment?$15292) (set! g$g$set-env-imp*!$15290$24823 g$set-env-imp*!$15290) (set! g$g$set-env-subst!$15288$24824 g$set-env-subst!$15288) (set! g$g$env-imp*$15286$24825 g$env-imp*$15286) (set! g$g$env-subst$15284$24826 g$env-subst$15284) (set! g$g$env?$15282$24827 g$env?$15282) (set! g$g$make-env$15280$24828 g$make-env$15280) (set! g$g$top-level-expander$15277$24829 g$top-level-expander$15277) (set! g$g$parse-top-level-program$15275$24830 g$parse-top-level-program$15275) (set! g$g$core-library-expander$15273$24831 g$core-library-expander$15273) (set! g$g$library-body-expander$15271$24832 g$library-body-expander$15271) (set! g$g$chi-library-internal$15269$24833 g$chi-library-internal$15269) (set! g$g$vis-collector$15267$24834 g$vis-collector$15267) (set! g$g$inv-collector$15265$24835 g$inv-collector$15265) (set! g$g$make-collector$15263$24836 g$make-collector$15263) (set! g$g$make-top-rib$15261$24837 g$make-top-rib$15261) (set! g$g$parse-import-spec*$15259$24838 g$parse-import-spec*$15259) (set! g$g$parse-library$15257$24839 g$parse-library$15257) (set! g$g$parse-library-name$15255$24840 g$parse-library-name$15255) (set! g$g$parse-exports$15253$24841 g$parse-exports$15253) (set! g$g$expand-transformer$15251$24842 g$expand-transformer$15251) (set! g$g$chi-top*$15249$24843 g$chi-top*$15249) (set! g$g$chi-top-set!$15247$24844 g$chi-top-set!$15247) (set! g$g$gen-global-var-binding$15245$24845 g$gen-global-var-binding$15245) (set! g$g$gen-global-macro-binding$15243$24846 g$gen-global-macro-binding$15243) (set! g$g$set-global-macro-binding!$15241$24847 g$set-global-macro-binding!$15241) (set! g$g$chi-body*$15239$24848 g$chi-body*$15239) (set! g$g$chi-internal-module$15237$24849 g$chi-internal-module$15237) (set! g$g$parse-module$15235$24850 g$parse-module$15235) (set! g$g$chi-internal$15233$24851 g$chi-internal$15233) (set! g$g$find-dups$15231$24852 g$find-dups$15231) (set! g$g$find-bound=?$15229$24853 g$find-bound=?$15229) (set! g$g$chi-rhs*$15227$24854 g$chi-rhs*$15227) (set! g$g$chi-rhs$15225$24855 g$chi-rhs$15225) (set! g$g$chi-lambda-clause*$15223$24856 g$chi-lambda-clause*$15223) (set! g$g$chi-lambda-clause$15221$24857 g$chi-lambda-clause$15221) (set! g$g$chi-set!$15219$24858 g$chi-set!$15219) (set! g$g$chi-expr$15217$24859 g$chi-expr$15217) (set! g$g$chi-application$15215$24860 g$chi-application$15215) (set! g$g$chi-expr*$15213$24861 g$chi-expr*$15213) (set! g$g$chi-global-macro$15211$24862 g$chi-global-macro$15211) (set! g$g$chi-local-macro$15209$24863 g$chi-local-macro$15209) (set! g$g$chi-macro$15207$24864 g$chi-macro$15207) (set! g$g$local-macro-transformer$15205$24865 g$local-macro-transformer$15205) (set! g$g$macro-transformer$15203$24866 g$macro-transformer$15203) (set! g$g$symbol-macro$15201$24867 g$symbol-macro$15201) (set! g$g$file-options-macro$15199$24868 g$file-options-macro$15199) (set! g$g$core-macro-transformer$15197$24869 g$core-macro-transformer$15197) (set! g$g$syntax-transformer$15195$24870 g$syntax-transformer$15195) (set! g$g$syntax-case-transformer$15193$24871 g$syntax-case-transformer$15193) (set! g$g$ellipsis?$15191$24872 g$ellipsis?$15191) (set! g$g$syntax-dispatch$15189$24873 g$syntax-dispatch$15189) (set! g$g$convert-pattern$15187$24874 g$convert-pattern$15187) (set! g$g$foreign-call-transformer$15185$24875 g$foreign-call-transformer$15185) (set! g$g$parameterize-transformer$15183$24876 g$parameterize-transformer$15183) (set! g$g$incorrect-usage-macro$15181$24877 g$incorrect-usage-macro$15181) (set! g$g$define-condition-type-macro$15179$24878 g$define-condition-type-macro$15179) (set! g$g$define-record-type-macro$15177$24879 g$define-record-type-macro$15177) (set! g$g$define-struct-macro$15175$24880 g$define-struct-macro$15175) (set! g$g$quasisyntax-macro$15173$24881 g$quasisyntax-macro$15173) (set! g$g$quasiquote-macro$15171$24882 g$quasiquote-macro$15171) (set! g$g$syntax-rules-macro$15169$24883 g$syntax-rules-macro$15169) (set! g$g$include-macro$15167$24884 g$include-macro$15167) (set! g$g$cond-macro$15165$24885 g$cond-macro$15165) (set! g$g$and-macro$15163$24886 g$and-macro$15163) (set! g$g$or-macro$15161$24887 g$or-macro$15161) (set! g$g$let*-macro$15159$24888 g$let*-macro$15159) (set! g$g$do-macro$15157$24889 g$do-macro$15157) (set! g$g$identifier-syntax-macro$15155$24890 g$identifier-syntax-macro$15155) (set! g$g$endianness-macro$15153$24891 g$endianness-macro$15153) (set! g$g$assert-macro$15151$24892 g$assert-macro$15151) (set! g$g$delay-macro$15149$24893 g$delay-macro$15149) (set! g$g$time-macro$15147$24894 g$time-macro$15147) (set! g$g$define-enumeration-macro$15145$24895 g$define-enumeration-macro$15145) (set! g$g$guard-macro$15143$24896 g$guard-macro$15143) (set! g$g$trace-define-macro$15141$24897 g$trace-define-macro$15141) (set! g$g$trace-lambda-macro$15139$24898 g$trace-lambda-macro$15139) (set! g$g$let-macro$15137$24899 g$let-macro$15137) (set! g$g$with-syntax-macro$15135$24900 g$with-syntax-macro$15135) (set! g$g$bless$15133$24901 g$bless$15133) (set! g$g$lambda-transformer$15131$24902 g$lambda-transformer$15131) (set! g$g$case-lambda-transformer$15129$24903 g$case-lambda-transformer$15129) (set! g$g$quote-transformer$15127$24904 g$quote-transformer$15127) (set! g$g$case-transformer$15125$24905 g$case-transformer$15125) (set! g$g$if-transformer$15123$24906 g$if-transformer$15123) (set! g$g$unless-transformer$15121$24907 g$unless-transformer$15121) (set! g$g$when-transformer$15119$24908 g$when-transformer$15119) (set! g$g$record-constructor-descriptor-transformer$15117$24909 g$record-constructor-descriptor-transformer$15117) (set! g$g$record-type-descriptor-transformer$15115$24910 g$record-type-descriptor-transformer$15115) (set! g$g$type-descriptor-transformer$15113$24911 g$type-descriptor-transformer$15113) (set! g$g$letrec*-transformer$15111$24912 g$letrec*-transformer$15111) (set! g$g$letrec-transformer$15109$24913 g$letrec-transformer$15109) (set! g$g$letrec-helper$15107$24914 g$letrec-helper$15107) (set! g$g$let-values-transformer$15105$24915 g$let-values-transformer$15105) (set! g$g$add-lexicals$15103$24916 g$add-lexicals$15103) (set! g$g$add-lexical$15101$24917 g$add-lexical$15101) (set! g$g$scheme-stx$15099$24918 g$scheme-stx$15099) (set! g$g$parse-define-syntax$15097$24919 g$parse-define-syntax$15097) (set! g$g$parse-define$15095$24920 g$parse-define$15095) (set! g$g$make-eval-transformer$14733$24922 g$make-eval-transformer$14733) (set! g$g$make-variable-transformer$14731$24923 g$make-variable-transformer$14731) (set! g$g$sanitize-binding$14729$24924 g$sanitize-binding$14729) (set! g$g$syntax-type$14702$24926 g$syntax-type$14702) (set! g$g$binding-value$14700$24927 g$binding-value$14700) (set! g$g$binding-type$14698$24928 g$binding-type$14698) (set! g$g$make-binding$14696$24929 g$make-binding$14696) (set! g$g$label->binding$14694$24930 g$label->binding$14694) (set! g$g$id->label$14692$24931 g$id->label$14692) (set! g$g$stx->datum$14690$24932 g$stx->datum$14690) (set! g$g$strip$14688$24933 g$strip$14688) (set! g$g$self-evaluating?$14686$24934 g$self-evaluating?$14686) (set! g$g$bound-id-member?$14684$24935 g$bound-id-member?$14684) (set! g$g$distinct-bound-ids?$14682$24936 g$distinct-bound-ids?$14682) (set! g$g$valid-bound-ids?$14680$24937 g$valid-bound-ids?$14680) (set! g$g$free-id=?$14678$24938 g$free-id=?$14678) (set! g$g$bound-id=?$14676$24939 g$bound-id=?$14676) (set! g$g$same-marks?$14674$24940 g$same-marks?$14674) (set! g$g$id->sym$14672$24941 g$id->sym$14672) (set! g$g$id?$14670$24942 g$id?$14670) (set! g$g$syntax-cdr$14668$24943 g$syntax-cdr$14668) (set! g$g$syntax->list$14666$24944 g$syntax->list$14666) (set! g$g$syntax-car$14664$24945 g$syntax-car$14664) (set! g$g$syntax-list?$14662$24946 g$syntax-list?$14662) (set! g$g$syntax-null?$14660$24947 g$syntax-null?$14660) (set! g$g$syntax-vector?$14658$24948 g$syntax-vector?$14658) (set! g$g$syntax-pair?$14656$24949 g$syntax-pair?$14656) (set! g$g$syntax-vector->list$14654$24950 g$syntax-vector->list$14654) (set! g$g$syntax-kind?$14652$24951 g$syntax-kind?$14652) (set! g$g$add-subst$14650$24952 g$add-subst$14650) (set! g$g$add-mark$14648$24953 g$add-mark$14648) (set! g$g$mkstx$14646$24954 g$mkstx$14646) (set! g$g$join-wraps$14644$24955 g$join-wraps$14644) (set! g$g$anti-mark?$14642$24956 g$anti-mark?$14642) (set! g$g$anti-mark$14640$24957 g$anti-mark$14640) (set! g$g$gen-mark$14638$24958 g$gen-mark$14638) (set! g$g$datum->stx$14636$24959 g$datum->stx$14636) (set! g$g$set-stx-subst*!$14634$24960 g$set-stx-subst*!$14634) (set! g$g$set-stx-mark*!$14632$24961 g$set-stx-mark*!$14632) (set! g$g$set-stx-expr!$14630$24962 g$set-stx-expr!$14630) (set! g$g$stx-subst*$14628$24963 g$stx-subst*$14628) (set! g$g$stx-mark*$14626$24964 g$stx-mark*$14626) (set! g$g$stx-expr$14624$24965 g$stx-expr$14624) (set! g$g$stx?$14622$24966 g$stx?$14622) (set! g$g$make-stx$14620$24967 g$make-stx$14620) (set! g$g$make-full-rib$14617$24968 g$make-full-rib$14617) (set! g$g$increment-rib-frequency!$14615$24969 g$increment-rib-frequency!$14615) (set! g$g$unseal-rib!$14613$24970 g$unseal-rib!$14613) (set! g$g$seal-rib!$14611$24971 g$seal-rib!$14611) (set! g$g$extend-rib!$14609$24972 g$extend-rib!$14609) (set! g$g$make-empty-rib$14607$24973 g$make-empty-rib$14607) (set! g$g$set-rib-sealed/freq!$14605$24974 g$set-rib-sealed/freq!$14605) (set! g$g$set-rib-label*!$14603$24975 g$set-rib-label*!$14603) (set! g$g$set-rib-mark**!$14601$24976 g$set-rib-mark**!$14601) (set! g$g$set-rib-sym*!$14599$24977 g$set-rib-sym*!$14599) (set! g$g$rib-sealed/freq$14597$24978 g$rib-sealed/freq$14597) (set! g$g$rib-label*$14595$24979 g$rib-label*$14595) (set! g$g$rib-mark**$14593$24980 g$rib-mark**$14593) (set! g$g$rib-sym*$14591$24981 g$rib-sym*$14591) (set! g$g$rib?$14589$24982 g$rib?$14589) (set! g$g$make-rib$14587$24983 g$make-rib$14587) (set! g$g$gen-label$14584$24984 g$gen-label$14584) (set! g$g$gen-global$14582$24985 g$gen-global$14582) (set! g$g$gen-lexical$14580$24986 g$gen-lexical$14580) (set! g$g$top-marked?$14578$24987 g$top-marked?$14578) (set! g$g$top-mark*$14576$24988 g$top-mark*$14576) (set! g$g$set-union$14571$24990 g$set-union$14571) (set! g$g$set-cons$14569$24991 g$set-cons$14569) (g$g$current-library-expander$13947$14270 g$library-expander$15304))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)

(begin (g$g$current-primitive-locations$13742$13818 (case-lambda ((g$x$25739) ((case-lambda ((g$t$25741) (if g$t$25741 (cdr g$t$25741) '#f))) (assq g$x$25739 '((syntax-error . g$g$syntax-error$15322$24807) (syntax-dispatch . g$g$syntax-dispatch$15189$24873) (make-variable-transformer . g$g$make-variable-transformer$14731$24923) (identifier? . g$g$identifier?$15324$24806) (generate-temporaries . g$g$generate-temporaries$15316$24810) (free-identifier=? . g$g$free-identifier=?$15318$24809) (syntax->datum . g$g$syntax->datum$15328$24804) (datum->syntax . g$g$datum->syntax$15326$24805) (bound-identifier=? . g$g$bound-identifier=?$15320$24808) (symbol-hash . g$g$symbol-hash$13447$13479) (string-ci-hash . g$g$string-ci-hash$13445$13480) (string-hash . g$g$string-hash$13443$13481) (equal-hash . g$g$equal-hash$13441$13482) (hashtable-equivalence-function . g$g$hashtable-equivalence-function$13435$13485) (make-hashtable . g$g$make-hashtable$13411$13497) (hashtable-hash-function . g$g$hashtable-hash-function$13437$13484) (make-eqv-hashtable . g$g$make-eqv-hashtable$13409$13498) (make-eq-hashtable . g$g$make-eq-hashtable$13407$13499) (hashtable? . g$g$hashtable?$13413$13496) (hashtable-update! . g$g$hashtable-update!$13425$13490) (hashtable-size . g$g$hashtable-size$13415$13495) (hashtable-set! . g$g$hashtable-set!$13419$13493) (hashtable-ref . g$g$hashtable-ref$13417$13494) (hashtable-mutable? . g$g$hashtable-mutable?$13439$13483) (hashtable-keys . g$g$hashtable-keys$13431$13487) (hashtable-entries . g$g$hashtable-entries$13433$13486) (hashtable-delete! . g$g$hashtable-delete!$13421$13492) (hashtable-copy . g$g$hashtable-copy$13427$13489) (hashtable-contains? . g$g$hashtable-contains?$13423$13491) (hashtable-clear! . g$g$hashtable-clear!$13429$13488) (null-environment . g$g$null-environment$15296$24820) (eval . g$g$eval$15302$24817) (environment . g$g$environment$15294$24821))))))) (g$g$install-library$13963$14262 'g$25704 '(ikarus interaction) '() '() '() '() '() '() values values '#t) (g$g$install-library$13963$14262 'g$25705 '(ironscheme) '() '() '() '() '() '() values values '#t) (g$g$install-library$13963$14262 'g$25706 '(ironscheme clr internal) '() '() '() '() '((clr-call-internal . g$25703) (clr-new-internal . g$25702)) '() values values '#t) (g$g$install-library$13963$14262 'g$25707 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$25058) (unquote . g$25057) (delay . g$25050) (or . g$25048) (and . g$25047) (do . g$25046) (cond . g$25045) (let* . g$25044) (let . g$25043) (quasiquote . g$25039) (syntax-rules . g$25038) (case . g$25032) (if . g$25028) (letrec . g$25026) (lambda . g$25023) (quote . g$25020) (letrec-syntax . g$25018) (let-syntax . g$25017) (set! . g$25016) (begin . g$25014) (define-syntax . g$25012) (define . g$25011)) '() values values '#t) (g$g$install-library$13963$14262 'g$25708 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g$25684) (string-ci>=? . g$25683) (string-ci=? . g$25682) (string-ci<? . g$25681) (string-ci<=? . g$25680) (char-whitespace? . g$25679) (char-upper-case? . g$25678) (char-numeric? . g$25676) (char-lower-case? . g$25675) (char-upcase . g$25673) (char-downcase . g$25670) (char-ci>? . g$25669) (char-ci>=? . g$25668) (char-ci=? . g$25667) (char-ci<? . g$25666) (char-ci<=? . g$25665) (char-alphabetic? . g$25664) (call-with-output-file . g$25641) (call-with-input-file . g$25640) (write-char . g$25639) (write . g$25638) (with-output-to-file . g$25637) (with-input-from-file . g$25636) (read-char . g$25635) (read . g$25634) (peek-char . g$25633) (open-output-file . g$25632) (open-input-file . g$25631) (newline . g$25630) (display . g$25629) (close-output-port . g$25628) (close-input-port . g$25627) (eof-object . g$25625) (current-output-port . g$25623) (current-input-port . g$25622) (output-port? . g$25621) (input-port? . g$25620) (scheme-report-environment . g$25535) (quotient . g$25534) (null-environment . g$15297) (remainder . g$25533) (modulo . g$25532) (inexact->exact . g$25531) (force . g$25530) (exact->inexact . g$25529) (string-fill! . g$25526) (string-set! . g$25525) (set-cdr! . g$25524) (set-car! . g$25523) (memv . g$25517) (memq . g$25516) (member . g$25514) (assv . g$25506) (assq . g$25505) (assoc . g$25503) (eval . g$15303) (zero? . g$25270) (vector? . g$25269) (vector-set! . g$25268) (vector-ref . g$25267) (vector-length . g$25265) (vector-fill! . g$25263) (vector->list . g$25262) (vector . g$25261) (values . g$25260) (truncate . g$25259) (tan . g$25258) (symbol? . g$25257) (symbol->string . g$25255) (substring . g$25254) (string? . g$25253) (string>? . g$25252) (string>=? . g$25251) (string=? . g$25250) (string<? . g$25249) (string<=? . g$25248) (string-ref . g$25247) (string-length . g$25246) (string-copy . g$25244) (string-append . g$25243) (string->symbol . g$25242) (string->number . g$25241) (string->list . g$25240) (string . g$25239) (sqrt . g$25238) (sin . g$25237) (round . g$25236) (reverse . g$25235) (real? . g$25234) (real-part . g$25232) (rationalize . g$25231) (rational? . g$25230) (procedure? . g$25228) (positive? . g$25227) (pair? . g$25226) (odd? . g$25225) (numerator . g$25224) (number? . g$25223) (number->string . g$25222) (not . g$25220) (negative? . g$25219) (min . g$25217) (max . g$25216) (map . g$25215) (make-vector . g$25214) (make-string . g$25213) (make-rectangular . g$25212) (make-polar . g$25211) (magnitude . g$25210) (log . g$25209) (list? . g$25208) (list-tail . g$25207) (list-ref . g$25206) (list->vector . g$25205) (list->string . g$25204) (list . g$25203) (length . g$25202) (lcm . g$25201) (integer? . g$25200) (integer->char . g$25198) (inexact? . g$25196) (imag-part . g$25194) (gcd . g$25193) (for-each . g$25192) (floor . g$25191) (expt . g$25189) (exp . g$25188) (exact? . g$25187) (even? . g$25184) (eqv? . g$25182) (equal? . g$25181) (eq? . g$25180) (dynamic-wind . g$25179) (denominator . g$25172) (cos . g$25171) (cons . g$25170) (complex? . g$25169) (char? . g$25168) (char>? . g$25167) (char>=? . g$25166) (char=? . g$25165) (char<? . g$25164) (char<=? . g$25163) (char->integer . g$25162) (ceiling . g$25161) (call-with-values . g$25160) (call-with-current-continuation . g$25158) (cddddr . g$25157) (cdddar . g$25156) (cddadr . g$25155) (cddaar . g$25154) (cdaddr . g$25153) (cdadar . g$25152) (cdaadr . g$25151) (cdaaar . g$25150) (cadddr . g$25149) (caddar . g$25148) (cadadr . g$25147) (cadaar . g$25146) (caaddr . g$25145) (caadar . g$25144) (caaadr . g$25143) (caaaar . g$25142) (cdddr . g$25141) (cddar . g$25140) (cdadr . g$25139) (cdaar . g$25138) (caddr . g$25137) (cadar . g$25136) (caadr . g$25135) (caaar . g$25134) (cddr . g$25133) (cdar . g$25132) (cadr . g$25131) (caar . g$25130) (cdr . g$25129) (car . g$25128) (boolean? . g$25127) (atan . g$25125) (asin . g$25123) (apply . g$25122) (append . g$25121) (angle . g$25120) (acos . g$25119) (abs . g$25118) (/ . g$25117) (* . g$25116) (- . g$25115) (+ . g$25114) (>= . g$25113) (> . g$25112) (= . g$25111) (<= . g$25110) (< . g$25109) (unquote-splicing . g$25058) (unquote . g$25057) (delay . g$25050) (or . g$25048) (and . g$25047) (do . g$25046) (cond . g$25045) (let* . g$25044) (let . g$25043) (quasiquote . g$25039) (syntax-rules . g$25038) (case . g$25032) (if . g$25028) (letrec . g$25026) (lambda . g$25023) (quote . g$25020) (letrec-syntax . g$25018) (let-syntax . g$25017) (set! . g$25016) (begin . g$25014) (define-syntax . g$25012) (define . g$25011)) '() values values '#t) (g$g$install-library$13963$14262 'g$25709 '(psyntax modules) '() '() '() '() '((module . g$25013)) '() values values '#t) (g$g$install-library$13963$14262 'g$25710 '(chez parameters) '() '() '() '() '() '() values values '#t) (g$g$install-library$13963$14262 'g$25711 '(rnrs) '(6) '() '() '() '((string-upcase . g$25692) (string-titlecase . g$25691) (string-normalize-nfkd . g$25690) (string-normalize-nfkc . g$25689) (string-normalize-nfd . g$25688) (string-normalize-nfc . g$25687) (string-foldcase . g$25686) (string-downcase . g$25685) (string-ci>? . g$25684) (string-ci>=? . g$25683) (string-ci=? . g$25682) (string-ci<? . g$25681) (string-ci<=? . g$25680) (char-whitespace? . g$25679) (char-upper-case? . g$25678) (char-title-case? . g$25677) (char-numeric? . g$25676) (char-lower-case? . g$25675) (char-general-category . g$25674) (char-upcase . g$25673) (char-titlecase . g$25672) (char-foldcase . g$25671) (char-downcase . g$25670) (char-ci>? . g$25669) (char-ci>=? . g$25668) (char-ci=? . g$25667) (char-ci<? . g$25666) (char-ci<=? . g$25665) (char-alphabetic? . g$25664) (make-variable-transformer . g$14732) (identifier? . g$15325) (generate-temporaries . g$15317) (free-identifier=? . g$15319) (syntax->datum . g$15329) (datum->syntax . g$15327) (bound-identifier=? . g$15321) (record-type-descriptor? . g$25663) (record-predicate . g$25662) (record-mutator . g$25661) (record-constructor . g$25660) (record-accessor . g$25659) (make-record-type-descriptor . g$25658) (make-record-constructor-descriptor . g$25657) (record? . g$25656) (record-type-uid . g$25655) (record-type-sealed? . g$25654) (record-type-parent . g$25653) (record-type-opaque? . g$25652) (record-type-name . g$25651) (record-type-generative? . g$25650) (record-type-field-names . g$25649) (record-rtd . g$25648) (record-field-mutable? . g$25647) (delete-file . g$25646) (file-exists? . g$25645) (vector-sort! . g$25644) (vector-sort . g$25643) (list-sort . g$25642) (symbol-hash . g$13448) (string-ci-hash . g$13446) (string-hash . g$13444) (equal-hash . g$13442) (hashtable-equivalence-function . g$13436) (make-hashtable . g$13412) (hashtable-hash-function . g$13438) (make-eqv-hashtable . g$13410) (make-eq-hashtable . g$13408) (hashtable? . g$13414) (hashtable-update! . g$13426) (hashtable-size . g$13416) (hashtable-set! . g$13420) (hashtable-ref . g$13418) (hashtable-mutable? . g$13440) (hashtable-keys . g$13432) (hashtable-entries . g$13434) (hashtable-delete! . g$13422) (hashtable-copy . g$13428) (hashtable-contains? . g$13424) (hashtable-clear! . g$13430) (call-with-output-file . g$25641) (call-with-input-file . g$25640) (write-char . g$25639) (write . g$25638) (with-output-to-file . g$25637) (with-input-from-file . g$25636) (read-char . g$25635) (read . g$25634) (peek-char . g$25633) (open-output-file . g$25632) (open-input-file . g$25631) (newline . g$25630) (display . g$25629) (close-output-port . g$25628) (close-input-port . g$25627) (eof-object? . g$25626) (eof-object . g$25625) (current-error-port . g$25624) (current-output-port . g$25623) (current-input-port . g$25622) (output-port? . g$25621) (input-port? . g$25620) (utf-8-codec . g$25619) (utf-16-codec . g$25618) (transcoder-error-handling-mode . g$25617) (transcoder-eol-style . g$25616) (transcoder-codec . g$25615) (transcoded-port . g$25614) (textual-port? . g$25613) (string->bytevector . g$25612) (standard-output-port . g$25611) (standard-input-port . g$25610) (standard-error-port . g$25609) (set-port-position! . g$25608) (put-u8 . g$25607) (put-string . g$25606) (put-datum . g$25605) (put-char . g$25604) (put-bytevector . g$25603) (port? . g$25602) (port-transcoder . g$25601) (port-position . g$25600) (port-has-set-port-position!? . g$25599) (port-has-port-position? . g$25598) (port-eof? . g$25597) (output-port-buffer-mode . g$25596) (open-string-output-port . g$25595) (open-string-input-port . g$25594) (open-file-output-port . g$25593) (open-file-input/output-port . g$25592) (open-file-input-port . g$25591) (open-bytevector-output-port . g$25590) (open-bytevector-input-port . g$25589) (native-transcoder . g$25588) (native-eol-style . g$25587) (make-transcoder . g$25586) (latin-1-codec . g$25585) (make-i/o-write-error . g$25584) (make-i/o-read-error . g$25583) (make-i/o-port-error . g$25582) (make-i/o-invalid-position-error . g$25581) (make-i/o-filename-error . g$25580) (make-i/o-file-protection-error . g$25579) (make-i/o-file-is-read-only-error . g$25578) (make-i/o-file-does-not-exist-error . g$25577) (make-i/o-file-already-exists-error . g$25576) (make-i/o-error . g$25575) (make-i/o-encoding-error . g$25574) (make-i/o-decoding-error . g$25573) (make-custom-textual-output-port . g$25572) (make-custom-textual-input/output-port . g$25571) (make-custom-textual-input-port . g$25570) (make-custom-binary-output-port . g$25569) (make-custom-binary-input/output-port . g$25568) (make-custom-binary-input-port . g$25567) (make-bytevector . g$25566) (lookahead-u8 . g$25565) (lookahead-char . g$25564) (i/o-write-error? . g$25563) (i/o-read-error? . g$25562) (i/o-port-error? . g$25561) (i/o-invalid-position-error? . g$25560) (i/o-filename-error? . g$25559) (i/o-file-protection-error? . g$25558) (i/o-file-is-read-only-error? . g$25557) (i/o-file-does-not-exist-error? . g$25556) (i/o-file-already-exists-error? . g$25555) (i/o-error? . g$25554) (i/o-error-port . g$25553) (i/o-error-filename . g$25552) (i/o-encoding-error? . g$25551) (i/o-encoding-error-char . g$25550) (i/o-decoding-error? . g$25549) (get-u8 . g$25548) (get-string-n! . g$25547) (get-string-n . g$25546) (get-string-all . g$25545) (get-line . g$25544) (get-datum . g$25543) (get-char . g$25542) (get-bytevector-some . g$25541) (get-bytevector-n! . g$25540) (get-bytevector-n . g$25539) (get-bytevector-all . g$25538) (flush-output-port . g$25537) (close-port . g$25536) (exit . g$25528) (command-line . g$25527) (remove . g$25522) (remv . g$25521) (remp . g$25520) (remq . g$25519) (partition . g$25518) (memv . g$25517) (memq . g$25516) (memp . g$25515) (member . g$25514) (exists . g$25513) (for-all . g$25512) (fold-right . g$25511) (fold-left . g$25510) (find . g$25509) (filter . g$25508) (cons* . g$25507) (assv . g$25506) (assq . g$25505) (assp . g$25504) (assoc . g$25503) (call-with-string-output-port . g$25502) (call-with-port . g$25501) (call-with-bytevector-output-port . g$25500) (bytevector->string . g$25499) (buffer-mode? . g$25498) (binary-port? . g$25497) (with-exception-handler . g$25496) (raise-continuable . g$25495) (raise . g$25494) (make-enumeration . g$25493) (enum-set=? . g$25492) (enum-set-universe . g$25491) (enum-set-union . g$25490) (enum-set-subset? . g$25489) (enum-set-projection . g$25488) (enum-set-member? . g$25487) (enum-set-intersection . g$25486) (enum-set-indexer . g$25485) (enum-set-difference . g$25484) (enum-set-constructor . g$25483) (enum-set-complement . g$25482) (enum-set->list . g$25481) (who-condition? . g$25480) (warning? . g$25479) (violation? . g$25478) (undefined-violation? . g$25477) (syntax-violation? . g$25476) (syntax-violation-subform . g$25475) (syntax-violation-form . g$25474) (syntax-violation . g$25473) (simple-conditions . g$25472) (serious-condition? . g$25471) (non-continuable-violation? . g$25470) (&non-continuable . g$25469) (message-condition? . g$25468) (make-who-condition . g$25467) (make-warning . g$25466) (make-violation . g$25465) (make-undefined-violation . g$25464) (make-syntax-violation . g$25463) (make-serious-condition . g$25462) (make-non-continuable-violation . g$25461) (make-message-condition . g$25460) (make-lexical-violation . g$25459) (make-irritants-condition . g$25458) (make-implementation-restriction-violation . g$25457) (make-error . g$25456) (make-assertion-violation . g$25455) (lexical-violation? . g$25454) (irritants-condition? . g$25453) (implementation-restriction-violation? . g$25452) (&implementation-restriction . g$25451) (error? . g$25450) (condition-who . g$25449) (condition-predicate . g$25448) (condition-message . g$25447) (condition-irritants . g$25446) (condition-accessor . g$25445) (condition . g$25444) (assertion-violation? . g$25443) (condition? . g$25442) (utf32->string . g$25441) (utf16->string . g$25440) (utf8->string . g$25439) (uint-list->bytevector . g$25438) (u8-list->bytevector . g$25437) (string->utf8 . g$25436) (string->utf32 . g$25435) (string->utf16 . g$25434) (sint-list->bytevector . g$25433) (native-endianness . g$25432) (bytevector? . g$25431) (bytevector=? . g$25430) (bytevector-uint-set! . g$25429) (bytevector-uint-ref . g$25428) (bytevector-u8-set! . g$25427) (bytevector-u8-ref . g$25426) (bytevector-u64-set! . g$25425) (bytevector-u64-ref . g$25424) (bytevector-u64-native-set! . g$25423) (bytevector-u64-native-ref . g$25422) (bytevector-u32-set! . g$25421) (bytevector-u32-ref . g$25420) (bytevector-u32-native-set! . g$25419) (bytevector-u32-native-ref . g$25418) (bytevector-u16-set! . g$25417) (bytevector-u16-ref . g$25416) (bytevector-u16-native-set! . g$25415) (bytevector-u16-native-ref . g$25414) (bytevector-sint-set! . g$25413) (bytevector-sint-ref . g$25412) (bytevector-s8-set! . g$25411) (bytevector-s8-ref . g$25410) (bytevector-s64-set! . g$25409) (bytevector-s64-ref . g$25408) (bytevector-s64-native-set! . g$25407) (bytevector-s64-native-ref . g$25406) (bytevector-s32-set! . g$25405) (bytevector-s32-ref . g$25404) (bytevector-s32-native-set! . g$25403) (bytevector-s32-native-ref . g$25402) (bytevector-s16-set! . g$25401) (bytevector-s16-ref . g$25400) (bytevector-s16-native-set! . g$25399) (bytevector-s16-native-ref . g$25398) (bytevector-length . g$25397) (bytevector-ieee-single-set! . g$25396) (bytevector-ieee-single-ref . g$25395) (bytevector-ieee-single-native-set! . g$25394) (bytevector-ieee-single-native-ref . g$25393) (bytevector-ieee-double-set! . g$25392) (bytevector-ieee-double-ref . g$25391) (bytevector-ieee-double-native-set! . g$25390) (bytevector-ieee-double-native-ref . g$25389) (bytevector-fill! . g$25388) (bytevector-copy! . g$25387) (bytevector-copy . g$25386) (bytevector->uint-list . g$25385) (bytevector->u8-list . g$25384) (bytevector->sint-list . g$25383) (no-nans-violation? . g$25382) (no-infinities-violation? . g$25381) (make-no-nans-violation . g$25380) (make-no-infinities-violation . g$25379) (real->flonum . g$25378) (flzero? . g$25377) (fltruncate . g$25376) (fltan . g$25375) (flsqrt . g$25374) (flsin . g$25373) (flround . g$25372) (flpositive? . g$25371) (flonum? . g$25370) (flodd? . g$25369) (flnumerator . g$25368) (flnegative? . g$25367) (flnan? . g$25366) (flmod0 . g$25365) (flmod . g$25364) (flmin . g$25363) (flmax . g$25362) (fllog . g$25361) (flinteger? . g$25360) (flinfinite? . g$25359) (flfloor . g$25358) (flfinite? . g$25357) (flexpt . g$25356) (flexp . g$25355) (fleven? . g$25354) (fldiv0-and-mod0 . g$25353) (fldiv0 . g$25352) (fldiv-and-mod . g$25351) (fldiv . g$25350) (fldenominator . g$25349) (flcos . g$25348) (flceiling . g$25347) (flatan . g$25346) (flasin . g$25345) (flacos . g$25344) (flabs . g$25343) (fl>? . g$25342) (fl>=? . g$25341) (fl=? . g$25340) (fl<? . g$25339) (fl<=? . g$25338) (fl/ . g$25337) (fl- . g$25336) (fl+ . g$25335) (fl* . g$25334) (fixnum->flonum . g$25333) (fxzero? . g$25332) (fxxor . g$25331) (fxrotate-bit-field . g$25330) (fxreverse-bit-field . g$25329) (fxpositive? . g$25328) (fxodd? . g$25327) (fxnot . g$25326) (fxnegative? . g$25325) (fxmod0 . g$25324) (fxmod . g$25323) (fxmin . g$25322) (fxmax . g$25321) (fxlength . g$25320) (fxior . g$25319) (fxif . g$25318) (fxfirst-bit-set . g$25317) (fxeven? . g$25316) (fxdiv0-and-mod0 . g$25315) (fxdiv0 . g$25314) (fxdiv-and-mod . g$25313) (fxdiv . g$25312) (fxcopy-bit-field . g$25311) (fxcopy-bit . g$25310) (fxbit-set? . g$25309) (fxbit-field . g$25308) (fxbit-count . g$25307) (fxarithmetic-shift-right . g$25306) (fxarithmetic-shift-left . g$25305) (fxarithmetic-shift . g$25304) (fxand . g$25303) (fx>? . g$25302) (fx>=? . g$25301) (fx=? . g$25300) (fx<? . g$25299) (fx<=? . g$25298) (fx-/carry . g$25297) (fx- . g$25296) (fx+/carry . g$25295) (fx+ . g$25294) (fx*/carry . g$25293) (fx* . g$25292) (greatest-fixnum . g$25291) (least-fixnum . g$25290) (fixnum-width . g$25289) (fixnum? . g$25288) (bitwise-rotate-bit-field . g$25287) (bitwise-reverse-bit-field . g$25286) (bitwise-length . g$25285) (bitwise-if . g$25284) (bitwise-first-bit-set . g$25283) (bitwise-copy-bit-field . g$25282) (bitwise-copy-bit . g$25281) (bitwise-bit-set? . g$25280) (bitwise-bit-field . g$25279) (bitwise-bit-count . g$25278) (bitwise-xor . g$25277) (bitwise-ior . g$25276) (bitwise-and . g$25275) (bitwise-not . g$25274) (bitwise-arithmetic-shift-right . g$25273) (bitwise-arithmetic-shift-left . g$25272) (bitwise-arithmetic-shift . g$25271) (zero? . g$25270) (vector? . g$25269) (vector-set! . g$25268) (vector-ref . g$25267) (vector-map . g$25266) (vector-length . g$25265) (vector-for-each . g$25264) (vector-fill! . g$25263) (vector->list . g$25262) (vector . g$25261) (values . g$25260) (truncate . g$25259) (tan . g$25258) (symbol? . g$25257) (symbol=? . g$25256) (symbol->string . g$25255) (substring . g$25254) (string? . g$25253) (string>? . g$25252) (string>=? . g$25251) (string=? . g$25250) (string<? . g$25249) (string<=? . g$25248) (string-ref . g$25247) (string-length . g$25246) (string-for-each . g$25245) (string-copy . g$25244) (string-append . g$25243) (string->symbol . g$25242) (string->number . g$25241) (string->list . g$25240) (string . g$25239) (sqrt . g$25238) (sin . g$25237) (round . g$25236) (reverse . g$25235) (real? . g$25234) (real-valued? . g$25233) (real-part . g$25232) (rationalize . g$25231) (rational? . g$25230) (rational-valued? . g$25229) (procedure? . g$25228) (positive? . g$25227) (pair? . g$25226) (odd? . g$25225) (numerator . g$25224) (number? . g$25223) (number->string . g$25222) (null? . g$25221) (not . g$25220) (negative? . g$25219) (nan? . g$25218) (min . g$25217) (max . g$25216) (map . g$25215) (make-vector . g$25214) (make-string . g$25213) (make-rectangular . g$25212) (make-polar . g$25211) (magnitude . g$25210) (log . g$25209) (list? . g$25208) (list-tail . g$25207) (list-ref . g$25206) (list->vector . g$25205) (list->string . g$25204) (list . g$25203) (length . g$25202) (lcm . g$25201) (integer? . g$25200) (integer-valued? . g$25199) (integer->char . g$25198) (infinite? . g$25197) (inexact? . g$25196) (inexact . g$25195) (imag-part . g$25194) (gcd . g$25193) (for-each . g$25192) (floor . g$25191) (finite? . g$25190) (expt . g$25189) (exp . g$25188) (exact? . g$25187) (exact-integer-sqrt . g$25186) (exact . g$25185) (even? . g$25184) (error . g$25183) (eqv? . g$25182) (equal? . g$25181) (eq? . g$25180) (dynamic-wind . g$25179) (div0-and-mod0 . g$25178) (mod0 . g$25177) (div0 . g$25176) (div-and-mod . g$25175) (mod . g$25174) (div . g$25173) (denominator . g$25172) (cos . g$25171) (cons . g$25170) (complex? . g$25169) (char? . g$25168) (char>? . g$25167) (char>=? . g$25166) (char=? . g$25165) (char<? . g$25164) (char<=? . g$25163) (char->integer . g$25162) (ceiling . g$25161) (call-with-values . g$25160) (call/cc . g$25159) (call-with-current-continuation . g$25158) (cddddr . g$25157) (cdddar . g$25156) (cddadr . g$25155) (cddaar . g$25154) (cdaddr . g$25153) (cdadar . g$25152) (cdaadr . g$25151) (cdaaar . g$25150) (cadddr . g$25149) (caddar . g$25148) (cadadr . g$25147) (cadaar . g$25146) (caaddr . g$25145) (caadar . g$25144) (caaadr . g$25143) (caaaar . g$25142) (cdddr . g$25141) (cddar . g$25140) (cdadr . g$25139) (cdaar . g$25138) (caddr . g$25137) (cadar . g$25136) (caadr . g$25135) (caaar . g$25134) (cddr . g$25133) (cdar . g$25132) (cadr . g$25131) (caar . g$25130) (cdr . g$25129) (car . g$25128) (boolean? . g$25127) (boolean=? . g$25126) (atan . g$25125) (assertion-violation . g$25124) (asin . g$25123) (apply . g$25122) (append . g$25121) (angle . g$25120) (acos . g$25119) (abs . g$25118) (/ . g$25117) (* . g$25116) (- . g$25115) (+ . g$25114) (>= . g$25113) (> . g$25112) (= . g$25111) (<= . g$25110) (< . g$25109) (let*-values . g$25108) (&no-nans . g$25107) (&no-infinities . g$25106) (&i/o-encoding . g$25105) (&i/o-decoding . g$25104) (&i/o-port . g$25103) (&i/o-file-does-not-exist . g$25102) (&i/o-file-already-exists . g$25101) (&i/o-file-is-read-only . g$25100) (&i/o-file-protection . g$25099) (&i/o-filename . g$25098) (&i/o-invalid-position . g$25097) (&i/o-write . g$25096) (&i/o-read . g$25095) (&i/o . g$25094) (&undefined . g$25093) (&syntax . g$25092) (&lexical . g$25091) (&who . g$25088) (&irritants . g$25087) (&assertion . g$25086) (&violation . g$25085) (&error . g$25084) (&serious . g$25083) (&warning . g$25082) (&message . g$25081) (&condition . g$25080) (define-condition-type . g$25079) (define-enumeration . g$25078) (define-record-type . g$25077) (parent-rtd . g$25076) (nongenerative . g$25075) (opaque . g$25074) (sealed . g$25073) (protocol . g$25072) (parent . g$25071) (immutable . g$25070) (mutable . g$25069) (fields . g$25068) (error-handling-mode . g$25067) (file-options . g$25066) (buffer-mode . g$25065) (eol-style . g$25064) (guard . g$25063) (unsyntax-splicing . g$25060) (unsyntax . g$25059) (unquote-splicing . g$25058) (unquote . g$25057) (_ . g$25056) (else . g$25055) (=> . g$25054) (... . g$25053) (assert . g$25052) (endianness . g$25051) (or . g$25048) (and . g$25047) (do . g$25046) (cond . g$25045) (let* . g$25044) (let . g$25043) (identifier-syntax . g$25042) (with-syntax . g$25041) (quasisyntax . g$25040) (quasiquote . g$25039) (syntax-rules . g$25038) (record-constructor-descriptor . g$25035) (record-type-descriptor . g$25034) (let-values . g$25033) (case . g$25032) (unless . g$25030) (when . g$25029) (if . g$25028) (letrec* . g$25027) (letrec . g$25026) (case-lambda . g$25024) (lambda . g$25023) (syntax . g$25022) (syntax-case . g$25021) (quote . g$25020) (letrec-syntax . g$25018) (let-syntax . g$25017) (set! . g$25016) (begin . g$25014) (define-syntax . g$25012) (define . g$25011)) '() values values '#t) (g$g$install-library$13963$14262 'g$25712 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g$25535) (quotient . g$25534) (null-environment . g$15297) (remainder . g$25533) (modulo . g$25532) (inexact->exact . g$25531) (force . g$25530) (exact->inexact . g$25529) (delay . g$25050)) '() values values '#t) (g$g$install-library$13963$14262 'g$25713 '(rnrs control) '(6) '() '() '() '((do . g$25046) (unless . g$25030) (when . g$25029) (case-lambda . g$25024)) '() values values '#t) (g$g$install-library$13963$14262 'g$25714 '(rnrs eval) '(6) '() '() '() '((eval . g$15303) (environment . g$15295)) '() values values '#t) (g$g$install-library$13963$14262 'g$25715 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$25524) (set-car! . g$25523)) '() values values '#t) (g$g$install-library$13963$14262 'g$25716 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$25526) (string-set! . g$25525)) '() values values '#t) (g$g$install-library$13963$14262 'g$25717 '(rnrs programs) '(6) '() '() '() '((exit . g$25528) (command-line . g$25527)) '() values values '#t) (g$g$install-library$13963$14262 'g$25718 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$14732) (identifier? . g$15325) (generate-temporaries . g$15317) (free-identifier=? . g$15319) (syntax->datum . g$15329) (datum->syntax . g$15327) (bound-identifier=? . g$15321) (syntax-violation . g$25473) (unsyntax-splicing . g$25060) (unsyntax . g$25059) (_ . g$25056) (... . g$25053) (with-syntax . g$25041) (quasisyntax . g$25040) (syntax . g$25022) (syntax-case . g$25021)) '() values values '#t) (g$g$install-library$13963$14262 'g$25719 '(rnrs files) '(6) '() '() '() '((delete-file . g$25646) (file-exists? . g$25645) (make-i/o-write-error . g$25584) (make-i/o-read-error . g$25583) (make-i/o-port-error . g$25582) (make-i/o-invalid-position-error . g$25581) (make-i/o-filename-error . g$25580) (make-i/o-file-protection-error . g$25579) (make-i/o-file-is-read-only-error . g$25578) (make-i/o-file-does-not-exist-error . g$25577) (make-i/o-file-already-exists-error . g$25576) (make-i/o-error . g$25575) (i/o-write-error? . g$25563) (i/o-read-error? . g$25562) (i/o-port-error? . g$25561) (i/o-invalid-position-error? . g$25560) (i/o-filename-error? . g$25559) (i/o-file-protection-error? . g$25558) (i/o-file-is-read-only-error? . g$25557) (i/o-file-does-not-exist-error? . g$25556) (i/o-file-already-exists-error? . g$25555) (i/o-error? . g$25554) (i/o-error-port . g$25553) (i/o-error-filename . g$25552) (&i/o-port . g$25103) (&i/o-file-does-not-exist . g$25102) (&i/o-file-already-exists . g$25101) (&i/o-file-is-read-only . g$25100) (&i/o-file-protection . g$25099) (&i/o-filename . g$25098) (&i/o-invalid-position . g$25097) (&i/o-write . g$25096) (&i/o-read . g$25095) (&i/o . g$25094)) '() values values '#t) (g$g$install-library$13963$14262 'g$25720 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$25644) (vector-sort . g$25643) (list-sort . g$25642)) '() values values '#t) (g$g$install-library$13963$14262 'g$25721 '(rnrs base) '(6) '() '() '() '((zero? . g$25270) (vector? . g$25269) (vector-set! . g$25268) (vector-ref . g$25267) (vector-map . g$25266) (vector-length . g$25265) (vector-for-each . g$25264) (vector-fill! . g$25263) (vector->list . g$25262) (vector . g$25261) (values . g$25260) (truncate . g$25259) (tan . g$25258) (symbol? . g$25257) (symbol=? . g$25256) (symbol->string . g$25255) (substring . g$25254) (string? . g$25253) (string>? . g$25252) (string>=? . g$25251) (string=? . g$25250) (string<? . g$25249) (string<=? . g$25248) (string-ref . g$25247) (string-length . g$25246) (string-for-each . g$25245) (string-copy . g$25244) (string-append . g$25243) (string->symbol . g$25242) (string->number . g$25241) (string->list . g$25240) (string . g$25239) (sqrt . g$25238) (sin . g$25237) (round . g$25236) (reverse . g$25235) (real? . g$25234) (real-valued? . g$25233) (real-part . g$25232) (rationalize . g$25231) (rational? . g$25230) (rational-valued? . g$25229) (procedure? . g$25228) (positive? . g$25227) (pair? . g$25226) (odd? . g$25225) (numerator . g$25224) (number? . g$25223) (number->string . g$25222) (null? . g$25221) (not . g$25220) (negative? . g$25219) (nan? . g$25218) (min . g$25217) (max . g$25216) (map . g$25215) (make-vector . g$25214) (make-string . g$25213) (make-rectangular . g$25212) (make-polar . g$25211) (magnitude . g$25210) (log . g$25209) (list? . g$25208) (list-tail . g$25207) (list-ref . g$25206) (list->vector . g$25205) (list->string . g$25204) (list . g$25203) (length . g$25202) (lcm . g$25201) (integer? . g$25200) (integer-valued? . g$25199) (integer->char . g$25198) (infinite? . g$25197) (inexact? . g$25196) (inexact . g$25195) (imag-part . g$25194) (gcd . g$25193) (for-each . g$25192) (floor . g$25191) (finite? . g$25190) (expt . g$25189) (exp . g$25188) (exact? . g$25187) (exact-integer-sqrt . g$25186) (exact . g$25185) (even? . g$25184) (error . g$25183) (eqv? . g$25182) (equal? . g$25181) (eq? . g$25180) (dynamic-wind . g$25179) (div0-and-mod0 . g$25178) (mod0 . g$25177) (div0 . g$25176) (div-and-mod . g$25175) (mod . g$25174) (div . g$25173) (denominator . g$25172) (cos . g$25171) (cons . g$25170) (complex? . g$25169) (char? . g$25168) (char>? . g$25167) (char>=? . g$25166) (char=? . g$25165) (char<? . g$25164) (char<=? . g$25163) (char->integer . g$25162) (ceiling . g$25161) (call-with-values . g$25160) (call/cc . g$25159) (call-with-current-continuation . g$25158) (cddddr . g$25157) (cdddar . g$25156) (cddadr . g$25155) (cddaar . g$25154) (cdaddr . g$25153) (cdadar . g$25152) (cdaadr . g$25151) (cdaaar . g$25150) (cadddr . g$25149) (caddar . g$25148) (cadadr . g$25147) (cadaar . g$25146) (caaddr . g$25145) (caadar . g$25144) (caaadr . g$25143) (caaaar . g$25142) (cdddr . g$25141) (cddar . g$25140) (cdadr . g$25139) (cdaar . g$25138) (caddr . g$25137) (cadar . g$25136) (caadr . g$25135) (caaar . g$25134) (cddr . g$25133) (cdar . g$25132) (cadr . g$25131) (caar . g$25130) (cdr . g$25129) (car . g$25128) (boolean? . g$25127) (boolean=? . g$25126) (atan . g$25125) (assertion-violation . g$25124) (asin . g$25123) (apply . g$25122) (append . g$25121) (angle . g$25120) (acos . g$25119) (abs . g$25118) (/ . g$25117) (* . g$25116) (- . g$25115) (+ . g$25114) (>= . g$25113) (> . g$25112) (= . g$25111) (<= . g$25110) (< . g$25109) (let*-values . g$25108) (unquote-splicing . g$25058) (unquote . g$25057) (_ . g$25056) (else . g$25055) (=> . g$25054) (... . g$25053) (assert . g$25052) (or . g$25048) (and . g$25047) (cond . g$25045) (let* . g$25044) (let . g$25043) (identifier-syntax . g$25042) (quasiquote . g$25039) (syntax-rules . g$25038) (let-values . g$25033) (case . g$25032) (if . g$25028) (letrec* . g$25027) (letrec . g$25026) (lambda . g$25023) (quote . g$25020) (letrec-syntax . g$25018) (let-syntax . g$25017) (set! . g$25016) (begin . g$25014) (define-syntax . g$25012) (define . g$25011)) '() values values '#t) (g$g$install-library$13963$14262 'g$25722 '(rnrs lists) '(6) '() '() '() '((remove . g$25522) (remv . g$25521) (remp . g$25520) (remq . g$25519) (partition . g$25518) (memv . g$25517) (memq . g$25516) (memp . g$25515) (member . g$25514) (exists . g$25513) (for-all . g$25512) (fold-right . g$25511) (fold-left . g$25510) (find . g$25509) (filter . g$25508) (cons* . g$25507) (assv . g$25506) (assq . g$25505) (assp . g$25504) (assoc . g$25503)) '() values values '#t) (g$g$install-library$13963$14262 'g$25723 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g$25641) (call-with-input-file . g$25640) (write-char . g$25639) (write . g$25638) (with-output-to-file . g$25637) (with-input-from-file . g$25636) (read-char . g$25635) (read . g$25634) (peek-char . g$25633) (open-output-file . g$25632) (open-input-file . g$25631) (newline . g$25630) (display . g$25629) (close-output-port . g$25628) (close-input-port . g$25627) (eof-object? . g$25626) (eof-object . g$25625) (current-error-port . g$25624) (current-output-port . g$25623) (current-input-port . g$25622) (output-port? . g$25621) (input-port? . g$25620) (make-i/o-write-error . g$25584) (make-i/o-read-error . g$25583) (make-i/o-port-error . g$25582) (make-i/o-invalid-position-error . g$25581) (make-i/o-filename-error . g$25580) (make-i/o-file-protection-error . g$25579) (make-i/o-file-is-read-only-error . g$25578) (make-i/o-file-does-not-exist-error . g$25577) (make-i/o-file-already-exists-error . g$25576) (make-i/o-error . g$25575) (i/o-write-error? . g$25563) (i/o-read-error? . g$25562) (i/o-port-error? . g$25561) (i/o-invalid-position-error? . g$25560) (i/o-filename-error? . g$25559) (i/o-file-protection-error? . g$25558) (i/o-file-is-read-only-error? . g$25557) (i/o-file-does-not-exist-error? . g$25556) (i/o-file-already-exists-error? . g$25555) (i/o-error? . g$25554) (i/o-error-port . g$25553) (i/o-error-filename . g$25552) (&i/o-port . g$25103) (&i/o-file-does-not-exist . g$25102) (&i/o-file-already-exists . g$25101) (&i/o-file-is-read-only . g$25100) (&i/o-file-protection . g$25099) (&i/o-filename . g$25098) (&i/o-invalid-position . g$25097) (&i/o-write . g$25096) (&i/o-read . g$25095) (&i/o . g$25094)) '() values values '#t) (g$g$install-library$13963$14262 'g$25724 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$25566) (utf32->string . g$25441) (utf16->string . g$25440) (utf8->string . g$25439) (uint-list->bytevector . g$25438) (u8-list->bytevector . g$25437) (string->utf8 . g$25436) (string->utf32 . g$25435) (string->utf16 . g$25434) (sint-list->bytevector . g$25433) (native-endianness . g$25432) (bytevector? . g$25431) (bytevector=? . g$25430) (bytevector-uint-set! . g$25429) (bytevector-uint-ref . g$25428) (bytevector-u8-set! . g$25427) (bytevector-u8-ref . g$25426) (bytevector-u64-set! . g$25425) (bytevector-u64-ref . g$25424) (bytevector-u64-native-set! . g$25423) (bytevector-u64-native-ref . g$25422) (bytevector-u32-set! . g$25421) (bytevector-u32-ref . g$25420) (bytevector-u32-native-set! . g$25419) (bytevector-u32-native-ref . g$25418) (bytevector-u16-set! . g$25417) (bytevector-u16-ref . g$25416) (bytevector-u16-native-set! . g$25415) (bytevector-u16-native-ref . g$25414) (bytevector-sint-set! . g$25413) (bytevector-sint-ref . g$25412) (bytevector-s8-set! . g$25411) (bytevector-s8-ref . g$25410) (bytevector-s64-set! . g$25409) (bytevector-s64-ref . g$25408) (bytevector-s64-native-set! . g$25407) (bytevector-s64-native-ref . g$25406) (bytevector-s32-set! . g$25405) (bytevector-s32-ref . g$25404) (bytevector-s32-native-set! . g$25403) (bytevector-s32-native-ref . g$25402) (bytevector-s16-set! . g$25401) (bytevector-s16-ref . g$25400) (bytevector-s16-native-set! . g$25399) (bytevector-s16-native-ref . g$25398) (bytevector-length . g$25397) (bytevector-ieee-single-set! . g$25396) (bytevector-ieee-single-ref . g$25395) (bytevector-ieee-single-native-set! . g$25394) (bytevector-ieee-single-native-ref . g$25393) (bytevector-ieee-double-set! . g$25392) (bytevector-ieee-double-ref . g$25391) (bytevector-ieee-double-native-set! . g$25390) (bytevector-ieee-double-native-ref . g$25389) (bytevector-fill! . g$25388) (bytevector-copy! . g$25387) (bytevector-copy . g$25386) (bytevector->uint-list . g$25385) (bytevector->u8-list . g$25384) (bytevector->sint-list . g$25383) (endianness . g$25051)) '() values values '#t) (g$g$install-library$13963$14262 'g$25725 '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$25692) (string-titlecase . g$25691) (string-normalize-nfkd . g$25690) (string-normalize-nfkc . g$25689) (string-normalize-nfd . g$25688) (string-normalize-nfc . g$25687) (string-foldcase . g$25686) (string-downcase . g$25685) (string-ci>? . g$25684) (string-ci>=? . g$25683) (string-ci=? . g$25682) (string-ci<? . g$25681) (string-ci<=? . g$25680) (char-whitespace? . g$25679) (char-upper-case? . g$25678) (char-title-case? . g$25677) (char-numeric? . g$25676) (char-lower-case? . g$25675) (char-general-category . g$25674) (char-upcase . g$25673) (char-titlecase . g$25672) (char-foldcase . g$25671) (char-downcase . g$25670) (char-ci>? . g$25669) (char-ci>=? . g$25668) (char-ci=? . g$25667) (char-ci<? . g$25666) (char-ci<=? . g$25665) (char-alphabetic? . g$25664)) '() values values '#t) (g$g$install-library$13963$14262 'g$25726 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$25496) (raise-continuable . g$25495) (raise . g$25494) (guard . g$25063) (else . g$25055) (=> . g$25054)) '() values values '#t) (g$g$install-library$13963$14262 'g$25727 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$25287) (bitwise-reverse-bit-field . g$25286) (bitwise-length . g$25285) (bitwise-if . g$25284) (bitwise-first-bit-set . g$25283) (bitwise-copy-bit-field . g$25282) (bitwise-copy-bit . g$25281) (bitwise-bit-set? . g$25280) (bitwise-bit-field . g$25279) (bitwise-bit-count . g$25278) (bitwise-xor . g$25277) (bitwise-ior . g$25276) (bitwise-and . g$25275) (bitwise-not . g$25274) (bitwise-arithmetic-shift-right . g$25273) (bitwise-arithmetic-shift-left . g$25272) (bitwise-arithmetic-shift . g$25271)) '() values values '#t) (g$g$install-library$13963$14262 'g$25728 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$25332) (fxxor . g$25331) (fxrotate-bit-field . g$25330) (fxreverse-bit-field . g$25329) (fxpositive? . g$25328) (fxodd? . g$25327) (fxnot . g$25326) (fxnegative? . g$25325) (fxmod0 . g$25324) (fxmod . g$25323) (fxmin . g$25322) (fxmax . g$25321) (fxlength . g$25320) (fxior . g$25319) (fxif . g$25318) (fxfirst-bit-set . g$25317) (fxeven? . g$25316) (fxdiv0-and-mod0 . g$25315) (fxdiv0 . g$25314) (fxdiv-and-mod . g$25313) (fxdiv . g$25312) (fxcopy-bit-field . g$25311) (fxcopy-bit . g$25310) (fxbit-set? . g$25309) (fxbit-field . g$25308) (fxbit-count . g$25307) (fxarithmetic-shift-right . g$25306) (fxarithmetic-shift-left . g$25305) (fxarithmetic-shift . g$25304) (fxand . g$25303) (fx>? . g$25302) (fx>=? . g$25301) (fx=? . g$25300) (fx<? . g$25299) (fx<=? . g$25298) (fx-/carry . g$25297) (fx- . g$25296) (fx+/carry . g$25295) (fx+ . g$25294) (fx*/carry . g$25293) (fx* . g$25292) (greatest-fixnum . g$25291) (least-fixnum . g$25290) (fixnum-width . g$25289) (fixnum? . g$25288)) '() values values '#t) (g$g$install-library$13963$14262 'g$25729 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$25382) (no-infinities-violation? . g$25381) (make-no-nans-violation . g$25380) (make-no-infinities-violation . g$25379) (real->flonum . g$25378) (flzero? . g$25377) (fltruncate . g$25376) (fltan . g$25375) (flsqrt . g$25374) (flsin . g$25373) (flround . g$25372) (flpositive? . g$25371) (flonum? . g$25370) (flodd? . g$25369) (flnumerator . g$25368) (flnegative? . g$25367) (flnan? . g$25366) (flmod0 . g$25365) (flmod . g$25364) (flmin . g$25363) (flmax . g$25362) (fllog . g$25361) (flinteger? . g$25360) (flinfinite? . g$25359) (flfloor . g$25358) (flfinite? . g$25357) (flexpt . g$25356) (flexp . g$25355) (fleven? . g$25354) (fldiv0-and-mod0 . g$25353) (fldiv0 . g$25352) (fldiv-and-mod . g$25351) (fldiv . g$25350) (fldenominator . g$25349) (flcos . g$25348) (flceiling . g$25347) (flatan . g$25346) (flasin . g$25345) (flacos . g$25344) (flabs . g$25343) (fl>? . g$25342) (fl>=? . g$25341) (fl=? . g$25340) (fl<? . g$25339) (fl<=? . g$25338) (fl/ . g$25337) (fl- . g$25336) (fl+ . g$25335) (fl* . g$25334) (fixnum->flonum . g$25333) (&no-nans . g$25107) (&no-infinities . g$25106)) '() values values '#t) (g$g$install-library$13963$14262 'g$25730 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$13448) (string-ci-hash . g$13446) (string-hash . g$13444) (equal-hash . g$13442) (hashtable-equivalence-function . g$13436) (make-hashtable . g$13412) (hashtable-hash-function . g$13438) (make-eqv-hashtable . g$13410) (make-eq-hashtable . g$13408) (hashtable? . g$13414) (hashtable-update! . g$13426) (hashtable-size . g$13416) (hashtable-set! . g$13420) (hashtable-ref . g$13418) (hashtable-mutable? . g$13440) (hashtable-keys . g$13432) (hashtable-entries . g$13434) (hashtable-delete! . g$13422) (hashtable-copy . g$13428) (hashtable-contains? . g$13424) (hashtable-clear! . g$13430)) '() values values '#t) (g$g$install-library$13963$14262 'g$25731 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$25626) (eof-object . g$25625) (current-error-port . g$25624) (current-output-port . g$25623) (current-input-port . g$25622) (output-port? . g$25621) (input-port? . g$25620) (utf-8-codec . g$25619) (utf-16-codec . g$25618) (transcoder-error-handling-mode . g$25617) (transcoder-eol-style . g$25616) (transcoder-codec . g$25615) (transcoded-port . g$25614) (textual-port? . g$25613) (string->bytevector . g$25612) (standard-output-port . g$25611) (standard-input-port . g$25610) (standard-error-port . g$25609) (set-port-position! . g$25608) (put-u8 . g$25607) (put-string . g$25606) (put-datum . g$25605) (put-char . g$25604) (put-bytevector . g$25603) (port? . g$25602) (port-transcoder . g$25601) (port-position . g$25600) (port-has-set-port-position!? . g$25599) (port-has-port-position? . g$25598) (port-eof? . g$25597) (output-port-buffer-mode . g$25596) (open-string-output-port . g$25595) (open-string-input-port . g$25594) (open-file-output-port . g$25593) (open-file-input/output-port . g$25592) (open-file-input-port . g$25591) (open-bytevector-output-port . g$25590) (open-bytevector-input-port . g$25589) (native-transcoder . g$25588) (native-eol-style . g$25587) (make-transcoder . g$25586) (latin-1-codec . g$25585) (make-i/o-write-error . g$25584) (make-i/o-read-error . g$25583) (make-i/o-port-error . g$25582) (make-i/o-invalid-position-error . g$25581) (make-i/o-filename-error . g$25580) (make-i/o-file-protection-error . g$25579) (make-i/o-file-is-read-only-error . g$25578) (make-i/o-file-does-not-exist-error . g$25577) (make-i/o-file-already-exists-error . g$25576) (make-i/o-error . g$25575) (make-i/o-encoding-error . g$25574) (make-i/o-decoding-error . g$25573) (make-custom-textual-output-port . g$25572) (make-custom-textual-input/output-port . g$25571) (make-custom-textual-input-port . g$25570) (make-custom-binary-output-port . g$25569) (make-custom-binary-input/output-port . g$25568) (make-custom-binary-input-port . g$25567) (lookahead-u8 . g$25565) (lookahead-char . g$25564) (i/o-write-error? . g$25563) (i/o-read-error? . g$25562) (i/o-port-error? . g$25561) (i/o-invalid-position-error? . g$25560) (i/o-filename-error? . g$25559) (i/o-file-protection-error? . g$25558) (i/o-file-is-read-only-error? . g$25557) (i/o-file-does-not-exist-error? . g$25556) (i/o-file-already-exists-error? . g$25555) (i/o-error? . g$25554) (i/o-error-port . g$25553) (i/o-error-filename . g$25552) (i/o-encoding-error? . g$25551) (i/o-encoding-error-char . g$25550) (i/o-decoding-error? . g$25549) (get-u8 . g$25548) (get-string-n! . g$25547) (get-string-n . g$25546) (get-string-all . g$25545) (get-line . g$25544) (get-datum . g$25543) (get-char . g$25542) (get-bytevector-some . g$25541) (get-bytevector-n! . g$25540) (get-bytevector-n . g$25539) (get-bytevector-all . g$25538) (flush-output-port . g$25537) (close-port . g$25536) (call-with-string-output-port . g$25502) (call-with-port . g$25501) (call-with-bytevector-output-port . g$25500) (bytevector->string . g$25499) (buffer-mode? . g$25498) (binary-port? . g$25497) (&i/o-encoding . g$25105) (&i/o-decoding . g$25104) (&i/o-port . g$25103) (&i/o-file-does-not-exist . g$25102) (&i/o-file-already-exists . g$25101) (&i/o-file-is-read-only . g$25100) (&i/o-file-protection . g$25099) (&i/o-filename . g$25098) (&i/o-invalid-position . g$25097) (&i/o-write . g$25096) (&i/o-read . g$25095) (&i/o . g$25094) (error-handling-mode . g$25067) (file-options . g$25066) (buffer-mode . g$25065) (eol-style . g$25064)) '() values values '#t) (g$g$install-library$13963$14262 'g$25732 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$25493) (enum-set=? . g$25492) (enum-set-universe . g$25491) (enum-set-union . g$25490) (enum-set-subset? . g$25489) (enum-set-projection . g$25488) (enum-set-member? . g$25487) (enum-set-intersection . g$25486) (enum-set-indexer . g$25485) (enum-set-difference . g$25484) (enum-set-constructor . g$25483) (enum-set-complement . g$25482) (enum-set->list . g$25481) (define-enumeration . g$25078)) '() values values '#t) (g$g$install-library$13963$14262 'g$25733 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$25480) (warning? . g$25479) (violation? . g$25478) (undefined-violation? . g$25477) (syntax-violation? . g$25476) (syntax-violation-subform . g$25475) (syntax-violation-form . g$25474) (syntax-violation . g$25473) (simple-conditions . g$25472) (serious-condition? . g$25471) (non-continuable-violation? . g$25470) (&non-continuable . g$25469) (message-condition? . g$25468) (make-who-condition . g$25467) (make-warning . g$25466) (make-violation . g$25465) (make-undefined-violation . g$25464) (make-syntax-violation . g$25463) (make-serious-condition . g$25462) (make-non-continuable-violation . g$25461) (make-message-condition . g$25460) (make-lexical-violation . g$25459) (make-irritants-condition . g$25458) (make-implementation-restriction-violation . g$25457) (make-error . g$25456) (make-assertion-violation . g$25455) (lexical-violation? . g$25454) (irritants-condition? . g$25453) (implementation-restriction-violation? . g$25452) (&implementation-restriction . g$25451) (error? . g$25450) (condition-who . g$25449) (condition-predicate . g$25448) (condition-message . g$25447) (condition-irritants . g$25446) (condition-accessor . g$25445) (condition . g$25444) (assertion-violation? . g$25443) (condition? . g$25442) (&undefined . g$25093) (&syntax . g$25092) (&lexical . g$25091) (&who . g$25088) (&irritants . g$25087) (&assertion . g$25086) (&violation . g$25085) (&error . g$25084) (&serious . g$25083) (&warning . g$25082) (&message . g$25081) (&condition . g$25080) (define-condition-type . g$25079)) '() values values '#t) (g$g$install-library$13963$14262 'g$25734 '(rnrs records inspection) '(6) '() '() '() '((record? . g$25656) (record-type-uid . g$25655) (record-type-sealed? . g$25654) (record-type-parent . g$25653) (record-type-opaque? . g$25652) (record-type-name . g$25651) (record-type-generative? . g$25650) (record-type-field-names . g$25649) (record-rtd . g$25648) (record-field-mutable? . g$25647)) '() values values '#t) (g$g$install-library$13963$14262 'g$25735 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$25663) (record-predicate . g$25662) (record-mutator . g$25661) (record-constructor . g$25660) (record-accessor . g$25659) (make-record-type-descriptor . g$25658) (make-record-constructor-descriptor . g$25657)) '() values values '#t) (g$g$install-library$13963$14262 'g$25736 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$25077) (parent-rtd . g$25076) (nongenerative . g$25075) (opaque . g$25074) (sealed . g$25073) (protocol . g$25072) (parent . g$25071) (immutable . g$25070) (mutable . g$25069) (fields . g$25068) (record-constructor-descriptor . g$25035) (record-type-descriptor . g$25034)) '() values values '#t) (g$g$install-library$13963$14262 'g$25737 '(psyntax system $all) '() '() '() '() '((clr-call-internal . g$25703) (clr-new-internal . g$25702) (syntax-error . g$15323) (syntax-dispatch . g$15190) (pretty-print . g$25701) (eval-core . g$25700) (set-symbol-value! . g$25699) (symbol-value . g$25698) (gensym . g$25697) (void . g$25696) (load . g$25695) (interaction-environment . g$25694) (char-ready? . g$25693) (string-upcase . g$25692) (string-titlecase . g$25691) (string-normalize-nfkd . g$25690) (string-normalize-nfkc . g$25689) (string-normalize-nfd . g$25688) (string-normalize-nfc . g$25687) (string-foldcase . g$25686) (string-downcase . g$25685) (string-ci>? . g$25684) (string-ci>=? . g$25683) (string-ci=? . g$25682) (string-ci<? . g$25681) (string-ci<=? . g$25680) (char-whitespace? . g$25679) (char-upper-case? . g$25678) (char-title-case? . g$25677) (char-numeric? . g$25676) (char-lower-case? . g$25675) (char-general-category . g$25674) (char-upcase . g$25673) (char-titlecase . g$25672) (char-foldcase . g$25671) (char-downcase . g$25670) (char-ci>? . g$25669) (char-ci>=? . g$25668) (char-ci=? . g$25667) (char-ci<? . g$25666) (char-ci<=? . g$25665) (char-alphabetic? . g$25664) (make-variable-transformer . g$14732) (identifier? . g$15325) (generate-temporaries . g$15317) (free-identifier=? . g$15319) (syntax->datum . g$15329) (datum->syntax . g$15327) (bound-identifier=? . g$15321) (record-type-descriptor? . g$25663) (record-predicate . g$25662) (record-mutator . g$25661) (record-constructor . g$25660) (record-accessor . g$25659) (make-record-type-descriptor . g$25658) (make-record-constructor-descriptor . g$25657) (record? . g$25656) (record-type-uid . g$25655) (record-type-sealed? . g$25654) (record-type-parent . g$25653) (record-type-opaque? . g$25652) (record-type-name . g$25651) (record-type-generative? . g$25650) (record-type-field-names . g$25649) (record-rtd . g$25648) (record-field-mutable? . g$25647) (delete-file . g$25646) (file-exists? . g$25645) (vector-sort! . g$25644) (vector-sort . g$25643) (list-sort . g$25642) (symbol-hash . g$13448) (string-ci-hash . g$13446) (string-hash . g$13444) (equal-hash . g$13442) (hashtable-equivalence-function . g$13436) (make-hashtable . g$13412) (hashtable-hash-function . g$13438) (make-eqv-hashtable . g$13410) (make-eq-hashtable . g$13408) (hashtable? . g$13414) (hashtable-update! . g$13426) (hashtable-size . g$13416) (hashtable-set! . g$13420) (hashtable-ref . g$13418) (hashtable-mutable? . g$13440) (hashtable-keys . g$13432) (hashtable-entries . g$13434) (hashtable-delete! . g$13422) (hashtable-copy . g$13428) (hashtable-contains? . g$13424) (hashtable-clear! . g$13430) (call-with-output-file . g$25641) (call-with-input-file . g$25640) (write-char . g$25639) (write . g$25638) (with-output-to-file . g$25637) (with-input-from-file . g$25636) (read-char . g$25635) (read . g$25634) (peek-char . g$25633) (open-output-file . g$25632) (open-input-file . g$25631) (newline . g$25630) (display . g$25629) (close-output-port . g$25628) (close-input-port . g$25627) (eof-object? . g$25626) (eof-object . g$25625) (current-error-port . g$25624) (current-output-port . g$25623) (current-input-port . g$25622) (output-port? . g$25621) (input-port? . g$25620) (utf-8-codec . g$25619) (utf-16-codec . g$25618) (transcoder-error-handling-mode . g$25617) (transcoder-eol-style . g$25616) (transcoder-codec . g$25615) (transcoded-port . g$25614) (textual-port? . g$25613) (string->bytevector . g$25612) (standard-output-port . g$25611) (standard-input-port . g$25610) (standard-error-port . g$25609) (set-port-position! . g$25608) (put-u8 . g$25607) (put-string . g$25606) (put-datum . g$25605) (put-char . g$25604) (put-bytevector . g$25603) (port? . g$25602) (port-transcoder . g$25601) (port-position . g$25600) (port-has-set-port-position!? . g$25599) (port-has-port-position? . g$25598) (port-eof? . g$25597) (output-port-buffer-mode . g$25596) (open-string-output-port . g$25595) (open-string-input-port . g$25594) (open-file-output-port . g$25593) (open-file-input/output-port . g$25592) (open-file-input-port . g$25591) (open-bytevector-output-port . g$25590) (open-bytevector-input-port . g$25589) (native-transcoder . g$25588) (native-eol-style . g$25587) (make-transcoder . g$25586) (latin-1-codec . g$25585) (make-i/o-write-error . g$25584) (make-i/o-read-error . g$25583) (make-i/o-port-error . g$25582) (make-i/o-invalid-position-error . g$25581) (make-i/o-filename-error . g$25580) (make-i/o-file-protection-error . g$25579) (make-i/o-file-is-read-only-error . g$25578) (make-i/o-file-does-not-exist-error . g$25577) (make-i/o-file-already-exists-error . g$25576) (make-i/o-error . g$25575) (make-i/o-encoding-error . g$25574) (make-i/o-decoding-error . g$25573) (make-custom-textual-output-port . g$25572) (make-custom-textual-input/output-port . g$25571) (make-custom-textual-input-port . g$25570) (make-custom-binary-output-port . g$25569) (make-custom-binary-input/output-port . g$25568) (make-custom-binary-input-port . g$25567) (make-bytevector . g$25566) (lookahead-u8 . g$25565) (lookahead-char . g$25564) (i/o-write-error? . g$25563) (i/o-read-error? . g$25562) (i/o-port-error? . g$25561) (i/o-invalid-position-error? . g$25560) (i/o-filename-error? . g$25559) (i/o-file-protection-error? . g$25558) (i/o-file-is-read-only-error? . g$25557) (i/o-file-does-not-exist-error? . g$25556) (i/o-file-already-exists-error? . g$25555) (i/o-error? . g$25554) (i/o-error-port . g$25553) (i/o-error-filename . g$25552) (i/o-encoding-error? . g$25551) (i/o-encoding-error-char . g$25550) (i/o-decoding-error? . g$25549) (get-u8 . g$25548) (get-string-n! . g$25547) (get-string-n . g$25546) (get-string-all . g$25545) (get-line . g$25544) (get-datum . g$25543) (get-char . g$25542) (get-bytevector-some . g$25541) (get-bytevector-n! . g$25540) (get-bytevector-n . g$25539) (get-bytevector-all . g$25538) (flush-output-port . g$25537) (close-port . g$25536) (scheme-report-environment . g$25535) (quotient . g$25534) (null-environment . g$15297) (remainder . g$25533) (modulo . g$25532) (inexact->exact . g$25531) (force . g$25530) (exact->inexact . g$25529) (exit . g$25528) (command-line . g$25527) (string-fill! . g$25526) (string-set! . g$25525) (set-cdr! . g$25524) (set-car! . g$25523) (remove . g$25522) (remv . g$25521) (remp . g$25520) (remq . g$25519) (partition . g$25518) (memv . g$25517) (memq . g$25516) (memp . g$25515) (member . g$25514) (exists . g$25513) (for-all . g$25512) (fold-right . g$25511) (fold-left . g$25510) (find . g$25509) (filter . g$25508) (cons* . g$25507) (assv . g$25506) (assq . g$25505) (assp . g$25504) (assoc . g$25503) (call-with-string-output-port . g$25502) (call-with-port . g$25501) (call-with-bytevector-output-port . g$25500) (bytevector->string . g$25499) (buffer-mode? . g$25498) (binary-port? . g$25497) (with-exception-handler . g$25496) (raise-continuable . g$25495) (raise . g$25494) (eval . g$15303) (environment . g$15295) (make-enumeration . g$25493) (enum-set=? . g$25492) (enum-set-universe . g$25491) (enum-set-union . g$25490) (enum-set-subset? . g$25489) (enum-set-projection . g$25488) (enum-set-member? . g$25487) (enum-set-intersection . g$25486) (enum-set-indexer . g$25485) (enum-set-difference . g$25484) (enum-set-constructor . g$25483) (enum-set-complement . g$25482) (enum-set->list . g$25481) (who-condition? . g$25480) (warning? . g$25479) (violation? . g$25478) (undefined-violation? . g$25477) (syntax-violation? . g$25476) (syntax-violation-subform . g$25475) (syntax-violation-form . g$25474) (syntax-violation . g$25473) (simple-conditions . g$25472) (serious-condition? . g$25471) (non-continuable-violation? . g$25470) (&non-continuable . g$25469) (message-condition? . g$25468) (make-who-condition . g$25467) (make-warning . g$25466) (make-violation . g$25465) (make-undefined-violation . g$25464) (make-syntax-violation . g$25463) (make-serious-condition . g$25462) (make-non-continuable-violation . g$25461) (make-message-condition . g$25460) (make-lexical-violation . g$25459) (make-irritants-condition . g$25458) (make-implementation-restriction-violation . g$25457) (make-error . g$25456) (make-assertion-violation . g$25455) (lexical-violation? . g$25454) (irritants-condition? . g$25453) (implementation-restriction-violation? . g$25452) (&implementation-restriction . g$25451) (error? . g$25450) (condition-who . g$25449) (condition-predicate . g$25448) (condition-message . g$25447) (condition-irritants . g$25446) (condition-accessor . g$25445) (condition . g$25444) (assertion-violation? . g$25443) (condition? . g$25442) (utf32->string . g$25441) (utf16->string . g$25440) (utf8->string . g$25439) (uint-list->bytevector . g$25438) (u8-list->bytevector . g$25437) (string->utf8 . g$25436) (string->utf32 . g$25435) (string->utf16 . g$25434) (sint-list->bytevector . g$25433) (native-endianness . g$25432) (bytevector? . g$25431) (bytevector=? . g$25430) (bytevector-uint-set! . g$25429) (bytevector-uint-ref . g$25428) (bytevector-u8-set! . g$25427) (bytevector-u8-ref . g$25426) (bytevector-u64-set! . g$25425) (bytevector-u64-ref . g$25424) (bytevector-u64-native-set! . g$25423) (bytevector-u64-native-ref . g$25422) (bytevector-u32-set! . g$25421) (bytevector-u32-ref . g$25420) (bytevector-u32-native-set! . g$25419) (bytevector-u32-native-ref . g$25418) (bytevector-u16-set! . g$25417) (bytevector-u16-ref . g$25416) (bytevector-u16-native-set! . g$25415) (bytevector-u16-native-ref . g$25414) (bytevector-sint-set! . g$25413) (bytevector-sint-ref . g$25412) (bytevector-s8-set! . g$25411) (bytevector-s8-ref . g$25410) (bytevector-s64-set! . g$25409) (bytevector-s64-ref . g$25408) (bytevector-s64-native-set! . g$25407) (bytevector-s64-native-ref . g$25406) (bytevector-s32-set! . g$25405) (bytevector-s32-ref . g$25404) (bytevector-s32-native-set! . g$25403) (bytevector-s32-native-ref . g$25402) (bytevector-s16-set! . g$25401) (bytevector-s16-ref . g$25400) (bytevector-s16-native-set! . g$25399) (bytevector-s16-native-ref . g$25398) (bytevector-length . g$25397) (bytevector-ieee-single-set! . g$25396) (bytevector-ieee-single-ref . g$25395) (bytevector-ieee-single-native-set! . g$25394) (bytevector-ieee-single-native-ref . g$25393) (bytevector-ieee-double-set! . g$25392) (bytevector-ieee-double-ref . g$25391) (bytevector-ieee-double-native-set! . g$25390) (bytevector-ieee-double-native-ref . g$25389) (bytevector-fill! . g$25388) (bytevector-copy! . g$25387) (bytevector-copy . g$25386) (bytevector->uint-list . g$25385) (bytevector->u8-list . g$25384) (bytevector->sint-list . g$25383) (no-nans-violation? . g$25382) (no-infinities-violation? . g$25381) (make-no-nans-violation . g$25380) (make-no-infinities-violation . g$25379) (real->flonum . g$25378) (flzero? . g$25377) (fltruncate . g$25376) (fltan . g$25375) (flsqrt . g$25374) (flsin . g$25373) (flround . g$25372) (flpositive? . g$25371) (flonum? . g$25370) (flodd? . g$25369) (flnumerator . g$25368) (flnegative? . g$25367) (flnan? . g$25366) (flmod0 . g$25365) (flmod . g$25364) (flmin . g$25363) (flmax . g$25362) (fllog . g$25361) (flinteger? . g$25360) (flinfinite? . g$25359) (flfloor . g$25358) (flfinite? . g$25357) (flexpt . g$25356) (flexp . g$25355) (fleven? . g$25354) (fldiv0-and-mod0 . g$25353) (fldiv0 . g$25352) (fldiv-and-mod . g$25351) (fldiv . g$25350) (fldenominator . g$25349) (flcos . g$25348) (flceiling . g$25347) (flatan . g$25346) (flasin . g$25345) (flacos . g$25344) (flabs . g$25343) (fl>? . g$25342) (fl>=? . g$25341) (fl=? . g$25340) (fl<? . g$25339) (fl<=? . g$25338) (fl/ . g$25337) (fl- . g$25336) (fl+ . g$25335) (fl* . g$25334) (fixnum->flonum . g$25333) (fxzero? . g$25332) (fxxor . g$25331) (fxrotate-bit-field . g$25330) (fxreverse-bit-field . g$25329) (fxpositive? . g$25328) (fxodd? . g$25327) (fxnot . g$25326) (fxnegative? . g$25325) (fxmod0 . g$25324) (fxmod . g$25323) (fxmin . g$25322) (fxmax . g$25321) (fxlength . g$25320) (fxior . g$25319) (fxif . g$25318) (fxfirst-bit-set . g$25317) (fxeven? . g$25316) (fxdiv0-and-mod0 . g$25315) (fxdiv0 . g$25314) (fxdiv-and-mod . g$25313) (fxdiv . g$25312) (fxcopy-bit-field . g$25311) (fxcopy-bit . g$25310) (fxbit-set? . g$25309) (fxbit-field . g$25308) (fxbit-count . g$25307) (fxarithmetic-shift-right . g$25306) (fxarithmetic-shift-left . g$25305) (fxarithmetic-shift . g$25304) (fxand . g$25303) (fx>? . g$25302) (fx>=? . g$25301) (fx=? . g$25300) (fx<? . g$25299) (fx<=? . g$25298) (fx-/carry . g$25297) (fx- . g$25296) (fx+/carry . g$25295) (fx+ . g$25294) (fx*/carry . g$25293) (fx* . g$25292) (greatest-fixnum . g$25291) (least-fixnum . g$25290) (fixnum-width . g$25289) (fixnum? . g$25288) (bitwise-rotate-bit-field . g$25287) (bitwise-reverse-bit-field . g$25286) (bitwise-length . g$25285) (bitwise-if . g$25284) (bitwise-first-bit-set . g$25283) (bitwise-copy-bit-field . g$25282) (bitwise-copy-bit . g$25281) (bitwise-bit-set? . g$25280) (bitwise-bit-field . g$25279) (bitwise-bit-count . g$25278) (bitwise-xor . g$25277) (bitwise-ior . g$25276) (bitwise-and . g$25275) (bitwise-not . g$25274) (bitwise-arithmetic-shift-right . g$25273) (bitwise-arithmetic-shift-left . g$25272) (bitwise-arithmetic-shift . g$25271) (zero? . g$25270) (vector? . g$25269) (vector-set! . g$25268) (vector-ref . g$25267) (vector-map . g$25266) (vector-length . g$25265) (vector-for-each . g$25264) (vector-fill! . g$25263) (vector->list . g$25262) (vector . g$25261) (values . g$25260) (truncate . g$25259) (tan . g$25258) (symbol? . g$25257) (symbol=? . g$25256) (symbol->string . g$25255) (substring . g$25254) (string? . g$25253) (string>? . g$25252) (string>=? . g$25251) (string=? . g$25250) (string<? . g$25249) (string<=? . g$25248) (string-ref . g$25247) (string-length . g$25246) (string-for-each . g$25245) (string-copy . g$25244) (string-append . g$25243) (string->symbol . g$25242) (string->number . g$25241) (string->list . g$25240) (string . g$25239) (sqrt . g$25238) (sin . g$25237) (round . g$25236) (reverse . g$25235) (real? . g$25234) (real-valued? . g$25233) (real-part . g$25232) (rationalize . g$25231) (rational? . g$25230) (rational-valued? . g$25229) (procedure? . g$25228) (positive? . g$25227) (pair? . g$25226) (odd? . g$25225) (numerator . g$25224) (number? . g$25223) (number->string . g$25222) (null? . g$25221) (not . g$25220) (negative? . g$25219) (nan? . g$25218) (min . g$25217) (max . g$25216) (map . g$25215) (make-vector . g$25214) (make-string . g$25213) (make-rectangular . g$25212) (make-polar . g$25211) (magnitude . g$25210) (log . g$25209) (list? . g$25208) (list-tail . g$25207) (list-ref . g$25206) (list->vector . g$25205) (list->string . g$25204) (list . g$25203) (length . g$25202) (lcm . g$25201) (integer? . g$25200) (integer-valued? . g$25199) (integer->char . g$25198) (infinite? . g$25197) (inexact? . g$25196) (inexact . g$25195) (imag-part . g$25194) (gcd . g$25193) (for-each . g$25192) (floor . g$25191) (finite? . g$25190) (expt . g$25189) (exp . g$25188) (exact? . g$25187) (exact-integer-sqrt . g$25186) (exact . g$25185) (even? . g$25184) (error . g$25183) (eqv? . g$25182) (equal? . g$25181) (eq? . g$25180) (dynamic-wind . g$25179) (div0-and-mod0 . g$25178) (mod0 . g$25177) (div0 . g$25176) (div-and-mod . g$25175) (mod . g$25174) (div . g$25173) (denominator . g$25172) (cos . g$25171) (cons . g$25170) (complex? . g$25169) (char? . g$25168) (char>? . g$25167) (char>=? . g$25166) (char=? . g$25165) (char<? . g$25164) (char<=? . g$25163) (char->integer . g$25162) (ceiling . g$25161) (call-with-values . g$25160) (call/cc . g$25159) (call-with-current-continuation . g$25158) (cddddr . g$25157) (cdddar . g$25156) (cddadr . g$25155) (cddaar . g$25154) (cdaddr . g$25153) (cdadar . g$25152) (cdaadr . g$25151) (cdaaar . g$25150) (cadddr . g$25149) (caddar . g$25148) (cadadr . g$25147) (cadaar . g$25146) (caaddr . g$25145) (caadar . g$25144) (caaadr . g$25143) (caaaar . g$25142) (cdddr . g$25141) (cddar . g$25140) (cdadr . g$25139) (cdaar . g$25138) (caddr . g$25137) (cadar . g$25136) (caadr . g$25135) (caaar . g$25134) (cddr . g$25133) (cdar . g$25132) (cadr . g$25131) (caar . g$25130) (cdr . g$25129) (car . g$25128) (boolean? . g$25127) (boolean=? . g$25126) (atan . g$25125) (assertion-violation . g$25124) (asin . g$25123) (apply . g$25122) (append . g$25121) (angle . g$25120) (acos . g$25119) (abs . g$25118) (/ . g$25117) (* . g$25116) (- . g$25115) (+ . g$25114) (>= . g$25113) (> . g$25112) (= . g$25111) (<= . g$25110) (< . g$25109) (let*-values . g$25108) (&no-nans . g$25107) (&no-infinities . g$25106) (&i/o-encoding . g$25105) (&i/o-decoding . g$25104) (&i/o-port . g$25103) (&i/o-file-does-not-exist . g$25102) (&i/o-file-already-exists . g$25101) (&i/o-file-is-read-only . g$25100) (&i/o-file-protection . g$25099) (&i/o-filename . g$25098) (&i/o-invalid-position . g$25097) (&i/o-write . g$25096) (&i/o-read . g$25095) (&i/o . g$25094) (&undefined . g$25093) (&syntax . g$25092) (&lexical . g$25091) (&implementation . g$25090) (&non . g$25089) (&who . g$25088) (&irritants . g$25087) (&assertion . g$25086) (&violation . g$25085) (&error . g$25084) (&serious . g$25083) (&warning . g$25082) (&message . g$25081) (&condition . g$25080) (define-condition-type . g$25079) (define-enumeration . g$25078) (define-record-type . g$25077) (parent-rtd . g$25076) (nongenerative . g$25075) (opaque . g$25074) (sealed . g$25073) (protocol . g$25072) (parent . g$25071) (immutable . g$25070) (mutable . g$25069) (fields . g$25068) (error-handling-mode . g$25067) (file-options . g$25066) (buffer-mode . g$25065) (eol-style . g$25064) (guard . g$25063) (trace-define . g$25062) (trace-lambda . g$25061) (unsyntax-splicing . g$25060) (unsyntax . g$25059) (unquote-splicing . g$25058) (unquote . g$25057) (_ . g$25056) (else . g$25055) (=> . g$25054) (... . g$25053) (assert . g$25052) (endianness . g$25051) (delay . g$25050) (time . g$25049) (or . g$25048) (and . g$25047) (do . g$25046) (cond . g$25045) (let* . g$25044) (let . g$25043) (identifier-syntax . g$25042) (with-syntax . g$25041) (quasisyntax . g$25040) (quasiquote . g$25039) (syntax-rules . g$25038) (include . g$25037) (define-struct . g$25036) (record-constructor-descriptor . g$25035) (record-type-descriptor . g$25034) (let-values . g$25033) (case . g$25032) (parameterize . g$25031) (unless . g$25030) (when . g$25029) (if . g$25028) (letrec* . g$25027) (letrec . g$25026) (type-descriptor . g$25025) (case-lambda . g$25024) (lambda . g$25023) (syntax . g$25022) (syntax-case . g$25021) (quote . g$25020) (foreign-call . g$25019) (letrec-syntax . g$25018) (let-syntax . g$25017) (set! . g$25016) (import . g$25015) (begin . g$25014) (module . g$25013) (define-syntax . g$25012) (define . g$25011)) '((g$25703 core-prim . clr-call-internal) (g$25702 core-prim . clr-new-internal) (g$15323 core-prim . syntax-error) (g$15190 core-prim . syntax-dispatch) (g$25701 core-prim . pretty-print) (g$25700 core-prim . eval-core) (g$25699 core-prim . set-symbol-value!) (g$25698 core-prim . symbol-value) (g$25697 core-prim . gensym) (g$25696 core-prim . void) (g$25695 core-prim . load) (g$25694 core-prim . interaction-environment) (g$25693 core-prim . char-ready?) (g$25692 core-prim . string-upcase) (g$25691 core-prim . string-titlecase) (g$25690 core-prim . string-normalize-nfkd) (g$25689 core-prim . string-normalize-nfkc) (g$25688 core-prim . string-normalize-nfd) (g$25687 core-prim . string-normalize-nfc) (g$25686 core-prim . string-foldcase) (g$25685 core-prim . string-downcase) (g$25684 core-prim . string-ci>?) (g$25683 core-prim . string-ci>=?) (g$25682 core-prim . string-ci=?) (g$25681 core-prim . string-ci<?) (g$25680 core-prim . string-ci<=?) (g$25679 core-prim . char-whitespace?) (g$25678 core-prim . char-upper-case?) (g$25677 core-prim . char-title-case?) (g$25676 core-prim . char-numeric?) (g$25675 core-prim . char-lower-case?) (g$25674 core-prim . char-general-category) (g$25673 core-prim . char-upcase) (g$25672 core-prim . char-titlecase) (g$25671 core-prim . char-foldcase) (g$25670 core-prim . char-downcase) (g$25669 core-prim . char-ci>?) (g$25668 core-prim . char-ci>=?) (g$25667 core-prim . char-ci=?) (g$25666 core-prim . char-ci<?) (g$25665 core-prim . char-ci<=?) (g$25664 core-prim . char-alphabetic?) (g$14732 core-prim . make-variable-transformer) (g$15325 core-prim . identifier?) (g$15317 core-prim . generate-temporaries) (g$15319 core-prim . free-identifier=?) (g$15329 core-prim . syntax->datum) (g$15327 core-prim . datum->syntax) (g$15321 core-prim . bound-identifier=?) (g$25663 core-prim . record-type-descriptor?) (g$25662 core-prim . record-predicate) (g$25661 core-prim . record-mutator) (g$25660 core-prim . record-constructor) (g$25659 core-prim . record-accessor) (g$25658 core-prim . make-record-type-descriptor) (g$25657 core-prim . make-record-constructor-descriptor) (g$25656 core-prim . record?) (g$25655 core-prim . record-type-uid) (g$25654 core-prim . record-type-sealed?) (g$25653 core-prim . record-type-parent) (g$25652 core-prim . record-type-opaque?) (g$25651 core-prim . record-type-name) (g$25650 core-prim . record-type-generative?) (g$25649 core-prim . record-type-field-names) (g$25648 core-prim . record-rtd) (g$25647 core-prim . record-field-mutable?) (g$25646 core-prim . delete-file) (g$25645 core-prim . file-exists?) (g$25644 core-prim . vector-sort!) (g$25643 core-prim . vector-sort) (g$25642 core-prim . list-sort) (g$13448 core-prim . symbol-hash) (g$13446 core-prim . string-ci-hash) (g$13444 core-prim . string-hash) (g$13442 core-prim . equal-hash) (g$13436 core-prim . hashtable-equivalence-function) (g$13412 core-prim . make-hashtable) (g$13438 core-prim . hashtable-hash-function) (g$13410 core-prim . make-eqv-hashtable) (g$13408 core-prim . make-eq-hashtable) (g$13414 core-prim . hashtable?) (g$13426 core-prim . hashtable-update!) (g$13416 core-prim . hashtable-size) (g$13420 core-prim . hashtable-set!) (g$13418 core-prim . hashtable-ref) (g$13440 core-prim . hashtable-mutable?) (g$13432 core-prim . hashtable-keys) (g$13434 core-prim . hashtable-entries) (g$13422 core-prim . hashtable-delete!) (g$13428 core-prim . hashtable-copy) (g$13424 core-prim . hashtable-contains?) (g$13430 core-prim . hashtable-clear!) (g$25641 core-prim . call-with-output-file) (g$25640 core-prim . call-with-input-file) (g$25639 core-prim . write-char) (g$25638 core-prim . write) (g$25637 core-prim . with-output-to-file) (g$25636 core-prim . with-input-from-file) (g$25635 core-prim . read-char) (g$25634 core-prim . read) (g$25633 core-prim . peek-char) (g$25632 core-prim . open-output-file) (g$25631 core-prim . open-input-file) (g$25630 core-prim . newline) (g$25629 core-prim . display) (g$25628 core-prim . close-output-port) (g$25627 core-prim . close-input-port) (g$25626 core-prim . eof-object?) (g$25625 core-prim . eof-object) (g$25624 core-prim . current-error-port) (g$25623 core-prim . current-output-port) (g$25622 core-prim . current-input-port) (g$25621 core-prim . output-port?) (g$25620 core-prim . input-port?) (g$25619 core-prim . utf-8-codec) (g$25618 core-prim . utf-16-codec) (g$25617 core-prim . transcoder-error-handling-mode) (g$25616 core-prim . transcoder-eol-style) (g$25615 core-prim . transcoder-codec) (g$25614 core-prim . transcoded-port) (g$25613 core-prim . textual-port?) (g$25612 core-prim . string->bytevector) (g$25611 core-prim . standard-output-port) (g$25610 core-prim . standard-input-port) (g$25609 core-prim . standard-error-port) (g$25608 core-prim . set-port-position!) (g$25607 core-prim . put-u8) (g$25606 core-prim . put-string) (g$25605 core-prim . put-datum) (g$25604 core-prim . put-char) (g$25603 core-prim . put-bytevector) (g$25602 core-prim . port?) (g$25601 core-prim . port-transcoder) (g$25600 core-prim . port-position) (g$25599 core-prim . port-has-set-port-position!?) (g$25598 core-prim . port-has-port-position?) (g$25597 core-prim . port-eof?) (g$25596 core-prim . output-port-buffer-mode) (g$25595 core-prim . open-string-output-port) (g$25594 core-prim . open-string-input-port) (g$25593 core-prim . open-file-output-port) (g$25592 core-prim . open-file-input/output-port) (g$25591 core-prim . open-file-input-port) (g$25590 core-prim . open-bytevector-output-port) (g$25589 core-prim . open-bytevector-input-port) (g$25588 core-prim . native-transcoder) (g$25587 core-prim . native-eol-style) (g$25586 core-prim . make-transcoder) (g$25585 core-prim . latin-1-codec) (g$25584 core-prim . make-i/o-write-error) (g$25583 core-prim . make-i/o-read-error) (g$25582 core-prim . make-i/o-port-error) (g$25581 core-prim . make-i/o-invalid-position-error) (g$25580 core-prim . make-i/o-filename-error) (g$25579 core-prim . make-i/o-file-protection-error) (g$25578 core-prim . make-i/o-file-is-read-only-error) (g$25577 core-prim . make-i/o-file-does-not-exist-error) (g$25576 core-prim . make-i/o-file-already-exists-error) (g$25575 core-prim . make-i/o-error) (g$25574 core-prim . make-i/o-encoding-error) (g$25573 core-prim . make-i/o-decoding-error) (g$25572 core-prim . make-custom-textual-output-port) (g$25571 core-prim . make-custom-textual-input/output-port) (g$25570 core-prim . make-custom-textual-input-port) (g$25569 core-prim . make-custom-binary-output-port) (g$25568 core-prim . make-custom-binary-input/output-port) (g$25567 core-prim . make-custom-binary-input-port) (g$25566 core-prim . make-bytevector) (g$25565 core-prim . lookahead-u8) (g$25564 core-prim . lookahead-char) (g$25563 core-prim . i/o-write-error?) (g$25562 core-prim . i/o-read-error?) (g$25561 core-prim . i/o-port-error?) (g$25560 core-prim . i/o-invalid-position-error?) (g$25559 core-prim . i/o-filename-error?) (g$25558 core-prim . i/o-file-protection-error?) (g$25557 core-prim . i/o-file-is-read-only-error?) (g$25556 core-prim . i/o-file-does-not-exist-error?) (g$25555 core-prim . i/o-file-already-exists-error?) (g$25554 core-prim . i/o-error?) (g$25553 core-prim . i/o-error-port) (g$25552 core-prim . i/o-error-filename) (g$25551 core-prim . i/o-encoding-error?) (g$25550 core-prim . i/o-encoding-error-char) (g$25549 core-prim . i/o-decoding-error?) (g$25548 core-prim . get-u8) (g$25547 core-prim . get-string-n!) (g$25546 core-prim . get-string-n) (g$25545 core-prim . get-string-all) (g$25544 core-prim . get-line) (g$25543 core-prim . get-datum) (g$25542 core-prim . get-char) (g$25541 core-prim . get-bytevector-some) (g$25540 core-prim . get-bytevector-n!) (g$25539 core-prim . get-bytevector-n) (g$25538 core-prim . get-bytevector-all) (g$25537 core-prim . flush-output-port) (g$25536 core-prim . close-port) (g$25535 core-prim . scheme-report-environment) (g$25534 core-prim . quotient) (g$15297 core-prim . null-environment) (g$25533 core-prim . remainder) (g$25532 core-prim . modulo) (g$25531 core-prim . inexact->exact) (g$25530 core-prim . force) (g$25529 core-prim . exact->inexact) (g$25528 core-prim . exit) (g$25527 core-prim . command-line) (g$25526 core-prim . string-fill!) (g$25525 core-prim . string-set!) (g$25524 core-prim . set-cdr!) (g$25523 core-prim . set-car!) (g$25522 core-prim . remove) (g$25521 core-prim . remv) (g$25520 core-prim . remp) (g$25519 core-prim . remq) (g$25518 core-prim . partition) (g$25517 core-prim . memv) (g$25516 core-prim . memq) (g$25515 core-prim . memp) (g$25514 core-prim . member) (g$25513 core-prim . exists) (g$25512 core-prim . for-all) (g$25511 core-prim . fold-right) (g$25510 core-prim . fold-left) (g$25509 core-prim . find) (g$25508 core-prim . filter) (g$25507 core-prim . cons*) (g$25506 core-prim . assv) (g$25505 core-prim . assq) (g$25504 core-prim . assp) (g$25503 core-prim . assoc) (g$25502 core-prim . call-with-string-output-port) (g$25501 core-prim . call-with-port) (g$25500 core-prim . call-with-bytevector-output-port) (g$25499 core-prim . bytevector->string) (g$25498 core-prim . buffer-mode?) (g$25497 core-prim . binary-port?) (g$25496 core-prim . with-exception-handler) (g$25495 core-prim . raise-continuable) (g$25494 core-prim . raise) (g$15303 core-prim . eval) (g$15295 core-prim . environment) (g$25493 core-prim . make-enumeration) (g$25492 core-prim . enum-set=?) (g$25491 core-prim . enum-set-universe) (g$25490 core-prim . enum-set-union) (g$25489 core-prim . enum-set-subset?) (g$25488 core-prim . enum-set-projection) (g$25487 core-prim . enum-set-member?) (g$25486 core-prim . enum-set-intersection) (g$25485 core-prim . enum-set-indexer) (g$25484 core-prim . enum-set-difference) (g$25483 core-prim . enum-set-constructor) (g$25482 core-prim . enum-set-complement) (g$25481 core-prim . enum-set->list) (g$25480 core-prim . who-condition?) (g$25479 core-prim . warning?) (g$25478 core-prim . violation?) (g$25477 core-prim . undefined-violation?) (g$25476 core-prim . syntax-violation?) (g$25475 core-prim . syntax-violation-subform) (g$25474 core-prim . syntax-violation-form) (g$25473 core-prim . syntax-violation) (g$25472 core-prim . simple-conditions) (g$25471 core-prim . serious-condition?) (g$25470 core-prim . non-continuable-violation?) (g$25469 core-prim . &non-continuable) (g$25468 core-prim . message-condition?) (g$25467 core-prim . make-who-condition) (g$25466 core-prim . make-warning) (g$25465 core-prim . make-violation) (g$25464 core-prim . make-undefined-violation) (g$25463 core-prim . make-syntax-violation) (g$25462 core-prim . make-serious-condition) (g$25461 core-prim . make-non-continuable-violation) (g$25460 core-prim . make-message-condition) (g$25459 core-prim . make-lexical-violation) (g$25458 core-prim . make-irritants-condition) (g$25457 core-prim . make-implementation-restriction-violation) (g$25456 core-prim . make-error) (g$25455 core-prim . make-assertion-violation) (g$25454 core-prim . lexical-violation?) (g$25453 core-prim . irritants-condition?) (g$25452 core-prim . implementation-restriction-violation?) (g$25451 core-prim . &implementation-restriction) (g$25450 core-prim . error?) (g$25449 core-prim . condition-who) (g$25448 core-prim . condition-predicate) (g$25447 core-prim . condition-message) (g$25446 core-prim . condition-irritants) (g$25445 core-prim . condition-accessor) (g$25444 core-prim . condition) (g$25443 core-prim . assertion-violation?) (g$25442 core-prim . condition?) (g$25441 core-prim . utf32->string) (g$25440 core-prim . utf16->string) (g$25439 core-prim . utf8->string) (g$25438 core-prim . uint-list->bytevector) (g$25437 core-prim . u8-list->bytevector) (g$25436 core-prim . string->utf8) (g$25435 core-prim . string->utf32) (g$25434 core-prim . string->utf16) (g$25433 core-prim . sint-list->bytevector) (g$25432 core-prim . native-endianness) (g$25431 core-prim . bytevector?) (g$25430 core-prim . bytevector=?) (g$25429 core-prim . bytevector-uint-set!) (g$25428 core-prim . bytevector-uint-ref) (g$25427 core-prim . bytevector-u8-set!) (g$25426 core-prim . bytevector-u8-ref) (g$25425 core-prim . bytevector-u64-set!) (g$25424 core-prim . bytevector-u64-ref) (g$25423 core-prim . bytevector-u64-native-set!) (g$25422 core-prim . bytevector-u64-native-ref) (g$25421 core-prim . bytevector-u32-set!) (g$25420 core-prim . bytevector-u32-ref) (g$25419 core-prim . bytevector-u32-native-set!) (g$25418 core-prim . bytevector-u32-native-ref) (g$25417 core-prim . bytevector-u16-set!) (g$25416 core-prim . bytevector-u16-ref) (g$25415 core-prim . bytevector-u16-native-set!) (g$25414 core-prim . bytevector-u16-native-ref) (g$25413 core-prim . bytevector-sint-set!) (g$25412 core-prim . bytevector-sint-ref) (g$25411 core-prim . bytevector-s8-set!) (g$25410 core-prim . bytevector-s8-ref) (g$25409 core-prim . bytevector-s64-set!) (g$25408 core-prim . bytevector-s64-ref) (g$25407 core-prim . bytevector-s64-native-set!) (g$25406 core-prim . bytevector-s64-native-ref) (g$25405 core-prim . bytevector-s32-set!) (g$25404 core-prim . bytevector-s32-ref) (g$25403 core-prim . bytevector-s32-native-set!) (g$25402 core-prim . bytevector-s32-native-ref) (g$25401 core-prim . bytevector-s16-set!) (g$25400 core-prim . bytevector-s16-ref) (g$25399 core-prim . bytevector-s16-native-set!) (g$25398 core-prim . bytevector-s16-native-ref) (g$25397 core-prim . bytevector-length) (g$25396 core-prim . bytevector-ieee-single-set!) (g$25395 core-prim . bytevector-ieee-single-ref) (g$25394 core-prim . bytevector-ieee-single-native-set!) (g$25393 core-prim . bytevector-ieee-single-native-ref) (g$25392 core-prim . bytevector-ieee-double-set!) (g$25391 core-prim . bytevector-ieee-double-ref) (g$25390 core-prim . bytevector-ieee-double-native-set!) (g$25389 core-prim . bytevector-ieee-double-native-ref) (g$25388 core-prim . bytevector-fill!) (g$25387 core-prim . bytevector-copy!) (g$25386 core-prim . bytevector-copy) (g$25385 core-prim . bytevector->uint-list) (g$25384 core-prim . bytevector->u8-list) (g$25383 core-prim . bytevector->sint-list) (g$25382 core-prim . no-nans-violation?) (g$25381 core-prim . no-infinities-violation?) (g$25380 core-prim . make-no-nans-violation) (g$25379 core-prim . make-no-infinities-violation) (g$25378 core-prim . real->flonum) (g$25377 core-prim . flzero?) (g$25376 core-prim . fltruncate) (g$25375 core-prim . fltan) (g$25374 core-prim . flsqrt) (g$25373 core-prim . flsin) (g$25372 core-prim . flround) (g$25371 core-prim . flpositive?) (g$25370 core-prim . flonum?) (g$25369 core-prim . flodd?) (g$25368 core-prim . flnumerator) (g$25367 core-prim . flnegative?) (g$25366 core-prim . flnan?) (g$25365 core-prim . flmod0) (g$25364 core-prim . flmod) (g$25363 core-prim . flmin) (g$25362 core-prim . flmax) (g$25361 core-prim . fllog) (g$25360 core-prim . flinteger?) (g$25359 core-prim . flinfinite?) (g$25358 core-prim . flfloor) (g$25357 core-prim . flfinite?) (g$25356 core-prim . flexpt) (g$25355 core-prim . flexp) (g$25354 core-prim . fleven?) (g$25353 core-prim . fldiv0-and-mod0) (g$25352 core-prim . fldiv0) (g$25351 core-prim . fldiv-and-mod) (g$25350 core-prim . fldiv) (g$25349 core-prim . fldenominator) (g$25348 core-prim . flcos) (g$25347 core-prim . flceiling) (g$25346 core-prim . flatan) (g$25345 core-prim . flasin) (g$25344 core-prim . flacos) (g$25343 core-prim . flabs) (g$25342 core-prim . fl>?) (g$25341 core-prim . fl>=?) (g$25340 core-prim . fl=?) (g$25339 core-prim . fl<?) (g$25338 core-prim . fl<=?) (g$25337 core-prim . fl/) (g$25336 core-prim . fl-) (g$25335 core-prim . fl+) (g$25334 core-prim . fl*) (g$25333 core-prim . fixnum->flonum) (g$25332 core-prim . fxzero?) (g$25331 core-prim . fxxor) (g$25330 core-prim . fxrotate-bit-field) (g$25329 core-prim . fxreverse-bit-field) (g$25328 core-prim . fxpositive?) (g$25327 core-prim . fxodd?) (g$25326 core-prim . fxnot) (g$25325 core-prim . fxnegative?) (g$25324 core-prim . fxmod0) (g$25323 core-prim . fxmod) (g$25322 core-prim . fxmin) (g$25321 core-prim . fxmax) (g$25320 core-prim . fxlength) (g$25319 core-prim . fxior) (g$25318 core-prim . fxif) (g$25317 core-prim . fxfirst-bit-set) (g$25316 core-prim . fxeven?) (g$25315 core-prim . fxdiv0-and-mod0) (g$25314 core-prim . fxdiv0) (g$25313 core-prim . fxdiv-and-mod) (g$25312 core-prim . fxdiv) (g$25311 core-prim . fxcopy-bit-field) (g$25310 core-prim . fxcopy-bit) (g$25309 core-prim . fxbit-set?) (g$25308 core-prim . fxbit-field) (g$25307 core-prim . fxbit-count) (g$25306 core-prim . fxarithmetic-shift-right) (g$25305 core-prim . fxarithmetic-shift-left) (g$25304 core-prim . fxarithmetic-shift) (g$25303 core-prim . fxand) (g$25302 core-prim . fx>?) (g$25301 core-prim . fx>=?) (g$25300 core-prim . fx=?) (g$25299 core-prim . fx<?) (g$25298 core-prim . fx<=?) (g$25297 core-prim . fx-/carry) (g$25296 core-prim . fx-) (g$25295 core-prim . fx+/carry) (g$25294 core-prim . fx+) (g$25293 core-prim . fx*/carry) (g$25292 core-prim . fx*) (g$25291 core-prim . greatest-fixnum) (g$25290 core-prim . least-fixnum) (g$25289 core-prim . fixnum-width) (g$25288 core-prim . fixnum?) (g$25287 core-prim . bitwise-rotate-bit-field) (g$25286 core-prim . bitwise-reverse-bit-field) (g$25285 core-prim . bitwise-length) (g$25284 core-prim . bitwise-if) (g$25283 core-prim . bitwise-first-bit-set) (g$25282 core-prim . bitwise-copy-bit-field) (g$25281 core-prim . bitwise-copy-bit) (g$25280 core-prim . bitwise-bit-set?) (g$25279 core-prim . bitwise-bit-field) (g$25278 core-prim . bitwise-bit-count) (g$25277 core-prim . bitwise-xor) (g$25276 core-prim . bitwise-ior) (g$25275 core-prim . bitwise-and) (g$25274 core-prim . bitwise-not) (g$25273 core-prim . bitwise-arithmetic-shift-right) (g$25272 core-prim . bitwise-arithmetic-shift-left) (g$25271 core-prim . bitwise-arithmetic-shift) (g$25270 core-prim . zero?) (g$25269 core-prim . vector?) (g$25268 core-prim . vector-set!) (g$25267 core-prim . vector-ref) (g$25266 core-prim . vector-map) (g$25265 core-prim . vector-length) (g$25264 core-prim . vector-for-each) (g$25263 core-prim . vector-fill!) (g$25262 core-prim . vector->list) (g$25261 core-prim . vector) (g$25260 core-prim . values) (g$25259 core-prim . truncate) (g$25258 core-prim . tan) (g$25257 core-prim . symbol?) (g$25256 core-prim . symbol=?) (g$25255 core-prim . symbol->string) (g$25254 core-prim . substring) (g$25253 core-prim . string?) (g$25252 core-prim . string>?) (g$25251 core-prim . string>=?) (g$25250 core-prim . string=?) (g$25249 core-prim . string<?) (g$25248 core-prim . string<=?) (g$25247 core-prim . string-ref) (g$25246 core-prim . string-length) (g$25245 core-prim . string-for-each) (g$25244 core-prim . string-copy) (g$25243 core-prim . string-append) (g$25242 core-prim . string->symbol) (g$25241 core-prim . string->number) (g$25240 core-prim . string->list) (g$25239 core-prim . string) (g$25238 core-prim . sqrt) (g$25237 core-prim . sin) (g$25236 core-prim . round) (g$25235 core-prim . reverse) (g$25234 core-prim . real?) (g$25233 core-prim . real-valued?) (g$25232 core-prim . real-part) (g$25231 core-prim . rationalize) (g$25230 core-prim . rational?) (g$25229 core-prim . rational-valued?) (g$25228 core-prim . procedure?) (g$25227 core-prim . positive?) (g$25226 core-prim . pair?) (g$25225 core-prim . odd?) (g$25224 core-prim . numerator) (g$25223 core-prim . number?) (g$25222 core-prim . number->string) (g$25221 core-prim . null?) (g$25220 core-prim . not) (g$25219 core-prim . negative?) (g$25218 core-prim . nan?) (g$25217 core-prim . min) (g$25216 core-prim . max) (g$25215 core-prim . map) (g$25214 core-prim . make-vector) (g$25213 core-prim . make-string) (g$25212 core-prim . make-rectangular) (g$25211 core-prim . make-polar) (g$25210 core-prim . magnitude) (g$25209 core-prim . log) (g$25208 core-prim . list?) (g$25207 core-prim . list-tail) (g$25206 core-prim . list-ref) (g$25205 core-prim . list->vector) (g$25204 core-prim . list->string) (g$25203 core-prim . list) (g$25202 core-prim . length) (g$25201 core-prim . lcm) (g$25200 core-prim . integer?) (g$25199 core-prim . integer-valued?) (g$25198 core-prim . integer->char) (g$25197 core-prim . infinite?) (g$25196 core-prim . inexact?) (g$25195 core-prim . inexact) (g$25194 core-prim . imag-part) (g$25193 core-prim . gcd) (g$25192 core-prim . for-each) (g$25191 core-prim . floor) (g$25190 core-prim . finite?) (g$25189 core-prim . expt) (g$25188 core-prim . exp) (g$25187 core-prim . exact?) (g$25186 core-prim . exact-integer-sqrt) (g$25185 core-prim . exact) (g$25184 core-prim . even?) (g$25183 core-prim . error) (g$25182 core-prim . eqv?) (g$25181 core-prim . equal?) (g$25180 core-prim . eq?) (g$25179 core-prim . dynamic-wind) (g$25178 core-prim . div0-and-mod0) (g$25177 core-prim . mod0) (g$25176 core-prim . div0) (g$25175 core-prim . div-and-mod) (g$25174 core-prim . mod) (g$25173 core-prim . div) (g$25172 core-prim . denominator) (g$25171 core-prim . cos) (g$25170 core-prim . cons) (g$25169 core-prim . complex?) (g$25168 core-prim . char?) (g$25167 core-prim . char>?) (g$25166 core-prim . char>=?) (g$25165 core-prim . char=?) (g$25164 core-prim . char<?) (g$25163 core-prim . char<=?) (g$25162 core-prim . char->integer) (g$25161 core-prim . ceiling) (g$25160 core-prim . call-with-values) (g$25159 core-prim . call/cc) (g$25158 core-prim . call-with-current-continuation) (g$25157 core-prim . cddddr) (g$25156 core-prim . cdddar) (g$25155 core-prim . cddadr) (g$25154 core-prim . cddaar) (g$25153 core-prim . cdaddr) (g$25152 core-prim . cdadar) (g$25151 core-prim . cdaadr) (g$25150 core-prim . cdaaar) (g$25149 core-prim . cadddr) (g$25148 core-prim . caddar) (g$25147 core-prim . cadadr) (g$25146 core-prim . cadaar) (g$25145 core-prim . caaddr) (g$25144 core-prim . caadar) (g$25143 core-prim . caaadr) (g$25142 core-prim . caaaar) (g$25141 core-prim . cdddr) (g$25140 core-prim . cddar) (g$25139 core-prim . cdadr) (g$25138 core-prim . cdaar) (g$25137 core-prim . caddr) (g$25136 core-prim . cadar) (g$25135 core-prim . caadr) (g$25134 core-prim . caaar) (g$25133 core-prim . cddr) (g$25132 core-prim . cdar) (g$25131 core-prim . cadr) (g$25130 core-prim . caar) (g$25129 core-prim . cdr) (g$25128 core-prim . car) (g$25127 core-prim . boolean?) (g$25126 core-prim . boolean=?) (g$25125 core-prim . atan) (g$25124 core-prim . assertion-violation) (g$25123 core-prim . asin) (g$25122 core-prim . apply) (g$25121 core-prim . append) (g$25120 core-prim . angle) (g$25119 core-prim . acos) (g$25118 core-prim . abs) (g$25117 core-prim . /) (g$25116 core-prim . *) (g$25115 core-prim . -) (g$25114 core-prim . +) (g$25113 core-prim . >=) (g$25112 core-prim . >) (g$25111 core-prim . =) (g$25110 core-prim . <=) (g$25109 core-prim . <) (g$25108 core-prim . let*-values) (g$25107 $core-rtd &no-nans-rtd &no-nans-rcd) (g$25106 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$25105 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$25104 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$25103 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$25102 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$25101 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$25100 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$25099 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$25098 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$25097 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$25096 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$25095 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$25094 $core-rtd &i/o-rtd &i/o-rcd) (g$25093 $core-rtd &undefined-rtd &undefined-rcd) (g$25092 $core-rtd &syntax-rtd &syntax-rcd) (g$25091 $core-rtd &lexical-rtd &lexical-rcd) (g$25090 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$25089 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$25088 $core-rtd &who-rtd &who-rcd) (g$25087 $core-rtd &irritants-rtd &irritants-rcd) (g$25086 $core-rtd &assertion-rtd &assertion-rcd) (g$25085 $core-rtd &violation-rtd &violation-rcd) (g$25084 $core-rtd &error-rtd &error-rcd) (g$25083 $core-rtd &serious-rtd &serious-rcd) (g$25082 $core-rtd &warning-rtd &warning-rcd) (g$25081 $core-rtd &message-rtd &message-rcd) (g$25080 $core-rtd &condition-rtd &condition-rcd) (g$25079 macro . define-condition-type) (g$25078 macro . define-enumeration) (g$25077 macro . define-record-type) (g$25076 macro . parent-rtd) (g$25075 macro . nongenerative) (g$25074 macro . opaque) (g$25073 macro . sealed) (g$25072 macro . protocol) (g$25071 macro . parent) (g$25070 macro . immutable) (g$25069 macro . mutable) (g$25068 macro . fields) (g$25067 macro . error-handling-mode) (g$25066 macro . file-options) (g$25065 macro . buffer-mode) (g$25064 macro . eol-style) (g$25063 macro . guard) (g$25062 macro . trace-define) (g$25061 macro . trace-lambda) (g$25060 macro . unsyntax-splicing) (g$25059 macro . unsyntax) (g$25058 macro . unquote-splicing) (g$25057 macro . unquote) (g$25056 macro . _) (g$25055 macro . else) (g$25054 macro . =>) (g$25053 macro . ...) (g$25052 macro . assert) (g$25051 macro . endianness) (g$25050 macro . delay) (g$25049 macro . time) (g$25048 macro . or) (g$25047 macro . and) (g$25046 macro . do) (g$25045 macro . cond) (g$25044 macro . let*) (g$25043 macro . let) (g$25042 macro . identifier-syntax) (g$25041 macro . with-syntax) (g$25040 macro . quasisyntax) (g$25039 macro . quasiquote) (g$25038 macro . syntax-rules) (g$25037 macro . include) (g$25036 macro . define-struct) (g$25035 core-macro . record-constructor-descriptor) (g$25034 core-macro . record-type-descriptor) (g$25033 core-macro . let-values) (g$25032 core-macro . case) (g$25031 core-macro . parameterize) (g$25030 core-macro . unless) (g$25029 core-macro . when) (g$25028 core-macro . if) (g$25027 core-macro . letrec*) (g$25026 core-macro . letrec) (g$25025 core-macro . type-descriptor) (g$25024 core-macro . case-lambda) (g$25023 core-macro . lambda) (g$25022 core-macro . syntax) (g$25021 core-macro . syntax-case) (g$25020 core-macro . quote) (g$25019 core-macro . foreign-call) (g$25018 letrec-syntax) (g$25017 let-syntax) (g$25016 set!) (g$25015 import) (g$25014 begin) (g$25013 module) (g$25012 define-syntax) (g$25011 define)) values values '#f) (g$g$install-library$13963$14262 'g$25738 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g$25701) (eval-core . g$25700) (set-symbol-value! . g$25699) (symbol-value . g$25698) (gensym . g$25697) (void . g$25696)) '() values values '#f))

((case-lambda ((g$load-r6rs-top-level$24993) (begin (set! g$load-r6rs-top-level$24993 (case-lambda ((g$filename$24995) ((case-lambda ((g$x*$24997) (g$g$eval-r6rs-top-level$15330$24803 g$x*$24997))) (with-input-from-file g$filename$24995 (case-lambda (() (letrec ((g$f$24999 (case-lambda (() ((case-lambda ((g$x$25001) (if (eof-object? g$x$25001) '() (cons g$x$25001 (g$f$24999))))) (read)))))) (g$f$24999))))))))) (begin (set! g$g$load-r6rs-top-level$24993$25009 g$load-r6rs-top-level$24993) ((case-lambda ((g$args$25003) (begin (if (= (length g$args$25003) '2) (void) (begin (display '"provide a script name argument
") (exit '17))) ((case-lambda ((g$script-name$25005 g$args$25006) (g$load-r6rs-top-level$24993 (car g$args$25006)))) (car g$args$25003) (cdr g$args$25003))))) (command-line)) (exit '0) g$g$eval-r6rs-top-level$15330$24803)))) '#f)

