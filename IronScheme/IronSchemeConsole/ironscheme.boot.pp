;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$find$5551$1CmlGO
     g$find$5654$1CmlGO
     (case-lambda
       ((g$proc$5573$1CmlGO g$l$5574$1CmlGO)
        (if (null? g$l$5574$1CmlGO)
          '#f
          ((case-lambda
             ((g$e$5575$1CmlGO)
              (if (g$proc$5573$1CmlGO g$e$5575$1CmlGO)
                g$e$5575$1CmlGO
                (g$find$5551$1CmlGO g$proc$5573$1CmlGO (cdr g$l$5574$1CmlGO)))))
           (car g$l$5574$1CmlGO))))))
   (g$partition$5552$1CmlGO
     g$partition$5655$1CmlGO
     (case-lambda
       ((g$proc$5576$1CmlGO g$l$5577$1CmlGO)
        ((letrec ((g$f$5578$1CmlGO
                    (case-lambda
                      ((g$l$5579$1CmlGO g$a$5580$1CmlGO g$b$5581$1CmlGO)
                       (if (null? g$l$5579$1CmlGO)
                         (values
                           (reverse! g$a$5580$1CmlGO)
                           (reverse! g$b$5581$1CmlGO))
                         ((case-lambda
                            ((g$e$5582$1CmlGO)
                             (if (g$proc$5576$1CmlGO g$e$5582$1CmlGO)
                               (g$f$5578$1CmlGO
                                 (cdr g$l$5579$1CmlGO)
                                 (cons g$e$5582$1CmlGO g$a$5580$1CmlGO)
                                 g$b$5581$1CmlGO)
                               (g$f$5578$1CmlGO
                                 (cdr g$l$5579$1CmlGO)
                                 g$a$5580$1CmlGO
                                 (cons g$e$5582$1CmlGO g$b$5581$1CmlGO)))))
                          (car g$l$5579$1CmlGO)))))))
           g$f$5578$1CmlGO)
         g$l$5577$1CmlGO
         '()
         '()))))
   (g$remp$5553$1CmlGO
     g$remp$5656$1CmlGO
     (case-lambda
       ((g$proc$5583$1CmlGO g$l$5584$1CmlGO)
        ((letrec ((g$f$5585$1CmlGO
                    (case-lambda
                      ((g$l$5586$1CmlGO g$a$5587$1CmlGO)
                       (if (null? g$l$5586$1CmlGO)
                         (reverse! g$a$5587$1CmlGO)
                         ((case-lambda
                            ((g$e$5588$1CmlGO)
                             (if (g$proc$5583$1CmlGO g$e$5588$1CmlGO)
                               (g$f$5585$1CmlGO
                                 (cdr g$l$5586$1CmlGO)
                                 g$a$5587$1CmlGO)
                               (g$f$5585$1CmlGO
                                 (cdr g$l$5586$1CmlGO)
                                 (cons g$e$5588$1CmlGO g$a$5587$1CmlGO)))))
                          (car g$l$5586$1CmlGO)))))))
           g$f$5585$1CmlGO)
         g$l$5584$1CmlGO
         '()))))
   (g$filter$5554$1CmlGO
     g$filter$5657$1CmlGO
     (case-lambda
       ((g$proc$5589$1CmlGO g$l$5590$1CmlGO)
        ((letrec ((g$f$5591$1CmlGO
                    (case-lambda
                      ((g$l$5592$1CmlGO g$a$5593$1CmlGO)
                       (if (null? g$l$5592$1CmlGO)
                         (reverse! g$a$5593$1CmlGO)
                         ((case-lambda
                            ((g$e$5594$1CmlGO)
                             (if (g$proc$5589$1CmlGO g$e$5594$1CmlGO)
                               (g$f$5591$1CmlGO
                                 (cdr g$l$5592$1CmlGO)
                                 (cons g$e$5594$1CmlGO g$a$5593$1CmlGO))
                               (g$f$5591$1CmlGO
                                 (cdr g$l$5592$1CmlGO)
                                 g$a$5593$1CmlGO))))
                          (car g$l$5592$1CmlGO)))))))
           g$f$5591$1CmlGO)
         g$l$5590$1CmlGO
         '()))))
   (g$assq$5555$1CmlGO
     g$assq$5658$1CmlGO
     (case-lambda
       ((g$obj$5595$1CmlGO g$lst$5596$1CmlGO)
        (if (null? g$lst$5596$1CmlGO)
          '#f
          ((case-lambda
             ((g$obj$5597$1CmlGO g$t$5598$1CmlGO g$r$5599$1CmlGO)
              (if (eq? g$obj$5597$1CmlGO (car g$t$5598$1CmlGO))
                g$t$5598$1CmlGO
                (g$assq$5555$1CmlGO g$obj$5597$1CmlGO g$r$5599$1CmlGO))))
           g$obj$5595$1CmlGO
           (car g$lst$5596$1CmlGO)
           (cdr g$lst$5596$1CmlGO))))))
   (g$assv$5556$1CmlGO
     g$assv$5659$1CmlGO
     (case-lambda
       ((g$obj$5600$1CmlGO g$lst$5601$1CmlGO)
        (if (null? g$lst$5601$1CmlGO)
          '#f
          ((case-lambda
             ((g$c$5602$1CmlGO)
              (if (eqv? g$obj$5600$1CmlGO (car g$c$5602$1CmlGO))
                g$c$5602$1CmlGO
                (g$assv$5556$1CmlGO
                  g$obj$5600$1CmlGO
                  (cdr g$lst$5601$1CmlGO)))))
           (car g$lst$5601$1CmlGO))))))
   (g$assoc$5557$1CmlGO
     g$assoc$5660$1CmlGO
     (case-lambda
       ((g$obj$5603$1CmlGO g$lst$5604$1CmlGO)
        (if (null? g$lst$5604$1CmlGO)
          '#f
          ((case-lambda
             ((g$c$5605$1CmlGO)
              (if (equal? g$obj$5603$1CmlGO (car g$c$5605$1CmlGO))
                g$c$5605$1CmlGO
                (g$assoc$5557$1CmlGO
                  g$obj$5603$1CmlGO
                  (cdr g$lst$5604$1CmlGO)))))
           (car g$lst$5604$1CmlGO))))))
   (g$assp$5558$1CmlGO
     g$assp$5661$1CmlGO
     (case-lambda
       ((g$p?$5606$1CmlGO g$lst$5607$1CmlGO)
        (if (null? g$lst$5607$1CmlGO)
          '#f
          ((case-lambda
             ((g$c$5608$1CmlGO)
              (if (g$p?$5606$1CmlGO (car g$c$5608$1CmlGO))
                g$c$5608$1CmlGO
                (g$assp$5558$1CmlGO g$p?$5606$1CmlGO (cdr g$lst$5607$1CmlGO)))))
           (car g$lst$5607$1CmlGO))))))
   (g$memq$5559$1CmlGO
     g$memq$5662$1CmlGO
     (case-lambda
       ((g$obj$5609$1CmlGO g$lst$5610$1CmlGO)
        (if (null? g$lst$5610$1CmlGO)
          '#f
          (if (eq? g$obj$5609$1CmlGO (car g$lst$5610$1CmlGO))
            g$lst$5610$1CmlGO
            (g$memq$5559$1CmlGO g$obj$5609$1CmlGO (cdr g$lst$5610$1CmlGO)))))))
   (g$memv$5560$1CmlGO
     g$memv$5663$1CmlGO
     (case-lambda
       ((g$obj$5611$1CmlGO g$lst$5612$1CmlGO)
        (if (null? g$lst$5612$1CmlGO)
          '#f
          (if (eqv? g$obj$5611$1CmlGO (car g$lst$5612$1CmlGO))
            g$lst$5612$1CmlGO
            (g$memv$5560$1CmlGO g$obj$5611$1CmlGO (cdr g$lst$5612$1CmlGO)))))))
   (g$member$5561$1CmlGO
     g$member$5664$1CmlGO
     (case-lambda
       ((g$obj$5613$1CmlGO g$lst$5614$1CmlGO)
        (if (null? g$lst$5614$1CmlGO)
          '#f
          (if (equal? g$obj$5613$1CmlGO (car g$lst$5614$1CmlGO))
            g$lst$5614$1CmlGO
            (g$member$5561$1CmlGO
              g$obj$5613$1CmlGO
              (cdr g$lst$5614$1CmlGO)))))))
   (g$memp$5562$1CmlGO
     g$memp$5665$1CmlGO
     (case-lambda
       ((g$p?$5615$1CmlGO g$lst$5616$1CmlGO)
        (if (null? g$lst$5616$1CmlGO)
          '#f
          (if (g$p?$5615$1CmlGO (car g$lst$5616$1CmlGO))
            g$lst$5616$1CmlGO
            (g$memp$5562$1CmlGO g$p?$5615$1CmlGO (cdr g$lst$5616$1CmlGO)))))))
   (g$all-empty?$5563$1CmlGO
     g$all-empty?$5666$1CmlGO
     (case-lambda
       ((g$ls$5617$1CmlGO)
        ((case-lambda
           ((g$t$5618$1CmlGO)
            (if g$t$5618$1CmlGO
              g$t$5618$1CmlGO
              (begin
                '#f
                (if (null? (car g$ls$5617$1CmlGO))
                  (begin '#f (g$all-empty?$5563$1CmlGO (cdr g$ls$5617$1CmlGO)))
                  '#f)))))
         (null? g$ls$5617$1CmlGO)))))
   (g$split$5564$1CmlGO
     g$split$5667$1CmlGO
     (case-lambda
       ((g$ls$5619$1CmlGO)
        (if (null? g$ls$5619$1CmlGO)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$5564$1CmlGO (cdr g$ls$5619$1CmlGO))))
            (case-lambda
              ((g$cars$5620$1CmlGO g$cdrs$5621$1CmlGO)
               ((case-lambda
                  ((g$a$5622$1CmlGO)
                   (values
                     (cons (car g$a$5622$1CmlGO) g$cars$5620$1CmlGO)
                     (cons (cdr g$a$5622$1CmlGO) g$cdrs$5621$1CmlGO))))
                (car g$ls$5619$1CmlGO)))))))))
   (g$for-all$5565$1CmlGO
     g$for-all$5668$1CmlGO
     (case-lambda
       ((g$f$5623$1CmlGO . g$args$5624$1CmlGO)
        (if (g$all-empty?$5563$1CmlGO g$args$5624$1CmlGO)
          '#t
          (call-with-values
            (case-lambda (() (g$split$5564$1CmlGO g$args$5624$1CmlGO)))
            (case-lambda
              ((g$cars$5625$1CmlGO g$cdrs$5626$1CmlGO)
               (if (g$all-empty?$5563$1CmlGO g$cdrs$5626$1CmlGO)
                 (apply g$f$5623$1CmlGO g$cars$5625$1CmlGO)
                 (if (apply g$f$5623$1CmlGO g$cars$5625$1CmlGO)
                   (begin
                     '#f
                     (apply
                       g$for-all$5565$1CmlGO
                       g$f$5623$1CmlGO
                       g$cdrs$5626$1CmlGO))
                   '#f)))))))))
   (g$exists$5566$1CmlGO
     g$exists$5669$1CmlGO
     (case-lambda
       ((g$f$5627$1CmlGO . g$args$5628$1CmlGO)
        (if (g$all-empty?$5563$1CmlGO g$args$5628$1CmlGO)
          '#f
          (call-with-values
            (case-lambda (() (g$split$5564$1CmlGO g$args$5628$1CmlGO)))
            (case-lambda
              ((g$cars$5629$1CmlGO g$cdrs$5630$1CmlGO)
               ((case-lambda
                  ((g$t$5631$1CmlGO)
                   (if g$t$5631$1CmlGO
                     g$t$5631$1CmlGO
                     (begin
                       '#f
                       (apply
                         g$exists$5566$1CmlGO
                         g$f$5627$1CmlGO
                         g$cdrs$5630$1CmlGO)))))
                (apply g$f$5627$1CmlGO g$cars$5629$1CmlGO)))))))))
   (g$cons*$5567$1CmlGO
     g$cons*$5670$1CmlGO
     (case-lambda
       ((g$a$5632$1CmlGO . g$rest$5633$1CmlGO)
        ((letrec ((g$f$5634$1CmlGO
                    (case-lambda
                      ((g$a$5635$1CmlGO g$rest$5636$1CmlGO)
                       (if (null? g$rest$5636$1CmlGO)
                         g$a$5635$1CmlGO
                         (cons
                           g$a$5635$1CmlGO
                           (g$f$5634$1CmlGO
                             (car g$rest$5636$1CmlGO)
                             (cdr g$rest$5636$1CmlGO))))))))
           g$f$5634$1CmlGO)
         g$a$5632$1CmlGO
         g$rest$5633$1CmlGO))))
   (g$fold-left$5568$1CmlGO
     g$fold-left$5671$1CmlGO
     (case-lambda
       ((g$combine$5637$1CmlGO
          g$nil$5638$1CmlGO
          g$list1$5639$1CmlGO
          .
          g$lists$5640$1CmlGO)
        (if (null? g$list1$5639$1CmlGO)
          g$nil$5638$1CmlGO
          (apply
            g$fold-left$5568$1CmlGO
            (g$cons*$5567$1CmlGO
              g$combine$5637$1CmlGO
              (apply
                g$combine$5637$1CmlGO
                (g$cons*$5567$1CmlGO
                  g$nil$5638$1CmlGO
                  (car g$list1$5639$1CmlGO)
                  (map car g$lists$5640$1CmlGO)))
              (cdr g$list1$5639$1CmlGO)
              (map cdr g$lists$5640$1CmlGO)))))))
   (g$fold-right$5569$1CmlGO
     g$fold-right$5672$1CmlGO
     (case-lambda
       ((g$combine$5641$1CmlGO
          g$nil$5642$1CmlGO
          g$list1$5643$1CmlGO
          .
          g$lists$5644$1CmlGO)
        (if (null? g$list1$5643$1CmlGO)
          g$nil$5642$1CmlGO
          (apply
            g$combine$5641$1CmlGO
            (append
              (list (car g$list1$5643$1CmlGO))
              (map car g$lists$5644$1CmlGO)
              (list
                (apply
                  g$fold-right$5569$1CmlGO
                  (g$cons*$5567$1CmlGO
                    g$combine$5641$1CmlGO
                    g$nil$5642$1CmlGO
                    (cdr g$list1$5643$1CmlGO)
                    (map cdr g$lists$5644$1CmlGO))))))))))
   (g$remove$5570$1CmlGO
     g$remove$5673$1CmlGO
     (case-lambda
       ((g$obj$5645$1CmlGO g$list$5646$1CmlGO)
        (g$remp$5553$1CmlGO
          (case-lambda
            ((g$x$5647$1CmlGO) (equal? g$obj$5645$1CmlGO g$x$5647$1CmlGO)))
          g$list$5646$1CmlGO))))
   (g$remv$5571$1CmlGO
     g$remv$5674$1CmlGO
     (case-lambda
       ((g$obj$5648$1CmlGO g$list$5649$1CmlGO)
        (g$remp$5553$1CmlGO
          (case-lambda
            ((g$x$5650$1CmlGO) (eqv? g$obj$5648$1CmlGO g$x$5650$1CmlGO)))
          g$list$5649$1CmlGO))))
   (g$remq$5572$1CmlGO
     g$remq$5675$1CmlGO
     (case-lambda
       ((g$obj$5651$1CmlGO g$list$5652$1CmlGO)
        (g$remp$5553$1CmlGO
          (case-lambda
            ((g$x$5653$1CmlGO) (eq? g$obj$5651$1CmlGO g$x$5653$1CmlGO)))
          g$list$5652$1CmlGO)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5676$1CmlGO
     g$caar$5831$1CmlGO
     (case-lambda ((g$x$5731$1CmlGO) (car (car g$x$5731$1CmlGO)))))
   (g$cadr$5677$1CmlGO
     g$cadr$5832$1CmlGO
     (case-lambda ((g$x$5732$1CmlGO) (car (cdr g$x$5732$1CmlGO)))))
   (g$cdar$5678$1CmlGO
     g$cdar$5833$1CmlGO
     (case-lambda ((g$x$5733$1CmlGO) (cdr (car g$x$5733$1CmlGO)))))
   (g$cddr$5679$1CmlGO
     g$cddr$5834$1CmlGO
     (case-lambda ((g$x$5734$1CmlGO) (cdr (cdr g$x$5734$1CmlGO)))))
   (g$caaar$5680$1CmlGO
     g$caaar$5835$1CmlGO
     (case-lambda
       ((g$x$5735$1CmlGO) (g$caar$5676$1CmlGO (car g$x$5735$1CmlGO)))))
   (g$caadr$5681$1CmlGO
     g$caadr$5836$1CmlGO
     (case-lambda
       ((g$x$5736$1CmlGO) (g$caar$5676$1CmlGO (cdr g$x$5736$1CmlGO)))))
   (g$cadar$5682$1CmlGO
     g$cadar$5837$1CmlGO
     (case-lambda
       ((g$x$5737$1CmlGO) (g$cadr$5677$1CmlGO (car g$x$5737$1CmlGO)))))
   (g$caddr$5683$1CmlGO
     g$caddr$5838$1CmlGO
     (case-lambda
       ((g$x$5738$1CmlGO) (g$cadr$5677$1CmlGO (cdr g$x$5738$1CmlGO)))))
   (g$cdaar$5684$1CmlGO
     g$cdaar$5839$1CmlGO
     (case-lambda
       ((g$x$5739$1CmlGO) (g$cdar$5678$1CmlGO (car g$x$5739$1CmlGO)))))
   (g$cdadr$5685$1CmlGO
     g$cdadr$5840$1CmlGO
     (case-lambda
       ((g$x$5740$1CmlGO) (g$cdar$5678$1CmlGO (cdr g$x$5740$1CmlGO)))))
   (g$cddar$5686$1CmlGO
     g$cddar$5841$1CmlGO
     (case-lambda
       ((g$x$5741$1CmlGO) (g$cddr$5679$1CmlGO (car g$x$5741$1CmlGO)))))
   (g$cdddr$5687$1CmlGO
     g$cdddr$5842$1CmlGO
     (case-lambda
       ((g$x$5742$1CmlGO) (g$cddr$5679$1CmlGO (cdr g$x$5742$1CmlGO)))))
   (g$caaaar$5688$1CmlGO
     g$caaaar$5843$1CmlGO
     (case-lambda
       ((g$x$5743$1CmlGO) (g$caaar$5680$1CmlGO (car g$x$5743$1CmlGO)))))
   (g$caaadr$5689$1CmlGO
     g$caaadr$5844$1CmlGO
     (case-lambda
       ((g$x$5744$1CmlGO) (g$caaar$5680$1CmlGO (cdr g$x$5744$1CmlGO)))))
   (g$caadar$5690$1CmlGO
     g$caadar$5845$1CmlGO
     (case-lambda
       ((g$x$5745$1CmlGO) (g$caadr$5681$1CmlGO (car g$x$5745$1CmlGO)))))
   (g$caaddr$5691$1CmlGO
     g$caaddr$5846$1CmlGO
     (case-lambda
       ((g$x$5746$1CmlGO) (g$caadr$5681$1CmlGO (cdr g$x$5746$1CmlGO)))))
   (g$cadaar$5692$1CmlGO
     g$cadaar$5847$1CmlGO
     (case-lambda
       ((g$x$5747$1CmlGO) (g$cadar$5682$1CmlGO (car g$x$5747$1CmlGO)))))
   (g$cadadr$5693$1CmlGO
     g$cadadr$5848$1CmlGO
     (case-lambda
       ((g$x$5748$1CmlGO) (g$cadar$5682$1CmlGO (cdr g$x$5748$1CmlGO)))))
   (g$caddar$5694$1CmlGO
     g$caddar$5849$1CmlGO
     (case-lambda
       ((g$x$5749$1CmlGO) (g$caddr$5683$1CmlGO (car g$x$5749$1CmlGO)))))
   (g$cadddr$5695$1CmlGO
     g$cadddr$5850$1CmlGO
     (case-lambda
       ((g$x$5750$1CmlGO) (g$caddr$5683$1CmlGO (cdr g$x$5750$1CmlGO)))))
   (g$cdaaar$5696$1CmlGO
     g$cdaaar$5851$1CmlGO
     (case-lambda
       ((g$x$5751$1CmlGO) (g$cdaar$5684$1CmlGO (car g$x$5751$1CmlGO)))))
   (g$cdaadr$5697$1CmlGO
     g$cdaadr$5852$1CmlGO
     (case-lambda
       ((g$x$5752$1CmlGO) (g$cdaar$5684$1CmlGO (cdr g$x$5752$1CmlGO)))))
   (g$cdadar$5698$1CmlGO
     g$cdadar$5853$1CmlGO
     (case-lambda
       ((g$x$5753$1CmlGO) (g$cdadr$5685$1CmlGO (car g$x$5753$1CmlGO)))))
   (g$cdaddr$5699$1CmlGO
     g$cdaddr$5854$1CmlGO
     (case-lambda
       ((g$x$5754$1CmlGO) (g$cdadr$5685$1CmlGO (cdr g$x$5754$1CmlGO)))))
   (g$cddaar$5700$1CmlGO
     g$cddaar$5855$1CmlGO
     (case-lambda
       ((g$x$5755$1CmlGO) (g$cddar$5686$1CmlGO (car g$x$5755$1CmlGO)))))
   (g$cddadr$5701$1CmlGO
     g$cddadr$5856$1CmlGO
     (case-lambda
       ((g$x$5756$1CmlGO) (g$cddar$5686$1CmlGO (cdr g$x$5756$1CmlGO)))))
   (g$cdddar$5702$1CmlGO
     g$cdddar$5857$1CmlGO
     (case-lambda
       ((g$x$5757$1CmlGO) (g$cdddr$5687$1CmlGO (car g$x$5757$1CmlGO)))))
   (g$cddddr$5703$1CmlGO
     g$cddddr$5858$1CmlGO
     (case-lambda
       ((g$x$5758$1CmlGO) (g$cdddr$5687$1CmlGO (cdr g$x$5758$1CmlGO)))))
   (g$string=?$5710$1CmlGO
     g$string=?$5859$1CmlGO
     (case-lambda
       ((g$a$5759$1CmlGO g$b$5760$1CmlGO . g$rest$5761$1CmlGO)
        (begin
          (if (not (string? g$a$5759$1CmlGO))
            (assertion-violation 'string=? '"not a string" g$a$5759$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5762$1CmlGO)
               (begin
                 (if (not (string? g$x$5762$1CmlGO))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5762$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5763$1CmlGO)
                     (begin
                       (set! g$a$5759$1CmlGO g$x$5762$1CmlGO)
                       g$r$5763$1CmlGO)))
                  (= (string-compare g$a$5759$1CmlGO g$x$5762$1CmlGO) '0)))))
            (cons g$b$5760$1CmlGO g$rest$5761$1CmlGO))))))
   (g$string<?$5711$1CmlGO
     g$string<?$5860$1CmlGO
     (case-lambda
       ((g$a$5764$1CmlGO g$b$5765$1CmlGO . g$rest$5766$1CmlGO)
        (begin
          (if (not (string? g$a$5764$1CmlGO))
            (assertion-violation 'string<? '"not a string" g$a$5764$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5767$1CmlGO)
               (begin
                 (if (not (string? g$x$5767$1CmlGO))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5767$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5768$1CmlGO)
                     (begin
                       (set! g$a$5764$1CmlGO g$x$5767$1CmlGO)
                       g$r$5768$1CmlGO)))
                  (< (string-compare g$a$5764$1CmlGO g$x$5767$1CmlGO) '0)))))
            (cons g$b$5765$1CmlGO g$rest$5766$1CmlGO))))))
   (g$string>?$5712$1CmlGO
     g$string>?$5861$1CmlGO
     (case-lambda
       ((g$a$5769$1CmlGO g$b$5770$1CmlGO . g$rest$5771$1CmlGO)
        (begin
          (if (not (string? g$a$5769$1CmlGO))
            (assertion-violation 'string>? '"not a string" g$a$5769$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5772$1CmlGO)
               (begin
                 (if (not (string? g$x$5772$1CmlGO))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5772$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5773$1CmlGO)
                     (begin
                       (set! g$a$5769$1CmlGO g$x$5772$1CmlGO)
                       g$r$5773$1CmlGO)))
                  (> (string-compare g$a$5769$1CmlGO g$x$5772$1CmlGO) '0)))))
            (cons g$b$5770$1CmlGO g$rest$5771$1CmlGO))))))
   (g$string<=?$5713$1CmlGO
     g$string<=?$5862$1CmlGO
     (case-lambda
       ((g$a$5774$1CmlGO g$b$5775$1CmlGO . g$rest$5776$1CmlGO)
        (begin
          (if (not (string? g$a$5774$1CmlGO))
            (assertion-violation 'string<=? '"not a string" g$a$5774$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5777$1CmlGO)
               (begin
                 (if (not (string? g$x$5777$1CmlGO))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5777$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5778$1CmlGO)
                     (begin
                       (set! g$a$5774$1CmlGO g$x$5777$1CmlGO)
                       g$r$5778$1CmlGO)))
                  (<= (string-compare g$a$5774$1CmlGO g$x$5777$1CmlGO) '0)))))
            (cons g$b$5775$1CmlGO g$rest$5776$1CmlGO))))))
   (g$string>=?$5714$1CmlGO
     g$string>=?$5863$1CmlGO
     (case-lambda
       ((g$a$5779$1CmlGO g$b$5780$1CmlGO . g$rest$5781$1CmlGO)
        (begin
          (if (not (string? g$a$5779$1CmlGO))
            (assertion-violation 'string>=? '"not a string" g$a$5779$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5782$1CmlGO)
               (begin
                 (if (not (string? g$x$5782$1CmlGO))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5782$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5783$1CmlGO)
                     (begin
                       (set! g$a$5779$1CmlGO g$x$5782$1CmlGO)
                       g$r$5783$1CmlGO)))
                  (>= (string-compare g$a$5779$1CmlGO g$x$5782$1CmlGO) '0)))))
            (cons g$b$5780$1CmlGO g$rest$5781$1CmlGO))))))
   (g$symbol=?$5715$1CmlGO
     g$symbol=?$5864$1CmlGO
     (case-lambda
       ((g$a$5784$1CmlGO g$b$5785$1CmlGO . g$rest$5786$1CmlGO)
        (begin
          (if (not (symbol? g$a$5784$1CmlGO))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5784$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5787$1CmlGO)
               (begin
                 (if (not (symbol? g$x$5787$1CmlGO))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5787$1CmlGO)
                   (void))
                 (eq? g$a$5784$1CmlGO g$x$5787$1CmlGO))))
            (cons g$b$5785$1CmlGO g$rest$5786$1CmlGO))))))
   (g$boolean=?$5716$1CmlGO
     g$boolean=?$5865$1CmlGO
     (case-lambda
       ((g$a$5788$1CmlGO g$b$5789$1CmlGO . g$rest$5790$1CmlGO)
        (begin
          (if (not (boolean? g$a$5788$1CmlGO))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5788$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5791$1CmlGO)
               (begin
                 (if (not (boolean? g$x$5791$1CmlGO))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5791$1CmlGO)
                   (void))
                 (eq? g$a$5788$1CmlGO g$x$5791$1CmlGO))))
            (cons g$b$5789$1CmlGO g$rest$5790$1CmlGO))))))
   (g$char=?$5723$1CmlGO
     g$char=?$5866$1CmlGO
     (case-lambda
       ((g$a$5792$1CmlGO g$b$5793$1CmlGO . g$rest$5794$1CmlGO)
        (begin
          (if (not (char? g$a$5792$1CmlGO))
            (assertion-violation 'char=? '"not a char" g$a$5792$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5795$1CmlGO)
               (begin
                 (if (not (char? g$x$5795$1CmlGO))
                   (assertion-violation 'char=? '"not a char" g$x$5795$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5796$1CmlGO)
                     (begin
                       (set! g$a$5792$1CmlGO g$x$5795$1CmlGO)
                       g$r$5796$1CmlGO)))
                  (= (char->integer g$a$5792$1CmlGO)
                     (char->integer g$x$5795$1CmlGO))))))
            (cons g$b$5793$1CmlGO g$rest$5794$1CmlGO))))))
   (g$char<?$5724$1CmlGO
     g$char<?$5867$1CmlGO
     (case-lambda
       ((g$a$5797$1CmlGO g$b$5798$1CmlGO . g$rest$5799$1CmlGO)
        (begin
          (if (not (char? g$a$5797$1CmlGO))
            (assertion-violation 'char<? '"not a char" g$a$5797$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5800$1CmlGO)
               (begin
                 (if (not (char? g$x$5800$1CmlGO))
                   (assertion-violation 'char<? '"not a char" g$x$5800$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5801$1CmlGO)
                     (begin
                       (set! g$a$5797$1CmlGO g$x$5800$1CmlGO)
                       g$r$5801$1CmlGO)))
                  (< (char->integer g$a$5797$1CmlGO)
                     (char->integer g$x$5800$1CmlGO))))))
            (cons g$b$5798$1CmlGO g$rest$5799$1CmlGO))))))
   (g$char>?$5725$1CmlGO
     g$char>?$5868$1CmlGO
     (case-lambda
       ((g$a$5802$1CmlGO g$b$5803$1CmlGO . g$rest$5804$1CmlGO)
        (begin
          (if (not (char? g$a$5802$1CmlGO))
            (assertion-violation 'char>? '"not a char" g$a$5802$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5805$1CmlGO)
               (begin
                 (if (not (char? g$x$5805$1CmlGO))
                   (assertion-violation 'char>? '"not a char" g$x$5805$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5806$1CmlGO)
                     (begin
                       (set! g$a$5802$1CmlGO g$x$5805$1CmlGO)
                       g$r$5806$1CmlGO)))
                  (> (char->integer g$a$5802$1CmlGO)
                     (char->integer g$x$5805$1CmlGO))))))
            (cons g$b$5803$1CmlGO g$rest$5804$1CmlGO))))))
   (g$char<=?$5726$1CmlGO
     g$char<=?$5869$1CmlGO
     (case-lambda
       ((g$a$5807$1CmlGO g$b$5808$1CmlGO . g$rest$5809$1CmlGO)
        (begin
          (if (not (char? g$a$5807$1CmlGO))
            (assertion-violation 'char<=? '"not a char" g$a$5807$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5810$1CmlGO)
               (begin
                 (if (not (char? g$x$5810$1CmlGO))
                   (assertion-violation 'char<=? '"not a char" g$x$5810$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5811$1CmlGO)
                     (begin
                       (set! g$a$5807$1CmlGO g$x$5810$1CmlGO)
                       g$r$5811$1CmlGO)))
                  (<= (char->integer g$a$5807$1CmlGO)
                      (char->integer g$x$5810$1CmlGO))))))
            (cons g$b$5808$1CmlGO g$rest$5809$1CmlGO))))))
   (g$char>=?$5727$1CmlGO
     g$char>=?$5870$1CmlGO
     (case-lambda
       ((g$a$5812$1CmlGO g$b$5813$1CmlGO . g$rest$5814$1CmlGO)
        (begin
          (if (not (char? g$a$5812$1CmlGO))
            (assertion-violation 'char>=? '"not a char" g$a$5812$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$5815$1CmlGO)
               (begin
                 (if (not (char? g$x$5815$1CmlGO))
                   (assertion-violation 'char>=? '"not a char" g$x$5815$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$5816$1CmlGO)
                     (begin
                       (set! g$a$5812$1CmlGO g$x$5815$1CmlGO)
                       g$r$5816$1CmlGO)))
                  (>= (char->integer g$a$5812$1CmlGO)
                      (char->integer g$x$5815$1CmlGO))))))
            (cons g$b$5813$1CmlGO g$rest$5814$1CmlGO))))))
   (g$rationalize$5728$1CmlGO
     g$rationalize$5871$1CmlGO
     (case-lambda
       ((g$x$5817$1CmlGO g$e$5818$1CmlGO)
        (if (if (infinite? g$x$5817$1CmlGO)
              (begin '#f (infinite? g$e$5818$1CmlGO))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5819$1CmlGO)
              (if (if (exact? g$x$5817$1CmlGO)
                    (begin '#f (exact? g$e$5818$1CmlGO))
                    '#f)
                g$r$5819$1CmlGO
                (inexact g$r$5819$1CmlGO))))
           (apply
             /
             (g$find-ratio$5729$1CmlGO g$x$5817$1CmlGO g$e$5818$1CmlGO)))))))
   (g$find-ratio$5729$1CmlGO
     g$find-ratio$5872$1CmlGO
     (case-lambda
       ((g$x$5820$1CmlGO g$e$5821$1CmlGO)
        (g$find-ratio-between$5730$1CmlGO
          (- g$x$5820$1CmlGO g$e$5821$1CmlGO)
          (+ g$x$5820$1CmlGO g$e$5821$1CmlGO)))))
   (g$find-ratio-between$5730$1CmlGO
     g$find-ratio-between$5873$1CmlGO
     (case-lambda
       ((g$x$5822$1CmlGO g$y$5823$1CmlGO)
        (letrec* ((g$sr$5824$1CmlGO
                    (case-lambda
                      ((g$x$5826$1CmlGO g$y$5827$1CmlGO)
                       ((case-lambda
                          ((g$fx$5828$1CmlGO g$fy$5829$1CmlGO)
                           (if (>= g$fx$5828$1CmlGO g$x$5826$1CmlGO)
                             (list g$fx$5828$1CmlGO '1)
                             (if (= g$fx$5828$1CmlGO g$fy$5829$1CmlGO)
                               ((case-lambda
                                  ((g$rat$5830$1CmlGO)
                                   (list
                                     (+ (g$cadr$5677$1CmlGO g$rat$5830$1CmlGO)
                                        (* g$fx$5828$1CmlGO
                                           (car g$rat$5830$1CmlGO)))
                                     (car g$rat$5830$1CmlGO))))
                                (g$sr$5824$1CmlGO
                                  (/ (- g$y$5827$1CmlGO g$fy$5829$1CmlGO))
                                  (/ (- g$x$5826$1CmlGO g$fx$5828$1CmlGO))))
                               (list (+ '1 g$fx$5828$1CmlGO) '1)))))
                        (exact (floor g$x$5826$1CmlGO))
                        (exact (floor g$y$5827$1CmlGO)))))))
          (if (< g$y$5823$1CmlGO g$x$5822$1CmlGO)
            (g$find-ratio-between$5730$1CmlGO g$y$5823$1CmlGO g$x$5822$1CmlGO)
            (if (>= g$x$5822$1CmlGO g$y$5823$1CmlGO)
              (list g$x$5822$1CmlGO '1)
              (if (positive? g$x$5822$1CmlGO)
                (g$sr$5824$1CmlGO g$x$5822$1CmlGO g$y$5823$1CmlGO)
                (if (negative? g$y$5823$1CmlGO)
                  ((case-lambda
                     ((g$rat$5825$1CmlGO)
                      (list
                        (- (car g$rat$5825$1CmlGO))
                        (g$cadr$5677$1CmlGO g$rat$5825$1CmlGO))))
                   (g$sr$5824$1CmlGO (- g$y$5823$1CmlGO) (- g$x$5822$1CmlGO)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$6069$1CmlGO g$using$6104$1CmlGO (clr-using-internal 'system))
   (g$using$6071$1CmlGO
     g$using$6105$1CmlGO
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$6072$1CmlGO
     g$make-eq-hashtable$6106$1CmlGO
     (case-lambda
       (() (clr-new-internal 'hashtable))
       ((g$k$6083$1CmlGO)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$6083$1CmlGO)))))
   (g$make-eqv-hashtable$6073$1CmlGO
     g$make-eqv-hashtable$6107$1CmlGO
     (case-lambda
       (() (make-hashtable eqv-hash eqv?))
       ((g$k$6084$1CmlGO) (make-hashtable eqv-hash eqv? g$k$6084$1CmlGO))))
   (g$hashtable-size$6074$1CmlGO
     g$hashtable-size$6108$1CmlGO
     (case-lambda
       ((g$ht$6085$1CmlGO)
        (clr-call-internal 'hashtable 'get_count g$ht$6085$1CmlGO))))
   (g$hashtable-ref$6075$1CmlGO
     g$hashtable-ref$6109$1CmlGO
     (case-lambda
       ((g$ht$6086$1CmlGO g$key$6087$1CmlGO g$default$6088$1CmlGO)
        (letrec* ((g$r$6089$1CmlGO
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$6086$1CmlGO
                      g$key$6087$1CmlGO)))
          (if (not (null? g$r$6089$1CmlGO))
            g$r$6089$1CmlGO
            g$default$6088$1CmlGO)))))
   (g$hashtable-set!$6076$1CmlGO
     g$hashtable-set!$6110$1CmlGO
     (case-lambda
       ((g$ht$6090$1CmlGO g$key$6091$1CmlGO g$obj$6092$1CmlGO)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$6090$1CmlGO
          g$key$6091$1CmlGO
          g$obj$6092$1CmlGO))))
   (g$hashtable-delete!$6077$1CmlGO
     g$hashtable-delete!$6111$1CmlGO
     (case-lambda
       ((g$ht$6093$1CmlGO g$key$6094$1CmlGO)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$6093$1CmlGO
          g$key$6094$1CmlGO))))
   (g$hashtable-contains?$6078$1CmlGO
     g$hashtable-contains?$6112$1CmlGO
     (case-lambda
       ((g$ht$6095$1CmlGO g$key$6096$1CmlGO)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$6095$1CmlGO
          g$key$6096$1CmlGO))))
   (g$hashtable-update!$6079$1CmlGO
     g$hashtable-update!$6113$1CmlGO
     (case-lambda
       ((g$ht$6097$1CmlGO
          g$key$6098$1CmlGO
          g$proc$6099$1CmlGO
          g$default$6100$1CmlGO)
        (g$hashtable-set!$6076$1CmlGO
          g$ht$6097$1CmlGO
          g$key$6098$1CmlGO
          (g$proc$6099$1CmlGO
            (g$hashtable-ref$6075$1CmlGO
              g$ht$6097$1CmlGO
              g$key$6098$1CmlGO
              g$default$6100$1CmlGO))))))
   (g$hashtable-clear!$6080$1CmlGO
     g$hashtable-clear!$6114$1CmlGO
     (case-lambda
       ((g$ht$6101$1CmlGO)
        (clr-call-internal 'hashtable 'clear g$ht$6101$1CmlGO))
       ((g$ht$6102$1CmlGO g$k$6103$1CmlGO)
        (clr-call-internal 'hashtable 'clear g$ht$6102$1CmlGO))))
   (g$clear-usings$6082$1CmlGO
     g$clear-usings$6115$1CmlGO
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$6117$1CmlGO
     g$using$6124$1CmlGO
     (clr-using-internal 'system.io))
   (g$file-exists?$6118$1CmlGO
     g$file-exists?$6125$1CmlGO
     (case-lambda
       ((g$fn$6121$1CmlGO)
        (clr-call-internal 'file 'exists '() g$fn$6121$1CmlGO))))
   (g$delete-file$6119$1CmlGO
     g$delete-file$6126$1CmlGO
     (case-lambda
       ((g$fn$6122$1CmlGO)
        (clr-call-internal 'file 'delete '() g$fn$6122$1CmlGO))))
   (g$get-directory-name$6120$1CmlGO
     g$get-directory-name$6127$1CmlGO
     (case-lambda
       ((g$path$6123$1CmlGO)
        (clr-call-internal 'path 'getdirectoryname '() g$path$6123$1CmlGO)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$6128$1CmlGO
     g$native-endianness$6239$1CmlGO
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$6129$1CmlGO
     g$bytevector-u16-ref$6240$1CmlGO
     (case-lambda
       ((g$bytevector$6157$1CmlGO g$k$6158$1CmlGO g$endianness$6159$1CmlGO)
        (bytevector-uint-ref
          g$bytevector$6157$1CmlGO
          g$k$6158$1CmlGO
          g$endianness$6159$1CmlGO
          '2))))
   (g$bytevector-s16-ref$6130$1CmlGO
     g$bytevector-s16-ref$6241$1CmlGO
     (case-lambda
       ((g$bytevector$6160$1CmlGO g$k$6161$1CmlGO g$endianness$6162$1CmlGO)
        (bytevector-sint-ref
          g$bytevector$6160$1CmlGO
          g$k$6161$1CmlGO
          g$endianness$6162$1CmlGO
          '2))))
   (g$bytevector-u16-native-ref$6131$1CmlGO
     g$bytevector-u16-native-ref$6242$1CmlGO
     (case-lambda
       ((g$bytevector$6163$1CmlGO g$k$6164$1CmlGO)
        (bytevector-uint-ref
          g$bytevector$6163$1CmlGO
          g$k$6164$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '2))))
   (g$bytevector-s16-native-ref$6132$1CmlGO
     g$bytevector-s16-native-ref$6243$1CmlGO
     (case-lambda
       ((g$bytevector$6165$1CmlGO g$k$6166$1CmlGO)
        (bytevector-sint-ref
          g$bytevector$6165$1CmlGO
          g$k$6166$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '2))))
   (g$bytevector-u16-set!$6133$1CmlGO
     g$bytevector-u16-set!$6244$1CmlGO
     (case-lambda
       ((g$bytevector$6167$1CmlGO
          g$k$6168$1CmlGO
          g$n$6169$1CmlGO
          g$endianness$6170$1CmlGO)
        (bytevector-uint-set!
          g$bytevector$6167$1CmlGO
          g$k$6168$1CmlGO
          g$n$6169$1CmlGO
          g$endianness$6170$1CmlGO
          '2))))
   (g$bytevector-s16-set!$6134$1CmlGO
     g$bytevector-s16-set!$6245$1CmlGO
     (case-lambda
       ((g$bytevector$6171$1CmlGO
          g$k$6172$1CmlGO
          g$n$6173$1CmlGO
          g$endianness$6174$1CmlGO)
        (bytevector-sint-set!
          g$bytevector$6171$1CmlGO
          g$k$6172$1CmlGO
          g$n$6173$1CmlGO
          g$endianness$6174$1CmlGO
          '2))))
   (g$bytevector-u16-native-set!$6135$1CmlGO
     g$bytevector-u16-native-set!$6246$1CmlGO
     (case-lambda
       ((g$bytevector$6175$1CmlGO g$k$6176$1CmlGO g$n$6177$1CmlGO)
        (bytevector-uint-set!
          g$bytevector$6175$1CmlGO
          g$k$6176$1CmlGO
          g$n$6177$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '2))))
   (g$bytevector-s16-native-set!$6136$1CmlGO
     g$bytevector-s16-native-set!$6247$1CmlGO
     (case-lambda
       ((g$bytevector$6178$1CmlGO g$k$6179$1CmlGO g$n$6180$1CmlGO)
        (bytevector-sint-set!
          g$bytevector$6178$1CmlGO
          g$k$6179$1CmlGO
          g$n$6180$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '2))))
   (g$bytevector-u32-ref$6137$1CmlGO
     g$bytevector-u32-ref$6248$1CmlGO
     (case-lambda
       ((g$bytevector$6181$1CmlGO g$k$6182$1CmlGO g$endianness$6183$1CmlGO)
        (bytevector-uint-ref
          g$bytevector$6181$1CmlGO
          g$k$6182$1CmlGO
          g$endianness$6183$1CmlGO
          '4))))
   (g$bytevector-s32-ref$6138$1CmlGO
     g$bytevector-s32-ref$6249$1CmlGO
     (case-lambda
       ((g$bytevector$6184$1CmlGO g$k$6185$1CmlGO g$endianness$6186$1CmlGO)
        (bytevector-sint-ref
          g$bytevector$6184$1CmlGO
          g$k$6185$1CmlGO
          g$endianness$6186$1CmlGO
          '4))))
   (g$bytevector-u32-native-ref$6139$1CmlGO
     g$bytevector-u32-native-ref$6250$1CmlGO
     (case-lambda
       ((g$bytevector$6187$1CmlGO g$k$6188$1CmlGO)
        (bytevector-uint-ref
          g$bytevector$6187$1CmlGO
          g$k$6188$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '4))))
   (g$bytevector-s32-native-ref$6140$1CmlGO
     g$bytevector-s32-native-ref$6251$1CmlGO
     (case-lambda
       ((g$bytevector$6189$1CmlGO g$k$6190$1CmlGO)
        (bytevector-sint-ref
          g$bytevector$6189$1CmlGO
          g$k$6190$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '4))))
   (g$bytevector-u32-set!$6141$1CmlGO
     g$bytevector-u32-set!$6252$1CmlGO
     (case-lambda
       ((g$bytevector$6191$1CmlGO
          g$k$6192$1CmlGO
          g$n$6193$1CmlGO
          g$endianness$6194$1CmlGO)
        (bytevector-uint-set!
          g$bytevector$6191$1CmlGO
          g$k$6192$1CmlGO
          g$n$6193$1CmlGO
          g$endianness$6194$1CmlGO
          '4))))
   (g$bytevector-s32-set!$6142$1CmlGO
     g$bytevector-s32-set!$6253$1CmlGO
     (case-lambda
       ((g$bytevector$6195$1CmlGO
          g$k$6196$1CmlGO
          g$n$6197$1CmlGO
          g$endianness$6198$1CmlGO)
        (bytevector-sint-set!
          g$bytevector$6195$1CmlGO
          g$k$6196$1CmlGO
          g$n$6197$1CmlGO
          g$endianness$6198$1CmlGO
          '4))))
   (g$bytevector-u32-native-set!$6143$1CmlGO
     g$bytevector-u32-native-set!$6254$1CmlGO
     (case-lambda
       ((g$bytevector$6199$1CmlGO g$k$6200$1CmlGO g$n$6201$1CmlGO)
        (bytevector-uint-set!
          g$bytevector$6199$1CmlGO
          g$k$6200$1CmlGO
          g$n$6201$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '4))))
   (g$bytevector-s32-native-set!$6144$1CmlGO
     g$bytevector-s32-native-set!$6255$1CmlGO
     (case-lambda
       ((g$bytevector$6202$1CmlGO g$k$6203$1CmlGO g$n$6204$1CmlGO)
        (bytevector-sint-set!
          g$bytevector$6202$1CmlGO
          g$k$6203$1CmlGO
          g$n$6204$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '4))))
   (g$bytevector-u64-ref$6145$1CmlGO
     g$bytevector-u64-ref$6256$1CmlGO
     (case-lambda
       ((g$bytevector$6205$1CmlGO g$k$6206$1CmlGO g$endianness$6207$1CmlGO)
        (bytevector-uint-ref
          g$bytevector$6205$1CmlGO
          g$k$6206$1CmlGO
          g$endianness$6207$1CmlGO
          '8))))
   (g$bytevector-s64-ref$6146$1CmlGO
     g$bytevector-s64-ref$6257$1CmlGO
     (case-lambda
       ((g$bytevector$6208$1CmlGO g$k$6209$1CmlGO g$endianness$6210$1CmlGO)
        (bytevector-sint-ref
          g$bytevector$6208$1CmlGO
          g$k$6209$1CmlGO
          g$endianness$6210$1CmlGO
          '8))))
   (g$bytevector-u64-native-ref$6147$1CmlGO
     g$bytevector-u64-native-ref$6258$1CmlGO
     (case-lambda
       ((g$bytevector$6211$1CmlGO g$k$6212$1CmlGO)
        (bytevector-uint-ref
          g$bytevector$6211$1CmlGO
          g$k$6212$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '8))))
   (g$bytevector-s64-native-ref$6148$1CmlGO
     g$bytevector-s64-native-ref$6259$1CmlGO
     (case-lambda
       ((g$bytevector$6213$1CmlGO g$k$6214$1CmlGO)
        (bytevector-sint-ref
          g$bytevector$6213$1CmlGO
          g$k$6214$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '8))))
   (g$bytevector-u64-set!$6149$1CmlGO
     g$bytevector-u64-set!$6260$1CmlGO
     (case-lambda
       ((g$bytevector$6215$1CmlGO
          g$k$6216$1CmlGO
          g$n$6217$1CmlGO
          g$endianness$6218$1CmlGO)
        (bytevector-uint-set!
          g$bytevector$6215$1CmlGO
          g$k$6216$1CmlGO
          g$n$6217$1CmlGO
          g$endianness$6218$1CmlGO
          '8))))
   (g$bytevector-s64-set!$6150$1CmlGO
     g$bytevector-s64-set!$6261$1CmlGO
     (case-lambda
       ((g$bytevector$6219$1CmlGO
          g$k$6220$1CmlGO
          g$n$6221$1CmlGO
          g$endianness$6222$1CmlGO)
        (bytevector-sint-set!
          g$bytevector$6219$1CmlGO
          g$k$6220$1CmlGO
          g$n$6221$1CmlGO
          g$endianness$6222$1CmlGO
          '8))))
   (g$bytevector-u64-native-set!$6151$1CmlGO
     g$bytevector-u64-native-set!$6262$1CmlGO
     (case-lambda
       ((g$bytevector$6223$1CmlGO g$k$6224$1CmlGO g$n$6225$1CmlGO)
        (bytevector-uint-set!
          g$bytevector$6223$1CmlGO
          g$k$6224$1CmlGO
          g$n$6225$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '8))))
   (g$bytevector-s64-native-set!$6152$1CmlGO
     g$bytevector-s64-native-set!$6263$1CmlGO
     (case-lambda
       ((g$bytevector$6226$1CmlGO g$k$6227$1CmlGO g$n$6228$1CmlGO)
        (bytevector-sint-set!
          g$bytevector$6226$1CmlGO
          g$k$6227$1CmlGO
          g$n$6228$1CmlGO
          (g$native-endianness$6128$1CmlGO)
          '8))))
   (g$bytevector-ieee-single-native-ref$6153$1CmlGO
     g$bytevector-ieee-single-native-ref$6264$1CmlGO
     (case-lambda
       ((g$bytevector$6229$1CmlGO g$k$6230$1CmlGO)
        (if (not (zero? (mod g$k$6230$1CmlGO '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$6230$1CmlGO)
          (bytevector-ieee-single-ref
            g$bytevector$6229$1CmlGO
            g$k$6230$1CmlGO
            (g$native-endianness$6128$1CmlGO))))))
   (g$bytevector-ieee-double-native-ref$6154$1CmlGO
     g$bytevector-ieee-double-native-ref$6265$1CmlGO
     (case-lambda
       ((g$bytevector$6231$1CmlGO g$k$6232$1CmlGO)
        (if (not (zero? (mod g$k$6232$1CmlGO '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$6232$1CmlGO)
          (bytevector-ieee-double-ref
            g$bytevector$6231$1CmlGO
            g$k$6232$1CmlGO
            (g$native-endianness$6128$1CmlGO))))))
   (g$bytevector-ieee-single-native-set!$6155$1CmlGO
     g$bytevector-ieee-single-native-set!$6266$1CmlGO
     (case-lambda
       ((g$bytevector$6233$1CmlGO g$k$6234$1CmlGO g$x$6235$1CmlGO)
        (if (not (zero? (mod g$k$6234$1CmlGO '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$6234$1CmlGO)
          (bytevector-ieee-single-set!
            g$bytevector$6233$1CmlGO
            g$k$6234$1CmlGO
            g$x$6235$1CmlGO
            (g$native-endianness$6128$1CmlGO))))))
   (g$bytevector-ieee-double-native-set!$6156$1CmlGO
     g$bytevector-ieee-double-native-set!$6267$1CmlGO
     (case-lambda
       ((g$bytevector$6236$1CmlGO g$k$6237$1CmlGO g$x$6238$1CmlGO)
        (if (not (zero? (mod g$k$6237$1CmlGO '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$6237$1CmlGO)
          (bytevector-ieee-double-set!
            g$bytevector$6236$1CmlGO
            g$k$6237$1CmlGO
            g$x$6238$1CmlGO
            (g$native-endianness$6128$1CmlGO)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$7286$6268$1CmlGO
     g$7286$6363$1CmlGO
     (make-record-type-descriptor
       '&condition
       '#f
       'g$7289$1CmlGO
       '#f
       '#f
       '#()))
   (g$7288$6269$1CmlGO g$7288$6364$1CmlGO '#f)
   (g$7287$6270$1CmlGO
     g$7287$6365$1CmlGO
     (make-record-constructor-descriptor
       g$7286$6268$1CmlGO
       '#f
       g$7288$6269$1CmlGO))
   (g$&condition?$6271$1CmlGO
     g$&condition?$6366$1CmlGO
     (record-predicate g$7286$6268$1CmlGO))
   (g$make-&condition$6272$1CmlGO
     g$make-&condition$6367$1CmlGO
     (record-constructor g$7287$6270$1CmlGO))
   (g$&condition-rtd$6273$1CmlGO
     g$&condition-rtd$6368$1CmlGO
     g$7286$6268$1CmlGO)
   (g$&condition-rcd$6274$1CmlGO
     g$&condition-rcd$6369$1CmlGO
     g$7287$6270$1CmlGO)
   (g$7302$6275$1CmlGO
     g$7302$6370$1CmlGO
     (make-record-type-descriptor
       '&message
       g$7286$6268$1CmlGO
       'g$7305$1CmlGO
       '#f
       '#f
       '#((immutable message))))
   (g$7304$6276$1CmlGO g$7304$6371$1CmlGO '#f)
   (g$7303$6277$1CmlGO
     g$7303$6372$1CmlGO
     (make-record-constructor-descriptor
       g$7302$6275$1CmlGO
       g$7287$6270$1CmlGO
       g$7304$6276$1CmlGO))
   (g$7301$6278$1CmlGO
     g$7301$6373$1CmlGO
     (record-predicate g$7302$6275$1CmlGO))
   (g$make-message-condition$6279$1CmlGO
     g$make-message-condition$6374$1CmlGO
     (record-constructor g$7303$6277$1CmlGO))
   (g$7300$6280$1CmlGO
     g$7300$6375$1CmlGO
     (record-accessor g$7302$6275$1CmlGO '0))
   (g$message-condition?$6281$1CmlGO
     g$message-condition?$6376$1CmlGO
     (condition-predicate g$7302$6275$1CmlGO))
   (g$condition-message$6282$1CmlGO
     g$condition-message$6377$1CmlGO
     (condition-accessor g$7302$6275$1CmlGO g$7300$6280$1CmlGO))
   (g$7318$6283$1CmlGO
     g$7318$6378$1CmlGO
     (make-record-type-descriptor
       '&warning
       g$7286$6268$1CmlGO
       'g$7321$1CmlGO
       '#f
       '#f
       '#()))
   (g$7320$6284$1CmlGO g$7320$6379$1CmlGO '#f)
   (g$7319$6285$1CmlGO
     g$7319$6380$1CmlGO
     (make-record-constructor-descriptor
       g$7318$6283$1CmlGO
       g$7287$6270$1CmlGO
       g$7320$6284$1CmlGO))
   (g$7317$6286$1CmlGO
     g$7317$6381$1CmlGO
     (record-predicate g$7318$6283$1CmlGO))
   (g$make-warning$6287$1CmlGO
     g$make-warning$6382$1CmlGO
     (record-constructor g$7319$6285$1CmlGO))
   (g$warning?$6288$1CmlGO
     g$warning?$6383$1CmlGO
     (condition-predicate g$7318$6283$1CmlGO))
   (g$7332$6289$1CmlGO
     g$7332$6384$1CmlGO
     (make-record-type-descriptor
       '&serious
       g$7286$6268$1CmlGO
       'g$7335$1CmlGO
       '#f
       '#f
       '#()))
   (g$7334$6290$1CmlGO g$7334$6385$1CmlGO '#f)
   (g$7333$6291$1CmlGO
     g$7333$6386$1CmlGO
     (make-record-constructor-descriptor
       g$7332$6289$1CmlGO
       g$7287$6270$1CmlGO
       g$7334$6290$1CmlGO))
   (g$7331$6292$1CmlGO
     g$7331$6387$1CmlGO
     (record-predicate g$7332$6289$1CmlGO))
   (g$make-serious-condition$6293$1CmlGO
     g$make-serious-condition$6388$1CmlGO
     (record-constructor g$7333$6291$1CmlGO))
   (g$serious-condition?$6294$1CmlGO
     g$serious-condition?$6389$1CmlGO
     (condition-predicate g$7332$6289$1CmlGO))
   (g$7346$6295$1CmlGO
     g$7346$6390$1CmlGO
     (make-record-type-descriptor
       '&error
       g$7332$6289$1CmlGO
       'g$7349$1CmlGO
       '#f
       '#f
       '#()))
   (g$7348$6296$1CmlGO g$7348$6391$1CmlGO '#f)
   (g$7347$6297$1CmlGO
     g$7347$6392$1CmlGO
     (make-record-constructor-descriptor
       g$7346$6295$1CmlGO
       g$7333$6291$1CmlGO
       g$7348$6296$1CmlGO))
   (g$7345$6298$1CmlGO
     g$7345$6393$1CmlGO
     (record-predicate g$7346$6295$1CmlGO))
   (g$make-error$6299$1CmlGO
     g$make-error$6394$1CmlGO
     (record-constructor g$7347$6297$1CmlGO))
   (g$error?$6300$1CmlGO
     g$error?$6395$1CmlGO
     (condition-predicate g$7346$6295$1CmlGO))
   (g$7360$6301$1CmlGO
     g$7360$6396$1CmlGO
     (make-record-type-descriptor
       '&violation
       g$7332$6289$1CmlGO
       'g$7363$1CmlGO
       '#f
       '#f
       '#()))
   (g$7362$6302$1CmlGO g$7362$6397$1CmlGO '#f)
   (g$7361$6303$1CmlGO
     g$7361$6398$1CmlGO
     (make-record-constructor-descriptor
       g$7360$6301$1CmlGO
       g$7333$6291$1CmlGO
       g$7362$6302$1CmlGO))
   (g$7359$6304$1CmlGO
     g$7359$6399$1CmlGO
     (record-predicate g$7360$6301$1CmlGO))
   (g$make-violation$6305$1CmlGO
     g$make-violation$6400$1CmlGO
     (record-constructor g$7361$6303$1CmlGO))
   (g$violation?$6306$1CmlGO
     g$violation?$6401$1CmlGO
     (condition-predicate g$7360$6301$1CmlGO))
   (g$7374$6307$1CmlGO
     g$7374$6402$1CmlGO
     (make-record-type-descriptor
       '&assertion
       g$7360$6301$1CmlGO
       'g$7377$1CmlGO
       '#f
       '#f
       '#()))
   (g$7376$6308$1CmlGO g$7376$6403$1CmlGO '#f)
   (g$7375$6309$1CmlGO
     g$7375$6404$1CmlGO
     (make-record-constructor-descriptor
       g$7374$6307$1CmlGO
       g$7361$6303$1CmlGO
       g$7376$6308$1CmlGO))
   (g$7373$6310$1CmlGO
     g$7373$6405$1CmlGO
     (record-predicate g$7374$6307$1CmlGO))
   (g$make-assertion-violation$6311$1CmlGO
     g$make-assertion-violation$6406$1CmlGO
     (record-constructor g$7375$6309$1CmlGO))
   (g$assertion-violation?$6312$1CmlGO
     g$assertion-violation?$6407$1CmlGO
     (condition-predicate g$7374$6307$1CmlGO))
   (g$7389$6313$1CmlGO
     g$7389$6408$1CmlGO
     (make-record-type-descriptor
       '&irritants
       g$7286$6268$1CmlGO
       'g$7392$1CmlGO
       '#f
       '#f
       '#((immutable irritants))))
   (g$7391$6314$1CmlGO g$7391$6409$1CmlGO '#f)
   (g$7390$6315$1CmlGO
     g$7390$6410$1CmlGO
     (make-record-constructor-descriptor
       g$7389$6313$1CmlGO
       g$7287$6270$1CmlGO
       g$7391$6314$1CmlGO))
   (g$7388$6316$1CmlGO
     g$7388$6411$1CmlGO
     (record-predicate g$7389$6313$1CmlGO))
   (g$make-irritants-condition$6317$1CmlGO
     g$make-irritants-condition$6412$1CmlGO
     (record-constructor g$7390$6315$1CmlGO))
   (g$7387$6318$1CmlGO
     g$7387$6413$1CmlGO
     (record-accessor g$7389$6313$1CmlGO '0))
   (g$irritants-condition?$6319$1CmlGO
     g$irritants-condition?$6414$1CmlGO
     (condition-predicate g$7389$6313$1CmlGO))
   (g$condition-irritants$6320$1CmlGO
     g$condition-irritants$6415$1CmlGO
     (condition-accessor g$7389$6313$1CmlGO g$7387$6318$1CmlGO))
   (g$7406$6321$1CmlGO
     g$7406$6416$1CmlGO
     (make-record-type-descriptor
       '&who
       g$7286$6268$1CmlGO
       'g$7409$1CmlGO
       '#f
       '#f
       '#((immutable who))))
   (g$7408$6322$1CmlGO g$7408$6417$1CmlGO '#f)
   (g$7407$6323$1CmlGO
     g$7407$6418$1CmlGO
     (make-record-constructor-descriptor
       g$7406$6321$1CmlGO
       g$7287$6270$1CmlGO
       g$7408$6322$1CmlGO))
   (g$7405$6324$1CmlGO
     g$7405$6419$1CmlGO
     (record-predicate g$7406$6321$1CmlGO))
   (g$make-who-condition$6325$1CmlGO
     g$make-who-condition$6420$1CmlGO
     (record-constructor g$7407$6323$1CmlGO))
   (g$7404$6326$1CmlGO
     g$7404$6421$1CmlGO
     (record-accessor g$7406$6321$1CmlGO '0))
   (g$who-condition?$6327$1CmlGO
     g$who-condition?$6422$1CmlGO
     (condition-predicate g$7406$6321$1CmlGO))
   (g$condition-who$6328$1CmlGO
     g$condition-who$6423$1CmlGO
     (condition-accessor g$7406$6321$1CmlGO g$7404$6326$1CmlGO))
   (g$7422$6329$1CmlGO
     g$7422$6424$1CmlGO
     (make-record-type-descriptor
       '&non-continuable
       g$7360$6301$1CmlGO
       'g$7425$1CmlGO
       '#f
       '#f
       '#()))
   (g$7424$6330$1CmlGO g$7424$6425$1CmlGO '#f)
   (g$7423$6331$1CmlGO
     g$7423$6426$1CmlGO
     (make-record-constructor-descriptor
       g$7422$6329$1CmlGO
       g$7361$6303$1CmlGO
       g$7424$6330$1CmlGO))
   (g$7421$6332$1CmlGO
     g$7421$6427$1CmlGO
     (record-predicate g$7422$6329$1CmlGO))
   (g$make-non-continuable-violation$6333$1CmlGO
     g$make-non-continuable-violation$6428$1CmlGO
     (record-constructor g$7423$6331$1CmlGO))
   (g$non-continuable-violation?$6334$1CmlGO
     g$non-continuable-violation?$6429$1CmlGO
     (condition-predicate g$7422$6329$1CmlGO))
   (g$7436$6335$1CmlGO
     g$7436$6430$1CmlGO
     (make-record-type-descriptor
       '&implementation-restriction
       g$7360$6301$1CmlGO
       'g$7439$1CmlGO
       '#f
       '#f
       '#()))
   (g$7438$6336$1CmlGO g$7438$6431$1CmlGO '#f)
   (g$7437$6337$1CmlGO
     g$7437$6432$1CmlGO
     (make-record-constructor-descriptor
       g$7436$6335$1CmlGO
       g$7361$6303$1CmlGO
       g$7438$6336$1CmlGO))
   (g$7435$6338$1CmlGO
     g$7435$6433$1CmlGO
     (record-predicate g$7436$6335$1CmlGO))
   (g$make-implementation-restriction-violation$6339$1CmlGO
     g$make-implementation-restriction-violation$6434$1CmlGO
     (record-constructor g$7437$6337$1CmlGO))
   (g$implementation-restriction-violation?$6340$1CmlGO
     g$implementation-restriction-violation?$6435$1CmlGO
     (condition-predicate g$7436$6335$1CmlGO))
   (g$7450$6341$1CmlGO
     g$7450$6436$1CmlGO
     (make-record-type-descriptor
       '&lexical
       g$7360$6301$1CmlGO
       'g$7453$1CmlGO
       '#f
       '#f
       '#()))
   (g$7452$6342$1CmlGO g$7452$6437$1CmlGO '#f)
   (g$7451$6343$1CmlGO
     g$7451$6438$1CmlGO
     (make-record-constructor-descriptor
       g$7450$6341$1CmlGO
       g$7361$6303$1CmlGO
       g$7452$6342$1CmlGO))
   (g$7449$6344$1CmlGO
     g$7449$6439$1CmlGO
     (record-predicate g$7450$6341$1CmlGO))
   (g$make-lexical-violation$6345$1CmlGO
     g$make-lexical-violation$6440$1CmlGO
     (record-constructor g$7451$6343$1CmlGO))
   (g$lexical-violation?$6346$1CmlGO
     g$lexical-violation?$6441$1CmlGO
     (condition-predicate g$7450$6341$1CmlGO))
   (g$7466$6347$1CmlGO
     g$7466$6442$1CmlGO
     (make-record-type-descriptor
       '&syntax
       g$7360$6301$1CmlGO
       'g$7469$1CmlGO
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$7468$6348$1CmlGO g$7468$6443$1CmlGO '#f)
   (g$7467$6349$1CmlGO
     g$7467$6444$1CmlGO
     (make-record-constructor-descriptor
       g$7466$6347$1CmlGO
       g$7361$6303$1CmlGO
       g$7468$6348$1CmlGO))
   (g$7465$6350$1CmlGO
     g$7465$6445$1CmlGO
     (record-predicate g$7466$6347$1CmlGO))
   (g$make-syntax-violation$6351$1CmlGO
     g$make-syntax-violation$6446$1CmlGO
     (record-constructor g$7467$6349$1CmlGO))
   (g$7463$6352$1CmlGO
     g$7463$6447$1CmlGO
     (record-accessor g$7466$6347$1CmlGO '0))
   (g$7464$6353$1CmlGO
     g$7464$6448$1CmlGO
     (record-accessor g$7466$6347$1CmlGO '1))
   (g$syntax-violation?$6354$1CmlGO
     g$syntax-violation?$6449$1CmlGO
     (condition-predicate g$7466$6347$1CmlGO))
   (g$syntax-violation-form$6355$1CmlGO
     g$syntax-violation-form$6450$1CmlGO
     (condition-accessor g$7466$6347$1CmlGO g$7463$6352$1CmlGO))
   (g$syntax-violation-subform$6356$1CmlGO
     g$syntax-violation-subform$6451$1CmlGO
     (condition-accessor g$7466$6347$1CmlGO g$7464$6353$1CmlGO))
   (g$7484$6357$1CmlGO
     g$7484$6452$1CmlGO
     (make-record-type-descriptor
       '&undefined
       g$7360$6301$1CmlGO
       'g$7487$1CmlGO
       '#f
       '#f
       '#()))
   (g$7486$6358$1CmlGO g$7486$6453$1CmlGO '#f)
   (g$7485$6359$1CmlGO
     g$7485$6454$1CmlGO
     (make-record-constructor-descriptor
       g$7484$6357$1CmlGO
       g$7361$6303$1CmlGO
       g$7486$6358$1CmlGO))
   (g$7483$6360$1CmlGO
     g$7483$6455$1CmlGO
     (record-predicate g$7484$6357$1CmlGO))
   (g$make-undefined-violation$6361$1CmlGO
     g$make-undefined-violation$6456$1CmlGO
     (record-constructor g$7485$6359$1CmlGO))
   (g$undefined-violation?$6362$1CmlGO
     g$undefined-violation?$6457$1CmlGO
     (condition-predicate g$7484$6357$1CmlGO)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$6458$1CmlGO
     g$append!$6464$1CmlGO
     (case-lambda
       ((g$a$6459$1CmlGO . g$b$6460$1CmlGO)
        (if (null? g$a$6459$1CmlGO)
          g$b$6460$1CmlGO
          (if (null? g$b$6460$1CmlGO)
            g$a$6459$1CmlGO
            (begin
              ((letrec ((g$f$6461$1CmlGO
                          (case-lambda
                            ((g$a$6462$1CmlGO)
                             ((case-lambda
                                ((g$n$6463$1CmlGO)
                                 (if (null? g$n$6463$1CmlGO)
                                   (set-cdr! g$a$6462$1CmlGO g$b$6460$1CmlGO)
                                   (g$f$6461$1CmlGO g$n$6463$1CmlGO))))
                              (cdr g$a$6462$1CmlGO))))))
                 g$f$6461$1CmlGO)
               g$a$6459$1CmlGO)
              g$a$6459$1CmlGO)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$6465$1CmlGO
     g$sign$6483$1CmlGO
     (case-lambda
       ((g$n$6471$1CmlGO)
        (if (> g$n$6471$1CmlGO '0) '1 (if (< g$n$6471$1CmlGO '0) '-1 '0)))))
   (g$quotient$6466$1CmlGO
     g$quotient$6484$1CmlGO
     (case-lambda
       ((g$n1$6472$1CmlGO g$n2$6473$1CmlGO)
        (begin
          (if (not (integer-valued? g$n1$6472$1CmlGO))
            (assertion-violation 'quotient '"not an integer" g$n1$6472$1CmlGO)
            (void))
          (if (not (integer-valued? g$n2$6473$1CmlGO))
            (assertion-violation 'quotient '"not an integer" g$n2$6473$1CmlGO)
            (void))
          (* (g$sign$6465$1CmlGO g$n1$6472$1CmlGO)
             (g$sign$6465$1CmlGO g$n2$6473$1CmlGO)
             (div (abs g$n1$6472$1CmlGO) (abs g$n2$6473$1CmlGO)))))))
   (g$remainder$6467$1CmlGO
     g$remainder$6485$1CmlGO
     (case-lambda
       ((g$n1$6474$1CmlGO g$n2$6475$1CmlGO)
        (begin
          (if (not (integer-valued? g$n1$6474$1CmlGO))
            (assertion-violation 'remainder '"not an integer" g$n1$6474$1CmlGO)
            (void))
          (if (not (integer-valued? g$n2$6475$1CmlGO))
            (assertion-violation 'remainder '"not an integer" g$n2$6475$1CmlGO)
            (void))
          (* (g$sign$6465$1CmlGO g$n1$6474$1CmlGO)
             (mod (abs g$n1$6474$1CmlGO) (abs g$n2$6475$1CmlGO)))))))
   (g$modulo$6468$1CmlGO
     g$modulo$6486$1CmlGO
     (case-lambda
       ((g$n1$6476$1CmlGO g$n2$6477$1CmlGO)
        (begin
          (if (not (integer-valued? g$n1$6476$1CmlGO))
            (assertion-violation 'modulo '"not an integer" g$n1$6476$1CmlGO)
            (void))
          (if (not (integer-valued? g$n2$6477$1CmlGO))
            (assertion-violation 'modulo '"not an integer" g$n2$6477$1CmlGO)
            (void))
          (* (g$sign$6465$1CmlGO g$n2$6477$1CmlGO)
             (mod (* (g$sign$6465$1CmlGO g$n2$6477$1CmlGO) g$n1$6476$1CmlGO)
                  (abs g$n2$6477$1CmlGO)))))))
   (g$make-promise$6469$1CmlGO
     g$make-promise$6487$1CmlGO
     (case-lambda
       ((g$proc$6478$1CmlGO)
        ((case-lambda
           ((g$result-ready?$6479$1CmlGO g$result$6480$1CmlGO)
            (case-lambda
              (()
               (if g$result-ready?$6479$1CmlGO
                 g$result$6480$1CmlGO
                 ((case-lambda
                    ((g$x$6481$1CmlGO)
                     (if g$result-ready?$6479$1CmlGO
                       g$result$6480$1CmlGO
                       (begin
                         (set! g$result-ready?$6479$1CmlGO '#t)
                         (set! g$result$6480$1CmlGO g$x$6481$1CmlGO)
                         g$result$6480$1CmlGO))))
                  (g$proc$6478$1CmlGO)))))))
         '#f
         '#f))))
   (g$force$6470$1CmlGO
     g$force$6488$1CmlGO
     (case-lambda ((g$object$6482$1CmlGO) (g$object$6482$1CmlGO)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$6489$1CmlGO
     g$split$6515$1CmlGO
     (case-lambda
       ((g$ls$6492$1CmlGO)
        ((letrec ((g$loop$6493$1CmlGO
                    (case-lambda
                      ((g$rest$6494$1CmlGO
                         g$left$6495$1CmlGO
                         g$right$6496$1CmlGO)
                       (if (null? g$rest$6494$1CmlGO)
                         (cons g$left$6495$1CmlGO g$right$6496$1CmlGO)
                         (if (null? (cdr g$rest$6494$1CmlGO))
                           (cons
                             (cons (car g$rest$6494$1CmlGO) g$left$6495$1CmlGO)
                             g$right$6496$1CmlGO)
                           (g$loop$6493$1CmlGO
                             (g$cddr$5834$1CmlGO g$rest$6494$1CmlGO)
                             (cons (car g$rest$6494$1CmlGO) g$left$6495$1CmlGO)
                             (cons
                               (g$cadr$5832$1CmlGO g$rest$6494$1CmlGO)
                               g$right$6496$1CmlGO))))))))
           g$loop$6493$1CmlGO)
         g$ls$6492$1CmlGO
         '()
         '()))))
   (g$reverse-it$6490$1CmlGO
     g$reverse-it$6516$1CmlGO
     (case-lambda
       ((g$head$6497$1CmlGO g$tail$6498$1CmlGO)
        (if (null? g$head$6497$1CmlGO)
          g$tail$6498$1CmlGO
          ((case-lambda
             ((g$hd$6499$1CmlGO g$tl$6500$1CmlGO)
              (g$reverse-it$6490$1CmlGO
                g$tl$6500$1CmlGO
                (cons g$hd$6499$1CmlGO g$tail$6498$1CmlGO))))
           (car g$head$6497$1CmlGO)
           (cdr g$head$6497$1CmlGO))))))
   (g$list-sort$6491$1CmlGO
     g$list-sort$6517$1CmlGO
     (case-lambda
       ((g$precedes?$6501$1CmlGO g$ls$6502$1CmlGO)
        ((case-lambda
           ((g$merge$6503$1CmlGO)
            ((case-lambda
               (()
                (if (null? g$ls$6502$1CmlGO)
                  '()
                  ((letrec ((g$helper$6504$1CmlGO
                              (case-lambda
                                ((g$piece$6505$1CmlGO)
                                 (if (null? (cdr g$piece$6505$1CmlGO))
                                   g$piece$6505$1CmlGO
                                   ((case-lambda
                                      ((g$parts$6506$1CmlGO)
                                       (g$merge$6503$1CmlGO
                                         (g$helper$6504$1CmlGO
                                           (car g$parts$6506$1CmlGO))
                                         (g$helper$6504$1CmlGO
                                           (cdr g$parts$6506$1CmlGO)))))
                                    (g$split$6489$1CmlGO
                                      g$piece$6505$1CmlGO)))))))
                     g$helper$6504$1CmlGO)
                   g$ls$6502$1CmlGO)))))))
         (case-lambda
           ((g$list-1$6507$1CmlGO g$list-2$6508$1CmlGO)
            ((letrec ((g$loop$6509$1CmlGO
                        (case-lambda
                          ((g$source-1$6510$1CmlGO
                             g$source-2$6511$1CmlGO
                             g$so-far$6512$1CmlGO)
                           (if (null? g$source-1$6510$1CmlGO)
                             (g$reverse-it$6490$1CmlGO
                               g$so-far$6512$1CmlGO
                               g$source-2$6511$1CmlGO)
                             (if (null? g$source-2$6511$1CmlGO)
                               (g$reverse-it$6490$1CmlGO
                                 g$so-far$6512$1CmlGO
                                 g$source-1$6510$1CmlGO)
                               ((case-lambda
                                  ((g$car-1$6513$1CmlGO g$car-2$6514$1CmlGO)
                                   (if (g$precedes?$6501$1CmlGO
                                         g$car-2$6514$1CmlGO
                                         g$car-1$6513$1CmlGO)
                                     (g$loop$6509$1CmlGO
                                       g$source-1$6510$1CmlGO
                                       (cdr g$source-2$6511$1CmlGO)
                                       (cons
                                         g$car-2$6514$1CmlGO
                                         g$so-far$6512$1CmlGO))
                                     (g$loop$6509$1CmlGO
                                       g$source-2$6511$1CmlGO
                                       (cdr g$source-1$6510$1CmlGO)
                                       (cons
                                         g$car-1$6513$1CmlGO
                                         g$so-far$6512$1CmlGO)))))
                                (car g$source-1$6510$1CmlGO)
                                (car g$source-2$6511$1CmlGO))))))))
               g$loop$6509$1CmlGO)
             g$list-1$6507$1CmlGO
             g$list-2$6508$1CmlGO
             '()))))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$6524$1CmlGO
     g$string-ci=?$6590$1CmlGO
     (case-lambda
       ((g$a$6540$1CmlGO g$b$6541$1CmlGO . g$rest$6542$1CmlGO)
        (begin
          (if (not (string? g$a$6540$1CmlGO))
            (assertion-violation 'string-ci=? '"not a string" g$a$6540$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6543$1CmlGO)
               (begin
                 (if (not (string? g$x$6543$1CmlGO))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$6543$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6544$1CmlGO)
                     (begin
                       (set! g$a$6540$1CmlGO g$x$6543$1CmlGO)
                       g$r$6544$1CmlGO)))
                  (= (string-ci-compare g$a$6540$1CmlGO g$x$6543$1CmlGO) '0)))))
            (cons g$b$6541$1CmlGO g$rest$6542$1CmlGO))))))
   (g$string-ci<?$6525$1CmlGO
     g$string-ci<?$6591$1CmlGO
     (case-lambda
       ((g$a$6545$1CmlGO g$b$6546$1CmlGO . g$rest$6547$1CmlGO)
        (begin
          (if (not (string? g$a$6545$1CmlGO))
            (assertion-violation 'string-ci<? '"not a string" g$a$6545$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6548$1CmlGO)
               (begin
                 (if (not (string? g$x$6548$1CmlGO))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$6548$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6549$1CmlGO)
                     (begin
                       (set! g$a$6545$1CmlGO g$x$6548$1CmlGO)
                       g$r$6549$1CmlGO)))
                  (< (string-ci-compare g$a$6545$1CmlGO g$x$6548$1CmlGO) '0)))))
            (cons g$b$6546$1CmlGO g$rest$6547$1CmlGO))))))
   (g$string-ci>?$6526$1CmlGO
     g$string-ci>?$6592$1CmlGO
     (case-lambda
       ((g$a$6550$1CmlGO g$b$6551$1CmlGO . g$rest$6552$1CmlGO)
        (begin
          (if (not (string? g$a$6550$1CmlGO))
            (assertion-violation 'string-ci>? '"not a string" g$a$6550$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6553$1CmlGO)
               (begin
                 (if (not (string? g$x$6553$1CmlGO))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$6553$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6554$1CmlGO)
                     (begin
                       (set! g$a$6550$1CmlGO g$x$6553$1CmlGO)
                       g$r$6554$1CmlGO)))
                  (> (string-ci-compare g$a$6550$1CmlGO g$x$6553$1CmlGO) '0)))))
            (cons g$b$6551$1CmlGO g$rest$6552$1CmlGO))))))
   (g$string-ci<=?$6527$1CmlGO
     g$string-ci<=?$6593$1CmlGO
     (case-lambda
       ((g$a$6555$1CmlGO g$b$6556$1CmlGO . g$rest$6557$1CmlGO)
        (begin
          (if (not (string? g$a$6555$1CmlGO))
            (assertion-violation 'string-ci<=? '"not a string" g$a$6555$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6558$1CmlGO)
               (begin
                 (if (not (string? g$x$6558$1CmlGO))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$6558$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6559$1CmlGO)
                     (begin
                       (set! g$a$6555$1CmlGO g$x$6558$1CmlGO)
                       g$r$6559$1CmlGO)))
                  (<= (string-ci-compare g$a$6555$1CmlGO g$x$6558$1CmlGO)
                      '0)))))
            (cons g$b$6556$1CmlGO g$rest$6557$1CmlGO))))))
   (g$string-ci>=?$6528$1CmlGO
     g$string-ci>=?$6594$1CmlGO
     (case-lambda
       ((g$a$6560$1CmlGO g$b$6561$1CmlGO . g$rest$6562$1CmlGO)
        (begin
          (if (not (string? g$a$6560$1CmlGO))
            (assertion-violation 'string-ci>=? '"not a string" g$a$6560$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6563$1CmlGO)
               (begin
                 (if (not (string? g$x$6563$1CmlGO))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$6563$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6564$1CmlGO)
                     (begin
                       (set! g$a$6560$1CmlGO g$x$6563$1CmlGO)
                       g$r$6564$1CmlGO)))
                  (>= (string-ci-compare g$a$6560$1CmlGO g$x$6563$1CmlGO)
                      '0)))))
            (cons g$b$6561$1CmlGO g$rest$6562$1CmlGO))))))
   (g$char-ci=?$6535$1CmlGO
     g$char-ci=?$6595$1CmlGO
     (case-lambda
       ((g$a$6565$1CmlGO g$b$6566$1CmlGO . g$rest$6567$1CmlGO)
        (begin
          (if (not (char? g$a$6565$1CmlGO))
            (assertion-violation 'char-ci=? '"not a char" g$a$6565$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6568$1CmlGO)
               (begin
                 (if (not (char? g$x$6568$1CmlGO))
                   (assertion-violation
                     'char-ci=?
                     '"not a char"
                     g$x$6568$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6569$1CmlGO)
                     (begin
                       (set! g$a$6565$1CmlGO g$x$6568$1CmlGO)
                       g$r$6569$1CmlGO)))
                  (= (char->integer (char-upcase g$a$6565$1CmlGO))
                     (char->integer (char-upcase g$x$6568$1CmlGO)))))))
            (cons g$b$6566$1CmlGO g$rest$6567$1CmlGO))))))
   (g$char-ci<?$6536$1CmlGO
     g$char-ci<?$6596$1CmlGO
     (case-lambda
       ((g$a$6570$1CmlGO g$b$6571$1CmlGO . g$rest$6572$1CmlGO)
        (begin
          (if (not (char? g$a$6570$1CmlGO))
            (assertion-violation 'char-ci<? '"not a char" g$a$6570$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6573$1CmlGO)
               (begin
                 (if (not (char? g$x$6573$1CmlGO))
                   (assertion-violation
                     'char-ci<?
                     '"not a char"
                     g$x$6573$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6574$1CmlGO)
                     (begin
                       (set! g$a$6570$1CmlGO g$x$6573$1CmlGO)
                       g$r$6574$1CmlGO)))
                  (< (char->integer (char-upcase g$a$6570$1CmlGO))
                     (char->integer (char-upcase g$x$6573$1CmlGO)))))))
            (cons g$b$6571$1CmlGO g$rest$6572$1CmlGO))))))
   (g$char-ci>?$6537$1CmlGO
     g$char-ci>?$6597$1CmlGO
     (case-lambda
       ((g$a$6575$1CmlGO g$b$6576$1CmlGO . g$rest$6577$1CmlGO)
        (begin
          (if (not (char? g$a$6575$1CmlGO))
            (assertion-violation 'char-ci>? '"not a char" g$a$6575$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6578$1CmlGO)
               (begin
                 (if (not (char? g$x$6578$1CmlGO))
                   (assertion-violation
                     'char-ci>?
                     '"not a char"
                     g$x$6578$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6579$1CmlGO)
                     (begin
                       (set! g$a$6575$1CmlGO g$x$6578$1CmlGO)
                       g$r$6579$1CmlGO)))
                  (> (char->integer (char-upcase g$a$6575$1CmlGO))
                     (char->integer (char-upcase g$x$6578$1CmlGO)))))))
            (cons g$b$6576$1CmlGO g$rest$6577$1CmlGO))))))
   (g$char-ci<=?$6538$1CmlGO
     g$char-ci<=?$6598$1CmlGO
     (case-lambda
       ((g$a$6580$1CmlGO g$b$6581$1CmlGO . g$rest$6582$1CmlGO)
        (begin
          (if (not (char? g$a$6580$1CmlGO))
            (assertion-violation 'char-ci<=? '"not a char" g$a$6580$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6583$1CmlGO)
               (begin
                 (if (not (char? g$x$6583$1CmlGO))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$6583$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6584$1CmlGO)
                     (begin
                       (set! g$a$6580$1CmlGO g$x$6583$1CmlGO)
                       g$r$6584$1CmlGO)))
                  (<= (char->integer (char-upcase g$a$6580$1CmlGO))
                      (char->integer (char-upcase g$x$6583$1CmlGO)))))))
            (cons g$b$6581$1CmlGO g$rest$6582$1CmlGO))))))
   (g$char-ci>=?$6539$1CmlGO
     g$char-ci>=?$6599$1CmlGO
     (case-lambda
       ((g$a$6585$1CmlGO g$b$6586$1CmlGO . g$rest$6587$1CmlGO)
        (begin
          (if (not (char? g$a$6585$1CmlGO))
            (assertion-violation 'char-ci>=? '"not a char" g$a$6585$1CmlGO)
            (void))
          (g$for-all$5668$1CmlGO
            (case-lambda
              ((g$x$6588$1CmlGO)
               (begin
                 (if (not (char? g$x$6588$1CmlGO))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$6588$1CmlGO)
                   (void))
                 ((case-lambda
                    ((g$r$6589$1CmlGO)
                     (begin
                       (set! g$a$6585$1CmlGO g$x$6588$1CmlGO)
                       g$r$6589$1CmlGO)))
                  (>= (char->integer (char-upcase g$a$6585$1CmlGO))
                      (char->integer (char-upcase g$x$6588$1CmlGO)))))))
            (cons g$b$6586$1CmlGO g$rest$6587$1CmlGO)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$6600$1CmlGO
     g$bitwise-if$6647$1CmlGO
     (case-lambda
       ((g$ei1$6607$1CmlGO g$ei2$6608$1CmlGO g$ei3$6609$1CmlGO)
        (bitwise-ior
          (bitwise-and g$ei1$6607$1CmlGO g$ei2$6608$1CmlGO)
          (bitwise-and (bitwise-not g$ei1$6607$1CmlGO) g$ei3$6609$1CmlGO)))))
   (g$bitwise-copy-bit$6601$1CmlGO
     g$bitwise-copy-bit$6648$1CmlGO
     (case-lambda
       ((g$ei1$6610$1CmlGO g$ei2$6611$1CmlGO g$ei3$6612$1CmlGO)
        ((case-lambda
           ((g$mask$6613$1CmlGO)
            ((case-lambda
               (()
                (g$bitwise-if$6600$1CmlGO
                  g$mask$6613$1CmlGO
                  (g$bitwise-arithmetic-shift-left$6604$1CmlGO
                    g$ei3$6612$1CmlGO
                    g$ei2$6611$1CmlGO)
                  g$ei1$6610$1CmlGO))))))
         (g$bitwise-arithmetic-shift-left$6604$1CmlGO '1 g$ei2$6611$1CmlGO)))))
   (g$bitwise-bit-field$6602$1CmlGO
     g$bitwise-bit-field$6649$1CmlGO
     (case-lambda
       ((g$ei1$6614$1CmlGO g$ei2$6615$1CmlGO g$ei3$6616$1CmlGO)
        ((case-lambda
           ((g$mask$6617$1CmlGO)
            (g$bitwise-arithmetic-shift-right$6605$1CmlGO
              (bitwise-and g$ei1$6614$1CmlGO g$mask$6617$1CmlGO)
              g$ei2$6615$1CmlGO)))
         (bitwise-not
           (g$bitwise-arithmetic-shift-left$6604$1CmlGO
             '-1
             g$ei3$6616$1CmlGO))))))
   (g$bitwise-copy-bit-field$6603$1CmlGO
     g$bitwise-copy-bit-field$6650$1CmlGO
     (case-lambda
       ((g$ei1$6618$1CmlGO
          g$ei2$6619$1CmlGO
          g$ei3$6620$1CmlGO
          g$ei4$6621$1CmlGO)
        ((case-lambda
           ((g$to$6622$1CmlGO)
            ((case-lambda
               ((g$start$6623$1CmlGO)
                ((case-lambda
                   ((g$end$6624$1CmlGO)
                    ((case-lambda
                       ((g$from$6625$1CmlGO)
                        ((case-lambda
                           ((g$mask1$6626$1CmlGO)
                            ((case-lambda
                               ((g$mask2$6627$1CmlGO)
                                ((case-lambda
                                   ((g$mask$6628$1CmlGO)
                                    ((case-lambda
                                       (()
                                        (g$bitwise-if$6600$1CmlGO
                                          g$mask$6628$1CmlGO
                                          (g$bitwise-arithmetic-shift-left$6604$1CmlGO
                                            g$from$6625$1CmlGO
                                            g$start$6623$1CmlGO)
                                          g$to$6622$1CmlGO))))))
                                 (bitwise-and
                                   g$mask1$6626$1CmlGO
                                   g$mask2$6627$1CmlGO))))
                             (bitwise-not
                               (g$bitwise-arithmetic-shift-left$6604$1CmlGO
                                 '-1
                                 g$end$6624$1CmlGO)))))
                         (g$bitwise-arithmetic-shift-left$6604$1CmlGO
                           '-1
                           g$start$6623$1CmlGO))))
                     g$ei4$6621$1CmlGO)))
                 g$ei3$6620$1CmlGO)))
             g$ei2$6619$1CmlGO)))
         g$ei1$6618$1CmlGO))))
   (g$bitwise-arithmetic-shift-left$6604$1CmlGO
     g$bitwise-arithmetic-shift-left$6651$1CmlGO
     (case-lambda
       ((g$ei1$6629$1CmlGO g$ei2$6630$1CmlGO)
        (bitwise-arithmetic-shift g$ei1$6629$1CmlGO g$ei2$6630$1CmlGO))))
   (g$bitwise-arithmetic-shift-right$6605$1CmlGO
     g$bitwise-arithmetic-shift-right$6652$1CmlGO
     (case-lambda
       ((g$ei1$6631$1CmlGO g$ei2$6632$1CmlGO)
        (bitwise-arithmetic-shift g$ei1$6631$1CmlGO (- g$ei2$6632$1CmlGO)))))
   (g$bitwise-rotate-bit-field$6606$1CmlGO
     g$bitwise-rotate-bit-field$6653$1CmlGO
     (case-lambda
       ((g$ei1$6633$1CmlGO
          g$ei2$6634$1CmlGO
          g$ei3$6635$1CmlGO
          g$ei4$6636$1CmlGO)
        ((case-lambda
           ((g$n$6637$1CmlGO)
            ((case-lambda
               ((g$start$6638$1CmlGO)
                ((case-lambda
                   ((g$end$6639$1CmlGO)
                    ((case-lambda
                       ((g$count$6640$1CmlGO)
                        ((case-lambda
                           ((g$width$6641$1CmlGO)
                            ((case-lambda
                               (()
                                (if (positive? g$width$6641$1CmlGO)
                                  ((case-lambda
                                     ((g$count$6642$1CmlGO)
                                      ((case-lambda
                                         ((g$field0$6643$1CmlGO)
                                          ((case-lambda
                                             ((g$field1$6644$1CmlGO)
                                              ((case-lambda
                                                 ((g$field2$6645$1CmlGO)
                                                  ((case-lambda
                                                     ((g$field$6646$1CmlGO)
                                                      ((case-lambda
                                                         (()
                                                          (g$bitwise-copy-bit-field$6603$1CmlGO
                                                            g$n$6637$1CmlGO
                                                            g$start$6638$1CmlGO
                                                            g$end$6639$1CmlGO
                                                            g$field$6646$1CmlGO))))))
                                                   (bitwise-ior
                                                     g$field1$6644$1CmlGO
                                                     g$field2$6645$1CmlGO))))
                                               (g$bitwise-arithmetic-shift-right$6605$1CmlGO
                                                 g$field0$6643$1CmlGO
                                                 (- g$width$6641$1CmlGO
                                                    g$count$6642$1CmlGO)))))
                                           (g$bitwise-arithmetic-shift-left$6604$1CmlGO
                                             g$field0$6643$1CmlGO
                                             g$count$6642$1CmlGO))))
                                       (g$bitwise-bit-field$6602$1CmlGO
                                         g$n$6637$1CmlGO
                                         g$start$6638$1CmlGO
                                         g$end$6639$1CmlGO))))
                                   (mod g$count$6640$1CmlGO
                                        g$width$6641$1CmlGO))
                                  g$n$6637$1CmlGO))))))
                         (- g$end$6639$1CmlGO g$start$6638$1CmlGO))))
                     g$ei4$6636$1CmlGO)))
                 g$ei3$6635$1CmlGO)))
             g$ei2$6634$1CmlGO)))
         g$ei1$6633$1CmlGO)))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxif$6654$1CmlGO
     g$fxif$6701$1CmlGO
     (case-lambda
       ((g$fx1$6661$1CmlGO g$fx2$6662$1CmlGO g$fx3$6663$1CmlGO)
        (fxior
          (fxand g$fx1$6661$1CmlGO g$fx2$6662$1CmlGO)
          (fxand (fxnot g$fx1$6661$1CmlGO) g$fx3$6663$1CmlGO)))))
   (g$fxcopy-bit$6655$1CmlGO
     g$fxcopy-bit$6702$1CmlGO
     (case-lambda
       ((g$fx1$6664$1CmlGO g$fx2$6665$1CmlGO g$fx3$6666$1CmlGO)
        ((case-lambda
           ((g$mask$6667$1CmlGO)
            ((case-lambda
               (()
                (g$fxif$6654$1CmlGO
                  g$mask$6667$1CmlGO
                  (g$fxarithmetic-shift-left$6658$1CmlGO
                    g$fx3$6666$1CmlGO
                    g$fx2$6665$1CmlGO)
                  g$fx1$6664$1CmlGO))))))
         (g$fxarithmetic-shift-left$6658$1CmlGO '1 g$fx2$6665$1CmlGO)))))
   (g$fxbit-field$6656$1CmlGO
     g$fxbit-field$6703$1CmlGO
     (case-lambda
       ((g$fx1$6668$1CmlGO g$fx2$6669$1CmlGO g$fx3$6670$1CmlGO)
        ((case-lambda
           ((g$mask$6671$1CmlGO)
            ((case-lambda
               (()
                (g$fxarithmetic-shift-right$6659$1CmlGO
                  (fxand g$fx1$6668$1CmlGO g$mask$6671$1CmlGO)
                  g$fx2$6669$1CmlGO))))))
         (fxnot
           (g$fxarithmetic-shift-left$6658$1CmlGO '-1 g$fx3$6670$1CmlGO))))))
   (g$fxcopy-bit-field$6657$1CmlGO
     g$fxcopy-bit-field$6704$1CmlGO
     (case-lambda
       ((g$fx1$6672$1CmlGO
          g$fx2$6673$1CmlGO
          g$fx3$6674$1CmlGO
          g$fx4$6675$1CmlGO)
        ((case-lambda
           ((g$to$6676$1CmlGO)
            ((case-lambda
               ((g$start$6677$1CmlGO)
                ((case-lambda
                   ((g$end$6678$1CmlGO)
                    ((case-lambda
                       ((g$from$6679$1CmlGO)
                        ((case-lambda
                           ((g$mask1$6680$1CmlGO)
                            ((case-lambda
                               ((g$mask2$6681$1CmlGO)
                                ((case-lambda
                                   ((g$mask$6682$1CmlGO)
                                    ((case-lambda
                                       (()
                                        (g$fxif$6654$1CmlGO
                                          g$mask$6682$1CmlGO
                                          (g$fxarithmetic-shift-left$6658$1CmlGO
                                            g$from$6679$1CmlGO
                                            g$start$6677$1CmlGO)
                                          g$to$6676$1CmlGO))))))
                                 (fxand
                                   g$mask1$6680$1CmlGO
                                   g$mask2$6681$1CmlGO))))
                             (fxnot
                               (g$fxarithmetic-shift-left$6658$1CmlGO
                                 '-1
                                 g$end$6678$1CmlGO)))))
                         (g$fxarithmetic-shift-left$6658$1CmlGO
                           '-1
                           g$start$6677$1CmlGO))))
                     g$fx4$6675$1CmlGO)))
                 g$fx3$6674$1CmlGO)))
             g$fx2$6673$1CmlGO)))
         g$fx1$6672$1CmlGO))))
   (g$fxarithmetic-shift-left$6658$1CmlGO
     g$fxarithmetic-shift-left$6705$1CmlGO
     (case-lambda
       ((g$fx1$6683$1CmlGO g$fx2$6684$1CmlGO)
        (fxarithmetic-shift g$fx1$6683$1CmlGO g$fx2$6684$1CmlGO))))
   (g$fxarithmetic-shift-right$6659$1CmlGO
     g$fxarithmetic-shift-right$6706$1CmlGO
     (case-lambda
       ((g$fx1$6685$1CmlGO g$fx2$6686$1CmlGO)
        (fxarithmetic-shift g$fx1$6685$1CmlGO (- g$fx2$6686$1CmlGO)))))
   (g$fxrotate-bit-field$6660$1CmlGO
     g$fxrotate-bit-field$6707$1CmlGO
     (case-lambda
       ((g$fx1$6687$1CmlGO
          g$fx2$6688$1CmlGO
          g$fx3$6689$1CmlGO
          g$fx4$6690$1CmlGO)
        ((case-lambda
           ((g$n$6691$1CmlGO)
            ((case-lambda
               ((g$start$6692$1CmlGO)
                ((case-lambda
                   ((g$end$6693$1CmlGO)
                    ((case-lambda
                       ((g$count$6694$1CmlGO)
                        ((case-lambda
                           ((g$width$6695$1CmlGO)
                            ((case-lambda
                               (()
                                (if (positive? g$width$6695$1CmlGO)
                                  ((case-lambda
                                     ((g$count$6696$1CmlGO)
                                      ((case-lambda
                                         ((g$field0$6697$1CmlGO)
                                          ((case-lambda
                                             ((g$field1$6698$1CmlGO)
                                              ((case-lambda
                                                 ((g$field2$6699$1CmlGO)
                                                  ((case-lambda
                                                     ((g$field$6700$1CmlGO)
                                                      ((case-lambda
                                                         (()
                                                          (g$fxcopy-bit-field$6657$1CmlGO
                                                            g$n$6691$1CmlGO
                                                            g$start$6692$1CmlGO
                                                            g$end$6693$1CmlGO
                                                            g$field$6700$1CmlGO))))))
                                                   (fxior
                                                     g$field1$6698$1CmlGO
                                                     g$field2$6699$1CmlGO))))
                                               (g$fxarithmetic-shift-right$6659$1CmlGO
                                                 g$field0$6697$1CmlGO
                                                 (- g$width$6695$1CmlGO
                                                    g$count$6696$1CmlGO)))))
                                           (g$fxarithmetic-shift-left$6658$1CmlGO
                                             g$field0$6697$1CmlGO
                                             g$count$6696$1CmlGO))))
                                       (g$fxbit-field$6656$1CmlGO
                                         g$n$6691$1CmlGO
                                         g$start$6692$1CmlGO
                                         g$end$6693$1CmlGO))))
                                   (mod g$count$6694$1CmlGO
                                        g$width$6695$1CmlGO))
                                  g$n$6691$1CmlGO))))))
                         (- g$end$6693$1CmlGO g$start$6692$1CmlGO))))
                     g$fx4$6690$1CmlGO)))
                 g$fx3$6689$1CmlGO)))
             g$fx2$6688$1CmlGO)))
         g$fx1$6687$1CmlGO)))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7782$6708$1CmlGO
     g$7782$6720$1CmlGO
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7785$1CmlGO
       '#f
       '#f
       '#()))
   (g$7784$6709$1CmlGO g$7784$6721$1CmlGO '#f)
   (g$7783$6710$1CmlGO
     g$7783$6722$1CmlGO
     (make-record-constructor-descriptor
       g$7782$6708$1CmlGO
       &implementation-restriction-rcd
       g$7784$6709$1CmlGO))
   (g$7781$6711$1CmlGO
     g$7781$6723$1CmlGO
     (record-predicate g$7782$6708$1CmlGO))
   (g$make-no-infinities-violation$6712$1CmlGO
     g$make-no-infinities-violation$6724$1CmlGO
     (record-constructor g$7783$6710$1CmlGO))
   (g$no-infinities-violation?$6713$1CmlGO
     g$no-infinities-violation?$6725$1CmlGO
     (condition-predicate g$7782$6708$1CmlGO))
   (g$7796$6714$1CmlGO
     g$7796$6726$1CmlGO
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7799$1CmlGO
       '#f
       '#f
       '#()))
   (g$7798$6715$1CmlGO g$7798$6727$1CmlGO '#f)
   (g$7797$6716$1CmlGO
     g$7797$6728$1CmlGO
     (make-record-constructor-descriptor
       g$7796$6714$1CmlGO
       &implementation-restriction-rcd
       g$7798$6715$1CmlGO))
   (g$7795$6717$1CmlGO
     g$7795$6729$1CmlGO
     (record-predicate g$7796$6714$1CmlGO))
   (g$make-no-nans-violation$6718$1CmlGO
     g$make-no-nans-violation$6730$1CmlGO
     (record-constructor g$7797$6716$1CmlGO))
   (g$no-nans-violation?$6719$1CmlGO
     g$no-nans-violation?$6731$1CmlGO
     (condition-predicate g$7796$6714$1CmlGO)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7811$6732$1CmlGO
     g$7811$6812$1CmlGO
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7814$1CmlGO
       '#f
       '#f
       '#()))
   (g$7813$6733$1CmlGO g$7813$6813$1CmlGO '#f)
   (g$7812$6734$1CmlGO
     g$7812$6814$1CmlGO
     (make-record-constructor-descriptor
       g$7811$6732$1CmlGO
       &error-rcd
       g$7813$6733$1CmlGO))
   (g$7810$6735$1CmlGO
     g$7810$6815$1CmlGO
     (record-predicate g$7811$6732$1CmlGO))
   (g$make-i/o-error$6736$1CmlGO
     g$make-i/o-error$6816$1CmlGO
     (record-constructor g$7812$6734$1CmlGO))
   (g$i/o-error?$6737$1CmlGO
     g$i/o-error?$6817$1CmlGO
     (condition-predicate g$7811$6732$1CmlGO))
   (g$7825$6738$1CmlGO
     g$7825$6818$1CmlGO
     (make-record-type-descriptor
       '&i/o-read
       g$7811$6732$1CmlGO
       'g$7828$1CmlGO
       '#f
       '#f
       '#()))
   (g$7827$6739$1CmlGO g$7827$6819$1CmlGO '#f)
   (g$7826$6740$1CmlGO
     g$7826$6820$1CmlGO
     (make-record-constructor-descriptor
       g$7825$6738$1CmlGO
       g$7812$6734$1CmlGO
       g$7827$6739$1CmlGO))
   (g$7824$6741$1CmlGO
     g$7824$6821$1CmlGO
     (record-predicate g$7825$6738$1CmlGO))
   (g$make-i/o-read-error$6742$1CmlGO
     g$make-i/o-read-error$6822$1CmlGO
     (record-constructor g$7826$6740$1CmlGO))
   (g$i/o-read-error?$6743$1CmlGO
     g$i/o-read-error?$6823$1CmlGO
     (condition-predicate g$7825$6738$1CmlGO))
   (g$7839$6744$1CmlGO
     g$7839$6824$1CmlGO
     (make-record-type-descriptor
       '&i/o-write
       g$7811$6732$1CmlGO
       'g$7842$1CmlGO
       '#f
       '#f
       '#()))
   (g$7841$6745$1CmlGO g$7841$6825$1CmlGO '#f)
   (g$7840$6746$1CmlGO
     g$7840$6826$1CmlGO
     (make-record-constructor-descriptor
       g$7839$6744$1CmlGO
       g$7812$6734$1CmlGO
       g$7841$6745$1CmlGO))
   (g$7838$6747$1CmlGO
     g$7838$6827$1CmlGO
     (record-predicate g$7839$6744$1CmlGO))
   (g$make-i/o-write-error$6748$1CmlGO
     g$make-i/o-write-error$6828$1CmlGO
     (record-constructor g$7840$6746$1CmlGO))
   (g$i/o-write-error?$6749$1CmlGO
     g$i/o-write-error?$6829$1CmlGO
     (condition-predicate g$7839$6744$1CmlGO))
   (g$7854$6750$1CmlGO
     g$7854$6830$1CmlGO
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7811$6732$1CmlGO
       'g$7857$1CmlGO
       '#f
       '#f
       '#((immutable position))))
   (g$7856$6751$1CmlGO g$7856$6831$1CmlGO '#f)
   (g$7855$6752$1CmlGO
     g$7855$6832$1CmlGO
     (make-record-constructor-descriptor
       g$7854$6750$1CmlGO
       g$7812$6734$1CmlGO
       g$7856$6751$1CmlGO))
   (g$7853$6753$1CmlGO
     g$7853$6833$1CmlGO
     (record-predicate g$7854$6750$1CmlGO))
   (g$make-i/o-invalid-position-error$6754$1CmlGO
     g$make-i/o-invalid-position-error$6834$1CmlGO
     (record-constructor g$7855$6752$1CmlGO))
   (g$7852$6755$1CmlGO
     g$7852$6835$1CmlGO
     (record-accessor g$7854$6750$1CmlGO '0))
   (g$i/o-invalid-position-error?$6756$1CmlGO
     g$i/o-invalid-position-error?$6836$1CmlGO
     (condition-predicate g$7854$6750$1CmlGO))
   (g$i/o-error-position$6757$1CmlGO
     g$i/o-error-position$6837$1CmlGO
     (condition-accessor g$7854$6750$1CmlGO g$7852$6755$1CmlGO))
   (g$7871$6758$1CmlGO
     g$7871$6838$1CmlGO
     (make-record-type-descriptor
       '&i/o-filename
       g$7811$6732$1CmlGO
       'g$7874$1CmlGO
       '#f
       '#f
       '#((immutable filename))))
   (g$7873$6759$1CmlGO g$7873$6839$1CmlGO '#f)
   (g$7872$6760$1CmlGO
     g$7872$6840$1CmlGO
     (make-record-constructor-descriptor
       g$7871$6758$1CmlGO
       g$7812$6734$1CmlGO
       g$7873$6759$1CmlGO))
   (g$7870$6761$1CmlGO
     g$7870$6841$1CmlGO
     (record-predicate g$7871$6758$1CmlGO))
   (g$make-i/o-filename-error$6762$1CmlGO
     g$make-i/o-filename-error$6842$1CmlGO
     (record-constructor g$7872$6760$1CmlGO))
   (g$7869$6763$1CmlGO
     g$7869$6843$1CmlGO
     (record-accessor g$7871$6758$1CmlGO '0))
   (g$i/o-filename-error?$6764$1CmlGO
     g$i/o-filename-error?$6844$1CmlGO
     (condition-predicate g$7871$6758$1CmlGO))
   (g$i/o-error-filename$6765$1CmlGO
     g$i/o-error-filename$6845$1CmlGO
     (condition-accessor g$7871$6758$1CmlGO g$7869$6763$1CmlGO))
   (g$7887$6766$1CmlGO
     g$7887$6846$1CmlGO
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7871$6758$1CmlGO
       'g$7890$1CmlGO
       '#f
       '#f
       '#()))
   (g$7889$6767$1CmlGO g$7889$6847$1CmlGO '#f)
   (g$7888$6768$1CmlGO
     g$7888$6848$1CmlGO
     (make-record-constructor-descriptor
       g$7887$6766$1CmlGO
       g$7872$6760$1CmlGO
       g$7889$6767$1CmlGO))
   (g$7886$6769$1CmlGO
     g$7886$6849$1CmlGO
     (record-predicate g$7887$6766$1CmlGO))
   (g$make-i/o-file-protection-error$6770$1CmlGO
     g$make-i/o-file-protection-error$6850$1CmlGO
     (record-constructor g$7888$6768$1CmlGO))
   (g$i/o-file-protection-error?$6771$1CmlGO
     g$i/o-file-protection-error?$6851$1CmlGO
     (condition-predicate g$7887$6766$1CmlGO))
   (g$7901$6772$1CmlGO
     g$7901$6852$1CmlGO
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7887$6766$1CmlGO
       'g$7904$1CmlGO
       '#f
       '#f
       '#()))
   (g$7903$6773$1CmlGO g$7903$6853$1CmlGO '#f)
   (g$7902$6774$1CmlGO
     g$7902$6854$1CmlGO
     (make-record-constructor-descriptor
       g$7901$6772$1CmlGO
       g$7888$6768$1CmlGO
       g$7903$6773$1CmlGO))
   (g$7900$6775$1CmlGO
     g$7900$6855$1CmlGO
     (record-predicate g$7901$6772$1CmlGO))
   (g$make-i/o-file-is-read-only-error$6776$1CmlGO
     g$make-i/o-file-is-read-only-error$6856$1CmlGO
     (record-constructor g$7902$6774$1CmlGO))
   (g$i/o-file-is-read-only-error?$6777$1CmlGO
     g$i/o-file-is-read-only-error?$6857$1CmlGO
     (condition-predicate g$7901$6772$1CmlGO))
   (g$7915$6778$1CmlGO
     g$7915$6858$1CmlGO
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7871$6758$1CmlGO
       'g$7918$1CmlGO
       '#f
       '#f
       '#()))
   (g$7917$6779$1CmlGO g$7917$6859$1CmlGO '#f)
   (g$7916$6780$1CmlGO
     g$7916$6860$1CmlGO
     (make-record-constructor-descriptor
       g$7915$6778$1CmlGO
       g$7872$6760$1CmlGO
       g$7917$6779$1CmlGO))
   (g$7914$6781$1CmlGO
     g$7914$6861$1CmlGO
     (record-predicate g$7915$6778$1CmlGO))
   (g$make-i/o-file-already-exists-error$6782$1CmlGO
     g$make-i/o-file-already-exists-error$6862$1CmlGO
     (record-constructor g$7916$6780$1CmlGO))
   (g$i/o-file-already-exists-error?$6783$1CmlGO
     g$i/o-file-already-exists-error?$6863$1CmlGO
     (condition-predicate g$7915$6778$1CmlGO))
   (g$7929$6784$1CmlGO
     g$7929$6864$1CmlGO
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7871$6758$1CmlGO
       'g$7932$1CmlGO
       '#f
       '#f
       '#()))
   (g$7931$6785$1CmlGO g$7931$6865$1CmlGO '#f)
   (g$7930$6786$1CmlGO
     g$7930$6866$1CmlGO
     (make-record-constructor-descriptor
       g$7929$6784$1CmlGO
       g$7872$6760$1CmlGO
       g$7931$6785$1CmlGO))
   (g$7928$6787$1CmlGO
     g$7928$6867$1CmlGO
     (record-predicate g$7929$6784$1CmlGO))
   (g$make-i/o-file-does-not-exist-error$6788$1CmlGO
     g$make-i/o-file-does-not-exist-error$6868$1CmlGO
     (record-constructor g$7930$6786$1CmlGO))
   (g$i/o-file-does-not-exist-error?$6789$1CmlGO
     g$i/o-file-does-not-exist-error?$6869$1CmlGO
     (condition-predicate g$7929$6784$1CmlGO))
   (g$7944$6790$1CmlGO
     g$7944$6870$1CmlGO
     (make-record-type-descriptor
       '&i/o-port
       g$7811$6732$1CmlGO
       'g$7947$1CmlGO
       '#f
       '#f
       '#((immutable port))))
   (g$7946$6791$1CmlGO g$7946$6871$1CmlGO '#f)
   (g$7945$6792$1CmlGO
     g$7945$6872$1CmlGO
     (make-record-constructor-descriptor
       g$7944$6790$1CmlGO
       g$7812$6734$1CmlGO
       g$7946$6791$1CmlGO))
   (g$7943$6793$1CmlGO
     g$7943$6873$1CmlGO
     (record-predicate g$7944$6790$1CmlGO))
   (g$make-i/o-port-error$6794$1CmlGO
     g$make-i/o-port-error$6874$1CmlGO
     (record-constructor g$7945$6792$1CmlGO))
   (g$7942$6795$1CmlGO
     g$7942$6875$1CmlGO
     (record-accessor g$7944$6790$1CmlGO '0))
   (g$i/o-port-error?$6796$1CmlGO
     g$i/o-port-error?$6876$1CmlGO
     (condition-predicate g$7944$6790$1CmlGO))
   (g$i/o-error-port$6797$1CmlGO
     g$i/o-error-port$6877$1CmlGO
     (condition-accessor g$7944$6790$1CmlGO g$7942$6795$1CmlGO))
   (g$7960$6798$1CmlGO
     g$7960$6878$1CmlGO
     (make-record-type-descriptor
       '&i/o-decoding
       g$7944$6790$1CmlGO
       'g$7963$1CmlGO
       '#f
       '#f
       '#()))
   (g$7962$6799$1CmlGO g$7962$6879$1CmlGO '#f)
   (g$7961$6800$1CmlGO
     g$7961$6880$1CmlGO
     (make-record-constructor-descriptor
       g$7960$6798$1CmlGO
       g$7945$6792$1CmlGO
       g$7962$6799$1CmlGO))
   (g$7959$6801$1CmlGO
     g$7959$6881$1CmlGO
     (record-predicate g$7960$6798$1CmlGO))
   (g$make-i/o-decoding-error$6802$1CmlGO
     g$make-i/o-decoding-error$6882$1CmlGO
     (record-constructor g$7961$6800$1CmlGO))
   (g$i/o-decoding-error?$6803$1CmlGO
     g$i/o-decoding-error?$6883$1CmlGO
     (condition-predicate g$7960$6798$1CmlGO))
   (g$7975$6804$1CmlGO
     g$7975$6884$1CmlGO
     (make-record-type-descriptor
       '&i/o-encoding
       g$7944$6790$1CmlGO
       'g$7978$1CmlGO
       '#f
       '#f
       '#((immutable char))))
   (g$7977$6805$1CmlGO g$7977$6885$1CmlGO '#f)
   (g$7976$6806$1CmlGO
     g$7976$6886$1CmlGO
     (make-record-constructor-descriptor
       g$7975$6804$1CmlGO
       g$7945$6792$1CmlGO
       g$7977$6805$1CmlGO))
   (g$7974$6807$1CmlGO
     g$7974$6887$1CmlGO
     (record-predicate g$7975$6804$1CmlGO))
   (g$make-i/o-encoding-error$6808$1CmlGO
     g$make-i/o-encoding-error$6888$1CmlGO
     (record-constructor g$7976$6806$1CmlGO))
   (g$7973$6809$1CmlGO
     g$7973$6889$1CmlGO
     (record-accessor g$7975$6804$1CmlGO '0))
   (g$i/o-encoding-error?$6810$1CmlGO
     g$i/o-encoding-error?$6890$1CmlGO
     (condition-predicate g$7975$6804$1CmlGO))
   (g$i/o-encoding-error-char$6811$1CmlGO
     g$i/o-encoding-error-char$6891$1CmlGO
     (condition-accessor g$7975$6804$1CmlGO g$7973$6809$1CmlGO)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$get-output-string$6892$1CmlGO
     g$get-output-string$6900$1CmlGO
     (case-lambda
       ((g$port$6896$1CmlGO)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6896$1CmlGO))))
   (g$open-output-string$6893$1CmlGO
     g$open-output-string$6901$1CmlGO
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6894$1CmlGO
     g$open-string-output-port$6902$1CmlGO
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6897$1CmlGO)
            (values
              g$p$6897$1CmlGO
              (case-lambda
                (() (g$get-output-string$6892$1CmlGO g$p$6897$1CmlGO))))))
         (g$open-output-string$6893$1CmlGO)))))
   (g$port?$6895$1CmlGO
     g$port?$6903$1CmlGO
     (case-lambda
       ((g$obj$6898$1CmlGO)
        ((case-lambda
           ((g$t$6899$1CmlGO)
            (if g$t$6899$1CmlGO
              g$t$6899$1CmlGO
              (begin '#f (binary-port? g$obj$6898$1CmlGO)))))
         (textual-port? g$obj$6898$1CmlGO))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$with-input-from-file$6910$1CmlGO
     g$with-input-from-file$6936$1CmlGO
     (case-lambda
       ((g$filename$6914$1CmlGO g$thunk$6915$1CmlGO)
        ((case-lambda
           ((g$current-input-port$6918$1CmlGO g$t$6919$1CmlGO)
            ((case-lambda
               ((g$swap$6920$1CmlGO)
                (dynamic-wind
                  g$swap$6920$1CmlGO
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6915$1CmlGO)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6920$1CmlGO)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6921$1CmlGO)
                    (begin
                      (g$current-input-port$6918$1CmlGO g$t$6919$1CmlGO)
                      (set! g$t$6919$1CmlGO g$t$6921$1CmlGO))))
                 (g$current-input-port$6918$1CmlGO)))))))
         current-input-port
         (open-input-file g$filename$6914$1CmlGO)))))
   (g$with-output-to-file$6911$1CmlGO
     g$with-output-to-file$6937$1CmlGO
     (case-lambda
       ((g$filename$6922$1CmlGO g$thunk$6923$1CmlGO)
        ((case-lambda
           ((g$current-output-port$6926$1CmlGO g$t$6927$1CmlGO)
            ((case-lambda
               ((g$swap$6928$1CmlGO)
                (dynamic-wind
                  g$swap$6928$1CmlGO
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6923$1CmlGO)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6928$1CmlGO)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6929$1CmlGO)
                    (begin
                      (g$current-output-port$6926$1CmlGO g$t$6927$1CmlGO)
                      (set! g$t$6927$1CmlGO g$t$6929$1CmlGO))))
                 (g$current-output-port$6926$1CmlGO)))))))
         current-output-port
         (open-output-file g$filename$6922$1CmlGO)))))
   (g$call-with-input-file$6912$1CmlGO
     g$call-with-input-file$6938$1CmlGO
     (case-lambda
       ((g$filename$6930$1CmlGO g$proc$6931$1CmlGO)
        ((case-lambda
           ((g$p$6932$1CmlGO)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6931$1CmlGO g$p$6932$1CmlGO)))
              (case-lambda (() (close-input-port g$p$6932$1CmlGO))))))
         (open-input-file g$filename$6930$1CmlGO)))))
   (g$call-with-output-file$6913$1CmlGO
     g$call-with-output-file$6939$1CmlGO
     (case-lambda
       ((g$filename$6933$1CmlGO g$proc$6934$1CmlGO)
        ((case-lambda
           ((g$p$6935$1CmlGO)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6934$1CmlGO g$p$6935$1CmlGO)))
              (case-lambda (() (close-output-port g$p$6935$1CmlGO))))))
         (open-output-file g$filename$6933$1CmlGO))))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$8042$6940$1CmlGO
     g$8042$7048$1CmlGO
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$8044$6941$1CmlGO g$8044$7049$1CmlGO '#f)
   (g$8043$6942$1CmlGO
     g$8043$7050$1CmlGO
     (make-record-constructor-descriptor
       g$8042$6940$1CmlGO
       '#f
       g$8044$6941$1CmlGO))
   (g$enum?$6943$1CmlGO
     g$enum?$7051$1CmlGO
     (record-predicate g$8042$6940$1CmlGO))
   (g$make-enum$6944$1CmlGO
     g$make-enum$7052$1CmlGO
     (record-constructor g$8043$6942$1CmlGO))
   (g$enum-value$6945$1CmlGO
     g$enum-value$7053$1CmlGO
     (record-accessor g$8042$6940$1CmlGO '0))
   (g$enum-info$6946$1CmlGO
     g$enum-info$7054$1CmlGO
     (record-accessor g$8042$6940$1CmlGO '1))
   (g$8055$6947$1CmlGO
     g$8055$7055$1CmlGO
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$8057$6948$1CmlGO g$8057$7056$1CmlGO '#f)
   (g$8056$6949$1CmlGO
     g$8056$7057$1CmlGO
     (make-record-constructor-descriptor
       g$8055$6947$1CmlGO
       '#f
       g$8057$6948$1CmlGO))
   (g$enum-universe?$6950$1CmlGO
     g$enum-universe?$7058$1CmlGO
     (record-predicate g$8055$6947$1CmlGO))
   (g$make-enum-universe$6951$1CmlGO
     g$make-enum-universe$7059$1CmlGO
     (record-constructor g$8056$6949$1CmlGO))
   (g$enum-universe-id$6952$1CmlGO
     g$enum-universe-id$7060$1CmlGO
     (record-accessor g$8055$6947$1CmlGO '0))
   (g$enum-universe-symbols$6953$1CmlGO
     g$enum-universe-symbols$7061$1CmlGO
     (record-accessor g$8055$6947$1CmlGO '1))
   (g$enum-universe-mapping$6954$1CmlGO
     g$enum-universe-mapping$7062$1CmlGO
     (record-accessor g$8055$6947$1CmlGO '2))
   (g$enum-universe-value$6955$1CmlGO
     g$enum-universe-value$7063$1CmlGO
     (record-accessor g$8055$6947$1CmlGO '3))
   (g$enum-type=?$6956$1CmlGO
     g$enum-type=?$7064$1CmlGO
     (case-lambda
       ((g$enumset1$6977$1CmlGO g$enumset2$6978$1CmlGO)
        (eq? (g$enum-universe-id$6952$1CmlGO
               (g$enum-info$6946$1CmlGO g$enumset1$6977$1CmlGO))
             (g$enum-universe-id$6952$1CmlGO
               (g$enum-info$6946$1CmlGO g$enumset2$6978$1CmlGO))))))
   (g$get-symbols$6957$1CmlGO
     g$get-symbols$7065$1CmlGO
     (case-lambda
       ((g$enumset$6979$1CmlGO)
        (g$enum-universe-symbols$6953$1CmlGO
          (g$enum-info$6946$1CmlGO g$enumset$6979$1CmlGO)))))
   (g$get-value$6958$1CmlGO
     g$get-value$7066$1CmlGO
     (case-lambda
       ((g$enumset$6980$1CmlGO g$s$6981$1CmlGO)
        (g$hashtable-ref$6109$1CmlGO
          (g$enum-universe-mapping$6954$1CmlGO
            (g$enum-info$6946$1CmlGO g$enumset$6980$1CmlGO))
          g$s$6981$1CmlGO
          '#f))))
   (g$assert-enum$6959$1CmlGO
     g$assert-enum$7067$1CmlGO
     (case-lambda
       ((g$who$6982$1CmlGO g$enumset$6983$1CmlGO)
        (if (not (g$enum?$6943$1CmlGO g$enumset$6983$1CmlGO))
          (assertion-violation
            g$who$6982$1CmlGO
            '"not an enumeration"
            g$enumset$6983$1CmlGO)
          (void)))))
   (g$make-info$6960$1CmlGO
     g$make-info$7068$1CmlGO
     (case-lambda
       ((g$symbols$6984$1CmlGO)
        ((case-lambda
           ((g$ht$6985$1CmlGO)
            ((letrec ((g$f$6986$1CmlGO
                        (case-lambda
                          ((g$s$6987$1CmlGO g$a$6988$1CmlGO g$mask$6989$1CmlGO)
                           (if (null? g$s$6987$1CmlGO)
                             (values
                               (reverse! g$a$6988$1CmlGO)
                               g$ht$6985$1CmlGO
                               (- g$mask$6989$1CmlGO '1))
                             ((case-lambda
                                ((g$n$6990$1CmlGO)
                                 (if (symbol? g$n$6990$1CmlGO)
                                   (if (g$hashtable-contains?$6112$1CmlGO
                                         g$ht$6985$1CmlGO
                                         g$n$6990$1CmlGO)
                                     (g$f$6986$1CmlGO
                                       (cdr g$s$6987$1CmlGO)
                                       g$a$6988$1CmlGO
                                       g$mask$6989$1CmlGO)
                                     (begin
                                       (g$hashtable-set!$6110$1CmlGO
                                         g$ht$6985$1CmlGO
                                         g$n$6990$1CmlGO
                                         g$mask$6989$1CmlGO)
                                       (g$f$6986$1CmlGO
                                         (cdr g$s$6987$1CmlGO)
                                         (cons g$n$6990$1CmlGO g$a$6988$1CmlGO)
                                         (g$bitwise-arithmetic-shift-left$6651$1CmlGO
                                           g$mask$6989$1CmlGO
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6990$1CmlGO))))
                              (car g$s$6987$1CmlGO)))))))
               g$f$6986$1CmlGO)
             g$symbols$6984$1CmlGO
             '()
             '1)))
         (g$make-eq-hashtable$6106$1CmlGO)))))
   (g$make-name$6961$1CmlGO
     g$make-name$7069$1CmlGO
     (case-lambda
       ((g$symbols$6991$1CmlGO)
        (string->symbol (g$format$7108$1CmlGO '"~a" g$symbols$6991$1CmlGO)))))
   (g$make-enumeration$6962$1CmlGO
     g$make-enumeration$7070$1CmlGO
     (case-lambda
       ((g$symbols$6992$1CmlGO)
        (call-with-values
          (case-lambda (() (g$make-info$6960$1CmlGO g$symbols$6992$1CmlGO)))
          (case-lambda
            ((g$s$6996$1CmlGO g$mapping$6997$1CmlGO g$mask$6998$1CmlGO)
             ((case-lambda
                ((g$mask$6999$1CmlGO g$mapping$7000$1CmlGO g$s$7001$1CmlGO)
                 (g$make-enum$6944$1CmlGO
                   g$mask$6999$1CmlGO
                   (g$make-enum-universe$6951$1CmlGO
                     (g$make-name$6961$1CmlGO g$s$7001$1CmlGO)
                     g$s$7001$1CmlGO
                     g$mapping$7000$1CmlGO
                     g$mask$6999$1CmlGO))))
              g$mask$6998$1CmlGO
              g$mapping$6997$1CmlGO
              g$s$6996$1CmlGO)))))))
   (g$enum-set-universe$6963$1CmlGO
     g$enum-set-universe$7071$1CmlGO
     (case-lambda
       ((g$enumset$7002$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO 'enum-set-universe g$enumset$7002$1CmlGO)
          ((case-lambda
             ((g$ei$7003$1CmlGO)
              (g$make-enum$6944$1CmlGO
                (g$enum-universe-value$6955$1CmlGO g$ei$7003$1CmlGO)
                g$ei$7003$1CmlGO)))
           (g$enum-info$6946$1CmlGO g$enumset$7002$1CmlGO))))))
   (g$enum-set-indexer$6964$1CmlGO
     g$enum-set-indexer$7072$1CmlGO
     (case-lambda
       ((g$enumset$7004$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO 'enum-set-indexer g$enumset$7004$1CmlGO)
          (case-lambda
            ((g$symbol$7005$1CmlGO)
             (begin
               (if (not (symbol? g$symbol$7005$1CmlGO))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$7005$1CmlGO)
                 (void))
               ((case-lambda
                  ((g$v$7006$1CmlGO)
                   (if g$v$7006$1CmlGO
                     (- (bitwise-length g$v$7006$1CmlGO) '1)
                     '#f)))
                (g$get-value$6958$1CmlGO
                  g$enumset$7004$1CmlGO
                  g$symbol$7005$1CmlGO)))))))))
   (g$enum-set-constructor$6965$1CmlGO
     g$enum-set-constructor$7073$1CmlGO
     (case-lambda
       ((g$enumset$7007$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO
            'enum-set-constructor
            g$enumset$7007$1CmlGO)
          (case-lambda
            ((g$symbols$7008$1CmlGO)
             ((letrec ((g$f$7009$1CmlGO
                         (case-lambda
                           ((g$v$7010$1CmlGO g$s$7011$1CmlGO)
                            (if (null? g$s$7011$1CmlGO)
                              (g$make-enum$6944$1CmlGO
                                g$v$7010$1CmlGO
                                (g$enum-info$6946$1CmlGO g$enumset$7007$1CmlGO))
                              ((case-lambda
                                 ((g$n$7012$1CmlGO)
                                  (if (symbol? g$n$7012$1CmlGO)
                                    ((case-lambda
                                       ((g$v*$7013$1CmlGO)
                                        (if g$v*$7013$1CmlGO
                                          (g$f$7009$1CmlGO
                                            (bitwise-ior
                                              g$v$7010$1CmlGO
                                              g$v*$7013$1CmlGO)
                                            (cdr g$s$7011$1CmlGO))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$7012$1CmlGO))))
                                     (g$get-value$6958$1CmlGO
                                       g$enumset$7007$1CmlGO
                                       g$n$7012$1CmlGO))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$7012$1CmlGO))))
                               (car g$s$7011$1CmlGO)))))))
                g$f$7009$1CmlGO)
              '0
              g$symbols$7008$1CmlGO)))))))
   (g$enum-set->list$6966$1CmlGO
     g$enum-set->list$7074$1CmlGO
     (case-lambda
       ((g$enumset$7014$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO 'enum-set->list g$enumset$7014$1CmlGO)
          ((case-lambda
             ((g$value$7015$1CmlGO)
              ((letrec ((g$f$7016$1CmlGO
                          (case-lambda
                            ((g$s$7017$1CmlGO g$l$7018$1CmlGO)
                             (if (null? g$s$7017$1CmlGO)
                               (reverse! g$l$7018$1CmlGO)
                               (if (zero?
                                     (bitwise-and
                                       (g$get-value$6958$1CmlGO
                                         g$enumset$7014$1CmlGO
                                         (car g$s$7017$1CmlGO))
                                       g$value$7015$1CmlGO))
                                 (g$f$7016$1CmlGO
                                   (cdr g$s$7017$1CmlGO)
                                   g$l$7018$1CmlGO)
                                 (g$f$7016$1CmlGO
                                   (cdr g$s$7017$1CmlGO)
                                   (cons
                                     (car g$s$7017$1CmlGO)
                                     g$l$7018$1CmlGO))))))))
                 g$f$7016$1CmlGO)
               (g$get-symbols$6957$1CmlGO g$enumset$7014$1CmlGO)
               '())))
           (g$enum-value$6945$1CmlGO g$enumset$7014$1CmlGO))))))
   (g$enum-set-member?$6967$1CmlGO
     g$enum-set-member?$7075$1CmlGO
     (case-lambda
       ((g$symbol$7019$1CmlGO g$enumset$7020$1CmlGO)
        (begin
          (if (not (symbol? g$symbol$7019$1CmlGO))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$7019$1CmlGO)
            (void))
          (g$assert-enum$6959$1CmlGO 'enum-set-member? g$enumset$7020$1CmlGO)
          ((case-lambda
             ((g$v$7021$1CmlGO)
              (if g$v$7021$1CmlGO
                (not (zero?
                       (bitwise-and
                         g$v$7021$1CmlGO
                         (g$enum-value$6945$1CmlGO g$enumset$7020$1CmlGO))))
                '#f)))
           (g$get-value$6958$1CmlGO
             g$enumset$7020$1CmlGO
             g$symbol$7019$1CmlGO))))))
   (g$enum-set-subset?$6968$1CmlGO
     g$enum-set-subset?$7076$1CmlGO
     (case-lambda
       ((g$enumset1$7022$1CmlGO g$enumset2$7023$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO 'enum-set-subset? g$enumset1$7022$1CmlGO)
          (g$assert-enum$6959$1CmlGO 'enum-set-subset? g$enumset2$7023$1CmlGO)
          ((case-lambda
             ((g$v1$7024$1CmlGO g$v2$7025$1CmlGO)
              (if (g$enum-type=?$6956$1CmlGO
                    g$enumset1$7022$1CmlGO
                    g$enumset2$7023$1CmlGO)
                (= (bitwise-and g$v1$7024$1CmlGO g$v2$7025$1CmlGO)
                   g$v1$7024$1CmlGO)
                ((letrec ((g$f$7026$1CmlGO
                            (case-lambda
                              ((g$s$7027$1CmlGO)
                               (if (null? g$s$7027$1CmlGO)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$7028$1CmlGO g$v2*$7029$1CmlGO)
                                     (if g$v2*$7029$1CmlGO
                                       ((case-lambda
                                          ((g$has1$7030$1CmlGO
                                             g$has2$7031$1CmlGO)
                                           (if (if g$has1$7030$1CmlGO
                                                 (begin
                                                   '#f
                                                   (not g$has2$7031$1CmlGO))
                                                 '#f)
                                             '#f
                                             (g$f$7026$1CmlGO
                                               (cdr g$s$7027$1CmlGO)))))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v1$7024$1CmlGO
                                                 g$v1*$7028$1CmlGO)))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v2$7025$1CmlGO
                                                 g$v2*$7029$1CmlGO))))
                                       '#f)))
                                  (g$get-value$6958$1CmlGO
                                    g$enumset1$7022$1CmlGO
                                    (car g$s$7027$1CmlGO))
                                  (g$get-value$6958$1CmlGO
                                    g$enumset2$7023$1CmlGO
                                    (car g$s$7027$1CmlGO))))))))
                   g$f$7026$1CmlGO)
                 (g$get-symbols$6957$1CmlGO g$enumset1$7022$1CmlGO)))))
           (g$enum-value$6945$1CmlGO g$enumset1$7022$1CmlGO)
           (g$enum-value$6945$1CmlGO g$enumset2$7023$1CmlGO))))))
   (g$enum-set=?$6969$1CmlGO
     g$enum-set=?$7077$1CmlGO
     (case-lambda
       ((g$enumset1$7032$1CmlGO g$enumset2$7033$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO 'enum-set=? g$enumset1$7032$1CmlGO)
          (g$assert-enum$6959$1CmlGO 'enum-set=? g$enumset2$7033$1CmlGO)
          (if (g$enum-set-subset?$6968$1CmlGO
                g$enumset1$7032$1CmlGO
                g$enumset2$7033$1CmlGO)
            (begin
              '#f
              (g$enum-set-subset?$6968$1CmlGO
                g$enumset2$7033$1CmlGO
                g$enumset1$7032$1CmlGO))
            '#f)))))
   (g$enum-set-union$6970$1CmlGO
     g$enum-set-union$7078$1CmlGO
     (case-lambda
       ((g$enumset1$7034$1CmlGO g$enumset2$7035$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO 'enum-set-union g$enumset1$7034$1CmlGO)
          (g$assert-enum$6959$1CmlGO 'enum-set-union g$enumset2$7035$1CmlGO)
          (if (g$enum-type=?$6956$1CmlGO
                g$enumset1$7034$1CmlGO
                g$enumset2$7035$1CmlGO)
            (g$make-enum$6944$1CmlGO
              (bitwise-ior
                (g$enum-value$6945$1CmlGO g$enumset1$7034$1CmlGO)
                (g$enum-value$6945$1CmlGO g$enumset2$7035$1CmlGO))
              (g$enum-info$6946$1CmlGO g$enumset1$7034$1CmlGO))
            '#f)))))
   (g$enum-set-intersection$6971$1CmlGO
     g$enum-set-intersection$7079$1CmlGO
     (case-lambda
       ((g$enumset1$7036$1CmlGO g$enumset2$7037$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO
            'enum-set-intersection
            g$enumset1$7036$1CmlGO)
          (g$assert-enum$6959$1CmlGO
            'enum-set-intersection
            g$enumset2$7037$1CmlGO)
          (if (g$enum-type=?$6956$1CmlGO
                g$enumset1$7036$1CmlGO
                g$enumset2$7037$1CmlGO)
            (g$make-enum$6944$1CmlGO
              (bitwise-and
                (g$enum-value$6945$1CmlGO g$enumset1$7036$1CmlGO)
                (g$enum-value$6945$1CmlGO g$enumset2$7037$1CmlGO))
              (g$enum-info$6946$1CmlGO g$enumset1$7036$1CmlGO))
            '#f)))))
   (g$enum-set-difference$6972$1CmlGO
     g$enum-set-difference$7080$1CmlGO
     (case-lambda
       ((g$enumset1$7038$1CmlGO g$enumset2$7039$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO
            'enum-set-difference
            g$enumset1$7038$1CmlGO)
          (g$assert-enum$6959$1CmlGO
            'enum-set-difference
            g$enumset2$7039$1CmlGO)
          (if (g$enum-type=?$6956$1CmlGO
                g$enumset1$7038$1CmlGO
                g$enumset2$7039$1CmlGO)
            (g$make-enum$6944$1CmlGO
              (bitwise-and
                (g$enum-value$6945$1CmlGO g$enumset1$7038$1CmlGO)
                (bitwise-not (g$enum-value$6945$1CmlGO g$enumset2$7039$1CmlGO)))
              (g$enum-info$6946$1CmlGO g$enumset1$7038$1CmlGO))
            '#f)))))
   (g$enum-set-complement$6973$1CmlGO
     g$enum-set-complement$7081$1CmlGO
     (case-lambda
       ((g$enumset$7040$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO 'enum-set-complement g$enumset$7040$1CmlGO)
          (g$make-enum$6944$1CmlGO
            (bitwise-not (g$enum-value$6945$1CmlGO g$enumset$7040$1CmlGO))
            (g$enum-info$6946$1CmlGO g$enumset$7040$1CmlGO))))))
   (g$enum-set-projection$6974$1CmlGO
     g$enum-set-projection$7082$1CmlGO
     (case-lambda
       ((g$enumset1$7041$1CmlGO g$enumset2$7042$1CmlGO)
        (begin
          (g$assert-enum$6959$1CmlGO
            'enum-set-projection
            g$enumset1$7041$1CmlGO)
          (g$assert-enum$6959$1CmlGO
            'enum-set-projection
            g$enumset2$7042$1CmlGO)
          ((case-lambda
             ((g$v1$7043$1CmlGO)
              ((letrec ((g$f$7044$1CmlGO
                          (case-lambda
                            ((g$s$7045$1CmlGO g$v$7046$1CmlGO)
                             (if (null? g$s$7045$1CmlGO)
                               (g$make-enum$6944$1CmlGO
                                 g$v$7046$1CmlGO
                                 (g$enum-info$6946$1CmlGO
                                   g$enumset2$7042$1CmlGO))
                               (if (zero?
                                     (bitwise-and
                                       g$v1$7043$1CmlGO
                                       (g$get-value$6958$1CmlGO
                                         g$enumset1$7041$1CmlGO
                                         (car g$s$7045$1CmlGO))))
                                 (g$f$7044$1CmlGO
                                   (cdr g$s$7045$1CmlGO)
                                   g$v$7046$1CmlGO)
                                 ((case-lambda
                                    ((g$v2$7047$1CmlGO)
                                     (if g$v2$7047$1CmlGO
                                       (g$f$7044$1CmlGO
                                         (cdr g$s$7045$1CmlGO)
                                         (bitwise-ior
                                           g$v$7046$1CmlGO
                                           g$v2$7047$1CmlGO))
                                       (g$f$7044$1CmlGO
                                         (cdr g$s$7045$1CmlGO)
                                         g$v$7046$1CmlGO))))
                                  (g$get-value$6958$1CmlGO
                                    g$enumset2$7042$1CmlGO
                                    (car g$s$7045$1CmlGO)))))))))
                 g$f$7044$1CmlGO)
               (g$get-symbols$6957$1CmlGO g$enumset1$7041$1CmlGO)
               '0)))
           (g$enum-value$6945$1CmlGO g$enumset1$7041$1CmlGO)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6975$1CmlGO g$p$6976$1CmlGO)
       (g$fprintf$7107$1CmlGO
         g$p$6976$1CmlGO
         '"#[enum-set ~a]"
         (g$enum-set->list$6966$1CmlGO g$x$6975$1CmlGO))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$7083$1CmlGO
     g$dofmt$7105$1CmlGO
     (case-lambda
       ((g$p$7087$1CmlGO g$cntl$7088$1CmlGO g$args$7089$1CmlGO)
        ((case-lambda
           ((g$nmax$7090$1CmlGO)
            ((letrec ((g$loop$7091$1CmlGO
                        (case-lambda
                          ((g$n$7092$1CmlGO g$a$7093$1CmlGO)
                           (if (fx<=? g$n$7092$1CmlGO g$nmax$7090$1CmlGO)
                             ((case-lambda
                                ((g$c$7094$1CmlGO)
                                 (if (if (g$char=?$5866$1CmlGO
                                           g$c$7094$1CmlGO
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$7092$1CmlGO
                                           g$nmax$7090$1CmlGO))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$7095$1CmlGO)
                                       (if (g$memv$5663$1CmlGO
                                             g$t$7095$1CmlGO
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$7093$1CmlGO)
                                             g$p$7087$1CmlGO)
                                           (g$loop$7091$1CmlGO
                                             (fx+ g$n$7092$1CmlGO '2)
                                             (cdr g$a$7093$1CmlGO)))
                                         (if (g$memv$5663$1CmlGO
                                               g$t$7095$1CmlGO
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$7093$1CmlGO)
                                               g$p$7087$1CmlGO)
                                             (g$loop$7091$1CmlGO
                                               (fx+ g$n$7092$1CmlGO '2)
                                               (cdr g$a$7093$1CmlGO)))
                                           (if (g$memv$5663$1CmlGO
                                                 g$t$7095$1CmlGO
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$7093$1CmlGO)
                                                   '2)
                                                 g$p$7087$1CmlGO)
                                               (g$loop$7091$1CmlGO
                                                 (fx+ g$n$7092$1CmlGO '2)
                                                 (cdr g$a$7093$1CmlGO)))
                                             (if (g$memv$5663$1CmlGO
                                                   g$t$7095$1CmlGO
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$7093$1CmlGO)
                                                     '8)
                                                   g$p$7087$1CmlGO)
                                                 (g$loop$7091$1CmlGO
                                                   (fx+ g$n$7092$1CmlGO '2)
                                                   (cdr g$a$7093$1CmlGO)))
                                               (if (g$memv$5663$1CmlGO
                                                     g$t$7095$1CmlGO
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$7093$1CmlGO)
                                                       '16)
                                                     g$p$7087$1CmlGO)
                                                   (g$loop$7091$1CmlGO
                                                     (fx+ g$n$7092$1CmlGO '2)
                                                     (cdr g$a$7093$1CmlGO)))
                                                 (if (g$memv$5663$1CmlGO
                                                       g$t$7095$1CmlGO
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$7093$1CmlGO)
                                                         '10)
                                                       g$p$7087$1CmlGO)
                                                     (g$loop$7091$1CmlGO
                                                       (fx+ g$n$7092$1CmlGO '2)
                                                       (cdr g$a$7093$1CmlGO)))
                                                   (if (g$memv$5663$1CmlGO
                                                         g$t$7095$1CmlGO
                                                         '(#\~))
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$7087$1CmlGO)
                                                       (g$loop$7091$1CmlGO
                                                         (fx+ g$n$7092$1CmlGO
                                                              '2)
                                                         g$a$7093$1CmlGO))
                                                     (begin
                                                       (write-char
                                                         g$c$7094$1CmlGO
                                                         g$p$7087$1CmlGO)
                                                       (g$loop$7091$1CmlGO
                                                         (fx+ g$n$7092$1CmlGO
                                                              '1)
                                                         g$a$7093$1CmlGO)))))))))))
                                    (string-ref
                                      g$cntl$7088$1CmlGO
                                      (fx+ g$n$7092$1CmlGO '1)))
                                   (begin
                                     (write-char
                                       g$c$7094$1CmlGO
                                       g$p$7087$1CmlGO)
                                     (g$loop$7091$1CmlGO
                                       (fx+ g$n$7092$1CmlGO '1)
                                       g$a$7093$1CmlGO)))))
                              (string-ref g$cntl$7088$1CmlGO g$n$7092$1CmlGO))
                             (void))))))
               g$loop$7091$1CmlGO)
             '0
             g$args$7089$1CmlGO)))
         (fx- (string-length g$cntl$7088$1CmlGO) '1)))))
   (g$printf$7084$1CmlGO
     g$printf$7106$1CmlGO
     (case-lambda
       ((g$control$7096$1CmlGO . g$args$7097$1CmlGO)
        (g$dofmt$7083$1CmlGO
          (current-output-port)
          g$control$7096$1CmlGO
          g$args$7097$1CmlGO))))
   (g$fprintf$7085$1CmlGO
     g$fprintf$7107$1CmlGO
     (case-lambda
       ((g$p$7098$1CmlGO g$control$7099$1CmlGO . g$args$7100$1CmlGO)
        (g$dofmt$7083$1CmlGO
          g$p$7098$1CmlGO
          g$control$7099$1CmlGO
          g$args$7100$1CmlGO))))
   (g$format$7086$1CmlGO
     g$format$7108$1CmlGO
     (case-lambda
       ((g$control$7101$1CmlGO . g$args$7102$1CmlGO)
        (call-with-values
          g$open-string-output-port$6902$1CmlGO
          (case-lambda
            ((g$p$7103$1CmlGO g$c$7104$1CmlGO)
             (begin
               (g$dofmt$7083$1CmlGO
                 g$p$7103$1CmlGO
                 g$control$7101$1CmlGO
                 g$args$7102$1CmlGO)
               (g$c$7104$1CmlGO)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$7109$1CmlGO
     g$make-traced-macro$7112$1CmlGO
     (case-lambda
       ((g$name$7110$1CmlGO g$x$7111$1CmlGO)
        (if (procedure? g$x$7111$1CmlGO)
          (make-traced-procedure
            g$name$7110$1CmlGO
            g$x$7111$1CmlGO
            g$syntax->datum$11777$1CmlGO)
          (if (g$variable-transformer?$11600$1CmlGO g$x$7111$1CmlGO)
            (g$make-variable-transformer$11599$1CmlGO
              (make-traced-procedure
                g$name$7110$1CmlGO
                (g$variable-transformer-procedure$11601$1CmlGO g$x$7111$1CmlGO)
                g$syntax->datum$11777$1CmlGO))
            g$x$7111$1CmlGO))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$read-library-source-file$7113$1CmlGO
     g$read-library-source-file$7192$1CmlGO
     (case-lambda
       ((g$file-name$7184$1CmlGO)
        (g$with-input-from-file$6936$1CmlGO
          g$file-name$7184$1CmlGO
          read-annotated))))
   (g$make-parameter$7114$1CmlGO
     g$make-parameter$7193$1CmlGO
     (case-lambda
       ((g$x$7185$1CmlGO)
        (g$make-parameter$7114$1CmlGO
          g$x$7185$1CmlGO
          (case-lambda ((g$x$7186$1CmlGO) g$x$7186$1CmlGO))))
       ((g$x$7187$1CmlGO g$fender$7188$1CmlGO)
        (begin
          (if (not (procedure? g$fender$7188$1CmlGO))
            (g$assertion-error$11770$1CmlGO
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(51,8) - (51,36)"))
            (void))
          ((case-lambda
             ((g$x$7189$1CmlGO)
              (case-lambda
                (() g$x$7189$1CmlGO)
                ((g$v$7190$1CmlGO)
                 (set! g$x$7189$1CmlGO
                   (g$fender$7188$1CmlGO g$v$7190$1CmlGO))))))
           (g$fender$7188$1CmlGO g$x$7187$1CmlGO))))))
   (g$file-options-constructor$7182$1CmlGO
     g$file-options-constructor$7194$1CmlGO
     (g$make-parameter$7114$1CmlGO '#f))
   (g$file-options-spec$7183$1CmlGO
     g$file-options-spec$7195$1CmlGO
     (case-lambda
       ((g$x$7191$1CmlGO)
        ((g$file-options-constructor$7182$1CmlGO) g$x$7191$1CmlGO)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$7391$1CmlGO
     g$current-primitive-locations$7436$1CmlGO
     (g$make-parameter$7193$1CmlGO
       (case-lambda ((g$x$7397$1CmlGO) '#f))
       (case-lambda
         ((g$p$7398$1CmlGO)
          (begin
            (if (not (procedure? g$p$7398$1CmlGO))
              (g$assertion-error$11770$1CmlGO
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$7398$1CmlGO)))))
   (g$mutable?$7392$1CmlGO
     g$mutable?$7437$1CmlGO
     (case-lambda
       ((g$x$7399$1CmlGO)
        (letrec* ((g$simple?$7400$1CmlGO
                    (case-lambda
                      ((g$x$7401$1CmlGO)
                       ((case-lambda
                          ((g$t$7402$1CmlGO)
                           (if g$t$7402$1CmlGO
                             g$t$7402$1CmlGO
                             ((case-lambda
                                ((g$t$7403$1CmlGO)
                                 (if g$t$7403$1CmlGO
                                   g$t$7403$1CmlGO
                                   ((case-lambda
                                      ((g$t$7404$1CmlGO)
                                       (if g$t$7404$1CmlGO
                                         g$t$7404$1CmlGO
                                         ((case-lambda
                                            ((g$t$7405$1CmlGO)
                                             (if g$t$7405$1CmlGO
                                               g$t$7405$1CmlGO
                                               ((case-lambda
                                                  ((g$t$7406$1CmlGO)
                                                   (if g$t$7406$1CmlGO
                                                     g$t$7406$1CmlGO
                                                     ((case-lambda
                                                        ((g$t$7407$1CmlGO)
                                                         (if g$t$7407$1CmlGO
                                                           g$t$7407$1CmlGO
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$7401$1CmlGO)))))
                                                      (bytevector?
                                                        g$x$7401$1CmlGO)))))
                                                (string? g$x$7401$1CmlGO)))))
                                          (boolean? g$x$7401$1CmlGO)))))
                                    (symbol? g$x$7401$1CmlGO)))))
                              (char? g$x$7401$1CmlGO)))))
                        (null? g$x$7401$1CmlGO))))))
          (not (g$simple?$7400$1CmlGO g$x$7399$1CmlGO))))))
   (g$rewriter$7393$1CmlGO
     g$rewriter$7438$1CmlGO
     (case-lambda
       ((g$quote-hack?$7408$1CmlGO)
        (letrec* ((g$f$7409$1CmlGO
                    (case-lambda
                      ((g$x$7410$1CmlGO)
                       (if (pair? g$x$7410$1CmlGO)
                         ((case-lambda
                            ((g$t$7411$1CmlGO)
                             (if (g$memv$5663$1CmlGO g$t$7411$1CmlGO '(quote))
                               (if (if g$quote-hack?$7408$1CmlGO
                                     (begin
                                       '#f
                                       (g$mutable?$7392$1CmlGO
                                         (g$cadr$5832$1CmlGO g$x$7410$1CmlGO)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$7412$1CmlGO)
                                     (begin
                                       (set-symbol-value!
                                         g$g$7412$1CmlGO
                                         (g$cadr$5832$1CmlGO g$x$7410$1CmlGO))
                                       g$g$7412$1CmlGO)))
                                  (gensym))
                                 g$x$7410$1CmlGO)
                               (if (g$memv$5663$1CmlGO
                                     g$t$7411$1CmlGO
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (map (case-lambda
                                          ((g$x$7413$1CmlGO)
                                           (cons
                                             (car g$x$7413$1CmlGO)
                                             (map g$f$7409$1CmlGO
                                                  (cdr g$x$7413$1CmlGO)))))
                                        (cdr g$x$7410$1CmlGO)))
                                 (if (g$memv$5663$1CmlGO
                                       g$t$7411$1CmlGO
                                       '(lambda))
                                   (g$cons*$5670$1CmlGO
                                     'lambda
                                     (g$cadr$5832$1CmlGO g$x$7410$1CmlGO)
                                     (map g$f$7409$1CmlGO
                                          (g$cddr$5834$1CmlGO g$x$7410$1CmlGO)))
                                   (if (g$memv$5663$1CmlGO
                                         g$t$7411$1CmlGO
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$7414$1CmlGO
                                           g$body*$7415$1CmlGO)
                                         ((case-lambda
                                            ((g$lhs*$7416$1CmlGO
                                               g$rhs*$7417$1CmlGO)
                                             (g$cons*$5670$1CmlGO
                                               'letrec
                                               (map list
                                                    g$lhs*$7416$1CmlGO
                                                    (map g$f$7409$1CmlGO
                                                         g$rhs*$7417$1CmlGO))
                                               (map g$f$7409$1CmlGO
                                                    g$body*$7415$1CmlGO))))
                                          (map car g$bindings$7414$1CmlGO)
                                          (map g$cadr$5832$1CmlGO
                                               g$bindings$7414$1CmlGO))))
                                      (g$cadr$5832$1CmlGO g$x$7410$1CmlGO)
                                      (g$cddr$5834$1CmlGO g$x$7410$1CmlGO))
                                     (if (g$memv$5663$1CmlGO
                                           g$t$7411$1CmlGO
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$7418$1CmlGO
                                             g$body*$7419$1CmlGO)
                                           ((case-lambda
                                              ((g$lhs*$7420$1CmlGO
                                                 g$rhs*$7421$1CmlGO)
                                               (g$cons*$5670$1CmlGO
                                                 'letrec*
                                                 (map list
                                                      g$lhs*$7420$1CmlGO
                                                      (map g$f$7409$1CmlGO
                                                           g$rhs*$7421$1CmlGO))
                                                 (map g$f$7409$1CmlGO
                                                      g$body*$7419$1CmlGO))))
                                            (map car g$bindings$7418$1CmlGO)
                                            (map g$cadr$5832$1CmlGO
                                                 g$bindings$7418$1CmlGO))))
                                        (g$cadr$5832$1CmlGO g$x$7410$1CmlGO)
                                        (g$cddr$5834$1CmlGO g$x$7410$1CmlGO))
                                       (if (g$memv$5663$1CmlGO
                                             g$t$7411$1CmlGO
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$7422$1CmlGO
                                               g$x$7423$1CmlGO)
                                             ((case-lambda
                                                ((g$bindings$7424$1CmlGO
                                                   g$body*$7425$1CmlGO)
                                                 ((case-lambda
                                                    ((g$lhs*$7426$1CmlGO
                                                       g$lhs**$7427$1CmlGO
                                                       g$rhs*$7428$1CmlGO)
                                                     (g$cons*$5670$1CmlGO
                                                       'library-letrec*
                                                       g$name$7422$1CmlGO
                                                       (map list
                                                            g$lhs*$7426$1CmlGO
                                                            g$lhs**$7427$1CmlGO
                                                            (map g$f$7409$1CmlGO
                                                                 g$rhs*$7428$1CmlGO))
                                                       (map g$f$7409$1CmlGO
                                                            g$body*$7425$1CmlGO))))
                                                  (map car
                                                       g$bindings$7424$1CmlGO)
                                                  (map g$cadr$5832$1CmlGO
                                                       g$bindings$7424$1CmlGO)
                                                  (map g$caddr$5838$1CmlGO
                                                       g$bindings$7424$1CmlGO))))
                                              (g$cadr$5832$1CmlGO
                                                g$x$7423$1CmlGO)
                                              (g$cddr$5834$1CmlGO
                                                g$x$7423$1CmlGO))))
                                          (g$cadr$5832$1CmlGO g$x$7410$1CmlGO)
                                          (cdr g$x$7410$1CmlGO))
                                         (if (g$memv$5663$1CmlGO
                                               g$t$7411$1CmlGO
                                               '(begin))
                                           (cons
                                             'begin
                                             (map g$f$7409$1CmlGO
                                                  (cdr g$x$7410$1CmlGO)))
                                           (if (g$memv$5663$1CmlGO
                                                 g$t$7411$1CmlGO
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5832$1CmlGO
                                                 g$x$7410$1CmlGO)
                                               (g$f$7409$1CmlGO
                                                 (g$caddr$5838$1CmlGO
                                                   g$x$7410$1CmlGO)))
                                             (if (g$memv$5663$1CmlGO
                                                   g$t$7411$1CmlGO
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$7429$1CmlGO)
                                                   ((case-lambda
                                                      ((g$t$7430$1CmlGO)
                                                       (if g$t$7430$1CmlGO
                                                         ((case-lambda
                                                            ((g$loc$7431$1CmlGO)
                                                             g$loc$7431$1CmlGO))
                                                          g$t$7430$1CmlGO)
                                                         g$op$7429$1CmlGO)))
                                                    ((g$current-primitive-locations$7391$1CmlGO)
                                                     g$op$7429$1CmlGO))))
                                                (g$cadr$5832$1CmlGO
                                                  g$x$7410$1CmlGO))
                                               (if (g$memv$5663$1CmlGO
                                                     g$t$7411$1CmlGO
                                                     '(define))
                                                 g$x$7410$1CmlGO
                                                 (if (list? g$x$7410$1CmlGO)
                                                   (map g$f$7409$1CmlGO
                                                        g$x$7410$1CmlGO)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$7410$1CmlGO
                                                     (list?
                                                       g$x$7410$1CmlGO)))))))))))))))
                          (car g$x$7410$1CmlGO))
                         g$x$7410$1CmlGO)))))
          g$f$7409$1CmlGO))))
   (g$expanded->core$7394$1CmlGO
     g$expanded->core$7439$1CmlGO
     (case-lambda
       ((g$x$7432$1CmlGO) ((g$rewriter$7393$1CmlGO '#t) g$x$7432$1CmlGO))))
   (g$compile-core-expr$7395$1CmlGO
     g$compile-core-expr$7440$1CmlGO
     (case-lambda
       ((g$x$7433$1CmlGO) ((g$rewriter$7393$1CmlGO '#f) g$x$7433$1CmlGO))))
   (g$compile-core-expr-to-port$7396$1CmlGO
     g$compile-core-expr-to-port$7441$1CmlGO
     (case-lambda
       ((g$x$7434$1CmlGO g$p$7435$1CmlGO)
        (g$pretty-print$7390$1CmlGO
          ((g$rewriter$7393$1CmlGO '#f) g$x$7434$1CmlGO)
          g$p$7435$1CmlGO)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$7480$1CmlGO
     g$make-collection$7684$1CmlGO
     (case-lambda
       (()
        ((case-lambda
           ((g$set$7541$1CmlGO)
            (letrec* ((g$set-cons$7542$1CmlGO
                        (case-lambda
                          ((g$x$7544$1CmlGO g$ls$7545$1CmlGO)
                           (if (g$memq$5662$1CmlGO
                                 g$x$7544$1CmlGO
                                 g$ls$7545$1CmlGO)
                             g$ls$7545$1CmlGO
                             (cons g$x$7544$1CmlGO g$ls$7545$1CmlGO))))))
              (case-lambda
                (() g$set$7541$1CmlGO)
                ((g$x$7543$1CmlGO)
                 (set! g$set$7541$1CmlGO
                   (g$set-cons$7542$1CmlGO
                     g$x$7543$1CmlGO
                     g$set$7541$1CmlGO)))))))
         '()))))
   (g$current-library-collection$7481$1CmlGO
     g$current-library-collection$7685$1CmlGO
     (g$make-parameter$7193$1CmlGO
       (g$make-collection$7480$1CmlGO)
       (case-lambda
         ((g$x$7546$1CmlGO)
          (begin
            (if (not (procedure? g$x$7546$1CmlGO))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$7546$1CmlGO)
              (void))
            g$x$7546$1CmlGO)))))
   (g$8575$7482$1CmlGO
     g$8575$7686$1CmlGO
     (make-record-type-descriptor
       'library
       '#f
       'g$8578$1CmlGO
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$8577$7483$1CmlGO g$8577$7687$1CmlGO '#f)
   (g$8576$7484$1CmlGO
     g$8576$7688$1CmlGO
     (make-record-constructor-descriptor
       g$8575$7482$1CmlGO
       '#f
       g$8577$7483$1CmlGO))
   (g$library?$7485$1CmlGO
     g$library?$7689$1CmlGO
     (record-predicate g$8575$7482$1CmlGO))
   (g$make-library$7486$1CmlGO
     g$make-library$7690$1CmlGO
     (record-constructor g$8576$7484$1CmlGO))
   (g$library-id$7487$1CmlGO
     g$library-id$7691$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '0))
   (g$library-name$7488$1CmlGO
     g$library-name$7692$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '1))
   (g$library-version$7489$1CmlGO
     g$library-version$7693$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '2))
   (g$library-imp*$7490$1CmlGO
     g$library-imp*$7694$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '3))
   (g$library-vis*$7491$1CmlGO
     g$library-vis*$7695$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '4))
   (g$library-inv*$7492$1CmlGO
     g$library-inv*$7696$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '5))
   (g$library-subst$7493$1CmlGO
     g$library-subst$7697$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '6))
   (g$library-env$7494$1CmlGO
     g$library-env$7698$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '7))
   (g$library-visit-state$7495$1CmlGO
     g$library-visit-state$7699$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '8))
   (g$library-invoke-state$7496$1CmlGO
     g$library-invoke-state$7700$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '9))
   (g$library-visit-code$7497$1CmlGO
     g$library-visit-code$7701$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '10))
   (g$library-invoke-code$7498$1CmlGO
     g$library-invoke-code$7702$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '11))
   (g$library-visible?$7499$1CmlGO
     g$library-visible?$7703$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '12))
   (g$library-source-file-name$7500$1CmlGO
     g$library-source-file-name$7704$1CmlGO
     (record-accessor g$8575$7482$1CmlGO '13))
   (g$set-library-id!$7501$1CmlGO
     g$set-library-id!$7705$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '0))
   (g$set-library-name!$7502$1CmlGO
     g$set-library-name!$7706$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '1))
   (g$set-library-version!$7503$1CmlGO
     g$set-library-version!$7707$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '2))
   (g$set-library-imp*!$7504$1CmlGO
     g$set-library-imp*!$7708$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '3))
   (g$set-library-vis*!$7505$1CmlGO
     g$set-library-vis*!$7709$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '4))
   (g$set-library-inv*!$7506$1CmlGO
     g$set-library-inv*!$7710$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '5))
   (g$set-library-subst!$7507$1CmlGO
     g$set-library-subst!$7711$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '6))
   (g$set-library-env!$7508$1CmlGO
     g$set-library-env!$7712$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '7))
   (g$set-library-visit-state!$7509$1CmlGO
     g$set-library-visit-state!$7713$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '8))
   (g$set-library-invoke-state!$7510$1CmlGO
     g$set-library-invoke-state!$7714$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '9))
   (g$set-library-visit-code!$7511$1CmlGO
     g$set-library-visit-code!$7715$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '10))
   (g$set-library-invoke-code!$7512$1CmlGO
     g$set-library-invoke-code!$7716$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '11))
   (g$set-library-visible?!$7513$1CmlGO
     g$set-library-visible?!$7717$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '12))
   (g$set-library-source-file-name!$7514$1CmlGO
     g$set-library-source-file-name!$7718$1CmlGO
     (record-mutator g$8575$7482$1CmlGO '13))
   (g$rp$7515$1CmlGO
     g$rp$7719$1CmlGO
     (make-record-printer
       'library
       (case-lambda
         ((g$x$7547$1CmlGO g$p$7548$1CmlGO)
          (begin
            (if (not (g$library?$7485$1CmlGO g$x$7547$1CmlGO))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$7108$1CmlGO
                '"#<library ~s>"
                (if (null? (g$library-version$7489$1CmlGO g$x$7547$1CmlGO))
                  (g$library-name$7488$1CmlGO g$x$7547$1CmlGO)
                  (append
                    (g$library-name$7488$1CmlGO g$x$7547$1CmlGO)
                    (list (g$library-version$7489$1CmlGO g$x$7547$1CmlGO)))))
              g$p$7548$1CmlGO))))))
   (g$find-dependencies$7516$1CmlGO
     g$find-dependencies$7720$1CmlGO
     (case-lambda
       ((g$ls$7549$1CmlGO)
        (if (null? g$ls$7549$1CmlGO)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$7517$1CmlGO
     g$find-library-by$7721$1CmlGO
     (case-lambda
       ((g$pred$7550$1CmlGO)
        ((letrec ((g$f$7551$1CmlGO
                    (case-lambda
                      ((g$ls$7552$1CmlGO)
                       (if (null? g$ls$7552$1CmlGO)
                         '#f
                         (if (g$pred$7550$1CmlGO (car g$ls$7552$1CmlGO))
                           (car g$ls$7552$1CmlGO)
                           (g$f$7551$1CmlGO (cdr g$ls$7552$1CmlGO))))))))
           g$f$7551$1CmlGO)
         ((g$current-library-collection$7481$1CmlGO))))))
   (g$library-path$7518$1CmlGO
     g$library-path$7722$1CmlGO
     (g$make-parameter$7193$1CmlGO
       '(".")
       (case-lambda
         ((g$x$7553$1CmlGO)
          (if (if (list? g$x$7553$1CmlGO)
                (begin '#f (g$for-all$5668$1CmlGO string? g$x$7553$1CmlGO))
                '#f)
            (map (case-lambda ((g$x$7554$1CmlGO) g$x$7554$1CmlGO))
                 g$x$7553$1CmlGO)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$7553$1CmlGO))))))
   (g$library-extensions$7519$1CmlGO
     g$library-extensions$7723$1CmlGO
     (g$make-parameter$7193$1CmlGO
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$7555$1CmlGO)
          (if (if (list? g$x$7555$1CmlGO)
                (begin '#f (g$for-all$5668$1CmlGO string? g$x$7555$1CmlGO))
                '#f)
            (map (case-lambda ((g$x$7556$1CmlGO) g$x$7556$1CmlGO))
                 g$x$7555$1CmlGO)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$7555$1CmlGO))))))
   (g$library-name->file-name$7520$1CmlGO
     g$library-name->file-name$7724$1CmlGO
     (case-lambda
       ((g$x$7557$1CmlGO)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6902$1CmlGO)))
          (case-lambda
            ((g$p$7560$1CmlGO g$extract$7561$1CmlGO)
             ((case-lambda
                ((g$extract$7562$1CmlGO g$p$7563$1CmlGO)
                 (letrec* ((g$display-hex$7564$1CmlGO
                             (case-lambda
                               ((g$n$7572$1CmlGO)
                                (if (<= '0 g$n$7572$1CmlGO '9)
                                  (display g$n$7572$1CmlGO g$p$7563$1CmlGO)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$7572$1CmlGO '10)))
                                    g$p$7563$1CmlGO))))))
                   (begin
                     ((letrec ((g$f$7565$1CmlGO
                                 (case-lambda
                                   ((g$ls$7566$1CmlGO)
                                    (if (not (null? g$ls$7566$1CmlGO))
                                      (begin
                                        (display '"/" g$p$7563$1CmlGO)
                                        (for-each
                                          (case-lambda
                                            ((g$c$7567$1CmlGO)
                                             (if ((case-lambda
                                                    ((g$t$7568$1CmlGO)
                                                     (if g$t$7568$1CmlGO
                                                       g$t$7568$1CmlGO
                                                       ((case-lambda
                                                          ((g$t$7569$1CmlGO)
                                                           (if g$t$7569$1CmlGO
                                                             g$t$7569$1CmlGO
                                                             ((case-lambda
                                                                ((g$t$7570$1CmlGO)
                                                                 (if g$t$7570$1CmlGO
                                                                   g$t$7570$1CmlGO
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5663$1CmlGO
                                                                       g$c$7567$1CmlGO
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5869$1CmlGO
                                                                '#\0
                                                                g$c$7567$1CmlGO
                                                                '#\9)))))
                                                        (g$char<=?$5869$1CmlGO
                                                          '#\A
                                                          g$c$7567$1CmlGO
                                                          '#\Z)))))
                                                  (g$char<=?$5869$1CmlGO
                                                    '#\a
                                                    g$c$7567$1CmlGO
                                                    '#\z))
                                               (display
                                                 g$c$7567$1CmlGO
                                                 g$p$7563$1CmlGO)
                                               (begin
                                                 (display '"%" g$p$7563$1CmlGO)
                                                 ((case-lambda
                                                    ((g$n$7571$1CmlGO)
                                                     (begin
                                                       (g$display-hex$7564$1CmlGO
                                                         (g$quotient$6484$1CmlGO
                                                           g$n$7571$1CmlGO
                                                           '16))
                                                       (g$display-hex$7564$1CmlGO
                                                         (g$remainder$6485$1CmlGO
                                                           g$n$7571$1CmlGO
                                                           '16)))))
                                                  (char->integer
                                                    g$c$7567$1CmlGO))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$7566$1CmlGO))))
                                        (g$f$7565$1CmlGO
                                          (cdr g$ls$7566$1CmlGO)))
                                      (void))))))
                        g$f$7565$1CmlGO)
                      g$x$7557$1CmlGO)
                     (g$extract$7562$1CmlGO)))))
              g$extract$7561$1CmlGO
              g$p$7560$1CmlGO)))))))
   (g$file-locator$7521$1CmlGO
     g$file-locator$7725$1CmlGO
     (g$make-parameter$7193$1CmlGO
       (case-lambda
         ((g$x$7573$1CmlGO)
          ((case-lambda
             ((g$str$7574$1CmlGO)
              ((letrec ((g$f$7575$1CmlGO
                          (case-lambda
                            ((g$ls$7576$1CmlGO
                               g$exts$7577$1CmlGO
                               g$failed-list$7578$1CmlGO)
                             (if (null? g$ls$7576$1CmlGO)
                               ((case-lambda
                                  (()
                                   (letrec* ((g$8680$7579$1CmlGO
                                               (make-record-type-descriptor
                                                 '&library-resolution
                                                 &condition-rtd
                                                 'g$8683$1CmlGO
                                                 '#f
                                                 '#f
                                                 '#((immutable library)
                                                    (immutable files))))
                                             (g$8682$7580$1CmlGO '#f)
                                             (g$8681$7581$1CmlGO
                                               (make-record-constructor-descriptor
                                                 g$8680$7579$1CmlGO
                                                 &condition-rcd
                                                 g$8682$7580$1CmlGO))
                                             (g$8679$7582$1CmlGO
                                               (record-predicate
                                                 g$8680$7579$1CmlGO))
                                             (g$make-library-resolution-condition$7583$1CmlGO
                                               (record-constructor
                                                 g$8681$7581$1CmlGO))
                                             (g$8677$7584$1CmlGO
                                               (record-accessor
                                                 g$8680$7579$1CmlGO
                                                 '0))
                                             (g$8678$7585$1CmlGO
                                               (record-accessor
                                                 g$8680$7579$1CmlGO
                                                 '1))
                                             (g$library-resolution-condition?$7586$1CmlGO
                                               (condition-predicate
                                                 g$8680$7579$1CmlGO))
                                             (g$condition-library$7587$1CmlGO
                                               (condition-accessor
                                                 g$8680$7579$1CmlGO
                                                 g$8677$7584$1CmlGO))
                                             (g$condition-files$7588$1CmlGO
                                               (condition-accessor
                                                 g$8680$7579$1CmlGO
                                                 g$8678$7585$1CmlGO)))
                                     (raise
                                       (condition
                                         (g$make-error$6394$1CmlGO)
                                         (g$make-who-condition$6420$1CmlGO
                                           'expander)
                                         (g$make-message-condition$6374$1CmlGO
                                           '"cannot locate library in library-path")
                                         (g$make-library-resolution-condition$7583$1CmlGO
                                           g$x$7573$1CmlGO
                                           (reverse
                                             g$failed-list$7578$1CmlGO))))))))
                               (if (null? g$exts$7577$1CmlGO)
                                 (g$f$7575$1CmlGO
                                   (cdr g$ls$7576$1CmlGO)
                                   (g$library-extensions$7519$1CmlGO)
                                   g$failed-list$7578$1CmlGO)
                                 ((case-lambda
                                    ((g$name$7589$1CmlGO)
                                     (if (g$file-exists?$6125$1CmlGO
                                           g$name$7589$1CmlGO)
                                       g$name$7589$1CmlGO
                                       (g$f$7575$1CmlGO
                                         g$ls$7576$1CmlGO
                                         (cdr g$exts$7577$1CmlGO)
                                         (cons
                                           g$name$7589$1CmlGO
                                           g$failed-list$7578$1CmlGO)))))
                                  (string-append
                                    (car g$ls$7576$1CmlGO)
                                    g$str$7574$1CmlGO
                                    (car g$exts$7577$1CmlGO)))))))))
                 g$f$7575$1CmlGO)
               (g$library-path$7518$1CmlGO)
               (g$library-extensions$7519$1CmlGO)
               '())))
           (g$library-name->file-name$7520$1CmlGO g$x$7573$1CmlGO))))
       (case-lambda
         ((g$f$7590$1CmlGO)
          (if (procedure? g$f$7590$1CmlGO)
            g$f$7590$1CmlGO
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$7590$1CmlGO))))))
   (g$serialize-all$7522$1CmlGO
     g$serialize-all$7726$1CmlGO
     (case-lambda
       ((g$serialize$7591$1CmlGO g$compile$7592$1CmlGO)
        (letrec* ((g$library-desc$7593$1CmlGO
                    (case-lambda
                      ((g$x$7595$1CmlGO)
                       (list
                         (g$library-id$7487$1CmlGO g$x$7595$1CmlGO)
                         (g$library-name$7488$1CmlGO g$x$7595$1CmlGO))))))
          (for-each
            (case-lambda
              ((g$x$7594$1CmlGO)
               (if (g$library-source-file-name$7500$1CmlGO g$x$7594$1CmlGO)
                 (g$serialize$7591$1CmlGO
                   (g$library-source-file-name$7500$1CmlGO g$x$7594$1CmlGO)
                   (list
                     (g$library-id$7487$1CmlGO g$x$7594$1CmlGO)
                     (g$library-name$7488$1CmlGO g$x$7594$1CmlGO)
                     (g$library-version$7489$1CmlGO g$x$7594$1CmlGO)
                     (map g$library-desc$7593$1CmlGO
                          (g$library-imp*$7490$1CmlGO g$x$7594$1CmlGO))
                     (map g$library-desc$7593$1CmlGO
                          (g$library-vis*$7491$1CmlGO g$x$7594$1CmlGO))
                     (map g$library-desc$7593$1CmlGO
                          (g$library-inv*$7492$1CmlGO g$x$7594$1CmlGO))
                     (g$library-subst$7493$1CmlGO g$x$7594$1CmlGO)
                     (g$library-env$7494$1CmlGO g$x$7594$1CmlGO)
                     (g$compile$7592$1CmlGO
                       (g$library-visit-code$7497$1CmlGO g$x$7594$1CmlGO))
                     (g$compile$7592$1CmlGO
                       (g$library-invoke-code$7498$1CmlGO g$x$7594$1CmlGO))
                     (g$library-visible?$7499$1CmlGO g$x$7594$1CmlGO)))
                 (void))))
            ((g$current-library-collection$7481$1CmlGO)))))))
   (g$current-precompiled-library-loader$7523$1CmlGO
     g$current-precompiled-library-loader$7727$1CmlGO
     (g$make-parameter$7193$1CmlGO
       (case-lambda ((g$filename$7596$1CmlGO g$sk$7597$1CmlGO) '#f))))
   (g$try-load-from-file$7524$1CmlGO
     g$try-load-from-file$7728$1CmlGO
     (case-lambda
       ((g$filename$7598$1CmlGO)
        ((g$current-precompiled-library-loader$7523$1CmlGO)
         g$filename$7598$1CmlGO
         (case-lambda
           ((g$id$7599$1CmlGO
              g$name$7600$1CmlGO
              g$ver$7601$1CmlGO
              g$imp*$7602$1CmlGO
              g$vis*$7603$1CmlGO
              g$inv*$7604$1CmlGO
              g$exp-subst$7605$1CmlGO
              g$exp-env$7606$1CmlGO
              g$visit-proc$7607$1CmlGO
              g$invoke-proc$7608$1CmlGO
              g$visible?$7609$1CmlGO)
            ((letrec ((g$f$7610$1CmlGO
                        (case-lambda
                          ((g$deps$7611$1CmlGO)
                           (if (null? g$deps$7611$1CmlGO)
                             (begin
                               (g$install-library$7534$1CmlGO
                                 g$id$7599$1CmlGO
                                 g$name$7600$1CmlGO
                                 g$ver$7601$1CmlGO
                                 g$imp*$7602$1CmlGO
                                 g$vis*$7603$1CmlGO
                                 g$inv*$7604$1CmlGO
                                 g$exp-subst$7605$1CmlGO
                                 g$exp-env$7606$1CmlGO
                                 g$visit-proc$7607$1CmlGO
                                 g$invoke-proc$7608$1CmlGO
                                 '#f
                                 '#f
                                 g$visible?$7609$1CmlGO
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$7612$1CmlGO)
                                 ((case-lambda
                                    ((g$label$7613$1CmlGO g$dname$7614$1CmlGO)
                                     ((case-lambda
                                        ((g$l$7615$1CmlGO)
                                         (if (if (g$library?$7485$1CmlGO
                                                   g$l$7615$1CmlGO)
                                               (begin
                                                 '#f
                                                 (eq? g$label$7613$1CmlGO
                                                      (g$library-id$7487$1CmlGO
                                                        g$l$7615$1CmlGO)))
                                               '#f)
                                           (g$f$7610$1CmlGO
                                             (cdr g$deps$7611$1CmlGO))
                                           (begin
                                             (g$fprintf$7107$1CmlGO
                                               (current-error-port)
                                               '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
                                               g$name$7600$1CmlGO
                                               g$dname$7614$1CmlGO
                                               g$filename$7598$1CmlGO)
                                             '#f))))
                                      (g$find-library-by-name$7529$1CmlGO
                                        g$dname$7614$1CmlGO))))
                                  (car g$d$7612$1CmlGO)
                                  (g$cadr$5832$1CmlGO g$d$7612$1CmlGO))))
                              (car g$deps$7611$1CmlGO)))))))
               g$f$7610$1CmlGO)
             (append g$imp*$7602$1CmlGO g$vis*$7603$1CmlGO g$inv*$7604$1CmlGO)))
           (g$others$7616$1CmlGO '#f))))))
   (g$library-loader$7525$1CmlGO
     g$library-loader$7729$1CmlGO
     (g$make-parameter$7193$1CmlGO
       (case-lambda
         ((g$x$7617$1CmlGO)
          ((case-lambda
             ((g$file-name$7618$1CmlGO)
              (if (not g$file-name$7618$1CmlGO)
                (assertion-violation '#f '"cannot file library" g$x$7617$1CmlGO)
                ((case-lambda
                   ((g$t$7619$1CmlGO)
                    (if g$t$7619$1CmlGO
                      g$t$7619$1CmlGO
                      (begin
                        '#f
                        ((g$current-library-expander$7526$1CmlGO)
                         (g$read-library-source-file$7192$1CmlGO
                           g$file-name$7618$1CmlGO)
                         g$file-name$7618$1CmlGO
                         (case-lambda
                           ((g$name$7620$1CmlGO)
                            (if (not (equal?
                                       g$name$7620$1CmlGO
                                       g$x$7617$1CmlGO))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$6902$1CmlGO)))
                                  (case-lambda
                                    ((g$p$7623$1CmlGO g$e$7624$1CmlGO)
                                     ((case-lambda
                                        ((g$e$7625$1CmlGO g$p$7626$1CmlGO)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7626$1CmlGO)
                                           (write
                                             g$x$7617$1CmlGO
                                             g$p$7626$1CmlGO)
                                           (display
                                             '" in file "
                                             g$p$7626$1CmlGO)
                                           (display
                                             g$file-name$7618$1CmlGO
                                             g$p$7626$1CmlGO)
                                           (display '", found " g$p$7626$1CmlGO)
                                           (write
                                             g$name$7620$1CmlGO
                                             g$p$7626$1CmlGO)
                                           (display '" instead" g$p$7626$1CmlGO)
                                           (g$e$7625$1CmlGO))))
                                      g$e$7624$1CmlGO
                                      g$p$7623$1CmlGO)))))
                              (void)))))))))
                 (g$try-load-from-file$7524$1CmlGO g$file-name$7618$1CmlGO)))))
           ((g$file-locator$7521$1CmlGO) g$x$7617$1CmlGO))))
       (case-lambda
         ((g$f$7627$1CmlGO)
          (if (procedure? g$f$7627$1CmlGO)
            g$f$7627$1CmlGO
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7627$1CmlGO))))))
   (g$current-library-expander$7526$1CmlGO
     g$current-library-expander$7730$1CmlGO
     (g$make-parameter$7193$1CmlGO
       (case-lambda
         ((g$x$7628$1CmlGO)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7629$1CmlGO)
          (if (procedure? g$f$7629$1CmlGO)
            g$f$7629$1CmlGO
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7629$1CmlGO))))))
   (g$external-pending-libraries$7527$1CmlGO
     g$external-pending-libraries$7731$1CmlGO
     (g$make-parameter$7193$1CmlGO '()))
   (g$find-external-library$7528$1CmlGO
     g$find-external-library$7732$1CmlGO
     (case-lambda
       ((g$name$7630$1CmlGO)
        (begin
          (if (g$member$5664$1CmlGO
                g$name$7630$1CmlGO
                (g$external-pending-libraries$7527$1CmlGO))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7630$1CmlGO)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7633$1CmlGO
                g$external-pending-libraries$7634$1CmlGO)
              ((case-lambda
                 ((g$swap$7635$1CmlGO)
                  (dynamic-wind
                    g$swap$7635$1CmlGO
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$7525$1CmlGO) g$name$7630$1CmlGO)
                         ((case-lambda
                            ((g$t$7636$1CmlGO)
                             (if g$t$7636$1CmlGO
                               g$t$7636$1CmlGO
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7630$1CmlGO)))))
                          (g$find-library-by$7517$1CmlGO
                            (case-lambda
                              ((g$x$7637$1CmlGO)
                               (equal?
                                 (g$library-name$7488$1CmlGO g$x$7637$1CmlGO)
                                 g$name$7630$1CmlGO))))))))
                    g$swap$7635$1CmlGO)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7638$1CmlGO)
                      (begin
                        (g$external-pending-libraries$7633$1CmlGO
                          g$external-pending-libraries$7634$1CmlGO)
                        (set! g$external-pending-libraries$7634$1CmlGO
                          g$t$7638$1CmlGO))))
                   (g$external-pending-libraries$7633$1CmlGO)))))))
           g$external-pending-libraries$7527$1CmlGO
           (cons
             g$name$7630$1CmlGO
             (g$external-pending-libraries$7527$1CmlGO)))))))
   (g$find-library-by-name$7529$1CmlGO
     g$find-library-by-name$7733$1CmlGO
     (case-lambda
       ((g$name$7639$1CmlGO)
        ((case-lambda
           ((g$t$7640$1CmlGO)
            (if g$t$7640$1CmlGO
              g$t$7640$1CmlGO
              (begin
                '#f
                (g$find-external-library$7528$1CmlGO g$name$7639$1CmlGO)))))
         (g$find-library-by$7517$1CmlGO
           (case-lambda
             ((g$x$7641$1CmlGO)
              (equal?
                (g$library-name$7488$1CmlGO g$x$7641$1CmlGO)
                g$name$7639$1CmlGO))))))))
   (g$library-exists?$7530$1CmlGO
     g$library-exists?$7734$1CmlGO
     (case-lambda
       ((g$name$7642$1CmlGO)
        (if (g$find-library-by$7517$1CmlGO
              (case-lambda
                ((g$x$7643$1CmlGO)
                 (equal?
                   (g$library-name$7488$1CmlGO g$x$7643$1CmlGO)
                   g$name$7642$1CmlGO))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$7531$1CmlGO
     g$find-library-by-spec/die$7735$1CmlGO
     (case-lambda
       ((g$spec$7644$1CmlGO)
        ((case-lambda
           ((g$id$7645$1CmlGO)
            ((case-lambda
               ((g$t$7646$1CmlGO)
                (if g$t$7646$1CmlGO
                  g$t$7646$1CmlGO
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7644$1CmlGO)))))
             (g$find-library-by$7517$1CmlGO
               (case-lambda
                 ((g$x$7647$1CmlGO)
                  (eq? g$id$7645$1CmlGO
                       (g$library-id$7487$1CmlGO g$x$7647$1CmlGO))))))))
         (car g$spec$7644$1CmlGO)))))
   (g$label->binding-table$7532$1CmlGO
     g$label->binding-table$7736$1CmlGO
     (g$make-eq-hashtable$6106$1CmlGO))
   (g$install-library-record$7533$1CmlGO
     g$install-library-record$7737$1CmlGO
     (case-lambda
       ((g$lib$7648$1CmlGO)
        (begin
          ((case-lambda
             ((g$exp-env$7649$1CmlGO)
              (for-each
                (case-lambda
                  ((g$x$7650$1CmlGO)
                   ((case-lambda
                      ((g$label$7651$1CmlGO g$binding$7652$1CmlGO)
                       ((case-lambda
                          ((g$binding$7653$1CmlGO)
                           (g$hashtable-set!$6110$1CmlGO
                             g$label->binding-table$7532$1CmlGO
                             g$label$7651$1CmlGO
                             g$binding$7653$1CmlGO)))
                        ((case-lambda
                           ((g$t$7654$1CmlGO)
                            (if (g$memv$5663$1CmlGO g$t$7654$1CmlGO '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7648$1CmlGO
                                  (cdr g$binding$7652$1CmlGO)))
                              (if (g$memv$5663$1CmlGO
                                    g$t$7654$1CmlGO
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7648$1CmlGO
                                    (cdr g$binding$7652$1CmlGO)))
                                (if (g$memv$5663$1CmlGO
                                      g$t$7654$1CmlGO
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7648$1CmlGO
                                      (cdr g$binding$7652$1CmlGO)))
                                  g$binding$7652$1CmlGO)))))
                         (car g$binding$7652$1CmlGO)))))
                    (car g$x$7650$1CmlGO)
                    (cdr g$x$7650$1CmlGO))))
                g$exp-env$7649$1CmlGO)))
           (g$library-env$7494$1CmlGO g$lib$7648$1CmlGO))
          ((g$current-library-collection$7481$1CmlGO) g$lib$7648$1CmlGO)))))
   (g$install-library$7534$1CmlGO
     g$install-library$7738$1CmlGO
     (case-lambda
       ((g$id$7655$1CmlGO
          g$name$7656$1CmlGO
          g$ver$7657$1CmlGO
          g$imp*$7658$1CmlGO
          g$vis*$7659$1CmlGO
          g$inv*$7660$1CmlGO
          g$exp-subst$7661$1CmlGO
          g$exp-env$7662$1CmlGO
          g$visit-proc$7663$1CmlGO
          g$invoke-proc$7664$1CmlGO
          g$visit-code$7665$1CmlGO
          g$invoke-code$7666$1CmlGO
          g$visible?$7667$1CmlGO
          g$source-file-name$7668$1CmlGO)
        ((case-lambda
           ((g$imp-lib*$7669$1CmlGO
              g$vis-lib*$7670$1CmlGO
              g$inv-lib*$7671$1CmlGO)
            (begin
              (if (not (if (symbol? g$id$7655$1CmlGO)
                         (if (list? g$name$7656$1CmlGO)
                           (begin '#f (list? g$ver$7657$1CmlGO))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7655$1CmlGO
                  g$name$7656$1CmlGO
                  g$ver$7657$1CmlGO)
                (void))
              (if (g$library-exists?$7530$1CmlGO g$name$7656$1CmlGO)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7656$1CmlGO)
                (void))
              ((case-lambda
                 ((g$lib$7672$1CmlGO)
                  (g$install-library-record$7533$1CmlGO g$lib$7672$1CmlGO)))
               (g$make-library$7486$1CmlGO
                 g$id$7655$1CmlGO
                 g$name$7656$1CmlGO
                 g$ver$7657$1CmlGO
                 g$imp-lib*$7669$1CmlGO
                 g$vis-lib*$7670$1CmlGO
                 g$inv-lib*$7671$1CmlGO
                 g$exp-subst$7661$1CmlGO
                 g$exp-env$7662$1CmlGO
                 g$visit-proc$7663$1CmlGO
                 g$invoke-proc$7664$1CmlGO
                 g$visit-code$7665$1CmlGO
                 g$invoke-code$7666$1CmlGO
                 g$visible?$7667$1CmlGO
                 g$source-file-name$7668$1CmlGO)))))
         (map g$find-library-by-spec/die$7531$1CmlGO g$imp*$7658$1CmlGO)
         (map g$find-library-by-spec/die$7531$1CmlGO g$vis*$7659$1CmlGO)
         (map g$find-library-by-spec/die$7531$1CmlGO g$inv*$7660$1CmlGO)))))
   (g$imported-label->binding$7535$1CmlGO
     g$imported-label->binding$7739$1CmlGO
     (case-lambda
       ((g$lab$7673$1CmlGO)
        (g$hashtable-ref$6109$1CmlGO
          g$label->binding-table$7532$1CmlGO
          g$lab$7673$1CmlGO
          '#f))))
   (g$invoke-library$7536$1CmlGO
     g$invoke-library$7740$1CmlGO
     (case-lambda
       ((g$lib$7674$1CmlGO)
        ((case-lambda
           ((g$invoke$7675$1CmlGO)
            (if (procedure? g$invoke$7675$1CmlGO)
              (begin
                (g$set-library-invoke-state!$7510$1CmlGO
                  g$lib$7674$1CmlGO
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7674$1CmlGO))))
                (for-each
                  g$invoke-library$7536$1CmlGO
                  (g$library-inv*$7492$1CmlGO g$lib$7674$1CmlGO))
                (g$set-library-invoke-state!$7510$1CmlGO
                  g$lib$7674$1CmlGO
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7674$1CmlGO))))
                (g$invoke$7675$1CmlGO)
                (g$set-library-invoke-state!$7510$1CmlGO g$lib$7674$1CmlGO '#t))
              (void))))
         (g$library-invoke-state$7496$1CmlGO g$lib$7674$1CmlGO)))))
   (g$visit-library$7537$1CmlGO
     g$visit-library$7741$1CmlGO
     (case-lambda
       ((g$lib$7676$1CmlGO)
        ((case-lambda
           ((g$visit$7677$1CmlGO)
            (if (procedure? g$visit$7677$1CmlGO)
              (begin
                (g$set-library-visit-state!$7509$1CmlGO
                  g$lib$7676$1CmlGO
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7676$1CmlGO))))
                (for-each
                  g$invoke-library$7536$1CmlGO
                  (g$library-vis*$7491$1CmlGO g$lib$7676$1CmlGO))
                (g$set-library-visit-state!$7509$1CmlGO
                  g$lib$7676$1CmlGO
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7676$1CmlGO))))
                (g$visit$7677$1CmlGO)
                (g$set-library-visit-state!$7509$1CmlGO g$lib$7676$1CmlGO '#t))
              (void))))
         (g$library-visit-state$7495$1CmlGO g$lib$7676$1CmlGO)))))
   (g$invoke-library-by-spec$7538$1CmlGO
     g$invoke-library-by-spec$7742$1CmlGO
     (case-lambda
       ((g$spec$7678$1CmlGO)
        (g$invoke-library$7536$1CmlGO
          (g$find-library-by-spec/die$7531$1CmlGO g$spec$7678$1CmlGO)))))
   (g$installed-libraries$7539$1CmlGO
     g$installed-libraries$7743$1CmlGO
     (case-lambda
       ((g$all?$7679$1CmlGO)
        ((letrec ((g$f$7680$1CmlGO
                    (case-lambda
                      ((g$ls$7681$1CmlGO)
                       (if (null? g$ls$7681$1CmlGO)
                         '()
                         (if ((case-lambda
                                ((g$t$7682$1CmlGO)
                                 (if g$t$7682$1CmlGO
                                   g$t$7682$1CmlGO
                                   (begin
                                     '#f
                                     (g$library-visible?$7499$1CmlGO
                                       (car g$ls$7681$1CmlGO))))))
                              g$all?$7679$1CmlGO)
                           (cons
                             (car g$ls$7681$1CmlGO)
                             (g$f$7680$1CmlGO (cdr g$ls$7681$1CmlGO)))
                           (g$f$7680$1CmlGO (cdr g$ls$7681$1CmlGO))))))))
           g$f$7680$1CmlGO)
         ((g$current-library-collection$7481$1CmlGO))))
       (() (g$installed-libraries$7539$1CmlGO '#f))))
   (g$library-spec$7540$1CmlGO
     g$library-spec$7744$1CmlGO
     (case-lambda
       ((g$x$7683$1CmlGO)
        (begin
          (if (not (g$library?$7485$1CmlGO g$x$7683$1CmlGO))
            (assertion-violation 'library-spec '"not a library" g$x$7683$1CmlGO)
            (void))
          (list
            (g$library-id$7487$1CmlGO g$x$7683$1CmlGO)
            (g$library-name$7488$1CmlGO g$x$7683$1CmlGO)
            (g$library-version$7489$1CmlGO g$x$7683$1CmlGO)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7745$1CmlGO
     g$build-global-define$7855$1CmlGO
     (case-lambda ((g$x$7826$1CmlGO) (g$build-void$7822$1CmlGO))))
   (g$build-lambda$7794$1CmlGO
     g$build-lambda$7856$1CmlGO
     (case-lambda
       ((g$ae$7827$1CmlGO g$vars$7828$1CmlGO g$exp$7829$1CmlGO)
        (list 'case-lambda (list g$vars$7828$1CmlGO g$exp$7829$1CmlGO)))))
   (g$build-case-lambda$7795$1CmlGO
     g$build-case-lambda$7857$1CmlGO
     (case-lambda
       ((g$ae$7830$1CmlGO g$vars*$7831$1CmlGO g$exp*$7832$1CmlGO)
        (cons 'case-lambda (map list g$vars*$7831$1CmlGO g$exp*$7832$1CmlGO)))))
   (g$build-let$7796$1CmlGO
     g$build-let$7858$1CmlGO
     (case-lambda
       ((g$ae$7833$1CmlGO
          g$lhs*$7834$1CmlGO
          g$rhs*$7835$1CmlGO
          g$body$7836$1CmlGO)
        (cons
          (g$build-lambda$7794$1CmlGO
            g$ae$7833$1CmlGO
            g$lhs*$7834$1CmlGO
            g$body$7836$1CmlGO)
          g$rhs*$7835$1CmlGO))))
   (g$build-sequence$7821$1CmlGO
     g$build-sequence$7859$1CmlGO
     (case-lambda
       ((g$ae$7837$1CmlGO g$exps$7838$1CmlGO)
        ((letrec ((g$loop$7839$1CmlGO
                    (case-lambda
                      ((g$exps$7840$1CmlGO)
                       (if (null? (cdr g$exps$7840$1CmlGO))
                         (car g$exps$7840$1CmlGO)
                         (if (equal?
                               (car g$exps$7840$1CmlGO)
                               (g$build-void$7822$1CmlGO))
                           (g$loop$7839$1CmlGO (cdr g$exps$7840$1CmlGO))
                           (cons 'begin g$exps$7840$1CmlGO)))))))
           g$loop$7839$1CmlGO)
         g$exps$7838$1CmlGO))))
   (g$build-void$7822$1CmlGO
     g$build-void$7860$1CmlGO
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7823$1CmlGO
     g$build-letrec$7861$1CmlGO
     (case-lambda
       ((g$ae$7841$1CmlGO
          g$vars$7842$1CmlGO
          g$val-exps$7843$1CmlGO
          g$body-exp$7844$1CmlGO)
        (if (null? g$vars$7842$1CmlGO)
          g$body-exp$7844$1CmlGO
          (list
            'letrec
            (map list g$vars$7842$1CmlGO g$val-exps$7843$1CmlGO)
            g$body-exp$7844$1CmlGO)))))
   (g$build-letrec*$7824$1CmlGO
     g$build-letrec*$7862$1CmlGO
     (case-lambda
       ((g$ae$7845$1CmlGO
          g$vars$7846$1CmlGO
          g$val-exps$7847$1CmlGO
          g$body-exp$7848$1CmlGO)
        (if (null? g$vars$7846$1CmlGO)
          g$body-exp$7848$1CmlGO
          (list
            'letrec*
            (map list g$vars$7846$1CmlGO g$val-exps$7847$1CmlGO)
            g$body-exp$7848$1CmlGO)))))
   (g$build-library-letrec*$7825$1CmlGO
     g$build-library-letrec*$7863$1CmlGO
     (case-lambda
       ((g$ae$7849$1CmlGO
          g$name$7850$1CmlGO
          g$vars$7851$1CmlGO
          g$locs$7852$1CmlGO
          g$val-exps$7853$1CmlGO
          g$body-exp$7854$1CmlGO)
        (list
          'library-letrec*
          g$name$7850$1CmlGO
          (map list
               g$vars$7851$1CmlGO
               g$locs$7852$1CmlGO
               g$val-exps$7853$1CmlGO)
          g$body-exp$7854$1CmlGO)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7864$1CmlGO
     g$set-cons$11517$1CmlGO
     (case-lambda
       ((g$x$8322$1CmlGO g$ls$8323$1CmlGO)
        (if (g$memq$5662$1CmlGO g$x$8322$1CmlGO g$ls$8323$1CmlGO)
          g$ls$8323$1CmlGO
          (cons g$x$8322$1CmlGO g$ls$8323$1CmlGO)))))
   (g$set-union$7865$1CmlGO
     g$set-union$11518$1CmlGO
     (case-lambda
       ((g$ls1$8324$1CmlGO g$ls2$8325$1CmlGO)
        (if (null? g$ls1$8324$1CmlGO)
          g$ls2$8325$1CmlGO
          (if (g$memq$5662$1CmlGO (car g$ls1$8324$1CmlGO) g$ls2$8325$1CmlGO)
            (g$set-union$7865$1CmlGO (cdr g$ls1$8324$1CmlGO) g$ls2$8325$1CmlGO)
            (cons
              (car g$ls1$8324$1CmlGO)
              (g$set-union$7865$1CmlGO
                (cdr g$ls1$8324$1CmlGO)
                g$ls2$8325$1CmlGO)))))))
   (g$top-mark*$7867$1CmlGO g$top-mark*$11519$1CmlGO '(top))
   (g$top-marked?$7868$1CmlGO
     g$top-marked?$11520$1CmlGO
     (case-lambda
       ((g$m*$8326$1CmlGO) (g$memq$5662$1CmlGO 'top g$m*$8326$1CmlGO))))
   (g$gen-lexical$7869$1CmlGO
     g$gen-lexical$11521$1CmlGO
     (case-lambda
       ((g$sym$8327$1CmlGO)
        (if (symbol? g$sym$8327$1CmlGO)
          (gensym g$sym$8327$1CmlGO)
          (if (g$stx?$7897$1CmlGO g$sym$8327$1CmlGO)
            (g$gen-lexical$7869$1CmlGO
              (g$id->sym$7926$1CmlGO g$sym$8327$1CmlGO))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$8327$1CmlGO))))))
   (g$gen-global$7870$1CmlGO
     g$gen-global$11522$1CmlGO
     (case-lambda
       ((g$x$8328$1CmlGO) (g$gen-lexical$7869$1CmlGO g$x$8328$1CmlGO))))
   (g$gen-label$7871$1CmlGO
     g$gen-label$11523$1CmlGO
     (case-lambda ((g$_$8329$1CmlGO) (gensym))))
   (g$gen-top-level-label$7872$1CmlGO
     g$gen-top-level-label$11524$1CmlGO
     (case-lambda
       ((g$id$8330$1CmlGO g$rib$8331$1CmlGO)
        (letrec* ((g$find$8332$1CmlGO
                    (case-lambda
                      ((g$sym$8338$1CmlGO
                         g$mark*$8339$1CmlGO
                         g$sym*$8340$1CmlGO
                         g$mark**$8341$1CmlGO
                         g$label*$8342$1CmlGO)
                       (if (pair? g$sym*$8340$1CmlGO)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8338$1CmlGO
                                        (car g$sym*$8340$1CmlGO))
                                 (begin
                                   '#f
                                   (g$same-marks?$7927$1CmlGO
                                     g$mark*$8339$1CmlGO
                                     (car g$mark**$8341$1CmlGO)))
                                 '#f)
                             (car g$label*$8342$1CmlGO)
                             (g$find$8332$1CmlGO
                               g$sym$8338$1CmlGO
                               g$mark*$8339$1CmlGO
                               (cdr g$sym*$8340$1CmlGO)
                               (cdr g$mark**$8341$1CmlGO)
                               (cdr g$label*$8342$1CmlGO))))
                         '#f)))))
          ((case-lambda
             ((g$sym$8333$1CmlGO g$mark*$8334$1CmlGO)
              ((case-lambda
                 ((g$sym*$8335$1CmlGO)
                  ((case-lambda
                     ((g$t$8336$1CmlGO)
                      (if g$t$8336$1CmlGO
                        ((case-lambda
                           ((g$label$8337$1CmlGO)
                            (if (g$imported-label->binding$7739$1CmlGO
                                  g$label$8337$1CmlGO)
                              (gensym)
                              g$label$8337$1CmlGO)))
                         g$t$8336$1CmlGO)
                        (gensym))))
                   (if (g$memq$5662$1CmlGO
                         g$sym$8333$1CmlGO
                         (g$rib-sym*$7880$1CmlGO g$rib$8331$1CmlGO))
                     (begin
                       '#f
                       (g$find$8332$1CmlGO
                         g$sym$8333$1CmlGO
                         g$mark*$8334$1CmlGO
                         g$sym*$8335$1CmlGO
                         (g$rib-mark**$7881$1CmlGO g$rib$8331$1CmlGO)
                         (g$rib-label*$7882$1CmlGO g$rib$8331$1CmlGO)))
                     '#f))))
               (g$rib-sym*$7880$1CmlGO g$rib$8331$1CmlGO))))
           (g$id->sym$7926$1CmlGO g$id$8330$1CmlGO)
           (g$stx-mark*$7900$1CmlGO g$id$8330$1CmlGO))))))
   (g$gen-define-label+loc$7873$1CmlGO
     g$gen-define-label+loc$11525$1CmlGO
     (case-lambda
       ((g$id$8343$1CmlGO g$rib$8344$1CmlGO)
        ((case-lambda
           ((g$t$8345$1CmlGO)
            (if g$t$8345$1CmlGO
              ((case-lambda
                 ((g$env$8346$1CmlGO)
                  ((case-lambda
                     ((g$label$8347$1CmlGO g$locs$8348$1CmlGO)
                      (values
                        g$label$8347$1CmlGO
                        ((case-lambda
                           ((g$t$8349$1CmlGO)
                            (if g$t$8349$1CmlGO
                              (cdr g$t$8349$1CmlGO)
                              ((case-lambda
                                 ((g$loc$8350$1CmlGO)
                                  (begin
                                    (g$set-interaction-env-locs!$8286$1CmlGO
                                      g$env$8346$1CmlGO
                                      (cons
                                        (cons
                                          g$label$8347$1CmlGO
                                          g$loc$8350$1CmlGO)
                                        g$locs$8348$1CmlGO))
                                    g$loc$8350$1CmlGO)))
                               (g$gen-lexical$7869$1CmlGO g$id$8343$1CmlGO)))))
                         (g$assq$5658$1CmlGO
                           g$label$8347$1CmlGO
                           g$locs$8348$1CmlGO)))))
                   (g$gen-top-level-label$7872$1CmlGO
                     g$id$8343$1CmlGO
                     g$rib$8344$1CmlGO)
                   (g$interaction-env-locs$8283$1CmlGO g$env$8346$1CmlGO))))
               g$t$8345$1CmlGO)
              (values (gensym) (g$gen-lexical$7869$1CmlGO g$id$8343$1CmlGO)))))
         (g$top-level-context$8321$1CmlGO)))))
   (g$gen-define-label$7874$1CmlGO
     g$gen-define-label$11526$1CmlGO
     (case-lambda
       ((g$id$8351$1CmlGO g$rib$8352$1CmlGO)
        (if (g$top-level-context$8321$1CmlGO)
          (g$gen-top-level-label$7872$1CmlGO g$id$8351$1CmlGO g$rib$8352$1CmlGO)
          (gensym)))))
   (g$8978$7875$1CmlGO
     g$8978$11527$1CmlGO
     (make-record-type-descriptor
       'rib
       '#f
       'g$8981$1CmlGO
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq))))
   (g$8980$7876$1CmlGO g$8980$11528$1CmlGO '#f)
   (g$8979$7877$1CmlGO
     g$8979$11529$1CmlGO
     (make-record-constructor-descriptor
       g$8978$7875$1CmlGO
       '#f
       g$8980$7876$1CmlGO))
   (g$rib?$7878$1CmlGO
     g$rib?$11530$1CmlGO
     (record-predicate g$8978$7875$1CmlGO))
   (g$make-rib$7879$1CmlGO
     g$make-rib$11531$1CmlGO
     (record-constructor g$8979$7877$1CmlGO))
   (g$rib-sym*$7880$1CmlGO
     g$rib-sym*$11532$1CmlGO
     (record-accessor g$8978$7875$1CmlGO '0))
   (g$rib-mark**$7881$1CmlGO
     g$rib-mark**$11533$1CmlGO
     (record-accessor g$8978$7875$1CmlGO '1))
   (g$rib-label*$7882$1CmlGO
     g$rib-label*$11534$1CmlGO
     (record-accessor g$8978$7875$1CmlGO '2))
   (g$rib-sealed/freq$7883$1CmlGO
     g$rib-sealed/freq$11535$1CmlGO
     (record-accessor g$8978$7875$1CmlGO '3))
   (g$set-rib-sym*!$7884$1CmlGO
     g$set-rib-sym*!$11536$1CmlGO
     (record-mutator g$8978$7875$1CmlGO '0))
   (g$set-rib-mark**!$7885$1CmlGO
     g$set-rib-mark**!$11537$1CmlGO
     (record-mutator g$8978$7875$1CmlGO '1))
   (g$set-rib-label*!$7886$1CmlGO
     g$set-rib-label*!$11538$1CmlGO
     (record-mutator g$8978$7875$1CmlGO '2))
   (g$set-rib-sealed/freq!$7887$1CmlGO
     g$set-rib-sealed/freq!$11539$1CmlGO
     (record-mutator g$8978$7875$1CmlGO '3))
   (g$make-empty-rib$7888$1CmlGO
     g$make-empty-rib$11540$1CmlGO
     (case-lambda (() (g$make-rib$7879$1CmlGO '() '() '() '#f))))
   (g$extend-rib!$7889$1CmlGO
     g$extend-rib!$11541$1CmlGO
     (case-lambda
       ((g$rib$8353$1CmlGO g$id$8354$1CmlGO g$label$8355$1CmlGO)
        (letrec* ((g$find$8356$1CmlGO
                    (case-lambda
                      ((g$sym$8362$1CmlGO
                         g$mark*$8363$1CmlGO
                         g$sym*$8364$1CmlGO
                         g$mark**$8365$1CmlGO
                         g$label*$8366$1CmlGO)
                       (if (pair? g$sym*$8364$1CmlGO)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8362$1CmlGO
                                        (car g$sym*$8364$1CmlGO))
                                 (begin
                                   '#f
                                   (g$same-marks?$7927$1CmlGO
                                     g$mark*$8363$1CmlGO
                                     (car g$mark**$8365$1CmlGO)))
                                 '#f)
                             g$label*$8366$1CmlGO
                             (g$find$8356$1CmlGO
                               g$sym$8362$1CmlGO
                               g$mark*$8363$1CmlGO
                               (cdr g$sym*$8364$1CmlGO)
                               (cdr g$mark**$8365$1CmlGO)
                               (cdr g$label*$8366$1CmlGO))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7883$1CmlGO g$rib$8353$1CmlGO)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$8353$1CmlGO)
              (void))
            ((case-lambda
               ((g$sym$8357$1CmlGO g$mark*$8358$1CmlGO)
                ((case-lambda
                   ((g$sym*$8359$1CmlGO)
                    ((case-lambda
                       ((g$t$8360$1CmlGO)
                        (if g$t$8360$1CmlGO
                          ((case-lambda
                             ((g$p$8361$1CmlGO)
                              (if (not (eq? g$label$8355$1CmlGO
                                            (car g$p$8361$1CmlGO)))
                                (if (g$top-level-context$8321$1CmlGO)
                                  (set-car! g$p$8361$1CmlGO g$label$8355$1CmlGO)
                                  (g$syntax-violation$8314$1CmlGO
                                    '#f
                                    '"cannot redefine"
                                    g$id$8354$1CmlGO))
                                (void))))
                           g$t$8360$1CmlGO)
                          (begin
                            (g$set-rib-sym*!$7884$1CmlGO
                              g$rib$8353$1CmlGO
                              (cons g$sym$8357$1CmlGO g$sym*$8359$1CmlGO))
                            (g$set-rib-mark**!$7885$1CmlGO
                              g$rib$8353$1CmlGO
                              (cons
                                g$mark*$8358$1CmlGO
                                (g$rib-mark**$7881$1CmlGO g$rib$8353$1CmlGO)))
                            (g$set-rib-label*!$7886$1CmlGO
                              g$rib$8353$1CmlGO
                              (cons
                                g$label$8355$1CmlGO
                                (g$rib-label*$7882$1CmlGO
                                  g$rib$8353$1CmlGO)))))))
                     (if (g$memq$5662$1CmlGO
                           g$sym$8357$1CmlGO
                           (g$rib-sym*$7880$1CmlGO g$rib$8353$1CmlGO))
                       (begin
                         '#f
                         (g$find$8356$1CmlGO
                           g$sym$8357$1CmlGO
                           g$mark*$8358$1CmlGO
                           g$sym*$8359$1CmlGO
                           (g$rib-mark**$7881$1CmlGO g$rib$8353$1CmlGO)
                           (g$rib-label*$7882$1CmlGO g$rib$8353$1CmlGO)))
                       '#f))))
                 (g$rib-sym*$7880$1CmlGO g$rib$8353$1CmlGO))))
             (g$id->sym$7926$1CmlGO g$id$8354$1CmlGO)
             (g$stx-mark*$7900$1CmlGO g$id$8354$1CmlGO)))))))
   (g$make-rib-map$7890$1CmlGO
     g$make-rib-map$11542$1CmlGO
     (case-lambda
       ((g$sym*$8367$1CmlGO)
        ((case-lambda
           ((g$ht$8368$1CmlGO)
            ((letrec ((g$f$8369$1CmlGO
                        (case-lambda
                          ((g$i$8370$1CmlGO g$sym*$8371$1CmlGO)
                           (if (null? g$sym*$8371$1CmlGO)
                             g$ht$8368$1CmlGO
                             (begin
                               (g$hashtable-update!$6113$1CmlGO
                                 g$ht$8368$1CmlGO
                                 (car g$sym*$8371$1CmlGO)
                                 (case-lambda
                                   ((g$x$8372$1CmlGO)
                                    (cons g$i$8370$1CmlGO g$x$8372$1CmlGO)))
                                 '())
                               (g$f$8369$1CmlGO
                                 (+ g$i$8370$1CmlGO '1)
                                 (cdr g$sym*$8371$1CmlGO))))))))
               g$f$8369$1CmlGO)
             '0
             g$sym*$8367$1CmlGO)))
         (g$make-eq-hashtable$6106$1CmlGO)))))
   (g$seal-rib!$7891$1CmlGO
     g$seal-rib!$11543$1CmlGO
     (case-lambda
       ((g$rib$8373$1CmlGO)
        ((case-lambda
           ((g$sym*$8374$1CmlGO)
            (if (not (null? g$sym*$8374$1CmlGO))
              (begin
                (g$set-rib-sym*!$7884$1CmlGO
                  g$rib$8373$1CmlGO
                  (list->vector g$sym*$8374$1CmlGO))
                (g$set-rib-mark**!$7885$1CmlGO
                  g$rib$8373$1CmlGO
                  (list->vector (g$rib-mark**$7881$1CmlGO g$rib$8373$1CmlGO)))
                (g$set-rib-label*!$7886$1CmlGO
                  g$rib$8373$1CmlGO
                  (list->vector (g$rib-label*$7882$1CmlGO g$rib$8373$1CmlGO)))
                (g$set-rib-sealed/freq!$7887$1CmlGO
                  g$rib$8373$1CmlGO
                  (g$make-rib-map$7890$1CmlGO g$sym*$8374$1CmlGO)))
              (void))))
         (g$rib-sym*$7880$1CmlGO g$rib$8373$1CmlGO)))))
   (g$unseal-rib!$7892$1CmlGO
     g$unseal-rib!$11544$1CmlGO
     (case-lambda
       ((g$rib$8375$1CmlGO)
        (if (g$rib-sealed/freq$7883$1CmlGO g$rib$8375$1CmlGO)
          (begin
            (g$set-rib-sealed/freq!$7887$1CmlGO g$rib$8375$1CmlGO '#f)
            (g$set-rib-sym*!$7884$1CmlGO
              g$rib$8375$1CmlGO
              (vector->list (g$rib-sym*$7880$1CmlGO g$rib$8375$1CmlGO)))
            (g$set-rib-mark**!$7885$1CmlGO
              g$rib$8375$1CmlGO
              (vector->list (g$rib-mark**$7881$1CmlGO g$rib$8375$1CmlGO)))
            (g$set-rib-label*!$7886$1CmlGO
              g$rib$8375$1CmlGO
              (vector->list (g$rib-label*$7882$1CmlGO g$rib$8375$1CmlGO))))
          (void)))))
   (g$make-full-rib$7893$1CmlGO
     g$make-full-rib$11545$1CmlGO
     (case-lambda
       ((g$id*$8376$1CmlGO g$label*$8377$1CmlGO)
        ((case-lambda
           ((g$r$8378$1CmlGO)
            (begin (g$seal-rib!$7891$1CmlGO g$r$8378$1CmlGO) g$r$8378$1CmlGO)))
         (g$make-rib$7879$1CmlGO
           (map g$id->sym$7926$1CmlGO g$id*$8376$1CmlGO)
           (map g$stx-mark*$7900$1CmlGO g$id*$8376$1CmlGO)
           g$label*$8377$1CmlGO
           '#f)))))
   (g$9004$7894$1CmlGO
     g$9004$11546$1CmlGO
     (make-record-type-descriptor
       'stx
       '#f
       'g$9007$1CmlGO
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$9006$7895$1CmlGO g$9006$11547$1CmlGO '#f)
   (g$9005$7896$1CmlGO
     g$9005$11548$1CmlGO
     (make-record-constructor-descriptor
       g$9004$7894$1CmlGO
       '#f
       g$9006$7895$1CmlGO))
   (g$stx?$7897$1CmlGO
     g$stx?$11549$1CmlGO
     (record-predicate g$9004$7894$1CmlGO))
   (g$make-stx$7898$1CmlGO
     g$make-stx$11550$1CmlGO
     (record-constructor g$9005$7896$1CmlGO))
   (g$stx-expr$7899$1CmlGO
     g$stx-expr$11551$1CmlGO
     (record-accessor g$9004$7894$1CmlGO '0))
   (g$stx-mark*$7900$1CmlGO
     g$stx-mark*$11552$1CmlGO
     (record-accessor g$9004$7894$1CmlGO '1))
   (g$stx-subst*$7901$1CmlGO
     g$stx-subst*$11553$1CmlGO
     (record-accessor g$9004$7894$1CmlGO '2))
   (g$stx-ae*$7902$1CmlGO
     g$stx-ae*$11554$1CmlGO
     (record-accessor g$9004$7894$1CmlGO '3))
   (g$set-stx-expr!$7903$1CmlGO
     g$set-stx-expr!$11555$1CmlGO
     (record-mutator g$9004$7894$1CmlGO '0))
   (g$set-stx-mark*!$7904$1CmlGO
     g$set-stx-mark*!$11556$1CmlGO
     (record-mutator g$9004$7894$1CmlGO '1))
   (g$set-stx-subst*!$7905$1CmlGO
     g$set-stx-subst*!$11557$1CmlGO
     (record-mutator g$9004$7894$1CmlGO '2))
   (g$set-stx-ae*!$7906$1CmlGO
     g$set-stx-ae*!$11558$1CmlGO
     (record-mutator g$9004$7894$1CmlGO '3))
   (g$rp$7907$1CmlGO
     g$rp$11559$1CmlGO
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$8379$1CmlGO g$p$8380$1CmlGO)
          (begin
            (display '"#<syntax " g$p$8380$1CmlGO)
            (write (g$stx->datum$7936$1CmlGO g$x$8379$1CmlGO) g$p$8380$1CmlGO)
            ((case-lambda
               ((g$expr$8381$1CmlGO)
                (if (annotation? g$expr$8381$1CmlGO)
                  ((case-lambda
                     ((g$src$8382$1CmlGO)
                      (if (pair? g$src$8382$1CmlGO)
                        (begin
                          (display '" [" g$p$8380$1CmlGO)
                          (display (cdr g$src$8382$1CmlGO) g$p$8380$1CmlGO)
                          (display '" of " g$p$8380$1CmlGO)
                          (display (car g$src$8382$1CmlGO) g$p$8380$1CmlGO)
                          (display '"]" g$p$8380$1CmlGO))
                        (void))))
                   (annotation-source g$expr$8381$1CmlGO))
                  (void))))
             (g$stx-expr$7899$1CmlGO g$x$8379$1CmlGO))
            (display '">" g$p$8380$1CmlGO))))))
   (g$datum->stx$7908$1CmlGO
     g$datum->stx$11560$1CmlGO
     (case-lambda
       ((g$id$8383$1CmlGO g$datum$8384$1CmlGO)
        (g$make-stx$7898$1CmlGO
          g$datum$8384$1CmlGO
          (g$stx-mark*$7900$1CmlGO g$id$8383$1CmlGO)
          (g$stx-subst*$7901$1CmlGO g$id$8383$1CmlGO)
          (g$stx-ae*$7902$1CmlGO g$id$8383$1CmlGO)))))
   (g$gen-mark$7909$1CmlGO
     g$gen-mark$11561$1CmlGO
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7910$1CmlGO g$anti-mark$11562$1CmlGO '#f)
   (g$anti-mark?$7911$1CmlGO g$anti-mark?$11563$1CmlGO not)
   (g$join-wraps$7912$1CmlGO
     g$join-wraps$11564$1CmlGO
     (case-lambda
       ((g$m1*$8385$1CmlGO
          g$s1*$8386$1CmlGO
          g$ae1*$8387$1CmlGO
          g$e$8388$1CmlGO)
        (letrec* ((g$cancel$8389$1CmlGO
                    (case-lambda
                      ((g$ls1$8393$1CmlGO g$ls2$8394$1CmlGO)
                       ((letrec ((g$f$8395$1CmlGO
                                   (case-lambda
                                     ((g$x$8396$1CmlGO g$ls1$8397$1CmlGO)
                                      (if (null? g$ls1$8397$1CmlGO)
                                        (cdr g$ls2$8394$1CmlGO)
                                        (cons
                                          g$x$8396$1CmlGO
                                          (g$f$8395$1CmlGO
                                            (car g$ls1$8397$1CmlGO)
                                            (cdr g$ls1$8397$1CmlGO))))))))
                          g$f$8395$1CmlGO)
                        (car g$ls1$8393$1CmlGO)
                        (cdr g$ls1$8393$1CmlGO))))))
          ((case-lambda
             ((g$m2*$8390$1CmlGO g$s2*$8391$1CmlGO g$ae2*$8392$1CmlGO)
              (if (if (not (null? g$m1*$8385$1CmlGO))
                    (if (not (null? g$m2*$8390$1CmlGO))
                      (begin
                        '#f
                        (g$anti-mark?$7911$1CmlGO (car g$m2*$8390$1CmlGO)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$8389$1CmlGO g$m1*$8385$1CmlGO g$m2*$8390$1CmlGO)
                  (g$cancel$8389$1CmlGO g$s1*$8386$1CmlGO g$s2*$8391$1CmlGO)
                  (g$cancel$8389$1CmlGO g$ae1*$8387$1CmlGO g$ae2*$8392$1CmlGO))
                (values
                  (append g$m1*$8385$1CmlGO g$m2*$8390$1CmlGO)
                  (append g$s1*$8386$1CmlGO g$s2*$8391$1CmlGO)
                  (append g$ae1*$8387$1CmlGO g$ae2*$8392$1CmlGO)))))
           (g$stx-mark*$7900$1CmlGO g$e$8388$1CmlGO)
           (g$stx-subst*$7901$1CmlGO g$e$8388$1CmlGO)
           (g$stx-ae*$7902$1CmlGO g$e$8388$1CmlGO))))))
   (g$mkstx$7913$1CmlGO
     g$mkstx$11565$1CmlGO
     (case-lambda
       ((g$e$8398$1CmlGO g$m*$8399$1CmlGO g$s*$8400$1CmlGO g$ae*$8401$1CmlGO)
        (if (if (g$stx?$7897$1CmlGO g$e$8398$1CmlGO)
              (begin '#f (not (g$top-marked?$7868$1CmlGO g$m*$8399$1CmlGO)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7912$1CmlGO
                 g$m*$8399$1CmlGO
                 g$s*$8400$1CmlGO
                 g$ae*$8401$1CmlGO
                 g$e$8398$1CmlGO)))
            (case-lambda
              ((g$m*$8405$1CmlGO g$s*$8406$1CmlGO g$ae*$8407$1CmlGO)
               ((case-lambda
                  ((g$ae*$8408$1CmlGO g$s*$8409$1CmlGO g$m*$8410$1CmlGO)
                   (g$make-stx$7898$1CmlGO
                     (g$stx-expr$7899$1CmlGO g$e$8398$1CmlGO)
                     g$m*$8410$1CmlGO
                     g$s*$8409$1CmlGO
                     g$ae*$8408$1CmlGO)))
                g$ae*$8407$1CmlGO
                g$s*$8406$1CmlGO
                g$m*$8405$1CmlGO))))
          (g$make-stx$7898$1CmlGO
            g$e$8398$1CmlGO
            g$m*$8399$1CmlGO
            g$s*$8400$1CmlGO
            g$ae*$8401$1CmlGO)))))
   (g$add-mark$7914$1CmlGO
     g$add-mark$11566$1CmlGO
     (case-lambda
       ((g$m$8411$1CmlGO g$e$8412$1CmlGO g$ae$8413$1CmlGO)
        (g$mkstx$7913$1CmlGO
          g$e$8412$1CmlGO
          (list g$m$8411$1CmlGO)
          '(shift)
          (list g$ae$8413$1CmlGO)))))
   (g$add-subst$7915$1CmlGO
     g$add-subst$11567$1CmlGO
     (case-lambda
       ((g$subst$8414$1CmlGO g$e$8415$1CmlGO)
        (g$mkstx$7913$1CmlGO
          g$e$8415$1CmlGO
          '()
          (list g$subst$8414$1CmlGO)
          '()))))
   (g$syntax-kind?$7916$1CmlGO
     g$syntax-kind?$11568$1CmlGO
     (case-lambda
       ((g$x$8416$1CmlGO g$p?$8417$1CmlGO)
        (if (g$stx?$7897$1CmlGO g$x$8416$1CmlGO)
          (g$syntax-kind?$7916$1CmlGO
            (g$stx-expr$7899$1CmlGO g$x$8416$1CmlGO)
            g$p?$8417$1CmlGO)
          (if (annotation? g$x$8416$1CmlGO)
            (g$syntax-kind?$7916$1CmlGO
              (annotation-expression g$x$8416$1CmlGO)
              g$p?$8417$1CmlGO)
            (g$p?$8417$1CmlGO g$x$8416$1CmlGO))))))
   (g$syntax-vector->list$7917$1CmlGO
     g$syntax-vector->list$11569$1CmlGO
     (case-lambda
       ((g$x$8418$1CmlGO)
        (if (g$stx?$7897$1CmlGO g$x$8418$1CmlGO)
          ((case-lambda
             ((g$ls$8419$1CmlGO
                g$m*$8420$1CmlGO
                g$s*$8421$1CmlGO
                g$ae*$8422$1CmlGO)
              (map (case-lambda
                     ((g$x$8423$1CmlGO)
                      (g$mkstx$7913$1CmlGO
                        g$x$8423$1CmlGO
                        g$m*$8420$1CmlGO
                        g$s*$8421$1CmlGO
                        g$ae*$8422$1CmlGO)))
                   g$ls$8419$1CmlGO)))
           (g$syntax-vector->list$7917$1CmlGO
             (g$stx-expr$7899$1CmlGO g$x$8418$1CmlGO))
           (g$stx-mark*$7900$1CmlGO g$x$8418$1CmlGO)
           (g$stx-subst*$7901$1CmlGO g$x$8418$1CmlGO)
           (g$stx-ae*$7902$1CmlGO g$x$8418$1CmlGO))
          (if (annotation? g$x$8418$1CmlGO)
            (g$syntax-vector->list$7917$1CmlGO
              (annotation-expression g$x$8418$1CmlGO))
            (if (vector? g$x$8418$1CmlGO)
              (vector->list g$x$8418$1CmlGO)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$8418$1CmlGO)))))))
   (g$syntax-pair?$7918$1CmlGO
     g$syntax-pair?$11570$1CmlGO
     (case-lambda
       ((g$x$8424$1CmlGO) (g$syntax-kind?$7916$1CmlGO g$x$8424$1CmlGO pair?))))
   (g$syntax-vector?$7919$1CmlGO
     g$syntax-vector?$11571$1CmlGO
     (case-lambda
       ((g$x$8425$1CmlGO)
        (g$syntax-kind?$7916$1CmlGO g$x$8425$1CmlGO vector?))))
   (g$syntax-null?$7920$1CmlGO
     g$syntax-null?$11572$1CmlGO
     (case-lambda
       ((g$x$8426$1CmlGO) (g$syntax-kind?$7916$1CmlGO g$x$8426$1CmlGO null?))))
   (g$syntax-list?$7921$1CmlGO
     g$syntax-list?$11573$1CmlGO
     (case-lambda
       ((g$x$8427$1CmlGO)
        ((case-lambda
           ((g$t$8428$1CmlGO)
            (if g$t$8428$1CmlGO
              g$t$8428$1CmlGO
              (begin
                '#f
                (if (g$syntax-pair?$7918$1CmlGO g$x$8427$1CmlGO)
                  (begin
                    '#f
                    (g$syntax-list?$7921$1CmlGO
                      (g$syntax-cdr$7923$1CmlGO g$x$8427$1CmlGO)))
                  '#f)))))
         (g$syntax-null?$7920$1CmlGO g$x$8427$1CmlGO)))))
   (g$syntax-car$7922$1CmlGO
     g$syntax-car$11574$1CmlGO
     (case-lambda
       ((g$x$8429$1CmlGO)
        (if (g$stx?$7897$1CmlGO g$x$8429$1CmlGO)
          (g$mkstx$7913$1CmlGO
            (g$syntax-car$7922$1CmlGO (g$stx-expr$7899$1CmlGO g$x$8429$1CmlGO))
            (g$stx-mark*$7900$1CmlGO g$x$8429$1CmlGO)
            (g$stx-subst*$7901$1CmlGO g$x$8429$1CmlGO)
            (g$stx-ae*$7902$1CmlGO g$x$8429$1CmlGO))
          (if (annotation? g$x$8429$1CmlGO)
            (g$syntax-car$7922$1CmlGO (annotation-expression g$x$8429$1CmlGO))
            (if (pair? g$x$8429$1CmlGO)
              (car g$x$8429$1CmlGO)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$8429$1CmlGO)))))))
   (g$syntax-cdr$7923$1CmlGO
     g$syntax-cdr$11575$1CmlGO
     (case-lambda
       ((g$x$8430$1CmlGO)
        (if (g$stx?$7897$1CmlGO g$x$8430$1CmlGO)
          (g$mkstx$7913$1CmlGO
            (g$syntax-cdr$7923$1CmlGO (g$stx-expr$7899$1CmlGO g$x$8430$1CmlGO))
            (g$stx-mark*$7900$1CmlGO g$x$8430$1CmlGO)
            (g$stx-subst*$7901$1CmlGO g$x$8430$1CmlGO)
            (g$stx-ae*$7902$1CmlGO g$x$8430$1CmlGO))
          (if (annotation? g$x$8430$1CmlGO)
            (g$syntax-cdr$7923$1CmlGO (annotation-expression g$x$8430$1CmlGO))
            (if (pair? g$x$8430$1CmlGO)
              (cdr g$x$8430$1CmlGO)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$8430$1CmlGO)))))))
   (g$syntax->list$7924$1CmlGO
     g$syntax->list$11576$1CmlGO
     (case-lambda
       ((g$x$8431$1CmlGO)
        (if (g$syntax-pair?$7918$1CmlGO g$x$8431$1CmlGO)
          (cons
            (g$syntax-car$7922$1CmlGO g$x$8431$1CmlGO)
            (g$syntax->list$7924$1CmlGO
              (g$syntax-cdr$7923$1CmlGO g$x$8431$1CmlGO)))
          (if (g$syntax-null?$7920$1CmlGO g$x$8431$1CmlGO)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$8431$1CmlGO))))))
   (g$id?$7925$1CmlGO
     g$id?$11577$1CmlGO
     (case-lambda
       ((g$x$8432$1CmlGO)
        (if (g$stx?$7897$1CmlGO g$x$8432$1CmlGO)
          (begin
            '#f
            ((case-lambda
               ((g$expr$8433$1CmlGO)
                (symbol?
                  (if (annotation? g$expr$8433$1CmlGO)
                    (annotation-stripped g$expr$8433$1CmlGO)
                    g$expr$8433$1CmlGO))))
             (g$stx-expr$7899$1CmlGO g$x$8432$1CmlGO)))
          '#f))))
   (g$id->sym$7926$1CmlGO
     g$id->sym$11578$1CmlGO
     (case-lambda
       ((g$x$8434$1CmlGO)
        (begin
          (if (not (g$stx?$7897$1CmlGO g$x$8434$1CmlGO))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$8434$1CmlGO)
            (void))
          ((case-lambda
             ((g$expr$8435$1CmlGO)
              ((case-lambda
                 ((g$sym$8436$1CmlGO)
                  (if (symbol? g$sym$8436$1CmlGO)
                    g$sym$8436$1CmlGO
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$8434$1CmlGO))))
               (if (annotation? g$expr$8435$1CmlGO)
                 (annotation-stripped g$expr$8435$1CmlGO)
                 g$expr$8435$1CmlGO))))
           (g$stx-expr$7899$1CmlGO g$x$8434$1CmlGO))))))
   (g$same-marks?$7927$1CmlGO
     g$same-marks?$11579$1CmlGO
     (case-lambda
       ((g$x$8437$1CmlGO g$y$8438$1CmlGO)
        ((case-lambda
           ((g$t$8439$1CmlGO)
            (if g$t$8439$1CmlGO
              g$t$8439$1CmlGO
              (begin
                '#f
                (if (pair? g$x$8437$1CmlGO)
                  (if (pair? g$y$8438$1CmlGO)
                    (if (eq? (car g$x$8437$1CmlGO) (car g$y$8438$1CmlGO))
                      (begin
                        '#f
                        (g$same-marks?$7927$1CmlGO
                          (cdr g$x$8437$1CmlGO)
                          (cdr g$y$8438$1CmlGO)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$8437$1CmlGO)
           (begin '#f (null? g$y$8438$1CmlGO))
           '#f)))))
   (g$bound-id=?$7928$1CmlGO
     g$bound-id=?$11580$1CmlGO
     (case-lambda
       ((g$x$8440$1CmlGO g$y$8441$1CmlGO)
        (if (eq? (g$id->sym$7926$1CmlGO g$x$8440$1CmlGO)
                 (g$id->sym$7926$1CmlGO g$y$8441$1CmlGO))
          (begin
            '#f
            (g$same-marks?$7927$1CmlGO
              (g$stx-mark*$7900$1CmlGO g$x$8440$1CmlGO)
              (g$stx-mark*$7900$1CmlGO g$y$8441$1CmlGO)))
          '#f))))
   (g$free-id=?$7929$1CmlGO
     g$free-id=?$11581$1CmlGO
     (case-lambda
       ((g$i$8442$1CmlGO g$j$8443$1CmlGO)
        ((case-lambda
           ((g$t0$8444$1CmlGO g$t1$8445$1CmlGO)
            (if ((case-lambda
                   ((g$t$8446$1CmlGO)
                    (if g$t$8446$1CmlGO
                      g$t$8446$1CmlGO
                      (begin '#f g$t1$8445$1CmlGO))))
                 g$t0$8444$1CmlGO)
              (eq? g$t0$8444$1CmlGO g$t1$8445$1CmlGO)
              (eq? (g$id->sym$7926$1CmlGO g$i$8442$1CmlGO)
                   (g$id->sym$7926$1CmlGO g$j$8443$1CmlGO)))))
         (g$id->real-label$7939$1CmlGO g$i$8442$1CmlGO)
         (g$id->real-label$7939$1CmlGO g$j$8443$1CmlGO)))))
   (g$valid-bound-ids?$7930$1CmlGO
     g$valid-bound-ids?$11582$1CmlGO
     (case-lambda
       ((g$id*$8447$1CmlGO)
        (if (g$for-all$5668$1CmlGO g$id?$7925$1CmlGO g$id*$8447$1CmlGO)
          (begin '#f (g$distinct-bound-ids?$7931$1CmlGO g$id*$8447$1CmlGO))
          '#f))))
   (g$distinct-bound-ids?$7931$1CmlGO
     g$distinct-bound-ids?$11583$1CmlGO
     (case-lambda
       ((g$id*$8448$1CmlGO)
        ((case-lambda
           ((g$t$8449$1CmlGO)
            (if g$t$8449$1CmlGO
              g$t$8449$1CmlGO
              (begin
                '#f
                (if (not (g$bound-id-member?$7932$1CmlGO
                           (car g$id*$8448$1CmlGO)
                           (cdr g$id*$8448$1CmlGO)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7931$1CmlGO (cdr g$id*$8448$1CmlGO)))
                  '#f)))))
         (null? g$id*$8448$1CmlGO)))))
   (g$bound-id-member?$7932$1CmlGO
     g$bound-id-member?$11584$1CmlGO
     (case-lambda
       ((g$id$8450$1CmlGO g$id*$8451$1CmlGO)
        (if (pair? g$id*$8451$1CmlGO)
          (begin
            '#f
            ((case-lambda
               ((g$t$8452$1CmlGO)
                (if g$t$8452$1CmlGO
                  g$t$8452$1CmlGO
                  (begin
                    '#f
                    (g$bound-id-member?$7932$1CmlGO
                      g$id$8450$1CmlGO
                      (cdr g$id*$8451$1CmlGO))))))
             (g$bound-id=?$7928$1CmlGO
               g$id$8450$1CmlGO
               (car g$id*$8451$1CmlGO))))
          '#f))))
   (g$self-evaluating?$7933$1CmlGO
     g$self-evaluating?$11585$1CmlGO
     (case-lambda
       ((g$x$8453$1CmlGO)
        ((case-lambda
           ((g$t$8454$1CmlGO)
            (if g$t$8454$1CmlGO
              g$t$8454$1CmlGO
              ((case-lambda
                 ((g$t$8455$1CmlGO)
                  (if g$t$8455$1CmlGO
                    g$t$8455$1CmlGO
                    ((case-lambda
                       ((g$t$8456$1CmlGO)
                        (if g$t$8456$1CmlGO
                          g$t$8456$1CmlGO
                          ((case-lambda
                             ((g$t$8457$1CmlGO)
                              (if g$t$8457$1CmlGO
                                g$t$8457$1CmlGO
                                (begin '#f (bytevector? g$x$8453$1CmlGO)))))
                           (boolean? g$x$8453$1CmlGO)))))
                     (char? g$x$8453$1CmlGO)))))
               (string? g$x$8453$1CmlGO)))))
         (number? g$x$8453$1CmlGO)))))
   (g$strip-annotations$7934$1CmlGO
     g$strip-annotations$11586$1CmlGO
     (case-lambda
       ((g$x$8458$1CmlGO)
        (if (pair? g$x$8458$1CmlGO)
          (cons
            (g$strip-annotations$7934$1CmlGO (car g$x$8458$1CmlGO))
            (g$strip-annotations$7934$1CmlGO (cdr g$x$8458$1CmlGO)))
          (if (vector? g$x$8458$1CmlGO)
            (vector-map g$strip-annotations$7934$1CmlGO g$x$8458$1CmlGO)
            (if (annotation? g$x$8458$1CmlGO)
              (annotation-stripped g$x$8458$1CmlGO)
              g$x$8458$1CmlGO))))))
   (g$strip$7935$1CmlGO
     g$strip$11587$1CmlGO
     (case-lambda
       ((g$x$8459$1CmlGO g$m*$8460$1CmlGO)
        (if (g$top-marked?$7868$1CmlGO g$m*$8460$1CmlGO)
          (if ((case-lambda
                 ((g$t$8461$1CmlGO)
                  (if g$t$8461$1CmlGO
                    g$t$8461$1CmlGO
                    ((case-lambda
                       ((g$t$8462$1CmlGO)
                        (if g$t$8462$1CmlGO
                          g$t$8462$1CmlGO
                          (begin
                            '#f
                            (if (vector? g$x$8459$1CmlGO)
                              (if (> (vector-length g$x$8459$1CmlGO) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$8459$1CmlGO '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$8459$1CmlGO)
                       (begin '#f (annotation? (car g$x$8459$1CmlGO)))
                       '#f)))))
               (annotation? g$x$8459$1CmlGO))
            (g$strip-annotations$7934$1CmlGO g$x$8459$1CmlGO)
            g$x$8459$1CmlGO)
          ((letrec ((g$f$8463$1CmlGO
                      (case-lambda
                        ((g$x$8464$1CmlGO)
                         (if (g$stx?$7897$1CmlGO g$x$8464$1CmlGO)
                           (g$strip$7935$1CmlGO
                             (g$stx-expr$7899$1CmlGO g$x$8464$1CmlGO)
                             (g$stx-mark*$7900$1CmlGO g$x$8464$1CmlGO))
                           (if (annotation? g$x$8464$1CmlGO)
                             (annotation-stripped g$x$8464$1CmlGO)
                             (if (pair? g$x$8464$1CmlGO)
                               ((case-lambda
                                  ((g$a$8465$1CmlGO g$d$8466$1CmlGO)
                                   (if (if (eq? g$a$8465$1CmlGO
                                                (car g$x$8464$1CmlGO))
                                         (begin
                                           '#f
                                           (eq? g$d$8466$1CmlGO
                                                (cdr g$x$8464$1CmlGO)))
                                         '#f)
                                     g$x$8464$1CmlGO
                                     (cons g$a$8465$1CmlGO g$d$8466$1CmlGO))))
                                (g$f$8463$1CmlGO (car g$x$8464$1CmlGO))
                                (g$f$8463$1CmlGO (cdr g$x$8464$1CmlGO)))
                               (if (vector? g$x$8464$1CmlGO)
                                 ((case-lambda
                                    ((g$old$8467$1CmlGO)
                                     ((case-lambda
                                        ((g$new$8468$1CmlGO)
                                         (if (g$for-all$5668$1CmlGO
                                               eq?
                                               g$old$8467$1CmlGO
                                               g$new$8468$1CmlGO)
                                           g$x$8464$1CmlGO
                                           (list->vector g$new$8468$1CmlGO))))
                                      (map g$f$8463$1CmlGO g$old$8467$1CmlGO))))
                                  (vector->list g$x$8464$1CmlGO))
                                 g$x$8464$1CmlGO))))))))
             g$f$8463$1CmlGO)
           g$x$8459$1CmlGO)))))
   (g$stx->datum$7936$1CmlGO
     g$stx->datum$11588$1CmlGO
     (case-lambda
       ((g$x$8469$1CmlGO) (g$strip$7935$1CmlGO g$x$8469$1CmlGO '()))))
   (g$same-marks*?$7937$1CmlGO
     g$same-marks*?$11589$1CmlGO
     (case-lambda
       ((g$mark*$8470$1CmlGO g$mark**$8471$1CmlGO g$si$8472$1CmlGO)
        (if (null? g$si$8472$1CmlGO)
          '#f
          (if (g$same-marks?$7927$1CmlGO
                g$mark*$8470$1CmlGO
                (vector-ref g$mark**$8471$1CmlGO (car g$si$8472$1CmlGO)))
            (car g$si$8472$1CmlGO)
            (g$same-marks*?$7937$1CmlGO
              g$mark*$8470$1CmlGO
              g$mark**$8471$1CmlGO
              (cdr g$si$8472$1CmlGO)))))))
   (g$id->label$7938$1CmlGO
     g$id->label$11590$1CmlGO
     (case-lambda
       ((g$id$8473$1CmlGO)
        ((case-lambda
           ((g$t$8474$1CmlGO)
            (if g$t$8474$1CmlGO
              g$t$8474$1CmlGO
              (begin
                '#f
                ((case-lambda
                   ((g$t$8475$1CmlGO)
                    (if g$t$8475$1CmlGO
                      ((case-lambda
                         ((g$env$8476$1CmlGO)
                          ((case-lambda
                             ((g$rib$8477$1CmlGO)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7873$1CmlGO
                                     g$id$8473$1CmlGO
                                     g$rib$8477$1CmlGO)))
                                (case-lambda
                                  ((g$lab$8480$1CmlGO g$loc_$8481$1CmlGO)
                                   ((case-lambda
                                      ((g$loc_$8482$1CmlGO g$lab$8483$1CmlGO)
                                       (begin
                                         (g$extend-rib!$7889$1CmlGO
                                           g$rib$8477$1CmlGO
                                           g$id$8473$1CmlGO
                                           g$lab$8483$1CmlGO)
                                         g$lab$8483$1CmlGO)))
                                    g$loc_$8481$1CmlGO
                                    g$lab$8480$1CmlGO))))))
                           (g$interaction-env-rib$8281$1CmlGO
                             g$env$8476$1CmlGO))))
                       g$t$8475$1CmlGO)
                      '#f)))
                 (g$top-level-context$8321$1CmlGO))))))
         (g$id->real-label$7939$1CmlGO g$id$8473$1CmlGO)))))
   (g$id->real-label$7939$1CmlGO
     g$id->real-label$11591$1CmlGO
     (case-lambda
       ((g$id$8484$1CmlGO)
        ((case-lambda
           ((g$sym$8485$1CmlGO)
            ((letrec ((g$search$8486$1CmlGO
                        (case-lambda
                          ((g$subst*$8487$1CmlGO g$mark*$8488$1CmlGO)
                           (if (null? g$subst*$8487$1CmlGO)
                             '#f
                             (if (eq? (car g$subst*$8487$1CmlGO) 'shift)
                               (g$search$8486$1CmlGO
                                 (cdr g$subst*$8487$1CmlGO)
                                 (cdr g$mark*$8488$1CmlGO))
                               ((case-lambda
                                  ((g$rib$8489$1CmlGO)
                                   ((case-lambda
                                      ((g$t$8490$1CmlGO)
                                       (if g$t$8490$1CmlGO
                                         ((case-lambda
                                            ((g$ht$8491$1CmlGO)
                                             ((case-lambda
                                                ((g$si$8492$1CmlGO)
                                                 ((case-lambda
                                                    ((g$i$8493$1CmlGO)
                                                     (if g$i$8493$1CmlGO
                                                       (vector-ref
                                                         (g$rib-label*$7882$1CmlGO
                                                           g$rib$8489$1CmlGO)
                                                         g$i$8493$1CmlGO)
                                                       (g$search$8486$1CmlGO
                                                         (cdr g$subst*$8487$1CmlGO)
                                                         g$mark*$8488$1CmlGO))))
                                                  (if g$si$8492$1CmlGO
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7937$1CmlGO
                                                        g$mark*$8488$1CmlGO
                                                        (g$rib-mark**$7881$1CmlGO
                                                          g$rib$8489$1CmlGO)
                                                        (reverse
                                                          g$si$8492$1CmlGO)))
                                                    '#f))))
                                              (g$hashtable-ref$6109$1CmlGO
                                                g$ht$8491$1CmlGO
                                                g$sym$8485$1CmlGO
                                                '#f))))
                                          g$t$8490$1CmlGO)
                                         ((letrec ((g$f$8494$1CmlGO
                                                     (case-lambda
                                                       ((g$sym*$8495$1CmlGO
                                                          g$mark**$8496$1CmlGO
                                                          g$label*$8497$1CmlGO)
                                                        (if (null?
                                                              g$sym*$8495$1CmlGO)
                                                          (g$search$8486$1CmlGO
                                                            (cdr g$subst*$8487$1CmlGO)
                                                            g$mark*$8488$1CmlGO)
                                                          (if (if (eq? (car g$sym*$8495$1CmlGO)
                                                                       g$sym$8485$1CmlGO)
                                                                (begin
                                                                  '#f
                                                                  (g$same-marks?$7927$1CmlGO
                                                                    (car g$mark**$8496$1CmlGO)
                                                                    g$mark*$8488$1CmlGO))
                                                                '#f)
                                                            (car g$label*$8497$1CmlGO)
                                                            (g$f$8494$1CmlGO
                                                              (cdr g$sym*$8495$1CmlGO)
                                                              (cdr g$mark**$8496$1CmlGO)
                                                              (cdr g$label*$8497$1CmlGO))))))))
                                            g$f$8494$1CmlGO)
                                          (g$rib-sym*$7880$1CmlGO
                                            g$rib$8489$1CmlGO)
                                          (g$rib-mark**$7881$1CmlGO
                                            g$rib$8489$1CmlGO)
                                          (g$rib-label*$7882$1CmlGO
                                            g$rib$8489$1CmlGO)))))
                                    (g$rib-sealed/freq$7883$1CmlGO
                                      g$rib$8489$1CmlGO))))
                                (car g$subst*$8487$1CmlGO))))))))
               g$search$8486$1CmlGO)
             (g$stx-subst*$7901$1CmlGO g$id$8484$1CmlGO)
             (g$stx-mark*$7900$1CmlGO g$id$8484$1CmlGO))))
         (g$id->sym$7926$1CmlGO g$id$8484$1CmlGO)))))
   (g$label->binding$7940$1CmlGO
     g$label->binding$11592$1CmlGO
     (case-lambda
       ((g$x$8498$1CmlGO g$r$8499$1CmlGO)
        ((case-lambda
           ((g$t$8500$1CmlGO)
            (if g$t$8500$1CmlGO
              ((case-lambda
                 ((g$b$8501$1CmlGO)
                  (if (if (pair? g$b$8501$1CmlGO)
                        (begin '#f (eq? (car g$b$8501$1CmlGO) '$core-rtd))
                        '#f)
                    (cons '$rtd (map g$bless$8166$1CmlGO (cdr g$b$8501$1CmlGO)))
                    (if (if (pair? g$b$8501$1CmlGO)
                          (begin '#f (eq? (car g$b$8501$1CmlGO) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$8502$1CmlGO g$loc$8503$1CmlGO)
                          (cons '$rtd (symbol-value g$loc$8503$1CmlGO))))
                       (g$cadr$5832$1CmlGO g$b$8501$1CmlGO)
                       (g$cddr$5834$1CmlGO g$b$8501$1CmlGO))
                      g$b$8501$1CmlGO))))
               g$t$8500$1CmlGO)
              ((case-lambda
                 ((g$t$8504$1CmlGO)
                  (if g$t$8504$1CmlGO
                    (cdr g$t$8504$1CmlGO)
                    ((case-lambda
                       ((g$t$8505$1CmlGO)
                        (if g$t$8505$1CmlGO
                          ((case-lambda
                             ((g$env$8506$1CmlGO)
                              ((case-lambda
                                 ((g$t$8507$1CmlGO)
                                  (if g$t$8507$1CmlGO
                                    ((case-lambda
                                       ((g$p$8508$1CmlGO)
                                        (g$cons*$5670$1CmlGO
                                          'lexical
                                          (cdr g$p$8508$1CmlGO)
                                          '#f)))
                                     g$t$8507$1CmlGO)
                                    '(displaced-lexical . #f))))
                               (g$assq$5658$1CmlGO
                                 g$x$8498$1CmlGO
                                 (g$interaction-env-locs$8283$1CmlGO
                                   g$env$8506$1CmlGO)))))
                           g$t$8505$1CmlGO)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$8321$1CmlGO)))))
               (g$assq$5658$1CmlGO g$x$8498$1CmlGO g$r$8499$1CmlGO)))))
         (g$imported-label->binding$7739$1CmlGO g$x$8498$1CmlGO)))))
   (g$make-binding$7941$1CmlGO g$make-binding$11593$1CmlGO cons)
   (g$binding-type$7942$1CmlGO g$binding-type$11594$1CmlGO car)
   (g$binding-value$7943$1CmlGO g$binding-value$11595$1CmlGO cdr)
   (g$raise-unbound-error$7944$1CmlGO
     g$raise-unbound-error$11596$1CmlGO
     (case-lambda
       ((g$id$8509$1CmlGO)
        (g$syntax-violation*$8313$1CmlGO
          '#f
          '"unbound identifier"
          g$id$8509$1CmlGO
          (g$make-undefined-violation$6456$1CmlGO)))))
   (g$syntax-type$7945$1CmlGO
     g$syntax-type$11597$1CmlGO
     (case-lambda
       ((g$e$8510$1CmlGO g$r$8511$1CmlGO)
        (if (g$id?$7925$1CmlGO g$e$8510$1CmlGO)
          ((case-lambda
             ((g$id$8512$1CmlGO)
              ((case-lambda
                 ((g$label$8513$1CmlGO)
                  ((case-lambda
                     ((g$b$8514$1CmlGO)
                      ((case-lambda
                         ((g$type$8515$1CmlGO)
                          ((case-lambda
                             (()
                              (begin
                                (if (not g$label$8513$1CmlGO)
                                  (g$raise-unbound-error$7944$1CmlGO
                                    g$id$8512$1CmlGO)
                                  (void))
                                ((case-lambda
                                   ((g$t$8516$1CmlGO)
                                    (if (g$memv$5663$1CmlGO
                                          g$t$8516$1CmlGO
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             export
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$8515$1CmlGO
                                        (g$binding-value$7943$1CmlGO
                                          g$b$8514$1CmlGO)
                                        g$id$8512$1CmlGO)
                                      (values 'other '#f '#f))))
                                 g$type$8515$1CmlGO)))))))
                       (g$binding-type$7942$1CmlGO g$b$8514$1CmlGO))))
                   (g$label->binding$7940$1CmlGO
                     g$label$8513$1CmlGO
                     g$r$8511$1CmlGO))))
               (g$id->label$7938$1CmlGO g$id$8512$1CmlGO))))
           g$e$8510$1CmlGO)
          (if (g$syntax-pair?$7918$1CmlGO g$e$8510$1CmlGO)
            ((case-lambda
               ((g$id$8517$1CmlGO)
                (if (g$id?$7925$1CmlGO g$id$8517$1CmlGO)
                  ((case-lambda
                     ((g$label$8518$1CmlGO)
                      ((case-lambda
                         ((g$b$8519$1CmlGO)
                          ((case-lambda
                             ((g$type$8520$1CmlGO)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if (not g$label$8518$1CmlGO)
                                      (g$raise-unbound-error$7944$1CmlGO
                                        g$id$8517$1CmlGO)
                                      (void))
                                    ((case-lambda
                                       ((g$t$8521$1CmlGO)
                                        (if (g$memv$5663$1CmlGO
                                              g$t$8521$1CmlGO
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 export
                                                 $core-rtd))
                                          (values
                                            g$type$8520$1CmlGO
                                            (g$binding-value$7943$1CmlGO
                                              g$b$8519$1CmlGO)
                                            g$id$8517$1CmlGO)
                                          (values 'call '#f '#f))))
                                     g$type$8520$1CmlGO)))))))
                           (g$binding-type$7942$1CmlGO g$b$8519$1CmlGO))))
                       (g$label->binding$7940$1CmlGO
                         g$label$8518$1CmlGO
                         g$r$8511$1CmlGO))))
                   (g$id->label$7938$1CmlGO g$id$8517$1CmlGO))
                  (values 'call '#f '#f))))
             (g$syntax-car$7922$1CmlGO g$e$8510$1CmlGO))
            ((case-lambda
               ((g$d$8522$1CmlGO)
                (if (g$self-evaluating?$7933$1CmlGO g$d$8522$1CmlGO)
                  (values 'constant g$d$8522$1CmlGO '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7936$1CmlGO g$e$8510$1CmlGO)))))))
   (g$sanitize-binding$7953$1CmlGO
     g$sanitize-binding$11598$1CmlGO
     (case-lambda
       ((g$x$8523$1CmlGO g$src$8524$1CmlGO)
        (if (procedure? g$x$8523$1CmlGO)
          (g$cons*$5670$1CmlGO 'local-macro g$x$8523$1CmlGO g$src$8524$1CmlGO)
          (if (if (pair? g$x$8523$1CmlGO)
                (if (eq? (car g$x$8523$1CmlGO) 'macro!)
                  (begin '#f (procedure? (cdr g$x$8523$1CmlGO)))
                  '#f)
                '#f)
            (g$cons*$5670$1CmlGO
              'local-macro!
              (cdr g$x$8523$1CmlGO)
              g$src$8524$1CmlGO)
            (if (if (pair? g$x$8523$1CmlGO)
                  (begin '#f (eq? (car g$x$8523$1CmlGO) '$rtd))
                  '#f)
              g$x$8523$1CmlGO
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$8523$1CmlGO)))))))
   (g$make-variable-transformer$7954$1CmlGO
     g$make-variable-transformer$11599$1CmlGO
     (case-lambda
       ((g$x$8525$1CmlGO)
        (if (procedure? g$x$8525$1CmlGO)
          (cons 'macro! g$x$8525$1CmlGO)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$8525$1CmlGO)))))
   (g$variable-transformer?$7955$1CmlGO
     g$variable-transformer?$11600$1CmlGO
     (case-lambda
       ((g$x$8526$1CmlGO)
        (if (pair? g$x$8526$1CmlGO)
          (if (eq? (car g$x$8526$1CmlGO) 'macro!)
            (begin '#f (procedure? (cdr g$x$8526$1CmlGO)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7956$1CmlGO
     g$variable-transformer-procedure$11601$1CmlGO
     (case-lambda
       ((g$x$8527$1CmlGO)
        (if (g$variable-transformer?$7955$1CmlGO g$x$8527$1CmlGO)
          (cdr g$x$8527$1CmlGO)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$8527$1CmlGO)))))
   (g$make-eval-transformer$7957$1CmlGO
     g$make-eval-transformer$11602$1CmlGO
     (case-lambda
       ((g$x$8528$1CmlGO)
        (g$sanitize-binding$7953$1CmlGO
          (eval-core (g$expanded->core$7439$1CmlGO g$x$8528$1CmlGO))
          g$x$8528$1CmlGO))))
   (g$parse-define$8143$1CmlGO
     g$parse-define$11603$1CmlGO
     (case-lambda
       ((g$x$8529$1CmlGO)
        ((case-lambda
           ((g$t$8530$1CmlGO)
            ((case-lambda
               ((g$ls/false$8531$1CmlGO)
                (if (if g$ls/false$8531$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8532$1CmlGO
                               g$fmls$8533$1CmlGO
                               g$b$8534$1CmlGO
                               g$b*$8535$1CmlGO)
                             (g$id?$7925$1CmlGO g$id$8532$1CmlGO)))
                          g$ls/false$8531$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8536$1CmlGO
                         g$fmls$8537$1CmlGO
                         g$b$8538$1CmlGO
                         g$b*$8539$1CmlGO)
                       (begin
                         (g$verify-formals$8223$1CmlGO
                           g$fmls$8537$1CmlGO
                           g$x$8529$1CmlGO)
                         (values
                           g$id$8536$1CmlGO
                           (cons
                             'defun
                             (cons
                               g$fmls$8537$1CmlGO
                               (cons g$b$8538$1CmlGO g$b*$8539$1CmlGO)))))))
                    g$ls/false$8531$1CmlGO)
                  ((case-lambda
                     ((g$t$8540$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$8541$1CmlGO)
                          (if (if g$ls/false$8541$1CmlGO
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$8542$1CmlGO g$val$8543$1CmlGO)
                                       (g$id?$7925$1CmlGO g$id$8542$1CmlGO)))
                                    g$ls/false$8541$1CmlGO))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$8544$1CmlGO g$val$8545$1CmlGO)
                                 (values
                                   g$id$8544$1CmlGO
                                   (cons 'expr g$val$8545$1CmlGO))))
                              g$ls/false$8541$1CmlGO)
                            ((case-lambda
                               ((g$t$8546$1CmlGO)
                                ((case-lambda
                                   ((g$ls/false$8547$1CmlGO)
                                    (if (if g$ls/false$8547$1CmlGO
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$8548$1CmlGO)
                                                 (g$id?$7925$1CmlGO
                                                   g$id$8548$1CmlGO)))
                                              g$ls/false$8547$1CmlGO))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$8549$1CmlGO)
                                           (values
                                             g$id$8549$1CmlGO
                                             (cons
                                               'expr
                                               (g$bless$8166$1CmlGO '(void))))))
                                        g$ls/false$8547$1CmlGO)
                                      (g$syntax-violation$8314$1CmlGO
                                        '#f
                                        '"invalid syntax"
                                        g$t$8546$1CmlGO))))
                                 (g$syntax-dispatch$8203$1CmlGO
                                   g$t$8546$1CmlGO
                                   '(_ any)))))
                             g$t$8540$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$8540$1CmlGO
                         '(_ any any)))))
                   g$t$8530$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8530$1CmlGO
               '(_ (any . any) any . each-any)))))
         g$x$8529$1CmlGO))))
   (g$parse-define-syntax$8144$1CmlGO
     g$parse-define-syntax$11604$1CmlGO
     (case-lambda
       ((g$x$8550$1CmlGO)
        ((case-lambda
           ((g$t$8551$1CmlGO)
            ((case-lambda
               ((g$ls/false$8552$1CmlGO)
                (if (if g$ls/false$8552$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8553$1CmlGO g$val$8554$1CmlGO)
                             (g$id?$7925$1CmlGO g$id$8553$1CmlGO)))
                          g$ls/false$8552$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8555$1CmlGO g$val$8556$1CmlGO)
                       (values g$id$8555$1CmlGO g$val$8556$1CmlGO)))
                    g$ls/false$8552$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8551$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$8551$1CmlGO '(_ any any)))))
         g$x$8550$1CmlGO))))
   (g$scheme-stx-hashtable$8145$1CmlGO
     g$scheme-stx-hashtable$11605$1CmlGO
     (g$make-eq-hashtable$6106$1CmlGO))
   (g$scheme-stx$8146$1CmlGO
     g$scheme-stx$11606$1CmlGO
     (case-lambda
       ((g$sym$8557$1CmlGO)
        ((case-lambda
           ((g$t$8558$1CmlGO)
            (if g$t$8558$1CmlGO
              g$t$8558$1CmlGO
              (begin
                '#f
                ((case-lambda
                   ((g$subst$8559$1CmlGO)
                    ((case-lambda
                       ((g$stx$8560$1CmlGO)
                        ((case-lambda
                           ((g$stx$8561$1CmlGO)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$6110$1CmlGO
                                    g$scheme-stx-hashtable$8145$1CmlGO
                                    g$sym$8557$1CmlGO
                                    g$stx$8561$1CmlGO)
                                  g$stx$8561$1CmlGO))))))
                         ((case-lambda
                            ((g$t$8562$1CmlGO)
                             (if g$t$8562$1CmlGO
                               ((case-lambda
                                  ((g$x$8563$1CmlGO)
                                   ((case-lambda
                                      ((g$name$8564$1CmlGO g$label$8565$1CmlGO)
                                       (g$add-subst$7915$1CmlGO
                                         (g$make-rib$7879$1CmlGO
                                           (list g$name$8564$1CmlGO)
                                           (list g$top-mark*$7867$1CmlGO)
                                           (list g$label$8565$1CmlGO)
                                           '#f)
                                         g$stx$8560$1CmlGO)))
                                    (car g$x$8563$1CmlGO)
                                    (cdr g$x$8563$1CmlGO))))
                                g$t$8562$1CmlGO)
                               g$stx$8560$1CmlGO)))
                          (g$assq$5658$1CmlGO
                            g$sym$8557$1CmlGO
                            g$subst$8559$1CmlGO)))))
                     (g$make-stx$7898$1CmlGO
                       g$sym$8557$1CmlGO
                       g$top-mark*$7867$1CmlGO
                       '()
                       '()))))
                 (g$library-subst$7697$1CmlGO
                   (g$find-library-by-name$7733$1CmlGO
                     '(psyntax system $all))))))))
         (g$hashtable-ref$6109$1CmlGO
           g$scheme-stx-hashtable$8145$1CmlGO
           g$sym$8557$1CmlGO
           '#f)))))
   (g$lexical-var$8147$1CmlGO g$lexical-var$11607$1CmlGO car)
   (g$lexical-mutable?$8148$1CmlGO g$lexical-mutable?$11608$1CmlGO cdr)
   (g$set-lexical-mutable!$8149$1CmlGO
     g$set-lexical-mutable!$11609$1CmlGO
     set-cdr!)
   (g$add-lexical$8150$1CmlGO
     g$add-lexical$11610$1CmlGO
     (case-lambda
       ((g$lab$8566$1CmlGO g$lex$8567$1CmlGO g$r$8568$1CmlGO)
        (cons
          (g$cons*$5670$1CmlGO g$lab$8566$1CmlGO 'lexical g$lex$8567$1CmlGO '#f)
          g$r$8568$1CmlGO))))
   (g$add-lexicals$8151$1CmlGO
     g$add-lexicals$11611$1CmlGO
     (case-lambda
       ((g$lab*$8569$1CmlGO g$lex*$8570$1CmlGO g$r$8571$1CmlGO)
        (if (null? g$lab*$8569$1CmlGO)
          g$r$8571$1CmlGO
          (g$add-lexicals$8151$1CmlGO
            (cdr g$lab*$8569$1CmlGO)
            (cdr g$lex*$8570$1CmlGO)
            (g$add-lexical$8150$1CmlGO
              (car g$lab*$8569$1CmlGO)
              (car g$lex*$8570$1CmlGO)
              g$r$8571$1CmlGO))))))
   (g$letrec-helper$8152$1CmlGO
     g$letrec-helper$11612$1CmlGO
     (case-lambda
       ((g$e$8572$1CmlGO g$r$8573$1CmlGO g$mr$8574$1CmlGO g$build$8575$1CmlGO)
        ((case-lambda
           ((g$t$8576$1CmlGO)
            ((case-lambda
               ((g$ls/false$8577$1CmlGO)
                (if g$ls/false$8577$1CmlGO
                  (apply
                    (case-lambda
                      ((g$lhs*$8578$1CmlGO
                         g$rhs*$8579$1CmlGO
                         g$b$8580$1CmlGO
                         g$b*$8581$1CmlGO)
                       (if (not (g$valid-bound-ids?$7930$1CmlGO
                                  g$lhs*$8578$1CmlGO))
                         (g$invalid-fmls-error$8168$1CmlGO
                           g$e$8572$1CmlGO
                           g$lhs*$8578$1CmlGO)
                         ((case-lambda
                            ((g$lex*$8582$1CmlGO g$lab*$8583$1CmlGO)
                             ((case-lambda
                                ((g$rib$8584$1CmlGO g$r$8585$1CmlGO)
                                 ((case-lambda
                                    ((g$body$8586$1CmlGO g$rhs*$8587$1CmlGO)
                                     (g$build$8575$1CmlGO
                                       '#f
                                       g$lex*$8582$1CmlGO
                                       g$rhs*$8587$1CmlGO
                                       g$body$8586$1CmlGO)))
                                  (g$chi-internal$8232$1CmlGO
                                    (g$add-subst$7915$1CmlGO
                                      g$rib$8584$1CmlGO
                                      (cons g$b$8580$1CmlGO g$b*$8581$1CmlGO))
                                    g$r$8585$1CmlGO
                                    g$mr$8574$1CmlGO)
                                  (g$chi-expr*$8219$1CmlGO
                                    (map (case-lambda
                                           ((g$x$8588$1CmlGO)
                                            (g$add-subst$7915$1CmlGO
                                              g$rib$8584$1CmlGO
                                              g$x$8588$1CmlGO)))
                                         g$rhs*$8579$1CmlGO)
                                    g$r$8585$1CmlGO
                                    g$mr$8574$1CmlGO))))
                              (g$make-full-rib$7893$1CmlGO
                                g$lhs*$8578$1CmlGO
                                g$lab*$8583$1CmlGO)
                              (g$add-lexicals$8151$1CmlGO
                                g$lab*$8583$1CmlGO
                                g$lex*$8582$1CmlGO
                                g$r$8573$1CmlGO))))
                          (map g$gen-lexical$7869$1CmlGO g$lhs*$8578$1CmlGO)
                          (map g$gen-label$7871$1CmlGO g$lhs*$8578$1CmlGO)))))
                    g$ls/false$8577$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8576$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8576$1CmlGO
               '(_ #(each (any any)) any . each-any)))))
         g$e$8572$1CmlGO))))
   (g$letrec-transformer$8153$1CmlGO
     g$letrec-transformer$11613$1CmlGO
     (case-lambda
       ((g$e$8589$1CmlGO g$r$8590$1CmlGO g$mr$8591$1CmlGO)
        (g$letrec-helper$8152$1CmlGO
          g$e$8589$1CmlGO
          g$r$8590$1CmlGO
          g$mr$8591$1CmlGO
          g$build-letrec$7861$1CmlGO))))
   (g$letrec*-transformer$8154$1CmlGO
     g$letrec*-transformer$11614$1CmlGO
     (case-lambda
       ((g$e$8592$1CmlGO g$r$8593$1CmlGO g$mr$8594$1CmlGO)
        (g$letrec-helper$8152$1CmlGO
          g$e$8592$1CmlGO
          g$r$8593$1CmlGO
          g$mr$8594$1CmlGO
          g$build-letrec*$7862$1CmlGO))))
   (g$fluid-let-syntax-transformer$8155$1CmlGO
     g$fluid-let-syntax-transformer$11615$1CmlGO
     (case-lambda
       ((g$e$8595$1CmlGO g$r$8596$1CmlGO g$mr$8597$1CmlGO)
        (letrec* ((g$lookup$8598$1CmlGO
                    (case-lambda
                      ((g$x$8608$1CmlGO)
                       ((case-lambda
                          ((g$t$8609$1CmlGO)
                           (if g$t$8609$1CmlGO
                             g$t$8609$1CmlGO
                             (begin
                               '#f
                               (g$syntax-violation$8314$1CmlGO
                                 '#f
                                 '"unbound identifier"
                                 g$e$8595$1CmlGO
                                 g$x$8608$1CmlGO)))))
                        (g$id->label$7938$1CmlGO g$x$8608$1CmlGO))))))
          ((case-lambda
             ((g$t$8599$1CmlGO)
              ((case-lambda
                 ((g$ls/false$8600$1CmlGO)
                  (if g$ls/false$8600$1CmlGO
                    (apply
                      (case-lambda
                        ((g$lhs*$8601$1CmlGO
                           g$rhs*$8602$1CmlGO
                           g$b$8603$1CmlGO
                           g$b*$8604$1CmlGO)
                         (if (not (g$valid-bound-ids?$7930$1CmlGO
                                    g$lhs*$8601$1CmlGO))
                           (g$invalid-fmls-error$8168$1CmlGO
                             g$e$8595$1CmlGO
                             g$lhs*$8601$1CmlGO)
                           ((case-lambda
                              ((g$lab*$8605$1CmlGO g$rhs*$8606$1CmlGO)
                               (g$chi-internal$8232$1CmlGO
                                 (cons g$b$8603$1CmlGO g$b*$8604$1CmlGO)
                                 (append
                                   (map cons
                                        g$lab*$8605$1CmlGO
                                        g$rhs*$8606$1CmlGO)
                                   g$r$8596$1CmlGO)
                                 (append
                                   (map cons
                                        g$lab*$8605$1CmlGO
                                        g$rhs*$8606$1CmlGO)
                                   g$mr$8597$1CmlGO))))
                            (map g$lookup$8598$1CmlGO g$lhs*$8601$1CmlGO)
                            (map (case-lambda
                                   ((g$x$8607$1CmlGO)
                                    (g$make-eval-transformer$7957$1CmlGO
                                      (g$expand-transformer$8248$1CmlGO
                                        g$x$8607$1CmlGO
                                        g$mr$8597$1CmlGO))))
                                 g$rhs*$8602$1CmlGO)))))
                      g$ls/false$8600$1CmlGO)
                    (g$syntax-violation$8314$1CmlGO
                      '#f
                      '"invalid syntax"
                      g$t$8599$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO
                 g$t$8599$1CmlGO
                 '(_ #(each (any any)) any . each-any)))))
           g$e$8595$1CmlGO)))))
   (g$type-descriptor-transformer$8156$1CmlGO
     g$type-descriptor-transformer$11616$1CmlGO
     (case-lambda
       ((g$e$8610$1CmlGO g$r$8611$1CmlGO g$mr$8612$1CmlGO)
        ((case-lambda
           ((g$t$8613$1CmlGO)
            ((case-lambda
               ((g$ls/false$8614$1CmlGO)
                (if (if g$ls/false$8614$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8615$1CmlGO)
                             (g$id?$7925$1CmlGO g$id$8615$1CmlGO)))
                          g$ls/false$8614$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8616$1CmlGO)
                       ((case-lambda
                          ((g$lab$8617$1CmlGO)
                           ((case-lambda
                              ((g$b$8618$1CmlGO)
                               ((case-lambda
                                  ((g$type$8619$1CmlGO)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8617$1CmlGO)
                                           (g$raise-unbound-error$7944$1CmlGO
                                             g$id$8616$1CmlGO)
                                           (void))
                                         (if (not (if (eq? g$type$8619$1CmlGO
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (not (list?
                                                             (g$binding-value$7943$1CmlGO
                                                               g$b$8618$1CmlGO))))
                                                    '#f))
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"not a record type"
                                             g$e$8610$1CmlGO)
                                           (void))
                                         (list
                                           'quote
                                           (g$binding-value$7943$1CmlGO
                                             g$b$8618$1CmlGO))))))))
                                (g$binding-type$7942$1CmlGO g$b$8618$1CmlGO))))
                            (g$label->binding$7940$1CmlGO
                              g$lab$8617$1CmlGO
                              g$r$8611$1CmlGO))))
                        (g$id->label$7938$1CmlGO g$id$8616$1CmlGO))))
                    g$ls/false$8614$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8613$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$8613$1CmlGO '(_ any)))))
         g$e$8610$1CmlGO))))
   (g$record-type-descriptor-transformer$8157$1CmlGO
     g$record-type-descriptor-transformer$11617$1CmlGO
     (case-lambda
       ((g$e$8620$1CmlGO g$r$8621$1CmlGO g$mr$8622$1CmlGO)
        ((case-lambda
           ((g$t$8623$1CmlGO)
            ((case-lambda
               ((g$ls/false$8624$1CmlGO)
                (if (if g$ls/false$8624$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8625$1CmlGO)
                             (g$id?$7925$1CmlGO g$id$8625$1CmlGO)))
                          g$ls/false$8624$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8626$1CmlGO)
                       ((case-lambda
                          ((g$lab$8627$1CmlGO)
                           ((case-lambda
                              ((g$b$8628$1CmlGO)
                               ((case-lambda
                                  ((g$type$8629$1CmlGO)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8627$1CmlGO)
                                           (g$raise-unbound-error$7944$1CmlGO
                                             g$id$8626$1CmlGO)
                                           (void))
                                         (if (not (if (eq? g$type$8629$1CmlGO
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7943$1CmlGO
                                                          g$b$8628$1CmlGO)))
                                                    '#f))
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"not a record type"
                                             g$e$8620$1CmlGO)
                                           (void))
                                         (g$chi-expr$8221$1CmlGO
                                           (car (g$binding-value$7943$1CmlGO
                                                  g$b$8628$1CmlGO))
                                           g$r$8621$1CmlGO
                                           g$mr$8622$1CmlGO)))))))
                                (g$binding-type$7942$1CmlGO g$b$8628$1CmlGO))))
                            (g$label->binding$7940$1CmlGO
                              g$lab$8627$1CmlGO
                              g$r$8621$1CmlGO))))
                        (g$id->label$7938$1CmlGO g$id$8626$1CmlGO))))
                    g$ls/false$8624$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8623$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$8623$1CmlGO '(_ any)))))
         g$e$8620$1CmlGO))))
   (g$record-constructor-descriptor-transformer$8158$1CmlGO
     g$record-constructor-descriptor-transformer$11618$1CmlGO
     (case-lambda
       ((g$e$8630$1CmlGO g$r$8631$1CmlGO g$mr$8632$1CmlGO)
        ((case-lambda
           ((g$t$8633$1CmlGO)
            ((case-lambda
               ((g$ls/false$8634$1CmlGO)
                (if (if g$ls/false$8634$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8635$1CmlGO)
                             (g$id?$7925$1CmlGO g$id$8635$1CmlGO)))
                          g$ls/false$8634$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8636$1CmlGO)
                       ((case-lambda
                          ((g$lab$8637$1CmlGO)
                           ((case-lambda
                              ((g$b$8638$1CmlGO)
                               ((case-lambda
                                  ((g$type$8639$1CmlGO)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$8637$1CmlGO)
                                           (g$raise-unbound-error$7944$1CmlGO
                                             g$id$8636$1CmlGO)
                                           (void))
                                         (if (not (if (eq? g$type$8639$1CmlGO
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7943$1CmlGO
                                                          g$b$8638$1CmlGO)))
                                                    '#f))
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid type"
                                             g$e$8630$1CmlGO)
                                           (void))
                                         (g$chi-expr$8221$1CmlGO
                                           (g$cadr$5832$1CmlGO
                                             (g$binding-value$7943$1CmlGO
                                               g$b$8638$1CmlGO))
                                           g$r$8631$1CmlGO
                                           g$mr$8632$1CmlGO)))))))
                                (g$binding-type$7942$1CmlGO g$b$8638$1CmlGO))))
                            (g$label->binding$7940$1CmlGO
                              g$lab$8637$1CmlGO
                              g$r$8631$1CmlGO))))
                        (g$id->label$7938$1CmlGO g$id$8636$1CmlGO))))
                    g$ls/false$8634$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8633$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$8633$1CmlGO '(_ any)))))
         g$e$8630$1CmlGO))))
   (g$when-macro$8159$1CmlGO
     g$when-macro$11619$1CmlGO
     (case-lambda
       ((g$e$8640$1CmlGO)
        ((case-lambda
           ((g$t$8641$1CmlGO)
            ((case-lambda
               ((g$ls/false$8642$1CmlGO)
                (if g$ls/false$8642$1CmlGO
                  (apply
                    (case-lambda
                      ((g$test$8643$1CmlGO g$e$8644$1CmlGO g$e*$8645$1CmlGO)
                       (g$bless$8166$1CmlGO
                         (list
                           'if
                           g$test$8643$1CmlGO
                           (cons
                             'begin
                             (cons g$e$8644$1CmlGO g$e*$8645$1CmlGO))))))
                    g$ls/false$8642$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8641$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8641$1CmlGO
               '(_ any any . each-any)))))
         g$e$8640$1CmlGO))))
   (g$unless-macro$8160$1CmlGO
     g$unless-macro$11620$1CmlGO
     (case-lambda
       ((g$e$8646$1CmlGO)
        ((case-lambda
           ((g$t$8647$1CmlGO)
            ((case-lambda
               ((g$ls/false$8648$1CmlGO)
                (if g$ls/false$8648$1CmlGO
                  (apply
                    (case-lambda
                      ((g$test$8649$1CmlGO g$e$8650$1CmlGO g$e*$8651$1CmlGO)
                       (g$bless$8166$1CmlGO
                         (list
                           'if
                           (list 'not g$test$8649$1CmlGO)
                           (cons
                             'begin
                             (cons g$e$8650$1CmlGO g$e*$8651$1CmlGO))))))
                    g$ls/false$8648$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8647$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8647$1CmlGO
               '(_ any any . each-any)))))
         g$e$8646$1CmlGO))))
   (g$if-transformer$8161$1CmlGO
     g$if-transformer$11621$1CmlGO
     (case-lambda
       ((g$e$8652$1CmlGO g$r$8653$1CmlGO g$mr$8654$1CmlGO)
        ((case-lambda
           ((g$t$8655$1CmlGO)
            ((case-lambda
               ((g$ls/false$8656$1CmlGO)
                (if g$ls/false$8656$1CmlGO
                  (apply
                    (case-lambda
                      ((g$e0$8657$1CmlGO g$e1$8658$1CmlGO g$e2$8659$1CmlGO)
                       (list
                         'if
                         (g$chi-expr$8221$1CmlGO
                           g$e0$8657$1CmlGO
                           g$r$8653$1CmlGO
                           g$mr$8654$1CmlGO)
                         (g$chi-expr$8221$1CmlGO
                           g$e1$8658$1CmlGO
                           g$r$8653$1CmlGO
                           g$mr$8654$1CmlGO)
                         (g$chi-expr$8221$1CmlGO
                           g$e2$8659$1CmlGO
                           g$r$8653$1CmlGO
                           g$mr$8654$1CmlGO))))
                    g$ls/false$8656$1CmlGO)
                  ((case-lambda
                     ((g$t$8660$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$8661$1CmlGO)
                          (if g$ls/false$8661$1CmlGO
                            (apply
                              (case-lambda
                                ((g$e0$8662$1CmlGO g$e1$8663$1CmlGO)
                                 (list
                                   'if
                                   (g$chi-expr$8221$1CmlGO
                                     g$e0$8662$1CmlGO
                                     g$r$8653$1CmlGO
                                     g$mr$8654$1CmlGO)
                                   (g$chi-expr$8221$1CmlGO
                                     g$e1$8663$1CmlGO
                                     g$r$8653$1CmlGO
                                     g$mr$8654$1CmlGO)
                                   (g$build-void$7860$1CmlGO))))
                              g$ls/false$8661$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$8660$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$8660$1CmlGO
                         '(_ any any)))))
                   g$t$8655$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$8655$1CmlGO '(_ any any any)))))
         g$e$8652$1CmlGO))))
   (g$case-macro$8162$1CmlGO
     g$case-macro$11622$1CmlGO
     (case-lambda
       ((g$e$8664$1CmlGO)
        (letrec* ((g$build-last$8665$1CmlGO
                    (case-lambda
                      ((g$cls$8685$1CmlGO)
                       ((case-lambda
                          ((g$t$8686$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$8687$1CmlGO)
                               (if g$ls/false$8687$1CmlGO
                                 (apply
                                   (case-lambda
                                     ((g$e$8688$1CmlGO g$e*$8689$1CmlGO)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$8688$1CmlGO
                                          g$e*$8689$1CmlGO))))
                                   g$ls/false$8687$1CmlGO)
                                 ((case-lambda
                                    ((g$t$8690$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$8691$1CmlGO)
                                         (if g$ls/false$8691$1CmlGO
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8666$1CmlGO
                                                  g$cls$8685$1CmlGO
                                                  '(if #f #f))))
                                             g$ls/false$8691$1CmlGO)
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$t$8690$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$8690$1CmlGO
                                        '_))))
                                  g$t$8686$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$8686$1CmlGO
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8685$1CmlGO))))
                  (g$build-one$8666$1CmlGO
                    (case-lambda
                      ((g$cls$8678$1CmlGO g$k$8679$1CmlGO)
                       ((case-lambda
                          ((g$t$8680$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$8681$1CmlGO)
                               (if g$ls/false$8681$1CmlGO
                                 (apply
                                   (case-lambda
                                     ((g$d*$8682$1CmlGO
                                        g$e$8683$1CmlGO
                                        g$e*$8684$1CmlGO)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8682$1CmlGO))
                                        (cons
                                          'begin
                                          (cons
                                            g$e$8683$1CmlGO
                                            g$e*$8684$1CmlGO))
                                        g$k$8679$1CmlGO)))
                                   g$ls/false$8681$1CmlGO)
                                 (g$syntax-violation$8314$1CmlGO
                                   '#f
                                   '"invalid syntax"
                                   g$t$8680$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$8680$1CmlGO
                              '(each-any any . each-any)))))
                        g$cls$8678$1CmlGO)))))
          ((case-lambda
             ((g$t$8667$1CmlGO)
              ((case-lambda
                 ((g$ls/false$8668$1CmlGO)
                  (if g$ls/false$8668$1CmlGO
                    (apply
                      (case-lambda
                        ((g$expr$8669$1CmlGO)
                         (g$bless$8166$1CmlGO
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8669$1CmlGO))
                               '((if #f #f)))))))
                      g$ls/false$8668$1CmlGO)
                    ((case-lambda
                       ((g$t$8670$1CmlGO)
                        ((case-lambda
                           ((g$ls/false$8671$1CmlGO)
                            (if g$ls/false$8671$1CmlGO
                              (apply
                                (case-lambda
                                  ((g$expr$8672$1CmlGO
                                     g$cls$8673$1CmlGO
                                     g$cls*$8674$1CmlGO)
                                   (g$bless$8166$1CmlGO
                                     (list
                                       'let
                                       (list (list 't g$expr$8672$1CmlGO))
                                       ((letrec ((g$f$8675$1CmlGO
                                                   (case-lambda
                                                     ((g$cls$8676$1CmlGO
                                                        g$cls*$8677$1CmlGO)
                                                      (if (null?
                                                            g$cls*$8677$1CmlGO)
                                                        (g$build-last$8665$1CmlGO
                                                          g$cls$8676$1CmlGO)
                                                        (g$build-one$8666$1CmlGO
                                                          g$cls$8676$1CmlGO
                                                          (g$f$8675$1CmlGO
                                                            (car g$cls*$8677$1CmlGO)
                                                            (cdr g$cls*$8677$1CmlGO))))))))
                                          g$f$8675$1CmlGO)
                                        g$cls$8673$1CmlGO
                                        g$cls*$8674$1CmlGO)))))
                                g$ls/false$8671$1CmlGO)
                              (g$syntax-violation$8314$1CmlGO
                                '#f
                                '"invalid syntax"
                                g$t$8670$1CmlGO))))
                         (g$syntax-dispatch$8203$1CmlGO
                           g$t$8670$1CmlGO
                           '(_ any any . each-any)))))
                     g$t$8667$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO g$t$8667$1CmlGO '(_ any)))))
           g$e$8664$1CmlGO)))))
   (g$quote-transformer$8163$1CmlGO
     g$quote-transformer$11623$1CmlGO
     (case-lambda
       ((g$e$8692$1CmlGO g$r$8693$1CmlGO g$mr$8694$1CmlGO)
        ((case-lambda
           ((g$t$8695$1CmlGO)
            ((case-lambda
               ((g$ls/false$8696$1CmlGO)
                (if g$ls/false$8696$1CmlGO
                  (apply
                    (case-lambda
                      ((g$datum$8697$1CmlGO)
                       (list
                         'quote
                         (g$stx->datum$7936$1CmlGO g$datum$8697$1CmlGO))))
                    g$ls/false$8696$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8695$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$8695$1CmlGO '(_ any)))))
         g$e$8692$1CmlGO))))
   (g$case-lambda-transformer$8164$1CmlGO
     g$case-lambda-transformer$11624$1CmlGO
     (case-lambda
       ((g$e$8698$1CmlGO g$r$8699$1CmlGO g$mr$8700$1CmlGO)
        ((case-lambda
           ((g$t$8701$1CmlGO)
            ((case-lambda
               ((g$ls/false$8702$1CmlGO)
                (if g$ls/false$8702$1CmlGO
                  (apply
                    (case-lambda
                      ((g$fmls*$8703$1CmlGO g$b*$8704$1CmlGO g$b**$8705$1CmlGO)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$8225$1CmlGO
                              g$e$8698$1CmlGO
                              g$fmls*$8703$1CmlGO
                              (map cons g$b*$8704$1CmlGO g$b**$8705$1CmlGO)
                              g$r$8699$1CmlGO
                              g$mr$8700$1CmlGO)))
                         (case-lambda
                           ((g$fmls*$8708$1CmlGO g$body*$8709$1CmlGO)
                            ((case-lambda
                               ((g$body*$8710$1CmlGO g$fmls*$8711$1CmlGO)
                                (g$build-case-lambda$7857$1CmlGO
                                  '#f
                                  g$fmls*$8711$1CmlGO
                                  g$body*$8710$1CmlGO)))
                             g$body*$8709$1CmlGO
                             g$fmls*$8708$1CmlGO))))))
                    g$ls/false$8702$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8701$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8701$1CmlGO
               '(_ . #(each (any any . each-any)))))))
         g$e$8698$1CmlGO))))
   (g$lambda-transformer$8165$1CmlGO
     g$lambda-transformer$11625$1CmlGO
     (case-lambda
       ((g$e$8712$1CmlGO g$r$8713$1CmlGO g$mr$8714$1CmlGO)
        ((case-lambda
           ((g$t$8715$1CmlGO)
            ((case-lambda
               ((g$ls/false$8716$1CmlGO)
                (if g$ls/false$8716$1CmlGO
                  (apply
                    (case-lambda
                      ((g$fmls$8717$1CmlGO g$b$8718$1CmlGO g$b*$8719$1CmlGO)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$8224$1CmlGO
                              g$e$8712$1CmlGO
                              g$fmls$8717$1CmlGO
                              (cons g$b$8718$1CmlGO g$b*$8719$1CmlGO)
                              g$r$8713$1CmlGO
                              g$mr$8714$1CmlGO)))
                         (case-lambda
                           ((g$fmls$8722$1CmlGO g$body$8723$1CmlGO)
                            ((case-lambda
                               ((g$body$8724$1CmlGO g$fmls$8725$1CmlGO)
                                (g$build-lambda$7856$1CmlGO
                                  '#f
                                  g$fmls$8725$1CmlGO
                                  g$body$8724$1CmlGO)))
                             g$body$8723$1CmlGO
                             g$fmls$8722$1CmlGO))))))
                    g$ls/false$8716$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8715$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8715$1CmlGO
               '(_ any any . each-any)))))
         g$e$8712$1CmlGO))))
   (g$bless$8166$1CmlGO
     g$bless$11626$1CmlGO
     (case-lambda
       ((g$x$8726$1CmlGO)
        (g$mkstx$7913$1CmlGO
          ((letrec ((g$f$8727$1CmlGO
                      (case-lambda
                        ((g$x$8728$1CmlGO)
                         (if (g$stx?$7897$1CmlGO g$x$8728$1CmlGO)
                           g$x$8728$1CmlGO
                           (if (pair? g$x$8728$1CmlGO)
                             (cons
                               (g$f$8727$1CmlGO (car g$x$8728$1CmlGO))
                               (g$f$8727$1CmlGO (cdr g$x$8728$1CmlGO)))
                             (if (symbol? g$x$8728$1CmlGO)
                               (g$scheme-stx$8146$1CmlGO g$x$8728$1CmlGO)
                               (if (vector? g$x$8728$1CmlGO)
                                 (vector-map g$f$8727$1CmlGO g$x$8728$1CmlGO)
                                 g$x$8728$1CmlGO))))))))
             g$f$8727$1CmlGO)
           g$x$8726$1CmlGO)
          '()
          '()
          '()))))
   (g$with-syntax-macro$8167$1CmlGO
     g$with-syntax-macro$11627$1CmlGO
     (case-lambda
       ((g$e$8729$1CmlGO)
        ((case-lambda
           ((g$t$8730$1CmlGO)
            ((case-lambda
               ((g$ls/false$8731$1CmlGO)
                (if g$ls/false$8731$1CmlGO
                  (apply
                    (case-lambda
                      ((g$pat*$8732$1CmlGO
                         g$expr*$8733$1CmlGO
                         g$b$8734$1CmlGO
                         g$b*$8735$1CmlGO)
                       ((case-lambda
                          ((g$idn*$8736$1CmlGO)
                           (begin
                             (g$verify-formals$8223$1CmlGO
                               (map car g$idn*$8736$1CmlGO)
                               g$e$8729$1CmlGO)
                             ((case-lambda
                                ((g$t*$8737$1CmlGO)
                                 (g$bless$8166$1CmlGO
                                   (list
                                     'let
                                     (map list
                                          g$t*$8737$1CmlGO
                                          g$expr*$8733$1CmlGO)
                                     ((letrec ((g$f$8738$1CmlGO
                                                 (case-lambda
                                                   ((g$pat*$8739$1CmlGO
                                                      g$t*$8740$1CmlGO)
                                                    (if (null?
                                                          g$pat*$8739$1CmlGO)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8734$1CmlGO
                                                            g$b*$8735$1CmlGO)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8740$1CmlGO)
                                                        '()
                                                        (list
                                                          (car g$pat*$8739$1CmlGO)
                                                          (g$f$8738$1CmlGO
                                                            (cdr g$pat*$8739$1CmlGO)
                                                            (cdr g$t*$8740$1CmlGO)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8739$1CmlGO))
                                                            (car g$t*$8740$1CmlGO)))))))))
                                        g$f$8738$1CmlGO)
                                      g$pat*$8732$1CmlGO
                                      g$t*$8737$1CmlGO)))))
                              (g$generate-temporaries$8304$1CmlGO
                                g$expr*$8733$1CmlGO)))))
                        ((letrec ((g$f$8741$1CmlGO
                                    (case-lambda
                                      ((g$pat*$8742$1CmlGO)
                                       (if (null? g$pat*$8742$1CmlGO)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$8202$1CmlGO
                                                (car g$pat*$8742$1CmlGO)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8745$1CmlGO
                                                g$idn*$8746$1CmlGO)
                                              ((case-lambda
                                                 ((g$idn*$8747$1CmlGO
                                                    g$pat$8748$1CmlGO)
                                                  (append
                                                    g$idn*$8747$1CmlGO
                                                    (g$f$8741$1CmlGO
                                                      (cdr g$pat*$8742$1CmlGO)))))
                                               g$idn*$8746$1CmlGO
                                               g$pat$8745$1CmlGO)))))))))
                           g$f$8741$1CmlGO)
                         g$pat*$8732$1CmlGO))))
                    g$ls/false$8731$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8730$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8730$1CmlGO
               '(_ #(each (any any)) any . each-any)))))
         g$e$8729$1CmlGO))))
   (g$invalid-fmls-error$8168$1CmlGO
     g$invalid-fmls-error$11628$1CmlGO
     (case-lambda
       ((g$stx$8749$1CmlGO g$fmls$8750$1CmlGO)
        ((case-lambda
           ((g$t$8751$1CmlGO)
            ((case-lambda
               ((g$ls/false$8752$1CmlGO)
                (if g$ls/false$8752$1CmlGO
                  (apply
                    (case-lambda
                      ((g$id*$8753$1CmlGO g$last$8754$1CmlGO)
                       ((letrec ((g$f$8755$1CmlGO
                                   (case-lambda
                                     ((g$id*$8756$1CmlGO)
                                      (if (null? g$id*$8756$1CmlGO)
                                        (values)
                                        (if (not (g$id?$7925$1CmlGO
                                                   (car g$id*$8756$1CmlGO)))
                                          (g$syntax-violation$8314$1CmlGO
                                            '#f
                                            '"not an identifier"
                                            g$stx$8749$1CmlGO
                                            (car g$id*$8756$1CmlGO))
                                          (begin
                                            (g$f$8755$1CmlGO
                                              (cdr g$id*$8756$1CmlGO))
                                            (if (g$bound-id-member?$7932$1CmlGO
                                                  (car g$id*$8756$1CmlGO)
                                                  (cdr g$id*$8756$1CmlGO))
                                              (g$syntax-violation$8314$1CmlGO
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8749$1CmlGO
                                                (car g$id*$8756$1CmlGO))
                                              (void)))))))))
                          g$f$8755$1CmlGO)
                        (if (g$id?$7925$1CmlGO g$last$8754$1CmlGO)
                          (cons g$last$8754$1CmlGO g$id*$8753$1CmlGO)
                          (if (g$syntax-null?$7920$1CmlGO g$last$8754$1CmlGO)
                            g$id*$8753$1CmlGO
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"not an identifier"
                              g$stx$8749$1CmlGO
                              g$last$8754$1CmlGO))))))
                    g$ls/false$8752$1CmlGO)
                  ((case-lambda
                     ((g$t$8757$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$8758$1CmlGO)
                          (if g$ls/false$8758$1CmlGO
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8314$1CmlGO
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8749$1CmlGO
                                   g$fmls$8750$1CmlGO)))
                              g$ls/false$8758$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$8757$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO g$t$8757$1CmlGO '_))))
                   g$t$8751$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8751$1CmlGO
               '#(each+ any () any)))))
         g$fmls$8750$1CmlGO))))
   (g$let-macro$8169$1CmlGO
     g$let-macro$11629$1CmlGO
     (case-lambda
       ((g$stx$8759$1CmlGO)
        ((case-lambda
           ((g$t$8760$1CmlGO)
            ((case-lambda
               ((g$ls/false$8761$1CmlGO)
                (if g$ls/false$8761$1CmlGO
                  (apply
                    (case-lambda
                      ((g$lhs*$8762$1CmlGO
                         g$rhs*$8763$1CmlGO
                         g$b$8764$1CmlGO
                         g$b*$8765$1CmlGO)
                       (if (g$valid-bound-ids?$7930$1CmlGO g$lhs*$8762$1CmlGO)
                         (g$bless$8166$1CmlGO
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8762$1CmlGO
                                 (cons g$b$8764$1CmlGO g$b*$8765$1CmlGO)))
                             g$rhs*$8763$1CmlGO))
                         (g$invalid-fmls-error$8168$1CmlGO
                           g$stx$8759$1CmlGO
                           g$lhs*$8762$1CmlGO))))
                    g$ls/false$8761$1CmlGO)
                  ((case-lambda
                     ((g$t$8766$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$8767$1CmlGO)
                          (if (if g$ls/false$8767$1CmlGO
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8768$1CmlGO
                                         g$lhs*$8769$1CmlGO
                                         g$rhs*$8770$1CmlGO
                                         g$b$8771$1CmlGO
                                         g$b*$8772$1CmlGO)
                                       (g$id?$7925$1CmlGO g$f$8768$1CmlGO)))
                                    g$ls/false$8767$1CmlGO))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8773$1CmlGO
                                   g$lhs*$8774$1CmlGO
                                   g$rhs*$8775$1CmlGO
                                   g$b$8776$1CmlGO
                                   g$b*$8777$1CmlGO)
                                 (if (g$valid-bound-ids?$7930$1CmlGO
                                       g$lhs*$8774$1CmlGO)
                                   (g$bless$8166$1CmlGO
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8773$1CmlGO
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8774$1CmlGO
                                                 (cons
                                                   g$b$8776$1CmlGO
                                                   g$b*$8777$1CmlGO)))))
                                         g$f$8773$1CmlGO)
                                       g$rhs*$8775$1CmlGO))
                                   (g$invalid-fmls-error$8168$1CmlGO
                                     g$stx$8759$1CmlGO
                                     g$lhs*$8774$1CmlGO))))
                              g$ls/false$8767$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$8766$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$8766$1CmlGO
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8760$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8760$1CmlGO
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8759$1CmlGO))))
   (g$let-values-macro$8170$1CmlGO
     g$let-values-macro$11630$1CmlGO
     (case-lambda
       ((g$stx$8778$1CmlGO)
        (letrec* ((g$rename$8779$1CmlGO
                    (case-lambda
                      ((g$x$8830$1CmlGO g$old*$8831$1CmlGO g$new*$8832$1CmlGO)
                       (begin
                         (if (not (g$id?$7925$1CmlGO g$x$8830$1CmlGO))
                           (g$syntax-violation$8314$1CmlGO
                             '#f
                             '"not an indentifier"
                             g$stx$8778$1CmlGO
                             g$x$8830$1CmlGO)
                           (void))
                         (if (g$bound-id-member?$7932$1CmlGO
                               g$x$8830$1CmlGO
                               g$old*$8831$1CmlGO)
                           (g$syntax-violation$8314$1CmlGO
                             '#f
                             '"duplicate binding"
                             g$stx$8778$1CmlGO
                             g$x$8830$1CmlGO)
                           (void))
                         ((case-lambda
                            ((g$y$8833$1CmlGO)
                             (values
                               g$y$8833$1CmlGO
                               (cons g$x$8830$1CmlGO g$old*$8831$1CmlGO)
                               (cons g$y$8833$1CmlGO g$new*$8832$1CmlGO))))
                          (gensym
                            (g$syntax->datum$8317$1CmlGO g$x$8830$1CmlGO)))))))
                  (g$rename*$8780$1CmlGO
                    (case-lambda
                      ((g$x*$8821$1CmlGO g$old*$8822$1CmlGO g$new*$8823$1CmlGO)
                       (if (null? g$x*$8821$1CmlGO)
                         (values '() g$old*$8822$1CmlGO g$new*$8823$1CmlGO)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8779$1CmlGO
                                (car g$x*$8821$1CmlGO)
                                g$old*$8822$1CmlGO
                                g$new*$8823$1CmlGO)))
                           (case-lambda
                             ((g$x$8824$1CmlGO
                                g$old*$8825$1CmlGO
                                g$new*$8826$1CmlGO)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8780$1CmlGO
                                     (cdr g$x*$8821$1CmlGO)
                                     g$old*$8825$1CmlGO
                                     g$new*$8826$1CmlGO)))
                                (case-lambda
                                  ((g$x*$8827$1CmlGO
                                     g$old*$8828$1CmlGO
                                     g$new*$8829$1CmlGO)
                                   (values
                                     (cons g$x$8824$1CmlGO g$x*$8827$1CmlGO)
                                     g$old*$8828$1CmlGO
                                     g$new*$8829$1CmlGO))))))))))))
          ((case-lambda
             ((g$t$8781$1CmlGO)
              ((case-lambda
                 ((g$ls/false$8782$1CmlGO)
                  (if g$ls/false$8782$1CmlGO
                    (apply
                      (case-lambda
                        ((g$b$8783$1CmlGO g$b*$8784$1CmlGO)
                         (g$cons*$5670$1CmlGO
                           (g$bless$8166$1CmlGO 'let)
                           '()
                           g$b$8783$1CmlGO
                           g$b*$8784$1CmlGO)))
                      g$ls/false$8782$1CmlGO)
                    ((case-lambda
                       ((g$t$8785$1CmlGO)
                        ((case-lambda
                           ((g$ls/false$8786$1CmlGO)
                            (if g$ls/false$8786$1CmlGO
                              (apply
                                (case-lambda
                                  ((g$lhs*$8787$1CmlGO
                                     g$rhs*$8788$1CmlGO
                                     g$b$8789$1CmlGO
                                     g$b*$8790$1CmlGO)
                                   (g$bless$8166$1CmlGO
                                     ((letrec ((g$f$8791$1CmlGO
                                                 (case-lambda
                                                   ((g$lhs*$8792$1CmlGO
                                                      g$rhs*$8793$1CmlGO
                                                      g$old*$8794$1CmlGO
                                                      g$new*$8795$1CmlGO)
                                                    (if (null?
                                                          g$lhs*$8792$1CmlGO)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (map list
                                                               g$old*$8794$1CmlGO
                                                               g$new*$8795$1CmlGO)
                                                          (cons
                                                            g$b$8789$1CmlGO
                                                            g$b*$8790$1CmlGO)))
                                                      ((case-lambda
                                                         ((g$t$8796$1CmlGO)
                                                          ((case-lambda
                                                             ((g$ls/false$8797$1CmlGO)
                                                              (if g$ls/false$8797$1CmlGO
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8798$1CmlGO)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8780$1CmlGO
                                                                            g$x*$8798$1CmlGO
                                                                            g$old*$8794$1CmlGO
                                                                            g$new*$8795$1CmlGO)))
                                                                       (case-lambda
                                                                         ((g$y*$8802$1CmlGO
                                                                            g$old*$8803$1CmlGO
                                                                            g$new*$8804$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$new*$8805$1CmlGO
                                                                                g$old*$8806$1CmlGO
                                                                                g$y*$8807$1CmlGO)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8793$1CmlGO))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8807$1CmlGO
                                                                                  (g$f$8791$1CmlGO
                                                                                    (cdr g$lhs*$8792$1CmlGO)
                                                                                    (cdr g$rhs*$8793$1CmlGO)
                                                                                    g$old*$8806$1CmlGO
                                                                                    g$new*$8805$1CmlGO)))))
                                                                           g$new*$8804$1CmlGO
                                                                           g$old*$8803$1CmlGO
                                                                           g$y*$8802$1CmlGO))))))
                                                                  g$ls/false$8797$1CmlGO)
                                                                ((case-lambda
                                                                   ((g$t$8808$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8809$1CmlGO)
                                                                        (if g$ls/false$8809$1CmlGO
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8810$1CmlGO
                                                                                 g$x$8811$1CmlGO)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8779$1CmlGO
                                                                                      g$x$8811$1CmlGO
                                                                                      g$old*$8794$1CmlGO
                                                                                      g$new*$8795$1CmlGO)))
                                                                                 (case-lambda
                                                                                   ((g$y$8812$1CmlGO
                                                                                      g$old*$8813$1CmlGO
                                                                                      g$new*$8814$1CmlGO)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8780$1CmlGO
                                                                                           g$x*$8810$1CmlGO
                                                                                           g$old*$8813$1CmlGO
                                                                                           g$new*$8814$1CmlGO)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8815$1CmlGO
                                                                                           g$old*$8816$1CmlGO
                                                                                           g$new*$8817$1CmlGO)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8793$1CmlGO))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8815$1CmlGO
                                                                                               g$y$8812$1CmlGO)
                                                                                             (g$f$8791$1CmlGO
                                                                                               (cdr g$lhs*$8792$1CmlGO)
                                                                                               (cdr g$rhs*$8793$1CmlGO)
                                                                                               g$old*$8816$1CmlGO
                                                                                               g$new*$8817$1CmlGO)))))))))))
                                                                            g$ls/false$8809$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$t$8818$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8819$1CmlGO)
                                                                                  (if g$ls/false$8819$1CmlGO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8820$1CmlGO)
                                                                                         (g$syntax-violation$8314$1CmlGO
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8778$1CmlGO
                                                                                           g$others$8820$1CmlGO)))
                                                                                      g$ls/false$8819$1CmlGO)
                                                                                    (g$syntax-violation$8314$1CmlGO
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8818$1CmlGO))))
                                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                                 g$t$8818$1CmlGO
                                                                                 'any))))
                                                                           g$t$8808$1CmlGO))))
                                                                     (g$syntax-dispatch$8203$1CmlGO
                                                                       g$t$8808$1CmlGO
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8796$1CmlGO))))
                                                           (g$syntax-dispatch$8203$1CmlGO
                                                             g$t$8796$1CmlGO
                                                             'each-any))))
                                                       (car g$lhs*$8792$1CmlGO)))))))
                                        g$f$8791$1CmlGO)
                                      g$lhs*$8787$1CmlGO
                                      g$rhs*$8788$1CmlGO
                                      '()
                                      '()))))
                                g$ls/false$8786$1CmlGO)
                              (g$syntax-violation$8314$1CmlGO
                                '#f
                                '"invalid syntax"
                                g$t$8785$1CmlGO))))
                         (g$syntax-dispatch$8203$1CmlGO
                           g$t$8785$1CmlGO
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8781$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO
                 g$t$8781$1CmlGO
                 '(_ () any . each-any)))))
           g$stx$8778$1CmlGO)))))
   (g$let*-values-macro$8171$1CmlGO
     g$let*-values-macro$11631$1CmlGO
     (case-lambda
       ((g$stx$8834$1CmlGO)
        (letrec* ((g$check$8835$1CmlGO
                    (case-lambda
                      ((g$x*$8859$1CmlGO)
                       (if (not (null? g$x*$8859$1CmlGO))
                         ((case-lambda
                            ((g$x$8860$1CmlGO)
                             (begin
                               (if (not (g$id?$7925$1CmlGO g$x$8860$1CmlGO))
                                 (g$syntax-violation$8314$1CmlGO
                                   '#f
                                   '"not an identifier"
                                   g$stx$8834$1CmlGO
                                   g$x$8860$1CmlGO)
                                 (void))
                               (g$check$8835$1CmlGO (cdr g$x*$8859$1CmlGO))
                               (if (g$bound-id-member?$7932$1CmlGO
                                     g$x$8860$1CmlGO
                                     (cdr g$x*$8859$1CmlGO))
                                 (g$syntax-violation$8314$1CmlGO
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8834$1CmlGO
                                   g$x$8860$1CmlGO)
                                 (void)))))
                          (car g$x*$8859$1CmlGO))
                         (void))))))
          ((case-lambda
             ((g$t$8836$1CmlGO)
              ((case-lambda
                 ((g$ls/false$8837$1CmlGO)
                  (if g$ls/false$8837$1CmlGO
                    (apply
                      (case-lambda
                        ((g$b$8838$1CmlGO g$b*$8839$1CmlGO)
                         (g$cons*$5670$1CmlGO
                           (g$bless$8166$1CmlGO 'let)
                           '()
                           g$b$8838$1CmlGO
                           g$b*$8839$1CmlGO)))
                      g$ls/false$8837$1CmlGO)
                    ((case-lambda
                       ((g$t$8840$1CmlGO)
                        ((case-lambda
                           ((g$ls/false$8841$1CmlGO)
                            (if g$ls/false$8841$1CmlGO
                              (apply
                                (case-lambda
                                  ((g$lhs*$8842$1CmlGO
                                     g$rhs*$8843$1CmlGO
                                     g$b$8844$1CmlGO
                                     g$b*$8845$1CmlGO)
                                   (g$bless$8166$1CmlGO
                                     ((letrec ((g$f$8846$1CmlGO
                                                 (case-lambda
                                                   ((g$lhs*$8847$1CmlGO
                                                      g$rhs*$8848$1CmlGO)
                                                    (if (null?
                                                          g$lhs*$8847$1CmlGO)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8844$1CmlGO
                                                          g$b*$8845$1CmlGO))
                                                      ((case-lambda
                                                         ((g$t$8849$1CmlGO)
                                                          ((case-lambda
                                                             ((g$ls/false$8850$1CmlGO)
                                                              (if g$ls/false$8850$1CmlGO
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8851$1CmlGO)
                                                                     (begin
                                                                       (g$check$8835$1CmlGO
                                                                         g$x*$8851$1CmlGO)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8848$1CmlGO))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8851$1CmlGO
                                                                           (g$f$8846$1CmlGO
                                                                             (cdr g$lhs*$8847$1CmlGO)
                                                                             (cdr g$rhs*$8848$1CmlGO)))))))
                                                                  g$ls/false$8850$1CmlGO)
                                                                ((case-lambda
                                                                   ((g$t$8852$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8853$1CmlGO)
                                                                        (if g$ls/false$8853$1CmlGO
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8854$1CmlGO
                                                                                 g$x$8855$1CmlGO)
                                                                               (begin
                                                                                 (g$check$8835$1CmlGO
                                                                                   (cons
                                                                                     g$x$8855$1CmlGO
                                                                                     g$x*$8854$1CmlGO))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8848$1CmlGO))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8854$1CmlGO
                                                                                       g$x$8855$1CmlGO)
                                                                                     (g$f$8846$1CmlGO
                                                                                       (cdr g$lhs*$8847$1CmlGO)
                                                                                       (cdr g$rhs*$8848$1CmlGO)))))))
                                                                            g$ls/false$8853$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$t$8856$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8857$1CmlGO)
                                                                                  (if g$ls/false$8857$1CmlGO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8858$1CmlGO)
                                                                                         (g$syntax-violation$8314$1CmlGO
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8834$1CmlGO
                                                                                           g$others$8858$1CmlGO)))
                                                                                      g$ls/false$8857$1CmlGO)
                                                                                    (g$syntax-violation$8314$1CmlGO
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8856$1CmlGO))))
                                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                                 g$t$8856$1CmlGO
                                                                                 'any))))
                                                                           g$t$8852$1CmlGO))))
                                                                     (g$syntax-dispatch$8203$1CmlGO
                                                                       g$t$8852$1CmlGO
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8849$1CmlGO))))
                                                           (g$syntax-dispatch$8203$1CmlGO
                                                             g$t$8849$1CmlGO
                                                             'each-any))))
                                                       (car g$lhs*$8847$1CmlGO)))))))
                                        g$f$8846$1CmlGO)
                                      g$lhs*$8842$1CmlGO
                                      g$rhs*$8843$1CmlGO))))
                                g$ls/false$8841$1CmlGO)
                              (g$syntax-violation$8314$1CmlGO
                                '#f
                                '"invalid syntax"
                                g$t$8840$1CmlGO))))
                         (g$syntax-dispatch$8203$1CmlGO
                           g$t$8840$1CmlGO
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8836$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO
                 g$t$8836$1CmlGO
                 '(_ () any . each-any)))))
           g$stx$8834$1CmlGO)))))
   (g$trace-lambda-macro$8172$1CmlGO
     g$trace-lambda-macro$11632$1CmlGO
     (case-lambda
       ((g$stx$8861$1CmlGO)
        ((case-lambda
           ((g$t$8862$1CmlGO)
            ((case-lambda
               ((g$ls/false$8863$1CmlGO)
                (if g$ls/false$8863$1CmlGO
                  (apply
                    (case-lambda
                      ((g$who$8864$1CmlGO
                         g$fmls$8865$1CmlGO
                         g$b$8866$1CmlGO
                         g$b*$8867$1CmlGO)
                       (if (g$valid-bound-ids?$7930$1CmlGO g$fmls$8865$1CmlGO)
                         (g$bless$8166$1CmlGO
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8864$1CmlGO)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8865$1CmlGO
                                 (cons g$b$8866$1CmlGO g$b*$8867$1CmlGO)))))
                         (g$invalid-fmls-error$8168$1CmlGO
                           g$stx$8861$1CmlGO
                           g$fmls$8865$1CmlGO))))
                    g$ls/false$8863$1CmlGO)
                  ((case-lambda
                     ((g$t$8868$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$8869$1CmlGO)
                          (if g$ls/false$8869$1CmlGO
                            (apply
                              (case-lambda
                                ((g$who$8870$1CmlGO
                                   g$fmls$8871$1CmlGO
                                   g$last$8872$1CmlGO
                                   g$b$8873$1CmlGO
                                   g$b*$8874$1CmlGO)
                                 (if (g$valid-bound-ids?$7930$1CmlGO
                                       (cons
                                         g$last$8872$1CmlGO
                                         g$fmls$8871$1CmlGO))
                                   (g$bless$8166$1CmlGO
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8870$1CmlGO)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8871$1CmlGO
                                             g$last$8872$1CmlGO)
                                           (cons
                                             g$b$8873$1CmlGO
                                             g$b*$8874$1CmlGO)))))
                                   (g$invalid-fmls-error$8168$1CmlGO
                                     g$stx$8861$1CmlGO
                                     (append
                                       g$fmls$8871$1CmlGO
                                       g$last$8872$1CmlGO)))))
                              g$ls/false$8869$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$8868$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$8868$1CmlGO
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8862$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8862$1CmlGO
               '(_ any each-any any . each-any)))))
         g$stx$8861$1CmlGO))))
   (g$trace-define-macro$8173$1CmlGO
     g$trace-define-macro$11633$1CmlGO
     (case-lambda
       ((g$stx$8875$1CmlGO)
        ((case-lambda
           ((g$t$8876$1CmlGO)
            ((case-lambda
               ((g$ls/false$8877$1CmlGO)
                (if g$ls/false$8877$1CmlGO
                  (apply
                    (case-lambda
                      ((g$who$8878$1CmlGO
                         g$fmls$8879$1CmlGO
                         g$b$8880$1CmlGO
                         g$b*$8881$1CmlGO)
                       (if (g$valid-bound-ids?$7930$1CmlGO g$fmls$8879$1CmlGO)
                         (g$bless$8166$1CmlGO
                           (list
                             'define
                             g$who$8878$1CmlGO
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8878$1CmlGO)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8879$1CmlGO
                                   (cons g$b$8880$1CmlGO g$b*$8881$1CmlGO))))))
                         (g$invalid-fmls-error$8168$1CmlGO
                           g$stx$8875$1CmlGO
                           g$fmls$8879$1CmlGO))))
                    g$ls/false$8877$1CmlGO)
                  ((case-lambda
                     ((g$t$8882$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$8883$1CmlGO)
                          (if g$ls/false$8883$1CmlGO
                            (apply
                              (case-lambda
                                ((g$who$8884$1CmlGO
                                   g$fmls$8885$1CmlGO
                                   g$last$8886$1CmlGO
                                   g$b$8887$1CmlGO
                                   g$b*$8888$1CmlGO)
                                 (if (g$valid-bound-ids?$7930$1CmlGO
                                       (cons
                                         g$last$8886$1CmlGO
                                         g$fmls$8885$1CmlGO))
                                   (g$bless$8166$1CmlGO
                                     (list
                                       'define
                                       g$who$8884$1CmlGO
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8884$1CmlGO)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8885$1CmlGO
                                               g$last$8886$1CmlGO)
                                             (cons
                                               g$b$8887$1CmlGO
                                               g$b*$8888$1CmlGO))))))
                                   (g$invalid-fmls-error$8168$1CmlGO
                                     g$stx$8875$1CmlGO
                                     (append
                                       g$fmls$8885$1CmlGO
                                       g$last$8886$1CmlGO)))))
                              g$ls/false$8883$1CmlGO)
                            ((case-lambda
                               ((g$t$8889$1CmlGO)
                                ((case-lambda
                                   ((g$ls/false$8890$1CmlGO)
                                    (if g$ls/false$8890$1CmlGO
                                      (apply
                                        (case-lambda
                                          ((g$who$8891$1CmlGO
                                             g$expr$8892$1CmlGO)
                                           (if (g$id?$7925$1CmlGO
                                                 g$who$8891$1CmlGO)
                                             (g$bless$8166$1CmlGO
                                               (list
                                                 'define
                                                 g$who$8891$1CmlGO
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8892$1CmlGO))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8891$1CmlGO)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$8314$1CmlGO
                                               '#f
                                               '"invalid name"
                                               g$stx$8875$1CmlGO))))
                                        g$ls/false$8890$1CmlGO)
                                      (g$syntax-violation$8314$1CmlGO
                                        '#f
                                        '"invalid syntax"
                                        g$t$8889$1CmlGO))))
                                 (g$syntax-dispatch$8203$1CmlGO
                                   g$t$8889$1CmlGO
                                   '(_ any any)))))
                             g$t$8882$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$8882$1CmlGO
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8876$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$8876$1CmlGO
               '(_ (any . each-any) any . each-any)))))
         g$stx$8875$1CmlGO))))
   (g$trace-define-syntax-macro$8174$1CmlGO
     g$trace-define-syntax-macro$11634$1CmlGO
     (case-lambda
       ((g$stx$8893$1CmlGO)
        ((case-lambda
           ((g$t$8894$1CmlGO)
            ((case-lambda
               ((g$ls/false$8895$1CmlGO)
                (if g$ls/false$8895$1CmlGO
                  (apply
                    (case-lambda
                      ((g$who$8896$1CmlGO g$expr$8897$1CmlGO)
                       (if (g$id?$7925$1CmlGO g$who$8896$1CmlGO)
                         (g$bless$8166$1CmlGO
                           (list
                             'define-syntax
                             g$who$8896$1CmlGO
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8896$1CmlGO)
                               g$expr$8897$1CmlGO)))
                         (g$syntax-violation$8314$1CmlGO
                           '#f
                           '"invalid name"
                           g$stx$8893$1CmlGO))))
                    g$ls/false$8895$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8894$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$8894$1CmlGO '(_ any any)))))
         g$stx$8893$1CmlGO))))
   (g$trace-let/rec-syntax$8175$1CmlGO
     g$trace-let/rec-syntax$11635$1CmlGO
     (case-lambda
       ((g$who$8898$1CmlGO)
        (case-lambda
          ((g$stx$8899$1CmlGO)
           ((case-lambda
              ((g$t$8900$1CmlGO)
               ((case-lambda
                  ((g$ls/false$8901$1CmlGO)
                   (if g$ls/false$8901$1CmlGO
                     (apply
                       (case-lambda
                         ((g$lhs*$8902$1CmlGO
                            g$rhs*$8903$1CmlGO
                            g$b$8904$1CmlGO
                            g$b*$8905$1CmlGO)
                          (if (g$valid-bound-ids?$7930$1CmlGO
                                g$lhs*$8902$1CmlGO)
                            ((case-lambda
                               ((g$rhs*$8906$1CmlGO)
                                (g$bless$8166$1CmlGO
                                  (cons
                                    g$who$8898$1CmlGO
                                    (cons
                                      (map list
                                           g$lhs*$8902$1CmlGO
                                           g$rhs*$8906$1CmlGO)
                                      (cons
                                        g$b$8904$1CmlGO
                                        g$b*$8905$1CmlGO))))))
                             (map (case-lambda
                                    ((g$lhs$8907$1CmlGO g$rhs$8908$1CmlGO)
                                     (list
                                       'make-traced-macro
                                       (list 'quote g$lhs$8907$1CmlGO)
                                       g$rhs$8908$1CmlGO)))
                                  g$lhs*$8902$1CmlGO
                                  g$rhs*$8903$1CmlGO))
                            (g$invalid-fmls-error$8168$1CmlGO
                              g$stx$8899$1CmlGO
                              g$lhs*$8902$1CmlGO))))
                       g$ls/false$8901$1CmlGO)
                     (g$syntax-violation$8314$1CmlGO
                       '#f
                       '"invalid syntax"
                       g$t$8900$1CmlGO))))
                (g$syntax-dispatch$8203$1CmlGO
                  g$t$8900$1CmlGO
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8899$1CmlGO))))))
   (g$trace-let-syntax-macro$8176$1CmlGO
     g$trace-let-syntax-macro$11636$1CmlGO
     (g$trace-let/rec-syntax$8175$1CmlGO 'let-syntax))
   (g$trace-letrec-syntax-macro$8177$1CmlGO
     g$trace-letrec-syntax-macro$11637$1CmlGO
     (g$trace-let/rec-syntax$8175$1CmlGO 'letrec-syntax))
   (g$guard-macro$8178$1CmlGO
     g$guard-macro$11638$1CmlGO
     (case-lambda
       ((g$x$8909$1CmlGO)
        (letrec* ((g$gen-clauses$8910$1CmlGO
                    (case-lambda
                      ((g$con$8922$1CmlGO
                         g$outerk$8923$1CmlGO
                         g$clause*$8924$1CmlGO)
                       (letrec* ((g$f$8925$1CmlGO
                                   (case-lambda
                                     ((g$x$8953$1CmlGO g$k$8954$1CmlGO)
                                      ((case-lambda
                                         ((g$t$8955$1CmlGO)
                                          ((case-lambda
                                             ((g$ls/false$8956$1CmlGO)
                                              (if g$ls/false$8956$1CmlGO
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8957$1CmlGO
                                                       g$p$8958$1CmlGO)
                                                     ((case-lambda
                                                        ((g$t$8959$1CmlGO)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8959$1CmlGO
                                                               g$e$8957$1CmlGO))
                                                           (list
                                                             'if
                                                             g$t$8959$1CmlGO
                                                             (list
                                                               g$p$8958$1CmlGO
                                                               g$t$8959$1CmlGO)
                                                             g$k$8954$1CmlGO))))
                                                      (gensym))))
                                                  g$ls/false$8956$1CmlGO)
                                                ((case-lambda
                                                   ((g$t$8960$1CmlGO)
                                                    ((case-lambda
                                                       ((g$ls/false$8961$1CmlGO)
                                                        (if g$ls/false$8961$1CmlGO
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8962$1CmlGO)
                                                               ((case-lambda
                                                                  ((g$t$8963$1CmlGO)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8963$1CmlGO
                                                                         g$e$8962$1CmlGO))
                                                                     (list
                                                                       'if
                                                                       g$t$8963$1CmlGO
                                                                       g$t$8963$1CmlGO
                                                                       g$k$8954$1CmlGO))))
                                                                (gensym))))
                                                            g$ls/false$8961$1CmlGO)
                                                          ((case-lambda
                                                             ((g$t$8964$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$ls/false$8965$1CmlGO)
                                                                  (if g$ls/false$8965$1CmlGO
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8966$1CmlGO
                                                                           g$v$8967$1CmlGO
                                                                           g$v*$8968$1CmlGO)
                                                                         (list
                                                                           'if
                                                                           g$e$8966$1CmlGO
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8967$1CmlGO
                                                                               g$v*$8968$1CmlGO))
                                                                           g$k$8954$1CmlGO)))
                                                                      g$ls/false$8965$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$t$8969$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8970$1CmlGO)
                                                                            (if g$ls/false$8970$1CmlGO
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$8314$1CmlGO
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8953$1CmlGO)))
                                                                                g$ls/false$8970$1CmlGO)
                                                                              (g$syntax-violation$8314$1CmlGO
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8969$1CmlGO))))
                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                           g$t$8969$1CmlGO
                                                                           '_))))
                                                                     g$t$8964$1CmlGO))))
                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                 g$t$8964$1CmlGO
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8960$1CmlGO))))
                                                     (g$syntax-dispatch$8203$1CmlGO
                                                       g$t$8960$1CmlGO
                                                       '(any)))))
                                                 g$t$8955$1CmlGO))))
                                           (g$syntax-dispatch$8203$1CmlGO
                                             g$t$8955$1CmlGO
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8953$1CmlGO))))
                                 (g$f*$8926$1CmlGO
                                   (case-lambda
                                     ((g$x*$8933$1CmlGO)
                                      ((case-lambda
                                         ((g$t$8934$1CmlGO)
                                          ((case-lambda
                                             ((g$ls/false$8935$1CmlGO)
                                              (if g$ls/false$8935$1CmlGO
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8922$1CmlGO)
                                                       '#t)))
                                                  g$ls/false$8935$1CmlGO)
                                                ((case-lambda
                                                   ((g$t$8936$1CmlGO)
                                                    ((case-lambda
                                                       ((g$ls/false$8937$1CmlGO)
                                                        (if g$ls/false$8937$1CmlGO
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8938$1CmlGO
                                                                 g$e*$8939$1CmlGO)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8938$1CmlGO
                                                                     g$e*$8939$1CmlGO))
                                                                 '#f)))
                                                            g$ls/false$8937$1CmlGO)
                                                          ((case-lambda
                                                             ((g$t$8940$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$ls/false$8941$1CmlGO)
                                                                  (if g$ls/false$8941$1CmlGO
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8942$1CmlGO
                                                                           g$cls*$8943$1CmlGO)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8926$1CmlGO
                                                                                g$cls*$8943$1CmlGO)))
                                                                           (case-lambda
                                                                             ((g$e$8946$1CmlGO
                                                                                g$g$8947$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$g$8948$1CmlGO
                                                                                    g$e$8949$1CmlGO)
                                                                                  (values
                                                                                    (g$f$8925$1CmlGO
                                                                                      g$cls$8942$1CmlGO
                                                                                      g$e$8949$1CmlGO)
                                                                                    g$g$8948$1CmlGO)))
                                                                               g$g$8947$1CmlGO
                                                                               g$e$8946$1CmlGO))))))
                                                                      g$ls/false$8941$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$t$8950$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8951$1CmlGO)
                                                                            (if g$ls/false$8951$1CmlGO
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8952$1CmlGO)
                                                                                   (g$syntax-violation$8314$1CmlGO
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8952$1CmlGO)))
                                                                                g$ls/false$8951$1CmlGO)
                                                                              (g$syntax-violation$8314$1CmlGO
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8950$1CmlGO))))
                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                           g$t$8950$1CmlGO
                                                                           'any))))
                                                                     g$t$8940$1CmlGO))))
                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                 g$t$8940$1CmlGO
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8936$1CmlGO))))
                                                     (g$syntax-dispatch$8203$1CmlGO
                                                       g$t$8936$1CmlGO
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8934$1CmlGO))))
                                           (g$syntax-dispatch$8203$1CmlGO
                                             g$t$8934$1CmlGO
                                             '()))))
                                       g$x*$8933$1CmlGO)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8926$1CmlGO g$clause*$8924$1CmlGO)))
                           (case-lambda
                             ((g$code$8929$1CmlGO g$raisek$8930$1CmlGO)
                              ((case-lambda
                                 ((g$raisek$8931$1CmlGO g$code$8932$1CmlGO)
                                  (if g$raisek$8931$1CmlGO
                                    (list
                                      g$outerk$8923$1CmlGO
                                      g$code$8932$1CmlGO)
                                    g$code$8932$1CmlGO)))
                               g$raisek$8930$1CmlGO
                               g$code$8929$1CmlGO)))))))))
          ((case-lambda
             ((g$t$8911$1CmlGO)
              ((case-lambda
                 ((g$ls/false$8912$1CmlGO)
                  (if (if g$ls/false$8912$1CmlGO
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8913$1CmlGO
                                 g$clause*$8914$1CmlGO
                                 g$b$8915$1CmlGO
                                 g$b*$8916$1CmlGO)
                               (g$id?$7925$1CmlGO g$con$8913$1CmlGO)))
                            g$ls/false$8912$1CmlGO))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8917$1CmlGO
                           g$clause*$8918$1CmlGO
                           g$b$8919$1CmlGO
                           g$b*$8920$1CmlGO)
                         ((case-lambda
                            ((g$outerk$8921$1CmlGO)
                             (g$bless$8166$1CmlGO
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8921$1CmlGO)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8917$1CmlGO)
                                           (g$gen-clauses$8910$1CmlGO
                                             g$con$8917$1CmlGO
                                             g$outerk$8921$1CmlGO
                                             g$clause*$8918$1CmlGO))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8919$1CmlGO
                                                 g$b*$8920$1CmlGO))))))))))))
                          (gensym))))
                      g$ls/false$8912$1CmlGO)
                    (g$syntax-violation$8314$1CmlGO
                      '#f
                      '"invalid syntax"
                      g$t$8911$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO
                 g$t$8911$1CmlGO
                 '(_ (any . each-any) any . each-any)))))
           g$x$8909$1CmlGO)))))
   (g$define-enumeration-macro$8179$1CmlGO
     g$define-enumeration-macro$11639$1CmlGO
     (case-lambda
       ((g$stx$8971$1CmlGO)
        (letrec* ((g$set?$8972$1CmlGO
                    (case-lambda
                      ((g$x$8985$1CmlGO)
                       ((case-lambda
                          ((g$t$8986$1CmlGO)
                           (if g$t$8986$1CmlGO
                             g$t$8986$1CmlGO
                             (begin
                               '#f
                               (if (not (g$memq$5662$1CmlGO
                                          (car g$x$8985$1CmlGO)
                                          (cdr g$x$8985$1CmlGO)))
                                 (begin
                                   '#f
                                   (g$set?$8972$1CmlGO (cdr g$x$8985$1CmlGO)))
                                 '#f)))))
                        (null? g$x$8985$1CmlGO)))))
                  (g$remove-dups$8973$1CmlGO
                    (case-lambda
                      ((g$ls$8984$1CmlGO)
                       (if (null? g$ls$8984$1CmlGO)
                         '()
                         (cons
                           (car g$ls$8984$1CmlGO)
                           (g$remove-dups$8973$1CmlGO
                             (g$remq$5675$1CmlGO
                               (car g$ls$8984$1CmlGO)
                               (cdr g$ls$8984$1CmlGO)))))))))
          ((case-lambda
             ((g$t$8974$1CmlGO)
              ((case-lambda
                 ((g$ls/false$8975$1CmlGO)
                  (if (if g$ls/false$8975$1CmlGO
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8976$1CmlGO
                                 g$id*$8977$1CmlGO
                                 g$maker$8978$1CmlGO)
                               (if (g$id?$7925$1CmlGO g$name$8976$1CmlGO)
                                 (if (g$id?$7925$1CmlGO g$maker$8978$1CmlGO)
                                   (begin
                                     '#f
                                     (g$for-all$5668$1CmlGO
                                       g$id?$7925$1CmlGO
                                       g$id*$8977$1CmlGO))
                                   '#f)
                                 '#f)))
                            g$ls/false$8975$1CmlGO))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8979$1CmlGO
                           g$id*$8980$1CmlGO
                           g$maker$8981$1CmlGO)
                         ((case-lambda
                            ((g$name*$8982$1CmlGO g$mk$8983$1CmlGO)
                             (g$bless$8166$1CmlGO
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8983$1CmlGO
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8982$1CmlGO))))
                                 (list
                                   'define-syntax
                                   g$name$8979$1CmlGO
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8982$1CmlGO))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8979$1CmlGO)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8981$1CmlGO
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8981$1CmlGO)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8982$1CmlGO))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8981$1CmlGO)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8983$1CmlGO
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8973$1CmlGO
                            (g$syntax->datum$8317$1CmlGO g$id*$8980$1CmlGO))
                          (gensym))))
                      g$ls/false$8975$1CmlGO)
                    (g$syntax-violation$8314$1CmlGO
                      '#f
                      '"invalid syntax"
                      g$t$8974$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO
                 g$t$8974$1CmlGO
                 '(_ any each-any any)))))
           g$stx$8971$1CmlGO)))))
   (g$time-macro$8180$1CmlGO
     g$time-macro$11640$1CmlGO
     (case-lambda
       ((g$stx$8987$1CmlGO)
        ((case-lambda
           ((g$t$8988$1CmlGO)
            ((case-lambda
               ((g$ls/false$8989$1CmlGO)
                (if g$ls/false$8989$1CmlGO
                  (apply
                    (case-lambda
                      ((g$expr$8990$1CmlGO)
                       ((case-lambda
                          ((g$str$8991$1CmlGO)
                           (g$bless$8166$1CmlGO
                             (list
                               'time-it
                               g$str$8991$1CmlGO
                               (list 'lambda '() g$expr$8990$1CmlGO)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6902$1CmlGO)))
                          (case-lambda
                            ((g$p$8994$1CmlGO g$e$8995$1CmlGO)
                             ((case-lambda
                                ((g$e$8996$1CmlGO g$p$8997$1CmlGO)
                                 (begin
                                   (write
                                     (g$syntax->datum$8317$1CmlGO
                                       g$expr$8990$1CmlGO)
                                     g$p$8997$1CmlGO)
                                   (g$e$8996$1CmlGO))))
                              g$e$8995$1CmlGO
                              g$p$8994$1CmlGO)))))))
                    g$ls/false$8989$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8988$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$8988$1CmlGO '(_ any)))))
         g$stx$8987$1CmlGO))))
   (g$delay-macro$8181$1CmlGO
     g$delay-macro$11641$1CmlGO
     (case-lambda
       ((g$stx$8998$1CmlGO)
        ((case-lambda
           ((g$t$8999$1CmlGO)
            ((case-lambda
               ((g$ls/false$9000$1CmlGO)
                (if g$ls/false$9000$1CmlGO
                  (apply
                    (case-lambda
                      ((g$expr$9001$1CmlGO)
                       (g$bless$8166$1CmlGO
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$9001$1CmlGO)))))
                    g$ls/false$9000$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$8999$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$8999$1CmlGO '(_ any)))))
         g$stx$8998$1CmlGO))))
   (g$assert-macro$8182$1CmlGO
     g$assert-macro$11642$1CmlGO
     (case-lambda
       ((g$stx$9002$1CmlGO)
        ((case-lambda
           ((g$t$9003$1CmlGO)
            ((case-lambda
               ((g$ls/false$9004$1CmlGO)
                (if g$ls/false$9004$1CmlGO
                  (apply
                    (case-lambda
                      ((g$expr$9005$1CmlGO)
                       ((case-lambda
                          ((g$pos$9006$1CmlGO)
                           (g$bless$8166$1CmlGO
                             (list
                               'unless
                               g$expr$9005$1CmlGO
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$9005$1CmlGO)
                                 (list 'quote g$pos$9006$1CmlGO))))))
                        ((case-lambda
                           ((g$t$9007$1CmlGO)
                            (if g$t$9007$1CmlGO
                              g$t$9007$1CmlGO
                              (begin
                                '#f
                                (g$expression-position$8309$1CmlGO
                                  g$expr$9005$1CmlGO)))))
                         (g$expression-position$8309$1CmlGO
                           g$stx$9002$1CmlGO)))))
                    g$ls/false$9004$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$9003$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$9003$1CmlGO '(_ any)))))
         g$stx$9002$1CmlGO))))
   (g$endianness-macro$8183$1CmlGO
     g$endianness-macro$11643$1CmlGO
     (case-lambda
       ((g$stx$9008$1CmlGO)
        ((case-lambda
           ((g$t$9009$1CmlGO)
            ((case-lambda
               ((g$ls/false$9010$1CmlGO)
                (if g$ls/false$9010$1CmlGO
                  (apply
                    (case-lambda
                      ((g$e$9011$1CmlGO)
                       ((case-lambda
                          ((g$t$9012$1CmlGO)
                           (if (g$memv$5663$1CmlGO g$t$9012$1CmlGO '(little))
                             (g$bless$8166$1CmlGO ''little)
                             (if (g$memv$5663$1CmlGO g$t$9012$1CmlGO '(big))
                               (g$bless$8166$1CmlGO ''big)
                               (g$syntax-violation$8314$1CmlGO
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$9008$1CmlGO)))))
                        (g$syntax->datum$8317$1CmlGO g$e$9011$1CmlGO))))
                    g$ls/false$9010$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$9009$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$9009$1CmlGO '(_ any)))))
         g$stx$9008$1CmlGO))))
   (g$identifier-syntax-macro$8184$1CmlGO
     g$identifier-syntax-macro$11644$1CmlGO
     (case-lambda
       ((g$stx$9013$1CmlGO)
        ((case-lambda
           ((g$t$9014$1CmlGO)
            ((case-lambda
               ((g$ls/false$9015$1CmlGO)
                (if g$ls/false$9015$1CmlGO
                  (apply
                    (case-lambda
                      ((g$expr$9016$1CmlGO)
                       (g$bless$8166$1CmlGO
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$9016$1CmlGO))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$9016$1CmlGO)
                                   '(#'(e* ...))))))))))
                    g$ls/false$9015$1CmlGO)
                  ((case-lambda
                     ((g$t$9017$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$9018$1CmlGO)
                          (if (if g$ls/false$9018$1CmlGO
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$9019$1CmlGO
                                         g$expr1$9020$1CmlGO
                                         g$id2$9021$1CmlGO
                                         g$expr2$9022$1CmlGO
                                         g$expr3$9023$1CmlGO)
                                       (if (g$id?$7925$1CmlGO g$id1$9019$1CmlGO)
                                         (if (g$id?$7925$1CmlGO
                                               g$id2$9021$1CmlGO)
                                           (begin
                                             '#f
                                             (g$id?$7925$1CmlGO
                                               g$expr2$9022$1CmlGO))
                                           '#f)
                                         '#f)))
                                    g$ls/false$9018$1CmlGO))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$9024$1CmlGO
                                   g$expr1$9025$1CmlGO
                                   g$id2$9026$1CmlGO
                                   g$expr2$9027$1CmlGO
                                   g$expr3$9028$1CmlGO)
                                 (g$bless$8166$1CmlGO
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$9025$1CmlGO))
                                         (list
                                           (list 'set! 'id g$expr2$9027$1CmlGO)
                                           (list 'syntax g$expr3$9028$1CmlGO))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$9025$1CmlGO
                                               '(e* ...))))))))))
                              g$ls/false$9018$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$9017$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$9017$1CmlGO
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$9014$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$9014$1CmlGO '(_ any)))))
         g$stx$9013$1CmlGO))))
   (g$do-macro$8185$1CmlGO
     g$do-macro$11645$1CmlGO
     (case-lambda
       ((g$stx$9029$1CmlGO)
        (letrec* ((g$bind$9030$1CmlGO
                    (case-lambda
                      ((g$x$9042$1CmlGO)
                       ((case-lambda
                          ((g$t$9043$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9044$1CmlGO)
                               (if g$ls/false$9044$1CmlGO
                                 (apply
                                   (case-lambda
                                     ((g$x$9045$1CmlGO g$init$9046$1CmlGO)
                                      (list
                                        g$x$9045$1CmlGO
                                        g$init$9046$1CmlGO
                                        g$x$9045$1CmlGO)))
                                   g$ls/false$9044$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9047$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9048$1CmlGO)
                                         (if g$ls/false$9048$1CmlGO
                                           (apply
                                             (case-lambda
                                               ((g$x$9049$1CmlGO
                                                  g$init$9050$1CmlGO
                                                  g$step$9051$1CmlGO)
                                                (list
                                                  g$x$9049$1CmlGO
                                                  g$init$9050$1CmlGO
                                                  g$step$9051$1CmlGO)))
                                             g$ls/false$9048$1CmlGO)
                                           ((case-lambda
                                              ((g$t$9052$1CmlGO)
                                               ((case-lambda
                                                  ((g$ls/false$9053$1CmlGO)
                                                   (if g$ls/false$9053$1CmlGO
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$8314$1CmlGO
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$9029$1CmlGO)))
                                                       g$ls/false$9053$1CmlGO)
                                                     (g$syntax-violation$8314$1CmlGO
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9052$1CmlGO))))
                                                (g$syntax-dispatch$8203$1CmlGO
                                                  g$t$9052$1CmlGO
                                                  '_))))
                                            g$t$9047$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9047$1CmlGO
                                        '(any any any)))))
                                  g$t$9043$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9043$1CmlGO
                              '(any any)))))
                        g$x$9042$1CmlGO)))))
          ((case-lambda
             ((g$t$9031$1CmlGO)
              ((case-lambda
                 ((g$ls/false$9032$1CmlGO)
                  (if g$ls/false$9032$1CmlGO
                    (apply
                      (case-lambda
                        ((g$binding*$9033$1CmlGO
                           g$test$9034$1CmlGO
                           g$expr*$9035$1CmlGO
                           g$command*$9036$1CmlGO)
                         ((case-lambda
                            ((g$t$9037$1CmlGO)
                             ((case-lambda
                                ((g$ls/false$9038$1CmlGO)
                                 (if g$ls/false$9038$1CmlGO
                                   (apply
                                     (case-lambda
                                       ((g$x*$9039$1CmlGO
                                          g$init*$9040$1CmlGO
                                          g$step*$9041$1CmlGO)
                                        (if (g$valid-bound-ids?$7930$1CmlGO
                                              g$x*$9039$1CmlGO)
                                          (g$bless$8166$1CmlGO
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$9039$1CmlGO
                                                    (list
                                                      'if
                                                      g$test$9034$1CmlGO
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$9035$1CmlGO))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$9036$1CmlGO
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$9041$1CmlGO))))))))
                                              (cons 'loop g$init*$9040$1CmlGO)))
                                          (g$syntax-violation$8314$1CmlGO
                                            '#f
                                            '"invalid bindings"
                                            g$stx$9029$1CmlGO))))
                                     g$ls/false$9038$1CmlGO)
                                   (g$syntax-violation$8314$1CmlGO
                                     '#f
                                     '"invalid syntax"
                                     g$t$9037$1CmlGO))))
                              (g$syntax-dispatch$8203$1CmlGO
                                g$t$9037$1CmlGO
                                '#(each (any any any))))))
                          (map g$bind$9030$1CmlGO g$binding*$9033$1CmlGO))))
                      g$ls/false$9032$1CmlGO)
                    (g$syntax-violation$8314$1CmlGO
                      '#f
                      '"invalid syntax"
                      g$t$9031$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO
                 g$t$9031$1CmlGO
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$9029$1CmlGO)))))
   (g$let*-macro$8186$1CmlGO
     g$let*-macro$11646$1CmlGO
     (case-lambda
       ((g$stx$9054$1CmlGO)
        ((case-lambda
           ((g$t$9055$1CmlGO)
            ((case-lambda
               ((g$ls/false$9056$1CmlGO)
                (if (if g$ls/false$9056$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$9057$1CmlGO
                               g$rhs*$9058$1CmlGO
                               g$b$9059$1CmlGO
                               g$b*$9060$1CmlGO)
                             (g$for-all$5668$1CmlGO
                               g$id?$7925$1CmlGO
                               g$lhs*$9057$1CmlGO)))
                          g$ls/false$9056$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$9061$1CmlGO
                         g$rhs*$9062$1CmlGO
                         g$b$9063$1CmlGO
                         g$b*$9064$1CmlGO)
                       (g$bless$8166$1CmlGO
                         ((letrec ((g$f$9065$1CmlGO
                                     (case-lambda
                                       ((g$x*$9066$1CmlGO)
                                        (if (null? g$x*$9066$1CmlGO)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$9063$1CmlGO
                                                g$b*$9064$1CmlGO)))
                                          (list
                                            'let
                                            (list (car g$x*$9066$1CmlGO))
                                            (g$f$9065$1CmlGO
                                              (cdr g$x*$9066$1CmlGO))))))))
                            g$f$9065$1CmlGO)
                          (map list g$lhs*$9061$1CmlGO g$rhs*$9062$1CmlGO)))))
                    g$ls/false$9056$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$9055$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$9055$1CmlGO
               '(_ #(each (any any)) any . each-any)))))
         g$stx$9054$1CmlGO))))
   (g$or-macro$8187$1CmlGO
     g$or-macro$11647$1CmlGO
     (case-lambda
       ((g$stx$9067$1CmlGO)
        ((case-lambda
           ((g$t$9068$1CmlGO)
            ((case-lambda
               ((g$ls/false$9069$1CmlGO)
                (if g$ls/false$9069$1CmlGO
                  (apply (case-lambda (() '#f)) g$ls/false$9069$1CmlGO)
                  ((case-lambda
                     ((g$t$9070$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$9071$1CmlGO)
                          (if g$ls/false$9071$1CmlGO
                            (apply
                              (case-lambda
                                ((g$e$9072$1CmlGO g$e*$9073$1CmlGO)
                                 (g$bless$8166$1CmlGO
                                   ((letrec ((g$f$9074$1CmlGO
                                               (case-lambda
                                                 ((g$e$9075$1CmlGO
                                                    g$e*$9076$1CmlGO)
                                                  (if (null? g$e*$9076$1CmlGO)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$9075$1CmlGO)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$9075$1CmlGO))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$9074$1CmlGO
                                                          (car g$e*$9076$1CmlGO)
                                                          (cdr g$e*$9076$1CmlGO)))))))))
                                      g$f$9074$1CmlGO)
                                    g$e$9072$1CmlGO
                                    g$e*$9073$1CmlGO))))
                              g$ls/false$9071$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$9070$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$9070$1CmlGO
                         '(_ any . each-any)))))
                   g$t$9068$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$9068$1CmlGO '(_)))))
         g$stx$9067$1CmlGO))))
   (g$and-macro$8188$1CmlGO
     g$and-macro$11648$1CmlGO
     (case-lambda
       ((g$stx$9077$1CmlGO)
        ((case-lambda
           ((g$t$9078$1CmlGO)
            ((case-lambda
               ((g$ls/false$9079$1CmlGO)
                (if g$ls/false$9079$1CmlGO
                  (apply (case-lambda (() '#t)) g$ls/false$9079$1CmlGO)
                  ((case-lambda
                     ((g$t$9080$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$9081$1CmlGO)
                          (if g$ls/false$9081$1CmlGO
                            (apply
                              (case-lambda
                                ((g$e$9082$1CmlGO g$e*$9083$1CmlGO)
                                 (g$bless$8166$1CmlGO
                                   ((letrec ((g$f$9084$1CmlGO
                                               (case-lambda
                                                 ((g$e$9085$1CmlGO
                                                    g$e*$9086$1CmlGO)
                                                  (if (null? g$e*$9086$1CmlGO)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$9085$1CmlGO)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$9085$1CmlGO
                                                        (cons
                                                          (g$f$9084$1CmlGO
                                                            (car g$e*$9086$1CmlGO)
                                                            (cdr g$e*$9086$1CmlGO))
                                                          '(#f)))))))))
                                      g$f$9084$1CmlGO)
                                    g$e$9082$1CmlGO
                                    g$e*$9083$1CmlGO))))
                              g$ls/false$9081$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$9080$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$9080$1CmlGO
                         '(_ any . each-any)))))
                   g$t$9078$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$9078$1CmlGO '(_)))))
         g$stx$9077$1CmlGO))))
   (g$cond-macro$8189$1CmlGO
     g$cond-macro$11649$1CmlGO
     (case-lambda
       ((g$stx$9087$1CmlGO)
        ((case-lambda
           ((g$t$9088$1CmlGO)
            ((case-lambda
               ((g$ls/false$9089$1CmlGO)
                (if g$ls/false$9089$1CmlGO
                  (apply
                    (case-lambda
                      ((g$cls$9090$1CmlGO g$cls*$9091$1CmlGO)
                       (g$bless$8166$1CmlGO
                         ((letrec ((g$f$9092$1CmlGO
                                     (case-lambda
                                       ((g$cls$9093$1CmlGO g$cls*$9094$1CmlGO)
                                        (if (null? g$cls*$9094$1CmlGO)
                                          ((case-lambda
                                             ((g$t$9095$1CmlGO)
                                              ((case-lambda
                                                 ((g$ls/false$9096$1CmlGO)
                                                  (if g$ls/false$9096$1CmlGO
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$9097$1CmlGO
                                                           g$e*$9098$1CmlGO)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$9097$1CmlGO
                                                             g$e*$9098$1CmlGO))))
                                                      g$ls/false$9096$1CmlGO)
                                                    ((case-lambda
                                                       ((g$t$9099$1CmlGO)
                                                        ((case-lambda
                                                           ((g$ls/false$9100$1CmlGO)
                                                            (if g$ls/false$9100$1CmlGO
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$9101$1CmlGO
                                                                     g$p$9102$1CmlGO)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$9101$1CmlGO))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$9102$1CmlGO
                                                                         '(t))))))
                                                                g$ls/false$9100$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$t$9103$1CmlGO)
                                                                  ((case-lambda
                                                                     ((g$ls/false$9104$1CmlGO)
                                                                      (if g$ls/false$9104$1CmlGO
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$9105$1CmlGO)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$9105$1CmlGO
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$9104$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$t$9106$1CmlGO)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9107$1CmlGO)
                                                                                (if g$ls/false$9107$1CmlGO
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$9108$1CmlGO
                                                                                         g$e*$9109$1CmlGO)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$9108$1CmlGO
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$9109$1CmlGO))))
                                                                                    g$ls/false$9107$1CmlGO)
                                                                                  ((case-lambda
                                                                                     ((g$t$9110$1CmlGO)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9111$1CmlGO)
                                                                                          (if g$ls/false$9111$1CmlGO
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8314$1CmlGO
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$9087$1CmlGO)))
                                                                                              g$ls/false$9111$1CmlGO)
                                                                                            (g$syntax-violation$8314$1CmlGO
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9110$1CmlGO))))
                                                                                       (g$syntax-dispatch$8203$1CmlGO
                                                                                         g$t$9110$1CmlGO
                                                                                         '_))))
                                                                                   g$t$9106$1CmlGO))))
                                                                             (g$syntax-dispatch$8203$1CmlGO
                                                                               g$t$9106$1CmlGO
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$9103$1CmlGO))))
                                                                   (g$syntax-dispatch$8203$1CmlGO
                                                                     g$t$9103$1CmlGO
                                                                     '(any)))))
                                                               g$t$9099$1CmlGO))))
                                                         (g$syntax-dispatch$8203$1CmlGO
                                                           g$t$9099$1CmlGO
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$9095$1CmlGO))))
                                               (g$syntax-dispatch$8203$1CmlGO
                                                 g$t$9095$1CmlGO
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$9093$1CmlGO)
                                          ((case-lambda
                                             ((g$t$9112$1CmlGO)
                                              ((case-lambda
                                                 ((g$ls/false$9113$1CmlGO)
                                                  (if g$ls/false$9113$1CmlGO
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$9114$1CmlGO
                                                           g$e*$9115$1CmlGO)
                                                         (g$syntax-violation$8314$1CmlGO
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$9087$1CmlGO)))
                                                      g$ls/false$9113$1CmlGO)
                                                    ((case-lambda
                                                       ((g$t$9116$1CmlGO)
                                                        ((case-lambda
                                                           ((g$ls/false$9117$1CmlGO)
                                                            (if g$ls/false$9117$1CmlGO
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$9118$1CmlGO
                                                                     g$p$9119$1CmlGO)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$9118$1CmlGO))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$9119$1CmlGO
                                                                         '(t))
                                                                       (g$f$9092$1CmlGO
                                                                         (car g$cls*$9094$1CmlGO)
                                                                         (cdr g$cls*$9094$1CmlGO))))))
                                                                g$ls/false$9117$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$t$9120$1CmlGO)
                                                                  ((case-lambda
                                                                     ((g$ls/false$9121$1CmlGO)
                                                                      (if g$ls/false$9121$1CmlGO
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$9122$1CmlGO)
                                                                             (list
                                                                               'or
                                                                               g$e$9122$1CmlGO
                                                                               (g$f$9092$1CmlGO
                                                                                 (car g$cls*$9094$1CmlGO)
                                                                                 (cdr g$cls*$9094$1CmlGO)))))
                                                                          g$ls/false$9121$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$t$9123$1CmlGO)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9124$1CmlGO)
                                                                                (if g$ls/false$9124$1CmlGO
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$9125$1CmlGO
                                                                                         g$e*$9126$1CmlGO)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$9125$1CmlGO
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$9126$1CmlGO)
                                                                                         (g$f$9092$1CmlGO
                                                                                           (car g$cls*$9094$1CmlGO)
                                                                                           (cdr g$cls*$9094$1CmlGO)))))
                                                                                    g$ls/false$9124$1CmlGO)
                                                                                  ((case-lambda
                                                                                     ((g$t$9127$1CmlGO)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9128$1CmlGO)
                                                                                          (if g$ls/false$9128$1CmlGO
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8314$1CmlGO
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$9087$1CmlGO)))
                                                                                              g$ls/false$9128$1CmlGO)
                                                                                            (g$syntax-violation$8314$1CmlGO
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9127$1CmlGO))))
                                                                                       (g$syntax-dispatch$8203$1CmlGO
                                                                                         g$t$9127$1CmlGO
                                                                                         '_))))
                                                                                   g$t$9123$1CmlGO))))
                                                                             (g$syntax-dispatch$8203$1CmlGO
                                                                               g$t$9123$1CmlGO
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$9120$1CmlGO))))
                                                                   (g$syntax-dispatch$8203$1CmlGO
                                                                     g$t$9120$1CmlGO
                                                                     '(any)))))
                                                               g$t$9116$1CmlGO))))
                                                         (g$syntax-dispatch$8203$1CmlGO
                                                           g$t$9116$1CmlGO
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$9112$1CmlGO))))
                                               (g$syntax-dispatch$8203$1CmlGO
                                                 g$t$9112$1CmlGO
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$9093$1CmlGO))))))
                            g$f$9092$1CmlGO)
                          g$cls$9090$1CmlGO
                          g$cls*$9091$1CmlGO))))
                    g$ls/false$9089$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$9088$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$9088$1CmlGO
               '(_ any . each-any)))))
         g$stx$9087$1CmlGO))))
   (g$do-include$8190$1CmlGO
     g$do-include$11650$1CmlGO
     (case-lambda
       ((g$stx$9129$1CmlGO g$id$9130$1CmlGO g$filename$9131$1CmlGO)
        ((case-lambda
           ((g$filename$9132$1CmlGO)
            (begin
              (if (not (if (string? g$filename$9132$1CmlGO)
                         (begin '#f (g$id?$7925$1CmlGO g$id$9130$1CmlGO))
                         '#f))
                (g$syntax-violation$8314$1CmlGO
                  '#f
                  '"invalid syntax"
                  g$stx$9129$1CmlGO)
                (void))
              (cons
                (g$bless$8166$1CmlGO 'begin)
                (g$with-input-from-file$6936$1CmlGO
                  g$filename$9132$1CmlGO
                  (case-lambda
                    (()
                     ((letrec ((g$f$9133$1CmlGO
                                 (case-lambda
                                   ((g$ls$9134$1CmlGO)
                                    ((case-lambda
                                       ((g$x$9135$1CmlGO)
                                        (if (eof-object? g$x$9135$1CmlGO)
                                          (reverse g$ls$9134$1CmlGO)
                                          (g$f$9133$1CmlGO
                                            (cons
                                              (g$datum->stx$7908$1CmlGO
                                                g$id$9130$1CmlGO
                                                g$x$9135$1CmlGO)
                                              g$ls$9134$1CmlGO)))))
                                     (read-annotated))))))
                        g$f$9133$1CmlGO)
                      '()))))))))
         (g$stx->datum$7936$1CmlGO g$filename$9131$1CmlGO)))))
   (g$include-macro$8191$1CmlGO
     g$include-macro$11651$1CmlGO
     (case-lambda
       ((g$e$9136$1CmlGO)
        ((case-lambda
           ((g$t$9137$1CmlGO)
            ((case-lambda
               ((g$ls/false$9138$1CmlGO)
                (if g$ls/false$9138$1CmlGO
                  (apply
                    (case-lambda
                      ((g$id$9139$1CmlGO g$filename$9140$1CmlGO)
                       (g$do-include$8190$1CmlGO
                         g$e$9136$1CmlGO
                         g$id$9139$1CmlGO
                         g$filename$9140$1CmlGO)))
                    g$ls/false$9138$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$9137$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$9137$1CmlGO '(any any)))))
         g$e$9136$1CmlGO))))
   (g$include-into-macro$8192$1CmlGO
     g$include-into-macro$11652$1CmlGO
     (case-lambda
       ((g$e$9141$1CmlGO)
        ((case-lambda
           ((g$t$9142$1CmlGO)
            ((case-lambda
               ((g$ls/false$9143$1CmlGO)
                (if g$ls/false$9143$1CmlGO
                  (apply
                    (case-lambda
                      ((g$id$9144$1CmlGO g$filename$9145$1CmlGO)
                       (g$do-include$8190$1CmlGO
                         g$e$9141$1CmlGO
                         g$id$9144$1CmlGO
                         g$filename$9145$1CmlGO)))
                    g$ls/false$9143$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$9142$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$9142$1CmlGO '(_ any any)))))
         g$e$9141$1CmlGO))))
   (g$syntax-rules-macro$8193$1CmlGO
     g$syntax-rules-macro$11653$1CmlGO
     (case-lambda
       ((g$e$9146$1CmlGO)
        ((case-lambda
           ((g$t$9147$1CmlGO)
            ((case-lambda
               ((g$ls/false$9148$1CmlGO)
                (if g$ls/false$9148$1CmlGO
                  (apply
                    (case-lambda
                      ((g$lits$9149$1CmlGO
                         g$pat*$9150$1CmlGO
                         g$tmp*$9151$1CmlGO)
                       (begin
                         (g$verify-literals$8206$1CmlGO
                           g$lits$9149$1CmlGO
                           g$e$9146$1CmlGO)
                         (g$bless$8166$1CmlGO
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$9149$1CmlGO
                                   (map (case-lambda
                                          ((g$pat$9152$1CmlGO g$tmp$9153$1CmlGO)
                                           ((case-lambda
                                              ((g$t$9154$1CmlGO)
                                               ((case-lambda
                                                  ((g$ls/false$9155$1CmlGO)
                                                   (if g$ls/false$9155$1CmlGO
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$9156$1CmlGO)
                                                          (list
                                                            (cons
                                                              'g
                                                              g$rest$9156$1CmlGO)
                                                            (list
                                                              'syntax
                                                              g$tmp$9153$1CmlGO))))
                                                       g$ls/false$9155$1CmlGO)
                                                     ((case-lambda
                                                        ((g$t$9157$1CmlGO)
                                                         ((case-lambda
                                                            ((g$ls/false$9158$1CmlGO)
                                                             (if g$ls/false$9158$1CmlGO
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8314$1CmlGO
                                                                      '#f
                                                                      '"invalid syntax-rules pattern"
                                                                      g$e$9146$1CmlGO
                                                                      g$pat$9152$1CmlGO)))
                                                                 g$ls/false$9158$1CmlGO)
                                                               (g$syntax-violation$8314$1CmlGO
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$9157$1CmlGO))))
                                                          (g$syntax-dispatch$8203$1CmlGO
                                                            g$t$9157$1CmlGO
                                                            '_))))
                                                      g$t$9154$1CmlGO))))
                                                (g$syntax-dispatch$8203$1CmlGO
                                                  g$t$9154$1CmlGO
                                                  '(_ . any)))))
                                            g$pat$9152$1CmlGO)))
                                        g$pat*$9150$1CmlGO
                                        g$tmp*$9151$1CmlGO)))))))))
                    g$ls/false$9148$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$9147$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$9147$1CmlGO
               '(_ each-any . #(each (any any)))))))
         g$e$9146$1CmlGO))))
   (g$quasiquote-macro$8194$1CmlGO
     g$quasiquote-macro$11654$1CmlGO
     ((case-lambda
        (()
         (letrec* ((g$datum$9159$1CmlGO
                     (case-lambda
                       ((g$x$9290$1CmlGO)
                        (list
                          (g$scheme-stx$8146$1CmlGO 'quote)
                          (g$mkstx$7913$1CmlGO g$x$9290$1CmlGO '() '() '())))))
                   (g$quasicons*$9175$1CmlGO
                     (case-lambda
                       ((g$x$9286$1CmlGO g$y$9287$1CmlGO)
                        ((letrec ((g$f$9288$1CmlGO
                                    (case-lambda
                                      ((g$x$9289$1CmlGO)
                                       (if (null? g$x$9289$1CmlGO)
                                         g$y$9287$1CmlGO
                                         (g$quasicons$9176$1CmlGO
                                           (car g$x$9289$1CmlGO)
                                           (g$f$9288$1CmlGO
                                             (cdr g$x$9289$1CmlGO))))))))
                           g$f$9288$1CmlGO)
                         g$x$9286$1CmlGO))))
                   (g$quasicons$9176$1CmlGO
                     (case-lambda
                       ((g$x$9267$1CmlGO g$y$9268$1CmlGO)
                        ((case-lambda
                           ((g$t$9269$1CmlGO)
                            ((case-lambda
                               ((g$ls/false$9270$1CmlGO)
                                (if g$ls/false$9270$1CmlGO
                                  (apply
                                    (case-lambda
                                      ((g$dy$9271$1CmlGO)
                                       ((case-lambda
                                          ((g$t$9272$1CmlGO)
                                           ((case-lambda
                                              ((g$ls/false$9273$1CmlGO)
                                               (if g$ls/false$9273$1CmlGO
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$9274$1CmlGO)
                                                      (list
                                                        (g$scheme-stx$8146$1CmlGO
                                                          'quote)
                                                        (cons
                                                          g$dx$9274$1CmlGO
                                                          g$dy$9271$1CmlGO))))
                                                   g$ls/false$9273$1CmlGO)
                                                 ((case-lambda
                                                    ((g$t$9275$1CmlGO)
                                                     ((case-lambda
                                                        ((g$ls/false$9276$1CmlGO)
                                                         (if g$ls/false$9276$1CmlGO
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$9277$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9278$1CmlGO)
                                                                        (if g$ls/false$9278$1CmlGO
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$8146$1CmlGO
                                                                                   'list)
                                                                                 g$x$9267$1CmlGO)))
                                                                            g$ls/false$9278$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$t$9279$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9280$1CmlGO)
                                                                                  (if g$ls/false$9280$1CmlGO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$8146$1CmlGO
                                                                                             'cons)
                                                                                           g$x$9267$1CmlGO
                                                                                           g$y$9268$1CmlGO)))
                                                                                      g$ls/false$9280$1CmlGO)
                                                                                    (g$syntax-violation$8314$1CmlGO
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9279$1CmlGO))))
                                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                                 g$t$9279$1CmlGO
                                                                                 '_))))
                                                                           g$t$9277$1CmlGO))))
                                                                     (g$syntax-dispatch$8203$1CmlGO
                                                                       g$t$9277$1CmlGO
                                                                       '()))))
                                                                 g$dy$9271$1CmlGO)))
                                                             g$ls/false$9276$1CmlGO)
                                                           (g$syntax-violation$8314$1CmlGO
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$9275$1CmlGO))))
                                                      (g$syntax-dispatch$8203$1CmlGO
                                                        g$t$9275$1CmlGO
                                                        '_))))
                                                  g$t$9272$1CmlGO))))
                                            (g$syntax-dispatch$8203$1CmlGO
                                              g$t$9272$1CmlGO
                                              '(#(scheme-id quote) any)))))
                                        g$x$9267$1CmlGO)))
                                    g$ls/false$9270$1CmlGO)
                                  ((case-lambda
                                     ((g$t$9281$1CmlGO)
                                      ((case-lambda
                                         ((g$ls/false$9282$1CmlGO)
                                          (if g$ls/false$9282$1CmlGO
                                            (apply
                                              (case-lambda
                                                ((g$stuff$9283$1CmlGO)
                                                 (g$cons*$5670$1CmlGO
                                                   (g$scheme-stx$8146$1CmlGO
                                                     'list)
                                                   g$x$9267$1CmlGO
                                                   g$stuff$9283$1CmlGO)))
                                              g$ls/false$9282$1CmlGO)
                                            ((case-lambda
                                               ((g$t$9284$1CmlGO)
                                                ((case-lambda
                                                   ((g$ls/false$9285$1CmlGO)
                                                    (if g$ls/false$9285$1CmlGO
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$8146$1CmlGO
                                                               'cons)
                                                             g$x$9267$1CmlGO
                                                             g$y$9268$1CmlGO)))
                                                        g$ls/false$9285$1CmlGO)
                                                      (g$syntax-violation$8314$1CmlGO
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$9284$1CmlGO))))
                                                 (g$syntax-dispatch$8203$1CmlGO
                                                   g$t$9284$1CmlGO
                                                   '_))))
                                             g$t$9281$1CmlGO))))
                                       (g$syntax-dispatch$8203$1CmlGO
                                         g$t$9281$1CmlGO
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$9269$1CmlGO))))
                             (g$syntax-dispatch$8203$1CmlGO
                               g$t$9269$1CmlGO
                               '(#(scheme-id quote) any)))))
                         g$y$9268$1CmlGO))))
                   (g$quasiappend$9177$1CmlGO
                     (case-lambda
                       ((g$x$9254$1CmlGO g$y$9255$1CmlGO)
                        ((case-lambda
                           ((g$ls$9256$1CmlGO)
                            (if (null? g$ls$9256$1CmlGO)
                              (list (g$scheme-stx$8146$1CmlGO 'quote) '())
                              (if (null? (cdr g$ls$9256$1CmlGO))
                                (car g$ls$9256$1CmlGO)
                                (g$cons*$5670$1CmlGO
                                  (g$scheme-stx$8146$1CmlGO 'append)
                                  g$ls$9256$1CmlGO)))))
                         ((letrec ((g$f$9257$1CmlGO
                                     (case-lambda
                                       ((g$x$9258$1CmlGO)
                                        (if (null? g$x$9258$1CmlGO)
                                          ((case-lambda
                                             ((g$t$9259$1CmlGO)
                                              ((case-lambda
                                                 ((g$ls/false$9260$1CmlGO)
                                                  (if g$ls/false$9260$1CmlGO
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$9260$1CmlGO)
                                                    ((case-lambda
                                                       ((g$t$9261$1CmlGO)
                                                        ((case-lambda
                                                           ((g$ls/false$9262$1CmlGO)
                                                            (if g$ls/false$9262$1CmlGO
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$9255$1CmlGO)))
                                                                g$ls/false$9262$1CmlGO)
                                                              (g$syntax-violation$8314$1CmlGO
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9261$1CmlGO))))
                                                         (g$syntax-dispatch$8203$1CmlGO
                                                           g$t$9261$1CmlGO
                                                           '_))))
                                                     g$t$9259$1CmlGO))))
                                               (g$syntax-dispatch$8203$1CmlGO
                                                 g$t$9259$1CmlGO
                                                 '(#(scheme-id quote) ())))))
                                           g$y$9255$1CmlGO)
                                          ((case-lambda
                                             ((g$t$9263$1CmlGO)
                                              ((case-lambda
                                                 ((g$ls/false$9264$1CmlGO)
                                                  (if g$ls/false$9264$1CmlGO
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$9257$1CmlGO
                                                           (cdr g$x$9258$1CmlGO))))
                                                      g$ls/false$9264$1CmlGO)
                                                    ((case-lambda
                                                       ((g$t$9265$1CmlGO)
                                                        ((case-lambda
                                                           ((g$ls/false$9266$1CmlGO)
                                                            (if g$ls/false$9266$1CmlGO
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$9258$1CmlGO)
                                                                     (g$f$9257$1CmlGO
                                                                       (cdr g$x$9258$1CmlGO)))))
                                                                g$ls/false$9266$1CmlGO)
                                                              (g$syntax-violation$8314$1CmlGO
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9265$1CmlGO))))
                                                         (g$syntax-dispatch$8203$1CmlGO
                                                           g$t$9265$1CmlGO
                                                           '_))))
                                                     g$t$9263$1CmlGO))))
                                               (g$syntax-dispatch$8203$1CmlGO
                                                 g$t$9263$1CmlGO
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$9258$1CmlGO)))))))
                            g$f$9257$1CmlGO)
                          g$x$9254$1CmlGO)))))
                   (g$quasivector$9178$1CmlGO
                     (case-lambda
                       ((g$x$9229$1CmlGO)
                        ((case-lambda
                           ((g$pat-x$9230$1CmlGO)
                            ((case-lambda
                               ((g$t$9231$1CmlGO)
                                ((case-lambda
                                   ((g$ls/false$9232$1CmlGO)
                                    (if g$ls/false$9232$1CmlGO
                                      (apply
                                        (case-lambda
                                          ((g$x*$9233$1CmlGO)
                                           (list
                                             (g$scheme-stx$8146$1CmlGO 'quote)
                                             (list->vector g$x*$9233$1CmlGO))))
                                        g$ls/false$9232$1CmlGO)
                                      ((case-lambda
                                         ((g$t$9234$1CmlGO)
                                          ((case-lambda
                                             ((g$ls/false$9235$1CmlGO)
                                              (if g$ls/false$9235$1CmlGO
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$9236$1CmlGO
                                                                 (case-lambda
                                                                   ((g$x$9237$1CmlGO
                                                                      g$k$9238$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$t$9239$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9240$1CmlGO)
                                                                            (if g$ls/false$9240$1CmlGO
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$9241$1CmlGO)
                                                                                   (g$k$9238$1CmlGO
                                                                                     (map (case-lambda
                                                                                            ((g$x$9242$1CmlGO)
                                                                                             (list
                                                                                               (g$scheme-stx$8146$1CmlGO
                                                                                                 'quote)
                                                                                               g$x$9242$1CmlGO)))
                                                                                          g$x*$9241$1CmlGO))))
                                                                                g$ls/false$9240$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$t$9243$1CmlGO)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$9244$1CmlGO)
                                                                                      (if g$ls/false$9244$1CmlGO
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$9245$1CmlGO)
                                                                                             (g$k$9238$1CmlGO
                                                                                               g$x*$9245$1CmlGO)))
                                                                                          g$ls/false$9244$1CmlGO)
                                                                                        ((case-lambda
                                                                                           ((g$t$9246$1CmlGO)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$9247$1CmlGO)
                                                                                                (if g$ls/false$9247$1CmlGO
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$9248$1CmlGO
                                                                                                         g$y$9249$1CmlGO)
                                                                                                       (g$f$9236$1CmlGO
                                                                                                         g$y$9249$1CmlGO
                                                                                                         (case-lambda
                                                                                                           ((g$ls$9250$1CmlGO)
                                                                                                            (g$k$9238$1CmlGO
                                                                                                              (cons
                                                                                                                g$x$9248$1CmlGO
                                                                                                                g$ls$9250$1CmlGO)))))))
                                                                                                    g$ls/false$9247$1CmlGO)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$9251$1CmlGO)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$9252$1CmlGO)
                                                                                                          (if g$ls/false$9252$1CmlGO
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$8146$1CmlGO
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$9230$1CmlGO)))
                                                                                                              g$ls/false$9252$1CmlGO)
                                                                                                            (g$syntax-violation$8314$1CmlGO
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$9251$1CmlGO))))
                                                                                                       (g$syntax-dispatch$8203$1CmlGO
                                                                                                         g$t$9251$1CmlGO
                                                                                                         '_))))
                                                                                                   g$t$9246$1CmlGO))))
                                                                                             (g$syntax-dispatch$8203$1CmlGO
                                                                                               g$t$9246$1CmlGO
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$9243$1CmlGO))))
                                                                                   (g$syntax-dispatch$8203$1CmlGO
                                                                                     g$t$9243$1CmlGO
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$9239$1CmlGO))))
                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                           g$t$9239$1CmlGO
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$9237$1CmlGO)))))
                                                        g$f$9236$1CmlGO)
                                                      g$x$9229$1CmlGO
                                                      (case-lambda
                                                        ((g$ls$9253$1CmlGO)
                                                         (g$cons*$5670$1CmlGO
                                                           (g$scheme-stx$8146$1CmlGO
                                                             'vector)
                                                           g$ls$9253$1CmlGO))))))
                                                  g$ls/false$9235$1CmlGO)
                                                (g$syntax-violation$8314$1CmlGO
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$9234$1CmlGO))))
                                           (g$syntax-dispatch$8203$1CmlGO
                                             g$t$9234$1CmlGO
                                             '_))))
                                       g$t$9231$1CmlGO))))
                                 (g$syntax-dispatch$8203$1CmlGO
                                   g$t$9231$1CmlGO
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$9230$1CmlGO)))
                         g$x$9229$1CmlGO))))
                   (g$vquasi$9179$1CmlGO
                     (case-lambda
                       ((g$p$9212$1CmlGO g$lev$9213$1CmlGO)
                        ((case-lambda
                           ((g$t$9214$1CmlGO)
                            ((case-lambda
                               ((g$ls/false$9215$1CmlGO)
                                (if g$ls/false$9215$1CmlGO
                                  (apply
                                    (case-lambda
                                      ((g$p$9216$1CmlGO g$q$9217$1CmlGO)
                                       ((case-lambda
                                          ((g$t$9218$1CmlGO)
                                           ((case-lambda
                                              ((g$ls/false$9219$1CmlGO)
                                               (if g$ls/false$9219$1CmlGO
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9220$1CmlGO)
                                                      (if (= g$lev$9213$1CmlGO
                                                             '0)
                                                        (g$quasicons*$9175$1CmlGO
                                                          g$p$9220$1CmlGO
                                                          (g$vquasi$9179$1CmlGO
                                                            g$q$9217$1CmlGO
                                                            g$lev$9213$1CmlGO))
                                                        (g$quasicons$9176$1CmlGO
                                                          (g$quasicons$9176$1CmlGO
                                                            (g$datum$9159$1CmlGO
                                                              'unquote)
                                                            (g$quasi$9180$1CmlGO
                                                              g$p$9220$1CmlGO
                                                              (- g$lev$9213$1CmlGO
                                                                 '1)))
                                                          (g$vquasi$9179$1CmlGO
                                                            g$q$9217$1CmlGO
                                                            g$lev$9213$1CmlGO)))))
                                                   g$ls/false$9219$1CmlGO)
                                                 ((case-lambda
                                                    ((g$t$9221$1CmlGO)
                                                     ((case-lambda
                                                        ((g$ls/false$9222$1CmlGO)
                                                         (if g$ls/false$9222$1CmlGO
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$9223$1CmlGO)
                                                                (if (= g$lev$9213$1CmlGO
                                                                       '0)
                                                                  (g$quasiappend$9177$1CmlGO
                                                                    g$p$9223$1CmlGO
                                                                    (g$vquasi$9179$1CmlGO
                                                                      g$q$9217$1CmlGO
                                                                      g$lev$9213$1CmlGO))
                                                                  (g$quasicons$9176$1CmlGO
                                                                    (g$quasicons$9176$1CmlGO
                                                                      (g$datum$9159$1CmlGO
                                                                        'unquote-splicing)
                                                                      (g$quasi$9180$1CmlGO
                                                                        g$p$9223$1CmlGO
                                                                        (- g$lev$9213$1CmlGO
                                                                           '1)))
                                                                    (g$vquasi$9179$1CmlGO
                                                                      g$q$9217$1CmlGO
                                                                      g$lev$9213$1CmlGO)))))
                                                             g$ls/false$9222$1CmlGO)
                                                           ((case-lambda
                                                              ((g$t$9224$1CmlGO)
                                                               ((case-lambda
                                                                  ((g$ls/false$9225$1CmlGO)
                                                                   (if g$ls/false$9225$1CmlGO
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$9226$1CmlGO)
                                                                          (g$quasicons$9176$1CmlGO
                                                                            (g$quasi$9180$1CmlGO
                                                                              g$p$9226$1CmlGO
                                                                              g$lev$9213$1CmlGO)
                                                                            (g$vquasi$9179$1CmlGO
                                                                              g$q$9217$1CmlGO
                                                                              g$lev$9213$1CmlGO))))
                                                                       g$ls/false$9225$1CmlGO)
                                                                     (g$syntax-violation$8314$1CmlGO
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$9224$1CmlGO))))
                                                                (g$syntax-dispatch$8203$1CmlGO
                                                                  g$t$9224$1CmlGO
                                                                  'any))))
                                                            g$t$9221$1CmlGO))))
                                                      (g$syntax-dispatch$8203$1CmlGO
                                                        g$t$9221$1CmlGO
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$9218$1CmlGO))))
                                            (g$syntax-dispatch$8203$1CmlGO
                                              g$t$9218$1CmlGO
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$9216$1CmlGO)))
                                    g$ls/false$9215$1CmlGO)
                                  ((case-lambda
                                     ((g$t$9227$1CmlGO)
                                      ((case-lambda
                                         ((g$ls/false$9228$1CmlGO)
                                          (if g$ls/false$9228$1CmlGO
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$8146$1CmlGO
                                                     'quote)
                                                   '())))
                                              g$ls/false$9228$1CmlGO)
                                            (g$syntax-violation$8314$1CmlGO
                                              '#f
                                              '"invalid syntax"
                                              g$t$9227$1CmlGO))))
                                       (g$syntax-dispatch$8203$1CmlGO
                                         g$t$9227$1CmlGO
                                         '()))))
                                   g$t$9214$1CmlGO))))
                             (g$syntax-dispatch$8203$1CmlGO
                               g$t$9214$1CmlGO
                               '(any . any)))))
                         g$p$9212$1CmlGO))))
                   (g$quasi$9180$1CmlGO
                     (case-lambda
                       ((g$p$9185$1CmlGO g$lev$9186$1CmlGO)
                        ((case-lambda
                           ((g$t$9187$1CmlGO)
                            ((case-lambda
                               ((g$ls/false$9188$1CmlGO)
                                (if g$ls/false$9188$1CmlGO
                                  (apply
                                    (case-lambda
                                      ((g$p$9189$1CmlGO)
                                       (if (= g$lev$9186$1CmlGO '0)
                                         g$p$9189$1CmlGO
                                         (g$quasicons$9176$1CmlGO
                                           (g$datum$9159$1CmlGO 'unquote)
                                           (g$quasi$9180$1CmlGO
                                             (list g$p$9189$1CmlGO)
                                             (- g$lev$9186$1CmlGO '1))))))
                                    g$ls/false$9188$1CmlGO)
                                  ((case-lambda
                                     ((g$t$9190$1CmlGO)
                                      ((case-lambda
                                         ((g$ls/false$9191$1CmlGO)
                                          (if g$ls/false$9191$1CmlGO
                                            (apply
                                              (case-lambda
                                                ((g$p$9192$1CmlGO
                                                   g$q$9193$1CmlGO)
                                                 (if (= g$lev$9186$1CmlGO '0)
                                                   (g$quasicons*$9175$1CmlGO
                                                     g$p$9192$1CmlGO
                                                     (g$quasi$9180$1CmlGO
                                                       g$q$9193$1CmlGO
                                                       g$lev$9186$1CmlGO))
                                                   (g$quasicons$9176$1CmlGO
                                                     (g$quasicons$9176$1CmlGO
                                                       (g$datum$9159$1CmlGO
                                                         'unquote)
                                                       (g$quasi$9180$1CmlGO
                                                         g$p$9192$1CmlGO
                                                         (- g$lev$9186$1CmlGO
                                                            '1)))
                                                     (g$quasi$9180$1CmlGO
                                                       g$q$9193$1CmlGO
                                                       g$lev$9186$1CmlGO)))))
                                              g$ls/false$9191$1CmlGO)
                                            ((case-lambda
                                               ((g$t$9194$1CmlGO)
                                                ((case-lambda
                                                   ((g$ls/false$9195$1CmlGO)
                                                    (if g$ls/false$9195$1CmlGO
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$9196$1CmlGO
                                                             g$q$9197$1CmlGO)
                                                           (if (= g$lev$9186$1CmlGO
                                                                  '0)
                                                             (g$quasiappend$9177$1CmlGO
                                                               g$p$9196$1CmlGO
                                                               (g$quasi$9180$1CmlGO
                                                                 g$q$9197$1CmlGO
                                                                 g$lev$9186$1CmlGO))
                                                             (g$quasicons$9176$1CmlGO
                                                               (g$quasicons$9176$1CmlGO
                                                                 (g$datum$9159$1CmlGO
                                                                   'unquote-splicing)
                                                                 (g$quasi$9180$1CmlGO
                                                                   g$p$9196$1CmlGO
                                                                   (- g$lev$9186$1CmlGO
                                                                      '1)))
                                                               (g$quasi$9180$1CmlGO
                                                                 g$q$9197$1CmlGO
                                                                 g$lev$9186$1CmlGO)))))
                                                        g$ls/false$9195$1CmlGO)
                                                      ((case-lambda
                                                         ((g$t$9198$1CmlGO)
                                                          ((case-lambda
                                                             ((g$ls/false$9199$1CmlGO)
                                                              (if g$ls/false$9199$1CmlGO
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$9200$1CmlGO)
                                                                     (g$quasicons$9176$1CmlGO
                                                                       (g$datum$9159$1CmlGO
                                                                         'quasiquote)
                                                                       (g$quasi$9180$1CmlGO
                                                                         (list
                                                                           g$p$9200$1CmlGO)
                                                                         (+ g$lev$9186$1CmlGO
                                                                            '1)))))
                                                                  g$ls/false$9199$1CmlGO)
                                                                ((case-lambda
                                                                   ((g$t$9201$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9202$1CmlGO)
                                                                        (if g$ls/false$9202$1CmlGO
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$9203$1CmlGO
                                                                                 g$q$9204$1CmlGO)
                                                                               (g$quasicons$9176$1CmlGO
                                                                                 (g$quasi$9180$1CmlGO
                                                                                   g$p$9203$1CmlGO
                                                                                   g$lev$9186$1CmlGO)
                                                                                 (g$quasi$9180$1CmlGO
                                                                                   g$q$9204$1CmlGO
                                                                                   g$lev$9186$1CmlGO))))
                                                                            g$ls/false$9202$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$t$9205$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9206$1CmlGO)
                                                                                  (if (if g$ls/false$9206$1CmlGO
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$9207$1CmlGO)
                                                                                               (not (g$stx?$7897$1CmlGO
                                                                                                      g$x$9207$1CmlGO))))
                                                                                            g$ls/false$9206$1CmlGO))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$9208$1CmlGO)
                                                                                         (g$quasivector$9178$1CmlGO
                                                                                           (g$vquasi$9179$1CmlGO
                                                                                             g$x$9208$1CmlGO
                                                                                             g$lev$9186$1CmlGO))))
                                                                                      g$ls/false$9206$1CmlGO)
                                                                                    ((case-lambda
                                                                                       ((g$t$9209$1CmlGO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9210$1CmlGO)
                                                                                            (if g$ls/false$9210$1CmlGO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9211$1CmlGO)
                                                                                                   (list
                                                                                                     (g$scheme-stx$8146$1CmlGO
                                                                                                       'quote)
                                                                                                     g$p$9211$1CmlGO)))
                                                                                                g$ls/false$9210$1CmlGO)
                                                                                              (g$syntax-violation$8314$1CmlGO
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9209$1CmlGO))))
                                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                                           g$t$9209$1CmlGO
                                                                                           'any))))
                                                                                     g$t$9205$1CmlGO))))
                                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                                 g$t$9205$1CmlGO
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9201$1CmlGO))))
                                                                     (g$syntax-dispatch$8203$1CmlGO
                                                                       g$t$9201$1CmlGO
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9198$1CmlGO))))
                                                           (g$syntax-dispatch$8203$1CmlGO
                                                             g$t$9198$1CmlGO
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$9194$1CmlGO))))
                                                 (g$syntax-dispatch$8203$1CmlGO
                                                   g$t$9194$1CmlGO
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9190$1CmlGO))))
                                       (g$syntax-dispatch$8203$1CmlGO
                                         g$t$9190$1CmlGO
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$9187$1CmlGO))))
                             (g$syntax-dispatch$8203$1CmlGO
                               g$t$9187$1CmlGO
                               '(#(scheme-id unquote) any)))))
                         g$p$9185$1CmlGO)))))
           (case-lambda
             ((g$x$9181$1CmlGO)
              ((case-lambda
                 ((g$t$9182$1CmlGO)
                  ((case-lambda
                     ((g$ls/false$9183$1CmlGO)
                      (if g$ls/false$9183$1CmlGO
                        (apply
                          (case-lambda
                            ((g$e$9184$1CmlGO)
                             (g$quasi$9180$1CmlGO g$e$9184$1CmlGO '0)))
                          g$ls/false$9183$1CmlGO)
                        (g$syntax-violation$8314$1CmlGO
                          '#f
                          '"invalid syntax"
                          g$t$9182$1CmlGO))))
                   (g$syntax-dispatch$8203$1CmlGO g$t$9182$1CmlGO '(_ any)))))
               g$x$9181$1CmlGO))))))))
   (g$quasisyntax-macro$8195$1CmlGO
     g$quasisyntax-macro$11655$1CmlGO
     ((case-lambda
        (()
         (letrec* ((g$quasi$9291$1CmlGO
                     (case-lambda
                       ((g$p$9305$1CmlGO g$lev$9306$1CmlGO)
                        ((case-lambda
                           ((g$t$9307$1CmlGO)
                            ((case-lambda
                               ((g$ls/false$9308$1CmlGO)
                                (if g$ls/false$9308$1CmlGO
                                  (apply
                                    (case-lambda
                                      ((g$p$9309$1CmlGO)
                                       (if (= g$lev$9306$1CmlGO '0)
                                         ((case-lambda
                                            ((g$g$9310$1CmlGO)
                                             (values
                                               (list g$g$9310$1CmlGO)
                                               (list g$p$9309$1CmlGO)
                                               g$g$9310$1CmlGO)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$9291$1CmlGO
                                                g$p$9309$1CmlGO
                                                (- g$lev$9306$1CmlGO '1))))
                                           (case-lambda
                                             ((g$lhs*$9314$1CmlGO
                                                g$rhs*$9315$1CmlGO
                                                g$p$9316$1CmlGO)
                                              ((case-lambda
                                                 ((g$p$9317$1CmlGO
                                                    g$rhs*$9318$1CmlGO
                                                    g$lhs*$9319$1CmlGO)
                                                  (values
                                                    g$lhs*$9319$1CmlGO
                                                    g$rhs*$9318$1CmlGO
                                                    (list
                                                      'unsyntax
                                                      g$p$9317$1CmlGO))))
                                               g$p$9316$1CmlGO
                                               g$rhs*$9315$1CmlGO
                                               g$lhs*$9314$1CmlGO)))))))
                                    g$ls/false$9308$1CmlGO)
                                  ((case-lambda
                                     ((g$t$9320$1CmlGO)
                                      ((case-lambda
                                         ((g$ls/false$9321$1CmlGO)
                                          (if (if g$ls/false$9321$1CmlGO
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$9306$1CmlGO
                                                          '0)))
                                                    g$ls/false$9321$1CmlGO))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$8314$1CmlGO
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$9305$1CmlGO)))
                                              g$ls/false$9321$1CmlGO)
                                            ((case-lambda
                                               ((g$t$9322$1CmlGO)
                                                ((case-lambda
                                                   ((g$ls/false$9323$1CmlGO)
                                                    (if g$ls/false$9323$1CmlGO
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$9324$1CmlGO
                                                             g$q$9325$1CmlGO)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$9291$1CmlGO
                                                                  g$q$9325$1CmlGO
                                                                  g$lev$9306$1CmlGO)))
                                                             (case-lambda
                                                               ((g$lhs*$9329$1CmlGO
                                                                  g$rhs*$9330$1CmlGO
                                                                  g$q$9331$1CmlGO)
                                                                ((case-lambda
                                                                   ((g$q$9332$1CmlGO
                                                                      g$rhs*$9333$1CmlGO
                                                                      g$lhs*$9334$1CmlGO)
                                                                    (if (= g$lev$9306$1CmlGO
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$9335$1CmlGO)
                                                                          (values
                                                                            (append
                                                                              g$g*$9335$1CmlGO
                                                                              g$lhs*$9334$1CmlGO)
                                                                            (append
                                                                              g$p*$9324$1CmlGO
                                                                              g$rhs*$9333$1CmlGO)
                                                                            (append
                                                                              g$g*$9335$1CmlGO
                                                                              g$q$9332$1CmlGO))))
                                                                       (map (case-lambda
                                                                              ((g$x$9336$1CmlGO)
                                                                               (gensym)))
                                                                            g$p*$9324$1CmlGO))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$9291$1CmlGO
                                                                             g$p*$9324$1CmlGO
                                                                             (- g$lev$9306$1CmlGO
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$9340$1CmlGO
                                                                             g$rhs2*$9341$1CmlGO
                                                                             g$p*$9342$1CmlGO)
                                                                           ((case-lambda
                                                                              ((g$p*$9343$1CmlGO
                                                                                 g$rhs2*$9344$1CmlGO
                                                                                 g$lhs2*$9345$1CmlGO)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$9345$1CmlGO
                                                                                   g$lhs*$9334$1CmlGO)
                                                                                 (append
                                                                                   g$rhs2*$9344$1CmlGO
                                                                                   g$rhs*$9333$1CmlGO)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$9343$1CmlGO)
                                                                                   g$q$9332$1CmlGO))))
                                                                            g$p*$9342$1CmlGO
                                                                            g$rhs2*$9341$1CmlGO
                                                                            g$lhs2*$9340$1CmlGO)))))))
                                                                 g$q$9331$1CmlGO
                                                                 g$rhs*$9330$1CmlGO
                                                                 g$lhs*$9329$1CmlGO))))))
                                                        g$ls/false$9323$1CmlGO)
                                                      ((case-lambda
                                                         ((g$t$9346$1CmlGO)
                                                          ((case-lambda
                                                             ((g$ls/false$9347$1CmlGO)
                                                              (if g$ls/false$9347$1CmlGO
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$9348$1CmlGO
                                                                       g$q$9349$1CmlGO)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$9291$1CmlGO
                                                                            g$q$9349$1CmlGO
                                                                            g$lev$9306$1CmlGO)))
                                                                       (case-lambda
                                                                         ((g$lhs*$9353$1CmlGO
                                                                            g$rhs*$9354$1CmlGO
                                                                            g$q$9355$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$q$9356$1CmlGO
                                                                                g$rhs*$9357$1CmlGO
                                                                                g$lhs*$9358$1CmlGO)
                                                                              (if (= g$lev$9306$1CmlGO
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$9359$1CmlGO)
                                                                                    (values
                                                                                      (append
                                                                                        (map (case-lambda
                                                                                               ((g$g$9360$1CmlGO)
                                                                                                (cons
                                                                                                  g$g$9360$1CmlGO
                                                                                                  '(...))))
                                                                                             g$g*$9359$1CmlGO)
                                                                                        g$lhs*$9358$1CmlGO)
                                                                                      (append
                                                                                        g$p*$9348$1CmlGO
                                                                                        g$rhs*$9357$1CmlGO)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (map (case-lambda
                                                                                                 ((g$g$9361$1CmlGO)
                                                                                                  (cons
                                                                                                    g$g$9361$1CmlGO
                                                                                                    '(...))))
                                                                                               g$g*$9359$1CmlGO))
                                                                                        g$q$9356$1CmlGO))))
                                                                                 (map (case-lambda
                                                                                        ((g$x$9362$1CmlGO)
                                                                                         (gensym)))
                                                                                      g$p*$9348$1CmlGO))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$9291$1CmlGO
                                                                                       g$p*$9348$1CmlGO
                                                                                       (- g$lev$9306$1CmlGO
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$9366$1CmlGO
                                                                                       g$rhs2*$9367$1CmlGO
                                                                                       g$p*$9368$1CmlGO)
                                                                                     ((case-lambda
                                                                                        ((g$p*$9369$1CmlGO
                                                                                           g$rhs2*$9370$1CmlGO
                                                                                           g$lhs2*$9371$1CmlGO)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$9371$1CmlGO
                                                                                             g$lhs*$9358$1CmlGO)
                                                                                           (append
                                                                                             g$rhs2*$9370$1CmlGO
                                                                                             g$rhs*$9357$1CmlGO)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$9369$1CmlGO)
                                                                                             g$q$9356$1CmlGO))))
                                                                                      g$p*$9368$1CmlGO
                                                                                      g$rhs2*$9367$1CmlGO
                                                                                      g$lhs2*$9366$1CmlGO)))))))
                                                                           g$q$9355$1CmlGO
                                                                           g$rhs*$9354$1CmlGO
                                                                           g$lhs*$9353$1CmlGO))))))
                                                                  g$ls/false$9347$1CmlGO)
                                                                ((case-lambda
                                                                   ((g$t$9372$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9373$1CmlGO)
                                                                        (if (if g$ls/false$9373$1CmlGO
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$9306$1CmlGO
                                                                                        '0)))
                                                                                  g$ls/false$9373$1CmlGO))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$8314$1CmlGO
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$9305$1CmlGO)))
                                                                            g$ls/false$9373$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$t$9374$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9375$1CmlGO)
                                                                                  (if g$ls/false$9375$1CmlGO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$9376$1CmlGO)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$9291$1CmlGO
                                                                                                g$p$9376$1CmlGO
                                                                                                (+ g$lev$9306$1CmlGO
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$9380$1CmlGO
                                                                                                g$rhs*$9381$1CmlGO
                                                                                                g$p$9382$1CmlGO)
                                                                                              ((case-lambda
                                                                                                 ((g$p$9383$1CmlGO
                                                                                                    g$rhs*$9384$1CmlGO
                                                                                                    g$lhs*$9385$1CmlGO)
                                                                                                  (values
                                                                                                    g$lhs*$9385$1CmlGO
                                                                                                    g$rhs*$9384$1CmlGO
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$9383$1CmlGO))))
                                                                                               g$p$9382$1CmlGO
                                                                                               g$rhs*$9381$1CmlGO
                                                                                               g$lhs*$9380$1CmlGO))))))
                                                                                      g$ls/false$9375$1CmlGO)
                                                                                    ((case-lambda
                                                                                       ((g$t$9386$1CmlGO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9387$1CmlGO)
                                                                                            (if g$ls/false$9387$1CmlGO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9388$1CmlGO
                                                                                                     g$q$9389$1CmlGO)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$9291$1CmlGO
                                                                                                          g$p$9388$1CmlGO
                                                                                                          g$lev$9306$1CmlGO)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$9396$1CmlGO
                                                                                                          g$rhs*$9397$1CmlGO
                                                                                                          g$p$9398$1CmlGO)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$9291$1CmlGO
                                                                                                               g$q$9389$1CmlGO
                                                                                                               g$lev$9306$1CmlGO)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$9399$1CmlGO
                                                                                                               g$rhs2*$9400$1CmlGO
                                                                                                               g$q$9401$1CmlGO)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$9402$1CmlGO
                                                                                                                   g$rhs2*$9403$1CmlGO
                                                                                                                   g$lhs2*$9404$1CmlGO
                                                                                                                   g$p$9405$1CmlGO
                                                                                                                   g$rhs*$9406$1CmlGO
                                                                                                                   g$lhs*$9407$1CmlGO)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$9404$1CmlGO
                                                                                                                     g$lhs*$9407$1CmlGO)
                                                                                                                   (append
                                                                                                                     g$rhs2*$9403$1CmlGO
                                                                                                                     g$rhs*$9406$1CmlGO)
                                                                                                                   (cons
                                                                                                                     g$p$9405$1CmlGO
                                                                                                                     g$q$9402$1CmlGO))))
                                                                                                              g$q$9401$1CmlGO
                                                                                                              g$rhs2*$9400$1CmlGO
                                                                                                              g$lhs2*$9399$1CmlGO
                                                                                                              g$p$9398$1CmlGO
                                                                                                              g$rhs*$9397$1CmlGO
                                                                                                              g$lhs*$9396$1CmlGO)))))))))
                                                                                                g$ls/false$9387$1CmlGO)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9408$1CmlGO)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9409$1CmlGO)
                                                                                                      (if g$ls/false$9409$1CmlGO
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$9410$1CmlGO)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$9291$1CmlGO
                                                                                                                    g$x*$9410$1CmlGO
                                                                                                                    g$lev$9306$1CmlGO)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$9414$1CmlGO
                                                                                                                    g$rhs*$9415$1CmlGO
                                                                                                                    g$x*$9416$1CmlGO)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$9417$1CmlGO
                                                                                                                        g$rhs*$9418$1CmlGO
                                                                                                                        g$lhs*$9419$1CmlGO)
                                                                                                                      (values
                                                                                                                        g$lhs*$9419$1CmlGO
                                                                                                                        g$rhs*$9418$1CmlGO
                                                                                                                        (list->vector
                                                                                                                          g$x*$9417$1CmlGO))))
                                                                                                                   g$x*$9416$1CmlGO
                                                                                                                   g$rhs*$9415$1CmlGO
                                                                                                                   g$lhs*$9414$1CmlGO))))))
                                                                                                          g$ls/false$9409$1CmlGO)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9420$1CmlGO)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9421$1CmlGO)
                                                                                                                (if g$ls/false$9421$1CmlGO
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$9305$1CmlGO)))
                                                                                                                    g$ls/false$9421$1CmlGO)
                                                                                                                  (g$syntax-violation$8314$1CmlGO
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9420$1CmlGO))))
                                                                                                             (g$syntax-dispatch$8203$1CmlGO
                                                                                                               g$t$9420$1CmlGO
                                                                                                               '_))))
                                                                                                         g$t$9408$1CmlGO))))
                                                                                                   (g$syntax-dispatch$8203$1CmlGO
                                                                                                     g$t$9408$1CmlGO
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$9386$1CmlGO))))
                                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                                           g$t$9386$1CmlGO
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$9374$1CmlGO))))
                                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                                 g$t$9374$1CmlGO
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$9372$1CmlGO))))
                                                                     (g$syntax-dispatch$8203$1CmlGO
                                                                       g$t$9372$1CmlGO
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$9346$1CmlGO))))
                                                           (g$syntax-dispatch$8203$1CmlGO
                                                             g$t$9346$1CmlGO
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$9322$1CmlGO))))
                                                 (g$syntax-dispatch$8203$1CmlGO
                                                   g$t$9322$1CmlGO
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9320$1CmlGO))))
                                       (g$syntax-dispatch$8203$1CmlGO
                                         g$t$9320$1CmlGO
                                         '#(scheme-id unsyntax)))))
                                   g$t$9307$1CmlGO))))
                             (g$syntax-dispatch$8203$1CmlGO
                               g$t$9307$1CmlGO
                               '(#(scheme-id unsyntax) any)))))
                         g$p$9305$1CmlGO)))))
           (case-lambda
             ((g$x$9292$1CmlGO)
              ((case-lambda
                 ((g$t$9293$1CmlGO)
                  ((case-lambda
                     ((g$ls/false$9294$1CmlGO)
                      (if g$ls/false$9294$1CmlGO
                        (apply
                          (case-lambda
                            ((g$e$9295$1CmlGO)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$9291$1CmlGO g$e$9295$1CmlGO '0)))
                               (case-lambda
                                 ((g$lhs*$9299$1CmlGO
                                    g$rhs*$9300$1CmlGO
                                    g$v$9301$1CmlGO)
                                  ((case-lambda
                                     ((g$v$9302$1CmlGO
                                        g$rhs*$9303$1CmlGO
                                        g$lhs*$9304$1CmlGO)
                                      (g$bless$8166$1CmlGO
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$9303$1CmlGO)
                                          '()
                                          (list
                                            g$lhs*$9304$1CmlGO
                                            (list 'syntax g$v$9302$1CmlGO))))))
                                   g$v$9301$1CmlGO
                                   g$rhs*$9300$1CmlGO
                                   g$lhs*$9299$1CmlGO))))))
                          g$ls/false$9294$1CmlGO)
                        (g$syntax-violation$8314$1CmlGO
                          '#f
                          '"invalid syntax"
                          g$t$9293$1CmlGO))))
                   (g$syntax-dispatch$8203$1CmlGO g$t$9293$1CmlGO '(_ any)))))
               g$x$9292$1CmlGO))))))))
   (g$define-struct-macro$8196$1CmlGO
     g$define-struct-macro$11656$1CmlGO
     (case-lambda
       ((g$stx$9422$1CmlGO)
        (g$syntax-violation$8314$1CmlGO
          '#f
          '"define-struct not supported"
          g$stx$9422$1CmlGO))))
   (g$define-record-type-macro$8197$1CmlGO
     g$define-record-type-macro$11657$1CmlGO
     (case-lambda
       ((g$x$9423$1CmlGO)
        (letrec* ((g$id$9424$1CmlGO
                    (case-lambda
                      ((g$ctxt$9676$1CmlGO . g$str*$9677$1CmlGO)
                       (g$datum->syntax$8316$1CmlGO
                         g$ctxt$9676$1CmlGO
                         (string->symbol
                           (apply
                             string-append
                             (map (case-lambda
                                    ((g$x$9678$1CmlGO)
                                     (if (symbol? g$x$9678$1CmlGO)
                                       (symbol->string g$x$9678$1CmlGO)
                                       (if (string? g$x$9678$1CmlGO)
                                         g$x$9678$1CmlGO
                                         (assertion-violation
                                           'define-record-type
                                           '"BUG")))))
                                  g$str*$9677$1CmlGO)))))))
                  (g$get-record-name$9425$1CmlGO
                    (case-lambda
                      ((g$spec$9667$1CmlGO)
                       ((case-lambda
                          ((g$t$9668$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9669$1CmlGO)
                               (if g$ls/false$9669$1CmlGO
                                 (apply
                                   (case-lambda
                                     ((g$foo$9670$1CmlGO
                                        g$make-foo$9671$1CmlGO
                                        g$foo?$9672$1CmlGO)
                                      g$foo$9670$1CmlGO))
                                   g$ls/false$9669$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9673$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9674$1CmlGO)
                                         (if g$ls/false$9674$1CmlGO
                                           (apply
                                             (case-lambda
                                               ((g$foo$9675$1CmlGO)
                                                g$foo$9675$1CmlGO))
                                             g$ls/false$9674$1CmlGO)
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$t$9673$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9673$1CmlGO
                                        'any))))
                                  g$t$9668$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9668$1CmlGO
                              '(any any any)))))
                        g$spec$9667$1CmlGO))))
                  (g$get-record-constructor-name$9426$1CmlGO
                    (case-lambda
                      ((g$spec$9657$1CmlGO)
                       ((case-lambda
                          ((g$t$9658$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9659$1CmlGO)
                               (if g$ls/false$9659$1CmlGO
                                 (apply
                                   (case-lambda
                                     ((g$foo$9660$1CmlGO
                                        g$make-foo$9661$1CmlGO
                                        g$foo?$9662$1CmlGO)
                                      g$make-foo$9661$1CmlGO))
                                   g$ls/false$9659$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9663$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9664$1CmlGO)
                                         (if (if g$ls/false$9664$1CmlGO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9665$1CmlGO)
                                                      (g$id?$7925$1CmlGO
                                                        g$foo$9665$1CmlGO)))
                                                   g$ls/false$9664$1CmlGO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9666$1CmlGO)
                                                (g$id$9424$1CmlGO
                                                  g$foo$9666$1CmlGO
                                                  '"make-"
                                                  (g$stx->datum$7936$1CmlGO
                                                    g$foo$9666$1CmlGO))))
                                             g$ls/false$9664$1CmlGO)
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$t$9663$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9663$1CmlGO
                                        'any))))
                                  g$t$9658$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9658$1CmlGO
                              '(any any any)))))
                        g$spec$9657$1CmlGO))))
                  (g$get-record-predicate-name$9427$1CmlGO
                    (case-lambda
                      ((g$spec$9647$1CmlGO)
                       ((case-lambda
                          ((g$t$9648$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9649$1CmlGO)
                               (if g$ls/false$9649$1CmlGO
                                 (apply
                                   (case-lambda
                                     ((g$foo$9650$1CmlGO
                                        g$make-foo$9651$1CmlGO
                                        g$foo?$9652$1CmlGO)
                                      g$foo?$9652$1CmlGO))
                                   g$ls/false$9649$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9653$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9654$1CmlGO)
                                         (if (if g$ls/false$9654$1CmlGO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9655$1CmlGO)
                                                      (g$id?$7925$1CmlGO
                                                        g$foo$9655$1CmlGO)))
                                                   g$ls/false$9654$1CmlGO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9656$1CmlGO)
                                                (g$id$9424$1CmlGO
                                                  g$foo$9656$1CmlGO
                                                  (g$stx->datum$7936$1CmlGO
                                                    g$foo$9656$1CmlGO)
                                                  '"?")))
                                             g$ls/false$9654$1CmlGO)
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$t$9653$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9653$1CmlGO
                                        'any))))
                                  g$t$9648$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9648$1CmlGO
                              '(any any any)))))
                        g$spec$9647$1CmlGO))))
                  (g$get-clause$9428$1CmlGO
                    (case-lambda
                      ((g$id$9638$1CmlGO g$ls$9639$1CmlGO)
                       ((case-lambda
                          ((g$t$9640$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9641$1CmlGO)
                               (if g$ls/false$9641$1CmlGO
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9641$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9642$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9643$1CmlGO)
                                         (if g$ls/false$9643$1CmlGO
                                           (apply
                                             (case-lambda
                                               ((g$x$9644$1CmlGO
                                                  g$rest$9645$1CmlGO
                                                  g$ls$9646$1CmlGO)
                                                (if (g$free-id=?$7929$1CmlGO
                                                      (g$bless$8166$1CmlGO
                                                        g$id$9638$1CmlGO)
                                                      g$x$9644$1CmlGO)
                                                  (cons
                                                    g$x$9644$1CmlGO
                                                    g$rest$9645$1CmlGO)
                                                  (g$get-clause$9428$1CmlGO
                                                    g$id$9638$1CmlGO
                                                    g$ls$9646$1CmlGO))))
                                             g$ls/false$9643$1CmlGO)
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$t$9642$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9642$1CmlGO
                                        '((any . any) . any)))))
                                  g$t$9640$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9640$1CmlGO
                              '()))))
                        g$ls$9639$1CmlGO))))
                  (g$foo-rtd-code$9429$1CmlGO
                    (case-lambda
                      ((g$name$9597$1CmlGO
                         g$clause*$9598$1CmlGO
                         g$parent-rtd-code$9599$1CmlGO)
                       (letrec* ((g$convert-field-spec*$9600$1CmlGO
                                   (case-lambda
                                     ((g$ls$9625$1CmlGO)
                                      (list->vector
                                        (map (case-lambda
                                               ((g$x$9626$1CmlGO)
                                                ((case-lambda
                                                   ((g$t$9627$1CmlGO)
                                                    ((case-lambda
                                                       ((g$ls/false$9628$1CmlGO)
                                                        (if g$ls/false$9628$1CmlGO
                                                          (apply
                                                            (case-lambda
                                                              ((g$name$9629$1CmlGO
                                                                 g$rest$9630$1CmlGO)
                                                               (list
                                                                 'mutable
                                                                 g$name$9629$1CmlGO)))
                                                            g$ls/false$9628$1CmlGO)
                                                          ((case-lambda
                                                             ((g$t$9631$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$ls/false$9632$1CmlGO)
                                                                  (if g$ls/false$9632$1CmlGO
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$name$9633$1CmlGO
                                                                           g$rest$9634$1CmlGO)
                                                                         (list
                                                                           'immutable
                                                                           g$name$9633$1CmlGO)))
                                                                      g$ls/false$9632$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$t$9635$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9636$1CmlGO)
                                                                            (if g$ls/false$9636$1CmlGO
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$name$9637$1CmlGO)
                                                                                   (list
                                                                                     'immutable
                                                                                     g$name$9637$1CmlGO)))
                                                                                g$ls/false$9636$1CmlGO)
                                                                              (g$syntax-violation$8314$1CmlGO
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$9635$1CmlGO))))
                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                           g$t$9635$1CmlGO
                                                                           'any))))
                                                                     g$t$9631$1CmlGO))))
                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                 g$t$9631$1CmlGO
                                                                 '(#(scheme-id
                                                                     immutable)
                                                                   any
                                                                   .
                                                                   any)))))
                                                           g$t$9627$1CmlGO))))
                                                     (g$syntax-dispatch$8203$1CmlGO
                                                       g$t$9627$1CmlGO
                                                       '(#(scheme-id mutable)
                                                         any
                                                         .
                                                         any)))))
                                                 g$x$9626$1CmlGO)))
                                             g$ls$9625$1CmlGO))))))
                         ((case-lambda
                            ((g$uid-code$9601$1CmlGO
                               g$sealed?$9602$1CmlGO
                               g$opaque?$9603$1CmlGO
                               g$fields$9604$1CmlGO)
                             (g$bless$8166$1CmlGO
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$9597$1CmlGO)
                                 g$parent-rtd-code$9599$1CmlGO
                                 g$uid-code$9601$1CmlGO
                                 g$sealed?$9602$1CmlGO
                                 g$opaque?$9603$1CmlGO
                                 g$fields$9604$1CmlGO))))
                          ((case-lambda
                             ((g$t$9605$1CmlGO)
                              ((case-lambda
                                 ((g$ls/false$9606$1CmlGO)
                                  (if g$ls/false$9606$1CmlGO
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9606$1CmlGO)
                                    ((case-lambda
                                       ((g$t$9607$1CmlGO)
                                        ((case-lambda
                                           ((g$ls/false$9608$1CmlGO)
                                            (if g$ls/false$9608$1CmlGO
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9609$1CmlGO)
                                                   (list
                                                     'quote
                                                     g$uid$9609$1CmlGO)))
                                                g$ls/false$9608$1CmlGO)
                                              ((case-lambda
                                                 ((g$t$9610$1CmlGO)
                                                  ((case-lambda
                                                     ((g$ls/false$9611$1CmlGO)
                                                      (if g$ls/false$9611$1CmlGO
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9611$1CmlGO)
                                                        (g$syntax-violation$8314$1CmlGO
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9610$1CmlGO))))
                                                   (g$syntax-dispatch$8203$1CmlGO
                                                     g$t$9610$1CmlGO
                                                     '_))))
                                               g$t$9607$1CmlGO))))
                                         (g$syntax-dispatch$8203$1CmlGO
                                           g$t$9607$1CmlGO
                                           '(_ any)))))
                                     g$t$9605$1CmlGO))))
                               (g$syntax-dispatch$8203$1CmlGO
                                 g$t$9605$1CmlGO
                                 '(_)))))
                           (g$get-clause$9428$1CmlGO
                             'nongenerative
                             g$clause*$9598$1CmlGO))
                          ((case-lambda
                             ((g$t$9612$1CmlGO)
                              ((case-lambda
                                 ((g$ls/false$9613$1CmlGO)
                                  (if g$ls/false$9613$1CmlGO
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9613$1CmlGO)
                                    ((case-lambda
                                       ((g$t$9614$1CmlGO)
                                        ((case-lambda
                                           ((g$ls/false$9615$1CmlGO)
                                            (if g$ls/false$9615$1CmlGO
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9615$1CmlGO)
                                              (g$syntax-violation$8314$1CmlGO
                                                '#f
                                                '"invalid syntax"
                                                g$t$9614$1CmlGO))))
                                         (g$syntax-dispatch$8203$1CmlGO
                                           g$t$9614$1CmlGO
                                           '_))))
                                     g$t$9612$1CmlGO))))
                               (g$syntax-dispatch$8203$1CmlGO
                                 g$t$9612$1CmlGO
                                 '(_ #(atom #t))))))
                           (g$get-clause$9428$1CmlGO
                             'sealed
                             g$clause*$9598$1CmlGO))
                          ((case-lambda
                             ((g$t$9616$1CmlGO)
                              ((case-lambda
                                 ((g$ls/false$9617$1CmlGO)
                                  (if g$ls/false$9617$1CmlGO
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9617$1CmlGO)
                                    ((case-lambda
                                       ((g$t$9618$1CmlGO)
                                        ((case-lambda
                                           ((g$ls/false$9619$1CmlGO)
                                            (if g$ls/false$9619$1CmlGO
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9619$1CmlGO)
                                              (g$syntax-violation$8314$1CmlGO
                                                '#f
                                                '"invalid syntax"
                                                g$t$9618$1CmlGO))))
                                         (g$syntax-dispatch$8203$1CmlGO
                                           g$t$9618$1CmlGO
                                           '_))))
                                     g$t$9616$1CmlGO))))
                               (g$syntax-dispatch$8203$1CmlGO
                                 g$t$9616$1CmlGO
                                 '(_ #(atom #t))))))
                           (g$get-clause$9428$1CmlGO
                             'opaque
                             g$clause*$9598$1CmlGO))
                          ((case-lambda
                             ((g$t$9620$1CmlGO)
                              ((case-lambda
                                 ((g$ls/false$9621$1CmlGO)
                                  (if g$ls/false$9621$1CmlGO
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9622$1CmlGO)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9600$1CmlGO
                                             g$field-spec*$9622$1CmlGO))))
                                      g$ls/false$9621$1CmlGO)
                                    ((case-lambda
                                       ((g$t$9623$1CmlGO)
                                        ((case-lambda
                                           ((g$ls/false$9624$1CmlGO)
                                            (if g$ls/false$9624$1CmlGO
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9624$1CmlGO)
                                              (g$syntax-violation$8314$1CmlGO
                                                '#f
                                                '"invalid syntax"
                                                g$t$9623$1CmlGO))))
                                         (g$syntax-dispatch$8203$1CmlGO
                                           g$t$9623$1CmlGO
                                           '_))))
                                     g$t$9620$1CmlGO))))
                               (g$syntax-dispatch$8203$1CmlGO
                                 g$t$9620$1CmlGO
                                 '(_ . each-any)))))
                           (g$get-clause$9428$1CmlGO
                             'fields
                             g$clause*$9598$1CmlGO)))))))
                  (g$parent-rtd-code$9430$1CmlGO
                    (case-lambda
                      ((g$clause*$9585$1CmlGO)
                       ((case-lambda
                          ((g$t$9586$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9587$1CmlGO)
                               (if g$ls/false$9587$1CmlGO
                                 (apply
                                   (case-lambda
                                     ((g$name$9588$1CmlGO)
                                      (list
                                        'record-type-descriptor
                                        g$name$9588$1CmlGO)))
                                   g$ls/false$9587$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9589$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9590$1CmlGO)
                                         (if g$ls/false$9590$1CmlGO
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9591$1CmlGO)
                                                    ((case-lambda
                                                       ((g$ls/false$9592$1CmlGO)
                                                        (if g$ls/false$9592$1CmlGO
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9593$1CmlGO
                                                                 g$rcd$9594$1CmlGO)
                                                               g$rtd$9593$1CmlGO))
                                                            g$ls/false$9592$1CmlGO)
                                                          ((case-lambda
                                                             ((g$t$9595$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$ls/false$9596$1CmlGO)
                                                                  (if g$ls/false$9596$1CmlGO
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9596$1CmlGO)
                                                                    (g$syntax-violation$8314$1CmlGO
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9595$1CmlGO))))
                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                 g$t$9595$1CmlGO
                                                                 '#(atom #f)))))
                                                           g$t$9591$1CmlGO))))
                                                     (g$syntax-dispatch$8203$1CmlGO
                                                       g$t$9591$1CmlGO
                                                       '(_ any any)))))
                                                 (g$get-clause$9428$1CmlGO
                                                   'parent-rtd
                                                   g$clause*$9585$1CmlGO))))
                                             g$ls/false$9590$1CmlGO)
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$t$9589$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9589$1CmlGO
                                        '#(atom #f)))))
                                  g$t$9586$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9586$1CmlGO
                              '(_ any)))))
                        (g$get-clause$9428$1CmlGO
                          'parent
                          g$clause*$9585$1CmlGO)))))
                  (g$parent-rcd-code$9431$1CmlGO
                    (case-lambda
                      ((g$clause*$9573$1CmlGO)
                       ((case-lambda
                          ((g$t$9574$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9575$1CmlGO)
                               (if g$ls/false$9575$1CmlGO
                                 (apply
                                   (case-lambda
                                     ((g$name$9576$1CmlGO)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$9576$1CmlGO)))
                                   g$ls/false$9575$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9577$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9578$1CmlGO)
                                         (if g$ls/false$9578$1CmlGO
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9579$1CmlGO)
                                                    ((case-lambda
                                                       ((g$ls/false$9580$1CmlGO)
                                                        (if g$ls/false$9580$1CmlGO
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9581$1CmlGO
                                                                 g$rcd$9582$1CmlGO)
                                                               g$rcd$9582$1CmlGO))
                                                            g$ls/false$9580$1CmlGO)
                                                          ((case-lambda
                                                             ((g$t$9583$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$ls/false$9584$1CmlGO)
                                                                  (if g$ls/false$9584$1CmlGO
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9584$1CmlGO)
                                                                    (g$syntax-violation$8314$1CmlGO
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9583$1CmlGO))))
                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                 g$t$9583$1CmlGO
                                                                 '#(atom #f)))))
                                                           g$t$9579$1CmlGO))))
                                                     (g$syntax-dispatch$8203$1CmlGO
                                                       g$t$9579$1CmlGO
                                                       '(_ any any)))))
                                                 (g$get-clause$9428$1CmlGO
                                                   'parent-rtd
                                                   g$clause*$9573$1CmlGO))))
                                             g$ls/false$9578$1CmlGO)
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$t$9577$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9577$1CmlGO
                                        '#(atom #f)))))
                                  g$t$9574$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9574$1CmlGO
                              '(_ any)))))
                        (g$get-clause$9428$1CmlGO
                          'parent
                          g$clause*$9573$1CmlGO)))))
                  (g$foo-rcd-code$9432$1CmlGO
                    (case-lambda
                      ((g$clause*$9569$1CmlGO
                         g$foo-rtd$9570$1CmlGO
                         g$protocol$9571$1CmlGO
                         g$parent-rcd-code$9572$1CmlGO)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$9570$1CmlGO
                         g$parent-rcd-code$9572$1CmlGO
                         g$protocol$9571$1CmlGO))))
                  (g$get-protocol-code$9433$1CmlGO
                    (case-lambda
                      ((g$clause*$9563$1CmlGO)
                       ((case-lambda
                          ((g$t$9564$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9565$1CmlGO)
                               (if g$ls/false$9565$1CmlGO
                                 (apply
                                   (case-lambda
                                     ((g$expr$9566$1CmlGO) g$expr$9566$1CmlGO))
                                   g$ls/false$9565$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9567$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9568$1CmlGO)
                                         (if g$ls/false$9568$1CmlGO
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$9568$1CmlGO)
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$t$9567$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9567$1CmlGO
                                        '_))))
                                  g$t$9564$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9564$1CmlGO
                              '(_ any)))))
                        (g$get-clause$9428$1CmlGO
                          'protocol
                          g$clause*$9563$1CmlGO)))))
                  (g$get-fields$9434$1CmlGO
                    (case-lambda
                      ((g$clause*$9554$1CmlGO)
                       ((case-lambda
                          ((g$t$9555$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9556$1CmlGO)
                               (if g$ls/false$9556$1CmlGO
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$9556$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9557$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9558$1CmlGO)
                                         (if g$ls/false$9558$1CmlGO
                                           (apply
                                             (case-lambda
                                               ((g$f*$9559$1CmlGO)
                                                g$f*$9559$1CmlGO))
                                             g$ls/false$9558$1CmlGO)
                                           ((case-lambda
                                              ((g$t$9560$1CmlGO)
                                               ((case-lambda
                                                  ((g$ls/false$9561$1CmlGO)
                                                   (if g$ls/false$9561$1CmlGO
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$9562$1CmlGO)
                                                          (g$get-fields$9434$1CmlGO
                                                            g$rest$9562$1CmlGO)))
                                                       g$ls/false$9561$1CmlGO)
                                                     (g$syntax-violation$8314$1CmlGO
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9560$1CmlGO))))
                                                (g$syntax-dispatch$8203$1CmlGO
                                                  g$t$9560$1CmlGO
                                                  '(_ . any)))))
                                            g$t$9557$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9557$1CmlGO
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$9555$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9555$1CmlGO
                              '()))))
                        g$clause*$9554$1CmlGO))))
                  (g$get-mutator-indices$9435$1CmlGO
                    (case-lambda
                      ((g$fields$9542$1CmlGO)
                       ((letrec ((g$f$9543$1CmlGO
                                   (case-lambda
                                     ((g$fields$9544$1CmlGO g$i$9545$1CmlGO)
                                      ((case-lambda
                                         ((g$t$9546$1CmlGO)
                                          ((case-lambda
                                             ((g$ls/false$9547$1CmlGO)
                                              (if g$ls/false$9547$1CmlGO
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$9547$1CmlGO)
                                                ((case-lambda
                                                   ((g$t$9548$1CmlGO)
                                                    ((case-lambda
                                                       ((g$ls/false$9549$1CmlGO)
                                                        (if g$ls/false$9549$1CmlGO
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$9550$1CmlGO)
                                                               (cons
                                                                 g$i$9545$1CmlGO
                                                                 (g$f$9543$1CmlGO
                                                                   g$rest$9550$1CmlGO
                                                                   (+ g$i$9545$1CmlGO
                                                                      '1)))))
                                                            g$ls/false$9549$1CmlGO)
                                                          ((case-lambda
                                                             ((g$t$9551$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$ls/false$9552$1CmlGO)
                                                                  (if g$ls/false$9552$1CmlGO
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$9553$1CmlGO)
                                                                         (g$f$9543$1CmlGO
                                                                           g$rest$9553$1CmlGO
                                                                           (+ g$i$9545$1CmlGO
                                                                              '1))))
                                                                      g$ls/false$9552$1CmlGO)
                                                                    (g$syntax-violation$8314$1CmlGO
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9551$1CmlGO))))
                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                 g$t$9551$1CmlGO
                                                                 '(_ . any)))))
                                                           g$t$9548$1CmlGO))))
                                                     (g$syntax-dispatch$8203$1CmlGO
                                                       g$t$9548$1CmlGO
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$9546$1CmlGO))))
                                           (g$syntax-dispatch$8203$1CmlGO
                                             g$t$9546$1CmlGO
                                             '()))))
                                       g$fields$9544$1CmlGO)))))
                          g$f$9543$1CmlGO)
                        g$fields$9542$1CmlGO
                        '0))))
                  (g$get-mutators$9436$1CmlGO
                    (case-lambda
                      ((g$foo$9521$1CmlGO g$fields$9522$1CmlGO)
                       (letrec* ((g$gen-name$9523$1CmlGO
                                   (case-lambda
                                     ((g$x$9541$1CmlGO)
                                      (g$datum->syntax$8316$1CmlGO
                                        g$foo$9521$1CmlGO
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8317$1CmlGO
                                                g$foo$9521$1CmlGO))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8317$1CmlGO
                                                g$x$9541$1CmlGO))
                                            '"-set!")))))))
                         ((letrec ((g$f$9524$1CmlGO
                                     (case-lambda
                                       ((g$fields$9525$1CmlGO)
                                        ((case-lambda
                                           ((g$t$9526$1CmlGO)
                                            ((case-lambda
                                               ((g$ls/false$9527$1CmlGO)
                                                (if g$ls/false$9527$1CmlGO
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$9527$1CmlGO)
                                                  ((case-lambda
                                                     ((g$t$9528$1CmlGO)
                                                      ((case-lambda
                                                         ((g$ls/false$9529$1CmlGO)
                                                          (if g$ls/false$9529$1CmlGO
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9530$1CmlGO
                                                                   g$accessor$9531$1CmlGO
                                                                   g$mutator$9532$1CmlGO
                                                                   g$rest$9533$1CmlGO)
                                                                 (cons
                                                                   g$mutator$9532$1CmlGO
                                                                   (g$f$9524$1CmlGO
                                                                     g$rest$9533$1CmlGO))))
                                                              g$ls/false$9529$1CmlGO)
                                                            ((case-lambda
                                                               ((g$t$9534$1CmlGO)
                                                                ((case-lambda
                                                                   ((g$ls/false$9535$1CmlGO)
                                                                    (if g$ls/false$9535$1CmlGO
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9536$1CmlGO
                                                                             g$rest$9537$1CmlGO)
                                                                           (cons
                                                                             (g$gen-name$9523$1CmlGO
                                                                               g$name$9536$1CmlGO)
                                                                             (g$f$9524$1CmlGO
                                                                               g$rest$9537$1CmlGO))))
                                                                        g$ls/false$9535$1CmlGO)
                                                                      ((case-lambda
                                                                         ((g$t$9538$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9539$1CmlGO)
                                                                              (if g$ls/false$9539$1CmlGO
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$9540$1CmlGO)
                                                                                     (g$f$9524$1CmlGO
                                                                                       g$rest$9540$1CmlGO)))
                                                                                  g$ls/false$9539$1CmlGO)
                                                                                (g$syntax-violation$8314$1CmlGO
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9538$1CmlGO))))
                                                                           (g$syntax-dispatch$8203$1CmlGO
                                                                             g$t$9538$1CmlGO
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$9534$1CmlGO))))
                                                                 (g$syntax-dispatch$8203$1CmlGO
                                                                   g$t$9534$1CmlGO
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$9528$1CmlGO))))
                                                       (g$syntax-dispatch$8203$1CmlGO
                                                         g$t$9528$1CmlGO
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$9526$1CmlGO))))
                                             (g$syntax-dispatch$8203$1CmlGO
                                               g$t$9526$1CmlGO
                                               '()))))
                                         g$fields$9525$1CmlGO)))))
                            g$f$9524$1CmlGO)
                          g$fields$9522$1CmlGO)))))
                  (g$get-accessors$9437$1CmlGO
                    (case-lambda
                      ((g$foo$9487$1CmlGO g$fields$9488$1CmlGO)
                       (letrec* ((g$gen-name$9489$1CmlGO
                                   (case-lambda
                                     ((g$x$9520$1CmlGO)
                                      (g$datum->syntax$8316$1CmlGO
                                        g$foo$9487$1CmlGO
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8317$1CmlGO
                                                g$foo$9487$1CmlGO))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8317$1CmlGO
                                                g$x$9520$1CmlGO)))))))))
                         (map (case-lambda
                                ((g$field$9490$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9491$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9492$1CmlGO)
                                         (if (if g$ls/false$9492$1CmlGO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$name$9493$1CmlGO
                                                        g$accessor$9494$1CmlGO
                                                        g$mutator$9495$1CmlGO)
                                                      (g$id?$7925$1CmlGO
                                                        g$accessor$9494$1CmlGO)))
                                                   g$ls/false$9492$1CmlGO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$name$9496$1CmlGO
                                                  g$accessor$9497$1CmlGO
                                                  g$mutator$9498$1CmlGO)
                                                g$accessor$9497$1CmlGO))
                                             g$ls/false$9492$1CmlGO)
                                           ((case-lambda
                                              ((g$t$9499$1CmlGO)
                                               ((case-lambda
                                                  ((g$ls/false$9500$1CmlGO)
                                                   (if (if g$ls/false$9500$1CmlGO
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$name$9501$1CmlGO
                                                                  g$accessor$9502$1CmlGO)
                                                                (g$id?$7925$1CmlGO
                                                                  g$accessor$9502$1CmlGO)))
                                                             g$ls/false$9500$1CmlGO))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$name$9503$1CmlGO
                                                            g$accessor$9504$1CmlGO)
                                                          g$accessor$9504$1CmlGO))
                                                       g$ls/false$9500$1CmlGO)
                                                     ((case-lambda
                                                        ((g$t$9505$1CmlGO)
                                                         ((case-lambda
                                                            ((g$ls/false$9506$1CmlGO)
                                                             (if (if g$ls/false$9506$1CmlGO
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$name$9507$1CmlGO)
                                                                          (g$id?$7925$1CmlGO
                                                                            g$name$9507$1CmlGO)))
                                                                       g$ls/false$9506$1CmlGO))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$name$9508$1CmlGO)
                                                                    (g$gen-name$9489$1CmlGO
                                                                      g$name$9508$1CmlGO)))
                                                                 g$ls/false$9506$1CmlGO)
                                                               ((case-lambda
                                                                  ((g$t$9509$1CmlGO)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9510$1CmlGO)
                                                                       (if (if g$ls/false$9510$1CmlGO
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$name$9511$1CmlGO)
                                                                                    (g$id?$7925$1CmlGO
                                                                                      g$name$9511$1CmlGO)))
                                                                                 g$ls/false$9510$1CmlGO))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$name$9512$1CmlGO)
                                                                              (g$gen-name$9489$1CmlGO
                                                                                g$name$9512$1CmlGO)))
                                                                           g$ls/false$9510$1CmlGO)
                                                                         ((case-lambda
                                                                            ((g$t$9513$1CmlGO)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9514$1CmlGO)
                                                                                 (if (if g$ls/false$9514$1CmlGO
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$name$9515$1CmlGO)
                                                                                              (g$id?$7925$1CmlGO
                                                                                                g$name$9515$1CmlGO)))
                                                                                           g$ls/false$9514$1CmlGO))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$name$9516$1CmlGO)
                                                                                        (g$gen-name$9489$1CmlGO
                                                                                          g$name$9516$1CmlGO)))
                                                                                     g$ls/false$9514$1CmlGO)
                                                                                   ((case-lambda
                                                                                      ((g$t$9517$1CmlGO)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9518$1CmlGO)
                                                                                           (if g$ls/false$9518$1CmlGO
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$others$9519$1CmlGO)
                                                                                                  (g$syntax-violation$8314$1CmlGO
                                                                                                    '#f
                                                                                                    '"invalid field spec"
                                                                                                    g$field$9490$1CmlGO)))
                                                                                               g$ls/false$9518$1CmlGO)
                                                                                             (g$syntax-violation$8314$1CmlGO
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9517$1CmlGO))))
                                                                                        (g$syntax-dispatch$8203$1CmlGO
                                                                                          g$t$9517$1CmlGO
                                                                                          'any))))
                                                                                    g$t$9513$1CmlGO))))
                                                                              (g$syntax-dispatch$8203$1CmlGO
                                                                                g$t$9513$1CmlGO
                                                                                'any))))
                                                                          g$t$9509$1CmlGO))))
                                                                    (g$syntax-dispatch$8203$1CmlGO
                                                                      g$t$9509$1CmlGO
                                                                      '(#(scheme-id
                                                                          immutable)
                                                                        any)))))
                                                                g$t$9505$1CmlGO))))
                                                          (g$syntax-dispatch$8203$1CmlGO
                                                            g$t$9505$1CmlGO
                                                            '(#(scheme-id
                                                                mutable)
                                                              any)))))
                                                      g$t$9499$1CmlGO))))
                                                (g$syntax-dispatch$8203$1CmlGO
                                                  g$t$9499$1CmlGO
                                                  '(#(scheme-id immutable)
                                                    any
                                                    any)))))
                                            g$t$9491$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9491$1CmlGO
                                        '(#(scheme-id mutable) any any any)))))
                                  g$field$9490$1CmlGO)))
                              g$fields$9488$1CmlGO)))))
                  (g$enumerate$9438$1CmlGO
                    (case-lambda
                      ((g$ls$9483$1CmlGO)
                       ((letrec ((g$f$9484$1CmlGO
                                   (case-lambda
                                     ((g$ls$9485$1CmlGO g$i$9486$1CmlGO)
                                      (if (null? g$ls$9485$1CmlGO)
                                        '()
                                        (cons
                                          g$i$9486$1CmlGO
                                          (g$f$9484$1CmlGO
                                            (cdr g$ls$9485$1CmlGO)
                                            (+ g$i$9486$1CmlGO '1))))))))
                          g$f$9484$1CmlGO)
                        g$ls$9483$1CmlGO
                        '0))))
                  (g$do-define-record$9439$1CmlGO
                    (case-lambda
                      ((g$namespec$9463$1CmlGO g$clause*$9464$1CmlGO)
                       ((case-lambda
                          ((g$foo$9465$1CmlGO)
                           ((case-lambda
                              ((g$foo-rtd$9466$1CmlGO)
                               ((case-lambda
                                  ((g$foo-rcd$9467$1CmlGO)
                                   ((case-lambda
                                      ((g$protocol$9468$1CmlGO)
                                       ((case-lambda
                                          ((g$make-foo$9469$1CmlGO)
                                           ((case-lambda
                                              ((g$fields$9470$1CmlGO)
                                               ((case-lambda
                                                  ((g$idx*$9471$1CmlGO)
                                                   ((case-lambda
                                                      ((g$foo-x*$9472$1CmlGO)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$9473$1CmlGO)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$9474$1CmlGO)
                                                               ((case-lambda
                                                                  ((g$foo?$9475$1CmlGO)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$9476$1CmlGO)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$9477$1CmlGO)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$9478$1CmlGO)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$8166$1CmlGO
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$9466$1CmlGO
                                                                                           g$foo-rtd-code$9476$1CmlGO)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$9468$1CmlGO
                                                                                             g$protocol-code$9478$1CmlGO)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$9467$1CmlGO
                                                                                               g$foo-rcd-code$9477$1CmlGO)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$9465$1CmlGO
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$9466$1CmlGO)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$9467$1CmlGO)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$9475$1CmlGO
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$9466$1CmlGO))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$9469$1CmlGO
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$9467$1CmlGO))
                                                                                                   (append
                                                                                                     (map (case-lambda
                                                                                                            ((g$foo-x$9479$1CmlGO
                                                                                                               g$idx$9480$1CmlGO)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$foo-x$9479$1CmlGO
                                                                                                               (list
                                                                                                                 'record-accessor
                                                                                                                 g$foo-rtd$9466$1CmlGO
                                                                                                                 g$idx$9480$1CmlGO))))
                                                                                                          g$foo-x*$9472$1CmlGO
                                                                                                          g$idx*$9471$1CmlGO)
                                                                                                     (map (case-lambda
                                                                                                            ((g$set-foo-x!$9481$1CmlGO
                                                                                                               g$idx$9482$1CmlGO)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$set-foo-x!$9481$1CmlGO
                                                                                                               (list
                                                                                                                 'record-mutator
                                                                                                                 g$foo-rtd$9466$1CmlGO
                                                                                                                 g$idx$9482$1CmlGO))))
                                                                                                          g$set-foo-x!*$9473$1CmlGO
                                                                                                          g$set-foo-idx*$9474$1CmlGO)))))))))))))))
                                                                            (g$get-protocol-code$9433$1CmlGO
                                                                              g$clause*$9464$1CmlGO))))
                                                                        (g$foo-rcd-code$9432$1CmlGO
                                                                          g$clause*$9464$1CmlGO
                                                                          g$foo-rtd$9466$1CmlGO
                                                                          g$protocol$9468$1CmlGO
                                                                          (g$parent-rcd-code$9431$1CmlGO
                                                                            g$clause*$9464$1CmlGO)))))
                                                                    (g$foo-rtd-code$9429$1CmlGO
                                                                      g$foo$9465$1CmlGO
                                                                      g$clause*$9464$1CmlGO
                                                                      (g$parent-rtd-code$9430$1CmlGO
                                                                        g$clause*$9464$1CmlGO)))))
                                                                (g$get-record-predicate-name$9427$1CmlGO
                                                                  g$namespec$9463$1CmlGO))))
                                                            (g$get-mutator-indices$9435$1CmlGO
                                                              g$fields$9470$1CmlGO))))
                                                        (g$get-mutators$9436$1CmlGO
                                                          g$foo$9465$1CmlGO
                                                          g$fields$9470$1CmlGO))))
                                                    (g$get-accessors$9437$1CmlGO
                                                      g$foo$9465$1CmlGO
                                                      g$fields$9470$1CmlGO))))
                                                (g$enumerate$9438$1CmlGO
                                                  g$fields$9470$1CmlGO))))
                                            (g$get-fields$9434$1CmlGO
                                              g$clause*$9464$1CmlGO))))
                                        (g$get-record-constructor-name$9426$1CmlGO
                                          g$namespec$9463$1CmlGO))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$9425$1CmlGO
                          g$namespec$9463$1CmlGO)))))
                  (g$verify-clauses$9440$1CmlGO
                    (case-lambda
                      ((g$x$9445$1CmlGO g$cls*$9446$1CmlGO)
                       (letrec* ((g$valid-kwds$9447$1CmlGO
                                   (map g$bless$8166$1CmlGO
                                        '(fields
                                           parent
                                           parent-rtd
                                           protocol
                                           sealed
                                           opaque
                                           nongenerative)))
                                 (g$free-id-member?$9448$1CmlGO
                                   (case-lambda
                                     ((g$x$9460$1CmlGO g$ls$9461$1CmlGO)
                                      (if (pair? g$ls$9461$1CmlGO)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$9462$1CmlGO)
                                              (if g$t$9462$1CmlGO
                                                g$t$9462$1CmlGO
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$9448$1CmlGO
                                                    g$x$9460$1CmlGO
                                                    (cdr g$ls$9461$1CmlGO))))))
                                           (g$free-id=?$7929$1CmlGO
                                             g$x$9460$1CmlGO
                                             (car g$ls$9461$1CmlGO))))
                                        '#f)))))
                         ((letrec ((g$f$9449$1CmlGO
                                     (case-lambda
                                       ((g$cls*$9450$1CmlGO g$seen*$9451$1CmlGO)
                                        (if (not (null? g$cls*$9450$1CmlGO))
                                          ((case-lambda
                                             ((g$t$9452$1CmlGO)
                                              ((case-lambda
                                                 ((g$ls/false$9453$1CmlGO)
                                                  (if g$ls/false$9453$1CmlGO
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$9454$1CmlGO
                                                           g$rest$9455$1CmlGO)
                                                         (if ((case-lambda
                                                                ((g$t$9456$1CmlGO)
                                                                 (if g$t$9456$1CmlGO
                                                                   g$t$9456$1CmlGO
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$9448$1CmlGO
                                                                            g$kwd$9454$1CmlGO
                                                                            g$valid-kwds$9447$1CmlGO))))))
                                                              (not (g$id?$7925$1CmlGO
                                                                     g$kwd$9454$1CmlGO)))
                                                           (g$syntax-violation$8314$1CmlGO
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$9454$1CmlGO)
                                                           (if (g$bound-id-member?$7932$1CmlGO
                                                                 g$kwd$9454$1CmlGO
                                                                 g$seen*$9451$1CmlGO)
                                                             (g$syntax-violation$8314$1CmlGO
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$9445$1CmlGO
                                                               g$kwd$9454$1CmlGO)
                                                             (g$f$9449$1CmlGO
                                                               (cdr g$cls*$9450$1CmlGO)
                                                               (cons
                                                                 g$kwd$9454$1CmlGO
                                                                 g$seen*$9451$1CmlGO))))))
                                                      g$ls/false$9453$1CmlGO)
                                                    ((case-lambda
                                                       ((g$t$9457$1CmlGO)
                                                        ((case-lambda
                                                           ((g$ls/false$9458$1CmlGO)
                                                            (if g$ls/false$9458$1CmlGO
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$9459$1CmlGO)
                                                                   (g$syntax-violation$8314$1CmlGO
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$9459$1CmlGO)))
                                                                g$ls/false$9458$1CmlGO)
                                                              (g$syntax-violation$8314$1CmlGO
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9457$1CmlGO))))
                                                         (g$syntax-dispatch$8203$1CmlGO
                                                           g$t$9457$1CmlGO
                                                           'any))))
                                                     g$t$9452$1CmlGO))))
                                               (g$syntax-dispatch$8203$1CmlGO
                                                 g$t$9452$1CmlGO
                                                 '(any . any)))))
                                           (car g$cls*$9450$1CmlGO))
                                          (void))))))
                            g$f$9449$1CmlGO)
                          g$cls*$9446$1CmlGO
                          '()))))))
          ((case-lambda
             ((g$t$9441$1CmlGO)
              ((case-lambda
                 ((g$ls/false$9442$1CmlGO)
                  (if g$ls/false$9442$1CmlGO
                    (apply
                      (case-lambda
                        ((g$namespec$9443$1CmlGO g$clause*$9444$1CmlGO)
                         (begin
                           (g$verify-clauses$9440$1CmlGO
                             g$x$9423$1CmlGO
                             g$clause*$9444$1CmlGO)
                           (g$do-define-record$9439$1CmlGO
                             g$namespec$9443$1CmlGO
                             g$clause*$9444$1CmlGO))))
                      g$ls/false$9442$1CmlGO)
                    (g$syntax-violation$8314$1CmlGO
                      '#f
                      '"invalid syntax"
                      g$t$9441$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO
                 g$t$9441$1CmlGO
                 '(_ any . each-any)))))
           g$x$9423$1CmlGO)))))
   (g$define-condition-type-macro$8198$1CmlGO
     g$define-condition-type-macro$11658$1CmlGO
     (case-lambda
       ((g$x$9679$1CmlGO)
        (letrec* ((g$mkname$9680$1CmlGO
                    (case-lambda
                      ((g$name$9703$1CmlGO g$suffix$9704$1CmlGO)
                       (g$datum->syntax$8316$1CmlGO
                         g$name$9703$1CmlGO
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$8317$1CmlGO g$name$9703$1CmlGO))
                             g$suffix$9704$1CmlGO)))))))
          ((case-lambda
             ((g$t$9681$1CmlGO)
              ((case-lambda
                 ((g$ls/false$9682$1CmlGO)
                  (if (if g$ls/false$9682$1CmlGO
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9683$1CmlGO
                                 g$name$9684$1CmlGO
                                 g$super$9685$1CmlGO
                                 g$constructor$9686$1CmlGO
                                 g$predicate$9687$1CmlGO
                                 g$field*$9688$1CmlGO
                                 g$accessor*$9689$1CmlGO)
                               (if (g$id?$7925$1CmlGO g$name$9684$1CmlGO)
                                 (if (g$id?$7925$1CmlGO g$super$9685$1CmlGO)
                                   (if (g$id?$7925$1CmlGO
                                         g$constructor$9686$1CmlGO)
                                     (if (g$id?$7925$1CmlGO
                                           g$predicate$9687$1CmlGO)
                                       (if (g$for-all$5668$1CmlGO
                                             g$id?$7925$1CmlGO
                                             g$field*$9688$1CmlGO)
                                         (begin
                                           '#f
                                           (g$for-all$5668$1CmlGO
                                             g$id?$7925$1CmlGO
                                             g$accessor*$9689$1CmlGO))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9682$1CmlGO))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9690$1CmlGO
                           g$name$9691$1CmlGO
                           g$super$9692$1CmlGO
                           g$constructor$9693$1CmlGO
                           g$predicate$9694$1CmlGO
                           g$field*$9695$1CmlGO
                           g$accessor*$9696$1CmlGO)
                         ((case-lambda
                            ((g$aux-accessor*$9697$1CmlGO)
                             (g$bless$8166$1CmlGO
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9691$1CmlGO
                                         g$constructor$9693$1CmlGO
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9692$1CmlGO)
                                         (cons
                                           (cons
                                             'fields
                                             (map (case-lambda
                                                    ((g$field$9698$1CmlGO
                                                       g$aux$9699$1CmlGO)
                                                     (list
                                                       'immutable
                                                       g$field$9698$1CmlGO
                                                       g$aux$9699$1CmlGO)))
                                                  g$field*$9695$1CmlGO
                                                  g$aux-accessor*$9697$1CmlGO))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9694$1CmlGO
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9691$1CmlGO)))
                                     (map (case-lambda
                                            ((g$accessor$9700$1CmlGO
                                               g$aux$9701$1CmlGO)
                                             (list
                                               'define
                                               g$accessor$9700$1CmlGO
                                               (list
                                                 'condition-accessor
                                                 (list
                                                   'record-type-descriptor
                                                   g$name$9691$1CmlGO)
                                                 g$aux$9701$1CmlGO))))
                                          g$accessor*$9696$1CmlGO
                                          g$aux-accessor*$9697$1CmlGO)))))))
                          (map (case-lambda ((g$x$9702$1CmlGO) (gensym)))
                               g$accessor*$9696$1CmlGO))))
                      g$ls/false$9682$1CmlGO)
                    (g$syntax-violation$8314$1CmlGO
                      '#f
                      '"invalid syntax"
                      g$t$9681$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO
                 g$t$9681$1CmlGO
                 '(any any any any any . #(each (any any)))))))
           g$x$9679$1CmlGO)))))
   (g$incorrect-usage-macro$8199$1CmlGO
     g$incorrect-usage-macro$11659$1CmlGO
     (case-lambda
       ((g$e$9705$1CmlGO)
        (g$syntax-violation$8314$1CmlGO
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9705$1CmlGO))))
   (g$parameterize-macro$8200$1CmlGO
     g$parameterize-macro$11660$1CmlGO
     (case-lambda
       ((g$e$9706$1CmlGO)
        ((case-lambda
           ((g$t$9707$1CmlGO)
            ((case-lambda
               ((g$ls/false$9708$1CmlGO)
                (if g$ls/false$9708$1CmlGO
                  (apply
                    (case-lambda
                      ((g$b$9709$1CmlGO g$b*$9710$1CmlGO)
                       (g$bless$8166$1CmlGO
                         (cons
                           'let
                           (cons
                             '()
                             (cons g$b$9709$1CmlGO g$b*$9710$1CmlGO))))))
                    g$ls/false$9708$1CmlGO)
                  ((case-lambda
                     ((g$t$9711$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$9712$1CmlGO)
                          (if g$ls/false$9712$1CmlGO
                            (apply
                              (case-lambda
                                ((g$olhs*$9713$1CmlGO
                                   g$orhs*$9714$1CmlGO
                                   g$b$9715$1CmlGO
                                   g$b*$9716$1CmlGO)
                                 ((case-lambda
                                    ((g$lhs*$9717$1CmlGO g$rhs*$9718$1CmlGO)
                                     (g$bless$8166$1CmlGO
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9717$1CmlGO
                                             g$rhs*$9718$1CmlGO)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (map (case-lambda
                                                            ((g$lhs$9719$1CmlGO
                                                               g$rhs$9720$1CmlGO)
                                                             (list
                                                               'let
                                                               (list
                                                                 (list
                                                                   't
                                                                   (list
                                                                     g$lhs$9719$1CmlGO)))
                                                               (list
                                                                 g$lhs$9719$1CmlGO
                                                                 g$rhs$9720$1CmlGO)
                                                               (cons
                                                                 'set!
                                                                 (cons
                                                                   g$rhs$9720$1CmlGO
                                                                   '(t))))))
                                                          g$lhs*$9717$1CmlGO
                                                          g$rhs*$9718$1CmlGO)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9715$1CmlGO
                                                         g$b*$9716$1CmlGO)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9713$1CmlGO
                                           g$orhs*$9714$1CmlGO)))))
                                  (g$generate-temporaries$8304$1CmlGO
                                    g$olhs*$9713$1CmlGO)
                                  (g$generate-temporaries$8304$1CmlGO
                                    g$orhs*$9714$1CmlGO))))
                              g$ls/false$9712$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$9711$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$9711$1CmlGO
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9707$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$9707$1CmlGO
               '(_ () any . each-any)))))
         g$e$9706$1CmlGO))))
   (g$foreign-call-transformer$8201$1CmlGO
     g$foreign-call-transformer$11661$1CmlGO
     (case-lambda
       ((g$e$9721$1CmlGO g$r$9722$1CmlGO g$mr$9723$1CmlGO)
        ((case-lambda
           ((g$t$9724$1CmlGO)
            ((case-lambda
               ((g$ls/false$9725$1CmlGO)
                (if g$ls/false$9725$1CmlGO
                  (apply
                    (case-lambda
                      ((g$name$9726$1CmlGO g$arg*$9727$1CmlGO)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$8221$1CmlGO
                             g$name$9726$1CmlGO
                             g$r$9722$1CmlGO
                             g$mr$9723$1CmlGO)
                           (g$chi-expr*$8219$1CmlGO
                             g$arg*$9727$1CmlGO
                             g$r$9722$1CmlGO
                             g$mr$9723$1CmlGO)))))
                    g$ls/false$9725$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$9724$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$9724$1CmlGO
               '(_ any . each-any)))))
         g$e$9721$1CmlGO))))
   (g$convert-pattern$8202$1CmlGO
     g$convert-pattern$11662$1CmlGO
     (case-lambda
       ((g$pattern$9728$1CmlGO g$keys$9729$1CmlGO)
        (letrec* ((g$cvt*$9730$1CmlGO
                    (case-lambda
                      ((g$p*$9810$1CmlGO g$n$9811$1CmlGO g$ids$9812$1CmlGO)
                       (if (null? g$p*$9810$1CmlGO)
                         (values '() g$ids$9812$1CmlGO)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9730$1CmlGO
                                (cdr g$p*$9810$1CmlGO)
                                g$n$9811$1CmlGO
                                g$ids$9812$1CmlGO)))
                           (case-lambda
                             ((g$y$9815$1CmlGO g$ids$9816$1CmlGO)
                              ((case-lambda
                                 ((g$ids$9817$1CmlGO g$y$9818$1CmlGO)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9731$1CmlGO
                                         (car g$p*$9810$1CmlGO)
                                         g$n$9811$1CmlGO
                                         g$ids$9817$1CmlGO)))
                                    (case-lambda
                                      ((g$x$9821$1CmlGO g$ids$9822$1CmlGO)
                                       ((case-lambda
                                          ((g$ids$9823$1CmlGO g$x$9824$1CmlGO)
                                           (values
                                             (cons
                                               g$x$9824$1CmlGO
                                               g$y$9818$1CmlGO)
                                             g$ids$9823$1CmlGO)))
                                        g$ids$9822$1CmlGO
                                        g$x$9821$1CmlGO))))))
                               g$ids$9816$1CmlGO
                               g$y$9815$1CmlGO))))))))
                  (g$cvt$9731$1CmlGO
                    (case-lambda
                      ((g$p$9732$1CmlGO g$n$9733$1CmlGO g$ids$9734$1CmlGO)
                       ((case-lambda
                          ((g$t$9735$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$9736$1CmlGO)
                               (if (if g$ls/false$9736$1CmlGO
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9737$1CmlGO)
                                            (g$id?$7925$1CmlGO
                                              g$id$9737$1CmlGO)))
                                         g$ls/false$9736$1CmlGO))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9738$1CmlGO)
                                      (if (g$bound-id-member?$7932$1CmlGO
                                            g$p$9732$1CmlGO
                                            g$keys$9729$1CmlGO)
                                        (values
                                          (vector 'free-id g$p$9732$1CmlGO)
                                          g$ids$9734$1CmlGO)
                                        (if (g$free-id=?$7929$1CmlGO
                                              g$p$9732$1CmlGO
                                              (g$scheme-stx$8146$1CmlGO '_))
                                          (values '_ g$ids$9734$1CmlGO)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9732$1CmlGO
                                                g$n$9733$1CmlGO)
                                              g$ids$9734$1CmlGO))))))
                                   g$ls/false$9736$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9739$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$9740$1CmlGO)
                                         (if (if g$ls/false$9740$1CmlGO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9741$1CmlGO
                                                        g$dots$9742$1CmlGO)
                                                      (g$ellipsis?$8204$1CmlGO
                                                        g$dots$9742$1CmlGO)))
                                                   g$ls/false$9740$1CmlGO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9743$1CmlGO
                                                  g$dots$9744$1CmlGO)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9731$1CmlGO
                                                       g$p$9743$1CmlGO
                                                       (+ g$n$9733$1CmlGO '1)
                                                       g$ids$9734$1CmlGO)))
                                                  (case-lambda
                                                    ((g$p$9747$1CmlGO
                                                       g$ids$9748$1CmlGO)
                                                     ((case-lambda
                                                        ((g$ids$9749$1CmlGO
                                                           g$p$9750$1CmlGO)
                                                         (values
                                                           (if (eq? g$p$9750$1CmlGO
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9750$1CmlGO))
                                                           g$ids$9749$1CmlGO)))
                                                      g$ids$9748$1CmlGO
                                                      g$p$9747$1CmlGO))))))
                                             g$ls/false$9740$1CmlGO)
                                           ((case-lambda
                                              ((g$t$9751$1CmlGO)
                                               ((case-lambda
                                                  ((g$ls/false$9752$1CmlGO)
                                                   (if (if g$ls/false$9752$1CmlGO
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9753$1CmlGO
                                                                  g$dots$9754$1CmlGO
                                                                  g$ys$9755$1CmlGO
                                                                  g$z$9756$1CmlGO)
                                                                (g$ellipsis?$8204$1CmlGO
                                                                  g$dots$9754$1CmlGO)))
                                                             g$ls/false$9752$1CmlGO))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9757$1CmlGO
                                                            g$dots$9758$1CmlGO
                                                            g$ys$9759$1CmlGO
                                                            g$z$9760$1CmlGO)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9731$1CmlGO
                                                                 g$z$9760$1CmlGO
                                                                 g$n$9733$1CmlGO
                                                                 g$ids$9734$1CmlGO)))
                                                            (case-lambda
                                                              ((g$z$9763$1CmlGO
                                                                 g$ids$9764$1CmlGO)
                                                               ((case-lambda
                                                                  ((g$ids$9765$1CmlGO
                                                                     g$z$9766$1CmlGO)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9730$1CmlGO
                                                                          g$ys$9759$1CmlGO
                                                                          g$n$9733$1CmlGO
                                                                          g$ids$9765$1CmlGO)))
                                                                     (case-lambda
                                                                       ((g$ys$9769$1CmlGO
                                                                          g$ids$9770$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$ids$9771$1CmlGO
                                                                              g$ys$9772$1CmlGO)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9731$1CmlGO
                                                                                   g$x$9757$1CmlGO
                                                                                   (+ g$n$9733$1CmlGO
                                                                                      '1)
                                                                                   g$ids$9771$1CmlGO)))
                                                                              (case-lambda
                                                                                ((g$x$9775$1CmlGO
                                                                                   g$ids$9776$1CmlGO)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9777$1CmlGO
                                                                                       g$x$9778$1CmlGO)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9778$1CmlGO
                                                                                         (reverse
                                                                                           g$ys$9772$1CmlGO)
                                                                                         g$z$9766$1CmlGO)
                                                                                       g$ids$9777$1CmlGO)))
                                                                                  g$ids$9776$1CmlGO
                                                                                  g$x$9775$1CmlGO))))))
                                                                         g$ids$9770$1CmlGO
                                                                         g$ys$9769$1CmlGO))))))
                                                                g$ids$9764$1CmlGO
                                                                g$z$9763$1CmlGO))))))
                                                       g$ls/false$9752$1CmlGO)
                                                     ((case-lambda
                                                        ((g$t$9779$1CmlGO)
                                                         ((case-lambda
                                                            ((g$ls/false$9780$1CmlGO)
                                                             (if g$ls/false$9780$1CmlGO
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9781$1CmlGO
                                                                      g$y$9782$1CmlGO)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9731$1CmlGO
                                                                           g$y$9782$1CmlGO
                                                                           g$n$9733$1CmlGO
                                                                           g$ids$9734$1CmlGO)))
                                                                      (case-lambda
                                                                        ((g$y$9785$1CmlGO
                                                                           g$ids$9786$1CmlGO)
                                                                         ((case-lambda
                                                                            ((g$ids$9787$1CmlGO
                                                                               g$y$9788$1CmlGO)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9731$1CmlGO
                                                                                    g$x$9781$1CmlGO
                                                                                    g$n$9733$1CmlGO
                                                                                    g$ids$9787$1CmlGO)))
                                                                               (case-lambda
                                                                                 ((g$x$9791$1CmlGO
                                                                                    g$ids$9792$1CmlGO)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9793$1CmlGO
                                                                                        g$x$9794$1CmlGO)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9794$1CmlGO
                                                                                          g$y$9788$1CmlGO)
                                                                                        g$ids$9793$1CmlGO)))
                                                                                   g$ids$9792$1CmlGO
                                                                                   g$x$9791$1CmlGO))))))
                                                                          g$ids$9786$1CmlGO
                                                                          g$y$9785$1CmlGO))))))
                                                                 g$ls/false$9780$1CmlGO)
                                                               ((case-lambda
                                                                  ((g$t$9795$1CmlGO)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9796$1CmlGO)
                                                                       (if g$ls/false$9796$1CmlGO
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9734$1CmlGO)))
                                                                           g$ls/false$9796$1CmlGO)
                                                                         ((case-lambda
                                                                            ((g$t$9797$1CmlGO)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9798$1CmlGO)
                                                                                 (if (if g$ls/false$9798$1CmlGO
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9799$1CmlGO)
                                                                                              (not (g$stx?$7897$1CmlGO
                                                                                                     g$p$9799$1CmlGO))))
                                                                                           g$ls/false$9798$1CmlGO))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9800$1CmlGO)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9731$1CmlGO
                                                                                               g$p$9800$1CmlGO
                                                                                               g$n$9733$1CmlGO
                                                                                               g$ids$9734$1CmlGO)))
                                                                                          (case-lambda
                                                                                            ((g$p$9803$1CmlGO
                                                                                               g$ids$9804$1CmlGO)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9805$1CmlGO
                                                                                                   g$p$9806$1CmlGO)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9806$1CmlGO)
                                                                                                   g$ids$9805$1CmlGO)))
                                                                                              g$ids$9804$1CmlGO
                                                                                              g$p$9803$1CmlGO))))))
                                                                                     g$ls/false$9798$1CmlGO)
                                                                                   ((case-lambda
                                                                                      ((g$t$9807$1CmlGO)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9808$1CmlGO)
                                                                                           (if g$ls/false$9808$1CmlGO
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9809$1CmlGO)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7936$1CmlGO
                                                                                                        g$datum$9809$1CmlGO))
                                                                                                    g$ids$9734$1CmlGO)))
                                                                                               g$ls/false$9808$1CmlGO)
                                                                                             (g$syntax-violation$8314$1CmlGO
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9807$1CmlGO))))
                                                                                        (g$syntax-dispatch$8203$1CmlGO
                                                                                          g$t$9807$1CmlGO
                                                                                          'any))))
                                                                                    g$t$9797$1CmlGO))))
                                                                              (g$syntax-dispatch$8203$1CmlGO
                                                                                g$t$9797$1CmlGO
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9795$1CmlGO))))
                                                                    (g$syntax-dispatch$8203$1CmlGO
                                                                      g$t$9795$1CmlGO
                                                                      '()))))
                                                                g$t$9779$1CmlGO))))
                                                          (g$syntax-dispatch$8203$1CmlGO
                                                            g$t$9779$1CmlGO
                                                            '(any . any)))))
                                                      g$t$9751$1CmlGO))))
                                                (g$syntax-dispatch$8203$1CmlGO
                                                  g$t$9751$1CmlGO
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9739$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$9739$1CmlGO
                                        '(any any)))))
                                  g$t$9735$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$9735$1CmlGO
                              'any))))
                        g$p$9732$1CmlGO)))))
          (g$cvt$9731$1CmlGO g$pattern$9728$1CmlGO '0 '())))))
   (g$syntax-dispatch$8203$1CmlGO
     g$syntax-dispatch$11663$1CmlGO
     (case-lambda
       ((g$e$9825$1CmlGO g$p$9826$1CmlGO)
        (letrec* ((g$stx^$9827$1CmlGO
                    (case-lambda
                      ((g$e$9935$1CmlGO
                         g$m*$9936$1CmlGO
                         g$s*$9937$1CmlGO
                         g$ae*$9938$1CmlGO)
                       (if (if (null? g$m*$9936$1CmlGO)
                             (if (null? g$s*$9937$1CmlGO)
                               (begin '#f (null? g$ae*$9938$1CmlGO))
                               '#f)
                             '#f)
                         g$e$9935$1CmlGO
                         (g$mkstx$7913$1CmlGO
                           g$e$9935$1CmlGO
                           g$m*$9936$1CmlGO
                           g$s*$9937$1CmlGO
                           g$ae*$9938$1CmlGO)))))
                  (g$match-each$9828$1CmlGO
                    (case-lambda
                      ((g$e$9919$1CmlGO
                         g$p$9920$1CmlGO
                         g$m*$9921$1CmlGO
                         g$s*$9922$1CmlGO
                         g$ae*$9923$1CmlGO)
                       (if (pair? g$e$9919$1CmlGO)
                         ((case-lambda
                            ((g$first$9924$1CmlGO)
                             (if g$first$9924$1CmlGO
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$9925$1CmlGO)
                                     (if g$rest$9925$1CmlGO
                                       (begin
                                         '#f
                                         (cons
                                           g$first$9924$1CmlGO
                                           g$rest$9925$1CmlGO))
                                       '#f)))
                                  (g$match-each$9828$1CmlGO
                                    (cdr g$e$9919$1CmlGO)
                                    g$p$9920$1CmlGO
                                    g$m*$9921$1CmlGO
                                    g$s*$9922$1CmlGO
                                    g$ae*$9923$1CmlGO)))
                               '#f)))
                          (g$match$9834$1CmlGO
                            (car g$e$9919$1CmlGO)
                            g$p$9920$1CmlGO
                            g$m*$9921$1CmlGO
                            g$s*$9922$1CmlGO
                            g$ae*$9923$1CmlGO
                            '()))
                         (if (null? g$e$9919$1CmlGO)
                           '()
                           (if (g$stx?$7897$1CmlGO g$e$9919$1CmlGO)
                             (if (not (g$top-marked?$7868$1CmlGO
                                        g$m*$9921$1CmlGO))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7912$1CmlGO
                                        g$m*$9921$1CmlGO
                                        g$s*$9922$1CmlGO
                                        g$ae*$9923$1CmlGO
                                        g$e$9919$1CmlGO)))
                                   (case-lambda
                                     ((g$m*$9929$1CmlGO
                                        g$s*$9930$1CmlGO
                                        g$ae*$9931$1CmlGO)
                                      ((case-lambda
                                         ((g$ae*$9932$1CmlGO
                                            g$s*$9933$1CmlGO
                                            g$m*$9934$1CmlGO)
                                          (g$match-each$9828$1CmlGO
                                            (g$stx-expr$7899$1CmlGO
                                              g$e$9919$1CmlGO)
                                            g$p$9920$1CmlGO
                                            g$m*$9934$1CmlGO
                                            g$s*$9933$1CmlGO
                                            g$ae*$9932$1CmlGO)))
                                       g$ae*$9931$1CmlGO
                                       g$s*$9930$1CmlGO
                                       g$m*$9929$1CmlGO)))))
                               '#f)
                             (if (annotation? g$e$9919$1CmlGO)
                               (g$match-each$9828$1CmlGO
                                 (annotation-expression g$e$9919$1CmlGO)
                                 g$p$9920$1CmlGO
                                 g$m*$9921$1CmlGO
                                 g$s*$9922$1CmlGO
                                 g$ae*$9923$1CmlGO)
                               '#f)))))))
                  (g$match-each+$9829$1CmlGO
                    (case-lambda
                      ((g$e$9887$1CmlGO
                         g$x-pat$9888$1CmlGO
                         g$y-pat$9889$1CmlGO
                         g$z-pat$9890$1CmlGO
                         g$m*$9891$1CmlGO
                         g$s*$9892$1CmlGO
                         g$ae*$9893$1CmlGO
                         g$r$9894$1CmlGO)
                       ((letrec ((g$f$9895$1CmlGO
                                   (case-lambda
                                     ((g$e$9896$1CmlGO
                                        g$m*$9897$1CmlGO
                                        g$s*$9898$1CmlGO
                                        g$ae*$9899$1CmlGO)
                                      (if (pair? g$e$9896$1CmlGO)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$9895$1CmlGO
                                               (cdr g$e$9896$1CmlGO)
                                               g$m*$9897$1CmlGO
                                               g$s*$9898$1CmlGO
                                               g$ae*$9899$1CmlGO)))
                                          (case-lambda
                                            ((g$xr*$9903$1CmlGO
                                               g$y-pat$9904$1CmlGO
                                               g$r$9905$1CmlGO)
                                             ((case-lambda
                                                ((g$r$9906$1CmlGO
                                                   g$y-pat$9907$1CmlGO
                                                   g$xr*$9908$1CmlGO)
                                                 (if g$r$9906$1CmlGO
                                                   (if (null?
                                                         g$y-pat$9907$1CmlGO)
                                                     ((case-lambda
                                                        ((g$xr$9909$1CmlGO)
                                                         (if g$xr$9909$1CmlGO
                                                           (values
                                                             (cons
                                                               g$xr$9909$1CmlGO
                                                               g$xr*$9908$1CmlGO)
                                                             g$y-pat$9907$1CmlGO
                                                             g$r$9906$1CmlGO)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$9834$1CmlGO
                                                        (car g$e$9896$1CmlGO)
                                                        g$x-pat$9888$1CmlGO
                                                        g$m*$9897$1CmlGO
                                                        g$s*$9898$1CmlGO
                                                        g$ae*$9899$1CmlGO
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$9907$1CmlGO)
                                                       (g$match$9834$1CmlGO
                                                         (car g$e$9896$1CmlGO)
                                                         (car g$y-pat$9907$1CmlGO)
                                                         g$m*$9897$1CmlGO
                                                         g$s*$9898$1CmlGO
                                                         g$ae*$9899$1CmlGO
                                                         g$r$9906$1CmlGO)))
                                                   (values '#f '#f '#f))))
                                              g$r$9905$1CmlGO
                                              g$y-pat$9904$1CmlGO
                                              g$xr*$9903$1CmlGO))))
                                        (if (g$stx?$7897$1CmlGO g$e$9896$1CmlGO)
                                          (if (g$top-marked?$7868$1CmlGO
                                                g$m*$9897$1CmlGO)
                                            (values
                                              '()
                                              g$y-pat$9889$1CmlGO
                                              (g$match$9834$1CmlGO
                                                g$e$9896$1CmlGO
                                                g$z-pat$9890$1CmlGO
                                                g$m*$9897$1CmlGO
                                                g$s*$9898$1CmlGO
                                                g$ae*$9899$1CmlGO
                                                g$r$9894$1CmlGO))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$7912$1CmlGO
                                                   g$m*$9897$1CmlGO
                                                   g$s*$9898$1CmlGO
                                                   g$ae*$9899$1CmlGO
                                                   g$e$9896$1CmlGO)))
                                              (case-lambda
                                                ((g$m*$9913$1CmlGO
                                                   g$s*$9914$1CmlGO
                                                   g$ae*$9915$1CmlGO)
                                                 ((case-lambda
                                                    ((g$ae*$9916$1CmlGO
                                                       g$s*$9917$1CmlGO
                                                       g$m*$9918$1CmlGO)
                                                     (g$f$9895$1CmlGO
                                                       (g$stx-expr$7899$1CmlGO
                                                         g$e$9896$1CmlGO)
                                                       g$m*$9918$1CmlGO
                                                       g$s*$9917$1CmlGO
                                                       g$ae*$9916$1CmlGO)))
                                                  g$ae*$9915$1CmlGO
                                                  g$s*$9914$1CmlGO
                                                  g$m*$9913$1CmlGO)))))
                                          (if (annotation? g$e$9896$1CmlGO)
                                            (g$f$9895$1CmlGO
                                              (annotation-expression
                                                g$e$9896$1CmlGO)
                                              g$m*$9897$1CmlGO
                                              g$s*$9898$1CmlGO
                                              g$ae*$9899$1CmlGO)
                                            (values
                                              '()
                                              g$y-pat$9889$1CmlGO
                                              (g$match$9834$1CmlGO
                                                g$e$9896$1CmlGO
                                                g$z-pat$9890$1CmlGO
                                                g$m*$9897$1CmlGO
                                                g$s*$9898$1CmlGO
                                                g$ae*$9899$1CmlGO
                                                g$r$9894$1CmlGO)))))))))
                          g$f$9895$1CmlGO)
                        g$e$9887$1CmlGO
                        g$m*$9891$1CmlGO
                        g$s*$9892$1CmlGO
                        g$ae*$9893$1CmlGO))))
                  (g$match-each-any$9830$1CmlGO
                    (case-lambda
                      ((g$e$9873$1CmlGO
                         g$m*$9874$1CmlGO
                         g$s*$9875$1CmlGO
                         g$ae*$9876$1CmlGO)
                       (if (pair? g$e$9873$1CmlGO)
                         ((case-lambda
                            ((g$l$9877$1CmlGO)
                             (if g$l$9877$1CmlGO
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$9827$1CmlGO
                                     (car g$e$9873$1CmlGO)
                                     g$m*$9874$1CmlGO
                                     g$s*$9875$1CmlGO
                                     g$ae*$9876$1CmlGO)
                                   g$l$9877$1CmlGO))
                               '#f)))
                          (g$match-each-any$9830$1CmlGO
                            (cdr g$e$9873$1CmlGO)
                            g$m*$9874$1CmlGO
                            g$s*$9875$1CmlGO
                            g$ae*$9876$1CmlGO))
                         (if (null? g$e$9873$1CmlGO)
                           '()
                           (if (g$stx?$7897$1CmlGO g$e$9873$1CmlGO)
                             (if (not (g$top-marked?$7868$1CmlGO
                                        g$m*$9874$1CmlGO))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7912$1CmlGO
                                        g$m*$9874$1CmlGO
                                        g$s*$9875$1CmlGO
                                        g$ae*$9876$1CmlGO
                                        g$e$9873$1CmlGO)))
                                   (case-lambda
                                     ((g$m*$9881$1CmlGO
                                        g$s*$9882$1CmlGO
                                        g$ae*$9883$1CmlGO)
                                      ((case-lambda
                                         ((g$ae*$9884$1CmlGO
                                            g$s*$9885$1CmlGO
                                            g$m*$9886$1CmlGO)
                                          (g$match-each-any$9830$1CmlGO
                                            (g$stx-expr$7899$1CmlGO
                                              g$e$9873$1CmlGO)
                                            g$m*$9886$1CmlGO
                                            g$s*$9885$1CmlGO
                                            g$ae*$9884$1CmlGO)))
                                       g$ae*$9883$1CmlGO
                                       g$s*$9882$1CmlGO
                                       g$m*$9881$1CmlGO)))))
                               '#f)
                             (if (annotation? g$e$9873$1CmlGO)
                               (g$match-each-any$9830$1CmlGO
                                 (annotation-expression g$e$9873$1CmlGO)
                                 g$m*$9874$1CmlGO
                                 g$s*$9875$1CmlGO
                                 g$ae*$9876$1CmlGO)
                               '#f)))))))
                  (g$match-empty$9831$1CmlGO
                    (case-lambda
                      ((g$p$9870$1CmlGO g$r$9871$1CmlGO)
                       (if (null? g$p$9870$1CmlGO)
                         g$r$9871$1CmlGO
                         (if (eq? g$p$9870$1CmlGO '_)
                           g$r$9871$1CmlGO
                           (if (eq? g$p$9870$1CmlGO 'any)
                             (cons '() g$r$9871$1CmlGO)
                             (if (pair? g$p$9870$1CmlGO)
                               (g$match-empty$9831$1CmlGO
                                 (car g$p$9870$1CmlGO)
                                 (g$match-empty$9831$1CmlGO
                                   (cdr g$p$9870$1CmlGO)
                                   g$r$9871$1CmlGO))
                               (if (eq? g$p$9870$1CmlGO 'each-any)
                                 (cons '() g$r$9871$1CmlGO)
                                 ((case-lambda
                                    ((g$t$9872$1CmlGO)
                                     (if (g$memv$5663$1CmlGO
                                           g$t$9872$1CmlGO
                                           '(each))
                                       (g$match-empty$9831$1CmlGO
                                         (vector-ref g$p$9870$1CmlGO '1)
                                         g$r$9871$1CmlGO)
                                       (if (g$memv$5663$1CmlGO
                                             g$t$9872$1CmlGO
                                             '(each+))
                                         (g$match-empty$9831$1CmlGO
                                           (vector-ref g$p$9870$1CmlGO '1)
                                           (g$match-empty$9831$1CmlGO
                                             (reverse
                                               (vector-ref g$p$9870$1CmlGO '2))
                                             (g$match-empty$9831$1CmlGO
                                               (vector-ref g$p$9870$1CmlGO '3)
                                               g$r$9871$1CmlGO)))
                                         (if (g$memv$5663$1CmlGO
                                               g$t$9872$1CmlGO
                                               '(free-id atom))
                                           g$r$9871$1CmlGO
                                           (if (g$memv$5663$1CmlGO
                                                 g$t$9872$1CmlGO
                                                 '(scheme-id atom))
                                             g$r$9871$1CmlGO
                                             (if (g$memv$5663$1CmlGO
                                                   g$t$9872$1CmlGO
                                                   '(vector))
                                               (g$match-empty$9831$1CmlGO
                                                 (vector-ref g$p$9870$1CmlGO '1)
                                                 g$r$9871$1CmlGO)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$9870$1CmlGO))))))))
                                  (vector-ref g$p$9870$1CmlGO '0))))))))))
                  (g$combine$9832$1CmlGO
                    (case-lambda
                      ((g$r*$9868$1CmlGO g$r$9869$1CmlGO)
                       (if (null? (car g$r*$9868$1CmlGO))
                         g$r$9869$1CmlGO
                         (cons
                           (map car g$r*$9868$1CmlGO)
                           (g$combine$9832$1CmlGO
                             (map cdr g$r*$9868$1CmlGO)
                             g$r$9869$1CmlGO))))))
                  (g$match*$9833$1CmlGO
                    (case-lambda
                      ((g$e$9850$1CmlGO
                         g$p$9851$1CmlGO
                         g$m*$9852$1CmlGO
                         g$s*$9853$1CmlGO
                         g$ae*$9854$1CmlGO
                         g$r$9855$1CmlGO)
                       (if (null? g$p$9851$1CmlGO)
                         (if (null? g$e$9850$1CmlGO)
                           (begin '#f g$r$9855$1CmlGO)
                           '#f)
                         (if (pair? g$p$9851$1CmlGO)
                           (if (pair? g$e$9850$1CmlGO)
                             (begin
                               '#f
                               (g$match$9834$1CmlGO
                                 (car g$e$9850$1CmlGO)
                                 (car g$p$9851$1CmlGO)
                                 g$m*$9852$1CmlGO
                                 g$s*$9853$1CmlGO
                                 g$ae*$9854$1CmlGO
                                 (g$match$9834$1CmlGO
                                   (cdr g$e$9850$1CmlGO)
                                   (cdr g$p$9851$1CmlGO)
                                   g$m*$9852$1CmlGO
                                   g$s*$9853$1CmlGO
                                   g$ae*$9854$1CmlGO
                                   g$r$9855$1CmlGO)))
                             '#f)
                           (if (eq? g$p$9851$1CmlGO 'each-any)
                             ((case-lambda
                                ((g$l$9856$1CmlGO)
                                 (if g$l$9856$1CmlGO
                                   (begin
                                     '#f
                                     (cons g$l$9856$1CmlGO g$r$9855$1CmlGO))
                                   '#f)))
                              (g$match-each-any$9830$1CmlGO
                                g$e$9850$1CmlGO
                                g$m*$9852$1CmlGO
                                g$s*$9853$1CmlGO
                                g$ae*$9854$1CmlGO))
                             ((case-lambda
                                ((g$t$9857$1CmlGO)
                                 (if (g$memv$5663$1CmlGO
                                       g$t$9857$1CmlGO
                                       '(each))
                                   (if (null? g$e$9850$1CmlGO)
                                     (g$match-empty$9831$1CmlGO
                                       (vector-ref g$p$9851$1CmlGO '1)
                                       g$r$9855$1CmlGO)
                                     ((case-lambda
                                        ((g$r*$9858$1CmlGO)
                                         (if g$r*$9858$1CmlGO
                                           (begin
                                             '#f
                                             (g$combine$9832$1CmlGO
                                               g$r*$9858$1CmlGO
                                               g$r$9855$1CmlGO))
                                           '#f)))
                                      (g$match-each$9828$1CmlGO
                                        g$e$9850$1CmlGO
                                        (vector-ref g$p$9851$1CmlGO '1)
                                        g$m*$9852$1CmlGO
                                        g$s*$9853$1CmlGO
                                        g$ae*$9854$1CmlGO)))
                                   (if (g$memv$5663$1CmlGO
                                         g$t$9857$1CmlGO
                                         '(free-id))
                                     (if (symbol? g$e$9850$1CmlGO)
                                       (if (g$top-marked?$7868$1CmlGO
                                             g$m*$9852$1CmlGO)
                                         (if (g$free-id=?$7929$1CmlGO
                                               (g$stx^$9827$1CmlGO
                                                 g$e$9850$1CmlGO
                                                 g$m*$9852$1CmlGO
                                                 g$s*$9853$1CmlGO
                                                 g$ae*$9854$1CmlGO)
                                               (vector-ref g$p$9851$1CmlGO '1))
                                           (begin '#f g$r$9855$1CmlGO)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (g$memv$5663$1CmlGO
                                           g$t$9857$1CmlGO
                                           '(scheme-id))
                                       (if (symbol? g$e$9850$1CmlGO)
                                         (if (g$top-marked?$7868$1CmlGO
                                               g$m*$9852$1CmlGO)
                                           (if (g$free-id=?$7929$1CmlGO
                                                 (g$stx^$9827$1CmlGO
                                                   g$e$9850$1CmlGO
                                                   g$m*$9852$1CmlGO
                                                   g$s*$9853$1CmlGO
                                                   g$ae*$9854$1CmlGO)
                                                 (g$scheme-stx$8146$1CmlGO
                                                   (vector-ref
                                                     g$p$9851$1CmlGO
                                                     '1)))
                                             (begin '#f g$r$9855$1CmlGO)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (g$memv$5663$1CmlGO
                                             g$t$9857$1CmlGO
                                             '(each+))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$9829$1CmlGO
                                                g$e$9850$1CmlGO
                                                (vector-ref g$p$9851$1CmlGO '1)
                                                (vector-ref g$p$9851$1CmlGO '2)
                                                (vector-ref g$p$9851$1CmlGO '3)
                                                g$m*$9852$1CmlGO
                                                g$s*$9853$1CmlGO
                                                g$ae*$9854$1CmlGO
                                                g$r$9855$1CmlGO)))
                                           (case-lambda
                                             ((g$xr*$9862$1CmlGO
                                                g$y-pat$9863$1CmlGO
                                                g$r$9864$1CmlGO)
                                              ((case-lambda
                                                 ((g$r$9865$1CmlGO
                                                    g$y-pat$9866$1CmlGO
                                                    g$xr*$9867$1CmlGO)
                                                  (if g$r$9865$1CmlGO
                                                    (if (null?
                                                          g$y-pat$9866$1CmlGO)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$9867$1CmlGO)
                                                          (g$match-empty$9831$1CmlGO
                                                            (vector-ref
                                                              g$p$9851$1CmlGO
                                                              '1)
                                                            g$r$9865$1CmlGO)
                                                          (g$combine$9832$1CmlGO
                                                            g$xr*$9867$1CmlGO
                                                            g$r$9865$1CmlGO)))
                                                      '#f)
                                                    '#f)))
                                               g$r$9864$1CmlGO
                                               g$y-pat$9863$1CmlGO
                                               g$xr*$9862$1CmlGO))))
                                         (if (g$memv$5663$1CmlGO
                                               g$t$9857$1CmlGO
                                               '(atom))
                                           (if (equal?
                                                 (vector-ref g$p$9851$1CmlGO '1)
                                                 (g$strip$7935$1CmlGO
                                                   g$e$9850$1CmlGO
                                                   g$m*$9852$1CmlGO))
                                             (begin '#f g$r$9855$1CmlGO)
                                             '#f)
                                           (if (g$memv$5663$1CmlGO
                                                 g$t$9857$1CmlGO
                                                 '(vector))
                                             (if (vector? g$e$9850$1CmlGO)
                                               (begin
                                                 '#f
                                                 (g$match$9834$1CmlGO
                                                   (vector->list
                                                     g$e$9850$1CmlGO)
                                                   (vector-ref
                                                     g$p$9851$1CmlGO
                                                     '1)
                                                   g$m*$9852$1CmlGO
                                                   g$s*$9853$1CmlGO
                                                   g$ae*$9854$1CmlGO
                                                   g$r$9855$1CmlGO))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$9851$1CmlGO)))))))))
                              (vector-ref g$p$9851$1CmlGO '0))))))))
                  (g$match$9834$1CmlGO
                    (case-lambda
                      ((g$e$9835$1CmlGO
                         g$p$9836$1CmlGO
                         g$m*$9837$1CmlGO
                         g$s*$9838$1CmlGO
                         g$ae*$9839$1CmlGO
                         g$r$9840$1CmlGO)
                       (if (not g$r$9840$1CmlGO)
                         '#f
                         (if (eq? g$p$9836$1CmlGO '_)
                           g$r$9840$1CmlGO
                           (if (eq? g$p$9836$1CmlGO 'any)
                             (cons
                               (g$stx^$9827$1CmlGO
                                 g$e$9835$1CmlGO
                                 g$m*$9837$1CmlGO
                                 g$s*$9838$1CmlGO
                                 g$ae*$9839$1CmlGO)
                               g$r$9840$1CmlGO)
                             (if (g$stx?$7897$1CmlGO g$e$9835$1CmlGO)
                               (if (not (g$top-marked?$7868$1CmlGO
                                          g$m*$9837$1CmlGO))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$7912$1CmlGO
                                          g$m*$9837$1CmlGO
                                          g$s*$9838$1CmlGO
                                          g$ae*$9839$1CmlGO
                                          g$e$9835$1CmlGO)))
                                     (case-lambda
                                       ((g$m*$9844$1CmlGO
                                          g$s*$9845$1CmlGO
                                          g$ae*$9846$1CmlGO)
                                        ((case-lambda
                                           ((g$ae*$9847$1CmlGO
                                              g$s*$9848$1CmlGO
                                              g$m*$9849$1CmlGO)
                                            (g$match$9834$1CmlGO
                                              (g$stx-expr$7899$1CmlGO
                                                g$e$9835$1CmlGO)
                                              g$p$9836$1CmlGO
                                              g$m*$9849$1CmlGO
                                              g$s*$9848$1CmlGO
                                              g$ae*$9847$1CmlGO
                                              g$r$9840$1CmlGO)))
                                         g$ae*$9846$1CmlGO
                                         g$s*$9845$1CmlGO
                                         g$m*$9844$1CmlGO)))))
                                 '#f)
                               (if (annotation? g$e$9835$1CmlGO)
                                 (g$match$9834$1CmlGO
                                   (annotation-expression g$e$9835$1CmlGO)
                                   g$p$9836$1CmlGO
                                   g$m*$9837$1CmlGO
                                   g$s*$9838$1CmlGO
                                   g$ae*$9839$1CmlGO
                                   g$r$9840$1CmlGO)
                                 (g$match*$9833$1CmlGO
                                   g$e$9835$1CmlGO
                                   g$p$9836$1CmlGO
                                   g$m*$9837$1CmlGO
                                   g$s*$9838$1CmlGO
                                   g$ae*$9839$1CmlGO
                                   g$r$9840$1CmlGO))))))))))
          (g$match$9834$1CmlGO
            g$e$9825$1CmlGO
            g$p$9826$1CmlGO
            '()
            '()
            '()
            '())))))
   (g$ellipsis?$8204$1CmlGO
     g$ellipsis?$11664$1CmlGO
     (case-lambda
       ((g$x$9939$1CmlGO)
        (if (g$id?$7925$1CmlGO g$x$9939$1CmlGO)
          (begin
            '#f
            (g$free-id=?$7929$1CmlGO
              g$x$9939$1CmlGO
              (g$scheme-stx$8146$1CmlGO '...)))
          '#f))))
   (g$underscore?$8205$1CmlGO
     g$underscore?$11665$1CmlGO
     (case-lambda
       ((g$x$9940$1CmlGO)
        (if (g$id?$7925$1CmlGO g$x$9940$1CmlGO)
          (begin
            '#f
            (g$free-id=?$7929$1CmlGO
              g$x$9940$1CmlGO
              (g$scheme-stx$8146$1CmlGO '_)))
          '#f))))
   (g$verify-literals$8206$1CmlGO
     g$verify-literals$11666$1CmlGO
     (case-lambda
       ((g$lits$9941$1CmlGO g$expr$9942$1CmlGO)
        (for-each
          (case-lambda
            ((g$x$9943$1CmlGO)
             (if ((case-lambda
                    ((g$t$9944$1CmlGO)
                     (if g$t$9944$1CmlGO
                       g$t$9944$1CmlGO
                       ((case-lambda
                          ((g$t$9945$1CmlGO)
                           (if g$t$9945$1CmlGO
                             g$t$9945$1CmlGO
                             (begin
                               '#f
                               (g$underscore?$8205$1CmlGO g$x$9943$1CmlGO)))))
                        (g$ellipsis?$8204$1CmlGO g$x$9943$1CmlGO)))))
                  (not (g$id?$7925$1CmlGO g$x$9943$1CmlGO)))
               (g$syntax-violation$8314$1CmlGO
                 '#f
                 '"invalid literal"
                 g$expr$9942$1CmlGO
                 g$x$9943$1CmlGO)
               (void))))
          g$lits$9941$1CmlGO))))
   (g$syntax-case-transformer$8207$1CmlGO
     g$syntax-case-transformer$11667$1CmlGO
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9946$1CmlGO
                     (case-lambda
                       ((g$pvars$10003$1CmlGO
                          g$expr$10004$1CmlGO
                          g$y$10005$1CmlGO
                          g$r$10006$1CmlGO
                          g$mr$10007$1CmlGO)
                        ((case-lambda
                           ((g$ids$10008$1CmlGO g$levels$10009$1CmlGO)
                            ((case-lambda
                               ((g$labels$10010$1CmlGO g$new-vars$10011$1CmlGO)
                                ((case-lambda
                                   ((g$body$10012$1CmlGO)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7856$1CmlGO
                                        '#f
                                        g$new-vars$10011$1CmlGO
                                        g$body$10012$1CmlGO)
                                      g$y$10005$1CmlGO)))
                                 (g$chi-expr$8221$1CmlGO
                                   (g$add-subst$7915$1CmlGO
                                     (g$make-full-rib$7893$1CmlGO
                                       g$ids$10008$1CmlGO
                                       g$labels$10010$1CmlGO)
                                     g$expr$10004$1CmlGO)
                                   (append
                                     (map (case-lambda
                                            ((g$label$10013$1CmlGO
                                               g$var$10014$1CmlGO
                                               g$level$10015$1CmlGO)
                                             (cons
                                               g$label$10013$1CmlGO
                                               (g$make-binding$7941$1CmlGO
                                                 'syntax
                                                 (cons
                                                   g$var$10014$1CmlGO
                                                   g$level$10015$1CmlGO)))))
                                          g$labels$10010$1CmlGO
                                          g$new-vars$10011$1CmlGO
                                          (map cdr g$pvars$10003$1CmlGO))
                                     g$r$10006$1CmlGO)
                                   g$mr$10007$1CmlGO))))
                             (map g$gen-label$7871$1CmlGO g$ids$10008$1CmlGO)
                             (map g$gen-lexical$7869$1CmlGO
                                  g$ids$10008$1CmlGO))))
                         (map car g$pvars$10003$1CmlGO)
                         (map cdr g$pvars$10003$1CmlGO)))))
                   (g$invalid-ids-error$9947$1CmlGO
                     (case-lambda
                       ((g$id*$9997$1CmlGO g$e$9998$1CmlGO g$class$9999$1CmlGO)
                        ((letrec ((g$find$10000$1CmlGO
                                    (case-lambda
                                      ((g$id*$10001$1CmlGO g$ok*$10002$1CmlGO)
                                       (if (null? g$id*$10001$1CmlGO)
                                         (g$syntax-violation$8314$1CmlGO
                                           '#f
                                           '"invalid syntax"
                                           g$e$9998$1CmlGO)
                                         (if (g$id?$7925$1CmlGO
                                               (car g$id*$10001$1CmlGO))
                                           (if (g$bound-id-member?$7932$1CmlGO
                                                 (car g$id*$10001$1CmlGO)
                                                 g$ok*$10002$1CmlGO)
                                             (g$syntax-error$8311$1CmlGO
                                               (car g$id*$10001$1CmlGO)
                                               '"duplicate "
                                               g$class$9999$1CmlGO)
                                             (g$find$10000$1CmlGO
                                               (cdr g$id*$10001$1CmlGO)
                                               (cons
                                                 (car g$id*$10001$1CmlGO)
                                                 g$ok*$10002$1CmlGO)))
                                           (g$syntax-error$8311$1CmlGO
                                             (car g$id*$10001$1CmlGO)
                                             '"invalid "
                                             g$class$9999$1CmlGO)))))))
                           g$find$10000$1CmlGO)
                         g$id*$9997$1CmlGO
                         '()))))
                   (g$gen-clause$9948$1CmlGO
                     (case-lambda
                       ((g$x$9977$1CmlGO
                          g$keys$9978$1CmlGO
                          g$clauses$9979$1CmlGO
                          g$r$9980$1CmlGO
                          g$mr$9981$1CmlGO
                          g$pat$9982$1CmlGO
                          g$fender$9983$1CmlGO
                          g$expr$9984$1CmlGO)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$8202$1CmlGO
                               g$pat$9982$1CmlGO
                               g$keys$9978$1CmlGO)))
                          (case-lambda
                            ((g$p$9987$1CmlGO g$pvars$9988$1CmlGO)
                             ((case-lambda
                                ((g$pvars$9989$1CmlGO g$p$9990$1CmlGO)
                                 (if (not (g$distinct-bound-ids?$7931$1CmlGO
                                            (map car g$pvars$9989$1CmlGO)))
                                   (g$invalid-ids-error$9947$1CmlGO
                                     (map car g$pvars$9989$1CmlGO)
                                     g$pat$9982$1CmlGO
                                     '"pattern variable")
                                   (if (not (g$for-all$5668$1CmlGO
                                              (case-lambda
                                                ((g$x$9991$1CmlGO)
                                                 (not (g$ellipsis?$8204$1CmlGO
                                                        (car g$x$9991$1CmlGO)))))
                                              g$pvars$9989$1CmlGO))
                                     (g$syntax-violation$8314$1CmlGO
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9982$1CmlGO)
                                     ((case-lambda
                                        ((g$y$9992$1CmlGO)
                                         ((case-lambda
                                            ((g$test$9993$1CmlGO)
                                             ((case-lambda
                                                ((g$conseq$9994$1CmlGO)
                                                 ((case-lambda
                                                    ((g$altern$9995$1CmlGO)
                                                     (list
                                                       (g$build-lambda$7856$1CmlGO
                                                         '#f
                                                         (list g$y$9992$1CmlGO)
                                                         (list
                                                           'if
                                                           g$test$9993$1CmlGO
                                                           g$conseq$9994$1CmlGO
                                                           g$altern$9995$1CmlGO))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9977$1CmlGO
                                                         (list
                                                           'quote
                                                           g$p$9990$1CmlGO)))))
                                                  (g$gen-syntax-case$9949$1CmlGO
                                                    g$x$9977$1CmlGO
                                                    g$keys$9978$1CmlGO
                                                    g$clauses$9979$1CmlGO
                                                    g$r$9980$1CmlGO
                                                    g$mr$9981$1CmlGO))))
                                              (g$build-dispatch-call$9946$1CmlGO
                                                g$pvars$9989$1CmlGO
                                                g$expr$9984$1CmlGO
                                                g$y$9992$1CmlGO
                                                g$r$9980$1CmlGO
                                                g$mr$9981$1CmlGO))))
                                          (if (eq? g$fender$9983$1CmlGO '#t)
                                            g$y$9992$1CmlGO
                                            ((case-lambda
                                               ((g$call$9996$1CmlGO)
                                                (list
                                                  'if
                                                  g$y$9992$1CmlGO
                                                  g$call$9996$1CmlGO
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9946$1CmlGO
                                               g$pvars$9989$1CmlGO
                                               g$fender$9983$1CmlGO
                                               g$y$9992$1CmlGO
                                               g$r$9980$1CmlGO
                                               g$mr$9981$1CmlGO))))))
                                      (g$gen-lexical$7869$1CmlGO 'tmp))))))
                              g$pvars$9988$1CmlGO
                              g$p$9987$1CmlGO)))))))
                   (g$gen-syntax-case$9949$1CmlGO
                     (case-lambda
                       ((g$x$9960$1CmlGO
                          g$keys$9961$1CmlGO
                          g$clauses$9962$1CmlGO
                          g$r$9963$1CmlGO
                          g$mr$9964$1CmlGO)
                        (if (null? g$clauses$9962$1CmlGO)
                          (list '(primitive syntax-error) g$x$9960$1CmlGO)
                          ((case-lambda
                             ((g$t$9965$1CmlGO)
                              ((case-lambda
                                 ((g$ls/false$9966$1CmlGO)
                                  (if g$ls/false$9966$1CmlGO
                                    (apply
                                      (case-lambda
                                        ((g$pat$9967$1CmlGO g$expr$9968$1CmlGO)
                                         (if (if (g$id?$7925$1CmlGO
                                                   g$pat$9967$1CmlGO)
                                               (if (not (g$bound-id-member?$7932$1CmlGO
                                                          g$pat$9967$1CmlGO
                                                          g$keys$9961$1CmlGO))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$8204$1CmlGO
                                                          g$pat$9967$1CmlGO)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7929$1CmlGO
                                                 g$pat$9967$1CmlGO
                                                 (g$scheme-stx$8146$1CmlGO '_))
                                             (g$chi-expr$8221$1CmlGO
                                               g$expr$9968$1CmlGO
                                               g$r$9963$1CmlGO
                                               g$mr$9964$1CmlGO)
                                             ((case-lambda
                                                ((g$lab$9969$1CmlGO
                                                   g$lex$9970$1CmlGO)
                                                 ((case-lambda
                                                    ((g$body$9971$1CmlGO)
                                                     (list
                                                       (g$build-lambda$7856$1CmlGO
                                                         '#f
                                                         (list
                                                           g$lex$9970$1CmlGO)
                                                         g$body$9971$1CmlGO)
                                                       g$x$9960$1CmlGO)))
                                                  (g$chi-expr$8221$1CmlGO
                                                    (g$add-subst$7915$1CmlGO
                                                      (g$make-full-rib$7893$1CmlGO
                                                        (list g$pat$9967$1CmlGO)
                                                        (list
                                                          g$lab$9969$1CmlGO))
                                                      g$expr$9968$1CmlGO)
                                                    (cons
                                                      (cons
                                                        g$lab$9969$1CmlGO
                                                        (g$make-binding$7941$1CmlGO
                                                          'syntax
                                                          (cons
                                                            g$lex$9970$1CmlGO
                                                            '0)))
                                                      g$r$9963$1CmlGO)
                                                    g$mr$9964$1CmlGO))))
                                              (g$gen-label$7871$1CmlGO
                                                g$pat$9967$1CmlGO)
                                              (g$gen-lexical$7869$1CmlGO
                                                g$pat$9967$1CmlGO)))
                                           (g$gen-clause$9948$1CmlGO
                                             g$x$9960$1CmlGO
                                             g$keys$9961$1CmlGO
                                             (cdr g$clauses$9962$1CmlGO)
                                             g$r$9963$1CmlGO
                                             g$mr$9964$1CmlGO
                                             g$pat$9967$1CmlGO
                                             '#t
                                             g$expr$9968$1CmlGO))))
                                      g$ls/false$9966$1CmlGO)
                                    ((case-lambda
                                       ((g$t$9972$1CmlGO)
                                        ((case-lambda
                                           ((g$ls/false$9973$1CmlGO)
                                            (if g$ls/false$9973$1CmlGO
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9974$1CmlGO
                                                     g$fender$9975$1CmlGO
                                                     g$expr$9976$1CmlGO)
                                                   (g$gen-clause$9948$1CmlGO
                                                     g$x$9960$1CmlGO
                                                     g$keys$9961$1CmlGO
                                                     (cdr g$clauses$9962$1CmlGO)
                                                     g$r$9963$1CmlGO
                                                     g$mr$9964$1CmlGO
                                                     g$pat$9974$1CmlGO
                                                     g$fender$9975$1CmlGO
                                                     g$expr$9976$1CmlGO)))
                                                g$ls/false$9973$1CmlGO)
                                              (g$syntax-violation$8314$1CmlGO
                                                '#f
                                                '"invalid syntax"
                                                g$t$9972$1CmlGO))))
                                         (g$syntax-dispatch$8203$1CmlGO
                                           g$t$9972$1CmlGO
                                           '(any any any)))))
                                     g$t$9965$1CmlGO))))
                               (g$syntax-dispatch$8203$1CmlGO
                                 g$t$9965$1CmlGO
                                 '(any any)))))
                           (car g$clauses$9962$1CmlGO)))))))
           (case-lambda
             ((g$e$9950$1CmlGO g$r$9951$1CmlGO g$mr$9952$1CmlGO)
              ((case-lambda
                 ((g$t$9953$1CmlGO)
                  ((case-lambda
                     ((g$ls/false$9954$1CmlGO)
                      (if g$ls/false$9954$1CmlGO
                        (apply
                          (case-lambda
                            ((g$expr$9955$1CmlGO
                               g$keys$9956$1CmlGO
                               g$clauses$9957$1CmlGO)
                             (begin
                               (g$verify-literals$8206$1CmlGO
                                 g$keys$9956$1CmlGO
                                 g$e$9950$1CmlGO)
                               ((case-lambda
                                  ((g$x$9958$1CmlGO)
                                   ((case-lambda
                                      ((g$body$9959$1CmlGO)
                                       (list
                                         (g$build-lambda$7856$1CmlGO
                                           '#f
                                           (list g$x$9958$1CmlGO)
                                           g$body$9959$1CmlGO)
                                         (g$chi-expr$8221$1CmlGO
                                           g$expr$9955$1CmlGO
                                           g$r$9951$1CmlGO
                                           g$mr$9952$1CmlGO))))
                                    (g$gen-syntax-case$9949$1CmlGO
                                      g$x$9958$1CmlGO
                                      g$keys$9956$1CmlGO
                                      g$clauses$9957$1CmlGO
                                      g$r$9951$1CmlGO
                                      g$mr$9952$1CmlGO))))
                                (g$gen-lexical$7869$1CmlGO 'tmp)))))
                          g$ls/false$9954$1CmlGO)
                        (g$syntax-violation$8314$1CmlGO
                          '#f
                          '"invalid syntax"
                          g$t$9953$1CmlGO))))
                   (g$syntax-dispatch$8203$1CmlGO
                     g$t$9953$1CmlGO
                     '(_ any each-any . each-any)))))
               g$e$9950$1CmlGO))))))))
   (g$ellipsis-map$8208$1CmlGO
     g$ellipsis-map$11668$1CmlGO
     (case-lambda
       ((g$proc$10016$1CmlGO g$ls$10017$1CmlGO . g$ls*$10018$1CmlGO)
        (letrec* ((g$who$10019$1CmlGO '...))
          (begin
            (if (not (list? g$ls$10017$1CmlGO))
              (assertion-violation
                g$who$10019$1CmlGO
                '"not a list"
                g$ls$10017$1CmlGO)
              (void))
            (if (not (null? g$ls*$10018$1CmlGO))
              ((case-lambda
                 ((g$n$10020$1CmlGO)
                  (for-each
                    (case-lambda
                      ((g$x$10021$1CmlGO)
                       (begin
                         (if (not (list? g$x$10021$1CmlGO))
                           (assertion-violation
                             g$who$10019$1CmlGO
                             '"not a list"
                             g$x$10021$1CmlGO)
                           (void))
                         (if (not (= (length g$x$10021$1CmlGO)
                                     g$n$10020$1CmlGO))
                           (assertion-violation
                             g$who$10019$1CmlGO
                             '"length mismatch"
                             g$ls$10017$1CmlGO
                             g$x$10021$1CmlGO)
                           (void)))))
                    g$ls*$10018$1CmlGO)))
               (length g$ls$10017$1CmlGO))
              (void))
            (apply
              map
              g$proc$10016$1CmlGO
              g$ls$10017$1CmlGO
              g$ls*$10018$1CmlGO))))))
   (g$syntax-transformer$8209$1CmlGO
     g$syntax-transformer$11669$1CmlGO
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$10022$1CmlGO
                     (case-lambda
                       ((g$src$10082$1CmlGO
                          g$e$10083$1CmlGO
                          g$r$10084$1CmlGO
                          g$maps$10085$1CmlGO
                          g$ellipsis?$10086$1CmlGO
                          g$vec?$10087$1CmlGO)
                        ((case-lambda
                           ((g$t$10088$1CmlGO)
                            ((case-lambda
                               ((g$ls/false$10089$1CmlGO)
                                (if (if g$ls/false$10089$1CmlGO
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$10090$1CmlGO)
                                             (g$ellipsis?$10086$1CmlGO
                                               g$dots$10090$1CmlGO)))
                                          g$ls/false$10089$1CmlGO))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$10091$1CmlGO)
                                       (g$syntax-violation$8314$1CmlGO
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$10082$1CmlGO)))
                                    g$ls/false$10089$1CmlGO)
                                  ((case-lambda
                                     ((g$t$10092$1CmlGO)
                                      ((case-lambda
                                         ((g$ls/false$10093$1CmlGO)
                                          (if (if g$ls/false$10093$1CmlGO
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$10094$1CmlGO)
                                                       (g$id?$7925$1CmlGO
                                                         g$id$10094$1CmlGO)))
                                                    g$ls/false$10093$1CmlGO))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$10095$1CmlGO)
                                                 ((case-lambda
                                                    ((g$label$10096$1CmlGO)
                                                     ((case-lambda
                                                        ((g$b$10097$1CmlGO)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$7942$1CmlGO
                                                                        g$b$10097$1CmlGO)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$10100$1CmlGO)
                                                                        (g$gen-ref$10023$1CmlGO
                                                                          g$src$10082$1CmlGO
                                                                          (car g$var.lev$10100$1CmlGO)
                                                                          (cdr g$var.lev$10100$1CmlGO)
                                                                          g$maps$10085$1CmlGO)))
                                                                     (g$binding-value$7943$1CmlGO
                                                                       g$b$10097$1CmlGO))))
                                                                 (case-lambda
                                                                   ((g$var$10101$1CmlGO
                                                                      g$maps$10102$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$maps$10103$1CmlGO
                                                                          g$var$10104$1CmlGO)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$10104$1CmlGO)
                                                                          g$maps$10103$1CmlGO)))
                                                                     g$maps$10102$1CmlGO
                                                                     g$var$10101$1CmlGO))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$10083$1CmlGO)
                                                                 g$maps$10085$1CmlGO)))))))
                                                      (g$label->binding$7940$1CmlGO
                                                        g$label$10096$1CmlGO
                                                        g$r$10084$1CmlGO))))
                                                  (g$id->label$7938$1CmlGO
                                                    g$e$10083$1CmlGO))))
                                              g$ls/false$10093$1CmlGO)
                                            ((case-lambda
                                               ((g$t$10105$1CmlGO)
                                                ((case-lambda
                                                   ((g$ls/false$10106$1CmlGO)
                                                    (if (if g$ls/false$10106$1CmlGO
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$10107$1CmlGO
                                                                   g$e$10108$1CmlGO)
                                                                 (g$ellipsis?$10086$1CmlGO
                                                                   g$dots$10107$1CmlGO)))
                                                              g$ls/false$10106$1CmlGO))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$10109$1CmlGO
                                                             g$e$10110$1CmlGO)
                                                           (if g$vec?$10087$1CmlGO
                                                             (g$syntax-violation$8314$1CmlGO
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$10082$1CmlGO)
                                                             (g$gen-syntax$10022$1CmlGO
                                                               g$src$10082$1CmlGO
                                                               g$e$10110$1CmlGO
                                                               g$r$10084$1CmlGO
                                                               g$maps$10085$1CmlGO
                                                               (case-lambda
                                                                 ((g$x$10111$1CmlGO)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$10106$1CmlGO)
                                                      ((case-lambda
                                                         ((g$t$10112$1CmlGO)
                                                          ((case-lambda
                                                             ((g$ls/false$10113$1CmlGO)
                                                              (if (if g$ls/false$10113$1CmlGO
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$10114$1CmlGO
                                                                             g$dots$10115$1CmlGO
                                                                             g$y$10116$1CmlGO)
                                                                           (g$ellipsis?$10086$1CmlGO
                                                                             g$dots$10115$1CmlGO)))
                                                                        g$ls/false$10113$1CmlGO))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$10117$1CmlGO
                                                                       g$dots$10118$1CmlGO
                                                                       g$y$10119$1CmlGO)
                                                                     ((letrec ((g$f$10120$1CmlGO
                                                                                 (case-lambda
                                                                                   ((g$y$10121$1CmlGO
                                                                                      g$k$10122$1CmlGO)
                                                                                    ((case-lambda
                                                                                       ((g$t$10123$1CmlGO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10124$1CmlGO)
                                                                                            (if g$ls/false$10124$1CmlGO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$10122$1CmlGO
                                                                                                     g$maps$10085$1CmlGO)))
                                                                                                g$ls/false$10124$1CmlGO)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10125$1CmlGO)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10126$1CmlGO)
                                                                                                      (if (if g$ls/false$10126$1CmlGO
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$10127$1CmlGO
                                                                                                                     g$y$10128$1CmlGO)
                                                                                                                   (g$ellipsis?$10086$1CmlGO
                                                                                                                     g$dots$10127$1CmlGO)))
                                                                                                                g$ls/false$10126$1CmlGO))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$10129$1CmlGO
                                                                                                               g$y$10130$1CmlGO)
                                                                                                             (g$f$10120$1CmlGO
                                                                                                               g$y$10130$1CmlGO
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$10131$1CmlGO)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$10122$1CmlGO
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$10131$1CmlGO))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$10134$1CmlGO
                                                                                                                         g$maps$10135$1CmlGO)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$10136$1CmlGO
                                                                                                                             g$x$10137$1CmlGO)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$10136$1CmlGO))
                                                                                                                             (g$syntax-violation$8314$1CmlGO
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$10082$1CmlGO)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$10025$1CmlGO
                                                                                                                                 g$x$10137$1CmlGO
                                                                                                                                 (car g$maps$10136$1CmlGO))
                                                                                                                               (cdr g$maps$10136$1CmlGO)))))
                                                                                                                        g$maps$10135$1CmlGO
                                                                                                                        g$x$10134$1CmlGO)))))))))
                                                                                                          g$ls/false$10126$1CmlGO)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$10138$1CmlGO)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$10139$1CmlGO)
                                                                                                                (if g$ls/false$10139$1CmlGO
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$10022$1CmlGO
                                                                                                                              g$src$10082$1CmlGO
                                                                                                                              g$y$10121$1CmlGO
                                                                                                                              g$r$10084$1CmlGO
                                                                                                                              g$maps$10085$1CmlGO
                                                                                                                              g$ellipsis?$10086$1CmlGO
                                                                                                                              g$vec?$10087$1CmlGO)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$10142$1CmlGO
                                                                                                                              g$maps$10143$1CmlGO)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$10144$1CmlGO
                                                                                                                                  g$y$10145$1CmlGO)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$10122$1CmlGO
                                                                                                                                       g$maps$10144$1CmlGO)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$10148$1CmlGO
                                                                                                                                       g$maps$10149$1CmlGO)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$10150$1CmlGO
                                                                                                                                           g$x$10151$1CmlGO)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$10024$1CmlGO
                                                                                                                                             g$x$10151$1CmlGO
                                                                                                                                             g$y$10145$1CmlGO)
                                                                                                                                           g$maps$10150$1CmlGO)))
                                                                                                                                      g$maps$10149$1CmlGO
                                                                                                                                      g$x$10148$1CmlGO))))))
                                                                                                                             g$maps$10143$1CmlGO
                                                                                                                             g$y$10142$1CmlGO))))))
                                                                                                                    g$ls/false$10139$1CmlGO)
                                                                                                                  (g$syntax-violation$8314$1CmlGO
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$10138$1CmlGO))))
                                                                                                             (g$syntax-dispatch$8203$1CmlGO
                                                                                                               g$t$10138$1CmlGO
                                                                                                               '_))))
                                                                                                         g$t$10125$1CmlGO))))
                                                                                                   (g$syntax-dispatch$8203$1CmlGO
                                                                                                     g$t$10125$1CmlGO
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$10123$1CmlGO))))
                                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                                           g$t$10123$1CmlGO
                                                                                           '()))))
                                                                                     g$y$10121$1CmlGO)))))
                                                                        g$f$10120$1CmlGO)
                                                                      g$y$10119$1CmlGO
                                                                      (case-lambda
                                                                        ((g$maps$10152$1CmlGO)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$10022$1CmlGO
                                                                                g$src$10082$1CmlGO
                                                                                g$x$10117$1CmlGO
                                                                                g$r$10084$1CmlGO
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$10152$1CmlGO)
                                                                                g$ellipsis?$10086$1CmlGO
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$10155$1CmlGO
                                                                                g$maps$10156$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$maps$10157$1CmlGO
                                                                                    g$x$10158$1CmlGO)
                                                                                  (if (null?
                                                                                        (car g$maps$10157$1CmlGO))
                                                                                    (g$syntax-violation$8314$1CmlGO
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$10082$1CmlGO)
                                                                                    (values
                                                                                      (g$gen-map$10026$1CmlGO
                                                                                        g$x$10158$1CmlGO
                                                                                        (car g$maps$10157$1CmlGO))
                                                                                      (cdr g$maps$10157$1CmlGO)))))
                                                                               g$maps$10156$1CmlGO
                                                                               g$x$10155$1CmlGO)))))))))
                                                                  g$ls/false$10113$1CmlGO)
                                                                ((case-lambda
                                                                   ((g$t$10159$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10160$1CmlGO)
                                                                        (if g$ls/false$10160$1CmlGO
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$10161$1CmlGO
                                                                                 g$y$10162$1CmlGO)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$10022$1CmlGO
                                                                                      g$src$10082$1CmlGO
                                                                                      g$x$10161$1CmlGO
                                                                                      g$r$10084$1CmlGO
                                                                                      g$maps$10085$1CmlGO
                                                                                      g$ellipsis?$10086$1CmlGO
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$10165$1CmlGO
                                                                                      g$maps$10166$1CmlGO)
                                                                                    ((case-lambda
                                                                                       ((g$maps$10167$1CmlGO
                                                                                          g$xnew$10168$1CmlGO)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$10022$1CmlGO
                                                                                               g$src$10082$1CmlGO
                                                                                               g$y$10162$1CmlGO
                                                                                               g$r$10084$1CmlGO
                                                                                               g$maps$10167$1CmlGO
                                                                                               g$ellipsis?$10086$1CmlGO
                                                                                               g$vec?$10087$1CmlGO)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$10171$1CmlGO
                                                                                               g$maps$10172$1CmlGO)
                                                                                             ((case-lambda
                                                                                                ((g$maps$10173$1CmlGO
                                                                                                   g$ynew$10174$1CmlGO)
                                                                                                 (values
                                                                                                   (g$gen-cons$10027$1CmlGO
                                                                                                     g$e$10083$1CmlGO
                                                                                                     g$x$10161$1CmlGO
                                                                                                     g$y$10162$1CmlGO
                                                                                                     g$xnew$10168$1CmlGO
                                                                                                     g$ynew$10174$1CmlGO)
                                                                                                   g$maps$10173$1CmlGO)))
                                                                                              g$maps$10172$1CmlGO
                                                                                              g$ynew$10171$1CmlGO))))))
                                                                                     g$maps$10166$1CmlGO
                                                                                     g$xnew$10165$1CmlGO))))))
                                                                            g$ls/false$10160$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$t$10175$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10176$1CmlGO)
                                                                                  (if g$ls/false$10176$1CmlGO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$10177$1CmlGO)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$10022$1CmlGO
                                                                                                g$src$10082$1CmlGO
                                                                                                g$ls$10177$1CmlGO
                                                                                                g$r$10084$1CmlGO
                                                                                                g$maps$10085$1CmlGO
                                                                                                g$ellipsis?$10086$1CmlGO
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$10180$1CmlGO
                                                                                                g$maps$10181$1CmlGO)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$10182$1CmlGO
                                                                                                    g$lsnew$10183$1CmlGO)
                                                                                                  (values
                                                                                                    (g$gen-vector$10028$1CmlGO
                                                                                                      g$e$10083$1CmlGO
                                                                                                      g$ls$10177$1CmlGO
                                                                                                      g$lsnew$10183$1CmlGO)
                                                                                                    g$maps$10182$1CmlGO)))
                                                                                               g$maps$10181$1CmlGO
                                                                                               g$lsnew$10180$1CmlGO))))))
                                                                                      g$ls/false$10176$1CmlGO)
                                                                                    ((case-lambda
                                                                                       ((g$t$10184$1CmlGO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10185$1CmlGO)
                                                                                            (if g$ls/false$10185$1CmlGO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$10083$1CmlGO)
                                                                                                     g$maps$10085$1CmlGO)))
                                                                                                g$ls/false$10185$1CmlGO)
                                                                                              (g$syntax-violation$8314$1CmlGO
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$10184$1CmlGO))))
                                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                                           g$t$10184$1CmlGO
                                                                                           '_))))
                                                                                     g$t$10175$1CmlGO))))
                                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                                 g$t$10175$1CmlGO
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$10159$1CmlGO))))
                                                                     (g$syntax-dispatch$8203$1CmlGO
                                                                       g$t$10159$1CmlGO
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$10112$1CmlGO))))
                                                           (g$syntax-dispatch$8203$1CmlGO
                                                             g$t$10112$1CmlGO
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$10105$1CmlGO))))
                                                 (g$syntax-dispatch$8203$1CmlGO
                                                   g$t$10105$1CmlGO
                                                   '(any any)))))
                                             g$t$10092$1CmlGO))))
                                       (g$syntax-dispatch$8203$1CmlGO
                                         g$t$10092$1CmlGO
                                         'any))))
                                   g$t$10088$1CmlGO))))
                             (g$syntax-dispatch$8203$1CmlGO
                               g$t$10088$1CmlGO
                               'any))))
                         g$e$10083$1CmlGO))))
                   (g$gen-ref$10023$1CmlGO
                     (case-lambda
                       ((g$src$10069$1CmlGO
                          g$var$10070$1CmlGO
                          g$level$10071$1CmlGO
                          g$maps$10072$1CmlGO)
                        (if (= g$level$10071$1CmlGO '0)
                          (values g$var$10070$1CmlGO g$maps$10072$1CmlGO)
                          (if (null? g$maps$10072$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$10069$1CmlGO)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$10023$1CmlGO
                                   g$src$10069$1CmlGO
                                   g$var$10070$1CmlGO
                                   (- g$level$10071$1CmlGO '1)
                                   (cdr g$maps$10072$1CmlGO))))
                              (case-lambda
                                ((g$outer-var$10075$1CmlGO
                                   g$outer-maps$10076$1CmlGO)
                                 ((case-lambda
                                    ((g$outer-maps$10077$1CmlGO
                                       g$outer-var$10078$1CmlGO)
                                     ((case-lambda
                                        ((g$t$10079$1CmlGO)
                                         (if g$t$10079$1CmlGO
                                           ((case-lambda
                                              ((g$b$10080$1CmlGO)
                                               (values
                                                 (cdr g$b$10080$1CmlGO)
                                                 g$maps$10072$1CmlGO)))
                                            g$t$10079$1CmlGO)
                                           ((case-lambda
                                              ((g$inner-var$10081$1CmlGO)
                                               (values
                                                 g$inner-var$10081$1CmlGO
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$10078$1CmlGO
                                                       g$inner-var$10081$1CmlGO)
                                                     (car g$maps$10072$1CmlGO))
                                                   g$outer-maps$10077$1CmlGO))))
                                            (g$gen-lexical$7869$1CmlGO 'tmp)))))
                                      (g$assq$5658$1CmlGO
                                        g$outer-var$10078$1CmlGO
                                        (car g$maps$10072$1CmlGO)))))
                                  g$outer-maps$10076$1CmlGO
                                  g$outer-var$10075$1CmlGO)))))))))
                   (g$gen-append$10024$1CmlGO
                     (case-lambda
                       ((g$x$10067$1CmlGO g$y$10068$1CmlGO)
                        (if (equal? g$y$10068$1CmlGO ''())
                          g$x$10067$1CmlGO
                          (list 'append g$x$10067$1CmlGO g$y$10068$1CmlGO)))))
                   (g$gen-mappend$10025$1CmlGO
                     (case-lambda
                       ((g$e$10065$1CmlGO g$map-env$10066$1CmlGO)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$10026$1CmlGO
                            g$e$10065$1CmlGO
                            g$map-env$10066$1CmlGO)))))
                   (g$gen-map$10026$1CmlGO
                     (case-lambda
                       ((g$e$10056$1CmlGO g$map-env$10057$1CmlGO)
                        ((case-lambda
                           ((g$formals$10058$1CmlGO g$actuals$10059$1CmlGO)
                            (if (eq? (car g$e$10056$1CmlGO) 'ref)
                              (car g$actuals$10059$1CmlGO)
                              (if (g$for-all$5668$1CmlGO
                                    (case-lambda
                                      ((g$x$10060$1CmlGO)
                                       (if (eq? (car g$x$10060$1CmlGO) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5662$1CmlGO
                                             (g$cadr$5832$1CmlGO
                                               g$x$10060$1CmlGO)
                                             g$formals$10058$1CmlGO))
                                         '#f)))
                                    (cdr g$e$10056$1CmlGO))
                                ((case-lambda
                                   ((g$args$10061$1CmlGO)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$10056$1CmlGO))
                                        g$args$10061$1CmlGO))))
                                 (map ((case-lambda
                                         ((g$r$10062$1CmlGO)
                                          (case-lambda
                                            ((g$x$10063$1CmlGO)
                                             (cdr (g$assq$5658$1CmlGO
                                                    (g$cadr$5832$1CmlGO
                                                      g$x$10063$1CmlGO)
                                                    g$r$10062$1CmlGO))))))
                                       (map cons
                                            g$formals$10058$1CmlGO
                                            g$actuals$10059$1CmlGO))
                                      (cdr g$e$10056$1CmlGO)))
                                (g$cons*$5670$1CmlGO
                                  'map
                                  (list
                                    'lambda
                                    g$formals$10058$1CmlGO
                                    g$e$10056$1CmlGO)
                                  g$actuals$10059$1CmlGO)))))
                         (map cdr g$map-env$10057$1CmlGO)
                         (map (case-lambda
                                ((g$x$10064$1CmlGO)
                                 (list 'ref (car g$x$10064$1CmlGO))))
                              g$map-env$10057$1CmlGO)))))
                   (g$gen-cons$10027$1CmlGO
                     (case-lambda
                       ((g$e$10048$1CmlGO
                          g$x$10049$1CmlGO
                          g$y$10050$1CmlGO
                          g$xnew$10051$1CmlGO
                          g$ynew$10052$1CmlGO)
                        ((case-lambda
                           ((g$t$10053$1CmlGO)
                            (if (g$memv$5663$1CmlGO g$t$10053$1CmlGO '(quote))
                              (if (eq? (car g$xnew$10051$1CmlGO) 'quote)
                                ((case-lambda
                                   ((g$xnew$10054$1CmlGO g$ynew$10055$1CmlGO)
                                    (if (if (eq? g$xnew$10054$1CmlGO
                                                 g$x$10049$1CmlGO)
                                          (begin
                                            '#f
                                            (eq? g$ynew$10055$1CmlGO
                                                 g$y$10050$1CmlGO))
                                          '#f)
                                      (list 'quote g$e$10048$1CmlGO)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$10054$1CmlGO
                                          g$ynew$10055$1CmlGO)))))
                                 (g$cadr$5832$1CmlGO g$xnew$10051$1CmlGO)
                                 (g$cadr$5832$1CmlGO g$ynew$10052$1CmlGO))
                                (if (null?
                                      (g$cadr$5832$1CmlGO g$ynew$10052$1CmlGO))
                                  (list 'list g$xnew$10051$1CmlGO)
                                  (list
                                    'cons
                                    g$xnew$10051$1CmlGO
                                    g$ynew$10052$1CmlGO)))
                              (if (g$memv$5663$1CmlGO g$t$10053$1CmlGO '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$10051$1CmlGO
                                    (cdr g$ynew$10052$1CmlGO)))
                                (list
                                  'cons
                                  g$xnew$10051$1CmlGO
                                  g$ynew$10052$1CmlGO)))))
                         (car g$ynew$10052$1CmlGO)))))
                   (g$gen-vector$10028$1CmlGO
                     (case-lambda
                       ((g$e$10045$1CmlGO
                          g$ls$10046$1CmlGO
                          g$lsnew$10047$1CmlGO)
                        (if (eq? (car g$lsnew$10047$1CmlGO) 'quote)
                          (if (eq? (g$cadr$5832$1CmlGO g$lsnew$10047$1CmlGO)
                                   g$ls$10046$1CmlGO)
                            (list 'quote g$e$10045$1CmlGO)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5832$1CmlGO g$lsnew$10047$1CmlGO))))
                          (if (eq? (car g$lsnew$10047$1CmlGO) 'list)
                            (cons 'vector (cdr g$lsnew$10047$1CmlGO))
                            (list 'list->vector g$lsnew$10047$1CmlGO))))))
                   (g$regen$10029$1CmlGO
                     (case-lambda
                       ((g$x$10042$1CmlGO)
                        ((case-lambda
                           ((g$t$10043$1CmlGO)
                            (if (g$memv$5663$1CmlGO g$t$10043$1CmlGO '(ref))
                              (g$cadr$5832$1CmlGO g$x$10042$1CmlGO)
                              (if (g$memv$5663$1CmlGO
                                    g$t$10043$1CmlGO
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5832$1CmlGO g$x$10042$1CmlGO))
                                (if (g$memv$5663$1CmlGO
                                      g$t$10043$1CmlGO
                                      '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5832$1CmlGO g$x$10042$1CmlGO))
                                  (if (g$memv$5663$1CmlGO
                                        g$t$10043$1CmlGO
                                        '(lambda))
                                    (g$build-lambda$7856$1CmlGO
                                      '#f
                                      (g$cadr$5832$1CmlGO g$x$10042$1CmlGO)
                                      (g$regen$10029$1CmlGO
                                        (g$caddr$5838$1CmlGO g$x$10042$1CmlGO)))
                                    (if (g$memv$5663$1CmlGO
                                          g$t$10043$1CmlGO
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$10044$1CmlGO)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$10044$1CmlGO)))
                                       (map g$regen$10029$1CmlGO
                                            (cdr g$x$10042$1CmlGO)))
                                      (cons
                                        (list 'primitive (car g$x$10042$1CmlGO))
                                        (map g$regen$10029$1CmlGO
                                             (cdr g$x$10042$1CmlGO))))))))))
                         (car g$x$10042$1CmlGO))))))
           (case-lambda
             ((g$e$10030$1CmlGO g$r$10031$1CmlGO g$mr$10032$1CmlGO)
              ((case-lambda
                 ((g$t$10033$1CmlGO)
                  ((case-lambda
                     ((g$ls/false$10034$1CmlGO)
                      (if g$ls/false$10034$1CmlGO
                        (apply
                          (case-lambda
                            ((g$x$10035$1CmlGO)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$10022$1CmlGO
                                    g$e$10030$1CmlGO
                                    g$x$10035$1CmlGO
                                    g$r$10031$1CmlGO
                                    '()
                                    g$ellipsis?$8204$1CmlGO
                                    '#f)))
                               (case-lambda
                                 ((g$e$10038$1CmlGO g$maps$10039$1CmlGO)
                                  ((case-lambda
                                     ((g$maps$10040$1CmlGO g$e$10041$1CmlGO)
                                      (g$regen$10029$1CmlGO g$e$10041$1CmlGO)))
                                   g$maps$10039$1CmlGO
                                   g$e$10038$1CmlGO))))))
                          g$ls/false$10034$1CmlGO)
                        (g$syntax-violation$8314$1CmlGO
                          '#f
                          '"invalid syntax"
                          g$t$10033$1CmlGO))))
                   (g$syntax-dispatch$8203$1CmlGO g$t$10033$1CmlGO '(_ any)))))
               g$e$10030$1CmlGO))))))))
   (g$core-macro-transformer$8210$1CmlGO
     g$core-macro-transformer$11670$1CmlGO
     (case-lambda
       ((g$name$10186$1CmlGO)
        ((case-lambda
           ((g$t$10187$1CmlGO)
            (if (g$memv$5663$1CmlGO g$t$10187$1CmlGO '(quote))
              g$quote-transformer$8163$1CmlGO
              (if (g$memv$5663$1CmlGO g$t$10187$1CmlGO '(lambda))
                g$lambda-transformer$8165$1CmlGO
                (if (g$memv$5663$1CmlGO g$t$10187$1CmlGO '(case-lambda))
                  g$case-lambda-transformer$8164$1CmlGO
                  (if (g$memv$5663$1CmlGO g$t$10187$1CmlGO '(letrec))
                    g$letrec-transformer$8153$1CmlGO
                    (if (g$memv$5663$1CmlGO g$t$10187$1CmlGO '(letrec*))
                      g$letrec*-transformer$8154$1CmlGO
                      (if (g$memv$5663$1CmlGO g$t$10187$1CmlGO '(if))
                        g$if-transformer$8161$1CmlGO
                        (if (g$memv$5663$1CmlGO
                              g$t$10187$1CmlGO
                              '(foreign-call))
                          g$foreign-call-transformer$8201$1CmlGO
                          (if (g$memv$5663$1CmlGO
                                g$t$10187$1CmlGO
                                '(syntax-case))
                            g$syntax-case-transformer$8207$1CmlGO
                            (if (g$memv$5663$1CmlGO g$t$10187$1CmlGO '(syntax))
                              g$syntax-transformer$8209$1CmlGO
                              (if (g$memv$5663$1CmlGO
                                    g$t$10187$1CmlGO
                                    '(type-descriptor))
                                g$type-descriptor-transformer$8156$1CmlGO
                                (if (g$memv$5663$1CmlGO
                                      g$t$10187$1CmlGO
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$8157$1CmlGO
                                  (if (g$memv$5663$1CmlGO
                                        g$t$10187$1CmlGO
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$8158$1CmlGO
                                    (if (g$memv$5663$1CmlGO
                                          g$t$10187$1CmlGO
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$8155$1CmlGO
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$10186$1CmlGO))))))))))))))))
         g$name$10186$1CmlGO))))
   (g$file-options-macro$8211$1CmlGO
     g$file-options-macro$11671$1CmlGO
     (case-lambda
       ((g$x$10188$1CmlGO)
        (letrec* ((g$valid-option?$10189$1CmlGO
                    (case-lambda
                      ((g$x$10194$1CmlGO)
                       (if (g$id?$7925$1CmlGO g$x$10194$1CmlGO)
                         (begin
                           '#f
                           (g$memq$5662$1CmlGO
                             (g$id->sym$7926$1CmlGO g$x$10194$1CmlGO)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$10190$1CmlGO)
              ((case-lambda
                 ((g$ls/false$10191$1CmlGO)
                  (if (if g$ls/false$10191$1CmlGO
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$10192$1CmlGO)
                               (if (g$for-all$5668$1CmlGO
                                     g$valid-option?$10189$1CmlGO
                                     g$opt*$10192$1CmlGO)
                                 (begin
                                   '#f
                                   (g$file-options-spec$7195$1CmlGO
                                     (map g$id->sym$7926$1CmlGO
                                          g$opt*$10192$1CmlGO)))
                                 '#f)))
                            g$ls/false$10191$1CmlGO))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$10193$1CmlGO)
                         (g$bless$8166$1CmlGO
                           (list
                             'quote
                             (g$file-options-spec$7195$1CmlGO
                               (map g$id->sym$7926$1CmlGO
                                    g$opt*$10193$1CmlGO))))))
                      g$ls/false$10191$1CmlGO)
                    (g$syntax-violation$8314$1CmlGO
                      '#f
                      '"invalid syntax"
                      g$t$10190$1CmlGO))))
               (g$syntax-dispatch$8203$1CmlGO
                 g$t$10190$1CmlGO
                 '(_ . each-any)))))
           g$x$10188$1CmlGO)))))
   (g$symbol-macro$8212$1CmlGO
     g$symbol-macro$11672$1CmlGO
     (case-lambda
       ((g$x$10195$1CmlGO g$set$10196$1CmlGO)
        ((case-lambda
           ((g$t$10197$1CmlGO)
            ((case-lambda
               ((g$ls/false$10198$1CmlGO)
                (if (if g$ls/false$10198$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$10199$1CmlGO)
                             (if (g$id?$7925$1CmlGO g$name$10199$1CmlGO)
                               (begin
                                 '#f
                                 (g$memq$5662$1CmlGO
                                   (g$id->sym$7926$1CmlGO g$name$10199$1CmlGO)
                                   g$set$10196$1CmlGO))
                               '#f)))
                          g$ls/false$10198$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$10200$1CmlGO)
                       (g$bless$8166$1CmlGO (list 'quote g$name$10200$1CmlGO))))
                    g$ls/false$10198$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$10197$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$10197$1CmlGO '(_ any)))))
         g$x$10195$1CmlGO))))
   (g$macro-transformer$8213$1CmlGO
     g$macro-transformer$11673$1CmlGO
     (case-lambda
       ((g$x$10201$1CmlGO)
        (if (procedure? g$x$10201$1CmlGO)
          g$x$10201$1CmlGO
          (if (symbol? g$x$10201$1CmlGO)
            ((case-lambda
               ((g$t$10202$1CmlGO)
                (if (g$memv$5663$1CmlGO g$t$10202$1CmlGO '(define-record-type))
                  g$define-record-type-macro$8197$1CmlGO
                  (if (g$memv$5663$1CmlGO g$t$10202$1CmlGO '(define-struct))
                    g$define-struct-macro$8196$1CmlGO
                    (if (g$memv$5663$1CmlGO g$t$10202$1CmlGO '(include))
                      g$include-macro$8191$1CmlGO
                      (if (g$memv$5663$1CmlGO g$t$10202$1CmlGO '(cond))
                        g$cond-macro$8189$1CmlGO
                        (if (g$memv$5663$1CmlGO g$t$10202$1CmlGO '(let))
                          g$let-macro$8169$1CmlGO
                          (if (g$memv$5663$1CmlGO g$t$10202$1CmlGO '(do))
                            g$do-macro$8185$1CmlGO
                            (if (g$memv$5663$1CmlGO g$t$10202$1CmlGO '(or))
                              g$or-macro$8187$1CmlGO
                              (if (g$memv$5663$1CmlGO g$t$10202$1CmlGO '(and))
                                g$and-macro$8188$1CmlGO
                                (if (g$memv$5663$1CmlGO
                                      g$t$10202$1CmlGO
                                      '(let*))
                                  g$let*-macro$8186$1CmlGO
                                  (if (g$memv$5663$1CmlGO
                                        g$t$10202$1CmlGO
                                        '(let-values))
                                    g$let-values-macro$8170$1CmlGO
                                    (if (g$memv$5663$1CmlGO
                                          g$t$10202$1CmlGO
                                          '(let*-values))
                                      g$let*-values-macro$8171$1CmlGO
                                      (if (g$memv$5663$1CmlGO
                                            g$t$10202$1CmlGO
                                            '(syntax-rules))
                                        g$syntax-rules-macro$8193$1CmlGO
                                        (if (g$memv$5663$1CmlGO
                                              g$t$10202$1CmlGO
                                              '(quasiquote))
                                          g$quasiquote-macro$8194$1CmlGO
                                          (if (g$memv$5663$1CmlGO
                                                g$t$10202$1CmlGO
                                                '(quasisyntax))
                                            g$quasisyntax-macro$8195$1CmlGO
                                            (if (g$memv$5663$1CmlGO
                                                  g$t$10202$1CmlGO
                                                  '(with-syntax))
                                              g$with-syntax-macro$8167$1CmlGO
                                              (if (g$memv$5663$1CmlGO
                                                    g$t$10202$1CmlGO
                                                    '(when))
                                                g$when-macro$8159$1CmlGO
                                                (if (g$memv$5663$1CmlGO
                                                      g$t$10202$1CmlGO
                                                      '(unless))
                                                  g$unless-macro$8160$1CmlGO
                                                  (if (g$memv$5663$1CmlGO
                                                        g$t$10202$1CmlGO
                                                        '(case))
                                                    g$case-macro$8162$1CmlGO
                                                    (if (g$memv$5663$1CmlGO
                                                          g$t$10202$1CmlGO
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$8184$1CmlGO
                                                      (if (g$memv$5663$1CmlGO
                                                            g$t$10202$1CmlGO
                                                            '(time))
                                                        g$time-macro$8180$1CmlGO
                                                        (if (g$memv$5663$1CmlGO
                                                              g$t$10202$1CmlGO
                                                              '(delay))
                                                          g$delay-macro$8181$1CmlGO
                                                          (if (g$memv$5663$1CmlGO
                                                                g$t$10202$1CmlGO
                                                                '(assert))
                                                            g$assert-macro$8182$1CmlGO
                                                            (if (g$memv$5663$1CmlGO
                                                                  g$t$10202$1CmlGO
                                                                  '(endianness))
                                                              g$endianness-macro$8183$1CmlGO
                                                              (if (g$memv$5663$1CmlGO
                                                                    g$t$10202$1CmlGO
                                                                    '(guard))
                                                                g$guard-macro$8178$1CmlGO
                                                                (if (g$memv$5663$1CmlGO
                                                                      g$t$10202$1CmlGO
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$8179$1CmlGO
                                                                  (if (g$memv$5663$1CmlGO
                                                                        g$t$10202$1CmlGO
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$8172$1CmlGO
                                                                    (if (g$memv$5663$1CmlGO
                                                                          g$t$10202$1CmlGO
                                                                          '(trace-define))
                                                                      g$trace-define-macro$8173$1CmlGO
                                                                      (if (g$memv$5663$1CmlGO
                                                                            g$t$10202$1CmlGO
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$8174$1CmlGO
                                                                        (if (g$memv$5663$1CmlGO
                                                                              g$t$10202$1CmlGO
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$8176$1CmlGO
                                                                          (if (g$memv$5663$1CmlGO
                                                                                g$t$10202$1CmlGO
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$8177$1CmlGO
                                                                            (if (g$memv$5663$1CmlGO
                                                                                  g$t$10202$1CmlGO
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$8198$1CmlGO
                                                                              (if (g$memv$5663$1CmlGO
                                                                                    g$t$10202$1CmlGO
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$8200$1CmlGO
                                                                                (if (g$memv$5663$1CmlGO
                                                                                      g$t$10202$1CmlGO
                                                                                      '(include-into))
                                                                                  g$include-into-macro$8192$1CmlGO
                                                                                  (if (g$memv$5663$1CmlGO
                                                                                        g$t$10202$1CmlGO
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$10203$1CmlGO)
                                                                                       (g$symbol-macro$8212$1CmlGO
                                                                                         g$x$10203$1CmlGO
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5663$1CmlGO
                                                                                          g$t$10202$1CmlGO
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$10204$1CmlGO)
                                                                                         (g$symbol-macro$8212$1CmlGO
                                                                                           g$x$10204$1CmlGO
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5663$1CmlGO
                                                                                            g$t$10202$1CmlGO
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$10205$1CmlGO)
                                                                                           (g$symbol-macro$8212$1CmlGO
                                                                                             g$x$10205$1CmlGO
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5663$1CmlGO
                                                                                              g$t$10202$1CmlGO
                                                                                              '(file-options))
                                                                                          g$file-options-macro$8211$1CmlGO
                                                                                          (if (g$memv$5663$1CmlGO
                                                                                                g$t$10202$1CmlGO
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$8199$1CmlGO
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$10201$1CmlGO)))))))))))))))))))))))))))))))))))))))))
             g$x$10201$1CmlGO)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$10201$1CmlGO))))))
   (g$local-macro-transformer$8214$1CmlGO
     g$local-macro-transformer$11674$1CmlGO
     (case-lambda ((g$x$10206$1CmlGO) (car g$x$10206$1CmlGO))))
   (g$do-macro-call$8215$1CmlGO
     g$do-macro-call$11675$1CmlGO
     (case-lambda
       ((g$transformer$10207$1CmlGO g$expr$10208$1CmlGO)
        ((case-lambda
           ((g$out$10209$1CmlGO)
            (begin
              ((letrec ((g$f$10210$1CmlGO
                          (case-lambda
                            ((g$x$10211$1CmlGO)
                             (if (not (g$stx?$7897$1CmlGO g$x$10211$1CmlGO))
                               (if (pair? g$x$10211$1CmlGO)
                                 (begin
                                   (g$f$10210$1CmlGO (car g$x$10211$1CmlGO))
                                   (g$f$10210$1CmlGO (cdr g$x$10211$1CmlGO)))
                                 (if (vector? g$x$10211$1CmlGO)
                                   (vector-for-each
                                     g$f$10210$1CmlGO
                                     g$x$10211$1CmlGO)
                                   (if (symbol? g$x$10211$1CmlGO)
                                     (g$syntax-violation$8314$1CmlGO
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$10208$1CmlGO
                                       g$x$10211$1CmlGO)
                                     (void))))
                               (void))))))
                 g$f$10210$1CmlGO)
               g$out$10209$1CmlGO)
              (g$add-mark$7914$1CmlGO
                (g$gen-mark$7909$1CmlGO)
                g$out$10209$1CmlGO
                g$expr$10208$1CmlGO))))
         (g$transformer$10207$1CmlGO
           (g$add-mark$7914$1CmlGO
             g$anti-mark$7910$1CmlGO
             g$expr$10208$1CmlGO
             '#f))))))
   (g$chi-macro$8216$1CmlGO
     g$chi-macro$11676$1CmlGO
     (case-lambda
       ((g$p$10212$1CmlGO g$e$10213$1CmlGO)
        (g$do-macro-call$8215$1CmlGO
          (g$macro-transformer$8213$1CmlGO g$p$10212$1CmlGO)
          g$e$10213$1CmlGO))))
   (g$chi-local-macro$8217$1CmlGO
     g$chi-local-macro$11677$1CmlGO
     (case-lambda
       ((g$p$10214$1CmlGO g$e$10215$1CmlGO)
        (g$do-macro-call$8215$1CmlGO
          (g$local-macro-transformer$8214$1CmlGO g$p$10214$1CmlGO)
          g$e$10215$1CmlGO))))
   (g$chi-global-macro$8218$1CmlGO
     g$chi-global-macro$11678$1CmlGO
     (case-lambda
       ((g$p$10216$1CmlGO g$e$10217$1CmlGO)
        ((case-lambda
           ((g$lib$10218$1CmlGO g$loc$10219$1CmlGO)
            (begin
              (g$visit-library$7741$1CmlGO g$lib$10218$1CmlGO)
              ((case-lambda
                 ((g$x$10220$1CmlGO)
                  ((case-lambda
                     ((g$transformer$10221$1CmlGO)
                      (g$do-macro-call$8215$1CmlGO
                        g$transformer$10221$1CmlGO
                        g$e$10217$1CmlGO)))
                   (if (procedure? g$x$10220$1CmlGO)
                     g$x$10220$1CmlGO
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$10220$1CmlGO)))))
               (symbol-value g$loc$10219$1CmlGO)))))
         (car g$p$10216$1CmlGO)
         (cdr g$p$10216$1CmlGO)))))
   (g$chi-expr*$8219$1CmlGO
     g$chi-expr*$11679$1CmlGO
     (case-lambda
       ((g$e*$10222$1CmlGO g$r$10223$1CmlGO g$mr$10224$1CmlGO)
        (if (null? g$e*$10222$1CmlGO)
          '()
          ((case-lambda
             ((g$e$10225$1CmlGO)
              (cons
                g$e$10225$1CmlGO
                (g$chi-expr*$8219$1CmlGO
                  (cdr g$e*$10222$1CmlGO)
                  g$r$10223$1CmlGO
                  g$mr$10224$1CmlGO))))
           (g$chi-expr$8221$1CmlGO
             (car g$e*$10222$1CmlGO)
             g$r$10223$1CmlGO
             g$mr$10224$1CmlGO))))))
   (g$chi-application$8220$1CmlGO
     g$chi-application$11680$1CmlGO
     (case-lambda
       ((g$e$10226$1CmlGO g$r$10227$1CmlGO g$mr$10228$1CmlGO)
        ((case-lambda
           ((g$t$10229$1CmlGO)
            ((case-lambda
               ((g$ls/false$10230$1CmlGO)
                (if g$ls/false$10230$1CmlGO
                  (apply
                    (case-lambda
                      ((g$rator$10231$1CmlGO g$rands$10232$1CmlGO)
                       ((case-lambda
                          ((g$rator$10233$1CmlGO)
                           (cons
                             g$rator$10233$1CmlGO
                             (g$chi-expr*$8219$1CmlGO
                               g$rands$10232$1CmlGO
                               g$r$10227$1CmlGO
                               g$mr$10228$1CmlGO))))
                        (g$chi-expr$8221$1CmlGO
                          g$rator$10231$1CmlGO
                          g$r$10227$1CmlGO
                          g$mr$10228$1CmlGO))))
                    g$ls/false$10230$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$10229$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$10229$1CmlGO
               '(any . each-any)))))
         g$e$10226$1CmlGO))))
   (g$chi-expr$8221$1CmlGO
     g$chi-expr$11681$1CmlGO
     (case-lambda
       ((g$e$10234$1CmlGO g$r$10235$1CmlGO g$mr$10236$1CmlGO)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7945$1CmlGO g$e$10234$1CmlGO g$r$10235$1CmlGO)))
          (case-lambda
            ((g$type$10240$1CmlGO g$value$10241$1CmlGO g$kwd$10242$1CmlGO)
             ((case-lambda
                ((g$kwd$10243$1CmlGO g$value$10244$1CmlGO g$type$10245$1CmlGO)
                 ((case-lambda
                    ((g$t$10246$1CmlGO)
                     (if (g$memv$5663$1CmlGO g$t$10246$1CmlGO '(core-macro))
                       ((case-lambda
                          ((g$transformer$10247$1CmlGO)
                           (g$transformer$10247$1CmlGO
                             g$e$10234$1CmlGO
                             g$r$10235$1CmlGO
                             g$mr$10236$1CmlGO)))
                        (g$core-macro-transformer$8210$1CmlGO
                          g$value$10244$1CmlGO))
                       (if (g$memv$5663$1CmlGO g$t$10246$1CmlGO '(global))
                         ((case-lambda
                            ((g$lib$10248$1CmlGO)
                             ((case-lambda
                                ((g$loc$10249$1CmlGO)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$8255$1CmlGO)
                                        g$lib$10248$1CmlGO)
                                       g$loc$10249$1CmlGO))))))
                              (cdr g$value$10244$1CmlGO))))
                          (car g$value$10244$1CmlGO))
                         (if (g$memv$5663$1CmlGO g$t$10246$1CmlGO '(core-prim))
                           ((case-lambda
                              ((g$name$10250$1CmlGO)
                               (list 'primitive g$name$10250$1CmlGO)))
                            g$value$10244$1CmlGO)
                           (if (g$memv$5663$1CmlGO g$t$10246$1CmlGO '(call))
                             (g$chi-application$8220$1CmlGO
                               g$e$10234$1CmlGO
                               g$r$10235$1CmlGO
                               g$mr$10236$1CmlGO)
                             (if (g$memv$5663$1CmlGO
                                   g$t$10246$1CmlGO
                                   '(lexical))
                               ((case-lambda
                                  ((g$lex$10251$1CmlGO) g$lex$10251$1CmlGO))
                                (g$lexical-var$8147$1CmlGO
                                  g$value$10244$1CmlGO))
                               (if (g$memv$5663$1CmlGO
                                     g$t$10246$1CmlGO
                                     '(global-macro global-macro!))
                                 (g$chi-expr$8221$1CmlGO
                                   (g$chi-global-macro$8218$1CmlGO
                                     g$value$10244$1CmlGO
                                     g$e$10234$1CmlGO)
                                   g$r$10235$1CmlGO
                                   g$mr$10236$1CmlGO)
                                 (if (g$memv$5663$1CmlGO
                                       g$t$10246$1CmlGO
                                       '(local-macro local-macro!))
                                   (g$chi-expr$8221$1CmlGO
                                     (g$chi-local-macro$8217$1CmlGO
                                       g$value$10244$1CmlGO
                                       g$e$10234$1CmlGO)
                                     g$r$10235$1CmlGO
                                     g$mr$10236$1CmlGO)
                                   (if (g$memv$5663$1CmlGO
                                         g$t$10246$1CmlGO
                                         '(macro macro!))
                                     (g$chi-expr$8221$1CmlGO
                                       (g$chi-macro$8216$1CmlGO
                                         g$value$10244$1CmlGO
                                         g$e$10234$1CmlGO)
                                       g$r$10235$1CmlGO
                                       g$mr$10236$1CmlGO)
                                     (if (g$memv$5663$1CmlGO
                                           g$t$10246$1CmlGO
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$10252$1CmlGO)
                                           (list 'quote g$datum$10252$1CmlGO)))
                                        g$value$10244$1CmlGO)
                                       (if (g$memv$5663$1CmlGO
                                             g$t$10246$1CmlGO
                                             '(set!))
                                         (g$chi-set!$8222$1CmlGO
                                           g$e$10234$1CmlGO
                                           g$r$10235$1CmlGO
                                           g$mr$10236$1CmlGO)
                                         (if (g$memv$5663$1CmlGO
                                               g$t$10246$1CmlGO
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$10253$1CmlGO)
                                               ((case-lambda
                                                  ((g$ls/false$10254$1CmlGO)
                                                   (if g$ls/false$10254$1CmlGO
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$10255$1CmlGO
                                                            g$x*$10256$1CmlGO)
                                                          (g$build-sequence$7859$1CmlGO
                                                            '#f
                                                            (g$chi-expr*$8219$1CmlGO
                                                              (cons
                                                                g$x$10255$1CmlGO
                                                                g$x*$10256$1CmlGO)
                                                              g$r$10235$1CmlGO
                                                              g$mr$10236$1CmlGO))))
                                                       g$ls/false$10254$1CmlGO)
                                                     (g$syntax-violation$8314$1CmlGO
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10253$1CmlGO))))
                                                (g$syntax-dispatch$8203$1CmlGO
                                                  g$t$10253$1CmlGO
                                                  '(_ any . each-any)))))
                                            g$e$10234$1CmlGO)
                                           (if (g$memv$5663$1CmlGO
                                                 g$t$10246$1CmlGO
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$10257$1CmlGO)
                                                 ((case-lambda
                                                    ((g$ls/false$10258$1CmlGO)
                                                     (if (if g$ls/false$10258$1CmlGO
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$10259$1CmlGO
                                                                    g$xrhs*$10260$1CmlGO
                                                                    g$xbody$10261$1CmlGO
                                                                    g$xbody*$10262$1CmlGO)
                                                                  (if (not (g$valid-bound-ids?$7930$1CmlGO
                                                                             g$xlhs*$10259$1CmlGO))
                                                                    (g$syntax-violation$8314$1CmlGO
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$10234$1CmlGO)
                                                                    (void))))
                                                               g$ls/false$10258$1CmlGO))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$10263$1CmlGO
                                                              g$xrhs*$10264$1CmlGO
                                                              g$xbody$10265$1CmlGO
                                                              g$xbody*$10266$1CmlGO)
                                                            ((case-lambda
                                                               ((g$xlab*$10267$1CmlGO)
                                                                ((case-lambda
                                                                   ((g$xrib$10268$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$xb*$10269$1CmlGO)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$7859$1CmlGO
                                                                              '#f
                                                                              (g$chi-expr*$8219$1CmlGO
                                                                                (map (case-lambda
                                                                                       ((g$x$10270$1CmlGO)
                                                                                        (g$add-subst$7915$1CmlGO
                                                                                          g$xrib$10268$1CmlGO
                                                                                          g$x$10270$1CmlGO)))
                                                                                     (cons
                                                                                       g$xbody$10265$1CmlGO
                                                                                       g$xbody*$10266$1CmlGO))
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$10267$1CmlGO
                                                                                       g$xb*$10269$1CmlGO)
                                                                                  g$r$10235$1CmlGO)
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$10267$1CmlGO
                                                                                       g$xb*$10269$1CmlGO)
                                                                                  g$mr$10236$1CmlGO))))))))
                                                                     (map (case-lambda
                                                                            ((g$x$10271$1CmlGO)
                                                                             (g$make-eval-transformer$7957$1CmlGO
                                                                               (g$expand-transformer$8248$1CmlGO
                                                                                 (if (eq? g$type$10245$1CmlGO
                                                                                          'let-syntax)
                                                                                   g$x$10271$1CmlGO
                                                                                   (g$add-subst$7915$1CmlGO
                                                                                     g$xrib$10268$1CmlGO
                                                                                     g$x$10271$1CmlGO))
                                                                                 g$mr$10236$1CmlGO))))
                                                                          g$xrhs*$10264$1CmlGO))))
                                                                 (g$make-full-rib$7893$1CmlGO
                                                                   g$xlhs*$10263$1CmlGO
                                                                   g$xlab*$10267$1CmlGO))))
                                                             (map g$gen-label$7871$1CmlGO
                                                                  g$xlhs*$10263$1CmlGO))))
                                                         g$ls/false$10258$1CmlGO)
                                                       (g$syntax-violation$8314$1CmlGO
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$10257$1CmlGO))))
                                                  (g$syntax-dispatch$8203$1CmlGO
                                                    g$t$10257$1CmlGO
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$10234$1CmlGO)
                                             (if (g$memv$5663$1CmlGO
                                                   g$t$10246$1CmlGO
                                                   '(displaced-lexical))
                                               (g$syntax-violation$8314$1CmlGO
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$10234$1CmlGO)
                                               (if (g$memv$5663$1CmlGO
                                                     g$t$10246$1CmlGO
                                                     '(syntax))
                                                 (g$syntax-violation$8314$1CmlGO
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$10234$1CmlGO)
                                                 (if (g$memv$5663$1CmlGO
                                                       g$t$10246$1CmlGO
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$8314$1CmlGO
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$10272$1CmlGO)
                                                           (if (g$memv$5663$1CmlGO
                                                                 g$t$10272$1CmlGO
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5663$1CmlGO
                                                                   g$t$10272$1CmlGO
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5663$1CmlGO
                                                                     g$t$10272$1CmlGO
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5663$1CmlGO
                                                                       g$t$10272$1CmlGO
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5663$1CmlGO
                                                                         g$t$10272$1CmlGO
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5663$1CmlGO
                                                                           g$t$10272$1CmlGO
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$10245$1CmlGO)
                                                       '" was found where an expression was expected")
                                                     g$e$10234$1CmlGO)
                                                   (if (g$memv$5663$1CmlGO
                                                         g$t$10246$1CmlGO
                                                         '(mutable))
                                                     (g$syntax-violation$8314$1CmlGO
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$10234$1CmlGO)
                                                     (g$syntax-violation$8314$1CmlGO
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$10234$1CmlGO)))))))))))))))))))
                  g$type$10245$1CmlGO)))
              g$kwd$10242$1CmlGO
              g$value$10241$1CmlGO
              g$type$10240$1CmlGO)))))))
   (g$chi-set!$8222$1CmlGO
     g$chi-set!$11682$1CmlGO
     (case-lambda
       ((g$e$10273$1CmlGO g$r$10274$1CmlGO g$mr$10275$1CmlGO)
        ((case-lambda
           ((g$t$10276$1CmlGO)
            ((case-lambda
               ((g$ls/false$10277$1CmlGO)
                (if (if g$ls/false$10277$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$10278$1CmlGO g$v$10279$1CmlGO)
                             (g$id?$7925$1CmlGO g$x$10278$1CmlGO)))
                          g$ls/false$10277$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$10280$1CmlGO g$v$10281$1CmlGO)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7945$1CmlGO
                              g$x$10280$1CmlGO
                              g$r$10274$1CmlGO)))
                         (case-lambda
                           ((g$type$10285$1CmlGO
                              g$value$10286$1CmlGO
                              g$kwd$10287$1CmlGO)
                            ((case-lambda
                               ((g$kwd$10288$1CmlGO
                                  g$value$10289$1CmlGO
                                  g$type$10290$1CmlGO)
                                ((case-lambda
                                   ((g$t$10291$1CmlGO)
                                    (if (g$memv$5663$1CmlGO
                                          g$t$10291$1CmlGO
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$8149$1CmlGO
                                          g$value$10289$1CmlGO
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$8147$1CmlGO
                                            g$value$10289$1CmlGO)
                                          (g$chi-expr$8221$1CmlGO
                                            g$v$10281$1CmlGO
                                            g$r$10274$1CmlGO
                                            g$mr$10275$1CmlGO)))
                                      (if (g$memv$5663$1CmlGO
                                            g$t$10291$1CmlGO
                                            '(core-prim))
                                        (g$syntax-violation$8314$1CmlGO
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$10273$1CmlGO)
                                        (if (g$memv$5663$1CmlGO
                                              g$t$10291$1CmlGO
                                              '(global))
                                          (g$syntax-violation$8314$1CmlGO
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$10273$1CmlGO)
                                          (if (g$memv$5663$1CmlGO
                                                g$t$10291$1CmlGO
                                                '(global-macro!))
                                            (g$chi-expr$8221$1CmlGO
                                              (g$chi-global-macro$8218$1CmlGO
                                                g$value$10289$1CmlGO
                                                g$e$10273$1CmlGO)
                                              g$r$10274$1CmlGO
                                              g$mr$10275$1CmlGO)
                                            (if (g$memv$5663$1CmlGO
                                                  g$t$10291$1CmlGO
                                                  '(local-macro!))
                                              (g$chi-expr$8221$1CmlGO
                                                (g$chi-local-macro$8217$1CmlGO
                                                  g$value$10289$1CmlGO
                                                  g$e$10273$1CmlGO)
                                                g$r$10274$1CmlGO
                                                g$mr$10275$1CmlGO)
                                              (if (g$memv$5663$1CmlGO
                                                    g$t$10291$1CmlGO
                                                    '(mutable))
                                                (g$syntax-violation$8314$1CmlGO
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$10273$1CmlGO)
                                                (g$syntax-violation$8314$1CmlGO
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$10273$1CmlGO)))))))))
                                 g$type$10290$1CmlGO)))
                             g$kwd$10287$1CmlGO
                             g$value$10286$1CmlGO
                             g$type$10285$1CmlGO))))))
                    g$ls/false$10277$1CmlGO)
                  (g$syntax-violation$8314$1CmlGO
                    '#f
                    '"invalid syntax"
                    g$t$10276$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$10276$1CmlGO '(_ any any)))))
         g$e$10273$1CmlGO))))
   (g$verify-formals$8223$1CmlGO
     g$verify-formals$11683$1CmlGO
     (case-lambda
       ((g$fmls$10292$1CmlGO g$stx$10293$1CmlGO)
        ((case-lambda
           ((g$t$10294$1CmlGO)
            ((case-lambda
               ((g$ls/false$10295$1CmlGO)
                (if g$ls/false$10295$1CmlGO
                  (apply
                    (case-lambda
                      ((g$x*$10296$1CmlGO)
                       (if (not (g$valid-bound-ids?$7930$1CmlGO
                                  g$x*$10296$1CmlGO))
                         (g$invalid-fmls-error$8168$1CmlGO
                           g$stx$10293$1CmlGO
                           g$fmls$10292$1CmlGO)
                         (void))))
                    g$ls/false$10295$1CmlGO)
                  ((case-lambda
                     ((g$t$10297$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$10298$1CmlGO)
                          (if g$ls/false$10298$1CmlGO
                            (apply
                              (case-lambda
                                ((g$x*$10299$1CmlGO g$x$10300$1CmlGO)
                                 (if (not (g$valid-bound-ids?$7930$1CmlGO
                                            (cons
                                              g$x$10300$1CmlGO
                                              g$x*$10299$1CmlGO)))
                                   (g$invalid-fmls-error$8168$1CmlGO
                                     g$stx$10293$1CmlGO
                                     g$fmls$10292$1CmlGO)
                                   (void))))
                              g$ls/false$10298$1CmlGO)
                            ((case-lambda
                               ((g$t$10301$1CmlGO)
                                ((case-lambda
                                   ((g$ls/false$10302$1CmlGO)
                                    (if g$ls/false$10302$1CmlGO
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$stx$10293$1CmlGO)))
                                        g$ls/false$10302$1CmlGO)
                                      (g$syntax-violation$8314$1CmlGO
                                        '#f
                                        '"invalid syntax"
                                        g$t$10301$1CmlGO))))
                                 (g$syntax-dispatch$8203$1CmlGO
                                   g$t$10301$1CmlGO
                                   '_))))
                             g$t$10297$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$10297$1CmlGO
                         '#(each+ any () any)))))
                   g$t$10294$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$10294$1CmlGO 'each-any))))
         g$fmls$10292$1CmlGO))))
   (g$chi-lambda-clause$8224$1CmlGO
     g$chi-lambda-clause$11684$1CmlGO
     (case-lambda
       ((g$stx$10303$1CmlGO
          g$fmls$10304$1CmlGO
          g$body*$10305$1CmlGO
          g$r$10306$1CmlGO
          g$mr$10307$1CmlGO)
        ((case-lambda
           ((g$t$10308$1CmlGO)
            ((case-lambda
               ((g$ls/false$10309$1CmlGO)
                (if g$ls/false$10309$1CmlGO
                  (apply
                    (case-lambda
                      ((g$x*$10310$1CmlGO)
                       (begin
                         (g$verify-formals$8223$1CmlGO
                           g$fmls$10304$1CmlGO
                           g$stx$10303$1CmlGO)
                         ((case-lambda
                            ((g$lex*$10311$1CmlGO g$lab*$10312$1CmlGO)
                             (values
                               g$lex*$10311$1CmlGO
                               (g$chi-internal$8232$1CmlGO
                                 (g$add-subst$7915$1CmlGO
                                   (g$make-full-rib$7893$1CmlGO
                                     g$x*$10310$1CmlGO
                                     g$lab*$10312$1CmlGO)
                                   g$body*$10305$1CmlGO)
                                 (g$add-lexicals$8151$1CmlGO
                                   g$lab*$10312$1CmlGO
                                   g$lex*$10311$1CmlGO
                                   g$r$10306$1CmlGO)
                                 g$mr$10307$1CmlGO))))
                          (map g$gen-lexical$7869$1CmlGO g$x*$10310$1CmlGO)
                          (map g$gen-label$7871$1CmlGO g$x*$10310$1CmlGO)))))
                    g$ls/false$10309$1CmlGO)
                  ((case-lambda
                     ((g$t$10313$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$10314$1CmlGO)
                          (if g$ls/false$10314$1CmlGO
                            (apply
                              (case-lambda
                                ((g$x*$10315$1CmlGO g$x$10316$1CmlGO)
                                 (begin
                                   (g$verify-formals$8223$1CmlGO
                                     g$fmls$10304$1CmlGO
                                     g$stx$10303$1CmlGO)
                                   ((case-lambda
                                      ((g$lex*$10317$1CmlGO
                                         g$lab*$10318$1CmlGO
                                         g$lex$10319$1CmlGO
                                         g$lab$10320$1CmlGO)
                                       (values
                                         (append
                                           g$lex*$10317$1CmlGO
                                           g$lex$10319$1CmlGO)
                                         (g$chi-internal$8232$1CmlGO
                                           (g$add-subst$7915$1CmlGO
                                             (g$make-full-rib$7893$1CmlGO
                                               (cons
                                                 g$x$10316$1CmlGO
                                                 g$x*$10315$1CmlGO)
                                               (cons
                                                 g$lab$10320$1CmlGO
                                                 g$lab*$10318$1CmlGO))
                                             g$body*$10305$1CmlGO)
                                           (g$add-lexicals$8151$1CmlGO
                                             (cons
                                               g$lab$10320$1CmlGO
                                               g$lab*$10318$1CmlGO)
                                             (cons
                                               g$lex$10319$1CmlGO
                                               g$lex*$10317$1CmlGO)
                                             g$r$10306$1CmlGO)
                                           g$mr$10307$1CmlGO))))
                                    (map g$gen-lexical$7869$1CmlGO
                                         g$x*$10315$1CmlGO)
                                    (map g$gen-label$7871$1CmlGO
                                         g$x*$10315$1CmlGO)
                                    (g$gen-lexical$7869$1CmlGO g$x$10316$1CmlGO)
                                    (g$gen-label$7871$1CmlGO
                                      g$x$10316$1CmlGO)))))
                              g$ls/false$10314$1CmlGO)
                            ((case-lambda
                               ((g$t$10321$1CmlGO)
                                ((case-lambda
                                   ((g$ls/false$10322$1CmlGO)
                                    (if g$ls/false$10322$1CmlGO
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8314$1CmlGO
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$10304$1CmlGO)))
                                        g$ls/false$10322$1CmlGO)
                                      (g$syntax-violation$8314$1CmlGO
                                        '#f
                                        '"invalid syntax"
                                        g$t$10321$1CmlGO))))
                                 (g$syntax-dispatch$8203$1CmlGO
                                   g$t$10321$1CmlGO
                                   '_))))
                             g$t$10313$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$10313$1CmlGO
                         '#(each+ any () any)))))
                   g$t$10308$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$10308$1CmlGO 'each-any))))
         g$fmls$10304$1CmlGO))))
   (g$chi-lambda-clause*$8225$1CmlGO
     g$chi-lambda-clause*$11685$1CmlGO
     (case-lambda
       ((g$stx$10323$1CmlGO
          g$fmls*$10324$1CmlGO
          g$body**$10325$1CmlGO
          g$r$10326$1CmlGO
          g$mr$10327$1CmlGO)
        (if (null? g$fmls*$10324$1CmlGO)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$8224$1CmlGO
                 g$stx$10323$1CmlGO
                 (car g$fmls*$10324$1CmlGO)
                 (car g$body**$10325$1CmlGO)
                 g$r$10326$1CmlGO
                 g$mr$10327$1CmlGO)))
            (case-lambda
              ((g$a$10330$1CmlGO g$b$10331$1CmlGO)
               ((case-lambda
                  ((g$b$10332$1CmlGO g$a$10333$1CmlGO)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$8225$1CmlGO
                          g$stx$10323$1CmlGO
                          (cdr g$fmls*$10324$1CmlGO)
                          (cdr g$body**$10325$1CmlGO)
                          g$r$10326$1CmlGO
                          g$mr$10327$1CmlGO)))
                     (case-lambda
                       ((g$a*$10336$1CmlGO g$b*$10337$1CmlGO)
                        ((case-lambda
                           ((g$b*$10338$1CmlGO g$a*$10339$1CmlGO)
                            (values
                              (cons g$a$10333$1CmlGO g$a*$10339$1CmlGO)
                              (cons g$b$10332$1CmlGO g$b*$10338$1CmlGO))))
                         g$b*$10337$1CmlGO
                         g$a*$10336$1CmlGO))))))
                g$b$10331$1CmlGO
                g$a$10330$1CmlGO))))))))
   (g$chi-defun$8226$1CmlGO
     g$chi-defun$11686$1CmlGO
     (case-lambda
       ((g$x$10340$1CmlGO g$r$10341$1CmlGO g$mr$10342$1CmlGO)
        ((case-lambda
           ((g$fmls$10343$1CmlGO g$body*$10344$1CmlGO)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$8224$1CmlGO
                   g$fmls$10343$1CmlGO
                   g$fmls$10343$1CmlGO
                   g$body*$10344$1CmlGO
                   g$r$10341$1CmlGO
                   g$mr$10342$1CmlGO)))
              (case-lambda
                ((g$fmls$10347$1CmlGO g$body$10348$1CmlGO)
                 ((case-lambda
                    ((g$body$10349$1CmlGO g$fmls$10350$1CmlGO)
                     (g$build-lambda$7856$1CmlGO
                       '#f
                       g$fmls$10350$1CmlGO
                       g$body$10349$1CmlGO)))
                  g$body$10348$1CmlGO
                  g$fmls$10347$1CmlGO))))))
         (car g$x$10340$1CmlGO)
         (cdr g$x$10340$1CmlGO)))))
   (g$chi-rhs$8227$1CmlGO
     g$chi-rhs$11687$1CmlGO
     (case-lambda
       ((g$rhs$10351$1CmlGO g$r$10352$1CmlGO g$mr$10353$1CmlGO)
        ((case-lambda
           ((g$t$10354$1CmlGO)
            (if (g$memv$5663$1CmlGO g$t$10354$1CmlGO '(defun))
              (g$chi-defun$8226$1CmlGO
                (cdr g$rhs$10351$1CmlGO)
                g$r$10352$1CmlGO
                g$mr$10353$1CmlGO)
              (if (g$memv$5663$1CmlGO g$t$10354$1CmlGO '(expr))
                ((case-lambda
                   ((g$expr$10355$1CmlGO)
                    (g$chi-expr$8221$1CmlGO
                      g$expr$10355$1CmlGO
                      g$r$10352$1CmlGO
                      g$mr$10353$1CmlGO)))
                 (cdr g$rhs$10351$1CmlGO))
                (if (g$memv$5663$1CmlGO g$t$10354$1CmlGO '(top-expr))
                  ((case-lambda
                     ((g$expr$10356$1CmlGO)
                      (g$build-sequence$7859$1CmlGO
                        '#f
                        (list
                          (g$chi-expr$8221$1CmlGO
                            g$expr$10356$1CmlGO
                            g$r$10352$1CmlGO
                            g$mr$10353$1CmlGO)
                          (g$build-void$7860$1CmlGO)))))
                   (cdr g$rhs$10351$1CmlGO))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$10351$1CmlGO))))))
         (car g$rhs$10351$1CmlGO)))))
   (g$expand-interaction-rhs*/init*$8228$1CmlGO
     g$expand-interaction-rhs*/init*$11688$1CmlGO
     (case-lambda
       ((g$lhs*$10357$1CmlGO
          g$rhs*$10358$1CmlGO
          g$init*$10359$1CmlGO
          g$r$10360$1CmlGO
          g$mr$10361$1CmlGO)
        ((letrec ((g$f$10362$1CmlGO
                    (case-lambda
                      ((g$lhs*$10363$1CmlGO g$rhs*$10364$1CmlGO)
                       (if (null? g$lhs*$10363$1CmlGO)
                         (map (case-lambda
                                ((g$x$10365$1CmlGO)
                                 (g$chi-expr$8221$1CmlGO
                                   g$x$10365$1CmlGO
                                   g$r$10360$1CmlGO
                                   g$mr$10361$1CmlGO)))
                              g$init*$10359$1CmlGO)
                         ((case-lambda
                            ((g$lhs$10366$1CmlGO g$rhs$10367$1CmlGO)
                             ((case-lambda
                                ((g$t$10368$1CmlGO)
                                 (if (g$memv$5663$1CmlGO
                                       g$t$10368$1CmlGO
                                       '(defun))
                                   ((case-lambda
                                      ((g$rhs$10369$1CmlGO)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$10366$1CmlGO
                                           g$rhs$10369$1CmlGO)
                                         (g$f$10362$1CmlGO
                                           (cdr g$lhs*$10363$1CmlGO)
                                           (cdr g$rhs*$10364$1CmlGO)))))
                                    (g$chi-defun$8226$1CmlGO
                                      (cdr g$rhs$10367$1CmlGO)
                                      g$r$10360$1CmlGO
                                      g$mr$10361$1CmlGO))
                                   (if (g$memv$5663$1CmlGO
                                         g$t$10368$1CmlGO
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$10370$1CmlGO)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$10366$1CmlGO
                                             g$rhs$10370$1CmlGO)
                                           (g$f$10362$1CmlGO
                                             (cdr g$lhs*$10363$1CmlGO)
                                             (cdr g$rhs*$10364$1CmlGO)))))
                                      (g$chi-expr$8221$1CmlGO
                                        (cdr g$rhs$10367$1CmlGO)
                                        g$r$10360$1CmlGO
                                        g$mr$10361$1CmlGO))
                                     (if (g$memv$5663$1CmlGO
                                           g$t$10368$1CmlGO
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$10371$1CmlGO)
                                           (cons
                                             g$e$10371$1CmlGO
                                             (g$f$10362$1CmlGO
                                               (cdr g$lhs*$10363$1CmlGO)
                                               (cdr g$rhs*$10364$1CmlGO)))))
                                        (g$chi-expr$8221$1CmlGO
                                          (cdr g$rhs$10367$1CmlGO)
                                          g$r$10360$1CmlGO
                                          g$mr$10361$1CmlGO))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$10367$1CmlGO))))))
                              (car g$rhs$10367$1CmlGO))))
                          (car g$lhs*$10363$1CmlGO)
                          (car g$rhs*$10364$1CmlGO)))))))
           g$f$10362$1CmlGO)
         g$lhs*$10357$1CmlGO
         g$rhs*$10358$1CmlGO))))
   (g$chi-rhs*$8229$1CmlGO
     g$chi-rhs*$11689$1CmlGO
     (case-lambda
       ((g$rhs*$10372$1CmlGO g$r$10373$1CmlGO g$mr$10374$1CmlGO)
        ((letrec ((g$f$10375$1CmlGO
                    (case-lambda
                      ((g$ls$10376$1CmlGO)
                       (if (null? g$ls$10376$1CmlGO)
                         '()
                         ((case-lambda
                            ((g$a$10377$1CmlGO)
                             (cons
                               g$a$10377$1CmlGO
                               (g$f$10375$1CmlGO (cdr g$ls$10376$1CmlGO)))))
                          (g$chi-rhs$8227$1CmlGO
                            (car g$ls$10376$1CmlGO)
                            g$r$10373$1CmlGO
                            g$mr$10374$1CmlGO)))))))
           g$f$10375$1CmlGO)
         g$rhs*$10372$1CmlGO))))
   (g$find-bound=?$8230$1CmlGO
     g$find-bound=?$11690$1CmlGO
     (case-lambda
       ((g$x$10378$1CmlGO g$lhs*$10379$1CmlGO g$rhs*$10380$1CmlGO)
        (if (null? g$lhs*$10379$1CmlGO)
          '#f
          (if (g$bound-id=?$7928$1CmlGO
                g$x$10378$1CmlGO
                (car g$lhs*$10379$1CmlGO))
            (car g$rhs*$10380$1CmlGO)
            (g$find-bound=?$8230$1CmlGO
              g$x$10378$1CmlGO
              (cdr g$lhs*$10379$1CmlGO)
              (cdr g$rhs*$10380$1CmlGO)))))))
   (g$find-dups$8231$1CmlGO
     g$find-dups$11691$1CmlGO
     (case-lambda
       ((g$ls$10381$1CmlGO)
        ((letrec ((g$f$10382$1CmlGO
                    (case-lambda
                      ((g$ls$10383$1CmlGO g$dups$10384$1CmlGO)
                       (if (null? g$ls$10383$1CmlGO)
                         g$dups$10384$1CmlGO
                         ((case-lambda
                            ((g$t$10385$1CmlGO)
                             (if g$t$10385$1CmlGO
                               ((case-lambda
                                  ((g$x$10386$1CmlGO)
                                   (g$f$10382$1CmlGO
                                     (cdr g$ls$10383$1CmlGO)
                                     (cons
                                       (list
                                         (car g$ls$10383$1CmlGO)
                                         g$x$10386$1CmlGO)
                                       g$dups$10384$1CmlGO))))
                                g$t$10385$1CmlGO)
                               (g$f$10382$1CmlGO
                                 (cdr g$ls$10383$1CmlGO)
                                 g$dups$10384$1CmlGO))))
                          (g$find-bound=?$8230$1CmlGO
                            (car g$ls$10383$1CmlGO)
                            (cdr g$ls$10383$1CmlGO)
                            (cdr g$ls$10383$1CmlGO))))))))
           g$f$10382$1CmlGO)
         g$ls$10381$1CmlGO
         '()))))
   (g$chi-internal$8232$1CmlGO
     g$chi-internal$11692$1CmlGO
     (case-lambda
       ((g$e*$10387$1CmlGO g$r$10388$1CmlGO g$mr$10389$1CmlGO)
        ((case-lambda
           ((g$rib$10390$1CmlGO)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$8247$1CmlGO
                   (map (case-lambda
                          ((g$x$10399$1CmlGO)
                           (g$add-subst$7915$1CmlGO
                             g$rib$10390$1CmlGO
                             g$x$10399$1CmlGO)))
                        (g$syntax->list$7924$1CmlGO g$e*$10387$1CmlGO))
                   g$r$10388$1CmlGO
                   g$mr$10389$1CmlGO
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$10390$1CmlGO
                   '#f)))
              (case-lambda
                ((g$e*$10400$1CmlGO
                   g$r$10401$1CmlGO
                   g$mr$10402$1CmlGO
                   g$lex*$10403$1CmlGO
                   g$rhs*$10404$1CmlGO
                   g$mod**$10405$1CmlGO
                   g$kwd*$10406$1CmlGO
                   g$_exp*$10407$1CmlGO)
                 ((case-lambda
                    ((g$_exp*$10408$1CmlGO
                       g$kwd*$10409$1CmlGO
                       g$mod**$10410$1CmlGO
                       g$rhs*$10411$1CmlGO
                       g$lex*$10412$1CmlGO
                       g$mr$10413$1CmlGO
                       g$r$10414$1CmlGO
                       g$e*$10415$1CmlGO)
                     (begin
                       (if (null? g$e*$10415$1CmlGO)
                         (g$syntax-violation$8314$1CmlGO
                           '#f
                           '"no expression in body"
                           g$e*$10415$1CmlGO)
                         (void))
                       ((case-lambda
                          ((g$init*$10416$1CmlGO)
                           ((case-lambda
                              ((g$rhs*$10417$1CmlGO)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$7862$1CmlGO
                                     '#f
                                     (reverse g$lex*$10412$1CmlGO)
                                     (reverse g$rhs*$10417$1CmlGO)
                                     (g$build-sequence$7859$1CmlGO
                                       '#f
                                       g$init*$10416$1CmlGO)))))))
                            (g$chi-rhs*$8229$1CmlGO
                              g$rhs*$10411$1CmlGO
                              g$r$10414$1CmlGO
                              g$mr$10413$1CmlGO))))
                        (g$chi-expr*$8219$1CmlGO
                          (append
                            (apply append (reverse g$mod**$10410$1CmlGO))
                            g$e*$10415$1CmlGO)
                          g$r$10414$1CmlGO
                          g$mr$10413$1CmlGO)))))
                  g$_exp*$10407$1CmlGO
                  g$kwd*$10406$1CmlGO
                  g$mod**$10405$1CmlGO
                  g$rhs*$10404$1CmlGO
                  g$lex*$10403$1CmlGO
                  g$mr$10402$1CmlGO
                  g$r$10401$1CmlGO
                  g$e*$10400$1CmlGO))))))
         (g$make-empty-rib$7888$1CmlGO)))))
   (g$parse-module$8233$1CmlGO
     g$parse-module$11693$1CmlGO
     (case-lambda
       ((g$e$10418$1CmlGO)
        ((case-lambda
           ((g$t$10419$1CmlGO)
            ((case-lambda
               ((g$ls/false$10420$1CmlGO)
                (if g$ls/false$10420$1CmlGO
                  (apply
                    (case-lambda
                      ((g$export*$10421$1CmlGO g$b*$10422$1CmlGO)
                       (begin
                         (if (not (g$for-all$5668$1CmlGO
                                    g$id?$7925$1CmlGO
                                    g$export*$10421$1CmlGO))
                           (g$syntax-violation$8314$1CmlGO
                             '#f
                             '"module exports must be identifiers"
                             g$e$10418$1CmlGO)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$10421$1CmlGO)
                           g$b*$10422$1CmlGO))))
                    g$ls/false$10420$1CmlGO)
                  ((case-lambda
                     ((g$t$10423$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$10424$1CmlGO)
                          (if g$ls/false$10424$1CmlGO
                            (apply
                              (case-lambda
                                ((g$name$10425$1CmlGO
                                   g$export*$10426$1CmlGO
                                   g$b*$10427$1CmlGO)
                                 (begin
                                   (if (not (g$id?$7925$1CmlGO
                                              g$name$10425$1CmlGO))
                                     (g$syntax-violation$8314$1CmlGO
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$10418$1CmlGO)
                                     (void))
                                   (if (not (g$for-all$5668$1CmlGO
                                              g$id?$7925$1CmlGO
                                              g$export*$10426$1CmlGO))
                                     (g$syntax-violation$8314$1CmlGO
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$10418$1CmlGO)
                                     (void))
                                   (values
                                     g$name$10425$1CmlGO
                                     (list->vector g$export*$10426$1CmlGO)
                                     g$b*$10427$1CmlGO))))
                              g$ls/false$10424$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$10423$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$10423$1CmlGO
                         '(_ any each-any . each-any)))))
                   g$t$10419$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$10419$1CmlGO
               '(_ each-any . each-any)))))
         g$e$10418$1CmlGO))))
   (g$9374$8234$1CmlGO
     g$9374$11694$1CmlGO
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9377$1CmlGO
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$9376$8235$1CmlGO g$9376$11695$1CmlGO '#f)
   (g$9375$8236$1CmlGO
     g$9375$11696$1CmlGO
     (make-record-constructor-descriptor
       g$9374$8234$1CmlGO
       '#f
       g$9376$8235$1CmlGO))
   (g$module-interface?$8237$1CmlGO
     g$module-interface?$11697$1CmlGO
     (record-predicate g$9374$8234$1CmlGO))
   (g$make-module-interface$8238$1CmlGO
     g$make-module-interface$11698$1CmlGO
     (record-constructor g$9375$8236$1CmlGO))
   (g$module-interface-first-mark$8239$1CmlGO
     g$module-interface-first-mark$11699$1CmlGO
     (record-accessor g$9374$8234$1CmlGO '0))
   (g$module-interface-exp-id-vec$8240$1CmlGO
     g$module-interface-exp-id-vec$11700$1CmlGO
     (record-accessor g$9374$8234$1CmlGO '1))
   (g$module-interface-exp-lab-vec$8241$1CmlGO
     g$module-interface-exp-lab-vec$11701$1CmlGO
     (record-accessor g$9374$8234$1CmlGO '2))
   (g$set-module-interface-first-mark!$8242$1CmlGO
     g$set-module-interface-first-mark!$11702$1CmlGO
     (record-mutator g$9374$8234$1CmlGO '0))
   (g$set-module-interface-exp-id-vec!$8243$1CmlGO
     g$set-module-interface-exp-id-vec!$11703$1CmlGO
     (record-mutator g$9374$8234$1CmlGO '1))
   (g$set-module-interface-exp-lab-vec!$8244$1CmlGO
     g$set-module-interface-exp-lab-vec!$11704$1CmlGO
     (record-mutator g$9374$8234$1CmlGO '2))
   (g$module-interface-exp-id*$8245$1CmlGO
     g$module-interface-exp-id*$11705$1CmlGO
     (case-lambda
       ((g$iface$10428$1CmlGO g$id$10429$1CmlGO)
        (letrec* ((g$diff-marks$10430$1CmlGO
                    (case-lambda
                      ((g$ls$10434$1CmlGO g$x$10435$1CmlGO)
                       (begin
                         (if (null? g$ls$10434$1CmlGO)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$10436$1CmlGO)
                             (if (eq? g$a$10436$1CmlGO g$x$10435$1CmlGO)
                               '()
                               (cons
                                 g$a$10436$1CmlGO
                                 (g$diff-marks$10430$1CmlGO
                                   (cdr g$ls$10434$1CmlGO)
                                   g$x$10435$1CmlGO)))))
                          (car g$ls$10434$1CmlGO)))))))
          ((case-lambda
             ((g$diff$10431$1CmlGO g$id-vec$10432$1CmlGO)
              (if (null? g$diff$10431$1CmlGO)
                g$id-vec$10432$1CmlGO
                (vector-map
                  (case-lambda
                    ((g$x$10433$1CmlGO)
                     (g$make-stx$7898$1CmlGO
                       (g$stx-expr$7899$1CmlGO g$x$10433$1CmlGO)
                       (append
                         g$diff$10431$1CmlGO
                         (g$stx-mark*$7900$1CmlGO g$x$10433$1CmlGO))
                       '()
                       '())))
                  g$id-vec$10432$1CmlGO))))
           (g$diff-marks$10430$1CmlGO
             (g$stx-mark*$7900$1CmlGO g$id$10429$1CmlGO)
             (g$module-interface-first-mark$8239$1CmlGO g$iface$10428$1CmlGO))
           (g$module-interface-exp-id-vec$8240$1CmlGO g$iface$10428$1CmlGO))))))
   (g$chi-internal-module$8246$1CmlGO
     g$chi-internal-module$11706$1CmlGO
     (case-lambda
       ((g$e$10437$1CmlGO
          g$r$10438$1CmlGO
          g$mr$10439$1CmlGO
          g$lex*$10440$1CmlGO
          g$rhs*$10441$1CmlGO
          g$mod**$10442$1CmlGO
          g$kwd*$10443$1CmlGO)
        (call-with-values
          (case-lambda (() (g$parse-module$8233$1CmlGO g$e$10437$1CmlGO)))
          (case-lambda
            ((g$name$10447$1CmlGO g$exp-id*$10448$1CmlGO g$e*$10449$1CmlGO)
             ((case-lambda
                ((g$e*$10450$1CmlGO g$exp-id*$10451$1CmlGO g$name$10452$1CmlGO)
                 ((case-lambda
                    ((g$rib$10453$1CmlGO)
                     ((case-lambda
                        ((g$e*$10454$1CmlGO)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$8247$1CmlGO
                                    g$e*$10454$1CmlGO
                                    g$r$10438$1CmlGO
                                    g$mr$10439$1CmlGO
                                    g$lex*$10440$1CmlGO
                                    g$rhs*$10441$1CmlGO
                                    g$mod**$10442$1CmlGO
                                    g$kwd*$10443$1CmlGO
                                    '()
                                    g$rib$10453$1CmlGO
                                    '#f)))
                               (case-lambda
                                 ((g$e*$10463$1CmlGO
                                    g$r$10464$1CmlGO
                                    g$mr$10465$1CmlGO
                                    g$lex*$10466$1CmlGO
                                    g$rhs*$10467$1CmlGO
                                    g$mod**$10468$1CmlGO
                                    g$kwd*$10469$1CmlGO
                                    g$_exp*$10470$1CmlGO)
                                  ((case-lambda
                                     ((g$_exp*$10471$1CmlGO
                                        g$kwd*$10472$1CmlGO
                                        g$mod**$10473$1CmlGO
                                        g$rhs*$10474$1CmlGO
                                        g$lex*$10475$1CmlGO
                                        g$mr$10476$1CmlGO
                                        g$r$10477$1CmlGO
                                        g$e*$10478$1CmlGO)
                                      ((case-lambda
                                         ((g$exp-lab*$10479$1CmlGO
                                            g$mod**$10480$1CmlGO)
                                          (if (not g$name$10452$1CmlGO)
                                            (values
                                              g$lex*$10475$1CmlGO
                                              g$rhs*$10474$1CmlGO
                                              g$exp-id*$10451$1CmlGO
                                              g$exp-lab*$10479$1CmlGO
                                              g$r$10477$1CmlGO
                                              g$mr$10476$1CmlGO
                                              g$mod**$10480$1CmlGO
                                              g$kwd*$10472$1CmlGO)
                                            ((case-lambda
                                               ((g$lab$10481$1CmlGO
                                                  g$iface$10482$1CmlGO)
                                                (values
                                                  g$lex*$10475$1CmlGO
                                                  g$rhs*$10474$1CmlGO
                                                  (vector g$name$10452$1CmlGO)
                                                  (vector g$lab$10481$1CmlGO)
                                                  (cons
                                                    (cons
                                                      g$lab$10481$1CmlGO
                                                      (cons
                                                        '$module
                                                        g$iface$10482$1CmlGO))
                                                    g$r$10477$1CmlGO)
                                                  (cons
                                                    (cons
                                                      g$lab$10481$1CmlGO
                                                      (cons
                                                        '$module
                                                        g$iface$10482$1CmlGO))
                                                    g$mr$10476$1CmlGO)
                                                  g$mod**$10480$1CmlGO
                                                  g$kwd*$10472$1CmlGO)))
                                             (g$gen-label$7871$1CmlGO 'module)
                                             (g$make-module-interface$8238$1CmlGO
                                               (car (g$stx-mark*$7900$1CmlGO
                                                      g$name$10452$1CmlGO))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$10483$1CmlGO)
                                                    (g$make-stx$7898$1CmlGO
                                                      (g$stx-expr$7899$1CmlGO
                                                        g$x$10483$1CmlGO)
                                                      (g$stx-mark*$7900$1CmlGO
                                                        g$x$10483$1CmlGO)
                                                      '()
                                                      '())))
                                                 g$exp-id*$10451$1CmlGO)
                                               g$exp-lab*$10479$1CmlGO)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$10484$1CmlGO)
                                            ((case-lambda
                                               ((g$t$10485$1CmlGO)
                                                (if g$t$10485$1CmlGO
                                                  g$t$10485$1CmlGO
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$8314$1CmlGO
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$10484$1CmlGO)))))
                                             (g$id->label$7938$1CmlGO
                                               (g$make-stx$7898$1CmlGO
                                                 (g$id->sym$7926$1CmlGO
                                                   g$x$10484$1CmlGO)
                                                 (g$stx-mark*$7900$1CmlGO
                                                   g$x$10484$1CmlGO)
                                                 (list g$rib$10453$1CmlGO)
                                                 '())))))
                                         g$exp-id*$10451$1CmlGO)
                                       (cons
                                         g$e*$10478$1CmlGO
                                         g$mod**$10473$1CmlGO))))
                                   g$_exp*$10470$1CmlGO
                                   g$kwd*$10469$1CmlGO
                                   g$mod**$10468$1CmlGO
                                   g$rhs*$10467$1CmlGO
                                   g$lex*$10466$1CmlGO
                                   g$mr$10465$1CmlGO
                                   g$r$10464$1CmlGO
                                   g$e*$10463$1CmlGO)))))))))
                      (map (case-lambda
                             ((g$x$10486$1CmlGO)
                              (g$add-subst$7915$1CmlGO
                                g$rib$10453$1CmlGO
                                g$x$10486$1CmlGO)))
                           (g$syntax->list$7924$1CmlGO g$e*$10450$1CmlGO)))))
                  (g$make-empty-rib$7888$1CmlGO))))
              g$e*$10449$1CmlGO
              g$exp-id*$10448$1CmlGO
              g$name$10447$1CmlGO)))))))
   (g$chi-body*$8247$1CmlGO
     g$chi-body*$11707$1CmlGO
     (case-lambda
       ((g$e*$10487$1CmlGO
          g$r$10488$1CmlGO
          g$mr$10489$1CmlGO
          g$lex*$10490$1CmlGO
          g$rhs*$10491$1CmlGO
          g$mod**$10492$1CmlGO
          g$kwd*$10493$1CmlGO
          g$exp*$10494$1CmlGO
          g$rib$10495$1CmlGO
          g$top?$10496$1CmlGO)
        (if (null? g$e*$10487$1CmlGO)
          (values
            g$e*$10487$1CmlGO
            g$r$10488$1CmlGO
            g$mr$10489$1CmlGO
            g$lex*$10490$1CmlGO
            g$rhs*$10491$1CmlGO
            g$mod**$10492$1CmlGO
            g$kwd*$10493$1CmlGO
            g$exp*$10494$1CmlGO)
          ((case-lambda
             ((g$e$10497$1CmlGO)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7945$1CmlGO
                     g$e$10497$1CmlGO
                     g$r$10488$1CmlGO)))
                (case-lambda
                  ((g$type$10501$1CmlGO g$value$10502$1CmlGO g$kwd$10503$1CmlGO)
                   ((case-lambda
                      ((g$kwd$10504$1CmlGO
                         g$value$10505$1CmlGO
                         g$type$10506$1CmlGO)
                       ((case-lambda
                          ((g$kwd*$10507$1CmlGO)
                           ((case-lambda
                              ((g$t$10508$1CmlGO)
                               (if (g$memv$5663$1CmlGO
                                     g$t$10508$1CmlGO
                                     '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$8143$1CmlGO
                                        g$e$10497$1CmlGO)))
                                   (case-lambda
                                     ((g$id$10511$1CmlGO g$rhs$10512$1CmlGO)
                                      ((case-lambda
                                         ((g$rhs$10513$1CmlGO g$id$10514$1CmlGO)
                                          (begin
                                            (if (g$bound-id-member?$7932$1CmlGO
                                                  g$id$10514$1CmlGO
                                                  g$kwd*$10507$1CmlGO)
                                              (g$syntax-violation$8314$1CmlGO
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$10497$1CmlGO)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7873$1CmlGO
                                                   g$id$10514$1CmlGO
                                                   g$rib$10495$1CmlGO)))
                                              (case-lambda
                                                ((g$lab$10517$1CmlGO
                                                   g$lex$10518$1CmlGO)
                                                 ((case-lambda
                                                    ((g$lex$10519$1CmlGO
                                                       g$lab$10520$1CmlGO)
                                                     (begin
                                                       (g$extend-rib!$7889$1CmlGO
                                                         g$rib$10495$1CmlGO
                                                         g$id$10514$1CmlGO
                                                         g$lab$10520$1CmlGO)
                                                       (g$chi-body*$8247$1CmlGO
                                                         (cdr g$e*$10487$1CmlGO)
                                                         (g$add-lexical$8150$1CmlGO
                                                           g$lab$10520$1CmlGO
                                                           g$lex$10519$1CmlGO
                                                           g$r$10488$1CmlGO)
                                                         g$mr$10489$1CmlGO
                                                         (cons
                                                           g$lex$10519$1CmlGO
                                                           g$lex*$10490$1CmlGO)
                                                         (cons
                                                           g$rhs$10513$1CmlGO
                                                           g$rhs*$10491$1CmlGO)
                                                         g$mod**$10492$1CmlGO
                                                         g$kwd*$10507$1CmlGO
                                                         g$exp*$10494$1CmlGO
                                                         g$rib$10495$1CmlGO
                                                         g$top?$10496$1CmlGO))))
                                                  g$lex$10518$1CmlGO
                                                  g$lab$10517$1CmlGO)))))))
                                       g$rhs$10512$1CmlGO
                                       g$id$10511$1CmlGO))))
                                 (if (g$memv$5663$1CmlGO
                                       g$t$10508$1CmlGO
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$8144$1CmlGO
                                          g$e$10497$1CmlGO)))
                                     (case-lambda
                                       ((g$id$10523$1CmlGO g$rhs$10524$1CmlGO)
                                        ((case-lambda
                                           ((g$rhs$10525$1CmlGO
                                              g$id$10526$1CmlGO)
                                            (begin
                                              (if (g$bound-id-member?$7932$1CmlGO
                                                    g$id$10526$1CmlGO
                                                    g$kwd*$10507$1CmlGO)
                                                (g$syntax-violation$8314$1CmlGO
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$10497$1CmlGO)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$10527$1CmlGO
                                                    g$expanded-rhs$10528$1CmlGO)
                                                  (begin
                                                    (g$extend-rib!$7889$1CmlGO
                                                      g$rib$10495$1CmlGO
                                                      g$id$10526$1CmlGO
                                                      g$lab$10527$1CmlGO)
                                                    ((case-lambda
                                                       ((g$b$10529$1CmlGO)
                                                        (g$chi-body*$8247$1CmlGO
                                                          (cdr g$e*$10487$1CmlGO)
                                                          (cons
                                                            (cons
                                                              g$lab$10527$1CmlGO
                                                              g$b$10529$1CmlGO)
                                                            g$r$10488$1CmlGO)
                                                          (cons
                                                            (cons
                                                              g$lab$10527$1CmlGO
                                                              g$b$10529$1CmlGO)
                                                            g$mr$10489$1CmlGO)
                                                          g$lex*$10490$1CmlGO
                                                          g$rhs*$10491$1CmlGO
                                                          g$mod**$10492$1CmlGO
                                                          g$kwd*$10507$1CmlGO
                                                          g$exp*$10494$1CmlGO
                                                          g$rib$10495$1CmlGO
                                                          g$top?$10496$1CmlGO)))
                                                     (g$make-eval-transformer$7957$1CmlGO
                                                       g$expanded-rhs$10528$1CmlGO)))))
                                               (g$gen-define-label$7874$1CmlGO
                                                 g$id$10526$1CmlGO
                                                 g$rib$10495$1CmlGO)
                                               (g$expand-transformer$8248$1CmlGO
                                                 g$rhs$10525$1CmlGO
                                                 g$mr$10489$1CmlGO)))))
                                         g$rhs$10524$1CmlGO
                                         g$id$10523$1CmlGO))))
                                   (if (g$memv$5663$1CmlGO
                                         g$t$10508$1CmlGO
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$10530$1CmlGO)
                                         ((case-lambda
                                            ((g$ls/false$10531$1CmlGO)
                                             (if (if g$ls/false$10531$1CmlGO
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$10532$1CmlGO
                                                            g$xrhs*$10533$1CmlGO
                                                            g$xbody*$10534$1CmlGO)
                                                          (if (not (g$valid-bound-ids?$7930$1CmlGO
                                                                     g$xlhs*$10532$1CmlGO))
                                                            (g$syntax-violation$8314$1CmlGO
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$10497$1CmlGO)
                                                            (void))))
                                                       g$ls/false$10531$1CmlGO))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$10535$1CmlGO
                                                      g$xrhs*$10536$1CmlGO
                                                      g$xbody*$10537$1CmlGO)
                                                    ((case-lambda
                                                       ((g$xlab*$10538$1CmlGO)
                                                        ((case-lambda
                                                           ((g$xrib$10539$1CmlGO)
                                                            ((case-lambda
                                                               ((g$xb*$10540$1CmlGO)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$8247$1CmlGO
                                                                      (append
                                                                        (map (case-lambda
                                                                               ((g$x$10541$1CmlGO)
                                                                                (g$add-subst$7915$1CmlGO
                                                                                  g$xrib$10539$1CmlGO
                                                                                  g$x$10541$1CmlGO)))
                                                                             g$xbody*$10537$1CmlGO)
                                                                        (cdr g$e*$10487$1CmlGO))
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$10538$1CmlGO
                                                                             g$xb*$10540$1CmlGO)
                                                                        g$r$10488$1CmlGO)
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$10538$1CmlGO
                                                                             g$xb*$10540$1CmlGO)
                                                                        g$mr$10489$1CmlGO)
                                                                      g$lex*$10490$1CmlGO
                                                                      g$rhs*$10491$1CmlGO
                                                                      g$mod**$10492$1CmlGO
                                                                      g$kwd*$10507$1CmlGO
                                                                      g$exp*$10494$1CmlGO
                                                                      g$rib$10495$1CmlGO
                                                                      g$top?$10496$1CmlGO))))))
                                                             (map (case-lambda
                                                                    ((g$x$10542$1CmlGO)
                                                                     (g$make-eval-transformer$7957$1CmlGO
                                                                       (g$expand-transformer$8248$1CmlGO
                                                                         (if (eq? g$type$10506$1CmlGO
                                                                                  'let-syntax)
                                                                           g$x$10542$1CmlGO
                                                                           (g$add-subst$7915$1CmlGO
                                                                             g$xrib$10539$1CmlGO
                                                                             g$x$10542$1CmlGO))
                                                                         g$mr$10489$1CmlGO))))
                                                                  g$xrhs*$10536$1CmlGO))))
                                                         (g$make-full-rib$7893$1CmlGO
                                                           g$xlhs*$10535$1CmlGO
                                                           g$xlab*$10538$1CmlGO))))
                                                     (map g$gen-label$7871$1CmlGO
                                                          g$xlhs*$10535$1CmlGO))))
                                                 g$ls/false$10531$1CmlGO)
                                               (g$syntax-violation$8314$1CmlGO
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$10530$1CmlGO))))
                                          (g$syntax-dispatch$8203$1CmlGO
                                            g$t$10530$1CmlGO
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$10497$1CmlGO)
                                     (if (g$memv$5663$1CmlGO
                                           g$t$10508$1CmlGO
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$10543$1CmlGO)
                                           ((case-lambda
                                              ((g$ls/false$10544$1CmlGO)
                                               (if g$ls/false$10544$1CmlGO
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$10545$1CmlGO)
                                                      (g$chi-body*$8247$1CmlGO
                                                        (append
                                                          g$x*$10545$1CmlGO
                                                          (cdr g$e*$10487$1CmlGO))
                                                        g$r$10488$1CmlGO
                                                        g$mr$10489$1CmlGO
                                                        g$lex*$10490$1CmlGO
                                                        g$rhs*$10491$1CmlGO
                                                        g$mod**$10492$1CmlGO
                                                        g$kwd*$10507$1CmlGO
                                                        g$exp*$10494$1CmlGO
                                                        g$rib$10495$1CmlGO
                                                        g$top?$10496$1CmlGO)))
                                                   g$ls/false$10544$1CmlGO)
                                                 (g$syntax-violation$8314$1CmlGO
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$10543$1CmlGO))))
                                            (g$syntax-dispatch$8203$1CmlGO
                                              g$t$10543$1CmlGO
                                              '(_ . each-any)))))
                                        g$e$10497$1CmlGO)
                                       (if (g$memv$5663$1CmlGO
                                             g$t$10508$1CmlGO
                                             '(global-macro global-macro!))
                                         (g$chi-body*$8247$1CmlGO
                                           (cons
                                             (g$add-subst$7915$1CmlGO
                                               g$rib$10495$1CmlGO
                                               (g$chi-global-macro$8218$1CmlGO
                                                 g$value$10505$1CmlGO
                                                 g$e$10497$1CmlGO))
                                             (cdr g$e*$10487$1CmlGO))
                                           g$r$10488$1CmlGO
                                           g$mr$10489$1CmlGO
                                           g$lex*$10490$1CmlGO
                                           g$rhs*$10491$1CmlGO
                                           g$mod**$10492$1CmlGO
                                           g$kwd*$10507$1CmlGO
                                           g$exp*$10494$1CmlGO
                                           g$rib$10495$1CmlGO
                                           g$top?$10496$1CmlGO)
                                         (if (g$memv$5663$1CmlGO
                                               g$t$10508$1CmlGO
                                               '(local-macro local-macro!))
                                           (g$chi-body*$8247$1CmlGO
                                             (cons
                                               (g$add-subst$7915$1CmlGO
                                                 g$rib$10495$1CmlGO
                                                 (g$chi-local-macro$8217$1CmlGO
                                                   g$value$10505$1CmlGO
                                                   g$e$10497$1CmlGO))
                                               (cdr g$e*$10487$1CmlGO))
                                             g$r$10488$1CmlGO
                                             g$mr$10489$1CmlGO
                                             g$lex*$10490$1CmlGO
                                             g$rhs*$10491$1CmlGO
                                             g$mod**$10492$1CmlGO
                                             g$kwd*$10507$1CmlGO
                                             g$exp*$10494$1CmlGO
                                             g$rib$10495$1CmlGO
                                             g$top?$10496$1CmlGO)
                                           (if (g$memv$5663$1CmlGO
                                                 g$t$10508$1CmlGO
                                                 '(macro macro!))
                                             (g$chi-body*$8247$1CmlGO
                                               (cons
                                                 (g$add-subst$7915$1CmlGO
                                                   g$rib$10495$1CmlGO
                                                   (g$chi-macro$8216$1CmlGO
                                                     g$value$10505$1CmlGO
                                                     g$e$10497$1CmlGO))
                                                 (cdr g$e*$10487$1CmlGO))
                                               g$r$10488$1CmlGO
                                               g$mr$10489$1CmlGO
                                               g$lex*$10490$1CmlGO
                                               g$rhs*$10491$1CmlGO
                                               g$mod**$10492$1CmlGO
                                               g$kwd*$10507$1CmlGO
                                               g$exp*$10494$1CmlGO
                                               g$rib$10495$1CmlGO
                                               g$top?$10496$1CmlGO)
                                             (if (g$memv$5663$1CmlGO
                                                   g$t$10508$1CmlGO
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$8246$1CmlGO
                                                      g$e$10497$1CmlGO
                                                      g$r$10488$1CmlGO
                                                      g$mr$10489$1CmlGO
                                                      g$lex*$10490$1CmlGO
                                                      g$rhs*$10491$1CmlGO
                                                      g$mod**$10492$1CmlGO
                                                      g$kwd*$10507$1CmlGO)))
                                                 (case-lambda
                                                   ((g$lex*$10554$1CmlGO
                                                      g$rhs*$10555$1CmlGO
                                                      g$m-exp-id*$10556$1CmlGO
                                                      g$m-exp-lab*$10557$1CmlGO
                                                      g$r$10558$1CmlGO
                                                      g$mr$10559$1CmlGO
                                                      g$mod**$10560$1CmlGO
                                                      g$kwd*$10561$1CmlGO)
                                                    ((case-lambda
                                                       ((g$kwd*$10562$1CmlGO
                                                          g$mod**$10563$1CmlGO
                                                          g$mr$10564$1CmlGO
                                                          g$r$10565$1CmlGO
                                                          g$m-exp-lab*$10566$1CmlGO
                                                          g$m-exp-id*$10567$1CmlGO
                                                          g$rhs*$10568$1CmlGO
                                                          g$lex*$10569$1CmlGO)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$10570$1CmlGO
                                                                 g$lab$10571$1CmlGO)
                                                               (g$extend-rib!$7889$1CmlGO
                                                                 g$rib$10495$1CmlGO
                                                                 g$id$10570$1CmlGO
                                                                 g$lab$10571$1CmlGO)))
                                                            g$m-exp-id*$10567$1CmlGO
                                                            g$m-exp-lab*$10566$1CmlGO)
                                                          (g$chi-body*$8247$1CmlGO
                                                            (cdr g$e*$10487$1CmlGO)
                                                            g$r$10565$1CmlGO
                                                            g$mr$10564$1CmlGO
                                                            g$lex*$10569$1CmlGO
                                                            g$rhs*$10568$1CmlGO
                                                            g$mod**$10563$1CmlGO
                                                            g$kwd*$10562$1CmlGO
                                                            g$exp*$10494$1CmlGO
                                                            g$rib$10495$1CmlGO
                                                            g$top?$10496$1CmlGO))))
                                                     g$kwd*$10561$1CmlGO
                                                     g$mod**$10560$1CmlGO
                                                     g$mr$10559$1CmlGO
                                                     g$r$10558$1CmlGO
                                                     g$m-exp-lab*$10557$1CmlGO
                                                     g$m-exp-id*$10556$1CmlGO
                                                     g$rhs*$10555$1CmlGO
                                                     g$lex*$10554$1CmlGO))))
                                               (if (g$memv$5663$1CmlGO
                                                     g$t$10508$1CmlGO
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$8298$1CmlGO
                                                     (g$stx->datum$7936$1CmlGO
                                                       g$e$10497$1CmlGO))
                                                   (g$chi-body*$8247$1CmlGO
                                                     (cdr g$e*$10487$1CmlGO)
                                                     g$r$10488$1CmlGO
                                                     g$mr$10489$1CmlGO
                                                     g$lex*$10490$1CmlGO
                                                     g$rhs*$10491$1CmlGO
                                                     g$mod**$10492$1CmlGO
                                                     g$kwd*$10507$1CmlGO
                                                     g$exp*$10494$1CmlGO
                                                     g$rib$10495$1CmlGO
                                                     g$top?$10496$1CmlGO))
                                                 (if (g$memv$5663$1CmlGO
                                                       g$t$10508$1CmlGO
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$10572$1CmlGO)
                                                       ((case-lambda
                                                          ((g$ls/false$10573$1CmlGO)
                                                           (if g$ls/false$10573$1CmlGO
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$10574$1CmlGO)
                                                                  (g$chi-body*$8247$1CmlGO
                                                                    (cdr g$e*$10487$1CmlGO)
                                                                    g$r$10488$1CmlGO
                                                                    g$mr$10489$1CmlGO
                                                                    g$lex*$10490$1CmlGO
                                                                    g$rhs*$10491$1CmlGO
                                                                    g$mod**$10492$1CmlGO
                                                                    g$kwd*$10507$1CmlGO
                                                                    (append
                                                                      g$exp-decl*$10574$1CmlGO
                                                                      g$exp*$10494$1CmlGO)
                                                                    g$rib$10495$1CmlGO
                                                                    g$top?$10496$1CmlGO)))
                                                               g$ls/false$10573$1CmlGO)
                                                             (g$syntax-violation$8314$1CmlGO
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$10572$1CmlGO))))
                                                        (g$syntax-dispatch$8203$1CmlGO
                                                          g$t$10572$1CmlGO
                                                          '(_ . each-any)))))
                                                    g$e$10497$1CmlGO)
                                                   (if (g$memv$5663$1CmlGO
                                                         g$t$10508$1CmlGO
                                                         '(import))
                                                     (begin
                                                       ((case-lambda
                                                          (()
                                                           (letrec* ((g$module-import?$10575$1CmlGO
                                                                       (case-lambda
                                                                         ((g$e$10617$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$t$10618$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10619$1CmlGO)
                                                                                  (if (if g$ls/false$10619$1CmlGO
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$id$10620$1CmlGO)
                                                                                               (g$id?$7925$1CmlGO
                                                                                                 g$id$10620$1CmlGO)))
                                                                                            g$ls/false$10619$1CmlGO))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$id$10621$1CmlGO)
                                                                                         '#t))
                                                                                      g$ls/false$10619$1CmlGO)
                                                                                    ((case-lambda
                                                                                       ((g$t$10622$1CmlGO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10623$1CmlGO)
                                                                                            (if g$ls/false$10623$1CmlGO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$imp*$10624$1CmlGO)
                                                                                                   '#f))
                                                                                                g$ls/false$10623$1CmlGO)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10625$1CmlGO)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10626$1CmlGO)
                                                                                                      (if g$ls/false$10626$1CmlGO
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$syntax-violation$8314$1CmlGO
                                                                                                               '#f
                                                                                                               '"malformed import form"
                                                                                                               g$e$10617$1CmlGO)))
                                                                                                          g$ls/false$10626$1CmlGO)
                                                                                                        (g$syntax-violation$8314$1CmlGO
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10625$1CmlGO))))
                                                                                                   (g$syntax-dispatch$8203$1CmlGO
                                                                                                     g$t$10625$1CmlGO
                                                                                                     '_))))
                                                                                               g$t$10622$1CmlGO))))
                                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                                           g$t$10622$1CmlGO
                                                                                           '(_ .
                                                                                               each-any)))))
                                                                                     g$t$10618$1CmlGO))))
                                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                                 g$t$10618$1CmlGO
                                                                                 '(_ any)))))
                                                                           g$e$10617$1CmlGO))))
                                                                     (g$module-import$10576$1CmlGO
                                                                       (case-lambda
                                                                         ((g$e$10600$1CmlGO
                                                                            g$r$10601$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$t$10602$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10603$1CmlGO)
                                                                                  (if (if g$ls/false$10603$1CmlGO
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$id$10604$1CmlGO)
                                                                                               (g$id?$7925$1CmlGO
                                                                                                 g$id$10604$1CmlGO)))
                                                                                            g$ls/false$10603$1CmlGO))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$id$10605$1CmlGO)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$syntax-type$7945$1CmlGO
                                                                                                g$id$10605$1CmlGO
                                                                                                g$r$10601$1CmlGO)))
                                                                                           (case-lambda
                                                                                             ((g$type$10609$1CmlGO
                                                                                                g$value$10610$1CmlGO
                                                                                                g$kwd$10611$1CmlGO)
                                                                                              ((case-lambda
                                                                                                 ((g$kwd$10612$1CmlGO
                                                                                                    g$value$10613$1CmlGO
                                                                                                    g$type$10614$1CmlGO)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$10615$1CmlGO)
                                                                                                      (if (g$memv$5663$1CmlGO
                                                                                                            g$t$10615$1CmlGO
                                                                                                            '($module))
                                                                                                        ((case-lambda
                                                                                                           ((g$iface$10616$1CmlGO)
                                                                                                            (values
                                                                                                              (g$module-interface-exp-id*$8245$1CmlGO
                                                                                                                g$iface$10616$1CmlGO
                                                                                                                g$id$10605$1CmlGO)
                                                                                                              (g$module-interface-exp-lab-vec$8241$1CmlGO
                                                                                                                g$iface$10616$1CmlGO))))
                                                                                                         g$value$10613$1CmlGO)
                                                                                                        (g$syntax-violation$8314$1CmlGO
                                                                                                          '#f
                                                                                                          '"invalid import"
                                                                                                          g$e$10600$1CmlGO))))
                                                                                                   g$type$10614$1CmlGO)))
                                                                                               g$kwd$10611$1CmlGO
                                                                                               g$value$10610$1CmlGO
                                                                                               g$type$10609$1CmlGO))))))
                                                                                      g$ls/false$10603$1CmlGO)
                                                                                    (g$syntax-violation$8314$1CmlGO
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$10602$1CmlGO))))
                                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                                 g$t$10602$1CmlGO
                                                                                 '(_ any)))))
                                                                           g$e$10600$1CmlGO))))
                                                                     (g$library-import$10577$1CmlGO
                                                                       (case-lambda
                                                                         ((g$e$10586$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$t$10587$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10588$1CmlGO)
                                                                                  (if g$ls/false$10588$1CmlGO
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ctxt$10589$1CmlGO
                                                                                           g$imp*$10590$1CmlGO)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$parse-import-spec*$8252$1CmlGO
                                                                                                (g$syntax->datum$8317$1CmlGO
                                                                                                  g$imp*$10590$1CmlGO))))
                                                                                           (case-lambda
                                                                                             ((g$subst-names$10593$1CmlGO
                                                                                                g$subst-labels$10594$1CmlGO)
                                                                                              ((case-lambda
                                                                                                 ((g$subst-labels$10595$1CmlGO
                                                                                                    g$subst-names$10596$1CmlGO)
                                                                                                  (values
                                                                                                    (vector-map
                                                                                                      (case-lambda
                                                                                                        ((g$name$10597$1CmlGO)
                                                                                                         (g$datum->stx$7908$1CmlGO
                                                                                                           g$ctxt$10589$1CmlGO
                                                                                                           g$name$10597$1CmlGO)))
                                                                                                      g$subst-names$10596$1CmlGO)
                                                                                                    g$subst-labels$10595$1CmlGO)))
                                                                                               g$subst-labels$10594$1CmlGO
                                                                                               g$subst-names$10593$1CmlGO))))))
                                                                                      g$ls/false$10588$1CmlGO)
                                                                                    ((case-lambda
                                                                                       ((g$t$10598$1CmlGO)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10599$1CmlGO)
                                                                                            (if g$ls/false$10599$1CmlGO
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$syntax-violation$8314$1CmlGO
                                                                                                     '#f
                                                                                                     '"invalid import form"
                                                                                                     g$e$10586$1CmlGO)))
                                                                                                g$ls/false$10599$1CmlGO)
                                                                                              (g$syntax-violation$8314$1CmlGO
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$10598$1CmlGO))))
                                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                                           g$t$10598$1CmlGO
                                                                                           '_))))
                                                                                     g$t$10587$1CmlGO))))
                                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                                 g$t$10587$1CmlGO
                                                                                 '(any .
                                                                                       each-any)))))
                                                                           g$e$10586$1CmlGO)))))
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$10575$1CmlGO
                                                                        g$e$10497$1CmlGO)
                                                                    (g$module-import$10576$1CmlGO
                                                                      g$e$10497$1CmlGO
                                                                      g$r$10488$1CmlGO)
                                                                    (g$library-import$10577$1CmlGO
                                                                      g$e$10497$1CmlGO))))
                                                               (case-lambda
                                                                 ((g$id*$10580$1CmlGO
                                                                    g$lab*$10581$1CmlGO)
                                                                  ((case-lambda
                                                                     ((g$lab*$10582$1CmlGO
                                                                        g$id*$10583$1CmlGO)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$10584$1CmlGO
                                                                             g$lab$10585$1CmlGO)
                                                                           (g$extend-rib!$7889$1CmlGO
                                                                             g$rib$10495$1CmlGO
                                                                             g$id$10584$1CmlGO
                                                                             g$lab$10585$1CmlGO)))
                                                                        g$id*$10583$1CmlGO
                                                                        g$lab*$10582$1CmlGO)))
                                                                   g$lab*$10581$1CmlGO
                                                                   g$id*$10580$1CmlGO))))))))
                                                       (g$chi-body*$8247$1CmlGO
                                                         (cdr g$e*$10487$1CmlGO)
                                                         g$r$10488$1CmlGO
                                                         g$mr$10489$1CmlGO
                                                         g$lex*$10490$1CmlGO
                                                         g$rhs*$10491$1CmlGO
                                                         g$mod**$10492$1CmlGO
                                                         g$kwd*$10507$1CmlGO
                                                         g$exp*$10494$1CmlGO
                                                         g$rib$10495$1CmlGO
                                                         g$top?$10496$1CmlGO))
                                                     (if g$top?$10496$1CmlGO
                                                       (g$chi-body*$8247$1CmlGO
                                                         (cdr g$e*$10487$1CmlGO)
                                                         g$r$10488$1CmlGO
                                                         g$mr$10489$1CmlGO
                                                         (cons
                                                           (g$gen-lexical$7869$1CmlGO
                                                             'dummy)
                                                           g$lex*$10490$1CmlGO)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$10497$1CmlGO)
                                                           g$rhs*$10491$1CmlGO)
                                                         g$mod**$10492$1CmlGO
                                                         g$kwd*$10507$1CmlGO
                                                         g$exp*$10494$1CmlGO
                                                         g$rib$10495$1CmlGO
                                                         g$top?$10496$1CmlGO)
                                                       (values
                                                         g$e*$10487$1CmlGO
                                                         g$r$10488$1CmlGO
                                                         g$mr$10489$1CmlGO
                                                         g$lex*$10490$1CmlGO
                                                         g$rhs*$10491$1CmlGO
                                                         g$mod**$10492$1CmlGO
                                                         g$kwd*$10507$1CmlGO
                                                         g$exp*$10494$1CmlGO)))))))))))))))
                            g$type$10506$1CmlGO)))
                        (if (g$id?$7925$1CmlGO g$kwd$10504$1CmlGO)
                          (cons g$kwd$10504$1CmlGO g$kwd*$10493$1CmlGO)
                          g$kwd*$10493$1CmlGO))))
                    g$kwd$10503$1CmlGO
                    g$value$10502$1CmlGO
                    g$type$10501$1CmlGO))))))
           (car g$e*$10487$1CmlGO))))))
   (g$expand-transformer$8248$1CmlGO
     g$expand-transformer$11708$1CmlGO
     (case-lambda
       ((g$expr$10627$1CmlGO g$r$10628$1CmlGO)
        ((case-lambda
           ((g$rtc$10629$1CmlGO)
            ((case-lambda
               ((g$expanded-rhs$10630$1CmlGO)
                (begin
                  (for-each
                    ((case-lambda
                       ((g$mark-visit$10631$1CmlGO)
                        (case-lambda
                          ((g$x$10632$1CmlGO)
                           (begin
                             (g$invoke-library$7740$1CmlGO g$x$10632$1CmlGO)
                             (g$mark-visit$10631$1CmlGO g$x$10632$1CmlGO))))))
                     (g$vis-collector$8256$1CmlGO))
                    (g$rtc$10629$1CmlGO))
                  g$expanded-rhs$10630$1CmlGO)))
             ((case-lambda
                ((g$inv-collector$10637$1CmlGO
                   g$vis-collector$10638$1CmlGO
                   g$inv-collector$10639$1CmlGO
                   g$vis-collector$10640$1CmlGO)
                 ((case-lambda
                    ((g$swap$10641$1CmlGO)
                     (dynamic-wind
                       g$swap$10641$1CmlGO
                       (case-lambda
                         (()
                          (g$chi-expr$8221$1CmlGO
                            g$expr$10627$1CmlGO
                            g$r$10628$1CmlGO
                            g$r$10628$1CmlGO)))
                       g$swap$10641$1CmlGO)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10642$1CmlGO)
                           (begin
                             (g$inv-collector$10637$1CmlGO
                               g$inv-collector$10639$1CmlGO)
                             (set! g$inv-collector$10639$1CmlGO
                               g$t$10642$1CmlGO))))
                        (g$inv-collector$10637$1CmlGO))
                       ((case-lambda
                          ((g$t$10643$1CmlGO)
                           (begin
                             (g$vis-collector$10638$1CmlGO
                               g$vis-collector$10640$1CmlGO)
                             (set! g$vis-collector$10640$1CmlGO
                               g$t$10643$1CmlGO))))
                        (g$vis-collector$10638$1CmlGO))))))))
              g$inv-collector$8255$1CmlGO
              g$vis-collector$8256$1CmlGO
              g$rtc$10629$1CmlGO
              (case-lambda ((g$x$10644$1CmlGO) (values)))))))
         (g$make-collector$8254$1CmlGO)))))
   (g$parse-exports$8249$1CmlGO
     g$parse-exports$11709$1CmlGO
     (case-lambda
       ((g$exp*$10645$1CmlGO)
        ((letrec ((g$f$10646$1CmlGO
                    (case-lambda
                      ((g$exp*$10647$1CmlGO
                         g$int*$10648$1CmlGO
                         g$ext*$10649$1CmlGO)
                       (if (null? g$exp*$10647$1CmlGO)
                         (begin
                           (if (not (g$valid-bound-ids?$7930$1CmlGO
                                      g$ext*$10649$1CmlGO))
                             (g$syntax-violation$8314$1CmlGO
                               'export
                               '"invalid exports"
                               (g$find-dups$8231$1CmlGO g$ext*$10649$1CmlGO))
                             (void))
                           (values
                             (map g$syntax->datum$8317$1CmlGO
                                  g$ext*$10649$1CmlGO)
                             g$int*$10648$1CmlGO))
                         ((case-lambda
                            ((g$t$10650$1CmlGO)
                             ((case-lambda
                                ((g$ls/false$10651$1CmlGO)
                                 (if g$ls/false$10651$1CmlGO
                                   (apply
                                     (case-lambda
                                       ((g$rename$10652$1CmlGO
                                          g$i*$10653$1CmlGO
                                          g$e*$10654$1CmlGO)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$8317$1CmlGO
                                                              g$rename$10652$1CmlGO)
                                                            'rename)
                                                     (if (g$for-all$5668$1CmlGO
                                                           g$id?$7925$1CmlGO
                                                           g$i*$10653$1CmlGO)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5668$1CmlGO
                                                           g$id?$7925$1CmlGO
                                                           g$e*$10654$1CmlGO))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$8314$1CmlGO
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10647$1CmlGO))
                                            (void))
                                          (g$f$10646$1CmlGO
                                            (cdr g$exp*$10647$1CmlGO)
                                            (append
                                              g$i*$10653$1CmlGO
                                              g$int*$10648$1CmlGO)
                                            (append
                                              g$e*$10654$1CmlGO
                                              g$ext*$10649$1CmlGO)))))
                                     g$ls/false$10651$1CmlGO)
                                   ((case-lambda
                                      ((g$t$10655$1CmlGO)
                                       ((case-lambda
                                          ((g$ls/false$10656$1CmlGO)
                                           (if g$ls/false$10656$1CmlGO
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10657$1CmlGO)
                                                  (begin
                                                    (if (not (g$id?$7925$1CmlGO
                                                               g$ie$10657$1CmlGO))
                                                      (g$syntax-violation$8314$1CmlGO
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10657$1CmlGO)
                                                      (void))
                                                    (g$f$10646$1CmlGO
                                                      (cdr g$exp*$10647$1CmlGO)
                                                      (cons
                                                        g$ie$10657$1CmlGO
                                                        g$int*$10648$1CmlGO)
                                                      (cons
                                                        g$ie$10657$1CmlGO
                                                        g$ext*$10649$1CmlGO)))))
                                               g$ls/false$10656$1CmlGO)
                                             (g$syntax-violation$8314$1CmlGO
                                               '#f
                                               '"invalid syntax"
                                               g$t$10655$1CmlGO))))
                                        (g$syntax-dispatch$8203$1CmlGO
                                          g$t$10655$1CmlGO
                                          'any))))
                                    g$t$10650$1CmlGO))))
                              (g$syntax-dispatch$8203$1CmlGO
                                g$t$10650$1CmlGO
                                '(any . #(each (any any)))))))
                          (car g$exp*$10647$1CmlGO)))))))
           g$f$10646$1CmlGO)
         g$exp*$10645$1CmlGO
         '()
         '()))))
   (g$parse-library-name$8250$1CmlGO
     g$parse-library-name$11710$1CmlGO
     (case-lambda
       ((g$spec$10658$1CmlGO)
        (letrec* ((g$parse$10659$1CmlGO
                    (case-lambda
                      ((g$x$10666$1CmlGO)
                       ((case-lambda
                          ((g$t$10667$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$10668$1CmlGO)
                               (if (if g$ls/false$10668$1CmlGO
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10669$1CmlGO)
                                            (g$for-all$5668$1CmlGO
                                              (case-lambda
                                                ((g$x$10670$1CmlGO)
                                                 ((case-lambda
                                                    ((g$x$10671$1CmlGO)
                                                     (if (integer?
                                                           g$x$10671$1CmlGO)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10671$1CmlGO))
                                                       '#f)))
                                                  (g$syntax->datum$8317$1CmlGO
                                                    g$x$10670$1CmlGO))))
                                              g$v*$10669$1CmlGO)))
                                         g$ls/false$10668$1CmlGO))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10672$1CmlGO)
                                      (values
                                        '()
                                        (map g$syntax->datum$8317$1CmlGO
                                             g$v*$10672$1CmlGO))))
                                   g$ls/false$10668$1CmlGO)
                                 ((case-lambda
                                    ((g$t$10673$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$10674$1CmlGO)
                                         (if (if g$ls/false$10674$1CmlGO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10675$1CmlGO
                                                        g$rest$10676$1CmlGO)
                                                      (symbol?
                                                        (g$syntax->datum$8317$1CmlGO
                                                          g$x$10675$1CmlGO))))
                                                   g$ls/false$10674$1CmlGO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10677$1CmlGO
                                                  g$rest$10678$1CmlGO)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10659$1CmlGO
                                                       g$rest$10678$1CmlGO)))
                                                  (case-lambda
                                                    ((g$x*$10681$1CmlGO
                                                       g$v*$10682$1CmlGO)
                                                     ((case-lambda
                                                        ((g$v*$10683$1CmlGO
                                                           g$x*$10684$1CmlGO)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$8317$1CmlGO
                                                               g$x$10677$1CmlGO)
                                                             g$x*$10684$1CmlGO)
                                                           g$v*$10683$1CmlGO)))
                                                      g$v*$10682$1CmlGO
                                                      g$x*$10681$1CmlGO))))))
                                             g$ls/false$10674$1CmlGO)
                                           ((case-lambda
                                              ((g$t$10685$1CmlGO)
                                               ((case-lambda
                                                  ((g$ls/false$10686$1CmlGO)
                                                   (if g$ls/false$10686$1CmlGO
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10686$1CmlGO)
                                                     ((case-lambda
                                                        ((g$t$10687$1CmlGO)
                                                         ((case-lambda
                                                            ((g$ls/false$10688$1CmlGO)
                                                             (if g$ls/false$10688$1CmlGO
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8314$1CmlGO
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10658$1CmlGO)))
                                                                 g$ls/false$10688$1CmlGO)
                                                               (g$syntax-violation$8314$1CmlGO
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10687$1CmlGO))))
                                                          (g$syntax-dispatch$8203$1CmlGO
                                                            g$t$10687$1CmlGO
                                                            '_))))
                                                      g$t$10685$1CmlGO))))
                                                (g$syntax-dispatch$8203$1CmlGO
                                                  g$t$10685$1CmlGO
                                                  '()))))
                                            g$t$10673$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$10673$1CmlGO
                                        '(any . any)))))
                                  g$t$10667$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$10667$1CmlGO
                              '(each-any)))))
                        g$x$10666$1CmlGO)))))
          (call-with-values
            (case-lambda (() (g$parse$10659$1CmlGO g$spec$10658$1CmlGO)))
            (case-lambda
              ((g$name*$10662$1CmlGO g$ver*$10663$1CmlGO)
               ((case-lambda
                  ((g$ver*$10664$1CmlGO g$name*$10665$1CmlGO)
                   (begin
                     (if (null? g$name*$10665$1CmlGO)
                       (g$syntax-violation$8314$1CmlGO
                         '#f
                         '"empty library name"
                         g$spec$10658$1CmlGO)
                       (void))
                     (values g$name*$10665$1CmlGO g$ver*$10664$1CmlGO))))
                g$ver*$10663$1CmlGO
                g$name*$10662$1CmlGO))))))))
   (g$parse-library$8251$1CmlGO
     g$parse-library$11711$1CmlGO
     (case-lambda
       ((g$e$10689$1CmlGO)
        ((case-lambda
           ((g$t$10690$1CmlGO)
            ((case-lambda
               ((g$ls/false$10691$1CmlGO)
                (if (if g$ls/false$10691$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10692$1CmlGO
                               g$name*$10693$1CmlGO
                               g$export$10694$1CmlGO
                               g$exp*$10695$1CmlGO
                               g$import$10696$1CmlGO
                               g$imp*$10697$1CmlGO
                               g$b*$10698$1CmlGO)
                             (if (eq? (g$syntax->datum$8317$1CmlGO
                                        g$export$10694$1CmlGO)
                                      'export)
                               (if (eq? (g$syntax->datum$8317$1CmlGO
                                          g$import$10696$1CmlGO)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$8317$1CmlGO
                                          g$library$10692$1CmlGO)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10691$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10699$1CmlGO
                         g$name*$10700$1CmlGO
                         g$export$10701$1CmlGO
                         g$exp*$10702$1CmlGO
                         g$import$10703$1CmlGO
                         g$imp*$10704$1CmlGO
                         g$b*$10705$1CmlGO)
                       (values
                         g$name*$10700$1CmlGO
                         g$exp*$10702$1CmlGO
                         g$imp*$10704$1CmlGO
                         g$b*$10705$1CmlGO)))
                    g$ls/false$10691$1CmlGO)
                  ((case-lambda
                     ((g$t$10706$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$10707$1CmlGO)
                          (if g$ls/false$10707$1CmlGO
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8314$1CmlGO
                                   '#f
                                   '"malformed library"
                                   g$e$10689$1CmlGO)))
                              g$ls/false$10707$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$10706$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO g$t$10706$1CmlGO '_))))
                   g$t$10690$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$10690$1CmlGO
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10689$1CmlGO))))
   (g$parse-import-spec*$8252$1CmlGO
     g$parse-import-spec*$11712$1CmlGO
     (case-lambda
       ((g$imp*$10708$1CmlGO)
        (letrec* ((g$idsyn?$10709$1CmlGO
                    (case-lambda
                      ((g$x$10969$1CmlGO)
                       (symbol?
                         (g$syntax->datum$8317$1CmlGO g$x$10969$1CmlGO)))))
                  (g$dup-error$10710$1CmlGO
                    (case-lambda
                      ((g$name$10968$1CmlGO)
                       (g$syntax-violation$8314$1CmlGO
                         'import
                         '"two imports with different bindings"
                         g$name$10968$1CmlGO))))
                  (g$merge-substs$10711$1CmlGO
                    (case-lambda
                      ((g$s$10959$1CmlGO g$subst$10960$1CmlGO)
                       (letrec* ((g$insert-to-subst$10961$1CmlGO
                                   (case-lambda
                                     ((g$a$10962$1CmlGO g$subst$10963$1CmlGO)
                                      ((case-lambda
                                         ((g$name$10964$1CmlGO
                                            g$label$10965$1CmlGO)
                                          ((case-lambda
                                             ((g$t$10966$1CmlGO)
                                              (if g$t$10966$1CmlGO
                                                ((case-lambda
                                                   ((g$x$10967$1CmlGO)
                                                    (if (eq? (cdr g$x$10967$1CmlGO)
                                                             g$label$10965$1CmlGO)
                                                      g$subst$10963$1CmlGO
                                                      (g$dup-error$10710$1CmlGO
                                                        g$name$10964$1CmlGO))))
                                                 g$t$10966$1CmlGO)
                                                (cons
                                                  g$a$10962$1CmlGO
                                                  g$subst$10963$1CmlGO))))
                                           (g$assq$5658$1CmlGO
                                             g$name$10964$1CmlGO
                                             g$subst$10963$1CmlGO))))
                                       (car g$a$10962$1CmlGO)
                                       (cdr g$a$10962$1CmlGO))))))
                         (if (null? g$s$10959$1CmlGO)
                           g$subst$10960$1CmlGO
                           (g$insert-to-subst$10961$1CmlGO
                             (car g$s$10959$1CmlGO)
                             (g$merge-substs$10711$1CmlGO
                               (cdr g$s$10959$1CmlGO)
                               g$subst$10960$1CmlGO)))))))
                  (g$exclude*$10712$1CmlGO
                    (case-lambda
                      ((g$sym*$10935$1CmlGO g$subst$10936$1CmlGO)
                       (letrec* ((g$exclude$10937$1CmlGO
                                   (case-lambda
                                     ((g$sym$10950$1CmlGO g$subst$10951$1CmlGO)
                                      (if (null? g$subst$10951$1CmlGO)
                                        (g$syntax-violation$8314$1CmlGO
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$10950$1CmlGO)
                                        (if (eq? g$sym$10950$1CmlGO
                                                 (g$caar$5831$1CmlGO
                                                   g$subst$10951$1CmlGO))
                                          (values
                                            (g$cdar$5833$1CmlGO
                                              g$subst$10951$1CmlGO)
                                            (cdr g$subst$10951$1CmlGO))
                                          ((case-lambda
                                             ((g$a$10952$1CmlGO)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$10937$1CmlGO
                                                     g$sym$10950$1CmlGO
                                                     (cdr g$subst$10951$1CmlGO))))
                                                (case-lambda
                                                  ((g$old$10955$1CmlGO
                                                     g$subst$10956$1CmlGO)
                                                   ((case-lambda
                                                      ((g$subst$10957$1CmlGO
                                                         g$old$10958$1CmlGO)
                                                       (values
                                                         g$old$10958$1CmlGO
                                                         (cons
                                                           g$a$10952$1CmlGO
                                                           g$subst$10957$1CmlGO))))
                                                    g$subst$10956$1CmlGO
                                                    g$old$10955$1CmlGO))))))
                                           (car g$subst$10951$1CmlGO))))))))
                         (if (null? g$sym*$10935$1CmlGO)
                           (values '() g$subst$10936$1CmlGO)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$10937$1CmlGO
                                  (car g$sym*$10935$1CmlGO)
                                  g$subst$10936$1CmlGO)))
                             (case-lambda
                               ((g$old$10940$1CmlGO g$subst$10941$1CmlGO)
                                ((case-lambda
                                   ((g$subst$10942$1CmlGO g$old$10943$1CmlGO)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$10712$1CmlGO
                                           (cdr g$sym*$10935$1CmlGO)
                                           g$subst$10942$1CmlGO)))
                                      (case-lambda
                                        ((g$old*$10946$1CmlGO
                                           g$subst$10947$1CmlGO)
                                         ((case-lambda
                                            ((g$subst$10948$1CmlGO
                                               g$old*$10949$1CmlGO)
                                             (values
                                               (cons
                                                 g$old$10943$1CmlGO
                                                 g$old*$10949$1CmlGO)
                                               g$subst$10948$1CmlGO)))
                                          g$subst$10947$1CmlGO
                                          g$old*$10946$1CmlGO))))))
                                 g$subst$10941$1CmlGO
                                 g$old$10940$1CmlGO)))))))))
                  (g$find*$10713$1CmlGO
                    (case-lambda
                      ((g$sym*$10931$1CmlGO g$subst$10932$1CmlGO)
                       (map (case-lambda
                              ((g$x$10933$1CmlGO)
                               ((case-lambda
                                  ((g$t$10934$1CmlGO)
                                   (if g$t$10934$1CmlGO
                                     (cdr g$t$10934$1CmlGO)
                                     (g$syntax-violation$8314$1CmlGO
                                       'import
                                       '"cannot find identifier"
                                       g$x$10933$1CmlGO))))
                                (g$assq$5658$1CmlGO
                                  g$x$10933$1CmlGO
                                  g$subst$10932$1CmlGO))))
                            g$sym*$10931$1CmlGO))))
                  (g$rem*$10714$1CmlGO
                    (case-lambda
                      ((g$sym*$10927$1CmlGO g$subst$10928$1CmlGO)
                       ((letrec ((g$f$10929$1CmlGO
                                   (case-lambda
                                     ((g$subst$10930$1CmlGO)
                                      (if (null? g$subst$10930$1CmlGO)
                                        '()
                                        (if (g$memq$5662$1CmlGO
                                              (g$caar$5831$1CmlGO
                                                g$subst$10930$1CmlGO)
                                              g$sym*$10927$1CmlGO)
                                          (g$f$10929$1CmlGO
                                            (cdr g$subst$10930$1CmlGO))
                                          (cons
                                            (car g$subst$10930$1CmlGO)
                                            (g$f$10929$1CmlGO
                                              (cdr g$subst$10930$1CmlGO)))))))))
                          g$f$10929$1CmlGO)
                        g$subst$10928$1CmlGO))))
                  (g$remove-dups$10715$1CmlGO
                    (case-lambda
                      ((g$ls$10926$1CmlGO)
                       (if (null? g$ls$10926$1CmlGO)
                         '()
                         (if (g$memq$5662$1CmlGO
                               (car g$ls$10926$1CmlGO)
                               (cdr g$ls$10926$1CmlGO))
                           (g$remove-dups$10715$1CmlGO (cdr g$ls$10926$1CmlGO))
                           (cons
                             (car g$ls$10926$1CmlGO)
                             (g$remove-dups$10715$1CmlGO
                               (cdr g$ls$10926$1CmlGO))))))))
                  (g$parse-library-name$10716$1CmlGO
                    (case-lambda
                      ((g$spec$10810$1CmlGO)
                       (letrec* ((g$subversion?$10811$1CmlGO
                                   (case-lambda
                                     ((g$x$10924$1CmlGO)
                                      ((case-lambda
                                         ((g$x$10925$1CmlGO)
                                          (if (integer? g$x$10925$1CmlGO)
                                            (if (exact? g$x$10925$1CmlGO)
                                              (begin
                                                '#f
                                                (>= g$x$10925$1CmlGO '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$8317$1CmlGO
                                         g$x$10924$1CmlGO)))))
                                 (g$subversion-pred$10812$1CmlGO
                                   (case-lambda
                                     ((g$x*$10876$1CmlGO)
                                      ((case-lambda
                                         ((g$t$10877$1CmlGO)
                                          ((case-lambda
                                             ((g$ls/false$10878$1CmlGO)
                                              (if (if g$ls/false$10878$1CmlGO
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$10879$1CmlGO)
                                                           (g$subversion?$10811$1CmlGO
                                                             g$n$10879$1CmlGO)))
                                                        g$ls/false$10878$1CmlGO))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$10880$1CmlGO)
                                                     (case-lambda
                                                       ((g$x$10881$1CmlGO)
                                                        (= g$x$10881$1CmlGO
                                                           (g$syntax->datum$8317$1CmlGO
                                                             g$n$10880$1CmlGO))))))
                                                  g$ls/false$10878$1CmlGO)
                                                ((case-lambda
                                                   ((g$t$10882$1CmlGO)
                                                    ((case-lambda
                                                       ((g$ls/false$10883$1CmlGO)
                                                        (if (if g$ls/false$10883$1CmlGO
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$10884$1CmlGO
                                                                       g$sub*$10885$1CmlGO)
                                                                     (eq? (g$syntax->datum$8317$1CmlGO
                                                                            g$p?$10884$1CmlGO)
                                                                          'and)))
                                                                  g$ls/false$10883$1CmlGO))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$10886$1CmlGO
                                                                 g$sub*$10887$1CmlGO)
                                                               ((case-lambda
                                                                  ((g$p*$10888$1CmlGO)
                                                                   (case-lambda
                                                                     ((g$x$10889$1CmlGO)
                                                                      (g$for-all$5668$1CmlGO
                                                                        (case-lambda
                                                                          ((g$p$10890$1CmlGO)
                                                                           (g$p$10890$1CmlGO
                                                                             g$x$10889$1CmlGO)))
                                                                        g$p*$10888$1CmlGO)))))
                                                                (map g$subversion-pred$10812$1CmlGO
                                                                     g$sub*$10887$1CmlGO))))
                                                            g$ls/false$10883$1CmlGO)
                                                          ((case-lambda
                                                             ((g$t$10891$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$ls/false$10892$1CmlGO)
                                                                  (if (if g$ls/false$10892$1CmlGO
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$10893$1CmlGO
                                                                                 g$sub*$10894$1CmlGO)
                                                                               (eq? (g$syntax->datum$8317$1CmlGO
                                                                                      g$p?$10893$1CmlGO)
                                                                                    'or)))
                                                                            g$ls/false$10892$1CmlGO))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$10895$1CmlGO
                                                                           g$sub*$10896$1CmlGO)
                                                                         ((case-lambda
                                                                            ((g$p*$10897$1CmlGO)
                                                                             (case-lambda
                                                                               ((g$x$10898$1CmlGO)
                                                                                (g$exists$5669$1CmlGO
                                                                                  (case-lambda
                                                                                    ((g$p$10899$1CmlGO)
                                                                                     (g$p$10899$1CmlGO
                                                                                       g$x$10898$1CmlGO)))
                                                                                  g$p*$10897$1CmlGO)))))
                                                                          (map g$subversion-pred$10812$1CmlGO
                                                                               g$sub*$10896$1CmlGO))))
                                                                      g$ls/false$10892$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$t$10900$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10901$1CmlGO)
                                                                            (if (if g$ls/false$10901$1CmlGO
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$10902$1CmlGO
                                                                                           g$sub$10903$1CmlGO)
                                                                                         (eq? (g$syntax->datum$8317$1CmlGO
                                                                                                g$p?$10902$1CmlGO)
                                                                                              'not)))
                                                                                      g$ls/false$10901$1CmlGO))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$10904$1CmlGO
                                                                                     g$sub$10905$1CmlGO)
                                                                                   ((case-lambda
                                                                                      ((g$p$10906$1CmlGO)
                                                                                       (case-lambda
                                                                                         ((g$x$10907$1CmlGO)
                                                                                          (not (g$p$10906$1CmlGO
                                                                                                 g$x$10907$1CmlGO))))))
                                                                                    (g$subversion-pred$10812$1CmlGO
                                                                                      g$sub$10905$1CmlGO))))
                                                                                g$ls/false$10901$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$t$10908$1CmlGO)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10909$1CmlGO)
                                                                                      (if (if g$ls/false$10909$1CmlGO
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$10910$1CmlGO
                                                                                                     g$n$10911$1CmlGO)
                                                                                                   (if (eq? (g$syntax->datum$8317$1CmlGO
                                                                                                              g$p?$10910$1CmlGO)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$10811$1CmlGO
                                                                                                         g$n$10911$1CmlGO))
                                                                                                     '#f)))
                                                                                                g$ls/false$10909$1CmlGO))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$10912$1CmlGO
                                                                                               g$n$10913$1CmlGO)
                                                                                             (case-lambda
                                                                                               ((g$x$10914$1CmlGO)
                                                                                                (<= g$x$10914$1CmlGO
                                                                                                    (g$syntax->datum$8317$1CmlGO
                                                                                                      g$n$10913$1CmlGO))))))
                                                                                          g$ls/false$10909$1CmlGO)
                                                                                        ((case-lambda
                                                                                           ((g$t$10915$1CmlGO)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10916$1CmlGO)
                                                                                                (if (if g$ls/false$10916$1CmlGO
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$10917$1CmlGO
                                                                                                               g$n$10918$1CmlGO)
                                                                                                             (if (eq? (g$syntax->datum$8317$1CmlGO
                                                                                                                        g$p?$10917$1CmlGO)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$10811$1CmlGO
                                                                                                                   g$n$10918$1CmlGO))
                                                                                                               '#f)))
                                                                                                          g$ls/false$10916$1CmlGO))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$10919$1CmlGO
                                                                                                         g$n$10920$1CmlGO)
                                                                                                       (case-lambda
                                                                                                         ((g$x$10921$1CmlGO)
                                                                                                          (>= g$x$10921$1CmlGO
                                                                                                              (g$syntax->datum$8317$1CmlGO
                                                                                                                g$n$10920$1CmlGO))))))
                                                                                                    g$ls/false$10916$1CmlGO)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$10922$1CmlGO)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$10923$1CmlGO)
                                                                                                          (if g$ls/false$10923$1CmlGO
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$8314$1CmlGO
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$10810$1CmlGO
                                                                                                                   g$x*$10876$1CmlGO)))
                                                                                                              g$ls/false$10923$1CmlGO)
                                                                                                            (g$syntax-violation$8314$1CmlGO
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$10922$1CmlGO))))
                                                                                                       (g$syntax-dispatch$8203$1CmlGO
                                                                                                         g$t$10922$1CmlGO
                                                                                                         '_))))
                                                                                                   g$t$10915$1CmlGO))))
                                                                                             (g$syntax-dispatch$8203$1CmlGO
                                                                                               g$t$10915$1CmlGO
                                                                                               '(any any)))))
                                                                                         g$t$10908$1CmlGO))))
                                                                                   (g$syntax-dispatch$8203$1CmlGO
                                                                                     g$t$10908$1CmlGO
                                                                                     '(any any)))))
                                                                               g$t$10900$1CmlGO))))
                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                           g$t$10900$1CmlGO
                                                                           '(any any)))))
                                                                     g$t$10891$1CmlGO))))
                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                 g$t$10891$1CmlGO
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10882$1CmlGO))))
                                                     (g$syntax-dispatch$8203$1CmlGO
                                                       g$t$10882$1CmlGO
                                                       '(any . each-any)))))
                                                 g$t$10877$1CmlGO))))
                                           (g$syntax-dispatch$8203$1CmlGO
                                             g$t$10877$1CmlGO
                                             'any))))
                                       g$x*$10876$1CmlGO))))
                                 (g$version-pred$10813$1CmlGO
                                   (case-lambda
                                     ((g$x*$10836$1CmlGO)
                                      ((case-lambda
                                         ((g$t$10837$1CmlGO)
                                          ((case-lambda
                                             ((g$ls/false$10838$1CmlGO)
                                              (if g$ls/false$10838$1CmlGO
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$10839$1CmlGO)
                                                        '#t))))
                                                  g$ls/false$10838$1CmlGO)
                                                ((case-lambda
                                                   ((g$t$10840$1CmlGO)
                                                    ((case-lambda
                                                       ((g$ls/false$10841$1CmlGO)
                                                        (if (if g$ls/false$10841$1CmlGO
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$10842$1CmlGO
                                                                       g$ver*$10843$1CmlGO)
                                                                     (eq? (g$syntax->datum$8317$1CmlGO
                                                                            g$c$10842$1CmlGO)
                                                                          'and)))
                                                                  g$ls/false$10841$1CmlGO))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$10844$1CmlGO
                                                                 g$ver*$10845$1CmlGO)
                                                               ((case-lambda
                                                                  ((g$p*$10846$1CmlGO)
                                                                   (case-lambda
                                                                     ((g$x$10847$1CmlGO)
                                                                      (g$for-all$5668$1CmlGO
                                                                        (case-lambda
                                                                          ((g$p$10848$1CmlGO)
                                                                           (g$p$10848$1CmlGO
                                                                             g$x$10847$1CmlGO)))
                                                                        g$p*$10846$1CmlGO)))))
                                                                (map g$version-pred$10813$1CmlGO
                                                                     g$ver*$10845$1CmlGO))))
                                                            g$ls/false$10841$1CmlGO)
                                                          ((case-lambda
                                                             ((g$t$10849$1CmlGO)
                                                              ((case-lambda
                                                                 ((g$ls/false$10850$1CmlGO)
                                                                  (if (if g$ls/false$10850$1CmlGO
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$10851$1CmlGO
                                                                                 g$ver*$10852$1CmlGO)
                                                                               (eq? (g$syntax->datum$8317$1CmlGO
                                                                                      g$c$10851$1CmlGO)
                                                                                    'or)))
                                                                            g$ls/false$10850$1CmlGO))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$10853$1CmlGO
                                                                           g$ver*$10854$1CmlGO)
                                                                         ((case-lambda
                                                                            ((g$p*$10855$1CmlGO)
                                                                             (case-lambda
                                                                               ((g$x$10856$1CmlGO)
                                                                                (g$exists$5669$1CmlGO
                                                                                  (case-lambda
                                                                                    ((g$p$10857$1CmlGO)
                                                                                     (g$p$10857$1CmlGO
                                                                                       g$x$10856$1CmlGO)))
                                                                                  g$p*$10855$1CmlGO)))))
                                                                          (map g$version-pred$10813$1CmlGO
                                                                               g$ver*$10854$1CmlGO))))
                                                                      g$ls/false$10850$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$t$10858$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10859$1CmlGO)
                                                                            (if (if g$ls/false$10859$1CmlGO
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$10860$1CmlGO
                                                                                           g$ver$10861$1CmlGO)
                                                                                         (eq? (g$syntax->datum$8317$1CmlGO
                                                                                                g$c$10860$1CmlGO)
                                                                                              'not)))
                                                                                      g$ls/false$10859$1CmlGO))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$10862$1CmlGO
                                                                                     g$ver$10863$1CmlGO)
                                                                                   ((case-lambda
                                                                                      ((g$p$10864$1CmlGO)
                                                                                       (case-lambda
                                                                                         ((g$x$10865$1CmlGO)
                                                                                          (not (g$p$10864$1CmlGO
                                                                                                 g$x$10865$1CmlGO))))))
                                                                                    (g$version-pred$10813$1CmlGO
                                                                                      g$ver$10863$1CmlGO))))
                                                                                g$ls/false$10859$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$t$10866$1CmlGO)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10867$1CmlGO)
                                                                                      (if g$ls/false$10867$1CmlGO
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$10868$1CmlGO)
                                                                                             ((case-lambda
                                                                                                ((g$p*$10869$1CmlGO)
                                                                                                 (case-lambda
                                                                                                   ((g$x$10870$1CmlGO)
                                                                                                    ((letrec ((g$f$10871$1CmlGO
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$10872$1CmlGO
                                                                                                                     g$x$10873$1CmlGO)
                                                                                                                   (if (null?
                                                                                                                         g$p*$10872$1CmlGO)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$10873$1CmlGO)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$10872$1CmlGO)
                                                                                                                            (car g$x$10873$1CmlGO))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$10871$1CmlGO
                                                                                                                             (cdr g$p*$10872$1CmlGO)
                                                                                                                             (cdr g$x$10873$1CmlGO)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$10871$1CmlGO)
                                                                                                     g$p*$10869$1CmlGO
                                                                                                     g$x$10870$1CmlGO)))))
                                                                                              (map g$subversion-pred$10812$1CmlGO
                                                                                                   g$sub*$10868$1CmlGO))))
                                                                                          g$ls/false$10867$1CmlGO)
                                                                                        ((case-lambda
                                                                                           ((g$t$10874$1CmlGO)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10875$1CmlGO)
                                                                                                (if g$ls/false$10875$1CmlGO
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$8314$1CmlGO
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$10810$1CmlGO
                                                                                                         g$x*$10836$1CmlGO)))
                                                                                                    g$ls/false$10875$1CmlGO)
                                                                                                  (g$syntax-violation$8314$1CmlGO
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$10874$1CmlGO))))
                                                                                             (g$syntax-dispatch$8203$1CmlGO
                                                                                               g$t$10874$1CmlGO
                                                                                               '_))))
                                                                                         g$t$10866$1CmlGO))))
                                                                                   (g$syntax-dispatch$8203$1CmlGO
                                                                                     g$t$10866$1CmlGO
                                                                                     'each-any))))
                                                                               g$t$10858$1CmlGO))))
                                                                         (g$syntax-dispatch$8203$1CmlGO
                                                                           g$t$10858$1CmlGO
                                                                           '(any any)))))
                                                                     g$t$10849$1CmlGO))))
                                                               (g$syntax-dispatch$8203$1CmlGO
                                                                 g$t$10849$1CmlGO
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10840$1CmlGO))))
                                                     (g$syntax-dispatch$8203$1CmlGO
                                                       g$t$10840$1CmlGO
                                                       '(any . each-any)))))
                                                 g$t$10837$1CmlGO))))
                                           (g$syntax-dispatch$8203$1CmlGO
                                             g$t$10837$1CmlGO
                                             '()))))
                                       g$x*$10836$1CmlGO)))))
                         ((letrec ((g$f$10814$1CmlGO
                                     (case-lambda
                                       ((g$x$10815$1CmlGO)
                                        ((case-lambda
                                           ((g$t$10816$1CmlGO)
                                            ((case-lambda
                                               ((g$ls/false$10817$1CmlGO)
                                                (if g$ls/false$10817$1CmlGO
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$10818$1CmlGO)
                                                       (values
                                                         '()
                                                         (g$version-pred$10813$1CmlGO
                                                           g$version-spec*$10818$1CmlGO))))
                                                    g$ls/false$10817$1CmlGO)
                                                  ((case-lambda
                                                     ((g$t$10819$1CmlGO)
                                                      ((case-lambda
                                                         ((g$ls/false$10820$1CmlGO)
                                                          (if (if g$ls/false$10820$1CmlGO
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$10821$1CmlGO
                                                                         g$x*$10822$1CmlGO)
                                                                       (g$idsyn?$10709$1CmlGO
                                                                         g$x$10821$1CmlGO)))
                                                                    g$ls/false$10820$1CmlGO))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$10823$1CmlGO
                                                                   g$x*$10824$1CmlGO)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$10814$1CmlGO
                                                                        g$x*$10824$1CmlGO)))
                                                                   (case-lambda
                                                                     ((g$name$10827$1CmlGO
                                                                        g$pred$10828$1CmlGO)
                                                                      ((case-lambda
                                                                         ((g$pred$10829$1CmlGO
                                                                            g$name$10830$1CmlGO)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$8317$1CmlGO
                                                                                g$x$10823$1CmlGO)
                                                                              g$name$10830$1CmlGO)
                                                                            g$pred$10829$1CmlGO)))
                                                                       g$pred$10828$1CmlGO
                                                                       g$name$10827$1CmlGO))))))
                                                              g$ls/false$10820$1CmlGO)
                                                            ((case-lambda
                                                               ((g$t$10831$1CmlGO)
                                                                ((case-lambda
                                                                   ((g$ls/false$10832$1CmlGO)
                                                                    (if g$ls/false$10832$1CmlGO
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$10833$1CmlGO)
                                                                                '#t)))))
                                                                        g$ls/false$10832$1CmlGO)
                                                                      ((case-lambda
                                                                         ((g$t$10834$1CmlGO)
                                                                          ((case-lambda
                                                                             ((g$ls/false$10835$1CmlGO)
                                                                              (if g$ls/false$10835$1CmlGO
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$8314$1CmlGO
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$10810$1CmlGO)))
                                                                                  g$ls/false$10835$1CmlGO)
                                                                                (g$syntax-violation$8314$1CmlGO
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$10834$1CmlGO))))
                                                                           (g$syntax-dispatch$8203$1CmlGO
                                                                             g$t$10834$1CmlGO
                                                                             '_))))
                                                                       g$t$10831$1CmlGO))))
                                                                 (g$syntax-dispatch$8203$1CmlGO
                                                                   g$t$10831$1CmlGO
                                                                   '()))))
                                                             g$t$10819$1CmlGO))))
                                                       (g$syntax-dispatch$8203$1CmlGO
                                                         g$t$10819$1CmlGO
                                                         '(any . any)))))
                                                   g$t$10816$1CmlGO))))
                                             (g$syntax-dispatch$8203$1CmlGO
                                               g$t$10816$1CmlGO
                                               '(each-any)))))
                                         g$x$10815$1CmlGO)))))
                            g$f$10814$1CmlGO)
                          g$spec$10810$1CmlGO)))))
                  (g$import-library$10717$1CmlGO
                    (case-lambda
                      ((g$spec*$10802$1CmlGO)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$10716$1CmlGO
                              g$spec*$10802$1CmlGO)))
                         (case-lambda
                           ((g$name$10805$1CmlGO g$pred$10806$1CmlGO)
                            ((case-lambda
                               ((g$pred$10807$1CmlGO g$name$10808$1CmlGO)
                                (begin
                                  (if (null? g$name$10808$1CmlGO)
                                    (g$syntax-violation$8314$1CmlGO
                                      'import
                                      '"empty library name"
                                      g$spec*$10802$1CmlGO)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$10809$1CmlGO)
                                      (begin
                                        (if (not g$lib$10809$1CmlGO)
                                          (g$syntax-violation$8314$1CmlGO
                                            'import
                                            '"cannot find library with required name"
                                            g$name$10808$1CmlGO)
                                          (void))
                                        (if (not (g$pred$10807$1CmlGO
                                                   (g$library-version$7693$1CmlGO
                                                     g$lib$10809$1CmlGO)))
                                          (g$syntax-violation$8314$1CmlGO
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$10802$1CmlGO
                                            g$lib$10809$1CmlGO)
                                          (void))
                                        ((g$imp-collector$8257$1CmlGO)
                                         g$lib$10809$1CmlGO)
                                        (g$library-subst$7697$1CmlGO
                                          g$lib$10809$1CmlGO))))
                                   (g$find-library-by-name$7733$1CmlGO
                                     g$name$10808$1CmlGO)))))
                             g$pred$10806$1CmlGO
                             g$name$10805$1CmlGO)))))))
                  (g$get-import$10718$1CmlGO
                    (case-lambda
                      ((g$spec$10731$1CmlGO)
                       ((case-lambda
                          ((g$t$10732$1CmlGO)
                           ((case-lambda
                              ((g$ls/false$10733$1CmlGO)
                               (if (if g$ls/false$10733$1CmlGO
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$10734$1CmlGO g$x*$10735$1CmlGO)
                                            (not (g$memq$5662$1CmlGO
                                                   (g$syntax->datum$8317$1CmlGO
                                                     g$x$10734$1CmlGO)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$10733$1CmlGO))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$10736$1CmlGO g$x*$10737$1CmlGO)
                                      (g$import-library$10717$1CmlGO
                                        (cons
                                          g$x$10736$1CmlGO
                                          g$x*$10737$1CmlGO))))
                                   g$ls/false$10733$1CmlGO)
                                 ((case-lambda
                                    ((g$t$10738$1CmlGO)
                                     ((case-lambda
                                        ((g$ls/false$10739$1CmlGO)
                                         (if (if g$ls/false$10739$1CmlGO
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$10740$1CmlGO
                                                        g$isp$10741$1CmlGO
                                                        g$old*$10742$1CmlGO
                                                        g$new*$10743$1CmlGO)
                                                      (if (eq? (g$syntax->datum$8317$1CmlGO
                                                                 g$rename$10740$1CmlGO)
                                                               'rename)
                                                        (if (g$for-all$5668$1CmlGO
                                                              g$idsyn?$10709$1CmlGO
                                                              g$old*$10742$1CmlGO)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5668$1CmlGO
                                                              g$idsyn?$10709$1CmlGO
                                                              g$new*$10743$1CmlGO))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$10739$1CmlGO))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$10744$1CmlGO
                                                  g$isp$10745$1CmlGO
                                                  g$old*$10746$1CmlGO
                                                  g$new*$10747$1CmlGO)
                                                ((case-lambda
                                                   ((g$subst$10748$1CmlGO
                                                      g$old*$10749$1CmlGO
                                                      g$new*$10750$1CmlGO)
                                                    ((case-lambda
                                                       ((g$old-label*$10751$1CmlGO)
                                                        ((case-lambda
                                                           ((g$subst$10752$1CmlGO)
                                                            (g$merge-substs$10711$1CmlGO
                                                              (map cons
                                                                   g$new*$10750$1CmlGO
                                                                   g$old-label*$10751$1CmlGO)
                                                              g$subst$10752$1CmlGO)))
                                                         (g$rem*$10714$1CmlGO
                                                           g$old*$10749$1CmlGO
                                                           g$subst$10748$1CmlGO))))
                                                     (g$find*$10713$1CmlGO
                                                       g$old*$10749$1CmlGO
                                                       g$subst$10748$1CmlGO))))
                                                 (g$get-import$10718$1CmlGO
                                                   g$isp$10745$1CmlGO)
                                                 (map g$syntax->datum$8317$1CmlGO
                                                      g$old*$10746$1CmlGO)
                                                 (map g$syntax->datum$8317$1CmlGO
                                                      g$new*$10747$1CmlGO))))
                                             g$ls/false$10739$1CmlGO)
                                           ((case-lambda
                                              ((g$t$10753$1CmlGO)
                                               ((case-lambda
                                                  ((g$ls/false$10754$1CmlGO)
                                                   (if (if g$ls/false$10754$1CmlGO
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$10755$1CmlGO
                                                                  g$isp$10756$1CmlGO
                                                                  g$sym*$10757$1CmlGO)
                                                                (if (eq? (g$syntax->datum$8317$1CmlGO
                                                                           g$except$10755$1CmlGO)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5668$1CmlGO
                                                                      g$idsyn?$10709$1CmlGO
                                                                      g$sym*$10757$1CmlGO))
                                                                  '#f)))
                                                             g$ls/false$10754$1CmlGO))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$10758$1CmlGO
                                                            g$isp$10759$1CmlGO
                                                            g$sym*$10760$1CmlGO)
                                                          ((case-lambda
                                                             ((g$subst$10761$1CmlGO)
                                                              (g$rem*$10714$1CmlGO
                                                                (map g$syntax->datum$8317$1CmlGO
                                                                     g$sym*$10760$1CmlGO)
                                                                g$subst$10761$1CmlGO)))
                                                           (g$get-import$10718$1CmlGO
                                                             g$isp$10759$1CmlGO))))
                                                       g$ls/false$10754$1CmlGO)
                                                     ((case-lambda
                                                        ((g$t$10762$1CmlGO)
                                                         ((case-lambda
                                                            ((g$ls/false$10763$1CmlGO)
                                                             (if (if g$ls/false$10763$1CmlGO
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$10764$1CmlGO
                                                                            g$isp$10765$1CmlGO
                                                                            g$sym*$10766$1CmlGO)
                                                                          (if (eq? (g$syntax->datum$8317$1CmlGO
                                                                                     g$only$10764$1CmlGO)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5668$1CmlGO
                                                                                g$idsyn?$10709$1CmlGO
                                                                                g$sym*$10766$1CmlGO))
                                                                            '#f)))
                                                                       g$ls/false$10763$1CmlGO))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$10767$1CmlGO
                                                                      g$isp$10768$1CmlGO
                                                                      g$sym*$10769$1CmlGO)
                                                                    ((case-lambda
                                                                       ((g$subst$10770$1CmlGO
                                                                          g$sym*$10771$1CmlGO)
                                                                        ((case-lambda
                                                                           ((g$sym*$10772$1CmlGO)
                                                                            ((case-lambda
                                                                               ((g$lab*$10773$1CmlGO)
                                                                                (map cons
                                                                                     g$sym*$10772$1CmlGO
                                                                                     g$lab*$10773$1CmlGO)))
                                                                             (g$find*$10713$1CmlGO
                                                                               g$sym*$10772$1CmlGO
                                                                               g$subst$10770$1CmlGO))))
                                                                         (g$remove-dups$10715$1CmlGO
                                                                           g$sym*$10771$1CmlGO))))
                                                                     (g$get-import$10718$1CmlGO
                                                                       g$isp$10768$1CmlGO)
                                                                     (map g$syntax->datum$8317$1CmlGO
                                                                          g$sym*$10769$1CmlGO))))
                                                                 g$ls/false$10763$1CmlGO)
                                                               ((case-lambda
                                                                  ((g$t$10774$1CmlGO)
                                                                   ((case-lambda
                                                                      ((g$ls/false$10775$1CmlGO)
                                                                       (if (if g$ls/false$10775$1CmlGO
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$10776$1CmlGO
                                                                                      g$isp$10777$1CmlGO
                                                                                      g$p$10778$1CmlGO)
                                                                                    (if (eq? (g$syntax->datum$8317$1CmlGO
                                                                                               g$prefix$10776$1CmlGO)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$10709$1CmlGO
                                                                                          g$p$10778$1CmlGO))
                                                                                      '#f)))
                                                                                 g$ls/false$10775$1CmlGO))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$10779$1CmlGO
                                                                                g$isp$10780$1CmlGO
                                                                                g$p$10781$1CmlGO)
                                                                              ((case-lambda
                                                                                 ((g$subst$10782$1CmlGO
                                                                                    g$prefix$10783$1CmlGO)
                                                                                  (map (case-lambda
                                                                                         ((g$x$10784$1CmlGO)
                                                                                          (cons
                                                                                            (string->symbol
                                                                                              (string-append
                                                                                                g$prefix$10783$1CmlGO
                                                                                                (symbol->string
                                                                                                  (car g$x$10784$1CmlGO))))
                                                                                            (cdr g$x$10784$1CmlGO))))
                                                                                       g$subst$10782$1CmlGO)))
                                                                               (g$get-import$10718$1CmlGO
                                                                                 g$isp$10780$1CmlGO)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$8317$1CmlGO
                                                                                   g$p$10781$1CmlGO)))))
                                                                           g$ls/false$10775$1CmlGO)
                                                                         ((case-lambda
                                                                            ((g$t$10785$1CmlGO)
                                                                             ((case-lambda
                                                                                ((g$ls/false$10786$1CmlGO)
                                                                                 (if (if g$ls/false$10786$1CmlGO
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$10787$1CmlGO
                                                                                                g$spec*$10788$1CmlGO)
                                                                                              (eq? (g$syntax->datum$8317$1CmlGO
                                                                                                     g$library$10787$1CmlGO)
                                                                                                   'library)))
                                                                                           g$ls/false$10786$1CmlGO))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$10789$1CmlGO
                                                                                          g$spec*$10790$1CmlGO)
                                                                                        (g$import-library$10717$1CmlGO
                                                                                          g$spec*$10790$1CmlGO)))
                                                                                     g$ls/false$10786$1CmlGO)
                                                                                   ((case-lambda
                                                                                      ((g$t$10791$1CmlGO)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$10792$1CmlGO)
                                                                                           (if (if g$ls/false$10792$1CmlGO
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$10793$1CmlGO
                                                                                                          g$isp$10794$1CmlGO
                                                                                                          g$rest$10795$1CmlGO)
                                                                                                        (eq? (g$syntax->datum$8317$1CmlGO
                                                                                                               g$for$10793$1CmlGO)
                                                                                                             'for)))
                                                                                                     g$ls/false$10792$1CmlGO))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$10796$1CmlGO
                                                                                                    g$isp$10797$1CmlGO
                                                                                                    g$rest$10798$1CmlGO)
                                                                                                  (g$get-import$10718$1CmlGO
                                                                                                    g$isp$10797$1CmlGO)))
                                                                                               g$ls/false$10792$1CmlGO)
                                                                                             ((case-lambda
                                                                                                ((g$t$10799$1CmlGO)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$10800$1CmlGO)
                                                                                                     (if g$ls/false$10800$1CmlGO
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$10801$1CmlGO)
                                                                                                            (g$syntax-violation$8314$1CmlGO
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$10801$1CmlGO)))
                                                                                                         g$ls/false$10800$1CmlGO)
                                                                                                       (g$syntax-violation$8314$1CmlGO
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$10799$1CmlGO))))
                                                                                                  (g$syntax-dispatch$8203$1CmlGO
                                                                                                    g$t$10799$1CmlGO
                                                                                                    'any))))
                                                                                              g$t$10791$1CmlGO))))
                                                                                        (g$syntax-dispatch$8203$1CmlGO
                                                                                          g$t$10791$1CmlGO
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$10785$1CmlGO))))
                                                                              (g$syntax-dispatch$8203$1CmlGO
                                                                                g$t$10785$1CmlGO
                                                                                '(any each-any)))))
                                                                          g$t$10774$1CmlGO))))
                                                                    (g$syntax-dispatch$8203$1CmlGO
                                                                      g$t$10774$1CmlGO
                                                                      '(any any
                                                                            any)))))
                                                                g$t$10762$1CmlGO))))
                                                          (g$syntax-dispatch$8203$1CmlGO
                                                            g$t$10762$1CmlGO
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$10753$1CmlGO))))
                                                (g$syntax-dispatch$8203$1CmlGO
                                                  g$t$10753$1CmlGO
                                                  '(any any . each-any)))))
                                            g$t$10738$1CmlGO))))
                                      (g$syntax-dispatch$8203$1CmlGO
                                        g$t$10738$1CmlGO
                                        '(any any . #(each (any any)))))))
                                  g$t$10732$1CmlGO))))
                            (g$syntax-dispatch$8203$1CmlGO
                              g$t$10732$1CmlGO
                              '(any . each-any)))))
                        g$spec$10731$1CmlGO))))
                  (g$add-imports!$10719$1CmlGO
                    (case-lambda
                      ((g$imp$10723$1CmlGO g$h$10724$1CmlGO)
                       ((case-lambda
                          ((g$subst$10725$1CmlGO)
                           (for-each
                             (case-lambda
                               ((g$x$10726$1CmlGO)
                                ((case-lambda
                                   ((g$name$10727$1CmlGO g$label$10728$1CmlGO)
                                    ((case-lambda
                                       ((g$t$10729$1CmlGO)
                                        (if g$t$10729$1CmlGO
                                          ((case-lambda
                                             ((g$l$10730$1CmlGO)
                                              (if (not (eq? g$l$10730$1CmlGO
                                                            g$label$10728$1CmlGO))
                                                (g$dup-error$10710$1CmlGO
                                                  g$name$10727$1CmlGO)
                                                (void))))
                                           g$t$10729$1CmlGO)
                                          (g$hashtable-set!$6110$1CmlGO
                                            g$h$10724$1CmlGO
                                            g$name$10727$1CmlGO
                                            g$label$10728$1CmlGO))))
                                     (g$hashtable-ref$6109$1CmlGO
                                       g$h$10724$1CmlGO
                                       g$name$10727$1CmlGO
                                       '#f))))
                                 (car g$x$10726$1CmlGO)
                                 (cdr g$x$10726$1CmlGO))))
                             g$subst$10725$1CmlGO)))
                        (g$get-import$10718$1CmlGO g$imp$10723$1CmlGO))))))
          ((letrec ((g$f$10720$1CmlGO
                      (case-lambda
                        ((g$imp*$10721$1CmlGO g$h$10722$1CmlGO)
                         (if (null? g$imp*$10721$1CmlGO)
                           (hashtable-entries g$h$10722$1CmlGO)
                           (begin
                             (g$add-imports!$10719$1CmlGO
                               (car g$imp*$10721$1CmlGO)
                               g$h$10722$1CmlGO)
                             (g$f$10720$1CmlGO
                               (cdr g$imp*$10721$1CmlGO)
                               g$h$10722$1CmlGO)))))))
             g$f$10720$1CmlGO)
           g$imp*$10708$1CmlGO
           (g$make-eq-hashtable$6106$1CmlGO))))))
   (g$make-top-rib$8253$1CmlGO
     g$make-top-rib$11713$1CmlGO
     (case-lambda
       ((g$names$10970$1CmlGO g$labels$10971$1CmlGO)
        ((case-lambda
           ((g$rib$10972$1CmlGO)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10973$1CmlGO g$label$10974$1CmlGO)
                   (begin
                     (if (not (symbol? g$name$10973$1CmlGO))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10973$1CmlGO)
                       (void))
                     (g$extend-rib!$7889$1CmlGO
                       g$rib$10972$1CmlGO
                       (g$make-stx$7898$1CmlGO
                         g$name$10973$1CmlGO
                         g$top-mark*$7867$1CmlGO
                         '()
                         '())
                       g$label$10974$1CmlGO))))
                g$names$10970$1CmlGO
                g$labels$10971$1CmlGO)
              g$rib$10972$1CmlGO)))
         (g$make-empty-rib$7888$1CmlGO)))))
   (g$make-collector$8254$1CmlGO
     g$make-collector$11714$1CmlGO
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10975$1CmlGO)
            (case-lambda
              (() g$ls$10975$1CmlGO)
              ((g$x$10976$1CmlGO)
               (set! g$ls$10975$1CmlGO
                 (g$set-cons$7864$1CmlGO
                   g$x$10976$1CmlGO
                   g$ls$10975$1CmlGO))))))
         '()))))
   (g$inv-collector$8255$1CmlGO
     g$inv-collector$11715$1CmlGO
     (g$make-parameter$7193$1CmlGO
       (case-lambda
         (g$args$10977$1CmlGO
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10978$1CmlGO)
          (begin
            (if (not (procedure? g$x$10978$1CmlGO))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10978$1CmlGO)
              (void))
            g$x$10978$1CmlGO)))))
   (g$vis-collector$8256$1CmlGO
     g$vis-collector$11716$1CmlGO
     (g$make-parameter$7193$1CmlGO
       (case-lambda
         (g$args$10979$1CmlGO
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10980$1CmlGO)
          (begin
            (if (not (procedure? g$x$10980$1CmlGO))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10980$1CmlGO)
              (void))
            g$x$10980$1CmlGO)))))
   (g$imp-collector$8257$1CmlGO
     g$imp-collector$11717$1CmlGO
     (g$make-parameter$7193$1CmlGO
       (case-lambda
         (g$args$10981$1CmlGO
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10982$1CmlGO)
          (begin
            (if (not (procedure? g$x$10982$1CmlGO))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10982$1CmlGO)
              (void))
            g$x$10982$1CmlGO)))))
   (g$chi-library-internal$8258$1CmlGO
     g$chi-library-internal$11718$1CmlGO
     (case-lambda
       ((g$e*$10983$1CmlGO g$rib$10984$1CmlGO g$top?$10985$1CmlGO)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8247$1CmlGO
               g$e*$10983$1CmlGO
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10984$1CmlGO
               g$top?$10985$1CmlGO)))
          (case-lambda
            ((g$e*$10994$1CmlGO
               g$r$10995$1CmlGO
               g$mr$10996$1CmlGO
               g$lex*$10997$1CmlGO
               g$rhs*$10998$1CmlGO
               g$mod**$10999$1CmlGO
               g$_kwd*$11000$1CmlGO
               g$exp*$11001$1CmlGO)
             ((case-lambda
                ((g$exp*$11002$1CmlGO
                   g$_kwd*$11003$1CmlGO
                   g$mod**$11004$1CmlGO
                   g$rhs*$11005$1CmlGO
                   g$lex*$11006$1CmlGO
                   g$mr$11007$1CmlGO
                   g$r$11008$1CmlGO
                   g$e*$11009$1CmlGO)
                 (values
                   (append
                     (apply append (reverse g$mod**$11004$1CmlGO))
                     g$e*$11009$1CmlGO)
                   g$r$11008$1CmlGO
                   g$mr$11007$1CmlGO
                   (reverse g$lex*$11006$1CmlGO)
                   (reverse g$rhs*$11005$1CmlGO)
                   g$exp*$11002$1CmlGO)))
              g$exp*$11001$1CmlGO
              g$_kwd*$11000$1CmlGO
              g$mod**$10999$1CmlGO
              g$rhs*$10998$1CmlGO
              g$lex*$10997$1CmlGO
              g$mr$10996$1CmlGO
              g$r$10995$1CmlGO
              g$e*$10994$1CmlGO)))))))
   (g$chi-interaction-expr$8259$1CmlGO
     g$chi-interaction-expr$11719$1CmlGO
     (case-lambda
       ((g$e$11010$1CmlGO g$rib$11011$1CmlGO g$r$11012$1CmlGO)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8247$1CmlGO
               (list g$e$11010$1CmlGO)
               g$r$11012$1CmlGO
               g$r$11012$1CmlGO
               '()
               '()
               '()
               '()
               '()
               g$rib$11011$1CmlGO
               '#t)))
          (case-lambda
            ((g$e*$11021$1CmlGO
               g$r$11022$1CmlGO
               g$mr$11023$1CmlGO
               g$lex*$11024$1CmlGO
               g$rhs*$11025$1CmlGO
               g$mod**$11026$1CmlGO
               g$_kwd*$11027$1CmlGO
               g$_exp*$11028$1CmlGO)
             ((case-lambda
                ((g$_exp*$11029$1CmlGO
                   g$_kwd*$11030$1CmlGO
                   g$mod**$11031$1CmlGO
                   g$rhs*$11032$1CmlGO
                   g$lex*$11033$1CmlGO
                   g$mr$11034$1CmlGO
                   g$r$11035$1CmlGO
                   g$e*$11036$1CmlGO)
                 ((case-lambda
                    ((g$e*$11037$1CmlGO)
                     ((case-lambda
                        ((g$e$11038$1CmlGO)
                         (values g$e$11038$1CmlGO g$r$11035$1CmlGO)))
                      (if (null? g$e*$11037$1CmlGO)
                        (g$build-void$7860$1CmlGO)
                        (if (null? (cdr g$e*$11037$1CmlGO))
                          (car g$e*$11037$1CmlGO)
                          (g$build-sequence$7859$1CmlGO
                            '#f
                            g$e*$11037$1CmlGO))))))
                  (g$expand-interaction-rhs*/init*$8228$1CmlGO
                    (reverse g$lex*$11033$1CmlGO)
                    (reverse g$rhs*$11032$1CmlGO)
                    (append
                      (apply append (reverse g$mod**$11031$1CmlGO))
                      g$e*$11036$1CmlGO)
                    g$r$11035$1CmlGO
                    g$mr$11034$1CmlGO))))
              g$_exp*$11028$1CmlGO
              g$_kwd*$11027$1CmlGO
              g$mod**$11026$1CmlGO
              g$rhs*$11025$1CmlGO
              g$lex*$11024$1CmlGO
              g$mr$11023$1CmlGO
              g$r$11022$1CmlGO
              g$e*$11021$1CmlGO)))))))
   (g$library-body-expander$8260$1CmlGO
     g$library-body-expander$11720$1CmlGO
     (case-lambda
       ((g$name$11039$1CmlGO
          g$main-exp*$11040$1CmlGO
          g$imp*$11041$1CmlGO
          g$b*$11042$1CmlGO
          g$top?$11043$1CmlGO)
        (letrec* ((g$itc$11044$1CmlGO (g$make-collector$8254$1CmlGO)))
          ((case-lambda
             ((g$imp-collector$11049$1CmlGO
                g$top-level-context$11050$1CmlGO
                g$imp-collector$11051$1CmlGO
                g$top-level-context$11052$1CmlGO)
              ((case-lambda
                 ((g$swap$11053$1CmlGO)
                  (dynamic-wind
                    g$swap$11053$1CmlGO
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$8252$1CmlGO
                              g$imp*$11041$1CmlGO)))
                         (case-lambda
                           ((g$subst-names$11056$1CmlGO
                              g$subst-labels$11057$1CmlGO)
                            ((case-lambda
                               ((g$subst-labels$11058$1CmlGO
                                  g$subst-names$11059$1CmlGO)
                                ((case-lambda
                                   ((g$rib$11060$1CmlGO)
                                    (letrec* ((g$wrap$11061$1CmlGO
                                                (case-lambda
                                                  ((g$x$11123$1CmlGO)
                                                   (g$make-stx$7898$1CmlGO
                                                     g$x$11123$1CmlGO
                                                     g$top-mark*$7867$1CmlGO
                                                     (list g$rib$11060$1CmlGO)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$11062$1CmlGO
                                            g$main-exp*$11063$1CmlGO
                                            g$rtc$11064$1CmlGO
                                            g$vtc$11065$1CmlGO)
                                          ((case-lambda
                                             ((g$inv-collector$11070$1CmlGO
                                                g$vis-collector$11071$1CmlGO
                                                g$inv-collector$11072$1CmlGO
                                                g$vis-collector$11073$1CmlGO)
                                              ((case-lambda
                                                 ((g$swap$11074$1CmlGO)
                                                  (dynamic-wind
                                                    g$swap$11074$1CmlGO
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$8258$1CmlGO
                                                              g$b*$11062$1CmlGO
                                                              g$rib$11060$1CmlGO
                                                              g$top?$11043$1CmlGO)))
                                                         (case-lambda
                                                           ((g$init*$11081$1CmlGO
                                                              g$r$11082$1CmlGO
                                                              g$mr$11083$1CmlGO
                                                              g$lex*$11084$1CmlGO
                                                              g$rhs*$11085$1CmlGO
                                                              g$internal-exp*$11086$1CmlGO)
                                                            ((case-lambda
                                                               ((g$internal-exp*$11087$1CmlGO
                                                                  g$rhs*$11088$1CmlGO
                                                                  g$lex*$11089$1CmlGO
                                                                  g$mr$11090$1CmlGO
                                                                  g$r$11091$1CmlGO
                                                                  g$init*$11092$1CmlGO)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$8249$1CmlGO
                                                                       (append
                                                                         g$main-exp*$11063$1CmlGO
                                                                         g$internal-exp*$11087$1CmlGO))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$11095$1CmlGO
                                                                       g$exp-id*$11096$1CmlGO)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$11097$1CmlGO
                                                                           g$exp-name*$11098$1CmlGO)
                                                                         (begin
                                                                           (g$seal-rib!$7891$1CmlGO
                                                                             g$rib$11060$1CmlGO)
                                                                           ((case-lambda
                                                                              ((g$init*$11099$1CmlGO)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$11100$1CmlGO)
                                                                                   ((case-lambda
                                                                                      (()
                                                                                       (begin
                                                                                         (g$unseal-rib!$7892$1CmlGO
                                                                                           g$rib$11060$1CmlGO)
                                                                                         ((case-lambda
                                                                                            ((g$loc*$11101$1CmlGO
                                                                                               g$export-subst$11102$1CmlGO)
                                                                                             (letrec* ((g$errstr$11103$1CmlGO
                                                                                                         '"attempt to export mutated variable"))
                                                                                               (call-with-values
                                                                                                 (case-lambda
                                                                                                   (()
                                                                                                    (g$make-export-env/macros$8303$1CmlGO
                                                                                                      g$lex*$11089$1CmlGO
                                                                                                      g$loc*$11101$1CmlGO
                                                                                                      g$r$11091$1CmlGO)))
                                                                                                 (case-lambda
                                                                                                   ((g$export-env$11107$1CmlGO
                                                                                                      g$global*$11108$1CmlGO
                                                                                                      g$macro*$11109$1CmlGO)
                                                                                                    ((case-lambda
                                                                                                       ((g$macro*$11110$1CmlGO
                                                                                                          g$global*$11111$1CmlGO
                                                                                                          g$export-env$11112$1CmlGO)
                                                                                                        (begin
                                                                                                          (for-each
                                                                                                            (case-lambda
                                                                                                              ((g$s$11113$1CmlGO)
                                                                                                               ((case-lambda
                                                                                                                  ((g$name$11114$1CmlGO
                                                                                                                     g$label$11115$1CmlGO)
                                                                                                                   ((case-lambda
                                                                                                                      ((g$p$11116$1CmlGO)
                                                                                                                       (if g$p$11116$1CmlGO
                                                                                                                         ((case-lambda
                                                                                                                            ((g$b$11117$1CmlGO)
                                                                                                                             ((case-lambda
                                                                                                                                ((g$type$11118$1CmlGO)
                                                                                                                                 (if (eq? g$type$11118$1CmlGO
                                                                                                                                          'mutable)
                                                                                                                                   (g$syntax-violation$8314$1CmlGO
                                                                                                                                     'export
                                                                                                                                     g$errstr$11103$1CmlGO
                                                                                                                                     g$name$11114$1CmlGO)
                                                                                                                                   (void))))
                                                                                                                              (car g$b$11117$1CmlGO))))
                                                                                                                          (cdr g$p$11116$1CmlGO))
                                                                                                                         (void))))
                                                                                                                    (g$assq$5658$1CmlGO
                                                                                                                      g$label$11115$1CmlGO
                                                                                                                      g$export-env$11112$1CmlGO))))
                                                                                                                (car g$s$11113$1CmlGO)
                                                                                                                (cdr g$s$11113$1CmlGO))))
                                                                                                            g$export-subst$11102$1CmlGO)
                                                                                                          ((case-lambda
                                                                                                             ((g$invoke-body$11119$1CmlGO
                                                                                                                g$invoke-definitions$11120$1CmlGO)
                                                                                                              (values
                                                                                                                (g$itc$11044$1CmlGO)
                                                                                                                (g$rtc$11064$1CmlGO)
                                                                                                                (g$vtc$11065$1CmlGO)
                                                                                                                (g$build-sequence$7859$1CmlGO
                                                                                                                  '#f
                                                                                                                  (append
                                                                                                                    g$invoke-definitions$11120$1CmlGO
                                                                                                                    (list
                                                                                                                      g$invoke-body$11119$1CmlGO)))
                                                                                                                g$macro*$11110$1CmlGO
                                                                                                                g$export-subst$11102$1CmlGO
                                                                                                                g$export-env$11112$1CmlGO)))
                                                                                                           (g$build-library-letrec*$7863$1CmlGO
                                                                                                             '#f
                                                                                                             g$name$11039$1CmlGO
                                                                                                             g$lex*$11089$1CmlGO
                                                                                                             g$loc*$11101$1CmlGO
                                                                                                             g$rhs*$11100$1CmlGO
                                                                                                             (if (null?
                                                                                                                   g$init*$11099$1CmlGO)
                                                                                                               (g$build-void$7860$1CmlGO)
                                                                                                               (g$build-sequence$7859$1CmlGO
                                                                                                                 '#f
                                                                                                                 g$init*$11099$1CmlGO)))
                                                                                                           (map g$build-global-define$7855$1CmlGO
                                                                                                                (map cdr
                                                                                                                     g$global*$11111$1CmlGO))))))
                                                                                                     g$macro*$11109$1CmlGO
                                                                                                     g$global*$11108$1CmlGO
                                                                                                     g$export-env$11107$1CmlGO)))))))
                                                                                          (map g$gen-global$7870$1CmlGO
                                                                                               g$lex*$11089$1CmlGO)
                                                                                          (g$make-export-subst$8302$1CmlGO
                                                                                            g$exp-name*$11098$1CmlGO
                                                                                            g$exp-id*$11097$1CmlGO))))))))
                                                                                (g$chi-rhs*$8229$1CmlGO
                                                                                  g$rhs*$11088$1CmlGO
                                                                                  g$r$11091$1CmlGO
                                                                                  g$mr$11090$1CmlGO))))
                                                                            (g$chi-expr*$8219$1CmlGO
                                                                              g$init*$11092$1CmlGO
                                                                              g$r$11091$1CmlGO
                                                                              g$mr$11090$1CmlGO)))))
                                                                      g$exp-id*$11096$1CmlGO
                                                                      g$exp-name*$11095$1CmlGO))))))
                                                             g$internal-exp*$11086$1CmlGO
                                                             g$rhs*$11085$1CmlGO
                                                             g$lex*$11084$1CmlGO
                                                             g$mr$11083$1CmlGO
                                                             g$r$11082$1CmlGO
                                                             g$init*$11081$1CmlGO))))))
                                                    g$swap$11074$1CmlGO)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$11121$1CmlGO)
                                                        (begin
                                                          (g$inv-collector$11070$1CmlGO
                                                            g$inv-collector$11072$1CmlGO)
                                                          (set! g$inv-collector$11072$1CmlGO
                                                            g$t$11121$1CmlGO))))
                                                     (g$inv-collector$11070$1CmlGO))
                                                    ((case-lambda
                                                       ((g$t$11122$1CmlGO)
                                                        (begin
                                                          (g$vis-collector$11071$1CmlGO
                                                            g$vis-collector$11073$1CmlGO)
                                                          (set! g$vis-collector$11073$1CmlGO
                                                            g$t$11122$1CmlGO))))
                                                     (g$vis-collector$11071$1CmlGO))))))))
                                           g$inv-collector$8255$1CmlGO
                                           g$vis-collector$8256$1CmlGO
                                           g$rtc$11064$1CmlGO
                                           g$vtc$11065$1CmlGO)))
                                       (map g$wrap$11061$1CmlGO
                                            g$b*$11042$1CmlGO)
                                       (map g$wrap$11061$1CmlGO
                                            g$main-exp*$11040$1CmlGO)
                                       (g$make-collector$8254$1CmlGO)
                                       (g$make-collector$8254$1CmlGO)))))
                                 (g$make-top-rib$8253$1CmlGO
                                   g$subst-names$11059$1CmlGO
                                   g$subst-labels$11058$1CmlGO))))
                             g$subst-labels$11057$1CmlGO
                             g$subst-names$11056$1CmlGO))))))
                    g$swap$11053$1CmlGO)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$11124$1CmlGO)
                        (begin
                          (g$imp-collector$11049$1CmlGO
                            g$imp-collector$11051$1CmlGO)
                          (set! g$imp-collector$11051$1CmlGO
                            g$t$11124$1CmlGO))))
                     (g$imp-collector$11049$1CmlGO))
                    ((case-lambda
                       ((g$t$11125$1CmlGO)
                        (begin
                          (g$top-level-context$11050$1CmlGO
                            g$top-level-context$11052$1CmlGO)
                          (set! g$top-level-context$11052$1CmlGO
                            g$t$11125$1CmlGO))))
                     (g$top-level-context$11050$1CmlGO))))))))
           g$imp-collector$8257$1CmlGO
           g$top-level-context$8321$1CmlGO
           g$itc$11044$1CmlGO
           '#f)))))
   (g$core-library-expander$8261$1CmlGO
     g$core-library-expander$11721$1CmlGO
     (case-lambda
       ((g$e$11126$1CmlGO g$verify-name$11127$1CmlGO)
        (call-with-values
          (case-lambda (() (g$parse-library$8251$1CmlGO g$e$11126$1CmlGO)))
          (case-lambda
            ((g$name*$11132$1CmlGO
               g$exp*$11133$1CmlGO
               g$imp*$11134$1CmlGO
               g$b*$11135$1CmlGO)
             ((case-lambda
                ((g$b*$11136$1CmlGO
                   g$imp*$11137$1CmlGO
                   g$exp*$11138$1CmlGO
                   g$name*$11139$1CmlGO)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$8250$1CmlGO g$name*$11139$1CmlGO)))
                   (case-lambda
                     ((g$name$11142$1CmlGO g$ver$11143$1CmlGO)
                      ((case-lambda
                         ((g$ver$11144$1CmlGO g$name$11145$1CmlGO)
                          (begin
                            (g$verify-name$11127$1CmlGO g$name$11145$1CmlGO)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$8260$1CmlGO
                                   g$name$11145$1CmlGO
                                   g$exp*$11138$1CmlGO
                                   g$imp*$11137$1CmlGO
                                   g$b*$11136$1CmlGO
                                   '#f)))
                              (case-lambda
                                ((g$imp*$11153$1CmlGO
                                   g$invoke-req*$11154$1CmlGO
                                   g$visit-req*$11155$1CmlGO
                                   g$invoke-code$11156$1CmlGO
                                   g$visit-code$11157$1CmlGO
                                   g$export-subst$11158$1CmlGO
                                   g$export-env$11159$1CmlGO)
                                 ((case-lambda
                                    ((g$export-env$11160$1CmlGO
                                       g$export-subst$11161$1CmlGO
                                       g$visit-code$11162$1CmlGO
                                       g$invoke-code$11163$1CmlGO
                                       g$visit-req*$11164$1CmlGO
                                       g$invoke-req*$11165$1CmlGO
                                       g$imp*$11166$1CmlGO)
                                     (values
                                       g$name$11145$1CmlGO
                                       g$ver$11144$1CmlGO
                                       g$imp*$11166$1CmlGO
                                       g$invoke-req*$11165$1CmlGO
                                       g$visit-req*$11164$1CmlGO
                                       g$invoke-code$11163$1CmlGO
                                       g$visit-code$11162$1CmlGO
                                       g$export-subst$11161$1CmlGO
                                       g$export-env$11160$1CmlGO)))
                                  g$export-env$11159$1CmlGO
                                  g$export-subst$11158$1CmlGO
                                  g$visit-code$11157$1CmlGO
                                  g$invoke-code$11156$1CmlGO
                                  g$visit-req*$11155$1CmlGO
                                  g$invoke-req*$11154$1CmlGO
                                  g$imp*$11153$1CmlGO)))))))
                       g$ver$11143$1CmlGO
                       g$name$11142$1CmlGO))))))
              g$b*$11135$1CmlGO
              g$imp*$11134$1CmlGO
              g$exp*$11133$1CmlGO
              g$name*$11132$1CmlGO)))))))
   (g$parse-top-level-program$8262$1CmlGO
     g$parse-top-level-program$11722$1CmlGO
     (case-lambda
       ((g$e*$11167$1CmlGO)
        ((case-lambda
           ((g$t$11168$1CmlGO)
            ((case-lambda
               ((g$ls/false$11169$1CmlGO)
                (if (if g$ls/false$11169$1CmlGO
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$11170$1CmlGO
                               g$imp*$11171$1CmlGO
                               g$b*$11172$1CmlGO)
                             (eq? (g$syntax->datum$8317$1CmlGO
                                    g$import$11170$1CmlGO)
                                  'import)))
                          g$ls/false$11169$1CmlGO))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$11173$1CmlGO
                         g$imp*$11174$1CmlGO
                         g$b*$11175$1CmlGO)
                       (values g$imp*$11174$1CmlGO g$b*$11175$1CmlGO)))
                    g$ls/false$11169$1CmlGO)
                  ((case-lambda
                     ((g$t$11176$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$11177$1CmlGO)
                          (if (if g$ls/false$11177$1CmlGO
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$11178$1CmlGO
                                         g$x$11179$1CmlGO
                                         g$y$11180$1CmlGO)
                                       (eq? (g$syntax->datum$8317$1CmlGO
                                              g$import$11178$1CmlGO)
                                            'import)))
                                    g$ls/false$11177$1CmlGO))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$11181$1CmlGO
                                   g$x$11182$1CmlGO
                                   g$y$11183$1CmlGO)
                                 (g$syntax-violation$8314$1CmlGO
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7922$1CmlGO
                                     g$e*$11167$1CmlGO))))
                              g$ls/false$11177$1CmlGO)
                            ((case-lambda
                               ((g$t$11184$1CmlGO)
                                ((case-lambda
                                   ((g$ls/false$11185$1CmlGO)
                                    (if g$ls/false$11185$1CmlGO
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$11185$1CmlGO)
                                      (g$syntax-violation$8314$1CmlGO
                                        '#f
                                        '"invalid syntax"
                                        g$t$11184$1CmlGO))))
                                 (g$syntax-dispatch$8203$1CmlGO
                                   g$t$11184$1CmlGO
                                   '_))))
                             g$t$11176$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO
                         g$t$11176$1CmlGO
                         '((any . any) . any)))))
                   g$t$11168$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO
               g$t$11168$1CmlGO
               '((any . each-any) . each-any)))))
         g$e*$11167$1CmlGO))))
   (g$top-level-expander$8263$1CmlGO
     g$top-level-expander$11723$1CmlGO
     (case-lambda
       ((g$e*$11186$1CmlGO)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$8262$1CmlGO g$e*$11186$1CmlGO)))
          (case-lambda
            ((g$imp*$11189$1CmlGO g$b*$11190$1CmlGO)
             ((case-lambda
                ((g$b*$11191$1CmlGO g$imp*$11192$1CmlGO)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$8260$1CmlGO
                        '()
                        '()
                        g$imp*$11192$1CmlGO
                        g$b*$11191$1CmlGO
                        '#t)))
                   (case-lambda
                     ((g$imp*$11200$1CmlGO
                        g$invoke-req*$11201$1CmlGO
                        g$visit-req*$11202$1CmlGO
                        g$invoke-code$11203$1CmlGO
                        g$visit-code$11204$1CmlGO
                        g$export-subst$11205$1CmlGO
                        g$export-env$11206$1CmlGO)
                      ((case-lambda
                         ((g$export-env$11207$1CmlGO
                            g$export-subst$11208$1CmlGO
                            g$visit-code$11209$1CmlGO
                            g$invoke-code$11210$1CmlGO
                            g$visit-req*$11211$1CmlGO
                            g$invoke-req*$11212$1CmlGO
                            g$imp*$11213$1CmlGO)
                          (values
                            g$invoke-req*$11212$1CmlGO
                            g$invoke-code$11210$1CmlGO)))
                       g$export-env$11206$1CmlGO
                       g$export-subst$11205$1CmlGO
                       g$visit-code$11204$1CmlGO
                       g$invoke-code$11203$1CmlGO
                       g$visit-req*$11202$1CmlGO
                       g$invoke-req*$11201$1CmlGO
                       g$imp*$11200$1CmlGO))))))
              g$b*$11190$1CmlGO
              g$imp*$11189$1CmlGO)))))))
   (g$9411$8264$1CmlGO
     g$9411$11724$1CmlGO
     (make-record-type-descriptor
       'env
       '#f
       'g$9414$1CmlGO
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9413$8265$1CmlGO g$9413$11725$1CmlGO '#f)
   (g$9412$8266$1CmlGO
     g$9412$11726$1CmlGO
     (make-record-constructor-descriptor
       g$9411$8264$1CmlGO
       '#f
       g$9413$8265$1CmlGO))
   (g$env?$8267$1CmlGO
     g$env?$11727$1CmlGO
     (record-predicate g$9411$8264$1CmlGO))
   (g$make-env$8268$1CmlGO
     g$make-env$11728$1CmlGO
     (record-constructor g$9412$8266$1CmlGO))
   (g$env-names$8269$1CmlGO
     g$env-names$11729$1CmlGO
     (record-accessor g$9411$8264$1CmlGO '0))
   (g$env-labels$8270$1CmlGO
     g$env-labels$11730$1CmlGO
     (record-accessor g$9411$8264$1CmlGO '1))
   (g$env-itc$8271$1CmlGO
     g$env-itc$11731$1CmlGO
     (record-accessor g$9411$8264$1CmlGO '2))
   (g$set-env-names!$8272$1CmlGO
     g$set-env-names!$11732$1CmlGO
     (record-mutator g$9411$8264$1CmlGO '0))
   (g$set-env-labels!$8273$1CmlGO
     g$set-env-labels!$11733$1CmlGO
     (record-mutator g$9411$8264$1CmlGO '1))
   (g$set-env-itc!$8274$1CmlGO
     g$set-env-itc!$11734$1CmlGO
     (record-mutator g$9411$8264$1CmlGO '2))
   (g$rp$8275$1CmlGO
     g$rp$11735$1CmlGO
     (make-record-printer
       'env
       (case-lambda
         ((g$x$11214$1CmlGO g$p$11215$1CmlGO)
          (display '"#<environment>" g$p$11215$1CmlGO)))))
   (g$9430$8276$1CmlGO
     g$9430$11736$1CmlGO
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9433$1CmlGO
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9432$8277$1CmlGO g$9432$11737$1CmlGO '#f)
   (g$9431$8278$1CmlGO
     g$9431$11738$1CmlGO
     (make-record-constructor-descriptor
       g$9430$8276$1CmlGO
       '#f
       g$9432$8277$1CmlGO))
   (g$interaction-env?$8279$1CmlGO
     g$interaction-env?$11739$1CmlGO
     (record-predicate g$9430$8276$1CmlGO))
   (g$make-interaction-env$8280$1CmlGO
     g$make-interaction-env$11740$1CmlGO
     (record-constructor g$9431$8278$1CmlGO))
   (g$interaction-env-rib$8281$1CmlGO
     g$interaction-env-rib$11741$1CmlGO
     (record-accessor g$9430$8276$1CmlGO '0))
   (g$interaction-env-r$8282$1CmlGO
     g$interaction-env-r$11742$1CmlGO
     (record-accessor g$9430$8276$1CmlGO '1))
   (g$interaction-env-locs$8283$1CmlGO
     g$interaction-env-locs$11743$1CmlGO
     (record-accessor g$9430$8276$1CmlGO '2))
   (g$set-interaction-env-rib!$8284$1CmlGO
     g$set-interaction-env-rib!$11744$1CmlGO
     (record-mutator g$9430$8276$1CmlGO '0))
   (g$set-interaction-env-r!$8285$1CmlGO
     g$set-interaction-env-r!$11745$1CmlGO
     (record-mutator g$9430$8276$1CmlGO '1))
   (g$set-interaction-env-locs!$8286$1CmlGO
     g$set-interaction-env-locs!$11746$1CmlGO
     (record-mutator g$9430$8276$1CmlGO '2))
   (g$rp$8287$1CmlGO
     g$rp$11747$1CmlGO
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$11216$1CmlGO g$p$11217$1CmlGO)
          (display '"#<environment>" g$p$11217$1CmlGO)))))
   (g$interaction-environment-symbols$8288$1CmlGO
     g$interaction-environment-symbols$11748$1CmlGO
     (case-lambda
       (()
        (g$environment-symbols$8292$1CmlGO
          (g$interaction-environment$8320$1CmlGO)))))
   (g$environment-bindings$8289$1CmlGO
     g$environment-bindings$11749$1CmlGO
     (case-lambda
       ((g$e$11218$1CmlGO)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$11219$1CmlGO g$label$11220$1CmlGO)
               (g$parse-binding$8290$1CmlGO
                 (cons
                   g$name$11219$1CmlGO
                   (g$imported-label->binding$7739$1CmlGO
                     g$label$11220$1CmlGO)))))
            (g$env-names$8269$1CmlGO g$e$11218$1CmlGO)
            (g$env-labels$8270$1CmlGO g$e$11218$1CmlGO))))))
   (g$parse-binding$8290$1CmlGO
     g$parse-binding$11750$1CmlGO
     (case-lambda
       ((g$b$11221$1CmlGO)
        (cons
          (car g$b$11221$1CmlGO)
          ((case-lambda
             ((g$t$11222$1CmlGO)
              (if (g$memv$5663$1CmlGO g$t$11222$1CmlGO '(core-prim global))
                'procedure
                (if (g$memv$5663$1CmlGO
                      g$t$11222$1CmlGO
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5663$1CmlGO g$t$11222$1CmlGO '($core-rtd))
                    'record
                    (if (eq? (car g$b$11221$1CmlGO)
                             (g$cadr$5832$1CmlGO g$b$11221$1CmlGO))
                      'syntax
                      'unknown))))))
           (g$cadr$5832$1CmlGO g$b$11221$1CmlGO))))))
   (g$environment?$8291$1CmlGO
     g$environment?$11751$1CmlGO
     (case-lambda
       ((g$x$11223$1CmlGO)
        ((case-lambda
           ((g$t$11224$1CmlGO)
            (if g$t$11224$1CmlGO
              g$t$11224$1CmlGO
              (begin '#f (g$interaction-env?$8279$1CmlGO g$x$11223$1CmlGO)))))
         (g$env?$8267$1CmlGO g$x$11223$1CmlGO)))))
   (g$environment-symbols$8292$1CmlGO
     g$environment-symbols$11752$1CmlGO
     (case-lambda
       ((g$x$11225$1CmlGO)
        (if (g$env?$8267$1CmlGO g$x$11225$1CmlGO)
          (vector->list (g$env-names$8269$1CmlGO g$x$11225$1CmlGO))
          (if (g$interaction-env?$8279$1CmlGO g$x$11225$1CmlGO)
            (map values
                 (g$rib-sym*$7880$1CmlGO
                   (g$interaction-env-rib$8281$1CmlGO g$x$11225$1CmlGO)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$11225$1CmlGO))))))
   (g$environment$8293$1CmlGO
     g$environment$11753$1CmlGO
     (case-lambda
       (g$imp*$11226$1CmlGO
        ((case-lambda
           ((g$itc$11227$1CmlGO)
            ((case-lambda
               ((g$imp-collector$11230$1CmlGO g$imp-collector$11231$1CmlGO)
                ((case-lambda
                   ((g$swap$11232$1CmlGO)
                    (dynamic-wind
                      g$swap$11232$1CmlGO
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$8252$1CmlGO
                                g$imp*$11226$1CmlGO)))
                           (case-lambda
                             ((g$subst-names$11235$1CmlGO
                                g$subst-labels$11236$1CmlGO)
                              ((case-lambda
                                 ((g$subst-labels$11237$1CmlGO
                                    g$subst-names$11238$1CmlGO)
                                  (g$make-env$8268$1CmlGO
                                    g$subst-names$11238$1CmlGO
                                    g$subst-labels$11237$1CmlGO
                                    g$itc$11227$1CmlGO)))
                               g$subst-labels$11236$1CmlGO
                               g$subst-names$11235$1CmlGO))))))
                      g$swap$11232$1CmlGO)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$11239$1CmlGO)
                        (begin
                          (g$imp-collector$11230$1CmlGO
                            g$imp-collector$11231$1CmlGO)
                          (set! g$imp-collector$11231$1CmlGO
                            g$t$11239$1CmlGO))))
                     (g$imp-collector$11230$1CmlGO)))))))
             g$imp-collector$8257$1CmlGO
             g$itc$11227$1CmlGO)))
         (g$make-collector$8254$1CmlGO)))))
   (g$null-environment$8294$1CmlGO
     g$null-environment$11754$1CmlGO
     (case-lambda
       ((g$n$11240$1CmlGO)
        (begin
          (if (not (eqv? g$n$11240$1CmlGO '5))
            (assertion-violation 'null-environment '"not 5" g$n$11240$1CmlGO)
            (void))
          (g$environment$8293$1CmlGO '(psyntax null-environment-5))))))
   (g$scheme-report-environment$8295$1CmlGO
     g$scheme-report-environment$11755$1CmlGO
     (case-lambda
       ((g$n$11241$1CmlGO)
        (begin
          (if (not (eqv? g$n$11241$1CmlGO '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$11241$1CmlGO)
            (void))
          (g$environment$8293$1CmlGO '(psyntax scheme-report-environment-5))))))
   (g$expand$8296$1CmlGO
     g$expand$11756$1CmlGO
     (case-lambda
       ((g$x$11242$1CmlGO g$env$11243$1CmlGO)
        (if (g$env?$8267$1CmlGO g$env$11243$1CmlGO)
          ((case-lambda
             ((g$rib$11244$1CmlGO)
              ((case-lambda
                 ((g$x$11245$1CmlGO
                    g$itc$11246$1CmlGO
                    g$rtc$11247$1CmlGO
                    g$vtc$11248$1CmlGO)
                  ((case-lambda
                     ((g$x$11249$1CmlGO)
                      (begin
                        (g$seal-rib!$7891$1CmlGO g$rib$11244$1CmlGO)
                        (values g$x$11249$1CmlGO (g$rtc$11247$1CmlGO)))))
                   ((case-lambda
                      ((g$inv-collector$11256$1CmlGO
                         g$vis-collector$11257$1CmlGO
                         g$imp-collector$11258$1CmlGO
                         g$inv-collector$11259$1CmlGO
                         g$vis-collector$11260$1CmlGO
                         g$imp-collector$11261$1CmlGO)
                       ((case-lambda
                          ((g$swap$11262$1CmlGO)
                           (dynamic-wind
                             g$swap$11262$1CmlGO
                             (case-lambda
                               (()
                                (g$chi-expr$8221$1CmlGO
                                  g$x$11245$1CmlGO
                                  '()
                                  '())))
                             g$swap$11262$1CmlGO)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$11263$1CmlGO)
                                 (begin
                                   (g$inv-collector$11256$1CmlGO
                                     g$inv-collector$11259$1CmlGO)
                                   (set! g$inv-collector$11259$1CmlGO
                                     g$t$11263$1CmlGO))))
                              (g$inv-collector$11256$1CmlGO))
                             ((case-lambda
                                ((g$t$11264$1CmlGO)
                                 (begin
                                   (g$vis-collector$11257$1CmlGO
                                     g$vis-collector$11260$1CmlGO)
                                   (set! g$vis-collector$11260$1CmlGO
                                     g$t$11264$1CmlGO))))
                              (g$vis-collector$11257$1CmlGO))
                             ((case-lambda
                                ((g$t$11265$1CmlGO)
                                 (begin
                                   (g$imp-collector$11258$1CmlGO
                                     g$imp-collector$11261$1CmlGO)
                                   (set! g$imp-collector$11261$1CmlGO
                                     g$t$11265$1CmlGO))))
                              (g$imp-collector$11258$1CmlGO))))))))
                    g$inv-collector$8255$1CmlGO
                    g$vis-collector$8256$1CmlGO
                    g$imp-collector$8257$1CmlGO
                    g$rtc$11247$1CmlGO
                    g$vtc$11248$1CmlGO
                    g$itc$11246$1CmlGO))))
               (g$make-stx$7898$1CmlGO
                 g$x$11242$1CmlGO
                 g$top-mark*$7867$1CmlGO
                 (list g$rib$11244$1CmlGO)
                 '())
               (g$env-itc$8271$1CmlGO g$env$11243$1CmlGO)
               (g$make-collector$8254$1CmlGO)
               (g$make-collector$8254$1CmlGO))))
           (g$make-top-rib$8253$1CmlGO
             (g$env-names$8269$1CmlGO g$env$11243$1CmlGO)
             (g$env-labels$8270$1CmlGO g$env$11243$1CmlGO)))
          (if (g$interaction-env?$8279$1CmlGO g$env$11243$1CmlGO)
            ((case-lambda
               ((g$rib$11266$1CmlGO g$r$11267$1CmlGO g$rtc$11268$1CmlGO)
                ((case-lambda
                   ((g$x$11269$1CmlGO)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$11280$1CmlGO
                               g$inv-collector$11281$1CmlGO
                               g$vis-collector$11282$1CmlGO
                               g$imp-collector$11283$1CmlGO
                               g$top-level-context$11284$1CmlGO
                               g$inv-collector$11285$1CmlGO
                               g$vis-collector$11286$1CmlGO
                               g$imp-collector$11287$1CmlGO)
                             ((case-lambda
                                ((g$swap$11288$1CmlGO)
                                 (dynamic-wind
                                   g$swap$11288$1CmlGO
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$8259$1CmlGO
                                        g$x$11269$1CmlGO
                                        g$rib$11266$1CmlGO
                                        g$r$11267$1CmlGO)))
                                   g$swap$11288$1CmlGO)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$11289$1CmlGO)
                                       (begin
                                         (g$top-level-context$11280$1CmlGO
                                           g$top-level-context$11284$1CmlGO)
                                         (set! g$top-level-context$11284$1CmlGO
                                           g$t$11289$1CmlGO))))
                                    (g$top-level-context$11280$1CmlGO))
                                   ((case-lambda
                                      ((g$t$11290$1CmlGO)
                                       (begin
                                         (g$inv-collector$11281$1CmlGO
                                           g$inv-collector$11285$1CmlGO)
                                         (set! g$inv-collector$11285$1CmlGO
                                           g$t$11290$1CmlGO))))
                                    (g$inv-collector$11281$1CmlGO))
                                   ((case-lambda
                                      ((g$t$11291$1CmlGO)
                                       (begin
                                         (g$vis-collector$11282$1CmlGO
                                           g$vis-collector$11286$1CmlGO)
                                         (set! g$vis-collector$11286$1CmlGO
                                           g$t$11291$1CmlGO))))
                                    (g$vis-collector$11282$1CmlGO))
                                   ((case-lambda
                                      ((g$t$11292$1CmlGO)
                                       (begin
                                         (g$imp-collector$11283$1CmlGO
                                           g$imp-collector$11287$1CmlGO)
                                         (set! g$imp-collector$11287$1CmlGO
                                           g$t$11292$1CmlGO))))
                                    (g$imp-collector$11283$1CmlGO))))))))
                          g$top-level-context$8321$1CmlGO
                          g$inv-collector$8255$1CmlGO
                          g$vis-collector$8256$1CmlGO
                          g$imp-collector$8257$1CmlGO
                          g$env$11243$1CmlGO
                          g$rtc$11268$1CmlGO
                          (g$make-collector$8254$1CmlGO)
                          (g$make-collector$8254$1CmlGO))))
                      (case-lambda
                        ((g$e$11293$1CmlGO g$r^$11294$1CmlGO)
                         ((case-lambda
                            ((g$r^$11295$1CmlGO g$e$11296$1CmlGO)
                             (begin
                               (g$set-interaction-env-r!$8285$1CmlGO
                                 g$env$11243$1CmlGO
                                 g$r^$11295$1CmlGO)
                               (values g$e$11296$1CmlGO (g$rtc$11268$1CmlGO)))))
                          g$r^$11294$1CmlGO
                          g$e$11293$1CmlGO))))))
                 (g$make-stx$7898$1CmlGO
                   g$x$11242$1CmlGO
                   g$top-mark*$7867$1CmlGO
                   (list g$rib$11266$1CmlGO)
                   '()))))
             (g$interaction-env-rib$8281$1CmlGO g$env$11243$1CmlGO)
             (g$interaction-env-r$8282$1CmlGO g$env$11243$1CmlGO)
             (g$make-collector$8254$1CmlGO))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$11243$1CmlGO))))))
   (g$eval$8297$1CmlGO
     g$eval$11757$1CmlGO
     (case-lambda
       ((g$x$11297$1CmlGO g$env$11298$1CmlGO)
        (begin
          (if (not (g$environment?$8291$1CmlGO g$env$11298$1CmlGO))
            (error 'eval '"not an environment" g$env$11298$1CmlGO)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8296$1CmlGO g$x$11297$1CmlGO g$env$11298$1CmlGO)))
            (case-lambda
              ((g$x$11301$1CmlGO g$invoke-req*$11302$1CmlGO)
               ((case-lambda
                  ((g$invoke-req*$11303$1CmlGO g$x$11304$1CmlGO)
                   (begin
                     (for-each
                       g$invoke-library$7740$1CmlGO
                       g$invoke-req*$11303$1CmlGO)
                     (eval-core
                       (g$expanded->core$7439$1CmlGO g$x$11304$1CmlGO)))))
                g$invoke-req*$11302$1CmlGO
                g$x$11301$1CmlGO))))))))
   (g$library-expander$8298$1CmlGO
     g$library-expander$11758$1CmlGO
     (case-lambda
       ((g$x$11305$1CmlGO g$filename$11306$1CmlGO g$verify-name$11307$1CmlGO)
        (letrec* ((g$build-visit-code$11308$1CmlGO
                    (case-lambda
                      ((g$macro*$11351$1CmlGO)
                       (if (null? g$macro*$11351$1CmlGO)
                         (g$build-void$7860$1CmlGO)
                         (g$build-sequence$7859$1CmlGO
                           '#f
                           (map (case-lambda
                                  ((g$x$11352$1CmlGO)
                                   ((case-lambda
                                      ((g$loc$11353$1CmlGO g$src$11354$1CmlGO)
                                       (list
                                         'set!
                                         g$loc$11353$1CmlGO
                                         g$src$11354$1CmlGO)))
                                    (car g$x$11352$1CmlGO)
                                    (g$cddr$5834$1CmlGO g$x$11352$1CmlGO))))
                                g$macro*$11351$1CmlGO))))))
                  (g$visit!$11309$1CmlGO
                    (case-lambda
                      ((g$macro*$11347$1CmlGO)
                       (for-each
                         (case-lambda
                           ((g$x$11348$1CmlGO)
                            ((case-lambda
                               ((g$loc$11349$1CmlGO g$proc$11350$1CmlGO)
                                (set-symbol-value!
                                  g$loc$11349$1CmlGO
                                  g$proc$11350$1CmlGO)))
                             (car g$x$11348$1CmlGO)
                             (g$cadr$5832$1CmlGO g$x$11348$1CmlGO))))
                         g$macro*$11347$1CmlGO)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$8261$1CmlGO
                 g$x$11305$1CmlGO
                 g$verify-name$11307$1CmlGO)))
            (case-lambda
              ((g$name$11319$1CmlGO
                 g$ver$11320$1CmlGO
                 g$imp*$11321$1CmlGO
                 g$inv*$11322$1CmlGO
                 g$vis*$11323$1CmlGO
                 g$invoke-code$11324$1CmlGO
                 g$macro*$11325$1CmlGO
                 g$export-subst$11326$1CmlGO
                 g$export-env$11327$1CmlGO)
               ((case-lambda
                  ((g$export-env$11328$1CmlGO
                     g$export-subst$11329$1CmlGO
                     g$macro*$11330$1CmlGO
                     g$invoke-code$11331$1CmlGO
                     g$vis*$11332$1CmlGO
                     g$inv*$11333$1CmlGO
                     g$imp*$11334$1CmlGO
                     g$ver$11335$1CmlGO
                     g$name$11336$1CmlGO)
                   ((case-lambda
                      ((g$id$11337$1CmlGO
                         g$name$11338$1CmlGO
                         g$ver$11339$1CmlGO
                         g$imp*$11340$1CmlGO
                         g$vis*$11341$1CmlGO
                         g$inv*$11342$1CmlGO
                         g$visit-proc$11343$1CmlGO
                         g$invoke-proc$11344$1CmlGO
                         g$visit-code$11345$1CmlGO
                         g$invoke-code$11346$1CmlGO)
                       (begin
                         (g$install-library$7738$1CmlGO
                           g$id$11337$1CmlGO
                           g$name$11338$1CmlGO
                           g$ver$11339$1CmlGO
                           g$imp*$11340$1CmlGO
                           g$vis*$11341$1CmlGO
                           g$inv*$11342$1CmlGO
                           g$export-subst$11329$1CmlGO
                           g$export-env$11328$1CmlGO
                           g$visit-proc$11343$1CmlGO
                           g$invoke-proc$11344$1CmlGO
                           g$visit-code$11345$1CmlGO
                           g$invoke-code$11346$1CmlGO
                           '#t
                           g$filename$11306$1CmlGO)
                         (values
                           g$id$11337$1CmlGO
                           g$name$11338$1CmlGO
                           g$ver$11339$1CmlGO
                           g$imp*$11340$1CmlGO
                           g$vis*$11341$1CmlGO
                           g$inv*$11342$1CmlGO
                           g$invoke-code$11346$1CmlGO
                           g$visit-code$11345$1CmlGO
                           g$export-subst$11329$1CmlGO
                           g$export-env$11328$1CmlGO))))
                    (gensym)
                    g$name$11336$1CmlGO
                    g$ver$11335$1CmlGO
                    (map g$library-spec$7744$1CmlGO g$imp*$11334$1CmlGO)
                    (map g$library-spec$7744$1CmlGO g$vis*$11332$1CmlGO)
                    (map g$library-spec$7744$1CmlGO g$inv*$11333$1CmlGO)
                    (case-lambda
                      (() (g$visit!$11309$1CmlGO g$macro*$11330$1CmlGO)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$7439$1CmlGO
                           g$invoke-code$11331$1CmlGO))))
                    (g$build-visit-code$11308$1CmlGO g$macro*$11330$1CmlGO)
                    g$invoke-code$11331$1CmlGO)))
                g$export-env$11327$1CmlGO
                g$export-subst$11326$1CmlGO
                g$macro*$11325$1CmlGO
                g$invoke-code$11324$1CmlGO
                g$vis*$11323$1CmlGO
                g$inv*$11322$1CmlGO
                g$imp*$11321$1CmlGO
                g$ver$11320$1CmlGO
                g$name$11319$1CmlGO))))))
       ((g$x$11355$1CmlGO g$filename$11356$1CmlGO)
        (g$library-expander$8298$1CmlGO
          g$x$11355$1CmlGO
          g$filename$11356$1CmlGO
          (case-lambda ((g$x$11357$1CmlGO) (values)))))
       ((g$x$11358$1CmlGO)
        (g$library-expander$8298$1CmlGO
          g$x$11358$1CmlGO
          '#f
          (case-lambda ((g$x$11359$1CmlGO) (values)))))))
   (g$boot-library-expand$8299$1CmlGO
     g$boot-library-expand$11759$1CmlGO
     (case-lambda
       ((g$x$11360$1CmlGO)
        (call-with-values
          (case-lambda (() (g$library-expander$8298$1CmlGO g$x$11360$1CmlGO)))
          (case-lambda
            ((g$id$11371$1CmlGO
               g$name$11372$1CmlGO
               g$ver$11373$1CmlGO
               g$imp*$11374$1CmlGO
               g$vis*$11375$1CmlGO
               g$inv*$11376$1CmlGO
               g$invoke-code$11377$1CmlGO
               g$visit-code$11378$1CmlGO
               g$export-subst$11379$1CmlGO
               g$export-env$11380$1CmlGO)
             ((case-lambda
                ((g$export-env$11381$1CmlGO
                   g$export-subst$11382$1CmlGO
                   g$visit-code$11383$1CmlGO
                   g$invoke-code$11384$1CmlGO
                   g$inv*$11385$1CmlGO
                   g$vis*$11386$1CmlGO
                   g$imp*$11387$1CmlGO
                   g$ver$11388$1CmlGO
                   g$name$11389$1CmlGO
                   g$id$11390$1CmlGO)
                 (values
                   g$name$11389$1CmlGO
                   g$invoke-code$11384$1CmlGO
                   g$export-subst$11382$1CmlGO
                   g$export-env$11381$1CmlGO)))
              g$export-env$11380$1CmlGO
              g$export-subst$11379$1CmlGO
              g$visit-code$11378$1CmlGO
              g$invoke-code$11377$1CmlGO
              g$inv*$11376$1CmlGO
              g$vis*$11375$1CmlGO
              g$imp*$11374$1CmlGO
              g$ver$11373$1CmlGO
              g$name$11372$1CmlGO
              g$id$11371$1CmlGO)))))))
   (g$rev-map-append$8300$1CmlGO
     g$rev-map-append$11760$1CmlGO
     (case-lambda
       ((g$f$11391$1CmlGO g$ls$11392$1CmlGO g$ac$11393$1CmlGO)
        (if (null? g$ls$11392$1CmlGO)
          g$ac$11393$1CmlGO
          (g$rev-map-append$8300$1CmlGO
            g$f$11391$1CmlGO
            (cdr g$ls$11392$1CmlGO)
            (cons
              (g$f$11391$1CmlGO (car g$ls$11392$1CmlGO))
              g$ac$11393$1CmlGO))))))
   (g$build-exports$8301$1CmlGO
     g$build-exports$11761$1CmlGO
     (case-lambda
       ((g$lex*+loc*$11394$1CmlGO g$init*$11395$1CmlGO)
        (g$build-sequence$7859$1CmlGO
          '#f
          (cons
            (g$build-void$7860$1CmlGO)
            (g$rev-map-append$8300$1CmlGO
              (case-lambda
                ((g$x$11396$1CmlGO)
                 (list 'set! (cdr g$x$11396$1CmlGO) (car g$x$11396$1CmlGO))))
              g$lex*+loc*$11394$1CmlGO
              g$init*$11395$1CmlGO))))))
   (g$make-export-subst$8302$1CmlGO
     g$make-export-subst$11762$1CmlGO
     (case-lambda
       ((g$name*$11397$1CmlGO g$id*$11398$1CmlGO)
        (map (case-lambda
               ((g$name$11399$1CmlGO g$id$11400$1CmlGO)
                ((case-lambda
                   ((g$label$11401$1CmlGO)
                    (begin
                      (if (not g$label$11401$1CmlGO)
                        (g$syntax-violation$8314$1CmlGO
                          '#f
                          '"cannot export unbound identifier"
                          g$id$11400$1CmlGO)
                        (void))
                      (cons g$name$11399$1CmlGO g$label$11401$1CmlGO))))
                 (g$id->label$7938$1CmlGO g$id$11400$1CmlGO))))
             g$name*$11397$1CmlGO
             g$id*$11398$1CmlGO))))
   (g$make-export-env/macros$8303$1CmlGO
     g$make-export-env/macros$11763$1CmlGO
     (case-lambda
       ((g$lex*$11402$1CmlGO g$loc*$11403$1CmlGO g$r$11404$1CmlGO)
        (letrec* ((g$lookup$11405$1CmlGO
                    (case-lambda
                      ((g$x$11420$1CmlGO)
                       ((letrec ((g$f$11421$1CmlGO
                                   (case-lambda
                                     ((g$x$11422$1CmlGO
                                        g$lex*$11423$1CmlGO
                                        g$loc*$11424$1CmlGO)
                                      (if (pair? g$lex*$11423$1CmlGO)
                                        (if (eq? g$x$11422$1CmlGO
                                                 (car g$lex*$11423$1CmlGO))
                                          (car g$loc*$11424$1CmlGO)
                                          (g$f$11421$1CmlGO
                                            g$x$11422$1CmlGO
                                            (cdr g$lex*$11423$1CmlGO)
                                            (cdr g$loc*$11424$1CmlGO)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$11421$1CmlGO)
                        g$x$11420$1CmlGO
                        g$lex*$11402$1CmlGO
                        g$loc*$11403$1CmlGO)))))
          ((letrec ((g$f$11406$1CmlGO
                      (case-lambda
                        ((g$r$11407$1CmlGO
                           g$env$11408$1CmlGO
                           g$global*$11409$1CmlGO
                           g$macro*$11410$1CmlGO)
                         (if (null? g$r$11407$1CmlGO)
                           (values
                             g$env$11408$1CmlGO
                             g$global*$11409$1CmlGO
                             g$macro*$11410$1CmlGO)
                           ((case-lambda
                              ((g$x$11411$1CmlGO)
                               ((case-lambda
                                  ((g$label$11412$1CmlGO g$b$11413$1CmlGO)
                                   ((case-lambda
                                      ((g$t$11414$1CmlGO)
                                       (if (g$memv$5663$1CmlGO
                                             g$t$11414$1CmlGO
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$11415$1CmlGO)
                                             ((case-lambda
                                                ((g$loc$11416$1CmlGO
                                                   g$type$11417$1CmlGO)
                                                 (g$f$11406$1CmlGO
                                                   (cdr g$r$11407$1CmlGO)
                                                   (cons
                                                     (g$cons*$5670$1CmlGO
                                                       g$label$11412$1CmlGO
                                                       g$type$11417$1CmlGO
                                                       g$loc$11416$1CmlGO)
                                                     g$env$11408$1CmlGO)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$8147$1CmlGO
                                                         g$v$11415$1CmlGO)
                                                       g$loc$11416$1CmlGO)
                                                     g$global*$11409$1CmlGO)
                                                   g$macro*$11410$1CmlGO)))
                                              (g$lookup$11405$1CmlGO
                                                (g$lexical-var$8147$1CmlGO
                                                  g$v$11415$1CmlGO))
                                              (if (g$lexical-mutable?$8148$1CmlGO
                                                    g$v$11415$1CmlGO)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7943$1CmlGO
                                            g$b$11413$1CmlGO))
                                         (if (g$memv$5663$1CmlGO
                                               g$t$11414$1CmlGO
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$11418$1CmlGO)
                                               (g$f$11406$1CmlGO
                                                 (cdr g$r$11407$1CmlGO)
                                                 (cons
                                                   (g$cons*$5670$1CmlGO
                                                     g$label$11412$1CmlGO
                                                     'global-macro
                                                     g$loc$11418$1CmlGO)
                                                   g$env$11408$1CmlGO)
                                                 g$global*$11409$1CmlGO
                                                 (cons
                                                   (cons
                                                     g$loc$11418$1CmlGO
                                                     (g$binding-value$7943$1CmlGO
                                                       g$b$11413$1CmlGO))
                                                   g$macro*$11410$1CmlGO))))
                                            (gensym))
                                           (if (g$memv$5663$1CmlGO
                                                 g$t$11414$1CmlGO
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$11419$1CmlGO)
                                                 (g$f$11406$1CmlGO
                                                   (cdr g$r$11407$1CmlGO)
                                                   (cons
                                                     (g$cons*$5670$1CmlGO
                                                       g$label$11412$1CmlGO
                                                       'global-macro!
                                                       g$loc$11419$1CmlGO)
                                                     g$env$11408$1CmlGO)
                                                   g$global*$11409$1CmlGO
                                                   (cons
                                                     (cons
                                                       g$loc$11419$1CmlGO
                                                       (g$binding-value$7943$1CmlGO
                                                         g$b$11413$1CmlGO))
                                                     g$macro*$11410$1CmlGO))))
                                              (gensym))
                                             (if (g$memv$5663$1CmlGO
                                                   g$t$11414$1CmlGO
                                                   '($rtd $module))
                                               (g$f$11406$1CmlGO
                                                 (cdr g$r$11407$1CmlGO)
                                                 (cons
                                                   g$x$11411$1CmlGO
                                                   g$env$11408$1CmlGO)
                                                 g$global*$11409$1CmlGO
                                                 g$macro*$11410$1CmlGO)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7942$1CmlGO
                                                   g$b$11413$1CmlGO)
                                                 (g$binding-value$7943$1CmlGO
                                                   g$b$11413$1CmlGO))))))))
                                    (g$binding-type$7942$1CmlGO
                                      g$b$11413$1CmlGO))))
                                (car g$x$11411$1CmlGO)
                                (cdr g$x$11411$1CmlGO))))
                            (car g$r$11407$1CmlGO)))))))
             g$f$11406$1CmlGO)
           g$r$11404$1CmlGO
           '()
           '()
           '())))))
   (g$generate-temporaries$8304$1CmlGO
     g$generate-temporaries$11764$1CmlGO
     (case-lambda
       ((g$ls$11425$1CmlGO)
        ((case-lambda
           ((g$t$11426$1CmlGO)
            ((case-lambda
               ((g$ls/false$11427$1CmlGO)
                (if g$ls/false$11427$1CmlGO
                  (apply
                    (case-lambda
                      ((g$ls$11428$1CmlGO)
                       (map (case-lambda
                              ((g$x$11429$1CmlGO)
                               (g$make-stx$7898$1CmlGO
                                 ((case-lambda
                                    ((g$x$11430$1CmlGO)
                                     (if ((case-lambda
                                            ((g$t$11431$1CmlGO)
                                             (if g$t$11431$1CmlGO
                                               g$t$11431$1CmlGO
                                               (begin
                                                 '#f
                                                 (string? g$x$11430$1CmlGO)))))
                                          (symbol? g$x$11430$1CmlGO))
                                       (gensym g$x$11430$1CmlGO)
                                       (gensym 't))))
                                  (g$syntax->datum$8317$1CmlGO
                                    g$x$11429$1CmlGO))
                                 g$top-mark*$7867$1CmlGO
                                 '()
                                 '())))
                            g$ls$11428$1CmlGO)))
                    g$ls/false$11427$1CmlGO)
                  ((case-lambda
                     ((g$t$11432$1CmlGO)
                      ((case-lambda
                         ((g$ls/false$11433$1CmlGO)
                          (if g$ls/false$11433$1CmlGO
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$11433$1CmlGO)
                            (g$syntax-violation$8314$1CmlGO
                              '#f
                              '"invalid syntax"
                              g$t$11432$1CmlGO))))
                       (g$syntax-dispatch$8203$1CmlGO g$t$11432$1CmlGO '_))))
                   g$t$11426$1CmlGO))))
             (g$syntax-dispatch$8203$1CmlGO g$t$11426$1CmlGO 'each-any))))
         g$ls$11425$1CmlGO))))
   (g$free-identifier=?$8305$1CmlGO
     g$free-identifier=?$11765$1CmlGO
     (case-lambda
       ((g$x$11434$1CmlGO g$y$11435$1CmlGO)
        (if (g$id?$7925$1CmlGO g$x$11434$1CmlGO)
          (if (g$id?$7925$1CmlGO g$y$11435$1CmlGO)
            (g$free-id=?$7929$1CmlGO g$x$11434$1CmlGO g$y$11435$1CmlGO)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$11435$1CmlGO))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$11434$1CmlGO)))))
   (g$bound-identifier=?$8306$1CmlGO
     g$bound-identifier=?$11766$1CmlGO
     (case-lambda
       ((g$x$11436$1CmlGO g$y$11437$1CmlGO)
        (if (g$id?$7925$1CmlGO g$x$11436$1CmlGO)
          (if (g$id?$7925$1CmlGO g$y$11437$1CmlGO)
            (g$bound-id=?$7928$1CmlGO g$x$11436$1CmlGO g$y$11437$1CmlGO)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$11437$1CmlGO))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$11436$1CmlGO)))))
   (g$make-source-condition$8307$1CmlGO
     g$make-source-condition$11767$1CmlGO
     (case-lambda
       ((g$x$11438$1CmlGO)
        (letrec* ((g$12331$11439$1CmlGO
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$12334$1CmlGO
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12333$11440$1CmlGO '#f)
                  (g$12332$11441$1CmlGO
                    (make-record-constructor-descriptor
                      g$12331$11439$1CmlGO
                      &condition-rcd
                      g$12333$11440$1CmlGO))
                  (g$12330$11442$1CmlGO (record-predicate g$12331$11439$1CmlGO))
                  (g$make-source-condition$11443$1CmlGO
                    (record-constructor g$12332$11441$1CmlGO))
                  (g$12328$11444$1CmlGO
                    (record-accessor g$12331$11439$1CmlGO '0))
                  (g$12329$11445$1CmlGO
                    (record-accessor g$12331$11439$1CmlGO '1))
                  (g$source-condition?$11446$1CmlGO
                    (condition-predicate g$12331$11439$1CmlGO))
                  (g$source-filename$11447$1CmlGO
                    (condition-accessor
                      g$12331$11439$1CmlGO
                      g$12328$11444$1CmlGO))
                  (g$source-character$11448$1CmlGO
                    (condition-accessor
                      g$12331$11439$1CmlGO
                      g$12329$11445$1CmlGO)))
          (if (pair? g$x$11438$1CmlGO)
            (g$make-source-condition$11443$1CmlGO
              (car g$x$11438$1CmlGO)
              (cdr g$x$11438$1CmlGO))
            (condition))))))
   (g$extract-position-condition$8308$1CmlGO
     g$extract-position-condition$11768$1CmlGO
     (case-lambda
       ((g$x$11449$1CmlGO)
        (g$make-source-condition$8307$1CmlGO
          (g$expression-position$8309$1CmlGO g$x$11449$1CmlGO)))))
   (g$expression-position$8309$1CmlGO
     g$expression-position$11769$1CmlGO
     (case-lambda
       ((g$x$11450$1CmlGO)
        (if (g$stx?$7897$1CmlGO g$x$11450$1CmlGO)
          (begin
            '#f
            ((case-lambda
               ((g$x$11451$1CmlGO)
                (if (annotation? g$x$11451$1CmlGO)
                  (begin '#f (annotation-source g$x$11451$1CmlGO))
                  '#f)))
             (g$stx-expr$7899$1CmlGO g$x$11450$1CmlGO)))
          '#f))))
   (g$assertion-error$8310$1CmlGO
     g$assertion-error$11770$1CmlGO
     (case-lambda
       ((g$expr$11452$1CmlGO g$pos$11453$1CmlGO)
        (raise
          (condition
            (g$make-assertion-violation$6406$1CmlGO)
            (g$make-who-condition$6420$1CmlGO 'assert)
            (g$make-message-condition$6374$1CmlGO '"assertion failed")
            (g$make-irritants-condition$6412$1CmlGO (list g$expr$11452$1CmlGO))
            (g$make-source-condition$8307$1CmlGO g$pos$11453$1CmlGO))))))
   (g$syntax-error$8311$1CmlGO
     g$syntax-error$11771$1CmlGO
     (case-lambda
       ((g$x$11454$1CmlGO . g$args$11455$1CmlGO)
        (begin
          (if (not (g$for-all$5668$1CmlGO string? g$args$11455$1CmlGO))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$11455$1CmlGO)
            (void))
          (raise
            (condition
              (g$make-message-condition$6374$1CmlGO
                (if (null? g$args$11455$1CmlGO)
                  '"invalid syntax"
                  (apply string-append g$args$11455$1CmlGO)))
              (g$make-syntax-violation$6446$1CmlGO
                (g$syntax->datum$8317$1CmlGO g$x$11454$1CmlGO)
                '#f)
              (g$extract-position-condition$8308$1CmlGO g$x$11454$1CmlGO)
              (g$extract-trace$8312$1CmlGO g$x$11454$1CmlGO)))))))
   (g$extract-trace$8312$1CmlGO
     g$extract-trace$11772$1CmlGO
     (case-lambda
       ((g$x$11456$1CmlGO)
        (letrec* ((g$12358$11457$1CmlGO
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$12361$1CmlGO
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12360$11458$1CmlGO '#f)
                  (g$12359$11459$1CmlGO
                    (make-record-constructor-descriptor
                      g$12358$11457$1CmlGO
                      &condition-rcd
                      g$12360$11458$1CmlGO))
                  (g$12357$11460$1CmlGO (record-predicate g$12358$11457$1CmlGO))
                  (g$make-trace$11461$1CmlGO
                    (record-constructor g$12359$11459$1CmlGO))
                  (g$12356$11462$1CmlGO
                    (record-accessor g$12358$11457$1CmlGO '0))
                  (g$trace?$11463$1CmlGO
                    (condition-predicate g$12358$11457$1CmlGO))
                  (g$trace-form$11464$1CmlGO
                    (condition-accessor
                      g$12358$11457$1CmlGO
                      g$12356$11462$1CmlGO)))
          ((letrec ((g$f$11465$1CmlGO
                      (case-lambda
                        ((g$x$11466$1CmlGO)
                         (if (g$stx?$7897$1CmlGO g$x$11466$1CmlGO)
                           (apply
                             condition
                             (g$make-trace$11461$1CmlGO g$x$11466$1CmlGO)
                             (map g$f$11465$1CmlGO
                                  (g$stx-ae*$7902$1CmlGO g$x$11466$1CmlGO)))
                           (if (annotation? g$x$11466$1CmlGO)
                             (g$make-trace$11461$1CmlGO
                               (g$make-stx$7898$1CmlGO
                                 g$x$11466$1CmlGO
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$11465$1CmlGO)
           g$x$11456$1CmlGO)))))
   (g$syntax-violation*$8313$1CmlGO
     g$syntax-violation*$11773$1CmlGO
     (case-lambda
       ((g$who$11467$1CmlGO
          g$msg$11468$1CmlGO
          g$form$11469$1CmlGO
          g$condition-object$11470$1CmlGO)
        (begin
          (if (not (string? g$msg$11468$1CmlGO))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$11468$1CmlGO)
            (void))
          ((case-lambda
             ((g$who$11471$1CmlGO)
              (raise
                (condition
                  (if g$who$11471$1CmlGO
                    (g$make-who-condition$6420$1CmlGO g$who$11471$1CmlGO)
                    (condition))
                  (g$make-message-condition$6374$1CmlGO g$msg$11468$1CmlGO)
                  g$condition-object$11470$1CmlGO
                  (g$extract-position-condition$8308$1CmlGO g$form$11469$1CmlGO)
                  (g$extract-trace$8312$1CmlGO g$form$11469$1CmlGO)))))
           (if ((case-lambda
                  ((g$t$11472$1CmlGO)
                   (if g$t$11472$1CmlGO
                     g$t$11472$1CmlGO
                     (begin '#f (symbol? g$who$11467$1CmlGO)))))
                (string? g$who$11467$1CmlGO))
             g$who$11467$1CmlGO
             (if (not g$who$11467$1CmlGO)
               ((case-lambda
                  ((g$t$11473$1CmlGO)
                   ((case-lambda
                      ((g$ls/false$11474$1CmlGO)
                       (if (if g$ls/false$11474$1CmlGO
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$11475$1CmlGO)
                                    (g$id?$7925$1CmlGO g$id$11475$1CmlGO)))
                                 g$ls/false$11474$1CmlGO))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$11476$1CmlGO)
                              (g$syntax->datum$8317$1CmlGO g$id$11476$1CmlGO)))
                           g$ls/false$11474$1CmlGO)
                         ((case-lambda
                            ((g$t$11477$1CmlGO)
                             ((case-lambda
                                ((g$ls/false$11478$1CmlGO)
                                 (if (if g$ls/false$11478$1CmlGO
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$11479$1CmlGO
                                                g$rest$11480$1CmlGO)
                                              (g$id?$7925$1CmlGO
                                                g$id$11479$1CmlGO)))
                                           g$ls/false$11478$1CmlGO))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$11481$1CmlGO g$rest$11482$1CmlGO)
                                        (g$syntax->datum$8317$1CmlGO
                                          g$id$11481$1CmlGO)))
                                     g$ls/false$11478$1CmlGO)
                                   ((case-lambda
                                      ((g$t$11483$1CmlGO)
                                       ((case-lambda
                                          ((g$ls/false$11484$1CmlGO)
                                           (if g$ls/false$11484$1CmlGO
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$11484$1CmlGO)
                                             (g$syntax-violation$8314$1CmlGO
                                               '#f
                                               '"invalid syntax"
                                               g$t$11483$1CmlGO))))
                                        (g$syntax-dispatch$8203$1CmlGO
                                          g$t$11483$1CmlGO
                                          '_))))
                                    g$t$11477$1CmlGO))))
                              (g$syntax-dispatch$8203$1CmlGO
                                g$t$11477$1CmlGO
                                '(any . any)))))
                          g$t$11473$1CmlGO))))
                    (g$syntax-dispatch$8203$1CmlGO g$t$11473$1CmlGO 'any))))
                g$form$11469$1CmlGO)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$11467$1CmlGO))))))))
   (g$syntax-violation$8314$1CmlGO
     g$syntax-violation$11774$1CmlGO
     (case-lambda
       ((g$who$11485$1CmlGO g$msg$11486$1CmlGO g$form$11487$1CmlGO)
        (g$syntax-violation$8314$1CmlGO
          g$who$11485$1CmlGO
          g$msg$11486$1CmlGO
          g$form$11487$1CmlGO
          '#f))
       ((g$who$11488$1CmlGO
          g$msg$11489$1CmlGO
          g$form$11490$1CmlGO
          g$subform$11491$1CmlGO)
        (g$syntax-violation*$8313$1CmlGO
          g$who$11488$1CmlGO
          g$msg$11489$1CmlGO
          g$form$11490$1CmlGO
          (g$make-syntax-violation$6446$1CmlGO
            (g$syntax->datum$8317$1CmlGO g$form$11490$1CmlGO)
            (g$syntax->datum$8317$1CmlGO g$subform$11491$1CmlGO))))))
   (g$identifier?$8315$1CmlGO
     g$identifier?$11775$1CmlGO
     (case-lambda ((g$x$11492$1CmlGO) (g$id?$7925$1CmlGO g$x$11492$1CmlGO))))
   (g$datum->syntax$8316$1CmlGO
     g$datum->syntax$11776$1CmlGO
     (case-lambda
       ((g$id$11493$1CmlGO g$datum$11494$1CmlGO)
        (if (g$id?$7925$1CmlGO g$id$11493$1CmlGO)
          (g$datum->stx$7908$1CmlGO g$id$11493$1CmlGO g$datum$11494$1CmlGO)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$11493$1CmlGO)))))
   (g$syntax->datum$8317$1CmlGO
     g$syntax->datum$11777$1CmlGO
     (case-lambda
       ((g$x$11495$1CmlGO) (g$stx->datum$7936$1CmlGO g$x$11495$1CmlGO))))
   (g$compile-r6rs-top-level$8318$1CmlGO
     g$compile-r6rs-top-level$11778$1CmlGO
     (case-lambda
       ((g$x*$11496$1CmlGO)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$8263$1CmlGO g$x*$11496$1CmlGO)))
          (case-lambda
            ((g$lib*$11499$1CmlGO g$invoke-code$11500$1CmlGO)
             ((case-lambda
                ((g$invoke-code$11501$1CmlGO g$lib*$11502$1CmlGO)
                 (case-lambda
                   (()
                    (begin
                      (for-each
                        g$invoke-library$7740$1CmlGO
                        g$lib*$11502$1CmlGO)
                      (eval-core
                        (g$expanded->core$7439$1CmlGO
                          g$invoke-code$11501$1CmlGO)))))))
              g$invoke-code$11500$1CmlGO
              g$lib*$11499$1CmlGO)))))))
   (g$pre-compile-r6rs-top-level$8319$1CmlGO
     g$pre-compile-r6rs-top-level$11779$1CmlGO
     (case-lambda
       ((g$x*$11503$1CmlGO)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$8263$1CmlGO g$x*$11503$1CmlGO)))
          (case-lambda
            ((g$lib*$11506$1CmlGO g$invoke-code$11507$1CmlGO)
             ((case-lambda
                ((g$invoke-code$11508$1CmlGO g$lib*$11509$1CmlGO)
                 (begin
                   (for-each g$invoke-library$7740$1CmlGO g$lib*$11509$1CmlGO)
                   (compile-core
                     (g$expanded->core$7439$1CmlGO
                       g$invoke-code$11508$1CmlGO)))))
              g$invoke-code$11507$1CmlGO
              g$lib*$11506$1CmlGO)))))))
   (g$interaction-environment$8320$1CmlGO
     g$interaction-environment$11780$1CmlGO
     ((case-lambda
        ((g$the-env$11510$1CmlGO)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$11511$1CmlGO)
                (if g$t$11511$1CmlGO
                  g$t$11511$1CmlGO
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$11512$1CmlGO g$rib$11513$1CmlGO)
                        (begin
                          ((case-lambda
                             ((g$subst$11514$1CmlGO)
                              (begin
                                (g$set-rib-sym*!$7884$1CmlGO
                                  g$rib$11513$1CmlGO
                                  (map car g$subst$11514$1CmlGO))
                                (g$set-rib-mark**!$7885$1CmlGO
                                  g$rib$11513$1CmlGO
                                  (map (case-lambda
                                         ((g$x$11515$1CmlGO)
                                          g$top-mark*$7867$1CmlGO))
                                       g$subst$11514$1CmlGO))
                                (g$set-rib-label*!$7886$1CmlGO
                                  g$rib$11513$1CmlGO
                                  (map cdr g$subst$11514$1CmlGO)))))
                           (g$library-subst$7697$1CmlGO g$lib$11512$1CmlGO))
                          ((case-lambda
                             ((g$env$11516$1CmlGO)
                              (begin
                                (set! g$the-env$11510$1CmlGO g$env$11516$1CmlGO)
                                g$env$11516$1CmlGO)))
                           (g$make-interaction-env$8280$1CmlGO
                             g$rib$11513$1CmlGO
                             '()
                             '())))))
                     (g$find-library-by-name$7733$1CmlGO '(ironscheme))
                     (g$make-empty-rib$7888$1CmlGO))))))
             g$the-env$11510$1CmlGO)))))
      '#f))
   (g$top-level-context$8321$1CmlGO
     g$top-level-context$11781$1CmlGO
     (g$make-parameter$7193$1CmlGO '#f)))
  (g$current-library-expander$7730$1CmlGO g$library-expander$8298$1CmlGO))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$7436$1CmlGO
      (case-lambda
        ((g$x$11834$1CmlGO)
         ((case-lambda
            ((g$t$11835$1CmlGO)
             (if g$t$11835$1CmlGO (cdr g$t$11835$1CmlGO) '#f)))
          (g$assq$5658$1CmlGO
            g$x$11834$1CmlGO
            '((ellipsis-map . g$ellipsis-map$11668$1CmlGO)
              (ironscheme-build . g$ironscheme-build$11827$1CmlGO)
              (syntax-error . g$syntax-error$11771$1CmlGO)
              (syntax-dispatch . g$syntax-dispatch$11663$1CmlGO)
              (compile-system-libraries
                .
                g$compile-system-libraries$11829$1CmlGO)
              (compile->closure . g$compile->closure$11831$1CmlGO)
              (compile . g$compile$11830$1CmlGO)
              (load . g$load$11826$1CmlGO)
              (interaction-environment . g$interaction-environment$11780$1CmlGO)
              (string-ci>? . g$string-ci>?$6592$1CmlGO)
              (string-ci>=? . g$string-ci>=?$6594$1CmlGO)
              (string-ci=? . g$string-ci=?$6590$1CmlGO)
              (string-ci<? . g$string-ci<?$6591$1CmlGO)
              (string-ci<=? . g$string-ci<=?$6593$1CmlGO)
              (char-ci>? . g$char-ci>?$6597$1CmlGO)
              (char-ci>=? . g$char-ci>=?$6599$1CmlGO)
              (char-ci=? . g$char-ci=?$6595$1CmlGO)
              (char-ci<? . g$char-ci<?$6596$1CmlGO)
              (char-ci<=? . g$char-ci<=?$6598$1CmlGO)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$11601$1CmlGO)
              (variable-transformer? . g$variable-transformer?$11600$1CmlGO)
              (make-variable-transformer
                .
                g$make-variable-transformer$11599$1CmlGO)
              (identifier? . g$identifier?$11775$1CmlGO)
              (generate-temporaries . g$generate-temporaries$11764$1CmlGO)
              (free-identifier=? . g$free-identifier=?$11765$1CmlGO)
              (syntax->datum . g$syntax->datum$11777$1CmlGO)
              (datum->syntax . g$datum->syntax$11776$1CmlGO)
              (bound-identifier=? . g$bound-identifier=?$11766$1CmlGO)
              (delete-file . g$delete-file$6126$1CmlGO)
              (file-exists? . g$file-exists?$6125$1CmlGO)
              (list-sort . g$list-sort$6517$1CmlGO)
              (make-eqv-hashtable . g$make-eqv-hashtable$6107$1CmlGO)
              (make-eq-hashtable . g$make-eq-hashtable$6106$1CmlGO)
              (hashtable-update! . g$hashtable-update!$6113$1CmlGO)
              (hashtable-size . g$hashtable-size$6108$1CmlGO)
              (hashtable-set! . g$hashtable-set!$6110$1CmlGO)
              (hashtable-ref . g$hashtable-ref$6109$1CmlGO)
              (hashtable-delete! . g$hashtable-delete!$6111$1CmlGO)
              (hashtable-contains? . g$hashtable-contains?$6112$1CmlGO)
              (hashtable-clear! . g$hashtable-clear!$6114$1CmlGO)
              (call-with-output-file . g$call-with-output-file$6939$1CmlGO)
              (call-with-input-file . g$call-with-input-file$6938$1CmlGO)
              (with-output-to-file . g$with-output-to-file$6937$1CmlGO)
              (with-input-from-file . g$with-input-from-file$6936$1CmlGO)
              (port? . g$port?$6903$1CmlGO)
              (open-string-output-port . g$open-string-output-port$6902$1CmlGO)
              (make-i/o-write-error . g$make-i/o-write-error$6828$1CmlGO)
              (make-i/o-read-error . g$make-i/o-read-error$6822$1CmlGO)
              (make-i/o-port-error . g$make-i/o-port-error$6874$1CmlGO)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6834$1CmlGO)
              (make-i/o-filename-error . g$make-i/o-filename-error$6842$1CmlGO)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6850$1CmlGO)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6856$1CmlGO)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6868$1CmlGO)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6862$1CmlGO)
              (make-i/o-error . g$make-i/o-error$6816$1CmlGO)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6888$1CmlGO)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6882$1CmlGO)
              (i/o-write-error? . g$i/o-write-error?$6829$1CmlGO)
              (i/o-read-error? . g$i/o-read-error?$6823$1CmlGO)
              (i/o-port-error? . g$i/o-port-error?$6876$1CmlGO)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6836$1CmlGO)
              (i/o-error-position . g$i/o-error-position$6837$1CmlGO)
              (i/o-filename-error? . g$i/o-filename-error?$6844$1CmlGO)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6851$1CmlGO)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6857$1CmlGO)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6869$1CmlGO)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6863$1CmlGO)
              (i/o-error? . g$i/o-error?$6817$1CmlGO)
              (i/o-error-port . g$i/o-error-port$6877$1CmlGO)
              (i/o-error-filename . g$i/o-error-filename$6845$1CmlGO)
              (i/o-encoding-error? . g$i/o-encoding-error?$6890$1CmlGO)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6891$1CmlGO)
              (i/o-decoding-error? . g$i/o-decoding-error?$6883$1CmlGO)
              (scheme-report-environment
                .
                g$scheme-report-environment$11755$1CmlGO)
              (quotient . g$quotient$6484$1CmlGO)
              (null-environment . g$null-environment$11754$1CmlGO)
              (remainder . g$remainder$6485$1CmlGO)
              (modulo . g$modulo$6486$1CmlGO)
              (force . g$force$6488$1CmlGO)
              (command-line . g$command-line$11823$1CmlGO)
              (remove . g$remove$5673$1CmlGO)
              (remv . g$remv$5674$1CmlGO)
              (remp . g$remp$5656$1CmlGO)
              (remq . g$remq$5675$1CmlGO)
              (partition . g$partition$5655$1CmlGO)
              (memv . g$memv$5663$1CmlGO)
              (memq . g$memq$5662$1CmlGO)
              (memp . g$memp$5665$1CmlGO)
              (member . g$member$5664$1CmlGO)
              (exists . g$exists$5669$1CmlGO)
              (for-all . g$for-all$5668$1CmlGO)
              (fold-right . g$fold-right$5672$1CmlGO)
              (fold-left . g$fold-left$5671$1CmlGO)
              (find . g$find$5654$1CmlGO)
              (filter . g$filter$5657$1CmlGO)
              (cons* . g$cons*$5670$1CmlGO)
              (assv . g$assv$5659$1CmlGO)
              (assq . g$assq$5658$1CmlGO)
              (assp . g$assp$5661$1CmlGO)
              (assoc . g$assoc$5660$1CmlGO)
              (eval . g$eval$11757$1CmlGO)
              (environment . g$environment$11753$1CmlGO)
              (make-enumeration . g$make-enumeration$7070$1CmlGO)
              (enum-set=? . g$enum-set=?$7077$1CmlGO)
              (enum-set-universe . g$enum-set-universe$7071$1CmlGO)
              (enum-set-union . g$enum-set-union$7078$1CmlGO)
              (enum-set-subset? . g$enum-set-subset?$7076$1CmlGO)
              (enum-set-projection . g$enum-set-projection$7082$1CmlGO)
              (enum-set-member? . g$enum-set-member?$7075$1CmlGO)
              (enum-set-intersection . g$enum-set-intersection$7079$1CmlGO)
              (enum-set-indexer . g$enum-set-indexer$7072$1CmlGO)
              (enum-set-difference . g$enum-set-difference$7080$1CmlGO)
              (enum-set-constructor . g$enum-set-constructor$7073$1CmlGO)
              (enum-set-complement . g$enum-set-complement$7081$1CmlGO)
              (enum-set->list . g$enum-set->list$7074$1CmlGO)
              (who-condition? . g$who-condition?$6422$1CmlGO)
              (warning? . g$warning?$6383$1CmlGO)
              (violation? . g$violation?$6401$1CmlGO)
              (undefined-violation? . g$undefined-violation?$6457$1CmlGO)
              (syntax-violation? . g$syntax-violation?$6449$1CmlGO)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$6451$1CmlGO)
              (syntax-violation-form . g$syntax-violation-form$6450$1CmlGO)
              (syntax-violation . g$syntax-violation$11774$1CmlGO)
              (serious-condition? . g$serious-condition?$6389$1CmlGO)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$6429$1CmlGO)
              (message-condition? . g$message-condition?$6376$1CmlGO)
              (make-who-condition . g$make-who-condition$6420$1CmlGO)
              (make-warning . g$make-warning$6382$1CmlGO)
              (make-violation . g$make-violation$6400$1CmlGO)
              (make-undefined-violation
                .
                g$make-undefined-violation$6456$1CmlGO)
              (make-syntax-violation . g$make-syntax-violation$6446$1CmlGO)
              (make-serious-condition . g$make-serious-condition$6388$1CmlGO)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$6428$1CmlGO)
              (make-message-condition . g$make-message-condition$6374$1CmlGO)
              (make-lexical-violation . g$make-lexical-violation$6440$1CmlGO)
              (make-irritants-condition
                .
                g$make-irritants-condition$6412$1CmlGO)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$6434$1CmlGO)
              (make-error . g$make-error$6394$1CmlGO)
              (make-assertion-violation
                .
                g$make-assertion-violation$6406$1CmlGO)
              (lexical-violation? . g$lexical-violation?$6441$1CmlGO)
              (irritants-condition? . g$irritants-condition?$6414$1CmlGO)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$6435$1CmlGO)
              (error? . g$error?$6395$1CmlGO)
              (condition-who . g$condition-who$6423$1CmlGO)
              (condition-message . g$condition-message$6377$1CmlGO)
              (condition-irritants . g$condition-irritants$6415$1CmlGO)
              (assertion-violation? . g$assertion-violation?$6407$1CmlGO)
              (native-endianness . g$native-endianness$6239$1CmlGO)
              (bytevector-u64-set! . g$bytevector-u64-set!$6260$1CmlGO)
              (bytevector-u64-ref . g$bytevector-u64-ref$6256$1CmlGO)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$6262$1CmlGO)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$6258$1CmlGO)
              (bytevector-u32-set! . g$bytevector-u32-set!$6252$1CmlGO)
              (bytevector-u32-ref . g$bytevector-u32-ref$6248$1CmlGO)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$6254$1CmlGO)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$6250$1CmlGO)
              (bytevector-u16-set! . g$bytevector-u16-set!$6244$1CmlGO)
              (bytevector-u16-ref . g$bytevector-u16-ref$6240$1CmlGO)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$6246$1CmlGO)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$6242$1CmlGO)
              (bytevector-s64-set! . g$bytevector-s64-set!$6261$1CmlGO)
              (bytevector-s64-ref . g$bytevector-s64-ref$6257$1CmlGO)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$6263$1CmlGO)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$6259$1CmlGO)
              (bytevector-s32-set! . g$bytevector-s32-set!$6253$1CmlGO)
              (bytevector-s32-ref . g$bytevector-s32-ref$6249$1CmlGO)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$6255$1CmlGO)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$6251$1CmlGO)
              (bytevector-s16-set! . g$bytevector-s16-set!$6245$1CmlGO)
              (bytevector-s16-ref . g$bytevector-s16-ref$6241$1CmlGO)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$6247$1CmlGO)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$6243$1CmlGO)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$6266$1CmlGO)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$6264$1CmlGO)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$6267$1CmlGO)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$6265$1CmlGO)
              (no-nans-violation? . g$no-nans-violation?$6731$1CmlGO)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$6725$1CmlGO)
              (make-no-nans-violation . g$make-no-nans-violation$6730$1CmlGO)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6724$1CmlGO)
              (fxrotate-bit-field . g$fxrotate-bit-field$6707$1CmlGO)
              (fxif . g$fxif$6701$1CmlGO)
              (fxcopy-bit-field . g$fxcopy-bit-field$6704$1CmlGO)
              (fxcopy-bit . g$fxcopy-bit$6702$1CmlGO)
              (fxbit-field . g$fxbit-field$6703$1CmlGO)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$6706$1CmlGO)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6705$1CmlGO)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$6653$1CmlGO)
              (bitwise-if . g$bitwise-if$6647$1CmlGO)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6650$1CmlGO)
              (bitwise-copy-bit . g$bitwise-copy-bit$6648$1CmlGO)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6652$1CmlGO)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6651$1CmlGO)
              (symbol=? . g$symbol=?$5864$1CmlGO)
              (string>? . g$string>?$5861$1CmlGO)
              (string>=? . g$string>=?$5863$1CmlGO)
              (string=? . g$string=?$5859$1CmlGO)
              (string<? . g$string<?$5860$1CmlGO)
              (string<=? . g$string<=?$5862$1CmlGO)
              (rationalize . g$rationalize$5871$1CmlGO)
              (char>? . g$char>?$5868$1CmlGO)
              (char>=? . g$char>=?$5870$1CmlGO)
              (char=? . g$char=?$5866$1CmlGO)
              (char<? . g$char<?$5867$1CmlGO)
              (char<=? . g$char<=?$5869$1CmlGO)
              (cddddr . g$cddddr$5858$1CmlGO)
              (cdddar . g$cdddar$5857$1CmlGO)
              (cddadr . g$cddadr$5856$1CmlGO)
              (cddaar . g$cddaar$5855$1CmlGO)
              (cdaddr . g$cdaddr$5854$1CmlGO)
              (cdadar . g$cdadar$5853$1CmlGO)
              (cdaadr . g$cdaadr$5852$1CmlGO)
              (cdaaar . g$cdaaar$5851$1CmlGO)
              (cadddr . g$cadddr$5850$1CmlGO)
              (caddar . g$caddar$5849$1CmlGO)
              (cadadr . g$cadadr$5848$1CmlGO)
              (cadaar . g$cadaar$5847$1CmlGO)
              (caaddr . g$caaddr$5846$1CmlGO)
              (caadar . g$caadar$5845$1CmlGO)
              (caaadr . g$caaadr$5844$1CmlGO)
              (caaaar . g$caaaar$5843$1CmlGO)
              (cdddr . g$cdddr$5842$1CmlGO)
              (cddar . g$cddar$5841$1CmlGO)
              (cdadr . g$cdadr$5840$1CmlGO)
              (cdaar . g$cdaar$5839$1CmlGO)
              (caddr . g$caddr$5838$1CmlGO)
              (cadar . g$cadar$5837$1CmlGO)
              (caadr . g$caadr$5836$1CmlGO)
              (caaar . g$caaar$5835$1CmlGO)
              (cddr . g$cddr$5834$1CmlGO)
              (cdar . g$cdar$5833$1CmlGO)
              (cadr . g$cadr$5832$1CmlGO)
              (caar . g$caar$5831$1CmlGO)
              (boolean=? . g$boolean=?$5865$1CmlGO)
              (enum-set? . g$enum?$7051$1CmlGO)
              (make-promise . g$make-promise$6487$1CmlGO)
              (load/args . g$load/args$11825$1CmlGO)
              (printf . g$printf$7106$1CmlGO)
              (fprintf . g$fprintf$7107$1CmlGO)
              (format . g$format$7108$1CmlGO)
              (trace-printer . g$trace-printer$11822$1CmlGO)
              (make-traced-macro . g$make-traced-macro$7112$1CmlGO)
              (assertion-error . g$assertion-error$11770$1CmlGO)
              (make-parameter . g$make-parameter$7193$1CmlGO)
              (environment-bindings . g$environment-bindings$11749$1CmlGO)
              (environment-symbols . g$environment-symbols$11752$1CmlGO)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11748$1CmlGO)
              (library-path . g$library-path$7722$1CmlGO)))))))
    (g$install-library$7738$1CmlGO
      'g$13085$1CmlGO
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$13022$1CmlGO)
        (cosh . g$13021$1CmlGO)
        (sinh . g$13020$1CmlGO)
        (make-guid . g$13019$1CmlGO)
        (unspecified? . g$13018$1CmlGO)
        (make-trace . g$13017$1CmlGO)
        (make-list . g$13016$1CmlGO)
        (last-pair . g$13015$1CmlGO)
        (load-r5rs . g$13014$1CmlGO)
        (license . g$13013$1CmlGO)
        (stacktrace . g$13012$1CmlGO)
        (ironscheme-build . g$12430$1CmlGO)
        (set-symbol-value! . g$12998$1CmlGO)
        (symbol-value . g$12997$1CmlGO)
        (ungensym . g$12996$1CmlGO)
        (gensym . g$12995$1CmlGO)
        (void . g$12994$1CmlGO)
        (compile-system-libraries . g$12432$1CmlGO)
        (compile->closure . g$12434$1CmlGO)
        (compile . g$12433$1CmlGO)
        (load . g$12429$1CmlGO)
        (interaction-environment . g$9481$1CmlGO)
        (string-upcase . g$12990$1CmlGO)
        (string-titlecase . g$12989$1CmlGO)
        (string-normalize-nfkd . g$12988$1CmlGO)
        (string-normalize-nfkc . g$12987$1CmlGO)
        (string-normalize-nfd . g$12986$1CmlGO)
        (string-normalize-nfc . g$12985$1CmlGO)
        (string-foldcase . g$12984$1CmlGO)
        (string-downcase . g$12983$1CmlGO)
        (string-ci>? . g$7590$1CmlGO)
        (string-ci>=? . g$7592$1CmlGO)
        (string-ci=? . g$7588$1CmlGO)
        (string-ci<? . g$7589$1CmlGO)
        (string-ci<=? . g$7591$1CmlGO)
        (char-whitespace? . g$12982$1CmlGO)
        (char-upper-case? . g$12981$1CmlGO)
        (char-title-case? . g$12980$1CmlGO)
        (char-numeric? . g$12979$1CmlGO)
        (char-lower-case? . g$12978$1CmlGO)
        (char-general-category . g$12977$1CmlGO)
        (char-upcase . g$12976$1CmlGO)
        (char-titlecase . g$12975$1CmlGO)
        (char-foldcase . g$12974$1CmlGO)
        (char-downcase . g$12973$1CmlGO)
        (char-ci>? . g$7629$1CmlGO)
        (char-ci>=? . g$7631$1CmlGO)
        (char-ci=? . g$7627$1CmlGO)
        (char-ci<? . g$7628$1CmlGO)
        (char-ci<=? . g$7630$1CmlGO)
        (char-alphabetic? . g$12972$1CmlGO)
        (variable-transformer-procedure . g$9080$1CmlGO)
        (variable-transformer? . g$9079$1CmlGO)
        (make-variable-transformer . g$9078$1CmlGO)
        (identifier? . g$9476$1CmlGO)
        (generate-temporaries . g$9465$1CmlGO)
        (free-identifier=? . g$9466$1CmlGO)
        (syntax->datum . g$9478$1CmlGO)
        (datum->syntax . g$9477$1CmlGO)
        (bound-identifier=? . g$9467$1CmlGO)
        (record-type-descriptor? . g$12971$1CmlGO)
        (record-predicate . g$12970$1CmlGO)
        (record-mutator . g$12969$1CmlGO)
        (record-constructor . g$12968$1CmlGO)
        (record-accessor . g$12967$1CmlGO)
        (make-record-type-descriptor . g$12966$1CmlGO)
        (make-record-constructor-descriptor . g$12965$1CmlGO)
        (record? . g$12964$1CmlGO)
        (record-type-uid . g$12963$1CmlGO)
        (record-type-sealed? . g$12962$1CmlGO)
        (record-type-parent . g$12961$1CmlGO)
        (record-type-opaque? . g$12960$1CmlGO)
        (record-type-name . g$12959$1CmlGO)
        (record-type-generative? . g$12958$1CmlGO)
        (record-type-field-names . g$12957$1CmlGO)
        (record-rtd . g$12956$1CmlGO)
        (record-field-mutable? . g$12955$1CmlGO)
        (delete-file . g$7165$1CmlGO)
        (file-exists? . g$7164$1CmlGO)
        (vector-sort! . g$12954$1CmlGO)
        (vector-sort . g$12953$1CmlGO)
        (list-sort . g$7528$1CmlGO)
        (symbol-hash . g$12952$1CmlGO)
        (string-ci-hash . g$12951$1CmlGO)
        (string-hash . g$12950$1CmlGO)
        (equal-hash . g$12949$1CmlGO)
        (hashtable-equivalence-function . g$12948$1CmlGO)
        (make-hashtable . g$12947$1CmlGO)
        (hashtable-hash-function . g$12946$1CmlGO)
        (make-eqv-hashtable . g$7132$1CmlGO)
        (make-eq-hashtable . g$7131$1CmlGO)
        (hashtable? . g$12945$1CmlGO)
        (hashtable-update! . g$7138$1CmlGO)
        (hashtable-size . g$7133$1CmlGO)
        (hashtable-set! . g$7135$1CmlGO)
        (hashtable-ref . g$7134$1CmlGO)
        (hashtable-mutable? . g$12944$1CmlGO)
        (hashtable-keys . g$12943$1CmlGO)
        (hashtable-entries . g$12942$1CmlGO)
        (hashtable-delete! . g$7136$1CmlGO)
        (hashtable-copy . g$12941$1CmlGO)
        (hashtable-contains? . g$7137$1CmlGO)
        (hashtable-clear! . g$7139$1CmlGO)
        (call-with-output-file . g$8018$1CmlGO)
        (call-with-input-file . g$8017$1CmlGO)
        (write-char . g$12940$1CmlGO)
        (write . g$12939$1CmlGO)
        (with-output-to-file . g$8016$1CmlGO)
        (with-input-from-file . g$8015$1CmlGO)
        (read-char . g$12938$1CmlGO)
        (read . g$12937$1CmlGO)
        (peek-char . g$12936$1CmlGO)
        (open-output-file . g$12935$1CmlGO)
        (open-input-file . g$12934$1CmlGO)
        (newline . g$12933$1CmlGO)
        (display . g$12932$1CmlGO)
        (close-output-port . g$12931$1CmlGO)
        (close-input-port . g$12930$1CmlGO)
        (eof-object? . g$12929$1CmlGO)
        (eof-object . g$12928$1CmlGO)
        (current-error-port . g$12927$1CmlGO)
        (current-output-port . g$12926$1CmlGO)
        (current-input-port . g$12925$1CmlGO)
        (output-port? . g$12924$1CmlGO)
        (input-port? . g$12923$1CmlGO)
        (utf-8-codec . g$12922$1CmlGO)
        (utf-16-codec . g$12921$1CmlGO)
        (transcoder-error-handling-mode . g$12920$1CmlGO)
        (transcoder-eol-style . g$12919$1CmlGO)
        (transcoder-codec . g$12918$1CmlGO)
        (transcoded-port . g$12917$1CmlGO)
        (textual-port? . g$12916$1CmlGO)
        (string->bytevector . g$12915$1CmlGO)
        (standard-output-port . g$12914$1CmlGO)
        (standard-input-port . g$12913$1CmlGO)
        (standard-error-port . g$12912$1CmlGO)
        (set-port-position! . g$12911$1CmlGO)
        (put-u8 . g$12910$1CmlGO)
        (put-string . g$12909$1CmlGO)
        (put-datum . g$12908$1CmlGO)
        (put-char . g$12907$1CmlGO)
        (put-bytevector . g$12906$1CmlGO)
        (port? . g$7994$1CmlGO)
        (port-transcoder . g$12905$1CmlGO)
        (port-position . g$12904$1CmlGO)
        (port-has-set-port-position!? . g$12903$1CmlGO)
        (port-has-port-position? . g$12902$1CmlGO)
        (port-eof? . g$12901$1CmlGO)
        (output-port-buffer-mode . g$12900$1CmlGO)
        (open-string-output-port . g$7993$1CmlGO)
        (open-string-input-port . g$12899$1CmlGO)
        (open-file-output-port . g$12898$1CmlGO)
        (open-file-input/output-port . g$12897$1CmlGO)
        (open-file-input-port . g$12896$1CmlGO)
        (open-bytevector-output-port . g$12895$1CmlGO)
        (open-bytevector-input-port . g$12894$1CmlGO)
        (native-transcoder . g$12893$1CmlGO)
        (native-eol-style . g$12892$1CmlGO)
        (make-transcoder . g$12891$1CmlGO)
        (latin-1-codec . g$12890$1CmlGO)
        (make-i/o-write-error . g$7850$1CmlGO)
        (make-i/o-read-error . g$7836$1CmlGO)
        (make-i/o-port-error . g$7955$1CmlGO)
        (make-i/o-invalid-position-error . g$7865$1CmlGO)
        (make-i/o-filename-error . g$7882$1CmlGO)
        (make-i/o-file-protection-error . g$7898$1CmlGO)
        (make-i/o-file-is-read-only-error . g$7912$1CmlGO)
        (make-i/o-file-does-not-exist-error . g$7940$1CmlGO)
        (make-i/o-file-already-exists-error . g$7926$1CmlGO)
        (make-i/o-error . g$7822$1CmlGO)
        (make-i/o-encoding-error . g$7986$1CmlGO)
        (make-i/o-decoding-error . g$7971$1CmlGO)
        (make-custom-textual-output-port . g$12889$1CmlGO)
        (make-custom-textual-input/output-port . g$12888$1CmlGO)
        (make-custom-textual-input-port . g$12887$1CmlGO)
        (make-custom-binary-output-port . g$12886$1CmlGO)
        (make-custom-binary-input/output-port . g$12885$1CmlGO)
        (make-custom-binary-input-port . g$12884$1CmlGO)
        (make-bytevector . g$12883$1CmlGO)
        (lookahead-u8 . g$12882$1CmlGO)
        (lookahead-char . g$12881$1CmlGO)
        (i/o-write-error? . g$7851$1CmlGO)
        (i/o-read-error? . g$7837$1CmlGO)
        (i/o-port-error? . g$7957$1CmlGO)
        (i/o-invalid-position-error? . g$7867$1CmlGO)
        (i/o-error-position . g$7868$1CmlGO)
        (i/o-filename-error? . g$7884$1CmlGO)
        (i/o-file-protection-error? . g$7899$1CmlGO)
        (i/o-file-is-read-only-error? . g$7913$1CmlGO)
        (i/o-file-does-not-exist-error? . g$7941$1CmlGO)
        (i/o-file-already-exists-error? . g$7927$1CmlGO)
        (i/o-error? . g$7823$1CmlGO)
        (i/o-error-port . g$7958$1CmlGO)
        (i/o-error-filename . g$7885$1CmlGO)
        (i/o-encoding-error? . g$7988$1CmlGO)
        (i/o-encoding-error-char . g$7989$1CmlGO)
        (i/o-decoding-error? . g$7972$1CmlGO)
        (get-u8 . g$12880$1CmlGO)
        (get-string-n! . g$12879$1CmlGO)
        (get-string-n . g$12878$1CmlGO)
        (get-string-all . g$12877$1CmlGO)
        (get-line . g$12876$1CmlGO)
        (get-datum . g$12875$1CmlGO)
        (get-char . g$12874$1CmlGO)
        (get-bytevector-some . g$12873$1CmlGO)
        (get-bytevector-n! . g$12872$1CmlGO)
        (get-bytevector-n . g$12871$1CmlGO)
        (get-bytevector-all . g$12870$1CmlGO)
        (flush-output-port . g$12869$1CmlGO)
        (close-port . g$12868$1CmlGO)
        (call-with-string-output-port . g$12867$1CmlGO)
        (call-with-port . g$12866$1CmlGO)
        (call-with-bytevector-output-port . g$12865$1CmlGO)
        (bytevector->string . g$12864$1CmlGO)
        (buffer-mode? . g$12863$1CmlGO)
        (binary-port? . g$12862$1CmlGO)
        (scheme-report-environment . g$9456$1CmlGO)
        (quotient . g$7508$1CmlGO)
        (null-environment . g$9455$1CmlGO)
        (remainder . g$7509$1CmlGO)
        (modulo . g$7510$1CmlGO)
        (inexact->exact . g$12861$1CmlGO)
        (force . g$7512$1CmlGO)
        (exact->inexact . g$12860$1CmlGO)
        (exit . g$12859$1CmlGO)
        (command-line . g$12426$1CmlGO)
        (string-fill! . g$12858$1CmlGO)
        (string-set! . g$12857$1CmlGO)
        (set-cdr! . g$12856$1CmlGO)
        (set-car! . g$12855$1CmlGO)
        (remove . g$6528$1CmlGO)
        (remv . g$6529$1CmlGO)
        (remp . g$6511$1CmlGO)
        (remq . g$6530$1CmlGO)
        (partition . g$6510$1CmlGO)
        (memv . g$6518$1CmlGO)
        (memq . g$6517$1CmlGO)
        (memp . g$6520$1CmlGO)
        (member . g$6519$1CmlGO)
        (exists . g$6524$1CmlGO)
        (for-all . g$6523$1CmlGO)
        (fold-right . g$6527$1CmlGO)
        (fold-left . g$6526$1CmlGO)
        (find . g$6509$1CmlGO)
        (filter . g$6512$1CmlGO)
        (cons* . g$6525$1CmlGO)
        (assv . g$6514$1CmlGO)
        (assq . g$6513$1CmlGO)
        (assp . g$6516$1CmlGO)
        (assoc . g$6515$1CmlGO)
        (with-exception-handler . g$12854$1CmlGO)
        (raise-continuable . g$12853$1CmlGO)
        (raise . g$12852$1CmlGO)
        (eval . g$9458$1CmlGO)
        (environment . g$9454$1CmlGO)
        (make-enumeration . g$8076$1CmlGO)
        (enum-set=? . g$8083$1CmlGO)
        (enum-set-universe . g$8077$1CmlGO)
        (enum-set-union . g$8084$1CmlGO)
        (enum-set-subset? . g$8082$1CmlGO)
        (enum-set-projection . g$8088$1CmlGO)
        (enum-set-member? . g$8081$1CmlGO)
        (enum-set-intersection . g$8085$1CmlGO)
        (enum-set-indexer . g$8078$1CmlGO)
        (enum-set-difference . g$8086$1CmlGO)
        (enum-set-constructor . g$8079$1CmlGO)
        (enum-set-complement . g$8087$1CmlGO)
        (enum-set->list . g$8080$1CmlGO)
        (who-condition? . g$7419$1CmlGO)
        (warning? . g$7330$1CmlGO)
        (violation? . g$7372$1CmlGO)
        (undefined-violation? . g$7496$1CmlGO)
        (syntax-violation? . g$7480$1CmlGO)
        (syntax-violation-subform . g$7482$1CmlGO)
        (syntax-violation-form . g$7481$1CmlGO)
        (syntax-violation . g$9475$1CmlGO)
        (simple-conditions . g$12851$1CmlGO)
        (serious-condition? . g$7344$1CmlGO)
        (non-continuable-violation? . g$7434$1CmlGO)
        (message-condition? . g$7315$1CmlGO)
        (make-who-condition . g$7417$1CmlGO)
        (make-warning . g$7329$1CmlGO)
        (make-violation . g$7371$1CmlGO)
        (make-undefined-violation . g$7495$1CmlGO)
        (make-syntax-violation . g$7477$1CmlGO)
        (make-serious-condition . g$7343$1CmlGO)
        (make-non-continuable-violation . g$7433$1CmlGO)
        (make-message-condition . g$7313$1CmlGO)
        (make-lexical-violation . g$7461$1CmlGO)
        (make-irritants-condition . g$7400$1CmlGO)
        (make-implementation-restriction-violation . g$7447$1CmlGO)
        (make-error . g$7357$1CmlGO)
        (make-assertion-violation . g$7385$1CmlGO)
        (lexical-violation? . g$7462$1CmlGO)
        (irritants-condition? . g$7402$1CmlGO)
        (implementation-restriction-violation? . g$7448$1CmlGO)
        (error? . g$7358$1CmlGO)
        (condition-who . g$7420$1CmlGO)
        (condition-predicate . g$12850$1CmlGO)
        (condition-message . g$7316$1CmlGO)
        (condition-irritants . g$7403$1CmlGO)
        (condition-accessor . g$12849$1CmlGO)
        (condition . g$12848$1CmlGO)
        (assertion-violation? . g$7386$1CmlGO)
        (condition? . g$12847$1CmlGO)
        (utf32->string . g$12846$1CmlGO)
        (utf16->string . g$12845$1CmlGO)
        (utf8->string . g$12844$1CmlGO)
        (uint-list->bytevector . g$12843$1CmlGO)
        (u8-list->bytevector . g$12842$1CmlGO)
        (string->utf8 . g$12841$1CmlGO)
        (string->utf32 . g$12840$1CmlGO)
        (string->utf16 . g$12839$1CmlGO)
        (sint-list->bytevector . g$12838$1CmlGO)
        (native-endianness . g$7171$1CmlGO)
        (bytevector? . g$12837$1CmlGO)
        (bytevector=? . g$12836$1CmlGO)
        (bytevector-uint-set! . g$12835$1CmlGO)
        (bytevector-uint-ref . g$12834$1CmlGO)
        (bytevector-u8-set! . g$12833$1CmlGO)
        (bytevector-u8-ref . g$12832$1CmlGO)
        (bytevector-u64-set! . g$7192$1CmlGO)
        (bytevector-u64-ref . g$7188$1CmlGO)
        (bytevector-u64-native-set! . g$7194$1CmlGO)
        (bytevector-u64-native-ref . g$7190$1CmlGO)
        (bytevector-u32-set! . g$7184$1CmlGO)
        (bytevector-u32-ref . g$7180$1CmlGO)
        (bytevector-u32-native-set! . g$7186$1CmlGO)
        (bytevector-u32-native-ref . g$7182$1CmlGO)
        (bytevector-u16-set! . g$7176$1CmlGO)
        (bytevector-u16-ref . g$7172$1CmlGO)
        (bytevector-u16-native-set! . g$7178$1CmlGO)
        (bytevector-u16-native-ref . g$7174$1CmlGO)
        (bytevector-sint-set! . g$12831$1CmlGO)
        (bytevector-sint-ref . g$12830$1CmlGO)
        (bytevector-s8-set! . g$12829$1CmlGO)
        (bytevector-s8-ref . g$12828$1CmlGO)
        (bytevector-s64-set! . g$7193$1CmlGO)
        (bytevector-s64-ref . g$7189$1CmlGO)
        (bytevector-s64-native-set! . g$7195$1CmlGO)
        (bytevector-s64-native-ref . g$7191$1CmlGO)
        (bytevector-s32-set! . g$7185$1CmlGO)
        (bytevector-s32-ref . g$7181$1CmlGO)
        (bytevector-s32-native-set! . g$7187$1CmlGO)
        (bytevector-s32-native-ref . g$7183$1CmlGO)
        (bytevector-s16-set! . g$7177$1CmlGO)
        (bytevector-s16-ref . g$7173$1CmlGO)
        (bytevector-s16-native-set! . g$7179$1CmlGO)
        (bytevector-s16-native-ref . g$7175$1CmlGO)
        (bytevector-length . g$12827$1CmlGO)
        (bytevector-ieee-single-set! . g$12826$1CmlGO)
        (bytevector-ieee-single-ref . g$12825$1CmlGO)
        (bytevector-ieee-single-native-set! . g$7198$1CmlGO)
        (bytevector-ieee-single-native-ref . g$7196$1CmlGO)
        (bytevector-ieee-double-set! . g$12824$1CmlGO)
        (bytevector-ieee-double-ref . g$12823$1CmlGO)
        (bytevector-ieee-double-native-set! . g$7199$1CmlGO)
        (bytevector-ieee-double-native-ref . g$7197$1CmlGO)
        (bytevector-fill! . g$12822$1CmlGO)
        (bytevector-copy! . g$12821$1CmlGO)
        (bytevector-copy . g$12820$1CmlGO)
        (bytevector->uint-list . g$12819$1CmlGO)
        (bytevector->u8-list . g$12818$1CmlGO)
        (bytevector->sint-list . g$12817$1CmlGO)
        (no-nans-violation? . g$7808$1CmlGO)
        (no-infinities-violation? . g$7794$1CmlGO)
        (make-no-nans-violation . g$7807$1CmlGO)
        (make-no-infinities-violation . g$7793$1CmlGO)
        (real->flonum . g$12816$1CmlGO)
        (flzero? . g$12815$1CmlGO)
        (fltruncate . g$12814$1CmlGO)
        (fltan . g$12813$1CmlGO)
        (flsqrt . g$12812$1CmlGO)
        (flsin . g$12811$1CmlGO)
        (flround . g$12810$1CmlGO)
        (flpositive? . g$12809$1CmlGO)
        (flonum? . g$12808$1CmlGO)
        (flodd? . g$12807$1CmlGO)
        (flnumerator . g$12806$1CmlGO)
        (flnegative? . g$12805$1CmlGO)
        (flnan? . g$12804$1CmlGO)
        (flmod0 . g$12803$1CmlGO)
        (flmod . g$12802$1CmlGO)
        (flmin . g$12801$1CmlGO)
        (flmax . g$12800$1CmlGO)
        (fllog . g$12799$1CmlGO)
        (flinteger? . g$12798$1CmlGO)
        (flinfinite? . g$12797$1CmlGO)
        (flfloor . g$12796$1CmlGO)
        (flfinite? . g$12795$1CmlGO)
        (flexpt . g$12794$1CmlGO)
        (flexp . g$12793$1CmlGO)
        (fleven? . g$12792$1CmlGO)
        (fldiv0-and-mod0 . g$12791$1CmlGO)
        (fldiv0 . g$12790$1CmlGO)
        (fldiv-and-mod . g$12789$1CmlGO)
        (fldiv . g$12788$1CmlGO)
        (fldenominator . g$12787$1CmlGO)
        (flcos . g$12786$1CmlGO)
        (flceiling . g$12785$1CmlGO)
        (flatan . g$12784$1CmlGO)
        (flasin . g$12783$1CmlGO)
        (flacos . g$12782$1CmlGO)
        (flabs . g$12781$1CmlGO)
        (fl>? . g$12780$1CmlGO)
        (fl>=? . g$12779$1CmlGO)
        (fl=? . g$12778$1CmlGO)
        (fl<? . g$12777$1CmlGO)
        (fl<=? . g$12776$1CmlGO)
        (fl/ . g$12775$1CmlGO)
        (fl- . g$12774$1CmlGO)
        (fl+ . g$12773$1CmlGO)
        (fl* . g$12772$1CmlGO)
        (fixnum->flonum . g$12771$1CmlGO)
        (fxzero? . g$12770$1CmlGO)
        (fxxor . g$12769$1CmlGO)
        (fxrotate-bit-field . g$7739$1CmlGO)
        (fxreverse-bit-field . g$12768$1CmlGO)
        (fxpositive? . g$12767$1CmlGO)
        (fxodd? . g$12766$1CmlGO)
        (fxnot . g$12765$1CmlGO)
        (fxnegative? . g$12764$1CmlGO)
        (fxmod0 . g$12763$1CmlGO)
        (fxmod . g$12762$1CmlGO)
        (fxmin . g$12761$1CmlGO)
        (fxmax . g$12760$1CmlGO)
        (fxlength . g$12759$1CmlGO)
        (fxior . g$12758$1CmlGO)
        (fxif . g$7733$1CmlGO)
        (fxfirst-bit-set . g$12757$1CmlGO)
        (fxeven? . g$12756$1CmlGO)
        (fxdiv0-and-mod0 . g$12755$1CmlGO)
        (fxdiv0 . g$12754$1CmlGO)
        (fxdiv-and-mod . g$12753$1CmlGO)
        (fxdiv . g$12752$1CmlGO)
        (fxcopy-bit-field . g$7736$1CmlGO)
        (fxcopy-bit . g$7734$1CmlGO)
        (fxbit-set? . g$12751$1CmlGO)
        (fxbit-field . g$7735$1CmlGO)
        (fxbit-count . g$12750$1CmlGO)
        (fxarithmetic-shift-right . g$7738$1CmlGO)
        (fxarithmetic-shift-left . g$7737$1CmlGO)
        (fxarithmetic-shift . g$12749$1CmlGO)
        (fxand . g$12748$1CmlGO)
        (fx>? . g$12747$1CmlGO)
        (fx>=? . g$12746$1CmlGO)
        (fx=? . g$12745$1CmlGO)
        (fx<? . g$12744$1CmlGO)
        (fx<=? . g$12743$1CmlGO)
        (fx-/carry . g$12742$1CmlGO)
        (fx- . g$12741$1CmlGO)
        (fx+/carry . g$12740$1CmlGO)
        (fx+ . g$12739$1CmlGO)
        (fx*/carry . g$12738$1CmlGO)
        (fx* . g$12737$1CmlGO)
        (greatest-fixnum . g$12736$1CmlGO)
        (least-fixnum . g$12735$1CmlGO)
        (fixnum-width . g$12734$1CmlGO)
        (fixnum? . g$12733$1CmlGO)
        (bitwise-rotate-bit-field . g$7691$1CmlGO)
        (bitwise-reverse-bit-field . g$12732$1CmlGO)
        (bitwise-length . g$12731$1CmlGO)
        (bitwise-if . g$7685$1CmlGO)
        (bitwise-first-bit-set . g$12730$1CmlGO)
        (bitwise-copy-bit-field . g$7688$1CmlGO)
        (bitwise-copy-bit . g$7686$1CmlGO)
        (bitwise-bit-set? . g$12729$1CmlGO)
        (bitwise-bit-field . g$12728$1CmlGO)
        (bitwise-bit-count . g$12727$1CmlGO)
        (bitwise-xor . g$12726$1CmlGO)
        (bitwise-ior . g$12725$1CmlGO)
        (bitwise-and . g$12724$1CmlGO)
        (bitwise-not . g$12723$1CmlGO)
        (bitwise-arithmetic-shift-right . g$7690$1CmlGO)
        (bitwise-arithmetic-shift-left . g$7689$1CmlGO)
        (bitwise-arithmetic-shift . g$12722$1CmlGO)
        (zero? . g$12721$1CmlGO)
        (vector? . g$12720$1CmlGO)
        (vector-set! . g$12719$1CmlGO)
        (vector-ref . g$12718$1CmlGO)
        (vector-map . g$12717$1CmlGO)
        (vector-length . g$12716$1CmlGO)
        (vector-for-each . g$12715$1CmlGO)
        (vector-fill! . g$12714$1CmlGO)
        (vector->list . g$12713$1CmlGO)
        (vector . g$12712$1CmlGO)
        (values . g$12711$1CmlGO)
        (truncate . g$12710$1CmlGO)
        (tan . g$12709$1CmlGO)
        (symbol? . g$12708$1CmlGO)
        (symbol=? . g$6680$1CmlGO)
        (symbol->string . g$12707$1CmlGO)
        (substring . g$12706$1CmlGO)
        (string? . g$12705$1CmlGO)
        (string>? . g$6677$1CmlGO)
        (string>=? . g$6679$1CmlGO)
        (string=? . g$6675$1CmlGO)
        (string<? . g$6676$1CmlGO)
        (string<=? . g$6678$1CmlGO)
        (string-ref . g$12704$1CmlGO)
        (string-length . g$12703$1CmlGO)
        (string-for-each . g$12702$1CmlGO)
        (string-copy . g$12701$1CmlGO)
        (string-append . g$12700$1CmlGO)
        (string->symbol . g$12699$1CmlGO)
        (string->number . g$12698$1CmlGO)
        (string->list . g$12697$1CmlGO)
        (string . g$12696$1CmlGO)
        (sqrt . g$12695$1CmlGO)
        (sin . g$12694$1CmlGO)
        (round . g$12693$1CmlGO)
        (reverse . g$12692$1CmlGO)
        (real? . g$12691$1CmlGO)
        (real-valued? . g$12690$1CmlGO)
        (real-part . g$12689$1CmlGO)
        (rationalize . g$6721$1CmlGO)
        (rational? . g$12688$1CmlGO)
        (rational-valued? . g$12687$1CmlGO)
        (procedure? . g$12686$1CmlGO)
        (positive? . g$12685$1CmlGO)
        (pair? . g$12684$1CmlGO)
        (odd? . g$12683$1CmlGO)
        (numerator . g$12682$1CmlGO)
        (number? . g$12681$1CmlGO)
        (number->string . g$12680$1CmlGO)
        (null? . g$12679$1CmlGO)
        (not . g$12678$1CmlGO)
        (negative? . g$12677$1CmlGO)
        (nan? . g$12676$1CmlGO)
        (min . g$12675$1CmlGO)
        (max . g$12674$1CmlGO)
        (map . g$12673$1CmlGO)
        (make-vector . g$12672$1CmlGO)
        (make-string . g$12671$1CmlGO)
        (make-rectangular . g$12670$1CmlGO)
        (make-polar . g$12669$1CmlGO)
        (magnitude . g$12668$1CmlGO)
        (log . g$12667$1CmlGO)
        (list? . g$12666$1CmlGO)
        (list-tail . g$12665$1CmlGO)
        (list-ref . g$12664$1CmlGO)
        (list->vector . g$12663$1CmlGO)
        (list->string . g$12662$1CmlGO)
        (list . g$12661$1CmlGO)
        (length . g$12660$1CmlGO)
        (lcm . g$12659$1CmlGO)
        (integer? . g$12658$1CmlGO)
        (integer-valued? . g$12657$1CmlGO)
        (integer->char . g$12656$1CmlGO)
        (infinite? . g$12655$1CmlGO)
        (inexact? . g$12654$1CmlGO)
        (inexact . g$12653$1CmlGO)
        (imag-part . g$12652$1CmlGO)
        (gcd . g$12651$1CmlGO)
        (for-each . g$12650$1CmlGO)
        (floor . g$12649$1CmlGO)
        (finite? . g$12648$1CmlGO)
        (expt . g$12647$1CmlGO)
        (exp . g$12646$1CmlGO)
        (exact? . g$12645$1CmlGO)
        (exact-integer-sqrt . g$12644$1CmlGO)
        (exact . g$12643$1CmlGO)
        (even? . g$12642$1CmlGO)
        (error . g$12641$1CmlGO)
        (eqv? . g$12640$1CmlGO)
        (equal? . g$12639$1CmlGO)
        (eq? . g$12638$1CmlGO)
        (dynamic-wind . g$12637$1CmlGO)
        (div0-and-mod0 . g$12636$1CmlGO)
        (mod0 . g$12635$1CmlGO)
        (div0 . g$12634$1CmlGO)
        (div-and-mod . g$12633$1CmlGO)
        (mod . g$12632$1CmlGO)
        (div . g$12631$1CmlGO)
        (denominator . g$12630$1CmlGO)
        (cos . g$12629$1CmlGO)
        (cons . g$12628$1CmlGO)
        (complex? . g$12627$1CmlGO)
        (char? . g$12626$1CmlGO)
        (char>? . g$6718$1CmlGO)
        (char>=? . g$6720$1CmlGO)
        (char=? . g$6716$1CmlGO)
        (char<? . g$6717$1CmlGO)
        (char<=? . g$6719$1CmlGO)
        (char->integer . g$12625$1CmlGO)
        (ceiling . g$12624$1CmlGO)
        (call-with-values . g$12623$1CmlGO)
        (call/cc . g$12622$1CmlGO)
        (call-with-current-continuation . g$12621$1CmlGO)
        (cddddr . g$6640$1CmlGO)
        (cdddar . g$6639$1CmlGO)
        (cddadr . g$6638$1CmlGO)
        (cddaar . g$6637$1CmlGO)
        (cdaddr . g$6636$1CmlGO)
        (cdadar . g$6635$1CmlGO)
        (cdaadr . g$6634$1CmlGO)
        (cdaaar . g$6633$1CmlGO)
        (cadddr . g$6632$1CmlGO)
        (caddar . g$6631$1CmlGO)
        (cadadr . g$6630$1CmlGO)
        (cadaar . g$6629$1CmlGO)
        (caaddr . g$6628$1CmlGO)
        (caadar . g$6627$1CmlGO)
        (caaadr . g$6626$1CmlGO)
        (caaaar . g$6625$1CmlGO)
        (cdddr . g$6624$1CmlGO)
        (cddar . g$6623$1CmlGO)
        (cdadr . g$6622$1CmlGO)
        (cdaar . g$6621$1CmlGO)
        (caddr . g$6620$1CmlGO)
        (cadar . g$6619$1CmlGO)
        (caadr . g$6618$1CmlGO)
        (caaar . g$6617$1CmlGO)
        (cddr . g$6616$1CmlGO)
        (cdar . g$6615$1CmlGO)
        (cadr . g$6614$1CmlGO)
        (caar . g$6613$1CmlGO)
        (cdr . g$12620$1CmlGO)
        (car . g$12619$1CmlGO)
        (boolean? . g$12618$1CmlGO)
        (boolean=? . g$6681$1CmlGO)
        (atan . g$12617$1CmlGO)
        (assertion-violation . g$12616$1CmlGO)
        (asin . g$12615$1CmlGO)
        (apply . g$12614$1CmlGO)
        (append . g$12613$1CmlGO)
        (angle . g$12612$1CmlGO)
        (acos . g$12611$1CmlGO)
        (abs . g$12610$1CmlGO)
        (/ . g$12609$1CmlGO)
        (* . g$12608$1CmlGO)
        (- . g$12607$1CmlGO)
        (+ . g$12606$1CmlGO)
        (>= . g$12605$1CmlGO)
        (> . g$12604$1CmlGO)
        (= . g$12603$1CmlGO)
        (<= . g$12602$1CmlGO)
        (< . g$12601$1CmlGO)
        (deserialize-port . g$12596$1CmlGO)
        (serialize-port . g$12595$1CmlGO)
        (enum-set? . g$8051$1CmlGO)
        (make-promise . g$7511$1CmlGO)
        (load/args . g$12428$1CmlGO)
        (printf . g$8161$1CmlGO)
        (fprintf . g$8162$1CmlGO)
        (format . g$8163$1CmlGO)
        (procedure-form . g$12594$1CmlGO)
        (procedure-environment . g$12593$1CmlGO)
        (procedure-name . g$12592$1CmlGO)
        (procedure-arity . g$12591$1CmlGO)
        (gc-collect . g$12590$1CmlGO)
        (clr-type? . g$12589$1CmlGO)
        (get-clr-type . g$12588$1CmlGO)
        (vector-append . g$12586$1CmlGO)
        (vector-filter . g$12585$1CmlGO)
        (vector-reverse! . g$12584$1CmlGO)
        (vector-contains? . g$12583$1CmlGO)
        (vector-index-of . g$12582$1CmlGO)
        (vector-copy . g$12581$1CmlGO)
        (vector-binary-search . g$12580$1CmlGO)
        (get-output-string . g$12579$1CmlGO)
        (open-output-string . g$12578$1CmlGO)
        (open-input-string . g$12577$1CmlGO)
        (string-ci-compare . g$12576$1CmlGO)
        (string-compare . g$12575$1CmlGO)
        (string-format . g$12574$1CmlGO)
        (trace-printer . g$12425$1CmlGO)
        (make-traced-procedure . g$12573$1CmlGO)
        (make-traced-macro . g$8183$1CmlGO)
        (pmap . g$12572$1CmlGO)
        (time-it . g$12571$1CmlGO)
        (make-parameter . g$8188$1CmlGO)
        (library-locator . g$12570$1CmlGO)
        (get-library-paths . g$12569$1CmlGO)
        (environment-bindings . g$9450$1CmlGO)
        (environment-symbols . g$9453$1CmlGO)
        (interaction-environment-symbols . g$9449$1CmlGO)
        (optimization-level . g$12568$1CmlGO)
        (library-path . g$8618$1CmlGO)
        (&no-nans . g$12567$1CmlGO)
        (&no-infinities . g$12566$1CmlGO)
        (&i/o-encoding . g$12565$1CmlGO)
        (&i/o-decoding . g$12564$1CmlGO)
        (&i/o-port . g$12563$1CmlGO)
        (&i/o-file-does-not-exist . g$12562$1CmlGO)
        (&i/o-file-already-exists . g$12561$1CmlGO)
        (&i/o-file-is-read-only . g$12560$1CmlGO)
        (&i/o-file-protection . g$12559$1CmlGO)
        (&i/o-filename . g$12558$1CmlGO)
        (&i/o-invalid-position . g$12557$1CmlGO)
        (&i/o-write . g$12556$1CmlGO)
        (&i/o-read . g$12555$1CmlGO)
        (&i/o . g$12554$1CmlGO)
        (&non-continuable . g$12553$1CmlGO)
        (&undefined . g$12552$1CmlGO)
        (&syntax . g$12551$1CmlGO)
        (&lexical . g$12550$1CmlGO)
        (&implementation-restriction . g$12549$1CmlGO)
        (&who . g$12547$1CmlGO)
        (&irritants . g$12546$1CmlGO)
        (&assertion . g$12545$1CmlGO)
        (&violation . g$12544$1CmlGO)
        (&error . g$12543$1CmlGO)
        (&serious . g$12542$1CmlGO)
        (&warning . g$12541$1CmlGO)
        (&message . g$12540$1CmlGO)
        (&condition . g$12539$1CmlGO)
        (define-condition-type . g$12538$1CmlGO)
        (define-enumeration . g$12537$1CmlGO)
        (define-record-type . g$12536$1CmlGO)
        (parent-rtd . g$12535$1CmlGO)
        (nongenerative . g$12534$1CmlGO)
        (opaque . g$12533$1CmlGO)
        (sealed . g$12532$1CmlGO)
        (protocol . g$12531$1CmlGO)
        (parent . g$12530$1CmlGO)
        (immutable . g$12529$1CmlGO)
        (mutable . g$12528$1CmlGO)
        (fields . g$12527$1CmlGO)
        (error-handling-mode . g$12526$1CmlGO)
        (file-options . g$12525$1CmlGO)
        (buffer-mode . g$12524$1CmlGO)
        (eol-style . g$12523$1CmlGO)
        (guard . g$12522$1CmlGO)
        (trace-letrec-syntax . g$12521$1CmlGO)
        (trace-let-syntax . g$12520$1CmlGO)
        (trace-define-syntax . g$12519$1CmlGO)
        (trace-define . g$12518$1CmlGO)
        (trace-lambda . g$12517$1CmlGO)
        (unsyntax-splicing . g$12516$1CmlGO)
        (unsyntax . g$12515$1CmlGO)
        (unquote-splicing . g$12514$1CmlGO)
        (unquote . g$12513$1CmlGO)
        (_ . g$12512$1CmlGO)
        (else . g$12511$1CmlGO)
        (=> . g$12510$1CmlGO)
        (... . g$12509$1CmlGO)
        (assert . g$12508$1CmlGO)
        (endianness . g$12507$1CmlGO)
        (delay . g$12506$1CmlGO)
        (time . g$12505$1CmlGO)
        (or . g$12504$1CmlGO)
        (and . g$12503$1CmlGO)
        (do . g$12502$1CmlGO)
        (cond . g$12501$1CmlGO)
        (let* . g$12500$1CmlGO)
        (let . g$12499$1CmlGO)
        (identifier-syntax . g$12498$1CmlGO)
        (with-syntax . g$12497$1CmlGO)
        (quasisyntax . g$12496$1CmlGO)
        (quasiquote . g$12495$1CmlGO)
        (syntax-rules . g$12494$1CmlGO)
        (include-into . g$12493$1CmlGO)
        (include . g$12492$1CmlGO)
        (let-values . g$12490$1CmlGO)
        (let*-values . g$12489$1CmlGO)
        (record-constructor-descriptor . g$12488$1CmlGO)
        (record-type-descriptor . g$12487$1CmlGO)
        (fluid-let-syntax . g$12486$1CmlGO)
        (case . g$12485$1CmlGO)
        (parameterize . g$12484$1CmlGO)
        (unless . g$12483$1CmlGO)
        (when . g$12482$1CmlGO)
        (if . g$12481$1CmlGO)
        (letrec* . g$12480$1CmlGO)
        (letrec . g$12479$1CmlGO)
        (case-lambda . g$12477$1CmlGO)
        (lambda . g$12476$1CmlGO)
        (syntax . g$12475$1CmlGO)
        (syntax-case . g$12474$1CmlGO)
        (quote . g$12473$1CmlGO)
        (letrec-syntax . g$12471$1CmlGO)
        (let-syntax . g$12470$1CmlGO)
        (set! . g$12469$1CmlGO)
        (export . g$12468$1CmlGO)
        (import . g$12467$1CmlGO)
        (library . g$12466$1CmlGO)
        (begin . g$12465$1CmlGO)
        (module . g$12464$1CmlGO)
        (define-syntax . g$12463$1CmlGO)
        (define . g$12462$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13086$1CmlGO
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$12569$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13087$1CmlGO
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$13027$1CmlGO)
        (annotation-source . g$13026$1CmlGO)
        (annotation-expression . g$13025$1CmlGO)
        (annotation? . g$13024$1CmlGO)
        (read-annotated . g$13023$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13088$1CmlGO
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12993$1CmlGO)
        (serialize-library . g$12992$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13089$1CmlGO
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$9080$1CmlGO)
        (variable-transformer? . g$9079$1CmlGO)
        (eqv-hash . g$12599$1CmlGO)
        (eq-hash . g$12598$1CmlGO)
        (reverse! . g$12597$1CmlGO)
        (format . g$8163$1CmlGO)
        (get-command-line . g$12587$1CmlGO)
        (make-traced-procedure . g$12573$1CmlGO)
        (assertion-error . g$9471$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13090$1CmlGO
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$12600$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13091$1CmlGO
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$13011$1CmlGO)
        (clr-field-set!-internal . g$13010$1CmlGO)
        (clr-field-get-internal . g$13009$1CmlGO)
        (clr-cast-internal . g$13008$1CmlGO)
        (clr-call-internal . g$13007$1CmlGO)
        (clr-new-internal . g$13006$1CmlGO)
        (clr-new-array-internal . g$13005$1CmlGO)
        (clr-is-internal . g$13004$1CmlGO)
        (clr-reference-internal . g$13003$1CmlGO)
        (clr-using-internal . g$13002$1CmlGO)
        (clr-clear-usings-internal . g$13001$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13092$1CmlGO
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$12514$1CmlGO)
        (unquote . g$12513$1CmlGO)
        (else . g$12511$1CmlGO)
        (=> . g$12510$1CmlGO)
        (delay . g$12506$1CmlGO)
        (or . g$12504$1CmlGO)
        (and . g$12503$1CmlGO)
        (do . g$12502$1CmlGO)
        (cond . g$12501$1CmlGO)
        (let* . g$12500$1CmlGO)
        (let . g$12499$1CmlGO)
        (quasiquote . g$12495$1CmlGO)
        (syntax-rules . g$12494$1CmlGO)
        (case . g$12485$1CmlGO)
        (if . g$12481$1CmlGO)
        (letrec . g$12479$1CmlGO)
        (lambda . g$12476$1CmlGO)
        (quote . g$12473$1CmlGO)
        (letrec-syntax . g$12471$1CmlGO)
        (let-syntax . g$12470$1CmlGO)
        (set! . g$12469$1CmlGO)
        (begin . g$12465$1CmlGO)
        (define-syntax . g$12463$1CmlGO)
        (define . g$12462$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13093$1CmlGO
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$9481$1CmlGO)
        (char-ready? . g$12991$1CmlGO)
        (string-ci>? . g$7590$1CmlGO)
        (string-ci>=? . g$7592$1CmlGO)
        (string-ci=? . g$7588$1CmlGO)
        (string-ci<? . g$7589$1CmlGO)
        (string-ci<=? . g$7591$1CmlGO)
        (char-whitespace? . g$12982$1CmlGO)
        (char-upper-case? . g$12981$1CmlGO)
        (char-numeric? . g$12979$1CmlGO)
        (char-lower-case? . g$12978$1CmlGO)
        (char-upcase . g$12976$1CmlGO)
        (char-downcase . g$12973$1CmlGO)
        (char-ci>? . g$7629$1CmlGO)
        (char-ci>=? . g$7631$1CmlGO)
        (char-ci=? . g$7627$1CmlGO)
        (char-ci<? . g$7628$1CmlGO)
        (char-ci<=? . g$7630$1CmlGO)
        (char-alphabetic? . g$12972$1CmlGO)
        (call-with-output-file . g$8018$1CmlGO)
        (call-with-input-file . g$8017$1CmlGO)
        (write-char . g$12940$1CmlGO)
        (write . g$12939$1CmlGO)
        (with-output-to-file . g$8016$1CmlGO)
        (with-input-from-file . g$8015$1CmlGO)
        (read-char . g$12938$1CmlGO)
        (read . g$12937$1CmlGO)
        (peek-char . g$12936$1CmlGO)
        (open-output-file . g$12935$1CmlGO)
        (open-input-file . g$12934$1CmlGO)
        (newline . g$12933$1CmlGO)
        (display . g$12932$1CmlGO)
        (close-output-port . g$12931$1CmlGO)
        (close-input-port . g$12930$1CmlGO)
        (eof-object? . g$12929$1CmlGO)
        (eof-object . g$12928$1CmlGO)
        (current-error-port . g$12927$1CmlGO)
        (current-output-port . g$12926$1CmlGO)
        (current-input-port . g$12925$1CmlGO)
        (output-port? . g$12924$1CmlGO)
        (input-port? . g$12923$1CmlGO)
        (scheme-report-environment . g$9456$1CmlGO)
        (quotient . g$7508$1CmlGO)
        (null-environment . g$9455$1CmlGO)
        (remainder . g$7509$1CmlGO)
        (modulo . g$7510$1CmlGO)
        (inexact->exact . g$12861$1CmlGO)
        (force . g$7512$1CmlGO)
        (exact->inexact . g$12860$1CmlGO)
        (string-fill! . g$12858$1CmlGO)
        (string-set! . g$12857$1CmlGO)
        (set-cdr! . g$12856$1CmlGO)
        (set-car! . g$12855$1CmlGO)
        (memv . g$6518$1CmlGO)
        (memq . g$6517$1CmlGO)
        (member . g$6519$1CmlGO)
        (assv . g$6514$1CmlGO)
        (assq . g$6513$1CmlGO)
        (assoc . g$6515$1CmlGO)
        (eval . g$9458$1CmlGO)
        (zero? . g$12721$1CmlGO)
        (vector? . g$12720$1CmlGO)
        (vector-set! . g$12719$1CmlGO)
        (vector-ref . g$12718$1CmlGO)
        (vector-length . g$12716$1CmlGO)
        (vector-fill! . g$12714$1CmlGO)
        (vector->list . g$12713$1CmlGO)
        (vector . g$12712$1CmlGO)
        (values . g$12711$1CmlGO)
        (truncate . g$12710$1CmlGO)
        (tan . g$12709$1CmlGO)
        (symbol? . g$12708$1CmlGO)
        (symbol->string . g$12707$1CmlGO)
        (substring . g$12706$1CmlGO)
        (string? . g$12705$1CmlGO)
        (string>? . g$6677$1CmlGO)
        (string>=? . g$6679$1CmlGO)
        (string=? . g$6675$1CmlGO)
        (string<? . g$6676$1CmlGO)
        (string<=? . g$6678$1CmlGO)
        (string-ref . g$12704$1CmlGO)
        (string-length . g$12703$1CmlGO)
        (string-copy . g$12701$1CmlGO)
        (string-append . g$12700$1CmlGO)
        (string->symbol . g$12699$1CmlGO)
        (string->number . g$12698$1CmlGO)
        (string->list . g$12697$1CmlGO)
        (string . g$12696$1CmlGO)
        (sqrt . g$12695$1CmlGO)
        (sin . g$12694$1CmlGO)
        (round . g$12693$1CmlGO)
        (reverse . g$12692$1CmlGO)
        (real? . g$12691$1CmlGO)
        (real-part . g$12689$1CmlGO)
        (rationalize . g$6721$1CmlGO)
        (rational? . g$12688$1CmlGO)
        (procedure? . g$12686$1CmlGO)
        (positive? . g$12685$1CmlGO)
        (pair? . g$12684$1CmlGO)
        (odd? . g$12683$1CmlGO)
        (numerator . g$12682$1CmlGO)
        (number? . g$12681$1CmlGO)
        (number->string . g$12680$1CmlGO)
        (null? . g$12679$1CmlGO)
        (not . g$12678$1CmlGO)
        (negative? . g$12677$1CmlGO)
        (min . g$12675$1CmlGO)
        (max . g$12674$1CmlGO)
        (map . g$12673$1CmlGO)
        (make-vector . g$12672$1CmlGO)
        (make-string . g$12671$1CmlGO)
        (make-rectangular . g$12670$1CmlGO)
        (make-polar . g$12669$1CmlGO)
        (magnitude . g$12668$1CmlGO)
        (log . g$12667$1CmlGO)
        (list? . g$12666$1CmlGO)
        (list-tail . g$12665$1CmlGO)
        (list-ref . g$12664$1CmlGO)
        (list->vector . g$12663$1CmlGO)
        (list->string . g$12662$1CmlGO)
        (list . g$12661$1CmlGO)
        (length . g$12660$1CmlGO)
        (lcm . g$12659$1CmlGO)
        (integer? . g$12658$1CmlGO)
        (integer->char . g$12656$1CmlGO)
        (inexact? . g$12654$1CmlGO)
        (imag-part . g$12652$1CmlGO)
        (gcd . g$12651$1CmlGO)
        (for-each . g$12650$1CmlGO)
        (floor . g$12649$1CmlGO)
        (expt . g$12647$1CmlGO)
        (exp . g$12646$1CmlGO)
        (exact? . g$12645$1CmlGO)
        (even? . g$12642$1CmlGO)
        (eqv? . g$12640$1CmlGO)
        (equal? . g$12639$1CmlGO)
        (eq? . g$12638$1CmlGO)
        (dynamic-wind . g$12637$1CmlGO)
        (denominator . g$12630$1CmlGO)
        (cos . g$12629$1CmlGO)
        (cons . g$12628$1CmlGO)
        (complex? . g$12627$1CmlGO)
        (char? . g$12626$1CmlGO)
        (char>? . g$6718$1CmlGO)
        (char>=? . g$6720$1CmlGO)
        (char=? . g$6716$1CmlGO)
        (char<? . g$6717$1CmlGO)
        (char<=? . g$6719$1CmlGO)
        (char->integer . g$12625$1CmlGO)
        (ceiling . g$12624$1CmlGO)
        (call-with-values . g$12623$1CmlGO)
        (call-with-current-continuation . g$12621$1CmlGO)
        (cddddr . g$6640$1CmlGO)
        (cdddar . g$6639$1CmlGO)
        (cddadr . g$6638$1CmlGO)
        (cddaar . g$6637$1CmlGO)
        (cdaddr . g$6636$1CmlGO)
        (cdadar . g$6635$1CmlGO)
        (cdaadr . g$6634$1CmlGO)
        (cdaaar . g$6633$1CmlGO)
        (cadddr . g$6632$1CmlGO)
        (caddar . g$6631$1CmlGO)
        (cadadr . g$6630$1CmlGO)
        (cadaar . g$6629$1CmlGO)
        (caaddr . g$6628$1CmlGO)
        (caadar . g$6627$1CmlGO)
        (caaadr . g$6626$1CmlGO)
        (caaaar . g$6625$1CmlGO)
        (cdddr . g$6624$1CmlGO)
        (cddar . g$6623$1CmlGO)
        (cdadr . g$6622$1CmlGO)
        (cdaar . g$6621$1CmlGO)
        (caddr . g$6620$1CmlGO)
        (cadar . g$6619$1CmlGO)
        (caadr . g$6618$1CmlGO)
        (caaar . g$6617$1CmlGO)
        (cddr . g$6616$1CmlGO)
        (cdar . g$6615$1CmlGO)
        (cadr . g$6614$1CmlGO)
        (caar . g$6613$1CmlGO)
        (cdr . g$12620$1CmlGO)
        (car . g$12619$1CmlGO)
        (boolean? . g$12618$1CmlGO)
        (atan . g$12617$1CmlGO)
        (asin . g$12615$1CmlGO)
        (apply . g$12614$1CmlGO)
        (append . g$12613$1CmlGO)
        (angle . g$12612$1CmlGO)
        (acos . g$12611$1CmlGO)
        (abs . g$12610$1CmlGO)
        (/ . g$12609$1CmlGO)
        (* . g$12608$1CmlGO)
        (- . g$12607$1CmlGO)
        (+ . g$12606$1CmlGO)
        (>= . g$12605$1CmlGO)
        (> . g$12604$1CmlGO)
        (= . g$12603$1CmlGO)
        (<= . g$12602$1CmlGO)
        (< . g$12601$1CmlGO)
        (unquote-splicing . g$12514$1CmlGO)
        (unquote . g$12513$1CmlGO)
        (else . g$12511$1CmlGO)
        (=> . g$12510$1CmlGO)
        (... . g$12509$1CmlGO)
        (delay . g$12506$1CmlGO)
        (or . g$12504$1CmlGO)
        (and . g$12503$1CmlGO)
        (do . g$12502$1CmlGO)
        (cond . g$12501$1CmlGO)
        (let* . g$12500$1CmlGO)
        (let . g$12499$1CmlGO)
        (quasiquote . g$12495$1CmlGO)
        (syntax-rules . g$12494$1CmlGO)
        (case . g$12485$1CmlGO)
        (if . g$12481$1CmlGO)
        (letrec . g$12479$1CmlGO)
        (lambda . g$12476$1CmlGO)
        (quote . g$12473$1CmlGO)
        (letrec-syntax . g$12471$1CmlGO)
        (let-syntax . g$12470$1CmlGO)
        (set! . g$12469$1CmlGO)
        (begin . g$12465$1CmlGO)
        (define-syntax . g$12463$1CmlGO)
        (define . g$12462$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13094$1CmlGO
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12990$1CmlGO)
        (string-titlecase . g$12989$1CmlGO)
        (string-normalize-nfkd . g$12988$1CmlGO)
        (string-normalize-nfkc . g$12987$1CmlGO)
        (string-normalize-nfd . g$12986$1CmlGO)
        (string-normalize-nfc . g$12985$1CmlGO)
        (string-foldcase . g$12984$1CmlGO)
        (string-downcase . g$12983$1CmlGO)
        (string-ci>? . g$7590$1CmlGO)
        (string-ci>=? . g$7592$1CmlGO)
        (string-ci=? . g$7588$1CmlGO)
        (string-ci<? . g$7589$1CmlGO)
        (string-ci<=? . g$7591$1CmlGO)
        (char-whitespace? . g$12982$1CmlGO)
        (char-upper-case? . g$12981$1CmlGO)
        (char-title-case? . g$12980$1CmlGO)
        (char-numeric? . g$12979$1CmlGO)
        (char-lower-case? . g$12978$1CmlGO)
        (char-general-category . g$12977$1CmlGO)
        (char-upcase . g$12976$1CmlGO)
        (char-titlecase . g$12975$1CmlGO)
        (char-foldcase . g$12974$1CmlGO)
        (char-downcase . g$12973$1CmlGO)
        (char-ci>? . g$7629$1CmlGO)
        (char-ci>=? . g$7631$1CmlGO)
        (char-ci=? . g$7627$1CmlGO)
        (char-ci<? . g$7628$1CmlGO)
        (char-ci<=? . g$7630$1CmlGO)
        (char-alphabetic? . g$12972$1CmlGO)
        (make-variable-transformer . g$9078$1CmlGO)
        (identifier? . g$9476$1CmlGO)
        (generate-temporaries . g$9465$1CmlGO)
        (free-identifier=? . g$9466$1CmlGO)
        (syntax->datum . g$9478$1CmlGO)
        (datum->syntax . g$9477$1CmlGO)
        (bound-identifier=? . g$9467$1CmlGO)
        (record-type-descriptor? . g$12971$1CmlGO)
        (record-predicate . g$12970$1CmlGO)
        (record-mutator . g$12969$1CmlGO)
        (record-constructor . g$12968$1CmlGO)
        (record-accessor . g$12967$1CmlGO)
        (make-record-type-descriptor . g$12966$1CmlGO)
        (make-record-constructor-descriptor . g$12965$1CmlGO)
        (record? . g$12964$1CmlGO)
        (record-type-uid . g$12963$1CmlGO)
        (record-type-sealed? . g$12962$1CmlGO)
        (record-type-parent . g$12961$1CmlGO)
        (record-type-opaque? . g$12960$1CmlGO)
        (record-type-name . g$12959$1CmlGO)
        (record-type-generative? . g$12958$1CmlGO)
        (record-type-field-names . g$12957$1CmlGO)
        (record-rtd . g$12956$1CmlGO)
        (record-field-mutable? . g$12955$1CmlGO)
        (delete-file . g$7165$1CmlGO)
        (file-exists? . g$7164$1CmlGO)
        (vector-sort! . g$12954$1CmlGO)
        (vector-sort . g$12953$1CmlGO)
        (list-sort . g$7528$1CmlGO)
        (symbol-hash . g$12952$1CmlGO)
        (string-ci-hash . g$12951$1CmlGO)
        (string-hash . g$12950$1CmlGO)
        (equal-hash . g$12949$1CmlGO)
        (hashtable-equivalence-function . g$12948$1CmlGO)
        (make-hashtable . g$12947$1CmlGO)
        (hashtable-hash-function . g$12946$1CmlGO)
        (make-eqv-hashtable . g$7132$1CmlGO)
        (make-eq-hashtable . g$7131$1CmlGO)
        (hashtable? . g$12945$1CmlGO)
        (hashtable-update! . g$7138$1CmlGO)
        (hashtable-size . g$7133$1CmlGO)
        (hashtable-set! . g$7135$1CmlGO)
        (hashtable-ref . g$7134$1CmlGO)
        (hashtable-mutable? . g$12944$1CmlGO)
        (hashtable-keys . g$12943$1CmlGO)
        (hashtable-entries . g$12942$1CmlGO)
        (hashtable-delete! . g$7136$1CmlGO)
        (hashtable-copy . g$12941$1CmlGO)
        (hashtable-contains? . g$7137$1CmlGO)
        (hashtable-clear! . g$7139$1CmlGO)
        (call-with-output-file . g$8018$1CmlGO)
        (call-with-input-file . g$8017$1CmlGO)
        (write-char . g$12940$1CmlGO)
        (write . g$12939$1CmlGO)
        (with-output-to-file . g$8016$1CmlGO)
        (with-input-from-file . g$8015$1CmlGO)
        (read-char . g$12938$1CmlGO)
        (read . g$12937$1CmlGO)
        (peek-char . g$12936$1CmlGO)
        (open-output-file . g$12935$1CmlGO)
        (open-input-file . g$12934$1CmlGO)
        (newline . g$12933$1CmlGO)
        (display . g$12932$1CmlGO)
        (close-output-port . g$12931$1CmlGO)
        (close-input-port . g$12930$1CmlGO)
        (eof-object? . g$12929$1CmlGO)
        (eof-object . g$12928$1CmlGO)
        (current-error-port . g$12927$1CmlGO)
        (current-output-port . g$12926$1CmlGO)
        (current-input-port . g$12925$1CmlGO)
        (output-port? . g$12924$1CmlGO)
        (input-port? . g$12923$1CmlGO)
        (utf-8-codec . g$12922$1CmlGO)
        (utf-16-codec . g$12921$1CmlGO)
        (transcoder-error-handling-mode . g$12920$1CmlGO)
        (transcoder-eol-style . g$12919$1CmlGO)
        (transcoder-codec . g$12918$1CmlGO)
        (transcoded-port . g$12917$1CmlGO)
        (textual-port? . g$12916$1CmlGO)
        (string->bytevector . g$12915$1CmlGO)
        (standard-output-port . g$12914$1CmlGO)
        (standard-input-port . g$12913$1CmlGO)
        (standard-error-port . g$12912$1CmlGO)
        (set-port-position! . g$12911$1CmlGO)
        (put-u8 . g$12910$1CmlGO)
        (put-string . g$12909$1CmlGO)
        (put-datum . g$12908$1CmlGO)
        (put-char . g$12907$1CmlGO)
        (put-bytevector . g$12906$1CmlGO)
        (port? . g$7994$1CmlGO)
        (port-transcoder . g$12905$1CmlGO)
        (port-position . g$12904$1CmlGO)
        (port-has-set-port-position!? . g$12903$1CmlGO)
        (port-has-port-position? . g$12902$1CmlGO)
        (port-eof? . g$12901$1CmlGO)
        (output-port-buffer-mode . g$12900$1CmlGO)
        (open-string-output-port . g$7993$1CmlGO)
        (open-string-input-port . g$12899$1CmlGO)
        (open-file-output-port . g$12898$1CmlGO)
        (open-file-input/output-port . g$12897$1CmlGO)
        (open-file-input-port . g$12896$1CmlGO)
        (open-bytevector-output-port . g$12895$1CmlGO)
        (open-bytevector-input-port . g$12894$1CmlGO)
        (native-transcoder . g$12893$1CmlGO)
        (native-eol-style . g$12892$1CmlGO)
        (make-transcoder . g$12891$1CmlGO)
        (latin-1-codec . g$12890$1CmlGO)
        (make-i/o-write-error . g$7850$1CmlGO)
        (make-i/o-read-error . g$7836$1CmlGO)
        (make-i/o-port-error . g$7955$1CmlGO)
        (make-i/o-invalid-position-error . g$7865$1CmlGO)
        (make-i/o-filename-error . g$7882$1CmlGO)
        (make-i/o-file-protection-error . g$7898$1CmlGO)
        (make-i/o-file-is-read-only-error . g$7912$1CmlGO)
        (make-i/o-file-does-not-exist-error . g$7940$1CmlGO)
        (make-i/o-file-already-exists-error . g$7926$1CmlGO)
        (make-i/o-error . g$7822$1CmlGO)
        (make-i/o-encoding-error . g$7986$1CmlGO)
        (make-i/o-decoding-error . g$7971$1CmlGO)
        (make-custom-textual-output-port . g$12889$1CmlGO)
        (make-custom-textual-input/output-port . g$12888$1CmlGO)
        (make-custom-textual-input-port . g$12887$1CmlGO)
        (make-custom-binary-output-port . g$12886$1CmlGO)
        (make-custom-binary-input/output-port . g$12885$1CmlGO)
        (make-custom-binary-input-port . g$12884$1CmlGO)
        (make-bytevector . g$12883$1CmlGO)
        (lookahead-u8 . g$12882$1CmlGO)
        (lookahead-char . g$12881$1CmlGO)
        (i/o-write-error? . g$7851$1CmlGO)
        (i/o-read-error? . g$7837$1CmlGO)
        (i/o-port-error? . g$7957$1CmlGO)
        (i/o-invalid-position-error? . g$7867$1CmlGO)
        (i/o-error-position . g$7868$1CmlGO)
        (i/o-filename-error? . g$7884$1CmlGO)
        (i/o-file-protection-error? . g$7899$1CmlGO)
        (i/o-file-is-read-only-error? . g$7913$1CmlGO)
        (i/o-file-does-not-exist-error? . g$7941$1CmlGO)
        (i/o-file-already-exists-error? . g$7927$1CmlGO)
        (i/o-error? . g$7823$1CmlGO)
        (i/o-error-port . g$7958$1CmlGO)
        (i/o-error-filename . g$7885$1CmlGO)
        (i/o-encoding-error? . g$7988$1CmlGO)
        (i/o-encoding-error-char . g$7989$1CmlGO)
        (i/o-decoding-error? . g$7972$1CmlGO)
        (get-u8 . g$12880$1CmlGO)
        (get-string-n! . g$12879$1CmlGO)
        (get-string-n . g$12878$1CmlGO)
        (get-string-all . g$12877$1CmlGO)
        (get-line . g$12876$1CmlGO)
        (get-datum . g$12875$1CmlGO)
        (get-char . g$12874$1CmlGO)
        (get-bytevector-some . g$12873$1CmlGO)
        (get-bytevector-n! . g$12872$1CmlGO)
        (get-bytevector-n . g$12871$1CmlGO)
        (get-bytevector-all . g$12870$1CmlGO)
        (flush-output-port . g$12869$1CmlGO)
        (close-port . g$12868$1CmlGO)
        (call-with-string-output-port . g$12867$1CmlGO)
        (call-with-port . g$12866$1CmlGO)
        (call-with-bytevector-output-port . g$12865$1CmlGO)
        (bytevector->string . g$12864$1CmlGO)
        (buffer-mode? . g$12863$1CmlGO)
        (binary-port? . g$12862$1CmlGO)
        (exit . g$12859$1CmlGO)
        (command-line . g$12426$1CmlGO)
        (remove . g$6528$1CmlGO)
        (remv . g$6529$1CmlGO)
        (remp . g$6511$1CmlGO)
        (remq . g$6530$1CmlGO)
        (partition . g$6510$1CmlGO)
        (memv . g$6518$1CmlGO)
        (memq . g$6517$1CmlGO)
        (memp . g$6520$1CmlGO)
        (member . g$6519$1CmlGO)
        (exists . g$6524$1CmlGO)
        (for-all . g$6523$1CmlGO)
        (fold-right . g$6527$1CmlGO)
        (fold-left . g$6526$1CmlGO)
        (find . g$6509$1CmlGO)
        (filter . g$6512$1CmlGO)
        (cons* . g$6525$1CmlGO)
        (assv . g$6514$1CmlGO)
        (assq . g$6513$1CmlGO)
        (assp . g$6516$1CmlGO)
        (assoc . g$6515$1CmlGO)
        (with-exception-handler . g$12854$1CmlGO)
        (raise-continuable . g$12853$1CmlGO)
        (raise . g$12852$1CmlGO)
        (make-enumeration . g$8076$1CmlGO)
        (enum-set=? . g$8083$1CmlGO)
        (enum-set-universe . g$8077$1CmlGO)
        (enum-set-union . g$8084$1CmlGO)
        (enum-set-subset? . g$8082$1CmlGO)
        (enum-set-projection . g$8088$1CmlGO)
        (enum-set-member? . g$8081$1CmlGO)
        (enum-set-intersection . g$8085$1CmlGO)
        (enum-set-indexer . g$8078$1CmlGO)
        (enum-set-difference . g$8086$1CmlGO)
        (enum-set-constructor . g$8079$1CmlGO)
        (enum-set-complement . g$8087$1CmlGO)
        (enum-set->list . g$8080$1CmlGO)
        (who-condition? . g$7419$1CmlGO)
        (warning? . g$7330$1CmlGO)
        (violation? . g$7372$1CmlGO)
        (undefined-violation? . g$7496$1CmlGO)
        (syntax-violation? . g$7480$1CmlGO)
        (syntax-violation-subform . g$7482$1CmlGO)
        (syntax-violation-form . g$7481$1CmlGO)
        (syntax-violation . g$9475$1CmlGO)
        (simple-conditions . g$12851$1CmlGO)
        (serious-condition? . g$7344$1CmlGO)
        (non-continuable-violation? . g$7434$1CmlGO)
        (message-condition? . g$7315$1CmlGO)
        (make-who-condition . g$7417$1CmlGO)
        (make-warning . g$7329$1CmlGO)
        (make-violation . g$7371$1CmlGO)
        (make-undefined-violation . g$7495$1CmlGO)
        (make-syntax-violation . g$7477$1CmlGO)
        (make-serious-condition . g$7343$1CmlGO)
        (make-non-continuable-violation . g$7433$1CmlGO)
        (make-message-condition . g$7313$1CmlGO)
        (make-lexical-violation . g$7461$1CmlGO)
        (make-irritants-condition . g$7400$1CmlGO)
        (make-implementation-restriction-violation . g$7447$1CmlGO)
        (make-error . g$7357$1CmlGO)
        (make-assertion-violation . g$7385$1CmlGO)
        (lexical-violation? . g$7462$1CmlGO)
        (irritants-condition? . g$7402$1CmlGO)
        (implementation-restriction-violation? . g$7448$1CmlGO)
        (error? . g$7358$1CmlGO)
        (condition-who . g$7420$1CmlGO)
        (condition-predicate . g$12850$1CmlGO)
        (condition-message . g$7316$1CmlGO)
        (condition-irritants . g$7403$1CmlGO)
        (condition-accessor . g$12849$1CmlGO)
        (condition . g$12848$1CmlGO)
        (assertion-violation? . g$7386$1CmlGO)
        (condition? . g$12847$1CmlGO)
        (utf32->string . g$12846$1CmlGO)
        (utf16->string . g$12845$1CmlGO)
        (utf8->string . g$12844$1CmlGO)
        (uint-list->bytevector . g$12843$1CmlGO)
        (u8-list->bytevector . g$12842$1CmlGO)
        (string->utf8 . g$12841$1CmlGO)
        (string->utf32 . g$12840$1CmlGO)
        (string->utf16 . g$12839$1CmlGO)
        (sint-list->bytevector . g$12838$1CmlGO)
        (native-endianness . g$7171$1CmlGO)
        (bytevector? . g$12837$1CmlGO)
        (bytevector=? . g$12836$1CmlGO)
        (bytevector-uint-set! . g$12835$1CmlGO)
        (bytevector-uint-ref . g$12834$1CmlGO)
        (bytevector-u8-set! . g$12833$1CmlGO)
        (bytevector-u8-ref . g$12832$1CmlGO)
        (bytevector-u64-set! . g$7192$1CmlGO)
        (bytevector-u64-ref . g$7188$1CmlGO)
        (bytevector-u64-native-set! . g$7194$1CmlGO)
        (bytevector-u64-native-ref . g$7190$1CmlGO)
        (bytevector-u32-set! . g$7184$1CmlGO)
        (bytevector-u32-ref . g$7180$1CmlGO)
        (bytevector-u32-native-set! . g$7186$1CmlGO)
        (bytevector-u32-native-ref . g$7182$1CmlGO)
        (bytevector-u16-set! . g$7176$1CmlGO)
        (bytevector-u16-ref . g$7172$1CmlGO)
        (bytevector-u16-native-set! . g$7178$1CmlGO)
        (bytevector-u16-native-ref . g$7174$1CmlGO)
        (bytevector-sint-set! . g$12831$1CmlGO)
        (bytevector-sint-ref . g$12830$1CmlGO)
        (bytevector-s8-set! . g$12829$1CmlGO)
        (bytevector-s8-ref . g$12828$1CmlGO)
        (bytevector-s64-set! . g$7193$1CmlGO)
        (bytevector-s64-ref . g$7189$1CmlGO)
        (bytevector-s64-native-set! . g$7195$1CmlGO)
        (bytevector-s64-native-ref . g$7191$1CmlGO)
        (bytevector-s32-set! . g$7185$1CmlGO)
        (bytevector-s32-ref . g$7181$1CmlGO)
        (bytevector-s32-native-set! . g$7187$1CmlGO)
        (bytevector-s32-native-ref . g$7183$1CmlGO)
        (bytevector-s16-set! . g$7177$1CmlGO)
        (bytevector-s16-ref . g$7173$1CmlGO)
        (bytevector-s16-native-set! . g$7179$1CmlGO)
        (bytevector-s16-native-ref . g$7175$1CmlGO)
        (bytevector-length . g$12827$1CmlGO)
        (bytevector-ieee-single-set! . g$12826$1CmlGO)
        (bytevector-ieee-single-ref . g$12825$1CmlGO)
        (bytevector-ieee-single-native-set! . g$7198$1CmlGO)
        (bytevector-ieee-single-native-ref . g$7196$1CmlGO)
        (bytevector-ieee-double-set! . g$12824$1CmlGO)
        (bytevector-ieee-double-ref . g$12823$1CmlGO)
        (bytevector-ieee-double-native-set! . g$7199$1CmlGO)
        (bytevector-ieee-double-native-ref . g$7197$1CmlGO)
        (bytevector-fill! . g$12822$1CmlGO)
        (bytevector-copy! . g$12821$1CmlGO)
        (bytevector-copy . g$12820$1CmlGO)
        (bytevector->uint-list . g$12819$1CmlGO)
        (bytevector->u8-list . g$12818$1CmlGO)
        (bytevector->sint-list . g$12817$1CmlGO)
        (no-nans-violation? . g$7808$1CmlGO)
        (no-infinities-violation? . g$7794$1CmlGO)
        (make-no-nans-violation . g$7807$1CmlGO)
        (make-no-infinities-violation . g$7793$1CmlGO)
        (real->flonum . g$12816$1CmlGO)
        (flzero? . g$12815$1CmlGO)
        (fltruncate . g$12814$1CmlGO)
        (fltan . g$12813$1CmlGO)
        (flsqrt . g$12812$1CmlGO)
        (flsin . g$12811$1CmlGO)
        (flround . g$12810$1CmlGO)
        (flpositive? . g$12809$1CmlGO)
        (flonum? . g$12808$1CmlGO)
        (flodd? . g$12807$1CmlGO)
        (flnumerator . g$12806$1CmlGO)
        (flnegative? . g$12805$1CmlGO)
        (flnan? . g$12804$1CmlGO)
        (flmod0 . g$12803$1CmlGO)
        (flmod . g$12802$1CmlGO)
        (flmin . g$12801$1CmlGO)
        (flmax . g$12800$1CmlGO)
        (fllog . g$12799$1CmlGO)
        (flinteger? . g$12798$1CmlGO)
        (flinfinite? . g$12797$1CmlGO)
        (flfloor . g$12796$1CmlGO)
        (flfinite? . g$12795$1CmlGO)
        (flexpt . g$12794$1CmlGO)
        (flexp . g$12793$1CmlGO)
        (fleven? . g$12792$1CmlGO)
        (fldiv0-and-mod0 . g$12791$1CmlGO)
        (fldiv0 . g$12790$1CmlGO)
        (fldiv-and-mod . g$12789$1CmlGO)
        (fldiv . g$12788$1CmlGO)
        (fldenominator . g$12787$1CmlGO)
        (flcos . g$12786$1CmlGO)
        (flceiling . g$12785$1CmlGO)
        (flatan . g$12784$1CmlGO)
        (flasin . g$12783$1CmlGO)
        (flacos . g$12782$1CmlGO)
        (flabs . g$12781$1CmlGO)
        (fl>? . g$12780$1CmlGO)
        (fl>=? . g$12779$1CmlGO)
        (fl=? . g$12778$1CmlGO)
        (fl<? . g$12777$1CmlGO)
        (fl<=? . g$12776$1CmlGO)
        (fl/ . g$12775$1CmlGO)
        (fl- . g$12774$1CmlGO)
        (fl+ . g$12773$1CmlGO)
        (fl* . g$12772$1CmlGO)
        (fixnum->flonum . g$12771$1CmlGO)
        (fxzero? . g$12770$1CmlGO)
        (fxxor . g$12769$1CmlGO)
        (fxrotate-bit-field . g$7739$1CmlGO)
        (fxreverse-bit-field . g$12768$1CmlGO)
        (fxpositive? . g$12767$1CmlGO)
        (fxodd? . g$12766$1CmlGO)
        (fxnot . g$12765$1CmlGO)
        (fxnegative? . g$12764$1CmlGO)
        (fxmod0 . g$12763$1CmlGO)
        (fxmod . g$12762$1CmlGO)
        (fxmin . g$12761$1CmlGO)
        (fxmax . g$12760$1CmlGO)
        (fxlength . g$12759$1CmlGO)
        (fxior . g$12758$1CmlGO)
        (fxif . g$7733$1CmlGO)
        (fxfirst-bit-set . g$12757$1CmlGO)
        (fxeven? . g$12756$1CmlGO)
        (fxdiv0-and-mod0 . g$12755$1CmlGO)
        (fxdiv0 . g$12754$1CmlGO)
        (fxdiv-and-mod . g$12753$1CmlGO)
        (fxdiv . g$12752$1CmlGO)
        (fxcopy-bit-field . g$7736$1CmlGO)
        (fxcopy-bit . g$7734$1CmlGO)
        (fxbit-set? . g$12751$1CmlGO)
        (fxbit-field . g$7735$1CmlGO)
        (fxbit-count . g$12750$1CmlGO)
        (fxarithmetic-shift-right . g$7738$1CmlGO)
        (fxarithmetic-shift-left . g$7737$1CmlGO)
        (fxarithmetic-shift . g$12749$1CmlGO)
        (fxand . g$12748$1CmlGO)
        (fx>? . g$12747$1CmlGO)
        (fx>=? . g$12746$1CmlGO)
        (fx=? . g$12745$1CmlGO)
        (fx<? . g$12744$1CmlGO)
        (fx<=? . g$12743$1CmlGO)
        (fx-/carry . g$12742$1CmlGO)
        (fx- . g$12741$1CmlGO)
        (fx+/carry . g$12740$1CmlGO)
        (fx+ . g$12739$1CmlGO)
        (fx*/carry . g$12738$1CmlGO)
        (fx* . g$12737$1CmlGO)
        (greatest-fixnum . g$12736$1CmlGO)
        (least-fixnum . g$12735$1CmlGO)
        (fixnum-width . g$12734$1CmlGO)
        (fixnum? . g$12733$1CmlGO)
        (bitwise-rotate-bit-field . g$7691$1CmlGO)
        (bitwise-reverse-bit-field . g$12732$1CmlGO)
        (bitwise-length . g$12731$1CmlGO)
        (bitwise-if . g$7685$1CmlGO)
        (bitwise-first-bit-set . g$12730$1CmlGO)
        (bitwise-copy-bit-field . g$7688$1CmlGO)
        (bitwise-copy-bit . g$7686$1CmlGO)
        (bitwise-bit-set? . g$12729$1CmlGO)
        (bitwise-bit-field . g$12728$1CmlGO)
        (bitwise-bit-count . g$12727$1CmlGO)
        (bitwise-xor . g$12726$1CmlGO)
        (bitwise-ior . g$12725$1CmlGO)
        (bitwise-and . g$12724$1CmlGO)
        (bitwise-not . g$12723$1CmlGO)
        (bitwise-arithmetic-shift-right . g$7690$1CmlGO)
        (bitwise-arithmetic-shift-left . g$7689$1CmlGO)
        (bitwise-arithmetic-shift . g$12722$1CmlGO)
        (zero? . g$12721$1CmlGO)
        (vector? . g$12720$1CmlGO)
        (vector-set! . g$12719$1CmlGO)
        (vector-ref . g$12718$1CmlGO)
        (vector-map . g$12717$1CmlGO)
        (vector-length . g$12716$1CmlGO)
        (vector-for-each . g$12715$1CmlGO)
        (vector-fill! . g$12714$1CmlGO)
        (vector->list . g$12713$1CmlGO)
        (vector . g$12712$1CmlGO)
        (values . g$12711$1CmlGO)
        (truncate . g$12710$1CmlGO)
        (tan . g$12709$1CmlGO)
        (symbol? . g$12708$1CmlGO)
        (symbol=? . g$6680$1CmlGO)
        (symbol->string . g$12707$1CmlGO)
        (substring . g$12706$1CmlGO)
        (string? . g$12705$1CmlGO)
        (string>? . g$6677$1CmlGO)
        (string>=? . g$6679$1CmlGO)
        (string=? . g$6675$1CmlGO)
        (string<? . g$6676$1CmlGO)
        (string<=? . g$6678$1CmlGO)
        (string-ref . g$12704$1CmlGO)
        (string-length . g$12703$1CmlGO)
        (string-for-each . g$12702$1CmlGO)
        (string-copy . g$12701$1CmlGO)
        (string-append . g$12700$1CmlGO)
        (string->symbol . g$12699$1CmlGO)
        (string->number . g$12698$1CmlGO)
        (string->list . g$12697$1CmlGO)
        (string . g$12696$1CmlGO)
        (sqrt . g$12695$1CmlGO)
        (sin . g$12694$1CmlGO)
        (round . g$12693$1CmlGO)
        (reverse . g$12692$1CmlGO)
        (real? . g$12691$1CmlGO)
        (real-valued? . g$12690$1CmlGO)
        (real-part . g$12689$1CmlGO)
        (rationalize . g$6721$1CmlGO)
        (rational? . g$12688$1CmlGO)
        (rational-valued? . g$12687$1CmlGO)
        (procedure? . g$12686$1CmlGO)
        (positive? . g$12685$1CmlGO)
        (pair? . g$12684$1CmlGO)
        (odd? . g$12683$1CmlGO)
        (numerator . g$12682$1CmlGO)
        (number? . g$12681$1CmlGO)
        (number->string . g$12680$1CmlGO)
        (null? . g$12679$1CmlGO)
        (not . g$12678$1CmlGO)
        (negative? . g$12677$1CmlGO)
        (nan? . g$12676$1CmlGO)
        (min . g$12675$1CmlGO)
        (max . g$12674$1CmlGO)
        (map . g$12673$1CmlGO)
        (make-vector . g$12672$1CmlGO)
        (make-string . g$12671$1CmlGO)
        (make-rectangular . g$12670$1CmlGO)
        (make-polar . g$12669$1CmlGO)
        (magnitude . g$12668$1CmlGO)
        (log . g$12667$1CmlGO)
        (list? . g$12666$1CmlGO)
        (list-tail . g$12665$1CmlGO)
        (list-ref . g$12664$1CmlGO)
        (list->vector . g$12663$1CmlGO)
        (list->string . g$12662$1CmlGO)
        (list . g$12661$1CmlGO)
        (length . g$12660$1CmlGO)
        (lcm . g$12659$1CmlGO)
        (integer? . g$12658$1CmlGO)
        (integer-valued? . g$12657$1CmlGO)
        (integer->char . g$12656$1CmlGO)
        (infinite? . g$12655$1CmlGO)
        (inexact? . g$12654$1CmlGO)
        (inexact . g$12653$1CmlGO)
        (imag-part . g$12652$1CmlGO)
        (gcd . g$12651$1CmlGO)
        (for-each . g$12650$1CmlGO)
        (floor . g$12649$1CmlGO)
        (finite? . g$12648$1CmlGO)
        (expt . g$12647$1CmlGO)
        (exp . g$12646$1CmlGO)
        (exact? . g$12645$1CmlGO)
        (exact-integer-sqrt . g$12644$1CmlGO)
        (exact . g$12643$1CmlGO)
        (even? . g$12642$1CmlGO)
        (error . g$12641$1CmlGO)
        (eqv? . g$12640$1CmlGO)
        (equal? . g$12639$1CmlGO)
        (eq? . g$12638$1CmlGO)
        (dynamic-wind . g$12637$1CmlGO)
        (div0-and-mod0 . g$12636$1CmlGO)
        (mod0 . g$12635$1CmlGO)
        (div0 . g$12634$1CmlGO)
        (div-and-mod . g$12633$1CmlGO)
        (mod . g$12632$1CmlGO)
        (div . g$12631$1CmlGO)
        (denominator . g$12630$1CmlGO)
        (cos . g$12629$1CmlGO)
        (cons . g$12628$1CmlGO)
        (complex? . g$12627$1CmlGO)
        (char? . g$12626$1CmlGO)
        (char>? . g$6718$1CmlGO)
        (char>=? . g$6720$1CmlGO)
        (char=? . g$6716$1CmlGO)
        (char<? . g$6717$1CmlGO)
        (char<=? . g$6719$1CmlGO)
        (char->integer . g$12625$1CmlGO)
        (ceiling . g$12624$1CmlGO)
        (call-with-values . g$12623$1CmlGO)
        (call/cc . g$12622$1CmlGO)
        (call-with-current-continuation . g$12621$1CmlGO)
        (cddddr . g$6640$1CmlGO)
        (cdddar . g$6639$1CmlGO)
        (cddadr . g$6638$1CmlGO)
        (cddaar . g$6637$1CmlGO)
        (cdaddr . g$6636$1CmlGO)
        (cdadar . g$6635$1CmlGO)
        (cdaadr . g$6634$1CmlGO)
        (cdaaar . g$6633$1CmlGO)
        (cadddr . g$6632$1CmlGO)
        (caddar . g$6631$1CmlGO)
        (cadadr . g$6630$1CmlGO)
        (cadaar . g$6629$1CmlGO)
        (caaddr . g$6628$1CmlGO)
        (caadar . g$6627$1CmlGO)
        (caaadr . g$6626$1CmlGO)
        (caaaar . g$6625$1CmlGO)
        (cdddr . g$6624$1CmlGO)
        (cddar . g$6623$1CmlGO)
        (cdadr . g$6622$1CmlGO)
        (cdaar . g$6621$1CmlGO)
        (caddr . g$6620$1CmlGO)
        (cadar . g$6619$1CmlGO)
        (caadr . g$6618$1CmlGO)
        (caaar . g$6617$1CmlGO)
        (cddr . g$6616$1CmlGO)
        (cdar . g$6615$1CmlGO)
        (cadr . g$6614$1CmlGO)
        (caar . g$6613$1CmlGO)
        (cdr . g$12620$1CmlGO)
        (car . g$12619$1CmlGO)
        (boolean? . g$12618$1CmlGO)
        (boolean=? . g$6681$1CmlGO)
        (atan . g$12617$1CmlGO)
        (assertion-violation . g$12616$1CmlGO)
        (asin . g$12615$1CmlGO)
        (apply . g$12614$1CmlGO)
        (append . g$12613$1CmlGO)
        (angle . g$12612$1CmlGO)
        (acos . g$12611$1CmlGO)
        (abs . g$12610$1CmlGO)
        (/ . g$12609$1CmlGO)
        (* . g$12608$1CmlGO)
        (- . g$12607$1CmlGO)
        (+ . g$12606$1CmlGO)
        (>= . g$12605$1CmlGO)
        (> . g$12604$1CmlGO)
        (= . g$12603$1CmlGO)
        (<= . g$12602$1CmlGO)
        (< . g$12601$1CmlGO)
        (&no-nans . g$12567$1CmlGO)
        (&no-infinities . g$12566$1CmlGO)
        (&i/o-encoding . g$12565$1CmlGO)
        (&i/o-decoding . g$12564$1CmlGO)
        (&i/o-port . g$12563$1CmlGO)
        (&i/o-file-does-not-exist . g$12562$1CmlGO)
        (&i/o-file-already-exists . g$12561$1CmlGO)
        (&i/o-file-is-read-only . g$12560$1CmlGO)
        (&i/o-file-protection . g$12559$1CmlGO)
        (&i/o-filename . g$12558$1CmlGO)
        (&i/o-invalid-position . g$12557$1CmlGO)
        (&i/o-write . g$12556$1CmlGO)
        (&i/o-read . g$12555$1CmlGO)
        (&i/o . g$12554$1CmlGO)
        (&non-continuable . g$12553$1CmlGO)
        (&undefined . g$12552$1CmlGO)
        (&syntax . g$12551$1CmlGO)
        (&lexical . g$12550$1CmlGO)
        (&implementation-restriction . g$12549$1CmlGO)
        (&who . g$12547$1CmlGO)
        (&irritants . g$12546$1CmlGO)
        (&assertion . g$12545$1CmlGO)
        (&violation . g$12544$1CmlGO)
        (&error . g$12543$1CmlGO)
        (&serious . g$12542$1CmlGO)
        (&warning . g$12541$1CmlGO)
        (&message . g$12540$1CmlGO)
        (&condition . g$12539$1CmlGO)
        (define-condition-type . g$12538$1CmlGO)
        (define-enumeration . g$12537$1CmlGO)
        (define-record-type . g$12536$1CmlGO)
        (parent-rtd . g$12535$1CmlGO)
        (nongenerative . g$12534$1CmlGO)
        (opaque . g$12533$1CmlGO)
        (sealed . g$12532$1CmlGO)
        (protocol . g$12531$1CmlGO)
        (parent . g$12530$1CmlGO)
        (immutable . g$12529$1CmlGO)
        (mutable . g$12528$1CmlGO)
        (fields . g$12527$1CmlGO)
        (error-handling-mode . g$12526$1CmlGO)
        (file-options . g$12525$1CmlGO)
        (buffer-mode . g$12524$1CmlGO)
        (eol-style . g$12523$1CmlGO)
        (guard . g$12522$1CmlGO)
        (unsyntax-splicing . g$12516$1CmlGO)
        (unsyntax . g$12515$1CmlGO)
        (unquote-splicing . g$12514$1CmlGO)
        (unquote . g$12513$1CmlGO)
        (_ . g$12512$1CmlGO)
        (else . g$12511$1CmlGO)
        (=> . g$12510$1CmlGO)
        (... . g$12509$1CmlGO)
        (assert . g$12508$1CmlGO)
        (endianness . g$12507$1CmlGO)
        (or . g$12504$1CmlGO)
        (and . g$12503$1CmlGO)
        (do . g$12502$1CmlGO)
        (cond . g$12501$1CmlGO)
        (let* . g$12500$1CmlGO)
        (let . g$12499$1CmlGO)
        (identifier-syntax . g$12498$1CmlGO)
        (with-syntax . g$12497$1CmlGO)
        (quasisyntax . g$12496$1CmlGO)
        (quasiquote . g$12495$1CmlGO)
        (syntax-rules . g$12494$1CmlGO)
        (let-values . g$12490$1CmlGO)
        (let*-values . g$12489$1CmlGO)
        (record-constructor-descriptor . g$12488$1CmlGO)
        (record-type-descriptor . g$12487$1CmlGO)
        (case . g$12485$1CmlGO)
        (unless . g$12483$1CmlGO)
        (when . g$12482$1CmlGO)
        (if . g$12481$1CmlGO)
        (letrec* . g$12480$1CmlGO)
        (letrec . g$12479$1CmlGO)
        (case-lambda . g$12477$1CmlGO)
        (lambda . g$12476$1CmlGO)
        (syntax . g$12475$1CmlGO)
        (syntax-case . g$12474$1CmlGO)
        (quote . g$12473$1CmlGO)
        (letrec-syntax . g$12471$1CmlGO)
        (let-syntax . g$12470$1CmlGO)
        (set! . g$12469$1CmlGO)
        (begin . g$12465$1CmlGO)
        (define-syntax . g$12463$1CmlGO)
        (define . g$12462$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13095$1CmlGO
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$9481$1CmlGO)
        (scheme-report-environment . g$9456$1CmlGO)
        (quotient . g$7508$1CmlGO)
        (null-environment . g$9455$1CmlGO)
        (remainder . g$7509$1CmlGO)
        (modulo . g$7510$1CmlGO)
        (inexact->exact . g$12861$1CmlGO)
        (force . g$7512$1CmlGO)
        (exact->inexact . g$12860$1CmlGO)
        (delay . g$12506$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13096$1CmlGO
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$12502$1CmlGO)
        (unless . g$12483$1CmlGO)
        (when . g$12482$1CmlGO)
        (case-lambda . g$12477$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13097$1CmlGO
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9458$1CmlGO) (environment . g$9454$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13098$1CmlGO
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12856$1CmlGO) (set-car! . g$12855$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13099$1CmlGO
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12858$1CmlGO) (string-set! . g$12857$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13100$1CmlGO
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12859$1CmlGO) (command-line . g$12426$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13101$1CmlGO
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$9078$1CmlGO)
        (identifier? . g$9476$1CmlGO)
        (generate-temporaries . g$9465$1CmlGO)
        (free-identifier=? . g$9466$1CmlGO)
        (syntax->datum . g$9478$1CmlGO)
        (datum->syntax . g$9477$1CmlGO)
        (bound-identifier=? . g$9467$1CmlGO)
        (syntax-violation . g$9475$1CmlGO)
        (unsyntax-splicing . g$12516$1CmlGO)
        (unsyntax . g$12515$1CmlGO)
        (_ . g$12512$1CmlGO)
        (... . g$12509$1CmlGO)
        (with-syntax . g$12497$1CmlGO)
        (quasisyntax . g$12496$1CmlGO)
        (syntax . g$12475$1CmlGO)
        (syntax-case . g$12474$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13102$1CmlGO
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$7165$1CmlGO)
        (file-exists? . g$7164$1CmlGO)
        (make-i/o-write-error . g$7850$1CmlGO)
        (make-i/o-read-error . g$7836$1CmlGO)
        (make-i/o-port-error . g$7955$1CmlGO)
        (make-i/o-invalid-position-error . g$7865$1CmlGO)
        (make-i/o-filename-error . g$7882$1CmlGO)
        (make-i/o-file-protection-error . g$7898$1CmlGO)
        (make-i/o-file-is-read-only-error . g$7912$1CmlGO)
        (make-i/o-file-does-not-exist-error . g$7940$1CmlGO)
        (make-i/o-file-already-exists-error . g$7926$1CmlGO)
        (make-i/o-error . g$7822$1CmlGO)
        (i/o-write-error? . g$7851$1CmlGO)
        (i/o-read-error? . g$7837$1CmlGO)
        (i/o-port-error? . g$7957$1CmlGO)
        (i/o-invalid-position-error? . g$7867$1CmlGO)
        (i/o-error-position . g$7868$1CmlGO)
        (i/o-filename-error? . g$7884$1CmlGO)
        (i/o-file-protection-error? . g$7899$1CmlGO)
        (i/o-file-is-read-only-error? . g$7913$1CmlGO)
        (i/o-file-does-not-exist-error? . g$7941$1CmlGO)
        (i/o-file-already-exists-error? . g$7927$1CmlGO)
        (i/o-error? . g$7823$1CmlGO)
        (i/o-error-port . g$7958$1CmlGO)
        (i/o-error-filename . g$7885$1CmlGO)
        (&i/o-port . g$12563$1CmlGO)
        (&i/o-file-does-not-exist . g$12562$1CmlGO)
        (&i/o-file-already-exists . g$12561$1CmlGO)
        (&i/o-file-is-read-only . g$12560$1CmlGO)
        (&i/o-file-protection . g$12559$1CmlGO)
        (&i/o-filename . g$12558$1CmlGO)
        (&i/o-invalid-position . g$12557$1CmlGO)
        (&i/o-write . g$12556$1CmlGO)
        (&i/o-read . g$12555$1CmlGO)
        (&i/o . g$12554$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13103$1CmlGO
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12954$1CmlGO)
        (vector-sort . g$12953$1CmlGO)
        (list-sort . g$7528$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13104$1CmlGO
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$12721$1CmlGO)
        (vector? . g$12720$1CmlGO)
        (vector-set! . g$12719$1CmlGO)
        (vector-ref . g$12718$1CmlGO)
        (vector-map . g$12717$1CmlGO)
        (vector-length . g$12716$1CmlGO)
        (vector-for-each . g$12715$1CmlGO)
        (vector-fill! . g$12714$1CmlGO)
        (vector->list . g$12713$1CmlGO)
        (vector . g$12712$1CmlGO)
        (values . g$12711$1CmlGO)
        (truncate . g$12710$1CmlGO)
        (tan . g$12709$1CmlGO)
        (symbol? . g$12708$1CmlGO)
        (symbol=? . g$6680$1CmlGO)
        (symbol->string . g$12707$1CmlGO)
        (substring . g$12706$1CmlGO)
        (string? . g$12705$1CmlGO)
        (string>? . g$6677$1CmlGO)
        (string>=? . g$6679$1CmlGO)
        (string=? . g$6675$1CmlGO)
        (string<? . g$6676$1CmlGO)
        (string<=? . g$6678$1CmlGO)
        (string-ref . g$12704$1CmlGO)
        (string-length . g$12703$1CmlGO)
        (string-for-each . g$12702$1CmlGO)
        (string-copy . g$12701$1CmlGO)
        (string-append . g$12700$1CmlGO)
        (string->symbol . g$12699$1CmlGO)
        (string->number . g$12698$1CmlGO)
        (string->list . g$12697$1CmlGO)
        (string . g$12696$1CmlGO)
        (sqrt . g$12695$1CmlGO)
        (sin . g$12694$1CmlGO)
        (round . g$12693$1CmlGO)
        (reverse . g$12692$1CmlGO)
        (real? . g$12691$1CmlGO)
        (real-valued? . g$12690$1CmlGO)
        (real-part . g$12689$1CmlGO)
        (rationalize . g$6721$1CmlGO)
        (rational? . g$12688$1CmlGO)
        (rational-valued? . g$12687$1CmlGO)
        (procedure? . g$12686$1CmlGO)
        (positive? . g$12685$1CmlGO)
        (pair? . g$12684$1CmlGO)
        (odd? . g$12683$1CmlGO)
        (numerator . g$12682$1CmlGO)
        (number? . g$12681$1CmlGO)
        (number->string . g$12680$1CmlGO)
        (null? . g$12679$1CmlGO)
        (not . g$12678$1CmlGO)
        (negative? . g$12677$1CmlGO)
        (nan? . g$12676$1CmlGO)
        (min . g$12675$1CmlGO)
        (max . g$12674$1CmlGO)
        (map . g$12673$1CmlGO)
        (make-vector . g$12672$1CmlGO)
        (make-string . g$12671$1CmlGO)
        (make-rectangular . g$12670$1CmlGO)
        (make-polar . g$12669$1CmlGO)
        (magnitude . g$12668$1CmlGO)
        (log . g$12667$1CmlGO)
        (list? . g$12666$1CmlGO)
        (list-tail . g$12665$1CmlGO)
        (list-ref . g$12664$1CmlGO)
        (list->vector . g$12663$1CmlGO)
        (list->string . g$12662$1CmlGO)
        (list . g$12661$1CmlGO)
        (length . g$12660$1CmlGO)
        (lcm . g$12659$1CmlGO)
        (integer? . g$12658$1CmlGO)
        (integer-valued? . g$12657$1CmlGO)
        (integer->char . g$12656$1CmlGO)
        (infinite? . g$12655$1CmlGO)
        (inexact? . g$12654$1CmlGO)
        (inexact . g$12653$1CmlGO)
        (imag-part . g$12652$1CmlGO)
        (gcd . g$12651$1CmlGO)
        (for-each . g$12650$1CmlGO)
        (floor . g$12649$1CmlGO)
        (finite? . g$12648$1CmlGO)
        (expt . g$12647$1CmlGO)
        (exp . g$12646$1CmlGO)
        (exact? . g$12645$1CmlGO)
        (exact-integer-sqrt . g$12644$1CmlGO)
        (exact . g$12643$1CmlGO)
        (even? . g$12642$1CmlGO)
        (error . g$12641$1CmlGO)
        (eqv? . g$12640$1CmlGO)
        (equal? . g$12639$1CmlGO)
        (eq? . g$12638$1CmlGO)
        (dynamic-wind . g$12637$1CmlGO)
        (div0-and-mod0 . g$12636$1CmlGO)
        (mod0 . g$12635$1CmlGO)
        (div0 . g$12634$1CmlGO)
        (div-and-mod . g$12633$1CmlGO)
        (mod . g$12632$1CmlGO)
        (div . g$12631$1CmlGO)
        (denominator . g$12630$1CmlGO)
        (cos . g$12629$1CmlGO)
        (cons . g$12628$1CmlGO)
        (complex? . g$12627$1CmlGO)
        (char? . g$12626$1CmlGO)
        (char>? . g$6718$1CmlGO)
        (char>=? . g$6720$1CmlGO)
        (char=? . g$6716$1CmlGO)
        (char<? . g$6717$1CmlGO)
        (char<=? . g$6719$1CmlGO)
        (char->integer . g$12625$1CmlGO)
        (ceiling . g$12624$1CmlGO)
        (call-with-values . g$12623$1CmlGO)
        (call/cc . g$12622$1CmlGO)
        (call-with-current-continuation . g$12621$1CmlGO)
        (cddddr . g$6640$1CmlGO)
        (cdddar . g$6639$1CmlGO)
        (cddadr . g$6638$1CmlGO)
        (cddaar . g$6637$1CmlGO)
        (cdaddr . g$6636$1CmlGO)
        (cdadar . g$6635$1CmlGO)
        (cdaadr . g$6634$1CmlGO)
        (cdaaar . g$6633$1CmlGO)
        (cadddr . g$6632$1CmlGO)
        (caddar . g$6631$1CmlGO)
        (cadadr . g$6630$1CmlGO)
        (cadaar . g$6629$1CmlGO)
        (caaddr . g$6628$1CmlGO)
        (caadar . g$6627$1CmlGO)
        (caaadr . g$6626$1CmlGO)
        (caaaar . g$6625$1CmlGO)
        (cdddr . g$6624$1CmlGO)
        (cddar . g$6623$1CmlGO)
        (cdadr . g$6622$1CmlGO)
        (cdaar . g$6621$1CmlGO)
        (caddr . g$6620$1CmlGO)
        (cadar . g$6619$1CmlGO)
        (caadr . g$6618$1CmlGO)
        (caaar . g$6617$1CmlGO)
        (cddr . g$6616$1CmlGO)
        (cdar . g$6615$1CmlGO)
        (cadr . g$6614$1CmlGO)
        (caar . g$6613$1CmlGO)
        (cdr . g$12620$1CmlGO)
        (car . g$12619$1CmlGO)
        (boolean? . g$12618$1CmlGO)
        (boolean=? . g$6681$1CmlGO)
        (atan . g$12617$1CmlGO)
        (assertion-violation . g$12616$1CmlGO)
        (asin . g$12615$1CmlGO)
        (apply . g$12614$1CmlGO)
        (append . g$12613$1CmlGO)
        (angle . g$12612$1CmlGO)
        (acos . g$12611$1CmlGO)
        (abs . g$12610$1CmlGO)
        (/ . g$12609$1CmlGO)
        (* . g$12608$1CmlGO)
        (- . g$12607$1CmlGO)
        (+ . g$12606$1CmlGO)
        (>= . g$12605$1CmlGO)
        (> . g$12604$1CmlGO)
        (= . g$12603$1CmlGO)
        (<= . g$12602$1CmlGO)
        (< . g$12601$1CmlGO)
        (unquote-splicing . g$12514$1CmlGO)
        (unquote . g$12513$1CmlGO)
        (_ . g$12512$1CmlGO)
        (else . g$12511$1CmlGO)
        (=> . g$12510$1CmlGO)
        (... . g$12509$1CmlGO)
        (assert . g$12508$1CmlGO)
        (or . g$12504$1CmlGO)
        (and . g$12503$1CmlGO)
        (cond . g$12501$1CmlGO)
        (let* . g$12500$1CmlGO)
        (let . g$12499$1CmlGO)
        (identifier-syntax . g$12498$1CmlGO)
        (quasiquote . g$12495$1CmlGO)
        (syntax-rules . g$12494$1CmlGO)
        (let-values . g$12490$1CmlGO)
        (let*-values . g$12489$1CmlGO)
        (case . g$12485$1CmlGO)
        (if . g$12481$1CmlGO)
        (letrec* . g$12480$1CmlGO)
        (letrec . g$12479$1CmlGO)
        (lambda . g$12476$1CmlGO)
        (quote . g$12473$1CmlGO)
        (letrec-syntax . g$12471$1CmlGO)
        (let-syntax . g$12470$1CmlGO)
        (set! . g$12469$1CmlGO)
        (begin . g$12465$1CmlGO)
        (define-syntax . g$12463$1CmlGO)
        (define . g$12462$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13105$1CmlGO
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$6528$1CmlGO)
        (remv . g$6529$1CmlGO)
        (remp . g$6511$1CmlGO)
        (remq . g$6530$1CmlGO)
        (partition . g$6510$1CmlGO)
        (memv . g$6518$1CmlGO)
        (memq . g$6517$1CmlGO)
        (memp . g$6520$1CmlGO)
        (member . g$6519$1CmlGO)
        (exists . g$6524$1CmlGO)
        (for-all . g$6523$1CmlGO)
        (fold-right . g$6527$1CmlGO)
        (fold-left . g$6526$1CmlGO)
        (find . g$6509$1CmlGO)
        (filter . g$6512$1CmlGO)
        (cons* . g$6525$1CmlGO)
        (assv . g$6514$1CmlGO)
        (assq . g$6513$1CmlGO)
        (assp . g$6516$1CmlGO)
        (assoc . g$6515$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13106$1CmlGO
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$8018$1CmlGO)
        (call-with-input-file . g$8017$1CmlGO)
        (write-char . g$12940$1CmlGO)
        (write . g$12939$1CmlGO)
        (with-output-to-file . g$8016$1CmlGO)
        (with-input-from-file . g$8015$1CmlGO)
        (read-char . g$12938$1CmlGO)
        (read . g$12937$1CmlGO)
        (peek-char . g$12936$1CmlGO)
        (open-output-file . g$12935$1CmlGO)
        (open-input-file . g$12934$1CmlGO)
        (newline . g$12933$1CmlGO)
        (display . g$12932$1CmlGO)
        (close-output-port . g$12931$1CmlGO)
        (close-input-port . g$12930$1CmlGO)
        (eof-object? . g$12929$1CmlGO)
        (eof-object . g$12928$1CmlGO)
        (current-error-port . g$12927$1CmlGO)
        (current-output-port . g$12926$1CmlGO)
        (current-input-port . g$12925$1CmlGO)
        (output-port? . g$12924$1CmlGO)
        (input-port? . g$12923$1CmlGO)
        (make-i/o-write-error . g$7850$1CmlGO)
        (make-i/o-read-error . g$7836$1CmlGO)
        (make-i/o-port-error . g$7955$1CmlGO)
        (make-i/o-invalid-position-error . g$7865$1CmlGO)
        (make-i/o-filename-error . g$7882$1CmlGO)
        (make-i/o-file-protection-error . g$7898$1CmlGO)
        (make-i/o-file-is-read-only-error . g$7912$1CmlGO)
        (make-i/o-file-does-not-exist-error . g$7940$1CmlGO)
        (make-i/o-file-already-exists-error . g$7926$1CmlGO)
        (make-i/o-error . g$7822$1CmlGO)
        (i/o-write-error? . g$7851$1CmlGO)
        (i/o-read-error? . g$7837$1CmlGO)
        (i/o-port-error? . g$7957$1CmlGO)
        (i/o-invalid-position-error? . g$7867$1CmlGO)
        (i/o-error-position . g$7868$1CmlGO)
        (i/o-filename-error? . g$7884$1CmlGO)
        (i/o-file-protection-error? . g$7899$1CmlGO)
        (i/o-file-is-read-only-error? . g$7913$1CmlGO)
        (i/o-file-does-not-exist-error? . g$7941$1CmlGO)
        (i/o-file-already-exists-error? . g$7927$1CmlGO)
        (i/o-error? . g$7823$1CmlGO)
        (i/o-error-port . g$7958$1CmlGO)
        (i/o-error-filename . g$7885$1CmlGO)
        (&i/o-port . g$12563$1CmlGO)
        (&i/o-file-does-not-exist . g$12562$1CmlGO)
        (&i/o-file-already-exists . g$12561$1CmlGO)
        (&i/o-file-is-read-only . g$12560$1CmlGO)
        (&i/o-file-protection . g$12559$1CmlGO)
        (&i/o-filename . g$12558$1CmlGO)
        (&i/o-invalid-position . g$12557$1CmlGO)
        (&i/o-write . g$12556$1CmlGO)
        (&i/o-read . g$12555$1CmlGO)
        (&i/o . g$12554$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13107$1CmlGO
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12883$1CmlGO)
        (utf32->string . g$12846$1CmlGO)
        (utf16->string . g$12845$1CmlGO)
        (utf8->string . g$12844$1CmlGO)
        (uint-list->bytevector . g$12843$1CmlGO)
        (u8-list->bytevector . g$12842$1CmlGO)
        (string->utf8 . g$12841$1CmlGO)
        (string->utf32 . g$12840$1CmlGO)
        (string->utf16 . g$12839$1CmlGO)
        (sint-list->bytevector . g$12838$1CmlGO)
        (native-endianness . g$7171$1CmlGO)
        (bytevector? . g$12837$1CmlGO)
        (bytevector=? . g$12836$1CmlGO)
        (bytevector-uint-set! . g$12835$1CmlGO)
        (bytevector-uint-ref . g$12834$1CmlGO)
        (bytevector-u8-set! . g$12833$1CmlGO)
        (bytevector-u8-ref . g$12832$1CmlGO)
        (bytevector-u64-set! . g$7192$1CmlGO)
        (bytevector-u64-ref . g$7188$1CmlGO)
        (bytevector-u64-native-set! . g$7194$1CmlGO)
        (bytevector-u64-native-ref . g$7190$1CmlGO)
        (bytevector-u32-set! . g$7184$1CmlGO)
        (bytevector-u32-ref . g$7180$1CmlGO)
        (bytevector-u32-native-set! . g$7186$1CmlGO)
        (bytevector-u32-native-ref . g$7182$1CmlGO)
        (bytevector-u16-set! . g$7176$1CmlGO)
        (bytevector-u16-ref . g$7172$1CmlGO)
        (bytevector-u16-native-set! . g$7178$1CmlGO)
        (bytevector-u16-native-ref . g$7174$1CmlGO)
        (bytevector-sint-set! . g$12831$1CmlGO)
        (bytevector-sint-ref . g$12830$1CmlGO)
        (bytevector-s8-set! . g$12829$1CmlGO)
        (bytevector-s8-ref . g$12828$1CmlGO)
        (bytevector-s64-set! . g$7193$1CmlGO)
        (bytevector-s64-ref . g$7189$1CmlGO)
        (bytevector-s64-native-set! . g$7195$1CmlGO)
        (bytevector-s64-native-ref . g$7191$1CmlGO)
        (bytevector-s32-set! . g$7185$1CmlGO)
        (bytevector-s32-ref . g$7181$1CmlGO)
        (bytevector-s32-native-set! . g$7187$1CmlGO)
        (bytevector-s32-native-ref . g$7183$1CmlGO)
        (bytevector-s16-set! . g$7177$1CmlGO)
        (bytevector-s16-ref . g$7173$1CmlGO)
        (bytevector-s16-native-set! . g$7179$1CmlGO)
        (bytevector-s16-native-ref . g$7175$1CmlGO)
        (bytevector-length . g$12827$1CmlGO)
        (bytevector-ieee-single-set! . g$12826$1CmlGO)
        (bytevector-ieee-single-ref . g$12825$1CmlGO)
        (bytevector-ieee-single-native-set! . g$7198$1CmlGO)
        (bytevector-ieee-single-native-ref . g$7196$1CmlGO)
        (bytevector-ieee-double-set! . g$12824$1CmlGO)
        (bytevector-ieee-double-ref . g$12823$1CmlGO)
        (bytevector-ieee-double-native-set! . g$7199$1CmlGO)
        (bytevector-ieee-double-native-ref . g$7197$1CmlGO)
        (bytevector-fill! . g$12822$1CmlGO)
        (bytevector-copy! . g$12821$1CmlGO)
        (bytevector-copy . g$12820$1CmlGO)
        (bytevector->uint-list . g$12819$1CmlGO)
        (bytevector->u8-list . g$12818$1CmlGO)
        (bytevector->sint-list . g$12817$1CmlGO)
        (endianness . g$12507$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13108$1CmlGO
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12990$1CmlGO)
        (string-titlecase . g$12989$1CmlGO)
        (string-normalize-nfkd . g$12988$1CmlGO)
        (string-normalize-nfkc . g$12987$1CmlGO)
        (string-normalize-nfd . g$12986$1CmlGO)
        (string-normalize-nfc . g$12985$1CmlGO)
        (string-foldcase . g$12984$1CmlGO)
        (string-downcase . g$12983$1CmlGO)
        (string-ci>? . g$7590$1CmlGO)
        (string-ci>=? . g$7592$1CmlGO)
        (string-ci=? . g$7588$1CmlGO)
        (string-ci<? . g$7589$1CmlGO)
        (string-ci<=? . g$7591$1CmlGO)
        (char-whitespace? . g$12982$1CmlGO)
        (char-upper-case? . g$12981$1CmlGO)
        (char-title-case? . g$12980$1CmlGO)
        (char-numeric? . g$12979$1CmlGO)
        (char-lower-case? . g$12978$1CmlGO)
        (char-general-category . g$12977$1CmlGO)
        (char-upcase . g$12976$1CmlGO)
        (char-titlecase . g$12975$1CmlGO)
        (char-foldcase . g$12974$1CmlGO)
        (char-downcase . g$12973$1CmlGO)
        (char-ci>? . g$7629$1CmlGO)
        (char-ci>=? . g$7631$1CmlGO)
        (char-ci=? . g$7627$1CmlGO)
        (char-ci<? . g$7628$1CmlGO)
        (char-ci<=? . g$7630$1CmlGO)
        (char-alphabetic? . g$12972$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13109$1CmlGO
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12854$1CmlGO)
        (raise-continuable . g$12853$1CmlGO)
        (raise . g$12852$1CmlGO)
        (guard . g$12522$1CmlGO)
        (else . g$12511$1CmlGO)
        (=> . g$12510$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13110$1CmlGO
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7691$1CmlGO)
        (bitwise-reverse-bit-field . g$12732$1CmlGO)
        (bitwise-length . g$12731$1CmlGO)
        (bitwise-if . g$7685$1CmlGO)
        (bitwise-first-bit-set . g$12730$1CmlGO)
        (bitwise-copy-bit-field . g$7688$1CmlGO)
        (bitwise-copy-bit . g$7686$1CmlGO)
        (bitwise-bit-set? . g$12729$1CmlGO)
        (bitwise-bit-field . g$12728$1CmlGO)
        (bitwise-bit-count . g$12727$1CmlGO)
        (bitwise-xor . g$12726$1CmlGO)
        (bitwise-ior . g$12725$1CmlGO)
        (bitwise-and . g$12724$1CmlGO)
        (bitwise-not . g$12723$1CmlGO)
        (bitwise-arithmetic-shift-right . g$7690$1CmlGO)
        (bitwise-arithmetic-shift-left . g$7689$1CmlGO)
        (bitwise-arithmetic-shift . g$12722$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13111$1CmlGO
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12770$1CmlGO)
        (fxxor . g$12769$1CmlGO)
        (fxrotate-bit-field . g$7739$1CmlGO)
        (fxreverse-bit-field . g$12768$1CmlGO)
        (fxpositive? . g$12767$1CmlGO)
        (fxodd? . g$12766$1CmlGO)
        (fxnot . g$12765$1CmlGO)
        (fxnegative? . g$12764$1CmlGO)
        (fxmod0 . g$12763$1CmlGO)
        (fxmod . g$12762$1CmlGO)
        (fxmin . g$12761$1CmlGO)
        (fxmax . g$12760$1CmlGO)
        (fxlength . g$12759$1CmlGO)
        (fxior . g$12758$1CmlGO)
        (fxif . g$7733$1CmlGO)
        (fxfirst-bit-set . g$12757$1CmlGO)
        (fxeven? . g$12756$1CmlGO)
        (fxdiv0-and-mod0 . g$12755$1CmlGO)
        (fxdiv0 . g$12754$1CmlGO)
        (fxdiv-and-mod . g$12753$1CmlGO)
        (fxdiv . g$12752$1CmlGO)
        (fxcopy-bit-field . g$7736$1CmlGO)
        (fxcopy-bit . g$7734$1CmlGO)
        (fxbit-set? . g$12751$1CmlGO)
        (fxbit-field . g$7735$1CmlGO)
        (fxbit-count . g$12750$1CmlGO)
        (fxarithmetic-shift-right . g$7738$1CmlGO)
        (fxarithmetic-shift-left . g$7737$1CmlGO)
        (fxarithmetic-shift . g$12749$1CmlGO)
        (fxand . g$12748$1CmlGO)
        (fx>? . g$12747$1CmlGO)
        (fx>=? . g$12746$1CmlGO)
        (fx=? . g$12745$1CmlGO)
        (fx<? . g$12744$1CmlGO)
        (fx<=? . g$12743$1CmlGO)
        (fx-/carry . g$12742$1CmlGO)
        (fx- . g$12741$1CmlGO)
        (fx+/carry . g$12740$1CmlGO)
        (fx+ . g$12739$1CmlGO)
        (fx*/carry . g$12738$1CmlGO)
        (fx* . g$12737$1CmlGO)
        (greatest-fixnum . g$12736$1CmlGO)
        (least-fixnum . g$12735$1CmlGO)
        (fixnum-width . g$12734$1CmlGO)
        (fixnum? . g$12733$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13112$1CmlGO
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7808$1CmlGO)
        (no-infinities-violation? . g$7794$1CmlGO)
        (make-no-nans-violation . g$7807$1CmlGO)
        (make-no-infinities-violation . g$7793$1CmlGO)
        (real->flonum . g$12816$1CmlGO)
        (flzero? . g$12815$1CmlGO)
        (fltruncate . g$12814$1CmlGO)
        (fltan . g$12813$1CmlGO)
        (flsqrt . g$12812$1CmlGO)
        (flsin . g$12811$1CmlGO)
        (flround . g$12810$1CmlGO)
        (flpositive? . g$12809$1CmlGO)
        (flonum? . g$12808$1CmlGO)
        (flodd? . g$12807$1CmlGO)
        (flnumerator . g$12806$1CmlGO)
        (flnegative? . g$12805$1CmlGO)
        (flnan? . g$12804$1CmlGO)
        (flmod0 . g$12803$1CmlGO)
        (flmod . g$12802$1CmlGO)
        (flmin . g$12801$1CmlGO)
        (flmax . g$12800$1CmlGO)
        (fllog . g$12799$1CmlGO)
        (flinteger? . g$12798$1CmlGO)
        (flinfinite? . g$12797$1CmlGO)
        (flfloor . g$12796$1CmlGO)
        (flfinite? . g$12795$1CmlGO)
        (flexpt . g$12794$1CmlGO)
        (flexp . g$12793$1CmlGO)
        (fleven? . g$12792$1CmlGO)
        (fldiv0-and-mod0 . g$12791$1CmlGO)
        (fldiv0 . g$12790$1CmlGO)
        (fldiv-and-mod . g$12789$1CmlGO)
        (fldiv . g$12788$1CmlGO)
        (fldenominator . g$12787$1CmlGO)
        (flcos . g$12786$1CmlGO)
        (flceiling . g$12785$1CmlGO)
        (flatan . g$12784$1CmlGO)
        (flasin . g$12783$1CmlGO)
        (flacos . g$12782$1CmlGO)
        (flabs . g$12781$1CmlGO)
        (fl>? . g$12780$1CmlGO)
        (fl>=? . g$12779$1CmlGO)
        (fl=? . g$12778$1CmlGO)
        (fl<? . g$12777$1CmlGO)
        (fl<=? . g$12776$1CmlGO)
        (fl/ . g$12775$1CmlGO)
        (fl- . g$12774$1CmlGO)
        (fl+ . g$12773$1CmlGO)
        (fl* . g$12772$1CmlGO)
        (fixnum->flonum . g$12771$1CmlGO)
        (&no-nans . g$12567$1CmlGO)
        (&no-infinities . g$12566$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13113$1CmlGO
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12952$1CmlGO)
        (string-ci-hash . g$12951$1CmlGO)
        (string-hash . g$12950$1CmlGO)
        (equal-hash . g$12949$1CmlGO)
        (hashtable-equivalence-function . g$12948$1CmlGO)
        (make-hashtable . g$12947$1CmlGO)
        (hashtable-hash-function . g$12946$1CmlGO)
        (make-eqv-hashtable . g$7132$1CmlGO)
        (make-eq-hashtable . g$7131$1CmlGO)
        (hashtable? . g$12945$1CmlGO)
        (hashtable-update! . g$7138$1CmlGO)
        (hashtable-size . g$7133$1CmlGO)
        (hashtable-set! . g$7135$1CmlGO)
        (hashtable-ref . g$7134$1CmlGO)
        (hashtable-mutable? . g$12944$1CmlGO)
        (hashtable-keys . g$12943$1CmlGO)
        (hashtable-entries . g$12942$1CmlGO)
        (hashtable-delete! . g$7136$1CmlGO)
        (hashtable-copy . g$12941$1CmlGO)
        (hashtable-contains? . g$7137$1CmlGO)
        (hashtable-clear! . g$7139$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13114$1CmlGO
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12929$1CmlGO)
        (eof-object . g$12928$1CmlGO)
        (current-error-port . g$12927$1CmlGO)
        (current-output-port . g$12926$1CmlGO)
        (current-input-port . g$12925$1CmlGO)
        (output-port? . g$12924$1CmlGO)
        (input-port? . g$12923$1CmlGO)
        (utf-8-codec . g$12922$1CmlGO)
        (utf-16-codec . g$12921$1CmlGO)
        (transcoder-error-handling-mode . g$12920$1CmlGO)
        (transcoder-eol-style . g$12919$1CmlGO)
        (transcoder-codec . g$12918$1CmlGO)
        (transcoded-port . g$12917$1CmlGO)
        (textual-port? . g$12916$1CmlGO)
        (string->bytevector . g$12915$1CmlGO)
        (standard-output-port . g$12914$1CmlGO)
        (standard-input-port . g$12913$1CmlGO)
        (standard-error-port . g$12912$1CmlGO)
        (set-port-position! . g$12911$1CmlGO)
        (put-u8 . g$12910$1CmlGO)
        (put-string . g$12909$1CmlGO)
        (put-datum . g$12908$1CmlGO)
        (put-char . g$12907$1CmlGO)
        (put-bytevector . g$12906$1CmlGO)
        (port? . g$7994$1CmlGO)
        (port-transcoder . g$12905$1CmlGO)
        (port-position . g$12904$1CmlGO)
        (port-has-set-port-position!? . g$12903$1CmlGO)
        (port-has-port-position? . g$12902$1CmlGO)
        (port-eof? . g$12901$1CmlGO)
        (output-port-buffer-mode . g$12900$1CmlGO)
        (open-string-output-port . g$7993$1CmlGO)
        (open-string-input-port . g$12899$1CmlGO)
        (open-file-output-port . g$12898$1CmlGO)
        (open-file-input/output-port . g$12897$1CmlGO)
        (open-file-input-port . g$12896$1CmlGO)
        (open-bytevector-output-port . g$12895$1CmlGO)
        (open-bytevector-input-port . g$12894$1CmlGO)
        (native-transcoder . g$12893$1CmlGO)
        (native-eol-style . g$12892$1CmlGO)
        (make-transcoder . g$12891$1CmlGO)
        (latin-1-codec . g$12890$1CmlGO)
        (make-i/o-write-error . g$7850$1CmlGO)
        (make-i/o-read-error . g$7836$1CmlGO)
        (make-i/o-port-error . g$7955$1CmlGO)
        (make-i/o-invalid-position-error . g$7865$1CmlGO)
        (make-i/o-filename-error . g$7882$1CmlGO)
        (make-i/o-file-protection-error . g$7898$1CmlGO)
        (make-i/o-file-is-read-only-error . g$7912$1CmlGO)
        (make-i/o-file-does-not-exist-error . g$7940$1CmlGO)
        (make-i/o-file-already-exists-error . g$7926$1CmlGO)
        (make-i/o-error . g$7822$1CmlGO)
        (make-i/o-encoding-error . g$7986$1CmlGO)
        (make-i/o-decoding-error . g$7971$1CmlGO)
        (make-custom-textual-output-port . g$12889$1CmlGO)
        (make-custom-textual-input/output-port . g$12888$1CmlGO)
        (make-custom-textual-input-port . g$12887$1CmlGO)
        (make-custom-binary-output-port . g$12886$1CmlGO)
        (make-custom-binary-input/output-port . g$12885$1CmlGO)
        (make-custom-binary-input-port . g$12884$1CmlGO)
        (lookahead-u8 . g$12882$1CmlGO)
        (lookahead-char . g$12881$1CmlGO)
        (i/o-write-error? . g$7851$1CmlGO)
        (i/o-read-error? . g$7837$1CmlGO)
        (i/o-port-error? . g$7957$1CmlGO)
        (i/o-invalid-position-error? . g$7867$1CmlGO)
        (i/o-error-position . g$7868$1CmlGO)
        (i/o-filename-error? . g$7884$1CmlGO)
        (i/o-file-protection-error? . g$7899$1CmlGO)
        (i/o-file-is-read-only-error? . g$7913$1CmlGO)
        (i/o-file-does-not-exist-error? . g$7941$1CmlGO)
        (i/o-file-already-exists-error? . g$7927$1CmlGO)
        (i/o-error? . g$7823$1CmlGO)
        (i/o-error-port . g$7958$1CmlGO)
        (i/o-error-filename . g$7885$1CmlGO)
        (i/o-encoding-error? . g$7988$1CmlGO)
        (i/o-encoding-error-char . g$7989$1CmlGO)
        (i/o-decoding-error? . g$7972$1CmlGO)
        (get-u8 . g$12880$1CmlGO)
        (get-string-n! . g$12879$1CmlGO)
        (get-string-n . g$12878$1CmlGO)
        (get-string-all . g$12877$1CmlGO)
        (get-line . g$12876$1CmlGO)
        (get-datum . g$12875$1CmlGO)
        (get-char . g$12874$1CmlGO)
        (get-bytevector-some . g$12873$1CmlGO)
        (get-bytevector-n! . g$12872$1CmlGO)
        (get-bytevector-n . g$12871$1CmlGO)
        (get-bytevector-all . g$12870$1CmlGO)
        (flush-output-port . g$12869$1CmlGO)
        (close-port . g$12868$1CmlGO)
        (call-with-string-output-port . g$12867$1CmlGO)
        (call-with-port . g$12866$1CmlGO)
        (call-with-bytevector-output-port . g$12865$1CmlGO)
        (bytevector->string . g$12864$1CmlGO)
        (buffer-mode? . g$12863$1CmlGO)
        (binary-port? . g$12862$1CmlGO)
        (&i/o-encoding . g$12565$1CmlGO)
        (&i/o-decoding . g$12564$1CmlGO)
        (&i/o-port . g$12563$1CmlGO)
        (&i/o-file-does-not-exist . g$12562$1CmlGO)
        (&i/o-file-already-exists . g$12561$1CmlGO)
        (&i/o-file-is-read-only . g$12560$1CmlGO)
        (&i/o-file-protection . g$12559$1CmlGO)
        (&i/o-filename . g$12558$1CmlGO)
        (&i/o-invalid-position . g$12557$1CmlGO)
        (&i/o-write . g$12556$1CmlGO)
        (&i/o-read . g$12555$1CmlGO)
        (&i/o . g$12554$1CmlGO)
        (error-handling-mode . g$12526$1CmlGO)
        (file-options . g$12525$1CmlGO)
        (buffer-mode . g$12524$1CmlGO)
        (eol-style . g$12523$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13115$1CmlGO
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$8076$1CmlGO)
        (enum-set=? . g$8083$1CmlGO)
        (enum-set-universe . g$8077$1CmlGO)
        (enum-set-union . g$8084$1CmlGO)
        (enum-set-subset? . g$8082$1CmlGO)
        (enum-set-projection . g$8088$1CmlGO)
        (enum-set-member? . g$8081$1CmlGO)
        (enum-set-intersection . g$8085$1CmlGO)
        (enum-set-indexer . g$8078$1CmlGO)
        (enum-set-difference . g$8086$1CmlGO)
        (enum-set-constructor . g$8079$1CmlGO)
        (enum-set-complement . g$8087$1CmlGO)
        (enum-set->list . g$8080$1CmlGO)
        (define-enumeration . g$12537$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13116$1CmlGO
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$7419$1CmlGO)
        (warning? . g$7330$1CmlGO)
        (violation? . g$7372$1CmlGO)
        (undefined-violation? . g$7496$1CmlGO)
        (syntax-violation? . g$7480$1CmlGO)
        (syntax-violation-subform . g$7482$1CmlGO)
        (syntax-violation-form . g$7481$1CmlGO)
        (syntax-violation . g$9475$1CmlGO)
        (simple-conditions . g$12851$1CmlGO)
        (serious-condition? . g$7344$1CmlGO)
        (non-continuable-violation? . g$7434$1CmlGO)
        (message-condition? . g$7315$1CmlGO)
        (make-who-condition . g$7417$1CmlGO)
        (make-warning . g$7329$1CmlGO)
        (make-violation . g$7371$1CmlGO)
        (make-undefined-violation . g$7495$1CmlGO)
        (make-syntax-violation . g$7477$1CmlGO)
        (make-serious-condition . g$7343$1CmlGO)
        (make-non-continuable-violation . g$7433$1CmlGO)
        (make-message-condition . g$7313$1CmlGO)
        (make-lexical-violation . g$7461$1CmlGO)
        (make-irritants-condition . g$7400$1CmlGO)
        (make-implementation-restriction-violation . g$7447$1CmlGO)
        (make-error . g$7357$1CmlGO)
        (make-assertion-violation . g$7385$1CmlGO)
        (lexical-violation? . g$7462$1CmlGO)
        (irritants-condition? . g$7402$1CmlGO)
        (implementation-restriction-violation? . g$7448$1CmlGO)
        (error? . g$7358$1CmlGO)
        (condition-who . g$7420$1CmlGO)
        (condition-predicate . g$12850$1CmlGO)
        (condition-message . g$7316$1CmlGO)
        (condition-irritants . g$7403$1CmlGO)
        (condition-accessor . g$12849$1CmlGO)
        (condition . g$12848$1CmlGO)
        (assertion-violation? . g$7386$1CmlGO)
        (condition? . g$12847$1CmlGO)
        (&non-continuable . g$12553$1CmlGO)
        (&undefined . g$12552$1CmlGO)
        (&syntax . g$12551$1CmlGO)
        (&lexical . g$12550$1CmlGO)
        (&implementation-restriction . g$12549$1CmlGO)
        (&who . g$12547$1CmlGO)
        (&irritants . g$12546$1CmlGO)
        (&assertion . g$12545$1CmlGO)
        (&violation . g$12544$1CmlGO)
        (&error . g$12543$1CmlGO)
        (&serious . g$12542$1CmlGO)
        (&warning . g$12541$1CmlGO)
        (&message . g$12540$1CmlGO)
        (&condition . g$12539$1CmlGO)
        (define-condition-type . g$12538$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13117$1CmlGO
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12964$1CmlGO)
        (record-type-uid . g$12963$1CmlGO)
        (record-type-sealed? . g$12962$1CmlGO)
        (record-type-parent . g$12961$1CmlGO)
        (record-type-opaque? . g$12960$1CmlGO)
        (record-type-name . g$12959$1CmlGO)
        (record-type-generative? . g$12958$1CmlGO)
        (record-type-field-names . g$12957$1CmlGO)
        (record-rtd . g$12956$1CmlGO)
        (record-field-mutable? . g$12955$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13118$1CmlGO
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12971$1CmlGO)
        (record-predicate . g$12970$1CmlGO)
        (record-mutator . g$12969$1CmlGO)
        (record-constructor . g$12968$1CmlGO)
        (record-accessor . g$12967$1CmlGO)
        (make-record-type-descriptor . g$12966$1CmlGO)
        (make-record-constructor-descriptor . g$12965$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13119$1CmlGO
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$12536$1CmlGO)
        (parent-rtd . g$12535$1CmlGO)
        (nongenerative . g$12534$1CmlGO)
        (opaque . g$12533$1CmlGO)
        (sealed . g$12532$1CmlGO)
        (protocol . g$12531$1CmlGO)
        (parent . g$12530$1CmlGO)
        (immutable . g$12529$1CmlGO)
        (mutable . g$12528$1CmlGO)
        (fields . g$12527$1CmlGO)
        (record-constructor-descriptor . g$12488$1CmlGO)
        (record-type-descriptor . g$12487$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13120$1CmlGO
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9348$1CmlGO)
        (&no-nans-rcd . g$13084$1CmlGO)
        (&no-nans-rtd . g$13083$1CmlGO)
        (&no-infinities-rcd . g$13082$1CmlGO)
        (&no-infinities-rtd . g$13081$1CmlGO)
        (&i/o-encoding-rcd . g$13080$1CmlGO)
        (&i/o-encoding-rtd . g$13079$1CmlGO)
        (&i/o-decoding-rcd . g$13078$1CmlGO)
        (&i/o-decoding-rtd . g$13077$1CmlGO)
        (&i/o-port-rcd . g$13076$1CmlGO)
        (&i/o-port-rtd . g$13075$1CmlGO)
        (&i/o-file-does-not-exist-rcd . g$13074$1CmlGO)
        (&i/o-file-does-not-exist-rtd . g$13073$1CmlGO)
        (&i/o-file-already-exists-rcd . g$13072$1CmlGO)
        (&i/o-file-already-exists-rtd . g$13071$1CmlGO)
        (&i/o-file-is-read-only-rcd . g$13070$1CmlGO)
        (&i/o-file-is-read-only-rtd . g$13069$1CmlGO)
        (&i/o-file-protection-rcd . g$13068$1CmlGO)
        (&i/o-file-protection-rtd . g$13067$1CmlGO)
        (&i/o-filename-rcd . g$13066$1CmlGO)
        (&i/o-filename-rtd . g$13065$1CmlGO)
        (&i/o-invalid-position-rcd . g$13064$1CmlGO)
        (&i/o-invalid-position-rtd . g$13063$1CmlGO)
        (&i/o-write-rcd . g$13062$1CmlGO)
        (&i/o-write-rtd . g$13061$1CmlGO)
        (&i/o-read-rcd . g$13060$1CmlGO)
        (&i/o-read-rtd . g$13059$1CmlGO)
        (&i/o-rcd . g$13058$1CmlGO)
        (&i/o-rtd . g$13057$1CmlGO)
        (&undefined-rcd . g$13056$1CmlGO)
        (&undefined-rtd . g$13055$1CmlGO)
        (&syntax-rcd . g$13054$1CmlGO)
        (&syntax-rtd . g$13053$1CmlGO)
        (&lexical-rcd . g$13052$1CmlGO)
        (&lexical-rtd . g$13051$1CmlGO)
        (&implementation-restriction-rcd . g$13050$1CmlGO)
        (&implementation-restriction-rtd . g$13049$1CmlGO)
        (&non-continuable-rcd . g$13048$1CmlGO)
        (&non-continuable-rtd . g$13047$1CmlGO)
        (&who-rcd . g$13046$1CmlGO)
        (&who-rtd . g$13045$1CmlGO)
        (&irritants-rcd . g$13044$1CmlGO)
        (&irritants-rtd . g$13043$1CmlGO)
        (&assertion-rcd . g$13042$1CmlGO)
        (&assertion-rtd . g$13041$1CmlGO)
        (&violation-rcd . g$13040$1CmlGO)
        (&violation-rtd . g$13039$1CmlGO)
        (&error-rcd . g$13038$1CmlGO)
        (&error-rtd . g$13037$1CmlGO)
        (&serious-rcd . g$13036$1CmlGO)
        (&serious-rtd . g$13035$1CmlGO)
        (&warning-rcd . g$13034$1CmlGO)
        (&warning-rtd . g$13033$1CmlGO)
        (&message-rcd . g$13032$1CmlGO)
        (&message-rtd . g$13031$1CmlGO)
        (&condition-rcd . g$13030$1CmlGO)
        (&condition-rtd . g$13029$1CmlGO)
        (library-letrec* . g$13028$1CmlGO)
        (annotation-stripped . g$13027$1CmlGO)
        (annotation-source . g$13026$1CmlGO)
        (annotation-expression . g$13025$1CmlGO)
        (annotation? . g$13024$1CmlGO)
        (read-annotated . g$13023$1CmlGO)
        (tanh . g$13022$1CmlGO)
        (cosh . g$13021$1CmlGO)
        (sinh . g$13020$1CmlGO)
        (make-guid . g$13019$1CmlGO)
        (unspecified? . g$13018$1CmlGO)
        (make-trace . g$13017$1CmlGO)
        (make-list . g$13016$1CmlGO)
        (last-pair . g$13015$1CmlGO)
        (load-r5rs . g$13014$1CmlGO)
        (license . g$13013$1CmlGO)
        (stacktrace . g$13012$1CmlGO)
        (ironscheme-build . g$12430$1CmlGO)
        (define-clr-class-internal . g$13011$1CmlGO)
        (clr-field-set!-internal . g$13010$1CmlGO)
        (clr-field-get-internal . g$13009$1CmlGO)
        (clr-cast-internal . g$13008$1CmlGO)
        (clr-call-internal . g$13007$1CmlGO)
        (clr-new-internal . g$13006$1CmlGO)
        (clr-new-array-internal . g$13005$1CmlGO)
        (clr-is-internal . g$13004$1CmlGO)
        (clr-reference-internal . g$13003$1CmlGO)
        (clr-using-internal . g$13002$1CmlGO)
        (clr-clear-usings-internal . g$13001$1CmlGO)
        (syntax-error . g$9472$1CmlGO)
        (syntax-dispatch . g$9343$1CmlGO)
        (compile-core . g$13000$1CmlGO)
        (eval-core . g$12999$1CmlGO)
        (set-symbol-value! . g$12998$1CmlGO)
        (symbol-value . g$12997$1CmlGO)
        (ungensym . g$12996$1CmlGO)
        (gensym . g$12995$1CmlGO)
        (void . g$12994$1CmlGO)
        (load-serialized-library . g$12993$1CmlGO)
        (serialize-library . g$12992$1CmlGO)
        (compile-system-libraries . g$12432$1CmlGO)
        (compile->closure . g$12434$1CmlGO)
        (compile . g$12433$1CmlGO)
        (load . g$12429$1CmlGO)
        (interaction-environment . g$9481$1CmlGO)
        (char-ready? . g$12991$1CmlGO)
        (string-upcase . g$12990$1CmlGO)
        (string-titlecase . g$12989$1CmlGO)
        (string-normalize-nfkd . g$12988$1CmlGO)
        (string-normalize-nfkc . g$12987$1CmlGO)
        (string-normalize-nfd . g$12986$1CmlGO)
        (string-normalize-nfc . g$12985$1CmlGO)
        (string-foldcase . g$12984$1CmlGO)
        (string-downcase . g$12983$1CmlGO)
        (string-ci>? . g$7590$1CmlGO)
        (string-ci>=? . g$7592$1CmlGO)
        (string-ci=? . g$7588$1CmlGO)
        (string-ci<? . g$7589$1CmlGO)
        (string-ci<=? . g$7591$1CmlGO)
        (char-whitespace? . g$12982$1CmlGO)
        (char-upper-case? . g$12981$1CmlGO)
        (char-title-case? . g$12980$1CmlGO)
        (char-numeric? . g$12979$1CmlGO)
        (char-lower-case? . g$12978$1CmlGO)
        (char-general-category . g$12977$1CmlGO)
        (char-upcase . g$12976$1CmlGO)
        (char-titlecase . g$12975$1CmlGO)
        (char-foldcase . g$12974$1CmlGO)
        (char-downcase . g$12973$1CmlGO)
        (char-ci>? . g$7629$1CmlGO)
        (char-ci>=? . g$7631$1CmlGO)
        (char-ci=? . g$7627$1CmlGO)
        (char-ci<? . g$7628$1CmlGO)
        (char-ci<=? . g$7630$1CmlGO)
        (char-alphabetic? . g$12972$1CmlGO)
        (variable-transformer-procedure . g$9080$1CmlGO)
        (variable-transformer? . g$9079$1CmlGO)
        (make-variable-transformer . g$9078$1CmlGO)
        (identifier? . g$9476$1CmlGO)
        (generate-temporaries . g$9465$1CmlGO)
        (free-identifier=? . g$9466$1CmlGO)
        (syntax->datum . g$9478$1CmlGO)
        (datum->syntax . g$9477$1CmlGO)
        (bound-identifier=? . g$9467$1CmlGO)
        (record-type-descriptor? . g$12971$1CmlGO)
        (record-predicate . g$12970$1CmlGO)
        (record-mutator . g$12969$1CmlGO)
        (record-constructor . g$12968$1CmlGO)
        (record-accessor . g$12967$1CmlGO)
        (make-record-type-descriptor . g$12966$1CmlGO)
        (make-record-constructor-descriptor . g$12965$1CmlGO)
        (record? . g$12964$1CmlGO)
        (record-type-uid . g$12963$1CmlGO)
        (record-type-sealed? . g$12962$1CmlGO)
        (record-type-parent . g$12961$1CmlGO)
        (record-type-opaque? . g$12960$1CmlGO)
        (record-type-name . g$12959$1CmlGO)
        (record-type-generative? . g$12958$1CmlGO)
        (record-type-field-names . g$12957$1CmlGO)
        (record-rtd . g$12956$1CmlGO)
        (record-field-mutable? . g$12955$1CmlGO)
        (delete-file . g$7165$1CmlGO)
        (file-exists? . g$7164$1CmlGO)
        (vector-sort! . g$12954$1CmlGO)
        (vector-sort . g$12953$1CmlGO)
        (list-sort . g$7528$1CmlGO)
        (symbol-hash . g$12952$1CmlGO)
        (string-ci-hash . g$12951$1CmlGO)
        (string-hash . g$12950$1CmlGO)
        (equal-hash . g$12949$1CmlGO)
        (hashtable-equivalence-function . g$12948$1CmlGO)
        (make-hashtable . g$12947$1CmlGO)
        (hashtable-hash-function . g$12946$1CmlGO)
        (make-eqv-hashtable . g$7132$1CmlGO)
        (make-eq-hashtable . g$7131$1CmlGO)
        (hashtable? . g$12945$1CmlGO)
        (hashtable-update! . g$7138$1CmlGO)
        (hashtable-size . g$7133$1CmlGO)
        (hashtable-set! . g$7135$1CmlGO)
        (hashtable-ref . g$7134$1CmlGO)
        (hashtable-mutable? . g$12944$1CmlGO)
        (hashtable-keys . g$12943$1CmlGO)
        (hashtable-entries . g$12942$1CmlGO)
        (hashtable-delete! . g$7136$1CmlGO)
        (hashtable-copy . g$12941$1CmlGO)
        (hashtable-contains? . g$7137$1CmlGO)
        (hashtable-clear! . g$7139$1CmlGO)
        (call-with-output-file . g$8018$1CmlGO)
        (call-with-input-file . g$8017$1CmlGO)
        (write-char . g$12940$1CmlGO)
        (write . g$12939$1CmlGO)
        (with-output-to-file . g$8016$1CmlGO)
        (with-input-from-file . g$8015$1CmlGO)
        (read-char . g$12938$1CmlGO)
        (read . g$12937$1CmlGO)
        (peek-char . g$12936$1CmlGO)
        (open-output-file . g$12935$1CmlGO)
        (open-input-file . g$12934$1CmlGO)
        (newline . g$12933$1CmlGO)
        (display . g$12932$1CmlGO)
        (close-output-port . g$12931$1CmlGO)
        (close-input-port . g$12930$1CmlGO)
        (eof-object? . g$12929$1CmlGO)
        (eof-object . g$12928$1CmlGO)
        (current-error-port . g$12927$1CmlGO)
        (current-output-port . g$12926$1CmlGO)
        (current-input-port . g$12925$1CmlGO)
        (output-port? . g$12924$1CmlGO)
        (input-port? . g$12923$1CmlGO)
        (utf-8-codec . g$12922$1CmlGO)
        (utf-16-codec . g$12921$1CmlGO)
        (transcoder-error-handling-mode . g$12920$1CmlGO)
        (transcoder-eol-style . g$12919$1CmlGO)
        (transcoder-codec . g$12918$1CmlGO)
        (transcoded-port . g$12917$1CmlGO)
        (textual-port? . g$12916$1CmlGO)
        (string->bytevector . g$12915$1CmlGO)
        (standard-output-port . g$12914$1CmlGO)
        (standard-input-port . g$12913$1CmlGO)
        (standard-error-port . g$12912$1CmlGO)
        (set-port-position! . g$12911$1CmlGO)
        (put-u8 . g$12910$1CmlGO)
        (put-string . g$12909$1CmlGO)
        (put-datum . g$12908$1CmlGO)
        (put-char . g$12907$1CmlGO)
        (put-bytevector . g$12906$1CmlGO)
        (port? . g$7994$1CmlGO)
        (port-transcoder . g$12905$1CmlGO)
        (port-position . g$12904$1CmlGO)
        (port-has-set-port-position!? . g$12903$1CmlGO)
        (port-has-port-position? . g$12902$1CmlGO)
        (port-eof? . g$12901$1CmlGO)
        (output-port-buffer-mode . g$12900$1CmlGO)
        (open-string-output-port . g$7993$1CmlGO)
        (open-string-input-port . g$12899$1CmlGO)
        (open-file-output-port . g$12898$1CmlGO)
        (open-file-input/output-port . g$12897$1CmlGO)
        (open-file-input-port . g$12896$1CmlGO)
        (open-bytevector-output-port . g$12895$1CmlGO)
        (open-bytevector-input-port . g$12894$1CmlGO)
        (native-transcoder . g$12893$1CmlGO)
        (native-eol-style . g$12892$1CmlGO)
        (make-transcoder . g$12891$1CmlGO)
        (latin-1-codec . g$12890$1CmlGO)
        (make-i/o-write-error . g$7850$1CmlGO)
        (make-i/o-read-error . g$7836$1CmlGO)
        (make-i/o-port-error . g$7955$1CmlGO)
        (make-i/o-invalid-position-error . g$7865$1CmlGO)
        (make-i/o-filename-error . g$7882$1CmlGO)
        (make-i/o-file-protection-error . g$7898$1CmlGO)
        (make-i/o-file-is-read-only-error . g$7912$1CmlGO)
        (make-i/o-file-does-not-exist-error . g$7940$1CmlGO)
        (make-i/o-file-already-exists-error . g$7926$1CmlGO)
        (make-i/o-error . g$7822$1CmlGO)
        (make-i/o-encoding-error . g$7986$1CmlGO)
        (make-i/o-decoding-error . g$7971$1CmlGO)
        (make-custom-textual-output-port . g$12889$1CmlGO)
        (make-custom-textual-input/output-port . g$12888$1CmlGO)
        (make-custom-textual-input-port . g$12887$1CmlGO)
        (make-custom-binary-output-port . g$12886$1CmlGO)
        (make-custom-binary-input/output-port . g$12885$1CmlGO)
        (make-custom-binary-input-port . g$12884$1CmlGO)
        (make-bytevector . g$12883$1CmlGO)
        (lookahead-u8 . g$12882$1CmlGO)
        (lookahead-char . g$12881$1CmlGO)
        (i/o-write-error? . g$7851$1CmlGO)
        (i/o-read-error? . g$7837$1CmlGO)
        (i/o-port-error? . g$7957$1CmlGO)
        (i/o-invalid-position-error? . g$7867$1CmlGO)
        (i/o-error-position . g$7868$1CmlGO)
        (i/o-filename-error? . g$7884$1CmlGO)
        (i/o-file-protection-error? . g$7899$1CmlGO)
        (i/o-file-is-read-only-error? . g$7913$1CmlGO)
        (i/o-file-does-not-exist-error? . g$7941$1CmlGO)
        (i/o-file-already-exists-error? . g$7927$1CmlGO)
        (i/o-error? . g$7823$1CmlGO)
        (i/o-error-port . g$7958$1CmlGO)
        (i/o-error-filename . g$7885$1CmlGO)
        (i/o-encoding-error? . g$7988$1CmlGO)
        (i/o-encoding-error-char . g$7989$1CmlGO)
        (i/o-decoding-error? . g$7972$1CmlGO)
        (get-u8 . g$12880$1CmlGO)
        (get-string-n! . g$12879$1CmlGO)
        (get-string-n . g$12878$1CmlGO)
        (get-string-all . g$12877$1CmlGO)
        (get-line . g$12876$1CmlGO)
        (get-datum . g$12875$1CmlGO)
        (get-char . g$12874$1CmlGO)
        (get-bytevector-some . g$12873$1CmlGO)
        (get-bytevector-n! . g$12872$1CmlGO)
        (get-bytevector-n . g$12871$1CmlGO)
        (get-bytevector-all . g$12870$1CmlGO)
        (flush-output-port . g$12869$1CmlGO)
        (close-port . g$12868$1CmlGO)
        (call-with-string-output-port . g$12867$1CmlGO)
        (call-with-port . g$12866$1CmlGO)
        (call-with-bytevector-output-port . g$12865$1CmlGO)
        (bytevector->string . g$12864$1CmlGO)
        (buffer-mode? . g$12863$1CmlGO)
        (binary-port? . g$12862$1CmlGO)
        (scheme-report-environment . g$9456$1CmlGO)
        (quotient . g$7508$1CmlGO)
        (null-environment . g$9455$1CmlGO)
        (remainder . g$7509$1CmlGO)
        (modulo . g$7510$1CmlGO)
        (inexact->exact . g$12861$1CmlGO)
        (force . g$7512$1CmlGO)
        (exact->inexact . g$12860$1CmlGO)
        (exit . g$12859$1CmlGO)
        (command-line . g$12426$1CmlGO)
        (string-fill! . g$12858$1CmlGO)
        (string-set! . g$12857$1CmlGO)
        (set-cdr! . g$12856$1CmlGO)
        (set-car! . g$12855$1CmlGO)
        (remove . g$6528$1CmlGO)
        (remv . g$6529$1CmlGO)
        (remp . g$6511$1CmlGO)
        (remq . g$6530$1CmlGO)
        (partition . g$6510$1CmlGO)
        (memv . g$6518$1CmlGO)
        (memq . g$6517$1CmlGO)
        (memp . g$6520$1CmlGO)
        (member . g$6519$1CmlGO)
        (exists . g$6524$1CmlGO)
        (for-all . g$6523$1CmlGO)
        (fold-right . g$6527$1CmlGO)
        (fold-left . g$6526$1CmlGO)
        (find . g$6509$1CmlGO)
        (filter . g$6512$1CmlGO)
        (cons* . g$6525$1CmlGO)
        (assv . g$6514$1CmlGO)
        (assq . g$6513$1CmlGO)
        (assp . g$6516$1CmlGO)
        (assoc . g$6515$1CmlGO)
        (with-exception-handler . g$12854$1CmlGO)
        (raise-continuable . g$12853$1CmlGO)
        (raise . g$12852$1CmlGO)
        (eval . g$9458$1CmlGO)
        (environment . g$9454$1CmlGO)
        (make-enumeration . g$8076$1CmlGO)
        (enum-set=? . g$8083$1CmlGO)
        (enum-set-universe . g$8077$1CmlGO)
        (enum-set-union . g$8084$1CmlGO)
        (enum-set-subset? . g$8082$1CmlGO)
        (enum-set-projection . g$8088$1CmlGO)
        (enum-set-member? . g$8081$1CmlGO)
        (enum-set-intersection . g$8085$1CmlGO)
        (enum-set-indexer . g$8078$1CmlGO)
        (enum-set-difference . g$8086$1CmlGO)
        (enum-set-constructor . g$8079$1CmlGO)
        (enum-set-complement . g$8087$1CmlGO)
        (enum-set->list . g$8080$1CmlGO)
        (who-condition? . g$7419$1CmlGO)
        (warning? . g$7330$1CmlGO)
        (violation? . g$7372$1CmlGO)
        (undefined-violation? . g$7496$1CmlGO)
        (syntax-violation? . g$7480$1CmlGO)
        (syntax-violation-subform . g$7482$1CmlGO)
        (syntax-violation-form . g$7481$1CmlGO)
        (syntax-violation . g$9475$1CmlGO)
        (simple-conditions . g$12851$1CmlGO)
        (serious-condition? . g$7344$1CmlGO)
        (non-continuable-violation? . g$7434$1CmlGO)
        (message-condition? . g$7315$1CmlGO)
        (make-who-condition . g$7417$1CmlGO)
        (make-warning . g$7329$1CmlGO)
        (make-violation . g$7371$1CmlGO)
        (make-undefined-violation . g$7495$1CmlGO)
        (make-syntax-violation . g$7477$1CmlGO)
        (make-serious-condition . g$7343$1CmlGO)
        (make-non-continuable-violation . g$7433$1CmlGO)
        (make-message-condition . g$7313$1CmlGO)
        (make-lexical-violation . g$7461$1CmlGO)
        (make-irritants-condition . g$7400$1CmlGO)
        (make-implementation-restriction-violation . g$7447$1CmlGO)
        (make-error . g$7357$1CmlGO)
        (make-assertion-violation . g$7385$1CmlGO)
        (lexical-violation? . g$7462$1CmlGO)
        (irritants-condition? . g$7402$1CmlGO)
        (implementation-restriction-violation? . g$7448$1CmlGO)
        (error? . g$7358$1CmlGO)
        (condition-who . g$7420$1CmlGO)
        (condition-predicate . g$12850$1CmlGO)
        (condition-message . g$7316$1CmlGO)
        (condition-irritants . g$7403$1CmlGO)
        (condition-accessor . g$12849$1CmlGO)
        (condition . g$12848$1CmlGO)
        (assertion-violation? . g$7386$1CmlGO)
        (condition? . g$12847$1CmlGO)
        (utf32->string . g$12846$1CmlGO)
        (utf16->string . g$12845$1CmlGO)
        (utf8->string . g$12844$1CmlGO)
        (uint-list->bytevector . g$12843$1CmlGO)
        (u8-list->bytevector . g$12842$1CmlGO)
        (string->utf8 . g$12841$1CmlGO)
        (string->utf32 . g$12840$1CmlGO)
        (string->utf16 . g$12839$1CmlGO)
        (sint-list->bytevector . g$12838$1CmlGO)
        (native-endianness . g$7171$1CmlGO)
        (bytevector? . g$12837$1CmlGO)
        (bytevector=? . g$12836$1CmlGO)
        (bytevector-uint-set! . g$12835$1CmlGO)
        (bytevector-uint-ref . g$12834$1CmlGO)
        (bytevector-u8-set! . g$12833$1CmlGO)
        (bytevector-u8-ref . g$12832$1CmlGO)
        (bytevector-u64-set! . g$7192$1CmlGO)
        (bytevector-u64-ref . g$7188$1CmlGO)
        (bytevector-u64-native-set! . g$7194$1CmlGO)
        (bytevector-u64-native-ref . g$7190$1CmlGO)
        (bytevector-u32-set! . g$7184$1CmlGO)
        (bytevector-u32-ref . g$7180$1CmlGO)
        (bytevector-u32-native-set! . g$7186$1CmlGO)
        (bytevector-u32-native-ref . g$7182$1CmlGO)
        (bytevector-u16-set! . g$7176$1CmlGO)
        (bytevector-u16-ref . g$7172$1CmlGO)
        (bytevector-u16-native-set! . g$7178$1CmlGO)
        (bytevector-u16-native-ref . g$7174$1CmlGO)
        (bytevector-sint-set! . g$12831$1CmlGO)
        (bytevector-sint-ref . g$12830$1CmlGO)
        (bytevector-s8-set! . g$12829$1CmlGO)
        (bytevector-s8-ref . g$12828$1CmlGO)
        (bytevector-s64-set! . g$7193$1CmlGO)
        (bytevector-s64-ref . g$7189$1CmlGO)
        (bytevector-s64-native-set! . g$7195$1CmlGO)
        (bytevector-s64-native-ref . g$7191$1CmlGO)
        (bytevector-s32-set! . g$7185$1CmlGO)
        (bytevector-s32-ref . g$7181$1CmlGO)
        (bytevector-s32-native-set! . g$7187$1CmlGO)
        (bytevector-s32-native-ref . g$7183$1CmlGO)
        (bytevector-s16-set! . g$7177$1CmlGO)
        (bytevector-s16-ref . g$7173$1CmlGO)
        (bytevector-s16-native-set! . g$7179$1CmlGO)
        (bytevector-s16-native-ref . g$7175$1CmlGO)
        (bytevector-length . g$12827$1CmlGO)
        (bytevector-ieee-single-set! . g$12826$1CmlGO)
        (bytevector-ieee-single-ref . g$12825$1CmlGO)
        (bytevector-ieee-single-native-set! . g$7198$1CmlGO)
        (bytevector-ieee-single-native-ref . g$7196$1CmlGO)
        (bytevector-ieee-double-set! . g$12824$1CmlGO)
        (bytevector-ieee-double-ref . g$12823$1CmlGO)
        (bytevector-ieee-double-native-set! . g$7199$1CmlGO)
        (bytevector-ieee-double-native-ref . g$7197$1CmlGO)
        (bytevector-fill! . g$12822$1CmlGO)
        (bytevector-copy! . g$12821$1CmlGO)
        (bytevector-copy . g$12820$1CmlGO)
        (bytevector->uint-list . g$12819$1CmlGO)
        (bytevector->u8-list . g$12818$1CmlGO)
        (bytevector->sint-list . g$12817$1CmlGO)
        (no-nans-violation? . g$7808$1CmlGO)
        (no-infinities-violation? . g$7794$1CmlGO)
        (make-no-nans-violation . g$7807$1CmlGO)
        (make-no-infinities-violation . g$7793$1CmlGO)
        (real->flonum . g$12816$1CmlGO)
        (flzero? . g$12815$1CmlGO)
        (fltruncate . g$12814$1CmlGO)
        (fltan . g$12813$1CmlGO)
        (flsqrt . g$12812$1CmlGO)
        (flsin . g$12811$1CmlGO)
        (flround . g$12810$1CmlGO)
        (flpositive? . g$12809$1CmlGO)
        (flonum? . g$12808$1CmlGO)
        (flodd? . g$12807$1CmlGO)
        (flnumerator . g$12806$1CmlGO)
        (flnegative? . g$12805$1CmlGO)
        (flnan? . g$12804$1CmlGO)
        (flmod0 . g$12803$1CmlGO)
        (flmod . g$12802$1CmlGO)
        (flmin . g$12801$1CmlGO)
        (flmax . g$12800$1CmlGO)
        (fllog . g$12799$1CmlGO)
        (flinteger? . g$12798$1CmlGO)
        (flinfinite? . g$12797$1CmlGO)
        (flfloor . g$12796$1CmlGO)
        (flfinite? . g$12795$1CmlGO)
        (flexpt . g$12794$1CmlGO)
        (flexp . g$12793$1CmlGO)
        (fleven? . g$12792$1CmlGO)
        (fldiv0-and-mod0 . g$12791$1CmlGO)
        (fldiv0 . g$12790$1CmlGO)
        (fldiv-and-mod . g$12789$1CmlGO)
        (fldiv . g$12788$1CmlGO)
        (fldenominator . g$12787$1CmlGO)
        (flcos . g$12786$1CmlGO)
        (flceiling . g$12785$1CmlGO)
        (flatan . g$12784$1CmlGO)
        (flasin . g$12783$1CmlGO)
        (flacos . g$12782$1CmlGO)
        (flabs . g$12781$1CmlGO)
        (fl>? . g$12780$1CmlGO)
        (fl>=? . g$12779$1CmlGO)
        (fl=? . g$12778$1CmlGO)
        (fl<? . g$12777$1CmlGO)
        (fl<=? . g$12776$1CmlGO)
        (fl/ . g$12775$1CmlGO)
        (fl- . g$12774$1CmlGO)
        (fl+ . g$12773$1CmlGO)
        (fl* . g$12772$1CmlGO)
        (fixnum->flonum . g$12771$1CmlGO)
        (fxzero? . g$12770$1CmlGO)
        (fxxor . g$12769$1CmlGO)
        (fxrotate-bit-field . g$7739$1CmlGO)
        (fxreverse-bit-field . g$12768$1CmlGO)
        (fxpositive? . g$12767$1CmlGO)
        (fxodd? . g$12766$1CmlGO)
        (fxnot . g$12765$1CmlGO)
        (fxnegative? . g$12764$1CmlGO)
        (fxmod0 . g$12763$1CmlGO)
        (fxmod . g$12762$1CmlGO)
        (fxmin . g$12761$1CmlGO)
        (fxmax . g$12760$1CmlGO)
        (fxlength . g$12759$1CmlGO)
        (fxior . g$12758$1CmlGO)
        (fxif . g$7733$1CmlGO)
        (fxfirst-bit-set . g$12757$1CmlGO)
        (fxeven? . g$12756$1CmlGO)
        (fxdiv0-and-mod0 . g$12755$1CmlGO)
        (fxdiv0 . g$12754$1CmlGO)
        (fxdiv-and-mod . g$12753$1CmlGO)
        (fxdiv . g$12752$1CmlGO)
        (fxcopy-bit-field . g$7736$1CmlGO)
        (fxcopy-bit . g$7734$1CmlGO)
        (fxbit-set? . g$12751$1CmlGO)
        (fxbit-field . g$7735$1CmlGO)
        (fxbit-count . g$12750$1CmlGO)
        (fxarithmetic-shift-right . g$7738$1CmlGO)
        (fxarithmetic-shift-left . g$7737$1CmlGO)
        (fxarithmetic-shift . g$12749$1CmlGO)
        (fxand . g$12748$1CmlGO)
        (fx>? . g$12747$1CmlGO)
        (fx>=? . g$12746$1CmlGO)
        (fx=? . g$12745$1CmlGO)
        (fx<? . g$12744$1CmlGO)
        (fx<=? . g$12743$1CmlGO)
        (fx-/carry . g$12742$1CmlGO)
        (fx- . g$12741$1CmlGO)
        (fx+/carry . g$12740$1CmlGO)
        (fx+ . g$12739$1CmlGO)
        (fx*/carry . g$12738$1CmlGO)
        (fx* . g$12737$1CmlGO)
        (greatest-fixnum . g$12736$1CmlGO)
        (least-fixnum . g$12735$1CmlGO)
        (fixnum-width . g$12734$1CmlGO)
        (fixnum? . g$12733$1CmlGO)
        (bitwise-rotate-bit-field . g$7691$1CmlGO)
        (bitwise-reverse-bit-field . g$12732$1CmlGO)
        (bitwise-length . g$12731$1CmlGO)
        (bitwise-if . g$7685$1CmlGO)
        (bitwise-first-bit-set . g$12730$1CmlGO)
        (bitwise-copy-bit-field . g$7688$1CmlGO)
        (bitwise-copy-bit . g$7686$1CmlGO)
        (bitwise-bit-set? . g$12729$1CmlGO)
        (bitwise-bit-field . g$12728$1CmlGO)
        (bitwise-bit-count . g$12727$1CmlGO)
        (bitwise-xor . g$12726$1CmlGO)
        (bitwise-ior . g$12725$1CmlGO)
        (bitwise-and . g$12724$1CmlGO)
        (bitwise-not . g$12723$1CmlGO)
        (bitwise-arithmetic-shift-right . g$7690$1CmlGO)
        (bitwise-arithmetic-shift-left . g$7689$1CmlGO)
        (bitwise-arithmetic-shift . g$12722$1CmlGO)
        (zero? . g$12721$1CmlGO)
        (vector? . g$12720$1CmlGO)
        (vector-set! . g$12719$1CmlGO)
        (vector-ref . g$12718$1CmlGO)
        (vector-map . g$12717$1CmlGO)
        (vector-length . g$12716$1CmlGO)
        (vector-for-each . g$12715$1CmlGO)
        (vector-fill! . g$12714$1CmlGO)
        (vector->list . g$12713$1CmlGO)
        (vector . g$12712$1CmlGO)
        (values . g$12711$1CmlGO)
        (truncate . g$12710$1CmlGO)
        (tan . g$12709$1CmlGO)
        (symbol? . g$12708$1CmlGO)
        (symbol=? . g$6680$1CmlGO)
        (symbol->string . g$12707$1CmlGO)
        (substring . g$12706$1CmlGO)
        (string? . g$12705$1CmlGO)
        (string>? . g$6677$1CmlGO)
        (string>=? . g$6679$1CmlGO)
        (string=? . g$6675$1CmlGO)
        (string<? . g$6676$1CmlGO)
        (string<=? . g$6678$1CmlGO)
        (string-ref . g$12704$1CmlGO)
        (string-length . g$12703$1CmlGO)
        (string-for-each . g$12702$1CmlGO)
        (string-copy . g$12701$1CmlGO)
        (string-append . g$12700$1CmlGO)
        (string->symbol . g$12699$1CmlGO)
        (string->number . g$12698$1CmlGO)
        (string->list . g$12697$1CmlGO)
        (string . g$12696$1CmlGO)
        (sqrt . g$12695$1CmlGO)
        (sin . g$12694$1CmlGO)
        (round . g$12693$1CmlGO)
        (reverse . g$12692$1CmlGO)
        (real? . g$12691$1CmlGO)
        (real-valued? . g$12690$1CmlGO)
        (real-part . g$12689$1CmlGO)
        (rationalize . g$6721$1CmlGO)
        (rational? . g$12688$1CmlGO)
        (rational-valued? . g$12687$1CmlGO)
        (procedure? . g$12686$1CmlGO)
        (positive? . g$12685$1CmlGO)
        (pair? . g$12684$1CmlGO)
        (odd? . g$12683$1CmlGO)
        (numerator . g$12682$1CmlGO)
        (number? . g$12681$1CmlGO)
        (number->string . g$12680$1CmlGO)
        (null? . g$12679$1CmlGO)
        (not . g$12678$1CmlGO)
        (negative? . g$12677$1CmlGO)
        (nan? . g$12676$1CmlGO)
        (min . g$12675$1CmlGO)
        (max . g$12674$1CmlGO)
        (map . g$12673$1CmlGO)
        (make-vector . g$12672$1CmlGO)
        (make-string . g$12671$1CmlGO)
        (make-rectangular . g$12670$1CmlGO)
        (make-polar . g$12669$1CmlGO)
        (magnitude . g$12668$1CmlGO)
        (log . g$12667$1CmlGO)
        (list? . g$12666$1CmlGO)
        (list-tail . g$12665$1CmlGO)
        (list-ref . g$12664$1CmlGO)
        (list->vector . g$12663$1CmlGO)
        (list->string . g$12662$1CmlGO)
        (list . g$12661$1CmlGO)
        (length . g$12660$1CmlGO)
        (lcm . g$12659$1CmlGO)
        (integer? . g$12658$1CmlGO)
        (integer-valued? . g$12657$1CmlGO)
        (integer->char . g$12656$1CmlGO)
        (infinite? . g$12655$1CmlGO)
        (inexact? . g$12654$1CmlGO)
        (inexact . g$12653$1CmlGO)
        (imag-part . g$12652$1CmlGO)
        (gcd . g$12651$1CmlGO)
        (for-each . g$12650$1CmlGO)
        (floor . g$12649$1CmlGO)
        (finite? . g$12648$1CmlGO)
        (expt . g$12647$1CmlGO)
        (exp . g$12646$1CmlGO)
        (exact? . g$12645$1CmlGO)
        (exact-integer-sqrt . g$12644$1CmlGO)
        (exact . g$12643$1CmlGO)
        (even? . g$12642$1CmlGO)
        (error . g$12641$1CmlGO)
        (eqv? . g$12640$1CmlGO)
        (equal? . g$12639$1CmlGO)
        (eq? . g$12638$1CmlGO)
        (dynamic-wind . g$12637$1CmlGO)
        (div0-and-mod0 . g$12636$1CmlGO)
        (mod0 . g$12635$1CmlGO)
        (div0 . g$12634$1CmlGO)
        (div-and-mod . g$12633$1CmlGO)
        (mod . g$12632$1CmlGO)
        (div . g$12631$1CmlGO)
        (denominator . g$12630$1CmlGO)
        (cos . g$12629$1CmlGO)
        (cons . g$12628$1CmlGO)
        (complex? . g$12627$1CmlGO)
        (char? . g$12626$1CmlGO)
        (char>? . g$6718$1CmlGO)
        (char>=? . g$6720$1CmlGO)
        (char=? . g$6716$1CmlGO)
        (char<? . g$6717$1CmlGO)
        (char<=? . g$6719$1CmlGO)
        (char->integer . g$12625$1CmlGO)
        (ceiling . g$12624$1CmlGO)
        (call-with-values . g$12623$1CmlGO)
        (call/cc . g$12622$1CmlGO)
        (call-with-current-continuation . g$12621$1CmlGO)
        (cddddr . g$6640$1CmlGO)
        (cdddar . g$6639$1CmlGO)
        (cddadr . g$6638$1CmlGO)
        (cddaar . g$6637$1CmlGO)
        (cdaddr . g$6636$1CmlGO)
        (cdadar . g$6635$1CmlGO)
        (cdaadr . g$6634$1CmlGO)
        (cdaaar . g$6633$1CmlGO)
        (cadddr . g$6632$1CmlGO)
        (caddar . g$6631$1CmlGO)
        (cadadr . g$6630$1CmlGO)
        (cadaar . g$6629$1CmlGO)
        (caaddr . g$6628$1CmlGO)
        (caadar . g$6627$1CmlGO)
        (caaadr . g$6626$1CmlGO)
        (caaaar . g$6625$1CmlGO)
        (cdddr . g$6624$1CmlGO)
        (cddar . g$6623$1CmlGO)
        (cdadr . g$6622$1CmlGO)
        (cdaar . g$6621$1CmlGO)
        (caddr . g$6620$1CmlGO)
        (cadar . g$6619$1CmlGO)
        (caadr . g$6618$1CmlGO)
        (caaar . g$6617$1CmlGO)
        (cddr . g$6616$1CmlGO)
        (cdar . g$6615$1CmlGO)
        (cadr . g$6614$1CmlGO)
        (caar . g$6613$1CmlGO)
        (cdr . g$12620$1CmlGO)
        (car . g$12619$1CmlGO)
        (boolean? . g$12618$1CmlGO)
        (boolean=? . g$6681$1CmlGO)
        (atan . g$12617$1CmlGO)
        (assertion-violation . g$12616$1CmlGO)
        (asin . g$12615$1CmlGO)
        (apply . g$12614$1CmlGO)
        (append . g$12613$1CmlGO)
        (angle . g$12612$1CmlGO)
        (acos . g$12611$1CmlGO)
        (abs . g$12610$1CmlGO)
        (/ . g$12609$1CmlGO)
        (* . g$12608$1CmlGO)
        (- . g$12607$1CmlGO)
        (+ . g$12606$1CmlGO)
        (>= . g$12605$1CmlGO)
        (> . g$12604$1CmlGO)
        (= . g$12603$1CmlGO)
        (<= . g$12602$1CmlGO)
        (< . g$12601$1CmlGO)
        (make-record-printer . g$12600$1CmlGO)
        (eqv-hash . g$12599$1CmlGO)
        (eq-hash . g$12598$1CmlGO)
        (reverse! . g$12597$1CmlGO)
        (deserialize-port . g$12596$1CmlGO)
        (serialize-port . g$12595$1CmlGO)
        (enum-set? . g$8051$1CmlGO)
        (make-promise . g$7511$1CmlGO)
        (load/args . g$12428$1CmlGO)
        (printf . g$8161$1CmlGO)
        (fprintf . g$8162$1CmlGO)
        (format . g$8163$1CmlGO)
        (procedure-form . g$12594$1CmlGO)
        (procedure-environment . g$12593$1CmlGO)
        (procedure-name . g$12592$1CmlGO)
        (procedure-arity . g$12591$1CmlGO)
        (gc-collect . g$12590$1CmlGO)
        (clr-type? . g$12589$1CmlGO)
        (get-clr-type . g$12588$1CmlGO)
        (get-command-line . g$12587$1CmlGO)
        (vector-append . g$12586$1CmlGO)
        (vector-filter . g$12585$1CmlGO)
        (vector-reverse! . g$12584$1CmlGO)
        (vector-contains? . g$12583$1CmlGO)
        (vector-index-of . g$12582$1CmlGO)
        (vector-copy . g$12581$1CmlGO)
        (vector-binary-search . g$12580$1CmlGO)
        (get-output-string . g$12579$1CmlGO)
        (open-output-string . g$12578$1CmlGO)
        (open-input-string . g$12577$1CmlGO)
        (string-ci-compare . g$12576$1CmlGO)
        (string-compare . g$12575$1CmlGO)
        (string-format . g$12574$1CmlGO)
        (trace-printer . g$12425$1CmlGO)
        (make-traced-procedure . g$12573$1CmlGO)
        (make-traced-macro . g$8183$1CmlGO)
        (assertion-error . g$9471$1CmlGO)
        (pmap . g$12572$1CmlGO)
        (time-it . g$12571$1CmlGO)
        (make-parameter . g$8188$1CmlGO)
        (library-locator . g$12570$1CmlGO)
        (get-library-paths . g$12569$1CmlGO)
        (environment-bindings . g$9450$1CmlGO)
        (environment-symbols . g$9453$1CmlGO)
        (interaction-environment-symbols . g$9449$1CmlGO)
        (optimization-level . g$12568$1CmlGO)
        (library-path . g$8618$1CmlGO)
        (&no-nans . g$12567$1CmlGO)
        (&no-infinities . g$12566$1CmlGO)
        (&i/o-encoding . g$12565$1CmlGO)
        (&i/o-decoding . g$12564$1CmlGO)
        (&i/o-port . g$12563$1CmlGO)
        (&i/o-file-does-not-exist . g$12562$1CmlGO)
        (&i/o-file-already-exists . g$12561$1CmlGO)
        (&i/o-file-is-read-only . g$12560$1CmlGO)
        (&i/o-file-protection . g$12559$1CmlGO)
        (&i/o-filename . g$12558$1CmlGO)
        (&i/o-invalid-position . g$12557$1CmlGO)
        (&i/o-write . g$12556$1CmlGO)
        (&i/o-read . g$12555$1CmlGO)
        (&i/o . g$12554$1CmlGO)
        (&non-continuable . g$12553$1CmlGO)
        (&undefined . g$12552$1CmlGO)
        (&syntax . g$12551$1CmlGO)
        (&lexical . g$12550$1CmlGO)
        (&implementation-restriction . g$12549$1CmlGO)
        (&non . g$12548$1CmlGO)
        (&who . g$12547$1CmlGO)
        (&irritants . g$12546$1CmlGO)
        (&assertion . g$12545$1CmlGO)
        (&violation . g$12544$1CmlGO)
        (&error . g$12543$1CmlGO)
        (&serious . g$12542$1CmlGO)
        (&warning . g$12541$1CmlGO)
        (&message . g$12540$1CmlGO)
        (&condition . g$12539$1CmlGO)
        (define-condition-type . g$12538$1CmlGO)
        (define-enumeration . g$12537$1CmlGO)
        (define-record-type . g$12536$1CmlGO)
        (parent-rtd . g$12535$1CmlGO)
        (nongenerative . g$12534$1CmlGO)
        (opaque . g$12533$1CmlGO)
        (sealed . g$12532$1CmlGO)
        (protocol . g$12531$1CmlGO)
        (parent . g$12530$1CmlGO)
        (immutable . g$12529$1CmlGO)
        (mutable . g$12528$1CmlGO)
        (fields . g$12527$1CmlGO)
        (error-handling-mode . g$12526$1CmlGO)
        (file-options . g$12525$1CmlGO)
        (buffer-mode . g$12524$1CmlGO)
        (eol-style . g$12523$1CmlGO)
        (guard . g$12522$1CmlGO)
        (trace-letrec-syntax . g$12521$1CmlGO)
        (trace-let-syntax . g$12520$1CmlGO)
        (trace-define-syntax . g$12519$1CmlGO)
        (trace-define . g$12518$1CmlGO)
        (trace-lambda . g$12517$1CmlGO)
        (unsyntax-splicing . g$12516$1CmlGO)
        (unsyntax . g$12515$1CmlGO)
        (unquote-splicing . g$12514$1CmlGO)
        (unquote . g$12513$1CmlGO)
        (_ . g$12512$1CmlGO)
        (else . g$12511$1CmlGO)
        (=> . g$12510$1CmlGO)
        (... . g$12509$1CmlGO)
        (assert . g$12508$1CmlGO)
        (endianness . g$12507$1CmlGO)
        (delay . g$12506$1CmlGO)
        (time . g$12505$1CmlGO)
        (or . g$12504$1CmlGO)
        (and . g$12503$1CmlGO)
        (do . g$12502$1CmlGO)
        (cond . g$12501$1CmlGO)
        (let* . g$12500$1CmlGO)
        (let . g$12499$1CmlGO)
        (identifier-syntax . g$12498$1CmlGO)
        (with-syntax . g$12497$1CmlGO)
        (quasisyntax . g$12496$1CmlGO)
        (quasiquote . g$12495$1CmlGO)
        (syntax-rules . g$12494$1CmlGO)
        (include-into . g$12493$1CmlGO)
        (include . g$12492$1CmlGO)
        (define-struct . g$12491$1CmlGO)
        (let-values . g$12490$1CmlGO)
        (let*-values . g$12489$1CmlGO)
        (record-constructor-descriptor . g$12488$1CmlGO)
        (record-type-descriptor . g$12487$1CmlGO)
        (fluid-let-syntax . g$12486$1CmlGO)
        (case . g$12485$1CmlGO)
        (parameterize . g$12484$1CmlGO)
        (unless . g$12483$1CmlGO)
        (when . g$12482$1CmlGO)
        (if . g$12481$1CmlGO)
        (letrec* . g$12480$1CmlGO)
        (letrec . g$12479$1CmlGO)
        (type-descriptor . g$12478$1CmlGO)
        (case-lambda . g$12477$1CmlGO)
        (lambda . g$12476$1CmlGO)
        (syntax . g$12475$1CmlGO)
        (syntax-case . g$12474$1CmlGO)
        (quote . g$12473$1CmlGO)
        (foreign-call . g$12472$1CmlGO)
        (letrec-syntax . g$12471$1CmlGO)
        (let-syntax . g$12470$1CmlGO)
        (set! . g$12469$1CmlGO)
        (export . g$12468$1CmlGO)
        (import . g$12467$1CmlGO)
        (library . g$12466$1CmlGO)
        (begin . g$12465$1CmlGO)
        (module . g$12464$1CmlGO)
        (define-syntax . g$12463$1CmlGO)
        (define . g$12462$1CmlGO))
      '((g$9348$1CmlGO core-prim . ellipsis-map)
        (g$13084$1CmlGO core-prim . &no-nans-rcd)
        (g$13083$1CmlGO core-prim . &no-nans-rtd)
        (g$13082$1CmlGO core-prim . &no-infinities-rcd)
        (g$13081$1CmlGO core-prim . &no-infinities-rtd)
        (g$13080$1CmlGO core-prim . &i/o-encoding-rcd)
        (g$13079$1CmlGO core-prim . &i/o-encoding-rtd)
        (g$13078$1CmlGO core-prim . &i/o-decoding-rcd)
        (g$13077$1CmlGO core-prim . &i/o-decoding-rtd)
        (g$13076$1CmlGO core-prim . &i/o-port-rcd)
        (g$13075$1CmlGO core-prim . &i/o-port-rtd)
        (g$13074$1CmlGO core-prim . &i/o-file-does-not-exist-rcd)
        (g$13073$1CmlGO core-prim . &i/o-file-does-not-exist-rtd)
        (g$13072$1CmlGO core-prim . &i/o-file-already-exists-rcd)
        (g$13071$1CmlGO core-prim . &i/o-file-already-exists-rtd)
        (g$13070$1CmlGO core-prim . &i/o-file-is-read-only-rcd)
        (g$13069$1CmlGO core-prim . &i/o-file-is-read-only-rtd)
        (g$13068$1CmlGO core-prim . &i/o-file-protection-rcd)
        (g$13067$1CmlGO core-prim . &i/o-file-protection-rtd)
        (g$13066$1CmlGO core-prim . &i/o-filename-rcd)
        (g$13065$1CmlGO core-prim . &i/o-filename-rtd)
        (g$13064$1CmlGO core-prim . &i/o-invalid-position-rcd)
        (g$13063$1CmlGO core-prim . &i/o-invalid-position-rtd)
        (g$13062$1CmlGO core-prim . &i/o-write-rcd)
        (g$13061$1CmlGO core-prim . &i/o-write-rtd)
        (g$13060$1CmlGO core-prim . &i/o-read-rcd)
        (g$13059$1CmlGO core-prim . &i/o-read-rtd)
        (g$13058$1CmlGO core-prim . &i/o-rcd)
        (g$13057$1CmlGO core-prim . &i/o-rtd)
        (g$13056$1CmlGO core-prim . &undefined-rcd)
        (g$13055$1CmlGO core-prim . &undefined-rtd)
        (g$13054$1CmlGO core-prim . &syntax-rcd)
        (g$13053$1CmlGO core-prim . &syntax-rtd)
        (g$13052$1CmlGO core-prim . &lexical-rcd)
        (g$13051$1CmlGO core-prim . &lexical-rtd)
        (g$13050$1CmlGO core-prim . &implementation-restriction-rcd)
        (g$13049$1CmlGO core-prim . &implementation-restriction-rtd)
        (g$13048$1CmlGO core-prim . &non-continuable-rcd)
        (g$13047$1CmlGO core-prim . &non-continuable-rtd)
        (g$13046$1CmlGO core-prim . &who-rcd)
        (g$13045$1CmlGO core-prim . &who-rtd)
        (g$13044$1CmlGO core-prim . &irritants-rcd)
        (g$13043$1CmlGO core-prim . &irritants-rtd)
        (g$13042$1CmlGO core-prim . &assertion-rcd)
        (g$13041$1CmlGO core-prim . &assertion-rtd)
        (g$13040$1CmlGO core-prim . &violation-rcd)
        (g$13039$1CmlGO core-prim . &violation-rtd)
        (g$13038$1CmlGO core-prim . &error-rcd)
        (g$13037$1CmlGO core-prim . &error-rtd)
        (g$13036$1CmlGO core-prim . &serious-rcd)
        (g$13035$1CmlGO core-prim . &serious-rtd)
        (g$13034$1CmlGO core-prim . &warning-rcd)
        (g$13033$1CmlGO core-prim . &warning-rtd)
        (g$13032$1CmlGO core-prim . &message-rcd)
        (g$13031$1CmlGO core-prim . &message-rtd)
        (g$13030$1CmlGO core-prim . &condition-rcd)
        (g$13029$1CmlGO core-prim . &condition-rtd)
        (g$13028$1CmlGO core-prim . library-letrec*)
        (g$13027$1CmlGO core-prim . annotation-stripped)
        (g$13026$1CmlGO core-prim . annotation-source)
        (g$13025$1CmlGO core-prim . annotation-expression)
        (g$13024$1CmlGO core-prim . annotation?)
        (g$13023$1CmlGO core-prim . read-annotated)
        (g$13022$1CmlGO core-prim . tanh)
        (g$13021$1CmlGO core-prim . cosh)
        (g$13020$1CmlGO core-prim . sinh)
        (g$13019$1CmlGO core-prim . make-guid)
        (g$13018$1CmlGO core-prim . unspecified?)
        (g$13017$1CmlGO core-prim . make-trace)
        (g$13016$1CmlGO core-prim . make-list)
        (g$13015$1CmlGO core-prim . last-pair)
        (g$13014$1CmlGO core-prim . load-r5rs)
        (g$13013$1CmlGO core-prim . license)
        (g$13012$1CmlGO core-prim . stacktrace)
        (g$12430$1CmlGO core-prim . ironscheme-build)
        (g$13011$1CmlGO core-prim . define-clr-class-internal)
        (g$13010$1CmlGO core-prim . clr-field-set!-internal)
        (g$13009$1CmlGO core-prim . clr-field-get-internal)
        (g$13008$1CmlGO core-prim . clr-cast-internal)
        (g$13007$1CmlGO core-prim . clr-call-internal)
        (g$13006$1CmlGO core-prim . clr-new-internal)
        (g$13005$1CmlGO core-prim . clr-new-array-internal)
        (g$13004$1CmlGO core-prim . clr-is-internal)
        (g$13003$1CmlGO core-prim . clr-reference-internal)
        (g$13002$1CmlGO core-prim . clr-using-internal)
        (g$13001$1CmlGO core-prim . clr-clear-usings-internal)
        (g$9472$1CmlGO core-prim . syntax-error)
        (g$9343$1CmlGO core-prim . syntax-dispatch)
        (g$13000$1CmlGO core-prim . compile-core)
        (g$12999$1CmlGO core-prim . eval-core)
        (g$12998$1CmlGO core-prim . set-symbol-value!)
        (g$12997$1CmlGO core-prim . symbol-value)
        (g$12996$1CmlGO core-prim . ungensym)
        (g$12995$1CmlGO core-prim . gensym)
        (g$12994$1CmlGO core-prim . void)
        (g$12993$1CmlGO core-prim . load-serialized-library)
        (g$12992$1CmlGO core-prim . serialize-library)
        (g$12432$1CmlGO core-prim . compile-system-libraries)
        (g$12434$1CmlGO core-prim . compile->closure)
        (g$12433$1CmlGO core-prim . compile)
        (g$12429$1CmlGO core-prim . load)
        (g$9481$1CmlGO core-prim . interaction-environment)
        (g$12991$1CmlGO core-prim . char-ready?)
        (g$12990$1CmlGO core-prim . string-upcase)
        (g$12989$1CmlGO core-prim . string-titlecase)
        (g$12988$1CmlGO core-prim . string-normalize-nfkd)
        (g$12987$1CmlGO core-prim . string-normalize-nfkc)
        (g$12986$1CmlGO core-prim . string-normalize-nfd)
        (g$12985$1CmlGO core-prim . string-normalize-nfc)
        (g$12984$1CmlGO core-prim . string-foldcase)
        (g$12983$1CmlGO core-prim . string-downcase)
        (g$7590$1CmlGO core-prim . string-ci>?)
        (g$7592$1CmlGO core-prim . string-ci>=?)
        (g$7588$1CmlGO core-prim . string-ci=?)
        (g$7589$1CmlGO core-prim . string-ci<?)
        (g$7591$1CmlGO core-prim . string-ci<=?)
        (g$12982$1CmlGO core-prim . char-whitespace?)
        (g$12981$1CmlGO core-prim . char-upper-case?)
        (g$12980$1CmlGO core-prim . char-title-case?)
        (g$12979$1CmlGO core-prim . char-numeric?)
        (g$12978$1CmlGO core-prim . char-lower-case?)
        (g$12977$1CmlGO core-prim . char-general-category)
        (g$12976$1CmlGO core-prim . char-upcase)
        (g$12975$1CmlGO core-prim . char-titlecase)
        (g$12974$1CmlGO core-prim . char-foldcase)
        (g$12973$1CmlGO core-prim . char-downcase)
        (g$7629$1CmlGO core-prim . char-ci>?)
        (g$7631$1CmlGO core-prim . char-ci>=?)
        (g$7627$1CmlGO core-prim . char-ci=?)
        (g$7628$1CmlGO core-prim . char-ci<?)
        (g$7630$1CmlGO core-prim . char-ci<=?)
        (g$12972$1CmlGO core-prim . char-alphabetic?)
        (g$9080$1CmlGO core-prim . variable-transformer-procedure)
        (g$9079$1CmlGO core-prim . variable-transformer?)
        (g$9078$1CmlGO core-prim . make-variable-transformer)
        (g$9476$1CmlGO core-prim . identifier?)
        (g$9465$1CmlGO core-prim . generate-temporaries)
        (g$9466$1CmlGO core-prim . free-identifier=?)
        (g$9478$1CmlGO core-prim . syntax->datum)
        (g$9477$1CmlGO core-prim . datum->syntax)
        (g$9467$1CmlGO core-prim . bound-identifier=?)
        (g$12971$1CmlGO core-prim . record-type-descriptor?)
        (g$12970$1CmlGO core-prim . record-predicate)
        (g$12969$1CmlGO core-prim . record-mutator)
        (g$12968$1CmlGO core-prim . record-constructor)
        (g$12967$1CmlGO core-prim . record-accessor)
        (g$12966$1CmlGO core-prim . make-record-type-descriptor)
        (g$12965$1CmlGO core-prim . make-record-constructor-descriptor)
        (g$12964$1CmlGO core-prim . record?)
        (g$12963$1CmlGO core-prim . record-type-uid)
        (g$12962$1CmlGO core-prim . record-type-sealed?)
        (g$12961$1CmlGO core-prim . record-type-parent)
        (g$12960$1CmlGO core-prim . record-type-opaque?)
        (g$12959$1CmlGO core-prim . record-type-name)
        (g$12958$1CmlGO core-prim . record-type-generative?)
        (g$12957$1CmlGO core-prim . record-type-field-names)
        (g$12956$1CmlGO core-prim . record-rtd)
        (g$12955$1CmlGO core-prim . record-field-mutable?)
        (g$7165$1CmlGO core-prim . delete-file)
        (g$7164$1CmlGO core-prim . file-exists?)
        (g$12954$1CmlGO core-prim . vector-sort!)
        (g$12953$1CmlGO core-prim . vector-sort)
        (g$7528$1CmlGO core-prim . list-sort)
        (g$12952$1CmlGO core-prim . symbol-hash)
        (g$12951$1CmlGO core-prim . string-ci-hash)
        (g$12950$1CmlGO core-prim . string-hash)
        (g$12949$1CmlGO core-prim . equal-hash)
        (g$12948$1CmlGO core-prim . hashtable-equivalence-function)
        (g$12947$1CmlGO core-prim . make-hashtable)
        (g$12946$1CmlGO core-prim . hashtable-hash-function)
        (g$7132$1CmlGO core-prim . make-eqv-hashtable)
        (g$7131$1CmlGO core-prim . make-eq-hashtable)
        (g$12945$1CmlGO core-prim . hashtable?)
        (g$7138$1CmlGO core-prim . hashtable-update!)
        (g$7133$1CmlGO core-prim . hashtable-size)
        (g$7135$1CmlGO core-prim . hashtable-set!)
        (g$7134$1CmlGO core-prim . hashtable-ref)
        (g$12944$1CmlGO core-prim . hashtable-mutable?)
        (g$12943$1CmlGO core-prim . hashtable-keys)
        (g$12942$1CmlGO core-prim . hashtable-entries)
        (g$7136$1CmlGO core-prim . hashtable-delete!)
        (g$12941$1CmlGO core-prim . hashtable-copy)
        (g$7137$1CmlGO core-prim . hashtable-contains?)
        (g$7139$1CmlGO core-prim . hashtable-clear!)
        (g$8018$1CmlGO core-prim . call-with-output-file)
        (g$8017$1CmlGO core-prim . call-with-input-file)
        (g$12940$1CmlGO core-prim . write-char)
        (g$12939$1CmlGO core-prim . write)
        (g$8016$1CmlGO core-prim . with-output-to-file)
        (g$8015$1CmlGO core-prim . with-input-from-file)
        (g$12938$1CmlGO core-prim . read-char)
        (g$12937$1CmlGO core-prim . read)
        (g$12936$1CmlGO core-prim . peek-char)
        (g$12935$1CmlGO core-prim . open-output-file)
        (g$12934$1CmlGO core-prim . open-input-file)
        (g$12933$1CmlGO core-prim . newline)
        (g$12932$1CmlGO core-prim . display)
        (g$12931$1CmlGO core-prim . close-output-port)
        (g$12930$1CmlGO core-prim . close-input-port)
        (g$12929$1CmlGO core-prim . eof-object?)
        (g$12928$1CmlGO core-prim . eof-object)
        (g$12927$1CmlGO core-prim . current-error-port)
        (g$12926$1CmlGO core-prim . current-output-port)
        (g$12925$1CmlGO core-prim . current-input-port)
        (g$12924$1CmlGO core-prim . output-port?)
        (g$12923$1CmlGO core-prim . input-port?)
        (g$12922$1CmlGO core-prim . utf-8-codec)
        (g$12921$1CmlGO core-prim . utf-16-codec)
        (g$12920$1CmlGO core-prim . transcoder-error-handling-mode)
        (g$12919$1CmlGO core-prim . transcoder-eol-style)
        (g$12918$1CmlGO core-prim . transcoder-codec)
        (g$12917$1CmlGO core-prim . transcoded-port)
        (g$12916$1CmlGO core-prim . textual-port?)
        (g$12915$1CmlGO core-prim . string->bytevector)
        (g$12914$1CmlGO core-prim . standard-output-port)
        (g$12913$1CmlGO core-prim . standard-input-port)
        (g$12912$1CmlGO core-prim . standard-error-port)
        (g$12911$1CmlGO core-prim . set-port-position!)
        (g$12910$1CmlGO core-prim . put-u8)
        (g$12909$1CmlGO core-prim . put-string)
        (g$12908$1CmlGO core-prim . put-datum)
        (g$12907$1CmlGO core-prim . put-char)
        (g$12906$1CmlGO core-prim . put-bytevector)
        (g$7994$1CmlGO core-prim . port?)
        (g$12905$1CmlGO core-prim . port-transcoder)
        (g$12904$1CmlGO core-prim . port-position)
        (g$12903$1CmlGO core-prim . port-has-set-port-position!?)
        (g$12902$1CmlGO core-prim . port-has-port-position?)
        (g$12901$1CmlGO core-prim . port-eof?)
        (g$12900$1CmlGO core-prim . output-port-buffer-mode)
        (g$7993$1CmlGO core-prim . open-string-output-port)
        (g$12899$1CmlGO core-prim . open-string-input-port)
        (g$12898$1CmlGO core-prim . open-file-output-port)
        (g$12897$1CmlGO core-prim . open-file-input/output-port)
        (g$12896$1CmlGO core-prim . open-file-input-port)
        (g$12895$1CmlGO core-prim . open-bytevector-output-port)
        (g$12894$1CmlGO core-prim . open-bytevector-input-port)
        (g$12893$1CmlGO core-prim . native-transcoder)
        (g$12892$1CmlGO core-prim . native-eol-style)
        (g$12891$1CmlGO core-prim . make-transcoder)
        (g$12890$1CmlGO core-prim . latin-1-codec)
        (g$7850$1CmlGO core-prim . make-i/o-write-error)
        (g$7836$1CmlGO core-prim . make-i/o-read-error)
        (g$7955$1CmlGO core-prim . make-i/o-port-error)
        (g$7865$1CmlGO core-prim . make-i/o-invalid-position-error)
        (g$7882$1CmlGO core-prim . make-i/o-filename-error)
        (g$7898$1CmlGO core-prim . make-i/o-file-protection-error)
        (g$7912$1CmlGO core-prim . make-i/o-file-is-read-only-error)
        (g$7940$1CmlGO core-prim . make-i/o-file-does-not-exist-error)
        (g$7926$1CmlGO core-prim . make-i/o-file-already-exists-error)
        (g$7822$1CmlGO core-prim . make-i/o-error)
        (g$7986$1CmlGO core-prim . make-i/o-encoding-error)
        (g$7971$1CmlGO core-prim . make-i/o-decoding-error)
        (g$12889$1CmlGO core-prim . make-custom-textual-output-port)
        (g$12888$1CmlGO core-prim . make-custom-textual-input/output-port)
        (g$12887$1CmlGO core-prim . make-custom-textual-input-port)
        (g$12886$1CmlGO core-prim . make-custom-binary-output-port)
        (g$12885$1CmlGO core-prim . make-custom-binary-input/output-port)
        (g$12884$1CmlGO core-prim . make-custom-binary-input-port)
        (g$12883$1CmlGO core-prim . make-bytevector)
        (g$12882$1CmlGO core-prim . lookahead-u8)
        (g$12881$1CmlGO core-prim . lookahead-char)
        (g$7851$1CmlGO core-prim . i/o-write-error?)
        (g$7837$1CmlGO core-prim . i/o-read-error?)
        (g$7957$1CmlGO core-prim . i/o-port-error?)
        (g$7867$1CmlGO core-prim . i/o-invalid-position-error?)
        (g$7868$1CmlGO core-prim . i/o-error-position)
        (g$7884$1CmlGO core-prim . i/o-filename-error?)
        (g$7899$1CmlGO core-prim . i/o-file-protection-error?)
        (g$7913$1CmlGO core-prim . i/o-file-is-read-only-error?)
        (g$7941$1CmlGO core-prim . i/o-file-does-not-exist-error?)
        (g$7927$1CmlGO core-prim . i/o-file-already-exists-error?)
        (g$7823$1CmlGO core-prim . i/o-error?)
        (g$7958$1CmlGO core-prim . i/o-error-port)
        (g$7885$1CmlGO core-prim . i/o-error-filename)
        (g$7988$1CmlGO core-prim . i/o-encoding-error?)
        (g$7989$1CmlGO core-prim . i/o-encoding-error-char)
        (g$7972$1CmlGO core-prim . i/o-decoding-error?)
        (g$12880$1CmlGO core-prim . get-u8)
        (g$12879$1CmlGO core-prim . get-string-n!)
        (g$12878$1CmlGO core-prim . get-string-n)
        (g$12877$1CmlGO core-prim . get-string-all)
        (g$12876$1CmlGO core-prim . get-line)
        (g$12875$1CmlGO core-prim . get-datum)
        (g$12874$1CmlGO core-prim . get-char)
        (g$12873$1CmlGO core-prim . get-bytevector-some)
        (g$12872$1CmlGO core-prim . get-bytevector-n!)
        (g$12871$1CmlGO core-prim . get-bytevector-n)
        (g$12870$1CmlGO core-prim . get-bytevector-all)
        (g$12869$1CmlGO core-prim . flush-output-port)
        (g$12868$1CmlGO core-prim . close-port)
        (g$12867$1CmlGO core-prim . call-with-string-output-port)
        (g$12866$1CmlGO core-prim . call-with-port)
        (g$12865$1CmlGO core-prim . call-with-bytevector-output-port)
        (g$12864$1CmlGO core-prim . bytevector->string)
        (g$12863$1CmlGO core-prim . buffer-mode?)
        (g$12862$1CmlGO core-prim . binary-port?)
        (g$9456$1CmlGO core-prim . scheme-report-environment)
        (g$7508$1CmlGO core-prim . quotient)
        (g$9455$1CmlGO core-prim . null-environment)
        (g$7509$1CmlGO core-prim . remainder)
        (g$7510$1CmlGO core-prim . modulo)
        (g$12861$1CmlGO core-prim . inexact->exact)
        (g$7512$1CmlGO core-prim . force)
        (g$12860$1CmlGO core-prim . exact->inexact)
        (g$12859$1CmlGO core-prim . exit)
        (g$12426$1CmlGO core-prim . command-line)
        (g$12858$1CmlGO core-prim . string-fill!)
        (g$12857$1CmlGO core-prim . string-set!)
        (g$12856$1CmlGO core-prim . set-cdr!)
        (g$12855$1CmlGO core-prim . set-car!)
        (g$6528$1CmlGO core-prim . remove)
        (g$6529$1CmlGO core-prim . remv)
        (g$6511$1CmlGO core-prim . remp)
        (g$6530$1CmlGO core-prim . remq)
        (g$6510$1CmlGO core-prim . partition)
        (g$6518$1CmlGO core-prim . memv)
        (g$6517$1CmlGO core-prim . memq)
        (g$6520$1CmlGO core-prim . memp)
        (g$6519$1CmlGO core-prim . member)
        (g$6524$1CmlGO core-prim . exists)
        (g$6523$1CmlGO core-prim . for-all)
        (g$6527$1CmlGO core-prim . fold-right)
        (g$6526$1CmlGO core-prim . fold-left)
        (g$6509$1CmlGO core-prim . find)
        (g$6512$1CmlGO core-prim . filter)
        (g$6525$1CmlGO core-prim . cons*)
        (g$6514$1CmlGO core-prim . assv)
        (g$6513$1CmlGO core-prim . assq)
        (g$6516$1CmlGO core-prim . assp)
        (g$6515$1CmlGO core-prim . assoc)
        (g$12854$1CmlGO core-prim . with-exception-handler)
        (g$12853$1CmlGO core-prim . raise-continuable)
        (g$12852$1CmlGO core-prim . raise)
        (g$9458$1CmlGO core-prim . eval)
        (g$9454$1CmlGO core-prim . environment)
        (g$8076$1CmlGO core-prim . make-enumeration)
        (g$8083$1CmlGO core-prim . enum-set=?)
        (g$8077$1CmlGO core-prim . enum-set-universe)
        (g$8084$1CmlGO core-prim . enum-set-union)
        (g$8082$1CmlGO core-prim . enum-set-subset?)
        (g$8088$1CmlGO core-prim . enum-set-projection)
        (g$8081$1CmlGO core-prim . enum-set-member?)
        (g$8085$1CmlGO core-prim . enum-set-intersection)
        (g$8078$1CmlGO core-prim . enum-set-indexer)
        (g$8086$1CmlGO core-prim . enum-set-difference)
        (g$8079$1CmlGO core-prim . enum-set-constructor)
        (g$8087$1CmlGO core-prim . enum-set-complement)
        (g$8080$1CmlGO core-prim . enum-set->list)
        (g$7419$1CmlGO core-prim . who-condition?)
        (g$7330$1CmlGO core-prim . warning?)
        (g$7372$1CmlGO core-prim . violation?)
        (g$7496$1CmlGO core-prim . undefined-violation?)
        (g$7480$1CmlGO core-prim . syntax-violation?)
        (g$7482$1CmlGO core-prim . syntax-violation-subform)
        (g$7481$1CmlGO core-prim . syntax-violation-form)
        (g$9475$1CmlGO core-prim . syntax-violation)
        (g$12851$1CmlGO core-prim . simple-conditions)
        (g$7344$1CmlGO core-prim . serious-condition?)
        (g$7434$1CmlGO core-prim . non-continuable-violation?)
        (g$7315$1CmlGO core-prim . message-condition?)
        (g$7417$1CmlGO core-prim . make-who-condition)
        (g$7329$1CmlGO core-prim . make-warning)
        (g$7371$1CmlGO core-prim . make-violation)
        (g$7495$1CmlGO core-prim . make-undefined-violation)
        (g$7477$1CmlGO core-prim . make-syntax-violation)
        (g$7343$1CmlGO core-prim . make-serious-condition)
        (g$7433$1CmlGO core-prim . make-non-continuable-violation)
        (g$7313$1CmlGO core-prim . make-message-condition)
        (g$7461$1CmlGO core-prim . make-lexical-violation)
        (g$7400$1CmlGO core-prim . make-irritants-condition)
        (g$7447$1CmlGO core-prim . make-implementation-restriction-violation)
        (g$7357$1CmlGO core-prim . make-error)
        (g$7385$1CmlGO core-prim . make-assertion-violation)
        (g$7462$1CmlGO core-prim . lexical-violation?)
        (g$7402$1CmlGO core-prim . irritants-condition?)
        (g$7448$1CmlGO core-prim . implementation-restriction-violation?)
        (g$7358$1CmlGO core-prim . error?)
        (g$7420$1CmlGO core-prim . condition-who)
        (g$12850$1CmlGO core-prim . condition-predicate)
        (g$7316$1CmlGO core-prim . condition-message)
        (g$7403$1CmlGO core-prim . condition-irritants)
        (g$12849$1CmlGO core-prim . condition-accessor)
        (g$12848$1CmlGO core-prim . condition)
        (g$7386$1CmlGO core-prim . assertion-violation?)
        (g$12847$1CmlGO core-prim . condition?)
        (g$12846$1CmlGO core-prim . utf32->string)
        (g$12845$1CmlGO core-prim . utf16->string)
        (g$12844$1CmlGO core-prim . utf8->string)
        (g$12843$1CmlGO core-prim . uint-list->bytevector)
        (g$12842$1CmlGO core-prim . u8-list->bytevector)
        (g$12841$1CmlGO core-prim . string->utf8)
        (g$12840$1CmlGO core-prim . string->utf32)
        (g$12839$1CmlGO core-prim . string->utf16)
        (g$12838$1CmlGO core-prim . sint-list->bytevector)
        (g$7171$1CmlGO core-prim . native-endianness)
        (g$12837$1CmlGO core-prim . bytevector?)
        (g$12836$1CmlGO core-prim . bytevector=?)
        (g$12835$1CmlGO core-prim . bytevector-uint-set!)
        (g$12834$1CmlGO core-prim . bytevector-uint-ref)
        (g$12833$1CmlGO core-prim . bytevector-u8-set!)
        (g$12832$1CmlGO core-prim . bytevector-u8-ref)
        (g$7192$1CmlGO core-prim . bytevector-u64-set!)
        (g$7188$1CmlGO core-prim . bytevector-u64-ref)
        (g$7194$1CmlGO core-prim . bytevector-u64-native-set!)
        (g$7190$1CmlGO core-prim . bytevector-u64-native-ref)
        (g$7184$1CmlGO core-prim . bytevector-u32-set!)
        (g$7180$1CmlGO core-prim . bytevector-u32-ref)
        (g$7186$1CmlGO core-prim . bytevector-u32-native-set!)
        (g$7182$1CmlGO core-prim . bytevector-u32-native-ref)
        (g$7176$1CmlGO core-prim . bytevector-u16-set!)
        (g$7172$1CmlGO core-prim . bytevector-u16-ref)
        (g$7178$1CmlGO core-prim . bytevector-u16-native-set!)
        (g$7174$1CmlGO core-prim . bytevector-u16-native-ref)
        (g$12831$1CmlGO core-prim . bytevector-sint-set!)
        (g$12830$1CmlGO core-prim . bytevector-sint-ref)
        (g$12829$1CmlGO core-prim . bytevector-s8-set!)
        (g$12828$1CmlGO core-prim . bytevector-s8-ref)
        (g$7193$1CmlGO core-prim . bytevector-s64-set!)
        (g$7189$1CmlGO core-prim . bytevector-s64-ref)
        (g$7195$1CmlGO core-prim . bytevector-s64-native-set!)
        (g$7191$1CmlGO core-prim . bytevector-s64-native-ref)
        (g$7185$1CmlGO core-prim . bytevector-s32-set!)
        (g$7181$1CmlGO core-prim . bytevector-s32-ref)
        (g$7187$1CmlGO core-prim . bytevector-s32-native-set!)
        (g$7183$1CmlGO core-prim . bytevector-s32-native-ref)
        (g$7177$1CmlGO core-prim . bytevector-s16-set!)
        (g$7173$1CmlGO core-prim . bytevector-s16-ref)
        (g$7179$1CmlGO core-prim . bytevector-s16-native-set!)
        (g$7175$1CmlGO core-prim . bytevector-s16-native-ref)
        (g$12827$1CmlGO core-prim . bytevector-length)
        (g$12826$1CmlGO core-prim . bytevector-ieee-single-set!)
        (g$12825$1CmlGO core-prim . bytevector-ieee-single-ref)
        (g$7198$1CmlGO core-prim . bytevector-ieee-single-native-set!)
        (g$7196$1CmlGO core-prim . bytevector-ieee-single-native-ref)
        (g$12824$1CmlGO core-prim . bytevector-ieee-double-set!)
        (g$12823$1CmlGO core-prim . bytevector-ieee-double-ref)
        (g$7199$1CmlGO core-prim . bytevector-ieee-double-native-set!)
        (g$7197$1CmlGO core-prim . bytevector-ieee-double-native-ref)
        (g$12822$1CmlGO core-prim . bytevector-fill!)
        (g$12821$1CmlGO core-prim . bytevector-copy!)
        (g$12820$1CmlGO core-prim . bytevector-copy)
        (g$12819$1CmlGO core-prim . bytevector->uint-list)
        (g$12818$1CmlGO core-prim . bytevector->u8-list)
        (g$12817$1CmlGO core-prim . bytevector->sint-list)
        (g$7808$1CmlGO core-prim . no-nans-violation?)
        (g$7794$1CmlGO core-prim . no-infinities-violation?)
        (g$7807$1CmlGO core-prim . make-no-nans-violation)
        (g$7793$1CmlGO core-prim . make-no-infinities-violation)
        (g$12816$1CmlGO core-prim . real->flonum)
        (g$12815$1CmlGO core-prim . flzero?)
        (g$12814$1CmlGO core-prim . fltruncate)
        (g$12813$1CmlGO core-prim . fltan)
        (g$12812$1CmlGO core-prim . flsqrt)
        (g$12811$1CmlGO core-prim . flsin)
        (g$12810$1CmlGO core-prim . flround)
        (g$12809$1CmlGO core-prim . flpositive?)
        (g$12808$1CmlGO core-prim . flonum?)
        (g$12807$1CmlGO core-prim . flodd?)
        (g$12806$1CmlGO core-prim . flnumerator)
        (g$12805$1CmlGO core-prim . flnegative?)
        (g$12804$1CmlGO core-prim . flnan?)
        (g$12803$1CmlGO core-prim . flmod0)
        (g$12802$1CmlGO core-prim . flmod)
        (g$12801$1CmlGO core-prim . flmin)
        (g$12800$1CmlGO core-prim . flmax)
        (g$12799$1CmlGO core-prim . fllog)
        (g$12798$1CmlGO core-prim . flinteger?)
        (g$12797$1CmlGO core-prim . flinfinite?)
        (g$12796$1CmlGO core-prim . flfloor)
        (g$12795$1CmlGO core-prim . flfinite?)
        (g$12794$1CmlGO core-prim . flexpt)
        (g$12793$1CmlGO core-prim . flexp)
        (g$12792$1CmlGO core-prim . fleven?)
        (g$12791$1CmlGO core-prim . fldiv0-and-mod0)
        (g$12790$1CmlGO core-prim . fldiv0)
        (g$12789$1CmlGO core-prim . fldiv-and-mod)
        (g$12788$1CmlGO core-prim . fldiv)
        (g$12787$1CmlGO core-prim . fldenominator)
        (g$12786$1CmlGO core-prim . flcos)
        (g$12785$1CmlGO core-prim . flceiling)
        (g$12784$1CmlGO core-prim . flatan)
        (g$12783$1CmlGO core-prim . flasin)
        (g$12782$1CmlGO core-prim . flacos)
        (g$12781$1CmlGO core-prim . flabs)
        (g$12780$1CmlGO core-prim . fl>?)
        (g$12779$1CmlGO core-prim . fl>=?)
        (g$12778$1CmlGO core-prim . fl=?)
        (g$12777$1CmlGO core-prim . fl<?)
        (g$12776$1CmlGO core-prim . fl<=?)
        (g$12775$1CmlGO core-prim . fl/)
        (g$12774$1CmlGO core-prim . fl-)
        (g$12773$1CmlGO core-prim . fl+)
        (g$12772$1CmlGO core-prim . fl*)
        (g$12771$1CmlGO core-prim . fixnum->flonum)
        (g$12770$1CmlGO core-prim . fxzero?)
        (g$12769$1CmlGO core-prim . fxxor)
        (g$7739$1CmlGO core-prim . fxrotate-bit-field)
        (g$12768$1CmlGO core-prim . fxreverse-bit-field)
        (g$12767$1CmlGO core-prim . fxpositive?)
        (g$12766$1CmlGO core-prim . fxodd?)
        (g$12765$1CmlGO core-prim . fxnot)
        (g$12764$1CmlGO core-prim . fxnegative?)
        (g$12763$1CmlGO core-prim . fxmod0)
        (g$12762$1CmlGO core-prim . fxmod)
        (g$12761$1CmlGO core-prim . fxmin)
        (g$12760$1CmlGO core-prim . fxmax)
        (g$12759$1CmlGO core-prim . fxlength)
        (g$12758$1CmlGO core-prim . fxior)
        (g$7733$1CmlGO core-prim . fxif)
        (g$12757$1CmlGO core-prim . fxfirst-bit-set)
        (g$12756$1CmlGO core-prim . fxeven?)
        (g$12755$1CmlGO core-prim . fxdiv0-and-mod0)
        (g$12754$1CmlGO core-prim . fxdiv0)
        (g$12753$1CmlGO core-prim . fxdiv-and-mod)
        (g$12752$1CmlGO core-prim . fxdiv)
        (g$7736$1CmlGO core-prim . fxcopy-bit-field)
        (g$7734$1CmlGO core-prim . fxcopy-bit)
        (g$12751$1CmlGO core-prim . fxbit-set?)
        (g$7735$1CmlGO core-prim . fxbit-field)
        (g$12750$1CmlGO core-prim . fxbit-count)
        (g$7738$1CmlGO core-prim . fxarithmetic-shift-right)
        (g$7737$1CmlGO core-prim . fxarithmetic-shift-left)
        (g$12749$1CmlGO core-prim . fxarithmetic-shift)
        (g$12748$1CmlGO core-prim . fxand)
        (g$12747$1CmlGO core-prim . fx>?)
        (g$12746$1CmlGO core-prim . fx>=?)
        (g$12745$1CmlGO core-prim . fx=?)
        (g$12744$1CmlGO core-prim . fx<?)
        (g$12743$1CmlGO core-prim . fx<=?)
        (g$12742$1CmlGO core-prim . fx-/carry)
        (g$12741$1CmlGO core-prim . fx-)
        (g$12740$1CmlGO core-prim . fx+/carry)
        (g$12739$1CmlGO core-prim . fx+)
        (g$12738$1CmlGO core-prim . fx*/carry)
        (g$12737$1CmlGO core-prim . fx*)
        (g$12736$1CmlGO core-prim . greatest-fixnum)
        (g$12735$1CmlGO core-prim . least-fixnum)
        (g$12734$1CmlGO core-prim . fixnum-width)
        (g$12733$1CmlGO core-prim . fixnum?)
        (g$7691$1CmlGO core-prim . bitwise-rotate-bit-field)
        (g$12732$1CmlGO core-prim . bitwise-reverse-bit-field)
        (g$12731$1CmlGO core-prim . bitwise-length)
        (g$7685$1CmlGO core-prim . bitwise-if)
        (g$12730$1CmlGO core-prim . bitwise-first-bit-set)
        (g$7688$1CmlGO core-prim . bitwise-copy-bit-field)
        (g$7686$1CmlGO core-prim . bitwise-copy-bit)
        (g$12729$1CmlGO core-prim . bitwise-bit-set?)
        (g$12728$1CmlGO core-prim . bitwise-bit-field)
        (g$12727$1CmlGO core-prim . bitwise-bit-count)
        (g$12726$1CmlGO core-prim . bitwise-xor)
        (g$12725$1CmlGO core-prim . bitwise-ior)
        (g$12724$1CmlGO core-prim . bitwise-and)
        (g$12723$1CmlGO core-prim . bitwise-not)
        (g$7690$1CmlGO core-prim . bitwise-arithmetic-shift-right)
        (g$7689$1CmlGO core-prim . bitwise-arithmetic-shift-left)
        (g$12722$1CmlGO core-prim . bitwise-arithmetic-shift)
        (g$12721$1CmlGO core-prim . zero?)
        (g$12720$1CmlGO core-prim . vector?)
        (g$12719$1CmlGO core-prim . vector-set!)
        (g$12718$1CmlGO core-prim . vector-ref)
        (g$12717$1CmlGO core-prim . vector-map)
        (g$12716$1CmlGO core-prim . vector-length)
        (g$12715$1CmlGO core-prim . vector-for-each)
        (g$12714$1CmlGO core-prim . vector-fill!)
        (g$12713$1CmlGO core-prim . vector->list)
        (g$12712$1CmlGO core-prim . vector)
        (g$12711$1CmlGO core-prim . values)
        (g$12710$1CmlGO core-prim . truncate)
        (g$12709$1CmlGO core-prim . tan)
        (g$12708$1CmlGO core-prim . symbol?)
        (g$6680$1CmlGO core-prim . symbol=?)
        (g$12707$1CmlGO core-prim . symbol->string)
        (g$12706$1CmlGO core-prim . substring)
        (g$12705$1CmlGO core-prim . string?)
        (g$6677$1CmlGO core-prim . string>?)
        (g$6679$1CmlGO core-prim . string>=?)
        (g$6675$1CmlGO core-prim . string=?)
        (g$6676$1CmlGO core-prim . string<?)
        (g$6678$1CmlGO core-prim . string<=?)
        (g$12704$1CmlGO core-prim . string-ref)
        (g$12703$1CmlGO core-prim . string-length)
        (g$12702$1CmlGO core-prim . string-for-each)
        (g$12701$1CmlGO core-prim . string-copy)
        (g$12700$1CmlGO core-prim . string-append)
        (g$12699$1CmlGO core-prim . string->symbol)
        (g$12698$1CmlGO core-prim . string->number)
        (g$12697$1CmlGO core-prim . string->list)
        (g$12696$1CmlGO core-prim . string)
        (g$12695$1CmlGO core-prim . sqrt)
        (g$12694$1CmlGO core-prim . sin)
        (g$12693$1CmlGO core-prim . round)
        (g$12692$1CmlGO core-prim . reverse)
        (g$12691$1CmlGO core-prim . real?)
        (g$12690$1CmlGO core-prim . real-valued?)
        (g$12689$1CmlGO core-prim . real-part)
        (g$6721$1CmlGO core-prim . rationalize)
        (g$12688$1CmlGO core-prim . rational?)
        (g$12687$1CmlGO core-prim . rational-valued?)
        (g$12686$1CmlGO core-prim . procedure?)
        (g$12685$1CmlGO core-prim . positive?)
        (g$12684$1CmlGO core-prim . pair?)
        (g$12683$1CmlGO core-prim . odd?)
        (g$12682$1CmlGO core-prim . numerator)
        (g$12681$1CmlGO core-prim . number?)
        (g$12680$1CmlGO core-prim . number->string)
        (g$12679$1CmlGO core-prim . null?)
        (g$12678$1CmlGO core-prim . not)
        (g$12677$1CmlGO core-prim . negative?)
        (g$12676$1CmlGO core-prim . nan?)
        (g$12675$1CmlGO core-prim . min)
        (g$12674$1CmlGO core-prim . max)
        (g$12673$1CmlGO core-prim . map)
        (g$12672$1CmlGO core-prim . make-vector)
        (g$12671$1CmlGO core-prim . make-string)
        (g$12670$1CmlGO core-prim . make-rectangular)
        (g$12669$1CmlGO core-prim . make-polar)
        (g$12668$1CmlGO core-prim . magnitude)
        (g$12667$1CmlGO core-prim . log)
        (g$12666$1CmlGO core-prim . list?)
        (g$12665$1CmlGO core-prim . list-tail)
        (g$12664$1CmlGO core-prim . list-ref)
        (g$12663$1CmlGO core-prim . list->vector)
        (g$12662$1CmlGO core-prim . list->string)
        (g$12661$1CmlGO core-prim . list)
        (g$12660$1CmlGO core-prim . length)
        (g$12659$1CmlGO core-prim . lcm)
        (g$12658$1CmlGO core-prim . integer?)
        (g$12657$1CmlGO core-prim . integer-valued?)
        (g$12656$1CmlGO core-prim . integer->char)
        (g$12655$1CmlGO core-prim . infinite?)
        (g$12654$1CmlGO core-prim . inexact?)
        (g$12653$1CmlGO core-prim . inexact)
        (g$12652$1CmlGO core-prim . imag-part)
        (g$12651$1CmlGO core-prim . gcd)
        (g$12650$1CmlGO core-prim . for-each)
        (g$12649$1CmlGO core-prim . floor)
        (g$12648$1CmlGO core-prim . finite?)
        (g$12647$1CmlGO core-prim . expt)
        (g$12646$1CmlGO core-prim . exp)
        (g$12645$1CmlGO core-prim . exact?)
        (g$12644$1CmlGO core-prim . exact-integer-sqrt)
        (g$12643$1CmlGO core-prim . exact)
        (g$12642$1CmlGO core-prim . even?)
        (g$12641$1CmlGO core-prim . error)
        (g$12640$1CmlGO core-prim . eqv?)
        (g$12639$1CmlGO core-prim . equal?)
        (g$12638$1CmlGO core-prim . eq?)
        (g$12637$1CmlGO core-prim . dynamic-wind)
        (g$12636$1CmlGO core-prim . div0-and-mod0)
        (g$12635$1CmlGO core-prim . mod0)
        (g$12634$1CmlGO core-prim . div0)
        (g$12633$1CmlGO core-prim . div-and-mod)
        (g$12632$1CmlGO core-prim . mod)
        (g$12631$1CmlGO core-prim . div)
        (g$12630$1CmlGO core-prim . denominator)
        (g$12629$1CmlGO core-prim . cos)
        (g$12628$1CmlGO core-prim . cons)
        (g$12627$1CmlGO core-prim . complex?)
        (g$12626$1CmlGO core-prim . char?)
        (g$6718$1CmlGO core-prim . char>?)
        (g$6720$1CmlGO core-prim . char>=?)
        (g$6716$1CmlGO core-prim . char=?)
        (g$6717$1CmlGO core-prim . char<?)
        (g$6719$1CmlGO core-prim . char<=?)
        (g$12625$1CmlGO core-prim . char->integer)
        (g$12624$1CmlGO core-prim . ceiling)
        (g$12623$1CmlGO core-prim . call-with-values)
        (g$12622$1CmlGO core-prim . call/cc)
        (g$12621$1CmlGO core-prim . call-with-current-continuation)
        (g$6640$1CmlGO core-prim . cddddr)
        (g$6639$1CmlGO core-prim . cdddar)
        (g$6638$1CmlGO core-prim . cddadr)
        (g$6637$1CmlGO core-prim . cddaar)
        (g$6636$1CmlGO core-prim . cdaddr)
        (g$6635$1CmlGO core-prim . cdadar)
        (g$6634$1CmlGO core-prim . cdaadr)
        (g$6633$1CmlGO core-prim . cdaaar)
        (g$6632$1CmlGO core-prim . cadddr)
        (g$6631$1CmlGO core-prim . caddar)
        (g$6630$1CmlGO core-prim . cadadr)
        (g$6629$1CmlGO core-prim . cadaar)
        (g$6628$1CmlGO core-prim . caaddr)
        (g$6627$1CmlGO core-prim . caadar)
        (g$6626$1CmlGO core-prim . caaadr)
        (g$6625$1CmlGO core-prim . caaaar)
        (g$6624$1CmlGO core-prim . cdddr)
        (g$6623$1CmlGO core-prim . cddar)
        (g$6622$1CmlGO core-prim . cdadr)
        (g$6621$1CmlGO core-prim . cdaar)
        (g$6620$1CmlGO core-prim . caddr)
        (g$6619$1CmlGO core-prim . cadar)
        (g$6618$1CmlGO core-prim . caadr)
        (g$6617$1CmlGO core-prim . caaar)
        (g$6616$1CmlGO core-prim . cddr)
        (g$6615$1CmlGO core-prim . cdar)
        (g$6614$1CmlGO core-prim . cadr)
        (g$6613$1CmlGO core-prim . caar)
        (g$12620$1CmlGO core-prim . cdr)
        (g$12619$1CmlGO core-prim . car)
        (g$12618$1CmlGO core-prim . boolean?)
        (g$6681$1CmlGO core-prim . boolean=?)
        (g$12617$1CmlGO core-prim . atan)
        (g$12616$1CmlGO core-prim . assertion-violation)
        (g$12615$1CmlGO core-prim . asin)
        (g$12614$1CmlGO core-prim . apply)
        (g$12613$1CmlGO core-prim . append)
        (g$12612$1CmlGO core-prim . angle)
        (g$12611$1CmlGO core-prim . acos)
        (g$12610$1CmlGO core-prim . abs)
        (g$12609$1CmlGO core-prim . /)
        (g$12608$1CmlGO core-prim . *)
        (g$12607$1CmlGO core-prim . -)
        (g$12606$1CmlGO core-prim . +)
        (g$12605$1CmlGO core-prim . >=)
        (g$12604$1CmlGO core-prim . >)
        (g$12603$1CmlGO core-prim . =)
        (g$12602$1CmlGO core-prim . <=)
        (g$12601$1CmlGO core-prim . <)
        (g$12600$1CmlGO core-prim . make-record-printer)
        (g$12599$1CmlGO core-prim . eqv-hash)
        (g$12598$1CmlGO core-prim . eq-hash)
        (g$12597$1CmlGO core-prim . reverse!)
        (g$12596$1CmlGO core-prim . deserialize-port)
        (g$12595$1CmlGO core-prim . serialize-port)
        (g$8051$1CmlGO core-prim . enum-set?)
        (g$7511$1CmlGO core-prim . make-promise)
        (g$12428$1CmlGO core-prim . load/args)
        (g$8161$1CmlGO core-prim . printf)
        (g$8162$1CmlGO core-prim . fprintf)
        (g$8163$1CmlGO core-prim . format)
        (g$12594$1CmlGO core-prim . procedure-form)
        (g$12593$1CmlGO core-prim . procedure-environment)
        (g$12592$1CmlGO core-prim . procedure-name)
        (g$12591$1CmlGO core-prim . procedure-arity)
        (g$12590$1CmlGO core-prim . gc-collect)
        (g$12589$1CmlGO core-prim . clr-type?)
        (g$12588$1CmlGO core-prim . get-clr-type)
        (g$12587$1CmlGO core-prim . get-command-line)
        (g$12586$1CmlGO core-prim . vector-append)
        (g$12585$1CmlGO core-prim . vector-filter)
        (g$12584$1CmlGO core-prim . vector-reverse!)
        (g$12583$1CmlGO core-prim . vector-contains?)
        (g$12582$1CmlGO core-prim . vector-index-of)
        (g$12581$1CmlGO core-prim . vector-copy)
        (g$12580$1CmlGO core-prim . vector-binary-search)
        (g$12579$1CmlGO core-prim . get-output-string)
        (g$12578$1CmlGO core-prim . open-output-string)
        (g$12577$1CmlGO core-prim . open-input-string)
        (g$12576$1CmlGO core-prim . string-ci-compare)
        (g$12575$1CmlGO core-prim . string-compare)
        (g$12574$1CmlGO core-prim . string-format)
        (g$12425$1CmlGO core-prim . trace-printer)
        (g$12573$1CmlGO core-prim . make-traced-procedure)
        (g$8183$1CmlGO core-prim . make-traced-macro)
        (g$9471$1CmlGO core-prim . assertion-error)
        (g$12572$1CmlGO core-prim . pmap)
        (g$12571$1CmlGO core-prim . time-it)
        (g$8188$1CmlGO core-prim . make-parameter)
        (g$12570$1CmlGO core-prim . library-locator)
        (g$12569$1CmlGO core-prim . get-library-paths)
        (g$9450$1CmlGO core-prim . environment-bindings)
        (g$9453$1CmlGO core-prim . environment-symbols)
        (g$9449$1CmlGO core-prim . interaction-environment-symbols)
        (g$12568$1CmlGO core-prim . optimization-level)
        (g$8618$1CmlGO core-prim . library-path)
        (g$12567$1CmlGO $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$12566$1CmlGO $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$12565$1CmlGO $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$12564$1CmlGO $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$12563$1CmlGO $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$12562$1CmlGO
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$12561$1CmlGO
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$12560$1CmlGO
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$12559$1CmlGO
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$12558$1CmlGO $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$12557$1CmlGO
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$12556$1CmlGO $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$12555$1CmlGO $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$12554$1CmlGO $core-rtd &i/o-rtd &i/o-rcd)
        (g$12553$1CmlGO $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12552$1CmlGO $core-rtd &undefined-rtd &undefined-rcd)
        (g$12551$1CmlGO $core-rtd &syntax-rtd &syntax-rcd)
        (g$12550$1CmlGO $core-rtd &lexical-rtd &lexical-rcd)
        (g$12549$1CmlGO
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$12548$1CmlGO $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12547$1CmlGO $core-rtd &who-rtd &who-rcd)
        (g$12546$1CmlGO $core-rtd &irritants-rtd &irritants-rcd)
        (g$12545$1CmlGO $core-rtd &assertion-rtd &assertion-rcd)
        (g$12544$1CmlGO $core-rtd &violation-rtd &violation-rcd)
        (g$12543$1CmlGO $core-rtd &error-rtd &error-rcd)
        (g$12542$1CmlGO $core-rtd &serious-rtd &serious-rcd)
        (g$12541$1CmlGO $core-rtd &warning-rtd &warning-rcd)
        (g$12540$1CmlGO $core-rtd &message-rtd &message-rcd)
        (g$12539$1CmlGO $core-rtd &condition-rtd &condition-rcd)
        (g$12538$1CmlGO macro . define-condition-type)
        (g$12537$1CmlGO macro . define-enumeration)
        (g$12536$1CmlGO macro . define-record-type)
        (g$12535$1CmlGO macro . parent-rtd)
        (g$12534$1CmlGO macro . nongenerative)
        (g$12533$1CmlGO macro . opaque)
        (g$12532$1CmlGO macro . sealed)
        (g$12531$1CmlGO macro . protocol)
        (g$12530$1CmlGO macro . parent)
        (g$12529$1CmlGO macro . immutable)
        (g$12528$1CmlGO macro . mutable)
        (g$12527$1CmlGO macro . fields)
        (g$12526$1CmlGO macro . error-handling-mode)
        (g$12525$1CmlGO macro . file-options)
        (g$12524$1CmlGO macro . buffer-mode)
        (g$12523$1CmlGO macro . eol-style)
        (g$12522$1CmlGO macro . guard)
        (g$12521$1CmlGO macro . trace-letrec-syntax)
        (g$12520$1CmlGO macro . trace-let-syntax)
        (g$12519$1CmlGO macro . trace-define-syntax)
        (g$12518$1CmlGO macro . trace-define)
        (g$12517$1CmlGO macro . trace-lambda)
        (g$12516$1CmlGO macro . unsyntax-splicing)
        (g$12515$1CmlGO macro . unsyntax)
        (g$12514$1CmlGO macro . unquote-splicing)
        (g$12513$1CmlGO macro . unquote)
        (g$12512$1CmlGO macro . _)
        (g$12511$1CmlGO macro . else)
        (g$12510$1CmlGO macro . =>)
        (g$12509$1CmlGO macro . ...)
        (g$12508$1CmlGO macro . assert)
        (g$12507$1CmlGO macro . endianness)
        (g$12506$1CmlGO macro . delay)
        (g$12505$1CmlGO macro . time)
        (g$12504$1CmlGO macro . or)
        (g$12503$1CmlGO macro . and)
        (g$12502$1CmlGO macro . do)
        (g$12501$1CmlGO macro . cond)
        (g$12500$1CmlGO macro . let*)
        (g$12499$1CmlGO macro . let)
        (g$12498$1CmlGO macro . identifier-syntax)
        (g$12497$1CmlGO macro . with-syntax)
        (g$12496$1CmlGO macro . quasisyntax)
        (g$12495$1CmlGO macro . quasiquote)
        (g$12494$1CmlGO macro . syntax-rules)
        (g$12493$1CmlGO macro . include-into)
        (g$12492$1CmlGO macro . include)
        (g$12491$1CmlGO macro . define-struct)
        (g$12490$1CmlGO macro . let-values)
        (g$12489$1CmlGO macro . let*-values)
        (g$12488$1CmlGO core-macro . record-constructor-descriptor)
        (g$12487$1CmlGO core-macro . record-type-descriptor)
        (g$12486$1CmlGO core-macro . fluid-let-syntax)
        (g$12485$1CmlGO macro . case)
        (g$12484$1CmlGO macro . parameterize)
        (g$12483$1CmlGO macro . unless)
        (g$12482$1CmlGO macro . when)
        (g$12481$1CmlGO core-macro . if)
        (g$12480$1CmlGO core-macro . letrec*)
        (g$12479$1CmlGO core-macro . letrec)
        (g$12478$1CmlGO core-macro . type-descriptor)
        (g$12477$1CmlGO core-macro . case-lambda)
        (g$12476$1CmlGO core-macro . lambda)
        (g$12475$1CmlGO core-macro . syntax)
        (g$12474$1CmlGO core-macro . syntax-case)
        (g$12473$1CmlGO core-macro . quote)
        (g$12472$1CmlGO core-macro . foreign-call)
        (g$12471$1CmlGO letrec-syntax)
        (g$12470$1CmlGO let-syntax)
        (g$12469$1CmlGO set!)
        (g$12468$1CmlGO export)
        (g$12467$1CmlGO import)
        (g$12466$1CmlGO library)
        (g$12465$1CmlGO begin)
        (g$12464$1CmlGO module)
        (g$12463$1CmlGO define-syntax)
        (g$12462$1CmlGO define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7738$1CmlGO
      'g$13121$1CmlGO
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$13000$1CmlGO)
        (eval-core . g$12999$1CmlGO)
        (set-symbol-value! . g$12998$1CmlGO)
        (symbol-value . g$12997$1CmlGO)
        (gensym . g$12995$1CmlGO)
        (void . g$12994$1CmlGO))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11782$1CmlGO
     g$trace-printer$11822$1CmlGO
     (g$make-parameter$7193$1CmlGO write))
   (g$command-line$11783$1CmlGO
     g$command-line$11823$1CmlGO
     (g$make-parameter$7193$1CmlGO (get-command-line)))
   (g$local-library-path$11784$1CmlGO
     g$local-library-path$11824$1CmlGO
     (case-lambda
       ((g$filename$11795$1CmlGO)
        (cons
          (g$get-directory-name$6127$1CmlGO g$filename$11795$1CmlGO)
          (g$library-path$7722$1CmlGO)))))
   (g$load/args$11785$1CmlGO
     g$load/args$11825$1CmlGO
     (case-lambda
       ((g$filename$11796$1CmlGO . g$args$11797$1CmlGO)
        (begin
          (apply
            g$load-r6rs-top-level$11792$1CmlGO
            g$filename$11796$1CmlGO
            'load
            g$args$11797$1CmlGO)
          (void)))))
   (g$load$11786$1CmlGO
     g$load$11826$1CmlGO
     (case-lambda
       ((g$filename$11798$1CmlGO)
        (begin
          (apply
            g$load-r6rs-top-level$11792$1CmlGO
            g$filename$11798$1CmlGO
            'load
            (cdr (g$command-line$11783$1CmlGO)))
          (void)))))
   (g$ironscheme-build$11787$1CmlGO
     g$ironscheme-build$11827$1CmlGO
     (case-lambda (() (g$load$11786$1CmlGO '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11788$1CmlGO
     g$eval-top-level$11828$1CmlGO
     (case-lambda
       ((g$x$11799$1CmlGO)
        (g$eval$11757$1CmlGO
          g$x$11799$1CmlGO
          (g$interaction-environment$11780$1CmlGO)))))
   (g$compile-system-libraries$11789$1CmlGO
     g$compile-system-libraries$11829$1CmlGO
     (case-lambda
       (()
        (g$eval-top-level$11788$1CmlGO
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11790$1CmlGO
     g$compile$11830$1CmlGO
     (case-lambda
       ((g$filename$11800$1CmlGO)
        (g$load-r6rs-top-level$11792$1CmlGO g$filename$11800$1CmlGO 'compile))))
   (g$compile->closure$11791$1CmlGO
     g$compile->closure$11831$1CmlGO
     (case-lambda
       ((g$filename$11801$1CmlGO)
        (g$load-r6rs-top-level$11792$1CmlGO g$filename$11801$1CmlGO 'closure))))
   (g$load-r6rs-top-level$11792$1CmlGO
     g$load-r6rs-top-level$11832$1CmlGO
     (case-lambda
       ((g$filename$11802$1CmlGO g$how$11803$1CmlGO . g$args$11804$1CmlGO)
        ((case-lambda
           ((g$library-path$11807$1CmlGO g$library-path$11808$1CmlGO)
            ((case-lambda
               ((g$swap$11809$1CmlGO)
                (dynamic-wind
                  g$swap$11809$1CmlGO
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11810$1CmlGO)
                         ((case-lambda
                            ((g$t$11811$1CmlGO)
                             (if (g$memv$5663$1CmlGO
                                   g$t$11811$1CmlGO
                                   '(closure))
                               (g$pre-compile-r6rs-top-level$11779$1CmlGO
                                 g$x*$11810$1CmlGO)
                               (if (g$memv$5663$1CmlGO g$t$11811$1CmlGO '(load))
                                 ((case-lambda
                                    ((g$command-line$11814$1CmlGO
                                       g$command-line$11815$1CmlGO)
                                     ((case-lambda
                                        ((g$swap$11816$1CmlGO)
                                         (dynamic-wind
                                           g$swap$11816$1CmlGO
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11778$1CmlGO
                                                 g$x*$11810$1CmlGO))))
                                           g$swap$11816$1CmlGO)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11817$1CmlGO)
                                             (begin
                                               (g$command-line$11814$1CmlGO
                                                 g$command-line$11815$1CmlGO)
                                               (set! g$command-line$11815$1CmlGO
                                                 g$t$11817$1CmlGO))))
                                          (g$command-line$11814$1CmlGO)))))))
                                  g$command-line$11783$1CmlGO
                                  (cons
                                    g$filename$11802$1CmlGO
                                    (map (case-lambda
                                           ((g$x$11818$1CmlGO)
                                            (g$format$7108$1CmlGO
                                              '"~a"
                                              g$x$11818$1CmlGO)))
                                         g$args$11804$1CmlGO)))
                                 (if (g$memv$5663$1CmlGO
                                       g$t$11811$1CmlGO
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11778$1CmlGO
                                       g$x*$11810$1CmlGO)
                                     (g$serialize-all$7726$1CmlGO
                                       serialize-library
                                       g$compile-core-expr$7440$1CmlGO))
                                   (if '#f '#f (void)))))))
                          g$how$11803$1CmlGO)))
                      (g$with-input-from-file$6936$1CmlGO
                        g$filename$11802$1CmlGO
                        (case-lambda
                          (()
                           ((letrec ((g$f$11819$1CmlGO
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11820$1CmlGO)
                                              (if (eof-object? g$x$11820$1CmlGO)
                                                '()
                                                (cons
                                                  g$x$11820$1CmlGO
                                                  (g$f$11819$1CmlGO)))))
                                           (read-annotated))))))
                              g$f$11819$1CmlGO))))))))
                  g$swap$11809$1CmlGO)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11821$1CmlGO)
                    (begin
                      (g$library-path$11807$1CmlGO g$library-path$11808$1CmlGO)
                      (set! g$library-path$11808$1CmlGO g$t$11821$1CmlGO))))
                 (g$library-path$11807$1CmlGO)))))))
         g$library-path$7722$1CmlGO
         (g$local-library-path$11784$1CmlGO g$filename$11802$1CmlGO)))))
   (g$fo$11793$1CmlGO
     g$fo$11833$1CmlGO
     (g$make-enumeration$7070$1CmlGO '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7727$1CmlGO
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11794$1CmlGO)
         (if (g$serious-condition?$6389$1CmlGO g$ex$11794$1CmlGO)
           (raise g$ex$11794$1CmlGO)
           (begin (display g$ex$11794$1CmlGO) (newline))))))
    (set-symbol-value! 'load g$load$11786$1CmlGO)
    (set-symbol-value! 'compile g$compile$11790$1CmlGO)
    (set-symbol-value! 'compile->closure g$compile->closure$11791$1CmlGO)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11788$1CmlGO)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11748$1CmlGO)
    (set-symbol-value! 'expanded2core g$expanded->core$7439$1CmlGO)
    (set-symbol-value! 'trace-printer g$trace-printer$11782$1CmlGO)
    (g$file-options-constructor$7194$1CmlGO
      (g$enum-set-constructor$7073$1CmlGO g$fo$11793$1CmlGO))
    (g$library-path$7722$1CmlGO (get-library-paths))))

