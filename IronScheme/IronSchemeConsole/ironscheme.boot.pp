;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$find$4876$1WS4nL
     g$find$4987$1WS4nL
     (case-lambda
       ((g$proc$4898$1WS4nL g$l$4899$1WS4nL)
        (if (null? g$l$4899$1WS4nL)
          '#f
          ((case-lambda
             ((g$e$4900$1WS4nL g$r$4901$1WS4nL g$proc$4902$1WS4nL)
              (if (g$proc$4902$1WS4nL g$e$4900$1WS4nL)
                g$e$4900$1WS4nL
                (g$find$4876$1WS4nL g$proc$4902$1WS4nL g$r$4901$1WS4nL))))
           (car g$l$4899$1WS4nL)
           (cdr g$l$4899$1WS4nL)
           g$proc$4898$1WS4nL)))))
   (g$partition$4877$1WS4nL
     g$partition$4988$1WS4nL
     (case-lambda
       ((g$proc$4903$1WS4nL g$l$4904$1WS4nL)
        ((letrec ((g$f$4905$1WS4nL
                    (case-lambda
                      ((g$l$4906$1WS4nL g$a$4907$1WS4nL g$b$4908$1WS4nL)
                       (if (null? g$l$4906$1WS4nL)
                         (values
                           (reverse! g$a$4907$1WS4nL)
                           (reverse! g$b$4908$1WS4nL))
                         ((case-lambda
                            ((g$e$4909$1WS4nL)
                             (if (g$proc$4903$1WS4nL g$e$4909$1WS4nL)
                               (g$f$4905$1WS4nL
                                 (cdr g$l$4906$1WS4nL)
                                 (cons g$e$4909$1WS4nL g$a$4907$1WS4nL)
                                 g$b$4908$1WS4nL)
                               (g$f$4905$1WS4nL
                                 (cdr g$l$4906$1WS4nL)
                                 g$a$4907$1WS4nL
                                 (cons g$e$4909$1WS4nL g$b$4908$1WS4nL)))))
                          (car g$l$4906$1WS4nL)))))))
           g$f$4905$1WS4nL)
         g$l$4904$1WS4nL
         '()
         '()))))
   (g$remp$4878$1WS4nL
     g$remp$4989$1WS4nL
     (case-lambda
       ((g$proc$4910$1WS4nL g$l$4911$1WS4nL)
        ((letrec ((g$f$4912$1WS4nL
                    (case-lambda
                      ((g$l$4913$1WS4nL g$a$4914$1WS4nL)
                       (if (null? g$l$4913$1WS4nL)
                         (reverse! g$a$4914$1WS4nL)
                         ((case-lambda
                            ((g$e$4915$1WS4nL)
                             (if (g$proc$4910$1WS4nL g$e$4915$1WS4nL)
                               (g$f$4912$1WS4nL
                                 (cdr g$l$4913$1WS4nL)
                                 g$a$4914$1WS4nL)
                               (g$f$4912$1WS4nL
                                 (cdr g$l$4913$1WS4nL)
                                 (cons g$e$4915$1WS4nL g$a$4914$1WS4nL)))))
                          (car g$l$4913$1WS4nL)))))))
           g$f$4912$1WS4nL)
         g$l$4911$1WS4nL
         '()))))
   (g$filter$4879$1WS4nL
     g$filter$4990$1WS4nL
     (case-lambda
       ((g$proc$4916$1WS4nL g$l$4917$1WS4nL)
        ((letrec ((g$f$4918$1WS4nL
                    (case-lambda
                      ((g$l$4919$1WS4nL g$a$4920$1WS4nL)
                       (if (null? g$l$4919$1WS4nL)
                         (reverse! g$a$4920$1WS4nL)
                         ((case-lambda
                            ((g$e$4921$1WS4nL)
                             (if (g$proc$4916$1WS4nL g$e$4921$1WS4nL)
                               (g$f$4918$1WS4nL
                                 (cdr g$l$4919$1WS4nL)
                                 (cons g$e$4921$1WS4nL g$a$4920$1WS4nL))
                               (g$f$4918$1WS4nL
                                 (cdr g$l$4919$1WS4nL)
                                 g$a$4920$1WS4nL))))
                          (car g$l$4919$1WS4nL)))))))
           g$f$4918$1WS4nL)
         g$l$4917$1WS4nL
         '()))))
   (g$assq$4880$1WS4nL
     g$assq$4991$1WS4nL
     (case-lambda
       ((g$obj$4922$1WS4nL g$lst$4923$1WS4nL)
        (if (null? g$lst$4923$1WS4nL)
          '#f
          ((case-lambda
             ((g$obj$4924$1WS4nL g$t$4925$1WS4nL g$r$4926$1WS4nL)
              (if (eq? g$obj$4924$1WS4nL (car g$t$4925$1WS4nL))
                g$t$4925$1WS4nL
                (g$assq$4880$1WS4nL g$obj$4924$1WS4nL g$r$4926$1WS4nL))))
           g$obj$4922$1WS4nL
           (car g$lst$4923$1WS4nL)
           (cdr g$lst$4923$1WS4nL))))))
   (g$assv$4881$1WS4nL
     g$assv$4992$1WS4nL
     (case-lambda
       ((g$obj$4927$1WS4nL g$lst$4928$1WS4nL)
        (if (null? g$lst$4928$1WS4nL)
          '#f
          ((case-lambda
             ((g$obj$4929$1WS4nL g$t$4930$1WS4nL g$r$4931$1WS4nL)
              (if (eqv? g$obj$4929$1WS4nL (car g$t$4930$1WS4nL))
                g$t$4930$1WS4nL
                (g$assv$4881$1WS4nL g$obj$4929$1WS4nL g$r$4931$1WS4nL))))
           g$obj$4927$1WS4nL
           (car g$lst$4928$1WS4nL)
           (cdr g$lst$4928$1WS4nL))))))
   (g$assoc$4882$1WS4nL
     g$assoc$4993$1WS4nL
     (case-lambda
       ((g$obj$4932$1WS4nL g$lst$4933$1WS4nL)
        (if (null? g$lst$4933$1WS4nL)
          '#f
          ((case-lambda
             ((g$obj$4934$1WS4nL g$t$4935$1WS4nL g$r$4936$1WS4nL)
              (if (equal? g$obj$4934$1WS4nL (car g$t$4935$1WS4nL))
                g$t$4935$1WS4nL
                (g$assoc$4882$1WS4nL g$obj$4934$1WS4nL g$r$4936$1WS4nL))))
           g$obj$4932$1WS4nL
           (car g$lst$4933$1WS4nL)
           (cdr g$lst$4933$1WS4nL))))))
   (g$assp$4883$1WS4nL
     g$assp$4994$1WS4nL
     (case-lambda
       ((g$p?$4937$1WS4nL g$lst$4938$1WS4nL)
        (if (null? g$lst$4938$1WS4nL)
          '#f
          ((case-lambda
             ((g$p?$4939$1WS4nL g$t$4940$1WS4nL g$r$4941$1WS4nL)
              (if (g$p?$4939$1WS4nL (car g$t$4940$1WS4nL))
                g$t$4940$1WS4nL
                (g$assp$4883$1WS4nL g$p?$4939$1WS4nL g$r$4941$1WS4nL))))
           g$p?$4937$1WS4nL
           (car g$lst$4938$1WS4nL)
           (cdr g$lst$4938$1WS4nL))))))
   (g$memq$4884$1WS4nL
     g$memq$4995$1WS4nL
     (case-lambda
       ((g$obj$4942$1WS4nL g$lst$4943$1WS4nL)
        (if (null? g$lst$4943$1WS4nL)
          '#f
          (if (eq? g$obj$4942$1WS4nL (car g$lst$4943$1WS4nL))
            g$lst$4943$1WS4nL
            (g$memq$4884$1WS4nL g$obj$4942$1WS4nL (cdr g$lst$4943$1WS4nL)))))))
   (g$memv$4885$1WS4nL
     g$memv$4996$1WS4nL
     (case-lambda
       ((g$obj$4944$1WS4nL g$lst$4945$1WS4nL)
        (if (null? g$lst$4945$1WS4nL)
          '#f
          (if (eqv? g$obj$4944$1WS4nL (car g$lst$4945$1WS4nL))
            g$lst$4945$1WS4nL
            (g$memv$4885$1WS4nL g$obj$4944$1WS4nL (cdr g$lst$4945$1WS4nL)))))))
   (g$member$4886$1WS4nL
     g$member$4997$1WS4nL
     (case-lambda
       ((g$obj$4946$1WS4nL g$lst$4947$1WS4nL)
        (if (null? g$lst$4947$1WS4nL)
          '#f
          (if (equal? g$obj$4946$1WS4nL (car g$lst$4947$1WS4nL))
            g$lst$4947$1WS4nL
            (g$member$4886$1WS4nL
              g$obj$4946$1WS4nL
              (cdr g$lst$4947$1WS4nL)))))))
   (g$memp$4887$1WS4nL
     g$memp$4998$1WS4nL
     (case-lambda
       ((g$p?$4948$1WS4nL g$lst$4949$1WS4nL)
        (if (null? g$lst$4949$1WS4nL)
          '#f
          (if (g$p?$4948$1WS4nL (car g$lst$4949$1WS4nL))
            g$lst$4949$1WS4nL
            (g$memp$4887$1WS4nL g$p?$4948$1WS4nL (cdr g$lst$4949$1WS4nL)))))))
   (g$all-empty?$4888$1WS4nL
     g$all-empty?$4999$1WS4nL
     (case-lambda
       ((g$ls$4950$1WS4nL)
        ((case-lambda
           ((g$t$4951$1WS4nL)
            (if g$t$4951$1WS4nL
              g$t$4951$1WS4nL
              (begin
                '#f
                (if (null? (car g$ls$4950$1WS4nL))
                  (begin '#f (g$all-empty?$4888$1WS4nL (cdr g$ls$4950$1WS4nL)))
                  '#f)))))
         (null? g$ls$4950$1WS4nL)))))
   (g$split$4889$1WS4nL
     g$split$5000$1WS4nL
     (case-lambda
       ((g$ls$4952$1WS4nL)
        (if (null? g$ls$4952$1WS4nL)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4889$1WS4nL (cdr g$ls$4952$1WS4nL))))
            (case-lambda
              ((g$cars$4953$1WS4nL g$cdrs$4954$1WS4nL)
               ((case-lambda
                  ((g$a$4955$1WS4nL)
                   (values
                     (cons (car g$a$4955$1WS4nL) g$cars$4953$1WS4nL)
                     (cons (cdr g$a$4955$1WS4nL) g$cdrs$4954$1WS4nL))))
                (car g$ls$4952$1WS4nL)))))))))
   (g$for-all$4890$1WS4nL
     g$for-all$5001$1WS4nL
     (case-lambda
       ((g$f$4956$1WS4nL . g$args$4957$1WS4nL)
        (if (g$all-empty?$4888$1WS4nL g$args$4957$1WS4nL)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4889$1WS4nL g$args$4957$1WS4nL)))
            (case-lambda
              ((g$cars$4958$1WS4nL g$cdrs$4959$1WS4nL)
               (if (g$all-empty?$4888$1WS4nL g$cdrs$4959$1WS4nL)
                 (apply g$f$4956$1WS4nL g$cars$4958$1WS4nL)
                 (if (apply g$f$4956$1WS4nL g$cars$4958$1WS4nL)
                   (begin
                     '#f
                     (apply
                       g$for-all$4890$1WS4nL
                       g$f$4956$1WS4nL
                       g$cdrs$4959$1WS4nL))
                   '#f)))))))))
   (g$exists$4891$1WS4nL
     g$exists$5002$1WS4nL
     (case-lambda
       ((g$f$4960$1WS4nL . g$args$4961$1WS4nL)
        (if (g$all-empty?$4888$1WS4nL g$args$4961$1WS4nL)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4889$1WS4nL g$args$4961$1WS4nL)))
            (case-lambda
              ((g$cars$4962$1WS4nL g$cdrs$4963$1WS4nL)
               ((case-lambda
                  ((g$t$4964$1WS4nL)
                   (if g$t$4964$1WS4nL
                     g$t$4964$1WS4nL
                     (begin
                       '#f
                       (apply
                         g$exists$4891$1WS4nL
                         g$f$4960$1WS4nL
                         g$cdrs$4963$1WS4nL)))))
                (apply g$f$4960$1WS4nL g$cars$4962$1WS4nL)))))))))
   (g$cons*$4892$1WS4nL
     g$cons*$5003$1WS4nL
     (case-lambda
       ((g$a$4965$1WS4nL . g$rest$4966$1WS4nL)
        ((letrec ((g$f$4967$1WS4nL
                    (case-lambda
                      ((g$a$4968$1WS4nL g$rest$4969$1WS4nL)
                       (if (null? g$rest$4969$1WS4nL)
                         g$a$4968$1WS4nL
                         (cons
                           g$a$4968$1WS4nL
                           (g$f$4967$1WS4nL
                             (car g$rest$4969$1WS4nL)
                             (cdr g$rest$4969$1WS4nL))))))))
           g$f$4967$1WS4nL)
         g$a$4965$1WS4nL
         g$rest$4966$1WS4nL))))
   (g$fold-left$4893$1WS4nL
     g$fold-left$5004$1WS4nL
     (case-lambda
       ((g$combine$4970$1WS4nL
          g$nil$4971$1WS4nL
          g$list1$4972$1WS4nL
          .
          g$lists$4973$1WS4nL)
        (if (null? g$list1$4972$1WS4nL)
          g$nil$4971$1WS4nL
          (apply
            g$fold-left$4893$1WS4nL
            (g$cons*$4892$1WS4nL
              g$combine$4970$1WS4nL
              (apply
                g$combine$4970$1WS4nL
                (g$cons*$4892$1WS4nL
                  g$nil$4971$1WS4nL
                  (car g$list1$4972$1WS4nL)
                  (map car g$lists$4973$1WS4nL)))
              (cdr g$list1$4972$1WS4nL)
              (map cdr g$lists$4973$1WS4nL)))))))
   (g$fold-right$4894$1WS4nL
     g$fold-right$5005$1WS4nL
     (case-lambda
       ((g$combine$4974$1WS4nL
          g$nil$4975$1WS4nL
          g$list1$4976$1WS4nL
          .
          g$lists$4977$1WS4nL)
        (if (null? g$list1$4976$1WS4nL)
          g$nil$4975$1WS4nL
          (apply
            g$combine$4974$1WS4nL
            (append
              (list (car g$list1$4976$1WS4nL))
              (map car g$lists$4977$1WS4nL)
              (list
                (apply
                  g$fold-right$4894$1WS4nL
                  (g$cons*$4892$1WS4nL
                    g$combine$4974$1WS4nL
                    g$nil$4975$1WS4nL
                    (cdr g$list1$4976$1WS4nL)
                    (map cdr g$lists$4977$1WS4nL))))))))))
   (g$remove$4895$1WS4nL
     g$remove$5006$1WS4nL
     (case-lambda
       ((g$obj$4978$1WS4nL g$list$4979$1WS4nL)
        (g$remp$4878$1WS4nL
          (case-lambda
            ((g$x$4980$1WS4nL) (equal? g$obj$4978$1WS4nL g$x$4980$1WS4nL)))
          g$list$4979$1WS4nL))))
   (g$remv$4896$1WS4nL
     g$remv$5007$1WS4nL
     (case-lambda
       ((g$obj$4981$1WS4nL g$list$4982$1WS4nL)
        (g$remp$4878$1WS4nL
          (case-lambda
            ((g$x$4983$1WS4nL) (eqv? g$obj$4981$1WS4nL g$x$4983$1WS4nL)))
          g$list$4982$1WS4nL))))
   (g$remq$4897$1WS4nL
     g$remq$5008$1WS4nL
     (case-lambda
       ((g$obj$4984$1WS4nL g$list$4985$1WS4nL)
        (g$remp$4878$1WS4nL
          (case-lambda
            ((g$x$4986$1WS4nL) (eq? g$obj$4984$1WS4nL g$x$4986$1WS4nL)))
          g$list$4985$1WS4nL)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5009$1WS4nL
     g$caar$5164$1WS4nL
     (case-lambda ((g$x$5064$1WS4nL) (car (car g$x$5064$1WS4nL)))))
   (g$cadr$5010$1WS4nL
     g$cadr$5165$1WS4nL
     (case-lambda ((g$x$5065$1WS4nL) (car (cdr g$x$5065$1WS4nL)))))
   (g$cdar$5011$1WS4nL
     g$cdar$5166$1WS4nL
     (case-lambda ((g$x$5066$1WS4nL) (cdr (car g$x$5066$1WS4nL)))))
   (g$cddr$5012$1WS4nL
     g$cddr$5167$1WS4nL
     (case-lambda ((g$x$5067$1WS4nL) (cdr (cdr g$x$5067$1WS4nL)))))
   (g$caaar$5013$1WS4nL
     g$caaar$5168$1WS4nL
     (case-lambda
       ((g$x$5068$1WS4nL) (g$caar$5009$1WS4nL (car g$x$5068$1WS4nL)))))
   (g$caadr$5014$1WS4nL
     g$caadr$5169$1WS4nL
     (case-lambda
       ((g$x$5069$1WS4nL) (g$caar$5009$1WS4nL (cdr g$x$5069$1WS4nL)))))
   (g$cadar$5015$1WS4nL
     g$cadar$5170$1WS4nL
     (case-lambda
       ((g$x$5070$1WS4nL) (g$cadr$5010$1WS4nL (car g$x$5070$1WS4nL)))))
   (g$caddr$5016$1WS4nL
     g$caddr$5171$1WS4nL
     (case-lambda
       ((g$x$5071$1WS4nL) (g$cadr$5010$1WS4nL (cdr g$x$5071$1WS4nL)))))
   (g$cdaar$5017$1WS4nL
     g$cdaar$5172$1WS4nL
     (case-lambda
       ((g$x$5072$1WS4nL) (g$cdar$5011$1WS4nL (car g$x$5072$1WS4nL)))))
   (g$cdadr$5018$1WS4nL
     g$cdadr$5173$1WS4nL
     (case-lambda
       ((g$x$5073$1WS4nL) (g$cdar$5011$1WS4nL (cdr g$x$5073$1WS4nL)))))
   (g$cddar$5019$1WS4nL
     g$cddar$5174$1WS4nL
     (case-lambda
       ((g$x$5074$1WS4nL) (g$cddr$5012$1WS4nL (car g$x$5074$1WS4nL)))))
   (g$cdddr$5020$1WS4nL
     g$cdddr$5175$1WS4nL
     (case-lambda
       ((g$x$5075$1WS4nL) (g$cddr$5012$1WS4nL (cdr g$x$5075$1WS4nL)))))
   (g$caaaar$5021$1WS4nL
     g$caaaar$5176$1WS4nL
     (case-lambda
       ((g$x$5076$1WS4nL) (g$caaar$5013$1WS4nL (car g$x$5076$1WS4nL)))))
   (g$caaadr$5022$1WS4nL
     g$caaadr$5177$1WS4nL
     (case-lambda
       ((g$x$5077$1WS4nL) (g$caaar$5013$1WS4nL (cdr g$x$5077$1WS4nL)))))
   (g$caadar$5023$1WS4nL
     g$caadar$5178$1WS4nL
     (case-lambda
       ((g$x$5078$1WS4nL) (g$caadr$5014$1WS4nL (car g$x$5078$1WS4nL)))))
   (g$caaddr$5024$1WS4nL
     g$caaddr$5179$1WS4nL
     (case-lambda
       ((g$x$5079$1WS4nL) (g$caadr$5014$1WS4nL (cdr g$x$5079$1WS4nL)))))
   (g$cadaar$5025$1WS4nL
     g$cadaar$5180$1WS4nL
     (case-lambda
       ((g$x$5080$1WS4nL) (g$cadar$5015$1WS4nL (car g$x$5080$1WS4nL)))))
   (g$cadadr$5026$1WS4nL
     g$cadadr$5181$1WS4nL
     (case-lambda
       ((g$x$5081$1WS4nL) (g$cadar$5015$1WS4nL (cdr g$x$5081$1WS4nL)))))
   (g$caddar$5027$1WS4nL
     g$caddar$5182$1WS4nL
     (case-lambda
       ((g$x$5082$1WS4nL) (g$caddr$5016$1WS4nL (car g$x$5082$1WS4nL)))))
   (g$cadddr$5028$1WS4nL
     g$cadddr$5183$1WS4nL
     (case-lambda
       ((g$x$5083$1WS4nL) (g$caddr$5016$1WS4nL (cdr g$x$5083$1WS4nL)))))
   (g$cdaaar$5029$1WS4nL
     g$cdaaar$5184$1WS4nL
     (case-lambda
       ((g$x$5084$1WS4nL) (g$cdaar$5017$1WS4nL (car g$x$5084$1WS4nL)))))
   (g$cdaadr$5030$1WS4nL
     g$cdaadr$5185$1WS4nL
     (case-lambda
       ((g$x$5085$1WS4nL) (g$cdaar$5017$1WS4nL (cdr g$x$5085$1WS4nL)))))
   (g$cdadar$5031$1WS4nL
     g$cdadar$5186$1WS4nL
     (case-lambda
       ((g$x$5086$1WS4nL) (g$cdadr$5018$1WS4nL (car g$x$5086$1WS4nL)))))
   (g$cdaddr$5032$1WS4nL
     g$cdaddr$5187$1WS4nL
     (case-lambda
       ((g$x$5087$1WS4nL) (g$cdadr$5018$1WS4nL (cdr g$x$5087$1WS4nL)))))
   (g$cddaar$5033$1WS4nL
     g$cddaar$5188$1WS4nL
     (case-lambda
       ((g$x$5088$1WS4nL) (g$cddar$5019$1WS4nL (car g$x$5088$1WS4nL)))))
   (g$cddadr$5034$1WS4nL
     g$cddadr$5189$1WS4nL
     (case-lambda
       ((g$x$5089$1WS4nL) (g$cddar$5019$1WS4nL (cdr g$x$5089$1WS4nL)))))
   (g$cdddar$5035$1WS4nL
     g$cdddar$5190$1WS4nL
     (case-lambda
       ((g$x$5090$1WS4nL) (g$cdddr$5020$1WS4nL (car g$x$5090$1WS4nL)))))
   (g$cddddr$5036$1WS4nL
     g$cddddr$5191$1WS4nL
     (case-lambda
       ((g$x$5091$1WS4nL) (g$cdddr$5020$1WS4nL (cdr g$x$5091$1WS4nL)))))
   (g$string=?$5043$1WS4nL
     g$string=?$5192$1WS4nL
     (case-lambda
       ((g$a$5092$1WS4nL g$b$5093$1WS4nL . g$rest$5094$1WS4nL)
        (begin
          (if (not (string? g$a$5092$1WS4nL))
            (assertion-violation 'string=? '"not a string" g$a$5092$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5095$1WS4nL)
               (begin
                 (if (not (string? g$x$5095$1WS4nL))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5095$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5096$1WS4nL)
                     (begin
                       (set! g$a$5092$1WS4nL g$x$5095$1WS4nL)
                       g$r$5096$1WS4nL)))
                  (= (string-compare g$a$5092$1WS4nL g$x$5095$1WS4nL) '0)))))
            (cons g$b$5093$1WS4nL g$rest$5094$1WS4nL))))))
   (g$string<?$5044$1WS4nL
     g$string<?$5193$1WS4nL
     (case-lambda
       ((g$a$5097$1WS4nL g$b$5098$1WS4nL . g$rest$5099$1WS4nL)
        (begin
          (if (not (string? g$a$5097$1WS4nL))
            (assertion-violation 'string<? '"not a string" g$a$5097$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5100$1WS4nL)
               (begin
                 (if (not (string? g$x$5100$1WS4nL))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5100$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5101$1WS4nL)
                     (begin
                       (set! g$a$5097$1WS4nL g$x$5100$1WS4nL)
                       g$r$5101$1WS4nL)))
                  (< (string-compare g$a$5097$1WS4nL g$x$5100$1WS4nL) '0)))))
            (cons g$b$5098$1WS4nL g$rest$5099$1WS4nL))))))
   (g$string>?$5045$1WS4nL
     g$string>?$5194$1WS4nL
     (case-lambda
       ((g$a$5102$1WS4nL g$b$5103$1WS4nL . g$rest$5104$1WS4nL)
        (begin
          (if (not (string? g$a$5102$1WS4nL))
            (assertion-violation 'string>? '"not a string" g$a$5102$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5105$1WS4nL)
               (begin
                 (if (not (string? g$x$5105$1WS4nL))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5105$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5106$1WS4nL)
                     (begin
                       (set! g$a$5102$1WS4nL g$x$5105$1WS4nL)
                       g$r$5106$1WS4nL)))
                  (> (string-compare g$a$5102$1WS4nL g$x$5105$1WS4nL) '0)))))
            (cons g$b$5103$1WS4nL g$rest$5104$1WS4nL))))))
   (g$string<=?$5046$1WS4nL
     g$string<=?$5195$1WS4nL
     (case-lambda
       ((g$a$5107$1WS4nL g$b$5108$1WS4nL . g$rest$5109$1WS4nL)
        (begin
          (if (not (string? g$a$5107$1WS4nL))
            (assertion-violation 'string<=? '"not a string" g$a$5107$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5110$1WS4nL)
               (begin
                 (if (not (string? g$x$5110$1WS4nL))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5110$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5111$1WS4nL)
                     (begin
                       (set! g$a$5107$1WS4nL g$x$5110$1WS4nL)
                       g$r$5111$1WS4nL)))
                  (<= (string-compare g$a$5107$1WS4nL g$x$5110$1WS4nL) '0)))))
            (cons g$b$5108$1WS4nL g$rest$5109$1WS4nL))))))
   (g$string>=?$5047$1WS4nL
     g$string>=?$5196$1WS4nL
     (case-lambda
       ((g$a$5112$1WS4nL g$b$5113$1WS4nL . g$rest$5114$1WS4nL)
        (begin
          (if (not (string? g$a$5112$1WS4nL))
            (assertion-violation 'string>=? '"not a string" g$a$5112$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5115$1WS4nL)
               (begin
                 (if (not (string? g$x$5115$1WS4nL))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5115$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5116$1WS4nL)
                     (begin
                       (set! g$a$5112$1WS4nL g$x$5115$1WS4nL)
                       g$r$5116$1WS4nL)))
                  (>= (string-compare g$a$5112$1WS4nL g$x$5115$1WS4nL) '0)))))
            (cons g$b$5113$1WS4nL g$rest$5114$1WS4nL))))))
   (g$symbol=?$5048$1WS4nL
     g$symbol=?$5197$1WS4nL
     (case-lambda
       ((g$a$5117$1WS4nL g$b$5118$1WS4nL . g$rest$5119$1WS4nL)
        (begin
          (if (not (symbol? g$a$5117$1WS4nL))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5117$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5120$1WS4nL)
               (begin
                 (if (not (symbol? g$x$5120$1WS4nL))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5120$1WS4nL)
                   (void))
                 (eq? g$a$5117$1WS4nL g$x$5120$1WS4nL))))
            (cons g$b$5118$1WS4nL g$rest$5119$1WS4nL))))))
   (g$boolean=?$5049$1WS4nL
     g$boolean=?$5198$1WS4nL
     (case-lambda
       ((g$a$5121$1WS4nL g$b$5122$1WS4nL . g$rest$5123$1WS4nL)
        (begin
          (if (not (boolean? g$a$5121$1WS4nL))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5121$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5124$1WS4nL)
               (begin
                 (if (not (boolean? g$x$5124$1WS4nL))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5124$1WS4nL)
                   (void))
                 (eq? g$a$5121$1WS4nL g$x$5124$1WS4nL))))
            (cons g$b$5122$1WS4nL g$rest$5123$1WS4nL))))))
   (g$char=?$5056$1WS4nL
     g$char=?$5199$1WS4nL
     (case-lambda
       ((g$a$5125$1WS4nL g$b$5126$1WS4nL . g$rest$5127$1WS4nL)
        (begin
          (if (not (char? g$a$5125$1WS4nL))
            (assertion-violation 'char=? '"not a char" g$a$5125$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5128$1WS4nL)
               (begin
                 (if (not (char? g$x$5128$1WS4nL))
                   (assertion-violation 'char=? '"not a char" g$x$5128$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5129$1WS4nL)
                     (begin
                       (set! g$a$5125$1WS4nL g$x$5128$1WS4nL)
                       g$r$5129$1WS4nL)))
                  (= (char->integer g$a$5125$1WS4nL)
                     (char->integer g$x$5128$1WS4nL))))))
            (cons g$b$5126$1WS4nL g$rest$5127$1WS4nL))))))
   (g$char<?$5057$1WS4nL
     g$char<?$5200$1WS4nL
     (case-lambda
       ((g$a$5130$1WS4nL g$b$5131$1WS4nL . g$rest$5132$1WS4nL)
        (begin
          (if (not (char? g$a$5130$1WS4nL))
            (assertion-violation 'char<? '"not a char" g$a$5130$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5133$1WS4nL)
               (begin
                 (if (not (char? g$x$5133$1WS4nL))
                   (assertion-violation 'char<? '"not a char" g$x$5133$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5134$1WS4nL)
                     (begin
                       (set! g$a$5130$1WS4nL g$x$5133$1WS4nL)
                       g$r$5134$1WS4nL)))
                  (< (char->integer g$a$5130$1WS4nL)
                     (char->integer g$x$5133$1WS4nL))))))
            (cons g$b$5131$1WS4nL g$rest$5132$1WS4nL))))))
   (g$char>?$5058$1WS4nL
     g$char>?$5201$1WS4nL
     (case-lambda
       ((g$a$5135$1WS4nL g$b$5136$1WS4nL . g$rest$5137$1WS4nL)
        (begin
          (if (not (char? g$a$5135$1WS4nL))
            (assertion-violation 'char>? '"not a char" g$a$5135$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5138$1WS4nL)
               (begin
                 (if (not (char? g$x$5138$1WS4nL))
                   (assertion-violation 'char>? '"not a char" g$x$5138$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5139$1WS4nL)
                     (begin
                       (set! g$a$5135$1WS4nL g$x$5138$1WS4nL)
                       g$r$5139$1WS4nL)))
                  (> (char->integer g$a$5135$1WS4nL)
                     (char->integer g$x$5138$1WS4nL))))))
            (cons g$b$5136$1WS4nL g$rest$5137$1WS4nL))))))
   (g$char<=?$5059$1WS4nL
     g$char<=?$5202$1WS4nL
     (case-lambda
       ((g$a$5140$1WS4nL g$b$5141$1WS4nL . g$rest$5142$1WS4nL)
        (begin
          (if (not (char? g$a$5140$1WS4nL))
            (assertion-violation 'char<=? '"not a char" g$a$5140$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5143$1WS4nL)
               (begin
                 (if (not (char? g$x$5143$1WS4nL))
                   (assertion-violation 'char<=? '"not a char" g$x$5143$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5144$1WS4nL)
                     (begin
                       (set! g$a$5140$1WS4nL g$x$5143$1WS4nL)
                       g$r$5144$1WS4nL)))
                  (<= (char->integer g$a$5140$1WS4nL)
                      (char->integer g$x$5143$1WS4nL))))))
            (cons g$b$5141$1WS4nL g$rest$5142$1WS4nL))))))
   (g$char>=?$5060$1WS4nL
     g$char>=?$5203$1WS4nL
     (case-lambda
       ((g$a$5145$1WS4nL g$b$5146$1WS4nL . g$rest$5147$1WS4nL)
        (begin
          (if (not (char? g$a$5145$1WS4nL))
            (assertion-violation 'char>=? '"not a char" g$a$5145$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5148$1WS4nL)
               (begin
                 (if (not (char? g$x$5148$1WS4nL))
                   (assertion-violation 'char>=? '"not a char" g$x$5148$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5149$1WS4nL)
                     (begin
                       (set! g$a$5145$1WS4nL g$x$5148$1WS4nL)
                       g$r$5149$1WS4nL)))
                  (>= (char->integer g$a$5145$1WS4nL)
                      (char->integer g$x$5148$1WS4nL))))))
            (cons g$b$5146$1WS4nL g$rest$5147$1WS4nL))))))
   (g$rationalize$5061$1WS4nL
     g$rationalize$5204$1WS4nL
     (case-lambda
       ((g$x$5150$1WS4nL g$e$5151$1WS4nL)
        (if (if (infinite? g$x$5150$1WS4nL)
              (begin '#f (infinite? g$e$5151$1WS4nL))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5152$1WS4nL)
              (if (if (exact? g$x$5150$1WS4nL)
                    (begin '#f (exact? g$e$5151$1WS4nL))
                    '#f)
                g$r$5152$1WS4nL
                (inexact g$r$5152$1WS4nL))))
           (apply
             /
             (g$find-ratio$5062$1WS4nL g$x$5150$1WS4nL g$e$5151$1WS4nL)))))))
   (g$find-ratio$5062$1WS4nL
     g$find-ratio$5205$1WS4nL
     (case-lambda
       ((g$x$5153$1WS4nL g$e$5154$1WS4nL)
        (g$find-ratio-between$5063$1WS4nL
          (- g$x$5153$1WS4nL g$e$5154$1WS4nL)
          (+ g$x$5153$1WS4nL g$e$5154$1WS4nL)))))
   (g$find-ratio-between$5063$1WS4nL
     g$find-ratio-between$5206$1WS4nL
     (case-lambda
       ((g$x$5155$1WS4nL g$y$5156$1WS4nL)
        (letrec* ((g$sr$5157$1WS4nL
                    (case-lambda
                      ((g$x$5159$1WS4nL g$y$5160$1WS4nL)
                       ((case-lambda
                          ((g$fx$5161$1WS4nL g$fy$5162$1WS4nL)
                           (if (>= g$fx$5161$1WS4nL g$x$5159$1WS4nL)
                             (list g$fx$5161$1WS4nL '1)
                             (if (= g$fx$5161$1WS4nL g$fy$5162$1WS4nL)
                               ((case-lambda
                                  ((g$rat$5163$1WS4nL)
                                   (list
                                     (+ (g$cadr$5010$1WS4nL g$rat$5163$1WS4nL)
                                        (* g$fx$5161$1WS4nL
                                           (car g$rat$5163$1WS4nL)))
                                     (car g$rat$5163$1WS4nL))))
                                (g$sr$5157$1WS4nL
                                  (/ (- g$y$5160$1WS4nL g$fy$5162$1WS4nL))
                                  (/ (- g$x$5159$1WS4nL g$fx$5161$1WS4nL))))
                               (list (+ '1 g$fx$5161$1WS4nL) '1)))))
                        (exact (floor g$x$5159$1WS4nL))
                        (exact (floor g$y$5160$1WS4nL)))))))
          (if (< g$y$5156$1WS4nL g$x$5155$1WS4nL)
            (g$find-ratio-between$5063$1WS4nL g$y$5156$1WS4nL g$x$5155$1WS4nL)
            (if (>= g$x$5155$1WS4nL g$y$5156$1WS4nL)
              (list g$x$5155$1WS4nL '1)
              (if (positive? g$x$5155$1WS4nL)
                (g$sr$5157$1WS4nL g$x$5155$1WS4nL g$y$5156$1WS4nL)
                (if (negative? g$y$5156$1WS4nL)
                  ((case-lambda
                     ((g$rat$5158$1WS4nL)
                      (list
                        (- (car g$rat$5158$1WS4nL))
                        (g$cadr$5010$1WS4nL g$rat$5158$1WS4nL))))
                   (g$sr$5157$1WS4nL (- g$y$5156$1WS4nL) (- g$x$5155$1WS4nL)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5402$1WS4nL g$using$5437$1WS4nL (clr-using-internal 'system))
   (g$using$5404$1WS4nL
     g$using$5438$1WS4nL
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5405$1WS4nL
     g$make-eq-hashtable$5439$1WS4nL
     (case-lambda
       (() (g$make-eq-hashtable$5405$1WS4nL '32))
       ((g$k$5416$1WS4nL)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5416$1WS4nL)))))
   (g$make-eqv-hashtable$5406$1WS4nL
     g$make-eqv-hashtable$5440$1WS4nL
     (case-lambda
       (() (g$make-eqv-hashtable$5406$1WS4nL '32))
       ((g$k$5417$1WS4nL) (make-hashtable eqv-hash eqv? g$k$5417$1WS4nL))))
   (g$hashtable-size$5407$1WS4nL
     g$hashtable-size$5441$1WS4nL
     (case-lambda
       ((g$ht$5418$1WS4nL)
        (clr-call-internal 'hashtable 'get_count g$ht$5418$1WS4nL))))
   (g$hashtable-ref$5408$1WS4nL
     g$hashtable-ref$5442$1WS4nL
     (case-lambda
       ((g$ht$5419$1WS4nL g$key$5420$1WS4nL g$default$5421$1WS4nL)
        (letrec* ((g$r$5422$1WS4nL
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5419$1WS4nL
                      g$key$5420$1WS4nL)))
          (if (not (null? g$r$5422$1WS4nL))
            g$r$5422$1WS4nL
            g$default$5421$1WS4nL)))))
   (g$hashtable-set!$5409$1WS4nL
     g$hashtable-set!$5443$1WS4nL
     (case-lambda
       ((g$ht$5423$1WS4nL g$key$5424$1WS4nL g$obj$5425$1WS4nL)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5423$1WS4nL
          g$key$5424$1WS4nL
          g$obj$5425$1WS4nL))))
   (g$hashtable-delete!$5410$1WS4nL
     g$hashtable-delete!$5444$1WS4nL
     (case-lambda
       ((g$ht$5426$1WS4nL g$key$5427$1WS4nL)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5426$1WS4nL
          g$key$5427$1WS4nL))))
   (g$hashtable-contains?$5411$1WS4nL
     g$hashtable-contains?$5445$1WS4nL
     (case-lambda
       ((g$ht$5428$1WS4nL g$key$5429$1WS4nL)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5428$1WS4nL
          g$key$5429$1WS4nL))))
   (g$hashtable-update!$5412$1WS4nL
     g$hashtable-update!$5446$1WS4nL
     (case-lambda
       ((g$ht$5430$1WS4nL
          g$key$5431$1WS4nL
          g$proc$5432$1WS4nL
          g$default$5433$1WS4nL)
        (g$hashtable-set!$5409$1WS4nL
          g$ht$5430$1WS4nL
          g$key$5431$1WS4nL
          (g$proc$5432$1WS4nL
            (g$hashtable-ref$5408$1WS4nL
              g$ht$5430$1WS4nL
              g$key$5431$1WS4nL
              g$default$5433$1WS4nL))))))
   (g$hashtable-clear!$5413$1WS4nL
     g$hashtable-clear!$5447$1WS4nL
     (case-lambda
       ((g$ht$5434$1WS4nL)
        (g$hashtable-clear!$5413$1WS4nL g$ht$5434$1WS4nL '32))
       ((g$ht$5435$1WS4nL g$k$5436$1WS4nL)
        (clr-call-internal 'hashtable 'clear g$ht$5435$1WS4nL))))
   (g$clear-usings$5415$1WS4nL
     g$clear-usings$5448$1WS4nL
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5450$1WS4nL
     g$using$5457$1WS4nL
     (clr-using-internal 'system.io))
   (g$file-exists?$5451$1WS4nL
     g$file-exists?$5458$1WS4nL
     (case-lambda
       ((g$fn$5454$1WS4nL)
        (clr-call-internal 'file 'exists '() g$fn$5454$1WS4nL))))
   (g$delete-file$5452$1WS4nL
     g$delete-file$5459$1WS4nL
     (case-lambda
       ((g$fn$5455$1WS4nL)
        (clr-call-internal 'file 'delete '() g$fn$5455$1WS4nL))))
   (g$get-directory-name$5453$1WS4nL
     g$get-directory-name$5460$1WS4nL
     (case-lambda
       ((g$path$5456$1WS4nL)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5456$1WS4nL)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5461$1WS4nL
     g$native-endianness$5572$1WS4nL
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5462$1WS4nL
     g$bytevector-u16-ref$5573$1WS4nL
     (case-lambda
       ((g$bytevector$5490$1WS4nL g$k$5491$1WS4nL g$endianness$5492$1WS4nL)
        (bytevector-uint-ref
          g$bytevector$5490$1WS4nL
          g$k$5491$1WS4nL
          g$endianness$5492$1WS4nL
          '2))))
   (g$bytevector-s16-ref$5463$1WS4nL
     g$bytevector-s16-ref$5574$1WS4nL
     (case-lambda
       ((g$bytevector$5493$1WS4nL g$k$5494$1WS4nL g$endianness$5495$1WS4nL)
        (bytevector-sint-ref
          g$bytevector$5493$1WS4nL
          g$k$5494$1WS4nL
          g$endianness$5495$1WS4nL
          '2))))
   (g$bytevector-u16-native-ref$5464$1WS4nL
     g$bytevector-u16-native-ref$5575$1WS4nL
     (case-lambda
       ((g$bytevector$5496$1WS4nL g$k$5497$1WS4nL)
        (bytevector-uint-ref
          g$bytevector$5496$1WS4nL
          g$k$5497$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '2))))
   (g$bytevector-s16-native-ref$5465$1WS4nL
     g$bytevector-s16-native-ref$5576$1WS4nL
     (case-lambda
       ((g$bytevector$5498$1WS4nL g$k$5499$1WS4nL)
        (bytevector-sint-ref
          g$bytevector$5498$1WS4nL
          g$k$5499$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '2))))
   (g$bytevector-u16-set!$5466$1WS4nL
     g$bytevector-u16-set!$5577$1WS4nL
     (case-lambda
       ((g$bytevector$5500$1WS4nL
          g$k$5501$1WS4nL
          g$n$5502$1WS4nL
          g$endianness$5503$1WS4nL)
        (bytevector-uint-set!
          g$bytevector$5500$1WS4nL
          g$k$5501$1WS4nL
          g$n$5502$1WS4nL
          g$endianness$5503$1WS4nL
          '2))))
   (g$bytevector-s16-set!$5467$1WS4nL
     g$bytevector-s16-set!$5578$1WS4nL
     (case-lambda
       ((g$bytevector$5504$1WS4nL
          g$k$5505$1WS4nL
          g$n$5506$1WS4nL
          g$endianness$5507$1WS4nL)
        (bytevector-sint-set!
          g$bytevector$5504$1WS4nL
          g$k$5505$1WS4nL
          g$n$5506$1WS4nL
          g$endianness$5507$1WS4nL
          '2))))
   (g$bytevector-u16-native-set!$5468$1WS4nL
     g$bytevector-u16-native-set!$5579$1WS4nL
     (case-lambda
       ((g$bytevector$5508$1WS4nL g$k$5509$1WS4nL g$n$5510$1WS4nL)
        (bytevector-uint-set!
          g$bytevector$5508$1WS4nL
          g$k$5509$1WS4nL
          g$n$5510$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '2))))
   (g$bytevector-s16-native-set!$5469$1WS4nL
     g$bytevector-s16-native-set!$5580$1WS4nL
     (case-lambda
       ((g$bytevector$5511$1WS4nL g$k$5512$1WS4nL g$n$5513$1WS4nL)
        (bytevector-sint-set!
          g$bytevector$5511$1WS4nL
          g$k$5512$1WS4nL
          g$n$5513$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '2))))
   (g$bytevector-u32-ref$5470$1WS4nL
     g$bytevector-u32-ref$5581$1WS4nL
     (case-lambda
       ((g$bytevector$5514$1WS4nL g$k$5515$1WS4nL g$endianness$5516$1WS4nL)
        (bytevector-uint-ref
          g$bytevector$5514$1WS4nL
          g$k$5515$1WS4nL
          g$endianness$5516$1WS4nL
          '4))))
   (g$bytevector-s32-ref$5471$1WS4nL
     g$bytevector-s32-ref$5582$1WS4nL
     (case-lambda
       ((g$bytevector$5517$1WS4nL g$k$5518$1WS4nL g$endianness$5519$1WS4nL)
        (bytevector-sint-ref
          g$bytevector$5517$1WS4nL
          g$k$5518$1WS4nL
          g$endianness$5519$1WS4nL
          '4))))
   (g$bytevector-u32-native-ref$5472$1WS4nL
     g$bytevector-u32-native-ref$5583$1WS4nL
     (case-lambda
       ((g$bytevector$5520$1WS4nL g$k$5521$1WS4nL)
        (bytevector-uint-ref
          g$bytevector$5520$1WS4nL
          g$k$5521$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '4))))
   (g$bytevector-s32-native-ref$5473$1WS4nL
     g$bytevector-s32-native-ref$5584$1WS4nL
     (case-lambda
       ((g$bytevector$5522$1WS4nL g$k$5523$1WS4nL)
        (bytevector-sint-ref
          g$bytevector$5522$1WS4nL
          g$k$5523$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '4))))
   (g$bytevector-u32-set!$5474$1WS4nL
     g$bytevector-u32-set!$5585$1WS4nL
     (case-lambda
       ((g$bytevector$5524$1WS4nL
          g$k$5525$1WS4nL
          g$n$5526$1WS4nL
          g$endianness$5527$1WS4nL)
        (bytevector-uint-set!
          g$bytevector$5524$1WS4nL
          g$k$5525$1WS4nL
          g$n$5526$1WS4nL
          g$endianness$5527$1WS4nL
          '4))))
   (g$bytevector-s32-set!$5475$1WS4nL
     g$bytevector-s32-set!$5586$1WS4nL
     (case-lambda
       ((g$bytevector$5528$1WS4nL
          g$k$5529$1WS4nL
          g$n$5530$1WS4nL
          g$endianness$5531$1WS4nL)
        (bytevector-sint-set!
          g$bytevector$5528$1WS4nL
          g$k$5529$1WS4nL
          g$n$5530$1WS4nL
          g$endianness$5531$1WS4nL
          '4))))
   (g$bytevector-u32-native-set!$5476$1WS4nL
     g$bytevector-u32-native-set!$5587$1WS4nL
     (case-lambda
       ((g$bytevector$5532$1WS4nL g$k$5533$1WS4nL g$n$5534$1WS4nL)
        (bytevector-uint-set!
          g$bytevector$5532$1WS4nL
          g$k$5533$1WS4nL
          g$n$5534$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '4))))
   (g$bytevector-s32-native-set!$5477$1WS4nL
     g$bytevector-s32-native-set!$5588$1WS4nL
     (case-lambda
       ((g$bytevector$5535$1WS4nL g$k$5536$1WS4nL g$n$5537$1WS4nL)
        (bytevector-sint-set!
          g$bytevector$5535$1WS4nL
          g$k$5536$1WS4nL
          g$n$5537$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '4))))
   (g$bytevector-u64-ref$5478$1WS4nL
     g$bytevector-u64-ref$5589$1WS4nL
     (case-lambda
       ((g$bytevector$5538$1WS4nL g$k$5539$1WS4nL g$endianness$5540$1WS4nL)
        (bytevector-uint-ref
          g$bytevector$5538$1WS4nL
          g$k$5539$1WS4nL
          g$endianness$5540$1WS4nL
          '8))))
   (g$bytevector-s64-ref$5479$1WS4nL
     g$bytevector-s64-ref$5590$1WS4nL
     (case-lambda
       ((g$bytevector$5541$1WS4nL g$k$5542$1WS4nL g$endianness$5543$1WS4nL)
        (bytevector-sint-ref
          g$bytevector$5541$1WS4nL
          g$k$5542$1WS4nL
          g$endianness$5543$1WS4nL
          '8))))
   (g$bytevector-u64-native-ref$5480$1WS4nL
     g$bytevector-u64-native-ref$5591$1WS4nL
     (case-lambda
       ((g$bytevector$5544$1WS4nL g$k$5545$1WS4nL)
        (bytevector-uint-ref
          g$bytevector$5544$1WS4nL
          g$k$5545$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '8))))
   (g$bytevector-s64-native-ref$5481$1WS4nL
     g$bytevector-s64-native-ref$5592$1WS4nL
     (case-lambda
       ((g$bytevector$5546$1WS4nL g$k$5547$1WS4nL)
        (bytevector-sint-ref
          g$bytevector$5546$1WS4nL
          g$k$5547$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '8))))
   (g$bytevector-u64-set!$5482$1WS4nL
     g$bytevector-u64-set!$5593$1WS4nL
     (case-lambda
       ((g$bytevector$5548$1WS4nL
          g$k$5549$1WS4nL
          g$n$5550$1WS4nL
          g$endianness$5551$1WS4nL)
        (bytevector-uint-set!
          g$bytevector$5548$1WS4nL
          g$k$5549$1WS4nL
          g$n$5550$1WS4nL
          g$endianness$5551$1WS4nL
          '8))))
   (g$bytevector-s64-set!$5483$1WS4nL
     g$bytevector-s64-set!$5594$1WS4nL
     (case-lambda
       ((g$bytevector$5552$1WS4nL
          g$k$5553$1WS4nL
          g$n$5554$1WS4nL
          g$endianness$5555$1WS4nL)
        (bytevector-sint-set!
          g$bytevector$5552$1WS4nL
          g$k$5553$1WS4nL
          g$n$5554$1WS4nL
          g$endianness$5555$1WS4nL
          '8))))
   (g$bytevector-u64-native-set!$5484$1WS4nL
     g$bytevector-u64-native-set!$5595$1WS4nL
     (case-lambda
       ((g$bytevector$5556$1WS4nL g$k$5557$1WS4nL g$n$5558$1WS4nL)
        (bytevector-uint-set!
          g$bytevector$5556$1WS4nL
          g$k$5557$1WS4nL
          g$n$5558$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '8))))
   (g$bytevector-s64-native-set!$5485$1WS4nL
     g$bytevector-s64-native-set!$5596$1WS4nL
     (case-lambda
       ((g$bytevector$5559$1WS4nL g$k$5560$1WS4nL g$n$5561$1WS4nL)
        (bytevector-sint-set!
          g$bytevector$5559$1WS4nL
          g$k$5560$1WS4nL
          g$n$5561$1WS4nL
          (g$native-endianness$5461$1WS4nL)
          '8))))
   (g$bytevector-ieee-single-native-ref$5486$1WS4nL
     g$bytevector-ieee-single-native-ref$5597$1WS4nL
     (case-lambda
       ((g$bytevector$5562$1WS4nL g$k$5563$1WS4nL)
        (if (not (zero? (mod g$k$5563$1WS4nL '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5563$1WS4nL)
          (bytevector-ieee-single-ref
            g$bytevector$5562$1WS4nL
            g$k$5563$1WS4nL
            (g$native-endianness$5461$1WS4nL))))))
   (g$bytevector-ieee-double-native-ref$5487$1WS4nL
     g$bytevector-ieee-double-native-ref$5598$1WS4nL
     (case-lambda
       ((g$bytevector$5564$1WS4nL g$k$5565$1WS4nL)
        (if (not (zero? (mod g$k$5565$1WS4nL '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5565$1WS4nL)
          (bytevector-ieee-double-ref
            g$bytevector$5564$1WS4nL
            g$k$5565$1WS4nL
            (g$native-endianness$5461$1WS4nL))))))
   (g$bytevector-ieee-single-native-set!$5488$1WS4nL
     g$bytevector-ieee-single-native-set!$5599$1WS4nL
     (case-lambda
       ((g$bytevector$5566$1WS4nL g$k$5567$1WS4nL g$x$5568$1WS4nL)
        (if (not (zero? (mod g$k$5567$1WS4nL '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5567$1WS4nL)
          (bytevector-ieee-single-set!
            g$bytevector$5566$1WS4nL
            g$k$5567$1WS4nL
            g$x$5568$1WS4nL
            (g$native-endianness$5461$1WS4nL))))))
   (g$bytevector-ieee-double-native-set!$5489$1WS4nL
     g$bytevector-ieee-double-native-set!$5600$1WS4nL
     (case-lambda
       ((g$bytevector$5569$1WS4nL g$k$5570$1WS4nL g$x$5571$1WS4nL)
        (if (not (zero? (mod g$k$5570$1WS4nL '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5570$1WS4nL)
          (bytevector-ieee-double-set!
            g$bytevector$5569$1WS4nL
            g$k$5570$1WS4nL
            g$x$5571$1WS4nL
            (g$native-endianness$5461$1WS4nL)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6613$5601$1WS4nL
     g$6613$5696$1WS4nL
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6616$1WS4nL
       '#f
       '#f
       '#()))
   (g$6615$5602$1WS4nL g$6615$5697$1WS4nL '#f)
   (g$6614$5603$1WS4nL
     g$6614$5698$1WS4nL
     (make-record-constructor-descriptor
       g$6613$5601$1WS4nL
       '#f
       g$6615$5602$1WS4nL))
   (g$&condition?$5604$1WS4nL
     g$&condition?$5699$1WS4nL
     (record-predicate g$6613$5601$1WS4nL))
   (g$make-&condition$5605$1WS4nL
     g$make-&condition$5700$1WS4nL
     (record-constructor g$6614$5603$1WS4nL))
   (g$&condition-rtd$5606$1WS4nL
     g$&condition-rtd$5701$1WS4nL
     g$6613$5601$1WS4nL)
   (g$&condition-rcd$5607$1WS4nL
     g$&condition-rcd$5702$1WS4nL
     g$6614$5603$1WS4nL)
   (g$6629$5608$1WS4nL
     g$6629$5703$1WS4nL
     (make-record-type-descriptor
       '&message
       g$6613$5601$1WS4nL
       'g$6632$1WS4nL
       '#f
       '#f
       '#((immutable message))))
   (g$6631$5609$1WS4nL g$6631$5704$1WS4nL '#f)
   (g$6630$5610$1WS4nL
     g$6630$5705$1WS4nL
     (make-record-constructor-descriptor
       g$6629$5608$1WS4nL
       g$6614$5603$1WS4nL
       g$6631$5609$1WS4nL))
   (g$6628$5611$1WS4nL
     g$6628$5706$1WS4nL
     (record-predicate g$6629$5608$1WS4nL))
   (g$make-message-condition$5612$1WS4nL
     g$make-message-condition$5707$1WS4nL
     (record-constructor g$6630$5610$1WS4nL))
   (g$6627$5613$1WS4nL
     g$6627$5708$1WS4nL
     (record-accessor g$6629$5608$1WS4nL '0))
   (g$message-condition?$5614$1WS4nL
     g$message-condition?$5709$1WS4nL
     (condition-predicate g$6629$5608$1WS4nL))
   (g$condition-message$5615$1WS4nL
     g$condition-message$5710$1WS4nL
     (condition-accessor g$6629$5608$1WS4nL g$6627$5613$1WS4nL))
   (g$6645$5616$1WS4nL
     g$6645$5711$1WS4nL
     (make-record-type-descriptor
       '&warning
       g$6613$5601$1WS4nL
       'g$6648$1WS4nL
       '#f
       '#f
       '#()))
   (g$6647$5617$1WS4nL g$6647$5712$1WS4nL '#f)
   (g$6646$5618$1WS4nL
     g$6646$5713$1WS4nL
     (make-record-constructor-descriptor
       g$6645$5616$1WS4nL
       g$6614$5603$1WS4nL
       g$6647$5617$1WS4nL))
   (g$6644$5619$1WS4nL
     g$6644$5714$1WS4nL
     (record-predicate g$6645$5616$1WS4nL))
   (g$make-warning$5620$1WS4nL
     g$make-warning$5715$1WS4nL
     (record-constructor g$6646$5618$1WS4nL))
   (g$warning?$5621$1WS4nL
     g$warning?$5716$1WS4nL
     (condition-predicate g$6645$5616$1WS4nL))
   (g$6659$5622$1WS4nL
     g$6659$5717$1WS4nL
     (make-record-type-descriptor
       '&serious
       g$6613$5601$1WS4nL
       'g$6662$1WS4nL
       '#f
       '#f
       '#()))
   (g$6661$5623$1WS4nL g$6661$5718$1WS4nL '#f)
   (g$6660$5624$1WS4nL
     g$6660$5719$1WS4nL
     (make-record-constructor-descriptor
       g$6659$5622$1WS4nL
       g$6614$5603$1WS4nL
       g$6661$5623$1WS4nL))
   (g$6658$5625$1WS4nL
     g$6658$5720$1WS4nL
     (record-predicate g$6659$5622$1WS4nL))
   (g$make-serious-condition$5626$1WS4nL
     g$make-serious-condition$5721$1WS4nL
     (record-constructor g$6660$5624$1WS4nL))
   (g$serious-condition?$5627$1WS4nL
     g$serious-condition?$5722$1WS4nL
     (condition-predicate g$6659$5622$1WS4nL))
   (g$6673$5628$1WS4nL
     g$6673$5723$1WS4nL
     (make-record-type-descriptor
       '&error
       g$6659$5622$1WS4nL
       'g$6676$1WS4nL
       '#f
       '#f
       '#()))
   (g$6675$5629$1WS4nL g$6675$5724$1WS4nL '#f)
   (g$6674$5630$1WS4nL
     g$6674$5725$1WS4nL
     (make-record-constructor-descriptor
       g$6673$5628$1WS4nL
       g$6660$5624$1WS4nL
       g$6675$5629$1WS4nL))
   (g$6672$5631$1WS4nL
     g$6672$5726$1WS4nL
     (record-predicate g$6673$5628$1WS4nL))
   (g$make-error$5632$1WS4nL
     g$make-error$5727$1WS4nL
     (record-constructor g$6674$5630$1WS4nL))
   (g$error?$5633$1WS4nL
     g$error?$5728$1WS4nL
     (condition-predicate g$6673$5628$1WS4nL))
   (g$6687$5634$1WS4nL
     g$6687$5729$1WS4nL
     (make-record-type-descriptor
       '&violation
       g$6659$5622$1WS4nL
       'g$6690$1WS4nL
       '#f
       '#f
       '#()))
   (g$6689$5635$1WS4nL g$6689$5730$1WS4nL '#f)
   (g$6688$5636$1WS4nL
     g$6688$5731$1WS4nL
     (make-record-constructor-descriptor
       g$6687$5634$1WS4nL
       g$6660$5624$1WS4nL
       g$6689$5635$1WS4nL))
   (g$6686$5637$1WS4nL
     g$6686$5732$1WS4nL
     (record-predicate g$6687$5634$1WS4nL))
   (g$make-violation$5638$1WS4nL
     g$make-violation$5733$1WS4nL
     (record-constructor g$6688$5636$1WS4nL))
   (g$violation?$5639$1WS4nL
     g$violation?$5734$1WS4nL
     (condition-predicate g$6687$5634$1WS4nL))
   (g$6701$5640$1WS4nL
     g$6701$5735$1WS4nL
     (make-record-type-descriptor
       '&assertion
       g$6687$5634$1WS4nL
       'g$6704$1WS4nL
       '#f
       '#f
       '#()))
   (g$6703$5641$1WS4nL g$6703$5736$1WS4nL '#f)
   (g$6702$5642$1WS4nL
     g$6702$5737$1WS4nL
     (make-record-constructor-descriptor
       g$6701$5640$1WS4nL
       g$6688$5636$1WS4nL
       g$6703$5641$1WS4nL))
   (g$6700$5643$1WS4nL
     g$6700$5738$1WS4nL
     (record-predicate g$6701$5640$1WS4nL))
   (g$make-assertion-violation$5644$1WS4nL
     g$make-assertion-violation$5739$1WS4nL
     (record-constructor g$6702$5642$1WS4nL))
   (g$assertion-violation?$5645$1WS4nL
     g$assertion-violation?$5740$1WS4nL
     (condition-predicate g$6701$5640$1WS4nL))
   (g$6716$5646$1WS4nL
     g$6716$5741$1WS4nL
     (make-record-type-descriptor
       '&irritants
       g$6613$5601$1WS4nL
       'g$6719$1WS4nL
       '#f
       '#f
       '#((immutable irritants))))
   (g$6718$5647$1WS4nL g$6718$5742$1WS4nL '#f)
   (g$6717$5648$1WS4nL
     g$6717$5743$1WS4nL
     (make-record-constructor-descriptor
       g$6716$5646$1WS4nL
       g$6614$5603$1WS4nL
       g$6718$5647$1WS4nL))
   (g$6715$5649$1WS4nL
     g$6715$5744$1WS4nL
     (record-predicate g$6716$5646$1WS4nL))
   (g$make-irritants-condition$5650$1WS4nL
     g$make-irritants-condition$5745$1WS4nL
     (record-constructor g$6717$5648$1WS4nL))
   (g$6714$5651$1WS4nL
     g$6714$5746$1WS4nL
     (record-accessor g$6716$5646$1WS4nL '0))
   (g$irritants-condition?$5652$1WS4nL
     g$irritants-condition?$5747$1WS4nL
     (condition-predicate g$6716$5646$1WS4nL))
   (g$condition-irritants$5653$1WS4nL
     g$condition-irritants$5748$1WS4nL
     (condition-accessor g$6716$5646$1WS4nL g$6714$5651$1WS4nL))
   (g$6733$5654$1WS4nL
     g$6733$5749$1WS4nL
     (make-record-type-descriptor
       '&who
       g$6613$5601$1WS4nL
       'g$6736$1WS4nL
       '#f
       '#f
       '#((immutable who))))
   (g$6735$5655$1WS4nL g$6735$5750$1WS4nL '#f)
   (g$6734$5656$1WS4nL
     g$6734$5751$1WS4nL
     (make-record-constructor-descriptor
       g$6733$5654$1WS4nL
       g$6614$5603$1WS4nL
       g$6735$5655$1WS4nL))
   (g$6732$5657$1WS4nL
     g$6732$5752$1WS4nL
     (record-predicate g$6733$5654$1WS4nL))
   (g$make-who-condition$5658$1WS4nL
     g$make-who-condition$5753$1WS4nL
     (record-constructor g$6734$5656$1WS4nL))
   (g$6731$5659$1WS4nL
     g$6731$5754$1WS4nL
     (record-accessor g$6733$5654$1WS4nL '0))
   (g$who-condition?$5660$1WS4nL
     g$who-condition?$5755$1WS4nL
     (condition-predicate g$6733$5654$1WS4nL))
   (g$condition-who$5661$1WS4nL
     g$condition-who$5756$1WS4nL
     (condition-accessor g$6733$5654$1WS4nL g$6731$5659$1WS4nL))
   (g$6749$5662$1WS4nL
     g$6749$5757$1WS4nL
     (make-record-type-descriptor
       '&non-continuable
       g$6687$5634$1WS4nL
       'g$6752$1WS4nL
       '#f
       '#f
       '#()))
   (g$6751$5663$1WS4nL g$6751$5758$1WS4nL '#f)
   (g$6750$5664$1WS4nL
     g$6750$5759$1WS4nL
     (make-record-constructor-descriptor
       g$6749$5662$1WS4nL
       g$6688$5636$1WS4nL
       g$6751$5663$1WS4nL))
   (g$6748$5665$1WS4nL
     g$6748$5760$1WS4nL
     (record-predicate g$6749$5662$1WS4nL))
   (g$make-non-continuable-violation$5666$1WS4nL
     g$make-non-continuable-violation$5761$1WS4nL
     (record-constructor g$6750$5664$1WS4nL))
   (g$non-continuable-violation?$5667$1WS4nL
     g$non-continuable-violation?$5762$1WS4nL
     (condition-predicate g$6749$5662$1WS4nL))
   (g$6763$5668$1WS4nL
     g$6763$5763$1WS4nL
     (make-record-type-descriptor
       '&implementation-restriction
       g$6687$5634$1WS4nL
       'g$6766$1WS4nL
       '#f
       '#f
       '#()))
   (g$6765$5669$1WS4nL g$6765$5764$1WS4nL '#f)
   (g$6764$5670$1WS4nL
     g$6764$5765$1WS4nL
     (make-record-constructor-descriptor
       g$6763$5668$1WS4nL
       g$6688$5636$1WS4nL
       g$6765$5669$1WS4nL))
   (g$6762$5671$1WS4nL
     g$6762$5766$1WS4nL
     (record-predicate g$6763$5668$1WS4nL))
   (g$make-implementation-restriction-violation$5672$1WS4nL
     g$make-implementation-restriction-violation$5767$1WS4nL
     (record-constructor g$6764$5670$1WS4nL))
   (g$implementation-restriction-violation?$5673$1WS4nL
     g$implementation-restriction-violation?$5768$1WS4nL
     (condition-predicate g$6763$5668$1WS4nL))
   (g$6777$5674$1WS4nL
     g$6777$5769$1WS4nL
     (make-record-type-descriptor
       '&lexical
       g$6687$5634$1WS4nL
       'g$6780$1WS4nL
       '#f
       '#f
       '#()))
   (g$6779$5675$1WS4nL g$6779$5770$1WS4nL '#f)
   (g$6778$5676$1WS4nL
     g$6778$5771$1WS4nL
     (make-record-constructor-descriptor
       g$6777$5674$1WS4nL
       g$6688$5636$1WS4nL
       g$6779$5675$1WS4nL))
   (g$6776$5677$1WS4nL
     g$6776$5772$1WS4nL
     (record-predicate g$6777$5674$1WS4nL))
   (g$make-lexical-violation$5678$1WS4nL
     g$make-lexical-violation$5773$1WS4nL
     (record-constructor g$6778$5676$1WS4nL))
   (g$lexical-violation?$5679$1WS4nL
     g$lexical-violation?$5774$1WS4nL
     (condition-predicate g$6777$5674$1WS4nL))
   (g$6793$5680$1WS4nL
     g$6793$5775$1WS4nL
     (make-record-type-descriptor
       '&syntax
       g$6687$5634$1WS4nL
       'g$6796$1WS4nL
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6795$5681$1WS4nL g$6795$5776$1WS4nL '#f)
   (g$6794$5682$1WS4nL
     g$6794$5777$1WS4nL
     (make-record-constructor-descriptor
       g$6793$5680$1WS4nL
       g$6688$5636$1WS4nL
       g$6795$5681$1WS4nL))
   (g$6792$5683$1WS4nL
     g$6792$5778$1WS4nL
     (record-predicate g$6793$5680$1WS4nL))
   (g$make-syntax-violation$5684$1WS4nL
     g$make-syntax-violation$5779$1WS4nL
     (record-constructor g$6794$5682$1WS4nL))
   (g$6790$5685$1WS4nL
     g$6790$5780$1WS4nL
     (record-accessor g$6793$5680$1WS4nL '0))
   (g$6791$5686$1WS4nL
     g$6791$5781$1WS4nL
     (record-accessor g$6793$5680$1WS4nL '1))
   (g$syntax-violation?$5687$1WS4nL
     g$syntax-violation?$5782$1WS4nL
     (condition-predicate g$6793$5680$1WS4nL))
   (g$syntax-violation-form$5688$1WS4nL
     g$syntax-violation-form$5783$1WS4nL
     (condition-accessor g$6793$5680$1WS4nL g$6790$5685$1WS4nL))
   (g$syntax-violation-subform$5689$1WS4nL
     g$syntax-violation-subform$5784$1WS4nL
     (condition-accessor g$6793$5680$1WS4nL g$6791$5686$1WS4nL))
   (g$6811$5690$1WS4nL
     g$6811$5785$1WS4nL
     (make-record-type-descriptor
       '&undefined
       g$6687$5634$1WS4nL
       'g$6814$1WS4nL
       '#f
       '#f
       '#()))
   (g$6813$5691$1WS4nL g$6813$5786$1WS4nL '#f)
   (g$6812$5692$1WS4nL
     g$6812$5787$1WS4nL
     (make-record-constructor-descriptor
       g$6811$5690$1WS4nL
       g$6688$5636$1WS4nL
       g$6813$5691$1WS4nL))
   (g$6810$5693$1WS4nL
     g$6810$5788$1WS4nL
     (record-predicate g$6811$5690$1WS4nL))
   (g$make-undefined-violation$5694$1WS4nL
     g$make-undefined-violation$5789$1WS4nL
     (record-constructor g$6812$5692$1WS4nL))
   (g$undefined-violation?$5695$1WS4nL
     g$undefined-violation?$5790$1WS4nL
     (condition-predicate g$6811$5690$1WS4nL)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5791$1WS4nL
     g$append!$5797$1WS4nL
     (case-lambda
       ((g$a$5792$1WS4nL . g$b$5793$1WS4nL)
        (if (null? g$a$5792$1WS4nL)
          g$b$5793$1WS4nL
          (if (null? g$b$5793$1WS4nL)
            g$a$5792$1WS4nL
            (begin
              ((letrec ((g$f$5794$1WS4nL
                          (case-lambda
                            ((g$a$5795$1WS4nL)
                             ((case-lambda
                                ((g$n$5796$1WS4nL)
                                 (if (null? g$n$5796$1WS4nL)
                                   (set-cdr! g$a$5795$1WS4nL g$b$5793$1WS4nL)
                                   (g$f$5794$1WS4nL g$n$5796$1WS4nL))))
                              (cdr g$a$5795$1WS4nL))))))
                 g$f$5794$1WS4nL)
               g$a$5792$1WS4nL)
              g$a$5792$1WS4nL)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$5798$1WS4nL
     g$sign$5816$1WS4nL
     (case-lambda
       ((g$n$5804$1WS4nL)
        (if (> g$n$5804$1WS4nL '0) '1 (if (< g$n$5804$1WS4nL '0) '-1 '0)))))
   (g$quotient$5799$1WS4nL
     g$quotient$5817$1WS4nL
     (case-lambda
       ((g$n1$5805$1WS4nL g$n2$5806$1WS4nL)
        (begin
          (if (not (integer-valued? g$n1$5805$1WS4nL))
            (assertion-violation 'quotient '"not an integer" g$n1$5805$1WS4nL)
            (void))
          (if (not (integer-valued? g$n2$5806$1WS4nL))
            (assertion-violation 'quotient '"not an integer" g$n2$5806$1WS4nL)
            (void))
          (* (g$sign$5798$1WS4nL g$n1$5805$1WS4nL)
             (g$sign$5798$1WS4nL g$n2$5806$1WS4nL)
             (div (abs g$n1$5805$1WS4nL) (abs g$n2$5806$1WS4nL)))))))
   (g$remainder$5800$1WS4nL
     g$remainder$5818$1WS4nL
     (case-lambda
       ((g$n1$5807$1WS4nL g$n2$5808$1WS4nL)
        (begin
          (if (not (integer-valued? g$n1$5807$1WS4nL))
            (assertion-violation 'remainder '"not an integer" g$n1$5807$1WS4nL)
            (void))
          (if (not (integer-valued? g$n2$5808$1WS4nL))
            (assertion-violation 'remainder '"not an integer" g$n2$5808$1WS4nL)
            (void))
          (* (g$sign$5798$1WS4nL g$n1$5807$1WS4nL)
             (mod (abs g$n1$5807$1WS4nL) (abs g$n2$5808$1WS4nL)))))))
   (g$modulo$5801$1WS4nL
     g$modulo$5819$1WS4nL
     (case-lambda
       ((g$n1$5809$1WS4nL g$n2$5810$1WS4nL)
        (begin
          (if (not (integer-valued? g$n1$5809$1WS4nL))
            (assertion-violation 'modulo '"not an integer" g$n1$5809$1WS4nL)
            (void))
          (if (not (integer-valued? g$n2$5810$1WS4nL))
            (assertion-violation 'modulo '"not an integer" g$n2$5810$1WS4nL)
            (void))
          (* (g$sign$5798$1WS4nL g$n2$5810$1WS4nL)
             (mod (* (g$sign$5798$1WS4nL g$n2$5810$1WS4nL) g$n1$5809$1WS4nL)
                  (abs g$n2$5810$1WS4nL)))))))
   (g$make-promise$5802$1WS4nL
     g$make-promise$5820$1WS4nL
     (case-lambda
       ((g$proc$5811$1WS4nL)
        ((case-lambda
           ((g$result-ready?$5812$1WS4nL g$result$5813$1WS4nL)
            (case-lambda
              (()
               (if g$result-ready?$5812$1WS4nL
                 g$result$5813$1WS4nL
                 ((case-lambda
                    ((g$x$5814$1WS4nL)
                     (if g$result-ready?$5812$1WS4nL
                       g$result$5813$1WS4nL
                       (begin
                         (set! g$result-ready?$5812$1WS4nL '#t)
                         (set! g$result$5813$1WS4nL g$x$5814$1WS4nL)
                         g$result$5813$1WS4nL))))
                  (g$proc$5811$1WS4nL)))))))
         '#f
         '#f))))
   (g$force$5803$1WS4nL
     g$force$5821$1WS4nL
     (case-lambda ((g$object$5815$1WS4nL) (g$object$5815$1WS4nL)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5822$1WS4nL
     g$split$5848$1WS4nL
     (case-lambda
       ((g$ls$5825$1WS4nL)
        ((letrec ((g$loop$5826$1WS4nL
                    (case-lambda
                      ((g$rest$5827$1WS4nL
                         g$left$5828$1WS4nL
                         g$right$5829$1WS4nL)
                       (if (null? g$rest$5827$1WS4nL)
                         (cons g$left$5828$1WS4nL g$right$5829$1WS4nL)
                         (if (null? (cdr g$rest$5827$1WS4nL))
                           (cons
                             (cons (car g$rest$5827$1WS4nL) g$left$5828$1WS4nL)
                             g$right$5829$1WS4nL)
                           (g$loop$5826$1WS4nL
                             (g$cddr$5167$1WS4nL g$rest$5827$1WS4nL)
                             (cons (car g$rest$5827$1WS4nL) g$left$5828$1WS4nL)
                             (cons
                               (g$cadr$5165$1WS4nL g$rest$5827$1WS4nL)
                               g$right$5829$1WS4nL))))))))
           g$loop$5826$1WS4nL)
         g$ls$5825$1WS4nL
         '()
         '()))))
   (g$reverse-it$5823$1WS4nL
     g$reverse-it$5849$1WS4nL
     (case-lambda
       ((g$head$5830$1WS4nL g$tail$5831$1WS4nL)
        (if (null? g$head$5830$1WS4nL)
          g$tail$5831$1WS4nL
          ((case-lambda
             ((g$hd$5832$1WS4nL g$tl$5833$1WS4nL)
              (g$reverse-it$5823$1WS4nL
                g$tl$5833$1WS4nL
                (cons g$hd$5832$1WS4nL g$tail$5831$1WS4nL))))
           (car g$head$5830$1WS4nL)
           (cdr g$head$5830$1WS4nL))))))
   (g$list-sort$5824$1WS4nL
     g$list-sort$5850$1WS4nL
     (case-lambda
       ((g$precedes?$5834$1WS4nL g$ls$5835$1WS4nL)
        ((case-lambda
           ((g$merge$5836$1WS4nL)
            ((case-lambda
               (()
                (if (null? g$ls$5835$1WS4nL)
                  '()
                  ((letrec ((g$helper$5837$1WS4nL
                              (case-lambda
                                ((g$piece$5838$1WS4nL)
                                 (if (null? (cdr g$piece$5838$1WS4nL))
                                   g$piece$5838$1WS4nL
                                   ((case-lambda
                                      ((g$parts$5839$1WS4nL)
                                       (g$merge$5836$1WS4nL
                                         (g$helper$5837$1WS4nL
                                           (car g$parts$5839$1WS4nL))
                                         (g$helper$5837$1WS4nL
                                           (cdr g$parts$5839$1WS4nL)))))
                                    (g$split$5822$1WS4nL
                                      g$piece$5838$1WS4nL)))))))
                     g$helper$5837$1WS4nL)
                   g$ls$5835$1WS4nL)))))))
         (case-lambda
           ((g$list-1$5840$1WS4nL g$list-2$5841$1WS4nL)
            ((letrec ((g$loop$5842$1WS4nL
                        (case-lambda
                          ((g$source-1$5843$1WS4nL
                             g$source-2$5844$1WS4nL
                             g$so-far$5845$1WS4nL)
                           (if (null? g$source-1$5843$1WS4nL)
                             (g$reverse-it$5823$1WS4nL
                               g$so-far$5845$1WS4nL
                               g$source-2$5844$1WS4nL)
                             (if (null? g$source-2$5844$1WS4nL)
                               (g$reverse-it$5823$1WS4nL
                                 g$so-far$5845$1WS4nL
                                 g$source-1$5843$1WS4nL)
                               ((case-lambda
                                  ((g$car-1$5846$1WS4nL g$car-2$5847$1WS4nL)
                                   (if (g$precedes?$5834$1WS4nL
                                         g$car-2$5847$1WS4nL
                                         g$car-1$5846$1WS4nL)
                                     (g$loop$5842$1WS4nL
                                       g$source-1$5843$1WS4nL
                                       (cdr g$source-2$5844$1WS4nL)
                                       (cons
                                         g$car-2$5847$1WS4nL
                                         g$so-far$5845$1WS4nL))
                                     (g$loop$5842$1WS4nL
                                       g$source-2$5844$1WS4nL
                                       (cdr g$source-1$5843$1WS4nL)
                                       (cons
                                         g$car-1$5846$1WS4nL
                                         g$so-far$5845$1WS4nL)))))
                                (car g$source-1$5843$1WS4nL)
                                (car g$source-2$5844$1WS4nL))))))))
               g$loop$5842$1WS4nL)
             g$list-1$5840$1WS4nL
             g$list-2$5841$1WS4nL
             '()))))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$5857$1WS4nL
     g$string-ci=?$5923$1WS4nL
     (case-lambda
       ((g$a$5873$1WS4nL g$b$5874$1WS4nL . g$rest$5875$1WS4nL)
        (begin
          (if (not (string? g$a$5873$1WS4nL))
            (assertion-violation 'string-ci=? '"not a string" g$a$5873$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5876$1WS4nL)
               (begin
                 (if (not (string? g$x$5876$1WS4nL))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$5876$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5877$1WS4nL)
                     (begin
                       (set! g$a$5873$1WS4nL g$x$5876$1WS4nL)
                       g$r$5877$1WS4nL)))
                  (= (string-ci-compare g$a$5873$1WS4nL g$x$5876$1WS4nL) '0)))))
            (cons g$b$5874$1WS4nL g$rest$5875$1WS4nL))))))
   (g$string-ci<?$5858$1WS4nL
     g$string-ci<?$5924$1WS4nL
     (case-lambda
       ((g$a$5878$1WS4nL g$b$5879$1WS4nL . g$rest$5880$1WS4nL)
        (begin
          (if (not (string? g$a$5878$1WS4nL))
            (assertion-violation 'string-ci<? '"not a string" g$a$5878$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5881$1WS4nL)
               (begin
                 (if (not (string? g$x$5881$1WS4nL))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$5881$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5882$1WS4nL)
                     (begin
                       (set! g$a$5878$1WS4nL g$x$5881$1WS4nL)
                       g$r$5882$1WS4nL)))
                  (< (string-ci-compare g$a$5878$1WS4nL g$x$5881$1WS4nL) '0)))))
            (cons g$b$5879$1WS4nL g$rest$5880$1WS4nL))))))
   (g$string-ci>?$5859$1WS4nL
     g$string-ci>?$5925$1WS4nL
     (case-lambda
       ((g$a$5883$1WS4nL g$b$5884$1WS4nL . g$rest$5885$1WS4nL)
        (begin
          (if (not (string? g$a$5883$1WS4nL))
            (assertion-violation 'string-ci>? '"not a string" g$a$5883$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5886$1WS4nL)
               (begin
                 (if (not (string? g$x$5886$1WS4nL))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$5886$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5887$1WS4nL)
                     (begin
                       (set! g$a$5883$1WS4nL g$x$5886$1WS4nL)
                       g$r$5887$1WS4nL)))
                  (> (string-ci-compare g$a$5883$1WS4nL g$x$5886$1WS4nL) '0)))))
            (cons g$b$5884$1WS4nL g$rest$5885$1WS4nL))))))
   (g$string-ci<=?$5860$1WS4nL
     g$string-ci<=?$5926$1WS4nL
     (case-lambda
       ((g$a$5888$1WS4nL g$b$5889$1WS4nL . g$rest$5890$1WS4nL)
        (begin
          (if (not (string? g$a$5888$1WS4nL))
            (assertion-violation 'string-ci<=? '"not a string" g$a$5888$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5891$1WS4nL)
               (begin
                 (if (not (string? g$x$5891$1WS4nL))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$5891$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5892$1WS4nL)
                     (begin
                       (set! g$a$5888$1WS4nL g$x$5891$1WS4nL)
                       g$r$5892$1WS4nL)))
                  (<= (string-ci-compare g$a$5888$1WS4nL g$x$5891$1WS4nL)
                      '0)))))
            (cons g$b$5889$1WS4nL g$rest$5890$1WS4nL))))))
   (g$string-ci>=?$5861$1WS4nL
     g$string-ci>=?$5927$1WS4nL
     (case-lambda
       ((g$a$5893$1WS4nL g$b$5894$1WS4nL . g$rest$5895$1WS4nL)
        (begin
          (if (not (string? g$a$5893$1WS4nL))
            (assertion-violation 'string-ci>=? '"not a string" g$a$5893$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5896$1WS4nL)
               (begin
                 (if (not (string? g$x$5896$1WS4nL))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$5896$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5897$1WS4nL)
                     (begin
                       (set! g$a$5893$1WS4nL g$x$5896$1WS4nL)
                       g$r$5897$1WS4nL)))
                  (>= (string-ci-compare g$a$5893$1WS4nL g$x$5896$1WS4nL)
                      '0)))))
            (cons g$b$5894$1WS4nL g$rest$5895$1WS4nL))))))
   (g$char-ci=?$5868$1WS4nL
     g$char-ci=?$5928$1WS4nL
     (case-lambda
       ((g$a$5898$1WS4nL g$b$5899$1WS4nL . g$rest$5900$1WS4nL)
        (begin
          (if (not (char? g$a$5898$1WS4nL))
            (assertion-violation 'char-ci=? '"not a char" g$a$5898$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5901$1WS4nL)
               (begin
                 (if (not (char? g$x$5901$1WS4nL))
                   (assertion-violation
                     'char-ci=?
                     '"not a char"
                     g$x$5901$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5902$1WS4nL)
                     (begin
                       (set! g$a$5898$1WS4nL g$x$5901$1WS4nL)
                       g$r$5902$1WS4nL)))
                  (= (char->integer (char-upcase g$a$5898$1WS4nL))
                     (char->integer (char-upcase g$x$5901$1WS4nL)))))))
            (cons g$b$5899$1WS4nL g$rest$5900$1WS4nL))))))
   (g$char-ci<?$5869$1WS4nL
     g$char-ci<?$5929$1WS4nL
     (case-lambda
       ((g$a$5903$1WS4nL g$b$5904$1WS4nL . g$rest$5905$1WS4nL)
        (begin
          (if (not (char? g$a$5903$1WS4nL))
            (assertion-violation 'char-ci<? '"not a char" g$a$5903$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5906$1WS4nL)
               (begin
                 (if (not (char? g$x$5906$1WS4nL))
                   (assertion-violation
                     'char-ci<?
                     '"not a char"
                     g$x$5906$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5907$1WS4nL)
                     (begin
                       (set! g$a$5903$1WS4nL g$x$5906$1WS4nL)
                       g$r$5907$1WS4nL)))
                  (< (char->integer (char-upcase g$a$5903$1WS4nL))
                     (char->integer (char-upcase g$x$5906$1WS4nL)))))))
            (cons g$b$5904$1WS4nL g$rest$5905$1WS4nL))))))
   (g$char-ci>?$5870$1WS4nL
     g$char-ci>?$5930$1WS4nL
     (case-lambda
       ((g$a$5908$1WS4nL g$b$5909$1WS4nL . g$rest$5910$1WS4nL)
        (begin
          (if (not (char? g$a$5908$1WS4nL))
            (assertion-violation 'char-ci>? '"not a char" g$a$5908$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5911$1WS4nL)
               (begin
                 (if (not (char? g$x$5911$1WS4nL))
                   (assertion-violation
                     'char-ci>?
                     '"not a char"
                     g$x$5911$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5912$1WS4nL)
                     (begin
                       (set! g$a$5908$1WS4nL g$x$5911$1WS4nL)
                       g$r$5912$1WS4nL)))
                  (> (char->integer (char-upcase g$a$5908$1WS4nL))
                     (char->integer (char-upcase g$x$5911$1WS4nL)))))))
            (cons g$b$5909$1WS4nL g$rest$5910$1WS4nL))))))
   (g$char-ci<=?$5871$1WS4nL
     g$char-ci<=?$5931$1WS4nL
     (case-lambda
       ((g$a$5913$1WS4nL g$b$5914$1WS4nL . g$rest$5915$1WS4nL)
        (begin
          (if (not (char? g$a$5913$1WS4nL))
            (assertion-violation 'char-ci<=? '"not a char" g$a$5913$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5916$1WS4nL)
               (begin
                 (if (not (char? g$x$5916$1WS4nL))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$5916$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5917$1WS4nL)
                     (begin
                       (set! g$a$5913$1WS4nL g$x$5916$1WS4nL)
                       g$r$5917$1WS4nL)))
                  (<= (char->integer (char-upcase g$a$5913$1WS4nL))
                      (char->integer (char-upcase g$x$5916$1WS4nL)))))))
            (cons g$b$5914$1WS4nL g$rest$5915$1WS4nL))))))
   (g$char-ci>=?$5872$1WS4nL
     g$char-ci>=?$5932$1WS4nL
     (case-lambda
       ((g$a$5918$1WS4nL g$b$5919$1WS4nL . g$rest$5920$1WS4nL)
        (begin
          (if (not (char? g$a$5918$1WS4nL))
            (assertion-violation 'char-ci>=? '"not a char" g$a$5918$1WS4nL)
            (void))
          (g$for-all$5001$1WS4nL
            (case-lambda
              ((g$x$5921$1WS4nL)
               (begin
                 (if (not (char? g$x$5921$1WS4nL))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$5921$1WS4nL)
                   (void))
                 ((case-lambda
                    ((g$r$5922$1WS4nL)
                     (begin
                       (set! g$a$5918$1WS4nL g$x$5921$1WS4nL)
                       g$r$5922$1WS4nL)))
                  (>= (char->integer (char-upcase g$a$5918$1WS4nL))
                      (char->integer (char-upcase g$x$5921$1WS4nL)))))))
            (cons g$b$5919$1WS4nL g$rest$5920$1WS4nL)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$5933$1WS4nL
     g$bitwise-if$5980$1WS4nL
     (case-lambda
       ((g$ei1$5940$1WS4nL g$ei2$5941$1WS4nL g$ei3$5942$1WS4nL)
        (bitwise-ior
          (bitwise-and g$ei1$5940$1WS4nL g$ei2$5941$1WS4nL)
          (bitwise-and (bitwise-not g$ei1$5940$1WS4nL) g$ei3$5942$1WS4nL)))))
   (g$bitwise-copy-bit$5934$1WS4nL
     g$bitwise-copy-bit$5981$1WS4nL
     (case-lambda
       ((g$ei1$5943$1WS4nL g$ei2$5944$1WS4nL g$ei3$5945$1WS4nL)
        ((case-lambda
           ((g$mask$5946$1WS4nL)
            ((case-lambda
               (()
                (g$bitwise-if$5933$1WS4nL
                  g$mask$5946$1WS4nL
                  (g$bitwise-arithmetic-shift-left$5937$1WS4nL
                    g$ei3$5945$1WS4nL
                    g$ei2$5944$1WS4nL)
                  g$ei1$5943$1WS4nL))))))
         (g$bitwise-arithmetic-shift-left$5937$1WS4nL '1 g$ei2$5944$1WS4nL)))))
   (g$bitwise-bit-field$5935$1WS4nL
     g$bitwise-bit-field$5982$1WS4nL
     (case-lambda
       ((g$ei1$5947$1WS4nL g$ei2$5948$1WS4nL g$ei3$5949$1WS4nL)
        ((case-lambda
           ((g$mask$5950$1WS4nL)
            (g$bitwise-arithmetic-shift-right$5938$1WS4nL
              (bitwise-and g$ei1$5947$1WS4nL g$mask$5950$1WS4nL)
              g$ei2$5948$1WS4nL)))
         (bitwise-not
           (g$bitwise-arithmetic-shift-left$5937$1WS4nL
             '-1
             g$ei3$5949$1WS4nL))))))
   (g$bitwise-copy-bit-field$5936$1WS4nL
     g$bitwise-copy-bit-field$5983$1WS4nL
     (case-lambda
       ((g$ei1$5951$1WS4nL
          g$ei2$5952$1WS4nL
          g$ei3$5953$1WS4nL
          g$ei4$5954$1WS4nL)
        ((case-lambda
           ((g$to$5955$1WS4nL)
            ((case-lambda
               ((g$start$5956$1WS4nL)
                ((case-lambda
                   ((g$end$5957$1WS4nL)
                    ((case-lambda
                       ((g$from$5958$1WS4nL)
                        ((case-lambda
                           ((g$mask1$5959$1WS4nL)
                            ((case-lambda
                               ((g$mask2$5960$1WS4nL)
                                ((case-lambda
                                   ((g$mask$5961$1WS4nL)
                                    ((case-lambda
                                       (()
                                        (g$bitwise-if$5933$1WS4nL
                                          g$mask$5961$1WS4nL
                                          (g$bitwise-arithmetic-shift-left$5937$1WS4nL
                                            g$from$5958$1WS4nL
                                            g$start$5956$1WS4nL)
                                          g$to$5955$1WS4nL))))))
                                 (bitwise-and
                                   g$mask1$5959$1WS4nL
                                   g$mask2$5960$1WS4nL))))
                             (bitwise-not
                               (g$bitwise-arithmetic-shift-left$5937$1WS4nL
                                 '-1
                                 g$end$5957$1WS4nL)))))
                         (g$bitwise-arithmetic-shift-left$5937$1WS4nL
                           '-1
                           g$start$5956$1WS4nL))))
                     g$ei4$5954$1WS4nL)))
                 g$ei3$5953$1WS4nL)))
             g$ei2$5952$1WS4nL)))
         g$ei1$5951$1WS4nL))))
   (g$bitwise-arithmetic-shift-left$5937$1WS4nL
     g$bitwise-arithmetic-shift-left$5984$1WS4nL
     (case-lambda
       ((g$ei1$5962$1WS4nL g$ei2$5963$1WS4nL)
        (bitwise-arithmetic-shift g$ei1$5962$1WS4nL g$ei2$5963$1WS4nL))))
   (g$bitwise-arithmetic-shift-right$5938$1WS4nL
     g$bitwise-arithmetic-shift-right$5985$1WS4nL
     (case-lambda
       ((g$ei1$5964$1WS4nL g$ei2$5965$1WS4nL)
        (bitwise-arithmetic-shift g$ei1$5964$1WS4nL (- g$ei2$5965$1WS4nL)))))
   (g$bitwise-rotate-bit-field$5939$1WS4nL
     g$bitwise-rotate-bit-field$5986$1WS4nL
     (case-lambda
       ((g$ei1$5966$1WS4nL
          g$ei2$5967$1WS4nL
          g$ei3$5968$1WS4nL
          g$ei4$5969$1WS4nL)
        ((case-lambda
           ((g$n$5970$1WS4nL)
            ((case-lambda
               ((g$start$5971$1WS4nL)
                ((case-lambda
                   ((g$end$5972$1WS4nL)
                    ((case-lambda
                       ((g$count$5973$1WS4nL)
                        ((case-lambda
                           ((g$width$5974$1WS4nL)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5974$1WS4nL)
                                  ((case-lambda
                                     ((g$count$5975$1WS4nL)
                                      ((case-lambda
                                         ((g$field0$5976$1WS4nL)
                                          ((case-lambda
                                             ((g$field1$5977$1WS4nL)
                                              ((case-lambda
                                                 ((g$field2$5978$1WS4nL)
                                                  ((case-lambda
                                                     ((g$field$5979$1WS4nL)
                                                      ((case-lambda
                                                         (()
                                                          (g$bitwise-copy-bit-field$5936$1WS4nL
                                                            g$n$5970$1WS4nL
                                                            g$start$5971$1WS4nL
                                                            g$end$5972$1WS4nL
                                                            g$field$5979$1WS4nL))))))
                                                   (bitwise-ior
                                                     g$field1$5977$1WS4nL
                                                     g$field2$5978$1WS4nL))))
                                               (g$bitwise-arithmetic-shift-right$5938$1WS4nL
                                                 g$field0$5976$1WS4nL
                                                 (- g$width$5974$1WS4nL
                                                    g$count$5975$1WS4nL)))))
                                           (g$bitwise-arithmetic-shift-left$5937$1WS4nL
                                             g$field0$5976$1WS4nL
                                             g$count$5975$1WS4nL))))
                                       (g$bitwise-bit-field$5935$1WS4nL
                                         g$n$5970$1WS4nL
                                         g$start$5971$1WS4nL
                                         g$end$5972$1WS4nL))))
                                   (mod g$count$5973$1WS4nL
                                        g$width$5974$1WS4nL))
                                  g$n$5970$1WS4nL))))))
                         (- g$end$5972$1WS4nL g$start$5971$1WS4nL))))
                     g$ei4$5969$1WS4nL)))
                 g$ei3$5968$1WS4nL)))
             g$ei2$5967$1WS4nL)))
         g$ei1$5966$1WS4nL)))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxif$5987$1WS4nL
     g$fxif$6034$1WS4nL
     (case-lambda
       ((g$fx1$5994$1WS4nL g$fx2$5995$1WS4nL g$fx3$5996$1WS4nL)
        (fxior
          (fxand g$fx1$5994$1WS4nL g$fx2$5995$1WS4nL)
          (fxand (fxnot g$fx1$5994$1WS4nL) g$fx3$5996$1WS4nL)))))
   (g$fxcopy-bit$5988$1WS4nL
     g$fxcopy-bit$6035$1WS4nL
     (case-lambda
       ((g$fx1$5997$1WS4nL g$fx2$5998$1WS4nL g$fx3$5999$1WS4nL)
        ((case-lambda
           ((g$mask$6000$1WS4nL)
            ((case-lambda
               (()
                (g$fxif$5987$1WS4nL
                  g$mask$6000$1WS4nL
                  (g$fxarithmetic-shift-left$5991$1WS4nL
                    g$fx3$5999$1WS4nL
                    g$fx2$5998$1WS4nL)
                  g$fx1$5997$1WS4nL))))))
         (g$fxarithmetic-shift-left$5991$1WS4nL '1 g$fx2$5998$1WS4nL)))))
   (g$fxbit-field$5989$1WS4nL
     g$fxbit-field$6036$1WS4nL
     (case-lambda
       ((g$fx1$6001$1WS4nL g$fx2$6002$1WS4nL g$fx3$6003$1WS4nL)
        ((case-lambda
           ((g$mask$6004$1WS4nL)
            ((case-lambda
               (()
                (g$fxarithmetic-shift-right$5992$1WS4nL
                  (fxand g$fx1$6001$1WS4nL g$mask$6004$1WS4nL)
                  g$fx2$6002$1WS4nL))))))
         (fxnot
           (g$fxarithmetic-shift-left$5991$1WS4nL '-1 g$fx3$6003$1WS4nL))))))
   (g$fxcopy-bit-field$5990$1WS4nL
     g$fxcopy-bit-field$6037$1WS4nL
     (case-lambda
       ((g$fx1$6005$1WS4nL
          g$fx2$6006$1WS4nL
          g$fx3$6007$1WS4nL
          g$fx4$6008$1WS4nL)
        ((case-lambda
           ((g$to$6009$1WS4nL)
            ((case-lambda
               ((g$start$6010$1WS4nL)
                ((case-lambda
                   ((g$end$6011$1WS4nL)
                    ((case-lambda
                       ((g$from$6012$1WS4nL)
                        ((case-lambda
                           ((g$mask1$6013$1WS4nL)
                            ((case-lambda
                               ((g$mask2$6014$1WS4nL)
                                ((case-lambda
                                   ((g$mask$6015$1WS4nL)
                                    ((case-lambda
                                       (()
                                        (g$fxif$5987$1WS4nL
                                          g$mask$6015$1WS4nL
                                          (g$fxarithmetic-shift-left$5991$1WS4nL
                                            g$from$6012$1WS4nL
                                            g$start$6010$1WS4nL)
                                          g$to$6009$1WS4nL))))))
                                 (fxand
                                   g$mask1$6013$1WS4nL
                                   g$mask2$6014$1WS4nL))))
                             (fxnot
                               (g$fxarithmetic-shift-left$5991$1WS4nL
                                 '-1
                                 g$end$6011$1WS4nL)))))
                         (g$fxarithmetic-shift-left$5991$1WS4nL
                           '-1
                           g$start$6010$1WS4nL))))
                     g$fx4$6008$1WS4nL)))
                 g$fx3$6007$1WS4nL)))
             g$fx2$6006$1WS4nL)))
         g$fx1$6005$1WS4nL))))
   (g$fxarithmetic-shift-left$5991$1WS4nL
     g$fxarithmetic-shift-left$6038$1WS4nL
     (case-lambda
       ((g$fx1$6016$1WS4nL g$fx2$6017$1WS4nL)
        (fxarithmetic-shift g$fx1$6016$1WS4nL g$fx2$6017$1WS4nL))))
   (g$fxarithmetic-shift-right$5992$1WS4nL
     g$fxarithmetic-shift-right$6039$1WS4nL
     (case-lambda
       ((g$fx1$6018$1WS4nL g$fx2$6019$1WS4nL)
        (fxarithmetic-shift g$fx1$6018$1WS4nL (- g$fx2$6019$1WS4nL)))))
   (g$fxrotate-bit-field$5993$1WS4nL
     g$fxrotate-bit-field$6040$1WS4nL
     (case-lambda
       ((g$fx1$6020$1WS4nL
          g$fx2$6021$1WS4nL
          g$fx3$6022$1WS4nL
          g$fx4$6023$1WS4nL)
        ((case-lambda
           ((g$n$6024$1WS4nL)
            ((case-lambda
               ((g$start$6025$1WS4nL)
                ((case-lambda
                   ((g$end$6026$1WS4nL)
                    ((case-lambda
                       ((g$count$6027$1WS4nL)
                        ((case-lambda
                           ((g$width$6028$1WS4nL)
                            ((case-lambda
                               (()
                                (if (positive? g$width$6028$1WS4nL)
                                  ((case-lambda
                                     ((g$count$6029$1WS4nL)
                                      ((case-lambda
                                         ((g$field0$6030$1WS4nL)
                                          ((case-lambda
                                             ((g$field1$6031$1WS4nL)
                                              ((case-lambda
                                                 ((g$field2$6032$1WS4nL)
                                                  ((case-lambda
                                                     ((g$field$6033$1WS4nL)
                                                      ((case-lambda
                                                         (()
                                                          (g$fxcopy-bit-field$5990$1WS4nL
                                                            g$n$6024$1WS4nL
                                                            g$start$6025$1WS4nL
                                                            g$end$6026$1WS4nL
                                                            g$field$6033$1WS4nL))))))
                                                   (fxior
                                                     g$field1$6031$1WS4nL
                                                     g$field2$6032$1WS4nL))))
                                               (g$fxarithmetic-shift-right$5992$1WS4nL
                                                 g$field0$6030$1WS4nL
                                                 (- g$width$6028$1WS4nL
                                                    g$count$6029$1WS4nL)))))
                                           (g$fxarithmetic-shift-left$5991$1WS4nL
                                             g$field0$6030$1WS4nL
                                             g$count$6029$1WS4nL))))
                                       (g$fxbit-field$5989$1WS4nL
                                         g$n$6024$1WS4nL
                                         g$start$6025$1WS4nL
                                         g$end$6026$1WS4nL))))
                                   (mod g$count$6027$1WS4nL
                                        g$width$6028$1WS4nL))
                                  g$n$6024$1WS4nL))))))
                         (- g$end$6026$1WS4nL g$start$6025$1WS4nL))))
                     g$fx4$6023$1WS4nL)))
                 g$fx3$6022$1WS4nL)))
             g$fx2$6021$1WS4nL)))
         g$fx1$6020$1WS4nL)))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7109$6041$1WS4nL
     g$7109$6053$1WS4nL
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7112$1WS4nL
       '#f
       '#f
       '#()))
   (g$7111$6042$1WS4nL g$7111$6054$1WS4nL '#f)
   (g$7110$6043$1WS4nL
     g$7110$6055$1WS4nL
     (make-record-constructor-descriptor
       g$7109$6041$1WS4nL
       &implementation-restriction-rcd
       g$7111$6042$1WS4nL))
   (g$7108$6044$1WS4nL
     g$7108$6056$1WS4nL
     (record-predicate g$7109$6041$1WS4nL))
   (g$make-no-infinities-violation$6045$1WS4nL
     g$make-no-infinities-violation$6057$1WS4nL
     (record-constructor g$7110$6043$1WS4nL))
   (g$no-infinities-violation?$6046$1WS4nL
     g$no-infinities-violation?$6058$1WS4nL
     (condition-predicate g$7109$6041$1WS4nL))
   (g$7123$6047$1WS4nL
     g$7123$6059$1WS4nL
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7126$1WS4nL
       '#f
       '#f
       '#()))
   (g$7125$6048$1WS4nL g$7125$6060$1WS4nL '#f)
   (g$7124$6049$1WS4nL
     g$7124$6061$1WS4nL
     (make-record-constructor-descriptor
       g$7123$6047$1WS4nL
       &implementation-restriction-rcd
       g$7125$6048$1WS4nL))
   (g$7122$6050$1WS4nL
     g$7122$6062$1WS4nL
     (record-predicate g$7123$6047$1WS4nL))
   (g$make-no-nans-violation$6051$1WS4nL
     g$make-no-nans-violation$6063$1WS4nL
     (record-constructor g$7124$6049$1WS4nL))
   (g$no-nans-violation?$6052$1WS4nL
     g$no-nans-violation?$6064$1WS4nL
     (condition-predicate g$7123$6047$1WS4nL)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7138$6065$1WS4nL
     g$7138$6145$1WS4nL
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7141$1WS4nL
       '#f
       '#f
       '#()))
   (g$7140$6066$1WS4nL g$7140$6146$1WS4nL '#f)
   (g$7139$6067$1WS4nL
     g$7139$6147$1WS4nL
     (make-record-constructor-descriptor
       g$7138$6065$1WS4nL
       &error-rcd
       g$7140$6066$1WS4nL))
   (g$7137$6068$1WS4nL
     g$7137$6148$1WS4nL
     (record-predicate g$7138$6065$1WS4nL))
   (g$make-i/o-error$6069$1WS4nL
     g$make-i/o-error$6149$1WS4nL
     (record-constructor g$7139$6067$1WS4nL))
   (g$i/o-error?$6070$1WS4nL
     g$i/o-error?$6150$1WS4nL
     (condition-predicate g$7138$6065$1WS4nL))
   (g$7152$6071$1WS4nL
     g$7152$6151$1WS4nL
     (make-record-type-descriptor
       '&i/o-read
       g$7138$6065$1WS4nL
       'g$7155$1WS4nL
       '#f
       '#f
       '#()))
   (g$7154$6072$1WS4nL g$7154$6152$1WS4nL '#f)
   (g$7153$6073$1WS4nL
     g$7153$6153$1WS4nL
     (make-record-constructor-descriptor
       g$7152$6071$1WS4nL
       g$7139$6067$1WS4nL
       g$7154$6072$1WS4nL))
   (g$7151$6074$1WS4nL
     g$7151$6154$1WS4nL
     (record-predicate g$7152$6071$1WS4nL))
   (g$make-i/o-read-error$6075$1WS4nL
     g$make-i/o-read-error$6155$1WS4nL
     (record-constructor g$7153$6073$1WS4nL))
   (g$i/o-read-error?$6076$1WS4nL
     g$i/o-read-error?$6156$1WS4nL
     (condition-predicate g$7152$6071$1WS4nL))
   (g$7166$6077$1WS4nL
     g$7166$6157$1WS4nL
     (make-record-type-descriptor
       '&i/o-write
       g$7138$6065$1WS4nL
       'g$7169$1WS4nL
       '#f
       '#f
       '#()))
   (g$7168$6078$1WS4nL g$7168$6158$1WS4nL '#f)
   (g$7167$6079$1WS4nL
     g$7167$6159$1WS4nL
     (make-record-constructor-descriptor
       g$7166$6077$1WS4nL
       g$7139$6067$1WS4nL
       g$7168$6078$1WS4nL))
   (g$7165$6080$1WS4nL
     g$7165$6160$1WS4nL
     (record-predicate g$7166$6077$1WS4nL))
   (g$make-i/o-write-error$6081$1WS4nL
     g$make-i/o-write-error$6161$1WS4nL
     (record-constructor g$7167$6079$1WS4nL))
   (g$i/o-write-error?$6082$1WS4nL
     g$i/o-write-error?$6162$1WS4nL
     (condition-predicate g$7166$6077$1WS4nL))
   (g$7181$6083$1WS4nL
     g$7181$6163$1WS4nL
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7138$6065$1WS4nL
       'g$7184$1WS4nL
       '#f
       '#f
       '#((immutable position))))
   (g$7183$6084$1WS4nL g$7183$6164$1WS4nL '#f)
   (g$7182$6085$1WS4nL
     g$7182$6165$1WS4nL
     (make-record-constructor-descriptor
       g$7181$6083$1WS4nL
       g$7139$6067$1WS4nL
       g$7183$6084$1WS4nL))
   (g$7180$6086$1WS4nL
     g$7180$6166$1WS4nL
     (record-predicate g$7181$6083$1WS4nL))
   (g$make-i/o-invalid-position-error$6087$1WS4nL
     g$make-i/o-invalid-position-error$6167$1WS4nL
     (record-constructor g$7182$6085$1WS4nL))
   (g$7179$6088$1WS4nL
     g$7179$6168$1WS4nL
     (record-accessor g$7181$6083$1WS4nL '0))
   (g$i/o-invalid-position-error?$6089$1WS4nL
     g$i/o-invalid-position-error?$6169$1WS4nL
     (condition-predicate g$7181$6083$1WS4nL))
   (g$i/o-error-position$6090$1WS4nL
     g$i/o-error-position$6170$1WS4nL
     (condition-accessor g$7181$6083$1WS4nL g$7179$6088$1WS4nL))
   (g$7198$6091$1WS4nL
     g$7198$6171$1WS4nL
     (make-record-type-descriptor
       '&i/o-filename
       g$7138$6065$1WS4nL
       'g$7201$1WS4nL
       '#f
       '#f
       '#((immutable filename))))
   (g$7200$6092$1WS4nL g$7200$6172$1WS4nL '#f)
   (g$7199$6093$1WS4nL
     g$7199$6173$1WS4nL
     (make-record-constructor-descriptor
       g$7198$6091$1WS4nL
       g$7139$6067$1WS4nL
       g$7200$6092$1WS4nL))
   (g$7197$6094$1WS4nL
     g$7197$6174$1WS4nL
     (record-predicate g$7198$6091$1WS4nL))
   (g$make-i/o-filename-error$6095$1WS4nL
     g$make-i/o-filename-error$6175$1WS4nL
     (record-constructor g$7199$6093$1WS4nL))
   (g$7196$6096$1WS4nL
     g$7196$6176$1WS4nL
     (record-accessor g$7198$6091$1WS4nL '0))
   (g$i/o-filename-error?$6097$1WS4nL
     g$i/o-filename-error?$6177$1WS4nL
     (condition-predicate g$7198$6091$1WS4nL))
   (g$i/o-error-filename$6098$1WS4nL
     g$i/o-error-filename$6178$1WS4nL
     (condition-accessor g$7198$6091$1WS4nL g$7196$6096$1WS4nL))
   (g$7214$6099$1WS4nL
     g$7214$6179$1WS4nL
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7198$6091$1WS4nL
       'g$7217$1WS4nL
       '#f
       '#f
       '#()))
   (g$7216$6100$1WS4nL g$7216$6180$1WS4nL '#f)
   (g$7215$6101$1WS4nL
     g$7215$6181$1WS4nL
     (make-record-constructor-descriptor
       g$7214$6099$1WS4nL
       g$7199$6093$1WS4nL
       g$7216$6100$1WS4nL))
   (g$7213$6102$1WS4nL
     g$7213$6182$1WS4nL
     (record-predicate g$7214$6099$1WS4nL))
   (g$make-i/o-file-protection-error$6103$1WS4nL
     g$make-i/o-file-protection-error$6183$1WS4nL
     (record-constructor g$7215$6101$1WS4nL))
   (g$i/o-file-protection-error?$6104$1WS4nL
     g$i/o-file-protection-error?$6184$1WS4nL
     (condition-predicate g$7214$6099$1WS4nL))
   (g$7228$6105$1WS4nL
     g$7228$6185$1WS4nL
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7214$6099$1WS4nL
       'g$7231$1WS4nL
       '#f
       '#f
       '#()))
   (g$7230$6106$1WS4nL g$7230$6186$1WS4nL '#f)
   (g$7229$6107$1WS4nL
     g$7229$6187$1WS4nL
     (make-record-constructor-descriptor
       g$7228$6105$1WS4nL
       g$7215$6101$1WS4nL
       g$7230$6106$1WS4nL))
   (g$7227$6108$1WS4nL
     g$7227$6188$1WS4nL
     (record-predicate g$7228$6105$1WS4nL))
   (g$make-i/o-file-is-read-only-error$6109$1WS4nL
     g$make-i/o-file-is-read-only-error$6189$1WS4nL
     (record-constructor g$7229$6107$1WS4nL))
   (g$i/o-file-is-read-only-error?$6110$1WS4nL
     g$i/o-file-is-read-only-error?$6190$1WS4nL
     (condition-predicate g$7228$6105$1WS4nL))
   (g$7242$6111$1WS4nL
     g$7242$6191$1WS4nL
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7198$6091$1WS4nL
       'g$7245$1WS4nL
       '#f
       '#f
       '#()))
   (g$7244$6112$1WS4nL g$7244$6192$1WS4nL '#f)
   (g$7243$6113$1WS4nL
     g$7243$6193$1WS4nL
     (make-record-constructor-descriptor
       g$7242$6111$1WS4nL
       g$7199$6093$1WS4nL
       g$7244$6112$1WS4nL))
   (g$7241$6114$1WS4nL
     g$7241$6194$1WS4nL
     (record-predicate g$7242$6111$1WS4nL))
   (g$make-i/o-file-already-exists-error$6115$1WS4nL
     g$make-i/o-file-already-exists-error$6195$1WS4nL
     (record-constructor g$7243$6113$1WS4nL))
   (g$i/o-file-already-exists-error?$6116$1WS4nL
     g$i/o-file-already-exists-error?$6196$1WS4nL
     (condition-predicate g$7242$6111$1WS4nL))
   (g$7256$6117$1WS4nL
     g$7256$6197$1WS4nL
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7198$6091$1WS4nL
       'g$7259$1WS4nL
       '#f
       '#f
       '#()))
   (g$7258$6118$1WS4nL g$7258$6198$1WS4nL '#f)
   (g$7257$6119$1WS4nL
     g$7257$6199$1WS4nL
     (make-record-constructor-descriptor
       g$7256$6117$1WS4nL
       g$7199$6093$1WS4nL
       g$7258$6118$1WS4nL))
   (g$7255$6120$1WS4nL
     g$7255$6200$1WS4nL
     (record-predicate g$7256$6117$1WS4nL))
   (g$make-i/o-file-does-not-exist-error$6121$1WS4nL
     g$make-i/o-file-does-not-exist-error$6201$1WS4nL
     (record-constructor g$7257$6119$1WS4nL))
   (g$i/o-file-does-not-exist-error?$6122$1WS4nL
     g$i/o-file-does-not-exist-error?$6202$1WS4nL
     (condition-predicate g$7256$6117$1WS4nL))
   (g$7271$6123$1WS4nL
     g$7271$6203$1WS4nL
     (make-record-type-descriptor
       '&i/o-port
       g$7138$6065$1WS4nL
       'g$7274$1WS4nL
       '#f
       '#f
       '#((immutable port))))
   (g$7273$6124$1WS4nL g$7273$6204$1WS4nL '#f)
   (g$7272$6125$1WS4nL
     g$7272$6205$1WS4nL
     (make-record-constructor-descriptor
       g$7271$6123$1WS4nL
       g$7139$6067$1WS4nL
       g$7273$6124$1WS4nL))
   (g$7270$6126$1WS4nL
     g$7270$6206$1WS4nL
     (record-predicate g$7271$6123$1WS4nL))
   (g$make-i/o-port-error$6127$1WS4nL
     g$make-i/o-port-error$6207$1WS4nL
     (record-constructor g$7272$6125$1WS4nL))
   (g$7269$6128$1WS4nL
     g$7269$6208$1WS4nL
     (record-accessor g$7271$6123$1WS4nL '0))
   (g$i/o-port-error?$6129$1WS4nL
     g$i/o-port-error?$6209$1WS4nL
     (condition-predicate g$7271$6123$1WS4nL))
   (g$i/o-error-port$6130$1WS4nL
     g$i/o-error-port$6210$1WS4nL
     (condition-accessor g$7271$6123$1WS4nL g$7269$6128$1WS4nL))
   (g$7287$6131$1WS4nL
     g$7287$6211$1WS4nL
     (make-record-type-descriptor
       '&i/o-decoding
       g$7271$6123$1WS4nL
       'g$7290$1WS4nL
       '#f
       '#f
       '#()))
   (g$7289$6132$1WS4nL g$7289$6212$1WS4nL '#f)
   (g$7288$6133$1WS4nL
     g$7288$6213$1WS4nL
     (make-record-constructor-descriptor
       g$7287$6131$1WS4nL
       g$7272$6125$1WS4nL
       g$7289$6132$1WS4nL))
   (g$7286$6134$1WS4nL
     g$7286$6214$1WS4nL
     (record-predicate g$7287$6131$1WS4nL))
   (g$make-i/o-decoding-error$6135$1WS4nL
     g$make-i/o-decoding-error$6215$1WS4nL
     (record-constructor g$7288$6133$1WS4nL))
   (g$i/o-decoding-error?$6136$1WS4nL
     g$i/o-decoding-error?$6216$1WS4nL
     (condition-predicate g$7287$6131$1WS4nL))
   (g$7302$6137$1WS4nL
     g$7302$6217$1WS4nL
     (make-record-type-descriptor
       '&i/o-encoding
       g$7271$6123$1WS4nL
       'g$7305$1WS4nL
       '#f
       '#f
       '#((immutable char))))
   (g$7304$6138$1WS4nL g$7304$6218$1WS4nL '#f)
   (g$7303$6139$1WS4nL
     g$7303$6219$1WS4nL
     (make-record-constructor-descriptor
       g$7302$6137$1WS4nL
       g$7272$6125$1WS4nL
       g$7304$6138$1WS4nL))
   (g$7301$6140$1WS4nL
     g$7301$6220$1WS4nL
     (record-predicate g$7302$6137$1WS4nL))
   (g$make-i/o-encoding-error$6141$1WS4nL
     g$make-i/o-encoding-error$6221$1WS4nL
     (record-constructor g$7303$6139$1WS4nL))
   (g$7300$6142$1WS4nL
     g$7300$6222$1WS4nL
     (record-accessor g$7302$6137$1WS4nL '0))
   (g$i/o-encoding-error?$6143$1WS4nL
     g$i/o-encoding-error?$6223$1WS4nL
     (condition-predicate g$7302$6137$1WS4nL))
   (g$i/o-encoding-error-char$6144$1WS4nL
     g$i/o-encoding-error-char$6224$1WS4nL
     (condition-accessor g$7302$6137$1WS4nL g$7300$6142$1WS4nL)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$get-output-string$6225$1WS4nL
     g$get-output-string$6236$1WS4nL
     (case-lambda
       ((g$port$6230$1WS4nL)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6230$1WS4nL))))
   (g$open-output-string$6226$1WS4nL
     g$open-output-string$6237$1WS4nL
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6227$1WS4nL
     g$open-string-output-port$6238$1WS4nL
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6231$1WS4nL)
            (values
              g$p$6231$1WS4nL
              (case-lambda
                (() (g$get-output-string$6225$1WS4nL g$p$6231$1WS4nL))))))
         (g$open-output-string$6226$1WS4nL)))))
   (g$port?$6228$1WS4nL
     g$port?$6239$1WS4nL
     (case-lambda
       ((g$obj$6232$1WS4nL)
        ((case-lambda
           ((g$t$6233$1WS4nL)
            (if g$t$6233$1WS4nL
              g$t$6233$1WS4nL
              (begin '#f (binary-port? g$obj$6232$1WS4nL)))))
         (textual-port? g$obj$6232$1WS4nL)))))
   (g$call-with-string-output-port$6229$1WS4nL
     g$call-with-string-output-port$6240$1WS4nL
     (case-lambda
       ((g$proc$6234$1WS4nL)
        ((case-lambda
           ((g$p$6235$1WS4nL)
            (begin
              (call-with-port g$p$6235$1WS4nL g$proc$6234$1WS4nL)
              (g$get-output-string$6225$1WS4nL g$p$6235$1WS4nL))))
         (g$open-output-string$6226$1WS4nL))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$with-input-from-file$6247$1WS4nL
     g$with-input-from-file$6273$1WS4nL
     (case-lambda
       ((g$filename$6251$1WS4nL g$thunk$6252$1WS4nL)
        ((case-lambda
           ((g$current-input-port$6255$1WS4nL g$t$6256$1WS4nL)
            ((case-lambda
               ((g$swap$6257$1WS4nL)
                (dynamic-wind
                  g$swap$6257$1WS4nL
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6252$1WS4nL)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6257$1WS4nL)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6258$1WS4nL)
                    (begin
                      (g$current-input-port$6255$1WS4nL g$t$6256$1WS4nL)
                      (set! g$t$6256$1WS4nL g$t$6258$1WS4nL))))
                 (g$current-input-port$6255$1WS4nL)))))))
         current-input-port
         (open-input-file g$filename$6251$1WS4nL)))))
   (g$with-output-to-file$6248$1WS4nL
     g$with-output-to-file$6274$1WS4nL
     (case-lambda
       ((g$filename$6259$1WS4nL g$thunk$6260$1WS4nL)
        ((case-lambda
           ((g$current-output-port$6263$1WS4nL g$t$6264$1WS4nL)
            ((case-lambda
               ((g$swap$6265$1WS4nL)
                (dynamic-wind
                  g$swap$6265$1WS4nL
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6260$1WS4nL)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6265$1WS4nL)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6266$1WS4nL)
                    (begin
                      (g$current-output-port$6263$1WS4nL g$t$6264$1WS4nL)
                      (set! g$t$6264$1WS4nL g$t$6266$1WS4nL))))
                 (g$current-output-port$6263$1WS4nL)))))))
         current-output-port
         (open-output-file g$filename$6259$1WS4nL)))))
   (g$call-with-input-file$6249$1WS4nL
     g$call-with-input-file$6275$1WS4nL
     (case-lambda
       ((g$filename$6267$1WS4nL g$proc$6268$1WS4nL)
        ((case-lambda
           ((g$p$6269$1WS4nL)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6268$1WS4nL g$p$6269$1WS4nL)))
              (case-lambda (() (close-input-port g$p$6269$1WS4nL))))))
         (open-input-file g$filename$6267$1WS4nL)))))
   (g$call-with-output-file$6250$1WS4nL
     g$call-with-output-file$6276$1WS4nL
     (case-lambda
       ((g$filename$6270$1WS4nL g$proc$6271$1WS4nL)
        ((case-lambda
           ((g$p$6272$1WS4nL)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6271$1WS4nL g$p$6272$1WS4nL)))
              (case-lambda (() (close-output-port g$p$6272$1WS4nL))))))
         (open-output-file g$filename$6270$1WS4nL))))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7372$6277$1WS4nL
     g$7372$6385$1WS4nL
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7374$6278$1WS4nL g$7374$6386$1WS4nL '#f)
   (g$7373$6279$1WS4nL
     g$7373$6387$1WS4nL
     (make-record-constructor-descriptor
       g$7372$6277$1WS4nL
       '#f
       g$7374$6278$1WS4nL))
   (g$enum?$6280$1WS4nL
     g$enum?$6388$1WS4nL
     (record-predicate g$7372$6277$1WS4nL))
   (g$make-enum$6281$1WS4nL
     g$make-enum$6389$1WS4nL
     (record-constructor g$7373$6279$1WS4nL))
   (g$enum-value$6282$1WS4nL
     g$enum-value$6390$1WS4nL
     (record-accessor g$7372$6277$1WS4nL '0))
   (g$enum-info$6283$1WS4nL
     g$enum-info$6391$1WS4nL
     (record-accessor g$7372$6277$1WS4nL '1))
   (g$7385$6284$1WS4nL
     g$7385$6392$1WS4nL
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7387$6285$1WS4nL g$7387$6393$1WS4nL '#f)
   (g$7386$6286$1WS4nL
     g$7386$6394$1WS4nL
     (make-record-constructor-descriptor
       g$7385$6284$1WS4nL
       '#f
       g$7387$6285$1WS4nL))
   (g$enum-universe?$6287$1WS4nL
     g$enum-universe?$6395$1WS4nL
     (record-predicate g$7385$6284$1WS4nL))
   (g$make-enum-universe$6288$1WS4nL
     g$make-enum-universe$6396$1WS4nL
     (record-constructor g$7386$6286$1WS4nL))
   (g$enum-universe-id$6289$1WS4nL
     g$enum-universe-id$6397$1WS4nL
     (record-accessor g$7385$6284$1WS4nL '0))
   (g$enum-universe-symbols$6290$1WS4nL
     g$enum-universe-symbols$6398$1WS4nL
     (record-accessor g$7385$6284$1WS4nL '1))
   (g$enum-universe-mapping$6291$1WS4nL
     g$enum-universe-mapping$6399$1WS4nL
     (record-accessor g$7385$6284$1WS4nL '2))
   (g$enum-universe-value$6292$1WS4nL
     g$enum-universe-value$6400$1WS4nL
     (record-accessor g$7385$6284$1WS4nL '3))
   (g$enum-type=?$6293$1WS4nL
     g$enum-type=?$6401$1WS4nL
     (case-lambda
       ((g$enumset1$6314$1WS4nL g$enumset2$6315$1WS4nL)
        (eq? (g$enum-universe-id$6289$1WS4nL
               (g$enum-info$6283$1WS4nL g$enumset1$6314$1WS4nL))
             (g$enum-universe-id$6289$1WS4nL
               (g$enum-info$6283$1WS4nL g$enumset2$6315$1WS4nL))))))
   (g$get-symbols$6294$1WS4nL
     g$get-symbols$6402$1WS4nL
     (case-lambda
       ((g$enumset$6316$1WS4nL)
        (g$enum-universe-symbols$6290$1WS4nL
          (g$enum-info$6283$1WS4nL g$enumset$6316$1WS4nL)))))
   (g$get-value$6295$1WS4nL
     g$get-value$6403$1WS4nL
     (case-lambda
       ((g$enumset$6317$1WS4nL g$s$6318$1WS4nL)
        (g$hashtable-ref$5442$1WS4nL
          (g$enum-universe-mapping$6291$1WS4nL
            (g$enum-info$6283$1WS4nL g$enumset$6317$1WS4nL))
          g$s$6318$1WS4nL
          '#f))))
   (g$assert-enum$6296$1WS4nL
     g$assert-enum$6404$1WS4nL
     (case-lambda
       ((g$who$6319$1WS4nL g$enumset$6320$1WS4nL)
        (if (not (g$enum?$6280$1WS4nL g$enumset$6320$1WS4nL))
          (assertion-violation
            g$who$6319$1WS4nL
            '"not an enumeration"
            g$enumset$6320$1WS4nL)
          (void)))))
   (g$make-info$6297$1WS4nL
     g$make-info$6405$1WS4nL
     (case-lambda
       ((g$symbols$6321$1WS4nL)
        ((case-lambda
           ((g$ht$6322$1WS4nL)
            ((letrec ((g$f$6323$1WS4nL
                        (case-lambda
                          ((g$s$6324$1WS4nL g$a$6325$1WS4nL g$mask$6326$1WS4nL)
                           (if (null? g$s$6324$1WS4nL)
                             (values
                               (reverse! g$a$6325$1WS4nL)
                               g$ht$6322$1WS4nL
                               (- g$mask$6326$1WS4nL '1))
                             ((case-lambda
                                ((g$n$6327$1WS4nL)
                                 (if (symbol? g$n$6327$1WS4nL)
                                   (if (g$hashtable-contains?$5445$1WS4nL
                                         g$ht$6322$1WS4nL
                                         g$n$6327$1WS4nL)
                                     (g$f$6323$1WS4nL
                                       (cdr g$s$6324$1WS4nL)
                                       g$a$6325$1WS4nL
                                       g$mask$6326$1WS4nL)
                                     (begin
                                       (g$hashtable-set!$5443$1WS4nL
                                         g$ht$6322$1WS4nL
                                         g$n$6327$1WS4nL
                                         g$mask$6326$1WS4nL)
                                       (g$f$6323$1WS4nL
                                         (cdr g$s$6324$1WS4nL)
                                         (cons g$n$6327$1WS4nL g$a$6325$1WS4nL)
                                         (g$bitwise-arithmetic-shift-left$5984$1WS4nL
                                           g$mask$6326$1WS4nL
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6327$1WS4nL))))
                              (car g$s$6324$1WS4nL)))))))
               g$f$6323$1WS4nL)
             g$symbols$6321$1WS4nL
             '()
             '1)))
         (g$make-eq-hashtable$5439$1WS4nL)))))
   (g$make-name$6298$1WS4nL
     g$make-name$6406$1WS4nL
     (case-lambda
       ((g$symbols$6328$1WS4nL)
        (string->symbol (g$format$6445$1WS4nL '"~a" g$symbols$6328$1WS4nL)))))
   (g$make-enumeration$6299$1WS4nL
     g$make-enumeration$6407$1WS4nL
     (case-lambda
       ((g$symbols$6329$1WS4nL)
        (call-with-values
          (case-lambda (() (g$make-info$6297$1WS4nL g$symbols$6329$1WS4nL)))
          (case-lambda
            ((g$s$6333$1WS4nL g$mapping$6334$1WS4nL g$mask$6335$1WS4nL)
             ((case-lambda
                ((g$mask$6336$1WS4nL g$mapping$6337$1WS4nL g$s$6338$1WS4nL)
                 (g$make-enum$6281$1WS4nL
                   g$mask$6336$1WS4nL
                   (g$make-enum-universe$6288$1WS4nL
                     (g$make-name$6298$1WS4nL g$s$6338$1WS4nL)
                     g$s$6338$1WS4nL
                     g$mapping$6337$1WS4nL
                     g$mask$6336$1WS4nL))))
              g$mask$6335$1WS4nL
              g$mapping$6334$1WS4nL
              g$s$6333$1WS4nL)))))))
   (g$enum-set-universe$6300$1WS4nL
     g$enum-set-universe$6408$1WS4nL
     (case-lambda
       ((g$enumset$6339$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL 'enum-set-universe g$enumset$6339$1WS4nL)
          ((case-lambda
             ((g$ei$6340$1WS4nL)
              (g$make-enum$6281$1WS4nL
                (g$enum-universe-value$6292$1WS4nL g$ei$6340$1WS4nL)
                g$ei$6340$1WS4nL)))
           (g$enum-info$6283$1WS4nL g$enumset$6339$1WS4nL))))))
   (g$enum-set-indexer$6301$1WS4nL
     g$enum-set-indexer$6409$1WS4nL
     (case-lambda
       ((g$enumset$6341$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL 'enum-set-indexer g$enumset$6341$1WS4nL)
          (case-lambda
            ((g$symbol$6342$1WS4nL)
             (begin
               (if (not (symbol? g$symbol$6342$1WS4nL))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6342$1WS4nL)
                 (void))
               ((case-lambda
                  ((g$v$6343$1WS4nL)
                   (if g$v$6343$1WS4nL
                     (- (bitwise-length g$v$6343$1WS4nL) '1)
                     '#f)))
                (g$get-value$6295$1WS4nL
                  g$enumset$6341$1WS4nL
                  g$symbol$6342$1WS4nL)))))))))
   (g$enum-set-constructor$6302$1WS4nL
     g$enum-set-constructor$6410$1WS4nL
     (case-lambda
       ((g$enumset$6344$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL
            'enum-set-constructor
            g$enumset$6344$1WS4nL)
          (case-lambda
            ((g$symbols$6345$1WS4nL)
             ((letrec ((g$f$6346$1WS4nL
                         (case-lambda
                           ((g$v$6347$1WS4nL g$s$6348$1WS4nL)
                            (if (null? g$s$6348$1WS4nL)
                              (g$make-enum$6281$1WS4nL
                                g$v$6347$1WS4nL
                                (g$enum-info$6283$1WS4nL g$enumset$6344$1WS4nL))
                              ((case-lambda
                                 ((g$n$6349$1WS4nL)
                                  (if (symbol? g$n$6349$1WS4nL)
                                    ((case-lambda
                                       ((g$v*$6350$1WS4nL)
                                        (if g$v*$6350$1WS4nL
                                          (g$f$6346$1WS4nL
                                            (bitwise-ior
                                              g$v$6347$1WS4nL
                                              g$v*$6350$1WS4nL)
                                            (cdr g$s$6348$1WS4nL))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6349$1WS4nL))))
                                     (g$get-value$6295$1WS4nL
                                       g$enumset$6344$1WS4nL
                                       g$n$6349$1WS4nL))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6349$1WS4nL))))
                               (car g$s$6348$1WS4nL)))))))
                g$f$6346$1WS4nL)
              '0
              g$symbols$6345$1WS4nL)))))))
   (g$enum-set->list$6303$1WS4nL
     g$enum-set->list$6411$1WS4nL
     (case-lambda
       ((g$enumset$6351$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL 'enum-set->list g$enumset$6351$1WS4nL)
          ((case-lambda
             ((g$value$6352$1WS4nL)
              ((letrec ((g$f$6353$1WS4nL
                          (case-lambda
                            ((g$s$6354$1WS4nL g$l$6355$1WS4nL)
                             (if (null? g$s$6354$1WS4nL)
                               (reverse! g$l$6355$1WS4nL)
                               (if (zero?
                                     (bitwise-and
                                       (g$get-value$6295$1WS4nL
                                         g$enumset$6351$1WS4nL
                                         (car g$s$6354$1WS4nL))
                                       g$value$6352$1WS4nL))
                                 (g$f$6353$1WS4nL
                                   (cdr g$s$6354$1WS4nL)
                                   g$l$6355$1WS4nL)
                                 (g$f$6353$1WS4nL
                                   (cdr g$s$6354$1WS4nL)
                                   (cons
                                     (car g$s$6354$1WS4nL)
                                     g$l$6355$1WS4nL))))))))
                 g$f$6353$1WS4nL)
               (g$get-symbols$6294$1WS4nL g$enumset$6351$1WS4nL)
               '())))
           (g$enum-value$6282$1WS4nL g$enumset$6351$1WS4nL))))))
   (g$enum-set-member?$6304$1WS4nL
     g$enum-set-member?$6412$1WS4nL
     (case-lambda
       ((g$symbol$6356$1WS4nL g$enumset$6357$1WS4nL)
        (begin
          (if (not (symbol? g$symbol$6356$1WS4nL))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6356$1WS4nL)
            (void))
          (g$assert-enum$6296$1WS4nL 'enum-set-member? g$enumset$6357$1WS4nL)
          ((case-lambda
             ((g$v$6358$1WS4nL)
              (if g$v$6358$1WS4nL
                (not (zero?
                       (bitwise-and
                         g$v$6358$1WS4nL
                         (g$enum-value$6282$1WS4nL g$enumset$6357$1WS4nL))))
                '#f)))
           (g$get-value$6295$1WS4nL
             g$enumset$6357$1WS4nL
             g$symbol$6356$1WS4nL))))))
   (g$enum-set-subset?$6305$1WS4nL
     g$enum-set-subset?$6413$1WS4nL
     (case-lambda
       ((g$enumset1$6359$1WS4nL g$enumset2$6360$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL 'enum-set-subset? g$enumset1$6359$1WS4nL)
          (g$assert-enum$6296$1WS4nL 'enum-set-subset? g$enumset2$6360$1WS4nL)
          ((case-lambda
             ((g$v1$6361$1WS4nL g$v2$6362$1WS4nL)
              (if (g$enum-type=?$6293$1WS4nL
                    g$enumset1$6359$1WS4nL
                    g$enumset2$6360$1WS4nL)
                (= (bitwise-and g$v1$6361$1WS4nL g$v2$6362$1WS4nL)
                   g$v1$6361$1WS4nL)
                ((letrec ((g$f$6363$1WS4nL
                            (case-lambda
                              ((g$s$6364$1WS4nL)
                               (if (null? g$s$6364$1WS4nL)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6365$1WS4nL g$v2*$6366$1WS4nL)
                                     (if g$v2*$6366$1WS4nL
                                       ((case-lambda
                                          ((g$has1$6367$1WS4nL
                                             g$has2$6368$1WS4nL)
                                           (if (if g$has1$6367$1WS4nL
                                                 (begin
                                                   '#f
                                                   (not g$has2$6368$1WS4nL))
                                                 '#f)
                                             '#f
                                             (g$f$6363$1WS4nL
                                               (cdr g$s$6364$1WS4nL)))))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v1$6361$1WS4nL
                                                 g$v1*$6365$1WS4nL)))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v2$6362$1WS4nL
                                                 g$v2*$6366$1WS4nL))))
                                       '#f)))
                                  (g$get-value$6295$1WS4nL
                                    g$enumset1$6359$1WS4nL
                                    (car g$s$6364$1WS4nL))
                                  (g$get-value$6295$1WS4nL
                                    g$enumset2$6360$1WS4nL
                                    (car g$s$6364$1WS4nL))))))))
                   g$f$6363$1WS4nL)
                 (g$get-symbols$6294$1WS4nL g$enumset1$6359$1WS4nL)))))
           (g$enum-value$6282$1WS4nL g$enumset1$6359$1WS4nL)
           (g$enum-value$6282$1WS4nL g$enumset2$6360$1WS4nL))))))
   (g$enum-set=?$6306$1WS4nL
     g$enum-set=?$6414$1WS4nL
     (case-lambda
       ((g$enumset1$6369$1WS4nL g$enumset2$6370$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL 'enum-set=? g$enumset1$6369$1WS4nL)
          (g$assert-enum$6296$1WS4nL 'enum-set=? g$enumset2$6370$1WS4nL)
          (if (g$enum-set-subset?$6305$1WS4nL
                g$enumset1$6369$1WS4nL
                g$enumset2$6370$1WS4nL)
            (begin
              '#f
              (g$enum-set-subset?$6305$1WS4nL
                g$enumset2$6370$1WS4nL
                g$enumset1$6369$1WS4nL))
            '#f)))))
   (g$enum-set-union$6307$1WS4nL
     g$enum-set-union$6415$1WS4nL
     (case-lambda
       ((g$enumset1$6371$1WS4nL g$enumset2$6372$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL 'enum-set-union g$enumset1$6371$1WS4nL)
          (g$assert-enum$6296$1WS4nL 'enum-set-union g$enumset2$6372$1WS4nL)
          (if (g$enum-type=?$6293$1WS4nL
                g$enumset1$6371$1WS4nL
                g$enumset2$6372$1WS4nL)
            (g$make-enum$6281$1WS4nL
              (bitwise-ior
                (g$enum-value$6282$1WS4nL g$enumset1$6371$1WS4nL)
                (g$enum-value$6282$1WS4nL g$enumset2$6372$1WS4nL))
              (g$enum-info$6283$1WS4nL g$enumset1$6371$1WS4nL))
            '#f)))))
   (g$enum-set-intersection$6308$1WS4nL
     g$enum-set-intersection$6416$1WS4nL
     (case-lambda
       ((g$enumset1$6373$1WS4nL g$enumset2$6374$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL
            'enum-set-intersection
            g$enumset1$6373$1WS4nL)
          (g$assert-enum$6296$1WS4nL
            'enum-set-intersection
            g$enumset2$6374$1WS4nL)
          (if (g$enum-type=?$6293$1WS4nL
                g$enumset1$6373$1WS4nL
                g$enumset2$6374$1WS4nL)
            (g$make-enum$6281$1WS4nL
              (bitwise-and
                (g$enum-value$6282$1WS4nL g$enumset1$6373$1WS4nL)
                (g$enum-value$6282$1WS4nL g$enumset2$6374$1WS4nL))
              (g$enum-info$6283$1WS4nL g$enumset1$6373$1WS4nL))
            '#f)))))
   (g$enum-set-difference$6309$1WS4nL
     g$enum-set-difference$6417$1WS4nL
     (case-lambda
       ((g$enumset1$6375$1WS4nL g$enumset2$6376$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL
            'enum-set-difference
            g$enumset1$6375$1WS4nL)
          (g$assert-enum$6296$1WS4nL
            'enum-set-difference
            g$enumset2$6376$1WS4nL)
          (if (g$enum-type=?$6293$1WS4nL
                g$enumset1$6375$1WS4nL
                g$enumset2$6376$1WS4nL)
            (g$make-enum$6281$1WS4nL
              (bitwise-and
                (g$enum-value$6282$1WS4nL g$enumset1$6375$1WS4nL)
                (bitwise-not (g$enum-value$6282$1WS4nL g$enumset2$6376$1WS4nL)))
              (g$enum-info$6283$1WS4nL g$enumset1$6375$1WS4nL))
            '#f)))))
   (g$enum-set-complement$6310$1WS4nL
     g$enum-set-complement$6418$1WS4nL
     (case-lambda
       ((g$enumset$6377$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL 'enum-set-complement g$enumset$6377$1WS4nL)
          (g$make-enum$6281$1WS4nL
            (bitwise-not (g$enum-value$6282$1WS4nL g$enumset$6377$1WS4nL))
            (g$enum-info$6283$1WS4nL g$enumset$6377$1WS4nL))))))
   (g$enum-set-projection$6311$1WS4nL
     g$enum-set-projection$6419$1WS4nL
     (case-lambda
       ((g$enumset1$6378$1WS4nL g$enumset2$6379$1WS4nL)
        (begin
          (g$assert-enum$6296$1WS4nL
            'enum-set-projection
            g$enumset1$6378$1WS4nL)
          (g$assert-enum$6296$1WS4nL
            'enum-set-projection
            g$enumset2$6379$1WS4nL)
          ((case-lambda
             ((g$v1$6380$1WS4nL)
              ((letrec ((g$f$6381$1WS4nL
                          (case-lambda
                            ((g$s$6382$1WS4nL g$v$6383$1WS4nL)
                             (if (null? g$s$6382$1WS4nL)
                               (g$make-enum$6281$1WS4nL
                                 g$v$6383$1WS4nL
                                 (g$enum-info$6283$1WS4nL
                                   g$enumset2$6379$1WS4nL))
                               (if (zero?
                                     (bitwise-and
                                       g$v1$6380$1WS4nL
                                       (g$get-value$6295$1WS4nL
                                         g$enumset1$6378$1WS4nL
                                         (car g$s$6382$1WS4nL))))
                                 (g$f$6381$1WS4nL
                                   (cdr g$s$6382$1WS4nL)
                                   g$v$6383$1WS4nL)
                                 ((case-lambda
                                    ((g$v2$6384$1WS4nL)
                                     (if g$v2$6384$1WS4nL
                                       (g$f$6381$1WS4nL
                                         (cdr g$s$6382$1WS4nL)
                                         (bitwise-ior
                                           g$v$6383$1WS4nL
                                           g$v2$6384$1WS4nL))
                                       (g$f$6381$1WS4nL
                                         (cdr g$s$6382$1WS4nL)
                                         g$v$6383$1WS4nL))))
                                  (g$get-value$6295$1WS4nL
                                    g$enumset2$6379$1WS4nL
                                    (car g$s$6382$1WS4nL)))))))))
                 g$f$6381$1WS4nL)
               (g$get-symbols$6294$1WS4nL g$enumset1$6378$1WS4nL)
               '0)))
           (g$enum-value$6282$1WS4nL g$enumset1$6378$1WS4nL)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6312$1WS4nL g$p$6313$1WS4nL)
       (g$fprintf$6444$1WS4nL
         g$p$6313$1WS4nL
         '"#[enum-set ~a]"
         (g$enum-set->list$6303$1WS4nL g$x$6312$1WS4nL))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6420$1WS4nL
     g$dofmt$6442$1WS4nL
     (case-lambda
       ((g$p$6424$1WS4nL g$cntl$6425$1WS4nL g$args$6426$1WS4nL)
        ((case-lambda
           ((g$nmax$6427$1WS4nL)
            ((letrec ((g$loop$6428$1WS4nL
                        (case-lambda
                          ((g$n$6429$1WS4nL g$a$6430$1WS4nL)
                           (if (fx<=? g$n$6429$1WS4nL g$nmax$6427$1WS4nL)
                             ((case-lambda
                                ((g$c$6431$1WS4nL)
                                 (if (if (g$char=?$5199$1WS4nL
                                           g$c$6431$1WS4nL
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6429$1WS4nL
                                           g$nmax$6427$1WS4nL))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6432$1WS4nL)
                                       (if (g$memv$4996$1WS4nL
                                             g$t$6432$1WS4nL
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6430$1WS4nL)
                                             g$p$6424$1WS4nL)
                                           (g$loop$6428$1WS4nL
                                             (fx+ g$n$6429$1WS4nL '2)
                                             (cdr g$a$6430$1WS4nL)))
                                         (if (g$memv$4996$1WS4nL
                                               g$t$6432$1WS4nL
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6430$1WS4nL)
                                               g$p$6424$1WS4nL)
                                             (g$loop$6428$1WS4nL
                                               (fx+ g$n$6429$1WS4nL '2)
                                               (cdr g$a$6430$1WS4nL)))
                                           (if (g$memv$4996$1WS4nL
                                                 g$t$6432$1WS4nL
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6430$1WS4nL)
                                                   '2)
                                                 g$p$6424$1WS4nL)
                                               (g$loop$6428$1WS4nL
                                                 (fx+ g$n$6429$1WS4nL '2)
                                                 (cdr g$a$6430$1WS4nL)))
                                             (if (g$memv$4996$1WS4nL
                                                   g$t$6432$1WS4nL
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6430$1WS4nL)
                                                     '8)
                                                   g$p$6424$1WS4nL)
                                                 (g$loop$6428$1WS4nL
                                                   (fx+ g$n$6429$1WS4nL '2)
                                                   (cdr g$a$6430$1WS4nL)))
                                               (if (g$memv$4996$1WS4nL
                                                     g$t$6432$1WS4nL
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6430$1WS4nL)
                                                       '16)
                                                     g$p$6424$1WS4nL)
                                                   (g$loop$6428$1WS4nL
                                                     (fx+ g$n$6429$1WS4nL '2)
                                                     (cdr g$a$6430$1WS4nL)))
                                                 (if (g$memv$4996$1WS4nL
                                                       g$t$6432$1WS4nL
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6430$1WS4nL)
                                                         '10)
                                                       g$p$6424$1WS4nL)
                                                     (g$loop$6428$1WS4nL
                                                       (fx+ g$n$6429$1WS4nL '2)
                                                       (cdr g$a$6430$1WS4nL)))
                                                   (if (g$memv$4996$1WS4nL
                                                         g$t$6432$1WS4nL
                                                         '(#\~))
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6424$1WS4nL)
                                                       (g$loop$6428$1WS4nL
                                                         (fx+ g$n$6429$1WS4nL
                                                              '2)
                                                         g$a$6430$1WS4nL))
                                                     (begin
                                                       (write-char
                                                         g$c$6431$1WS4nL
                                                         g$p$6424$1WS4nL)
                                                       (g$loop$6428$1WS4nL
                                                         (fx+ g$n$6429$1WS4nL
                                                              '1)
                                                         g$a$6430$1WS4nL)))))))))))
                                    (string-ref
                                      g$cntl$6425$1WS4nL
                                      (fx+ g$n$6429$1WS4nL '1)))
                                   (begin
                                     (write-char
                                       g$c$6431$1WS4nL
                                       g$p$6424$1WS4nL)
                                     (g$loop$6428$1WS4nL
                                       (fx+ g$n$6429$1WS4nL '1)
                                       g$a$6430$1WS4nL)))))
                              (string-ref g$cntl$6425$1WS4nL g$n$6429$1WS4nL))
                             (void))))))
               g$loop$6428$1WS4nL)
             '0
             g$args$6426$1WS4nL)))
         (fx- (string-length g$cntl$6425$1WS4nL) '1)))))
   (g$printf$6421$1WS4nL
     g$printf$6443$1WS4nL
     (case-lambda
       ((g$control$6433$1WS4nL . g$args$6434$1WS4nL)
        (g$dofmt$6420$1WS4nL
          (current-output-port)
          g$control$6433$1WS4nL
          g$args$6434$1WS4nL))))
   (g$fprintf$6422$1WS4nL
     g$fprintf$6444$1WS4nL
     (case-lambda
       ((g$p$6435$1WS4nL g$control$6436$1WS4nL . g$args$6437$1WS4nL)
        (g$dofmt$6420$1WS4nL
          g$p$6435$1WS4nL
          g$control$6436$1WS4nL
          g$args$6437$1WS4nL))))
   (g$format$6423$1WS4nL
     g$format$6445$1WS4nL
     (case-lambda
       ((g$control$6438$1WS4nL . g$args$6439$1WS4nL)
        (call-with-values
          g$open-string-output-port$6238$1WS4nL
          (case-lambda
            ((g$p$6440$1WS4nL g$c$6441$1WS4nL)
             (begin
               (g$dofmt$6420$1WS4nL
                 g$p$6440$1WS4nL
                 g$control$6438$1WS4nL
                 g$args$6439$1WS4nL)
               (g$c$6441$1WS4nL)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6446$1WS4nL
     g$make-traced-macro$6449$1WS4nL
     (case-lambda
       ((g$name$6447$1WS4nL g$x$6448$1WS4nL)
        (if (procedure? g$x$6448$1WS4nL)
          (make-traced-procedure
            g$name$6447$1WS4nL
            g$x$6448$1WS4nL
            g$syntax->datum$11147$1WS4nL)
          (if (g$variable-transformer?$10970$1WS4nL g$x$6448$1WS4nL)
            (g$make-variable-transformer$10969$1WS4nL
              (make-traced-procedure
                g$name$6447$1WS4nL
                (g$variable-transformer-procedure$10971$1WS4nL g$x$6448$1WS4nL)
                g$syntax->datum$11147$1WS4nL))
            g$x$6448$1WS4nL))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$read-library-source-file$6450$1WS4nL
     g$read-library-source-file$6529$1WS4nL
     (case-lambda
       ((g$file-name$6521$1WS4nL)
        (g$with-input-from-file$6273$1WS4nL
          g$file-name$6521$1WS4nL
          read-annotated))))
   (g$make-parameter$6451$1WS4nL
     g$make-parameter$6530$1WS4nL
     (case-lambda
       ((g$x$6522$1WS4nL)
        (g$make-parameter$6451$1WS4nL
          g$x$6522$1WS4nL
          (case-lambda ((g$x$6523$1WS4nL) g$x$6523$1WS4nL))))
       ((g$x$6524$1WS4nL g$fender$6525$1WS4nL)
        (begin
          (if (not (procedure? g$fender$6525$1WS4nL))
            (g$assertion-error$11140$1WS4nL
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(51,8) - (51,36)"))
            (void))
          ((case-lambda
             ((g$x$6526$1WS4nL)
              (case-lambda
                (() g$x$6526$1WS4nL)
                ((g$v$6527$1WS4nL)
                 (set! g$x$6526$1WS4nL
                   (g$fender$6525$1WS4nL g$v$6527$1WS4nL))))))
           (g$fender$6525$1WS4nL g$x$6524$1WS4nL))))))
   (g$file-options-constructor$6519$1WS4nL
     g$file-options-constructor$6531$1WS4nL
     (g$make-parameter$6451$1WS4nL '#f))
   (g$file-options-spec$6520$1WS4nL
     g$file-options-spec$6532$1WS4nL
     (case-lambda
       ((g$x$6528$1WS4nL)
        ((g$file-options-constructor$6519$1WS4nL) g$x$6528$1WS4nL)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$6728$1WS4nL
     g$current-primitive-locations$6773$1WS4nL
     (g$make-parameter$6530$1WS4nL
       (case-lambda ((g$x$6734$1WS4nL) '#f))
       (case-lambda
         ((g$p$6735$1WS4nL)
          (begin
            (if (not (procedure? g$p$6735$1WS4nL))
              (g$assertion-error$11140$1WS4nL
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$6735$1WS4nL)))))
   (g$mutable?$6729$1WS4nL
     g$mutable?$6774$1WS4nL
     (case-lambda
       ((g$x$6736$1WS4nL)
        (letrec* ((g$simple?$6737$1WS4nL
                    (case-lambda
                      ((g$x$6738$1WS4nL)
                       ((case-lambda
                          ((g$t$6739$1WS4nL)
                           (if g$t$6739$1WS4nL
                             g$t$6739$1WS4nL
                             ((case-lambda
                                ((g$t$6740$1WS4nL)
                                 (if g$t$6740$1WS4nL
                                   g$t$6740$1WS4nL
                                   ((case-lambda
                                      ((g$t$6741$1WS4nL)
                                       (if g$t$6741$1WS4nL
                                         g$t$6741$1WS4nL
                                         ((case-lambda
                                            ((g$t$6742$1WS4nL)
                                             (if g$t$6742$1WS4nL
                                               g$t$6742$1WS4nL
                                               ((case-lambda
                                                  ((g$t$6743$1WS4nL)
                                                   (if g$t$6743$1WS4nL
                                                     g$t$6743$1WS4nL
                                                     ((case-lambda
                                                        ((g$t$6744$1WS4nL)
                                                         (if g$t$6744$1WS4nL
                                                           g$t$6744$1WS4nL
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$6738$1WS4nL)))))
                                                      (bytevector?
                                                        g$x$6738$1WS4nL)))))
                                                (string? g$x$6738$1WS4nL)))))
                                          (boolean? g$x$6738$1WS4nL)))))
                                    (symbol? g$x$6738$1WS4nL)))))
                              (char? g$x$6738$1WS4nL)))))
                        (null? g$x$6738$1WS4nL))))))
          (not (g$simple?$6737$1WS4nL g$x$6736$1WS4nL))))))
   (g$rewriter$6730$1WS4nL
     g$rewriter$6775$1WS4nL
     (case-lambda
       ((g$quote-hack?$6745$1WS4nL)
        (letrec* ((g$f$6746$1WS4nL
                    (case-lambda
                      ((g$x$6747$1WS4nL)
                       (if (pair? g$x$6747$1WS4nL)
                         ((case-lambda
                            ((g$t$6748$1WS4nL)
                             (if (g$memv$4996$1WS4nL g$t$6748$1WS4nL '(quote))
                               (if (if g$quote-hack?$6745$1WS4nL
                                     (begin
                                       '#f
                                       (g$mutable?$6729$1WS4nL
                                         (g$cadr$5165$1WS4nL g$x$6747$1WS4nL)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$6749$1WS4nL)
                                     (begin
                                       (set-symbol-value!
                                         g$g$6749$1WS4nL
                                         (g$cadr$5165$1WS4nL g$x$6747$1WS4nL))
                                       g$g$6749$1WS4nL)))
                                  (gensym))
                                 g$x$6747$1WS4nL)
                               (if (g$memv$4996$1WS4nL
                                     g$t$6748$1WS4nL
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (map (case-lambda
                                          ((g$x$6750$1WS4nL)
                                           (cons
                                             (car g$x$6750$1WS4nL)
                                             (map g$f$6746$1WS4nL
                                                  (cdr g$x$6750$1WS4nL)))))
                                        (cdr g$x$6747$1WS4nL)))
                                 (if (g$memv$4996$1WS4nL
                                       g$t$6748$1WS4nL
                                       '(lambda))
                                   (g$cons*$5003$1WS4nL
                                     'lambda
                                     (g$cadr$5165$1WS4nL g$x$6747$1WS4nL)
                                     (map g$f$6746$1WS4nL
                                          (g$cddr$5167$1WS4nL g$x$6747$1WS4nL)))
                                   (if (g$memv$4996$1WS4nL
                                         g$t$6748$1WS4nL
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$6751$1WS4nL
                                           g$body*$6752$1WS4nL)
                                         ((case-lambda
                                            ((g$lhs*$6753$1WS4nL
                                               g$rhs*$6754$1WS4nL)
                                             (g$cons*$5003$1WS4nL
                                               'letrec
                                               (map list
                                                    g$lhs*$6753$1WS4nL
                                                    (map g$f$6746$1WS4nL
                                                         g$rhs*$6754$1WS4nL))
                                               (map g$f$6746$1WS4nL
                                                    g$body*$6752$1WS4nL))))
                                          (map car g$bindings$6751$1WS4nL)
                                          (map g$cadr$5165$1WS4nL
                                               g$bindings$6751$1WS4nL))))
                                      (g$cadr$5165$1WS4nL g$x$6747$1WS4nL)
                                      (g$cddr$5167$1WS4nL g$x$6747$1WS4nL))
                                     (if (g$memv$4996$1WS4nL
                                           g$t$6748$1WS4nL
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$6755$1WS4nL
                                             g$body*$6756$1WS4nL)
                                           ((case-lambda
                                              ((g$lhs*$6757$1WS4nL
                                                 g$rhs*$6758$1WS4nL)
                                               (g$cons*$5003$1WS4nL
                                                 'letrec*
                                                 (map list
                                                      g$lhs*$6757$1WS4nL
                                                      (map g$f$6746$1WS4nL
                                                           g$rhs*$6758$1WS4nL))
                                                 (map g$f$6746$1WS4nL
                                                      g$body*$6756$1WS4nL))))
                                            (map car g$bindings$6755$1WS4nL)
                                            (map g$cadr$5165$1WS4nL
                                                 g$bindings$6755$1WS4nL))))
                                        (g$cadr$5165$1WS4nL g$x$6747$1WS4nL)
                                        (g$cddr$5167$1WS4nL g$x$6747$1WS4nL))
                                       (if (g$memv$4996$1WS4nL
                                             g$t$6748$1WS4nL
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$6759$1WS4nL
                                               g$x$6760$1WS4nL)
                                             ((case-lambda
                                                ((g$bindings$6761$1WS4nL
                                                   g$body*$6762$1WS4nL)
                                                 ((case-lambda
                                                    ((g$lhs*$6763$1WS4nL
                                                       g$lhs**$6764$1WS4nL
                                                       g$rhs*$6765$1WS4nL)
                                                     (g$cons*$5003$1WS4nL
                                                       'library-letrec*
                                                       g$name$6759$1WS4nL
                                                       (map list
                                                            g$lhs*$6763$1WS4nL
                                                            g$lhs**$6764$1WS4nL
                                                            (map g$f$6746$1WS4nL
                                                                 g$rhs*$6765$1WS4nL))
                                                       (map g$f$6746$1WS4nL
                                                            g$body*$6762$1WS4nL))))
                                                  (map car
                                                       g$bindings$6761$1WS4nL)
                                                  (map g$cadr$5165$1WS4nL
                                                       g$bindings$6761$1WS4nL)
                                                  (map g$caddr$5171$1WS4nL
                                                       g$bindings$6761$1WS4nL))))
                                              (g$cadr$5165$1WS4nL
                                                g$x$6760$1WS4nL)
                                              (g$cddr$5167$1WS4nL
                                                g$x$6760$1WS4nL))))
                                          (g$cadr$5165$1WS4nL g$x$6747$1WS4nL)
                                          (cdr g$x$6747$1WS4nL))
                                         (if (g$memv$4996$1WS4nL
                                               g$t$6748$1WS4nL
                                               '(begin))
                                           (cons
                                             'begin
                                             (map g$f$6746$1WS4nL
                                                  (cdr g$x$6747$1WS4nL)))
                                           (if (g$memv$4996$1WS4nL
                                                 g$t$6748$1WS4nL
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5165$1WS4nL
                                                 g$x$6747$1WS4nL)
                                               (g$f$6746$1WS4nL
                                                 (g$caddr$5171$1WS4nL
                                                   g$x$6747$1WS4nL)))
                                             (if (g$memv$4996$1WS4nL
                                                   g$t$6748$1WS4nL
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$6766$1WS4nL)
                                                   ((case-lambda
                                                      ((g$t$6767$1WS4nL)
                                                       (if g$t$6767$1WS4nL
                                                         ((case-lambda
                                                            ((g$loc$6768$1WS4nL)
                                                             g$loc$6768$1WS4nL))
                                                          g$t$6767$1WS4nL)
                                                         g$op$6766$1WS4nL)))
                                                    ((g$current-primitive-locations$6728$1WS4nL)
                                                     g$op$6766$1WS4nL))))
                                                (g$cadr$5165$1WS4nL
                                                  g$x$6747$1WS4nL))
                                               (if (g$memv$4996$1WS4nL
                                                     g$t$6748$1WS4nL
                                                     '(define))
                                                 g$x$6747$1WS4nL
                                                 (if (list? g$x$6747$1WS4nL)
                                                   (map g$f$6746$1WS4nL
                                                        g$x$6747$1WS4nL)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$6747$1WS4nL
                                                     (list?
                                                       g$x$6747$1WS4nL)))))))))))))))
                          (car g$x$6747$1WS4nL))
                         g$x$6747$1WS4nL)))))
          g$f$6746$1WS4nL))))
   (g$expanded->core$6731$1WS4nL
     g$expanded->core$6776$1WS4nL
     (case-lambda
       ((g$x$6769$1WS4nL) ((g$rewriter$6730$1WS4nL '#t) g$x$6769$1WS4nL))))
   (g$compile-core-expr$6732$1WS4nL
     g$compile-core-expr$6777$1WS4nL
     (case-lambda
       ((g$x$6770$1WS4nL) ((g$rewriter$6730$1WS4nL '#f) g$x$6770$1WS4nL))))
   (g$compile-core-expr-to-port$6733$1WS4nL
     g$compile-core-expr-to-port$6778$1WS4nL
     (case-lambda
       ((g$x$6771$1WS4nL g$p$6772$1WS4nL)
        (g$pretty-print$6727$1WS4nL
          ((g$rewriter$6730$1WS4nL '#f) g$x$6771$1WS4nL)
          g$p$6772$1WS4nL)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$6817$1WS4nL
     g$make-collection$7021$1WS4nL
     (case-lambda
       (()
        ((case-lambda
           ((g$set$6878$1WS4nL)
            (letrec* ((g$set-cons$6879$1WS4nL
                        (case-lambda
                          ((g$x$6881$1WS4nL g$ls$6882$1WS4nL)
                           (if (g$memq$4995$1WS4nL
                                 g$x$6881$1WS4nL
                                 g$ls$6882$1WS4nL)
                             g$ls$6882$1WS4nL
                             (cons g$x$6881$1WS4nL g$ls$6882$1WS4nL))))))
              (case-lambda
                (() g$set$6878$1WS4nL)
                ((g$x$6880$1WS4nL)
                 (set! g$set$6878$1WS4nL
                   (g$set-cons$6879$1WS4nL
                     g$x$6880$1WS4nL
                     g$set$6878$1WS4nL)))))))
         '()))))
   (g$current-library-collection$6818$1WS4nL
     g$current-library-collection$7022$1WS4nL
     (g$make-parameter$6530$1WS4nL
       (g$make-collection$6817$1WS4nL)
       (case-lambda
         ((g$x$6883$1WS4nL)
          (begin
            (if (not (procedure? g$x$6883$1WS4nL))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$6883$1WS4nL)
              (void))
            g$x$6883$1WS4nL)))))
   (g$7905$6819$1WS4nL
     g$7905$7023$1WS4nL
     (make-record-type-descriptor
       'library
       '#f
       'g$7908$1WS4nL
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7907$6820$1WS4nL g$7907$7024$1WS4nL '#f)
   (g$7906$6821$1WS4nL
     g$7906$7025$1WS4nL
     (make-record-constructor-descriptor
       g$7905$6819$1WS4nL
       '#f
       g$7907$6820$1WS4nL))
   (g$library?$6822$1WS4nL
     g$library?$7026$1WS4nL
     (record-predicate g$7905$6819$1WS4nL))
   (g$make-library$6823$1WS4nL
     g$make-library$7027$1WS4nL
     (record-constructor g$7906$6821$1WS4nL))
   (g$library-id$6824$1WS4nL
     g$library-id$7028$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '0))
   (g$library-name$6825$1WS4nL
     g$library-name$7029$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '1))
   (g$library-version$6826$1WS4nL
     g$library-version$7030$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '2))
   (g$library-imp*$6827$1WS4nL
     g$library-imp*$7031$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '3))
   (g$library-vis*$6828$1WS4nL
     g$library-vis*$7032$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '4))
   (g$library-inv*$6829$1WS4nL
     g$library-inv*$7033$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '5))
   (g$library-subst$6830$1WS4nL
     g$library-subst$7034$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '6))
   (g$library-env$6831$1WS4nL
     g$library-env$7035$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '7))
   (g$library-visit-state$6832$1WS4nL
     g$library-visit-state$7036$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '8))
   (g$library-invoke-state$6833$1WS4nL
     g$library-invoke-state$7037$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '9))
   (g$library-visit-code$6834$1WS4nL
     g$library-visit-code$7038$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '10))
   (g$library-invoke-code$6835$1WS4nL
     g$library-invoke-code$7039$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '11))
   (g$library-visible?$6836$1WS4nL
     g$library-visible?$7040$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '12))
   (g$library-source-file-name$6837$1WS4nL
     g$library-source-file-name$7041$1WS4nL
     (record-accessor g$7905$6819$1WS4nL '13))
   (g$set-library-id!$6838$1WS4nL
     g$set-library-id!$7042$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '0))
   (g$set-library-name!$6839$1WS4nL
     g$set-library-name!$7043$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '1))
   (g$set-library-version!$6840$1WS4nL
     g$set-library-version!$7044$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '2))
   (g$set-library-imp*!$6841$1WS4nL
     g$set-library-imp*!$7045$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '3))
   (g$set-library-vis*!$6842$1WS4nL
     g$set-library-vis*!$7046$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '4))
   (g$set-library-inv*!$6843$1WS4nL
     g$set-library-inv*!$7047$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '5))
   (g$set-library-subst!$6844$1WS4nL
     g$set-library-subst!$7048$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '6))
   (g$set-library-env!$6845$1WS4nL
     g$set-library-env!$7049$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '7))
   (g$set-library-visit-state!$6846$1WS4nL
     g$set-library-visit-state!$7050$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '8))
   (g$set-library-invoke-state!$6847$1WS4nL
     g$set-library-invoke-state!$7051$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '9))
   (g$set-library-visit-code!$6848$1WS4nL
     g$set-library-visit-code!$7052$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '10))
   (g$set-library-invoke-code!$6849$1WS4nL
     g$set-library-invoke-code!$7053$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '11))
   (g$set-library-visible?!$6850$1WS4nL
     g$set-library-visible?!$7054$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '12))
   (g$set-library-source-file-name!$6851$1WS4nL
     g$set-library-source-file-name!$7055$1WS4nL
     (record-mutator g$7905$6819$1WS4nL '13))
   (g$rp$6852$1WS4nL
     g$rp$7056$1WS4nL
     (make-record-printer
       'library
       (case-lambda
         ((g$x$6884$1WS4nL g$p$6885$1WS4nL)
          (begin
            (if (not (g$library?$6822$1WS4nL g$x$6884$1WS4nL))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6445$1WS4nL
                '"#<library ~s>"
                (if (null? (g$library-version$6826$1WS4nL g$x$6884$1WS4nL))
                  (g$library-name$6825$1WS4nL g$x$6884$1WS4nL)
                  (append
                    (g$library-name$6825$1WS4nL g$x$6884$1WS4nL)
                    (list (g$library-version$6826$1WS4nL g$x$6884$1WS4nL)))))
              g$p$6885$1WS4nL))))))
   (g$find-dependencies$6853$1WS4nL
     g$find-dependencies$7057$1WS4nL
     (case-lambda
       ((g$ls$6886$1WS4nL)
        (if (null? g$ls$6886$1WS4nL)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$6854$1WS4nL
     g$find-library-by$7058$1WS4nL
     (case-lambda
       ((g$pred$6887$1WS4nL)
        ((letrec ((g$f$6888$1WS4nL
                    (case-lambda
                      ((g$ls$6889$1WS4nL)
                       (if (null? g$ls$6889$1WS4nL)
                         '#f
                         (if (g$pred$6887$1WS4nL (car g$ls$6889$1WS4nL))
                           (car g$ls$6889$1WS4nL)
                           (g$f$6888$1WS4nL (cdr g$ls$6889$1WS4nL))))))))
           g$f$6888$1WS4nL)
         ((g$current-library-collection$6818$1WS4nL))))))
   (g$library-path$6855$1WS4nL
     g$library-path$7059$1WS4nL
     (g$make-parameter$6530$1WS4nL
       '(".")
       (case-lambda
         ((g$x$6890$1WS4nL)
          (if (if (list? g$x$6890$1WS4nL)
                (begin '#f (g$for-all$5001$1WS4nL string? g$x$6890$1WS4nL))
                '#f)
            (map (case-lambda ((g$x$6891$1WS4nL) g$x$6891$1WS4nL))
                 g$x$6890$1WS4nL)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$6890$1WS4nL))))))
   (g$library-extensions$6856$1WS4nL
     g$library-extensions$7060$1WS4nL
     (g$make-parameter$6530$1WS4nL
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$6892$1WS4nL)
          (if (if (list? g$x$6892$1WS4nL)
                (begin '#f (g$for-all$5001$1WS4nL string? g$x$6892$1WS4nL))
                '#f)
            (map (case-lambda ((g$x$6893$1WS4nL) g$x$6893$1WS4nL))
                 g$x$6892$1WS4nL)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$6892$1WS4nL))))))
   (g$library-name->file-name$6857$1WS4nL
     g$library-name->file-name$7061$1WS4nL
     (case-lambda
       ((g$x$6894$1WS4nL)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6238$1WS4nL)))
          (case-lambda
            ((g$p$6897$1WS4nL g$extract$6898$1WS4nL)
             ((case-lambda
                ((g$extract$6899$1WS4nL g$p$6900$1WS4nL)
                 (letrec* ((g$display-hex$6901$1WS4nL
                             (case-lambda
                               ((g$n$6909$1WS4nL)
                                (if (<= '0 g$n$6909$1WS4nL '9)
                                  (display g$n$6909$1WS4nL g$p$6900$1WS4nL)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$6909$1WS4nL '10)))
                                    g$p$6900$1WS4nL))))))
                   (begin
                     ((letrec ((g$f$6902$1WS4nL
                                 (case-lambda
                                   ((g$ls$6903$1WS4nL)
                                    (if (not (null? g$ls$6903$1WS4nL))
                                      (begin
                                        (display '"/" g$p$6900$1WS4nL)
                                        (for-each
                                          (case-lambda
                                            ((g$c$6904$1WS4nL)
                                             (if ((case-lambda
                                                    ((g$t$6905$1WS4nL)
                                                     (if g$t$6905$1WS4nL
                                                       g$t$6905$1WS4nL
                                                       ((case-lambda
                                                          ((g$t$6906$1WS4nL)
                                                           (if g$t$6906$1WS4nL
                                                             g$t$6906$1WS4nL
                                                             ((case-lambda
                                                                ((g$t$6907$1WS4nL)
                                                                 (if g$t$6907$1WS4nL
                                                                   g$t$6907$1WS4nL
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$4996$1WS4nL
                                                                       g$c$6904$1WS4nL
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5202$1WS4nL
                                                                '#\0
                                                                g$c$6904$1WS4nL
                                                                '#\9)))))
                                                        (g$char<=?$5202$1WS4nL
                                                          '#\A
                                                          g$c$6904$1WS4nL
                                                          '#\Z)))))
                                                  (g$char<=?$5202$1WS4nL
                                                    '#\a
                                                    g$c$6904$1WS4nL
                                                    '#\z))
                                               (display
                                                 g$c$6904$1WS4nL
                                                 g$p$6900$1WS4nL)
                                               (begin
                                                 (display '"%" g$p$6900$1WS4nL)
                                                 ((case-lambda
                                                    ((g$n$6908$1WS4nL)
                                                     (begin
                                                       (g$display-hex$6901$1WS4nL
                                                         (g$quotient$5817$1WS4nL
                                                           g$n$6908$1WS4nL
                                                           '16))
                                                       (g$display-hex$6901$1WS4nL
                                                         (g$remainder$5818$1WS4nL
                                                           g$n$6908$1WS4nL
                                                           '16)))))
                                                  (char->integer
                                                    g$c$6904$1WS4nL))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$6903$1WS4nL))))
                                        (g$f$6902$1WS4nL
                                          (cdr g$ls$6903$1WS4nL)))
                                      (void))))))
                        g$f$6902$1WS4nL)
                      g$x$6894$1WS4nL)
                     (g$extract$6899$1WS4nL)))))
              g$extract$6898$1WS4nL
              g$p$6897$1WS4nL)))))))
   (g$file-locator$6858$1WS4nL
     g$file-locator$7062$1WS4nL
     (g$make-parameter$6530$1WS4nL
       (case-lambda
         ((g$x$6910$1WS4nL)
          ((case-lambda
             ((g$str$6911$1WS4nL)
              ((letrec ((g$f$6912$1WS4nL
                          (case-lambda
                            ((g$ls$6913$1WS4nL
                               g$exts$6914$1WS4nL
                               g$failed-list$6915$1WS4nL)
                             (if (null? g$ls$6913$1WS4nL)
                               ((case-lambda
                                  (()
                                   (letrec* ((g$8010$6916$1WS4nL
                                               (make-record-type-descriptor
                                                 '&library-resolution
                                                 &condition-rtd
                                                 'g$8013$1WS4nL
                                                 '#f
                                                 '#f
                                                 '#((immutable library)
                                                    (immutable files))))
                                             (g$8012$6917$1WS4nL '#f)
                                             (g$8011$6918$1WS4nL
                                               (make-record-constructor-descriptor
                                                 g$8010$6916$1WS4nL
                                                 &condition-rcd
                                                 g$8012$6917$1WS4nL))
                                             (g$8009$6919$1WS4nL
                                               (record-predicate
                                                 g$8010$6916$1WS4nL))
                                             (g$make-library-resolution-condition$6920$1WS4nL
                                               (record-constructor
                                                 g$8011$6918$1WS4nL))
                                             (g$8007$6921$1WS4nL
                                               (record-accessor
                                                 g$8010$6916$1WS4nL
                                                 '0))
                                             (g$8008$6922$1WS4nL
                                               (record-accessor
                                                 g$8010$6916$1WS4nL
                                                 '1))
                                             (g$library-resolution-condition?$6923$1WS4nL
                                               (condition-predicate
                                                 g$8010$6916$1WS4nL))
                                             (g$condition-library$6924$1WS4nL
                                               (condition-accessor
                                                 g$8010$6916$1WS4nL
                                                 g$8007$6921$1WS4nL))
                                             (g$condition-files$6925$1WS4nL
                                               (condition-accessor
                                                 g$8010$6916$1WS4nL
                                                 g$8008$6922$1WS4nL)))
                                     (raise
                                       (condition
                                         (g$make-error$5727$1WS4nL)
                                         (g$make-who-condition$5753$1WS4nL
                                           'expander)
                                         (g$make-message-condition$5707$1WS4nL
                                           '"cannot locate library in library-path")
                                         (g$make-library-resolution-condition$6920$1WS4nL
                                           g$x$6910$1WS4nL
                                           (reverse
                                             g$failed-list$6915$1WS4nL))))))))
                               (if (null? g$exts$6914$1WS4nL)
                                 (g$f$6912$1WS4nL
                                   (cdr g$ls$6913$1WS4nL)
                                   (g$library-extensions$6856$1WS4nL)
                                   g$failed-list$6915$1WS4nL)
                                 ((case-lambda
                                    ((g$name$6926$1WS4nL)
                                     (if (g$file-exists?$5458$1WS4nL
                                           g$name$6926$1WS4nL)
                                       g$name$6926$1WS4nL
                                       (g$f$6912$1WS4nL
                                         g$ls$6913$1WS4nL
                                         (cdr g$exts$6914$1WS4nL)
                                         (cons
                                           g$name$6926$1WS4nL
                                           g$failed-list$6915$1WS4nL)))))
                                  (string-append
                                    (car g$ls$6913$1WS4nL)
                                    g$str$6911$1WS4nL
                                    (car g$exts$6914$1WS4nL)))))))))
                 g$f$6912$1WS4nL)
               (g$library-path$6855$1WS4nL)
               (g$library-extensions$6856$1WS4nL)
               '())))
           (g$library-name->file-name$6857$1WS4nL g$x$6910$1WS4nL))))
       (case-lambda
         ((g$f$6927$1WS4nL)
          (if (procedure? g$f$6927$1WS4nL)
            g$f$6927$1WS4nL
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$6927$1WS4nL))))))
   (g$serialize-all$6859$1WS4nL
     g$serialize-all$7063$1WS4nL
     (case-lambda
       ((g$serialize$6928$1WS4nL g$compile$6929$1WS4nL)
        (letrec* ((g$library-desc$6930$1WS4nL
                    (case-lambda
                      ((g$x$6932$1WS4nL)
                       (list
                         (g$library-id$6824$1WS4nL g$x$6932$1WS4nL)
                         (g$library-name$6825$1WS4nL g$x$6932$1WS4nL))))))
          (for-each
            (case-lambda
              ((g$x$6931$1WS4nL)
               (if (g$library-source-file-name$6837$1WS4nL g$x$6931$1WS4nL)
                 (g$serialize$6928$1WS4nL
                   (g$library-source-file-name$6837$1WS4nL g$x$6931$1WS4nL)
                   (list
                     (g$library-id$6824$1WS4nL g$x$6931$1WS4nL)
                     (g$library-name$6825$1WS4nL g$x$6931$1WS4nL)
                     (g$library-version$6826$1WS4nL g$x$6931$1WS4nL)
                     (map g$library-desc$6930$1WS4nL
                          (g$library-imp*$6827$1WS4nL g$x$6931$1WS4nL))
                     (map g$library-desc$6930$1WS4nL
                          (g$library-vis*$6828$1WS4nL g$x$6931$1WS4nL))
                     (map g$library-desc$6930$1WS4nL
                          (g$library-inv*$6829$1WS4nL g$x$6931$1WS4nL))
                     (g$library-subst$6830$1WS4nL g$x$6931$1WS4nL)
                     (g$library-env$6831$1WS4nL g$x$6931$1WS4nL)
                     (g$compile$6929$1WS4nL
                       (g$library-visit-code$6834$1WS4nL g$x$6931$1WS4nL))
                     (g$compile$6929$1WS4nL
                       (g$library-invoke-code$6835$1WS4nL g$x$6931$1WS4nL))
                     (g$library-visible?$6836$1WS4nL g$x$6931$1WS4nL)))
                 (void))))
            ((g$current-library-collection$6818$1WS4nL)))))))
   (g$current-precompiled-library-loader$6860$1WS4nL
     g$current-precompiled-library-loader$7064$1WS4nL
     (g$make-parameter$6530$1WS4nL
       (case-lambda ((g$filename$6933$1WS4nL g$sk$6934$1WS4nL) '#f))))
   (g$try-load-from-file$6861$1WS4nL
     g$try-load-from-file$7065$1WS4nL
     (case-lambda
       ((g$filename$6935$1WS4nL)
        ((g$current-precompiled-library-loader$6860$1WS4nL)
         g$filename$6935$1WS4nL
         (case-lambda
           ((g$id$6936$1WS4nL
              g$name$6937$1WS4nL
              g$ver$6938$1WS4nL
              g$imp*$6939$1WS4nL
              g$vis*$6940$1WS4nL
              g$inv*$6941$1WS4nL
              g$exp-subst$6942$1WS4nL
              g$exp-env$6943$1WS4nL
              g$visit-proc$6944$1WS4nL
              g$invoke-proc$6945$1WS4nL
              g$visible?$6946$1WS4nL)
            ((letrec ((g$f$6947$1WS4nL
                        (case-lambda
                          ((g$deps$6948$1WS4nL)
                           (if (null? g$deps$6948$1WS4nL)
                             (begin
                               (g$install-library$6871$1WS4nL
                                 g$id$6936$1WS4nL
                                 g$name$6937$1WS4nL
                                 g$ver$6938$1WS4nL
                                 g$imp*$6939$1WS4nL
                                 g$vis*$6940$1WS4nL
                                 g$inv*$6941$1WS4nL
                                 g$exp-subst$6942$1WS4nL
                                 g$exp-env$6943$1WS4nL
                                 g$visit-proc$6944$1WS4nL
                                 g$invoke-proc$6945$1WS4nL
                                 '#f
                                 '#f
                                 g$visible?$6946$1WS4nL
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$6949$1WS4nL)
                                 ((case-lambda
                                    ((g$label$6950$1WS4nL g$dname$6951$1WS4nL)
                                     ((case-lambda
                                        ((g$l$6952$1WS4nL)
                                         (if (if (g$library?$6822$1WS4nL
                                                   g$l$6952$1WS4nL)
                                               (begin
                                                 '#f
                                                 (eq? g$label$6950$1WS4nL
                                                      (g$library-id$6824$1WS4nL
                                                        g$l$6952$1WS4nL)))
                                               '#f)
                                           (g$f$6947$1WS4nL
                                             (cdr g$deps$6948$1WS4nL))
                                           (begin
                                             (g$fprintf$6444$1WS4nL
                                               (current-error-port)
                                               '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
                                               g$name$6937$1WS4nL
                                               g$dname$6951$1WS4nL
                                               g$filename$6935$1WS4nL)
                                             '#f))))
                                      (g$find-library-by-name$6866$1WS4nL
                                        g$dname$6951$1WS4nL))))
                                  (car g$d$6949$1WS4nL)
                                  (g$cadr$5165$1WS4nL g$d$6949$1WS4nL))))
                              (car g$deps$6948$1WS4nL)))))))
               g$f$6947$1WS4nL)
             (append g$imp*$6939$1WS4nL g$vis*$6940$1WS4nL g$inv*$6941$1WS4nL)))
           (g$others$6953$1WS4nL '#f))))))
   (g$library-loader$6862$1WS4nL
     g$library-loader$7066$1WS4nL
     (g$make-parameter$6530$1WS4nL
       (case-lambda
         ((g$x$6954$1WS4nL)
          ((case-lambda
             ((g$file-name$6955$1WS4nL)
              (if (not g$file-name$6955$1WS4nL)
                (assertion-violation '#f '"cannot file library" g$x$6954$1WS4nL)
                ((case-lambda
                   ((g$t$6956$1WS4nL)
                    (if g$t$6956$1WS4nL
                      g$t$6956$1WS4nL
                      (begin
                        '#f
                        ((g$current-library-expander$6863$1WS4nL)
                         (g$read-library-source-file$6529$1WS4nL
                           g$file-name$6955$1WS4nL)
                         g$file-name$6955$1WS4nL
                         (case-lambda
                           ((g$name$6957$1WS4nL)
                            (if (not (equal?
                                       g$name$6957$1WS4nL
                                       g$x$6954$1WS4nL))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$6238$1WS4nL)))
                                  (case-lambda
                                    ((g$p$6960$1WS4nL g$e$6961$1WS4nL)
                                     ((case-lambda
                                        ((g$e$6962$1WS4nL g$p$6963$1WS4nL)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$6963$1WS4nL)
                                           (write
                                             g$x$6954$1WS4nL
                                             g$p$6963$1WS4nL)
                                           (display
                                             '" in file "
                                             g$p$6963$1WS4nL)
                                           (display
                                             g$file-name$6955$1WS4nL
                                             g$p$6963$1WS4nL)
                                           (display '", found " g$p$6963$1WS4nL)
                                           (write
                                             g$name$6957$1WS4nL
                                             g$p$6963$1WS4nL)
                                           (display '" instead" g$p$6963$1WS4nL)
                                           (g$e$6962$1WS4nL))))
                                      g$e$6961$1WS4nL
                                      g$p$6960$1WS4nL)))))
                              (void)))))))))
                 (g$try-load-from-file$6861$1WS4nL g$file-name$6955$1WS4nL)))))
           ((g$file-locator$6858$1WS4nL) g$x$6954$1WS4nL))))
       (case-lambda
         ((g$f$6964$1WS4nL)
          (if (procedure? g$f$6964$1WS4nL)
            g$f$6964$1WS4nL
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$6964$1WS4nL))))))
   (g$current-library-expander$6863$1WS4nL
     g$current-library-expander$7067$1WS4nL
     (g$make-parameter$6530$1WS4nL
       (case-lambda
         ((g$x$6965$1WS4nL)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$6966$1WS4nL)
          (if (procedure? g$f$6966$1WS4nL)
            g$f$6966$1WS4nL
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$6966$1WS4nL))))))
   (g$external-pending-libraries$6864$1WS4nL
     g$external-pending-libraries$7068$1WS4nL
     (g$make-parameter$6530$1WS4nL '()))
   (g$find-external-library$6865$1WS4nL
     g$find-external-library$7069$1WS4nL
     (case-lambda
       ((g$name$6967$1WS4nL)
        (begin
          (if (g$member$4997$1WS4nL
                g$name$6967$1WS4nL
                (g$external-pending-libraries$6864$1WS4nL))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$6967$1WS4nL)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$6970$1WS4nL
                g$external-pending-libraries$6971$1WS4nL)
              ((case-lambda
                 ((g$swap$6972$1WS4nL)
                  (dynamic-wind
                    g$swap$6972$1WS4nL
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$6862$1WS4nL) g$name$6967$1WS4nL)
                         ((case-lambda
                            ((g$t$6973$1WS4nL)
                             (if g$t$6973$1WS4nL
                               g$t$6973$1WS4nL
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$6967$1WS4nL)))))
                          (g$find-library-by$6854$1WS4nL
                            (case-lambda
                              ((g$x$6974$1WS4nL)
                               (equal?
                                 (g$library-name$6825$1WS4nL g$x$6974$1WS4nL)
                                 g$name$6967$1WS4nL))))))))
                    g$swap$6972$1WS4nL)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$6975$1WS4nL)
                      (begin
                        (g$external-pending-libraries$6970$1WS4nL
                          g$external-pending-libraries$6971$1WS4nL)
                        (set! g$external-pending-libraries$6971$1WS4nL
                          g$t$6975$1WS4nL))))
                   (g$external-pending-libraries$6970$1WS4nL)))))))
           g$external-pending-libraries$6864$1WS4nL
           (cons
             g$name$6967$1WS4nL
             (g$external-pending-libraries$6864$1WS4nL)))))))
   (g$find-library-by-name$6866$1WS4nL
     g$find-library-by-name$7070$1WS4nL
     (case-lambda
       ((g$name$6976$1WS4nL)
        ((case-lambda
           ((g$t$6977$1WS4nL)
            (if g$t$6977$1WS4nL
              g$t$6977$1WS4nL
              (begin
                '#f
                (g$find-external-library$6865$1WS4nL g$name$6976$1WS4nL)))))
         (g$find-library-by$6854$1WS4nL
           (case-lambda
             ((g$x$6978$1WS4nL)
              (equal?
                (g$library-name$6825$1WS4nL g$x$6978$1WS4nL)
                g$name$6976$1WS4nL))))))))
   (g$library-exists?$6867$1WS4nL
     g$library-exists?$7071$1WS4nL
     (case-lambda
       ((g$name$6979$1WS4nL)
        (if (g$find-library-by$6854$1WS4nL
              (case-lambda
                ((g$x$6980$1WS4nL)
                 (equal?
                   (g$library-name$6825$1WS4nL g$x$6980$1WS4nL)
                   g$name$6979$1WS4nL))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$6868$1WS4nL
     g$find-library-by-spec/die$7072$1WS4nL
     (case-lambda
       ((g$spec$6981$1WS4nL)
        ((case-lambda
           ((g$id$6982$1WS4nL)
            ((case-lambda
               ((g$t$6983$1WS4nL)
                (if g$t$6983$1WS4nL
                  g$t$6983$1WS4nL
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$6981$1WS4nL)))))
             (g$find-library-by$6854$1WS4nL
               (case-lambda
                 ((g$x$6984$1WS4nL)
                  (eq? g$id$6982$1WS4nL
                       (g$library-id$6824$1WS4nL g$x$6984$1WS4nL))))))))
         (car g$spec$6981$1WS4nL)))))
   (g$label->binding-table$6869$1WS4nL
     g$label->binding-table$7073$1WS4nL
     (g$make-eq-hashtable$5439$1WS4nL))
   (g$install-library-record$6870$1WS4nL
     g$install-library-record$7074$1WS4nL
     (case-lambda
       ((g$lib$6985$1WS4nL)
        (begin
          ((case-lambda
             ((g$exp-env$6986$1WS4nL)
              (for-each
                (case-lambda
                  ((g$x$6987$1WS4nL)
                   ((case-lambda
                      ((g$label$6988$1WS4nL g$binding$6989$1WS4nL)
                       ((case-lambda
                          ((g$binding$6990$1WS4nL)
                           (g$hashtable-set!$5443$1WS4nL
                             g$label->binding-table$6869$1WS4nL
                             g$label$6988$1WS4nL
                             g$binding$6990$1WS4nL)))
                        ((case-lambda
                           ((g$t$6991$1WS4nL)
                            (if (g$memv$4996$1WS4nL g$t$6991$1WS4nL '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$6985$1WS4nL
                                  (cdr g$binding$6989$1WS4nL)))
                              (if (g$memv$4996$1WS4nL
                                    g$t$6991$1WS4nL
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$6985$1WS4nL
                                    (cdr g$binding$6989$1WS4nL)))
                                (if (g$memv$4996$1WS4nL
                                      g$t$6991$1WS4nL
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$6985$1WS4nL
                                      (cdr g$binding$6989$1WS4nL)))
                                  g$binding$6989$1WS4nL)))))
                         (car g$binding$6989$1WS4nL)))))
                    (car g$x$6987$1WS4nL)
                    (cdr g$x$6987$1WS4nL))))
                g$exp-env$6986$1WS4nL)))
           (g$library-env$6831$1WS4nL g$lib$6985$1WS4nL))
          ((g$current-library-collection$6818$1WS4nL) g$lib$6985$1WS4nL)))))
   (g$install-library$6871$1WS4nL
     g$install-library$7075$1WS4nL
     (case-lambda
       ((g$id$6992$1WS4nL
          g$name$6993$1WS4nL
          g$ver$6994$1WS4nL
          g$imp*$6995$1WS4nL
          g$vis*$6996$1WS4nL
          g$inv*$6997$1WS4nL
          g$exp-subst$6998$1WS4nL
          g$exp-env$6999$1WS4nL
          g$visit-proc$7000$1WS4nL
          g$invoke-proc$7001$1WS4nL
          g$visit-code$7002$1WS4nL
          g$invoke-code$7003$1WS4nL
          g$visible?$7004$1WS4nL
          g$source-file-name$7005$1WS4nL)
        ((case-lambda
           ((g$imp-lib*$7006$1WS4nL
              g$vis-lib*$7007$1WS4nL
              g$inv-lib*$7008$1WS4nL)
            (begin
              (if (not (if (symbol? g$id$6992$1WS4nL)
                         (if (list? g$name$6993$1WS4nL)
                           (begin '#f (list? g$ver$6994$1WS4nL))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$6992$1WS4nL
                  g$name$6993$1WS4nL
                  g$ver$6994$1WS4nL)
                (void))
              (if (g$library-exists?$6867$1WS4nL g$name$6993$1WS4nL)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$6993$1WS4nL)
                (void))
              ((case-lambda
                 ((g$lib$7009$1WS4nL)
                  (g$install-library-record$6870$1WS4nL g$lib$7009$1WS4nL)))
               (g$make-library$6823$1WS4nL
                 g$id$6992$1WS4nL
                 g$name$6993$1WS4nL
                 g$ver$6994$1WS4nL
                 g$imp-lib*$7006$1WS4nL
                 g$vis-lib*$7007$1WS4nL
                 g$inv-lib*$7008$1WS4nL
                 g$exp-subst$6998$1WS4nL
                 g$exp-env$6999$1WS4nL
                 g$visit-proc$7000$1WS4nL
                 g$invoke-proc$7001$1WS4nL
                 g$visit-code$7002$1WS4nL
                 g$invoke-code$7003$1WS4nL
                 g$visible?$7004$1WS4nL
                 g$source-file-name$7005$1WS4nL)))))
         (map g$find-library-by-spec/die$6868$1WS4nL g$imp*$6995$1WS4nL)
         (map g$find-library-by-spec/die$6868$1WS4nL g$vis*$6996$1WS4nL)
         (map g$find-library-by-spec/die$6868$1WS4nL g$inv*$6997$1WS4nL)))))
   (g$imported-label->binding$6872$1WS4nL
     g$imported-label->binding$7076$1WS4nL
     (case-lambda
       ((g$lab$7010$1WS4nL)
        (g$hashtable-ref$5442$1WS4nL
          g$label->binding-table$6869$1WS4nL
          g$lab$7010$1WS4nL
          '#f))))
   (g$invoke-library$6873$1WS4nL
     g$invoke-library$7077$1WS4nL
     (case-lambda
       ((g$lib$7011$1WS4nL)
        ((case-lambda
           ((g$invoke$7012$1WS4nL)
            (if (procedure? g$invoke$7012$1WS4nL)
              (begin
                (g$set-library-invoke-state!$6847$1WS4nL
                  g$lib$7011$1WS4nL
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7011$1WS4nL))))
                (for-each
                  g$invoke-library$6873$1WS4nL
                  (g$library-inv*$6829$1WS4nL g$lib$7011$1WS4nL))
                (g$set-library-invoke-state!$6847$1WS4nL
                  g$lib$7011$1WS4nL
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7011$1WS4nL))))
                (g$invoke$7012$1WS4nL)
                (g$set-library-invoke-state!$6847$1WS4nL g$lib$7011$1WS4nL '#t))
              (void))))
         (g$library-invoke-state$6833$1WS4nL g$lib$7011$1WS4nL)))))
   (g$visit-library$6874$1WS4nL
     g$visit-library$7078$1WS4nL
     (case-lambda
       ((g$lib$7013$1WS4nL)
        ((case-lambda
           ((g$visit$7014$1WS4nL)
            (if (procedure? g$visit$7014$1WS4nL)
              (begin
                (g$set-library-visit-state!$6846$1WS4nL
                  g$lib$7013$1WS4nL
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7013$1WS4nL))))
                (for-each
                  g$invoke-library$6873$1WS4nL
                  (g$library-vis*$6828$1WS4nL g$lib$7013$1WS4nL))
                (g$set-library-visit-state!$6846$1WS4nL
                  g$lib$7013$1WS4nL
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7013$1WS4nL))))
                (g$visit$7014$1WS4nL)
                (g$set-library-visit-state!$6846$1WS4nL g$lib$7013$1WS4nL '#t))
              (void))))
         (g$library-visit-state$6832$1WS4nL g$lib$7013$1WS4nL)))))
   (g$invoke-library-by-spec$6875$1WS4nL
     g$invoke-library-by-spec$7079$1WS4nL
     (case-lambda
       ((g$spec$7015$1WS4nL)
        (g$invoke-library$6873$1WS4nL
          (g$find-library-by-spec/die$6868$1WS4nL g$spec$7015$1WS4nL)))))
   (g$installed-libraries$6876$1WS4nL
     g$installed-libraries$7080$1WS4nL
     (case-lambda
       ((g$all?$7016$1WS4nL)
        ((letrec ((g$f$7017$1WS4nL
                    (case-lambda
                      ((g$ls$7018$1WS4nL)
                       (if (null? g$ls$7018$1WS4nL)
                         '()
                         (if ((case-lambda
                                ((g$t$7019$1WS4nL)
                                 (if g$t$7019$1WS4nL
                                   g$t$7019$1WS4nL
                                   (begin
                                     '#f
                                     (g$library-visible?$6836$1WS4nL
                                       (car g$ls$7018$1WS4nL))))))
                              g$all?$7016$1WS4nL)
                           (cons
                             (car g$ls$7018$1WS4nL)
                             (g$f$7017$1WS4nL (cdr g$ls$7018$1WS4nL)))
                           (g$f$7017$1WS4nL (cdr g$ls$7018$1WS4nL))))))))
           g$f$7017$1WS4nL)
         ((g$current-library-collection$6818$1WS4nL))))
       (() (g$installed-libraries$6876$1WS4nL '#f))))
   (g$library-spec$6877$1WS4nL
     g$library-spec$7081$1WS4nL
     (case-lambda
       ((g$x$7020$1WS4nL)
        (begin
          (if (not (g$library?$6822$1WS4nL g$x$7020$1WS4nL))
            (assertion-violation 'library-spec '"not a library" g$x$7020$1WS4nL)
            (void))
          (list
            (g$library-id$6824$1WS4nL g$x$7020$1WS4nL)
            (g$library-name$6825$1WS4nL g$x$7020$1WS4nL)
            (g$library-version$6826$1WS4nL g$x$7020$1WS4nL)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7082$1WS4nL
     g$build-global-define$7192$1WS4nL
     (case-lambda ((g$x$7163$1WS4nL) (g$build-void$7159$1WS4nL))))
   (g$build-lambda$7131$1WS4nL
     g$build-lambda$7193$1WS4nL
     (case-lambda
       ((g$ae$7164$1WS4nL g$vars$7165$1WS4nL g$exp$7166$1WS4nL)
        (list 'case-lambda (list g$vars$7165$1WS4nL g$exp$7166$1WS4nL)))))
   (g$build-case-lambda$7132$1WS4nL
     g$build-case-lambda$7194$1WS4nL
     (case-lambda
       ((g$ae$7167$1WS4nL g$vars*$7168$1WS4nL g$exp*$7169$1WS4nL)
        (cons 'case-lambda (map list g$vars*$7168$1WS4nL g$exp*$7169$1WS4nL)))))
   (g$build-let$7133$1WS4nL
     g$build-let$7195$1WS4nL
     (case-lambda
       ((g$ae$7170$1WS4nL
          g$lhs*$7171$1WS4nL
          g$rhs*$7172$1WS4nL
          g$body$7173$1WS4nL)
        (cons
          (g$build-lambda$7131$1WS4nL
            g$ae$7170$1WS4nL
            g$lhs*$7171$1WS4nL
            g$body$7173$1WS4nL)
          g$rhs*$7172$1WS4nL))))
   (g$build-sequence$7158$1WS4nL
     g$build-sequence$7196$1WS4nL
     (case-lambda
       ((g$ae$7174$1WS4nL g$exps$7175$1WS4nL)
        ((letrec ((g$loop$7176$1WS4nL
                    (case-lambda
                      ((g$exps$7177$1WS4nL)
                       (if (null? (cdr g$exps$7177$1WS4nL))
                         (car g$exps$7177$1WS4nL)
                         (if (equal?
                               (car g$exps$7177$1WS4nL)
                               (g$build-void$7159$1WS4nL))
                           (g$loop$7176$1WS4nL (cdr g$exps$7177$1WS4nL))
                           (cons 'begin g$exps$7177$1WS4nL)))))))
           g$loop$7176$1WS4nL)
         g$exps$7175$1WS4nL))))
   (g$build-void$7159$1WS4nL
     g$build-void$7197$1WS4nL
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7160$1WS4nL
     g$build-letrec$7198$1WS4nL
     (case-lambda
       ((g$ae$7178$1WS4nL
          g$vars$7179$1WS4nL
          g$val-exps$7180$1WS4nL
          g$body-exp$7181$1WS4nL)
        (if (null? g$vars$7179$1WS4nL)
          g$body-exp$7181$1WS4nL
          (list
            'letrec
            (map list g$vars$7179$1WS4nL g$val-exps$7180$1WS4nL)
            g$body-exp$7181$1WS4nL)))))
   (g$build-letrec*$7161$1WS4nL
     g$build-letrec*$7199$1WS4nL
     (case-lambda
       ((g$ae$7182$1WS4nL
          g$vars$7183$1WS4nL
          g$val-exps$7184$1WS4nL
          g$body-exp$7185$1WS4nL)
        (if (null? g$vars$7183$1WS4nL)
          g$body-exp$7185$1WS4nL
          (list
            'letrec*
            (map list g$vars$7183$1WS4nL g$val-exps$7184$1WS4nL)
            g$body-exp$7185$1WS4nL)))))
   (g$build-library-letrec*$7162$1WS4nL
     g$build-library-letrec*$7200$1WS4nL
     (case-lambda
       ((g$ae$7186$1WS4nL
          g$name$7187$1WS4nL
          g$vars$7188$1WS4nL
          g$locs$7189$1WS4nL
          g$val-exps$7190$1WS4nL
          g$body-exp$7191$1WS4nL)
        (list
          'library-letrec*
          g$name$7187$1WS4nL
          (map list
               g$vars$7188$1WS4nL
               g$locs$7189$1WS4nL
               g$val-exps$7190$1WS4nL)
          g$body-exp$7191$1WS4nL)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7201$1WS4nL
     g$set-cons$10882$1WS4nL
     (case-lambda
       ((g$x$7664$1WS4nL g$ls$7665$1WS4nL)
        (if (g$memq$4995$1WS4nL g$x$7664$1WS4nL g$ls$7665$1WS4nL)
          g$ls$7665$1WS4nL
          (cons g$x$7664$1WS4nL g$ls$7665$1WS4nL)))))
   (g$set-union$7202$1WS4nL
     g$set-union$10883$1WS4nL
     (case-lambda
       ((g$ls1$7666$1WS4nL g$ls2$7667$1WS4nL)
        (if (null? g$ls1$7666$1WS4nL)
          g$ls2$7667$1WS4nL
          (if (g$memq$4995$1WS4nL (car g$ls1$7666$1WS4nL) g$ls2$7667$1WS4nL)
            (g$set-union$7202$1WS4nL (cdr g$ls1$7666$1WS4nL) g$ls2$7667$1WS4nL)
            (cons
              (car g$ls1$7666$1WS4nL)
              (g$set-union$7202$1WS4nL
                (cdr g$ls1$7666$1WS4nL)
                g$ls2$7667$1WS4nL)))))))
   (g$top-mark*$7204$1WS4nL g$top-mark*$10884$1WS4nL '(top))
   (g$top-marked?$7205$1WS4nL
     g$top-marked?$10885$1WS4nL
     (case-lambda
       ((g$m*$7668$1WS4nL) (g$memq$4995$1WS4nL 'top g$m*$7668$1WS4nL))))
   (g$gen-lexical$7206$1WS4nL
     g$gen-lexical$10886$1WS4nL
     (case-lambda
       ((g$sym$7669$1WS4nL)
        (if (symbol? g$sym$7669$1WS4nL)
          (gensym g$sym$7669$1WS4nL)
          (if (g$stx?$7239$1WS4nL g$sym$7669$1WS4nL)
            (g$gen-lexical$7206$1WS4nL
              (g$id->sym$7268$1WS4nL g$sym$7669$1WS4nL))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$7669$1WS4nL))))))
   (g$gen-global$7207$1WS4nL
     g$gen-global$10887$1WS4nL
     (case-lambda
       ((g$x$7670$1WS4nL) (g$gen-lexical$7206$1WS4nL g$x$7670$1WS4nL))))
   (g$gen-label$7208$1WS4nL
     g$gen-label$10888$1WS4nL
     (case-lambda ((g$_$7671$1WS4nL) (gensym))))
   (g$gen-top-level-label$7209$1WS4nL
     g$gen-top-level-label$10889$1WS4nL
     (case-lambda
       ((g$id$7672$1WS4nL g$rib$7673$1WS4nL)
        (letrec* ((g$find$7674$1WS4nL
                    (case-lambda
                      ((g$sym$7680$1WS4nL
                         g$mark*$7681$1WS4nL
                         g$sym*$7682$1WS4nL
                         g$mark**$7683$1WS4nL
                         g$label*$7684$1WS4nL)
                       (if (pair? g$sym*$7682$1WS4nL)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7680$1WS4nL
                                        (car g$sym*$7682$1WS4nL))
                                 (begin
                                   '#f
                                   (g$same-marks?$7269$1WS4nL
                                     g$mark*$7681$1WS4nL
                                     (car g$mark**$7683$1WS4nL)))
                                 '#f)
                             (car g$label*$7684$1WS4nL)
                             (g$find$7674$1WS4nL
                               g$sym$7680$1WS4nL
                               g$mark*$7681$1WS4nL
                               (cdr g$sym*$7682$1WS4nL)
                               (cdr g$mark**$7683$1WS4nL)
                               (cdr g$label*$7684$1WS4nL))))
                         '#f)))))
          ((case-lambda
             ((g$sym$7675$1WS4nL g$mark*$7676$1WS4nL)
              ((case-lambda
                 ((g$sym*$7677$1WS4nL)
                  ((case-lambda
                     ((g$t$7678$1WS4nL)
                      (if g$t$7678$1WS4nL
                        ((case-lambda
                           ((g$label$7679$1WS4nL)
                            (if (g$imported-label->binding$7076$1WS4nL
                                  g$label$7679$1WS4nL)
                              (gensym)
                              g$label$7679$1WS4nL)))
                         g$t$7678$1WS4nL)
                        (gensym))))
                   (if (g$memq$4995$1WS4nL
                         g$sym$7675$1WS4nL
                         (g$rib-sym*$7217$1WS4nL g$rib$7673$1WS4nL))
                     (begin
                       '#f
                       (g$find$7674$1WS4nL
                         g$sym$7675$1WS4nL
                         g$mark*$7676$1WS4nL
                         g$sym*$7677$1WS4nL
                         (g$rib-mark**$7218$1WS4nL g$rib$7673$1WS4nL)
                         (g$rib-label*$7219$1WS4nL g$rib$7673$1WS4nL)))
                     '#f))))
               (g$rib-sym*$7217$1WS4nL g$rib$7673$1WS4nL))))
           (g$id->sym$7268$1WS4nL g$id$7672$1WS4nL)
           (g$stx-mark*$7242$1WS4nL g$id$7672$1WS4nL))))))
   (g$gen-define-label+loc$7210$1WS4nL
     g$gen-define-label+loc$10890$1WS4nL
     (case-lambda
       ((g$id$7685$1WS4nL g$rib$7686$1WS4nL)
        ((case-lambda
           ((g$t$7687$1WS4nL)
            (if g$t$7687$1WS4nL
              ((case-lambda
                 ((g$env$7688$1WS4nL)
                  ((case-lambda
                     ((g$label$7689$1WS4nL g$locs$7690$1WS4nL)
                      (values
                        g$label$7689$1WS4nL
                        ((case-lambda
                           ((g$t$7691$1WS4nL)
                            (if g$t$7691$1WS4nL
                              (cdr g$t$7691$1WS4nL)
                              ((case-lambda
                                 ((g$loc$7692$1WS4nL)
                                  (begin
                                    (g$set-interaction-env-locs!$7628$1WS4nL
                                      g$env$7688$1WS4nL
                                      (cons
                                        (cons
                                          g$label$7689$1WS4nL
                                          g$loc$7692$1WS4nL)
                                        g$locs$7690$1WS4nL))
                                    g$loc$7692$1WS4nL)))
                               (g$gen-lexical$7206$1WS4nL g$id$7685$1WS4nL)))))
                         (g$assq$4991$1WS4nL
                           g$label$7689$1WS4nL
                           g$locs$7690$1WS4nL)))))
                   (g$gen-top-level-label$7209$1WS4nL
                     g$id$7685$1WS4nL
                     g$rib$7686$1WS4nL)
                   (g$interaction-env-locs$7625$1WS4nL g$env$7688$1WS4nL))))
               g$t$7687$1WS4nL)
              (values (gensym) (g$gen-lexical$7206$1WS4nL g$id$7685$1WS4nL)))))
         (g$top-level-context$7663$1WS4nL)))))
   (g$gen-define-label$7211$1WS4nL
     g$gen-define-label$10891$1WS4nL
     (case-lambda
       ((g$id$7693$1WS4nL g$rib$7694$1WS4nL)
        (if (g$top-level-context$7663$1WS4nL)
          (g$gen-top-level-label$7209$1WS4nL g$id$7693$1WS4nL g$rib$7694$1WS4nL)
          (gensym)))))
   (g$8308$7212$1WS4nL
     g$8308$10892$1WS4nL
     (make-record-type-descriptor
       'rib
       '#f
       'g$8311$1WS4nL
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8310$7213$1WS4nL g$8310$10893$1WS4nL '#f)
   (g$8309$7214$1WS4nL
     g$8309$10894$1WS4nL
     (make-record-constructor-descriptor
       g$8308$7212$1WS4nL
       '#f
       g$8310$7213$1WS4nL))
   (g$rib?$7215$1WS4nL
     g$rib?$10895$1WS4nL
     (record-predicate g$8308$7212$1WS4nL))
   (g$make-rib$7216$1WS4nL
     g$make-rib$10896$1WS4nL
     (record-constructor g$8309$7214$1WS4nL))
   (g$rib-sym*$7217$1WS4nL
     g$rib-sym*$10897$1WS4nL
     (record-accessor g$8308$7212$1WS4nL '0))
   (g$rib-mark**$7218$1WS4nL
     g$rib-mark**$10898$1WS4nL
     (record-accessor g$8308$7212$1WS4nL '1))
   (g$rib-label*$7219$1WS4nL
     g$rib-label*$10899$1WS4nL
     (record-accessor g$8308$7212$1WS4nL '2))
   (g$rib-sealed/freq$7220$1WS4nL
     g$rib-sealed/freq$10900$1WS4nL
     (record-accessor g$8308$7212$1WS4nL '3))
   (g$rib-cache$7221$1WS4nL
     g$rib-cache$10901$1WS4nL
     (record-accessor g$8308$7212$1WS4nL '4))
   (g$set-rib-sym*!$7222$1WS4nL
     g$set-rib-sym*!$10902$1WS4nL
     (record-mutator g$8308$7212$1WS4nL '0))
   (g$set-rib-mark**!$7223$1WS4nL
     g$set-rib-mark**!$10903$1WS4nL
     (record-mutator g$8308$7212$1WS4nL '1))
   (g$set-rib-label*!$7224$1WS4nL
     g$set-rib-label*!$10904$1WS4nL
     (record-mutator g$8308$7212$1WS4nL '2))
   (g$set-rib-sealed/freq!$7225$1WS4nL
     g$set-rib-sealed/freq!$10905$1WS4nL
     (record-mutator g$8308$7212$1WS4nL '3))
   (g$set-rib-cache!$7226$1WS4nL
     g$set-rib-cache!$10906$1WS4nL
     (record-mutator g$8308$7212$1WS4nL '4))
   (g$make-empty-rib$7227$1WS4nL
     g$make-empty-rib$10907$1WS4nL
     (case-lambda (() (g$make-rib$7216$1WS4nL '() '() '() '#f '#f))))
   (g$make-cache-rib$7228$1WS4nL
     g$make-cache-rib$10908$1WS4nL
     (case-lambda
       (()
        (g$make-rib$7216$1WS4nL
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5439$1WS4nL)))))
   (g$find-label$7229$1WS4nL
     g$find-label$10909$1WS4nL
     (case-lambda
       ((g$rib$7695$1WS4nL g$sym$7696$1WS4nL g$mark*$7697$1WS4nL)
        ((case-lambda
           ((g$ht$7698$1WS4nL)
            (if g$ht$7698$1WS4nL
              (begin
                '#f
                ((case-lambda
                   ((g$cv$7699$1WS4nL)
                    ((case-lambda
                       ((g$t$7700$1WS4nL)
                        (if g$t$7700$1WS4nL (cdr g$t$7700$1WS4nL) '#f)))
                     (if g$cv$7699$1WS4nL
                       (begin
                         '#f
                         (g$assp$4994$1WS4nL
                           (case-lambda
                             ((g$m$7701$1WS4nL)
                              (g$same-marks?$7269$1WS4nL
                                g$mark*$7697$1WS4nL
                                g$m$7701$1WS4nL)))
                           g$cv$7699$1WS4nL))
                       '#f))))
                 (g$hashtable-ref$5442$1WS4nL
                   g$ht$7698$1WS4nL
                   g$sym$7696$1WS4nL
                   '#f)))
              '#f)))
         (g$rib-cache$7221$1WS4nL g$rib$7695$1WS4nL)))))
   (g$extend-rib!$7230$1WS4nL
     g$extend-rib!$10910$1WS4nL
     (case-lambda
       ((g$rib$7702$1WS4nL g$id$7703$1WS4nL g$label$7704$1WS4nL)
        (letrec* ((g$find$7705$1WS4nL
                    (case-lambda
                      ((g$sym$7714$1WS4nL
                         g$mark*$7715$1WS4nL
                         g$sym*$7716$1WS4nL
                         g$mark**$7717$1WS4nL
                         g$label*$7718$1WS4nL)
                       (if (pair? g$sym*$7716$1WS4nL)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7714$1WS4nL
                                        (car g$sym*$7716$1WS4nL))
                                 (begin
                                   '#f
                                   (g$same-marks?$7269$1WS4nL
                                     g$mark*$7715$1WS4nL
                                     (car g$mark**$7717$1WS4nL)))
                                 '#f)
                             g$label*$7718$1WS4nL
                             (g$find$7705$1WS4nL
                               g$sym$7714$1WS4nL
                               g$mark*$7715$1WS4nL
                               (cdr g$sym*$7716$1WS4nL)
                               (cdr g$mark**$7717$1WS4nL)
                               (cdr g$label*$7718$1WS4nL))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7220$1WS4nL g$rib$7702$1WS4nL)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$7702$1WS4nL)
              (void))
            ((case-lambda
               ((g$sym$7706$1WS4nL g$mark*$7707$1WS4nL)
                ((case-lambda
                   ((g$sym*$7708$1WS4nL)
                    ((case-lambda
                       ((g$t$7709$1WS4nL)
                        (if g$t$7709$1WS4nL
                          ((case-lambda
                             ((g$p$7710$1WS4nL)
                              (if (not (eq? g$label$7704$1WS4nL
                                            g$p$7710$1WS4nL))
                                (g$syntax-violation$7656$1WS4nL
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$7703$1WS4nL)
                                (void))))
                           g$t$7709$1WS4nL)
                          ((case-lambda
                             ((g$t$7711$1WS4nL)
                              (if g$t$7711$1WS4nL
                                ((case-lambda
                                   ((g$p$7712$1WS4nL)
                                    (if (not (eq? g$label$7704$1WS4nL
                                                  (car g$p$7712$1WS4nL)))
                                      (if (g$top-level-context$7663$1WS4nL)
                                        (set-car!
                                          g$p$7712$1WS4nL
                                          g$label$7704$1WS4nL)
                                        (g$syntax-violation$7656$1WS4nL
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$7703$1WS4nL))
                                      (void))))
                                 g$t$7711$1WS4nL)
                                (begin
                                  (if (g$rib-cache$7221$1WS4nL
                                        g$rib$7702$1WS4nL)
                                    (g$hashtable-update!$5446$1WS4nL
                                      (g$rib-cache$7221$1WS4nL
                                        g$rib$7702$1WS4nL)
                                      g$sym$7706$1WS4nL
                                      (case-lambda
                                        ((g$e$7713$1WS4nL)
                                         (cons
                                           (cons
                                             g$mark*$7707$1WS4nL
                                             g$label$7704$1WS4nL)
                                           g$e$7713$1WS4nL)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7222$1WS4nL
                                    g$rib$7702$1WS4nL
                                    (cons g$sym$7706$1WS4nL g$sym*$7708$1WS4nL))
                                  (g$set-rib-mark**!$7223$1WS4nL
                                    g$rib$7702$1WS4nL
                                    (cons
                                      g$mark*$7707$1WS4nL
                                      (g$rib-mark**$7218$1WS4nL
                                        g$rib$7702$1WS4nL)))
                                  (g$set-rib-label*!$7224$1WS4nL
                                    g$rib$7702$1WS4nL
                                    (cons
                                      g$label$7704$1WS4nL
                                      (g$rib-label*$7219$1WS4nL
                                        g$rib$7702$1WS4nL)))))))
                           (if (g$memq$4995$1WS4nL
                                 g$sym$7706$1WS4nL
                                 (g$rib-sym*$7217$1WS4nL g$rib$7702$1WS4nL))
                             (begin
                               '#f
                               (g$find$7705$1WS4nL
                                 g$sym$7706$1WS4nL
                                 g$mark*$7707$1WS4nL
                                 g$sym*$7708$1WS4nL
                                 (g$rib-mark**$7218$1WS4nL g$rib$7702$1WS4nL)
                                 (g$rib-label*$7219$1WS4nL g$rib$7702$1WS4nL)))
                             '#f)))))
                     (g$find-label$7229$1WS4nL
                       g$rib$7702$1WS4nL
                       g$sym$7706$1WS4nL
                       g$mark*$7707$1WS4nL))))
                 (g$rib-sym*$7217$1WS4nL g$rib$7702$1WS4nL))))
             (g$id->sym$7268$1WS4nL g$id$7703$1WS4nL)
             (g$stx-mark*$7242$1WS4nL g$id$7703$1WS4nL)))))))
   (g$extend-rib/nc!$7231$1WS4nL
     g$extend-rib/nc!$10911$1WS4nL
     (case-lambda
       ((g$rib$7719$1WS4nL g$id$7720$1WS4nL g$label$7721$1WS4nL)
        ((case-lambda
           ((g$sym$7722$1WS4nL g$mark*$7723$1WS4nL)
            ((case-lambda
               ((g$sym*$7724$1WS4nL)
                (begin
                  (if (g$rib-cache$7221$1WS4nL g$rib$7719$1WS4nL)
                    (g$hashtable-update!$5446$1WS4nL
                      (g$rib-cache$7221$1WS4nL g$rib$7719$1WS4nL)
                      g$sym$7722$1WS4nL
                      (case-lambda
                        ((g$e$7725$1WS4nL)
                         (cons
                           (cons g$mark*$7723$1WS4nL g$label$7721$1WS4nL)
                           g$e$7725$1WS4nL)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7222$1WS4nL
                    g$rib$7719$1WS4nL
                    (cons g$sym$7722$1WS4nL g$sym*$7724$1WS4nL))
                  (g$set-rib-mark**!$7223$1WS4nL
                    g$rib$7719$1WS4nL
                    (cons
                      g$mark*$7723$1WS4nL
                      (g$rib-mark**$7218$1WS4nL g$rib$7719$1WS4nL)))
                  (g$set-rib-label*!$7224$1WS4nL
                    g$rib$7719$1WS4nL
                    (cons
                      g$label$7721$1WS4nL
                      (g$rib-label*$7219$1WS4nL g$rib$7719$1WS4nL))))))
             (g$rib-sym*$7217$1WS4nL g$rib$7719$1WS4nL))))
         (g$id->sym$7268$1WS4nL g$id$7720$1WS4nL)
         (g$stx-mark*$7242$1WS4nL g$id$7720$1WS4nL)))))
   (g$make-rib-map$7232$1WS4nL
     g$make-rib-map$10912$1WS4nL
     (case-lambda
       ((g$sym*$7726$1WS4nL)
        ((case-lambda
           ((g$ht$7727$1WS4nL)
            ((letrec ((g$f$7728$1WS4nL
                        (case-lambda
                          ((g$i$7729$1WS4nL g$sym*$7730$1WS4nL)
                           (if (null? g$sym*$7730$1WS4nL)
                             g$ht$7727$1WS4nL
                             (begin
                               (g$hashtable-update!$5446$1WS4nL
                                 g$ht$7727$1WS4nL
                                 (car g$sym*$7730$1WS4nL)
                                 (case-lambda
                                   ((g$x$7731$1WS4nL)
                                    (cons g$i$7729$1WS4nL g$x$7731$1WS4nL)))
                                 '())
                               (g$f$7728$1WS4nL
                                 (+ g$i$7729$1WS4nL '1)
                                 (cdr g$sym*$7730$1WS4nL))))))))
               g$f$7728$1WS4nL)
             '0
             g$sym*$7726$1WS4nL)))
         (g$make-eq-hashtable$5439$1WS4nL)))))
   (g$seal-rib!$7233$1WS4nL
     g$seal-rib!$10913$1WS4nL
     (case-lambda
       ((g$rib$7732$1WS4nL)
        ((case-lambda
           ((g$sym*$7733$1WS4nL)
            (if (not (null? g$sym*$7733$1WS4nL))
              (begin
                (g$set-rib-sym*!$7222$1WS4nL
                  g$rib$7732$1WS4nL
                  (list->vector g$sym*$7733$1WS4nL))
                (g$set-rib-mark**!$7223$1WS4nL
                  g$rib$7732$1WS4nL
                  (list->vector (g$rib-mark**$7218$1WS4nL g$rib$7732$1WS4nL)))
                (g$set-rib-label*!$7224$1WS4nL
                  g$rib$7732$1WS4nL
                  (list->vector (g$rib-label*$7219$1WS4nL g$rib$7732$1WS4nL)))
                (g$set-rib-sealed/freq!$7225$1WS4nL
                  g$rib$7732$1WS4nL
                  (g$make-rib-map$7232$1WS4nL g$sym*$7733$1WS4nL)))
              (void))))
         (g$rib-sym*$7217$1WS4nL g$rib$7732$1WS4nL)))))
   (g$unseal-rib!$7234$1WS4nL
     g$unseal-rib!$10914$1WS4nL
     (case-lambda
       ((g$rib$7734$1WS4nL)
        (if (g$rib-sealed/freq$7220$1WS4nL g$rib$7734$1WS4nL)
          (begin
            (g$set-rib-sealed/freq!$7225$1WS4nL g$rib$7734$1WS4nL '#f)
            (g$set-rib-sym*!$7222$1WS4nL
              g$rib$7734$1WS4nL
              (vector->list (g$rib-sym*$7217$1WS4nL g$rib$7734$1WS4nL)))
            (g$set-rib-mark**!$7223$1WS4nL
              g$rib$7734$1WS4nL
              (vector->list (g$rib-mark**$7218$1WS4nL g$rib$7734$1WS4nL)))
            (g$set-rib-label*!$7224$1WS4nL
              g$rib$7734$1WS4nL
              (vector->list (g$rib-label*$7219$1WS4nL g$rib$7734$1WS4nL))))
          (void)))))
   (g$make-full-rib$7235$1WS4nL
     g$make-full-rib$10915$1WS4nL
     (case-lambda
       ((g$id*$7735$1WS4nL g$label*$7736$1WS4nL)
        ((case-lambda
           ((g$r$7737$1WS4nL)
            (begin (g$seal-rib!$7233$1WS4nL g$r$7737$1WS4nL) g$r$7737$1WS4nL)))
         (g$make-rib$7216$1WS4nL
           (map g$id->sym$7268$1WS4nL g$id*$7735$1WS4nL)
           (map g$stx-mark*$7242$1WS4nL g$id*$7735$1WS4nL)
           g$label*$7736$1WS4nL
           '#f
           '#f)))))
   (g$8339$7236$1WS4nL
     g$8339$10916$1WS4nL
     (make-record-type-descriptor
       'stx
       '#f
       'g$8342$1WS4nL
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8341$7237$1WS4nL g$8341$10917$1WS4nL '#f)
   (g$8340$7238$1WS4nL
     g$8340$10918$1WS4nL
     (make-record-constructor-descriptor
       g$8339$7236$1WS4nL
       '#f
       g$8341$7237$1WS4nL))
   (g$stx?$7239$1WS4nL
     g$stx?$10919$1WS4nL
     (record-predicate g$8339$7236$1WS4nL))
   (g$make-stx$7240$1WS4nL
     g$make-stx$10920$1WS4nL
     (record-constructor g$8340$7238$1WS4nL))
   (g$stx-expr$7241$1WS4nL
     g$stx-expr$10921$1WS4nL
     (record-accessor g$8339$7236$1WS4nL '0))
   (g$stx-mark*$7242$1WS4nL
     g$stx-mark*$10922$1WS4nL
     (record-accessor g$8339$7236$1WS4nL '1))
   (g$stx-subst*$7243$1WS4nL
     g$stx-subst*$10923$1WS4nL
     (record-accessor g$8339$7236$1WS4nL '2))
   (g$stx-ae*$7244$1WS4nL
     g$stx-ae*$10924$1WS4nL
     (record-accessor g$8339$7236$1WS4nL '3))
   (g$set-stx-expr!$7245$1WS4nL
     g$set-stx-expr!$10925$1WS4nL
     (record-mutator g$8339$7236$1WS4nL '0))
   (g$set-stx-mark*!$7246$1WS4nL
     g$set-stx-mark*!$10926$1WS4nL
     (record-mutator g$8339$7236$1WS4nL '1))
   (g$set-stx-subst*!$7247$1WS4nL
     g$set-stx-subst*!$10927$1WS4nL
     (record-mutator g$8339$7236$1WS4nL '2))
   (g$set-stx-ae*!$7248$1WS4nL
     g$set-stx-ae*!$10928$1WS4nL
     (record-mutator g$8339$7236$1WS4nL '3))
   (g$rp$7249$1WS4nL
     g$rp$10929$1WS4nL
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$7738$1WS4nL g$p$7739$1WS4nL)
          (begin
            (display '"#<syntax " g$p$7739$1WS4nL)
            (write (g$stx->datum$7278$1WS4nL g$x$7738$1WS4nL) g$p$7739$1WS4nL)
            ((case-lambda
               ((g$expr$7740$1WS4nL)
                (if (annotation? g$expr$7740$1WS4nL)
                  ((case-lambda
                     ((g$src$7741$1WS4nL)
                      (if (pair? g$src$7741$1WS4nL)
                        (begin
                          (display '" [" g$p$7739$1WS4nL)
                          (display (cdr g$src$7741$1WS4nL) g$p$7739$1WS4nL)
                          (display '" of " g$p$7739$1WS4nL)
                          (display (car g$src$7741$1WS4nL) g$p$7739$1WS4nL)
                          (display '"]" g$p$7739$1WS4nL))
                        (void))))
                   (annotation-source g$expr$7740$1WS4nL))
                  (void))))
             (g$stx-expr$7241$1WS4nL g$x$7738$1WS4nL))
            (display '">" g$p$7739$1WS4nL))))))
   (g$datum->stx$7250$1WS4nL
     g$datum->stx$10930$1WS4nL
     (case-lambda
       ((g$id$7742$1WS4nL g$datum$7743$1WS4nL)
        (g$make-stx$7240$1WS4nL
          g$datum$7743$1WS4nL
          (g$stx-mark*$7242$1WS4nL g$id$7742$1WS4nL)
          (g$stx-subst*$7243$1WS4nL g$id$7742$1WS4nL)
          (g$stx-ae*$7244$1WS4nL g$id$7742$1WS4nL)))))
   (g$gen-mark$7251$1WS4nL
     g$gen-mark$10931$1WS4nL
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7252$1WS4nL g$anti-mark$10932$1WS4nL '#f)
   (g$anti-mark?$7253$1WS4nL g$anti-mark?$10933$1WS4nL not)
   (g$join-wraps$7254$1WS4nL
     g$join-wraps$10934$1WS4nL
     (case-lambda
       ((g$m1*$7744$1WS4nL
          g$s1*$7745$1WS4nL
          g$ae1*$7746$1WS4nL
          g$e$7747$1WS4nL)
        (letrec* ((g$cancel$7748$1WS4nL
                    (case-lambda
                      ((g$ls1$7752$1WS4nL g$ls2$7753$1WS4nL)
                       ((letrec ((g$f$7754$1WS4nL
                                   (case-lambda
                                     ((g$x$7755$1WS4nL g$ls1$7756$1WS4nL)
                                      (if (null? g$ls1$7756$1WS4nL)
                                        (cdr g$ls2$7753$1WS4nL)
                                        (cons
                                          g$x$7755$1WS4nL
                                          (g$f$7754$1WS4nL
                                            (car g$ls1$7756$1WS4nL)
                                            (cdr g$ls1$7756$1WS4nL))))))))
                          g$f$7754$1WS4nL)
                        (car g$ls1$7752$1WS4nL)
                        (cdr g$ls1$7752$1WS4nL))))))
          ((case-lambda
             ((g$m2*$7749$1WS4nL g$s2*$7750$1WS4nL g$ae2*$7751$1WS4nL)
              (if (if (not (null? g$m1*$7744$1WS4nL))
                    (if (not (null? g$m2*$7749$1WS4nL))
                      (begin
                        '#f
                        (g$anti-mark?$7253$1WS4nL (car g$m2*$7749$1WS4nL)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$7748$1WS4nL g$m1*$7744$1WS4nL g$m2*$7749$1WS4nL)
                  (g$cancel$7748$1WS4nL g$s1*$7745$1WS4nL g$s2*$7750$1WS4nL)
                  (g$cancel$7748$1WS4nL g$ae1*$7746$1WS4nL g$ae2*$7751$1WS4nL))
                (values
                  (append g$m1*$7744$1WS4nL g$m2*$7749$1WS4nL)
                  (append g$s1*$7745$1WS4nL g$s2*$7750$1WS4nL)
                  (append g$ae1*$7746$1WS4nL g$ae2*$7751$1WS4nL)))))
           (g$stx-mark*$7242$1WS4nL g$e$7747$1WS4nL)
           (g$stx-subst*$7243$1WS4nL g$e$7747$1WS4nL)
           (g$stx-ae*$7244$1WS4nL g$e$7747$1WS4nL))))))
   (g$mkstx$7255$1WS4nL
     g$mkstx$10935$1WS4nL
     (case-lambda
       ((g$e$7757$1WS4nL g$m*$7758$1WS4nL g$s*$7759$1WS4nL g$ae*$7760$1WS4nL)
        (if (if (g$stx?$7239$1WS4nL g$e$7757$1WS4nL)
              (begin '#f (not (g$top-marked?$7205$1WS4nL g$m*$7758$1WS4nL)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7254$1WS4nL
                 g$m*$7758$1WS4nL
                 g$s*$7759$1WS4nL
                 g$ae*$7760$1WS4nL
                 g$e$7757$1WS4nL)))
            (case-lambda
              ((g$m*$7764$1WS4nL g$s*$7765$1WS4nL g$ae*$7766$1WS4nL)
               ((case-lambda
                  ((g$ae*$7767$1WS4nL g$s*$7768$1WS4nL g$m*$7769$1WS4nL)
                   (g$make-stx$7240$1WS4nL
                     (g$stx-expr$7241$1WS4nL g$e$7757$1WS4nL)
                     g$m*$7769$1WS4nL
                     g$s*$7768$1WS4nL
                     g$ae*$7767$1WS4nL)))
                g$ae*$7766$1WS4nL
                g$s*$7765$1WS4nL
                g$m*$7764$1WS4nL))))
          (g$make-stx$7240$1WS4nL
            g$e$7757$1WS4nL
            g$m*$7758$1WS4nL
            g$s*$7759$1WS4nL
            g$ae*$7760$1WS4nL)))))
   (g$add-mark$7256$1WS4nL
     g$add-mark$10936$1WS4nL
     (case-lambda
       ((g$m$7770$1WS4nL g$e$7771$1WS4nL g$ae$7772$1WS4nL)
        (g$mkstx$7255$1WS4nL
          g$e$7771$1WS4nL
          (list g$m$7770$1WS4nL)
          '(shift)
          (list g$ae$7772$1WS4nL)))))
   (g$add-subst$7257$1WS4nL
     g$add-subst$10937$1WS4nL
     (case-lambda
       ((g$subst$7773$1WS4nL g$e$7774$1WS4nL)
        (g$mkstx$7255$1WS4nL
          g$e$7774$1WS4nL
          '()
          (list g$subst$7773$1WS4nL)
          '()))))
   (g$syntax-kind?$7258$1WS4nL
     g$syntax-kind?$10938$1WS4nL
     (case-lambda
       ((g$x$7775$1WS4nL g$p?$7776$1WS4nL)
        (if (g$stx?$7239$1WS4nL g$x$7775$1WS4nL)
          (g$syntax-kind?$7258$1WS4nL
            (g$stx-expr$7241$1WS4nL g$x$7775$1WS4nL)
            g$p?$7776$1WS4nL)
          (if (annotation? g$x$7775$1WS4nL)
            (g$syntax-kind?$7258$1WS4nL
              (annotation-expression g$x$7775$1WS4nL)
              g$p?$7776$1WS4nL)
            (g$p?$7776$1WS4nL g$x$7775$1WS4nL))))))
   (g$syntax-vector->list$7259$1WS4nL
     g$syntax-vector->list$10939$1WS4nL
     (case-lambda
       ((g$x$7777$1WS4nL)
        (if (g$stx?$7239$1WS4nL g$x$7777$1WS4nL)
          ((case-lambda
             ((g$ls$7778$1WS4nL
                g$m*$7779$1WS4nL
                g$s*$7780$1WS4nL
                g$ae*$7781$1WS4nL)
              (map (case-lambda
                     ((g$x$7782$1WS4nL)
                      (g$mkstx$7255$1WS4nL
                        g$x$7782$1WS4nL
                        g$m*$7779$1WS4nL
                        g$s*$7780$1WS4nL
                        g$ae*$7781$1WS4nL)))
                   g$ls$7778$1WS4nL)))
           (g$syntax-vector->list$7259$1WS4nL
             (g$stx-expr$7241$1WS4nL g$x$7777$1WS4nL))
           (g$stx-mark*$7242$1WS4nL g$x$7777$1WS4nL)
           (g$stx-subst*$7243$1WS4nL g$x$7777$1WS4nL)
           (g$stx-ae*$7244$1WS4nL g$x$7777$1WS4nL))
          (if (annotation? g$x$7777$1WS4nL)
            (g$syntax-vector->list$7259$1WS4nL
              (annotation-expression g$x$7777$1WS4nL))
            (if (vector? g$x$7777$1WS4nL)
              (vector->list g$x$7777$1WS4nL)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$7777$1WS4nL)))))))
   (g$syntax-pair?$7260$1WS4nL
     g$syntax-pair?$10940$1WS4nL
     (case-lambda
       ((g$x$7783$1WS4nL) (g$syntax-kind?$7258$1WS4nL g$x$7783$1WS4nL pair?))))
   (g$syntax-vector?$7261$1WS4nL
     g$syntax-vector?$10941$1WS4nL
     (case-lambda
       ((g$x$7784$1WS4nL)
        (g$syntax-kind?$7258$1WS4nL g$x$7784$1WS4nL vector?))))
   (g$syntax-null?$7262$1WS4nL
     g$syntax-null?$10942$1WS4nL
     (case-lambda
       ((g$x$7785$1WS4nL) (g$syntax-kind?$7258$1WS4nL g$x$7785$1WS4nL null?))))
   (g$syntax-list?$7263$1WS4nL
     g$syntax-list?$10943$1WS4nL
     (case-lambda
       ((g$x$7786$1WS4nL)
        ((case-lambda
           ((g$t$7787$1WS4nL)
            (if g$t$7787$1WS4nL
              g$t$7787$1WS4nL
              (begin
                '#f
                (if (g$syntax-pair?$7260$1WS4nL g$x$7786$1WS4nL)
                  (begin
                    '#f
                    (g$syntax-list?$7263$1WS4nL
                      (g$syntax-cdr$7265$1WS4nL g$x$7786$1WS4nL)))
                  '#f)))))
         (g$syntax-null?$7262$1WS4nL g$x$7786$1WS4nL)))))
   (g$syntax-car$7264$1WS4nL
     g$syntax-car$10944$1WS4nL
     (case-lambda
       ((g$x$7788$1WS4nL)
        (if (g$stx?$7239$1WS4nL g$x$7788$1WS4nL)
          (g$mkstx$7255$1WS4nL
            (g$syntax-car$7264$1WS4nL (g$stx-expr$7241$1WS4nL g$x$7788$1WS4nL))
            (g$stx-mark*$7242$1WS4nL g$x$7788$1WS4nL)
            (g$stx-subst*$7243$1WS4nL g$x$7788$1WS4nL)
            (g$stx-ae*$7244$1WS4nL g$x$7788$1WS4nL))
          (if (annotation? g$x$7788$1WS4nL)
            (g$syntax-car$7264$1WS4nL (annotation-expression g$x$7788$1WS4nL))
            (if (pair? g$x$7788$1WS4nL)
              (car g$x$7788$1WS4nL)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$7788$1WS4nL)))))))
   (g$syntax-cdr$7265$1WS4nL
     g$syntax-cdr$10945$1WS4nL
     (case-lambda
       ((g$x$7789$1WS4nL)
        (if (g$stx?$7239$1WS4nL g$x$7789$1WS4nL)
          (g$mkstx$7255$1WS4nL
            (g$syntax-cdr$7265$1WS4nL (g$stx-expr$7241$1WS4nL g$x$7789$1WS4nL))
            (g$stx-mark*$7242$1WS4nL g$x$7789$1WS4nL)
            (g$stx-subst*$7243$1WS4nL g$x$7789$1WS4nL)
            (g$stx-ae*$7244$1WS4nL g$x$7789$1WS4nL))
          (if (annotation? g$x$7789$1WS4nL)
            (g$syntax-cdr$7265$1WS4nL (annotation-expression g$x$7789$1WS4nL))
            (if (pair? g$x$7789$1WS4nL)
              (cdr g$x$7789$1WS4nL)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$7789$1WS4nL)))))))
   (g$syntax->list$7266$1WS4nL
     g$syntax->list$10946$1WS4nL
     (case-lambda
       ((g$x$7790$1WS4nL)
        (if (g$syntax-pair?$7260$1WS4nL g$x$7790$1WS4nL)
          (cons
            (g$syntax-car$7264$1WS4nL g$x$7790$1WS4nL)
            (g$syntax->list$7266$1WS4nL
              (g$syntax-cdr$7265$1WS4nL g$x$7790$1WS4nL)))
          (if (g$syntax-null?$7262$1WS4nL g$x$7790$1WS4nL)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$7790$1WS4nL))))))
   (g$id?$7267$1WS4nL
     g$id?$10947$1WS4nL
     (case-lambda
       ((g$x$7791$1WS4nL)
        (if (g$stx?$7239$1WS4nL g$x$7791$1WS4nL)
          (begin
            '#f
            ((case-lambda
               ((g$expr$7792$1WS4nL)
                (symbol?
                  (if (annotation? g$expr$7792$1WS4nL)
                    (annotation-stripped g$expr$7792$1WS4nL)
                    g$expr$7792$1WS4nL))))
             (g$stx-expr$7241$1WS4nL g$x$7791$1WS4nL)))
          '#f))))
   (g$id->sym$7268$1WS4nL
     g$id->sym$10948$1WS4nL
     (case-lambda
       ((g$x$7793$1WS4nL)
        (begin
          (if (not (g$stx?$7239$1WS4nL g$x$7793$1WS4nL))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$7793$1WS4nL)
            (void))
          ((case-lambda
             ((g$expr$7794$1WS4nL)
              ((case-lambda
                 ((g$sym$7795$1WS4nL)
                  (if (symbol? g$sym$7795$1WS4nL)
                    g$sym$7795$1WS4nL
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$7793$1WS4nL))))
               (if (annotation? g$expr$7794$1WS4nL)
                 (annotation-stripped g$expr$7794$1WS4nL)
                 g$expr$7794$1WS4nL))))
           (g$stx-expr$7241$1WS4nL g$x$7793$1WS4nL))))))
   (g$same-marks?$7269$1WS4nL
     g$same-marks?$10949$1WS4nL
     (case-lambda
       ((g$x$7796$1WS4nL g$y$7797$1WS4nL)
        ((case-lambda
           ((g$t$7798$1WS4nL)
            (if g$t$7798$1WS4nL
              g$t$7798$1WS4nL
              (begin
                '#f
                (if (pair? g$x$7796$1WS4nL)
                  (if (pair? g$y$7797$1WS4nL)
                    (if (eq? (car g$x$7796$1WS4nL) (car g$y$7797$1WS4nL))
                      (begin
                        '#f
                        (g$same-marks?$7269$1WS4nL
                          (cdr g$x$7796$1WS4nL)
                          (cdr g$y$7797$1WS4nL)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$7796$1WS4nL)
           (begin '#f (null? g$y$7797$1WS4nL))
           '#f)))))
   (g$bound-id=?$7270$1WS4nL
     g$bound-id=?$10950$1WS4nL
     (case-lambda
       ((g$x$7799$1WS4nL g$y$7800$1WS4nL)
        (if (eq? (g$id->sym$7268$1WS4nL g$x$7799$1WS4nL)
                 (g$id->sym$7268$1WS4nL g$y$7800$1WS4nL))
          (begin
            '#f
            (g$same-marks?$7269$1WS4nL
              (g$stx-mark*$7242$1WS4nL g$x$7799$1WS4nL)
              (g$stx-mark*$7242$1WS4nL g$y$7800$1WS4nL)))
          '#f))))
   (g$free-id=?$7271$1WS4nL
     g$free-id=?$10951$1WS4nL
     (case-lambda
       ((g$i$7801$1WS4nL g$j$7802$1WS4nL)
        ((case-lambda
           ((g$t0$7803$1WS4nL g$t1$7804$1WS4nL)
            (if ((case-lambda
                   ((g$t$7805$1WS4nL)
                    (if g$t$7805$1WS4nL
                      g$t$7805$1WS4nL
                      (begin '#f g$t1$7804$1WS4nL))))
                 g$t0$7803$1WS4nL)
              (eq? g$t0$7803$1WS4nL g$t1$7804$1WS4nL)
              (eq? (g$id->sym$7268$1WS4nL g$i$7801$1WS4nL)
                   (g$id->sym$7268$1WS4nL g$j$7802$1WS4nL)))))
         (g$id->real-label$7281$1WS4nL g$i$7801$1WS4nL)
         (g$id->real-label$7281$1WS4nL g$j$7802$1WS4nL)))))
   (g$valid-bound-ids?$7272$1WS4nL
     g$valid-bound-ids?$10952$1WS4nL
     (case-lambda
       ((g$id*$7806$1WS4nL)
        (if (g$for-all$5001$1WS4nL g$id?$7267$1WS4nL g$id*$7806$1WS4nL)
          (begin '#f (g$distinct-bound-ids?$7273$1WS4nL g$id*$7806$1WS4nL))
          '#f))))
   (g$distinct-bound-ids?$7273$1WS4nL
     g$distinct-bound-ids?$10953$1WS4nL
     (case-lambda
       ((g$id*$7807$1WS4nL)
        ((case-lambda
           ((g$t$7808$1WS4nL)
            (if g$t$7808$1WS4nL
              g$t$7808$1WS4nL
              (begin
                '#f
                (if (not (g$bound-id-member?$7274$1WS4nL
                           (car g$id*$7807$1WS4nL)
                           (cdr g$id*$7807$1WS4nL)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7273$1WS4nL (cdr g$id*$7807$1WS4nL)))
                  '#f)))))
         (null? g$id*$7807$1WS4nL)))))
   (g$bound-id-member?$7274$1WS4nL
     g$bound-id-member?$10954$1WS4nL
     (case-lambda
       ((g$id$7809$1WS4nL g$id*$7810$1WS4nL)
        (if (pair? g$id*$7810$1WS4nL)
          (begin
            '#f
            ((case-lambda
               ((g$t$7811$1WS4nL)
                (if g$t$7811$1WS4nL
                  g$t$7811$1WS4nL
                  (begin
                    '#f
                    (g$bound-id-member?$7274$1WS4nL
                      g$id$7809$1WS4nL
                      (cdr g$id*$7810$1WS4nL))))))
             (g$bound-id=?$7270$1WS4nL
               g$id$7809$1WS4nL
               (car g$id*$7810$1WS4nL))))
          '#f))))
   (g$self-evaluating?$7275$1WS4nL
     g$self-evaluating?$10955$1WS4nL
     (case-lambda
       ((g$x$7812$1WS4nL)
        ((case-lambda
           ((g$t$7813$1WS4nL)
            (if g$t$7813$1WS4nL
              g$t$7813$1WS4nL
              ((case-lambda
                 ((g$t$7814$1WS4nL)
                  (if g$t$7814$1WS4nL
                    g$t$7814$1WS4nL
                    ((case-lambda
                       ((g$t$7815$1WS4nL)
                        (if g$t$7815$1WS4nL
                          g$t$7815$1WS4nL
                          ((case-lambda
                             ((g$t$7816$1WS4nL)
                              (if g$t$7816$1WS4nL
                                g$t$7816$1WS4nL
                                (begin '#f (bytevector? g$x$7812$1WS4nL)))))
                           (boolean? g$x$7812$1WS4nL)))))
                     (char? g$x$7812$1WS4nL)))))
               (string? g$x$7812$1WS4nL)))))
         (number? g$x$7812$1WS4nL)))))
   (g$strip-annotations$7276$1WS4nL
     g$strip-annotations$10956$1WS4nL
     (case-lambda
       ((g$x$7817$1WS4nL)
        (if (pair? g$x$7817$1WS4nL)
          (cons
            (g$strip-annotations$7276$1WS4nL (car g$x$7817$1WS4nL))
            (g$strip-annotations$7276$1WS4nL (cdr g$x$7817$1WS4nL)))
          (if (vector? g$x$7817$1WS4nL)
            (vector-map g$strip-annotations$7276$1WS4nL g$x$7817$1WS4nL)
            (if (annotation? g$x$7817$1WS4nL)
              (annotation-stripped g$x$7817$1WS4nL)
              g$x$7817$1WS4nL))))))
   (g$strip$7277$1WS4nL
     g$strip$10957$1WS4nL
     (case-lambda
       ((g$x$7818$1WS4nL g$m*$7819$1WS4nL)
        (if (g$top-marked?$7205$1WS4nL g$m*$7819$1WS4nL)
          (if ((case-lambda
                 ((g$t$7820$1WS4nL)
                  (if g$t$7820$1WS4nL
                    g$t$7820$1WS4nL
                    ((case-lambda
                       ((g$t$7821$1WS4nL)
                        (if g$t$7821$1WS4nL
                          g$t$7821$1WS4nL
                          (begin
                            '#f
                            (if (vector? g$x$7818$1WS4nL)
                              (if (> (vector-length g$x$7818$1WS4nL) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$7818$1WS4nL '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$7818$1WS4nL)
                       (begin '#f (annotation? (car g$x$7818$1WS4nL)))
                       '#f)))))
               (annotation? g$x$7818$1WS4nL))
            (g$strip-annotations$7276$1WS4nL g$x$7818$1WS4nL)
            g$x$7818$1WS4nL)
          ((letrec ((g$f$7822$1WS4nL
                      (case-lambda
                        ((g$x$7823$1WS4nL)
                         (if (g$stx?$7239$1WS4nL g$x$7823$1WS4nL)
                           (g$strip$7277$1WS4nL
                             (g$stx-expr$7241$1WS4nL g$x$7823$1WS4nL)
                             (g$stx-mark*$7242$1WS4nL g$x$7823$1WS4nL))
                           (if (annotation? g$x$7823$1WS4nL)
                             (annotation-stripped g$x$7823$1WS4nL)
                             (if (pair? g$x$7823$1WS4nL)
                               ((case-lambda
                                  ((g$a$7824$1WS4nL g$d$7825$1WS4nL)
                                   (if (if (eq? g$a$7824$1WS4nL
                                                (car g$x$7823$1WS4nL))
                                         (begin
                                           '#f
                                           (eq? g$d$7825$1WS4nL
                                                (cdr g$x$7823$1WS4nL)))
                                         '#f)
                                     g$x$7823$1WS4nL
                                     (cons g$a$7824$1WS4nL g$d$7825$1WS4nL))))
                                (g$f$7822$1WS4nL (car g$x$7823$1WS4nL))
                                (g$f$7822$1WS4nL (cdr g$x$7823$1WS4nL)))
                               (if (vector? g$x$7823$1WS4nL)
                                 ((case-lambda
                                    ((g$old$7826$1WS4nL)
                                     ((case-lambda
                                        ((g$new$7827$1WS4nL)
                                         (if (g$for-all$5001$1WS4nL
                                               eq?
                                               g$old$7826$1WS4nL
                                               g$new$7827$1WS4nL)
                                           g$x$7823$1WS4nL
                                           (list->vector g$new$7827$1WS4nL))))
                                      (map g$f$7822$1WS4nL g$old$7826$1WS4nL))))
                                  (vector->list g$x$7823$1WS4nL))
                                 g$x$7823$1WS4nL))))))))
             g$f$7822$1WS4nL)
           g$x$7818$1WS4nL)))))
   (g$stx->datum$7278$1WS4nL
     g$stx->datum$10958$1WS4nL
     (case-lambda
       ((g$x$7828$1WS4nL) (g$strip$7277$1WS4nL g$x$7828$1WS4nL '()))))
   (g$same-marks*?$7279$1WS4nL
     g$same-marks*?$10959$1WS4nL
     (case-lambda
       ((g$mark*$7829$1WS4nL g$mark**$7830$1WS4nL g$si$7831$1WS4nL)
        (if (null? g$si$7831$1WS4nL)
          '#f
          (if (g$same-marks?$7269$1WS4nL
                g$mark*$7829$1WS4nL
                (vector-ref g$mark**$7830$1WS4nL (car g$si$7831$1WS4nL)))
            (car g$si$7831$1WS4nL)
            (g$same-marks*?$7279$1WS4nL
              g$mark*$7829$1WS4nL
              g$mark**$7830$1WS4nL
              (cdr g$si$7831$1WS4nL)))))))
   (g$id->label$7280$1WS4nL
     g$id->label$10960$1WS4nL
     (case-lambda
       ((g$id$7832$1WS4nL)
        ((case-lambda
           ((g$t$7833$1WS4nL)
            (if g$t$7833$1WS4nL
              g$t$7833$1WS4nL
              (begin
                '#f
                ((case-lambda
                   ((g$t$7834$1WS4nL)
                    (if g$t$7834$1WS4nL
                      ((case-lambda
                         ((g$env$7835$1WS4nL)
                          ((case-lambda
                             ((g$rib$7836$1WS4nL)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7210$1WS4nL
                                     g$id$7832$1WS4nL
                                     g$rib$7836$1WS4nL)))
                                (case-lambda
                                  ((g$lab$7839$1WS4nL g$loc_$7840$1WS4nL)
                                   ((case-lambda
                                      ((g$loc_$7841$1WS4nL g$lab$7842$1WS4nL)
                                       (begin
                                         (g$extend-rib!$7230$1WS4nL
                                           g$rib$7836$1WS4nL
                                           g$id$7832$1WS4nL
                                           g$lab$7842$1WS4nL)
                                         g$lab$7842$1WS4nL)))
                                    g$loc_$7840$1WS4nL
                                    g$lab$7839$1WS4nL))))))
                           (g$interaction-env-rib$7623$1WS4nL
                             g$env$7835$1WS4nL))))
                       g$t$7834$1WS4nL)
                      '#f)))
                 (g$top-level-context$7663$1WS4nL))))))
         (g$id->real-label$7281$1WS4nL g$id$7832$1WS4nL)))))
   (g$id->real-label$7281$1WS4nL
     g$id->real-label$10961$1WS4nL
     (case-lambda
       ((g$id$7843$1WS4nL)
        ((case-lambda
           ((g$sym$7844$1WS4nL)
            ((letrec ((g$search$7845$1WS4nL
                        (case-lambda
                          ((g$subst*$7846$1WS4nL g$mark*$7847$1WS4nL)
                           (if (null? g$subst*$7846$1WS4nL)
                             '#f
                             (if (eq? (car g$subst*$7846$1WS4nL) 'shift)
                               (g$search$7845$1WS4nL
                                 (cdr g$subst*$7846$1WS4nL)
                                 (cdr g$mark*$7847$1WS4nL))
                               ((case-lambda
                                  ((g$rib$7848$1WS4nL)
                                   ((case-lambda
                                      ((g$t$7849$1WS4nL)
                                       (if g$t$7849$1WS4nL
                                         ((case-lambda
                                            ((g$ht$7850$1WS4nL)
                                             ((case-lambda
                                                ((g$si$7851$1WS4nL)
                                                 ((case-lambda
                                                    ((g$i$7852$1WS4nL)
                                                     (if g$i$7852$1WS4nL
                                                       (vector-ref
                                                         (g$rib-label*$7219$1WS4nL
                                                           g$rib$7848$1WS4nL)
                                                         g$i$7852$1WS4nL)
                                                       (g$search$7845$1WS4nL
                                                         (cdr g$subst*$7846$1WS4nL)
                                                         g$mark*$7847$1WS4nL))))
                                                  (if g$si$7851$1WS4nL
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7279$1WS4nL
                                                        g$mark*$7847$1WS4nL
                                                        (g$rib-mark**$7218$1WS4nL
                                                          g$rib$7848$1WS4nL)
                                                        (reverse
                                                          g$si$7851$1WS4nL)))
                                                    '#f))))
                                              (g$hashtable-ref$5442$1WS4nL
                                                g$ht$7850$1WS4nL
                                                g$sym$7844$1WS4nL
                                                '#f))))
                                          g$t$7849$1WS4nL)
                                         ((case-lambda
                                            ((g$t$7853$1WS4nL)
                                             (if g$t$7853$1WS4nL
                                               g$t$7853$1WS4nL
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$7854$1WS4nL
                                                             (case-lambda
                                                               ((g$sym*$7855$1WS4nL
                                                                  g$mark**$7856$1WS4nL
                                                                  g$label*$7857$1WS4nL)
                                                                (if (null?
                                                                      g$sym*$7855$1WS4nL)
                                                                  (g$search$7845$1WS4nL
                                                                    (cdr g$subst*$7846$1WS4nL)
                                                                    g$mark*$7847$1WS4nL)
                                                                  (if (if (eq? (car g$sym*$7855$1WS4nL)
                                                                               g$sym$7844$1WS4nL)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7269$1WS4nL
                                                                            (car g$mark**$7856$1WS4nL)
                                                                            g$mark*$7847$1WS4nL))
                                                                        '#f)
                                                                    (car g$label*$7857$1WS4nL)
                                                                    (g$f$7854$1WS4nL
                                                                      (cdr g$sym*$7855$1WS4nL)
                                                                      (cdr g$mark**$7856$1WS4nL)
                                                                      (cdr g$label*$7857$1WS4nL))))))))
                                                    g$f$7854$1WS4nL)
                                                  (g$rib-sym*$7217$1WS4nL
                                                    g$rib$7848$1WS4nL)
                                                  (g$rib-mark**$7218$1WS4nL
                                                    g$rib$7848$1WS4nL)
                                                  (g$rib-label*$7219$1WS4nL
                                                    g$rib$7848$1WS4nL))))))
                                          (g$find-label$7229$1WS4nL
                                            g$rib$7848$1WS4nL
                                            g$sym$7844$1WS4nL
                                            g$mark*$7847$1WS4nL)))))
                                    (g$rib-sealed/freq$7220$1WS4nL
                                      g$rib$7848$1WS4nL))))
                                (car g$subst*$7846$1WS4nL))))))))
               g$search$7845$1WS4nL)
             (g$stx-subst*$7243$1WS4nL g$id$7843$1WS4nL)
             (g$stx-mark*$7242$1WS4nL g$id$7843$1WS4nL))))
         (g$id->sym$7268$1WS4nL g$id$7843$1WS4nL)))))
   (g$label->binding$7282$1WS4nL
     g$label->binding$10962$1WS4nL
     (case-lambda
       ((g$x$7858$1WS4nL g$r$7859$1WS4nL)
        ((case-lambda
           ((g$t$7860$1WS4nL)
            (if g$t$7860$1WS4nL
              ((case-lambda
                 ((g$b$7861$1WS4nL)
                  (if (if (pair? g$b$7861$1WS4nL)
                        (begin '#f (eq? (car g$b$7861$1WS4nL) '$core-rtd))
                        '#f)
                    (cons '$rtd (map g$bless$7508$1WS4nL (cdr g$b$7861$1WS4nL)))
                    (if (if (pair? g$b$7861$1WS4nL)
                          (begin '#f (eq? (car g$b$7861$1WS4nL) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$7862$1WS4nL g$loc$7863$1WS4nL)
                          (cons '$rtd (symbol-value g$loc$7863$1WS4nL))))
                       (g$cadr$5165$1WS4nL g$b$7861$1WS4nL)
                       (g$cddr$5167$1WS4nL g$b$7861$1WS4nL))
                      g$b$7861$1WS4nL))))
               g$t$7860$1WS4nL)
              ((case-lambda
                 ((g$t$7864$1WS4nL)
                  (if g$t$7864$1WS4nL
                    (cdr g$t$7864$1WS4nL)
                    ((case-lambda
                       ((g$t$7865$1WS4nL)
                        (if g$t$7865$1WS4nL
                          ((case-lambda
                             ((g$env$7866$1WS4nL)
                              ((case-lambda
                                 ((g$t$7867$1WS4nL)
                                  (if g$t$7867$1WS4nL
                                    ((case-lambda
                                       ((g$p$7868$1WS4nL)
                                        (g$cons*$5003$1WS4nL
                                          'lexical
                                          (cdr g$p$7868$1WS4nL)
                                          '#f)))
                                     g$t$7867$1WS4nL)
                                    '(displaced-lexical . #f))))
                               (g$assq$4991$1WS4nL
                                 g$x$7858$1WS4nL
                                 (g$interaction-env-locs$7625$1WS4nL
                                   g$env$7866$1WS4nL)))))
                           g$t$7865$1WS4nL)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$7663$1WS4nL)))))
               (g$assq$4991$1WS4nL g$x$7858$1WS4nL g$r$7859$1WS4nL)))))
         (g$imported-label->binding$7076$1WS4nL g$x$7858$1WS4nL)))))
   (g$make-binding$7283$1WS4nL g$make-binding$10963$1WS4nL cons)
   (g$binding-type$7284$1WS4nL g$binding-type$10964$1WS4nL car)
   (g$binding-value$7285$1WS4nL g$binding-value$10965$1WS4nL cdr)
   (g$raise-unbound-error$7286$1WS4nL
     g$raise-unbound-error$10966$1WS4nL
     (case-lambda
       ((g$id$7869$1WS4nL)
        (g$syntax-violation*$7655$1WS4nL
          '#f
          '"unbound identifier"
          g$id$7869$1WS4nL
          (g$make-undefined-violation$5789$1WS4nL)))))
   (g$syntax-type$7287$1WS4nL
     g$syntax-type$10967$1WS4nL
     (case-lambda
       ((g$e$7870$1WS4nL g$r$7871$1WS4nL)
        (if (g$id?$7267$1WS4nL g$e$7870$1WS4nL)
          ((case-lambda
             ((g$id$7872$1WS4nL)
              ((case-lambda
                 ((g$label$7873$1WS4nL)
                  ((case-lambda
                     ((g$b$7874$1WS4nL)
                      ((case-lambda
                         ((g$type$7875$1WS4nL)
                          ((case-lambda
                             (()
                              (begin
                                (if (not g$label$7873$1WS4nL)
                                  (g$raise-unbound-error$7286$1WS4nL
                                    g$id$7872$1WS4nL)
                                  (void))
                                ((case-lambda
                                   ((g$t$7876$1WS4nL)
                                    (if (g$memv$4996$1WS4nL
                                          g$t$7876$1WS4nL
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             export
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$7875$1WS4nL
                                        (g$binding-value$7285$1WS4nL
                                          g$b$7874$1WS4nL)
                                        g$id$7872$1WS4nL)
                                      (values 'other '#f '#f))))
                                 g$type$7875$1WS4nL)))))))
                       (g$binding-type$7284$1WS4nL g$b$7874$1WS4nL))))
                   (g$label->binding$7282$1WS4nL
                     g$label$7873$1WS4nL
                     g$r$7871$1WS4nL))))
               (g$id->label$7280$1WS4nL g$id$7872$1WS4nL))))
           g$e$7870$1WS4nL)
          (if (g$syntax-pair?$7260$1WS4nL g$e$7870$1WS4nL)
            ((case-lambda
               ((g$id$7877$1WS4nL)
                (if (g$id?$7267$1WS4nL g$id$7877$1WS4nL)
                  ((case-lambda
                     ((g$label$7878$1WS4nL)
                      ((case-lambda
                         ((g$b$7879$1WS4nL)
                          ((case-lambda
                             ((g$type$7880$1WS4nL)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if (not g$label$7878$1WS4nL)
                                      (g$raise-unbound-error$7286$1WS4nL
                                        g$id$7877$1WS4nL)
                                      (void))
                                    ((case-lambda
                                       ((g$t$7881$1WS4nL)
                                        (if (g$memv$4996$1WS4nL
                                              g$t$7881$1WS4nL
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 export
                                                 $core-rtd))
                                          (values
                                            g$type$7880$1WS4nL
                                            (g$binding-value$7285$1WS4nL
                                              g$b$7879$1WS4nL)
                                            g$id$7877$1WS4nL)
                                          (values 'call '#f '#f))))
                                     g$type$7880$1WS4nL)))))))
                           (g$binding-type$7284$1WS4nL g$b$7879$1WS4nL))))
                       (g$label->binding$7282$1WS4nL
                         g$label$7878$1WS4nL
                         g$r$7871$1WS4nL))))
                   (g$id->label$7280$1WS4nL g$id$7877$1WS4nL))
                  (values 'call '#f '#f))))
             (g$syntax-car$7264$1WS4nL g$e$7870$1WS4nL))
            ((case-lambda
               ((g$d$7882$1WS4nL)
                (if (g$self-evaluating?$7275$1WS4nL g$d$7882$1WS4nL)
                  (values 'constant g$d$7882$1WS4nL '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7278$1WS4nL g$e$7870$1WS4nL)))))))
   (g$sanitize-binding$7295$1WS4nL
     g$sanitize-binding$10968$1WS4nL
     (case-lambda
       ((g$x$7883$1WS4nL g$src$7884$1WS4nL)
        (if (procedure? g$x$7883$1WS4nL)
          (g$cons*$5003$1WS4nL 'local-macro g$x$7883$1WS4nL g$src$7884$1WS4nL)
          (if (if (pair? g$x$7883$1WS4nL)
                (if (eq? (car g$x$7883$1WS4nL) 'macro!)
                  (begin '#f (procedure? (cdr g$x$7883$1WS4nL)))
                  '#f)
                '#f)
            (g$cons*$5003$1WS4nL
              'local-macro!
              (cdr g$x$7883$1WS4nL)
              g$src$7884$1WS4nL)
            (if (if (pair? g$x$7883$1WS4nL)
                  (begin '#f (eq? (car g$x$7883$1WS4nL) '$rtd))
                  '#f)
              g$x$7883$1WS4nL
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$7883$1WS4nL)))))))
   (g$make-variable-transformer$7296$1WS4nL
     g$make-variable-transformer$10969$1WS4nL
     (case-lambda
       ((g$x$7885$1WS4nL)
        (if (procedure? g$x$7885$1WS4nL)
          (cons 'macro! g$x$7885$1WS4nL)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$7885$1WS4nL)))))
   (g$variable-transformer?$7297$1WS4nL
     g$variable-transformer?$10970$1WS4nL
     (case-lambda
       ((g$x$7886$1WS4nL)
        (if (pair? g$x$7886$1WS4nL)
          (if (eq? (car g$x$7886$1WS4nL) 'macro!)
            (begin '#f (procedure? (cdr g$x$7886$1WS4nL)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7298$1WS4nL
     g$variable-transformer-procedure$10971$1WS4nL
     (case-lambda
       ((g$x$7887$1WS4nL)
        (if (g$variable-transformer?$7297$1WS4nL g$x$7887$1WS4nL)
          (cdr g$x$7887$1WS4nL)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$7887$1WS4nL)))))
   (g$make-eval-transformer$7299$1WS4nL
     g$make-eval-transformer$10972$1WS4nL
     (case-lambda
       ((g$x$7888$1WS4nL)
        (g$sanitize-binding$7295$1WS4nL
          (eval-core (g$expanded->core$6776$1WS4nL g$x$7888$1WS4nL))
          g$x$7888$1WS4nL))))
   (g$parse-define$7485$1WS4nL
     g$parse-define$10973$1WS4nL
     (case-lambda
       ((g$x$7889$1WS4nL)
        ((case-lambda
           ((g$t$7890$1WS4nL)
            ((case-lambda
               ((g$ls/false$7891$1WS4nL)
                (if (if g$ls/false$7891$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7892$1WS4nL
                               g$fmls$7893$1WS4nL
                               g$b$7894$1WS4nL
                               g$b*$7895$1WS4nL)
                             (g$id?$7267$1WS4nL g$id$7892$1WS4nL)))
                          g$ls/false$7891$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7896$1WS4nL
                         g$fmls$7897$1WS4nL
                         g$b$7898$1WS4nL
                         g$b*$7899$1WS4nL)
                       (begin
                         (g$verify-formals$7565$1WS4nL
                           g$fmls$7897$1WS4nL
                           g$x$7889$1WS4nL)
                         (values
                           g$id$7896$1WS4nL
                           (cons
                             'defun
                             (cons
                               g$fmls$7897$1WS4nL
                               (cons g$b$7898$1WS4nL g$b*$7899$1WS4nL)))))))
                    g$ls/false$7891$1WS4nL)
                  ((case-lambda
                     ((g$t$7900$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$7901$1WS4nL)
                          (if (if g$ls/false$7901$1WS4nL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$7902$1WS4nL g$val$7903$1WS4nL)
                                       (g$id?$7267$1WS4nL g$id$7902$1WS4nL)))
                                    g$ls/false$7901$1WS4nL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$7904$1WS4nL g$val$7905$1WS4nL)
                                 (values
                                   g$id$7904$1WS4nL
                                   (cons 'expr g$val$7905$1WS4nL))))
                              g$ls/false$7901$1WS4nL)
                            ((case-lambda
                               ((g$t$7906$1WS4nL)
                                ((case-lambda
                                   ((g$ls/false$7907$1WS4nL)
                                    (if (if g$ls/false$7907$1WS4nL
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$7908$1WS4nL)
                                                 (g$id?$7267$1WS4nL
                                                   g$id$7908$1WS4nL)))
                                              g$ls/false$7907$1WS4nL))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$7909$1WS4nL)
                                           (values
                                             g$id$7909$1WS4nL
                                             (cons
                                               'expr
                                               (g$bless$7508$1WS4nL '(void))))))
                                        g$ls/false$7907$1WS4nL)
                                      (g$syntax-violation$7656$1WS4nL
                                        '#f
                                        '"invalid syntax"
                                        g$t$7906$1WS4nL))))
                                 (g$syntax-dispatch$7545$1WS4nL
                                   g$t$7906$1WS4nL
                                   '(_ any)))))
                             g$t$7900$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$7900$1WS4nL
                         '(_ any any)))))
                   g$t$7890$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$7890$1WS4nL
               '(_ (any . any) any . each-any)))))
         g$x$7889$1WS4nL))))
   (g$parse-define-syntax$7486$1WS4nL
     g$parse-define-syntax$10974$1WS4nL
     (case-lambda
       ((g$x$7910$1WS4nL)
        ((case-lambda
           ((g$t$7911$1WS4nL)
            ((case-lambda
               ((g$ls/false$7912$1WS4nL)
                (if (if g$ls/false$7912$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7913$1WS4nL g$val$7914$1WS4nL)
                             (g$id?$7267$1WS4nL g$id$7913$1WS4nL)))
                          g$ls/false$7912$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7915$1WS4nL g$val$7916$1WS4nL)
                       (values g$id$7915$1WS4nL g$val$7916$1WS4nL)))
                    g$ls/false$7912$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$7911$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$7911$1WS4nL '(_ any any)))))
         g$x$7910$1WS4nL))))
   (g$scheme-stx-hashtable$7487$1WS4nL
     g$scheme-stx-hashtable$10975$1WS4nL
     (g$make-eq-hashtable$5439$1WS4nL))
   (g$scheme-stx$7488$1WS4nL
     g$scheme-stx$10976$1WS4nL
     (case-lambda
       ((g$sym$7917$1WS4nL)
        ((case-lambda
           ((g$t$7918$1WS4nL)
            (if g$t$7918$1WS4nL
              g$t$7918$1WS4nL
              (begin
                '#f
                ((case-lambda
                   ((g$subst$7919$1WS4nL)
                    ((case-lambda
                       ((g$stx$7920$1WS4nL)
                        ((case-lambda
                           ((g$stx$7921$1WS4nL)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$5443$1WS4nL
                                    g$scheme-stx-hashtable$7487$1WS4nL
                                    g$sym$7917$1WS4nL
                                    g$stx$7921$1WS4nL)
                                  g$stx$7921$1WS4nL))))))
                         ((case-lambda
                            ((g$t$7922$1WS4nL)
                             (if g$t$7922$1WS4nL
                               ((case-lambda
                                  ((g$x$7923$1WS4nL)
                                   ((case-lambda
                                      ((g$name$7924$1WS4nL g$label$7925$1WS4nL)
                                       (g$add-subst$7257$1WS4nL
                                         (g$make-rib$7216$1WS4nL
                                           (list g$name$7924$1WS4nL)
                                           (list g$top-mark*$7204$1WS4nL)
                                           (list g$label$7925$1WS4nL)
                                           '#f
                                           '#f)
                                         g$stx$7920$1WS4nL)))
                                    (car g$x$7923$1WS4nL)
                                    (cdr g$x$7923$1WS4nL))))
                                g$t$7922$1WS4nL)
                               g$stx$7920$1WS4nL)))
                          (g$assq$4991$1WS4nL
                            g$sym$7917$1WS4nL
                            g$subst$7919$1WS4nL)))))
                     (g$make-stx$7240$1WS4nL
                       g$sym$7917$1WS4nL
                       g$top-mark*$7204$1WS4nL
                       '()
                       '()))))
                 (g$library-subst$7034$1WS4nL
                   (g$find-library-by-name$7070$1WS4nL
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5442$1WS4nL
           g$scheme-stx-hashtable$7487$1WS4nL
           g$sym$7917$1WS4nL
           '#f)))))
   (g$lexical-var$7489$1WS4nL g$lexical-var$10977$1WS4nL car)
   (g$lexical-mutable?$7490$1WS4nL g$lexical-mutable?$10978$1WS4nL cdr)
   (g$set-lexical-mutable!$7491$1WS4nL
     g$set-lexical-mutable!$10979$1WS4nL
     set-cdr!)
   (g$add-lexical$7492$1WS4nL
     g$add-lexical$10980$1WS4nL
     (case-lambda
       ((g$lab$7926$1WS4nL g$lex$7927$1WS4nL g$r$7928$1WS4nL)
        (cons
          (g$cons*$5003$1WS4nL g$lab$7926$1WS4nL 'lexical g$lex$7927$1WS4nL '#f)
          g$r$7928$1WS4nL))))
   (g$add-lexicals$7493$1WS4nL
     g$add-lexicals$10981$1WS4nL
     (case-lambda
       ((g$lab*$7929$1WS4nL g$lex*$7930$1WS4nL g$r$7931$1WS4nL)
        (if (null? g$lab*$7929$1WS4nL)
          g$r$7931$1WS4nL
          (g$add-lexicals$7493$1WS4nL
            (cdr g$lab*$7929$1WS4nL)
            (cdr g$lex*$7930$1WS4nL)
            (g$add-lexical$7492$1WS4nL
              (car g$lab*$7929$1WS4nL)
              (car g$lex*$7930$1WS4nL)
              g$r$7931$1WS4nL))))))
   (g$letrec-helper$7494$1WS4nL
     g$letrec-helper$10982$1WS4nL
     (case-lambda
       ((g$e$7932$1WS4nL g$r$7933$1WS4nL g$mr$7934$1WS4nL g$build$7935$1WS4nL)
        ((case-lambda
           ((g$t$7936$1WS4nL)
            ((case-lambda
               ((g$ls/false$7937$1WS4nL)
                (if g$ls/false$7937$1WS4nL
                  (apply
                    (case-lambda
                      ((g$lhs*$7938$1WS4nL
                         g$rhs*$7939$1WS4nL
                         g$b$7940$1WS4nL
                         g$b*$7941$1WS4nL)
                       (if (not (g$valid-bound-ids?$7272$1WS4nL
                                  g$lhs*$7938$1WS4nL))
                         (g$invalid-fmls-error$7510$1WS4nL
                           g$e$7932$1WS4nL
                           g$lhs*$7938$1WS4nL)
                         ((case-lambda
                            ((g$lex*$7942$1WS4nL g$lab*$7943$1WS4nL)
                             ((case-lambda
                                ((g$rib$7944$1WS4nL g$r$7945$1WS4nL)
                                 ((case-lambda
                                    ((g$body$7946$1WS4nL g$rhs*$7947$1WS4nL)
                                     (g$build$7935$1WS4nL
                                       '#f
                                       g$lex*$7942$1WS4nL
                                       g$rhs*$7947$1WS4nL
                                       g$body$7946$1WS4nL)))
                                  (g$chi-internal$7574$1WS4nL
                                    (g$add-subst$7257$1WS4nL
                                      g$rib$7944$1WS4nL
                                      (cons g$b$7940$1WS4nL g$b*$7941$1WS4nL))
                                    g$r$7945$1WS4nL
                                    g$mr$7934$1WS4nL)
                                  (g$chi-expr*$7561$1WS4nL
                                    (map (case-lambda
                                           ((g$x$7948$1WS4nL)
                                            (g$add-subst$7257$1WS4nL
                                              g$rib$7944$1WS4nL
                                              g$x$7948$1WS4nL)))
                                         g$rhs*$7939$1WS4nL)
                                    g$r$7945$1WS4nL
                                    g$mr$7934$1WS4nL))))
                              (g$make-full-rib$7235$1WS4nL
                                g$lhs*$7938$1WS4nL
                                g$lab*$7943$1WS4nL)
                              (g$add-lexicals$7493$1WS4nL
                                g$lab*$7943$1WS4nL
                                g$lex*$7942$1WS4nL
                                g$r$7933$1WS4nL))))
                          (map g$gen-lexical$7206$1WS4nL g$lhs*$7938$1WS4nL)
                          (map g$gen-label$7208$1WS4nL g$lhs*$7938$1WS4nL)))))
                    g$ls/false$7937$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$7936$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$7936$1WS4nL
               '(_ #(each (any any)) any . each-any)))))
         g$e$7932$1WS4nL))))
   (g$letrec-transformer$7495$1WS4nL
     g$letrec-transformer$10983$1WS4nL
     (case-lambda
       ((g$e$7949$1WS4nL g$r$7950$1WS4nL g$mr$7951$1WS4nL)
        (g$letrec-helper$7494$1WS4nL
          g$e$7949$1WS4nL
          g$r$7950$1WS4nL
          g$mr$7951$1WS4nL
          g$build-letrec$7198$1WS4nL))))
   (g$letrec*-transformer$7496$1WS4nL
     g$letrec*-transformer$10984$1WS4nL
     (case-lambda
       ((g$e$7952$1WS4nL g$r$7953$1WS4nL g$mr$7954$1WS4nL)
        (g$letrec-helper$7494$1WS4nL
          g$e$7952$1WS4nL
          g$r$7953$1WS4nL
          g$mr$7954$1WS4nL
          g$build-letrec*$7199$1WS4nL))))
   (g$fluid-let-syntax-transformer$7497$1WS4nL
     g$fluid-let-syntax-transformer$10985$1WS4nL
     (case-lambda
       ((g$e$7955$1WS4nL g$r$7956$1WS4nL g$mr$7957$1WS4nL)
        (letrec* ((g$lookup$7958$1WS4nL
                    (case-lambda
                      ((g$x$7968$1WS4nL)
                       ((case-lambda
                          ((g$t$7969$1WS4nL)
                           (if g$t$7969$1WS4nL
                             g$t$7969$1WS4nL
                             (begin
                               '#f
                               (g$syntax-violation$7656$1WS4nL
                                 '#f
                                 '"unbound identifier"
                                 g$e$7955$1WS4nL
                                 g$x$7968$1WS4nL)))))
                        (g$id->label$7280$1WS4nL g$x$7968$1WS4nL))))))
          ((case-lambda
             ((g$t$7959$1WS4nL)
              ((case-lambda
                 ((g$ls/false$7960$1WS4nL)
                  (if g$ls/false$7960$1WS4nL
                    (apply
                      (case-lambda
                        ((g$lhs*$7961$1WS4nL
                           g$rhs*$7962$1WS4nL
                           g$b$7963$1WS4nL
                           g$b*$7964$1WS4nL)
                         (if (not (g$valid-bound-ids?$7272$1WS4nL
                                    g$lhs*$7961$1WS4nL))
                           (g$invalid-fmls-error$7510$1WS4nL
                             g$e$7955$1WS4nL
                             g$lhs*$7961$1WS4nL)
                           ((case-lambda
                              ((g$lab*$7965$1WS4nL g$rhs*$7966$1WS4nL)
                               (g$chi-internal$7574$1WS4nL
                                 (cons g$b$7963$1WS4nL g$b*$7964$1WS4nL)
                                 (append
                                   (map cons
                                        g$lab*$7965$1WS4nL
                                        g$rhs*$7966$1WS4nL)
                                   g$r$7956$1WS4nL)
                                 (append
                                   (map cons
                                        g$lab*$7965$1WS4nL
                                        g$rhs*$7966$1WS4nL)
                                   g$mr$7957$1WS4nL))))
                            (map g$lookup$7958$1WS4nL g$lhs*$7961$1WS4nL)
                            (map (case-lambda
                                   ((g$x$7967$1WS4nL)
                                    (g$make-eval-transformer$7299$1WS4nL
                                      (g$expand-transformer$7590$1WS4nL
                                        g$x$7967$1WS4nL
                                        g$mr$7957$1WS4nL))))
                                 g$rhs*$7962$1WS4nL)))))
                      g$ls/false$7960$1WS4nL)
                    (g$syntax-violation$7656$1WS4nL
                      '#f
                      '"invalid syntax"
                      g$t$7959$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL
                 g$t$7959$1WS4nL
                 '(_ #(each (any any)) any . each-any)))))
           g$e$7955$1WS4nL)))))
   (g$type-descriptor-transformer$7498$1WS4nL
     g$type-descriptor-transformer$10986$1WS4nL
     (case-lambda
       ((g$e$7970$1WS4nL g$r$7971$1WS4nL g$mr$7972$1WS4nL)
        ((case-lambda
           ((g$t$7973$1WS4nL)
            ((case-lambda
               ((g$ls/false$7974$1WS4nL)
                (if (if g$ls/false$7974$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7975$1WS4nL)
                             (g$id?$7267$1WS4nL g$id$7975$1WS4nL)))
                          g$ls/false$7974$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7976$1WS4nL)
                       ((case-lambda
                          ((g$lab$7977$1WS4nL)
                           ((case-lambda
                              ((g$b$7978$1WS4nL)
                               ((case-lambda
                                  ((g$type$7979$1WS4nL)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$7977$1WS4nL)
                                           (g$raise-unbound-error$7286$1WS4nL
                                             g$id$7976$1WS4nL)
                                           (void))
                                         (if (not (if (eq? g$type$7979$1WS4nL
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (not (list?
                                                             (g$binding-value$7285$1WS4nL
                                                               g$b$7978$1WS4nL))))
                                                    '#f))
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"not a record type"
                                             g$e$7970$1WS4nL)
                                           (void))
                                         (list
                                           'quote
                                           (g$binding-value$7285$1WS4nL
                                             g$b$7978$1WS4nL))))))))
                                (g$binding-type$7284$1WS4nL g$b$7978$1WS4nL))))
                            (g$label->binding$7282$1WS4nL
                              g$lab$7977$1WS4nL
                              g$r$7971$1WS4nL))))
                        (g$id->label$7280$1WS4nL g$id$7976$1WS4nL))))
                    g$ls/false$7974$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$7973$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$7973$1WS4nL '(_ any)))))
         g$e$7970$1WS4nL))))
   (g$record-type-descriptor-transformer$7499$1WS4nL
     g$record-type-descriptor-transformer$10987$1WS4nL
     (case-lambda
       ((g$e$7980$1WS4nL g$r$7981$1WS4nL g$mr$7982$1WS4nL)
        ((case-lambda
           ((g$t$7983$1WS4nL)
            ((case-lambda
               ((g$ls/false$7984$1WS4nL)
                (if (if g$ls/false$7984$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7985$1WS4nL)
                             (g$id?$7267$1WS4nL g$id$7985$1WS4nL)))
                          g$ls/false$7984$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7986$1WS4nL)
                       ((case-lambda
                          ((g$lab$7987$1WS4nL)
                           ((case-lambda
                              ((g$b$7988$1WS4nL)
                               ((case-lambda
                                  ((g$type$7989$1WS4nL)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$7987$1WS4nL)
                                           (g$raise-unbound-error$7286$1WS4nL
                                             g$id$7986$1WS4nL)
                                           (void))
                                         (if (not (if (eq? g$type$7989$1WS4nL
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7285$1WS4nL
                                                          g$b$7988$1WS4nL)))
                                                    '#f))
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"not a record type"
                                             g$e$7980$1WS4nL)
                                           (void))
                                         (g$chi-expr$7563$1WS4nL
                                           (car (g$binding-value$7285$1WS4nL
                                                  g$b$7988$1WS4nL))
                                           g$r$7981$1WS4nL
                                           g$mr$7982$1WS4nL)))))))
                                (g$binding-type$7284$1WS4nL g$b$7988$1WS4nL))))
                            (g$label->binding$7282$1WS4nL
                              g$lab$7987$1WS4nL
                              g$r$7981$1WS4nL))))
                        (g$id->label$7280$1WS4nL g$id$7986$1WS4nL))))
                    g$ls/false$7984$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$7983$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$7983$1WS4nL '(_ any)))))
         g$e$7980$1WS4nL))))
   (g$record-constructor-descriptor-transformer$7500$1WS4nL
     g$record-constructor-descriptor-transformer$10988$1WS4nL
     (case-lambda
       ((g$e$7990$1WS4nL g$r$7991$1WS4nL g$mr$7992$1WS4nL)
        ((case-lambda
           ((g$t$7993$1WS4nL)
            ((case-lambda
               ((g$ls/false$7994$1WS4nL)
                (if (if g$ls/false$7994$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7995$1WS4nL)
                             (g$id?$7267$1WS4nL g$id$7995$1WS4nL)))
                          g$ls/false$7994$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7996$1WS4nL)
                       ((case-lambda
                          ((g$lab$7997$1WS4nL)
                           ((case-lambda
                              ((g$b$7998$1WS4nL)
                               ((case-lambda
                                  ((g$type$7999$1WS4nL)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$7997$1WS4nL)
                                           (g$raise-unbound-error$7286$1WS4nL
                                             g$id$7996$1WS4nL)
                                           (void))
                                         (if (not (if (eq? g$type$7999$1WS4nL
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7285$1WS4nL
                                                          g$b$7998$1WS4nL)))
                                                    '#f))
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid type"
                                             g$e$7990$1WS4nL)
                                           (void))
                                         (g$chi-expr$7563$1WS4nL
                                           (g$cadr$5165$1WS4nL
                                             (g$binding-value$7285$1WS4nL
                                               g$b$7998$1WS4nL))
                                           g$r$7991$1WS4nL
                                           g$mr$7992$1WS4nL)))))))
                                (g$binding-type$7284$1WS4nL g$b$7998$1WS4nL))))
                            (g$label->binding$7282$1WS4nL
                              g$lab$7997$1WS4nL
                              g$r$7991$1WS4nL))))
                        (g$id->label$7280$1WS4nL g$id$7996$1WS4nL))))
                    g$ls/false$7994$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$7993$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$7993$1WS4nL '(_ any)))))
         g$e$7990$1WS4nL))))
   (g$when-macro$7501$1WS4nL
     g$when-macro$10989$1WS4nL
     (case-lambda
       ((g$e$8000$1WS4nL)
        ((case-lambda
           ((g$t$8001$1WS4nL)
            ((case-lambda
               ((g$ls/false$8002$1WS4nL)
                (if g$ls/false$8002$1WS4nL
                  (apply
                    (case-lambda
                      ((g$test$8003$1WS4nL g$e$8004$1WS4nL g$e*$8005$1WS4nL)
                       (g$bless$7508$1WS4nL
                         (list
                           'if
                           g$test$8003$1WS4nL
                           (cons
                             'begin
                             (cons g$e$8004$1WS4nL g$e*$8005$1WS4nL))))))
                    g$ls/false$8002$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8001$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8001$1WS4nL
               '(_ any any . each-any)))))
         g$e$8000$1WS4nL))))
   (g$unless-macro$7502$1WS4nL
     g$unless-macro$10990$1WS4nL
     (case-lambda
       ((g$e$8006$1WS4nL)
        ((case-lambda
           ((g$t$8007$1WS4nL)
            ((case-lambda
               ((g$ls/false$8008$1WS4nL)
                (if g$ls/false$8008$1WS4nL
                  (apply
                    (case-lambda
                      ((g$test$8009$1WS4nL g$e$8010$1WS4nL g$e*$8011$1WS4nL)
                       (g$bless$7508$1WS4nL
                         (list
                           'if
                           (list 'not g$test$8009$1WS4nL)
                           (cons
                             'begin
                             (cons g$e$8010$1WS4nL g$e*$8011$1WS4nL))))))
                    g$ls/false$8008$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8007$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8007$1WS4nL
               '(_ any any . each-any)))))
         g$e$8006$1WS4nL))))
   (g$if-transformer$7503$1WS4nL
     g$if-transformer$10991$1WS4nL
     (case-lambda
       ((g$e$8012$1WS4nL g$r$8013$1WS4nL g$mr$8014$1WS4nL)
        ((case-lambda
           ((g$t$8015$1WS4nL)
            ((case-lambda
               ((g$ls/false$8016$1WS4nL)
                (if g$ls/false$8016$1WS4nL
                  (apply
                    (case-lambda
                      ((g$e0$8017$1WS4nL g$e1$8018$1WS4nL g$e2$8019$1WS4nL)
                       (list
                         'if
                         (g$chi-expr$7563$1WS4nL
                           g$e0$8017$1WS4nL
                           g$r$8013$1WS4nL
                           g$mr$8014$1WS4nL)
                         (g$chi-expr$7563$1WS4nL
                           g$e1$8018$1WS4nL
                           g$r$8013$1WS4nL
                           g$mr$8014$1WS4nL)
                         (g$chi-expr$7563$1WS4nL
                           g$e2$8019$1WS4nL
                           g$r$8013$1WS4nL
                           g$mr$8014$1WS4nL))))
                    g$ls/false$8016$1WS4nL)
                  ((case-lambda
                     ((g$t$8020$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$8021$1WS4nL)
                          (if g$ls/false$8021$1WS4nL
                            (apply
                              (case-lambda
                                ((g$e0$8022$1WS4nL g$e1$8023$1WS4nL)
                                 (list
                                   'if
                                   (g$chi-expr$7563$1WS4nL
                                     g$e0$8022$1WS4nL
                                     g$r$8013$1WS4nL
                                     g$mr$8014$1WS4nL)
                                   (g$chi-expr$7563$1WS4nL
                                     g$e1$8023$1WS4nL
                                     g$r$8013$1WS4nL
                                     g$mr$8014$1WS4nL)
                                   (g$build-void$7197$1WS4nL))))
                              g$ls/false$8021$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$8020$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$8020$1WS4nL
                         '(_ any any)))))
                   g$t$8015$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8015$1WS4nL '(_ any any any)))))
         g$e$8012$1WS4nL))))
   (g$case-macro$7504$1WS4nL
     g$case-macro$10992$1WS4nL
     (case-lambda
       ((g$e$8024$1WS4nL)
        (letrec* ((g$build-last$8025$1WS4nL
                    (case-lambda
                      ((g$cls$8045$1WS4nL)
                       ((case-lambda
                          ((g$t$8046$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$8047$1WS4nL)
                               (if g$ls/false$8047$1WS4nL
                                 (apply
                                   (case-lambda
                                     ((g$e$8048$1WS4nL g$e*$8049$1WS4nL)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$8048$1WS4nL
                                          g$e*$8049$1WS4nL))))
                                   g$ls/false$8047$1WS4nL)
                                 ((case-lambda
                                    ((g$t$8050$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$8051$1WS4nL)
                                         (if g$ls/false$8051$1WS4nL
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8026$1WS4nL
                                                  g$cls$8045$1WS4nL
                                                  '(if #f #f))))
                                             g$ls/false$8051$1WS4nL)
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$t$8050$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$8050$1WS4nL
                                        '_))))
                                  g$t$8046$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$8046$1WS4nL
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8045$1WS4nL))))
                  (g$build-one$8026$1WS4nL
                    (case-lambda
                      ((g$cls$8038$1WS4nL g$k$8039$1WS4nL)
                       ((case-lambda
                          ((g$t$8040$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$8041$1WS4nL)
                               (if g$ls/false$8041$1WS4nL
                                 (apply
                                   (case-lambda
                                     ((g$d*$8042$1WS4nL
                                        g$e$8043$1WS4nL
                                        g$e*$8044$1WS4nL)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8042$1WS4nL))
                                        (cons
                                          'begin
                                          (cons
                                            g$e$8043$1WS4nL
                                            g$e*$8044$1WS4nL))
                                        g$k$8039$1WS4nL)))
                                   g$ls/false$8041$1WS4nL)
                                 (g$syntax-violation$7656$1WS4nL
                                   '#f
                                   '"invalid syntax"
                                   g$t$8040$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$8040$1WS4nL
                              '(each-any any . each-any)))))
                        g$cls$8038$1WS4nL)))))
          ((case-lambda
             ((g$t$8027$1WS4nL)
              ((case-lambda
                 ((g$ls/false$8028$1WS4nL)
                  (if g$ls/false$8028$1WS4nL
                    (apply
                      (case-lambda
                        ((g$expr$8029$1WS4nL)
                         (g$bless$7508$1WS4nL
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8029$1WS4nL))
                               '((if #f #f)))))))
                      g$ls/false$8028$1WS4nL)
                    ((case-lambda
                       ((g$t$8030$1WS4nL)
                        ((case-lambda
                           ((g$ls/false$8031$1WS4nL)
                            (if g$ls/false$8031$1WS4nL
                              (apply
                                (case-lambda
                                  ((g$expr$8032$1WS4nL
                                     g$cls$8033$1WS4nL
                                     g$cls*$8034$1WS4nL)
                                   (g$bless$7508$1WS4nL
                                     (list
                                       'let
                                       (list (list 't g$expr$8032$1WS4nL))
                                       ((letrec ((g$f$8035$1WS4nL
                                                   (case-lambda
                                                     ((g$cls$8036$1WS4nL
                                                        g$cls*$8037$1WS4nL)
                                                      (if (null?
                                                            g$cls*$8037$1WS4nL)
                                                        (g$build-last$8025$1WS4nL
                                                          g$cls$8036$1WS4nL)
                                                        (g$build-one$8026$1WS4nL
                                                          g$cls$8036$1WS4nL
                                                          (g$f$8035$1WS4nL
                                                            (car g$cls*$8037$1WS4nL)
                                                            (cdr g$cls*$8037$1WS4nL))))))))
                                          g$f$8035$1WS4nL)
                                        g$cls$8033$1WS4nL
                                        g$cls*$8034$1WS4nL)))))
                                g$ls/false$8031$1WS4nL)
                              (g$syntax-violation$7656$1WS4nL
                                '#f
                                '"invalid syntax"
                                g$t$8030$1WS4nL))))
                         (g$syntax-dispatch$7545$1WS4nL
                           g$t$8030$1WS4nL
                           '(_ any any . each-any)))))
                     g$t$8027$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL g$t$8027$1WS4nL '(_ any)))))
           g$e$8024$1WS4nL)))))
   (g$quote-transformer$7505$1WS4nL
     g$quote-transformer$10993$1WS4nL
     (case-lambda
       ((g$e$8052$1WS4nL g$r$8053$1WS4nL g$mr$8054$1WS4nL)
        ((case-lambda
           ((g$t$8055$1WS4nL)
            ((case-lambda
               ((g$ls/false$8056$1WS4nL)
                (if g$ls/false$8056$1WS4nL
                  (apply
                    (case-lambda
                      ((g$datum$8057$1WS4nL)
                       (list
                         'quote
                         (g$stx->datum$7278$1WS4nL g$datum$8057$1WS4nL))))
                    g$ls/false$8056$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8055$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8055$1WS4nL '(_ any)))))
         g$e$8052$1WS4nL))))
   (g$case-lambda-transformer$7506$1WS4nL
     g$case-lambda-transformer$10994$1WS4nL
     (case-lambda
       ((g$e$8058$1WS4nL g$r$8059$1WS4nL g$mr$8060$1WS4nL)
        ((case-lambda
           ((g$t$8061$1WS4nL)
            ((case-lambda
               ((g$ls/false$8062$1WS4nL)
                (if g$ls/false$8062$1WS4nL
                  (apply
                    (case-lambda
                      ((g$fmls*$8063$1WS4nL g$b*$8064$1WS4nL g$b**$8065$1WS4nL)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7567$1WS4nL
                              g$e$8058$1WS4nL
                              g$fmls*$8063$1WS4nL
                              (map cons g$b*$8064$1WS4nL g$b**$8065$1WS4nL)
                              g$r$8059$1WS4nL
                              g$mr$8060$1WS4nL)))
                         (case-lambda
                           ((g$fmls*$8068$1WS4nL g$body*$8069$1WS4nL)
                            ((case-lambda
                               ((g$body*$8070$1WS4nL g$fmls*$8071$1WS4nL)
                                (g$build-case-lambda$7194$1WS4nL
                                  '#f
                                  g$fmls*$8071$1WS4nL
                                  g$body*$8070$1WS4nL)))
                             g$body*$8069$1WS4nL
                             g$fmls*$8068$1WS4nL))))))
                    g$ls/false$8062$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8061$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8061$1WS4nL
               '(_ . #(each (any any . each-any)))))))
         g$e$8058$1WS4nL))))
   (g$lambda-transformer$7507$1WS4nL
     g$lambda-transformer$10995$1WS4nL
     (case-lambda
       ((g$e$8072$1WS4nL g$r$8073$1WS4nL g$mr$8074$1WS4nL)
        ((case-lambda
           ((g$t$8075$1WS4nL)
            ((case-lambda
               ((g$ls/false$8076$1WS4nL)
                (if g$ls/false$8076$1WS4nL
                  (apply
                    (case-lambda
                      ((g$fmls$8077$1WS4nL g$b$8078$1WS4nL g$b*$8079$1WS4nL)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7566$1WS4nL
                              g$e$8072$1WS4nL
                              g$fmls$8077$1WS4nL
                              (cons g$b$8078$1WS4nL g$b*$8079$1WS4nL)
                              g$r$8073$1WS4nL
                              g$mr$8074$1WS4nL)))
                         (case-lambda
                           ((g$fmls$8082$1WS4nL g$body$8083$1WS4nL)
                            ((case-lambda
                               ((g$body$8084$1WS4nL g$fmls$8085$1WS4nL)
                                (g$build-lambda$7193$1WS4nL
                                  '#f
                                  g$fmls$8085$1WS4nL
                                  g$body$8084$1WS4nL)))
                             g$body$8083$1WS4nL
                             g$fmls$8082$1WS4nL))))))
                    g$ls/false$8076$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8075$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8075$1WS4nL
               '(_ any any . each-any)))))
         g$e$8072$1WS4nL))))
   (g$bless$7508$1WS4nL
     g$bless$10996$1WS4nL
     (case-lambda
       ((g$x$8086$1WS4nL)
        (g$mkstx$7255$1WS4nL
          ((letrec ((g$f$8087$1WS4nL
                      (case-lambda
                        ((g$x$8088$1WS4nL)
                         (if (g$stx?$7239$1WS4nL g$x$8088$1WS4nL)
                           g$x$8088$1WS4nL
                           (if (pair? g$x$8088$1WS4nL)
                             (cons
                               (g$f$8087$1WS4nL (car g$x$8088$1WS4nL))
                               (g$f$8087$1WS4nL (cdr g$x$8088$1WS4nL)))
                             (if (symbol? g$x$8088$1WS4nL)
                               (g$scheme-stx$7488$1WS4nL g$x$8088$1WS4nL)
                               (if (vector? g$x$8088$1WS4nL)
                                 (vector-map g$f$8087$1WS4nL g$x$8088$1WS4nL)
                                 g$x$8088$1WS4nL))))))))
             g$f$8087$1WS4nL)
           g$x$8086$1WS4nL)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7509$1WS4nL
     g$with-syntax-macro$10997$1WS4nL
     (case-lambda
       ((g$e$8089$1WS4nL)
        ((case-lambda
           ((g$t$8090$1WS4nL)
            ((case-lambda
               ((g$ls/false$8091$1WS4nL)
                (if g$ls/false$8091$1WS4nL
                  (apply
                    (case-lambda
                      ((g$pat*$8092$1WS4nL
                         g$expr*$8093$1WS4nL
                         g$b$8094$1WS4nL
                         g$b*$8095$1WS4nL)
                       ((case-lambda
                          ((g$idn*$8096$1WS4nL)
                           (begin
                             (g$verify-formals$7565$1WS4nL
                               (map car g$idn*$8096$1WS4nL)
                               g$e$8089$1WS4nL)
                             ((case-lambda
                                ((g$t*$8097$1WS4nL)
                                 (g$bless$7508$1WS4nL
                                   (list
                                     'let
                                     (map list
                                          g$t*$8097$1WS4nL
                                          g$expr*$8093$1WS4nL)
                                     ((letrec ((g$f$8098$1WS4nL
                                                 (case-lambda
                                                   ((g$pat*$8099$1WS4nL
                                                      g$t*$8100$1WS4nL)
                                                    (if (null?
                                                          g$pat*$8099$1WS4nL)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8094$1WS4nL
                                                            g$b*$8095$1WS4nL)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8100$1WS4nL)
                                                        '()
                                                        (list
                                                          (car g$pat*$8099$1WS4nL)
                                                          (g$f$8098$1WS4nL
                                                            (cdr g$pat*$8099$1WS4nL)
                                                            (cdr g$t*$8100$1WS4nL)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8099$1WS4nL))
                                                            (car g$t*$8100$1WS4nL)))))))))
                                        g$f$8098$1WS4nL)
                                      g$pat*$8092$1WS4nL
                                      g$t*$8097$1WS4nL)))))
                              (g$generate-temporaries$7646$1WS4nL
                                g$expr*$8093$1WS4nL)))))
                        ((letrec ((g$f$8101$1WS4nL
                                    (case-lambda
                                      ((g$pat*$8102$1WS4nL)
                                       (if (null? g$pat*$8102$1WS4nL)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7544$1WS4nL
                                                (car g$pat*$8102$1WS4nL)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8105$1WS4nL
                                                g$idn*$8106$1WS4nL)
                                              ((case-lambda
                                                 ((g$idn*$8107$1WS4nL
                                                    g$pat$8108$1WS4nL)
                                                  (append
                                                    g$idn*$8107$1WS4nL
                                                    (g$f$8101$1WS4nL
                                                      (cdr g$pat*$8102$1WS4nL)))))
                                               g$idn*$8106$1WS4nL
                                               g$pat$8105$1WS4nL)))))))))
                           g$f$8101$1WS4nL)
                         g$pat*$8092$1WS4nL))))
                    g$ls/false$8091$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8090$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8090$1WS4nL
               '(_ #(each (any any)) any . each-any)))))
         g$e$8089$1WS4nL))))
   (g$invalid-fmls-error$7510$1WS4nL
     g$invalid-fmls-error$10998$1WS4nL
     (case-lambda
       ((g$stx$8109$1WS4nL g$fmls$8110$1WS4nL)
        ((case-lambda
           ((g$t$8111$1WS4nL)
            ((case-lambda
               ((g$ls/false$8112$1WS4nL)
                (if g$ls/false$8112$1WS4nL
                  (apply
                    (case-lambda
                      ((g$id*$8113$1WS4nL g$last$8114$1WS4nL)
                       ((letrec ((g$f$8115$1WS4nL
                                   (case-lambda
                                     ((g$id*$8116$1WS4nL)
                                      (if (null? g$id*$8116$1WS4nL)
                                        (values)
                                        (if (not (g$id?$7267$1WS4nL
                                                   (car g$id*$8116$1WS4nL)))
                                          (g$syntax-violation$7656$1WS4nL
                                            '#f
                                            '"not an identifier"
                                            g$stx$8109$1WS4nL
                                            (car g$id*$8116$1WS4nL))
                                          (begin
                                            (g$f$8115$1WS4nL
                                              (cdr g$id*$8116$1WS4nL))
                                            (if (g$bound-id-member?$7274$1WS4nL
                                                  (car g$id*$8116$1WS4nL)
                                                  (cdr g$id*$8116$1WS4nL))
                                              (g$syntax-violation$7656$1WS4nL
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8109$1WS4nL
                                                (car g$id*$8116$1WS4nL))
                                              (void)))))))))
                          g$f$8115$1WS4nL)
                        (if (g$id?$7267$1WS4nL g$last$8114$1WS4nL)
                          (cons g$last$8114$1WS4nL g$id*$8113$1WS4nL)
                          (if (g$syntax-null?$7262$1WS4nL g$last$8114$1WS4nL)
                            g$id*$8113$1WS4nL
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"not an identifier"
                              g$stx$8109$1WS4nL
                              g$last$8114$1WS4nL))))))
                    g$ls/false$8112$1WS4nL)
                  ((case-lambda
                     ((g$t$8117$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$8118$1WS4nL)
                          (if g$ls/false$8118$1WS4nL
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7656$1WS4nL
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8109$1WS4nL
                                   g$fmls$8110$1WS4nL)))
                              g$ls/false$8118$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$8117$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL g$t$8117$1WS4nL '_))))
                   g$t$8111$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8111$1WS4nL
               '#(each+ any () any)))))
         g$fmls$8110$1WS4nL))))
   (g$let-macro$7511$1WS4nL
     g$let-macro$10999$1WS4nL
     (case-lambda
       ((g$stx$8119$1WS4nL)
        ((case-lambda
           ((g$t$8120$1WS4nL)
            ((case-lambda
               ((g$ls/false$8121$1WS4nL)
                (if g$ls/false$8121$1WS4nL
                  (apply
                    (case-lambda
                      ((g$lhs*$8122$1WS4nL
                         g$rhs*$8123$1WS4nL
                         g$b$8124$1WS4nL
                         g$b*$8125$1WS4nL)
                       (if (g$valid-bound-ids?$7272$1WS4nL g$lhs*$8122$1WS4nL)
                         (g$bless$7508$1WS4nL
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8122$1WS4nL
                                 (cons g$b$8124$1WS4nL g$b*$8125$1WS4nL)))
                             g$rhs*$8123$1WS4nL))
                         (g$invalid-fmls-error$7510$1WS4nL
                           g$stx$8119$1WS4nL
                           g$lhs*$8122$1WS4nL))))
                    g$ls/false$8121$1WS4nL)
                  ((case-lambda
                     ((g$t$8126$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$8127$1WS4nL)
                          (if (if g$ls/false$8127$1WS4nL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8128$1WS4nL
                                         g$lhs*$8129$1WS4nL
                                         g$rhs*$8130$1WS4nL
                                         g$b$8131$1WS4nL
                                         g$b*$8132$1WS4nL)
                                       (g$id?$7267$1WS4nL g$f$8128$1WS4nL)))
                                    g$ls/false$8127$1WS4nL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8133$1WS4nL
                                   g$lhs*$8134$1WS4nL
                                   g$rhs*$8135$1WS4nL
                                   g$b$8136$1WS4nL
                                   g$b*$8137$1WS4nL)
                                 (if (g$valid-bound-ids?$7272$1WS4nL
                                       g$lhs*$8134$1WS4nL)
                                   (g$bless$7508$1WS4nL
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8133$1WS4nL
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8134$1WS4nL
                                                 (cons
                                                   g$b$8136$1WS4nL
                                                   g$b*$8137$1WS4nL)))))
                                         g$f$8133$1WS4nL)
                                       g$rhs*$8135$1WS4nL))
                                   (g$invalid-fmls-error$7510$1WS4nL
                                     g$stx$8119$1WS4nL
                                     g$lhs*$8134$1WS4nL))))
                              g$ls/false$8127$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$8126$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$8126$1WS4nL
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8120$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8120$1WS4nL
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8119$1WS4nL))))
   (g$let-values-macro$7512$1WS4nL
     g$let-values-macro$11000$1WS4nL
     (case-lambda
       ((g$stx$8138$1WS4nL)
        (letrec* ((g$rename$8139$1WS4nL
                    (case-lambda
                      ((g$x$8190$1WS4nL g$old*$8191$1WS4nL g$new*$8192$1WS4nL)
                       (begin
                         (if (not (g$id?$7267$1WS4nL g$x$8190$1WS4nL))
                           (g$syntax-violation$7656$1WS4nL
                             '#f
                             '"not an indentifier"
                             g$stx$8138$1WS4nL
                             g$x$8190$1WS4nL)
                           (void))
                         (if (g$bound-id-member?$7274$1WS4nL
                               g$x$8190$1WS4nL
                               g$old*$8191$1WS4nL)
                           (g$syntax-violation$7656$1WS4nL
                             '#f
                             '"duplicate binding"
                             g$stx$8138$1WS4nL
                             g$x$8190$1WS4nL)
                           (void))
                         ((case-lambda
                            ((g$y$8193$1WS4nL)
                             (values
                               g$y$8193$1WS4nL
                               (cons g$x$8190$1WS4nL g$old*$8191$1WS4nL)
                               (cons g$y$8193$1WS4nL g$new*$8192$1WS4nL))))
                          (gensym
                            (g$syntax->datum$7659$1WS4nL g$x$8190$1WS4nL)))))))
                  (g$rename*$8140$1WS4nL
                    (case-lambda
                      ((g$x*$8181$1WS4nL g$old*$8182$1WS4nL g$new*$8183$1WS4nL)
                       (if (null? g$x*$8181$1WS4nL)
                         (values '() g$old*$8182$1WS4nL g$new*$8183$1WS4nL)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8139$1WS4nL
                                (car g$x*$8181$1WS4nL)
                                g$old*$8182$1WS4nL
                                g$new*$8183$1WS4nL)))
                           (case-lambda
                             ((g$x$8184$1WS4nL
                                g$old*$8185$1WS4nL
                                g$new*$8186$1WS4nL)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8140$1WS4nL
                                     (cdr g$x*$8181$1WS4nL)
                                     g$old*$8185$1WS4nL
                                     g$new*$8186$1WS4nL)))
                                (case-lambda
                                  ((g$x*$8187$1WS4nL
                                     g$old*$8188$1WS4nL
                                     g$new*$8189$1WS4nL)
                                   (values
                                     (cons g$x$8184$1WS4nL g$x*$8187$1WS4nL)
                                     g$old*$8188$1WS4nL
                                     g$new*$8189$1WS4nL))))))))))))
          ((case-lambda
             ((g$t$8141$1WS4nL)
              ((case-lambda
                 ((g$ls/false$8142$1WS4nL)
                  (if g$ls/false$8142$1WS4nL
                    (apply
                      (case-lambda
                        ((g$b$8143$1WS4nL g$b*$8144$1WS4nL)
                         (g$cons*$5003$1WS4nL
                           (g$bless$7508$1WS4nL 'let)
                           '()
                           g$b$8143$1WS4nL
                           g$b*$8144$1WS4nL)))
                      g$ls/false$8142$1WS4nL)
                    ((case-lambda
                       ((g$t$8145$1WS4nL)
                        ((case-lambda
                           ((g$ls/false$8146$1WS4nL)
                            (if g$ls/false$8146$1WS4nL
                              (apply
                                (case-lambda
                                  ((g$lhs*$8147$1WS4nL
                                     g$rhs*$8148$1WS4nL
                                     g$b$8149$1WS4nL
                                     g$b*$8150$1WS4nL)
                                   (g$bless$7508$1WS4nL
                                     ((letrec ((g$f$8151$1WS4nL
                                                 (case-lambda
                                                   ((g$lhs*$8152$1WS4nL
                                                      g$rhs*$8153$1WS4nL
                                                      g$old*$8154$1WS4nL
                                                      g$new*$8155$1WS4nL)
                                                    (if (null?
                                                          g$lhs*$8152$1WS4nL)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (map list
                                                               g$old*$8154$1WS4nL
                                                               g$new*$8155$1WS4nL)
                                                          (cons
                                                            g$b$8149$1WS4nL
                                                            g$b*$8150$1WS4nL)))
                                                      ((case-lambda
                                                         ((g$t$8156$1WS4nL)
                                                          ((case-lambda
                                                             ((g$ls/false$8157$1WS4nL)
                                                              (if g$ls/false$8157$1WS4nL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8158$1WS4nL)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8140$1WS4nL
                                                                            g$x*$8158$1WS4nL
                                                                            g$old*$8154$1WS4nL
                                                                            g$new*$8155$1WS4nL)))
                                                                       (case-lambda
                                                                         ((g$y*$8162$1WS4nL
                                                                            g$old*$8163$1WS4nL
                                                                            g$new*$8164$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$new*$8165$1WS4nL
                                                                                g$old*$8166$1WS4nL
                                                                                g$y*$8167$1WS4nL)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8153$1WS4nL))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8167$1WS4nL
                                                                                  (g$f$8151$1WS4nL
                                                                                    (cdr g$lhs*$8152$1WS4nL)
                                                                                    (cdr g$rhs*$8153$1WS4nL)
                                                                                    g$old*$8166$1WS4nL
                                                                                    g$new*$8165$1WS4nL)))))
                                                                           g$new*$8164$1WS4nL
                                                                           g$old*$8163$1WS4nL
                                                                           g$y*$8162$1WS4nL))))))
                                                                  g$ls/false$8157$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$t$8168$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8169$1WS4nL)
                                                                        (if g$ls/false$8169$1WS4nL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8170$1WS4nL
                                                                                 g$x$8171$1WS4nL)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8139$1WS4nL
                                                                                      g$x$8171$1WS4nL
                                                                                      g$old*$8154$1WS4nL
                                                                                      g$new*$8155$1WS4nL)))
                                                                                 (case-lambda
                                                                                   ((g$y$8172$1WS4nL
                                                                                      g$old*$8173$1WS4nL
                                                                                      g$new*$8174$1WS4nL)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8140$1WS4nL
                                                                                           g$x*$8170$1WS4nL
                                                                                           g$old*$8173$1WS4nL
                                                                                           g$new*$8174$1WS4nL)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8175$1WS4nL
                                                                                           g$old*$8176$1WS4nL
                                                                                           g$new*$8177$1WS4nL)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8153$1WS4nL))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8175$1WS4nL
                                                                                               g$y$8172$1WS4nL)
                                                                                             (g$f$8151$1WS4nL
                                                                                               (cdr g$lhs*$8152$1WS4nL)
                                                                                               (cdr g$rhs*$8153$1WS4nL)
                                                                                               g$old*$8176$1WS4nL
                                                                                               g$new*$8177$1WS4nL)))))))))))
                                                                            g$ls/false$8169$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$t$8178$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8179$1WS4nL)
                                                                                  (if g$ls/false$8179$1WS4nL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8180$1WS4nL)
                                                                                         (g$syntax-violation$7656$1WS4nL
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8138$1WS4nL
                                                                                           g$others$8180$1WS4nL)))
                                                                                      g$ls/false$8179$1WS4nL)
                                                                                    (g$syntax-violation$7656$1WS4nL
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8178$1WS4nL))))
                                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                                 g$t$8178$1WS4nL
                                                                                 'any))))
                                                                           g$t$8168$1WS4nL))))
                                                                     (g$syntax-dispatch$7545$1WS4nL
                                                                       g$t$8168$1WS4nL
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8156$1WS4nL))))
                                                           (g$syntax-dispatch$7545$1WS4nL
                                                             g$t$8156$1WS4nL
                                                             'each-any))))
                                                       (car g$lhs*$8152$1WS4nL)))))))
                                        g$f$8151$1WS4nL)
                                      g$lhs*$8147$1WS4nL
                                      g$rhs*$8148$1WS4nL
                                      '()
                                      '()))))
                                g$ls/false$8146$1WS4nL)
                              (g$syntax-violation$7656$1WS4nL
                                '#f
                                '"invalid syntax"
                                g$t$8145$1WS4nL))))
                         (g$syntax-dispatch$7545$1WS4nL
                           g$t$8145$1WS4nL
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8141$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL
                 g$t$8141$1WS4nL
                 '(_ () any . each-any)))))
           g$stx$8138$1WS4nL)))))
   (g$let*-values-macro$7513$1WS4nL
     g$let*-values-macro$11001$1WS4nL
     (case-lambda
       ((g$stx$8194$1WS4nL)
        (letrec* ((g$check$8195$1WS4nL
                    (case-lambda
                      ((g$x*$8219$1WS4nL)
                       (if (not (null? g$x*$8219$1WS4nL))
                         ((case-lambda
                            ((g$x$8220$1WS4nL)
                             (begin
                               (if (not (g$id?$7267$1WS4nL g$x$8220$1WS4nL))
                                 (g$syntax-violation$7656$1WS4nL
                                   '#f
                                   '"not an identifier"
                                   g$stx$8194$1WS4nL
                                   g$x$8220$1WS4nL)
                                 (void))
                               (g$check$8195$1WS4nL (cdr g$x*$8219$1WS4nL))
                               (if (g$bound-id-member?$7274$1WS4nL
                                     g$x$8220$1WS4nL
                                     (cdr g$x*$8219$1WS4nL))
                                 (g$syntax-violation$7656$1WS4nL
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8194$1WS4nL
                                   g$x$8220$1WS4nL)
                                 (void)))))
                          (car g$x*$8219$1WS4nL))
                         (void))))))
          ((case-lambda
             ((g$t$8196$1WS4nL)
              ((case-lambda
                 ((g$ls/false$8197$1WS4nL)
                  (if g$ls/false$8197$1WS4nL
                    (apply
                      (case-lambda
                        ((g$b$8198$1WS4nL g$b*$8199$1WS4nL)
                         (g$cons*$5003$1WS4nL
                           (g$bless$7508$1WS4nL 'let)
                           '()
                           g$b$8198$1WS4nL
                           g$b*$8199$1WS4nL)))
                      g$ls/false$8197$1WS4nL)
                    ((case-lambda
                       ((g$t$8200$1WS4nL)
                        ((case-lambda
                           ((g$ls/false$8201$1WS4nL)
                            (if g$ls/false$8201$1WS4nL
                              (apply
                                (case-lambda
                                  ((g$lhs*$8202$1WS4nL
                                     g$rhs*$8203$1WS4nL
                                     g$b$8204$1WS4nL
                                     g$b*$8205$1WS4nL)
                                   (g$bless$7508$1WS4nL
                                     ((letrec ((g$f$8206$1WS4nL
                                                 (case-lambda
                                                   ((g$lhs*$8207$1WS4nL
                                                      g$rhs*$8208$1WS4nL)
                                                    (if (null?
                                                          g$lhs*$8207$1WS4nL)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8204$1WS4nL
                                                          g$b*$8205$1WS4nL))
                                                      ((case-lambda
                                                         ((g$t$8209$1WS4nL)
                                                          ((case-lambda
                                                             ((g$ls/false$8210$1WS4nL)
                                                              (if g$ls/false$8210$1WS4nL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8211$1WS4nL)
                                                                     (begin
                                                                       (g$check$8195$1WS4nL
                                                                         g$x*$8211$1WS4nL)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8208$1WS4nL))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8211$1WS4nL
                                                                           (g$f$8206$1WS4nL
                                                                             (cdr g$lhs*$8207$1WS4nL)
                                                                             (cdr g$rhs*$8208$1WS4nL)))))))
                                                                  g$ls/false$8210$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$t$8212$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8213$1WS4nL)
                                                                        (if g$ls/false$8213$1WS4nL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8214$1WS4nL
                                                                                 g$x$8215$1WS4nL)
                                                                               (begin
                                                                                 (g$check$8195$1WS4nL
                                                                                   (cons
                                                                                     g$x$8215$1WS4nL
                                                                                     g$x*$8214$1WS4nL))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8208$1WS4nL))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8214$1WS4nL
                                                                                       g$x$8215$1WS4nL)
                                                                                     (g$f$8206$1WS4nL
                                                                                       (cdr g$lhs*$8207$1WS4nL)
                                                                                       (cdr g$rhs*$8208$1WS4nL)))))))
                                                                            g$ls/false$8213$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$t$8216$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8217$1WS4nL)
                                                                                  (if g$ls/false$8217$1WS4nL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8218$1WS4nL)
                                                                                         (g$syntax-violation$7656$1WS4nL
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8194$1WS4nL
                                                                                           g$others$8218$1WS4nL)))
                                                                                      g$ls/false$8217$1WS4nL)
                                                                                    (g$syntax-violation$7656$1WS4nL
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8216$1WS4nL))))
                                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                                 g$t$8216$1WS4nL
                                                                                 'any))))
                                                                           g$t$8212$1WS4nL))))
                                                                     (g$syntax-dispatch$7545$1WS4nL
                                                                       g$t$8212$1WS4nL
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8209$1WS4nL))))
                                                           (g$syntax-dispatch$7545$1WS4nL
                                                             g$t$8209$1WS4nL
                                                             'each-any))))
                                                       (car g$lhs*$8207$1WS4nL)))))))
                                        g$f$8206$1WS4nL)
                                      g$lhs*$8202$1WS4nL
                                      g$rhs*$8203$1WS4nL))))
                                g$ls/false$8201$1WS4nL)
                              (g$syntax-violation$7656$1WS4nL
                                '#f
                                '"invalid syntax"
                                g$t$8200$1WS4nL))))
                         (g$syntax-dispatch$7545$1WS4nL
                           g$t$8200$1WS4nL
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8196$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL
                 g$t$8196$1WS4nL
                 '(_ () any . each-any)))))
           g$stx$8194$1WS4nL)))))
   (g$trace-lambda-macro$7514$1WS4nL
     g$trace-lambda-macro$11002$1WS4nL
     (case-lambda
       ((g$stx$8221$1WS4nL)
        ((case-lambda
           ((g$t$8222$1WS4nL)
            ((case-lambda
               ((g$ls/false$8223$1WS4nL)
                (if g$ls/false$8223$1WS4nL
                  (apply
                    (case-lambda
                      ((g$who$8224$1WS4nL
                         g$fmls$8225$1WS4nL
                         g$b$8226$1WS4nL
                         g$b*$8227$1WS4nL)
                       (if (g$valid-bound-ids?$7272$1WS4nL g$fmls$8225$1WS4nL)
                         (g$bless$7508$1WS4nL
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8224$1WS4nL)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8225$1WS4nL
                                 (cons g$b$8226$1WS4nL g$b*$8227$1WS4nL)))))
                         (g$invalid-fmls-error$7510$1WS4nL
                           g$stx$8221$1WS4nL
                           g$fmls$8225$1WS4nL))))
                    g$ls/false$8223$1WS4nL)
                  ((case-lambda
                     ((g$t$8228$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$8229$1WS4nL)
                          (if g$ls/false$8229$1WS4nL
                            (apply
                              (case-lambda
                                ((g$who$8230$1WS4nL
                                   g$fmls$8231$1WS4nL
                                   g$last$8232$1WS4nL
                                   g$b$8233$1WS4nL
                                   g$b*$8234$1WS4nL)
                                 (if (g$valid-bound-ids?$7272$1WS4nL
                                       (cons
                                         g$last$8232$1WS4nL
                                         g$fmls$8231$1WS4nL))
                                   (g$bless$7508$1WS4nL
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8230$1WS4nL)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8231$1WS4nL
                                             g$last$8232$1WS4nL)
                                           (cons
                                             g$b$8233$1WS4nL
                                             g$b*$8234$1WS4nL)))))
                                   (g$invalid-fmls-error$7510$1WS4nL
                                     g$stx$8221$1WS4nL
                                     (append
                                       g$fmls$8231$1WS4nL
                                       g$last$8232$1WS4nL)))))
                              g$ls/false$8229$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$8228$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$8228$1WS4nL
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8222$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8222$1WS4nL
               '(_ any each-any any . each-any)))))
         g$stx$8221$1WS4nL))))
   (g$trace-define-macro$7515$1WS4nL
     g$trace-define-macro$11003$1WS4nL
     (case-lambda
       ((g$stx$8235$1WS4nL)
        ((case-lambda
           ((g$t$8236$1WS4nL)
            ((case-lambda
               ((g$ls/false$8237$1WS4nL)
                (if g$ls/false$8237$1WS4nL
                  (apply
                    (case-lambda
                      ((g$who$8238$1WS4nL
                         g$fmls$8239$1WS4nL
                         g$b$8240$1WS4nL
                         g$b*$8241$1WS4nL)
                       (if (g$valid-bound-ids?$7272$1WS4nL g$fmls$8239$1WS4nL)
                         (g$bless$7508$1WS4nL
                           (list
                             'define
                             g$who$8238$1WS4nL
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8238$1WS4nL)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8239$1WS4nL
                                   (cons g$b$8240$1WS4nL g$b*$8241$1WS4nL))))))
                         (g$invalid-fmls-error$7510$1WS4nL
                           g$stx$8235$1WS4nL
                           g$fmls$8239$1WS4nL))))
                    g$ls/false$8237$1WS4nL)
                  ((case-lambda
                     ((g$t$8242$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$8243$1WS4nL)
                          (if g$ls/false$8243$1WS4nL
                            (apply
                              (case-lambda
                                ((g$who$8244$1WS4nL
                                   g$fmls$8245$1WS4nL
                                   g$last$8246$1WS4nL
                                   g$b$8247$1WS4nL
                                   g$b*$8248$1WS4nL)
                                 (if (g$valid-bound-ids?$7272$1WS4nL
                                       (cons
                                         g$last$8246$1WS4nL
                                         g$fmls$8245$1WS4nL))
                                   (g$bless$7508$1WS4nL
                                     (list
                                       'define
                                       g$who$8244$1WS4nL
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8244$1WS4nL)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8245$1WS4nL
                                               g$last$8246$1WS4nL)
                                             (cons
                                               g$b$8247$1WS4nL
                                               g$b*$8248$1WS4nL))))))
                                   (g$invalid-fmls-error$7510$1WS4nL
                                     g$stx$8235$1WS4nL
                                     (append
                                       g$fmls$8245$1WS4nL
                                       g$last$8246$1WS4nL)))))
                              g$ls/false$8243$1WS4nL)
                            ((case-lambda
                               ((g$t$8249$1WS4nL)
                                ((case-lambda
                                   ((g$ls/false$8250$1WS4nL)
                                    (if g$ls/false$8250$1WS4nL
                                      (apply
                                        (case-lambda
                                          ((g$who$8251$1WS4nL
                                             g$expr$8252$1WS4nL)
                                           (if (g$id?$7267$1WS4nL
                                                 g$who$8251$1WS4nL)
                                             (g$bless$7508$1WS4nL
                                               (list
                                                 'define
                                                 g$who$8251$1WS4nL
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8252$1WS4nL))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8251$1WS4nL)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$7656$1WS4nL
                                               '#f
                                               '"invalid name"
                                               g$stx$8235$1WS4nL))))
                                        g$ls/false$8250$1WS4nL)
                                      (g$syntax-violation$7656$1WS4nL
                                        '#f
                                        '"invalid syntax"
                                        g$t$8249$1WS4nL))))
                                 (g$syntax-dispatch$7545$1WS4nL
                                   g$t$8249$1WS4nL
                                   '(_ any any)))))
                             g$t$8242$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$8242$1WS4nL
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8236$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8236$1WS4nL
               '(_ (any . each-any) any . each-any)))))
         g$stx$8235$1WS4nL))))
   (g$trace-define-syntax-macro$7516$1WS4nL
     g$trace-define-syntax-macro$11004$1WS4nL
     (case-lambda
       ((g$stx$8253$1WS4nL)
        ((case-lambda
           ((g$t$8254$1WS4nL)
            ((case-lambda
               ((g$ls/false$8255$1WS4nL)
                (if g$ls/false$8255$1WS4nL
                  (apply
                    (case-lambda
                      ((g$who$8256$1WS4nL g$expr$8257$1WS4nL)
                       (if (g$id?$7267$1WS4nL g$who$8256$1WS4nL)
                         (g$bless$7508$1WS4nL
                           (list
                             'define-syntax
                             g$who$8256$1WS4nL
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8256$1WS4nL)
                               g$expr$8257$1WS4nL)))
                         (g$syntax-violation$7656$1WS4nL
                           '#f
                           '"invalid name"
                           g$stx$8253$1WS4nL))))
                    g$ls/false$8255$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8254$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8254$1WS4nL '(_ any any)))))
         g$stx$8253$1WS4nL))))
   (g$trace-let/rec-syntax$7517$1WS4nL
     g$trace-let/rec-syntax$11005$1WS4nL
     (case-lambda
       ((g$who$8258$1WS4nL)
        (case-lambda
          ((g$stx$8259$1WS4nL)
           ((case-lambda
              ((g$t$8260$1WS4nL)
               ((case-lambda
                  ((g$ls/false$8261$1WS4nL)
                   (if g$ls/false$8261$1WS4nL
                     (apply
                       (case-lambda
                         ((g$lhs*$8262$1WS4nL
                            g$rhs*$8263$1WS4nL
                            g$b$8264$1WS4nL
                            g$b*$8265$1WS4nL)
                          (if (g$valid-bound-ids?$7272$1WS4nL
                                g$lhs*$8262$1WS4nL)
                            ((case-lambda
                               ((g$rhs*$8266$1WS4nL)
                                (g$bless$7508$1WS4nL
                                  (cons
                                    g$who$8258$1WS4nL
                                    (cons
                                      (map list
                                           g$lhs*$8262$1WS4nL
                                           g$rhs*$8266$1WS4nL)
                                      (cons
                                        g$b$8264$1WS4nL
                                        g$b*$8265$1WS4nL))))))
                             (map (case-lambda
                                    ((g$lhs$8267$1WS4nL g$rhs$8268$1WS4nL)
                                     (list
                                       'make-traced-macro
                                       (list 'quote g$lhs$8267$1WS4nL)
                                       g$rhs$8268$1WS4nL)))
                                  g$lhs*$8262$1WS4nL
                                  g$rhs*$8263$1WS4nL))
                            (g$invalid-fmls-error$7510$1WS4nL
                              g$stx$8259$1WS4nL
                              g$lhs*$8262$1WS4nL))))
                       g$ls/false$8261$1WS4nL)
                     (g$syntax-violation$7656$1WS4nL
                       '#f
                       '"invalid syntax"
                       g$t$8260$1WS4nL))))
                (g$syntax-dispatch$7545$1WS4nL
                  g$t$8260$1WS4nL
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8259$1WS4nL))))))
   (g$trace-let-syntax-macro$7518$1WS4nL
     g$trace-let-syntax-macro$11006$1WS4nL
     (g$trace-let/rec-syntax$7517$1WS4nL 'let-syntax))
   (g$trace-letrec-syntax-macro$7519$1WS4nL
     g$trace-letrec-syntax-macro$11007$1WS4nL
     (g$trace-let/rec-syntax$7517$1WS4nL 'letrec-syntax))
   (g$guard-macro$7520$1WS4nL
     g$guard-macro$11008$1WS4nL
     (case-lambda
       ((g$x$8269$1WS4nL)
        (letrec* ((g$gen-clauses$8270$1WS4nL
                    (case-lambda
                      ((g$con$8282$1WS4nL
                         g$outerk$8283$1WS4nL
                         g$clause*$8284$1WS4nL)
                       (letrec* ((g$f$8285$1WS4nL
                                   (case-lambda
                                     ((g$x$8313$1WS4nL g$k$8314$1WS4nL)
                                      ((case-lambda
                                         ((g$t$8315$1WS4nL)
                                          ((case-lambda
                                             ((g$ls/false$8316$1WS4nL)
                                              (if g$ls/false$8316$1WS4nL
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8317$1WS4nL
                                                       g$p$8318$1WS4nL)
                                                     ((case-lambda
                                                        ((g$t$8319$1WS4nL)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8319$1WS4nL
                                                               g$e$8317$1WS4nL))
                                                           (list
                                                             'if
                                                             g$t$8319$1WS4nL
                                                             (list
                                                               g$p$8318$1WS4nL
                                                               g$t$8319$1WS4nL)
                                                             g$k$8314$1WS4nL))))
                                                      (gensym))))
                                                  g$ls/false$8316$1WS4nL)
                                                ((case-lambda
                                                   ((g$t$8320$1WS4nL)
                                                    ((case-lambda
                                                       ((g$ls/false$8321$1WS4nL)
                                                        (if g$ls/false$8321$1WS4nL
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8322$1WS4nL)
                                                               ((case-lambda
                                                                  ((g$t$8323$1WS4nL)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8323$1WS4nL
                                                                         g$e$8322$1WS4nL))
                                                                     (list
                                                                       'if
                                                                       g$t$8323$1WS4nL
                                                                       g$t$8323$1WS4nL
                                                                       g$k$8314$1WS4nL))))
                                                                (gensym))))
                                                            g$ls/false$8321$1WS4nL)
                                                          ((case-lambda
                                                             ((g$t$8324$1WS4nL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8325$1WS4nL)
                                                                  (if g$ls/false$8325$1WS4nL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8326$1WS4nL
                                                                           g$v$8327$1WS4nL
                                                                           g$v*$8328$1WS4nL)
                                                                         (list
                                                                           'if
                                                                           g$e$8326$1WS4nL
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8327$1WS4nL
                                                                               g$v*$8328$1WS4nL))
                                                                           g$k$8314$1WS4nL)))
                                                                      g$ls/false$8325$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$t$8329$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8330$1WS4nL)
                                                                            (if g$ls/false$8330$1WS4nL
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$7656$1WS4nL
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8313$1WS4nL)))
                                                                                g$ls/false$8330$1WS4nL)
                                                                              (g$syntax-violation$7656$1WS4nL
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8329$1WS4nL))))
                                                                         (g$syntax-dispatch$7545$1WS4nL
                                                                           g$t$8329$1WS4nL
                                                                           '_))))
                                                                     g$t$8324$1WS4nL))))
                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                 g$t$8324$1WS4nL
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8320$1WS4nL))))
                                                     (g$syntax-dispatch$7545$1WS4nL
                                                       g$t$8320$1WS4nL
                                                       '(any)))))
                                                 g$t$8315$1WS4nL))))
                                           (g$syntax-dispatch$7545$1WS4nL
                                             g$t$8315$1WS4nL
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8313$1WS4nL))))
                                 (g$f*$8286$1WS4nL
                                   (case-lambda
                                     ((g$x*$8293$1WS4nL)
                                      ((case-lambda
                                         ((g$t$8294$1WS4nL)
                                          ((case-lambda
                                             ((g$ls/false$8295$1WS4nL)
                                              (if g$ls/false$8295$1WS4nL
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8282$1WS4nL)
                                                       '#t)))
                                                  g$ls/false$8295$1WS4nL)
                                                ((case-lambda
                                                   ((g$t$8296$1WS4nL)
                                                    ((case-lambda
                                                       ((g$ls/false$8297$1WS4nL)
                                                        (if g$ls/false$8297$1WS4nL
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8298$1WS4nL
                                                                 g$e*$8299$1WS4nL)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8298$1WS4nL
                                                                     g$e*$8299$1WS4nL))
                                                                 '#f)))
                                                            g$ls/false$8297$1WS4nL)
                                                          ((case-lambda
                                                             ((g$t$8300$1WS4nL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8301$1WS4nL)
                                                                  (if g$ls/false$8301$1WS4nL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8302$1WS4nL
                                                                           g$cls*$8303$1WS4nL)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8286$1WS4nL
                                                                                g$cls*$8303$1WS4nL)))
                                                                           (case-lambda
                                                                             ((g$e$8306$1WS4nL
                                                                                g$g$8307$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$g$8308$1WS4nL
                                                                                    g$e$8309$1WS4nL)
                                                                                  (values
                                                                                    (g$f$8285$1WS4nL
                                                                                      g$cls$8302$1WS4nL
                                                                                      g$e$8309$1WS4nL)
                                                                                    g$g$8308$1WS4nL)))
                                                                               g$g$8307$1WS4nL
                                                                               g$e$8306$1WS4nL))))))
                                                                      g$ls/false$8301$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$t$8310$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8311$1WS4nL)
                                                                            (if g$ls/false$8311$1WS4nL
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8312$1WS4nL)
                                                                                   (g$syntax-violation$7656$1WS4nL
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8312$1WS4nL)))
                                                                                g$ls/false$8311$1WS4nL)
                                                                              (g$syntax-violation$7656$1WS4nL
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8310$1WS4nL))))
                                                                         (g$syntax-dispatch$7545$1WS4nL
                                                                           g$t$8310$1WS4nL
                                                                           'any))))
                                                                     g$t$8300$1WS4nL))))
                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                 g$t$8300$1WS4nL
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8296$1WS4nL))))
                                                     (g$syntax-dispatch$7545$1WS4nL
                                                       g$t$8296$1WS4nL
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8294$1WS4nL))))
                                           (g$syntax-dispatch$7545$1WS4nL
                                             g$t$8294$1WS4nL
                                             '()))))
                                       g$x*$8293$1WS4nL)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8286$1WS4nL g$clause*$8284$1WS4nL)))
                           (case-lambda
                             ((g$code$8289$1WS4nL g$raisek$8290$1WS4nL)
                              ((case-lambda
                                 ((g$raisek$8291$1WS4nL g$code$8292$1WS4nL)
                                  (if g$raisek$8291$1WS4nL
                                    (list
                                      g$outerk$8283$1WS4nL
                                      g$code$8292$1WS4nL)
                                    g$code$8292$1WS4nL)))
                               g$raisek$8290$1WS4nL
                               g$code$8289$1WS4nL)))))))))
          ((case-lambda
             ((g$t$8271$1WS4nL)
              ((case-lambda
                 ((g$ls/false$8272$1WS4nL)
                  (if (if g$ls/false$8272$1WS4nL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8273$1WS4nL
                                 g$clause*$8274$1WS4nL
                                 g$b$8275$1WS4nL
                                 g$b*$8276$1WS4nL)
                               (g$id?$7267$1WS4nL g$con$8273$1WS4nL)))
                            g$ls/false$8272$1WS4nL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8277$1WS4nL
                           g$clause*$8278$1WS4nL
                           g$b$8279$1WS4nL
                           g$b*$8280$1WS4nL)
                         ((case-lambda
                            ((g$outerk$8281$1WS4nL)
                             (g$bless$7508$1WS4nL
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8281$1WS4nL)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8277$1WS4nL)
                                           (g$gen-clauses$8270$1WS4nL
                                             g$con$8277$1WS4nL
                                             g$outerk$8281$1WS4nL
                                             g$clause*$8278$1WS4nL))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8279$1WS4nL
                                                 g$b*$8280$1WS4nL))))))))))))
                          (gensym))))
                      g$ls/false$8272$1WS4nL)
                    (g$syntax-violation$7656$1WS4nL
                      '#f
                      '"invalid syntax"
                      g$t$8271$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL
                 g$t$8271$1WS4nL
                 '(_ (any . each-any) any . each-any)))))
           g$x$8269$1WS4nL)))))
   (g$define-enumeration-macro$7521$1WS4nL
     g$define-enumeration-macro$11009$1WS4nL
     (case-lambda
       ((g$stx$8331$1WS4nL)
        (letrec* ((g$set?$8332$1WS4nL
                    (case-lambda
                      ((g$x$8345$1WS4nL)
                       ((case-lambda
                          ((g$t$8346$1WS4nL)
                           (if g$t$8346$1WS4nL
                             g$t$8346$1WS4nL
                             (begin
                               '#f
                               (if (not (g$memq$4995$1WS4nL
                                          (car g$x$8345$1WS4nL)
                                          (cdr g$x$8345$1WS4nL)))
                                 (begin
                                   '#f
                                   (g$set?$8332$1WS4nL (cdr g$x$8345$1WS4nL)))
                                 '#f)))))
                        (null? g$x$8345$1WS4nL)))))
                  (g$remove-dups$8333$1WS4nL
                    (case-lambda
                      ((g$ls$8344$1WS4nL)
                       (if (null? g$ls$8344$1WS4nL)
                         '()
                         (cons
                           (car g$ls$8344$1WS4nL)
                           (g$remove-dups$8333$1WS4nL
                             (g$remq$5008$1WS4nL
                               (car g$ls$8344$1WS4nL)
                               (cdr g$ls$8344$1WS4nL)))))))))
          ((case-lambda
             ((g$t$8334$1WS4nL)
              ((case-lambda
                 ((g$ls/false$8335$1WS4nL)
                  (if (if g$ls/false$8335$1WS4nL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8336$1WS4nL
                                 g$id*$8337$1WS4nL
                                 g$maker$8338$1WS4nL)
                               (if (g$id?$7267$1WS4nL g$name$8336$1WS4nL)
                                 (if (g$id?$7267$1WS4nL g$maker$8338$1WS4nL)
                                   (begin
                                     '#f
                                     (g$for-all$5001$1WS4nL
                                       g$id?$7267$1WS4nL
                                       g$id*$8337$1WS4nL))
                                   '#f)
                                 '#f)))
                            g$ls/false$8335$1WS4nL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8339$1WS4nL
                           g$id*$8340$1WS4nL
                           g$maker$8341$1WS4nL)
                         ((case-lambda
                            ((g$name*$8342$1WS4nL g$mk$8343$1WS4nL)
                             (g$bless$7508$1WS4nL
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8343$1WS4nL
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8342$1WS4nL))))
                                 (list
                                   'define-syntax
                                   g$name$8339$1WS4nL
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8342$1WS4nL))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8339$1WS4nL)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8341$1WS4nL
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8341$1WS4nL)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8342$1WS4nL))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8341$1WS4nL)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8343$1WS4nL
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8333$1WS4nL
                            (g$syntax->datum$7659$1WS4nL g$id*$8340$1WS4nL))
                          (gensym))))
                      g$ls/false$8335$1WS4nL)
                    (g$syntax-violation$7656$1WS4nL
                      '#f
                      '"invalid syntax"
                      g$t$8334$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL
                 g$t$8334$1WS4nL
                 '(_ any each-any any)))))
           g$stx$8331$1WS4nL)))))
   (g$time-macro$7522$1WS4nL
     g$time-macro$11010$1WS4nL
     (case-lambda
       ((g$stx$8347$1WS4nL)
        ((case-lambda
           ((g$t$8348$1WS4nL)
            ((case-lambda
               ((g$ls/false$8349$1WS4nL)
                (if g$ls/false$8349$1WS4nL
                  (apply
                    (case-lambda
                      ((g$expr$8350$1WS4nL)
                       ((case-lambda
                          ((g$str$8351$1WS4nL)
                           (g$bless$7508$1WS4nL
                             (list
                               'time-it
                               g$str$8351$1WS4nL
                               (list 'lambda '() g$expr$8350$1WS4nL)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6238$1WS4nL)))
                          (case-lambda
                            ((g$p$8354$1WS4nL g$e$8355$1WS4nL)
                             ((case-lambda
                                ((g$e$8356$1WS4nL g$p$8357$1WS4nL)
                                 (begin
                                   (write
                                     (g$syntax->datum$7659$1WS4nL
                                       g$expr$8350$1WS4nL)
                                     g$p$8357$1WS4nL)
                                   (g$e$8356$1WS4nL))))
                              g$e$8355$1WS4nL
                              g$p$8354$1WS4nL)))))))
                    g$ls/false$8349$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8348$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8348$1WS4nL '(_ any)))))
         g$stx$8347$1WS4nL))))
   (g$delay-macro$7523$1WS4nL
     g$delay-macro$11011$1WS4nL
     (case-lambda
       ((g$stx$8358$1WS4nL)
        ((case-lambda
           ((g$t$8359$1WS4nL)
            ((case-lambda
               ((g$ls/false$8360$1WS4nL)
                (if g$ls/false$8360$1WS4nL
                  (apply
                    (case-lambda
                      ((g$expr$8361$1WS4nL)
                       (g$bless$7508$1WS4nL
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8361$1WS4nL)))))
                    g$ls/false$8360$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8359$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8359$1WS4nL '(_ any)))))
         g$stx$8358$1WS4nL))))
   (g$assert-macro$7524$1WS4nL
     g$assert-macro$11012$1WS4nL
     (case-lambda
       ((g$stx$8362$1WS4nL)
        ((case-lambda
           ((g$t$8363$1WS4nL)
            ((case-lambda
               ((g$ls/false$8364$1WS4nL)
                (if g$ls/false$8364$1WS4nL
                  (apply
                    (case-lambda
                      ((g$expr$8365$1WS4nL)
                       ((case-lambda
                          ((g$pos$8366$1WS4nL)
                           (g$bless$7508$1WS4nL
                             (list
                               'unless
                               g$expr$8365$1WS4nL
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8365$1WS4nL)
                                 (list 'quote g$pos$8366$1WS4nL))))))
                        ((case-lambda
                           ((g$t$8367$1WS4nL)
                            (if g$t$8367$1WS4nL
                              g$t$8367$1WS4nL
                              (begin
                                '#f
                                (g$expression-position$7651$1WS4nL
                                  g$expr$8365$1WS4nL)))))
                         (g$expression-position$7651$1WS4nL
                           g$stx$8362$1WS4nL)))))
                    g$ls/false$8364$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8363$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8363$1WS4nL '(_ any)))))
         g$stx$8362$1WS4nL))))
   (g$endianness-macro$7525$1WS4nL
     g$endianness-macro$11013$1WS4nL
     (case-lambda
       ((g$stx$8368$1WS4nL)
        ((case-lambda
           ((g$t$8369$1WS4nL)
            ((case-lambda
               ((g$ls/false$8370$1WS4nL)
                (if g$ls/false$8370$1WS4nL
                  (apply
                    (case-lambda
                      ((g$e$8371$1WS4nL)
                       ((case-lambda
                          ((g$t$8372$1WS4nL)
                           (if (g$memv$4996$1WS4nL g$t$8372$1WS4nL '(little))
                             (g$bless$7508$1WS4nL ''little)
                             (if (g$memv$4996$1WS4nL g$t$8372$1WS4nL '(big))
                               (g$bless$7508$1WS4nL ''big)
                               (g$syntax-violation$7656$1WS4nL
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8368$1WS4nL)))))
                        (g$syntax->datum$7659$1WS4nL g$e$8371$1WS4nL))))
                    g$ls/false$8370$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8369$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8369$1WS4nL '(_ any)))))
         g$stx$8368$1WS4nL))))
   (g$identifier-syntax-macro$7526$1WS4nL
     g$identifier-syntax-macro$11014$1WS4nL
     (case-lambda
       ((g$stx$8373$1WS4nL)
        ((case-lambda
           ((g$t$8374$1WS4nL)
            ((case-lambda
               ((g$ls/false$8375$1WS4nL)
                (if g$ls/false$8375$1WS4nL
                  (apply
                    (case-lambda
                      ((g$expr$8376$1WS4nL)
                       (g$bless$7508$1WS4nL
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8376$1WS4nL))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8376$1WS4nL)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8375$1WS4nL)
                  ((case-lambda
                     ((g$t$8377$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$8378$1WS4nL)
                          (if (if g$ls/false$8378$1WS4nL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8379$1WS4nL
                                         g$expr1$8380$1WS4nL
                                         g$id2$8381$1WS4nL
                                         g$expr2$8382$1WS4nL
                                         g$expr3$8383$1WS4nL)
                                       (if (g$id?$7267$1WS4nL g$id1$8379$1WS4nL)
                                         (if (g$id?$7267$1WS4nL
                                               g$id2$8381$1WS4nL)
                                           (begin
                                             '#f
                                             (g$id?$7267$1WS4nL
                                               g$expr2$8382$1WS4nL))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8378$1WS4nL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8384$1WS4nL
                                   g$expr1$8385$1WS4nL
                                   g$id2$8386$1WS4nL
                                   g$expr2$8387$1WS4nL
                                   g$expr3$8388$1WS4nL)
                                 (g$bless$7508$1WS4nL
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8385$1WS4nL))
                                         (list
                                           (list 'set! 'id g$expr2$8387$1WS4nL)
                                           (list 'syntax g$expr3$8388$1WS4nL))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8385$1WS4nL
                                               '(e* ...))))))))))
                              g$ls/false$8378$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$8377$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$8377$1WS4nL
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8374$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8374$1WS4nL '(_ any)))))
         g$stx$8373$1WS4nL))))
   (g$do-macro$7527$1WS4nL
     g$do-macro$11015$1WS4nL
     (case-lambda
       ((g$stx$8389$1WS4nL)
        (letrec* ((g$bind$8390$1WS4nL
                    (case-lambda
                      ((g$x$8402$1WS4nL)
                       ((case-lambda
                          ((g$t$8403$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$8404$1WS4nL)
                               (if g$ls/false$8404$1WS4nL
                                 (apply
                                   (case-lambda
                                     ((g$x$8405$1WS4nL g$init$8406$1WS4nL)
                                      (list
                                        g$x$8405$1WS4nL
                                        g$init$8406$1WS4nL
                                        g$x$8405$1WS4nL)))
                                   g$ls/false$8404$1WS4nL)
                                 ((case-lambda
                                    ((g$t$8407$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$8408$1WS4nL)
                                         (if g$ls/false$8408$1WS4nL
                                           (apply
                                             (case-lambda
                                               ((g$x$8409$1WS4nL
                                                  g$init$8410$1WS4nL
                                                  g$step$8411$1WS4nL)
                                                (list
                                                  g$x$8409$1WS4nL
                                                  g$init$8410$1WS4nL
                                                  g$step$8411$1WS4nL)))
                                             g$ls/false$8408$1WS4nL)
                                           ((case-lambda
                                              ((g$t$8412$1WS4nL)
                                               ((case-lambda
                                                  ((g$ls/false$8413$1WS4nL)
                                                   (if g$ls/false$8413$1WS4nL
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$7656$1WS4nL
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8389$1WS4nL)))
                                                       g$ls/false$8413$1WS4nL)
                                                     (g$syntax-violation$7656$1WS4nL
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8412$1WS4nL))))
                                                (g$syntax-dispatch$7545$1WS4nL
                                                  g$t$8412$1WS4nL
                                                  '_))))
                                            g$t$8407$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$8407$1WS4nL
                                        '(any any any)))))
                                  g$t$8403$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$8403$1WS4nL
                              '(any any)))))
                        g$x$8402$1WS4nL)))))
          ((case-lambda
             ((g$t$8391$1WS4nL)
              ((case-lambda
                 ((g$ls/false$8392$1WS4nL)
                  (if g$ls/false$8392$1WS4nL
                    (apply
                      (case-lambda
                        ((g$binding*$8393$1WS4nL
                           g$test$8394$1WS4nL
                           g$expr*$8395$1WS4nL
                           g$command*$8396$1WS4nL)
                         ((case-lambda
                            ((g$t$8397$1WS4nL)
                             ((case-lambda
                                ((g$ls/false$8398$1WS4nL)
                                 (if g$ls/false$8398$1WS4nL
                                   (apply
                                     (case-lambda
                                       ((g$x*$8399$1WS4nL
                                          g$init*$8400$1WS4nL
                                          g$step*$8401$1WS4nL)
                                        (if (g$valid-bound-ids?$7272$1WS4nL
                                              g$x*$8399$1WS4nL)
                                          (g$bless$7508$1WS4nL
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8399$1WS4nL
                                                    (list
                                                      'if
                                                      g$test$8394$1WS4nL
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8395$1WS4nL))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8396$1WS4nL
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8401$1WS4nL))))))))
                                              (cons 'loop g$init*$8400$1WS4nL)))
                                          (g$syntax-violation$7656$1WS4nL
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8389$1WS4nL))))
                                     g$ls/false$8398$1WS4nL)
                                   (g$syntax-violation$7656$1WS4nL
                                     '#f
                                     '"invalid syntax"
                                     g$t$8397$1WS4nL))))
                              (g$syntax-dispatch$7545$1WS4nL
                                g$t$8397$1WS4nL
                                '#(each (any any any))))))
                          (map g$bind$8390$1WS4nL g$binding*$8393$1WS4nL))))
                      g$ls/false$8392$1WS4nL)
                    (g$syntax-violation$7656$1WS4nL
                      '#f
                      '"invalid syntax"
                      g$t$8391$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL
                 g$t$8391$1WS4nL
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8389$1WS4nL)))))
   (g$let*-macro$7528$1WS4nL
     g$let*-macro$11016$1WS4nL
     (case-lambda
       ((g$stx$8414$1WS4nL)
        ((case-lambda
           ((g$t$8415$1WS4nL)
            ((case-lambda
               ((g$ls/false$8416$1WS4nL)
                (if (if g$ls/false$8416$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8417$1WS4nL
                               g$rhs*$8418$1WS4nL
                               g$b$8419$1WS4nL
                               g$b*$8420$1WS4nL)
                             (g$for-all$5001$1WS4nL
                               g$id?$7267$1WS4nL
                               g$lhs*$8417$1WS4nL)))
                          g$ls/false$8416$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8421$1WS4nL
                         g$rhs*$8422$1WS4nL
                         g$b$8423$1WS4nL
                         g$b*$8424$1WS4nL)
                       (g$bless$7508$1WS4nL
                         ((letrec ((g$f$8425$1WS4nL
                                     (case-lambda
                                       ((g$x*$8426$1WS4nL)
                                        (if (null? g$x*$8426$1WS4nL)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8423$1WS4nL
                                                g$b*$8424$1WS4nL)))
                                          (list
                                            'let
                                            (list (car g$x*$8426$1WS4nL))
                                            (g$f$8425$1WS4nL
                                              (cdr g$x*$8426$1WS4nL))))))))
                            g$f$8425$1WS4nL)
                          (map list g$lhs*$8421$1WS4nL g$rhs*$8422$1WS4nL)))))
                    g$ls/false$8416$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8415$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8415$1WS4nL
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8414$1WS4nL))))
   (g$or-macro$7529$1WS4nL
     g$or-macro$11017$1WS4nL
     (case-lambda
       ((g$stx$8427$1WS4nL)
        ((case-lambda
           ((g$t$8428$1WS4nL)
            ((case-lambda
               ((g$ls/false$8429$1WS4nL)
                (if g$ls/false$8429$1WS4nL
                  (apply (case-lambda (() '#f)) g$ls/false$8429$1WS4nL)
                  ((case-lambda
                     ((g$t$8430$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$8431$1WS4nL)
                          (if g$ls/false$8431$1WS4nL
                            (apply
                              (case-lambda
                                ((g$e$8432$1WS4nL g$e*$8433$1WS4nL)
                                 (g$bless$7508$1WS4nL
                                   ((letrec ((g$f$8434$1WS4nL
                                               (case-lambda
                                                 ((g$e$8435$1WS4nL
                                                    g$e*$8436$1WS4nL)
                                                  (if (null? g$e*$8436$1WS4nL)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8435$1WS4nL)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8435$1WS4nL))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8434$1WS4nL
                                                          (car g$e*$8436$1WS4nL)
                                                          (cdr g$e*$8436$1WS4nL)))))))))
                                      g$f$8434$1WS4nL)
                                    g$e$8432$1WS4nL
                                    g$e*$8433$1WS4nL))))
                              g$ls/false$8431$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$8430$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$8430$1WS4nL
                         '(_ any . each-any)))))
                   g$t$8428$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8428$1WS4nL '(_)))))
         g$stx$8427$1WS4nL))))
   (g$and-macro$7530$1WS4nL
     g$and-macro$11018$1WS4nL
     (case-lambda
       ((g$stx$8437$1WS4nL)
        ((case-lambda
           ((g$t$8438$1WS4nL)
            ((case-lambda
               ((g$ls/false$8439$1WS4nL)
                (if g$ls/false$8439$1WS4nL
                  (apply (case-lambda (() '#t)) g$ls/false$8439$1WS4nL)
                  ((case-lambda
                     ((g$t$8440$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$8441$1WS4nL)
                          (if g$ls/false$8441$1WS4nL
                            (apply
                              (case-lambda
                                ((g$e$8442$1WS4nL g$e*$8443$1WS4nL)
                                 (g$bless$7508$1WS4nL
                                   ((letrec ((g$f$8444$1WS4nL
                                               (case-lambda
                                                 ((g$e$8445$1WS4nL
                                                    g$e*$8446$1WS4nL)
                                                  (if (null? g$e*$8446$1WS4nL)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8445$1WS4nL)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8445$1WS4nL
                                                        (cons
                                                          (g$f$8444$1WS4nL
                                                            (car g$e*$8446$1WS4nL)
                                                            (cdr g$e*$8446$1WS4nL))
                                                          '(#f)))))))))
                                      g$f$8444$1WS4nL)
                                    g$e$8442$1WS4nL
                                    g$e*$8443$1WS4nL))))
                              g$ls/false$8441$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$8440$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$8440$1WS4nL
                         '(_ any . each-any)))))
                   g$t$8438$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8438$1WS4nL '(_)))))
         g$stx$8437$1WS4nL))))
   (g$cond-macro$7531$1WS4nL
     g$cond-macro$11019$1WS4nL
     (case-lambda
       ((g$stx$8447$1WS4nL)
        ((case-lambda
           ((g$t$8448$1WS4nL)
            ((case-lambda
               ((g$ls/false$8449$1WS4nL)
                (if g$ls/false$8449$1WS4nL
                  (apply
                    (case-lambda
                      ((g$cls$8450$1WS4nL g$cls*$8451$1WS4nL)
                       (g$bless$7508$1WS4nL
                         ((letrec ((g$f$8452$1WS4nL
                                     (case-lambda
                                       ((g$cls$8453$1WS4nL g$cls*$8454$1WS4nL)
                                        (if (null? g$cls*$8454$1WS4nL)
                                          ((case-lambda
                                             ((g$t$8455$1WS4nL)
                                              ((case-lambda
                                                 ((g$ls/false$8456$1WS4nL)
                                                  (if g$ls/false$8456$1WS4nL
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8457$1WS4nL
                                                           g$e*$8458$1WS4nL)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8457$1WS4nL
                                                             g$e*$8458$1WS4nL))))
                                                      g$ls/false$8456$1WS4nL)
                                                    ((case-lambda
                                                       ((g$t$8459$1WS4nL)
                                                        ((case-lambda
                                                           ((g$ls/false$8460$1WS4nL)
                                                            (if g$ls/false$8460$1WS4nL
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8461$1WS4nL
                                                                     g$p$8462$1WS4nL)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8461$1WS4nL))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8462$1WS4nL
                                                                         '(t))))))
                                                                g$ls/false$8460$1WS4nL)
                                                              ((case-lambda
                                                                 ((g$t$8463$1WS4nL)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8464$1WS4nL)
                                                                      (if g$ls/false$8464$1WS4nL
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8465$1WS4nL)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8465$1WS4nL
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8464$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$t$8466$1WS4nL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8467$1WS4nL)
                                                                                (if g$ls/false$8467$1WS4nL
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8468$1WS4nL
                                                                                         g$e*$8469$1WS4nL)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8468$1WS4nL
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8469$1WS4nL))))
                                                                                    g$ls/false$8467$1WS4nL)
                                                                                  ((case-lambda
                                                                                     ((g$t$8470$1WS4nL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8471$1WS4nL)
                                                                                          (if g$ls/false$8471$1WS4nL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7656$1WS4nL
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8447$1WS4nL)))
                                                                                              g$ls/false$8471$1WS4nL)
                                                                                            (g$syntax-violation$7656$1WS4nL
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8470$1WS4nL))))
                                                                                       (g$syntax-dispatch$7545$1WS4nL
                                                                                         g$t$8470$1WS4nL
                                                                                         '_))))
                                                                                   g$t$8466$1WS4nL))))
                                                                             (g$syntax-dispatch$7545$1WS4nL
                                                                               g$t$8466$1WS4nL
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8463$1WS4nL))))
                                                                   (g$syntax-dispatch$7545$1WS4nL
                                                                     g$t$8463$1WS4nL
                                                                     '(any)))))
                                                               g$t$8459$1WS4nL))))
                                                         (g$syntax-dispatch$7545$1WS4nL
                                                           g$t$8459$1WS4nL
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8455$1WS4nL))))
                                               (g$syntax-dispatch$7545$1WS4nL
                                                 g$t$8455$1WS4nL
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8453$1WS4nL)
                                          ((case-lambda
                                             ((g$t$8472$1WS4nL)
                                              ((case-lambda
                                                 ((g$ls/false$8473$1WS4nL)
                                                  (if g$ls/false$8473$1WS4nL
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8474$1WS4nL
                                                           g$e*$8475$1WS4nL)
                                                         (g$syntax-violation$7656$1WS4nL
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8447$1WS4nL)))
                                                      g$ls/false$8473$1WS4nL)
                                                    ((case-lambda
                                                       ((g$t$8476$1WS4nL)
                                                        ((case-lambda
                                                           ((g$ls/false$8477$1WS4nL)
                                                            (if g$ls/false$8477$1WS4nL
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8478$1WS4nL
                                                                     g$p$8479$1WS4nL)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8478$1WS4nL))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8479$1WS4nL
                                                                         '(t))
                                                                       (g$f$8452$1WS4nL
                                                                         (car g$cls*$8454$1WS4nL)
                                                                         (cdr g$cls*$8454$1WS4nL))))))
                                                                g$ls/false$8477$1WS4nL)
                                                              ((case-lambda
                                                                 ((g$t$8480$1WS4nL)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8481$1WS4nL)
                                                                      (if g$ls/false$8481$1WS4nL
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8482$1WS4nL)
                                                                             (list
                                                                               'or
                                                                               g$e$8482$1WS4nL
                                                                               (g$f$8452$1WS4nL
                                                                                 (car g$cls*$8454$1WS4nL)
                                                                                 (cdr g$cls*$8454$1WS4nL)))))
                                                                          g$ls/false$8481$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$t$8483$1WS4nL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8484$1WS4nL)
                                                                                (if g$ls/false$8484$1WS4nL
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8485$1WS4nL
                                                                                         g$e*$8486$1WS4nL)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8485$1WS4nL
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8486$1WS4nL)
                                                                                         (g$f$8452$1WS4nL
                                                                                           (car g$cls*$8454$1WS4nL)
                                                                                           (cdr g$cls*$8454$1WS4nL)))))
                                                                                    g$ls/false$8484$1WS4nL)
                                                                                  ((case-lambda
                                                                                     ((g$t$8487$1WS4nL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8488$1WS4nL)
                                                                                          (if g$ls/false$8488$1WS4nL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7656$1WS4nL
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8447$1WS4nL)))
                                                                                              g$ls/false$8488$1WS4nL)
                                                                                            (g$syntax-violation$7656$1WS4nL
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8487$1WS4nL))))
                                                                                       (g$syntax-dispatch$7545$1WS4nL
                                                                                         g$t$8487$1WS4nL
                                                                                         '_))))
                                                                                   g$t$8483$1WS4nL))))
                                                                             (g$syntax-dispatch$7545$1WS4nL
                                                                               g$t$8483$1WS4nL
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8480$1WS4nL))))
                                                                   (g$syntax-dispatch$7545$1WS4nL
                                                                     g$t$8480$1WS4nL
                                                                     '(any)))))
                                                               g$t$8476$1WS4nL))))
                                                         (g$syntax-dispatch$7545$1WS4nL
                                                           g$t$8476$1WS4nL
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8472$1WS4nL))))
                                               (g$syntax-dispatch$7545$1WS4nL
                                                 g$t$8472$1WS4nL
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8453$1WS4nL))))))
                            g$f$8452$1WS4nL)
                          g$cls$8450$1WS4nL
                          g$cls*$8451$1WS4nL))))
                    g$ls/false$8449$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8448$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8448$1WS4nL
               '(_ any . each-any)))))
         g$stx$8447$1WS4nL))))
   (g$do-include$7532$1WS4nL
     g$do-include$11020$1WS4nL
     (case-lambda
       ((g$stx$8489$1WS4nL g$id$8490$1WS4nL g$filename$8491$1WS4nL)
        ((case-lambda
           ((g$filename$8492$1WS4nL)
            (begin
              (if (not (if (string? g$filename$8492$1WS4nL)
                         (begin '#f (g$id?$7267$1WS4nL g$id$8490$1WS4nL))
                         '#f))
                (g$syntax-violation$7656$1WS4nL
                  '#f
                  '"invalid syntax"
                  g$stx$8489$1WS4nL)
                (void))
              (cons
                (g$bless$7508$1WS4nL 'begin)
                (g$with-input-from-file$6273$1WS4nL
                  g$filename$8492$1WS4nL
                  (case-lambda
                    (()
                     ((letrec ((g$f$8493$1WS4nL
                                 (case-lambda
                                   ((g$ls$8494$1WS4nL)
                                    ((case-lambda
                                       ((g$x$8495$1WS4nL)
                                        (if (eof-object? g$x$8495$1WS4nL)
                                          (reverse g$ls$8494$1WS4nL)
                                          (g$f$8493$1WS4nL
                                            (cons
                                              (g$datum->stx$7250$1WS4nL
                                                g$id$8490$1WS4nL
                                                g$x$8495$1WS4nL)
                                              g$ls$8494$1WS4nL)))))
                                     (read-annotated))))))
                        g$f$8493$1WS4nL)
                      '()))))))))
         (g$stx->datum$7278$1WS4nL g$filename$8491$1WS4nL)))))
   (g$include-macro$7533$1WS4nL
     g$include-macro$11021$1WS4nL
     (case-lambda
       ((g$e$8496$1WS4nL)
        ((case-lambda
           ((g$t$8497$1WS4nL)
            ((case-lambda
               ((g$ls/false$8498$1WS4nL)
                (if g$ls/false$8498$1WS4nL
                  (apply
                    (case-lambda
                      ((g$id$8499$1WS4nL g$filename$8500$1WS4nL)
                       (g$do-include$7532$1WS4nL
                         g$e$8496$1WS4nL
                         g$id$8499$1WS4nL
                         g$filename$8500$1WS4nL)))
                    g$ls/false$8498$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8497$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8497$1WS4nL '(any any)))))
         g$e$8496$1WS4nL))))
   (g$include-into-macro$7534$1WS4nL
     g$include-into-macro$11022$1WS4nL
     (case-lambda
       ((g$e$8501$1WS4nL)
        ((case-lambda
           ((g$t$8502$1WS4nL)
            ((case-lambda
               ((g$ls/false$8503$1WS4nL)
                (if g$ls/false$8503$1WS4nL
                  (apply
                    (case-lambda
                      ((g$id$8504$1WS4nL g$filename$8505$1WS4nL)
                       (g$do-include$7532$1WS4nL
                         g$e$8501$1WS4nL
                         g$id$8504$1WS4nL
                         g$filename$8505$1WS4nL)))
                    g$ls/false$8503$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8502$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$8502$1WS4nL '(_ any any)))))
         g$e$8501$1WS4nL))))
   (g$syntax-rules-macro$7535$1WS4nL
     g$syntax-rules-macro$11023$1WS4nL
     (case-lambda
       ((g$e$8506$1WS4nL)
        ((case-lambda
           ((g$t$8507$1WS4nL)
            ((case-lambda
               ((g$ls/false$8508$1WS4nL)
                (if g$ls/false$8508$1WS4nL
                  (apply
                    (case-lambda
                      ((g$lits$8509$1WS4nL
                         g$pat*$8510$1WS4nL
                         g$tmp*$8511$1WS4nL)
                       (begin
                         (g$verify-literals$7548$1WS4nL
                           g$lits$8509$1WS4nL
                           g$e$8506$1WS4nL)
                         (g$bless$7508$1WS4nL
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8509$1WS4nL
                                   (map (case-lambda
                                          ((g$pat$8512$1WS4nL g$tmp$8513$1WS4nL)
                                           ((case-lambda
                                              ((g$t$8514$1WS4nL)
                                               ((case-lambda
                                                  ((g$ls/false$8515$1WS4nL)
                                                   (if g$ls/false$8515$1WS4nL
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8516$1WS4nL)
                                                          (list
                                                            (cons
                                                              'g
                                                              g$rest$8516$1WS4nL)
                                                            (list
                                                              'syntax
                                                              g$tmp$8513$1WS4nL))))
                                                       g$ls/false$8515$1WS4nL)
                                                     ((case-lambda
                                                        ((g$t$8517$1WS4nL)
                                                         ((case-lambda
                                                            ((g$ls/false$8518$1WS4nL)
                                                             (if g$ls/false$8518$1WS4nL
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7656$1WS4nL
                                                                      '#f
                                                                      '"invalid syntax-rules pattern"
                                                                      g$e$8506$1WS4nL
                                                                      g$pat$8512$1WS4nL)))
                                                                 g$ls/false$8518$1WS4nL)
                                                               (g$syntax-violation$7656$1WS4nL
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$8517$1WS4nL))))
                                                          (g$syntax-dispatch$7545$1WS4nL
                                                            g$t$8517$1WS4nL
                                                            '_))))
                                                      g$t$8514$1WS4nL))))
                                                (g$syntax-dispatch$7545$1WS4nL
                                                  g$t$8514$1WS4nL
                                                  '(_ . any)))))
                                            g$pat$8512$1WS4nL)))
                                        g$pat*$8510$1WS4nL
                                        g$tmp*$8511$1WS4nL)))))))))
                    g$ls/false$8508$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$8507$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$8507$1WS4nL
               '(_ each-any . #(each (any any)))))))
         g$e$8506$1WS4nL))))
   (g$quasiquote-macro$7536$1WS4nL
     g$quasiquote-macro$11024$1WS4nL
     ((case-lambda
        (()
         (letrec* ((g$datum$8519$1WS4nL
                     (case-lambda
                       ((g$x$8650$1WS4nL)
                        (list
                          (g$scheme-stx$7488$1WS4nL 'quote)
                          (g$mkstx$7255$1WS4nL g$x$8650$1WS4nL '() '() '())))))
                   (g$quasicons*$8535$1WS4nL
                     (case-lambda
                       ((g$x$8646$1WS4nL g$y$8647$1WS4nL)
                        ((letrec ((g$f$8648$1WS4nL
                                    (case-lambda
                                      ((g$x$8649$1WS4nL)
                                       (if (null? g$x$8649$1WS4nL)
                                         g$y$8647$1WS4nL
                                         (g$quasicons$8536$1WS4nL
                                           (car g$x$8649$1WS4nL)
                                           (g$f$8648$1WS4nL
                                             (cdr g$x$8649$1WS4nL))))))))
                           g$f$8648$1WS4nL)
                         g$x$8646$1WS4nL))))
                   (g$quasicons$8536$1WS4nL
                     (case-lambda
                       ((g$x$8627$1WS4nL g$y$8628$1WS4nL)
                        ((case-lambda
                           ((g$t$8629$1WS4nL)
                            ((case-lambda
                               ((g$ls/false$8630$1WS4nL)
                                (if g$ls/false$8630$1WS4nL
                                  (apply
                                    (case-lambda
                                      ((g$dy$8631$1WS4nL)
                                       ((case-lambda
                                          ((g$t$8632$1WS4nL)
                                           ((case-lambda
                                              ((g$ls/false$8633$1WS4nL)
                                               (if g$ls/false$8633$1WS4nL
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$8634$1WS4nL)
                                                      (list
                                                        (g$scheme-stx$7488$1WS4nL
                                                          'quote)
                                                        (cons
                                                          g$dx$8634$1WS4nL
                                                          g$dy$8631$1WS4nL))))
                                                   g$ls/false$8633$1WS4nL)
                                                 ((case-lambda
                                                    ((g$t$8635$1WS4nL)
                                                     ((case-lambda
                                                        ((g$ls/false$8636$1WS4nL)
                                                         (if g$ls/false$8636$1WS4nL
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$8637$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8638$1WS4nL)
                                                                        (if g$ls/false$8638$1WS4nL
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7488$1WS4nL
                                                                                   'list)
                                                                                 g$x$8627$1WS4nL)))
                                                                            g$ls/false$8638$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$t$8639$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8640$1WS4nL)
                                                                                  (if g$ls/false$8640$1WS4nL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7488$1WS4nL
                                                                                             'cons)
                                                                                           g$x$8627$1WS4nL
                                                                                           g$y$8628$1WS4nL)))
                                                                                      g$ls/false$8640$1WS4nL)
                                                                                    (g$syntax-violation$7656$1WS4nL
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8639$1WS4nL))))
                                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                                 g$t$8639$1WS4nL
                                                                                 '_))))
                                                                           g$t$8637$1WS4nL))))
                                                                     (g$syntax-dispatch$7545$1WS4nL
                                                                       g$t$8637$1WS4nL
                                                                       '()))))
                                                                 g$dy$8631$1WS4nL)))
                                                             g$ls/false$8636$1WS4nL)
                                                           (g$syntax-violation$7656$1WS4nL
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$8635$1WS4nL))))
                                                      (g$syntax-dispatch$7545$1WS4nL
                                                        g$t$8635$1WS4nL
                                                        '_))))
                                                  g$t$8632$1WS4nL))))
                                            (g$syntax-dispatch$7545$1WS4nL
                                              g$t$8632$1WS4nL
                                              '(#(scheme-id quote) any)))))
                                        g$x$8627$1WS4nL)))
                                    g$ls/false$8630$1WS4nL)
                                  ((case-lambda
                                     ((g$t$8641$1WS4nL)
                                      ((case-lambda
                                         ((g$ls/false$8642$1WS4nL)
                                          (if g$ls/false$8642$1WS4nL
                                            (apply
                                              (case-lambda
                                                ((g$stuff$8643$1WS4nL)
                                                 (g$cons*$5003$1WS4nL
                                                   (g$scheme-stx$7488$1WS4nL
                                                     'list)
                                                   g$x$8627$1WS4nL
                                                   g$stuff$8643$1WS4nL)))
                                              g$ls/false$8642$1WS4nL)
                                            ((case-lambda
                                               ((g$t$8644$1WS4nL)
                                                ((case-lambda
                                                   ((g$ls/false$8645$1WS4nL)
                                                    (if g$ls/false$8645$1WS4nL
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7488$1WS4nL
                                                               'cons)
                                                             g$x$8627$1WS4nL
                                                             g$y$8628$1WS4nL)))
                                                        g$ls/false$8645$1WS4nL)
                                                      (g$syntax-violation$7656$1WS4nL
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$8644$1WS4nL))))
                                                 (g$syntax-dispatch$7545$1WS4nL
                                                   g$t$8644$1WS4nL
                                                   '_))))
                                             g$t$8641$1WS4nL))))
                                       (g$syntax-dispatch$7545$1WS4nL
                                         g$t$8641$1WS4nL
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$8629$1WS4nL))))
                             (g$syntax-dispatch$7545$1WS4nL
                               g$t$8629$1WS4nL
                               '(#(scheme-id quote) any)))))
                         g$y$8628$1WS4nL))))
                   (g$quasiappend$8537$1WS4nL
                     (case-lambda
                       ((g$x$8614$1WS4nL g$y$8615$1WS4nL)
                        ((case-lambda
                           ((g$ls$8616$1WS4nL)
                            (if (null? g$ls$8616$1WS4nL)
                              (list (g$scheme-stx$7488$1WS4nL 'quote) '())
                              (if (null? (cdr g$ls$8616$1WS4nL))
                                (car g$ls$8616$1WS4nL)
                                (g$cons*$5003$1WS4nL
                                  (g$scheme-stx$7488$1WS4nL 'append)
                                  g$ls$8616$1WS4nL)))))
                         ((letrec ((g$f$8617$1WS4nL
                                     (case-lambda
                                       ((g$x$8618$1WS4nL)
                                        (if (null? g$x$8618$1WS4nL)
                                          ((case-lambda
                                             ((g$t$8619$1WS4nL)
                                              ((case-lambda
                                                 ((g$ls/false$8620$1WS4nL)
                                                  (if g$ls/false$8620$1WS4nL
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$8620$1WS4nL)
                                                    ((case-lambda
                                                       ((g$t$8621$1WS4nL)
                                                        ((case-lambda
                                                           ((g$ls/false$8622$1WS4nL)
                                                            (if g$ls/false$8622$1WS4nL
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$8615$1WS4nL)))
                                                                g$ls/false$8622$1WS4nL)
                                                              (g$syntax-violation$7656$1WS4nL
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8621$1WS4nL))))
                                                         (g$syntax-dispatch$7545$1WS4nL
                                                           g$t$8621$1WS4nL
                                                           '_))))
                                                     g$t$8619$1WS4nL))))
                                               (g$syntax-dispatch$7545$1WS4nL
                                                 g$t$8619$1WS4nL
                                                 '(#(scheme-id quote) ())))))
                                           g$y$8615$1WS4nL)
                                          ((case-lambda
                                             ((g$t$8623$1WS4nL)
                                              ((case-lambda
                                                 ((g$ls/false$8624$1WS4nL)
                                                  (if g$ls/false$8624$1WS4nL
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$8617$1WS4nL
                                                           (cdr g$x$8618$1WS4nL))))
                                                      g$ls/false$8624$1WS4nL)
                                                    ((case-lambda
                                                       ((g$t$8625$1WS4nL)
                                                        ((case-lambda
                                                           ((g$ls/false$8626$1WS4nL)
                                                            (if g$ls/false$8626$1WS4nL
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$8618$1WS4nL)
                                                                     (g$f$8617$1WS4nL
                                                                       (cdr g$x$8618$1WS4nL)))))
                                                                g$ls/false$8626$1WS4nL)
                                                              (g$syntax-violation$7656$1WS4nL
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8625$1WS4nL))))
                                                         (g$syntax-dispatch$7545$1WS4nL
                                                           g$t$8625$1WS4nL
                                                           '_))))
                                                     g$t$8623$1WS4nL))))
                                               (g$syntax-dispatch$7545$1WS4nL
                                                 g$t$8623$1WS4nL
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$8618$1WS4nL)))))))
                            g$f$8617$1WS4nL)
                          g$x$8614$1WS4nL)))))
                   (g$quasivector$8538$1WS4nL
                     (case-lambda
                       ((g$x$8589$1WS4nL)
                        ((case-lambda
                           ((g$pat-x$8590$1WS4nL)
                            ((case-lambda
                               ((g$t$8591$1WS4nL)
                                ((case-lambda
                                   ((g$ls/false$8592$1WS4nL)
                                    (if g$ls/false$8592$1WS4nL
                                      (apply
                                        (case-lambda
                                          ((g$x*$8593$1WS4nL)
                                           (list
                                             (g$scheme-stx$7488$1WS4nL 'quote)
                                             (list->vector g$x*$8593$1WS4nL))))
                                        g$ls/false$8592$1WS4nL)
                                      ((case-lambda
                                         ((g$t$8594$1WS4nL)
                                          ((case-lambda
                                             ((g$ls/false$8595$1WS4nL)
                                              (if g$ls/false$8595$1WS4nL
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8596$1WS4nL
                                                                 (case-lambda
                                                                   ((g$x$8597$1WS4nL
                                                                      g$k$8598$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$t$8599$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8600$1WS4nL)
                                                                            (if g$ls/false$8600$1WS4nL
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8601$1WS4nL)
                                                                                   (g$k$8598$1WS4nL
                                                                                     (map (case-lambda
                                                                                            ((g$x$8602$1WS4nL)
                                                                                             (list
                                                                                               (g$scheme-stx$7488$1WS4nL
                                                                                                 'quote)
                                                                                               g$x$8602$1WS4nL)))
                                                                                          g$x*$8601$1WS4nL))))
                                                                                g$ls/false$8600$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$t$8603$1WS4nL)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8604$1WS4nL)
                                                                                      (if g$ls/false$8604$1WS4nL
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8605$1WS4nL)
                                                                                             (g$k$8598$1WS4nL
                                                                                               g$x*$8605$1WS4nL)))
                                                                                          g$ls/false$8604$1WS4nL)
                                                                                        ((case-lambda
                                                                                           ((g$t$8606$1WS4nL)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8607$1WS4nL)
                                                                                                (if g$ls/false$8607$1WS4nL
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8608$1WS4nL
                                                                                                         g$y$8609$1WS4nL)
                                                                                                       (g$f$8596$1WS4nL
                                                                                                         g$y$8609$1WS4nL
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8610$1WS4nL)
                                                                                                            (g$k$8598$1WS4nL
                                                                                                              (cons
                                                                                                                g$x$8608$1WS4nL
                                                                                                                g$ls$8610$1WS4nL)))))))
                                                                                                    g$ls/false$8607$1WS4nL)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8611$1WS4nL)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8612$1WS4nL)
                                                                                                          (if g$ls/false$8612$1WS4nL
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7488$1WS4nL
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8590$1WS4nL)))
                                                                                                              g$ls/false$8612$1WS4nL)
                                                                                                            (g$syntax-violation$7656$1WS4nL
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8611$1WS4nL))))
                                                                                                       (g$syntax-dispatch$7545$1WS4nL
                                                                                                         g$t$8611$1WS4nL
                                                                                                         '_))))
                                                                                                   g$t$8606$1WS4nL))))
                                                                                             (g$syntax-dispatch$7545$1WS4nL
                                                                                               g$t$8606$1WS4nL
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8603$1WS4nL))))
                                                                                   (g$syntax-dispatch$7545$1WS4nL
                                                                                     g$t$8603$1WS4nL
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8599$1WS4nL))))
                                                                         (g$syntax-dispatch$7545$1WS4nL
                                                                           g$t$8599$1WS4nL
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8597$1WS4nL)))))
                                                        g$f$8596$1WS4nL)
                                                      g$x$8589$1WS4nL
                                                      (case-lambda
                                                        ((g$ls$8613$1WS4nL)
                                                         (g$cons*$5003$1WS4nL
                                                           (g$scheme-stx$7488$1WS4nL
                                                             'vector)
                                                           g$ls$8613$1WS4nL))))))
                                                  g$ls/false$8595$1WS4nL)
                                                (g$syntax-violation$7656$1WS4nL
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8594$1WS4nL))))
                                           (g$syntax-dispatch$7545$1WS4nL
                                             g$t$8594$1WS4nL
                                             '_))))
                                       g$t$8591$1WS4nL))))
                                 (g$syntax-dispatch$7545$1WS4nL
                                   g$t$8591$1WS4nL
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8590$1WS4nL)))
                         g$x$8589$1WS4nL))))
                   (g$vquasi$8539$1WS4nL
                     (case-lambda
                       ((g$p$8572$1WS4nL g$lev$8573$1WS4nL)
                        ((case-lambda
                           ((g$t$8574$1WS4nL)
                            ((case-lambda
                               ((g$ls/false$8575$1WS4nL)
                                (if g$ls/false$8575$1WS4nL
                                  (apply
                                    (case-lambda
                                      ((g$p$8576$1WS4nL g$q$8577$1WS4nL)
                                       ((case-lambda
                                          ((g$t$8578$1WS4nL)
                                           ((case-lambda
                                              ((g$ls/false$8579$1WS4nL)
                                               (if g$ls/false$8579$1WS4nL
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8580$1WS4nL)
                                                      (if (= g$lev$8573$1WS4nL
                                                             '0)
                                                        (g$quasicons*$8535$1WS4nL
                                                          g$p$8580$1WS4nL
                                                          (g$vquasi$8539$1WS4nL
                                                            g$q$8577$1WS4nL
                                                            g$lev$8573$1WS4nL))
                                                        (g$quasicons$8536$1WS4nL
                                                          (g$quasicons$8536$1WS4nL
                                                            (g$datum$8519$1WS4nL
                                                              'unquote)
                                                            (g$quasi$8540$1WS4nL
                                                              g$p$8580$1WS4nL
                                                              (- g$lev$8573$1WS4nL
                                                                 '1)))
                                                          (g$vquasi$8539$1WS4nL
                                                            g$q$8577$1WS4nL
                                                            g$lev$8573$1WS4nL)))))
                                                   g$ls/false$8579$1WS4nL)
                                                 ((case-lambda
                                                    ((g$t$8581$1WS4nL)
                                                     ((case-lambda
                                                        ((g$ls/false$8582$1WS4nL)
                                                         (if g$ls/false$8582$1WS4nL
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8583$1WS4nL)
                                                                (if (= g$lev$8573$1WS4nL
                                                                       '0)
                                                                  (g$quasiappend$8537$1WS4nL
                                                                    g$p$8583$1WS4nL
                                                                    (g$vquasi$8539$1WS4nL
                                                                      g$q$8577$1WS4nL
                                                                      g$lev$8573$1WS4nL))
                                                                  (g$quasicons$8536$1WS4nL
                                                                    (g$quasicons$8536$1WS4nL
                                                                      (g$datum$8519$1WS4nL
                                                                        'unquote-splicing)
                                                                      (g$quasi$8540$1WS4nL
                                                                        g$p$8583$1WS4nL
                                                                        (- g$lev$8573$1WS4nL
                                                                           '1)))
                                                                    (g$vquasi$8539$1WS4nL
                                                                      g$q$8577$1WS4nL
                                                                      g$lev$8573$1WS4nL)))))
                                                             g$ls/false$8582$1WS4nL)
                                                           ((case-lambda
                                                              ((g$t$8584$1WS4nL)
                                                               ((case-lambda
                                                                  ((g$ls/false$8585$1WS4nL)
                                                                   (if g$ls/false$8585$1WS4nL
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8586$1WS4nL)
                                                                          (g$quasicons$8536$1WS4nL
                                                                            (g$quasi$8540$1WS4nL
                                                                              g$p$8586$1WS4nL
                                                                              g$lev$8573$1WS4nL)
                                                                            (g$vquasi$8539$1WS4nL
                                                                              g$q$8577$1WS4nL
                                                                              g$lev$8573$1WS4nL))))
                                                                       g$ls/false$8585$1WS4nL)
                                                                     (g$syntax-violation$7656$1WS4nL
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8584$1WS4nL))))
                                                                (g$syntax-dispatch$7545$1WS4nL
                                                                  g$t$8584$1WS4nL
                                                                  'any))))
                                                            g$t$8581$1WS4nL))))
                                                      (g$syntax-dispatch$7545$1WS4nL
                                                        g$t$8581$1WS4nL
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8578$1WS4nL))))
                                            (g$syntax-dispatch$7545$1WS4nL
                                              g$t$8578$1WS4nL
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8576$1WS4nL)))
                                    g$ls/false$8575$1WS4nL)
                                  ((case-lambda
                                     ((g$t$8587$1WS4nL)
                                      ((case-lambda
                                         ((g$ls/false$8588$1WS4nL)
                                          (if g$ls/false$8588$1WS4nL
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7488$1WS4nL
                                                     'quote)
                                                   '())))
                                              g$ls/false$8588$1WS4nL)
                                            (g$syntax-violation$7656$1WS4nL
                                              '#f
                                              '"invalid syntax"
                                              g$t$8587$1WS4nL))))
                                       (g$syntax-dispatch$7545$1WS4nL
                                         g$t$8587$1WS4nL
                                         '()))))
                                   g$t$8574$1WS4nL))))
                             (g$syntax-dispatch$7545$1WS4nL
                               g$t$8574$1WS4nL
                               '(any . any)))))
                         g$p$8572$1WS4nL))))
                   (g$quasi$8540$1WS4nL
                     (case-lambda
                       ((g$p$8545$1WS4nL g$lev$8546$1WS4nL)
                        ((case-lambda
                           ((g$t$8547$1WS4nL)
                            ((case-lambda
                               ((g$ls/false$8548$1WS4nL)
                                (if g$ls/false$8548$1WS4nL
                                  (apply
                                    (case-lambda
                                      ((g$p$8549$1WS4nL)
                                       (if (= g$lev$8546$1WS4nL '0)
                                         g$p$8549$1WS4nL
                                         (g$quasicons$8536$1WS4nL
                                           (g$datum$8519$1WS4nL 'unquote)
                                           (g$quasi$8540$1WS4nL
                                             (list g$p$8549$1WS4nL)
                                             (- g$lev$8546$1WS4nL '1))))))
                                    g$ls/false$8548$1WS4nL)
                                  ((case-lambda
                                     ((g$t$8550$1WS4nL)
                                      ((case-lambda
                                         ((g$ls/false$8551$1WS4nL)
                                          (if g$ls/false$8551$1WS4nL
                                            (apply
                                              (case-lambda
                                                ((g$p$8552$1WS4nL
                                                   g$q$8553$1WS4nL)
                                                 (if (= g$lev$8546$1WS4nL '0)
                                                   (g$quasicons*$8535$1WS4nL
                                                     g$p$8552$1WS4nL
                                                     (g$quasi$8540$1WS4nL
                                                       g$q$8553$1WS4nL
                                                       g$lev$8546$1WS4nL))
                                                   (g$quasicons$8536$1WS4nL
                                                     (g$quasicons$8536$1WS4nL
                                                       (g$datum$8519$1WS4nL
                                                         'unquote)
                                                       (g$quasi$8540$1WS4nL
                                                         g$p$8552$1WS4nL
                                                         (- g$lev$8546$1WS4nL
                                                            '1)))
                                                     (g$quasi$8540$1WS4nL
                                                       g$q$8553$1WS4nL
                                                       g$lev$8546$1WS4nL)))))
                                              g$ls/false$8551$1WS4nL)
                                            ((case-lambda
                                               ((g$t$8554$1WS4nL)
                                                ((case-lambda
                                                   ((g$ls/false$8555$1WS4nL)
                                                    (if g$ls/false$8555$1WS4nL
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8556$1WS4nL
                                                             g$q$8557$1WS4nL)
                                                           (if (= g$lev$8546$1WS4nL
                                                                  '0)
                                                             (g$quasiappend$8537$1WS4nL
                                                               g$p$8556$1WS4nL
                                                               (g$quasi$8540$1WS4nL
                                                                 g$q$8557$1WS4nL
                                                                 g$lev$8546$1WS4nL))
                                                             (g$quasicons$8536$1WS4nL
                                                               (g$quasicons$8536$1WS4nL
                                                                 (g$datum$8519$1WS4nL
                                                                   'unquote-splicing)
                                                                 (g$quasi$8540$1WS4nL
                                                                   g$p$8556$1WS4nL
                                                                   (- g$lev$8546$1WS4nL
                                                                      '1)))
                                                               (g$quasi$8540$1WS4nL
                                                                 g$q$8557$1WS4nL
                                                                 g$lev$8546$1WS4nL)))))
                                                        g$ls/false$8555$1WS4nL)
                                                      ((case-lambda
                                                         ((g$t$8558$1WS4nL)
                                                          ((case-lambda
                                                             ((g$ls/false$8559$1WS4nL)
                                                              (if g$ls/false$8559$1WS4nL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8560$1WS4nL)
                                                                     (g$quasicons$8536$1WS4nL
                                                                       (g$datum$8519$1WS4nL
                                                                         'quasiquote)
                                                                       (g$quasi$8540$1WS4nL
                                                                         (list
                                                                           g$p$8560$1WS4nL)
                                                                         (+ g$lev$8546$1WS4nL
                                                                            '1)))))
                                                                  g$ls/false$8559$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$t$8561$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8562$1WS4nL)
                                                                        (if g$ls/false$8562$1WS4nL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8563$1WS4nL
                                                                                 g$q$8564$1WS4nL)
                                                                               (g$quasicons$8536$1WS4nL
                                                                                 (g$quasi$8540$1WS4nL
                                                                                   g$p$8563$1WS4nL
                                                                                   g$lev$8546$1WS4nL)
                                                                                 (g$quasi$8540$1WS4nL
                                                                                   g$q$8564$1WS4nL
                                                                                   g$lev$8546$1WS4nL))))
                                                                            g$ls/false$8562$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$t$8565$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8566$1WS4nL)
                                                                                  (if (if g$ls/false$8566$1WS4nL
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8567$1WS4nL)
                                                                                               (not (g$stx?$7239$1WS4nL
                                                                                                      g$x$8567$1WS4nL))))
                                                                                            g$ls/false$8566$1WS4nL))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8568$1WS4nL)
                                                                                         (g$quasivector$8538$1WS4nL
                                                                                           (g$vquasi$8539$1WS4nL
                                                                                             g$x$8568$1WS4nL
                                                                                             g$lev$8546$1WS4nL))))
                                                                                      g$ls/false$8566$1WS4nL)
                                                                                    ((case-lambda
                                                                                       ((g$t$8569$1WS4nL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8570$1WS4nL)
                                                                                            (if g$ls/false$8570$1WS4nL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8571$1WS4nL)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7488$1WS4nL
                                                                                                       'quote)
                                                                                                     g$p$8571$1WS4nL)))
                                                                                                g$ls/false$8570$1WS4nL)
                                                                                              (g$syntax-violation$7656$1WS4nL
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8569$1WS4nL))))
                                                                                         (g$syntax-dispatch$7545$1WS4nL
                                                                                           g$t$8569$1WS4nL
                                                                                           'any))))
                                                                                     g$t$8565$1WS4nL))))
                                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                                 g$t$8565$1WS4nL
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8561$1WS4nL))))
                                                                     (g$syntax-dispatch$7545$1WS4nL
                                                                       g$t$8561$1WS4nL
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8558$1WS4nL))))
                                                           (g$syntax-dispatch$7545$1WS4nL
                                                             g$t$8558$1WS4nL
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8554$1WS4nL))))
                                                 (g$syntax-dispatch$7545$1WS4nL
                                                   g$t$8554$1WS4nL
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8550$1WS4nL))))
                                       (g$syntax-dispatch$7545$1WS4nL
                                         g$t$8550$1WS4nL
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8547$1WS4nL))))
                             (g$syntax-dispatch$7545$1WS4nL
                               g$t$8547$1WS4nL
                               '(#(scheme-id unquote) any)))))
                         g$p$8545$1WS4nL)))))
           (case-lambda
             ((g$x$8541$1WS4nL)
              ((case-lambda
                 ((g$t$8542$1WS4nL)
                  ((case-lambda
                     ((g$ls/false$8543$1WS4nL)
                      (if g$ls/false$8543$1WS4nL
                        (apply
                          (case-lambda
                            ((g$e$8544$1WS4nL)
                             (g$quasi$8540$1WS4nL g$e$8544$1WS4nL '0)))
                          g$ls/false$8543$1WS4nL)
                        (g$syntax-violation$7656$1WS4nL
                          '#f
                          '"invalid syntax"
                          g$t$8542$1WS4nL))))
                   (g$syntax-dispatch$7545$1WS4nL g$t$8542$1WS4nL '(_ any)))))
               g$x$8541$1WS4nL))))))))
   (g$quasisyntax-macro$7537$1WS4nL
     g$quasisyntax-macro$11025$1WS4nL
     ((case-lambda
        (()
         (letrec* ((g$quasi$8651$1WS4nL
                     (case-lambda
                       ((g$p$8665$1WS4nL g$lev$8666$1WS4nL)
                        ((case-lambda
                           ((g$t$8667$1WS4nL)
                            ((case-lambda
                               ((g$ls/false$8668$1WS4nL)
                                (if g$ls/false$8668$1WS4nL
                                  (apply
                                    (case-lambda
                                      ((g$p$8669$1WS4nL)
                                       (if (= g$lev$8666$1WS4nL '0)
                                         ((case-lambda
                                            ((g$g$8670$1WS4nL)
                                             (values
                                               (list g$g$8670$1WS4nL)
                                               (list g$p$8669$1WS4nL)
                                               g$g$8670$1WS4nL)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$8651$1WS4nL
                                                g$p$8669$1WS4nL
                                                (- g$lev$8666$1WS4nL '1))))
                                           (case-lambda
                                             ((g$lhs*$8674$1WS4nL
                                                g$rhs*$8675$1WS4nL
                                                g$p$8676$1WS4nL)
                                              ((case-lambda
                                                 ((g$p$8677$1WS4nL
                                                    g$rhs*$8678$1WS4nL
                                                    g$lhs*$8679$1WS4nL)
                                                  (values
                                                    g$lhs*$8679$1WS4nL
                                                    g$rhs*$8678$1WS4nL
                                                    (list
                                                      'unsyntax
                                                      g$p$8677$1WS4nL))))
                                               g$p$8676$1WS4nL
                                               g$rhs*$8675$1WS4nL
                                               g$lhs*$8674$1WS4nL)))))))
                                    g$ls/false$8668$1WS4nL)
                                  ((case-lambda
                                     ((g$t$8680$1WS4nL)
                                      ((case-lambda
                                         ((g$ls/false$8681$1WS4nL)
                                          (if (if g$ls/false$8681$1WS4nL
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$8666$1WS4nL
                                                          '0)))
                                                    g$ls/false$8681$1WS4nL))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$7656$1WS4nL
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$8665$1WS4nL)))
                                              g$ls/false$8681$1WS4nL)
                                            ((case-lambda
                                               ((g$t$8682$1WS4nL)
                                                ((case-lambda
                                                   ((g$ls/false$8683$1WS4nL)
                                                    (if g$ls/false$8683$1WS4nL
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$8684$1WS4nL
                                                             g$q$8685$1WS4nL)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$8651$1WS4nL
                                                                  g$q$8685$1WS4nL
                                                                  g$lev$8666$1WS4nL)))
                                                             (case-lambda
                                                               ((g$lhs*$8689$1WS4nL
                                                                  g$rhs*$8690$1WS4nL
                                                                  g$q$8691$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$q$8692$1WS4nL
                                                                      g$rhs*$8693$1WS4nL
                                                                      g$lhs*$8694$1WS4nL)
                                                                    (if (= g$lev$8666$1WS4nL
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$8695$1WS4nL)
                                                                          (values
                                                                            (append
                                                                              g$g*$8695$1WS4nL
                                                                              g$lhs*$8694$1WS4nL)
                                                                            (append
                                                                              g$p*$8684$1WS4nL
                                                                              g$rhs*$8693$1WS4nL)
                                                                            (append
                                                                              g$g*$8695$1WS4nL
                                                                              g$q$8692$1WS4nL))))
                                                                       (map (case-lambda
                                                                              ((g$x$8696$1WS4nL)
                                                                               (gensym)))
                                                                            g$p*$8684$1WS4nL))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$8651$1WS4nL
                                                                             g$p*$8684$1WS4nL
                                                                             (- g$lev$8666$1WS4nL
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$8700$1WS4nL
                                                                             g$rhs2*$8701$1WS4nL
                                                                             g$p*$8702$1WS4nL)
                                                                           ((case-lambda
                                                                              ((g$p*$8703$1WS4nL
                                                                                 g$rhs2*$8704$1WS4nL
                                                                                 g$lhs2*$8705$1WS4nL)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$8705$1WS4nL
                                                                                   g$lhs*$8694$1WS4nL)
                                                                                 (append
                                                                                   g$rhs2*$8704$1WS4nL
                                                                                   g$rhs*$8693$1WS4nL)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$8703$1WS4nL)
                                                                                   g$q$8692$1WS4nL))))
                                                                            g$p*$8702$1WS4nL
                                                                            g$rhs2*$8701$1WS4nL
                                                                            g$lhs2*$8700$1WS4nL)))))))
                                                                 g$q$8691$1WS4nL
                                                                 g$rhs*$8690$1WS4nL
                                                                 g$lhs*$8689$1WS4nL))))))
                                                        g$ls/false$8683$1WS4nL)
                                                      ((case-lambda
                                                         ((g$t$8706$1WS4nL)
                                                          ((case-lambda
                                                             ((g$ls/false$8707$1WS4nL)
                                                              (if g$ls/false$8707$1WS4nL
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$8708$1WS4nL
                                                                       g$q$8709$1WS4nL)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$8651$1WS4nL
                                                                            g$q$8709$1WS4nL
                                                                            g$lev$8666$1WS4nL)))
                                                                       (case-lambda
                                                                         ((g$lhs*$8713$1WS4nL
                                                                            g$rhs*$8714$1WS4nL
                                                                            g$q$8715$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$q$8716$1WS4nL
                                                                                g$rhs*$8717$1WS4nL
                                                                                g$lhs*$8718$1WS4nL)
                                                                              (if (= g$lev$8666$1WS4nL
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$8719$1WS4nL)
                                                                                    (values
                                                                                      (append
                                                                                        (map (case-lambda
                                                                                               ((g$g$8720$1WS4nL)
                                                                                                (cons
                                                                                                  g$g$8720$1WS4nL
                                                                                                  '(...))))
                                                                                             g$g*$8719$1WS4nL)
                                                                                        g$lhs*$8718$1WS4nL)
                                                                                      (append
                                                                                        g$p*$8708$1WS4nL
                                                                                        g$rhs*$8717$1WS4nL)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (map (case-lambda
                                                                                                 ((g$g$8721$1WS4nL)
                                                                                                  (cons
                                                                                                    g$g$8721$1WS4nL
                                                                                                    '(...))))
                                                                                               g$g*$8719$1WS4nL))
                                                                                        g$q$8716$1WS4nL))))
                                                                                 (map (case-lambda
                                                                                        ((g$x$8722$1WS4nL)
                                                                                         (gensym)))
                                                                                      g$p*$8708$1WS4nL))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$8651$1WS4nL
                                                                                       g$p*$8708$1WS4nL
                                                                                       (- g$lev$8666$1WS4nL
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$8726$1WS4nL
                                                                                       g$rhs2*$8727$1WS4nL
                                                                                       g$p*$8728$1WS4nL)
                                                                                     ((case-lambda
                                                                                        ((g$p*$8729$1WS4nL
                                                                                           g$rhs2*$8730$1WS4nL
                                                                                           g$lhs2*$8731$1WS4nL)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$8731$1WS4nL
                                                                                             g$lhs*$8718$1WS4nL)
                                                                                           (append
                                                                                             g$rhs2*$8730$1WS4nL
                                                                                             g$rhs*$8717$1WS4nL)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$8729$1WS4nL)
                                                                                             g$q$8716$1WS4nL))))
                                                                                      g$p*$8728$1WS4nL
                                                                                      g$rhs2*$8727$1WS4nL
                                                                                      g$lhs2*$8726$1WS4nL)))))))
                                                                           g$q$8715$1WS4nL
                                                                           g$rhs*$8714$1WS4nL
                                                                           g$lhs*$8713$1WS4nL))))))
                                                                  g$ls/false$8707$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$t$8732$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8733$1WS4nL)
                                                                        (if (if g$ls/false$8733$1WS4nL
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$8666$1WS4nL
                                                                                        '0)))
                                                                                  g$ls/false$8733$1WS4nL))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$7656$1WS4nL
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$8665$1WS4nL)))
                                                                            g$ls/false$8733$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$t$8734$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8735$1WS4nL)
                                                                                  (if g$ls/false$8735$1WS4nL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$8736$1WS4nL)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$8651$1WS4nL
                                                                                                g$p$8736$1WS4nL
                                                                                                (+ g$lev$8666$1WS4nL
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$8740$1WS4nL
                                                                                                g$rhs*$8741$1WS4nL
                                                                                                g$p$8742$1WS4nL)
                                                                                              ((case-lambda
                                                                                                 ((g$p$8743$1WS4nL
                                                                                                    g$rhs*$8744$1WS4nL
                                                                                                    g$lhs*$8745$1WS4nL)
                                                                                                  (values
                                                                                                    g$lhs*$8745$1WS4nL
                                                                                                    g$rhs*$8744$1WS4nL
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$8743$1WS4nL))))
                                                                                               g$p$8742$1WS4nL
                                                                                               g$rhs*$8741$1WS4nL
                                                                                               g$lhs*$8740$1WS4nL))))))
                                                                                      g$ls/false$8735$1WS4nL)
                                                                                    ((case-lambda
                                                                                       ((g$t$8746$1WS4nL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8747$1WS4nL)
                                                                                            (if g$ls/false$8747$1WS4nL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8748$1WS4nL
                                                                                                     g$q$8749$1WS4nL)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$8651$1WS4nL
                                                                                                          g$p$8748$1WS4nL
                                                                                                          g$lev$8666$1WS4nL)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$8756$1WS4nL
                                                                                                          g$rhs*$8757$1WS4nL
                                                                                                          g$p$8758$1WS4nL)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$8651$1WS4nL
                                                                                                               g$q$8749$1WS4nL
                                                                                                               g$lev$8666$1WS4nL)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$8759$1WS4nL
                                                                                                               g$rhs2*$8760$1WS4nL
                                                                                                               g$q$8761$1WS4nL)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$8762$1WS4nL
                                                                                                                   g$rhs2*$8763$1WS4nL
                                                                                                                   g$lhs2*$8764$1WS4nL
                                                                                                                   g$p$8765$1WS4nL
                                                                                                                   g$rhs*$8766$1WS4nL
                                                                                                                   g$lhs*$8767$1WS4nL)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$8764$1WS4nL
                                                                                                                     g$lhs*$8767$1WS4nL)
                                                                                                                   (append
                                                                                                                     g$rhs2*$8763$1WS4nL
                                                                                                                     g$rhs*$8766$1WS4nL)
                                                                                                                   (cons
                                                                                                                     g$p$8765$1WS4nL
                                                                                                                     g$q$8762$1WS4nL))))
                                                                                                              g$q$8761$1WS4nL
                                                                                                              g$rhs2*$8760$1WS4nL
                                                                                                              g$lhs2*$8759$1WS4nL
                                                                                                              g$p$8758$1WS4nL
                                                                                                              g$rhs*$8757$1WS4nL
                                                                                                              g$lhs*$8756$1WS4nL)))))))))
                                                                                                g$ls/false$8747$1WS4nL)
                                                                                              ((case-lambda
                                                                                                 ((g$t$8768$1WS4nL)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$8769$1WS4nL)
                                                                                                      (if g$ls/false$8769$1WS4nL
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$8770$1WS4nL)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$8651$1WS4nL
                                                                                                                    g$x*$8770$1WS4nL
                                                                                                                    g$lev$8666$1WS4nL)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$8774$1WS4nL
                                                                                                                    g$rhs*$8775$1WS4nL
                                                                                                                    g$x*$8776$1WS4nL)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$8777$1WS4nL
                                                                                                                        g$rhs*$8778$1WS4nL
                                                                                                                        g$lhs*$8779$1WS4nL)
                                                                                                                      (values
                                                                                                                        g$lhs*$8779$1WS4nL
                                                                                                                        g$rhs*$8778$1WS4nL
                                                                                                                        (list->vector
                                                                                                                          g$x*$8777$1WS4nL))))
                                                                                                                   g$x*$8776$1WS4nL
                                                                                                                   g$rhs*$8775$1WS4nL
                                                                                                                   g$lhs*$8774$1WS4nL))))))
                                                                                                          g$ls/false$8769$1WS4nL)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$8780$1WS4nL)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$8781$1WS4nL)
                                                                                                                (if g$ls/false$8781$1WS4nL
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$8665$1WS4nL)))
                                                                                                                    g$ls/false$8781$1WS4nL)
                                                                                                                  (g$syntax-violation$7656$1WS4nL
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$8780$1WS4nL))))
                                                                                                             (g$syntax-dispatch$7545$1WS4nL
                                                                                                               g$t$8780$1WS4nL
                                                                                                               '_))))
                                                                                                         g$t$8768$1WS4nL))))
                                                                                                   (g$syntax-dispatch$7545$1WS4nL
                                                                                                     g$t$8768$1WS4nL
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$8746$1WS4nL))))
                                                                                         (g$syntax-dispatch$7545$1WS4nL
                                                                                           g$t$8746$1WS4nL
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$8734$1WS4nL))))
                                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                                 g$t$8734$1WS4nL
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$8732$1WS4nL))))
                                                                     (g$syntax-dispatch$7545$1WS4nL
                                                                       g$t$8732$1WS4nL
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$8706$1WS4nL))))
                                                           (g$syntax-dispatch$7545$1WS4nL
                                                             g$t$8706$1WS4nL
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$8682$1WS4nL))))
                                                 (g$syntax-dispatch$7545$1WS4nL
                                                   g$t$8682$1WS4nL
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8680$1WS4nL))))
                                       (g$syntax-dispatch$7545$1WS4nL
                                         g$t$8680$1WS4nL
                                         '#(scheme-id unsyntax)))))
                                   g$t$8667$1WS4nL))))
                             (g$syntax-dispatch$7545$1WS4nL
                               g$t$8667$1WS4nL
                               '(#(scheme-id unsyntax) any)))))
                         g$p$8665$1WS4nL)))))
           (case-lambda
             ((g$x$8652$1WS4nL)
              ((case-lambda
                 ((g$t$8653$1WS4nL)
                  ((case-lambda
                     ((g$ls/false$8654$1WS4nL)
                      (if g$ls/false$8654$1WS4nL
                        (apply
                          (case-lambda
                            ((g$e$8655$1WS4nL)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$8651$1WS4nL g$e$8655$1WS4nL '0)))
                               (case-lambda
                                 ((g$lhs*$8659$1WS4nL
                                    g$rhs*$8660$1WS4nL
                                    g$v$8661$1WS4nL)
                                  ((case-lambda
                                     ((g$v$8662$1WS4nL
                                        g$rhs*$8663$1WS4nL
                                        g$lhs*$8664$1WS4nL)
                                      (g$bless$7508$1WS4nL
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$8663$1WS4nL)
                                          '()
                                          (list
                                            g$lhs*$8664$1WS4nL
                                            (list 'syntax g$v$8662$1WS4nL))))))
                                   g$v$8661$1WS4nL
                                   g$rhs*$8660$1WS4nL
                                   g$lhs*$8659$1WS4nL))))))
                          g$ls/false$8654$1WS4nL)
                        (g$syntax-violation$7656$1WS4nL
                          '#f
                          '"invalid syntax"
                          g$t$8653$1WS4nL))))
                   (g$syntax-dispatch$7545$1WS4nL g$t$8653$1WS4nL '(_ any)))))
               g$x$8652$1WS4nL))))))))
   (g$define-struct-macro$7538$1WS4nL
     g$define-struct-macro$11026$1WS4nL
     (case-lambda
       ((g$stx$8782$1WS4nL)
        (g$syntax-violation$7656$1WS4nL
          '#f
          '"define-struct not supported"
          g$stx$8782$1WS4nL))))
   (g$define-record-type-macro$7539$1WS4nL
     g$define-record-type-macro$11027$1WS4nL
     (case-lambda
       ((g$x$8783$1WS4nL)
        (letrec* ((g$id$8784$1WS4nL
                    (case-lambda
                      ((g$ctxt$9036$1WS4nL . g$str*$9037$1WS4nL)
                       (g$datum->syntax$7658$1WS4nL
                         g$ctxt$9036$1WS4nL
                         (string->symbol
                           (apply
                             string-append
                             (map (case-lambda
                                    ((g$x$9038$1WS4nL)
                                     (if (symbol? g$x$9038$1WS4nL)
                                       (symbol->string g$x$9038$1WS4nL)
                                       (if (string? g$x$9038$1WS4nL)
                                         g$x$9038$1WS4nL
                                         (assertion-violation
                                           'define-record-type
                                           '"BUG")))))
                                  g$str*$9037$1WS4nL)))))))
                  (g$get-record-name$8785$1WS4nL
                    (case-lambda
                      ((g$spec$9027$1WS4nL)
                       ((case-lambda
                          ((g$t$9028$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$9029$1WS4nL)
                               (if g$ls/false$9029$1WS4nL
                                 (apply
                                   (case-lambda
                                     ((g$foo$9030$1WS4nL
                                        g$make-foo$9031$1WS4nL
                                        g$foo?$9032$1WS4nL)
                                      g$foo$9030$1WS4nL))
                                   g$ls/false$9029$1WS4nL)
                                 ((case-lambda
                                    ((g$t$9033$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$9034$1WS4nL)
                                         (if g$ls/false$9034$1WS4nL
                                           (apply
                                             (case-lambda
                                               ((g$foo$9035$1WS4nL)
                                                g$foo$9035$1WS4nL))
                                             g$ls/false$9034$1WS4nL)
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9033$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$9033$1WS4nL
                                        'any))))
                                  g$t$9028$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$9028$1WS4nL
                              '(any any any)))))
                        g$spec$9027$1WS4nL))))
                  (g$get-record-constructor-name$8786$1WS4nL
                    (case-lambda
                      ((g$spec$9017$1WS4nL)
                       ((case-lambda
                          ((g$t$9018$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$9019$1WS4nL)
                               (if g$ls/false$9019$1WS4nL
                                 (apply
                                   (case-lambda
                                     ((g$foo$9020$1WS4nL
                                        g$make-foo$9021$1WS4nL
                                        g$foo?$9022$1WS4nL)
                                      g$make-foo$9021$1WS4nL))
                                   g$ls/false$9019$1WS4nL)
                                 ((case-lambda
                                    ((g$t$9023$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$9024$1WS4nL)
                                         (if (if g$ls/false$9024$1WS4nL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9025$1WS4nL)
                                                      (g$id?$7267$1WS4nL
                                                        g$foo$9025$1WS4nL)))
                                                   g$ls/false$9024$1WS4nL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9026$1WS4nL)
                                                (g$id$8784$1WS4nL
                                                  g$foo$9026$1WS4nL
                                                  '"make-"
                                                  (g$stx->datum$7278$1WS4nL
                                                    g$foo$9026$1WS4nL))))
                                             g$ls/false$9024$1WS4nL)
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9023$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$9023$1WS4nL
                                        'any))))
                                  g$t$9018$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$9018$1WS4nL
                              '(any any any)))))
                        g$spec$9017$1WS4nL))))
                  (g$get-record-predicate-name$8787$1WS4nL
                    (case-lambda
                      ((g$spec$9007$1WS4nL)
                       ((case-lambda
                          ((g$t$9008$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$9009$1WS4nL)
                               (if g$ls/false$9009$1WS4nL
                                 (apply
                                   (case-lambda
                                     ((g$foo$9010$1WS4nL
                                        g$make-foo$9011$1WS4nL
                                        g$foo?$9012$1WS4nL)
                                      g$foo?$9012$1WS4nL))
                                   g$ls/false$9009$1WS4nL)
                                 ((case-lambda
                                    ((g$t$9013$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$9014$1WS4nL)
                                         (if (if g$ls/false$9014$1WS4nL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9015$1WS4nL)
                                                      (g$id?$7267$1WS4nL
                                                        g$foo$9015$1WS4nL)))
                                                   g$ls/false$9014$1WS4nL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9016$1WS4nL)
                                                (g$id$8784$1WS4nL
                                                  g$foo$9016$1WS4nL
                                                  (g$stx->datum$7278$1WS4nL
                                                    g$foo$9016$1WS4nL)
                                                  '"?")))
                                             g$ls/false$9014$1WS4nL)
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9013$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$9013$1WS4nL
                                        'any))))
                                  g$t$9008$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$9008$1WS4nL
                              '(any any any)))))
                        g$spec$9007$1WS4nL))))
                  (g$get-clause$8788$1WS4nL
                    (case-lambda
                      ((g$id$8998$1WS4nL g$ls$8999$1WS4nL)
                       ((case-lambda
                          ((g$t$9000$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$9001$1WS4nL)
                               (if g$ls/false$9001$1WS4nL
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9001$1WS4nL)
                                 ((case-lambda
                                    ((g$t$9002$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$9003$1WS4nL)
                                         (if g$ls/false$9003$1WS4nL
                                           (apply
                                             (case-lambda
                                               ((g$x$9004$1WS4nL
                                                  g$rest$9005$1WS4nL
                                                  g$ls$9006$1WS4nL)
                                                (if (g$free-id=?$7271$1WS4nL
                                                      (g$bless$7508$1WS4nL
                                                        g$id$8998$1WS4nL)
                                                      g$x$9004$1WS4nL)
                                                  (cons
                                                    g$x$9004$1WS4nL
                                                    g$rest$9005$1WS4nL)
                                                  (g$get-clause$8788$1WS4nL
                                                    g$id$8998$1WS4nL
                                                    g$ls$9006$1WS4nL))))
                                             g$ls/false$9003$1WS4nL)
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$t$9002$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$9002$1WS4nL
                                        '((any . any) . any)))))
                                  g$t$9000$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$9000$1WS4nL
                              '()))))
                        g$ls$8999$1WS4nL))))
                  (g$foo-rtd-code$8789$1WS4nL
                    (case-lambda
                      ((g$name$8957$1WS4nL
                         g$clause*$8958$1WS4nL
                         g$parent-rtd-code$8959$1WS4nL)
                       (letrec* ((g$convert-field-spec*$8960$1WS4nL
                                   (case-lambda
                                     ((g$ls$8985$1WS4nL)
                                      (list->vector
                                        (map (case-lambda
                                               ((g$x$8986$1WS4nL)
                                                ((case-lambda
                                                   ((g$t$8987$1WS4nL)
                                                    ((case-lambda
                                                       ((g$ls/false$8988$1WS4nL)
                                                        (if g$ls/false$8988$1WS4nL
                                                          (apply
                                                            (case-lambda
                                                              ((g$name$8989$1WS4nL
                                                                 g$rest$8990$1WS4nL)
                                                               (list
                                                                 'mutable
                                                                 g$name$8989$1WS4nL)))
                                                            g$ls/false$8988$1WS4nL)
                                                          ((case-lambda
                                                             ((g$t$8991$1WS4nL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8992$1WS4nL)
                                                                  (if g$ls/false$8992$1WS4nL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$name$8993$1WS4nL
                                                                           g$rest$8994$1WS4nL)
                                                                         (list
                                                                           'immutable
                                                                           g$name$8993$1WS4nL)))
                                                                      g$ls/false$8992$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$t$8995$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8996$1WS4nL)
                                                                            (if g$ls/false$8996$1WS4nL
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$name$8997$1WS4nL)
                                                                                   (list
                                                                                     'immutable
                                                                                     g$name$8997$1WS4nL)))
                                                                                g$ls/false$8996$1WS4nL)
                                                                              (g$syntax-violation$7656$1WS4nL
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8995$1WS4nL))))
                                                                         (g$syntax-dispatch$7545$1WS4nL
                                                                           g$t$8995$1WS4nL
                                                                           'any))))
                                                                     g$t$8991$1WS4nL))))
                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                 g$t$8991$1WS4nL
                                                                 '(#(scheme-id
                                                                     immutable)
                                                                   any
                                                                   .
                                                                   any)))))
                                                           g$t$8987$1WS4nL))))
                                                     (g$syntax-dispatch$7545$1WS4nL
                                                       g$t$8987$1WS4nL
                                                       '(#(scheme-id mutable)
                                                         any
                                                         .
                                                         any)))))
                                                 g$x$8986$1WS4nL)))
                                             g$ls$8985$1WS4nL))))))
                         ((case-lambda
                            ((g$uid-code$8961$1WS4nL
                               g$sealed?$8962$1WS4nL
                               g$opaque?$8963$1WS4nL
                               g$fields$8964$1WS4nL)
                             (g$bless$7508$1WS4nL
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$8957$1WS4nL)
                                 g$parent-rtd-code$8959$1WS4nL
                                 g$uid-code$8961$1WS4nL
                                 g$sealed?$8962$1WS4nL
                                 g$opaque?$8963$1WS4nL
                                 g$fields$8964$1WS4nL))))
                          ((case-lambda
                             ((g$t$8965$1WS4nL)
                              ((case-lambda
                                 ((g$ls/false$8966$1WS4nL)
                                  (if g$ls/false$8966$1WS4nL
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$8966$1WS4nL)
                                    ((case-lambda
                                       ((g$t$8967$1WS4nL)
                                        ((case-lambda
                                           ((g$ls/false$8968$1WS4nL)
                                            (if g$ls/false$8968$1WS4nL
                                              (apply
                                                (case-lambda
                                                  ((g$uid$8969$1WS4nL)
                                                   (list
                                                     'quote
                                                     g$uid$8969$1WS4nL)))
                                                g$ls/false$8968$1WS4nL)
                                              ((case-lambda
                                                 ((g$t$8970$1WS4nL)
                                                  ((case-lambda
                                                     ((g$ls/false$8971$1WS4nL)
                                                      (if g$ls/false$8971$1WS4nL
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$8971$1WS4nL)
                                                        (g$syntax-violation$7656$1WS4nL
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$8970$1WS4nL))))
                                                   (g$syntax-dispatch$7545$1WS4nL
                                                     g$t$8970$1WS4nL
                                                     '_))))
                                               g$t$8967$1WS4nL))))
                                         (g$syntax-dispatch$7545$1WS4nL
                                           g$t$8967$1WS4nL
                                           '(_ any)))))
                                     g$t$8965$1WS4nL))))
                               (g$syntax-dispatch$7545$1WS4nL
                                 g$t$8965$1WS4nL
                                 '(_)))))
                           (g$get-clause$8788$1WS4nL
                             'nongenerative
                             g$clause*$8958$1WS4nL))
                          ((case-lambda
                             ((g$t$8972$1WS4nL)
                              ((case-lambda
                                 ((g$ls/false$8973$1WS4nL)
                                  (if g$ls/false$8973$1WS4nL
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8973$1WS4nL)
                                    ((case-lambda
                                       ((g$t$8974$1WS4nL)
                                        ((case-lambda
                                           ((g$ls/false$8975$1WS4nL)
                                            (if g$ls/false$8975$1WS4nL
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8975$1WS4nL)
                                              (g$syntax-violation$7656$1WS4nL
                                                '#f
                                                '"invalid syntax"
                                                g$t$8974$1WS4nL))))
                                         (g$syntax-dispatch$7545$1WS4nL
                                           g$t$8974$1WS4nL
                                           '_))))
                                     g$t$8972$1WS4nL))))
                               (g$syntax-dispatch$7545$1WS4nL
                                 g$t$8972$1WS4nL
                                 '(_ #(atom #t))))))
                           (g$get-clause$8788$1WS4nL
                             'sealed
                             g$clause*$8958$1WS4nL))
                          ((case-lambda
                             ((g$t$8976$1WS4nL)
                              ((case-lambda
                                 ((g$ls/false$8977$1WS4nL)
                                  (if g$ls/false$8977$1WS4nL
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8977$1WS4nL)
                                    ((case-lambda
                                       ((g$t$8978$1WS4nL)
                                        ((case-lambda
                                           ((g$ls/false$8979$1WS4nL)
                                            (if g$ls/false$8979$1WS4nL
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8979$1WS4nL)
                                              (g$syntax-violation$7656$1WS4nL
                                                '#f
                                                '"invalid syntax"
                                                g$t$8978$1WS4nL))))
                                         (g$syntax-dispatch$7545$1WS4nL
                                           g$t$8978$1WS4nL
                                           '_))))
                                     g$t$8976$1WS4nL))))
                               (g$syntax-dispatch$7545$1WS4nL
                                 g$t$8976$1WS4nL
                                 '(_ #(atom #t))))))
                           (g$get-clause$8788$1WS4nL
                             'opaque
                             g$clause*$8958$1WS4nL))
                          ((case-lambda
                             ((g$t$8980$1WS4nL)
                              ((case-lambda
                                 ((g$ls/false$8981$1WS4nL)
                                  (if g$ls/false$8981$1WS4nL
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$8982$1WS4nL)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$8960$1WS4nL
                                             g$field-spec*$8982$1WS4nL))))
                                      g$ls/false$8981$1WS4nL)
                                    ((case-lambda
                                       ((g$t$8983$1WS4nL)
                                        ((case-lambda
                                           ((g$ls/false$8984$1WS4nL)
                                            (if g$ls/false$8984$1WS4nL
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$8984$1WS4nL)
                                              (g$syntax-violation$7656$1WS4nL
                                                '#f
                                                '"invalid syntax"
                                                g$t$8983$1WS4nL))))
                                         (g$syntax-dispatch$7545$1WS4nL
                                           g$t$8983$1WS4nL
                                           '_))))
                                     g$t$8980$1WS4nL))))
                               (g$syntax-dispatch$7545$1WS4nL
                                 g$t$8980$1WS4nL
                                 '(_ . each-any)))))
                           (g$get-clause$8788$1WS4nL
                             'fields
                             g$clause*$8958$1WS4nL)))))))
                  (g$parent-rtd-code$8790$1WS4nL
                    (case-lambda
                      ((g$clause*$8945$1WS4nL)
                       ((case-lambda
                          ((g$t$8946$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$8947$1WS4nL)
                               (if g$ls/false$8947$1WS4nL
                                 (apply
                                   (case-lambda
                                     ((g$name$8948$1WS4nL)
                                      (list
                                        'record-type-descriptor
                                        g$name$8948$1WS4nL)))
                                   g$ls/false$8947$1WS4nL)
                                 ((case-lambda
                                    ((g$t$8949$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$8950$1WS4nL)
                                         (if g$ls/false$8950$1WS4nL
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8951$1WS4nL)
                                                    ((case-lambda
                                                       ((g$ls/false$8952$1WS4nL)
                                                        (if g$ls/false$8952$1WS4nL
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8953$1WS4nL
                                                                 g$rcd$8954$1WS4nL)
                                                               g$rtd$8953$1WS4nL))
                                                            g$ls/false$8952$1WS4nL)
                                                          ((case-lambda
                                                             ((g$t$8955$1WS4nL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8956$1WS4nL)
                                                                  (if g$ls/false$8956$1WS4nL
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8956$1WS4nL)
                                                                    (g$syntax-violation$7656$1WS4nL
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8955$1WS4nL))))
                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                 g$t$8955$1WS4nL
                                                                 '#(atom #f)))))
                                                           g$t$8951$1WS4nL))))
                                                     (g$syntax-dispatch$7545$1WS4nL
                                                       g$t$8951$1WS4nL
                                                       '(_ any any)))))
                                                 (g$get-clause$8788$1WS4nL
                                                   'parent-rtd
                                                   g$clause*$8945$1WS4nL))))
                                             g$ls/false$8950$1WS4nL)
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$t$8949$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$8949$1WS4nL
                                        '#(atom #f)))))
                                  g$t$8946$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$8946$1WS4nL
                              '(_ any)))))
                        (g$get-clause$8788$1WS4nL
                          'parent
                          g$clause*$8945$1WS4nL)))))
                  (g$parent-rcd-code$8791$1WS4nL
                    (case-lambda
                      ((g$clause*$8933$1WS4nL)
                       ((case-lambda
                          ((g$t$8934$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$8935$1WS4nL)
                               (if g$ls/false$8935$1WS4nL
                                 (apply
                                   (case-lambda
                                     ((g$name$8936$1WS4nL)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$8936$1WS4nL)))
                                   g$ls/false$8935$1WS4nL)
                                 ((case-lambda
                                    ((g$t$8937$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$8938$1WS4nL)
                                         (if g$ls/false$8938$1WS4nL
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8939$1WS4nL)
                                                    ((case-lambda
                                                       ((g$ls/false$8940$1WS4nL)
                                                        (if g$ls/false$8940$1WS4nL
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8941$1WS4nL
                                                                 g$rcd$8942$1WS4nL)
                                                               g$rcd$8942$1WS4nL))
                                                            g$ls/false$8940$1WS4nL)
                                                          ((case-lambda
                                                             ((g$t$8943$1WS4nL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8944$1WS4nL)
                                                                  (if g$ls/false$8944$1WS4nL
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8944$1WS4nL)
                                                                    (g$syntax-violation$7656$1WS4nL
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8943$1WS4nL))))
                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                 g$t$8943$1WS4nL
                                                                 '#(atom #f)))))
                                                           g$t$8939$1WS4nL))))
                                                     (g$syntax-dispatch$7545$1WS4nL
                                                       g$t$8939$1WS4nL
                                                       '(_ any any)))))
                                                 (g$get-clause$8788$1WS4nL
                                                   'parent-rtd
                                                   g$clause*$8933$1WS4nL))))
                                             g$ls/false$8938$1WS4nL)
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$t$8937$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$8937$1WS4nL
                                        '#(atom #f)))))
                                  g$t$8934$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$8934$1WS4nL
                              '(_ any)))))
                        (g$get-clause$8788$1WS4nL
                          'parent
                          g$clause*$8933$1WS4nL)))))
                  (g$foo-rcd-code$8792$1WS4nL
                    (case-lambda
                      ((g$clause*$8929$1WS4nL
                         g$foo-rtd$8930$1WS4nL
                         g$protocol$8931$1WS4nL
                         g$parent-rcd-code$8932$1WS4nL)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$8930$1WS4nL
                         g$parent-rcd-code$8932$1WS4nL
                         g$protocol$8931$1WS4nL))))
                  (g$get-protocol-code$8793$1WS4nL
                    (case-lambda
                      ((g$clause*$8923$1WS4nL)
                       ((case-lambda
                          ((g$t$8924$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$8925$1WS4nL)
                               (if g$ls/false$8925$1WS4nL
                                 (apply
                                   (case-lambda
                                     ((g$expr$8926$1WS4nL) g$expr$8926$1WS4nL))
                                   g$ls/false$8925$1WS4nL)
                                 ((case-lambda
                                    ((g$t$8927$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$8928$1WS4nL)
                                         (if g$ls/false$8928$1WS4nL
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$8928$1WS4nL)
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$t$8927$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$8927$1WS4nL
                                        '_))))
                                  g$t$8924$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$8924$1WS4nL
                              '(_ any)))))
                        (g$get-clause$8788$1WS4nL
                          'protocol
                          g$clause*$8923$1WS4nL)))))
                  (g$get-fields$8794$1WS4nL
                    (case-lambda
                      ((g$clause*$8914$1WS4nL)
                       ((case-lambda
                          ((g$t$8915$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$8916$1WS4nL)
                               (if g$ls/false$8916$1WS4nL
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$8916$1WS4nL)
                                 ((case-lambda
                                    ((g$t$8917$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$8918$1WS4nL)
                                         (if g$ls/false$8918$1WS4nL
                                           (apply
                                             (case-lambda
                                               ((g$f*$8919$1WS4nL)
                                                g$f*$8919$1WS4nL))
                                             g$ls/false$8918$1WS4nL)
                                           ((case-lambda
                                              ((g$t$8920$1WS4nL)
                                               ((case-lambda
                                                  ((g$ls/false$8921$1WS4nL)
                                                   (if g$ls/false$8921$1WS4nL
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8922$1WS4nL)
                                                          (g$get-fields$8794$1WS4nL
                                                            g$rest$8922$1WS4nL)))
                                                       g$ls/false$8921$1WS4nL)
                                                     (g$syntax-violation$7656$1WS4nL
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8920$1WS4nL))))
                                                (g$syntax-dispatch$7545$1WS4nL
                                                  g$t$8920$1WS4nL
                                                  '(_ . any)))))
                                            g$t$8917$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$8917$1WS4nL
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$8915$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$8915$1WS4nL
                              '()))))
                        g$clause*$8914$1WS4nL))))
                  (g$get-mutator-indices$8795$1WS4nL
                    (case-lambda
                      ((g$fields$8902$1WS4nL)
                       ((letrec ((g$f$8903$1WS4nL
                                   (case-lambda
                                     ((g$fields$8904$1WS4nL g$i$8905$1WS4nL)
                                      ((case-lambda
                                         ((g$t$8906$1WS4nL)
                                          ((case-lambda
                                             ((g$ls/false$8907$1WS4nL)
                                              (if g$ls/false$8907$1WS4nL
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$8907$1WS4nL)
                                                ((case-lambda
                                                   ((g$t$8908$1WS4nL)
                                                    ((case-lambda
                                                       ((g$ls/false$8909$1WS4nL)
                                                        (if g$ls/false$8909$1WS4nL
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$8910$1WS4nL)
                                                               (cons
                                                                 g$i$8905$1WS4nL
                                                                 (g$f$8903$1WS4nL
                                                                   g$rest$8910$1WS4nL
                                                                   (+ g$i$8905$1WS4nL
                                                                      '1)))))
                                                            g$ls/false$8909$1WS4nL)
                                                          ((case-lambda
                                                             ((g$t$8911$1WS4nL)
                                                              ((case-lambda
                                                                 ((g$ls/false$8912$1WS4nL)
                                                                  (if g$ls/false$8912$1WS4nL
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$8913$1WS4nL)
                                                                         (g$f$8903$1WS4nL
                                                                           g$rest$8913$1WS4nL
                                                                           (+ g$i$8905$1WS4nL
                                                                              '1))))
                                                                      g$ls/false$8912$1WS4nL)
                                                                    (g$syntax-violation$7656$1WS4nL
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8911$1WS4nL))))
                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                 g$t$8911$1WS4nL
                                                                 '(_ . any)))))
                                                           g$t$8908$1WS4nL))))
                                                     (g$syntax-dispatch$7545$1WS4nL
                                                       g$t$8908$1WS4nL
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$8906$1WS4nL))))
                                           (g$syntax-dispatch$7545$1WS4nL
                                             g$t$8906$1WS4nL
                                             '()))))
                                       g$fields$8904$1WS4nL)))))
                          g$f$8903$1WS4nL)
                        g$fields$8902$1WS4nL
                        '0))))
                  (g$get-mutators$8796$1WS4nL
                    (case-lambda
                      ((g$foo$8881$1WS4nL g$fields$8882$1WS4nL)
                       (letrec* ((g$gen-name$8883$1WS4nL
                                   (case-lambda
                                     ((g$x$8901$1WS4nL)
                                      (g$datum->syntax$7658$1WS4nL
                                        g$foo$8881$1WS4nL
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7659$1WS4nL
                                                g$foo$8881$1WS4nL))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7659$1WS4nL
                                                g$x$8901$1WS4nL))
                                            '"-set!")))))))
                         ((letrec ((g$f$8884$1WS4nL
                                     (case-lambda
                                       ((g$fields$8885$1WS4nL)
                                        ((case-lambda
                                           ((g$t$8886$1WS4nL)
                                            ((case-lambda
                                               ((g$ls/false$8887$1WS4nL)
                                                (if g$ls/false$8887$1WS4nL
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$8887$1WS4nL)
                                                  ((case-lambda
                                                     ((g$t$8888$1WS4nL)
                                                      ((case-lambda
                                                         ((g$ls/false$8889$1WS4nL)
                                                          (if g$ls/false$8889$1WS4nL
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8890$1WS4nL
                                                                   g$accessor$8891$1WS4nL
                                                                   g$mutator$8892$1WS4nL
                                                                   g$rest$8893$1WS4nL)
                                                                 (cons
                                                                   g$mutator$8892$1WS4nL
                                                                   (g$f$8884$1WS4nL
                                                                     g$rest$8893$1WS4nL))))
                                                              g$ls/false$8889$1WS4nL)
                                                            ((case-lambda
                                                               ((g$t$8894$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$ls/false$8895$1WS4nL)
                                                                    (if g$ls/false$8895$1WS4nL
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8896$1WS4nL
                                                                             g$rest$8897$1WS4nL)
                                                                           (cons
                                                                             (g$gen-name$8883$1WS4nL
                                                                               g$name$8896$1WS4nL)
                                                                             (g$f$8884$1WS4nL
                                                                               g$rest$8897$1WS4nL))))
                                                                        g$ls/false$8895$1WS4nL)
                                                                      ((case-lambda
                                                                         ((g$t$8898$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8899$1WS4nL)
                                                                              (if g$ls/false$8899$1WS4nL
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$8900$1WS4nL)
                                                                                     (g$f$8884$1WS4nL
                                                                                       g$rest$8900$1WS4nL)))
                                                                                  g$ls/false$8899$1WS4nL)
                                                                                (g$syntax-violation$7656$1WS4nL
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$8898$1WS4nL))))
                                                                           (g$syntax-dispatch$7545$1WS4nL
                                                                             g$t$8898$1WS4nL
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$8894$1WS4nL))))
                                                                 (g$syntax-dispatch$7545$1WS4nL
                                                                   g$t$8894$1WS4nL
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$8888$1WS4nL))))
                                                       (g$syntax-dispatch$7545$1WS4nL
                                                         g$t$8888$1WS4nL
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$8886$1WS4nL))))
                                             (g$syntax-dispatch$7545$1WS4nL
                                               g$t$8886$1WS4nL
                                               '()))))
                                         g$fields$8885$1WS4nL)))))
                            g$f$8884$1WS4nL)
                          g$fields$8882$1WS4nL)))))
                  (g$get-accessors$8797$1WS4nL
                    (case-lambda
                      ((g$foo$8847$1WS4nL g$fields$8848$1WS4nL)
                       (letrec* ((g$gen-name$8849$1WS4nL
                                   (case-lambda
                                     ((g$x$8880$1WS4nL)
                                      (g$datum->syntax$7658$1WS4nL
                                        g$foo$8847$1WS4nL
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7659$1WS4nL
                                                g$foo$8847$1WS4nL))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7659$1WS4nL
                                                g$x$8880$1WS4nL)))))))))
                         (map (case-lambda
                                ((g$field$8850$1WS4nL)
                                 ((case-lambda
                                    ((g$t$8851$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$8852$1WS4nL)
                                         (if (if g$ls/false$8852$1WS4nL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$name$8853$1WS4nL
                                                        g$accessor$8854$1WS4nL
                                                        g$mutator$8855$1WS4nL)
                                                      (g$id?$7267$1WS4nL
                                                        g$accessor$8854$1WS4nL)))
                                                   g$ls/false$8852$1WS4nL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$name$8856$1WS4nL
                                                  g$accessor$8857$1WS4nL
                                                  g$mutator$8858$1WS4nL)
                                                g$accessor$8857$1WS4nL))
                                             g$ls/false$8852$1WS4nL)
                                           ((case-lambda
                                              ((g$t$8859$1WS4nL)
                                               ((case-lambda
                                                  ((g$ls/false$8860$1WS4nL)
                                                   (if (if g$ls/false$8860$1WS4nL
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$name$8861$1WS4nL
                                                                  g$accessor$8862$1WS4nL)
                                                                (g$id?$7267$1WS4nL
                                                                  g$accessor$8862$1WS4nL)))
                                                             g$ls/false$8860$1WS4nL))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$name$8863$1WS4nL
                                                            g$accessor$8864$1WS4nL)
                                                          g$accessor$8864$1WS4nL))
                                                       g$ls/false$8860$1WS4nL)
                                                     ((case-lambda
                                                        ((g$t$8865$1WS4nL)
                                                         ((case-lambda
                                                            ((g$ls/false$8866$1WS4nL)
                                                             (if (if g$ls/false$8866$1WS4nL
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$name$8867$1WS4nL)
                                                                          (g$id?$7267$1WS4nL
                                                                            g$name$8867$1WS4nL)))
                                                                       g$ls/false$8866$1WS4nL))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$name$8868$1WS4nL)
                                                                    (g$gen-name$8849$1WS4nL
                                                                      g$name$8868$1WS4nL)))
                                                                 g$ls/false$8866$1WS4nL)
                                                               ((case-lambda
                                                                  ((g$t$8869$1WS4nL)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8870$1WS4nL)
                                                                       (if (if g$ls/false$8870$1WS4nL
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$name$8871$1WS4nL)
                                                                                    (g$id?$7267$1WS4nL
                                                                                      g$name$8871$1WS4nL)))
                                                                                 g$ls/false$8870$1WS4nL))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$name$8872$1WS4nL)
                                                                              (g$gen-name$8849$1WS4nL
                                                                                g$name$8872$1WS4nL)))
                                                                           g$ls/false$8870$1WS4nL)
                                                                         ((case-lambda
                                                                            ((g$t$8873$1WS4nL)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8874$1WS4nL)
                                                                                 (if (if g$ls/false$8874$1WS4nL
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$name$8875$1WS4nL)
                                                                                              (g$id?$7267$1WS4nL
                                                                                                g$name$8875$1WS4nL)))
                                                                                           g$ls/false$8874$1WS4nL))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$name$8876$1WS4nL)
                                                                                        (g$gen-name$8849$1WS4nL
                                                                                          g$name$8876$1WS4nL)))
                                                                                     g$ls/false$8874$1WS4nL)
                                                                                   ((case-lambda
                                                                                      ((g$t$8877$1WS4nL)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8878$1WS4nL)
                                                                                           (if g$ls/false$8878$1WS4nL
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$others$8879$1WS4nL)
                                                                                                  (g$syntax-violation$7656$1WS4nL
                                                                                                    '#f
                                                                                                    '"invalid field spec"
                                                                                                    g$field$8850$1WS4nL)))
                                                                                               g$ls/false$8878$1WS4nL)
                                                                                             (g$syntax-violation$7656$1WS4nL
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8877$1WS4nL))))
                                                                                        (g$syntax-dispatch$7545$1WS4nL
                                                                                          g$t$8877$1WS4nL
                                                                                          'any))))
                                                                                    g$t$8873$1WS4nL))))
                                                                              (g$syntax-dispatch$7545$1WS4nL
                                                                                g$t$8873$1WS4nL
                                                                                'any))))
                                                                          g$t$8869$1WS4nL))))
                                                                    (g$syntax-dispatch$7545$1WS4nL
                                                                      g$t$8869$1WS4nL
                                                                      '(#(scheme-id
                                                                          immutable)
                                                                        any)))))
                                                                g$t$8865$1WS4nL))))
                                                          (g$syntax-dispatch$7545$1WS4nL
                                                            g$t$8865$1WS4nL
                                                            '(#(scheme-id
                                                                mutable)
                                                              any)))))
                                                      g$t$8859$1WS4nL))))
                                                (g$syntax-dispatch$7545$1WS4nL
                                                  g$t$8859$1WS4nL
                                                  '(#(scheme-id immutable)
                                                    any
                                                    any)))))
                                            g$t$8851$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$8851$1WS4nL
                                        '(#(scheme-id mutable) any any any)))))
                                  g$field$8850$1WS4nL)))
                              g$fields$8848$1WS4nL)))))
                  (g$enumerate$8798$1WS4nL
                    (case-lambda
                      ((g$ls$8843$1WS4nL)
                       ((letrec ((g$f$8844$1WS4nL
                                   (case-lambda
                                     ((g$ls$8845$1WS4nL g$i$8846$1WS4nL)
                                      (if (null? g$ls$8845$1WS4nL)
                                        '()
                                        (cons
                                          g$i$8846$1WS4nL
                                          (g$f$8844$1WS4nL
                                            (cdr g$ls$8845$1WS4nL)
                                            (+ g$i$8846$1WS4nL '1))))))))
                          g$f$8844$1WS4nL)
                        g$ls$8843$1WS4nL
                        '0))))
                  (g$do-define-record$8799$1WS4nL
                    (case-lambda
                      ((g$namespec$8823$1WS4nL g$clause*$8824$1WS4nL)
                       ((case-lambda
                          ((g$foo$8825$1WS4nL)
                           ((case-lambda
                              ((g$foo-rtd$8826$1WS4nL)
                               ((case-lambda
                                  ((g$foo-rcd$8827$1WS4nL)
                                   ((case-lambda
                                      ((g$protocol$8828$1WS4nL)
                                       ((case-lambda
                                          ((g$make-foo$8829$1WS4nL)
                                           ((case-lambda
                                              ((g$fields$8830$1WS4nL)
                                               ((case-lambda
                                                  ((g$idx*$8831$1WS4nL)
                                                   ((case-lambda
                                                      ((g$foo-x*$8832$1WS4nL)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$8833$1WS4nL)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$8834$1WS4nL)
                                                               ((case-lambda
                                                                  ((g$foo?$8835$1WS4nL)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$8836$1WS4nL)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$8837$1WS4nL)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$8838$1WS4nL)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$7508$1WS4nL
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$8826$1WS4nL
                                                                                           g$foo-rtd-code$8836$1WS4nL)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$8828$1WS4nL
                                                                                             g$protocol-code$8838$1WS4nL)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$8827$1WS4nL
                                                                                               g$foo-rcd-code$8837$1WS4nL)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$8825$1WS4nL
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$8826$1WS4nL)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$8827$1WS4nL)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$8835$1WS4nL
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$8826$1WS4nL))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$8829$1WS4nL
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$8827$1WS4nL))
                                                                                                   (append
                                                                                                     (map (case-lambda
                                                                                                            ((g$foo-x$8839$1WS4nL
                                                                                                               g$idx$8840$1WS4nL)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$foo-x$8839$1WS4nL
                                                                                                               (list
                                                                                                                 'record-accessor
                                                                                                                 g$foo-rtd$8826$1WS4nL
                                                                                                                 g$idx$8840$1WS4nL))))
                                                                                                          g$foo-x*$8832$1WS4nL
                                                                                                          g$idx*$8831$1WS4nL)
                                                                                                     (map (case-lambda
                                                                                                            ((g$set-foo-x!$8841$1WS4nL
                                                                                                               g$idx$8842$1WS4nL)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$set-foo-x!$8841$1WS4nL
                                                                                                               (list
                                                                                                                 'record-mutator
                                                                                                                 g$foo-rtd$8826$1WS4nL
                                                                                                                 g$idx$8842$1WS4nL))))
                                                                                                          g$set-foo-x!*$8833$1WS4nL
                                                                                                          g$set-foo-idx*$8834$1WS4nL)))))))))))))))
                                                                            (g$get-protocol-code$8793$1WS4nL
                                                                              g$clause*$8824$1WS4nL))))
                                                                        (g$foo-rcd-code$8792$1WS4nL
                                                                          g$clause*$8824$1WS4nL
                                                                          g$foo-rtd$8826$1WS4nL
                                                                          g$protocol$8828$1WS4nL
                                                                          (g$parent-rcd-code$8791$1WS4nL
                                                                            g$clause*$8824$1WS4nL)))))
                                                                    (g$foo-rtd-code$8789$1WS4nL
                                                                      g$foo$8825$1WS4nL
                                                                      g$clause*$8824$1WS4nL
                                                                      (g$parent-rtd-code$8790$1WS4nL
                                                                        g$clause*$8824$1WS4nL)))))
                                                                (g$get-record-predicate-name$8787$1WS4nL
                                                                  g$namespec$8823$1WS4nL))))
                                                            (g$get-mutator-indices$8795$1WS4nL
                                                              g$fields$8830$1WS4nL))))
                                                        (g$get-mutators$8796$1WS4nL
                                                          g$foo$8825$1WS4nL
                                                          g$fields$8830$1WS4nL))))
                                                    (g$get-accessors$8797$1WS4nL
                                                      g$foo$8825$1WS4nL
                                                      g$fields$8830$1WS4nL))))
                                                (g$enumerate$8798$1WS4nL
                                                  g$fields$8830$1WS4nL))))
                                            (g$get-fields$8794$1WS4nL
                                              g$clause*$8824$1WS4nL))))
                                        (g$get-record-constructor-name$8786$1WS4nL
                                          g$namespec$8823$1WS4nL))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$8785$1WS4nL
                          g$namespec$8823$1WS4nL)))))
                  (g$verify-clauses$8800$1WS4nL
                    (case-lambda
                      ((g$x$8805$1WS4nL g$cls*$8806$1WS4nL)
                       (letrec* ((g$valid-kwds$8807$1WS4nL
                                   (map g$bless$7508$1WS4nL
                                        '(fields
                                           parent
                                           parent-rtd
                                           protocol
                                           sealed
                                           opaque
                                           nongenerative)))
                                 (g$free-id-member?$8808$1WS4nL
                                   (case-lambda
                                     ((g$x$8820$1WS4nL g$ls$8821$1WS4nL)
                                      (if (pair? g$ls$8821$1WS4nL)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$8822$1WS4nL)
                                              (if g$t$8822$1WS4nL
                                                g$t$8822$1WS4nL
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$8808$1WS4nL
                                                    g$x$8820$1WS4nL
                                                    (cdr g$ls$8821$1WS4nL))))))
                                           (g$free-id=?$7271$1WS4nL
                                             g$x$8820$1WS4nL
                                             (car g$ls$8821$1WS4nL))))
                                        '#f)))))
                         ((letrec ((g$f$8809$1WS4nL
                                     (case-lambda
                                       ((g$cls*$8810$1WS4nL g$seen*$8811$1WS4nL)
                                        (if (not (null? g$cls*$8810$1WS4nL))
                                          ((case-lambda
                                             ((g$t$8812$1WS4nL)
                                              ((case-lambda
                                                 ((g$ls/false$8813$1WS4nL)
                                                  (if g$ls/false$8813$1WS4nL
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$8814$1WS4nL
                                                           g$rest$8815$1WS4nL)
                                                         (if ((case-lambda
                                                                ((g$t$8816$1WS4nL)
                                                                 (if g$t$8816$1WS4nL
                                                                   g$t$8816$1WS4nL
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$8808$1WS4nL
                                                                            g$kwd$8814$1WS4nL
                                                                            g$valid-kwds$8807$1WS4nL))))))
                                                              (not (g$id?$7267$1WS4nL
                                                                     g$kwd$8814$1WS4nL)))
                                                           (g$syntax-violation$7656$1WS4nL
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$8814$1WS4nL)
                                                           (if (g$bound-id-member?$7274$1WS4nL
                                                                 g$kwd$8814$1WS4nL
                                                                 g$seen*$8811$1WS4nL)
                                                             (g$syntax-violation$7656$1WS4nL
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$8805$1WS4nL
                                                               g$kwd$8814$1WS4nL)
                                                             (g$f$8809$1WS4nL
                                                               (cdr g$cls*$8810$1WS4nL)
                                                               (cons
                                                                 g$kwd$8814$1WS4nL
                                                                 g$seen*$8811$1WS4nL))))))
                                                      g$ls/false$8813$1WS4nL)
                                                    ((case-lambda
                                                       ((g$t$8817$1WS4nL)
                                                        ((case-lambda
                                                           ((g$ls/false$8818$1WS4nL)
                                                            (if g$ls/false$8818$1WS4nL
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$8819$1WS4nL)
                                                                   (g$syntax-violation$7656$1WS4nL
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$8819$1WS4nL)))
                                                                g$ls/false$8818$1WS4nL)
                                                              (g$syntax-violation$7656$1WS4nL
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8817$1WS4nL))))
                                                         (g$syntax-dispatch$7545$1WS4nL
                                                           g$t$8817$1WS4nL
                                                           'any))))
                                                     g$t$8812$1WS4nL))))
                                               (g$syntax-dispatch$7545$1WS4nL
                                                 g$t$8812$1WS4nL
                                                 '(any . any)))))
                                           (car g$cls*$8810$1WS4nL))
                                          (void))))))
                            g$f$8809$1WS4nL)
                          g$cls*$8806$1WS4nL
                          '()))))))
          ((case-lambda
             ((g$t$8801$1WS4nL)
              ((case-lambda
                 ((g$ls/false$8802$1WS4nL)
                  (if g$ls/false$8802$1WS4nL
                    (apply
                      (case-lambda
                        ((g$namespec$8803$1WS4nL g$clause*$8804$1WS4nL)
                         (begin
                           (g$verify-clauses$8800$1WS4nL
                             g$x$8783$1WS4nL
                             g$clause*$8804$1WS4nL)
                           (g$do-define-record$8799$1WS4nL
                             g$namespec$8803$1WS4nL
                             g$clause*$8804$1WS4nL))))
                      g$ls/false$8802$1WS4nL)
                    (g$syntax-violation$7656$1WS4nL
                      '#f
                      '"invalid syntax"
                      g$t$8801$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL
                 g$t$8801$1WS4nL
                 '(_ any . each-any)))))
           g$x$8783$1WS4nL)))))
   (g$define-condition-type-macro$7540$1WS4nL
     g$define-condition-type-macro$11028$1WS4nL
     (case-lambda
       ((g$x$9039$1WS4nL)
        (letrec* ((g$mkname$9040$1WS4nL
                    (case-lambda
                      ((g$name$9063$1WS4nL g$suffix$9064$1WS4nL)
                       (g$datum->syntax$7658$1WS4nL
                         g$name$9063$1WS4nL
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$7659$1WS4nL g$name$9063$1WS4nL))
                             g$suffix$9064$1WS4nL)))))))
          ((case-lambda
             ((g$t$9041$1WS4nL)
              ((case-lambda
                 ((g$ls/false$9042$1WS4nL)
                  (if (if g$ls/false$9042$1WS4nL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9043$1WS4nL
                                 g$name$9044$1WS4nL
                                 g$super$9045$1WS4nL
                                 g$constructor$9046$1WS4nL
                                 g$predicate$9047$1WS4nL
                                 g$field*$9048$1WS4nL
                                 g$accessor*$9049$1WS4nL)
                               (if (g$id?$7267$1WS4nL g$name$9044$1WS4nL)
                                 (if (g$id?$7267$1WS4nL g$super$9045$1WS4nL)
                                   (if (g$id?$7267$1WS4nL
                                         g$constructor$9046$1WS4nL)
                                     (if (g$id?$7267$1WS4nL
                                           g$predicate$9047$1WS4nL)
                                       (if (g$for-all$5001$1WS4nL
                                             g$id?$7267$1WS4nL
                                             g$field*$9048$1WS4nL)
                                         (begin
                                           '#f
                                           (g$for-all$5001$1WS4nL
                                             g$id?$7267$1WS4nL
                                             g$accessor*$9049$1WS4nL))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9042$1WS4nL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9050$1WS4nL
                           g$name$9051$1WS4nL
                           g$super$9052$1WS4nL
                           g$constructor$9053$1WS4nL
                           g$predicate$9054$1WS4nL
                           g$field*$9055$1WS4nL
                           g$accessor*$9056$1WS4nL)
                         ((case-lambda
                            ((g$aux-accessor*$9057$1WS4nL)
                             (g$bless$7508$1WS4nL
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9051$1WS4nL
                                         g$constructor$9053$1WS4nL
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9052$1WS4nL)
                                         (cons
                                           (cons
                                             'fields
                                             (map (case-lambda
                                                    ((g$field$9058$1WS4nL
                                                       g$aux$9059$1WS4nL)
                                                     (list
                                                       'immutable
                                                       g$field$9058$1WS4nL
                                                       g$aux$9059$1WS4nL)))
                                                  g$field*$9055$1WS4nL
                                                  g$aux-accessor*$9057$1WS4nL))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9054$1WS4nL
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9051$1WS4nL)))
                                     (map (case-lambda
                                            ((g$accessor$9060$1WS4nL
                                               g$aux$9061$1WS4nL)
                                             (list
                                               'define
                                               g$accessor$9060$1WS4nL
                                               (list
                                                 'condition-accessor
                                                 (list
                                                   'record-type-descriptor
                                                   g$name$9051$1WS4nL)
                                                 g$aux$9061$1WS4nL))))
                                          g$accessor*$9056$1WS4nL
                                          g$aux-accessor*$9057$1WS4nL)))))))
                          (map (case-lambda ((g$x$9062$1WS4nL) (gensym)))
                               g$accessor*$9056$1WS4nL))))
                      g$ls/false$9042$1WS4nL)
                    (g$syntax-violation$7656$1WS4nL
                      '#f
                      '"invalid syntax"
                      g$t$9041$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL
                 g$t$9041$1WS4nL
                 '(any any any any any . #(each (any any)))))))
           g$x$9039$1WS4nL)))))
   (g$incorrect-usage-macro$7541$1WS4nL
     g$incorrect-usage-macro$11029$1WS4nL
     (case-lambda
       ((g$e$9065$1WS4nL)
        (g$syntax-violation$7656$1WS4nL
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9065$1WS4nL))))
   (g$parameterize-macro$7542$1WS4nL
     g$parameterize-macro$11030$1WS4nL
     (case-lambda
       ((g$e$9066$1WS4nL)
        ((case-lambda
           ((g$t$9067$1WS4nL)
            ((case-lambda
               ((g$ls/false$9068$1WS4nL)
                (if g$ls/false$9068$1WS4nL
                  (apply
                    (case-lambda
                      ((g$b$9069$1WS4nL g$b*$9070$1WS4nL)
                       (g$bless$7508$1WS4nL
                         (cons
                           'let
                           (cons
                             '()
                             (cons g$b$9069$1WS4nL g$b*$9070$1WS4nL))))))
                    g$ls/false$9068$1WS4nL)
                  ((case-lambda
                     ((g$t$9071$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$9072$1WS4nL)
                          (if g$ls/false$9072$1WS4nL
                            (apply
                              (case-lambda
                                ((g$olhs*$9073$1WS4nL
                                   g$orhs*$9074$1WS4nL
                                   g$b$9075$1WS4nL
                                   g$b*$9076$1WS4nL)
                                 ((case-lambda
                                    ((g$lhs*$9077$1WS4nL g$rhs*$9078$1WS4nL)
                                     (g$bless$7508$1WS4nL
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9077$1WS4nL
                                             g$rhs*$9078$1WS4nL)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (map (case-lambda
                                                            ((g$lhs$9079$1WS4nL
                                                               g$rhs$9080$1WS4nL)
                                                             (list
                                                               'let
                                                               (list
                                                                 (list
                                                                   't
                                                                   (list
                                                                     g$lhs$9079$1WS4nL)))
                                                               (list
                                                                 g$lhs$9079$1WS4nL
                                                                 g$rhs$9080$1WS4nL)
                                                               (cons
                                                                 'set!
                                                                 (cons
                                                                   g$rhs$9080$1WS4nL
                                                                   '(t))))))
                                                          g$lhs*$9077$1WS4nL
                                                          g$rhs*$9078$1WS4nL)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9075$1WS4nL
                                                         g$b*$9076$1WS4nL)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9073$1WS4nL
                                           g$orhs*$9074$1WS4nL)))))
                                  (g$generate-temporaries$7646$1WS4nL
                                    g$olhs*$9073$1WS4nL)
                                  (g$generate-temporaries$7646$1WS4nL
                                    g$orhs*$9074$1WS4nL))))
                              g$ls/false$9072$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$9071$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$9071$1WS4nL
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9067$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$9067$1WS4nL
               '(_ () any . each-any)))))
         g$e$9066$1WS4nL))))
   (g$foreign-call-transformer$7543$1WS4nL
     g$foreign-call-transformer$11031$1WS4nL
     (case-lambda
       ((g$e$9081$1WS4nL g$r$9082$1WS4nL g$mr$9083$1WS4nL)
        ((case-lambda
           ((g$t$9084$1WS4nL)
            ((case-lambda
               ((g$ls/false$9085$1WS4nL)
                (if g$ls/false$9085$1WS4nL
                  (apply
                    (case-lambda
                      ((g$name$9086$1WS4nL g$arg*$9087$1WS4nL)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7563$1WS4nL
                             g$name$9086$1WS4nL
                             g$r$9082$1WS4nL
                             g$mr$9083$1WS4nL)
                           (g$chi-expr*$7561$1WS4nL
                             g$arg*$9087$1WS4nL
                             g$r$9082$1WS4nL
                             g$mr$9083$1WS4nL)))))
                    g$ls/false$9085$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$9084$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$9084$1WS4nL
               '(_ any . each-any)))))
         g$e$9081$1WS4nL))))
   (g$convert-pattern$7544$1WS4nL
     g$convert-pattern$11032$1WS4nL
     (case-lambda
       ((g$pattern$9088$1WS4nL g$keys$9089$1WS4nL)
        (letrec* ((g$cvt*$9090$1WS4nL
                    (case-lambda
                      ((g$p*$9170$1WS4nL g$n$9171$1WS4nL g$ids$9172$1WS4nL)
                       (if (null? g$p*$9170$1WS4nL)
                         (values '() g$ids$9172$1WS4nL)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9090$1WS4nL
                                (cdr g$p*$9170$1WS4nL)
                                g$n$9171$1WS4nL
                                g$ids$9172$1WS4nL)))
                           (case-lambda
                             ((g$y$9175$1WS4nL g$ids$9176$1WS4nL)
                              ((case-lambda
                                 ((g$ids$9177$1WS4nL g$y$9178$1WS4nL)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9091$1WS4nL
                                         (car g$p*$9170$1WS4nL)
                                         g$n$9171$1WS4nL
                                         g$ids$9177$1WS4nL)))
                                    (case-lambda
                                      ((g$x$9181$1WS4nL g$ids$9182$1WS4nL)
                                       ((case-lambda
                                          ((g$ids$9183$1WS4nL g$x$9184$1WS4nL)
                                           (values
                                             (cons
                                               g$x$9184$1WS4nL
                                               g$y$9178$1WS4nL)
                                             g$ids$9183$1WS4nL)))
                                        g$ids$9182$1WS4nL
                                        g$x$9181$1WS4nL))))))
                               g$ids$9176$1WS4nL
                               g$y$9175$1WS4nL))))))))
                  (g$cvt$9091$1WS4nL
                    (case-lambda
                      ((g$p$9092$1WS4nL g$n$9093$1WS4nL g$ids$9094$1WS4nL)
                       ((case-lambda
                          ((g$t$9095$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$9096$1WS4nL)
                               (if (if g$ls/false$9096$1WS4nL
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9097$1WS4nL)
                                            (g$id?$7267$1WS4nL
                                              g$id$9097$1WS4nL)))
                                         g$ls/false$9096$1WS4nL))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9098$1WS4nL)
                                      (if (g$bound-id-member?$7274$1WS4nL
                                            g$p$9092$1WS4nL
                                            g$keys$9089$1WS4nL)
                                        (values
                                          (vector 'free-id g$p$9092$1WS4nL)
                                          g$ids$9094$1WS4nL)
                                        (if (g$free-id=?$7271$1WS4nL
                                              g$p$9092$1WS4nL
                                              (g$scheme-stx$7488$1WS4nL '_))
                                          (values '_ g$ids$9094$1WS4nL)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9092$1WS4nL
                                                g$n$9093$1WS4nL)
                                              g$ids$9094$1WS4nL))))))
                                   g$ls/false$9096$1WS4nL)
                                 ((case-lambda
                                    ((g$t$9099$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$9100$1WS4nL)
                                         (if (if g$ls/false$9100$1WS4nL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9101$1WS4nL
                                                        g$dots$9102$1WS4nL)
                                                      (g$ellipsis?$7546$1WS4nL
                                                        g$dots$9102$1WS4nL)))
                                                   g$ls/false$9100$1WS4nL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9103$1WS4nL
                                                  g$dots$9104$1WS4nL)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9091$1WS4nL
                                                       g$p$9103$1WS4nL
                                                       (+ g$n$9093$1WS4nL '1)
                                                       g$ids$9094$1WS4nL)))
                                                  (case-lambda
                                                    ((g$p$9107$1WS4nL
                                                       g$ids$9108$1WS4nL)
                                                     ((case-lambda
                                                        ((g$ids$9109$1WS4nL
                                                           g$p$9110$1WS4nL)
                                                         (values
                                                           (if (eq? g$p$9110$1WS4nL
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9110$1WS4nL))
                                                           g$ids$9109$1WS4nL)))
                                                      g$ids$9108$1WS4nL
                                                      g$p$9107$1WS4nL))))))
                                             g$ls/false$9100$1WS4nL)
                                           ((case-lambda
                                              ((g$t$9111$1WS4nL)
                                               ((case-lambda
                                                  ((g$ls/false$9112$1WS4nL)
                                                   (if (if g$ls/false$9112$1WS4nL
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9113$1WS4nL
                                                                  g$dots$9114$1WS4nL
                                                                  g$ys$9115$1WS4nL
                                                                  g$z$9116$1WS4nL)
                                                                (g$ellipsis?$7546$1WS4nL
                                                                  g$dots$9114$1WS4nL)))
                                                             g$ls/false$9112$1WS4nL))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9117$1WS4nL
                                                            g$dots$9118$1WS4nL
                                                            g$ys$9119$1WS4nL
                                                            g$z$9120$1WS4nL)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9091$1WS4nL
                                                                 g$z$9120$1WS4nL
                                                                 g$n$9093$1WS4nL
                                                                 g$ids$9094$1WS4nL)))
                                                            (case-lambda
                                                              ((g$z$9123$1WS4nL
                                                                 g$ids$9124$1WS4nL)
                                                               ((case-lambda
                                                                  ((g$ids$9125$1WS4nL
                                                                     g$z$9126$1WS4nL)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9090$1WS4nL
                                                                          g$ys$9119$1WS4nL
                                                                          g$n$9093$1WS4nL
                                                                          g$ids$9125$1WS4nL)))
                                                                     (case-lambda
                                                                       ((g$ys$9129$1WS4nL
                                                                          g$ids$9130$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$ids$9131$1WS4nL
                                                                              g$ys$9132$1WS4nL)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9091$1WS4nL
                                                                                   g$x$9117$1WS4nL
                                                                                   (+ g$n$9093$1WS4nL
                                                                                      '1)
                                                                                   g$ids$9131$1WS4nL)))
                                                                              (case-lambda
                                                                                ((g$x$9135$1WS4nL
                                                                                   g$ids$9136$1WS4nL)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9137$1WS4nL
                                                                                       g$x$9138$1WS4nL)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9138$1WS4nL
                                                                                         (reverse
                                                                                           g$ys$9132$1WS4nL)
                                                                                         g$z$9126$1WS4nL)
                                                                                       g$ids$9137$1WS4nL)))
                                                                                  g$ids$9136$1WS4nL
                                                                                  g$x$9135$1WS4nL))))))
                                                                         g$ids$9130$1WS4nL
                                                                         g$ys$9129$1WS4nL))))))
                                                                g$ids$9124$1WS4nL
                                                                g$z$9123$1WS4nL))))))
                                                       g$ls/false$9112$1WS4nL)
                                                     ((case-lambda
                                                        ((g$t$9139$1WS4nL)
                                                         ((case-lambda
                                                            ((g$ls/false$9140$1WS4nL)
                                                             (if g$ls/false$9140$1WS4nL
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9141$1WS4nL
                                                                      g$y$9142$1WS4nL)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9091$1WS4nL
                                                                           g$y$9142$1WS4nL
                                                                           g$n$9093$1WS4nL
                                                                           g$ids$9094$1WS4nL)))
                                                                      (case-lambda
                                                                        ((g$y$9145$1WS4nL
                                                                           g$ids$9146$1WS4nL)
                                                                         ((case-lambda
                                                                            ((g$ids$9147$1WS4nL
                                                                               g$y$9148$1WS4nL)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9091$1WS4nL
                                                                                    g$x$9141$1WS4nL
                                                                                    g$n$9093$1WS4nL
                                                                                    g$ids$9147$1WS4nL)))
                                                                               (case-lambda
                                                                                 ((g$x$9151$1WS4nL
                                                                                    g$ids$9152$1WS4nL)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9153$1WS4nL
                                                                                        g$x$9154$1WS4nL)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9154$1WS4nL
                                                                                          g$y$9148$1WS4nL)
                                                                                        g$ids$9153$1WS4nL)))
                                                                                   g$ids$9152$1WS4nL
                                                                                   g$x$9151$1WS4nL))))))
                                                                          g$ids$9146$1WS4nL
                                                                          g$y$9145$1WS4nL))))))
                                                                 g$ls/false$9140$1WS4nL)
                                                               ((case-lambda
                                                                  ((g$t$9155$1WS4nL)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9156$1WS4nL)
                                                                       (if g$ls/false$9156$1WS4nL
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9094$1WS4nL)))
                                                                           g$ls/false$9156$1WS4nL)
                                                                         ((case-lambda
                                                                            ((g$t$9157$1WS4nL)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9158$1WS4nL)
                                                                                 (if (if g$ls/false$9158$1WS4nL
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9159$1WS4nL)
                                                                                              (not (g$stx?$7239$1WS4nL
                                                                                                     g$p$9159$1WS4nL))))
                                                                                           g$ls/false$9158$1WS4nL))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9160$1WS4nL)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9091$1WS4nL
                                                                                               g$p$9160$1WS4nL
                                                                                               g$n$9093$1WS4nL
                                                                                               g$ids$9094$1WS4nL)))
                                                                                          (case-lambda
                                                                                            ((g$p$9163$1WS4nL
                                                                                               g$ids$9164$1WS4nL)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9165$1WS4nL
                                                                                                   g$p$9166$1WS4nL)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9166$1WS4nL)
                                                                                                   g$ids$9165$1WS4nL)))
                                                                                              g$ids$9164$1WS4nL
                                                                                              g$p$9163$1WS4nL))))))
                                                                                     g$ls/false$9158$1WS4nL)
                                                                                   ((case-lambda
                                                                                      ((g$t$9167$1WS4nL)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9168$1WS4nL)
                                                                                           (if g$ls/false$9168$1WS4nL
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9169$1WS4nL)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7278$1WS4nL
                                                                                                        g$datum$9169$1WS4nL))
                                                                                                    g$ids$9094$1WS4nL)))
                                                                                               g$ls/false$9168$1WS4nL)
                                                                                             (g$syntax-violation$7656$1WS4nL
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9167$1WS4nL))))
                                                                                        (g$syntax-dispatch$7545$1WS4nL
                                                                                          g$t$9167$1WS4nL
                                                                                          'any))))
                                                                                    g$t$9157$1WS4nL))))
                                                                              (g$syntax-dispatch$7545$1WS4nL
                                                                                g$t$9157$1WS4nL
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9155$1WS4nL))))
                                                                    (g$syntax-dispatch$7545$1WS4nL
                                                                      g$t$9155$1WS4nL
                                                                      '()))))
                                                                g$t$9139$1WS4nL))))
                                                          (g$syntax-dispatch$7545$1WS4nL
                                                            g$t$9139$1WS4nL
                                                            '(any . any)))))
                                                      g$t$9111$1WS4nL))))
                                                (g$syntax-dispatch$7545$1WS4nL
                                                  g$t$9111$1WS4nL
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9099$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$9099$1WS4nL
                                        '(any any)))))
                                  g$t$9095$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$9095$1WS4nL
                              'any))))
                        g$p$9092$1WS4nL)))))
          (g$cvt$9091$1WS4nL g$pattern$9088$1WS4nL '0 '())))))
   (g$syntax-dispatch$7545$1WS4nL
     g$syntax-dispatch$11033$1WS4nL
     ((case-lambda
        (()
         (letrec* ((g$stx^$9185$1WS4nL
                     (case-lambda
                       ((g$e$9295$1WS4nL
                          g$m*$9296$1WS4nL
                          g$s*$9297$1WS4nL
                          g$ae*$9298$1WS4nL)
                        (if (if (null? g$m*$9296$1WS4nL)
                              (if (null? g$s*$9297$1WS4nL)
                                (begin '#f (null? g$ae*$9298$1WS4nL))
                                '#f)
                              '#f)
                          g$e$9295$1WS4nL
                          (g$mkstx$7255$1WS4nL
                            g$e$9295$1WS4nL
                            g$m*$9296$1WS4nL
                            g$s*$9297$1WS4nL
                            g$ae*$9298$1WS4nL)))))
                   (g$match-each$9186$1WS4nL
                     (case-lambda
                       ((g$e$9279$1WS4nL
                          g$p$9280$1WS4nL
                          g$m*$9281$1WS4nL
                          g$s*$9282$1WS4nL
                          g$ae*$9283$1WS4nL)
                        (if (pair? g$e$9279$1WS4nL)
                          ((case-lambda
                             ((g$first$9284$1WS4nL)
                              (if g$first$9284$1WS4nL
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9285$1WS4nL)
                                      (if g$rest$9285$1WS4nL
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9284$1WS4nL
                                            g$rest$9285$1WS4nL))
                                        '#f)))
                                   (g$match-each$9186$1WS4nL
                                     (cdr g$e$9279$1WS4nL)
                                     g$p$9280$1WS4nL
                                     g$m*$9281$1WS4nL
                                     g$s*$9282$1WS4nL
                                     g$ae*$9283$1WS4nL)))
                                '#f)))
                           (g$match$9192$1WS4nL
                             (car g$e$9279$1WS4nL)
                             g$p$9280$1WS4nL
                             g$m*$9281$1WS4nL
                             g$s*$9282$1WS4nL
                             g$ae*$9283$1WS4nL
                             '()))
                          (if (null? g$e$9279$1WS4nL)
                            '()
                            (if (g$stx?$7239$1WS4nL g$e$9279$1WS4nL)
                              (if (not (g$top-marked?$7205$1WS4nL
                                         g$m*$9281$1WS4nL))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7254$1WS4nL
                                         g$m*$9281$1WS4nL
                                         g$s*$9282$1WS4nL
                                         g$ae*$9283$1WS4nL
                                         g$e$9279$1WS4nL)))
                                    (case-lambda
                                      ((g$m*$9289$1WS4nL
                                         g$s*$9290$1WS4nL
                                         g$ae*$9291$1WS4nL)
                                       ((case-lambda
                                          ((g$ae*$9292$1WS4nL
                                             g$s*$9293$1WS4nL
                                             g$m*$9294$1WS4nL)
                                           (g$match-each$9186$1WS4nL
                                             (g$stx-expr$7241$1WS4nL
                                               g$e$9279$1WS4nL)
                                             g$p$9280$1WS4nL
                                             g$m*$9294$1WS4nL
                                             g$s*$9293$1WS4nL
                                             g$ae*$9292$1WS4nL)))
                                        g$ae*$9291$1WS4nL
                                        g$s*$9290$1WS4nL
                                        g$m*$9289$1WS4nL)))))
                                '#f)
                              (if (annotation? g$e$9279$1WS4nL)
                                (g$match-each$9186$1WS4nL
                                  (annotation-expression g$e$9279$1WS4nL)
                                  g$p$9280$1WS4nL
                                  g$m*$9281$1WS4nL
                                  g$s*$9282$1WS4nL
                                  g$ae*$9283$1WS4nL)
                                '#f)))))))
                   (g$match-each+$9187$1WS4nL
                     (case-lambda
                       ((g$e$9247$1WS4nL
                          g$x-pat$9248$1WS4nL
                          g$y-pat$9249$1WS4nL
                          g$z-pat$9250$1WS4nL
                          g$m*$9251$1WS4nL
                          g$s*$9252$1WS4nL
                          g$ae*$9253$1WS4nL
                          g$r$9254$1WS4nL)
                        ((letrec ((g$f$9255$1WS4nL
                                    (case-lambda
                                      ((g$e$9256$1WS4nL
                                         g$m*$9257$1WS4nL
                                         g$s*$9258$1WS4nL
                                         g$ae*$9259$1WS4nL)
                                       (if (pair? g$e$9256$1WS4nL)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9255$1WS4nL
                                                (cdr g$e$9256$1WS4nL)
                                                g$m*$9257$1WS4nL
                                                g$s*$9258$1WS4nL
                                                g$ae*$9259$1WS4nL)))
                                           (case-lambda
                                             ((g$xr*$9263$1WS4nL
                                                g$y-pat$9264$1WS4nL
                                                g$r$9265$1WS4nL)
                                              ((case-lambda
                                                 ((g$r$9266$1WS4nL
                                                    g$y-pat$9267$1WS4nL
                                                    g$xr*$9268$1WS4nL)
                                                  (if g$r$9266$1WS4nL
                                                    (if (null?
                                                          g$y-pat$9267$1WS4nL)
                                                      ((case-lambda
                                                         ((g$xr$9269$1WS4nL)
                                                          (if g$xr$9269$1WS4nL
                                                            (values
                                                              (cons
                                                                g$xr$9269$1WS4nL
                                                                g$xr*$9268$1WS4nL)
                                                              g$y-pat$9267$1WS4nL
                                                              g$r$9266$1WS4nL)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9192$1WS4nL
                                                         (car g$e$9256$1WS4nL)
                                                         g$x-pat$9248$1WS4nL
                                                         g$m*$9257$1WS4nL
                                                         g$s*$9258$1WS4nL
                                                         g$ae*$9259$1WS4nL
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9267$1WS4nL)
                                                        (g$match$9192$1WS4nL
                                                          (car g$e$9256$1WS4nL)
                                                          (car g$y-pat$9267$1WS4nL)
                                                          g$m*$9257$1WS4nL
                                                          g$s*$9258$1WS4nL
                                                          g$ae*$9259$1WS4nL
                                                          g$r$9266$1WS4nL)))
                                                    (values '#f '#f '#f))))
                                               g$r$9265$1WS4nL
                                               g$y-pat$9264$1WS4nL
                                               g$xr*$9263$1WS4nL))))
                                         (if (g$stx?$7239$1WS4nL
                                               g$e$9256$1WS4nL)
                                           (if (g$top-marked?$7205$1WS4nL
                                                 g$m*$9257$1WS4nL)
                                             (values
                                               '()
                                               g$y-pat$9249$1WS4nL
                                               (g$match$9192$1WS4nL
                                                 g$e$9256$1WS4nL
                                                 g$z-pat$9250$1WS4nL
                                                 g$m*$9257$1WS4nL
                                                 g$s*$9258$1WS4nL
                                                 g$ae*$9259$1WS4nL
                                                 g$r$9254$1WS4nL))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7254$1WS4nL
                                                    g$m*$9257$1WS4nL
                                                    g$s*$9258$1WS4nL
                                                    g$ae*$9259$1WS4nL
                                                    g$e$9256$1WS4nL)))
                                               (case-lambda
                                                 ((g$m*$9273$1WS4nL
                                                    g$s*$9274$1WS4nL
                                                    g$ae*$9275$1WS4nL)
                                                  ((case-lambda
                                                     ((g$ae*$9276$1WS4nL
                                                        g$s*$9277$1WS4nL
                                                        g$m*$9278$1WS4nL)
                                                      (g$f$9255$1WS4nL
                                                        (g$stx-expr$7241$1WS4nL
                                                          g$e$9256$1WS4nL)
                                                        g$m*$9278$1WS4nL
                                                        g$s*$9277$1WS4nL
                                                        g$ae*$9276$1WS4nL)))
                                                   g$ae*$9275$1WS4nL
                                                   g$s*$9274$1WS4nL
                                                   g$m*$9273$1WS4nL)))))
                                           (if (annotation? g$e$9256$1WS4nL)
                                             (g$f$9255$1WS4nL
                                               (annotation-expression
                                                 g$e$9256$1WS4nL)
                                               g$m*$9257$1WS4nL
                                               g$s*$9258$1WS4nL
                                               g$ae*$9259$1WS4nL)
                                             (values
                                               '()
                                               g$y-pat$9249$1WS4nL
                                               (g$match$9192$1WS4nL
                                                 g$e$9256$1WS4nL
                                                 g$z-pat$9250$1WS4nL
                                                 g$m*$9257$1WS4nL
                                                 g$s*$9258$1WS4nL
                                                 g$ae*$9259$1WS4nL
                                                 g$r$9254$1WS4nL)))))))))
                           g$f$9255$1WS4nL)
                         g$e$9247$1WS4nL
                         g$m*$9251$1WS4nL
                         g$s*$9252$1WS4nL
                         g$ae*$9253$1WS4nL))))
                   (g$match-each-any$9188$1WS4nL
                     (case-lambda
                       ((g$e$9233$1WS4nL
                          g$m*$9234$1WS4nL
                          g$s*$9235$1WS4nL
                          g$ae*$9236$1WS4nL)
                        (if (pair? g$e$9233$1WS4nL)
                          ((case-lambda
                             ((g$l$9237$1WS4nL)
                              (if g$l$9237$1WS4nL
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9185$1WS4nL
                                      (car g$e$9233$1WS4nL)
                                      g$m*$9234$1WS4nL
                                      g$s*$9235$1WS4nL
                                      g$ae*$9236$1WS4nL)
                                    g$l$9237$1WS4nL))
                                '#f)))
                           (g$match-each-any$9188$1WS4nL
                             (cdr g$e$9233$1WS4nL)
                             g$m*$9234$1WS4nL
                             g$s*$9235$1WS4nL
                             g$ae*$9236$1WS4nL))
                          (if (null? g$e$9233$1WS4nL)
                            '()
                            (if (g$stx?$7239$1WS4nL g$e$9233$1WS4nL)
                              (if (not (g$top-marked?$7205$1WS4nL
                                         g$m*$9234$1WS4nL))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7254$1WS4nL
                                         g$m*$9234$1WS4nL
                                         g$s*$9235$1WS4nL
                                         g$ae*$9236$1WS4nL
                                         g$e$9233$1WS4nL)))
                                    (case-lambda
                                      ((g$m*$9241$1WS4nL
                                         g$s*$9242$1WS4nL
                                         g$ae*$9243$1WS4nL)
                                       ((case-lambda
                                          ((g$ae*$9244$1WS4nL
                                             g$s*$9245$1WS4nL
                                             g$m*$9246$1WS4nL)
                                           (g$match-each-any$9188$1WS4nL
                                             (g$stx-expr$7241$1WS4nL
                                               g$e$9233$1WS4nL)
                                             g$m*$9246$1WS4nL
                                             g$s*$9245$1WS4nL
                                             g$ae*$9244$1WS4nL)))
                                        g$ae*$9243$1WS4nL
                                        g$s*$9242$1WS4nL
                                        g$m*$9241$1WS4nL)))))
                                '#f)
                              (if (annotation? g$e$9233$1WS4nL)
                                (g$match-each-any$9188$1WS4nL
                                  (annotation-expression g$e$9233$1WS4nL)
                                  g$m*$9234$1WS4nL
                                  g$s*$9235$1WS4nL
                                  g$ae*$9236$1WS4nL)
                                '#f)))))))
                   (g$match-empty$9189$1WS4nL
                     (case-lambda
                       ((g$p$9230$1WS4nL g$r$9231$1WS4nL)
                        (if (null? g$p$9230$1WS4nL)
                          g$r$9231$1WS4nL
                          (if (eq? g$p$9230$1WS4nL '_)
                            g$r$9231$1WS4nL
                            (if (eq? g$p$9230$1WS4nL 'any)
                              (cons '() g$r$9231$1WS4nL)
                              (if (pair? g$p$9230$1WS4nL)
                                (g$match-empty$9189$1WS4nL
                                  (car g$p$9230$1WS4nL)
                                  (g$match-empty$9189$1WS4nL
                                    (cdr g$p$9230$1WS4nL)
                                    g$r$9231$1WS4nL))
                                (if (eq? g$p$9230$1WS4nL 'each-any)
                                  (cons '() g$r$9231$1WS4nL)
                                  ((case-lambda
                                     ((g$t$9232$1WS4nL)
                                      (if (g$memv$4996$1WS4nL
                                            g$t$9232$1WS4nL
                                            '(each))
                                        (g$match-empty$9189$1WS4nL
                                          (vector-ref g$p$9230$1WS4nL '1)
                                          g$r$9231$1WS4nL)
                                        (if (g$memv$4996$1WS4nL
                                              g$t$9232$1WS4nL
                                              '(each+))
                                          (g$match-empty$9189$1WS4nL
                                            (vector-ref g$p$9230$1WS4nL '1)
                                            (g$match-empty$9189$1WS4nL
                                              (reverse
                                                (vector-ref g$p$9230$1WS4nL '2))
                                              (g$match-empty$9189$1WS4nL
                                                (vector-ref g$p$9230$1WS4nL '3)
                                                g$r$9231$1WS4nL)))
                                          (if (g$memv$4996$1WS4nL
                                                g$t$9232$1WS4nL
                                                '(free-id atom))
                                            g$r$9231$1WS4nL
                                            (if (g$memv$4996$1WS4nL
                                                  g$t$9232$1WS4nL
                                                  '(scheme-id atom))
                                              g$r$9231$1WS4nL
                                              (if (g$memv$4996$1WS4nL
                                                    g$t$9232$1WS4nL
                                                    '(vector))
                                                (g$match-empty$9189$1WS4nL
                                                  (vector-ref
                                                    g$p$9230$1WS4nL
                                                    '1)
                                                  g$r$9231$1WS4nL)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9230$1WS4nL))))))))
                                   (vector-ref g$p$9230$1WS4nL '0))))))))))
                   (g$combine$9190$1WS4nL
                     (case-lambda
                       ((g$r*$9228$1WS4nL g$r$9229$1WS4nL)
                        (if (null? (car g$r*$9228$1WS4nL))
                          g$r$9229$1WS4nL
                          (cons
                            (map car g$r*$9228$1WS4nL)
                            (g$combine$9190$1WS4nL
                              (map cdr g$r*$9228$1WS4nL)
                              g$r$9229$1WS4nL))))))
                   (g$match*$9191$1WS4nL
                     (case-lambda
                       ((g$e$9210$1WS4nL
                          g$p$9211$1WS4nL
                          g$m*$9212$1WS4nL
                          g$s*$9213$1WS4nL
                          g$ae*$9214$1WS4nL
                          g$r$9215$1WS4nL)
                        (if (null? g$p$9211$1WS4nL)
                          (if (null? g$e$9210$1WS4nL)
                            (begin '#f g$r$9215$1WS4nL)
                            '#f)
                          (if (pair? g$p$9211$1WS4nL)
                            (if (pair? g$e$9210$1WS4nL)
                              (begin
                                '#f
                                (g$match$9192$1WS4nL
                                  (car g$e$9210$1WS4nL)
                                  (car g$p$9211$1WS4nL)
                                  g$m*$9212$1WS4nL
                                  g$s*$9213$1WS4nL
                                  g$ae*$9214$1WS4nL
                                  (g$match$9192$1WS4nL
                                    (cdr g$e$9210$1WS4nL)
                                    (cdr g$p$9211$1WS4nL)
                                    g$m*$9212$1WS4nL
                                    g$s*$9213$1WS4nL
                                    g$ae*$9214$1WS4nL
                                    g$r$9215$1WS4nL)))
                              '#f)
                            (if (eq? g$p$9211$1WS4nL 'each-any)
                              ((case-lambda
                                 ((g$l$9216$1WS4nL)
                                  (if g$l$9216$1WS4nL
                                    (begin
                                      '#f
                                      (cons g$l$9216$1WS4nL g$r$9215$1WS4nL))
                                    '#f)))
                               (g$match-each-any$9188$1WS4nL
                                 g$e$9210$1WS4nL
                                 g$m*$9212$1WS4nL
                                 g$s*$9213$1WS4nL
                                 g$ae*$9214$1WS4nL))
                              ((case-lambda
                                 ((g$t$9217$1WS4nL)
                                  (if (g$memv$4996$1WS4nL
                                        g$t$9217$1WS4nL
                                        '(each))
                                    (if (null? g$e$9210$1WS4nL)
                                      (g$match-empty$9189$1WS4nL
                                        (vector-ref g$p$9211$1WS4nL '1)
                                        g$r$9215$1WS4nL)
                                      ((case-lambda
                                         ((g$r*$9218$1WS4nL)
                                          (if g$r*$9218$1WS4nL
                                            (begin
                                              '#f
                                              (g$combine$9190$1WS4nL
                                                g$r*$9218$1WS4nL
                                                g$r$9215$1WS4nL))
                                            '#f)))
                                       (g$match-each$9186$1WS4nL
                                         g$e$9210$1WS4nL
                                         (vector-ref g$p$9211$1WS4nL '1)
                                         g$m*$9212$1WS4nL
                                         g$s*$9213$1WS4nL
                                         g$ae*$9214$1WS4nL)))
                                    (if (g$memv$4996$1WS4nL
                                          g$t$9217$1WS4nL
                                          '(free-id))
                                      (if (symbol? g$e$9210$1WS4nL)
                                        (if (g$top-marked?$7205$1WS4nL
                                              g$m*$9212$1WS4nL)
                                          (if (g$free-id=?$7271$1WS4nL
                                                (g$stx^$9185$1WS4nL
                                                  g$e$9210$1WS4nL
                                                  g$m*$9212$1WS4nL
                                                  g$s*$9213$1WS4nL
                                                  g$ae*$9214$1WS4nL)
                                                (vector-ref g$p$9211$1WS4nL '1))
                                            (begin '#f g$r$9215$1WS4nL)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$4996$1WS4nL
                                            g$t$9217$1WS4nL
                                            '(scheme-id))
                                        (if (symbol? g$e$9210$1WS4nL)
                                          (if (g$top-marked?$7205$1WS4nL
                                                g$m*$9212$1WS4nL)
                                            (if (g$free-id=?$7271$1WS4nL
                                                  (g$stx^$9185$1WS4nL
                                                    g$e$9210$1WS4nL
                                                    g$m*$9212$1WS4nL
                                                    g$s*$9213$1WS4nL
                                                    g$ae*$9214$1WS4nL)
                                                  (g$scheme-stx$7488$1WS4nL
                                                    (vector-ref
                                                      g$p$9211$1WS4nL
                                                      '1)))
                                              (begin '#f g$r$9215$1WS4nL)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$4996$1WS4nL
                                              g$t$9217$1WS4nL
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9187$1WS4nL
                                                 g$e$9210$1WS4nL
                                                 (vector-ref g$p$9211$1WS4nL '1)
                                                 (vector-ref g$p$9211$1WS4nL '2)
                                                 (vector-ref g$p$9211$1WS4nL '3)
                                                 g$m*$9212$1WS4nL
                                                 g$s*$9213$1WS4nL
                                                 g$ae*$9214$1WS4nL
                                                 g$r$9215$1WS4nL)))
                                            (case-lambda
                                              ((g$xr*$9222$1WS4nL
                                                 g$y-pat$9223$1WS4nL
                                                 g$r$9224$1WS4nL)
                                               ((case-lambda
                                                  ((g$r$9225$1WS4nL
                                                     g$y-pat$9226$1WS4nL
                                                     g$xr*$9227$1WS4nL)
                                                   (if g$r$9225$1WS4nL
                                                     (if (null?
                                                           g$y-pat$9226$1WS4nL)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9227$1WS4nL)
                                                           (g$match-empty$9189$1WS4nL
                                                             (vector-ref
                                                               g$p$9211$1WS4nL
                                                               '1)
                                                             g$r$9225$1WS4nL)
                                                           (g$combine$9190$1WS4nL
                                                             g$xr*$9227$1WS4nL
                                                             g$r$9225$1WS4nL)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9224$1WS4nL
                                                g$y-pat$9223$1WS4nL
                                                g$xr*$9222$1WS4nL))))
                                          (if (g$memv$4996$1WS4nL
                                                g$t$9217$1WS4nL
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref
                                                    g$p$9211$1WS4nL
                                                    '1)
                                                  (g$strip$7277$1WS4nL
                                                    g$e$9210$1WS4nL
                                                    g$m*$9212$1WS4nL))
                                              (begin '#f g$r$9215$1WS4nL)
                                              '#f)
                                            (if (g$memv$4996$1WS4nL
                                                  g$t$9217$1WS4nL
                                                  '(vector))
                                              (if (vector? g$e$9210$1WS4nL)
                                                (begin
                                                  '#f
                                                  (g$match$9192$1WS4nL
                                                    (vector->list
                                                      g$e$9210$1WS4nL)
                                                    (vector-ref
                                                      g$p$9211$1WS4nL
                                                      '1)
                                                    g$m*$9212$1WS4nL
                                                    g$s*$9213$1WS4nL
                                                    g$ae*$9214$1WS4nL
                                                    g$r$9215$1WS4nL))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9211$1WS4nL)))))))))
                               (vector-ref g$p$9211$1WS4nL '0))))))))
                   (g$match$9192$1WS4nL
                     (case-lambda
                       ((g$e$9195$1WS4nL
                          g$p$9196$1WS4nL
                          g$m*$9197$1WS4nL
                          g$s*$9198$1WS4nL
                          g$ae*$9199$1WS4nL
                          g$r$9200$1WS4nL)
                        (if (not g$r$9200$1WS4nL)
                          '#f
                          (if (eq? g$p$9196$1WS4nL '_)
                            g$r$9200$1WS4nL
                            (if (eq? g$p$9196$1WS4nL 'any)
                              (cons
                                (g$stx^$9185$1WS4nL
                                  g$e$9195$1WS4nL
                                  g$m*$9197$1WS4nL
                                  g$s*$9198$1WS4nL
                                  g$ae*$9199$1WS4nL)
                                g$r$9200$1WS4nL)
                              (if (g$stx?$7239$1WS4nL g$e$9195$1WS4nL)
                                (if (not (g$top-marked?$7205$1WS4nL
                                           g$m*$9197$1WS4nL))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7254$1WS4nL
                                           g$m*$9197$1WS4nL
                                           g$s*$9198$1WS4nL
                                           g$ae*$9199$1WS4nL
                                           g$e$9195$1WS4nL)))
                                      (case-lambda
                                        ((g$m*$9204$1WS4nL
                                           g$s*$9205$1WS4nL
                                           g$ae*$9206$1WS4nL)
                                         ((case-lambda
                                            ((g$ae*$9207$1WS4nL
                                               g$s*$9208$1WS4nL
                                               g$m*$9209$1WS4nL)
                                             (g$match$9192$1WS4nL
                                               (g$stx-expr$7241$1WS4nL
                                                 g$e$9195$1WS4nL)
                                               g$p$9196$1WS4nL
                                               g$m*$9209$1WS4nL
                                               g$s*$9208$1WS4nL
                                               g$ae*$9207$1WS4nL
                                               g$r$9200$1WS4nL)))
                                          g$ae*$9206$1WS4nL
                                          g$s*$9205$1WS4nL
                                          g$m*$9204$1WS4nL)))))
                                  '#f)
                                (if (annotation? g$e$9195$1WS4nL)
                                  (g$match$9192$1WS4nL
                                    (annotation-expression g$e$9195$1WS4nL)
                                    g$p$9196$1WS4nL
                                    g$m*$9197$1WS4nL
                                    g$s*$9198$1WS4nL
                                    g$ae*$9199$1WS4nL
                                    g$r$9200$1WS4nL)
                                  (g$match*$9191$1WS4nL
                                    g$e$9195$1WS4nL
                                    g$p$9196$1WS4nL
                                    g$m*$9197$1WS4nL
                                    g$s*$9198$1WS4nL
                                    g$ae*$9199$1WS4nL
                                    g$r$9200$1WS4nL))))))))))
           (case-lambda
             ((g$e$9193$1WS4nL g$p$9194$1WS4nL)
              (g$match$9192$1WS4nL
                g$e$9193$1WS4nL
                g$p$9194$1WS4nL
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$7546$1WS4nL
     g$ellipsis?$11034$1WS4nL
     (case-lambda
       ((g$x$9299$1WS4nL)
        (if (g$id?$7267$1WS4nL g$x$9299$1WS4nL)
          (begin
            '#f
            (g$free-id=?$7271$1WS4nL
              g$x$9299$1WS4nL
              (g$scheme-stx$7488$1WS4nL '...)))
          '#f))))
   (g$underscore?$7547$1WS4nL
     g$underscore?$11035$1WS4nL
     (case-lambda
       ((g$x$9300$1WS4nL)
        (if (g$id?$7267$1WS4nL g$x$9300$1WS4nL)
          (begin
            '#f
            (g$free-id=?$7271$1WS4nL
              g$x$9300$1WS4nL
              (g$scheme-stx$7488$1WS4nL '_)))
          '#f))))
   (g$verify-literals$7548$1WS4nL
     g$verify-literals$11036$1WS4nL
     (case-lambda
       ((g$lits$9301$1WS4nL g$expr$9302$1WS4nL)
        (for-each
          (case-lambda
            ((g$x$9303$1WS4nL)
             (if ((case-lambda
                    ((g$t$9304$1WS4nL)
                     (if g$t$9304$1WS4nL
                       g$t$9304$1WS4nL
                       ((case-lambda
                          ((g$t$9305$1WS4nL)
                           (if g$t$9305$1WS4nL
                             g$t$9305$1WS4nL
                             (begin
                               '#f
                               (g$underscore?$7547$1WS4nL g$x$9303$1WS4nL)))))
                        (g$ellipsis?$7546$1WS4nL g$x$9303$1WS4nL)))))
                  (not (g$id?$7267$1WS4nL g$x$9303$1WS4nL)))
               (g$syntax-violation$7656$1WS4nL
                 '#f
                 '"invalid literal"
                 g$expr$9302$1WS4nL
                 g$x$9303$1WS4nL)
               (void))))
          g$lits$9301$1WS4nL))))
   (g$syntax-case-transformer$7549$1WS4nL
     g$syntax-case-transformer$11037$1WS4nL
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9306$1WS4nL
                     (case-lambda
                       ((g$pvars$9363$1WS4nL
                          g$expr$9364$1WS4nL
                          g$y$9365$1WS4nL
                          g$r$9366$1WS4nL
                          g$mr$9367$1WS4nL)
                        ((case-lambda
                           ((g$ids$9368$1WS4nL g$levels$9369$1WS4nL)
                            ((case-lambda
                               ((g$labels$9370$1WS4nL g$new-vars$9371$1WS4nL)
                                ((case-lambda
                                   ((g$body$9372$1WS4nL)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7193$1WS4nL
                                        '#f
                                        g$new-vars$9371$1WS4nL
                                        g$body$9372$1WS4nL)
                                      g$y$9365$1WS4nL)))
                                 (g$chi-expr$7563$1WS4nL
                                   (g$add-subst$7257$1WS4nL
                                     (g$make-full-rib$7235$1WS4nL
                                       g$ids$9368$1WS4nL
                                       g$labels$9370$1WS4nL)
                                     g$expr$9364$1WS4nL)
                                   (append
                                     (map (case-lambda
                                            ((g$label$9373$1WS4nL
                                               g$var$9374$1WS4nL
                                               g$level$9375$1WS4nL)
                                             (cons
                                               g$label$9373$1WS4nL
                                               (g$make-binding$7283$1WS4nL
                                                 'syntax
                                                 (cons
                                                   g$var$9374$1WS4nL
                                                   g$level$9375$1WS4nL)))))
                                          g$labels$9370$1WS4nL
                                          g$new-vars$9371$1WS4nL
                                          (map cdr g$pvars$9363$1WS4nL))
                                     g$r$9366$1WS4nL)
                                   g$mr$9367$1WS4nL))))
                             (map g$gen-label$7208$1WS4nL g$ids$9368$1WS4nL)
                             (map g$gen-lexical$7206$1WS4nL
                                  g$ids$9368$1WS4nL))))
                         (map car g$pvars$9363$1WS4nL)
                         (map cdr g$pvars$9363$1WS4nL)))))
                   (g$invalid-ids-error$9307$1WS4nL
                     (case-lambda
                       ((g$id*$9357$1WS4nL g$e$9358$1WS4nL g$class$9359$1WS4nL)
                        ((letrec ((g$find$9360$1WS4nL
                                    (case-lambda
                                      ((g$id*$9361$1WS4nL g$ok*$9362$1WS4nL)
                                       (if (null? g$id*$9361$1WS4nL)
                                         (g$syntax-violation$7656$1WS4nL
                                           '#f
                                           '"invalid syntax"
                                           g$e$9358$1WS4nL)
                                         (if (g$id?$7267$1WS4nL
                                               (car g$id*$9361$1WS4nL))
                                           (if (g$bound-id-member?$7274$1WS4nL
                                                 (car g$id*$9361$1WS4nL)
                                                 g$ok*$9362$1WS4nL)
                                             (g$syntax-error$7653$1WS4nL
                                               (car g$id*$9361$1WS4nL)
                                               '"duplicate "
                                               g$class$9359$1WS4nL)
                                             (g$find$9360$1WS4nL
                                               (cdr g$id*$9361$1WS4nL)
                                               (cons
                                                 (car g$id*$9361$1WS4nL)
                                                 g$ok*$9362$1WS4nL)))
                                           (g$syntax-error$7653$1WS4nL
                                             (car g$id*$9361$1WS4nL)
                                             '"invalid "
                                             g$class$9359$1WS4nL)))))))
                           g$find$9360$1WS4nL)
                         g$id*$9357$1WS4nL
                         '()))))
                   (g$gen-clause$9308$1WS4nL
                     (case-lambda
                       ((g$x$9337$1WS4nL
                          g$keys$9338$1WS4nL
                          g$clauses$9339$1WS4nL
                          g$r$9340$1WS4nL
                          g$mr$9341$1WS4nL
                          g$pat$9342$1WS4nL
                          g$fender$9343$1WS4nL
                          g$expr$9344$1WS4nL)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7544$1WS4nL
                               g$pat$9342$1WS4nL
                               g$keys$9338$1WS4nL)))
                          (case-lambda
                            ((g$p$9347$1WS4nL g$pvars$9348$1WS4nL)
                             ((case-lambda
                                ((g$pvars$9349$1WS4nL g$p$9350$1WS4nL)
                                 (if (not (g$distinct-bound-ids?$7273$1WS4nL
                                            (map car g$pvars$9349$1WS4nL)))
                                   (g$invalid-ids-error$9307$1WS4nL
                                     (map car g$pvars$9349$1WS4nL)
                                     g$pat$9342$1WS4nL
                                     '"pattern variable")
                                   (if (not (g$for-all$5001$1WS4nL
                                              (case-lambda
                                                ((g$x$9351$1WS4nL)
                                                 (not (g$ellipsis?$7546$1WS4nL
                                                        (car g$x$9351$1WS4nL)))))
                                              g$pvars$9349$1WS4nL))
                                     (g$syntax-violation$7656$1WS4nL
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9342$1WS4nL)
                                     ((case-lambda
                                        ((g$y$9352$1WS4nL)
                                         ((case-lambda
                                            ((g$test$9353$1WS4nL)
                                             ((case-lambda
                                                ((g$conseq$9354$1WS4nL)
                                                 ((case-lambda
                                                    ((g$altern$9355$1WS4nL)
                                                     (list
                                                       (g$build-lambda$7193$1WS4nL
                                                         '#f
                                                         (list g$y$9352$1WS4nL)
                                                         (list
                                                           'if
                                                           g$test$9353$1WS4nL
                                                           g$conseq$9354$1WS4nL
                                                           g$altern$9355$1WS4nL))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9337$1WS4nL
                                                         (list
                                                           'quote
                                                           g$p$9350$1WS4nL)))))
                                                  (g$gen-syntax-case$9309$1WS4nL
                                                    g$x$9337$1WS4nL
                                                    g$keys$9338$1WS4nL
                                                    g$clauses$9339$1WS4nL
                                                    g$r$9340$1WS4nL
                                                    g$mr$9341$1WS4nL))))
                                              (g$build-dispatch-call$9306$1WS4nL
                                                g$pvars$9349$1WS4nL
                                                g$expr$9344$1WS4nL
                                                g$y$9352$1WS4nL
                                                g$r$9340$1WS4nL
                                                g$mr$9341$1WS4nL))))
                                          (if (eq? g$fender$9343$1WS4nL '#t)
                                            g$y$9352$1WS4nL
                                            ((case-lambda
                                               ((g$call$9356$1WS4nL)
                                                (list
                                                  'if
                                                  g$y$9352$1WS4nL
                                                  g$call$9356$1WS4nL
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9306$1WS4nL
                                               g$pvars$9349$1WS4nL
                                               g$fender$9343$1WS4nL
                                               g$y$9352$1WS4nL
                                               g$r$9340$1WS4nL
                                               g$mr$9341$1WS4nL))))))
                                      (g$gen-lexical$7206$1WS4nL 'tmp))))))
                              g$pvars$9348$1WS4nL
                              g$p$9347$1WS4nL)))))))
                   (g$gen-syntax-case$9309$1WS4nL
                     (case-lambda
                       ((g$x$9320$1WS4nL
                          g$keys$9321$1WS4nL
                          g$clauses$9322$1WS4nL
                          g$r$9323$1WS4nL
                          g$mr$9324$1WS4nL)
                        (if (null? g$clauses$9322$1WS4nL)
                          (list '(primitive syntax-error) g$x$9320$1WS4nL)
                          ((case-lambda
                             ((g$t$9325$1WS4nL)
                              ((case-lambda
                                 ((g$ls/false$9326$1WS4nL)
                                  (if g$ls/false$9326$1WS4nL
                                    (apply
                                      (case-lambda
                                        ((g$pat$9327$1WS4nL g$expr$9328$1WS4nL)
                                         (if (if (g$id?$7267$1WS4nL
                                                   g$pat$9327$1WS4nL)
                                               (if (not (g$bound-id-member?$7274$1WS4nL
                                                          g$pat$9327$1WS4nL
                                                          g$keys$9321$1WS4nL))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7546$1WS4nL
                                                          g$pat$9327$1WS4nL)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7271$1WS4nL
                                                 g$pat$9327$1WS4nL
                                                 (g$scheme-stx$7488$1WS4nL '_))
                                             (g$chi-expr$7563$1WS4nL
                                               g$expr$9328$1WS4nL
                                               g$r$9323$1WS4nL
                                               g$mr$9324$1WS4nL)
                                             ((case-lambda
                                                ((g$lab$9329$1WS4nL
                                                   g$lex$9330$1WS4nL)
                                                 ((case-lambda
                                                    ((g$body$9331$1WS4nL)
                                                     (list
                                                       (g$build-lambda$7193$1WS4nL
                                                         '#f
                                                         (list
                                                           g$lex$9330$1WS4nL)
                                                         g$body$9331$1WS4nL)
                                                       g$x$9320$1WS4nL)))
                                                  (g$chi-expr$7563$1WS4nL
                                                    (g$add-subst$7257$1WS4nL
                                                      (g$make-full-rib$7235$1WS4nL
                                                        (list g$pat$9327$1WS4nL)
                                                        (list
                                                          g$lab$9329$1WS4nL))
                                                      g$expr$9328$1WS4nL)
                                                    (cons
                                                      (cons
                                                        g$lab$9329$1WS4nL
                                                        (g$make-binding$7283$1WS4nL
                                                          'syntax
                                                          (cons
                                                            g$lex$9330$1WS4nL
                                                            '0)))
                                                      g$r$9323$1WS4nL)
                                                    g$mr$9324$1WS4nL))))
                                              (g$gen-label$7208$1WS4nL
                                                g$pat$9327$1WS4nL)
                                              (g$gen-lexical$7206$1WS4nL
                                                g$pat$9327$1WS4nL)))
                                           (g$gen-clause$9308$1WS4nL
                                             g$x$9320$1WS4nL
                                             g$keys$9321$1WS4nL
                                             (cdr g$clauses$9322$1WS4nL)
                                             g$r$9323$1WS4nL
                                             g$mr$9324$1WS4nL
                                             g$pat$9327$1WS4nL
                                             '#t
                                             g$expr$9328$1WS4nL))))
                                      g$ls/false$9326$1WS4nL)
                                    ((case-lambda
                                       ((g$t$9332$1WS4nL)
                                        ((case-lambda
                                           ((g$ls/false$9333$1WS4nL)
                                            (if g$ls/false$9333$1WS4nL
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9334$1WS4nL
                                                     g$fender$9335$1WS4nL
                                                     g$expr$9336$1WS4nL)
                                                   (g$gen-clause$9308$1WS4nL
                                                     g$x$9320$1WS4nL
                                                     g$keys$9321$1WS4nL
                                                     (cdr g$clauses$9322$1WS4nL)
                                                     g$r$9323$1WS4nL
                                                     g$mr$9324$1WS4nL
                                                     g$pat$9334$1WS4nL
                                                     g$fender$9335$1WS4nL
                                                     g$expr$9336$1WS4nL)))
                                                g$ls/false$9333$1WS4nL)
                                              (g$syntax-violation$7656$1WS4nL
                                                '#f
                                                '"invalid syntax"
                                                g$t$9332$1WS4nL))))
                                         (g$syntax-dispatch$7545$1WS4nL
                                           g$t$9332$1WS4nL
                                           '(any any any)))))
                                     g$t$9325$1WS4nL))))
                               (g$syntax-dispatch$7545$1WS4nL
                                 g$t$9325$1WS4nL
                                 '(any any)))))
                           (car g$clauses$9322$1WS4nL)))))))
           (case-lambda
             ((g$e$9310$1WS4nL g$r$9311$1WS4nL g$mr$9312$1WS4nL)
              ((case-lambda
                 ((g$t$9313$1WS4nL)
                  ((case-lambda
                     ((g$ls/false$9314$1WS4nL)
                      (if g$ls/false$9314$1WS4nL
                        (apply
                          (case-lambda
                            ((g$expr$9315$1WS4nL
                               g$keys$9316$1WS4nL
                               g$clauses$9317$1WS4nL)
                             (begin
                               (g$verify-literals$7548$1WS4nL
                                 g$keys$9316$1WS4nL
                                 g$e$9310$1WS4nL)
                               ((case-lambda
                                  ((g$x$9318$1WS4nL)
                                   ((case-lambda
                                      ((g$body$9319$1WS4nL)
                                       (list
                                         (g$build-lambda$7193$1WS4nL
                                           '#f
                                           (list g$x$9318$1WS4nL)
                                           g$body$9319$1WS4nL)
                                         (g$chi-expr$7563$1WS4nL
                                           g$expr$9315$1WS4nL
                                           g$r$9311$1WS4nL
                                           g$mr$9312$1WS4nL))))
                                    (g$gen-syntax-case$9309$1WS4nL
                                      g$x$9318$1WS4nL
                                      g$keys$9316$1WS4nL
                                      g$clauses$9317$1WS4nL
                                      g$r$9311$1WS4nL
                                      g$mr$9312$1WS4nL))))
                                (g$gen-lexical$7206$1WS4nL 'tmp)))))
                          g$ls/false$9314$1WS4nL)
                        (g$syntax-violation$7656$1WS4nL
                          '#f
                          '"invalid syntax"
                          g$t$9313$1WS4nL))))
                   (g$syntax-dispatch$7545$1WS4nL
                     g$t$9313$1WS4nL
                     '(_ any each-any . each-any)))))
               g$e$9310$1WS4nL))))))))
   (g$ellipsis-map$7550$1WS4nL
     g$ellipsis-map$11038$1WS4nL
     (case-lambda
       ((g$proc$9376$1WS4nL g$ls$9377$1WS4nL . g$ls*$9378$1WS4nL)
        (letrec* ((g$who$9379$1WS4nL '...))
          (begin
            (if (not (list? g$ls$9377$1WS4nL))
              (assertion-violation
                g$who$9379$1WS4nL
                '"not a list"
                g$ls$9377$1WS4nL)
              (void))
            (if (not (null? g$ls*$9378$1WS4nL))
              ((case-lambda
                 ((g$n$9380$1WS4nL)
                  (for-each
                    (case-lambda
                      ((g$x$9381$1WS4nL)
                       (begin
                         (if (not (list? g$x$9381$1WS4nL))
                           (assertion-violation
                             g$who$9379$1WS4nL
                             '"not a list"
                             g$x$9381$1WS4nL)
                           (void))
                         (if (not (= (length g$x$9381$1WS4nL) g$n$9380$1WS4nL))
                           (assertion-violation
                             g$who$9379$1WS4nL
                             '"length mismatch"
                             g$ls$9377$1WS4nL
                             g$x$9381$1WS4nL)
                           (void)))))
                    g$ls*$9378$1WS4nL)))
               (length g$ls$9377$1WS4nL))
              (void))
            (apply
              map
              g$proc$9376$1WS4nL
              g$ls$9377$1WS4nL
              g$ls*$9378$1WS4nL))))))
   (g$syntax-transformer$7551$1WS4nL
     g$syntax-transformer$11039$1WS4nL
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9382$1WS4nL
                     (case-lambda
                       ((g$src$9442$1WS4nL
                          g$e$9443$1WS4nL
                          g$r$9444$1WS4nL
                          g$maps$9445$1WS4nL
                          g$ellipsis?$9446$1WS4nL
                          g$vec?$9447$1WS4nL)
                        ((case-lambda
                           ((g$t$9448$1WS4nL)
                            ((case-lambda
                               ((g$ls/false$9449$1WS4nL)
                                (if (if g$ls/false$9449$1WS4nL
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9450$1WS4nL)
                                             (g$ellipsis?$9446$1WS4nL
                                               g$dots$9450$1WS4nL)))
                                          g$ls/false$9449$1WS4nL))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9451$1WS4nL)
                                       (g$syntax-violation$7656$1WS4nL
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9442$1WS4nL)))
                                    g$ls/false$9449$1WS4nL)
                                  ((case-lambda
                                     ((g$t$9452$1WS4nL)
                                      ((case-lambda
                                         ((g$ls/false$9453$1WS4nL)
                                          (if (if g$ls/false$9453$1WS4nL
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9454$1WS4nL)
                                                       (g$id?$7267$1WS4nL
                                                         g$id$9454$1WS4nL)))
                                                    g$ls/false$9453$1WS4nL))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9455$1WS4nL)
                                                 ((case-lambda
                                                    ((g$label$9456$1WS4nL)
                                                     ((case-lambda
                                                        ((g$b$9457$1WS4nL)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$7284$1WS4nL
                                                                        g$b$9457$1WS4nL)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$9460$1WS4nL)
                                                                        (g$gen-ref$9383$1WS4nL
                                                                          g$src$9442$1WS4nL
                                                                          (car g$var.lev$9460$1WS4nL)
                                                                          (cdr g$var.lev$9460$1WS4nL)
                                                                          g$maps$9445$1WS4nL)))
                                                                     (g$binding-value$7285$1WS4nL
                                                                       g$b$9457$1WS4nL))))
                                                                 (case-lambda
                                                                   ((g$var$9461$1WS4nL
                                                                      g$maps$9462$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$maps$9463$1WS4nL
                                                                          g$var$9464$1WS4nL)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$9464$1WS4nL)
                                                                          g$maps$9463$1WS4nL)))
                                                                     g$maps$9462$1WS4nL
                                                                     g$var$9461$1WS4nL))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$9443$1WS4nL)
                                                                 g$maps$9445$1WS4nL)))))))
                                                      (g$label->binding$7282$1WS4nL
                                                        g$label$9456$1WS4nL
                                                        g$r$9444$1WS4nL))))
                                                  (g$id->label$7280$1WS4nL
                                                    g$e$9443$1WS4nL))))
                                              g$ls/false$9453$1WS4nL)
                                            ((case-lambda
                                               ((g$t$9465$1WS4nL)
                                                ((case-lambda
                                                   ((g$ls/false$9466$1WS4nL)
                                                    (if (if g$ls/false$9466$1WS4nL
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9467$1WS4nL
                                                                   g$e$9468$1WS4nL)
                                                                 (g$ellipsis?$9446$1WS4nL
                                                                   g$dots$9467$1WS4nL)))
                                                              g$ls/false$9466$1WS4nL))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9469$1WS4nL
                                                             g$e$9470$1WS4nL)
                                                           (if g$vec?$9447$1WS4nL
                                                             (g$syntax-violation$7656$1WS4nL
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9442$1WS4nL)
                                                             (g$gen-syntax$9382$1WS4nL
                                                               g$src$9442$1WS4nL
                                                               g$e$9470$1WS4nL
                                                               g$r$9444$1WS4nL
                                                               g$maps$9445$1WS4nL
                                                               (case-lambda
                                                                 ((g$x$9471$1WS4nL)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9466$1WS4nL)
                                                      ((case-lambda
                                                         ((g$t$9472$1WS4nL)
                                                          ((case-lambda
                                                             ((g$ls/false$9473$1WS4nL)
                                                              (if (if g$ls/false$9473$1WS4nL
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9474$1WS4nL
                                                                             g$dots$9475$1WS4nL
                                                                             g$y$9476$1WS4nL)
                                                                           (g$ellipsis?$9446$1WS4nL
                                                                             g$dots$9475$1WS4nL)))
                                                                        g$ls/false$9473$1WS4nL))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9477$1WS4nL
                                                                       g$dots$9478$1WS4nL
                                                                       g$y$9479$1WS4nL)
                                                                     ((letrec ((g$f$9480$1WS4nL
                                                                                 (case-lambda
                                                                                   ((g$y$9481$1WS4nL
                                                                                      g$k$9482$1WS4nL)
                                                                                    ((case-lambda
                                                                                       ((g$t$9483$1WS4nL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9484$1WS4nL)
                                                                                            (if g$ls/false$9484$1WS4nL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9482$1WS4nL
                                                                                                     g$maps$9445$1WS4nL)))
                                                                                                g$ls/false$9484$1WS4nL)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9485$1WS4nL)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9486$1WS4nL)
                                                                                                      (if (if g$ls/false$9486$1WS4nL
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9487$1WS4nL
                                                                                                                     g$y$9488$1WS4nL)
                                                                                                                   (g$ellipsis?$9446$1WS4nL
                                                                                                                     g$dots$9487$1WS4nL)))
                                                                                                                g$ls/false$9486$1WS4nL))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9489$1WS4nL
                                                                                                               g$y$9490$1WS4nL)
                                                                                                             (g$f$9480$1WS4nL
                                                                                                               g$y$9490$1WS4nL
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9491$1WS4nL)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9482$1WS4nL
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9491$1WS4nL))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9494$1WS4nL
                                                                                                                         g$maps$9495$1WS4nL)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9496$1WS4nL
                                                                                                                             g$x$9497$1WS4nL)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9496$1WS4nL))
                                                                                                                             (g$syntax-violation$7656$1WS4nL
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9442$1WS4nL)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9385$1WS4nL
                                                                                                                                 g$x$9497$1WS4nL
                                                                                                                                 (car g$maps$9496$1WS4nL))
                                                                                                                               (cdr g$maps$9496$1WS4nL)))))
                                                                                                                        g$maps$9495$1WS4nL
                                                                                                                        g$x$9494$1WS4nL)))))))))
                                                                                                          g$ls/false$9486$1WS4nL)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9498$1WS4nL)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9499$1WS4nL)
                                                                                                                (if g$ls/false$9499$1WS4nL
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9382$1WS4nL
                                                                                                                              g$src$9442$1WS4nL
                                                                                                                              g$y$9481$1WS4nL
                                                                                                                              g$r$9444$1WS4nL
                                                                                                                              g$maps$9445$1WS4nL
                                                                                                                              g$ellipsis?$9446$1WS4nL
                                                                                                                              g$vec?$9447$1WS4nL)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9502$1WS4nL
                                                                                                                              g$maps$9503$1WS4nL)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9504$1WS4nL
                                                                                                                                  g$y$9505$1WS4nL)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9482$1WS4nL
                                                                                                                                       g$maps$9504$1WS4nL)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9508$1WS4nL
                                                                                                                                       g$maps$9509$1WS4nL)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9510$1WS4nL
                                                                                                                                           g$x$9511$1WS4nL)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9384$1WS4nL
                                                                                                                                             g$x$9511$1WS4nL
                                                                                                                                             g$y$9505$1WS4nL)
                                                                                                                                           g$maps$9510$1WS4nL)))
                                                                                                                                      g$maps$9509$1WS4nL
                                                                                                                                      g$x$9508$1WS4nL))))))
                                                                                                                             g$maps$9503$1WS4nL
                                                                                                                             g$y$9502$1WS4nL))))))
                                                                                                                    g$ls/false$9499$1WS4nL)
                                                                                                                  (g$syntax-violation$7656$1WS4nL
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9498$1WS4nL))))
                                                                                                             (g$syntax-dispatch$7545$1WS4nL
                                                                                                               g$t$9498$1WS4nL
                                                                                                               '_))))
                                                                                                         g$t$9485$1WS4nL))))
                                                                                                   (g$syntax-dispatch$7545$1WS4nL
                                                                                                     g$t$9485$1WS4nL
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9483$1WS4nL))))
                                                                                         (g$syntax-dispatch$7545$1WS4nL
                                                                                           g$t$9483$1WS4nL
                                                                                           '()))))
                                                                                     g$y$9481$1WS4nL)))))
                                                                        g$f$9480$1WS4nL)
                                                                      g$y$9479$1WS4nL
                                                                      (case-lambda
                                                                        ((g$maps$9512$1WS4nL)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9382$1WS4nL
                                                                                g$src$9442$1WS4nL
                                                                                g$x$9477$1WS4nL
                                                                                g$r$9444$1WS4nL
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9512$1WS4nL)
                                                                                g$ellipsis?$9446$1WS4nL
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9515$1WS4nL
                                                                                g$maps$9516$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$maps$9517$1WS4nL
                                                                                    g$x$9518$1WS4nL)
                                                                                  (if (null?
                                                                                        (car g$maps$9517$1WS4nL))
                                                                                    (g$syntax-violation$7656$1WS4nL
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9442$1WS4nL)
                                                                                    (values
                                                                                      (g$gen-map$9386$1WS4nL
                                                                                        g$x$9518$1WS4nL
                                                                                        (car g$maps$9517$1WS4nL))
                                                                                      (cdr g$maps$9517$1WS4nL)))))
                                                                               g$maps$9516$1WS4nL
                                                                               g$x$9515$1WS4nL)))))))))
                                                                  g$ls/false$9473$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$t$9519$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9520$1WS4nL)
                                                                        (if g$ls/false$9520$1WS4nL
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9521$1WS4nL
                                                                                 g$y$9522$1WS4nL)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9382$1WS4nL
                                                                                      g$src$9442$1WS4nL
                                                                                      g$x$9521$1WS4nL
                                                                                      g$r$9444$1WS4nL
                                                                                      g$maps$9445$1WS4nL
                                                                                      g$ellipsis?$9446$1WS4nL
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9525$1WS4nL
                                                                                      g$maps$9526$1WS4nL)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9527$1WS4nL
                                                                                          g$xnew$9528$1WS4nL)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9382$1WS4nL
                                                                                               g$src$9442$1WS4nL
                                                                                               g$y$9522$1WS4nL
                                                                                               g$r$9444$1WS4nL
                                                                                               g$maps$9527$1WS4nL
                                                                                               g$ellipsis?$9446$1WS4nL
                                                                                               g$vec?$9447$1WS4nL)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9531$1WS4nL
                                                                                               g$maps$9532$1WS4nL)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9533$1WS4nL
                                                                                                   g$ynew$9534$1WS4nL)
                                                                                                 (values
                                                                                                   (g$gen-cons$9387$1WS4nL
                                                                                                     g$e$9443$1WS4nL
                                                                                                     g$x$9521$1WS4nL
                                                                                                     g$y$9522$1WS4nL
                                                                                                     g$xnew$9528$1WS4nL
                                                                                                     g$ynew$9534$1WS4nL)
                                                                                                   g$maps$9533$1WS4nL)))
                                                                                              g$maps$9532$1WS4nL
                                                                                              g$ynew$9531$1WS4nL))))))
                                                                                     g$maps$9526$1WS4nL
                                                                                     g$xnew$9525$1WS4nL))))))
                                                                            g$ls/false$9520$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$t$9535$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9536$1WS4nL)
                                                                                  (if g$ls/false$9536$1WS4nL
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9537$1WS4nL)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9382$1WS4nL
                                                                                                g$src$9442$1WS4nL
                                                                                                g$ls$9537$1WS4nL
                                                                                                g$r$9444$1WS4nL
                                                                                                g$maps$9445$1WS4nL
                                                                                                g$ellipsis?$9446$1WS4nL
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9540$1WS4nL
                                                                                                g$maps$9541$1WS4nL)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9542$1WS4nL
                                                                                                    g$lsnew$9543$1WS4nL)
                                                                                                  (values
                                                                                                    (g$gen-vector$9388$1WS4nL
                                                                                                      g$e$9443$1WS4nL
                                                                                                      g$ls$9537$1WS4nL
                                                                                                      g$lsnew$9543$1WS4nL)
                                                                                                    g$maps$9542$1WS4nL)))
                                                                                               g$maps$9541$1WS4nL
                                                                                               g$lsnew$9540$1WS4nL))))))
                                                                                      g$ls/false$9536$1WS4nL)
                                                                                    ((case-lambda
                                                                                       ((g$t$9544$1WS4nL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9545$1WS4nL)
                                                                                            (if g$ls/false$9545$1WS4nL
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9443$1WS4nL)
                                                                                                     g$maps$9445$1WS4nL)))
                                                                                                g$ls/false$9545$1WS4nL)
                                                                                              (g$syntax-violation$7656$1WS4nL
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9544$1WS4nL))))
                                                                                         (g$syntax-dispatch$7545$1WS4nL
                                                                                           g$t$9544$1WS4nL
                                                                                           '_))))
                                                                                     g$t$9535$1WS4nL))))
                                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                                 g$t$9535$1WS4nL
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9519$1WS4nL))))
                                                                     (g$syntax-dispatch$7545$1WS4nL
                                                                       g$t$9519$1WS4nL
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9472$1WS4nL))))
                                                           (g$syntax-dispatch$7545$1WS4nL
                                                             g$t$9472$1WS4nL
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9465$1WS4nL))))
                                                 (g$syntax-dispatch$7545$1WS4nL
                                                   g$t$9465$1WS4nL
                                                   '(any any)))))
                                             g$t$9452$1WS4nL))))
                                       (g$syntax-dispatch$7545$1WS4nL
                                         g$t$9452$1WS4nL
                                         'any))))
                                   g$t$9448$1WS4nL))))
                             (g$syntax-dispatch$7545$1WS4nL
                               g$t$9448$1WS4nL
                               'any))))
                         g$e$9443$1WS4nL))))
                   (g$gen-ref$9383$1WS4nL
                     (case-lambda
                       ((g$src$9429$1WS4nL
                          g$var$9430$1WS4nL
                          g$level$9431$1WS4nL
                          g$maps$9432$1WS4nL)
                        (if (= g$level$9431$1WS4nL '0)
                          (values g$var$9430$1WS4nL g$maps$9432$1WS4nL)
                          (if (null? g$maps$9432$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9429$1WS4nL)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9383$1WS4nL
                                   g$src$9429$1WS4nL
                                   g$var$9430$1WS4nL
                                   (- g$level$9431$1WS4nL '1)
                                   (cdr g$maps$9432$1WS4nL))))
                              (case-lambda
                                ((g$outer-var$9435$1WS4nL
                                   g$outer-maps$9436$1WS4nL)
                                 ((case-lambda
                                    ((g$outer-maps$9437$1WS4nL
                                       g$outer-var$9438$1WS4nL)
                                     ((case-lambda
                                        ((g$t$9439$1WS4nL)
                                         (if g$t$9439$1WS4nL
                                           ((case-lambda
                                              ((g$b$9440$1WS4nL)
                                               (values
                                                 (cdr g$b$9440$1WS4nL)
                                                 g$maps$9432$1WS4nL)))
                                            g$t$9439$1WS4nL)
                                           ((case-lambda
                                              ((g$inner-var$9441$1WS4nL)
                                               (values
                                                 g$inner-var$9441$1WS4nL
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9438$1WS4nL
                                                       g$inner-var$9441$1WS4nL)
                                                     (car g$maps$9432$1WS4nL))
                                                   g$outer-maps$9437$1WS4nL))))
                                            (g$gen-lexical$7206$1WS4nL 'tmp)))))
                                      (g$assq$4991$1WS4nL
                                        g$outer-var$9438$1WS4nL
                                        (car g$maps$9432$1WS4nL)))))
                                  g$outer-maps$9436$1WS4nL
                                  g$outer-var$9435$1WS4nL)))))))))
                   (g$gen-append$9384$1WS4nL
                     (case-lambda
                       ((g$x$9427$1WS4nL g$y$9428$1WS4nL)
                        (if (equal? g$y$9428$1WS4nL ''())
                          g$x$9427$1WS4nL
                          (list 'append g$x$9427$1WS4nL g$y$9428$1WS4nL)))))
                   (g$gen-mappend$9385$1WS4nL
                     (case-lambda
                       ((g$e$9425$1WS4nL g$map-env$9426$1WS4nL)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9386$1WS4nL
                            g$e$9425$1WS4nL
                            g$map-env$9426$1WS4nL)))))
                   (g$gen-map$9386$1WS4nL
                     (case-lambda
                       ((g$e$9416$1WS4nL g$map-env$9417$1WS4nL)
                        ((case-lambda
                           ((g$formals$9418$1WS4nL g$actuals$9419$1WS4nL)
                            (if (eq? (car g$e$9416$1WS4nL) 'ref)
                              (car g$actuals$9419$1WS4nL)
                              (if (g$for-all$5001$1WS4nL
                                    (case-lambda
                                      ((g$x$9420$1WS4nL)
                                       (if (eq? (car g$x$9420$1WS4nL) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$4995$1WS4nL
                                             (g$cadr$5165$1WS4nL
                                               g$x$9420$1WS4nL)
                                             g$formals$9418$1WS4nL))
                                         '#f)))
                                    (cdr g$e$9416$1WS4nL))
                                ((case-lambda
                                   ((g$args$9421$1WS4nL)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9416$1WS4nL))
                                        g$args$9421$1WS4nL))))
                                 (map ((case-lambda
                                         ((g$r$9422$1WS4nL)
                                          (case-lambda
                                            ((g$x$9423$1WS4nL)
                                             (cdr (g$assq$4991$1WS4nL
                                                    (g$cadr$5165$1WS4nL
                                                      g$x$9423$1WS4nL)
                                                    g$r$9422$1WS4nL))))))
                                       (map cons
                                            g$formals$9418$1WS4nL
                                            g$actuals$9419$1WS4nL))
                                      (cdr g$e$9416$1WS4nL)))
                                (g$cons*$5003$1WS4nL
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9418$1WS4nL
                                    g$e$9416$1WS4nL)
                                  g$actuals$9419$1WS4nL)))))
                         (map cdr g$map-env$9417$1WS4nL)
                         (map (case-lambda
                                ((g$x$9424$1WS4nL)
                                 (list 'ref (car g$x$9424$1WS4nL))))
                              g$map-env$9417$1WS4nL)))))
                   (g$gen-cons$9387$1WS4nL
                     (case-lambda
                       ((g$e$9408$1WS4nL
                          g$x$9409$1WS4nL
                          g$y$9410$1WS4nL
                          g$xnew$9411$1WS4nL
                          g$ynew$9412$1WS4nL)
                        ((case-lambda
                           ((g$t$9413$1WS4nL)
                            (if (g$memv$4996$1WS4nL g$t$9413$1WS4nL '(quote))
                              (if (eq? (car g$xnew$9411$1WS4nL) 'quote)
                                ((case-lambda
                                   ((g$xnew$9414$1WS4nL g$ynew$9415$1WS4nL)
                                    (if (if (eq? g$xnew$9414$1WS4nL
                                                 g$x$9409$1WS4nL)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9415$1WS4nL
                                                 g$y$9410$1WS4nL))
                                          '#f)
                                      (list 'quote g$e$9408$1WS4nL)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9414$1WS4nL
                                          g$ynew$9415$1WS4nL)))))
                                 (g$cadr$5165$1WS4nL g$xnew$9411$1WS4nL)
                                 (g$cadr$5165$1WS4nL g$ynew$9412$1WS4nL))
                                (if (null?
                                      (g$cadr$5165$1WS4nL g$ynew$9412$1WS4nL))
                                  (list 'list g$xnew$9411$1WS4nL)
                                  (list
                                    'cons
                                    g$xnew$9411$1WS4nL
                                    g$ynew$9412$1WS4nL)))
                              (if (g$memv$4996$1WS4nL g$t$9413$1WS4nL '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9411$1WS4nL
                                    (cdr g$ynew$9412$1WS4nL)))
                                (list
                                  'cons
                                  g$xnew$9411$1WS4nL
                                  g$ynew$9412$1WS4nL)))))
                         (car g$ynew$9412$1WS4nL)))))
                   (g$gen-vector$9388$1WS4nL
                     (case-lambda
                       ((g$e$9405$1WS4nL g$ls$9406$1WS4nL g$lsnew$9407$1WS4nL)
                        (if (eq? (car g$lsnew$9407$1WS4nL) 'quote)
                          (if (eq? (g$cadr$5165$1WS4nL g$lsnew$9407$1WS4nL)
                                   g$ls$9406$1WS4nL)
                            (list 'quote g$e$9405$1WS4nL)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5165$1WS4nL g$lsnew$9407$1WS4nL))))
                          (if (eq? (car g$lsnew$9407$1WS4nL) 'list)
                            (cons 'vector (cdr g$lsnew$9407$1WS4nL))
                            (list 'list->vector g$lsnew$9407$1WS4nL))))))
                   (g$regen$9389$1WS4nL
                     (case-lambda
                       ((g$x$9402$1WS4nL)
                        ((case-lambda
                           ((g$t$9403$1WS4nL)
                            (if (g$memv$4996$1WS4nL g$t$9403$1WS4nL '(ref))
                              (g$cadr$5165$1WS4nL g$x$9402$1WS4nL)
                              (if (g$memv$4996$1WS4nL
                                    g$t$9403$1WS4nL
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5165$1WS4nL g$x$9402$1WS4nL))
                                (if (g$memv$4996$1WS4nL
                                      g$t$9403$1WS4nL
                                      '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5165$1WS4nL g$x$9402$1WS4nL))
                                  (if (g$memv$4996$1WS4nL
                                        g$t$9403$1WS4nL
                                        '(lambda))
                                    (g$build-lambda$7193$1WS4nL
                                      '#f
                                      (g$cadr$5165$1WS4nL g$x$9402$1WS4nL)
                                      (g$regen$9389$1WS4nL
                                        (g$caddr$5171$1WS4nL g$x$9402$1WS4nL)))
                                    (if (g$memv$4996$1WS4nL
                                          g$t$9403$1WS4nL
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$9404$1WS4nL)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9404$1WS4nL)))
                                       (map g$regen$9389$1WS4nL
                                            (cdr g$x$9402$1WS4nL)))
                                      (cons
                                        (list 'primitive (car g$x$9402$1WS4nL))
                                        (map g$regen$9389$1WS4nL
                                             (cdr g$x$9402$1WS4nL))))))))))
                         (car g$x$9402$1WS4nL))))))
           (case-lambda
             ((g$e$9390$1WS4nL g$r$9391$1WS4nL g$mr$9392$1WS4nL)
              ((case-lambda
                 ((g$t$9393$1WS4nL)
                  ((case-lambda
                     ((g$ls/false$9394$1WS4nL)
                      (if g$ls/false$9394$1WS4nL
                        (apply
                          (case-lambda
                            ((g$x$9395$1WS4nL)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9382$1WS4nL
                                    g$e$9390$1WS4nL
                                    g$x$9395$1WS4nL
                                    g$r$9391$1WS4nL
                                    '()
                                    g$ellipsis?$7546$1WS4nL
                                    '#f)))
                               (case-lambda
                                 ((g$e$9398$1WS4nL g$maps$9399$1WS4nL)
                                  ((case-lambda
                                     ((g$maps$9400$1WS4nL g$e$9401$1WS4nL)
                                      (g$regen$9389$1WS4nL g$e$9401$1WS4nL)))
                                   g$maps$9399$1WS4nL
                                   g$e$9398$1WS4nL))))))
                          g$ls/false$9394$1WS4nL)
                        (g$syntax-violation$7656$1WS4nL
                          '#f
                          '"invalid syntax"
                          g$t$9393$1WS4nL))))
                   (g$syntax-dispatch$7545$1WS4nL g$t$9393$1WS4nL '(_ any)))))
               g$e$9390$1WS4nL))))))))
   (g$core-macro-transformer$7552$1WS4nL
     g$core-macro-transformer$11040$1WS4nL
     (case-lambda
       ((g$name$9546$1WS4nL)
        ((case-lambda
           ((g$t$9547$1WS4nL)
            (if (g$memv$4996$1WS4nL g$t$9547$1WS4nL '(quote))
              g$quote-transformer$7505$1WS4nL
              (if (g$memv$4996$1WS4nL g$t$9547$1WS4nL '(lambda))
                g$lambda-transformer$7507$1WS4nL
                (if (g$memv$4996$1WS4nL g$t$9547$1WS4nL '(case-lambda))
                  g$case-lambda-transformer$7506$1WS4nL
                  (if (g$memv$4996$1WS4nL g$t$9547$1WS4nL '(letrec))
                    g$letrec-transformer$7495$1WS4nL
                    (if (g$memv$4996$1WS4nL g$t$9547$1WS4nL '(letrec*))
                      g$letrec*-transformer$7496$1WS4nL
                      (if (g$memv$4996$1WS4nL g$t$9547$1WS4nL '(if))
                        g$if-transformer$7503$1WS4nL
                        (if (g$memv$4996$1WS4nL g$t$9547$1WS4nL '(foreign-call))
                          g$foreign-call-transformer$7543$1WS4nL
                          (if (g$memv$4996$1WS4nL
                                g$t$9547$1WS4nL
                                '(syntax-case))
                            g$syntax-case-transformer$7549$1WS4nL
                            (if (g$memv$4996$1WS4nL g$t$9547$1WS4nL '(syntax))
                              g$syntax-transformer$7551$1WS4nL
                              (if (g$memv$4996$1WS4nL
                                    g$t$9547$1WS4nL
                                    '(type-descriptor))
                                g$type-descriptor-transformer$7498$1WS4nL
                                (if (g$memv$4996$1WS4nL
                                      g$t$9547$1WS4nL
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7499$1WS4nL
                                  (if (g$memv$4996$1WS4nL
                                        g$t$9547$1WS4nL
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7500$1WS4nL
                                    (if (g$memv$4996$1WS4nL
                                          g$t$9547$1WS4nL
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7497$1WS4nL
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$9546$1WS4nL))))))))))))))))
         g$name$9546$1WS4nL))))
   (g$file-options-macro$7553$1WS4nL
     g$file-options-macro$11041$1WS4nL
     (case-lambda
       ((g$x$9548$1WS4nL)
        (letrec* ((g$valid-option?$9549$1WS4nL
                    (case-lambda
                      ((g$x$9554$1WS4nL)
                       (if (g$id?$7267$1WS4nL g$x$9554$1WS4nL)
                         (begin
                           '#f
                           (g$memq$4995$1WS4nL
                             (g$id->sym$7268$1WS4nL g$x$9554$1WS4nL)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$9550$1WS4nL)
              ((case-lambda
                 ((g$ls/false$9551$1WS4nL)
                  (if (if g$ls/false$9551$1WS4nL
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$9552$1WS4nL)
                               (if (g$for-all$5001$1WS4nL
                                     g$valid-option?$9549$1WS4nL
                                     g$opt*$9552$1WS4nL)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6532$1WS4nL
                                     (map g$id->sym$7268$1WS4nL
                                          g$opt*$9552$1WS4nL)))
                                 '#f)))
                            g$ls/false$9551$1WS4nL))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$9553$1WS4nL)
                         (g$bless$7508$1WS4nL
                           (list
                             'quote
                             (g$file-options-spec$6532$1WS4nL
                               (map g$id->sym$7268$1WS4nL
                                    g$opt*$9553$1WS4nL))))))
                      g$ls/false$9551$1WS4nL)
                    (g$syntax-violation$7656$1WS4nL
                      '#f
                      '"invalid syntax"
                      g$t$9550$1WS4nL))))
               (g$syntax-dispatch$7545$1WS4nL
                 g$t$9550$1WS4nL
                 '(_ . each-any)))))
           g$x$9548$1WS4nL)))))
   (g$symbol-macro$7554$1WS4nL
     g$symbol-macro$11042$1WS4nL
     (case-lambda
       ((g$x$9555$1WS4nL g$set$9556$1WS4nL)
        ((case-lambda
           ((g$t$9557$1WS4nL)
            ((case-lambda
               ((g$ls/false$9558$1WS4nL)
                (if (if g$ls/false$9558$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9559$1WS4nL)
                             (if (g$id?$7267$1WS4nL g$name$9559$1WS4nL)
                               (begin
                                 '#f
                                 (g$memq$4995$1WS4nL
                                   (g$id->sym$7268$1WS4nL g$name$9559$1WS4nL)
                                   g$set$9556$1WS4nL))
                               '#f)))
                          g$ls/false$9558$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9560$1WS4nL)
                       (g$bless$7508$1WS4nL (list 'quote g$name$9560$1WS4nL))))
                    g$ls/false$9558$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$9557$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$9557$1WS4nL '(_ any)))))
         g$x$9555$1WS4nL))))
   (g$macro-transformer$7555$1WS4nL
     g$macro-transformer$11043$1WS4nL
     (case-lambda
       ((g$x$9561$1WS4nL)
        (if (procedure? g$x$9561$1WS4nL)
          g$x$9561$1WS4nL
          (if (symbol? g$x$9561$1WS4nL)
            ((case-lambda
               ((g$t$9562$1WS4nL)
                (if (g$memv$4996$1WS4nL g$t$9562$1WS4nL '(define-record-type))
                  g$define-record-type-macro$7539$1WS4nL
                  (if (g$memv$4996$1WS4nL g$t$9562$1WS4nL '(define-struct))
                    g$define-struct-macro$7538$1WS4nL
                    (if (g$memv$4996$1WS4nL g$t$9562$1WS4nL '(include))
                      g$include-macro$7533$1WS4nL
                      (if (g$memv$4996$1WS4nL g$t$9562$1WS4nL '(cond))
                        g$cond-macro$7531$1WS4nL
                        (if (g$memv$4996$1WS4nL g$t$9562$1WS4nL '(let))
                          g$let-macro$7511$1WS4nL
                          (if (g$memv$4996$1WS4nL g$t$9562$1WS4nL '(do))
                            g$do-macro$7527$1WS4nL
                            (if (g$memv$4996$1WS4nL g$t$9562$1WS4nL '(or))
                              g$or-macro$7529$1WS4nL
                              (if (g$memv$4996$1WS4nL g$t$9562$1WS4nL '(and))
                                g$and-macro$7530$1WS4nL
                                (if (g$memv$4996$1WS4nL g$t$9562$1WS4nL '(let*))
                                  g$let*-macro$7528$1WS4nL
                                  (if (g$memv$4996$1WS4nL
                                        g$t$9562$1WS4nL
                                        '(let-values))
                                    g$let-values-macro$7512$1WS4nL
                                    (if (g$memv$4996$1WS4nL
                                          g$t$9562$1WS4nL
                                          '(let*-values))
                                      g$let*-values-macro$7513$1WS4nL
                                      (if (g$memv$4996$1WS4nL
                                            g$t$9562$1WS4nL
                                            '(syntax-rules))
                                        g$syntax-rules-macro$7535$1WS4nL
                                        (if (g$memv$4996$1WS4nL
                                              g$t$9562$1WS4nL
                                              '(quasiquote))
                                          g$quasiquote-macro$7536$1WS4nL
                                          (if (g$memv$4996$1WS4nL
                                                g$t$9562$1WS4nL
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7537$1WS4nL
                                            (if (g$memv$4996$1WS4nL
                                                  g$t$9562$1WS4nL
                                                  '(with-syntax))
                                              g$with-syntax-macro$7509$1WS4nL
                                              (if (g$memv$4996$1WS4nL
                                                    g$t$9562$1WS4nL
                                                    '(when))
                                                g$when-macro$7501$1WS4nL
                                                (if (g$memv$4996$1WS4nL
                                                      g$t$9562$1WS4nL
                                                      '(unless))
                                                  g$unless-macro$7502$1WS4nL
                                                  (if (g$memv$4996$1WS4nL
                                                        g$t$9562$1WS4nL
                                                        '(case))
                                                    g$case-macro$7504$1WS4nL
                                                    (if (g$memv$4996$1WS4nL
                                                          g$t$9562$1WS4nL
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7526$1WS4nL
                                                      (if (g$memv$4996$1WS4nL
                                                            g$t$9562$1WS4nL
                                                            '(time))
                                                        g$time-macro$7522$1WS4nL
                                                        (if (g$memv$4996$1WS4nL
                                                              g$t$9562$1WS4nL
                                                              '(delay))
                                                          g$delay-macro$7523$1WS4nL
                                                          (if (g$memv$4996$1WS4nL
                                                                g$t$9562$1WS4nL
                                                                '(assert))
                                                            g$assert-macro$7524$1WS4nL
                                                            (if (g$memv$4996$1WS4nL
                                                                  g$t$9562$1WS4nL
                                                                  '(endianness))
                                                              g$endianness-macro$7525$1WS4nL
                                                              (if (g$memv$4996$1WS4nL
                                                                    g$t$9562$1WS4nL
                                                                    '(guard))
                                                                g$guard-macro$7520$1WS4nL
                                                                (if (g$memv$4996$1WS4nL
                                                                      g$t$9562$1WS4nL
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7521$1WS4nL
                                                                  (if (g$memv$4996$1WS4nL
                                                                        g$t$9562$1WS4nL
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7514$1WS4nL
                                                                    (if (g$memv$4996$1WS4nL
                                                                          g$t$9562$1WS4nL
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7515$1WS4nL
                                                                      (if (g$memv$4996$1WS4nL
                                                                            g$t$9562$1WS4nL
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7516$1WS4nL
                                                                        (if (g$memv$4996$1WS4nL
                                                                              g$t$9562$1WS4nL
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7518$1WS4nL
                                                                          (if (g$memv$4996$1WS4nL
                                                                                g$t$9562$1WS4nL
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7519$1WS4nL
                                                                            (if (g$memv$4996$1WS4nL
                                                                                  g$t$9562$1WS4nL
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7540$1WS4nL
                                                                              (if (g$memv$4996$1WS4nL
                                                                                    g$t$9562$1WS4nL
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7542$1WS4nL
                                                                                (if (g$memv$4996$1WS4nL
                                                                                      g$t$9562$1WS4nL
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7534$1WS4nL
                                                                                  (if (g$memv$4996$1WS4nL
                                                                                        g$t$9562$1WS4nL
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$9563$1WS4nL)
                                                                                       (g$symbol-macro$7554$1WS4nL
                                                                                         g$x$9563$1WS4nL
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$4996$1WS4nL
                                                                                          g$t$9562$1WS4nL
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$9564$1WS4nL)
                                                                                         (g$symbol-macro$7554$1WS4nL
                                                                                           g$x$9564$1WS4nL
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$4996$1WS4nL
                                                                                            g$t$9562$1WS4nL
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$9565$1WS4nL)
                                                                                           (g$symbol-macro$7554$1WS4nL
                                                                                             g$x$9565$1WS4nL
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$4996$1WS4nL
                                                                                              g$t$9562$1WS4nL
                                                                                              '(file-options))
                                                                                          g$file-options-macro$7553$1WS4nL
                                                                                          (if (g$memv$4996$1WS4nL
                                                                                                g$t$9562$1WS4nL
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7541$1WS4nL
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$9561$1WS4nL)))))))))))))))))))))))))))))))))))))))))
             g$x$9561$1WS4nL)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9561$1WS4nL))))))
   (g$local-macro-transformer$7556$1WS4nL
     g$local-macro-transformer$11044$1WS4nL
     (case-lambda ((g$x$9566$1WS4nL) (car g$x$9566$1WS4nL))))
   (g$do-macro-call$7557$1WS4nL
     g$do-macro-call$11045$1WS4nL
     (case-lambda
       ((g$transformer$9567$1WS4nL g$expr$9568$1WS4nL)
        ((case-lambda
           ((g$out$9569$1WS4nL)
            (begin
              ((letrec ((g$f$9570$1WS4nL
                          (case-lambda
                            ((g$x$9571$1WS4nL)
                             (if (not (g$stx?$7239$1WS4nL g$x$9571$1WS4nL))
                               (if (pair? g$x$9571$1WS4nL)
                                 (begin
                                   (g$f$9570$1WS4nL (car g$x$9571$1WS4nL))
                                   (g$f$9570$1WS4nL (cdr g$x$9571$1WS4nL)))
                                 (if (vector? g$x$9571$1WS4nL)
                                   (vector-for-each
                                     g$f$9570$1WS4nL
                                     g$x$9571$1WS4nL)
                                   (if (symbol? g$x$9571$1WS4nL)
                                     (g$syntax-violation$7656$1WS4nL
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9568$1WS4nL
                                       g$x$9571$1WS4nL)
                                     (void))))
                               (void))))))
                 g$f$9570$1WS4nL)
               g$out$9569$1WS4nL)
              (g$add-mark$7256$1WS4nL
                (g$gen-mark$7251$1WS4nL)
                g$out$9569$1WS4nL
                g$expr$9568$1WS4nL))))
         (g$transformer$9567$1WS4nL
           (g$add-mark$7256$1WS4nL
             g$anti-mark$7252$1WS4nL
             g$expr$9568$1WS4nL
             '#f))))))
   (g$chi-macro$7558$1WS4nL
     g$chi-macro$11046$1WS4nL
     (case-lambda
       ((g$p$9572$1WS4nL g$e$9573$1WS4nL)
        (g$do-macro-call$7557$1WS4nL
          (g$macro-transformer$7555$1WS4nL g$p$9572$1WS4nL)
          g$e$9573$1WS4nL))))
   (g$chi-local-macro$7559$1WS4nL
     g$chi-local-macro$11047$1WS4nL
     (case-lambda
       ((g$p$9574$1WS4nL g$e$9575$1WS4nL)
        (g$do-macro-call$7557$1WS4nL
          (g$local-macro-transformer$7556$1WS4nL g$p$9574$1WS4nL)
          g$e$9575$1WS4nL))))
   (g$chi-global-macro$7560$1WS4nL
     g$chi-global-macro$11048$1WS4nL
     (case-lambda
       ((g$p$9576$1WS4nL g$e$9577$1WS4nL)
        ((case-lambda
           ((g$lib$9578$1WS4nL g$loc$9579$1WS4nL)
            (begin
              (g$visit-library$7078$1WS4nL g$lib$9578$1WS4nL)
              ((case-lambda
                 ((g$x$9580$1WS4nL)
                  ((case-lambda
                     ((g$transformer$9581$1WS4nL)
                      (g$do-macro-call$7557$1WS4nL
                        g$transformer$9581$1WS4nL
                        g$e$9577$1WS4nL)))
                   (if (procedure? g$x$9580$1WS4nL)
                     g$x$9580$1WS4nL
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9580$1WS4nL)))))
               (symbol-value g$loc$9579$1WS4nL)))))
         (car g$p$9576$1WS4nL)
         (cdr g$p$9576$1WS4nL)))))
   (g$chi-expr*$7561$1WS4nL
     g$chi-expr*$11049$1WS4nL
     (case-lambda
       ((g$e*$9582$1WS4nL g$r$9583$1WS4nL g$mr$9584$1WS4nL)
        (if (null? g$e*$9582$1WS4nL)
          '()
          ((case-lambda
             ((g$e$9585$1WS4nL)
              (cons
                g$e$9585$1WS4nL
                (g$chi-expr*$7561$1WS4nL
                  (cdr g$e*$9582$1WS4nL)
                  g$r$9583$1WS4nL
                  g$mr$9584$1WS4nL))))
           (g$chi-expr$7563$1WS4nL
             (car g$e*$9582$1WS4nL)
             g$r$9583$1WS4nL
             g$mr$9584$1WS4nL))))))
   (g$chi-application$7562$1WS4nL
     g$chi-application$11050$1WS4nL
     (case-lambda
       ((g$e$9586$1WS4nL g$r$9587$1WS4nL g$mr$9588$1WS4nL)
        ((case-lambda
           ((g$t$9589$1WS4nL)
            ((case-lambda
               ((g$ls/false$9590$1WS4nL)
                (if g$ls/false$9590$1WS4nL
                  (apply
                    (case-lambda
                      ((g$rator$9591$1WS4nL g$rands$9592$1WS4nL)
                       ((case-lambda
                          ((g$rator$9593$1WS4nL)
                           (cons
                             g$rator$9593$1WS4nL
                             (g$chi-expr*$7561$1WS4nL
                               g$rands$9592$1WS4nL
                               g$r$9587$1WS4nL
                               g$mr$9588$1WS4nL))))
                        (g$chi-expr$7563$1WS4nL
                          g$rator$9591$1WS4nL
                          g$r$9587$1WS4nL
                          g$mr$9588$1WS4nL))))
                    g$ls/false$9590$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$9589$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$9589$1WS4nL
               '(any . each-any)))))
         g$e$9586$1WS4nL))))
   (g$chi-expr$7563$1WS4nL
     g$chi-expr$11051$1WS4nL
     (case-lambda
       ((g$e$9594$1WS4nL g$r$9595$1WS4nL g$mr$9596$1WS4nL)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7287$1WS4nL g$e$9594$1WS4nL g$r$9595$1WS4nL)))
          (case-lambda
            ((g$type$9600$1WS4nL g$value$9601$1WS4nL g$kwd$9602$1WS4nL)
             ((case-lambda
                ((g$kwd$9603$1WS4nL g$value$9604$1WS4nL g$type$9605$1WS4nL)
                 ((case-lambda
                    ((g$t$9606$1WS4nL)
                     (if (g$memv$4996$1WS4nL g$t$9606$1WS4nL '(core-macro))
                       ((case-lambda
                          ((g$transformer$9607$1WS4nL)
                           (g$transformer$9607$1WS4nL
                             g$e$9594$1WS4nL
                             g$r$9595$1WS4nL
                             g$mr$9596$1WS4nL)))
                        (g$core-macro-transformer$7552$1WS4nL
                          g$value$9604$1WS4nL))
                       (if (g$memv$4996$1WS4nL g$t$9606$1WS4nL '(global))
                         ((case-lambda
                            ((g$lib$9608$1WS4nL)
                             ((case-lambda
                                ((g$loc$9609$1WS4nL)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$7597$1WS4nL)
                                        g$lib$9608$1WS4nL)
                                       g$loc$9609$1WS4nL))))))
                              (cdr g$value$9604$1WS4nL))))
                          (car g$value$9604$1WS4nL))
                         (if (g$memv$4996$1WS4nL g$t$9606$1WS4nL '(core-prim))
                           ((case-lambda
                              ((g$name$9610$1WS4nL)
                               (list 'primitive g$name$9610$1WS4nL)))
                            g$value$9604$1WS4nL)
                           (if (g$memv$4996$1WS4nL g$t$9606$1WS4nL '(call))
                             (g$chi-application$7562$1WS4nL
                               g$e$9594$1WS4nL
                               g$r$9595$1WS4nL
                               g$mr$9596$1WS4nL)
                             (if (g$memv$4996$1WS4nL g$t$9606$1WS4nL '(lexical))
                               ((case-lambda
                                  ((g$lex$9611$1WS4nL) g$lex$9611$1WS4nL))
                                (g$lexical-var$7489$1WS4nL g$value$9604$1WS4nL))
                               (if (g$memv$4996$1WS4nL
                                     g$t$9606$1WS4nL
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7563$1WS4nL
                                   (g$chi-global-macro$7560$1WS4nL
                                     g$value$9604$1WS4nL
                                     g$e$9594$1WS4nL)
                                   g$r$9595$1WS4nL
                                   g$mr$9596$1WS4nL)
                                 (if (g$memv$4996$1WS4nL
                                       g$t$9606$1WS4nL
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7563$1WS4nL
                                     (g$chi-local-macro$7559$1WS4nL
                                       g$value$9604$1WS4nL
                                       g$e$9594$1WS4nL)
                                     g$r$9595$1WS4nL
                                     g$mr$9596$1WS4nL)
                                   (if (g$memv$4996$1WS4nL
                                         g$t$9606$1WS4nL
                                         '(macro macro!))
                                     (g$chi-expr$7563$1WS4nL
                                       (g$chi-macro$7558$1WS4nL
                                         g$value$9604$1WS4nL
                                         g$e$9594$1WS4nL)
                                       g$r$9595$1WS4nL
                                       g$mr$9596$1WS4nL)
                                     (if (g$memv$4996$1WS4nL
                                           g$t$9606$1WS4nL
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$9612$1WS4nL)
                                           (list 'quote g$datum$9612$1WS4nL)))
                                        g$value$9604$1WS4nL)
                                       (if (g$memv$4996$1WS4nL
                                             g$t$9606$1WS4nL
                                             '(set!))
                                         (g$chi-set!$7564$1WS4nL
                                           g$e$9594$1WS4nL
                                           g$r$9595$1WS4nL
                                           g$mr$9596$1WS4nL)
                                         (if (g$memv$4996$1WS4nL
                                               g$t$9606$1WS4nL
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$9613$1WS4nL)
                                               ((case-lambda
                                                  ((g$ls/false$9614$1WS4nL)
                                                   (if g$ls/false$9614$1WS4nL
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9615$1WS4nL
                                                            g$x*$9616$1WS4nL)
                                                          (g$build-sequence$7196$1WS4nL
                                                            '#f
                                                            (g$chi-expr*$7561$1WS4nL
                                                              (cons
                                                                g$x$9615$1WS4nL
                                                                g$x*$9616$1WS4nL)
                                                              g$r$9595$1WS4nL
                                                              g$mr$9596$1WS4nL))))
                                                       g$ls/false$9614$1WS4nL)
                                                     (g$syntax-violation$7656$1WS4nL
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9613$1WS4nL))))
                                                (g$syntax-dispatch$7545$1WS4nL
                                                  g$t$9613$1WS4nL
                                                  '(_ any . each-any)))))
                                            g$e$9594$1WS4nL)
                                           (if (g$memv$4996$1WS4nL
                                                 g$t$9606$1WS4nL
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$9617$1WS4nL)
                                                 ((case-lambda
                                                    ((g$ls/false$9618$1WS4nL)
                                                     (if (if g$ls/false$9618$1WS4nL
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$9619$1WS4nL
                                                                    g$xrhs*$9620$1WS4nL
                                                                    g$xbody$9621$1WS4nL
                                                                    g$xbody*$9622$1WS4nL)
                                                                  (if (not (g$valid-bound-ids?$7272$1WS4nL
                                                                             g$xlhs*$9619$1WS4nL))
                                                                    (g$syntax-violation$7656$1WS4nL
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9594$1WS4nL)
                                                                    (void))))
                                                               g$ls/false$9618$1WS4nL))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$9623$1WS4nL
                                                              g$xrhs*$9624$1WS4nL
                                                              g$xbody$9625$1WS4nL
                                                              g$xbody*$9626$1WS4nL)
                                                            ((case-lambda
                                                               ((g$xlab*$9627$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$xrib$9628$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$xb*$9629$1WS4nL)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$7196$1WS4nL
                                                                              '#f
                                                                              (g$chi-expr*$7561$1WS4nL
                                                                                (map (case-lambda
                                                                                       ((g$x$9630$1WS4nL)
                                                                                        (g$add-subst$7257$1WS4nL
                                                                                          g$xrib$9628$1WS4nL
                                                                                          g$x$9630$1WS4nL)))
                                                                                     (cons
                                                                                       g$xbody$9625$1WS4nL
                                                                                       g$xbody*$9626$1WS4nL))
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9627$1WS4nL
                                                                                       g$xb*$9629$1WS4nL)
                                                                                  g$r$9595$1WS4nL)
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9627$1WS4nL
                                                                                       g$xb*$9629$1WS4nL)
                                                                                  g$mr$9596$1WS4nL))))))))
                                                                     (map (case-lambda
                                                                            ((g$x$9631$1WS4nL)
                                                                             (g$make-eval-transformer$7299$1WS4nL
                                                                               (g$expand-transformer$7590$1WS4nL
                                                                                 (if (eq? g$type$9605$1WS4nL
                                                                                          'let-syntax)
                                                                                   g$x$9631$1WS4nL
                                                                                   (g$add-subst$7257$1WS4nL
                                                                                     g$xrib$9628$1WS4nL
                                                                                     g$x$9631$1WS4nL))
                                                                                 g$mr$9596$1WS4nL))))
                                                                          g$xrhs*$9624$1WS4nL))))
                                                                 (g$make-full-rib$7235$1WS4nL
                                                                   g$xlhs*$9623$1WS4nL
                                                                   g$xlab*$9627$1WS4nL))))
                                                             (map g$gen-label$7208$1WS4nL
                                                                  g$xlhs*$9623$1WS4nL))))
                                                         g$ls/false$9618$1WS4nL)
                                                       (g$syntax-violation$7656$1WS4nL
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$9617$1WS4nL))))
                                                  (g$syntax-dispatch$7545$1WS4nL
                                                    g$t$9617$1WS4nL
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9594$1WS4nL)
                                             (if (g$memv$4996$1WS4nL
                                                   g$t$9606$1WS4nL
                                                   '(displaced-lexical))
                                               (g$syntax-violation$7656$1WS4nL
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9594$1WS4nL)
                                               (if (g$memv$4996$1WS4nL
                                                     g$t$9606$1WS4nL
                                                     '(syntax))
                                                 (g$syntax-violation$7656$1WS4nL
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9594$1WS4nL)
                                                 (if (g$memv$4996$1WS4nL
                                                       g$t$9606$1WS4nL
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$7656$1WS4nL
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$9632$1WS4nL)
                                                           (if (g$memv$4996$1WS4nL
                                                                 g$t$9632$1WS4nL
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$4996$1WS4nL
                                                                   g$t$9632$1WS4nL
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$4996$1WS4nL
                                                                     g$t$9632$1WS4nL
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$4996$1WS4nL
                                                                       g$t$9632$1WS4nL
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$4996$1WS4nL
                                                                         g$t$9632$1WS4nL
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$4996$1WS4nL
                                                                           g$t$9632$1WS4nL
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$9605$1WS4nL)
                                                       '" was found where an expression was expected")
                                                     g$e$9594$1WS4nL)
                                                   (if (g$memv$4996$1WS4nL
                                                         g$t$9606$1WS4nL
                                                         '(mutable))
                                                     (g$syntax-violation$7656$1WS4nL
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9594$1WS4nL)
                                                     (g$syntax-violation$7656$1WS4nL
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9594$1WS4nL)))))))))))))))))))
                  g$type$9605$1WS4nL)))
              g$kwd$9602$1WS4nL
              g$value$9601$1WS4nL
              g$type$9600$1WS4nL)))))))
   (g$chi-set!$7564$1WS4nL
     g$chi-set!$11052$1WS4nL
     (case-lambda
       ((g$e$9633$1WS4nL g$r$9634$1WS4nL g$mr$9635$1WS4nL)
        ((case-lambda
           ((g$t$9636$1WS4nL)
            ((case-lambda
               ((g$ls/false$9637$1WS4nL)
                (if (if g$ls/false$9637$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$9638$1WS4nL g$v$9639$1WS4nL)
                             (g$id?$7267$1WS4nL g$x$9638$1WS4nL)))
                          g$ls/false$9637$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$9640$1WS4nL g$v$9641$1WS4nL)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7287$1WS4nL
                              g$x$9640$1WS4nL
                              g$r$9634$1WS4nL)))
                         (case-lambda
                           ((g$type$9645$1WS4nL
                              g$value$9646$1WS4nL
                              g$kwd$9647$1WS4nL)
                            ((case-lambda
                               ((g$kwd$9648$1WS4nL
                                  g$value$9649$1WS4nL
                                  g$type$9650$1WS4nL)
                                ((case-lambda
                                   ((g$t$9651$1WS4nL)
                                    (if (g$memv$4996$1WS4nL
                                          g$t$9651$1WS4nL
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7491$1WS4nL
                                          g$value$9649$1WS4nL
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7489$1WS4nL
                                            g$value$9649$1WS4nL)
                                          (g$chi-expr$7563$1WS4nL
                                            g$v$9641$1WS4nL
                                            g$r$9634$1WS4nL
                                            g$mr$9635$1WS4nL)))
                                      (if (g$memv$4996$1WS4nL
                                            g$t$9651$1WS4nL
                                            '(core-prim))
                                        (g$syntax-violation$7656$1WS4nL
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$9633$1WS4nL)
                                        (if (g$memv$4996$1WS4nL
                                              g$t$9651$1WS4nL
                                              '(global))
                                          (g$syntax-violation$7656$1WS4nL
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$9633$1WS4nL)
                                          (if (g$memv$4996$1WS4nL
                                                g$t$9651$1WS4nL
                                                '(global-macro!))
                                            (g$chi-expr$7563$1WS4nL
                                              (g$chi-global-macro$7560$1WS4nL
                                                g$value$9649$1WS4nL
                                                g$e$9633$1WS4nL)
                                              g$r$9634$1WS4nL
                                              g$mr$9635$1WS4nL)
                                            (if (g$memv$4996$1WS4nL
                                                  g$t$9651$1WS4nL
                                                  '(local-macro!))
                                              (g$chi-expr$7563$1WS4nL
                                                (g$chi-local-macro$7559$1WS4nL
                                                  g$value$9649$1WS4nL
                                                  g$e$9633$1WS4nL)
                                                g$r$9634$1WS4nL
                                                g$mr$9635$1WS4nL)
                                              (if (g$memv$4996$1WS4nL
                                                    g$t$9651$1WS4nL
                                                    '(mutable))
                                                (g$syntax-violation$7656$1WS4nL
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$9633$1WS4nL)
                                                (g$syntax-violation$7656$1WS4nL
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$9633$1WS4nL)))))))))
                                 g$type$9650$1WS4nL)))
                             g$kwd$9647$1WS4nL
                             g$value$9646$1WS4nL
                             g$type$9645$1WS4nL))))))
                    g$ls/false$9637$1WS4nL)
                  (g$syntax-violation$7656$1WS4nL
                    '#f
                    '"invalid syntax"
                    g$t$9636$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$9636$1WS4nL '(_ any any)))))
         g$e$9633$1WS4nL))))
   (g$verify-formals$7565$1WS4nL
     g$verify-formals$11053$1WS4nL
     (case-lambda
       ((g$fmls$9652$1WS4nL g$stx$9653$1WS4nL)
        ((case-lambda
           ((g$t$9654$1WS4nL)
            ((case-lambda
               ((g$ls/false$9655$1WS4nL)
                (if g$ls/false$9655$1WS4nL
                  (apply
                    (case-lambda
                      ((g$x*$9656$1WS4nL)
                       (if (not (g$valid-bound-ids?$7272$1WS4nL
                                  g$x*$9656$1WS4nL))
                         (g$invalid-fmls-error$7510$1WS4nL
                           g$stx$9653$1WS4nL
                           g$fmls$9652$1WS4nL)
                         (void))))
                    g$ls/false$9655$1WS4nL)
                  ((case-lambda
                     ((g$t$9657$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$9658$1WS4nL)
                          (if g$ls/false$9658$1WS4nL
                            (apply
                              (case-lambda
                                ((g$x*$9659$1WS4nL g$x$9660$1WS4nL)
                                 (if (not (g$valid-bound-ids?$7272$1WS4nL
                                            (cons
                                              g$x$9660$1WS4nL
                                              g$x*$9659$1WS4nL)))
                                   (g$invalid-fmls-error$7510$1WS4nL
                                     g$stx$9653$1WS4nL
                                     g$fmls$9652$1WS4nL)
                                   (void))))
                              g$ls/false$9658$1WS4nL)
                            ((case-lambda
                               ((g$t$9661$1WS4nL)
                                ((case-lambda
                                   ((g$ls/false$9662$1WS4nL)
                                    (if g$ls/false$9662$1WS4nL
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$stx$9653$1WS4nL)))
                                        g$ls/false$9662$1WS4nL)
                                      (g$syntax-violation$7656$1WS4nL
                                        '#f
                                        '"invalid syntax"
                                        g$t$9661$1WS4nL))))
                                 (g$syntax-dispatch$7545$1WS4nL
                                   g$t$9661$1WS4nL
                                   '_))))
                             g$t$9657$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$9657$1WS4nL
                         '#(each+ any () any)))))
                   g$t$9654$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$9654$1WS4nL 'each-any))))
         g$fmls$9652$1WS4nL))))
   (g$chi-lambda-clause$7566$1WS4nL
     g$chi-lambda-clause$11054$1WS4nL
     (case-lambda
       ((g$stx$9663$1WS4nL
          g$fmls$9664$1WS4nL
          g$body*$9665$1WS4nL
          g$r$9666$1WS4nL
          g$mr$9667$1WS4nL)
        ((case-lambda
           ((g$t$9668$1WS4nL)
            ((case-lambda
               ((g$ls/false$9669$1WS4nL)
                (if g$ls/false$9669$1WS4nL
                  (apply
                    (case-lambda
                      ((g$x*$9670$1WS4nL)
                       (begin
                         (g$verify-formals$7565$1WS4nL
                           g$fmls$9664$1WS4nL
                           g$stx$9663$1WS4nL)
                         ((case-lambda
                            ((g$lex*$9671$1WS4nL g$lab*$9672$1WS4nL)
                             (values
                               g$lex*$9671$1WS4nL
                               (g$chi-internal$7574$1WS4nL
                                 (g$add-subst$7257$1WS4nL
                                   (g$make-full-rib$7235$1WS4nL
                                     g$x*$9670$1WS4nL
                                     g$lab*$9672$1WS4nL)
                                   g$body*$9665$1WS4nL)
                                 (g$add-lexicals$7493$1WS4nL
                                   g$lab*$9672$1WS4nL
                                   g$lex*$9671$1WS4nL
                                   g$r$9666$1WS4nL)
                                 g$mr$9667$1WS4nL))))
                          (map g$gen-lexical$7206$1WS4nL g$x*$9670$1WS4nL)
                          (map g$gen-label$7208$1WS4nL g$x*$9670$1WS4nL)))))
                    g$ls/false$9669$1WS4nL)
                  ((case-lambda
                     ((g$t$9673$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$9674$1WS4nL)
                          (if g$ls/false$9674$1WS4nL
                            (apply
                              (case-lambda
                                ((g$x*$9675$1WS4nL g$x$9676$1WS4nL)
                                 (begin
                                   (g$verify-formals$7565$1WS4nL
                                     g$fmls$9664$1WS4nL
                                     g$stx$9663$1WS4nL)
                                   ((case-lambda
                                      ((g$lex*$9677$1WS4nL
                                         g$lab*$9678$1WS4nL
                                         g$lex$9679$1WS4nL
                                         g$lab$9680$1WS4nL)
                                       (values
                                         (append
                                           g$lex*$9677$1WS4nL
                                           g$lex$9679$1WS4nL)
                                         (g$chi-internal$7574$1WS4nL
                                           (g$add-subst$7257$1WS4nL
                                             (g$make-full-rib$7235$1WS4nL
                                               (cons
                                                 g$x$9676$1WS4nL
                                                 g$x*$9675$1WS4nL)
                                               (cons
                                                 g$lab$9680$1WS4nL
                                                 g$lab*$9678$1WS4nL))
                                             g$body*$9665$1WS4nL)
                                           (g$add-lexicals$7493$1WS4nL
                                             (cons
                                               g$lab$9680$1WS4nL
                                               g$lab*$9678$1WS4nL)
                                             (cons
                                               g$lex$9679$1WS4nL
                                               g$lex*$9677$1WS4nL)
                                             g$r$9666$1WS4nL)
                                           g$mr$9667$1WS4nL))))
                                    (map g$gen-lexical$7206$1WS4nL
                                         g$x*$9675$1WS4nL)
                                    (map g$gen-label$7208$1WS4nL
                                         g$x*$9675$1WS4nL)
                                    (g$gen-lexical$7206$1WS4nL g$x$9676$1WS4nL)
                                    (g$gen-label$7208$1WS4nL
                                      g$x$9676$1WS4nL)))))
                              g$ls/false$9674$1WS4nL)
                            ((case-lambda
                               ((g$t$9681$1WS4nL)
                                ((case-lambda
                                   ((g$ls/false$9682$1WS4nL)
                                    (if g$ls/false$9682$1WS4nL
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7656$1WS4nL
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$9664$1WS4nL)))
                                        g$ls/false$9682$1WS4nL)
                                      (g$syntax-violation$7656$1WS4nL
                                        '#f
                                        '"invalid syntax"
                                        g$t$9681$1WS4nL))))
                                 (g$syntax-dispatch$7545$1WS4nL
                                   g$t$9681$1WS4nL
                                   '_))))
                             g$t$9673$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$9673$1WS4nL
                         '#(each+ any () any)))))
                   g$t$9668$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$9668$1WS4nL 'each-any))))
         g$fmls$9664$1WS4nL))))
   (g$chi-lambda-clause*$7567$1WS4nL
     g$chi-lambda-clause*$11055$1WS4nL
     (case-lambda
       ((g$stx$9683$1WS4nL
          g$fmls*$9684$1WS4nL
          g$body**$9685$1WS4nL
          g$r$9686$1WS4nL
          g$mr$9687$1WS4nL)
        (if (null? g$fmls*$9684$1WS4nL)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7566$1WS4nL
                 g$stx$9683$1WS4nL
                 (car g$fmls*$9684$1WS4nL)
                 (car g$body**$9685$1WS4nL)
                 g$r$9686$1WS4nL
                 g$mr$9687$1WS4nL)))
            (case-lambda
              ((g$a$9690$1WS4nL g$b$9691$1WS4nL)
               ((case-lambda
                  ((g$b$9692$1WS4nL g$a$9693$1WS4nL)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7567$1WS4nL
                          g$stx$9683$1WS4nL
                          (cdr g$fmls*$9684$1WS4nL)
                          (cdr g$body**$9685$1WS4nL)
                          g$r$9686$1WS4nL
                          g$mr$9687$1WS4nL)))
                     (case-lambda
                       ((g$a*$9696$1WS4nL g$b*$9697$1WS4nL)
                        ((case-lambda
                           ((g$b*$9698$1WS4nL g$a*$9699$1WS4nL)
                            (values
                              (cons g$a$9693$1WS4nL g$a*$9699$1WS4nL)
                              (cons g$b$9692$1WS4nL g$b*$9698$1WS4nL))))
                         g$b*$9697$1WS4nL
                         g$a*$9696$1WS4nL))))))
                g$b$9691$1WS4nL
                g$a$9690$1WS4nL))))))))
   (g$chi-defun$7568$1WS4nL
     g$chi-defun$11056$1WS4nL
     (case-lambda
       ((g$x$9700$1WS4nL g$r$9701$1WS4nL g$mr$9702$1WS4nL)
        ((case-lambda
           ((g$fmls$9703$1WS4nL g$body*$9704$1WS4nL)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7566$1WS4nL
                   g$fmls$9703$1WS4nL
                   g$fmls$9703$1WS4nL
                   g$body*$9704$1WS4nL
                   g$r$9701$1WS4nL
                   g$mr$9702$1WS4nL)))
              (case-lambda
                ((g$fmls$9707$1WS4nL g$body$9708$1WS4nL)
                 ((case-lambda
                    ((g$body$9709$1WS4nL g$fmls$9710$1WS4nL)
                     (g$build-lambda$7193$1WS4nL
                       '#f
                       g$fmls$9710$1WS4nL
                       g$body$9709$1WS4nL)))
                  g$body$9708$1WS4nL
                  g$fmls$9707$1WS4nL))))))
         (car g$x$9700$1WS4nL)
         (cdr g$x$9700$1WS4nL)))))
   (g$chi-rhs$7569$1WS4nL
     g$chi-rhs$11057$1WS4nL
     (case-lambda
       ((g$rhs$9711$1WS4nL g$r$9712$1WS4nL g$mr$9713$1WS4nL)
        ((case-lambda
           ((g$t$9714$1WS4nL)
            (if (g$memv$4996$1WS4nL g$t$9714$1WS4nL '(defun))
              (g$chi-defun$7568$1WS4nL
                (cdr g$rhs$9711$1WS4nL)
                g$r$9712$1WS4nL
                g$mr$9713$1WS4nL)
              (if (g$memv$4996$1WS4nL g$t$9714$1WS4nL '(expr))
                ((case-lambda
                   ((g$expr$9715$1WS4nL)
                    (g$chi-expr$7563$1WS4nL
                      g$expr$9715$1WS4nL
                      g$r$9712$1WS4nL
                      g$mr$9713$1WS4nL)))
                 (cdr g$rhs$9711$1WS4nL))
                (if (g$memv$4996$1WS4nL g$t$9714$1WS4nL '(top-expr))
                  ((case-lambda
                     ((g$expr$9716$1WS4nL)
                      (g$build-sequence$7196$1WS4nL
                        '#f
                        (list
                          (g$chi-expr$7563$1WS4nL
                            g$expr$9716$1WS4nL
                            g$r$9712$1WS4nL
                            g$mr$9713$1WS4nL)
                          (g$build-void$7197$1WS4nL)))))
                   (cdr g$rhs$9711$1WS4nL))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$9711$1WS4nL))))))
         (car g$rhs$9711$1WS4nL)))))
   (g$expand-interaction-rhs*/init*$7570$1WS4nL
     g$expand-interaction-rhs*/init*$11058$1WS4nL
     (case-lambda
       ((g$lhs*$9717$1WS4nL
          g$rhs*$9718$1WS4nL
          g$init*$9719$1WS4nL
          g$r$9720$1WS4nL
          g$mr$9721$1WS4nL)
        ((letrec ((g$f$9722$1WS4nL
                    (case-lambda
                      ((g$lhs*$9723$1WS4nL g$rhs*$9724$1WS4nL)
                       (if (null? g$lhs*$9723$1WS4nL)
                         (map (case-lambda
                                ((g$x$9725$1WS4nL)
                                 (g$chi-expr$7563$1WS4nL
                                   g$x$9725$1WS4nL
                                   g$r$9720$1WS4nL
                                   g$mr$9721$1WS4nL)))
                              g$init*$9719$1WS4nL)
                         ((case-lambda
                            ((g$lhs$9726$1WS4nL g$rhs$9727$1WS4nL)
                             ((case-lambda
                                ((g$t$9728$1WS4nL)
                                 (if (g$memv$4996$1WS4nL
                                       g$t$9728$1WS4nL
                                       '(defun))
                                   ((case-lambda
                                      ((g$rhs$9729$1WS4nL)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$9726$1WS4nL
                                           g$rhs$9729$1WS4nL)
                                         (g$f$9722$1WS4nL
                                           (cdr g$lhs*$9723$1WS4nL)
                                           (cdr g$rhs*$9724$1WS4nL)))))
                                    (g$chi-defun$7568$1WS4nL
                                      (cdr g$rhs$9727$1WS4nL)
                                      g$r$9720$1WS4nL
                                      g$mr$9721$1WS4nL))
                                   (if (g$memv$4996$1WS4nL
                                         g$t$9728$1WS4nL
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$9730$1WS4nL)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$9726$1WS4nL
                                             g$rhs$9730$1WS4nL)
                                           (g$f$9722$1WS4nL
                                             (cdr g$lhs*$9723$1WS4nL)
                                             (cdr g$rhs*$9724$1WS4nL)))))
                                      (g$chi-expr$7563$1WS4nL
                                        (cdr g$rhs$9727$1WS4nL)
                                        g$r$9720$1WS4nL
                                        g$mr$9721$1WS4nL))
                                     (if (g$memv$4996$1WS4nL
                                           g$t$9728$1WS4nL
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$9731$1WS4nL)
                                           (cons
                                             g$e$9731$1WS4nL
                                             (g$f$9722$1WS4nL
                                               (cdr g$lhs*$9723$1WS4nL)
                                               (cdr g$rhs*$9724$1WS4nL)))))
                                        (g$chi-expr$7563$1WS4nL
                                          (cdr g$rhs$9727$1WS4nL)
                                          g$r$9720$1WS4nL
                                          g$mr$9721$1WS4nL))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$9727$1WS4nL))))))
                              (car g$rhs$9727$1WS4nL))))
                          (car g$lhs*$9723$1WS4nL)
                          (car g$rhs*$9724$1WS4nL)))))))
           g$f$9722$1WS4nL)
         g$lhs*$9717$1WS4nL
         g$rhs*$9718$1WS4nL))))
   (g$chi-rhs*$7571$1WS4nL
     g$chi-rhs*$11059$1WS4nL
     (case-lambda
       ((g$rhs*$9732$1WS4nL g$r$9733$1WS4nL g$mr$9734$1WS4nL)
        ((letrec ((g$f$9735$1WS4nL
                    (case-lambda
                      ((g$ls$9736$1WS4nL)
                       (if (null? g$ls$9736$1WS4nL)
                         '()
                         ((case-lambda
                            ((g$a$9737$1WS4nL)
                             (cons
                               g$a$9737$1WS4nL
                               (g$f$9735$1WS4nL (cdr g$ls$9736$1WS4nL)))))
                          (g$chi-rhs$7569$1WS4nL
                            (car g$ls$9736$1WS4nL)
                            g$r$9733$1WS4nL
                            g$mr$9734$1WS4nL)))))))
           g$f$9735$1WS4nL)
         g$rhs*$9732$1WS4nL))))
   (g$find-bound=?$7572$1WS4nL
     g$find-bound=?$11060$1WS4nL
     (case-lambda
       ((g$x$9738$1WS4nL g$lhs*$9739$1WS4nL g$rhs*$9740$1WS4nL)
        (if (null? g$lhs*$9739$1WS4nL)
          '#f
          (if (g$bound-id=?$7270$1WS4nL
                g$x$9738$1WS4nL
                (car g$lhs*$9739$1WS4nL))
            (car g$rhs*$9740$1WS4nL)
            (g$find-bound=?$7572$1WS4nL
              g$x$9738$1WS4nL
              (cdr g$lhs*$9739$1WS4nL)
              (cdr g$rhs*$9740$1WS4nL)))))))
   (g$find-dups$7573$1WS4nL
     g$find-dups$11061$1WS4nL
     (case-lambda
       ((g$ls$9741$1WS4nL)
        ((letrec ((g$f$9742$1WS4nL
                    (case-lambda
                      ((g$ls$9743$1WS4nL g$dups$9744$1WS4nL)
                       (if (null? g$ls$9743$1WS4nL)
                         g$dups$9744$1WS4nL
                         ((case-lambda
                            ((g$t$9745$1WS4nL)
                             (if g$t$9745$1WS4nL
                               ((case-lambda
                                  ((g$x$9746$1WS4nL)
                                   (g$f$9742$1WS4nL
                                     (cdr g$ls$9743$1WS4nL)
                                     (cons
                                       (list
                                         (car g$ls$9743$1WS4nL)
                                         g$x$9746$1WS4nL)
                                       g$dups$9744$1WS4nL))))
                                g$t$9745$1WS4nL)
                               (g$f$9742$1WS4nL
                                 (cdr g$ls$9743$1WS4nL)
                                 g$dups$9744$1WS4nL))))
                          (g$find-bound=?$7572$1WS4nL
                            (car g$ls$9743$1WS4nL)
                            (cdr g$ls$9743$1WS4nL)
                            (cdr g$ls$9743$1WS4nL))))))))
           g$f$9742$1WS4nL)
         g$ls$9741$1WS4nL
         '()))))
   (g$chi-internal$7574$1WS4nL
     g$chi-internal$11062$1WS4nL
     (case-lambda
       ((g$e*$9747$1WS4nL g$r$9748$1WS4nL g$mr$9749$1WS4nL)
        ((case-lambda
           ((g$rib$9750$1WS4nL)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7589$1WS4nL
                   (map (case-lambda
                          ((g$x$9759$1WS4nL)
                           (g$add-subst$7257$1WS4nL
                             g$rib$9750$1WS4nL
                             g$x$9759$1WS4nL)))
                        (g$syntax->list$7266$1WS4nL g$e*$9747$1WS4nL))
                   g$r$9748$1WS4nL
                   g$mr$9749$1WS4nL
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$9750$1WS4nL
                   '#f)))
              (case-lambda
                ((g$e*$9760$1WS4nL
                   g$r$9761$1WS4nL
                   g$mr$9762$1WS4nL
                   g$lex*$9763$1WS4nL
                   g$rhs*$9764$1WS4nL
                   g$mod**$9765$1WS4nL
                   g$kwd*$9766$1WS4nL
                   g$_exp*$9767$1WS4nL)
                 ((case-lambda
                    ((g$_exp*$9768$1WS4nL
                       g$kwd*$9769$1WS4nL
                       g$mod**$9770$1WS4nL
                       g$rhs*$9771$1WS4nL
                       g$lex*$9772$1WS4nL
                       g$mr$9773$1WS4nL
                       g$r$9774$1WS4nL
                       g$e*$9775$1WS4nL)
                     (begin
                       (if (null? g$e*$9775$1WS4nL)
                         (g$syntax-violation$7656$1WS4nL
                           '#f
                           '"no expression in body"
                           g$e*$9775$1WS4nL)
                         (void))
                       ((case-lambda
                          ((g$init*$9776$1WS4nL)
                           ((case-lambda
                              ((g$rhs*$9777$1WS4nL)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$7199$1WS4nL
                                     '#f
                                     (reverse g$lex*$9772$1WS4nL)
                                     (reverse g$rhs*$9777$1WS4nL)
                                     (g$build-sequence$7196$1WS4nL
                                       '#f
                                       g$init*$9776$1WS4nL)))))))
                            (g$chi-rhs*$7571$1WS4nL
                              g$rhs*$9771$1WS4nL
                              g$r$9774$1WS4nL
                              g$mr$9773$1WS4nL))))
                        (g$chi-expr*$7561$1WS4nL
                          (append
                            (apply append (reverse g$mod**$9770$1WS4nL))
                            g$e*$9775$1WS4nL)
                          g$r$9774$1WS4nL
                          g$mr$9773$1WS4nL)))))
                  g$_exp*$9767$1WS4nL
                  g$kwd*$9766$1WS4nL
                  g$mod**$9765$1WS4nL
                  g$rhs*$9764$1WS4nL
                  g$lex*$9763$1WS4nL
                  g$mr$9762$1WS4nL
                  g$r$9761$1WS4nL
                  g$e*$9760$1WS4nL))))))
         (g$make-empty-rib$7227$1WS4nL)))))
   (g$parse-module$7575$1WS4nL
     g$parse-module$11063$1WS4nL
     (case-lambda
       ((g$e$9778$1WS4nL)
        ((case-lambda
           ((g$t$9779$1WS4nL)
            ((case-lambda
               ((g$ls/false$9780$1WS4nL)
                (if g$ls/false$9780$1WS4nL
                  (apply
                    (case-lambda
                      ((g$export*$9781$1WS4nL g$b*$9782$1WS4nL)
                       (begin
                         (if (not (g$for-all$5001$1WS4nL
                                    g$id?$7267$1WS4nL
                                    g$export*$9781$1WS4nL))
                           (g$syntax-violation$7656$1WS4nL
                             '#f
                             '"module exports must be identifiers"
                             g$e$9778$1WS4nL)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$9781$1WS4nL)
                           g$b*$9782$1WS4nL))))
                    g$ls/false$9780$1WS4nL)
                  ((case-lambda
                     ((g$t$9783$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$9784$1WS4nL)
                          (if g$ls/false$9784$1WS4nL
                            (apply
                              (case-lambda
                                ((g$name$9785$1WS4nL
                                   g$export*$9786$1WS4nL
                                   g$b*$9787$1WS4nL)
                                 (begin
                                   (if (not (g$id?$7267$1WS4nL
                                              g$name$9785$1WS4nL))
                                     (g$syntax-violation$7656$1WS4nL
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$9778$1WS4nL)
                                     (void))
                                   (if (not (g$for-all$5001$1WS4nL
                                              g$id?$7267$1WS4nL
                                              g$export*$9786$1WS4nL))
                                     (g$syntax-violation$7656$1WS4nL
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$9778$1WS4nL)
                                     (void))
                                   (values
                                     g$name$9785$1WS4nL
                                     (list->vector g$export*$9786$1WS4nL)
                                     g$b*$9787$1WS4nL))))
                              g$ls/false$9784$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$9783$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$9783$1WS4nL
                         '(_ any each-any . each-any)))))
                   g$t$9779$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$9779$1WS4nL
               '(_ each-any . each-any)))))
         g$e$9778$1WS4nL))))
   (g$8709$7576$1WS4nL
     g$8709$11064$1WS4nL
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8712$1WS4nL
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$8711$7577$1WS4nL g$8711$11065$1WS4nL '#f)
   (g$8710$7578$1WS4nL
     g$8710$11066$1WS4nL
     (make-record-constructor-descriptor
       g$8709$7576$1WS4nL
       '#f
       g$8711$7577$1WS4nL))
   (g$module-interface?$7579$1WS4nL
     g$module-interface?$11067$1WS4nL
     (record-predicate g$8709$7576$1WS4nL))
   (g$make-module-interface$7580$1WS4nL
     g$make-module-interface$11068$1WS4nL
     (record-constructor g$8710$7578$1WS4nL))
   (g$module-interface-first-mark$7581$1WS4nL
     g$module-interface-first-mark$11069$1WS4nL
     (record-accessor g$8709$7576$1WS4nL '0))
   (g$module-interface-exp-id-vec$7582$1WS4nL
     g$module-interface-exp-id-vec$11070$1WS4nL
     (record-accessor g$8709$7576$1WS4nL '1))
   (g$module-interface-exp-lab-vec$7583$1WS4nL
     g$module-interface-exp-lab-vec$11071$1WS4nL
     (record-accessor g$8709$7576$1WS4nL '2))
   (g$set-module-interface-first-mark!$7584$1WS4nL
     g$set-module-interface-first-mark!$11072$1WS4nL
     (record-mutator g$8709$7576$1WS4nL '0))
   (g$set-module-interface-exp-id-vec!$7585$1WS4nL
     g$set-module-interface-exp-id-vec!$11073$1WS4nL
     (record-mutator g$8709$7576$1WS4nL '1))
   (g$set-module-interface-exp-lab-vec!$7586$1WS4nL
     g$set-module-interface-exp-lab-vec!$11074$1WS4nL
     (record-mutator g$8709$7576$1WS4nL '2))
   (g$module-interface-exp-id*$7587$1WS4nL
     g$module-interface-exp-id*$11075$1WS4nL
     (case-lambda
       ((g$iface$9788$1WS4nL g$id$9789$1WS4nL)
        (letrec* ((g$diff-marks$9790$1WS4nL
                    (case-lambda
                      ((g$ls$9794$1WS4nL g$x$9795$1WS4nL)
                       (begin
                         (if (null? g$ls$9794$1WS4nL)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$9796$1WS4nL)
                             (if (eq? g$a$9796$1WS4nL g$x$9795$1WS4nL)
                               '()
                               (cons
                                 g$a$9796$1WS4nL
                                 (g$diff-marks$9790$1WS4nL
                                   (cdr g$ls$9794$1WS4nL)
                                   g$x$9795$1WS4nL)))))
                          (car g$ls$9794$1WS4nL)))))))
          ((case-lambda
             ((g$diff$9791$1WS4nL g$id-vec$9792$1WS4nL)
              (if (null? g$diff$9791$1WS4nL)
                g$id-vec$9792$1WS4nL
                (vector-map
                  (case-lambda
                    ((g$x$9793$1WS4nL)
                     (g$make-stx$7240$1WS4nL
                       (g$stx-expr$7241$1WS4nL g$x$9793$1WS4nL)
                       (append
                         g$diff$9791$1WS4nL
                         (g$stx-mark*$7242$1WS4nL g$x$9793$1WS4nL))
                       '()
                       '())))
                  g$id-vec$9792$1WS4nL))))
           (g$diff-marks$9790$1WS4nL
             (g$stx-mark*$7242$1WS4nL g$id$9789$1WS4nL)
             (g$module-interface-first-mark$7581$1WS4nL g$iface$9788$1WS4nL))
           (g$module-interface-exp-id-vec$7582$1WS4nL g$iface$9788$1WS4nL))))))
   (g$chi-internal-module$7588$1WS4nL
     g$chi-internal-module$11076$1WS4nL
     (case-lambda
       ((g$e$9797$1WS4nL
          g$r$9798$1WS4nL
          g$mr$9799$1WS4nL
          g$lex*$9800$1WS4nL
          g$rhs*$9801$1WS4nL
          g$mod**$9802$1WS4nL
          g$kwd*$9803$1WS4nL)
        (call-with-values
          (case-lambda (() (g$parse-module$7575$1WS4nL g$e$9797$1WS4nL)))
          (case-lambda
            ((g$name$9807$1WS4nL g$exp-id*$9808$1WS4nL g$e*$9809$1WS4nL)
             ((case-lambda
                ((g$e*$9810$1WS4nL g$exp-id*$9811$1WS4nL g$name$9812$1WS4nL)
                 ((case-lambda
                    ((g$rib$9813$1WS4nL)
                     ((case-lambda
                        ((g$e*$9814$1WS4nL)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$7589$1WS4nL
                                    g$e*$9814$1WS4nL
                                    g$r$9798$1WS4nL
                                    g$mr$9799$1WS4nL
                                    g$lex*$9800$1WS4nL
                                    g$rhs*$9801$1WS4nL
                                    g$mod**$9802$1WS4nL
                                    g$kwd*$9803$1WS4nL
                                    '()
                                    g$rib$9813$1WS4nL
                                    '#f)))
                               (case-lambda
                                 ((g$e*$9823$1WS4nL
                                    g$r$9824$1WS4nL
                                    g$mr$9825$1WS4nL
                                    g$lex*$9826$1WS4nL
                                    g$rhs*$9827$1WS4nL
                                    g$mod**$9828$1WS4nL
                                    g$kwd*$9829$1WS4nL
                                    g$_exp*$9830$1WS4nL)
                                  ((case-lambda
                                     ((g$_exp*$9831$1WS4nL
                                        g$kwd*$9832$1WS4nL
                                        g$mod**$9833$1WS4nL
                                        g$rhs*$9834$1WS4nL
                                        g$lex*$9835$1WS4nL
                                        g$mr$9836$1WS4nL
                                        g$r$9837$1WS4nL
                                        g$e*$9838$1WS4nL)
                                      ((case-lambda
                                         ((g$exp-lab*$9839$1WS4nL
                                            g$mod**$9840$1WS4nL)
                                          (if (not g$name$9812$1WS4nL)
                                            (values
                                              g$lex*$9835$1WS4nL
                                              g$rhs*$9834$1WS4nL
                                              g$exp-id*$9811$1WS4nL
                                              g$exp-lab*$9839$1WS4nL
                                              g$r$9837$1WS4nL
                                              g$mr$9836$1WS4nL
                                              g$mod**$9840$1WS4nL
                                              g$kwd*$9832$1WS4nL)
                                            ((case-lambda
                                               ((g$lab$9841$1WS4nL
                                                  g$iface$9842$1WS4nL)
                                                (values
                                                  g$lex*$9835$1WS4nL
                                                  g$rhs*$9834$1WS4nL
                                                  (vector g$name$9812$1WS4nL)
                                                  (vector g$lab$9841$1WS4nL)
                                                  (cons
                                                    (cons
                                                      g$lab$9841$1WS4nL
                                                      (cons
                                                        '$module
                                                        g$iface$9842$1WS4nL))
                                                    g$r$9837$1WS4nL)
                                                  (cons
                                                    (cons
                                                      g$lab$9841$1WS4nL
                                                      (cons
                                                        '$module
                                                        g$iface$9842$1WS4nL))
                                                    g$mr$9836$1WS4nL)
                                                  g$mod**$9840$1WS4nL
                                                  g$kwd*$9832$1WS4nL)))
                                             (g$gen-label$7208$1WS4nL 'module)
                                             (g$make-module-interface$7580$1WS4nL
                                               (car (g$stx-mark*$7242$1WS4nL
                                                      g$name$9812$1WS4nL))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$9843$1WS4nL)
                                                    (g$make-stx$7240$1WS4nL
                                                      (g$stx-expr$7241$1WS4nL
                                                        g$x$9843$1WS4nL)
                                                      (g$stx-mark*$7242$1WS4nL
                                                        g$x$9843$1WS4nL)
                                                      '()
                                                      '())))
                                                 g$exp-id*$9811$1WS4nL)
                                               g$exp-lab*$9839$1WS4nL)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$9844$1WS4nL)
                                            ((case-lambda
                                               ((g$t$9845$1WS4nL)
                                                (if g$t$9845$1WS4nL
                                                  g$t$9845$1WS4nL
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$7656$1WS4nL
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$9844$1WS4nL)))))
                                             (g$id->label$7280$1WS4nL
                                               (g$make-stx$7240$1WS4nL
                                                 (g$id->sym$7268$1WS4nL
                                                   g$x$9844$1WS4nL)
                                                 (g$stx-mark*$7242$1WS4nL
                                                   g$x$9844$1WS4nL)
                                                 (list g$rib$9813$1WS4nL)
                                                 '())))))
                                         g$exp-id*$9811$1WS4nL)
                                       (cons
                                         g$e*$9838$1WS4nL
                                         g$mod**$9833$1WS4nL))))
                                   g$_exp*$9830$1WS4nL
                                   g$kwd*$9829$1WS4nL
                                   g$mod**$9828$1WS4nL
                                   g$rhs*$9827$1WS4nL
                                   g$lex*$9826$1WS4nL
                                   g$mr$9825$1WS4nL
                                   g$r$9824$1WS4nL
                                   g$e*$9823$1WS4nL)))))))))
                      (map (case-lambda
                             ((g$x$9846$1WS4nL)
                              (g$add-subst$7257$1WS4nL
                                g$rib$9813$1WS4nL
                                g$x$9846$1WS4nL)))
                           (g$syntax->list$7266$1WS4nL g$e*$9810$1WS4nL)))))
                  (g$make-empty-rib$7227$1WS4nL))))
              g$e*$9809$1WS4nL
              g$exp-id*$9808$1WS4nL
              g$name$9807$1WS4nL)))))))
   (g$chi-body*$7589$1WS4nL
     g$chi-body*$11077$1WS4nL
     (case-lambda
       ((g$e*$9847$1WS4nL
          g$r$9848$1WS4nL
          g$mr$9849$1WS4nL
          g$lex*$9850$1WS4nL
          g$rhs*$9851$1WS4nL
          g$mod**$9852$1WS4nL
          g$kwd*$9853$1WS4nL
          g$exp*$9854$1WS4nL
          g$rib$9855$1WS4nL
          g$top?$9856$1WS4nL)
        (if (null? g$e*$9847$1WS4nL)
          (values
            g$e*$9847$1WS4nL
            g$r$9848$1WS4nL
            g$mr$9849$1WS4nL
            g$lex*$9850$1WS4nL
            g$rhs*$9851$1WS4nL
            g$mod**$9852$1WS4nL
            g$kwd*$9853$1WS4nL
            g$exp*$9854$1WS4nL)
          ((case-lambda
             ((g$e$9857$1WS4nL)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7287$1WS4nL g$e$9857$1WS4nL g$r$9848$1WS4nL)))
                (case-lambda
                  ((g$type$9861$1WS4nL g$value$9862$1WS4nL g$kwd$9863$1WS4nL)
                   ((case-lambda
                      ((g$kwd$9864$1WS4nL
                         g$value$9865$1WS4nL
                         g$type$9866$1WS4nL)
                       ((case-lambda
                          ((g$kwd*$9867$1WS4nL)
                           ((case-lambda
                              ((g$t$9868$1WS4nL)
                               (if (g$memv$4996$1WS4nL
                                     g$t$9868$1WS4nL
                                     '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7485$1WS4nL
                                        g$e$9857$1WS4nL)))
                                   (case-lambda
                                     ((g$id$9871$1WS4nL g$rhs$9872$1WS4nL)
                                      ((case-lambda
                                         ((g$rhs$9873$1WS4nL g$id$9874$1WS4nL)
                                          (begin
                                            (if (g$bound-id-member?$7274$1WS4nL
                                                  g$id$9874$1WS4nL
                                                  g$kwd*$9867$1WS4nL)
                                              (g$syntax-violation$7656$1WS4nL
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$9857$1WS4nL)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7210$1WS4nL
                                                   g$id$9874$1WS4nL
                                                   g$rib$9855$1WS4nL)))
                                              (case-lambda
                                                ((g$lab$9877$1WS4nL
                                                   g$lex$9878$1WS4nL)
                                                 ((case-lambda
                                                    ((g$lex$9879$1WS4nL
                                                       g$lab$9880$1WS4nL)
                                                     (begin
                                                       (g$extend-rib!$7230$1WS4nL
                                                         g$rib$9855$1WS4nL
                                                         g$id$9874$1WS4nL
                                                         g$lab$9880$1WS4nL)
                                                       (g$chi-body*$7589$1WS4nL
                                                         (cdr g$e*$9847$1WS4nL)
                                                         (g$add-lexical$7492$1WS4nL
                                                           g$lab$9880$1WS4nL
                                                           g$lex$9879$1WS4nL
                                                           g$r$9848$1WS4nL)
                                                         g$mr$9849$1WS4nL
                                                         (cons
                                                           g$lex$9879$1WS4nL
                                                           g$lex*$9850$1WS4nL)
                                                         (cons
                                                           g$rhs$9873$1WS4nL
                                                           g$rhs*$9851$1WS4nL)
                                                         g$mod**$9852$1WS4nL
                                                         g$kwd*$9867$1WS4nL
                                                         g$exp*$9854$1WS4nL
                                                         g$rib$9855$1WS4nL
                                                         g$top?$9856$1WS4nL))))
                                                  g$lex$9878$1WS4nL
                                                  g$lab$9877$1WS4nL)))))))
                                       g$rhs$9872$1WS4nL
                                       g$id$9871$1WS4nL))))
                                 (if (g$memv$4996$1WS4nL
                                       g$t$9868$1WS4nL
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7486$1WS4nL
                                          g$e$9857$1WS4nL)))
                                     (case-lambda
                                       ((g$id$9883$1WS4nL g$rhs$9884$1WS4nL)
                                        ((case-lambda
                                           ((g$rhs$9885$1WS4nL g$id$9886$1WS4nL)
                                            (begin
                                              (if (g$bound-id-member?$7274$1WS4nL
                                                    g$id$9886$1WS4nL
                                                    g$kwd*$9867$1WS4nL)
                                                (g$syntax-violation$7656$1WS4nL
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$9857$1WS4nL)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$9887$1WS4nL
                                                    g$expanded-rhs$9888$1WS4nL)
                                                  (begin
                                                    (g$extend-rib!$7230$1WS4nL
                                                      g$rib$9855$1WS4nL
                                                      g$id$9886$1WS4nL
                                                      g$lab$9887$1WS4nL)
                                                    ((case-lambda
                                                       ((g$b$9889$1WS4nL)
                                                        (g$chi-body*$7589$1WS4nL
                                                          (cdr g$e*$9847$1WS4nL)
                                                          (cons
                                                            (cons
                                                              g$lab$9887$1WS4nL
                                                              g$b$9889$1WS4nL)
                                                            g$r$9848$1WS4nL)
                                                          (cons
                                                            (cons
                                                              g$lab$9887$1WS4nL
                                                              g$b$9889$1WS4nL)
                                                            g$mr$9849$1WS4nL)
                                                          g$lex*$9850$1WS4nL
                                                          g$rhs*$9851$1WS4nL
                                                          g$mod**$9852$1WS4nL
                                                          g$kwd*$9867$1WS4nL
                                                          g$exp*$9854$1WS4nL
                                                          g$rib$9855$1WS4nL
                                                          g$top?$9856$1WS4nL)))
                                                     (g$make-eval-transformer$7299$1WS4nL
                                                       g$expanded-rhs$9888$1WS4nL)))))
                                               (g$gen-define-label$7211$1WS4nL
                                                 g$id$9886$1WS4nL
                                                 g$rib$9855$1WS4nL)
                                               (g$expand-transformer$7590$1WS4nL
                                                 g$rhs$9885$1WS4nL
                                                 g$mr$9849$1WS4nL)))))
                                         g$rhs$9884$1WS4nL
                                         g$id$9883$1WS4nL))))
                                   (if (g$memv$4996$1WS4nL
                                         g$t$9868$1WS4nL
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$9890$1WS4nL)
                                         ((case-lambda
                                            ((g$ls/false$9891$1WS4nL)
                                             (if (if g$ls/false$9891$1WS4nL
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$9892$1WS4nL
                                                            g$xrhs*$9893$1WS4nL
                                                            g$xbody*$9894$1WS4nL)
                                                          (if (not (g$valid-bound-ids?$7272$1WS4nL
                                                                     g$xlhs*$9892$1WS4nL))
                                                            (g$syntax-violation$7656$1WS4nL
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$9857$1WS4nL)
                                                            (void))))
                                                       g$ls/false$9891$1WS4nL))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$9895$1WS4nL
                                                      g$xrhs*$9896$1WS4nL
                                                      g$xbody*$9897$1WS4nL)
                                                    ((case-lambda
                                                       ((g$xlab*$9898$1WS4nL)
                                                        ((case-lambda
                                                           ((g$xrib$9899$1WS4nL)
                                                            ((case-lambda
                                                               ((g$xb*$9900$1WS4nL)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$7589$1WS4nL
                                                                      (append
                                                                        (map (case-lambda
                                                                               ((g$x$9901$1WS4nL)
                                                                                (g$add-subst$7257$1WS4nL
                                                                                  g$xrib$9899$1WS4nL
                                                                                  g$x$9901$1WS4nL)))
                                                                             g$xbody*$9897$1WS4nL)
                                                                        (cdr g$e*$9847$1WS4nL))
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9898$1WS4nL
                                                                             g$xb*$9900$1WS4nL)
                                                                        g$r$9848$1WS4nL)
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9898$1WS4nL
                                                                             g$xb*$9900$1WS4nL)
                                                                        g$mr$9849$1WS4nL)
                                                                      g$lex*$9850$1WS4nL
                                                                      g$rhs*$9851$1WS4nL
                                                                      g$mod**$9852$1WS4nL
                                                                      g$kwd*$9867$1WS4nL
                                                                      g$exp*$9854$1WS4nL
                                                                      g$rib$9855$1WS4nL
                                                                      g$top?$9856$1WS4nL))))))
                                                             (map (case-lambda
                                                                    ((g$x$9902$1WS4nL)
                                                                     (g$make-eval-transformer$7299$1WS4nL
                                                                       (g$expand-transformer$7590$1WS4nL
                                                                         (if (eq? g$type$9866$1WS4nL
                                                                                  'let-syntax)
                                                                           g$x$9902$1WS4nL
                                                                           (g$add-subst$7257$1WS4nL
                                                                             g$xrib$9899$1WS4nL
                                                                             g$x$9902$1WS4nL))
                                                                         g$mr$9849$1WS4nL))))
                                                                  g$xrhs*$9896$1WS4nL))))
                                                         (g$make-full-rib$7235$1WS4nL
                                                           g$xlhs*$9895$1WS4nL
                                                           g$xlab*$9898$1WS4nL))))
                                                     (map g$gen-label$7208$1WS4nL
                                                          g$xlhs*$9895$1WS4nL))))
                                                 g$ls/false$9891$1WS4nL)
                                               (g$syntax-violation$7656$1WS4nL
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9890$1WS4nL))))
                                          (g$syntax-dispatch$7545$1WS4nL
                                            g$t$9890$1WS4nL
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$9857$1WS4nL)
                                     (if (g$memv$4996$1WS4nL
                                           g$t$9868$1WS4nL
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$9903$1WS4nL)
                                           ((case-lambda
                                              ((g$ls/false$9904$1WS4nL)
                                               (if g$ls/false$9904$1WS4nL
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$9905$1WS4nL)
                                                      (g$chi-body*$7589$1WS4nL
                                                        (append
                                                          g$x*$9905$1WS4nL
                                                          (cdr g$e*$9847$1WS4nL))
                                                        g$r$9848$1WS4nL
                                                        g$mr$9849$1WS4nL
                                                        g$lex*$9850$1WS4nL
                                                        g$rhs*$9851$1WS4nL
                                                        g$mod**$9852$1WS4nL
                                                        g$kwd*$9867$1WS4nL
                                                        g$exp*$9854$1WS4nL
                                                        g$rib$9855$1WS4nL
                                                        g$top?$9856$1WS4nL)))
                                                   g$ls/false$9904$1WS4nL)
                                                 (g$syntax-violation$7656$1WS4nL
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$9903$1WS4nL))))
                                            (g$syntax-dispatch$7545$1WS4nL
                                              g$t$9903$1WS4nL
                                              '(_ . each-any)))))
                                        g$e$9857$1WS4nL)
                                       (if (g$memv$4996$1WS4nL
                                             g$t$9868$1WS4nL
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7589$1WS4nL
                                           (cons
                                             (g$add-subst$7257$1WS4nL
                                               g$rib$9855$1WS4nL
                                               (g$chi-global-macro$7560$1WS4nL
                                                 g$value$9865$1WS4nL
                                                 g$e$9857$1WS4nL))
                                             (cdr g$e*$9847$1WS4nL))
                                           g$r$9848$1WS4nL
                                           g$mr$9849$1WS4nL
                                           g$lex*$9850$1WS4nL
                                           g$rhs*$9851$1WS4nL
                                           g$mod**$9852$1WS4nL
                                           g$kwd*$9867$1WS4nL
                                           g$exp*$9854$1WS4nL
                                           g$rib$9855$1WS4nL
                                           g$top?$9856$1WS4nL)
                                         (if (g$memv$4996$1WS4nL
                                               g$t$9868$1WS4nL
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7589$1WS4nL
                                             (cons
                                               (g$add-subst$7257$1WS4nL
                                                 g$rib$9855$1WS4nL
                                                 (g$chi-local-macro$7559$1WS4nL
                                                   g$value$9865$1WS4nL
                                                   g$e$9857$1WS4nL))
                                               (cdr g$e*$9847$1WS4nL))
                                             g$r$9848$1WS4nL
                                             g$mr$9849$1WS4nL
                                             g$lex*$9850$1WS4nL
                                             g$rhs*$9851$1WS4nL
                                             g$mod**$9852$1WS4nL
                                             g$kwd*$9867$1WS4nL
                                             g$exp*$9854$1WS4nL
                                             g$rib$9855$1WS4nL
                                             g$top?$9856$1WS4nL)
                                           (if (g$memv$4996$1WS4nL
                                                 g$t$9868$1WS4nL
                                                 '(macro macro!))
                                             (g$chi-body*$7589$1WS4nL
                                               (cons
                                                 (g$add-subst$7257$1WS4nL
                                                   g$rib$9855$1WS4nL
                                                   (g$chi-macro$7558$1WS4nL
                                                     g$value$9865$1WS4nL
                                                     g$e$9857$1WS4nL))
                                                 (cdr g$e*$9847$1WS4nL))
                                               g$r$9848$1WS4nL
                                               g$mr$9849$1WS4nL
                                               g$lex*$9850$1WS4nL
                                               g$rhs*$9851$1WS4nL
                                               g$mod**$9852$1WS4nL
                                               g$kwd*$9867$1WS4nL
                                               g$exp*$9854$1WS4nL
                                               g$rib$9855$1WS4nL
                                               g$top?$9856$1WS4nL)
                                             (if (g$memv$4996$1WS4nL
                                                   g$t$9868$1WS4nL
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7588$1WS4nL
                                                      g$e$9857$1WS4nL
                                                      g$r$9848$1WS4nL
                                                      g$mr$9849$1WS4nL
                                                      g$lex*$9850$1WS4nL
                                                      g$rhs*$9851$1WS4nL
                                                      g$mod**$9852$1WS4nL
                                                      g$kwd*$9867$1WS4nL)))
                                                 (case-lambda
                                                   ((g$lex*$9914$1WS4nL
                                                      g$rhs*$9915$1WS4nL
                                                      g$m-exp-id*$9916$1WS4nL
                                                      g$m-exp-lab*$9917$1WS4nL
                                                      g$r$9918$1WS4nL
                                                      g$mr$9919$1WS4nL
                                                      g$mod**$9920$1WS4nL
                                                      g$kwd*$9921$1WS4nL)
                                                    ((case-lambda
                                                       ((g$kwd*$9922$1WS4nL
                                                          g$mod**$9923$1WS4nL
                                                          g$mr$9924$1WS4nL
                                                          g$r$9925$1WS4nL
                                                          g$m-exp-lab*$9926$1WS4nL
                                                          g$m-exp-id*$9927$1WS4nL
                                                          g$rhs*$9928$1WS4nL
                                                          g$lex*$9929$1WS4nL)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$9930$1WS4nL
                                                                 g$lab$9931$1WS4nL)
                                                               (g$extend-rib!$7230$1WS4nL
                                                                 g$rib$9855$1WS4nL
                                                                 g$id$9930$1WS4nL
                                                                 g$lab$9931$1WS4nL)))
                                                            g$m-exp-id*$9927$1WS4nL
                                                            g$m-exp-lab*$9926$1WS4nL)
                                                          (g$chi-body*$7589$1WS4nL
                                                            (cdr g$e*$9847$1WS4nL)
                                                            g$r$9925$1WS4nL
                                                            g$mr$9924$1WS4nL
                                                            g$lex*$9929$1WS4nL
                                                            g$rhs*$9928$1WS4nL
                                                            g$mod**$9923$1WS4nL
                                                            g$kwd*$9922$1WS4nL
                                                            g$exp*$9854$1WS4nL
                                                            g$rib$9855$1WS4nL
                                                            g$top?$9856$1WS4nL))))
                                                     g$kwd*$9921$1WS4nL
                                                     g$mod**$9920$1WS4nL
                                                     g$mr$9919$1WS4nL
                                                     g$r$9918$1WS4nL
                                                     g$m-exp-lab*$9917$1WS4nL
                                                     g$m-exp-id*$9916$1WS4nL
                                                     g$rhs*$9915$1WS4nL
                                                     g$lex*$9914$1WS4nL))))
                                               (if (g$memv$4996$1WS4nL
                                                     g$t$9868$1WS4nL
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$7640$1WS4nL
                                                     (g$stx->datum$7278$1WS4nL
                                                       g$e$9857$1WS4nL))
                                                   (g$chi-body*$7589$1WS4nL
                                                     (cdr g$e*$9847$1WS4nL)
                                                     g$r$9848$1WS4nL
                                                     g$mr$9849$1WS4nL
                                                     g$lex*$9850$1WS4nL
                                                     g$rhs*$9851$1WS4nL
                                                     g$mod**$9852$1WS4nL
                                                     g$kwd*$9867$1WS4nL
                                                     g$exp*$9854$1WS4nL
                                                     g$rib$9855$1WS4nL
                                                     g$top?$9856$1WS4nL))
                                                 (if (g$memv$4996$1WS4nL
                                                       g$t$9868$1WS4nL
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$9932$1WS4nL)
                                                       ((case-lambda
                                                          ((g$ls/false$9933$1WS4nL)
                                                           (if g$ls/false$9933$1WS4nL
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$9934$1WS4nL)
                                                                  (g$chi-body*$7589$1WS4nL
                                                                    (cdr g$e*$9847$1WS4nL)
                                                                    g$r$9848$1WS4nL
                                                                    g$mr$9849$1WS4nL
                                                                    g$lex*$9850$1WS4nL
                                                                    g$rhs*$9851$1WS4nL
                                                                    g$mod**$9852$1WS4nL
                                                                    g$kwd*$9867$1WS4nL
                                                                    (append
                                                                      g$exp-decl*$9934$1WS4nL
                                                                      g$exp*$9854$1WS4nL)
                                                                    g$rib$9855$1WS4nL
                                                                    g$top?$9856$1WS4nL)))
                                                               g$ls/false$9933$1WS4nL)
                                                             (g$syntax-violation$7656$1WS4nL
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$9932$1WS4nL))))
                                                        (g$syntax-dispatch$7545$1WS4nL
                                                          g$t$9932$1WS4nL
                                                          '(_ . each-any)))))
                                                    g$e$9857$1WS4nL)
                                                   (if (g$memv$4996$1WS4nL
                                                         g$t$9868$1WS4nL
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$9935$1WS4nL
                                                                     (case-lambda
                                                                       ((g$e$9977$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$t$9978$1WS4nL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9979$1WS4nL)
                                                                                (if (if g$ls/false$9979$1WS4nL
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9980$1WS4nL)
                                                                                             (g$id?$7267$1WS4nL
                                                                                               g$id$9980$1WS4nL)))
                                                                                          g$ls/false$9979$1WS4nL))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9981$1WS4nL)
                                                                                       '#t))
                                                                                    g$ls/false$9979$1WS4nL)
                                                                                  ((case-lambda
                                                                                     ((g$t$9982$1WS4nL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9983$1WS4nL)
                                                                                          (if g$ls/false$9983$1WS4nL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$9984$1WS4nL)
                                                                                                 '#f))
                                                                                              g$ls/false$9983$1WS4nL)
                                                                                            ((case-lambda
                                                                                               ((g$t$9985$1WS4nL)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$9986$1WS4nL)
                                                                                                    (if g$ls/false$9986$1WS4nL
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$7656$1WS4nL
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$9977$1WS4nL)))
                                                                                                        g$ls/false$9986$1WS4nL)
                                                                                                      (g$syntax-violation$7656$1WS4nL
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$9985$1WS4nL))))
                                                                                                 (g$syntax-dispatch$7545$1WS4nL
                                                                                                   g$t$9985$1WS4nL
                                                                                                   '_))))
                                                                                             g$t$9982$1WS4nL))))
                                                                                       (g$syntax-dispatch$7545$1WS4nL
                                                                                         g$t$9982$1WS4nL
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$9978$1WS4nL))))
                                                                             (g$syntax-dispatch$7545$1WS4nL
                                                                               g$t$9978$1WS4nL
                                                                               '(_ any)))))
                                                                         g$e$9977$1WS4nL))))
                                                                   (g$module-import$9936$1WS4nL
                                                                     (case-lambda
                                                                       ((g$e$9960$1WS4nL
                                                                          g$r$9961$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$t$9962$1WS4nL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9963$1WS4nL)
                                                                                (if (if g$ls/false$9963$1WS4nL
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9964$1WS4nL)
                                                                                             (g$id?$7267$1WS4nL
                                                                                               g$id$9964$1WS4nL)))
                                                                                          g$ls/false$9963$1WS4nL))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9965$1WS4nL)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7287$1WS4nL
                                                                                              g$id$9965$1WS4nL
                                                                                              g$r$9961$1WS4nL)))
                                                                                         (case-lambda
                                                                                           ((g$type$9969$1WS4nL
                                                                                              g$value$9970$1WS4nL
                                                                                              g$kwd$9971$1WS4nL)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$9972$1WS4nL
                                                                                                  g$value$9973$1WS4nL
                                                                                                  g$type$9974$1WS4nL)
                                                                                                ((case-lambda
                                                                                                   ((g$t$9975$1WS4nL)
                                                                                                    (if (g$memv$4996$1WS4nL
                                                                                                          g$t$9975$1WS4nL
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$9976$1WS4nL)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7587$1WS4nL
                                                                                                              g$iface$9976$1WS4nL
                                                                                                              g$id$9965$1WS4nL)
                                                                                                            (g$module-interface-exp-lab-vec$7583$1WS4nL
                                                                                                              g$iface$9976$1WS4nL))))
                                                                                                       g$value$9973$1WS4nL)
                                                                                                      (g$syntax-violation$7656$1WS4nL
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$9960$1WS4nL))))
                                                                                                 g$type$9974$1WS4nL)))
                                                                                             g$kwd$9971$1WS4nL
                                                                                             g$value$9970$1WS4nL
                                                                                             g$type$9969$1WS4nL))))))
                                                                                    g$ls/false$9963$1WS4nL)
                                                                                  (g$syntax-violation$7656$1WS4nL
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$9962$1WS4nL))))
                                                                             (g$syntax-dispatch$7545$1WS4nL
                                                                               g$t$9962$1WS4nL
                                                                               '(_ any)))))
                                                                         g$e$9960$1WS4nL))))
                                                                   (g$library-import$9937$1WS4nL
                                                                     (case-lambda
                                                                       ((g$e$9946$1WS4nL)
                                                                        ((case-lambda
                                                                           ((g$t$9947$1WS4nL)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9948$1WS4nL)
                                                                                (if g$ls/false$9948$1WS4nL
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$9949$1WS4nL
                                                                                         g$imp*$9950$1WS4nL)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$7594$1WS4nL
                                                                                              (g$syntax->datum$7659$1WS4nL
                                                                                                g$imp*$9950$1WS4nL))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$9953$1WS4nL
                                                                                              g$subst-labels$9954$1WS4nL)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$9955$1WS4nL
                                                                                                  g$subst-names$9956$1WS4nL)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$9957$1WS4nL)
                                                                                                       (g$datum->stx$7250$1WS4nL
                                                                                                         g$ctxt$9949$1WS4nL
                                                                                                         g$name$9957$1WS4nL)))
                                                                                                    g$subst-names$9956$1WS4nL)
                                                                                                  g$subst-labels$9955$1WS4nL)))
                                                                                             g$subst-labels$9954$1WS4nL
                                                                                             g$subst-names$9953$1WS4nL))))))
                                                                                    g$ls/false$9948$1WS4nL)
                                                                                  ((case-lambda
                                                                                     ((g$t$9958$1WS4nL)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9959$1WS4nL)
                                                                                          (if g$ls/false$9959$1WS4nL
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7656$1WS4nL
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$9946$1WS4nL)))
                                                                                              g$ls/false$9959$1WS4nL)
                                                                                            (g$syntax-violation$7656$1WS4nL
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9958$1WS4nL))))
                                                                                       (g$syntax-dispatch$7545$1WS4nL
                                                                                         g$t$9958$1WS4nL
                                                                                         '_))))
                                                                                   g$t$9947$1WS4nL))))
                                                                             (g$syntax-dispatch$7545$1WS4nL
                                                                               g$t$9947$1WS4nL
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$9946$1WS4nL)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$9935$1WS4nL
                                                                        g$e$9857$1WS4nL)
                                                                    (g$module-import$9936$1WS4nL
                                                                      g$e$9857$1WS4nL
                                                                      g$r$9848$1WS4nL)
                                                                    (g$library-import$9937$1WS4nL
                                                                      g$e$9857$1WS4nL))))
                                                               (case-lambda
                                                                 ((g$id*$9940$1WS4nL
                                                                    g$lab*$9941$1WS4nL)
                                                                  ((case-lambda
                                                                     ((g$lab*$9942$1WS4nL
                                                                        g$id*$9943$1WS4nL)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$9944$1WS4nL
                                                                             g$lab$9945$1WS4nL)
                                                                           (g$extend-rib!$7230$1WS4nL
                                                                             g$rib$9855$1WS4nL
                                                                             g$id$9944$1WS4nL
                                                                             g$lab$9945$1WS4nL)))
                                                                        g$id*$9943$1WS4nL
                                                                        g$lab*$9942$1WS4nL)))
                                                                   g$lab*$9941$1WS4nL
                                                                   g$id*$9940$1WS4nL))))
                                                             (g$chi-body*$7589$1WS4nL
                                                               (cdr g$e*$9847$1WS4nL)
                                                               g$r$9848$1WS4nL
                                                               g$mr$9849$1WS4nL
                                                               g$lex*$9850$1WS4nL
                                                               g$rhs*$9851$1WS4nL
                                                               g$mod**$9852$1WS4nL
                                                               g$kwd*$9867$1WS4nL
                                                               g$exp*$9854$1WS4nL
                                                               g$rib$9855$1WS4nL
                                                               g$top?$9856$1WS4nL))))))
                                                     (if g$top?$9856$1WS4nL
                                                       (g$chi-body*$7589$1WS4nL
                                                         (cdr g$e*$9847$1WS4nL)
                                                         g$r$9848$1WS4nL
                                                         g$mr$9849$1WS4nL
                                                         (cons
                                                           (g$gen-lexical$7206$1WS4nL
                                                             'dummy)
                                                           g$lex*$9850$1WS4nL)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$9857$1WS4nL)
                                                           g$rhs*$9851$1WS4nL)
                                                         g$mod**$9852$1WS4nL
                                                         g$kwd*$9867$1WS4nL
                                                         g$exp*$9854$1WS4nL
                                                         g$rib$9855$1WS4nL
                                                         g$top?$9856$1WS4nL)
                                                       (values
                                                         g$e*$9847$1WS4nL
                                                         g$r$9848$1WS4nL
                                                         g$mr$9849$1WS4nL
                                                         g$lex*$9850$1WS4nL
                                                         g$rhs*$9851$1WS4nL
                                                         g$mod**$9852$1WS4nL
                                                         g$kwd*$9867$1WS4nL
                                                         g$exp*$9854$1WS4nL)))))))))))))))
                            g$type$9866$1WS4nL)))
                        (if (g$id?$7267$1WS4nL g$kwd$9864$1WS4nL)
                          (cons g$kwd$9864$1WS4nL g$kwd*$9853$1WS4nL)
                          g$kwd*$9853$1WS4nL))))
                    g$kwd$9863$1WS4nL
                    g$value$9862$1WS4nL
                    g$type$9861$1WS4nL))))))
           (car g$e*$9847$1WS4nL))))))
   (g$expand-transformer$7590$1WS4nL
     g$expand-transformer$11078$1WS4nL
     (case-lambda
       ((g$expr$9987$1WS4nL g$r$9988$1WS4nL)
        ((case-lambda
           ((g$rtc$9989$1WS4nL)
            ((case-lambda
               ((g$expanded-rhs$9990$1WS4nL)
                (begin
                  (for-each
                    ((case-lambda
                       ((g$mark-visit$9991$1WS4nL)
                        (case-lambda
                          ((g$x$9992$1WS4nL)
                           (begin
                             (g$invoke-library$7077$1WS4nL g$x$9992$1WS4nL)
                             (g$mark-visit$9991$1WS4nL g$x$9992$1WS4nL))))))
                     (g$vis-collector$7598$1WS4nL))
                    (g$rtc$9989$1WS4nL))
                  g$expanded-rhs$9990$1WS4nL)))
             ((case-lambda
                ((g$inv-collector$9997$1WS4nL
                   g$vis-collector$9998$1WS4nL
                   g$inv-collector$9999$1WS4nL
                   g$vis-collector$10000$1WS4nL)
                 ((case-lambda
                    ((g$swap$10001$1WS4nL)
                     (dynamic-wind
                       g$swap$10001$1WS4nL
                       (case-lambda
                         (()
                          (g$chi-expr$7563$1WS4nL
                            g$expr$9987$1WS4nL
                            g$r$9988$1WS4nL
                            g$r$9988$1WS4nL)))
                       g$swap$10001$1WS4nL)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10002$1WS4nL)
                           (begin
                             (g$inv-collector$9997$1WS4nL
                               g$inv-collector$9999$1WS4nL)
                             (set! g$inv-collector$9999$1WS4nL
                               g$t$10002$1WS4nL))))
                        (g$inv-collector$9997$1WS4nL))
                       ((case-lambda
                          ((g$t$10003$1WS4nL)
                           (begin
                             (g$vis-collector$9998$1WS4nL
                               g$vis-collector$10000$1WS4nL)
                             (set! g$vis-collector$10000$1WS4nL
                               g$t$10003$1WS4nL))))
                        (g$vis-collector$9998$1WS4nL))))))))
              g$inv-collector$7597$1WS4nL
              g$vis-collector$7598$1WS4nL
              g$rtc$9989$1WS4nL
              (case-lambda ((g$x$10004$1WS4nL) (values)))))))
         (g$make-collector$7596$1WS4nL)))))
   (g$parse-exports$7591$1WS4nL
     g$parse-exports$11079$1WS4nL
     (case-lambda
       ((g$exp*$10005$1WS4nL)
        ((letrec ((g$f$10006$1WS4nL
                    (case-lambda
                      ((g$exp*$10007$1WS4nL
                         g$int*$10008$1WS4nL
                         g$ext*$10009$1WS4nL)
                       (if (null? g$exp*$10007$1WS4nL)
                         (begin
                           (if (not (g$valid-bound-ids?$7272$1WS4nL
                                      g$ext*$10009$1WS4nL))
                             (g$syntax-violation$7656$1WS4nL
                               'export
                               '"invalid exports"
                               (g$find-dups$7573$1WS4nL g$ext*$10009$1WS4nL))
                             (void))
                           (values
                             (map g$syntax->datum$7659$1WS4nL
                                  g$ext*$10009$1WS4nL)
                             g$int*$10008$1WS4nL))
                         ((case-lambda
                            ((g$t$10010$1WS4nL)
                             ((case-lambda
                                ((g$ls/false$10011$1WS4nL)
                                 (if g$ls/false$10011$1WS4nL
                                   (apply
                                     (case-lambda
                                       ((g$rename$10012$1WS4nL
                                          g$i*$10013$1WS4nL
                                          g$e*$10014$1WS4nL)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$7659$1WS4nL
                                                              g$rename$10012$1WS4nL)
                                                            'rename)
                                                     (if (g$for-all$5001$1WS4nL
                                                           g$id?$7267$1WS4nL
                                                           g$i*$10013$1WS4nL)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5001$1WS4nL
                                                           g$id?$7267$1WS4nL
                                                           g$e*$10014$1WS4nL))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$7656$1WS4nL
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10007$1WS4nL))
                                            (void))
                                          (g$f$10006$1WS4nL
                                            (cdr g$exp*$10007$1WS4nL)
                                            (append
                                              g$i*$10013$1WS4nL
                                              g$int*$10008$1WS4nL)
                                            (append
                                              g$e*$10014$1WS4nL
                                              g$ext*$10009$1WS4nL)))))
                                     g$ls/false$10011$1WS4nL)
                                   ((case-lambda
                                      ((g$t$10015$1WS4nL)
                                       ((case-lambda
                                          ((g$ls/false$10016$1WS4nL)
                                           (if g$ls/false$10016$1WS4nL
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10017$1WS4nL)
                                                  (begin
                                                    (if (not (g$id?$7267$1WS4nL
                                                               g$ie$10017$1WS4nL))
                                                      (g$syntax-violation$7656$1WS4nL
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10017$1WS4nL)
                                                      (void))
                                                    (g$f$10006$1WS4nL
                                                      (cdr g$exp*$10007$1WS4nL)
                                                      (cons
                                                        g$ie$10017$1WS4nL
                                                        g$int*$10008$1WS4nL)
                                                      (cons
                                                        g$ie$10017$1WS4nL
                                                        g$ext*$10009$1WS4nL)))))
                                               g$ls/false$10016$1WS4nL)
                                             (g$syntax-violation$7656$1WS4nL
                                               '#f
                                               '"invalid syntax"
                                               g$t$10015$1WS4nL))))
                                        (g$syntax-dispatch$7545$1WS4nL
                                          g$t$10015$1WS4nL
                                          'any))))
                                    g$t$10010$1WS4nL))))
                              (g$syntax-dispatch$7545$1WS4nL
                                g$t$10010$1WS4nL
                                '(any . #(each (any any)))))))
                          (car g$exp*$10007$1WS4nL)))))))
           g$f$10006$1WS4nL)
         g$exp*$10005$1WS4nL
         '()
         '()))))
   (g$parse-library-name$7592$1WS4nL
     g$parse-library-name$11080$1WS4nL
     (case-lambda
       ((g$spec$10018$1WS4nL)
        (letrec* ((g$parse$10019$1WS4nL
                    (case-lambda
                      ((g$x$10026$1WS4nL)
                       ((case-lambda
                          ((g$t$10027$1WS4nL)
                           ((case-lambda
                              ((g$ls/false$10028$1WS4nL)
                               (if (if g$ls/false$10028$1WS4nL
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10029$1WS4nL)
                                            (g$for-all$5001$1WS4nL
                                              (case-lambda
                                                ((g$x$10030$1WS4nL)
                                                 ((case-lambda
                                                    ((g$x$10031$1WS4nL)
                                                     (if (integer?
                                                           g$x$10031$1WS4nL)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10031$1WS4nL))
                                                       '#f)))
                                                  (g$syntax->datum$7659$1WS4nL
                                                    g$x$10030$1WS4nL))))
                                              g$v*$10029$1WS4nL)))
                                         g$ls/false$10028$1WS4nL))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10032$1WS4nL)
                                      (values
                                        '()
                                        (map g$syntax->datum$7659$1WS4nL
                                             g$v*$10032$1WS4nL))))
                                   g$ls/false$10028$1WS4nL)
                                 ((case-lambda
                                    ((g$t$10033$1WS4nL)
                                     ((case-lambda
                                        ((g$ls/false$10034$1WS4nL)
                                         (if (if g$ls/false$10034$1WS4nL
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10035$1WS4nL
                                                        g$rest$10036$1WS4nL)
                                                      (symbol?
                                                        (g$syntax->datum$7659$1WS4nL
                                                          g$x$10035$1WS4nL))))
                                                   g$ls/false$10034$1WS4nL))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10037$1WS4nL
                                                  g$rest$10038$1WS4nL)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10019$1WS4nL
                                                       g$rest$10038$1WS4nL)))
                                                  (case-lambda
                                                    ((g$x*$10041$1WS4nL
                                                       g$v*$10042$1WS4nL)
                                                     ((case-lambda
                                                        ((g$v*$10043$1WS4nL
                                                           g$x*$10044$1WS4nL)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$7659$1WS4nL
                                                               g$x$10037$1WS4nL)
                                                             g$x*$10044$1WS4nL)
                                                           g$v*$10043$1WS4nL)))
                                                      g$v*$10042$1WS4nL
                                                      g$x*$10041$1WS4nL))))))
                                             g$ls/false$10034$1WS4nL)
                                           ((case-lambda
                                              ((g$t$10045$1WS4nL)
                                               ((case-lambda
                                                  ((g$ls/false$10046$1WS4nL)
                                                   (if g$ls/false$10046$1WS4nL
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10046$1WS4nL)
                                                     ((case-lambda
                                                        ((g$t$10047$1WS4nL)
                                                         ((case-lambda
                                                            ((g$ls/false$10048$1WS4nL)
                                                             (if g$ls/false$10048$1WS4nL
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7656$1WS4nL
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10018$1WS4nL)))
                                                                 g$ls/false$10048$1WS4nL)
                                                               (g$syntax-violation$7656$1WS4nL
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10047$1WS4nL))))
                                                          (g$syntax-dispatch$7545$1WS4nL
                                                            g$t$10047$1WS4nL
                                                            '_))))
                                                      g$t$10045$1WS4nL))))
                                                (g$syntax-dispatch$7545$1WS4nL
                                                  g$t$10045$1WS4nL
                                                  '()))))
                                            g$t$10033$1WS4nL))))
                                      (g$syntax-dispatch$7545$1WS4nL
                                        g$t$10033$1WS4nL
                                        '(any . any)))))
                                  g$t$10027$1WS4nL))))
                            (g$syntax-dispatch$7545$1WS4nL
                              g$t$10027$1WS4nL
                              '(each-any)))))
                        g$x$10026$1WS4nL)))))
          (call-with-values
            (case-lambda (() (g$parse$10019$1WS4nL g$spec$10018$1WS4nL)))
            (case-lambda
              ((g$name*$10022$1WS4nL g$ver*$10023$1WS4nL)
               ((case-lambda
                  ((g$ver*$10024$1WS4nL g$name*$10025$1WS4nL)
                   (begin
                     (if (null? g$name*$10025$1WS4nL)
                       (g$syntax-violation$7656$1WS4nL
                         '#f
                         '"empty library name"
                         g$spec$10018$1WS4nL)
                       (void))
                     (values g$name*$10025$1WS4nL g$ver*$10024$1WS4nL))))
                g$ver*$10023$1WS4nL
                g$name*$10022$1WS4nL))))))))
   (g$parse-library$7593$1WS4nL
     g$parse-library$11081$1WS4nL
     (case-lambda
       ((g$e$10049$1WS4nL)
        ((case-lambda
           ((g$t$10050$1WS4nL)
            ((case-lambda
               ((g$ls/false$10051$1WS4nL)
                (if (if g$ls/false$10051$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10052$1WS4nL
                               g$name*$10053$1WS4nL
                               g$export$10054$1WS4nL
                               g$exp*$10055$1WS4nL
                               g$import$10056$1WS4nL
                               g$imp*$10057$1WS4nL
                               g$b*$10058$1WS4nL)
                             (if (eq? (g$syntax->datum$7659$1WS4nL
                                        g$export$10054$1WS4nL)
                                      'export)
                               (if (eq? (g$syntax->datum$7659$1WS4nL
                                          g$import$10056$1WS4nL)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$7659$1WS4nL
                                          g$library$10052$1WS4nL)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10051$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10059$1WS4nL
                         g$name*$10060$1WS4nL
                         g$export$10061$1WS4nL
                         g$exp*$10062$1WS4nL
                         g$import$10063$1WS4nL
                         g$imp*$10064$1WS4nL
                         g$b*$10065$1WS4nL)
                       (values
                         g$name*$10060$1WS4nL
                         g$exp*$10062$1WS4nL
                         g$imp*$10064$1WS4nL
                         g$b*$10065$1WS4nL)))
                    g$ls/false$10051$1WS4nL)
                  ((case-lambda
                     ((g$t$10066$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$10067$1WS4nL)
                          (if g$ls/false$10067$1WS4nL
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7656$1WS4nL
                                   '#f
                                   '"malformed library"
                                   g$e$10049$1WS4nL)))
                              g$ls/false$10067$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$10066$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL g$t$10066$1WS4nL '_))))
                   g$t$10050$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$10050$1WS4nL
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10049$1WS4nL))))
   (g$parse-import-spec*$7594$1WS4nL
     g$parse-import-spec*$11082$1WS4nL
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10068$1WS4nL
                     (case-lambda
                       ((g$x$10329$1WS4nL)
                        (symbol?
                          (g$syntax->datum$7659$1WS4nL g$x$10329$1WS4nL)))))
                   (g$dup-error$10069$1WS4nL
                     (case-lambda
                       ((g$name$10328$1WS4nL)
                        (g$syntax-violation$7656$1WS4nL
                          'import
                          '"two imports with different bindings"
                          g$name$10328$1WS4nL))))
                   (g$merge-substs$10070$1WS4nL
                     (case-lambda
                       ((g$s$10319$1WS4nL g$subst$10320$1WS4nL)
                        (letrec* ((g$insert-to-subst$10321$1WS4nL
                                    (case-lambda
                                      ((g$a$10322$1WS4nL g$subst$10323$1WS4nL)
                                       ((case-lambda
                                          ((g$name$10324$1WS4nL
                                             g$label$10325$1WS4nL)
                                           ((case-lambda
                                              ((g$t$10326$1WS4nL)
                                               (if g$t$10326$1WS4nL
                                                 ((case-lambda
                                                    ((g$x$10327$1WS4nL)
                                                     (if (eq? (cdr g$x$10327$1WS4nL)
                                                              g$label$10325$1WS4nL)
                                                       g$subst$10323$1WS4nL
                                                       (g$dup-error$10069$1WS4nL
                                                         g$name$10324$1WS4nL))))
                                                  g$t$10326$1WS4nL)
                                                 (cons
                                                   g$a$10322$1WS4nL
                                                   g$subst$10323$1WS4nL))))
                                            (g$assq$4991$1WS4nL
                                              g$name$10324$1WS4nL
                                              g$subst$10323$1WS4nL))))
                                        (car g$a$10322$1WS4nL)
                                        (cdr g$a$10322$1WS4nL))))))
                          (if (null? g$s$10319$1WS4nL)
                            g$subst$10320$1WS4nL
                            (g$insert-to-subst$10321$1WS4nL
                              (car g$s$10319$1WS4nL)
                              (g$merge-substs$10070$1WS4nL
                                (cdr g$s$10319$1WS4nL)
                                g$subst$10320$1WS4nL)))))))
                   (g$exclude*$10071$1WS4nL
                     (case-lambda
                       ((g$sym*$10295$1WS4nL g$subst$10296$1WS4nL)
                        (letrec* ((g$exclude$10297$1WS4nL
                                    (case-lambda
                                      ((g$sym$10310$1WS4nL g$subst$10311$1WS4nL)
                                       (if (null? g$subst$10311$1WS4nL)
                                         (g$syntax-violation$7656$1WS4nL
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10310$1WS4nL)
                                         (if (eq? g$sym$10310$1WS4nL
                                                  (g$caar$5164$1WS4nL
                                                    g$subst$10311$1WS4nL))
                                           (values
                                             (g$cdar$5166$1WS4nL
                                               g$subst$10311$1WS4nL)
                                             (cdr g$subst$10311$1WS4nL))
                                           ((case-lambda
                                              ((g$a$10312$1WS4nL)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10297$1WS4nL
                                                      g$sym$10310$1WS4nL
                                                      (cdr g$subst$10311$1WS4nL))))
                                                 (case-lambda
                                                   ((g$old$10315$1WS4nL
                                                      g$subst$10316$1WS4nL)
                                                    ((case-lambda
                                                       ((g$subst$10317$1WS4nL
                                                          g$old$10318$1WS4nL)
                                                        (values
                                                          g$old$10318$1WS4nL
                                                          (cons
                                                            g$a$10312$1WS4nL
                                                            g$subst$10317$1WS4nL))))
                                                     g$subst$10316$1WS4nL
                                                     g$old$10315$1WS4nL))))))
                                            (car g$subst$10311$1WS4nL))))))))
                          (if (null? g$sym*$10295$1WS4nL)
                            (values '() g$subst$10296$1WS4nL)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10297$1WS4nL
                                   (car g$sym*$10295$1WS4nL)
                                   g$subst$10296$1WS4nL)))
                              (case-lambda
                                ((g$old$10300$1WS4nL g$subst$10301$1WS4nL)
                                 ((case-lambda
                                    ((g$subst$10302$1WS4nL g$old$10303$1WS4nL)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10071$1WS4nL
                                            (cdr g$sym*$10295$1WS4nL)
                                            g$subst$10302$1WS4nL)))
                                       (case-lambda
                                         ((g$old*$10306$1WS4nL
                                            g$subst$10307$1WS4nL)
                                          ((case-lambda
                                             ((g$subst$10308$1WS4nL
                                                g$old*$10309$1WS4nL)
                                              (values
                                                (cons
                                                  g$old$10303$1WS4nL
                                                  g$old*$10309$1WS4nL)
                                                g$subst$10308$1WS4nL)))
                                           g$subst$10307$1WS4nL
                                           g$old*$10306$1WS4nL))))))
                                  g$subst$10301$1WS4nL
                                  g$old$10300$1WS4nL)))))))))
                   (g$find*$10072$1WS4nL
                     (case-lambda
                       ((g$sym*$10291$1WS4nL g$subst$10292$1WS4nL)
                        (map (case-lambda
                               ((g$x$10293$1WS4nL)
                                ((case-lambda
                                   ((g$t$10294$1WS4nL)
                                    (if g$t$10294$1WS4nL
                                      (cdr g$t$10294$1WS4nL)
                                      (g$syntax-violation$7656$1WS4nL
                                        'import
                                        '"cannot find identifier"
                                        g$x$10293$1WS4nL))))
                                 (g$assq$4991$1WS4nL
                                   g$x$10293$1WS4nL
                                   g$subst$10292$1WS4nL))))
                             g$sym*$10291$1WS4nL))))
                   (g$rem*$10073$1WS4nL
                     (case-lambda
                       ((g$sym*$10287$1WS4nL g$subst$10288$1WS4nL)
                        ((letrec ((g$f$10289$1WS4nL
                                    (case-lambda
                                      ((g$subst$10290$1WS4nL)
                                       (if (null? g$subst$10290$1WS4nL)
                                         '()
                                         (if (g$memq$4995$1WS4nL
                                               (g$caar$5164$1WS4nL
                                                 g$subst$10290$1WS4nL)
                                               g$sym*$10287$1WS4nL)
                                           (g$f$10289$1WS4nL
                                             (cdr g$subst$10290$1WS4nL))
                                           (cons
                                             (car g$subst$10290$1WS4nL)
                                             (g$f$10289$1WS4nL
                                               (cdr g$subst$10290$1WS4nL)))))))))
                           g$f$10289$1WS4nL)
                         g$subst$10288$1WS4nL))))
                   (g$remove-dups$10074$1WS4nL
                     (case-lambda
                       ((g$ls$10286$1WS4nL)
                        (if (null? g$ls$10286$1WS4nL)
                          '()
                          (if (g$memq$4995$1WS4nL
                                (car g$ls$10286$1WS4nL)
                                (cdr g$ls$10286$1WS4nL))
                            (g$remove-dups$10074$1WS4nL (cdr g$ls$10286$1WS4nL))
                            (cons
                              (car g$ls$10286$1WS4nL)
                              (g$remove-dups$10074$1WS4nL
                                (cdr g$ls$10286$1WS4nL))))))))
                   (g$parse-library-name$10075$1WS4nL
                     (case-lambda
                       ((g$spec$10170$1WS4nL)
                        (letrec* ((g$subversion?$10171$1WS4nL
                                    (case-lambda
                                      ((g$x$10284$1WS4nL)
                                       ((case-lambda
                                          ((g$x$10285$1WS4nL)
                                           (if (integer? g$x$10285$1WS4nL)
                                             (if (exact? g$x$10285$1WS4nL)
                                               (begin
                                                 '#f
                                                 (>= g$x$10285$1WS4nL '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$7659$1WS4nL
                                          g$x$10284$1WS4nL)))))
                                  (g$subversion-pred$10172$1WS4nL
                                    (case-lambda
                                      ((g$x*$10236$1WS4nL)
                                       ((case-lambda
                                          ((g$t$10237$1WS4nL)
                                           ((case-lambda
                                              ((g$ls/false$10238$1WS4nL)
                                               (if (if g$ls/false$10238$1WS4nL
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10239$1WS4nL)
                                                            (g$subversion?$10171$1WS4nL
                                                              g$n$10239$1WS4nL)))
                                                         g$ls/false$10238$1WS4nL))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10240$1WS4nL)
                                                      (case-lambda
                                                        ((g$x$10241$1WS4nL)
                                                         (= g$x$10241$1WS4nL
                                                            (g$syntax->datum$7659$1WS4nL
                                                              g$n$10240$1WS4nL))))))
                                                   g$ls/false$10238$1WS4nL)
                                                 ((case-lambda
                                                    ((g$t$10242$1WS4nL)
                                                     ((case-lambda
                                                        ((g$ls/false$10243$1WS4nL)
                                                         (if (if g$ls/false$10243$1WS4nL
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10244$1WS4nL
                                                                        g$sub*$10245$1WS4nL)
                                                                      (eq? (g$syntax->datum$7659$1WS4nL
                                                                             g$p?$10244$1WS4nL)
                                                                           'and)))
                                                                   g$ls/false$10243$1WS4nL))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10246$1WS4nL
                                                                  g$sub*$10247$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$p*$10248$1WS4nL)
                                                                    (case-lambda
                                                                      ((g$x$10249$1WS4nL)
                                                                       (g$for-all$5001$1WS4nL
                                                                         (case-lambda
                                                                           ((g$p$10250$1WS4nL)
                                                                            (g$p$10250$1WS4nL
                                                                              g$x$10249$1WS4nL)))
                                                                         g$p*$10248$1WS4nL)))))
                                                                 (map g$subversion-pred$10172$1WS4nL
                                                                      g$sub*$10247$1WS4nL))))
                                                             g$ls/false$10243$1WS4nL)
                                                           ((case-lambda
                                                              ((g$t$10251$1WS4nL)
                                                               ((case-lambda
                                                                  ((g$ls/false$10252$1WS4nL)
                                                                   (if (if g$ls/false$10252$1WS4nL
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10253$1WS4nL
                                                                                  g$sub*$10254$1WS4nL)
                                                                                (eq? (g$syntax->datum$7659$1WS4nL
                                                                                       g$p?$10253$1WS4nL)
                                                                                     'or)))
                                                                             g$ls/false$10252$1WS4nL))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10255$1WS4nL
                                                                            g$sub*$10256$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$p*$10257$1WS4nL)
                                                                              (case-lambda
                                                                                ((g$x$10258$1WS4nL)
                                                                                 (g$exists$5002$1WS4nL
                                                                                   (case-lambda
                                                                                     ((g$p$10259$1WS4nL)
                                                                                      (g$p$10259$1WS4nL
                                                                                        g$x$10258$1WS4nL)))
                                                                                   g$p*$10257$1WS4nL)))))
                                                                           (map g$subversion-pred$10172$1WS4nL
                                                                                g$sub*$10256$1WS4nL))))
                                                                       g$ls/false$10252$1WS4nL)
                                                                     ((case-lambda
                                                                        ((g$t$10260$1WS4nL)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10261$1WS4nL)
                                                                             (if (if g$ls/false$10261$1WS4nL
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10262$1WS4nL
                                                                                            g$sub$10263$1WS4nL)
                                                                                          (eq? (g$syntax->datum$7659$1WS4nL
                                                                                                 g$p?$10262$1WS4nL)
                                                                                               'not)))
                                                                                       g$ls/false$10261$1WS4nL))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10264$1WS4nL
                                                                                      g$sub$10265$1WS4nL)
                                                                                    ((case-lambda
                                                                                       ((g$p$10266$1WS4nL)
                                                                                        (case-lambda
                                                                                          ((g$x$10267$1WS4nL)
                                                                                           (not (g$p$10266$1WS4nL
                                                                                                  g$x$10267$1WS4nL))))))
                                                                                     (g$subversion-pred$10172$1WS4nL
                                                                                       g$sub$10265$1WS4nL))))
                                                                                 g$ls/false$10261$1WS4nL)
                                                                               ((case-lambda
                                                                                  ((g$t$10268$1WS4nL)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10269$1WS4nL)
                                                                                       (if (if g$ls/false$10269$1WS4nL
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10270$1WS4nL
                                                                                                      g$n$10271$1WS4nL)
                                                                                                    (if (eq? (g$syntax->datum$7659$1WS4nL
                                                                                                               g$p?$10270$1WS4nL)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10171$1WS4nL
                                                                                                          g$n$10271$1WS4nL))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10269$1WS4nL))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10272$1WS4nL
                                                                                                g$n$10273$1WS4nL)
                                                                                              (case-lambda
                                                                                                ((g$x$10274$1WS4nL)
                                                                                                 (<= g$x$10274$1WS4nL
                                                                                                     (g$syntax->datum$7659$1WS4nL
                                                                                                       g$n$10273$1WS4nL))))))
                                                                                           g$ls/false$10269$1WS4nL)
                                                                                         ((case-lambda
                                                                                            ((g$t$10275$1WS4nL)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10276$1WS4nL)
                                                                                                 (if (if g$ls/false$10276$1WS4nL
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10277$1WS4nL
                                                                                                                g$n$10278$1WS4nL)
                                                                                                              (if (eq? (g$syntax->datum$7659$1WS4nL
                                                                                                                         g$p?$10277$1WS4nL)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10171$1WS4nL
                                                                                                                    g$n$10278$1WS4nL))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10276$1WS4nL))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10279$1WS4nL
                                                                                                          g$n$10280$1WS4nL)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10281$1WS4nL)
                                                                                                           (>= g$x$10281$1WS4nL
                                                                                                               (g$syntax->datum$7659$1WS4nL
                                                                                                                 g$n$10280$1WS4nL))))))
                                                                                                     g$ls/false$10276$1WS4nL)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10282$1WS4nL)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10283$1WS4nL)
                                                                                                           (if g$ls/false$10283$1WS4nL
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$7656$1WS4nL
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10170$1WS4nL
                                                                                                                    g$x*$10236$1WS4nL)))
                                                                                                               g$ls/false$10283$1WS4nL)
                                                                                                             (g$syntax-violation$7656$1WS4nL
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10282$1WS4nL))))
                                                                                                        (g$syntax-dispatch$7545$1WS4nL
                                                                                                          g$t$10282$1WS4nL
                                                                                                          '_))))
                                                                                                    g$t$10275$1WS4nL))))
                                                                                              (g$syntax-dispatch$7545$1WS4nL
                                                                                                g$t$10275$1WS4nL
                                                                                                '(any any)))))
                                                                                          g$t$10268$1WS4nL))))
                                                                                    (g$syntax-dispatch$7545$1WS4nL
                                                                                      g$t$10268$1WS4nL
                                                                                      '(any any)))))
                                                                                g$t$10260$1WS4nL))))
                                                                          (g$syntax-dispatch$7545$1WS4nL
                                                                            g$t$10260$1WS4nL
                                                                            '(any any)))))
                                                                      g$t$10251$1WS4nL))))
                                                                (g$syntax-dispatch$7545$1WS4nL
                                                                  g$t$10251$1WS4nL
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10242$1WS4nL))))
                                                      (g$syntax-dispatch$7545$1WS4nL
                                                        g$t$10242$1WS4nL
                                                        '(any . each-any)))))
                                                  g$t$10237$1WS4nL))))
                                            (g$syntax-dispatch$7545$1WS4nL
                                              g$t$10237$1WS4nL
                                              'any))))
                                        g$x*$10236$1WS4nL))))
                                  (g$version-pred$10173$1WS4nL
                                    (case-lambda
                                      ((g$x*$10196$1WS4nL)
                                       ((case-lambda
                                          ((g$t$10197$1WS4nL)
                                           ((case-lambda
                                              ((g$ls/false$10198$1WS4nL)
                                               (if g$ls/false$10198$1WS4nL
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10199$1WS4nL)
                                                         '#t))))
                                                   g$ls/false$10198$1WS4nL)
                                                 ((case-lambda
                                                    ((g$t$10200$1WS4nL)
                                                     ((case-lambda
                                                        ((g$ls/false$10201$1WS4nL)
                                                         (if (if g$ls/false$10201$1WS4nL
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10202$1WS4nL
                                                                        g$ver*$10203$1WS4nL)
                                                                      (eq? (g$syntax->datum$7659$1WS4nL
                                                                             g$c$10202$1WS4nL)
                                                                           'and)))
                                                                   g$ls/false$10201$1WS4nL))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10204$1WS4nL
                                                                  g$ver*$10205$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$p*$10206$1WS4nL)
                                                                    (case-lambda
                                                                      ((g$x$10207$1WS4nL)
                                                                       (g$for-all$5001$1WS4nL
                                                                         (case-lambda
                                                                           ((g$p$10208$1WS4nL)
                                                                            (g$p$10208$1WS4nL
                                                                              g$x$10207$1WS4nL)))
                                                                         g$p*$10206$1WS4nL)))))
                                                                 (map g$version-pred$10173$1WS4nL
                                                                      g$ver*$10205$1WS4nL))))
                                                             g$ls/false$10201$1WS4nL)
                                                           ((case-lambda
                                                              ((g$t$10209$1WS4nL)
                                                               ((case-lambda
                                                                  ((g$ls/false$10210$1WS4nL)
                                                                   (if (if g$ls/false$10210$1WS4nL
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10211$1WS4nL
                                                                                  g$ver*$10212$1WS4nL)
                                                                                (eq? (g$syntax->datum$7659$1WS4nL
                                                                                       g$c$10211$1WS4nL)
                                                                                     'or)))
                                                                             g$ls/false$10210$1WS4nL))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10213$1WS4nL
                                                                            g$ver*$10214$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$p*$10215$1WS4nL)
                                                                              (case-lambda
                                                                                ((g$x$10216$1WS4nL)
                                                                                 (g$exists$5002$1WS4nL
                                                                                   (case-lambda
                                                                                     ((g$p$10217$1WS4nL)
                                                                                      (g$p$10217$1WS4nL
                                                                                        g$x$10216$1WS4nL)))
                                                                                   g$p*$10215$1WS4nL)))))
                                                                           (map g$version-pred$10173$1WS4nL
                                                                                g$ver*$10214$1WS4nL))))
                                                                       g$ls/false$10210$1WS4nL)
                                                                     ((case-lambda
                                                                        ((g$t$10218$1WS4nL)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10219$1WS4nL)
                                                                             (if (if g$ls/false$10219$1WS4nL
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10220$1WS4nL
                                                                                            g$ver$10221$1WS4nL)
                                                                                          (eq? (g$syntax->datum$7659$1WS4nL
                                                                                                 g$c$10220$1WS4nL)
                                                                                               'not)))
                                                                                       g$ls/false$10219$1WS4nL))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10222$1WS4nL
                                                                                      g$ver$10223$1WS4nL)
                                                                                    ((case-lambda
                                                                                       ((g$p$10224$1WS4nL)
                                                                                        (case-lambda
                                                                                          ((g$x$10225$1WS4nL)
                                                                                           (not (g$p$10224$1WS4nL
                                                                                                  g$x$10225$1WS4nL))))))
                                                                                     (g$version-pred$10173$1WS4nL
                                                                                       g$ver$10223$1WS4nL))))
                                                                                 g$ls/false$10219$1WS4nL)
                                                                               ((case-lambda
                                                                                  ((g$t$10226$1WS4nL)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10227$1WS4nL)
                                                                                       (if g$ls/false$10227$1WS4nL
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10228$1WS4nL)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10229$1WS4nL)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10230$1WS4nL)
                                                                                                     ((letrec ((g$f$10231$1WS4nL
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10232$1WS4nL
                                                                                                                      g$x$10233$1WS4nL)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10232$1WS4nL)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10233$1WS4nL)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10232$1WS4nL)
                                                                                                                             (car g$x$10233$1WS4nL))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10231$1WS4nL
                                                                                                                              (cdr g$p*$10232$1WS4nL)
                                                                                                                              (cdr g$x$10233$1WS4nL)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10231$1WS4nL)
                                                                                                      g$p*$10229$1WS4nL
                                                                                                      g$x$10230$1WS4nL)))))
                                                                                               (map g$subversion-pred$10172$1WS4nL
                                                                                                    g$sub*$10228$1WS4nL))))
                                                                                           g$ls/false$10227$1WS4nL)
                                                                                         ((case-lambda
                                                                                            ((g$t$10234$1WS4nL)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10235$1WS4nL)
                                                                                                 (if g$ls/false$10235$1WS4nL
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$7656$1WS4nL
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10170$1WS4nL
                                                                                                          g$x*$10196$1WS4nL)))
                                                                                                     g$ls/false$10235$1WS4nL)
                                                                                                   (g$syntax-violation$7656$1WS4nL
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10234$1WS4nL))))
                                                                                              (g$syntax-dispatch$7545$1WS4nL
                                                                                                g$t$10234$1WS4nL
                                                                                                '_))))
                                                                                          g$t$10226$1WS4nL))))
                                                                                    (g$syntax-dispatch$7545$1WS4nL
                                                                                      g$t$10226$1WS4nL
                                                                                      'each-any))))
                                                                                g$t$10218$1WS4nL))))
                                                                          (g$syntax-dispatch$7545$1WS4nL
                                                                            g$t$10218$1WS4nL
                                                                            '(any any)))))
                                                                      g$t$10209$1WS4nL))))
                                                                (g$syntax-dispatch$7545$1WS4nL
                                                                  g$t$10209$1WS4nL
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10200$1WS4nL))))
                                                      (g$syntax-dispatch$7545$1WS4nL
                                                        g$t$10200$1WS4nL
                                                        '(any . each-any)))))
                                                  g$t$10197$1WS4nL))))
                                            (g$syntax-dispatch$7545$1WS4nL
                                              g$t$10197$1WS4nL
                                              '()))))
                                        g$x*$10196$1WS4nL)))))
                          ((letrec ((g$f$10174$1WS4nL
                                      (case-lambda
                                        ((g$x$10175$1WS4nL)
                                         ((case-lambda
                                            ((g$t$10176$1WS4nL)
                                             ((case-lambda
                                                ((g$ls/false$10177$1WS4nL)
                                                 (if g$ls/false$10177$1WS4nL
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10178$1WS4nL)
                                                        (values
                                                          '()
                                                          (g$version-pred$10173$1WS4nL
                                                            g$version-spec*$10178$1WS4nL))))
                                                     g$ls/false$10177$1WS4nL)
                                                   ((case-lambda
                                                      ((g$t$10179$1WS4nL)
                                                       ((case-lambda
                                                          ((g$ls/false$10180$1WS4nL)
                                                           (if (if g$ls/false$10180$1WS4nL
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10181$1WS4nL
                                                                          g$x*$10182$1WS4nL)
                                                                        (g$idsyn?$10068$1WS4nL
                                                                          g$x$10181$1WS4nL)))
                                                                     g$ls/false$10180$1WS4nL))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10183$1WS4nL
                                                                    g$x*$10184$1WS4nL)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10174$1WS4nL
                                                                         g$x*$10184$1WS4nL)))
                                                                    (case-lambda
                                                                      ((g$name$10187$1WS4nL
                                                                         g$pred$10188$1WS4nL)
                                                                       ((case-lambda
                                                                          ((g$pred$10189$1WS4nL
                                                                             g$name$10190$1WS4nL)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$7659$1WS4nL
                                                                                 g$x$10183$1WS4nL)
                                                                               g$name$10190$1WS4nL)
                                                                             g$pred$10189$1WS4nL)))
                                                                        g$pred$10188$1WS4nL
                                                                        g$name$10187$1WS4nL))))))
                                                               g$ls/false$10180$1WS4nL)
                                                             ((case-lambda
                                                                ((g$t$10191$1WS4nL)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10192$1WS4nL)
                                                                     (if g$ls/false$10192$1WS4nL
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10193$1WS4nL)
                                                                                 '#t)))))
                                                                         g$ls/false$10192$1WS4nL)
                                                                       ((case-lambda
                                                                          ((g$t$10194$1WS4nL)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10195$1WS4nL)
                                                                               (if g$ls/false$10195$1WS4nL
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$7656$1WS4nL
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10170$1WS4nL)))
                                                                                   g$ls/false$10195$1WS4nL)
                                                                                 (g$syntax-violation$7656$1WS4nL
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10194$1WS4nL))))
                                                                            (g$syntax-dispatch$7545$1WS4nL
                                                                              g$t$10194$1WS4nL
                                                                              '_))))
                                                                        g$t$10191$1WS4nL))))
                                                                  (g$syntax-dispatch$7545$1WS4nL
                                                                    g$t$10191$1WS4nL
                                                                    '()))))
                                                              g$t$10179$1WS4nL))))
                                                        (g$syntax-dispatch$7545$1WS4nL
                                                          g$t$10179$1WS4nL
                                                          '(any . any)))))
                                                    g$t$10176$1WS4nL))))
                                              (g$syntax-dispatch$7545$1WS4nL
                                                g$t$10176$1WS4nL
                                                '(each-any)))))
                                          g$x$10175$1WS4nL)))))
                             g$f$10174$1WS4nL)
                           g$spec$10170$1WS4nL)))))
                   (g$import-library$10076$1WS4nL
                     (case-lambda
                       ((g$spec*$10162$1WS4nL)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10075$1WS4nL
                               g$spec*$10162$1WS4nL)))
                          (case-lambda
                            ((g$name$10165$1WS4nL g$pred$10166$1WS4nL)
                             ((case-lambda
                                ((g$pred$10167$1WS4nL g$name$10168$1WS4nL)
                                 (begin
                                   (if (null? g$name$10168$1WS4nL)
                                     (g$syntax-violation$7656$1WS4nL
                                       'import
                                       '"empty library name"
                                       g$spec*$10162$1WS4nL)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10169$1WS4nL)
                                       (begin
                                         (if (not g$lib$10169$1WS4nL)
                                           (g$syntax-violation$7656$1WS4nL
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10168$1WS4nL)
                                           (void))
                                         (if (not (g$pred$10167$1WS4nL
                                                    (g$library-version$7030$1WS4nL
                                                      g$lib$10169$1WS4nL)))
                                           (g$syntax-violation$7656$1WS4nL
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10162$1WS4nL
                                             g$lib$10169$1WS4nL)
                                           (void))
                                         ((g$imp-collector$7599$1WS4nL)
                                          g$lib$10169$1WS4nL)
                                         (g$library-subst$7034$1WS4nL
                                           g$lib$10169$1WS4nL))))
                                    (g$find-library-by-name$7070$1WS4nL
                                      g$name$10168$1WS4nL)))))
                              g$pred$10166$1WS4nL
                              g$name$10165$1WS4nL)))))))
                   (g$get-import$10077$1WS4nL
                     (case-lambda
                       ((g$spec$10091$1WS4nL)
                        ((case-lambda
                           ((g$t$10092$1WS4nL)
                            ((case-lambda
                               ((g$ls/false$10093$1WS4nL)
                                (if (if g$ls/false$10093$1WS4nL
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10094$1WS4nL
                                               g$x*$10095$1WS4nL)
                                             (not (g$memq$4995$1WS4nL
                                                    (g$syntax->datum$7659$1WS4nL
                                                      g$x$10094$1WS4nL)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10093$1WS4nL))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10096$1WS4nL g$x*$10097$1WS4nL)
                                       (g$import-library$10076$1WS4nL
                                         (cons
                                           g$x$10096$1WS4nL
                                           g$x*$10097$1WS4nL))))
                                    g$ls/false$10093$1WS4nL)
                                  ((case-lambda
                                     ((g$t$10098$1WS4nL)
                                      ((case-lambda
                                         ((g$ls/false$10099$1WS4nL)
                                          (if (if g$ls/false$10099$1WS4nL
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10100$1WS4nL
                                                         g$isp$10101$1WS4nL
                                                         g$old*$10102$1WS4nL
                                                         g$new*$10103$1WS4nL)
                                                       (if (eq? (g$syntax->datum$7659$1WS4nL
                                                                  g$rename$10100$1WS4nL)
                                                                'rename)
                                                         (if (g$for-all$5001$1WS4nL
                                                               g$idsyn?$10068$1WS4nL
                                                               g$old*$10102$1WS4nL)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5001$1WS4nL
                                                               g$idsyn?$10068$1WS4nL
                                                               g$new*$10103$1WS4nL))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10099$1WS4nL))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10104$1WS4nL
                                                   g$isp$10105$1WS4nL
                                                   g$old*$10106$1WS4nL
                                                   g$new*$10107$1WS4nL)
                                                 ((case-lambda
                                                    ((g$subst$10108$1WS4nL
                                                       g$old*$10109$1WS4nL
                                                       g$new*$10110$1WS4nL)
                                                     ((case-lambda
                                                        ((g$old-label*$10111$1WS4nL)
                                                         ((case-lambda
                                                            ((g$subst$10112$1WS4nL)
                                                             (g$merge-substs$10070$1WS4nL
                                                               (map cons
                                                                    g$new*$10110$1WS4nL
                                                                    g$old-label*$10111$1WS4nL)
                                                               g$subst$10112$1WS4nL)))
                                                          (g$rem*$10073$1WS4nL
                                                            g$old*$10109$1WS4nL
                                                            g$subst$10108$1WS4nL))))
                                                      (g$find*$10072$1WS4nL
                                                        g$old*$10109$1WS4nL
                                                        g$subst$10108$1WS4nL))))
                                                  (g$get-import$10077$1WS4nL
                                                    g$isp$10105$1WS4nL)
                                                  (map g$syntax->datum$7659$1WS4nL
                                                       g$old*$10106$1WS4nL)
                                                  (map g$syntax->datum$7659$1WS4nL
                                                       g$new*$10107$1WS4nL))))
                                              g$ls/false$10099$1WS4nL)
                                            ((case-lambda
                                               ((g$t$10113$1WS4nL)
                                                ((case-lambda
                                                   ((g$ls/false$10114$1WS4nL)
                                                    (if (if g$ls/false$10114$1WS4nL
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10115$1WS4nL
                                                                   g$isp$10116$1WS4nL
                                                                   g$sym*$10117$1WS4nL)
                                                                 (if (eq? (g$syntax->datum$7659$1WS4nL
                                                                            g$except$10115$1WS4nL)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5001$1WS4nL
                                                                       g$idsyn?$10068$1WS4nL
                                                                       g$sym*$10117$1WS4nL))
                                                                   '#f)))
                                                              g$ls/false$10114$1WS4nL))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10118$1WS4nL
                                                             g$isp$10119$1WS4nL
                                                             g$sym*$10120$1WS4nL)
                                                           ((case-lambda
                                                              ((g$subst$10121$1WS4nL)
                                                               (g$rem*$10073$1WS4nL
                                                                 (map g$syntax->datum$7659$1WS4nL
                                                                      g$sym*$10120$1WS4nL)
                                                                 g$subst$10121$1WS4nL)))
                                                            (g$get-import$10077$1WS4nL
                                                              g$isp$10119$1WS4nL))))
                                                        g$ls/false$10114$1WS4nL)
                                                      ((case-lambda
                                                         ((g$t$10122$1WS4nL)
                                                          ((case-lambda
                                                             ((g$ls/false$10123$1WS4nL)
                                                              (if (if g$ls/false$10123$1WS4nL
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10124$1WS4nL
                                                                             g$isp$10125$1WS4nL
                                                                             g$sym*$10126$1WS4nL)
                                                                           (if (eq? (g$syntax->datum$7659$1WS4nL
                                                                                      g$only$10124$1WS4nL)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5001$1WS4nL
                                                                                 g$idsyn?$10068$1WS4nL
                                                                                 g$sym*$10126$1WS4nL))
                                                                             '#f)))
                                                                        g$ls/false$10123$1WS4nL))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10127$1WS4nL
                                                                       g$isp$10128$1WS4nL
                                                                       g$sym*$10129$1WS4nL)
                                                                     ((case-lambda
                                                                        ((g$subst$10130$1WS4nL
                                                                           g$sym*$10131$1WS4nL)
                                                                         ((case-lambda
                                                                            ((g$sym*$10132$1WS4nL)
                                                                             ((case-lambda
                                                                                ((g$lab*$10133$1WS4nL)
                                                                                 (map cons
                                                                                      g$sym*$10132$1WS4nL
                                                                                      g$lab*$10133$1WS4nL)))
                                                                              (g$find*$10072$1WS4nL
                                                                                g$sym*$10132$1WS4nL
                                                                                g$subst$10130$1WS4nL))))
                                                                          (g$remove-dups$10074$1WS4nL
                                                                            g$sym*$10131$1WS4nL))))
                                                                      (g$get-import$10077$1WS4nL
                                                                        g$isp$10128$1WS4nL)
                                                                      (map g$syntax->datum$7659$1WS4nL
                                                                           g$sym*$10129$1WS4nL))))
                                                                  g$ls/false$10123$1WS4nL)
                                                                ((case-lambda
                                                                   ((g$t$10134$1WS4nL)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10135$1WS4nL)
                                                                        (if (if g$ls/false$10135$1WS4nL
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10136$1WS4nL
                                                                                       g$isp$10137$1WS4nL
                                                                                       g$p$10138$1WS4nL)
                                                                                     (if (eq? (g$syntax->datum$7659$1WS4nL
                                                                                                g$prefix$10136$1WS4nL)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10068$1WS4nL
                                                                                           g$p$10138$1WS4nL))
                                                                                       '#f)))
                                                                                  g$ls/false$10135$1WS4nL))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10139$1WS4nL
                                                                                 g$isp$10140$1WS4nL
                                                                                 g$p$10141$1WS4nL)
                                                                               ((case-lambda
                                                                                  ((g$subst$10142$1WS4nL
                                                                                     g$prefix$10143$1WS4nL)
                                                                                   (map (case-lambda
                                                                                          ((g$x$10144$1WS4nL)
                                                                                           (cons
                                                                                             (string->symbol
                                                                                               (string-append
                                                                                                 g$prefix$10143$1WS4nL
                                                                                                 (symbol->string
                                                                                                   (car g$x$10144$1WS4nL))))
                                                                                             (cdr g$x$10144$1WS4nL))))
                                                                                        g$subst$10142$1WS4nL)))
                                                                                (g$get-import$10077$1WS4nL
                                                                                  g$isp$10140$1WS4nL)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$7659$1WS4nL
                                                                                    g$p$10141$1WS4nL)))))
                                                                            g$ls/false$10135$1WS4nL)
                                                                          ((case-lambda
                                                                             ((g$t$10145$1WS4nL)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10146$1WS4nL)
                                                                                  (if (if g$ls/false$10146$1WS4nL
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10147$1WS4nL
                                                                                                 g$spec*$10148$1WS4nL)
                                                                                               (eq? (g$syntax->datum$7659$1WS4nL
                                                                                                      g$library$10147$1WS4nL)
                                                                                                    'library)))
                                                                                            g$ls/false$10146$1WS4nL))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10149$1WS4nL
                                                                                           g$spec*$10150$1WS4nL)
                                                                                         (g$import-library$10076$1WS4nL
                                                                                           g$spec*$10150$1WS4nL)))
                                                                                      g$ls/false$10146$1WS4nL)
                                                                                    ((case-lambda
                                                                                       ((g$t$10151$1WS4nL)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10152$1WS4nL)
                                                                                            (if (if g$ls/false$10152$1WS4nL
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10153$1WS4nL
                                                                                                           g$isp$10154$1WS4nL
                                                                                                           g$rest$10155$1WS4nL)
                                                                                                         (eq? (g$syntax->datum$7659$1WS4nL
                                                                                                                g$for$10153$1WS4nL)
                                                                                                              'for)))
                                                                                                      g$ls/false$10152$1WS4nL))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10156$1WS4nL
                                                                                                     g$isp$10157$1WS4nL
                                                                                                     g$rest$10158$1WS4nL)
                                                                                                   (g$get-import$10077$1WS4nL
                                                                                                     g$isp$10157$1WS4nL)))
                                                                                                g$ls/false$10152$1WS4nL)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10159$1WS4nL)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10160$1WS4nL)
                                                                                                      (if g$ls/false$10160$1WS4nL
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10161$1WS4nL)
                                                                                                             (g$syntax-violation$7656$1WS4nL
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10161$1WS4nL)))
                                                                                                          g$ls/false$10160$1WS4nL)
                                                                                                        (g$syntax-violation$7656$1WS4nL
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10159$1WS4nL))))
                                                                                                   (g$syntax-dispatch$7545$1WS4nL
                                                                                                     g$t$10159$1WS4nL
                                                                                                     'any))))
                                                                                               g$t$10151$1WS4nL))))
                                                                                         (g$syntax-dispatch$7545$1WS4nL
                                                                                           g$t$10151$1WS4nL
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10145$1WS4nL))))
                                                                               (g$syntax-dispatch$7545$1WS4nL
                                                                                 g$t$10145$1WS4nL
                                                                                 '(any each-any)))))
                                                                           g$t$10134$1WS4nL))))
                                                                     (g$syntax-dispatch$7545$1WS4nL
                                                                       g$t$10134$1WS4nL
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10122$1WS4nL))))
                                                           (g$syntax-dispatch$7545$1WS4nL
                                                             g$t$10122$1WS4nL
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10113$1WS4nL))))
                                                 (g$syntax-dispatch$7545$1WS4nL
                                                   g$t$10113$1WS4nL
                                                   '(any any . each-any)))))
                                             g$t$10098$1WS4nL))))
                                       (g$syntax-dispatch$7545$1WS4nL
                                         g$t$10098$1WS4nL
                                         '(any any . #(each (any any)))))))
                                   g$t$10092$1WS4nL))))
                             (g$syntax-dispatch$7545$1WS4nL
                               g$t$10092$1WS4nL
                               '(any . each-any)))))
                         g$spec$10091$1WS4nL))))
                   (g$add-imports!$10078$1WS4nL
                     (case-lambda
                       ((g$imp$10083$1WS4nL g$h$10084$1WS4nL)
                        ((case-lambda
                           ((g$subst$10085$1WS4nL)
                            (for-each
                              (case-lambda
                                ((g$x$10086$1WS4nL)
                                 ((case-lambda
                                    ((g$name$10087$1WS4nL g$label$10088$1WS4nL)
                                     ((case-lambda
                                        ((g$t$10089$1WS4nL)
                                         (if g$t$10089$1WS4nL
                                           ((case-lambda
                                              ((g$l$10090$1WS4nL)
                                               (if (not (eq? g$l$10090$1WS4nL
                                                             g$label$10088$1WS4nL))
                                                 (g$dup-error$10069$1WS4nL
                                                   g$name$10087$1WS4nL)
                                                 (void))))
                                            g$t$10089$1WS4nL)
                                           (g$hashtable-set!$5443$1WS4nL
                                             g$h$10084$1WS4nL
                                             g$name$10087$1WS4nL
                                             g$label$10088$1WS4nL))))
                                      (g$hashtable-ref$5442$1WS4nL
                                        g$h$10084$1WS4nL
                                        g$name$10087$1WS4nL
                                        '#f))))
                                  (car g$x$10086$1WS4nL)
                                  (cdr g$x$10086$1WS4nL))))
                              g$subst$10085$1WS4nL)))
                         (g$get-import$10077$1WS4nL g$imp$10083$1WS4nL))))))
           (case-lambda
             ((g$imp*$10079$1WS4nL)
              ((letrec ((g$f$10080$1WS4nL
                          (case-lambda
                            ((g$imp*$10081$1WS4nL g$h$10082$1WS4nL)
                             (if (null? g$imp*$10081$1WS4nL)
                               (hashtable-entries g$h$10082$1WS4nL)
                               (begin
                                 (g$add-imports!$10078$1WS4nL
                                   (car g$imp*$10081$1WS4nL)
                                   g$h$10082$1WS4nL)
                                 (g$f$10080$1WS4nL
                                   (cdr g$imp*$10081$1WS4nL)
                                   g$h$10082$1WS4nL)))))))
                 g$f$10080$1WS4nL)
               g$imp*$10079$1WS4nL
               (g$make-eq-hashtable$5439$1WS4nL)))))))))
   (g$make-top-rib$7595$1WS4nL
     g$make-top-rib$11083$1WS4nL
     (case-lambda
       ((g$names$10330$1WS4nL g$labels$10331$1WS4nL)
        ((case-lambda
           ((g$rib$10332$1WS4nL)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10333$1WS4nL g$label$10334$1WS4nL)
                   (begin
                     (if (not (symbol? g$name$10333$1WS4nL))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10333$1WS4nL)
                       (void))
                     (g$extend-rib/nc!$7231$1WS4nL
                       g$rib$10332$1WS4nL
                       (g$make-stx$7240$1WS4nL
                         g$name$10333$1WS4nL
                         g$top-mark*$7204$1WS4nL
                         '()
                         '())
                       g$label$10334$1WS4nL))))
                g$names$10330$1WS4nL
                g$labels$10331$1WS4nL)
              g$rib$10332$1WS4nL)))
         (g$make-cache-rib$7228$1WS4nL)))))
   (g$make-collector$7596$1WS4nL
     g$make-collector$11084$1WS4nL
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10335$1WS4nL)
            (case-lambda
              (() g$ls$10335$1WS4nL)
              ((g$x$10336$1WS4nL)
               (set! g$ls$10335$1WS4nL
                 (g$set-cons$7201$1WS4nL
                   g$x$10336$1WS4nL
                   g$ls$10335$1WS4nL))))))
         '()))))
   (g$inv-collector$7597$1WS4nL
     g$inv-collector$11085$1WS4nL
     (g$make-parameter$6530$1WS4nL
       (case-lambda
         (g$args$10337$1WS4nL
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10338$1WS4nL)
          (begin
            (if (not (procedure? g$x$10338$1WS4nL))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10338$1WS4nL)
              (void))
            g$x$10338$1WS4nL)))))
   (g$vis-collector$7598$1WS4nL
     g$vis-collector$11086$1WS4nL
     (g$make-parameter$6530$1WS4nL
       (case-lambda
         (g$args$10339$1WS4nL
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10340$1WS4nL)
          (begin
            (if (not (procedure? g$x$10340$1WS4nL))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10340$1WS4nL)
              (void))
            g$x$10340$1WS4nL)))))
   (g$imp-collector$7599$1WS4nL
     g$imp-collector$11087$1WS4nL
     (g$make-parameter$6530$1WS4nL
       (case-lambda
         (g$args$10341$1WS4nL
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10342$1WS4nL)
          (begin
            (if (not (procedure? g$x$10342$1WS4nL))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10342$1WS4nL)
              (void))
            g$x$10342$1WS4nL)))))
   (g$chi-library-internal$7600$1WS4nL
     g$chi-library-internal$11088$1WS4nL
     (case-lambda
       ((g$e*$10343$1WS4nL g$rib$10344$1WS4nL g$top?$10345$1WS4nL)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7589$1WS4nL
               g$e*$10343$1WS4nL
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10344$1WS4nL
               g$top?$10345$1WS4nL)))
          (case-lambda
            ((g$e*$10354$1WS4nL
               g$r$10355$1WS4nL
               g$mr$10356$1WS4nL
               g$lex*$10357$1WS4nL
               g$rhs*$10358$1WS4nL
               g$mod**$10359$1WS4nL
               g$_kwd*$10360$1WS4nL
               g$exp*$10361$1WS4nL)
             ((case-lambda
                ((g$exp*$10362$1WS4nL
                   g$_kwd*$10363$1WS4nL
                   g$mod**$10364$1WS4nL
                   g$rhs*$10365$1WS4nL
                   g$lex*$10366$1WS4nL
                   g$mr$10367$1WS4nL
                   g$r$10368$1WS4nL
                   g$e*$10369$1WS4nL)
                 (values
                   (append
                     (apply append (reverse g$mod**$10364$1WS4nL))
                     g$e*$10369$1WS4nL)
                   g$r$10368$1WS4nL
                   g$mr$10367$1WS4nL
                   (reverse g$lex*$10366$1WS4nL)
                   (reverse g$rhs*$10365$1WS4nL)
                   g$exp*$10362$1WS4nL)))
              g$exp*$10361$1WS4nL
              g$_kwd*$10360$1WS4nL
              g$mod**$10359$1WS4nL
              g$rhs*$10358$1WS4nL
              g$lex*$10357$1WS4nL
              g$mr$10356$1WS4nL
              g$r$10355$1WS4nL
              g$e*$10354$1WS4nL)))))))
   (g$chi-interaction-expr$7601$1WS4nL
     g$chi-interaction-expr$11089$1WS4nL
     (case-lambda
       ((g$e$10370$1WS4nL g$rib$10371$1WS4nL g$r$10372$1WS4nL)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7589$1WS4nL
               (list g$e$10370$1WS4nL)
               g$r$10372$1WS4nL
               g$r$10372$1WS4nL
               '()
               '()
               '()
               '()
               '()
               g$rib$10371$1WS4nL
               '#t)))
          (case-lambda
            ((g$e*$10381$1WS4nL
               g$r$10382$1WS4nL
               g$mr$10383$1WS4nL
               g$lex*$10384$1WS4nL
               g$rhs*$10385$1WS4nL
               g$mod**$10386$1WS4nL
               g$_kwd*$10387$1WS4nL
               g$_exp*$10388$1WS4nL)
             ((case-lambda
                ((g$_exp*$10389$1WS4nL
                   g$_kwd*$10390$1WS4nL
                   g$mod**$10391$1WS4nL
                   g$rhs*$10392$1WS4nL
                   g$lex*$10393$1WS4nL
                   g$mr$10394$1WS4nL
                   g$r$10395$1WS4nL
                   g$e*$10396$1WS4nL)
                 ((case-lambda
                    ((g$e*$10397$1WS4nL)
                     ((case-lambda
                        ((g$e$10398$1WS4nL)
                         (values g$e$10398$1WS4nL g$r$10395$1WS4nL)))
                      (if (null? g$e*$10397$1WS4nL)
                        (g$build-void$7197$1WS4nL)
                        (if (null? (cdr g$e*$10397$1WS4nL))
                          (car g$e*$10397$1WS4nL)
                          (g$build-sequence$7196$1WS4nL
                            '#f
                            g$e*$10397$1WS4nL))))))
                  (g$expand-interaction-rhs*/init*$7570$1WS4nL
                    (reverse g$lex*$10393$1WS4nL)
                    (reverse g$rhs*$10392$1WS4nL)
                    (append
                      (apply append (reverse g$mod**$10391$1WS4nL))
                      g$e*$10396$1WS4nL)
                    g$r$10395$1WS4nL
                    g$mr$10394$1WS4nL))))
              g$_exp*$10388$1WS4nL
              g$_kwd*$10387$1WS4nL
              g$mod**$10386$1WS4nL
              g$rhs*$10385$1WS4nL
              g$lex*$10384$1WS4nL
              g$mr$10383$1WS4nL
              g$r$10382$1WS4nL
              g$e*$10381$1WS4nL)))))))
   (g$library-body-expander$7602$1WS4nL
     g$library-body-expander$11090$1WS4nL
     (case-lambda
       ((g$name$10399$1WS4nL
          g$main-exp*$10400$1WS4nL
          g$imp*$10401$1WS4nL
          g$b*$10402$1WS4nL
          g$top?$10403$1WS4nL)
        (letrec* ((g$itc$10404$1WS4nL (g$make-collector$7596$1WS4nL)))
          ((case-lambda
             ((g$imp-collector$10409$1WS4nL
                g$top-level-context$10410$1WS4nL
                g$imp-collector$10411$1WS4nL
                g$top-level-context$10412$1WS4nL)
              ((case-lambda
                 ((g$swap$10413$1WS4nL)
                  (dynamic-wind
                    g$swap$10413$1WS4nL
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$7594$1WS4nL
                              g$imp*$10401$1WS4nL)))
                         (case-lambda
                           ((g$subst-names$10416$1WS4nL
                              g$subst-labels$10417$1WS4nL)
                            ((case-lambda
                               ((g$subst-labels$10418$1WS4nL
                                  g$subst-names$10419$1WS4nL)
                                ((case-lambda
                                   ((g$rib$10420$1WS4nL)
                                    (letrec* ((g$wrap$10421$1WS4nL
                                                (case-lambda
                                                  ((g$x$10483$1WS4nL)
                                                   (g$make-stx$7240$1WS4nL
                                                     g$x$10483$1WS4nL
                                                     g$top-mark*$7204$1WS4nL
                                                     (list g$rib$10420$1WS4nL)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10422$1WS4nL
                                            g$main-exp*$10423$1WS4nL
                                            g$rtc$10424$1WS4nL
                                            g$vtc$10425$1WS4nL)
                                          ((case-lambda
                                             ((g$inv-collector$10430$1WS4nL
                                                g$vis-collector$10431$1WS4nL
                                                g$inv-collector$10432$1WS4nL
                                                g$vis-collector$10433$1WS4nL)
                                              ((case-lambda
                                                 ((g$swap$10434$1WS4nL)
                                                  (dynamic-wind
                                                    g$swap$10434$1WS4nL
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$7600$1WS4nL
                                                              g$b*$10422$1WS4nL
                                                              g$rib$10420$1WS4nL
                                                              g$top?$10403$1WS4nL)))
                                                         (case-lambda
                                                           ((g$init*$10441$1WS4nL
                                                              g$r$10442$1WS4nL
                                                              g$mr$10443$1WS4nL
                                                              g$lex*$10444$1WS4nL
                                                              g$rhs*$10445$1WS4nL
                                                              g$internal-exp*$10446$1WS4nL)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10447$1WS4nL
                                                                  g$rhs*$10448$1WS4nL
                                                                  g$lex*$10449$1WS4nL
                                                                  g$mr$10450$1WS4nL
                                                                  g$r$10451$1WS4nL
                                                                  g$init*$10452$1WS4nL)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$7591$1WS4nL
                                                                       (append
                                                                         g$main-exp*$10423$1WS4nL
                                                                         g$internal-exp*$10447$1WS4nL))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10455$1WS4nL
                                                                       g$exp-id*$10456$1WS4nL)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10457$1WS4nL
                                                                           g$exp-name*$10458$1WS4nL)
                                                                         (begin
                                                                           (g$seal-rib!$7233$1WS4nL
                                                                             g$rib$10420$1WS4nL)
                                                                           ((case-lambda
                                                                              ((g$init*$10459$1WS4nL)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10460$1WS4nL)
                                                                                   ((case-lambda
                                                                                      (()
                                                                                       (begin
                                                                                         (g$unseal-rib!$7234$1WS4nL
                                                                                           g$rib$10420$1WS4nL)
                                                                                         ((case-lambda
                                                                                            ((g$loc*$10461$1WS4nL
                                                                                               g$export-subst$10462$1WS4nL)
                                                                                             (letrec* ((g$errstr$10463$1WS4nL
                                                                                                         '"attempt to export mutated variable"))
                                                                                               (call-with-values
                                                                                                 (case-lambda
                                                                                                   (()
                                                                                                    (g$make-export-env/macros$7645$1WS4nL
                                                                                                      g$lex*$10449$1WS4nL
                                                                                                      g$loc*$10461$1WS4nL
                                                                                                      g$r$10451$1WS4nL)))
                                                                                                 (case-lambda
                                                                                                   ((g$export-env$10467$1WS4nL
                                                                                                      g$global*$10468$1WS4nL
                                                                                                      g$macro*$10469$1WS4nL)
                                                                                                    ((case-lambda
                                                                                                       ((g$macro*$10470$1WS4nL
                                                                                                          g$global*$10471$1WS4nL
                                                                                                          g$export-env$10472$1WS4nL)
                                                                                                        (begin
                                                                                                          (for-each
                                                                                                            (case-lambda
                                                                                                              ((g$s$10473$1WS4nL)
                                                                                                               ((case-lambda
                                                                                                                  ((g$name$10474$1WS4nL
                                                                                                                     g$label$10475$1WS4nL)
                                                                                                                   ((case-lambda
                                                                                                                      ((g$p$10476$1WS4nL)
                                                                                                                       (if g$p$10476$1WS4nL
                                                                                                                         ((case-lambda
                                                                                                                            ((g$b$10477$1WS4nL)
                                                                                                                             ((case-lambda
                                                                                                                                ((g$type$10478$1WS4nL)
                                                                                                                                 (if (eq? g$type$10478$1WS4nL
                                                                                                                                          'mutable)
                                                                                                                                   (g$syntax-violation$7656$1WS4nL
                                                                                                                                     'export
                                                                                                                                     g$errstr$10463$1WS4nL
                                                                                                                                     g$name$10474$1WS4nL)
                                                                                                                                   (void))))
                                                                                                                              (car g$b$10477$1WS4nL))))
                                                                                                                          (cdr g$p$10476$1WS4nL))
                                                                                                                         (void))))
                                                                                                                    (g$assq$4991$1WS4nL
                                                                                                                      g$label$10475$1WS4nL
                                                                                                                      g$export-env$10472$1WS4nL))))
                                                                                                                (car g$s$10473$1WS4nL)
                                                                                                                (cdr g$s$10473$1WS4nL))))
                                                                                                            g$export-subst$10462$1WS4nL)
                                                                                                          ((case-lambda
                                                                                                             ((g$invoke-body$10479$1WS4nL
                                                                                                                g$invoke-definitions$10480$1WS4nL)
                                                                                                              (values
                                                                                                                (g$itc$10404$1WS4nL)
                                                                                                                (g$rtc$10424$1WS4nL)
                                                                                                                (g$vtc$10425$1WS4nL)
                                                                                                                (g$build-sequence$7196$1WS4nL
                                                                                                                  '#f
                                                                                                                  (append
                                                                                                                    g$invoke-definitions$10480$1WS4nL
                                                                                                                    (list
                                                                                                                      g$invoke-body$10479$1WS4nL)))
                                                                                                                g$macro*$10470$1WS4nL
                                                                                                                g$export-subst$10462$1WS4nL
                                                                                                                g$export-env$10472$1WS4nL)))
                                                                                                           (g$build-library-letrec*$7200$1WS4nL
                                                                                                             '#f
                                                                                                             g$name$10399$1WS4nL
                                                                                                             g$lex*$10449$1WS4nL
                                                                                                             g$loc*$10461$1WS4nL
                                                                                                             g$rhs*$10460$1WS4nL
                                                                                                             (if (null?
                                                                                                                   g$init*$10459$1WS4nL)
                                                                                                               (g$build-void$7197$1WS4nL)
                                                                                                               (g$build-sequence$7196$1WS4nL
                                                                                                                 '#f
                                                                                                                 g$init*$10459$1WS4nL)))
                                                                                                           (map g$build-global-define$7192$1WS4nL
                                                                                                                (map cdr
                                                                                                                     g$global*$10471$1WS4nL))))))
                                                                                                     g$macro*$10469$1WS4nL
                                                                                                     g$global*$10468$1WS4nL
                                                                                                     g$export-env$10467$1WS4nL)))))))
                                                                                          (map g$gen-global$7207$1WS4nL
                                                                                               g$lex*$10449$1WS4nL)
                                                                                          (g$make-export-subst$7644$1WS4nL
                                                                                            g$exp-name*$10458$1WS4nL
                                                                                            g$exp-id*$10457$1WS4nL))))))))
                                                                                (g$chi-rhs*$7571$1WS4nL
                                                                                  g$rhs*$10448$1WS4nL
                                                                                  g$r$10451$1WS4nL
                                                                                  g$mr$10450$1WS4nL))))
                                                                            (g$chi-expr*$7561$1WS4nL
                                                                              g$init*$10452$1WS4nL
                                                                              g$r$10451$1WS4nL
                                                                              g$mr$10450$1WS4nL)))))
                                                                      g$exp-id*$10456$1WS4nL
                                                                      g$exp-name*$10455$1WS4nL))))))
                                                             g$internal-exp*$10446$1WS4nL
                                                             g$rhs*$10445$1WS4nL
                                                             g$lex*$10444$1WS4nL
                                                             g$mr$10443$1WS4nL
                                                             g$r$10442$1WS4nL
                                                             g$init*$10441$1WS4nL))))))
                                                    g$swap$10434$1WS4nL)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$10481$1WS4nL)
                                                        (begin
                                                          (g$inv-collector$10430$1WS4nL
                                                            g$inv-collector$10432$1WS4nL)
                                                          (set! g$inv-collector$10432$1WS4nL
                                                            g$t$10481$1WS4nL))))
                                                     (g$inv-collector$10430$1WS4nL))
                                                    ((case-lambda
                                                       ((g$t$10482$1WS4nL)
                                                        (begin
                                                          (g$vis-collector$10431$1WS4nL
                                                            g$vis-collector$10433$1WS4nL)
                                                          (set! g$vis-collector$10433$1WS4nL
                                                            g$t$10482$1WS4nL))))
                                                     (g$vis-collector$10431$1WS4nL))))))))
                                           g$inv-collector$7597$1WS4nL
                                           g$vis-collector$7598$1WS4nL
                                           g$rtc$10424$1WS4nL
                                           g$vtc$10425$1WS4nL)))
                                       (map g$wrap$10421$1WS4nL
                                            g$b*$10402$1WS4nL)
                                       (map g$wrap$10421$1WS4nL
                                            g$main-exp*$10400$1WS4nL)
                                       (g$make-collector$7596$1WS4nL)
                                       (g$make-collector$7596$1WS4nL)))))
                                 (g$make-top-rib$7595$1WS4nL
                                   g$subst-names$10419$1WS4nL
                                   g$subst-labels$10418$1WS4nL))))
                             g$subst-labels$10417$1WS4nL
                             g$subst-names$10416$1WS4nL))))))
                    g$swap$10413$1WS4nL)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10484$1WS4nL)
                        (begin
                          (g$imp-collector$10409$1WS4nL
                            g$imp-collector$10411$1WS4nL)
                          (set! g$imp-collector$10411$1WS4nL
                            g$t$10484$1WS4nL))))
                     (g$imp-collector$10409$1WS4nL))
                    ((case-lambda
                       ((g$t$10485$1WS4nL)
                        (begin
                          (g$top-level-context$10410$1WS4nL
                            g$top-level-context$10412$1WS4nL)
                          (set! g$top-level-context$10412$1WS4nL
                            g$t$10485$1WS4nL))))
                     (g$top-level-context$10410$1WS4nL))))))))
           g$imp-collector$7599$1WS4nL
           g$top-level-context$7663$1WS4nL
           g$itc$10404$1WS4nL
           '#f)))))
   (g$core-library-expander$7603$1WS4nL
     g$core-library-expander$11091$1WS4nL
     (case-lambda
       ((g$e$10486$1WS4nL g$verify-name$10487$1WS4nL)
        (call-with-values
          (case-lambda (() (g$parse-library$7593$1WS4nL g$e$10486$1WS4nL)))
          (case-lambda
            ((g$name*$10492$1WS4nL
               g$exp*$10493$1WS4nL
               g$imp*$10494$1WS4nL
               g$b*$10495$1WS4nL)
             ((case-lambda
                ((g$b*$10496$1WS4nL
                   g$imp*$10497$1WS4nL
                   g$exp*$10498$1WS4nL
                   g$name*$10499$1WS4nL)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$7592$1WS4nL g$name*$10499$1WS4nL)))
                   (case-lambda
                     ((g$name$10502$1WS4nL g$ver$10503$1WS4nL)
                      ((case-lambda
                         ((g$ver$10504$1WS4nL g$name$10505$1WS4nL)
                          (begin
                            (g$verify-name$10487$1WS4nL g$name$10505$1WS4nL)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$7602$1WS4nL
                                   g$name$10505$1WS4nL
                                   g$exp*$10498$1WS4nL
                                   g$imp*$10497$1WS4nL
                                   g$b*$10496$1WS4nL
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10513$1WS4nL
                                   g$invoke-req*$10514$1WS4nL
                                   g$visit-req*$10515$1WS4nL
                                   g$invoke-code$10516$1WS4nL
                                   g$visit-code$10517$1WS4nL
                                   g$export-subst$10518$1WS4nL
                                   g$export-env$10519$1WS4nL)
                                 ((case-lambda
                                    ((g$export-env$10520$1WS4nL
                                       g$export-subst$10521$1WS4nL
                                       g$visit-code$10522$1WS4nL
                                       g$invoke-code$10523$1WS4nL
                                       g$visit-req*$10524$1WS4nL
                                       g$invoke-req*$10525$1WS4nL
                                       g$imp*$10526$1WS4nL)
                                     (values
                                       g$name$10505$1WS4nL
                                       g$ver$10504$1WS4nL
                                       g$imp*$10526$1WS4nL
                                       g$invoke-req*$10525$1WS4nL
                                       g$visit-req*$10524$1WS4nL
                                       g$invoke-code$10523$1WS4nL
                                       g$visit-code$10522$1WS4nL
                                       g$export-subst$10521$1WS4nL
                                       g$export-env$10520$1WS4nL)))
                                  g$export-env$10519$1WS4nL
                                  g$export-subst$10518$1WS4nL
                                  g$visit-code$10517$1WS4nL
                                  g$invoke-code$10516$1WS4nL
                                  g$visit-req*$10515$1WS4nL
                                  g$invoke-req*$10514$1WS4nL
                                  g$imp*$10513$1WS4nL)))))))
                       g$ver$10503$1WS4nL
                       g$name$10502$1WS4nL))))))
              g$b*$10495$1WS4nL
              g$imp*$10494$1WS4nL
              g$exp*$10493$1WS4nL
              g$name*$10492$1WS4nL)))))))
   (g$parse-top-level-program$7604$1WS4nL
     g$parse-top-level-program$11092$1WS4nL
     (case-lambda
       ((g$e*$10527$1WS4nL)
        ((case-lambda
           ((g$t$10528$1WS4nL)
            ((case-lambda
               ((g$ls/false$10529$1WS4nL)
                (if (if g$ls/false$10529$1WS4nL
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10530$1WS4nL
                               g$imp*$10531$1WS4nL
                               g$b*$10532$1WS4nL)
                             (eq? (g$syntax->datum$7659$1WS4nL
                                    g$import$10530$1WS4nL)
                                  'import)))
                          g$ls/false$10529$1WS4nL))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10533$1WS4nL
                         g$imp*$10534$1WS4nL
                         g$b*$10535$1WS4nL)
                       (values g$imp*$10534$1WS4nL g$b*$10535$1WS4nL)))
                    g$ls/false$10529$1WS4nL)
                  ((case-lambda
                     ((g$t$10536$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$10537$1WS4nL)
                          (if (if g$ls/false$10537$1WS4nL
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10538$1WS4nL
                                         g$x$10539$1WS4nL
                                         g$y$10540$1WS4nL)
                                       (eq? (g$syntax->datum$7659$1WS4nL
                                              g$import$10538$1WS4nL)
                                            'import)))
                                    g$ls/false$10537$1WS4nL))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10541$1WS4nL
                                   g$x$10542$1WS4nL
                                   g$y$10543$1WS4nL)
                                 (g$syntax-violation$7656$1WS4nL
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7264$1WS4nL
                                     g$e*$10527$1WS4nL))))
                              g$ls/false$10537$1WS4nL)
                            ((case-lambda
                               ((g$t$10544$1WS4nL)
                                ((case-lambda
                                   ((g$ls/false$10545$1WS4nL)
                                    (if g$ls/false$10545$1WS4nL
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10545$1WS4nL)
                                      (g$syntax-violation$7656$1WS4nL
                                        '#f
                                        '"invalid syntax"
                                        g$t$10544$1WS4nL))))
                                 (g$syntax-dispatch$7545$1WS4nL
                                   g$t$10544$1WS4nL
                                   '_))))
                             g$t$10536$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL
                         g$t$10536$1WS4nL
                         '((any . any) . any)))))
                   g$t$10528$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL
               g$t$10528$1WS4nL
               '((any . each-any) . each-any)))))
         g$e*$10527$1WS4nL))))
   (g$top-level-expander$7605$1WS4nL
     g$top-level-expander$11093$1WS4nL
     (case-lambda
       ((g$e*$10546$1WS4nL)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$7604$1WS4nL g$e*$10546$1WS4nL)))
          (case-lambda
            ((g$imp*$10549$1WS4nL g$b*$10550$1WS4nL)
             ((case-lambda
                ((g$b*$10551$1WS4nL g$imp*$10552$1WS4nL)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$7602$1WS4nL
                        '()
                        '()
                        g$imp*$10552$1WS4nL
                        g$b*$10551$1WS4nL
                        '#t)))
                   (case-lambda
                     ((g$imp*$10560$1WS4nL
                        g$invoke-req*$10561$1WS4nL
                        g$visit-req*$10562$1WS4nL
                        g$invoke-code$10563$1WS4nL
                        g$visit-code$10564$1WS4nL
                        g$export-subst$10565$1WS4nL
                        g$export-env$10566$1WS4nL)
                      ((case-lambda
                         ((g$export-env$10567$1WS4nL
                            g$export-subst$10568$1WS4nL
                            g$visit-code$10569$1WS4nL
                            g$invoke-code$10570$1WS4nL
                            g$visit-req*$10571$1WS4nL
                            g$invoke-req*$10572$1WS4nL
                            g$imp*$10573$1WS4nL)
                          (values
                            g$invoke-req*$10572$1WS4nL
                            g$invoke-code$10570$1WS4nL)))
                       g$export-env$10566$1WS4nL
                       g$export-subst$10565$1WS4nL
                       g$visit-code$10564$1WS4nL
                       g$invoke-code$10563$1WS4nL
                       g$visit-req*$10562$1WS4nL
                       g$invoke-req*$10561$1WS4nL
                       g$imp*$10560$1WS4nL))))))
              g$b*$10550$1WS4nL
              g$imp*$10549$1WS4nL)))))))
   (g$8746$7606$1WS4nL
     g$8746$11094$1WS4nL
     (make-record-type-descriptor
       'env
       '#f
       'g$8749$1WS4nL
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8748$7607$1WS4nL g$8748$11095$1WS4nL '#f)
   (g$8747$7608$1WS4nL
     g$8747$11096$1WS4nL
     (make-record-constructor-descriptor
       g$8746$7606$1WS4nL
       '#f
       g$8748$7607$1WS4nL))
   (g$env?$7609$1WS4nL
     g$env?$11097$1WS4nL
     (record-predicate g$8746$7606$1WS4nL))
   (g$make-env$7610$1WS4nL
     g$make-env$11098$1WS4nL
     (record-constructor g$8747$7608$1WS4nL))
   (g$env-names$7611$1WS4nL
     g$env-names$11099$1WS4nL
     (record-accessor g$8746$7606$1WS4nL '0))
   (g$env-labels$7612$1WS4nL
     g$env-labels$11100$1WS4nL
     (record-accessor g$8746$7606$1WS4nL '1))
   (g$env-itc$7613$1WS4nL
     g$env-itc$11101$1WS4nL
     (record-accessor g$8746$7606$1WS4nL '2))
   (g$set-env-names!$7614$1WS4nL
     g$set-env-names!$11102$1WS4nL
     (record-mutator g$8746$7606$1WS4nL '0))
   (g$set-env-labels!$7615$1WS4nL
     g$set-env-labels!$11103$1WS4nL
     (record-mutator g$8746$7606$1WS4nL '1))
   (g$set-env-itc!$7616$1WS4nL
     g$set-env-itc!$11104$1WS4nL
     (record-mutator g$8746$7606$1WS4nL '2))
   (g$rp$7617$1WS4nL
     g$rp$11105$1WS4nL
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10574$1WS4nL g$p$10575$1WS4nL)
          (display '"#<environment>" g$p$10575$1WS4nL)))))
   (g$8765$7618$1WS4nL
     g$8765$11106$1WS4nL
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8768$1WS4nL
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8767$7619$1WS4nL g$8767$11107$1WS4nL '#f)
   (g$8766$7620$1WS4nL
     g$8766$11108$1WS4nL
     (make-record-constructor-descriptor
       g$8765$7618$1WS4nL
       '#f
       g$8767$7619$1WS4nL))
   (g$interaction-env?$7621$1WS4nL
     g$interaction-env?$11109$1WS4nL
     (record-predicate g$8765$7618$1WS4nL))
   (g$make-interaction-env$7622$1WS4nL
     g$make-interaction-env$11110$1WS4nL
     (record-constructor g$8766$7620$1WS4nL))
   (g$interaction-env-rib$7623$1WS4nL
     g$interaction-env-rib$11111$1WS4nL
     (record-accessor g$8765$7618$1WS4nL '0))
   (g$interaction-env-r$7624$1WS4nL
     g$interaction-env-r$11112$1WS4nL
     (record-accessor g$8765$7618$1WS4nL '1))
   (g$interaction-env-locs$7625$1WS4nL
     g$interaction-env-locs$11113$1WS4nL
     (record-accessor g$8765$7618$1WS4nL '2))
   (g$set-interaction-env-rib!$7626$1WS4nL
     g$set-interaction-env-rib!$11114$1WS4nL
     (record-mutator g$8765$7618$1WS4nL '0))
   (g$set-interaction-env-r!$7627$1WS4nL
     g$set-interaction-env-r!$11115$1WS4nL
     (record-mutator g$8765$7618$1WS4nL '1))
   (g$set-interaction-env-locs!$7628$1WS4nL
     g$set-interaction-env-locs!$11116$1WS4nL
     (record-mutator g$8765$7618$1WS4nL '2))
   (g$rp$7629$1WS4nL
     g$rp$11117$1WS4nL
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10576$1WS4nL g$p$10577$1WS4nL)
          (display '"#<environment>" g$p$10577$1WS4nL)))))
   (g$interaction-environment-symbols$7630$1WS4nL
     g$interaction-environment-symbols$11118$1WS4nL
     (case-lambda
       (()
        (g$environment-symbols$7634$1WS4nL
          (g$interaction-environment$7662$1WS4nL)))))
   (g$environment-bindings$7631$1WS4nL
     g$environment-bindings$11119$1WS4nL
     (case-lambda
       ((g$e$10578$1WS4nL)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$10579$1WS4nL g$label$10580$1WS4nL)
               (g$parse-binding$7632$1WS4nL
                 (cons
                   g$name$10579$1WS4nL
                   (g$imported-label->binding$7076$1WS4nL
                     g$label$10580$1WS4nL)))))
            (g$env-names$7611$1WS4nL g$e$10578$1WS4nL)
            (g$env-labels$7612$1WS4nL g$e$10578$1WS4nL))))))
   (g$parse-binding$7632$1WS4nL
     g$parse-binding$11120$1WS4nL
     (case-lambda
       ((g$b$10581$1WS4nL)
        (cons
          (car g$b$10581$1WS4nL)
          ((case-lambda
             ((g$t$10582$1WS4nL)
              (if (g$memv$4996$1WS4nL g$t$10582$1WS4nL '(core-prim global))
                'procedure
                (if (g$memv$4996$1WS4nL
                      g$t$10582$1WS4nL
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$4996$1WS4nL g$t$10582$1WS4nL '($core-rtd))
                    'record
                    (if (eq? (car g$b$10581$1WS4nL)
                             (g$cadr$5165$1WS4nL g$b$10581$1WS4nL))
                      'syntax
                      'unknown))))))
           (g$cadr$5165$1WS4nL g$b$10581$1WS4nL))))))
   (g$environment?$7633$1WS4nL
     g$environment?$11121$1WS4nL
     (case-lambda
       ((g$x$10583$1WS4nL)
        ((case-lambda
           ((g$t$10584$1WS4nL)
            (if g$t$10584$1WS4nL
              g$t$10584$1WS4nL
              (begin '#f (g$interaction-env?$7621$1WS4nL g$x$10583$1WS4nL)))))
         (g$env?$7609$1WS4nL g$x$10583$1WS4nL)))))
   (g$environment-symbols$7634$1WS4nL
     g$environment-symbols$11122$1WS4nL
     (case-lambda
       ((g$x$10585$1WS4nL)
        (if (g$env?$7609$1WS4nL g$x$10585$1WS4nL)
          (vector->list (g$env-names$7611$1WS4nL g$x$10585$1WS4nL))
          (if (g$interaction-env?$7621$1WS4nL g$x$10585$1WS4nL)
            (map values
                 (g$rib-sym*$7217$1WS4nL
                   (g$interaction-env-rib$7623$1WS4nL g$x$10585$1WS4nL)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$10585$1WS4nL))))))
   (g$environment$7635$1WS4nL
     g$environment$11123$1WS4nL
     (case-lambda
       (g$imp*$10586$1WS4nL
        ((case-lambda
           ((g$itc$10587$1WS4nL)
            ((case-lambda
               ((g$imp-collector$10590$1WS4nL g$imp-collector$10591$1WS4nL)
                ((case-lambda
                   ((g$swap$10592$1WS4nL)
                    (dynamic-wind
                      g$swap$10592$1WS4nL
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$7594$1WS4nL
                                g$imp*$10586$1WS4nL)))
                           (case-lambda
                             ((g$subst-names$10595$1WS4nL
                                g$subst-labels$10596$1WS4nL)
                              ((case-lambda
                                 ((g$subst-labels$10597$1WS4nL
                                    g$subst-names$10598$1WS4nL)
                                  (g$make-env$7610$1WS4nL
                                    g$subst-names$10598$1WS4nL
                                    g$subst-labels$10597$1WS4nL
                                    g$itc$10587$1WS4nL)))
                               g$subst-labels$10596$1WS4nL
                               g$subst-names$10595$1WS4nL))))))
                      g$swap$10592$1WS4nL)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10599$1WS4nL)
                        (begin
                          (g$imp-collector$10590$1WS4nL
                            g$imp-collector$10591$1WS4nL)
                          (set! g$imp-collector$10591$1WS4nL
                            g$t$10599$1WS4nL))))
                     (g$imp-collector$10590$1WS4nL)))))))
             g$imp-collector$7599$1WS4nL
             g$itc$10587$1WS4nL)))
         (g$make-collector$7596$1WS4nL)))))
   (g$null-environment$7636$1WS4nL
     g$null-environment$11124$1WS4nL
     (case-lambda
       ((g$n$10600$1WS4nL)
        (begin
          (if (not (eqv? g$n$10600$1WS4nL '5))
            (assertion-violation 'null-environment '"not 5" g$n$10600$1WS4nL)
            (void))
          (g$environment$7635$1WS4nL '(psyntax null-environment-5))))))
   (g$scheme-report-environment$7637$1WS4nL
     g$scheme-report-environment$11125$1WS4nL
     (case-lambda
       ((g$n$10601$1WS4nL)
        (begin
          (if (not (eqv? g$n$10601$1WS4nL '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10601$1WS4nL)
            (void))
          (g$environment$7635$1WS4nL '(psyntax scheme-report-environment-5))))))
   (g$expand$7638$1WS4nL
     g$expand$11126$1WS4nL
     (case-lambda
       ((g$x$10602$1WS4nL g$env$10603$1WS4nL)
        (if (g$env?$7609$1WS4nL g$env$10603$1WS4nL)
          ((case-lambda
             ((g$rib$10604$1WS4nL)
              ((case-lambda
                 ((g$x$10605$1WS4nL
                    g$itc$10606$1WS4nL
                    g$rtc$10607$1WS4nL
                    g$vtc$10608$1WS4nL)
                  ((case-lambda
                     ((g$x$10609$1WS4nL)
                      (begin
                        (g$seal-rib!$7233$1WS4nL g$rib$10604$1WS4nL)
                        (values g$x$10609$1WS4nL (g$rtc$10607$1WS4nL)))))
                   ((case-lambda
                      ((g$top-level-context$10618$1WS4nL
                         g$inv-collector$10619$1WS4nL
                         g$vis-collector$10620$1WS4nL
                         g$imp-collector$10621$1WS4nL
                         g$top-level-context$10622$1WS4nL
                         g$inv-collector$10623$1WS4nL
                         g$vis-collector$10624$1WS4nL
                         g$imp-collector$10625$1WS4nL)
                       ((case-lambda
                          ((g$swap$10626$1WS4nL)
                           (dynamic-wind
                             g$swap$10626$1WS4nL
                             (case-lambda
                               (()
                                (g$chi-expr$7563$1WS4nL
                                  g$x$10605$1WS4nL
                                  '()
                                  '())))
                             g$swap$10626$1WS4nL)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10627$1WS4nL)
                                 (begin
                                   (g$top-level-context$10618$1WS4nL
                                     g$top-level-context$10622$1WS4nL)
                                   (set! g$top-level-context$10622$1WS4nL
                                     g$t$10627$1WS4nL))))
                              (g$top-level-context$10618$1WS4nL))
                             ((case-lambda
                                ((g$t$10628$1WS4nL)
                                 (begin
                                   (g$inv-collector$10619$1WS4nL
                                     g$inv-collector$10623$1WS4nL)
                                   (set! g$inv-collector$10623$1WS4nL
                                     g$t$10628$1WS4nL))))
                              (g$inv-collector$10619$1WS4nL))
                             ((case-lambda
                                ((g$t$10629$1WS4nL)
                                 (begin
                                   (g$vis-collector$10620$1WS4nL
                                     g$vis-collector$10624$1WS4nL)
                                   (set! g$vis-collector$10624$1WS4nL
                                     g$t$10629$1WS4nL))))
                              (g$vis-collector$10620$1WS4nL))
                             ((case-lambda
                                ((g$t$10630$1WS4nL)
                                 (begin
                                   (g$imp-collector$10621$1WS4nL
                                     g$imp-collector$10625$1WS4nL)
                                   (set! g$imp-collector$10625$1WS4nL
                                     g$t$10630$1WS4nL))))
                              (g$imp-collector$10621$1WS4nL))))))))
                    g$top-level-context$7663$1WS4nL
                    g$inv-collector$7597$1WS4nL
                    g$vis-collector$7598$1WS4nL
                    g$imp-collector$7599$1WS4nL
                    '#f
                    g$rtc$10607$1WS4nL
                    g$vtc$10608$1WS4nL
                    g$itc$10606$1WS4nL))))
               (g$make-stx$7240$1WS4nL
                 g$x$10602$1WS4nL
                 g$top-mark*$7204$1WS4nL
                 (list g$rib$10604$1WS4nL)
                 '())
               (g$env-itc$7613$1WS4nL g$env$10603$1WS4nL)
               (g$make-collector$7596$1WS4nL)
               (g$make-collector$7596$1WS4nL))))
           (g$make-top-rib$7595$1WS4nL
             (g$env-names$7611$1WS4nL g$env$10603$1WS4nL)
             (g$env-labels$7612$1WS4nL g$env$10603$1WS4nL)))
          (if (g$interaction-env?$7621$1WS4nL g$env$10603$1WS4nL)
            ((case-lambda
               ((g$rib$10631$1WS4nL g$r$10632$1WS4nL g$rtc$10633$1WS4nL)
                ((case-lambda
                   ((g$x$10634$1WS4nL)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$10645$1WS4nL
                               g$inv-collector$10646$1WS4nL
                               g$vis-collector$10647$1WS4nL
                               g$imp-collector$10648$1WS4nL
                               g$top-level-context$10649$1WS4nL
                               g$inv-collector$10650$1WS4nL
                               g$vis-collector$10651$1WS4nL
                               g$imp-collector$10652$1WS4nL)
                             ((case-lambda
                                ((g$swap$10653$1WS4nL)
                                 (dynamic-wind
                                   g$swap$10653$1WS4nL
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$7601$1WS4nL
                                        g$x$10634$1WS4nL
                                        g$rib$10631$1WS4nL
                                        g$r$10632$1WS4nL)))
                                   g$swap$10653$1WS4nL)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$10654$1WS4nL)
                                       (begin
                                         (g$top-level-context$10645$1WS4nL
                                           g$top-level-context$10649$1WS4nL)
                                         (set! g$top-level-context$10649$1WS4nL
                                           g$t$10654$1WS4nL))))
                                    (g$top-level-context$10645$1WS4nL))
                                   ((case-lambda
                                      ((g$t$10655$1WS4nL)
                                       (begin
                                         (g$inv-collector$10646$1WS4nL
                                           g$inv-collector$10650$1WS4nL)
                                         (set! g$inv-collector$10650$1WS4nL
                                           g$t$10655$1WS4nL))))
                                    (g$inv-collector$10646$1WS4nL))
                                   ((case-lambda
                                      ((g$t$10656$1WS4nL)
                                       (begin
                                         (g$vis-collector$10647$1WS4nL
                                           g$vis-collector$10651$1WS4nL)
                                         (set! g$vis-collector$10651$1WS4nL
                                           g$t$10656$1WS4nL))))
                                    (g$vis-collector$10647$1WS4nL))
                                   ((case-lambda
                                      ((g$t$10657$1WS4nL)
                                       (begin
                                         (g$imp-collector$10648$1WS4nL
                                           g$imp-collector$10652$1WS4nL)
                                         (set! g$imp-collector$10652$1WS4nL
                                           g$t$10657$1WS4nL))))
                                    (g$imp-collector$10648$1WS4nL))))))))
                          g$top-level-context$7663$1WS4nL
                          g$inv-collector$7597$1WS4nL
                          g$vis-collector$7598$1WS4nL
                          g$imp-collector$7599$1WS4nL
                          g$env$10603$1WS4nL
                          g$rtc$10633$1WS4nL
                          (g$make-collector$7596$1WS4nL)
                          (g$make-collector$7596$1WS4nL))))
                      (case-lambda
                        ((g$e$10658$1WS4nL g$r^$10659$1WS4nL)
                         ((case-lambda
                            ((g$r^$10660$1WS4nL g$e$10661$1WS4nL)
                             (begin
                               (g$set-interaction-env-r!$7627$1WS4nL
                                 g$env$10603$1WS4nL
                                 g$r^$10660$1WS4nL)
                               (values g$e$10661$1WS4nL (g$rtc$10633$1WS4nL)))))
                          g$r^$10659$1WS4nL
                          g$e$10658$1WS4nL))))))
                 (g$make-stx$7240$1WS4nL
                   g$x$10602$1WS4nL
                   g$top-mark*$7204$1WS4nL
                   (list g$rib$10631$1WS4nL)
                   '()))))
             (g$interaction-env-rib$7623$1WS4nL g$env$10603$1WS4nL)
             (g$interaction-env-r$7624$1WS4nL g$env$10603$1WS4nL)
             (g$make-collector$7596$1WS4nL))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10603$1WS4nL))))))
   (g$eval$7639$1WS4nL
     g$eval$11127$1WS4nL
     (case-lambda
       ((g$x$10662$1WS4nL g$env$10663$1WS4nL)
        (begin
          (if (not (g$environment?$7633$1WS4nL g$env$10663$1WS4nL))
            (error 'eval '"not an environment" g$env$10663$1WS4nL)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$7638$1WS4nL g$x$10662$1WS4nL g$env$10663$1WS4nL)))
            (case-lambda
              ((g$x$10666$1WS4nL g$invoke-req*$10667$1WS4nL)
               ((case-lambda
                  ((g$invoke-req*$10668$1WS4nL g$x$10669$1WS4nL)
                   (begin
                     (for-each
                       g$invoke-library$7077$1WS4nL
                       g$invoke-req*$10668$1WS4nL)
                     (eval-core
                       (g$expanded->core$6776$1WS4nL g$x$10669$1WS4nL)))))
                g$invoke-req*$10667$1WS4nL
                g$x$10666$1WS4nL))))))))
   (g$library-expander$7640$1WS4nL
     g$library-expander$11128$1WS4nL
     (case-lambda
       ((g$x$10670$1WS4nL g$filename$10671$1WS4nL g$verify-name$10672$1WS4nL)
        (letrec* ((g$build-visit-code$10673$1WS4nL
                    (case-lambda
                      ((g$macro*$10716$1WS4nL)
                       (if (null? g$macro*$10716$1WS4nL)
                         (g$build-void$7197$1WS4nL)
                         (g$build-sequence$7196$1WS4nL
                           '#f
                           (map (case-lambda
                                  ((g$x$10717$1WS4nL)
                                   ((case-lambda
                                      ((g$loc$10718$1WS4nL g$src$10719$1WS4nL)
                                       (list
                                         'set!
                                         g$loc$10718$1WS4nL
                                         g$src$10719$1WS4nL)))
                                    (car g$x$10717$1WS4nL)
                                    (g$cddr$5167$1WS4nL g$x$10717$1WS4nL))))
                                g$macro*$10716$1WS4nL))))))
                  (g$visit!$10674$1WS4nL
                    (case-lambda
                      ((g$macro*$10712$1WS4nL)
                       (for-each
                         (case-lambda
                           ((g$x$10713$1WS4nL)
                            ((case-lambda
                               ((g$loc$10714$1WS4nL g$proc$10715$1WS4nL)
                                (set-symbol-value!
                                  g$loc$10714$1WS4nL
                                  g$proc$10715$1WS4nL)))
                             (car g$x$10713$1WS4nL)
                             (g$cadr$5165$1WS4nL g$x$10713$1WS4nL))))
                         g$macro*$10712$1WS4nL)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$7603$1WS4nL
                 g$x$10670$1WS4nL
                 g$verify-name$10672$1WS4nL)))
            (case-lambda
              ((g$name$10684$1WS4nL
                 g$ver$10685$1WS4nL
                 g$imp*$10686$1WS4nL
                 g$inv*$10687$1WS4nL
                 g$vis*$10688$1WS4nL
                 g$invoke-code$10689$1WS4nL
                 g$macro*$10690$1WS4nL
                 g$export-subst$10691$1WS4nL
                 g$export-env$10692$1WS4nL)
               ((case-lambda
                  ((g$export-env$10693$1WS4nL
                     g$export-subst$10694$1WS4nL
                     g$macro*$10695$1WS4nL
                     g$invoke-code$10696$1WS4nL
                     g$vis*$10697$1WS4nL
                     g$inv*$10698$1WS4nL
                     g$imp*$10699$1WS4nL
                     g$ver$10700$1WS4nL
                     g$name$10701$1WS4nL)
                   ((case-lambda
                      ((g$id$10702$1WS4nL
                         g$name$10703$1WS4nL
                         g$ver$10704$1WS4nL
                         g$imp*$10705$1WS4nL
                         g$vis*$10706$1WS4nL
                         g$inv*$10707$1WS4nL
                         g$visit-proc$10708$1WS4nL
                         g$invoke-proc$10709$1WS4nL
                         g$visit-code$10710$1WS4nL
                         g$invoke-code$10711$1WS4nL)
                       (begin
                         (g$install-library$7075$1WS4nL
                           g$id$10702$1WS4nL
                           g$name$10703$1WS4nL
                           g$ver$10704$1WS4nL
                           g$imp*$10705$1WS4nL
                           g$vis*$10706$1WS4nL
                           g$inv*$10707$1WS4nL
                           g$export-subst$10694$1WS4nL
                           g$export-env$10693$1WS4nL
                           g$visit-proc$10708$1WS4nL
                           g$invoke-proc$10709$1WS4nL
                           g$visit-code$10710$1WS4nL
                           g$invoke-code$10711$1WS4nL
                           '#t
                           g$filename$10671$1WS4nL)
                         (values
                           g$id$10702$1WS4nL
                           g$name$10703$1WS4nL
                           g$ver$10704$1WS4nL
                           g$imp*$10705$1WS4nL
                           g$vis*$10706$1WS4nL
                           g$inv*$10707$1WS4nL
                           g$invoke-code$10711$1WS4nL
                           g$visit-code$10710$1WS4nL
                           g$export-subst$10694$1WS4nL
                           g$export-env$10693$1WS4nL))))
                    (gensym)
                    g$name$10701$1WS4nL
                    g$ver$10700$1WS4nL
                    (map g$library-spec$7081$1WS4nL g$imp*$10699$1WS4nL)
                    (map g$library-spec$7081$1WS4nL g$vis*$10697$1WS4nL)
                    (map g$library-spec$7081$1WS4nL g$inv*$10698$1WS4nL)
                    (case-lambda
                      (() (g$visit!$10674$1WS4nL g$macro*$10695$1WS4nL)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$6776$1WS4nL
                           g$invoke-code$10696$1WS4nL))))
                    (g$build-visit-code$10673$1WS4nL g$macro*$10695$1WS4nL)
                    g$invoke-code$10696$1WS4nL)))
                g$export-env$10692$1WS4nL
                g$export-subst$10691$1WS4nL
                g$macro*$10690$1WS4nL
                g$invoke-code$10689$1WS4nL
                g$vis*$10688$1WS4nL
                g$inv*$10687$1WS4nL
                g$imp*$10686$1WS4nL
                g$ver$10685$1WS4nL
                g$name$10684$1WS4nL))))))
       ((g$x$10720$1WS4nL g$filename$10721$1WS4nL)
        (g$library-expander$7640$1WS4nL
          g$x$10720$1WS4nL
          g$filename$10721$1WS4nL
          (case-lambda ((g$x$10722$1WS4nL) (values)))))
       ((g$x$10723$1WS4nL)
        (g$library-expander$7640$1WS4nL
          g$x$10723$1WS4nL
          '#f
          (case-lambda ((g$x$10724$1WS4nL) (values)))))))
   (g$boot-library-expand$7641$1WS4nL
     g$boot-library-expand$11129$1WS4nL
     (case-lambda
       ((g$x$10725$1WS4nL)
        (call-with-values
          (case-lambda (() (g$library-expander$7640$1WS4nL g$x$10725$1WS4nL)))
          (case-lambda
            ((g$id$10736$1WS4nL
               g$name$10737$1WS4nL
               g$ver$10738$1WS4nL
               g$imp*$10739$1WS4nL
               g$vis*$10740$1WS4nL
               g$inv*$10741$1WS4nL
               g$invoke-code$10742$1WS4nL
               g$visit-code$10743$1WS4nL
               g$export-subst$10744$1WS4nL
               g$export-env$10745$1WS4nL)
             ((case-lambda
                ((g$export-env$10746$1WS4nL
                   g$export-subst$10747$1WS4nL
                   g$visit-code$10748$1WS4nL
                   g$invoke-code$10749$1WS4nL
                   g$inv*$10750$1WS4nL
                   g$vis*$10751$1WS4nL
                   g$imp*$10752$1WS4nL
                   g$ver$10753$1WS4nL
                   g$name$10754$1WS4nL
                   g$id$10755$1WS4nL)
                 (values
                   g$name$10754$1WS4nL
                   g$invoke-code$10749$1WS4nL
                   g$export-subst$10747$1WS4nL
                   g$export-env$10746$1WS4nL)))
              g$export-env$10745$1WS4nL
              g$export-subst$10744$1WS4nL
              g$visit-code$10743$1WS4nL
              g$invoke-code$10742$1WS4nL
              g$inv*$10741$1WS4nL
              g$vis*$10740$1WS4nL
              g$imp*$10739$1WS4nL
              g$ver$10738$1WS4nL
              g$name$10737$1WS4nL
              g$id$10736$1WS4nL)))))))
   (g$rev-map-append$7642$1WS4nL
     g$rev-map-append$11130$1WS4nL
     (case-lambda
       ((g$f$10756$1WS4nL g$ls$10757$1WS4nL g$ac$10758$1WS4nL)
        (if (null? g$ls$10757$1WS4nL)
          g$ac$10758$1WS4nL
          (g$rev-map-append$7642$1WS4nL
            g$f$10756$1WS4nL
            (cdr g$ls$10757$1WS4nL)
            (cons
              (g$f$10756$1WS4nL (car g$ls$10757$1WS4nL))
              g$ac$10758$1WS4nL))))))
   (g$build-exports$7643$1WS4nL
     g$build-exports$11131$1WS4nL
     (case-lambda
       ((g$lex*+loc*$10759$1WS4nL g$init*$10760$1WS4nL)
        (g$build-sequence$7196$1WS4nL
          '#f
          (cons
            (g$build-void$7197$1WS4nL)
            (g$rev-map-append$7642$1WS4nL
              (case-lambda
                ((g$x$10761$1WS4nL)
                 (list 'set! (cdr g$x$10761$1WS4nL) (car g$x$10761$1WS4nL))))
              g$lex*+loc*$10759$1WS4nL
              g$init*$10760$1WS4nL))))))
   (g$make-export-subst$7644$1WS4nL
     g$make-export-subst$11132$1WS4nL
     (case-lambda
       ((g$name*$10762$1WS4nL g$id*$10763$1WS4nL)
        (map (case-lambda
               ((g$name$10764$1WS4nL g$id$10765$1WS4nL)
                ((case-lambda
                   ((g$label$10766$1WS4nL)
                    (begin
                      (if (not g$label$10766$1WS4nL)
                        (g$syntax-violation$7656$1WS4nL
                          '#f
                          '"cannot export unbound identifier"
                          g$id$10765$1WS4nL)
                        (void))
                      (cons g$name$10764$1WS4nL g$label$10766$1WS4nL))))
                 (g$id->label$7280$1WS4nL g$id$10765$1WS4nL))))
             g$name*$10762$1WS4nL
             g$id*$10763$1WS4nL))))
   (g$make-export-env/macros$7645$1WS4nL
     g$make-export-env/macros$11133$1WS4nL
     (case-lambda
       ((g$lex*$10767$1WS4nL g$loc*$10768$1WS4nL g$r$10769$1WS4nL)
        (letrec* ((g$lookup$10770$1WS4nL
                    (case-lambda
                      ((g$x$10785$1WS4nL)
                       ((letrec ((g$f$10786$1WS4nL
                                   (case-lambda
                                     ((g$x$10787$1WS4nL
                                        g$lex*$10788$1WS4nL
                                        g$loc*$10789$1WS4nL)
                                      (if (pair? g$lex*$10788$1WS4nL)
                                        (if (eq? g$x$10787$1WS4nL
                                                 (car g$lex*$10788$1WS4nL))
                                          (car g$loc*$10789$1WS4nL)
                                          (g$f$10786$1WS4nL
                                            g$x$10787$1WS4nL
                                            (cdr g$lex*$10788$1WS4nL)
                                            (cdr g$loc*$10789$1WS4nL)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$10786$1WS4nL)
                        g$x$10785$1WS4nL
                        g$lex*$10767$1WS4nL
                        g$loc*$10768$1WS4nL)))))
          ((letrec ((g$f$10771$1WS4nL
                      (case-lambda
                        ((g$r$10772$1WS4nL
                           g$env$10773$1WS4nL
                           g$global*$10774$1WS4nL
                           g$macro*$10775$1WS4nL)
                         (if (null? g$r$10772$1WS4nL)
                           (values
                             g$env$10773$1WS4nL
                             g$global*$10774$1WS4nL
                             g$macro*$10775$1WS4nL)
                           ((case-lambda
                              ((g$x$10776$1WS4nL)
                               ((case-lambda
                                  ((g$label$10777$1WS4nL g$b$10778$1WS4nL)
                                   ((case-lambda
                                      ((g$t$10779$1WS4nL)
                                       (if (g$memv$4996$1WS4nL
                                             g$t$10779$1WS4nL
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$10780$1WS4nL)
                                             ((case-lambda
                                                ((g$loc$10781$1WS4nL
                                                   g$type$10782$1WS4nL)
                                                 (g$f$10771$1WS4nL
                                                   (cdr g$r$10772$1WS4nL)
                                                   (cons
                                                     (g$cons*$5003$1WS4nL
                                                       g$label$10777$1WS4nL
                                                       g$type$10782$1WS4nL
                                                       g$loc$10781$1WS4nL)
                                                     g$env$10773$1WS4nL)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7489$1WS4nL
                                                         g$v$10780$1WS4nL)
                                                       g$loc$10781$1WS4nL)
                                                     g$global*$10774$1WS4nL)
                                                   g$macro*$10775$1WS4nL)))
                                              (g$lookup$10770$1WS4nL
                                                (g$lexical-var$7489$1WS4nL
                                                  g$v$10780$1WS4nL))
                                              (if (g$lexical-mutable?$7490$1WS4nL
                                                    g$v$10780$1WS4nL)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7285$1WS4nL
                                            g$b$10778$1WS4nL))
                                         (if (g$memv$4996$1WS4nL
                                               g$t$10779$1WS4nL
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$10783$1WS4nL)
                                               (g$f$10771$1WS4nL
                                                 (cdr g$r$10772$1WS4nL)
                                                 (cons
                                                   (g$cons*$5003$1WS4nL
                                                     g$label$10777$1WS4nL
                                                     'global-macro
                                                     g$loc$10783$1WS4nL)
                                                   g$env$10773$1WS4nL)
                                                 g$global*$10774$1WS4nL
                                                 (cons
                                                   (cons
                                                     g$loc$10783$1WS4nL
                                                     (g$binding-value$7285$1WS4nL
                                                       g$b$10778$1WS4nL))
                                                   g$macro*$10775$1WS4nL))))
                                            (gensym))
                                           (if (g$memv$4996$1WS4nL
                                                 g$t$10779$1WS4nL
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$10784$1WS4nL)
                                                 (g$f$10771$1WS4nL
                                                   (cdr g$r$10772$1WS4nL)
                                                   (cons
                                                     (g$cons*$5003$1WS4nL
                                                       g$label$10777$1WS4nL
                                                       'global-macro!
                                                       g$loc$10784$1WS4nL)
                                                     g$env$10773$1WS4nL)
                                                   g$global*$10774$1WS4nL
                                                   (cons
                                                     (cons
                                                       g$loc$10784$1WS4nL
                                                       (g$binding-value$7285$1WS4nL
                                                         g$b$10778$1WS4nL))
                                                     g$macro*$10775$1WS4nL))))
                                              (gensym))
                                             (if (g$memv$4996$1WS4nL
                                                   g$t$10779$1WS4nL
                                                   '($rtd $module))
                                               (g$f$10771$1WS4nL
                                                 (cdr g$r$10772$1WS4nL)
                                                 (cons
                                                   g$x$10776$1WS4nL
                                                   g$env$10773$1WS4nL)
                                                 g$global*$10774$1WS4nL
                                                 g$macro*$10775$1WS4nL)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7284$1WS4nL
                                                   g$b$10778$1WS4nL)
                                                 (g$binding-value$7285$1WS4nL
                                                   g$b$10778$1WS4nL))))))))
                                    (g$binding-type$7284$1WS4nL
                                      g$b$10778$1WS4nL))))
                                (car g$x$10776$1WS4nL)
                                (cdr g$x$10776$1WS4nL))))
                            (car g$r$10772$1WS4nL)))))))
             g$f$10771$1WS4nL)
           g$r$10769$1WS4nL
           '()
           '()
           '())))))
   (g$generate-temporaries$7646$1WS4nL
     g$generate-temporaries$11134$1WS4nL
     (case-lambda
       ((g$ls$10790$1WS4nL)
        ((case-lambda
           ((g$t$10791$1WS4nL)
            ((case-lambda
               ((g$ls/false$10792$1WS4nL)
                (if g$ls/false$10792$1WS4nL
                  (apply
                    (case-lambda
                      ((g$ls$10793$1WS4nL)
                       (map (case-lambda
                              ((g$x$10794$1WS4nL)
                               (g$make-stx$7240$1WS4nL
                                 ((case-lambda
                                    ((g$x$10795$1WS4nL)
                                     (if ((case-lambda
                                            ((g$t$10796$1WS4nL)
                                             (if g$t$10796$1WS4nL
                                               g$t$10796$1WS4nL
                                               (begin
                                                 '#f
                                                 (string? g$x$10795$1WS4nL)))))
                                          (symbol? g$x$10795$1WS4nL))
                                       (gensym g$x$10795$1WS4nL)
                                       (gensym 't))))
                                  (g$syntax->datum$7659$1WS4nL
                                    g$x$10794$1WS4nL))
                                 g$top-mark*$7204$1WS4nL
                                 '()
                                 '())))
                            g$ls$10793$1WS4nL)))
                    g$ls/false$10792$1WS4nL)
                  ((case-lambda
                     ((g$t$10797$1WS4nL)
                      ((case-lambda
                         ((g$ls/false$10798$1WS4nL)
                          (if g$ls/false$10798$1WS4nL
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$10798$1WS4nL)
                            (g$syntax-violation$7656$1WS4nL
                              '#f
                              '"invalid syntax"
                              g$t$10797$1WS4nL))))
                       (g$syntax-dispatch$7545$1WS4nL g$t$10797$1WS4nL '_))))
                   g$t$10791$1WS4nL))))
             (g$syntax-dispatch$7545$1WS4nL g$t$10791$1WS4nL 'each-any))))
         g$ls$10790$1WS4nL))))
   (g$free-identifier=?$7647$1WS4nL
     g$free-identifier=?$11135$1WS4nL
     (case-lambda
       ((g$x$10799$1WS4nL g$y$10800$1WS4nL)
        (if (g$id?$7267$1WS4nL g$x$10799$1WS4nL)
          (if (g$id?$7267$1WS4nL g$y$10800$1WS4nL)
            (g$free-id=?$7271$1WS4nL g$x$10799$1WS4nL g$y$10800$1WS4nL)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$10800$1WS4nL))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$10799$1WS4nL)))))
   (g$bound-identifier=?$7648$1WS4nL
     g$bound-identifier=?$11136$1WS4nL
     (case-lambda
       ((g$x$10801$1WS4nL g$y$10802$1WS4nL)
        (if (g$id?$7267$1WS4nL g$x$10801$1WS4nL)
          (if (g$id?$7267$1WS4nL g$y$10802$1WS4nL)
            (g$bound-id=?$7270$1WS4nL g$x$10801$1WS4nL g$y$10802$1WS4nL)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$10802$1WS4nL))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$10801$1WS4nL)))))
   (g$make-source-condition$7649$1WS4nL
     g$make-source-condition$11137$1WS4nL
     (case-lambda
       ((g$x$10803$1WS4nL)
        (letrec* ((g$11687$10804$1WS4nL
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$11690$1WS4nL
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11689$10805$1WS4nL '#f)
                  (g$11688$10806$1WS4nL
                    (make-record-constructor-descriptor
                      g$11687$10804$1WS4nL
                      &condition-rcd
                      g$11689$10805$1WS4nL))
                  (g$11686$10807$1WS4nL (record-predicate g$11687$10804$1WS4nL))
                  (g$make-source-condition$10808$1WS4nL
                    (record-constructor g$11688$10806$1WS4nL))
                  (g$11684$10809$1WS4nL
                    (record-accessor g$11687$10804$1WS4nL '0))
                  (g$11685$10810$1WS4nL
                    (record-accessor g$11687$10804$1WS4nL '1))
                  (g$source-condition?$10811$1WS4nL
                    (condition-predicate g$11687$10804$1WS4nL))
                  (g$source-filename$10812$1WS4nL
                    (condition-accessor
                      g$11687$10804$1WS4nL
                      g$11684$10809$1WS4nL))
                  (g$source-character$10813$1WS4nL
                    (condition-accessor
                      g$11687$10804$1WS4nL
                      g$11685$10810$1WS4nL)))
          (if (pair? g$x$10803$1WS4nL)
            (g$make-source-condition$10808$1WS4nL
              (car g$x$10803$1WS4nL)
              (cdr g$x$10803$1WS4nL))
            (condition))))))
   (g$extract-position-condition$7650$1WS4nL
     g$extract-position-condition$11138$1WS4nL
     (case-lambda
       ((g$x$10814$1WS4nL)
        (g$make-source-condition$7649$1WS4nL
          (g$expression-position$7651$1WS4nL g$x$10814$1WS4nL)))))
   (g$expression-position$7651$1WS4nL
     g$expression-position$11139$1WS4nL
     (case-lambda
       ((g$x$10815$1WS4nL)
        (if (g$stx?$7239$1WS4nL g$x$10815$1WS4nL)
          (begin
            '#f
            ((case-lambda
               ((g$x$10816$1WS4nL)
                (if (annotation? g$x$10816$1WS4nL)
                  (begin '#f (annotation-source g$x$10816$1WS4nL))
                  '#f)))
             (g$stx-expr$7241$1WS4nL g$x$10815$1WS4nL)))
          '#f))))
   (g$assertion-error$7652$1WS4nL
     g$assertion-error$11140$1WS4nL
     (case-lambda
       ((g$expr$10817$1WS4nL g$pos$10818$1WS4nL)
        (raise
          (condition
            (g$make-assertion-violation$5739$1WS4nL)
            (g$make-who-condition$5753$1WS4nL 'assert)
            (g$make-message-condition$5707$1WS4nL '"assertion failed")
            (g$make-irritants-condition$5745$1WS4nL (list g$expr$10817$1WS4nL))
            (g$make-source-condition$7649$1WS4nL g$pos$10818$1WS4nL))))))
   (g$syntax-error$7653$1WS4nL
     g$syntax-error$11141$1WS4nL
     (case-lambda
       ((g$x$10819$1WS4nL . g$args$10820$1WS4nL)
        (begin
          (if (not (g$for-all$5001$1WS4nL string? g$args$10820$1WS4nL))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$10820$1WS4nL)
            (void))
          (raise
            (condition
              (g$make-message-condition$5707$1WS4nL
                (if (null? g$args$10820$1WS4nL)
                  '"invalid syntax"
                  (apply string-append g$args$10820$1WS4nL)))
              (g$make-syntax-violation$5779$1WS4nL
                (g$syntax->datum$7659$1WS4nL g$x$10819$1WS4nL)
                '#f)
              (g$extract-position-condition$7650$1WS4nL g$x$10819$1WS4nL)
              (g$extract-trace$7654$1WS4nL g$x$10819$1WS4nL)))))))
   (g$extract-trace$7654$1WS4nL
     g$extract-trace$11142$1WS4nL
     (case-lambda
       ((g$x$10821$1WS4nL)
        (letrec* ((g$11714$10822$1WS4nL
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$11717$1WS4nL
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11716$10823$1WS4nL '#f)
                  (g$11715$10824$1WS4nL
                    (make-record-constructor-descriptor
                      g$11714$10822$1WS4nL
                      &condition-rcd
                      g$11716$10823$1WS4nL))
                  (g$11713$10825$1WS4nL (record-predicate g$11714$10822$1WS4nL))
                  (g$make-trace$10826$1WS4nL
                    (record-constructor g$11715$10824$1WS4nL))
                  (g$11712$10827$1WS4nL
                    (record-accessor g$11714$10822$1WS4nL '0))
                  (g$trace?$10828$1WS4nL
                    (condition-predicate g$11714$10822$1WS4nL))
                  (g$trace-form$10829$1WS4nL
                    (condition-accessor
                      g$11714$10822$1WS4nL
                      g$11712$10827$1WS4nL)))
          ((letrec ((g$f$10830$1WS4nL
                      (case-lambda
                        ((g$x$10831$1WS4nL)
                         (if (g$stx?$7239$1WS4nL g$x$10831$1WS4nL)
                           (apply
                             condition
                             (g$make-trace$10826$1WS4nL g$x$10831$1WS4nL)
                             (map g$f$10830$1WS4nL
                                  (g$stx-ae*$7244$1WS4nL g$x$10831$1WS4nL)))
                           (if (annotation? g$x$10831$1WS4nL)
                             (g$make-trace$10826$1WS4nL
                               (g$make-stx$7240$1WS4nL
                                 g$x$10831$1WS4nL
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$10830$1WS4nL)
           g$x$10821$1WS4nL)))))
   (g$syntax-violation*$7655$1WS4nL
     g$syntax-violation*$11143$1WS4nL
     (case-lambda
       ((g$who$10832$1WS4nL
          g$msg$10833$1WS4nL
          g$form$10834$1WS4nL
          g$condition-object$10835$1WS4nL)
        (begin
          (if (not (string? g$msg$10833$1WS4nL))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$10833$1WS4nL)
            (void))
          ((case-lambda
             ((g$who$10836$1WS4nL)
              (raise
                (condition
                  (if g$who$10836$1WS4nL
                    (g$make-who-condition$5753$1WS4nL g$who$10836$1WS4nL)
                    (condition))
                  (g$make-message-condition$5707$1WS4nL g$msg$10833$1WS4nL)
                  g$condition-object$10835$1WS4nL
                  (g$extract-position-condition$7650$1WS4nL g$form$10834$1WS4nL)
                  (g$extract-trace$7654$1WS4nL g$form$10834$1WS4nL)))))
           (if ((case-lambda
                  ((g$t$10837$1WS4nL)
                   (if g$t$10837$1WS4nL
                     g$t$10837$1WS4nL
                     (begin '#f (symbol? g$who$10832$1WS4nL)))))
                (string? g$who$10832$1WS4nL))
             g$who$10832$1WS4nL
             (if (not g$who$10832$1WS4nL)
               ((case-lambda
                  ((g$t$10838$1WS4nL)
                   ((case-lambda
                      ((g$ls/false$10839$1WS4nL)
                       (if (if g$ls/false$10839$1WS4nL
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$10840$1WS4nL)
                                    (g$id?$7267$1WS4nL g$id$10840$1WS4nL)))
                                 g$ls/false$10839$1WS4nL))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$10841$1WS4nL)
                              (g$syntax->datum$7659$1WS4nL g$id$10841$1WS4nL)))
                           g$ls/false$10839$1WS4nL)
                         ((case-lambda
                            ((g$t$10842$1WS4nL)
                             ((case-lambda
                                ((g$ls/false$10843$1WS4nL)
                                 (if (if g$ls/false$10843$1WS4nL
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$10844$1WS4nL
                                                g$rest$10845$1WS4nL)
                                              (g$id?$7267$1WS4nL
                                                g$id$10844$1WS4nL)))
                                           g$ls/false$10843$1WS4nL))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$10846$1WS4nL g$rest$10847$1WS4nL)
                                        (g$syntax->datum$7659$1WS4nL
                                          g$id$10846$1WS4nL)))
                                     g$ls/false$10843$1WS4nL)
                                   ((case-lambda
                                      ((g$t$10848$1WS4nL)
                                       ((case-lambda
                                          ((g$ls/false$10849$1WS4nL)
                                           (if g$ls/false$10849$1WS4nL
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$10849$1WS4nL)
                                             (g$syntax-violation$7656$1WS4nL
                                               '#f
                                               '"invalid syntax"
                                               g$t$10848$1WS4nL))))
                                        (g$syntax-dispatch$7545$1WS4nL
                                          g$t$10848$1WS4nL
                                          '_))))
                                    g$t$10842$1WS4nL))))
                              (g$syntax-dispatch$7545$1WS4nL
                                g$t$10842$1WS4nL
                                '(any . any)))))
                          g$t$10838$1WS4nL))))
                    (g$syntax-dispatch$7545$1WS4nL g$t$10838$1WS4nL 'any))))
                g$form$10834$1WS4nL)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$10832$1WS4nL))))))))
   (g$syntax-violation$7656$1WS4nL
     g$syntax-violation$11144$1WS4nL
     (case-lambda
       ((g$who$10850$1WS4nL g$msg$10851$1WS4nL g$form$10852$1WS4nL)
        (g$syntax-violation$7656$1WS4nL
          g$who$10850$1WS4nL
          g$msg$10851$1WS4nL
          g$form$10852$1WS4nL
          '#f))
       ((g$who$10853$1WS4nL
          g$msg$10854$1WS4nL
          g$form$10855$1WS4nL
          g$subform$10856$1WS4nL)
        (g$syntax-violation*$7655$1WS4nL
          g$who$10853$1WS4nL
          g$msg$10854$1WS4nL
          g$form$10855$1WS4nL
          (g$make-syntax-violation$5779$1WS4nL
            (g$syntax->datum$7659$1WS4nL g$form$10855$1WS4nL)
            (g$syntax->datum$7659$1WS4nL g$subform$10856$1WS4nL))))))
   (g$identifier?$7657$1WS4nL
     g$identifier?$11145$1WS4nL
     (case-lambda ((g$x$10857$1WS4nL) (g$id?$7267$1WS4nL g$x$10857$1WS4nL))))
   (g$datum->syntax$7658$1WS4nL
     g$datum->syntax$11146$1WS4nL
     (case-lambda
       ((g$id$10858$1WS4nL g$datum$10859$1WS4nL)
        (if (g$id?$7267$1WS4nL g$id$10858$1WS4nL)
          (g$datum->stx$7250$1WS4nL g$id$10858$1WS4nL g$datum$10859$1WS4nL)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$10858$1WS4nL)))))
   (g$syntax->datum$7659$1WS4nL
     g$syntax->datum$11147$1WS4nL
     (case-lambda
       ((g$x$10860$1WS4nL) (g$stx->datum$7278$1WS4nL g$x$10860$1WS4nL))))
   (g$compile-r6rs-top-level$7660$1WS4nL
     g$compile-r6rs-top-level$11148$1WS4nL
     (case-lambda
       ((g$x*$10861$1WS4nL)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$7605$1WS4nL g$x*$10861$1WS4nL)))
          (case-lambda
            ((g$lib*$10864$1WS4nL g$invoke-code$10865$1WS4nL)
             ((case-lambda
                ((g$invoke-code$10866$1WS4nL g$lib*$10867$1WS4nL)
                 (case-lambda
                   (()
                    (begin
                      (for-each
                        g$invoke-library$7077$1WS4nL
                        g$lib*$10867$1WS4nL)
                      (eval-core
                        (g$expanded->core$6776$1WS4nL
                          g$invoke-code$10866$1WS4nL)))))))
              g$invoke-code$10865$1WS4nL
              g$lib*$10864$1WS4nL)))))))
   (g$pre-compile-r6rs-top-level$7661$1WS4nL
     g$pre-compile-r6rs-top-level$11149$1WS4nL
     (case-lambda
       ((g$x*$10868$1WS4nL)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$7605$1WS4nL g$x*$10868$1WS4nL)))
          (case-lambda
            ((g$lib*$10871$1WS4nL g$invoke-code$10872$1WS4nL)
             ((case-lambda
                ((g$invoke-code$10873$1WS4nL g$lib*$10874$1WS4nL)
                 (begin
                   (for-each g$invoke-library$7077$1WS4nL g$lib*$10874$1WS4nL)
                   (compile-core
                     (g$expanded->core$6776$1WS4nL
                       g$invoke-code$10873$1WS4nL)))))
              g$invoke-code$10872$1WS4nL
              g$lib*$10871$1WS4nL)))))))
   (g$interaction-environment$7662$1WS4nL
     g$interaction-environment$11150$1WS4nL
     ((case-lambda
        ((g$the-env$10875$1WS4nL)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$10876$1WS4nL)
                (if g$t$10876$1WS4nL
                  g$t$10876$1WS4nL
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$10877$1WS4nL g$rib$10878$1WS4nL)
                        (begin
                          ((case-lambda
                             ((g$subst$10879$1WS4nL)
                              (begin
                                (g$set-rib-sym*!$7222$1WS4nL
                                  g$rib$10878$1WS4nL
                                  (map car g$subst$10879$1WS4nL))
                                (g$set-rib-mark**!$7223$1WS4nL
                                  g$rib$10878$1WS4nL
                                  (map (case-lambda
                                         ((g$x$10880$1WS4nL)
                                          g$top-mark*$7204$1WS4nL))
                                       g$subst$10879$1WS4nL))
                                (g$set-rib-label*!$7224$1WS4nL
                                  g$rib$10878$1WS4nL
                                  (map cdr g$subst$10879$1WS4nL)))))
                           (g$library-subst$7034$1WS4nL g$lib$10877$1WS4nL))
                          ((case-lambda
                             ((g$env$10881$1WS4nL)
                              (begin
                                (set! g$the-env$10875$1WS4nL g$env$10881$1WS4nL)
                                g$env$10881$1WS4nL)))
                           (g$make-interaction-env$7622$1WS4nL
                             g$rib$10878$1WS4nL
                             '()
                             '())))))
                     (g$find-library-by-name$7070$1WS4nL '(ironscheme))
                     (g$make-cache-rib$7228$1WS4nL))))))
             g$the-env$10875$1WS4nL)))))
      '#f))
   (g$top-level-context$7663$1WS4nL
     g$top-level-context$11151$1WS4nL
     (g$make-parameter$6530$1WS4nL '#f)))
  (g$current-library-expander$7067$1WS4nL g$library-expander$7640$1WS4nL))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$6773$1WS4nL
      (case-lambda
        ((g$x$11204$1WS4nL)
         ((case-lambda
            ((g$t$11205$1WS4nL)
             (if g$t$11205$1WS4nL (cdr g$t$11205$1WS4nL) '#f)))
          (g$assq$4991$1WS4nL
            g$x$11204$1WS4nL
            '((ellipsis-map . g$ellipsis-map$11038$1WS4nL)
              (ironscheme-build . g$ironscheme-build$11197$1WS4nL)
              (syntax-error . g$syntax-error$11141$1WS4nL)
              (syntax-dispatch . g$syntax-dispatch$11033$1WS4nL)
              (compile-system-libraries
                .
                g$compile-system-libraries$11199$1WS4nL)
              (compile->closure . g$compile->closure$11201$1WS4nL)
              (compile . g$compile$11200$1WS4nL)
              (load . g$load$11196$1WS4nL)
              (interaction-environment . g$interaction-environment$11150$1WS4nL)
              (string-ci>? . g$string-ci>?$5925$1WS4nL)
              (string-ci>=? . g$string-ci>=?$5927$1WS4nL)
              (string-ci=? . g$string-ci=?$5923$1WS4nL)
              (string-ci<? . g$string-ci<?$5924$1WS4nL)
              (string-ci<=? . g$string-ci<=?$5926$1WS4nL)
              (char-ci>? . g$char-ci>?$5930$1WS4nL)
              (char-ci>=? . g$char-ci>=?$5932$1WS4nL)
              (char-ci=? . g$char-ci=?$5928$1WS4nL)
              (char-ci<? . g$char-ci<?$5929$1WS4nL)
              (char-ci<=? . g$char-ci<=?$5931$1WS4nL)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$10971$1WS4nL)
              (variable-transformer? . g$variable-transformer?$10970$1WS4nL)
              (make-variable-transformer
                .
                g$make-variable-transformer$10969$1WS4nL)
              (identifier? . g$identifier?$11145$1WS4nL)
              (generate-temporaries . g$generate-temporaries$11134$1WS4nL)
              (free-identifier=? . g$free-identifier=?$11135$1WS4nL)
              (syntax->datum . g$syntax->datum$11147$1WS4nL)
              (datum->syntax . g$datum->syntax$11146$1WS4nL)
              (bound-identifier=? . g$bound-identifier=?$11136$1WS4nL)
              (delete-file . g$delete-file$5459$1WS4nL)
              (file-exists? . g$file-exists?$5458$1WS4nL)
              (list-sort . g$list-sort$5850$1WS4nL)
              (make-eqv-hashtable . g$make-eqv-hashtable$5440$1WS4nL)
              (make-eq-hashtable . g$make-eq-hashtable$5439$1WS4nL)
              (hashtable-update! . g$hashtable-update!$5446$1WS4nL)
              (hashtable-size . g$hashtable-size$5441$1WS4nL)
              (hashtable-set! . g$hashtable-set!$5443$1WS4nL)
              (hashtable-ref . g$hashtable-ref$5442$1WS4nL)
              (hashtable-delete! . g$hashtable-delete!$5444$1WS4nL)
              (hashtable-contains? . g$hashtable-contains?$5445$1WS4nL)
              (hashtable-clear! . g$hashtable-clear!$5447$1WS4nL)
              (call-with-output-file . g$call-with-output-file$6276$1WS4nL)
              (call-with-input-file . g$call-with-input-file$6275$1WS4nL)
              (with-output-to-file . g$with-output-to-file$6274$1WS4nL)
              (with-input-from-file . g$with-input-from-file$6273$1WS4nL)
              (port? . g$port?$6239$1WS4nL)
              (open-string-output-port . g$open-string-output-port$6238$1WS4nL)
              (make-i/o-write-error . g$make-i/o-write-error$6161$1WS4nL)
              (make-i/o-read-error . g$make-i/o-read-error$6155$1WS4nL)
              (make-i/o-port-error . g$make-i/o-port-error$6207$1WS4nL)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6167$1WS4nL)
              (make-i/o-filename-error . g$make-i/o-filename-error$6175$1WS4nL)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6183$1WS4nL)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6189$1WS4nL)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6201$1WS4nL)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6195$1WS4nL)
              (make-i/o-error . g$make-i/o-error$6149$1WS4nL)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6221$1WS4nL)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6215$1WS4nL)
              (i/o-write-error? . g$i/o-write-error?$6162$1WS4nL)
              (i/o-read-error? . g$i/o-read-error?$6156$1WS4nL)
              (i/o-port-error? . g$i/o-port-error?$6209$1WS4nL)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6169$1WS4nL)
              (i/o-error-position . g$i/o-error-position$6170$1WS4nL)
              (i/o-filename-error? . g$i/o-filename-error?$6177$1WS4nL)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6184$1WS4nL)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6190$1WS4nL)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6202$1WS4nL)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6196$1WS4nL)
              (i/o-error? . g$i/o-error?$6150$1WS4nL)
              (i/o-error-port . g$i/o-error-port$6210$1WS4nL)
              (i/o-error-filename . g$i/o-error-filename$6178$1WS4nL)
              (i/o-encoding-error? . g$i/o-encoding-error?$6223$1WS4nL)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6224$1WS4nL)
              (i/o-decoding-error? . g$i/o-decoding-error?$6216$1WS4nL)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6240$1WS4nL)
              (scheme-report-environment
                .
                g$scheme-report-environment$11125$1WS4nL)
              (quotient . g$quotient$5817$1WS4nL)
              (null-environment . g$null-environment$11124$1WS4nL)
              (remainder . g$remainder$5818$1WS4nL)
              (modulo . g$modulo$5819$1WS4nL)
              (force . g$force$5821$1WS4nL)
              (command-line . g$command-line$11193$1WS4nL)
              (remove . g$remove$5006$1WS4nL)
              (remv . g$remv$5007$1WS4nL)
              (remp . g$remp$4989$1WS4nL)
              (remq . g$remq$5008$1WS4nL)
              (partition . g$partition$4988$1WS4nL)
              (memv . g$memv$4996$1WS4nL)
              (memq . g$memq$4995$1WS4nL)
              (memp . g$memp$4998$1WS4nL)
              (member . g$member$4997$1WS4nL)
              (exists . g$exists$5002$1WS4nL)
              (for-all . g$for-all$5001$1WS4nL)
              (fold-right . g$fold-right$5005$1WS4nL)
              (fold-left . g$fold-left$5004$1WS4nL)
              (find . g$find$4987$1WS4nL)
              (filter . g$filter$4990$1WS4nL)
              (cons* . g$cons*$5003$1WS4nL)
              (assv . g$assv$4992$1WS4nL)
              (assq . g$assq$4991$1WS4nL)
              (assp . g$assp$4994$1WS4nL)
              (assoc . g$assoc$4993$1WS4nL)
              (eval . g$eval$11127$1WS4nL)
              (environment . g$environment$11123$1WS4nL)
              (make-enumeration . g$make-enumeration$6407$1WS4nL)
              (enum-set=? . g$enum-set=?$6414$1WS4nL)
              (enum-set-universe . g$enum-set-universe$6408$1WS4nL)
              (enum-set-union . g$enum-set-union$6415$1WS4nL)
              (enum-set-subset? . g$enum-set-subset?$6413$1WS4nL)
              (enum-set-projection . g$enum-set-projection$6419$1WS4nL)
              (enum-set-member? . g$enum-set-member?$6412$1WS4nL)
              (enum-set-intersection . g$enum-set-intersection$6416$1WS4nL)
              (enum-set-indexer . g$enum-set-indexer$6409$1WS4nL)
              (enum-set-difference . g$enum-set-difference$6417$1WS4nL)
              (enum-set-constructor . g$enum-set-constructor$6410$1WS4nL)
              (enum-set-complement . g$enum-set-complement$6418$1WS4nL)
              (enum-set->list . g$enum-set->list$6411$1WS4nL)
              (who-condition? . g$who-condition?$5755$1WS4nL)
              (warning? . g$warning?$5716$1WS4nL)
              (violation? . g$violation?$5734$1WS4nL)
              (undefined-violation? . g$undefined-violation?$5790$1WS4nL)
              (syntax-violation? . g$syntax-violation?$5782$1WS4nL)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$5784$1WS4nL)
              (syntax-violation-form . g$syntax-violation-form$5783$1WS4nL)
              (syntax-violation . g$syntax-violation$11144$1WS4nL)
              (serious-condition? . g$serious-condition?$5722$1WS4nL)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5762$1WS4nL)
              (message-condition? . g$message-condition?$5709$1WS4nL)
              (make-who-condition . g$make-who-condition$5753$1WS4nL)
              (make-warning . g$make-warning$5715$1WS4nL)
              (make-violation . g$make-violation$5733$1WS4nL)
              (make-undefined-violation
                .
                g$make-undefined-violation$5789$1WS4nL)
              (make-syntax-violation . g$make-syntax-violation$5779$1WS4nL)
              (make-serious-condition . g$make-serious-condition$5721$1WS4nL)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5761$1WS4nL)
              (make-message-condition . g$make-message-condition$5707$1WS4nL)
              (make-lexical-violation . g$make-lexical-violation$5773$1WS4nL)
              (make-irritants-condition
                .
                g$make-irritants-condition$5745$1WS4nL)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5767$1WS4nL)
              (make-error . g$make-error$5727$1WS4nL)
              (make-assertion-violation
                .
                g$make-assertion-violation$5739$1WS4nL)
              (lexical-violation? . g$lexical-violation?$5774$1WS4nL)
              (irritants-condition? . g$irritants-condition?$5747$1WS4nL)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5768$1WS4nL)
              (error? . g$error?$5728$1WS4nL)
              (condition-who . g$condition-who$5756$1WS4nL)
              (condition-message . g$condition-message$5710$1WS4nL)
              (condition-irritants . g$condition-irritants$5748$1WS4nL)
              (assertion-violation? . g$assertion-violation?$5740$1WS4nL)
              (native-endianness . g$native-endianness$5572$1WS4nL)
              (bytevector-u64-set! . g$bytevector-u64-set!$5593$1WS4nL)
              (bytevector-u64-ref . g$bytevector-u64-ref$5589$1WS4nL)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5595$1WS4nL)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5591$1WS4nL)
              (bytevector-u32-set! . g$bytevector-u32-set!$5585$1WS4nL)
              (bytevector-u32-ref . g$bytevector-u32-ref$5581$1WS4nL)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5587$1WS4nL)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5583$1WS4nL)
              (bytevector-u16-set! . g$bytevector-u16-set!$5577$1WS4nL)
              (bytevector-u16-ref . g$bytevector-u16-ref$5573$1WS4nL)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5579$1WS4nL)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5575$1WS4nL)
              (bytevector-s64-set! . g$bytevector-s64-set!$5594$1WS4nL)
              (bytevector-s64-ref . g$bytevector-s64-ref$5590$1WS4nL)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5596$1WS4nL)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5592$1WS4nL)
              (bytevector-s32-set! . g$bytevector-s32-set!$5586$1WS4nL)
              (bytevector-s32-ref . g$bytevector-s32-ref$5582$1WS4nL)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5588$1WS4nL)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5584$1WS4nL)
              (bytevector-s16-set! . g$bytevector-s16-set!$5578$1WS4nL)
              (bytevector-s16-ref . g$bytevector-s16-ref$5574$1WS4nL)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5580$1WS4nL)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5576$1WS4nL)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5599$1WS4nL)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5597$1WS4nL)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5600$1WS4nL)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5598$1WS4nL)
              (no-nans-violation? . g$no-nans-violation?$6064$1WS4nL)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$6058$1WS4nL)
              (make-no-nans-violation . g$make-no-nans-violation$6063$1WS4nL)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6057$1WS4nL)
              (fxrotate-bit-field . g$fxrotate-bit-field$6040$1WS4nL)
              (fxif . g$fxif$6034$1WS4nL)
              (fxcopy-bit-field . g$fxcopy-bit-field$6037$1WS4nL)
              (fxcopy-bit . g$fxcopy-bit$6035$1WS4nL)
              (fxbit-field . g$fxbit-field$6036$1WS4nL)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$6039$1WS4nL)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6038$1WS4nL)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$5986$1WS4nL)
              (bitwise-if . g$bitwise-if$5980$1WS4nL)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$5983$1WS4nL)
              (bitwise-copy-bit . g$bitwise-copy-bit$5981$1WS4nL)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$5985$1WS4nL)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$5984$1WS4nL)
              (symbol=? . g$symbol=?$5197$1WS4nL)
              (string>? . g$string>?$5194$1WS4nL)
              (string>=? . g$string>=?$5196$1WS4nL)
              (string=? . g$string=?$5192$1WS4nL)
              (string<? . g$string<?$5193$1WS4nL)
              (string<=? . g$string<=?$5195$1WS4nL)
              (rationalize . g$rationalize$5204$1WS4nL)
              (char>? . g$char>?$5201$1WS4nL)
              (char>=? . g$char>=?$5203$1WS4nL)
              (char=? . g$char=?$5199$1WS4nL)
              (char<? . g$char<?$5200$1WS4nL)
              (char<=? . g$char<=?$5202$1WS4nL)
              (cddddr . g$cddddr$5191$1WS4nL)
              (cdddar . g$cdddar$5190$1WS4nL)
              (cddadr . g$cddadr$5189$1WS4nL)
              (cddaar . g$cddaar$5188$1WS4nL)
              (cdaddr . g$cdaddr$5187$1WS4nL)
              (cdadar . g$cdadar$5186$1WS4nL)
              (cdaadr . g$cdaadr$5185$1WS4nL)
              (cdaaar . g$cdaaar$5184$1WS4nL)
              (cadddr . g$cadddr$5183$1WS4nL)
              (caddar . g$caddar$5182$1WS4nL)
              (cadadr . g$cadadr$5181$1WS4nL)
              (cadaar . g$cadaar$5180$1WS4nL)
              (caaddr . g$caaddr$5179$1WS4nL)
              (caadar . g$caadar$5178$1WS4nL)
              (caaadr . g$caaadr$5177$1WS4nL)
              (caaaar . g$caaaar$5176$1WS4nL)
              (cdddr . g$cdddr$5175$1WS4nL)
              (cddar . g$cddar$5174$1WS4nL)
              (cdadr . g$cdadr$5173$1WS4nL)
              (cdaar . g$cdaar$5172$1WS4nL)
              (caddr . g$caddr$5171$1WS4nL)
              (cadar . g$cadar$5170$1WS4nL)
              (caadr . g$caadr$5169$1WS4nL)
              (caaar . g$caaar$5168$1WS4nL)
              (cddr . g$cddr$5167$1WS4nL)
              (cdar . g$cdar$5166$1WS4nL)
              (cadr . g$cadr$5165$1WS4nL)
              (caar . g$caar$5164$1WS4nL)
              (boolean=? . g$boolean=?$5198$1WS4nL)
              (enum-set? . g$enum?$6388$1WS4nL)
              (make-promise . g$make-promise$5820$1WS4nL)
              (load/args . g$load/args$11195$1WS4nL)
              (printf . g$printf$6443$1WS4nL)
              (fprintf . g$fprintf$6444$1WS4nL)
              (format . g$format$6445$1WS4nL)
              (trace-printer . g$trace-printer$11192$1WS4nL)
              (make-traced-macro . g$make-traced-macro$6449$1WS4nL)
              (assertion-error . g$assertion-error$11140$1WS4nL)
              (make-parameter . g$make-parameter$6530$1WS4nL)
              (environment-bindings . g$environment-bindings$11119$1WS4nL)
              (environment-symbols . g$environment-symbols$11122$1WS4nL)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11118$1WS4nL)
              (library-path . g$library-path$7059$1WS4nL)
              (expand . g$expand$11126$1WS4nL)))))))
    (g$install-library$7075$1WS4nL
      'g$12435$1WS4nL
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12372$1WS4nL)
        (cosh . g$12371$1WS4nL)
        (sinh . g$12370$1WS4nL)
        (make-guid . g$12369$1WS4nL)
        (unspecified? . g$12368$1WS4nL)
        (make-trace . g$12367$1WS4nL)
        (make-list . g$12366$1WS4nL)
        (last-pair . g$12365$1WS4nL)
        (load-r5rs . g$12364$1WS4nL)
        (license . g$12363$1WS4nL)
        (stacktrace . g$12362$1WS4nL)
        (ironscheme-build . g$11786$1WS4nL)
        (set-symbol-value! . g$12348$1WS4nL)
        (symbol-value . g$12347$1WS4nL)
        (ungensym . g$12346$1WS4nL)
        (gensym . g$12345$1WS4nL)
        (void . g$12344$1WS4nL)
        (compile-system-libraries . g$11788$1WS4nL)
        (compile->closure . g$11790$1WS4nL)
        (compile . g$11789$1WS4nL)
        (load . g$11785$1WS4nL)
        (interaction-environment . g$8816$1WS4nL)
        (string-upcase . g$12340$1WS4nL)
        (string-titlecase . g$12339$1WS4nL)
        (string-normalize-nfkd . g$12338$1WS4nL)
        (string-normalize-nfkc . g$12337$1WS4nL)
        (string-normalize-nfd . g$12336$1WS4nL)
        (string-normalize-nfc . g$12335$1WS4nL)
        (string-foldcase . g$12334$1WS4nL)
        (string-downcase . g$12333$1WS4nL)
        (string-ci>? . g$6917$1WS4nL)
        (string-ci>=? . g$6919$1WS4nL)
        (string-ci=? . g$6915$1WS4nL)
        (string-ci<? . g$6916$1WS4nL)
        (string-ci<=? . g$6918$1WS4nL)
        (char-whitespace? . g$12332$1WS4nL)
        (char-upper-case? . g$12331$1WS4nL)
        (char-title-case? . g$12330$1WS4nL)
        (char-numeric? . g$12329$1WS4nL)
        (char-lower-case? . g$12328$1WS4nL)
        (char-general-category . g$12327$1WS4nL)
        (char-upcase . g$12326$1WS4nL)
        (char-titlecase . g$12325$1WS4nL)
        (char-foldcase . g$12324$1WS4nL)
        (char-downcase . g$12323$1WS4nL)
        (char-ci>? . g$6956$1WS4nL)
        (char-ci>=? . g$6958$1WS4nL)
        (char-ci=? . g$6954$1WS4nL)
        (char-ci<? . g$6955$1WS4nL)
        (char-ci<=? . g$6957$1WS4nL)
        (char-alphabetic? . g$12322$1WS4nL)
        (make-variable-transformer . g$8413$1WS4nL)
        (identifier? . g$8811$1WS4nL)
        (generate-temporaries . g$8800$1WS4nL)
        (free-identifier=? . g$8801$1WS4nL)
        (syntax->datum . g$8813$1WS4nL)
        (datum->syntax . g$8812$1WS4nL)
        (bound-identifier=? . g$8802$1WS4nL)
        (record-type-descriptor? . g$12321$1WS4nL)
        (record-predicate . g$12320$1WS4nL)
        (record-mutator . g$12319$1WS4nL)
        (record-constructor . g$12318$1WS4nL)
        (record-accessor . g$12317$1WS4nL)
        (make-record-type-descriptor . g$12316$1WS4nL)
        (make-record-constructor-descriptor . g$12315$1WS4nL)
        (record? . g$12314$1WS4nL)
        (record-type-uid . g$12313$1WS4nL)
        (record-type-sealed? . g$12312$1WS4nL)
        (record-type-parent . g$12311$1WS4nL)
        (record-type-opaque? . g$12310$1WS4nL)
        (record-type-name . g$12309$1WS4nL)
        (record-type-generative? . g$12308$1WS4nL)
        (record-type-field-names . g$12307$1WS4nL)
        (record-rtd . g$12306$1WS4nL)
        (record-field-mutable? . g$12305$1WS4nL)
        (delete-file . g$6492$1WS4nL)
        (file-exists? . g$6491$1WS4nL)
        (vector-sort! . g$12304$1WS4nL)
        (vector-sort . g$12303$1WS4nL)
        (list-sort . g$6855$1WS4nL)
        (symbol-hash . g$12302$1WS4nL)
        (string-ci-hash . g$12301$1WS4nL)
        (string-hash . g$12300$1WS4nL)
        (equal-hash . g$12299$1WS4nL)
        (hashtable-equivalence-function . g$12298$1WS4nL)
        (make-hashtable . g$12297$1WS4nL)
        (hashtable-hash-function . g$12296$1WS4nL)
        (make-eqv-hashtable . g$6459$1WS4nL)
        (make-eq-hashtable . g$6458$1WS4nL)
        (hashtable? . g$12295$1WS4nL)
        (hashtable-update! . g$6465$1WS4nL)
        (hashtable-size . g$6460$1WS4nL)
        (hashtable-set! . g$6462$1WS4nL)
        (hashtable-ref . g$6461$1WS4nL)
        (hashtable-mutable? . g$12294$1WS4nL)
        (hashtable-keys . g$12293$1WS4nL)
        (hashtable-entries . g$12292$1WS4nL)
        (hashtable-delete! . g$6463$1WS4nL)
        (hashtable-copy . g$12291$1WS4nL)
        (hashtable-contains? . g$6464$1WS4nL)
        (hashtable-clear! . g$6466$1WS4nL)
        (call-with-output-file . g$7348$1WS4nL)
        (call-with-input-file . g$7347$1WS4nL)
        (write-char . g$12290$1WS4nL)
        (write . g$12289$1WS4nL)
        (with-output-to-file . g$7346$1WS4nL)
        (with-input-from-file . g$7345$1WS4nL)
        (read-char . g$12288$1WS4nL)
        (read . g$12287$1WS4nL)
        (peek-char . g$12286$1WS4nL)
        (open-output-file . g$12285$1WS4nL)
        (open-input-file . g$12284$1WS4nL)
        (newline . g$12283$1WS4nL)
        (display . g$12282$1WS4nL)
        (close-output-port . g$12281$1WS4nL)
        (close-input-port . g$12280$1WS4nL)
        (eof-object? . g$12279$1WS4nL)
        (eof-object . g$12278$1WS4nL)
        (current-error-port . g$12277$1WS4nL)
        (current-output-port . g$12276$1WS4nL)
        (current-input-port . g$12275$1WS4nL)
        (output-port? . g$12274$1WS4nL)
        (input-port? . g$12273$1WS4nL)
        (utf-8-codec . g$12272$1WS4nL)
        (utf-16-codec . g$12271$1WS4nL)
        (transcoder-error-handling-mode . g$12270$1WS4nL)
        (transcoder-eol-style . g$12269$1WS4nL)
        (transcoder-codec . g$12268$1WS4nL)
        (transcoded-port . g$12267$1WS4nL)
        (textual-port? . g$12266$1WS4nL)
        (string->bytevector . g$12265$1WS4nL)
        (standard-output-port . g$12264$1WS4nL)
        (standard-input-port . g$12263$1WS4nL)
        (standard-error-port . g$12262$1WS4nL)
        (set-port-position! . g$12261$1WS4nL)
        (put-u8 . g$12260$1WS4nL)
        (put-string . g$12259$1WS4nL)
        (put-datum . g$12258$1WS4nL)
        (put-char . g$12257$1WS4nL)
        (put-bytevector . g$12256$1WS4nL)
        (port? . g$7321$1WS4nL)
        (port-transcoder . g$12255$1WS4nL)
        (port-position . g$12254$1WS4nL)
        (port-has-set-port-position!? . g$12253$1WS4nL)
        (port-has-port-position? . g$12252$1WS4nL)
        (port-eof? . g$12251$1WS4nL)
        (output-port-buffer-mode . g$12250$1WS4nL)
        (open-string-output-port . g$7320$1WS4nL)
        (open-string-input-port . g$12249$1WS4nL)
        (open-file-output-port . g$12248$1WS4nL)
        (open-file-input/output-port . g$12247$1WS4nL)
        (open-file-input-port . g$12246$1WS4nL)
        (open-bytevector-output-port . g$12245$1WS4nL)
        (open-bytevector-input-port . g$12244$1WS4nL)
        (native-transcoder . g$12243$1WS4nL)
        (native-eol-style . g$12242$1WS4nL)
        (make-transcoder . g$12241$1WS4nL)
        (latin-1-codec . g$12240$1WS4nL)
        (make-i/o-write-error . g$7177$1WS4nL)
        (make-i/o-read-error . g$7163$1WS4nL)
        (make-i/o-port-error . g$7282$1WS4nL)
        (make-i/o-invalid-position-error . g$7192$1WS4nL)
        (make-i/o-filename-error . g$7209$1WS4nL)
        (make-i/o-file-protection-error . g$7225$1WS4nL)
        (make-i/o-file-is-read-only-error . g$7239$1WS4nL)
        (make-i/o-file-does-not-exist-error . g$7267$1WS4nL)
        (make-i/o-file-already-exists-error . g$7253$1WS4nL)
        (make-i/o-error . g$7149$1WS4nL)
        (make-i/o-encoding-error . g$7313$1WS4nL)
        (make-i/o-decoding-error . g$7298$1WS4nL)
        (make-custom-textual-output-port . g$12239$1WS4nL)
        (make-custom-textual-input/output-port . g$12238$1WS4nL)
        (make-custom-textual-input-port . g$12237$1WS4nL)
        (make-custom-binary-output-port . g$12236$1WS4nL)
        (make-custom-binary-input/output-port . g$12235$1WS4nL)
        (make-custom-binary-input-port . g$12234$1WS4nL)
        (make-bytevector . g$12233$1WS4nL)
        (lookahead-u8 . g$12232$1WS4nL)
        (lookahead-char . g$12231$1WS4nL)
        (i/o-write-error? . g$7178$1WS4nL)
        (i/o-read-error? . g$7164$1WS4nL)
        (i/o-port-error? . g$7284$1WS4nL)
        (i/o-invalid-position-error? . g$7194$1WS4nL)
        (i/o-error-position . g$7195$1WS4nL)
        (i/o-filename-error? . g$7211$1WS4nL)
        (i/o-file-protection-error? . g$7226$1WS4nL)
        (i/o-file-is-read-only-error? . g$7240$1WS4nL)
        (i/o-file-does-not-exist-error? . g$7268$1WS4nL)
        (i/o-file-already-exists-error? . g$7254$1WS4nL)
        (i/o-error? . g$7150$1WS4nL)
        (i/o-error-port . g$7285$1WS4nL)
        (i/o-error-filename . g$7212$1WS4nL)
        (i/o-encoding-error? . g$7315$1WS4nL)
        (i/o-encoding-error-char . g$7316$1WS4nL)
        (i/o-decoding-error? . g$7299$1WS4nL)
        (get-u8 . g$12230$1WS4nL)
        (get-string-n! . g$12229$1WS4nL)
        (get-string-n . g$12228$1WS4nL)
        (get-string-all . g$12227$1WS4nL)
        (get-line . g$12226$1WS4nL)
        (get-datum . g$12225$1WS4nL)
        (get-char . g$12224$1WS4nL)
        (get-bytevector-some . g$12223$1WS4nL)
        (get-bytevector-n! . g$12222$1WS4nL)
        (get-bytevector-n . g$12221$1WS4nL)
        (get-bytevector-all . g$12220$1WS4nL)
        (flush-output-port . g$12219$1WS4nL)
        (close-port . g$12218$1WS4nL)
        (call-with-string-output-port . g$7322$1WS4nL)
        (call-with-port . g$12217$1WS4nL)
        (call-with-bytevector-output-port . g$12216$1WS4nL)
        (bytevector->string . g$12215$1WS4nL)
        (buffer-mode? . g$12214$1WS4nL)
        (binary-port? . g$12213$1WS4nL)
        (scheme-report-environment . g$8791$1WS4nL)
        (quotient . g$6835$1WS4nL)
        (null-environment . g$8790$1WS4nL)
        (remainder . g$6836$1WS4nL)
        (modulo . g$6837$1WS4nL)
        (inexact->exact . g$12212$1WS4nL)
        (force . g$6839$1WS4nL)
        (exact->inexact . g$12211$1WS4nL)
        (exit . g$12210$1WS4nL)
        (command-line . g$11782$1WS4nL)
        (string-fill! . g$12209$1WS4nL)
        (string-set! . g$12208$1WS4nL)
        (set-cdr! . g$12207$1WS4nL)
        (set-car! . g$12206$1WS4nL)
        (remove . g$5847$1WS4nL)
        (remv . g$5848$1WS4nL)
        (remp . g$5830$1WS4nL)
        (remq . g$5849$1WS4nL)
        (partition . g$5829$1WS4nL)
        (memv . g$5837$1WS4nL)
        (memq . g$5836$1WS4nL)
        (memp . g$5839$1WS4nL)
        (member . g$5838$1WS4nL)
        (exists . g$5843$1WS4nL)
        (for-all . g$5842$1WS4nL)
        (fold-right . g$5846$1WS4nL)
        (fold-left . g$5845$1WS4nL)
        (find . g$5828$1WS4nL)
        (filter . g$5831$1WS4nL)
        (cons* . g$5844$1WS4nL)
        (assv . g$5833$1WS4nL)
        (assq . g$5832$1WS4nL)
        (assp . g$5835$1WS4nL)
        (assoc . g$5834$1WS4nL)
        (with-exception-handler . g$12205$1WS4nL)
        (raise-continuable . g$12204$1WS4nL)
        (raise . g$12203$1WS4nL)
        (eval . g$8793$1WS4nL)
        (environment . g$8789$1WS4nL)
        (make-enumeration . g$7406$1WS4nL)
        (enum-set=? . g$7413$1WS4nL)
        (enum-set-universe . g$7407$1WS4nL)
        (enum-set-union . g$7414$1WS4nL)
        (enum-set-subset? . g$7412$1WS4nL)
        (enum-set-projection . g$7418$1WS4nL)
        (enum-set-member? . g$7411$1WS4nL)
        (enum-set-intersection . g$7415$1WS4nL)
        (enum-set-indexer . g$7408$1WS4nL)
        (enum-set-difference . g$7416$1WS4nL)
        (enum-set-constructor . g$7409$1WS4nL)
        (enum-set-complement . g$7417$1WS4nL)
        (enum-set->list . g$7410$1WS4nL)
        (who-condition? . g$6746$1WS4nL)
        (warning? . g$6657$1WS4nL)
        (violation? . g$6699$1WS4nL)
        (undefined-violation? . g$6823$1WS4nL)
        (syntax-violation? . g$6807$1WS4nL)
        (syntax-violation-subform . g$6809$1WS4nL)
        (syntax-violation-form . g$6808$1WS4nL)
        (syntax-violation . g$8810$1WS4nL)
        (simple-conditions . g$12202$1WS4nL)
        (serious-condition? . g$6671$1WS4nL)
        (non-continuable-violation? . g$6761$1WS4nL)
        (message-condition? . g$6642$1WS4nL)
        (make-who-condition . g$6744$1WS4nL)
        (make-warning . g$6656$1WS4nL)
        (make-violation . g$6698$1WS4nL)
        (make-undefined-violation . g$6822$1WS4nL)
        (make-syntax-violation . g$6804$1WS4nL)
        (make-serious-condition . g$6670$1WS4nL)
        (make-non-continuable-violation . g$6760$1WS4nL)
        (make-message-condition . g$6640$1WS4nL)
        (make-lexical-violation . g$6788$1WS4nL)
        (make-irritants-condition . g$6727$1WS4nL)
        (make-implementation-restriction-violation . g$6774$1WS4nL)
        (make-error . g$6684$1WS4nL)
        (make-assertion-violation . g$6712$1WS4nL)
        (lexical-violation? . g$6789$1WS4nL)
        (irritants-condition? . g$6729$1WS4nL)
        (implementation-restriction-violation? . g$6775$1WS4nL)
        (error? . g$6685$1WS4nL)
        (condition-who . g$6747$1WS4nL)
        (condition-predicate . g$12201$1WS4nL)
        (condition-message . g$6643$1WS4nL)
        (condition-irritants . g$6730$1WS4nL)
        (condition-accessor . g$12200$1WS4nL)
        (condition . g$12199$1WS4nL)
        (assertion-violation? . g$6713$1WS4nL)
        (condition? . g$12198$1WS4nL)
        (utf32->string . g$12197$1WS4nL)
        (utf16->string . g$12196$1WS4nL)
        (utf8->string . g$12195$1WS4nL)
        (uint-list->bytevector . g$12194$1WS4nL)
        (u8-list->bytevector . g$12193$1WS4nL)
        (string->utf8 . g$12192$1WS4nL)
        (string->utf32 . g$12191$1WS4nL)
        (string->utf16 . g$12190$1WS4nL)
        (sint-list->bytevector . g$12189$1WS4nL)
        (native-endianness . g$6498$1WS4nL)
        (bytevector? . g$12188$1WS4nL)
        (bytevector=? . g$12187$1WS4nL)
        (bytevector-uint-set! . g$12186$1WS4nL)
        (bytevector-uint-ref . g$12185$1WS4nL)
        (bytevector-u8-set! . g$12184$1WS4nL)
        (bytevector-u8-ref . g$12183$1WS4nL)
        (bytevector-u64-set! . g$6519$1WS4nL)
        (bytevector-u64-ref . g$6515$1WS4nL)
        (bytevector-u64-native-set! . g$6521$1WS4nL)
        (bytevector-u64-native-ref . g$6517$1WS4nL)
        (bytevector-u32-set! . g$6511$1WS4nL)
        (bytevector-u32-ref . g$6507$1WS4nL)
        (bytevector-u32-native-set! . g$6513$1WS4nL)
        (bytevector-u32-native-ref . g$6509$1WS4nL)
        (bytevector-u16-set! . g$6503$1WS4nL)
        (bytevector-u16-ref . g$6499$1WS4nL)
        (bytevector-u16-native-set! . g$6505$1WS4nL)
        (bytevector-u16-native-ref . g$6501$1WS4nL)
        (bytevector-sint-set! . g$12182$1WS4nL)
        (bytevector-sint-ref . g$12181$1WS4nL)
        (bytevector-s8-set! . g$12180$1WS4nL)
        (bytevector-s8-ref . g$12179$1WS4nL)
        (bytevector-s64-set! . g$6520$1WS4nL)
        (bytevector-s64-ref . g$6516$1WS4nL)
        (bytevector-s64-native-set! . g$6522$1WS4nL)
        (bytevector-s64-native-ref . g$6518$1WS4nL)
        (bytevector-s32-set! . g$6512$1WS4nL)
        (bytevector-s32-ref . g$6508$1WS4nL)
        (bytevector-s32-native-set! . g$6514$1WS4nL)
        (bytevector-s32-native-ref . g$6510$1WS4nL)
        (bytevector-s16-set! . g$6504$1WS4nL)
        (bytevector-s16-ref . g$6500$1WS4nL)
        (bytevector-s16-native-set! . g$6506$1WS4nL)
        (bytevector-s16-native-ref . g$6502$1WS4nL)
        (bytevector-length . g$12178$1WS4nL)
        (bytevector-ieee-single-set! . g$12177$1WS4nL)
        (bytevector-ieee-single-ref . g$12176$1WS4nL)
        (bytevector-ieee-single-native-set! . g$6525$1WS4nL)
        (bytevector-ieee-single-native-ref . g$6523$1WS4nL)
        (bytevector-ieee-double-set! . g$12175$1WS4nL)
        (bytevector-ieee-double-ref . g$12174$1WS4nL)
        (bytevector-ieee-double-native-set! . g$6526$1WS4nL)
        (bytevector-ieee-double-native-ref . g$6524$1WS4nL)
        (bytevector-fill! . g$12173$1WS4nL)
        (bytevector-copy! . g$12172$1WS4nL)
        (bytevector-copy . g$12171$1WS4nL)
        (bytevector->uint-list . g$12170$1WS4nL)
        (bytevector->u8-list . g$12169$1WS4nL)
        (bytevector->sint-list . g$12168$1WS4nL)
        (no-nans-violation? . g$7135$1WS4nL)
        (no-infinities-violation? . g$7121$1WS4nL)
        (make-no-nans-violation . g$7134$1WS4nL)
        (make-no-infinities-violation . g$7120$1WS4nL)
        (real->flonum . g$12167$1WS4nL)
        (flzero? . g$12166$1WS4nL)
        (fltruncate . g$12165$1WS4nL)
        (fltan . g$12164$1WS4nL)
        (flsqrt . g$12163$1WS4nL)
        (flsin . g$12162$1WS4nL)
        (flround . g$12161$1WS4nL)
        (flpositive? . g$12160$1WS4nL)
        (flonum? . g$12159$1WS4nL)
        (flodd? . g$12158$1WS4nL)
        (flnumerator . g$12157$1WS4nL)
        (flnegative? . g$12156$1WS4nL)
        (flnan? . g$12155$1WS4nL)
        (flmod0 . g$12154$1WS4nL)
        (flmod . g$12153$1WS4nL)
        (flmin . g$12152$1WS4nL)
        (flmax . g$12151$1WS4nL)
        (fllog . g$12150$1WS4nL)
        (flinteger? . g$12149$1WS4nL)
        (flinfinite? . g$12148$1WS4nL)
        (flfloor . g$12147$1WS4nL)
        (flfinite? . g$12146$1WS4nL)
        (flexpt . g$12145$1WS4nL)
        (flexp . g$12144$1WS4nL)
        (fleven? . g$12143$1WS4nL)
        (fldiv0-and-mod0 . g$12142$1WS4nL)
        (fldiv0 . g$12141$1WS4nL)
        (fldiv-and-mod . g$12140$1WS4nL)
        (fldiv . g$12139$1WS4nL)
        (fldenominator . g$12138$1WS4nL)
        (flcos . g$12137$1WS4nL)
        (flceiling . g$12136$1WS4nL)
        (flatan . g$12135$1WS4nL)
        (flasin . g$12134$1WS4nL)
        (flacos . g$12133$1WS4nL)
        (flabs . g$12132$1WS4nL)
        (fl>? . g$12131$1WS4nL)
        (fl>=? . g$12130$1WS4nL)
        (fl=? . g$12129$1WS4nL)
        (fl<? . g$12128$1WS4nL)
        (fl<=? . g$12127$1WS4nL)
        (fl/ . g$12126$1WS4nL)
        (fl- . g$12125$1WS4nL)
        (fl+ . g$12124$1WS4nL)
        (fl* . g$12123$1WS4nL)
        (fixnum->flonum . g$12122$1WS4nL)
        (fxzero? . g$12121$1WS4nL)
        (fxxor . g$12120$1WS4nL)
        (fxrotate-bit-field . g$7066$1WS4nL)
        (fxreverse-bit-field . g$12119$1WS4nL)
        (fxpositive? . g$12118$1WS4nL)
        (fxodd? . g$12117$1WS4nL)
        (fxnot . g$12116$1WS4nL)
        (fxnegative? . g$12115$1WS4nL)
        (fxmod0 . g$12114$1WS4nL)
        (fxmod . g$12113$1WS4nL)
        (fxmin . g$12112$1WS4nL)
        (fxmax . g$12111$1WS4nL)
        (fxlength . g$12110$1WS4nL)
        (fxior . g$12109$1WS4nL)
        (fxif . g$7060$1WS4nL)
        (fxfirst-bit-set . g$12108$1WS4nL)
        (fxeven? . g$12107$1WS4nL)
        (fxdiv0-and-mod0 . g$12106$1WS4nL)
        (fxdiv0 . g$12105$1WS4nL)
        (fxdiv-and-mod . g$12104$1WS4nL)
        (fxdiv . g$12103$1WS4nL)
        (fxcopy-bit-field . g$7063$1WS4nL)
        (fxcopy-bit . g$7061$1WS4nL)
        (fxbit-set? . g$12102$1WS4nL)
        (fxbit-field . g$7062$1WS4nL)
        (fxbit-count . g$12101$1WS4nL)
        (fxarithmetic-shift-right . g$7065$1WS4nL)
        (fxarithmetic-shift-left . g$7064$1WS4nL)
        (fxarithmetic-shift . g$12100$1WS4nL)
        (fxand . g$12099$1WS4nL)
        (fx>? . g$12098$1WS4nL)
        (fx>=? . g$12097$1WS4nL)
        (fx=? . g$12096$1WS4nL)
        (fx<? . g$12095$1WS4nL)
        (fx<=? . g$12094$1WS4nL)
        (fx-/carry . g$12093$1WS4nL)
        (fx- . g$12092$1WS4nL)
        (fx+/carry . g$12091$1WS4nL)
        (fx+ . g$12090$1WS4nL)
        (fx*/carry . g$12089$1WS4nL)
        (fx* . g$12088$1WS4nL)
        (greatest-fixnum . g$12087$1WS4nL)
        (least-fixnum . g$12086$1WS4nL)
        (fixnum-width . g$12085$1WS4nL)
        (fixnum? . g$12084$1WS4nL)
        (bitwise-rotate-bit-field . g$7018$1WS4nL)
        (bitwise-reverse-bit-field . g$12083$1WS4nL)
        (bitwise-length . g$12082$1WS4nL)
        (bitwise-if . g$7012$1WS4nL)
        (bitwise-first-bit-set . g$12081$1WS4nL)
        (bitwise-copy-bit-field . g$7015$1WS4nL)
        (bitwise-copy-bit . g$7013$1WS4nL)
        (bitwise-bit-set? . g$12080$1WS4nL)
        (bitwise-bit-field . g$12079$1WS4nL)
        (bitwise-bit-count . g$12078$1WS4nL)
        (bitwise-xor . g$12077$1WS4nL)
        (bitwise-ior . g$12076$1WS4nL)
        (bitwise-and . g$12075$1WS4nL)
        (bitwise-not . g$12074$1WS4nL)
        (bitwise-arithmetic-shift-right . g$7017$1WS4nL)
        (bitwise-arithmetic-shift-left . g$7016$1WS4nL)
        (bitwise-arithmetic-shift . g$12073$1WS4nL)
        (zero? . g$12072$1WS4nL)
        (vector? . g$12071$1WS4nL)
        (vector-set! . g$12070$1WS4nL)
        (vector-ref . g$12069$1WS4nL)
        (vector-map . g$12068$1WS4nL)
        (vector-length . g$12067$1WS4nL)
        (vector-for-each . g$12066$1WS4nL)
        (vector-fill! . g$12065$1WS4nL)
        (vector->list . g$12064$1WS4nL)
        (vector . g$12063$1WS4nL)
        (values . g$12062$1WS4nL)
        (truncate . g$12061$1WS4nL)
        (tan . g$12060$1WS4nL)
        (symbol? . g$12059$1WS4nL)
        (symbol=? . g$6007$1WS4nL)
        (symbol->string . g$12058$1WS4nL)
        (substring . g$12057$1WS4nL)
        (string? . g$12056$1WS4nL)
        (string>? . g$6004$1WS4nL)
        (string>=? . g$6006$1WS4nL)
        (string=? . g$6002$1WS4nL)
        (string<? . g$6003$1WS4nL)
        (string<=? . g$6005$1WS4nL)
        (string-ref . g$12055$1WS4nL)
        (string-length . g$12054$1WS4nL)
        (string-for-each . g$12053$1WS4nL)
        (string-copy . g$12052$1WS4nL)
        (string-append . g$12051$1WS4nL)
        (string->symbol . g$12050$1WS4nL)
        (string->number . g$12049$1WS4nL)
        (string->list . g$12048$1WS4nL)
        (string . g$12047$1WS4nL)
        (sqrt . g$12046$1WS4nL)
        (sin . g$12045$1WS4nL)
        (round . g$12044$1WS4nL)
        (reverse . g$12043$1WS4nL)
        (real? . g$12042$1WS4nL)
        (real-valued? . g$12041$1WS4nL)
        (real-part . g$12040$1WS4nL)
        (rationalize . g$6048$1WS4nL)
        (rational? . g$12039$1WS4nL)
        (rational-valued? . g$12038$1WS4nL)
        (procedure? . g$12037$1WS4nL)
        (positive? . g$12036$1WS4nL)
        (pair? . g$12035$1WS4nL)
        (odd? . g$12034$1WS4nL)
        (numerator . g$12033$1WS4nL)
        (number? . g$12032$1WS4nL)
        (number->string . g$12031$1WS4nL)
        (null? . g$12030$1WS4nL)
        (not . g$12029$1WS4nL)
        (negative? . g$12028$1WS4nL)
        (nan? . g$12027$1WS4nL)
        (min . g$12026$1WS4nL)
        (max . g$12025$1WS4nL)
        (map . g$12024$1WS4nL)
        (make-vector . g$12023$1WS4nL)
        (make-string . g$12022$1WS4nL)
        (make-rectangular . g$12021$1WS4nL)
        (make-polar . g$12020$1WS4nL)
        (magnitude . g$12019$1WS4nL)
        (log . g$12018$1WS4nL)
        (list? . g$12017$1WS4nL)
        (list-tail . g$12016$1WS4nL)
        (list-ref . g$12015$1WS4nL)
        (list->vector . g$12014$1WS4nL)
        (list->string . g$12013$1WS4nL)
        (list . g$12012$1WS4nL)
        (length . g$12011$1WS4nL)
        (lcm . g$12010$1WS4nL)
        (integer? . g$12009$1WS4nL)
        (integer-valued? . g$12008$1WS4nL)
        (integer->char . g$12007$1WS4nL)
        (infinite? . g$12006$1WS4nL)
        (inexact? . g$12005$1WS4nL)
        (inexact . g$12004$1WS4nL)
        (imag-part . g$12003$1WS4nL)
        (gcd . g$12002$1WS4nL)
        (for-each . g$12001$1WS4nL)
        (floor . g$12000$1WS4nL)
        (finite? . g$11999$1WS4nL)
        (expt . g$11998$1WS4nL)
        (exp . g$11997$1WS4nL)
        (exact? . g$11996$1WS4nL)
        (exact-integer-sqrt . g$11995$1WS4nL)
        (exact . g$11994$1WS4nL)
        (even? . g$11993$1WS4nL)
        (error . g$11992$1WS4nL)
        (eqv? . g$11991$1WS4nL)
        (equal? . g$11990$1WS4nL)
        (eq? . g$11989$1WS4nL)
        (dynamic-wind . g$11988$1WS4nL)
        (div0-and-mod0 . g$11987$1WS4nL)
        (mod0 . g$11986$1WS4nL)
        (div0 . g$11985$1WS4nL)
        (div-and-mod . g$11984$1WS4nL)
        (mod . g$11983$1WS4nL)
        (div . g$11982$1WS4nL)
        (denominator . g$11981$1WS4nL)
        (cos . g$11980$1WS4nL)
        (cons . g$11979$1WS4nL)
        (complex? . g$11978$1WS4nL)
        (char? . g$11977$1WS4nL)
        (char>? . g$6045$1WS4nL)
        (char>=? . g$6047$1WS4nL)
        (char=? . g$6043$1WS4nL)
        (char<? . g$6044$1WS4nL)
        (char<=? . g$6046$1WS4nL)
        (char->integer . g$11976$1WS4nL)
        (ceiling . g$11975$1WS4nL)
        (call-with-values . g$11974$1WS4nL)
        (call/cc . g$11973$1WS4nL)
        (call-with-current-continuation . g$11972$1WS4nL)
        (cddddr . g$5967$1WS4nL)
        (cdddar . g$5966$1WS4nL)
        (cddadr . g$5965$1WS4nL)
        (cddaar . g$5964$1WS4nL)
        (cdaddr . g$5963$1WS4nL)
        (cdadar . g$5962$1WS4nL)
        (cdaadr . g$5961$1WS4nL)
        (cdaaar . g$5960$1WS4nL)
        (cadddr . g$5959$1WS4nL)
        (caddar . g$5958$1WS4nL)
        (cadadr . g$5957$1WS4nL)
        (cadaar . g$5956$1WS4nL)
        (caaddr . g$5955$1WS4nL)
        (caadar . g$5954$1WS4nL)
        (caaadr . g$5953$1WS4nL)
        (caaaar . g$5952$1WS4nL)
        (cdddr . g$5951$1WS4nL)
        (cddar . g$5950$1WS4nL)
        (cdadr . g$5949$1WS4nL)
        (cdaar . g$5948$1WS4nL)
        (caddr . g$5947$1WS4nL)
        (cadar . g$5946$1WS4nL)
        (caadr . g$5945$1WS4nL)
        (caaar . g$5944$1WS4nL)
        (cddr . g$5943$1WS4nL)
        (cdar . g$5942$1WS4nL)
        (cadr . g$5941$1WS4nL)
        (caar . g$5940$1WS4nL)
        (cdr . g$11971$1WS4nL)
        (car . g$11970$1WS4nL)
        (boolean? . g$11969$1WS4nL)
        (boolean=? . g$6008$1WS4nL)
        (atan . g$11968$1WS4nL)
        (assertion-violation . g$11967$1WS4nL)
        (asin . g$11966$1WS4nL)
        (apply . g$11965$1WS4nL)
        (append . g$11964$1WS4nL)
        (angle . g$11963$1WS4nL)
        (acos . g$11962$1WS4nL)
        (abs . g$11961$1WS4nL)
        (/ . g$11960$1WS4nL)
        (* . g$11959$1WS4nL)
        (- . g$11958$1WS4nL)
        (+ . g$11957$1WS4nL)
        (>= . g$11956$1WS4nL)
        (> . g$11955$1WS4nL)
        (= . g$11954$1WS4nL)
        (<= . g$11953$1WS4nL)
        (< . g$11952$1WS4nL)
        (deserialize-port . g$11948$1WS4nL)
        (serialize-port . g$11947$1WS4nL)
        (enum-set? . g$7381$1WS4nL)
        (load/args . g$11784$1WS4nL)
        (printf . g$7491$1WS4nL)
        (fprintf . g$7492$1WS4nL)
        (format . g$7493$1WS4nL)
        (procedure-form . g$11946$1WS4nL)
        (procedure-environment . g$11945$1WS4nL)
        (procedure-name . g$11944$1WS4nL)
        (procedure-arity . g$11943$1WS4nL)
        (gc-collect . g$11942$1WS4nL)
        (clr-type? . g$11941$1WS4nL)
        (get-clr-type . g$11940$1WS4nL)
        (vector-append . g$11938$1WS4nL)
        (vector-filter . g$11937$1WS4nL)
        (vector-reverse! . g$11936$1WS4nL)
        (vector-contains? . g$11935$1WS4nL)
        (vector-index-of . g$11934$1WS4nL)
        (vector-copy . g$11933$1WS4nL)
        (vector-binary-search . g$11932$1WS4nL)
        (string-ci-compare . g$11931$1WS4nL)
        (string-compare . g$11930$1WS4nL)
        (string-format . g$11929$1WS4nL)
        (trace-printer . g$11781$1WS4nL)
        (pmap . g$11927$1WS4nL)
        (time-it . g$11926$1WS4nL)
        (make-parameter . g$7518$1WS4nL)
        (environment-bindings . g$8785$1WS4nL)
        (environment-symbols . g$8788$1WS4nL)
        (interaction-environment-symbols . g$8784$1WS4nL)
        (optimization-level . g$11923$1WS4nL)
        (library-path . g$7948$1WS4nL)
        (expand . g$8792$1WS4nL)
        (&no-nans . g$11922$1WS4nL)
        (&no-infinities . g$11921$1WS4nL)
        (&i/o-encoding . g$11920$1WS4nL)
        (&i/o-decoding . g$11919$1WS4nL)
        (&i/o-port . g$11918$1WS4nL)
        (&i/o-file-does-not-exist . g$11917$1WS4nL)
        (&i/o-file-already-exists . g$11916$1WS4nL)
        (&i/o-file-is-read-only . g$11915$1WS4nL)
        (&i/o-file-protection . g$11914$1WS4nL)
        (&i/o-filename . g$11913$1WS4nL)
        (&i/o-invalid-position . g$11912$1WS4nL)
        (&i/o-write . g$11911$1WS4nL)
        (&i/o-read . g$11910$1WS4nL)
        (&i/o . g$11909$1WS4nL)
        (&non-continuable . g$11908$1WS4nL)
        (&undefined . g$11907$1WS4nL)
        (&syntax . g$11906$1WS4nL)
        (&lexical . g$11905$1WS4nL)
        (&implementation-restriction . g$11904$1WS4nL)
        (&who . g$11903$1WS4nL)
        (&irritants . g$11902$1WS4nL)
        (&assertion . g$11901$1WS4nL)
        (&violation . g$11900$1WS4nL)
        (&error . g$11899$1WS4nL)
        (&serious . g$11898$1WS4nL)
        (&warning . g$11897$1WS4nL)
        (&message . g$11896$1WS4nL)
        (&condition . g$11895$1WS4nL)
        (define-condition-type . g$11894$1WS4nL)
        (define-enumeration . g$11893$1WS4nL)
        (define-record-type . g$11892$1WS4nL)
        (parent-rtd . g$11891$1WS4nL)
        (nongenerative . g$11890$1WS4nL)
        (opaque . g$11889$1WS4nL)
        (sealed . g$11888$1WS4nL)
        (protocol . g$11887$1WS4nL)
        (parent . g$11886$1WS4nL)
        (immutable . g$11885$1WS4nL)
        (mutable . g$11884$1WS4nL)
        (fields . g$11883$1WS4nL)
        (error-handling-mode . g$11882$1WS4nL)
        (file-options . g$11881$1WS4nL)
        (buffer-mode . g$11880$1WS4nL)
        (eol-style . g$11879$1WS4nL)
        (guard . g$11878$1WS4nL)
        (trace-letrec-syntax . g$11877$1WS4nL)
        (trace-let-syntax . g$11876$1WS4nL)
        (trace-define-syntax . g$11875$1WS4nL)
        (trace-define . g$11874$1WS4nL)
        (trace-lambda . g$11873$1WS4nL)
        (unsyntax-splicing . g$11872$1WS4nL)
        (unsyntax . g$11871$1WS4nL)
        (unquote-splicing . g$11870$1WS4nL)
        (unquote . g$11869$1WS4nL)
        (_ . g$11868$1WS4nL)
        (else . g$11867$1WS4nL)
        (=> . g$11866$1WS4nL)
        (... . g$11865$1WS4nL)
        (assert . g$11864$1WS4nL)
        (endianness . g$11863$1WS4nL)
        (delay . g$11862$1WS4nL)
        (time . g$11861$1WS4nL)
        (or . g$11860$1WS4nL)
        (and . g$11859$1WS4nL)
        (do . g$11858$1WS4nL)
        (cond . g$11857$1WS4nL)
        (let* . g$11856$1WS4nL)
        (let . g$11855$1WS4nL)
        (identifier-syntax . g$11854$1WS4nL)
        (with-syntax . g$11853$1WS4nL)
        (quasisyntax . g$11852$1WS4nL)
        (quasiquote . g$11851$1WS4nL)
        (syntax-rules . g$11850$1WS4nL)
        (include-into . g$11849$1WS4nL)
        (include . g$11848$1WS4nL)
        (let-values . g$11846$1WS4nL)
        (let*-values . g$11845$1WS4nL)
        (record-constructor-descriptor . g$11844$1WS4nL)
        (record-type-descriptor . g$11843$1WS4nL)
        (fluid-let-syntax . g$11842$1WS4nL)
        (case . g$11841$1WS4nL)
        (parameterize . g$11840$1WS4nL)
        (unless . g$11839$1WS4nL)
        (when . g$11838$1WS4nL)
        (if . g$11837$1WS4nL)
        (letrec* . g$11836$1WS4nL)
        (letrec . g$11835$1WS4nL)
        (case-lambda . g$11833$1WS4nL)
        (lambda . g$11832$1WS4nL)
        (syntax . g$11831$1WS4nL)
        (syntax-case . g$11830$1WS4nL)
        (quote . g$11829$1WS4nL)
        (letrec-syntax . g$11827$1WS4nL)
        (let-syntax . g$11826$1WS4nL)
        (set! . g$11825$1WS4nL)
        (export . g$11824$1WS4nL)
        (import . g$11823$1WS4nL)
        (library . g$11822$1WS4nL)
        (begin . g$11821$1WS4nL)
        (module . g$11820$1WS4nL)
        (define-syntax . g$11819$1WS4nL)
        (define . g$11818$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12436$1WS4nL
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11924$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12437$1WS4nL
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12377$1WS4nL)
        (annotation-source . g$12376$1WS4nL)
        (annotation-expression . g$12375$1WS4nL)
        (annotation? . g$12374$1WS4nL)
        (read-annotated . g$12373$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12438$1WS4nL
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12343$1WS4nL)
        (serialize-library . g$12342$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12439$1WS4nL
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8415$1WS4nL)
        (variable-transformer? . g$8414$1WS4nL)
        (eqv-hash . g$11950$1WS4nL)
        (reverse! . g$11949$1WS4nL)
        (make-promise . g$6838$1WS4nL)
        (format . g$7493$1WS4nL)
        (get-command-line . g$11939$1WS4nL)
        (make-traced-procedure . g$11928$1WS4nL)
        (make-traced-macro . g$7513$1WS4nL)
        (assertion-error . g$8806$1WS4nL)
        (library-locator . g$11925$1WS4nL)
        (get-library-paths . g$11924$1WS4nL)
        (library-path . g$7948$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12440$1WS4nL
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11951$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12441$1WS4nL
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12361$1WS4nL)
        (clr-field-set!-internal . g$12360$1WS4nL)
        (clr-field-get-internal . g$12359$1WS4nL)
        (clr-cast-internal . g$12358$1WS4nL)
        (clr-call-internal . g$12357$1WS4nL)
        (clr-new-internal . g$12356$1WS4nL)
        (clr-new-array-internal . g$12355$1WS4nL)
        (clr-is-internal . g$12354$1WS4nL)
        (clr-reference-internal . g$12353$1WS4nL)
        (clr-using-internal . g$12352$1WS4nL)
        (clr-clear-usings-internal . g$12351$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12442$1WS4nL
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11870$1WS4nL)
        (unquote . g$11869$1WS4nL)
        (else . g$11867$1WS4nL)
        (=> . g$11866$1WS4nL)
        (delay . g$11862$1WS4nL)
        (or . g$11860$1WS4nL)
        (and . g$11859$1WS4nL)
        (do . g$11858$1WS4nL)
        (cond . g$11857$1WS4nL)
        (let* . g$11856$1WS4nL)
        (let . g$11855$1WS4nL)
        (quasiquote . g$11851$1WS4nL)
        (syntax-rules . g$11850$1WS4nL)
        (case . g$11841$1WS4nL)
        (if . g$11837$1WS4nL)
        (letrec . g$11835$1WS4nL)
        (lambda . g$11832$1WS4nL)
        (quote . g$11829$1WS4nL)
        (letrec-syntax . g$11827$1WS4nL)
        (let-syntax . g$11826$1WS4nL)
        (set! . g$11825$1WS4nL)
        (begin . g$11821$1WS4nL)
        (define-syntax . g$11819$1WS4nL)
        (define . g$11818$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12443$1WS4nL
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$8816$1WS4nL)
        (char-ready? . g$12341$1WS4nL)
        (string-ci>? . g$6917$1WS4nL)
        (string-ci>=? . g$6919$1WS4nL)
        (string-ci=? . g$6915$1WS4nL)
        (string-ci<? . g$6916$1WS4nL)
        (string-ci<=? . g$6918$1WS4nL)
        (char-whitespace? . g$12332$1WS4nL)
        (char-upper-case? . g$12331$1WS4nL)
        (char-numeric? . g$12329$1WS4nL)
        (char-lower-case? . g$12328$1WS4nL)
        (char-upcase . g$12326$1WS4nL)
        (char-downcase . g$12323$1WS4nL)
        (char-ci>? . g$6956$1WS4nL)
        (char-ci>=? . g$6958$1WS4nL)
        (char-ci=? . g$6954$1WS4nL)
        (char-ci<? . g$6955$1WS4nL)
        (char-ci<=? . g$6957$1WS4nL)
        (char-alphabetic? . g$12322$1WS4nL)
        (call-with-output-file . g$7348$1WS4nL)
        (call-with-input-file . g$7347$1WS4nL)
        (write-char . g$12290$1WS4nL)
        (write . g$12289$1WS4nL)
        (with-output-to-file . g$7346$1WS4nL)
        (with-input-from-file . g$7345$1WS4nL)
        (read-char . g$12288$1WS4nL)
        (read . g$12287$1WS4nL)
        (peek-char . g$12286$1WS4nL)
        (open-output-file . g$12285$1WS4nL)
        (open-input-file . g$12284$1WS4nL)
        (newline . g$12283$1WS4nL)
        (display . g$12282$1WS4nL)
        (close-output-port . g$12281$1WS4nL)
        (close-input-port . g$12280$1WS4nL)
        (eof-object? . g$12279$1WS4nL)
        (eof-object . g$12278$1WS4nL)
        (current-error-port . g$12277$1WS4nL)
        (current-output-port . g$12276$1WS4nL)
        (current-input-port . g$12275$1WS4nL)
        (output-port? . g$12274$1WS4nL)
        (input-port? . g$12273$1WS4nL)
        (scheme-report-environment . g$8791$1WS4nL)
        (quotient . g$6835$1WS4nL)
        (null-environment . g$8790$1WS4nL)
        (remainder . g$6836$1WS4nL)
        (modulo . g$6837$1WS4nL)
        (inexact->exact . g$12212$1WS4nL)
        (force . g$6839$1WS4nL)
        (exact->inexact . g$12211$1WS4nL)
        (string-fill! . g$12209$1WS4nL)
        (string-set! . g$12208$1WS4nL)
        (set-cdr! . g$12207$1WS4nL)
        (set-car! . g$12206$1WS4nL)
        (memv . g$5837$1WS4nL)
        (memq . g$5836$1WS4nL)
        (member . g$5838$1WS4nL)
        (assv . g$5833$1WS4nL)
        (assq . g$5832$1WS4nL)
        (assoc . g$5834$1WS4nL)
        (eval . g$8793$1WS4nL)
        (zero? . g$12072$1WS4nL)
        (vector? . g$12071$1WS4nL)
        (vector-set! . g$12070$1WS4nL)
        (vector-ref . g$12069$1WS4nL)
        (vector-length . g$12067$1WS4nL)
        (vector-fill! . g$12065$1WS4nL)
        (vector->list . g$12064$1WS4nL)
        (vector . g$12063$1WS4nL)
        (values . g$12062$1WS4nL)
        (truncate . g$12061$1WS4nL)
        (tan . g$12060$1WS4nL)
        (symbol? . g$12059$1WS4nL)
        (symbol->string . g$12058$1WS4nL)
        (substring . g$12057$1WS4nL)
        (string? . g$12056$1WS4nL)
        (string>? . g$6004$1WS4nL)
        (string>=? . g$6006$1WS4nL)
        (string=? . g$6002$1WS4nL)
        (string<? . g$6003$1WS4nL)
        (string<=? . g$6005$1WS4nL)
        (string-ref . g$12055$1WS4nL)
        (string-length . g$12054$1WS4nL)
        (string-copy . g$12052$1WS4nL)
        (string-append . g$12051$1WS4nL)
        (string->symbol . g$12050$1WS4nL)
        (string->number . g$12049$1WS4nL)
        (string->list . g$12048$1WS4nL)
        (string . g$12047$1WS4nL)
        (sqrt . g$12046$1WS4nL)
        (sin . g$12045$1WS4nL)
        (round . g$12044$1WS4nL)
        (reverse . g$12043$1WS4nL)
        (real? . g$12042$1WS4nL)
        (real-part . g$12040$1WS4nL)
        (rationalize . g$6048$1WS4nL)
        (rational? . g$12039$1WS4nL)
        (procedure? . g$12037$1WS4nL)
        (positive? . g$12036$1WS4nL)
        (pair? . g$12035$1WS4nL)
        (odd? . g$12034$1WS4nL)
        (numerator . g$12033$1WS4nL)
        (number? . g$12032$1WS4nL)
        (number->string . g$12031$1WS4nL)
        (null? . g$12030$1WS4nL)
        (not . g$12029$1WS4nL)
        (negative? . g$12028$1WS4nL)
        (min . g$12026$1WS4nL)
        (max . g$12025$1WS4nL)
        (map . g$12024$1WS4nL)
        (make-vector . g$12023$1WS4nL)
        (make-string . g$12022$1WS4nL)
        (make-rectangular . g$12021$1WS4nL)
        (make-polar . g$12020$1WS4nL)
        (magnitude . g$12019$1WS4nL)
        (log . g$12018$1WS4nL)
        (list? . g$12017$1WS4nL)
        (list-tail . g$12016$1WS4nL)
        (list-ref . g$12015$1WS4nL)
        (list->vector . g$12014$1WS4nL)
        (list->string . g$12013$1WS4nL)
        (list . g$12012$1WS4nL)
        (length . g$12011$1WS4nL)
        (lcm . g$12010$1WS4nL)
        (integer? . g$12009$1WS4nL)
        (integer->char . g$12007$1WS4nL)
        (inexact? . g$12005$1WS4nL)
        (imag-part . g$12003$1WS4nL)
        (gcd . g$12002$1WS4nL)
        (for-each . g$12001$1WS4nL)
        (floor . g$12000$1WS4nL)
        (expt . g$11998$1WS4nL)
        (exp . g$11997$1WS4nL)
        (exact? . g$11996$1WS4nL)
        (even? . g$11993$1WS4nL)
        (eqv? . g$11991$1WS4nL)
        (equal? . g$11990$1WS4nL)
        (eq? . g$11989$1WS4nL)
        (dynamic-wind . g$11988$1WS4nL)
        (denominator . g$11981$1WS4nL)
        (cos . g$11980$1WS4nL)
        (cons . g$11979$1WS4nL)
        (complex? . g$11978$1WS4nL)
        (char? . g$11977$1WS4nL)
        (char>? . g$6045$1WS4nL)
        (char>=? . g$6047$1WS4nL)
        (char=? . g$6043$1WS4nL)
        (char<? . g$6044$1WS4nL)
        (char<=? . g$6046$1WS4nL)
        (char->integer . g$11976$1WS4nL)
        (ceiling . g$11975$1WS4nL)
        (call-with-values . g$11974$1WS4nL)
        (call-with-current-continuation . g$11972$1WS4nL)
        (cddddr . g$5967$1WS4nL)
        (cdddar . g$5966$1WS4nL)
        (cddadr . g$5965$1WS4nL)
        (cddaar . g$5964$1WS4nL)
        (cdaddr . g$5963$1WS4nL)
        (cdadar . g$5962$1WS4nL)
        (cdaadr . g$5961$1WS4nL)
        (cdaaar . g$5960$1WS4nL)
        (cadddr . g$5959$1WS4nL)
        (caddar . g$5958$1WS4nL)
        (cadadr . g$5957$1WS4nL)
        (cadaar . g$5956$1WS4nL)
        (caaddr . g$5955$1WS4nL)
        (caadar . g$5954$1WS4nL)
        (caaadr . g$5953$1WS4nL)
        (caaaar . g$5952$1WS4nL)
        (cdddr . g$5951$1WS4nL)
        (cddar . g$5950$1WS4nL)
        (cdadr . g$5949$1WS4nL)
        (cdaar . g$5948$1WS4nL)
        (caddr . g$5947$1WS4nL)
        (cadar . g$5946$1WS4nL)
        (caadr . g$5945$1WS4nL)
        (caaar . g$5944$1WS4nL)
        (cddr . g$5943$1WS4nL)
        (cdar . g$5942$1WS4nL)
        (cadr . g$5941$1WS4nL)
        (caar . g$5940$1WS4nL)
        (cdr . g$11971$1WS4nL)
        (car . g$11970$1WS4nL)
        (boolean? . g$11969$1WS4nL)
        (atan . g$11968$1WS4nL)
        (asin . g$11966$1WS4nL)
        (apply . g$11965$1WS4nL)
        (append . g$11964$1WS4nL)
        (angle . g$11963$1WS4nL)
        (acos . g$11962$1WS4nL)
        (abs . g$11961$1WS4nL)
        (/ . g$11960$1WS4nL)
        (* . g$11959$1WS4nL)
        (- . g$11958$1WS4nL)
        (+ . g$11957$1WS4nL)
        (>= . g$11956$1WS4nL)
        (> . g$11955$1WS4nL)
        (= . g$11954$1WS4nL)
        (<= . g$11953$1WS4nL)
        (< . g$11952$1WS4nL)
        (unquote-splicing . g$11870$1WS4nL)
        (unquote . g$11869$1WS4nL)
        (else . g$11867$1WS4nL)
        (=> . g$11866$1WS4nL)
        (... . g$11865$1WS4nL)
        (delay . g$11862$1WS4nL)
        (or . g$11860$1WS4nL)
        (and . g$11859$1WS4nL)
        (do . g$11858$1WS4nL)
        (cond . g$11857$1WS4nL)
        (let* . g$11856$1WS4nL)
        (let . g$11855$1WS4nL)
        (quasiquote . g$11851$1WS4nL)
        (syntax-rules . g$11850$1WS4nL)
        (case . g$11841$1WS4nL)
        (if . g$11837$1WS4nL)
        (letrec . g$11835$1WS4nL)
        (lambda . g$11832$1WS4nL)
        (quote . g$11829$1WS4nL)
        (letrec-syntax . g$11827$1WS4nL)
        (let-syntax . g$11826$1WS4nL)
        (set! . g$11825$1WS4nL)
        (begin . g$11821$1WS4nL)
        (define-syntax . g$11819$1WS4nL)
        (define . g$11818$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12444$1WS4nL
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12340$1WS4nL)
        (string-titlecase . g$12339$1WS4nL)
        (string-normalize-nfkd . g$12338$1WS4nL)
        (string-normalize-nfkc . g$12337$1WS4nL)
        (string-normalize-nfd . g$12336$1WS4nL)
        (string-normalize-nfc . g$12335$1WS4nL)
        (string-foldcase . g$12334$1WS4nL)
        (string-downcase . g$12333$1WS4nL)
        (string-ci>? . g$6917$1WS4nL)
        (string-ci>=? . g$6919$1WS4nL)
        (string-ci=? . g$6915$1WS4nL)
        (string-ci<? . g$6916$1WS4nL)
        (string-ci<=? . g$6918$1WS4nL)
        (char-whitespace? . g$12332$1WS4nL)
        (char-upper-case? . g$12331$1WS4nL)
        (char-title-case? . g$12330$1WS4nL)
        (char-numeric? . g$12329$1WS4nL)
        (char-lower-case? . g$12328$1WS4nL)
        (char-general-category . g$12327$1WS4nL)
        (char-upcase . g$12326$1WS4nL)
        (char-titlecase . g$12325$1WS4nL)
        (char-foldcase . g$12324$1WS4nL)
        (char-downcase . g$12323$1WS4nL)
        (char-ci>? . g$6956$1WS4nL)
        (char-ci>=? . g$6958$1WS4nL)
        (char-ci=? . g$6954$1WS4nL)
        (char-ci<? . g$6955$1WS4nL)
        (char-ci<=? . g$6957$1WS4nL)
        (char-alphabetic? . g$12322$1WS4nL)
        (make-variable-transformer . g$8413$1WS4nL)
        (identifier? . g$8811$1WS4nL)
        (generate-temporaries . g$8800$1WS4nL)
        (free-identifier=? . g$8801$1WS4nL)
        (syntax->datum . g$8813$1WS4nL)
        (datum->syntax . g$8812$1WS4nL)
        (bound-identifier=? . g$8802$1WS4nL)
        (record-type-descriptor? . g$12321$1WS4nL)
        (record-predicate . g$12320$1WS4nL)
        (record-mutator . g$12319$1WS4nL)
        (record-constructor . g$12318$1WS4nL)
        (record-accessor . g$12317$1WS4nL)
        (make-record-type-descriptor . g$12316$1WS4nL)
        (make-record-constructor-descriptor . g$12315$1WS4nL)
        (record? . g$12314$1WS4nL)
        (record-type-uid . g$12313$1WS4nL)
        (record-type-sealed? . g$12312$1WS4nL)
        (record-type-parent . g$12311$1WS4nL)
        (record-type-opaque? . g$12310$1WS4nL)
        (record-type-name . g$12309$1WS4nL)
        (record-type-generative? . g$12308$1WS4nL)
        (record-type-field-names . g$12307$1WS4nL)
        (record-rtd . g$12306$1WS4nL)
        (record-field-mutable? . g$12305$1WS4nL)
        (delete-file . g$6492$1WS4nL)
        (file-exists? . g$6491$1WS4nL)
        (vector-sort! . g$12304$1WS4nL)
        (vector-sort . g$12303$1WS4nL)
        (list-sort . g$6855$1WS4nL)
        (symbol-hash . g$12302$1WS4nL)
        (string-ci-hash . g$12301$1WS4nL)
        (string-hash . g$12300$1WS4nL)
        (equal-hash . g$12299$1WS4nL)
        (hashtable-equivalence-function . g$12298$1WS4nL)
        (make-hashtable . g$12297$1WS4nL)
        (hashtable-hash-function . g$12296$1WS4nL)
        (make-eqv-hashtable . g$6459$1WS4nL)
        (make-eq-hashtable . g$6458$1WS4nL)
        (hashtable? . g$12295$1WS4nL)
        (hashtable-update! . g$6465$1WS4nL)
        (hashtable-size . g$6460$1WS4nL)
        (hashtable-set! . g$6462$1WS4nL)
        (hashtable-ref . g$6461$1WS4nL)
        (hashtable-mutable? . g$12294$1WS4nL)
        (hashtable-keys . g$12293$1WS4nL)
        (hashtable-entries . g$12292$1WS4nL)
        (hashtable-delete! . g$6463$1WS4nL)
        (hashtable-copy . g$12291$1WS4nL)
        (hashtable-contains? . g$6464$1WS4nL)
        (hashtable-clear! . g$6466$1WS4nL)
        (call-with-output-file . g$7348$1WS4nL)
        (call-with-input-file . g$7347$1WS4nL)
        (write-char . g$12290$1WS4nL)
        (write . g$12289$1WS4nL)
        (with-output-to-file . g$7346$1WS4nL)
        (with-input-from-file . g$7345$1WS4nL)
        (read-char . g$12288$1WS4nL)
        (read . g$12287$1WS4nL)
        (peek-char . g$12286$1WS4nL)
        (open-output-file . g$12285$1WS4nL)
        (open-input-file . g$12284$1WS4nL)
        (newline . g$12283$1WS4nL)
        (display . g$12282$1WS4nL)
        (close-output-port . g$12281$1WS4nL)
        (close-input-port . g$12280$1WS4nL)
        (eof-object? . g$12279$1WS4nL)
        (eof-object . g$12278$1WS4nL)
        (current-error-port . g$12277$1WS4nL)
        (current-output-port . g$12276$1WS4nL)
        (current-input-port . g$12275$1WS4nL)
        (output-port? . g$12274$1WS4nL)
        (input-port? . g$12273$1WS4nL)
        (utf-8-codec . g$12272$1WS4nL)
        (utf-16-codec . g$12271$1WS4nL)
        (transcoder-error-handling-mode . g$12270$1WS4nL)
        (transcoder-eol-style . g$12269$1WS4nL)
        (transcoder-codec . g$12268$1WS4nL)
        (transcoded-port . g$12267$1WS4nL)
        (textual-port? . g$12266$1WS4nL)
        (string->bytevector . g$12265$1WS4nL)
        (standard-output-port . g$12264$1WS4nL)
        (standard-input-port . g$12263$1WS4nL)
        (standard-error-port . g$12262$1WS4nL)
        (set-port-position! . g$12261$1WS4nL)
        (put-u8 . g$12260$1WS4nL)
        (put-string . g$12259$1WS4nL)
        (put-datum . g$12258$1WS4nL)
        (put-char . g$12257$1WS4nL)
        (put-bytevector . g$12256$1WS4nL)
        (port? . g$7321$1WS4nL)
        (port-transcoder . g$12255$1WS4nL)
        (port-position . g$12254$1WS4nL)
        (port-has-set-port-position!? . g$12253$1WS4nL)
        (port-has-port-position? . g$12252$1WS4nL)
        (port-eof? . g$12251$1WS4nL)
        (output-port-buffer-mode . g$12250$1WS4nL)
        (open-string-output-port . g$7320$1WS4nL)
        (open-string-input-port . g$12249$1WS4nL)
        (open-file-output-port . g$12248$1WS4nL)
        (open-file-input/output-port . g$12247$1WS4nL)
        (open-file-input-port . g$12246$1WS4nL)
        (open-bytevector-output-port . g$12245$1WS4nL)
        (open-bytevector-input-port . g$12244$1WS4nL)
        (native-transcoder . g$12243$1WS4nL)
        (native-eol-style . g$12242$1WS4nL)
        (make-transcoder . g$12241$1WS4nL)
        (latin-1-codec . g$12240$1WS4nL)
        (make-i/o-write-error . g$7177$1WS4nL)
        (make-i/o-read-error . g$7163$1WS4nL)
        (make-i/o-port-error . g$7282$1WS4nL)
        (make-i/o-invalid-position-error . g$7192$1WS4nL)
        (make-i/o-filename-error . g$7209$1WS4nL)
        (make-i/o-file-protection-error . g$7225$1WS4nL)
        (make-i/o-file-is-read-only-error . g$7239$1WS4nL)
        (make-i/o-file-does-not-exist-error . g$7267$1WS4nL)
        (make-i/o-file-already-exists-error . g$7253$1WS4nL)
        (make-i/o-error . g$7149$1WS4nL)
        (make-i/o-encoding-error . g$7313$1WS4nL)
        (make-i/o-decoding-error . g$7298$1WS4nL)
        (make-custom-textual-output-port . g$12239$1WS4nL)
        (make-custom-textual-input/output-port . g$12238$1WS4nL)
        (make-custom-textual-input-port . g$12237$1WS4nL)
        (make-custom-binary-output-port . g$12236$1WS4nL)
        (make-custom-binary-input/output-port . g$12235$1WS4nL)
        (make-custom-binary-input-port . g$12234$1WS4nL)
        (make-bytevector . g$12233$1WS4nL)
        (lookahead-u8 . g$12232$1WS4nL)
        (lookahead-char . g$12231$1WS4nL)
        (i/o-write-error? . g$7178$1WS4nL)
        (i/o-read-error? . g$7164$1WS4nL)
        (i/o-port-error? . g$7284$1WS4nL)
        (i/o-invalid-position-error? . g$7194$1WS4nL)
        (i/o-error-position . g$7195$1WS4nL)
        (i/o-filename-error? . g$7211$1WS4nL)
        (i/o-file-protection-error? . g$7226$1WS4nL)
        (i/o-file-is-read-only-error? . g$7240$1WS4nL)
        (i/o-file-does-not-exist-error? . g$7268$1WS4nL)
        (i/o-file-already-exists-error? . g$7254$1WS4nL)
        (i/o-error? . g$7150$1WS4nL)
        (i/o-error-port . g$7285$1WS4nL)
        (i/o-error-filename . g$7212$1WS4nL)
        (i/o-encoding-error? . g$7315$1WS4nL)
        (i/o-encoding-error-char . g$7316$1WS4nL)
        (i/o-decoding-error? . g$7299$1WS4nL)
        (get-u8 . g$12230$1WS4nL)
        (get-string-n! . g$12229$1WS4nL)
        (get-string-n . g$12228$1WS4nL)
        (get-string-all . g$12227$1WS4nL)
        (get-line . g$12226$1WS4nL)
        (get-datum . g$12225$1WS4nL)
        (get-char . g$12224$1WS4nL)
        (get-bytevector-some . g$12223$1WS4nL)
        (get-bytevector-n! . g$12222$1WS4nL)
        (get-bytevector-n . g$12221$1WS4nL)
        (get-bytevector-all . g$12220$1WS4nL)
        (flush-output-port . g$12219$1WS4nL)
        (close-port . g$12218$1WS4nL)
        (call-with-string-output-port . g$7322$1WS4nL)
        (call-with-port . g$12217$1WS4nL)
        (call-with-bytevector-output-port . g$12216$1WS4nL)
        (bytevector->string . g$12215$1WS4nL)
        (buffer-mode? . g$12214$1WS4nL)
        (binary-port? . g$12213$1WS4nL)
        (exit . g$12210$1WS4nL)
        (command-line . g$11782$1WS4nL)
        (remove . g$5847$1WS4nL)
        (remv . g$5848$1WS4nL)
        (remp . g$5830$1WS4nL)
        (remq . g$5849$1WS4nL)
        (partition . g$5829$1WS4nL)
        (memv . g$5837$1WS4nL)
        (memq . g$5836$1WS4nL)
        (memp . g$5839$1WS4nL)
        (member . g$5838$1WS4nL)
        (exists . g$5843$1WS4nL)
        (for-all . g$5842$1WS4nL)
        (fold-right . g$5846$1WS4nL)
        (fold-left . g$5845$1WS4nL)
        (find . g$5828$1WS4nL)
        (filter . g$5831$1WS4nL)
        (cons* . g$5844$1WS4nL)
        (assv . g$5833$1WS4nL)
        (assq . g$5832$1WS4nL)
        (assp . g$5835$1WS4nL)
        (assoc . g$5834$1WS4nL)
        (with-exception-handler . g$12205$1WS4nL)
        (raise-continuable . g$12204$1WS4nL)
        (raise . g$12203$1WS4nL)
        (make-enumeration . g$7406$1WS4nL)
        (enum-set=? . g$7413$1WS4nL)
        (enum-set-universe . g$7407$1WS4nL)
        (enum-set-union . g$7414$1WS4nL)
        (enum-set-subset? . g$7412$1WS4nL)
        (enum-set-projection . g$7418$1WS4nL)
        (enum-set-member? . g$7411$1WS4nL)
        (enum-set-intersection . g$7415$1WS4nL)
        (enum-set-indexer . g$7408$1WS4nL)
        (enum-set-difference . g$7416$1WS4nL)
        (enum-set-constructor . g$7409$1WS4nL)
        (enum-set-complement . g$7417$1WS4nL)
        (enum-set->list . g$7410$1WS4nL)
        (who-condition? . g$6746$1WS4nL)
        (warning? . g$6657$1WS4nL)
        (violation? . g$6699$1WS4nL)
        (undefined-violation? . g$6823$1WS4nL)
        (syntax-violation? . g$6807$1WS4nL)
        (syntax-violation-subform . g$6809$1WS4nL)
        (syntax-violation-form . g$6808$1WS4nL)
        (syntax-violation . g$8810$1WS4nL)
        (simple-conditions . g$12202$1WS4nL)
        (serious-condition? . g$6671$1WS4nL)
        (non-continuable-violation? . g$6761$1WS4nL)
        (message-condition? . g$6642$1WS4nL)
        (make-who-condition . g$6744$1WS4nL)
        (make-warning . g$6656$1WS4nL)
        (make-violation . g$6698$1WS4nL)
        (make-undefined-violation . g$6822$1WS4nL)
        (make-syntax-violation . g$6804$1WS4nL)
        (make-serious-condition . g$6670$1WS4nL)
        (make-non-continuable-violation . g$6760$1WS4nL)
        (make-message-condition . g$6640$1WS4nL)
        (make-lexical-violation . g$6788$1WS4nL)
        (make-irritants-condition . g$6727$1WS4nL)
        (make-implementation-restriction-violation . g$6774$1WS4nL)
        (make-error . g$6684$1WS4nL)
        (make-assertion-violation . g$6712$1WS4nL)
        (lexical-violation? . g$6789$1WS4nL)
        (irritants-condition? . g$6729$1WS4nL)
        (implementation-restriction-violation? . g$6775$1WS4nL)
        (error? . g$6685$1WS4nL)
        (condition-who . g$6747$1WS4nL)
        (condition-predicate . g$12201$1WS4nL)
        (condition-message . g$6643$1WS4nL)
        (condition-irritants . g$6730$1WS4nL)
        (condition-accessor . g$12200$1WS4nL)
        (condition . g$12199$1WS4nL)
        (assertion-violation? . g$6713$1WS4nL)
        (condition? . g$12198$1WS4nL)
        (utf32->string . g$12197$1WS4nL)
        (utf16->string . g$12196$1WS4nL)
        (utf8->string . g$12195$1WS4nL)
        (uint-list->bytevector . g$12194$1WS4nL)
        (u8-list->bytevector . g$12193$1WS4nL)
        (string->utf8 . g$12192$1WS4nL)
        (string->utf32 . g$12191$1WS4nL)
        (string->utf16 . g$12190$1WS4nL)
        (sint-list->bytevector . g$12189$1WS4nL)
        (native-endianness . g$6498$1WS4nL)
        (bytevector? . g$12188$1WS4nL)
        (bytevector=? . g$12187$1WS4nL)
        (bytevector-uint-set! . g$12186$1WS4nL)
        (bytevector-uint-ref . g$12185$1WS4nL)
        (bytevector-u8-set! . g$12184$1WS4nL)
        (bytevector-u8-ref . g$12183$1WS4nL)
        (bytevector-u64-set! . g$6519$1WS4nL)
        (bytevector-u64-ref . g$6515$1WS4nL)
        (bytevector-u64-native-set! . g$6521$1WS4nL)
        (bytevector-u64-native-ref . g$6517$1WS4nL)
        (bytevector-u32-set! . g$6511$1WS4nL)
        (bytevector-u32-ref . g$6507$1WS4nL)
        (bytevector-u32-native-set! . g$6513$1WS4nL)
        (bytevector-u32-native-ref . g$6509$1WS4nL)
        (bytevector-u16-set! . g$6503$1WS4nL)
        (bytevector-u16-ref . g$6499$1WS4nL)
        (bytevector-u16-native-set! . g$6505$1WS4nL)
        (bytevector-u16-native-ref . g$6501$1WS4nL)
        (bytevector-sint-set! . g$12182$1WS4nL)
        (bytevector-sint-ref . g$12181$1WS4nL)
        (bytevector-s8-set! . g$12180$1WS4nL)
        (bytevector-s8-ref . g$12179$1WS4nL)
        (bytevector-s64-set! . g$6520$1WS4nL)
        (bytevector-s64-ref . g$6516$1WS4nL)
        (bytevector-s64-native-set! . g$6522$1WS4nL)
        (bytevector-s64-native-ref . g$6518$1WS4nL)
        (bytevector-s32-set! . g$6512$1WS4nL)
        (bytevector-s32-ref . g$6508$1WS4nL)
        (bytevector-s32-native-set! . g$6514$1WS4nL)
        (bytevector-s32-native-ref . g$6510$1WS4nL)
        (bytevector-s16-set! . g$6504$1WS4nL)
        (bytevector-s16-ref . g$6500$1WS4nL)
        (bytevector-s16-native-set! . g$6506$1WS4nL)
        (bytevector-s16-native-ref . g$6502$1WS4nL)
        (bytevector-length . g$12178$1WS4nL)
        (bytevector-ieee-single-set! . g$12177$1WS4nL)
        (bytevector-ieee-single-ref . g$12176$1WS4nL)
        (bytevector-ieee-single-native-set! . g$6525$1WS4nL)
        (bytevector-ieee-single-native-ref . g$6523$1WS4nL)
        (bytevector-ieee-double-set! . g$12175$1WS4nL)
        (bytevector-ieee-double-ref . g$12174$1WS4nL)
        (bytevector-ieee-double-native-set! . g$6526$1WS4nL)
        (bytevector-ieee-double-native-ref . g$6524$1WS4nL)
        (bytevector-fill! . g$12173$1WS4nL)
        (bytevector-copy! . g$12172$1WS4nL)
        (bytevector-copy . g$12171$1WS4nL)
        (bytevector->uint-list . g$12170$1WS4nL)
        (bytevector->u8-list . g$12169$1WS4nL)
        (bytevector->sint-list . g$12168$1WS4nL)
        (no-nans-violation? . g$7135$1WS4nL)
        (no-infinities-violation? . g$7121$1WS4nL)
        (make-no-nans-violation . g$7134$1WS4nL)
        (make-no-infinities-violation . g$7120$1WS4nL)
        (real->flonum . g$12167$1WS4nL)
        (flzero? . g$12166$1WS4nL)
        (fltruncate . g$12165$1WS4nL)
        (fltan . g$12164$1WS4nL)
        (flsqrt . g$12163$1WS4nL)
        (flsin . g$12162$1WS4nL)
        (flround . g$12161$1WS4nL)
        (flpositive? . g$12160$1WS4nL)
        (flonum? . g$12159$1WS4nL)
        (flodd? . g$12158$1WS4nL)
        (flnumerator . g$12157$1WS4nL)
        (flnegative? . g$12156$1WS4nL)
        (flnan? . g$12155$1WS4nL)
        (flmod0 . g$12154$1WS4nL)
        (flmod . g$12153$1WS4nL)
        (flmin . g$12152$1WS4nL)
        (flmax . g$12151$1WS4nL)
        (fllog . g$12150$1WS4nL)
        (flinteger? . g$12149$1WS4nL)
        (flinfinite? . g$12148$1WS4nL)
        (flfloor . g$12147$1WS4nL)
        (flfinite? . g$12146$1WS4nL)
        (flexpt . g$12145$1WS4nL)
        (flexp . g$12144$1WS4nL)
        (fleven? . g$12143$1WS4nL)
        (fldiv0-and-mod0 . g$12142$1WS4nL)
        (fldiv0 . g$12141$1WS4nL)
        (fldiv-and-mod . g$12140$1WS4nL)
        (fldiv . g$12139$1WS4nL)
        (fldenominator . g$12138$1WS4nL)
        (flcos . g$12137$1WS4nL)
        (flceiling . g$12136$1WS4nL)
        (flatan . g$12135$1WS4nL)
        (flasin . g$12134$1WS4nL)
        (flacos . g$12133$1WS4nL)
        (flabs . g$12132$1WS4nL)
        (fl>? . g$12131$1WS4nL)
        (fl>=? . g$12130$1WS4nL)
        (fl=? . g$12129$1WS4nL)
        (fl<? . g$12128$1WS4nL)
        (fl<=? . g$12127$1WS4nL)
        (fl/ . g$12126$1WS4nL)
        (fl- . g$12125$1WS4nL)
        (fl+ . g$12124$1WS4nL)
        (fl* . g$12123$1WS4nL)
        (fixnum->flonum . g$12122$1WS4nL)
        (fxzero? . g$12121$1WS4nL)
        (fxxor . g$12120$1WS4nL)
        (fxrotate-bit-field . g$7066$1WS4nL)
        (fxreverse-bit-field . g$12119$1WS4nL)
        (fxpositive? . g$12118$1WS4nL)
        (fxodd? . g$12117$1WS4nL)
        (fxnot . g$12116$1WS4nL)
        (fxnegative? . g$12115$1WS4nL)
        (fxmod0 . g$12114$1WS4nL)
        (fxmod . g$12113$1WS4nL)
        (fxmin . g$12112$1WS4nL)
        (fxmax . g$12111$1WS4nL)
        (fxlength . g$12110$1WS4nL)
        (fxior . g$12109$1WS4nL)
        (fxif . g$7060$1WS4nL)
        (fxfirst-bit-set . g$12108$1WS4nL)
        (fxeven? . g$12107$1WS4nL)
        (fxdiv0-and-mod0 . g$12106$1WS4nL)
        (fxdiv0 . g$12105$1WS4nL)
        (fxdiv-and-mod . g$12104$1WS4nL)
        (fxdiv . g$12103$1WS4nL)
        (fxcopy-bit-field . g$7063$1WS4nL)
        (fxcopy-bit . g$7061$1WS4nL)
        (fxbit-set? . g$12102$1WS4nL)
        (fxbit-field . g$7062$1WS4nL)
        (fxbit-count . g$12101$1WS4nL)
        (fxarithmetic-shift-right . g$7065$1WS4nL)
        (fxarithmetic-shift-left . g$7064$1WS4nL)
        (fxarithmetic-shift . g$12100$1WS4nL)
        (fxand . g$12099$1WS4nL)
        (fx>? . g$12098$1WS4nL)
        (fx>=? . g$12097$1WS4nL)
        (fx=? . g$12096$1WS4nL)
        (fx<? . g$12095$1WS4nL)
        (fx<=? . g$12094$1WS4nL)
        (fx-/carry . g$12093$1WS4nL)
        (fx- . g$12092$1WS4nL)
        (fx+/carry . g$12091$1WS4nL)
        (fx+ . g$12090$1WS4nL)
        (fx*/carry . g$12089$1WS4nL)
        (fx* . g$12088$1WS4nL)
        (greatest-fixnum . g$12087$1WS4nL)
        (least-fixnum . g$12086$1WS4nL)
        (fixnum-width . g$12085$1WS4nL)
        (fixnum? . g$12084$1WS4nL)
        (bitwise-rotate-bit-field . g$7018$1WS4nL)
        (bitwise-reverse-bit-field . g$12083$1WS4nL)
        (bitwise-length . g$12082$1WS4nL)
        (bitwise-if . g$7012$1WS4nL)
        (bitwise-first-bit-set . g$12081$1WS4nL)
        (bitwise-copy-bit-field . g$7015$1WS4nL)
        (bitwise-copy-bit . g$7013$1WS4nL)
        (bitwise-bit-set? . g$12080$1WS4nL)
        (bitwise-bit-field . g$12079$1WS4nL)
        (bitwise-bit-count . g$12078$1WS4nL)
        (bitwise-xor . g$12077$1WS4nL)
        (bitwise-ior . g$12076$1WS4nL)
        (bitwise-and . g$12075$1WS4nL)
        (bitwise-not . g$12074$1WS4nL)
        (bitwise-arithmetic-shift-right . g$7017$1WS4nL)
        (bitwise-arithmetic-shift-left . g$7016$1WS4nL)
        (bitwise-arithmetic-shift . g$12073$1WS4nL)
        (zero? . g$12072$1WS4nL)
        (vector? . g$12071$1WS4nL)
        (vector-set! . g$12070$1WS4nL)
        (vector-ref . g$12069$1WS4nL)
        (vector-map . g$12068$1WS4nL)
        (vector-length . g$12067$1WS4nL)
        (vector-for-each . g$12066$1WS4nL)
        (vector-fill! . g$12065$1WS4nL)
        (vector->list . g$12064$1WS4nL)
        (vector . g$12063$1WS4nL)
        (values . g$12062$1WS4nL)
        (truncate . g$12061$1WS4nL)
        (tan . g$12060$1WS4nL)
        (symbol? . g$12059$1WS4nL)
        (symbol=? . g$6007$1WS4nL)
        (symbol->string . g$12058$1WS4nL)
        (substring . g$12057$1WS4nL)
        (string? . g$12056$1WS4nL)
        (string>? . g$6004$1WS4nL)
        (string>=? . g$6006$1WS4nL)
        (string=? . g$6002$1WS4nL)
        (string<? . g$6003$1WS4nL)
        (string<=? . g$6005$1WS4nL)
        (string-ref . g$12055$1WS4nL)
        (string-length . g$12054$1WS4nL)
        (string-for-each . g$12053$1WS4nL)
        (string-copy . g$12052$1WS4nL)
        (string-append . g$12051$1WS4nL)
        (string->symbol . g$12050$1WS4nL)
        (string->number . g$12049$1WS4nL)
        (string->list . g$12048$1WS4nL)
        (string . g$12047$1WS4nL)
        (sqrt . g$12046$1WS4nL)
        (sin . g$12045$1WS4nL)
        (round . g$12044$1WS4nL)
        (reverse . g$12043$1WS4nL)
        (real? . g$12042$1WS4nL)
        (real-valued? . g$12041$1WS4nL)
        (real-part . g$12040$1WS4nL)
        (rationalize . g$6048$1WS4nL)
        (rational? . g$12039$1WS4nL)
        (rational-valued? . g$12038$1WS4nL)
        (procedure? . g$12037$1WS4nL)
        (positive? . g$12036$1WS4nL)
        (pair? . g$12035$1WS4nL)
        (odd? . g$12034$1WS4nL)
        (numerator . g$12033$1WS4nL)
        (number? . g$12032$1WS4nL)
        (number->string . g$12031$1WS4nL)
        (null? . g$12030$1WS4nL)
        (not . g$12029$1WS4nL)
        (negative? . g$12028$1WS4nL)
        (nan? . g$12027$1WS4nL)
        (min . g$12026$1WS4nL)
        (max . g$12025$1WS4nL)
        (map . g$12024$1WS4nL)
        (make-vector . g$12023$1WS4nL)
        (make-string . g$12022$1WS4nL)
        (make-rectangular . g$12021$1WS4nL)
        (make-polar . g$12020$1WS4nL)
        (magnitude . g$12019$1WS4nL)
        (log . g$12018$1WS4nL)
        (list? . g$12017$1WS4nL)
        (list-tail . g$12016$1WS4nL)
        (list-ref . g$12015$1WS4nL)
        (list->vector . g$12014$1WS4nL)
        (list->string . g$12013$1WS4nL)
        (list . g$12012$1WS4nL)
        (length . g$12011$1WS4nL)
        (lcm . g$12010$1WS4nL)
        (integer? . g$12009$1WS4nL)
        (integer-valued? . g$12008$1WS4nL)
        (integer->char . g$12007$1WS4nL)
        (infinite? . g$12006$1WS4nL)
        (inexact? . g$12005$1WS4nL)
        (inexact . g$12004$1WS4nL)
        (imag-part . g$12003$1WS4nL)
        (gcd . g$12002$1WS4nL)
        (for-each . g$12001$1WS4nL)
        (floor . g$12000$1WS4nL)
        (finite? . g$11999$1WS4nL)
        (expt . g$11998$1WS4nL)
        (exp . g$11997$1WS4nL)
        (exact? . g$11996$1WS4nL)
        (exact-integer-sqrt . g$11995$1WS4nL)
        (exact . g$11994$1WS4nL)
        (even? . g$11993$1WS4nL)
        (error . g$11992$1WS4nL)
        (eqv? . g$11991$1WS4nL)
        (equal? . g$11990$1WS4nL)
        (eq? . g$11989$1WS4nL)
        (dynamic-wind . g$11988$1WS4nL)
        (div0-and-mod0 . g$11987$1WS4nL)
        (mod0 . g$11986$1WS4nL)
        (div0 . g$11985$1WS4nL)
        (div-and-mod . g$11984$1WS4nL)
        (mod . g$11983$1WS4nL)
        (div . g$11982$1WS4nL)
        (denominator . g$11981$1WS4nL)
        (cos . g$11980$1WS4nL)
        (cons . g$11979$1WS4nL)
        (complex? . g$11978$1WS4nL)
        (char? . g$11977$1WS4nL)
        (char>? . g$6045$1WS4nL)
        (char>=? . g$6047$1WS4nL)
        (char=? . g$6043$1WS4nL)
        (char<? . g$6044$1WS4nL)
        (char<=? . g$6046$1WS4nL)
        (char->integer . g$11976$1WS4nL)
        (ceiling . g$11975$1WS4nL)
        (call-with-values . g$11974$1WS4nL)
        (call/cc . g$11973$1WS4nL)
        (call-with-current-continuation . g$11972$1WS4nL)
        (cddddr . g$5967$1WS4nL)
        (cdddar . g$5966$1WS4nL)
        (cddadr . g$5965$1WS4nL)
        (cddaar . g$5964$1WS4nL)
        (cdaddr . g$5963$1WS4nL)
        (cdadar . g$5962$1WS4nL)
        (cdaadr . g$5961$1WS4nL)
        (cdaaar . g$5960$1WS4nL)
        (cadddr . g$5959$1WS4nL)
        (caddar . g$5958$1WS4nL)
        (cadadr . g$5957$1WS4nL)
        (cadaar . g$5956$1WS4nL)
        (caaddr . g$5955$1WS4nL)
        (caadar . g$5954$1WS4nL)
        (caaadr . g$5953$1WS4nL)
        (caaaar . g$5952$1WS4nL)
        (cdddr . g$5951$1WS4nL)
        (cddar . g$5950$1WS4nL)
        (cdadr . g$5949$1WS4nL)
        (cdaar . g$5948$1WS4nL)
        (caddr . g$5947$1WS4nL)
        (cadar . g$5946$1WS4nL)
        (caadr . g$5945$1WS4nL)
        (caaar . g$5944$1WS4nL)
        (cddr . g$5943$1WS4nL)
        (cdar . g$5942$1WS4nL)
        (cadr . g$5941$1WS4nL)
        (caar . g$5940$1WS4nL)
        (cdr . g$11971$1WS4nL)
        (car . g$11970$1WS4nL)
        (boolean? . g$11969$1WS4nL)
        (boolean=? . g$6008$1WS4nL)
        (atan . g$11968$1WS4nL)
        (assertion-violation . g$11967$1WS4nL)
        (asin . g$11966$1WS4nL)
        (apply . g$11965$1WS4nL)
        (append . g$11964$1WS4nL)
        (angle . g$11963$1WS4nL)
        (acos . g$11962$1WS4nL)
        (abs . g$11961$1WS4nL)
        (/ . g$11960$1WS4nL)
        (* . g$11959$1WS4nL)
        (- . g$11958$1WS4nL)
        (+ . g$11957$1WS4nL)
        (>= . g$11956$1WS4nL)
        (> . g$11955$1WS4nL)
        (= . g$11954$1WS4nL)
        (<= . g$11953$1WS4nL)
        (< . g$11952$1WS4nL)
        (&no-nans . g$11922$1WS4nL)
        (&no-infinities . g$11921$1WS4nL)
        (&i/o-encoding . g$11920$1WS4nL)
        (&i/o-decoding . g$11919$1WS4nL)
        (&i/o-port . g$11918$1WS4nL)
        (&i/o-file-does-not-exist . g$11917$1WS4nL)
        (&i/o-file-already-exists . g$11916$1WS4nL)
        (&i/o-file-is-read-only . g$11915$1WS4nL)
        (&i/o-file-protection . g$11914$1WS4nL)
        (&i/o-filename . g$11913$1WS4nL)
        (&i/o-invalid-position . g$11912$1WS4nL)
        (&i/o-write . g$11911$1WS4nL)
        (&i/o-read . g$11910$1WS4nL)
        (&i/o . g$11909$1WS4nL)
        (&non-continuable . g$11908$1WS4nL)
        (&undefined . g$11907$1WS4nL)
        (&syntax . g$11906$1WS4nL)
        (&lexical . g$11905$1WS4nL)
        (&implementation-restriction . g$11904$1WS4nL)
        (&who . g$11903$1WS4nL)
        (&irritants . g$11902$1WS4nL)
        (&assertion . g$11901$1WS4nL)
        (&violation . g$11900$1WS4nL)
        (&error . g$11899$1WS4nL)
        (&serious . g$11898$1WS4nL)
        (&warning . g$11897$1WS4nL)
        (&message . g$11896$1WS4nL)
        (&condition . g$11895$1WS4nL)
        (define-condition-type . g$11894$1WS4nL)
        (define-enumeration . g$11893$1WS4nL)
        (define-record-type . g$11892$1WS4nL)
        (parent-rtd . g$11891$1WS4nL)
        (nongenerative . g$11890$1WS4nL)
        (opaque . g$11889$1WS4nL)
        (sealed . g$11888$1WS4nL)
        (protocol . g$11887$1WS4nL)
        (parent . g$11886$1WS4nL)
        (immutable . g$11885$1WS4nL)
        (mutable . g$11884$1WS4nL)
        (fields . g$11883$1WS4nL)
        (error-handling-mode . g$11882$1WS4nL)
        (file-options . g$11881$1WS4nL)
        (buffer-mode . g$11880$1WS4nL)
        (eol-style . g$11879$1WS4nL)
        (guard . g$11878$1WS4nL)
        (unsyntax-splicing . g$11872$1WS4nL)
        (unsyntax . g$11871$1WS4nL)
        (unquote-splicing . g$11870$1WS4nL)
        (unquote . g$11869$1WS4nL)
        (_ . g$11868$1WS4nL)
        (else . g$11867$1WS4nL)
        (=> . g$11866$1WS4nL)
        (... . g$11865$1WS4nL)
        (assert . g$11864$1WS4nL)
        (endianness . g$11863$1WS4nL)
        (or . g$11860$1WS4nL)
        (and . g$11859$1WS4nL)
        (do . g$11858$1WS4nL)
        (cond . g$11857$1WS4nL)
        (let* . g$11856$1WS4nL)
        (let . g$11855$1WS4nL)
        (identifier-syntax . g$11854$1WS4nL)
        (with-syntax . g$11853$1WS4nL)
        (quasisyntax . g$11852$1WS4nL)
        (quasiquote . g$11851$1WS4nL)
        (syntax-rules . g$11850$1WS4nL)
        (let-values . g$11846$1WS4nL)
        (let*-values . g$11845$1WS4nL)
        (record-constructor-descriptor . g$11844$1WS4nL)
        (record-type-descriptor . g$11843$1WS4nL)
        (case . g$11841$1WS4nL)
        (unless . g$11839$1WS4nL)
        (when . g$11838$1WS4nL)
        (if . g$11837$1WS4nL)
        (letrec* . g$11836$1WS4nL)
        (letrec . g$11835$1WS4nL)
        (case-lambda . g$11833$1WS4nL)
        (lambda . g$11832$1WS4nL)
        (syntax . g$11831$1WS4nL)
        (syntax-case . g$11830$1WS4nL)
        (quote . g$11829$1WS4nL)
        (letrec-syntax . g$11827$1WS4nL)
        (let-syntax . g$11826$1WS4nL)
        (set! . g$11825$1WS4nL)
        (begin . g$11821$1WS4nL)
        (define-syntax . g$11819$1WS4nL)
        (define . g$11818$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12445$1WS4nL
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$8816$1WS4nL)
        (scheme-report-environment . g$8791$1WS4nL)
        (quotient . g$6835$1WS4nL)
        (null-environment . g$8790$1WS4nL)
        (remainder . g$6836$1WS4nL)
        (modulo . g$6837$1WS4nL)
        (inexact->exact . g$12212$1WS4nL)
        (force . g$6839$1WS4nL)
        (exact->inexact . g$12211$1WS4nL)
        (delay . g$11862$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12446$1WS4nL
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11858$1WS4nL)
        (unless . g$11839$1WS4nL)
        (when . g$11838$1WS4nL)
        (case-lambda . g$11833$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12447$1WS4nL
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8793$1WS4nL) (environment . g$8789$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12448$1WS4nL
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12207$1WS4nL) (set-car! . g$12206$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12449$1WS4nL
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12209$1WS4nL) (string-set! . g$12208$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12450$1WS4nL
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12210$1WS4nL) (command-line . g$11782$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12451$1WS4nL
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8413$1WS4nL)
        (identifier? . g$8811$1WS4nL)
        (generate-temporaries . g$8800$1WS4nL)
        (free-identifier=? . g$8801$1WS4nL)
        (syntax->datum . g$8813$1WS4nL)
        (datum->syntax . g$8812$1WS4nL)
        (bound-identifier=? . g$8802$1WS4nL)
        (syntax-violation . g$8810$1WS4nL)
        (unsyntax-splicing . g$11872$1WS4nL)
        (unsyntax . g$11871$1WS4nL)
        (_ . g$11868$1WS4nL)
        (... . g$11865$1WS4nL)
        (with-syntax . g$11853$1WS4nL)
        (quasisyntax . g$11852$1WS4nL)
        (syntax . g$11831$1WS4nL)
        (syntax-case . g$11830$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12452$1WS4nL
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6492$1WS4nL)
        (file-exists? . g$6491$1WS4nL)
        (make-i/o-write-error . g$7177$1WS4nL)
        (make-i/o-read-error . g$7163$1WS4nL)
        (make-i/o-port-error . g$7282$1WS4nL)
        (make-i/o-invalid-position-error . g$7192$1WS4nL)
        (make-i/o-filename-error . g$7209$1WS4nL)
        (make-i/o-file-protection-error . g$7225$1WS4nL)
        (make-i/o-file-is-read-only-error . g$7239$1WS4nL)
        (make-i/o-file-does-not-exist-error . g$7267$1WS4nL)
        (make-i/o-file-already-exists-error . g$7253$1WS4nL)
        (make-i/o-error . g$7149$1WS4nL)
        (i/o-write-error? . g$7178$1WS4nL)
        (i/o-read-error? . g$7164$1WS4nL)
        (i/o-port-error? . g$7284$1WS4nL)
        (i/o-invalid-position-error? . g$7194$1WS4nL)
        (i/o-error-position . g$7195$1WS4nL)
        (i/o-filename-error? . g$7211$1WS4nL)
        (i/o-file-protection-error? . g$7226$1WS4nL)
        (i/o-file-is-read-only-error? . g$7240$1WS4nL)
        (i/o-file-does-not-exist-error? . g$7268$1WS4nL)
        (i/o-file-already-exists-error? . g$7254$1WS4nL)
        (i/o-error? . g$7150$1WS4nL)
        (i/o-error-port . g$7285$1WS4nL)
        (i/o-error-filename . g$7212$1WS4nL)
        (&i/o-port . g$11918$1WS4nL)
        (&i/o-file-does-not-exist . g$11917$1WS4nL)
        (&i/o-file-already-exists . g$11916$1WS4nL)
        (&i/o-file-is-read-only . g$11915$1WS4nL)
        (&i/o-file-protection . g$11914$1WS4nL)
        (&i/o-filename . g$11913$1WS4nL)
        (&i/o-invalid-position . g$11912$1WS4nL)
        (&i/o-write . g$11911$1WS4nL)
        (&i/o-read . g$11910$1WS4nL)
        (&i/o . g$11909$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12453$1WS4nL
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12304$1WS4nL)
        (vector-sort . g$12303$1WS4nL)
        (list-sort . g$6855$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12454$1WS4nL
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$12072$1WS4nL)
        (vector? . g$12071$1WS4nL)
        (vector-set! . g$12070$1WS4nL)
        (vector-ref . g$12069$1WS4nL)
        (vector-map . g$12068$1WS4nL)
        (vector-length . g$12067$1WS4nL)
        (vector-for-each . g$12066$1WS4nL)
        (vector-fill! . g$12065$1WS4nL)
        (vector->list . g$12064$1WS4nL)
        (vector . g$12063$1WS4nL)
        (values . g$12062$1WS4nL)
        (truncate . g$12061$1WS4nL)
        (tan . g$12060$1WS4nL)
        (symbol? . g$12059$1WS4nL)
        (symbol=? . g$6007$1WS4nL)
        (symbol->string . g$12058$1WS4nL)
        (substring . g$12057$1WS4nL)
        (string? . g$12056$1WS4nL)
        (string>? . g$6004$1WS4nL)
        (string>=? . g$6006$1WS4nL)
        (string=? . g$6002$1WS4nL)
        (string<? . g$6003$1WS4nL)
        (string<=? . g$6005$1WS4nL)
        (string-ref . g$12055$1WS4nL)
        (string-length . g$12054$1WS4nL)
        (string-for-each . g$12053$1WS4nL)
        (string-copy . g$12052$1WS4nL)
        (string-append . g$12051$1WS4nL)
        (string->symbol . g$12050$1WS4nL)
        (string->number . g$12049$1WS4nL)
        (string->list . g$12048$1WS4nL)
        (string . g$12047$1WS4nL)
        (sqrt . g$12046$1WS4nL)
        (sin . g$12045$1WS4nL)
        (round . g$12044$1WS4nL)
        (reverse . g$12043$1WS4nL)
        (real? . g$12042$1WS4nL)
        (real-valued? . g$12041$1WS4nL)
        (real-part . g$12040$1WS4nL)
        (rationalize . g$6048$1WS4nL)
        (rational? . g$12039$1WS4nL)
        (rational-valued? . g$12038$1WS4nL)
        (procedure? . g$12037$1WS4nL)
        (positive? . g$12036$1WS4nL)
        (pair? . g$12035$1WS4nL)
        (odd? . g$12034$1WS4nL)
        (numerator . g$12033$1WS4nL)
        (number? . g$12032$1WS4nL)
        (number->string . g$12031$1WS4nL)
        (null? . g$12030$1WS4nL)
        (not . g$12029$1WS4nL)
        (negative? . g$12028$1WS4nL)
        (nan? . g$12027$1WS4nL)
        (min . g$12026$1WS4nL)
        (max . g$12025$1WS4nL)
        (map . g$12024$1WS4nL)
        (make-vector . g$12023$1WS4nL)
        (make-string . g$12022$1WS4nL)
        (make-rectangular . g$12021$1WS4nL)
        (make-polar . g$12020$1WS4nL)
        (magnitude . g$12019$1WS4nL)
        (log . g$12018$1WS4nL)
        (list? . g$12017$1WS4nL)
        (list-tail . g$12016$1WS4nL)
        (list-ref . g$12015$1WS4nL)
        (list->vector . g$12014$1WS4nL)
        (list->string . g$12013$1WS4nL)
        (list . g$12012$1WS4nL)
        (length . g$12011$1WS4nL)
        (lcm . g$12010$1WS4nL)
        (integer? . g$12009$1WS4nL)
        (integer-valued? . g$12008$1WS4nL)
        (integer->char . g$12007$1WS4nL)
        (infinite? . g$12006$1WS4nL)
        (inexact? . g$12005$1WS4nL)
        (inexact . g$12004$1WS4nL)
        (imag-part . g$12003$1WS4nL)
        (gcd . g$12002$1WS4nL)
        (for-each . g$12001$1WS4nL)
        (floor . g$12000$1WS4nL)
        (finite? . g$11999$1WS4nL)
        (expt . g$11998$1WS4nL)
        (exp . g$11997$1WS4nL)
        (exact? . g$11996$1WS4nL)
        (exact-integer-sqrt . g$11995$1WS4nL)
        (exact . g$11994$1WS4nL)
        (even? . g$11993$1WS4nL)
        (error . g$11992$1WS4nL)
        (eqv? . g$11991$1WS4nL)
        (equal? . g$11990$1WS4nL)
        (eq? . g$11989$1WS4nL)
        (dynamic-wind . g$11988$1WS4nL)
        (div0-and-mod0 . g$11987$1WS4nL)
        (mod0 . g$11986$1WS4nL)
        (div0 . g$11985$1WS4nL)
        (div-and-mod . g$11984$1WS4nL)
        (mod . g$11983$1WS4nL)
        (div . g$11982$1WS4nL)
        (denominator . g$11981$1WS4nL)
        (cos . g$11980$1WS4nL)
        (cons . g$11979$1WS4nL)
        (complex? . g$11978$1WS4nL)
        (char? . g$11977$1WS4nL)
        (char>? . g$6045$1WS4nL)
        (char>=? . g$6047$1WS4nL)
        (char=? . g$6043$1WS4nL)
        (char<? . g$6044$1WS4nL)
        (char<=? . g$6046$1WS4nL)
        (char->integer . g$11976$1WS4nL)
        (ceiling . g$11975$1WS4nL)
        (call-with-values . g$11974$1WS4nL)
        (call/cc . g$11973$1WS4nL)
        (call-with-current-continuation . g$11972$1WS4nL)
        (cddddr . g$5967$1WS4nL)
        (cdddar . g$5966$1WS4nL)
        (cddadr . g$5965$1WS4nL)
        (cddaar . g$5964$1WS4nL)
        (cdaddr . g$5963$1WS4nL)
        (cdadar . g$5962$1WS4nL)
        (cdaadr . g$5961$1WS4nL)
        (cdaaar . g$5960$1WS4nL)
        (cadddr . g$5959$1WS4nL)
        (caddar . g$5958$1WS4nL)
        (cadadr . g$5957$1WS4nL)
        (cadaar . g$5956$1WS4nL)
        (caaddr . g$5955$1WS4nL)
        (caadar . g$5954$1WS4nL)
        (caaadr . g$5953$1WS4nL)
        (caaaar . g$5952$1WS4nL)
        (cdddr . g$5951$1WS4nL)
        (cddar . g$5950$1WS4nL)
        (cdadr . g$5949$1WS4nL)
        (cdaar . g$5948$1WS4nL)
        (caddr . g$5947$1WS4nL)
        (cadar . g$5946$1WS4nL)
        (caadr . g$5945$1WS4nL)
        (caaar . g$5944$1WS4nL)
        (cddr . g$5943$1WS4nL)
        (cdar . g$5942$1WS4nL)
        (cadr . g$5941$1WS4nL)
        (caar . g$5940$1WS4nL)
        (cdr . g$11971$1WS4nL)
        (car . g$11970$1WS4nL)
        (boolean? . g$11969$1WS4nL)
        (boolean=? . g$6008$1WS4nL)
        (atan . g$11968$1WS4nL)
        (assertion-violation . g$11967$1WS4nL)
        (asin . g$11966$1WS4nL)
        (apply . g$11965$1WS4nL)
        (append . g$11964$1WS4nL)
        (angle . g$11963$1WS4nL)
        (acos . g$11962$1WS4nL)
        (abs . g$11961$1WS4nL)
        (/ . g$11960$1WS4nL)
        (* . g$11959$1WS4nL)
        (- . g$11958$1WS4nL)
        (+ . g$11957$1WS4nL)
        (>= . g$11956$1WS4nL)
        (> . g$11955$1WS4nL)
        (= . g$11954$1WS4nL)
        (<= . g$11953$1WS4nL)
        (< . g$11952$1WS4nL)
        (unquote-splicing . g$11870$1WS4nL)
        (unquote . g$11869$1WS4nL)
        (_ . g$11868$1WS4nL)
        (else . g$11867$1WS4nL)
        (=> . g$11866$1WS4nL)
        (... . g$11865$1WS4nL)
        (assert . g$11864$1WS4nL)
        (or . g$11860$1WS4nL)
        (and . g$11859$1WS4nL)
        (cond . g$11857$1WS4nL)
        (let* . g$11856$1WS4nL)
        (let . g$11855$1WS4nL)
        (identifier-syntax . g$11854$1WS4nL)
        (quasiquote . g$11851$1WS4nL)
        (syntax-rules . g$11850$1WS4nL)
        (let-values . g$11846$1WS4nL)
        (let*-values . g$11845$1WS4nL)
        (case . g$11841$1WS4nL)
        (if . g$11837$1WS4nL)
        (letrec* . g$11836$1WS4nL)
        (letrec . g$11835$1WS4nL)
        (lambda . g$11832$1WS4nL)
        (quote . g$11829$1WS4nL)
        (letrec-syntax . g$11827$1WS4nL)
        (let-syntax . g$11826$1WS4nL)
        (set! . g$11825$1WS4nL)
        (begin . g$11821$1WS4nL)
        (define-syntax . g$11819$1WS4nL)
        (define . g$11818$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12455$1WS4nL
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5847$1WS4nL)
        (remv . g$5848$1WS4nL)
        (remp . g$5830$1WS4nL)
        (remq . g$5849$1WS4nL)
        (partition . g$5829$1WS4nL)
        (memv . g$5837$1WS4nL)
        (memq . g$5836$1WS4nL)
        (memp . g$5839$1WS4nL)
        (member . g$5838$1WS4nL)
        (exists . g$5843$1WS4nL)
        (for-all . g$5842$1WS4nL)
        (fold-right . g$5846$1WS4nL)
        (fold-left . g$5845$1WS4nL)
        (find . g$5828$1WS4nL)
        (filter . g$5831$1WS4nL)
        (cons* . g$5844$1WS4nL)
        (assv . g$5833$1WS4nL)
        (assq . g$5832$1WS4nL)
        (assp . g$5835$1WS4nL)
        (assoc . g$5834$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12456$1WS4nL
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7348$1WS4nL)
        (call-with-input-file . g$7347$1WS4nL)
        (write-char . g$12290$1WS4nL)
        (write . g$12289$1WS4nL)
        (with-output-to-file . g$7346$1WS4nL)
        (with-input-from-file . g$7345$1WS4nL)
        (read-char . g$12288$1WS4nL)
        (read . g$12287$1WS4nL)
        (peek-char . g$12286$1WS4nL)
        (open-output-file . g$12285$1WS4nL)
        (open-input-file . g$12284$1WS4nL)
        (newline . g$12283$1WS4nL)
        (display . g$12282$1WS4nL)
        (close-output-port . g$12281$1WS4nL)
        (close-input-port . g$12280$1WS4nL)
        (eof-object? . g$12279$1WS4nL)
        (eof-object . g$12278$1WS4nL)
        (current-error-port . g$12277$1WS4nL)
        (current-output-port . g$12276$1WS4nL)
        (current-input-port . g$12275$1WS4nL)
        (output-port? . g$12274$1WS4nL)
        (input-port? . g$12273$1WS4nL)
        (make-i/o-write-error . g$7177$1WS4nL)
        (make-i/o-read-error . g$7163$1WS4nL)
        (make-i/o-port-error . g$7282$1WS4nL)
        (make-i/o-invalid-position-error . g$7192$1WS4nL)
        (make-i/o-filename-error . g$7209$1WS4nL)
        (make-i/o-file-protection-error . g$7225$1WS4nL)
        (make-i/o-file-is-read-only-error . g$7239$1WS4nL)
        (make-i/o-file-does-not-exist-error . g$7267$1WS4nL)
        (make-i/o-file-already-exists-error . g$7253$1WS4nL)
        (make-i/o-error . g$7149$1WS4nL)
        (i/o-write-error? . g$7178$1WS4nL)
        (i/o-read-error? . g$7164$1WS4nL)
        (i/o-port-error? . g$7284$1WS4nL)
        (i/o-invalid-position-error? . g$7194$1WS4nL)
        (i/o-error-position . g$7195$1WS4nL)
        (i/o-filename-error? . g$7211$1WS4nL)
        (i/o-file-protection-error? . g$7226$1WS4nL)
        (i/o-file-is-read-only-error? . g$7240$1WS4nL)
        (i/o-file-does-not-exist-error? . g$7268$1WS4nL)
        (i/o-file-already-exists-error? . g$7254$1WS4nL)
        (i/o-error? . g$7150$1WS4nL)
        (i/o-error-port . g$7285$1WS4nL)
        (i/o-error-filename . g$7212$1WS4nL)
        (&i/o-port . g$11918$1WS4nL)
        (&i/o-file-does-not-exist . g$11917$1WS4nL)
        (&i/o-file-already-exists . g$11916$1WS4nL)
        (&i/o-file-is-read-only . g$11915$1WS4nL)
        (&i/o-file-protection . g$11914$1WS4nL)
        (&i/o-filename . g$11913$1WS4nL)
        (&i/o-invalid-position . g$11912$1WS4nL)
        (&i/o-write . g$11911$1WS4nL)
        (&i/o-read . g$11910$1WS4nL)
        (&i/o . g$11909$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12457$1WS4nL
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12233$1WS4nL)
        (utf32->string . g$12197$1WS4nL)
        (utf16->string . g$12196$1WS4nL)
        (utf8->string . g$12195$1WS4nL)
        (uint-list->bytevector . g$12194$1WS4nL)
        (u8-list->bytevector . g$12193$1WS4nL)
        (string->utf8 . g$12192$1WS4nL)
        (string->utf32 . g$12191$1WS4nL)
        (string->utf16 . g$12190$1WS4nL)
        (sint-list->bytevector . g$12189$1WS4nL)
        (native-endianness . g$6498$1WS4nL)
        (bytevector? . g$12188$1WS4nL)
        (bytevector=? . g$12187$1WS4nL)
        (bytevector-uint-set! . g$12186$1WS4nL)
        (bytevector-uint-ref . g$12185$1WS4nL)
        (bytevector-u8-set! . g$12184$1WS4nL)
        (bytevector-u8-ref . g$12183$1WS4nL)
        (bytevector-u64-set! . g$6519$1WS4nL)
        (bytevector-u64-ref . g$6515$1WS4nL)
        (bytevector-u64-native-set! . g$6521$1WS4nL)
        (bytevector-u64-native-ref . g$6517$1WS4nL)
        (bytevector-u32-set! . g$6511$1WS4nL)
        (bytevector-u32-ref . g$6507$1WS4nL)
        (bytevector-u32-native-set! . g$6513$1WS4nL)
        (bytevector-u32-native-ref . g$6509$1WS4nL)
        (bytevector-u16-set! . g$6503$1WS4nL)
        (bytevector-u16-ref . g$6499$1WS4nL)
        (bytevector-u16-native-set! . g$6505$1WS4nL)
        (bytevector-u16-native-ref . g$6501$1WS4nL)
        (bytevector-sint-set! . g$12182$1WS4nL)
        (bytevector-sint-ref . g$12181$1WS4nL)
        (bytevector-s8-set! . g$12180$1WS4nL)
        (bytevector-s8-ref . g$12179$1WS4nL)
        (bytevector-s64-set! . g$6520$1WS4nL)
        (bytevector-s64-ref . g$6516$1WS4nL)
        (bytevector-s64-native-set! . g$6522$1WS4nL)
        (bytevector-s64-native-ref . g$6518$1WS4nL)
        (bytevector-s32-set! . g$6512$1WS4nL)
        (bytevector-s32-ref . g$6508$1WS4nL)
        (bytevector-s32-native-set! . g$6514$1WS4nL)
        (bytevector-s32-native-ref . g$6510$1WS4nL)
        (bytevector-s16-set! . g$6504$1WS4nL)
        (bytevector-s16-ref . g$6500$1WS4nL)
        (bytevector-s16-native-set! . g$6506$1WS4nL)
        (bytevector-s16-native-ref . g$6502$1WS4nL)
        (bytevector-length . g$12178$1WS4nL)
        (bytevector-ieee-single-set! . g$12177$1WS4nL)
        (bytevector-ieee-single-ref . g$12176$1WS4nL)
        (bytevector-ieee-single-native-set! . g$6525$1WS4nL)
        (bytevector-ieee-single-native-ref . g$6523$1WS4nL)
        (bytevector-ieee-double-set! . g$12175$1WS4nL)
        (bytevector-ieee-double-ref . g$12174$1WS4nL)
        (bytevector-ieee-double-native-set! . g$6526$1WS4nL)
        (bytevector-ieee-double-native-ref . g$6524$1WS4nL)
        (bytevector-fill! . g$12173$1WS4nL)
        (bytevector-copy! . g$12172$1WS4nL)
        (bytevector-copy . g$12171$1WS4nL)
        (bytevector->uint-list . g$12170$1WS4nL)
        (bytevector->u8-list . g$12169$1WS4nL)
        (bytevector->sint-list . g$12168$1WS4nL)
        (endianness . g$11863$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12458$1WS4nL
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12340$1WS4nL)
        (string-titlecase . g$12339$1WS4nL)
        (string-normalize-nfkd . g$12338$1WS4nL)
        (string-normalize-nfkc . g$12337$1WS4nL)
        (string-normalize-nfd . g$12336$1WS4nL)
        (string-normalize-nfc . g$12335$1WS4nL)
        (string-foldcase . g$12334$1WS4nL)
        (string-downcase . g$12333$1WS4nL)
        (string-ci>? . g$6917$1WS4nL)
        (string-ci>=? . g$6919$1WS4nL)
        (string-ci=? . g$6915$1WS4nL)
        (string-ci<? . g$6916$1WS4nL)
        (string-ci<=? . g$6918$1WS4nL)
        (char-whitespace? . g$12332$1WS4nL)
        (char-upper-case? . g$12331$1WS4nL)
        (char-title-case? . g$12330$1WS4nL)
        (char-numeric? . g$12329$1WS4nL)
        (char-lower-case? . g$12328$1WS4nL)
        (char-general-category . g$12327$1WS4nL)
        (char-upcase . g$12326$1WS4nL)
        (char-titlecase . g$12325$1WS4nL)
        (char-foldcase . g$12324$1WS4nL)
        (char-downcase . g$12323$1WS4nL)
        (char-ci>? . g$6956$1WS4nL)
        (char-ci>=? . g$6958$1WS4nL)
        (char-ci=? . g$6954$1WS4nL)
        (char-ci<? . g$6955$1WS4nL)
        (char-ci<=? . g$6957$1WS4nL)
        (char-alphabetic? . g$12322$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12459$1WS4nL
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12205$1WS4nL)
        (raise-continuable . g$12204$1WS4nL)
        (raise . g$12203$1WS4nL)
        (guard . g$11878$1WS4nL)
        (else . g$11867$1WS4nL)
        (=> . g$11866$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12460$1WS4nL
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7018$1WS4nL)
        (bitwise-reverse-bit-field . g$12083$1WS4nL)
        (bitwise-length . g$12082$1WS4nL)
        (bitwise-if . g$7012$1WS4nL)
        (bitwise-first-bit-set . g$12081$1WS4nL)
        (bitwise-copy-bit-field . g$7015$1WS4nL)
        (bitwise-copy-bit . g$7013$1WS4nL)
        (bitwise-bit-set? . g$12080$1WS4nL)
        (bitwise-bit-field . g$12079$1WS4nL)
        (bitwise-bit-count . g$12078$1WS4nL)
        (bitwise-xor . g$12077$1WS4nL)
        (bitwise-ior . g$12076$1WS4nL)
        (bitwise-and . g$12075$1WS4nL)
        (bitwise-not . g$12074$1WS4nL)
        (bitwise-arithmetic-shift-right . g$7017$1WS4nL)
        (bitwise-arithmetic-shift-left . g$7016$1WS4nL)
        (bitwise-arithmetic-shift . g$12073$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12461$1WS4nL
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12121$1WS4nL)
        (fxxor . g$12120$1WS4nL)
        (fxrotate-bit-field . g$7066$1WS4nL)
        (fxreverse-bit-field . g$12119$1WS4nL)
        (fxpositive? . g$12118$1WS4nL)
        (fxodd? . g$12117$1WS4nL)
        (fxnot . g$12116$1WS4nL)
        (fxnegative? . g$12115$1WS4nL)
        (fxmod0 . g$12114$1WS4nL)
        (fxmod . g$12113$1WS4nL)
        (fxmin . g$12112$1WS4nL)
        (fxmax . g$12111$1WS4nL)
        (fxlength . g$12110$1WS4nL)
        (fxior . g$12109$1WS4nL)
        (fxif . g$7060$1WS4nL)
        (fxfirst-bit-set . g$12108$1WS4nL)
        (fxeven? . g$12107$1WS4nL)
        (fxdiv0-and-mod0 . g$12106$1WS4nL)
        (fxdiv0 . g$12105$1WS4nL)
        (fxdiv-and-mod . g$12104$1WS4nL)
        (fxdiv . g$12103$1WS4nL)
        (fxcopy-bit-field . g$7063$1WS4nL)
        (fxcopy-bit . g$7061$1WS4nL)
        (fxbit-set? . g$12102$1WS4nL)
        (fxbit-field . g$7062$1WS4nL)
        (fxbit-count . g$12101$1WS4nL)
        (fxarithmetic-shift-right . g$7065$1WS4nL)
        (fxarithmetic-shift-left . g$7064$1WS4nL)
        (fxarithmetic-shift . g$12100$1WS4nL)
        (fxand . g$12099$1WS4nL)
        (fx>? . g$12098$1WS4nL)
        (fx>=? . g$12097$1WS4nL)
        (fx=? . g$12096$1WS4nL)
        (fx<? . g$12095$1WS4nL)
        (fx<=? . g$12094$1WS4nL)
        (fx-/carry . g$12093$1WS4nL)
        (fx- . g$12092$1WS4nL)
        (fx+/carry . g$12091$1WS4nL)
        (fx+ . g$12090$1WS4nL)
        (fx*/carry . g$12089$1WS4nL)
        (fx* . g$12088$1WS4nL)
        (greatest-fixnum . g$12087$1WS4nL)
        (least-fixnum . g$12086$1WS4nL)
        (fixnum-width . g$12085$1WS4nL)
        (fixnum? . g$12084$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12462$1WS4nL
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7135$1WS4nL)
        (no-infinities-violation? . g$7121$1WS4nL)
        (make-no-nans-violation . g$7134$1WS4nL)
        (make-no-infinities-violation . g$7120$1WS4nL)
        (real->flonum . g$12167$1WS4nL)
        (flzero? . g$12166$1WS4nL)
        (fltruncate . g$12165$1WS4nL)
        (fltan . g$12164$1WS4nL)
        (flsqrt . g$12163$1WS4nL)
        (flsin . g$12162$1WS4nL)
        (flround . g$12161$1WS4nL)
        (flpositive? . g$12160$1WS4nL)
        (flonum? . g$12159$1WS4nL)
        (flodd? . g$12158$1WS4nL)
        (flnumerator . g$12157$1WS4nL)
        (flnegative? . g$12156$1WS4nL)
        (flnan? . g$12155$1WS4nL)
        (flmod0 . g$12154$1WS4nL)
        (flmod . g$12153$1WS4nL)
        (flmin . g$12152$1WS4nL)
        (flmax . g$12151$1WS4nL)
        (fllog . g$12150$1WS4nL)
        (flinteger? . g$12149$1WS4nL)
        (flinfinite? . g$12148$1WS4nL)
        (flfloor . g$12147$1WS4nL)
        (flfinite? . g$12146$1WS4nL)
        (flexpt . g$12145$1WS4nL)
        (flexp . g$12144$1WS4nL)
        (fleven? . g$12143$1WS4nL)
        (fldiv0-and-mod0 . g$12142$1WS4nL)
        (fldiv0 . g$12141$1WS4nL)
        (fldiv-and-mod . g$12140$1WS4nL)
        (fldiv . g$12139$1WS4nL)
        (fldenominator . g$12138$1WS4nL)
        (flcos . g$12137$1WS4nL)
        (flceiling . g$12136$1WS4nL)
        (flatan . g$12135$1WS4nL)
        (flasin . g$12134$1WS4nL)
        (flacos . g$12133$1WS4nL)
        (flabs . g$12132$1WS4nL)
        (fl>? . g$12131$1WS4nL)
        (fl>=? . g$12130$1WS4nL)
        (fl=? . g$12129$1WS4nL)
        (fl<? . g$12128$1WS4nL)
        (fl<=? . g$12127$1WS4nL)
        (fl/ . g$12126$1WS4nL)
        (fl- . g$12125$1WS4nL)
        (fl+ . g$12124$1WS4nL)
        (fl* . g$12123$1WS4nL)
        (fixnum->flonum . g$12122$1WS4nL)
        (&no-nans . g$11922$1WS4nL)
        (&no-infinities . g$11921$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12463$1WS4nL
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12302$1WS4nL)
        (string-ci-hash . g$12301$1WS4nL)
        (string-hash . g$12300$1WS4nL)
        (equal-hash . g$12299$1WS4nL)
        (hashtable-equivalence-function . g$12298$1WS4nL)
        (make-hashtable . g$12297$1WS4nL)
        (hashtable-hash-function . g$12296$1WS4nL)
        (make-eqv-hashtable . g$6459$1WS4nL)
        (make-eq-hashtable . g$6458$1WS4nL)
        (hashtable? . g$12295$1WS4nL)
        (hashtable-update! . g$6465$1WS4nL)
        (hashtable-size . g$6460$1WS4nL)
        (hashtable-set! . g$6462$1WS4nL)
        (hashtable-ref . g$6461$1WS4nL)
        (hashtable-mutable? . g$12294$1WS4nL)
        (hashtable-keys . g$12293$1WS4nL)
        (hashtable-entries . g$12292$1WS4nL)
        (hashtable-delete! . g$6463$1WS4nL)
        (hashtable-copy . g$12291$1WS4nL)
        (hashtable-contains? . g$6464$1WS4nL)
        (hashtable-clear! . g$6466$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12464$1WS4nL
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12279$1WS4nL)
        (eof-object . g$12278$1WS4nL)
        (current-error-port . g$12277$1WS4nL)
        (current-output-port . g$12276$1WS4nL)
        (current-input-port . g$12275$1WS4nL)
        (output-port? . g$12274$1WS4nL)
        (input-port? . g$12273$1WS4nL)
        (utf-8-codec . g$12272$1WS4nL)
        (utf-16-codec . g$12271$1WS4nL)
        (transcoder-error-handling-mode . g$12270$1WS4nL)
        (transcoder-eol-style . g$12269$1WS4nL)
        (transcoder-codec . g$12268$1WS4nL)
        (transcoded-port . g$12267$1WS4nL)
        (textual-port? . g$12266$1WS4nL)
        (string->bytevector . g$12265$1WS4nL)
        (standard-output-port . g$12264$1WS4nL)
        (standard-input-port . g$12263$1WS4nL)
        (standard-error-port . g$12262$1WS4nL)
        (set-port-position! . g$12261$1WS4nL)
        (put-u8 . g$12260$1WS4nL)
        (put-string . g$12259$1WS4nL)
        (put-datum . g$12258$1WS4nL)
        (put-char . g$12257$1WS4nL)
        (put-bytevector . g$12256$1WS4nL)
        (port? . g$7321$1WS4nL)
        (port-transcoder . g$12255$1WS4nL)
        (port-position . g$12254$1WS4nL)
        (port-has-set-port-position!? . g$12253$1WS4nL)
        (port-has-port-position? . g$12252$1WS4nL)
        (port-eof? . g$12251$1WS4nL)
        (output-port-buffer-mode . g$12250$1WS4nL)
        (open-string-output-port . g$7320$1WS4nL)
        (open-string-input-port . g$12249$1WS4nL)
        (open-file-output-port . g$12248$1WS4nL)
        (open-file-input/output-port . g$12247$1WS4nL)
        (open-file-input-port . g$12246$1WS4nL)
        (open-bytevector-output-port . g$12245$1WS4nL)
        (open-bytevector-input-port . g$12244$1WS4nL)
        (native-transcoder . g$12243$1WS4nL)
        (native-eol-style . g$12242$1WS4nL)
        (make-transcoder . g$12241$1WS4nL)
        (latin-1-codec . g$12240$1WS4nL)
        (make-i/o-write-error . g$7177$1WS4nL)
        (make-i/o-read-error . g$7163$1WS4nL)
        (make-i/o-port-error . g$7282$1WS4nL)
        (make-i/o-invalid-position-error . g$7192$1WS4nL)
        (make-i/o-filename-error . g$7209$1WS4nL)
        (make-i/o-file-protection-error . g$7225$1WS4nL)
        (make-i/o-file-is-read-only-error . g$7239$1WS4nL)
        (make-i/o-file-does-not-exist-error . g$7267$1WS4nL)
        (make-i/o-file-already-exists-error . g$7253$1WS4nL)
        (make-i/o-error . g$7149$1WS4nL)
        (make-i/o-encoding-error . g$7313$1WS4nL)
        (make-i/o-decoding-error . g$7298$1WS4nL)
        (make-custom-textual-output-port . g$12239$1WS4nL)
        (make-custom-textual-input/output-port . g$12238$1WS4nL)
        (make-custom-textual-input-port . g$12237$1WS4nL)
        (make-custom-binary-output-port . g$12236$1WS4nL)
        (make-custom-binary-input/output-port . g$12235$1WS4nL)
        (make-custom-binary-input-port . g$12234$1WS4nL)
        (lookahead-u8 . g$12232$1WS4nL)
        (lookahead-char . g$12231$1WS4nL)
        (i/o-write-error? . g$7178$1WS4nL)
        (i/o-read-error? . g$7164$1WS4nL)
        (i/o-port-error? . g$7284$1WS4nL)
        (i/o-invalid-position-error? . g$7194$1WS4nL)
        (i/o-error-position . g$7195$1WS4nL)
        (i/o-filename-error? . g$7211$1WS4nL)
        (i/o-file-protection-error? . g$7226$1WS4nL)
        (i/o-file-is-read-only-error? . g$7240$1WS4nL)
        (i/o-file-does-not-exist-error? . g$7268$1WS4nL)
        (i/o-file-already-exists-error? . g$7254$1WS4nL)
        (i/o-error? . g$7150$1WS4nL)
        (i/o-error-port . g$7285$1WS4nL)
        (i/o-error-filename . g$7212$1WS4nL)
        (i/o-encoding-error? . g$7315$1WS4nL)
        (i/o-encoding-error-char . g$7316$1WS4nL)
        (i/o-decoding-error? . g$7299$1WS4nL)
        (get-u8 . g$12230$1WS4nL)
        (get-string-n! . g$12229$1WS4nL)
        (get-string-n . g$12228$1WS4nL)
        (get-string-all . g$12227$1WS4nL)
        (get-line . g$12226$1WS4nL)
        (get-datum . g$12225$1WS4nL)
        (get-char . g$12224$1WS4nL)
        (get-bytevector-some . g$12223$1WS4nL)
        (get-bytevector-n! . g$12222$1WS4nL)
        (get-bytevector-n . g$12221$1WS4nL)
        (get-bytevector-all . g$12220$1WS4nL)
        (flush-output-port . g$12219$1WS4nL)
        (close-port . g$12218$1WS4nL)
        (call-with-string-output-port . g$7322$1WS4nL)
        (call-with-port . g$12217$1WS4nL)
        (call-with-bytevector-output-port . g$12216$1WS4nL)
        (bytevector->string . g$12215$1WS4nL)
        (buffer-mode? . g$12214$1WS4nL)
        (binary-port? . g$12213$1WS4nL)
        (&i/o-encoding . g$11920$1WS4nL)
        (&i/o-decoding . g$11919$1WS4nL)
        (&i/o-port . g$11918$1WS4nL)
        (&i/o-file-does-not-exist . g$11917$1WS4nL)
        (&i/o-file-already-exists . g$11916$1WS4nL)
        (&i/o-file-is-read-only . g$11915$1WS4nL)
        (&i/o-file-protection . g$11914$1WS4nL)
        (&i/o-filename . g$11913$1WS4nL)
        (&i/o-invalid-position . g$11912$1WS4nL)
        (&i/o-write . g$11911$1WS4nL)
        (&i/o-read . g$11910$1WS4nL)
        (&i/o . g$11909$1WS4nL)
        (error-handling-mode . g$11882$1WS4nL)
        (file-options . g$11881$1WS4nL)
        (buffer-mode . g$11880$1WS4nL)
        (eol-style . g$11879$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12465$1WS4nL
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7406$1WS4nL)
        (enum-set=? . g$7413$1WS4nL)
        (enum-set-universe . g$7407$1WS4nL)
        (enum-set-union . g$7414$1WS4nL)
        (enum-set-subset? . g$7412$1WS4nL)
        (enum-set-projection . g$7418$1WS4nL)
        (enum-set-member? . g$7411$1WS4nL)
        (enum-set-intersection . g$7415$1WS4nL)
        (enum-set-indexer . g$7408$1WS4nL)
        (enum-set-difference . g$7416$1WS4nL)
        (enum-set-constructor . g$7409$1WS4nL)
        (enum-set-complement . g$7417$1WS4nL)
        (enum-set->list . g$7410$1WS4nL)
        (define-enumeration . g$11893$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12466$1WS4nL
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6746$1WS4nL)
        (warning? . g$6657$1WS4nL)
        (violation? . g$6699$1WS4nL)
        (undefined-violation? . g$6823$1WS4nL)
        (syntax-violation? . g$6807$1WS4nL)
        (syntax-violation-subform . g$6809$1WS4nL)
        (syntax-violation-form . g$6808$1WS4nL)
        (syntax-violation . g$8810$1WS4nL)
        (simple-conditions . g$12202$1WS4nL)
        (serious-condition? . g$6671$1WS4nL)
        (non-continuable-violation? . g$6761$1WS4nL)
        (message-condition? . g$6642$1WS4nL)
        (make-who-condition . g$6744$1WS4nL)
        (make-warning . g$6656$1WS4nL)
        (make-violation . g$6698$1WS4nL)
        (make-undefined-violation . g$6822$1WS4nL)
        (make-syntax-violation . g$6804$1WS4nL)
        (make-serious-condition . g$6670$1WS4nL)
        (make-non-continuable-violation . g$6760$1WS4nL)
        (make-message-condition . g$6640$1WS4nL)
        (make-lexical-violation . g$6788$1WS4nL)
        (make-irritants-condition . g$6727$1WS4nL)
        (make-implementation-restriction-violation . g$6774$1WS4nL)
        (make-error . g$6684$1WS4nL)
        (make-assertion-violation . g$6712$1WS4nL)
        (lexical-violation? . g$6789$1WS4nL)
        (irritants-condition? . g$6729$1WS4nL)
        (implementation-restriction-violation? . g$6775$1WS4nL)
        (error? . g$6685$1WS4nL)
        (condition-who . g$6747$1WS4nL)
        (condition-predicate . g$12201$1WS4nL)
        (condition-message . g$6643$1WS4nL)
        (condition-irritants . g$6730$1WS4nL)
        (condition-accessor . g$12200$1WS4nL)
        (condition . g$12199$1WS4nL)
        (assertion-violation? . g$6713$1WS4nL)
        (condition? . g$12198$1WS4nL)
        (&non-continuable . g$11908$1WS4nL)
        (&undefined . g$11907$1WS4nL)
        (&syntax . g$11906$1WS4nL)
        (&lexical . g$11905$1WS4nL)
        (&implementation-restriction . g$11904$1WS4nL)
        (&who . g$11903$1WS4nL)
        (&irritants . g$11902$1WS4nL)
        (&assertion . g$11901$1WS4nL)
        (&violation . g$11900$1WS4nL)
        (&error . g$11899$1WS4nL)
        (&serious . g$11898$1WS4nL)
        (&warning . g$11897$1WS4nL)
        (&message . g$11896$1WS4nL)
        (&condition . g$11895$1WS4nL)
        (define-condition-type . g$11894$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12467$1WS4nL
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12314$1WS4nL)
        (record-type-uid . g$12313$1WS4nL)
        (record-type-sealed? . g$12312$1WS4nL)
        (record-type-parent . g$12311$1WS4nL)
        (record-type-opaque? . g$12310$1WS4nL)
        (record-type-name . g$12309$1WS4nL)
        (record-type-generative? . g$12308$1WS4nL)
        (record-type-field-names . g$12307$1WS4nL)
        (record-rtd . g$12306$1WS4nL)
        (record-field-mutable? . g$12305$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12468$1WS4nL
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12321$1WS4nL)
        (record-predicate . g$12320$1WS4nL)
        (record-mutator . g$12319$1WS4nL)
        (record-constructor . g$12318$1WS4nL)
        (record-accessor . g$12317$1WS4nL)
        (make-record-type-descriptor . g$12316$1WS4nL)
        (make-record-constructor-descriptor . g$12315$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12469$1WS4nL
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11892$1WS4nL)
        (parent-rtd . g$11891$1WS4nL)
        (nongenerative . g$11890$1WS4nL)
        (opaque . g$11889$1WS4nL)
        (sealed . g$11888$1WS4nL)
        (protocol . g$11887$1WS4nL)
        (parent . g$11886$1WS4nL)
        (immutable . g$11885$1WS4nL)
        (mutable . g$11884$1WS4nL)
        (fields . g$11883$1WS4nL)
        (record-constructor-descriptor . g$11844$1WS4nL)
        (record-type-descriptor . g$11843$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12470$1WS4nL
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8683$1WS4nL)
        (&no-nans-rcd . g$12434$1WS4nL)
        (&no-nans-rtd . g$12433$1WS4nL)
        (&no-infinities-rcd . g$12432$1WS4nL)
        (&no-infinities-rtd . g$12431$1WS4nL)
        (&i/o-encoding-rcd . g$12430$1WS4nL)
        (&i/o-encoding-rtd . g$12429$1WS4nL)
        (&i/o-decoding-rcd . g$12428$1WS4nL)
        (&i/o-decoding-rtd . g$12427$1WS4nL)
        (&i/o-port-rcd . g$12426$1WS4nL)
        (&i/o-port-rtd . g$12425$1WS4nL)
        (&i/o-file-does-not-exist-rcd . g$12424$1WS4nL)
        (&i/o-file-does-not-exist-rtd . g$12423$1WS4nL)
        (&i/o-file-already-exists-rcd . g$12422$1WS4nL)
        (&i/o-file-already-exists-rtd . g$12421$1WS4nL)
        (&i/o-file-is-read-only-rcd . g$12420$1WS4nL)
        (&i/o-file-is-read-only-rtd . g$12419$1WS4nL)
        (&i/o-file-protection-rcd . g$12418$1WS4nL)
        (&i/o-file-protection-rtd . g$12417$1WS4nL)
        (&i/o-filename-rcd . g$12416$1WS4nL)
        (&i/o-filename-rtd . g$12415$1WS4nL)
        (&i/o-invalid-position-rcd . g$12414$1WS4nL)
        (&i/o-invalid-position-rtd . g$12413$1WS4nL)
        (&i/o-write-rcd . g$12412$1WS4nL)
        (&i/o-write-rtd . g$12411$1WS4nL)
        (&i/o-read-rcd . g$12410$1WS4nL)
        (&i/o-read-rtd . g$12409$1WS4nL)
        (&i/o-rcd . g$12408$1WS4nL)
        (&i/o-rtd . g$12407$1WS4nL)
        (&undefined-rcd . g$12406$1WS4nL)
        (&undefined-rtd . g$12405$1WS4nL)
        (&syntax-rcd . g$12404$1WS4nL)
        (&syntax-rtd . g$12403$1WS4nL)
        (&lexical-rcd . g$12402$1WS4nL)
        (&lexical-rtd . g$12401$1WS4nL)
        (&implementation-restriction-rcd . g$12400$1WS4nL)
        (&implementation-restriction-rtd . g$12399$1WS4nL)
        (&non-continuable-rcd . g$12398$1WS4nL)
        (&non-continuable-rtd . g$12397$1WS4nL)
        (&who-rcd . g$12396$1WS4nL)
        (&who-rtd . g$12395$1WS4nL)
        (&irritants-rcd . g$12394$1WS4nL)
        (&irritants-rtd . g$12393$1WS4nL)
        (&assertion-rcd . g$12392$1WS4nL)
        (&assertion-rtd . g$12391$1WS4nL)
        (&violation-rcd . g$12390$1WS4nL)
        (&violation-rtd . g$12389$1WS4nL)
        (&error-rcd . g$12388$1WS4nL)
        (&error-rtd . g$12387$1WS4nL)
        (&serious-rcd . g$12386$1WS4nL)
        (&serious-rtd . g$12385$1WS4nL)
        (&warning-rcd . g$12384$1WS4nL)
        (&warning-rtd . g$12383$1WS4nL)
        (&message-rcd . g$12382$1WS4nL)
        (&message-rtd . g$12381$1WS4nL)
        (&condition-rcd . g$12380$1WS4nL)
        (&condition-rtd . g$12379$1WS4nL)
        (library-letrec* . g$12378$1WS4nL)
        (annotation-stripped . g$12377$1WS4nL)
        (annotation-source . g$12376$1WS4nL)
        (annotation-expression . g$12375$1WS4nL)
        (annotation? . g$12374$1WS4nL)
        (read-annotated . g$12373$1WS4nL)
        (tanh . g$12372$1WS4nL)
        (cosh . g$12371$1WS4nL)
        (sinh . g$12370$1WS4nL)
        (make-guid . g$12369$1WS4nL)
        (unspecified? . g$12368$1WS4nL)
        (make-trace . g$12367$1WS4nL)
        (make-list . g$12366$1WS4nL)
        (last-pair . g$12365$1WS4nL)
        (load-r5rs . g$12364$1WS4nL)
        (license . g$12363$1WS4nL)
        (stacktrace . g$12362$1WS4nL)
        (ironscheme-build . g$11786$1WS4nL)
        (define-clr-class-internal . g$12361$1WS4nL)
        (clr-field-set!-internal . g$12360$1WS4nL)
        (clr-field-get-internal . g$12359$1WS4nL)
        (clr-cast-internal . g$12358$1WS4nL)
        (clr-call-internal . g$12357$1WS4nL)
        (clr-new-internal . g$12356$1WS4nL)
        (clr-new-array-internal . g$12355$1WS4nL)
        (clr-is-internal . g$12354$1WS4nL)
        (clr-reference-internal . g$12353$1WS4nL)
        (clr-using-internal . g$12352$1WS4nL)
        (clr-clear-usings-internal . g$12351$1WS4nL)
        (syntax-error . g$8807$1WS4nL)
        (syntax-dispatch . g$8678$1WS4nL)
        (compile-core . g$12350$1WS4nL)
        (eval-core . g$12349$1WS4nL)
        (set-symbol-value! . g$12348$1WS4nL)
        (symbol-value . g$12347$1WS4nL)
        (ungensym . g$12346$1WS4nL)
        (gensym . g$12345$1WS4nL)
        (void . g$12344$1WS4nL)
        (load-serialized-library . g$12343$1WS4nL)
        (serialize-library . g$12342$1WS4nL)
        (compile-system-libraries . g$11788$1WS4nL)
        (compile->closure . g$11790$1WS4nL)
        (compile . g$11789$1WS4nL)
        (load . g$11785$1WS4nL)
        (interaction-environment . g$8816$1WS4nL)
        (char-ready? . g$12341$1WS4nL)
        (string-upcase . g$12340$1WS4nL)
        (string-titlecase . g$12339$1WS4nL)
        (string-normalize-nfkd . g$12338$1WS4nL)
        (string-normalize-nfkc . g$12337$1WS4nL)
        (string-normalize-nfd . g$12336$1WS4nL)
        (string-normalize-nfc . g$12335$1WS4nL)
        (string-foldcase . g$12334$1WS4nL)
        (string-downcase . g$12333$1WS4nL)
        (string-ci>? . g$6917$1WS4nL)
        (string-ci>=? . g$6919$1WS4nL)
        (string-ci=? . g$6915$1WS4nL)
        (string-ci<? . g$6916$1WS4nL)
        (string-ci<=? . g$6918$1WS4nL)
        (char-whitespace? . g$12332$1WS4nL)
        (char-upper-case? . g$12331$1WS4nL)
        (char-title-case? . g$12330$1WS4nL)
        (char-numeric? . g$12329$1WS4nL)
        (char-lower-case? . g$12328$1WS4nL)
        (char-general-category . g$12327$1WS4nL)
        (char-upcase . g$12326$1WS4nL)
        (char-titlecase . g$12325$1WS4nL)
        (char-foldcase . g$12324$1WS4nL)
        (char-downcase . g$12323$1WS4nL)
        (char-ci>? . g$6956$1WS4nL)
        (char-ci>=? . g$6958$1WS4nL)
        (char-ci=? . g$6954$1WS4nL)
        (char-ci<? . g$6955$1WS4nL)
        (char-ci<=? . g$6957$1WS4nL)
        (char-alphabetic? . g$12322$1WS4nL)
        (variable-transformer-procedure . g$8415$1WS4nL)
        (variable-transformer? . g$8414$1WS4nL)
        (make-variable-transformer . g$8413$1WS4nL)
        (identifier? . g$8811$1WS4nL)
        (generate-temporaries . g$8800$1WS4nL)
        (free-identifier=? . g$8801$1WS4nL)
        (syntax->datum . g$8813$1WS4nL)
        (datum->syntax . g$8812$1WS4nL)
        (bound-identifier=? . g$8802$1WS4nL)
        (record-type-descriptor? . g$12321$1WS4nL)
        (record-predicate . g$12320$1WS4nL)
        (record-mutator . g$12319$1WS4nL)
        (record-constructor . g$12318$1WS4nL)
        (record-accessor . g$12317$1WS4nL)
        (make-record-type-descriptor . g$12316$1WS4nL)
        (make-record-constructor-descriptor . g$12315$1WS4nL)
        (record? . g$12314$1WS4nL)
        (record-type-uid . g$12313$1WS4nL)
        (record-type-sealed? . g$12312$1WS4nL)
        (record-type-parent . g$12311$1WS4nL)
        (record-type-opaque? . g$12310$1WS4nL)
        (record-type-name . g$12309$1WS4nL)
        (record-type-generative? . g$12308$1WS4nL)
        (record-type-field-names . g$12307$1WS4nL)
        (record-rtd . g$12306$1WS4nL)
        (record-field-mutable? . g$12305$1WS4nL)
        (delete-file . g$6492$1WS4nL)
        (file-exists? . g$6491$1WS4nL)
        (vector-sort! . g$12304$1WS4nL)
        (vector-sort . g$12303$1WS4nL)
        (list-sort . g$6855$1WS4nL)
        (symbol-hash . g$12302$1WS4nL)
        (string-ci-hash . g$12301$1WS4nL)
        (string-hash . g$12300$1WS4nL)
        (equal-hash . g$12299$1WS4nL)
        (hashtable-equivalence-function . g$12298$1WS4nL)
        (make-hashtable . g$12297$1WS4nL)
        (hashtable-hash-function . g$12296$1WS4nL)
        (make-eqv-hashtable . g$6459$1WS4nL)
        (make-eq-hashtable . g$6458$1WS4nL)
        (hashtable? . g$12295$1WS4nL)
        (hashtable-update! . g$6465$1WS4nL)
        (hashtable-size . g$6460$1WS4nL)
        (hashtable-set! . g$6462$1WS4nL)
        (hashtable-ref . g$6461$1WS4nL)
        (hashtable-mutable? . g$12294$1WS4nL)
        (hashtable-keys . g$12293$1WS4nL)
        (hashtable-entries . g$12292$1WS4nL)
        (hashtable-delete! . g$6463$1WS4nL)
        (hashtable-copy . g$12291$1WS4nL)
        (hashtable-contains? . g$6464$1WS4nL)
        (hashtable-clear! . g$6466$1WS4nL)
        (call-with-output-file . g$7348$1WS4nL)
        (call-with-input-file . g$7347$1WS4nL)
        (write-char . g$12290$1WS4nL)
        (write . g$12289$1WS4nL)
        (with-output-to-file . g$7346$1WS4nL)
        (with-input-from-file . g$7345$1WS4nL)
        (read-char . g$12288$1WS4nL)
        (read . g$12287$1WS4nL)
        (peek-char . g$12286$1WS4nL)
        (open-output-file . g$12285$1WS4nL)
        (open-input-file . g$12284$1WS4nL)
        (newline . g$12283$1WS4nL)
        (display . g$12282$1WS4nL)
        (close-output-port . g$12281$1WS4nL)
        (close-input-port . g$12280$1WS4nL)
        (eof-object? . g$12279$1WS4nL)
        (eof-object . g$12278$1WS4nL)
        (current-error-port . g$12277$1WS4nL)
        (current-output-port . g$12276$1WS4nL)
        (current-input-port . g$12275$1WS4nL)
        (output-port? . g$12274$1WS4nL)
        (input-port? . g$12273$1WS4nL)
        (utf-8-codec . g$12272$1WS4nL)
        (utf-16-codec . g$12271$1WS4nL)
        (transcoder-error-handling-mode . g$12270$1WS4nL)
        (transcoder-eol-style . g$12269$1WS4nL)
        (transcoder-codec . g$12268$1WS4nL)
        (transcoded-port . g$12267$1WS4nL)
        (textual-port? . g$12266$1WS4nL)
        (string->bytevector . g$12265$1WS4nL)
        (standard-output-port . g$12264$1WS4nL)
        (standard-input-port . g$12263$1WS4nL)
        (standard-error-port . g$12262$1WS4nL)
        (set-port-position! . g$12261$1WS4nL)
        (put-u8 . g$12260$1WS4nL)
        (put-string . g$12259$1WS4nL)
        (put-datum . g$12258$1WS4nL)
        (put-char . g$12257$1WS4nL)
        (put-bytevector . g$12256$1WS4nL)
        (port? . g$7321$1WS4nL)
        (port-transcoder . g$12255$1WS4nL)
        (port-position . g$12254$1WS4nL)
        (port-has-set-port-position!? . g$12253$1WS4nL)
        (port-has-port-position? . g$12252$1WS4nL)
        (port-eof? . g$12251$1WS4nL)
        (output-port-buffer-mode . g$12250$1WS4nL)
        (open-string-output-port . g$7320$1WS4nL)
        (open-string-input-port . g$12249$1WS4nL)
        (open-file-output-port . g$12248$1WS4nL)
        (open-file-input/output-port . g$12247$1WS4nL)
        (open-file-input-port . g$12246$1WS4nL)
        (open-bytevector-output-port . g$12245$1WS4nL)
        (open-bytevector-input-port . g$12244$1WS4nL)
        (native-transcoder . g$12243$1WS4nL)
        (native-eol-style . g$12242$1WS4nL)
        (make-transcoder . g$12241$1WS4nL)
        (latin-1-codec . g$12240$1WS4nL)
        (make-i/o-write-error . g$7177$1WS4nL)
        (make-i/o-read-error . g$7163$1WS4nL)
        (make-i/o-port-error . g$7282$1WS4nL)
        (make-i/o-invalid-position-error . g$7192$1WS4nL)
        (make-i/o-filename-error . g$7209$1WS4nL)
        (make-i/o-file-protection-error . g$7225$1WS4nL)
        (make-i/o-file-is-read-only-error . g$7239$1WS4nL)
        (make-i/o-file-does-not-exist-error . g$7267$1WS4nL)
        (make-i/o-file-already-exists-error . g$7253$1WS4nL)
        (make-i/o-error . g$7149$1WS4nL)
        (make-i/o-encoding-error . g$7313$1WS4nL)
        (make-i/o-decoding-error . g$7298$1WS4nL)
        (make-custom-textual-output-port . g$12239$1WS4nL)
        (make-custom-textual-input/output-port . g$12238$1WS4nL)
        (make-custom-textual-input-port . g$12237$1WS4nL)
        (make-custom-binary-output-port . g$12236$1WS4nL)
        (make-custom-binary-input/output-port . g$12235$1WS4nL)
        (make-custom-binary-input-port . g$12234$1WS4nL)
        (make-bytevector . g$12233$1WS4nL)
        (lookahead-u8 . g$12232$1WS4nL)
        (lookahead-char . g$12231$1WS4nL)
        (i/o-write-error? . g$7178$1WS4nL)
        (i/o-read-error? . g$7164$1WS4nL)
        (i/o-port-error? . g$7284$1WS4nL)
        (i/o-invalid-position-error? . g$7194$1WS4nL)
        (i/o-error-position . g$7195$1WS4nL)
        (i/o-filename-error? . g$7211$1WS4nL)
        (i/o-file-protection-error? . g$7226$1WS4nL)
        (i/o-file-is-read-only-error? . g$7240$1WS4nL)
        (i/o-file-does-not-exist-error? . g$7268$1WS4nL)
        (i/o-file-already-exists-error? . g$7254$1WS4nL)
        (i/o-error? . g$7150$1WS4nL)
        (i/o-error-port . g$7285$1WS4nL)
        (i/o-error-filename . g$7212$1WS4nL)
        (i/o-encoding-error? . g$7315$1WS4nL)
        (i/o-encoding-error-char . g$7316$1WS4nL)
        (i/o-decoding-error? . g$7299$1WS4nL)
        (get-u8 . g$12230$1WS4nL)
        (get-string-n! . g$12229$1WS4nL)
        (get-string-n . g$12228$1WS4nL)
        (get-string-all . g$12227$1WS4nL)
        (get-line . g$12226$1WS4nL)
        (get-datum . g$12225$1WS4nL)
        (get-char . g$12224$1WS4nL)
        (get-bytevector-some . g$12223$1WS4nL)
        (get-bytevector-n! . g$12222$1WS4nL)
        (get-bytevector-n . g$12221$1WS4nL)
        (get-bytevector-all . g$12220$1WS4nL)
        (flush-output-port . g$12219$1WS4nL)
        (close-port . g$12218$1WS4nL)
        (call-with-string-output-port . g$7322$1WS4nL)
        (call-with-port . g$12217$1WS4nL)
        (call-with-bytevector-output-port . g$12216$1WS4nL)
        (bytevector->string . g$12215$1WS4nL)
        (buffer-mode? . g$12214$1WS4nL)
        (binary-port? . g$12213$1WS4nL)
        (scheme-report-environment . g$8791$1WS4nL)
        (quotient . g$6835$1WS4nL)
        (null-environment . g$8790$1WS4nL)
        (remainder . g$6836$1WS4nL)
        (modulo . g$6837$1WS4nL)
        (inexact->exact . g$12212$1WS4nL)
        (force . g$6839$1WS4nL)
        (exact->inexact . g$12211$1WS4nL)
        (exit . g$12210$1WS4nL)
        (command-line . g$11782$1WS4nL)
        (string-fill! . g$12209$1WS4nL)
        (string-set! . g$12208$1WS4nL)
        (set-cdr! . g$12207$1WS4nL)
        (set-car! . g$12206$1WS4nL)
        (remove . g$5847$1WS4nL)
        (remv . g$5848$1WS4nL)
        (remp . g$5830$1WS4nL)
        (remq . g$5849$1WS4nL)
        (partition . g$5829$1WS4nL)
        (memv . g$5837$1WS4nL)
        (memq . g$5836$1WS4nL)
        (memp . g$5839$1WS4nL)
        (member . g$5838$1WS4nL)
        (exists . g$5843$1WS4nL)
        (for-all . g$5842$1WS4nL)
        (fold-right . g$5846$1WS4nL)
        (fold-left . g$5845$1WS4nL)
        (find . g$5828$1WS4nL)
        (filter . g$5831$1WS4nL)
        (cons* . g$5844$1WS4nL)
        (assv . g$5833$1WS4nL)
        (assq . g$5832$1WS4nL)
        (assp . g$5835$1WS4nL)
        (assoc . g$5834$1WS4nL)
        (with-exception-handler . g$12205$1WS4nL)
        (raise-continuable . g$12204$1WS4nL)
        (raise . g$12203$1WS4nL)
        (eval . g$8793$1WS4nL)
        (environment . g$8789$1WS4nL)
        (make-enumeration . g$7406$1WS4nL)
        (enum-set=? . g$7413$1WS4nL)
        (enum-set-universe . g$7407$1WS4nL)
        (enum-set-union . g$7414$1WS4nL)
        (enum-set-subset? . g$7412$1WS4nL)
        (enum-set-projection . g$7418$1WS4nL)
        (enum-set-member? . g$7411$1WS4nL)
        (enum-set-intersection . g$7415$1WS4nL)
        (enum-set-indexer . g$7408$1WS4nL)
        (enum-set-difference . g$7416$1WS4nL)
        (enum-set-constructor . g$7409$1WS4nL)
        (enum-set-complement . g$7417$1WS4nL)
        (enum-set->list . g$7410$1WS4nL)
        (who-condition? . g$6746$1WS4nL)
        (warning? . g$6657$1WS4nL)
        (violation? . g$6699$1WS4nL)
        (undefined-violation? . g$6823$1WS4nL)
        (syntax-violation? . g$6807$1WS4nL)
        (syntax-violation-subform . g$6809$1WS4nL)
        (syntax-violation-form . g$6808$1WS4nL)
        (syntax-violation . g$8810$1WS4nL)
        (simple-conditions . g$12202$1WS4nL)
        (serious-condition? . g$6671$1WS4nL)
        (non-continuable-violation? . g$6761$1WS4nL)
        (message-condition? . g$6642$1WS4nL)
        (make-who-condition . g$6744$1WS4nL)
        (make-warning . g$6656$1WS4nL)
        (make-violation . g$6698$1WS4nL)
        (make-undefined-violation . g$6822$1WS4nL)
        (make-syntax-violation . g$6804$1WS4nL)
        (make-serious-condition . g$6670$1WS4nL)
        (make-non-continuable-violation . g$6760$1WS4nL)
        (make-message-condition . g$6640$1WS4nL)
        (make-lexical-violation . g$6788$1WS4nL)
        (make-irritants-condition . g$6727$1WS4nL)
        (make-implementation-restriction-violation . g$6774$1WS4nL)
        (make-error . g$6684$1WS4nL)
        (make-assertion-violation . g$6712$1WS4nL)
        (lexical-violation? . g$6789$1WS4nL)
        (irritants-condition? . g$6729$1WS4nL)
        (implementation-restriction-violation? . g$6775$1WS4nL)
        (error? . g$6685$1WS4nL)
        (condition-who . g$6747$1WS4nL)
        (condition-predicate . g$12201$1WS4nL)
        (condition-message . g$6643$1WS4nL)
        (condition-irritants . g$6730$1WS4nL)
        (condition-accessor . g$12200$1WS4nL)
        (condition . g$12199$1WS4nL)
        (assertion-violation? . g$6713$1WS4nL)
        (condition? . g$12198$1WS4nL)
        (utf32->string . g$12197$1WS4nL)
        (utf16->string . g$12196$1WS4nL)
        (utf8->string . g$12195$1WS4nL)
        (uint-list->bytevector . g$12194$1WS4nL)
        (u8-list->bytevector . g$12193$1WS4nL)
        (string->utf8 . g$12192$1WS4nL)
        (string->utf32 . g$12191$1WS4nL)
        (string->utf16 . g$12190$1WS4nL)
        (sint-list->bytevector . g$12189$1WS4nL)
        (native-endianness . g$6498$1WS4nL)
        (bytevector? . g$12188$1WS4nL)
        (bytevector=? . g$12187$1WS4nL)
        (bytevector-uint-set! . g$12186$1WS4nL)
        (bytevector-uint-ref . g$12185$1WS4nL)
        (bytevector-u8-set! . g$12184$1WS4nL)
        (bytevector-u8-ref . g$12183$1WS4nL)
        (bytevector-u64-set! . g$6519$1WS4nL)
        (bytevector-u64-ref . g$6515$1WS4nL)
        (bytevector-u64-native-set! . g$6521$1WS4nL)
        (bytevector-u64-native-ref . g$6517$1WS4nL)
        (bytevector-u32-set! . g$6511$1WS4nL)
        (bytevector-u32-ref . g$6507$1WS4nL)
        (bytevector-u32-native-set! . g$6513$1WS4nL)
        (bytevector-u32-native-ref . g$6509$1WS4nL)
        (bytevector-u16-set! . g$6503$1WS4nL)
        (bytevector-u16-ref . g$6499$1WS4nL)
        (bytevector-u16-native-set! . g$6505$1WS4nL)
        (bytevector-u16-native-ref . g$6501$1WS4nL)
        (bytevector-sint-set! . g$12182$1WS4nL)
        (bytevector-sint-ref . g$12181$1WS4nL)
        (bytevector-s8-set! . g$12180$1WS4nL)
        (bytevector-s8-ref . g$12179$1WS4nL)
        (bytevector-s64-set! . g$6520$1WS4nL)
        (bytevector-s64-ref . g$6516$1WS4nL)
        (bytevector-s64-native-set! . g$6522$1WS4nL)
        (bytevector-s64-native-ref . g$6518$1WS4nL)
        (bytevector-s32-set! . g$6512$1WS4nL)
        (bytevector-s32-ref . g$6508$1WS4nL)
        (bytevector-s32-native-set! . g$6514$1WS4nL)
        (bytevector-s32-native-ref . g$6510$1WS4nL)
        (bytevector-s16-set! . g$6504$1WS4nL)
        (bytevector-s16-ref . g$6500$1WS4nL)
        (bytevector-s16-native-set! . g$6506$1WS4nL)
        (bytevector-s16-native-ref . g$6502$1WS4nL)
        (bytevector-length . g$12178$1WS4nL)
        (bytevector-ieee-single-set! . g$12177$1WS4nL)
        (bytevector-ieee-single-ref . g$12176$1WS4nL)
        (bytevector-ieee-single-native-set! . g$6525$1WS4nL)
        (bytevector-ieee-single-native-ref . g$6523$1WS4nL)
        (bytevector-ieee-double-set! . g$12175$1WS4nL)
        (bytevector-ieee-double-ref . g$12174$1WS4nL)
        (bytevector-ieee-double-native-set! . g$6526$1WS4nL)
        (bytevector-ieee-double-native-ref . g$6524$1WS4nL)
        (bytevector-fill! . g$12173$1WS4nL)
        (bytevector-copy! . g$12172$1WS4nL)
        (bytevector-copy . g$12171$1WS4nL)
        (bytevector->uint-list . g$12170$1WS4nL)
        (bytevector->u8-list . g$12169$1WS4nL)
        (bytevector->sint-list . g$12168$1WS4nL)
        (no-nans-violation? . g$7135$1WS4nL)
        (no-infinities-violation? . g$7121$1WS4nL)
        (make-no-nans-violation . g$7134$1WS4nL)
        (make-no-infinities-violation . g$7120$1WS4nL)
        (real->flonum . g$12167$1WS4nL)
        (flzero? . g$12166$1WS4nL)
        (fltruncate . g$12165$1WS4nL)
        (fltan . g$12164$1WS4nL)
        (flsqrt . g$12163$1WS4nL)
        (flsin . g$12162$1WS4nL)
        (flround . g$12161$1WS4nL)
        (flpositive? . g$12160$1WS4nL)
        (flonum? . g$12159$1WS4nL)
        (flodd? . g$12158$1WS4nL)
        (flnumerator . g$12157$1WS4nL)
        (flnegative? . g$12156$1WS4nL)
        (flnan? . g$12155$1WS4nL)
        (flmod0 . g$12154$1WS4nL)
        (flmod . g$12153$1WS4nL)
        (flmin . g$12152$1WS4nL)
        (flmax . g$12151$1WS4nL)
        (fllog . g$12150$1WS4nL)
        (flinteger? . g$12149$1WS4nL)
        (flinfinite? . g$12148$1WS4nL)
        (flfloor . g$12147$1WS4nL)
        (flfinite? . g$12146$1WS4nL)
        (flexpt . g$12145$1WS4nL)
        (flexp . g$12144$1WS4nL)
        (fleven? . g$12143$1WS4nL)
        (fldiv0-and-mod0 . g$12142$1WS4nL)
        (fldiv0 . g$12141$1WS4nL)
        (fldiv-and-mod . g$12140$1WS4nL)
        (fldiv . g$12139$1WS4nL)
        (fldenominator . g$12138$1WS4nL)
        (flcos . g$12137$1WS4nL)
        (flceiling . g$12136$1WS4nL)
        (flatan . g$12135$1WS4nL)
        (flasin . g$12134$1WS4nL)
        (flacos . g$12133$1WS4nL)
        (flabs . g$12132$1WS4nL)
        (fl>? . g$12131$1WS4nL)
        (fl>=? . g$12130$1WS4nL)
        (fl=? . g$12129$1WS4nL)
        (fl<? . g$12128$1WS4nL)
        (fl<=? . g$12127$1WS4nL)
        (fl/ . g$12126$1WS4nL)
        (fl- . g$12125$1WS4nL)
        (fl+ . g$12124$1WS4nL)
        (fl* . g$12123$1WS4nL)
        (fixnum->flonum . g$12122$1WS4nL)
        (fxzero? . g$12121$1WS4nL)
        (fxxor . g$12120$1WS4nL)
        (fxrotate-bit-field . g$7066$1WS4nL)
        (fxreverse-bit-field . g$12119$1WS4nL)
        (fxpositive? . g$12118$1WS4nL)
        (fxodd? . g$12117$1WS4nL)
        (fxnot . g$12116$1WS4nL)
        (fxnegative? . g$12115$1WS4nL)
        (fxmod0 . g$12114$1WS4nL)
        (fxmod . g$12113$1WS4nL)
        (fxmin . g$12112$1WS4nL)
        (fxmax . g$12111$1WS4nL)
        (fxlength . g$12110$1WS4nL)
        (fxior . g$12109$1WS4nL)
        (fxif . g$7060$1WS4nL)
        (fxfirst-bit-set . g$12108$1WS4nL)
        (fxeven? . g$12107$1WS4nL)
        (fxdiv0-and-mod0 . g$12106$1WS4nL)
        (fxdiv0 . g$12105$1WS4nL)
        (fxdiv-and-mod . g$12104$1WS4nL)
        (fxdiv . g$12103$1WS4nL)
        (fxcopy-bit-field . g$7063$1WS4nL)
        (fxcopy-bit . g$7061$1WS4nL)
        (fxbit-set? . g$12102$1WS4nL)
        (fxbit-field . g$7062$1WS4nL)
        (fxbit-count . g$12101$1WS4nL)
        (fxarithmetic-shift-right . g$7065$1WS4nL)
        (fxarithmetic-shift-left . g$7064$1WS4nL)
        (fxarithmetic-shift . g$12100$1WS4nL)
        (fxand . g$12099$1WS4nL)
        (fx>? . g$12098$1WS4nL)
        (fx>=? . g$12097$1WS4nL)
        (fx=? . g$12096$1WS4nL)
        (fx<? . g$12095$1WS4nL)
        (fx<=? . g$12094$1WS4nL)
        (fx-/carry . g$12093$1WS4nL)
        (fx- . g$12092$1WS4nL)
        (fx+/carry . g$12091$1WS4nL)
        (fx+ . g$12090$1WS4nL)
        (fx*/carry . g$12089$1WS4nL)
        (fx* . g$12088$1WS4nL)
        (greatest-fixnum . g$12087$1WS4nL)
        (least-fixnum . g$12086$1WS4nL)
        (fixnum-width . g$12085$1WS4nL)
        (fixnum? . g$12084$1WS4nL)
        (bitwise-rotate-bit-field . g$7018$1WS4nL)
        (bitwise-reverse-bit-field . g$12083$1WS4nL)
        (bitwise-length . g$12082$1WS4nL)
        (bitwise-if . g$7012$1WS4nL)
        (bitwise-first-bit-set . g$12081$1WS4nL)
        (bitwise-copy-bit-field . g$7015$1WS4nL)
        (bitwise-copy-bit . g$7013$1WS4nL)
        (bitwise-bit-set? . g$12080$1WS4nL)
        (bitwise-bit-field . g$12079$1WS4nL)
        (bitwise-bit-count . g$12078$1WS4nL)
        (bitwise-xor . g$12077$1WS4nL)
        (bitwise-ior . g$12076$1WS4nL)
        (bitwise-and . g$12075$1WS4nL)
        (bitwise-not . g$12074$1WS4nL)
        (bitwise-arithmetic-shift-right . g$7017$1WS4nL)
        (bitwise-arithmetic-shift-left . g$7016$1WS4nL)
        (bitwise-arithmetic-shift . g$12073$1WS4nL)
        (zero? . g$12072$1WS4nL)
        (vector? . g$12071$1WS4nL)
        (vector-set! . g$12070$1WS4nL)
        (vector-ref . g$12069$1WS4nL)
        (vector-map . g$12068$1WS4nL)
        (vector-length . g$12067$1WS4nL)
        (vector-for-each . g$12066$1WS4nL)
        (vector-fill! . g$12065$1WS4nL)
        (vector->list . g$12064$1WS4nL)
        (vector . g$12063$1WS4nL)
        (values . g$12062$1WS4nL)
        (truncate . g$12061$1WS4nL)
        (tan . g$12060$1WS4nL)
        (symbol? . g$12059$1WS4nL)
        (symbol=? . g$6007$1WS4nL)
        (symbol->string . g$12058$1WS4nL)
        (substring . g$12057$1WS4nL)
        (string? . g$12056$1WS4nL)
        (string>? . g$6004$1WS4nL)
        (string>=? . g$6006$1WS4nL)
        (string=? . g$6002$1WS4nL)
        (string<? . g$6003$1WS4nL)
        (string<=? . g$6005$1WS4nL)
        (string-ref . g$12055$1WS4nL)
        (string-length . g$12054$1WS4nL)
        (string-for-each . g$12053$1WS4nL)
        (string-copy . g$12052$1WS4nL)
        (string-append . g$12051$1WS4nL)
        (string->symbol . g$12050$1WS4nL)
        (string->number . g$12049$1WS4nL)
        (string->list . g$12048$1WS4nL)
        (string . g$12047$1WS4nL)
        (sqrt . g$12046$1WS4nL)
        (sin . g$12045$1WS4nL)
        (round . g$12044$1WS4nL)
        (reverse . g$12043$1WS4nL)
        (real? . g$12042$1WS4nL)
        (real-valued? . g$12041$1WS4nL)
        (real-part . g$12040$1WS4nL)
        (rationalize . g$6048$1WS4nL)
        (rational? . g$12039$1WS4nL)
        (rational-valued? . g$12038$1WS4nL)
        (procedure? . g$12037$1WS4nL)
        (positive? . g$12036$1WS4nL)
        (pair? . g$12035$1WS4nL)
        (odd? . g$12034$1WS4nL)
        (numerator . g$12033$1WS4nL)
        (number? . g$12032$1WS4nL)
        (number->string . g$12031$1WS4nL)
        (null? . g$12030$1WS4nL)
        (not . g$12029$1WS4nL)
        (negative? . g$12028$1WS4nL)
        (nan? . g$12027$1WS4nL)
        (min . g$12026$1WS4nL)
        (max . g$12025$1WS4nL)
        (map . g$12024$1WS4nL)
        (make-vector . g$12023$1WS4nL)
        (make-string . g$12022$1WS4nL)
        (make-rectangular . g$12021$1WS4nL)
        (make-polar . g$12020$1WS4nL)
        (magnitude . g$12019$1WS4nL)
        (log . g$12018$1WS4nL)
        (list? . g$12017$1WS4nL)
        (list-tail . g$12016$1WS4nL)
        (list-ref . g$12015$1WS4nL)
        (list->vector . g$12014$1WS4nL)
        (list->string . g$12013$1WS4nL)
        (list . g$12012$1WS4nL)
        (length . g$12011$1WS4nL)
        (lcm . g$12010$1WS4nL)
        (integer? . g$12009$1WS4nL)
        (integer-valued? . g$12008$1WS4nL)
        (integer->char . g$12007$1WS4nL)
        (infinite? . g$12006$1WS4nL)
        (inexact? . g$12005$1WS4nL)
        (inexact . g$12004$1WS4nL)
        (imag-part . g$12003$1WS4nL)
        (gcd . g$12002$1WS4nL)
        (for-each . g$12001$1WS4nL)
        (floor . g$12000$1WS4nL)
        (finite? . g$11999$1WS4nL)
        (expt . g$11998$1WS4nL)
        (exp . g$11997$1WS4nL)
        (exact? . g$11996$1WS4nL)
        (exact-integer-sqrt . g$11995$1WS4nL)
        (exact . g$11994$1WS4nL)
        (even? . g$11993$1WS4nL)
        (error . g$11992$1WS4nL)
        (eqv? . g$11991$1WS4nL)
        (equal? . g$11990$1WS4nL)
        (eq? . g$11989$1WS4nL)
        (dynamic-wind . g$11988$1WS4nL)
        (div0-and-mod0 . g$11987$1WS4nL)
        (mod0 . g$11986$1WS4nL)
        (div0 . g$11985$1WS4nL)
        (div-and-mod . g$11984$1WS4nL)
        (mod . g$11983$1WS4nL)
        (div . g$11982$1WS4nL)
        (denominator . g$11981$1WS4nL)
        (cos . g$11980$1WS4nL)
        (cons . g$11979$1WS4nL)
        (complex? . g$11978$1WS4nL)
        (char? . g$11977$1WS4nL)
        (char>? . g$6045$1WS4nL)
        (char>=? . g$6047$1WS4nL)
        (char=? . g$6043$1WS4nL)
        (char<? . g$6044$1WS4nL)
        (char<=? . g$6046$1WS4nL)
        (char->integer . g$11976$1WS4nL)
        (ceiling . g$11975$1WS4nL)
        (call-with-values . g$11974$1WS4nL)
        (call/cc . g$11973$1WS4nL)
        (call-with-current-continuation . g$11972$1WS4nL)
        (cddddr . g$5967$1WS4nL)
        (cdddar . g$5966$1WS4nL)
        (cddadr . g$5965$1WS4nL)
        (cddaar . g$5964$1WS4nL)
        (cdaddr . g$5963$1WS4nL)
        (cdadar . g$5962$1WS4nL)
        (cdaadr . g$5961$1WS4nL)
        (cdaaar . g$5960$1WS4nL)
        (cadddr . g$5959$1WS4nL)
        (caddar . g$5958$1WS4nL)
        (cadadr . g$5957$1WS4nL)
        (cadaar . g$5956$1WS4nL)
        (caaddr . g$5955$1WS4nL)
        (caadar . g$5954$1WS4nL)
        (caaadr . g$5953$1WS4nL)
        (caaaar . g$5952$1WS4nL)
        (cdddr . g$5951$1WS4nL)
        (cddar . g$5950$1WS4nL)
        (cdadr . g$5949$1WS4nL)
        (cdaar . g$5948$1WS4nL)
        (caddr . g$5947$1WS4nL)
        (cadar . g$5946$1WS4nL)
        (caadr . g$5945$1WS4nL)
        (caaar . g$5944$1WS4nL)
        (cddr . g$5943$1WS4nL)
        (cdar . g$5942$1WS4nL)
        (cadr . g$5941$1WS4nL)
        (caar . g$5940$1WS4nL)
        (cdr . g$11971$1WS4nL)
        (car . g$11970$1WS4nL)
        (boolean? . g$11969$1WS4nL)
        (boolean=? . g$6008$1WS4nL)
        (atan . g$11968$1WS4nL)
        (assertion-violation . g$11967$1WS4nL)
        (asin . g$11966$1WS4nL)
        (apply . g$11965$1WS4nL)
        (append . g$11964$1WS4nL)
        (angle . g$11963$1WS4nL)
        (acos . g$11962$1WS4nL)
        (abs . g$11961$1WS4nL)
        (/ . g$11960$1WS4nL)
        (* . g$11959$1WS4nL)
        (- . g$11958$1WS4nL)
        (+ . g$11957$1WS4nL)
        (>= . g$11956$1WS4nL)
        (> . g$11955$1WS4nL)
        (= . g$11954$1WS4nL)
        (<= . g$11953$1WS4nL)
        (< . g$11952$1WS4nL)
        (make-record-printer . g$11951$1WS4nL)
        (eqv-hash . g$11950$1WS4nL)
        (reverse! . g$11949$1WS4nL)
        (deserialize-port . g$11948$1WS4nL)
        (serialize-port . g$11947$1WS4nL)
        (enum-set? . g$7381$1WS4nL)
        (make-promise . g$6838$1WS4nL)
        (load/args . g$11784$1WS4nL)
        (printf . g$7491$1WS4nL)
        (fprintf . g$7492$1WS4nL)
        (format . g$7493$1WS4nL)
        (procedure-form . g$11946$1WS4nL)
        (procedure-environment . g$11945$1WS4nL)
        (procedure-name . g$11944$1WS4nL)
        (procedure-arity . g$11943$1WS4nL)
        (gc-collect . g$11942$1WS4nL)
        (clr-type? . g$11941$1WS4nL)
        (get-clr-type . g$11940$1WS4nL)
        (get-command-line . g$11939$1WS4nL)
        (vector-append . g$11938$1WS4nL)
        (vector-filter . g$11937$1WS4nL)
        (vector-reverse! . g$11936$1WS4nL)
        (vector-contains? . g$11935$1WS4nL)
        (vector-index-of . g$11934$1WS4nL)
        (vector-copy . g$11933$1WS4nL)
        (vector-binary-search . g$11932$1WS4nL)
        (string-ci-compare . g$11931$1WS4nL)
        (string-compare . g$11930$1WS4nL)
        (string-format . g$11929$1WS4nL)
        (trace-printer . g$11781$1WS4nL)
        (make-traced-procedure . g$11928$1WS4nL)
        (make-traced-macro . g$7513$1WS4nL)
        (assertion-error . g$8806$1WS4nL)
        (pmap . g$11927$1WS4nL)
        (time-it . g$11926$1WS4nL)
        (make-parameter . g$7518$1WS4nL)
        (library-locator . g$11925$1WS4nL)
        (get-library-paths . g$11924$1WS4nL)
        (environment-bindings . g$8785$1WS4nL)
        (environment-symbols . g$8788$1WS4nL)
        (interaction-environment-symbols . g$8784$1WS4nL)
        (optimization-level . g$11923$1WS4nL)
        (library-path . g$7948$1WS4nL)
        (expand . g$8792$1WS4nL)
        (&no-nans . g$11922$1WS4nL)
        (&no-infinities . g$11921$1WS4nL)
        (&i/o-encoding . g$11920$1WS4nL)
        (&i/o-decoding . g$11919$1WS4nL)
        (&i/o-port . g$11918$1WS4nL)
        (&i/o-file-does-not-exist . g$11917$1WS4nL)
        (&i/o-file-already-exists . g$11916$1WS4nL)
        (&i/o-file-is-read-only . g$11915$1WS4nL)
        (&i/o-file-protection . g$11914$1WS4nL)
        (&i/o-filename . g$11913$1WS4nL)
        (&i/o-invalid-position . g$11912$1WS4nL)
        (&i/o-write . g$11911$1WS4nL)
        (&i/o-read . g$11910$1WS4nL)
        (&i/o . g$11909$1WS4nL)
        (&non-continuable . g$11908$1WS4nL)
        (&undefined . g$11907$1WS4nL)
        (&syntax . g$11906$1WS4nL)
        (&lexical . g$11905$1WS4nL)
        (&implementation-restriction . g$11904$1WS4nL)
        (&who . g$11903$1WS4nL)
        (&irritants . g$11902$1WS4nL)
        (&assertion . g$11901$1WS4nL)
        (&violation . g$11900$1WS4nL)
        (&error . g$11899$1WS4nL)
        (&serious . g$11898$1WS4nL)
        (&warning . g$11897$1WS4nL)
        (&message . g$11896$1WS4nL)
        (&condition . g$11895$1WS4nL)
        (define-condition-type . g$11894$1WS4nL)
        (define-enumeration . g$11893$1WS4nL)
        (define-record-type . g$11892$1WS4nL)
        (parent-rtd . g$11891$1WS4nL)
        (nongenerative . g$11890$1WS4nL)
        (opaque . g$11889$1WS4nL)
        (sealed . g$11888$1WS4nL)
        (protocol . g$11887$1WS4nL)
        (parent . g$11886$1WS4nL)
        (immutable . g$11885$1WS4nL)
        (mutable . g$11884$1WS4nL)
        (fields . g$11883$1WS4nL)
        (error-handling-mode . g$11882$1WS4nL)
        (file-options . g$11881$1WS4nL)
        (buffer-mode . g$11880$1WS4nL)
        (eol-style . g$11879$1WS4nL)
        (guard . g$11878$1WS4nL)
        (trace-letrec-syntax . g$11877$1WS4nL)
        (trace-let-syntax . g$11876$1WS4nL)
        (trace-define-syntax . g$11875$1WS4nL)
        (trace-define . g$11874$1WS4nL)
        (trace-lambda . g$11873$1WS4nL)
        (unsyntax-splicing . g$11872$1WS4nL)
        (unsyntax . g$11871$1WS4nL)
        (unquote-splicing . g$11870$1WS4nL)
        (unquote . g$11869$1WS4nL)
        (_ . g$11868$1WS4nL)
        (else . g$11867$1WS4nL)
        (=> . g$11866$1WS4nL)
        (... . g$11865$1WS4nL)
        (assert . g$11864$1WS4nL)
        (endianness . g$11863$1WS4nL)
        (delay . g$11862$1WS4nL)
        (time . g$11861$1WS4nL)
        (or . g$11860$1WS4nL)
        (and . g$11859$1WS4nL)
        (do . g$11858$1WS4nL)
        (cond . g$11857$1WS4nL)
        (let* . g$11856$1WS4nL)
        (let . g$11855$1WS4nL)
        (identifier-syntax . g$11854$1WS4nL)
        (with-syntax . g$11853$1WS4nL)
        (quasisyntax . g$11852$1WS4nL)
        (quasiquote . g$11851$1WS4nL)
        (syntax-rules . g$11850$1WS4nL)
        (include-into . g$11849$1WS4nL)
        (include . g$11848$1WS4nL)
        (define-struct . g$11847$1WS4nL)
        (let-values . g$11846$1WS4nL)
        (let*-values . g$11845$1WS4nL)
        (record-constructor-descriptor . g$11844$1WS4nL)
        (record-type-descriptor . g$11843$1WS4nL)
        (fluid-let-syntax . g$11842$1WS4nL)
        (case . g$11841$1WS4nL)
        (parameterize . g$11840$1WS4nL)
        (unless . g$11839$1WS4nL)
        (when . g$11838$1WS4nL)
        (if . g$11837$1WS4nL)
        (letrec* . g$11836$1WS4nL)
        (letrec . g$11835$1WS4nL)
        (type-descriptor . g$11834$1WS4nL)
        (case-lambda . g$11833$1WS4nL)
        (lambda . g$11832$1WS4nL)
        (syntax . g$11831$1WS4nL)
        (syntax-case . g$11830$1WS4nL)
        (quote . g$11829$1WS4nL)
        (foreign-call . g$11828$1WS4nL)
        (letrec-syntax . g$11827$1WS4nL)
        (let-syntax . g$11826$1WS4nL)
        (set! . g$11825$1WS4nL)
        (export . g$11824$1WS4nL)
        (import . g$11823$1WS4nL)
        (library . g$11822$1WS4nL)
        (begin . g$11821$1WS4nL)
        (module . g$11820$1WS4nL)
        (define-syntax . g$11819$1WS4nL)
        (define . g$11818$1WS4nL))
      '((g$8683$1WS4nL core-prim . ellipsis-map)
        (g$12434$1WS4nL core-prim . &no-nans-rcd)
        (g$12433$1WS4nL core-prim . &no-nans-rtd)
        (g$12432$1WS4nL core-prim . &no-infinities-rcd)
        (g$12431$1WS4nL core-prim . &no-infinities-rtd)
        (g$12430$1WS4nL core-prim . &i/o-encoding-rcd)
        (g$12429$1WS4nL core-prim . &i/o-encoding-rtd)
        (g$12428$1WS4nL core-prim . &i/o-decoding-rcd)
        (g$12427$1WS4nL core-prim . &i/o-decoding-rtd)
        (g$12426$1WS4nL core-prim . &i/o-port-rcd)
        (g$12425$1WS4nL core-prim . &i/o-port-rtd)
        (g$12424$1WS4nL core-prim . &i/o-file-does-not-exist-rcd)
        (g$12423$1WS4nL core-prim . &i/o-file-does-not-exist-rtd)
        (g$12422$1WS4nL core-prim . &i/o-file-already-exists-rcd)
        (g$12421$1WS4nL core-prim . &i/o-file-already-exists-rtd)
        (g$12420$1WS4nL core-prim . &i/o-file-is-read-only-rcd)
        (g$12419$1WS4nL core-prim . &i/o-file-is-read-only-rtd)
        (g$12418$1WS4nL core-prim . &i/o-file-protection-rcd)
        (g$12417$1WS4nL core-prim . &i/o-file-protection-rtd)
        (g$12416$1WS4nL core-prim . &i/o-filename-rcd)
        (g$12415$1WS4nL core-prim . &i/o-filename-rtd)
        (g$12414$1WS4nL core-prim . &i/o-invalid-position-rcd)
        (g$12413$1WS4nL core-prim . &i/o-invalid-position-rtd)
        (g$12412$1WS4nL core-prim . &i/o-write-rcd)
        (g$12411$1WS4nL core-prim . &i/o-write-rtd)
        (g$12410$1WS4nL core-prim . &i/o-read-rcd)
        (g$12409$1WS4nL core-prim . &i/o-read-rtd)
        (g$12408$1WS4nL core-prim . &i/o-rcd)
        (g$12407$1WS4nL core-prim . &i/o-rtd)
        (g$12406$1WS4nL core-prim . &undefined-rcd)
        (g$12405$1WS4nL core-prim . &undefined-rtd)
        (g$12404$1WS4nL core-prim . &syntax-rcd)
        (g$12403$1WS4nL core-prim . &syntax-rtd)
        (g$12402$1WS4nL core-prim . &lexical-rcd)
        (g$12401$1WS4nL core-prim . &lexical-rtd)
        (g$12400$1WS4nL core-prim . &implementation-restriction-rcd)
        (g$12399$1WS4nL core-prim . &implementation-restriction-rtd)
        (g$12398$1WS4nL core-prim . &non-continuable-rcd)
        (g$12397$1WS4nL core-prim . &non-continuable-rtd)
        (g$12396$1WS4nL core-prim . &who-rcd)
        (g$12395$1WS4nL core-prim . &who-rtd)
        (g$12394$1WS4nL core-prim . &irritants-rcd)
        (g$12393$1WS4nL core-prim . &irritants-rtd)
        (g$12392$1WS4nL core-prim . &assertion-rcd)
        (g$12391$1WS4nL core-prim . &assertion-rtd)
        (g$12390$1WS4nL core-prim . &violation-rcd)
        (g$12389$1WS4nL core-prim . &violation-rtd)
        (g$12388$1WS4nL core-prim . &error-rcd)
        (g$12387$1WS4nL core-prim . &error-rtd)
        (g$12386$1WS4nL core-prim . &serious-rcd)
        (g$12385$1WS4nL core-prim . &serious-rtd)
        (g$12384$1WS4nL core-prim . &warning-rcd)
        (g$12383$1WS4nL core-prim . &warning-rtd)
        (g$12382$1WS4nL core-prim . &message-rcd)
        (g$12381$1WS4nL core-prim . &message-rtd)
        (g$12380$1WS4nL core-prim . &condition-rcd)
        (g$12379$1WS4nL core-prim . &condition-rtd)
        (g$12378$1WS4nL core-prim . library-letrec*)
        (g$12377$1WS4nL core-prim . annotation-stripped)
        (g$12376$1WS4nL core-prim . annotation-source)
        (g$12375$1WS4nL core-prim . annotation-expression)
        (g$12374$1WS4nL core-prim . annotation?)
        (g$12373$1WS4nL core-prim . read-annotated)
        (g$12372$1WS4nL core-prim . tanh)
        (g$12371$1WS4nL core-prim . cosh)
        (g$12370$1WS4nL core-prim . sinh)
        (g$12369$1WS4nL core-prim . make-guid)
        (g$12368$1WS4nL core-prim . unspecified?)
        (g$12367$1WS4nL core-prim . make-trace)
        (g$12366$1WS4nL core-prim . make-list)
        (g$12365$1WS4nL core-prim . last-pair)
        (g$12364$1WS4nL core-prim . load-r5rs)
        (g$12363$1WS4nL core-prim . license)
        (g$12362$1WS4nL core-prim . stacktrace)
        (g$11786$1WS4nL core-prim . ironscheme-build)
        (g$12361$1WS4nL core-prim . define-clr-class-internal)
        (g$12360$1WS4nL core-prim . clr-field-set!-internal)
        (g$12359$1WS4nL core-prim . clr-field-get-internal)
        (g$12358$1WS4nL core-prim . clr-cast-internal)
        (g$12357$1WS4nL core-prim . clr-call-internal)
        (g$12356$1WS4nL core-prim . clr-new-internal)
        (g$12355$1WS4nL core-prim . clr-new-array-internal)
        (g$12354$1WS4nL core-prim . clr-is-internal)
        (g$12353$1WS4nL core-prim . clr-reference-internal)
        (g$12352$1WS4nL core-prim . clr-using-internal)
        (g$12351$1WS4nL core-prim . clr-clear-usings-internal)
        (g$8807$1WS4nL core-prim . syntax-error)
        (g$8678$1WS4nL core-prim . syntax-dispatch)
        (g$12350$1WS4nL core-prim . compile-core)
        (g$12349$1WS4nL core-prim . eval-core)
        (g$12348$1WS4nL core-prim . set-symbol-value!)
        (g$12347$1WS4nL core-prim . symbol-value)
        (g$12346$1WS4nL core-prim . ungensym)
        (g$12345$1WS4nL core-prim . gensym)
        (g$12344$1WS4nL core-prim . void)
        (g$12343$1WS4nL core-prim . load-serialized-library)
        (g$12342$1WS4nL core-prim . serialize-library)
        (g$11788$1WS4nL core-prim . compile-system-libraries)
        (g$11790$1WS4nL core-prim . compile->closure)
        (g$11789$1WS4nL core-prim . compile)
        (g$11785$1WS4nL core-prim . load)
        (g$8816$1WS4nL core-prim . interaction-environment)
        (g$12341$1WS4nL core-prim . char-ready?)
        (g$12340$1WS4nL core-prim . string-upcase)
        (g$12339$1WS4nL core-prim . string-titlecase)
        (g$12338$1WS4nL core-prim . string-normalize-nfkd)
        (g$12337$1WS4nL core-prim . string-normalize-nfkc)
        (g$12336$1WS4nL core-prim . string-normalize-nfd)
        (g$12335$1WS4nL core-prim . string-normalize-nfc)
        (g$12334$1WS4nL core-prim . string-foldcase)
        (g$12333$1WS4nL core-prim . string-downcase)
        (g$6917$1WS4nL core-prim . string-ci>?)
        (g$6919$1WS4nL core-prim . string-ci>=?)
        (g$6915$1WS4nL core-prim . string-ci=?)
        (g$6916$1WS4nL core-prim . string-ci<?)
        (g$6918$1WS4nL core-prim . string-ci<=?)
        (g$12332$1WS4nL core-prim . char-whitespace?)
        (g$12331$1WS4nL core-prim . char-upper-case?)
        (g$12330$1WS4nL core-prim . char-title-case?)
        (g$12329$1WS4nL core-prim . char-numeric?)
        (g$12328$1WS4nL core-prim . char-lower-case?)
        (g$12327$1WS4nL core-prim . char-general-category)
        (g$12326$1WS4nL core-prim . char-upcase)
        (g$12325$1WS4nL core-prim . char-titlecase)
        (g$12324$1WS4nL core-prim . char-foldcase)
        (g$12323$1WS4nL core-prim . char-downcase)
        (g$6956$1WS4nL core-prim . char-ci>?)
        (g$6958$1WS4nL core-prim . char-ci>=?)
        (g$6954$1WS4nL core-prim . char-ci=?)
        (g$6955$1WS4nL core-prim . char-ci<?)
        (g$6957$1WS4nL core-prim . char-ci<=?)
        (g$12322$1WS4nL core-prim . char-alphabetic?)
        (g$8415$1WS4nL core-prim . variable-transformer-procedure)
        (g$8414$1WS4nL core-prim . variable-transformer?)
        (g$8413$1WS4nL core-prim . make-variable-transformer)
        (g$8811$1WS4nL core-prim . identifier?)
        (g$8800$1WS4nL core-prim . generate-temporaries)
        (g$8801$1WS4nL core-prim . free-identifier=?)
        (g$8813$1WS4nL core-prim . syntax->datum)
        (g$8812$1WS4nL core-prim . datum->syntax)
        (g$8802$1WS4nL core-prim . bound-identifier=?)
        (g$12321$1WS4nL core-prim . record-type-descriptor?)
        (g$12320$1WS4nL core-prim . record-predicate)
        (g$12319$1WS4nL core-prim . record-mutator)
        (g$12318$1WS4nL core-prim . record-constructor)
        (g$12317$1WS4nL core-prim . record-accessor)
        (g$12316$1WS4nL core-prim . make-record-type-descriptor)
        (g$12315$1WS4nL core-prim . make-record-constructor-descriptor)
        (g$12314$1WS4nL core-prim . record?)
        (g$12313$1WS4nL core-prim . record-type-uid)
        (g$12312$1WS4nL core-prim . record-type-sealed?)
        (g$12311$1WS4nL core-prim . record-type-parent)
        (g$12310$1WS4nL core-prim . record-type-opaque?)
        (g$12309$1WS4nL core-prim . record-type-name)
        (g$12308$1WS4nL core-prim . record-type-generative?)
        (g$12307$1WS4nL core-prim . record-type-field-names)
        (g$12306$1WS4nL core-prim . record-rtd)
        (g$12305$1WS4nL core-prim . record-field-mutable?)
        (g$6492$1WS4nL core-prim . delete-file)
        (g$6491$1WS4nL core-prim . file-exists?)
        (g$12304$1WS4nL core-prim . vector-sort!)
        (g$12303$1WS4nL core-prim . vector-sort)
        (g$6855$1WS4nL core-prim . list-sort)
        (g$12302$1WS4nL core-prim . symbol-hash)
        (g$12301$1WS4nL core-prim . string-ci-hash)
        (g$12300$1WS4nL core-prim . string-hash)
        (g$12299$1WS4nL core-prim . equal-hash)
        (g$12298$1WS4nL core-prim . hashtable-equivalence-function)
        (g$12297$1WS4nL core-prim . make-hashtable)
        (g$12296$1WS4nL core-prim . hashtable-hash-function)
        (g$6459$1WS4nL core-prim . make-eqv-hashtable)
        (g$6458$1WS4nL core-prim . make-eq-hashtable)
        (g$12295$1WS4nL core-prim . hashtable?)
        (g$6465$1WS4nL core-prim . hashtable-update!)
        (g$6460$1WS4nL core-prim . hashtable-size)
        (g$6462$1WS4nL core-prim . hashtable-set!)
        (g$6461$1WS4nL core-prim . hashtable-ref)
        (g$12294$1WS4nL core-prim . hashtable-mutable?)
        (g$12293$1WS4nL core-prim . hashtable-keys)
        (g$12292$1WS4nL core-prim . hashtable-entries)
        (g$6463$1WS4nL core-prim . hashtable-delete!)
        (g$12291$1WS4nL core-prim . hashtable-copy)
        (g$6464$1WS4nL core-prim . hashtable-contains?)
        (g$6466$1WS4nL core-prim . hashtable-clear!)
        (g$7348$1WS4nL core-prim . call-with-output-file)
        (g$7347$1WS4nL core-prim . call-with-input-file)
        (g$12290$1WS4nL core-prim . write-char)
        (g$12289$1WS4nL core-prim . write)
        (g$7346$1WS4nL core-prim . with-output-to-file)
        (g$7345$1WS4nL core-prim . with-input-from-file)
        (g$12288$1WS4nL core-prim . read-char)
        (g$12287$1WS4nL core-prim . read)
        (g$12286$1WS4nL core-prim . peek-char)
        (g$12285$1WS4nL core-prim . open-output-file)
        (g$12284$1WS4nL core-prim . open-input-file)
        (g$12283$1WS4nL core-prim . newline)
        (g$12282$1WS4nL core-prim . display)
        (g$12281$1WS4nL core-prim . close-output-port)
        (g$12280$1WS4nL core-prim . close-input-port)
        (g$12279$1WS4nL core-prim . eof-object?)
        (g$12278$1WS4nL core-prim . eof-object)
        (g$12277$1WS4nL core-prim . current-error-port)
        (g$12276$1WS4nL core-prim . current-output-port)
        (g$12275$1WS4nL core-prim . current-input-port)
        (g$12274$1WS4nL core-prim . output-port?)
        (g$12273$1WS4nL core-prim . input-port?)
        (g$12272$1WS4nL core-prim . utf-8-codec)
        (g$12271$1WS4nL core-prim . utf-16-codec)
        (g$12270$1WS4nL core-prim . transcoder-error-handling-mode)
        (g$12269$1WS4nL core-prim . transcoder-eol-style)
        (g$12268$1WS4nL core-prim . transcoder-codec)
        (g$12267$1WS4nL core-prim . transcoded-port)
        (g$12266$1WS4nL core-prim . textual-port?)
        (g$12265$1WS4nL core-prim . string->bytevector)
        (g$12264$1WS4nL core-prim . standard-output-port)
        (g$12263$1WS4nL core-prim . standard-input-port)
        (g$12262$1WS4nL core-prim . standard-error-port)
        (g$12261$1WS4nL core-prim . set-port-position!)
        (g$12260$1WS4nL core-prim . put-u8)
        (g$12259$1WS4nL core-prim . put-string)
        (g$12258$1WS4nL core-prim . put-datum)
        (g$12257$1WS4nL core-prim . put-char)
        (g$12256$1WS4nL core-prim . put-bytevector)
        (g$7321$1WS4nL core-prim . port?)
        (g$12255$1WS4nL core-prim . port-transcoder)
        (g$12254$1WS4nL core-prim . port-position)
        (g$12253$1WS4nL core-prim . port-has-set-port-position!?)
        (g$12252$1WS4nL core-prim . port-has-port-position?)
        (g$12251$1WS4nL core-prim . port-eof?)
        (g$12250$1WS4nL core-prim . output-port-buffer-mode)
        (g$7320$1WS4nL core-prim . open-string-output-port)
        (g$12249$1WS4nL core-prim . open-string-input-port)
        (g$12248$1WS4nL core-prim . open-file-output-port)
        (g$12247$1WS4nL core-prim . open-file-input/output-port)
        (g$12246$1WS4nL core-prim . open-file-input-port)
        (g$12245$1WS4nL core-prim . open-bytevector-output-port)
        (g$12244$1WS4nL core-prim . open-bytevector-input-port)
        (g$12243$1WS4nL core-prim . native-transcoder)
        (g$12242$1WS4nL core-prim . native-eol-style)
        (g$12241$1WS4nL core-prim . make-transcoder)
        (g$12240$1WS4nL core-prim . latin-1-codec)
        (g$7177$1WS4nL core-prim . make-i/o-write-error)
        (g$7163$1WS4nL core-prim . make-i/o-read-error)
        (g$7282$1WS4nL core-prim . make-i/o-port-error)
        (g$7192$1WS4nL core-prim . make-i/o-invalid-position-error)
        (g$7209$1WS4nL core-prim . make-i/o-filename-error)
        (g$7225$1WS4nL core-prim . make-i/o-file-protection-error)
        (g$7239$1WS4nL core-prim . make-i/o-file-is-read-only-error)
        (g$7267$1WS4nL core-prim . make-i/o-file-does-not-exist-error)
        (g$7253$1WS4nL core-prim . make-i/o-file-already-exists-error)
        (g$7149$1WS4nL core-prim . make-i/o-error)
        (g$7313$1WS4nL core-prim . make-i/o-encoding-error)
        (g$7298$1WS4nL core-prim . make-i/o-decoding-error)
        (g$12239$1WS4nL core-prim . make-custom-textual-output-port)
        (g$12238$1WS4nL core-prim . make-custom-textual-input/output-port)
        (g$12237$1WS4nL core-prim . make-custom-textual-input-port)
        (g$12236$1WS4nL core-prim . make-custom-binary-output-port)
        (g$12235$1WS4nL core-prim . make-custom-binary-input/output-port)
        (g$12234$1WS4nL core-prim . make-custom-binary-input-port)
        (g$12233$1WS4nL core-prim . make-bytevector)
        (g$12232$1WS4nL core-prim . lookahead-u8)
        (g$12231$1WS4nL core-prim . lookahead-char)
        (g$7178$1WS4nL core-prim . i/o-write-error?)
        (g$7164$1WS4nL core-prim . i/o-read-error?)
        (g$7284$1WS4nL core-prim . i/o-port-error?)
        (g$7194$1WS4nL core-prim . i/o-invalid-position-error?)
        (g$7195$1WS4nL core-prim . i/o-error-position)
        (g$7211$1WS4nL core-prim . i/o-filename-error?)
        (g$7226$1WS4nL core-prim . i/o-file-protection-error?)
        (g$7240$1WS4nL core-prim . i/o-file-is-read-only-error?)
        (g$7268$1WS4nL core-prim . i/o-file-does-not-exist-error?)
        (g$7254$1WS4nL core-prim . i/o-file-already-exists-error?)
        (g$7150$1WS4nL core-prim . i/o-error?)
        (g$7285$1WS4nL core-prim . i/o-error-port)
        (g$7212$1WS4nL core-prim . i/o-error-filename)
        (g$7315$1WS4nL core-prim . i/o-encoding-error?)
        (g$7316$1WS4nL core-prim . i/o-encoding-error-char)
        (g$7299$1WS4nL core-prim . i/o-decoding-error?)
        (g$12230$1WS4nL core-prim . get-u8)
        (g$12229$1WS4nL core-prim . get-string-n!)
        (g$12228$1WS4nL core-prim . get-string-n)
        (g$12227$1WS4nL core-prim . get-string-all)
        (g$12226$1WS4nL core-prim . get-line)
        (g$12225$1WS4nL core-prim . get-datum)
        (g$12224$1WS4nL core-prim . get-char)
        (g$12223$1WS4nL core-prim . get-bytevector-some)
        (g$12222$1WS4nL core-prim . get-bytevector-n!)
        (g$12221$1WS4nL core-prim . get-bytevector-n)
        (g$12220$1WS4nL core-prim . get-bytevector-all)
        (g$12219$1WS4nL core-prim . flush-output-port)
        (g$12218$1WS4nL core-prim . close-port)
        (g$7322$1WS4nL core-prim . call-with-string-output-port)
        (g$12217$1WS4nL core-prim . call-with-port)
        (g$12216$1WS4nL core-prim . call-with-bytevector-output-port)
        (g$12215$1WS4nL core-prim . bytevector->string)
        (g$12214$1WS4nL core-prim . buffer-mode?)
        (g$12213$1WS4nL core-prim . binary-port?)
        (g$8791$1WS4nL core-prim . scheme-report-environment)
        (g$6835$1WS4nL core-prim . quotient)
        (g$8790$1WS4nL core-prim . null-environment)
        (g$6836$1WS4nL core-prim . remainder)
        (g$6837$1WS4nL core-prim . modulo)
        (g$12212$1WS4nL core-prim . inexact->exact)
        (g$6839$1WS4nL core-prim . force)
        (g$12211$1WS4nL core-prim . exact->inexact)
        (g$12210$1WS4nL core-prim . exit)
        (g$11782$1WS4nL core-prim . command-line)
        (g$12209$1WS4nL core-prim . string-fill!)
        (g$12208$1WS4nL core-prim . string-set!)
        (g$12207$1WS4nL core-prim . set-cdr!)
        (g$12206$1WS4nL core-prim . set-car!)
        (g$5847$1WS4nL core-prim . remove)
        (g$5848$1WS4nL core-prim . remv)
        (g$5830$1WS4nL core-prim . remp)
        (g$5849$1WS4nL core-prim . remq)
        (g$5829$1WS4nL core-prim . partition)
        (g$5837$1WS4nL core-prim . memv)
        (g$5836$1WS4nL core-prim . memq)
        (g$5839$1WS4nL core-prim . memp)
        (g$5838$1WS4nL core-prim . member)
        (g$5843$1WS4nL core-prim . exists)
        (g$5842$1WS4nL core-prim . for-all)
        (g$5846$1WS4nL core-prim . fold-right)
        (g$5845$1WS4nL core-prim . fold-left)
        (g$5828$1WS4nL core-prim . find)
        (g$5831$1WS4nL core-prim . filter)
        (g$5844$1WS4nL core-prim . cons*)
        (g$5833$1WS4nL core-prim . assv)
        (g$5832$1WS4nL core-prim . assq)
        (g$5835$1WS4nL core-prim . assp)
        (g$5834$1WS4nL core-prim . assoc)
        (g$12205$1WS4nL core-prim . with-exception-handler)
        (g$12204$1WS4nL core-prim . raise-continuable)
        (g$12203$1WS4nL core-prim . raise)
        (g$8793$1WS4nL core-prim . eval)
        (g$8789$1WS4nL core-prim . environment)
        (g$7406$1WS4nL core-prim . make-enumeration)
        (g$7413$1WS4nL core-prim . enum-set=?)
        (g$7407$1WS4nL core-prim . enum-set-universe)
        (g$7414$1WS4nL core-prim . enum-set-union)
        (g$7412$1WS4nL core-prim . enum-set-subset?)
        (g$7418$1WS4nL core-prim . enum-set-projection)
        (g$7411$1WS4nL core-prim . enum-set-member?)
        (g$7415$1WS4nL core-prim . enum-set-intersection)
        (g$7408$1WS4nL core-prim . enum-set-indexer)
        (g$7416$1WS4nL core-prim . enum-set-difference)
        (g$7409$1WS4nL core-prim . enum-set-constructor)
        (g$7417$1WS4nL core-prim . enum-set-complement)
        (g$7410$1WS4nL core-prim . enum-set->list)
        (g$6746$1WS4nL core-prim . who-condition?)
        (g$6657$1WS4nL core-prim . warning?)
        (g$6699$1WS4nL core-prim . violation?)
        (g$6823$1WS4nL core-prim . undefined-violation?)
        (g$6807$1WS4nL core-prim . syntax-violation?)
        (g$6809$1WS4nL core-prim . syntax-violation-subform)
        (g$6808$1WS4nL core-prim . syntax-violation-form)
        (g$8810$1WS4nL core-prim . syntax-violation)
        (g$12202$1WS4nL core-prim . simple-conditions)
        (g$6671$1WS4nL core-prim . serious-condition?)
        (g$6761$1WS4nL core-prim . non-continuable-violation?)
        (g$6642$1WS4nL core-prim . message-condition?)
        (g$6744$1WS4nL core-prim . make-who-condition)
        (g$6656$1WS4nL core-prim . make-warning)
        (g$6698$1WS4nL core-prim . make-violation)
        (g$6822$1WS4nL core-prim . make-undefined-violation)
        (g$6804$1WS4nL core-prim . make-syntax-violation)
        (g$6670$1WS4nL core-prim . make-serious-condition)
        (g$6760$1WS4nL core-prim . make-non-continuable-violation)
        (g$6640$1WS4nL core-prim . make-message-condition)
        (g$6788$1WS4nL core-prim . make-lexical-violation)
        (g$6727$1WS4nL core-prim . make-irritants-condition)
        (g$6774$1WS4nL core-prim . make-implementation-restriction-violation)
        (g$6684$1WS4nL core-prim . make-error)
        (g$6712$1WS4nL core-prim . make-assertion-violation)
        (g$6789$1WS4nL core-prim . lexical-violation?)
        (g$6729$1WS4nL core-prim . irritants-condition?)
        (g$6775$1WS4nL core-prim . implementation-restriction-violation?)
        (g$6685$1WS4nL core-prim . error?)
        (g$6747$1WS4nL core-prim . condition-who)
        (g$12201$1WS4nL core-prim . condition-predicate)
        (g$6643$1WS4nL core-prim . condition-message)
        (g$6730$1WS4nL core-prim . condition-irritants)
        (g$12200$1WS4nL core-prim . condition-accessor)
        (g$12199$1WS4nL core-prim . condition)
        (g$6713$1WS4nL core-prim . assertion-violation?)
        (g$12198$1WS4nL core-prim . condition?)
        (g$12197$1WS4nL core-prim . utf32->string)
        (g$12196$1WS4nL core-prim . utf16->string)
        (g$12195$1WS4nL core-prim . utf8->string)
        (g$12194$1WS4nL core-prim . uint-list->bytevector)
        (g$12193$1WS4nL core-prim . u8-list->bytevector)
        (g$12192$1WS4nL core-prim . string->utf8)
        (g$12191$1WS4nL core-prim . string->utf32)
        (g$12190$1WS4nL core-prim . string->utf16)
        (g$12189$1WS4nL core-prim . sint-list->bytevector)
        (g$6498$1WS4nL core-prim . native-endianness)
        (g$12188$1WS4nL core-prim . bytevector?)
        (g$12187$1WS4nL core-prim . bytevector=?)
        (g$12186$1WS4nL core-prim . bytevector-uint-set!)
        (g$12185$1WS4nL core-prim . bytevector-uint-ref)
        (g$12184$1WS4nL core-prim . bytevector-u8-set!)
        (g$12183$1WS4nL core-prim . bytevector-u8-ref)
        (g$6519$1WS4nL core-prim . bytevector-u64-set!)
        (g$6515$1WS4nL core-prim . bytevector-u64-ref)
        (g$6521$1WS4nL core-prim . bytevector-u64-native-set!)
        (g$6517$1WS4nL core-prim . bytevector-u64-native-ref)
        (g$6511$1WS4nL core-prim . bytevector-u32-set!)
        (g$6507$1WS4nL core-prim . bytevector-u32-ref)
        (g$6513$1WS4nL core-prim . bytevector-u32-native-set!)
        (g$6509$1WS4nL core-prim . bytevector-u32-native-ref)
        (g$6503$1WS4nL core-prim . bytevector-u16-set!)
        (g$6499$1WS4nL core-prim . bytevector-u16-ref)
        (g$6505$1WS4nL core-prim . bytevector-u16-native-set!)
        (g$6501$1WS4nL core-prim . bytevector-u16-native-ref)
        (g$12182$1WS4nL core-prim . bytevector-sint-set!)
        (g$12181$1WS4nL core-prim . bytevector-sint-ref)
        (g$12180$1WS4nL core-prim . bytevector-s8-set!)
        (g$12179$1WS4nL core-prim . bytevector-s8-ref)
        (g$6520$1WS4nL core-prim . bytevector-s64-set!)
        (g$6516$1WS4nL core-prim . bytevector-s64-ref)
        (g$6522$1WS4nL core-prim . bytevector-s64-native-set!)
        (g$6518$1WS4nL core-prim . bytevector-s64-native-ref)
        (g$6512$1WS4nL core-prim . bytevector-s32-set!)
        (g$6508$1WS4nL core-prim . bytevector-s32-ref)
        (g$6514$1WS4nL core-prim . bytevector-s32-native-set!)
        (g$6510$1WS4nL core-prim . bytevector-s32-native-ref)
        (g$6504$1WS4nL core-prim . bytevector-s16-set!)
        (g$6500$1WS4nL core-prim . bytevector-s16-ref)
        (g$6506$1WS4nL core-prim . bytevector-s16-native-set!)
        (g$6502$1WS4nL core-prim . bytevector-s16-native-ref)
        (g$12178$1WS4nL core-prim . bytevector-length)
        (g$12177$1WS4nL core-prim . bytevector-ieee-single-set!)
        (g$12176$1WS4nL core-prim . bytevector-ieee-single-ref)
        (g$6525$1WS4nL core-prim . bytevector-ieee-single-native-set!)
        (g$6523$1WS4nL core-prim . bytevector-ieee-single-native-ref)
        (g$12175$1WS4nL core-prim . bytevector-ieee-double-set!)
        (g$12174$1WS4nL core-prim . bytevector-ieee-double-ref)
        (g$6526$1WS4nL core-prim . bytevector-ieee-double-native-set!)
        (g$6524$1WS4nL core-prim . bytevector-ieee-double-native-ref)
        (g$12173$1WS4nL core-prim . bytevector-fill!)
        (g$12172$1WS4nL core-prim . bytevector-copy!)
        (g$12171$1WS4nL core-prim . bytevector-copy)
        (g$12170$1WS4nL core-prim . bytevector->uint-list)
        (g$12169$1WS4nL core-prim . bytevector->u8-list)
        (g$12168$1WS4nL core-prim . bytevector->sint-list)
        (g$7135$1WS4nL core-prim . no-nans-violation?)
        (g$7121$1WS4nL core-prim . no-infinities-violation?)
        (g$7134$1WS4nL core-prim . make-no-nans-violation)
        (g$7120$1WS4nL core-prim . make-no-infinities-violation)
        (g$12167$1WS4nL core-prim . real->flonum)
        (g$12166$1WS4nL core-prim . flzero?)
        (g$12165$1WS4nL core-prim . fltruncate)
        (g$12164$1WS4nL core-prim . fltan)
        (g$12163$1WS4nL core-prim . flsqrt)
        (g$12162$1WS4nL core-prim . flsin)
        (g$12161$1WS4nL core-prim . flround)
        (g$12160$1WS4nL core-prim . flpositive?)
        (g$12159$1WS4nL core-prim . flonum?)
        (g$12158$1WS4nL core-prim . flodd?)
        (g$12157$1WS4nL core-prim . flnumerator)
        (g$12156$1WS4nL core-prim . flnegative?)
        (g$12155$1WS4nL core-prim . flnan?)
        (g$12154$1WS4nL core-prim . flmod0)
        (g$12153$1WS4nL core-prim . flmod)
        (g$12152$1WS4nL core-prim . flmin)
        (g$12151$1WS4nL core-prim . flmax)
        (g$12150$1WS4nL core-prim . fllog)
        (g$12149$1WS4nL core-prim . flinteger?)
        (g$12148$1WS4nL core-prim . flinfinite?)
        (g$12147$1WS4nL core-prim . flfloor)
        (g$12146$1WS4nL core-prim . flfinite?)
        (g$12145$1WS4nL core-prim . flexpt)
        (g$12144$1WS4nL core-prim . flexp)
        (g$12143$1WS4nL core-prim . fleven?)
        (g$12142$1WS4nL core-prim . fldiv0-and-mod0)
        (g$12141$1WS4nL core-prim . fldiv0)
        (g$12140$1WS4nL core-prim . fldiv-and-mod)
        (g$12139$1WS4nL core-prim . fldiv)
        (g$12138$1WS4nL core-prim . fldenominator)
        (g$12137$1WS4nL core-prim . flcos)
        (g$12136$1WS4nL core-prim . flceiling)
        (g$12135$1WS4nL core-prim . flatan)
        (g$12134$1WS4nL core-prim . flasin)
        (g$12133$1WS4nL core-prim . flacos)
        (g$12132$1WS4nL core-prim . flabs)
        (g$12131$1WS4nL core-prim . fl>?)
        (g$12130$1WS4nL core-prim . fl>=?)
        (g$12129$1WS4nL core-prim . fl=?)
        (g$12128$1WS4nL core-prim . fl<?)
        (g$12127$1WS4nL core-prim . fl<=?)
        (g$12126$1WS4nL core-prim . fl/)
        (g$12125$1WS4nL core-prim . fl-)
        (g$12124$1WS4nL core-prim . fl+)
        (g$12123$1WS4nL core-prim . fl*)
        (g$12122$1WS4nL core-prim . fixnum->flonum)
        (g$12121$1WS4nL core-prim . fxzero?)
        (g$12120$1WS4nL core-prim . fxxor)
        (g$7066$1WS4nL core-prim . fxrotate-bit-field)
        (g$12119$1WS4nL core-prim . fxreverse-bit-field)
        (g$12118$1WS4nL core-prim . fxpositive?)
        (g$12117$1WS4nL core-prim . fxodd?)
        (g$12116$1WS4nL core-prim . fxnot)
        (g$12115$1WS4nL core-prim . fxnegative?)
        (g$12114$1WS4nL core-prim . fxmod0)
        (g$12113$1WS4nL core-prim . fxmod)
        (g$12112$1WS4nL core-prim . fxmin)
        (g$12111$1WS4nL core-prim . fxmax)
        (g$12110$1WS4nL core-prim . fxlength)
        (g$12109$1WS4nL core-prim . fxior)
        (g$7060$1WS4nL core-prim . fxif)
        (g$12108$1WS4nL core-prim . fxfirst-bit-set)
        (g$12107$1WS4nL core-prim . fxeven?)
        (g$12106$1WS4nL core-prim . fxdiv0-and-mod0)
        (g$12105$1WS4nL core-prim . fxdiv0)
        (g$12104$1WS4nL core-prim . fxdiv-and-mod)
        (g$12103$1WS4nL core-prim . fxdiv)
        (g$7063$1WS4nL core-prim . fxcopy-bit-field)
        (g$7061$1WS4nL core-prim . fxcopy-bit)
        (g$12102$1WS4nL core-prim . fxbit-set?)
        (g$7062$1WS4nL core-prim . fxbit-field)
        (g$12101$1WS4nL core-prim . fxbit-count)
        (g$7065$1WS4nL core-prim . fxarithmetic-shift-right)
        (g$7064$1WS4nL core-prim . fxarithmetic-shift-left)
        (g$12100$1WS4nL core-prim . fxarithmetic-shift)
        (g$12099$1WS4nL core-prim . fxand)
        (g$12098$1WS4nL core-prim . fx>?)
        (g$12097$1WS4nL core-prim . fx>=?)
        (g$12096$1WS4nL core-prim . fx=?)
        (g$12095$1WS4nL core-prim . fx<?)
        (g$12094$1WS4nL core-prim . fx<=?)
        (g$12093$1WS4nL core-prim . fx-/carry)
        (g$12092$1WS4nL core-prim . fx-)
        (g$12091$1WS4nL core-prim . fx+/carry)
        (g$12090$1WS4nL core-prim . fx+)
        (g$12089$1WS4nL core-prim . fx*/carry)
        (g$12088$1WS4nL core-prim . fx*)
        (g$12087$1WS4nL core-prim . greatest-fixnum)
        (g$12086$1WS4nL core-prim . least-fixnum)
        (g$12085$1WS4nL core-prim . fixnum-width)
        (g$12084$1WS4nL core-prim . fixnum?)
        (g$7018$1WS4nL core-prim . bitwise-rotate-bit-field)
        (g$12083$1WS4nL core-prim . bitwise-reverse-bit-field)
        (g$12082$1WS4nL core-prim . bitwise-length)
        (g$7012$1WS4nL core-prim . bitwise-if)
        (g$12081$1WS4nL core-prim . bitwise-first-bit-set)
        (g$7015$1WS4nL core-prim . bitwise-copy-bit-field)
        (g$7013$1WS4nL core-prim . bitwise-copy-bit)
        (g$12080$1WS4nL core-prim . bitwise-bit-set?)
        (g$12079$1WS4nL core-prim . bitwise-bit-field)
        (g$12078$1WS4nL core-prim . bitwise-bit-count)
        (g$12077$1WS4nL core-prim . bitwise-xor)
        (g$12076$1WS4nL core-prim . bitwise-ior)
        (g$12075$1WS4nL core-prim . bitwise-and)
        (g$12074$1WS4nL core-prim . bitwise-not)
        (g$7017$1WS4nL core-prim . bitwise-arithmetic-shift-right)
        (g$7016$1WS4nL core-prim . bitwise-arithmetic-shift-left)
        (g$12073$1WS4nL core-prim . bitwise-arithmetic-shift)
        (g$12072$1WS4nL core-prim . zero?)
        (g$12071$1WS4nL core-prim . vector?)
        (g$12070$1WS4nL core-prim . vector-set!)
        (g$12069$1WS4nL core-prim . vector-ref)
        (g$12068$1WS4nL core-prim . vector-map)
        (g$12067$1WS4nL core-prim . vector-length)
        (g$12066$1WS4nL core-prim . vector-for-each)
        (g$12065$1WS4nL core-prim . vector-fill!)
        (g$12064$1WS4nL core-prim . vector->list)
        (g$12063$1WS4nL core-prim . vector)
        (g$12062$1WS4nL core-prim . values)
        (g$12061$1WS4nL core-prim . truncate)
        (g$12060$1WS4nL core-prim . tan)
        (g$12059$1WS4nL core-prim . symbol?)
        (g$6007$1WS4nL core-prim . symbol=?)
        (g$12058$1WS4nL core-prim . symbol->string)
        (g$12057$1WS4nL core-prim . substring)
        (g$12056$1WS4nL core-prim . string?)
        (g$6004$1WS4nL core-prim . string>?)
        (g$6006$1WS4nL core-prim . string>=?)
        (g$6002$1WS4nL core-prim . string=?)
        (g$6003$1WS4nL core-prim . string<?)
        (g$6005$1WS4nL core-prim . string<=?)
        (g$12055$1WS4nL core-prim . string-ref)
        (g$12054$1WS4nL core-prim . string-length)
        (g$12053$1WS4nL core-prim . string-for-each)
        (g$12052$1WS4nL core-prim . string-copy)
        (g$12051$1WS4nL core-prim . string-append)
        (g$12050$1WS4nL core-prim . string->symbol)
        (g$12049$1WS4nL core-prim . string->number)
        (g$12048$1WS4nL core-prim . string->list)
        (g$12047$1WS4nL core-prim . string)
        (g$12046$1WS4nL core-prim . sqrt)
        (g$12045$1WS4nL core-prim . sin)
        (g$12044$1WS4nL core-prim . round)
        (g$12043$1WS4nL core-prim . reverse)
        (g$12042$1WS4nL core-prim . real?)
        (g$12041$1WS4nL core-prim . real-valued?)
        (g$12040$1WS4nL core-prim . real-part)
        (g$6048$1WS4nL core-prim . rationalize)
        (g$12039$1WS4nL core-prim . rational?)
        (g$12038$1WS4nL core-prim . rational-valued?)
        (g$12037$1WS4nL core-prim . procedure?)
        (g$12036$1WS4nL core-prim . positive?)
        (g$12035$1WS4nL core-prim . pair?)
        (g$12034$1WS4nL core-prim . odd?)
        (g$12033$1WS4nL core-prim . numerator)
        (g$12032$1WS4nL core-prim . number?)
        (g$12031$1WS4nL core-prim . number->string)
        (g$12030$1WS4nL core-prim . null?)
        (g$12029$1WS4nL core-prim . not)
        (g$12028$1WS4nL core-prim . negative?)
        (g$12027$1WS4nL core-prim . nan?)
        (g$12026$1WS4nL core-prim . min)
        (g$12025$1WS4nL core-prim . max)
        (g$12024$1WS4nL core-prim . map)
        (g$12023$1WS4nL core-prim . make-vector)
        (g$12022$1WS4nL core-prim . make-string)
        (g$12021$1WS4nL core-prim . make-rectangular)
        (g$12020$1WS4nL core-prim . make-polar)
        (g$12019$1WS4nL core-prim . magnitude)
        (g$12018$1WS4nL core-prim . log)
        (g$12017$1WS4nL core-prim . list?)
        (g$12016$1WS4nL core-prim . list-tail)
        (g$12015$1WS4nL core-prim . list-ref)
        (g$12014$1WS4nL core-prim . list->vector)
        (g$12013$1WS4nL core-prim . list->string)
        (g$12012$1WS4nL core-prim . list)
        (g$12011$1WS4nL core-prim . length)
        (g$12010$1WS4nL core-prim . lcm)
        (g$12009$1WS4nL core-prim . integer?)
        (g$12008$1WS4nL core-prim . integer-valued?)
        (g$12007$1WS4nL core-prim . integer->char)
        (g$12006$1WS4nL core-prim . infinite?)
        (g$12005$1WS4nL core-prim . inexact?)
        (g$12004$1WS4nL core-prim . inexact)
        (g$12003$1WS4nL core-prim . imag-part)
        (g$12002$1WS4nL core-prim . gcd)
        (g$12001$1WS4nL core-prim . for-each)
        (g$12000$1WS4nL core-prim . floor)
        (g$11999$1WS4nL core-prim . finite?)
        (g$11998$1WS4nL core-prim . expt)
        (g$11997$1WS4nL core-prim . exp)
        (g$11996$1WS4nL core-prim . exact?)
        (g$11995$1WS4nL core-prim . exact-integer-sqrt)
        (g$11994$1WS4nL core-prim . exact)
        (g$11993$1WS4nL core-prim . even?)
        (g$11992$1WS4nL core-prim . error)
        (g$11991$1WS4nL core-prim . eqv?)
        (g$11990$1WS4nL core-prim . equal?)
        (g$11989$1WS4nL core-prim . eq?)
        (g$11988$1WS4nL core-prim . dynamic-wind)
        (g$11987$1WS4nL core-prim . div0-and-mod0)
        (g$11986$1WS4nL core-prim . mod0)
        (g$11985$1WS4nL core-prim . div0)
        (g$11984$1WS4nL core-prim . div-and-mod)
        (g$11983$1WS4nL core-prim . mod)
        (g$11982$1WS4nL core-prim . div)
        (g$11981$1WS4nL core-prim . denominator)
        (g$11980$1WS4nL core-prim . cos)
        (g$11979$1WS4nL core-prim . cons)
        (g$11978$1WS4nL core-prim . complex?)
        (g$11977$1WS4nL core-prim . char?)
        (g$6045$1WS4nL core-prim . char>?)
        (g$6047$1WS4nL core-prim . char>=?)
        (g$6043$1WS4nL core-prim . char=?)
        (g$6044$1WS4nL core-prim . char<?)
        (g$6046$1WS4nL core-prim . char<=?)
        (g$11976$1WS4nL core-prim . char->integer)
        (g$11975$1WS4nL core-prim . ceiling)
        (g$11974$1WS4nL core-prim . call-with-values)
        (g$11973$1WS4nL core-prim . call/cc)
        (g$11972$1WS4nL core-prim . call-with-current-continuation)
        (g$5967$1WS4nL core-prim . cddddr)
        (g$5966$1WS4nL core-prim . cdddar)
        (g$5965$1WS4nL core-prim . cddadr)
        (g$5964$1WS4nL core-prim . cddaar)
        (g$5963$1WS4nL core-prim . cdaddr)
        (g$5962$1WS4nL core-prim . cdadar)
        (g$5961$1WS4nL core-prim . cdaadr)
        (g$5960$1WS4nL core-prim . cdaaar)
        (g$5959$1WS4nL core-prim . cadddr)
        (g$5958$1WS4nL core-prim . caddar)
        (g$5957$1WS4nL core-prim . cadadr)
        (g$5956$1WS4nL core-prim . cadaar)
        (g$5955$1WS4nL core-prim . caaddr)
        (g$5954$1WS4nL core-prim . caadar)
        (g$5953$1WS4nL core-prim . caaadr)
        (g$5952$1WS4nL core-prim . caaaar)
        (g$5951$1WS4nL core-prim . cdddr)
        (g$5950$1WS4nL core-prim . cddar)
        (g$5949$1WS4nL core-prim . cdadr)
        (g$5948$1WS4nL core-prim . cdaar)
        (g$5947$1WS4nL core-prim . caddr)
        (g$5946$1WS4nL core-prim . cadar)
        (g$5945$1WS4nL core-prim . caadr)
        (g$5944$1WS4nL core-prim . caaar)
        (g$5943$1WS4nL core-prim . cddr)
        (g$5942$1WS4nL core-prim . cdar)
        (g$5941$1WS4nL core-prim . cadr)
        (g$5940$1WS4nL core-prim . caar)
        (g$11971$1WS4nL core-prim . cdr)
        (g$11970$1WS4nL core-prim . car)
        (g$11969$1WS4nL core-prim . boolean?)
        (g$6008$1WS4nL core-prim . boolean=?)
        (g$11968$1WS4nL core-prim . atan)
        (g$11967$1WS4nL core-prim . assertion-violation)
        (g$11966$1WS4nL core-prim . asin)
        (g$11965$1WS4nL core-prim . apply)
        (g$11964$1WS4nL core-prim . append)
        (g$11963$1WS4nL core-prim . angle)
        (g$11962$1WS4nL core-prim . acos)
        (g$11961$1WS4nL core-prim . abs)
        (g$11960$1WS4nL core-prim . /)
        (g$11959$1WS4nL core-prim . *)
        (g$11958$1WS4nL core-prim . -)
        (g$11957$1WS4nL core-prim . +)
        (g$11956$1WS4nL core-prim . >=)
        (g$11955$1WS4nL core-prim . >)
        (g$11954$1WS4nL core-prim . =)
        (g$11953$1WS4nL core-prim . <=)
        (g$11952$1WS4nL core-prim . <)
        (g$11951$1WS4nL core-prim . make-record-printer)
        (g$11950$1WS4nL core-prim . eqv-hash)
        (g$11949$1WS4nL core-prim . reverse!)
        (g$11948$1WS4nL core-prim . deserialize-port)
        (g$11947$1WS4nL core-prim . serialize-port)
        (g$7381$1WS4nL core-prim . enum-set?)
        (g$6838$1WS4nL core-prim . make-promise)
        (g$11784$1WS4nL core-prim . load/args)
        (g$7491$1WS4nL core-prim . printf)
        (g$7492$1WS4nL core-prim . fprintf)
        (g$7493$1WS4nL core-prim . format)
        (g$11946$1WS4nL core-prim . procedure-form)
        (g$11945$1WS4nL core-prim . procedure-environment)
        (g$11944$1WS4nL core-prim . procedure-name)
        (g$11943$1WS4nL core-prim . procedure-arity)
        (g$11942$1WS4nL core-prim . gc-collect)
        (g$11941$1WS4nL core-prim . clr-type?)
        (g$11940$1WS4nL core-prim . get-clr-type)
        (g$11939$1WS4nL core-prim . get-command-line)
        (g$11938$1WS4nL core-prim . vector-append)
        (g$11937$1WS4nL core-prim . vector-filter)
        (g$11936$1WS4nL core-prim . vector-reverse!)
        (g$11935$1WS4nL core-prim . vector-contains?)
        (g$11934$1WS4nL core-prim . vector-index-of)
        (g$11933$1WS4nL core-prim . vector-copy)
        (g$11932$1WS4nL core-prim . vector-binary-search)
        (g$11931$1WS4nL core-prim . string-ci-compare)
        (g$11930$1WS4nL core-prim . string-compare)
        (g$11929$1WS4nL core-prim . string-format)
        (g$11781$1WS4nL core-prim . trace-printer)
        (g$11928$1WS4nL core-prim . make-traced-procedure)
        (g$7513$1WS4nL core-prim . make-traced-macro)
        (g$8806$1WS4nL core-prim . assertion-error)
        (g$11927$1WS4nL core-prim . pmap)
        (g$11926$1WS4nL core-prim . time-it)
        (g$7518$1WS4nL core-prim . make-parameter)
        (g$11925$1WS4nL core-prim . library-locator)
        (g$11924$1WS4nL core-prim . get-library-paths)
        (g$8785$1WS4nL core-prim . environment-bindings)
        (g$8788$1WS4nL core-prim . environment-symbols)
        (g$8784$1WS4nL core-prim . interaction-environment-symbols)
        (g$11923$1WS4nL core-prim . optimization-level)
        (g$7948$1WS4nL core-prim . library-path)
        (g$8792$1WS4nL core-prim . expand)
        (g$11922$1WS4nL $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11921$1WS4nL $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11920$1WS4nL $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11919$1WS4nL $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11918$1WS4nL $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11917$1WS4nL
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11916$1WS4nL
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11915$1WS4nL
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11914$1WS4nL
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11913$1WS4nL $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11912$1WS4nL
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11911$1WS4nL $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11910$1WS4nL $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11909$1WS4nL $core-rtd &i/o-rtd &i/o-rcd)
        (g$11908$1WS4nL $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11907$1WS4nL $core-rtd &undefined-rtd &undefined-rcd)
        (g$11906$1WS4nL $core-rtd &syntax-rtd &syntax-rcd)
        (g$11905$1WS4nL $core-rtd &lexical-rtd &lexical-rcd)
        (g$11904$1WS4nL
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11903$1WS4nL $core-rtd &who-rtd &who-rcd)
        (g$11902$1WS4nL $core-rtd &irritants-rtd &irritants-rcd)
        (g$11901$1WS4nL $core-rtd &assertion-rtd &assertion-rcd)
        (g$11900$1WS4nL $core-rtd &violation-rtd &violation-rcd)
        (g$11899$1WS4nL $core-rtd &error-rtd &error-rcd)
        (g$11898$1WS4nL $core-rtd &serious-rtd &serious-rcd)
        (g$11897$1WS4nL $core-rtd &warning-rtd &warning-rcd)
        (g$11896$1WS4nL $core-rtd &message-rtd &message-rcd)
        (g$11895$1WS4nL $core-rtd &condition-rtd &condition-rcd)
        (g$11894$1WS4nL macro . define-condition-type)
        (g$11893$1WS4nL macro . define-enumeration)
        (g$11892$1WS4nL macro . define-record-type)
        (g$11891$1WS4nL macro . parent-rtd)
        (g$11890$1WS4nL macro . nongenerative)
        (g$11889$1WS4nL macro . opaque)
        (g$11888$1WS4nL macro . sealed)
        (g$11887$1WS4nL macro . protocol)
        (g$11886$1WS4nL macro . parent)
        (g$11885$1WS4nL macro . immutable)
        (g$11884$1WS4nL macro . mutable)
        (g$11883$1WS4nL macro . fields)
        (g$11882$1WS4nL macro . error-handling-mode)
        (g$11881$1WS4nL macro . file-options)
        (g$11880$1WS4nL macro . buffer-mode)
        (g$11879$1WS4nL macro . eol-style)
        (g$11878$1WS4nL macro . guard)
        (g$11877$1WS4nL macro . trace-letrec-syntax)
        (g$11876$1WS4nL macro . trace-let-syntax)
        (g$11875$1WS4nL macro . trace-define-syntax)
        (g$11874$1WS4nL macro . trace-define)
        (g$11873$1WS4nL macro . trace-lambda)
        (g$11872$1WS4nL macro . unsyntax-splicing)
        (g$11871$1WS4nL macro . unsyntax)
        (g$11870$1WS4nL macro . unquote-splicing)
        (g$11869$1WS4nL macro . unquote)
        (g$11868$1WS4nL macro . _)
        (g$11867$1WS4nL macro . else)
        (g$11866$1WS4nL macro . =>)
        (g$11865$1WS4nL macro . ...)
        (g$11864$1WS4nL macro . assert)
        (g$11863$1WS4nL macro . endianness)
        (g$11862$1WS4nL macro . delay)
        (g$11861$1WS4nL macro . time)
        (g$11860$1WS4nL macro . or)
        (g$11859$1WS4nL macro . and)
        (g$11858$1WS4nL macro . do)
        (g$11857$1WS4nL macro . cond)
        (g$11856$1WS4nL macro . let*)
        (g$11855$1WS4nL macro . let)
        (g$11854$1WS4nL macro . identifier-syntax)
        (g$11853$1WS4nL macro . with-syntax)
        (g$11852$1WS4nL macro . quasisyntax)
        (g$11851$1WS4nL macro . quasiquote)
        (g$11850$1WS4nL macro . syntax-rules)
        (g$11849$1WS4nL macro . include-into)
        (g$11848$1WS4nL macro . include)
        (g$11847$1WS4nL macro . define-struct)
        (g$11846$1WS4nL macro . let-values)
        (g$11845$1WS4nL macro . let*-values)
        (g$11844$1WS4nL core-macro . record-constructor-descriptor)
        (g$11843$1WS4nL core-macro . record-type-descriptor)
        (g$11842$1WS4nL core-macro . fluid-let-syntax)
        (g$11841$1WS4nL macro . case)
        (g$11840$1WS4nL macro . parameterize)
        (g$11839$1WS4nL macro . unless)
        (g$11838$1WS4nL macro . when)
        (g$11837$1WS4nL core-macro . if)
        (g$11836$1WS4nL core-macro . letrec*)
        (g$11835$1WS4nL core-macro . letrec)
        (g$11834$1WS4nL core-macro . type-descriptor)
        (g$11833$1WS4nL core-macro . case-lambda)
        (g$11832$1WS4nL core-macro . lambda)
        (g$11831$1WS4nL core-macro . syntax)
        (g$11830$1WS4nL core-macro . syntax-case)
        (g$11829$1WS4nL core-macro . quote)
        (g$11828$1WS4nL core-macro . foreign-call)
        (g$11827$1WS4nL letrec-syntax)
        (g$11826$1WS4nL let-syntax)
        (g$11825$1WS4nL set!)
        (g$11824$1WS4nL export)
        (g$11823$1WS4nL import)
        (g$11822$1WS4nL library)
        (g$11821$1WS4nL begin)
        (g$11820$1WS4nL module)
        (g$11819$1WS4nL define-syntax)
        (g$11818$1WS4nL define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7075$1WS4nL
      'g$12471$1WS4nL
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12350$1WS4nL)
        (eval-core . g$12349$1WS4nL)
        (set-symbol-value! . g$12348$1WS4nL)
        (symbol-value . g$12347$1WS4nL)
        (gensym . g$12345$1WS4nL)
        (void . g$12344$1WS4nL))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11152$1WS4nL
     g$trace-printer$11192$1WS4nL
     (g$make-parameter$6530$1WS4nL write))
   (g$command-line$11153$1WS4nL
     g$command-line$11193$1WS4nL
     (g$make-parameter$6530$1WS4nL (get-command-line)))
   (g$local-library-path$11154$1WS4nL
     g$local-library-path$11194$1WS4nL
     (case-lambda
       ((g$filename$11165$1WS4nL)
        (cons
          (g$get-directory-name$5460$1WS4nL g$filename$11165$1WS4nL)
          (g$library-path$7059$1WS4nL)))))
   (g$load/args$11155$1WS4nL
     g$load/args$11195$1WS4nL
     (case-lambda
       ((g$filename$11166$1WS4nL . g$args$11167$1WS4nL)
        (begin
          (apply
            g$load-r6rs-top-level$11162$1WS4nL
            g$filename$11166$1WS4nL
            'load
            g$args$11167$1WS4nL)
          (void)))))
   (g$load$11156$1WS4nL
     g$load$11196$1WS4nL
     (case-lambda
       ((g$filename$11168$1WS4nL)
        (begin
          (apply
            g$load-r6rs-top-level$11162$1WS4nL
            g$filename$11168$1WS4nL
            'load
            (cdr (g$command-line$11153$1WS4nL)))
          (void)))))
   (g$ironscheme-build$11157$1WS4nL
     g$ironscheme-build$11197$1WS4nL
     (case-lambda (() (g$load$11156$1WS4nL '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11158$1WS4nL
     g$eval-top-level$11198$1WS4nL
     (case-lambda
       ((g$x$11169$1WS4nL)
        (g$eval$11127$1WS4nL
          g$x$11169$1WS4nL
          (g$interaction-environment$11150$1WS4nL)))))
   (g$compile-system-libraries$11159$1WS4nL
     g$compile-system-libraries$11199$1WS4nL
     (case-lambda
       (()
        (g$eval-top-level$11158$1WS4nL
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11160$1WS4nL
     g$compile$11200$1WS4nL
     (case-lambda
       ((g$filename$11170$1WS4nL)
        (g$load-r6rs-top-level$11162$1WS4nL g$filename$11170$1WS4nL 'compile))))
   (g$compile->closure$11161$1WS4nL
     g$compile->closure$11201$1WS4nL
     (case-lambda
       ((g$filename$11171$1WS4nL)
        (g$load-r6rs-top-level$11162$1WS4nL g$filename$11171$1WS4nL 'closure))))
   (g$load-r6rs-top-level$11162$1WS4nL
     g$load-r6rs-top-level$11202$1WS4nL
     (case-lambda
       ((g$filename$11172$1WS4nL g$how$11173$1WS4nL . g$args$11174$1WS4nL)
        ((case-lambda
           ((g$library-path$11177$1WS4nL g$library-path$11178$1WS4nL)
            ((case-lambda
               ((g$swap$11179$1WS4nL)
                (dynamic-wind
                  g$swap$11179$1WS4nL
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11180$1WS4nL)
                         ((case-lambda
                            ((g$t$11181$1WS4nL)
                             (if (g$memv$4996$1WS4nL
                                   g$t$11181$1WS4nL
                                   '(closure))
                               (g$pre-compile-r6rs-top-level$11149$1WS4nL
                                 g$x*$11180$1WS4nL)
                               (if (g$memv$4996$1WS4nL g$t$11181$1WS4nL '(load))
                                 ((case-lambda
                                    ((g$command-line$11184$1WS4nL
                                       g$command-line$11185$1WS4nL)
                                     ((case-lambda
                                        ((g$swap$11186$1WS4nL)
                                         (dynamic-wind
                                           g$swap$11186$1WS4nL
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11148$1WS4nL
                                                 g$x*$11180$1WS4nL))))
                                           g$swap$11186$1WS4nL)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11187$1WS4nL)
                                             (begin
                                               (g$command-line$11184$1WS4nL
                                                 g$command-line$11185$1WS4nL)
                                               (set! g$command-line$11185$1WS4nL
                                                 g$t$11187$1WS4nL))))
                                          (g$command-line$11184$1WS4nL)))))))
                                  g$command-line$11153$1WS4nL
                                  (cons
                                    g$filename$11172$1WS4nL
                                    (map (case-lambda
                                           ((g$x$11188$1WS4nL)
                                            (g$format$6445$1WS4nL
                                              '"~a"
                                              g$x$11188$1WS4nL)))
                                         g$args$11174$1WS4nL)))
                                 (if (g$memv$4996$1WS4nL
                                       g$t$11181$1WS4nL
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11148$1WS4nL
                                       g$x*$11180$1WS4nL)
                                     (g$serialize-all$7063$1WS4nL
                                       serialize-library
                                       g$compile-core-expr$6777$1WS4nL))
                                   (if '#f '#f (void)))))))
                          g$how$11173$1WS4nL)))
                      (g$with-input-from-file$6273$1WS4nL
                        g$filename$11172$1WS4nL
                        (case-lambda
                          (()
                           ((letrec ((g$f$11189$1WS4nL
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11190$1WS4nL)
                                              (if (eof-object? g$x$11190$1WS4nL)
                                                '()
                                                (cons
                                                  g$x$11190$1WS4nL
                                                  (g$f$11189$1WS4nL)))))
                                           (read-annotated))))))
                              g$f$11189$1WS4nL))))))))
                  g$swap$11179$1WS4nL)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11191$1WS4nL)
                    (begin
                      (g$library-path$11177$1WS4nL g$library-path$11178$1WS4nL)
                      (set! g$library-path$11178$1WS4nL g$t$11191$1WS4nL))))
                 (g$library-path$11177$1WS4nL)))))))
         g$library-path$7059$1WS4nL
         (g$local-library-path$11154$1WS4nL g$filename$11172$1WS4nL)))))
   (g$fo$11163$1WS4nL
     g$fo$11203$1WS4nL
     (g$make-enumeration$6407$1WS4nL '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7064$1WS4nL
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11164$1WS4nL)
         (if (g$serious-condition?$5722$1WS4nL g$ex$11164$1WS4nL)
           (raise g$ex$11164$1WS4nL)
           (begin (display g$ex$11164$1WS4nL) (newline))))))
    (set-symbol-value! 'load g$load$11156$1WS4nL)
    (set-symbol-value! 'compile g$compile$11160$1WS4nL)
    (set-symbol-value! 'compile->closure g$compile->closure$11161$1WS4nL)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11158$1WS4nL)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11118$1WS4nL)
    (set-symbol-value! 'expanded2core g$expanded->core$6776$1WS4nL)
    (set-symbol-value! 'trace-printer g$trace-printer$11152$1WS4nL)
    (g$file-options-constructor$6531$1WS4nL
      (g$enum-set-constructor$6410$1WS4nL g$fo$11163$1WS4nL))
    (g$library-path$7059$1WS4nL (get-library-paths))))

