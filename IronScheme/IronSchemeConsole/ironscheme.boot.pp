;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme base)
  ((g$caar$4823$RATN9
     g$caar$4895$RATN9
     (case-lambda ((g$x$4854$RATN9) (car (car g$x$4854$RATN9)))))
   (g$cadr$4824$RATN9
     g$cadr$4896$RATN9
     (case-lambda ((g$x$4855$RATN9) (car (cdr g$x$4855$RATN9)))))
   (g$cdar$4825$RATN9
     g$cdar$4897$RATN9
     (case-lambda ((g$x$4856$RATN9) (cdr (car g$x$4856$RATN9)))))
   (g$cddr$4826$RATN9
     g$cddr$4898$RATN9
     (case-lambda ((g$x$4857$RATN9) (cdr (cdr g$x$4857$RATN9)))))
   (g$caaar$4827$RATN9
     g$caaar$4899$RATN9
     (case-lambda
       ((g$x$4858$RATN9) (g$caar$4823$RATN9 (car g$x$4858$RATN9)))))
   (g$caadr$4828$RATN9
     g$caadr$4900$RATN9
     (case-lambda
       ((g$x$4859$RATN9) (g$caar$4823$RATN9 (cdr g$x$4859$RATN9)))))
   (g$cadar$4829$RATN9
     g$cadar$4901$RATN9
     (case-lambda
       ((g$x$4860$RATN9) (g$cadr$4824$RATN9 (car g$x$4860$RATN9)))))
   (g$caddr$4830$RATN9
     g$caddr$4902$RATN9
     (case-lambda
       ((g$x$4861$RATN9) (g$cadr$4824$RATN9 (cdr g$x$4861$RATN9)))))
   (g$cdaar$4831$RATN9
     g$cdaar$4903$RATN9
     (case-lambda
       ((g$x$4862$RATN9) (g$cdar$4825$RATN9 (car g$x$4862$RATN9)))))
   (g$cdadr$4832$RATN9
     g$cdadr$4904$RATN9
     (case-lambda
       ((g$x$4863$RATN9) (g$cdar$4825$RATN9 (cdr g$x$4863$RATN9)))))
   (g$cddar$4833$RATN9
     g$cddar$4905$RATN9
     (case-lambda
       ((g$x$4864$RATN9) (g$cddr$4826$RATN9 (car g$x$4864$RATN9)))))
   (g$cdddr$4834$RATN9
     g$cdddr$4906$RATN9
     (case-lambda
       ((g$x$4865$RATN9) (g$cddr$4826$RATN9 (cdr g$x$4865$RATN9)))))
   (g$caaaar$4835$RATN9
     g$caaaar$4907$RATN9
     (case-lambda
       ((g$x$4866$RATN9) (g$caaar$4827$RATN9 (car g$x$4866$RATN9)))))
   (g$caaadr$4836$RATN9
     g$caaadr$4908$RATN9
     (case-lambda
       ((g$x$4867$RATN9) (g$caaar$4827$RATN9 (cdr g$x$4867$RATN9)))))
   (g$caadar$4837$RATN9
     g$caadar$4909$RATN9
     (case-lambda
       ((g$x$4868$RATN9) (g$caadr$4828$RATN9 (car g$x$4868$RATN9)))))
   (g$caaddr$4838$RATN9
     g$caaddr$4910$RATN9
     (case-lambda
       ((g$x$4869$RATN9) (g$caadr$4828$RATN9 (cdr g$x$4869$RATN9)))))
   (g$cadaar$4839$RATN9
     g$cadaar$4911$RATN9
     (case-lambda
       ((g$x$4870$RATN9) (g$cadar$4829$RATN9 (car g$x$4870$RATN9)))))
   (g$cadadr$4840$RATN9
     g$cadadr$4912$RATN9
     (case-lambda
       ((g$x$4871$RATN9) (g$cadar$4829$RATN9 (cdr g$x$4871$RATN9)))))
   (g$caddar$4841$RATN9
     g$caddar$4913$RATN9
     (case-lambda
       ((g$x$4872$RATN9) (g$caddr$4830$RATN9 (car g$x$4872$RATN9)))))
   (g$cadddr$4842$RATN9
     g$cadddr$4914$RATN9
     (case-lambda
       ((g$x$4873$RATN9) (g$caddr$4830$RATN9 (cdr g$x$4873$RATN9)))))
   (g$cdaaar$4843$RATN9
     g$cdaaar$4915$RATN9
     (case-lambda
       ((g$x$4874$RATN9) (g$cdaar$4831$RATN9 (car g$x$4874$RATN9)))))
   (g$cdaadr$4844$RATN9
     g$cdaadr$4916$RATN9
     (case-lambda
       ((g$x$4875$RATN9) (g$cdaar$4831$RATN9 (cdr g$x$4875$RATN9)))))
   (g$cdadar$4845$RATN9
     g$cdadar$4917$RATN9
     (case-lambda
       ((g$x$4876$RATN9) (g$cdadr$4832$RATN9 (car g$x$4876$RATN9)))))
   (g$cdaddr$4846$RATN9
     g$cdaddr$4918$RATN9
     (case-lambda
       ((g$x$4877$RATN9) (g$cdadr$4832$RATN9 (cdr g$x$4877$RATN9)))))
   (g$cddaar$4847$RATN9
     g$cddaar$4919$RATN9
     (case-lambda
       ((g$x$4878$RATN9) (g$cddar$4833$RATN9 (car g$x$4878$RATN9)))))
   (g$cddadr$4848$RATN9
     g$cddadr$4920$RATN9
     (case-lambda
       ((g$x$4879$RATN9) (g$cddar$4833$RATN9 (cdr g$x$4879$RATN9)))))
   (g$cdddar$4849$RATN9
     g$cdddar$4921$RATN9
     (case-lambda
       ((g$x$4880$RATN9) (g$cdddr$4834$RATN9 (car g$x$4880$RATN9)))))
   (g$cddddr$4850$RATN9
     g$cddddr$4922$RATN9
     (case-lambda
       ((g$x$4881$RATN9) (g$cdddr$4834$RATN9 (cdr g$x$4881$RATN9)))))
   (g$rationalize$4851$RATN9
     g$rationalize$4923$RATN9
     (case-lambda
       ((g$x$4882$RATN9 g$e$4883$RATN9)
        (apply / (g$find-ratio$4852$RATN9 g$x$4882$RATN9 g$e$4883$RATN9)))))
   (g$find-ratio$4852$RATN9
     g$find-ratio$4924$RATN9
     (case-lambda
       ((g$x$4884$RATN9 g$e$4885$RATN9)
        (g$find-ratio-between$4853$RATN9
          (- g$x$4884$RATN9 g$e$4885$RATN9)
          (+ g$x$4884$RATN9 g$e$4885$RATN9)))))
   (g$find-ratio-between$4853$RATN9
     g$find-ratio-between$4925$RATN9
     (case-lambda
       ((g$x$4886$RATN9 g$y$4887$RATN9)
        (letrec* ((g$sr$4888$RATN9
                    (case-lambda
                      ((g$x$4890$RATN9 g$y$4891$RATN9)
                       ((case-lambda
                          ((g$fx$4892$RATN9 g$fy$4893$RATN9)
                           (if (>= g$fx$4892$RATN9 g$x$4890$RATN9)
                             (list g$fx$4892$RATN9 '1)
                             (if (= g$fx$4892$RATN9 g$fy$4893$RATN9)
                               ((case-lambda
                                  ((g$rat$4894$RATN9)
                                   (list
                                     (+ (g$cadr$4824$RATN9 g$rat$4894$RATN9)
                                        (* g$fx$4892$RATN9
                                           (car g$rat$4894$RATN9)))
                                     (car g$rat$4894$RATN9))))
                                (g$sr$4888$RATN9
                                  (/ (- g$y$4891$RATN9 g$fy$4893$RATN9))
                                  (/ (- g$x$4890$RATN9 g$fx$4892$RATN9))))
                               (list (+ '1 g$fx$4892$RATN9) '1)))))
                        (exact (floor g$x$4890$RATN9))
                        (exact (floor g$y$4891$RATN9)))))))
          (if (< g$y$4887$RATN9 g$x$4886$RATN9)
            (g$find-ratio-between$4853$RATN9 g$y$4887$RATN9 g$x$4886$RATN9)
            (if (>= g$x$4886$RATN9 g$y$4887$RATN9)
              (list g$x$4886$RATN9 '1)
              (if (positive? g$x$4886$RATN9)
                (g$sr$4888$RATN9 g$x$4886$RATN9 g$y$4887$RATN9)
                (if (negative? g$y$4887$RATN9)
                  ((case-lambda
                     ((g$rat$4889$RATN9)
                      (list
                        (- (car g$rat$4889$RATN9))
                        (g$cadr$4824$RATN9 g$rat$4889$RATN9))))
                   (g$sr$4888$RATN9 (- g$y$4887$RATN9) (- g$x$4886$RATN9)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5121$RATN9 g$using$5156$RATN9 (clr-using-internal 'system))
   (g$using$5123$RATN9
     g$using$5157$RATN9
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5124$RATN9
     g$make-eq-hashtable$5158$RATN9
     (case-lambda
       (() (clr-new-internal 'hashtable))
       ((g$k$5135$RATN9)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5135$RATN9)))))
   (g$make-eqv-hashtable$5125$RATN9
     g$make-eqv-hashtable$5159$RATN9
     (case-lambda
       (() (make-hashtable eqv-hash eqv?))
       ((g$k$5136$RATN9) (make-hashtable eqv-hash eqv? g$k$5136$RATN9))))
   (g$hashtable-size$5126$RATN9
     g$hashtable-size$5160$RATN9
     (case-lambda
       ((g$ht$5137$RATN9)
        (clr-call-internal 'hashtable 'get_count g$ht$5137$RATN9))))
   (g$hashtable-ref$5127$RATN9
     g$hashtable-ref$5161$RATN9
     (case-lambda
       ((g$ht$5138$RATN9 g$key$5139$RATN9 g$default$5140$RATN9)
        (letrec* ((g$r$5141$RATN9
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5138$RATN9
                      g$key$5139$RATN9)))
          (if (not (null? g$r$5141$RATN9))
            g$r$5141$RATN9
            g$default$5140$RATN9)))))
   (g$hashtable-set!$5128$RATN9
     g$hashtable-set!$5162$RATN9
     (case-lambda
       ((g$ht$5142$RATN9 g$key$5143$RATN9 g$obj$5144$RATN9)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5142$RATN9
          g$key$5143$RATN9
          g$obj$5144$RATN9))))
   (g$hashtable-delete!$5129$RATN9
     g$hashtable-delete!$5163$RATN9
     (case-lambda
       ((g$ht$5145$RATN9 g$key$5146$RATN9)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5145$RATN9
          g$key$5146$RATN9))))
   (g$hashtable-contains?$5130$RATN9
     g$hashtable-contains?$5164$RATN9
     (case-lambda
       ((g$ht$5147$RATN9 g$key$5148$RATN9)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5147$RATN9
          g$key$5148$RATN9))))
   (g$hashtable-update!$5131$RATN9
     g$hashtable-update!$5165$RATN9
     (case-lambda
       ((g$ht$5149$RATN9
          g$key$5150$RATN9
          g$proc$5151$RATN9
          g$default$5152$RATN9)
        (g$hashtable-set!$5128$RATN9
          g$ht$5149$RATN9
          g$key$5150$RATN9
          (g$proc$5151$RATN9
            (g$hashtable-ref$5127$RATN9
              g$ht$5149$RATN9
              g$key$5150$RATN9
              g$default$5152$RATN9))))))
   (g$hashtable-clear!$5132$RATN9
     g$hashtable-clear!$5166$RATN9
     (case-lambda
       ((g$ht$5153$RATN9)
        (clr-call-internal 'hashtable 'clear g$ht$5153$RATN9))
       ((g$ht$5154$RATN9 g$k$5155$RATN9)
        (clr-call-internal 'hashtable 'clear g$ht$5154$RATN9))))
   (g$clear-usings$5134$RATN9
     g$clear-usings$5167$RATN9
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5169$RATN9 g$using$5235$RATN9 (clr-using-internal 'system.io))
   (g$file-exists?$5170$RATN9
     g$file-exists?$5236$RATN9
     (case-lambda
       ((g$fn$5198$RATN9)
        (clr-call-internal 'file 'exists '() g$fn$5198$RATN9))))
   (g$delete-file$5171$RATN9
     g$delete-file$5237$RATN9
     (case-lambda
       ((g$fn$5199$RATN9)
        (clr-call-internal 'file 'delete '() g$fn$5199$RATN9))))
   (g$file-copy$5172$RATN9
     g$file-copy$5238$RATN9
     (case-lambda
       ((g$from$5200$RATN9 g$to$5201$RATN9)
        (g$file-copy$5172$RATN9 g$from$5200$RATN9 g$to$5201$RATN9 '#f))
       ((g$from$5202$RATN9 g$to$5203$RATN9 g$overwrite?$5204$RATN9)
        (clr-call-internal
          'file
          'copy
          '()
          g$from$5202$RATN9
          g$to$5203$RATN9
          g$overwrite?$5204$RATN9))))
   (g$file-move$5173$RATN9
     g$file-move$5239$RATN9
     (case-lambda
       ((g$from$5205$RATN9 g$to$5206$RATN9)
        (clr-call-internal 'file 'move '() g$from$5205$RATN9 g$to$5206$RATN9))))
   (g$file-create-time$5174$RATN9
     g$file-create-time$5240$RATN9
     (case-lambda
       ((g$fn$5207$RATN9)
        (clr-call-internal 'file 'getcreationtime '() g$fn$5207$RATN9))))
   (g$file-access-time$5175$RATN9
     g$file-access-time$5241$RATN9
     (case-lambda
       ((g$fn$5208$RATN9)
        (clr-call-internal 'file 'getlastaccesstime '() g$fn$5208$RATN9))))
   (g$file-modified-time$5176$RATN9
     g$file-modified-time$5242$RATN9
     (case-lambda
       ((g$fn$5209$RATN9)
        (clr-call-internal 'file 'getlastwritetime '() g$fn$5209$RATN9))))
   (g$directory-exists?$5177$RATN9
     g$directory-exists?$5243$RATN9
     (case-lambda
       ((g$fn$5210$RATN9)
        (clr-call-internal 'directory 'exists '() g$fn$5210$RATN9))))
   (g$delete-directory$5178$RATN9
     g$delete-directory$5244$RATN9
     (case-lambda
       ((g$dir$5211$RATN9)
        (g$delete-directory$5178$RATN9 g$dir$5211$RATN9 '#f))
       ((g$dir$5212$RATN9 g$recursive?$5213$RATN9)
        (clr-call-internal
          'directory
          'delete
          '()
          g$dir$5212$RATN9
          g$recursive?$5213$RATN9))))
   (g$directory-move$5179$RATN9
     g$directory-move$5245$RATN9
     (case-lambda
       ((g$from$5214$RATN9 g$to$5215$RATN9)
        (clr-call-internal
          'directory
          'move
          '()
          g$from$5214$RATN9
          g$to$5215$RATN9))))
   (g$create-directory$5180$RATN9
     g$create-directory$5246$RATN9
     (case-lambda
       ((g$name$5216$RATN9)
        (clr-call-internal 'directory 'createdirectory '() g$name$5216$RATN9))))
   (g$get-files$5181$RATN9
     g$get-files$5247$RATN9
     (case-lambda
       ((g$dir$5217$RATN9) (g$get-files$5181$RATN9 g$dir$5217$RATN9 '"*"))
       ((g$dir$5218$RATN9 g$pattern$5219$RATN9)
        (clr-call-internal
          'directory
          'getfiles
          '()
          g$dir$5218$RATN9
          g$pattern$5219$RATN9))))
   (g$get-directories$5182$RATN9
     g$get-directories$5248$RATN9
     (case-lambda
       ((g$dir$5220$RATN9)
        (g$get-directories$5182$RATN9 g$dir$5220$RATN9 '"*"))
       ((g$dir$5221$RATN9 g$pattern$5222$RATN9)
        (clr-call-internal
          'directory
          'getdirectories
          '()
          g$dir$5221$RATN9
          g$pattern$5222$RATN9))))
   (g$change-extension$5183$RATN9
     g$change-extension$5249$RATN9
     (case-lambda
       ((g$path$5223$RATN9 g$extension$5224$RATN9)
        (clr-call-internal
          'path
          'changeextension
          '()
          g$path$5223$RATN9
          g$extension$5224$RATN9))))
   (g$path-combine$5184$RATN9
     g$path-combine$5250$RATN9
     (case-lambda
       ((g$path1$5225$RATN9 g$path2$5226$RATN9)
        (clr-call-internal
          'path
          'combine
          '()
          g$path1$5225$RATN9
          g$path2$5226$RATN9))))
   (g$get-directory-name$5185$RATN9
     g$get-directory-name$5251$RATN9
     (case-lambda
       ((g$path$5227$RATN9)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5227$RATN9))))
   (g$get-extension$5186$RATN9
     g$get-extension$5252$RATN9
     (case-lambda
       ((g$path$5228$RATN9)
        (clr-call-internal 'path 'getextension '() g$path$5228$RATN9))))
   (g$get-filename$5187$RATN9
     g$get-filename$5253$RATN9
     (case-lambda
       ((g$path$5229$RATN9)
        (clr-call-internal 'path 'getfilename '() g$path$5229$RATN9))))
   (g$get-filename-without-extension$5188$RATN9
     g$get-filename-without-extension$5254$RATN9
     (case-lambda
       ((g$path$5230$RATN9)
        (clr-call-internal
          'path
          'getfilenamewithoutextension
          '()
          g$path$5230$RATN9))))
   (g$get-full-path$5189$RATN9
     g$get-full-path$5255$RATN9
     (case-lambda
       ((g$path$5231$RATN9)
        (clr-call-internal 'path 'getfullpath '() g$path$5231$RATN9))))
   (g$get-path-root$5190$RATN9
     g$get-path-root$5256$RATN9
     (case-lambda
       ((g$path$5232$RATN9)
        (clr-call-internal 'path 'getpathroot '() g$path$5232$RATN9))))
   (g$get-random-filename$5191$RATN9
     g$get-random-filename$5257$RATN9
     (case-lambda (() (clr-call-internal 'path 'getrandomfilename '()))))
   (g$get-temp-filename$5192$RATN9
     g$get-temp-filename$5258$RATN9
     (case-lambda (() (clr-call-internal 'path 'gettempfilename '()))))
   (g$get-temp-path$5193$RATN9
     g$get-temp-path$5259$RATN9
     (case-lambda (() (clr-call-internal 'path 'gettemppath '()))))
   (g$path-rooted?$5194$RATN9
     g$path-rooted?$5260$RATN9
     (case-lambda
       ((g$path$5233$RATN9)
        (clr-call-internal 'path 'ispathrooted '() g$path$5233$RATN9))))
   (g$path-has-extension?$5195$RATN9
     g$path-has-extension?$5261$RATN9
     (case-lambda
       ((g$path$5234$RATN9)
        (clr-call-internal 'path 'hasextension '() g$path$5234$RATN9))))
   (g$clear-usings$5197$RATN9
     g$clear-usings$5262$RATN9
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme lists)
  ((g$find$5263$RATN9
     g$find$5354$RATN9
     (case-lambda
       ((g$proc$5282$RATN9 g$l$5283$RATN9)
        (if (null? g$l$5283$RATN9)
          '#f
          ((case-lambda
             ((g$e$5284$RATN9)
              (if (g$proc$5282$RATN9 g$e$5284$RATN9)
                g$e$5284$RATN9
                (g$find$5263$RATN9 g$proc$5282$RATN9 (cdr g$l$5283$RATN9)))))
           (car g$l$5283$RATN9))))))
   (g$partition$5264$RATN9
     g$partition$5355$RATN9
     (case-lambda
       ((g$proc$5285$RATN9 g$l$5286$RATN9)
        ((letrec ((g$f$5287$RATN9
                    (case-lambda
                      ((g$l$5288$RATN9 g$a$5289$RATN9 g$b$5290$RATN9)
                       (if (null? g$l$5288$RATN9)
                         (values
                           (reverse! g$a$5289$RATN9)
                           (reverse! g$b$5290$RATN9))
                         ((case-lambda
                            ((g$e$5291$RATN9)
                             (if (g$proc$5285$RATN9 g$e$5291$RATN9)
                               (g$f$5287$RATN9
                                 (cdr g$l$5288$RATN9)
                                 (cons g$e$5291$RATN9 g$a$5289$RATN9)
                                 g$b$5290$RATN9)
                               (g$f$5287$RATN9
                                 (cdr g$l$5288$RATN9)
                                 g$a$5289$RATN9
                                 (cons g$e$5291$RATN9 g$b$5290$RATN9)))))
                          (car g$l$5288$RATN9)))))))
           g$f$5287$RATN9)
         g$l$5286$RATN9
         '()
         '()))))
   (g$remp$5265$RATN9
     g$remp$5356$RATN9
     (case-lambda
       ((g$proc$5292$RATN9 g$l$5293$RATN9)
        ((letrec ((g$f$5294$RATN9
                    (case-lambda
                      ((g$l$5295$RATN9 g$a$5296$RATN9)
                       (if (null? g$l$5295$RATN9)
                         (reverse! g$a$5296$RATN9)
                         ((case-lambda
                            ((g$e$5297$RATN9)
                             (if (g$proc$5292$RATN9 g$e$5297$RATN9)
                               (g$f$5294$RATN9
                                 (cdr g$l$5295$RATN9)
                                 g$a$5296$RATN9)
                               (g$f$5294$RATN9
                                 (cdr g$l$5295$RATN9)
                                 (cons g$e$5297$RATN9 g$a$5296$RATN9)))))
                          (car g$l$5295$RATN9)))))))
           g$f$5294$RATN9)
         g$l$5293$RATN9
         '()))))
   (g$filter$5266$RATN9
     g$filter$5357$RATN9
     (case-lambda
       ((g$proc$5298$RATN9 g$l$5299$RATN9)
        ((letrec ((g$f$5300$RATN9
                    (case-lambda
                      ((g$l$5301$RATN9 g$a$5302$RATN9)
                       (if (null? g$l$5301$RATN9)
                         (reverse! g$a$5302$RATN9)
                         ((case-lambda
                            ((g$e$5303$RATN9)
                             (if (g$proc$5298$RATN9 g$e$5303$RATN9)
                               (g$f$5300$RATN9
                                 (cdr g$l$5301$RATN9)
                                 (cons g$e$5303$RATN9 g$a$5302$RATN9))
                               (g$f$5300$RATN9
                                 (cdr g$l$5301$RATN9)
                                 g$a$5302$RATN9))))
                          (car g$l$5301$RATN9)))))))
           g$f$5300$RATN9)
         g$l$5299$RATN9
         '()))))
   (g$assv$5267$RATN9
     g$assv$5358$RATN9
     (case-lambda
       ((g$obj$5304$RATN9 g$lst$5305$RATN9)
        (if (null? g$lst$5305$RATN9)
          '#f
          ((case-lambda
             ((g$c$5306$RATN9)
              (if (eqv? g$obj$5304$RATN9 (car g$c$5306$RATN9))
                g$c$5306$RATN9
                (g$assv$5267$RATN9 g$obj$5304$RATN9 (cdr g$lst$5305$RATN9)))))
           (car g$lst$5305$RATN9))))))
   (g$assoc$5268$RATN9
     g$assoc$5359$RATN9
     (case-lambda
       ((g$obj$5307$RATN9 g$lst$5308$RATN9)
        (if (null? g$lst$5308$RATN9)
          '#f
          ((case-lambda
             ((g$c$5309$RATN9)
              (if (equal? g$obj$5307$RATN9 (car g$c$5309$RATN9))
                g$c$5309$RATN9
                (g$assoc$5268$RATN9 g$obj$5307$RATN9 (cdr g$lst$5308$RATN9)))))
           (car g$lst$5308$RATN9))))))
   (g$assp$5269$RATN9
     g$assp$5360$RATN9
     (case-lambda
       ((g$p?$5310$RATN9 g$lst$5311$RATN9)
        (if (null? g$lst$5311$RATN9)
          '#f
          ((case-lambda
             ((g$c$5312$RATN9)
              (if (g$p?$5310$RATN9 (car g$c$5312$RATN9))
                g$c$5312$RATN9
                (g$assp$5269$RATN9 g$p?$5310$RATN9 (cdr g$lst$5311$RATN9)))))
           (car g$lst$5311$RATN9))))))
   (g$member$5270$RATN9
     g$member$5361$RATN9
     (case-lambda
       ((g$obj$5313$RATN9 g$lst$5314$RATN9)
        (if (null? g$lst$5314$RATN9)
          '#f
          (if (equal? g$obj$5313$RATN9 (car g$lst$5314$RATN9))
            g$lst$5314$RATN9
            (g$member$5270$RATN9 g$obj$5313$RATN9 (cdr g$lst$5314$RATN9)))))))
   (g$memp$5271$RATN9
     g$memp$5362$RATN9
     (case-lambda
       ((g$p?$5315$RATN9 g$lst$5316$RATN9)
        (if (null? g$lst$5316$RATN9)
          '#f
          (if (g$p?$5315$RATN9 (car g$lst$5316$RATN9))
            g$lst$5316$RATN9
            (g$memp$5271$RATN9 g$p?$5315$RATN9 (cdr g$lst$5316$RATN9)))))))
   (g$all-empty?$5272$RATN9
     g$all-empty?$5363$RATN9
     (case-lambda
       ((g$ls$5317$RATN9)
        ((case-lambda
           ((g$t$5318$RATN9)
            (if g$t$5318$RATN9
              g$t$5318$RATN9
              (begin
                '#f
                (if (null? (car g$ls$5317$RATN9))
                  (begin '#f (g$all-empty?$5272$RATN9 (cdr g$ls$5317$RATN9)))
                  '#f)))))
         (null? g$ls$5317$RATN9)))))
   (g$split$5273$RATN9
     g$split$5364$RATN9
     (case-lambda
       ((g$ls$5319$RATN9)
        (if (null? g$ls$5319$RATN9)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$5273$RATN9 (cdr g$ls$5319$RATN9))))
            (case-lambda
              ((g$cars$5320$RATN9 g$cdrs$5321$RATN9)
               ((case-lambda
                  ((g$a$5322$RATN9)
                   (values
                     (cons (car g$a$5322$RATN9) g$cars$5320$RATN9)
                     (cons (cdr g$a$5322$RATN9) g$cdrs$5321$RATN9))))
                (car g$ls$5319$RATN9)))))))))
   (g$for-all$5274$RATN9
     g$for-all$5365$RATN9
     (case-lambda
       ((g$f$5323$RATN9 . g$args$5324$RATN9)
        (if (g$all-empty?$5272$RATN9 g$args$5324$RATN9)
          '#t
          (call-with-values
            (case-lambda (() (g$split$5273$RATN9 g$args$5324$RATN9)))
            (case-lambda
              ((g$cars$5325$RATN9 g$cdrs$5326$RATN9)
               (if (apply g$f$5323$RATN9 g$cars$5325$RATN9)
                 (begin
                   '#f
                   (apply
                     g$for-all$5274$RATN9
                     g$f$5323$RATN9
                     g$cdrs$5326$RATN9))
                 '#f))))))))
   (g$exists$5275$RATN9
     g$exists$5366$RATN9
     (case-lambda
       ((g$f$5327$RATN9 . g$args$5328$RATN9)
        (if (g$all-empty?$5272$RATN9 g$args$5328$RATN9)
          '#f
          (call-with-values
            (case-lambda (() (g$split$5273$RATN9 g$args$5328$RATN9)))
            (case-lambda
              ((g$cars$5329$RATN9 g$cdrs$5330$RATN9)
               ((case-lambda
                  ((g$t$5331$RATN9)
                   (if g$t$5331$RATN9
                     g$t$5331$RATN9
                     (begin
                       '#f
                       (apply
                         g$exists$5275$RATN9
                         g$f$5327$RATN9
                         g$cdrs$5330$RATN9)))))
                (apply g$f$5327$RATN9 g$cars$5329$RATN9)))))))))
   (g$cons*$5276$RATN9
     g$cons*$5367$RATN9
     (case-lambda
       ((g$a$5332$RATN9 . g$rest$5333$RATN9)
        ((letrec ((g$f$5334$RATN9
                    (case-lambda
                      ((g$a$5335$RATN9 g$rest$5336$RATN9)
                       (if (null? g$rest$5336$RATN9)
                         g$a$5335$RATN9
                         (cons
                           g$a$5335$RATN9
                           (g$f$5334$RATN9
                             (car g$rest$5336$RATN9)
                             (cdr g$rest$5336$RATN9))))))))
           g$f$5334$RATN9)
         g$a$5332$RATN9
         g$rest$5333$RATN9))))
   (g$fold-left$5277$RATN9
     g$fold-left$5368$RATN9
     (case-lambda
       ((g$combine$5337$RATN9
          g$nil$5338$RATN9
          g$list1$5339$RATN9
          .
          g$lists$5340$RATN9)
        (if (null? g$list1$5339$RATN9)
          g$nil$5338$RATN9
          (apply
            g$fold-left$5277$RATN9
            (g$cons*$5276$RATN9
              g$combine$5337$RATN9
              (apply
                g$combine$5337$RATN9
                (g$cons*$5276$RATN9
                  g$nil$5338$RATN9
                  (car g$list1$5339$RATN9)
                  (map car g$lists$5340$RATN9)))
              (cdr g$list1$5339$RATN9)
              (map cdr g$lists$5340$RATN9)))))))
   (g$fold-right$5278$RATN9
     g$fold-right$5369$RATN9
     (case-lambda
       ((g$combine$5341$RATN9
          g$nil$5342$RATN9
          g$list1$5343$RATN9
          .
          g$lists$5344$RATN9)
        (if (null? g$list1$5343$RATN9)
          g$nil$5342$RATN9
          (apply
            g$combine$5341$RATN9
            (append
              (list (car g$list1$5343$RATN9))
              (map car g$lists$5344$RATN9)
              (list
                (apply
                  g$fold-right$5278$RATN9
                  (g$cons*$5276$RATN9
                    g$combine$5341$RATN9
                    g$nil$5342$RATN9
                    (cdr g$list1$5343$RATN9)
                    (map cdr g$lists$5344$RATN9))))))))))
   (g$remove$5279$RATN9
     g$remove$5370$RATN9
     (case-lambda
       ((g$obj$5345$RATN9 g$list$5346$RATN9)
        (g$remp$5265$RATN9
          (case-lambda
            ((g$x$5347$RATN9) (equal? g$obj$5345$RATN9 g$x$5347$RATN9)))
          g$list$5346$RATN9))))
   (g$remv$5280$RATN9
     g$remv$5371$RATN9
     (case-lambda
       ((g$obj$5348$RATN9 g$list$5349$RATN9)
        (g$remp$5265$RATN9
          (case-lambda
            ((g$x$5350$RATN9) (eqv? g$obj$5348$RATN9 g$x$5350$RATN9)))
          g$list$5349$RATN9))))
   (g$remq$5281$RATN9
     g$remq$5372$RATN9
     (case-lambda
       ((g$obj$5351$RATN9 g$list$5352$RATN9)
        (g$remp$5265$RATN9
          (case-lambda ((g$x$5353$RATN9) (eq? g$obj$5351$RATN9 g$x$5353$RATN9)))
          g$list$5352$RATN9)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5373$RATN9
     g$native-endianness$5484$RATN9
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5374$RATN9
     g$bytevector-u16-ref$5485$RATN9
     (case-lambda
       ((g$bytevector$5402$RATN9 g$k$5403$RATN9 g$endianness$5404$RATN9)
        (bytevector-uint-ref
          g$bytevector$5402$RATN9
          g$k$5403$RATN9
          g$endianness$5404$RATN9
          '2))))
   (g$bytevector-s16-ref$5375$RATN9
     g$bytevector-s16-ref$5486$RATN9
     (case-lambda
       ((g$bytevector$5405$RATN9 g$k$5406$RATN9 g$endianness$5407$RATN9)
        (bytevector-sint-ref
          g$bytevector$5405$RATN9
          g$k$5406$RATN9
          g$endianness$5407$RATN9
          '2))))
   (g$bytevector-u16-native-ref$5376$RATN9
     g$bytevector-u16-native-ref$5487$RATN9
     (case-lambda
       ((g$bytevector$5408$RATN9 g$k$5409$RATN9)
        (bytevector-uint-ref
          g$bytevector$5408$RATN9
          g$k$5409$RATN9
          (g$native-endianness$5373$RATN9)
          '2))))
   (g$bytevector-s16-native-ref$5377$RATN9
     g$bytevector-s16-native-ref$5488$RATN9
     (case-lambda
       ((g$bytevector$5410$RATN9 g$k$5411$RATN9)
        (bytevector-sint-ref
          g$bytevector$5410$RATN9
          g$k$5411$RATN9
          (g$native-endianness$5373$RATN9)
          '2))))
   (g$bytevector-u16-set!$5378$RATN9
     g$bytevector-u16-set!$5489$RATN9
     (case-lambda
       ((g$bytevector$5412$RATN9
          g$k$5413$RATN9
          g$n$5414$RATN9
          g$endianness$5415$RATN9)
        (bytevector-uint-ref
          g$bytevector$5412$RATN9
          g$k$5413$RATN9
          g$endianness$5415$RATN9
          '2))))
   (g$bytevector-s16-set!$5379$RATN9
     g$bytevector-s16-set!$5490$RATN9
     (case-lambda
       ((g$bytevector$5416$RATN9
          g$k$5417$RATN9
          g$n$5418$RATN9
          g$endianness$5419$RATN9)
        (bytevector-sint-ref
          g$bytevector$5416$RATN9
          g$k$5417$RATN9
          g$endianness$5419$RATN9
          '2))))
   (g$bytevector-u16-native-set!$5380$RATN9
     g$bytevector-u16-native-set!$5491$RATN9
     (case-lambda
       ((g$bytevector$5420$RATN9 g$k$5421$RATN9 g$n$5422$RATN9)
        (bytevector-uint-ref
          g$bytevector$5420$RATN9
          g$k$5421$RATN9
          (g$native-endianness$5373$RATN9)
          '2))))
   (g$bytevector-s16-native-set!$5381$RATN9
     g$bytevector-s16-native-set!$5492$RATN9
     (case-lambda
       ((g$bytevector$5423$RATN9 g$k$5424$RATN9 g$n$5425$RATN9)
        (bytevector-sint-ref
          g$bytevector$5423$RATN9
          g$k$5424$RATN9
          (g$native-endianness$5373$RATN9)
          '2))))
   (g$bytevector-u32-ref$5382$RATN9
     g$bytevector-u32-ref$5493$RATN9
     (case-lambda
       ((g$bytevector$5426$RATN9 g$k$5427$RATN9 g$endianness$5428$RATN9)
        (bytevector-uint-ref
          g$bytevector$5426$RATN9
          g$k$5427$RATN9
          g$endianness$5428$RATN9
          '4))))
   (g$bytevector-s32-ref$5383$RATN9
     g$bytevector-s32-ref$5494$RATN9
     (case-lambda
       ((g$bytevector$5429$RATN9 g$k$5430$RATN9 g$endianness$5431$RATN9)
        (bytevector-sint-ref
          g$bytevector$5429$RATN9
          g$k$5430$RATN9
          g$endianness$5431$RATN9
          '4))))
   (g$bytevector-u32-native-ref$5384$RATN9
     g$bytevector-u32-native-ref$5495$RATN9
     (case-lambda
       ((g$bytevector$5432$RATN9 g$k$5433$RATN9)
        (bytevector-uint-ref
          g$bytevector$5432$RATN9
          g$k$5433$RATN9
          (g$native-endianness$5373$RATN9)
          '4))))
   (g$bytevector-s32-native-ref$5385$RATN9
     g$bytevector-s32-native-ref$5496$RATN9
     (case-lambda
       ((g$bytevector$5434$RATN9 g$k$5435$RATN9)
        (bytevector-sint-ref
          g$bytevector$5434$RATN9
          g$k$5435$RATN9
          (g$native-endianness$5373$RATN9)
          '4))))
   (g$bytevector-u32-set!$5386$RATN9
     g$bytevector-u32-set!$5497$RATN9
     (case-lambda
       ((g$bytevector$5436$RATN9
          g$k$5437$RATN9
          g$n$5438$RATN9
          g$endianness$5439$RATN9)
        (bytevector-uint-ref
          g$bytevector$5436$RATN9
          g$k$5437$RATN9
          g$endianness$5439$RATN9
          '4))))
   (g$bytevector-s32-set!$5387$RATN9
     g$bytevector-s32-set!$5498$RATN9
     (case-lambda
       ((g$bytevector$5440$RATN9
          g$k$5441$RATN9
          g$n$5442$RATN9
          g$endianness$5443$RATN9)
        (bytevector-sint-ref
          g$bytevector$5440$RATN9
          g$k$5441$RATN9
          g$endianness$5443$RATN9
          '4))))
   (g$bytevector-u32-native-set!$5388$RATN9
     g$bytevector-u32-native-set!$5499$RATN9
     (case-lambda
       ((g$bytevector$5444$RATN9 g$k$5445$RATN9 g$n$5446$RATN9)
        (bytevector-uint-ref
          g$bytevector$5444$RATN9
          g$k$5445$RATN9
          (g$native-endianness$5373$RATN9)
          '4))))
   (g$bytevector-s32-native-set!$5389$RATN9
     g$bytevector-s32-native-set!$5500$RATN9
     (case-lambda
       ((g$bytevector$5447$RATN9 g$k$5448$RATN9 g$n$5449$RATN9)
        (bytevector-sint-ref
          g$bytevector$5447$RATN9
          g$k$5448$RATN9
          (g$native-endianness$5373$RATN9)
          '4))))
   (g$bytevector-u64-ref$5390$RATN9
     g$bytevector-u64-ref$5501$RATN9
     (case-lambda
       ((g$bytevector$5450$RATN9 g$k$5451$RATN9 g$endianness$5452$RATN9)
        (bytevector-uint-ref
          g$bytevector$5450$RATN9
          g$k$5451$RATN9
          g$endianness$5452$RATN9
          '8))))
   (g$bytevector-s64-ref$5391$RATN9
     g$bytevector-s64-ref$5502$RATN9
     (case-lambda
       ((g$bytevector$5453$RATN9 g$k$5454$RATN9 g$endianness$5455$RATN9)
        (bytevector-sint-ref
          g$bytevector$5453$RATN9
          g$k$5454$RATN9
          g$endianness$5455$RATN9
          '8))))
   (g$bytevector-u64-native-ref$5392$RATN9
     g$bytevector-u64-native-ref$5503$RATN9
     (case-lambda
       ((g$bytevector$5456$RATN9 g$k$5457$RATN9)
        (bytevector-uint-ref
          g$bytevector$5456$RATN9
          g$k$5457$RATN9
          (g$native-endianness$5373$RATN9)
          '8))))
   (g$bytevector-s64-native-ref$5393$RATN9
     g$bytevector-s64-native-ref$5504$RATN9
     (case-lambda
       ((g$bytevector$5458$RATN9 g$k$5459$RATN9)
        (bytevector-sint-ref
          g$bytevector$5458$RATN9
          g$k$5459$RATN9
          (g$native-endianness$5373$RATN9)
          '8))))
   (g$bytevector-u64-set!$5394$RATN9
     g$bytevector-u64-set!$5505$RATN9
     (case-lambda
       ((g$bytevector$5460$RATN9
          g$k$5461$RATN9
          g$n$5462$RATN9
          g$endianness$5463$RATN9)
        (bytevector-uint-ref
          g$bytevector$5460$RATN9
          g$k$5461$RATN9
          g$endianness$5463$RATN9
          '8))))
   (g$bytevector-s64-set!$5395$RATN9
     g$bytevector-s64-set!$5506$RATN9
     (case-lambda
       ((g$bytevector$5464$RATN9
          g$k$5465$RATN9
          g$n$5466$RATN9
          g$endianness$5467$RATN9)
        (bytevector-sint-ref
          g$bytevector$5464$RATN9
          g$k$5465$RATN9
          g$endianness$5467$RATN9
          '8))))
   (g$bytevector-u64-native-set!$5396$RATN9
     g$bytevector-u64-native-set!$5507$RATN9
     (case-lambda
       ((g$bytevector$5468$RATN9 g$k$5469$RATN9 g$n$5470$RATN9)
        (bytevector-uint-ref
          g$bytevector$5468$RATN9
          g$k$5469$RATN9
          (g$native-endianness$5373$RATN9)
          '8))))
   (g$bytevector-s64-native-set!$5397$RATN9
     g$bytevector-s64-native-set!$5508$RATN9
     (case-lambda
       ((g$bytevector$5471$RATN9 g$k$5472$RATN9 g$n$5473$RATN9)
        (bytevector-sint-ref
          g$bytevector$5471$RATN9
          g$k$5472$RATN9
          (g$native-endianness$5373$RATN9)
          '8))))
   (g$bytevector-ieee-single-native-ref$5398$RATN9
     g$bytevector-ieee-single-native-ref$5509$RATN9
     (case-lambda
       ((g$bytevector$5474$RATN9 g$k$5475$RATN9)
        (bytevector-ieee-single-ref
          g$bytevector$5474$RATN9
          g$k$5475$RATN9
          (g$native-endianness$5373$RATN9)))))
   (g$bytevector-ieee-double-native-ref$5399$RATN9
     g$bytevector-ieee-double-native-ref$5510$RATN9
     (case-lambda
       ((g$bytevector$5476$RATN9 g$k$5477$RATN9)
        (bytevector-ieee-double-ref
          g$bytevector$5476$RATN9
          g$k$5477$RATN9
          (g$native-endianness$5373$RATN9)))))
   (g$bytevector-ieee-single-native-set!$5400$RATN9
     g$bytevector-ieee-single-native-set!$5511$RATN9
     (case-lambda
       ((g$bytevector$5478$RATN9 g$k$5479$RATN9 g$x$5480$RATN9)
        (bytevector-ieee-single-set!
          g$bytevector$5478$RATN9
          g$k$5479$RATN9
          g$x$5480$RATN9
          (g$native-endianness$5373$RATN9)))))
   (g$bytevector-ieee-double-native-set!$5401$RATN9
     g$bytevector-ieee-double-native-set!$5512$RATN9
     (case-lambda
       ((g$bytevector$5481$RATN9 g$k$5482$RATN9 g$x$5483$RATN9)
        (bytevector-ieee-double-set!
          g$bytevector$5481$RATN9
          g$k$5482$RATN9
          g$x$5483$RATN9
          (g$native-endianness$5373$RATN9))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme enums) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6290$5513$RATN9
     g$6290$5608$RATN9
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6293$RATN9
       '#f
       '#f
       '#()))
   (g$6292$5514$RATN9 g$6292$5609$RATN9 '#f)
   (g$6291$5515$RATN9
     g$6291$5610$RATN9
     (make-record-constructor-descriptor
       g$6290$5513$RATN9
       '#f
       g$6292$5514$RATN9))
   (g$&condition?$5516$RATN9
     g$&condition?$5611$RATN9
     (record-predicate g$6290$5513$RATN9))
   (g$make-&condition$5517$RATN9
     g$make-&condition$5612$RATN9
     (record-constructor g$6291$5515$RATN9))
   (g$&condition-rtd$5518$RATN9
     g$&condition-rtd$5613$RATN9
     g$6290$5513$RATN9)
   (g$&condition-rcd$5519$RATN9
     g$&condition-rcd$5614$RATN9
     g$6291$5515$RATN9)
   (g$6306$5520$RATN9
     g$6306$5615$RATN9
     (make-record-type-descriptor
       '&message
       g$6290$5513$RATN9
       'g$6309$RATN9
       '#f
       '#f
       '#((immutable message))))
   (g$6308$5521$RATN9 g$6308$5616$RATN9 '#f)
   (g$6307$5522$RATN9
     g$6307$5617$RATN9
     (make-record-constructor-descriptor
       g$6306$5520$RATN9
       g$6291$5515$RATN9
       g$6308$5521$RATN9))
   (g$6305$5523$RATN9
     g$6305$5618$RATN9
     (record-predicate g$6306$5520$RATN9))
   (g$make-message-condition$5524$RATN9
     g$make-message-condition$5619$RATN9
     (record-constructor g$6307$5522$RATN9))
   (g$6304$5525$RATN9
     g$6304$5620$RATN9
     (record-accessor g$6306$5520$RATN9 '0))
   (g$message-condition?$5526$RATN9
     g$message-condition?$5621$RATN9
     (condition-predicate g$6306$5520$RATN9))
   (g$condition-message$5527$RATN9
     g$condition-message$5622$RATN9
     (condition-accessor g$6306$5520$RATN9 g$6304$5525$RATN9))
   (g$6322$5528$RATN9
     g$6322$5623$RATN9
     (make-record-type-descriptor
       '&warning
       g$6290$5513$RATN9
       'g$6325$RATN9
       '#f
       '#f
       '#()))
   (g$6324$5529$RATN9 g$6324$5624$RATN9 '#f)
   (g$6323$5530$RATN9
     g$6323$5625$RATN9
     (make-record-constructor-descriptor
       g$6322$5528$RATN9
       g$6291$5515$RATN9
       g$6324$5529$RATN9))
   (g$6321$5531$RATN9
     g$6321$5626$RATN9
     (record-predicate g$6322$5528$RATN9))
   (g$make-warning$5532$RATN9
     g$make-warning$5627$RATN9
     (record-constructor g$6323$5530$RATN9))
   (g$warning?$5533$RATN9
     g$warning?$5628$RATN9
     (condition-predicate g$6322$5528$RATN9))
   (g$6336$5534$RATN9
     g$6336$5629$RATN9
     (make-record-type-descriptor
       '&serious
       g$6290$5513$RATN9
       'g$6339$RATN9
       '#f
       '#f
       '#()))
   (g$6338$5535$RATN9 g$6338$5630$RATN9 '#f)
   (g$6337$5536$RATN9
     g$6337$5631$RATN9
     (make-record-constructor-descriptor
       g$6336$5534$RATN9
       g$6291$5515$RATN9
       g$6338$5535$RATN9))
   (g$6335$5537$RATN9
     g$6335$5632$RATN9
     (record-predicate g$6336$5534$RATN9))
   (g$make-serious-condition$5538$RATN9
     g$make-serious-condition$5633$RATN9
     (record-constructor g$6337$5536$RATN9))
   (g$serious-condition?$5539$RATN9
     g$serious-condition?$5634$RATN9
     (condition-predicate g$6336$5534$RATN9))
   (g$6350$5540$RATN9
     g$6350$5635$RATN9
     (make-record-type-descriptor
       '&error
       g$6336$5534$RATN9
       'g$6353$RATN9
       '#f
       '#f
       '#()))
   (g$6352$5541$RATN9 g$6352$5636$RATN9 '#f)
   (g$6351$5542$RATN9
     g$6351$5637$RATN9
     (make-record-constructor-descriptor
       g$6350$5540$RATN9
       g$6337$5536$RATN9
       g$6352$5541$RATN9))
   (g$6349$5543$RATN9
     g$6349$5638$RATN9
     (record-predicate g$6350$5540$RATN9))
   (g$make-error$5544$RATN9
     g$make-error$5639$RATN9
     (record-constructor g$6351$5542$RATN9))
   (g$error?$5545$RATN9
     g$error?$5640$RATN9
     (condition-predicate g$6350$5540$RATN9))
   (g$6364$5546$RATN9
     g$6364$5641$RATN9
     (make-record-type-descriptor
       '&violation
       g$6336$5534$RATN9
       'g$6367$RATN9
       '#f
       '#f
       '#()))
   (g$6366$5547$RATN9 g$6366$5642$RATN9 '#f)
   (g$6365$5548$RATN9
     g$6365$5643$RATN9
     (make-record-constructor-descriptor
       g$6364$5546$RATN9
       g$6337$5536$RATN9
       g$6366$5547$RATN9))
   (g$6363$5549$RATN9
     g$6363$5644$RATN9
     (record-predicate g$6364$5546$RATN9))
   (g$make-violation$5550$RATN9
     g$make-violation$5645$RATN9
     (record-constructor g$6365$5548$RATN9))
   (g$violation?$5551$RATN9
     g$violation?$5646$RATN9
     (condition-predicate g$6364$5546$RATN9))
   (g$6378$5552$RATN9
     g$6378$5647$RATN9
     (make-record-type-descriptor
       '&assertion
       g$6364$5546$RATN9
       'g$6381$RATN9
       '#f
       '#f
       '#()))
   (g$6380$5553$RATN9 g$6380$5648$RATN9 '#f)
   (g$6379$5554$RATN9
     g$6379$5649$RATN9
     (make-record-constructor-descriptor
       g$6378$5552$RATN9
       g$6365$5548$RATN9
       g$6380$5553$RATN9))
   (g$6377$5555$RATN9
     g$6377$5650$RATN9
     (record-predicate g$6378$5552$RATN9))
   (g$make-assertion-violation$5556$RATN9
     g$make-assertion-violation$5651$RATN9
     (record-constructor g$6379$5554$RATN9))
   (g$assertion-violation?$5557$RATN9
     g$assertion-violation?$5652$RATN9
     (condition-predicate g$6378$5552$RATN9))
   (g$6393$5558$RATN9
     g$6393$5653$RATN9
     (make-record-type-descriptor
       '&irritants
       g$6290$5513$RATN9
       'g$6396$RATN9
       '#f
       '#f
       '#((immutable irritants))))
   (g$6395$5559$RATN9 g$6395$5654$RATN9 '#f)
   (g$6394$5560$RATN9
     g$6394$5655$RATN9
     (make-record-constructor-descriptor
       g$6393$5558$RATN9
       g$6291$5515$RATN9
       g$6395$5559$RATN9))
   (g$6392$5561$RATN9
     g$6392$5656$RATN9
     (record-predicate g$6393$5558$RATN9))
   (g$make-irritants-condition$5562$RATN9
     g$make-irritants-condition$5657$RATN9
     (record-constructor g$6394$5560$RATN9))
   (g$6391$5563$RATN9
     g$6391$5658$RATN9
     (record-accessor g$6393$5558$RATN9 '0))
   (g$irritants-condition?$5564$RATN9
     g$irritants-condition?$5659$RATN9
     (condition-predicate g$6393$5558$RATN9))
   (g$condition-irritants$5565$RATN9
     g$condition-irritants$5660$RATN9
     (condition-accessor g$6393$5558$RATN9 g$6391$5563$RATN9))
   (g$6410$5566$RATN9
     g$6410$5661$RATN9
     (make-record-type-descriptor
       '&who
       g$6290$5513$RATN9
       'g$6413$RATN9
       '#f
       '#f
       '#((immutable who))))
   (g$6412$5567$RATN9 g$6412$5662$RATN9 '#f)
   (g$6411$5568$RATN9
     g$6411$5663$RATN9
     (make-record-constructor-descriptor
       g$6410$5566$RATN9
       g$6291$5515$RATN9
       g$6412$5567$RATN9))
   (g$6409$5569$RATN9
     g$6409$5664$RATN9
     (record-predicate g$6410$5566$RATN9))
   (g$make-who-condition$5570$RATN9
     g$make-who-condition$5665$RATN9
     (record-constructor g$6411$5568$RATN9))
   (g$6408$5571$RATN9
     g$6408$5666$RATN9
     (record-accessor g$6410$5566$RATN9 '0))
   (g$who-condition?$5572$RATN9
     g$who-condition?$5667$RATN9
     (condition-predicate g$6410$5566$RATN9))
   (g$condition-who$5573$RATN9
     g$condition-who$5668$RATN9
     (condition-accessor g$6410$5566$RATN9 g$6408$5571$RATN9))
   (g$6426$5574$RATN9
     g$6426$5669$RATN9
     (make-record-type-descriptor
       '&non-continuable
       g$6364$5546$RATN9
       'g$6429$RATN9
       '#f
       '#f
       '#()))
   (g$6428$5575$RATN9 g$6428$5670$RATN9 '#f)
   (g$6427$5576$RATN9
     g$6427$5671$RATN9
     (make-record-constructor-descriptor
       g$6426$5574$RATN9
       g$6365$5548$RATN9
       g$6428$5575$RATN9))
   (g$6425$5577$RATN9
     g$6425$5672$RATN9
     (record-predicate g$6426$5574$RATN9))
   (g$make-non-continuable-violation$5578$RATN9
     g$make-non-continuable-violation$5673$RATN9
     (record-constructor g$6427$5576$RATN9))
   (g$non-continuable-violation?$5579$RATN9
     g$non-continuable-violation?$5674$RATN9
     (condition-predicate g$6426$5574$RATN9))
   (g$6440$5580$RATN9
     g$6440$5675$RATN9
     (make-record-type-descriptor
       '&implementation-restriction
       g$6364$5546$RATN9
       'g$6443$RATN9
       '#f
       '#f
       '#()))
   (g$6442$5581$RATN9 g$6442$5676$RATN9 '#f)
   (g$6441$5582$RATN9
     g$6441$5677$RATN9
     (make-record-constructor-descriptor
       g$6440$5580$RATN9
       g$6365$5548$RATN9
       g$6442$5581$RATN9))
   (g$6439$5583$RATN9
     g$6439$5678$RATN9
     (record-predicate g$6440$5580$RATN9))
   (g$make-implementation-restriction-violation$5584$RATN9
     g$make-implementation-restriction-violation$5679$RATN9
     (record-constructor g$6441$5582$RATN9))
   (g$implementation-restriction-violation?$5585$RATN9
     g$implementation-restriction-violation?$5680$RATN9
     (condition-predicate g$6440$5580$RATN9))
   (g$6454$5586$RATN9
     g$6454$5681$RATN9
     (make-record-type-descriptor
       '&lexical
       g$6364$5546$RATN9
       'g$6457$RATN9
       '#f
       '#f
       '#()))
   (g$6456$5587$RATN9 g$6456$5682$RATN9 '#f)
   (g$6455$5588$RATN9
     g$6455$5683$RATN9
     (make-record-constructor-descriptor
       g$6454$5586$RATN9
       g$6365$5548$RATN9
       g$6456$5587$RATN9))
   (g$6453$5589$RATN9
     g$6453$5684$RATN9
     (record-predicate g$6454$5586$RATN9))
   (g$make-lexical-violation$5590$RATN9
     g$make-lexical-violation$5685$RATN9
     (record-constructor g$6455$5588$RATN9))
   (g$lexical-violation?$5591$RATN9
     g$lexical-violation?$5686$RATN9
     (condition-predicate g$6454$5586$RATN9))
   (g$6470$5592$RATN9
     g$6470$5687$RATN9
     (make-record-type-descriptor
       '&syntax
       g$6364$5546$RATN9
       'g$6473$RATN9
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6472$5593$RATN9 g$6472$5688$RATN9 '#f)
   (g$6471$5594$RATN9
     g$6471$5689$RATN9
     (make-record-constructor-descriptor
       g$6470$5592$RATN9
       g$6365$5548$RATN9
       g$6472$5593$RATN9))
   (g$6469$5595$RATN9
     g$6469$5690$RATN9
     (record-predicate g$6470$5592$RATN9))
   (g$make-syntax-violation$5596$RATN9
     g$make-syntax-violation$5691$RATN9
     (record-constructor g$6471$5594$RATN9))
   (g$6467$5597$RATN9
     g$6467$5692$RATN9
     (record-accessor g$6470$5592$RATN9 '0))
   (g$6468$5598$RATN9
     g$6468$5693$RATN9
     (record-accessor g$6470$5592$RATN9 '1))
   (g$syntax-violation?$5599$RATN9
     g$syntax-violation?$5694$RATN9
     (condition-predicate g$6470$5592$RATN9))
   (g$syntax-violation-form$5600$RATN9
     g$syntax-violation-form$5695$RATN9
     (condition-accessor g$6470$5592$RATN9 g$6467$5597$RATN9))
   (g$syntax-violation-subform$5601$RATN9
     g$syntax-violation-subform$5696$RATN9
     (condition-accessor g$6470$5592$RATN9 g$6468$5598$RATN9))
   (g$6488$5602$RATN9
     g$6488$5697$RATN9
     (make-record-type-descriptor
       '&undefined
       g$6364$5546$RATN9
       'g$6491$RATN9
       '#f
       '#f
       '#()))
   (g$6490$5603$RATN9 g$6490$5698$RATN9 '#f)
   (g$6489$5604$RATN9
     g$6489$5699$RATN9
     (make-record-constructor-descriptor
       g$6488$5602$RATN9
       g$6365$5548$RATN9
       g$6490$5603$RATN9))
   (g$6487$5605$RATN9
     g$6487$5700$RATN9
     (record-predicate g$6488$5602$RATN9))
   (g$make-undefined-violation$5606$RATN9
     g$make-undefined-violation$5701$RATN9
     (record-constructor g$6489$5604$RATN9))
   (g$undefined-violation?$5607$RATN9
     g$undefined-violation?$5702$RATN9
     (condition-predicate g$6488$5602$RATN9)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5703$RATN9
     g$append!$5709$RATN9
     (case-lambda
       ((g$a$5704$RATN9 . g$b$5705$RATN9)
        (if (null? g$a$5704$RATN9)
          g$b$5705$RATN9
          (if (null? g$b$5705$RATN9)
            g$a$5704$RATN9
            (begin
              ((letrec ((g$f$5706$RATN9
                          (case-lambda
                            ((g$a$5707$RATN9)
                             ((case-lambda
                                ((g$n$5708$RATN9)
                                 (if (null? g$n$5708$RATN9)
                                   (set-cdr! g$a$5707$RATN9 g$b$5705$RATN9)
                                   (g$f$5706$RATN9 g$n$5708$RATN9))))
                              (cdr g$a$5707$RATN9))))))
                 g$f$5706$RATN9)
               g$a$5704$RATN9)
              g$a$5704$RATN9)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$5710$RATN9
     g$sign$5721$RATN9
     (case-lambda
       ((g$n$5714$RATN9)
        (if (> g$n$5714$RATN9 '0) '1 (if (< g$n$5714$RATN9 '0) '-1 '0)))))
   (g$quotient$5711$RATN9
     g$quotient$5722$RATN9
     (case-lambda
       ((g$n1$5715$RATN9 g$n2$5716$RATN9)
        (* (g$sign$5710$RATN9 g$n1$5715$RATN9)
           (g$sign$5710$RATN9 g$n2$5716$RATN9)
           (div (abs g$n1$5715$RATN9) (abs g$n2$5716$RATN9))))))
   (g$remainder$5712$RATN9
     g$remainder$5723$RATN9
     (case-lambda
       ((g$n1$5717$RATN9 g$n2$5718$RATN9)
        (* (g$sign$5710$RATN9 g$n1$5717$RATN9)
           (mod (abs g$n1$5717$RATN9) (abs g$n2$5718$RATN9))))))
   (g$modulo$5713$RATN9
     g$modulo$5724$RATN9
     (case-lambda
       ((g$n1$5719$RATN9 g$n2$5720$RATN9)
        (* (g$sign$5710$RATN9 g$n2$5720$RATN9)
           (mod (* (g$sign$5710$RATN9 g$n2$5720$RATN9) g$n1$5719$RATN9)
                (abs g$n2$5720$RATN9)))))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5725$RATN9
     g$split$5751$RATN9
     (case-lambda
       ((g$ls$5728$RATN9)
        ((letrec ((g$loop$5729$RATN9
                    (case-lambda
                      ((g$rest$5730$RATN9 g$left$5731$RATN9 g$right$5732$RATN9)
                       (if (null? g$rest$5730$RATN9)
                         (cons g$left$5731$RATN9 g$right$5732$RATN9)
                         (if (null? (cdr g$rest$5730$RATN9))
                           (cons
                             (cons (car g$rest$5730$RATN9) g$left$5731$RATN9)
                             g$right$5732$RATN9)
                           (g$loop$5729$RATN9
                             (g$cddr$4898$RATN9 g$rest$5730$RATN9)
                             (cons (car g$rest$5730$RATN9) g$left$5731$RATN9)
                             (cons
                               (g$cadr$4896$RATN9 g$rest$5730$RATN9)
                               g$right$5732$RATN9))))))))
           g$loop$5729$RATN9)
         g$ls$5728$RATN9
         '()
         '()))))
   (g$reverse-it$5726$RATN9
     g$reverse-it$5752$RATN9
     (case-lambda
       ((g$head$5733$RATN9 g$tail$5734$RATN9)
        (if (null? g$head$5733$RATN9)
          g$tail$5734$RATN9
          ((case-lambda
             ((g$hd$5735$RATN9 g$tl$5736$RATN9)
              (g$reverse-it$5726$RATN9
                g$tl$5736$RATN9
                (cons g$hd$5735$RATN9 g$tail$5734$RATN9))))
           (car g$head$5733$RATN9)
           (cdr g$head$5733$RATN9))))))
   (g$list-sort$5727$RATN9
     g$list-sort$5753$RATN9
     (case-lambda
       ((g$precedes?$5737$RATN9 g$ls$5738$RATN9)
        ((case-lambda
           ((g$merge$5739$RATN9)
            ((case-lambda
               (()
                (if (null? g$ls$5738$RATN9)
                  '()
                  ((letrec ((g$helper$5740$RATN9
                              (case-lambda
                                ((g$piece$5741$RATN9)
                                 (if (null? (cdr g$piece$5741$RATN9))
                                   g$piece$5741$RATN9
                                   ((case-lambda
                                      ((g$parts$5742$RATN9)
                                       (g$merge$5739$RATN9
                                         (g$helper$5740$RATN9
                                           (car g$parts$5742$RATN9))
                                         (g$helper$5740$RATN9
                                           (cdr g$parts$5742$RATN9)))))
                                    (g$split$5725$RATN9
                                      g$piece$5741$RATN9)))))))
                     g$helper$5740$RATN9)
                   g$ls$5738$RATN9)))))))
         (case-lambda
           ((g$list-1$5743$RATN9 g$list-2$5744$RATN9)
            ((letrec ((g$loop$5745$RATN9
                        (case-lambda
                          ((g$source-1$5746$RATN9
                             g$source-2$5747$RATN9
                             g$so-far$5748$RATN9)
                           (if (null? g$source-1$5746$RATN9)
                             (g$reverse-it$5726$RATN9
                               g$so-far$5748$RATN9
                               g$source-2$5747$RATN9)
                             (if (null? g$source-2$5747$RATN9)
                               (g$reverse-it$5726$RATN9
                                 g$so-far$5748$RATN9
                                 g$source-1$5746$RATN9)
                               ((case-lambda
                                  ((g$car-1$5749$RATN9 g$car-2$5750$RATN9)
                                   (if (g$precedes?$5737$RATN9
                                         g$car-2$5750$RATN9
                                         g$car-1$5749$RATN9)
                                     (g$loop$5745$RATN9
                                       g$source-1$5746$RATN9
                                       (cdr g$source-2$5747$RATN9)
                                       (cons
                                         g$car-2$5750$RATN9
                                         g$so-far$5748$RATN9))
                                     (g$loop$5745$RATN9
                                       g$source-2$5747$RATN9
                                       (cdr g$source-1$5746$RATN9)
                                       (cons
                                         g$car-1$5749$RATN9
                                         g$so-far$5748$RATN9)))))
                                (car g$source-1$5746$RATN9)
                                (car g$source-2$5747$RATN9))))))))
               g$loop$5745$RATN9)
             g$list-1$5743$RATN9
             g$list-2$5744$RATN9
             '()))))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode) () (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$5791$RATN9
     g$bitwise-if$5842$RATN9
     (case-lambda
       ((g$ei1$5799$RATN9 g$ei2$5800$RATN9 g$ei3$5801$RATN9)
        (bitwise-ior
          (bitwise-and g$ei1$5799$RATN9 g$ei2$5800$RATN9)
          (bitwise-and (bitwise-not g$ei1$5799$RATN9) g$ei3$5801$RATN9)))))
   (g$bitwise-copy-bit$5792$RATN9
     g$bitwise-copy-bit$5843$RATN9
     (case-lambda
       ((g$ei1$5802$RATN9 g$ei2$5803$RATN9 g$ei3$5804$RATN9)
        ((case-lambda
           ((g$mask$5805$RATN9)
            ((case-lambda
               (()
                (g$bitwise-if$5791$RATN9
                  g$mask$5805$RATN9
                  (g$bitwise-arithmetic-shift-left$5795$RATN9
                    g$ei3$5804$RATN9
                    g$ei2$5803$RATN9)
                  g$ei1$5802$RATN9))))))
         (g$bitwise-arithmetic-shift-left$5795$RATN9 '1 g$ei2$5803$RATN9)))))
   (g$bitwise-bit-field$5793$RATN9
     g$bitwise-bit-field$5844$RATN9
     (case-lambda
       ((g$ei1$5806$RATN9 g$ei2$5807$RATN9 g$ei3$5808$RATN9)
        ((case-lambda
           ((g$mask$5809$RATN9)
            (g$bitwise-arithmetic-shift-right$5796$RATN9
              (bitwise-and g$ei1$5806$RATN9 g$mask$5809$RATN9)
              g$ei2$5807$RATN9)))
         (bitwise-not
           (g$bitwise-arithmetic-shift-left$5795$RATN9
             '-1
             g$ei3$5808$RATN9))))))
   (g$bitwise-copy-bit-field$5794$RATN9
     g$bitwise-copy-bit-field$5845$RATN9
     (case-lambda
       ((g$ei1$5810$RATN9 g$ei2$5811$RATN9 g$ei3$5812$RATN9 g$ei4$5813$RATN9)
        ((case-lambda
           ((g$to$5814$RATN9)
            ((case-lambda
               ((g$start$5815$RATN9)
                ((case-lambda
                   ((g$end$5816$RATN9)
                    ((case-lambda
                       ((g$from$5817$RATN9)
                        ((case-lambda
                           ((g$mask1$5818$RATN9)
                            ((case-lambda
                               ((g$mask2$5819$RATN9)
                                ((case-lambda
                                   ((g$mask$5820$RATN9)
                                    ((case-lambda
                                       (()
                                        (g$bitwise-if$5791$RATN9
                                          g$mask$5820$RATN9
                                          (g$bitwise-arithmetic-shift-left$5795$RATN9
                                            g$from$5817$RATN9
                                            g$start$5815$RATN9)
                                          g$to$5814$RATN9))))))
                                 (bitwise-and
                                   g$mask1$5818$RATN9
                                   g$mask2$5819$RATN9))))
                             (bitwise-not
                               (g$bitwise-arithmetic-shift-left$5795$RATN9
                                 '-1
                                 g$end$5816$RATN9)))))
                         (g$bitwise-arithmetic-shift-left$5795$RATN9
                           '-1
                           g$start$5815$RATN9))))
                     g$ei4$5813$RATN9)))
                 g$ei3$5812$RATN9)))
             g$ei2$5811$RATN9)))
         g$ei1$5810$RATN9))))
   (g$bitwise-arithmetic-shift-left$5795$RATN9
     g$bitwise-arithmetic-shift-left$5846$RATN9
     (case-lambda
       ((g$ei1$5821$RATN9 g$ei2$5822$RATN9)
        (bitwise-arithmetic-shift g$ei1$5821$RATN9 g$ei2$5822$RATN9))))
   (g$bitwise-arithmetic-shift-right$5796$RATN9
     g$bitwise-arithmetic-shift-right$5847$RATN9
     (case-lambda
       ((g$ei1$5823$RATN9 g$ei2$5824$RATN9)
        (bitwise-arithmetic-shift g$ei1$5823$RATN9 (- g$ei2$5824$RATN9)))))
   (g$bitwise-rotate-bit-field$5797$RATN9
     g$bitwise-rotate-bit-field$5848$RATN9
     (case-lambda
       ((g$ei1$5825$RATN9 g$ei2$5826$RATN9 g$ei3$5827$RATN9 g$ei4$5828$RATN9)
        ((case-lambda
           ((g$n$5829$RATN9)
            ((case-lambda
               ((g$start$5830$RATN9)
                ((case-lambda
                   ((g$end$5831$RATN9)
                    ((case-lambda
                       ((g$count$5832$RATN9)
                        ((case-lambda
                           ((g$width$5833$RATN9)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5833$RATN9)
                                  ((case-lambda
                                     ((g$count$5834$RATN9)
                                      ((case-lambda
                                         ((g$field0$5835$RATN9)
                                          ((case-lambda
                                             ((g$field1$5836$RATN9)
                                              ((case-lambda
                                                 ((g$field2$5837$RATN9)
                                                  ((case-lambda
                                                     ((g$field$5838$RATN9)
                                                      ((case-lambda
                                                         (()
                                                          (g$bitwise-copy-bit-field$5794$RATN9
                                                            g$n$5829$RATN9
                                                            g$start$5830$RATN9
                                                            g$end$5831$RATN9
                                                            g$field$5838$RATN9))))))
                                                   (bitwise-ior
                                                     g$field1$5836$RATN9
                                                     g$field2$5837$RATN9))))
                                               (g$bitwise-arithmetic-shift-right$5796$RATN9
                                                 g$field0$5835$RATN9
                                                 (- g$width$5833$RATN9
                                                    g$count$5834$RATN9)))))
                                           (g$bitwise-arithmetic-shift-left$5795$RATN9
                                             g$field0$5835$RATN9
                                             g$count$5834$RATN9))))
                                       (g$bitwise-bit-field$5793$RATN9
                                         g$n$5829$RATN9
                                         g$start$5830$RATN9
                                         g$end$5831$RATN9))))
                                   (mod g$count$5832$RATN9 g$width$5833$RATN9))
                                  g$n$5829$RATN9))))))
                         (- g$end$5831$RATN9 g$start$5830$RATN9))))
                     g$ei4$5828$RATN9)))
                 g$ei3$5827$RATN9)))
             g$ei2$5826$RATN9)))
         g$ei1$5825$RATN9))))
   (g$bitwise-reverse-bit-field$5798$RATN9
     g$bitwise-reverse-bit-field$5849$RATN9
     (case-lambda
       ((g$ei1$5839$RATN9 g$ei2$5840$RATN9 g$ei3$5841$RATN9) 'TODO))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxif$5850$RATN9
     g$fxif$5897$RATN9
     (case-lambda
       ((g$fx1$5857$RATN9 g$fx2$5858$RATN9 g$fx3$5859$RATN9)
        (fxior
          (fxand g$fx1$5857$RATN9 g$fx2$5858$RATN9)
          (fxand (fxnot g$fx1$5857$RATN9) g$fx3$5859$RATN9)))))
   (g$fxcopy-bit$5851$RATN9
     g$fxcopy-bit$5898$RATN9
     (case-lambda
       ((g$fx1$5860$RATN9 g$fx2$5861$RATN9 g$fx3$5862$RATN9)
        ((case-lambda
           ((g$mask$5863$RATN9)
            ((case-lambda
               (()
                (g$fxif$5850$RATN9
                  g$mask$5863$RATN9
                  (g$fxarithmetic-shift-left$5854$RATN9
                    g$fx3$5862$RATN9
                    g$fx2$5861$RATN9)
                  g$fx1$5860$RATN9))))))
         (g$fxarithmetic-shift-left$5854$RATN9 '1 g$fx2$5861$RATN9)))))
   (g$fxbit-field$5852$RATN9
     g$fxbit-field$5899$RATN9
     (case-lambda
       ((g$fx1$5864$RATN9 g$fx2$5865$RATN9 g$fx3$5866$RATN9)
        ((case-lambda
           ((g$mask$5867$RATN9)
            ((case-lambda
               (()
                (g$fxarithmetic-shift-right$5855$RATN9
                  (fxand g$fx1$5864$RATN9 g$mask$5867$RATN9)
                  g$fx2$5865$RATN9))))))
         (fxnot (g$fxarithmetic-shift-left$5854$RATN9 '-1 g$fx3$5866$RATN9))))))
   (g$fxcopy-bit-field$5853$RATN9
     g$fxcopy-bit-field$5900$RATN9
     (case-lambda
       ((g$fx1$5868$RATN9 g$fx2$5869$RATN9 g$fx3$5870$RATN9 g$fx4$5871$RATN9)
        ((case-lambda
           ((g$to$5872$RATN9)
            ((case-lambda
               ((g$start$5873$RATN9)
                ((case-lambda
                   ((g$end$5874$RATN9)
                    ((case-lambda
                       ((g$from$5875$RATN9)
                        ((case-lambda
                           ((g$mask1$5876$RATN9)
                            ((case-lambda
                               ((g$mask2$5877$RATN9)
                                ((case-lambda
                                   ((g$mask$5878$RATN9)
                                    ((case-lambda
                                       (()
                                        (g$fxif$5850$RATN9
                                          g$mask$5878$RATN9
                                          (g$fxarithmetic-shift-left$5854$RATN9
                                            g$from$5875$RATN9
                                            g$start$5873$RATN9)
                                          g$to$5872$RATN9))))))
                                 (fxand
                                   g$mask1$5876$RATN9
                                   g$mask2$5877$RATN9))))
                             (fxnot
                               (g$fxarithmetic-shift-left$5854$RATN9
                                 '-1
                                 g$end$5874$RATN9)))))
                         (g$fxarithmetic-shift-left$5854$RATN9
                           '-1
                           g$start$5873$RATN9))))
                     g$fx4$5871$RATN9)))
                 g$fx3$5870$RATN9)))
             g$fx2$5869$RATN9)))
         g$fx1$5868$RATN9))))
   (g$fxarithmetic-shift-left$5854$RATN9
     g$fxarithmetic-shift-left$5901$RATN9
     (case-lambda
       ((g$fx1$5879$RATN9 g$fx2$5880$RATN9)
        (fxarithmetic-shift g$fx1$5879$RATN9 g$fx2$5880$RATN9))))
   (g$fxarithmetic-shift-right$5855$RATN9
     g$fxarithmetic-shift-right$5902$RATN9
     (case-lambda
       ((g$fx1$5881$RATN9 g$fx2$5882$RATN9)
        (fxarithmetic-shift g$fx1$5881$RATN9 (- g$fx2$5882$RATN9)))))
   (g$fxrotate-bit-field$5856$RATN9
     g$fxrotate-bit-field$5903$RATN9
     (case-lambda
       ((g$fx1$5883$RATN9 g$fx2$5884$RATN9 g$fx3$5885$RATN9 g$fx4$5886$RATN9)
        ((case-lambda
           ((g$n$5887$RATN9)
            ((case-lambda
               ((g$start$5888$RATN9)
                ((case-lambda
                   ((g$end$5889$RATN9)
                    ((case-lambda
                       ((g$count$5890$RATN9)
                        ((case-lambda
                           ((g$width$5891$RATN9)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5891$RATN9)
                                  ((case-lambda
                                     ((g$count$5892$RATN9)
                                      ((case-lambda
                                         ((g$field0$5893$RATN9)
                                          ((case-lambda
                                             ((g$field1$5894$RATN9)
                                              ((case-lambda
                                                 ((g$field2$5895$RATN9)
                                                  ((case-lambda
                                                     ((g$field$5896$RATN9)
                                                      ((case-lambda
                                                         (()
                                                          (g$fxcopy-bit-field$5853$RATN9
                                                            g$n$5887$RATN9
                                                            g$start$5888$RATN9
                                                            g$end$5889$RATN9
                                                            g$field$5896$RATN9))))))
                                                   (fxior
                                                     g$field1$5894$RATN9
                                                     g$field2$5895$RATN9))))
                                               (g$fxarithmetic-shift-right$5855$RATN9
                                                 g$field0$5893$RATN9
                                                 (- g$width$5891$RATN9
                                                    g$count$5892$RATN9)))))
                                           (g$fxarithmetic-shift-left$5854$RATN9
                                             g$field0$5893$RATN9
                                             g$count$5892$RATN9))))
                                       (g$fxbit-field$5852$RATN9
                                         g$n$5887$RATN9
                                         g$start$5888$RATN9
                                         g$end$5889$RATN9))))
                                   (mod g$count$5890$RATN9 g$width$5891$RATN9))
                                  g$n$5887$RATN9))))))
                         (- g$end$5889$RATN9 g$start$5888$RATN9))))
                     g$fx4$5886$RATN9)))
                 g$fx3$5885$RATN9)))
             g$fx2$5884$RATN9)))
         g$fx1$5883$RATN9)))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$6705$5904$RATN9
     g$6705$5916$RATN9
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$6708$RATN9
       '#f
       '#f
       '#()))
   (g$6707$5905$RATN9 g$6707$5917$RATN9 '#f)
   (g$6706$5906$RATN9
     g$6706$5918$RATN9
     (make-record-constructor-descriptor
       g$6705$5904$RATN9
       &implementation-restriction-rcd
       g$6707$5905$RATN9))
   (g$6704$5907$RATN9
     g$6704$5919$RATN9
     (record-predicate g$6705$5904$RATN9))
   (g$make-no-infinities-violation$5908$RATN9
     g$make-no-infinities-violation$5920$RATN9
     (record-constructor g$6706$5906$RATN9))
   (g$no-infinities-violation?$5909$RATN9
     g$no-infinities-violation?$5921$RATN9
     (condition-predicate g$6705$5904$RATN9))
   (g$6719$5910$RATN9
     g$6719$5922$RATN9
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$6722$RATN9
       '#f
       '#f
       '#()))
   (g$6721$5911$RATN9 g$6721$5923$RATN9 '#f)
   (g$6720$5912$RATN9
     g$6720$5924$RATN9
     (make-record-constructor-descriptor
       g$6719$5910$RATN9
       &implementation-restriction-rcd
       g$6721$5911$RATN9))
   (g$6718$5913$RATN9
     g$6718$5925$RATN9
     (record-predicate g$6719$5910$RATN9))
   (g$make-no-nans-violation$5914$RATN9
     g$make-no-nans-violation$5926$RATN9
     (record-constructor g$6720$5912$RATN9))
   (g$no-nans-violation?$5915$RATN9
     g$no-nans-violation?$5927$RATN9
     (condition-predicate g$6719$5910$RATN9)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$6734$5928$RATN9
     g$6734$6008$RATN9
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$6737$RATN9
       '#f
       '#f
       '#()))
   (g$6736$5929$RATN9 g$6736$6009$RATN9 '#f)
   (g$6735$5930$RATN9
     g$6735$6010$RATN9
     (make-record-constructor-descriptor
       g$6734$5928$RATN9
       &error-rcd
       g$6736$5929$RATN9))
   (g$6733$5931$RATN9
     g$6733$6011$RATN9
     (record-predicate g$6734$5928$RATN9))
   (g$make-i/o-error$5932$RATN9
     g$make-i/o-error$6012$RATN9
     (record-constructor g$6735$5930$RATN9))
   (g$i/o-error?$5933$RATN9
     g$i/o-error?$6013$RATN9
     (condition-predicate g$6734$5928$RATN9))
   (g$6748$5934$RATN9
     g$6748$6014$RATN9
     (make-record-type-descriptor
       '&i/o-read
       g$6734$5928$RATN9
       'g$6751$RATN9
       '#f
       '#f
       '#()))
   (g$6750$5935$RATN9 g$6750$6015$RATN9 '#f)
   (g$6749$5936$RATN9
     g$6749$6016$RATN9
     (make-record-constructor-descriptor
       g$6748$5934$RATN9
       g$6735$5930$RATN9
       g$6750$5935$RATN9))
   (g$6747$5937$RATN9
     g$6747$6017$RATN9
     (record-predicate g$6748$5934$RATN9))
   (g$make-i/o-read-error$5938$RATN9
     g$make-i/o-read-error$6018$RATN9
     (record-constructor g$6749$5936$RATN9))
   (g$i/o-read-error?$5939$RATN9
     g$i/o-read-error?$6019$RATN9
     (condition-predicate g$6748$5934$RATN9))
   (g$6762$5940$RATN9
     g$6762$6020$RATN9
     (make-record-type-descriptor
       '&i/o-write
       g$6734$5928$RATN9
       'g$6765$RATN9
       '#f
       '#f
       '#()))
   (g$6764$5941$RATN9 g$6764$6021$RATN9 '#f)
   (g$6763$5942$RATN9
     g$6763$6022$RATN9
     (make-record-constructor-descriptor
       g$6762$5940$RATN9
       g$6735$5930$RATN9
       g$6764$5941$RATN9))
   (g$6761$5943$RATN9
     g$6761$6023$RATN9
     (record-predicate g$6762$5940$RATN9))
   (g$make-i/o-write-error$5944$RATN9
     g$make-i/o-write-error$6024$RATN9
     (record-constructor g$6763$5942$RATN9))
   (g$i/o-write-error?$5945$RATN9
     g$i/o-write-error?$6025$RATN9
     (condition-predicate g$6762$5940$RATN9))
   (g$6777$5946$RATN9
     g$6777$6026$RATN9
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$6734$5928$RATN9
       'g$6780$RATN9
       '#f
       '#f
       '#((immutable position))))
   (g$6779$5947$RATN9 g$6779$6027$RATN9 '#f)
   (g$6778$5948$RATN9
     g$6778$6028$RATN9
     (make-record-constructor-descriptor
       g$6777$5946$RATN9
       g$6735$5930$RATN9
       g$6779$5947$RATN9))
   (g$6776$5949$RATN9
     g$6776$6029$RATN9
     (record-predicate g$6777$5946$RATN9))
   (g$make-i/o-invalid-position-error$5950$RATN9
     g$make-i/o-invalid-position-error$6030$RATN9
     (record-constructor g$6778$5948$RATN9))
   (g$6775$5951$RATN9
     g$6775$6031$RATN9
     (record-accessor g$6777$5946$RATN9 '0))
   (g$i/o-invalid-position-error?$5952$RATN9
     g$i/o-invalid-position-error?$6032$RATN9
     (condition-predicate g$6777$5946$RATN9))
   (g$i/o-error-position$5953$RATN9
     g$i/o-error-position$6033$RATN9
     (condition-accessor g$6777$5946$RATN9 g$6775$5951$RATN9))
   (g$6794$5954$RATN9
     g$6794$6034$RATN9
     (make-record-type-descriptor
       '&i/o-filename
       g$6734$5928$RATN9
       'g$6797$RATN9
       '#f
       '#f
       '#((immutable filename))))
   (g$6796$5955$RATN9 g$6796$6035$RATN9 '#f)
   (g$6795$5956$RATN9
     g$6795$6036$RATN9
     (make-record-constructor-descriptor
       g$6794$5954$RATN9
       g$6735$5930$RATN9
       g$6796$5955$RATN9))
   (g$6793$5957$RATN9
     g$6793$6037$RATN9
     (record-predicate g$6794$5954$RATN9))
   (g$make-i/o-filename-error$5958$RATN9
     g$make-i/o-filename-error$6038$RATN9
     (record-constructor g$6795$5956$RATN9))
   (g$6792$5959$RATN9
     g$6792$6039$RATN9
     (record-accessor g$6794$5954$RATN9 '0))
   (g$i/o-filename-error?$5960$RATN9
     g$i/o-filename-error?$6040$RATN9
     (condition-predicate g$6794$5954$RATN9))
   (g$i/o-error-filename$5961$RATN9
     g$i/o-error-filename$6041$RATN9
     (condition-accessor g$6794$5954$RATN9 g$6792$5959$RATN9))
   (g$6810$5962$RATN9
     g$6810$6042$RATN9
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6734$5928$RATN9
       'g$6813$RATN9
       '#f
       '#f
       '#()))
   (g$6812$5963$RATN9 g$6812$6043$RATN9 '#f)
   (g$6811$5964$RATN9
     g$6811$6044$RATN9
     (make-record-constructor-descriptor
       g$6810$5962$RATN9
       g$6735$5930$RATN9
       g$6812$5963$RATN9))
   (g$6809$5965$RATN9
     g$6809$6045$RATN9
     (record-predicate g$6810$5962$RATN9))
   (g$make-i/o-file-protection-error$5966$RATN9
     g$make-i/o-file-protection-error$6046$RATN9
     (record-constructor g$6811$5964$RATN9))
   (g$i/o-file-protection-error?$5967$RATN9
     g$i/o-file-protection-error?$6047$RATN9
     (condition-predicate g$6810$5962$RATN9))
   (g$6824$5968$RATN9
     g$6824$6048$RATN9
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6810$5962$RATN9
       'g$6827$RATN9
       '#f
       '#f
       '#()))
   (g$6826$5969$RATN9 g$6826$6049$RATN9 '#f)
   (g$6825$5970$RATN9
     g$6825$6050$RATN9
     (make-record-constructor-descriptor
       g$6824$5968$RATN9
       g$6811$5964$RATN9
       g$6826$5969$RATN9))
   (g$6823$5971$RATN9
     g$6823$6051$RATN9
     (record-predicate g$6824$5968$RATN9))
   (g$make-i/o-file-is-read-only-error$5972$RATN9
     g$make-i/o-file-is-read-only-error$6052$RATN9
     (record-constructor g$6825$5970$RATN9))
   (g$i/o-file-is-read-only-error?$5973$RATN9
     g$i/o-file-is-read-only-error?$6053$RATN9
     (condition-predicate g$6824$5968$RATN9))
   (g$6838$5974$RATN9
     g$6838$6054$RATN9
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6794$5954$RATN9
       'g$6841$RATN9
       '#f
       '#f
       '#()))
   (g$6840$5975$RATN9 g$6840$6055$RATN9 '#f)
   (g$6839$5976$RATN9
     g$6839$6056$RATN9
     (make-record-constructor-descriptor
       g$6838$5974$RATN9
       g$6795$5956$RATN9
       g$6840$5975$RATN9))
   (g$6837$5977$RATN9
     g$6837$6057$RATN9
     (record-predicate g$6838$5974$RATN9))
   (g$make-i/o-file-already-exists-error$5978$RATN9
     g$make-i/o-file-already-exists-error$6058$RATN9
     (record-constructor g$6839$5976$RATN9))
   (g$i/o-file-already-exists-error?$5979$RATN9
     g$i/o-file-already-exists-error?$6059$RATN9
     (condition-predicate g$6838$5974$RATN9))
   (g$6852$5980$RATN9
     g$6852$6060$RATN9
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6794$5954$RATN9
       'g$6855$RATN9
       '#f
       '#f
       '#()))
   (g$6854$5981$RATN9 g$6854$6061$RATN9 '#f)
   (g$6853$5982$RATN9
     g$6853$6062$RATN9
     (make-record-constructor-descriptor
       g$6852$5980$RATN9
       g$6795$5956$RATN9
       g$6854$5981$RATN9))
   (g$6851$5983$RATN9
     g$6851$6063$RATN9
     (record-predicate g$6852$5980$RATN9))
   (g$make-i/o-file-does-not-exist-error$5984$RATN9
     g$make-i/o-file-does-not-exist-error$6064$RATN9
     (record-constructor g$6853$5982$RATN9))
   (g$i/o-file-does-not-exist-error?$5985$RATN9
     g$i/o-file-does-not-exist-error?$6065$RATN9
     (condition-predicate g$6852$5980$RATN9))
   (g$6867$5986$RATN9
     g$6867$6066$RATN9
     (make-record-type-descriptor
       '&i/o-port
       g$6734$5928$RATN9
       'g$6870$RATN9
       '#f
       '#f
       '#((immutable port))))
   (g$6869$5987$RATN9 g$6869$6067$RATN9 '#f)
   (g$6868$5988$RATN9
     g$6868$6068$RATN9
     (make-record-constructor-descriptor
       g$6867$5986$RATN9
       g$6735$5930$RATN9
       g$6869$5987$RATN9))
   (g$6866$5989$RATN9
     g$6866$6069$RATN9
     (record-predicate g$6867$5986$RATN9))
   (g$make-i/o-port-error$5990$RATN9
     g$make-i/o-port-error$6070$RATN9
     (record-constructor g$6868$5988$RATN9))
   (g$6865$5991$RATN9
     g$6865$6071$RATN9
     (record-accessor g$6867$5986$RATN9 '0))
   (g$i/o-port-error?$5992$RATN9
     g$i/o-port-error?$6072$RATN9
     (condition-predicate g$6867$5986$RATN9))
   (g$i/o-error-port$5993$RATN9
     g$i/o-error-port$6073$RATN9
     (condition-accessor g$6867$5986$RATN9 g$6865$5991$RATN9))
   (g$6883$5994$RATN9
     g$6883$6074$RATN9
     (make-record-type-descriptor
       '&i/o-decoding
       g$6867$5986$RATN9
       'g$6886$RATN9
       '#f
       '#f
       '#()))
   (g$6885$5995$RATN9 g$6885$6075$RATN9 '#f)
   (g$6884$5996$RATN9
     g$6884$6076$RATN9
     (make-record-constructor-descriptor
       g$6883$5994$RATN9
       g$6868$5988$RATN9
       g$6885$5995$RATN9))
   (g$6882$5997$RATN9
     g$6882$6077$RATN9
     (record-predicate g$6883$5994$RATN9))
   (g$make-i/o-decoding-error$5998$RATN9
     g$make-i/o-decoding-error$6078$RATN9
     (record-constructor g$6884$5996$RATN9))
   (g$i/o-decoding-error?$5999$RATN9
     g$i/o-decoding-error?$6079$RATN9
     (condition-predicate g$6883$5994$RATN9))
   (g$6898$6000$RATN9
     g$6898$6080$RATN9
     (make-record-type-descriptor
       '&i/o-encoding
       g$6867$5986$RATN9
       'g$6901$RATN9
       '#f
       '#f
       '#((immutable char))))
   (g$6900$6001$RATN9 g$6900$6081$RATN9 '#f)
   (g$6899$6002$RATN9
     g$6899$6082$RATN9
     (make-record-constructor-descriptor
       g$6898$6000$RATN9
       g$6868$5988$RATN9
       g$6900$6001$RATN9))
   (g$6897$6003$RATN9
     g$6897$6083$RATN9
     (record-predicate g$6898$6000$RATN9))
   (g$make-i/o-encoding-error$6004$RATN9
     g$make-i/o-encoding-error$6084$RATN9
     (record-constructor g$6899$6002$RATN9))
   (g$6896$6005$RATN9
     g$6896$6085$RATN9
     (record-accessor g$6898$6000$RATN9 '0))
   (g$i/o-encoding-error?$6006$RATN9
     g$i/o-encoding-error?$6086$RATN9
     (condition-predicate g$6898$6000$RATN9))
   (g$i/o-encoding-error-char$6007$RATN9
     g$i/o-encoding-error-char$6087$RATN9
     (condition-accessor g$6898$6000$RATN9 g$6896$6005$RATN9)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$get-output-string$6088$RATN9
     g$get-output-string$6093$RATN9
     (case-lambda
       ((g$port$6091$RATN9)
        (clr-call-internal
          'system.io.stringwriter
          'tostring
          g$port$6091$RATN9))))
   (g$open-output-string$6089$RATN9
     g$open-output-string$6094$RATN9
     (case-lambda (() (clr-new-internal 'system.io.stringwriter))))
   (g$open-string-output-port$6090$RATN9
     g$open-string-output-port$6095$RATN9
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6092$RATN9)
            (values
              g$p$6092$RATN9
              (case-lambda
                (() (g$get-output-string$6088$RATN9 g$p$6092$RATN9))))))
         (g$open-output-string$6089$RATN9))))))
  (void))

(library-letrec* (ironscheme io simple) () (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme format)
  ((g$dofmt$6096$RATN9
     g$dofmt$6118$RATN9
     (case-lambda
       ((g$p$6100$RATN9 g$cntl$6101$RATN9 g$args$6102$RATN9)
        ((case-lambda
           ((g$nmax$6103$RATN9)
            ((letrec ((g$loop$6104$RATN9
                        (case-lambda
                          ((g$n$6105$RATN9 g$a$6106$RATN9)
                           (if (fx<=? g$n$6105$RATN9 g$nmax$6103$RATN9)
                             ((case-lambda
                                ((g$c$6107$RATN9)
                                 (if (if (char=? g$c$6107$RATN9 '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6105$RATN9
                                           g$nmax$6103$RATN9))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6108$RATN9)
                                       (if (eqv? g$t$6108$RATN9 '#\a)
                                         (begin
                                           (display
                                             (car g$a$6106$RATN9)
                                             g$p$6100$RATN9)
                                           (g$loop$6104$RATN9
                                             (fx+ g$n$6105$RATN9 '2)
                                             (cdr g$a$6106$RATN9)))
                                         (if (eqv? g$t$6108$RATN9 '#\s)
                                           (begin
                                             (write
                                               (car g$a$6106$RATN9)
                                               g$p$6100$RATN9)
                                             (g$loop$6104$RATN9
                                               (fx+ g$n$6105$RATN9 '2)
                                               (cdr g$a$6106$RATN9)))
                                           (if (eqv? g$t$6108$RATN9 '#\b)
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6106$RATN9)
                                                   '2)
                                                 g$p$6100$RATN9)
                                               (g$loop$6104$RATN9
                                                 (fx+ g$n$6105$RATN9 '2)
                                                 (cdr g$a$6106$RATN9)))
                                             (if (eqv? g$t$6108$RATN9 '#\o)
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6106$RATN9)
                                                     '8)
                                                   g$p$6100$RATN9)
                                                 (g$loop$6104$RATN9
                                                   (fx+ g$n$6105$RATN9 '2)
                                                   (cdr g$a$6106$RATN9)))
                                               (if (eqv? g$t$6108$RATN9 '#\x)
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6106$RATN9)
                                                       '16)
                                                     g$p$6100$RATN9)
                                                   (g$loop$6104$RATN9
                                                     (fx+ g$n$6105$RATN9 '2)
                                                     (cdr g$a$6106$RATN9)))
                                                 (if (eqv? g$t$6108$RATN9 '#\d)
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6106$RATN9)
                                                         '10)
                                                       g$p$6100$RATN9)
                                                     (g$loop$6104$RATN9
                                                       (fx+ g$n$6105$RATN9 '2)
                                                       (cdr g$a$6106$RATN9)))
                                                   (if (eqv?
                                                         g$t$6108$RATN9
                                                         '#\~)
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6100$RATN9)
                                                       (g$loop$6104$RATN9
                                                         (fx+ g$n$6105$RATN9 '2)
                                                         g$a$6106$RATN9))
                                                     (begin
                                                       (write-char
                                                         g$c$6107$RATN9
                                                         g$p$6100$RATN9)
                                                       (g$loop$6104$RATN9
                                                         (fx+ g$n$6105$RATN9 '1)
                                                         g$a$6106$RATN9)))))))))))
                                    (string-ref
                                      g$cntl$6101$RATN9
                                      (fx+ g$n$6105$RATN9 '1)))
                                   (begin
                                     (write-char g$c$6107$RATN9 g$p$6100$RATN9)
                                     (g$loop$6104$RATN9
                                       (fx+ g$n$6105$RATN9 '1)
                                       g$a$6106$RATN9)))))
                              (string-ref g$cntl$6101$RATN9 g$n$6105$RATN9))
                             (void))))))
               g$loop$6104$RATN9)
             '0
             g$args$6102$RATN9)))
         (fx- (string-length g$cntl$6101$RATN9) '1)))))
   (g$printf$6097$RATN9
     g$printf$6119$RATN9
     (case-lambda
       ((g$control$6109$RATN9 . g$args$6110$RATN9)
        (g$dofmt$6096$RATN9
          (current-output-port)
          g$control$6109$RATN9
          g$args$6110$RATN9))))
   (g$fprintf$6098$RATN9
     g$fprintf$6120$RATN9
     (case-lambda
       ((g$p$6111$RATN9 g$control$6112$RATN9 . g$args$6113$RATN9)
        (g$dofmt$6096$RATN9
          g$p$6111$RATN9
          g$control$6112$RATN9
          g$args$6113$RATN9))))
   (g$format$6099$RATN9
     g$format$6121$RATN9
     (case-lambda
       ((g$control$6114$RATN9 . g$args$6115$RATN9)
        (call-with-values
          g$open-string-output-port$6095$RATN9
          (case-lambda
            ((g$p$6116$RATN9 g$c$6117$RATN9)
             (begin
               (g$dofmt$6096$RATN9
                 g$p$6116$RATN9
                 g$control$6114$RATN9
                 g$args$6115$RATN9)
               (g$c$6117$RATN9)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6122$RATN9
     g$make-traced-macro$6125$RATN9
     (case-lambda
       ((g$name$6123$RATN9 g$x$6124$RATN9)
        (if (procedure? g$x$6124$RATN9)
          (make-traced-procedure
            g$name$6123$RATN9
            g$x$6124$RATN9
            g$syntax->datum$10774$RATN9)
          (if (g$variable-transformer?$10602$RATN9 g$x$6124$RATN9)
            (g$make-variable-transformer$10601$RATN9
              (make-traced-procedure
                g$name$6123$RATN9
                (g$variable-transformer-procedure$10603$RATN9 g$x$6124$RATN9)
                g$syntax->datum$10774$RATN9))
            g$x$6124$RATN9))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$read-library-source-file$6126$RATN9
     g$read-library-source-file$6204$RATN9
     (case-lambda
       ((g$file-name$6196$RATN9)
        (with-input-from-file g$file-name$6196$RATN9 read-annotated))))
   (g$make-parameter$6127$RATN9
     g$make-parameter$6205$RATN9
     (case-lambda
       ((g$x$6197$RATN9)
        (g$make-parameter$6127$RATN9
          g$x$6197$RATN9
          (case-lambda ((g$x$6198$RATN9) g$x$6198$RATN9))))
       ((g$x$6199$RATN9 g$fender$6200$RATN9)
        (begin
          (if (procedure? g$fender$6200$RATN9)
            (void)
            (assertion-violation
              'assert
              '"assertion failed"
              '(procedure? fender)))
          ((case-lambda
             ((g$x$6201$RATN9)
              (case-lambda
                (() g$x$6201$RATN9)
                ((g$v$6202$RATN9)
                 (set! g$x$6201$RATN9 (g$fender$6200$RATN9 g$v$6202$RATN9))))))
           (g$fender$6200$RATN9 g$x$6199$RATN9))))))
   (g$file-options-spec$6195$RATN9
     g$file-options-spec$6206$RATN9
     (case-lambda ((g$x$6203$RATN9) g$x$6203$RATN9))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$6403$RATN9
     g$current-primitive-locations$6448$RATN9
     (g$make-parameter$6205$RATN9
       (case-lambda ((g$x$6409$RATN9) '#f))
       (case-lambda
         ((g$p$6410$RATN9)
          (begin
            (if (procedure? g$p$6410$RATN9)
              (void)
              (assertion-violation 'assert '"assertion failed" '(procedure? p)))
            g$p$6410$RATN9)))))
   (g$mutable?$6404$RATN9
     g$mutable?$6449$RATN9
     (case-lambda
       ((g$x$6411$RATN9)
        (letrec* ((g$simple?$6412$RATN9
                    (case-lambda
                      ((g$x$6413$RATN9)
                       ((case-lambda
                          ((g$t$6414$RATN9)
                           (if g$t$6414$RATN9
                             g$t$6414$RATN9
                             ((case-lambda
                                ((g$t$6415$RATN9)
                                 (if g$t$6415$RATN9
                                   g$t$6415$RATN9
                                   ((case-lambda
                                      ((g$t$6416$RATN9)
                                       (if g$t$6416$RATN9
                                         g$t$6416$RATN9
                                         ((case-lambda
                                            ((g$t$6417$RATN9)
                                             (if g$t$6417$RATN9
                                               g$t$6417$RATN9
                                               ((case-lambda
                                                  ((g$t$6418$RATN9)
                                                   (if g$t$6418$RATN9
                                                     g$t$6418$RATN9
                                                     ((case-lambda
                                                        ((g$t$6419$RATN9)
                                                         (if g$t$6419$RATN9
                                                           g$t$6419$RATN9
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$6413$RATN9)))))
                                                      (bytevector?
                                                        g$x$6413$RATN9)))))
                                                (string? g$x$6413$RATN9)))))
                                          (boolean? g$x$6413$RATN9)))))
                                    (symbol? g$x$6413$RATN9)))))
                              (char? g$x$6413$RATN9)))))
                        (null? g$x$6413$RATN9))))))
          (not (g$simple?$6412$RATN9 g$x$6411$RATN9))))))
   (g$rewriter$6405$RATN9
     g$rewriter$6450$RATN9
     (case-lambda
       ((g$quote-hack?$6420$RATN9)
        (letrec* ((g$f$6421$RATN9
                    (case-lambda
                      ((g$x$6422$RATN9)
                       (if (pair? g$x$6422$RATN9)
                         ((case-lambda
                            ((g$t$6423$RATN9)
                             (if (eqv? g$t$6423$RATN9 'quote)
                               (if (if g$quote-hack?$6420$RATN9
                                     (begin
                                       '#f
                                       (g$mutable?$6404$RATN9
                                         (g$cadr$4896$RATN9 g$x$6422$RATN9)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$6443$RATN9)
                                     (begin
                                       (set-symbol-value!
                                         g$g$6443$RATN9
                                         (g$cadr$4896$RATN9 g$x$6422$RATN9))
                                       g$g$6443$RATN9)))
                                  (gensym))
                                 g$x$6422$RATN9)
                               (if (eqv? g$t$6423$RATN9 'case-lambda)
                                 (cons
                                   'case-lambda
                                   (map (case-lambda
                                          ((g$x$6442$RATN9)
                                           (cons
                                             (car g$x$6442$RATN9)
                                             (map g$f$6421$RATN9
                                                  (cdr g$x$6442$RATN9)))))
                                        (cdr g$x$6422$RATN9)))
                                 (if (eqv? g$t$6423$RATN9 'lambda)
                                   (g$cons*$5367$RATN9
                                     'lambda
                                     (g$cadr$4896$RATN9 g$x$6422$RATN9)
                                     (map g$f$6421$RATN9
                                          (g$cddr$4898$RATN9 g$x$6422$RATN9)))
                                   (if (eqv? g$t$6423$RATN9 'letrec)
                                     ((case-lambda
                                        ((g$bindings$6438$RATN9
                                           g$body*$6439$RATN9)
                                         ((case-lambda
                                            ((g$lhs*$6440$RATN9
                                               g$rhs*$6441$RATN9)
                                             (g$cons*$5367$RATN9
                                               'letrec
                                               (map list
                                                    g$lhs*$6440$RATN9
                                                    (map g$f$6421$RATN9
                                                         g$rhs*$6441$RATN9))
                                               (map g$f$6421$RATN9
                                                    g$body*$6439$RATN9))))
                                          (map car g$bindings$6438$RATN9)
                                          (map g$cadr$4896$RATN9
                                               g$bindings$6438$RATN9))))
                                      (g$cadr$4896$RATN9 g$x$6422$RATN9)
                                      (g$cddr$4898$RATN9 g$x$6422$RATN9))
                                     (if (eqv? g$t$6423$RATN9 'letrec*)
                                       ((case-lambda
                                          ((g$bindings$6434$RATN9
                                             g$body*$6435$RATN9)
                                           ((case-lambda
                                              ((g$lhs*$6436$RATN9
                                                 g$rhs*$6437$RATN9)
                                               (g$cons*$5367$RATN9
                                                 'letrec*
                                                 (map list
                                                      g$lhs*$6436$RATN9
                                                      (map g$f$6421$RATN9
                                                           g$rhs*$6437$RATN9))
                                                 (map g$f$6421$RATN9
                                                      g$body*$6435$RATN9))))
                                            (map car g$bindings$6434$RATN9)
                                            (map g$cadr$4896$RATN9
                                                 g$bindings$6434$RATN9))))
                                        (g$cadr$4896$RATN9 g$x$6422$RATN9)
                                        (g$cddr$4898$RATN9 g$x$6422$RATN9))
                                       (if (eqv?
                                             g$t$6423$RATN9
                                             'library-letrec*)
                                         ((case-lambda
                                            ((g$name$6427$RATN9 g$x$6428$RATN9)
                                             ((case-lambda
                                                ((g$bindings$6429$RATN9
                                                   g$body*$6430$RATN9)
                                                 ((case-lambda
                                                    ((g$lhs*$6431$RATN9
                                                       g$lhs**$6432$RATN9
                                                       g$rhs*$6433$RATN9)
                                                     (g$cons*$5367$RATN9
                                                       'library-letrec*
                                                       g$name$6427$RATN9
                                                       (map list
                                                            g$lhs*$6431$RATN9
                                                            g$lhs**$6432$RATN9
                                                            (map g$f$6421$RATN9
                                                                 g$rhs*$6433$RATN9))
                                                       (map g$f$6421$RATN9
                                                            g$body*$6430$RATN9))))
                                                  (map car
                                                       g$bindings$6429$RATN9)
                                                  (map g$cadr$4896$RATN9
                                                       g$bindings$6429$RATN9)
                                                  (map g$caddr$4902$RATN9
                                                       g$bindings$6429$RATN9))))
                                              (g$cadr$4896$RATN9 g$x$6428$RATN9)
                                              (g$cddr$4898$RATN9
                                                g$x$6428$RATN9))))
                                          (g$cadr$4896$RATN9 g$x$6422$RATN9)
                                          (cdr g$x$6422$RATN9))
                                         (if (eqv? g$t$6423$RATN9 'begin)
                                           (cons
                                             'begin
                                             (map g$f$6421$RATN9
                                                  (cdr g$x$6422$RATN9)))
                                           (if (eqv? g$t$6423$RATN9 'set!)
                                             (list
                                               'set!
                                               (g$cadr$4896$RATN9
                                                 g$x$6422$RATN9)
                                               (g$f$6421$RATN9
                                                 (g$caddr$4902$RATN9
                                                   g$x$6422$RATN9)))
                                             (if (eqv?
                                                   g$t$6423$RATN9
                                                   'primitive)
                                               ((case-lambda
                                                  ((g$op$6424$RATN9)
                                                   ((case-lambda
                                                      ((g$t$6425$RATN9)
                                                       (if g$t$6425$RATN9
                                                         ((case-lambda
                                                            ((g$loc$6426$RATN9)
                                                             g$loc$6426$RATN9))
                                                          g$t$6425$RATN9)
                                                         g$op$6424$RATN9)))
                                                    ((g$current-primitive-locations$6403$RATN9)
                                                     g$op$6424$RATN9))))
                                                (g$cadr$4896$RATN9
                                                  g$x$6422$RATN9))
                                               (if (eqv? g$t$6423$RATN9 'define)
                                                 g$x$6422$RATN9
                                                 (if (list? g$x$6422$RATN9)
                                                   (map g$f$6421$RATN9
                                                        g$x$6422$RATN9)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$6422$RATN9
                                                     (list?
                                                       g$x$6422$RATN9)))))))))))))))
                          (car g$x$6422$RATN9))
                         g$x$6422$RATN9)))))
          g$f$6421$RATN9))))
   (g$expanded->core$6406$RATN9
     g$expanded->core$6451$RATN9
     (case-lambda
       ((g$x$6444$RATN9) ((g$rewriter$6405$RATN9 '#t) g$x$6444$RATN9))))
   (g$compile-core-expr$6407$RATN9
     g$compile-core-expr$6452$RATN9
     (case-lambda
       ((g$x$6445$RATN9) ((g$rewriter$6405$RATN9 '#f) g$x$6445$RATN9))))
   (g$compile-core-expr-to-port$6408$RATN9
     g$compile-core-expr-to-port$6453$RATN9
     (case-lambda
       ((g$x$6446$RATN9 g$p$6447$RATN9)
        (g$pretty-print$6402$RATN9
          ((g$rewriter$6405$RATN9 '#f) g$x$6446$RATN9)
          g$p$6447$RATN9)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$6492$RATN9
     g$make-collection$6696$RATN9
     (case-lambda
       (()
        ((case-lambda
           ((g$set$6553$RATN9)
            (letrec* ((g$set-cons$6554$RATN9
                        (case-lambda
                          ((g$x$6556$RATN9 g$ls$6557$RATN9)
                           (if (memq g$x$6556$RATN9 g$ls$6557$RATN9)
                             g$ls$6557$RATN9
                             (cons g$x$6556$RATN9 g$ls$6557$RATN9))))))
              (case-lambda
                (() g$set$6553$RATN9)
                ((g$x$6555$RATN9)
                 (set! g$set$6553$RATN9
                   (g$set-cons$6554$RATN9 g$x$6555$RATN9 g$set$6553$RATN9)))))))
         '()))))
   (g$current-library-collection$6493$RATN9
     g$current-library-collection$6697$RATN9
     (g$make-parameter$6205$RATN9
       (g$make-collection$6492$RATN9)
       (case-lambda
         ((g$x$6558$RATN9)
          (begin
            (if (procedure? g$x$6558$RATN9)
              (void)
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$6558$RATN9))
            g$x$6558$RATN9)))))
   (g$7333$6494$RATN9
     g$7333$6698$RATN9
     (make-record-type-descriptor
       'library
       '#f
       'g$7336$RATN9
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7335$6495$RATN9 g$7335$6699$RATN9 '#f)
   (g$7334$6496$RATN9
     g$7334$6700$RATN9
     (make-record-constructor-descriptor
       g$7333$6494$RATN9
       '#f
       g$7335$6495$RATN9))
   (g$library?$6497$RATN9
     g$library?$6701$RATN9
     (record-predicate g$7333$6494$RATN9))
   (g$make-library$6498$RATN9
     g$make-library$6702$RATN9
     (record-constructor g$7334$6496$RATN9))
   (g$library-id$6499$RATN9
     g$library-id$6703$RATN9
     (record-accessor g$7333$6494$RATN9 '0))
   (g$library-name$6500$RATN9
     g$library-name$6704$RATN9
     (record-accessor g$7333$6494$RATN9 '1))
   (g$library-version$6501$RATN9
     g$library-version$6705$RATN9
     (record-accessor g$7333$6494$RATN9 '2))
   (g$library-imp*$6502$RATN9
     g$library-imp*$6706$RATN9
     (record-accessor g$7333$6494$RATN9 '3))
   (g$library-vis*$6503$RATN9
     g$library-vis*$6707$RATN9
     (record-accessor g$7333$6494$RATN9 '4))
   (g$library-inv*$6504$RATN9
     g$library-inv*$6708$RATN9
     (record-accessor g$7333$6494$RATN9 '5))
   (g$library-subst$6505$RATN9
     g$library-subst$6709$RATN9
     (record-accessor g$7333$6494$RATN9 '6))
   (g$library-env$6506$RATN9
     g$library-env$6710$RATN9
     (record-accessor g$7333$6494$RATN9 '7))
   (g$library-visit-state$6507$RATN9
     g$library-visit-state$6711$RATN9
     (record-accessor g$7333$6494$RATN9 '8))
   (g$library-invoke-state$6508$RATN9
     g$library-invoke-state$6712$RATN9
     (record-accessor g$7333$6494$RATN9 '9))
   (g$library-visit-code$6509$RATN9
     g$library-visit-code$6713$RATN9
     (record-accessor g$7333$6494$RATN9 '10))
   (g$library-invoke-code$6510$RATN9
     g$library-invoke-code$6714$RATN9
     (record-accessor g$7333$6494$RATN9 '11))
   (g$library-visible?$6511$RATN9
     g$library-visible?$6715$RATN9
     (record-accessor g$7333$6494$RATN9 '12))
   (g$library-source-file-name$6512$RATN9
     g$library-source-file-name$6716$RATN9
     (record-accessor g$7333$6494$RATN9 '13))
   (g$set-library-id!$6513$RATN9
     g$set-library-id!$6717$RATN9
     (record-mutator g$7333$6494$RATN9 '0))
   (g$set-library-name!$6514$RATN9
     g$set-library-name!$6718$RATN9
     (record-mutator g$7333$6494$RATN9 '1))
   (g$set-library-version!$6515$RATN9
     g$set-library-version!$6719$RATN9
     (record-mutator g$7333$6494$RATN9 '2))
   (g$set-library-imp*!$6516$RATN9
     g$set-library-imp*!$6720$RATN9
     (record-mutator g$7333$6494$RATN9 '3))
   (g$set-library-vis*!$6517$RATN9
     g$set-library-vis*!$6721$RATN9
     (record-mutator g$7333$6494$RATN9 '4))
   (g$set-library-inv*!$6518$RATN9
     g$set-library-inv*!$6722$RATN9
     (record-mutator g$7333$6494$RATN9 '5))
   (g$set-library-subst!$6519$RATN9
     g$set-library-subst!$6723$RATN9
     (record-mutator g$7333$6494$RATN9 '6))
   (g$set-library-env!$6520$RATN9
     g$set-library-env!$6724$RATN9
     (record-mutator g$7333$6494$RATN9 '7))
   (g$set-library-visit-state!$6521$RATN9
     g$set-library-visit-state!$6725$RATN9
     (record-mutator g$7333$6494$RATN9 '8))
   (g$set-library-invoke-state!$6522$RATN9
     g$set-library-invoke-state!$6726$RATN9
     (record-mutator g$7333$6494$RATN9 '9))
   (g$set-library-visit-code!$6523$RATN9
     g$set-library-visit-code!$6727$RATN9
     (record-mutator g$7333$6494$RATN9 '10))
   (g$set-library-invoke-code!$6524$RATN9
     g$set-library-invoke-code!$6728$RATN9
     (record-mutator g$7333$6494$RATN9 '11))
   (g$set-library-visible?!$6525$RATN9
     g$set-library-visible?!$6729$RATN9
     (record-mutator g$7333$6494$RATN9 '12))
   (g$set-library-source-file-name!$6526$RATN9
     g$set-library-source-file-name!$6730$RATN9
     (record-mutator g$7333$6494$RATN9 '13))
   (g$rp$6527$RATN9
     g$rp$6731$RATN9
     (make-record-printer
       'library
       (case-lambda
         ((g$x$6559$RATN9 g$p$6560$RATN9)
          (begin
            (if (g$library?$6497$RATN9 g$x$6559$RATN9)
              (void)
              (assertion-violation 'record-type-printer '"not a library"))
            (display
              (g$format$6121$RATN9
                '"#<library ~s>"
                (if (null? (g$library-version$6501$RATN9 g$x$6559$RATN9))
                  (g$library-name$6500$RATN9 g$x$6559$RATN9)
                  (append
                    (g$library-name$6500$RATN9 g$x$6559$RATN9)
                    (list (g$library-version$6501$RATN9 g$x$6559$RATN9)))))
              g$p$6560$RATN9))))))
   (g$find-dependencies$6528$RATN9
     g$find-dependencies$6732$RATN9
     (case-lambda
       ((g$ls$6561$RATN9)
        (if (null? g$ls$6561$RATN9)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$6529$RATN9
     g$find-library-by$6733$RATN9
     (case-lambda
       ((g$pred$6562$RATN9)
        ((letrec ((g$f$6563$RATN9
                    (case-lambda
                      ((g$ls$6564$RATN9)
                       (if (null? g$ls$6564$RATN9)
                         '#f
                         (if (g$pred$6562$RATN9 (car g$ls$6564$RATN9))
                           (car g$ls$6564$RATN9)
                           (g$f$6563$RATN9 (cdr g$ls$6564$RATN9))))))))
           g$f$6563$RATN9)
         ((g$current-library-collection$6493$RATN9))))))
   (g$library-path$6530$RATN9
     g$library-path$6734$RATN9
     (g$make-parameter$6205$RATN9
       '(".")
       (case-lambda
         ((g$x$6565$RATN9)
          (if (if (list? g$x$6565$RATN9)
                (begin '#f (g$for-all$5365$RATN9 string? g$x$6565$RATN9))
                '#f)
            (map (case-lambda ((g$x$6566$RATN9) g$x$6566$RATN9)) g$x$6565$RATN9)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$6565$RATN9))))))
   (g$library-extensions$6531$RATN9
     g$library-extensions$6735$RATN9
     (g$make-parameter$6205$RATN9
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$6567$RATN9)
          (if (if (list? g$x$6567$RATN9)
                (begin '#f (g$for-all$5365$RATN9 string? g$x$6567$RATN9))
                '#f)
            (map (case-lambda ((g$x$6568$RATN9) g$x$6568$RATN9)) g$x$6567$RATN9)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$6567$RATN9))))))
   (g$library-name->file-name$6532$RATN9
     g$library-name->file-name$6736$RATN9
     (case-lambda
       ((g$x$6569$RATN9)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6095$RATN9)))
          (case-lambda
            ((g$p$6572$RATN9 g$extract$6573$RATN9)
             ((case-lambda
                ((g$extract$6574$RATN9 g$p$6575$RATN9)
                 (letrec* ((g$display-hex$6576$RATN9
                             (case-lambda
                               ((g$n$6584$RATN9)
                                (if (<= '0 g$n$6584$RATN9 '9)
                                  (display g$n$6584$RATN9 g$p$6575$RATN9)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$6584$RATN9 '10)))
                                    g$p$6575$RATN9))))))
                   (begin
                     ((letrec ((g$f$6577$RATN9
                                 (case-lambda
                                   ((g$ls$6578$RATN9)
                                    (if (null? g$ls$6578$RATN9)
                                      (void)
                                      (begin
                                        (display '"/" g$p$6575$RATN9)
                                        (for-each
                                          (case-lambda
                                            ((g$c$6579$RATN9)
                                             (if ((case-lambda
                                                    ((g$t$6580$RATN9)
                                                     (if g$t$6580$RATN9
                                                       g$t$6580$RATN9
                                                       ((case-lambda
                                                          ((g$t$6581$RATN9)
                                                           (if g$t$6581$RATN9
                                                             g$t$6581$RATN9
                                                             ((case-lambda
                                                                ((g$t$6582$RATN9)
                                                                 (if g$t$6582$RATN9
                                                                   g$t$6582$RATN9
                                                                   (begin
                                                                     '#f
                                                                     (memv
                                                                       g$c$6579$RATN9
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (char<=?
                                                                '#\0
                                                                g$c$6579$RATN9
                                                                '#\9)))))
                                                        (char<=?
                                                          '#\A
                                                          g$c$6579$RATN9
                                                          '#\Z)))))
                                                  (char<=?
                                                    '#\a
                                                    g$c$6579$RATN9
                                                    '#\z))
                                               (display
                                                 g$c$6579$RATN9
                                                 g$p$6575$RATN9)
                                               (begin
                                                 (display '"%" g$p$6575$RATN9)
                                                 ((case-lambda
                                                    ((g$n$6583$RATN9)
                                                     (begin
                                                       (g$display-hex$6576$RATN9
                                                         (g$quotient$5722$RATN9
                                                           g$n$6583$RATN9
                                                           '16))
                                                       (g$display-hex$6576$RATN9
                                                         (g$remainder$5723$RATN9
                                                           g$n$6583$RATN9
                                                           '16)))))
                                                  (char->integer
                                                    g$c$6579$RATN9))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$6578$RATN9))))
                                        (g$f$6577$RATN9
                                          (cdr g$ls$6578$RATN9))))))))
                        g$f$6577$RATN9)
                      g$x$6569$RATN9)
                     (g$extract$6574$RATN9)))))
              g$extract$6573$RATN9
              g$p$6572$RATN9)))))))
   (g$file-locator$6533$RATN9
     g$file-locator$6737$RATN9
     (g$make-parameter$6205$RATN9
       (case-lambda
         ((g$x$6585$RATN9)
          ((case-lambda
             ((g$str$6586$RATN9)
              ((letrec ((g$f$6587$RATN9
                          (case-lambda
                            ((g$ls$6588$RATN9
                               g$exts$6589$RATN9
                               g$failed-list$6590$RATN9)
                             (if (null? g$ls$6588$RATN9)
                               ((case-lambda
                                  (()
                                   (letrec* ((g$7438$6591$RATN9
                                               (make-record-type-descriptor
                                                 '&library-resolution
                                                 &condition-rtd
                                                 'g$7441$RATN9
                                                 '#f
                                                 '#f
                                                 '#((immutable library)
                                                    (immutable files))))
                                             (g$7440$6592$RATN9 '#f)
                                             (g$7439$6593$RATN9
                                               (make-record-constructor-descriptor
                                                 g$7438$6591$RATN9
                                                 &condition-rcd
                                                 g$7440$6592$RATN9))
                                             (g$7437$6594$RATN9
                                               (record-predicate
                                                 g$7438$6591$RATN9))
                                             (g$make-library-resolution-condition$6595$RATN9
                                               (record-constructor
                                                 g$7439$6593$RATN9))
                                             (g$7435$6596$RATN9
                                               (record-accessor
                                                 g$7438$6591$RATN9
                                                 '0))
                                             (g$7436$6597$RATN9
                                               (record-accessor
                                                 g$7438$6591$RATN9
                                                 '1))
                                             (g$library-resolution-condition?$6598$RATN9
                                               (condition-predicate
                                                 g$7438$6591$RATN9))
                                             (g$condition-library$6599$RATN9
                                               (condition-accessor
                                                 g$7438$6591$RATN9
                                                 g$7435$6596$RATN9))
                                             (g$condition-files$6600$RATN9
                                               (condition-accessor
                                                 g$7438$6591$RATN9
                                                 g$7436$6597$RATN9)))
                                     (raise
                                       (condition
                                         (g$make-error$5639$RATN9)
                                         (g$make-who-condition$5665$RATN9
                                           'expander)
                                         (g$make-message-condition$5619$RATN9
                                           '"cannot locate library in library-path")
                                         (g$make-library-resolution-condition$6595$RATN9
                                           g$x$6585$RATN9
                                           (reverse
                                             g$failed-list$6590$RATN9))))))))
                               (if (null? g$exts$6589$RATN9)
                                 (g$f$6587$RATN9
                                   (cdr g$ls$6588$RATN9)
                                   (g$library-extensions$6531$RATN9)
                                   g$failed-list$6590$RATN9)
                                 ((case-lambda
                                    ((g$name$6601$RATN9)
                                     (if (g$file-exists?$5236$RATN9
                                           g$name$6601$RATN9)
                                       g$name$6601$RATN9
                                       (g$f$6587$RATN9
                                         g$ls$6588$RATN9
                                         (cdr g$exts$6589$RATN9)
                                         (cons
                                           g$name$6601$RATN9
                                           g$failed-list$6590$RATN9)))))
                                  (string-append
                                    (car g$ls$6588$RATN9)
                                    g$str$6586$RATN9
                                    (car g$exts$6589$RATN9)))))))))
                 g$f$6587$RATN9)
               (g$library-path$6530$RATN9)
               (g$library-extensions$6531$RATN9)
               '())))
           (g$library-name->file-name$6532$RATN9 g$x$6585$RATN9))))
       (case-lambda
         ((g$f$6602$RATN9)
          (if (procedure? g$f$6602$RATN9)
            g$f$6602$RATN9
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$6602$RATN9))))))
   (g$serialize-all$6534$RATN9
     g$serialize-all$6738$RATN9
     (case-lambda
       ((g$serialize$6603$RATN9 g$compile$6604$RATN9)
        (letrec* ((g$library-desc$6605$RATN9
                    (case-lambda
                      ((g$x$6607$RATN9)
                       (list
                         (g$library-id$6499$RATN9 g$x$6607$RATN9)
                         (g$library-name$6500$RATN9 g$x$6607$RATN9))))))
          (for-each
            (case-lambda
              ((g$x$6606$RATN9)
               (if (g$library-source-file-name$6512$RATN9 g$x$6606$RATN9)
                 (g$serialize$6603$RATN9
                   (g$library-source-file-name$6512$RATN9 g$x$6606$RATN9)
                   (list
                     (g$library-id$6499$RATN9 g$x$6606$RATN9)
                     (g$library-name$6500$RATN9 g$x$6606$RATN9)
                     (g$library-version$6501$RATN9 g$x$6606$RATN9)
                     (map g$library-desc$6605$RATN9
                          (g$library-imp*$6502$RATN9 g$x$6606$RATN9))
                     (map g$library-desc$6605$RATN9
                          (g$library-vis*$6503$RATN9 g$x$6606$RATN9))
                     (map g$library-desc$6605$RATN9
                          (g$library-inv*$6504$RATN9 g$x$6606$RATN9))
                     (g$library-subst$6505$RATN9 g$x$6606$RATN9)
                     (g$library-env$6506$RATN9 g$x$6606$RATN9)
                     (g$compile$6604$RATN9
                       (g$library-visit-code$6509$RATN9 g$x$6606$RATN9))
                     (g$compile$6604$RATN9
                       (g$library-invoke-code$6510$RATN9 g$x$6606$RATN9))
                     (g$library-visible?$6511$RATN9 g$x$6606$RATN9)))
                 (void))))
            ((g$current-library-collection$6493$RATN9)))))))
   (g$current-precompiled-library-loader$6535$RATN9
     g$current-precompiled-library-loader$6739$RATN9
     (g$make-parameter$6205$RATN9
       (case-lambda ((g$filename$6608$RATN9 g$sk$6609$RATN9) '#f))))
   (g$try-load-from-file$6536$RATN9
     g$try-load-from-file$6740$RATN9
     (case-lambda
       ((g$filename$6610$RATN9)
        ((g$current-precompiled-library-loader$6535$RATN9)
         g$filename$6610$RATN9
         (case-lambda
           ((g$id$6611$RATN9
              g$name$6612$RATN9
              g$ver$6613$RATN9
              g$imp*$6614$RATN9
              g$vis*$6615$RATN9
              g$inv*$6616$RATN9
              g$exp-subst$6617$RATN9
              g$exp-env$6618$RATN9
              g$visit-proc$6619$RATN9
              g$invoke-proc$6620$RATN9
              g$visible?$6621$RATN9)
            ((letrec ((g$f$6622$RATN9
                        (case-lambda
                          ((g$deps$6623$RATN9)
                           (if (null? g$deps$6623$RATN9)
                             (begin
                               (g$install-library$6546$RATN9
                                 g$id$6611$RATN9
                                 g$name$6612$RATN9
                                 g$ver$6613$RATN9
                                 g$imp*$6614$RATN9
                                 g$vis*$6615$RATN9
                                 g$inv*$6616$RATN9
                                 g$exp-subst$6617$RATN9
                                 g$exp-env$6618$RATN9
                                 g$visit-proc$6619$RATN9
                                 g$invoke-proc$6620$RATN9
                                 '#f
                                 '#f
                                 g$visible?$6621$RATN9
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$6624$RATN9)
                                 ((case-lambda
                                    ((g$label$6625$RATN9 g$dname$6626$RATN9)
                                     ((case-lambda
                                        ((g$l$6627$RATN9)
                                         (if (if (g$library?$6497$RATN9
                                                   g$l$6627$RATN9)
                                               (begin
                                                 '#f
                                                 (eq? g$label$6625$RATN9
                                                      (g$library-id$6499$RATN9
                                                        g$l$6627$RATN9)))
                                               '#f)
                                           (g$f$6622$RATN9
                                             (cdr g$deps$6623$RATN9))
                                           (begin
                                             (g$fprintf$6120$RATN9
                                               (current-error-port)
                                               '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from \\
                           source.
"
                                               g$name$6612$RATN9
                                               g$dname$6626$RATN9
                                               g$filename$6610$RATN9)
                                             '#f))))
                                      (g$find-library-by-name$6541$RATN9
                                        g$dname$6626$RATN9))))
                                  (car g$d$6624$RATN9)
                                  (g$cadr$4896$RATN9 g$d$6624$RATN9))))
                              (car g$deps$6623$RATN9)))))))
               g$f$6622$RATN9)
             (append g$imp*$6614$RATN9 g$vis*$6615$RATN9 g$inv*$6616$RATN9)))
           (g$others$6628$RATN9 '#f))))))
   (g$library-loader$6537$RATN9
     g$library-loader$6741$RATN9
     (g$make-parameter$6205$RATN9
       (case-lambda
         ((g$x$6629$RATN9)
          ((case-lambda
             ((g$file-name$6630$RATN9)
              (if (not g$file-name$6630$RATN9)
                (assertion-violation '#f '"cannot file library" g$x$6629$RATN9)
                ((case-lambda
                   ((g$t$6631$RATN9)
                    (if g$t$6631$RATN9
                      g$t$6631$RATN9
                      (begin
                        '#f
                        ((g$current-library-expander$6538$RATN9)
                         (g$read-library-source-file$6204$RATN9
                           g$file-name$6630$RATN9)
                         g$file-name$6630$RATN9
                         (case-lambda
                           ((g$name$6632$RATN9)
                            (if (equal? g$name$6632$RATN9 g$x$6629$RATN9)
                              (void)
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6095$RATN9)))
                                  (case-lambda
                                    ((g$p$6635$RATN9 g$e$6636$RATN9)
                                     ((case-lambda
                                        ((g$e$6637$RATN9 g$p$6638$RATN9)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$6638$RATN9)
                                           (write g$x$6629$RATN9 g$p$6638$RATN9)
                                           (display '" in file " g$p$6638$RATN9)
                                           (display
                                             g$file-name$6630$RATN9
                                             g$p$6638$RATN9)
                                           (display '", found " g$p$6638$RATN9)
                                           (write
                                             g$name$6632$RATN9
                                             g$p$6638$RATN9)
                                           (display '" instead" g$p$6638$RATN9)
                                           (g$e$6637$RATN9))))
                                      g$e$6636$RATN9
                                      g$p$6635$RATN9)))))))))))))
                 (g$try-load-from-file$6536$RATN9 g$file-name$6630$RATN9)))))
           ((g$file-locator$6533$RATN9) g$x$6629$RATN9))))
       (case-lambda
         ((g$f$6639$RATN9)
          (if (procedure? g$f$6639$RATN9)
            g$f$6639$RATN9
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$6639$RATN9))))))
   (g$current-library-expander$6538$RATN9
     g$current-library-expander$6742$RATN9
     (g$make-parameter$6205$RATN9
       (case-lambda
         ((g$x$6640$RATN9)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$6641$RATN9)
          (if (procedure? g$f$6641$RATN9)
            g$f$6641$RATN9
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$6641$RATN9))))))
   (g$external-pending-libraries$6539$RATN9
     g$external-pending-libraries$6743$RATN9
     (g$make-parameter$6205$RATN9 '()))
   (g$find-external-library$6540$RATN9
     g$find-external-library$6744$RATN9
     (case-lambda
       ((g$name$6642$RATN9)
        (begin
          (if (g$member$5361$RATN9
                g$name$6642$RATN9
                (g$external-pending-libraries$6539$RATN9))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$6642$RATN9)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$6645$RATN9
                g$external-pending-libraries$6646$RATN9)
              ((case-lambda
                 ((g$swap$6647$RATN9)
                  (dynamic-wind
                    g$swap$6647$RATN9
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$6537$RATN9) g$name$6642$RATN9)
                         ((case-lambda
                            ((g$t$6648$RATN9)
                             (if g$t$6648$RATN9
                               g$t$6648$RATN9
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$6642$RATN9)))))
                          (g$find-library-by$6529$RATN9
                            (case-lambda
                              ((g$x$6649$RATN9)
                               (equal?
                                 (g$library-name$6500$RATN9 g$x$6649$RATN9)
                                 g$name$6642$RATN9))))))))
                    g$swap$6647$RATN9)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$6650$RATN9)
                      (begin
                        (g$external-pending-libraries$6645$RATN9
                          g$external-pending-libraries$6646$RATN9)
                        (set! g$external-pending-libraries$6646$RATN9
                          g$t$6650$RATN9))))
                   (g$external-pending-libraries$6645$RATN9)))))))
           g$external-pending-libraries$6539$RATN9
           (cons
             g$name$6642$RATN9
             (g$external-pending-libraries$6539$RATN9)))))))
   (g$find-library-by-name$6541$RATN9
     g$find-library-by-name$6745$RATN9
     (case-lambda
       ((g$name$6651$RATN9)
        ((case-lambda
           ((g$t$6652$RATN9)
            (if g$t$6652$RATN9
              g$t$6652$RATN9
              (begin
                '#f
                (g$find-external-library$6540$RATN9 g$name$6651$RATN9)))))
         (g$find-library-by$6529$RATN9
           (case-lambda
             ((g$x$6653$RATN9)
              (equal?
                (g$library-name$6500$RATN9 g$x$6653$RATN9)
                g$name$6651$RATN9))))))))
   (g$library-exists?$6542$RATN9
     g$library-exists?$6746$RATN9
     (case-lambda
       ((g$name$6654$RATN9)
        (if (g$find-library-by$6529$RATN9
              (case-lambda
                ((g$x$6655$RATN9)
                 (equal?
                   (g$library-name$6500$RATN9 g$x$6655$RATN9)
                   g$name$6654$RATN9))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$6543$RATN9
     g$find-library-by-spec/die$6747$RATN9
     (case-lambda
       ((g$spec$6656$RATN9)
        ((case-lambda
           ((g$id$6657$RATN9)
            ((case-lambda
               ((g$t$6658$RATN9)
                (if g$t$6658$RATN9
                  g$t$6658$RATN9
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$6656$RATN9)))))
             (g$find-library-by$6529$RATN9
               (case-lambda
                 ((g$x$6659$RATN9)
                  (eq? g$id$6657$RATN9
                       (g$library-id$6499$RATN9 g$x$6659$RATN9))))))))
         (car g$spec$6656$RATN9)))))
   (g$label->binding-table$6544$RATN9
     g$label->binding-table$6748$RATN9
     (g$make-eq-hashtable$5158$RATN9))
   (g$install-library-record$6545$RATN9
     g$install-library-record$6749$RATN9
     (case-lambda
       ((g$lib$6660$RATN9)
        (begin
          ((case-lambda
             ((g$exp-env$6661$RATN9)
              (for-each
                (case-lambda
                  ((g$x$6662$RATN9)
                   ((case-lambda
                      ((g$label$6663$RATN9 g$binding$6664$RATN9)
                       ((case-lambda
                          ((g$binding$6665$RATN9)
                           (g$hashtable-set!$5162$RATN9
                             g$label->binding-table$6544$RATN9
                             g$label$6663$RATN9
                             g$binding$6665$RATN9)))
                        ((case-lambda
                           ((g$t$6666$RATN9)
                            (if (eqv? g$t$6666$RATN9 'global)
                              (cons
                                'global
                                (cons
                                  g$lib$6660$RATN9
                                  (cdr g$binding$6664$RATN9)))
                              (if (eqv? g$t$6666$RATN9 'global-macro)
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$6660$RATN9
                                    (cdr g$binding$6664$RATN9)))
                                (if (eqv? g$t$6666$RATN9 'global-macro!)
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$6660$RATN9
                                      (cdr g$binding$6664$RATN9)))
                                  g$binding$6664$RATN9)))))
                         (car g$binding$6664$RATN9)))))
                    (car g$x$6662$RATN9)
                    (cdr g$x$6662$RATN9))))
                g$exp-env$6661$RATN9)))
           (g$library-env$6506$RATN9 g$lib$6660$RATN9))
          ((g$current-library-collection$6493$RATN9) g$lib$6660$RATN9)))))
   (g$install-library$6546$RATN9
     g$install-library$6750$RATN9
     (case-lambda
       ((g$id$6667$RATN9
          g$name$6668$RATN9
          g$ver$6669$RATN9
          g$imp*$6670$RATN9
          g$vis*$6671$RATN9
          g$inv*$6672$RATN9
          g$exp-subst$6673$RATN9
          g$exp-env$6674$RATN9
          g$visit-proc$6675$RATN9
          g$invoke-proc$6676$RATN9
          g$visit-code$6677$RATN9
          g$invoke-code$6678$RATN9
          g$visible?$6679$RATN9
          g$source-file-name$6680$RATN9)
        ((case-lambda
           ((g$imp-lib*$6681$RATN9 g$vis-lib*$6682$RATN9 g$inv-lib*$6683$RATN9)
            (begin
              (if (if (symbol? g$id$6667$RATN9)
                    (if (list? g$name$6668$RATN9)
                      (begin '#f (list? g$ver$6669$RATN9))
                      '#f)
                    '#f)
                (void)
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$6667$RATN9
                  g$name$6668$RATN9
                  g$ver$6669$RATN9))
              (if (g$library-exists?$6542$RATN9 g$name$6668$RATN9)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$6668$RATN9)
                (void))
              ((case-lambda
                 ((g$lib$6684$RATN9)
                  (g$install-library-record$6545$RATN9 g$lib$6684$RATN9)))
               (g$make-library$6498$RATN9
                 g$id$6667$RATN9
                 g$name$6668$RATN9
                 g$ver$6669$RATN9
                 g$imp-lib*$6681$RATN9
                 g$vis-lib*$6682$RATN9
                 g$inv-lib*$6683$RATN9
                 g$exp-subst$6673$RATN9
                 g$exp-env$6674$RATN9
                 g$visit-proc$6675$RATN9
                 g$invoke-proc$6676$RATN9
                 g$visit-code$6677$RATN9
                 g$invoke-code$6678$RATN9
                 g$visible?$6679$RATN9
                 g$source-file-name$6680$RATN9)))))
         (map g$find-library-by-spec/die$6543$RATN9 g$imp*$6670$RATN9)
         (map g$find-library-by-spec/die$6543$RATN9 g$vis*$6671$RATN9)
         (map g$find-library-by-spec/die$6543$RATN9 g$inv*$6672$RATN9)))))
   (g$imported-label->binding$6547$RATN9
     g$imported-label->binding$6751$RATN9
     (case-lambda
       ((g$lab$6685$RATN9)
        (g$hashtable-ref$5161$RATN9
          g$label->binding-table$6544$RATN9
          g$lab$6685$RATN9
          '#f))))
   (g$invoke-library$6548$RATN9
     g$invoke-library$6752$RATN9
     (case-lambda
       ((g$lib$6686$RATN9)
        ((case-lambda
           ((g$invoke$6687$RATN9)
            (if (procedure? g$invoke$6687$RATN9)
              (begin
                (g$set-library-invoke-state!$6522$RATN9
                  g$lib$6686$RATN9
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$6686$RATN9))))
                (for-each
                  g$invoke-library$6548$RATN9
                  (g$library-inv*$6504$RATN9 g$lib$6686$RATN9))
                (g$set-library-invoke-state!$6522$RATN9
                  g$lib$6686$RATN9
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$6686$RATN9))))
                (g$invoke$6687$RATN9)
                (g$set-library-invoke-state!$6522$RATN9 g$lib$6686$RATN9 '#t))
              (void))))
         (g$library-invoke-state$6508$RATN9 g$lib$6686$RATN9)))))
   (g$visit-library$6549$RATN9
     g$visit-library$6753$RATN9
     (case-lambda
       ((g$lib$6688$RATN9)
        ((case-lambda
           ((g$visit$6689$RATN9)
            (if (procedure? g$visit$6689$RATN9)
              (begin
                (g$set-library-visit-state!$6521$RATN9
                  g$lib$6688$RATN9
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$6688$RATN9))))
                (for-each
                  g$invoke-library$6548$RATN9
                  (g$library-vis*$6503$RATN9 g$lib$6688$RATN9))
                (g$set-library-visit-state!$6521$RATN9
                  g$lib$6688$RATN9
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$6688$RATN9))))
                (g$visit$6689$RATN9)
                (g$set-library-visit-state!$6521$RATN9 g$lib$6688$RATN9 '#t))
              (void))))
         (g$library-visit-state$6507$RATN9 g$lib$6688$RATN9)))))
   (g$invoke-library-by-spec$6550$RATN9
     g$invoke-library-by-spec$6754$RATN9
     (case-lambda
       ((g$spec$6690$RATN9)
        (g$invoke-library$6548$RATN9
          (g$find-library-by-spec/die$6543$RATN9 g$spec$6690$RATN9)))))
   (g$installed-libraries$6551$RATN9
     g$installed-libraries$6755$RATN9
     (case-lambda
       ((g$all?$6691$RATN9)
        ((letrec ((g$f$6692$RATN9
                    (case-lambda
                      ((g$ls$6693$RATN9)
                       (if (null? g$ls$6693$RATN9)
                         '()
                         (if ((case-lambda
                                ((g$t$6694$RATN9)
                                 (if g$t$6694$RATN9
                                   g$t$6694$RATN9
                                   (begin
                                     '#f
                                     (g$library-visible?$6511$RATN9
                                       (car g$ls$6693$RATN9))))))
                              g$all?$6691$RATN9)
                           (cons
                             (car g$ls$6693$RATN9)
                             (g$f$6692$RATN9 (cdr g$ls$6693$RATN9)))
                           (g$f$6692$RATN9 (cdr g$ls$6693$RATN9))))))))
           g$f$6692$RATN9)
         ((g$current-library-collection$6493$RATN9))))
       (() (g$installed-libraries$6551$RATN9 '#f))))
   (g$library-spec$6552$RATN9
     g$library-spec$6756$RATN9
     (case-lambda
       ((g$x$6695$RATN9)
        (begin
          (if (g$library?$6497$RATN9 g$x$6695$RATN9)
            (void)
            (assertion-violation 'library-spec '"not a library" g$x$6695$RATN9))
          (list
            (g$library-id$6499$RATN9 g$x$6695$RATN9)
            (g$library-name$6500$RATN9 g$x$6695$RATN9)
            (g$library-version$6501$RATN9 g$x$6695$RATN9)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$6757$RATN9
     g$build-global-define$6867$RATN9
     (case-lambda ((g$x$6838$RATN9) (g$build-void$6834$RATN9))))
   (g$build-lambda$6806$RATN9
     g$build-lambda$6868$RATN9
     (case-lambda
       ((g$ae$6839$RATN9 g$vars$6840$RATN9 g$exp$6841$RATN9)
        (list 'case-lambda (list g$vars$6840$RATN9 g$exp$6841$RATN9)))))
   (g$build-case-lambda$6807$RATN9
     g$build-case-lambda$6869$RATN9
     (case-lambda
       ((g$ae$6842$RATN9 g$vars*$6843$RATN9 g$exp*$6844$RATN9)
        (cons 'case-lambda (map list g$vars*$6843$RATN9 g$exp*$6844$RATN9)))))
   (g$build-let$6808$RATN9
     g$build-let$6870$RATN9
     (case-lambda
       ((g$ae$6845$RATN9 g$lhs*$6846$RATN9 g$rhs*$6847$RATN9 g$body$6848$RATN9)
        (cons
          (g$build-lambda$6806$RATN9
            g$ae$6845$RATN9
            g$lhs*$6846$RATN9
            g$body$6848$RATN9)
          g$rhs*$6847$RATN9))))
   (g$build-sequence$6833$RATN9
     g$build-sequence$6871$RATN9
     (case-lambda
       ((g$ae$6849$RATN9 g$exps$6850$RATN9)
        ((letrec ((g$loop$6851$RATN9
                    (case-lambda
                      ((g$exps$6852$RATN9)
                       (if (null? (cdr g$exps$6852$RATN9))
                         (car g$exps$6852$RATN9)
                         (if (equal?
                               (car g$exps$6852$RATN9)
                               (g$build-void$6834$RATN9))
                           (g$loop$6851$RATN9 (cdr g$exps$6852$RATN9))
                           (cons 'begin g$exps$6852$RATN9)))))))
           g$loop$6851$RATN9)
         g$exps$6850$RATN9))))
   (g$build-void$6834$RATN9
     g$build-void$6872$RATN9
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$6835$RATN9
     g$build-letrec$6873$RATN9
     (case-lambda
       ((g$ae$6853$RATN9
          g$vars$6854$RATN9
          g$val-exps$6855$RATN9
          g$body-exp$6856$RATN9)
        (if (null? g$vars$6854$RATN9)
          g$body-exp$6856$RATN9
          (list
            'letrec
            (map list g$vars$6854$RATN9 g$val-exps$6855$RATN9)
            g$body-exp$6856$RATN9)))))
   (g$build-letrec*$6836$RATN9
     g$build-letrec*$6874$RATN9
     (case-lambda
       ((g$ae$6857$RATN9
          g$vars$6858$RATN9
          g$val-exps$6859$RATN9
          g$body-exp$6860$RATN9)
        (if (null? g$vars$6858$RATN9)
          g$body-exp$6860$RATN9
          (list
            'letrec*
            (map list g$vars$6858$RATN9 g$val-exps$6859$RATN9)
            g$body-exp$6860$RATN9)))))
   (g$build-library-letrec*$6837$RATN9
     g$build-library-letrec*$6875$RATN9
     (case-lambda
       ((g$ae$6861$RATN9
          g$name$6862$RATN9
          g$vars$6863$RATN9
          g$locs$6864$RATN9
          g$val-exps$6865$RATN9
          g$body-exp$6866$RATN9)
        (list
          'library-letrec*
          g$name$6862$RATN9
          (map list g$vars$6863$RATN9 g$locs$6864$RATN9 g$val-exps$6865$RATN9)
          g$body-exp$6866$RATN9)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$6876$RATN9
     g$set-cons$10519$RATN9
     (case-lambda
       ((g$x$7329$RATN9 g$ls$7330$RATN9)
        (if (memq g$x$7329$RATN9 g$ls$7330$RATN9)
          g$ls$7330$RATN9
          (cons g$x$7329$RATN9 g$ls$7330$RATN9)))))
   (g$set-union$6877$RATN9
     g$set-union$10520$RATN9
     (case-lambda
       ((g$ls1$7331$RATN9 g$ls2$7332$RATN9)
        (if (null? g$ls1$7331$RATN9)
          g$ls2$7332$RATN9
          (if (memq (car g$ls1$7331$RATN9) g$ls2$7332$RATN9)
            (g$set-union$6877$RATN9 (cdr g$ls1$7331$RATN9) g$ls2$7332$RATN9)
            (cons
              (car g$ls1$7331$RATN9)
              (g$set-union$6877$RATN9
                (cdr g$ls1$7331$RATN9)
                g$ls2$7332$RATN9)))))))
   (g$top-mark*$6879$RATN9 g$top-mark*$10521$RATN9 '(top))
   (g$top-marked?$6880$RATN9
     g$top-marked?$10522$RATN9
     (case-lambda ((g$m*$7333$RATN9) (memq 'top g$m*$7333$RATN9))))
   (g$gen-lexical$6881$RATN9
     g$gen-lexical$10523$RATN9
     (case-lambda
       ((g$sym$7334$RATN9)
        (if (symbol? g$sym$7334$RATN9)
          (gensym g$sym$7334$RATN9)
          (if (g$stx?$6909$RATN9 g$sym$7334$RATN9)
            (g$gen-lexical$6881$RATN9 (g$id->sym$6938$RATN9 g$sym$7334$RATN9))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$7334$RATN9))))))
   (g$gen-global$6882$RATN9
     g$gen-global$10524$RATN9
     (case-lambda
       ((g$x$7335$RATN9) (g$gen-lexical$6881$RATN9 g$x$7335$RATN9))))
   (g$gen-label$6883$RATN9
     g$gen-label$10525$RATN9
     (case-lambda ((g$_$7336$RATN9) (gensym))))
   (g$gen-top-level-label$6884$RATN9
     g$gen-top-level-label$10526$RATN9
     (case-lambda
       ((g$id$7337$RATN9 g$rib$7338$RATN9)
        (letrec* ((g$find$7339$RATN9
                    (case-lambda
                      ((g$sym$7345$RATN9
                         g$mark*$7346$RATN9
                         g$sym*$7347$RATN9
                         g$mark**$7348$RATN9
                         g$label*$7349$RATN9)
                       (if (pair? g$sym*$7347$RATN9)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7345$RATN9
                                        (car g$sym*$7347$RATN9))
                                 (begin
                                   '#f
                                   (g$same-marks?$6939$RATN9
                                     g$mark*$7346$RATN9
                                     (car g$mark**$7348$RATN9)))
                                 '#f)
                             (car g$label*$7349$RATN9)
                             (g$find$7339$RATN9
                               g$sym$7345$RATN9
                               g$mark*$7346$RATN9
                               (cdr g$sym*$7347$RATN9)
                               (cdr g$mark**$7348$RATN9)
                               (cdr g$label*$7349$RATN9))))
                         '#f)))))
          ((case-lambda
             ((g$sym$7340$RATN9 g$mark*$7341$RATN9)
              ((case-lambda
                 ((g$sym*$7342$RATN9)
                  ((case-lambda
                     ((g$t$7343$RATN9)
                      (if g$t$7343$RATN9
                        ((case-lambda
                           ((g$label$7344$RATN9)
                            (if (g$imported-label->binding$6751$RATN9
                                  g$label$7344$RATN9)
                              (gensym)
                              g$label$7344$RATN9)))
                         g$t$7343$RATN9)
                        (gensym))))
                   (if (memq
                         g$sym$7340$RATN9
                         (g$rib-sym*$6892$RATN9 g$rib$7338$RATN9))
                     (begin
                       '#f
                       (g$find$7339$RATN9
                         g$sym$7340$RATN9
                         g$mark*$7341$RATN9
                         g$sym*$7342$RATN9
                         (g$rib-mark**$6893$RATN9 g$rib$7338$RATN9)
                         (g$rib-label*$6894$RATN9 g$rib$7338$RATN9)))
                     '#f))))
               (g$rib-sym*$6892$RATN9 g$rib$7338$RATN9))))
           (g$id->sym$6938$RATN9 g$id$7337$RATN9)
           (g$stx-mark*$6912$RATN9 g$id$7337$RATN9))))))
   (g$gen-define-label+loc$6885$RATN9
     g$gen-define-label+loc$10527$RATN9
     (case-lambda
       ((g$id$7350$RATN9 g$rib$7351$RATN9)
        ((case-lambda
           ((g$t$7352$RATN9)
            (if g$t$7352$RATN9
              ((case-lambda
                 ((g$env$7353$RATN9)
                  ((case-lambda
                     ((g$label$7354$RATN9 g$locs$7355$RATN9)
                      (values
                        g$label$7354$RATN9
                        ((case-lambda
                           ((g$t$7356$RATN9)
                            (if g$t$7356$RATN9
                              (cdr g$t$7356$RATN9)
                              ((case-lambda
                                 ((g$loc$7357$RATN9)
                                  (begin
                                    (g$set-interaction-env-locs!$7298$RATN9
                                      g$env$7353$RATN9
                                      (cons
                                        (cons
                                          g$label$7354$RATN9
                                          g$loc$7357$RATN9)
                                        g$locs$7355$RATN9))
                                    g$loc$7357$RATN9)))
                               (g$gen-lexical$6881$RATN9 g$id$7350$RATN9)))))
                         (assq g$label$7354$RATN9 g$locs$7355$RATN9)))))
                   (g$gen-top-level-label$6884$RATN9
                     g$id$7350$RATN9
                     g$rib$7351$RATN9)
                   (g$interaction-env-locs$7295$RATN9 g$env$7353$RATN9))))
               g$t$7352$RATN9)
              (values (gensym) (g$gen-lexical$6881$RATN9 g$id$7350$RATN9)))))
         (g$top-level-context$7328$RATN9)))))
   (g$gen-define-label$6886$RATN9
     g$gen-define-label$10528$RATN9
     (case-lambda
       ((g$id$7358$RATN9 g$rib$7359$RATN9)
        (if (g$top-level-context$7328$RATN9)
          (g$gen-top-level-label$6884$RATN9 g$id$7358$RATN9 g$rib$7359$RATN9)
          (gensym)))))
   (g$7735$6887$RATN9
     g$7735$10529$RATN9
     (make-record-type-descriptor
       'rib
       '#f
       'g$7738$RATN9
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq))))
   (g$7737$6888$RATN9 g$7737$10530$RATN9 '#f)
   (g$7736$6889$RATN9
     g$7736$10531$RATN9
     (make-record-constructor-descriptor
       g$7735$6887$RATN9
       '#f
       g$7737$6888$RATN9))
   (g$rib?$6890$RATN9
     g$rib?$10532$RATN9
     (record-predicate g$7735$6887$RATN9))
   (g$make-rib$6891$RATN9
     g$make-rib$10533$RATN9
     (record-constructor g$7736$6889$RATN9))
   (g$rib-sym*$6892$RATN9
     g$rib-sym*$10534$RATN9
     (record-accessor g$7735$6887$RATN9 '0))
   (g$rib-mark**$6893$RATN9
     g$rib-mark**$10535$RATN9
     (record-accessor g$7735$6887$RATN9 '1))
   (g$rib-label*$6894$RATN9
     g$rib-label*$10536$RATN9
     (record-accessor g$7735$6887$RATN9 '2))
   (g$rib-sealed/freq$6895$RATN9
     g$rib-sealed/freq$10537$RATN9
     (record-accessor g$7735$6887$RATN9 '3))
   (g$set-rib-sym*!$6896$RATN9
     g$set-rib-sym*!$10538$RATN9
     (record-mutator g$7735$6887$RATN9 '0))
   (g$set-rib-mark**!$6897$RATN9
     g$set-rib-mark**!$10539$RATN9
     (record-mutator g$7735$6887$RATN9 '1))
   (g$set-rib-label*!$6898$RATN9
     g$set-rib-label*!$10540$RATN9
     (record-mutator g$7735$6887$RATN9 '2))
   (g$set-rib-sealed/freq!$6899$RATN9
     g$set-rib-sealed/freq!$10541$RATN9
     (record-mutator g$7735$6887$RATN9 '3))
   (g$make-empty-rib$6900$RATN9
     g$make-empty-rib$10542$RATN9
     (case-lambda (() (g$make-rib$6891$RATN9 '() '() '() '#f))))
   (g$extend-rib!$6901$RATN9
     g$extend-rib!$10543$RATN9
     (case-lambda
       ((g$rib$7360$RATN9 g$id$7361$RATN9 g$label$7362$RATN9)
        (letrec* ((g$find$7363$RATN9
                    (case-lambda
                      ((g$sym$7369$RATN9
                         g$mark*$7370$RATN9
                         g$sym*$7371$RATN9
                         g$mark**$7372$RATN9
                         g$label*$7373$RATN9)
                       (if (pair? g$sym*$7371$RATN9)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7369$RATN9
                                        (car g$sym*$7371$RATN9))
                                 (begin
                                   '#f
                                   (g$same-marks?$6939$RATN9
                                     g$mark*$7370$RATN9
                                     (car g$mark**$7372$RATN9)))
                                 '#f)
                             g$label*$7373$RATN9
                             (g$find$7363$RATN9
                               g$sym$7369$RATN9
                               g$mark*$7370$RATN9
                               (cdr g$sym*$7371$RATN9)
                               (cdr g$mark**$7372$RATN9)
                               (cdr g$label*$7373$RATN9))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$6895$RATN9 g$rib$7360$RATN9)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$7360$RATN9)
              (void))
            ((case-lambda
               ((g$sym$7364$RATN9 g$mark*$7365$RATN9)
                ((case-lambda
                   ((g$sym*$7366$RATN9)
                    ((case-lambda
                       ((g$t$7367$RATN9)
                        (if g$t$7367$RATN9
                          ((case-lambda
                             ((g$p$7368$RATN9)
                              (if (eq? g$label$7362$RATN9 (car g$p$7368$RATN9))
                                (void)
                                (if (g$top-level-context$7328$RATN9)
                                  (set-car! g$p$7368$RATN9 g$label$7362$RATN9)
                                  (g$syntax-violation$7321$RATN9
                                    '#f
                                    '"cannot redefine"
                                    g$id$7361$RATN9)))))
                           g$t$7367$RATN9)
                          (begin
                            (g$set-rib-sym*!$6896$RATN9
                              g$rib$7360$RATN9
                              (cons g$sym$7364$RATN9 g$sym*$7366$RATN9))
                            (g$set-rib-mark**!$6897$RATN9
                              g$rib$7360$RATN9
                              (cons
                                g$mark*$7365$RATN9
                                (g$rib-mark**$6893$RATN9 g$rib$7360$RATN9)))
                            (g$set-rib-label*!$6898$RATN9
                              g$rib$7360$RATN9
                              (cons
                                g$label$7362$RATN9
                                (g$rib-label*$6894$RATN9 g$rib$7360$RATN9)))))))
                     (if (memq
                           g$sym$7364$RATN9
                           (g$rib-sym*$6892$RATN9 g$rib$7360$RATN9))
                       (begin
                         '#f
                         (g$find$7363$RATN9
                           g$sym$7364$RATN9
                           g$mark*$7365$RATN9
                           g$sym*$7366$RATN9
                           (g$rib-mark**$6893$RATN9 g$rib$7360$RATN9)
                           (g$rib-label*$6894$RATN9 g$rib$7360$RATN9)))
                       '#f))))
                 (g$rib-sym*$6892$RATN9 g$rib$7360$RATN9))))
             (g$id->sym$6938$RATN9 g$id$7361$RATN9)
             (g$stx-mark*$6912$RATN9 g$id$7361$RATN9)))))))
   (g$make-rib-map$6902$RATN9
     g$make-rib-map$10544$RATN9
     (case-lambda
       ((g$sym*$7374$RATN9)
        ((case-lambda
           ((g$ht$7375$RATN9)
            ((letrec ((g$f$7376$RATN9
                        (case-lambda
                          ((g$i$7377$RATN9 g$sym*$7378$RATN9)
                           (if (null? g$sym*$7378$RATN9)
                             g$ht$7375$RATN9
                             (begin
                               (g$hashtable-update!$5165$RATN9
                                 g$ht$7375$RATN9
                                 (car g$sym*$7378$RATN9)
                                 (case-lambda
                                   ((g$x$7379$RATN9)
                                    (cons g$i$7377$RATN9 g$x$7379$RATN9)))
                                 '())
                               (g$f$7376$RATN9
                                 (+ g$i$7377$RATN9 '1)
                                 (cdr g$sym*$7378$RATN9))))))))
               g$f$7376$RATN9)
             '0
             g$sym*$7374$RATN9)))
         (g$make-eq-hashtable$5158$RATN9)))))
   (g$seal-rib!$6903$RATN9
     g$seal-rib!$10545$RATN9
     (case-lambda
       ((g$rib$7380$RATN9)
        ((case-lambda
           ((g$sym*$7381$RATN9)
            (if (null? g$sym*$7381$RATN9)
              (void)
              (begin
                (g$set-rib-sym*!$6896$RATN9
                  g$rib$7380$RATN9
                  (list->vector g$sym*$7381$RATN9))
                (g$set-rib-mark**!$6897$RATN9
                  g$rib$7380$RATN9
                  (list->vector (g$rib-mark**$6893$RATN9 g$rib$7380$RATN9)))
                (g$set-rib-label*!$6898$RATN9
                  g$rib$7380$RATN9
                  (list->vector (g$rib-label*$6894$RATN9 g$rib$7380$RATN9)))
                (g$set-rib-sealed/freq!$6899$RATN9
                  g$rib$7380$RATN9
                  (g$make-rib-map$6902$RATN9 g$sym*$7381$RATN9))))))
         (g$rib-sym*$6892$RATN9 g$rib$7380$RATN9)))))
   (g$unseal-rib!$6904$RATN9
     g$unseal-rib!$10546$RATN9
     (case-lambda
       ((g$rib$7382$RATN9)
        (if (g$rib-sealed/freq$6895$RATN9 g$rib$7382$RATN9)
          (begin
            (g$set-rib-sealed/freq!$6899$RATN9 g$rib$7382$RATN9 '#f)
            (g$set-rib-sym*!$6896$RATN9
              g$rib$7382$RATN9
              (vector->list (g$rib-sym*$6892$RATN9 g$rib$7382$RATN9)))
            (g$set-rib-mark**!$6897$RATN9
              g$rib$7382$RATN9
              (vector->list (g$rib-mark**$6893$RATN9 g$rib$7382$RATN9)))
            (g$set-rib-label*!$6898$RATN9
              g$rib$7382$RATN9
              (vector->list (g$rib-label*$6894$RATN9 g$rib$7382$RATN9))))
          (void)))))
   (g$make-full-rib$6905$RATN9
     g$make-full-rib$10547$RATN9
     (case-lambda
       ((g$id*$7383$RATN9 g$label*$7384$RATN9)
        ((case-lambda
           ((g$r$7385$RATN9)
            (begin (g$seal-rib!$6903$RATN9 g$r$7385$RATN9) g$r$7385$RATN9)))
         (g$make-rib$6891$RATN9
           (map g$id->sym$6938$RATN9 g$id*$7383$RATN9)
           (map g$stx-mark*$6912$RATN9 g$id*$7383$RATN9)
           g$label*$7384$RATN9
           '#f)))))
   (g$7761$6906$RATN9
     g$7761$10548$RATN9
     (make-record-type-descriptor
       'stx
       '#f
       'g$7764$RATN9
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$7763$6907$RATN9 g$7763$10549$RATN9 '#f)
   (g$7762$6908$RATN9
     g$7762$10550$RATN9
     (make-record-constructor-descriptor
       g$7761$6906$RATN9
       '#f
       g$7763$6907$RATN9))
   (g$stx?$6909$RATN9
     g$stx?$10551$RATN9
     (record-predicate g$7761$6906$RATN9))
   (g$make-stx$6910$RATN9
     g$make-stx$10552$RATN9
     (record-constructor g$7762$6908$RATN9))
   (g$stx-expr$6911$RATN9
     g$stx-expr$10553$RATN9
     (record-accessor g$7761$6906$RATN9 '0))
   (g$stx-mark*$6912$RATN9
     g$stx-mark*$10554$RATN9
     (record-accessor g$7761$6906$RATN9 '1))
   (g$stx-subst*$6913$RATN9
     g$stx-subst*$10555$RATN9
     (record-accessor g$7761$6906$RATN9 '2))
   (g$stx-ae*$6914$RATN9
     g$stx-ae*$10556$RATN9
     (record-accessor g$7761$6906$RATN9 '3))
   (g$set-stx-expr!$6915$RATN9
     g$set-stx-expr!$10557$RATN9
     (record-mutator g$7761$6906$RATN9 '0))
   (g$set-stx-mark*!$6916$RATN9
     g$set-stx-mark*!$10558$RATN9
     (record-mutator g$7761$6906$RATN9 '1))
   (g$set-stx-subst*!$6917$RATN9
     g$set-stx-subst*!$10559$RATN9
     (record-mutator g$7761$6906$RATN9 '2))
   (g$set-stx-ae*!$6918$RATN9
     g$set-stx-ae*!$10560$RATN9
     (record-mutator g$7761$6906$RATN9 '3))
   (g$rp$6919$RATN9
     g$rp$10561$RATN9
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$7386$RATN9 g$p$7387$RATN9)
          (begin
            (display '"#<syntax " g$p$7387$RATN9)
            (write (g$stx->datum$6948$RATN9 g$x$7386$RATN9) g$p$7387$RATN9)
            ((case-lambda
               ((g$expr$7388$RATN9)
                (if (annotation? g$expr$7388$RATN9)
                  ((case-lambda
                     ((g$src$7389$RATN9)
                      (if (pair? g$src$7389$RATN9)
                        (begin
                          (display '" [" g$p$7387$RATN9)
                          (display (cdr g$src$7389$RATN9) g$p$7387$RATN9)
                          (display '" of " g$p$7387$RATN9)
                          (display (car g$src$7389$RATN9) g$p$7387$RATN9)
                          (display '"]" g$p$7387$RATN9))
                        (void))))
                   (annotation-source g$expr$7388$RATN9))
                  (void))))
             (g$stx-expr$6911$RATN9 g$x$7386$RATN9))
            (display '">" g$p$7387$RATN9))))))
   (g$datum->stx$6920$RATN9
     g$datum->stx$10562$RATN9
     (case-lambda
       ((g$id$7390$RATN9 g$datum$7391$RATN9)
        (g$make-stx$6910$RATN9
          g$datum$7391$RATN9
          (g$stx-mark*$6912$RATN9 g$id$7390$RATN9)
          (g$stx-subst*$6913$RATN9 g$id$7390$RATN9)
          (g$stx-ae*$6914$RATN9 g$id$7390$RATN9)))))
   (g$gen-mark$6921$RATN9
     g$gen-mark$10563$RATN9
     (case-lambda (() (string '#\m))))
   (g$anti-mark$6922$RATN9 g$anti-mark$10564$RATN9 '#f)
   (g$anti-mark?$6923$RATN9 g$anti-mark?$10565$RATN9 not)
   (g$join-wraps$6924$RATN9
     g$join-wraps$10566$RATN9
     (case-lambda
       ((g$m1*$7392$RATN9 g$s1*$7393$RATN9 g$ae1*$7394$RATN9 g$e$7395$RATN9)
        (letrec* ((g$cancel$7396$RATN9
                    (case-lambda
                      ((g$ls1$7400$RATN9 g$ls2$7401$RATN9)
                       ((letrec ((g$f$7402$RATN9
                                   (case-lambda
                                     ((g$x$7403$RATN9 g$ls1$7404$RATN9)
                                      (if (null? g$ls1$7404$RATN9)
                                        (cdr g$ls2$7401$RATN9)
                                        (cons
                                          g$x$7403$RATN9
                                          (g$f$7402$RATN9
                                            (car g$ls1$7404$RATN9)
                                            (cdr g$ls1$7404$RATN9))))))))
                          g$f$7402$RATN9)
                        (car g$ls1$7400$RATN9)
                        (cdr g$ls1$7400$RATN9))))))
          ((case-lambda
             ((g$m2*$7397$RATN9 g$s2*$7398$RATN9 g$ae2*$7399$RATN9)
              (if (if (not (null? g$m1*$7392$RATN9))
                    (if (not (null? g$m2*$7397$RATN9))
                      (begin
                        '#f
                        (g$anti-mark?$6923$RATN9 (car g$m2*$7397$RATN9)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$7396$RATN9 g$m1*$7392$RATN9 g$m2*$7397$RATN9)
                  (g$cancel$7396$RATN9 g$s1*$7393$RATN9 g$s2*$7398$RATN9)
                  (g$cancel$7396$RATN9 g$ae1*$7394$RATN9 g$ae2*$7399$RATN9))
                (values
                  (append g$m1*$7392$RATN9 g$m2*$7397$RATN9)
                  (append g$s1*$7393$RATN9 g$s2*$7398$RATN9)
                  (append g$ae1*$7394$RATN9 g$ae2*$7399$RATN9)))))
           (g$stx-mark*$6912$RATN9 g$e$7395$RATN9)
           (g$stx-subst*$6913$RATN9 g$e$7395$RATN9)
           (g$stx-ae*$6914$RATN9 g$e$7395$RATN9))))))
   (g$mkstx$6925$RATN9
     g$mkstx$10567$RATN9
     (case-lambda
       ((g$e$7405$RATN9 g$m*$7406$RATN9 g$s*$7407$RATN9 g$ae*$7408$RATN9)
        (if (g$stx?$6909$RATN9 g$e$7405$RATN9)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$6924$RATN9
                 g$m*$7406$RATN9
                 g$s*$7407$RATN9
                 g$ae*$7408$RATN9
                 g$e$7405$RATN9)))
            (case-lambda
              ((g$m*$7412$RATN9 g$s*$7413$RATN9 g$ae*$7414$RATN9)
               ((case-lambda
                  ((g$ae*$7415$RATN9 g$s*$7416$RATN9 g$m*$7417$RATN9)
                   (g$make-stx$6910$RATN9
                     (g$stx-expr$6911$RATN9 g$e$7405$RATN9)
                     g$m*$7417$RATN9
                     g$s*$7416$RATN9
                     g$ae*$7415$RATN9)))
                g$ae*$7414$RATN9
                g$s*$7413$RATN9
                g$m*$7412$RATN9))))
          (g$make-stx$6910$RATN9
            g$e$7405$RATN9
            g$m*$7406$RATN9
            g$s*$7407$RATN9
            g$ae*$7408$RATN9)))))
   (g$add-mark$6926$RATN9
     g$add-mark$10568$RATN9
     (case-lambda
       ((g$m$7418$RATN9 g$e$7419$RATN9 g$ae$7420$RATN9)
        (g$mkstx$6925$RATN9
          g$e$7419$RATN9
          (list g$m$7418$RATN9)
          '(shift)
          (list g$ae$7420$RATN9)))))
   (g$add-subst$6927$RATN9
     g$add-subst$10569$RATN9
     (case-lambda
       ((g$subst$7421$RATN9 g$e$7422$RATN9)
        (g$mkstx$6925$RATN9 g$e$7422$RATN9 '() (list g$subst$7421$RATN9) '()))))
   (g$syntax-kind?$6928$RATN9
     g$syntax-kind?$10570$RATN9
     (case-lambda
       ((g$x$7423$RATN9 g$p?$7424$RATN9)
        (if (g$stx?$6909$RATN9 g$x$7423$RATN9)
          (g$syntax-kind?$6928$RATN9
            (g$stx-expr$6911$RATN9 g$x$7423$RATN9)
            g$p?$7424$RATN9)
          (if (annotation? g$x$7423$RATN9)
            (g$syntax-kind?$6928$RATN9
              (annotation-expression g$x$7423$RATN9)
              g$p?$7424$RATN9)
            (g$p?$7424$RATN9 g$x$7423$RATN9))))))
   (g$syntax-vector->list$6929$RATN9
     g$syntax-vector->list$10571$RATN9
     (case-lambda
       ((g$x$7425$RATN9)
        (if (g$stx?$6909$RATN9 g$x$7425$RATN9)
          ((case-lambda
             ((g$ls$7426$RATN9 g$m*$7427$RATN9 g$s*$7428$RATN9 g$ae*$7429$RATN9)
              (map (case-lambda
                     ((g$x$7430$RATN9)
                      (g$mkstx$6925$RATN9
                        g$x$7430$RATN9
                        g$m*$7427$RATN9
                        g$s*$7428$RATN9
                        g$ae*$7429$RATN9)))
                   g$ls$7426$RATN9)))
           (g$syntax-vector->list$6929$RATN9
             (g$stx-expr$6911$RATN9 g$x$7425$RATN9))
           (g$stx-mark*$6912$RATN9 g$x$7425$RATN9)
           (g$stx-subst*$6913$RATN9 g$x$7425$RATN9)
           (g$stx-ae*$6914$RATN9 g$x$7425$RATN9))
          (if (annotation? g$x$7425$RATN9)
            (g$syntax-vector->list$6929$RATN9
              (annotation-expression g$x$7425$RATN9))
            (if (vector? g$x$7425$RATN9)
              (vector->list g$x$7425$RATN9)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$7425$RATN9)))))))
   (g$syntax-pair?$6930$RATN9
     g$syntax-pair?$10572$RATN9
     (case-lambda
       ((g$x$7431$RATN9) (g$syntax-kind?$6928$RATN9 g$x$7431$RATN9 pair?))))
   (g$syntax-vector?$6931$RATN9
     g$syntax-vector?$10573$RATN9
     (case-lambda
       ((g$x$7432$RATN9) (g$syntax-kind?$6928$RATN9 g$x$7432$RATN9 vector?))))
   (g$syntax-null?$6932$RATN9
     g$syntax-null?$10574$RATN9
     (case-lambda
       ((g$x$7433$RATN9) (g$syntax-kind?$6928$RATN9 g$x$7433$RATN9 null?))))
   (g$syntax-list?$6933$RATN9
     g$syntax-list?$10575$RATN9
     (case-lambda
       ((g$x$7434$RATN9)
        ((case-lambda
           ((g$t$7435$RATN9)
            (if g$t$7435$RATN9
              g$t$7435$RATN9
              (begin
                '#f
                (if (g$syntax-pair?$6930$RATN9 g$x$7434$RATN9)
                  (begin
                    '#f
                    (g$syntax-list?$6933$RATN9
                      (g$syntax-cdr$6935$RATN9 g$x$7434$RATN9)))
                  '#f)))))
         (g$syntax-null?$6932$RATN9 g$x$7434$RATN9)))))
   (g$syntax-car$6934$RATN9
     g$syntax-car$10576$RATN9
     (case-lambda
       ((g$x$7436$RATN9)
        (if (g$stx?$6909$RATN9 g$x$7436$RATN9)
          (g$mkstx$6925$RATN9
            (g$syntax-car$6934$RATN9 (g$stx-expr$6911$RATN9 g$x$7436$RATN9))
            (g$stx-mark*$6912$RATN9 g$x$7436$RATN9)
            (g$stx-subst*$6913$RATN9 g$x$7436$RATN9)
            (g$stx-ae*$6914$RATN9 g$x$7436$RATN9))
          (if (annotation? g$x$7436$RATN9)
            (g$syntax-car$6934$RATN9 (annotation-expression g$x$7436$RATN9))
            (if (pair? g$x$7436$RATN9)
              (car g$x$7436$RATN9)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$7436$RATN9)))))))
   (g$syntax-cdr$6935$RATN9
     g$syntax-cdr$10577$RATN9
     (case-lambda
       ((g$x$7437$RATN9)
        (if (g$stx?$6909$RATN9 g$x$7437$RATN9)
          (g$mkstx$6925$RATN9
            (g$syntax-cdr$6935$RATN9 (g$stx-expr$6911$RATN9 g$x$7437$RATN9))
            (g$stx-mark*$6912$RATN9 g$x$7437$RATN9)
            (g$stx-subst*$6913$RATN9 g$x$7437$RATN9)
            (g$stx-ae*$6914$RATN9 g$x$7437$RATN9))
          (if (annotation? g$x$7437$RATN9)
            (g$syntax-cdr$6935$RATN9 (annotation-expression g$x$7437$RATN9))
            (if (pair? g$x$7437$RATN9)
              (cdr g$x$7437$RATN9)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$7437$RATN9)))))))
   (g$syntax->list$6936$RATN9
     g$syntax->list$10578$RATN9
     (case-lambda
       ((g$x$7438$RATN9)
        (if (g$syntax-pair?$6930$RATN9 g$x$7438$RATN9)
          (cons
            (g$syntax-car$6934$RATN9 g$x$7438$RATN9)
            (g$syntax->list$6936$RATN9
              (g$syntax-cdr$6935$RATN9 g$x$7438$RATN9)))
          (if (g$syntax-null?$6932$RATN9 g$x$7438$RATN9)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$7438$RATN9))))))
   (g$id?$6937$RATN9
     g$id?$10579$RATN9
     (case-lambda
       ((g$x$7439$RATN9)
        (if (g$stx?$6909$RATN9 g$x$7439$RATN9)
          (begin
            '#f
            ((case-lambda
               ((g$expr$7440$RATN9)
                (symbol?
                  (if (annotation? g$expr$7440$RATN9)
                    (annotation-stripped g$expr$7440$RATN9)
                    g$expr$7440$RATN9))))
             (g$stx-expr$6911$RATN9 g$x$7439$RATN9)))
          '#f))))
   (g$id->sym$6938$RATN9
     g$id->sym$10580$RATN9
     (case-lambda
       ((g$x$7441$RATN9)
        (begin
          (if (g$stx?$6909$RATN9 g$x$7441$RATN9)
            (void)
            (error 'id->sym '"BUG in ikarus: not an id" g$x$7441$RATN9))
          ((case-lambda
             ((g$expr$7442$RATN9)
              ((case-lambda
                 ((g$sym$7443$RATN9)
                  (if (symbol? g$sym$7443$RATN9)
                    g$sym$7443$RATN9
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$7441$RATN9))))
               (if (annotation? g$expr$7442$RATN9)
                 (annotation-stripped g$expr$7442$RATN9)
                 g$expr$7442$RATN9))))
           (g$stx-expr$6911$RATN9 g$x$7441$RATN9))))))
   (g$same-marks?$6939$RATN9
     g$same-marks?$10581$RATN9
     (case-lambda
       ((g$x$7444$RATN9 g$y$7445$RATN9)
        ((case-lambda
           ((g$t$7446$RATN9)
            (if g$t$7446$RATN9
              g$t$7446$RATN9
              (begin
                '#f
                (if (pair? g$x$7444$RATN9)
                  (if (pair? g$y$7445$RATN9)
                    (if (eq? (car g$x$7444$RATN9) (car g$y$7445$RATN9))
                      (begin
                        '#f
                        (g$same-marks?$6939$RATN9
                          (cdr g$x$7444$RATN9)
                          (cdr g$y$7445$RATN9)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$7444$RATN9) (begin '#f (null? g$y$7445$RATN9)) '#f)))))
   (g$bound-id=?$6940$RATN9
     g$bound-id=?$10582$RATN9
     (case-lambda
       ((g$x$7447$RATN9 g$y$7448$RATN9)
        (if (eq? (g$id->sym$6938$RATN9 g$x$7447$RATN9)
                 (g$id->sym$6938$RATN9 g$y$7448$RATN9))
          (begin
            '#f
            (g$same-marks?$6939$RATN9
              (g$stx-mark*$6912$RATN9 g$x$7447$RATN9)
              (g$stx-mark*$6912$RATN9 g$y$7448$RATN9)))
          '#f))))
   (g$free-id=?$6941$RATN9
     g$free-id=?$10583$RATN9
     (case-lambda
       ((g$i$7449$RATN9 g$j$7450$RATN9)
        ((case-lambda
           ((g$t0$7451$RATN9 g$t1$7452$RATN9)
            (if ((case-lambda
                   ((g$t$7453$RATN9)
                    (if g$t$7453$RATN9
                      g$t$7453$RATN9
                      (begin '#f g$t1$7452$RATN9))))
                 g$t0$7451$RATN9)
              (eq? g$t0$7451$RATN9 g$t1$7452$RATN9)
              (eq? (g$id->sym$6938$RATN9 g$i$7449$RATN9)
                   (g$id->sym$6938$RATN9 g$j$7450$RATN9)))))
         (g$id->real-label$6951$RATN9 g$i$7449$RATN9)
         (g$id->real-label$6951$RATN9 g$j$7450$RATN9)))))
   (g$valid-bound-ids?$6942$RATN9
     g$valid-bound-ids?$10584$RATN9
     (case-lambda
       ((g$id*$7454$RATN9)
        (if (g$for-all$5365$RATN9 g$id?$6937$RATN9 g$id*$7454$RATN9)
          (begin '#f (g$distinct-bound-ids?$6943$RATN9 g$id*$7454$RATN9))
          '#f))))
   (g$distinct-bound-ids?$6943$RATN9
     g$distinct-bound-ids?$10585$RATN9
     (case-lambda
       ((g$id*$7455$RATN9)
        ((case-lambda
           ((g$t$7456$RATN9)
            (if g$t$7456$RATN9
              g$t$7456$RATN9
              (begin
                '#f
                (if (not (g$bound-id-member?$6944$RATN9
                           (car g$id*$7455$RATN9)
                           (cdr g$id*$7455$RATN9)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$6943$RATN9 (cdr g$id*$7455$RATN9)))
                  '#f)))))
         (null? g$id*$7455$RATN9)))))
   (g$bound-id-member?$6944$RATN9
     g$bound-id-member?$10586$RATN9
     (case-lambda
       ((g$id$7457$RATN9 g$id*$7458$RATN9)
        (if (pair? g$id*$7458$RATN9)
          (begin
            '#f
            ((case-lambda
               ((g$t$7459$RATN9)
                (if g$t$7459$RATN9
                  g$t$7459$RATN9
                  (begin
                    '#f
                    (g$bound-id-member?$6944$RATN9
                      g$id$7457$RATN9
                      (cdr g$id*$7458$RATN9))))))
             (g$bound-id=?$6940$RATN9 g$id$7457$RATN9 (car g$id*$7458$RATN9))))
          '#f))))
   (g$self-evaluating?$6945$RATN9
     g$self-evaluating?$10587$RATN9
     (case-lambda
       ((g$x$7460$RATN9)
        ((case-lambda
           ((g$t$7461$RATN9)
            (if g$t$7461$RATN9
              g$t$7461$RATN9
              ((case-lambda
                 ((g$t$7462$RATN9)
                  (if g$t$7462$RATN9
                    g$t$7462$RATN9
                    ((case-lambda
                       ((g$t$7463$RATN9)
                        (if g$t$7463$RATN9
                          g$t$7463$RATN9
                          ((case-lambda
                             ((g$t$7464$RATN9)
                              (if g$t$7464$RATN9
                                g$t$7464$RATN9
                                (begin '#f (bytevector? g$x$7460$RATN9)))))
                           (boolean? g$x$7460$RATN9)))))
                     (char? g$x$7460$RATN9)))))
               (string? g$x$7460$RATN9)))))
         (number? g$x$7460$RATN9)))))
   (g$strip-annotations$6946$RATN9
     g$strip-annotations$10588$RATN9
     (case-lambda
       ((g$x$7465$RATN9)
        (if (pair? g$x$7465$RATN9)
          (cons
            (g$strip-annotations$6946$RATN9 (car g$x$7465$RATN9))
            (g$strip-annotations$6946$RATN9 (cdr g$x$7465$RATN9)))
          (if (vector? g$x$7465$RATN9)
            (vector-map g$strip-annotations$6946$RATN9 g$x$7465$RATN9)
            (if (annotation? g$x$7465$RATN9)
              (annotation-stripped g$x$7465$RATN9)
              g$x$7465$RATN9))))))
   (g$strip$6947$RATN9
     g$strip$10589$RATN9
     (case-lambda
       ((g$x$7466$RATN9 g$m*$7467$RATN9)
        (if (g$top-marked?$6880$RATN9 g$m*$7467$RATN9)
          (if ((case-lambda
                 ((g$t$7468$RATN9)
                  (if g$t$7468$RATN9
                    g$t$7468$RATN9
                    ((case-lambda
                       ((g$t$7469$RATN9)
                        (if g$t$7469$RATN9
                          g$t$7469$RATN9
                          (begin
                            '#f
                            (if (vector? g$x$7466$RATN9)
                              (if (> (vector-length g$x$7466$RATN9) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$7466$RATN9 '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$7466$RATN9)
                       (begin '#f (annotation? (car g$x$7466$RATN9)))
                       '#f)))))
               (annotation? g$x$7466$RATN9))
            (g$strip-annotations$6946$RATN9 g$x$7466$RATN9)
            g$x$7466$RATN9)
          ((letrec ((g$f$7470$RATN9
                      (case-lambda
                        ((g$x$7471$RATN9)
                         (if (g$stx?$6909$RATN9 g$x$7471$RATN9)
                           (g$strip$6947$RATN9
                             (g$stx-expr$6911$RATN9 g$x$7471$RATN9)
                             (g$stx-mark*$6912$RATN9 g$x$7471$RATN9))
                           (if (annotation? g$x$7471$RATN9)
                             (annotation-stripped g$x$7471$RATN9)
                             (if (pair? g$x$7471$RATN9)
                               ((case-lambda
                                  ((g$a$7472$RATN9 g$d$7473$RATN9)
                                   (if (if (eq? g$a$7472$RATN9
                                                (car g$x$7471$RATN9))
                                         (begin
                                           '#f
                                           (eq? g$d$7473$RATN9
                                                (cdr g$x$7471$RATN9)))
                                         '#f)
                                     g$x$7471$RATN9
                                     (cons g$a$7472$RATN9 g$d$7473$RATN9))))
                                (g$f$7470$RATN9 (car g$x$7471$RATN9))
                                (g$f$7470$RATN9 (cdr g$x$7471$RATN9)))
                               (if (vector? g$x$7471$RATN9)
                                 ((case-lambda
                                    ((g$old$7474$RATN9)
                                     ((case-lambda
                                        ((g$new$7475$RATN9)
                                         (if (g$for-all$5365$RATN9
                                               eq?
                                               g$old$7474$RATN9
                                               g$new$7475$RATN9)
                                           g$x$7471$RATN9
                                           (list->vector g$new$7475$RATN9))))
                                      (map g$f$7470$RATN9 g$old$7474$RATN9))))
                                  (vector->list g$x$7471$RATN9))
                                 g$x$7471$RATN9))))))))
             g$f$7470$RATN9)
           g$x$7466$RATN9)))))
   (g$stx->datum$6948$RATN9
     g$stx->datum$10590$RATN9
     (case-lambda
       ((g$x$7476$RATN9) (g$strip$6947$RATN9 g$x$7476$RATN9 '()))))
   (g$same-marks*?$6949$RATN9
     g$same-marks*?$10591$RATN9
     (case-lambda
       ((g$mark*$7477$RATN9 g$mark**$7478$RATN9 g$si$7479$RATN9)
        (if (null? g$si$7479$RATN9)
          '#f
          (if (g$same-marks?$6939$RATN9
                g$mark*$7477$RATN9
                (vector-ref g$mark**$7478$RATN9 (car g$si$7479$RATN9)))
            (car g$si$7479$RATN9)
            (g$same-marks*?$6949$RATN9
              g$mark*$7477$RATN9
              g$mark**$7478$RATN9
              (cdr g$si$7479$RATN9)))))))
   (g$id->label$6950$RATN9
     g$id->label$10592$RATN9
     (case-lambda
       ((g$id$7480$RATN9)
        ((case-lambda
           ((g$t$7481$RATN9)
            (if g$t$7481$RATN9
              g$t$7481$RATN9
              (begin
                '#f
                ((case-lambda
                   ((g$t$7482$RATN9)
                    (if g$t$7482$RATN9
                      ((case-lambda
                         ((g$env$7483$RATN9)
                          ((case-lambda
                             ((g$rib$7484$RATN9)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$6885$RATN9
                                     g$id$7480$RATN9
                                     g$rib$7484$RATN9)))
                                (case-lambda
                                  ((g$lab$7487$RATN9 g$loc_$7488$RATN9)
                                   ((case-lambda
                                      ((g$loc_$7489$RATN9 g$lab$7490$RATN9)
                                       (begin
                                         (g$extend-rib!$6901$RATN9
                                           g$rib$7484$RATN9
                                           g$id$7480$RATN9
                                           g$lab$7490$RATN9)
                                         g$lab$7490$RATN9)))
                                    g$loc_$7488$RATN9
                                    g$lab$7487$RATN9))))))
                           (g$interaction-env-rib$7293$RATN9
                             g$env$7483$RATN9))))
                       g$t$7482$RATN9)
                      '#f)))
                 (g$top-level-context$7328$RATN9))))))
         (g$id->real-label$6951$RATN9 g$id$7480$RATN9)))))
   (g$id->real-label$6951$RATN9
     g$id->real-label$10593$RATN9
     (case-lambda
       ((g$id$7491$RATN9)
        ((case-lambda
           ((g$sym$7492$RATN9)
            ((letrec ((g$search$7493$RATN9
                        (case-lambda
                          ((g$subst*$7494$RATN9 g$mark*$7495$RATN9)
                           (if (null? g$subst*$7494$RATN9)
                             '#f
                             (if (eq? (car g$subst*$7494$RATN9) 'shift)
                               (g$search$7493$RATN9
                                 (cdr g$subst*$7494$RATN9)
                                 (cdr g$mark*$7495$RATN9))
                               ((case-lambda
                                  ((g$rib$7496$RATN9)
                                   ((case-lambda
                                      ((g$t$7497$RATN9)
                                       (if g$t$7497$RATN9
                                         ((case-lambda
                                            ((g$ht$7498$RATN9)
                                             ((case-lambda
                                                ((g$si$7499$RATN9)
                                                 ((case-lambda
                                                    ((g$i$7500$RATN9)
                                                     (if g$i$7500$RATN9
                                                       (vector-ref
                                                         (g$rib-label*$6894$RATN9
                                                           g$rib$7496$RATN9)
                                                         g$i$7500$RATN9)
                                                       (g$search$7493$RATN9
                                                         (cdr g$subst*$7494$RATN9)
                                                         g$mark*$7495$RATN9))))
                                                  (if g$si$7499$RATN9
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$6949$RATN9
                                                        g$mark*$7495$RATN9
                                                        (g$rib-mark**$6893$RATN9
                                                          g$rib$7496$RATN9)
                                                        (reverse
                                                          g$si$7499$RATN9)))
                                                    '#f))))
                                              (g$hashtable-ref$5161$RATN9
                                                g$ht$7498$RATN9
                                                g$sym$7492$RATN9
                                                '#f))))
                                          g$t$7497$RATN9)
                                         ((letrec ((g$f$7501$RATN9
                                                     (case-lambda
                                                       ((g$sym*$7502$RATN9
                                                          g$mark**$7503$RATN9
                                                          g$label*$7504$RATN9)
                                                        (if (null?
                                                              g$sym*$7502$RATN9)
                                                          (g$search$7493$RATN9
                                                            (cdr g$subst*$7494$RATN9)
                                                            g$mark*$7495$RATN9)
                                                          (if (if (eq? (car g$sym*$7502$RATN9)
                                                                       g$sym$7492$RATN9)
                                                                (begin
                                                                  '#f
                                                                  (g$same-marks?$6939$RATN9
                                                                    (car g$mark**$7503$RATN9)
                                                                    g$mark*$7495$RATN9))
                                                                '#f)
                                                            (car g$label*$7504$RATN9)
                                                            (g$f$7501$RATN9
                                                              (cdr g$sym*$7502$RATN9)
                                                              (cdr g$mark**$7503$RATN9)
                                                              (cdr g$label*$7504$RATN9))))))))
                                            g$f$7501$RATN9)
                                          (g$rib-sym*$6892$RATN9
                                            g$rib$7496$RATN9)
                                          (g$rib-mark**$6893$RATN9
                                            g$rib$7496$RATN9)
                                          (g$rib-label*$6894$RATN9
                                            g$rib$7496$RATN9)))))
                                    (g$rib-sealed/freq$6895$RATN9
                                      g$rib$7496$RATN9))))
                                (car g$subst*$7494$RATN9))))))))
               g$search$7493$RATN9)
             (g$stx-subst*$6913$RATN9 g$id$7491$RATN9)
             (g$stx-mark*$6912$RATN9 g$id$7491$RATN9))))
         (g$id->sym$6938$RATN9 g$id$7491$RATN9)))))
   (g$label->binding$6952$RATN9
     g$label->binding$10594$RATN9
     (case-lambda
       ((g$x$7505$RATN9 g$r$7506$RATN9)
        ((case-lambda
           ((g$t$7507$RATN9)
            (if g$t$7507$RATN9
              ((case-lambda
                 ((g$b$7508$RATN9)
                  (if (if (pair? g$b$7508$RATN9)
                        (begin '#f (eq? (car g$b$7508$RATN9) '$core-rtd))
                        '#f)
                    (cons '$rtd (map g$bless$7178$RATN9 (cdr g$b$7508$RATN9)))
                    (if (if (pair? g$b$7508$RATN9)
                          (begin '#f (eq? (car g$b$7508$RATN9) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$7509$RATN9 g$loc$7510$RATN9)
                          (cons '$rtd (symbol-value g$loc$7510$RATN9))))
                       (g$cadr$4896$RATN9 g$b$7508$RATN9)
                       (g$cddr$4898$RATN9 g$b$7508$RATN9))
                      g$b$7508$RATN9))))
               g$t$7507$RATN9)
              ((case-lambda
                 ((g$t$7511$RATN9)
                  (if g$t$7511$RATN9
                    (cdr g$t$7511$RATN9)
                    ((case-lambda
                       ((g$t$7512$RATN9)
                        (if g$t$7512$RATN9
                          ((case-lambda
                             ((g$env$7513$RATN9)
                              ((case-lambda
                                 ((g$t$7514$RATN9)
                                  (if g$t$7514$RATN9
                                    ((case-lambda
                                       ((g$p$7515$RATN9)
                                        (g$cons*$5367$RATN9
                                          'lexical
                                          (cdr g$p$7515$RATN9)
                                          '#f)))
                                     g$t$7514$RATN9)
                                    '(displaced-lexical . #f))))
                               (assq
                                 g$x$7505$RATN9
                                 (g$interaction-env-locs$7295$RATN9
                                   g$env$7513$RATN9)))))
                           g$t$7512$RATN9)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$7328$RATN9)))))
               (assq g$x$7505$RATN9 g$r$7506$RATN9)))))
         (g$imported-label->binding$6751$RATN9 g$x$7505$RATN9)))))
   (g$make-binding$6953$RATN9 g$make-binding$10595$RATN9 cons)
   (g$binding-type$6954$RATN9 g$binding-type$10596$RATN9 car)
   (g$binding-value$6955$RATN9 g$binding-value$10597$RATN9 cdr)
   (g$raise-unbound-error$6956$RATN9
     g$raise-unbound-error$10598$RATN9
     (case-lambda
       ((g$id$7516$RATN9)
        (g$syntax-violation*$7320$RATN9
          '#f
          '"unbound identifier"
          g$id$7516$RATN9
          (g$make-undefined-violation$5701$RATN9)))))
   (g$syntax-type$6957$RATN9
     g$syntax-type$10599$RATN9
     (case-lambda
       ((g$e$7517$RATN9 g$r$7518$RATN9)
        (if (g$id?$6937$RATN9 g$e$7517$RATN9)
          ((case-lambda
             ((g$id$7519$RATN9)
              ((case-lambda
                 ((g$label$7520$RATN9)
                  ((case-lambda
                     ((g$b$7521$RATN9)
                      ((case-lambda
                         ((g$type$7522$RATN9)
                          ((case-lambda
                             (()
                              (begin
                                (if g$label$7520$RATN9
                                  (void)
                                  (g$raise-unbound-error$6956$RATN9
                                    g$id$7519$RATN9))
                                ((case-lambda
                                   ((g$t$7523$RATN9)
                                    (if (memv
                                          g$t$7523$RATN9
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$7522$RATN9
                                        (g$binding-value$6955$RATN9
                                          g$b$7521$RATN9)
                                        g$id$7519$RATN9)
                                      (values 'other '#f '#f))))
                                 g$type$7522$RATN9)))))))
                       (g$binding-type$6954$RATN9 g$b$7521$RATN9))))
                   (g$label->binding$6952$RATN9
                     g$label$7520$RATN9
                     g$r$7518$RATN9))))
               (g$id->label$6950$RATN9 g$id$7519$RATN9))))
           g$e$7517$RATN9)
          (if (g$syntax-pair?$6930$RATN9 g$e$7517$RATN9)
            ((case-lambda
               ((g$id$7524$RATN9)
                (if (g$id?$6937$RATN9 g$id$7524$RATN9)
                  ((case-lambda
                     ((g$label$7525$RATN9)
                      ((case-lambda
                         ((g$b$7526$RATN9)
                          ((case-lambda
                             ((g$type$7527$RATN9)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if g$label$7525$RATN9
                                      (void)
                                      (g$raise-unbound-error$6956$RATN9
                                        g$id$7524$RATN9))
                                    ((case-lambda
                                       ((g$t$7528$RATN9)
                                        (if (memv
                                              g$t$7528$RATN9
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 $core-rtd))
                                          (values
                                            g$type$7527$RATN9
                                            (g$binding-value$6955$RATN9
                                              g$b$7526$RATN9)
                                            g$id$7524$RATN9)
                                          (values 'call '#f '#f))))
                                     g$type$7527$RATN9)))))))
                           (g$binding-type$6954$RATN9 g$b$7526$RATN9))))
                       (g$label->binding$6952$RATN9
                         g$label$7525$RATN9
                         g$r$7518$RATN9))))
                   (g$id->label$6950$RATN9 g$id$7524$RATN9))
                  (values 'call '#f '#f))))
             (g$syntax-car$6934$RATN9 g$e$7517$RATN9))
            ((case-lambda
               ((g$d$7529$RATN9)
                (if (g$self-evaluating?$6945$RATN9 g$d$7529$RATN9)
                  (values 'constant g$d$7529$RATN9 '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$6948$RATN9 g$e$7517$RATN9)))))))
   (g$sanitize-binding$6965$RATN9
     g$sanitize-binding$10600$RATN9
     (case-lambda
       ((g$x$7530$RATN9 g$src$7531$RATN9)
        (if (procedure? g$x$7530$RATN9)
          (g$cons*$5367$RATN9 'local-macro g$x$7530$RATN9 g$src$7531$RATN9)
          (if (if (pair? g$x$7530$RATN9)
                (if (eq? (car g$x$7530$RATN9) 'macro!)
                  (begin '#f (procedure? (cdr g$x$7530$RATN9)))
                  '#f)
                '#f)
            (g$cons*$5367$RATN9
              'local-macro!
              (cdr g$x$7530$RATN9)
              g$src$7531$RATN9)
            (if (if (pair? g$x$7530$RATN9)
                  (begin '#f (eq? (car g$x$7530$RATN9) '$rtd))
                  '#f)
              g$x$7530$RATN9
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$7530$RATN9)))))))
   (g$make-variable-transformer$6966$RATN9
     g$make-variable-transformer$10601$RATN9
     (case-lambda
       ((g$x$7532$RATN9)
        (if (procedure? g$x$7532$RATN9)
          (cons 'macro! g$x$7532$RATN9)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$7532$RATN9)))))
   (g$variable-transformer?$6967$RATN9
     g$variable-transformer?$10602$RATN9
     (case-lambda
       ((g$x$7533$RATN9)
        (if (pair? g$x$7533$RATN9)
          (if (eq? (car g$x$7533$RATN9) 'macro!)
            (begin '#f (procedure? (cdr g$x$7533$RATN9)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$6968$RATN9
     g$variable-transformer-procedure$10603$RATN9
     (case-lambda
       ((g$x$7534$RATN9)
        (if (g$variable-transformer?$6967$RATN9 g$x$7534$RATN9)
          (cdr g$x$7534$RATN9)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$7534$RATN9)))))
   (g$make-eval-transformer$6969$RATN9
     g$make-eval-transformer$10604$RATN9
     (case-lambda
       ((g$x$7535$RATN9)
        (g$sanitize-binding$6965$RATN9
          (eval-core (g$expanded->core$6451$RATN9 g$x$7535$RATN9))
          g$x$7535$RATN9))))
   (g$parse-define$7155$RATN9
     g$parse-define$10605$RATN9
     (case-lambda
       ((g$x$7536$RATN9)
        ((case-lambda
           ((g$t$7537$RATN9)
            ((case-lambda
               ((g$ls/false$7538$RATN9)
                (if (if g$ls/false$7538$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7539$RATN9
                               g$fmls$7540$RATN9
                               g$b$7541$RATN9
                               g$b*$7542$RATN9)
                             (g$id?$6937$RATN9 g$id$7539$RATN9)))
                          g$ls/false$7538$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7543$RATN9
                         g$fmls$7544$RATN9
                         g$b$7545$RATN9
                         g$b*$7546$RATN9)
                       (begin
                         (g$verify-formals$7235$RATN9
                           g$fmls$7544$RATN9
                           g$x$7536$RATN9)
                         (values
                           g$id$7543$RATN9
                           (cons
                             'defun
                             (cons
                               g$fmls$7544$RATN9
                               (cons g$b$7545$RATN9 g$b*$7546$RATN9)))))))
                    g$ls/false$7538$RATN9)
                  ((case-lambda
                     ((g$t$7547$RATN9)
                      ((case-lambda
                         ((g$ls/false$7548$RATN9)
                          (if (if g$ls/false$7548$RATN9
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$7549$RATN9 g$val$7550$RATN9)
                                       (g$id?$6937$RATN9 g$id$7549$RATN9)))
                                    g$ls/false$7548$RATN9))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$7551$RATN9 g$val$7552$RATN9)
                                 (values
                                   g$id$7551$RATN9
                                   (cons 'expr g$val$7552$RATN9))))
                              g$ls/false$7548$RATN9)
                            ((case-lambda
                               ((g$t$7553$RATN9)
                                ((case-lambda
                                   ((g$ls/false$7554$RATN9)
                                    (if (if g$ls/false$7554$RATN9
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$7555$RATN9)
                                                 (g$id?$6937$RATN9
                                                   g$id$7555$RATN9)))
                                              g$ls/false$7554$RATN9))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$7556$RATN9)
                                           (values
                                             g$id$7556$RATN9
                                             (cons
                                               'expr
                                               (g$bless$7178$RATN9 '(void))))))
                                        g$ls/false$7554$RATN9)
                                      (g$syntax-violation$7321$RATN9
                                        '#f
                                        '"invalid syntax"
                                        g$t$7553$RATN9))))
                                 (g$syntax-dispatch$7215$RATN9
                                   g$t$7553$RATN9
                                   '(_ any)))))
                             g$t$7547$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$7547$RATN9
                         '(_ any any)))))
                   g$t$7537$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7537$RATN9
               '(_ (any . any) any . each-any)))))
         g$x$7536$RATN9))))
   (g$parse-define-syntax$7156$RATN9
     g$parse-define-syntax$10606$RATN9
     (case-lambda
       ((g$x$7557$RATN9)
        ((case-lambda
           ((g$t$7558$RATN9)
            ((case-lambda
               ((g$ls/false$7559$RATN9)
                (if (if g$ls/false$7559$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7560$RATN9 g$val$7561$RATN9)
                             (g$id?$6937$RATN9 g$id$7560$RATN9)))
                          g$ls/false$7559$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7562$RATN9 g$val$7563$RATN9)
                       (values g$id$7562$RATN9 g$val$7563$RATN9)))
                    g$ls/false$7559$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7558$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$7558$RATN9 '(_ any any)))))
         g$x$7557$RATN9))))
   (g$scheme-stx-hashtable$7157$RATN9
     g$scheme-stx-hashtable$10607$RATN9
     (g$make-eq-hashtable$5158$RATN9))
   (g$scheme-stx$7158$RATN9
     g$scheme-stx$10608$RATN9
     (case-lambda
       ((g$sym$7564$RATN9)
        ((case-lambda
           ((g$t$7565$RATN9)
            (if g$t$7565$RATN9
              g$t$7565$RATN9
              (begin
                '#f
                ((case-lambda
                   ((g$subst$7566$RATN9)
                    ((case-lambda
                       ((g$stx$7567$RATN9)
                        ((case-lambda
                           ((g$stx$7568$RATN9)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$5162$RATN9
                                    g$scheme-stx-hashtable$7157$RATN9
                                    g$sym$7564$RATN9
                                    g$stx$7568$RATN9)
                                  g$stx$7568$RATN9))))))
                         ((case-lambda
                            ((g$t$7569$RATN9)
                             (if g$t$7569$RATN9
                               ((case-lambda
                                  ((g$x$7570$RATN9)
                                   ((case-lambda
                                      ((g$name$7571$RATN9 g$label$7572$RATN9)
                                       (g$add-subst$6927$RATN9
                                         (g$make-rib$6891$RATN9
                                           (list g$name$7571$RATN9)
                                           (list g$top-mark*$6879$RATN9)
                                           (list g$label$7572$RATN9)
                                           '#f)
                                         g$stx$7567$RATN9)))
                                    (car g$x$7570$RATN9)
                                    (cdr g$x$7570$RATN9))))
                                g$t$7569$RATN9)
                               g$stx$7567$RATN9)))
                          (assq g$sym$7564$RATN9 g$subst$7566$RATN9)))))
                     (g$make-stx$6910$RATN9
                       g$sym$7564$RATN9
                       g$top-mark*$6879$RATN9
                       '()
                       '()))))
                 (g$library-subst$6709$RATN9
                   (g$find-library-by-name$6745$RATN9
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5161$RATN9
           g$scheme-stx-hashtable$7157$RATN9
           g$sym$7564$RATN9
           '#f)))))
   (g$lexical-var$7159$RATN9 g$lexical-var$10609$RATN9 car)
   (g$lexical-mutable?$7160$RATN9 g$lexical-mutable?$10610$RATN9 cdr)
   (g$set-lexical-mutable!$7161$RATN9
     g$set-lexical-mutable!$10611$RATN9
     set-cdr!)
   (g$add-lexical$7162$RATN9
     g$add-lexical$10612$RATN9
     (case-lambda
       ((g$lab$7573$RATN9 g$lex$7574$RATN9 g$r$7575$RATN9)
        (cons
          (g$cons*$5367$RATN9 g$lab$7573$RATN9 'lexical g$lex$7574$RATN9 '#f)
          g$r$7575$RATN9))))
   (g$add-lexicals$7163$RATN9
     g$add-lexicals$10613$RATN9
     (case-lambda
       ((g$lab*$7576$RATN9 g$lex*$7577$RATN9 g$r$7578$RATN9)
        (if (null? g$lab*$7576$RATN9)
          g$r$7578$RATN9
          (g$add-lexicals$7163$RATN9
            (cdr g$lab*$7576$RATN9)
            (cdr g$lex*$7577$RATN9)
            (g$add-lexical$7162$RATN9
              (car g$lab*$7576$RATN9)
              (car g$lex*$7577$RATN9)
              g$r$7578$RATN9))))))
   (g$letrec-helper$7164$RATN9
     g$letrec-helper$10614$RATN9
     (case-lambda
       ((g$e$7579$RATN9 g$r$7580$RATN9 g$mr$7581$RATN9 g$build$7582$RATN9)
        ((case-lambda
           ((g$t$7583$RATN9)
            ((case-lambda
               ((g$ls/false$7584$RATN9)
                (if g$ls/false$7584$RATN9
                  (apply
                    (case-lambda
                      ((g$lhs*$7585$RATN9
                         g$rhs*$7586$RATN9
                         g$b$7587$RATN9
                         g$b*$7588$RATN9)
                       (if (not (g$valid-bound-ids?$6942$RATN9
                                  g$lhs*$7585$RATN9))
                         (g$invalid-fmls-error$7180$RATN9
                           g$e$7579$RATN9
                           g$lhs*$7585$RATN9)
                         ((case-lambda
                            ((g$lex*$7589$RATN9 g$lab*$7590$RATN9)
                             ((case-lambda
                                ((g$rib$7591$RATN9 g$r$7592$RATN9)
                                 ((case-lambda
                                    ((g$body$7593$RATN9 g$rhs*$7594$RATN9)
                                     (g$build$7582$RATN9
                                       '#f
                                       g$lex*$7589$RATN9
                                       g$rhs*$7594$RATN9
                                       g$body$7593$RATN9)))
                                  (g$chi-internal$7244$RATN9
                                    (g$add-subst$6927$RATN9
                                      g$rib$7591$RATN9
                                      (cons g$b$7587$RATN9 g$b*$7588$RATN9))
                                    g$r$7592$RATN9
                                    g$mr$7581$RATN9)
                                  (g$chi-expr*$7231$RATN9
                                    (map (case-lambda
                                           ((g$x$7595$RATN9)
                                            (g$add-subst$6927$RATN9
                                              g$rib$7591$RATN9
                                              g$x$7595$RATN9)))
                                         g$rhs*$7586$RATN9)
                                    g$r$7592$RATN9
                                    g$mr$7581$RATN9))))
                              (g$make-full-rib$6905$RATN9
                                g$lhs*$7585$RATN9
                                g$lab*$7590$RATN9)
                              (g$add-lexicals$7163$RATN9
                                g$lab*$7590$RATN9
                                g$lex*$7589$RATN9
                                g$r$7580$RATN9))))
                          (map g$gen-lexical$6881$RATN9 g$lhs*$7585$RATN9)
                          (map g$gen-label$6883$RATN9 g$lhs*$7585$RATN9)))))
                    g$ls/false$7584$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7583$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7583$RATN9
               '(_ #(each (any any)) any . each-any)))))
         g$e$7579$RATN9))))
   (g$letrec-transformer$7165$RATN9
     g$letrec-transformer$10615$RATN9
     (case-lambda
       ((g$e$7596$RATN9 g$r$7597$RATN9 g$mr$7598$RATN9)
        (g$letrec-helper$7164$RATN9
          g$e$7596$RATN9
          g$r$7597$RATN9
          g$mr$7598$RATN9
          g$build-letrec$6873$RATN9))))
   (g$letrec*-transformer$7166$RATN9
     g$letrec*-transformer$10616$RATN9
     (case-lambda
       ((g$e$7599$RATN9 g$r$7600$RATN9 g$mr$7601$RATN9)
        (g$letrec-helper$7164$RATN9
          g$e$7599$RATN9
          g$r$7600$RATN9
          g$mr$7601$RATN9
          g$build-letrec*$6874$RATN9))))
   (g$fluid-let-syntax-transformer$7167$RATN9
     g$fluid-let-syntax-transformer$10617$RATN9
     (case-lambda
       ((g$e$7602$RATN9 g$r$7603$RATN9 g$mr$7604$RATN9)
        (letrec* ((g$lookup$7605$RATN9
                    (case-lambda
                      ((g$x$7615$RATN9)
                       ((case-lambda
                          ((g$t$7616$RATN9)
                           (if g$t$7616$RATN9
                             g$t$7616$RATN9
                             (begin
                               '#f
                               (g$syntax-violation$7321$RATN9
                                 '#f
                                 '"unbound identifier"
                                 g$e$7602$RATN9
                                 g$x$7615$RATN9)))))
                        (g$id->label$6950$RATN9 g$x$7615$RATN9))))))
          ((case-lambda
             ((g$t$7606$RATN9)
              ((case-lambda
                 ((g$ls/false$7607$RATN9)
                  (if g$ls/false$7607$RATN9
                    (apply
                      (case-lambda
                        ((g$lhs*$7608$RATN9
                           g$rhs*$7609$RATN9
                           g$b$7610$RATN9
                           g$b*$7611$RATN9)
                         (if (not (g$valid-bound-ids?$6942$RATN9
                                    g$lhs*$7608$RATN9))
                           (g$invalid-fmls-error$7180$RATN9
                             g$e$7602$RATN9
                             g$lhs*$7608$RATN9)
                           ((case-lambda
                              ((g$lab*$7612$RATN9 g$rhs*$7613$RATN9)
                               (g$chi-internal$7244$RATN9
                                 (cons g$b$7610$RATN9 g$b*$7611$RATN9)
                                 (append
                                   (map cons
                                        g$lab*$7612$RATN9
                                        g$rhs*$7613$RATN9)
                                   g$r$7603$RATN9)
                                 (append
                                   (map cons
                                        g$lab*$7612$RATN9
                                        g$rhs*$7613$RATN9)
                                   g$mr$7604$RATN9))))
                            (map g$lookup$7605$RATN9 g$lhs*$7608$RATN9)
                            (map (case-lambda
                                   ((g$x$7614$RATN9)
                                    (g$make-eval-transformer$6969$RATN9
                                      (g$expand-transformer$7260$RATN9
                                        g$x$7614$RATN9
                                        g$mr$7604$RATN9))))
                                 g$rhs*$7609$RATN9)))))
                      g$ls/false$7607$RATN9)
                    (g$syntax-violation$7321$RATN9
                      '#f
                      '"invalid syntax"
                      g$t$7606$RATN9))))
               (g$syntax-dispatch$7215$RATN9
                 g$t$7606$RATN9
                 '(_ #(each (any any)) any . each-any)))))
           g$e$7602$RATN9)))))
   (g$type-descriptor-transformer$7168$RATN9
     g$type-descriptor-transformer$10618$RATN9
     (case-lambda
       ((g$e$7617$RATN9 g$r$7618$RATN9 g$mr$7619$RATN9)
        ((case-lambda
           ((g$t$7620$RATN9)
            ((case-lambda
               ((g$ls/false$7621$RATN9)
                (if (if g$ls/false$7621$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7622$RATN9)
                             (g$id?$6937$RATN9 g$id$7622$RATN9)))
                          g$ls/false$7621$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7623$RATN9)
                       ((case-lambda
                          ((g$lab$7624$RATN9)
                           ((case-lambda
                              ((g$b$7625$RATN9)
                               ((case-lambda
                                  ((g$type$7626$RATN9)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if g$lab$7624$RATN9
                                           (void)
                                           (g$raise-unbound-error$6956$RATN9
                                             g$id$7623$RATN9))
                                         (if (if (eq? g$type$7626$RATN9 '$rtd)
                                               (begin
                                                 '#f
                                                 (not (list?
                                                        (g$binding-value$6955$RATN9
                                                          g$b$7625$RATN9))))
                                               '#f)
                                           (void)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"not a record type"
                                             g$e$7617$RATN9))
                                         (list
                                           'quote
                                           (g$binding-value$6955$RATN9
                                             g$b$7625$RATN9))))))))
                                (g$binding-type$6954$RATN9 g$b$7625$RATN9))))
                            (g$label->binding$6952$RATN9
                              g$lab$7624$RATN9
                              g$r$7618$RATN9))))
                        (g$id->label$6950$RATN9 g$id$7623$RATN9))))
                    g$ls/false$7621$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7620$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$7620$RATN9 '(_ any)))))
         g$e$7617$RATN9))))
   (g$record-type-descriptor-transformer$7169$RATN9
     g$record-type-descriptor-transformer$10619$RATN9
     (case-lambda
       ((g$e$7627$RATN9 g$r$7628$RATN9 g$mr$7629$RATN9)
        ((case-lambda
           ((g$t$7630$RATN9)
            ((case-lambda
               ((g$ls/false$7631$RATN9)
                (if (if g$ls/false$7631$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7632$RATN9)
                             (g$id?$6937$RATN9 g$id$7632$RATN9)))
                          g$ls/false$7631$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7633$RATN9)
                       ((case-lambda
                          ((g$lab$7634$RATN9)
                           ((case-lambda
                              ((g$b$7635$RATN9)
                               ((case-lambda
                                  ((g$type$7636$RATN9)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if g$lab$7634$RATN9
                                           (void)
                                           (g$raise-unbound-error$6956$RATN9
                                             g$id$7633$RATN9))
                                         (if (if (eq? g$type$7636$RATN9 '$rtd)
                                               (begin
                                                 '#f
                                                 (list?
                                                   (g$binding-value$6955$RATN9
                                                     g$b$7635$RATN9)))
                                               '#f)
                                           (void)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"not a record type"
                                             g$e$7627$RATN9))
                                         (g$chi-expr$7233$RATN9
                                           (car (g$binding-value$6955$RATN9
                                                  g$b$7635$RATN9))
                                           g$r$7628$RATN9
                                           g$mr$7629$RATN9)))))))
                                (g$binding-type$6954$RATN9 g$b$7635$RATN9))))
                            (g$label->binding$6952$RATN9
                              g$lab$7634$RATN9
                              g$r$7628$RATN9))))
                        (g$id->label$6950$RATN9 g$id$7633$RATN9))))
                    g$ls/false$7631$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7630$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$7630$RATN9 '(_ any)))))
         g$e$7627$RATN9))))
   (g$record-constructor-descriptor-transformer$7170$RATN9
     g$record-constructor-descriptor-transformer$10620$RATN9
     (case-lambda
       ((g$e$7637$RATN9 g$r$7638$RATN9 g$mr$7639$RATN9)
        ((case-lambda
           ((g$t$7640$RATN9)
            ((case-lambda
               ((g$ls/false$7641$RATN9)
                (if (if g$ls/false$7641$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7642$RATN9)
                             (g$id?$6937$RATN9 g$id$7642$RATN9)))
                          g$ls/false$7641$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7643$RATN9)
                       ((case-lambda
                          ((g$lab$7644$RATN9)
                           ((case-lambda
                              ((g$b$7645$RATN9)
                               ((case-lambda
                                  ((g$type$7646$RATN9)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if g$lab$7644$RATN9
                                           (void)
                                           (g$raise-unbound-error$6956$RATN9
                                             g$id$7643$RATN9))
                                         (if (if (eq? g$type$7646$RATN9 '$rtd)
                                               (begin
                                                 '#f
                                                 (list?
                                                   (g$binding-value$6955$RATN9
                                                     g$b$7645$RATN9)))
                                               '#f)
                                           (void)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid type"
                                             g$e$7637$RATN9))
                                         (g$chi-expr$7233$RATN9
                                           (g$cadr$4896$RATN9
                                             (g$binding-value$6955$RATN9
                                               g$b$7645$RATN9))
                                           g$r$7638$RATN9
                                           g$mr$7639$RATN9)))))))
                                (g$binding-type$6954$RATN9 g$b$7645$RATN9))))
                            (g$label->binding$6952$RATN9
                              g$lab$7644$RATN9
                              g$r$7638$RATN9))))
                        (g$id->label$6950$RATN9 g$id$7643$RATN9))))
                    g$ls/false$7641$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7640$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$7640$RATN9 '(_ any)))))
         g$e$7637$RATN9))))
   (g$when-transformer$7171$RATN9
     g$when-transformer$10621$RATN9
     (case-lambda
       ((g$e$7647$RATN9 g$r$7648$RATN9 g$mr$7649$RATN9)
        ((case-lambda
           ((g$t$7650$RATN9)
            ((case-lambda
               ((g$ls/false$7651$RATN9)
                (if g$ls/false$7651$RATN9
                  (apply
                    (case-lambda
                      ((g$test$7652$RATN9 g$e$7653$RATN9 g$e*$7654$RATN9)
                       (list
                         'if
                         (g$chi-expr$7233$RATN9
                           g$test$7652$RATN9
                           g$r$7648$RATN9
                           g$mr$7649$RATN9)
                         (g$build-sequence$6871$RATN9
                           '#f
                           (g$chi-expr*$7231$RATN9
                             (cons g$e$7653$RATN9 g$e*$7654$RATN9)
                             g$r$7648$RATN9
                             g$mr$7649$RATN9))
                         (g$build-void$6872$RATN9))))
                    g$ls/false$7651$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7650$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7650$RATN9
               '(_ any any . each-any)))))
         g$e$7647$RATN9))))
   (g$unless-transformer$7172$RATN9
     g$unless-transformer$10622$RATN9
     (case-lambda
       ((g$e$7655$RATN9 g$r$7656$RATN9 g$mr$7657$RATN9)
        ((case-lambda
           ((g$t$7658$RATN9)
            ((case-lambda
               ((g$ls/false$7659$RATN9)
                (if g$ls/false$7659$RATN9
                  (apply
                    (case-lambda
                      ((g$test$7660$RATN9 g$e$7661$RATN9 g$e*$7662$RATN9)
                       (list
                         'if
                         (g$chi-expr$7233$RATN9
                           g$test$7660$RATN9
                           g$r$7656$RATN9
                           g$mr$7657$RATN9)
                         (g$build-void$6872$RATN9)
                         (g$build-sequence$6871$RATN9
                           '#f
                           (g$chi-expr*$7231$RATN9
                             (cons g$e$7661$RATN9 g$e*$7662$RATN9)
                             g$r$7656$RATN9
                             g$mr$7657$RATN9)))))
                    g$ls/false$7659$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7658$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7658$RATN9
               '(_ any any . each-any)))))
         g$e$7655$RATN9))))
   (g$if-transformer$7173$RATN9
     g$if-transformer$10623$RATN9
     (case-lambda
       ((g$e$7663$RATN9 g$r$7664$RATN9 g$mr$7665$RATN9)
        ((case-lambda
           ((g$t$7666$RATN9)
            ((case-lambda
               ((g$ls/false$7667$RATN9)
                (if g$ls/false$7667$RATN9
                  (apply
                    (case-lambda
                      ((g$e0$7668$RATN9 g$e1$7669$RATN9 g$e2$7670$RATN9)
                       (list
                         'if
                         (g$chi-expr$7233$RATN9
                           g$e0$7668$RATN9
                           g$r$7664$RATN9
                           g$mr$7665$RATN9)
                         (g$chi-expr$7233$RATN9
                           g$e1$7669$RATN9
                           g$r$7664$RATN9
                           g$mr$7665$RATN9)
                         (g$chi-expr$7233$RATN9
                           g$e2$7670$RATN9
                           g$r$7664$RATN9
                           g$mr$7665$RATN9))))
                    g$ls/false$7667$RATN9)
                  ((case-lambda
                     ((g$t$7671$RATN9)
                      ((case-lambda
                         ((g$ls/false$7672$RATN9)
                          (if g$ls/false$7672$RATN9
                            (apply
                              (case-lambda
                                ((g$e0$7673$RATN9 g$e1$7674$RATN9)
                                 (list
                                   'if
                                   (g$chi-expr$7233$RATN9
                                     g$e0$7673$RATN9
                                     g$r$7664$RATN9
                                     g$mr$7665$RATN9)
                                   (g$chi-expr$7233$RATN9
                                     g$e1$7674$RATN9
                                     g$r$7664$RATN9
                                     g$mr$7665$RATN9)
                                   (g$build-void$6872$RATN9))))
                              g$ls/false$7672$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$7671$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$7671$RATN9
                         '(_ any any)))))
                   g$t$7666$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$7666$RATN9 '(_ any any any)))))
         g$e$7663$RATN9))))
   (g$case-transformer$7174$RATN9
     g$case-transformer$10624$RATN9
     (case-lambda
       ((g$e$7675$RATN9 g$r$7676$RATN9 g$mr$7677$RATN9)
        (letrec* ((g$build-one$7678$RATN9
                    (case-lambda
                      ((g$t$7707$RATN9 g$cls$7708$RATN9 g$rest$7709$RATN9)
                       ((case-lambda
                          ((g$t$7710$RATN9)
                           ((case-lambda
                              ((g$ls/false$7711$RATN9)
                               (if g$ls/false$7711$RATN9
                                 (apply
                                   (case-lambda
                                     ((g$d*$7712$RATN9
                                        g$e$7713$RATN9
                                        g$e*$7714$RATN9)
                                      (list
                                        'if
                                        ((case-lambda
                                           ((g$data$7715$RATN9)
                                            (if (= '1
                                                   (length g$data$7715$RATN9))
                                              (list
                                                '(primitive eqv?)
                                                g$t$7707$RATN9
                                                (list
                                                  'quote
                                                  (car g$data$7715$RATN9)))
                                              (list
                                                '(primitive memv)
                                                g$t$7707$RATN9
                                                (list
                                                  'quote
                                                  g$data$7715$RATN9)))))
                                         (g$stx->datum$6948$RATN9
                                           g$d*$7712$RATN9))
                                        (g$build-sequence$6871$RATN9
                                          '#f
                                          (g$chi-expr*$7231$RATN9
                                            (cons
                                              g$e$7713$RATN9
                                              g$e*$7714$RATN9)
                                            g$r$7676$RATN9
                                            g$mr$7677$RATN9))
                                        g$rest$7709$RATN9)))
                                   g$ls/false$7711$RATN9)
                                 ((case-lambda
                                    ((g$t$7716$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$7717$RATN9)
                                         (if g$ls/false$7717$RATN9
                                           (apply
                                             (case-lambda
                                               ((g$else$7718$RATN9)
                                                (g$syntax-violation$7321$RATN9
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$7675$RATN9)))
                                             g$ls/false$7717$RATN9)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$t$7716$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$7716$RATN9
                                        'any))))
                                  g$t$7710$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$7710$RATN9
                              '(each-any any . each-any)))))
                        g$cls$7708$RATN9))))
                  (g$build-last$7679$RATN9
                    (case-lambda
                      ((g$t$7692$RATN9 g$cls$7693$RATN9)
                       ((case-lambda
                          ((g$t$7694$RATN9)
                           ((case-lambda
                              ((g$ls/false$7695$RATN9)
                               (if g$ls/false$7695$RATN9
                                 (apply
                                   (case-lambda
                                     ((g$d*$7696$RATN9
                                        g$e$7697$RATN9
                                        g$e*$7698$RATN9)
                                      (g$build-one$7678$RATN9
                                        g$t$7692$RATN9
                                        g$cls$7693$RATN9
                                        (g$build-void$6872$RATN9))))
                                   g$ls/false$7695$RATN9)
                                 ((case-lambda
                                    ((g$t$7699$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$7700$RATN9)
                                         (if g$ls/false$7700$RATN9
                                           (apply
                                             (case-lambda
                                               ((g$else-kwd$7701$RATN9
                                                  g$x$7702$RATN9
                                                  g$x*$7703$RATN9)
                                                (if (if (g$id?$6937$RATN9
                                                          g$else-kwd$7701$RATN9)
                                                      (begin
                                                        '#f
                                                        (g$free-id=?$6941$RATN9
                                                          g$else-kwd$7701$RATN9
                                                          (g$scheme-stx$7158$RATN9
                                                            'else)))
                                                      '#f)
                                                  (g$build-sequence$6871$RATN9
                                                    '#f
                                                    (g$chi-expr*$7231$RATN9
                                                      (cons
                                                        g$x$7702$RATN9
                                                        g$x*$7703$RATN9)
                                                      g$r$7676$RATN9
                                                      g$mr$7677$RATN9))
                                                  (g$syntax-violation$7321$RATN9
                                                    '#f
                                                    '"invalid syntax"
                                                    g$e$7675$RATN9))))
                                             g$ls/false$7700$RATN9)
                                           ((case-lambda
                                              ((g$t$7704$RATN9)
                                               ((case-lambda
                                                  ((g$ls/false$7705$RATN9)
                                                   (if g$ls/false$7705$RATN9
                                                     (apply
                                                       (case-lambda
                                                         ((g$else$7706$RATN9)
                                                          (g$syntax-violation$7321$RATN9
                                                            '#f
                                                            '"invalid syntax"
                                                            g$e$7675$RATN9)))
                                                       g$ls/false$7705$RATN9)
                                                     (g$syntax-violation$7321$RATN9
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$7704$RATN9))))
                                                (g$syntax-dispatch$7215$RATN9
                                                  g$t$7704$RATN9
                                                  'any))))
                                            g$t$7699$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$7699$RATN9
                                        '(any any . each-any)))))
                                  g$t$7694$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$7694$RATN9
                              '(each-any any . each-any)))))
                        g$cls$7693$RATN9)))))
          ((case-lambda
             ((g$t$7680$RATN9)
              ((case-lambda
                 ((g$ls/false$7681$RATN9)
                  (if g$ls/false$7681$RATN9
                    (apply
                      (case-lambda
                        ((g$expr$7682$RATN9)
                         (g$build-sequence$6871$RATN9
                           '#f
                           (list
                             (g$chi-expr$7233$RATN9
                               g$expr$7682$RATN9
                               g$r$7676$RATN9
                               g$mr$7677$RATN9)
                             (g$build-void$6872$RATN9)))))
                      g$ls/false$7681$RATN9)
                    ((case-lambda
                       ((g$t$7683$RATN9)
                        ((case-lambda
                           ((g$ls/false$7684$RATN9)
                            (if g$ls/false$7684$RATN9
                              (apply
                                (case-lambda
                                  ((g$expr$7685$RATN9
                                     g$cls$7686$RATN9
                                     g$cls*$7687$RATN9)
                                   ((case-lambda
                                      ((g$t$7688$RATN9)
                                       (g$build-let$6870$RATN9
                                         '#f
                                         (list g$t$7688$RATN9)
                                         (list
                                           (g$chi-expr$7233$RATN9
                                             g$expr$7685$RATN9
                                             g$r$7676$RATN9
                                             g$mr$7677$RATN9))
                                         ((letrec ((g$f$7689$RATN9
                                                     (case-lambda
                                                       ((g$cls$7690$RATN9
                                                          g$cls*$7691$RATN9)
                                                        (if (null?
                                                              g$cls*$7691$RATN9)
                                                          (g$build-last$7679$RATN9
                                                            g$t$7688$RATN9
                                                            g$cls$7690$RATN9)
                                                          (g$build-one$7678$RATN9
                                                            g$t$7688$RATN9
                                                            g$cls$7690$RATN9
                                                            (g$f$7689$RATN9
                                                              (car g$cls*$7691$RATN9)
                                                              (cdr g$cls*$7691$RATN9))))))))
                                            g$f$7689$RATN9)
                                          g$cls$7686$RATN9
                                          g$cls*$7687$RATN9))))
                                    (g$gen-lexical$6881$RATN9 't))))
                                g$ls/false$7684$RATN9)
                              (g$syntax-violation$7321$RATN9
                                '#f
                                '"invalid syntax"
                                g$t$7683$RATN9))))
                         (g$syntax-dispatch$7215$RATN9
                           g$t$7683$RATN9
                           '(_ any any . each-any)))))
                     g$t$7680$RATN9))))
               (g$syntax-dispatch$7215$RATN9 g$t$7680$RATN9 '(_ any)))))
           g$e$7675$RATN9)))))
   (g$quote-transformer$7175$RATN9
     g$quote-transformer$10625$RATN9
     (case-lambda
       ((g$e$7719$RATN9 g$r$7720$RATN9 g$mr$7721$RATN9)
        ((case-lambda
           ((g$t$7722$RATN9)
            ((case-lambda
               ((g$ls/false$7723$RATN9)
                (if g$ls/false$7723$RATN9
                  (apply
                    (case-lambda
                      ((g$datum$7724$RATN9)
                       (list
                         'quote
                         (g$stx->datum$6948$RATN9 g$datum$7724$RATN9))))
                    g$ls/false$7723$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7722$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$7722$RATN9 '(_ any)))))
         g$e$7719$RATN9))))
   (g$case-lambda-transformer$7176$RATN9
     g$case-lambda-transformer$10626$RATN9
     (case-lambda
       ((g$e$7725$RATN9 g$r$7726$RATN9 g$mr$7727$RATN9)
        ((case-lambda
           ((g$t$7728$RATN9)
            ((case-lambda
               ((g$ls/false$7729$RATN9)
                (if g$ls/false$7729$RATN9
                  (apply
                    (case-lambda
                      ((g$fmls*$7730$RATN9 g$b*$7731$RATN9 g$b**$7732$RATN9)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7237$RATN9
                              g$e$7725$RATN9
                              g$fmls*$7730$RATN9
                              (map cons g$b*$7731$RATN9 g$b**$7732$RATN9)
                              g$r$7726$RATN9
                              g$mr$7727$RATN9)))
                         (case-lambda
                           ((g$fmls*$7735$RATN9 g$body*$7736$RATN9)
                            ((case-lambda
                               ((g$body*$7737$RATN9 g$fmls*$7738$RATN9)
                                (g$build-case-lambda$6869$RATN9
                                  '#f
                                  g$fmls*$7738$RATN9
                                  g$body*$7737$RATN9)))
                             g$body*$7736$RATN9
                             g$fmls*$7735$RATN9))))))
                    g$ls/false$7729$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7728$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7728$RATN9
               '(_ . #(each (any any . each-any)))))))
         g$e$7725$RATN9))))
   (g$lambda-transformer$7177$RATN9
     g$lambda-transformer$10627$RATN9
     (case-lambda
       ((g$e$7739$RATN9 g$r$7740$RATN9 g$mr$7741$RATN9)
        ((case-lambda
           ((g$t$7742$RATN9)
            ((case-lambda
               ((g$ls/false$7743$RATN9)
                (if g$ls/false$7743$RATN9
                  (apply
                    (case-lambda
                      ((g$fmls$7744$RATN9 g$b$7745$RATN9 g$b*$7746$RATN9)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7236$RATN9
                              g$e$7739$RATN9
                              g$fmls$7744$RATN9
                              (cons g$b$7745$RATN9 g$b*$7746$RATN9)
                              g$r$7740$RATN9
                              g$mr$7741$RATN9)))
                         (case-lambda
                           ((g$fmls$7749$RATN9 g$body$7750$RATN9)
                            ((case-lambda
                               ((g$body$7751$RATN9 g$fmls$7752$RATN9)
                                (g$build-lambda$6868$RATN9
                                  '#f
                                  g$fmls$7752$RATN9
                                  g$body$7751$RATN9)))
                             g$body$7750$RATN9
                             g$fmls$7749$RATN9))))))
                    g$ls/false$7743$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7742$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7742$RATN9
               '(_ any any . each-any)))))
         g$e$7739$RATN9))))
   (g$bless$7178$RATN9
     g$bless$10628$RATN9
     (case-lambda
       ((g$x$7753$RATN9)
        (g$mkstx$6925$RATN9
          ((letrec ((g$f$7754$RATN9
                      (case-lambda
                        ((g$x$7755$RATN9)
                         (if (g$stx?$6909$RATN9 g$x$7755$RATN9)
                           g$x$7755$RATN9
                           (if (pair? g$x$7755$RATN9)
                             (cons
                               (g$f$7754$RATN9 (car g$x$7755$RATN9))
                               (g$f$7754$RATN9 (cdr g$x$7755$RATN9)))
                             (if (symbol? g$x$7755$RATN9)
                               (g$scheme-stx$7158$RATN9 g$x$7755$RATN9)
                               (if (vector? g$x$7755$RATN9)
                                 (vector-map g$f$7754$RATN9 g$x$7755$RATN9)
                                 g$x$7755$RATN9))))))))
             g$f$7754$RATN9)
           g$x$7753$RATN9)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7179$RATN9
     g$with-syntax-macro$10629$RATN9
     (case-lambda
       ((g$e$7756$RATN9)
        ((case-lambda
           ((g$t$7757$RATN9)
            ((case-lambda
               ((g$ls/false$7758$RATN9)
                (if g$ls/false$7758$RATN9
                  (apply
                    (case-lambda
                      ((g$pat*$7759$RATN9
                         g$expr*$7760$RATN9
                         g$b$7761$RATN9
                         g$b*$7762$RATN9)
                       ((case-lambda
                          ((g$idn*$7763$RATN9)
                           (begin
                             (g$verify-formals$7235$RATN9
                               (map car g$idn*$7763$RATN9)
                               g$e$7756$RATN9)
                             ((case-lambda
                                ((g$t*$7764$RATN9)
                                 (g$bless$7178$RATN9
                                   (list
                                     'let
                                     (map list
                                          g$t*$7764$RATN9
                                          g$expr*$7760$RATN9)
                                     ((letrec ((g$f$7765$RATN9
                                                 (case-lambda
                                                   ((g$pat*$7766$RATN9
                                                      g$t*$7767$RATN9)
                                                    (if (null?
                                                          g$pat*$7766$RATN9)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$7761$RATN9
                                                            g$b*$7762$RATN9)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$7767$RATN9)
                                                        '()
                                                        (list
                                                          (car g$pat*$7766$RATN9)
                                                          (g$f$7765$RATN9
                                                            (cdr g$pat*$7766$RATN9)
                                                            (cdr g$t*$7767$RATN9)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$7766$RATN9))
                                                            (car g$t*$7767$RATN9)))))))))
                                        g$f$7765$RATN9)
                                      g$pat*$7759$RATN9
                                      g$t*$7764$RATN9)))))
                              (g$generate-temporaries$7314$RATN9
                                g$expr*$7760$RATN9)))))
                        ((letrec ((g$f$7768$RATN9
                                    (case-lambda
                                      ((g$pat*$7769$RATN9)
                                       (if (null? g$pat*$7769$RATN9)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7214$RATN9
                                                (car g$pat*$7769$RATN9)
                                                '())))
                                           (case-lambda
                                             ((g$pat$7772$RATN9
                                                g$idn*$7773$RATN9)
                                              ((case-lambda
                                                 ((g$idn*$7774$RATN9
                                                    g$pat$7775$RATN9)
                                                  (append
                                                    g$idn*$7774$RATN9
                                                    (g$f$7768$RATN9
                                                      (cdr g$pat*$7769$RATN9)))))
                                               g$idn*$7773$RATN9
                                               g$pat$7772$RATN9)))))))))
                           g$f$7768$RATN9)
                         g$pat*$7759$RATN9))))
                    g$ls/false$7758$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7757$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7757$RATN9
               '(_ #(each (any any)) any . each-any)))))
         g$e$7756$RATN9))))
   (g$invalid-fmls-error$7180$RATN9
     g$invalid-fmls-error$10630$RATN9
     (case-lambda
       ((g$stx$7776$RATN9 g$fmls$7777$RATN9)
        ((case-lambda
           ((g$t$7778$RATN9)
            ((case-lambda
               ((g$ls/false$7779$RATN9)
                (if g$ls/false$7779$RATN9
                  (apply
                    (case-lambda
                      ((g$id*$7780$RATN9 g$last$7781$RATN9)
                       ((letrec ((g$f$7782$RATN9
                                   (case-lambda
                                     ((g$id*$7783$RATN9)
                                      (if (null? g$id*$7783$RATN9)
                                        (values)
                                        (if (not (g$id?$6937$RATN9
                                                   (car g$id*$7783$RATN9)))
                                          (g$syntax-violation$7321$RATN9
                                            '#f
                                            '"not an identifier"
                                            g$stx$7776$RATN9
                                            (car g$id*$7783$RATN9))
                                          (begin
                                            (g$f$7782$RATN9
                                              (cdr g$id*$7783$RATN9))
                                            (if (g$bound-id-member?$6944$RATN9
                                                  (car g$id*$7783$RATN9)
                                                  (cdr g$id*$7783$RATN9))
                                              (g$syntax-violation$7321$RATN9
                                                '#f
                                                '"duplicate binding"
                                                g$stx$7776$RATN9
                                                (car g$id*$7783$RATN9))
                                              (void)))))))))
                          g$f$7782$RATN9)
                        (if (g$id?$6937$RATN9 g$last$7781$RATN9)
                          (cons g$last$7781$RATN9 g$id*$7780$RATN9)
                          (if (g$syntax-null?$6932$RATN9 g$last$7781$RATN9)
                            g$id*$7780$RATN9
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"not an identifier"
                              g$stx$7776$RATN9
                              g$last$7781$RATN9))))))
                    g$ls/false$7779$RATN9)
                  ((case-lambda
                     ((g$t$7784$RATN9)
                      ((case-lambda
                         ((g$ls/false$7785$RATN9)
                          (if g$ls/false$7785$RATN9
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7321$RATN9
                                   '#f
                                   '"malformed binding form"
                                   g$stx$7776$RATN9
                                   g$fmls$7777$RATN9)))
                              g$ls/false$7785$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$7784$RATN9))))
                       (g$syntax-dispatch$7215$RATN9 g$t$7784$RATN9 '_))))
                   g$t$7778$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7778$RATN9
               '#(each+ any () any)))))
         g$fmls$7777$RATN9))))
   (g$let-macro$7181$RATN9
     g$let-macro$10631$RATN9
     (case-lambda
       ((g$stx$7786$RATN9)
        ((case-lambda
           ((g$t$7787$RATN9)
            ((case-lambda
               ((g$ls/false$7788$RATN9)
                (if g$ls/false$7788$RATN9
                  (apply
                    (case-lambda
                      ((g$lhs*$7789$RATN9
                         g$rhs*$7790$RATN9
                         g$b$7791$RATN9
                         g$b*$7792$RATN9)
                       (if (g$valid-bound-ids?$6942$RATN9 g$lhs*$7789$RATN9)
                         (g$bless$7178$RATN9
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$7789$RATN9
                                 (cons g$b$7791$RATN9 g$b*$7792$RATN9)))
                             g$rhs*$7790$RATN9))
                         (g$invalid-fmls-error$7180$RATN9
                           g$stx$7786$RATN9
                           g$lhs*$7789$RATN9))))
                    g$ls/false$7788$RATN9)
                  ((case-lambda
                     ((g$t$7793$RATN9)
                      ((case-lambda
                         ((g$ls/false$7794$RATN9)
                          (if (if g$ls/false$7794$RATN9
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$7795$RATN9
                                         g$lhs*$7796$RATN9
                                         g$rhs*$7797$RATN9
                                         g$b$7798$RATN9
                                         g$b*$7799$RATN9)
                                       (g$id?$6937$RATN9 g$f$7795$RATN9)))
                                    g$ls/false$7794$RATN9))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$7800$RATN9
                                   g$lhs*$7801$RATN9
                                   g$rhs*$7802$RATN9
                                   g$b$7803$RATN9
                                   g$b*$7804$RATN9)
                                 (if (g$valid-bound-ids?$6942$RATN9
                                       g$lhs*$7801$RATN9)
                                   (g$bless$7178$RATN9
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$7800$RATN9
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$7801$RATN9
                                                 (cons
                                                   g$b$7803$RATN9
                                                   g$b*$7804$RATN9)))))
                                         g$f$7800$RATN9)
                                       g$rhs*$7802$RATN9))
                                   (g$invalid-fmls-error$7180$RATN9
                                     g$stx$7786$RATN9
                                     g$lhs*$7801$RATN9))))
                              g$ls/false$7794$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$7793$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$7793$RATN9
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$7787$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7787$RATN9
               '(_ #(each (any any)) any . each-any)))))
         g$stx$7786$RATN9))))
   (g$let-values-macro$7182$RATN9
     g$let-values-macro$10632$RATN9
     (case-lambda
       ((g$stx$7805$RATN9)
        (letrec* ((g$rename$7806$RATN9
                    (case-lambda
                      ((g$x$7857$RATN9 g$old*$7858$RATN9 g$new*$7859$RATN9)
                       (begin
                         (if (g$id?$6937$RATN9 g$x$7857$RATN9)
                           (void)
                           (g$syntax-violation$7321$RATN9
                             '#f
                             '"not an indentifier"
                             g$stx$7805$RATN9
                             g$x$7857$RATN9))
                         (if (g$bound-id-member?$6944$RATN9
                               g$x$7857$RATN9
                               g$old*$7858$RATN9)
                           (g$syntax-violation$7321$RATN9
                             '#f
                             '"duplicate binding"
                             g$stx$7805$RATN9
                             g$x$7857$RATN9)
                           (void))
                         ((case-lambda
                            ((g$y$7860$RATN9)
                             (values
                               g$y$7860$RATN9
                               (cons g$x$7857$RATN9 g$old*$7858$RATN9)
                               (cons g$y$7860$RATN9 g$new*$7859$RATN9))))
                          (gensym
                            (g$syntax->datum$7324$RATN9 g$x$7857$RATN9)))))))
                  (g$rename*$7807$RATN9
                    (case-lambda
                      ((g$x*$7848$RATN9 g$old*$7849$RATN9 g$new*$7850$RATN9)
                       (if (null? g$x*$7848$RATN9)
                         (values '() g$old*$7849$RATN9 g$new*$7850$RATN9)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$7806$RATN9
                                (car g$x*$7848$RATN9)
                                g$old*$7849$RATN9
                                g$new*$7850$RATN9)))
                           (case-lambda
                             ((g$x$7851$RATN9
                                g$old*$7852$RATN9
                                g$new*$7853$RATN9)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$7807$RATN9
                                     (cdr g$x*$7848$RATN9)
                                     g$old*$7852$RATN9
                                     g$new*$7853$RATN9)))
                                (case-lambda
                                  ((g$x*$7854$RATN9
                                     g$old*$7855$RATN9
                                     g$new*$7856$RATN9)
                                   (values
                                     (cons g$x$7851$RATN9 g$x*$7854$RATN9)
                                     g$old*$7855$RATN9
                                     g$new*$7856$RATN9))))))))))))
          ((case-lambda
             ((g$t$7808$RATN9)
              ((case-lambda
                 ((g$ls/false$7809$RATN9)
                  (if g$ls/false$7809$RATN9
                    (apply
                      (case-lambda
                        ((g$b$7810$RATN9 g$b*$7811$RATN9)
                         (g$cons*$5367$RATN9
                           (g$bless$7178$RATN9 'let)
                           '()
                           g$b$7810$RATN9
                           g$b*$7811$RATN9)))
                      g$ls/false$7809$RATN9)
                    ((case-lambda
                       ((g$t$7812$RATN9)
                        ((case-lambda
                           ((g$ls/false$7813$RATN9)
                            (if g$ls/false$7813$RATN9
                              (apply
                                (case-lambda
                                  ((g$lhs*$7814$RATN9
                                     g$rhs*$7815$RATN9
                                     g$b$7816$RATN9
                                     g$b*$7817$RATN9)
                                   (g$bless$7178$RATN9
                                     ((letrec ((g$f$7818$RATN9
                                                 (case-lambda
                                                   ((g$lhs*$7819$RATN9
                                                      g$rhs*$7820$RATN9
                                                      g$old*$7821$RATN9
                                                      g$new*$7822$RATN9)
                                                    (if (null?
                                                          g$lhs*$7819$RATN9)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (map list
                                                               g$old*$7821$RATN9
                                                               g$new*$7822$RATN9)
                                                          (cons
                                                            g$b$7816$RATN9
                                                            g$b*$7817$RATN9)))
                                                      ((case-lambda
                                                         ((g$t$7823$RATN9)
                                                          ((case-lambda
                                                             ((g$ls/false$7824$RATN9)
                                                              (if g$ls/false$7824$RATN9
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$7825$RATN9)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$7807$RATN9
                                                                            g$x*$7825$RATN9
                                                                            g$old*$7821$RATN9
                                                                            g$new*$7822$RATN9)))
                                                                       (case-lambda
                                                                         ((g$y*$7829$RATN9
                                                                            g$old*$7830$RATN9
                                                                            g$new*$7831$RATN9)
                                                                          ((case-lambda
                                                                             ((g$new*$7832$RATN9
                                                                                g$old*$7833$RATN9
                                                                                g$y*$7834$RATN9)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$7820$RATN9))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$7834$RATN9
                                                                                  (g$f$7818$RATN9
                                                                                    (cdr g$lhs*$7819$RATN9)
                                                                                    (cdr g$rhs*$7820$RATN9)
                                                                                    g$old*$7833$RATN9
                                                                                    g$new*$7832$RATN9)))))
                                                                           g$new*$7831$RATN9
                                                                           g$old*$7830$RATN9
                                                                           g$y*$7829$RATN9))))))
                                                                  g$ls/false$7824$RATN9)
                                                                ((case-lambda
                                                                   ((g$t$7835$RATN9)
                                                                    ((case-lambda
                                                                       ((g$ls/false$7836$RATN9)
                                                                        (if g$ls/false$7836$RATN9
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$7837$RATN9
                                                                                 g$x$7838$RATN9)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$7806$RATN9
                                                                                      g$x$7838$RATN9
                                                                                      g$old*$7821$RATN9
                                                                                      g$new*$7822$RATN9)))
                                                                                 (case-lambda
                                                                                   ((g$y$7839$RATN9
                                                                                      g$old*$7840$RATN9
                                                                                      g$new*$7841$RATN9)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$7807$RATN9
                                                                                           g$x*$7837$RATN9
                                                                                           g$old*$7840$RATN9
                                                                                           g$new*$7841$RATN9)))
                                                                                      (case-lambda
                                                                                        ((g$y*$7842$RATN9
                                                                                           g$old*$7843$RATN9
                                                                                           g$new*$7844$RATN9)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$7820$RATN9))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$7842$RATN9
                                                                                               g$y$7839$RATN9)
                                                                                             (g$f$7818$RATN9
                                                                                               (cdr g$lhs*$7819$RATN9)
                                                                                               (cdr g$rhs*$7820$RATN9)
                                                                                               g$old*$7843$RATN9
                                                                                               g$new*$7844$RATN9)))))))))))
                                                                            g$ls/false$7836$RATN9)
                                                                          ((case-lambda
                                                                             ((g$t$7845$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$7846$RATN9)
                                                                                  (if g$ls/false$7846$RATN9
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$7847$RATN9)
                                                                                         (g$syntax-violation$7321$RATN9
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$7805$RATN9
                                                                                           g$others$7847$RATN9)))
                                                                                      g$ls/false$7846$RATN9)
                                                                                    (g$syntax-violation$7321$RATN9
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$7845$RATN9))))
                                                                               (g$syntax-dispatch$7215$RATN9
                                                                                 g$t$7845$RATN9
                                                                                 'any))))
                                                                           g$t$7835$RATN9))))
                                                                     (g$syntax-dispatch$7215$RATN9
                                                                       g$t$7835$RATN9
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$7823$RATN9))))
                                                           (g$syntax-dispatch$7215$RATN9
                                                             g$t$7823$RATN9
                                                             'each-any))))
                                                       (car g$lhs*$7819$RATN9)))))))
                                        g$f$7818$RATN9)
                                      g$lhs*$7814$RATN9
                                      g$rhs*$7815$RATN9
                                      '()
                                      '()))))
                                g$ls/false$7813$RATN9)
                              (g$syntax-violation$7321$RATN9
                                '#f
                                '"invalid syntax"
                                g$t$7812$RATN9))))
                         (g$syntax-dispatch$7215$RATN9
                           g$t$7812$RATN9
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$7808$RATN9))))
               (g$syntax-dispatch$7215$RATN9
                 g$t$7808$RATN9
                 '(_ () any . each-any)))))
           g$stx$7805$RATN9)))))
   (g$let*-values-macro$7183$RATN9
     g$let*-values-macro$10633$RATN9
     (case-lambda
       ((g$stx$7861$RATN9)
        (letrec* ((g$check$7862$RATN9
                    (case-lambda
                      ((g$x*$7886$RATN9)
                       (if (null? g$x*$7886$RATN9)
                         (void)
                         ((case-lambda
                            ((g$x$7887$RATN9)
                             (begin
                               (if (g$id?$6937$RATN9 g$x$7887$RATN9)
                                 (void)
                                 (g$syntax-violation$7321$RATN9
                                   '#f
                                   '"not an identifier"
                                   g$stx$7861$RATN9
                                   g$x$7887$RATN9))
                               (g$check$7862$RATN9 (cdr g$x*$7886$RATN9))
                               (if (g$bound-id-member?$6944$RATN9
                                     g$x$7887$RATN9
                                     (cdr g$x*$7886$RATN9))
                                 (g$syntax-violation$7321$RATN9
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$7861$RATN9
                                   g$x$7887$RATN9)
                                 (void)))))
                          (car g$x*$7886$RATN9)))))))
          ((case-lambda
             ((g$t$7863$RATN9)
              ((case-lambda
                 ((g$ls/false$7864$RATN9)
                  (if g$ls/false$7864$RATN9
                    (apply
                      (case-lambda
                        ((g$b$7865$RATN9 g$b*$7866$RATN9)
                         (g$cons*$5367$RATN9
                           (g$bless$7178$RATN9 'let)
                           '()
                           g$b$7865$RATN9
                           g$b*$7866$RATN9)))
                      g$ls/false$7864$RATN9)
                    ((case-lambda
                       ((g$t$7867$RATN9)
                        ((case-lambda
                           ((g$ls/false$7868$RATN9)
                            (if g$ls/false$7868$RATN9
                              (apply
                                (case-lambda
                                  ((g$lhs*$7869$RATN9
                                     g$rhs*$7870$RATN9
                                     g$b$7871$RATN9
                                     g$b*$7872$RATN9)
                                   (g$bless$7178$RATN9
                                     ((letrec ((g$f$7873$RATN9
                                                 (case-lambda
                                                   ((g$lhs*$7874$RATN9
                                                      g$rhs*$7875$RATN9)
                                                    (if (null?
                                                          g$lhs*$7874$RATN9)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$7871$RATN9
                                                          g$b*$7872$RATN9))
                                                      ((case-lambda
                                                         ((g$t$7876$RATN9)
                                                          ((case-lambda
                                                             ((g$ls/false$7877$RATN9)
                                                              (if g$ls/false$7877$RATN9
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$7878$RATN9)
                                                                     (begin
                                                                       (g$check$7862$RATN9
                                                                         g$x*$7878$RATN9)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$7875$RATN9))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$7878$RATN9
                                                                           (g$f$7873$RATN9
                                                                             (cdr g$lhs*$7874$RATN9)
                                                                             (cdr g$rhs*$7875$RATN9)))))))
                                                                  g$ls/false$7877$RATN9)
                                                                ((case-lambda
                                                                   ((g$t$7879$RATN9)
                                                                    ((case-lambda
                                                                       ((g$ls/false$7880$RATN9)
                                                                        (if g$ls/false$7880$RATN9
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$7881$RATN9
                                                                                 g$x$7882$RATN9)
                                                                               (begin
                                                                                 (g$check$7862$RATN9
                                                                                   (cons
                                                                                     g$x$7882$RATN9
                                                                                     g$x*$7881$RATN9))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$7875$RATN9))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$7881$RATN9
                                                                                       g$x$7882$RATN9)
                                                                                     (g$f$7873$RATN9
                                                                                       (cdr g$lhs*$7874$RATN9)
                                                                                       (cdr g$rhs*$7875$RATN9)))))))
                                                                            g$ls/false$7880$RATN9)
                                                                          ((case-lambda
                                                                             ((g$t$7883$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$7884$RATN9)
                                                                                  (if g$ls/false$7884$RATN9
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$7885$RATN9)
                                                                                         (g$syntax-violation$7321$RATN9
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$7861$RATN9
                                                                                           g$others$7885$RATN9)))
                                                                                      g$ls/false$7884$RATN9)
                                                                                    (g$syntax-violation$7321$RATN9
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$7883$RATN9))))
                                                                               (g$syntax-dispatch$7215$RATN9
                                                                                 g$t$7883$RATN9
                                                                                 'any))))
                                                                           g$t$7879$RATN9))))
                                                                     (g$syntax-dispatch$7215$RATN9
                                                                       g$t$7879$RATN9
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$7876$RATN9))))
                                                           (g$syntax-dispatch$7215$RATN9
                                                             g$t$7876$RATN9
                                                             'each-any))))
                                                       (car g$lhs*$7874$RATN9)))))))
                                        g$f$7873$RATN9)
                                      g$lhs*$7869$RATN9
                                      g$rhs*$7870$RATN9))))
                                g$ls/false$7868$RATN9)
                              (g$syntax-violation$7321$RATN9
                                '#f
                                '"invalid syntax"
                                g$t$7867$RATN9))))
                         (g$syntax-dispatch$7215$RATN9
                           g$t$7867$RATN9
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$7863$RATN9))))
               (g$syntax-dispatch$7215$RATN9
                 g$t$7863$RATN9
                 '(_ () any . each-any)))))
           g$stx$7861$RATN9)))))
   (g$trace-lambda-macro$7184$RATN9
     g$trace-lambda-macro$10634$RATN9
     (case-lambda
       ((g$stx$7888$RATN9)
        ((case-lambda
           ((g$t$7889$RATN9)
            ((case-lambda
               ((g$ls/false$7890$RATN9)
                (if g$ls/false$7890$RATN9
                  (apply
                    (case-lambda
                      ((g$who$7891$RATN9
                         g$fmls$7892$RATN9
                         g$b$7893$RATN9
                         g$b*$7894$RATN9)
                       (if (g$valid-bound-ids?$6942$RATN9 g$fmls$7892$RATN9)
                         (g$bless$7178$RATN9
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$7891$RATN9)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$7892$RATN9
                                 (cons g$b$7893$RATN9 g$b*$7894$RATN9)))))
                         (g$invalid-fmls-error$7180$RATN9
                           g$stx$7888$RATN9
                           g$fmls$7892$RATN9))))
                    g$ls/false$7890$RATN9)
                  ((case-lambda
                     ((g$t$7895$RATN9)
                      ((case-lambda
                         ((g$ls/false$7896$RATN9)
                          (if g$ls/false$7896$RATN9
                            (apply
                              (case-lambda
                                ((g$who$7897$RATN9
                                   g$fmls$7898$RATN9
                                   g$last$7899$RATN9
                                   g$b$7900$RATN9
                                   g$b*$7901$RATN9)
                                 (if (g$valid-bound-ids?$6942$RATN9
                                       (cons
                                         g$last$7899$RATN9
                                         g$fmls$7898$RATN9))
                                   (g$bless$7178$RATN9
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$7897$RATN9)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$7898$RATN9
                                             g$last$7899$RATN9)
                                           (cons
                                             g$b$7900$RATN9
                                             g$b*$7901$RATN9)))))
                                   (g$invalid-fmls-error$7180$RATN9
                                     g$stx$7888$RATN9
                                     (append
                                       g$fmls$7898$RATN9
                                       g$last$7899$RATN9)))))
                              g$ls/false$7896$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$7895$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$7895$RATN9
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$7889$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7889$RATN9
               '(_ any each-any any . each-any)))))
         g$stx$7888$RATN9))))
   (g$trace-define-macro$7185$RATN9
     g$trace-define-macro$10635$RATN9
     (case-lambda
       ((g$stx$7902$RATN9)
        ((case-lambda
           ((g$t$7903$RATN9)
            ((case-lambda
               ((g$ls/false$7904$RATN9)
                (if g$ls/false$7904$RATN9
                  (apply
                    (case-lambda
                      ((g$who$7905$RATN9
                         g$fmls$7906$RATN9
                         g$b$7907$RATN9
                         g$b*$7908$RATN9)
                       (if (g$valid-bound-ids?$6942$RATN9 g$fmls$7906$RATN9)
                         (g$bless$7178$RATN9
                           (list
                             'define
                             g$who$7905$RATN9
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$7905$RATN9)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$7906$RATN9
                                   (cons g$b$7907$RATN9 g$b*$7908$RATN9))))))
                         (g$invalid-fmls-error$7180$RATN9
                           g$stx$7902$RATN9
                           g$fmls$7906$RATN9))))
                    g$ls/false$7904$RATN9)
                  ((case-lambda
                     ((g$t$7909$RATN9)
                      ((case-lambda
                         ((g$ls/false$7910$RATN9)
                          (if g$ls/false$7910$RATN9
                            (apply
                              (case-lambda
                                ((g$who$7911$RATN9
                                   g$fmls$7912$RATN9
                                   g$last$7913$RATN9
                                   g$b$7914$RATN9
                                   g$b*$7915$RATN9)
                                 (if (g$valid-bound-ids?$6942$RATN9
                                       (cons
                                         g$last$7913$RATN9
                                         g$fmls$7912$RATN9))
                                   (g$bless$7178$RATN9
                                     (list
                                       'define
                                       g$who$7911$RATN9
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$7911$RATN9)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$7912$RATN9
                                               g$last$7913$RATN9)
                                             (cons
                                               g$b$7914$RATN9
                                               g$b*$7915$RATN9))))))
                                   (g$invalid-fmls-error$7180$RATN9
                                     g$stx$7902$RATN9
                                     (append
                                       g$fmls$7912$RATN9
                                       g$last$7913$RATN9)))))
                              g$ls/false$7910$RATN9)
                            ((case-lambda
                               ((g$t$7916$RATN9)
                                ((case-lambda
                                   ((g$ls/false$7917$RATN9)
                                    (if g$ls/false$7917$RATN9
                                      (apply
                                        (case-lambda
                                          ((g$who$7918$RATN9 g$expr$7919$RATN9)
                                           (if (g$id?$6937$RATN9
                                                 g$who$7918$RATN9)
                                             (g$bless$7178$RATN9
                                               (list
                                                 'define
                                                 g$who$7918$RATN9
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$7919$RATN9))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$7918$RATN9)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$7321$RATN9
                                               '#f
                                               '"invalid name"
                                               g$stx$7902$RATN9))))
                                        g$ls/false$7917$RATN9)
                                      (g$syntax-violation$7321$RATN9
                                        '#f
                                        '"invalid syntax"
                                        g$t$7916$RATN9))))
                                 (g$syntax-dispatch$7215$RATN9
                                   g$t$7916$RATN9
                                   '(_ any any)))))
                             g$t$7909$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$7909$RATN9
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$7903$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$7903$RATN9
               '(_ (any . each-any) any . each-any)))))
         g$stx$7902$RATN9))))
   (g$trace-define-syntax-macro$7186$RATN9
     g$trace-define-syntax-macro$10636$RATN9
     (case-lambda
       ((g$stx$7920$RATN9)
        ((case-lambda
           ((g$t$7921$RATN9)
            ((case-lambda
               ((g$ls/false$7922$RATN9)
                (if g$ls/false$7922$RATN9
                  (apply
                    (case-lambda
                      ((g$who$7923$RATN9 g$expr$7924$RATN9)
                       (if (g$id?$6937$RATN9 g$who$7923$RATN9)
                         (g$bless$7178$RATN9
                           (list
                             'define-syntax
                             g$who$7923$RATN9
                             (list
                               'make-traced-macro
                               (list 'quote g$who$7923$RATN9)
                               g$expr$7924$RATN9)))
                         (g$syntax-violation$7321$RATN9
                           '#f
                           '"invalid name"
                           g$stx$7920$RATN9))))
                    g$ls/false$7922$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$7921$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$7921$RATN9 '(_ any any)))))
         g$stx$7920$RATN9))))
   (g$trace-let/rec-syntax$7187$RATN9
     g$trace-let/rec-syntax$10637$RATN9
     (case-lambda
       ((g$who$7925$RATN9)
        (case-lambda
          ((g$stx$7926$RATN9)
           ((case-lambda
              ((g$t$7927$RATN9)
               ((case-lambda
                  ((g$ls/false$7928$RATN9)
                   (if g$ls/false$7928$RATN9
                     (apply
                       (case-lambda
                         ((g$lhs*$7929$RATN9
                            g$rhs*$7930$RATN9
                            g$b$7931$RATN9
                            g$b*$7932$RATN9)
                          (if (g$valid-bound-ids?$6942$RATN9 g$lhs*$7929$RATN9)
                            ((case-lambda
                               ((g$rhs*$7933$RATN9)
                                (g$bless$7178$RATN9
                                  (cons
                                    g$who$7925$RATN9
                                    (cons
                                      (map list
                                           g$lhs*$7929$RATN9
                                           g$rhs*$7933$RATN9)
                                      (cons g$b$7931$RATN9 g$b*$7932$RATN9))))))
                             (map (case-lambda
                                    ((g$lhs$7934$RATN9 g$rhs$7935$RATN9)
                                     (list
                                       'make-traced-macro
                                       (list 'quote g$lhs$7934$RATN9)
                                       g$rhs$7935$RATN9)))
                                  g$lhs*$7929$RATN9
                                  g$rhs*$7930$RATN9))
                            (g$invalid-fmls-error$7180$RATN9
                              g$stx$7926$RATN9
                              g$lhs*$7929$RATN9))))
                       g$ls/false$7928$RATN9)
                     (g$syntax-violation$7321$RATN9
                       '#f
                       '"invalid syntax"
                       g$t$7927$RATN9))))
                (g$syntax-dispatch$7215$RATN9
                  g$t$7927$RATN9
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$7926$RATN9))))))
   (g$trace-let-syntax-macro$7188$RATN9
     g$trace-let-syntax-macro$10638$RATN9
     (g$trace-let/rec-syntax$7187$RATN9 'let-syntax))
   (g$trace-letrec-syntax-macro$7189$RATN9
     g$trace-letrec-syntax-macro$10639$RATN9
     (g$trace-let/rec-syntax$7187$RATN9 'letrec-syntax))
   (g$guard-macro$7190$RATN9
     g$guard-macro$10640$RATN9
     (case-lambda
       ((g$x$7936$RATN9)
        (letrec* ((g$gen-clauses$7937$RATN9
                    (case-lambda
                      ((g$con$7949$RATN9
                         g$outerk$7950$RATN9
                         g$clause*$7951$RATN9)
                       (letrec* ((g$f$7952$RATN9
                                   (case-lambda
                                     ((g$x$7980$RATN9 g$k$7981$RATN9)
                                      ((case-lambda
                                         ((g$t$7982$RATN9)
                                          ((case-lambda
                                             ((g$ls/false$7983$RATN9)
                                              (if g$ls/false$7983$RATN9
                                                (apply
                                                  (case-lambda
                                                    ((g$e$7984$RATN9
                                                       g$p$7985$RATN9)
                                                     ((case-lambda
                                                        ((g$t$7986$RATN9)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$7986$RATN9
                                                               g$e$7984$RATN9))
                                                           (list
                                                             'if
                                                             g$t$7986$RATN9
                                                             (list
                                                               g$p$7985$RATN9
                                                               g$t$7986$RATN9)
                                                             g$k$7981$RATN9))))
                                                      (gensym))))
                                                  g$ls/false$7983$RATN9)
                                                ((case-lambda
                                                   ((g$t$7987$RATN9)
                                                    ((case-lambda
                                                       ((g$ls/false$7988$RATN9)
                                                        (if g$ls/false$7988$RATN9
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$7989$RATN9)
                                                               ((case-lambda
                                                                  ((g$t$7990$RATN9)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$7990$RATN9
                                                                         g$e$7989$RATN9))
                                                                     (list
                                                                       'if
                                                                       g$t$7990$RATN9
                                                                       g$t$7990$RATN9
                                                                       g$k$7981$RATN9))))
                                                                (gensym))))
                                                            g$ls/false$7988$RATN9)
                                                          ((case-lambda
                                                             ((g$t$7991$RATN9)
                                                              ((case-lambda
                                                                 ((g$ls/false$7992$RATN9)
                                                                  (if g$ls/false$7992$RATN9
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$7993$RATN9
                                                                           g$v$7994$RATN9
                                                                           g$v*$7995$RATN9)
                                                                         (list
                                                                           'if
                                                                           g$e$7993$RATN9
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$7994$RATN9
                                                                               g$v*$7995$RATN9))
                                                                           g$k$7981$RATN9)))
                                                                      g$ls/false$7992$RATN9)
                                                                    ((case-lambda
                                                                       ((g$t$7996$RATN9)
                                                                        ((case-lambda
                                                                           ((g$ls/false$7997$RATN9)
                                                                            (if g$ls/false$7997$RATN9
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$7321$RATN9
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$7980$RATN9)))
                                                                                g$ls/false$7997$RATN9)
                                                                              (g$syntax-violation$7321$RATN9
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$7996$RATN9))))
                                                                         (g$syntax-dispatch$7215$RATN9
                                                                           g$t$7996$RATN9
                                                                           '_))))
                                                                     g$t$7991$RATN9))))
                                                               (g$syntax-dispatch$7215$RATN9
                                                                 g$t$7991$RATN9
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$7987$RATN9))))
                                                     (g$syntax-dispatch$7215$RATN9
                                                       g$t$7987$RATN9
                                                       '(any)))))
                                                 g$t$7982$RATN9))))
                                           (g$syntax-dispatch$7215$RATN9
                                             g$t$7982$RATN9
                                             '(any #(scheme-id =>) any)))))
                                       g$x$7980$RATN9))))
                                 (g$f*$7953$RATN9
                                   (case-lambda
                                     ((g$x*$7960$RATN9)
                                      ((case-lambda
                                         ((g$t$7961$RATN9)
                                          ((case-lambda
                                             ((g$ls/false$7962$RATN9)
                                              (if g$ls/false$7962$RATN9
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$7949$RATN9)
                                                       '#t)))
                                                  g$ls/false$7962$RATN9)
                                                ((case-lambda
                                                   ((g$t$7963$RATN9)
                                                    ((case-lambda
                                                       ((g$ls/false$7964$RATN9)
                                                        (if g$ls/false$7964$RATN9
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$7965$RATN9
                                                                 g$e*$7966$RATN9)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$7965$RATN9
                                                                     g$e*$7966$RATN9))
                                                                 '#f)))
                                                            g$ls/false$7964$RATN9)
                                                          ((case-lambda
                                                             ((g$t$7967$RATN9)
                                                              ((case-lambda
                                                                 ((g$ls/false$7968$RATN9)
                                                                  (if g$ls/false$7968$RATN9
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$7969$RATN9
                                                                           g$cls*$7970$RATN9)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$7953$RATN9
                                                                                g$cls*$7970$RATN9)))
                                                                           (case-lambda
                                                                             ((g$e$7973$RATN9
                                                                                g$g$7974$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$g$7975$RATN9
                                                                                    g$e$7976$RATN9)
                                                                                  (values
                                                                                    (g$f$7952$RATN9
                                                                                      g$cls$7969$RATN9
                                                                                      g$e$7976$RATN9)
                                                                                    g$g$7975$RATN9)))
                                                                               g$g$7974$RATN9
                                                                               g$e$7973$RATN9))))))
                                                                      g$ls/false$7968$RATN9)
                                                                    ((case-lambda
                                                                       ((g$t$7977$RATN9)
                                                                        ((case-lambda
                                                                           ((g$ls/false$7978$RATN9)
                                                                            (if g$ls/false$7978$RATN9
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$7979$RATN9)
                                                                                   (g$syntax-violation$7321$RATN9
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$7979$RATN9)))
                                                                                g$ls/false$7978$RATN9)
                                                                              (g$syntax-violation$7321$RATN9
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$7977$RATN9))))
                                                                         (g$syntax-dispatch$7215$RATN9
                                                                           g$t$7977$RATN9
                                                                           'any))))
                                                                     g$t$7967$RATN9))))
                                                               (g$syntax-dispatch$7215$RATN9
                                                                 g$t$7967$RATN9
                                                                 '(any .
                                                                       any)))))
                                                           g$t$7963$RATN9))))
                                                     (g$syntax-dispatch$7215$RATN9
                                                       g$t$7963$RATN9
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$7961$RATN9))))
                                           (g$syntax-dispatch$7215$RATN9
                                             g$t$7961$RATN9
                                             '()))))
                                       g$x*$7960$RATN9)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$7953$RATN9 g$clause*$7951$RATN9)))
                           (case-lambda
                             ((g$code$7956$RATN9 g$raisek$7957$RATN9)
                              ((case-lambda
                                 ((g$raisek$7958$RATN9 g$code$7959$RATN9)
                                  (if g$raisek$7958$RATN9
                                    (list g$outerk$7950$RATN9 g$code$7959$RATN9)
                                    g$code$7959$RATN9)))
                               g$raisek$7957$RATN9
                               g$code$7956$RATN9)))))))))
          ((case-lambda
             ((g$t$7938$RATN9)
              ((case-lambda
                 ((g$ls/false$7939$RATN9)
                  (if (if g$ls/false$7939$RATN9
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$7940$RATN9
                                 g$clause*$7941$RATN9
                                 g$b$7942$RATN9
                                 g$b*$7943$RATN9)
                               (g$id?$6937$RATN9 g$con$7940$RATN9)))
                            g$ls/false$7939$RATN9))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$7944$RATN9
                           g$clause*$7945$RATN9
                           g$b$7946$RATN9
                           g$b*$7947$RATN9)
                         ((case-lambda
                            ((g$outerk$7948$RATN9)
                             (g$bless$7178$RATN9
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$7948$RATN9)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$7944$RATN9)
                                           (g$gen-clauses$7937$RATN9
                                             g$con$7944$RATN9
                                             g$outerk$7948$RATN9
                                             g$clause*$7945$RATN9))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$7946$RATN9
                                                 g$b*$7947$RATN9))))))))))))
                          (gensym))))
                      g$ls/false$7939$RATN9)
                    (g$syntax-violation$7321$RATN9
                      '#f
                      '"invalid syntax"
                      g$t$7938$RATN9))))
               (g$syntax-dispatch$7215$RATN9
                 g$t$7938$RATN9
                 '(_ (any . each-any) any . each-any)))))
           g$x$7936$RATN9)))))
   (g$define-enumeration-macro$7191$RATN9
     g$define-enumeration-macro$10641$RATN9
     (case-lambda
       ((g$stx$7998$RATN9)
        (letrec* ((g$set?$7999$RATN9
                    (case-lambda
                      ((g$x$8012$RATN9)
                       ((case-lambda
                          ((g$t$8013$RATN9)
                           (if g$t$8013$RATN9
                             g$t$8013$RATN9
                             (begin
                               '#f
                               (if (not (memq
                                          (car g$x$8012$RATN9)
                                          (cdr g$x$8012$RATN9)))
                                 (begin
                                   '#f
                                   (g$set?$7999$RATN9 (cdr g$x$8012$RATN9)))
                                 '#f)))))
                        (null? g$x$8012$RATN9)))))
                  (g$remove-dups$8000$RATN9
                    (case-lambda
                      ((g$ls$8011$RATN9)
                       (if (null? g$ls$8011$RATN9)
                         '()
                         (cons
                           (car g$ls$8011$RATN9)
                           (g$remove-dups$8000$RATN9
                             (g$remq$5372$RATN9
                               (car g$ls$8011$RATN9)
                               (cdr g$ls$8011$RATN9)))))))))
          ((case-lambda
             ((g$t$8001$RATN9)
              ((case-lambda
                 ((g$ls/false$8002$RATN9)
                  (if (if g$ls/false$8002$RATN9
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8003$RATN9
                                 g$id*$8004$RATN9
                                 g$maker$8005$RATN9)
                               (if (g$id?$6937$RATN9 g$name$8003$RATN9)
                                 (if (g$id?$6937$RATN9 g$maker$8005$RATN9)
                                   (begin
                                     '#f
                                     (g$for-all$5365$RATN9
                                       g$id?$6937$RATN9
                                       g$id*$8004$RATN9))
                                   '#f)
                                 '#f)))
                            g$ls/false$8002$RATN9))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8006$RATN9 g$id*$8007$RATN9 g$maker$8008$RATN9)
                         ((case-lambda
                            ((g$name*$8009$RATN9 g$mk$8010$RATN9)
                             (g$bless$7178$RATN9
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8010$RATN9
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8009$RATN9))))
                                 (list
                                   'define-syntax
                                   g$name$8006$RATN9
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8009$RATN9))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8006$RATN9)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8008$RATN9
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8008$RATN9)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8009$RATN9))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8008$RATN9)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8010$RATN9
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8000$RATN9
                            (g$syntax->datum$7324$RATN9 g$id*$8007$RATN9))
                          (gensym))))
                      g$ls/false$8002$RATN9)
                    (g$syntax-violation$7321$RATN9
                      '#f
                      '"invalid syntax"
                      g$t$8001$RATN9))))
               (g$syntax-dispatch$7215$RATN9
                 g$t$8001$RATN9
                 '(_ any each-any any)))))
           g$stx$7998$RATN9)))))
   (g$time-macro$7192$RATN9
     g$time-macro$10642$RATN9
     (case-lambda
       ((g$stx$8014$RATN9)
        ((case-lambda
           ((g$t$8015$RATN9)
            ((case-lambda
               ((g$ls/false$8016$RATN9)
                (if g$ls/false$8016$RATN9
                  (apply
                    (case-lambda
                      ((g$expr$8017$RATN9)
                       ((case-lambda
                          ((g$str$8018$RATN9)
                           (g$bless$7178$RATN9
                             (list
                               'time-it
                               g$str$8018$RATN9
                               (list 'lambda '() g$expr$8017$RATN9)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6095$RATN9)))
                          (case-lambda
                            ((g$p$8021$RATN9 g$e$8022$RATN9)
                             ((case-lambda
                                ((g$e$8023$RATN9 g$p$8024$RATN9)
                                 (begin
                                   (write
                                     (g$syntax->datum$7324$RATN9
                                       g$expr$8017$RATN9)
                                     g$p$8024$RATN9)
                                   (g$e$8023$RATN9))))
                              g$e$8022$RATN9
                              g$p$8021$RATN9)))))))
                    g$ls/false$8016$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8015$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$8015$RATN9 '(_ any)))))
         g$stx$8014$RATN9))))
   (g$delay-macro$7193$RATN9
     g$delay-macro$10643$RATN9
     (case-lambda
       ((g$stx$8025$RATN9)
        ((case-lambda
           ((g$t$8026$RATN9)
            ((case-lambda
               ((g$ls/false$8027$RATN9)
                (if g$ls/false$8027$RATN9
                  (apply
                    (case-lambda
                      ((g$expr$8028$RATN9)
                       (g$bless$7178$RATN9
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8028$RATN9)))))
                    g$ls/false$8027$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8026$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$8026$RATN9 '(_ any)))))
         g$stx$8025$RATN9))))
   (g$assert-macro$7194$RATN9
     g$assert-macro$10644$RATN9
     (case-lambda
       ((g$stx$8029$RATN9)
        ((case-lambda
           ((g$t$8030$RATN9)
            ((case-lambda
               ((g$ls/false$8031$RATN9)
                (if g$ls/false$8031$RATN9
                  (apply
                    (case-lambda
                      ((g$expr$8032$RATN9)
                       (g$bless$7178$RATN9
                         (list
                           'unless
                           g$expr$8032$RATN9
                           (list
                             'assertion-violation
                             ''assert
                             '"assertion failed"
                             (list 'quote g$expr$8032$RATN9))))))
                    g$ls/false$8031$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8030$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$8030$RATN9 '(_ any)))))
         g$stx$8029$RATN9))))
   (g$endianness-macro$7195$RATN9
     g$endianness-macro$10645$RATN9
     (case-lambda
       ((g$stx$8033$RATN9)
        ((case-lambda
           ((g$t$8034$RATN9)
            ((case-lambda
               ((g$ls/false$8035$RATN9)
                (if g$ls/false$8035$RATN9
                  (apply
                    (case-lambda
                      ((g$e$8036$RATN9)
                       ((case-lambda
                          ((g$t$8037$RATN9)
                           (if (eqv? g$t$8037$RATN9 'little)
                             (g$bless$7178$RATN9 ''little)
                             (if (eqv? g$t$8037$RATN9 'big)
                               (g$bless$7178$RATN9 ''big)
                               (g$syntax-violation$7321$RATN9
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8033$RATN9)))))
                        (g$syntax->datum$7324$RATN9 g$e$8036$RATN9))))
                    g$ls/false$8035$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8034$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$8034$RATN9 '(_ any)))))
         g$stx$8033$RATN9))))
   (g$identifier-syntax-macro$7196$RATN9
     g$identifier-syntax-macro$10646$RATN9
     (case-lambda
       ((g$stx$8038$RATN9)
        ((case-lambda
           ((g$t$8039$RATN9)
            ((case-lambda
               ((g$ls/false$8040$RATN9)
                (if g$ls/false$8040$RATN9
                  (apply
                    (case-lambda
                      ((g$expr$8041$RATN9)
                       (g$bless$7178$RATN9
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8041$RATN9))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8041$RATN9)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8040$RATN9)
                  ((case-lambda
                     ((g$t$8042$RATN9)
                      ((case-lambda
                         ((g$ls/false$8043$RATN9)
                          (if (if g$ls/false$8043$RATN9
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8044$RATN9
                                         g$expr1$8045$RATN9
                                         g$id2$8046$RATN9
                                         g$expr2$8047$RATN9
                                         g$expr3$8048$RATN9)
                                       (if (g$id?$6937$RATN9 g$id1$8044$RATN9)
                                         (if (g$id?$6937$RATN9 g$id2$8046$RATN9)
                                           (begin
                                             '#f
                                             (g$id?$6937$RATN9
                                               g$expr2$8047$RATN9))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8043$RATN9))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8049$RATN9
                                   g$expr1$8050$RATN9
                                   g$id2$8051$RATN9
                                   g$expr2$8052$RATN9
                                   g$expr3$8053$RATN9)
                                 (g$bless$7178$RATN9
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8050$RATN9))
                                         (list
                                           (list 'set! 'id g$expr2$8052$RATN9)
                                           (list 'syntax g$expr3$8053$RATN9))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8050$RATN9
                                               '(e* ...))))))))))
                              g$ls/false$8043$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$8042$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$8042$RATN9
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8039$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$8039$RATN9 '(_ any)))))
         g$stx$8038$RATN9))))
   (g$do-macro$7197$RATN9
     g$do-macro$10647$RATN9
     (case-lambda
       ((g$stx$8054$RATN9)
        (letrec* ((g$bind$8055$RATN9
                    (case-lambda
                      ((g$x$8067$RATN9)
                       ((case-lambda
                          ((g$t$8068$RATN9)
                           ((case-lambda
                              ((g$ls/false$8069$RATN9)
                               (if g$ls/false$8069$RATN9
                                 (apply
                                   (case-lambda
                                     ((g$x$8070$RATN9 g$init$8071$RATN9)
                                      (list
                                        g$x$8070$RATN9
                                        g$init$8071$RATN9
                                        g$x$8070$RATN9)))
                                   g$ls/false$8069$RATN9)
                                 ((case-lambda
                                    ((g$t$8072$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8073$RATN9)
                                         (if g$ls/false$8073$RATN9
                                           (apply
                                             (case-lambda
                                               ((g$x$8074$RATN9
                                                  g$init$8075$RATN9
                                                  g$step$8076$RATN9)
                                                (list
                                                  g$x$8074$RATN9
                                                  g$init$8075$RATN9
                                                  g$step$8076$RATN9)))
                                             g$ls/false$8073$RATN9)
                                           ((case-lambda
                                              ((g$t$8077$RATN9)
                                               ((case-lambda
                                                  ((g$ls/false$8078$RATN9)
                                                   (if g$ls/false$8078$RATN9
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$7321$RATN9
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8054$RATN9)))
                                                       g$ls/false$8078$RATN9)
                                                     (g$syntax-violation$7321$RATN9
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8077$RATN9))))
                                                (g$syntax-dispatch$7215$RATN9
                                                  g$t$8077$RATN9
                                                  '_))))
                                            g$t$8072$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8072$RATN9
                                        '(any any any)))))
                                  g$t$8068$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$8068$RATN9
                              '(any any)))))
                        g$x$8067$RATN9)))))
          ((case-lambda
             ((g$t$8056$RATN9)
              ((case-lambda
                 ((g$ls/false$8057$RATN9)
                  (if g$ls/false$8057$RATN9
                    (apply
                      (case-lambda
                        ((g$binding*$8058$RATN9
                           g$test$8059$RATN9
                           g$expr*$8060$RATN9
                           g$command*$8061$RATN9)
                         ((case-lambda
                            ((g$t$8062$RATN9)
                             ((case-lambda
                                ((g$ls/false$8063$RATN9)
                                 (if g$ls/false$8063$RATN9
                                   (apply
                                     (case-lambda
                                       ((g$x*$8064$RATN9
                                          g$init*$8065$RATN9
                                          g$step*$8066$RATN9)
                                        (if (g$valid-bound-ids?$6942$RATN9
                                              g$x*$8064$RATN9)
                                          (g$bless$7178$RATN9
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8064$RATN9
                                                    (list
                                                      'if
                                                      g$test$8059$RATN9
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8060$RATN9))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8061$RATN9
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8066$RATN9))))))))
                                              (cons 'loop g$init*$8065$RATN9)))
                                          (g$syntax-violation$7321$RATN9
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8054$RATN9))))
                                     g$ls/false$8063$RATN9)
                                   (g$syntax-violation$7321$RATN9
                                     '#f
                                     '"invalid syntax"
                                     g$t$8062$RATN9))))
                              (g$syntax-dispatch$7215$RATN9
                                g$t$8062$RATN9
                                '#(each (any any any))))))
                          (map g$bind$8055$RATN9 g$binding*$8058$RATN9))))
                      g$ls/false$8057$RATN9)
                    (g$syntax-violation$7321$RATN9
                      '#f
                      '"invalid syntax"
                      g$t$8056$RATN9))))
               (g$syntax-dispatch$7215$RATN9
                 g$t$8056$RATN9
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8054$RATN9)))))
   (g$let*-macro$7198$RATN9
     g$let*-macro$10648$RATN9
     (case-lambda
       ((g$stx$8079$RATN9)
        ((case-lambda
           ((g$t$8080$RATN9)
            ((case-lambda
               ((g$ls/false$8081$RATN9)
                (if (if g$ls/false$8081$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8082$RATN9
                               g$rhs*$8083$RATN9
                               g$b$8084$RATN9
                               g$b*$8085$RATN9)
                             (g$for-all$5365$RATN9
                               g$id?$6937$RATN9
                               g$lhs*$8082$RATN9)))
                          g$ls/false$8081$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8086$RATN9
                         g$rhs*$8087$RATN9
                         g$b$8088$RATN9
                         g$b*$8089$RATN9)
                       (g$bless$7178$RATN9
                         ((letrec ((g$f$8090$RATN9
                                     (case-lambda
                                       ((g$x*$8091$RATN9)
                                        (if (null? g$x*$8091$RATN9)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8088$RATN9
                                                g$b*$8089$RATN9)))
                                          (list
                                            'let
                                            (list (car g$x*$8091$RATN9))
                                            (g$f$8090$RATN9
                                              (cdr g$x*$8091$RATN9))))))))
                            g$f$8090$RATN9)
                          (map list g$lhs*$8086$RATN9 g$rhs*$8087$RATN9)))))
                    g$ls/false$8081$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8080$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$8080$RATN9
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8079$RATN9))))
   (g$or-macro$7199$RATN9
     g$or-macro$10649$RATN9
     (case-lambda
       ((g$stx$8092$RATN9)
        ((case-lambda
           ((g$t$8093$RATN9)
            ((case-lambda
               ((g$ls/false$8094$RATN9)
                (if g$ls/false$8094$RATN9
                  (apply (case-lambda (() '#f)) g$ls/false$8094$RATN9)
                  ((case-lambda
                     ((g$t$8095$RATN9)
                      ((case-lambda
                         ((g$ls/false$8096$RATN9)
                          (if g$ls/false$8096$RATN9
                            (apply
                              (case-lambda
                                ((g$e$8097$RATN9 g$e*$8098$RATN9)
                                 (g$bless$7178$RATN9
                                   ((letrec ((g$f$8099$RATN9
                                               (case-lambda
                                                 ((g$e$8100$RATN9
                                                    g$e*$8101$RATN9)
                                                  (if (null? g$e*$8101$RATN9)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8100$RATN9)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8100$RATN9))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8099$RATN9
                                                          (car g$e*$8101$RATN9)
                                                          (cdr g$e*$8101$RATN9)))))))))
                                      g$f$8099$RATN9)
                                    g$e$8097$RATN9
                                    g$e*$8098$RATN9))))
                              g$ls/false$8096$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$8095$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$8095$RATN9
                         '(_ any . each-any)))))
                   g$t$8093$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$8093$RATN9 '(_)))))
         g$stx$8092$RATN9))))
   (g$and-macro$7200$RATN9
     g$and-macro$10650$RATN9
     (case-lambda
       ((g$stx$8102$RATN9)
        ((case-lambda
           ((g$t$8103$RATN9)
            ((case-lambda
               ((g$ls/false$8104$RATN9)
                (if g$ls/false$8104$RATN9
                  (apply (case-lambda (() '#t)) g$ls/false$8104$RATN9)
                  ((case-lambda
                     ((g$t$8105$RATN9)
                      ((case-lambda
                         ((g$ls/false$8106$RATN9)
                          (if g$ls/false$8106$RATN9
                            (apply
                              (case-lambda
                                ((g$e$8107$RATN9 g$e*$8108$RATN9)
                                 (g$bless$7178$RATN9
                                   ((letrec ((g$f$8109$RATN9
                                               (case-lambda
                                                 ((g$e$8110$RATN9
                                                    g$e*$8111$RATN9)
                                                  (if (null? g$e*$8111$RATN9)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8110$RATN9)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8110$RATN9
                                                        (cons
                                                          (g$f$8109$RATN9
                                                            (car g$e*$8111$RATN9)
                                                            (cdr g$e*$8111$RATN9))
                                                          '(#f)))))))))
                                      g$f$8109$RATN9)
                                    g$e$8107$RATN9
                                    g$e*$8108$RATN9))))
                              g$ls/false$8106$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$8105$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$8105$RATN9
                         '(_ any . each-any)))))
                   g$t$8103$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$8103$RATN9 '(_)))))
         g$stx$8102$RATN9))))
   (g$cond-macro$7201$RATN9
     g$cond-macro$10651$RATN9
     (case-lambda
       ((g$stx$8112$RATN9)
        ((case-lambda
           ((g$t$8113$RATN9)
            ((case-lambda
               ((g$ls/false$8114$RATN9)
                (if g$ls/false$8114$RATN9
                  (apply
                    (case-lambda
                      ((g$cls$8115$RATN9 g$cls*$8116$RATN9)
                       (g$bless$7178$RATN9
                         ((letrec ((g$f$8117$RATN9
                                     (case-lambda
                                       ((g$cls$8118$RATN9 g$cls*$8119$RATN9)
                                        (if (null? g$cls*$8119$RATN9)
                                          ((case-lambda
                                             ((g$t$8120$RATN9)
                                              ((case-lambda
                                                 ((g$ls/false$8121$RATN9)
                                                  (if g$ls/false$8121$RATN9
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8122$RATN9
                                                           g$e*$8123$RATN9)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8122$RATN9
                                                             g$e*$8123$RATN9))))
                                                      g$ls/false$8121$RATN9)
                                                    ((case-lambda
                                                       ((g$t$8124$RATN9)
                                                        ((case-lambda
                                                           ((g$ls/false$8125$RATN9)
                                                            (if g$ls/false$8125$RATN9
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8126$RATN9
                                                                     g$p$8127$RATN9)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8126$RATN9))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8127$RATN9
                                                                         '(t))))))
                                                                g$ls/false$8125$RATN9)
                                                              ((case-lambda
                                                                 ((g$t$8128$RATN9)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8129$RATN9)
                                                                      (if g$ls/false$8129$RATN9
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8130$RATN9)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8130$RATN9
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8129$RATN9)
                                                                        ((case-lambda
                                                                           ((g$t$8131$RATN9)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8132$RATN9)
                                                                                (if g$ls/false$8132$RATN9
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8133$RATN9
                                                                                         g$e*$8134$RATN9)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8133$RATN9
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8134$RATN9))))
                                                                                    g$ls/false$8132$RATN9)
                                                                                  ((case-lambda
                                                                                     ((g$t$8135$RATN9)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8136$RATN9)
                                                                                          (if g$ls/false$8136$RATN9
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7321$RATN9
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8112$RATN9)))
                                                                                              g$ls/false$8136$RATN9)
                                                                                            (g$syntax-violation$7321$RATN9
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8135$RATN9))))
                                                                                       (g$syntax-dispatch$7215$RATN9
                                                                                         g$t$8135$RATN9
                                                                                         '_))))
                                                                                   g$t$8131$RATN9))))
                                                                             (g$syntax-dispatch$7215$RATN9
                                                                               g$t$8131$RATN9
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8128$RATN9))))
                                                                   (g$syntax-dispatch$7215$RATN9
                                                                     g$t$8128$RATN9
                                                                     '(any)))))
                                                               g$t$8124$RATN9))))
                                                         (g$syntax-dispatch$7215$RATN9
                                                           g$t$8124$RATN9
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8120$RATN9))))
                                               (g$syntax-dispatch$7215$RATN9
                                                 g$t$8120$RATN9
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8118$RATN9)
                                          ((case-lambda
                                             ((g$t$8137$RATN9)
                                              ((case-lambda
                                                 ((g$ls/false$8138$RATN9)
                                                  (if g$ls/false$8138$RATN9
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8139$RATN9
                                                           g$e*$8140$RATN9)
                                                         (g$syntax-violation$7321$RATN9
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8112$RATN9)))
                                                      g$ls/false$8138$RATN9)
                                                    ((case-lambda
                                                       ((g$t$8141$RATN9)
                                                        ((case-lambda
                                                           ((g$ls/false$8142$RATN9)
                                                            (if g$ls/false$8142$RATN9
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8143$RATN9
                                                                     g$p$8144$RATN9)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8143$RATN9))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8144$RATN9
                                                                         '(t))
                                                                       (g$f$8117$RATN9
                                                                         (car g$cls*$8119$RATN9)
                                                                         (cdr g$cls*$8119$RATN9))))))
                                                                g$ls/false$8142$RATN9)
                                                              ((case-lambda
                                                                 ((g$t$8145$RATN9)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8146$RATN9)
                                                                      (if g$ls/false$8146$RATN9
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8147$RATN9)
                                                                             (list
                                                                               'or
                                                                               g$e$8147$RATN9
                                                                               (g$f$8117$RATN9
                                                                                 (car g$cls*$8119$RATN9)
                                                                                 (cdr g$cls*$8119$RATN9)))))
                                                                          g$ls/false$8146$RATN9)
                                                                        ((case-lambda
                                                                           ((g$t$8148$RATN9)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8149$RATN9)
                                                                                (if g$ls/false$8149$RATN9
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8150$RATN9
                                                                                         g$e*$8151$RATN9)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8150$RATN9
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8151$RATN9)
                                                                                         (g$f$8117$RATN9
                                                                                           (car g$cls*$8119$RATN9)
                                                                                           (cdr g$cls*$8119$RATN9)))))
                                                                                    g$ls/false$8149$RATN9)
                                                                                  ((case-lambda
                                                                                     ((g$t$8152$RATN9)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8153$RATN9)
                                                                                          (if g$ls/false$8153$RATN9
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7321$RATN9
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8112$RATN9)))
                                                                                              g$ls/false$8153$RATN9)
                                                                                            (g$syntax-violation$7321$RATN9
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8152$RATN9))))
                                                                                       (g$syntax-dispatch$7215$RATN9
                                                                                         g$t$8152$RATN9
                                                                                         '_))))
                                                                                   g$t$8148$RATN9))))
                                                                             (g$syntax-dispatch$7215$RATN9
                                                                               g$t$8148$RATN9
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8145$RATN9))))
                                                                   (g$syntax-dispatch$7215$RATN9
                                                                     g$t$8145$RATN9
                                                                     '(any)))))
                                                               g$t$8141$RATN9))))
                                                         (g$syntax-dispatch$7215$RATN9
                                                           g$t$8141$RATN9
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8137$RATN9))))
                                               (g$syntax-dispatch$7215$RATN9
                                                 g$t$8137$RATN9
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8118$RATN9))))))
                            g$f$8117$RATN9)
                          g$cls$8115$RATN9
                          g$cls*$8116$RATN9))))
                    g$ls/false$8114$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8113$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$8113$RATN9
               '(_ any . each-any)))))
         g$stx$8112$RATN9))))
   (g$do-include$7202$RATN9
     g$do-include$10652$RATN9
     (case-lambda
       ((g$stx$8154$RATN9 g$id$8155$RATN9 g$filename$8156$RATN9)
        ((case-lambda
           ((g$filename$8157$RATN9)
            (begin
              (if (if (string? g$filename$8157$RATN9)
                    (begin '#f (g$id?$6937$RATN9 g$id$8155$RATN9))
                    '#f)
                (void)
                (g$syntax-violation$7321$RATN9
                  '#f
                  '"invalid syntax"
                  g$stx$8154$RATN9))
              (cons
                (g$bless$7178$RATN9 'begin)
                (with-input-from-file
                  g$filename$8157$RATN9
                  (case-lambda
                    (()
                     ((letrec ((g$f$8158$RATN9
                                 (case-lambda
                                   ((g$ls$8159$RATN9)
                                    ((case-lambda
                                       ((g$x$8160$RATN9)
                                        (if (eof-object? g$x$8160$RATN9)
                                          (reverse g$ls$8159$RATN9)
                                          (g$f$8158$RATN9
                                            (cons
                                              (g$datum->stx$6920$RATN9
                                                g$id$8155$RATN9
                                                g$x$8160$RATN9)
                                              g$ls$8159$RATN9)))))
                                     (read-annotated))))))
                        g$f$8158$RATN9)
                      '()))))))))
         (g$stx->datum$6948$RATN9 g$filename$8156$RATN9)))))
   (g$include-macro$7203$RATN9
     g$include-macro$10653$RATN9
     (case-lambda
       ((g$e$8161$RATN9)
        ((case-lambda
           ((g$t$8162$RATN9)
            ((case-lambda
               ((g$ls/false$8163$RATN9)
                (if g$ls/false$8163$RATN9
                  (apply
                    (case-lambda
                      ((g$id$8164$RATN9 g$filename$8165$RATN9)
                       (g$do-include$7202$RATN9
                         g$e$8161$RATN9
                         g$id$8164$RATN9
                         g$filename$8165$RATN9)))
                    g$ls/false$8163$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8162$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$8162$RATN9 '(any any)))))
         g$e$8161$RATN9))))
   (g$include-into-macro$7204$RATN9
     g$include-into-macro$10654$RATN9
     (case-lambda
       ((g$e$8166$RATN9)
        ((case-lambda
           ((g$t$8167$RATN9)
            ((case-lambda
               ((g$ls/false$8168$RATN9)
                (if g$ls/false$8168$RATN9
                  (apply
                    (case-lambda
                      ((g$id$8169$RATN9 g$filename$8170$RATN9)
                       (g$do-include$7202$RATN9
                         g$e$8166$RATN9
                         g$id$8169$RATN9
                         g$filename$8170$RATN9)))
                    g$ls/false$8168$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8167$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$8167$RATN9 '(_ any any)))))
         g$e$8166$RATN9))))
   (g$syntax-rules-macro$7205$RATN9
     g$syntax-rules-macro$10655$RATN9
     (case-lambda
       ((g$e$8171$RATN9)
        ((case-lambda
           ((g$t$8172$RATN9)
            ((case-lambda
               ((g$ls/false$8173$RATN9)
                (if g$ls/false$8173$RATN9
                  (apply
                    (case-lambda
                      ((g$lits$8174$RATN9 g$pat*$8175$RATN9 g$tmp*$8176$RATN9)
                       (begin
                         (g$verify-literals$7218$RATN9
                           g$lits$8174$RATN9
                           g$e$8171$RATN9)
                         (g$bless$7178$RATN9
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8174$RATN9
                                   (map (case-lambda
                                          ((g$pat$8177$RATN9 g$tmp$8178$RATN9)
                                           ((case-lambda
                                              ((g$t$8179$RATN9)
                                               ((case-lambda
                                                  ((g$ls/false$8180$RATN9)
                                                   (if g$ls/false$8180$RATN9
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8181$RATN9)
                                                          (list
                                                            (cons
                                                              'g
                                                              g$rest$8181$RATN9)
                                                            (list
                                                              'syntax
                                                              g$tmp$8178$RATN9))))
                                                       g$ls/false$8180$RATN9)
                                                     ((case-lambda
                                                        ((g$t$8182$RATN9)
                                                         ((case-lambda
                                                            ((g$ls/false$8183$RATN9)
                                                             (if g$ls/false$8183$RATN9
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7321$RATN9
                                                                      '#f
                                                                      '"invalid syntax-rules pattern"
                                                                      g$e$8171$RATN9
                                                                      g$pat$8177$RATN9)))
                                                                 g$ls/false$8183$RATN9)
                                                               (g$syntax-violation$7321$RATN9
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$8182$RATN9))))
                                                          (g$syntax-dispatch$7215$RATN9
                                                            g$t$8182$RATN9
                                                            '_))))
                                                      g$t$8179$RATN9))))
                                                (g$syntax-dispatch$7215$RATN9
                                                  g$t$8179$RATN9
                                                  '(_ . any)))))
                                            g$pat$8177$RATN9)))
                                        g$pat*$8175$RATN9
                                        g$tmp*$8176$RATN9)))))))))
                    g$ls/false$8173$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8172$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$8172$RATN9
               '(_ each-any . #(each (any any)))))))
         g$e$8171$RATN9))))
   (g$quasiquote-macro$7206$RATN9
     g$quasiquote-macro$10656$RATN9
     ((case-lambda
        (()
         (letrec* ((g$datum$8184$RATN9
                     (case-lambda
                       ((g$x$8315$RATN9)
                        (list
                          (g$scheme-stx$7158$RATN9 'quote)
                          (g$mkstx$6925$RATN9 g$x$8315$RATN9 '() '() '())))))
                   (g$quasicons*$8200$RATN9
                     (case-lambda
                       ((g$x$8311$RATN9 g$y$8312$RATN9)
                        ((letrec ((g$f$8313$RATN9
                                    (case-lambda
                                      ((g$x$8314$RATN9)
                                       (if (null? g$x$8314$RATN9)
                                         g$y$8312$RATN9
                                         (g$quasicons$8201$RATN9
                                           (car g$x$8314$RATN9)
                                           (g$f$8313$RATN9
                                             (cdr g$x$8314$RATN9))))))))
                           g$f$8313$RATN9)
                         g$x$8311$RATN9))))
                   (g$quasicons$8201$RATN9
                     (case-lambda
                       ((g$x$8292$RATN9 g$y$8293$RATN9)
                        ((case-lambda
                           ((g$t$8294$RATN9)
                            ((case-lambda
                               ((g$ls/false$8295$RATN9)
                                (if g$ls/false$8295$RATN9
                                  (apply
                                    (case-lambda
                                      ((g$dy$8296$RATN9)
                                       ((case-lambda
                                          ((g$t$8297$RATN9)
                                           ((case-lambda
                                              ((g$ls/false$8298$RATN9)
                                               (if g$ls/false$8298$RATN9
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$8299$RATN9)
                                                      (list
                                                        (g$scheme-stx$7158$RATN9
                                                          'quote)
                                                        (cons
                                                          g$dx$8299$RATN9
                                                          g$dy$8296$RATN9))))
                                                   g$ls/false$8298$RATN9)
                                                 ((case-lambda
                                                    ((g$t$8300$RATN9)
                                                     ((case-lambda
                                                        ((g$ls/false$8301$RATN9)
                                                         (if g$ls/false$8301$RATN9
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$8302$RATN9)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8303$RATN9)
                                                                        (if g$ls/false$8303$RATN9
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7158$RATN9
                                                                                   'list)
                                                                                 g$x$8292$RATN9)))
                                                                            g$ls/false$8303$RATN9)
                                                                          ((case-lambda
                                                                             ((g$t$8304$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8305$RATN9)
                                                                                  (if g$ls/false$8305$RATN9
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7158$RATN9
                                                                                             'cons)
                                                                                           g$x$8292$RATN9
                                                                                           g$y$8293$RATN9)))
                                                                                      g$ls/false$8305$RATN9)
                                                                                    (g$syntax-violation$7321$RATN9
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8304$RATN9))))
                                                                               (g$syntax-dispatch$7215$RATN9
                                                                                 g$t$8304$RATN9
                                                                                 '_))))
                                                                           g$t$8302$RATN9))))
                                                                     (g$syntax-dispatch$7215$RATN9
                                                                       g$t$8302$RATN9
                                                                       '()))))
                                                                 g$dy$8296$RATN9)))
                                                             g$ls/false$8301$RATN9)
                                                           (g$syntax-violation$7321$RATN9
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$8300$RATN9))))
                                                      (g$syntax-dispatch$7215$RATN9
                                                        g$t$8300$RATN9
                                                        '_))))
                                                  g$t$8297$RATN9))))
                                            (g$syntax-dispatch$7215$RATN9
                                              g$t$8297$RATN9
                                              '(#(scheme-id quote) any)))))
                                        g$x$8292$RATN9)))
                                    g$ls/false$8295$RATN9)
                                  ((case-lambda
                                     ((g$t$8306$RATN9)
                                      ((case-lambda
                                         ((g$ls/false$8307$RATN9)
                                          (if g$ls/false$8307$RATN9
                                            (apply
                                              (case-lambda
                                                ((g$stuff$8308$RATN9)
                                                 (g$cons*$5367$RATN9
                                                   (g$scheme-stx$7158$RATN9
                                                     'list)
                                                   g$x$8292$RATN9
                                                   g$stuff$8308$RATN9)))
                                              g$ls/false$8307$RATN9)
                                            ((case-lambda
                                               ((g$t$8309$RATN9)
                                                ((case-lambda
                                                   ((g$ls/false$8310$RATN9)
                                                    (if g$ls/false$8310$RATN9
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7158$RATN9
                                                               'cons)
                                                             g$x$8292$RATN9
                                                             g$y$8293$RATN9)))
                                                        g$ls/false$8310$RATN9)
                                                      (g$syntax-violation$7321$RATN9
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$8309$RATN9))))
                                                 (g$syntax-dispatch$7215$RATN9
                                                   g$t$8309$RATN9
                                                   '_))))
                                             g$t$8306$RATN9))))
                                       (g$syntax-dispatch$7215$RATN9
                                         g$t$8306$RATN9
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$8294$RATN9))))
                             (g$syntax-dispatch$7215$RATN9
                               g$t$8294$RATN9
                               '(#(scheme-id quote) any)))))
                         g$y$8293$RATN9))))
                   (g$quasiappend$8202$RATN9
                     (case-lambda
                       ((g$x$8279$RATN9 g$y$8280$RATN9)
                        ((case-lambda
                           ((g$ls$8281$RATN9)
                            (if (null? g$ls$8281$RATN9)
                              (list (g$scheme-stx$7158$RATN9 'quote) '())
                              (if (null? (cdr g$ls$8281$RATN9))
                                (car g$ls$8281$RATN9)
                                (g$cons*$5367$RATN9
                                  (g$scheme-stx$7158$RATN9 'append)
                                  g$ls$8281$RATN9)))))
                         ((letrec ((g$f$8282$RATN9
                                     (case-lambda
                                       ((g$x$8283$RATN9)
                                        (if (null? g$x$8283$RATN9)
                                          ((case-lambda
                                             ((g$t$8284$RATN9)
                                              ((case-lambda
                                                 ((g$ls/false$8285$RATN9)
                                                  (if g$ls/false$8285$RATN9
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$8285$RATN9)
                                                    ((case-lambda
                                                       ((g$t$8286$RATN9)
                                                        ((case-lambda
                                                           ((g$ls/false$8287$RATN9)
                                                            (if g$ls/false$8287$RATN9
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$8280$RATN9)))
                                                                g$ls/false$8287$RATN9)
                                                              (g$syntax-violation$7321$RATN9
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8286$RATN9))))
                                                         (g$syntax-dispatch$7215$RATN9
                                                           g$t$8286$RATN9
                                                           '_))))
                                                     g$t$8284$RATN9))))
                                               (g$syntax-dispatch$7215$RATN9
                                                 g$t$8284$RATN9
                                                 '(#(scheme-id quote) ())))))
                                           g$y$8280$RATN9)
                                          ((case-lambda
                                             ((g$t$8288$RATN9)
                                              ((case-lambda
                                                 ((g$ls/false$8289$RATN9)
                                                  (if g$ls/false$8289$RATN9
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$8282$RATN9
                                                           (cdr g$x$8283$RATN9))))
                                                      g$ls/false$8289$RATN9)
                                                    ((case-lambda
                                                       ((g$t$8290$RATN9)
                                                        ((case-lambda
                                                           ((g$ls/false$8291$RATN9)
                                                            (if g$ls/false$8291$RATN9
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$8283$RATN9)
                                                                     (g$f$8282$RATN9
                                                                       (cdr g$x$8283$RATN9)))))
                                                                g$ls/false$8291$RATN9)
                                                              (g$syntax-violation$7321$RATN9
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8290$RATN9))))
                                                         (g$syntax-dispatch$7215$RATN9
                                                           g$t$8290$RATN9
                                                           '_))))
                                                     g$t$8288$RATN9))))
                                               (g$syntax-dispatch$7215$RATN9
                                                 g$t$8288$RATN9
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$8283$RATN9)))))))
                            g$f$8282$RATN9)
                          g$x$8279$RATN9)))))
                   (g$quasivector$8203$RATN9
                     (case-lambda
                       ((g$x$8254$RATN9)
                        ((case-lambda
                           ((g$pat-x$8255$RATN9)
                            ((case-lambda
                               ((g$t$8256$RATN9)
                                ((case-lambda
                                   ((g$ls/false$8257$RATN9)
                                    (if g$ls/false$8257$RATN9
                                      (apply
                                        (case-lambda
                                          ((g$x*$8258$RATN9)
                                           (list
                                             (g$scheme-stx$7158$RATN9 'quote)
                                             (list->vector g$x*$8258$RATN9))))
                                        g$ls/false$8257$RATN9)
                                      ((case-lambda
                                         ((g$t$8259$RATN9)
                                          ((case-lambda
                                             ((g$ls/false$8260$RATN9)
                                              (if g$ls/false$8260$RATN9
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8261$RATN9
                                                                 (case-lambda
                                                                   ((g$x$8262$RATN9
                                                                      g$k$8263$RATN9)
                                                                    ((case-lambda
                                                                       ((g$t$8264$RATN9)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8265$RATN9)
                                                                            (if g$ls/false$8265$RATN9
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8266$RATN9)
                                                                                   (g$k$8263$RATN9
                                                                                     (map (case-lambda
                                                                                            ((g$x$8267$RATN9)
                                                                                             (list
                                                                                               (g$scheme-stx$7158$RATN9
                                                                                                 'quote)
                                                                                               g$x$8267$RATN9)))
                                                                                          g$x*$8266$RATN9))))
                                                                                g$ls/false$8265$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$t$8268$RATN9)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8269$RATN9)
                                                                                      (if g$ls/false$8269$RATN9
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8270$RATN9)
                                                                                             (g$k$8263$RATN9
                                                                                               g$x*$8270$RATN9)))
                                                                                          g$ls/false$8269$RATN9)
                                                                                        ((case-lambda
                                                                                           ((g$t$8271$RATN9)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8272$RATN9)
                                                                                                (if g$ls/false$8272$RATN9
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8273$RATN9
                                                                                                         g$y$8274$RATN9)
                                                                                                       (g$f$8261$RATN9
                                                                                                         g$y$8274$RATN9
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8275$RATN9)
                                                                                                            (g$k$8263$RATN9
                                                                                                              (cons
                                                                                                                g$x$8273$RATN9
                                                                                                                g$ls$8275$RATN9)))))))
                                                                                                    g$ls/false$8272$RATN9)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8276$RATN9)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8277$RATN9)
                                                                                                          (if g$ls/false$8277$RATN9
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7158$RATN9
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8255$RATN9)))
                                                                                                              g$ls/false$8277$RATN9)
                                                                                                            (g$syntax-violation$7321$RATN9
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8276$RATN9))))
                                                                                                       (g$syntax-dispatch$7215$RATN9
                                                                                                         g$t$8276$RATN9
                                                                                                         '_))))
                                                                                                   g$t$8271$RATN9))))
                                                                                             (g$syntax-dispatch$7215$RATN9
                                                                                               g$t$8271$RATN9
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8268$RATN9))))
                                                                                   (g$syntax-dispatch$7215$RATN9
                                                                                     g$t$8268$RATN9
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8264$RATN9))))
                                                                         (g$syntax-dispatch$7215$RATN9
                                                                           g$t$8264$RATN9
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8262$RATN9)))))
                                                        g$f$8261$RATN9)
                                                      g$x$8254$RATN9
                                                      (case-lambda
                                                        ((g$ls$8278$RATN9)
                                                         (g$cons*$5367$RATN9
                                                           (g$scheme-stx$7158$RATN9
                                                             'vector)
                                                           g$ls$8278$RATN9))))))
                                                  g$ls/false$8260$RATN9)
                                                (g$syntax-violation$7321$RATN9
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8259$RATN9))))
                                           (g$syntax-dispatch$7215$RATN9
                                             g$t$8259$RATN9
                                             '_))))
                                       g$t$8256$RATN9))))
                                 (g$syntax-dispatch$7215$RATN9
                                   g$t$8256$RATN9
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8255$RATN9)))
                         g$x$8254$RATN9))))
                   (g$vquasi$8204$RATN9
                     (case-lambda
                       ((g$p$8237$RATN9 g$lev$8238$RATN9)
                        ((case-lambda
                           ((g$t$8239$RATN9)
                            ((case-lambda
                               ((g$ls/false$8240$RATN9)
                                (if g$ls/false$8240$RATN9
                                  (apply
                                    (case-lambda
                                      ((g$p$8241$RATN9 g$q$8242$RATN9)
                                       ((case-lambda
                                          ((g$t$8243$RATN9)
                                           ((case-lambda
                                              ((g$ls/false$8244$RATN9)
                                               (if g$ls/false$8244$RATN9
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8245$RATN9)
                                                      (if (= g$lev$8238$RATN9
                                                             '0)
                                                        (g$quasicons*$8200$RATN9
                                                          g$p$8245$RATN9
                                                          (g$vquasi$8204$RATN9
                                                            g$q$8242$RATN9
                                                            g$lev$8238$RATN9))
                                                        (g$quasicons$8201$RATN9
                                                          (g$quasicons$8201$RATN9
                                                            (g$datum$8184$RATN9
                                                              'unquote)
                                                            (g$quasi$8205$RATN9
                                                              g$p$8245$RATN9
                                                              (- g$lev$8238$RATN9
                                                                 '1)))
                                                          (g$vquasi$8204$RATN9
                                                            g$q$8242$RATN9
                                                            g$lev$8238$RATN9)))))
                                                   g$ls/false$8244$RATN9)
                                                 ((case-lambda
                                                    ((g$t$8246$RATN9)
                                                     ((case-lambda
                                                        ((g$ls/false$8247$RATN9)
                                                         (if g$ls/false$8247$RATN9
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8248$RATN9)
                                                                (if (= g$lev$8238$RATN9
                                                                       '0)
                                                                  (g$quasiappend$8202$RATN9
                                                                    g$p$8248$RATN9
                                                                    (g$vquasi$8204$RATN9
                                                                      g$q$8242$RATN9
                                                                      g$lev$8238$RATN9))
                                                                  (g$quasicons$8201$RATN9
                                                                    (g$quasicons$8201$RATN9
                                                                      (g$datum$8184$RATN9
                                                                        'unquote-splicing)
                                                                      (g$quasi$8205$RATN9
                                                                        g$p$8248$RATN9
                                                                        (- g$lev$8238$RATN9
                                                                           '1)))
                                                                    (g$vquasi$8204$RATN9
                                                                      g$q$8242$RATN9
                                                                      g$lev$8238$RATN9)))))
                                                             g$ls/false$8247$RATN9)
                                                           ((case-lambda
                                                              ((g$t$8249$RATN9)
                                                               ((case-lambda
                                                                  ((g$ls/false$8250$RATN9)
                                                                   (if g$ls/false$8250$RATN9
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8251$RATN9)
                                                                          (g$quasicons$8201$RATN9
                                                                            (g$quasi$8205$RATN9
                                                                              g$p$8251$RATN9
                                                                              g$lev$8238$RATN9)
                                                                            (g$vquasi$8204$RATN9
                                                                              g$q$8242$RATN9
                                                                              g$lev$8238$RATN9))))
                                                                       g$ls/false$8250$RATN9)
                                                                     (g$syntax-violation$7321$RATN9
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8249$RATN9))))
                                                                (g$syntax-dispatch$7215$RATN9
                                                                  g$t$8249$RATN9
                                                                  'any))))
                                                            g$t$8246$RATN9))))
                                                      (g$syntax-dispatch$7215$RATN9
                                                        g$t$8246$RATN9
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8243$RATN9))))
                                            (g$syntax-dispatch$7215$RATN9
                                              g$t$8243$RATN9
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8241$RATN9)))
                                    g$ls/false$8240$RATN9)
                                  ((case-lambda
                                     ((g$t$8252$RATN9)
                                      ((case-lambda
                                         ((g$ls/false$8253$RATN9)
                                          (if g$ls/false$8253$RATN9
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7158$RATN9
                                                     'quote)
                                                   '())))
                                              g$ls/false$8253$RATN9)
                                            (g$syntax-violation$7321$RATN9
                                              '#f
                                              '"invalid syntax"
                                              g$t$8252$RATN9))))
                                       (g$syntax-dispatch$7215$RATN9
                                         g$t$8252$RATN9
                                         '()))))
                                   g$t$8239$RATN9))))
                             (g$syntax-dispatch$7215$RATN9
                               g$t$8239$RATN9
                               '(any . any)))))
                         g$p$8237$RATN9))))
                   (g$quasi$8205$RATN9
                     (case-lambda
                       ((g$p$8210$RATN9 g$lev$8211$RATN9)
                        ((case-lambda
                           ((g$t$8212$RATN9)
                            ((case-lambda
                               ((g$ls/false$8213$RATN9)
                                (if g$ls/false$8213$RATN9
                                  (apply
                                    (case-lambda
                                      ((g$p$8214$RATN9)
                                       (if (= g$lev$8211$RATN9 '0)
                                         g$p$8214$RATN9
                                         (g$quasicons$8201$RATN9
                                           (g$datum$8184$RATN9 'unquote)
                                           (g$quasi$8205$RATN9
                                             (list g$p$8214$RATN9)
                                             (- g$lev$8211$RATN9 '1))))))
                                    g$ls/false$8213$RATN9)
                                  ((case-lambda
                                     ((g$t$8215$RATN9)
                                      ((case-lambda
                                         ((g$ls/false$8216$RATN9)
                                          (if g$ls/false$8216$RATN9
                                            (apply
                                              (case-lambda
                                                ((g$p$8217$RATN9 g$q$8218$RATN9)
                                                 (if (= g$lev$8211$RATN9 '0)
                                                   (g$quasicons*$8200$RATN9
                                                     g$p$8217$RATN9
                                                     (g$quasi$8205$RATN9
                                                       g$q$8218$RATN9
                                                       g$lev$8211$RATN9))
                                                   (g$quasicons$8201$RATN9
                                                     (g$quasicons$8201$RATN9
                                                       (g$datum$8184$RATN9
                                                         'unquote)
                                                       (g$quasi$8205$RATN9
                                                         g$p$8217$RATN9
                                                         (- g$lev$8211$RATN9
                                                            '1)))
                                                     (g$quasi$8205$RATN9
                                                       g$q$8218$RATN9
                                                       g$lev$8211$RATN9)))))
                                              g$ls/false$8216$RATN9)
                                            ((case-lambda
                                               ((g$t$8219$RATN9)
                                                ((case-lambda
                                                   ((g$ls/false$8220$RATN9)
                                                    (if g$ls/false$8220$RATN9
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8221$RATN9
                                                             g$q$8222$RATN9)
                                                           (if (= g$lev$8211$RATN9
                                                                  '0)
                                                             (g$quasiappend$8202$RATN9
                                                               g$p$8221$RATN9
                                                               (g$quasi$8205$RATN9
                                                                 g$q$8222$RATN9
                                                                 g$lev$8211$RATN9))
                                                             (g$quasicons$8201$RATN9
                                                               (g$quasicons$8201$RATN9
                                                                 (g$datum$8184$RATN9
                                                                   'unquote-splicing)
                                                                 (g$quasi$8205$RATN9
                                                                   g$p$8221$RATN9
                                                                   (- g$lev$8211$RATN9
                                                                      '1)))
                                                               (g$quasi$8205$RATN9
                                                                 g$q$8222$RATN9
                                                                 g$lev$8211$RATN9)))))
                                                        g$ls/false$8220$RATN9)
                                                      ((case-lambda
                                                         ((g$t$8223$RATN9)
                                                          ((case-lambda
                                                             ((g$ls/false$8224$RATN9)
                                                              (if g$ls/false$8224$RATN9
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8225$RATN9)
                                                                     (g$quasicons$8201$RATN9
                                                                       (g$datum$8184$RATN9
                                                                         'quasiquote)
                                                                       (g$quasi$8205$RATN9
                                                                         (list
                                                                           g$p$8225$RATN9)
                                                                         (+ g$lev$8211$RATN9
                                                                            '1)))))
                                                                  g$ls/false$8224$RATN9)
                                                                ((case-lambda
                                                                   ((g$t$8226$RATN9)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8227$RATN9)
                                                                        (if g$ls/false$8227$RATN9
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8228$RATN9
                                                                                 g$q$8229$RATN9)
                                                                               (g$quasicons$8201$RATN9
                                                                                 (g$quasi$8205$RATN9
                                                                                   g$p$8228$RATN9
                                                                                   g$lev$8211$RATN9)
                                                                                 (g$quasi$8205$RATN9
                                                                                   g$q$8229$RATN9
                                                                                   g$lev$8211$RATN9))))
                                                                            g$ls/false$8227$RATN9)
                                                                          ((case-lambda
                                                                             ((g$t$8230$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8231$RATN9)
                                                                                  (if (if g$ls/false$8231$RATN9
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8232$RATN9)
                                                                                               (not (g$stx?$6909$RATN9
                                                                                                      g$x$8232$RATN9))))
                                                                                            g$ls/false$8231$RATN9))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8233$RATN9)
                                                                                         (g$quasivector$8203$RATN9
                                                                                           (g$vquasi$8204$RATN9
                                                                                             g$x$8233$RATN9
                                                                                             g$lev$8211$RATN9))))
                                                                                      g$ls/false$8231$RATN9)
                                                                                    ((case-lambda
                                                                                       ((g$t$8234$RATN9)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8235$RATN9)
                                                                                            (if g$ls/false$8235$RATN9
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8236$RATN9)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7158$RATN9
                                                                                                       'quote)
                                                                                                     g$p$8236$RATN9)))
                                                                                                g$ls/false$8235$RATN9)
                                                                                              (g$syntax-violation$7321$RATN9
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8234$RATN9))))
                                                                                         (g$syntax-dispatch$7215$RATN9
                                                                                           g$t$8234$RATN9
                                                                                           'any))))
                                                                                     g$t$8230$RATN9))))
                                                                               (g$syntax-dispatch$7215$RATN9
                                                                                 g$t$8230$RATN9
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8226$RATN9))))
                                                                     (g$syntax-dispatch$7215$RATN9
                                                                       g$t$8226$RATN9
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8223$RATN9))))
                                                           (g$syntax-dispatch$7215$RATN9
                                                             g$t$8223$RATN9
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8219$RATN9))))
                                                 (g$syntax-dispatch$7215$RATN9
                                                   g$t$8219$RATN9
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8215$RATN9))))
                                       (g$syntax-dispatch$7215$RATN9
                                         g$t$8215$RATN9
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8212$RATN9))))
                             (g$syntax-dispatch$7215$RATN9
                               g$t$8212$RATN9
                               '(#(scheme-id unquote) any)))))
                         g$p$8210$RATN9)))))
           (case-lambda
             ((g$x$8206$RATN9)
              ((case-lambda
                 ((g$t$8207$RATN9)
                  ((case-lambda
                     ((g$ls/false$8208$RATN9)
                      (if g$ls/false$8208$RATN9
                        (apply
                          (case-lambda
                            ((g$e$8209$RATN9)
                             (g$quasi$8205$RATN9 g$e$8209$RATN9 '0)))
                          g$ls/false$8208$RATN9)
                        (g$syntax-violation$7321$RATN9
                          '#f
                          '"invalid syntax"
                          g$t$8207$RATN9))))
                   (g$syntax-dispatch$7215$RATN9 g$t$8207$RATN9 '(_ any)))))
               g$x$8206$RATN9))))))))
   (g$quasisyntax-macro$7207$RATN9
     g$quasisyntax-macro$10657$RATN9
     ((case-lambda
        (()
         (letrec* ((g$quasi$8316$RATN9
                     (case-lambda
                       ((g$p$8330$RATN9 g$lev$8331$RATN9)
                        ((case-lambda
                           ((g$t$8332$RATN9)
                            ((case-lambda
                               ((g$ls/false$8333$RATN9)
                                (if g$ls/false$8333$RATN9
                                  (apply
                                    (case-lambda
                                      ((g$p$8334$RATN9)
                                       (if (= g$lev$8331$RATN9 '0)
                                         ((case-lambda
                                            ((g$g$8335$RATN9)
                                             (values
                                               (list g$g$8335$RATN9)
                                               (list g$p$8334$RATN9)
                                               g$g$8335$RATN9)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$8316$RATN9
                                                g$p$8334$RATN9
                                                (- g$lev$8331$RATN9 '1))))
                                           (case-lambda
                                             ((g$lhs*$8339$RATN9
                                                g$rhs*$8340$RATN9
                                                g$p$8341$RATN9)
                                              ((case-lambda
                                                 ((g$p$8342$RATN9
                                                    g$rhs*$8343$RATN9
                                                    g$lhs*$8344$RATN9)
                                                  (values
                                                    g$lhs*$8344$RATN9
                                                    g$rhs*$8343$RATN9
                                                    (list
                                                      'unsyntax
                                                      g$p$8342$RATN9))))
                                               g$p$8341$RATN9
                                               g$rhs*$8340$RATN9
                                               g$lhs*$8339$RATN9)))))))
                                    g$ls/false$8333$RATN9)
                                  ((case-lambda
                                     ((g$t$8345$RATN9)
                                      ((case-lambda
                                         ((g$ls/false$8346$RATN9)
                                          (if (if g$ls/false$8346$RATN9
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$8331$RATN9 '0)))
                                                    g$ls/false$8346$RATN9))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$7321$RATN9
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$8330$RATN9)))
                                              g$ls/false$8346$RATN9)
                                            ((case-lambda
                                               ((g$t$8347$RATN9)
                                                ((case-lambda
                                                   ((g$ls/false$8348$RATN9)
                                                    (if g$ls/false$8348$RATN9
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8349$RATN9
                                                             g$q$8350$RATN9)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$8316$RATN9
                                                                  g$q$8350$RATN9
                                                                  g$lev$8331$RATN9)))
                                                             (case-lambda
                                                               ((g$lhs*$8354$RATN9
                                                                  g$rhs*$8355$RATN9
                                                                  g$q$8356$RATN9)
                                                                ((case-lambda
                                                                   ((g$q$8357$RATN9
                                                                      g$rhs*$8358$RATN9
                                                                      g$lhs*$8359$RATN9)
                                                                    (if (= g$lev$8331$RATN9
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g$8360$RATN9)
                                                                          (values
                                                                            (cons
                                                                              (cons
                                                                                g$g$8360$RATN9
                                                                                '(...))
                                                                              g$lhs*$8359$RATN9)
                                                                            (cons
                                                                              g$p$8349$RATN9
                                                                              g$rhs*$8358$RATN9)
                                                                            (cons
                                                                              g$g$8360$RATN9
                                                                              (cons
                                                                                '...
                                                                                g$q$8357$RATN9)))))
                                                                       (gensym))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$8316$RATN9
                                                                             g$p$8349$RATN9
                                                                             (- g$lev$8331$RATN9
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$8364$RATN9
                                                                             g$rhs2*$8365$RATN9
                                                                             g$p$8366$RATN9)
                                                                           ((case-lambda
                                                                              ((g$p$8367$RATN9
                                                                                 g$rhs2*$8368$RATN9
                                                                                 g$lhs2*$8369$RATN9)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$8369$RATN9
                                                                                   g$lhs*$8359$RATN9)
                                                                                 (append
                                                                                   g$rhs2*$8368$RATN9
                                                                                   g$rhs*$8358$RATN9)
                                                                                 (cons
                                                                                   (list
                                                                                     'unsyntax-splicing
                                                                                     g$p$8367$RATN9)
                                                                                   g$q$8357$RATN9))))
                                                                            g$p$8366$RATN9
                                                                            g$rhs2*$8365$RATN9
                                                                            g$lhs2*$8364$RATN9)))))))
                                                                 g$q$8356$RATN9
                                                                 g$rhs*$8355$RATN9
                                                                 g$lhs*$8354$RATN9))))))
                                                        g$ls/false$8348$RATN9)
                                                      ((case-lambda
                                                         ((g$t$8370$RATN9)
                                                          ((case-lambda
                                                             ((g$ls/false$8371$RATN9)
                                                              (if (if g$ls/false$8371$RATN9
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (= g$lev$8331$RATN9
                                                                              '0)))
                                                                        g$ls/false$8371$RATN9))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    (()
                                                                     (g$syntax-violation$7321$RATN9
                                                                       '#f
                                                                       '"incorrect use of unsyntax-splicing"
                                                                       g$p$8330$RATN9)))
                                                                  g$ls/false$8371$RATN9)
                                                                ((case-lambda
                                                                   ((g$t$8372$RATN9)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8373$RATN9)
                                                                        (if g$ls/false$8373$RATN9
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8374$RATN9)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$quasi$8316$RATN9
                                                                                      g$p$8374$RATN9
                                                                                      (+ g$lev$8331$RATN9
                                                                                         '1))))
                                                                                 (case-lambda
                                                                                   ((g$lhs*$8378$RATN9
                                                                                      g$rhs*$8379$RATN9
                                                                                      g$p$8380$RATN9)
                                                                                    ((case-lambda
                                                                                       ((g$p$8381$RATN9
                                                                                          g$rhs*$8382$RATN9
                                                                                          g$lhs*$8383$RATN9)
                                                                                        (values
                                                                                          g$lhs*$8383$RATN9
                                                                                          g$rhs*$8382$RATN9
                                                                                          (list
                                                                                            'quasisyntax
                                                                                            g$p$8381$RATN9))))
                                                                                     g$p$8380$RATN9
                                                                                     g$rhs*$8379$RATN9
                                                                                     g$lhs*$8378$RATN9))))))
                                                                            g$ls/false$8373$RATN9)
                                                                          ((case-lambda
                                                                             ((g$t$8384$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8385$RATN9)
                                                                                  (if g$ls/false$8385$RATN9
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$8386$RATN9
                                                                                           g$q$8387$RATN9)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$8316$RATN9
                                                                                                g$p$8386$RATN9
                                                                                                g$lev$8331$RATN9)))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$8394$RATN9
                                                                                                g$rhs*$8395$RATN9
                                                                                                g$p$8396$RATN9)
                                                                                              (call-with-values
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$quasi$8316$RATN9
                                                                                                     g$q$8387$RATN9
                                                                                                     g$lev$8331$RATN9)))
                                                                                                (case-lambda
                                                                                                  ((g$lhs2*$8397$RATN9
                                                                                                     g$rhs2*$8398$RATN9
                                                                                                     g$q$8399$RATN9)
                                                                                                   ((case-lambda
                                                                                                      ((g$q$8400$RATN9
                                                                                                         g$rhs2*$8401$RATN9
                                                                                                         g$lhs2*$8402$RATN9
                                                                                                         g$p$8403$RATN9
                                                                                                         g$rhs*$8404$RATN9
                                                                                                         g$lhs*$8405$RATN9)
                                                                                                       (values
                                                                                                         (append
                                                                                                           g$lhs2*$8402$RATN9
                                                                                                           g$lhs*$8405$RATN9)
                                                                                                         (append
                                                                                                           g$rhs2*$8401$RATN9
                                                                                                           g$rhs*$8404$RATN9)
                                                                                                         (cons
                                                                                                           g$p$8403$RATN9
                                                                                                           g$q$8400$RATN9))))
                                                                                                    g$q$8399$RATN9
                                                                                                    g$rhs2*$8398$RATN9
                                                                                                    g$lhs2*$8397$RATN9
                                                                                                    g$p$8396$RATN9
                                                                                                    g$rhs*$8395$RATN9
                                                                                                    g$lhs*$8394$RATN9)))))))))
                                                                                      g$ls/false$8385$RATN9)
                                                                                    ((case-lambda
                                                                                       ((g$t$8406$RATN9)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8407$RATN9)
                                                                                            (if (if g$ls/false$8407$RATN9
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$x$8408$RATN9)
                                                                                                         (not (g$stx?$6909$RATN9
                                                                                                                g$p$8330$RATN9))))
                                                                                                      g$ls/false$8407$RATN9))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$x$8409$RATN9)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        ((letrec ((g$f$8413$RATN9
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$8414$RATN9)
                                                                                                                       (if (null?
                                                                                                                             g$x$8414$RATN9)
                                                                                                                         (values
                                                                                                                           '()
                                                                                                                           '()
                                                                                                                           '())
                                                                                                                         (call-with-values
                                                                                                                           (case-lambda
                                                                                                                             (()
                                                                                                                              (g$quasi$8316$RATN9
                                                                                                                                (car g$x$8414$RATN9)
                                                                                                                                g$lev$8331$RATN9)))
                                                                                                                           (case-lambda
                                                                                                                             ((g$lhs*$8418$RATN9
                                                                                                                                g$rhs*$8419$RATN9
                                                                                                                                g$a$8420$RATN9)
                                                                                                                              ((case-lambda
                                                                                                                                 ((g$a$8421$RATN9
                                                                                                                                    g$rhs*$8422$RATN9
                                                                                                                                    g$lhs*$8423$RATN9)
                                                                                                                                  (call-with-values
                                                                                                                                    (case-lambda
                                                                                                                                      (()
                                                                                                                                       (g$f$8413$RATN9
                                                                                                                                         (cdr g$x$8414$RATN9))))
                                                                                                                                    (case-lambda
                                                                                                                                      ((g$lhs2*$8427$RATN9
                                                                                                                                         g$rhs2*$8428$RATN9
                                                                                                                                         g$d$8429$RATN9)
                                                                                                                                       ((case-lambda
                                                                                                                                          ((g$d$8430$RATN9
                                                                                                                                             g$rhs2*$8431$RATN9
                                                                                                                                             g$lhs2*$8432$RATN9)
                                                                                                                                           (values
                                                                                                                                             (append
                                                                                                                                               g$lhs*$8423$RATN9
                                                                                                                                               g$lhs2*$8432$RATN9)
                                                                                                                                             (append
                                                                                                                                               g$rhs*$8422$RATN9
                                                                                                                                               g$rhs2*$8431$RATN9)
                                                                                                                                             (cons
                                                                                                                                               g$a$8421$RATN9
                                                                                                                                               g$d$8430$RATN9))))
                                                                                                                                        g$d$8429$RATN9
                                                                                                                                        g$rhs2*$8428$RATN9
                                                                                                                                        g$lhs2*$8427$RATN9))))))
                                                                                                                               g$a$8420$RATN9
                                                                                                                               g$rhs*$8419$RATN9
                                                                                                                               g$lhs*$8418$RATN9)))))))))
                                                                                                           g$f$8413$RATN9)
                                                                                                         g$x$8409$RATN9)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$8433$RATN9
                                                                                                          g$rhs*$8434$RATN9
                                                                                                          g$x*$8435$RATN9)
                                                                                                        ((case-lambda
                                                                                                           ((g$x*$8436$RATN9
                                                                                                              g$rhs*$8437$RATN9
                                                                                                              g$lhs*$8438$RATN9)
                                                                                                            (values
                                                                                                              g$lhs*$8438$RATN9
                                                                                                              g$rhs*$8437$RATN9
                                                                                                              (list->vector
                                                                                                                g$x*$8436$RATN9))))
                                                                                                         g$x*$8435$RATN9
                                                                                                         g$rhs*$8434$RATN9
                                                                                                         g$lhs*$8433$RATN9))))))
                                                                                                g$ls/false$8407$RATN9)
                                                                                              ((case-lambda
                                                                                                 ((g$t$8439$RATN9)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$8440$RATN9)
                                                                                                      (if g$ls/false$8440$RATN9
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (values
                                                                                                               '()
                                                                                                               '()
                                                                                                               g$p$8330$RATN9)))
                                                                                                          g$ls/false$8440$RATN9)
                                                                                                        (g$syntax-violation$7321$RATN9
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$8439$RATN9))))
                                                                                                   (g$syntax-dispatch$7215$RATN9
                                                                                                     g$t$8439$RATN9
                                                                                                     '_))))
                                                                                               g$t$8406$RATN9))))
                                                                                         (g$syntax-dispatch$7215$RATN9
                                                                                           g$t$8406$RATN9
                                                                                           '#(vector
                                                                                              each-any)))))
                                                                                     g$t$8384$RATN9))))
                                                                               (g$syntax-dispatch$7215$RATN9
                                                                                 g$t$8384$RATN9
                                                                                 '(any .
                                                                                       any)))))
                                                                           g$t$8372$RATN9))))
                                                                     (g$syntax-dispatch$7215$RATN9
                                                                       g$t$8372$RATN9
                                                                       '(#(scheme-id
                                                                           quasisyntax)
                                                                         any)))))
                                                                 g$t$8370$RATN9))))
                                                           (g$syntax-dispatch$7215$RATN9
                                                             g$t$8370$RATN9
                                                             '#(scheme-id
                                                                unsyntax-splicing)))))
                                                       g$t$8347$RATN9))))
                                                 (g$syntax-dispatch$7215$RATN9
                                                   g$t$8347$RATN9
                                                   '((#(scheme-id
                                                        unsyntax-splicing)
                                                      any)
                                                     .
                                                     any)))))
                                             g$t$8345$RATN9))))
                                       (g$syntax-dispatch$7215$RATN9
                                         g$t$8345$RATN9
                                         '#(scheme-id unsyntax)))))
                                   g$t$8332$RATN9))))
                             (g$syntax-dispatch$7215$RATN9
                               g$t$8332$RATN9
                               '(#(scheme-id unsyntax) any)))))
                         g$p$8330$RATN9)))))
           (case-lambda
             ((g$x$8317$RATN9)
              ((case-lambda
                 ((g$t$8318$RATN9)
                  ((case-lambda
                     ((g$ls/false$8319$RATN9)
                      (if g$ls/false$8319$RATN9
                        (apply
                          (case-lambda
                            ((g$e$8320$RATN9)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$8316$RATN9 g$e$8320$RATN9 '0)))
                               (case-lambda
                                 ((g$lhs*$8324$RATN9
                                    g$rhs*$8325$RATN9
                                    g$v$8326$RATN9)
                                  ((case-lambda
                                     ((g$v$8327$RATN9
                                        g$rhs*$8328$RATN9
                                        g$lhs*$8329$RATN9)
                                      (g$bless$7178$RATN9
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$8328$RATN9)
                                          '()
                                          (list
                                            g$lhs*$8329$RATN9
                                            (list 'syntax g$v$8327$RATN9))))))
                                   g$v$8326$RATN9
                                   g$rhs*$8325$RATN9
                                   g$lhs*$8324$RATN9))))))
                          g$ls/false$8319$RATN9)
                        (g$syntax-violation$7321$RATN9
                          '#f
                          '"invalid syntax"
                          g$t$8318$RATN9))))
                   (g$syntax-dispatch$7215$RATN9 g$t$8318$RATN9 '(_ any)))))
               g$x$8317$RATN9))))))))
   (g$define-struct-macro$7208$RATN9
     g$define-struct-macro$10658$RATN9
     (case-lambda
       ((g$stx$8441$RATN9)
        (g$syntax-violation$7321$RATN9
          '#f
          '"define-struct not supported"
          g$stx$8441$RATN9))))
   (g$define-record-type-macro$7209$RATN9
     g$define-record-type-macro$10659$RATN9
     (case-lambda
       ((g$x$8442$RATN9)
        (letrec* ((g$id$8443$RATN9
                    (case-lambda
                      ((g$ctxt$8695$RATN9 . g$str*$8696$RATN9)
                       (g$datum->syntax$7323$RATN9
                         g$ctxt$8695$RATN9
                         (string->symbol
                           (apply
                             string-append
                             (map (case-lambda
                                    ((g$x$8697$RATN9)
                                     (if (symbol? g$x$8697$RATN9)
                                       (symbol->string g$x$8697$RATN9)
                                       (if (string? g$x$8697$RATN9)
                                         g$x$8697$RATN9
                                         (assertion-violation
                                           'define-record-type
                                           '"BUG")))))
                                  g$str*$8696$RATN9)))))))
                  (g$get-record-name$8444$RATN9
                    (case-lambda
                      ((g$spec$8686$RATN9)
                       ((case-lambda
                          ((g$t$8687$RATN9)
                           ((case-lambda
                              ((g$ls/false$8688$RATN9)
                               (if g$ls/false$8688$RATN9
                                 (apply
                                   (case-lambda
                                     ((g$foo$8689$RATN9
                                        g$make-foo$8690$RATN9
                                        g$foo?$8691$RATN9)
                                      g$foo$8689$RATN9))
                                   g$ls/false$8688$RATN9)
                                 ((case-lambda
                                    ((g$t$8692$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8693$RATN9)
                                         (if g$ls/false$8693$RATN9
                                           (apply
                                             (case-lambda
                                               ((g$foo$8694$RATN9)
                                                g$foo$8694$RATN9))
                                             g$ls/false$8693$RATN9)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$t$8692$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8692$RATN9
                                        'any))))
                                  g$t$8687$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$8687$RATN9
                              '(any any any)))))
                        g$spec$8686$RATN9))))
                  (g$get-record-constructor-name$8445$RATN9
                    (case-lambda
                      ((g$spec$8676$RATN9)
                       ((case-lambda
                          ((g$t$8677$RATN9)
                           ((case-lambda
                              ((g$ls/false$8678$RATN9)
                               (if g$ls/false$8678$RATN9
                                 (apply
                                   (case-lambda
                                     ((g$foo$8679$RATN9
                                        g$make-foo$8680$RATN9
                                        g$foo?$8681$RATN9)
                                      g$make-foo$8680$RATN9))
                                   g$ls/false$8678$RATN9)
                                 ((case-lambda
                                    ((g$t$8682$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8683$RATN9)
                                         (if (if g$ls/false$8683$RATN9
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$8684$RATN9)
                                                      (g$id?$6937$RATN9
                                                        g$foo$8684$RATN9)))
                                                   g$ls/false$8683$RATN9))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$8685$RATN9)
                                                (g$id$8443$RATN9
                                                  g$foo$8685$RATN9
                                                  '"make-"
                                                  (g$stx->datum$6948$RATN9
                                                    g$foo$8685$RATN9))))
                                             g$ls/false$8683$RATN9)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$t$8682$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8682$RATN9
                                        'any))))
                                  g$t$8677$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$8677$RATN9
                              '(any any any)))))
                        g$spec$8676$RATN9))))
                  (g$get-record-predicate-name$8446$RATN9
                    (case-lambda
                      ((g$spec$8666$RATN9)
                       ((case-lambda
                          ((g$t$8667$RATN9)
                           ((case-lambda
                              ((g$ls/false$8668$RATN9)
                               (if g$ls/false$8668$RATN9
                                 (apply
                                   (case-lambda
                                     ((g$foo$8669$RATN9
                                        g$make-foo$8670$RATN9
                                        g$foo?$8671$RATN9)
                                      g$foo?$8671$RATN9))
                                   g$ls/false$8668$RATN9)
                                 ((case-lambda
                                    ((g$t$8672$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8673$RATN9)
                                         (if (if g$ls/false$8673$RATN9
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$8674$RATN9)
                                                      (g$id?$6937$RATN9
                                                        g$foo$8674$RATN9)))
                                                   g$ls/false$8673$RATN9))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$8675$RATN9)
                                                (g$id$8443$RATN9
                                                  g$foo$8675$RATN9
                                                  (g$stx->datum$6948$RATN9
                                                    g$foo$8675$RATN9)
                                                  '"?")))
                                             g$ls/false$8673$RATN9)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$t$8672$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8672$RATN9
                                        'any))))
                                  g$t$8667$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$8667$RATN9
                              '(any any any)))))
                        g$spec$8666$RATN9))))
                  (g$get-clause$8447$RATN9
                    (case-lambda
                      ((g$id$8657$RATN9 g$ls$8658$RATN9)
                       ((case-lambda
                          ((g$t$8659$RATN9)
                           ((case-lambda
                              ((g$ls/false$8660$RATN9)
                               (if g$ls/false$8660$RATN9
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$8660$RATN9)
                                 ((case-lambda
                                    ((g$t$8661$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8662$RATN9)
                                         (if g$ls/false$8662$RATN9
                                           (apply
                                             (case-lambda
                                               ((g$x$8663$RATN9
                                                  g$rest$8664$RATN9
                                                  g$ls$8665$RATN9)
                                                (if (g$free-id=?$6941$RATN9
                                                      (g$bless$7178$RATN9
                                                        g$id$8657$RATN9)
                                                      g$x$8663$RATN9)
                                                  (cons
                                                    g$x$8663$RATN9
                                                    g$rest$8664$RATN9)
                                                  (g$get-clause$8447$RATN9
                                                    g$id$8657$RATN9
                                                    g$ls$8665$RATN9))))
                                             g$ls/false$8662$RATN9)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$t$8661$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8661$RATN9
                                        '((any . any) . any)))))
                                  g$t$8659$RATN9))))
                            (g$syntax-dispatch$7215$RATN9 g$t$8659$RATN9 '()))))
                        g$ls$8658$RATN9))))
                  (g$foo-rtd-code$8448$RATN9
                    (case-lambda
                      ((g$name$8616$RATN9
                         g$clause*$8617$RATN9
                         g$parent-rtd-code$8618$RATN9)
                       (letrec* ((g$convert-field-spec*$8619$RATN9
                                   (case-lambda
                                     ((g$ls$8644$RATN9)
                                      (list->vector
                                        (map (case-lambda
                                               ((g$x$8645$RATN9)
                                                ((case-lambda
                                                   ((g$t$8646$RATN9)
                                                    ((case-lambda
                                                       ((g$ls/false$8647$RATN9)
                                                        (if g$ls/false$8647$RATN9
                                                          (apply
                                                            (case-lambda
                                                              ((g$name$8648$RATN9
                                                                 g$rest$8649$RATN9)
                                                               (list
                                                                 'mutable
                                                                 g$name$8648$RATN9)))
                                                            g$ls/false$8647$RATN9)
                                                          ((case-lambda
                                                             ((g$t$8650$RATN9)
                                                              ((case-lambda
                                                                 ((g$ls/false$8651$RATN9)
                                                                  (if g$ls/false$8651$RATN9
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$name$8652$RATN9
                                                                           g$rest$8653$RATN9)
                                                                         (list
                                                                           'immutable
                                                                           g$name$8652$RATN9)))
                                                                      g$ls/false$8651$RATN9)
                                                                    ((case-lambda
                                                                       ((g$t$8654$RATN9)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8655$RATN9)
                                                                            (if g$ls/false$8655$RATN9
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$name$8656$RATN9)
                                                                                   (list
                                                                                     'immutable
                                                                                     g$name$8656$RATN9)))
                                                                                g$ls/false$8655$RATN9)
                                                                              (g$syntax-violation$7321$RATN9
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8654$RATN9))))
                                                                         (g$syntax-dispatch$7215$RATN9
                                                                           g$t$8654$RATN9
                                                                           'any))))
                                                                     g$t$8650$RATN9))))
                                                               (g$syntax-dispatch$7215$RATN9
                                                                 g$t$8650$RATN9
                                                                 '(#(scheme-id
                                                                     immutable)
                                                                   any
                                                                   .
                                                                   any)))))
                                                           g$t$8646$RATN9))))
                                                     (g$syntax-dispatch$7215$RATN9
                                                       g$t$8646$RATN9
                                                       '(#(scheme-id mutable)
                                                         any
                                                         .
                                                         any)))))
                                                 g$x$8645$RATN9)))
                                             g$ls$8644$RATN9))))))
                         ((case-lambda
                            ((g$uid-code$8620$RATN9
                               g$sealed?$8621$RATN9
                               g$opaque?$8622$RATN9
                               g$fields$8623$RATN9)
                             (g$bless$7178$RATN9
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$8616$RATN9)
                                 g$parent-rtd-code$8618$RATN9
                                 g$uid-code$8620$RATN9
                                 g$sealed?$8621$RATN9
                                 g$opaque?$8622$RATN9
                                 g$fields$8623$RATN9))))
                          ((case-lambda
                             ((g$t$8624$RATN9)
                              ((case-lambda
                                 ((g$ls/false$8625$RATN9)
                                  (if g$ls/false$8625$RATN9
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$8625$RATN9)
                                    ((case-lambda
                                       ((g$t$8626$RATN9)
                                        ((case-lambda
                                           ((g$ls/false$8627$RATN9)
                                            (if g$ls/false$8627$RATN9
                                              (apply
                                                (case-lambda
                                                  ((g$uid$8628$RATN9)
                                                   (list
                                                     'quote
                                                     g$uid$8628$RATN9)))
                                                g$ls/false$8627$RATN9)
                                              ((case-lambda
                                                 ((g$t$8629$RATN9)
                                                  ((case-lambda
                                                     ((g$ls/false$8630$RATN9)
                                                      (if g$ls/false$8630$RATN9
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$8630$RATN9)
                                                        (g$syntax-violation$7321$RATN9
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$8629$RATN9))))
                                                   (g$syntax-dispatch$7215$RATN9
                                                     g$t$8629$RATN9
                                                     '_))))
                                               g$t$8626$RATN9))))
                                         (g$syntax-dispatch$7215$RATN9
                                           g$t$8626$RATN9
                                           '(_ any)))))
                                     g$t$8624$RATN9))))
                               (g$syntax-dispatch$7215$RATN9
                                 g$t$8624$RATN9
                                 '(_)))))
                           (g$get-clause$8447$RATN9
                             'nongenerative
                             g$clause*$8617$RATN9))
                          ((case-lambda
                             ((g$t$8631$RATN9)
                              ((case-lambda
                                 ((g$ls/false$8632$RATN9)
                                  (if g$ls/false$8632$RATN9
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8632$RATN9)
                                    ((case-lambda
                                       ((g$t$8633$RATN9)
                                        ((case-lambda
                                           ((g$ls/false$8634$RATN9)
                                            (if g$ls/false$8634$RATN9
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8634$RATN9)
                                              (g$syntax-violation$7321$RATN9
                                                '#f
                                                '"invalid syntax"
                                                g$t$8633$RATN9))))
                                         (g$syntax-dispatch$7215$RATN9
                                           g$t$8633$RATN9
                                           '_))))
                                     g$t$8631$RATN9))))
                               (g$syntax-dispatch$7215$RATN9
                                 g$t$8631$RATN9
                                 '(_ #(atom #t))))))
                           (g$get-clause$8447$RATN9
                             'sealed
                             g$clause*$8617$RATN9))
                          ((case-lambda
                             ((g$t$8635$RATN9)
                              ((case-lambda
                                 ((g$ls/false$8636$RATN9)
                                  (if g$ls/false$8636$RATN9
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8636$RATN9)
                                    ((case-lambda
                                       ((g$t$8637$RATN9)
                                        ((case-lambda
                                           ((g$ls/false$8638$RATN9)
                                            (if g$ls/false$8638$RATN9
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8638$RATN9)
                                              (g$syntax-violation$7321$RATN9
                                                '#f
                                                '"invalid syntax"
                                                g$t$8637$RATN9))))
                                         (g$syntax-dispatch$7215$RATN9
                                           g$t$8637$RATN9
                                           '_))))
                                     g$t$8635$RATN9))))
                               (g$syntax-dispatch$7215$RATN9
                                 g$t$8635$RATN9
                                 '(_ #(atom #t))))))
                           (g$get-clause$8447$RATN9
                             'opaque
                             g$clause*$8617$RATN9))
                          ((case-lambda
                             ((g$t$8639$RATN9)
                              ((case-lambda
                                 ((g$ls/false$8640$RATN9)
                                  (if g$ls/false$8640$RATN9
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$8641$RATN9)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$8619$RATN9
                                             g$field-spec*$8641$RATN9))))
                                      g$ls/false$8640$RATN9)
                                    ((case-lambda
                                       ((g$t$8642$RATN9)
                                        ((case-lambda
                                           ((g$ls/false$8643$RATN9)
                                            (if g$ls/false$8643$RATN9
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$8643$RATN9)
                                              (g$syntax-violation$7321$RATN9
                                                '#f
                                                '"invalid syntax"
                                                g$t$8642$RATN9))))
                                         (g$syntax-dispatch$7215$RATN9
                                           g$t$8642$RATN9
                                           '_))))
                                     g$t$8639$RATN9))))
                               (g$syntax-dispatch$7215$RATN9
                                 g$t$8639$RATN9
                                 '(_ . each-any)))))
                           (g$get-clause$8447$RATN9
                             'fields
                             g$clause*$8617$RATN9)))))))
                  (g$parent-rtd-code$8449$RATN9
                    (case-lambda
                      ((g$clause*$8604$RATN9)
                       ((case-lambda
                          ((g$t$8605$RATN9)
                           ((case-lambda
                              ((g$ls/false$8606$RATN9)
                               (if g$ls/false$8606$RATN9
                                 (apply
                                   (case-lambda
                                     ((g$name$8607$RATN9)
                                      (list
                                        'record-type-descriptor
                                        g$name$8607$RATN9)))
                                   g$ls/false$8606$RATN9)
                                 ((case-lambda
                                    ((g$t$8608$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8609$RATN9)
                                         (if g$ls/false$8609$RATN9
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8610$RATN9)
                                                    ((case-lambda
                                                       ((g$ls/false$8611$RATN9)
                                                        (if g$ls/false$8611$RATN9
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8612$RATN9
                                                                 g$rcd$8613$RATN9)
                                                               g$rtd$8612$RATN9))
                                                            g$ls/false$8611$RATN9)
                                                          ((case-lambda
                                                             ((g$t$8614$RATN9)
                                                              ((case-lambda
                                                                 ((g$ls/false$8615$RATN9)
                                                                  (if g$ls/false$8615$RATN9
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8615$RATN9)
                                                                    (g$syntax-violation$7321$RATN9
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8614$RATN9))))
                                                               (g$syntax-dispatch$7215$RATN9
                                                                 g$t$8614$RATN9
                                                                 '#(atom #f)))))
                                                           g$t$8610$RATN9))))
                                                     (g$syntax-dispatch$7215$RATN9
                                                       g$t$8610$RATN9
                                                       '(_ any any)))))
                                                 (g$get-clause$8447$RATN9
                                                   'parent-rtd
                                                   g$clause*$8604$RATN9))))
                                             g$ls/false$8609$RATN9)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$t$8608$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8608$RATN9
                                        '#(atom #f)))))
                                  g$t$8605$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$8605$RATN9
                              '(_ any)))))
                        (g$get-clause$8447$RATN9
                          'parent
                          g$clause*$8604$RATN9)))))
                  (g$parent-rcd-code$8450$RATN9
                    (case-lambda
                      ((g$clause*$8592$RATN9)
                       ((case-lambda
                          ((g$t$8593$RATN9)
                           ((case-lambda
                              ((g$ls/false$8594$RATN9)
                               (if g$ls/false$8594$RATN9
                                 (apply
                                   (case-lambda
                                     ((g$name$8595$RATN9)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$8595$RATN9)))
                                   g$ls/false$8594$RATN9)
                                 ((case-lambda
                                    ((g$t$8596$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8597$RATN9)
                                         (if g$ls/false$8597$RATN9
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8598$RATN9)
                                                    ((case-lambda
                                                       ((g$ls/false$8599$RATN9)
                                                        (if g$ls/false$8599$RATN9
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8600$RATN9
                                                                 g$rcd$8601$RATN9)
                                                               g$rcd$8601$RATN9))
                                                            g$ls/false$8599$RATN9)
                                                          ((case-lambda
                                                             ((g$t$8602$RATN9)
                                                              ((case-lambda
                                                                 ((g$ls/false$8603$RATN9)
                                                                  (if g$ls/false$8603$RATN9
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8603$RATN9)
                                                                    (g$syntax-violation$7321$RATN9
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8602$RATN9))))
                                                               (g$syntax-dispatch$7215$RATN9
                                                                 g$t$8602$RATN9
                                                                 '#(atom #f)))))
                                                           g$t$8598$RATN9))))
                                                     (g$syntax-dispatch$7215$RATN9
                                                       g$t$8598$RATN9
                                                       '(_ any any)))))
                                                 (g$get-clause$8447$RATN9
                                                   'parent-rtd
                                                   g$clause*$8592$RATN9))))
                                             g$ls/false$8597$RATN9)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$t$8596$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8596$RATN9
                                        '#(atom #f)))))
                                  g$t$8593$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$8593$RATN9
                              '(_ any)))))
                        (g$get-clause$8447$RATN9
                          'parent
                          g$clause*$8592$RATN9)))))
                  (g$foo-rcd-code$8451$RATN9
                    (case-lambda
                      ((g$clause*$8588$RATN9
                         g$foo-rtd$8589$RATN9
                         g$protocol$8590$RATN9
                         g$parent-rcd-code$8591$RATN9)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$8589$RATN9
                         g$parent-rcd-code$8591$RATN9
                         g$protocol$8590$RATN9))))
                  (g$get-protocol-code$8452$RATN9
                    (case-lambda
                      ((g$clause*$8582$RATN9)
                       ((case-lambda
                          ((g$t$8583$RATN9)
                           ((case-lambda
                              ((g$ls/false$8584$RATN9)
                               (if g$ls/false$8584$RATN9
                                 (apply
                                   (case-lambda
                                     ((g$expr$8585$RATN9) g$expr$8585$RATN9))
                                   g$ls/false$8584$RATN9)
                                 ((case-lambda
                                    ((g$t$8586$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8587$RATN9)
                                         (if g$ls/false$8587$RATN9
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$8587$RATN9)
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$t$8586$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8586$RATN9
                                        '_))))
                                  g$t$8583$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$8583$RATN9
                              '(_ any)))))
                        (g$get-clause$8447$RATN9
                          'protocol
                          g$clause*$8582$RATN9)))))
                  (g$get-fields$8453$RATN9
                    (case-lambda
                      ((g$clause*$8573$RATN9)
                       ((case-lambda
                          ((g$t$8574$RATN9)
                           ((case-lambda
                              ((g$ls/false$8575$RATN9)
                               (if g$ls/false$8575$RATN9
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$8575$RATN9)
                                 ((case-lambda
                                    ((g$t$8576$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8577$RATN9)
                                         (if g$ls/false$8577$RATN9
                                           (apply
                                             (case-lambda
                                               ((g$f*$8578$RATN9)
                                                g$f*$8578$RATN9))
                                             g$ls/false$8577$RATN9)
                                           ((case-lambda
                                              ((g$t$8579$RATN9)
                                               ((case-lambda
                                                  ((g$ls/false$8580$RATN9)
                                                   (if g$ls/false$8580$RATN9
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8581$RATN9)
                                                          (g$get-fields$8453$RATN9
                                                            g$rest$8581$RATN9)))
                                                       g$ls/false$8580$RATN9)
                                                     (g$syntax-violation$7321$RATN9
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8579$RATN9))))
                                                (g$syntax-dispatch$7215$RATN9
                                                  g$t$8579$RATN9
                                                  '(_ . any)))))
                                            g$t$8576$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8576$RATN9
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$8574$RATN9))))
                            (g$syntax-dispatch$7215$RATN9 g$t$8574$RATN9 '()))))
                        g$clause*$8573$RATN9))))
                  (g$get-mutator-indices$8454$RATN9
                    (case-lambda
                      ((g$fields$8561$RATN9)
                       ((letrec ((g$f$8562$RATN9
                                   (case-lambda
                                     ((g$fields$8563$RATN9 g$i$8564$RATN9)
                                      ((case-lambda
                                         ((g$t$8565$RATN9)
                                          ((case-lambda
                                             ((g$ls/false$8566$RATN9)
                                              (if g$ls/false$8566$RATN9
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$8566$RATN9)
                                                ((case-lambda
                                                   ((g$t$8567$RATN9)
                                                    ((case-lambda
                                                       ((g$ls/false$8568$RATN9)
                                                        (if g$ls/false$8568$RATN9
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$8569$RATN9)
                                                               (cons
                                                                 g$i$8564$RATN9
                                                                 (g$f$8562$RATN9
                                                                   g$rest$8569$RATN9
                                                                   (+ g$i$8564$RATN9
                                                                      '1)))))
                                                            g$ls/false$8568$RATN9)
                                                          ((case-lambda
                                                             ((g$t$8570$RATN9)
                                                              ((case-lambda
                                                                 ((g$ls/false$8571$RATN9)
                                                                  (if g$ls/false$8571$RATN9
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$8572$RATN9)
                                                                         (g$f$8562$RATN9
                                                                           g$rest$8572$RATN9
                                                                           (+ g$i$8564$RATN9
                                                                              '1))))
                                                                      g$ls/false$8571$RATN9)
                                                                    (g$syntax-violation$7321$RATN9
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8570$RATN9))))
                                                               (g$syntax-dispatch$7215$RATN9
                                                                 g$t$8570$RATN9
                                                                 '(_ . any)))))
                                                           g$t$8567$RATN9))))
                                                     (g$syntax-dispatch$7215$RATN9
                                                       g$t$8567$RATN9
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$8565$RATN9))))
                                           (g$syntax-dispatch$7215$RATN9
                                             g$t$8565$RATN9
                                             '()))))
                                       g$fields$8563$RATN9)))))
                          g$f$8562$RATN9)
                        g$fields$8561$RATN9
                        '0))))
                  (g$get-mutators$8455$RATN9
                    (case-lambda
                      ((g$foo$8540$RATN9 g$fields$8541$RATN9)
                       (letrec* ((g$gen-name$8542$RATN9
                                   (case-lambda
                                     ((g$x$8560$RATN9)
                                      (g$datum->syntax$7323$RATN9
                                        g$foo$8540$RATN9
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7324$RATN9
                                                g$foo$8540$RATN9))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7324$RATN9
                                                g$x$8560$RATN9))
                                            '"-set!")))))))
                         ((letrec ((g$f$8543$RATN9
                                     (case-lambda
                                       ((g$fields$8544$RATN9)
                                        ((case-lambda
                                           ((g$t$8545$RATN9)
                                            ((case-lambda
                                               ((g$ls/false$8546$RATN9)
                                                (if g$ls/false$8546$RATN9
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$8546$RATN9)
                                                  ((case-lambda
                                                     ((g$t$8547$RATN9)
                                                      ((case-lambda
                                                         ((g$ls/false$8548$RATN9)
                                                          (if g$ls/false$8548$RATN9
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8549$RATN9
                                                                   g$accessor$8550$RATN9
                                                                   g$mutator$8551$RATN9
                                                                   g$rest$8552$RATN9)
                                                                 (cons
                                                                   g$mutator$8551$RATN9
                                                                   (g$f$8543$RATN9
                                                                     g$rest$8552$RATN9))))
                                                              g$ls/false$8548$RATN9)
                                                            ((case-lambda
                                                               ((g$t$8553$RATN9)
                                                                ((case-lambda
                                                                   ((g$ls/false$8554$RATN9)
                                                                    (if g$ls/false$8554$RATN9
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8555$RATN9
                                                                             g$rest$8556$RATN9)
                                                                           (cons
                                                                             (g$gen-name$8542$RATN9
                                                                               g$name$8555$RATN9)
                                                                             (g$f$8543$RATN9
                                                                               g$rest$8556$RATN9))))
                                                                        g$ls/false$8554$RATN9)
                                                                      ((case-lambda
                                                                         ((g$t$8557$RATN9)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8558$RATN9)
                                                                              (if g$ls/false$8558$RATN9
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$8559$RATN9)
                                                                                     (g$f$8543$RATN9
                                                                                       g$rest$8559$RATN9)))
                                                                                  g$ls/false$8558$RATN9)
                                                                                (g$syntax-violation$7321$RATN9
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$8557$RATN9))))
                                                                           (g$syntax-dispatch$7215$RATN9
                                                                             g$t$8557$RATN9
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$8553$RATN9))))
                                                                 (g$syntax-dispatch$7215$RATN9
                                                                   g$t$8553$RATN9
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$8547$RATN9))))
                                                       (g$syntax-dispatch$7215$RATN9
                                                         g$t$8547$RATN9
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$8545$RATN9))))
                                             (g$syntax-dispatch$7215$RATN9
                                               g$t$8545$RATN9
                                               '()))))
                                         g$fields$8544$RATN9)))))
                            g$f$8543$RATN9)
                          g$fields$8541$RATN9)))))
                  (g$get-accessors$8456$RATN9
                    (case-lambda
                      ((g$foo$8506$RATN9 g$fields$8507$RATN9)
                       (letrec* ((g$gen-name$8508$RATN9
                                   (case-lambda
                                     ((g$x$8539$RATN9)
                                      (g$datum->syntax$7323$RATN9
                                        g$foo$8506$RATN9
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7324$RATN9
                                                g$foo$8506$RATN9))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7324$RATN9
                                                g$x$8539$RATN9)))))))))
                         (map (case-lambda
                                ((g$field$8509$RATN9)
                                 ((case-lambda
                                    ((g$t$8510$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8511$RATN9)
                                         (if (if g$ls/false$8511$RATN9
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$name$8512$RATN9
                                                        g$accessor$8513$RATN9
                                                        g$mutator$8514$RATN9)
                                                      (g$id?$6937$RATN9
                                                        g$accessor$8513$RATN9)))
                                                   g$ls/false$8511$RATN9))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$name$8515$RATN9
                                                  g$accessor$8516$RATN9
                                                  g$mutator$8517$RATN9)
                                                g$accessor$8516$RATN9))
                                             g$ls/false$8511$RATN9)
                                           ((case-lambda
                                              ((g$t$8518$RATN9)
                                               ((case-lambda
                                                  ((g$ls/false$8519$RATN9)
                                                   (if (if g$ls/false$8519$RATN9
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$name$8520$RATN9
                                                                  g$accessor$8521$RATN9)
                                                                (g$id?$6937$RATN9
                                                                  g$accessor$8521$RATN9)))
                                                             g$ls/false$8519$RATN9))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$name$8522$RATN9
                                                            g$accessor$8523$RATN9)
                                                          g$accessor$8523$RATN9))
                                                       g$ls/false$8519$RATN9)
                                                     ((case-lambda
                                                        ((g$t$8524$RATN9)
                                                         ((case-lambda
                                                            ((g$ls/false$8525$RATN9)
                                                             (if (if g$ls/false$8525$RATN9
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$name$8526$RATN9)
                                                                          (g$id?$6937$RATN9
                                                                            g$name$8526$RATN9)))
                                                                       g$ls/false$8525$RATN9))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$name$8527$RATN9)
                                                                    (g$gen-name$8508$RATN9
                                                                      g$name$8527$RATN9)))
                                                                 g$ls/false$8525$RATN9)
                                                               ((case-lambda
                                                                  ((g$t$8528$RATN9)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8529$RATN9)
                                                                       (if (if g$ls/false$8529$RATN9
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$name$8530$RATN9)
                                                                                    (g$id?$6937$RATN9
                                                                                      g$name$8530$RATN9)))
                                                                                 g$ls/false$8529$RATN9))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$name$8531$RATN9)
                                                                              (g$gen-name$8508$RATN9
                                                                                g$name$8531$RATN9)))
                                                                           g$ls/false$8529$RATN9)
                                                                         ((case-lambda
                                                                            ((g$t$8532$RATN9)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8533$RATN9)
                                                                                 (if (if g$ls/false$8533$RATN9
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$name$8534$RATN9)
                                                                                              (g$id?$6937$RATN9
                                                                                                g$name$8534$RATN9)))
                                                                                           g$ls/false$8533$RATN9))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$name$8535$RATN9)
                                                                                        (g$gen-name$8508$RATN9
                                                                                          g$name$8535$RATN9)))
                                                                                     g$ls/false$8533$RATN9)
                                                                                   ((case-lambda
                                                                                      ((g$t$8536$RATN9)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8537$RATN9)
                                                                                           (if g$ls/false$8537$RATN9
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$others$8538$RATN9)
                                                                                                  (g$syntax-violation$7321$RATN9
                                                                                                    '#f
                                                                                                    '"invalid field spec"
                                                                                                    g$field$8509$RATN9)))
                                                                                               g$ls/false$8537$RATN9)
                                                                                             (g$syntax-violation$7321$RATN9
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8536$RATN9))))
                                                                                        (g$syntax-dispatch$7215$RATN9
                                                                                          g$t$8536$RATN9
                                                                                          'any))))
                                                                                    g$t$8532$RATN9))))
                                                                              (g$syntax-dispatch$7215$RATN9
                                                                                g$t$8532$RATN9
                                                                                'any))))
                                                                          g$t$8528$RATN9))))
                                                                    (g$syntax-dispatch$7215$RATN9
                                                                      g$t$8528$RATN9
                                                                      '(#(scheme-id
                                                                          immutable)
                                                                        any)))))
                                                                g$t$8524$RATN9))))
                                                          (g$syntax-dispatch$7215$RATN9
                                                            g$t$8524$RATN9
                                                            '(#(scheme-id
                                                                mutable)
                                                              any)))))
                                                      g$t$8518$RATN9))))
                                                (g$syntax-dispatch$7215$RATN9
                                                  g$t$8518$RATN9
                                                  '(#(scheme-id immutable)
                                                    any
                                                    any)))))
                                            g$t$8510$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8510$RATN9
                                        '(#(scheme-id mutable) any any any)))))
                                  g$field$8509$RATN9)))
                              g$fields$8507$RATN9)))))
                  (g$enumerate$8457$RATN9
                    (case-lambda
                      ((g$ls$8502$RATN9)
                       ((letrec ((g$f$8503$RATN9
                                   (case-lambda
                                     ((g$ls$8504$RATN9 g$i$8505$RATN9)
                                      (if (null? g$ls$8504$RATN9)
                                        '()
                                        (cons
                                          g$i$8505$RATN9
                                          (g$f$8503$RATN9
                                            (cdr g$ls$8504$RATN9)
                                            (+ g$i$8505$RATN9 '1))))))))
                          g$f$8503$RATN9)
                        g$ls$8502$RATN9
                        '0))))
                  (g$do-define-record$8458$RATN9
                    (case-lambda
                      ((g$namespec$8482$RATN9 g$clause*$8483$RATN9)
                       ((case-lambda
                          ((g$foo$8484$RATN9)
                           ((case-lambda
                              ((g$foo-rtd$8485$RATN9)
                               ((case-lambda
                                  ((g$foo-rcd$8486$RATN9)
                                   ((case-lambda
                                      ((g$protocol$8487$RATN9)
                                       ((case-lambda
                                          ((g$make-foo$8488$RATN9)
                                           ((case-lambda
                                              ((g$fields$8489$RATN9)
                                               ((case-lambda
                                                  ((g$idx*$8490$RATN9)
                                                   ((case-lambda
                                                      ((g$foo-x*$8491$RATN9)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$8492$RATN9)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$8493$RATN9)
                                                               ((case-lambda
                                                                  ((g$foo?$8494$RATN9)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$8495$RATN9)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$8496$RATN9)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$8497$RATN9)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$7178$RATN9
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$8485$RATN9
                                                                                           g$foo-rtd-code$8495$RATN9)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$8487$RATN9
                                                                                             g$protocol-code$8497$RATN9)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$8486$RATN9
                                                                                               g$foo-rcd-code$8496$RATN9)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$8484$RATN9
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$8485$RATN9)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$8486$RATN9)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$8494$RATN9
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$8485$RATN9))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$8488$RATN9
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$8486$RATN9))
                                                                                                   (append
                                                                                                     (map (case-lambda
                                                                                                            ((g$foo-x$8498$RATN9
                                                                                                               g$idx$8499$RATN9)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$foo-x$8498$RATN9
                                                                                                               (list
                                                                                                                 'record-accessor
                                                                                                                 g$foo-rtd$8485$RATN9
                                                                                                                 g$idx$8499$RATN9))))
                                                                                                          g$foo-x*$8491$RATN9
                                                                                                          g$idx*$8490$RATN9)
                                                                                                     (map (case-lambda
                                                                                                            ((g$set-foo-x!$8500$RATN9
                                                                                                               g$idx$8501$RATN9)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$set-foo-x!$8500$RATN9
                                                                                                               (list
                                                                                                                 'record-mutator
                                                                                                                 g$foo-rtd$8485$RATN9
                                                                                                                 g$idx$8501$RATN9))))
                                                                                                          g$set-foo-x!*$8492$RATN9
                                                                                                          g$set-foo-idx*$8493$RATN9)))))))))))))))
                                                                            (g$get-protocol-code$8452$RATN9
                                                                              g$clause*$8483$RATN9))))
                                                                        (g$foo-rcd-code$8451$RATN9
                                                                          g$clause*$8483$RATN9
                                                                          g$foo-rtd$8485$RATN9
                                                                          g$protocol$8487$RATN9
                                                                          (g$parent-rcd-code$8450$RATN9
                                                                            g$clause*$8483$RATN9)))))
                                                                    (g$foo-rtd-code$8448$RATN9
                                                                      g$foo$8484$RATN9
                                                                      g$clause*$8483$RATN9
                                                                      (g$parent-rtd-code$8449$RATN9
                                                                        g$clause*$8483$RATN9)))))
                                                                (g$get-record-predicate-name$8446$RATN9
                                                                  g$namespec$8482$RATN9))))
                                                            (g$get-mutator-indices$8454$RATN9
                                                              g$fields$8489$RATN9))))
                                                        (g$get-mutators$8455$RATN9
                                                          g$foo$8484$RATN9
                                                          g$fields$8489$RATN9))))
                                                    (g$get-accessors$8456$RATN9
                                                      g$foo$8484$RATN9
                                                      g$fields$8489$RATN9))))
                                                (g$enumerate$8457$RATN9
                                                  g$fields$8489$RATN9))))
                                            (g$get-fields$8453$RATN9
                                              g$clause*$8483$RATN9))))
                                        (g$get-record-constructor-name$8445$RATN9
                                          g$namespec$8482$RATN9))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$8444$RATN9 g$namespec$8482$RATN9)))))
                  (g$verify-clauses$8459$RATN9
                    (case-lambda
                      ((g$x$8464$RATN9 g$cls*$8465$RATN9)
                       (letrec* ((g$valid-kwds$8466$RATN9
                                   (map g$bless$7178$RATN9
                                        '(fields
                                           parent
                                           parent-rtd
                                           protocol
                                           sealed
                                           opaque
                                           nongenerative)))
                                 (g$free-id-member?$8467$RATN9
                                   (case-lambda
                                     ((g$x$8479$RATN9 g$ls$8480$RATN9)
                                      (if (pair? g$ls$8480$RATN9)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$8481$RATN9)
                                              (if g$t$8481$RATN9
                                                g$t$8481$RATN9
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$8467$RATN9
                                                    g$x$8479$RATN9
                                                    (cdr g$ls$8480$RATN9))))))
                                           (g$free-id=?$6941$RATN9
                                             g$x$8479$RATN9
                                             (car g$ls$8480$RATN9))))
                                        '#f)))))
                         ((letrec ((g$f$8468$RATN9
                                     (case-lambda
                                       ((g$cls*$8469$RATN9 g$seen*$8470$RATN9)
                                        (if (null? g$cls*$8469$RATN9)
                                          (void)
                                          ((case-lambda
                                             ((g$t$8471$RATN9)
                                              ((case-lambda
                                                 ((g$ls/false$8472$RATN9)
                                                  (if g$ls/false$8472$RATN9
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$8473$RATN9
                                                           g$rest$8474$RATN9)
                                                         (if ((case-lambda
                                                                ((g$t$8475$RATN9)
                                                                 (if g$t$8475$RATN9
                                                                   g$t$8475$RATN9
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$8467$RATN9
                                                                            g$kwd$8473$RATN9
                                                                            g$valid-kwds$8466$RATN9))))))
                                                              (not (g$id?$6937$RATN9
                                                                     g$kwd$8473$RATN9)))
                                                           (g$syntax-violation$7321$RATN9
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$8473$RATN9)
                                                           (if (g$bound-id-member?$6944$RATN9
                                                                 g$kwd$8473$RATN9
                                                                 g$seen*$8470$RATN9)
                                                             (g$syntax-violation$7321$RATN9
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$8464$RATN9
                                                               g$kwd$8473$RATN9)
                                                             (g$f$8468$RATN9
                                                               (cdr g$cls*$8469$RATN9)
                                                               (cons
                                                                 g$kwd$8473$RATN9
                                                                 g$seen*$8470$RATN9))))))
                                                      g$ls/false$8472$RATN9)
                                                    ((case-lambda
                                                       ((g$t$8476$RATN9)
                                                        ((case-lambda
                                                           ((g$ls/false$8477$RATN9)
                                                            (if g$ls/false$8477$RATN9
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$8478$RATN9)
                                                                   (g$syntax-violation$7321$RATN9
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$8478$RATN9)))
                                                                g$ls/false$8477$RATN9)
                                                              (g$syntax-violation$7321$RATN9
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8476$RATN9))))
                                                         (g$syntax-dispatch$7215$RATN9
                                                           g$t$8476$RATN9
                                                           'any))))
                                                     g$t$8471$RATN9))))
                                               (g$syntax-dispatch$7215$RATN9
                                                 g$t$8471$RATN9
                                                 '(any . any)))))
                                           (car g$cls*$8469$RATN9)))))))
                            g$f$8468$RATN9)
                          g$cls*$8465$RATN9
                          '()))))))
          ((case-lambda
             ((g$t$8460$RATN9)
              ((case-lambda
                 ((g$ls/false$8461$RATN9)
                  (if g$ls/false$8461$RATN9
                    (apply
                      (case-lambda
                        ((g$namespec$8462$RATN9 g$clause*$8463$RATN9)
                         (begin
                           (g$verify-clauses$8459$RATN9
                             g$x$8442$RATN9
                             g$clause*$8463$RATN9)
                           (g$do-define-record$8458$RATN9
                             g$namespec$8462$RATN9
                             g$clause*$8463$RATN9))))
                      g$ls/false$8461$RATN9)
                    (g$syntax-violation$7321$RATN9
                      '#f
                      '"invalid syntax"
                      g$t$8460$RATN9))))
               (g$syntax-dispatch$7215$RATN9
                 g$t$8460$RATN9
                 '(_ any . each-any)))))
           g$x$8442$RATN9)))))
   (g$define-condition-type-macro$7210$RATN9
     g$define-condition-type-macro$10660$RATN9
     (case-lambda
       ((g$x$8698$RATN9)
        (letrec* ((g$mkname$8699$RATN9
                    (case-lambda
                      ((g$name$8722$RATN9 g$suffix$8723$RATN9)
                       (g$datum->syntax$7323$RATN9
                         g$name$8722$RATN9
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$7324$RATN9 g$name$8722$RATN9))
                             g$suffix$8723$RATN9)))))))
          ((case-lambda
             ((g$t$8700$RATN9)
              ((case-lambda
                 ((g$ls/false$8701$RATN9)
                  (if (if g$ls/false$8701$RATN9
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$8702$RATN9
                                 g$name$8703$RATN9
                                 g$super$8704$RATN9
                                 g$constructor$8705$RATN9
                                 g$predicate$8706$RATN9
                                 g$field*$8707$RATN9
                                 g$accessor*$8708$RATN9)
                               (if (g$id?$6937$RATN9 g$name$8703$RATN9)
                                 (if (g$id?$6937$RATN9 g$super$8704$RATN9)
                                   (if (g$id?$6937$RATN9
                                         g$constructor$8705$RATN9)
                                     (if (g$id?$6937$RATN9
                                           g$predicate$8706$RATN9)
                                       (if (g$for-all$5365$RATN9
                                             g$id?$6937$RATN9
                                             g$field*$8707$RATN9)
                                         (begin
                                           '#f
                                           (g$for-all$5365$RATN9
                                             g$id?$6937$RATN9
                                             g$accessor*$8708$RATN9))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$8701$RATN9))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$8709$RATN9
                           g$name$8710$RATN9
                           g$super$8711$RATN9
                           g$constructor$8712$RATN9
                           g$predicate$8713$RATN9
                           g$field*$8714$RATN9
                           g$accessor*$8715$RATN9)
                         ((case-lambda
                            ((g$aux-accessor*$8716$RATN9)
                             (g$bless$7178$RATN9
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$8710$RATN9
                                         g$constructor$8712$RATN9
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$8711$RATN9)
                                         (cons
                                           (cons
                                             'fields
                                             (map (case-lambda
                                                    ((g$field$8717$RATN9
                                                       g$aux$8718$RATN9)
                                                     (list
                                                       'immutable
                                                       g$field$8717$RATN9
                                                       g$aux$8718$RATN9)))
                                                  g$field*$8714$RATN9
                                                  g$aux-accessor*$8716$RATN9))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$8713$RATN9
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$8710$RATN9)))
                                     (map (case-lambda
                                            ((g$accessor$8719$RATN9
                                               g$aux$8720$RATN9)
                                             (list
                                               'define
                                               g$accessor$8719$RATN9
                                               (list
                                                 'condition-accessor
                                                 (list
                                                   'record-type-descriptor
                                                   g$name$8710$RATN9)
                                                 g$aux$8720$RATN9))))
                                          g$accessor*$8715$RATN9
                                          g$aux-accessor*$8716$RATN9)))))))
                          (map (case-lambda ((g$x$8721$RATN9) (gensym)))
                               g$accessor*$8715$RATN9))))
                      g$ls/false$8701$RATN9)
                    (g$syntax-violation$7321$RATN9
                      '#f
                      '"invalid syntax"
                      g$t$8700$RATN9))))
               (g$syntax-dispatch$7215$RATN9
                 g$t$8700$RATN9
                 '(any any any any any . #(each (any any)))))))
           g$x$8698$RATN9)))))
   (g$incorrect-usage-macro$7211$RATN9
     g$incorrect-usage-macro$10661$RATN9
     (case-lambda
       ((g$e$8724$RATN9)
        (g$syntax-violation$7321$RATN9
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$8724$RATN9))))
   (g$parameterize-transformer$7212$RATN9
     g$parameterize-transformer$10662$RATN9
     (case-lambda
       ((g$e$8725$RATN9 g$r$8726$RATN9 g$mr$8727$RATN9)
        ((case-lambda
           ((g$t$8728$RATN9)
            ((case-lambda
               ((g$ls/false$8729$RATN9)
                (if g$ls/false$8729$RATN9
                  (apply
                    (case-lambda
                      ((g$b$8730$RATN9 g$b*$8731$RATN9)
                       (g$chi-internal$7244$RATN9
                         (cons g$b$8730$RATN9 g$b*$8731$RATN9)
                         g$r$8726$RATN9
                         g$mr$8727$RATN9)))
                    g$ls/false$8729$RATN9)
                  ((case-lambda
                     ((g$t$8732$RATN9)
                      ((case-lambda
                         ((g$ls/false$8733$RATN9)
                          (if g$ls/false$8733$RATN9
                            (apply
                              (case-lambda
                                ((g$olhs*$8734$RATN9
                                   g$orhs*$8735$RATN9
                                   g$b$8736$RATN9
                                   g$b*$8737$RATN9)
                                 ((case-lambda
                                    ((g$lhs*$8738$RATN9
                                       g$rhs*$8739$RATN9
                                       g$t*$8740$RATN9
                                       g$swap$8741$RATN9)
                                     (g$build-let$6870$RATN9
                                       '#f
                                       (append
                                         g$lhs*$8738$RATN9
                                         g$rhs*$8739$RATN9)
                                       (append
                                         (g$chi-expr*$7231$RATN9
                                           g$olhs*$8734$RATN9
                                           g$r$8726$RATN9
                                           g$mr$8727$RATN9)
                                         (g$chi-expr*$7231$RATN9
                                           g$orhs*$8735$RATN9
                                           g$r$8726$RATN9
                                           g$mr$8727$RATN9))
                                       (g$build-let$6870$RATN9
                                         '#f
                                         (list g$swap$8741$RATN9)
                                         (list
                                           (g$build-lambda$6868$RATN9
                                             '#f
                                             '()
                                             (g$build-sequence$6871$RATN9
                                               '#f
                                               (map (case-lambda
                                                      ((g$t$8742$RATN9
                                                         g$lhs$8743$RATN9
                                                         g$rhs$8744$RATN9)
                                                       (g$build-let$6870$RATN9
                                                         '#f
                                                         (list g$t$8742$RATN9)
                                                         (list
                                                           (list
                                                             g$lhs$8743$RATN9))
                                                         (g$build-sequence$6871$RATN9
                                                           '#f
                                                           (list
                                                             (list
                                                               g$lhs$8743$RATN9
                                                               g$rhs$8744$RATN9)
                                                             (list
                                                               'set!
                                                               g$rhs$8744$RATN9
                                                               g$t$8742$RATN9))))))
                                                    g$t*$8740$RATN9
                                                    g$lhs*$8738$RATN9
                                                    g$rhs*$8739$RATN9))))
                                         (list
                                           '(primitive dynamic-wind)
                                           g$swap$8741$RATN9
                                           (g$build-lambda$6868$RATN9
                                             '#f
                                             '()
                                             (g$chi-internal$7244$RATN9
                                               (cons
                                                 g$b$8736$RATN9
                                                 g$b*$8737$RATN9)
                                               g$r$8726$RATN9
                                               g$mr$8727$RATN9))
                                           g$swap$8741$RATN9)))))
                                  (map (case-lambda
                                         ((g$x$8745$RATN9)
                                          (g$gen-lexical$6881$RATN9 'lhs)))
                                       g$olhs*$8734$RATN9)
                                  (map (case-lambda
                                         ((g$x$8746$RATN9)
                                          (g$gen-lexical$6881$RATN9 'rhs)))
                                       g$olhs*$8734$RATN9)
                                  (map (case-lambda
                                         ((g$x$8747$RATN9)
                                          (g$gen-lexical$6881$RATN9 't)))
                                       g$olhs*$8734$RATN9)
                                  (g$gen-lexical$6881$RATN9 'swap))))
                              g$ls/false$8733$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$8732$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$8732$RATN9
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$8728$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$8728$RATN9
               '(_ () any . each-any)))))
         g$e$8725$RATN9))))
   (g$foreign-call-transformer$7213$RATN9
     g$foreign-call-transformer$10663$RATN9
     (case-lambda
       ((g$e$8748$RATN9 g$r$8749$RATN9 g$mr$8750$RATN9)
        ((case-lambda
           ((g$t$8751$RATN9)
            ((case-lambda
               ((g$ls/false$8752$RATN9)
                (if g$ls/false$8752$RATN9
                  (apply
                    (case-lambda
                      ((g$name$8753$RATN9 g$arg*$8754$RATN9)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7233$RATN9
                             g$name$8753$RATN9
                             g$r$8749$RATN9
                             g$mr$8750$RATN9)
                           (g$chi-expr*$7231$RATN9
                             g$arg*$8754$RATN9
                             g$r$8749$RATN9
                             g$mr$8750$RATN9)))))
                    g$ls/false$8752$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$8751$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$8751$RATN9
               '(_ any . each-any)))))
         g$e$8748$RATN9))))
   (g$convert-pattern$7214$RATN9
     g$convert-pattern$10664$RATN9
     (case-lambda
       ((g$pattern$8755$RATN9 g$keys$8756$RATN9)
        (letrec* ((g$cvt*$8757$RATN9
                    (case-lambda
                      ((g$p*$8837$RATN9 g$n$8838$RATN9 g$ids$8839$RATN9)
                       (if (null? g$p*$8837$RATN9)
                         (values '() g$ids$8839$RATN9)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$8757$RATN9
                                (cdr g$p*$8837$RATN9)
                                g$n$8838$RATN9
                                g$ids$8839$RATN9)))
                           (case-lambda
                             ((g$y$8842$RATN9 g$ids$8843$RATN9)
                              ((case-lambda
                                 ((g$ids$8844$RATN9 g$y$8845$RATN9)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$8758$RATN9
                                         (car g$p*$8837$RATN9)
                                         g$n$8838$RATN9
                                         g$ids$8844$RATN9)))
                                    (case-lambda
                                      ((g$x$8848$RATN9 g$ids$8849$RATN9)
                                       ((case-lambda
                                          ((g$ids$8850$RATN9 g$x$8851$RATN9)
                                           (values
                                             (cons
                                               g$x$8851$RATN9
                                               g$y$8845$RATN9)
                                             g$ids$8850$RATN9)))
                                        g$ids$8849$RATN9
                                        g$x$8848$RATN9))))))
                               g$ids$8843$RATN9
                               g$y$8842$RATN9))))))))
                  (g$cvt$8758$RATN9
                    (case-lambda
                      ((g$p$8759$RATN9 g$n$8760$RATN9 g$ids$8761$RATN9)
                       ((case-lambda
                          ((g$t$8762$RATN9)
                           ((case-lambda
                              ((g$ls/false$8763$RATN9)
                               (if (if g$ls/false$8763$RATN9
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$8764$RATN9)
                                            (g$id?$6937$RATN9 g$id$8764$RATN9)))
                                         g$ls/false$8763$RATN9))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$8765$RATN9)
                                      (if (g$bound-id-member?$6944$RATN9
                                            g$p$8759$RATN9
                                            g$keys$8756$RATN9)
                                        (values
                                          (vector 'free-id g$p$8759$RATN9)
                                          g$ids$8761$RATN9)
                                        (if (g$free-id=?$6941$RATN9
                                              g$p$8759$RATN9
                                              (g$scheme-stx$7158$RATN9 '_))
                                          (values '_ g$ids$8761$RATN9)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$8759$RATN9
                                                g$n$8760$RATN9)
                                              g$ids$8761$RATN9))))))
                                   g$ls/false$8763$RATN9)
                                 ((case-lambda
                                    ((g$t$8766$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$8767$RATN9)
                                         (if (if g$ls/false$8767$RATN9
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8768$RATN9
                                                        g$dots$8769$RATN9)
                                                      (g$ellipsis?$7216$RATN9
                                                        g$dots$8769$RATN9)))
                                                   g$ls/false$8767$RATN9))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$8770$RATN9
                                                  g$dots$8771$RATN9)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$8758$RATN9
                                                       g$p$8770$RATN9
                                                       (+ g$n$8760$RATN9 '1)
                                                       g$ids$8761$RATN9)))
                                                  (case-lambda
                                                    ((g$p$8774$RATN9
                                                       g$ids$8775$RATN9)
                                                     ((case-lambda
                                                        ((g$ids$8776$RATN9
                                                           g$p$8777$RATN9)
                                                         (values
                                                           (if (eq? g$p$8777$RATN9
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$8777$RATN9))
                                                           g$ids$8776$RATN9)))
                                                      g$ids$8775$RATN9
                                                      g$p$8774$RATN9))))))
                                             g$ls/false$8767$RATN9)
                                           ((case-lambda
                                              ((g$t$8778$RATN9)
                                               ((case-lambda
                                                  ((g$ls/false$8779$RATN9)
                                                   (if (if g$ls/false$8779$RATN9
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$8780$RATN9
                                                                  g$dots$8781$RATN9
                                                                  g$ys$8782$RATN9
                                                                  g$z$8783$RATN9)
                                                                (g$ellipsis?$7216$RATN9
                                                                  g$dots$8781$RATN9)))
                                                             g$ls/false$8779$RATN9))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$8784$RATN9
                                                            g$dots$8785$RATN9
                                                            g$ys$8786$RATN9
                                                            g$z$8787$RATN9)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$8758$RATN9
                                                                 g$z$8787$RATN9
                                                                 g$n$8760$RATN9
                                                                 g$ids$8761$RATN9)))
                                                            (case-lambda
                                                              ((g$z$8790$RATN9
                                                                 g$ids$8791$RATN9)
                                                               ((case-lambda
                                                                  ((g$ids$8792$RATN9
                                                                     g$z$8793$RATN9)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$8757$RATN9
                                                                          g$ys$8786$RATN9
                                                                          g$n$8760$RATN9
                                                                          g$ids$8792$RATN9)))
                                                                     (case-lambda
                                                                       ((g$ys$8796$RATN9
                                                                          g$ids$8797$RATN9)
                                                                        ((case-lambda
                                                                           ((g$ids$8798$RATN9
                                                                              g$ys$8799$RATN9)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$8758$RATN9
                                                                                   g$x$8784$RATN9
                                                                                   (+ g$n$8760$RATN9
                                                                                      '1)
                                                                                   g$ids$8798$RATN9)))
                                                                              (case-lambda
                                                                                ((g$x$8802$RATN9
                                                                                   g$ids$8803$RATN9)
                                                                                 ((case-lambda
                                                                                    ((g$ids$8804$RATN9
                                                                                       g$x$8805$RATN9)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$8805$RATN9
                                                                                         (reverse
                                                                                           g$ys$8799$RATN9)
                                                                                         g$z$8793$RATN9)
                                                                                       g$ids$8804$RATN9)))
                                                                                  g$ids$8803$RATN9
                                                                                  g$x$8802$RATN9))))))
                                                                         g$ids$8797$RATN9
                                                                         g$ys$8796$RATN9))))))
                                                                g$ids$8791$RATN9
                                                                g$z$8790$RATN9))))))
                                                       g$ls/false$8779$RATN9)
                                                     ((case-lambda
                                                        ((g$t$8806$RATN9)
                                                         ((case-lambda
                                                            ((g$ls/false$8807$RATN9)
                                                             (if g$ls/false$8807$RATN9
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$8808$RATN9
                                                                      g$y$8809$RATN9)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$8758$RATN9
                                                                           g$y$8809$RATN9
                                                                           g$n$8760$RATN9
                                                                           g$ids$8761$RATN9)))
                                                                      (case-lambda
                                                                        ((g$y$8812$RATN9
                                                                           g$ids$8813$RATN9)
                                                                         ((case-lambda
                                                                            ((g$ids$8814$RATN9
                                                                               g$y$8815$RATN9)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$8758$RATN9
                                                                                    g$x$8808$RATN9
                                                                                    g$n$8760$RATN9
                                                                                    g$ids$8814$RATN9)))
                                                                               (case-lambda
                                                                                 ((g$x$8818$RATN9
                                                                                    g$ids$8819$RATN9)
                                                                                  ((case-lambda
                                                                                     ((g$ids$8820$RATN9
                                                                                        g$x$8821$RATN9)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$8821$RATN9
                                                                                          g$y$8815$RATN9)
                                                                                        g$ids$8820$RATN9)))
                                                                                   g$ids$8819$RATN9
                                                                                   g$x$8818$RATN9))))))
                                                                          g$ids$8813$RATN9
                                                                          g$y$8812$RATN9))))))
                                                                 g$ls/false$8807$RATN9)
                                                               ((case-lambda
                                                                  ((g$t$8822$RATN9)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8823$RATN9)
                                                                       (if g$ls/false$8823$RATN9
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$8761$RATN9)))
                                                                           g$ls/false$8823$RATN9)
                                                                         ((case-lambda
                                                                            ((g$t$8824$RATN9)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8825$RATN9)
                                                                                 (if (if g$ls/false$8825$RATN9
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$8826$RATN9)
                                                                                              (not (g$stx?$6909$RATN9
                                                                                                     g$p$8826$RATN9))))
                                                                                           g$ls/false$8825$RATN9))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$8827$RATN9)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$8758$RATN9
                                                                                               g$p$8827$RATN9
                                                                                               g$n$8760$RATN9
                                                                                               g$ids$8761$RATN9)))
                                                                                          (case-lambda
                                                                                            ((g$p$8830$RATN9
                                                                                               g$ids$8831$RATN9)
                                                                                             ((case-lambda
                                                                                                ((g$ids$8832$RATN9
                                                                                                   g$p$8833$RATN9)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$8833$RATN9)
                                                                                                   g$ids$8832$RATN9)))
                                                                                              g$ids$8831$RATN9
                                                                                              g$p$8830$RATN9))))))
                                                                                     g$ls/false$8825$RATN9)
                                                                                   ((case-lambda
                                                                                      ((g$t$8834$RATN9)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8835$RATN9)
                                                                                           (if g$ls/false$8835$RATN9
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$8836$RATN9)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$6948$RATN9
                                                                                                        g$datum$8836$RATN9))
                                                                                                    g$ids$8761$RATN9)))
                                                                                               g$ls/false$8835$RATN9)
                                                                                             (g$syntax-violation$7321$RATN9
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8834$RATN9))))
                                                                                        (g$syntax-dispatch$7215$RATN9
                                                                                          g$t$8834$RATN9
                                                                                          'any))))
                                                                                    g$t$8824$RATN9))))
                                                                              (g$syntax-dispatch$7215$RATN9
                                                                                g$t$8824$RATN9
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$8822$RATN9))))
                                                                    (g$syntax-dispatch$7215$RATN9
                                                                      g$t$8822$RATN9
                                                                      '()))))
                                                                g$t$8806$RATN9))))
                                                          (g$syntax-dispatch$7215$RATN9
                                                            g$t$8806$RATN9
                                                            '(any . any)))))
                                                      g$t$8778$RATN9))))
                                                (g$syntax-dispatch$7215$RATN9
                                                  g$t$8778$RATN9
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$8766$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$8766$RATN9
                                        '(any any)))))
                                  g$t$8762$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$8762$RATN9
                              'any))))
                        g$p$8759$RATN9)))))
          (g$cvt$8758$RATN9 g$pattern$8755$RATN9 '0 '())))))
   (g$syntax-dispatch$7215$RATN9
     g$syntax-dispatch$10665$RATN9
     (case-lambda
       ((g$e$8852$RATN9 g$p$8853$RATN9)
        (letrec* ((g$stx^$8854$RATN9
                    (case-lambda
                      ((g$e$8962$RATN9
                         g$m*$8963$RATN9
                         g$s*$8964$RATN9
                         g$ae*$8965$RATN9)
                       (if (if (null? g$m*$8963$RATN9)
                             (if (null? g$s*$8964$RATN9)
                               (begin '#f (null? g$ae*$8965$RATN9))
                               '#f)
                             '#f)
                         g$e$8962$RATN9
                         (g$mkstx$6925$RATN9
                           g$e$8962$RATN9
                           g$m*$8963$RATN9
                           g$s*$8964$RATN9
                           g$ae*$8965$RATN9)))))
                  (g$match-each$8855$RATN9
                    (case-lambda
                      ((g$e$8946$RATN9
                         g$p$8947$RATN9
                         g$m*$8948$RATN9
                         g$s*$8949$RATN9
                         g$ae*$8950$RATN9)
                       (if (pair? g$e$8946$RATN9)
                         ((case-lambda
                            ((g$first$8951$RATN9)
                             (if g$first$8951$RATN9
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$8952$RATN9)
                                     (if g$rest$8952$RATN9
                                       (begin
                                         '#f
                                         (cons
                                           g$first$8951$RATN9
                                           g$rest$8952$RATN9))
                                       '#f)))
                                  (g$match-each$8855$RATN9
                                    (cdr g$e$8946$RATN9)
                                    g$p$8947$RATN9
                                    g$m*$8948$RATN9
                                    g$s*$8949$RATN9
                                    g$ae*$8950$RATN9)))
                               '#f)))
                          (g$match$8861$RATN9
                            (car g$e$8946$RATN9)
                            g$p$8947$RATN9
                            g$m*$8948$RATN9
                            g$s*$8949$RATN9
                            g$ae*$8950$RATN9
                            '()))
                         (if (null? g$e$8946$RATN9)
                           '()
                           (if (g$stx?$6909$RATN9 g$e$8946$RATN9)
                             (if (not (g$top-marked?$6880$RATN9
                                        g$m*$8948$RATN9))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$6924$RATN9
                                        g$m*$8948$RATN9
                                        g$s*$8949$RATN9
                                        g$ae*$8950$RATN9
                                        g$e$8946$RATN9)))
                                   (case-lambda
                                     ((g$m*$8956$RATN9
                                        g$s*$8957$RATN9
                                        g$ae*$8958$RATN9)
                                      ((case-lambda
                                         ((g$ae*$8959$RATN9
                                            g$s*$8960$RATN9
                                            g$m*$8961$RATN9)
                                          (g$match-each$8855$RATN9
                                            (g$stx-expr$6911$RATN9
                                              g$e$8946$RATN9)
                                            g$p$8947$RATN9
                                            g$m*$8961$RATN9
                                            g$s*$8960$RATN9
                                            g$ae*$8959$RATN9)))
                                       g$ae*$8958$RATN9
                                       g$s*$8957$RATN9
                                       g$m*$8956$RATN9)))))
                               '#f)
                             (if (annotation? g$e$8946$RATN9)
                               (g$match-each$8855$RATN9
                                 (annotation-expression g$e$8946$RATN9)
                                 g$p$8947$RATN9
                                 g$m*$8948$RATN9
                                 g$s*$8949$RATN9
                                 g$ae*$8950$RATN9)
                               '#f)))))))
                  (g$match-each+$8856$RATN9
                    (case-lambda
                      ((g$e$8914$RATN9
                         g$x-pat$8915$RATN9
                         g$y-pat$8916$RATN9
                         g$z-pat$8917$RATN9
                         g$m*$8918$RATN9
                         g$s*$8919$RATN9
                         g$ae*$8920$RATN9
                         g$r$8921$RATN9)
                       ((letrec ((g$f$8922$RATN9
                                   (case-lambda
                                     ((g$e$8923$RATN9
                                        g$m*$8924$RATN9
                                        g$s*$8925$RATN9
                                        g$ae*$8926$RATN9)
                                      (if (pair? g$e$8923$RATN9)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$8922$RATN9
                                               (cdr g$e$8923$RATN9)
                                               g$m*$8924$RATN9
                                               g$s*$8925$RATN9
                                               g$ae*$8926$RATN9)))
                                          (case-lambda
                                            ((g$xr*$8930$RATN9
                                               g$y-pat$8931$RATN9
                                               g$r$8932$RATN9)
                                             ((case-lambda
                                                ((g$r$8933$RATN9
                                                   g$y-pat$8934$RATN9
                                                   g$xr*$8935$RATN9)
                                                 (if g$r$8933$RATN9
                                                   (if (null?
                                                         g$y-pat$8934$RATN9)
                                                     ((case-lambda
                                                        ((g$xr$8936$RATN9)
                                                         (if g$xr$8936$RATN9
                                                           (values
                                                             (cons
                                                               g$xr$8936$RATN9
                                                               g$xr*$8935$RATN9)
                                                             g$y-pat$8934$RATN9
                                                             g$r$8933$RATN9)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$8861$RATN9
                                                        (car g$e$8923$RATN9)
                                                        g$x-pat$8915$RATN9
                                                        g$m*$8924$RATN9
                                                        g$s*$8925$RATN9
                                                        g$ae*$8926$RATN9
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$8934$RATN9)
                                                       (g$match$8861$RATN9
                                                         (car g$e$8923$RATN9)
                                                         (car g$y-pat$8934$RATN9)
                                                         g$m*$8924$RATN9
                                                         g$s*$8925$RATN9
                                                         g$ae*$8926$RATN9
                                                         g$r$8933$RATN9)))
                                                   (values '#f '#f '#f))))
                                              g$r$8932$RATN9
                                              g$y-pat$8931$RATN9
                                              g$xr*$8930$RATN9))))
                                        (if (g$stx?$6909$RATN9 g$e$8923$RATN9)
                                          (if (g$top-marked?$6880$RATN9
                                                g$m*$8924$RATN9)
                                            (values
                                              '()
                                              g$y-pat$8916$RATN9
                                              (g$match$8861$RATN9
                                                g$e$8923$RATN9
                                                g$z-pat$8917$RATN9
                                                g$m*$8924$RATN9
                                                g$s*$8925$RATN9
                                                g$ae*$8926$RATN9
                                                g$r$8921$RATN9))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$6924$RATN9
                                                   g$m*$8924$RATN9
                                                   g$s*$8925$RATN9
                                                   g$ae*$8926$RATN9
                                                   g$e$8923$RATN9)))
                                              (case-lambda
                                                ((g$m*$8940$RATN9
                                                   g$s*$8941$RATN9
                                                   g$ae*$8942$RATN9)
                                                 ((case-lambda
                                                    ((g$ae*$8943$RATN9
                                                       g$s*$8944$RATN9
                                                       g$m*$8945$RATN9)
                                                     (g$f$8922$RATN9
                                                       (g$stx-expr$6911$RATN9
                                                         g$e$8923$RATN9)
                                                       g$m*$8945$RATN9
                                                       g$s*$8944$RATN9
                                                       g$ae*$8943$RATN9)))
                                                  g$ae*$8942$RATN9
                                                  g$s*$8941$RATN9
                                                  g$m*$8940$RATN9)))))
                                          (if (annotation? g$e$8923$RATN9)
                                            (g$f$8922$RATN9
                                              (annotation-expression
                                                g$e$8923$RATN9)
                                              g$m*$8924$RATN9
                                              g$s*$8925$RATN9
                                              g$ae*$8926$RATN9)
                                            (values
                                              '()
                                              g$y-pat$8916$RATN9
                                              (g$match$8861$RATN9
                                                g$e$8923$RATN9
                                                g$z-pat$8917$RATN9
                                                g$m*$8924$RATN9
                                                g$s*$8925$RATN9
                                                g$ae*$8926$RATN9
                                                g$r$8921$RATN9)))))))))
                          g$f$8922$RATN9)
                        g$e$8914$RATN9
                        g$m*$8918$RATN9
                        g$s*$8919$RATN9
                        g$ae*$8920$RATN9))))
                  (g$match-each-any$8857$RATN9
                    (case-lambda
                      ((g$e$8900$RATN9
                         g$m*$8901$RATN9
                         g$s*$8902$RATN9
                         g$ae*$8903$RATN9)
                       (if (pair? g$e$8900$RATN9)
                         ((case-lambda
                            ((g$l$8904$RATN9)
                             (if g$l$8904$RATN9
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$8854$RATN9
                                     (car g$e$8900$RATN9)
                                     g$m*$8901$RATN9
                                     g$s*$8902$RATN9
                                     g$ae*$8903$RATN9)
                                   g$l$8904$RATN9))
                               '#f)))
                          (g$match-each-any$8857$RATN9
                            (cdr g$e$8900$RATN9)
                            g$m*$8901$RATN9
                            g$s*$8902$RATN9
                            g$ae*$8903$RATN9))
                         (if (null? g$e$8900$RATN9)
                           '()
                           (if (g$stx?$6909$RATN9 g$e$8900$RATN9)
                             (if (not (g$top-marked?$6880$RATN9
                                        g$m*$8901$RATN9))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$6924$RATN9
                                        g$m*$8901$RATN9
                                        g$s*$8902$RATN9
                                        g$ae*$8903$RATN9
                                        g$e$8900$RATN9)))
                                   (case-lambda
                                     ((g$m*$8908$RATN9
                                        g$s*$8909$RATN9
                                        g$ae*$8910$RATN9)
                                      ((case-lambda
                                         ((g$ae*$8911$RATN9
                                            g$s*$8912$RATN9
                                            g$m*$8913$RATN9)
                                          (g$match-each-any$8857$RATN9
                                            (g$stx-expr$6911$RATN9
                                              g$e$8900$RATN9)
                                            g$m*$8913$RATN9
                                            g$s*$8912$RATN9
                                            g$ae*$8911$RATN9)))
                                       g$ae*$8910$RATN9
                                       g$s*$8909$RATN9
                                       g$m*$8908$RATN9)))))
                               '#f)
                             (if (annotation? g$e$8900$RATN9)
                               (g$match-each-any$8857$RATN9
                                 (annotation-expression g$e$8900$RATN9)
                                 g$m*$8901$RATN9
                                 g$s*$8902$RATN9
                                 g$ae*$8903$RATN9)
                               '#f)))))))
                  (g$match-empty$8858$RATN9
                    (case-lambda
                      ((g$p$8897$RATN9 g$r$8898$RATN9)
                       (if (null? g$p$8897$RATN9)
                         g$r$8898$RATN9
                         (if (eq? g$p$8897$RATN9 '_)
                           g$r$8898$RATN9
                           (if (eq? g$p$8897$RATN9 'any)
                             (cons '() g$r$8898$RATN9)
                             (if (pair? g$p$8897$RATN9)
                               (g$match-empty$8858$RATN9
                                 (car g$p$8897$RATN9)
                                 (g$match-empty$8858$RATN9
                                   (cdr g$p$8897$RATN9)
                                   g$r$8898$RATN9))
                               (if (eq? g$p$8897$RATN9 'each-any)
                                 (cons '() g$r$8898$RATN9)
                                 ((case-lambda
                                    ((g$t$8899$RATN9)
                                     (if (eqv? g$t$8899$RATN9 'each)
                                       (g$match-empty$8858$RATN9
                                         (vector-ref g$p$8897$RATN9 '1)
                                         g$r$8898$RATN9)
                                       (if (eqv? g$t$8899$RATN9 'each+)
                                         (g$match-empty$8858$RATN9
                                           (vector-ref g$p$8897$RATN9 '1)
                                           (g$match-empty$8858$RATN9
                                             (reverse
                                               (vector-ref g$p$8897$RATN9 '2))
                                             (g$match-empty$8858$RATN9
                                               (vector-ref g$p$8897$RATN9 '3)
                                               g$r$8898$RATN9)))
                                         (if (memv
                                               g$t$8899$RATN9
                                               '(free-id atom))
                                           g$r$8898$RATN9
                                           (if (memv
                                                 g$t$8899$RATN9
                                                 '(scheme-id atom))
                                             g$r$8898$RATN9
                                             (if (eqv? g$t$8899$RATN9 'vector)
                                               (g$match-empty$8858$RATN9
                                                 (vector-ref g$p$8897$RATN9 '1)
                                                 g$r$8898$RATN9)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$8897$RATN9))))))))
                                  (vector-ref g$p$8897$RATN9 '0))))))))))
                  (g$combine$8859$RATN9
                    (case-lambda
                      ((g$r*$8895$RATN9 g$r$8896$RATN9)
                       (if (null? (car g$r*$8895$RATN9))
                         g$r$8896$RATN9
                         (cons
                           (map car g$r*$8895$RATN9)
                           (g$combine$8859$RATN9
                             (map cdr g$r*$8895$RATN9)
                             g$r$8896$RATN9))))))
                  (g$match*$8860$RATN9
                    (case-lambda
                      ((g$e$8877$RATN9
                         g$p$8878$RATN9
                         g$m*$8879$RATN9
                         g$s*$8880$RATN9
                         g$ae*$8881$RATN9
                         g$r$8882$RATN9)
                       (if (null? g$p$8878$RATN9)
                         (if (null? g$e$8877$RATN9)
                           (begin '#f g$r$8882$RATN9)
                           '#f)
                         (if (pair? g$p$8878$RATN9)
                           (if (pair? g$e$8877$RATN9)
                             (begin
                               '#f
                               (g$match$8861$RATN9
                                 (car g$e$8877$RATN9)
                                 (car g$p$8878$RATN9)
                                 g$m*$8879$RATN9
                                 g$s*$8880$RATN9
                                 g$ae*$8881$RATN9
                                 (g$match$8861$RATN9
                                   (cdr g$e$8877$RATN9)
                                   (cdr g$p$8878$RATN9)
                                   g$m*$8879$RATN9
                                   g$s*$8880$RATN9
                                   g$ae*$8881$RATN9
                                   g$r$8882$RATN9)))
                             '#f)
                           (if (eq? g$p$8878$RATN9 'each-any)
                             ((case-lambda
                                ((g$l$8883$RATN9)
                                 (if g$l$8883$RATN9
                                   (begin
                                     '#f
                                     (cons g$l$8883$RATN9 g$r$8882$RATN9))
                                   '#f)))
                              (g$match-each-any$8857$RATN9
                                g$e$8877$RATN9
                                g$m*$8879$RATN9
                                g$s*$8880$RATN9
                                g$ae*$8881$RATN9))
                             ((case-lambda
                                ((g$t$8884$RATN9)
                                 (if (eqv? g$t$8884$RATN9 'each)
                                   (if (null? g$e$8877$RATN9)
                                     (g$match-empty$8858$RATN9
                                       (vector-ref g$p$8878$RATN9 '1)
                                       g$r$8882$RATN9)
                                     ((case-lambda
                                        ((g$r*$8894$RATN9)
                                         (if g$r*$8894$RATN9
                                           (begin
                                             '#f
                                             (g$combine$8859$RATN9
                                               g$r*$8894$RATN9
                                               g$r$8882$RATN9))
                                           '#f)))
                                      (g$match-each$8855$RATN9
                                        g$e$8877$RATN9
                                        (vector-ref g$p$8878$RATN9 '1)
                                        g$m*$8879$RATN9
                                        g$s*$8880$RATN9
                                        g$ae*$8881$RATN9)))
                                   (if (eqv? g$t$8884$RATN9 'free-id)
                                     (if (symbol? g$e$8877$RATN9)
                                       (if (g$top-marked?$6880$RATN9
                                             g$m*$8879$RATN9)
                                         (if (g$free-id=?$6941$RATN9
                                               (g$stx^$8854$RATN9
                                                 g$e$8877$RATN9
                                                 g$m*$8879$RATN9
                                                 g$s*$8880$RATN9
                                                 g$ae*$8881$RATN9)
                                               (vector-ref g$p$8878$RATN9 '1))
                                           (begin '#f g$r$8882$RATN9)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (eqv? g$t$8884$RATN9 'scheme-id)
                                       (if (symbol? g$e$8877$RATN9)
                                         (if (g$top-marked?$6880$RATN9
                                               g$m*$8879$RATN9)
                                           (if (g$free-id=?$6941$RATN9
                                                 (g$stx^$8854$RATN9
                                                   g$e$8877$RATN9
                                                   g$m*$8879$RATN9
                                                   g$s*$8880$RATN9
                                                   g$ae*$8881$RATN9)
                                                 (g$scheme-stx$7158$RATN9
                                                   (vector-ref
                                                     g$p$8878$RATN9
                                                     '1)))
                                             (begin '#f g$r$8882$RATN9)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (eqv? g$t$8884$RATN9 'each+)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$8856$RATN9
                                                g$e$8877$RATN9
                                                (vector-ref g$p$8878$RATN9 '1)
                                                (vector-ref g$p$8878$RATN9 '2)
                                                (vector-ref g$p$8878$RATN9 '3)
                                                g$m*$8879$RATN9
                                                g$s*$8880$RATN9
                                                g$ae*$8881$RATN9
                                                g$r$8882$RATN9)))
                                           (case-lambda
                                             ((g$xr*$8888$RATN9
                                                g$y-pat$8889$RATN9
                                                g$r$8890$RATN9)
                                              ((case-lambda
                                                 ((g$r$8891$RATN9
                                                    g$y-pat$8892$RATN9
                                                    g$xr*$8893$RATN9)
                                                  (if g$r$8891$RATN9
                                                    (if (null?
                                                          g$y-pat$8892$RATN9)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$8893$RATN9)
                                                          (g$match-empty$8858$RATN9
                                                            (vector-ref
                                                              g$p$8878$RATN9
                                                              '1)
                                                            g$r$8891$RATN9)
                                                          (g$combine$8859$RATN9
                                                            g$xr*$8893$RATN9
                                                            g$r$8891$RATN9)))
                                                      '#f)
                                                    '#f)))
                                               g$r$8890$RATN9
                                               g$y-pat$8889$RATN9
                                               g$xr*$8888$RATN9))))
                                         (if (eqv? g$t$8884$RATN9 'atom)
                                           (if (equal?
                                                 (vector-ref g$p$8878$RATN9 '1)
                                                 (g$strip$6947$RATN9
                                                   g$e$8877$RATN9
                                                   g$m*$8879$RATN9))
                                             (begin '#f g$r$8882$RATN9)
                                             '#f)
                                           (if (eqv? g$t$8884$RATN9 'vector)
                                             (if (vector? g$e$8877$RATN9)
                                               (begin
                                                 '#f
                                                 (g$match$8861$RATN9
                                                   (vector->list g$e$8877$RATN9)
                                                   (vector-ref
                                                     g$p$8878$RATN9
                                                     '1)
                                                   g$m*$8879$RATN9
                                                   g$s*$8880$RATN9
                                                   g$ae*$8881$RATN9
                                                   g$r$8882$RATN9))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$8878$RATN9)))))))))
                              (vector-ref g$p$8878$RATN9 '0))))))))
                  (g$match$8861$RATN9
                    (case-lambda
                      ((g$e$8862$RATN9
                         g$p$8863$RATN9
                         g$m*$8864$RATN9
                         g$s*$8865$RATN9
                         g$ae*$8866$RATN9
                         g$r$8867$RATN9)
                       (if (not g$r$8867$RATN9)
                         '#f
                         (if (eq? g$p$8863$RATN9 '_)
                           g$r$8867$RATN9
                           (if (eq? g$p$8863$RATN9 'any)
                             (cons
                               (g$stx^$8854$RATN9
                                 g$e$8862$RATN9
                                 g$m*$8864$RATN9
                                 g$s*$8865$RATN9
                                 g$ae*$8866$RATN9)
                               g$r$8867$RATN9)
                             (if (g$stx?$6909$RATN9 g$e$8862$RATN9)
                               (if (not (g$top-marked?$6880$RATN9
                                          g$m*$8864$RATN9))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$6924$RATN9
                                          g$m*$8864$RATN9
                                          g$s*$8865$RATN9
                                          g$ae*$8866$RATN9
                                          g$e$8862$RATN9)))
                                     (case-lambda
                                       ((g$m*$8871$RATN9
                                          g$s*$8872$RATN9
                                          g$ae*$8873$RATN9)
                                        ((case-lambda
                                           ((g$ae*$8874$RATN9
                                              g$s*$8875$RATN9
                                              g$m*$8876$RATN9)
                                            (g$match$8861$RATN9
                                              (g$stx-expr$6911$RATN9
                                                g$e$8862$RATN9)
                                              g$p$8863$RATN9
                                              g$m*$8876$RATN9
                                              g$s*$8875$RATN9
                                              g$ae*$8874$RATN9
                                              g$r$8867$RATN9)))
                                         g$ae*$8873$RATN9
                                         g$s*$8872$RATN9
                                         g$m*$8871$RATN9)))))
                                 '#f)
                               (if (annotation? g$e$8862$RATN9)
                                 (g$match$8861$RATN9
                                   (annotation-expression g$e$8862$RATN9)
                                   g$p$8863$RATN9
                                   g$m*$8864$RATN9
                                   g$s*$8865$RATN9
                                   g$ae*$8866$RATN9
                                   g$r$8867$RATN9)
                                 (g$match*$8860$RATN9
                                   g$e$8862$RATN9
                                   g$p$8863$RATN9
                                   g$m*$8864$RATN9
                                   g$s*$8865$RATN9
                                   g$ae*$8866$RATN9
                                   g$r$8867$RATN9))))))))))
          (g$match$8861$RATN9 g$e$8852$RATN9 g$p$8853$RATN9 '() '() '() '())))))
   (g$ellipsis?$7216$RATN9
     g$ellipsis?$10666$RATN9
     (case-lambda
       ((g$x$8966$RATN9)
        (if (g$id?$6937$RATN9 g$x$8966$RATN9)
          (begin
            '#f
            (g$free-id=?$6941$RATN9
              g$x$8966$RATN9
              (g$scheme-stx$7158$RATN9 '...)))
          '#f))))
   (g$underscore?$7217$RATN9
     g$underscore?$10667$RATN9
     (case-lambda
       ((g$x$8967$RATN9)
        (if (g$id?$6937$RATN9 g$x$8967$RATN9)
          (begin
            '#f
            (g$free-id=?$6941$RATN9
              g$x$8967$RATN9
              (g$scheme-stx$7158$RATN9 '_)))
          '#f))))
   (g$verify-literals$7218$RATN9
     g$verify-literals$10668$RATN9
     (case-lambda
       ((g$lits$8968$RATN9 g$expr$8969$RATN9)
        (for-each
          (case-lambda
            ((g$x$8970$RATN9)
             (if ((case-lambda
                    ((g$t$8971$RATN9)
                     (if g$t$8971$RATN9
                       g$t$8971$RATN9
                       ((case-lambda
                          ((g$t$8972$RATN9)
                           (if g$t$8972$RATN9
                             g$t$8972$RATN9
                             (begin
                               '#f
                               (g$underscore?$7217$RATN9 g$x$8970$RATN9)))))
                        (g$ellipsis?$7216$RATN9 g$x$8970$RATN9)))))
                  (not (g$id?$6937$RATN9 g$x$8970$RATN9)))
               (g$syntax-violation$7321$RATN9
                 '#f
                 '"invalid literal"
                 g$expr$8969$RATN9
                 g$x$8970$RATN9)
               (void))))
          g$lits$8968$RATN9))))
   (g$syntax-case-transformer$7219$RATN9
     g$syntax-case-transformer$10669$RATN9
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$8973$RATN9
                     (case-lambda
                       ((g$pvars$9030$RATN9
                          g$expr$9031$RATN9
                          g$y$9032$RATN9
                          g$r$9033$RATN9
                          g$mr$9034$RATN9)
                        ((case-lambda
                           ((g$ids$9035$RATN9 g$levels$9036$RATN9)
                            ((case-lambda
                               ((g$labels$9037$RATN9 g$new-vars$9038$RATN9)
                                ((case-lambda
                                   ((g$body$9039$RATN9)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$6868$RATN9
                                        '#f
                                        g$new-vars$9038$RATN9
                                        g$body$9039$RATN9)
                                      g$y$9032$RATN9)))
                                 (g$chi-expr$7233$RATN9
                                   (g$add-subst$6927$RATN9
                                     (g$make-full-rib$6905$RATN9
                                       g$ids$9035$RATN9
                                       g$labels$9037$RATN9)
                                     g$expr$9031$RATN9)
                                   (append
                                     (map (case-lambda
                                            ((g$label$9040$RATN9
                                               g$var$9041$RATN9
                                               g$level$9042$RATN9)
                                             (cons
                                               g$label$9040$RATN9
                                               (g$make-binding$6953$RATN9
                                                 'syntax
                                                 (cons
                                                   g$var$9041$RATN9
                                                   g$level$9042$RATN9)))))
                                          g$labels$9037$RATN9
                                          g$new-vars$9038$RATN9
                                          (map cdr g$pvars$9030$RATN9))
                                     g$r$9033$RATN9)
                                   g$mr$9034$RATN9))))
                             (map g$gen-label$6883$RATN9 g$ids$9035$RATN9)
                             (map g$gen-lexical$6881$RATN9 g$ids$9035$RATN9))))
                         (map car g$pvars$9030$RATN9)
                         (map cdr g$pvars$9030$RATN9)))))
                   (g$invalid-ids-error$8974$RATN9
                     (case-lambda
                       ((g$id*$9024$RATN9 g$e$9025$RATN9 g$class$9026$RATN9)
                        ((letrec ((g$find$9027$RATN9
                                    (case-lambda
                                      ((g$id*$9028$RATN9 g$ok*$9029$RATN9)
                                       (if (null? g$id*$9028$RATN9)
                                         (g$syntax-violation$7321$RATN9
                                           '#f
                                           '"invalid syntax"
                                           g$e$9025$RATN9)
                                         (if (g$id?$6937$RATN9
                                               (car g$id*$9028$RATN9))
                                           (if (g$bound-id-member?$6944$RATN9
                                                 (car g$id*$9028$RATN9)
                                                 g$ok*$9029$RATN9)
                                             (g$syntax-error$7318$RATN9
                                               (car g$id*$9028$RATN9)
                                               '"duplicate "
                                               g$class$9026$RATN9)
                                             (g$find$9027$RATN9
                                               (cdr g$id*$9028$RATN9)
                                               (cons
                                                 (car g$id*$9028$RATN9)
                                                 g$ok*$9029$RATN9)))
                                           (g$syntax-error$7318$RATN9
                                             (car g$id*$9028$RATN9)
                                             '"invalid "
                                             g$class$9026$RATN9)))))))
                           g$find$9027$RATN9)
                         g$id*$9024$RATN9
                         '()))))
                   (g$gen-clause$8975$RATN9
                     (case-lambda
                       ((g$x$9004$RATN9
                          g$keys$9005$RATN9
                          g$clauses$9006$RATN9
                          g$r$9007$RATN9
                          g$mr$9008$RATN9
                          g$pat$9009$RATN9
                          g$fender$9010$RATN9
                          g$expr$9011$RATN9)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7214$RATN9
                               g$pat$9009$RATN9
                               g$keys$9005$RATN9)))
                          (case-lambda
                            ((g$p$9014$RATN9 g$pvars$9015$RATN9)
                             ((case-lambda
                                ((g$pvars$9016$RATN9 g$p$9017$RATN9)
                                 (if (not (g$distinct-bound-ids?$6943$RATN9
                                            (map car g$pvars$9016$RATN9)))
                                   (g$invalid-ids-error$8974$RATN9
                                     (map car g$pvars$9016$RATN9)
                                     g$pat$9009$RATN9
                                     '"pattern variable")
                                   (if (not (g$for-all$5365$RATN9
                                              (case-lambda
                                                ((g$x$9018$RATN9)
                                                 (not (g$ellipsis?$7216$RATN9
                                                        (car g$x$9018$RATN9)))))
                                              g$pvars$9016$RATN9))
                                     (g$syntax-violation$7321$RATN9
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9009$RATN9)
                                     ((case-lambda
                                        ((g$y$9019$RATN9)
                                         ((case-lambda
                                            ((g$test$9020$RATN9)
                                             ((case-lambda
                                                ((g$conseq$9021$RATN9)
                                                 ((case-lambda
                                                    ((g$altern$9022$RATN9)
                                                     (list
                                                       (g$build-lambda$6868$RATN9
                                                         '#f
                                                         (list g$y$9019$RATN9)
                                                         (list
                                                           'if
                                                           g$test$9020$RATN9
                                                           g$conseq$9021$RATN9
                                                           g$altern$9022$RATN9))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9004$RATN9
                                                         (list
                                                           'quote
                                                           g$p$9017$RATN9)))))
                                                  (g$gen-syntax-case$8976$RATN9
                                                    g$x$9004$RATN9
                                                    g$keys$9005$RATN9
                                                    g$clauses$9006$RATN9
                                                    g$r$9007$RATN9
                                                    g$mr$9008$RATN9))))
                                              (g$build-dispatch-call$8973$RATN9
                                                g$pvars$9016$RATN9
                                                g$expr$9011$RATN9
                                                g$y$9019$RATN9
                                                g$r$9007$RATN9
                                                g$mr$9008$RATN9))))
                                          (if (eq? g$fender$9010$RATN9 '#t)
                                            g$y$9019$RATN9
                                            ((case-lambda
                                               ((g$call$9023$RATN9)
                                                (list
                                                  'if
                                                  g$y$9019$RATN9
                                                  g$call$9023$RATN9
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$8973$RATN9
                                               g$pvars$9016$RATN9
                                               g$fender$9010$RATN9
                                               g$y$9019$RATN9
                                               g$r$9007$RATN9
                                               g$mr$9008$RATN9))))))
                                      (g$gen-lexical$6881$RATN9 'tmp))))))
                              g$pvars$9015$RATN9
                              g$p$9014$RATN9)))))))
                   (g$gen-syntax-case$8976$RATN9
                     (case-lambda
                       ((g$x$8987$RATN9
                          g$keys$8988$RATN9
                          g$clauses$8989$RATN9
                          g$r$8990$RATN9
                          g$mr$8991$RATN9)
                        (if (null? g$clauses$8989$RATN9)
                          (list '(primitive syntax-error) g$x$8987$RATN9)
                          ((case-lambda
                             ((g$t$8992$RATN9)
                              ((case-lambda
                                 ((g$ls/false$8993$RATN9)
                                  (if g$ls/false$8993$RATN9
                                    (apply
                                      (case-lambda
                                        ((g$pat$8994$RATN9 g$expr$8995$RATN9)
                                         (if (if (g$id?$6937$RATN9
                                                   g$pat$8994$RATN9)
                                               (if (not (g$bound-id-member?$6944$RATN9
                                                          g$pat$8994$RATN9
                                                          g$keys$8988$RATN9))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7216$RATN9
                                                          g$pat$8994$RATN9)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$6941$RATN9
                                                 g$pat$8994$RATN9
                                                 (g$scheme-stx$7158$RATN9 '_))
                                             (g$chi-expr$7233$RATN9
                                               g$expr$8995$RATN9
                                               g$r$8990$RATN9
                                               g$mr$8991$RATN9)
                                             ((case-lambda
                                                ((g$lab$8996$RATN9
                                                   g$lex$8997$RATN9)
                                                 ((case-lambda
                                                    ((g$body$8998$RATN9)
                                                     (list
                                                       (g$build-lambda$6868$RATN9
                                                         '#f
                                                         (list g$lex$8997$RATN9)
                                                         g$body$8998$RATN9)
                                                       g$x$8987$RATN9)))
                                                  (g$chi-expr$7233$RATN9
                                                    (g$add-subst$6927$RATN9
                                                      (g$make-full-rib$6905$RATN9
                                                        (list g$pat$8994$RATN9)
                                                        (list g$lab$8996$RATN9))
                                                      g$expr$8995$RATN9)
                                                    (cons
                                                      (cons
                                                        g$lab$8996$RATN9
                                                        (g$make-binding$6953$RATN9
                                                          'syntax
                                                          (cons
                                                            g$lex$8997$RATN9
                                                            '0)))
                                                      g$r$8990$RATN9)
                                                    g$mr$8991$RATN9))))
                                              (g$gen-label$6883$RATN9
                                                g$pat$8994$RATN9)
                                              (g$gen-lexical$6881$RATN9
                                                g$pat$8994$RATN9)))
                                           (g$gen-clause$8975$RATN9
                                             g$x$8987$RATN9
                                             g$keys$8988$RATN9
                                             (cdr g$clauses$8989$RATN9)
                                             g$r$8990$RATN9
                                             g$mr$8991$RATN9
                                             g$pat$8994$RATN9
                                             '#t
                                             g$expr$8995$RATN9))))
                                      g$ls/false$8993$RATN9)
                                    ((case-lambda
                                       ((g$t$8999$RATN9)
                                        ((case-lambda
                                           ((g$ls/false$9000$RATN9)
                                            (if g$ls/false$9000$RATN9
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9001$RATN9
                                                     g$fender$9002$RATN9
                                                     g$expr$9003$RATN9)
                                                   (g$gen-clause$8975$RATN9
                                                     g$x$8987$RATN9
                                                     g$keys$8988$RATN9
                                                     (cdr g$clauses$8989$RATN9)
                                                     g$r$8990$RATN9
                                                     g$mr$8991$RATN9
                                                     g$pat$9001$RATN9
                                                     g$fender$9002$RATN9
                                                     g$expr$9003$RATN9)))
                                                g$ls/false$9000$RATN9)
                                              (g$syntax-violation$7321$RATN9
                                                '#f
                                                '"invalid syntax"
                                                g$t$8999$RATN9))))
                                         (g$syntax-dispatch$7215$RATN9
                                           g$t$8999$RATN9
                                           '(any any any)))))
                                     g$t$8992$RATN9))))
                               (g$syntax-dispatch$7215$RATN9
                                 g$t$8992$RATN9
                                 '(any any)))))
                           (car g$clauses$8989$RATN9)))))))
           (case-lambda
             ((g$e$8977$RATN9 g$r$8978$RATN9 g$mr$8979$RATN9)
              ((case-lambda
                 ((g$t$8980$RATN9)
                  ((case-lambda
                     ((g$ls/false$8981$RATN9)
                      (if g$ls/false$8981$RATN9
                        (apply
                          (case-lambda
                            ((g$expr$8982$RATN9
                               g$keys$8983$RATN9
                               g$clauses$8984$RATN9)
                             (begin
                               (g$verify-literals$7218$RATN9
                                 g$keys$8983$RATN9
                                 g$e$8977$RATN9)
                               ((case-lambda
                                  ((g$x$8985$RATN9)
                                   ((case-lambda
                                      ((g$body$8986$RATN9)
                                       (list
                                         (g$build-lambda$6868$RATN9
                                           '#f
                                           (list g$x$8985$RATN9)
                                           g$body$8986$RATN9)
                                         (g$chi-expr$7233$RATN9
                                           g$expr$8982$RATN9
                                           g$r$8978$RATN9
                                           g$mr$8979$RATN9))))
                                    (g$gen-syntax-case$8976$RATN9
                                      g$x$8985$RATN9
                                      g$keys$8983$RATN9
                                      g$clauses$8984$RATN9
                                      g$r$8978$RATN9
                                      g$mr$8979$RATN9))))
                                (g$gen-lexical$6881$RATN9 'tmp)))))
                          g$ls/false$8981$RATN9)
                        (g$syntax-violation$7321$RATN9
                          '#f
                          '"invalid syntax"
                          g$t$8980$RATN9))))
                   (g$syntax-dispatch$7215$RATN9
                     g$t$8980$RATN9
                     '(_ any each-any . each-any)))))
               g$e$8977$RATN9))))))))
   (g$ellipsis-map$7220$RATN9
     g$ellipsis-map$10670$RATN9
     (case-lambda
       ((g$proc$9043$RATN9 g$ls$9044$RATN9 . g$ls*$9045$RATN9)
        (letrec* ((g$who$9046$RATN9 '...))
          (begin
            (if (list? g$ls$9044$RATN9)
              (void)
              (assertion-violation
                g$who$9046$RATN9
                '"not a list"
                g$ls$9044$RATN9))
            (if (null? g$ls*$9045$RATN9)
              (void)
              ((case-lambda
                 ((g$n$9047$RATN9)
                  (for-each
                    (case-lambda
                      ((g$x$9048$RATN9)
                       (begin
                         (if (list? g$x$9048$RATN9)
                           (void)
                           (assertion-violation
                             g$who$9046$RATN9
                             '"not a list"
                             g$x$9048$RATN9))
                         (if (= (length g$x$9048$RATN9) g$n$9047$RATN9)
                           (void)
                           (assertion-violation
                             g$who$9046$RATN9
                             '"length mismatch"
                             g$ls$9044$RATN9
                             g$x$9048$RATN9)))))
                    g$ls*$9045$RATN9)))
               (length g$ls$9044$RATN9)))
            (apply map g$proc$9043$RATN9 g$ls$9044$RATN9 g$ls*$9045$RATN9))))))
   (g$syntax-transformer$7221$RATN9
     g$syntax-transformer$10671$RATN9
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9049$RATN9
                     (case-lambda
                       ((g$src$9109$RATN9
                          g$e$9110$RATN9
                          g$r$9111$RATN9
                          g$maps$9112$RATN9
                          g$ellipsis?$9113$RATN9
                          g$vec?$9114$RATN9)
                        ((case-lambda
                           ((g$t$9115$RATN9)
                            ((case-lambda
                               ((g$ls/false$9116$RATN9)
                                (if (if g$ls/false$9116$RATN9
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9117$RATN9)
                                             (g$ellipsis?$9113$RATN9
                                               g$dots$9117$RATN9)))
                                          g$ls/false$9116$RATN9))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9118$RATN9)
                                       (g$syntax-violation$7321$RATN9
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9109$RATN9)))
                                    g$ls/false$9116$RATN9)
                                  ((case-lambda
                                     ((g$t$9119$RATN9)
                                      ((case-lambda
                                         ((g$ls/false$9120$RATN9)
                                          (if (if g$ls/false$9120$RATN9
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9121$RATN9)
                                                       (g$id?$6937$RATN9
                                                         g$id$9121$RATN9)))
                                                    g$ls/false$9120$RATN9))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9122$RATN9)
                                                 ((case-lambda
                                                    ((g$label$9123$RATN9)
                                                     ((case-lambda
                                                        ((g$b$9124$RATN9)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$6954$RATN9
                                                                        g$b$9124$RATN9)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$9127$RATN9)
                                                                        (g$gen-ref$9050$RATN9
                                                                          g$src$9109$RATN9
                                                                          (car g$var.lev$9127$RATN9)
                                                                          (cdr g$var.lev$9127$RATN9)
                                                                          g$maps$9112$RATN9)))
                                                                     (g$binding-value$6955$RATN9
                                                                       g$b$9124$RATN9))))
                                                                 (case-lambda
                                                                   ((g$var$9128$RATN9
                                                                      g$maps$9129$RATN9)
                                                                    ((case-lambda
                                                                       ((g$maps$9130$RATN9
                                                                          g$var$9131$RATN9)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$9131$RATN9)
                                                                          g$maps$9130$RATN9)))
                                                                     g$maps$9129$RATN9
                                                                     g$var$9128$RATN9))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$9110$RATN9)
                                                                 g$maps$9112$RATN9)))))))
                                                      (g$label->binding$6952$RATN9
                                                        g$label$9123$RATN9
                                                        g$r$9111$RATN9))))
                                                  (g$id->label$6950$RATN9
                                                    g$e$9110$RATN9))))
                                              g$ls/false$9120$RATN9)
                                            ((case-lambda
                                               ((g$t$9132$RATN9)
                                                ((case-lambda
                                                   ((g$ls/false$9133$RATN9)
                                                    (if (if g$ls/false$9133$RATN9
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9134$RATN9
                                                                   g$e$9135$RATN9)
                                                                 (g$ellipsis?$9113$RATN9
                                                                   g$dots$9134$RATN9)))
                                                              g$ls/false$9133$RATN9))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9136$RATN9
                                                             g$e$9137$RATN9)
                                                           (if g$vec?$9114$RATN9
                                                             (g$syntax-violation$7321$RATN9
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9109$RATN9)
                                                             (g$gen-syntax$9049$RATN9
                                                               g$src$9109$RATN9
                                                               g$e$9137$RATN9
                                                               g$r$9111$RATN9
                                                               g$maps$9112$RATN9
                                                               (case-lambda
                                                                 ((g$x$9138$RATN9)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9133$RATN9)
                                                      ((case-lambda
                                                         ((g$t$9139$RATN9)
                                                          ((case-lambda
                                                             ((g$ls/false$9140$RATN9)
                                                              (if (if g$ls/false$9140$RATN9
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9141$RATN9
                                                                             g$dots$9142$RATN9
                                                                             g$y$9143$RATN9)
                                                                           (g$ellipsis?$9113$RATN9
                                                                             g$dots$9142$RATN9)))
                                                                        g$ls/false$9140$RATN9))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9144$RATN9
                                                                       g$dots$9145$RATN9
                                                                       g$y$9146$RATN9)
                                                                     ((letrec ((g$f$9147$RATN9
                                                                                 (case-lambda
                                                                                   ((g$y$9148$RATN9
                                                                                      g$k$9149$RATN9)
                                                                                    ((case-lambda
                                                                                       ((g$t$9150$RATN9)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9151$RATN9)
                                                                                            (if g$ls/false$9151$RATN9
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9149$RATN9
                                                                                                     g$maps$9112$RATN9)))
                                                                                                g$ls/false$9151$RATN9)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9152$RATN9)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9153$RATN9)
                                                                                                      (if (if g$ls/false$9153$RATN9
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9154$RATN9
                                                                                                                     g$y$9155$RATN9)
                                                                                                                   (g$ellipsis?$9113$RATN9
                                                                                                                     g$dots$9154$RATN9)))
                                                                                                                g$ls/false$9153$RATN9))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9156$RATN9
                                                                                                               g$y$9157$RATN9)
                                                                                                             (g$f$9147$RATN9
                                                                                                               g$y$9157$RATN9
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9158$RATN9)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9149$RATN9
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9158$RATN9))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9161$RATN9
                                                                                                                         g$maps$9162$RATN9)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9163$RATN9
                                                                                                                             g$x$9164$RATN9)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9163$RATN9))
                                                                                                                             (g$syntax-violation$7321$RATN9
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9109$RATN9)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9052$RATN9
                                                                                                                                 g$x$9164$RATN9
                                                                                                                                 (car g$maps$9163$RATN9))
                                                                                                                               (cdr g$maps$9163$RATN9)))))
                                                                                                                        g$maps$9162$RATN9
                                                                                                                        g$x$9161$RATN9)))))))))
                                                                                                          g$ls/false$9153$RATN9)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9165$RATN9)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9166$RATN9)
                                                                                                                (if g$ls/false$9166$RATN9
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9049$RATN9
                                                                                                                              g$src$9109$RATN9
                                                                                                                              g$y$9148$RATN9
                                                                                                                              g$r$9111$RATN9
                                                                                                                              g$maps$9112$RATN9
                                                                                                                              g$ellipsis?$9113$RATN9
                                                                                                                              g$vec?$9114$RATN9)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9169$RATN9
                                                                                                                              g$maps$9170$RATN9)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9171$RATN9
                                                                                                                                  g$y$9172$RATN9)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9149$RATN9
                                                                                                                                       g$maps$9171$RATN9)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9175$RATN9
                                                                                                                                       g$maps$9176$RATN9)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9177$RATN9
                                                                                                                                           g$x$9178$RATN9)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9051$RATN9
                                                                                                                                             g$x$9178$RATN9
                                                                                                                                             g$y$9172$RATN9)
                                                                                                                                           g$maps$9177$RATN9)))
                                                                                                                                      g$maps$9176$RATN9
                                                                                                                                      g$x$9175$RATN9))))))
                                                                                                                             g$maps$9170$RATN9
                                                                                                                             g$y$9169$RATN9))))))
                                                                                                                    g$ls/false$9166$RATN9)
                                                                                                                  (g$syntax-violation$7321$RATN9
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9165$RATN9))))
                                                                                                             (g$syntax-dispatch$7215$RATN9
                                                                                                               g$t$9165$RATN9
                                                                                                               '_))))
                                                                                                         g$t$9152$RATN9))))
                                                                                                   (g$syntax-dispatch$7215$RATN9
                                                                                                     g$t$9152$RATN9
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9150$RATN9))))
                                                                                         (g$syntax-dispatch$7215$RATN9
                                                                                           g$t$9150$RATN9
                                                                                           '()))))
                                                                                     g$y$9148$RATN9)))))
                                                                        g$f$9147$RATN9)
                                                                      g$y$9146$RATN9
                                                                      (case-lambda
                                                                        ((g$maps$9179$RATN9)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9049$RATN9
                                                                                g$src$9109$RATN9
                                                                                g$x$9144$RATN9
                                                                                g$r$9111$RATN9
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9179$RATN9)
                                                                                g$ellipsis?$9113$RATN9
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9182$RATN9
                                                                                g$maps$9183$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$maps$9184$RATN9
                                                                                    g$x$9185$RATN9)
                                                                                  (if (null?
                                                                                        (car g$maps$9184$RATN9))
                                                                                    (g$syntax-violation$7321$RATN9
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9109$RATN9)
                                                                                    (values
                                                                                      (g$gen-map$9053$RATN9
                                                                                        g$x$9185$RATN9
                                                                                        (car g$maps$9184$RATN9))
                                                                                      (cdr g$maps$9184$RATN9)))))
                                                                               g$maps$9183$RATN9
                                                                               g$x$9182$RATN9)))))))))
                                                                  g$ls/false$9140$RATN9)
                                                                ((case-lambda
                                                                   ((g$t$9186$RATN9)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9187$RATN9)
                                                                        (if g$ls/false$9187$RATN9
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9188$RATN9
                                                                                 g$y$9189$RATN9)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9049$RATN9
                                                                                      g$src$9109$RATN9
                                                                                      g$x$9188$RATN9
                                                                                      g$r$9111$RATN9
                                                                                      g$maps$9112$RATN9
                                                                                      g$ellipsis?$9113$RATN9
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9192$RATN9
                                                                                      g$maps$9193$RATN9)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9194$RATN9
                                                                                          g$xnew$9195$RATN9)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9049$RATN9
                                                                                               g$src$9109$RATN9
                                                                                               g$y$9189$RATN9
                                                                                               g$r$9111$RATN9
                                                                                               g$maps$9194$RATN9
                                                                                               g$ellipsis?$9113$RATN9
                                                                                               g$vec?$9114$RATN9)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9198$RATN9
                                                                                               g$maps$9199$RATN9)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9200$RATN9
                                                                                                   g$ynew$9201$RATN9)
                                                                                                 (values
                                                                                                   (g$gen-cons$9054$RATN9
                                                                                                     g$e$9110$RATN9
                                                                                                     g$x$9188$RATN9
                                                                                                     g$y$9189$RATN9
                                                                                                     g$xnew$9195$RATN9
                                                                                                     g$ynew$9201$RATN9)
                                                                                                   g$maps$9200$RATN9)))
                                                                                              g$maps$9199$RATN9
                                                                                              g$ynew$9198$RATN9))))))
                                                                                     g$maps$9193$RATN9
                                                                                     g$xnew$9192$RATN9))))))
                                                                            g$ls/false$9187$RATN9)
                                                                          ((case-lambda
                                                                             ((g$t$9202$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9203$RATN9)
                                                                                  (if g$ls/false$9203$RATN9
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9204$RATN9)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9049$RATN9
                                                                                                g$src$9109$RATN9
                                                                                                g$ls$9204$RATN9
                                                                                                g$r$9111$RATN9
                                                                                                g$maps$9112$RATN9
                                                                                                g$ellipsis?$9113$RATN9
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9207$RATN9
                                                                                                g$maps$9208$RATN9)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9209$RATN9
                                                                                                    g$lsnew$9210$RATN9)
                                                                                                  (values
                                                                                                    (g$gen-vector$9055$RATN9
                                                                                                      g$e$9110$RATN9
                                                                                                      g$ls$9204$RATN9
                                                                                                      g$lsnew$9210$RATN9)
                                                                                                    g$maps$9209$RATN9)))
                                                                                               g$maps$9208$RATN9
                                                                                               g$lsnew$9207$RATN9))))))
                                                                                      g$ls/false$9203$RATN9)
                                                                                    ((case-lambda
                                                                                       ((g$t$9211$RATN9)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9212$RATN9)
                                                                                            (if g$ls/false$9212$RATN9
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9110$RATN9)
                                                                                                     g$maps$9112$RATN9)))
                                                                                                g$ls/false$9212$RATN9)
                                                                                              (g$syntax-violation$7321$RATN9
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9211$RATN9))))
                                                                                         (g$syntax-dispatch$7215$RATN9
                                                                                           g$t$9211$RATN9
                                                                                           '_))))
                                                                                     g$t$9202$RATN9))))
                                                                               (g$syntax-dispatch$7215$RATN9
                                                                                 g$t$9202$RATN9
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9186$RATN9))))
                                                                     (g$syntax-dispatch$7215$RATN9
                                                                       g$t$9186$RATN9
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9139$RATN9))))
                                                           (g$syntax-dispatch$7215$RATN9
                                                             g$t$9139$RATN9
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9132$RATN9))))
                                                 (g$syntax-dispatch$7215$RATN9
                                                   g$t$9132$RATN9
                                                   '(any any)))))
                                             g$t$9119$RATN9))))
                                       (g$syntax-dispatch$7215$RATN9
                                         g$t$9119$RATN9
                                         'any))))
                                   g$t$9115$RATN9))))
                             (g$syntax-dispatch$7215$RATN9
                               g$t$9115$RATN9
                               'any))))
                         g$e$9110$RATN9))))
                   (g$gen-ref$9050$RATN9
                     (case-lambda
                       ((g$src$9096$RATN9
                          g$var$9097$RATN9
                          g$level$9098$RATN9
                          g$maps$9099$RATN9)
                        (if (= g$level$9098$RATN9 '0)
                          (values g$var$9097$RATN9 g$maps$9099$RATN9)
                          (if (null? g$maps$9099$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9096$RATN9)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9050$RATN9
                                   g$src$9096$RATN9
                                   g$var$9097$RATN9
                                   (- g$level$9098$RATN9 '1)
                                   (cdr g$maps$9099$RATN9))))
                              (case-lambda
                                ((g$outer-var$9102$RATN9
                                   g$outer-maps$9103$RATN9)
                                 ((case-lambda
                                    ((g$outer-maps$9104$RATN9
                                       g$outer-var$9105$RATN9)
                                     ((case-lambda
                                        ((g$t$9106$RATN9)
                                         (if g$t$9106$RATN9
                                           ((case-lambda
                                              ((g$b$9107$RATN9)
                                               (values
                                                 (cdr g$b$9107$RATN9)
                                                 g$maps$9099$RATN9)))
                                            g$t$9106$RATN9)
                                           ((case-lambda
                                              ((g$inner-var$9108$RATN9)
                                               (values
                                                 g$inner-var$9108$RATN9
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9105$RATN9
                                                       g$inner-var$9108$RATN9)
                                                     (car g$maps$9099$RATN9))
                                                   g$outer-maps$9104$RATN9))))
                                            (g$gen-lexical$6881$RATN9 'tmp)))))
                                      (assq
                                        g$outer-var$9105$RATN9
                                        (car g$maps$9099$RATN9)))))
                                  g$outer-maps$9103$RATN9
                                  g$outer-var$9102$RATN9)))))))))
                   (g$gen-append$9051$RATN9
                     (case-lambda
                       ((g$x$9094$RATN9 g$y$9095$RATN9)
                        (if (equal? g$y$9095$RATN9 ''())
                          g$x$9094$RATN9
                          (list 'append g$x$9094$RATN9 g$y$9095$RATN9)))))
                   (g$gen-mappend$9052$RATN9
                     (case-lambda
                       ((g$e$9092$RATN9 g$map-env$9093$RATN9)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9053$RATN9
                            g$e$9092$RATN9
                            g$map-env$9093$RATN9)))))
                   (g$gen-map$9053$RATN9
                     (case-lambda
                       ((g$e$9083$RATN9 g$map-env$9084$RATN9)
                        ((case-lambda
                           ((g$formals$9085$RATN9 g$actuals$9086$RATN9)
                            (if (eq? (car g$e$9083$RATN9) 'ref)
                              (car g$actuals$9086$RATN9)
                              (if (g$for-all$5365$RATN9
                                    (case-lambda
                                      ((g$x$9087$RATN9)
                                       (if (eq? (car g$x$9087$RATN9) 'ref)
                                         (begin
                                           '#f
                                           (memq
                                             (g$cadr$4896$RATN9 g$x$9087$RATN9)
                                             g$formals$9085$RATN9))
                                         '#f)))
                                    (cdr g$e$9083$RATN9))
                                ((case-lambda
                                   ((g$args$9088$RATN9)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9083$RATN9))
                                        g$args$9088$RATN9))))
                                 (map ((case-lambda
                                         ((g$r$9089$RATN9)
                                          (case-lambda
                                            ((g$x$9090$RATN9)
                                             (cdr (assq
                                                    (g$cadr$4896$RATN9
                                                      g$x$9090$RATN9)
                                                    g$r$9089$RATN9))))))
                                       (map cons
                                            g$formals$9085$RATN9
                                            g$actuals$9086$RATN9))
                                      (cdr g$e$9083$RATN9)))
                                (g$cons*$5367$RATN9
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9085$RATN9
                                    g$e$9083$RATN9)
                                  g$actuals$9086$RATN9)))))
                         (map cdr g$map-env$9084$RATN9)
                         (map (case-lambda
                                ((g$x$9091$RATN9)
                                 (list 'ref (car g$x$9091$RATN9))))
                              g$map-env$9084$RATN9)))))
                   (g$gen-cons$9054$RATN9
                     (case-lambda
                       ((g$e$9075$RATN9
                          g$x$9076$RATN9
                          g$y$9077$RATN9
                          g$xnew$9078$RATN9
                          g$ynew$9079$RATN9)
                        ((case-lambda
                           ((g$t$9080$RATN9)
                            (if (eqv? g$t$9080$RATN9 'quote)
                              (if (eq? (car g$xnew$9078$RATN9) 'quote)
                                ((case-lambda
                                   ((g$xnew$9081$RATN9 g$ynew$9082$RATN9)
                                    (if (if (eq? g$xnew$9081$RATN9
                                                 g$x$9076$RATN9)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9082$RATN9
                                                 g$y$9077$RATN9))
                                          '#f)
                                      (list 'quote g$e$9075$RATN9)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9081$RATN9
                                          g$ynew$9082$RATN9)))))
                                 (g$cadr$4896$RATN9 g$xnew$9078$RATN9)
                                 (g$cadr$4896$RATN9 g$ynew$9079$RATN9))
                                (if (null?
                                      (g$cadr$4896$RATN9 g$ynew$9079$RATN9))
                                  (list 'list g$xnew$9078$RATN9)
                                  (list
                                    'cons
                                    g$xnew$9078$RATN9
                                    g$ynew$9079$RATN9)))
                              (if (eqv? g$t$9080$RATN9 'list)
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9078$RATN9
                                    (cdr g$ynew$9079$RATN9)))
                                (list
                                  'cons
                                  g$xnew$9078$RATN9
                                  g$ynew$9079$RATN9)))))
                         (car g$ynew$9079$RATN9)))))
                   (g$gen-vector$9055$RATN9
                     (case-lambda
                       ((g$e$9072$RATN9 g$ls$9073$RATN9 g$lsnew$9074$RATN9)
                        (if (eq? (car g$lsnew$9074$RATN9) 'quote)
                          (if (eq? (g$cadr$4896$RATN9 g$lsnew$9074$RATN9)
                                   g$ls$9073$RATN9)
                            (list 'quote g$e$9072$RATN9)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$4896$RATN9 g$lsnew$9074$RATN9))))
                          (if (eq? (car g$lsnew$9074$RATN9) 'list)
                            (cons 'vector (cdr g$lsnew$9074$RATN9))
                            (list 'list->vector g$lsnew$9074$RATN9))))))
                   (g$regen$9056$RATN9
                     (case-lambda
                       ((g$x$9069$RATN9)
                        ((case-lambda
                           ((g$t$9070$RATN9)
                            (if (eqv? g$t$9070$RATN9 'ref)
                              (g$cadr$4896$RATN9 g$x$9069$RATN9)
                              (if (eqv? g$t$9070$RATN9 'primitive)
                                (list
                                  'primitive
                                  (g$cadr$4896$RATN9 g$x$9069$RATN9))
                                (if (eqv? g$t$9070$RATN9 'quote)
                                  (list
                                    'quote
                                    (g$cadr$4896$RATN9 g$x$9069$RATN9))
                                  (if (eqv? g$t$9070$RATN9 'lambda)
                                    (g$build-lambda$6868$RATN9
                                      '#f
                                      (g$cadr$4896$RATN9 g$x$9069$RATN9)
                                      (g$regen$9056$RATN9
                                        (g$caddr$4902$RATN9 g$x$9069$RATN9)))
                                    (if (eqv? g$t$9070$RATN9 'map)
                                      ((case-lambda
                                         ((g$ls$9071$RATN9)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9071$RATN9)))
                                       (map g$regen$9056$RATN9
                                            (cdr g$x$9069$RATN9)))
                                      (cons
                                        (list 'primitive (car g$x$9069$RATN9))
                                        (map g$regen$9056$RATN9
                                             (cdr g$x$9069$RATN9))))))))))
                         (car g$x$9069$RATN9))))))
           (case-lambda
             ((g$e$9057$RATN9 g$r$9058$RATN9 g$mr$9059$RATN9)
              ((case-lambda
                 ((g$t$9060$RATN9)
                  ((case-lambda
                     ((g$ls/false$9061$RATN9)
                      (if g$ls/false$9061$RATN9
                        (apply
                          (case-lambda
                            ((g$x$9062$RATN9)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9049$RATN9
                                    g$e$9057$RATN9
                                    g$x$9062$RATN9
                                    g$r$9058$RATN9
                                    '()
                                    g$ellipsis?$7216$RATN9
                                    '#f)))
                               (case-lambda
                                 ((g$e$9065$RATN9 g$maps$9066$RATN9)
                                  ((case-lambda
                                     ((g$maps$9067$RATN9 g$e$9068$RATN9)
                                      (g$regen$9056$RATN9 g$e$9068$RATN9)))
                                   g$maps$9066$RATN9
                                   g$e$9065$RATN9))))))
                          g$ls/false$9061$RATN9)
                        (g$syntax-violation$7321$RATN9
                          '#f
                          '"invalid syntax"
                          g$t$9060$RATN9))))
                   (g$syntax-dispatch$7215$RATN9 g$t$9060$RATN9 '(_ any)))))
               g$e$9057$RATN9))))))))
   (g$core-macro-transformer$7222$RATN9
     g$core-macro-transformer$10672$RATN9
     (case-lambda
       ((g$name$9213$RATN9)
        ((case-lambda
           ((g$t$9214$RATN9)
            (if (eqv? g$t$9214$RATN9 'quote)
              g$quote-transformer$7175$RATN9
              (if (eqv? g$t$9214$RATN9 'lambda)
                g$lambda-transformer$7177$RATN9
                (if (eqv? g$t$9214$RATN9 'case-lambda)
                  g$case-lambda-transformer$7176$RATN9
                  (if (eqv? g$t$9214$RATN9 'letrec)
                    g$letrec-transformer$7165$RATN9
                    (if (eqv? g$t$9214$RATN9 'letrec*)
                      g$letrec*-transformer$7166$RATN9
                      (if (eqv? g$t$9214$RATN9 'case)
                        g$case-transformer$7174$RATN9
                        (if (eqv? g$t$9214$RATN9 'if)
                          g$if-transformer$7173$RATN9
                          (if (eqv? g$t$9214$RATN9 'when)
                            g$when-transformer$7171$RATN9
                            (if (eqv? g$t$9214$RATN9 'unless)
                              g$unless-transformer$7172$RATN9
                              (if (eqv? g$t$9214$RATN9 'parameterize)
                                g$parameterize-transformer$7212$RATN9
                                (if (eqv? g$t$9214$RATN9 'foreign-call)
                                  g$foreign-call-transformer$7213$RATN9
                                  (if (eqv? g$t$9214$RATN9 'syntax-case)
                                    g$syntax-case-transformer$7219$RATN9
                                    (if (eqv? g$t$9214$RATN9 'syntax)
                                      g$syntax-transformer$7221$RATN9
                                      (if (eqv? g$t$9214$RATN9 'type-descriptor)
                                        g$type-descriptor-transformer$7168$RATN9
                                        (if (eqv?
                                              g$t$9214$RATN9
                                              'record-type-descriptor)
                                          g$record-type-descriptor-transformer$7169$RATN9
                                          (if (eqv?
                                                g$t$9214$RATN9
                                                'record-constructor-descriptor)
                                            g$record-constructor-descriptor-transformer$7170$RATN9
                                            (if (eqv?
                                                  g$t$9214$RATN9
                                                  'fluid-let-syntax)
                                              g$fluid-let-syntax-transformer$7167$RATN9
                                              (assertion-violation
                                                'macro-transformer
                                                '"BUG: cannot find transformer"
                                                g$name$9213$RATN9))))))))))))))))))))
         g$name$9213$RATN9))))
   (g$file-options-macro$7223$RATN9
     g$file-options-macro$10673$RATN9
     (case-lambda
       ((g$x$9215$RATN9)
        ((case-lambda
           ((g$t$9216$RATN9)
            ((case-lambda
               ((g$ls/false$9217$RATN9)
                (if (if g$ls/false$9217$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$opt*$9218$RATN9)
                             (if (g$for-all$5365$RATN9
                                   g$id?$6937$RATN9
                                   g$opt*$9218$RATN9)
                               (begin
                                 '#f
                                 (g$file-options-spec$6206$RATN9
                                   (map g$id->sym$6938$RATN9
                                        g$opt*$9218$RATN9)))
                               '#f)))
                          g$ls/false$9217$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$opt*$9219$RATN9)
                       (g$bless$7178$RATN9
                         (list
                           'quote
                           (g$file-options-spec$6206$RATN9
                             (map g$id->sym$6938$RATN9 g$opt*$9219$RATN9))))))
                    g$ls/false$9217$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$9216$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$9216$RATN9 '(_ . each-any)))))
         g$x$9215$RATN9))))
   (g$symbol-macro$7224$RATN9
     g$symbol-macro$10674$RATN9
     (case-lambda
       ((g$x$9220$RATN9 g$set$9221$RATN9)
        ((case-lambda
           ((g$t$9222$RATN9)
            ((case-lambda
               ((g$ls/false$9223$RATN9)
                (if (if g$ls/false$9223$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9224$RATN9)
                             (if (g$id?$6937$RATN9 g$name$9224$RATN9)
                               (begin
                                 '#f
                                 (memq
                                   (g$id->sym$6938$RATN9 g$name$9224$RATN9)
                                   g$set$9221$RATN9))
                               '#f)))
                          g$ls/false$9223$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9225$RATN9)
                       (g$bless$7178$RATN9 (list 'quote g$name$9225$RATN9))))
                    g$ls/false$9223$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$9222$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$9222$RATN9 '(_ any)))))
         g$x$9220$RATN9))))
   (g$macro-transformer$7225$RATN9
     g$macro-transformer$10675$RATN9
     (case-lambda
       ((g$x$9226$RATN9)
        (if (procedure? g$x$9226$RATN9)
          g$x$9226$RATN9
          (if (symbol? g$x$9226$RATN9)
            ((case-lambda
               ((g$t$9227$RATN9)
                (if (eqv? g$t$9227$RATN9 'define-record-type)
                  g$define-record-type-macro$7209$RATN9
                  (if (eqv? g$t$9227$RATN9 'define-struct)
                    g$define-struct-macro$7208$RATN9
                    (if (eqv? g$t$9227$RATN9 'include)
                      g$include-macro$7203$RATN9
                      (if (eqv? g$t$9227$RATN9 'cond)
                        g$cond-macro$7201$RATN9
                        (if (eqv? g$t$9227$RATN9 'let)
                          g$let-macro$7181$RATN9
                          (if (eqv? g$t$9227$RATN9 'do)
                            g$do-macro$7197$RATN9
                            (if (eqv? g$t$9227$RATN9 'or)
                              g$or-macro$7199$RATN9
                              (if (eqv? g$t$9227$RATN9 'and)
                                g$and-macro$7200$RATN9
                                (if (eqv? g$t$9227$RATN9 'let*)
                                  g$let*-macro$7198$RATN9
                                  (if (eqv? g$t$9227$RATN9 'let-values)
                                    g$let-values-macro$7182$RATN9
                                    (if (eqv? g$t$9227$RATN9 'let*-values)
                                      g$let*-values-macro$7183$RATN9
                                      (if (eqv? g$t$9227$RATN9 'syntax-rules)
                                        g$syntax-rules-macro$7205$RATN9
                                        (if (eqv? g$t$9227$RATN9 'quasiquote)
                                          g$quasiquote-macro$7206$RATN9
                                          (if (eqv? g$t$9227$RATN9 'quasisyntax)
                                            g$quasisyntax-macro$7207$RATN9
                                            (if (eqv?
                                                  g$t$9227$RATN9
                                                  'with-syntax)
                                              g$with-syntax-macro$7179$RATN9
                                              (if (eqv?
                                                    g$t$9227$RATN9
                                                    'identifier-syntax)
                                                g$identifier-syntax-macro$7196$RATN9
                                                (if (eqv? g$t$9227$RATN9 'time)
                                                  g$time-macro$7192$RATN9
                                                  (if (eqv?
                                                        g$t$9227$RATN9
                                                        'delay)
                                                    g$delay-macro$7193$RATN9
                                                    (if (eqv?
                                                          g$t$9227$RATN9
                                                          'assert)
                                                      g$assert-macro$7194$RATN9
                                                      (if (eqv?
                                                            g$t$9227$RATN9
                                                            'endianness)
                                                        g$endianness-macro$7195$RATN9
                                                        (if (eqv?
                                                              g$t$9227$RATN9
                                                              'guard)
                                                          g$guard-macro$7190$RATN9
                                                          (if (eqv?
                                                                g$t$9227$RATN9
                                                                'define-enumeration)
                                                            g$define-enumeration-macro$7191$RATN9
                                                            (if (eqv?
                                                                  g$t$9227$RATN9
                                                                  'trace-lambda)
                                                              g$trace-lambda-macro$7184$RATN9
                                                              (if (eqv?
                                                                    g$t$9227$RATN9
                                                                    'trace-define)
                                                                g$trace-define-macro$7185$RATN9
                                                                (if (eqv?
                                                                      g$t$9227$RATN9
                                                                      'trace-define-syntax)
                                                                  g$trace-define-syntax-macro$7186$RATN9
                                                                  (if (eqv?
                                                                        g$t$9227$RATN9
                                                                        'trace-let-syntax)
                                                                    g$trace-let-syntax-macro$7188$RATN9
                                                                    (if (eqv?
                                                                          g$t$9227$RATN9
                                                                          'trace-letrec-syntax)
                                                                      g$trace-letrec-syntax-macro$7189$RATN9
                                                                      (if (eqv?
                                                                            g$t$9227$RATN9
                                                                            'define-condition-type)
                                                                        g$define-condition-type-macro$7210$RATN9
                                                                        (if (eqv?
                                                                              g$t$9227$RATN9
                                                                              'include-into)
                                                                          g$include-into-macro$7204$RATN9
                                                                          (if (eqv?
                                                                                g$t$9227$RATN9
                                                                                'eol-style)
                                                                            (case-lambda
                                                                              ((g$x$9230$RATN9)
                                                                               (g$symbol-macro$7224$RATN9
                                                                                 g$x$9230$RATN9
                                                                                 '(none
                                                                                    lf
                                                                                    cr
                                                                                    crlf
                                                                                    nel
                                                                                    crnel
                                                                                    ls))))
                                                                            (if (eqv?
                                                                                  g$t$9227$RATN9
                                                                                  'error-handling-mode)
                                                                              (case-lambda
                                                                                ((g$x$9229$RATN9)
                                                                                 (g$symbol-macro$7224$RATN9
                                                                                   g$x$9229$RATN9
                                                                                   '(ignore
                                                                                      raise
                                                                                      replace))))
                                                                              (if (eqv?
                                                                                    g$t$9227$RATN9
                                                                                    'buffer-mode)
                                                                                (case-lambda
                                                                                  ((g$x$9228$RATN9)
                                                                                   (g$symbol-macro$7224$RATN9
                                                                                     g$x$9228$RATN9
                                                                                     '(none
                                                                                        line
                                                                                        block))))
                                                                                (if (eqv?
                                                                                      g$t$9227$RATN9
                                                                                      'file-options)
                                                                                  g$file-options-macro$7223$RATN9
                                                                                  (if (memv
                                                                                        g$t$9227$RATN9
                                                                                        '(... =>
                                                                                              _
                                                                                              else
                                                                                              unquote
                                                                                              unquote-splicing
                                                                                              unsyntax
                                                                                              unsyntax-splicing
                                                                                              fields
                                                                                              mutable
                                                                                              immutable
                                                                                              parent
                                                                                              protocol
                                                                                              sealed
                                                                                              opaque
                                                                                              nongenerative
                                                                                              parent-rtd))
                                                                                    g$incorrect-usage-macro$7211$RATN9
                                                                                    (error
                                                                                      'macro-transformer
                                                                                      '"BUG: invalid macro"
                                                                                      g$x$9226$RATN9)))))))))))))))))))))))))))))))))))))
             g$x$9226$RATN9)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9226$RATN9))))))
   (g$local-macro-transformer$7226$RATN9
     g$local-macro-transformer$10676$RATN9
     (case-lambda ((g$x$9231$RATN9) (car g$x$9231$RATN9))))
   (g$do-macro-call$7227$RATN9
     g$do-macro-call$10677$RATN9
     (case-lambda
       ((g$transformer$9232$RATN9 g$expr$9233$RATN9)
        ((case-lambda
           ((g$out$9234$RATN9)
            (begin
              ((letrec ((g$f$9235$RATN9
                          (case-lambda
                            ((g$x$9236$RATN9)
                             (if (g$stx?$6909$RATN9 g$x$9236$RATN9)
                               (void)
                               (if (pair? g$x$9236$RATN9)
                                 (begin
                                   (g$f$9235$RATN9 (car g$x$9236$RATN9))
                                   (g$f$9235$RATN9 (cdr g$x$9236$RATN9)))
                                 (if (vector? g$x$9236$RATN9)
                                   (vector-for-each
                                     g$f$9235$RATN9
                                     g$x$9236$RATN9)
                                   (if (symbol? g$x$9236$RATN9)
                                     (g$syntax-violation$7321$RATN9
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9233$RATN9
                                       g$x$9236$RATN9)
                                     (void)))))))))
                 g$f$9235$RATN9)
               g$out$9234$RATN9)
              (g$add-mark$6926$RATN9
                (g$gen-mark$6921$RATN9)
                g$out$9234$RATN9
                g$expr$9233$RATN9))))
         (g$transformer$9232$RATN9
           (g$add-mark$6926$RATN9
             g$anti-mark$6922$RATN9
             g$expr$9233$RATN9
             '#f))))))
   (g$chi-macro$7228$RATN9
     g$chi-macro$10678$RATN9
     (case-lambda
       ((g$p$9237$RATN9 g$e$9238$RATN9)
        (g$do-macro-call$7227$RATN9
          (g$macro-transformer$7225$RATN9 g$p$9237$RATN9)
          g$e$9238$RATN9))))
   (g$chi-local-macro$7229$RATN9
     g$chi-local-macro$10679$RATN9
     (case-lambda
       ((g$p$9239$RATN9 g$e$9240$RATN9)
        (g$do-macro-call$7227$RATN9
          (g$local-macro-transformer$7226$RATN9 g$p$9239$RATN9)
          g$e$9240$RATN9))))
   (g$chi-global-macro$7230$RATN9
     g$chi-global-macro$10680$RATN9
     (case-lambda
       ((g$p$9241$RATN9 g$e$9242$RATN9)
        ((case-lambda
           ((g$lib$9243$RATN9 g$loc$9244$RATN9)
            (begin
              (g$visit-library$6753$RATN9 g$lib$9243$RATN9)
              ((case-lambda
                 ((g$x$9245$RATN9)
                  ((case-lambda
                     ((g$transformer$9246$RATN9)
                      (g$do-macro-call$7227$RATN9
                        g$transformer$9246$RATN9
                        g$e$9242$RATN9)))
                   (if (procedure? g$x$9245$RATN9)
                     g$x$9245$RATN9
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9245$RATN9)))))
               (symbol-value g$loc$9244$RATN9)))))
         (car g$p$9241$RATN9)
         (cdr g$p$9241$RATN9)))))
   (g$chi-expr*$7231$RATN9
     g$chi-expr*$10681$RATN9
     (case-lambda
       ((g$e*$9247$RATN9 g$r$9248$RATN9 g$mr$9249$RATN9)
        (if (null? g$e*$9247$RATN9)
          '()
          ((case-lambda
             ((g$e$9250$RATN9)
              (cons
                g$e$9250$RATN9
                (g$chi-expr*$7231$RATN9
                  (cdr g$e*$9247$RATN9)
                  g$r$9248$RATN9
                  g$mr$9249$RATN9))))
           (g$chi-expr$7233$RATN9
             (car g$e*$9247$RATN9)
             g$r$9248$RATN9
             g$mr$9249$RATN9))))))
   (g$chi-application$7232$RATN9
     g$chi-application$10682$RATN9
     (case-lambda
       ((g$e$9251$RATN9 g$r$9252$RATN9 g$mr$9253$RATN9)
        ((case-lambda
           ((g$t$9254$RATN9)
            ((case-lambda
               ((g$ls/false$9255$RATN9)
                (if g$ls/false$9255$RATN9
                  (apply
                    (case-lambda
                      ((g$rator$9256$RATN9 g$rands$9257$RATN9)
                       ((case-lambda
                          ((g$rator$9258$RATN9)
                           (cons
                             g$rator$9258$RATN9
                             (g$chi-expr*$7231$RATN9
                               g$rands$9257$RATN9
                               g$r$9252$RATN9
                               g$mr$9253$RATN9))))
                        (g$chi-expr$7233$RATN9
                          g$rator$9256$RATN9
                          g$r$9252$RATN9
                          g$mr$9253$RATN9))))
                    g$ls/false$9255$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$9254$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$9254$RATN9 '(any . each-any)))))
         g$e$9251$RATN9))))
   (g$chi-expr$7233$RATN9
     g$chi-expr$10683$RATN9
     (case-lambda
       ((g$e$9259$RATN9 g$r$9260$RATN9 g$mr$9261$RATN9)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$6957$RATN9 g$e$9259$RATN9 g$r$9260$RATN9)))
          (case-lambda
            ((g$type$9265$RATN9 g$value$9266$RATN9 g$kwd$9267$RATN9)
             ((case-lambda
                ((g$kwd$9268$RATN9 g$value$9269$RATN9 g$type$9270$RATN9)
                 ((case-lambda
                    ((g$t$9271$RATN9)
                     (if (eqv? g$t$9271$RATN9 'core-macro)
                       ((case-lambda
                          ((g$transformer$9297$RATN9)
                           (g$transformer$9297$RATN9
                             g$e$9259$RATN9
                             g$r$9260$RATN9
                             g$mr$9261$RATN9)))
                        (g$core-macro-transformer$7222$RATN9
                          g$value$9269$RATN9))
                       (if (eqv? g$t$9271$RATN9 'global)
                         ((case-lambda
                            ((g$lib$9295$RATN9)
                             ((case-lambda
                                ((g$loc$9296$RATN9)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$7267$RATN9)
                                        g$lib$9295$RATN9)
                                       g$loc$9296$RATN9))))))
                              (cdr g$value$9269$RATN9))))
                          (car g$value$9269$RATN9))
                         (if (eqv? g$t$9271$RATN9 'core-prim)
                           ((case-lambda
                              ((g$name$9294$RATN9)
                               (list 'primitive g$name$9294$RATN9)))
                            g$value$9269$RATN9)
                           (if (eqv? g$t$9271$RATN9 'call)
                             (g$chi-application$7232$RATN9
                               g$e$9259$RATN9
                               g$r$9260$RATN9
                               g$mr$9261$RATN9)
                             (if (eqv? g$t$9271$RATN9 'lexical)
                               ((case-lambda
                                  ((g$lex$9293$RATN9) g$lex$9293$RATN9))
                                (g$lexical-var$7159$RATN9 g$value$9269$RATN9))
                               (if (memv
                                     g$t$9271$RATN9
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7233$RATN9
                                   (g$chi-global-macro$7230$RATN9
                                     g$value$9269$RATN9
                                     g$e$9259$RATN9)
                                   g$r$9260$RATN9
                                   g$mr$9261$RATN9)
                                 (if (memv
                                       g$t$9271$RATN9
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7233$RATN9
                                     (g$chi-local-macro$7229$RATN9
                                       g$value$9269$RATN9
                                       g$e$9259$RATN9)
                                     g$r$9260$RATN9
                                     g$mr$9261$RATN9)
                                   (if (memv g$t$9271$RATN9 '(macro macro!))
                                     (g$chi-expr$7233$RATN9
                                       (g$chi-macro$7228$RATN9
                                         g$value$9269$RATN9
                                         g$e$9259$RATN9)
                                       g$r$9260$RATN9
                                       g$mr$9261$RATN9)
                                     (if (eqv? g$t$9271$RATN9 'constant)
                                       ((case-lambda
                                          ((g$datum$9292$RATN9)
                                           (list 'quote g$datum$9292$RATN9)))
                                        g$value$9269$RATN9)
                                       (if (eqv? g$t$9271$RATN9 'set!)
                                         (g$chi-set!$7234$RATN9
                                           g$e$9259$RATN9
                                           g$r$9260$RATN9
                                           g$mr$9261$RATN9)
                                         (if (eqv? g$t$9271$RATN9 'begin)
                                           ((case-lambda
                                              ((g$t$9288$RATN9)
                                               ((case-lambda
                                                  ((g$ls/false$9289$RATN9)
                                                   (if g$ls/false$9289$RATN9
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9290$RATN9
                                                            g$x*$9291$RATN9)
                                                          (g$build-sequence$6871$RATN9
                                                            '#f
                                                            (g$chi-expr*$7231$RATN9
                                                              (cons
                                                                g$x$9290$RATN9
                                                                g$x*$9291$RATN9)
                                                              g$r$9260$RATN9
                                                              g$mr$9261$RATN9))))
                                                       g$ls/false$9289$RATN9)
                                                     (g$syntax-violation$7321$RATN9
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9288$RATN9))))
                                                (g$syntax-dispatch$7215$RATN9
                                                  g$t$9288$RATN9
                                                  '(_ any . each-any)))))
                                            g$e$9259$RATN9)
                                           (if (memv
                                                 g$t$9271$RATN9
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$9273$RATN9)
                                                 ((case-lambda
                                                    ((g$ls/false$9274$RATN9)
                                                     (if (if g$ls/false$9274$RATN9
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$9275$RATN9
                                                                    g$xrhs*$9276$RATN9
                                                                    g$xbody$9277$RATN9
                                                                    g$xbody*$9278$RATN9)
                                                                  (if (g$valid-bound-ids?$6942$RATN9
                                                                        g$xlhs*$9275$RATN9)
                                                                    (void)
                                                                    (g$syntax-violation$7321$RATN9
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9259$RATN9))))
                                                               g$ls/false$9274$RATN9))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$9279$RATN9
                                                              g$xrhs*$9280$RATN9
                                                              g$xbody$9281$RATN9
                                                              g$xbody*$9282$RATN9)
                                                            ((case-lambda
                                                               ((g$xlab*$9283$RATN9)
                                                                ((case-lambda
                                                                   ((g$xrib$9284$RATN9)
                                                                    ((case-lambda
                                                                       ((g$xb*$9285$RATN9)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$6871$RATN9
                                                                              '#f
                                                                              (g$chi-expr*$7231$RATN9
                                                                                (map (case-lambda
                                                                                       ((g$x$9286$RATN9)
                                                                                        (g$add-subst$6927$RATN9
                                                                                          g$xrib$9284$RATN9
                                                                                          g$x$9286$RATN9)))
                                                                                     (cons
                                                                                       g$xbody$9281$RATN9
                                                                                       g$xbody*$9282$RATN9))
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9283$RATN9
                                                                                       g$xb*$9285$RATN9)
                                                                                  g$r$9260$RATN9)
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9283$RATN9
                                                                                       g$xb*$9285$RATN9)
                                                                                  g$mr$9261$RATN9))))))))
                                                                     (map (case-lambda
                                                                            ((g$x$9287$RATN9)
                                                                             (g$make-eval-transformer$6969$RATN9
                                                                               (g$expand-transformer$7260$RATN9
                                                                                 (if (eq? g$type$9270$RATN9
                                                                                          'let-syntax)
                                                                                   g$x$9287$RATN9
                                                                                   (g$add-subst$6927$RATN9
                                                                                     g$xrib$9284$RATN9
                                                                                     g$x$9287$RATN9))
                                                                                 g$mr$9261$RATN9))))
                                                                          g$xrhs*$9280$RATN9))))
                                                                 (g$make-full-rib$6905$RATN9
                                                                   g$xlhs*$9279$RATN9
                                                                   g$xlab*$9283$RATN9))))
                                                             (map g$gen-label$6883$RATN9
                                                                  g$xlhs*$9279$RATN9))))
                                                         g$ls/false$9274$RATN9)
                                                       (g$syntax-violation$7321$RATN9
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$9273$RATN9))))
                                                  (g$syntax-dispatch$7215$RATN9
                                                    g$t$9273$RATN9
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9259$RATN9)
                                             (if (eqv?
                                                   g$t$9271$RATN9
                                                   'displaced-lexical)
                                               (g$syntax-violation$7321$RATN9
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9259$RATN9)
                                               (if (eqv? g$t$9271$RATN9 'syntax)
                                                 (g$syntax-violation$7321$RATN9
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9259$RATN9)
                                                 (if (memv
                                                       g$t$9271$RATN9
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$7321$RATN9
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$9272$RATN9)
                                                           (if (eqv?
                                                                 g$t$9272$RATN9
                                                                 'define)
                                                             '"a definition"
                                                             (if (eqv?
                                                                   g$t$9272$RATN9
                                                                   'define-syntax)
                                                               '"a define-syntax"
                                                               (if (eqv?
                                                                     g$t$9272$RATN9
                                                                     'module)
                                                                 '"a module definition"
                                                                 (if (eqv?
                                                                       g$t$9272$RATN9
                                                                       'library)
                                                                   '"a library definition"
                                                                   (if (eqv?
                                                                         g$t$9272$RATN9
                                                                         'import)
                                                                     '"an import declaration"
                                                                     '"a non-expression")))))))
                                                        g$type$9270$RATN9)
                                                       '" was found where an expression was expected")
                                                     g$e$9259$RATN9)
                                                   (if (eqv?
                                                         g$t$9271$RATN9
                                                         'mutable)
                                                     (g$syntax-violation$7321$RATN9
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9259$RATN9)
                                                     (g$syntax-violation$7321$RATN9
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9259$RATN9)))))))))))))))))))
                  g$type$9270$RATN9)))
              g$kwd$9267$RATN9
              g$value$9266$RATN9
              g$type$9265$RATN9)))))))
   (g$chi-set!$7234$RATN9
     g$chi-set!$10684$RATN9
     (case-lambda
       ((g$e$9298$RATN9 g$r$9299$RATN9 g$mr$9300$RATN9)
        ((case-lambda
           ((g$t$9301$RATN9)
            ((case-lambda
               ((g$ls/false$9302$RATN9)
                (if (if g$ls/false$9302$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$9303$RATN9 g$v$9304$RATN9)
                             (g$id?$6937$RATN9 g$x$9303$RATN9)))
                          g$ls/false$9302$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$9305$RATN9 g$v$9306$RATN9)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$6957$RATN9
                              g$x$9305$RATN9
                              g$r$9299$RATN9)))
                         (case-lambda
                           ((g$type$9310$RATN9
                              g$value$9311$RATN9
                              g$kwd$9312$RATN9)
                            ((case-lambda
                               ((g$kwd$9313$RATN9
                                  g$value$9314$RATN9
                                  g$type$9315$RATN9)
                                ((case-lambda
                                   ((g$t$9316$RATN9)
                                    (if (eqv? g$t$9316$RATN9 'lexical)
                                      (begin
                                        (g$set-lexical-mutable!$7161$RATN9
                                          g$value$9314$RATN9
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7159$RATN9
                                            g$value$9314$RATN9)
                                          (g$chi-expr$7233$RATN9
                                            g$v$9306$RATN9
                                            g$r$9299$RATN9
                                            g$mr$9300$RATN9)))
                                      (if (eqv? g$t$9316$RATN9 'core-prim)
                                        (g$syntax-violation$7321$RATN9
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$9298$RATN9)
                                        (if (eqv? g$t$9316$RATN9 'global)
                                          (g$syntax-violation$7321$RATN9
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$9298$RATN9)
                                          (if (eqv?
                                                g$t$9316$RATN9
                                                'global-macro!)
                                            (g$chi-expr$7233$RATN9
                                              (g$chi-global-macro$7230$RATN9
                                                g$value$9314$RATN9
                                                g$e$9298$RATN9)
                                              g$r$9299$RATN9
                                              g$mr$9300$RATN9)
                                            (if (eqv?
                                                  g$t$9316$RATN9
                                                  'local-macro!)
                                              (g$chi-expr$7233$RATN9
                                                (g$chi-local-macro$7229$RATN9
                                                  g$value$9314$RATN9
                                                  g$e$9298$RATN9)
                                                g$r$9299$RATN9
                                                g$mr$9300$RATN9)
                                              (if (eqv? g$t$9316$RATN9 'mutable)
                                                (g$syntax-violation$7321$RATN9
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$9298$RATN9)
                                                (g$syntax-violation$7321$RATN9
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$9298$RATN9)))))))))
                                 g$type$9315$RATN9)))
                             g$kwd$9312$RATN9
                             g$value$9311$RATN9
                             g$type$9310$RATN9))))))
                    g$ls/false$9302$RATN9)
                  (g$syntax-violation$7321$RATN9
                    '#f
                    '"invalid syntax"
                    g$t$9301$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$9301$RATN9 '(_ any any)))))
         g$e$9298$RATN9))))
   (g$verify-formals$7235$RATN9
     g$verify-formals$10685$RATN9
     (case-lambda
       ((g$fmls$9317$RATN9 g$stx$9318$RATN9)
        ((case-lambda
           ((g$t$9319$RATN9)
            ((case-lambda
               ((g$ls/false$9320$RATN9)
                (if g$ls/false$9320$RATN9
                  (apply
                    (case-lambda
                      ((g$x*$9321$RATN9)
                       (if (g$valid-bound-ids?$6942$RATN9 g$x*$9321$RATN9)
                         (void)
                         (g$invalid-fmls-error$7180$RATN9
                           g$stx$9318$RATN9
                           g$fmls$9317$RATN9))))
                    g$ls/false$9320$RATN9)
                  ((case-lambda
                     ((g$t$9322$RATN9)
                      ((case-lambda
                         ((g$ls/false$9323$RATN9)
                          (if g$ls/false$9323$RATN9
                            (apply
                              (case-lambda
                                ((g$x*$9324$RATN9 g$x$9325$RATN9)
                                 (if (g$valid-bound-ids?$6942$RATN9
                                       (cons g$x$9325$RATN9 g$x*$9324$RATN9))
                                   (void)
                                   (g$invalid-fmls-error$7180$RATN9
                                     g$stx$9318$RATN9
                                     g$fmls$9317$RATN9))))
                              g$ls/false$9323$RATN9)
                            ((case-lambda
                               ((g$t$9326$RATN9)
                                ((case-lambda
                                   ((g$ls/false$9327$RATN9)
                                    (if g$ls/false$9327$RATN9
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$stx$9318$RATN9)))
                                        g$ls/false$9327$RATN9)
                                      (g$syntax-violation$7321$RATN9
                                        '#f
                                        '"invalid syntax"
                                        g$t$9326$RATN9))))
                                 (g$syntax-dispatch$7215$RATN9
                                   g$t$9326$RATN9
                                   '_))))
                             g$t$9322$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$9322$RATN9
                         '#(each+ any () any)))))
                   g$t$9319$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$9319$RATN9 'each-any))))
         g$fmls$9317$RATN9))))
   (g$chi-lambda-clause$7236$RATN9
     g$chi-lambda-clause$10686$RATN9
     (case-lambda
       ((g$stx$9328$RATN9
          g$fmls$9329$RATN9
          g$body*$9330$RATN9
          g$r$9331$RATN9
          g$mr$9332$RATN9)
        ((case-lambda
           ((g$t$9333$RATN9)
            ((case-lambda
               ((g$ls/false$9334$RATN9)
                (if g$ls/false$9334$RATN9
                  (apply
                    (case-lambda
                      ((g$x*$9335$RATN9)
                       (begin
                         (g$verify-formals$7235$RATN9
                           g$fmls$9329$RATN9
                           g$stx$9328$RATN9)
                         ((case-lambda
                            ((g$lex*$9336$RATN9 g$lab*$9337$RATN9)
                             (values
                               g$lex*$9336$RATN9
                               (g$chi-internal$7244$RATN9
                                 (g$add-subst$6927$RATN9
                                   (g$make-full-rib$6905$RATN9
                                     g$x*$9335$RATN9
                                     g$lab*$9337$RATN9)
                                   g$body*$9330$RATN9)
                                 (g$add-lexicals$7163$RATN9
                                   g$lab*$9337$RATN9
                                   g$lex*$9336$RATN9
                                   g$r$9331$RATN9)
                                 g$mr$9332$RATN9))))
                          (map g$gen-lexical$6881$RATN9 g$x*$9335$RATN9)
                          (map g$gen-label$6883$RATN9 g$x*$9335$RATN9)))))
                    g$ls/false$9334$RATN9)
                  ((case-lambda
                     ((g$t$9338$RATN9)
                      ((case-lambda
                         ((g$ls/false$9339$RATN9)
                          (if g$ls/false$9339$RATN9
                            (apply
                              (case-lambda
                                ((g$x*$9340$RATN9 g$x$9341$RATN9)
                                 (begin
                                   (g$verify-formals$7235$RATN9
                                     g$fmls$9329$RATN9
                                     g$stx$9328$RATN9)
                                   ((case-lambda
                                      ((g$lex*$9342$RATN9
                                         g$lab*$9343$RATN9
                                         g$lex$9344$RATN9
                                         g$lab$9345$RATN9)
                                       (values
                                         (append
                                           g$lex*$9342$RATN9
                                           g$lex$9344$RATN9)
                                         (g$chi-internal$7244$RATN9
                                           (g$add-subst$6927$RATN9
                                             (g$make-full-rib$6905$RATN9
                                               (cons
                                                 g$x$9341$RATN9
                                                 g$x*$9340$RATN9)
                                               (cons
                                                 g$lab$9345$RATN9
                                                 g$lab*$9343$RATN9))
                                             g$body*$9330$RATN9)
                                           (g$add-lexicals$7163$RATN9
                                             (cons
                                               g$lab$9345$RATN9
                                               g$lab*$9343$RATN9)
                                             (cons
                                               g$lex$9344$RATN9
                                               g$lex*$9342$RATN9)
                                             g$r$9331$RATN9)
                                           g$mr$9332$RATN9))))
                                    (map g$gen-lexical$6881$RATN9
                                         g$x*$9340$RATN9)
                                    (map g$gen-label$6883$RATN9 g$x*$9340$RATN9)
                                    (g$gen-lexical$6881$RATN9 g$x$9341$RATN9)
                                    (g$gen-label$6883$RATN9 g$x$9341$RATN9)))))
                              g$ls/false$9339$RATN9)
                            ((case-lambda
                               ((g$t$9346$RATN9)
                                ((case-lambda
                                   ((g$ls/false$9347$RATN9)
                                    (if g$ls/false$9347$RATN9
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7321$RATN9
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$9329$RATN9)))
                                        g$ls/false$9347$RATN9)
                                      (g$syntax-violation$7321$RATN9
                                        '#f
                                        '"invalid syntax"
                                        g$t$9346$RATN9))))
                                 (g$syntax-dispatch$7215$RATN9
                                   g$t$9346$RATN9
                                   '_))))
                             g$t$9338$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$9338$RATN9
                         '#(each+ any () any)))))
                   g$t$9333$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$9333$RATN9 'each-any))))
         g$fmls$9329$RATN9))))
   (g$chi-lambda-clause*$7237$RATN9
     g$chi-lambda-clause*$10687$RATN9
     (case-lambda
       ((g$stx$9348$RATN9
          g$fmls*$9349$RATN9
          g$body**$9350$RATN9
          g$r$9351$RATN9
          g$mr$9352$RATN9)
        (if (null? g$fmls*$9349$RATN9)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7236$RATN9
                 g$stx$9348$RATN9
                 (car g$fmls*$9349$RATN9)
                 (car g$body**$9350$RATN9)
                 g$r$9351$RATN9
                 g$mr$9352$RATN9)))
            (case-lambda
              ((g$a$9355$RATN9 g$b$9356$RATN9)
               ((case-lambda
                  ((g$b$9357$RATN9 g$a$9358$RATN9)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7237$RATN9
                          g$stx$9348$RATN9
                          (cdr g$fmls*$9349$RATN9)
                          (cdr g$body**$9350$RATN9)
                          g$r$9351$RATN9
                          g$mr$9352$RATN9)))
                     (case-lambda
                       ((g$a*$9361$RATN9 g$b*$9362$RATN9)
                        ((case-lambda
                           ((g$b*$9363$RATN9 g$a*$9364$RATN9)
                            (values
                              (cons g$a$9358$RATN9 g$a*$9364$RATN9)
                              (cons g$b$9357$RATN9 g$b*$9363$RATN9))))
                         g$b*$9362$RATN9
                         g$a*$9361$RATN9))))))
                g$b$9356$RATN9
                g$a$9355$RATN9))))))))
   (g$chi-defun$7238$RATN9
     g$chi-defun$10688$RATN9
     (case-lambda
       ((g$x$9365$RATN9 g$r$9366$RATN9 g$mr$9367$RATN9)
        ((case-lambda
           ((g$fmls$9368$RATN9 g$body*$9369$RATN9)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7236$RATN9
                   g$fmls$9368$RATN9
                   g$fmls$9368$RATN9
                   g$body*$9369$RATN9
                   g$r$9366$RATN9
                   g$mr$9367$RATN9)))
              (case-lambda
                ((g$fmls$9372$RATN9 g$body$9373$RATN9)
                 ((case-lambda
                    ((g$body$9374$RATN9 g$fmls$9375$RATN9)
                     (g$build-lambda$6868$RATN9
                       '#f
                       g$fmls$9375$RATN9
                       g$body$9374$RATN9)))
                  g$body$9373$RATN9
                  g$fmls$9372$RATN9))))))
         (car g$x$9365$RATN9)
         (cdr g$x$9365$RATN9)))))
   (g$chi-rhs$7239$RATN9
     g$chi-rhs$10689$RATN9
     (case-lambda
       ((g$rhs$9376$RATN9 g$r$9377$RATN9 g$mr$9378$RATN9)
        ((case-lambda
           ((g$t$9379$RATN9)
            (if (eqv? g$t$9379$RATN9 'defun)
              (g$chi-defun$7238$RATN9
                (cdr g$rhs$9376$RATN9)
                g$r$9377$RATN9
                g$mr$9378$RATN9)
              (if (eqv? g$t$9379$RATN9 'expr)
                ((case-lambda
                   ((g$expr$9381$RATN9)
                    (g$chi-expr$7233$RATN9
                      g$expr$9381$RATN9
                      g$r$9377$RATN9
                      g$mr$9378$RATN9)))
                 (cdr g$rhs$9376$RATN9))
                (if (eqv? g$t$9379$RATN9 'top-expr)
                  ((case-lambda
                     ((g$expr$9380$RATN9)
                      (g$build-sequence$6871$RATN9
                        '#f
                        (list
                          (g$chi-expr$7233$RATN9
                            g$expr$9380$RATN9
                            g$r$9377$RATN9
                            g$mr$9378$RATN9)
                          (g$build-void$6872$RATN9)))))
                   (cdr g$rhs$9376$RATN9))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$9376$RATN9))))))
         (car g$rhs$9376$RATN9)))))
   (g$expand-interaction-rhs*/init*$7240$RATN9
     g$expand-interaction-rhs*/init*$10690$RATN9
     (case-lambda
       ((g$lhs*$9382$RATN9
          g$rhs*$9383$RATN9
          g$init*$9384$RATN9
          g$r$9385$RATN9
          g$mr$9386$RATN9)
        ((letrec ((g$f$9387$RATN9
                    (case-lambda
                      ((g$lhs*$9388$RATN9 g$rhs*$9389$RATN9)
                       (if (null? g$lhs*$9388$RATN9)
                         (map (case-lambda
                                ((g$x$9390$RATN9)
                                 (g$chi-expr$7233$RATN9
                                   g$x$9390$RATN9
                                   g$r$9385$RATN9
                                   g$mr$9386$RATN9)))
                              g$init*$9384$RATN9)
                         ((case-lambda
                            ((g$lhs$9391$RATN9 g$rhs$9392$RATN9)
                             ((case-lambda
                                ((g$t$9393$RATN9)
                                 (if (eqv? g$t$9393$RATN9 'defun)
                                   ((case-lambda
                                      ((g$rhs$9396$RATN9)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$9391$RATN9
                                           g$rhs$9396$RATN9)
                                         (g$f$9387$RATN9
                                           (cdr g$lhs*$9388$RATN9)
                                           (cdr g$rhs*$9389$RATN9)))))
                                    (g$chi-defun$7238$RATN9
                                      (cdr g$rhs$9392$RATN9)
                                      g$r$9385$RATN9
                                      g$mr$9386$RATN9))
                                   (if (eqv? g$t$9393$RATN9 'expr)
                                     ((case-lambda
                                        ((g$rhs$9395$RATN9)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$9391$RATN9
                                             g$rhs$9395$RATN9)
                                           (g$f$9387$RATN9
                                             (cdr g$lhs*$9388$RATN9)
                                             (cdr g$rhs*$9389$RATN9)))))
                                      (g$chi-expr$7233$RATN9
                                        (cdr g$rhs$9392$RATN9)
                                        g$r$9385$RATN9
                                        g$mr$9386$RATN9))
                                     (if (eqv? g$t$9393$RATN9 'top-expr)
                                       ((case-lambda
                                          ((g$e$9394$RATN9)
                                           (cons
                                             g$e$9394$RATN9
                                             (g$f$9387$RATN9
                                               (cdr g$lhs*$9388$RATN9)
                                               (cdr g$rhs*$9389$RATN9)))))
                                        (g$chi-expr$7233$RATN9
                                          (cdr g$rhs$9392$RATN9)
                                          g$r$9385$RATN9
                                          g$mr$9386$RATN9))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$9392$RATN9))))))
                              (car g$rhs$9392$RATN9))))
                          (car g$lhs*$9388$RATN9)
                          (car g$rhs*$9389$RATN9)))))))
           g$f$9387$RATN9)
         g$lhs*$9382$RATN9
         g$rhs*$9383$RATN9))))
   (g$chi-rhs*$7241$RATN9
     g$chi-rhs*$10691$RATN9
     (case-lambda
       ((g$rhs*$9397$RATN9 g$r$9398$RATN9 g$mr$9399$RATN9)
        ((letrec ((g$f$9400$RATN9
                    (case-lambda
                      ((g$ls$9401$RATN9)
                       (if (null? g$ls$9401$RATN9)
                         '()
                         ((case-lambda
                            ((g$a$9402$RATN9)
                             (cons
                               g$a$9402$RATN9
                               (g$f$9400$RATN9 (cdr g$ls$9401$RATN9)))))
                          (g$chi-rhs$7239$RATN9
                            (car g$ls$9401$RATN9)
                            g$r$9398$RATN9
                            g$mr$9399$RATN9)))))))
           g$f$9400$RATN9)
         g$rhs*$9397$RATN9))))
   (g$find-bound=?$7242$RATN9
     g$find-bound=?$10692$RATN9
     (case-lambda
       ((g$x$9403$RATN9 g$lhs*$9404$RATN9 g$rhs*$9405$RATN9)
        (if (null? g$lhs*$9404$RATN9)
          '#f
          (if (g$bound-id=?$6940$RATN9 g$x$9403$RATN9 (car g$lhs*$9404$RATN9))
            (car g$rhs*$9405$RATN9)
            (g$find-bound=?$7242$RATN9
              g$x$9403$RATN9
              (cdr g$lhs*$9404$RATN9)
              (cdr g$rhs*$9405$RATN9)))))))
   (g$find-dups$7243$RATN9
     g$find-dups$10693$RATN9
     (case-lambda
       ((g$ls$9406$RATN9)
        ((letrec ((g$f$9407$RATN9
                    (case-lambda
                      ((g$ls$9408$RATN9 g$dups$9409$RATN9)
                       (if (null? g$ls$9408$RATN9)
                         g$dups$9409$RATN9
                         ((case-lambda
                            ((g$t$9410$RATN9)
                             (if g$t$9410$RATN9
                               ((case-lambda
                                  ((g$x$9411$RATN9)
                                   (g$f$9407$RATN9
                                     (cdr g$ls$9408$RATN9)
                                     (cons
                                       (list
                                         (car g$ls$9408$RATN9)
                                         g$x$9411$RATN9)
                                       g$dups$9409$RATN9))))
                                g$t$9410$RATN9)
                               (g$f$9407$RATN9
                                 (cdr g$ls$9408$RATN9)
                                 g$dups$9409$RATN9))))
                          (g$find-bound=?$7242$RATN9
                            (car g$ls$9408$RATN9)
                            (cdr g$ls$9408$RATN9)
                            (cdr g$ls$9408$RATN9))))))))
           g$f$9407$RATN9)
         g$ls$9406$RATN9
         '()))))
   (g$chi-internal$7244$RATN9
     g$chi-internal$10694$RATN9
     (case-lambda
       ((g$e*$9412$RATN9 g$r$9413$RATN9 g$mr$9414$RATN9)
        ((case-lambda
           ((g$rib$9415$RATN9)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7259$RATN9
                   (map (case-lambda
                          ((g$x$9423$RATN9)
                           (g$add-subst$6927$RATN9
                             g$rib$9415$RATN9
                             g$x$9423$RATN9)))
                        (g$syntax->list$6936$RATN9 g$e*$9412$RATN9))
                   g$r$9413$RATN9
                   g$mr$9414$RATN9
                   '()
                   '()
                   '()
                   '()
                   g$rib$9415$RATN9
                   '#f)))
              (case-lambda
                ((g$e*$9424$RATN9
                   g$r$9425$RATN9
                   g$mr$9426$RATN9
                   g$lex*$9427$RATN9
                   g$rhs*$9428$RATN9
                   g$mod**$9429$RATN9
                   g$kwd*$9430$RATN9)
                 ((case-lambda
                    ((g$kwd*$9431$RATN9
                       g$mod**$9432$RATN9
                       g$rhs*$9433$RATN9
                       g$lex*$9434$RATN9
                       g$mr$9435$RATN9
                       g$r$9436$RATN9
                       g$e*$9437$RATN9)
                     (begin
                       (if (null? g$e*$9437$RATN9)
                         (g$syntax-violation$7321$RATN9
                           '#f
                           '"no expression in body"
                           g$e*$9437$RATN9)
                         (void))
                       ((case-lambda
                          ((g$init*$9438$RATN9)
                           ((case-lambda
                              ((g$rhs*$9439$RATN9)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$6874$RATN9
                                     '#f
                                     (reverse g$lex*$9434$RATN9)
                                     (reverse g$rhs*$9439$RATN9)
                                     (g$build-sequence$6871$RATN9
                                       '#f
                                       g$init*$9438$RATN9)))))))
                            (g$chi-rhs*$7241$RATN9
                              g$rhs*$9433$RATN9
                              g$r$9436$RATN9
                              g$mr$9435$RATN9))))
                        (g$chi-expr*$7231$RATN9
                          (append
                            (apply append (reverse g$mod**$9432$RATN9))
                            g$e*$9437$RATN9)
                          g$r$9436$RATN9
                          g$mr$9435$RATN9)))))
                  g$kwd*$9430$RATN9
                  g$mod**$9429$RATN9
                  g$rhs*$9428$RATN9
                  g$lex*$9427$RATN9
                  g$mr$9426$RATN9
                  g$r$9425$RATN9
                  g$e*$9424$RATN9))))))
         (g$make-empty-rib$6900$RATN9)))))
   (g$parse-module$7245$RATN9
     g$parse-module$10695$RATN9
     (case-lambda
       ((g$e$9440$RATN9)
        ((case-lambda
           ((g$t$9441$RATN9)
            ((case-lambda
               ((g$ls/false$9442$RATN9)
                (if g$ls/false$9442$RATN9
                  (apply
                    (case-lambda
                      ((g$export*$9443$RATN9 g$b*$9444$RATN9)
                       (begin
                         (if (g$for-all$5365$RATN9
                               g$id?$6937$RATN9
                               g$export*$9443$RATN9)
                           (void)
                           (g$syntax-violation$7321$RATN9
                             '#f
                             '"module exports must be identifiers"
                             g$e$9440$RATN9))
                         (values
                           '#f
                           (list->vector g$export*$9443$RATN9)
                           g$b*$9444$RATN9))))
                    g$ls/false$9442$RATN9)
                  ((case-lambda
                     ((g$t$9445$RATN9)
                      ((case-lambda
                         ((g$ls/false$9446$RATN9)
                          (if g$ls/false$9446$RATN9
                            (apply
                              (case-lambda
                                ((g$name$9447$RATN9
                                   g$export*$9448$RATN9
                                   g$b*$9449$RATN9)
                                 (begin
                                   (if (g$id?$6937$RATN9 g$name$9447$RATN9)
                                     (void)
                                     (g$syntax-violation$7321$RATN9
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$9440$RATN9))
                                   (if (g$for-all$5365$RATN9
                                         g$id?$6937$RATN9
                                         g$export*$9448$RATN9)
                                     (void)
                                     (g$syntax-violation$7321$RATN9
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$9440$RATN9))
                                   (values
                                     g$name$9447$RATN9
                                     (list->vector g$export*$9448$RATN9)
                                     g$b*$9449$RATN9))))
                              g$ls/false$9446$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$9445$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$9445$RATN9
                         '(_ any each-any . each-any)))))
                   g$t$9441$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$9441$RATN9
               '(_ each-any . each-any)))))
         g$e$9440$RATN9))))
   (g$8131$7246$RATN9
     g$8131$10696$RATN9
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8134$RATN9
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$8133$7247$RATN9 g$8133$10697$RATN9 '#f)
   (g$8132$7248$RATN9
     g$8132$10698$RATN9
     (make-record-constructor-descriptor
       g$8131$7246$RATN9
       '#f
       g$8133$7247$RATN9))
   (g$module-interface?$7249$RATN9
     g$module-interface?$10699$RATN9
     (record-predicate g$8131$7246$RATN9))
   (g$make-module-interface$7250$RATN9
     g$make-module-interface$10700$RATN9
     (record-constructor g$8132$7248$RATN9))
   (g$module-interface-first-mark$7251$RATN9
     g$module-interface-first-mark$10701$RATN9
     (record-accessor g$8131$7246$RATN9 '0))
   (g$module-interface-exp-id-vec$7252$RATN9
     g$module-interface-exp-id-vec$10702$RATN9
     (record-accessor g$8131$7246$RATN9 '1))
   (g$module-interface-exp-lab-vec$7253$RATN9
     g$module-interface-exp-lab-vec$10703$RATN9
     (record-accessor g$8131$7246$RATN9 '2))
   (g$set-module-interface-first-mark!$7254$RATN9
     g$set-module-interface-first-mark!$10704$RATN9
     (record-mutator g$8131$7246$RATN9 '0))
   (g$set-module-interface-exp-id-vec!$7255$RATN9
     g$set-module-interface-exp-id-vec!$10705$RATN9
     (record-mutator g$8131$7246$RATN9 '1))
   (g$set-module-interface-exp-lab-vec!$7256$RATN9
     g$set-module-interface-exp-lab-vec!$10706$RATN9
     (record-mutator g$8131$7246$RATN9 '2))
   (g$module-interface-exp-id*$7257$RATN9
     g$module-interface-exp-id*$10707$RATN9
     (case-lambda
       ((g$iface$9450$RATN9 g$id$9451$RATN9)
        (letrec* ((g$diff-marks$9452$RATN9
                    (case-lambda
                      ((g$ls$9456$RATN9 g$x$9457$RATN9)
                       (begin
                         (if (null? g$ls$9456$RATN9)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$9458$RATN9)
                             (if (eq? g$a$9458$RATN9 g$x$9457$RATN9)
                               '()
                               (cons
                                 g$a$9458$RATN9
                                 (g$diff-marks$9452$RATN9
                                   (cdr g$ls$9456$RATN9)
                                   g$x$9457$RATN9)))))
                          (car g$ls$9456$RATN9)))))))
          ((case-lambda
             ((g$diff$9453$RATN9 g$id-vec$9454$RATN9)
              (if (null? g$diff$9453$RATN9)
                g$id-vec$9454$RATN9
                (vector-map
                  (case-lambda
                    ((g$x$9455$RATN9)
                     (g$make-stx$6910$RATN9
                       (g$stx-expr$6911$RATN9 g$x$9455$RATN9)
                       (append
                         g$diff$9453$RATN9
                         (g$stx-mark*$6912$RATN9 g$x$9455$RATN9))
                       '()
                       '())))
                  g$id-vec$9454$RATN9))))
           (g$diff-marks$9452$RATN9
             (g$stx-mark*$6912$RATN9 g$id$9451$RATN9)
             (g$module-interface-first-mark$7251$RATN9 g$iface$9450$RATN9))
           (g$module-interface-exp-id-vec$7252$RATN9 g$iface$9450$RATN9))))))
   (g$chi-internal-module$7258$RATN9
     g$chi-internal-module$10708$RATN9
     (case-lambda
       ((g$e$9459$RATN9
          g$r$9460$RATN9
          g$mr$9461$RATN9
          g$lex*$9462$RATN9
          g$rhs*$9463$RATN9
          g$mod**$9464$RATN9
          g$kwd*$9465$RATN9)
        (call-with-values
          (case-lambda (() (g$parse-module$7245$RATN9 g$e$9459$RATN9)))
          (case-lambda
            ((g$name$9469$RATN9 g$exp-id*$9470$RATN9 g$e*$9471$RATN9)
             ((case-lambda
                ((g$e*$9472$RATN9 g$exp-id*$9473$RATN9 g$name$9474$RATN9)
                 ((case-lambda
                    ((g$rib$9475$RATN9)
                     ((case-lambda
                        ((g$e*$9476$RATN9)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$7259$RATN9
                                    g$e*$9476$RATN9
                                    g$r$9460$RATN9
                                    g$mr$9461$RATN9
                                    g$lex*$9462$RATN9
                                    g$rhs*$9463$RATN9
                                    g$mod**$9464$RATN9
                                    g$kwd*$9465$RATN9
                                    g$rib$9475$RATN9
                                    '#f)))
                               (case-lambda
                                 ((g$e*$9484$RATN9
                                    g$r$9485$RATN9
                                    g$mr$9486$RATN9
                                    g$lex*$9487$RATN9
                                    g$rhs*$9488$RATN9
                                    g$mod**$9489$RATN9
                                    g$kwd*$9490$RATN9)
                                  ((case-lambda
                                     ((g$kwd*$9491$RATN9
                                        g$mod**$9492$RATN9
                                        g$rhs*$9493$RATN9
                                        g$lex*$9494$RATN9
                                        g$mr$9495$RATN9
                                        g$r$9496$RATN9
                                        g$e*$9497$RATN9)
                                      ((case-lambda
                                         ((g$exp-lab*$9498$RATN9
                                            g$mod**$9499$RATN9)
                                          (if (not g$name$9474$RATN9)
                                            (values
                                              g$lex*$9494$RATN9
                                              g$rhs*$9493$RATN9
                                              g$exp-id*$9473$RATN9
                                              g$exp-lab*$9498$RATN9
                                              g$r$9496$RATN9
                                              g$mr$9495$RATN9
                                              g$mod**$9499$RATN9
                                              g$kwd*$9491$RATN9)
                                            ((case-lambda
                                               ((g$lab$9500$RATN9
                                                  g$iface$9501$RATN9)
                                                (values
                                                  g$lex*$9494$RATN9
                                                  g$rhs*$9493$RATN9
                                                  (vector g$name$9474$RATN9)
                                                  (vector g$lab$9500$RATN9)
                                                  (cons
                                                    (cons
                                                      g$lab$9500$RATN9
                                                      (cons
                                                        '$module
                                                        g$iface$9501$RATN9))
                                                    g$r$9496$RATN9)
                                                  (cons
                                                    (cons
                                                      g$lab$9500$RATN9
                                                      (cons
                                                        '$module
                                                        g$iface$9501$RATN9))
                                                    g$mr$9495$RATN9)
                                                  g$mod**$9499$RATN9
                                                  g$kwd*$9491$RATN9)))
                                             (g$gen-label$6883$RATN9 'module)
                                             (g$make-module-interface$7250$RATN9
                                               (car (g$stx-mark*$6912$RATN9
                                                      g$name$9474$RATN9))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$9502$RATN9)
                                                    (g$make-stx$6910$RATN9
                                                      (g$stx-expr$6911$RATN9
                                                        g$x$9502$RATN9)
                                                      (g$stx-mark*$6912$RATN9
                                                        g$x$9502$RATN9)
                                                      '()
                                                      '())))
                                                 g$exp-id*$9473$RATN9)
                                               g$exp-lab*$9498$RATN9)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$9503$RATN9)
                                            ((case-lambda
                                               ((g$t$9504$RATN9)
                                                (if g$t$9504$RATN9
                                                  g$t$9504$RATN9
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$7321$RATN9
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$9503$RATN9)))))
                                             (g$id->label$6950$RATN9
                                               (g$make-stx$6910$RATN9
                                                 (g$id->sym$6938$RATN9
                                                   g$x$9503$RATN9)
                                                 (g$stx-mark*$6912$RATN9
                                                   g$x$9503$RATN9)
                                                 (list g$rib$9475$RATN9)
                                                 '())))))
                                         g$exp-id*$9473$RATN9)
                                       (cons
                                         g$e*$9497$RATN9
                                         g$mod**$9492$RATN9))))
                                   g$kwd*$9490$RATN9
                                   g$mod**$9489$RATN9
                                   g$rhs*$9488$RATN9
                                   g$lex*$9487$RATN9
                                   g$mr$9486$RATN9
                                   g$r$9485$RATN9
                                   g$e*$9484$RATN9)))))))))
                      (map (case-lambda
                             ((g$x$9505$RATN9)
                              (g$add-subst$6927$RATN9
                                g$rib$9475$RATN9
                                g$x$9505$RATN9)))
                           (g$syntax->list$6936$RATN9 g$e*$9472$RATN9)))))
                  (g$make-empty-rib$6900$RATN9))))
              g$e*$9471$RATN9
              g$exp-id*$9470$RATN9
              g$name$9469$RATN9)))))))
   (g$chi-body*$7259$RATN9
     g$chi-body*$10709$RATN9
     (case-lambda
       ((g$e*$9506$RATN9
          g$r$9507$RATN9
          g$mr$9508$RATN9
          g$lex*$9509$RATN9
          g$rhs*$9510$RATN9
          g$mod**$9511$RATN9
          g$kwd*$9512$RATN9
          g$rib$9513$RATN9
          g$top?$9514$RATN9)
        (if (null? g$e*$9506$RATN9)
          (values
            g$e*$9506$RATN9
            g$r$9507$RATN9
            g$mr$9508$RATN9
            g$lex*$9509$RATN9
            g$rhs*$9510$RATN9
            g$mod**$9511$RATN9
            g$kwd*$9512$RATN9)
          ((case-lambda
             ((g$e$9515$RATN9)
              (call-with-values
                (case-lambda
                  (() (g$syntax-type$6957$RATN9 g$e$9515$RATN9 g$r$9507$RATN9)))
                (case-lambda
                  ((g$type$9519$RATN9 g$value$9520$RATN9 g$kwd$9521$RATN9)
                   ((case-lambda
                      ((g$kwd$9522$RATN9 g$value$9523$RATN9 g$type$9524$RATN9)
                       ((case-lambda
                          ((g$kwd*$9525$RATN9)
                           ((case-lambda
                              ((g$t$9526$RATN9)
                               (if (eqv? g$t$9526$RATN9 'define)
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7155$RATN9
                                        g$e$9515$RATN9)))
                                   (case-lambda
                                     ((g$id$9632$RATN9 g$rhs$9633$RATN9)
                                      ((case-lambda
                                         ((g$rhs$9634$RATN9 g$id$9635$RATN9)
                                          (begin
                                            (if (g$bound-id-member?$6944$RATN9
                                                  g$id$9635$RATN9
                                                  g$kwd*$9525$RATN9)
                                              (g$syntax-violation$7321$RATN9
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$9515$RATN9)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$6885$RATN9
                                                   g$id$9635$RATN9
                                                   g$rib$9513$RATN9)))
                                              (case-lambda
                                                ((g$lab$9638$RATN9
                                                   g$lex$9639$RATN9)
                                                 ((case-lambda
                                                    ((g$lex$9640$RATN9
                                                       g$lab$9641$RATN9)
                                                     (begin
                                                       (g$extend-rib!$6901$RATN9
                                                         g$rib$9513$RATN9
                                                         g$id$9635$RATN9
                                                         g$lab$9641$RATN9)
                                                       (g$chi-body*$7259$RATN9
                                                         (cdr g$e*$9506$RATN9)
                                                         (g$add-lexical$7162$RATN9
                                                           g$lab$9641$RATN9
                                                           g$lex$9640$RATN9
                                                           g$r$9507$RATN9)
                                                         g$mr$9508$RATN9
                                                         (cons
                                                           g$lex$9640$RATN9
                                                           g$lex*$9509$RATN9)
                                                         (cons
                                                           g$rhs$9634$RATN9
                                                           g$rhs*$9510$RATN9)
                                                         g$mod**$9511$RATN9
                                                         g$kwd*$9525$RATN9
                                                         g$rib$9513$RATN9
                                                         g$top?$9514$RATN9))))
                                                  g$lex$9639$RATN9
                                                  g$lab$9638$RATN9)))))))
                                       g$rhs$9633$RATN9
                                       g$id$9632$RATN9))))
                                 (if (eqv? g$t$9526$RATN9 'define-syntax)
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7156$RATN9
                                          g$e$9515$RATN9)))
                                     (case-lambda
                                       ((g$id$9623$RATN9 g$rhs$9624$RATN9)
                                        ((case-lambda
                                           ((g$rhs$9625$RATN9 g$id$9626$RATN9)
                                            (begin
                                              (if (g$bound-id-member?$6944$RATN9
                                                    g$id$9626$RATN9
                                                    g$kwd*$9525$RATN9)
                                                (g$syntax-violation$7321$RATN9
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$9515$RATN9)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$9627$RATN9
                                                    g$expanded-rhs$9628$RATN9)
                                                  (begin
                                                    (g$extend-rib!$6901$RATN9
                                                      g$rib$9513$RATN9
                                                      g$id$9626$RATN9
                                                      g$lab$9627$RATN9)
                                                    ((case-lambda
                                                       ((g$b$9629$RATN9)
                                                        (g$chi-body*$7259$RATN9
                                                          (cdr g$e*$9506$RATN9)
                                                          (cons
                                                            (cons
                                                              g$lab$9627$RATN9
                                                              g$b$9629$RATN9)
                                                            g$r$9507$RATN9)
                                                          (cons
                                                            (cons
                                                              g$lab$9627$RATN9
                                                              g$b$9629$RATN9)
                                                            g$mr$9508$RATN9)
                                                          g$lex*$9509$RATN9
                                                          g$rhs*$9510$RATN9
                                                          g$mod**$9511$RATN9
                                                          g$kwd*$9525$RATN9
                                                          g$rib$9513$RATN9
                                                          g$top?$9514$RATN9)))
                                                     (g$make-eval-transformer$6969$RATN9
                                                       g$expanded-rhs$9628$RATN9)))))
                                               (g$gen-define-label$6886$RATN9
                                                 g$id$9626$RATN9
                                                 g$rib$9513$RATN9)
                                               (g$expand-transformer$7260$RATN9
                                                 g$rhs$9625$RATN9
                                                 g$mr$9508$RATN9)))))
                                         g$rhs$9624$RATN9
                                         g$id$9623$RATN9))))
                                   (if (memv
                                         g$t$9526$RATN9
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$9608$RATN9)
                                         ((case-lambda
                                            ((g$ls/false$9609$RATN9)
                                             (if (if g$ls/false$9609$RATN9
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$9610$RATN9
                                                            g$xrhs*$9611$RATN9
                                                            g$xbody*$9612$RATN9)
                                                          (if (g$valid-bound-ids?$6942$RATN9
                                                                g$xlhs*$9610$RATN9)
                                                            (void)
                                                            (g$syntax-violation$7321$RATN9
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$9515$RATN9))))
                                                       g$ls/false$9609$RATN9))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$9613$RATN9
                                                      g$xrhs*$9614$RATN9
                                                      g$xbody*$9615$RATN9)
                                                    ((case-lambda
                                                       ((g$xlab*$9616$RATN9)
                                                        ((case-lambda
                                                           ((g$xrib$9617$RATN9)
                                                            ((case-lambda
                                                               ((g$xb*$9618$RATN9)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$7259$RATN9
                                                                      (append
                                                                        (map (case-lambda
                                                                               ((g$x$9619$RATN9)
                                                                                (g$add-subst$6927$RATN9
                                                                                  g$xrib$9617$RATN9
                                                                                  g$x$9619$RATN9)))
                                                                             g$xbody*$9615$RATN9)
                                                                        (cdr g$e*$9506$RATN9))
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9616$RATN9
                                                                             g$xb*$9618$RATN9)
                                                                        g$r$9507$RATN9)
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9616$RATN9
                                                                             g$xb*$9618$RATN9)
                                                                        g$mr$9508$RATN9)
                                                                      g$lex*$9509$RATN9
                                                                      g$rhs*$9510$RATN9
                                                                      g$mod**$9511$RATN9
                                                                      g$kwd*$9525$RATN9
                                                                      g$rib$9513$RATN9
                                                                      g$top?$9514$RATN9))))))
                                                             (map (case-lambda
                                                                    ((g$x$9620$RATN9)
                                                                     (g$make-eval-transformer$6969$RATN9
                                                                       (g$expand-transformer$7260$RATN9
                                                                         (if (eq? g$type$9524$RATN9
                                                                                  'let-syntax)
                                                                           g$x$9620$RATN9
                                                                           (g$add-subst$6927$RATN9
                                                                             g$xrib$9617$RATN9
                                                                             g$x$9620$RATN9))
                                                                         g$mr$9508$RATN9))))
                                                                  g$xrhs*$9614$RATN9))))
                                                         (g$make-full-rib$6905$RATN9
                                                           g$xlhs*$9613$RATN9
                                                           g$xlab*$9616$RATN9))))
                                                     (map g$gen-label$6883$RATN9
                                                          g$xlhs*$9613$RATN9))))
                                                 g$ls/false$9609$RATN9)
                                               (g$syntax-violation$7321$RATN9
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9608$RATN9))))
                                          (g$syntax-dispatch$7215$RATN9
                                            g$t$9608$RATN9
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$9515$RATN9)
                                     (if (eqv? g$t$9526$RATN9 'begin)
                                       ((case-lambda
                                          ((g$t$9605$RATN9)
                                           ((case-lambda
                                              ((g$ls/false$9606$RATN9)
                                               (if g$ls/false$9606$RATN9
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$9607$RATN9)
                                                      (g$chi-body*$7259$RATN9
                                                        (append
                                                          g$x*$9607$RATN9
                                                          (cdr g$e*$9506$RATN9))
                                                        g$r$9507$RATN9
                                                        g$mr$9508$RATN9
                                                        g$lex*$9509$RATN9
                                                        g$rhs*$9510$RATN9
                                                        g$mod**$9511$RATN9
                                                        g$kwd*$9525$RATN9
                                                        g$rib$9513$RATN9
                                                        g$top?$9514$RATN9)))
                                                   g$ls/false$9606$RATN9)
                                                 (g$syntax-violation$7321$RATN9
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$9605$RATN9))))
                                            (g$syntax-dispatch$7215$RATN9
                                              g$t$9605$RATN9
                                              '(_ . each-any)))))
                                        g$e$9515$RATN9)
                                       (if (memv
                                             g$t$9526$RATN9
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7259$RATN9
                                           (cons
                                             (g$add-subst$6927$RATN9
                                               g$rib$9513$RATN9
                                               (g$chi-global-macro$7230$RATN9
                                                 g$value$9523$RATN9
                                                 g$e$9515$RATN9))
                                             (cdr g$e*$9506$RATN9))
                                           g$r$9507$RATN9
                                           g$mr$9508$RATN9
                                           g$lex*$9509$RATN9
                                           g$rhs*$9510$RATN9
                                           g$mod**$9511$RATN9
                                           g$kwd*$9525$RATN9
                                           g$rib$9513$RATN9
                                           g$top?$9514$RATN9)
                                         (if (memv
                                               g$t$9526$RATN9
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7259$RATN9
                                             (cons
                                               (g$add-subst$6927$RATN9
                                                 g$rib$9513$RATN9
                                                 (g$chi-local-macro$7229$RATN9
                                                   g$value$9523$RATN9
                                                   g$e$9515$RATN9))
                                               (cdr g$e*$9506$RATN9))
                                             g$r$9507$RATN9
                                             g$mr$9508$RATN9
                                             g$lex*$9509$RATN9
                                             g$rhs*$9510$RATN9
                                             g$mod**$9511$RATN9
                                             g$kwd*$9525$RATN9
                                             g$rib$9513$RATN9
                                             g$top?$9514$RATN9)
                                           (if (memv
                                                 g$t$9526$RATN9
                                                 '(macro macro!))
                                             (g$chi-body*$7259$RATN9
                                               (cons
                                                 (g$add-subst$6927$RATN9
                                                   g$rib$9513$RATN9
                                                   (g$chi-macro$7228$RATN9
                                                     g$value$9523$RATN9
                                                     g$e$9515$RATN9))
                                                 (cdr g$e*$9506$RATN9))
                                               g$r$9507$RATN9
                                               g$mr$9508$RATN9
                                               g$lex*$9509$RATN9
                                               g$rhs*$9510$RATN9
                                               g$mod**$9511$RATN9
                                               g$kwd*$9525$RATN9
                                               g$rib$9513$RATN9
                                               g$top?$9514$RATN9)
                                             (if (eqv? g$t$9526$RATN9 'module)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7258$RATN9
                                                      g$e$9515$RATN9
                                                      g$r$9507$RATN9
                                                      g$mr$9508$RATN9
                                                      g$lex*$9509$RATN9
                                                      g$rhs*$9510$RATN9
                                                      g$mod**$9511$RATN9
                                                      g$kwd*$9525$RATN9)))
                                                 (case-lambda
                                                   ((g$lex*$9587$RATN9
                                                      g$rhs*$9588$RATN9
                                                      g$m-exp-id*$9589$RATN9
                                                      g$m-exp-lab*$9590$RATN9
                                                      g$r$9591$RATN9
                                                      g$mr$9592$RATN9
                                                      g$mod**$9593$RATN9
                                                      g$kwd*$9594$RATN9)
                                                    ((case-lambda
                                                       ((g$kwd*$9595$RATN9
                                                          g$mod**$9596$RATN9
                                                          g$mr$9597$RATN9
                                                          g$r$9598$RATN9
                                                          g$m-exp-lab*$9599$RATN9
                                                          g$m-exp-id*$9600$RATN9
                                                          g$rhs*$9601$RATN9
                                                          g$lex*$9602$RATN9)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$9603$RATN9
                                                                 g$lab$9604$RATN9)
                                                               (g$extend-rib!$6901$RATN9
                                                                 g$rib$9513$RATN9
                                                                 g$id$9603$RATN9
                                                                 g$lab$9604$RATN9)))
                                                            g$m-exp-id*$9600$RATN9
                                                            g$m-exp-lab*$9599$RATN9)
                                                          (g$chi-body*$7259$RATN9
                                                            (cdr g$e*$9506$RATN9)
                                                            g$r$9598$RATN9
                                                            g$mr$9597$RATN9
                                                            g$lex*$9602$RATN9
                                                            g$rhs*$9601$RATN9
                                                            g$mod**$9596$RATN9
                                                            g$kwd*$9595$RATN9
                                                            g$rib$9513$RATN9
                                                            g$top?$9514$RATN9))))
                                                     g$kwd*$9594$RATN9
                                                     g$mod**$9593$RATN9
                                                     g$mr$9592$RATN9
                                                     g$r$9591$RATN9
                                                     g$m-exp-lab*$9590$RATN9
                                                     g$m-exp-id*$9589$RATN9
                                                     g$rhs*$9588$RATN9
                                                     g$lex*$9587$RATN9))))
                                               (if (eqv?
                                                     g$t$9526$RATN9
                                                     'library)
                                                 (begin
                                                   (g$library-expander$7308$RATN9
                                                     (g$stx->datum$6948$RATN9
                                                       g$e$9515$RATN9))
                                                   (g$chi-body*$7259$RATN9
                                                     (cdr g$e*$9506$RATN9)
                                                     g$r$9507$RATN9
                                                     g$mr$9508$RATN9
                                                     g$lex*$9509$RATN9
                                                     g$rhs*$9510$RATN9
                                                     g$mod**$9511$RATN9
                                                     g$kwd*$9525$RATN9
                                                     g$rib$9513$RATN9
                                                     g$top?$9514$RATN9))
                                                 (if (eqv?
                                                       g$t$9526$RATN9
                                                       'import)
                                                   (begin
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$9527$RATN9
                                                                     (case-lambda
                                                                       ((g$e$9569$RATN9)
                                                                        ((case-lambda
                                                                           ((g$t$9570$RATN9)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9571$RATN9)
                                                                                (if (if g$ls/false$9571$RATN9
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9572$RATN9)
                                                                                             (g$id?$6937$RATN9
                                                                                               g$id$9572$RATN9)))
                                                                                          g$ls/false$9571$RATN9))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9573$RATN9)
                                                                                       '#t))
                                                                                    g$ls/false$9571$RATN9)
                                                                                  ((case-lambda
                                                                                     ((g$t$9574$RATN9)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9575$RATN9)
                                                                                          (if g$ls/false$9575$RATN9
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$9576$RATN9)
                                                                                                 '#f))
                                                                                              g$ls/false$9575$RATN9)
                                                                                            ((case-lambda
                                                                                               ((g$t$9577$RATN9)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$9578$RATN9)
                                                                                                    (if g$ls/false$9578$RATN9
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$7321$RATN9
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$9569$RATN9)))
                                                                                                        g$ls/false$9578$RATN9)
                                                                                                      (g$syntax-violation$7321$RATN9
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$9577$RATN9))))
                                                                                                 (g$syntax-dispatch$7215$RATN9
                                                                                                   g$t$9577$RATN9
                                                                                                   '_))))
                                                                                             g$t$9574$RATN9))))
                                                                                       (g$syntax-dispatch$7215$RATN9
                                                                                         g$t$9574$RATN9
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$9570$RATN9))))
                                                                             (g$syntax-dispatch$7215$RATN9
                                                                               g$t$9570$RATN9
                                                                               '(_ any)))))
                                                                         g$e$9569$RATN9))))
                                                                   (g$module-import$9528$RATN9
                                                                     (case-lambda
                                                                       ((g$e$9552$RATN9
                                                                          g$r$9553$RATN9)
                                                                        ((case-lambda
                                                                           ((g$t$9554$RATN9)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9555$RATN9)
                                                                                (if (if g$ls/false$9555$RATN9
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9556$RATN9)
                                                                                             (g$id?$6937$RATN9
                                                                                               g$id$9556$RATN9)))
                                                                                          g$ls/false$9555$RATN9))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9557$RATN9)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$6957$RATN9
                                                                                              g$id$9557$RATN9
                                                                                              g$r$9553$RATN9)))
                                                                                         (case-lambda
                                                                                           ((g$type$9561$RATN9
                                                                                              g$value$9562$RATN9
                                                                                              g$kwd$9563$RATN9)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$9564$RATN9
                                                                                                  g$value$9565$RATN9
                                                                                                  g$type$9566$RATN9)
                                                                                                ((case-lambda
                                                                                                   ((g$t$9567$RATN9)
                                                                                                    (if (eqv?
                                                                                                          g$t$9567$RATN9
                                                                                                          '$module)
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$9568$RATN9)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7257$RATN9
                                                                                                              g$iface$9568$RATN9
                                                                                                              g$id$9557$RATN9)
                                                                                                            (g$module-interface-exp-lab-vec$7253$RATN9
                                                                                                              g$iface$9568$RATN9))))
                                                                                                       g$value$9565$RATN9)
                                                                                                      (g$syntax-violation$7321$RATN9
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$9552$RATN9))))
                                                                                                 g$type$9566$RATN9)))
                                                                                             g$kwd$9563$RATN9
                                                                                             g$value$9562$RATN9
                                                                                             g$type$9561$RATN9))))))
                                                                                    g$ls/false$9555$RATN9)
                                                                                  (g$syntax-violation$7321$RATN9
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$9554$RATN9))))
                                                                             (g$syntax-dispatch$7215$RATN9
                                                                               g$t$9554$RATN9
                                                                               '(_ any)))))
                                                                         g$e$9552$RATN9))))
                                                                   (g$library-import$9529$RATN9
                                                                     (case-lambda
                                                                       ((g$e$9538$RATN9)
                                                                        ((case-lambda
                                                                           ((g$t$9539$RATN9)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9540$RATN9)
                                                                                (if g$ls/false$9540$RATN9
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$9541$RATN9
                                                                                         g$imp*$9542$RATN9)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$7264$RATN9
                                                                                              (g$syntax->datum$7324$RATN9
                                                                                                g$imp*$9542$RATN9))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$9545$RATN9
                                                                                              g$subst-labels$9546$RATN9)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$9547$RATN9
                                                                                                  g$subst-names$9548$RATN9)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$9549$RATN9)
                                                                                                       (g$datum->stx$6920$RATN9
                                                                                                         g$ctxt$9541$RATN9
                                                                                                         g$name$9549$RATN9)))
                                                                                                    g$subst-names$9548$RATN9)
                                                                                                  g$subst-labels$9547$RATN9)))
                                                                                             g$subst-labels$9546$RATN9
                                                                                             g$subst-names$9545$RATN9))))))
                                                                                    g$ls/false$9540$RATN9)
                                                                                  ((case-lambda
                                                                                     ((g$t$9550$RATN9)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9551$RATN9)
                                                                                          (if g$ls/false$9551$RATN9
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7321$RATN9
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$9538$RATN9)))
                                                                                              g$ls/false$9551$RATN9)
                                                                                            (g$syntax-violation$7321$RATN9
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9550$RATN9))))
                                                                                       (g$syntax-dispatch$7215$RATN9
                                                                                         g$t$9550$RATN9
                                                                                         '_))))
                                                                                   g$t$9539$RATN9))))
                                                                             (g$syntax-dispatch$7215$RATN9
                                                                               g$t$9539$RATN9
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$9538$RATN9)))))
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (if (g$module-import?$9527$RATN9
                                                                      g$e$9515$RATN9)
                                                                  (g$module-import$9528$RATN9
                                                                    g$e$9515$RATN9
                                                                    g$r$9507$RATN9)
                                                                  (g$library-import$9529$RATN9
                                                                    g$e$9515$RATN9))))
                                                             (case-lambda
                                                               ((g$id*$9532$RATN9
                                                                  g$lab*$9533$RATN9)
                                                                ((case-lambda
                                                                   ((g$lab*$9534$RATN9
                                                                      g$id*$9535$RATN9)
                                                                    (vector-for-each
                                                                      (case-lambda
                                                                        ((g$id$9536$RATN9
                                                                           g$lab$9537$RATN9)
                                                                         (g$extend-rib!$6901$RATN9
                                                                           g$rib$9513$RATN9
                                                                           g$id$9536$RATN9
                                                                           g$lab$9537$RATN9)))
                                                                      g$id*$9535$RATN9
                                                                      g$lab*$9534$RATN9)))
                                                                 g$lab*$9533$RATN9
                                                                 g$id*$9532$RATN9))))))))
                                                     (g$chi-body*$7259$RATN9
                                                       (cdr g$e*$9506$RATN9)
                                                       g$r$9507$RATN9
                                                       g$mr$9508$RATN9
                                                       g$lex*$9509$RATN9
                                                       g$rhs*$9510$RATN9
                                                       g$mod**$9511$RATN9
                                                       g$kwd*$9525$RATN9
                                                       g$rib$9513$RATN9
                                                       g$top?$9514$RATN9))
                                                   (if g$top?$9514$RATN9
                                                     (g$chi-body*$7259$RATN9
                                                       (cdr g$e*$9506$RATN9)
                                                       g$r$9507$RATN9
                                                       g$mr$9508$RATN9
                                                       (cons
                                                         (g$gen-lexical$6881$RATN9
                                                           'dummy)
                                                         g$lex*$9509$RATN9)
                                                       (cons
                                                         (cons
                                                           'top-expr
                                                           g$e$9515$RATN9)
                                                         g$rhs*$9510$RATN9)
                                                       g$mod**$9511$RATN9
                                                       g$kwd*$9525$RATN9
                                                       g$rib$9513$RATN9
                                                       g$top?$9514$RATN9)
                                                     (values
                                                       g$e*$9506$RATN9
                                                       g$r$9507$RATN9
                                                       g$mr$9508$RATN9
                                                       g$lex*$9509$RATN9
                                                       g$rhs*$9510$RATN9
                                                       g$mod**$9511$RATN9
                                                       g$kwd*$9525$RATN9))))))))))))))
                            g$type$9524$RATN9)))
                        (if (g$id?$6937$RATN9 g$kwd$9522$RATN9)
                          (cons g$kwd$9522$RATN9 g$kwd*$9512$RATN9)
                          g$kwd*$9512$RATN9))))
                    g$kwd$9521$RATN9
                    g$value$9520$RATN9
                    g$type$9519$RATN9))))))
           (car g$e*$9506$RATN9))))))
   (g$expand-transformer$7260$RATN9
     g$expand-transformer$10710$RATN9
     (case-lambda
       ((g$expr$9642$RATN9 g$r$9643$RATN9)
        ((case-lambda
           ((g$rtc$9644$RATN9)
            ((case-lambda
               ((g$expanded-rhs$9645$RATN9)
                (begin
                  (for-each
                    ((case-lambda
                       ((g$mark-visit$9646$RATN9)
                        (case-lambda
                          ((g$x$9647$RATN9)
                           (begin
                             (g$invoke-library$6752$RATN9 g$x$9647$RATN9)
                             (g$mark-visit$9646$RATN9 g$x$9647$RATN9))))))
                     (g$vis-collector$7268$RATN9))
                    (g$rtc$9644$RATN9))
                  g$expanded-rhs$9645$RATN9)))
             ((case-lambda
                ((g$inv-collector$9652$RATN9
                   g$vis-collector$9653$RATN9
                   g$inv-collector$9654$RATN9
                   g$vis-collector$9655$RATN9)
                 ((case-lambda
                    ((g$swap$9656$RATN9)
                     (dynamic-wind
                       g$swap$9656$RATN9
                       (case-lambda
                         (()
                          (g$chi-expr$7233$RATN9
                            g$expr$9642$RATN9
                            g$r$9643$RATN9
                            g$r$9643$RATN9)))
                       g$swap$9656$RATN9)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$9657$RATN9)
                           (begin
                             (g$inv-collector$9652$RATN9
                               g$inv-collector$9654$RATN9)
                             (set! g$inv-collector$9654$RATN9 g$t$9657$RATN9))))
                        (g$inv-collector$9652$RATN9))
                       ((case-lambda
                          ((g$t$9658$RATN9)
                           (begin
                             (g$vis-collector$9653$RATN9
                               g$vis-collector$9655$RATN9)
                             (set! g$vis-collector$9655$RATN9 g$t$9658$RATN9))))
                        (g$vis-collector$9653$RATN9))))))))
              g$inv-collector$7267$RATN9
              g$vis-collector$7268$RATN9
              g$rtc$9644$RATN9
              (case-lambda ((g$x$9659$RATN9) (values)))))))
         (g$make-collector$7266$RATN9)))))
   (g$parse-exports$7261$RATN9
     g$parse-exports$10711$RATN9
     (case-lambda
       ((g$exp*$9660$RATN9)
        (letrec* ((g$idsyn?$9661$RATN9
                    (case-lambda
                      ((g$x$9676$RATN9)
                       (symbol? (g$syntax->datum$7324$RATN9 g$x$9676$RATN9))))))
          ((letrec ((g$f$9662$RATN9
                      (case-lambda
                        ((g$exp*$9663$RATN9 g$int*$9664$RATN9 g$ext*$9665$RATN9)
                         (if (null? g$exp*$9663$RATN9)
                           (begin
                             ((case-lambda
                                ((g$id*$9666$RATN9)
                                 (if (g$valid-bound-ids?$6942$RATN9
                                       g$id*$9666$RATN9)
                                   (void)
                                   (g$syntax-violation$7321$RATN9
                                     'export
                                     '"invalid exports"
                                     (g$find-dups$7243$RATN9
                                       g$id*$9666$RATN9)))))
                              (map (case-lambda
                                     ((g$x$9667$RATN9)
                                      (g$make-stx$6910$RATN9
                                        g$x$9667$RATN9
                                        g$top-mark*$6879$RATN9
                                        '()
                                        '())))
                                   g$ext*$9665$RATN9))
                             (values
                               (map g$syntax->datum$7324$RATN9
                                    g$int*$9664$RATN9)
                               (map g$syntax->datum$7324$RATN9
                                    g$ext*$9665$RATN9)))
                           ((case-lambda
                              ((g$t$9668$RATN9)
                               ((case-lambda
                                  ((g$ls/false$9669$RATN9)
                                   (if g$ls/false$9669$RATN9
                                     (apply
                                       (case-lambda
                                         ((g$rename$9670$RATN9
                                            g$i*$9671$RATN9
                                            g$e*$9672$RATN9)
                                          (begin
                                            (if (if (eq? (g$syntax->datum$7324$RATN9
                                                           g$rename$9670$RATN9)
                                                         'rename)
                                                  (if (g$for-all$5365$RATN9
                                                        g$idsyn?$9661$RATN9
                                                        g$i*$9671$RATN9)
                                                    (begin
                                                      '#f
                                                      (g$for-all$5365$RATN9
                                                        g$idsyn?$9661$RATN9
                                                        g$e*$9672$RATN9))
                                                    '#f)
                                                  '#f)
                                              (void)
                                              (g$syntax-violation$7321$RATN9
                                                'export
                                                '"invalid export specifier"
                                                (car g$exp*$9663$RATN9)))
                                            (g$f$9662$RATN9
                                              (cdr g$exp*$9663$RATN9)
                                              (append
                                                g$i*$9671$RATN9
                                                g$int*$9664$RATN9)
                                              (append
                                                g$e*$9672$RATN9
                                                g$ext*$9665$RATN9)))))
                                       g$ls/false$9669$RATN9)
                                     ((case-lambda
                                        ((g$t$9673$RATN9)
                                         ((case-lambda
                                            ((g$ls/false$9674$RATN9)
                                             (if g$ls/false$9674$RATN9
                                               (apply
                                                 (case-lambda
                                                   ((g$ie$9675$RATN9)
                                                    (begin
                                                      (if (g$idsyn?$9661$RATN9
                                                            g$ie$9675$RATN9)
                                                        (void)
                                                        (g$syntax-violation$7321$RATN9
                                                          'export
                                                          '"invalid export"
                                                          g$ie$9675$RATN9))
                                                      (g$f$9662$RATN9
                                                        (cdr g$exp*$9663$RATN9)
                                                        (cons
                                                          g$ie$9675$RATN9
                                                          g$int*$9664$RATN9)
                                                        (cons
                                                          g$ie$9675$RATN9
                                                          g$ext*$9665$RATN9)))))
                                                 g$ls/false$9674$RATN9)
                                               (g$syntax-violation$7321$RATN9
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9673$RATN9))))
                                          (g$syntax-dispatch$7215$RATN9
                                            g$t$9673$RATN9
                                            'any))))
                                      g$t$9668$RATN9))))
                                (g$syntax-dispatch$7215$RATN9
                                  g$t$9668$RATN9
                                  '(any . #(each (any any)))))))
                            (car g$exp*$9663$RATN9)))))))
             g$f$9662$RATN9)
           g$exp*$9660$RATN9
           '()
           '())))))
   (g$parse-library-name$7262$RATN9
     g$parse-library-name$10712$RATN9
     (case-lambda
       ((g$spec$9677$RATN9)
        (letrec* ((g$parse$9678$RATN9
                    (case-lambda
                      ((g$x$9685$RATN9)
                       ((case-lambda
                          ((g$t$9686$RATN9)
                           ((case-lambda
                              ((g$ls/false$9687$RATN9)
                               (if (if g$ls/false$9687$RATN9
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$9688$RATN9)
                                            (g$for-all$5365$RATN9
                                              (case-lambda
                                                ((g$x$9689$RATN9)
                                                 ((case-lambda
                                                    ((g$x$9690$RATN9)
                                                     (if (integer?
                                                           g$x$9690$RATN9)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$9690$RATN9))
                                                       '#f)))
                                                  (g$syntax->datum$7324$RATN9
                                                    g$x$9689$RATN9))))
                                              g$v*$9688$RATN9)))
                                         g$ls/false$9687$RATN9))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$9691$RATN9)
                                      (values
                                        '()
                                        (map g$syntax->datum$7324$RATN9
                                             g$v*$9691$RATN9))))
                                   g$ls/false$9687$RATN9)
                                 ((case-lambda
                                    ((g$t$9692$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$9693$RATN9)
                                         (if (if g$ls/false$9693$RATN9
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$9694$RATN9
                                                        g$rest$9695$RATN9)
                                                      (symbol?
                                                        (g$syntax->datum$7324$RATN9
                                                          g$x$9694$RATN9))))
                                                   g$ls/false$9693$RATN9))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$9696$RATN9
                                                  g$rest$9697$RATN9)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$9678$RATN9
                                                       g$rest$9697$RATN9)))
                                                  (case-lambda
                                                    ((g$x*$9700$RATN9
                                                       g$v*$9701$RATN9)
                                                     ((case-lambda
                                                        ((g$v*$9702$RATN9
                                                           g$x*$9703$RATN9)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$7324$RATN9
                                                               g$x$9696$RATN9)
                                                             g$x*$9703$RATN9)
                                                           g$v*$9702$RATN9)))
                                                      g$v*$9701$RATN9
                                                      g$x*$9700$RATN9))))))
                                             g$ls/false$9693$RATN9)
                                           ((case-lambda
                                              ((g$t$9704$RATN9)
                                               ((case-lambda
                                                  ((g$ls/false$9705$RATN9)
                                                   (if g$ls/false$9705$RATN9
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$9705$RATN9)
                                                     ((case-lambda
                                                        ((g$t$9706$RATN9)
                                                         ((case-lambda
                                                            ((g$ls/false$9707$RATN9)
                                                             (if g$ls/false$9707$RATN9
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7321$RATN9
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$9677$RATN9)))
                                                                 g$ls/false$9707$RATN9)
                                                               (g$syntax-violation$7321$RATN9
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$9706$RATN9))))
                                                          (g$syntax-dispatch$7215$RATN9
                                                            g$t$9706$RATN9
                                                            '_))))
                                                      g$t$9704$RATN9))))
                                                (g$syntax-dispatch$7215$RATN9
                                                  g$t$9704$RATN9
                                                  '()))))
                                            g$t$9692$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$9692$RATN9
                                        '(any . any)))))
                                  g$t$9686$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$9686$RATN9
                              '(each-any)))))
                        g$x$9685$RATN9)))))
          (call-with-values
            (case-lambda (() (g$parse$9678$RATN9 g$spec$9677$RATN9)))
            (case-lambda
              ((g$name*$9681$RATN9 g$ver*$9682$RATN9)
               ((case-lambda
                  ((g$ver*$9683$RATN9 g$name*$9684$RATN9)
                   (begin
                     (if (null? g$name*$9684$RATN9)
                       (g$syntax-violation$7321$RATN9
                         '#f
                         '"empty library name"
                         g$spec$9677$RATN9)
                       (void))
                     (values g$name*$9684$RATN9 g$ver*$9683$RATN9))))
                g$ver*$9682$RATN9
                g$name*$9681$RATN9))))))))
   (g$parse-library$7263$RATN9
     g$parse-library$10713$RATN9
     (case-lambda
       ((g$e$9708$RATN9)
        ((case-lambda
           ((g$t$9709$RATN9)
            ((case-lambda
               ((g$ls/false$9710$RATN9)
                (if (if g$ls/false$9710$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$9711$RATN9
                               g$name*$9712$RATN9
                               g$export$9713$RATN9
                               g$exp*$9714$RATN9
                               g$import$9715$RATN9
                               g$imp*$9716$RATN9
                               g$b*$9717$RATN9)
                             (if (eq? (g$syntax->datum$7324$RATN9
                                        g$export$9713$RATN9)
                                      'export)
                               (if (eq? (g$syntax->datum$7324$RATN9
                                          g$import$9715$RATN9)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$7324$RATN9
                                          g$library$9711$RATN9)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$9710$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$9718$RATN9
                         g$name*$9719$RATN9
                         g$export$9720$RATN9
                         g$exp*$9721$RATN9
                         g$import$9722$RATN9
                         g$imp*$9723$RATN9
                         g$b*$9724$RATN9)
                       (values
                         g$name*$9719$RATN9
                         g$exp*$9721$RATN9
                         g$imp*$9723$RATN9
                         g$b*$9724$RATN9)))
                    g$ls/false$9710$RATN9)
                  ((case-lambda
                     ((g$t$9725$RATN9)
                      ((case-lambda
                         ((g$ls/false$9726$RATN9)
                          (if g$ls/false$9726$RATN9
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7321$RATN9
                                   '#f
                                   '"malformed library"
                                   g$e$9708$RATN9)))
                              g$ls/false$9726$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$9725$RATN9))))
                       (g$syntax-dispatch$7215$RATN9 g$t$9725$RATN9 '_))))
                   g$t$9709$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$9709$RATN9
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$9708$RATN9))))
   (g$parse-import-spec*$7264$RATN9
     g$parse-import-spec*$10714$RATN9
     (case-lambda
       ((g$imp*$9727$RATN9)
        (letrec* ((g$idsyn?$9728$RATN9
                    (case-lambda
                      ((g$x$9987$RATN9)
                       (symbol? (g$syntax->datum$7324$RATN9 g$x$9987$RATN9)))))
                  (g$dup-error$9729$RATN9
                    (case-lambda
                      ((g$name$9986$RATN9)
                       (g$syntax-violation$7321$RATN9
                         'import
                         '"two imports with different bindings"
                         g$name$9986$RATN9))))
                  (g$merge-substs$9730$RATN9
                    (case-lambda
                      ((g$s$9977$RATN9 g$subst$9978$RATN9)
                       (letrec* ((g$insert-to-subst$9979$RATN9
                                   (case-lambda
                                     ((g$a$9980$RATN9 g$subst$9981$RATN9)
                                      ((case-lambda
                                         ((g$name$9982$RATN9 g$label$9983$RATN9)
                                          ((case-lambda
                                             ((g$t$9984$RATN9)
                                              (if g$t$9984$RATN9
                                                ((case-lambda
                                                   ((g$x$9985$RATN9)
                                                    (if (eq? (cdr g$x$9985$RATN9)
                                                             g$label$9983$RATN9)
                                                      g$subst$9981$RATN9
                                                      (g$dup-error$9729$RATN9
                                                        g$name$9982$RATN9))))
                                                 g$t$9984$RATN9)
                                                (cons
                                                  g$a$9980$RATN9
                                                  g$subst$9981$RATN9))))
                                           (assq
                                             g$name$9982$RATN9
                                             g$subst$9981$RATN9))))
                                       (car g$a$9980$RATN9)
                                       (cdr g$a$9980$RATN9))))))
                         (if (null? g$s$9977$RATN9)
                           g$subst$9978$RATN9
                           (g$insert-to-subst$9979$RATN9
                             (car g$s$9977$RATN9)
                             (g$merge-substs$9730$RATN9
                               (cdr g$s$9977$RATN9)
                               g$subst$9978$RATN9)))))))
                  (g$exclude*$9731$RATN9
                    (case-lambda
                      ((g$sym*$9953$RATN9 g$subst$9954$RATN9)
                       (letrec* ((g$exclude$9955$RATN9
                                   (case-lambda
                                     ((g$sym$9968$RATN9 g$subst$9969$RATN9)
                                      (if (null? g$subst$9969$RATN9)
                                        (g$syntax-violation$7321$RATN9
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$9968$RATN9)
                                        (if (eq? g$sym$9968$RATN9
                                                 (g$caar$4895$RATN9
                                                   g$subst$9969$RATN9))
                                          (values
                                            (g$cdar$4897$RATN9
                                              g$subst$9969$RATN9)
                                            (cdr g$subst$9969$RATN9))
                                          ((case-lambda
                                             ((g$a$9970$RATN9)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$9955$RATN9
                                                     g$sym$9968$RATN9
                                                     (cdr g$subst$9969$RATN9))))
                                                (case-lambda
                                                  ((g$old$9973$RATN9
                                                     g$subst$9974$RATN9)
                                                   ((case-lambda
                                                      ((g$subst$9975$RATN9
                                                         g$old$9976$RATN9)
                                                       (values
                                                         g$old$9976$RATN9
                                                         (cons
                                                           g$a$9970$RATN9
                                                           g$subst$9975$RATN9))))
                                                    g$subst$9974$RATN9
                                                    g$old$9973$RATN9))))))
                                           (car g$subst$9969$RATN9))))))))
                         (if (null? g$sym*$9953$RATN9)
                           (values '() g$subst$9954$RATN9)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$9955$RATN9
                                  (car g$sym*$9953$RATN9)
                                  g$subst$9954$RATN9)))
                             (case-lambda
                               ((g$old$9958$RATN9 g$subst$9959$RATN9)
                                ((case-lambda
                                   ((g$subst$9960$RATN9 g$old$9961$RATN9)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$9731$RATN9
                                           (cdr g$sym*$9953$RATN9)
                                           g$subst$9960$RATN9)))
                                      (case-lambda
                                        ((g$old*$9964$RATN9 g$subst$9965$RATN9)
                                         ((case-lambda
                                            ((g$subst$9966$RATN9
                                               g$old*$9967$RATN9)
                                             (values
                                               (cons
                                                 g$old$9961$RATN9
                                                 g$old*$9967$RATN9)
                                               g$subst$9966$RATN9)))
                                          g$subst$9965$RATN9
                                          g$old*$9964$RATN9))))))
                                 g$subst$9959$RATN9
                                 g$old$9958$RATN9)))))))))
                  (g$find*$9732$RATN9
                    (case-lambda
                      ((g$sym*$9949$RATN9 g$subst$9950$RATN9)
                       (map (case-lambda
                              ((g$x$9951$RATN9)
                               ((case-lambda
                                  ((g$t$9952$RATN9)
                                   (if g$t$9952$RATN9
                                     (cdr g$t$9952$RATN9)
                                     (g$syntax-violation$7321$RATN9
                                       'import
                                       '"cannot find identifier"
                                       g$x$9951$RATN9))))
                                (assq g$x$9951$RATN9 g$subst$9950$RATN9))))
                            g$sym*$9949$RATN9))))
                  (g$rem*$9733$RATN9
                    (case-lambda
                      ((g$sym*$9945$RATN9 g$subst$9946$RATN9)
                       ((letrec ((g$f$9947$RATN9
                                   (case-lambda
                                     ((g$subst$9948$RATN9)
                                      (if (null? g$subst$9948$RATN9)
                                        '()
                                        (if (memq
                                              (g$caar$4895$RATN9
                                                g$subst$9948$RATN9)
                                              g$sym*$9945$RATN9)
                                          (g$f$9947$RATN9
                                            (cdr g$subst$9948$RATN9))
                                          (cons
                                            (car g$subst$9948$RATN9)
                                            (g$f$9947$RATN9
                                              (cdr g$subst$9948$RATN9)))))))))
                          g$f$9947$RATN9)
                        g$subst$9946$RATN9))))
                  (g$remove-dups$9734$RATN9
                    (case-lambda
                      ((g$ls$9944$RATN9)
                       (if (null? g$ls$9944$RATN9)
                         '()
                         (if (memq (car g$ls$9944$RATN9) (cdr g$ls$9944$RATN9))
                           (g$remove-dups$9734$RATN9 (cdr g$ls$9944$RATN9))
                           (cons
                             (car g$ls$9944$RATN9)
                             (g$remove-dups$9734$RATN9
                               (cdr g$ls$9944$RATN9))))))))
                  (g$parse-library-name$9735$RATN9
                    (case-lambda
                      ((g$spec$9829$RATN9)
                       (letrec* ((g$subversion?$9830$RATN9
                                   (case-lambda
                                     ((g$x$9943$RATN9)
                                      (if (integer? g$x$9943$RATN9)
                                        (if (exact? g$x$9943$RATN9)
                                          (begin '#f (>= g$x$9943$RATN9 '0))
                                          '#f)
                                        '#f))))
                                 (g$subversion-pred$9831$RATN9
                                   (case-lambda
                                     ((g$x*$9895$RATN9)
                                      ((case-lambda
                                         ((g$t$9896$RATN9)
                                          ((case-lambda
                                             ((g$ls/false$9897$RATN9)
                                              (if (if g$ls/false$9897$RATN9
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$9898$RATN9)
                                                           (g$subversion?$9830$RATN9
                                                             (g$syntax->datum$7324$RATN9
                                                               g$n$9898$RATN9))))
                                                        g$ls/false$9897$RATN9))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$9899$RATN9)
                                                     (case-lambda
                                                       ((g$x$9900$RATN9)
                                                        (= g$x$9900$RATN9
                                                           (g$syntax->datum$7324$RATN9
                                                             g$n$9899$RATN9))))))
                                                  g$ls/false$9897$RATN9)
                                                ((case-lambda
                                                   ((g$t$9901$RATN9)
                                                    ((case-lambda
                                                       ((g$ls/false$9902$RATN9)
                                                        (if (if g$ls/false$9902$RATN9
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$9903$RATN9
                                                                       g$sub*$9904$RATN9)
                                                                     (eq? (g$syntax->datum$7324$RATN9
                                                                            g$p?$9903$RATN9)
                                                                          'and)))
                                                                  g$ls/false$9902$RATN9))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$9905$RATN9
                                                                 g$sub*$9906$RATN9)
                                                               ((case-lambda
                                                                  ((g$p*$9907$RATN9)
                                                                   (case-lambda
                                                                     ((g$x$9908$RATN9)
                                                                      (g$for-all$5365$RATN9
                                                                        (case-lambda
                                                                          ((g$p$9909$RATN9)
                                                                           (g$p$9909$RATN9
                                                                             g$x$9908$RATN9)))
                                                                        g$p*$9907$RATN9)))))
                                                                (map g$subversion-pred$9831$RATN9
                                                                     g$sub*$9906$RATN9))))
                                                            g$ls/false$9902$RATN9)
                                                          ((case-lambda
                                                             ((g$t$9910$RATN9)
                                                              ((case-lambda
                                                                 ((g$ls/false$9911$RATN9)
                                                                  (if (if g$ls/false$9911$RATN9
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$9912$RATN9
                                                                                 g$sub*$9913$RATN9)
                                                                               (eq? (g$syntax->datum$7324$RATN9
                                                                                      g$p?$9912$RATN9)
                                                                                    'or)))
                                                                            g$ls/false$9911$RATN9))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$9914$RATN9
                                                                           g$sub*$9915$RATN9)
                                                                         ((case-lambda
                                                                            ((g$p*$9916$RATN9)
                                                                             (case-lambda
                                                                               ((g$x$9917$RATN9)
                                                                                (g$exists$5366$RATN9
                                                                                  (case-lambda
                                                                                    ((g$p$9918$RATN9)
                                                                                     (g$p$9918$RATN9
                                                                                       g$x$9917$RATN9)))
                                                                                  g$p*$9916$RATN9)))))
                                                                          (map g$subversion-pred$9831$RATN9
                                                                               g$sub*$9915$RATN9))))
                                                                      g$ls/false$9911$RATN9)
                                                                    ((case-lambda
                                                                       ((g$t$9919$RATN9)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9920$RATN9)
                                                                            (if (if g$ls/false$9920$RATN9
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$9921$RATN9
                                                                                           g$sub$9922$RATN9)
                                                                                         (eq? (g$syntax->datum$7324$RATN9
                                                                                                g$p?$9921$RATN9)
                                                                                              'not)))
                                                                                      g$ls/false$9920$RATN9))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$9923$RATN9
                                                                                     g$sub$9924$RATN9)
                                                                                   ((case-lambda
                                                                                      ((g$p$9925$RATN9)
                                                                                       (case-lambda
                                                                                         ((g$x$9926$RATN9)
                                                                                          (not (g$p$9925$RATN9
                                                                                                 g$x$9926$RATN9))))))
                                                                                    (g$subversion-pred$9831$RATN9
                                                                                      g$sub$9924$RATN9))))
                                                                                g$ls/false$9920$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$t$9927$RATN9)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$9928$RATN9)
                                                                                      (if (if g$ls/false$9928$RATN9
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$9929$RATN9
                                                                                                     g$n$9930$RATN9)
                                                                                                   (if (eq? (g$syntax->datum$7324$RATN9
                                                                                                              g$p?$9929$RATN9)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$9830$RATN9
                                                                                                         (g$syntax->datum$7324$RATN9
                                                                                                           g$n$9930$RATN9)))
                                                                                                     '#f)))
                                                                                                g$ls/false$9928$RATN9))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$9931$RATN9
                                                                                               g$n$9932$RATN9)
                                                                                             (case-lambda
                                                                                               ((g$x$9933$RATN9)
                                                                                                (<= g$x$9933$RATN9
                                                                                                    (g$syntax->datum$7324$RATN9
                                                                                                      g$n$9932$RATN9))))))
                                                                                          g$ls/false$9928$RATN9)
                                                                                        ((case-lambda
                                                                                           ((g$t$9934$RATN9)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$9935$RATN9)
                                                                                                (if (if g$ls/false$9935$RATN9
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$9936$RATN9
                                                                                                               g$n$9937$RATN9)
                                                                                                             (if (eq? (g$syntax->datum$7324$RATN9
                                                                                                                        g$p?$9936$RATN9)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$9830$RATN9
                                                                                                                   g$n$9937$RATN9))
                                                                                                               '#f)))
                                                                                                          g$ls/false$9935$RATN9))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$9938$RATN9
                                                                                                         g$n$9939$RATN9)
                                                                                                       (case-lambda
                                                                                                         ((g$x$9940$RATN9)
                                                                                                          (>= g$x$9940$RATN9
                                                                                                              (g$syntax->datum$7324$RATN9
                                                                                                                g$n$9939$RATN9))))))
                                                                                                    g$ls/false$9935$RATN9)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$9941$RATN9)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$9942$RATN9)
                                                                                                          (if g$ls/false$9942$RATN9
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$7321$RATN9
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$9829$RATN9
                                                                                                                   g$x*$9895$RATN9)))
                                                                                                              g$ls/false$9942$RATN9)
                                                                                                            (g$syntax-violation$7321$RATN9
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$9941$RATN9))))
                                                                                                       (g$syntax-dispatch$7215$RATN9
                                                                                                         g$t$9941$RATN9
                                                                                                         '_))))
                                                                                                   g$t$9934$RATN9))))
                                                                                             (g$syntax-dispatch$7215$RATN9
                                                                                               g$t$9934$RATN9
                                                                                               '(any any)))))
                                                                                         g$t$9927$RATN9))))
                                                                                   (g$syntax-dispatch$7215$RATN9
                                                                                     g$t$9927$RATN9
                                                                                     '(any any)))))
                                                                               g$t$9919$RATN9))))
                                                                         (g$syntax-dispatch$7215$RATN9
                                                                           g$t$9919$RATN9
                                                                           '(any any)))))
                                                                     g$t$9910$RATN9))))
                                                               (g$syntax-dispatch$7215$RATN9
                                                                 g$t$9910$RATN9
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$9901$RATN9))))
                                                     (g$syntax-dispatch$7215$RATN9
                                                       g$t$9901$RATN9
                                                       '(any . each-any)))))
                                                 g$t$9896$RATN9))))
                                           (g$syntax-dispatch$7215$RATN9
                                             g$t$9896$RATN9
                                             'any))))
                                       g$x*$9895$RATN9))))
                                 (g$version-pred$9832$RATN9
                                   (case-lambda
                                     ((g$x*$9855$RATN9)
                                      ((case-lambda
                                         ((g$t$9856$RATN9)
                                          ((case-lambda
                                             ((g$ls/false$9857$RATN9)
                                              (if g$ls/false$9857$RATN9
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$9858$RATN9) '#t))))
                                                  g$ls/false$9857$RATN9)
                                                ((case-lambda
                                                   ((g$t$9859$RATN9)
                                                    ((case-lambda
                                                       ((g$ls/false$9860$RATN9)
                                                        (if (if g$ls/false$9860$RATN9
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$9861$RATN9
                                                                       g$ver*$9862$RATN9)
                                                                     (eq? (g$syntax->datum$7324$RATN9
                                                                            g$c$9861$RATN9)
                                                                          'and)))
                                                                  g$ls/false$9860$RATN9))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$9863$RATN9
                                                                 g$ver*$9864$RATN9)
                                                               ((case-lambda
                                                                  ((g$p*$9865$RATN9)
                                                                   (case-lambda
                                                                     ((g$x$9866$RATN9)
                                                                      (g$for-all$5365$RATN9
                                                                        (case-lambda
                                                                          ((g$p$9867$RATN9)
                                                                           (g$p$9867$RATN9
                                                                             g$x$9866$RATN9)))
                                                                        g$p*$9865$RATN9)))))
                                                                (map g$version-pred$9832$RATN9
                                                                     g$ver*$9864$RATN9))))
                                                            g$ls/false$9860$RATN9)
                                                          ((case-lambda
                                                             ((g$t$9868$RATN9)
                                                              ((case-lambda
                                                                 ((g$ls/false$9869$RATN9)
                                                                  (if (if g$ls/false$9869$RATN9
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$9870$RATN9
                                                                                 g$ver*$9871$RATN9)
                                                                               (eq? (g$syntax->datum$7324$RATN9
                                                                                      g$c$9870$RATN9)
                                                                                    'or)))
                                                                            g$ls/false$9869$RATN9))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$9872$RATN9
                                                                           g$ver*$9873$RATN9)
                                                                         ((case-lambda
                                                                            ((g$p*$9874$RATN9)
                                                                             (case-lambda
                                                                               ((g$x$9875$RATN9)
                                                                                (g$exists$5366$RATN9
                                                                                  (case-lambda
                                                                                    ((g$p$9876$RATN9)
                                                                                     (g$p$9876$RATN9
                                                                                       g$x$9875$RATN9)))
                                                                                  g$p*$9874$RATN9)))))
                                                                          (map g$version-pred$9832$RATN9
                                                                               g$ver*$9873$RATN9))))
                                                                      g$ls/false$9869$RATN9)
                                                                    ((case-lambda
                                                                       ((g$t$9877$RATN9)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9878$RATN9)
                                                                            (if (if g$ls/false$9878$RATN9
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$9879$RATN9
                                                                                           g$ver$9880$RATN9)
                                                                                         (eq? (g$syntax->datum$7324$RATN9
                                                                                                g$c$9879$RATN9)
                                                                                              'not)))
                                                                                      g$ls/false$9878$RATN9))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$9881$RATN9
                                                                                     g$ver$9882$RATN9)
                                                                                   ((case-lambda
                                                                                      ((g$p$9883$RATN9)
                                                                                       (case-lambda
                                                                                         ((g$x$9884$RATN9)
                                                                                          (not (g$p$9883$RATN9
                                                                                                 g$x$9884$RATN9))))))
                                                                                    (g$version-pred$9832$RATN9
                                                                                      g$ver$9882$RATN9))))
                                                                                g$ls/false$9878$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$t$9885$RATN9)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$9886$RATN9)
                                                                                      (if g$ls/false$9886$RATN9
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$9887$RATN9)
                                                                                             ((case-lambda
                                                                                                ((g$p*$9888$RATN9)
                                                                                                 (case-lambda
                                                                                                   ((g$x$9889$RATN9)
                                                                                                    ((letrec ((g$f$9890$RATN9
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$9891$RATN9
                                                                                                                     g$x$9892$RATN9)
                                                                                                                   (if (null?
                                                                                                                         g$p*$9891$RATN9)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$9892$RATN9)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$9891$RATN9)
                                                                                                                            (car g$x$9892$RATN9))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$9890$RATN9
                                                                                                                             (cdr g$p*$9891$RATN9)
                                                                                                                             (cdr g$x$9892$RATN9)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$9890$RATN9)
                                                                                                     g$p*$9888$RATN9
                                                                                                     g$x$9889$RATN9)))))
                                                                                              (map g$subversion-pred$9831$RATN9
                                                                                                   g$sub*$9887$RATN9))))
                                                                                          g$ls/false$9886$RATN9)
                                                                                        ((case-lambda
                                                                                           ((g$t$9893$RATN9)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$9894$RATN9)
                                                                                                (if g$ls/false$9894$RATN9
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$7321$RATN9
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$9829$RATN9
                                                                                                         g$x*$9855$RATN9)))
                                                                                                    g$ls/false$9894$RATN9)
                                                                                                  (g$syntax-violation$7321$RATN9
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$9893$RATN9))))
                                                                                             (g$syntax-dispatch$7215$RATN9
                                                                                               g$t$9893$RATN9
                                                                                               '_))))
                                                                                         g$t$9885$RATN9))))
                                                                                   (g$syntax-dispatch$7215$RATN9
                                                                                     g$t$9885$RATN9
                                                                                     'each-any))))
                                                                               g$t$9877$RATN9))))
                                                                         (g$syntax-dispatch$7215$RATN9
                                                                           g$t$9877$RATN9
                                                                           '(any any)))))
                                                                     g$t$9868$RATN9))))
                                                               (g$syntax-dispatch$7215$RATN9
                                                                 g$t$9868$RATN9
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$9859$RATN9))))
                                                     (g$syntax-dispatch$7215$RATN9
                                                       g$t$9859$RATN9
                                                       '(any . each-any)))))
                                                 g$t$9856$RATN9))))
                                           (g$syntax-dispatch$7215$RATN9
                                             g$t$9856$RATN9
                                             '()))))
                                       g$x*$9855$RATN9)))))
                         ((letrec ((g$f$9833$RATN9
                                     (case-lambda
                                       ((g$x$9834$RATN9)
                                        ((case-lambda
                                           ((g$t$9835$RATN9)
                                            ((case-lambda
                                               ((g$ls/false$9836$RATN9)
                                                (if g$ls/false$9836$RATN9
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$9837$RATN9)
                                                       (values
                                                         '()
                                                         (g$version-pred$9832$RATN9
                                                           g$version-spec*$9837$RATN9))))
                                                    g$ls/false$9836$RATN9)
                                                  ((case-lambda
                                                     ((g$t$9838$RATN9)
                                                      ((case-lambda
                                                         ((g$ls/false$9839$RATN9)
                                                          (if (if g$ls/false$9839$RATN9
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$9840$RATN9
                                                                         g$x*$9841$RATN9)
                                                                       (g$idsyn?$9728$RATN9
                                                                         g$x$9840$RATN9)))
                                                                    g$ls/false$9839$RATN9))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$9842$RATN9
                                                                   g$x*$9843$RATN9)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$9833$RATN9
                                                                        g$x*$9843$RATN9)))
                                                                   (case-lambda
                                                                     ((g$name$9846$RATN9
                                                                        g$pred$9847$RATN9)
                                                                      ((case-lambda
                                                                         ((g$pred$9848$RATN9
                                                                            g$name$9849$RATN9)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$7324$RATN9
                                                                                g$x$9842$RATN9)
                                                                              g$name$9849$RATN9)
                                                                            g$pred$9848$RATN9)))
                                                                       g$pred$9847$RATN9
                                                                       g$name$9846$RATN9))))))
                                                              g$ls/false$9839$RATN9)
                                                            ((case-lambda
                                                               ((g$t$9850$RATN9)
                                                                ((case-lambda
                                                                   ((g$ls/false$9851$RATN9)
                                                                    (if g$ls/false$9851$RATN9
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$9852$RATN9)
                                                                                '#t)))))
                                                                        g$ls/false$9851$RATN9)
                                                                      ((case-lambda
                                                                         ((g$t$9853$RATN9)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9854$RATN9)
                                                                              (if g$ls/false$9854$RATN9
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$7321$RATN9
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$9829$RATN9)))
                                                                                  g$ls/false$9854$RATN9)
                                                                                (g$syntax-violation$7321$RATN9
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9853$RATN9))))
                                                                           (g$syntax-dispatch$7215$RATN9
                                                                             g$t$9853$RATN9
                                                                             '_))))
                                                                       g$t$9850$RATN9))))
                                                                 (g$syntax-dispatch$7215$RATN9
                                                                   g$t$9850$RATN9
                                                                   '()))))
                                                             g$t$9838$RATN9))))
                                                       (g$syntax-dispatch$7215$RATN9
                                                         g$t$9838$RATN9
                                                         '(any . any)))))
                                                   g$t$9835$RATN9))))
                                             (g$syntax-dispatch$7215$RATN9
                                               g$t$9835$RATN9
                                               '(each-any)))))
                                         g$x$9834$RATN9)))))
                            g$f$9833$RATN9)
                          g$spec$9829$RATN9)))))
                  (g$import-library$9736$RATN9
                    (case-lambda
                      ((g$spec*$9821$RATN9)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$9735$RATN9
                              g$spec*$9821$RATN9)))
                         (case-lambda
                           ((g$name$9824$RATN9 g$pred$9825$RATN9)
                            ((case-lambda
                               ((g$pred$9826$RATN9 g$name$9827$RATN9)
                                (begin
                                  (if (null? g$name$9827$RATN9)
                                    (g$syntax-violation$7321$RATN9
                                      'import
                                      '"empty library name"
                                      g$spec*$9821$RATN9)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$9828$RATN9)
                                      (begin
                                        (if g$lib$9828$RATN9
                                          (void)
                                          (g$syntax-violation$7321$RATN9
                                            'import
                                            '"cannot find library with required name"
                                            g$name$9827$RATN9))
                                        (if (g$pred$9826$RATN9
                                              (g$library-version$6705$RATN9
                                                g$lib$9828$RATN9))
                                          (void)
                                          (g$syntax-violation$7321$RATN9
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$9821$RATN9
                                            g$lib$9828$RATN9))
                                        ((g$imp-collector$7269$RATN9)
                                         g$lib$9828$RATN9)
                                        (g$library-subst$6709$RATN9
                                          g$lib$9828$RATN9))))
                                   (g$find-library-by-name$6745$RATN9
                                     g$name$9827$RATN9)))))
                             g$pred$9825$RATN9
                             g$name$9824$RATN9)))))))
                  (g$get-import$9737$RATN9
                    (case-lambda
                      ((g$spec$9750$RATN9)
                       ((case-lambda
                          ((g$t$9751$RATN9)
                           ((case-lambda
                              ((g$ls/false$9752$RATN9)
                               (if (if g$ls/false$9752$RATN9
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$9753$RATN9 g$x*$9754$RATN9)
                                            (not (memq
                                                   (g$syntax->datum$7324$RATN9
                                                     g$x$9753$RATN9)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$9752$RATN9))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$9755$RATN9 g$x*$9756$RATN9)
                                      (g$import-library$9736$RATN9
                                        (cons g$x$9755$RATN9 g$x*$9756$RATN9))))
                                   g$ls/false$9752$RATN9)
                                 ((case-lambda
                                    ((g$t$9757$RATN9)
                                     ((case-lambda
                                        ((g$ls/false$9758$RATN9)
                                         (if (if g$ls/false$9758$RATN9
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$9759$RATN9
                                                        g$isp$9760$RATN9
                                                        g$old*$9761$RATN9
                                                        g$new*$9762$RATN9)
                                                      (if (eq? (g$syntax->datum$7324$RATN9
                                                                 g$rename$9759$RATN9)
                                                               'rename)
                                                        (if (g$for-all$5365$RATN9
                                                              g$idsyn?$9728$RATN9
                                                              g$old*$9761$RATN9)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5365$RATN9
                                                              g$idsyn?$9728$RATN9
                                                              g$new*$9762$RATN9))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$9758$RATN9))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$9763$RATN9
                                                  g$isp$9764$RATN9
                                                  g$old*$9765$RATN9
                                                  g$new*$9766$RATN9)
                                                ((case-lambda
                                                   ((g$subst$9767$RATN9
                                                      g$old*$9768$RATN9
                                                      g$new*$9769$RATN9)
                                                    ((case-lambda
                                                       ((g$old-label*$9770$RATN9)
                                                        ((case-lambda
                                                           ((g$subst$9771$RATN9)
                                                            (g$merge-substs$9730$RATN9
                                                              (map cons
                                                                   g$new*$9769$RATN9
                                                                   g$old-label*$9770$RATN9)
                                                              g$subst$9771$RATN9)))
                                                         (g$rem*$9733$RATN9
                                                           g$old*$9768$RATN9
                                                           g$subst$9767$RATN9))))
                                                     (g$find*$9732$RATN9
                                                       g$old*$9768$RATN9
                                                       g$subst$9767$RATN9))))
                                                 (g$get-import$9737$RATN9
                                                   g$isp$9764$RATN9)
                                                 (map g$syntax->datum$7324$RATN9
                                                      g$old*$9765$RATN9)
                                                 (map g$syntax->datum$7324$RATN9
                                                      g$new*$9766$RATN9))))
                                             g$ls/false$9758$RATN9)
                                           ((case-lambda
                                              ((g$t$9772$RATN9)
                                               ((case-lambda
                                                  ((g$ls/false$9773$RATN9)
                                                   (if (if g$ls/false$9773$RATN9
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$9774$RATN9
                                                                  g$isp$9775$RATN9
                                                                  g$sym*$9776$RATN9)
                                                                (if (eq? (g$syntax->datum$7324$RATN9
                                                                           g$except$9774$RATN9)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5365$RATN9
                                                                      g$idsyn?$9728$RATN9
                                                                      g$sym*$9776$RATN9))
                                                                  '#f)))
                                                             g$ls/false$9773$RATN9))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$9777$RATN9
                                                            g$isp$9778$RATN9
                                                            g$sym*$9779$RATN9)
                                                          ((case-lambda
                                                             ((g$subst$9780$RATN9)
                                                              (g$rem*$9733$RATN9
                                                                (map g$syntax->datum$7324$RATN9
                                                                     g$sym*$9779$RATN9)
                                                                g$subst$9780$RATN9)))
                                                           (g$get-import$9737$RATN9
                                                             g$isp$9778$RATN9))))
                                                       g$ls/false$9773$RATN9)
                                                     ((case-lambda
                                                        ((g$t$9781$RATN9)
                                                         ((case-lambda
                                                            ((g$ls/false$9782$RATN9)
                                                             (if (if g$ls/false$9782$RATN9
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$9783$RATN9
                                                                            g$isp$9784$RATN9
                                                                            g$sym*$9785$RATN9)
                                                                          (if (eq? (g$syntax->datum$7324$RATN9
                                                                                     g$only$9783$RATN9)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5365$RATN9
                                                                                g$idsyn?$9728$RATN9
                                                                                g$sym*$9785$RATN9))
                                                                            '#f)))
                                                                       g$ls/false$9782$RATN9))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$9786$RATN9
                                                                      g$isp$9787$RATN9
                                                                      g$sym*$9788$RATN9)
                                                                    ((case-lambda
                                                                       ((g$subst$9789$RATN9
                                                                          g$sym*$9790$RATN9)
                                                                        ((case-lambda
                                                                           ((g$sym*$9791$RATN9)
                                                                            ((case-lambda
                                                                               ((g$lab*$9792$RATN9)
                                                                                (map cons
                                                                                     g$sym*$9791$RATN9
                                                                                     g$lab*$9792$RATN9)))
                                                                             (g$find*$9732$RATN9
                                                                               g$sym*$9791$RATN9
                                                                               g$subst$9789$RATN9))))
                                                                         (g$remove-dups$9734$RATN9
                                                                           g$sym*$9790$RATN9))))
                                                                     (g$get-import$9737$RATN9
                                                                       g$isp$9787$RATN9)
                                                                     (map g$syntax->datum$7324$RATN9
                                                                          g$sym*$9788$RATN9))))
                                                                 g$ls/false$9782$RATN9)
                                                               ((case-lambda
                                                                  ((g$t$9793$RATN9)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9794$RATN9)
                                                                       (if (if g$ls/false$9794$RATN9
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$9795$RATN9
                                                                                      g$isp$9796$RATN9
                                                                                      g$p$9797$RATN9)
                                                                                    (if (eq? (g$syntax->datum$7324$RATN9
                                                                                               g$prefix$9795$RATN9)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$9728$RATN9
                                                                                          g$p$9797$RATN9))
                                                                                      '#f)))
                                                                                 g$ls/false$9794$RATN9))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$9798$RATN9
                                                                                g$isp$9799$RATN9
                                                                                g$p$9800$RATN9)
                                                                              ((case-lambda
                                                                                 ((g$subst$9801$RATN9
                                                                                    g$prefix$9802$RATN9)
                                                                                  (map (case-lambda
                                                                                         ((g$x$9803$RATN9)
                                                                                          (cons
                                                                                            (string->symbol
                                                                                              (string-append
                                                                                                g$prefix$9802$RATN9
                                                                                                (symbol->string
                                                                                                  (car g$x$9803$RATN9))))
                                                                                            (cdr g$x$9803$RATN9))))
                                                                                       g$subst$9801$RATN9)))
                                                                               (g$get-import$9737$RATN9
                                                                                 g$isp$9799$RATN9)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$7324$RATN9
                                                                                   g$p$9800$RATN9)))))
                                                                           g$ls/false$9794$RATN9)
                                                                         ((case-lambda
                                                                            ((g$t$9804$RATN9)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9805$RATN9)
                                                                                 (if (if g$ls/false$9805$RATN9
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$9806$RATN9
                                                                                                g$spec*$9807$RATN9)
                                                                                              (eq? (g$syntax->datum$7324$RATN9
                                                                                                     g$library$9806$RATN9)
                                                                                                   'library)))
                                                                                           g$ls/false$9805$RATN9))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$9808$RATN9
                                                                                          g$spec*$9809$RATN9)
                                                                                        (g$import-library$9736$RATN9
                                                                                          g$spec*$9809$RATN9)))
                                                                                     g$ls/false$9805$RATN9)
                                                                                   ((case-lambda
                                                                                      ((g$t$9810$RATN9)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9811$RATN9)
                                                                                           (if (if g$ls/false$9811$RATN9
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$9812$RATN9
                                                                                                          g$isp$9813$RATN9
                                                                                                          g$rest$9814$RATN9)
                                                                                                        (eq? (g$syntax->datum$7324$RATN9
                                                                                                               g$for$9812$RATN9)
                                                                                                             'for)))
                                                                                                     g$ls/false$9811$RATN9))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$9815$RATN9
                                                                                                    g$isp$9816$RATN9
                                                                                                    g$rest$9817$RATN9)
                                                                                                  (g$get-import$9737$RATN9
                                                                                                    g$isp$9816$RATN9)))
                                                                                               g$ls/false$9811$RATN9)
                                                                                             ((case-lambda
                                                                                                ((g$t$9818$RATN9)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$9819$RATN9)
                                                                                                     (if g$ls/false$9819$RATN9
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$9820$RATN9)
                                                                                                            (g$syntax-violation$7321$RATN9
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$9820$RATN9)))
                                                                                                         g$ls/false$9819$RATN9)
                                                                                                       (g$syntax-violation$7321$RATN9
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$9818$RATN9))))
                                                                                                  (g$syntax-dispatch$7215$RATN9
                                                                                                    g$t$9818$RATN9
                                                                                                    'any))))
                                                                                              g$t$9810$RATN9))))
                                                                                        (g$syntax-dispatch$7215$RATN9
                                                                                          g$t$9810$RATN9
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$9804$RATN9))))
                                                                              (g$syntax-dispatch$7215$RATN9
                                                                                g$t$9804$RATN9
                                                                                '(any each-any)))))
                                                                          g$t$9793$RATN9))))
                                                                    (g$syntax-dispatch$7215$RATN9
                                                                      g$t$9793$RATN9
                                                                      '(any any
                                                                            any)))))
                                                                g$t$9781$RATN9))))
                                                          (g$syntax-dispatch$7215$RATN9
                                                            g$t$9781$RATN9
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$9772$RATN9))))
                                                (g$syntax-dispatch$7215$RATN9
                                                  g$t$9772$RATN9
                                                  '(any any . each-any)))))
                                            g$t$9757$RATN9))))
                                      (g$syntax-dispatch$7215$RATN9
                                        g$t$9757$RATN9
                                        '(any any . #(each (any any)))))))
                                  g$t$9751$RATN9))))
                            (g$syntax-dispatch$7215$RATN9
                              g$t$9751$RATN9
                              '(any . each-any)))))
                        g$spec$9750$RATN9))))
                  (g$add-imports!$9738$RATN9
                    (case-lambda
                      ((g$imp$9742$RATN9 g$h$9743$RATN9)
                       ((case-lambda
                          ((g$subst$9744$RATN9)
                           (for-each
                             (case-lambda
                               ((g$x$9745$RATN9)
                                ((case-lambda
                                   ((g$name$9746$RATN9 g$label$9747$RATN9)
                                    ((case-lambda
                                       ((g$t$9748$RATN9)
                                        (if g$t$9748$RATN9
                                          ((case-lambda
                                             ((g$l$9749$RATN9)
                                              (if (eq? g$l$9749$RATN9
                                                       g$label$9747$RATN9)
                                                (void)
                                                (g$dup-error$9729$RATN9
                                                  g$name$9746$RATN9))))
                                           g$t$9748$RATN9)
                                          (g$hashtable-set!$5162$RATN9
                                            g$h$9743$RATN9
                                            g$name$9746$RATN9
                                            g$label$9747$RATN9))))
                                     (g$hashtable-ref$5161$RATN9
                                       g$h$9743$RATN9
                                       g$name$9746$RATN9
                                       '#f))))
                                 (car g$x$9745$RATN9)
                                 (cdr g$x$9745$RATN9))))
                             g$subst$9744$RATN9)))
                        (g$get-import$9737$RATN9 g$imp$9742$RATN9))))))
          ((letrec ((g$f$9739$RATN9
                      (case-lambda
                        ((g$imp*$9740$RATN9 g$h$9741$RATN9)
                         (if (null? g$imp*$9740$RATN9)
                           (hashtable-entries g$h$9741$RATN9)
                           (begin
                             (g$add-imports!$9738$RATN9
                               (car g$imp*$9740$RATN9)
                               g$h$9741$RATN9)
                             (g$f$9739$RATN9
                               (cdr g$imp*$9740$RATN9)
                               g$h$9741$RATN9)))))))
             g$f$9739$RATN9)
           g$imp*$9727$RATN9
           (g$make-eq-hashtable$5158$RATN9))))))
   (g$make-top-rib$7265$RATN9
     g$make-top-rib$10715$RATN9
     (case-lambda
       ((g$names$9988$RATN9 g$labels$9989$RATN9)
        ((case-lambda
           ((g$rib$9990$RATN9)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$9991$RATN9 g$label$9992$RATN9)
                   (begin
                     (if (symbol? g$name$9991$RATN9)
                       (void)
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$9991$RATN9))
                     (g$extend-rib!$6901$RATN9
                       g$rib$9990$RATN9
                       (g$make-stx$6910$RATN9
                         g$name$9991$RATN9
                         g$top-mark*$6879$RATN9
                         '()
                         '())
                       g$label$9992$RATN9))))
                g$names$9988$RATN9
                g$labels$9989$RATN9)
              g$rib$9990$RATN9)))
         (g$make-empty-rib$6900$RATN9)))))
   (g$make-collector$7266$RATN9
     g$make-collector$10716$RATN9
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$9993$RATN9)
            (case-lambda
              (() g$ls$9993$RATN9)
              ((g$x$9994$RATN9)
               (set! g$ls$9993$RATN9
                 (g$set-cons$6876$RATN9 g$x$9994$RATN9 g$ls$9993$RATN9))))))
         '()))))
   (g$inv-collector$7267$RATN9
     g$inv-collector$10717$RATN9
     (g$make-parameter$6205$RATN9
       (case-lambda
         (g$args$9995$RATN9
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$9996$RATN9)
          (begin
            (if (procedure? g$x$9996$RATN9)
              (void)
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$9996$RATN9))
            g$x$9996$RATN9)))))
   (g$vis-collector$7268$RATN9
     g$vis-collector$10718$RATN9
     (g$make-parameter$6205$RATN9
       (case-lambda
         (g$args$9997$RATN9
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$9998$RATN9)
          (begin
            (if (procedure? g$x$9998$RATN9)
              (void)
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$9998$RATN9))
            g$x$9998$RATN9)))))
   (g$imp-collector$7269$RATN9
     g$imp-collector$10719$RATN9
     (g$make-parameter$6205$RATN9
       (case-lambda
         (g$args$9999$RATN9
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10000$RATN9)
          (begin
            (if (procedure? g$x$10000$RATN9)
              (void)
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10000$RATN9))
            g$x$10000$RATN9)))))
   (g$chi-library-internal$7270$RATN9
     g$chi-library-internal$10720$RATN9
     (case-lambda
       ((g$e*$10001$RATN9 g$rib$10002$RATN9 g$top?$10003$RATN9)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7259$RATN9
               g$e*$10001$RATN9
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10002$RATN9
               g$top?$10003$RATN9)))
          (case-lambda
            ((g$e*$10011$RATN9
               g$r$10012$RATN9
               g$mr$10013$RATN9
               g$lex*$10014$RATN9
               g$rhs*$10015$RATN9
               g$mod**$10016$RATN9
               g$_kwd*$10017$RATN9)
             ((case-lambda
                ((g$_kwd*$10018$RATN9
                   g$mod**$10019$RATN9
                   g$rhs*$10020$RATN9
                   g$lex*$10021$RATN9
                   g$mr$10022$RATN9
                   g$r$10023$RATN9
                   g$e*$10024$RATN9)
                 (values
                   (append
                     (apply append (reverse g$mod**$10019$RATN9))
                     g$e*$10024$RATN9)
                   g$r$10023$RATN9
                   g$mr$10022$RATN9
                   (reverse g$lex*$10021$RATN9)
                   (reverse g$rhs*$10020$RATN9))))
              g$_kwd*$10017$RATN9
              g$mod**$10016$RATN9
              g$rhs*$10015$RATN9
              g$lex*$10014$RATN9
              g$mr$10013$RATN9
              g$r$10012$RATN9
              g$e*$10011$RATN9)))))))
   (g$chi-interaction-expr$7271$RATN9
     g$chi-interaction-expr$10721$RATN9
     (case-lambda
       ((g$e$10025$RATN9 g$rib$10026$RATN9 g$r$10027$RATN9)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7259$RATN9
               (list g$e$10025$RATN9)
               g$r$10027$RATN9
               g$r$10027$RATN9
               '()
               '()
               '()
               '()
               g$rib$10026$RATN9
               '#t)))
          (case-lambda
            ((g$e*$10035$RATN9
               g$r$10036$RATN9
               g$mr$10037$RATN9
               g$lex*$10038$RATN9
               g$rhs*$10039$RATN9
               g$mod**$10040$RATN9
               g$_kwd*$10041$RATN9)
             ((case-lambda
                ((g$_kwd*$10042$RATN9
                   g$mod**$10043$RATN9
                   g$rhs*$10044$RATN9
                   g$lex*$10045$RATN9
                   g$mr$10046$RATN9
                   g$r$10047$RATN9
                   g$e*$10048$RATN9)
                 ((case-lambda
                    ((g$e*$10049$RATN9)
                     ((case-lambda
                        ((g$e$10050$RATN9)
                         (values g$e$10050$RATN9 g$r$10047$RATN9)))
                      (if (null? g$e*$10049$RATN9)
                        (g$build-void$6872$RATN9)
                        (if (null? (cdr g$e*$10049$RATN9))
                          (car g$e*$10049$RATN9)
                          (g$build-sequence$6871$RATN9
                            '#f
                            g$e*$10049$RATN9))))))
                  (g$expand-interaction-rhs*/init*$7240$RATN9
                    (reverse g$lex*$10045$RATN9)
                    (reverse g$rhs*$10044$RATN9)
                    (append
                      (apply append (reverse g$mod**$10043$RATN9))
                      g$e*$10048$RATN9)
                    g$r$10047$RATN9
                    g$mr$10046$RATN9))))
              g$_kwd*$10041$RATN9
              g$mod**$10040$RATN9
              g$rhs*$10039$RATN9
              g$lex*$10038$RATN9
              g$mr$10037$RATN9
              g$r$10036$RATN9
              g$e*$10035$RATN9)))))))
   (g$library-body-expander$7272$RATN9
     g$library-body-expander$10722$RATN9
     (case-lambda
       ((g$name$10051$RATN9
          g$exp*$10052$RATN9
          g$imp*$10053$RATN9
          g$b*$10054$RATN9
          g$top?$10055$RATN9)
        (letrec* ((g$itc$10056$RATN9 (g$make-collector$7266$RATN9)))
          ((case-lambda
             ((g$imp-collector$10061$RATN9
                g$top-level-context$10062$RATN9
                g$imp-collector$10063$RATN9
                g$top-level-context$10064$RATN9)
              ((case-lambda
                 ((g$swap$10065$RATN9)
                  (dynamic-wind
                    g$swap$10065$RATN9
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (() (g$parse-exports$7261$RATN9 g$exp*$10052$RATN9)))
                         (case-lambda
                           ((g$exp-int*$10068$RATN9 g$exp-ext*$10069$RATN9)
                            ((case-lambda
                               ((g$exp-ext*$10070$RATN9 g$exp-int*$10071$RATN9)
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$parse-import-spec*$7264$RATN9
                                       g$imp*$10053$RATN9)))
                                  (case-lambda
                                    ((g$subst-names$10074$RATN9
                                       g$subst-labels$10075$RATN9)
                                     ((case-lambda
                                        ((g$subst-labels$10076$RATN9
                                           g$subst-names$10077$RATN9)
                                         ((case-lambda
                                            ((g$rib$10078$RATN9)
                                             ((case-lambda
                                                ((g$b*$10079$RATN9
                                                   g$rtc$10080$RATN9
                                                   g$vtc$10081$RATN9)
                                                 ((case-lambda
                                                    ((g$inv-collector$10086$RATN9
                                                       g$vis-collector$10087$RATN9
                                                       g$inv-collector$10088$RATN9
                                                       g$vis-collector$10089$RATN9)
                                                     ((case-lambda
                                                        ((g$swap$10090$RATN9)
                                                         (dynamic-wind
                                                           g$swap$10090$RATN9
                                                           (case-lambda
                                                             (()
                                                              (call-with-values
                                                                (case-lambda
                                                                  (()
                                                                   (g$chi-library-internal$7270$RATN9
                                                                     g$b*$10079$RATN9
                                                                     g$rib$10078$RATN9
                                                                     g$top?$10055$RATN9)))
                                                                (case-lambda
                                                                  ((g$init*$10096$RATN9
                                                                     g$r$10097$RATN9
                                                                     g$mr$10098$RATN9
                                                                     g$lex*$10099$RATN9
                                                                     g$rhs*$10100$RATN9)
                                                                   ((case-lambda
                                                                      ((g$rhs*$10101$RATN9
                                                                         g$lex*$10102$RATN9
                                                                         g$mr$10103$RATN9
                                                                         g$r$10104$RATN9
                                                                         g$init*$10105$RATN9)
                                                                       (begin
                                                                         (g$seal-rib!$6903$RATN9
                                                                           g$rib$10078$RATN9)
                                                                         ((case-lambda
                                                                            ((g$init*$10106$RATN9)
                                                                             ((case-lambda
                                                                                ((g$rhs*$10107$RATN9)
                                                                                 ((case-lambda
                                                                                    (()
                                                                                     (begin
                                                                                       (g$unseal-rib!$6904$RATN9
                                                                                         g$rib$10078$RATN9)
                                                                                       ((case-lambda
                                                                                          ((g$loc*$10108$RATN9
                                                                                             g$export-subst$10109$RATN9)
                                                                                           (letrec* ((g$errstr$10110$RATN9
                                                                                                       '"attempt to export mutated variable"))
                                                                                             (call-with-values
                                                                                               (case-lambda
                                                                                                 (()
                                                                                                  (g$make-export-env/macros$7313$RATN9
                                                                                                    g$lex*$10102$RATN9
                                                                                                    g$loc*$10108$RATN9
                                                                                                    g$r$10104$RATN9)))
                                                                                               (case-lambda
                                                                                                 ((g$export-env$10114$RATN9
                                                                                                    g$global*$10115$RATN9
                                                                                                    g$macro*$10116$RATN9)
                                                                                                  ((case-lambda
                                                                                                     ((g$macro*$10117$RATN9
                                                                                                        g$global*$10118$RATN9
                                                                                                        g$export-env$10119$RATN9)
                                                                                                      (begin
                                                                                                        (for-each
                                                                                                          (case-lambda
                                                                                                            ((g$s$10120$RATN9)
                                                                                                             ((case-lambda
                                                                                                                ((g$name$10121$RATN9
                                                                                                                   g$label$10122$RATN9)
                                                                                                                 ((case-lambda
                                                                                                                    ((g$p$10123$RATN9)
                                                                                                                     (if g$p$10123$RATN9
                                                                                                                       ((case-lambda
                                                                                                                          ((g$b$10124$RATN9)
                                                                                                                           ((case-lambda
                                                                                                                              ((g$type$10125$RATN9)
                                                                                                                               (if (eq? g$type$10125$RATN9
                                                                                                                                        'mutable)
                                                                                                                                 (g$syntax-violation$7321$RATN9
                                                                                                                                   'export
                                                                                                                                   g$errstr$10110$RATN9
                                                                                                                                   g$name$10121$RATN9)
                                                                                                                                 (void))))
                                                                                                                            (car g$b$10124$RATN9))))
                                                                                                                        (cdr g$p$10123$RATN9))
                                                                                                                       (void))))
                                                                                                                  (assq
                                                                                                                    g$label$10122$RATN9
                                                                                                                    g$export-env$10119$RATN9))))
                                                                                                              (car g$s$10120$RATN9)
                                                                                                              (cdr g$s$10120$RATN9))))
                                                                                                          g$export-subst$10109$RATN9)
                                                                                                        ((case-lambda
                                                                                                           ((g$invoke-body$10126$RATN9
                                                                                                              g$invoke-definitions$10127$RATN9)
                                                                                                            (values
                                                                                                              (g$itc$10056$RATN9)
                                                                                                              (g$rtc$10080$RATN9)
                                                                                                              (g$vtc$10081$RATN9)
                                                                                                              (g$build-sequence$6871$RATN9
                                                                                                                '#f
                                                                                                                (append
                                                                                                                  g$invoke-definitions$10127$RATN9
                                                                                                                  (list
                                                                                                                    g$invoke-body$10126$RATN9)))
                                                                                                              g$macro*$10117$RATN9
                                                                                                              g$export-subst$10109$RATN9
                                                                                                              g$export-env$10119$RATN9)))
                                                                                                         (g$build-library-letrec*$6875$RATN9
                                                                                                           '#f
                                                                                                           g$name$10051$RATN9
                                                                                                           g$lex*$10102$RATN9
                                                                                                           g$loc*$10108$RATN9
                                                                                                           g$rhs*$10107$RATN9
                                                                                                           (if (null?
                                                                                                                 g$init*$10106$RATN9)
                                                                                                             (g$build-void$6872$RATN9)
                                                                                                             (g$build-sequence$6871$RATN9
                                                                                                               '#f
                                                                                                               g$init*$10106$RATN9)))
                                                                                                         (map g$build-global-define$6867$RATN9
                                                                                                              (map cdr
                                                                                                                   g$global*$10118$RATN9))))))
                                                                                                   g$macro*$10116$RATN9
                                                                                                   g$global*$10115$RATN9
                                                                                                   g$export-env$10114$RATN9)))))))
                                                                                        (map g$gen-global$6882$RATN9
                                                                                             g$lex*$10102$RATN9)
                                                                                        (g$make-export-subst$7312$RATN9
                                                                                          g$exp-int*$10071$RATN9
                                                                                          g$exp-ext*$10070$RATN9
                                                                                          g$rib$10078$RATN9))))))))
                                                                              (g$chi-rhs*$7241$RATN9
                                                                                g$rhs*$10101$RATN9
                                                                                g$r$10104$RATN9
                                                                                g$mr$10103$RATN9))))
                                                                          (g$chi-expr*$7231$RATN9
                                                                            g$init*$10105$RATN9
                                                                            g$r$10104$RATN9
                                                                            g$mr$10103$RATN9)))))
                                                                    g$rhs*$10100$RATN9
                                                                    g$lex*$10099$RATN9
                                                                    g$mr$10098$RATN9
                                                                    g$r$10097$RATN9
                                                                    g$init*$10096$RATN9))))))
                                                           g$swap$10090$RATN9)))
                                                      (case-lambda
                                                        (()
                                                         (begin
                                                           ((case-lambda
                                                              ((g$t$10128$RATN9)
                                                               (begin
                                                                 (g$inv-collector$10086$RATN9
                                                                   g$inv-collector$10088$RATN9)
                                                                 (set! g$inv-collector$10088$RATN9
                                                                   g$t$10128$RATN9))))
                                                            (g$inv-collector$10086$RATN9))
                                                           ((case-lambda
                                                              ((g$t$10129$RATN9)
                                                               (begin
                                                                 (g$vis-collector$10087$RATN9
                                                                   g$vis-collector$10089$RATN9)
                                                                 (set! g$vis-collector$10089$RATN9
                                                                   g$t$10129$RATN9))))
                                                            (g$vis-collector$10087$RATN9))))))))
                                                  g$inv-collector$7267$RATN9
                                                  g$vis-collector$7268$RATN9
                                                  g$rtc$10080$RATN9
                                                  g$vtc$10081$RATN9)))
                                              (map (case-lambda
                                                     ((g$x$10130$RATN9)
                                                      (g$make-stx$6910$RATN9
                                                        g$x$10130$RATN9
                                                        g$top-mark*$6879$RATN9
                                                        (list g$rib$10078$RATN9)
                                                        '())))
                                                   g$b*$10054$RATN9)
                                              (g$make-collector$7266$RATN9)
                                              (g$make-collector$7266$RATN9))))
                                          (g$make-top-rib$7265$RATN9
                                            g$subst-names$10077$RATN9
                                            g$subst-labels$10076$RATN9))))
                                      g$subst-labels$10075$RATN9
                                      g$subst-names$10074$RATN9))))))
                             g$exp-ext*$10069$RATN9
                             g$exp-int*$10068$RATN9))))))
                    g$swap$10065$RATN9)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10131$RATN9)
                        (begin
                          (g$imp-collector$10061$RATN9
                            g$imp-collector$10063$RATN9)
                          (set! g$imp-collector$10063$RATN9 g$t$10131$RATN9))))
                     (g$imp-collector$10061$RATN9))
                    ((case-lambda
                       ((g$t$10132$RATN9)
                        (begin
                          (g$top-level-context$10062$RATN9
                            g$top-level-context$10064$RATN9)
                          (set! g$top-level-context$10064$RATN9
                            g$t$10132$RATN9))))
                     (g$top-level-context$10062$RATN9))))))))
           g$imp-collector$7269$RATN9
           g$top-level-context$7328$RATN9
           g$itc$10056$RATN9
           '#f)))))
   (g$core-library-expander$7273$RATN9
     g$core-library-expander$10723$RATN9
     (case-lambda
       ((g$e$10133$RATN9 g$verify-name$10134$RATN9)
        (call-with-values
          (case-lambda (() (g$parse-library$7263$RATN9 g$e$10133$RATN9)))
          (case-lambda
            ((g$name*$10139$RATN9
               g$exp*$10140$RATN9
               g$imp*$10141$RATN9
               g$b*$10142$RATN9)
             ((case-lambda
                ((g$b*$10143$RATN9
                   g$imp*$10144$RATN9
                   g$exp*$10145$RATN9
                   g$name*$10146$RATN9)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$7262$RATN9 g$name*$10146$RATN9)))
                   (case-lambda
                     ((g$name$10149$RATN9 g$ver$10150$RATN9)
                      ((case-lambda
                         ((g$ver$10151$RATN9 g$name$10152$RATN9)
                          (begin
                            (g$verify-name$10134$RATN9 g$name$10152$RATN9)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$7272$RATN9
                                   g$name$10152$RATN9
                                   g$exp*$10145$RATN9
                                   g$imp*$10144$RATN9
                                   g$b*$10143$RATN9
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10160$RATN9
                                   g$invoke-req*$10161$RATN9
                                   g$visit-req*$10162$RATN9
                                   g$invoke-code$10163$RATN9
                                   g$visit-code$10164$RATN9
                                   g$export-subst$10165$RATN9
                                   g$export-env$10166$RATN9)
                                 ((case-lambda
                                    ((g$export-env$10167$RATN9
                                       g$export-subst$10168$RATN9
                                       g$visit-code$10169$RATN9
                                       g$invoke-code$10170$RATN9
                                       g$visit-req*$10171$RATN9
                                       g$invoke-req*$10172$RATN9
                                       g$imp*$10173$RATN9)
                                     (values
                                       g$name$10152$RATN9
                                       g$ver$10151$RATN9
                                       g$imp*$10173$RATN9
                                       g$invoke-req*$10172$RATN9
                                       g$visit-req*$10171$RATN9
                                       g$invoke-code$10170$RATN9
                                       g$visit-code$10169$RATN9
                                       g$export-subst$10168$RATN9
                                       g$export-env$10167$RATN9)))
                                  g$export-env$10166$RATN9
                                  g$export-subst$10165$RATN9
                                  g$visit-code$10164$RATN9
                                  g$invoke-code$10163$RATN9
                                  g$visit-req*$10162$RATN9
                                  g$invoke-req*$10161$RATN9
                                  g$imp*$10160$RATN9)))))))
                       g$ver$10150$RATN9
                       g$name$10149$RATN9))))))
              g$b*$10142$RATN9
              g$imp*$10141$RATN9
              g$exp*$10140$RATN9
              g$name*$10139$RATN9)))))))
   (g$parse-top-level-program$7274$RATN9
     g$parse-top-level-program$10724$RATN9
     (case-lambda
       ((g$e*$10174$RATN9)
        ((case-lambda
           ((g$t$10175$RATN9)
            ((case-lambda
               ((g$ls/false$10176$RATN9)
                (if (if g$ls/false$10176$RATN9
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10177$RATN9
                               g$imp*$10178$RATN9
                               g$b*$10179$RATN9)
                             (eq? (g$syntax->datum$7324$RATN9
                                    g$import$10177$RATN9)
                                  'import)))
                          g$ls/false$10176$RATN9))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10180$RATN9
                         g$imp*$10181$RATN9
                         g$b*$10182$RATN9)
                       (values g$imp*$10181$RATN9 g$b*$10182$RATN9)))
                    g$ls/false$10176$RATN9)
                  ((case-lambda
                     ((g$t$10183$RATN9)
                      ((case-lambda
                         ((g$ls/false$10184$RATN9)
                          (if (if g$ls/false$10184$RATN9
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10185$RATN9
                                         g$x$10186$RATN9
                                         g$y$10187$RATN9)
                                       (eq? (g$syntax->datum$7324$RATN9
                                              g$import$10185$RATN9)
                                            'import)))
                                    g$ls/false$10184$RATN9))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10188$RATN9
                                   g$x$10189$RATN9
                                   g$y$10190$RATN9)
                                 (g$syntax-violation$7321$RATN9
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$6934$RATN9 g$e*$10174$RATN9))))
                              g$ls/false$10184$RATN9)
                            ((case-lambda
                               ((g$t$10191$RATN9)
                                ((case-lambda
                                   ((g$ls/false$10192$RATN9)
                                    (if g$ls/false$10192$RATN9
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10192$RATN9)
                                      (g$syntax-violation$7321$RATN9
                                        '#f
                                        '"invalid syntax"
                                        g$t$10191$RATN9))))
                                 (g$syntax-dispatch$7215$RATN9
                                   g$t$10191$RATN9
                                   '_))))
                             g$t$10183$RATN9))))
                       (g$syntax-dispatch$7215$RATN9
                         g$t$10183$RATN9
                         '((any . any) . any)))))
                   g$t$10175$RATN9))))
             (g$syntax-dispatch$7215$RATN9
               g$t$10175$RATN9
               '((any . each-any) . each-any)))))
         g$e*$10174$RATN9))))
   (g$top-level-expander$7275$RATN9
     g$top-level-expander$10725$RATN9
     (case-lambda
       ((g$e*$10193$RATN9)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$7274$RATN9 g$e*$10193$RATN9)))
          (case-lambda
            ((g$imp*$10196$RATN9 g$b*$10197$RATN9)
             ((case-lambda
                ((g$b*$10198$RATN9 g$imp*$10199$RATN9)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$7272$RATN9
                        '()
                        '()
                        g$imp*$10199$RATN9
                        g$b*$10198$RATN9
                        '#t)))
                   (case-lambda
                     ((g$imp*$10207$RATN9
                        g$invoke-req*$10208$RATN9
                        g$visit-req*$10209$RATN9
                        g$invoke-code$10210$RATN9
                        g$visit-code$10211$RATN9
                        g$export-subst$10212$RATN9
                        g$export-env$10213$RATN9)
                      ((case-lambda
                         ((g$export-env$10214$RATN9
                            g$export-subst$10215$RATN9
                            g$visit-code$10216$RATN9
                            g$invoke-code$10217$RATN9
                            g$visit-req*$10218$RATN9
                            g$invoke-req*$10219$RATN9
                            g$imp*$10220$RATN9)
                          (values
                            g$invoke-req*$10219$RATN9
                            g$invoke-code$10217$RATN9)))
                       g$export-env$10213$RATN9
                       g$export-subst$10212$RATN9
                       g$visit-code$10211$RATN9
                       g$invoke-code$10210$RATN9
                       g$visit-req*$10209$RATN9
                       g$invoke-req*$10208$RATN9
                       g$imp*$10207$RATN9))))))
              g$b*$10197$RATN9
              g$imp*$10196$RATN9)))))))
   (g$8168$7276$RATN9
     g$8168$10726$RATN9
     (make-record-type-descriptor
       'env
       '#f
       'g$8171$RATN9
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8170$7277$RATN9 g$8170$10727$RATN9 '#f)
   (g$8169$7278$RATN9
     g$8169$10728$RATN9
     (make-record-constructor-descriptor
       g$8168$7276$RATN9
       '#f
       g$8170$7277$RATN9))
   (g$env?$7279$RATN9
     g$env?$10729$RATN9
     (record-predicate g$8168$7276$RATN9))
   (g$make-env$7280$RATN9
     g$make-env$10730$RATN9
     (record-constructor g$8169$7278$RATN9))
   (g$env-names$7281$RATN9
     g$env-names$10731$RATN9
     (record-accessor g$8168$7276$RATN9 '0))
   (g$env-labels$7282$RATN9
     g$env-labels$10732$RATN9
     (record-accessor g$8168$7276$RATN9 '1))
   (g$env-itc$7283$RATN9
     g$env-itc$10733$RATN9
     (record-accessor g$8168$7276$RATN9 '2))
   (g$set-env-names!$7284$RATN9
     g$set-env-names!$10734$RATN9
     (record-mutator g$8168$7276$RATN9 '0))
   (g$set-env-labels!$7285$RATN9
     g$set-env-labels!$10735$RATN9
     (record-mutator g$8168$7276$RATN9 '1))
   (g$set-env-itc!$7286$RATN9
     g$set-env-itc!$10736$RATN9
     (record-mutator g$8168$7276$RATN9 '2))
   (g$rp$7287$RATN9
     g$rp$10737$RATN9
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10221$RATN9 g$p$10222$RATN9)
          (display '"#<environment>" g$p$10222$RATN9)))))
   (g$8187$7288$RATN9
     g$8187$10738$RATN9
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8190$RATN9
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8189$7289$RATN9 g$8189$10739$RATN9 '#f)
   (g$8188$7290$RATN9
     g$8188$10740$RATN9
     (make-record-constructor-descriptor
       g$8187$7288$RATN9
       '#f
       g$8189$7289$RATN9))
   (g$interaction-env?$7291$RATN9
     g$interaction-env?$10741$RATN9
     (record-predicate g$8187$7288$RATN9))
   (g$make-interaction-env$7292$RATN9
     g$make-interaction-env$10742$RATN9
     (record-constructor g$8188$7290$RATN9))
   (g$interaction-env-rib$7293$RATN9
     g$interaction-env-rib$10743$RATN9
     (record-accessor g$8187$7288$RATN9 '0))
   (g$interaction-env-r$7294$RATN9
     g$interaction-env-r$10744$RATN9
     (record-accessor g$8187$7288$RATN9 '1))
   (g$interaction-env-locs$7295$RATN9
     g$interaction-env-locs$10745$RATN9
     (record-accessor g$8187$7288$RATN9 '2))
   (g$set-interaction-env-rib!$7296$RATN9
     g$set-interaction-env-rib!$10746$RATN9
     (record-mutator g$8187$7288$RATN9 '0))
   (g$set-interaction-env-r!$7297$RATN9
     g$set-interaction-env-r!$10747$RATN9
     (record-mutator g$8187$7288$RATN9 '1))
   (g$set-interaction-env-locs!$7298$RATN9
     g$set-interaction-env-locs!$10748$RATN9
     (record-mutator g$8187$7288$RATN9 '2))
   (g$rp$7299$RATN9
     g$rp$10749$RATN9
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10223$RATN9 g$p$10224$RATN9)
          (display '"#<environment>" g$p$10224$RATN9)))))
   (g$interaction-environment-symbols$7300$RATN9
     g$interaction-environment-symbols$10750$RATN9
     (case-lambda
       (()
        (map (case-lambda ((g$x$10225$RATN9) g$x$10225$RATN9))
             (g$rib-sym*$6892$RATN9
               (g$interaction-env-rib$7293$RATN9
                 (g$interaction-environment$7327$RATN9)))))))
   (g$environment-symbols$7301$RATN9
     g$environment-symbols$10751$RATN9
     (case-lambda
       ((g$e$10226$RATN9)
        (vector->list (g$env-names$7281$RATN9 g$e$10226$RATN9)))))
   (g$environment?$7302$RATN9
     g$environment?$10752$RATN9
     (case-lambda
       ((g$x$10227$RATN9)
        ((case-lambda
           ((g$t$10228$RATN9)
            (if g$t$10228$RATN9
              g$t$10228$RATN9
              (begin '#f (g$interaction-env?$7291$RATN9 g$x$10227$RATN9)))))
         (g$env?$7279$RATN9 g$x$10227$RATN9)))))
   (g$environment$7303$RATN9
     g$environment$10753$RATN9
     (case-lambda
       (g$imp*$10229$RATN9
        ((case-lambda
           ((g$itc$10230$RATN9)
            ((case-lambda
               ((g$imp-collector$10233$RATN9 g$imp-collector$10234$RATN9)
                ((case-lambda
                   ((g$swap$10235$RATN9)
                    (dynamic-wind
                      g$swap$10235$RATN9
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$7264$RATN9
                                g$imp*$10229$RATN9)))
                           (case-lambda
                             ((g$subst-names$10238$RATN9
                                g$subst-labels$10239$RATN9)
                              ((case-lambda
                                 ((g$subst-labels$10240$RATN9
                                    g$subst-names$10241$RATN9)
                                  (g$make-env$7280$RATN9
                                    g$subst-names$10241$RATN9
                                    g$subst-labels$10240$RATN9
                                    g$itc$10230$RATN9)))
                               g$subst-labels$10239$RATN9
                               g$subst-names$10238$RATN9))))))
                      g$swap$10235$RATN9)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10242$RATN9)
                        (begin
                          (g$imp-collector$10233$RATN9
                            g$imp-collector$10234$RATN9)
                          (set! g$imp-collector$10234$RATN9 g$t$10242$RATN9))))
                     (g$imp-collector$10233$RATN9)))))))
             g$imp-collector$7269$RATN9
             g$itc$10230$RATN9)))
         (g$make-collector$7266$RATN9)))))
   (g$null-environment$7304$RATN9
     g$null-environment$10754$RATN9
     (case-lambda
       ((g$n$10243$RATN9)
        (begin
          (if (eqv? g$n$10243$RATN9 '5)
            (void)
            (assertion-violation 'null-environment '"not 5" g$n$10243$RATN9))
          (g$environment$7303$RATN9 '(psyntax null-environment-5))))))
   (g$scheme-report-environment$7305$RATN9
     g$scheme-report-environment$10755$RATN9
     (case-lambda
       ((g$n$10244$RATN9)
        (begin
          (if (eqv? g$n$10244$RATN9 '5)
            (void)
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10244$RATN9))
          (g$environment$7303$RATN9 '(psyntax scheme-report-environment-5))))))
   (g$expand$7306$RATN9
     g$expand$10756$RATN9
     (case-lambda
       ((g$x$10245$RATN9 g$env$10246$RATN9)
        (if (g$env?$7279$RATN9 g$env$10246$RATN9)
          ((case-lambda
             ((g$rib$10247$RATN9)
              ((case-lambda
                 ((g$x$10248$RATN9
                    g$itc$10249$RATN9
                    g$rtc$10250$RATN9
                    g$vtc$10251$RATN9)
                  ((case-lambda
                     ((g$x$10252$RATN9)
                      (begin
                        (g$seal-rib!$6903$RATN9 g$rib$10247$RATN9)
                        (values g$x$10252$RATN9 (g$rtc$10250$RATN9)))))
                   ((case-lambda
                      ((g$inv-collector$10259$RATN9
                         g$vis-collector$10260$RATN9
                         g$imp-collector$10261$RATN9
                         g$inv-collector$10262$RATN9
                         g$vis-collector$10263$RATN9
                         g$imp-collector$10264$RATN9)
                       ((case-lambda
                          ((g$swap$10265$RATN9)
                           (dynamic-wind
                             g$swap$10265$RATN9
                             (case-lambda
                               (()
                                (g$chi-expr$7233$RATN9
                                  g$x$10248$RATN9
                                  '()
                                  '())))
                             g$swap$10265$RATN9)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10266$RATN9)
                                 (begin
                                   (g$inv-collector$10259$RATN9
                                     g$inv-collector$10262$RATN9)
                                   (set! g$inv-collector$10262$RATN9
                                     g$t$10266$RATN9))))
                              (g$inv-collector$10259$RATN9))
                             ((case-lambda
                                ((g$t$10267$RATN9)
                                 (begin
                                   (g$vis-collector$10260$RATN9
                                     g$vis-collector$10263$RATN9)
                                   (set! g$vis-collector$10263$RATN9
                                     g$t$10267$RATN9))))
                              (g$vis-collector$10260$RATN9))
                             ((case-lambda
                                ((g$t$10268$RATN9)
                                 (begin
                                   (g$imp-collector$10261$RATN9
                                     g$imp-collector$10264$RATN9)
                                   (set! g$imp-collector$10264$RATN9
                                     g$t$10268$RATN9))))
                              (g$imp-collector$10261$RATN9))))))))
                    g$inv-collector$7267$RATN9
                    g$vis-collector$7268$RATN9
                    g$imp-collector$7269$RATN9
                    g$rtc$10250$RATN9
                    g$vtc$10251$RATN9
                    g$itc$10249$RATN9))))
               (g$make-stx$6910$RATN9
                 g$x$10245$RATN9
                 g$top-mark*$6879$RATN9
                 (list g$rib$10247$RATN9)
                 '())
               (g$env-itc$7283$RATN9 g$env$10246$RATN9)
               (g$make-collector$7266$RATN9)
               (g$make-collector$7266$RATN9))))
           (g$make-top-rib$7265$RATN9
             (g$env-names$7281$RATN9 g$env$10246$RATN9)
             (g$env-labels$7282$RATN9 g$env$10246$RATN9)))
          (if (g$interaction-env?$7291$RATN9 g$env$10246$RATN9)
            ((case-lambda
               ((g$rib$10269$RATN9 g$r$10270$RATN9 g$rtc$10271$RATN9)
                ((case-lambda
                   ((g$x$10272$RATN9)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$10283$RATN9
                               g$inv-collector$10284$RATN9
                               g$vis-collector$10285$RATN9
                               g$imp-collector$10286$RATN9
                               g$top-level-context$10287$RATN9
                               g$inv-collector$10288$RATN9
                               g$vis-collector$10289$RATN9
                               g$imp-collector$10290$RATN9)
                             ((case-lambda
                                ((g$swap$10291$RATN9)
                                 (dynamic-wind
                                   g$swap$10291$RATN9
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$7271$RATN9
                                        g$x$10272$RATN9
                                        g$rib$10269$RATN9
                                        g$r$10270$RATN9)))
                                   g$swap$10291$RATN9)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$10292$RATN9)
                                       (begin
                                         (g$top-level-context$10283$RATN9
                                           g$top-level-context$10287$RATN9)
                                         (set! g$top-level-context$10287$RATN9
                                           g$t$10292$RATN9))))
                                    (g$top-level-context$10283$RATN9))
                                   ((case-lambda
                                      ((g$t$10293$RATN9)
                                       (begin
                                         (g$inv-collector$10284$RATN9
                                           g$inv-collector$10288$RATN9)
                                         (set! g$inv-collector$10288$RATN9
                                           g$t$10293$RATN9))))
                                    (g$inv-collector$10284$RATN9))
                                   ((case-lambda
                                      ((g$t$10294$RATN9)
                                       (begin
                                         (g$vis-collector$10285$RATN9
                                           g$vis-collector$10289$RATN9)
                                         (set! g$vis-collector$10289$RATN9
                                           g$t$10294$RATN9))))
                                    (g$vis-collector$10285$RATN9))
                                   ((case-lambda
                                      ((g$t$10295$RATN9)
                                       (begin
                                         (g$imp-collector$10286$RATN9
                                           g$imp-collector$10290$RATN9)
                                         (set! g$imp-collector$10290$RATN9
                                           g$t$10295$RATN9))))
                                    (g$imp-collector$10286$RATN9))))))))
                          g$top-level-context$7328$RATN9
                          g$inv-collector$7267$RATN9
                          g$vis-collector$7268$RATN9
                          g$imp-collector$7269$RATN9
                          g$env$10246$RATN9
                          g$rtc$10271$RATN9
                          (g$make-collector$7266$RATN9)
                          (g$make-collector$7266$RATN9))))
                      (case-lambda
                        ((g$e$10296$RATN9 g$r^$10297$RATN9)
                         ((case-lambda
                            ((g$r^$10298$RATN9 g$e$10299$RATN9)
                             (begin
                               (g$set-interaction-env-r!$7297$RATN9
                                 g$env$10246$RATN9
                                 g$r^$10298$RATN9)
                               (values g$e$10299$RATN9 (g$rtc$10271$RATN9)))))
                          g$r^$10297$RATN9
                          g$e$10296$RATN9))))))
                 (g$make-stx$6910$RATN9
                   g$x$10245$RATN9
                   g$top-mark*$6879$RATN9
                   (list g$rib$10269$RATN9)
                   '()))))
             (g$interaction-env-rib$7293$RATN9 g$env$10246$RATN9)
             (g$interaction-env-r$7294$RATN9 g$env$10246$RATN9)
             (g$make-collector$7266$RATN9))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10246$RATN9))))))
   (g$eval$7307$RATN9
     g$eval$10757$RATN9
     (case-lambda
       ((g$x$10300$RATN9 g$env$10301$RATN9)
        (begin
          (if (g$environment?$7302$RATN9 g$env$10301$RATN9)
            (void)
            (error 'eval '"not an environment" g$env$10301$RATN9))
          (call-with-values
            (case-lambda
              (() (g$expand$7306$RATN9 g$x$10300$RATN9 g$env$10301$RATN9)))
            (case-lambda
              ((g$x$10304$RATN9 g$invoke-req*$10305$RATN9)
               ((case-lambda
                  ((g$invoke-req*$10306$RATN9 g$x$10307$RATN9)
                   (begin
                     (for-each
                       g$invoke-library$6752$RATN9
                       g$invoke-req*$10306$RATN9)
                     (eval-core
                       (g$expanded->core$6451$RATN9 g$x$10307$RATN9)))))
                g$invoke-req*$10305$RATN9
                g$x$10304$RATN9))))))))
   (g$library-expander$7308$RATN9
     g$library-expander$10758$RATN9
     (case-lambda
       ((g$x$10308$RATN9 g$filename$10309$RATN9 g$verify-name$10310$RATN9)
        (letrec* ((g$build-visit-code$10311$RATN9
                    (case-lambda
                      ((g$macro*$10354$RATN9)
                       (if (null? g$macro*$10354$RATN9)
                         (g$build-void$6872$RATN9)
                         (g$build-sequence$6871$RATN9
                           '#f
                           (map (case-lambda
                                  ((g$x$10355$RATN9)
                                   ((case-lambda
                                      ((g$loc$10356$RATN9 g$src$10357$RATN9)
                                       (list
                                         'set!
                                         g$loc$10356$RATN9
                                         g$src$10357$RATN9)))
                                    (car g$x$10355$RATN9)
                                    (g$cddr$4898$RATN9 g$x$10355$RATN9))))
                                g$macro*$10354$RATN9))))))
                  (g$visit!$10312$RATN9
                    (case-lambda
                      ((g$macro*$10350$RATN9)
                       (for-each
                         (case-lambda
                           ((g$x$10351$RATN9)
                            ((case-lambda
                               ((g$loc$10352$RATN9 g$proc$10353$RATN9)
                                (set-symbol-value!
                                  g$loc$10352$RATN9
                                  g$proc$10353$RATN9)))
                             (car g$x$10351$RATN9)
                             (g$cadr$4896$RATN9 g$x$10351$RATN9))))
                         g$macro*$10350$RATN9)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$7273$RATN9
                 g$x$10308$RATN9
                 g$verify-name$10310$RATN9)))
            (case-lambda
              ((g$name$10322$RATN9
                 g$ver$10323$RATN9
                 g$imp*$10324$RATN9
                 g$inv*$10325$RATN9
                 g$vis*$10326$RATN9
                 g$invoke-code$10327$RATN9
                 g$macro*$10328$RATN9
                 g$export-subst$10329$RATN9
                 g$export-env$10330$RATN9)
               ((case-lambda
                  ((g$export-env$10331$RATN9
                     g$export-subst$10332$RATN9
                     g$macro*$10333$RATN9
                     g$invoke-code$10334$RATN9
                     g$vis*$10335$RATN9
                     g$inv*$10336$RATN9
                     g$imp*$10337$RATN9
                     g$ver$10338$RATN9
                     g$name$10339$RATN9)
                   ((case-lambda
                      ((g$id$10340$RATN9
                         g$name$10341$RATN9
                         g$ver$10342$RATN9
                         g$imp*$10343$RATN9
                         g$vis*$10344$RATN9
                         g$inv*$10345$RATN9
                         g$visit-proc$10346$RATN9
                         g$invoke-proc$10347$RATN9
                         g$visit-code$10348$RATN9
                         g$invoke-code$10349$RATN9)
                       (begin
                         (g$install-library$6750$RATN9
                           g$id$10340$RATN9
                           g$name$10341$RATN9
                           g$ver$10342$RATN9
                           g$imp*$10343$RATN9
                           g$vis*$10344$RATN9
                           g$inv*$10345$RATN9
                           g$export-subst$10332$RATN9
                           g$export-env$10331$RATN9
                           g$visit-proc$10346$RATN9
                           g$invoke-proc$10347$RATN9
                           g$visit-code$10348$RATN9
                           g$invoke-code$10349$RATN9
                           '#t
                           g$filename$10309$RATN9)
                         (values
                           g$id$10340$RATN9
                           g$name$10341$RATN9
                           g$ver$10342$RATN9
                           g$imp*$10343$RATN9
                           g$vis*$10344$RATN9
                           g$inv*$10345$RATN9
                           g$invoke-code$10349$RATN9
                           g$visit-code$10348$RATN9
                           g$export-subst$10332$RATN9
                           g$export-env$10331$RATN9))))
                    (gensym)
                    g$name$10339$RATN9
                    g$ver$10338$RATN9
                    (map g$library-spec$6756$RATN9 g$imp*$10337$RATN9)
                    (map g$library-spec$6756$RATN9 g$vis*$10335$RATN9)
                    (map g$library-spec$6756$RATN9 g$inv*$10336$RATN9)
                    (case-lambda
                      (() (g$visit!$10312$RATN9 g$macro*$10333$RATN9)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$6451$RATN9
                           g$invoke-code$10334$RATN9))))
                    (g$build-visit-code$10311$RATN9 g$macro*$10333$RATN9)
                    g$invoke-code$10334$RATN9)))
                g$export-env$10330$RATN9
                g$export-subst$10329$RATN9
                g$macro*$10328$RATN9
                g$invoke-code$10327$RATN9
                g$vis*$10326$RATN9
                g$inv*$10325$RATN9
                g$imp*$10324$RATN9
                g$ver$10323$RATN9
                g$name$10322$RATN9))))))
       ((g$x$10358$RATN9 g$filename$10359$RATN9)
        (g$library-expander$7308$RATN9
          g$x$10358$RATN9
          g$filename$10359$RATN9
          (case-lambda ((g$x$10360$RATN9) (values)))))
       ((g$x$10361$RATN9)
        (g$library-expander$7308$RATN9
          g$x$10361$RATN9
          '#f
          (case-lambda ((g$x$10362$RATN9) (values)))))))
   (g$boot-library-expand$7309$RATN9
     g$boot-library-expand$10759$RATN9
     (case-lambda
       ((g$x$10363$RATN9)
        (call-with-values
          (case-lambda (() (g$library-expander$7308$RATN9 g$x$10363$RATN9)))
          (case-lambda
            ((g$id$10374$RATN9
               g$name$10375$RATN9
               g$ver$10376$RATN9
               g$imp*$10377$RATN9
               g$vis*$10378$RATN9
               g$inv*$10379$RATN9
               g$invoke-code$10380$RATN9
               g$visit-code$10381$RATN9
               g$export-subst$10382$RATN9
               g$export-env$10383$RATN9)
             ((case-lambda
                ((g$export-env$10384$RATN9
                   g$export-subst$10385$RATN9
                   g$visit-code$10386$RATN9
                   g$invoke-code$10387$RATN9
                   g$inv*$10388$RATN9
                   g$vis*$10389$RATN9
                   g$imp*$10390$RATN9
                   g$ver$10391$RATN9
                   g$name$10392$RATN9
                   g$id$10393$RATN9)
                 (values
                   g$name$10392$RATN9
                   g$invoke-code$10387$RATN9
                   g$export-subst$10385$RATN9
                   g$export-env$10384$RATN9)))
              g$export-env$10383$RATN9
              g$export-subst$10382$RATN9
              g$visit-code$10381$RATN9
              g$invoke-code$10380$RATN9
              g$inv*$10379$RATN9
              g$vis*$10378$RATN9
              g$imp*$10377$RATN9
              g$ver$10376$RATN9
              g$name$10375$RATN9
              g$id$10374$RATN9)))))))
   (g$rev-map-append$7310$RATN9
     g$rev-map-append$10760$RATN9
     (case-lambda
       ((g$f$10394$RATN9 g$ls$10395$RATN9 g$ac$10396$RATN9)
        (if (null? g$ls$10395$RATN9)
          g$ac$10396$RATN9
          (g$rev-map-append$7310$RATN9
            g$f$10394$RATN9
            (cdr g$ls$10395$RATN9)
            (cons
              (g$f$10394$RATN9 (car g$ls$10395$RATN9))
              g$ac$10396$RATN9))))))
   (g$build-exports$7311$RATN9
     g$build-exports$10761$RATN9
     (case-lambda
       ((g$lex*+loc*$10397$RATN9 g$init*$10398$RATN9)
        (g$build-sequence$6871$RATN9
          '#f
          (cons
            (g$build-void$6872$RATN9)
            (g$rev-map-append$7310$RATN9
              (case-lambda
                ((g$x$10399$RATN9)
                 (list 'set! (cdr g$x$10399$RATN9) (car g$x$10399$RATN9))))
              g$lex*+loc*$10397$RATN9
              g$init*$10398$RATN9))))))
   (g$make-export-subst$7312$RATN9
     g$make-export-subst$10762$RATN9
     (case-lambda
       ((g$int*$10400$RATN9 g$ext*$10401$RATN9 g$rib$10402$RATN9)
        (map (case-lambda
               ((g$int$10403$RATN9 g$ext$10404$RATN9)
                ((case-lambda
                   ((g$id$10405$RATN9)
                    ((case-lambda
                       ((g$label$10406$RATN9)
                        ((case-lambda
                           (()
                            (begin
                              (if g$label$10406$RATN9
                                (void)
                                (g$syntax-violation$7321$RATN9
                                  '#f
                                  '"cannot export unbound identifier"
                                  g$id$10405$RATN9))
                              (cons g$ext$10404$RATN9 g$label$10406$RATN9)))))))
                     (g$id->label$6950$RATN9 g$id$10405$RATN9))))
                 (g$make-stx$6910$RATN9
                   g$int$10403$RATN9
                   g$top-mark*$6879$RATN9
                   (list g$rib$10402$RATN9)
                   '()))))
             g$int*$10400$RATN9
             g$ext*$10401$RATN9))))
   (g$make-export-env/macros$7313$RATN9
     g$make-export-env/macros$10763$RATN9
     (case-lambda
       ((g$lex*$10407$RATN9 g$loc*$10408$RATN9 g$r$10409$RATN9)
        (letrec* ((g$lookup$10410$RATN9
                    (case-lambda
                      ((g$x$10425$RATN9)
                       ((letrec ((g$f$10426$RATN9
                                   (case-lambda
                                     ((g$x$10427$RATN9
                                        g$lex*$10428$RATN9
                                        g$loc*$10429$RATN9)
                                      (if (pair? g$lex*$10428$RATN9)
                                        (if (eq? g$x$10427$RATN9
                                                 (car g$lex*$10428$RATN9))
                                          (car g$loc*$10429$RATN9)
                                          (g$f$10426$RATN9
                                            g$x$10427$RATN9
                                            (cdr g$lex*$10428$RATN9)
                                            (cdr g$loc*$10429$RATN9)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$10426$RATN9)
                        g$x$10425$RATN9
                        g$lex*$10407$RATN9
                        g$loc*$10408$RATN9)))))
          ((letrec ((g$f$10411$RATN9
                      (case-lambda
                        ((g$r$10412$RATN9
                           g$env$10413$RATN9
                           g$global*$10414$RATN9
                           g$macro*$10415$RATN9)
                         (if (null? g$r$10412$RATN9)
                           (values
                             g$env$10413$RATN9
                             g$global*$10414$RATN9
                             g$macro*$10415$RATN9)
                           ((case-lambda
                              ((g$x$10416$RATN9)
                               ((case-lambda
                                  ((g$label$10417$RATN9 g$b$10418$RATN9)
                                   ((case-lambda
                                      ((g$t$10419$RATN9)
                                       (if (eqv? g$t$10419$RATN9 'lexical)
                                         ((case-lambda
                                            ((g$v$10422$RATN9)
                                             ((case-lambda
                                                ((g$loc$10423$RATN9
                                                   g$type$10424$RATN9)
                                                 (g$f$10411$RATN9
                                                   (cdr g$r$10412$RATN9)
                                                   (cons
                                                     (g$cons*$5367$RATN9
                                                       g$label$10417$RATN9
                                                       g$type$10424$RATN9
                                                       g$loc$10423$RATN9)
                                                     g$env$10413$RATN9)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7159$RATN9
                                                         g$v$10422$RATN9)
                                                       g$loc$10423$RATN9)
                                                     g$global*$10414$RATN9)
                                                   g$macro*$10415$RATN9)))
                                              (g$lookup$10410$RATN9
                                                (g$lexical-var$7159$RATN9
                                                  g$v$10422$RATN9))
                                              (if (g$lexical-mutable?$7160$RATN9
                                                    g$v$10422$RATN9)
                                                'mutable
                                                'global))))
                                          (g$binding-value$6955$RATN9
                                            g$b$10418$RATN9))
                                         (if (eqv? g$t$10419$RATN9 'local-macro)
                                           ((case-lambda
                                              ((g$loc$10421$RATN9)
                                               (g$f$10411$RATN9
                                                 (cdr g$r$10412$RATN9)
                                                 (cons
                                                   (g$cons*$5367$RATN9
                                                     g$label$10417$RATN9
                                                     'global-macro
                                                     g$loc$10421$RATN9)
                                                   g$env$10413$RATN9)
                                                 g$global*$10414$RATN9
                                                 (cons
                                                   (cons
                                                     g$loc$10421$RATN9
                                                     (g$binding-value$6955$RATN9
                                                       g$b$10418$RATN9))
                                                   g$macro*$10415$RATN9))))
                                            (gensym))
                                           (if (eqv?
                                                 g$t$10419$RATN9
                                                 'local-macro!)
                                             ((case-lambda
                                                ((g$loc$10420$RATN9)
                                                 (g$f$10411$RATN9
                                                   (cdr g$r$10412$RATN9)
                                                   (cons
                                                     (g$cons*$5367$RATN9
                                                       g$label$10417$RATN9
                                                       'global-macro!
                                                       g$loc$10420$RATN9)
                                                     g$env$10413$RATN9)
                                                   g$global*$10414$RATN9
                                                   (cons
                                                     (cons
                                                       g$loc$10420$RATN9
                                                       (g$binding-value$6955$RATN9
                                                         g$b$10418$RATN9))
                                                     g$macro*$10415$RATN9))))
                                              (gensym))
                                             (if (memv
                                                   g$t$10419$RATN9
                                                   '($rtd $module))
                                               (g$f$10411$RATN9
                                                 (cdr g$r$10412$RATN9)
                                                 (cons
                                                   g$x$10416$RATN9
                                                   g$env$10413$RATN9)
                                                 g$global*$10414$RATN9
                                                 g$macro*$10415$RATN9)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$6954$RATN9
                                                   g$b$10418$RATN9)
                                                 (g$binding-value$6955$RATN9
                                                   g$b$10418$RATN9))))))))
                                    (g$binding-type$6954$RATN9
                                      g$b$10418$RATN9))))
                                (car g$x$10416$RATN9)
                                (cdr g$x$10416$RATN9))))
                            (car g$r$10412$RATN9)))))))
             g$f$10411$RATN9)
           g$r$10409$RATN9
           '()
           '()
           '())))))
   (g$generate-temporaries$7314$RATN9
     g$generate-temporaries$10764$RATN9
     (case-lambda
       ((g$ls$10430$RATN9)
        ((case-lambda
           ((g$t$10431$RATN9)
            ((case-lambda
               ((g$ls/false$10432$RATN9)
                (if g$ls/false$10432$RATN9
                  (apply
                    (case-lambda
                      ((g$ls$10433$RATN9)
                       (map (case-lambda
                              ((g$x$10434$RATN9)
                               (g$make-stx$6910$RATN9
                                 ((case-lambda
                                    ((g$x$10435$RATN9)
                                     (if ((case-lambda
                                            ((g$t$10436$RATN9)
                                             (if g$t$10436$RATN9
                                               g$t$10436$RATN9
                                               (begin
                                                 '#f
                                                 (string? g$x$10435$RATN9)))))
                                          (symbol? g$x$10435$RATN9))
                                       (gensym g$x$10435$RATN9)
                                       (gensym 't))))
                                  (g$syntax->datum$7324$RATN9 g$x$10434$RATN9))
                                 g$top-mark*$6879$RATN9
                                 '()
                                 '())))
                            g$ls$10433$RATN9)))
                    g$ls/false$10432$RATN9)
                  ((case-lambda
                     ((g$t$10437$RATN9)
                      ((case-lambda
                         ((g$ls/false$10438$RATN9)
                          (if g$ls/false$10438$RATN9
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$10438$RATN9)
                            (g$syntax-violation$7321$RATN9
                              '#f
                              '"invalid syntax"
                              g$t$10437$RATN9))))
                       (g$syntax-dispatch$7215$RATN9 g$t$10437$RATN9 '_))))
                   g$t$10431$RATN9))))
             (g$syntax-dispatch$7215$RATN9 g$t$10431$RATN9 'each-any))))
         g$ls$10430$RATN9))))
   (g$free-identifier=?$7315$RATN9
     g$free-identifier=?$10765$RATN9
     (case-lambda
       ((g$x$10439$RATN9 g$y$10440$RATN9)
        (if (g$id?$6937$RATN9 g$x$10439$RATN9)
          (if (g$id?$6937$RATN9 g$y$10440$RATN9)
            (g$free-id=?$6941$RATN9 g$x$10439$RATN9 g$y$10440$RATN9)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$10440$RATN9))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$10439$RATN9)))))
   (g$bound-identifier=?$7316$RATN9
     g$bound-identifier=?$10766$RATN9
     (case-lambda
       ((g$x$10441$RATN9 g$y$10442$RATN9)
        (if (g$id?$6937$RATN9 g$x$10441$RATN9)
          (if (g$id?$6937$RATN9 g$y$10442$RATN9)
            (g$bound-id=?$6940$RATN9 g$x$10441$RATN9 g$y$10442$RATN9)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$10442$RATN9))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$10441$RATN9)))))
   (g$extract-position-condition$7317$RATN9
     g$extract-position-condition$10767$RATN9
     (case-lambda
       ((g$x$10443$RATN9)
        (letrec* ((g$11069$10444$RATN9
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$11072$RATN9
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11071$10445$RATN9 '#f)
                  (g$11070$10446$RATN9
                    (make-record-constructor-descriptor
                      g$11069$10444$RATN9
                      &condition-rcd
                      g$11071$10445$RATN9))
                  (g$11068$10447$RATN9 (record-predicate g$11069$10444$RATN9))
                  (g$make-source-condition$10448$RATN9
                    (record-constructor g$11070$10446$RATN9))
                  (g$11066$10449$RATN9 (record-accessor g$11069$10444$RATN9 '0))
                  (g$11067$10450$RATN9 (record-accessor g$11069$10444$RATN9 '1))
                  (g$source-condition?$10451$RATN9
                    (condition-predicate g$11069$10444$RATN9))
                  (g$source-filename$10452$RATN9
                    (condition-accessor
                      g$11069$10444$RATN9
                      g$11066$10449$RATN9))
                  (g$source-character$10453$RATN9
                    (condition-accessor
                      g$11069$10444$RATN9
                      g$11067$10450$RATN9)))
          (if (g$stx?$6909$RATN9 g$x$10443$RATN9)
            ((case-lambda
               ((g$x$10454$RATN9)
                (if (annotation? g$x$10454$RATN9)
                  ((case-lambda
                     ((g$src$10455$RATN9)
                      (if (pair? g$src$10455$RATN9)
                        (g$make-source-condition$10448$RATN9
                          (car g$src$10455$RATN9)
                          (cdr g$src$10455$RATN9))
                        (condition))))
                   (annotation-source g$x$10454$RATN9))
                  (condition))))
             (g$stx-expr$6911$RATN9 g$x$10443$RATN9))
            (condition))))))
   (g$syntax-error$7318$RATN9
     g$syntax-error$10768$RATN9
     (case-lambda
       ((g$x$10456$RATN9 . g$args$10457$RATN9)
        (begin
          (if (g$for-all$5365$RATN9 string? g$args$10457$RATN9)
            (void)
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$10457$RATN9))
          (raise
            (condition
              (g$make-message-condition$5619$RATN9
                (if (null? g$args$10457$RATN9)
                  '"invalid syntax"
                  (apply string-append g$args$10457$RATN9)))
              (g$make-syntax-violation$5691$RATN9
                (g$syntax->datum$7324$RATN9 g$x$10456$RATN9)
                '#f)
              (g$extract-position-condition$7317$RATN9 g$x$10456$RATN9)
              (g$extract-trace$7319$RATN9 g$x$10456$RATN9)))))))
   (g$extract-trace$7319$RATN9
     g$extract-trace$10769$RATN9
     (case-lambda
       ((g$x$10458$RATN9)
        (letrec* ((g$11093$10459$RATN9
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$11096$RATN9
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11095$10460$RATN9 '#f)
                  (g$11094$10461$RATN9
                    (make-record-constructor-descriptor
                      g$11093$10459$RATN9
                      &condition-rcd
                      g$11095$10460$RATN9))
                  (g$11092$10462$RATN9 (record-predicate g$11093$10459$RATN9))
                  (g$make-trace$10463$RATN9
                    (record-constructor g$11094$10461$RATN9))
                  (g$11091$10464$RATN9 (record-accessor g$11093$10459$RATN9 '0))
                  (g$trace?$10465$RATN9
                    (condition-predicate g$11093$10459$RATN9))
                  (g$trace-form$10466$RATN9
                    (condition-accessor
                      g$11093$10459$RATN9
                      g$11091$10464$RATN9)))
          ((letrec ((g$f$10467$RATN9
                      (case-lambda
                        ((g$x$10468$RATN9)
                         (if (g$stx?$6909$RATN9 g$x$10468$RATN9)
                           (apply
                             condition
                             (g$make-trace$10463$RATN9 g$x$10468$RATN9)
                             (map g$f$10467$RATN9
                                  (g$stx-ae*$6914$RATN9 g$x$10468$RATN9)))
                           (if (annotation? g$x$10468$RATN9)
                             (g$make-trace$10463$RATN9
                               (g$make-stx$6910$RATN9
                                 g$x$10468$RATN9
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$10467$RATN9)
           g$x$10458$RATN9)))))
   (g$syntax-violation*$7320$RATN9
     g$syntax-violation*$10770$RATN9
     (case-lambda
       ((g$who$10469$RATN9
          g$msg$10470$RATN9
          g$form$10471$RATN9
          g$condition-object$10472$RATN9)
        (begin
          (if (string? g$msg$10470$RATN9)
            (void)
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$10470$RATN9))
          ((case-lambda
             ((g$who$10473$RATN9)
              (raise
                (condition
                  (if g$who$10473$RATN9
                    (g$make-who-condition$5665$RATN9 g$who$10473$RATN9)
                    (condition))
                  (g$make-message-condition$5619$RATN9 g$msg$10470$RATN9)
                  g$condition-object$10472$RATN9
                  (g$extract-position-condition$7317$RATN9 g$form$10471$RATN9)
                  (g$extract-trace$7319$RATN9 g$form$10471$RATN9)))))
           (if ((case-lambda
                  ((g$t$10474$RATN9)
                   (if g$t$10474$RATN9
                     g$t$10474$RATN9
                     (begin '#f (symbol? g$who$10469$RATN9)))))
                (string? g$who$10469$RATN9))
             g$who$10469$RATN9
             (if (not g$who$10469$RATN9)
               ((case-lambda
                  ((g$t$10475$RATN9)
                   ((case-lambda
                      ((g$ls/false$10476$RATN9)
                       (if (if g$ls/false$10476$RATN9
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$10477$RATN9)
                                    (g$id?$6937$RATN9 g$id$10477$RATN9)))
                                 g$ls/false$10476$RATN9))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$10478$RATN9)
                              (g$syntax->datum$7324$RATN9 g$id$10478$RATN9)))
                           g$ls/false$10476$RATN9)
                         ((case-lambda
                            ((g$t$10479$RATN9)
                             ((case-lambda
                                ((g$ls/false$10480$RATN9)
                                 (if (if g$ls/false$10480$RATN9
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$10481$RATN9
                                                g$rest$10482$RATN9)
                                              (g$id?$6937$RATN9
                                                g$id$10481$RATN9)))
                                           g$ls/false$10480$RATN9))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$10483$RATN9 g$rest$10484$RATN9)
                                        (g$syntax->datum$7324$RATN9
                                          g$id$10483$RATN9)))
                                     g$ls/false$10480$RATN9)
                                   ((case-lambda
                                      ((g$t$10485$RATN9)
                                       ((case-lambda
                                          ((g$ls/false$10486$RATN9)
                                           (if g$ls/false$10486$RATN9
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$10486$RATN9)
                                             (g$syntax-violation$7321$RATN9
                                               '#f
                                               '"invalid syntax"
                                               g$t$10485$RATN9))))
                                        (g$syntax-dispatch$7215$RATN9
                                          g$t$10485$RATN9
                                          '_))))
                                    g$t$10479$RATN9))))
                              (g$syntax-dispatch$7215$RATN9
                                g$t$10479$RATN9
                                '(any . any)))))
                          g$t$10475$RATN9))))
                    (g$syntax-dispatch$7215$RATN9 g$t$10475$RATN9 'any))))
                g$form$10471$RATN9)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$10469$RATN9))))))))
   (g$syntax-violation$7321$RATN9
     g$syntax-violation$10771$RATN9
     (case-lambda
       ((g$who$10487$RATN9 g$msg$10488$RATN9 g$form$10489$RATN9)
        (g$syntax-violation$7321$RATN9
          g$who$10487$RATN9
          g$msg$10488$RATN9
          g$form$10489$RATN9
          '#f))
       ((g$who$10490$RATN9
          g$msg$10491$RATN9
          g$form$10492$RATN9
          g$subform$10493$RATN9)
        (g$syntax-violation*$7320$RATN9
          g$who$10490$RATN9
          g$msg$10491$RATN9
          g$form$10492$RATN9
          (g$make-syntax-violation$5691$RATN9
            (g$syntax->datum$7324$RATN9 g$form$10492$RATN9)
            (g$syntax->datum$7324$RATN9 g$subform$10493$RATN9))))))
   (g$identifier?$7322$RATN9
     g$identifier?$10772$RATN9
     (case-lambda ((g$x$10494$RATN9) (g$id?$6937$RATN9 g$x$10494$RATN9))))
   (g$datum->syntax$7323$RATN9
     g$datum->syntax$10773$RATN9
     (case-lambda
       ((g$id$10495$RATN9 g$datum$10496$RATN9)
        (if (g$id?$6937$RATN9 g$id$10495$RATN9)
          (g$datum->stx$6920$RATN9 g$id$10495$RATN9 g$datum$10496$RATN9)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$10495$RATN9)))))
   (g$syntax->datum$7324$RATN9
     g$syntax->datum$10774$RATN9
     (case-lambda
       ((g$x$10497$RATN9) (g$stx->datum$6948$RATN9 g$x$10497$RATN9))))
   (g$compile-r6rs-top-level$7325$RATN9
     g$compile-r6rs-top-level$10775$RATN9
     (case-lambda
       ((g$x*$10498$RATN9)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7275$RATN9 g$x*$10498$RATN9)))
          (case-lambda
            ((g$lib*$10501$RATN9 g$invoke-code$10502$RATN9)
             ((case-lambda
                ((g$invoke-code$10503$RATN9 g$lib*$10504$RATN9)
                 (case-lambda
                   (()
                    (begin
                      (for-each g$invoke-library$6752$RATN9 g$lib*$10504$RATN9)
                      (eval-core
                        (g$expanded->core$6451$RATN9
                          g$invoke-code$10503$RATN9)))))))
              g$invoke-code$10502$RATN9
              g$lib*$10501$RATN9)))))))
   (g$pre-compile-r6rs-top-level$7326$RATN9
     g$pre-compile-r6rs-top-level$10776$RATN9
     (case-lambda
       ((g$x*$10505$RATN9)
        (call-with-values
          (case-lambda (() (g$top-level-expander$7275$RATN9 g$x*$10505$RATN9)))
          (case-lambda
            ((g$lib*$10508$RATN9 g$invoke-code$10509$RATN9)
             ((case-lambda
                ((g$invoke-code$10510$RATN9 g$lib*$10511$RATN9)
                 (begin
                   (for-each g$invoke-library$6752$RATN9 g$lib*$10511$RATN9)
                   (compile-core
                     (g$expanded->core$6451$RATN9 g$invoke-code$10510$RATN9)))))
              g$invoke-code$10509$RATN9
              g$lib*$10508$RATN9)))))))
   (g$interaction-environment$7327$RATN9
     g$interaction-environment$10777$RATN9
     ((case-lambda
        ((g$the-env$10512$RATN9)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$10513$RATN9)
                (if g$t$10513$RATN9
                  g$t$10513$RATN9
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$10514$RATN9 g$rib$10515$RATN9)
                        (begin
                          ((case-lambda
                             ((g$subst$10516$RATN9)
                              (begin
                                (g$set-rib-sym*!$6896$RATN9
                                  g$rib$10515$RATN9
                                  (map car g$subst$10516$RATN9))
                                (g$set-rib-mark**!$6897$RATN9
                                  g$rib$10515$RATN9
                                  (map (case-lambda
                                         ((g$x$10517$RATN9)
                                          g$top-mark*$6879$RATN9))
                                       g$subst$10516$RATN9))
                                (g$set-rib-label*!$6898$RATN9
                                  g$rib$10515$RATN9
                                  (map cdr g$subst$10516$RATN9)))))
                           (g$library-subst$6709$RATN9 g$lib$10514$RATN9))
                          ((case-lambda
                             ((g$env$10518$RATN9)
                              (begin
                                (set! g$the-env$10512$RATN9 g$env$10518$RATN9)
                                g$env$10518$RATN9)))
                           (g$make-interaction-env$7292$RATN9
                             g$rib$10515$RATN9
                             '()
                             '())))))
                     (g$find-library-by-name$6745$RATN9 '(ironscheme))
                     (g$make-empty-rib$6900$RATN9))))))
             g$the-env$10512$RATN9)))))
      '#f))
   (g$top-level-context$7328$RATN9
     g$top-level-context$10778$RATN9
     (g$make-parameter$6205$RATN9 '#f)))
  (g$current-library-expander$6742$RATN9 g$library-expander$7308$RATN9))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$6448$RATN9
      (case-lambda
        ((g$x$10829$RATN9)
         ((case-lambda
            ((g$t$10830$RATN9) (if g$t$10830$RATN9 (cdr g$t$10830$RATN9) '#f)))
          (assq
            g$x$10829$RATN9
            '((ellipsis-map . g$ellipsis-map$10670$RATN9)
              (ironscheme-build . g$ironscheme-build$10823$RATN9)
              (syntax-error . g$syntax-error$10768$RATN9)
              (syntax-dispatch . g$syntax-dispatch$10665$RATN9)
              (compile-system-libraries
                .
                g$compile-system-libraries$10825$RATN9)
              (compile->closure . g$compile->closure$10827$RATN9)
              (compile . g$compile$10826$RATN9)
              (load . g$load$10822$RATN9)
              (interaction-environment . g$interaction-environment$10777$RATN9)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$10603$RATN9)
              (variable-transformer? . g$variable-transformer?$10602$RATN9)
              (make-variable-transformer
                .
                g$make-variable-transformer$10601$RATN9)
              (identifier? . g$identifier?$10772$RATN9)
              (generate-temporaries . g$generate-temporaries$10764$RATN9)
              (free-identifier=? . g$free-identifier=?$10765$RATN9)
              (syntax->datum . g$syntax->datum$10774$RATN9)
              (datum->syntax . g$datum->syntax$10773$RATN9)
              (bound-identifier=? . g$bound-identifier=?$10766$RATN9)
              (delete-file . g$delete-file$5237$RATN9)
              (file-exists? . g$file-exists?$5236$RATN9)
              (list-sort . g$list-sort$5753$RATN9)
              (make-eqv-hashtable . g$make-eqv-hashtable$5159$RATN9)
              (make-eq-hashtable . g$make-eq-hashtable$5158$RATN9)
              (hashtable-update! . g$hashtable-update!$5165$RATN9)
              (hashtable-size . g$hashtable-size$5160$RATN9)
              (hashtable-set! . g$hashtable-set!$5162$RATN9)
              (hashtable-ref . g$hashtable-ref$5161$RATN9)
              (hashtable-delete! . g$hashtable-delete!$5163$RATN9)
              (hashtable-contains? . g$hashtable-contains?$5164$RATN9)
              (hashtable-clear! . g$hashtable-clear!$5166$RATN9)
              (open-string-output-port . g$open-string-output-port$6095$RATN9)
              (make-i/o-write-error . g$make-i/o-write-error$6024$RATN9)
              (make-i/o-read-error . g$make-i/o-read-error$6018$RATN9)
              (make-i/o-port-error . g$make-i/o-port-error$6070$RATN9)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6030$RATN9)
              (make-i/o-filename-error . g$make-i/o-filename-error$6038$RATN9)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6046$RATN9)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6052$RATN9)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6064$RATN9)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6058$RATN9)
              (make-i/o-error . g$make-i/o-error$6012$RATN9)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6084$RATN9)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6078$RATN9)
              (i/o-write-error? . g$i/o-write-error?$6025$RATN9)
              (i/o-read-error? . g$i/o-read-error?$6019$RATN9)
              (i/o-port-error? . g$i/o-port-error?$6072$RATN9)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6032$RATN9)
              (i/o-filename-error? . g$i/o-filename-error?$6040$RATN9)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6047$RATN9)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6053$RATN9)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6065$RATN9)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6059$RATN9)
              (i/o-error? . g$i/o-error?$6013$RATN9)
              (i/o-error-port . g$i/o-error-port$6073$RATN9)
              (i/o-error-filename . g$i/o-error-filename$6041$RATN9)
              (i/o-encoding-error? . g$i/o-encoding-error?$6086$RATN9)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6087$RATN9)
              (i/o-decoding-error? . g$i/o-decoding-error?$6079$RATN9)
              (scheme-report-environment
                .
                g$scheme-report-environment$10755$RATN9)
              (quotient . g$quotient$5722$RATN9)
              (null-environment . g$null-environment$10754$RATN9)
              (remainder . g$remainder$5723$RATN9)
              (modulo . g$modulo$5724$RATN9)
              (command-line . g$command-line$10819$RATN9)
              (remove . g$remove$5370$RATN9)
              (remv . g$remv$5371$RATN9)
              (remp . g$remp$5356$RATN9)
              (remq . g$remq$5372$RATN9)
              (partition . g$partition$5355$RATN9)
              (memp . g$memp$5362$RATN9)
              (member . g$member$5361$RATN9)
              (exists . g$exists$5366$RATN9)
              (for-all . g$for-all$5365$RATN9)
              (fold-right . g$fold-right$5369$RATN9)
              (fold-left . g$fold-left$5368$RATN9)
              (find . g$find$5354$RATN9)
              (filter . g$filter$5357$RATN9)
              (cons* . g$cons*$5367$RATN9)
              (assv . g$assv$5358$RATN9)
              (assp . g$assp$5360$RATN9)
              (assoc . g$assoc$5359$RATN9)
              (eval . g$eval$10757$RATN9)
              (environment . g$environment$10753$RATN9)
              (who-condition? . g$who-condition?$5667$RATN9)
              (warning? . g$warning?$5628$RATN9)
              (violation? . g$violation?$5646$RATN9)
              (undefined-violation? . g$undefined-violation?$5702$RATN9)
              (syntax-violation? . g$syntax-violation?$5694$RATN9)
              (syntax-violation-subform . g$syntax-violation-subform$5696$RATN9)
              (syntax-violation-form . g$syntax-violation-form$5695$RATN9)
              (syntax-violation . g$syntax-violation$10771$RATN9)
              (serious-condition? . g$serious-condition?$5634$RATN9)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5674$RATN9)
              (message-condition? . g$message-condition?$5621$RATN9)
              (make-who-condition . g$make-who-condition$5665$RATN9)
              (make-warning . g$make-warning$5627$RATN9)
              (make-violation . g$make-violation$5645$RATN9)
              (make-undefined-violation . g$make-undefined-violation$5701$RATN9)
              (make-syntax-violation . g$make-syntax-violation$5691$RATN9)
              (make-serious-condition . g$make-serious-condition$5633$RATN9)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5673$RATN9)
              (make-message-condition . g$make-message-condition$5619$RATN9)
              (make-lexical-violation . g$make-lexical-violation$5685$RATN9)
              (make-irritants-condition . g$make-irritants-condition$5657$RATN9)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5679$RATN9)
              (make-error . g$make-error$5639$RATN9)
              (make-assertion-violation . g$make-assertion-violation$5651$RATN9)
              (lexical-violation? . g$lexical-violation?$5686$RATN9)
              (irritants-condition? . g$irritants-condition?$5659$RATN9)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5680$RATN9)
              (error? . g$error?$5640$RATN9)
              (condition-who . g$condition-who$5668$RATN9)
              (condition-message . g$condition-message$5622$RATN9)
              (condition-irritants . g$condition-irritants$5660$RATN9)
              (assertion-violation? . g$assertion-violation?$5652$RATN9)
              (native-endianness . g$native-endianness$5484$RATN9)
              (bytevector-u64-set! . g$bytevector-u64-set!$5505$RATN9)
              (bytevector-u64-ref . g$bytevector-u64-ref$5501$RATN9)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5507$RATN9)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5503$RATN9)
              (bytevector-u32-set! . g$bytevector-u32-set!$5497$RATN9)
              (bytevector-u32-ref . g$bytevector-u32-ref$5493$RATN9)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5499$RATN9)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5495$RATN9)
              (bytevector-u16-set! . g$bytevector-u16-set!$5489$RATN9)
              (bytevector-u16-ref . g$bytevector-u16-ref$5485$RATN9)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5491$RATN9)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5487$RATN9)
              (bytevector-s64-set! . g$bytevector-s64-set!$5506$RATN9)
              (bytevector-s64-ref . g$bytevector-s64-ref$5502$RATN9)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5508$RATN9)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5504$RATN9)
              (bytevector-s32-set! . g$bytevector-s32-set!$5498$RATN9)
              (bytevector-s32-ref . g$bytevector-s32-ref$5494$RATN9)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5500$RATN9)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5496$RATN9)
              (bytevector-s16-set! . g$bytevector-s16-set!$5490$RATN9)
              (bytevector-s16-ref . g$bytevector-s16-ref$5486$RATN9)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5492$RATN9)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5488$RATN9)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5511$RATN9)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5509$RATN9)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5512$RATN9)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5510$RATN9)
              (no-nans-violation? . g$no-nans-violation?$5927$RATN9)
              (no-infinities-violation? . g$no-infinities-violation?$5921$RATN9)
              (make-no-nans-violation . g$make-no-nans-violation$5926$RATN9)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$5920$RATN9)
              (fxrotate-bit-field . g$fxrotate-bit-field$5903$RATN9)
              (fxif . g$fxif$5897$RATN9)
              (fxcopy-bit-field . g$fxcopy-bit-field$5900$RATN9)
              (fxcopy-bit . g$fxcopy-bit$5898$RATN9)
              (fxbit-field . g$fxbit-field$5899$RATN9)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$5902$RATN9)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$5901$RATN9)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$5848$RATN9)
              (bitwise-reverse-bit-field
                .
                g$bitwise-reverse-bit-field$5849$RATN9)
              (bitwise-if . g$bitwise-if$5842$RATN9)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$5845$RATN9)
              (bitwise-copy-bit . g$bitwise-copy-bit$5843$RATN9)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$5847$RATN9)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$5846$RATN9)
              (rationalize . g$rationalize$4923$RATN9)
              (cddddr . g$cddddr$4922$RATN9)
              (cdddar . g$cdddar$4921$RATN9)
              (cddadr . g$cddadr$4920$RATN9)
              (cddaar . g$cddaar$4919$RATN9)
              (cdaddr . g$cdaddr$4918$RATN9)
              (cdadar . g$cdadar$4917$RATN9)
              (cdaadr . g$cdaadr$4916$RATN9)
              (cdaaar . g$cdaaar$4915$RATN9)
              (cadddr . g$cadddr$4914$RATN9)
              (caddar . g$caddar$4913$RATN9)
              (cadadr . g$cadadr$4912$RATN9)
              (cadaar . g$cadaar$4911$RATN9)
              (caaddr . g$caaddr$4910$RATN9)
              (caadar . g$caadar$4909$RATN9)
              (caaadr . g$caaadr$4908$RATN9)
              (caaaar . g$caaaar$4907$RATN9)
              (cdddr . g$cdddr$4906$RATN9)
              (cddar . g$cddar$4905$RATN9)
              (cdadr . g$cdadr$4904$RATN9)
              (cdaar . g$cdaar$4903$RATN9)
              (caddr . g$caddr$4902$RATN9)
              (cadar . g$cadar$4901$RATN9)
              (caadr . g$caadr$4900$RATN9)
              (caaar . g$caaar$4899$RATN9)
              (cddr . g$cddr$4898$RATN9)
              (cdar . g$cdar$4897$RATN9)
              (cadr . g$cadr$4896$RATN9)
              (caar . g$caar$4895$RATN9)
              (load/args . g$load/args$10821$RATN9)
              (printf . g$printf$6119$RATN9)
              (fprintf . g$fprintf$6120$RATN9)
              (format . g$format$6121$RATN9)
              (trace-printer . g$trace-printer$10818$RATN9)
              (make-traced-macro . g$make-traced-macro$6125$RATN9)
              (make-parameter . g$make-parameter$6205$RATN9)
              (environment-symbols . g$environment-symbols$10751$RATN9)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$10750$RATN9)
              (library-path . g$library-path$6734$RATN9)
              (library-extensions . g$library-extensions$6735$RATN9)
              (installed-libraries . g$installed-libraries$6755$RATN9)
              (expand . g$expand$10756$RATN9)))))))
    (g$install-library$6750$RATN9
      'g$11852$RATN9
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$11789$RATN9)
        (cosh . g$11788$RATN9)
        (sinh . g$11787$RATN9)
        (make-guid . g$11786$RATN9)
        (unspecified? . g$11785$RATN9)
        (make-trace . g$11784$RATN9)
        (make-list . g$11783$RATN9)
        (last-pair . g$11782$RATN9)
        (load-r5rs . g$11781$RATN9)
        (license . g$11780$RATN9)
        (stacktrace . g$11779$RATN9)
        (ironscheme-build . g$11165$RATN9)
        (set-symbol-value! . g$11765$RATN9)
        (symbol-value . g$11764$RATN9)
        (ungensym . g$11763$RATN9)
        (gensym . g$11762$RATN9)
        (void . g$11761$RATN9)
        (compile-system-libraries . g$11167$RATN9)
        (compile->closure . g$11169$RATN9)
        (compile . g$11168$RATN9)
        (load . g$11164$RATN9)
        (interaction-environment . g$8233$RATN9)
        (string-upcase . g$11757$RATN9)
        (string-titlecase . g$11756$RATN9)
        (string-normalize-nfkd . g$11755$RATN9)
        (string-normalize-nfkc . g$11754$RATN9)
        (string-normalize-nfd . g$11753$RATN9)
        (string-normalize-nfc . g$11752$RATN9)
        (string-foldcase . g$11751$RATN9)
        (string-downcase . g$11750$RATN9)
        (string-ci>? . g$11749$RATN9)
        (string-ci>=? . g$11748$RATN9)
        (string-ci=? . g$11747$RATN9)
        (string-ci<? . g$11746$RATN9)
        (string-ci<=? . g$11745$RATN9)
        (char-whitespace? . g$11744$RATN9)
        (char-upper-case? . g$11743$RATN9)
        (char-title-case? . g$11742$RATN9)
        (char-numeric? . g$11741$RATN9)
        (char-lower-case? . g$11740$RATN9)
        (char-general-category . g$11739$RATN9)
        (char-upcase . g$11738$RATN9)
        (char-titlecase . g$11737$RATN9)
        (char-foldcase . g$11736$RATN9)
        (char-downcase . g$11735$RATN9)
        (char-ci>? . g$11734$RATN9)
        (char-ci>=? . g$11733$RATN9)
        (char-ci=? . g$11732$RATN9)
        (char-ci<? . g$11731$RATN9)
        (char-ci<=? . g$11730$RATN9)
        (char-alphabetic? . g$11729$RATN9)
        (variable-transformer-procedure . g$7837$RATN9)
        (variable-transformer? . g$7836$RATN9)
        (make-variable-transformer . g$7835$RATN9)
        (identifier? . g$8228$RATN9)
        (generate-temporaries . g$8220$RATN9)
        (free-identifier=? . g$8221$RATN9)
        (syntax->datum . g$8230$RATN9)
        (datum->syntax . g$8229$RATN9)
        (bound-identifier=? . g$8222$RATN9)
        (record-type-descriptor? . g$11728$RATN9)
        (record-predicate . g$11727$RATN9)
        (record-mutator . g$11726$RATN9)
        (record-constructor . g$11725$RATN9)
        (record-accessor . g$11724$RATN9)
        (make-record-type-descriptor . g$11723$RATN9)
        (make-record-constructor-descriptor . g$11722$RATN9)
        (record? . g$11721$RATN9)
        (record-type-uid . g$11720$RATN9)
        (record-type-sealed? . g$11719$RATN9)
        (record-type-parent . g$11718$RATN9)
        (record-type-opaque? . g$11717$RATN9)
        (record-type-name . g$11716$RATN9)
        (record-type-generative? . g$11715$RATN9)
        (record-type-field-names . g$11714$RATN9)
        (record-rtd . g$11713$RATN9)
        (record-field-mutable? . g$11712$RATN9)
        (delete-file . g$6018$RATN9)
        (file-exists? . g$6017$RATN9)
        (vector-sort! . g$11711$RATN9)
        (vector-sort . g$11710$RATN9)
        (list-sort . g$6525$RATN9)
        (symbol-hash . g$11709$RATN9)
        (string-ci-hash . g$11708$RATN9)
        (string-hash . g$11707$RATN9)
        (equal-hash . g$11706$RATN9)
        (hashtable-equivalence-function . g$11705$RATN9)
        (make-hashtable . g$11704$RATN9)
        (hashtable-hash-function . g$11703$RATN9)
        (make-eqv-hashtable . g$5985$RATN9)
        (make-eq-hashtable . g$5984$RATN9)
        (hashtable? . g$11702$RATN9)
        (hashtable-update! . g$5991$RATN9)
        (hashtable-size . g$5986$RATN9)
        (hashtable-set! . g$5988$RATN9)
        (hashtable-ref . g$5987$RATN9)
        (hashtable-mutable? . g$11701$RATN9)
        (hashtable-keys . g$11700$RATN9)
        (hashtable-entries . g$11699$RATN9)
        (hashtable-delete! . g$5989$RATN9)
        (hashtable-copy . g$11698$RATN9)
        (hashtable-contains? . g$5990$RATN9)
        (hashtable-clear! . g$5992$RATN9)
        (call-with-output-file . g$11697$RATN9)
        (call-with-input-file . g$11696$RATN9)
        (write-char . g$11695$RATN9)
        (write . g$11694$RATN9)
        (with-output-to-file . g$11693$RATN9)
        (with-input-from-file . g$11692$RATN9)
        (read-char . g$11691$RATN9)
        (read . g$11690$RATN9)
        (peek-char . g$11689$RATN9)
        (open-output-file . g$11688$RATN9)
        (open-input-file . g$11687$RATN9)
        (newline . g$11686$RATN9)
        (display . g$11685$RATN9)
        (close-output-port . g$11684$RATN9)
        (close-input-port . g$11683$RATN9)
        (eof-object? . g$11682$RATN9)
        (eof-object . g$11681$RATN9)
        (current-error-port . g$11680$RATN9)
        (current-output-port . g$11679$RATN9)
        (current-input-port . g$11678$RATN9)
        (output-port? . g$11677$RATN9)
        (input-port? . g$11676$RATN9)
        (utf-8-codec . g$11675$RATN9)
        (utf-16-codec . g$11674$RATN9)
        (transcoder-error-handling-mode . g$11673$RATN9)
        (transcoder-eol-style . g$11672$RATN9)
        (transcoder-codec . g$11671$RATN9)
        (transcoded-port . g$11670$RATN9)
        (textual-port? . g$11669$RATN9)
        (string->bytevector . g$11668$RATN9)
        (standard-output-port . g$11667$RATN9)
        (standard-input-port . g$11666$RATN9)
        (standard-error-port . g$11665$RATN9)
        (set-port-position! . g$11664$RATN9)
        (put-u8 . g$11663$RATN9)
        (put-string . g$11662$RATN9)
        (put-datum . g$11661$RATN9)
        (put-char . g$11660$RATN9)
        (put-bytevector . g$11659$RATN9)
        (port? . g$11658$RATN9)
        (port-transcoder . g$11657$RATN9)
        (port-position . g$11656$RATN9)
        (port-has-set-port-position!? . g$11655$RATN9)
        (port-has-port-position? . g$11654$RATN9)
        (port-eof? . g$11653$RATN9)
        (output-port-buffer-mode . g$11652$RATN9)
        (open-string-output-port . g$6916$RATN9)
        (open-string-input-port . g$11651$RATN9)
        (open-file-output-port . g$11650$RATN9)
        (open-file-input/output-port . g$11649$RATN9)
        (open-file-input-port . g$11648$RATN9)
        (open-bytevector-output-port . g$11647$RATN9)
        (open-bytevector-input-port . g$11646$RATN9)
        (native-transcoder . g$11645$RATN9)
        (native-eol-style . g$11644$RATN9)
        (make-transcoder . g$11643$RATN9)
        (latin-1-codec . g$11642$RATN9)
        (make-i/o-write-error . g$6773$RATN9)
        (make-i/o-read-error . g$6759$RATN9)
        (make-i/o-port-error . g$6878$RATN9)
        (make-i/o-invalid-position-error . g$6788$RATN9)
        (make-i/o-filename-error . g$6805$RATN9)
        (make-i/o-file-protection-error . g$6821$RATN9)
        (make-i/o-file-is-read-only-error . g$6835$RATN9)
        (make-i/o-file-does-not-exist-error . g$6863$RATN9)
        (make-i/o-file-already-exists-error . g$6849$RATN9)
        (make-i/o-error . g$6745$RATN9)
        (make-i/o-encoding-error . g$6909$RATN9)
        (make-i/o-decoding-error . g$6894$RATN9)
        (make-custom-textual-output-port . g$11641$RATN9)
        (make-custom-textual-input/output-port . g$11640$RATN9)
        (make-custom-textual-input-port . g$11639$RATN9)
        (make-custom-binary-output-port . g$11638$RATN9)
        (make-custom-binary-input/output-port . g$11637$RATN9)
        (make-custom-binary-input-port . g$11636$RATN9)
        (make-bytevector . g$11635$RATN9)
        (lookahead-u8 . g$11634$RATN9)
        (lookahead-char . g$11633$RATN9)
        (i/o-write-error? . g$6774$RATN9)
        (i/o-read-error? . g$6760$RATN9)
        (i/o-port-error? . g$6880$RATN9)
        (i/o-invalid-position-error? . g$6790$RATN9)
        (i/o-filename-error? . g$6807$RATN9)
        (i/o-file-protection-error? . g$6822$RATN9)
        (i/o-file-is-read-only-error? . g$6836$RATN9)
        (i/o-file-does-not-exist-error? . g$6864$RATN9)
        (i/o-file-already-exists-error? . g$6850$RATN9)
        (i/o-error? . g$6746$RATN9)
        (i/o-error-port . g$6881$RATN9)
        (i/o-error-filename . g$6808$RATN9)
        (i/o-encoding-error? . g$6911$RATN9)
        (i/o-encoding-error-char . g$6912$RATN9)
        (i/o-decoding-error? . g$6895$RATN9)
        (get-u8 . g$11632$RATN9)
        (get-string-n! . g$11631$RATN9)
        (get-string-n . g$11630$RATN9)
        (get-string-all . g$11629$RATN9)
        (get-line . g$11628$RATN9)
        (get-datum . g$11627$RATN9)
        (get-char . g$11626$RATN9)
        (get-bytevector-some . g$11625$RATN9)
        (get-bytevector-n! . g$11624$RATN9)
        (get-bytevector-n . g$11623$RATN9)
        (get-bytevector-all . g$11622$RATN9)
        (flush-output-port . g$11621$RATN9)
        (close-port . g$11620$RATN9)
        (call-with-string-output-port . g$11619$RATN9)
        (call-with-port . g$11618$RATN9)
        (call-with-bytevector-output-port . g$11617$RATN9)
        (bytevector->string . g$11616$RATN9)
        (buffer-mode? . g$11615$RATN9)
        (binary-port? . g$11614$RATN9)
        (scheme-report-environment . g$8211$RATN9)
        (quotient . g$6512$RATN9)
        (null-environment . g$8210$RATN9)
        (remainder . g$6513$RATN9)
        (modulo . g$6514$RATN9)
        (inexact->exact . g$11613$RATN9)
        (force . g$11612$RATN9)
        (exact->inexact . g$11611$RATN9)
        (exit . g$11610$RATN9)
        (command-line . g$11161$RATN9)
        (string-fill! . g$11609$RATN9)
        (string-set! . g$11608$RATN9)
        (set-cdr! . g$11607$RATN9)
        (set-car! . g$11606$RATN9)
        (remove . g$6098$RATN9)
        (remv . g$6099$RATN9)
        (remp . g$6084$RATN9)
        (remq . g$6100$RATN9)
        (partition . g$6083$RATN9)
        (memv . g$11605$RATN9)
        (memq . g$11604$RATN9)
        (memp . g$6090$RATN9)
        (member . g$6089$RATN9)
        (exists . g$6094$RATN9)
        (for-all . g$6093$RATN9)
        (fold-right . g$6097$RATN9)
        (fold-left . g$6096$RATN9)
        (find . g$6082$RATN9)
        (filter . g$6085$RATN9)
        (cons* . g$6095$RATN9)
        (assv . g$6086$RATN9)
        (assq . g$11603$RATN9)
        (assp . g$6088$RATN9)
        (assoc . g$6087$RATN9)
        (with-exception-handler . g$11602$RATN9)
        (raise-continuable . g$11601$RATN9)
        (raise . g$11600$RATN9)
        (eval . g$8213$RATN9)
        (environment . g$8209$RATN9)
        (make-enumeration . g$11599$RATN9)
        (enum-set=? . g$11598$RATN9)
        (enum-set-universe . g$11597$RATN9)
        (enum-set-union . g$11596$RATN9)
        (enum-set-subset? . g$11595$RATN9)
        (enum-set-projection . g$11594$RATN9)
        (enum-set-member? . g$11593$RATN9)
        (enum-set-intersection . g$11592$RATN9)
        (enum-set-indexer . g$11591$RATN9)
        (enum-set-difference . g$11590$RATN9)
        (enum-set-constructor . g$11589$RATN9)
        (enum-set-complement . g$11588$RATN9)
        (enum-set->list . g$11587$RATN9)
        (who-condition? . g$6423$RATN9)
        (warning? . g$6334$RATN9)
        (violation? . g$6376$RATN9)
        (undefined-violation? . g$6500$RATN9)
        (syntax-violation? . g$6484$RATN9)
        (syntax-violation-subform . g$6486$RATN9)
        (syntax-violation-form . g$6485$RATN9)
        (syntax-violation . g$8227$RATN9)
        (simple-conditions . g$11586$RATN9)
        (serious-condition? . g$6348$RATN9)
        (non-continuable-violation? . g$6438$RATN9)
        (message-condition? . g$6319$RATN9)
        (make-who-condition . g$6421$RATN9)
        (make-warning . g$6333$RATN9)
        (make-violation . g$6375$RATN9)
        (make-undefined-violation . g$6499$RATN9)
        (make-syntax-violation . g$6481$RATN9)
        (make-serious-condition . g$6347$RATN9)
        (make-non-continuable-violation . g$6437$RATN9)
        (make-message-condition . g$6317$RATN9)
        (make-lexical-violation . g$6465$RATN9)
        (make-irritants-condition . g$6404$RATN9)
        (make-implementation-restriction-violation . g$6451$RATN9)
        (make-error . g$6361$RATN9)
        (make-assertion-violation . g$6389$RATN9)
        (lexical-violation? . g$6466$RATN9)
        (irritants-condition? . g$6406$RATN9)
        (implementation-restriction-violation? . g$6452$RATN9)
        (error? . g$6362$RATN9)
        (condition-who . g$6424$RATN9)
        (condition-predicate . g$11585$RATN9)
        (condition-message . g$6320$RATN9)
        (condition-irritants . g$6407$RATN9)
        (condition-accessor . g$11584$RATN9)
        (condition . g$11583$RATN9)
        (assertion-violation? . g$6390$RATN9)
        (condition? . g$11582$RATN9)
        (utf32->string . g$11581$RATN9)
        (utf16->string . g$11580$RATN9)
        (utf8->string . g$11579$RATN9)
        (uint-list->bytevector . g$11578$RATN9)
        (u8-list->bytevector . g$11577$RATN9)
        (string->utf8 . g$11576$RATN9)
        (string->utf32 . g$11575$RATN9)
        (string->utf16 . g$11574$RATN9)
        (sint-list->bytevector . g$11573$RATN9)
        (native-endianness . g$6174$RATN9)
        (bytevector? . g$11572$RATN9)
        (bytevector=? . g$11571$RATN9)
        (bytevector-uint-set! . g$11570$RATN9)
        (bytevector-uint-ref . g$11569$RATN9)
        (bytevector-u8-set! . g$11568$RATN9)
        (bytevector-u8-ref . g$11567$RATN9)
        (bytevector-u64-set! . g$6195$RATN9)
        (bytevector-u64-ref . g$6191$RATN9)
        (bytevector-u64-native-set! . g$6197$RATN9)
        (bytevector-u64-native-ref . g$6193$RATN9)
        (bytevector-u32-set! . g$6187$RATN9)
        (bytevector-u32-ref . g$6183$RATN9)
        (bytevector-u32-native-set! . g$6189$RATN9)
        (bytevector-u32-native-ref . g$6185$RATN9)
        (bytevector-u16-set! . g$6179$RATN9)
        (bytevector-u16-ref . g$6175$RATN9)
        (bytevector-u16-native-set! . g$6181$RATN9)
        (bytevector-u16-native-ref . g$6177$RATN9)
        (bytevector-sint-set! . g$11566$RATN9)
        (bytevector-sint-ref . g$11565$RATN9)
        (bytevector-s8-set! . g$11564$RATN9)
        (bytevector-s8-ref . g$11563$RATN9)
        (bytevector-s64-set! . g$6196$RATN9)
        (bytevector-s64-ref . g$6192$RATN9)
        (bytevector-s64-native-set! . g$6198$RATN9)
        (bytevector-s64-native-ref . g$6194$RATN9)
        (bytevector-s32-set! . g$6188$RATN9)
        (bytevector-s32-ref . g$6184$RATN9)
        (bytevector-s32-native-set! . g$6190$RATN9)
        (bytevector-s32-native-ref . g$6186$RATN9)
        (bytevector-s16-set! . g$6180$RATN9)
        (bytevector-s16-ref . g$6176$RATN9)
        (bytevector-s16-native-set! . g$6182$RATN9)
        (bytevector-s16-native-ref . g$6178$RATN9)
        (bytevector-length . g$11562$RATN9)
        (bytevector-ieee-single-set! . g$11561$RATN9)
        (bytevector-ieee-single-ref . g$11560$RATN9)
        (bytevector-ieee-single-native-set! . g$6201$RATN9)
        (bytevector-ieee-single-native-ref . g$6199$RATN9)
        (bytevector-ieee-double-set! . g$11559$RATN9)
        (bytevector-ieee-double-ref . g$11558$RATN9)
        (bytevector-ieee-double-native-set! . g$6202$RATN9)
        (bytevector-ieee-double-native-ref . g$6200$RATN9)
        (bytevector-fill! . g$11557$RATN9)
        (bytevector-copy! . g$11556$RATN9)
        (bytevector-copy . g$11555$RATN9)
        (bytevector->uint-list . g$11554$RATN9)
        (bytevector->u8-list . g$11553$RATN9)
        (bytevector->sint-list . g$11552$RATN9)
        (no-nans-violation? . g$6731$RATN9)
        (no-infinities-violation? . g$6717$RATN9)
        (make-no-nans-violation . g$6730$RATN9)
        (make-no-infinities-violation . g$6716$RATN9)
        (real->flonum . g$11551$RATN9)
        (flzero? . g$11550$RATN9)
        (fltruncate . g$11549$RATN9)
        (fltan . g$11548$RATN9)
        (flsqrt . g$11547$RATN9)
        (flsin . g$11546$RATN9)
        (flround . g$11545$RATN9)
        (flpositive? . g$11544$RATN9)
        (flonum? . g$11543$RATN9)
        (flodd? . g$11542$RATN9)
        (flnumerator . g$11541$RATN9)
        (flnegative? . g$11540$RATN9)
        (flnan? . g$11539$RATN9)
        (flmod0 . g$11538$RATN9)
        (flmod . g$11537$RATN9)
        (flmin . g$11536$RATN9)
        (flmax . g$11535$RATN9)
        (fllog . g$11534$RATN9)
        (flinteger? . g$11533$RATN9)
        (flinfinite? . g$11532$RATN9)
        (flfloor . g$11531$RATN9)
        (flfinite? . g$11530$RATN9)
        (flexpt . g$11529$RATN9)
        (flexp . g$11528$RATN9)
        (fleven? . g$11527$RATN9)
        (fldiv0-and-mod0 . g$11526$RATN9)
        (fldiv0 . g$11525$RATN9)
        (fldiv-and-mod . g$11524$RATN9)
        (fldiv . g$11523$RATN9)
        (fldenominator . g$11522$RATN9)
        (flcos . g$11521$RATN9)
        (flceiling . g$11520$RATN9)
        (flatan . g$11519$RATN9)
        (flasin . g$11518$RATN9)
        (flacos . g$11517$RATN9)
        (flabs . g$11516$RATN9)
        (fl>? . g$11515$RATN9)
        (fl>=? . g$11514$RATN9)
        (fl=? . g$11513$RATN9)
        (fl<? . g$11512$RATN9)
        (fl<=? . g$11511$RATN9)
        (fl/ . g$11510$RATN9)
        (fl- . g$11509$RATN9)
        (fl+ . g$11508$RATN9)
        (fl* . g$11507$RATN9)
        (fixnum->flonum . g$11506$RATN9)
        (fxzero? . g$11505$RATN9)
        (fxxor . g$11504$RATN9)
        (fxrotate-bit-field . g$6662$RATN9)
        (fxreverse-bit-field . g$11503$RATN9)
        (fxpositive? . g$11502$RATN9)
        (fxodd? . g$11501$RATN9)
        (fxnot . g$11500$RATN9)
        (fxnegative? . g$11499$RATN9)
        (fxmod0 . g$11498$RATN9)
        (fxmod . g$11497$RATN9)
        (fxmin . g$11496$RATN9)
        (fxmax . g$11495$RATN9)
        (fxlength . g$11494$RATN9)
        (fxior . g$11493$RATN9)
        (fxif . g$6656$RATN9)
        (fxfirst-bit-set . g$11492$RATN9)
        (fxeven? . g$11491$RATN9)
        (fxdiv0-and-mod0 . g$11490$RATN9)
        (fxdiv0 . g$11489$RATN9)
        (fxdiv-and-mod . g$11488$RATN9)
        (fxdiv . g$11487$RATN9)
        (fxcopy-bit-field . g$6659$RATN9)
        (fxcopy-bit . g$6657$RATN9)
        (fxbit-set? . g$11486$RATN9)
        (fxbit-field . g$6658$RATN9)
        (fxbit-count . g$11485$RATN9)
        (fxarithmetic-shift-right . g$6661$RATN9)
        (fxarithmetic-shift-left . g$6660$RATN9)
        (fxarithmetic-shift . g$11484$RATN9)
        (fxand . g$11483$RATN9)
        (fx>? . g$11482$RATN9)
        (fx>=? . g$11481$RATN9)
        (fx=? . g$11480$RATN9)
        (fx<? . g$11479$RATN9)
        (fx<=? . g$11478$RATN9)
        (fx-/carry . g$11477$RATN9)
        (fx- . g$11476$RATN9)
        (fx+/carry . g$11475$RATN9)
        (fx+ . g$11474$RATN9)
        (fx*/carry . g$11473$RATN9)
        (fx* . g$11472$RATN9)
        (greatest-fixnum . g$11471$RATN9)
        (least-fixnum . g$11470$RATN9)
        (fixnum-width . g$11469$RATN9)
        (fixnum? . g$11468$RATN9)
        (bitwise-rotate-bit-field . g$6610$RATN9)
        (bitwise-reverse-bit-field . g$6611$RATN9)
        (bitwise-length . g$11467$RATN9)
        (bitwise-if . g$6604$RATN9)
        (bitwise-first-bit-set . g$11466$RATN9)
        (bitwise-copy-bit-field . g$6607$RATN9)
        (bitwise-copy-bit . g$6605$RATN9)
        (bitwise-bit-set? . g$11465$RATN9)
        (bitwise-bit-field . g$11464$RATN9)
        (bitwise-bit-count . g$11463$RATN9)
        (bitwise-xor . g$11462$RATN9)
        (bitwise-ior . g$11461$RATN9)
        (bitwise-and . g$11460$RATN9)
        (bitwise-not . g$11459$RATN9)
        (bitwise-arithmetic-shift-right . g$6609$RATN9)
        (bitwise-arithmetic-shift-left . g$6608$RATN9)
        (bitwise-arithmetic-shift . g$11458$RATN9)
        (zero? . g$11457$RATN9)
        (vector? . g$11456$RATN9)
        (vector-set! . g$11455$RATN9)
        (vector-ref . g$11454$RATN9)
        (vector-map . g$11453$RATN9)
        (vector-length . g$11452$RATN9)
        (vector-for-each . g$11451$RATN9)
        (vector-fill! . g$11450$RATN9)
        (vector->list . g$11449$RATN9)
        (vector . g$11448$RATN9)
        (values . g$11447$RATN9)
        (truncate . g$11446$RATN9)
        (tan . g$11445$RATN9)
        (symbol? . g$11444$RATN9)
        (symbol=? . g$11443$RATN9)
        (symbol->string . g$11442$RATN9)
        (substring . g$11441$RATN9)
        (string? . g$11440$RATN9)
        (string>? . g$11439$RATN9)
        (string>=? . g$11438$RATN9)
        (string=? . g$11437$RATN9)
        (string<? . g$11436$RATN9)
        (string<=? . g$11435$RATN9)
        (string-ref . g$11434$RATN9)
        (string-length . g$11433$RATN9)
        (string-for-each . g$11432$RATN9)
        (string-copy . g$11431$RATN9)
        (string-append . g$11430$RATN9)
        (string->symbol . g$11429$RATN9)
        (string->number . g$11428$RATN9)
        (string->list . g$11427$RATN9)
        (string . g$11426$RATN9)
        (sqrt . g$11425$RATN9)
        (sin . g$11424$RATN9)
        (round . g$11423$RATN9)
        (reverse . g$11422$RATN9)
        (real? . g$11421$RATN9)
        (real-valued? . g$11420$RATN9)
        (real-part . g$11419$RATN9)
        (rationalize . g$5635$RATN9)
        (rational? . g$11418$RATN9)
        (rational-valued? . g$11417$RATN9)
        (procedure? . g$11416$RATN9)
        (positive? . g$11415$RATN9)
        (pair? . g$11414$RATN9)
        (odd? . g$11413$RATN9)
        (numerator . g$11412$RATN9)
        (number? . g$11411$RATN9)
        (number->string . g$11410$RATN9)
        (null? . g$11409$RATN9)
        (not . g$11408$RATN9)
        (negative? . g$11407$RATN9)
        (nan? . g$11406$RATN9)
        (min . g$11405$RATN9)
        (max . g$11404$RATN9)
        (map . g$11403$RATN9)
        (make-vector . g$11402$RATN9)
        (make-string . g$11401$RATN9)
        (make-rectangular . g$11400$RATN9)
        (make-polar . g$11399$RATN9)
        (magnitude . g$11398$RATN9)
        (log . g$11397$RATN9)
        (list? . g$11396$RATN9)
        (list-tail . g$11395$RATN9)
        (list-ref . g$11394$RATN9)
        (list->vector . g$11393$RATN9)
        (list->string . g$11392$RATN9)
        (list . g$11391$RATN9)
        (length . g$11390$RATN9)
        (lcm . g$11389$RATN9)
        (integer? . g$11388$RATN9)
        (integer-valued? . g$11387$RATN9)
        (integer->char . g$11386$RATN9)
        (infinite? . g$11385$RATN9)
        (inexact? . g$11384$RATN9)
        (inexact . g$11383$RATN9)
        (imag-part . g$11382$RATN9)
        (gcd . g$11381$RATN9)
        (for-each . g$11380$RATN9)
        (floor . g$11379$RATN9)
        (finite? . g$11378$RATN9)
        (expt . g$11377$RATN9)
        (exp . g$11376$RATN9)
        (exact? . g$11375$RATN9)
        (exact-integer-sqrt . g$11374$RATN9)
        (exact . g$11373$RATN9)
        (even? . g$11372$RATN9)
        (error . g$11371$RATN9)
        (eqv? . g$11370$RATN9)
        (equal? . g$11369$RATN9)
        (eq? . g$11368$RATN9)
        (dynamic-wind . g$11367$RATN9)
        (div0-and-mod0 . g$11366$RATN9)
        (mod0 . g$11365$RATN9)
        (div0 . g$11364$RATN9)
        (div-and-mod . g$11363$RATN9)
        (mod . g$11362$RATN9)
        (div . g$11361$RATN9)
        (denominator . g$11360$RATN9)
        (cos . g$11359$RATN9)
        (cons . g$11358$RATN9)
        (complex? . g$11357$RATN9)
        (char? . g$11356$RATN9)
        (char>? . g$11355$RATN9)
        (char>=? . g$11354$RATN9)
        (char=? . g$11353$RATN9)
        (char<? . g$11352$RATN9)
        (char<=? . g$11351$RATN9)
        (char->integer . g$11350$RATN9)
        (ceiling . g$11349$RATN9)
        (call-with-values . g$11348$RATN9)
        (call/cc . g$11347$RATN9)
        (call-with-current-continuation . g$11346$RATN9)
        (cddddr . g$5634$RATN9)
        (cdddar . g$5633$RATN9)
        (cddadr . g$5632$RATN9)
        (cddaar . g$5631$RATN9)
        (cdaddr . g$5630$RATN9)
        (cdadar . g$5629$RATN9)
        (cdaadr . g$5628$RATN9)
        (cdaaar . g$5627$RATN9)
        (cadddr . g$5626$RATN9)
        (caddar . g$5625$RATN9)
        (cadadr . g$5624$RATN9)
        (cadaar . g$5623$RATN9)
        (caaddr . g$5622$RATN9)
        (caadar . g$5621$RATN9)
        (caaadr . g$5620$RATN9)
        (caaaar . g$5619$RATN9)
        (cdddr . g$5618$RATN9)
        (cddar . g$5617$RATN9)
        (cdadr . g$5616$RATN9)
        (cdaar . g$5615$RATN9)
        (caddr . g$5614$RATN9)
        (cadar . g$5613$RATN9)
        (caadr . g$5612$RATN9)
        (caaar . g$5611$RATN9)
        (cddr . g$5610$RATN9)
        (cdar . g$5609$RATN9)
        (cadr . g$5608$RATN9)
        (caar . g$5607$RATN9)
        (cdr . g$11345$RATN9)
        (car . g$11344$RATN9)
        (boolean? . g$11343$RATN9)
        (boolean=? . g$11342$RATN9)
        (atan . g$11341$RATN9)
        (assertion-violation . g$11340$RATN9)
        (asin . g$11339$RATN9)
        (apply . g$11338$RATN9)
        (append . g$11337$RATN9)
        (angle . g$11336$RATN9)
        (acos . g$11335$RATN9)
        (abs . g$11334$RATN9)
        (/ . g$11333$RATN9)
        (* . g$11332$RATN9)
        (- . g$11331$RATN9)
        (+ . g$11330$RATN9)
        (>= . g$11329$RATN9)
        (> . g$11328$RATN9)
        (= . g$11327$RATN9)
        (<= . g$11326$RATN9)
        (< . g$11325$RATN9)
        (load/args . g$11163$RATN9)
        (printf . g$6925$RATN9)
        (fprintf . g$6926$RATN9)
        (format . g$6927$RATN9)
        (get-arity . g$11320$RATN9)
        (gc-collect . g$11319$RATN9)
        (clr-type? . g$11318$RATN9)
        (get-clr-type . g$11317$RATN9)
        (vector-append . g$11315$RATN9)
        (vector-filter . g$11314$RATN9)
        (vector-reverse! . g$11313$RATN9)
        (vector-contains? . g$11312$RATN9)
        (vector-index-of . g$11311$RATN9)
        (vector-copy . g$11310$RATN9)
        (vector-binary-search . g$11309$RATN9)
        (get-output-string . g$11308$RATN9)
        (open-output-string . g$11307$RATN9)
        (open-input-string . g$11306$RATN9)
        (string-format . g$11305$RATN9)
        (trace-printer . g$11160$RATN9)
        (make-traced-procedure . g$11304$RATN9)
        (make-traced-macro . g$6946$RATN9)
        (pmap . g$11303$RATN9)
        (time-it . g$11302$RATN9)
        (make-parameter . g$6951$RATN9)
        (library-locator . g$11301$RATN9)
        (get-library-paths . g$11300$RATN9)
        (environment-symbols . g$8207$RATN9)
        (interaction-environment-symbols . g$8206$RATN9)
        (library-path . g$7376$RATN9)
        (library-extensions . g$7377$RATN9)
        (installed-libraries . g$7397$RATN9)
        (expand . g$8212$RATN9)
        (&no-nans . g$11299$RATN9)
        (&no-infinities . g$11298$RATN9)
        (&i/o-encoding . g$11297$RATN9)
        (&i/o-decoding . g$11296$RATN9)
        (&i/o-port . g$11295$RATN9)
        (&i/o-file-does-not-exist . g$11294$RATN9)
        (&i/o-file-already-exists . g$11293$RATN9)
        (&i/o-file-is-read-only . g$11292$RATN9)
        (&i/o-file-protection . g$11291$RATN9)
        (&i/o-filename . g$11290$RATN9)
        (&i/o-invalid-position . g$11289$RATN9)
        (&i/o-write . g$11288$RATN9)
        (&i/o-read . g$11287$RATN9)
        (&i/o . g$11286$RATN9)
        (&non-continuable . g$11285$RATN9)
        (&undefined . g$11284$RATN9)
        (&syntax . g$11283$RATN9)
        (&lexical . g$11282$RATN9)
        (&implementation-restriction . g$11281$RATN9)
        (&who . g$11279$RATN9)
        (&irritants . g$11278$RATN9)
        (&assertion . g$11277$RATN9)
        (&violation . g$11276$RATN9)
        (&error . g$11275$RATN9)
        (&serious . g$11274$RATN9)
        (&warning . g$11273$RATN9)
        (&message . g$11272$RATN9)
        (&condition . g$11271$RATN9)
        (define-condition-type . g$11270$RATN9)
        (define-enumeration . g$11269$RATN9)
        (define-record-type . g$11268$RATN9)
        (parent-rtd . g$11267$RATN9)
        (nongenerative . g$11266$RATN9)
        (opaque . g$11265$RATN9)
        (sealed . g$11264$RATN9)
        (protocol . g$11263$RATN9)
        (parent . g$11262$RATN9)
        (immutable . g$11261$RATN9)
        (mutable . g$11260$RATN9)
        (fields . g$11259$RATN9)
        (error-handling-mode . g$11258$RATN9)
        (file-options . g$11257$RATN9)
        (buffer-mode . g$11256$RATN9)
        (eol-style . g$11255$RATN9)
        (guard . g$11254$RATN9)
        (trace-letrec-syntax . g$11253$RATN9)
        (trace-let-syntax . g$11252$RATN9)
        (trace-define-syntax . g$11251$RATN9)
        (trace-define . g$11250$RATN9)
        (trace-lambda . g$11249$RATN9)
        (unsyntax-splicing . g$11248$RATN9)
        (unsyntax . g$11247$RATN9)
        (unquote-splicing . g$11246$RATN9)
        (unquote . g$11245$RATN9)
        (_ . g$11244$RATN9)
        (else . g$11243$RATN9)
        (=> . g$11242$RATN9)
        (... . g$11241$RATN9)
        (assert . g$11240$RATN9)
        (endianness . g$11239$RATN9)
        (delay . g$11238$RATN9)
        (time . g$11237$RATN9)
        (or . g$11236$RATN9)
        (and . g$11235$RATN9)
        (do . g$11234$RATN9)
        (cond . g$11233$RATN9)
        (let* . g$11232$RATN9)
        (let . g$11231$RATN9)
        (identifier-syntax . g$11230$RATN9)
        (with-syntax . g$11229$RATN9)
        (quasisyntax . g$11228$RATN9)
        (quasiquote . g$11227$RATN9)
        (syntax-rules . g$11226$RATN9)
        (include-into . g$11225$RATN9)
        (include . g$11224$RATN9)
        (let-values . g$11222$RATN9)
        (let*-values . g$11221$RATN9)
        (record-constructor-descriptor . g$11220$RATN9)
        (record-type-descriptor . g$11219$RATN9)
        (fluid-let-syntax . g$11218$RATN9)
        (case . g$11217$RATN9)
        (parameterize . g$11216$RATN9)
        (unless . g$11215$RATN9)
        (when . g$11214$RATN9)
        (if . g$11213$RATN9)
        (letrec* . g$11212$RATN9)
        (letrec . g$11211$RATN9)
        (case-lambda . g$11209$RATN9)
        (lambda . g$11208$RATN9)
        (syntax . g$11207$RATN9)
        (syntax-case . g$11206$RATN9)
        (quote . g$11205$RATN9)
        (letrec-syntax . g$11203$RATN9)
        (let-syntax . g$11202$RATN9)
        (set! . g$11201$RATN9)
        (import . g$11200$RATN9)
        (library . g$11199$RATN9)
        (begin . g$11198$RATN9)
        (module . g$11197$RATN9)
        (define-syntax . g$11196$RATN9)
        (define . g$11195$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11853$RATN9
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11300$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6750$RATN9
      'g$11854$RATN9
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$11794$RATN9)
        (annotation-source . g$11793$RATN9)
        (annotation-expression . g$11792$RATN9)
        (annotation? . g$11791$RATN9)
        (read-annotated . g$11790$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6750$RATN9
      'g$11855$RATN9
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$11760$RATN9)
        (serialize-library . g$11759$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6750$RATN9
      'g$11856$RATN9
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$7837$RATN9)
        (variable-transformer? . g$7836$RATN9)
        (eqv-hash . g$11323$RATN9)
        (eq-hash . g$11322$RATN9)
        (reverse! . g$11321$RATN9)
        (format . g$6927$RATN9)
        (get-command-line . g$11316$RATN9)
        (make-traced-procedure . g$11304$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6750$RATN9
      'g$11857$RATN9
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11324$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11858$RATN9
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$11778$RATN9)
        (clr-field-set!-internal . g$11777$RATN9)
        (clr-field-get-internal . g$11776$RATN9)
        (clr-cast-internal . g$11775$RATN9)
        (clr-call-internal . g$11774$RATN9)
        (clr-new-internal . g$11773$RATN9)
        (clr-new-array-internal . g$11772$RATN9)
        (clr-is-internal . g$11771$RATN9)
        (clr-reference-internal . g$11770$RATN9)
        (clr-using-internal . g$11769$RATN9)
        (clr-clear-usings-internal . g$11768$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11859$RATN9
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11246$RATN9)
        (unquote . g$11245$RATN9)
        (delay . g$11238$RATN9)
        (or . g$11236$RATN9)
        (and . g$11235$RATN9)
        (do . g$11234$RATN9)
        (cond . g$11233$RATN9)
        (let* . g$11232$RATN9)
        (let . g$11231$RATN9)
        (quasiquote . g$11227$RATN9)
        (syntax-rules . g$11226$RATN9)
        (case . g$11217$RATN9)
        (if . g$11213$RATN9)
        (letrec . g$11211$RATN9)
        (lambda . g$11208$RATN9)
        (quote . g$11205$RATN9)
        (letrec-syntax . g$11203$RATN9)
        (let-syntax . g$11202$RATN9)
        (set! . g$11201$RATN9)
        (begin . g$11198$RATN9)
        (define-syntax . g$11196$RATN9)
        (define . g$11195$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6750$RATN9
      'g$11860$RATN9
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$8233$RATN9)
        (char-ready? . g$11758$RATN9)
        (string-ci>? . g$11749$RATN9)
        (string-ci>=? . g$11748$RATN9)
        (string-ci=? . g$11747$RATN9)
        (string-ci<? . g$11746$RATN9)
        (string-ci<=? . g$11745$RATN9)
        (char-whitespace? . g$11744$RATN9)
        (char-upper-case? . g$11743$RATN9)
        (char-numeric? . g$11741$RATN9)
        (char-lower-case? . g$11740$RATN9)
        (char-upcase . g$11738$RATN9)
        (char-downcase . g$11735$RATN9)
        (char-ci>? . g$11734$RATN9)
        (char-ci>=? . g$11733$RATN9)
        (char-ci=? . g$11732$RATN9)
        (char-ci<? . g$11731$RATN9)
        (char-ci<=? . g$11730$RATN9)
        (char-alphabetic? . g$11729$RATN9)
        (call-with-output-file . g$11697$RATN9)
        (call-with-input-file . g$11696$RATN9)
        (write-char . g$11695$RATN9)
        (write . g$11694$RATN9)
        (with-output-to-file . g$11693$RATN9)
        (with-input-from-file . g$11692$RATN9)
        (read-char . g$11691$RATN9)
        (read . g$11690$RATN9)
        (peek-char . g$11689$RATN9)
        (open-output-file . g$11688$RATN9)
        (open-input-file . g$11687$RATN9)
        (newline . g$11686$RATN9)
        (display . g$11685$RATN9)
        (close-output-port . g$11684$RATN9)
        (close-input-port . g$11683$RATN9)
        (eof-object? . g$11682$RATN9)
        (eof-object . g$11681$RATN9)
        (current-error-port . g$11680$RATN9)
        (current-output-port . g$11679$RATN9)
        (current-input-port . g$11678$RATN9)
        (output-port? . g$11677$RATN9)
        (input-port? . g$11676$RATN9)
        (scheme-report-environment . g$8211$RATN9)
        (quotient . g$6512$RATN9)
        (null-environment . g$8210$RATN9)
        (remainder . g$6513$RATN9)
        (modulo . g$6514$RATN9)
        (inexact->exact . g$11613$RATN9)
        (force . g$11612$RATN9)
        (exact->inexact . g$11611$RATN9)
        (string-fill! . g$11609$RATN9)
        (string-set! . g$11608$RATN9)
        (set-cdr! . g$11607$RATN9)
        (set-car! . g$11606$RATN9)
        (memv . g$11605$RATN9)
        (memq . g$11604$RATN9)
        (member . g$6089$RATN9)
        (assv . g$6086$RATN9)
        (assq . g$11603$RATN9)
        (assoc . g$6087$RATN9)
        (eval . g$8213$RATN9)
        (zero? . g$11457$RATN9)
        (vector? . g$11456$RATN9)
        (vector-set! . g$11455$RATN9)
        (vector-ref . g$11454$RATN9)
        (vector-length . g$11452$RATN9)
        (vector-fill! . g$11450$RATN9)
        (vector->list . g$11449$RATN9)
        (vector . g$11448$RATN9)
        (values . g$11447$RATN9)
        (truncate . g$11446$RATN9)
        (tan . g$11445$RATN9)
        (symbol? . g$11444$RATN9)
        (symbol->string . g$11442$RATN9)
        (substring . g$11441$RATN9)
        (string? . g$11440$RATN9)
        (string>? . g$11439$RATN9)
        (string>=? . g$11438$RATN9)
        (string=? . g$11437$RATN9)
        (string<? . g$11436$RATN9)
        (string<=? . g$11435$RATN9)
        (string-ref . g$11434$RATN9)
        (string-length . g$11433$RATN9)
        (string-copy . g$11431$RATN9)
        (string-append . g$11430$RATN9)
        (string->symbol . g$11429$RATN9)
        (string->number . g$11428$RATN9)
        (string->list . g$11427$RATN9)
        (string . g$11426$RATN9)
        (sqrt . g$11425$RATN9)
        (sin . g$11424$RATN9)
        (round . g$11423$RATN9)
        (reverse . g$11422$RATN9)
        (real? . g$11421$RATN9)
        (real-part . g$11419$RATN9)
        (rationalize . g$5635$RATN9)
        (rational? . g$11418$RATN9)
        (procedure? . g$11416$RATN9)
        (positive? . g$11415$RATN9)
        (pair? . g$11414$RATN9)
        (odd? . g$11413$RATN9)
        (numerator . g$11412$RATN9)
        (number? . g$11411$RATN9)
        (number->string . g$11410$RATN9)
        (null? . g$11409$RATN9)
        (not . g$11408$RATN9)
        (negative? . g$11407$RATN9)
        (min . g$11405$RATN9)
        (max . g$11404$RATN9)
        (map . g$11403$RATN9)
        (make-vector . g$11402$RATN9)
        (make-string . g$11401$RATN9)
        (make-rectangular . g$11400$RATN9)
        (make-polar . g$11399$RATN9)
        (magnitude . g$11398$RATN9)
        (log . g$11397$RATN9)
        (list? . g$11396$RATN9)
        (list-tail . g$11395$RATN9)
        (list-ref . g$11394$RATN9)
        (list->vector . g$11393$RATN9)
        (list->string . g$11392$RATN9)
        (list . g$11391$RATN9)
        (length . g$11390$RATN9)
        (lcm . g$11389$RATN9)
        (integer? . g$11388$RATN9)
        (integer->char . g$11386$RATN9)
        (inexact? . g$11384$RATN9)
        (imag-part . g$11382$RATN9)
        (gcd . g$11381$RATN9)
        (for-each . g$11380$RATN9)
        (floor . g$11379$RATN9)
        (expt . g$11377$RATN9)
        (exp . g$11376$RATN9)
        (exact? . g$11375$RATN9)
        (even? . g$11372$RATN9)
        (eqv? . g$11370$RATN9)
        (equal? . g$11369$RATN9)
        (eq? . g$11368$RATN9)
        (dynamic-wind . g$11367$RATN9)
        (denominator . g$11360$RATN9)
        (cos . g$11359$RATN9)
        (cons . g$11358$RATN9)
        (complex? . g$11357$RATN9)
        (char? . g$11356$RATN9)
        (char>? . g$11355$RATN9)
        (char>=? . g$11354$RATN9)
        (char=? . g$11353$RATN9)
        (char<? . g$11352$RATN9)
        (char<=? . g$11351$RATN9)
        (char->integer . g$11350$RATN9)
        (ceiling . g$11349$RATN9)
        (call-with-values . g$11348$RATN9)
        (call-with-current-continuation . g$11346$RATN9)
        (cddddr . g$5634$RATN9)
        (cdddar . g$5633$RATN9)
        (cddadr . g$5632$RATN9)
        (cddaar . g$5631$RATN9)
        (cdaddr . g$5630$RATN9)
        (cdadar . g$5629$RATN9)
        (cdaadr . g$5628$RATN9)
        (cdaaar . g$5627$RATN9)
        (cadddr . g$5626$RATN9)
        (caddar . g$5625$RATN9)
        (cadadr . g$5624$RATN9)
        (cadaar . g$5623$RATN9)
        (caaddr . g$5622$RATN9)
        (caadar . g$5621$RATN9)
        (caaadr . g$5620$RATN9)
        (caaaar . g$5619$RATN9)
        (cdddr . g$5618$RATN9)
        (cddar . g$5617$RATN9)
        (cdadr . g$5616$RATN9)
        (cdaar . g$5615$RATN9)
        (caddr . g$5614$RATN9)
        (cadar . g$5613$RATN9)
        (caadr . g$5612$RATN9)
        (caaar . g$5611$RATN9)
        (cddr . g$5610$RATN9)
        (cdar . g$5609$RATN9)
        (cadr . g$5608$RATN9)
        (caar . g$5607$RATN9)
        (cdr . g$11345$RATN9)
        (car . g$11344$RATN9)
        (boolean? . g$11343$RATN9)
        (atan . g$11341$RATN9)
        (asin . g$11339$RATN9)
        (apply . g$11338$RATN9)
        (append . g$11337$RATN9)
        (angle . g$11336$RATN9)
        (acos . g$11335$RATN9)
        (abs . g$11334$RATN9)
        (/ . g$11333$RATN9)
        (* . g$11332$RATN9)
        (- . g$11331$RATN9)
        (+ . g$11330$RATN9)
        (>= . g$11329$RATN9)
        (> . g$11328$RATN9)
        (= . g$11327$RATN9)
        (<= . g$11326$RATN9)
        (< . g$11325$RATN9)
        (unquote-splicing . g$11246$RATN9)
        (unquote . g$11245$RATN9)
        (else . g$11243$RATN9)
        (=> . g$11242$RATN9)
        (... . g$11241$RATN9)
        (delay . g$11238$RATN9)
        (or . g$11236$RATN9)
        (and . g$11235$RATN9)
        (do . g$11234$RATN9)
        (cond . g$11233$RATN9)
        (let* . g$11232$RATN9)
        (let . g$11231$RATN9)
        (quasiquote . g$11227$RATN9)
        (syntax-rules . g$11226$RATN9)
        (case . g$11217$RATN9)
        (if . g$11213$RATN9)
        (letrec . g$11211$RATN9)
        (lambda . g$11208$RATN9)
        (quote . g$11205$RATN9)
        (letrec-syntax . g$11203$RATN9)
        (let-syntax . g$11202$RATN9)
        (set! . g$11201$RATN9)
        (begin . g$11198$RATN9)
        (define-syntax . g$11196$RATN9)
        (define . g$11195$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6750$RATN9
      'g$11861$RATN9
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11757$RATN9)
        (string-titlecase . g$11756$RATN9)
        (string-normalize-nfkd . g$11755$RATN9)
        (string-normalize-nfkc . g$11754$RATN9)
        (string-normalize-nfd . g$11753$RATN9)
        (string-normalize-nfc . g$11752$RATN9)
        (string-foldcase . g$11751$RATN9)
        (string-downcase . g$11750$RATN9)
        (string-ci>? . g$11749$RATN9)
        (string-ci>=? . g$11748$RATN9)
        (string-ci=? . g$11747$RATN9)
        (string-ci<? . g$11746$RATN9)
        (string-ci<=? . g$11745$RATN9)
        (char-whitespace? . g$11744$RATN9)
        (char-upper-case? . g$11743$RATN9)
        (char-title-case? . g$11742$RATN9)
        (char-numeric? . g$11741$RATN9)
        (char-lower-case? . g$11740$RATN9)
        (char-general-category . g$11739$RATN9)
        (char-upcase . g$11738$RATN9)
        (char-titlecase . g$11737$RATN9)
        (char-foldcase . g$11736$RATN9)
        (char-downcase . g$11735$RATN9)
        (char-ci>? . g$11734$RATN9)
        (char-ci>=? . g$11733$RATN9)
        (char-ci=? . g$11732$RATN9)
        (char-ci<? . g$11731$RATN9)
        (char-ci<=? . g$11730$RATN9)
        (char-alphabetic? . g$11729$RATN9)
        (make-variable-transformer . g$7835$RATN9)
        (identifier? . g$8228$RATN9)
        (generate-temporaries . g$8220$RATN9)
        (free-identifier=? . g$8221$RATN9)
        (syntax->datum . g$8230$RATN9)
        (datum->syntax . g$8229$RATN9)
        (bound-identifier=? . g$8222$RATN9)
        (record-type-descriptor? . g$11728$RATN9)
        (record-predicate . g$11727$RATN9)
        (record-mutator . g$11726$RATN9)
        (record-constructor . g$11725$RATN9)
        (record-accessor . g$11724$RATN9)
        (make-record-type-descriptor . g$11723$RATN9)
        (make-record-constructor-descriptor . g$11722$RATN9)
        (record? . g$11721$RATN9)
        (record-type-uid . g$11720$RATN9)
        (record-type-sealed? . g$11719$RATN9)
        (record-type-parent . g$11718$RATN9)
        (record-type-opaque? . g$11717$RATN9)
        (record-type-name . g$11716$RATN9)
        (record-type-generative? . g$11715$RATN9)
        (record-type-field-names . g$11714$RATN9)
        (record-rtd . g$11713$RATN9)
        (record-field-mutable? . g$11712$RATN9)
        (delete-file . g$6018$RATN9)
        (file-exists? . g$6017$RATN9)
        (vector-sort! . g$11711$RATN9)
        (vector-sort . g$11710$RATN9)
        (list-sort . g$6525$RATN9)
        (symbol-hash . g$11709$RATN9)
        (string-ci-hash . g$11708$RATN9)
        (string-hash . g$11707$RATN9)
        (equal-hash . g$11706$RATN9)
        (hashtable-equivalence-function . g$11705$RATN9)
        (make-hashtable . g$11704$RATN9)
        (hashtable-hash-function . g$11703$RATN9)
        (make-eqv-hashtable . g$5985$RATN9)
        (make-eq-hashtable . g$5984$RATN9)
        (hashtable? . g$11702$RATN9)
        (hashtable-update! . g$5991$RATN9)
        (hashtable-size . g$5986$RATN9)
        (hashtable-set! . g$5988$RATN9)
        (hashtable-ref . g$5987$RATN9)
        (hashtable-mutable? . g$11701$RATN9)
        (hashtable-keys . g$11700$RATN9)
        (hashtable-entries . g$11699$RATN9)
        (hashtable-delete! . g$5989$RATN9)
        (hashtable-copy . g$11698$RATN9)
        (hashtable-contains? . g$5990$RATN9)
        (hashtable-clear! . g$5992$RATN9)
        (call-with-output-file . g$11697$RATN9)
        (call-with-input-file . g$11696$RATN9)
        (write-char . g$11695$RATN9)
        (write . g$11694$RATN9)
        (with-output-to-file . g$11693$RATN9)
        (with-input-from-file . g$11692$RATN9)
        (read-char . g$11691$RATN9)
        (read . g$11690$RATN9)
        (peek-char . g$11689$RATN9)
        (open-output-file . g$11688$RATN9)
        (open-input-file . g$11687$RATN9)
        (newline . g$11686$RATN9)
        (display . g$11685$RATN9)
        (close-output-port . g$11684$RATN9)
        (close-input-port . g$11683$RATN9)
        (eof-object? . g$11682$RATN9)
        (eof-object . g$11681$RATN9)
        (current-error-port . g$11680$RATN9)
        (current-output-port . g$11679$RATN9)
        (current-input-port . g$11678$RATN9)
        (output-port? . g$11677$RATN9)
        (input-port? . g$11676$RATN9)
        (utf-8-codec . g$11675$RATN9)
        (utf-16-codec . g$11674$RATN9)
        (transcoder-error-handling-mode . g$11673$RATN9)
        (transcoder-eol-style . g$11672$RATN9)
        (transcoder-codec . g$11671$RATN9)
        (transcoded-port . g$11670$RATN9)
        (textual-port? . g$11669$RATN9)
        (string->bytevector . g$11668$RATN9)
        (standard-output-port . g$11667$RATN9)
        (standard-input-port . g$11666$RATN9)
        (standard-error-port . g$11665$RATN9)
        (set-port-position! . g$11664$RATN9)
        (put-u8 . g$11663$RATN9)
        (put-string . g$11662$RATN9)
        (put-datum . g$11661$RATN9)
        (put-char . g$11660$RATN9)
        (put-bytevector . g$11659$RATN9)
        (port? . g$11658$RATN9)
        (port-transcoder . g$11657$RATN9)
        (port-position . g$11656$RATN9)
        (port-has-set-port-position!? . g$11655$RATN9)
        (port-has-port-position? . g$11654$RATN9)
        (port-eof? . g$11653$RATN9)
        (output-port-buffer-mode . g$11652$RATN9)
        (open-string-output-port . g$6916$RATN9)
        (open-string-input-port . g$11651$RATN9)
        (open-file-output-port . g$11650$RATN9)
        (open-file-input/output-port . g$11649$RATN9)
        (open-file-input-port . g$11648$RATN9)
        (open-bytevector-output-port . g$11647$RATN9)
        (open-bytevector-input-port . g$11646$RATN9)
        (native-transcoder . g$11645$RATN9)
        (native-eol-style . g$11644$RATN9)
        (make-transcoder . g$11643$RATN9)
        (latin-1-codec . g$11642$RATN9)
        (make-i/o-write-error . g$6773$RATN9)
        (make-i/o-read-error . g$6759$RATN9)
        (make-i/o-port-error . g$6878$RATN9)
        (make-i/o-invalid-position-error . g$6788$RATN9)
        (make-i/o-filename-error . g$6805$RATN9)
        (make-i/o-file-protection-error . g$6821$RATN9)
        (make-i/o-file-is-read-only-error . g$6835$RATN9)
        (make-i/o-file-does-not-exist-error . g$6863$RATN9)
        (make-i/o-file-already-exists-error . g$6849$RATN9)
        (make-i/o-error . g$6745$RATN9)
        (make-i/o-encoding-error . g$6909$RATN9)
        (make-i/o-decoding-error . g$6894$RATN9)
        (make-custom-textual-output-port . g$11641$RATN9)
        (make-custom-textual-input/output-port . g$11640$RATN9)
        (make-custom-textual-input-port . g$11639$RATN9)
        (make-custom-binary-output-port . g$11638$RATN9)
        (make-custom-binary-input/output-port . g$11637$RATN9)
        (make-custom-binary-input-port . g$11636$RATN9)
        (make-bytevector . g$11635$RATN9)
        (lookahead-u8 . g$11634$RATN9)
        (lookahead-char . g$11633$RATN9)
        (i/o-write-error? . g$6774$RATN9)
        (i/o-read-error? . g$6760$RATN9)
        (i/o-port-error? . g$6880$RATN9)
        (i/o-invalid-position-error? . g$6790$RATN9)
        (i/o-filename-error? . g$6807$RATN9)
        (i/o-file-protection-error? . g$6822$RATN9)
        (i/o-file-is-read-only-error? . g$6836$RATN9)
        (i/o-file-does-not-exist-error? . g$6864$RATN9)
        (i/o-file-already-exists-error? . g$6850$RATN9)
        (i/o-error? . g$6746$RATN9)
        (i/o-error-port . g$6881$RATN9)
        (i/o-error-filename . g$6808$RATN9)
        (i/o-encoding-error? . g$6911$RATN9)
        (i/o-encoding-error-char . g$6912$RATN9)
        (i/o-decoding-error? . g$6895$RATN9)
        (get-u8 . g$11632$RATN9)
        (get-string-n! . g$11631$RATN9)
        (get-string-n . g$11630$RATN9)
        (get-string-all . g$11629$RATN9)
        (get-line . g$11628$RATN9)
        (get-datum . g$11627$RATN9)
        (get-char . g$11626$RATN9)
        (get-bytevector-some . g$11625$RATN9)
        (get-bytevector-n! . g$11624$RATN9)
        (get-bytevector-n . g$11623$RATN9)
        (get-bytevector-all . g$11622$RATN9)
        (flush-output-port . g$11621$RATN9)
        (close-port . g$11620$RATN9)
        (call-with-string-output-port . g$11619$RATN9)
        (call-with-port . g$11618$RATN9)
        (call-with-bytevector-output-port . g$11617$RATN9)
        (bytevector->string . g$11616$RATN9)
        (buffer-mode? . g$11615$RATN9)
        (binary-port? . g$11614$RATN9)
        (exit . g$11610$RATN9)
        (command-line . g$11161$RATN9)
        (remove . g$6098$RATN9)
        (remv . g$6099$RATN9)
        (remp . g$6084$RATN9)
        (remq . g$6100$RATN9)
        (partition . g$6083$RATN9)
        (memv . g$11605$RATN9)
        (memq . g$11604$RATN9)
        (memp . g$6090$RATN9)
        (member . g$6089$RATN9)
        (exists . g$6094$RATN9)
        (for-all . g$6093$RATN9)
        (fold-right . g$6097$RATN9)
        (fold-left . g$6096$RATN9)
        (find . g$6082$RATN9)
        (filter . g$6085$RATN9)
        (cons* . g$6095$RATN9)
        (assv . g$6086$RATN9)
        (assq . g$11603$RATN9)
        (assp . g$6088$RATN9)
        (assoc . g$6087$RATN9)
        (with-exception-handler . g$11602$RATN9)
        (raise-continuable . g$11601$RATN9)
        (raise . g$11600$RATN9)
        (make-enumeration . g$11599$RATN9)
        (enum-set=? . g$11598$RATN9)
        (enum-set-universe . g$11597$RATN9)
        (enum-set-union . g$11596$RATN9)
        (enum-set-subset? . g$11595$RATN9)
        (enum-set-projection . g$11594$RATN9)
        (enum-set-member? . g$11593$RATN9)
        (enum-set-intersection . g$11592$RATN9)
        (enum-set-indexer . g$11591$RATN9)
        (enum-set-difference . g$11590$RATN9)
        (enum-set-constructor . g$11589$RATN9)
        (enum-set-complement . g$11588$RATN9)
        (enum-set->list . g$11587$RATN9)
        (who-condition? . g$6423$RATN9)
        (warning? . g$6334$RATN9)
        (violation? . g$6376$RATN9)
        (undefined-violation? . g$6500$RATN9)
        (syntax-violation? . g$6484$RATN9)
        (syntax-violation-subform . g$6486$RATN9)
        (syntax-violation-form . g$6485$RATN9)
        (syntax-violation . g$8227$RATN9)
        (simple-conditions . g$11586$RATN9)
        (serious-condition? . g$6348$RATN9)
        (non-continuable-violation? . g$6438$RATN9)
        (message-condition? . g$6319$RATN9)
        (make-who-condition . g$6421$RATN9)
        (make-warning . g$6333$RATN9)
        (make-violation . g$6375$RATN9)
        (make-undefined-violation . g$6499$RATN9)
        (make-syntax-violation . g$6481$RATN9)
        (make-serious-condition . g$6347$RATN9)
        (make-non-continuable-violation . g$6437$RATN9)
        (make-message-condition . g$6317$RATN9)
        (make-lexical-violation . g$6465$RATN9)
        (make-irritants-condition . g$6404$RATN9)
        (make-implementation-restriction-violation . g$6451$RATN9)
        (make-error . g$6361$RATN9)
        (make-assertion-violation . g$6389$RATN9)
        (lexical-violation? . g$6466$RATN9)
        (irritants-condition? . g$6406$RATN9)
        (implementation-restriction-violation? . g$6452$RATN9)
        (error? . g$6362$RATN9)
        (condition-who . g$6424$RATN9)
        (condition-predicate . g$11585$RATN9)
        (condition-message . g$6320$RATN9)
        (condition-irritants . g$6407$RATN9)
        (condition-accessor . g$11584$RATN9)
        (condition . g$11583$RATN9)
        (assertion-violation? . g$6390$RATN9)
        (condition? . g$11582$RATN9)
        (utf32->string . g$11581$RATN9)
        (utf16->string . g$11580$RATN9)
        (utf8->string . g$11579$RATN9)
        (uint-list->bytevector . g$11578$RATN9)
        (u8-list->bytevector . g$11577$RATN9)
        (string->utf8 . g$11576$RATN9)
        (string->utf32 . g$11575$RATN9)
        (string->utf16 . g$11574$RATN9)
        (sint-list->bytevector . g$11573$RATN9)
        (native-endianness . g$6174$RATN9)
        (bytevector? . g$11572$RATN9)
        (bytevector=? . g$11571$RATN9)
        (bytevector-uint-set! . g$11570$RATN9)
        (bytevector-uint-ref . g$11569$RATN9)
        (bytevector-u8-set! . g$11568$RATN9)
        (bytevector-u8-ref . g$11567$RATN9)
        (bytevector-u64-set! . g$6195$RATN9)
        (bytevector-u64-ref . g$6191$RATN9)
        (bytevector-u64-native-set! . g$6197$RATN9)
        (bytevector-u64-native-ref . g$6193$RATN9)
        (bytevector-u32-set! . g$6187$RATN9)
        (bytevector-u32-ref . g$6183$RATN9)
        (bytevector-u32-native-set! . g$6189$RATN9)
        (bytevector-u32-native-ref . g$6185$RATN9)
        (bytevector-u16-set! . g$6179$RATN9)
        (bytevector-u16-ref . g$6175$RATN9)
        (bytevector-u16-native-set! . g$6181$RATN9)
        (bytevector-u16-native-ref . g$6177$RATN9)
        (bytevector-sint-set! . g$11566$RATN9)
        (bytevector-sint-ref . g$11565$RATN9)
        (bytevector-s8-set! . g$11564$RATN9)
        (bytevector-s8-ref . g$11563$RATN9)
        (bytevector-s64-set! . g$6196$RATN9)
        (bytevector-s64-ref . g$6192$RATN9)
        (bytevector-s64-native-set! . g$6198$RATN9)
        (bytevector-s64-native-ref . g$6194$RATN9)
        (bytevector-s32-set! . g$6188$RATN9)
        (bytevector-s32-ref . g$6184$RATN9)
        (bytevector-s32-native-set! . g$6190$RATN9)
        (bytevector-s32-native-ref . g$6186$RATN9)
        (bytevector-s16-set! . g$6180$RATN9)
        (bytevector-s16-ref . g$6176$RATN9)
        (bytevector-s16-native-set! . g$6182$RATN9)
        (bytevector-s16-native-ref . g$6178$RATN9)
        (bytevector-length . g$11562$RATN9)
        (bytevector-ieee-single-set! . g$11561$RATN9)
        (bytevector-ieee-single-ref . g$11560$RATN9)
        (bytevector-ieee-single-native-set! . g$6201$RATN9)
        (bytevector-ieee-single-native-ref . g$6199$RATN9)
        (bytevector-ieee-double-set! . g$11559$RATN9)
        (bytevector-ieee-double-ref . g$11558$RATN9)
        (bytevector-ieee-double-native-set! . g$6202$RATN9)
        (bytevector-ieee-double-native-ref . g$6200$RATN9)
        (bytevector-fill! . g$11557$RATN9)
        (bytevector-copy! . g$11556$RATN9)
        (bytevector-copy . g$11555$RATN9)
        (bytevector->uint-list . g$11554$RATN9)
        (bytevector->u8-list . g$11553$RATN9)
        (bytevector->sint-list . g$11552$RATN9)
        (no-nans-violation? . g$6731$RATN9)
        (no-infinities-violation? . g$6717$RATN9)
        (make-no-nans-violation . g$6730$RATN9)
        (make-no-infinities-violation . g$6716$RATN9)
        (real->flonum . g$11551$RATN9)
        (flzero? . g$11550$RATN9)
        (fltruncate . g$11549$RATN9)
        (fltan . g$11548$RATN9)
        (flsqrt . g$11547$RATN9)
        (flsin . g$11546$RATN9)
        (flround . g$11545$RATN9)
        (flpositive? . g$11544$RATN9)
        (flonum? . g$11543$RATN9)
        (flodd? . g$11542$RATN9)
        (flnumerator . g$11541$RATN9)
        (flnegative? . g$11540$RATN9)
        (flnan? . g$11539$RATN9)
        (flmod0 . g$11538$RATN9)
        (flmod . g$11537$RATN9)
        (flmin . g$11536$RATN9)
        (flmax . g$11535$RATN9)
        (fllog . g$11534$RATN9)
        (flinteger? . g$11533$RATN9)
        (flinfinite? . g$11532$RATN9)
        (flfloor . g$11531$RATN9)
        (flfinite? . g$11530$RATN9)
        (flexpt . g$11529$RATN9)
        (flexp . g$11528$RATN9)
        (fleven? . g$11527$RATN9)
        (fldiv0-and-mod0 . g$11526$RATN9)
        (fldiv0 . g$11525$RATN9)
        (fldiv-and-mod . g$11524$RATN9)
        (fldiv . g$11523$RATN9)
        (fldenominator . g$11522$RATN9)
        (flcos . g$11521$RATN9)
        (flceiling . g$11520$RATN9)
        (flatan . g$11519$RATN9)
        (flasin . g$11518$RATN9)
        (flacos . g$11517$RATN9)
        (flabs . g$11516$RATN9)
        (fl>? . g$11515$RATN9)
        (fl>=? . g$11514$RATN9)
        (fl=? . g$11513$RATN9)
        (fl<? . g$11512$RATN9)
        (fl<=? . g$11511$RATN9)
        (fl/ . g$11510$RATN9)
        (fl- . g$11509$RATN9)
        (fl+ . g$11508$RATN9)
        (fl* . g$11507$RATN9)
        (fixnum->flonum . g$11506$RATN9)
        (fxzero? . g$11505$RATN9)
        (fxxor . g$11504$RATN9)
        (fxrotate-bit-field . g$6662$RATN9)
        (fxreverse-bit-field . g$11503$RATN9)
        (fxpositive? . g$11502$RATN9)
        (fxodd? . g$11501$RATN9)
        (fxnot . g$11500$RATN9)
        (fxnegative? . g$11499$RATN9)
        (fxmod0 . g$11498$RATN9)
        (fxmod . g$11497$RATN9)
        (fxmin . g$11496$RATN9)
        (fxmax . g$11495$RATN9)
        (fxlength . g$11494$RATN9)
        (fxior . g$11493$RATN9)
        (fxif . g$6656$RATN9)
        (fxfirst-bit-set . g$11492$RATN9)
        (fxeven? . g$11491$RATN9)
        (fxdiv0-and-mod0 . g$11490$RATN9)
        (fxdiv0 . g$11489$RATN9)
        (fxdiv-and-mod . g$11488$RATN9)
        (fxdiv . g$11487$RATN9)
        (fxcopy-bit-field . g$6659$RATN9)
        (fxcopy-bit . g$6657$RATN9)
        (fxbit-set? . g$11486$RATN9)
        (fxbit-field . g$6658$RATN9)
        (fxbit-count . g$11485$RATN9)
        (fxarithmetic-shift-right . g$6661$RATN9)
        (fxarithmetic-shift-left . g$6660$RATN9)
        (fxarithmetic-shift . g$11484$RATN9)
        (fxand . g$11483$RATN9)
        (fx>? . g$11482$RATN9)
        (fx>=? . g$11481$RATN9)
        (fx=? . g$11480$RATN9)
        (fx<? . g$11479$RATN9)
        (fx<=? . g$11478$RATN9)
        (fx-/carry . g$11477$RATN9)
        (fx- . g$11476$RATN9)
        (fx+/carry . g$11475$RATN9)
        (fx+ . g$11474$RATN9)
        (fx*/carry . g$11473$RATN9)
        (fx* . g$11472$RATN9)
        (greatest-fixnum . g$11471$RATN9)
        (least-fixnum . g$11470$RATN9)
        (fixnum-width . g$11469$RATN9)
        (fixnum? . g$11468$RATN9)
        (bitwise-rotate-bit-field . g$6610$RATN9)
        (bitwise-reverse-bit-field . g$6611$RATN9)
        (bitwise-length . g$11467$RATN9)
        (bitwise-if . g$6604$RATN9)
        (bitwise-first-bit-set . g$11466$RATN9)
        (bitwise-copy-bit-field . g$6607$RATN9)
        (bitwise-copy-bit . g$6605$RATN9)
        (bitwise-bit-set? . g$11465$RATN9)
        (bitwise-bit-field . g$11464$RATN9)
        (bitwise-bit-count . g$11463$RATN9)
        (bitwise-xor . g$11462$RATN9)
        (bitwise-ior . g$11461$RATN9)
        (bitwise-and . g$11460$RATN9)
        (bitwise-not . g$11459$RATN9)
        (bitwise-arithmetic-shift-right . g$6609$RATN9)
        (bitwise-arithmetic-shift-left . g$6608$RATN9)
        (bitwise-arithmetic-shift . g$11458$RATN9)
        (zero? . g$11457$RATN9)
        (vector? . g$11456$RATN9)
        (vector-set! . g$11455$RATN9)
        (vector-ref . g$11454$RATN9)
        (vector-map . g$11453$RATN9)
        (vector-length . g$11452$RATN9)
        (vector-for-each . g$11451$RATN9)
        (vector-fill! . g$11450$RATN9)
        (vector->list . g$11449$RATN9)
        (vector . g$11448$RATN9)
        (values . g$11447$RATN9)
        (truncate . g$11446$RATN9)
        (tan . g$11445$RATN9)
        (symbol? . g$11444$RATN9)
        (symbol=? . g$11443$RATN9)
        (symbol->string . g$11442$RATN9)
        (substring . g$11441$RATN9)
        (string? . g$11440$RATN9)
        (string>? . g$11439$RATN9)
        (string>=? . g$11438$RATN9)
        (string=? . g$11437$RATN9)
        (string<? . g$11436$RATN9)
        (string<=? . g$11435$RATN9)
        (string-ref . g$11434$RATN9)
        (string-length . g$11433$RATN9)
        (string-for-each . g$11432$RATN9)
        (string-copy . g$11431$RATN9)
        (string-append . g$11430$RATN9)
        (string->symbol . g$11429$RATN9)
        (string->number . g$11428$RATN9)
        (string->list . g$11427$RATN9)
        (string . g$11426$RATN9)
        (sqrt . g$11425$RATN9)
        (sin . g$11424$RATN9)
        (round . g$11423$RATN9)
        (reverse . g$11422$RATN9)
        (real? . g$11421$RATN9)
        (real-valued? . g$11420$RATN9)
        (real-part . g$11419$RATN9)
        (rationalize . g$5635$RATN9)
        (rational? . g$11418$RATN9)
        (rational-valued? . g$11417$RATN9)
        (procedure? . g$11416$RATN9)
        (positive? . g$11415$RATN9)
        (pair? . g$11414$RATN9)
        (odd? . g$11413$RATN9)
        (numerator . g$11412$RATN9)
        (number? . g$11411$RATN9)
        (number->string . g$11410$RATN9)
        (null? . g$11409$RATN9)
        (not . g$11408$RATN9)
        (negative? . g$11407$RATN9)
        (nan? . g$11406$RATN9)
        (min . g$11405$RATN9)
        (max . g$11404$RATN9)
        (map . g$11403$RATN9)
        (make-vector . g$11402$RATN9)
        (make-string . g$11401$RATN9)
        (make-rectangular . g$11400$RATN9)
        (make-polar . g$11399$RATN9)
        (magnitude . g$11398$RATN9)
        (log . g$11397$RATN9)
        (list? . g$11396$RATN9)
        (list-tail . g$11395$RATN9)
        (list-ref . g$11394$RATN9)
        (list->vector . g$11393$RATN9)
        (list->string . g$11392$RATN9)
        (list . g$11391$RATN9)
        (length . g$11390$RATN9)
        (lcm . g$11389$RATN9)
        (integer? . g$11388$RATN9)
        (integer-valued? . g$11387$RATN9)
        (integer->char . g$11386$RATN9)
        (infinite? . g$11385$RATN9)
        (inexact? . g$11384$RATN9)
        (inexact . g$11383$RATN9)
        (imag-part . g$11382$RATN9)
        (gcd . g$11381$RATN9)
        (for-each . g$11380$RATN9)
        (floor . g$11379$RATN9)
        (finite? . g$11378$RATN9)
        (expt . g$11377$RATN9)
        (exp . g$11376$RATN9)
        (exact? . g$11375$RATN9)
        (exact-integer-sqrt . g$11374$RATN9)
        (exact . g$11373$RATN9)
        (even? . g$11372$RATN9)
        (error . g$11371$RATN9)
        (eqv? . g$11370$RATN9)
        (equal? . g$11369$RATN9)
        (eq? . g$11368$RATN9)
        (dynamic-wind . g$11367$RATN9)
        (div0-and-mod0 . g$11366$RATN9)
        (mod0 . g$11365$RATN9)
        (div0 . g$11364$RATN9)
        (div-and-mod . g$11363$RATN9)
        (mod . g$11362$RATN9)
        (div . g$11361$RATN9)
        (denominator . g$11360$RATN9)
        (cos . g$11359$RATN9)
        (cons . g$11358$RATN9)
        (complex? . g$11357$RATN9)
        (char? . g$11356$RATN9)
        (char>? . g$11355$RATN9)
        (char>=? . g$11354$RATN9)
        (char=? . g$11353$RATN9)
        (char<? . g$11352$RATN9)
        (char<=? . g$11351$RATN9)
        (char->integer . g$11350$RATN9)
        (ceiling . g$11349$RATN9)
        (call-with-values . g$11348$RATN9)
        (call/cc . g$11347$RATN9)
        (call-with-current-continuation . g$11346$RATN9)
        (cddddr . g$5634$RATN9)
        (cdddar . g$5633$RATN9)
        (cddadr . g$5632$RATN9)
        (cddaar . g$5631$RATN9)
        (cdaddr . g$5630$RATN9)
        (cdadar . g$5629$RATN9)
        (cdaadr . g$5628$RATN9)
        (cdaaar . g$5627$RATN9)
        (cadddr . g$5626$RATN9)
        (caddar . g$5625$RATN9)
        (cadadr . g$5624$RATN9)
        (cadaar . g$5623$RATN9)
        (caaddr . g$5622$RATN9)
        (caadar . g$5621$RATN9)
        (caaadr . g$5620$RATN9)
        (caaaar . g$5619$RATN9)
        (cdddr . g$5618$RATN9)
        (cddar . g$5617$RATN9)
        (cdadr . g$5616$RATN9)
        (cdaar . g$5615$RATN9)
        (caddr . g$5614$RATN9)
        (cadar . g$5613$RATN9)
        (caadr . g$5612$RATN9)
        (caaar . g$5611$RATN9)
        (cddr . g$5610$RATN9)
        (cdar . g$5609$RATN9)
        (cadr . g$5608$RATN9)
        (caar . g$5607$RATN9)
        (cdr . g$11345$RATN9)
        (car . g$11344$RATN9)
        (boolean? . g$11343$RATN9)
        (boolean=? . g$11342$RATN9)
        (atan . g$11341$RATN9)
        (assertion-violation . g$11340$RATN9)
        (asin . g$11339$RATN9)
        (apply . g$11338$RATN9)
        (append . g$11337$RATN9)
        (angle . g$11336$RATN9)
        (acos . g$11335$RATN9)
        (abs . g$11334$RATN9)
        (/ . g$11333$RATN9)
        (* . g$11332$RATN9)
        (- . g$11331$RATN9)
        (+ . g$11330$RATN9)
        (>= . g$11329$RATN9)
        (> . g$11328$RATN9)
        (= . g$11327$RATN9)
        (<= . g$11326$RATN9)
        (< . g$11325$RATN9)
        (&no-nans . g$11299$RATN9)
        (&no-infinities . g$11298$RATN9)
        (&i/o-encoding . g$11297$RATN9)
        (&i/o-decoding . g$11296$RATN9)
        (&i/o-port . g$11295$RATN9)
        (&i/o-file-does-not-exist . g$11294$RATN9)
        (&i/o-file-already-exists . g$11293$RATN9)
        (&i/o-file-is-read-only . g$11292$RATN9)
        (&i/o-file-protection . g$11291$RATN9)
        (&i/o-filename . g$11290$RATN9)
        (&i/o-invalid-position . g$11289$RATN9)
        (&i/o-write . g$11288$RATN9)
        (&i/o-read . g$11287$RATN9)
        (&i/o . g$11286$RATN9)
        (&non-continuable . g$11285$RATN9)
        (&undefined . g$11284$RATN9)
        (&syntax . g$11283$RATN9)
        (&lexical . g$11282$RATN9)
        (&implementation-restriction . g$11281$RATN9)
        (&who . g$11279$RATN9)
        (&irritants . g$11278$RATN9)
        (&assertion . g$11277$RATN9)
        (&violation . g$11276$RATN9)
        (&error . g$11275$RATN9)
        (&serious . g$11274$RATN9)
        (&warning . g$11273$RATN9)
        (&message . g$11272$RATN9)
        (&condition . g$11271$RATN9)
        (define-condition-type . g$11270$RATN9)
        (define-enumeration . g$11269$RATN9)
        (define-record-type . g$11268$RATN9)
        (parent-rtd . g$11267$RATN9)
        (nongenerative . g$11266$RATN9)
        (opaque . g$11265$RATN9)
        (sealed . g$11264$RATN9)
        (protocol . g$11263$RATN9)
        (parent . g$11262$RATN9)
        (immutable . g$11261$RATN9)
        (mutable . g$11260$RATN9)
        (fields . g$11259$RATN9)
        (error-handling-mode . g$11258$RATN9)
        (file-options . g$11257$RATN9)
        (buffer-mode . g$11256$RATN9)
        (eol-style . g$11255$RATN9)
        (guard . g$11254$RATN9)
        (unsyntax-splicing . g$11248$RATN9)
        (unsyntax . g$11247$RATN9)
        (unquote-splicing . g$11246$RATN9)
        (unquote . g$11245$RATN9)
        (_ . g$11244$RATN9)
        (else . g$11243$RATN9)
        (=> . g$11242$RATN9)
        (... . g$11241$RATN9)
        (assert . g$11240$RATN9)
        (endianness . g$11239$RATN9)
        (or . g$11236$RATN9)
        (and . g$11235$RATN9)
        (do . g$11234$RATN9)
        (cond . g$11233$RATN9)
        (let* . g$11232$RATN9)
        (let . g$11231$RATN9)
        (identifier-syntax . g$11230$RATN9)
        (with-syntax . g$11229$RATN9)
        (quasisyntax . g$11228$RATN9)
        (quasiquote . g$11227$RATN9)
        (syntax-rules . g$11226$RATN9)
        (let-values . g$11222$RATN9)
        (let*-values . g$11221$RATN9)
        (record-constructor-descriptor . g$11220$RATN9)
        (record-type-descriptor . g$11219$RATN9)
        (case . g$11217$RATN9)
        (unless . g$11215$RATN9)
        (when . g$11214$RATN9)
        (if . g$11213$RATN9)
        (letrec* . g$11212$RATN9)
        (letrec . g$11211$RATN9)
        (case-lambda . g$11209$RATN9)
        (lambda . g$11208$RATN9)
        (syntax . g$11207$RATN9)
        (syntax-case . g$11206$RATN9)
        (quote . g$11205$RATN9)
        (letrec-syntax . g$11203$RATN9)
        (let-syntax . g$11202$RATN9)
        (set! . g$11201$RATN9)
        (import . g$11200$RATN9)
        (library . g$11199$RATN9)
        (begin . g$11198$RATN9)
        (define-syntax . g$11196$RATN9)
        (define . g$11195$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11862$RATN9
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$8233$RATN9)
        (scheme-report-environment . g$8211$RATN9)
        (quotient . g$6512$RATN9)
        (null-environment . g$8210$RATN9)
        (remainder . g$6513$RATN9)
        (modulo . g$6514$RATN9)
        (inexact->exact . g$11613$RATN9)
        (force . g$11612$RATN9)
        (exact->inexact . g$11611$RATN9)
        (delay . g$11238$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11863$RATN9
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11234$RATN9)
        (unless . g$11215$RATN9)
        (when . g$11214$RATN9)
        (case-lambda . g$11209$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11864$RATN9
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8213$RATN9) (environment . g$8209$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11865$RATN9
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$11607$RATN9) (set-car! . g$11606$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11866$RATN9
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$11609$RATN9) (string-set! . g$11608$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11867$RATN9
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$11610$RATN9) (command-line . g$11161$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11868$RATN9
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$7835$RATN9)
        (identifier? . g$8228$RATN9)
        (generate-temporaries . g$8220$RATN9)
        (free-identifier=? . g$8221$RATN9)
        (syntax->datum . g$8230$RATN9)
        (datum->syntax . g$8229$RATN9)
        (bound-identifier=? . g$8222$RATN9)
        (syntax-violation . g$8227$RATN9)
        (unsyntax-splicing . g$11248$RATN9)
        (unsyntax . g$11247$RATN9)
        (_ . g$11244$RATN9)
        (... . g$11241$RATN9)
        (with-syntax . g$11229$RATN9)
        (quasisyntax . g$11228$RATN9)
        (syntax . g$11207$RATN9)
        (syntax-case . g$11206$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11869$RATN9
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6018$RATN9)
        (file-exists? . g$6017$RATN9)
        (make-i/o-write-error . g$6773$RATN9)
        (make-i/o-read-error . g$6759$RATN9)
        (make-i/o-port-error . g$6878$RATN9)
        (make-i/o-invalid-position-error . g$6788$RATN9)
        (make-i/o-filename-error . g$6805$RATN9)
        (make-i/o-file-protection-error . g$6821$RATN9)
        (make-i/o-file-is-read-only-error . g$6835$RATN9)
        (make-i/o-file-does-not-exist-error . g$6863$RATN9)
        (make-i/o-file-already-exists-error . g$6849$RATN9)
        (make-i/o-error . g$6745$RATN9)
        (i/o-write-error? . g$6774$RATN9)
        (i/o-read-error? . g$6760$RATN9)
        (i/o-port-error? . g$6880$RATN9)
        (i/o-invalid-position-error? . g$6790$RATN9)
        (i/o-filename-error? . g$6807$RATN9)
        (i/o-file-protection-error? . g$6822$RATN9)
        (i/o-file-is-read-only-error? . g$6836$RATN9)
        (i/o-file-does-not-exist-error? . g$6864$RATN9)
        (i/o-file-already-exists-error? . g$6850$RATN9)
        (i/o-error? . g$6746$RATN9)
        (i/o-error-port . g$6881$RATN9)
        (i/o-error-filename . g$6808$RATN9)
        (&i/o-port . g$11295$RATN9)
        (&i/o-file-does-not-exist . g$11294$RATN9)
        (&i/o-file-already-exists . g$11293$RATN9)
        (&i/o-file-is-read-only . g$11292$RATN9)
        (&i/o-file-protection . g$11291$RATN9)
        (&i/o-filename . g$11290$RATN9)
        (&i/o-invalid-position . g$11289$RATN9)
        (&i/o-write . g$11288$RATN9)
        (&i/o-read . g$11287$RATN9)
        (&i/o . g$11286$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11870$RATN9
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$11711$RATN9)
        (vector-sort . g$11710$RATN9)
        (list-sort . g$6525$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11871$RATN9
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$11457$RATN9)
        (vector? . g$11456$RATN9)
        (vector-set! . g$11455$RATN9)
        (vector-ref . g$11454$RATN9)
        (vector-map . g$11453$RATN9)
        (vector-length . g$11452$RATN9)
        (vector-for-each . g$11451$RATN9)
        (vector-fill! . g$11450$RATN9)
        (vector->list . g$11449$RATN9)
        (vector . g$11448$RATN9)
        (values . g$11447$RATN9)
        (truncate . g$11446$RATN9)
        (tan . g$11445$RATN9)
        (symbol? . g$11444$RATN9)
        (symbol=? . g$11443$RATN9)
        (symbol->string . g$11442$RATN9)
        (substring . g$11441$RATN9)
        (string? . g$11440$RATN9)
        (string>? . g$11439$RATN9)
        (string>=? . g$11438$RATN9)
        (string=? . g$11437$RATN9)
        (string<? . g$11436$RATN9)
        (string<=? . g$11435$RATN9)
        (string-ref . g$11434$RATN9)
        (string-length . g$11433$RATN9)
        (string-for-each . g$11432$RATN9)
        (string-copy . g$11431$RATN9)
        (string-append . g$11430$RATN9)
        (string->symbol . g$11429$RATN9)
        (string->number . g$11428$RATN9)
        (string->list . g$11427$RATN9)
        (string . g$11426$RATN9)
        (sqrt . g$11425$RATN9)
        (sin . g$11424$RATN9)
        (round . g$11423$RATN9)
        (reverse . g$11422$RATN9)
        (real? . g$11421$RATN9)
        (real-valued? . g$11420$RATN9)
        (real-part . g$11419$RATN9)
        (rationalize . g$5635$RATN9)
        (rational? . g$11418$RATN9)
        (rational-valued? . g$11417$RATN9)
        (procedure? . g$11416$RATN9)
        (positive? . g$11415$RATN9)
        (pair? . g$11414$RATN9)
        (odd? . g$11413$RATN9)
        (numerator . g$11412$RATN9)
        (number? . g$11411$RATN9)
        (number->string . g$11410$RATN9)
        (null? . g$11409$RATN9)
        (not . g$11408$RATN9)
        (negative? . g$11407$RATN9)
        (nan? . g$11406$RATN9)
        (min . g$11405$RATN9)
        (max . g$11404$RATN9)
        (map . g$11403$RATN9)
        (make-vector . g$11402$RATN9)
        (make-string . g$11401$RATN9)
        (make-rectangular . g$11400$RATN9)
        (make-polar . g$11399$RATN9)
        (magnitude . g$11398$RATN9)
        (log . g$11397$RATN9)
        (list? . g$11396$RATN9)
        (list-tail . g$11395$RATN9)
        (list-ref . g$11394$RATN9)
        (list->vector . g$11393$RATN9)
        (list->string . g$11392$RATN9)
        (list . g$11391$RATN9)
        (length . g$11390$RATN9)
        (lcm . g$11389$RATN9)
        (integer? . g$11388$RATN9)
        (integer-valued? . g$11387$RATN9)
        (integer->char . g$11386$RATN9)
        (infinite? . g$11385$RATN9)
        (inexact? . g$11384$RATN9)
        (inexact . g$11383$RATN9)
        (imag-part . g$11382$RATN9)
        (gcd . g$11381$RATN9)
        (for-each . g$11380$RATN9)
        (floor . g$11379$RATN9)
        (finite? . g$11378$RATN9)
        (expt . g$11377$RATN9)
        (exp . g$11376$RATN9)
        (exact? . g$11375$RATN9)
        (exact-integer-sqrt . g$11374$RATN9)
        (exact . g$11373$RATN9)
        (even? . g$11372$RATN9)
        (error . g$11371$RATN9)
        (eqv? . g$11370$RATN9)
        (equal? . g$11369$RATN9)
        (eq? . g$11368$RATN9)
        (dynamic-wind . g$11367$RATN9)
        (div0-and-mod0 . g$11366$RATN9)
        (mod0 . g$11365$RATN9)
        (div0 . g$11364$RATN9)
        (div-and-mod . g$11363$RATN9)
        (mod . g$11362$RATN9)
        (div . g$11361$RATN9)
        (denominator . g$11360$RATN9)
        (cos . g$11359$RATN9)
        (cons . g$11358$RATN9)
        (complex? . g$11357$RATN9)
        (char? . g$11356$RATN9)
        (char>? . g$11355$RATN9)
        (char>=? . g$11354$RATN9)
        (char=? . g$11353$RATN9)
        (char<? . g$11352$RATN9)
        (char<=? . g$11351$RATN9)
        (char->integer . g$11350$RATN9)
        (ceiling . g$11349$RATN9)
        (call-with-values . g$11348$RATN9)
        (call/cc . g$11347$RATN9)
        (call-with-current-continuation . g$11346$RATN9)
        (cddddr . g$5634$RATN9)
        (cdddar . g$5633$RATN9)
        (cddadr . g$5632$RATN9)
        (cddaar . g$5631$RATN9)
        (cdaddr . g$5630$RATN9)
        (cdadar . g$5629$RATN9)
        (cdaadr . g$5628$RATN9)
        (cdaaar . g$5627$RATN9)
        (cadddr . g$5626$RATN9)
        (caddar . g$5625$RATN9)
        (cadadr . g$5624$RATN9)
        (cadaar . g$5623$RATN9)
        (caaddr . g$5622$RATN9)
        (caadar . g$5621$RATN9)
        (caaadr . g$5620$RATN9)
        (caaaar . g$5619$RATN9)
        (cdddr . g$5618$RATN9)
        (cddar . g$5617$RATN9)
        (cdadr . g$5616$RATN9)
        (cdaar . g$5615$RATN9)
        (caddr . g$5614$RATN9)
        (cadar . g$5613$RATN9)
        (caadr . g$5612$RATN9)
        (caaar . g$5611$RATN9)
        (cddr . g$5610$RATN9)
        (cdar . g$5609$RATN9)
        (cadr . g$5608$RATN9)
        (caar . g$5607$RATN9)
        (cdr . g$11345$RATN9)
        (car . g$11344$RATN9)
        (boolean? . g$11343$RATN9)
        (boolean=? . g$11342$RATN9)
        (atan . g$11341$RATN9)
        (assertion-violation . g$11340$RATN9)
        (asin . g$11339$RATN9)
        (apply . g$11338$RATN9)
        (append . g$11337$RATN9)
        (angle . g$11336$RATN9)
        (acos . g$11335$RATN9)
        (abs . g$11334$RATN9)
        (/ . g$11333$RATN9)
        (* . g$11332$RATN9)
        (- . g$11331$RATN9)
        (+ . g$11330$RATN9)
        (>= . g$11329$RATN9)
        (> . g$11328$RATN9)
        (= . g$11327$RATN9)
        (<= . g$11326$RATN9)
        (< . g$11325$RATN9)
        (unquote-splicing . g$11246$RATN9)
        (unquote . g$11245$RATN9)
        (_ . g$11244$RATN9)
        (else . g$11243$RATN9)
        (=> . g$11242$RATN9)
        (... . g$11241$RATN9)
        (assert . g$11240$RATN9)
        (or . g$11236$RATN9)
        (and . g$11235$RATN9)
        (cond . g$11233$RATN9)
        (let* . g$11232$RATN9)
        (let . g$11231$RATN9)
        (identifier-syntax . g$11230$RATN9)
        (quasiquote . g$11227$RATN9)
        (syntax-rules . g$11226$RATN9)
        (let-values . g$11222$RATN9)
        (let*-values . g$11221$RATN9)
        (case . g$11217$RATN9)
        (if . g$11213$RATN9)
        (letrec* . g$11212$RATN9)
        (letrec . g$11211$RATN9)
        (lambda . g$11208$RATN9)
        (quote . g$11205$RATN9)
        (letrec-syntax . g$11203$RATN9)
        (let-syntax . g$11202$RATN9)
        (set! . g$11201$RATN9)
        (begin . g$11198$RATN9)
        (define-syntax . g$11196$RATN9)
        (define . g$11195$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11872$RATN9
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$6098$RATN9)
        (remv . g$6099$RATN9)
        (remp . g$6084$RATN9)
        (remq . g$6100$RATN9)
        (partition . g$6083$RATN9)
        (memv . g$11605$RATN9)
        (memq . g$11604$RATN9)
        (memp . g$6090$RATN9)
        (member . g$6089$RATN9)
        (exists . g$6094$RATN9)
        (for-all . g$6093$RATN9)
        (fold-right . g$6097$RATN9)
        (fold-left . g$6096$RATN9)
        (find . g$6082$RATN9)
        (filter . g$6085$RATN9)
        (cons* . g$6095$RATN9)
        (assv . g$6086$RATN9)
        (assq . g$11603$RATN9)
        (assp . g$6088$RATN9)
        (assoc . g$6087$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11873$RATN9
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$11697$RATN9)
        (call-with-input-file . g$11696$RATN9)
        (write-char . g$11695$RATN9)
        (write . g$11694$RATN9)
        (with-output-to-file . g$11693$RATN9)
        (with-input-from-file . g$11692$RATN9)
        (read-char . g$11691$RATN9)
        (read . g$11690$RATN9)
        (peek-char . g$11689$RATN9)
        (open-output-file . g$11688$RATN9)
        (open-input-file . g$11687$RATN9)
        (newline . g$11686$RATN9)
        (display . g$11685$RATN9)
        (close-output-port . g$11684$RATN9)
        (close-input-port . g$11683$RATN9)
        (eof-object? . g$11682$RATN9)
        (eof-object . g$11681$RATN9)
        (current-error-port . g$11680$RATN9)
        (current-output-port . g$11679$RATN9)
        (current-input-port . g$11678$RATN9)
        (output-port? . g$11677$RATN9)
        (input-port? . g$11676$RATN9)
        (make-i/o-write-error . g$6773$RATN9)
        (make-i/o-read-error . g$6759$RATN9)
        (make-i/o-port-error . g$6878$RATN9)
        (make-i/o-invalid-position-error . g$6788$RATN9)
        (make-i/o-filename-error . g$6805$RATN9)
        (make-i/o-file-protection-error . g$6821$RATN9)
        (make-i/o-file-is-read-only-error . g$6835$RATN9)
        (make-i/o-file-does-not-exist-error . g$6863$RATN9)
        (make-i/o-file-already-exists-error . g$6849$RATN9)
        (make-i/o-error . g$6745$RATN9)
        (i/o-write-error? . g$6774$RATN9)
        (i/o-read-error? . g$6760$RATN9)
        (i/o-port-error? . g$6880$RATN9)
        (i/o-invalid-position-error? . g$6790$RATN9)
        (i/o-filename-error? . g$6807$RATN9)
        (i/o-file-protection-error? . g$6822$RATN9)
        (i/o-file-is-read-only-error? . g$6836$RATN9)
        (i/o-file-does-not-exist-error? . g$6864$RATN9)
        (i/o-file-already-exists-error? . g$6850$RATN9)
        (i/o-error? . g$6746$RATN9)
        (i/o-error-port . g$6881$RATN9)
        (i/o-error-filename . g$6808$RATN9)
        (&i/o-port . g$11295$RATN9)
        (&i/o-file-does-not-exist . g$11294$RATN9)
        (&i/o-file-already-exists . g$11293$RATN9)
        (&i/o-file-is-read-only . g$11292$RATN9)
        (&i/o-file-protection . g$11291$RATN9)
        (&i/o-filename . g$11290$RATN9)
        (&i/o-invalid-position . g$11289$RATN9)
        (&i/o-write . g$11288$RATN9)
        (&i/o-read . g$11287$RATN9)
        (&i/o . g$11286$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11874$RATN9
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$11635$RATN9)
        (utf32->string . g$11581$RATN9)
        (utf16->string . g$11580$RATN9)
        (utf8->string . g$11579$RATN9)
        (uint-list->bytevector . g$11578$RATN9)
        (u8-list->bytevector . g$11577$RATN9)
        (string->utf8 . g$11576$RATN9)
        (string->utf32 . g$11575$RATN9)
        (string->utf16 . g$11574$RATN9)
        (sint-list->bytevector . g$11573$RATN9)
        (native-endianness . g$6174$RATN9)
        (bytevector? . g$11572$RATN9)
        (bytevector=? . g$11571$RATN9)
        (bytevector-uint-set! . g$11570$RATN9)
        (bytevector-uint-ref . g$11569$RATN9)
        (bytevector-u8-set! . g$11568$RATN9)
        (bytevector-u8-ref . g$11567$RATN9)
        (bytevector-u64-set! . g$6195$RATN9)
        (bytevector-u64-ref . g$6191$RATN9)
        (bytevector-u64-native-set! . g$6197$RATN9)
        (bytevector-u64-native-ref . g$6193$RATN9)
        (bytevector-u32-set! . g$6187$RATN9)
        (bytevector-u32-ref . g$6183$RATN9)
        (bytevector-u32-native-set! . g$6189$RATN9)
        (bytevector-u32-native-ref . g$6185$RATN9)
        (bytevector-u16-set! . g$6179$RATN9)
        (bytevector-u16-ref . g$6175$RATN9)
        (bytevector-u16-native-set! . g$6181$RATN9)
        (bytevector-u16-native-ref . g$6177$RATN9)
        (bytevector-sint-set! . g$11566$RATN9)
        (bytevector-sint-ref . g$11565$RATN9)
        (bytevector-s8-set! . g$11564$RATN9)
        (bytevector-s8-ref . g$11563$RATN9)
        (bytevector-s64-set! . g$6196$RATN9)
        (bytevector-s64-ref . g$6192$RATN9)
        (bytevector-s64-native-set! . g$6198$RATN9)
        (bytevector-s64-native-ref . g$6194$RATN9)
        (bytevector-s32-set! . g$6188$RATN9)
        (bytevector-s32-ref . g$6184$RATN9)
        (bytevector-s32-native-set! . g$6190$RATN9)
        (bytevector-s32-native-ref . g$6186$RATN9)
        (bytevector-s16-set! . g$6180$RATN9)
        (bytevector-s16-ref . g$6176$RATN9)
        (bytevector-s16-native-set! . g$6182$RATN9)
        (bytevector-s16-native-ref . g$6178$RATN9)
        (bytevector-length . g$11562$RATN9)
        (bytevector-ieee-single-set! . g$11561$RATN9)
        (bytevector-ieee-single-ref . g$11560$RATN9)
        (bytevector-ieee-single-native-set! . g$6201$RATN9)
        (bytevector-ieee-single-native-ref . g$6199$RATN9)
        (bytevector-ieee-double-set! . g$11559$RATN9)
        (bytevector-ieee-double-ref . g$11558$RATN9)
        (bytevector-ieee-double-native-set! . g$6202$RATN9)
        (bytevector-ieee-double-native-ref . g$6200$RATN9)
        (bytevector-fill! . g$11557$RATN9)
        (bytevector-copy! . g$11556$RATN9)
        (bytevector-copy . g$11555$RATN9)
        (bytevector->uint-list . g$11554$RATN9)
        (bytevector->u8-list . g$11553$RATN9)
        (bytevector->sint-list . g$11552$RATN9)
        (endianness . g$11239$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11875$RATN9
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$11757$RATN9)
        (string-titlecase . g$11756$RATN9)
        (string-normalize-nfkd . g$11755$RATN9)
        (string-normalize-nfkc . g$11754$RATN9)
        (string-normalize-nfd . g$11753$RATN9)
        (string-normalize-nfc . g$11752$RATN9)
        (string-foldcase . g$11751$RATN9)
        (string-downcase . g$11750$RATN9)
        (string-ci>? . g$11749$RATN9)
        (string-ci>=? . g$11748$RATN9)
        (string-ci=? . g$11747$RATN9)
        (string-ci<? . g$11746$RATN9)
        (string-ci<=? . g$11745$RATN9)
        (char-whitespace? . g$11744$RATN9)
        (char-upper-case? . g$11743$RATN9)
        (char-title-case? . g$11742$RATN9)
        (char-numeric? . g$11741$RATN9)
        (char-lower-case? . g$11740$RATN9)
        (char-general-category . g$11739$RATN9)
        (char-upcase . g$11738$RATN9)
        (char-titlecase . g$11737$RATN9)
        (char-foldcase . g$11736$RATN9)
        (char-downcase . g$11735$RATN9)
        (char-ci>? . g$11734$RATN9)
        (char-ci>=? . g$11733$RATN9)
        (char-ci=? . g$11732$RATN9)
        (char-ci<? . g$11731$RATN9)
        (char-ci<=? . g$11730$RATN9)
        (char-alphabetic? . g$11729$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11876$RATN9
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$11602$RATN9)
        (raise-continuable . g$11601$RATN9)
        (raise . g$11600$RATN9)
        (guard . g$11254$RATN9)
        (else . g$11243$RATN9)
        (=> . g$11242$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11877$RATN9
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6610$RATN9)
        (bitwise-reverse-bit-field . g$6611$RATN9)
        (bitwise-length . g$11467$RATN9)
        (bitwise-if . g$6604$RATN9)
        (bitwise-first-bit-set . g$11466$RATN9)
        (bitwise-copy-bit-field . g$6607$RATN9)
        (bitwise-copy-bit . g$6605$RATN9)
        (bitwise-bit-set? . g$11465$RATN9)
        (bitwise-bit-field . g$11464$RATN9)
        (bitwise-bit-count . g$11463$RATN9)
        (bitwise-xor . g$11462$RATN9)
        (bitwise-ior . g$11461$RATN9)
        (bitwise-and . g$11460$RATN9)
        (bitwise-not . g$11459$RATN9)
        (bitwise-arithmetic-shift-right . g$6609$RATN9)
        (bitwise-arithmetic-shift-left . g$6608$RATN9)
        (bitwise-arithmetic-shift . g$11458$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11878$RATN9
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$11505$RATN9)
        (fxxor . g$11504$RATN9)
        (fxrotate-bit-field . g$6662$RATN9)
        (fxreverse-bit-field . g$11503$RATN9)
        (fxpositive? . g$11502$RATN9)
        (fxodd? . g$11501$RATN9)
        (fxnot . g$11500$RATN9)
        (fxnegative? . g$11499$RATN9)
        (fxmod0 . g$11498$RATN9)
        (fxmod . g$11497$RATN9)
        (fxmin . g$11496$RATN9)
        (fxmax . g$11495$RATN9)
        (fxlength . g$11494$RATN9)
        (fxior . g$11493$RATN9)
        (fxif . g$6656$RATN9)
        (fxfirst-bit-set . g$11492$RATN9)
        (fxeven? . g$11491$RATN9)
        (fxdiv0-and-mod0 . g$11490$RATN9)
        (fxdiv0 . g$11489$RATN9)
        (fxdiv-and-mod . g$11488$RATN9)
        (fxdiv . g$11487$RATN9)
        (fxcopy-bit-field . g$6659$RATN9)
        (fxcopy-bit . g$6657$RATN9)
        (fxbit-set? . g$11486$RATN9)
        (fxbit-field . g$6658$RATN9)
        (fxbit-count . g$11485$RATN9)
        (fxarithmetic-shift-right . g$6661$RATN9)
        (fxarithmetic-shift-left . g$6660$RATN9)
        (fxarithmetic-shift . g$11484$RATN9)
        (fxand . g$11483$RATN9)
        (fx>? . g$11482$RATN9)
        (fx>=? . g$11481$RATN9)
        (fx=? . g$11480$RATN9)
        (fx<? . g$11479$RATN9)
        (fx<=? . g$11478$RATN9)
        (fx-/carry . g$11477$RATN9)
        (fx- . g$11476$RATN9)
        (fx+/carry . g$11475$RATN9)
        (fx+ . g$11474$RATN9)
        (fx*/carry . g$11473$RATN9)
        (fx* . g$11472$RATN9)
        (greatest-fixnum . g$11471$RATN9)
        (least-fixnum . g$11470$RATN9)
        (fixnum-width . g$11469$RATN9)
        (fixnum? . g$11468$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11879$RATN9
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6731$RATN9)
        (no-infinities-violation? . g$6717$RATN9)
        (make-no-nans-violation . g$6730$RATN9)
        (make-no-infinities-violation . g$6716$RATN9)
        (real->flonum . g$11551$RATN9)
        (flzero? . g$11550$RATN9)
        (fltruncate . g$11549$RATN9)
        (fltan . g$11548$RATN9)
        (flsqrt . g$11547$RATN9)
        (flsin . g$11546$RATN9)
        (flround . g$11545$RATN9)
        (flpositive? . g$11544$RATN9)
        (flonum? . g$11543$RATN9)
        (flodd? . g$11542$RATN9)
        (flnumerator . g$11541$RATN9)
        (flnegative? . g$11540$RATN9)
        (flnan? . g$11539$RATN9)
        (flmod0 . g$11538$RATN9)
        (flmod . g$11537$RATN9)
        (flmin . g$11536$RATN9)
        (flmax . g$11535$RATN9)
        (fllog . g$11534$RATN9)
        (flinteger? . g$11533$RATN9)
        (flinfinite? . g$11532$RATN9)
        (flfloor . g$11531$RATN9)
        (flfinite? . g$11530$RATN9)
        (flexpt . g$11529$RATN9)
        (flexp . g$11528$RATN9)
        (fleven? . g$11527$RATN9)
        (fldiv0-and-mod0 . g$11526$RATN9)
        (fldiv0 . g$11525$RATN9)
        (fldiv-and-mod . g$11524$RATN9)
        (fldiv . g$11523$RATN9)
        (fldenominator . g$11522$RATN9)
        (flcos . g$11521$RATN9)
        (flceiling . g$11520$RATN9)
        (flatan . g$11519$RATN9)
        (flasin . g$11518$RATN9)
        (flacos . g$11517$RATN9)
        (flabs . g$11516$RATN9)
        (fl>? . g$11515$RATN9)
        (fl>=? . g$11514$RATN9)
        (fl=? . g$11513$RATN9)
        (fl<? . g$11512$RATN9)
        (fl<=? . g$11511$RATN9)
        (fl/ . g$11510$RATN9)
        (fl- . g$11509$RATN9)
        (fl+ . g$11508$RATN9)
        (fl* . g$11507$RATN9)
        (fixnum->flonum . g$11506$RATN9)
        (&no-nans . g$11299$RATN9)
        (&no-infinities . g$11298$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11880$RATN9
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$11709$RATN9)
        (string-ci-hash . g$11708$RATN9)
        (string-hash . g$11707$RATN9)
        (equal-hash . g$11706$RATN9)
        (hashtable-equivalence-function . g$11705$RATN9)
        (make-hashtable . g$11704$RATN9)
        (hashtable-hash-function . g$11703$RATN9)
        (make-eqv-hashtable . g$5985$RATN9)
        (make-eq-hashtable . g$5984$RATN9)
        (hashtable? . g$11702$RATN9)
        (hashtable-update! . g$5991$RATN9)
        (hashtable-size . g$5986$RATN9)
        (hashtable-set! . g$5988$RATN9)
        (hashtable-ref . g$5987$RATN9)
        (hashtable-mutable? . g$11701$RATN9)
        (hashtable-keys . g$11700$RATN9)
        (hashtable-entries . g$11699$RATN9)
        (hashtable-delete! . g$5989$RATN9)
        (hashtable-copy . g$11698$RATN9)
        (hashtable-contains? . g$5990$RATN9)
        (hashtable-clear! . g$5992$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11881$RATN9
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$11682$RATN9)
        (eof-object . g$11681$RATN9)
        (current-error-port . g$11680$RATN9)
        (current-output-port . g$11679$RATN9)
        (current-input-port . g$11678$RATN9)
        (output-port? . g$11677$RATN9)
        (input-port? . g$11676$RATN9)
        (utf-8-codec . g$11675$RATN9)
        (utf-16-codec . g$11674$RATN9)
        (transcoder-error-handling-mode . g$11673$RATN9)
        (transcoder-eol-style . g$11672$RATN9)
        (transcoder-codec . g$11671$RATN9)
        (transcoded-port . g$11670$RATN9)
        (textual-port? . g$11669$RATN9)
        (string->bytevector . g$11668$RATN9)
        (standard-output-port . g$11667$RATN9)
        (standard-input-port . g$11666$RATN9)
        (standard-error-port . g$11665$RATN9)
        (set-port-position! . g$11664$RATN9)
        (put-u8 . g$11663$RATN9)
        (put-string . g$11662$RATN9)
        (put-datum . g$11661$RATN9)
        (put-char . g$11660$RATN9)
        (put-bytevector . g$11659$RATN9)
        (port? . g$11658$RATN9)
        (port-transcoder . g$11657$RATN9)
        (port-position . g$11656$RATN9)
        (port-has-set-port-position!? . g$11655$RATN9)
        (port-has-port-position? . g$11654$RATN9)
        (port-eof? . g$11653$RATN9)
        (output-port-buffer-mode . g$11652$RATN9)
        (open-string-output-port . g$6916$RATN9)
        (open-string-input-port . g$11651$RATN9)
        (open-file-output-port . g$11650$RATN9)
        (open-file-input/output-port . g$11649$RATN9)
        (open-file-input-port . g$11648$RATN9)
        (open-bytevector-output-port . g$11647$RATN9)
        (open-bytevector-input-port . g$11646$RATN9)
        (native-transcoder . g$11645$RATN9)
        (native-eol-style . g$11644$RATN9)
        (make-transcoder . g$11643$RATN9)
        (latin-1-codec . g$11642$RATN9)
        (make-i/o-write-error . g$6773$RATN9)
        (make-i/o-read-error . g$6759$RATN9)
        (make-i/o-port-error . g$6878$RATN9)
        (make-i/o-invalid-position-error . g$6788$RATN9)
        (make-i/o-filename-error . g$6805$RATN9)
        (make-i/o-file-protection-error . g$6821$RATN9)
        (make-i/o-file-is-read-only-error . g$6835$RATN9)
        (make-i/o-file-does-not-exist-error . g$6863$RATN9)
        (make-i/o-file-already-exists-error . g$6849$RATN9)
        (make-i/o-error . g$6745$RATN9)
        (make-i/o-encoding-error . g$6909$RATN9)
        (make-i/o-decoding-error . g$6894$RATN9)
        (make-custom-textual-output-port . g$11641$RATN9)
        (make-custom-textual-input/output-port . g$11640$RATN9)
        (make-custom-textual-input-port . g$11639$RATN9)
        (make-custom-binary-output-port . g$11638$RATN9)
        (make-custom-binary-input/output-port . g$11637$RATN9)
        (make-custom-binary-input-port . g$11636$RATN9)
        (lookahead-u8 . g$11634$RATN9)
        (lookahead-char . g$11633$RATN9)
        (i/o-write-error? . g$6774$RATN9)
        (i/o-read-error? . g$6760$RATN9)
        (i/o-port-error? . g$6880$RATN9)
        (i/o-invalid-position-error? . g$6790$RATN9)
        (i/o-filename-error? . g$6807$RATN9)
        (i/o-file-protection-error? . g$6822$RATN9)
        (i/o-file-is-read-only-error? . g$6836$RATN9)
        (i/o-file-does-not-exist-error? . g$6864$RATN9)
        (i/o-file-already-exists-error? . g$6850$RATN9)
        (i/o-error? . g$6746$RATN9)
        (i/o-error-port . g$6881$RATN9)
        (i/o-error-filename . g$6808$RATN9)
        (i/o-encoding-error? . g$6911$RATN9)
        (i/o-encoding-error-char . g$6912$RATN9)
        (i/o-decoding-error? . g$6895$RATN9)
        (get-u8 . g$11632$RATN9)
        (get-string-n! . g$11631$RATN9)
        (get-string-n . g$11630$RATN9)
        (get-string-all . g$11629$RATN9)
        (get-line . g$11628$RATN9)
        (get-datum . g$11627$RATN9)
        (get-char . g$11626$RATN9)
        (get-bytevector-some . g$11625$RATN9)
        (get-bytevector-n! . g$11624$RATN9)
        (get-bytevector-n . g$11623$RATN9)
        (get-bytevector-all . g$11622$RATN9)
        (flush-output-port . g$11621$RATN9)
        (close-port . g$11620$RATN9)
        (call-with-string-output-port . g$11619$RATN9)
        (call-with-port . g$11618$RATN9)
        (call-with-bytevector-output-port . g$11617$RATN9)
        (bytevector->string . g$11616$RATN9)
        (buffer-mode? . g$11615$RATN9)
        (binary-port? . g$11614$RATN9)
        (&i/o-encoding . g$11297$RATN9)
        (&i/o-decoding . g$11296$RATN9)
        (&i/o-port . g$11295$RATN9)
        (&i/o-file-does-not-exist . g$11294$RATN9)
        (&i/o-file-already-exists . g$11293$RATN9)
        (&i/o-file-is-read-only . g$11292$RATN9)
        (&i/o-file-protection . g$11291$RATN9)
        (&i/o-filename . g$11290$RATN9)
        (&i/o-invalid-position . g$11289$RATN9)
        (&i/o-write . g$11288$RATN9)
        (&i/o-read . g$11287$RATN9)
        (&i/o . g$11286$RATN9)
        (error-handling-mode . g$11258$RATN9)
        (file-options . g$11257$RATN9)
        (buffer-mode . g$11256$RATN9)
        (eol-style . g$11255$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11882$RATN9
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$11599$RATN9)
        (enum-set=? . g$11598$RATN9)
        (enum-set-universe . g$11597$RATN9)
        (enum-set-union . g$11596$RATN9)
        (enum-set-subset? . g$11595$RATN9)
        (enum-set-projection . g$11594$RATN9)
        (enum-set-member? . g$11593$RATN9)
        (enum-set-intersection . g$11592$RATN9)
        (enum-set-indexer . g$11591$RATN9)
        (enum-set-difference . g$11590$RATN9)
        (enum-set-constructor . g$11589$RATN9)
        (enum-set-complement . g$11588$RATN9)
        (enum-set->list . g$11587$RATN9)
        (define-enumeration . g$11269$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11883$RATN9
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6423$RATN9)
        (warning? . g$6334$RATN9)
        (violation? . g$6376$RATN9)
        (undefined-violation? . g$6500$RATN9)
        (syntax-violation? . g$6484$RATN9)
        (syntax-violation-subform . g$6486$RATN9)
        (syntax-violation-form . g$6485$RATN9)
        (syntax-violation . g$8227$RATN9)
        (simple-conditions . g$11586$RATN9)
        (serious-condition? . g$6348$RATN9)
        (non-continuable-violation? . g$6438$RATN9)
        (message-condition? . g$6319$RATN9)
        (make-who-condition . g$6421$RATN9)
        (make-warning . g$6333$RATN9)
        (make-violation . g$6375$RATN9)
        (make-undefined-violation . g$6499$RATN9)
        (make-syntax-violation . g$6481$RATN9)
        (make-serious-condition . g$6347$RATN9)
        (make-non-continuable-violation . g$6437$RATN9)
        (make-message-condition . g$6317$RATN9)
        (make-lexical-violation . g$6465$RATN9)
        (make-irritants-condition . g$6404$RATN9)
        (make-implementation-restriction-violation . g$6451$RATN9)
        (make-error . g$6361$RATN9)
        (make-assertion-violation . g$6389$RATN9)
        (lexical-violation? . g$6466$RATN9)
        (irritants-condition? . g$6406$RATN9)
        (implementation-restriction-violation? . g$6452$RATN9)
        (error? . g$6362$RATN9)
        (condition-who . g$6424$RATN9)
        (condition-predicate . g$11585$RATN9)
        (condition-message . g$6320$RATN9)
        (condition-irritants . g$6407$RATN9)
        (condition-accessor . g$11584$RATN9)
        (condition . g$11583$RATN9)
        (assertion-violation? . g$6390$RATN9)
        (condition? . g$11582$RATN9)
        (&non-continuable . g$11285$RATN9)
        (&undefined . g$11284$RATN9)
        (&syntax . g$11283$RATN9)
        (&lexical . g$11282$RATN9)
        (&implementation-restriction . g$11281$RATN9)
        (&who . g$11279$RATN9)
        (&irritants . g$11278$RATN9)
        (&assertion . g$11277$RATN9)
        (&violation . g$11276$RATN9)
        (&error . g$11275$RATN9)
        (&serious . g$11274$RATN9)
        (&warning . g$11273$RATN9)
        (&message . g$11272$RATN9)
        (&condition . g$11271$RATN9)
        (define-condition-type . g$11270$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11884$RATN9
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$11721$RATN9)
        (record-type-uid . g$11720$RATN9)
        (record-type-sealed? . g$11719$RATN9)
        (record-type-parent . g$11718$RATN9)
        (record-type-opaque? . g$11717$RATN9)
        (record-type-name . g$11716$RATN9)
        (record-type-generative? . g$11715$RATN9)
        (record-type-field-names . g$11714$RATN9)
        (record-rtd . g$11713$RATN9)
        (record-field-mutable? . g$11712$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11885$RATN9
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$11728$RATN9)
        (record-predicate . g$11727$RATN9)
        (record-mutator . g$11726$RATN9)
        (record-constructor . g$11725$RATN9)
        (record-accessor . g$11724$RATN9)
        (make-record-type-descriptor . g$11723$RATN9)
        (make-record-constructor-descriptor . g$11722$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11886$RATN9
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11268$RATN9)
        (parent-rtd . g$11267$RATN9)
        (nongenerative . g$11266$RATN9)
        (opaque . g$11265$RATN9)
        (sealed . g$11264$RATN9)
        (protocol . g$11263$RATN9)
        (parent . g$11262$RATN9)
        (immutable . g$11261$RATN9)
        (mutable . g$11260$RATN9)
        (fields . g$11259$RATN9)
        (record-constructor-descriptor . g$11220$RATN9)
        (record-type-descriptor . g$11219$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6750$RATN9
      'g$11887$RATN9
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8105$RATN9)
        (&no-nans-rcd . g$11851$RATN9)
        (&no-nans-rtd . g$11850$RATN9)
        (&no-infinities-rcd . g$11849$RATN9)
        (&no-infinities-rtd . g$11848$RATN9)
        (&i/o-encoding-rcd . g$11847$RATN9)
        (&i/o-encoding-rtd . g$11846$RATN9)
        (&i/o-decoding-rcd . g$11845$RATN9)
        (&i/o-decoding-rtd . g$11844$RATN9)
        (&i/o-port-rcd . g$11843$RATN9)
        (&i/o-port-rtd . g$11842$RATN9)
        (&i/o-file-does-not-exist-rcd . g$11841$RATN9)
        (&i/o-file-does-not-exist-rtd . g$11840$RATN9)
        (&i/o-file-already-exists-rcd . g$11839$RATN9)
        (&i/o-file-already-exists-rtd . g$11838$RATN9)
        (&i/o-fie-is-read-only-rcd . g$11837$RATN9)
        (&i/o-fie-is-read-only-rtd . g$11836$RATN9)
        (&i/o-file-protection-rcd . g$11835$RATN9)
        (&i/o-file-protection-rtd . g$11834$RATN9)
        (&i/o-filename-rcd . g$11833$RATN9)
        (&i/o-filename-rtd . g$11832$RATN9)
        (&i/o-invalid-position-rcd . g$11831$RATN9)
        (&i/o-invalid-position-rtd . g$11830$RATN9)
        (&i/o-write-rcd . g$11829$RATN9)
        (&i/o-write-rtd . g$11828$RATN9)
        (&i/o-read-rcd . g$11827$RATN9)
        (&i/o-read-rtd . g$11826$RATN9)
        (&i/o-rcd . g$11825$RATN9)
        (&i/o-rtd . g$11824$RATN9)
        (&undefined-rcd . g$11823$RATN9)
        (&undefined-rtd . g$11822$RATN9)
        (&syntax-rcd . g$11821$RATN9)
        (&syntax-rtd . g$11820$RATN9)
        (&lexical-rcd . g$11819$RATN9)
        (&lexical-rtd . g$11818$RATN9)
        (&implementation-restriction-rcd . g$11817$RATN9)
        (&implementation-restriction-rtd . g$11816$RATN9)
        (&non-continuable-rcd . g$11815$RATN9)
        (&non-continuable-rtd . g$11814$RATN9)
        (&who-rcd . g$11813$RATN9)
        (&who-rtd . g$11812$RATN9)
        (&irritants-rcd . g$11811$RATN9)
        (&irritants-rtd . g$11810$RATN9)
        (&assertion-rcd . g$11809$RATN9)
        (&assertion-rtd . g$11808$RATN9)
        (&violation-rcd . g$11807$RATN9)
        (&violation-rtd . g$11806$RATN9)
        (&error-rcd . g$11805$RATN9)
        (&error-rtd . g$11804$RATN9)
        (&serious-rcd . g$11803$RATN9)
        (&serious-rtd . g$11802$RATN9)
        (&warning-rcd . g$11801$RATN9)
        (&warning-rtd . g$11800$RATN9)
        (&message-rcd . g$11799$RATN9)
        (&message-rtd . g$11798$RATN9)
        (&condition-rcd . g$11797$RATN9)
        (&condition-rtd . g$11796$RATN9)
        (library-letrec* . g$11795$RATN9)
        (annotation-stripped . g$11794$RATN9)
        (annotation-source . g$11793$RATN9)
        (annotation-expression . g$11792$RATN9)
        (annotation? . g$11791$RATN9)
        (read-annotated . g$11790$RATN9)
        (tanh . g$11789$RATN9)
        (cosh . g$11788$RATN9)
        (sinh . g$11787$RATN9)
        (make-guid . g$11786$RATN9)
        (unspecified? . g$11785$RATN9)
        (make-trace . g$11784$RATN9)
        (make-list . g$11783$RATN9)
        (last-pair . g$11782$RATN9)
        (load-r5rs . g$11781$RATN9)
        (license . g$11780$RATN9)
        (stacktrace . g$11779$RATN9)
        (ironscheme-build . g$11165$RATN9)
        (define-clr-class-internal . g$11778$RATN9)
        (clr-field-set!-internal . g$11777$RATN9)
        (clr-field-get-internal . g$11776$RATN9)
        (clr-cast-internal . g$11775$RATN9)
        (clr-call-internal . g$11774$RATN9)
        (clr-new-internal . g$11773$RATN9)
        (clr-new-array-internal . g$11772$RATN9)
        (clr-is-internal . g$11771$RATN9)
        (clr-reference-internal . g$11770$RATN9)
        (clr-using-internal . g$11769$RATN9)
        (clr-clear-usings-internal . g$11768$RATN9)
        (syntax-error . g$8224$RATN9)
        (syntax-dispatch . g$8100$RATN9)
        (compile-core . g$11767$RATN9)
        (eval-core . g$11766$RATN9)
        (set-symbol-value! . g$11765$RATN9)
        (symbol-value . g$11764$RATN9)
        (ungensym . g$11763$RATN9)
        (gensym . g$11762$RATN9)
        (void . g$11761$RATN9)
        (load-serialized-library . g$11760$RATN9)
        (serialize-library . g$11759$RATN9)
        (compile-system-libraries . g$11167$RATN9)
        (compile->closure . g$11169$RATN9)
        (compile . g$11168$RATN9)
        (load . g$11164$RATN9)
        (interaction-environment . g$8233$RATN9)
        (char-ready? . g$11758$RATN9)
        (string-upcase . g$11757$RATN9)
        (string-titlecase . g$11756$RATN9)
        (string-normalize-nfkd . g$11755$RATN9)
        (string-normalize-nfkc . g$11754$RATN9)
        (string-normalize-nfd . g$11753$RATN9)
        (string-normalize-nfc . g$11752$RATN9)
        (string-foldcase . g$11751$RATN9)
        (string-downcase . g$11750$RATN9)
        (string-ci>? . g$11749$RATN9)
        (string-ci>=? . g$11748$RATN9)
        (string-ci=? . g$11747$RATN9)
        (string-ci<? . g$11746$RATN9)
        (string-ci<=? . g$11745$RATN9)
        (char-whitespace? . g$11744$RATN9)
        (char-upper-case? . g$11743$RATN9)
        (char-title-case? . g$11742$RATN9)
        (char-numeric? . g$11741$RATN9)
        (char-lower-case? . g$11740$RATN9)
        (char-general-category . g$11739$RATN9)
        (char-upcase . g$11738$RATN9)
        (char-titlecase . g$11737$RATN9)
        (char-foldcase . g$11736$RATN9)
        (char-downcase . g$11735$RATN9)
        (char-ci>? . g$11734$RATN9)
        (char-ci>=? . g$11733$RATN9)
        (char-ci=? . g$11732$RATN9)
        (char-ci<? . g$11731$RATN9)
        (char-ci<=? . g$11730$RATN9)
        (char-alphabetic? . g$11729$RATN9)
        (variable-transformer-procedure . g$7837$RATN9)
        (variable-transformer? . g$7836$RATN9)
        (make-variable-transformer . g$7835$RATN9)
        (identifier? . g$8228$RATN9)
        (generate-temporaries . g$8220$RATN9)
        (free-identifier=? . g$8221$RATN9)
        (syntax->datum . g$8230$RATN9)
        (datum->syntax . g$8229$RATN9)
        (bound-identifier=? . g$8222$RATN9)
        (record-type-descriptor? . g$11728$RATN9)
        (record-predicate . g$11727$RATN9)
        (record-mutator . g$11726$RATN9)
        (record-constructor . g$11725$RATN9)
        (record-accessor . g$11724$RATN9)
        (make-record-type-descriptor . g$11723$RATN9)
        (make-record-constructor-descriptor . g$11722$RATN9)
        (record? . g$11721$RATN9)
        (record-type-uid . g$11720$RATN9)
        (record-type-sealed? . g$11719$RATN9)
        (record-type-parent . g$11718$RATN9)
        (record-type-opaque? . g$11717$RATN9)
        (record-type-name . g$11716$RATN9)
        (record-type-generative? . g$11715$RATN9)
        (record-type-field-names . g$11714$RATN9)
        (record-rtd . g$11713$RATN9)
        (record-field-mutable? . g$11712$RATN9)
        (delete-file . g$6018$RATN9)
        (file-exists? . g$6017$RATN9)
        (vector-sort! . g$11711$RATN9)
        (vector-sort . g$11710$RATN9)
        (list-sort . g$6525$RATN9)
        (symbol-hash . g$11709$RATN9)
        (string-ci-hash . g$11708$RATN9)
        (string-hash . g$11707$RATN9)
        (equal-hash . g$11706$RATN9)
        (hashtable-equivalence-function . g$11705$RATN9)
        (make-hashtable . g$11704$RATN9)
        (hashtable-hash-function . g$11703$RATN9)
        (make-eqv-hashtable . g$5985$RATN9)
        (make-eq-hashtable . g$5984$RATN9)
        (hashtable? . g$11702$RATN9)
        (hashtable-update! . g$5991$RATN9)
        (hashtable-size . g$5986$RATN9)
        (hashtable-set! . g$5988$RATN9)
        (hashtable-ref . g$5987$RATN9)
        (hashtable-mutable? . g$11701$RATN9)
        (hashtable-keys . g$11700$RATN9)
        (hashtable-entries . g$11699$RATN9)
        (hashtable-delete! . g$5989$RATN9)
        (hashtable-copy . g$11698$RATN9)
        (hashtable-contains? . g$5990$RATN9)
        (hashtable-clear! . g$5992$RATN9)
        (call-with-output-file . g$11697$RATN9)
        (call-with-input-file . g$11696$RATN9)
        (write-char . g$11695$RATN9)
        (write . g$11694$RATN9)
        (with-output-to-file . g$11693$RATN9)
        (with-input-from-file . g$11692$RATN9)
        (read-char . g$11691$RATN9)
        (read . g$11690$RATN9)
        (peek-char . g$11689$RATN9)
        (open-output-file . g$11688$RATN9)
        (open-input-file . g$11687$RATN9)
        (newline . g$11686$RATN9)
        (display . g$11685$RATN9)
        (close-output-port . g$11684$RATN9)
        (close-input-port . g$11683$RATN9)
        (eof-object? . g$11682$RATN9)
        (eof-object . g$11681$RATN9)
        (current-error-port . g$11680$RATN9)
        (current-output-port . g$11679$RATN9)
        (current-input-port . g$11678$RATN9)
        (output-port? . g$11677$RATN9)
        (input-port? . g$11676$RATN9)
        (utf-8-codec . g$11675$RATN9)
        (utf-16-codec . g$11674$RATN9)
        (transcoder-error-handling-mode . g$11673$RATN9)
        (transcoder-eol-style . g$11672$RATN9)
        (transcoder-codec . g$11671$RATN9)
        (transcoded-port . g$11670$RATN9)
        (textual-port? . g$11669$RATN9)
        (string->bytevector . g$11668$RATN9)
        (standard-output-port . g$11667$RATN9)
        (standard-input-port . g$11666$RATN9)
        (standard-error-port . g$11665$RATN9)
        (set-port-position! . g$11664$RATN9)
        (put-u8 . g$11663$RATN9)
        (put-string . g$11662$RATN9)
        (put-datum . g$11661$RATN9)
        (put-char . g$11660$RATN9)
        (put-bytevector . g$11659$RATN9)
        (port? . g$11658$RATN9)
        (port-transcoder . g$11657$RATN9)
        (port-position . g$11656$RATN9)
        (port-has-set-port-position!? . g$11655$RATN9)
        (port-has-port-position? . g$11654$RATN9)
        (port-eof? . g$11653$RATN9)
        (output-port-buffer-mode . g$11652$RATN9)
        (open-string-output-port . g$6916$RATN9)
        (open-string-input-port . g$11651$RATN9)
        (open-file-output-port . g$11650$RATN9)
        (open-file-input/output-port . g$11649$RATN9)
        (open-file-input-port . g$11648$RATN9)
        (open-bytevector-output-port . g$11647$RATN9)
        (open-bytevector-input-port . g$11646$RATN9)
        (native-transcoder . g$11645$RATN9)
        (native-eol-style . g$11644$RATN9)
        (make-transcoder . g$11643$RATN9)
        (latin-1-codec . g$11642$RATN9)
        (make-i/o-write-error . g$6773$RATN9)
        (make-i/o-read-error . g$6759$RATN9)
        (make-i/o-port-error . g$6878$RATN9)
        (make-i/o-invalid-position-error . g$6788$RATN9)
        (make-i/o-filename-error . g$6805$RATN9)
        (make-i/o-file-protection-error . g$6821$RATN9)
        (make-i/o-file-is-read-only-error . g$6835$RATN9)
        (make-i/o-file-does-not-exist-error . g$6863$RATN9)
        (make-i/o-file-already-exists-error . g$6849$RATN9)
        (make-i/o-error . g$6745$RATN9)
        (make-i/o-encoding-error . g$6909$RATN9)
        (make-i/o-decoding-error . g$6894$RATN9)
        (make-custom-textual-output-port . g$11641$RATN9)
        (make-custom-textual-input/output-port . g$11640$RATN9)
        (make-custom-textual-input-port . g$11639$RATN9)
        (make-custom-binary-output-port . g$11638$RATN9)
        (make-custom-binary-input/output-port . g$11637$RATN9)
        (make-custom-binary-input-port . g$11636$RATN9)
        (make-bytevector . g$11635$RATN9)
        (lookahead-u8 . g$11634$RATN9)
        (lookahead-char . g$11633$RATN9)
        (i/o-write-error? . g$6774$RATN9)
        (i/o-read-error? . g$6760$RATN9)
        (i/o-port-error? . g$6880$RATN9)
        (i/o-invalid-position-error? . g$6790$RATN9)
        (i/o-filename-error? . g$6807$RATN9)
        (i/o-file-protection-error? . g$6822$RATN9)
        (i/o-file-is-read-only-error? . g$6836$RATN9)
        (i/o-file-does-not-exist-error? . g$6864$RATN9)
        (i/o-file-already-exists-error? . g$6850$RATN9)
        (i/o-error? . g$6746$RATN9)
        (i/o-error-port . g$6881$RATN9)
        (i/o-error-filename . g$6808$RATN9)
        (i/o-encoding-error? . g$6911$RATN9)
        (i/o-encoding-error-char . g$6912$RATN9)
        (i/o-decoding-error? . g$6895$RATN9)
        (get-u8 . g$11632$RATN9)
        (get-string-n! . g$11631$RATN9)
        (get-string-n . g$11630$RATN9)
        (get-string-all . g$11629$RATN9)
        (get-line . g$11628$RATN9)
        (get-datum . g$11627$RATN9)
        (get-char . g$11626$RATN9)
        (get-bytevector-some . g$11625$RATN9)
        (get-bytevector-n! . g$11624$RATN9)
        (get-bytevector-n . g$11623$RATN9)
        (get-bytevector-all . g$11622$RATN9)
        (flush-output-port . g$11621$RATN9)
        (close-port . g$11620$RATN9)
        (call-with-string-output-port . g$11619$RATN9)
        (call-with-port . g$11618$RATN9)
        (call-with-bytevector-output-port . g$11617$RATN9)
        (bytevector->string . g$11616$RATN9)
        (buffer-mode? . g$11615$RATN9)
        (binary-port? . g$11614$RATN9)
        (scheme-report-environment . g$8211$RATN9)
        (quotient . g$6512$RATN9)
        (null-environment . g$8210$RATN9)
        (remainder . g$6513$RATN9)
        (modulo . g$6514$RATN9)
        (inexact->exact . g$11613$RATN9)
        (force . g$11612$RATN9)
        (exact->inexact . g$11611$RATN9)
        (exit . g$11610$RATN9)
        (command-line . g$11161$RATN9)
        (string-fill! . g$11609$RATN9)
        (string-set! . g$11608$RATN9)
        (set-cdr! . g$11607$RATN9)
        (set-car! . g$11606$RATN9)
        (remove . g$6098$RATN9)
        (remv . g$6099$RATN9)
        (remp . g$6084$RATN9)
        (remq . g$6100$RATN9)
        (partition . g$6083$RATN9)
        (memv . g$11605$RATN9)
        (memq . g$11604$RATN9)
        (memp . g$6090$RATN9)
        (member . g$6089$RATN9)
        (exists . g$6094$RATN9)
        (for-all . g$6093$RATN9)
        (fold-right . g$6097$RATN9)
        (fold-left . g$6096$RATN9)
        (find . g$6082$RATN9)
        (filter . g$6085$RATN9)
        (cons* . g$6095$RATN9)
        (assv . g$6086$RATN9)
        (assq . g$11603$RATN9)
        (assp . g$6088$RATN9)
        (assoc . g$6087$RATN9)
        (with-exception-handler . g$11602$RATN9)
        (raise-continuable . g$11601$RATN9)
        (raise . g$11600$RATN9)
        (eval . g$8213$RATN9)
        (environment . g$8209$RATN9)
        (make-enumeration . g$11599$RATN9)
        (enum-set=? . g$11598$RATN9)
        (enum-set-universe . g$11597$RATN9)
        (enum-set-union . g$11596$RATN9)
        (enum-set-subset? . g$11595$RATN9)
        (enum-set-projection . g$11594$RATN9)
        (enum-set-member? . g$11593$RATN9)
        (enum-set-intersection . g$11592$RATN9)
        (enum-set-indexer . g$11591$RATN9)
        (enum-set-difference . g$11590$RATN9)
        (enum-set-constructor . g$11589$RATN9)
        (enum-set-complement . g$11588$RATN9)
        (enum-set->list . g$11587$RATN9)
        (who-condition? . g$6423$RATN9)
        (warning? . g$6334$RATN9)
        (violation? . g$6376$RATN9)
        (undefined-violation? . g$6500$RATN9)
        (syntax-violation? . g$6484$RATN9)
        (syntax-violation-subform . g$6486$RATN9)
        (syntax-violation-form . g$6485$RATN9)
        (syntax-violation . g$8227$RATN9)
        (simple-conditions . g$11586$RATN9)
        (serious-condition? . g$6348$RATN9)
        (non-continuable-violation? . g$6438$RATN9)
        (message-condition? . g$6319$RATN9)
        (make-who-condition . g$6421$RATN9)
        (make-warning . g$6333$RATN9)
        (make-violation . g$6375$RATN9)
        (make-undefined-violation . g$6499$RATN9)
        (make-syntax-violation . g$6481$RATN9)
        (make-serious-condition . g$6347$RATN9)
        (make-non-continuable-violation . g$6437$RATN9)
        (make-message-condition . g$6317$RATN9)
        (make-lexical-violation . g$6465$RATN9)
        (make-irritants-condition . g$6404$RATN9)
        (make-implementation-restriction-violation . g$6451$RATN9)
        (make-error . g$6361$RATN9)
        (make-assertion-violation . g$6389$RATN9)
        (lexical-violation? . g$6466$RATN9)
        (irritants-condition? . g$6406$RATN9)
        (implementation-restriction-violation? . g$6452$RATN9)
        (error? . g$6362$RATN9)
        (condition-who . g$6424$RATN9)
        (condition-predicate . g$11585$RATN9)
        (condition-message . g$6320$RATN9)
        (condition-irritants . g$6407$RATN9)
        (condition-accessor . g$11584$RATN9)
        (condition . g$11583$RATN9)
        (assertion-violation? . g$6390$RATN9)
        (condition? . g$11582$RATN9)
        (utf32->string . g$11581$RATN9)
        (utf16->string . g$11580$RATN9)
        (utf8->string . g$11579$RATN9)
        (uint-list->bytevector . g$11578$RATN9)
        (u8-list->bytevector . g$11577$RATN9)
        (string->utf8 . g$11576$RATN9)
        (string->utf32 . g$11575$RATN9)
        (string->utf16 . g$11574$RATN9)
        (sint-list->bytevector . g$11573$RATN9)
        (native-endianness . g$6174$RATN9)
        (bytevector? . g$11572$RATN9)
        (bytevector=? . g$11571$RATN9)
        (bytevector-uint-set! . g$11570$RATN9)
        (bytevector-uint-ref . g$11569$RATN9)
        (bytevector-u8-set! . g$11568$RATN9)
        (bytevector-u8-ref . g$11567$RATN9)
        (bytevector-u64-set! . g$6195$RATN9)
        (bytevector-u64-ref . g$6191$RATN9)
        (bytevector-u64-native-set! . g$6197$RATN9)
        (bytevector-u64-native-ref . g$6193$RATN9)
        (bytevector-u32-set! . g$6187$RATN9)
        (bytevector-u32-ref . g$6183$RATN9)
        (bytevector-u32-native-set! . g$6189$RATN9)
        (bytevector-u32-native-ref . g$6185$RATN9)
        (bytevector-u16-set! . g$6179$RATN9)
        (bytevector-u16-ref . g$6175$RATN9)
        (bytevector-u16-native-set! . g$6181$RATN9)
        (bytevector-u16-native-ref . g$6177$RATN9)
        (bytevector-sint-set! . g$11566$RATN9)
        (bytevector-sint-ref . g$11565$RATN9)
        (bytevector-s8-set! . g$11564$RATN9)
        (bytevector-s8-ref . g$11563$RATN9)
        (bytevector-s64-set! . g$6196$RATN9)
        (bytevector-s64-ref . g$6192$RATN9)
        (bytevector-s64-native-set! . g$6198$RATN9)
        (bytevector-s64-native-ref . g$6194$RATN9)
        (bytevector-s32-set! . g$6188$RATN9)
        (bytevector-s32-ref . g$6184$RATN9)
        (bytevector-s32-native-set! . g$6190$RATN9)
        (bytevector-s32-native-ref . g$6186$RATN9)
        (bytevector-s16-set! . g$6180$RATN9)
        (bytevector-s16-ref . g$6176$RATN9)
        (bytevector-s16-native-set! . g$6182$RATN9)
        (bytevector-s16-native-ref . g$6178$RATN9)
        (bytevector-length . g$11562$RATN9)
        (bytevector-ieee-single-set! . g$11561$RATN9)
        (bytevector-ieee-single-ref . g$11560$RATN9)
        (bytevector-ieee-single-native-set! . g$6201$RATN9)
        (bytevector-ieee-single-native-ref . g$6199$RATN9)
        (bytevector-ieee-double-set! . g$11559$RATN9)
        (bytevector-ieee-double-ref . g$11558$RATN9)
        (bytevector-ieee-double-native-set! . g$6202$RATN9)
        (bytevector-ieee-double-native-ref . g$6200$RATN9)
        (bytevector-fill! . g$11557$RATN9)
        (bytevector-copy! . g$11556$RATN9)
        (bytevector-copy . g$11555$RATN9)
        (bytevector->uint-list . g$11554$RATN9)
        (bytevector->u8-list . g$11553$RATN9)
        (bytevector->sint-list . g$11552$RATN9)
        (no-nans-violation? . g$6731$RATN9)
        (no-infinities-violation? . g$6717$RATN9)
        (make-no-nans-violation . g$6730$RATN9)
        (make-no-infinities-violation . g$6716$RATN9)
        (real->flonum . g$11551$RATN9)
        (flzero? . g$11550$RATN9)
        (fltruncate . g$11549$RATN9)
        (fltan . g$11548$RATN9)
        (flsqrt . g$11547$RATN9)
        (flsin . g$11546$RATN9)
        (flround . g$11545$RATN9)
        (flpositive? . g$11544$RATN9)
        (flonum? . g$11543$RATN9)
        (flodd? . g$11542$RATN9)
        (flnumerator . g$11541$RATN9)
        (flnegative? . g$11540$RATN9)
        (flnan? . g$11539$RATN9)
        (flmod0 . g$11538$RATN9)
        (flmod . g$11537$RATN9)
        (flmin . g$11536$RATN9)
        (flmax . g$11535$RATN9)
        (fllog . g$11534$RATN9)
        (flinteger? . g$11533$RATN9)
        (flinfinite? . g$11532$RATN9)
        (flfloor . g$11531$RATN9)
        (flfinite? . g$11530$RATN9)
        (flexpt . g$11529$RATN9)
        (flexp . g$11528$RATN9)
        (fleven? . g$11527$RATN9)
        (fldiv0-and-mod0 . g$11526$RATN9)
        (fldiv0 . g$11525$RATN9)
        (fldiv-and-mod . g$11524$RATN9)
        (fldiv . g$11523$RATN9)
        (fldenominator . g$11522$RATN9)
        (flcos . g$11521$RATN9)
        (flceiling . g$11520$RATN9)
        (flatan . g$11519$RATN9)
        (flasin . g$11518$RATN9)
        (flacos . g$11517$RATN9)
        (flabs . g$11516$RATN9)
        (fl>? . g$11515$RATN9)
        (fl>=? . g$11514$RATN9)
        (fl=? . g$11513$RATN9)
        (fl<? . g$11512$RATN9)
        (fl<=? . g$11511$RATN9)
        (fl/ . g$11510$RATN9)
        (fl- . g$11509$RATN9)
        (fl+ . g$11508$RATN9)
        (fl* . g$11507$RATN9)
        (fixnum->flonum . g$11506$RATN9)
        (fxzero? . g$11505$RATN9)
        (fxxor . g$11504$RATN9)
        (fxrotate-bit-field . g$6662$RATN9)
        (fxreverse-bit-field . g$11503$RATN9)
        (fxpositive? . g$11502$RATN9)
        (fxodd? . g$11501$RATN9)
        (fxnot . g$11500$RATN9)
        (fxnegative? . g$11499$RATN9)
        (fxmod0 . g$11498$RATN9)
        (fxmod . g$11497$RATN9)
        (fxmin . g$11496$RATN9)
        (fxmax . g$11495$RATN9)
        (fxlength . g$11494$RATN9)
        (fxior . g$11493$RATN9)
        (fxif . g$6656$RATN9)
        (fxfirst-bit-set . g$11492$RATN9)
        (fxeven? . g$11491$RATN9)
        (fxdiv0-and-mod0 . g$11490$RATN9)
        (fxdiv0 . g$11489$RATN9)
        (fxdiv-and-mod . g$11488$RATN9)
        (fxdiv . g$11487$RATN9)
        (fxcopy-bit-field . g$6659$RATN9)
        (fxcopy-bit . g$6657$RATN9)
        (fxbit-set? . g$11486$RATN9)
        (fxbit-field . g$6658$RATN9)
        (fxbit-count . g$11485$RATN9)
        (fxarithmetic-shift-right . g$6661$RATN9)
        (fxarithmetic-shift-left . g$6660$RATN9)
        (fxarithmetic-shift . g$11484$RATN9)
        (fxand . g$11483$RATN9)
        (fx>? . g$11482$RATN9)
        (fx>=? . g$11481$RATN9)
        (fx=? . g$11480$RATN9)
        (fx<? . g$11479$RATN9)
        (fx<=? . g$11478$RATN9)
        (fx-/carry . g$11477$RATN9)
        (fx- . g$11476$RATN9)
        (fx+/carry . g$11475$RATN9)
        (fx+ . g$11474$RATN9)
        (fx*/carry . g$11473$RATN9)
        (fx* . g$11472$RATN9)
        (greatest-fixnum . g$11471$RATN9)
        (least-fixnum . g$11470$RATN9)
        (fixnum-width . g$11469$RATN9)
        (fixnum? . g$11468$RATN9)
        (bitwise-rotate-bit-field . g$6610$RATN9)
        (bitwise-reverse-bit-field . g$6611$RATN9)
        (bitwise-length . g$11467$RATN9)
        (bitwise-if . g$6604$RATN9)
        (bitwise-first-bit-set . g$11466$RATN9)
        (bitwise-copy-bit-field . g$6607$RATN9)
        (bitwise-copy-bit . g$6605$RATN9)
        (bitwise-bit-set? . g$11465$RATN9)
        (bitwise-bit-field . g$11464$RATN9)
        (bitwise-bit-count . g$11463$RATN9)
        (bitwise-xor . g$11462$RATN9)
        (bitwise-ior . g$11461$RATN9)
        (bitwise-and . g$11460$RATN9)
        (bitwise-not . g$11459$RATN9)
        (bitwise-arithmetic-shift-right . g$6609$RATN9)
        (bitwise-arithmetic-shift-left . g$6608$RATN9)
        (bitwise-arithmetic-shift . g$11458$RATN9)
        (zero? . g$11457$RATN9)
        (vector? . g$11456$RATN9)
        (vector-set! . g$11455$RATN9)
        (vector-ref . g$11454$RATN9)
        (vector-map . g$11453$RATN9)
        (vector-length . g$11452$RATN9)
        (vector-for-each . g$11451$RATN9)
        (vector-fill! . g$11450$RATN9)
        (vector->list . g$11449$RATN9)
        (vector . g$11448$RATN9)
        (values . g$11447$RATN9)
        (truncate . g$11446$RATN9)
        (tan . g$11445$RATN9)
        (symbol? . g$11444$RATN9)
        (symbol=? . g$11443$RATN9)
        (symbol->string . g$11442$RATN9)
        (substring . g$11441$RATN9)
        (string? . g$11440$RATN9)
        (string>? . g$11439$RATN9)
        (string>=? . g$11438$RATN9)
        (string=? . g$11437$RATN9)
        (string<? . g$11436$RATN9)
        (string<=? . g$11435$RATN9)
        (string-ref . g$11434$RATN9)
        (string-length . g$11433$RATN9)
        (string-for-each . g$11432$RATN9)
        (string-copy . g$11431$RATN9)
        (string-append . g$11430$RATN9)
        (string->symbol . g$11429$RATN9)
        (string->number . g$11428$RATN9)
        (string->list . g$11427$RATN9)
        (string . g$11426$RATN9)
        (sqrt . g$11425$RATN9)
        (sin . g$11424$RATN9)
        (round . g$11423$RATN9)
        (reverse . g$11422$RATN9)
        (real? . g$11421$RATN9)
        (real-valued? . g$11420$RATN9)
        (real-part . g$11419$RATN9)
        (rationalize . g$5635$RATN9)
        (rational? . g$11418$RATN9)
        (rational-valued? . g$11417$RATN9)
        (procedure? . g$11416$RATN9)
        (positive? . g$11415$RATN9)
        (pair? . g$11414$RATN9)
        (odd? . g$11413$RATN9)
        (numerator . g$11412$RATN9)
        (number? . g$11411$RATN9)
        (number->string . g$11410$RATN9)
        (null? . g$11409$RATN9)
        (not . g$11408$RATN9)
        (negative? . g$11407$RATN9)
        (nan? . g$11406$RATN9)
        (min . g$11405$RATN9)
        (max . g$11404$RATN9)
        (map . g$11403$RATN9)
        (make-vector . g$11402$RATN9)
        (make-string . g$11401$RATN9)
        (make-rectangular . g$11400$RATN9)
        (make-polar . g$11399$RATN9)
        (magnitude . g$11398$RATN9)
        (log . g$11397$RATN9)
        (list? . g$11396$RATN9)
        (list-tail . g$11395$RATN9)
        (list-ref . g$11394$RATN9)
        (list->vector . g$11393$RATN9)
        (list->string . g$11392$RATN9)
        (list . g$11391$RATN9)
        (length . g$11390$RATN9)
        (lcm . g$11389$RATN9)
        (integer? . g$11388$RATN9)
        (integer-valued? . g$11387$RATN9)
        (integer->char . g$11386$RATN9)
        (infinite? . g$11385$RATN9)
        (inexact? . g$11384$RATN9)
        (inexact . g$11383$RATN9)
        (imag-part . g$11382$RATN9)
        (gcd . g$11381$RATN9)
        (for-each . g$11380$RATN9)
        (floor . g$11379$RATN9)
        (finite? . g$11378$RATN9)
        (expt . g$11377$RATN9)
        (exp . g$11376$RATN9)
        (exact? . g$11375$RATN9)
        (exact-integer-sqrt . g$11374$RATN9)
        (exact . g$11373$RATN9)
        (even? . g$11372$RATN9)
        (error . g$11371$RATN9)
        (eqv? . g$11370$RATN9)
        (equal? . g$11369$RATN9)
        (eq? . g$11368$RATN9)
        (dynamic-wind . g$11367$RATN9)
        (div0-and-mod0 . g$11366$RATN9)
        (mod0 . g$11365$RATN9)
        (div0 . g$11364$RATN9)
        (div-and-mod . g$11363$RATN9)
        (mod . g$11362$RATN9)
        (div . g$11361$RATN9)
        (denominator . g$11360$RATN9)
        (cos . g$11359$RATN9)
        (cons . g$11358$RATN9)
        (complex? . g$11357$RATN9)
        (char? . g$11356$RATN9)
        (char>? . g$11355$RATN9)
        (char>=? . g$11354$RATN9)
        (char=? . g$11353$RATN9)
        (char<? . g$11352$RATN9)
        (char<=? . g$11351$RATN9)
        (char->integer . g$11350$RATN9)
        (ceiling . g$11349$RATN9)
        (call-with-values . g$11348$RATN9)
        (call/cc . g$11347$RATN9)
        (call-with-current-continuation . g$11346$RATN9)
        (cddddr . g$5634$RATN9)
        (cdddar . g$5633$RATN9)
        (cddadr . g$5632$RATN9)
        (cddaar . g$5631$RATN9)
        (cdaddr . g$5630$RATN9)
        (cdadar . g$5629$RATN9)
        (cdaadr . g$5628$RATN9)
        (cdaaar . g$5627$RATN9)
        (cadddr . g$5626$RATN9)
        (caddar . g$5625$RATN9)
        (cadadr . g$5624$RATN9)
        (cadaar . g$5623$RATN9)
        (caaddr . g$5622$RATN9)
        (caadar . g$5621$RATN9)
        (caaadr . g$5620$RATN9)
        (caaaar . g$5619$RATN9)
        (cdddr . g$5618$RATN9)
        (cddar . g$5617$RATN9)
        (cdadr . g$5616$RATN9)
        (cdaar . g$5615$RATN9)
        (caddr . g$5614$RATN9)
        (cadar . g$5613$RATN9)
        (caadr . g$5612$RATN9)
        (caaar . g$5611$RATN9)
        (cddr . g$5610$RATN9)
        (cdar . g$5609$RATN9)
        (cadr . g$5608$RATN9)
        (caar . g$5607$RATN9)
        (cdr . g$11345$RATN9)
        (car . g$11344$RATN9)
        (boolean? . g$11343$RATN9)
        (boolean=? . g$11342$RATN9)
        (atan . g$11341$RATN9)
        (assertion-violation . g$11340$RATN9)
        (asin . g$11339$RATN9)
        (apply . g$11338$RATN9)
        (append . g$11337$RATN9)
        (angle . g$11336$RATN9)
        (acos . g$11335$RATN9)
        (abs . g$11334$RATN9)
        (/ . g$11333$RATN9)
        (* . g$11332$RATN9)
        (- . g$11331$RATN9)
        (+ . g$11330$RATN9)
        (>= . g$11329$RATN9)
        (> . g$11328$RATN9)
        (= . g$11327$RATN9)
        (<= . g$11326$RATN9)
        (< . g$11325$RATN9)
        (make-record-printer . g$11324$RATN9)
        (eqv-hash . g$11323$RATN9)
        (eq-hash . g$11322$RATN9)
        (reverse! . g$11321$RATN9)
        (load/args . g$11163$RATN9)
        (printf . g$6925$RATN9)
        (fprintf . g$6926$RATN9)
        (format . g$6927$RATN9)
        (get-arity . g$11320$RATN9)
        (gc-collect . g$11319$RATN9)
        (clr-type? . g$11318$RATN9)
        (get-clr-type . g$11317$RATN9)
        (get-command-line . g$11316$RATN9)
        (vector-append . g$11315$RATN9)
        (vector-filter . g$11314$RATN9)
        (vector-reverse! . g$11313$RATN9)
        (vector-contains? . g$11312$RATN9)
        (vector-index-of . g$11311$RATN9)
        (vector-copy . g$11310$RATN9)
        (vector-binary-search . g$11309$RATN9)
        (get-output-string . g$11308$RATN9)
        (open-output-string . g$11307$RATN9)
        (open-input-string . g$11306$RATN9)
        (string-format . g$11305$RATN9)
        (trace-printer . g$11160$RATN9)
        (make-traced-procedure . g$11304$RATN9)
        (make-traced-macro . g$6946$RATN9)
        (pmap . g$11303$RATN9)
        (time-it . g$11302$RATN9)
        (make-parameter . g$6951$RATN9)
        (library-locator . g$11301$RATN9)
        (get-library-paths . g$11300$RATN9)
        (environment-symbols . g$8207$RATN9)
        (interaction-environment-symbols . g$8206$RATN9)
        (library-path . g$7376$RATN9)
        (library-extensions . g$7377$RATN9)
        (installed-libraries . g$7397$RATN9)
        (expand . g$8212$RATN9)
        (&no-nans . g$11299$RATN9)
        (&no-infinities . g$11298$RATN9)
        (&i/o-encoding . g$11297$RATN9)
        (&i/o-decoding . g$11296$RATN9)
        (&i/o-port . g$11295$RATN9)
        (&i/o-file-does-not-exist . g$11294$RATN9)
        (&i/o-file-already-exists . g$11293$RATN9)
        (&i/o-file-is-read-only . g$11292$RATN9)
        (&i/o-file-protection . g$11291$RATN9)
        (&i/o-filename . g$11290$RATN9)
        (&i/o-invalid-position . g$11289$RATN9)
        (&i/o-write . g$11288$RATN9)
        (&i/o-read . g$11287$RATN9)
        (&i/o . g$11286$RATN9)
        (&non-continuable . g$11285$RATN9)
        (&undefined . g$11284$RATN9)
        (&syntax . g$11283$RATN9)
        (&lexical . g$11282$RATN9)
        (&implementation-restriction . g$11281$RATN9)
        (&non . g$11280$RATN9)
        (&who . g$11279$RATN9)
        (&irritants . g$11278$RATN9)
        (&assertion . g$11277$RATN9)
        (&violation . g$11276$RATN9)
        (&error . g$11275$RATN9)
        (&serious . g$11274$RATN9)
        (&warning . g$11273$RATN9)
        (&message . g$11272$RATN9)
        (&condition . g$11271$RATN9)
        (define-condition-type . g$11270$RATN9)
        (define-enumeration . g$11269$RATN9)
        (define-record-type . g$11268$RATN9)
        (parent-rtd . g$11267$RATN9)
        (nongenerative . g$11266$RATN9)
        (opaque . g$11265$RATN9)
        (sealed . g$11264$RATN9)
        (protocol . g$11263$RATN9)
        (parent . g$11262$RATN9)
        (immutable . g$11261$RATN9)
        (mutable . g$11260$RATN9)
        (fields . g$11259$RATN9)
        (error-handling-mode . g$11258$RATN9)
        (file-options . g$11257$RATN9)
        (buffer-mode . g$11256$RATN9)
        (eol-style . g$11255$RATN9)
        (guard . g$11254$RATN9)
        (trace-letrec-syntax . g$11253$RATN9)
        (trace-let-syntax . g$11252$RATN9)
        (trace-define-syntax . g$11251$RATN9)
        (trace-define . g$11250$RATN9)
        (trace-lambda . g$11249$RATN9)
        (unsyntax-splicing . g$11248$RATN9)
        (unsyntax . g$11247$RATN9)
        (unquote-splicing . g$11246$RATN9)
        (unquote . g$11245$RATN9)
        (_ . g$11244$RATN9)
        (else . g$11243$RATN9)
        (=> . g$11242$RATN9)
        (... . g$11241$RATN9)
        (assert . g$11240$RATN9)
        (endianness . g$11239$RATN9)
        (delay . g$11238$RATN9)
        (time . g$11237$RATN9)
        (or . g$11236$RATN9)
        (and . g$11235$RATN9)
        (do . g$11234$RATN9)
        (cond . g$11233$RATN9)
        (let* . g$11232$RATN9)
        (let . g$11231$RATN9)
        (identifier-syntax . g$11230$RATN9)
        (with-syntax . g$11229$RATN9)
        (quasisyntax . g$11228$RATN9)
        (quasiquote . g$11227$RATN9)
        (syntax-rules . g$11226$RATN9)
        (include-into . g$11225$RATN9)
        (include . g$11224$RATN9)
        (define-struct . g$11223$RATN9)
        (let-values . g$11222$RATN9)
        (let*-values . g$11221$RATN9)
        (record-constructor-descriptor . g$11220$RATN9)
        (record-type-descriptor . g$11219$RATN9)
        (fluid-let-syntax . g$11218$RATN9)
        (case . g$11217$RATN9)
        (parameterize . g$11216$RATN9)
        (unless . g$11215$RATN9)
        (when . g$11214$RATN9)
        (if . g$11213$RATN9)
        (letrec* . g$11212$RATN9)
        (letrec . g$11211$RATN9)
        (type-descriptor . g$11210$RATN9)
        (case-lambda . g$11209$RATN9)
        (lambda . g$11208$RATN9)
        (syntax . g$11207$RATN9)
        (syntax-case . g$11206$RATN9)
        (quote . g$11205$RATN9)
        (foreign-call . g$11204$RATN9)
        (letrec-syntax . g$11203$RATN9)
        (let-syntax . g$11202$RATN9)
        (set! . g$11201$RATN9)
        (import . g$11200$RATN9)
        (library . g$11199$RATN9)
        (begin . g$11198$RATN9)
        (module . g$11197$RATN9)
        (define-syntax . g$11196$RATN9)
        (define . g$11195$RATN9))
      '((g$8105$RATN9 core-prim . ellipsis-map)
        (g$11851$RATN9 core-prim . &no-nans-rcd)
        (g$11850$RATN9 core-prim . &no-nans-rtd)
        (g$11849$RATN9 core-prim . &no-infinities-rcd)
        (g$11848$RATN9 core-prim . &no-infinities-rtd)
        (g$11847$RATN9 core-prim . &i/o-encoding-rcd)
        (g$11846$RATN9 core-prim . &i/o-encoding-rtd)
        (g$11845$RATN9 core-prim . &i/o-decoding-rcd)
        (g$11844$RATN9 core-prim . &i/o-decoding-rtd)
        (g$11843$RATN9 core-prim . &i/o-port-rcd)
        (g$11842$RATN9 core-prim . &i/o-port-rtd)
        (g$11841$RATN9 core-prim . &i/o-file-does-not-exist-rcd)
        (g$11840$RATN9 core-prim . &i/o-file-does-not-exist-rtd)
        (g$11839$RATN9 core-prim . &i/o-file-already-exists-rcd)
        (g$11838$RATN9 core-prim . &i/o-file-already-exists-rtd)
        (g$11837$RATN9 core-prim . &i/o-fie-is-read-only-rcd)
        (g$11836$RATN9 core-prim . &i/o-fie-is-read-only-rtd)
        (g$11835$RATN9 core-prim . &i/o-file-protection-rcd)
        (g$11834$RATN9 core-prim . &i/o-file-protection-rtd)
        (g$11833$RATN9 core-prim . &i/o-filename-rcd)
        (g$11832$RATN9 core-prim . &i/o-filename-rtd)
        (g$11831$RATN9 core-prim . &i/o-invalid-position-rcd)
        (g$11830$RATN9 core-prim . &i/o-invalid-position-rtd)
        (g$11829$RATN9 core-prim . &i/o-write-rcd)
        (g$11828$RATN9 core-prim . &i/o-write-rtd)
        (g$11827$RATN9 core-prim . &i/o-read-rcd)
        (g$11826$RATN9 core-prim . &i/o-read-rtd)
        (g$11825$RATN9 core-prim . &i/o-rcd)
        (g$11824$RATN9 core-prim . &i/o-rtd)
        (g$11823$RATN9 core-prim . &undefined-rcd)
        (g$11822$RATN9 core-prim . &undefined-rtd)
        (g$11821$RATN9 core-prim . &syntax-rcd)
        (g$11820$RATN9 core-prim . &syntax-rtd)
        (g$11819$RATN9 core-prim . &lexical-rcd)
        (g$11818$RATN9 core-prim . &lexical-rtd)
        (g$11817$RATN9 core-prim . &implementation-restriction-rcd)
        (g$11816$RATN9 core-prim . &implementation-restriction-rtd)
        (g$11815$RATN9 core-prim . &non-continuable-rcd)
        (g$11814$RATN9 core-prim . &non-continuable-rtd)
        (g$11813$RATN9 core-prim . &who-rcd)
        (g$11812$RATN9 core-prim . &who-rtd)
        (g$11811$RATN9 core-prim . &irritants-rcd)
        (g$11810$RATN9 core-prim . &irritants-rtd)
        (g$11809$RATN9 core-prim . &assertion-rcd)
        (g$11808$RATN9 core-prim . &assertion-rtd)
        (g$11807$RATN9 core-prim . &violation-rcd)
        (g$11806$RATN9 core-prim . &violation-rtd)
        (g$11805$RATN9 core-prim . &error-rcd)
        (g$11804$RATN9 core-prim . &error-rtd)
        (g$11803$RATN9 core-prim . &serious-rcd)
        (g$11802$RATN9 core-prim . &serious-rtd)
        (g$11801$RATN9 core-prim . &warning-rcd)
        (g$11800$RATN9 core-prim . &warning-rtd)
        (g$11799$RATN9 core-prim . &message-rcd)
        (g$11798$RATN9 core-prim . &message-rtd)
        (g$11797$RATN9 core-prim . &condition-rcd)
        (g$11796$RATN9 core-prim . &condition-rtd)
        (g$11795$RATN9 core-prim . library-letrec*)
        (g$11794$RATN9 core-prim . annotation-stripped)
        (g$11793$RATN9 core-prim . annotation-source)
        (g$11792$RATN9 core-prim . annotation-expression)
        (g$11791$RATN9 core-prim . annotation?)
        (g$11790$RATN9 core-prim . read-annotated)
        (g$11789$RATN9 core-prim . tanh)
        (g$11788$RATN9 core-prim . cosh)
        (g$11787$RATN9 core-prim . sinh)
        (g$11786$RATN9 core-prim . make-guid)
        (g$11785$RATN9 core-prim . unspecified?)
        (g$11784$RATN9 core-prim . make-trace)
        (g$11783$RATN9 core-prim . make-list)
        (g$11782$RATN9 core-prim . last-pair)
        (g$11781$RATN9 core-prim . load-r5rs)
        (g$11780$RATN9 core-prim . license)
        (g$11779$RATN9 core-prim . stacktrace)
        (g$11165$RATN9 core-prim . ironscheme-build)
        (g$11778$RATN9 core-prim . define-clr-class-internal)
        (g$11777$RATN9 core-prim . clr-field-set!-internal)
        (g$11776$RATN9 core-prim . clr-field-get-internal)
        (g$11775$RATN9 core-prim . clr-cast-internal)
        (g$11774$RATN9 core-prim . clr-call-internal)
        (g$11773$RATN9 core-prim . clr-new-internal)
        (g$11772$RATN9 core-prim . clr-new-array-internal)
        (g$11771$RATN9 core-prim . clr-is-internal)
        (g$11770$RATN9 core-prim . clr-reference-internal)
        (g$11769$RATN9 core-prim . clr-using-internal)
        (g$11768$RATN9 core-prim . clr-clear-usings-internal)
        (g$8224$RATN9 core-prim . syntax-error)
        (g$8100$RATN9 core-prim . syntax-dispatch)
        (g$11767$RATN9 core-prim . compile-core)
        (g$11766$RATN9 core-prim . eval-core)
        (g$11765$RATN9 core-prim . set-symbol-value!)
        (g$11764$RATN9 core-prim . symbol-value)
        (g$11763$RATN9 core-prim . ungensym)
        (g$11762$RATN9 core-prim . gensym)
        (g$11761$RATN9 core-prim . void)
        (g$11760$RATN9 core-prim . load-serialized-library)
        (g$11759$RATN9 core-prim . serialize-library)
        (g$11167$RATN9 core-prim . compile-system-libraries)
        (g$11169$RATN9 core-prim . compile->closure)
        (g$11168$RATN9 core-prim . compile)
        (g$11164$RATN9 core-prim . load)
        (g$8233$RATN9 core-prim . interaction-environment)
        (g$11758$RATN9 core-prim . char-ready?)
        (g$11757$RATN9 core-prim . string-upcase)
        (g$11756$RATN9 core-prim . string-titlecase)
        (g$11755$RATN9 core-prim . string-normalize-nfkd)
        (g$11754$RATN9 core-prim . string-normalize-nfkc)
        (g$11753$RATN9 core-prim . string-normalize-nfd)
        (g$11752$RATN9 core-prim . string-normalize-nfc)
        (g$11751$RATN9 core-prim . string-foldcase)
        (g$11750$RATN9 core-prim . string-downcase)
        (g$11749$RATN9 core-prim . string-ci>?)
        (g$11748$RATN9 core-prim . string-ci>=?)
        (g$11747$RATN9 core-prim . string-ci=?)
        (g$11746$RATN9 core-prim . string-ci<?)
        (g$11745$RATN9 core-prim . string-ci<=?)
        (g$11744$RATN9 core-prim . char-whitespace?)
        (g$11743$RATN9 core-prim . char-upper-case?)
        (g$11742$RATN9 core-prim . char-title-case?)
        (g$11741$RATN9 core-prim . char-numeric?)
        (g$11740$RATN9 core-prim . char-lower-case?)
        (g$11739$RATN9 core-prim . char-general-category)
        (g$11738$RATN9 core-prim . char-upcase)
        (g$11737$RATN9 core-prim . char-titlecase)
        (g$11736$RATN9 core-prim . char-foldcase)
        (g$11735$RATN9 core-prim . char-downcase)
        (g$11734$RATN9 core-prim . char-ci>?)
        (g$11733$RATN9 core-prim . char-ci>=?)
        (g$11732$RATN9 core-prim . char-ci=?)
        (g$11731$RATN9 core-prim . char-ci<?)
        (g$11730$RATN9 core-prim . char-ci<=?)
        (g$11729$RATN9 core-prim . char-alphabetic?)
        (g$7837$RATN9 core-prim . variable-transformer-procedure)
        (g$7836$RATN9 core-prim . variable-transformer?)
        (g$7835$RATN9 core-prim . make-variable-transformer)
        (g$8228$RATN9 core-prim . identifier?)
        (g$8220$RATN9 core-prim . generate-temporaries)
        (g$8221$RATN9 core-prim . free-identifier=?)
        (g$8230$RATN9 core-prim . syntax->datum)
        (g$8229$RATN9 core-prim . datum->syntax)
        (g$8222$RATN9 core-prim . bound-identifier=?)
        (g$11728$RATN9 core-prim . record-type-descriptor?)
        (g$11727$RATN9 core-prim . record-predicate)
        (g$11726$RATN9 core-prim . record-mutator)
        (g$11725$RATN9 core-prim . record-constructor)
        (g$11724$RATN9 core-prim . record-accessor)
        (g$11723$RATN9 core-prim . make-record-type-descriptor)
        (g$11722$RATN9 core-prim . make-record-constructor-descriptor)
        (g$11721$RATN9 core-prim . record?)
        (g$11720$RATN9 core-prim . record-type-uid)
        (g$11719$RATN9 core-prim . record-type-sealed?)
        (g$11718$RATN9 core-prim . record-type-parent)
        (g$11717$RATN9 core-prim . record-type-opaque?)
        (g$11716$RATN9 core-prim . record-type-name)
        (g$11715$RATN9 core-prim . record-type-generative?)
        (g$11714$RATN9 core-prim . record-type-field-names)
        (g$11713$RATN9 core-prim . record-rtd)
        (g$11712$RATN9 core-prim . record-field-mutable?)
        (g$6018$RATN9 core-prim . delete-file)
        (g$6017$RATN9 core-prim . file-exists?)
        (g$11711$RATN9 core-prim . vector-sort!)
        (g$11710$RATN9 core-prim . vector-sort)
        (g$6525$RATN9 core-prim . list-sort)
        (g$11709$RATN9 core-prim . symbol-hash)
        (g$11708$RATN9 core-prim . string-ci-hash)
        (g$11707$RATN9 core-prim . string-hash)
        (g$11706$RATN9 core-prim . equal-hash)
        (g$11705$RATN9 core-prim . hashtable-equivalence-function)
        (g$11704$RATN9 core-prim . make-hashtable)
        (g$11703$RATN9 core-prim . hashtable-hash-function)
        (g$5985$RATN9 core-prim . make-eqv-hashtable)
        (g$5984$RATN9 core-prim . make-eq-hashtable)
        (g$11702$RATN9 core-prim . hashtable?)
        (g$5991$RATN9 core-prim . hashtable-update!)
        (g$5986$RATN9 core-prim . hashtable-size)
        (g$5988$RATN9 core-prim . hashtable-set!)
        (g$5987$RATN9 core-prim . hashtable-ref)
        (g$11701$RATN9 core-prim . hashtable-mutable?)
        (g$11700$RATN9 core-prim . hashtable-keys)
        (g$11699$RATN9 core-prim . hashtable-entries)
        (g$5989$RATN9 core-prim . hashtable-delete!)
        (g$11698$RATN9 core-prim . hashtable-copy)
        (g$5990$RATN9 core-prim . hashtable-contains?)
        (g$5992$RATN9 core-prim . hashtable-clear!)
        (g$11697$RATN9 core-prim . call-with-output-file)
        (g$11696$RATN9 core-prim . call-with-input-file)
        (g$11695$RATN9 core-prim . write-char)
        (g$11694$RATN9 core-prim . write)
        (g$11693$RATN9 core-prim . with-output-to-file)
        (g$11692$RATN9 core-prim . with-input-from-file)
        (g$11691$RATN9 core-prim . read-char)
        (g$11690$RATN9 core-prim . read)
        (g$11689$RATN9 core-prim . peek-char)
        (g$11688$RATN9 core-prim . open-output-file)
        (g$11687$RATN9 core-prim . open-input-file)
        (g$11686$RATN9 core-prim . newline)
        (g$11685$RATN9 core-prim . display)
        (g$11684$RATN9 core-prim . close-output-port)
        (g$11683$RATN9 core-prim . close-input-port)
        (g$11682$RATN9 core-prim . eof-object?)
        (g$11681$RATN9 core-prim . eof-object)
        (g$11680$RATN9 core-prim . current-error-port)
        (g$11679$RATN9 core-prim . current-output-port)
        (g$11678$RATN9 core-prim . current-input-port)
        (g$11677$RATN9 core-prim . output-port?)
        (g$11676$RATN9 core-prim . input-port?)
        (g$11675$RATN9 core-prim . utf-8-codec)
        (g$11674$RATN9 core-prim . utf-16-codec)
        (g$11673$RATN9 core-prim . transcoder-error-handling-mode)
        (g$11672$RATN9 core-prim . transcoder-eol-style)
        (g$11671$RATN9 core-prim . transcoder-codec)
        (g$11670$RATN9 core-prim . transcoded-port)
        (g$11669$RATN9 core-prim . textual-port?)
        (g$11668$RATN9 core-prim . string->bytevector)
        (g$11667$RATN9 core-prim . standard-output-port)
        (g$11666$RATN9 core-prim . standard-input-port)
        (g$11665$RATN9 core-prim . standard-error-port)
        (g$11664$RATN9 core-prim . set-port-position!)
        (g$11663$RATN9 core-prim . put-u8)
        (g$11662$RATN9 core-prim . put-string)
        (g$11661$RATN9 core-prim . put-datum)
        (g$11660$RATN9 core-prim . put-char)
        (g$11659$RATN9 core-prim . put-bytevector)
        (g$11658$RATN9 core-prim . port?)
        (g$11657$RATN9 core-prim . port-transcoder)
        (g$11656$RATN9 core-prim . port-position)
        (g$11655$RATN9 core-prim . port-has-set-port-position!?)
        (g$11654$RATN9 core-prim . port-has-port-position?)
        (g$11653$RATN9 core-prim . port-eof?)
        (g$11652$RATN9 core-prim . output-port-buffer-mode)
        (g$6916$RATN9 core-prim . open-string-output-port)
        (g$11651$RATN9 core-prim . open-string-input-port)
        (g$11650$RATN9 core-prim . open-file-output-port)
        (g$11649$RATN9 core-prim . open-file-input/output-port)
        (g$11648$RATN9 core-prim . open-file-input-port)
        (g$11647$RATN9 core-prim . open-bytevector-output-port)
        (g$11646$RATN9 core-prim . open-bytevector-input-port)
        (g$11645$RATN9 core-prim . native-transcoder)
        (g$11644$RATN9 core-prim . native-eol-style)
        (g$11643$RATN9 core-prim . make-transcoder)
        (g$11642$RATN9 core-prim . latin-1-codec)
        (g$6773$RATN9 core-prim . make-i/o-write-error)
        (g$6759$RATN9 core-prim . make-i/o-read-error)
        (g$6878$RATN9 core-prim . make-i/o-port-error)
        (g$6788$RATN9 core-prim . make-i/o-invalid-position-error)
        (g$6805$RATN9 core-prim . make-i/o-filename-error)
        (g$6821$RATN9 core-prim . make-i/o-file-protection-error)
        (g$6835$RATN9 core-prim . make-i/o-file-is-read-only-error)
        (g$6863$RATN9 core-prim . make-i/o-file-does-not-exist-error)
        (g$6849$RATN9 core-prim . make-i/o-file-already-exists-error)
        (g$6745$RATN9 core-prim . make-i/o-error)
        (g$6909$RATN9 core-prim . make-i/o-encoding-error)
        (g$6894$RATN9 core-prim . make-i/o-decoding-error)
        (g$11641$RATN9 core-prim . make-custom-textual-output-port)
        (g$11640$RATN9 core-prim . make-custom-textual-input/output-port)
        (g$11639$RATN9 core-prim . make-custom-textual-input-port)
        (g$11638$RATN9 core-prim . make-custom-binary-output-port)
        (g$11637$RATN9 core-prim . make-custom-binary-input/output-port)
        (g$11636$RATN9 core-prim . make-custom-binary-input-port)
        (g$11635$RATN9 core-prim . make-bytevector)
        (g$11634$RATN9 core-prim . lookahead-u8)
        (g$11633$RATN9 core-prim . lookahead-char)
        (g$6774$RATN9 core-prim . i/o-write-error?)
        (g$6760$RATN9 core-prim . i/o-read-error?)
        (g$6880$RATN9 core-prim . i/o-port-error?)
        (g$6790$RATN9 core-prim . i/o-invalid-position-error?)
        (g$6807$RATN9 core-prim . i/o-filename-error?)
        (g$6822$RATN9 core-prim . i/o-file-protection-error?)
        (g$6836$RATN9 core-prim . i/o-file-is-read-only-error?)
        (g$6864$RATN9 core-prim . i/o-file-does-not-exist-error?)
        (g$6850$RATN9 core-prim . i/o-file-already-exists-error?)
        (g$6746$RATN9 core-prim . i/o-error?)
        (g$6881$RATN9 core-prim . i/o-error-port)
        (g$6808$RATN9 core-prim . i/o-error-filename)
        (g$6911$RATN9 core-prim . i/o-encoding-error?)
        (g$6912$RATN9 core-prim . i/o-encoding-error-char)
        (g$6895$RATN9 core-prim . i/o-decoding-error?)
        (g$11632$RATN9 core-prim . get-u8)
        (g$11631$RATN9 core-prim . get-string-n!)
        (g$11630$RATN9 core-prim . get-string-n)
        (g$11629$RATN9 core-prim . get-string-all)
        (g$11628$RATN9 core-prim . get-line)
        (g$11627$RATN9 core-prim . get-datum)
        (g$11626$RATN9 core-prim . get-char)
        (g$11625$RATN9 core-prim . get-bytevector-some)
        (g$11624$RATN9 core-prim . get-bytevector-n!)
        (g$11623$RATN9 core-prim . get-bytevector-n)
        (g$11622$RATN9 core-prim . get-bytevector-all)
        (g$11621$RATN9 core-prim . flush-output-port)
        (g$11620$RATN9 core-prim . close-port)
        (g$11619$RATN9 core-prim . call-with-string-output-port)
        (g$11618$RATN9 core-prim . call-with-port)
        (g$11617$RATN9 core-prim . call-with-bytevector-output-port)
        (g$11616$RATN9 core-prim . bytevector->string)
        (g$11615$RATN9 core-prim . buffer-mode?)
        (g$11614$RATN9 core-prim . binary-port?)
        (g$8211$RATN9 core-prim . scheme-report-environment)
        (g$6512$RATN9 core-prim . quotient)
        (g$8210$RATN9 core-prim . null-environment)
        (g$6513$RATN9 core-prim . remainder)
        (g$6514$RATN9 core-prim . modulo)
        (g$11613$RATN9 core-prim . inexact->exact)
        (g$11612$RATN9 core-prim . force)
        (g$11611$RATN9 core-prim . exact->inexact)
        (g$11610$RATN9 core-prim . exit)
        (g$11161$RATN9 core-prim . command-line)
        (g$11609$RATN9 core-prim . string-fill!)
        (g$11608$RATN9 core-prim . string-set!)
        (g$11607$RATN9 core-prim . set-cdr!)
        (g$11606$RATN9 core-prim . set-car!)
        (g$6098$RATN9 core-prim . remove)
        (g$6099$RATN9 core-prim . remv)
        (g$6084$RATN9 core-prim . remp)
        (g$6100$RATN9 core-prim . remq)
        (g$6083$RATN9 core-prim . partition)
        (g$11605$RATN9 core-prim . memv)
        (g$11604$RATN9 core-prim . memq)
        (g$6090$RATN9 core-prim . memp)
        (g$6089$RATN9 core-prim . member)
        (g$6094$RATN9 core-prim . exists)
        (g$6093$RATN9 core-prim . for-all)
        (g$6097$RATN9 core-prim . fold-right)
        (g$6096$RATN9 core-prim . fold-left)
        (g$6082$RATN9 core-prim . find)
        (g$6085$RATN9 core-prim . filter)
        (g$6095$RATN9 core-prim . cons*)
        (g$6086$RATN9 core-prim . assv)
        (g$11603$RATN9 core-prim . assq)
        (g$6088$RATN9 core-prim . assp)
        (g$6087$RATN9 core-prim . assoc)
        (g$11602$RATN9 core-prim . with-exception-handler)
        (g$11601$RATN9 core-prim . raise-continuable)
        (g$11600$RATN9 core-prim . raise)
        (g$8213$RATN9 core-prim . eval)
        (g$8209$RATN9 core-prim . environment)
        (g$11599$RATN9 core-prim . make-enumeration)
        (g$11598$RATN9 core-prim . enum-set=?)
        (g$11597$RATN9 core-prim . enum-set-universe)
        (g$11596$RATN9 core-prim . enum-set-union)
        (g$11595$RATN9 core-prim . enum-set-subset?)
        (g$11594$RATN9 core-prim . enum-set-projection)
        (g$11593$RATN9 core-prim . enum-set-member?)
        (g$11592$RATN9 core-prim . enum-set-intersection)
        (g$11591$RATN9 core-prim . enum-set-indexer)
        (g$11590$RATN9 core-prim . enum-set-difference)
        (g$11589$RATN9 core-prim . enum-set-constructor)
        (g$11588$RATN9 core-prim . enum-set-complement)
        (g$11587$RATN9 core-prim . enum-set->list)
        (g$6423$RATN9 core-prim . who-condition?)
        (g$6334$RATN9 core-prim . warning?)
        (g$6376$RATN9 core-prim . violation?)
        (g$6500$RATN9 core-prim . undefined-violation?)
        (g$6484$RATN9 core-prim . syntax-violation?)
        (g$6486$RATN9 core-prim . syntax-violation-subform)
        (g$6485$RATN9 core-prim . syntax-violation-form)
        (g$8227$RATN9 core-prim . syntax-violation)
        (g$11586$RATN9 core-prim . simple-conditions)
        (g$6348$RATN9 core-prim . serious-condition?)
        (g$6438$RATN9 core-prim . non-continuable-violation?)
        (g$6319$RATN9 core-prim . message-condition?)
        (g$6421$RATN9 core-prim . make-who-condition)
        (g$6333$RATN9 core-prim . make-warning)
        (g$6375$RATN9 core-prim . make-violation)
        (g$6499$RATN9 core-prim . make-undefined-violation)
        (g$6481$RATN9 core-prim . make-syntax-violation)
        (g$6347$RATN9 core-prim . make-serious-condition)
        (g$6437$RATN9 core-prim . make-non-continuable-violation)
        (g$6317$RATN9 core-prim . make-message-condition)
        (g$6465$RATN9 core-prim . make-lexical-violation)
        (g$6404$RATN9 core-prim . make-irritants-condition)
        (g$6451$RATN9 core-prim . make-implementation-restriction-violation)
        (g$6361$RATN9 core-prim . make-error)
        (g$6389$RATN9 core-prim . make-assertion-violation)
        (g$6466$RATN9 core-prim . lexical-violation?)
        (g$6406$RATN9 core-prim . irritants-condition?)
        (g$6452$RATN9 core-prim . implementation-restriction-violation?)
        (g$6362$RATN9 core-prim . error?)
        (g$6424$RATN9 core-prim . condition-who)
        (g$11585$RATN9 core-prim . condition-predicate)
        (g$6320$RATN9 core-prim . condition-message)
        (g$6407$RATN9 core-prim . condition-irritants)
        (g$11584$RATN9 core-prim . condition-accessor)
        (g$11583$RATN9 core-prim . condition)
        (g$6390$RATN9 core-prim . assertion-violation?)
        (g$11582$RATN9 core-prim . condition?)
        (g$11581$RATN9 core-prim . utf32->string)
        (g$11580$RATN9 core-prim . utf16->string)
        (g$11579$RATN9 core-prim . utf8->string)
        (g$11578$RATN9 core-prim . uint-list->bytevector)
        (g$11577$RATN9 core-prim . u8-list->bytevector)
        (g$11576$RATN9 core-prim . string->utf8)
        (g$11575$RATN9 core-prim . string->utf32)
        (g$11574$RATN9 core-prim . string->utf16)
        (g$11573$RATN9 core-prim . sint-list->bytevector)
        (g$6174$RATN9 core-prim . native-endianness)
        (g$11572$RATN9 core-prim . bytevector?)
        (g$11571$RATN9 core-prim . bytevector=?)
        (g$11570$RATN9 core-prim . bytevector-uint-set!)
        (g$11569$RATN9 core-prim . bytevector-uint-ref)
        (g$11568$RATN9 core-prim . bytevector-u8-set!)
        (g$11567$RATN9 core-prim . bytevector-u8-ref)
        (g$6195$RATN9 core-prim . bytevector-u64-set!)
        (g$6191$RATN9 core-prim . bytevector-u64-ref)
        (g$6197$RATN9 core-prim . bytevector-u64-native-set!)
        (g$6193$RATN9 core-prim . bytevector-u64-native-ref)
        (g$6187$RATN9 core-prim . bytevector-u32-set!)
        (g$6183$RATN9 core-prim . bytevector-u32-ref)
        (g$6189$RATN9 core-prim . bytevector-u32-native-set!)
        (g$6185$RATN9 core-prim . bytevector-u32-native-ref)
        (g$6179$RATN9 core-prim . bytevector-u16-set!)
        (g$6175$RATN9 core-prim . bytevector-u16-ref)
        (g$6181$RATN9 core-prim . bytevector-u16-native-set!)
        (g$6177$RATN9 core-prim . bytevector-u16-native-ref)
        (g$11566$RATN9 core-prim . bytevector-sint-set!)
        (g$11565$RATN9 core-prim . bytevector-sint-ref)
        (g$11564$RATN9 core-prim . bytevector-s8-set!)
        (g$11563$RATN9 core-prim . bytevector-s8-ref)
        (g$6196$RATN9 core-prim . bytevector-s64-set!)
        (g$6192$RATN9 core-prim . bytevector-s64-ref)
        (g$6198$RATN9 core-prim . bytevector-s64-native-set!)
        (g$6194$RATN9 core-prim . bytevector-s64-native-ref)
        (g$6188$RATN9 core-prim . bytevector-s32-set!)
        (g$6184$RATN9 core-prim . bytevector-s32-ref)
        (g$6190$RATN9 core-prim . bytevector-s32-native-set!)
        (g$6186$RATN9 core-prim . bytevector-s32-native-ref)
        (g$6180$RATN9 core-prim . bytevector-s16-set!)
        (g$6176$RATN9 core-prim . bytevector-s16-ref)
        (g$6182$RATN9 core-prim . bytevector-s16-native-set!)
        (g$6178$RATN9 core-prim . bytevector-s16-native-ref)
        (g$11562$RATN9 core-prim . bytevector-length)
        (g$11561$RATN9 core-prim . bytevector-ieee-single-set!)
        (g$11560$RATN9 core-prim . bytevector-ieee-single-ref)
        (g$6201$RATN9 core-prim . bytevector-ieee-single-native-set!)
        (g$6199$RATN9 core-prim . bytevector-ieee-single-native-ref)
        (g$11559$RATN9 core-prim . bytevector-ieee-double-set!)
        (g$11558$RATN9 core-prim . bytevector-ieee-double-ref)
        (g$6202$RATN9 core-prim . bytevector-ieee-double-native-set!)
        (g$6200$RATN9 core-prim . bytevector-ieee-double-native-ref)
        (g$11557$RATN9 core-prim . bytevector-fill!)
        (g$11556$RATN9 core-prim . bytevector-copy!)
        (g$11555$RATN9 core-prim . bytevector-copy)
        (g$11554$RATN9 core-prim . bytevector->uint-list)
        (g$11553$RATN9 core-prim . bytevector->u8-list)
        (g$11552$RATN9 core-prim . bytevector->sint-list)
        (g$6731$RATN9 core-prim . no-nans-violation?)
        (g$6717$RATN9 core-prim . no-infinities-violation?)
        (g$6730$RATN9 core-prim . make-no-nans-violation)
        (g$6716$RATN9 core-prim . make-no-infinities-violation)
        (g$11551$RATN9 core-prim . real->flonum)
        (g$11550$RATN9 core-prim . flzero?)
        (g$11549$RATN9 core-prim . fltruncate)
        (g$11548$RATN9 core-prim . fltan)
        (g$11547$RATN9 core-prim . flsqrt)
        (g$11546$RATN9 core-prim . flsin)
        (g$11545$RATN9 core-prim . flround)
        (g$11544$RATN9 core-prim . flpositive?)
        (g$11543$RATN9 core-prim . flonum?)
        (g$11542$RATN9 core-prim . flodd?)
        (g$11541$RATN9 core-prim . flnumerator)
        (g$11540$RATN9 core-prim . flnegative?)
        (g$11539$RATN9 core-prim . flnan?)
        (g$11538$RATN9 core-prim . flmod0)
        (g$11537$RATN9 core-prim . flmod)
        (g$11536$RATN9 core-prim . flmin)
        (g$11535$RATN9 core-prim . flmax)
        (g$11534$RATN9 core-prim . fllog)
        (g$11533$RATN9 core-prim . flinteger?)
        (g$11532$RATN9 core-prim . flinfinite?)
        (g$11531$RATN9 core-prim . flfloor)
        (g$11530$RATN9 core-prim . flfinite?)
        (g$11529$RATN9 core-prim . flexpt)
        (g$11528$RATN9 core-prim . flexp)
        (g$11527$RATN9 core-prim . fleven?)
        (g$11526$RATN9 core-prim . fldiv0-and-mod0)
        (g$11525$RATN9 core-prim . fldiv0)
        (g$11524$RATN9 core-prim . fldiv-and-mod)
        (g$11523$RATN9 core-prim . fldiv)
        (g$11522$RATN9 core-prim . fldenominator)
        (g$11521$RATN9 core-prim . flcos)
        (g$11520$RATN9 core-prim . flceiling)
        (g$11519$RATN9 core-prim . flatan)
        (g$11518$RATN9 core-prim . flasin)
        (g$11517$RATN9 core-prim . flacos)
        (g$11516$RATN9 core-prim . flabs)
        (g$11515$RATN9 core-prim . fl>?)
        (g$11514$RATN9 core-prim . fl>=?)
        (g$11513$RATN9 core-prim . fl=?)
        (g$11512$RATN9 core-prim . fl<?)
        (g$11511$RATN9 core-prim . fl<=?)
        (g$11510$RATN9 core-prim . fl/)
        (g$11509$RATN9 core-prim . fl-)
        (g$11508$RATN9 core-prim . fl+)
        (g$11507$RATN9 core-prim . fl*)
        (g$11506$RATN9 core-prim . fixnum->flonum)
        (g$11505$RATN9 core-prim . fxzero?)
        (g$11504$RATN9 core-prim . fxxor)
        (g$6662$RATN9 core-prim . fxrotate-bit-field)
        (g$11503$RATN9 core-prim . fxreverse-bit-field)
        (g$11502$RATN9 core-prim . fxpositive?)
        (g$11501$RATN9 core-prim . fxodd?)
        (g$11500$RATN9 core-prim . fxnot)
        (g$11499$RATN9 core-prim . fxnegative?)
        (g$11498$RATN9 core-prim . fxmod0)
        (g$11497$RATN9 core-prim . fxmod)
        (g$11496$RATN9 core-prim . fxmin)
        (g$11495$RATN9 core-prim . fxmax)
        (g$11494$RATN9 core-prim . fxlength)
        (g$11493$RATN9 core-prim . fxior)
        (g$6656$RATN9 core-prim . fxif)
        (g$11492$RATN9 core-prim . fxfirst-bit-set)
        (g$11491$RATN9 core-prim . fxeven?)
        (g$11490$RATN9 core-prim . fxdiv0-and-mod0)
        (g$11489$RATN9 core-prim . fxdiv0)
        (g$11488$RATN9 core-prim . fxdiv-and-mod)
        (g$11487$RATN9 core-prim . fxdiv)
        (g$6659$RATN9 core-prim . fxcopy-bit-field)
        (g$6657$RATN9 core-prim . fxcopy-bit)
        (g$11486$RATN9 core-prim . fxbit-set?)
        (g$6658$RATN9 core-prim . fxbit-field)
        (g$11485$RATN9 core-prim . fxbit-count)
        (g$6661$RATN9 core-prim . fxarithmetic-shift-right)
        (g$6660$RATN9 core-prim . fxarithmetic-shift-left)
        (g$11484$RATN9 core-prim . fxarithmetic-shift)
        (g$11483$RATN9 core-prim . fxand)
        (g$11482$RATN9 core-prim . fx>?)
        (g$11481$RATN9 core-prim . fx>=?)
        (g$11480$RATN9 core-prim . fx=?)
        (g$11479$RATN9 core-prim . fx<?)
        (g$11478$RATN9 core-prim . fx<=?)
        (g$11477$RATN9 core-prim . fx-/carry)
        (g$11476$RATN9 core-prim . fx-)
        (g$11475$RATN9 core-prim . fx+/carry)
        (g$11474$RATN9 core-prim . fx+)
        (g$11473$RATN9 core-prim . fx*/carry)
        (g$11472$RATN9 core-prim . fx*)
        (g$11471$RATN9 core-prim . greatest-fixnum)
        (g$11470$RATN9 core-prim . least-fixnum)
        (g$11469$RATN9 core-prim . fixnum-width)
        (g$11468$RATN9 core-prim . fixnum?)
        (g$6610$RATN9 core-prim . bitwise-rotate-bit-field)
        (g$6611$RATN9 core-prim . bitwise-reverse-bit-field)
        (g$11467$RATN9 core-prim . bitwise-length)
        (g$6604$RATN9 core-prim . bitwise-if)
        (g$11466$RATN9 core-prim . bitwise-first-bit-set)
        (g$6607$RATN9 core-prim . bitwise-copy-bit-field)
        (g$6605$RATN9 core-prim . bitwise-copy-bit)
        (g$11465$RATN9 core-prim . bitwise-bit-set?)
        (g$11464$RATN9 core-prim . bitwise-bit-field)
        (g$11463$RATN9 core-prim . bitwise-bit-count)
        (g$11462$RATN9 core-prim . bitwise-xor)
        (g$11461$RATN9 core-prim . bitwise-ior)
        (g$11460$RATN9 core-prim . bitwise-and)
        (g$11459$RATN9 core-prim . bitwise-not)
        (g$6609$RATN9 core-prim . bitwise-arithmetic-shift-right)
        (g$6608$RATN9 core-prim . bitwise-arithmetic-shift-left)
        (g$11458$RATN9 core-prim . bitwise-arithmetic-shift)
        (g$11457$RATN9 core-prim . zero?)
        (g$11456$RATN9 core-prim . vector?)
        (g$11455$RATN9 core-prim . vector-set!)
        (g$11454$RATN9 core-prim . vector-ref)
        (g$11453$RATN9 core-prim . vector-map)
        (g$11452$RATN9 core-prim . vector-length)
        (g$11451$RATN9 core-prim . vector-for-each)
        (g$11450$RATN9 core-prim . vector-fill!)
        (g$11449$RATN9 core-prim . vector->list)
        (g$11448$RATN9 core-prim . vector)
        (g$11447$RATN9 core-prim . values)
        (g$11446$RATN9 core-prim . truncate)
        (g$11445$RATN9 core-prim . tan)
        (g$11444$RATN9 core-prim . symbol?)
        (g$11443$RATN9 core-prim . symbol=?)
        (g$11442$RATN9 core-prim . symbol->string)
        (g$11441$RATN9 core-prim . substring)
        (g$11440$RATN9 core-prim . string?)
        (g$11439$RATN9 core-prim . string>?)
        (g$11438$RATN9 core-prim . string>=?)
        (g$11437$RATN9 core-prim . string=?)
        (g$11436$RATN9 core-prim . string<?)
        (g$11435$RATN9 core-prim . string<=?)
        (g$11434$RATN9 core-prim . string-ref)
        (g$11433$RATN9 core-prim . string-length)
        (g$11432$RATN9 core-prim . string-for-each)
        (g$11431$RATN9 core-prim . string-copy)
        (g$11430$RATN9 core-prim . string-append)
        (g$11429$RATN9 core-prim . string->symbol)
        (g$11428$RATN9 core-prim . string->number)
        (g$11427$RATN9 core-prim . string->list)
        (g$11426$RATN9 core-prim . string)
        (g$11425$RATN9 core-prim . sqrt)
        (g$11424$RATN9 core-prim . sin)
        (g$11423$RATN9 core-prim . round)
        (g$11422$RATN9 core-prim . reverse)
        (g$11421$RATN9 core-prim . real?)
        (g$11420$RATN9 core-prim . real-valued?)
        (g$11419$RATN9 core-prim . real-part)
        (g$5635$RATN9 core-prim . rationalize)
        (g$11418$RATN9 core-prim . rational?)
        (g$11417$RATN9 core-prim . rational-valued?)
        (g$11416$RATN9 core-prim . procedure?)
        (g$11415$RATN9 core-prim . positive?)
        (g$11414$RATN9 core-prim . pair?)
        (g$11413$RATN9 core-prim . odd?)
        (g$11412$RATN9 core-prim . numerator)
        (g$11411$RATN9 core-prim . number?)
        (g$11410$RATN9 core-prim . number->string)
        (g$11409$RATN9 core-prim . null?)
        (g$11408$RATN9 core-prim . not)
        (g$11407$RATN9 core-prim . negative?)
        (g$11406$RATN9 core-prim . nan?)
        (g$11405$RATN9 core-prim . min)
        (g$11404$RATN9 core-prim . max)
        (g$11403$RATN9 core-prim . map)
        (g$11402$RATN9 core-prim . make-vector)
        (g$11401$RATN9 core-prim . make-string)
        (g$11400$RATN9 core-prim . make-rectangular)
        (g$11399$RATN9 core-prim . make-polar)
        (g$11398$RATN9 core-prim . magnitude)
        (g$11397$RATN9 core-prim . log)
        (g$11396$RATN9 core-prim . list?)
        (g$11395$RATN9 core-prim . list-tail)
        (g$11394$RATN9 core-prim . list-ref)
        (g$11393$RATN9 core-prim . list->vector)
        (g$11392$RATN9 core-prim . list->string)
        (g$11391$RATN9 core-prim . list)
        (g$11390$RATN9 core-prim . length)
        (g$11389$RATN9 core-prim . lcm)
        (g$11388$RATN9 core-prim . integer?)
        (g$11387$RATN9 core-prim . integer-valued?)
        (g$11386$RATN9 core-prim . integer->char)
        (g$11385$RATN9 core-prim . infinite?)
        (g$11384$RATN9 core-prim . inexact?)
        (g$11383$RATN9 core-prim . inexact)
        (g$11382$RATN9 core-prim . imag-part)
        (g$11381$RATN9 core-prim . gcd)
        (g$11380$RATN9 core-prim . for-each)
        (g$11379$RATN9 core-prim . floor)
        (g$11378$RATN9 core-prim . finite?)
        (g$11377$RATN9 core-prim . expt)
        (g$11376$RATN9 core-prim . exp)
        (g$11375$RATN9 core-prim . exact?)
        (g$11374$RATN9 core-prim . exact-integer-sqrt)
        (g$11373$RATN9 core-prim . exact)
        (g$11372$RATN9 core-prim . even?)
        (g$11371$RATN9 core-prim . error)
        (g$11370$RATN9 core-prim . eqv?)
        (g$11369$RATN9 core-prim . equal?)
        (g$11368$RATN9 core-prim . eq?)
        (g$11367$RATN9 core-prim . dynamic-wind)
        (g$11366$RATN9 core-prim . div0-and-mod0)
        (g$11365$RATN9 core-prim . mod0)
        (g$11364$RATN9 core-prim . div0)
        (g$11363$RATN9 core-prim . div-and-mod)
        (g$11362$RATN9 core-prim . mod)
        (g$11361$RATN9 core-prim . div)
        (g$11360$RATN9 core-prim . denominator)
        (g$11359$RATN9 core-prim . cos)
        (g$11358$RATN9 core-prim . cons)
        (g$11357$RATN9 core-prim . complex?)
        (g$11356$RATN9 core-prim . char?)
        (g$11355$RATN9 core-prim . char>?)
        (g$11354$RATN9 core-prim . char>=?)
        (g$11353$RATN9 core-prim . char=?)
        (g$11352$RATN9 core-prim . char<?)
        (g$11351$RATN9 core-prim . char<=?)
        (g$11350$RATN9 core-prim . char->integer)
        (g$11349$RATN9 core-prim . ceiling)
        (g$11348$RATN9 core-prim . call-with-values)
        (g$11347$RATN9 core-prim . call/cc)
        (g$11346$RATN9 core-prim . call-with-current-continuation)
        (g$5634$RATN9 core-prim . cddddr)
        (g$5633$RATN9 core-prim . cdddar)
        (g$5632$RATN9 core-prim . cddadr)
        (g$5631$RATN9 core-prim . cddaar)
        (g$5630$RATN9 core-prim . cdaddr)
        (g$5629$RATN9 core-prim . cdadar)
        (g$5628$RATN9 core-prim . cdaadr)
        (g$5627$RATN9 core-prim . cdaaar)
        (g$5626$RATN9 core-prim . cadddr)
        (g$5625$RATN9 core-prim . caddar)
        (g$5624$RATN9 core-prim . cadadr)
        (g$5623$RATN9 core-prim . cadaar)
        (g$5622$RATN9 core-prim . caaddr)
        (g$5621$RATN9 core-prim . caadar)
        (g$5620$RATN9 core-prim . caaadr)
        (g$5619$RATN9 core-prim . caaaar)
        (g$5618$RATN9 core-prim . cdddr)
        (g$5617$RATN9 core-prim . cddar)
        (g$5616$RATN9 core-prim . cdadr)
        (g$5615$RATN9 core-prim . cdaar)
        (g$5614$RATN9 core-prim . caddr)
        (g$5613$RATN9 core-prim . cadar)
        (g$5612$RATN9 core-prim . caadr)
        (g$5611$RATN9 core-prim . caaar)
        (g$5610$RATN9 core-prim . cddr)
        (g$5609$RATN9 core-prim . cdar)
        (g$5608$RATN9 core-prim . cadr)
        (g$5607$RATN9 core-prim . caar)
        (g$11345$RATN9 core-prim . cdr)
        (g$11344$RATN9 core-prim . car)
        (g$11343$RATN9 core-prim . boolean?)
        (g$11342$RATN9 core-prim . boolean=?)
        (g$11341$RATN9 core-prim . atan)
        (g$11340$RATN9 core-prim . assertion-violation)
        (g$11339$RATN9 core-prim . asin)
        (g$11338$RATN9 core-prim . apply)
        (g$11337$RATN9 core-prim . append)
        (g$11336$RATN9 core-prim . angle)
        (g$11335$RATN9 core-prim . acos)
        (g$11334$RATN9 core-prim . abs)
        (g$11333$RATN9 core-prim . /)
        (g$11332$RATN9 core-prim . *)
        (g$11331$RATN9 core-prim . -)
        (g$11330$RATN9 core-prim . +)
        (g$11329$RATN9 core-prim . >=)
        (g$11328$RATN9 core-prim . >)
        (g$11327$RATN9 core-prim . =)
        (g$11326$RATN9 core-prim . <=)
        (g$11325$RATN9 core-prim . <)
        (g$11324$RATN9 core-prim . make-record-printer)
        (g$11323$RATN9 core-prim . eqv-hash)
        (g$11322$RATN9 core-prim . eq-hash)
        (g$11321$RATN9 core-prim . reverse!)
        (g$11163$RATN9 core-prim . load/args)
        (g$6925$RATN9 core-prim . printf)
        (g$6926$RATN9 core-prim . fprintf)
        (g$6927$RATN9 core-prim . format)
        (g$11320$RATN9 core-prim . get-arity)
        (g$11319$RATN9 core-prim . gc-collect)
        (g$11318$RATN9 core-prim . clr-type?)
        (g$11317$RATN9 core-prim . get-clr-type)
        (g$11316$RATN9 core-prim . get-command-line)
        (g$11315$RATN9 core-prim . vector-append)
        (g$11314$RATN9 core-prim . vector-filter)
        (g$11313$RATN9 core-prim . vector-reverse!)
        (g$11312$RATN9 core-prim . vector-contains?)
        (g$11311$RATN9 core-prim . vector-index-of)
        (g$11310$RATN9 core-prim . vector-copy)
        (g$11309$RATN9 core-prim . vector-binary-search)
        (g$11308$RATN9 core-prim . get-output-string)
        (g$11307$RATN9 core-prim . open-output-string)
        (g$11306$RATN9 core-prim . open-input-string)
        (g$11305$RATN9 core-prim . string-format)
        (g$11160$RATN9 core-prim . trace-printer)
        (g$11304$RATN9 core-prim . make-traced-procedure)
        (g$6946$RATN9 core-prim . make-traced-macro)
        (g$11303$RATN9 core-prim . pmap)
        (g$11302$RATN9 core-prim . time-it)
        (g$6951$RATN9 core-prim . make-parameter)
        (g$11301$RATN9 core-prim . library-locator)
        (g$11300$RATN9 core-prim . get-library-paths)
        (g$8207$RATN9 core-prim . environment-symbols)
        (g$8206$RATN9 core-prim . interaction-environment-symbols)
        (g$7376$RATN9 core-prim . library-path)
        (g$7377$RATN9 core-prim . library-extensions)
        (g$7397$RATN9 core-prim . installed-libraries)
        (g$8212$RATN9 core-prim . expand)
        (g$11299$RATN9 $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11298$RATN9 $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11297$RATN9 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11296$RATN9 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11295$RATN9 $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11294$RATN9
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11293$RATN9
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11292$RATN9
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11291$RATN9
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11290$RATN9 $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11289$RATN9
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11288$RATN9 $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11287$RATN9 $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11286$RATN9 $core-rtd &i/o-rtd &i/o-rcd)
        (g$11285$RATN9 $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11284$RATN9 $core-rtd &undefined-rtd &undefined-rcd)
        (g$11283$RATN9 $core-rtd &syntax-rtd &syntax-rcd)
        (g$11282$RATN9 $core-rtd &lexical-rtd &lexical-rcd)
        (g$11281$RATN9
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11280$RATN9 $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11279$RATN9 $core-rtd &who-rtd &who-rcd)
        (g$11278$RATN9 $core-rtd &irritants-rtd &irritants-rcd)
        (g$11277$RATN9 $core-rtd &assertion-rtd &assertion-rcd)
        (g$11276$RATN9 $core-rtd &violation-rtd &violation-rcd)
        (g$11275$RATN9 $core-rtd &error-rtd &error-rcd)
        (g$11274$RATN9 $core-rtd &serious-rtd &serious-rcd)
        (g$11273$RATN9 $core-rtd &warning-rtd &warning-rcd)
        (g$11272$RATN9 $core-rtd &message-rtd &message-rcd)
        (g$11271$RATN9 $core-rtd &condition-rtd &condition-rcd)
        (g$11270$RATN9 macro . define-condition-type)
        (g$11269$RATN9 macro . define-enumeration)
        (g$11268$RATN9 macro . define-record-type)
        (g$11267$RATN9 macro . parent-rtd)
        (g$11266$RATN9 macro . nongenerative)
        (g$11265$RATN9 macro . opaque)
        (g$11264$RATN9 macro . sealed)
        (g$11263$RATN9 macro . protocol)
        (g$11262$RATN9 macro . parent)
        (g$11261$RATN9 macro . immutable)
        (g$11260$RATN9 macro . mutable)
        (g$11259$RATN9 macro . fields)
        (g$11258$RATN9 macro . error-handling-mode)
        (g$11257$RATN9 macro . file-options)
        (g$11256$RATN9 macro . buffer-mode)
        (g$11255$RATN9 macro . eol-style)
        (g$11254$RATN9 macro . guard)
        (g$11253$RATN9 macro . trace-letrec-syntax)
        (g$11252$RATN9 macro . trace-let-syntax)
        (g$11251$RATN9 macro . trace-define-syntax)
        (g$11250$RATN9 macro . trace-define)
        (g$11249$RATN9 macro . trace-lambda)
        (g$11248$RATN9 macro . unsyntax-splicing)
        (g$11247$RATN9 macro . unsyntax)
        (g$11246$RATN9 macro . unquote-splicing)
        (g$11245$RATN9 macro . unquote)
        (g$11244$RATN9 macro . _)
        (g$11243$RATN9 macro . else)
        (g$11242$RATN9 macro . =>)
        (g$11241$RATN9 macro . ...)
        (g$11240$RATN9 macro . assert)
        (g$11239$RATN9 macro . endianness)
        (g$11238$RATN9 macro . delay)
        (g$11237$RATN9 macro . time)
        (g$11236$RATN9 macro . or)
        (g$11235$RATN9 macro . and)
        (g$11234$RATN9 macro . do)
        (g$11233$RATN9 macro . cond)
        (g$11232$RATN9 macro . let*)
        (g$11231$RATN9 macro . let)
        (g$11230$RATN9 macro . identifier-syntax)
        (g$11229$RATN9 macro . with-syntax)
        (g$11228$RATN9 macro . quasisyntax)
        (g$11227$RATN9 macro . quasiquote)
        (g$11226$RATN9 macro . syntax-rules)
        (g$11225$RATN9 macro . include-into)
        (g$11224$RATN9 macro . include)
        (g$11223$RATN9 macro . define-struct)
        (g$11222$RATN9 macro . let-values)
        (g$11221$RATN9 macro . let*-values)
        (g$11220$RATN9 core-macro . record-constructor-descriptor)
        (g$11219$RATN9 core-macro . record-type-descriptor)
        (g$11218$RATN9 core-macro . fluid-let-syntax)
        (g$11217$RATN9 core-macro . case)
        (g$11216$RATN9 core-macro . parameterize)
        (g$11215$RATN9 core-macro . unless)
        (g$11214$RATN9 core-macro . when)
        (g$11213$RATN9 core-macro . if)
        (g$11212$RATN9 core-macro . letrec*)
        (g$11211$RATN9 core-macro . letrec)
        (g$11210$RATN9 core-macro . type-descriptor)
        (g$11209$RATN9 core-macro . case-lambda)
        (g$11208$RATN9 core-macro . lambda)
        (g$11207$RATN9 core-macro . syntax)
        (g$11206$RATN9 core-macro . syntax-case)
        (g$11205$RATN9 core-macro . quote)
        (g$11204$RATN9 core-macro . foreign-call)
        (g$11203$RATN9 letrec-syntax)
        (g$11202$RATN9 let-syntax)
        (g$11201$RATN9 set!)
        (g$11200$RATN9 import)
        (g$11199$RATN9 library)
        (g$11198$RATN9 begin)
        (g$11197$RATN9 module)
        (g$11196$RATN9 define-syntax)
        (g$11195$RATN9 define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6750$RATN9
      'g$11888$RATN9
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$11767$RATN9)
        (eval-core . g$11766$RATN9)
        (set-symbol-value! . g$11765$RATN9)
        (symbol-value . g$11764$RATN9)
        (gensym . g$11762$RATN9)
        (void . g$11761$RATN9))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$10779$RATN9
     g$trace-printer$10818$RATN9
     (g$make-parameter$6205$RATN9 write))
   (g$command-line$10780$RATN9
     g$command-line$10819$RATN9
     (g$make-parameter$6205$RATN9 (get-command-line)))
   (g$local-library-path$10781$RATN9
     g$local-library-path$10820$RATN9
     (case-lambda
       ((g$filename$10791$RATN9)
        (cons
          (g$get-directory-name$5251$RATN9 g$filename$10791$RATN9)
          (g$library-path$6734$RATN9)))))
   (g$load/args$10782$RATN9
     g$load/args$10821$RATN9
     (case-lambda
       ((g$filename$10792$RATN9 . g$args$10793$RATN9)
        (begin
          (apply
            g$load-r6rs-top-level$10789$RATN9
            g$filename$10792$RATN9
            'load
            g$args$10793$RATN9)
          (void)))))
   (g$load$10783$RATN9
     g$load$10822$RATN9
     (case-lambda
       ((g$filename$10794$RATN9)
        (begin
          (apply
            g$load-r6rs-top-level$10789$RATN9
            g$filename$10794$RATN9
            'load
            (g$command-line$10780$RATN9))
          (void)))))
   (g$ironscheme-build$10784$RATN9
     g$ironscheme-build$10823$RATN9
     (case-lambda (() (g$load$10783$RATN9 '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$10785$RATN9
     g$eval-top-level$10824$RATN9
     (case-lambda
       ((g$x$10795$RATN9)
        (g$eval$10757$RATN9
          g$x$10795$RATN9
          (g$interaction-environment$10777$RATN9)))))
   (g$compile-system-libraries$10786$RATN9
     g$compile-system-libraries$10825$RATN9
     (case-lambda
       (()
        (g$eval-top-level$10785$RATN9
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$10787$RATN9
     g$compile$10826$RATN9
     (case-lambda
       ((g$filename$10796$RATN9)
        (g$load-r6rs-top-level$10789$RATN9 g$filename$10796$RATN9 'compile))))
   (g$compile->closure$10788$RATN9
     g$compile->closure$10827$RATN9
     (case-lambda
       ((g$filename$10797$RATN9)
        (g$load-r6rs-top-level$10789$RATN9 g$filename$10797$RATN9 'closure))))
   (g$load-r6rs-top-level$10789$RATN9
     g$load-r6rs-top-level$10828$RATN9
     (case-lambda
       ((g$filename$10798$RATN9 g$how$10799$RATN9 . g$args$10800$RATN9)
        ((case-lambda
           ((g$library-path$10803$RATN9 g$library-path$10804$RATN9)
            ((case-lambda
               ((g$swap$10805$RATN9)
                (dynamic-wind
                  g$swap$10805$RATN9
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$10806$RATN9)
                         ((case-lambda
                            ((g$t$10807$RATN9)
                             (if (eqv? g$t$10807$RATN9 'closure)
                               (g$pre-compile-r6rs-top-level$10776$RATN9
                                 g$x*$10806$RATN9)
                               (if (eqv? g$t$10807$RATN9 'load)
                                 ((case-lambda
                                    ((g$command-line$10810$RATN9
                                       g$command-line$10811$RATN9)
                                     ((case-lambda
                                        ((g$swap$10812$RATN9)
                                         (dynamic-wind
                                           g$swap$10812$RATN9
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$10775$RATN9
                                                 g$x*$10806$RATN9))))
                                           g$swap$10812$RATN9)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$10813$RATN9)
                                             (begin
                                               (g$command-line$10810$RATN9
                                                 g$command-line$10811$RATN9)
                                               (set! g$command-line$10811$RATN9
                                                 g$t$10813$RATN9))))
                                          (g$command-line$10810$RATN9)))))))
                                  g$command-line$10780$RATN9
                                  (cons
                                    g$filename$10798$RATN9
                                    (map (case-lambda
                                           ((g$x$10814$RATN9)
                                            (g$format$6121$RATN9
                                              '"~a"
                                              g$x$10814$RATN9)))
                                         g$args$10800$RATN9)))
                                 (if (eqv? g$t$10807$RATN9 'compile)
                                   (begin
                                     (g$compile-r6rs-top-level$10775$RATN9
                                       g$x*$10806$RATN9)
                                     (g$serialize-all$6738$RATN9
                                       serialize-library
                                       g$compile-core-expr$6452$RATN9))
                                   (void))))))
                          g$how$10799$RATN9)))
                      (with-input-from-file
                        g$filename$10798$RATN9
                        (case-lambda
                          (()
                           ((letrec ((g$f$10815$RATN9
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$10816$RATN9)
                                              (if (eof-object? g$x$10816$RATN9)
                                                '()
                                                (cons
                                                  g$x$10816$RATN9
                                                  (g$f$10815$RATN9)))))
                                           (read-annotated))))))
                              g$f$10815$RATN9))))))))
                  g$swap$10805$RATN9)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$10817$RATN9)
                    (begin
                      (g$library-path$10803$RATN9 g$library-path$10804$RATN9)
                      (set! g$library-path$10804$RATN9 g$t$10817$RATN9))))
                 (g$library-path$10803$RATN9)))))))
         g$library-path$6734$RATN9
         (g$local-library-path$10781$RATN9 g$filename$10798$RATN9))))))
  (begin
    (g$current-precompiled-library-loader$6739$RATN9
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$10790$RATN9)
         (if (g$serious-condition?$5634$RATN9 g$ex$10790$RATN9)
           (raise g$ex$10790$RATN9)
           (begin (display g$ex$10790$RATN9) (newline))))))
    (set-symbol-value! 'load g$load$10783$RATN9)
    (set-symbol-value! 'compile g$compile$10787$RATN9)
    (set-symbol-value! 'compile->closure g$compile->closure$10788$RATN9)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$10785$RATN9)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$10750$RATN9)
    (set-symbol-value! 'expanded2core g$expanded->core$6451$RATN9)
    (set-symbol-value! 'trace-printer g$trace-printer$10779$RATN9)
    (g$library-path$6734$RATN9 (get-library-paths))))

