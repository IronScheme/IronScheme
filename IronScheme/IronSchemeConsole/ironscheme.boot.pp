;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$list-tail$4906$dF01I
     g$list-tail$5043$dF01I
     (case-lambda
       ((g$lst$4934$dF01I g$index$4935$dF01I)
        (if ((case-lambda
               ((g$t$4936$dF01I)
                (if g$t$4936$dF01I
                  g$t$4936$dF01I
                  (begin '#f (g$negative?$5292$dF01I g$index$4935$dF01I)))))
             (null? g$lst$4934$dF01I))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$4934$dF01I
            g$index$4935$dF01I)
          (if (g$zero?$5293$dF01I g$index$4935$dF01I)
            g$lst$4934$dF01I
            (g$list-tail$4906$dF01I
              (cdr g$lst$4934$dF01I)
              (- g$index$4935$dF01I '1)))))))
   (g$list-ref$4907$dF01I
     g$list-ref$5044$dF01I
     (case-lambda
       ((g$lst$4937$dF01I g$index$4938$dF01I)
        (car (g$list-tail$4906$dF01I g$lst$4937$dF01I g$index$4938$dF01I)))))
   (g$last-pair$4908$dF01I
     g$last-pair$5045$dF01I
     (case-lambda
       ((g$lst$4939$dF01I)
        (if (null? g$lst$4939$dF01I)
          g$lst$4939$dF01I
          (if (null? (cdr g$lst$4939$dF01I))
            g$lst$4939$dF01I
            (g$last-pair$4908$dF01I (cdr g$lst$4939$dF01I)))))))
   (g$make-list$4909$dF01I
     g$make-list$5046$dF01I
     (case-lambda
       ((g$n$4940$dF01I) (list->vector (make-vector g$n$4940$dF01I)))
       ((g$n$4941$dF01I g$fill$4942$dF01I)
        (list->vector (make-vector g$n$4941$dF01I g$fill$4942$dF01I)))))
   (g$find$4910$dF01I
     g$find$5047$dF01I
     (case-lambda
       ((g$proc$4943$dF01I g$l$4944$dF01I)
        (if (null? g$l$4944$dF01I)
          '#f
          ((case-lambda
             ((g$e$4945$dF01I g$r$4946$dF01I g$proc$4947$dF01I)
              (if (g$proc$4947$dF01I g$e$4945$dF01I)
                g$e$4945$dF01I
                (g$find$4910$dF01I g$proc$4947$dF01I g$r$4946$dF01I))))
           (car g$l$4944$dF01I)
           (cdr g$l$4944$dF01I)
           g$proc$4943$dF01I)))))
   (g$partition$4911$dF01I
     g$partition$5048$dF01I
     (case-lambda
       ((g$proc$4948$dF01I g$l$4949$dF01I)
        ((letrec ((g$f$4950$dF01I
                    (case-lambda
                      ((g$l$4951$dF01I g$a$4952$dF01I g$b$4953$dF01I)
                       (if (null? g$l$4951$dF01I)
                         (values
                           (reverse! g$a$4952$dF01I)
                           (reverse! g$b$4953$dF01I))
                         ((case-lambda
                            ((g$e$4954$dF01I)
                             (if (g$proc$4948$dF01I g$e$4954$dF01I)
                               (g$f$4950$dF01I
                                 (cdr g$l$4951$dF01I)
                                 (cons g$e$4954$dF01I g$a$4952$dF01I)
                                 g$b$4953$dF01I)
                               (g$f$4950$dF01I
                                 (cdr g$l$4951$dF01I)
                                 g$a$4952$dF01I
                                 (cons g$e$4954$dF01I g$b$4953$dF01I)))))
                          (car g$l$4951$dF01I)))))))
           g$f$4950$dF01I)
         g$l$4949$dF01I
         '()
         '()))))
   (g$remp$4912$dF01I
     g$remp$5049$dF01I
     (case-lambda
       ((g$proc$4955$dF01I g$l$4956$dF01I)
        ((letrec ((g$f$4957$dF01I
                    (case-lambda
                      ((g$l$4958$dF01I g$a$4959$dF01I)
                       (if (null? g$l$4958$dF01I)
                         (reverse! g$a$4959$dF01I)
                         ((case-lambda
                            ((g$e$4960$dF01I)
                             (if (g$proc$4955$dF01I g$e$4960$dF01I)
                               (g$f$4957$dF01I
                                 (cdr g$l$4958$dF01I)
                                 g$a$4959$dF01I)
                               (g$f$4957$dF01I
                                 (cdr g$l$4958$dF01I)
                                 (cons g$e$4960$dF01I g$a$4959$dF01I)))))
                          (car g$l$4958$dF01I)))))))
           g$f$4957$dF01I)
         g$l$4956$dF01I
         '()))))
   (g$filter$4913$dF01I
     g$filter$5050$dF01I
     (case-lambda
       ((g$proc$4961$dF01I g$l$4962$dF01I)
        ((letrec ((g$f$4963$dF01I
                    (case-lambda
                      ((g$l$4964$dF01I g$a$4965$dF01I)
                       (if (null? g$l$4964$dF01I)
                         (reverse! g$a$4965$dF01I)
                         ((case-lambda
                            ((g$e$4966$dF01I)
                             (if (g$proc$4961$dF01I g$e$4966$dF01I)
                               (g$f$4963$dF01I
                                 (cdr g$l$4964$dF01I)
                                 (cons g$e$4966$dF01I g$a$4965$dF01I))
                               (g$f$4963$dF01I
                                 (cdr g$l$4964$dF01I)
                                 g$a$4965$dF01I))))
                          (car g$l$4964$dF01I)))))))
           g$f$4963$dF01I)
         g$l$4962$dF01I
         '()))))
   (g$assq$4914$dF01I
     g$assq$5051$dF01I
     (case-lambda
       ((g$obj$4967$dF01I g$lst$4968$dF01I)
        (if (null? g$lst$4968$dF01I)
          '#f
          ((case-lambda
             ((g$obj$4969$dF01I g$t$4970$dF01I g$r$4971$dF01I)
              (if (eq? g$obj$4969$dF01I (car g$t$4970$dF01I))
                g$t$4970$dF01I
                (g$assq$4914$dF01I g$obj$4969$dF01I g$r$4971$dF01I))))
           g$obj$4967$dF01I
           (car g$lst$4968$dF01I)
           (cdr g$lst$4968$dF01I))))))
   (g$assv$4915$dF01I
     g$assv$5052$dF01I
     (case-lambda
       ((g$obj$4972$dF01I g$lst$4973$dF01I)
        (if (null? g$lst$4973$dF01I)
          '#f
          ((case-lambda
             ((g$obj$4974$dF01I g$t$4975$dF01I g$r$4976$dF01I)
              (if (eqv? g$obj$4974$dF01I (car g$t$4975$dF01I))
                g$t$4975$dF01I
                (g$assv$4915$dF01I g$obj$4974$dF01I g$r$4976$dF01I))))
           g$obj$4972$dF01I
           (car g$lst$4973$dF01I)
           (cdr g$lst$4973$dF01I))))))
   (g$assoc$4916$dF01I
     g$assoc$5053$dF01I
     (case-lambda
       ((g$obj$4977$dF01I g$lst$4978$dF01I)
        (if (null? g$lst$4978$dF01I)
          '#f
          ((case-lambda
             ((g$obj$4979$dF01I g$t$4980$dF01I g$r$4981$dF01I)
              (if (equal? g$obj$4979$dF01I (car g$t$4980$dF01I))
                g$t$4980$dF01I
                (g$assoc$4916$dF01I g$obj$4979$dF01I g$r$4981$dF01I))))
           g$obj$4977$dF01I
           (car g$lst$4978$dF01I)
           (cdr g$lst$4978$dF01I))))))
   (g$assp$4917$dF01I
     g$assp$5054$dF01I
     (case-lambda
       ((g$p?$4982$dF01I g$lst$4983$dF01I)
        (if (null? g$lst$4983$dF01I)
          '#f
          ((case-lambda
             ((g$p?$4984$dF01I g$t$4985$dF01I g$r$4986$dF01I)
              (if (g$p?$4984$dF01I (car g$t$4985$dF01I))
                g$t$4985$dF01I
                (g$assp$4917$dF01I g$p?$4984$dF01I g$r$4986$dF01I))))
           g$p?$4982$dF01I
           (car g$lst$4983$dF01I)
           (cdr g$lst$4983$dF01I))))))
   (g$memq$4918$dF01I
     g$memq$5055$dF01I
     (case-lambda
       ((g$obj$4987$dF01I g$lst$4988$dF01I)
        (if (null? g$lst$4988$dF01I)
          '#f
          (if (eq? g$obj$4987$dF01I (car g$lst$4988$dF01I))
            g$lst$4988$dF01I
            (g$memq$4918$dF01I g$obj$4987$dF01I (cdr g$lst$4988$dF01I)))))))
   (g$memv$4919$dF01I
     g$memv$5056$dF01I
     (case-lambda
       ((g$obj$4989$dF01I g$lst$4990$dF01I)
        (if (null? g$lst$4990$dF01I)
          '#f
          (if (eqv? g$obj$4989$dF01I (car g$lst$4990$dF01I))
            g$lst$4990$dF01I
            (g$memv$4919$dF01I g$obj$4989$dF01I (cdr g$lst$4990$dF01I)))))))
   (g$member$4920$dF01I
     g$member$5057$dF01I
     (case-lambda
       ((g$obj$4991$dF01I g$lst$4992$dF01I)
        (if (null? g$lst$4992$dF01I)
          '#f
          (if (equal? g$obj$4991$dF01I (car g$lst$4992$dF01I))
            g$lst$4992$dF01I
            (g$member$4920$dF01I g$obj$4991$dF01I (cdr g$lst$4992$dF01I)))))))
   (g$memp$4921$dF01I
     g$memp$5058$dF01I
     (case-lambda
       ((g$p?$4993$dF01I g$lst$4994$dF01I)
        (if (null? g$lst$4994$dF01I)
          '#f
          (if (g$p?$4993$dF01I (car g$lst$4994$dF01I))
            g$lst$4994$dF01I
            (g$memp$4921$dF01I g$p?$4993$dF01I (cdr g$lst$4994$dF01I)))))))
   (g$all-empty?$4922$dF01I
     g$all-empty?$5059$dF01I
     (case-lambda
       ((g$ls$4995$dF01I)
        ((case-lambda
           ((g$t$4996$dF01I)
            (if g$t$4996$dF01I
              g$t$4996$dF01I
              (begin
                '#f
                (if (null? (car g$ls$4995$dF01I))
                  (begin '#f (g$all-empty?$4922$dF01I (cdr g$ls$4995$dF01I)))
                  '#f)))))
         (null? g$ls$4995$dF01I)))))
   (g$split$4923$dF01I
     g$split$5060$dF01I
     (case-lambda
       ((g$ls$4997$dF01I)
        (if (null? g$ls$4997$dF01I)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4923$dF01I (cdr g$ls$4997$dF01I))))
            (case-lambda
              ((g$cars$4998$dF01I g$cdrs$4999$dF01I)
               ((case-lambda
                  ((g$a$5000$dF01I)
                   (values
                     (cons (car g$a$5000$dF01I) g$cars$4998$dF01I)
                     (cons (cdr g$a$5000$dF01I) g$cdrs$4999$dF01I))))
                (car g$ls$4997$dF01I)))))))))
   (g$for-all$4924$dF01I
     g$for-all$5061$dF01I
     (case-lambda
       ((g$f$5001$dF01I . g$args$5002$dF01I)
        (if (g$all-empty?$4922$dF01I g$args$5002$dF01I)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4923$dF01I g$args$5002$dF01I)))
            (case-lambda
              ((g$cars$5003$dF01I g$cdrs$5004$dF01I)
               (if (g$all-empty?$4922$dF01I g$cdrs$5004$dF01I)
                 (apply g$f$5001$dF01I g$cars$5003$dF01I)
                 (if (apply g$f$5001$dF01I g$cars$5003$dF01I)
                   (begin
                     '#f
                     (apply
                       g$for-all$4924$dF01I
                       g$f$5001$dF01I
                       g$cdrs$5004$dF01I))
                   '#f)))))))))
   (g$exists$4925$dF01I
     g$exists$5062$dF01I
     (case-lambda
       ((g$f$5005$dF01I . g$args$5006$dF01I)
        (if (g$all-empty?$4922$dF01I g$args$5006$dF01I)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4923$dF01I g$args$5006$dF01I)))
            (case-lambda
              ((g$cars$5007$dF01I g$cdrs$5008$dF01I)
               ((case-lambda
                  ((g$t$5009$dF01I)
                   (if g$t$5009$dF01I
                     g$t$5009$dF01I
                     (begin
                       '#f
                       (apply
                         g$exists$4925$dF01I
                         g$f$5005$dF01I
                         g$cdrs$5008$dF01I)))))
                (apply g$f$5005$dF01I g$cars$5007$dF01I)))))))))
   (g$map$4926$dF01I
     g$map$5063$dF01I
     (case-lambda
       ((g$proc$5010$dF01I . g$lists$5011$dF01I)
        ((letrec ((g$f$5012$dF01I
                    (case-lambda
                      ((g$lists$5013$dF01I g$a$5014$dF01I)
                       (if (g$all-empty?$4922$dF01I g$lists$5013$dF01I)
                         (reverse! g$a$5014$dF01I)
                         (call-with-values
                           (case-lambda
                             (() (g$split$4923$dF01I g$lists$5013$dF01I)))
                           (case-lambda
                             ((g$cars$5015$dF01I g$cdrs$5016$dF01I)
                              (g$f$5012$dF01I
                                g$cdrs$5016$dF01I
                                (cons
                                  (apply g$proc$5010$dF01I g$cars$5015$dF01I)
                                  g$a$5014$dF01I))))))))))
           g$f$5012$dF01I)
         g$lists$5011$dF01I
         '()))))
   (g$for-each$4927$dF01I
     g$for-each$5064$dF01I
     (case-lambda
       ((g$f$5017$dF01I . g$args$5018$dF01I)
        (if (not (g$all-empty?$4922$dF01I g$args$5018$dF01I))
          (call-with-values
            (case-lambda (() (g$split$4923$dF01I g$args$5018$dF01I)))
            (case-lambda
              ((g$cars$5019$dF01I g$cdrs$5020$dF01I)
               (begin
                 (apply g$f$5017$dF01I g$cars$5019$dF01I)
                 (apply
                   g$for-each$4927$dF01I
                   g$f$5017$dF01I
                   g$cdrs$5020$dF01I)))))
          (void)))))
   (g$cons*$4928$dF01I
     g$cons*$5065$dF01I
     (case-lambda
       ((g$a$5021$dF01I . g$rest$5022$dF01I)
        ((letrec ((g$f$5023$dF01I
                    (case-lambda
                      ((g$a$5024$dF01I g$rest$5025$dF01I)
                       (if (null? g$rest$5025$dF01I)
                         g$a$5024$dF01I
                         (cons
                           g$a$5024$dF01I
                           (g$f$5023$dF01I
                             (car g$rest$5025$dF01I)
                             (cdr g$rest$5025$dF01I))))))))
           g$f$5023$dF01I)
         g$a$5021$dF01I
         g$rest$5022$dF01I))))
   (g$fold-left$4929$dF01I
     g$fold-left$5066$dF01I
     (case-lambda
       ((g$combine$5026$dF01I
          g$nil$5027$dF01I
          g$list1$5028$dF01I
          .
          g$lists$5029$dF01I)
        (if (null? g$list1$5028$dF01I)
          g$nil$5027$dF01I
          (apply
            g$fold-left$4929$dF01I
            (g$cons*$4928$dF01I
              g$combine$5026$dF01I
              (apply
                g$combine$5026$dF01I
                (g$cons*$4928$dF01I
                  g$nil$5027$dF01I
                  (car g$list1$5028$dF01I)
                  (g$map$4926$dF01I car g$lists$5029$dF01I)))
              (cdr g$list1$5028$dF01I)
              (g$map$4926$dF01I cdr g$lists$5029$dF01I)))))))
   (g$fold-right$4930$dF01I
     g$fold-right$5067$dF01I
     (case-lambda
       ((g$combine$5030$dF01I
          g$nil$5031$dF01I
          g$list1$5032$dF01I
          .
          g$lists$5033$dF01I)
        (if (null? g$list1$5032$dF01I)
          g$nil$5031$dF01I
          (apply
            g$combine$5030$dF01I
            (append
              (list (car g$list1$5032$dF01I))
              (g$map$4926$dF01I car g$lists$5033$dF01I)
              (list
                (apply
                  g$fold-right$4930$dF01I
                  (g$cons*$4928$dF01I
                    g$combine$5030$dF01I
                    g$nil$5031$dF01I
                    (cdr g$list1$5032$dF01I)
                    (g$map$4926$dF01I cdr g$lists$5033$dF01I))))))))))
   (g$remove$4931$dF01I
     g$remove$5068$dF01I
     (case-lambda
       ((g$obj$5034$dF01I g$list$5035$dF01I)
        (g$remp$4912$dF01I
          (case-lambda
            ((g$x$5036$dF01I) (equal? g$obj$5034$dF01I g$x$5036$dF01I)))
          g$list$5035$dF01I))))
   (g$remv$4932$dF01I
     g$remv$5069$dF01I
     (case-lambda
       ((g$obj$5037$dF01I g$list$5038$dF01I)
        (g$remp$4912$dF01I
          (case-lambda
            ((g$x$5039$dF01I) (eqv? g$obj$5037$dF01I g$x$5039$dF01I)))
          g$list$5038$dF01I))))
   (g$remq$4933$dF01I
     g$remq$5070$dF01I
     (case-lambda
       ((g$obj$5040$dF01I g$list$5041$dF01I)
        (g$remp$4912$dF01I
          (case-lambda ((g$x$5042$dF01I) (eq? g$obj$5040$dF01I g$x$5042$dF01I)))
          g$list$5041$dF01I)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5071$dF01I
     g$caar$5263$dF01I
     (case-lambda ((g$x$5135$dF01I) (car (car g$x$5135$dF01I)))))
   (g$cadr$5072$dF01I
     g$cadr$5264$dF01I
     (case-lambda ((g$x$5136$dF01I) (car (cdr g$x$5136$dF01I)))))
   (g$cdar$5073$dF01I
     g$cdar$5265$dF01I
     (case-lambda ((g$x$5137$dF01I) (cdr (car g$x$5137$dF01I)))))
   (g$cddr$5074$dF01I
     g$cddr$5266$dF01I
     (case-lambda ((g$x$5138$dF01I) (cdr (cdr g$x$5138$dF01I)))))
   (g$caaar$5075$dF01I
     g$caaar$5267$dF01I
     (case-lambda
       ((g$x$5139$dF01I) (g$caar$5071$dF01I (car g$x$5139$dF01I)))))
   (g$caadr$5076$dF01I
     g$caadr$5268$dF01I
     (case-lambda
       ((g$x$5140$dF01I) (g$caar$5071$dF01I (cdr g$x$5140$dF01I)))))
   (g$cadar$5077$dF01I
     g$cadar$5269$dF01I
     (case-lambda
       ((g$x$5141$dF01I) (g$cadr$5072$dF01I (car g$x$5141$dF01I)))))
   (g$caddr$5078$dF01I
     g$caddr$5270$dF01I
     (case-lambda
       ((g$x$5142$dF01I) (g$cadr$5072$dF01I (cdr g$x$5142$dF01I)))))
   (g$cdaar$5079$dF01I
     g$cdaar$5271$dF01I
     (case-lambda
       ((g$x$5143$dF01I) (g$cdar$5073$dF01I (car g$x$5143$dF01I)))))
   (g$cdadr$5080$dF01I
     g$cdadr$5272$dF01I
     (case-lambda
       ((g$x$5144$dF01I) (g$cdar$5073$dF01I (cdr g$x$5144$dF01I)))))
   (g$cddar$5081$dF01I
     g$cddar$5273$dF01I
     (case-lambda
       ((g$x$5145$dF01I) (g$cddr$5074$dF01I (car g$x$5145$dF01I)))))
   (g$cdddr$5082$dF01I
     g$cdddr$5274$dF01I
     (case-lambda
       ((g$x$5146$dF01I) (g$cddr$5074$dF01I (cdr g$x$5146$dF01I)))))
   (g$caaaar$5083$dF01I
     g$caaaar$5275$dF01I
     (case-lambda
       ((g$x$5147$dF01I) (g$caaar$5075$dF01I (car g$x$5147$dF01I)))))
   (g$caaadr$5084$dF01I
     g$caaadr$5276$dF01I
     (case-lambda
       ((g$x$5148$dF01I) (g$caaar$5075$dF01I (cdr g$x$5148$dF01I)))))
   (g$caadar$5085$dF01I
     g$caadar$5277$dF01I
     (case-lambda
       ((g$x$5149$dF01I) (g$caadr$5076$dF01I (car g$x$5149$dF01I)))))
   (g$caaddr$5086$dF01I
     g$caaddr$5278$dF01I
     (case-lambda
       ((g$x$5150$dF01I) (g$caadr$5076$dF01I (cdr g$x$5150$dF01I)))))
   (g$cadaar$5087$dF01I
     g$cadaar$5279$dF01I
     (case-lambda
       ((g$x$5151$dF01I) (g$cadar$5077$dF01I (car g$x$5151$dF01I)))))
   (g$cadadr$5088$dF01I
     g$cadadr$5280$dF01I
     (case-lambda
       ((g$x$5152$dF01I) (g$cadar$5077$dF01I (cdr g$x$5152$dF01I)))))
   (g$caddar$5089$dF01I
     g$caddar$5281$dF01I
     (case-lambda
       ((g$x$5153$dF01I) (g$caddr$5078$dF01I (car g$x$5153$dF01I)))))
   (g$cadddr$5090$dF01I
     g$cadddr$5282$dF01I
     (case-lambda
       ((g$x$5154$dF01I) (g$caddr$5078$dF01I (cdr g$x$5154$dF01I)))))
   (g$cdaaar$5091$dF01I
     g$cdaaar$5283$dF01I
     (case-lambda
       ((g$x$5155$dF01I) (g$cdaar$5079$dF01I (car g$x$5155$dF01I)))))
   (g$cdaadr$5092$dF01I
     g$cdaadr$5284$dF01I
     (case-lambda
       ((g$x$5156$dF01I) (g$cdaar$5079$dF01I (cdr g$x$5156$dF01I)))))
   (g$cdadar$5093$dF01I
     g$cdadar$5285$dF01I
     (case-lambda
       ((g$x$5157$dF01I) (g$cdadr$5080$dF01I (car g$x$5157$dF01I)))))
   (g$cdaddr$5094$dF01I
     g$cdaddr$5286$dF01I
     (case-lambda
       ((g$x$5158$dF01I) (g$cdadr$5080$dF01I (cdr g$x$5158$dF01I)))))
   (g$cddaar$5095$dF01I
     g$cddaar$5287$dF01I
     (case-lambda
       ((g$x$5159$dF01I) (g$cddar$5081$dF01I (car g$x$5159$dF01I)))))
   (g$cddadr$5096$dF01I
     g$cddadr$5288$dF01I
     (case-lambda
       ((g$x$5160$dF01I) (g$cddar$5081$dF01I (cdr g$x$5160$dF01I)))))
   (g$cdddar$5097$dF01I
     g$cdddar$5289$dF01I
     (case-lambda
       ((g$x$5161$dF01I) (g$cdddr$5082$dF01I (car g$x$5161$dF01I)))))
   (g$cddddr$5098$dF01I
     g$cddddr$5290$dF01I
     (case-lambda
       ((g$x$5162$dF01I) (g$cdddr$5082$dF01I (cdr g$x$5162$dF01I)))))
   (g$positive?$5099$dF01I
     g$positive?$5291$dF01I
     (case-lambda
       ((g$r$5163$dF01I)
        (begin
          (if (not (real-valued? g$r$5163$dF01I))
            (assertion-violation 'positive? '"not a real" g$r$5163$dF01I)
            (void))
          (< '0 g$r$5163$dF01I)))))
   (g$negative?$5100$dF01I
     g$negative?$5292$dF01I
     (case-lambda
       ((g$r$5164$dF01I)
        (begin
          (if (not (real-valued? g$r$5164$dF01I))
            (assertion-violation 'negative? '"not a real" g$r$5164$dF01I)
            (void))
          (> '0 g$r$5164$dF01I)))))
   (g$zero?$5101$dF01I
     g$zero?$5293$dF01I
     (case-lambda
       ((g$r$5165$dF01I)
        (begin
          (if (not (real-valued? g$r$5165$dF01I))
            (assertion-violation 'zero? '"not a real" g$r$5165$dF01I)
            (void))
          (= '0 g$r$5165$dF01I)))))
   (g$even?$5102$dF01I
     g$even?$5294$dF01I
     (case-lambda
       ((g$n$5166$dF01I)
        (begin
          (if (not (integer-valued? g$n$5166$dF01I))
            (assertion-violation 'even? '"not a integer" g$n$5166$dF01I)
            (void))
          (= '0 (mod g$n$5166$dF01I '2))))))
   (g$odd?$5103$dF01I
     g$odd?$5295$dF01I
     (case-lambda
       ((g$n$5167$dF01I)
        (begin
          (if (not (integer-valued? g$n$5167$dF01I))
            (assertion-violation 'odd? '"not a integer" g$n$5167$dF01I)
            (void))
          (= '1 (mod g$n$5167$dF01I '2))))))
   (g$max$5104$dF01I
     g$max$5296$dF01I
     (case-lambda
       ((g$a$5168$dF01I . g$rest$5169$dF01I)
        (g$fold-left$5066$dF01I
          (case-lambda
            ((g$a$5170$dF01I g$b$5171$dF01I)
             ((case-lambda
                ((g$r$5172$dF01I)
                 (if ((case-lambda
                        ((g$t$5173$dF01I)
                         (if g$t$5173$dF01I
                           g$t$5173$dF01I
                           (begin '#f (inexact? g$b$5171$dF01I)))))
                      (inexact? g$a$5170$dF01I))
                   (inexact g$r$5172$dF01I)
                   g$r$5172$dF01I)))
              (if (< g$a$5170$dF01I g$b$5171$dF01I)
                g$b$5171$dF01I
                g$a$5170$dF01I))))
          g$a$5168$dF01I
          g$rest$5169$dF01I))))
   (g$min$5105$dF01I
     g$min$5297$dF01I
     (case-lambda
       ((g$a$5174$dF01I . g$rest$5175$dF01I)
        (g$fold-left$5066$dF01I
          (case-lambda
            ((g$a$5176$dF01I g$b$5177$dF01I)
             ((case-lambda
                ((g$r$5178$dF01I)
                 (if ((case-lambda
                        ((g$t$5179$dF01I)
                         (if g$t$5179$dF01I
                           g$t$5179$dF01I
                           (begin '#f (inexact? g$b$5177$dF01I)))))
                      (inexact? g$a$5176$dF01I))
                   (inexact g$r$5178$dF01I)
                   g$r$5178$dF01I)))
              (if (> g$a$5176$dF01I g$b$5177$dF01I)
                g$b$5177$dF01I
                g$a$5176$dF01I))))
          g$a$5174$dF01I
          g$rest$5175$dF01I))))
   (g$gcd$5106$dF01I
     g$gcd$5298$dF01I
     (case-lambda
       (g$nums$5180$dF01I
        ((case-lambda
           ((g$t$5181$dF01I)
            (if (g$memv$5056$dF01I g$t$5181$dF01I '(0))
              '0
              (if (g$memv$5056$dF01I g$t$5181$dF01I '(1))
                ((case-lambda
                   ((g$n$5182$dF01I)
                    (begin
                      (if (not (integer-valued? g$n$5182$dF01I))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$5182$dF01I)
                        (void))
                      (abs g$n$5182$dF01I))))
                 (car g$nums$5180$dF01I))
                (if (g$memv$5056$dF01I g$t$5181$dF01I '(2))
                  ((case-lambda
                     ((g$a$5183$dF01I g$b$5184$dF01I)
                      (begin
                        (if (not (integer-valued? g$a$5183$dF01I))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$5183$dF01I)
                          (void))
                        (if (not (integer-valued? g$b$5184$dF01I))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$5184$dF01I)
                          (void))
                        (if (g$zero?$5101$dF01I g$b$5184$dF01I)
                          (abs g$a$5183$dF01I)
                          (abs (g$gcd$5106$dF01I
                                 g$b$5184$dF01I
                                 (mod g$a$5183$dF01I g$b$5184$dF01I)))))))
                   (car g$nums$5180$dF01I)
                   (g$cadr$5072$dF01I g$nums$5180$dF01I))
                  (g$fold-left$5066$dF01I
                    g$gcd$5106$dF01I
                    (abs (car g$nums$5180$dF01I))
                    (cdr g$nums$5180$dF01I)))))))
         (length g$nums$5180$dF01I)))))
   (g$lcm$5107$dF01I
     g$lcm$5299$dF01I
     (case-lambda
       (g$nums$5185$dF01I
        ((case-lambda
           ((g$t$5186$dF01I)
            (if (g$memv$5056$dF01I g$t$5186$dF01I '(0))
              '1
              (if (g$memv$5056$dF01I g$t$5186$dF01I '(1))
                ((case-lambda
                   ((g$n$5187$dF01I)
                    (begin
                      (if (not (integer-valued? g$n$5187$dF01I))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$5187$dF01I)
                        (void))
                      (abs g$n$5187$dF01I))))
                 (car g$nums$5185$dF01I))
                (if (g$memv$5056$dF01I g$t$5186$dF01I '(2))
                  ((case-lambda
                     ((g$a$5188$dF01I g$b$5189$dF01I)
                      (begin
                        (if (not (integer-valued? g$a$5188$dF01I))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$5188$dF01I)
                          (void))
                        (if (not (integer-valued? g$b$5189$dF01I))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$5189$dF01I)
                          (void))
                        (if ((case-lambda
                               ((g$t$5190$dF01I)
                                (if g$t$5190$dF01I
                                  g$t$5190$dF01I
                                  (begin
                                    '#f
                                    (g$zero?$5101$dF01I g$b$5189$dF01I)))))
                             (g$zero?$5101$dF01I g$a$5188$dF01I))
                          '0
                          (abs (* (/ g$a$5188$dF01I
                                     (g$gcd$5106$dF01I
                                       g$a$5188$dF01I
                                       g$b$5189$dF01I))
                                  g$b$5189$dF01I))))))
                   (car g$nums$5185$dF01I)
                   (g$cadr$5072$dF01I g$nums$5185$dF01I))
                  (g$fold-left$5066$dF01I
                    g$lcm$5107$dF01I
                    (abs (car g$nums$5185$dF01I))
                    (cdr g$nums$5185$dF01I)))))))
         (length g$nums$5185$dF01I)))))
   (g$string=?$5114$dF01I
     g$string=?$5300$dF01I
     (case-lambda
       ((g$a$5191$dF01I g$b$5192$dF01I . g$rest$5193$dF01I)
        (begin
          (if (not (string? g$a$5191$dF01I))
            (assertion-violation 'string=? '"not a string" g$a$5191$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5194$dF01I)
               (begin
                 (if (not (string? g$x$5194$dF01I))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5194$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5195$dF01I)
                     (begin
                       (set! g$a$5191$dF01I g$x$5194$dF01I)
                       g$r$5195$dF01I)))
                  (= (string-compare g$a$5191$dF01I g$x$5194$dF01I) '0)))))
            (cons g$b$5192$dF01I g$rest$5193$dF01I))))))
   (g$string<?$5115$dF01I
     g$string<?$5301$dF01I
     (case-lambda
       ((g$a$5196$dF01I g$b$5197$dF01I . g$rest$5198$dF01I)
        (begin
          (if (not (string? g$a$5196$dF01I))
            (assertion-violation 'string<? '"not a string" g$a$5196$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5199$dF01I)
               (begin
                 (if (not (string? g$x$5199$dF01I))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5199$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5200$dF01I)
                     (begin
                       (set! g$a$5196$dF01I g$x$5199$dF01I)
                       g$r$5200$dF01I)))
                  (< (string-compare g$a$5196$dF01I g$x$5199$dF01I) '0)))))
            (cons g$b$5197$dF01I g$rest$5198$dF01I))))))
   (g$string>?$5116$dF01I
     g$string>?$5302$dF01I
     (case-lambda
       ((g$a$5201$dF01I g$b$5202$dF01I . g$rest$5203$dF01I)
        (begin
          (if (not (string? g$a$5201$dF01I))
            (assertion-violation 'string>? '"not a string" g$a$5201$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5204$dF01I)
               (begin
                 (if (not (string? g$x$5204$dF01I))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5204$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5205$dF01I)
                     (begin
                       (set! g$a$5201$dF01I g$x$5204$dF01I)
                       g$r$5205$dF01I)))
                  (> (string-compare g$a$5201$dF01I g$x$5204$dF01I) '0)))))
            (cons g$b$5202$dF01I g$rest$5203$dF01I))))))
   (g$string<=?$5117$dF01I
     g$string<=?$5303$dF01I
     (case-lambda
       ((g$a$5206$dF01I g$b$5207$dF01I . g$rest$5208$dF01I)
        (begin
          (if (not (string? g$a$5206$dF01I))
            (assertion-violation 'string<=? '"not a string" g$a$5206$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5209$dF01I)
               (begin
                 (if (not (string? g$x$5209$dF01I))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5209$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5210$dF01I)
                     (begin
                       (set! g$a$5206$dF01I g$x$5209$dF01I)
                       g$r$5210$dF01I)))
                  (<= (string-compare g$a$5206$dF01I g$x$5209$dF01I) '0)))))
            (cons g$b$5207$dF01I g$rest$5208$dF01I))))))
   (g$string>=?$5118$dF01I
     g$string>=?$5304$dF01I
     (case-lambda
       ((g$a$5211$dF01I g$b$5212$dF01I . g$rest$5213$dF01I)
        (begin
          (if (not (string? g$a$5211$dF01I))
            (assertion-violation 'string>=? '"not a string" g$a$5211$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5214$dF01I)
               (begin
                 (if (not (string? g$x$5214$dF01I))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5214$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5215$dF01I)
                     (begin
                       (set! g$a$5211$dF01I g$x$5214$dF01I)
                       g$r$5215$dF01I)))
                  (>= (string-compare g$a$5211$dF01I g$x$5214$dF01I) '0)))))
            (cons g$b$5212$dF01I g$rest$5213$dF01I))))))
   (g$symbol=?$5119$dF01I
     g$symbol=?$5305$dF01I
     (case-lambda
       ((g$a$5216$dF01I g$b$5217$dF01I . g$rest$5218$dF01I)
        (begin
          (if (not (symbol? g$a$5216$dF01I))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5216$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5219$dF01I)
               (begin
                 (if (not (symbol? g$x$5219$dF01I))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5219$dF01I)
                   (void))
                 (eq? g$a$5216$dF01I g$x$5219$dF01I))))
            (cons g$b$5217$dF01I g$rest$5218$dF01I))))))
   (g$boolean=?$5120$dF01I
     g$boolean=?$5306$dF01I
     (case-lambda
       ((g$a$5220$dF01I g$b$5221$dF01I . g$rest$5222$dF01I)
        (begin
          (if (not (boolean? g$a$5220$dF01I))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5220$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5223$dF01I)
               (begin
                 (if (not (boolean? g$x$5223$dF01I))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5223$dF01I)
                   (void))
                 (eq? g$a$5220$dF01I g$x$5223$dF01I))))
            (cons g$b$5221$dF01I g$rest$5222$dF01I))))))
   (g$char=?$5127$dF01I
     g$char=?$5307$dF01I
     (case-lambda
       ((g$a$5224$dF01I g$b$5225$dF01I . g$rest$5226$dF01I)
        (begin
          (if (not (char? g$a$5224$dF01I))
            (assertion-violation 'char=? '"not a char" g$a$5224$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5227$dF01I)
               (begin
                 (if (not (char? g$x$5227$dF01I))
                   (assertion-violation 'char=? '"not a char" g$x$5227$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5228$dF01I)
                     (begin
                       (set! g$a$5224$dF01I g$x$5227$dF01I)
                       g$r$5228$dF01I)))
                  (= (char->integer g$a$5224$dF01I)
                     (char->integer g$x$5227$dF01I))))))
            (cons g$b$5225$dF01I g$rest$5226$dF01I))))))
   (g$char<?$5128$dF01I
     g$char<?$5308$dF01I
     (case-lambda
       ((g$a$5229$dF01I g$b$5230$dF01I . g$rest$5231$dF01I)
        (begin
          (if (not (char? g$a$5229$dF01I))
            (assertion-violation 'char<? '"not a char" g$a$5229$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5232$dF01I)
               (begin
                 (if (not (char? g$x$5232$dF01I))
                   (assertion-violation 'char<? '"not a char" g$x$5232$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5233$dF01I)
                     (begin
                       (set! g$a$5229$dF01I g$x$5232$dF01I)
                       g$r$5233$dF01I)))
                  (< (char->integer g$a$5229$dF01I)
                     (char->integer g$x$5232$dF01I))))))
            (cons g$b$5230$dF01I g$rest$5231$dF01I))))))
   (g$char>?$5129$dF01I
     g$char>?$5309$dF01I
     (case-lambda
       ((g$a$5234$dF01I g$b$5235$dF01I . g$rest$5236$dF01I)
        (begin
          (if (not (char? g$a$5234$dF01I))
            (assertion-violation 'char>? '"not a char" g$a$5234$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5237$dF01I)
               (begin
                 (if (not (char? g$x$5237$dF01I))
                   (assertion-violation 'char>? '"not a char" g$x$5237$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5238$dF01I)
                     (begin
                       (set! g$a$5234$dF01I g$x$5237$dF01I)
                       g$r$5238$dF01I)))
                  (> (char->integer g$a$5234$dF01I)
                     (char->integer g$x$5237$dF01I))))))
            (cons g$b$5235$dF01I g$rest$5236$dF01I))))))
   (g$char<=?$5130$dF01I
     g$char<=?$5310$dF01I
     (case-lambda
       ((g$a$5239$dF01I g$b$5240$dF01I . g$rest$5241$dF01I)
        (begin
          (if (not (char? g$a$5239$dF01I))
            (assertion-violation 'char<=? '"not a char" g$a$5239$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5242$dF01I)
               (begin
                 (if (not (char? g$x$5242$dF01I))
                   (assertion-violation 'char<=? '"not a char" g$x$5242$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5243$dF01I)
                     (begin
                       (set! g$a$5239$dF01I g$x$5242$dF01I)
                       g$r$5243$dF01I)))
                  (<= (char->integer g$a$5239$dF01I)
                      (char->integer g$x$5242$dF01I))))))
            (cons g$b$5240$dF01I g$rest$5241$dF01I))))))
   (g$char>=?$5131$dF01I
     g$char>=?$5311$dF01I
     (case-lambda
       ((g$a$5244$dF01I g$b$5245$dF01I . g$rest$5246$dF01I)
        (begin
          (if (not (char? g$a$5244$dF01I))
            (assertion-violation 'char>=? '"not a char" g$a$5244$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5247$dF01I)
               (begin
                 (if (not (char? g$x$5247$dF01I))
                   (assertion-violation 'char>=? '"not a char" g$x$5247$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5248$dF01I)
                     (begin
                       (set! g$a$5244$dF01I g$x$5247$dF01I)
                       g$r$5248$dF01I)))
                  (>= (char->integer g$a$5244$dF01I)
                      (char->integer g$x$5247$dF01I))))))
            (cons g$b$5245$dF01I g$rest$5246$dF01I))))))
   (g$rationalize$5132$dF01I
     g$rationalize$5312$dF01I
     (case-lambda
       ((g$x$5249$dF01I g$e$5250$dF01I)
        (if (if (infinite? g$x$5249$dF01I)
              (begin '#f (infinite? g$e$5250$dF01I))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5251$dF01I)
              (if (if (exact? g$x$5249$dF01I)
                    (begin '#f (exact? g$e$5250$dF01I))
                    '#f)
                g$r$5251$dF01I
                (inexact g$r$5251$dF01I))))
           (apply
             /
             (g$find-ratio$5133$dF01I g$x$5249$dF01I g$e$5250$dF01I)))))))
   (g$find-ratio$5133$dF01I
     g$find-ratio$5313$dF01I
     (case-lambda
       ((g$x$5252$dF01I g$e$5253$dF01I)
        (g$find-ratio-between$5134$dF01I
          (- g$x$5252$dF01I g$e$5253$dF01I)
          (+ g$x$5252$dF01I g$e$5253$dF01I)))))
   (g$find-ratio-between$5134$dF01I
     g$find-ratio-between$5314$dF01I
     (case-lambda
       ((g$x$5254$dF01I g$y$5255$dF01I)
        (letrec* ((g$sr$5256$dF01I
                    (case-lambda
                      ((g$x$5258$dF01I g$y$5259$dF01I)
                       ((case-lambda
                          ((g$fx$5260$dF01I g$fy$5261$dF01I)
                           (if (>= g$fx$5260$dF01I g$x$5258$dF01I)
                             (list g$fx$5260$dF01I '1)
                             (if (= g$fx$5260$dF01I g$fy$5261$dF01I)
                               ((case-lambda
                                  ((g$rat$5262$dF01I)
                                   (list
                                     (+ (g$cadr$5072$dF01I g$rat$5262$dF01I)
                                        (* g$fx$5260$dF01I
                                           (car g$rat$5262$dF01I)))
                                     (car g$rat$5262$dF01I))))
                                (g$sr$5256$dF01I
                                  (/ (- g$y$5259$dF01I g$fy$5261$dF01I))
                                  (/ (- g$x$5258$dF01I g$fx$5260$dF01I))))
                               (list (+ '1 g$fx$5260$dF01I) '1)))))
                        (exact (floor g$x$5258$dF01I))
                        (exact (floor g$y$5259$dF01I)))))))
          (if (< g$y$5255$dF01I g$x$5254$dF01I)
            (g$find-ratio-between$5134$dF01I g$y$5255$dF01I g$x$5254$dF01I)
            (if (>= g$x$5254$dF01I g$y$5255$dF01I)
              (list g$x$5254$dF01I '1)
              (if (g$positive?$5099$dF01I g$x$5254$dF01I)
                (g$sr$5256$dF01I g$x$5254$dF01I g$y$5255$dF01I)
                (if (g$negative?$5100$dF01I g$y$5255$dF01I)
                  ((case-lambda
                     ((g$rat$5257$dF01I)
                      (list
                        (- (car g$rat$5257$dF01I))
                        (g$cadr$5072$dF01I g$rat$5257$dF01I))))
                   (g$sr$5256$dF01I (- g$y$5255$dF01I) (- g$x$5254$dF01I)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5503$dF01I g$using$5536$dF01I (clr-using-internal 'system))
   (g$using$5505$dF01I
     g$using$5537$dF01I
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5506$dF01I
     g$make-eq-hashtable$5538$dF01I
     (case-lambda
       (() (g$make-eq-hashtable$5506$dF01I '32))
       ((g$k$5515$dF01I)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5515$dF01I)))))
   (g$make-eqv-hashtable$5507$dF01I
     g$make-eqv-hashtable$5539$dF01I
     (case-lambda
       (() (g$make-eqv-hashtable$5507$dF01I '32))
       ((g$k$5516$dF01I) (make-hashtable eqv-hash eqv? g$k$5516$dF01I))))
   (g$hashtable-size$5508$dF01I
     g$hashtable-size$5540$dF01I
     (case-lambda
       ((g$ht$5517$dF01I)
        (clr-call-internal 'hashtable 'get_count g$ht$5517$dF01I))))
   (g$hashtable-ref$5509$dF01I
     g$hashtable-ref$5541$dF01I
     (case-lambda
       ((g$ht$5518$dF01I g$key$5519$dF01I g$default$5520$dF01I)
        (letrec* ((g$r$5521$dF01I
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5518$dF01I
                      g$key$5519$dF01I)))
          (if (not (null? g$r$5521$dF01I))
            g$r$5521$dF01I
            g$default$5520$dF01I)))))
   (g$hashtable-set!$5510$dF01I
     g$hashtable-set!$5542$dF01I
     (case-lambda
       ((g$ht$5522$dF01I g$key$5523$dF01I g$obj$5524$dF01I)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5522$dF01I
          g$key$5523$dF01I
          g$obj$5524$dF01I))))
   (g$hashtable-delete!$5511$dF01I
     g$hashtable-delete!$5543$dF01I
     (case-lambda
       ((g$ht$5525$dF01I g$key$5526$dF01I)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5525$dF01I
          g$key$5526$dF01I))))
   (g$hashtable-contains?$5512$dF01I
     g$hashtable-contains?$5544$dF01I
     (case-lambda
       ((g$ht$5527$dF01I g$key$5528$dF01I)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5527$dF01I
          g$key$5528$dF01I))))
   (g$hashtable-update!$5513$dF01I
     g$hashtable-update!$5545$dF01I
     (case-lambda
       ((g$ht$5529$dF01I
          g$key$5530$dF01I
          g$proc$5531$dF01I
          g$default$5532$dF01I)
        (g$hashtable-set!$5510$dF01I
          g$ht$5529$dF01I
          g$key$5530$dF01I
          (g$proc$5531$dF01I
            (g$hashtable-ref$5509$dF01I
              g$ht$5529$dF01I
              g$key$5530$dF01I
              g$default$5532$dF01I))))))
   (g$hashtable-clear!$5514$dF01I
     g$hashtable-clear!$5546$dF01I
     (case-lambda
       ((g$ht$5533$dF01I) (g$hashtable-clear!$5514$dF01I g$ht$5533$dF01I '32))
       ((g$ht$5534$dF01I g$k$5535$dF01I)
        (clr-call-internal 'hashtable 'clear g$ht$5534$dF01I)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5548$dF01I g$using$5555$dF01I (clr-using-internal 'system.io))
   (g$file-exists?$5549$dF01I
     g$file-exists?$5556$dF01I
     (case-lambda
       ((g$fn$5552$dF01I)
        (clr-call-internal 'file 'exists '() g$fn$5552$dF01I))))
   (g$delete-file$5550$dF01I
     g$delete-file$5557$dF01I
     (case-lambda
       ((g$fn$5553$dF01I)
        (clr-call-internal 'file 'delete '() g$fn$5553$dF01I))))
   (g$get-directory-name$5551$dF01I
     g$get-directory-name$5558$dF01I
     (case-lambda
       ((g$path$5554$dF01I)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5554$dF01I)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5559$dF01I
     g$native-endianness$5670$dF01I
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5560$dF01I
     g$bytevector-u16-ref$5671$dF01I
     (case-lambda
       ((g$bytevector$5588$dF01I g$k$5589$dF01I g$endianness$5590$dF01I)
        (bytevector-uint-ref
          g$bytevector$5588$dF01I
          g$k$5589$dF01I
          g$endianness$5590$dF01I
          '2))))
   (g$bytevector-s16-ref$5561$dF01I
     g$bytevector-s16-ref$5672$dF01I
     (case-lambda
       ((g$bytevector$5591$dF01I g$k$5592$dF01I g$endianness$5593$dF01I)
        (bytevector-sint-ref
          g$bytevector$5591$dF01I
          g$k$5592$dF01I
          g$endianness$5593$dF01I
          '2))))
   (g$bytevector-u16-native-ref$5562$dF01I
     g$bytevector-u16-native-ref$5673$dF01I
     (case-lambda
       ((g$bytevector$5594$dF01I g$k$5595$dF01I)
        (bytevector-uint-ref
          g$bytevector$5594$dF01I
          g$k$5595$dF01I
          (g$native-endianness$5559$dF01I)
          '2))))
   (g$bytevector-s16-native-ref$5563$dF01I
     g$bytevector-s16-native-ref$5674$dF01I
     (case-lambda
       ((g$bytevector$5596$dF01I g$k$5597$dF01I)
        (bytevector-sint-ref
          g$bytevector$5596$dF01I
          g$k$5597$dF01I
          (g$native-endianness$5559$dF01I)
          '2))))
   (g$bytevector-u16-set!$5564$dF01I
     g$bytevector-u16-set!$5675$dF01I
     (case-lambda
       ((g$bytevector$5598$dF01I
          g$k$5599$dF01I
          g$n$5600$dF01I
          g$endianness$5601$dF01I)
        (bytevector-uint-set!
          g$bytevector$5598$dF01I
          g$k$5599$dF01I
          g$n$5600$dF01I
          g$endianness$5601$dF01I
          '2))))
   (g$bytevector-s16-set!$5565$dF01I
     g$bytevector-s16-set!$5676$dF01I
     (case-lambda
       ((g$bytevector$5602$dF01I
          g$k$5603$dF01I
          g$n$5604$dF01I
          g$endianness$5605$dF01I)
        (bytevector-sint-set!
          g$bytevector$5602$dF01I
          g$k$5603$dF01I
          g$n$5604$dF01I
          g$endianness$5605$dF01I
          '2))))
   (g$bytevector-u16-native-set!$5566$dF01I
     g$bytevector-u16-native-set!$5677$dF01I
     (case-lambda
       ((g$bytevector$5606$dF01I g$k$5607$dF01I g$n$5608$dF01I)
        (bytevector-uint-set!
          g$bytevector$5606$dF01I
          g$k$5607$dF01I
          g$n$5608$dF01I
          (g$native-endianness$5559$dF01I)
          '2))))
   (g$bytevector-s16-native-set!$5567$dF01I
     g$bytevector-s16-native-set!$5678$dF01I
     (case-lambda
       ((g$bytevector$5609$dF01I g$k$5610$dF01I g$n$5611$dF01I)
        (bytevector-sint-set!
          g$bytevector$5609$dF01I
          g$k$5610$dF01I
          g$n$5611$dF01I
          (g$native-endianness$5559$dF01I)
          '2))))
   (g$bytevector-u32-ref$5568$dF01I
     g$bytevector-u32-ref$5679$dF01I
     (case-lambda
       ((g$bytevector$5612$dF01I g$k$5613$dF01I g$endianness$5614$dF01I)
        (bytevector-uint-ref
          g$bytevector$5612$dF01I
          g$k$5613$dF01I
          g$endianness$5614$dF01I
          '4))))
   (g$bytevector-s32-ref$5569$dF01I
     g$bytevector-s32-ref$5680$dF01I
     (case-lambda
       ((g$bytevector$5615$dF01I g$k$5616$dF01I g$endianness$5617$dF01I)
        (bytevector-sint-ref
          g$bytevector$5615$dF01I
          g$k$5616$dF01I
          g$endianness$5617$dF01I
          '4))))
   (g$bytevector-u32-native-ref$5570$dF01I
     g$bytevector-u32-native-ref$5681$dF01I
     (case-lambda
       ((g$bytevector$5618$dF01I g$k$5619$dF01I)
        (bytevector-uint-ref
          g$bytevector$5618$dF01I
          g$k$5619$dF01I
          (g$native-endianness$5559$dF01I)
          '4))))
   (g$bytevector-s32-native-ref$5571$dF01I
     g$bytevector-s32-native-ref$5682$dF01I
     (case-lambda
       ((g$bytevector$5620$dF01I g$k$5621$dF01I)
        (bytevector-sint-ref
          g$bytevector$5620$dF01I
          g$k$5621$dF01I
          (g$native-endianness$5559$dF01I)
          '4))))
   (g$bytevector-u32-set!$5572$dF01I
     g$bytevector-u32-set!$5683$dF01I
     (case-lambda
       ((g$bytevector$5622$dF01I
          g$k$5623$dF01I
          g$n$5624$dF01I
          g$endianness$5625$dF01I)
        (bytevector-uint-set!
          g$bytevector$5622$dF01I
          g$k$5623$dF01I
          g$n$5624$dF01I
          g$endianness$5625$dF01I
          '4))))
   (g$bytevector-s32-set!$5573$dF01I
     g$bytevector-s32-set!$5684$dF01I
     (case-lambda
       ((g$bytevector$5626$dF01I
          g$k$5627$dF01I
          g$n$5628$dF01I
          g$endianness$5629$dF01I)
        (bytevector-sint-set!
          g$bytevector$5626$dF01I
          g$k$5627$dF01I
          g$n$5628$dF01I
          g$endianness$5629$dF01I
          '4))))
   (g$bytevector-u32-native-set!$5574$dF01I
     g$bytevector-u32-native-set!$5685$dF01I
     (case-lambda
       ((g$bytevector$5630$dF01I g$k$5631$dF01I g$n$5632$dF01I)
        (bytevector-uint-set!
          g$bytevector$5630$dF01I
          g$k$5631$dF01I
          g$n$5632$dF01I
          (g$native-endianness$5559$dF01I)
          '4))))
   (g$bytevector-s32-native-set!$5575$dF01I
     g$bytevector-s32-native-set!$5686$dF01I
     (case-lambda
       ((g$bytevector$5633$dF01I g$k$5634$dF01I g$n$5635$dF01I)
        (bytevector-sint-set!
          g$bytevector$5633$dF01I
          g$k$5634$dF01I
          g$n$5635$dF01I
          (g$native-endianness$5559$dF01I)
          '4))))
   (g$bytevector-u64-ref$5576$dF01I
     g$bytevector-u64-ref$5687$dF01I
     (case-lambda
       ((g$bytevector$5636$dF01I g$k$5637$dF01I g$endianness$5638$dF01I)
        (bytevector-uint-ref
          g$bytevector$5636$dF01I
          g$k$5637$dF01I
          g$endianness$5638$dF01I
          '8))))
   (g$bytevector-s64-ref$5577$dF01I
     g$bytevector-s64-ref$5688$dF01I
     (case-lambda
       ((g$bytevector$5639$dF01I g$k$5640$dF01I g$endianness$5641$dF01I)
        (bytevector-sint-ref
          g$bytevector$5639$dF01I
          g$k$5640$dF01I
          g$endianness$5641$dF01I
          '8))))
   (g$bytevector-u64-native-ref$5578$dF01I
     g$bytevector-u64-native-ref$5689$dF01I
     (case-lambda
       ((g$bytevector$5642$dF01I g$k$5643$dF01I)
        (bytevector-uint-ref
          g$bytevector$5642$dF01I
          g$k$5643$dF01I
          (g$native-endianness$5559$dF01I)
          '8))))
   (g$bytevector-s64-native-ref$5579$dF01I
     g$bytevector-s64-native-ref$5690$dF01I
     (case-lambda
       ((g$bytevector$5644$dF01I g$k$5645$dF01I)
        (bytevector-sint-ref
          g$bytevector$5644$dF01I
          g$k$5645$dF01I
          (g$native-endianness$5559$dF01I)
          '8))))
   (g$bytevector-u64-set!$5580$dF01I
     g$bytevector-u64-set!$5691$dF01I
     (case-lambda
       ((g$bytevector$5646$dF01I
          g$k$5647$dF01I
          g$n$5648$dF01I
          g$endianness$5649$dF01I)
        (bytevector-uint-set!
          g$bytevector$5646$dF01I
          g$k$5647$dF01I
          g$n$5648$dF01I
          g$endianness$5649$dF01I
          '8))))
   (g$bytevector-s64-set!$5581$dF01I
     g$bytevector-s64-set!$5692$dF01I
     (case-lambda
       ((g$bytevector$5650$dF01I
          g$k$5651$dF01I
          g$n$5652$dF01I
          g$endianness$5653$dF01I)
        (bytevector-sint-set!
          g$bytevector$5650$dF01I
          g$k$5651$dF01I
          g$n$5652$dF01I
          g$endianness$5653$dF01I
          '8))))
   (g$bytevector-u64-native-set!$5582$dF01I
     g$bytevector-u64-native-set!$5693$dF01I
     (case-lambda
       ((g$bytevector$5654$dF01I g$k$5655$dF01I g$n$5656$dF01I)
        (bytevector-uint-set!
          g$bytevector$5654$dF01I
          g$k$5655$dF01I
          g$n$5656$dF01I
          (g$native-endianness$5559$dF01I)
          '8))))
   (g$bytevector-s64-native-set!$5583$dF01I
     g$bytevector-s64-native-set!$5694$dF01I
     (case-lambda
       ((g$bytevector$5657$dF01I g$k$5658$dF01I g$n$5659$dF01I)
        (bytevector-sint-set!
          g$bytevector$5657$dF01I
          g$k$5658$dF01I
          g$n$5659$dF01I
          (g$native-endianness$5559$dF01I)
          '8))))
   (g$bytevector-ieee-single-native-ref$5584$dF01I
     g$bytevector-ieee-single-native-ref$5695$dF01I
     (case-lambda
       ((g$bytevector$5660$dF01I g$k$5661$dF01I)
        (if (not (g$zero?$5293$dF01I (mod g$k$5661$dF01I '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5661$dF01I)
          (bytevector-ieee-single-ref
            g$bytevector$5660$dF01I
            g$k$5661$dF01I
            (g$native-endianness$5559$dF01I))))))
   (g$bytevector-ieee-double-native-ref$5585$dF01I
     g$bytevector-ieee-double-native-ref$5696$dF01I
     (case-lambda
       ((g$bytevector$5662$dF01I g$k$5663$dF01I)
        (if (not (g$zero?$5293$dF01I (mod g$k$5663$dF01I '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5663$dF01I)
          (bytevector-ieee-double-ref
            g$bytevector$5662$dF01I
            g$k$5663$dF01I
            (g$native-endianness$5559$dF01I))))))
   (g$bytevector-ieee-single-native-set!$5586$dF01I
     g$bytevector-ieee-single-native-set!$5697$dF01I
     (case-lambda
       ((g$bytevector$5664$dF01I g$k$5665$dF01I g$x$5666$dF01I)
        (if (not (g$zero?$5293$dF01I (mod g$k$5665$dF01I '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5665$dF01I)
          (bytevector-ieee-single-set!
            g$bytevector$5664$dF01I
            g$k$5665$dF01I
            g$x$5666$dF01I
            (g$native-endianness$5559$dF01I))))))
   (g$bytevector-ieee-double-native-set!$5587$dF01I
     g$bytevector-ieee-double-native-set!$5698$dF01I
     (case-lambda
       ((g$bytevector$5667$dF01I g$k$5668$dF01I g$x$5669$dF01I)
        (if (not (g$zero?$5293$dF01I (mod g$k$5668$dF01I '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5668$dF01I)
          (bytevector-ieee-double-set!
            g$bytevector$5667$dF01I
            g$k$5668$dF01I
            g$x$5669$dF01I
            (g$native-endianness$5559$dF01I)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6690$5699$dF01I
     g$6690$5794$dF01I
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6693$dF01I
       '#f
       '#f
       '#()))
   (g$6692$5700$dF01I g$6692$5795$dF01I '#f)
   (g$6691$5701$dF01I
     g$6691$5796$dF01I
     (make-record-constructor-descriptor
       g$6690$5699$dF01I
       '#f
       g$6692$5700$dF01I))
   (g$&condition?$5702$dF01I
     g$&condition?$5797$dF01I
     (record-predicate g$6690$5699$dF01I))
   (g$make-&condition$5703$dF01I
     g$make-&condition$5798$dF01I
     (record-constructor g$6691$5701$dF01I))
   (g$&condition-rtd$5704$dF01I
     g$&condition-rtd$5799$dF01I
     g$6690$5699$dF01I)
   (g$&condition-rcd$5705$dF01I
     g$&condition-rcd$5800$dF01I
     g$6691$5701$dF01I)
   (g$6706$5706$dF01I
     g$6706$5801$dF01I
     (make-record-type-descriptor
       '&message
       g$6690$5699$dF01I
       'g$6709$dF01I
       '#f
       '#f
       '#((immutable message))))
   (g$6708$5707$dF01I g$6708$5802$dF01I '#f)
   (g$6707$5708$dF01I
     g$6707$5803$dF01I
     (make-record-constructor-descriptor
       g$6706$5706$dF01I
       g$6691$5701$dF01I
       g$6708$5707$dF01I))
   (g$6705$5709$dF01I
     g$6705$5804$dF01I
     (record-predicate g$6706$5706$dF01I))
   (g$make-message-condition$5710$dF01I
     g$make-message-condition$5805$dF01I
     (record-constructor g$6707$5708$dF01I))
   (g$6704$5711$dF01I
     g$6704$5806$dF01I
     (record-accessor g$6706$5706$dF01I '0))
   (g$message-condition?$5712$dF01I
     g$message-condition?$5807$dF01I
     (condition-predicate g$6706$5706$dF01I))
   (g$condition-message$5713$dF01I
     g$condition-message$5808$dF01I
     (condition-accessor g$6706$5706$dF01I g$6704$5711$dF01I))
   (g$6722$5714$dF01I
     g$6722$5809$dF01I
     (make-record-type-descriptor
       '&warning
       g$6690$5699$dF01I
       'g$6725$dF01I
       '#f
       '#f
       '#()))
   (g$6724$5715$dF01I g$6724$5810$dF01I '#f)
   (g$6723$5716$dF01I
     g$6723$5811$dF01I
     (make-record-constructor-descriptor
       g$6722$5714$dF01I
       g$6691$5701$dF01I
       g$6724$5715$dF01I))
   (g$6721$5717$dF01I
     g$6721$5812$dF01I
     (record-predicate g$6722$5714$dF01I))
   (g$make-warning$5718$dF01I
     g$make-warning$5813$dF01I
     (record-constructor g$6723$5716$dF01I))
   (g$warning?$5719$dF01I
     g$warning?$5814$dF01I
     (condition-predicate g$6722$5714$dF01I))
   (g$6736$5720$dF01I
     g$6736$5815$dF01I
     (make-record-type-descriptor
       '&serious
       g$6690$5699$dF01I
       'g$6739$dF01I
       '#f
       '#f
       '#()))
   (g$6738$5721$dF01I g$6738$5816$dF01I '#f)
   (g$6737$5722$dF01I
     g$6737$5817$dF01I
     (make-record-constructor-descriptor
       g$6736$5720$dF01I
       g$6691$5701$dF01I
       g$6738$5721$dF01I))
   (g$6735$5723$dF01I
     g$6735$5818$dF01I
     (record-predicate g$6736$5720$dF01I))
   (g$make-serious-condition$5724$dF01I
     g$make-serious-condition$5819$dF01I
     (record-constructor g$6737$5722$dF01I))
   (g$serious-condition?$5725$dF01I
     g$serious-condition?$5820$dF01I
     (condition-predicate g$6736$5720$dF01I))
   (g$6750$5726$dF01I
     g$6750$5821$dF01I
     (make-record-type-descriptor
       '&error
       g$6736$5720$dF01I
       'g$6753$dF01I
       '#f
       '#f
       '#()))
   (g$6752$5727$dF01I g$6752$5822$dF01I '#f)
   (g$6751$5728$dF01I
     g$6751$5823$dF01I
     (make-record-constructor-descriptor
       g$6750$5726$dF01I
       g$6737$5722$dF01I
       g$6752$5727$dF01I))
   (g$6749$5729$dF01I
     g$6749$5824$dF01I
     (record-predicate g$6750$5726$dF01I))
   (g$make-error$5730$dF01I
     g$make-error$5825$dF01I
     (record-constructor g$6751$5728$dF01I))
   (g$error?$5731$dF01I
     g$error?$5826$dF01I
     (condition-predicate g$6750$5726$dF01I))
   (g$6764$5732$dF01I
     g$6764$5827$dF01I
     (make-record-type-descriptor
       '&violation
       g$6736$5720$dF01I
       'g$6767$dF01I
       '#f
       '#f
       '#()))
   (g$6766$5733$dF01I g$6766$5828$dF01I '#f)
   (g$6765$5734$dF01I
     g$6765$5829$dF01I
     (make-record-constructor-descriptor
       g$6764$5732$dF01I
       g$6737$5722$dF01I
       g$6766$5733$dF01I))
   (g$6763$5735$dF01I
     g$6763$5830$dF01I
     (record-predicate g$6764$5732$dF01I))
   (g$make-violation$5736$dF01I
     g$make-violation$5831$dF01I
     (record-constructor g$6765$5734$dF01I))
   (g$violation?$5737$dF01I
     g$violation?$5832$dF01I
     (condition-predicate g$6764$5732$dF01I))
   (g$6778$5738$dF01I
     g$6778$5833$dF01I
     (make-record-type-descriptor
       '&assertion
       g$6764$5732$dF01I
       'g$6781$dF01I
       '#f
       '#f
       '#()))
   (g$6780$5739$dF01I g$6780$5834$dF01I '#f)
   (g$6779$5740$dF01I
     g$6779$5835$dF01I
     (make-record-constructor-descriptor
       g$6778$5738$dF01I
       g$6765$5734$dF01I
       g$6780$5739$dF01I))
   (g$6777$5741$dF01I
     g$6777$5836$dF01I
     (record-predicate g$6778$5738$dF01I))
   (g$make-assertion-violation$5742$dF01I
     g$make-assertion-violation$5837$dF01I
     (record-constructor g$6779$5740$dF01I))
   (g$assertion-violation?$5743$dF01I
     g$assertion-violation?$5838$dF01I
     (condition-predicate g$6778$5738$dF01I))
   (g$6793$5744$dF01I
     g$6793$5839$dF01I
     (make-record-type-descriptor
       '&irritants
       g$6690$5699$dF01I
       'g$6796$dF01I
       '#f
       '#f
       '#((immutable irritants))))
   (g$6795$5745$dF01I g$6795$5840$dF01I '#f)
   (g$6794$5746$dF01I
     g$6794$5841$dF01I
     (make-record-constructor-descriptor
       g$6793$5744$dF01I
       g$6691$5701$dF01I
       g$6795$5745$dF01I))
   (g$6792$5747$dF01I
     g$6792$5842$dF01I
     (record-predicate g$6793$5744$dF01I))
   (g$make-irritants-condition$5748$dF01I
     g$make-irritants-condition$5843$dF01I
     (record-constructor g$6794$5746$dF01I))
   (g$6791$5749$dF01I
     g$6791$5844$dF01I
     (record-accessor g$6793$5744$dF01I '0))
   (g$irritants-condition?$5750$dF01I
     g$irritants-condition?$5845$dF01I
     (condition-predicate g$6793$5744$dF01I))
   (g$condition-irritants$5751$dF01I
     g$condition-irritants$5846$dF01I
     (condition-accessor g$6793$5744$dF01I g$6791$5749$dF01I))
   (g$6810$5752$dF01I
     g$6810$5847$dF01I
     (make-record-type-descriptor
       '&who
       g$6690$5699$dF01I
       'g$6813$dF01I
       '#f
       '#f
       '#((immutable who))))
   (g$6812$5753$dF01I g$6812$5848$dF01I '#f)
   (g$6811$5754$dF01I
     g$6811$5849$dF01I
     (make-record-constructor-descriptor
       g$6810$5752$dF01I
       g$6691$5701$dF01I
       g$6812$5753$dF01I))
   (g$6809$5755$dF01I
     g$6809$5850$dF01I
     (record-predicate g$6810$5752$dF01I))
   (g$make-who-condition$5756$dF01I
     g$make-who-condition$5851$dF01I
     (record-constructor g$6811$5754$dF01I))
   (g$6808$5757$dF01I
     g$6808$5852$dF01I
     (record-accessor g$6810$5752$dF01I '0))
   (g$who-condition?$5758$dF01I
     g$who-condition?$5853$dF01I
     (condition-predicate g$6810$5752$dF01I))
   (g$condition-who$5759$dF01I
     g$condition-who$5854$dF01I
     (condition-accessor g$6810$5752$dF01I g$6808$5757$dF01I))
   (g$6826$5760$dF01I
     g$6826$5855$dF01I
     (make-record-type-descriptor
       '&non-continuable
       g$6764$5732$dF01I
       'g$6829$dF01I
       '#f
       '#f
       '#()))
   (g$6828$5761$dF01I g$6828$5856$dF01I '#f)
   (g$6827$5762$dF01I
     g$6827$5857$dF01I
     (make-record-constructor-descriptor
       g$6826$5760$dF01I
       g$6765$5734$dF01I
       g$6828$5761$dF01I))
   (g$6825$5763$dF01I
     g$6825$5858$dF01I
     (record-predicate g$6826$5760$dF01I))
   (g$make-non-continuable-violation$5764$dF01I
     g$make-non-continuable-violation$5859$dF01I
     (record-constructor g$6827$5762$dF01I))
   (g$non-continuable-violation?$5765$dF01I
     g$non-continuable-violation?$5860$dF01I
     (condition-predicate g$6826$5760$dF01I))
   (g$6840$5766$dF01I
     g$6840$5861$dF01I
     (make-record-type-descriptor
       '&implementation-restriction
       g$6764$5732$dF01I
       'g$6843$dF01I
       '#f
       '#f
       '#()))
   (g$6842$5767$dF01I g$6842$5862$dF01I '#f)
   (g$6841$5768$dF01I
     g$6841$5863$dF01I
     (make-record-constructor-descriptor
       g$6840$5766$dF01I
       g$6765$5734$dF01I
       g$6842$5767$dF01I))
   (g$6839$5769$dF01I
     g$6839$5864$dF01I
     (record-predicate g$6840$5766$dF01I))
   (g$make-implementation-restriction-violation$5770$dF01I
     g$make-implementation-restriction-violation$5865$dF01I
     (record-constructor g$6841$5768$dF01I))
   (g$implementation-restriction-violation?$5771$dF01I
     g$implementation-restriction-violation?$5866$dF01I
     (condition-predicate g$6840$5766$dF01I))
   (g$6854$5772$dF01I
     g$6854$5867$dF01I
     (make-record-type-descriptor
       '&lexical
       g$6764$5732$dF01I
       'g$6857$dF01I
       '#f
       '#f
       '#()))
   (g$6856$5773$dF01I g$6856$5868$dF01I '#f)
   (g$6855$5774$dF01I
     g$6855$5869$dF01I
     (make-record-constructor-descriptor
       g$6854$5772$dF01I
       g$6765$5734$dF01I
       g$6856$5773$dF01I))
   (g$6853$5775$dF01I
     g$6853$5870$dF01I
     (record-predicate g$6854$5772$dF01I))
   (g$make-lexical-violation$5776$dF01I
     g$make-lexical-violation$5871$dF01I
     (record-constructor g$6855$5774$dF01I))
   (g$lexical-violation?$5777$dF01I
     g$lexical-violation?$5872$dF01I
     (condition-predicate g$6854$5772$dF01I))
   (g$6870$5778$dF01I
     g$6870$5873$dF01I
     (make-record-type-descriptor
       '&syntax
       g$6764$5732$dF01I
       'g$6873$dF01I
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6872$5779$dF01I g$6872$5874$dF01I '#f)
   (g$6871$5780$dF01I
     g$6871$5875$dF01I
     (make-record-constructor-descriptor
       g$6870$5778$dF01I
       g$6765$5734$dF01I
       g$6872$5779$dF01I))
   (g$6869$5781$dF01I
     g$6869$5876$dF01I
     (record-predicate g$6870$5778$dF01I))
   (g$make-syntax-violation$5782$dF01I
     g$make-syntax-violation$5877$dF01I
     (record-constructor g$6871$5780$dF01I))
   (g$6867$5783$dF01I
     g$6867$5878$dF01I
     (record-accessor g$6870$5778$dF01I '0))
   (g$6868$5784$dF01I
     g$6868$5879$dF01I
     (record-accessor g$6870$5778$dF01I '1))
   (g$syntax-violation?$5785$dF01I
     g$syntax-violation?$5880$dF01I
     (condition-predicate g$6870$5778$dF01I))
   (g$syntax-violation-form$5786$dF01I
     g$syntax-violation-form$5881$dF01I
     (condition-accessor g$6870$5778$dF01I g$6867$5783$dF01I))
   (g$syntax-violation-subform$5787$dF01I
     g$syntax-violation-subform$5882$dF01I
     (condition-accessor g$6870$5778$dF01I g$6868$5784$dF01I))
   (g$6888$5788$dF01I
     g$6888$5883$dF01I
     (make-record-type-descriptor
       '&undefined
       g$6764$5732$dF01I
       'g$6891$dF01I
       '#f
       '#f
       '#()))
   (g$6890$5789$dF01I g$6890$5884$dF01I '#f)
   (g$6889$5790$dF01I
     g$6889$5885$dF01I
     (make-record-constructor-descriptor
       g$6888$5788$dF01I
       g$6765$5734$dF01I
       g$6890$5789$dF01I))
   (g$6887$5791$dF01I
     g$6887$5886$dF01I
     (record-predicate g$6888$5788$dF01I))
   (g$make-undefined-violation$5792$dF01I
     g$make-undefined-violation$5887$dF01I
     (record-constructor g$6889$5790$dF01I))
   (g$undefined-violation?$5793$dF01I
     g$undefined-violation?$5888$dF01I
     (condition-predicate g$6888$5788$dF01I)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5889$dF01I
     g$append!$5895$dF01I
     (case-lambda
       ((g$a$5890$dF01I . g$b$5891$dF01I)
        (if (null? g$a$5890$dF01I)
          g$b$5891$dF01I
          (if (null? g$b$5891$dF01I)
            g$a$5890$dF01I
            (begin
              ((letrec ((g$f$5892$dF01I
                          (case-lambda
                            ((g$a$5893$dF01I)
                             ((case-lambda
                                ((g$n$5894$dF01I)
                                 (if (null? g$n$5894$dF01I)
                                   (set-cdr! g$a$5893$dF01I g$b$5891$dF01I)
                                   (g$f$5892$dF01I g$n$5894$dF01I))))
                              (cdr g$a$5893$dF01I))))))
                 g$f$5892$dF01I)
               g$a$5890$dF01I)
              g$a$5890$dF01I)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$5896$dF01I g$inexact->exact$5916$dF01I exact)
   (g$exact->inexact$5897$dF01I g$exact->inexact$5917$dF01I inexact)
   (g$sign$5898$dF01I
     g$sign$5918$dF01I
     (case-lambda
       ((g$n$5904$dF01I)
        (if (> g$n$5904$dF01I '0) '1 (if (< g$n$5904$dF01I '0) '-1 '0)))))
   (g$quotient$5899$dF01I
     g$quotient$5919$dF01I
     (case-lambda
       ((g$n1$5905$dF01I g$n2$5906$dF01I)
        (begin
          (if (not (integer-valued? g$n1$5905$dF01I))
            (assertion-violation 'quotient '"not an integer" g$n1$5905$dF01I)
            (void))
          (if (not (integer-valued? g$n2$5906$dF01I))
            (assertion-violation 'quotient '"not an integer" g$n2$5906$dF01I)
            (void))
          (* (g$sign$5898$dF01I g$n1$5905$dF01I)
             (g$sign$5898$dF01I g$n2$5906$dF01I)
             (div (abs g$n1$5905$dF01I) (abs g$n2$5906$dF01I)))))))
   (g$remainder$5900$dF01I
     g$remainder$5920$dF01I
     (case-lambda
       ((g$n1$5907$dF01I g$n2$5908$dF01I)
        (begin
          (if (not (integer-valued? g$n1$5907$dF01I))
            (assertion-violation 'remainder '"not an integer" g$n1$5907$dF01I)
            (void))
          (if (not (integer-valued? g$n2$5908$dF01I))
            (assertion-violation 'remainder '"not an integer" g$n2$5908$dF01I)
            (void))
          (* (g$sign$5898$dF01I g$n1$5907$dF01I)
             (mod (abs g$n1$5907$dF01I) (abs g$n2$5908$dF01I)))))))
   (g$modulo$5901$dF01I
     g$modulo$5921$dF01I
     (case-lambda
       ((g$n1$5909$dF01I g$n2$5910$dF01I)
        (begin
          (if (not (integer-valued? g$n1$5909$dF01I))
            (assertion-violation 'modulo '"not an integer" g$n1$5909$dF01I)
            (void))
          (if (not (integer-valued? g$n2$5910$dF01I))
            (assertion-violation 'modulo '"not an integer" g$n2$5910$dF01I)
            (void))
          (* (g$sign$5898$dF01I g$n2$5910$dF01I)
             (mod (* (g$sign$5898$dF01I g$n2$5910$dF01I) g$n1$5909$dF01I)
                  (abs g$n2$5910$dF01I)))))))
   (g$make-promise$5902$dF01I
     g$make-promise$5922$dF01I
     (case-lambda
       ((g$proc$5911$dF01I)
        ((case-lambda
           ((g$result-ready?$5912$dF01I g$result$5913$dF01I)
            (case-lambda
              (()
               (if g$result-ready?$5912$dF01I
                 g$result$5913$dF01I
                 ((case-lambda
                    ((g$x$5914$dF01I)
                     (if g$result-ready?$5912$dF01I
                       g$result$5913$dF01I
                       (begin
                         (set! g$result-ready?$5912$dF01I '#t)
                         (set! g$result$5913$dF01I g$x$5914$dF01I)
                         g$result$5913$dF01I))))
                  (g$proc$5911$dF01I)))))))
         '#f
         '#f))))
   (g$force$5903$dF01I
     g$force$5923$dF01I
     (case-lambda ((g$object$5915$dF01I) (g$object$5915$dF01I)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5924$dF01I
     g$split$5949$dF01I
     (case-lambda
       ((g$ls$5928$dF01I)
        ((letrec ((g$loop$5929$dF01I
                    (case-lambda
                      ((g$rest$5930$dF01I g$left$5931$dF01I g$right$5932$dF01I)
                       (if (null? g$rest$5930$dF01I)
                         (cons g$left$5931$dF01I g$right$5932$dF01I)
                         (if (null? (cdr g$rest$5930$dF01I))
                           (cons
                             (cons (car g$rest$5930$dF01I) g$left$5931$dF01I)
                             g$right$5932$dF01I)
                           (g$loop$5929$dF01I
                             (g$cddr$5266$dF01I g$rest$5930$dF01I)
                             (cons (car g$rest$5930$dF01I) g$left$5931$dF01I)
                             (cons
                               (g$cadr$5264$dF01I g$rest$5930$dF01I)
                               g$right$5932$dF01I))))))))
           g$loop$5929$dF01I)
         g$ls$5928$dF01I
         '()
         '()))))
   (g$reverse-it$5925$dF01I
     g$reverse-it$5950$dF01I
     (case-lambda
       ((g$head$5933$dF01I g$tail$5934$dF01I)
        (if (null? g$head$5933$dF01I)
          g$tail$5934$dF01I
          (g$reverse-it$5925$dF01I
            (cdr g$head$5933$dF01I)
            (cons (car g$head$5933$dF01I) g$tail$5934$dF01I))))))
   (g$merge$5926$dF01I
     g$merge$5951$dF01I
     (case-lambda
       ((g$list-1$5935$dF01I g$list-2$5936$dF01I g$precedes?$5937$dF01I)
        ((letrec ((g$loop$5938$dF01I
                    (case-lambda
                      ((g$source-1$5939$dF01I
                         g$source-2$5940$dF01I
                         g$so-far$5941$dF01I)
                       (if (null? g$source-1$5939$dF01I)
                         (g$reverse-it$5925$dF01I
                           g$so-far$5941$dF01I
                           g$source-2$5940$dF01I)
                         (if (null? g$source-2$5940$dF01I)
                           (g$reverse-it$5925$dF01I
                             g$so-far$5941$dF01I
                             g$source-1$5939$dF01I)
                           ((case-lambda
                              ((g$car-1$5942$dF01I g$car-2$5943$dF01I)
                               (if (g$precedes?$5937$dF01I
                                     g$car-2$5943$dF01I
                                     g$car-1$5942$dF01I)
                                 (g$loop$5938$dF01I
                                   g$source-1$5939$dF01I
                                   (cdr g$source-2$5940$dF01I)
                                   (cons
                                     g$car-2$5943$dF01I
                                     g$so-far$5941$dF01I))
                                 (g$loop$5938$dF01I
                                   g$source-2$5940$dF01I
                                   (cdr g$source-1$5939$dF01I)
                                   (cons
                                     g$car-1$5942$dF01I
                                     g$so-far$5941$dF01I)))))
                            (car g$source-1$5939$dF01I)
                            (car g$source-2$5940$dF01I))))))))
           g$loop$5938$dF01I)
         g$list-1$5935$dF01I
         g$list-2$5936$dF01I
         '()))))
   (g$list-sort$5927$dF01I
     g$list-sort$5952$dF01I
     (case-lambda
       ((g$precedes?$5944$dF01I g$ls$5945$dF01I)
        (if (null? g$ls$5945$dF01I)
          '()
          ((letrec ((g$helper$5946$dF01I
                      (case-lambda
                        ((g$piece$5947$dF01I)
                         (if (null? (cdr g$piece$5947$dF01I))
                           g$piece$5947$dF01I
                           ((case-lambda
                              ((g$parts$5948$dF01I)
                               (g$merge$5926$dF01I
                                 (g$helper$5946$dF01I (car g$parts$5948$dF01I))
                                 (g$helper$5946$dF01I (cdr g$parts$5948$dF01I))
                                 g$precedes?$5944$dF01I)))
                            (g$split$5924$dF01I g$piece$5947$dF01I)))))))
             g$helper$5946$dF01I)
           g$ls$5945$dF01I))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$5959$dF01I
     g$string-ci=?$6025$dF01I
     (case-lambda
       ((g$a$5975$dF01I g$b$5976$dF01I . g$rest$5977$dF01I)
        (begin
          (if (not (string? g$a$5975$dF01I))
            (assertion-violation 'string-ci=? '"not a string" g$a$5975$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5978$dF01I)
               (begin
                 (if (not (string? g$x$5978$dF01I))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$5978$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5979$dF01I)
                     (begin
                       (set! g$a$5975$dF01I g$x$5978$dF01I)
                       g$r$5979$dF01I)))
                  (= (string-ci-compare g$a$5975$dF01I g$x$5978$dF01I) '0)))))
            (cons g$b$5976$dF01I g$rest$5977$dF01I))))))
   (g$string-ci<?$5960$dF01I
     g$string-ci<?$6026$dF01I
     (case-lambda
       ((g$a$5980$dF01I g$b$5981$dF01I . g$rest$5982$dF01I)
        (begin
          (if (not (string? g$a$5980$dF01I))
            (assertion-violation 'string-ci<? '"not a string" g$a$5980$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5983$dF01I)
               (begin
                 (if (not (string? g$x$5983$dF01I))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$5983$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5984$dF01I)
                     (begin
                       (set! g$a$5980$dF01I g$x$5983$dF01I)
                       g$r$5984$dF01I)))
                  (< (string-ci-compare g$a$5980$dF01I g$x$5983$dF01I) '0)))))
            (cons g$b$5981$dF01I g$rest$5982$dF01I))))))
   (g$string-ci>?$5961$dF01I
     g$string-ci>?$6027$dF01I
     (case-lambda
       ((g$a$5985$dF01I g$b$5986$dF01I . g$rest$5987$dF01I)
        (begin
          (if (not (string? g$a$5985$dF01I))
            (assertion-violation 'string-ci>? '"not a string" g$a$5985$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5988$dF01I)
               (begin
                 (if (not (string? g$x$5988$dF01I))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$5988$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5989$dF01I)
                     (begin
                       (set! g$a$5985$dF01I g$x$5988$dF01I)
                       g$r$5989$dF01I)))
                  (> (string-ci-compare g$a$5985$dF01I g$x$5988$dF01I) '0)))))
            (cons g$b$5986$dF01I g$rest$5987$dF01I))))))
   (g$string-ci<=?$5962$dF01I
     g$string-ci<=?$6028$dF01I
     (case-lambda
       ((g$a$5990$dF01I g$b$5991$dF01I . g$rest$5992$dF01I)
        (begin
          (if (not (string? g$a$5990$dF01I))
            (assertion-violation 'string-ci<=? '"not a string" g$a$5990$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5993$dF01I)
               (begin
                 (if (not (string? g$x$5993$dF01I))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$5993$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5994$dF01I)
                     (begin
                       (set! g$a$5990$dF01I g$x$5993$dF01I)
                       g$r$5994$dF01I)))
                  (<= (string-ci-compare g$a$5990$dF01I g$x$5993$dF01I) '0)))))
            (cons g$b$5991$dF01I g$rest$5992$dF01I))))))
   (g$string-ci>=?$5963$dF01I
     g$string-ci>=?$6029$dF01I
     (case-lambda
       ((g$a$5995$dF01I g$b$5996$dF01I . g$rest$5997$dF01I)
        (begin
          (if (not (string? g$a$5995$dF01I))
            (assertion-violation 'string-ci>=? '"not a string" g$a$5995$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$5998$dF01I)
               (begin
                 (if (not (string? g$x$5998$dF01I))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$5998$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$5999$dF01I)
                     (begin
                       (set! g$a$5995$dF01I g$x$5998$dF01I)
                       g$r$5999$dF01I)))
                  (>= (string-ci-compare g$a$5995$dF01I g$x$5998$dF01I) '0)))))
            (cons g$b$5996$dF01I g$rest$5997$dF01I))))))
   (g$char-ci=?$5970$dF01I
     g$char-ci=?$6030$dF01I
     (case-lambda
       ((g$a$6000$dF01I g$b$6001$dF01I . g$rest$6002$dF01I)
        (begin
          (if (not (char? g$a$6000$dF01I))
            (assertion-violation 'char-ci=? '"not a char" g$a$6000$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$6003$dF01I)
               (begin
                 (if (not (char? g$x$6003$dF01I))
                   (assertion-violation 'char-ci=? '"not a char" g$x$6003$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$6004$dF01I)
                     (begin
                       (set! g$a$6000$dF01I g$x$6003$dF01I)
                       g$r$6004$dF01I)))
                  (= (char->integer (char-upcase g$a$6000$dF01I))
                     (char->integer (char-upcase g$x$6003$dF01I)))))))
            (cons g$b$6001$dF01I g$rest$6002$dF01I))))))
   (g$char-ci<?$5971$dF01I
     g$char-ci<?$6031$dF01I
     (case-lambda
       ((g$a$6005$dF01I g$b$6006$dF01I . g$rest$6007$dF01I)
        (begin
          (if (not (char? g$a$6005$dF01I))
            (assertion-violation 'char-ci<? '"not a char" g$a$6005$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$6008$dF01I)
               (begin
                 (if (not (char? g$x$6008$dF01I))
                   (assertion-violation 'char-ci<? '"not a char" g$x$6008$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$6009$dF01I)
                     (begin
                       (set! g$a$6005$dF01I g$x$6008$dF01I)
                       g$r$6009$dF01I)))
                  (< (char->integer (char-upcase g$a$6005$dF01I))
                     (char->integer (char-upcase g$x$6008$dF01I)))))))
            (cons g$b$6006$dF01I g$rest$6007$dF01I))))))
   (g$char-ci>?$5972$dF01I
     g$char-ci>?$6032$dF01I
     (case-lambda
       ((g$a$6010$dF01I g$b$6011$dF01I . g$rest$6012$dF01I)
        (begin
          (if (not (char? g$a$6010$dF01I))
            (assertion-violation 'char-ci>? '"not a char" g$a$6010$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$6013$dF01I)
               (begin
                 (if (not (char? g$x$6013$dF01I))
                   (assertion-violation 'char-ci>? '"not a char" g$x$6013$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$6014$dF01I)
                     (begin
                       (set! g$a$6010$dF01I g$x$6013$dF01I)
                       g$r$6014$dF01I)))
                  (> (char->integer (char-upcase g$a$6010$dF01I))
                     (char->integer (char-upcase g$x$6013$dF01I)))))))
            (cons g$b$6011$dF01I g$rest$6012$dF01I))))))
   (g$char-ci<=?$5973$dF01I
     g$char-ci<=?$6033$dF01I
     (case-lambda
       ((g$a$6015$dF01I g$b$6016$dF01I . g$rest$6017$dF01I)
        (begin
          (if (not (char? g$a$6015$dF01I))
            (assertion-violation 'char-ci<=? '"not a char" g$a$6015$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$6018$dF01I)
               (begin
                 (if (not (char? g$x$6018$dF01I))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$6018$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$6019$dF01I)
                     (begin
                       (set! g$a$6015$dF01I g$x$6018$dF01I)
                       g$r$6019$dF01I)))
                  (<= (char->integer (char-upcase g$a$6015$dF01I))
                      (char->integer (char-upcase g$x$6018$dF01I)))))))
            (cons g$b$6016$dF01I g$rest$6017$dF01I))))))
   (g$char-ci>=?$5974$dF01I
     g$char-ci>=?$6034$dF01I
     (case-lambda
       ((g$a$6020$dF01I g$b$6021$dF01I . g$rest$6022$dF01I)
        (begin
          (if (not (char? g$a$6020$dF01I))
            (assertion-violation 'char-ci>=? '"not a char" g$a$6020$dF01I)
            (void))
          (g$for-all$5061$dF01I
            (case-lambda
              ((g$x$6023$dF01I)
               (begin
                 (if (not (char? g$x$6023$dF01I))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$6023$dF01I)
                   (void))
                 ((case-lambda
                    ((g$r$6024$dF01I)
                     (begin
                       (set! g$a$6020$dF01I g$x$6023$dF01I)
                       g$r$6024$dF01I)))
                  (>= (char->integer (char-upcase g$a$6020$dF01I))
                      (char->integer (char-upcase g$x$6023$dF01I)))))))
            (cons g$b$6021$dF01I g$rest$6022$dF01I)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$6035$dF01I
     g$bitwise-if$6066$dF01I
     (case-lambda
       ((g$ei1$6042$dF01I g$ei2$6043$dF01I g$ei3$6044$dF01I)
        (bitwise-ior
          (bitwise-and g$ei1$6042$dF01I g$ei2$6043$dF01I)
          (bitwise-and (bitwise-not g$ei1$6042$dF01I) g$ei3$6044$dF01I)))))
   (g$bitwise-copy-bit$6036$dF01I
     g$bitwise-copy-bit$6067$dF01I
     (case-lambda
       ((g$ei1$6045$dF01I g$ei2$6046$dF01I g$ei3$6047$dF01I)
        (g$bitwise-if$6035$dF01I
          (g$bitwise-arithmetic-shift-left$6039$dF01I '1 g$ei2$6046$dF01I)
          (g$bitwise-arithmetic-shift-left$6039$dF01I
            g$ei3$6047$dF01I
            g$ei2$6046$dF01I)
          g$ei1$6045$dF01I))))
   (g$bitwise-bit-field$6037$dF01I
     g$bitwise-bit-field$6068$dF01I
     (case-lambda
       ((g$ei1$6048$dF01I g$ei2$6049$dF01I g$ei3$6050$dF01I)
        (g$bitwise-arithmetic-shift-right$6040$dF01I
          (bitwise-and
            g$ei1$6048$dF01I
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6039$dF01I
                '-1
                g$ei3$6050$dF01I)))
          g$ei2$6049$dF01I))))
   (g$bitwise-copy-bit-field$6038$dF01I
     g$bitwise-copy-bit-field$6069$dF01I
     (case-lambda
       ((g$to$6051$dF01I g$start$6052$dF01I g$end$6053$dF01I g$from$6054$dF01I)
        (g$bitwise-if$6035$dF01I
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$6039$dF01I '-1 g$start$6052$dF01I)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6039$dF01I
                '-1
                g$end$6053$dF01I)))
          (g$bitwise-arithmetic-shift-left$6039$dF01I
            g$from$6054$dF01I
            g$start$6052$dF01I)
          g$to$6051$dF01I))))
   (g$bitwise-arithmetic-shift-left$6039$dF01I
     g$bitwise-arithmetic-shift-left$6070$dF01I
     (case-lambda
       ((g$ei1$6055$dF01I g$ei2$6056$dF01I)
        (bitwise-arithmetic-shift g$ei1$6055$dF01I g$ei2$6056$dF01I))))
   (g$bitwise-arithmetic-shift-right$6040$dF01I
     g$bitwise-arithmetic-shift-right$6071$dF01I
     (case-lambda
       ((g$ei1$6057$dF01I g$ei2$6058$dF01I)
        (bitwise-arithmetic-shift g$ei1$6057$dF01I (- g$ei2$6058$dF01I)))))
   (g$bitwise-rotate-bit-field$6041$dF01I
     g$bitwise-rotate-bit-field$6072$dF01I
     (case-lambda
       ((g$n$6059$dF01I g$start$6060$dF01I g$end$6061$dF01I g$count$6062$dF01I)
        ((case-lambda
           ((g$width$6063$dF01I)
            (if (g$positive?$5291$dF01I g$width$6063$dF01I)
              ((case-lambda
                 ((g$count$6064$dF01I g$field$6065$dF01I)
                  (g$bitwise-copy-bit-field$6038$dF01I
                    g$n$6059$dF01I
                    g$start$6060$dF01I
                    g$end$6061$dF01I
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$6039$dF01I
                        g$field$6065$dF01I
                        g$count$6064$dF01I)
                      (g$bitwise-arithmetic-shift-right$6040$dF01I
                        g$field$6065$dF01I
                        (- g$width$6063$dF01I g$count$6064$dF01I))))))
               (mod g$count$6062$dF01I g$width$6063$dF01I)
               (g$bitwise-bit-field$6037$dF01I
                 g$n$6059$dF01I
                 g$start$6060$dF01I
                 g$end$6061$dF01I))
              g$n$6059$dF01I)))
         (- g$end$6061$dF01I g$start$6060$dF01I))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fx*/carry$6073$dF01I
     g$fx*/carry$6122$dF01I
     (case-lambda
       ((g$fx1$6083$dF01I g$fx2$6084$dF01I g$fx3$6085$dF01I)
        ((case-lambda
           ((g$s$6086$dF01I g$e$6087$dF01I)
            (values
              (mod0 g$s$6086$dF01I g$e$6087$dF01I)
              (div0 g$s$6086$dF01I g$e$6087$dF01I))))
         (+ (* g$fx1$6083$dF01I g$fx2$6084$dF01I) g$fx3$6085$dF01I)
         (expt '2 (fixnum-width))))))
   (g$fx-/carry$6074$dF01I
     g$fx-/carry$6123$dF01I
     (case-lambda
       ((g$fx1$6088$dF01I g$fx2$6089$dF01I g$fx3$6090$dF01I)
        ((case-lambda
           ((g$s$6091$dF01I g$e$6092$dF01I)
            (values
              (mod0 g$s$6091$dF01I g$e$6092$dF01I)
              (div0 g$s$6091$dF01I g$e$6092$dF01I))))
         (- g$fx1$6088$dF01I g$fx2$6089$dF01I g$fx3$6090$dF01I)
         (expt '2 (fixnum-width))))))
   (g$fx+/carry$6075$dF01I
     g$fx+/carry$6124$dF01I
     (case-lambda
       ((g$fx1$6093$dF01I g$fx2$6094$dF01I g$fx3$6095$dF01I)
        ((case-lambda
           ((g$s$6096$dF01I g$e$6097$dF01I)
            (values
              (mod0 g$s$6096$dF01I g$e$6097$dF01I)
              (div0 g$s$6096$dF01I g$e$6097$dF01I))))
         (+ g$fx1$6093$dF01I g$fx2$6094$dF01I g$fx3$6095$dF01I)
         (expt '2 (fixnum-width))))))
   (g$fxif$6076$dF01I
     g$fxif$6125$dF01I
     (case-lambda
       ((g$fx1$6098$dF01I g$fx2$6099$dF01I g$fx3$6100$dF01I)
        (fxior
          (fxand g$fx1$6098$dF01I g$fx2$6099$dF01I)
          (fxand (fxnot g$fx1$6098$dF01I) g$fx3$6100$dF01I)))))
   (g$fxcopy-bit$6077$dF01I
     g$fxcopy-bit$6126$dF01I
     (case-lambda
       ((g$fx1$6101$dF01I g$fx2$6102$dF01I g$fx3$6103$dF01I)
        (g$fxif$6076$dF01I
          (g$fxarithmetic-shift-left$6080$dF01I '1 g$fx2$6102$dF01I)
          (g$fxarithmetic-shift-left$6080$dF01I
            g$fx3$6103$dF01I
            g$fx2$6102$dF01I)
          g$fx1$6101$dF01I))))
   (g$fxbit-field$6078$dF01I
     g$fxbit-field$6127$dF01I
     (case-lambda
       ((g$fx1$6104$dF01I g$fx2$6105$dF01I g$fx3$6106$dF01I)
        (g$fxarithmetic-shift-right$6081$dF01I
          (fxand
            g$fx1$6104$dF01I
            (fxnot (g$fxarithmetic-shift-left$6080$dF01I '-1 g$fx3$6106$dF01I)))
          g$fx2$6105$dF01I))))
   (g$fxcopy-bit-field$6079$dF01I
     g$fxcopy-bit-field$6128$dF01I
     (case-lambda
       ((g$to$6107$dF01I g$start$6108$dF01I g$end$6109$dF01I g$from$6110$dF01I)
        (g$fxif$6076$dF01I
          (fxand
            (g$fxarithmetic-shift-left$6080$dF01I '-1 g$start$6108$dF01I)
            (fxnot (g$fxarithmetic-shift-left$6080$dF01I '-1 g$end$6109$dF01I)))
          (g$fxarithmetic-shift-left$6080$dF01I
            g$from$6110$dF01I
            g$start$6108$dF01I)
          g$to$6107$dF01I))))
   (g$fxarithmetic-shift-left$6080$dF01I
     g$fxarithmetic-shift-left$6129$dF01I
     (case-lambda
       ((g$fx1$6111$dF01I g$fx2$6112$dF01I)
        (fxarithmetic-shift g$fx1$6111$dF01I g$fx2$6112$dF01I))))
   (g$fxarithmetic-shift-right$6081$dF01I
     g$fxarithmetic-shift-right$6130$dF01I
     (case-lambda
       ((g$fx1$6113$dF01I g$fx2$6114$dF01I)
        (fxarithmetic-shift g$fx1$6113$dF01I (fx- g$fx2$6114$dF01I)))))
   (g$fxrotate-bit-field$6082$dF01I
     g$fxrotate-bit-field$6131$dF01I
     (case-lambda
       ((g$n$6115$dF01I g$start$6116$dF01I g$end$6117$dF01I g$count$6118$dF01I)
        ((case-lambda
           ((g$width$6119$dF01I)
            (if (fxpositive? g$width$6119$dF01I)
              ((case-lambda
                 ((g$count$6120$dF01I g$field$6121$dF01I)
                  (g$fxcopy-bit-field$6079$dF01I
                    g$n$6115$dF01I
                    g$start$6116$dF01I
                    g$end$6117$dF01I
                    (fxior
                      (g$fxarithmetic-shift-left$6080$dF01I
                        g$field$6121$dF01I
                        g$count$6120$dF01I)
                      (g$fxarithmetic-shift-right$6081$dF01I
                        g$field$6121$dF01I
                        (fx- g$width$6119$dF01I g$count$6120$dF01I))))))
               (fxmod g$count$6118$dF01I g$width$6119$dF01I)
               (g$fxbit-field$6078$dF01I
                 g$n$6115$dF01I
                 g$start$6116$dF01I
                 g$end$6117$dF01I))
              g$n$6115$dF01I)))
         (fx- g$end$6117$dF01I g$start$6116$dF01I))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7173$6132$dF01I
     g$7173$6144$dF01I
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7176$dF01I
       '#f
       '#f
       '#()))
   (g$7175$6133$dF01I g$7175$6145$dF01I '#f)
   (g$7174$6134$dF01I
     g$7174$6146$dF01I
     (make-record-constructor-descriptor
       g$7173$6132$dF01I
       &implementation-restriction-rcd
       g$7175$6133$dF01I))
   (g$7172$6135$dF01I
     g$7172$6147$dF01I
     (record-predicate g$7173$6132$dF01I))
   (g$make-no-infinities-violation$6136$dF01I
     g$make-no-infinities-violation$6148$dF01I
     (record-constructor g$7174$6134$dF01I))
   (g$no-infinities-violation?$6137$dF01I
     g$no-infinities-violation?$6149$dF01I
     (condition-predicate g$7173$6132$dF01I))
   (g$7187$6138$dF01I
     g$7187$6150$dF01I
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7190$dF01I
       '#f
       '#f
       '#()))
   (g$7189$6139$dF01I g$7189$6151$dF01I '#f)
   (g$7188$6140$dF01I
     g$7188$6152$dF01I
     (make-record-constructor-descriptor
       g$7187$6138$dF01I
       &implementation-restriction-rcd
       g$7189$6139$dF01I))
   (g$7186$6141$dF01I
     g$7186$6153$dF01I
     (record-predicate g$7187$6138$dF01I))
   (g$make-no-nans-violation$6142$dF01I
     g$make-no-nans-violation$6154$dF01I
     (record-constructor g$7188$6140$dF01I))
   (g$no-nans-violation?$6143$dF01I
     g$no-nans-violation?$6155$dF01I
     (condition-predicate g$7187$6138$dF01I)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7202$6156$dF01I
     g$7202$6236$dF01I
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7205$dF01I
       '#f
       '#f
       '#()))
   (g$7204$6157$dF01I g$7204$6237$dF01I '#f)
   (g$7203$6158$dF01I
     g$7203$6238$dF01I
     (make-record-constructor-descriptor
       g$7202$6156$dF01I
       &error-rcd
       g$7204$6157$dF01I))
   (g$7201$6159$dF01I
     g$7201$6239$dF01I
     (record-predicate g$7202$6156$dF01I))
   (g$make-i/o-error$6160$dF01I
     g$make-i/o-error$6240$dF01I
     (record-constructor g$7203$6158$dF01I))
   (g$i/o-error?$6161$dF01I
     g$i/o-error?$6241$dF01I
     (condition-predicate g$7202$6156$dF01I))
   (g$7216$6162$dF01I
     g$7216$6242$dF01I
     (make-record-type-descriptor
       '&i/o-read
       g$7202$6156$dF01I
       'g$7219$dF01I
       '#f
       '#f
       '#()))
   (g$7218$6163$dF01I g$7218$6243$dF01I '#f)
   (g$7217$6164$dF01I
     g$7217$6244$dF01I
     (make-record-constructor-descriptor
       g$7216$6162$dF01I
       g$7203$6158$dF01I
       g$7218$6163$dF01I))
   (g$7215$6165$dF01I
     g$7215$6245$dF01I
     (record-predicate g$7216$6162$dF01I))
   (g$make-i/o-read-error$6166$dF01I
     g$make-i/o-read-error$6246$dF01I
     (record-constructor g$7217$6164$dF01I))
   (g$i/o-read-error?$6167$dF01I
     g$i/o-read-error?$6247$dF01I
     (condition-predicate g$7216$6162$dF01I))
   (g$7230$6168$dF01I
     g$7230$6248$dF01I
     (make-record-type-descriptor
       '&i/o-write
       g$7202$6156$dF01I
       'g$7233$dF01I
       '#f
       '#f
       '#()))
   (g$7232$6169$dF01I g$7232$6249$dF01I '#f)
   (g$7231$6170$dF01I
     g$7231$6250$dF01I
     (make-record-constructor-descriptor
       g$7230$6168$dF01I
       g$7203$6158$dF01I
       g$7232$6169$dF01I))
   (g$7229$6171$dF01I
     g$7229$6251$dF01I
     (record-predicate g$7230$6168$dF01I))
   (g$make-i/o-write-error$6172$dF01I
     g$make-i/o-write-error$6252$dF01I
     (record-constructor g$7231$6170$dF01I))
   (g$i/o-write-error?$6173$dF01I
     g$i/o-write-error?$6253$dF01I
     (condition-predicate g$7230$6168$dF01I))
   (g$7245$6174$dF01I
     g$7245$6254$dF01I
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7202$6156$dF01I
       'g$7248$dF01I
       '#f
       '#f
       '#((immutable position))))
   (g$7247$6175$dF01I g$7247$6255$dF01I '#f)
   (g$7246$6176$dF01I
     g$7246$6256$dF01I
     (make-record-constructor-descriptor
       g$7245$6174$dF01I
       g$7203$6158$dF01I
       g$7247$6175$dF01I))
   (g$7244$6177$dF01I
     g$7244$6257$dF01I
     (record-predicate g$7245$6174$dF01I))
   (g$make-i/o-invalid-position-error$6178$dF01I
     g$make-i/o-invalid-position-error$6258$dF01I
     (record-constructor g$7246$6176$dF01I))
   (g$7243$6179$dF01I
     g$7243$6259$dF01I
     (record-accessor g$7245$6174$dF01I '0))
   (g$i/o-invalid-position-error?$6180$dF01I
     g$i/o-invalid-position-error?$6260$dF01I
     (condition-predicate g$7245$6174$dF01I))
   (g$i/o-error-position$6181$dF01I
     g$i/o-error-position$6261$dF01I
     (condition-accessor g$7245$6174$dF01I g$7243$6179$dF01I))
   (g$7262$6182$dF01I
     g$7262$6262$dF01I
     (make-record-type-descriptor
       '&i/o-filename
       g$7202$6156$dF01I
       'g$7265$dF01I
       '#f
       '#f
       '#((immutable filename))))
   (g$7264$6183$dF01I g$7264$6263$dF01I '#f)
   (g$7263$6184$dF01I
     g$7263$6264$dF01I
     (make-record-constructor-descriptor
       g$7262$6182$dF01I
       g$7203$6158$dF01I
       g$7264$6183$dF01I))
   (g$7261$6185$dF01I
     g$7261$6265$dF01I
     (record-predicate g$7262$6182$dF01I))
   (g$make-i/o-filename-error$6186$dF01I
     g$make-i/o-filename-error$6266$dF01I
     (record-constructor g$7263$6184$dF01I))
   (g$7260$6187$dF01I
     g$7260$6267$dF01I
     (record-accessor g$7262$6182$dF01I '0))
   (g$i/o-filename-error?$6188$dF01I
     g$i/o-filename-error?$6268$dF01I
     (condition-predicate g$7262$6182$dF01I))
   (g$i/o-error-filename$6189$dF01I
     g$i/o-error-filename$6269$dF01I
     (condition-accessor g$7262$6182$dF01I g$7260$6187$dF01I))
   (g$7278$6190$dF01I
     g$7278$6270$dF01I
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7262$6182$dF01I
       'g$7281$dF01I
       '#f
       '#f
       '#()))
   (g$7280$6191$dF01I g$7280$6271$dF01I '#f)
   (g$7279$6192$dF01I
     g$7279$6272$dF01I
     (make-record-constructor-descriptor
       g$7278$6190$dF01I
       g$7263$6184$dF01I
       g$7280$6191$dF01I))
   (g$7277$6193$dF01I
     g$7277$6273$dF01I
     (record-predicate g$7278$6190$dF01I))
   (g$make-i/o-file-protection-error$6194$dF01I
     g$make-i/o-file-protection-error$6274$dF01I
     (record-constructor g$7279$6192$dF01I))
   (g$i/o-file-protection-error?$6195$dF01I
     g$i/o-file-protection-error?$6275$dF01I
     (condition-predicate g$7278$6190$dF01I))
   (g$7292$6196$dF01I
     g$7292$6276$dF01I
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7278$6190$dF01I
       'g$7295$dF01I
       '#f
       '#f
       '#()))
   (g$7294$6197$dF01I g$7294$6277$dF01I '#f)
   (g$7293$6198$dF01I
     g$7293$6278$dF01I
     (make-record-constructor-descriptor
       g$7292$6196$dF01I
       g$7279$6192$dF01I
       g$7294$6197$dF01I))
   (g$7291$6199$dF01I
     g$7291$6279$dF01I
     (record-predicate g$7292$6196$dF01I))
   (g$make-i/o-file-is-read-only-error$6200$dF01I
     g$make-i/o-file-is-read-only-error$6280$dF01I
     (record-constructor g$7293$6198$dF01I))
   (g$i/o-file-is-read-only-error?$6201$dF01I
     g$i/o-file-is-read-only-error?$6281$dF01I
     (condition-predicate g$7292$6196$dF01I))
   (g$7306$6202$dF01I
     g$7306$6282$dF01I
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7262$6182$dF01I
       'g$7309$dF01I
       '#f
       '#f
       '#()))
   (g$7308$6203$dF01I g$7308$6283$dF01I '#f)
   (g$7307$6204$dF01I
     g$7307$6284$dF01I
     (make-record-constructor-descriptor
       g$7306$6202$dF01I
       g$7263$6184$dF01I
       g$7308$6203$dF01I))
   (g$7305$6205$dF01I
     g$7305$6285$dF01I
     (record-predicate g$7306$6202$dF01I))
   (g$make-i/o-file-already-exists-error$6206$dF01I
     g$make-i/o-file-already-exists-error$6286$dF01I
     (record-constructor g$7307$6204$dF01I))
   (g$i/o-file-already-exists-error?$6207$dF01I
     g$i/o-file-already-exists-error?$6287$dF01I
     (condition-predicate g$7306$6202$dF01I))
   (g$7320$6208$dF01I
     g$7320$6288$dF01I
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7262$6182$dF01I
       'g$7323$dF01I
       '#f
       '#f
       '#()))
   (g$7322$6209$dF01I g$7322$6289$dF01I '#f)
   (g$7321$6210$dF01I
     g$7321$6290$dF01I
     (make-record-constructor-descriptor
       g$7320$6208$dF01I
       g$7263$6184$dF01I
       g$7322$6209$dF01I))
   (g$7319$6211$dF01I
     g$7319$6291$dF01I
     (record-predicate g$7320$6208$dF01I))
   (g$make-i/o-file-does-not-exist-error$6212$dF01I
     g$make-i/o-file-does-not-exist-error$6292$dF01I
     (record-constructor g$7321$6210$dF01I))
   (g$i/o-file-does-not-exist-error?$6213$dF01I
     g$i/o-file-does-not-exist-error?$6293$dF01I
     (condition-predicate g$7320$6208$dF01I))
   (g$7335$6214$dF01I
     g$7335$6294$dF01I
     (make-record-type-descriptor
       '&i/o-port
       g$7202$6156$dF01I
       'g$7338$dF01I
       '#f
       '#f
       '#((immutable port))))
   (g$7337$6215$dF01I g$7337$6295$dF01I '#f)
   (g$7336$6216$dF01I
     g$7336$6296$dF01I
     (make-record-constructor-descriptor
       g$7335$6214$dF01I
       g$7203$6158$dF01I
       g$7337$6215$dF01I))
   (g$7334$6217$dF01I
     g$7334$6297$dF01I
     (record-predicate g$7335$6214$dF01I))
   (g$make-i/o-port-error$6218$dF01I
     g$make-i/o-port-error$6298$dF01I
     (record-constructor g$7336$6216$dF01I))
   (g$7333$6219$dF01I
     g$7333$6299$dF01I
     (record-accessor g$7335$6214$dF01I '0))
   (g$i/o-port-error?$6220$dF01I
     g$i/o-port-error?$6300$dF01I
     (condition-predicate g$7335$6214$dF01I))
   (g$i/o-error-port$6221$dF01I
     g$i/o-error-port$6301$dF01I
     (condition-accessor g$7335$6214$dF01I g$7333$6219$dF01I))
   (g$7351$6222$dF01I
     g$7351$6302$dF01I
     (make-record-type-descriptor
       '&i/o-decoding
       g$7335$6214$dF01I
       'g$7354$dF01I
       '#f
       '#f
       '#()))
   (g$7353$6223$dF01I g$7353$6303$dF01I '#f)
   (g$7352$6224$dF01I
     g$7352$6304$dF01I
     (make-record-constructor-descriptor
       g$7351$6222$dF01I
       g$7336$6216$dF01I
       g$7353$6223$dF01I))
   (g$7350$6225$dF01I
     g$7350$6305$dF01I
     (record-predicate g$7351$6222$dF01I))
   (g$make-i/o-decoding-error$6226$dF01I
     g$make-i/o-decoding-error$6306$dF01I
     (record-constructor g$7352$6224$dF01I))
   (g$i/o-decoding-error?$6227$dF01I
     g$i/o-decoding-error?$6307$dF01I
     (condition-predicate g$7351$6222$dF01I))
   (g$7366$6228$dF01I
     g$7366$6308$dF01I
     (make-record-type-descriptor
       '&i/o-encoding
       g$7335$6214$dF01I
       'g$7369$dF01I
       '#f
       '#f
       '#((immutable char))))
   (g$7368$6229$dF01I g$7368$6309$dF01I '#f)
   (g$7367$6230$dF01I
     g$7367$6310$dF01I
     (make-record-constructor-descriptor
       g$7366$6228$dF01I
       g$7336$6216$dF01I
       g$7368$6229$dF01I))
   (g$7365$6231$dF01I
     g$7365$6311$dF01I
     (record-predicate g$7366$6228$dF01I))
   (g$make-i/o-encoding-error$6232$dF01I
     g$make-i/o-encoding-error$6312$dF01I
     (record-constructor g$7367$6230$dF01I))
   (g$7364$6233$dF01I
     g$7364$6313$dF01I
     (record-accessor g$7366$6228$dF01I '0))
   (g$i/o-encoding-error?$6234$dF01I
     g$i/o-encoding-error?$6314$dF01I
     (condition-predicate g$7366$6228$dF01I))
   (g$i/o-encoding-error-char$6235$dF01I
     g$i/o-encoding-error-char$6315$dF01I
     (condition-accessor g$7366$6228$dF01I g$7364$6233$dF01I)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$6317$dF01I
     g$using$6333$dF01I
     (clr-using-internal 'ironscheme.runtime))
   (g$get-output-string$6318$dF01I
     g$get-output-string$6334$dF01I
     (case-lambda
       ((g$port$6324$dF01I)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6324$dF01I))))
   (g$open-output-string$6319$dF01I
     g$open-output-string$6335$dF01I
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6320$dF01I
     g$open-string-output-port$6336$dF01I
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6325$dF01I)
            (values
              g$p$6325$dF01I
              (case-lambda
                (() (g$get-output-string$6318$dF01I g$p$6325$dF01I))))))
         (g$open-output-string$6319$dF01I)))))
   (g$port?$6321$dF01I
     g$port?$6337$dF01I
     (case-lambda
       ((g$obj$6326$dF01I)
        ((case-lambda
           ((g$t$6327$dF01I)
            (if g$t$6327$dF01I
              g$t$6327$dF01I
              (begin '#f (binary-port? g$obj$6326$dF01I)))))
         (textual-port? g$obj$6326$dF01I)))))
   (g$call-with-string-output-port$6322$dF01I
     g$call-with-string-output-port$6338$dF01I
     (case-lambda
       ((g$proc$6328$dF01I)
        ((case-lambda
           ((g$p$6329$dF01I)
            (begin
              (g$call-with-port$6323$dF01I g$p$6329$dF01I g$proc$6328$dF01I)
              (g$get-output-string$6318$dF01I g$p$6329$dF01I))))
         (g$open-output-string$6319$dF01I)))))
   (g$call-with-port$6323$dF01I
     g$call-with-port$6339$dF01I
     (case-lambda
       ((g$port$6330$dF01I g$proc$6331$dF01I)
        ((case-lambda
           ((g$r$6332$dF01I)
            (begin (close-port g$port$6330$dF01I) g$r$6332$dF01I)))
         (g$proc$6331$dF01I g$port$6330$dF01I))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$6340$dF01I
     g$peek-char$6382$dF01I
     (case-lambda
       (() (g$peek-char$6340$dF01I (current-input-port)))
       ((g$port$6354$dF01I) (lookahead-char g$port$6354$dF01I))))
   (g$read-char$6341$dF01I
     g$read-char$6383$dF01I
     (case-lambda
       (() (g$read-char$6341$dF01I (current-input-port)))
       ((g$port$6355$dF01I) (get-char g$port$6355$dF01I))))
   (g$write-char$6342$dF01I
     g$write-char$6384$dF01I
     (case-lambda
       ((g$chr$6356$dF01I)
        (g$write-char$6342$dF01I g$chr$6356$dF01I (current-output-port)))
       ((g$chr$6357$dF01I g$port$6358$dF01I)
        (put-char g$port$6358$dF01I g$chr$6357$dF01I))))
   (g$with-input-from-file$6349$dF01I
     g$with-input-from-file$6385$dF01I
     (case-lambda
       ((g$filename$6359$dF01I g$thunk$6360$dF01I)
        ((case-lambda
           ((g$current-input-port$6363$dF01I g$t$6364$dF01I)
            ((case-lambda
               ((g$swap$6365$dF01I)
                (dynamic-wind
                  g$swap$6365$dF01I
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6360$dF01I)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6365$dF01I)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6366$dF01I)
                    (begin
                      (g$current-input-port$6363$dF01I g$t$6364$dF01I)
                      (set! g$t$6364$dF01I g$t$6366$dF01I))))
                 (g$current-input-port$6363$dF01I)))))))
         current-input-port
         (open-input-file g$filename$6359$dF01I)))))
   (g$with-output-to-file$6350$dF01I
     g$with-output-to-file$6386$dF01I
     (case-lambda
       ((g$filename$6367$dF01I g$thunk$6368$dF01I)
        ((case-lambda
           ((g$current-output-port$6371$dF01I g$t$6372$dF01I)
            ((case-lambda
               ((g$swap$6373$dF01I)
                (dynamic-wind
                  g$swap$6373$dF01I
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6368$dF01I)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6373$dF01I)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6374$dF01I)
                    (begin
                      (g$current-output-port$6371$dF01I g$t$6372$dF01I)
                      (set! g$t$6372$dF01I g$t$6374$dF01I))))
                 (g$current-output-port$6371$dF01I)))))))
         current-output-port
         (open-output-file g$filename$6367$dF01I)))))
   (g$call-with-input-file$6351$dF01I
     g$call-with-input-file$6387$dF01I
     (case-lambda
       ((g$filename$6375$dF01I g$proc$6376$dF01I)
        ((case-lambda
           ((g$p$6377$dF01I)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6376$dF01I g$p$6377$dF01I)))
              (case-lambda (() (close-input-port g$p$6377$dF01I))))))
         (open-input-file g$filename$6375$dF01I)))))
   (g$call-with-output-file$6352$dF01I
     g$call-with-output-file$6388$dF01I
     (case-lambda
       ((g$filename$6378$dF01I g$proc$6379$dF01I)
        ((case-lambda
           ((g$p$6380$dF01I)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6379$dF01I g$p$6380$dF01I)))
              (case-lambda (() (close-output-port g$p$6380$dF01I))))))
         (open-output-file g$filename$6378$dF01I)))))
   (g$newline$6353$dF01I
     g$newline$6389$dF01I
     (case-lambda
       (() (g$newline$6353$dF01I (current-output-port)))
       ((g$port$6381$dF01I) (display '"
" g$port$6381$dF01I)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7451$6390$dF01I
     g$7451$6499$dF01I
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7453$6391$dF01I g$7453$6500$dF01I '#f)
   (g$7452$6392$dF01I
     g$7452$6501$dF01I
     (make-record-constructor-descriptor
       g$7451$6390$dF01I
       '#f
       g$7453$6391$dF01I))
   (g$enum?$6393$dF01I
     g$enum?$6502$dF01I
     (record-predicate g$7451$6390$dF01I))
   (g$make-enum$6394$dF01I
     g$make-enum$6503$dF01I
     (record-constructor g$7452$6392$dF01I))
   (g$enum-value$6395$dF01I
     g$enum-value$6504$dF01I
     (record-accessor g$7451$6390$dF01I '0))
   (g$enum-info$6396$dF01I
     g$enum-info$6505$dF01I
     (record-accessor g$7451$6390$dF01I '1))
   (g$7464$6397$dF01I
     g$7464$6506$dF01I
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7466$6398$dF01I g$7466$6507$dF01I '#f)
   (g$7465$6399$dF01I
     g$7465$6508$dF01I
     (make-record-constructor-descriptor
       g$7464$6397$dF01I
       '#f
       g$7466$6398$dF01I))
   (g$enum-universe?$6400$dF01I
     g$enum-universe?$6509$dF01I
     (record-predicate g$7464$6397$dF01I))
   (g$make-enum-universe$6401$dF01I
     g$make-enum-universe$6510$dF01I
     (record-constructor g$7465$6399$dF01I))
   (g$enum-universe-id$6402$dF01I
     g$enum-universe-id$6511$dF01I
     (record-accessor g$7464$6397$dF01I '0))
   (g$enum-universe-symbols$6403$dF01I
     g$enum-universe-symbols$6512$dF01I
     (record-accessor g$7464$6397$dF01I '1))
   (g$enum-universe-mapping$6404$dF01I
     g$enum-universe-mapping$6513$dF01I
     (record-accessor g$7464$6397$dF01I '2))
   (g$enum-universe-value$6405$dF01I
     g$enum-universe-value$6514$dF01I
     (record-accessor g$7464$6397$dF01I '3))
   (g$enum-type=?$6406$dF01I
     g$enum-type=?$6515$dF01I
     (case-lambda
       ((g$enumset1$6428$dF01I g$enumset2$6429$dF01I)
        (eq? (g$enum-universe-id$6402$dF01I
               (g$enum-info$6396$dF01I g$enumset1$6428$dF01I))
             (g$enum-universe-id$6402$dF01I
               (g$enum-info$6396$dF01I g$enumset2$6429$dF01I))))))
   (g$get-symbols$6407$dF01I
     g$get-symbols$6516$dF01I
     (case-lambda
       ((g$enumset$6430$dF01I)
        (g$enum-universe-symbols$6403$dF01I
          (g$enum-info$6396$dF01I g$enumset$6430$dF01I)))))
   (g$get-value$6408$dF01I
     g$get-value$6517$dF01I
     (case-lambda
       ((g$enumset$6431$dF01I g$s$6432$dF01I)
        (g$hashtable-ref$5541$dF01I
          (g$enum-universe-mapping$6404$dF01I
            (g$enum-info$6396$dF01I g$enumset$6431$dF01I))
          g$s$6432$dF01I
          '#f))))
   (g$assert-enum$6409$dF01I
     g$assert-enum$6518$dF01I
     (case-lambda
       ((g$who$6433$dF01I g$enumset$6434$dF01I)
        (if (not (g$enum?$6393$dF01I g$enumset$6434$dF01I))
          (assertion-violation
            g$who$6433$dF01I
            '"not an enumeration"
            g$enumset$6434$dF01I)
          (void)))))
   (g$make-info$6410$dF01I
     g$make-info$6519$dF01I
     (case-lambda
       ((g$symbols$6435$dF01I)
        ((case-lambda
           ((g$ht$6436$dF01I)
            ((letrec ((g$f$6437$dF01I
                        (case-lambda
                          ((g$s$6438$dF01I g$a$6439$dF01I g$mask$6440$dF01I)
                           (if (null? g$s$6438$dF01I)
                             (values
                               (reverse! g$a$6439$dF01I)
                               g$ht$6436$dF01I
                               (- g$mask$6440$dF01I '1))
                             ((case-lambda
                                ((g$n$6441$dF01I)
                                 (if (symbol? g$n$6441$dF01I)
                                   (if (g$hashtable-contains?$5544$dF01I
                                         g$ht$6436$dF01I
                                         g$n$6441$dF01I)
                                     (g$f$6437$dF01I
                                       (cdr g$s$6438$dF01I)
                                       g$a$6439$dF01I
                                       g$mask$6440$dF01I)
                                     (begin
                                       (g$hashtable-set!$5542$dF01I
                                         g$ht$6436$dF01I
                                         g$n$6441$dF01I
                                         g$mask$6440$dF01I)
                                       (g$f$6437$dF01I
                                         (cdr g$s$6438$dF01I)
                                         (cons g$n$6441$dF01I g$a$6439$dF01I)
                                         (g$bitwise-arithmetic-shift-left$6070$dF01I
                                           g$mask$6440$dF01I
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6441$dF01I))))
                              (car g$s$6438$dF01I)))))))
               g$f$6437$dF01I)
             g$symbols$6435$dF01I
             '()
             '1)))
         (g$make-eq-hashtable$5538$dF01I)))))
   (g$make-name$6411$dF01I
     g$make-name$6520$dF01I
     (case-lambda
       ((g$symbols$6442$dF01I)
        (string->symbol (g$format$6559$dF01I '"~a" g$symbols$6442$dF01I)))))
   (g$make-enumeration$6412$dF01I
     g$make-enumeration$6521$dF01I
     (case-lambda
       ((g$symbols$6443$dF01I)
        (call-with-values
          (case-lambda (() (g$make-info$6410$dF01I g$symbols$6443$dF01I)))
          (case-lambda
            ((g$s$6447$dF01I g$mapping$6448$dF01I g$mask$6449$dF01I)
             ((case-lambda
                ((g$mask$6450$dF01I g$mapping$6451$dF01I g$s$6452$dF01I)
                 (g$make-enum$6394$dF01I
                   g$mask$6450$dF01I
                   (g$make-enum-universe$6401$dF01I
                     (g$make-name$6411$dF01I g$s$6452$dF01I)
                     g$s$6452$dF01I
                     g$mapping$6451$dF01I
                     g$mask$6450$dF01I))))
              g$mask$6449$dF01I
              g$mapping$6448$dF01I
              g$s$6447$dF01I)))))))
   (g$enum-set-universe$6413$dF01I
     g$enum-set-universe$6522$dF01I
     (case-lambda
       ((g$enumset$6453$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set-universe g$enumset$6453$dF01I)
          ((case-lambda
             ((g$ei$6454$dF01I)
              (g$make-enum$6394$dF01I
                (g$enum-universe-value$6405$dF01I g$ei$6454$dF01I)
                g$ei$6454$dF01I)))
           (g$enum-info$6396$dF01I g$enumset$6453$dF01I))))))
   (g$enum-set-indexer$6414$dF01I
     g$enum-set-indexer$6523$dF01I
     (case-lambda
       ((g$enumset$6455$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set-indexer g$enumset$6455$dF01I)
          (case-lambda
            ((g$symbol$6456$dF01I)
             (begin
               (if (not (symbol? g$symbol$6456$dF01I))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6456$dF01I)
                 (void))
               ((case-lambda
                  ((g$v$6457$dF01I)
                   (if g$v$6457$dF01I
                     (- (bitwise-length g$v$6457$dF01I) '1)
                     '#f)))
                (g$get-value$6408$dF01I
                  g$enumset$6455$dF01I
                  g$symbol$6456$dF01I)))))))))
   (g$enum-set-constructor$6415$dF01I
     g$enum-set-constructor$6524$dF01I
     (case-lambda
       ((g$enumset$6458$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set-constructor g$enumset$6458$dF01I)
          (case-lambda
            ((g$symbols$6459$dF01I)
             ((letrec ((g$f$6460$dF01I
                         (case-lambda
                           ((g$v$6461$dF01I g$s$6462$dF01I)
                            (if (null? g$s$6462$dF01I)
                              (g$make-enum$6394$dF01I
                                g$v$6461$dF01I
                                (g$enum-info$6396$dF01I g$enumset$6458$dF01I))
                              ((case-lambda
                                 ((g$n$6463$dF01I)
                                  (if (symbol? g$n$6463$dF01I)
                                    ((case-lambda
                                       ((g$v*$6464$dF01I)
                                        (if g$v*$6464$dF01I
                                          (g$f$6460$dF01I
                                            (bitwise-ior
                                              g$v$6461$dF01I
                                              g$v*$6464$dF01I)
                                            (cdr g$s$6462$dF01I))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6463$dF01I))))
                                     (g$get-value$6408$dF01I
                                       g$enumset$6458$dF01I
                                       g$n$6463$dF01I))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6463$dF01I))))
                               (car g$s$6462$dF01I)))))))
                g$f$6460$dF01I)
              '0
              g$symbols$6459$dF01I)))))))
   (g$enum-set->list$6416$dF01I
     g$enum-set->list$6525$dF01I
     (case-lambda
       ((g$enumset$6465$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set->list g$enumset$6465$dF01I)
          ((case-lambda
             ((g$value$6466$dF01I)
              ((letrec ((g$f$6467$dF01I
                          (case-lambda
                            ((g$s$6468$dF01I g$l$6469$dF01I)
                             (if (null? g$s$6468$dF01I)
                               (reverse! g$l$6469$dF01I)
                               (if (g$zero?$5293$dF01I
                                     (bitwise-and
                                       (g$get-value$6408$dF01I
                                         g$enumset$6465$dF01I
                                         (car g$s$6468$dF01I))
                                       g$value$6466$dF01I))
                                 (g$f$6467$dF01I
                                   (cdr g$s$6468$dF01I)
                                   g$l$6469$dF01I)
                                 (g$f$6467$dF01I
                                   (cdr g$s$6468$dF01I)
                                   (cons
                                     (car g$s$6468$dF01I)
                                     g$l$6469$dF01I))))))))
                 g$f$6467$dF01I)
               (g$get-symbols$6407$dF01I g$enumset$6465$dF01I)
               '())))
           (g$enum-value$6395$dF01I g$enumset$6465$dF01I))))))
   (g$enum-set-member?$6417$dF01I
     g$enum-set-member?$6526$dF01I
     (case-lambda
       ((g$symbol$6470$dF01I g$enumset$6471$dF01I)
        (begin
          (if (not (symbol? g$symbol$6470$dF01I))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6470$dF01I)
            (void))
          (g$assert-enum$6409$dF01I 'enum-set-member? g$enumset$6471$dF01I)
          ((case-lambda
             ((g$v$6472$dF01I)
              (if g$v$6472$dF01I
                (not (g$zero?$5293$dF01I
                       (bitwise-and
                         g$v$6472$dF01I
                         (g$enum-value$6395$dF01I g$enumset$6471$dF01I))))
                '#f)))
           (g$get-value$6408$dF01I
             g$enumset$6471$dF01I
             g$symbol$6470$dF01I))))))
   (g$enum-set-subset?$6418$dF01I
     g$enum-set-subset?$6527$dF01I
     (case-lambda
       ((g$enumset1$6473$dF01I g$enumset2$6474$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set-subset? g$enumset1$6473$dF01I)
          (g$assert-enum$6409$dF01I 'enum-set-subset? g$enumset2$6474$dF01I)
          ((case-lambda
             ((g$v1$6475$dF01I g$v2$6476$dF01I)
              (if (g$enum-type=?$6406$dF01I
                    g$enumset1$6473$dF01I
                    g$enumset2$6474$dF01I)
                (= (bitwise-and g$v1$6475$dF01I g$v2$6476$dF01I)
                   g$v1$6475$dF01I)
                ((letrec ((g$f$6477$dF01I
                            (case-lambda
                              ((g$s$6478$dF01I)
                               (if (null? g$s$6478$dF01I)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6479$dF01I g$v2*$6480$dF01I)
                                     (if g$v2*$6480$dF01I
                                       ((case-lambda
                                          ((g$has1$6481$dF01I g$has2$6482$dF01I)
                                           (if (if g$has1$6481$dF01I
                                                 (begin
                                                   '#f
                                                   (not g$has2$6482$dF01I))
                                                 '#f)
                                             '#f
                                             (g$f$6477$dF01I
                                               (cdr g$s$6478$dF01I)))))
                                        (not (g$zero?$5293$dF01I
                                               (bitwise-and
                                                 g$v1$6475$dF01I
                                                 g$v1*$6479$dF01I)))
                                        (not (g$zero?$5293$dF01I
                                               (bitwise-and
                                                 g$v2$6476$dF01I
                                                 g$v2*$6480$dF01I))))
                                       '#f)))
                                  (g$get-value$6408$dF01I
                                    g$enumset1$6473$dF01I
                                    (car g$s$6478$dF01I))
                                  (g$get-value$6408$dF01I
                                    g$enumset2$6474$dF01I
                                    (car g$s$6478$dF01I))))))))
                   g$f$6477$dF01I)
                 (g$get-symbols$6407$dF01I g$enumset1$6473$dF01I)))))
           (g$enum-value$6395$dF01I g$enumset1$6473$dF01I)
           (g$enum-value$6395$dF01I g$enumset2$6474$dF01I))))))
   (g$enum-set=?$6419$dF01I
     g$enum-set=?$6528$dF01I
     (case-lambda
       ((g$enumset1$6483$dF01I g$enumset2$6484$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set=? g$enumset1$6483$dF01I)
          (g$assert-enum$6409$dF01I 'enum-set=? g$enumset2$6484$dF01I)
          (if (g$enum-set-subset?$6418$dF01I
                g$enumset1$6483$dF01I
                g$enumset2$6484$dF01I)
            (begin
              '#f
              (g$enum-set-subset?$6418$dF01I
                g$enumset2$6484$dF01I
                g$enumset1$6483$dF01I))
            '#f)))))
   (g$enum-set-union$6420$dF01I
     g$enum-set-union$6529$dF01I
     (case-lambda
       ((g$enumset1$6485$dF01I g$enumset2$6486$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set-union g$enumset1$6485$dF01I)
          (g$assert-enum$6409$dF01I 'enum-set-union g$enumset2$6486$dF01I)
          (if (g$enum-type=?$6406$dF01I
                g$enumset1$6485$dF01I
                g$enumset2$6486$dF01I)
            (g$make-enum$6394$dF01I
              (bitwise-ior
                (g$enum-value$6395$dF01I g$enumset1$6485$dF01I)
                (g$enum-value$6395$dF01I g$enumset2$6486$dF01I))
              (g$enum-info$6396$dF01I g$enumset1$6485$dF01I))
            '#f)))))
   (g$enum-set-intersection$6421$dF01I
     g$enum-set-intersection$6530$dF01I
     (case-lambda
       ((g$enumset1$6487$dF01I g$enumset2$6488$dF01I)
        (begin
          (g$assert-enum$6409$dF01I
            'enum-set-intersection
            g$enumset1$6487$dF01I)
          (g$assert-enum$6409$dF01I
            'enum-set-intersection
            g$enumset2$6488$dF01I)
          (if (g$enum-type=?$6406$dF01I
                g$enumset1$6487$dF01I
                g$enumset2$6488$dF01I)
            (g$make-enum$6394$dF01I
              (bitwise-and
                (g$enum-value$6395$dF01I g$enumset1$6487$dF01I)
                (g$enum-value$6395$dF01I g$enumset2$6488$dF01I))
              (g$enum-info$6396$dF01I g$enumset1$6487$dF01I))
            '#f)))))
   (g$enum-set-difference$6422$dF01I
     g$enum-set-difference$6531$dF01I
     (case-lambda
       ((g$enumset1$6489$dF01I g$enumset2$6490$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set-difference g$enumset1$6489$dF01I)
          (g$assert-enum$6409$dF01I 'enum-set-difference g$enumset2$6490$dF01I)
          (if (g$enum-type=?$6406$dF01I
                g$enumset1$6489$dF01I
                g$enumset2$6490$dF01I)
            (g$make-enum$6394$dF01I
              (bitwise-and
                (g$enum-value$6395$dF01I g$enumset1$6489$dF01I)
                (bitwise-not (g$enum-value$6395$dF01I g$enumset2$6490$dF01I)))
              (g$enum-info$6396$dF01I g$enumset1$6489$dF01I))
            '#f)))))
   (g$enum-set-complement$6423$dF01I
     g$enum-set-complement$6532$dF01I
     (case-lambda
       ((g$enumset$6491$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set-complement g$enumset$6491$dF01I)
          (g$make-enum$6394$dF01I
            (bitwise-not (g$enum-value$6395$dF01I g$enumset$6491$dF01I))
            (g$enum-info$6396$dF01I g$enumset$6491$dF01I))))))
   (g$enum-set-projection$6424$dF01I
     g$enum-set-projection$6533$dF01I
     (case-lambda
       ((g$enumset1$6492$dF01I g$enumset2$6493$dF01I)
        (begin
          (g$assert-enum$6409$dF01I 'enum-set-projection g$enumset1$6492$dF01I)
          (g$assert-enum$6409$dF01I 'enum-set-projection g$enumset2$6493$dF01I)
          ((case-lambda
             ((g$v1$6494$dF01I)
              ((letrec ((g$f$6495$dF01I
                          (case-lambda
                            ((g$s$6496$dF01I g$v$6497$dF01I)
                             (if (null? g$s$6496$dF01I)
                               (g$make-enum$6394$dF01I
                                 g$v$6497$dF01I
                                 (g$enum-info$6396$dF01I g$enumset2$6493$dF01I))
                               (if (g$zero?$5293$dF01I
                                     (bitwise-and
                                       g$v1$6494$dF01I
                                       (g$get-value$6408$dF01I
                                         g$enumset1$6492$dF01I
                                         (car g$s$6496$dF01I))))
                                 (g$f$6495$dF01I
                                   (cdr g$s$6496$dF01I)
                                   g$v$6497$dF01I)
                                 ((case-lambda
                                    ((g$v2$6498$dF01I)
                                     (if g$v2$6498$dF01I
                                       (g$f$6495$dF01I
                                         (cdr g$s$6496$dF01I)
                                         (bitwise-ior
                                           g$v$6497$dF01I
                                           g$v2$6498$dF01I))
                                       (g$f$6495$dF01I
                                         (cdr g$s$6496$dF01I)
                                         g$v$6497$dF01I))))
                                  (g$get-value$6408$dF01I
                                    g$enumset2$6493$dF01I
                                    (car g$s$6496$dF01I)))))))))
                 g$f$6495$dF01I)
               (g$get-symbols$6407$dF01I g$enumset1$6492$dF01I)
               '0)))
           (g$enum-value$6395$dF01I g$enumset1$6492$dF01I)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6425$dF01I g$p$6426$dF01I g$wr$6427$dF01I)
       (g$fprintf$6558$dF01I
         g$p$6426$dF01I
         '"#[enum-set ~a]"
         (g$enum-set->list$6416$dF01I g$x$6425$dF01I))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6534$dF01I
     g$dofmt$6556$dF01I
     (case-lambda
       ((g$p$6538$dF01I g$cntl$6539$dF01I g$args$6540$dF01I)
        ((case-lambda
           ((g$nmax$6541$dF01I)
            ((letrec ((g$loop$6542$dF01I
                        (case-lambda
                          ((g$n$6543$dF01I g$a$6544$dF01I)
                           (if (fx<=? g$n$6543$dF01I g$nmax$6541$dF01I)
                             ((case-lambda
                                ((g$c$6545$dF01I)
                                 (if (if (g$char=?$5307$dF01I
                                           g$c$6545$dF01I
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6543$dF01I
                                           g$nmax$6541$dF01I))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6546$dF01I)
                                       (if (g$memv$5056$dF01I
                                             g$t$6546$dF01I
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6544$dF01I)
                                             g$p$6538$dF01I)
                                           (g$loop$6542$dF01I
                                             (fx+ g$n$6543$dF01I '2)
                                             (cdr g$a$6544$dF01I)))
                                         (if (g$memv$5056$dF01I
                                               g$t$6546$dF01I
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6544$dF01I)
                                               g$p$6538$dF01I)
                                             (g$loop$6542$dF01I
                                               (fx+ g$n$6543$dF01I '2)
                                               (cdr g$a$6544$dF01I)))
                                           (if (g$memv$5056$dF01I
                                                 g$t$6546$dF01I
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6544$dF01I)
                                                   '2)
                                                 g$p$6538$dF01I)
                                               (g$loop$6542$dF01I
                                                 (fx+ g$n$6543$dF01I '2)
                                                 (cdr g$a$6544$dF01I)))
                                             (if (g$memv$5056$dF01I
                                                   g$t$6546$dF01I
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6544$dF01I)
                                                     '8)
                                                   g$p$6538$dF01I)
                                                 (g$loop$6542$dF01I
                                                   (fx+ g$n$6543$dF01I '2)
                                                   (cdr g$a$6544$dF01I)))
                                               (if (g$memv$5056$dF01I
                                                     g$t$6546$dF01I
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6544$dF01I)
                                                       '16)
                                                     g$p$6538$dF01I)
                                                   (g$loop$6542$dF01I
                                                     (fx+ g$n$6543$dF01I '2)
                                                     (cdr g$a$6544$dF01I)))
                                                 (if (g$memv$5056$dF01I
                                                       g$t$6546$dF01I
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6544$dF01I)
                                                         '10)
                                                       g$p$6538$dF01I)
                                                     (g$loop$6542$dF01I
                                                       (fx+ g$n$6543$dF01I '2)
                                                       (cdr g$a$6544$dF01I)))
                                                   (if (g$memv$5056$dF01I
                                                         g$t$6546$dF01I
                                                         '(#\~))
                                                     (begin
                                                       (g$write-char$6384$dF01I
                                                         '#\~
                                                         g$p$6538$dF01I)
                                                       (g$loop$6542$dF01I
                                                         (fx+ g$n$6543$dF01I '2)
                                                         g$a$6544$dF01I))
                                                     (begin
                                                       (g$write-char$6384$dF01I
                                                         g$c$6545$dF01I
                                                         g$p$6538$dF01I)
                                                       (g$loop$6542$dF01I
                                                         (fx+ g$n$6543$dF01I '1)
                                                         g$a$6544$dF01I)))))))))))
                                    (string-ref
                                      g$cntl$6539$dF01I
                                      (fx+ g$n$6543$dF01I '1)))
                                   (begin
                                     (g$write-char$6384$dF01I
                                       g$c$6545$dF01I
                                       g$p$6538$dF01I)
                                     (g$loop$6542$dF01I
                                       (fx+ g$n$6543$dF01I '1)
                                       g$a$6544$dF01I)))))
                              (string-ref g$cntl$6539$dF01I g$n$6543$dF01I))
                             (void))))))
               g$loop$6542$dF01I)
             '0
             g$args$6540$dF01I)))
         (fx- (string-length g$cntl$6539$dF01I) '1)))))
   (g$printf$6535$dF01I
     g$printf$6557$dF01I
     (case-lambda
       ((g$control$6547$dF01I . g$args$6548$dF01I)
        (g$dofmt$6534$dF01I
          (current-output-port)
          g$control$6547$dF01I
          g$args$6548$dF01I))))
   (g$fprintf$6536$dF01I
     g$fprintf$6558$dF01I
     (case-lambda
       ((g$p$6549$dF01I g$control$6550$dF01I . g$args$6551$dF01I)
        (g$dofmt$6534$dF01I
          g$p$6549$dF01I
          g$control$6550$dF01I
          g$args$6551$dF01I))))
   (g$format$6537$dF01I
     g$format$6559$dF01I
     (case-lambda
       ((g$control$6552$dF01I . g$args$6553$dF01I)
        (call-with-values
          g$open-string-output-port$6336$dF01I
          (case-lambda
            ((g$p$6554$dF01I g$c$6555$dF01I)
             (begin
               (g$dofmt$6534$dF01I
                 g$p$6554$dF01I
                 g$control$6552$dF01I
                 g$args$6553$dF01I)
               (g$c$6555$dF01I)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6560$dF01I
     g$make-traced-macro$6563$dF01I
     (case-lambda
       ((g$name$6561$dF01I g$x$6562$dF01I)
        (if (procedure? g$x$6562$dF01I)
          (make-traced-procedure
            g$name$6561$dF01I
            g$x$6562$dF01I
            g$syntax->datum$11600$dF01I)
          (if (g$variable-transformer?$11422$dF01I g$x$6562$dF01I)
            (g$make-variable-transformer$11421$dF01I
              (make-traced-procedure
                g$name$6561$dF01I
                (g$variable-transformer-procedure$11423$dF01I g$x$6562$dF01I)
                g$syntax->datum$11600$dF01I))
            g$x$6562$dF01I))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$6564$dF01I
     g$cps/generate-reference$6825$dF01I
     (case-lambda
       ((g$variable$6616$dF01I)
        (g$cps/generate-operand$6568$dF01I
          (g$make-reference$6594$dF01I g$variable$6616$dF01I)))))
   (g$cps/generate-literal$6565$dF01I
     g$cps/generate-literal$6826$dF01I
     (case-lambda
       ((g$datum$6617$dF01I)
        (g$cps/generate-operand$6568$dF01I
          (g$make-literal$6593$dF01I g$datum$6617$dF01I)))))
   (g$cps/generate-abstraction$6566$dF01I
     g$cps/generate-abstraction$6827$dF01I
     (case-lambda
       ((g$bvl$6618$dF01I g$body-generator$6619$dF01I)
        (g$cps/generate-operand$6568$dF01I
          (g$make-user-abstraction$6595$dF01I
            g$bvl$6618$dF01I
            (case-lambda
              ((g$continuation-variable$6620$dF01I)
               (g$body-generator$6619$dF01I
                 (g$variable-continuator$6581$dF01I
                   g$continuation-variable$6620$dF01I)))))))))
   (g$cps/generate-abstractions$6567$dF01I
     g$cps/generate-abstractions$6828$dF01I
     (case-lambda
       ((g$bvls$6621$dF01I g$body-generators$6622$dF01I)
        (g$cps/generate-operand$6568$dF01I
          (g$make-user-abstractions$6596$dF01I
            g$bvls$6621$dF01I
            (g$map$5063$dF01I
              (case-lambda
                ((g$body-generator$6623$dF01I)
                 (case-lambda
                   ((g$continuation-variable$6624$dF01I)
                    (g$body-generator$6623$dF01I
                      (g$variable-continuator$6581$dF01I
                        g$continuation-variable$6624$dF01I))))))
              g$body-generators$6622$dF01I))))))
   (g$cps/generate-operand$6568$dF01I
     g$cps/generate-operand$6829$dF01I
     (case-lambda
       ((g$operand$6625$dF01I)
        (case-lambda
          ((g$continuator$6626$dF01I)
           (g$continue-with-operand$6584$dF01I
             g$continuator$6626$dF01I
             g$operand$6625$dF01I))))))
   (g$cps/generate-conditional$6569$dF01I
     g$cps/generate-conditional$6830$dF01I
     (case-lambda
       ((g$condition-generator$6627$dF01I
          g$consequent-generator$6628$dF01I
          g$alternative-generator$6629$dF01I)
        (case-lambda
          ((g$continuator$6630$dF01I)
           (letrec* ((g$if-variable$6631$dF01I
                       (case-lambda
                         ((g$continuation-variable$6633$dF01I)
                          ((case-lambda
                             ((g$continuator*$6634$dF01I)
                              (g$condition-generator$6627$dF01I
                                (g$conditional-continuator$6580$dF01I
                                  (case-lambda
                                    ((g$condition$6635$dF01I)
                                     (g$make-conditional$6603$dF01I
                                       g$condition$6635$dF01I
                                       (g$consequent-generator$6628$dF01I
                                         g$continuator*$6634$dF01I)
                                       (g$alternative-generator$6629$dF01I
                                         g$continuator*$6634$dF01I))))))))
                           (g$variable-continuator$6581$dF01I
                             g$continuation-variable$6633$dF01I))))))
             (g$reify-continuation*$6586$dF01I
               g$continuator$6630$dF01I
               g$if-variable$6631$dF01I
               (case-lambda
                 ((g$continuation-abstraction$6632$dF01I)
                  (g$make-conditional-join$6604$dF01I
                    g$continuation-abstraction$6632$dF01I
                    g$if-variable$6631$dF01I))))))))))
   (g$cps/generate-recursive-bind$6570$dF01I
     g$cps/generate-recursive-bind$6831$dF01I
     (case-lambda
       ((g$variables$6636$dF01I
          g$generators$6637$dF01I
          g$body-generator$6638$dF01I)
        (case-lambda
          ((g$continuator$6639$dF01I)
           (g$make-recursive-bind$6598$dF01I
             g$variables$6636$dF01I
             (g$map$5063$dF01I
               (case-lambda
                 ((g$generator$6640$dF01I)
                  (case-lambda
                    ((g$continuation-variable$6641$dF01I)
                     (g$generator$6640$dF01I
                       (g$variable-continuator$6581$dF01I
                         g$continuation-variable$6641$dF01I))))))
               g$generators$6637$dF01I)
             (g$body-generator$6638$dF01I
               (g$reified-continuator$6583$dF01I
                 g$continuator$6639$dF01I))))))))
   (g$cps/generate-recursive*-bind$6571$dF01I
     g$cps/generate-recursive*-bind$6832$dF01I
     (case-lambda
       ((g$variables$6642$dF01I
          g$generators$6643$dF01I
          g$body-generator$6644$dF01I)
        (case-lambda
          ((g$continuator$6645$dF01I)
           (g$make-recursive*-bind$6599$dF01I
             g$variables$6642$dF01I
             (g$map$5063$dF01I
               (case-lambda
                 ((g$generator$6646$dF01I)
                  (case-lambda
                    ((g$continuation-variable$6647$dF01I)
                     (g$generator$6646$dF01I
                       (g$variable-continuator$6581$dF01I
                         g$continuation-variable$6647$dF01I))))))
               g$generators$6643$dF01I)
             (g$body-generator$6644$dF01I
               (g$reified-continuator$6583$dF01I
                 g$continuator$6645$dF01I))))))))
   (g$cps/generate-recursive*-library-bind$6572$dF01I
     g$cps/generate-recursive*-library-bind$6833$dF01I
     (case-lambda
       ((g$name$6648$dF01I
          g$variables$6649$dF01I
          g$variables*$6650$dF01I
          g$generators$6651$dF01I
          g$body-generator$6652$dF01I)
        (case-lambda
          ((g$continuator$6653$dF01I)
           (g$make-recursive*-library-bind$6600$dF01I
             g$name$6648$dF01I
             g$variables$6649$dF01I
             g$variables*$6650$dF01I
             (g$map$5063$dF01I
               (case-lambda
                 ((g$generator$6654$dF01I)
                  (case-lambda
                    ((g$continuation-variable$6655$dF01I)
                     (g$generator$6654$dF01I
                       (g$variable-continuator$6581$dF01I
                         g$continuation-variable$6655$dF01I))))))
               g$generators$6651$dF01I)
             (g$body-generator$6652$dF01I
               (g$reified-continuator$6583$dF01I
                 g$continuator$6653$dF01I))))))))
   (g$cps/generate-sequence$6573$dF01I
     g$cps/generate-sequence$6834$dF01I
     (case-lambda
       ((g$generators$6656$dF01I)
        (case-lambda
          ((g$continuator$6657$dF01I)
           ((letrec ((g$recur$6658$dF01I
                       (case-lambda
                         ((g$generators$6659$dF01I)
                          ((car g$generators$6659$dF01I)
                           ((case-lambda
                              ((g$generators$6660$dF01I)
                               (if (pair? g$generators$6660$dF01I)
                                 (g$effect-continuator$6579$dF01I
                                   (case-lambda
                                     (()
                                      (g$recur$6658$dF01I
                                        g$generators$6660$dF01I))))
                                 g$continuator$6657$dF01I)))
                            (cdr g$generators$6659$dF01I)))))))
              g$recur$6658$dF01I)
            g$generators$6656$dF01I))))))
   (g$cps/generate-assignment$6574$dF01I
     g$cps/generate-assignment$6835$dF01I
     (case-lambda
       ((g$location$6661$dF01I g$expression-generator$6662$dF01I)
        (case-lambda
          ((g$continuator$6663$dF01I)
           (g$expression-generator$6662$dF01I
             (g$operand-continuator$6578$dF01I
               (case-lambda
                 ((g$operand$6664$dF01I)
                  (g$make-assignment$6606$dF01I
                    g$location$6661$dF01I
                    g$operand$6664$dF01I
                    (g$continue-with-operand$6584$dF01I
                      g$continuator$6663$dF01I
                      '(void))))))))))))
   (g$cps/generate-primitive$6575$dF01I
     g$cps/generate-primitive$6836$dF01I
     (case-lambda
       ((g$operator$6665$dF01I g$operand-generators$6666$dF01I)
        (case-lambda
          ((g$continuator$6667$dF01I)
           (g$continue-with-operand$6584$dF01I
             g$continuator$6667$dF01I
             (cons
               g$operator$6665$dF01I
               (g$map$5063$dF01I
                 (case-lambda
                   ((g$generator$6668$dF01I)
                    (case-lambda
                      ((g$continuation-variable$6669$dF01I)
                       (g$generator$6668$dF01I
                         (g$variable-continuator$6581$dF01I
                           g$continuation-variable$6669$dF01I))))))
                 g$operand-generators$6666$dF01I))))))))
   (g$cps/generate-combination$6576$dF01I
     g$cps/generate-combination$6837$dF01I
     (case-lambda
       ((g$operator-generator$6670$dF01I g$operand-generators$6671$dF01I)
        (g$cps/generate-subproblems$6577$dF01I
          (reverse
            (cons
              g$operator-generator$6670$dF01I
              g$operand-generators$6671$dF01I))
          (case-lambda
            ((g$operands$6672$dF01I g$continuator$6673$dF01I)
             (g$make-combination$6601$dF01I
               (car g$operands$6672$dF01I)
               (g$reify-continuation$6585$dF01I g$continuator$6673$dF01I)
               (cdr g$operands$6672$dF01I))))))))
   (g$cps/generate-subproblems$6577$dF01I
     g$cps/generate-subproblems$6838$dF01I
     (case-lambda
       ((g$generators$6674$dF01I g$combiner$6675$dF01I)
        (case-lambda
          ((g$continuator$6676$dF01I)
           ((letrec ((g$recur$6677$dF01I
                       (case-lambda
                         ((g$generators$6678$dF01I g$operands$6679$dF01I)
                          (if (pair? g$generators$6678$dF01I)
                            ((car g$generators$6678$dF01I)
                             ((case-lambda
                                ((g$generators$6680$dF01I)
                                 (g$operand-continuator$6578$dF01I
                                   (case-lambda
                                     ((g$operand$6681$dF01I)
                                      (g$recur$6677$dF01I
                                        g$generators$6680$dF01I
                                        (cons
                                          g$operand$6681$dF01I
                                          g$operands$6679$dF01I)))))))
                              (cdr g$generators$6678$dF01I)))
                            (g$combiner$6675$dF01I
                              g$operands$6679$dF01I
                              g$continuator$6676$dF01I))))))
              g$recur$6677$dF01I)
            g$generators$6674$dF01I
            '()))))))
   (g$operand-continuator$6578$dF01I
     g$operand-continuator$6839$dF01I
     (case-lambda
       ((g$generator$6682$dF01I)
        (case-lambda
          ((g$if-operand$6683$dF01I
             g$if-effect$6684$dF01I
             g$if-conditional$6685$dF01I
             g$if-variable$6686$dF01I
             g$if-inline$6687$dF01I)
           (begin
             g$if-effect$6684$dF01I
             g$if-conditional$6685$dF01I
             g$if-variable$6686$dF01I
             g$if-inline$6687$dF01I
             (g$if-operand$6683$dF01I g$generator$6682$dF01I)))))))
   (g$effect-continuator$6579$dF01I
     g$effect-continuator$6840$dF01I
     (case-lambda
       ((g$generator$6688$dF01I)
        (case-lambda
          ((g$if-operand$6689$dF01I
             g$if-effect$6690$dF01I
             g$if-conditional$6691$dF01I
             g$if-variable$6692$dF01I
             g$if-inline$6693$dF01I)
           (begin
             g$if-operand$6689$dF01I
             g$if-conditional$6691$dF01I
             g$if-variable$6692$dF01I
             g$if-inline$6693$dF01I
             (g$if-effect$6690$dF01I g$generator$6688$dF01I)))))))
   (g$conditional-continuator$6580$dF01I
     g$conditional-continuator$6841$dF01I
     (case-lambda
       ((g$generator$6694$dF01I)
        (case-lambda
          ((g$if-operand$6695$dF01I
             g$if-effect$6696$dF01I
             g$if-conditional$6697$dF01I
             g$if-variable$6698$dF01I
             g$if-inline$6699$dF01I)
           (begin
             g$if-operand$6695$dF01I
             g$if-effect$6696$dF01I
             g$if-variable$6698$dF01I
             g$if-inline$6699$dF01I
             (g$if-conditional$6697$dF01I g$generator$6694$dF01I)))))))
   (g$variable-continuator$6581$dF01I
     g$variable-continuator$6842$dF01I
     (case-lambda
       ((g$variable$6700$dF01I)
        (case-lambda
          ((g$if-operand$6701$dF01I
             g$if-effect$6702$dF01I
             g$if-conditional$6703$dF01I
             g$if-variable$6704$dF01I
             g$if-inline$6705$dF01I)
           (begin
             g$if-operand$6701$dF01I
             g$if-effect$6702$dF01I
             g$if-variable$6704$dF01I
             g$if-inline$6705$dF01I
             (g$if-variable$6704$dF01I g$variable$6700$dF01I)))))))
   (g$inline-continuator$6582$dF01I
     g$inline-continuator$6843$dF01I
     (case-lambda
       ((g$continuation$6706$dF01I)
        (case-lambda
          ((g$if-operand$6707$dF01I
             g$if-effect$6708$dF01I
             g$if-conditional$6709$dF01I
             g$if-variable$6710$dF01I
             g$if-inline$6711$dF01I)
           (begin
             g$if-operand$6707$dF01I
             g$if-effect$6708$dF01I
             g$if-conditional$6709$dF01I
             g$if-variable$6710$dF01I
             (g$if-inline$6711$dF01I g$continuation$6706$dF01I)))))))
   (g$reified-continuator$6583$dF01I
     g$reified-continuator$6844$dF01I
     (case-lambda
       ((g$continuator$6712$dF01I)
        (case-lambda
          ((g$if-operand$6713$dF01I
             g$if-effect$6714$dF01I
             g$if-conditional$6715$dF01I
             g$if-variable$6716$dF01I
             g$if-inline$6717$dF01I)
           (begin
             g$if-operand$6713$dF01I
             g$if-effect$6714$dF01I
             g$if-conditional$6715$dF01I
             (g$reify-continuation*$6586$dF01I
               g$continuator$6712$dF01I
               g$if-variable$6716$dF01I
               g$if-inline$6717$dF01I)))))))
   (g$continue-with-operand$6584$dF01I
     g$continue-with-operand$6845$dF01I
     (case-lambda
       ((g$continuator$6718$dF01I g$operand$6719$dF01I)
        (g$continuator$6718$dF01I
          (case-lambda
            ((g$generator$6720$dF01I)
             (g$generator$6720$dF01I g$operand$6719$dF01I)))
          (case-lambda ((g$generator$6721$dF01I) (g$generator$6721$dF01I)))
          (case-lambda
            ((g$generator$6722$dF01I)
             (g$generator$6722$dF01I
               (g$make-truth-test$6607$dF01I g$operand$6719$dF01I))))
          (case-lambda
            ((g$continuation-variable$6723$dF01I)
             (g$make-return$6602$dF01I
               (g$make-reference$6594$dF01I g$continuation-variable$6723$dF01I)
               (list g$operand$6719$dF01I))))
          (case-lambda
            ((g$continuation-abstraction$6724$dF01I)
             (g$make-return$6602$dF01I
               g$continuation-abstraction$6724$dF01I
               (list g$operand$6719$dF01I))))))))
   (g$reify-continuation$6585$dF01I
     g$reify-continuation$6846$dF01I
     (case-lambda
       ((g$continuator$6725$dF01I)
        (g$continuator$6725$dF01I
          g$operand-continuation-reifier$6588$dF01I
          g$effect-continuation-reifier$6590$dF01I
          g$conditional-continuation-reifier$6592$dF01I
          (case-lambda
            ((g$variable$6726$dF01I)
             (g$make-reference$6594$dF01I g$variable$6726$dF01I)))
          (case-lambda
            ((g$continuation$6727$dF01I) g$continuation$6727$dF01I))))))
   (g$reify-continuation*$6586$dF01I
     g$reify-continuation*$6847$dF01I
     (case-lambda
       ((g$continuator$6728$dF01I
          g$if-variable$6729$dF01I
          g$if-inline$6730$dF01I)
        (g$continuator$6728$dF01I
          (g$operand-continuation-reifier*$6587$dF01I g$if-inline$6730$dF01I)
          (g$effect-continuation-reifier*$6589$dF01I g$if-inline$6730$dF01I)
          (g$conditional-continuation-reifier*$6591$dF01I
            g$if-inline$6730$dF01I)
          g$if-variable$6729$dF01I
          g$if-inline$6730$dF01I))))
   (g$operand-continuation-reifier*$6587$dF01I
     g$operand-continuation-reifier*$6848$dF01I
     (case-lambda
       ((g$receiver$6731$dF01I)
        (case-lambda
          ((g$generator$6732$dF01I)
           (g$receiver$6731$dF01I
             ((case-lambda
                ((g$variable$6733$dF01I)
                 (g$make-continuation-abstraction$6597$dF01I
                   (list g$variable$6733$dF01I)
                   (g$generator$6732$dF01I
                     (g$make-reference$6594$dF01I g$variable$6733$dF01I)))))
              (g$generate-variable$6608$dF01I 'V))))))))
   (g$operand-continuation-reifier$6588$dF01I
     g$operand-continuation-reifier$6849$dF01I
     (g$operand-continuation-reifier*$6587$dF01I values))
   (g$effect-continuation-reifier*$6589$dF01I
     g$effect-continuation-reifier*$6850$dF01I
     (case-lambda
       ((g$receiver$6734$dF01I)
        (case-lambda
          ((g$generator$6735$dF01I)
           (g$receiver$6734$dF01I
             ((case-lambda
                ((g$variable$6736$dF01I)
                 (g$make-continuation-abstraction$6597$dF01I
                   g$variable$6736$dF01I
                   (g$generator$6735$dF01I))))
              (g$generate-variable$6608$dF01I 'IGNORE))))))))
   (g$effect-continuation-reifier$6590$dF01I
     g$effect-continuation-reifier$6851$dF01I
     (g$effect-continuation-reifier*$6589$dF01I values))
   (g$conditional-continuation-reifier*$6591$dF01I
     g$conditional-continuation-reifier*$6852$dF01I
     (case-lambda
       ((g$receiver$6737$dF01I)
        (case-lambda
          ((g$generator$6738$dF01I)
           (g$receiver$6737$dF01I
             ((case-lambda
                ((g$variable$6739$dF01I)
                 (g$make-continuation-abstraction$6597$dF01I
                   (list g$variable$6739$dF01I)
                   (g$generator$6738$dF01I
                     (g$make-truth-test$6607$dF01I
                       (g$make-reference$6594$dF01I g$variable$6739$dF01I))))))
              (g$generate-variable$6608$dF01I 'T))))))))
   (g$conditional-continuation-reifier$6592$dF01I
     g$conditional-continuation-reifier$6853$dF01I
     (g$conditional-continuation-reifier*$6591$dF01I values))
   (g$make-literal$6593$dF01I
     g$make-literal$6854$dF01I
     (case-lambda ((g$datum$6740$dF01I) (list 'quote g$datum$6740$dF01I))))
   (g$make-reference$6594$dF01I
     g$make-reference$6855$dF01I
     (case-lambda ((g$variable$6741$dF01I) g$variable$6741$dF01I)))
   (g$make-user-abstraction$6595$dF01I
     g$make-user-abstraction$6856$dF01I
     (case-lambda
       ((g$bvl$6742$dF01I g$body-constructor$6743$dF01I)
        ((case-lambda
           ((g$continuation$6744$dF01I)
            (list
              'case-lambda
              (list
                (cons g$continuation$6744$dF01I g$bvl$6742$dF01I)
                (g$body-constructor$6743$dF01I g$continuation$6744$dF01I)))))
         (g$generate-variable$6608$dF01I 'C)))))
   (g$make-user-abstractions$6596$dF01I
     g$make-user-abstractions$6857$dF01I
     (case-lambda
       ((g$bvls$6745$dF01I g$body-constructors$6746$dF01I)
        ((case-lambda
           ((g$continuation$6747$dF01I)
            (cons
              'case-lambda
              (g$map$5063$dF01I
                (case-lambda
                  ((g$bvl$6748$dF01I g$body-constructor$6749$dF01I)
                   (list
                     (cons g$continuation$6747$dF01I g$bvl$6748$dF01I)
                     (g$body-constructor$6749$dF01I
                       g$continuation$6747$dF01I))))
                g$bvls$6745$dF01I
                g$body-constructors$6746$dF01I))))
         (g$generate-variable$6608$dF01I 'C)))))
   (g$make-continuation-abstraction$6597$dF01I
     g$make-continuation-abstraction$6858$dF01I
     (case-lambda
       ((g$bvl$6750$dF01I g$body$6751$dF01I)
        (list 'case-lambda (list g$bvl$6750$dF01I g$body$6751$dF01I)))))
   (g$make-recursive-bind$6598$dF01I
     g$make-recursive-bind$6859$dF01I
     (case-lambda
       ((g$variables$6752$dF01I g$constructors$6753$dF01I g$body$6754$dF01I)
        (list
          'letrec
          (g$map$5063$dF01I
            (case-lambda
              ((g$variable$6755$dF01I g$constructor$6756$dF01I)
               (list
                 g$variable$6755$dF01I
                 (list
                   (g$make-user-abstraction$6595$dF01I
                     '()
                     g$constructor$6756$dF01I)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$6755$dF01I))))))
            g$variables$6752$dF01I
            g$constructors$6753$dF01I)
          g$body$6754$dF01I))))
   (g$make-recursive*-bind$6599$dF01I
     g$make-recursive*-bind$6860$dF01I
     (case-lambda
       ((g$variables$6757$dF01I g$constructors$6758$dF01I g$body$6759$dF01I)
        (list
          'letrec*
          (g$map$5063$dF01I
            (case-lambda
              ((g$variable$6760$dF01I g$constructor$6761$dF01I)
               (list
                 g$variable$6760$dF01I
                 (list
                   (g$make-user-abstraction$6595$dF01I
                     '()
                     g$constructor$6761$dF01I)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$6760$dF01I))))))
            g$variables$6757$dF01I
            g$constructors$6758$dF01I)
          g$body$6759$dF01I))))
   (g$make-recursive*-library-bind$6600$dF01I
     g$make-recursive*-library-bind$6861$dF01I
     (case-lambda
       ((g$name$6762$dF01I
          g$variables$6763$dF01I
          g$variables*$6764$dF01I
          g$constructors$6765$dF01I
          g$body$6766$dF01I)
        (list
          'library-letrec*
          g$name$6762$dF01I
          (g$map$5063$dF01I
            (case-lambda
              ((g$variable$6767$dF01I
                 g$variable*$6768$dF01I
                 g$constructor$6769$dF01I)
               (list
                 g$variable$6767$dF01I
                 g$variable*$6768$dF01I
                 (list
                   (g$make-user-abstraction$6595$dF01I
                     '()
                     g$constructor$6769$dF01I)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$6767$dF01I))))))
            g$variables$6763$dF01I
            g$variables*$6764$dF01I
            g$constructors$6765$dF01I)
          g$body$6766$dF01I))))
   (g$make-combination$6601$dF01I
     g$make-combination$6862$dF01I
     (case-lambda
       ((g$operator$6770$dF01I g$continuation$6771$dF01I g$operands$6772$dF01I)
        (cons
          g$operator$6770$dF01I
          (cons g$continuation$6771$dF01I g$operands$6772$dF01I)))))
   (g$make-return$6602$dF01I
     g$make-return$6863$dF01I
     (case-lambda
       ((g$continuation$6773$dF01I g$operands$6774$dF01I)
        (cons g$continuation$6773$dF01I g$operands$6774$dF01I))))
   (g$make-conditional$6603$dF01I
     g$make-conditional$6864$dF01I
     (case-lambda
       ((g$condition$6775$dF01I
          g$consequent$6776$dF01I
          g$alternative$6777$dF01I)
        (list
          'if
          g$condition$6775$dF01I
          g$consequent$6776$dF01I
          g$alternative$6777$dF01I))))
   (g$make-conditional-join$6604$dF01I
     g$make-conditional-join$6865$dF01I
     (case-lambda
       ((g$continuation$6778$dF01I g$constructor$6779$dF01I)
        ((case-lambda
           ((g$variable$6780$dF01I)
            (g$make-let$6605$dF01I
              (list g$variable$6780$dF01I)
              (list g$continuation$6778$dF01I)
              (g$constructor$6779$dF01I g$variable$6780$dF01I))))
         (g$generate-variable$6608$dF01I 'J)))))
   (g$make-let$6605$dF01I
     g$make-let$6866$dF01I
     (case-lambda
       ((g$variables$6781$dF01I g$expressions$6782$dF01I g$body$6783$dF01I)
        (cons
          (list 'case-lambda (list g$variables$6781$dF01I g$body$6783$dF01I))
          g$expressions$6782$dF01I))))
   (g$make-assignment$6606$dF01I
     g$make-assignment$6867$dF01I
     (case-lambda
       ((g$location$6784$dF01I g$operand$6785$dF01I g$expression$6786$dF01I)
        (list
          'begin
          (list 'set! g$location$6784$dF01I g$operand$6785$dF01I)
          g$expression$6786$dF01I))))
   (g$make-truth-test$6607$dF01I
     g$make-truth-test$6868$dF01I
     (case-lambda ((g$operand$6787$dF01I) g$operand$6787$dF01I)))
   (g$generate-variable$6608$dF01I
     g$generate-variable$6869$dF01I
     (case-lambda ((g$name$6788$dF01I) (gensym g$name$6788$dF01I))))
   (g$parse$6609$dF01I
     g$parse$6870$dF01I
     (case-lambda
       ((g$x$6789$dF01I)
        (if (pair? g$x$6789$dF01I)
          ((case-lambda
             ((g$t$6790$dF01I)
              (if (g$memv$5056$dF01I g$t$6790$dF01I '(quote))
                (g$cps/generate-literal$6565$dF01I
                  (g$cadr$5264$dF01I g$x$6789$dF01I))
                (if (g$memv$5056$dF01I g$t$6790$dF01I '(if))
                  (g$cps/generate-conditional$6569$dF01I
                    (g$parse$6609$dF01I (g$cadr$5264$dF01I g$x$6789$dF01I))
                    (g$parse$6609$dF01I (g$caddr$5270$dF01I g$x$6789$dF01I))
                    (g$parse$6609$dF01I (g$cadddr$5282$dF01I g$x$6789$dF01I)))
                  (if (g$memv$5056$dF01I g$t$6790$dF01I '(case-lambda))
                    ((case-lambda
                       ((g$d$6791$dF01I)
                        (g$cps/generate-abstractions$6567$dF01I
                          (g$map$5063$dF01I car g$d$6791$dF01I)
                          (g$map$5063$dF01I
                            (case-lambda
                              ((g$e$6792$dF01I)
                               (g$cps/generate-sequence$6573$dF01I
                                 (g$map$5063$dF01I
                                   g$parse$6609$dF01I
                                   (cdr g$e$6792$dF01I)))))
                            g$d$6791$dF01I))))
                     (cdr g$x$6789$dF01I))
                    (if (g$memv$5056$dF01I g$t$6790$dF01I '(letrec))
                      ((case-lambda
                         ((g$bindings$6793$dF01I g$body*$6794$dF01I)
                          ((case-lambda
                             ((g$lhs*$6795$dF01I g$rhs*$6796$dF01I)
                              (g$cps/generate-recursive-bind$6570$dF01I
                                g$lhs*$6795$dF01I
                                (g$map$5063$dF01I
                                  g$parse$6609$dF01I
                                  g$rhs*$6796$dF01I)
                                (g$parse$6609$dF01I
                                  (cons 'begin g$body*$6794$dF01I)))))
                           (g$map$5063$dF01I car g$bindings$6793$dF01I)
                           (g$map$5063$dF01I
                             g$cadr$5264$dF01I
                             g$bindings$6793$dF01I))))
                       (g$cadr$5264$dF01I g$x$6789$dF01I)
                       (g$cddr$5266$dF01I g$x$6789$dF01I))
                      (if (g$memv$5056$dF01I g$t$6790$dF01I '(letrec*))
                        ((case-lambda
                           ((g$bindings$6797$dF01I g$body*$6798$dF01I)
                            ((case-lambda
                               ((g$lhs*$6799$dF01I g$rhs*$6800$dF01I)
                                (g$cps/generate-recursive*-bind$6571$dF01I
                                  g$lhs*$6799$dF01I
                                  (g$map$5063$dF01I
                                    g$parse$6609$dF01I
                                    g$rhs*$6800$dF01I)
                                  (g$parse$6609$dF01I
                                    (cons 'begin g$body*$6798$dF01I)))))
                             (g$map$5063$dF01I car g$bindings$6797$dF01I)
                             (g$map$5063$dF01I
                               g$cadr$5264$dF01I
                               g$bindings$6797$dF01I))))
                         (g$cadr$5264$dF01I g$x$6789$dF01I)
                         (g$cddr$5266$dF01I g$x$6789$dF01I))
                        (if (g$memv$5056$dF01I
                              g$t$6790$dF01I
                              '(library-letrec*))
                          ((case-lambda
                             ((g$name$6801$dF01I g$x$6802$dF01I)
                              ((case-lambda
                                 ((g$bindings$6803$dF01I g$body*$6804$dF01I)
                                  ((case-lambda
                                     ((g$lhs*$6805$dF01I
                                        g$lhs**$6806$dF01I
                                        g$rhs*$6807$dF01I)
                                      (g$cps/generate-recursive*-library-bind$6572$dF01I
                                        g$name$6801$dF01I
                                        g$lhs*$6805$dF01I
                                        g$lhs**$6806$dF01I
                                        (g$map$5063$dF01I
                                          g$parse$6609$dF01I
                                          g$rhs*$6807$dF01I)
                                        (g$parse$6609$dF01I
                                          (cons 'begin g$body*$6804$dF01I)))))
                                   (g$map$5063$dF01I car g$bindings$6803$dF01I)
                                   (g$map$5063$dF01I
                                     g$cadr$5264$dF01I
                                     g$bindings$6803$dF01I)
                                   (g$map$5063$dF01I
                                     g$caddr$5270$dF01I
                                     g$bindings$6803$dF01I))))
                               (g$cadr$5264$dF01I g$x$6802$dF01I)
                               (g$cddr$5266$dF01I g$x$6802$dF01I))))
                           (g$cadr$5264$dF01I g$x$6789$dF01I)
                           (cdr g$x$6789$dF01I))
                          (if (g$memv$5056$dF01I g$t$6790$dF01I '(begin))
                            (g$cps/generate-sequence$6573$dF01I
                              (g$map$5063$dF01I
                                g$parse$6609$dF01I
                                (cdr g$x$6789$dF01I)))
                            (if (g$memv$5056$dF01I g$t$6790$dF01I '(set!))
                              (g$cps/generate-assignment$6574$dF01I
                                (g$cadr$5264$dF01I g$x$6789$dF01I)
                                (g$parse$6609$dF01I
                                  (g$caddr$5270$dF01I g$x$6789$dF01I)))
                              (if (list? g$x$6789$dF01I)
                                (g$cps/generate-combination$6576$dF01I
                                  (g$parse$6609$dF01I (car g$x$6789$dF01I))
                                  (g$map$5063$dF01I
                                    g$parse$6609$dF01I
                                    (cdr g$x$6789$dF01I)))
                                (error
                                  'rewrite
                                  '"invalid form ~s ~s"
                                  g$x$6789$dF01I
                                  (list? g$x$6789$dF01I)))))))))))))
           (car g$x$6789$dF01I))
          (if (symbol? g$x$6789$dF01I)
            (g$cps/generate-reference$6564$dF01I g$x$6789$dF01I)
            (g$cps/generate-literal$6565$dF01I g$x$6789$dF01I))))))
   (g$starts-with?$6610$dF01I
     g$starts-with?$6871$dF01I
     (case-lambda
       ((g$str$6808$dF01I g$sub$6809$dF01I)
        (clr-call-internal
          'system.string
          'startswith
          g$str$6808$dF01I
          g$sub$6809$dF01I))))
   (g$special$6611$dF01I
     g$special$6872$dF01I
     '(identity-for-cps
        letrec-identity
        values
        apply
        call-with-values
        call/cc
        call-with-current-continuation))
   (g$primitive?$6612$dF01I
     g$primitive?$6873$dF01I
     (case-lambda
       ((g$o$6810$dF01I)
        (if (if (symbol? g$o$6810$dF01I)
              (begin
                '#f
                (not (g$memq$5055$dF01I g$o$6810$dF01I g$special$6611$dF01I)))
              '#f)
          (with-exception-handler
            (case-lambda ((g$e$6811$dF01I) '#f))
            (case-lambda
              (()
               ((case-lambda
                  ((g$b$6812$dF01I)
                   ((case-lambda
                      ((g$t$6813$dF01I)
                       (if g$t$6813$dF01I
                         g$t$6813$dF01I
                         (begin
                           '#f
                           (g$starts-with?$6610$dF01I
                             (symbol->string g$o$6810$dF01I)
                             '"clr-")))))
                    (clr-is-internal
                      'ironscheme.runtime.builtinmethod
                      g$b$6812$dF01I))))
                (symbol-value? g$o$6810$dF01I)))))
          '#f))))
   (g$fix-primitives$6613$dF01I
     g$fix-primitives$6874$dF01I
     (case-lambda
       ((g$e$6814$dF01I)
        (if (if (pair? g$e$6814$dF01I) (begin '#f (list? g$e$6814$dF01I)) '#f)
          ((case-lambda
             ((g$o$6815$dF01I)
              (if (eq? g$o$6815$dF01I 'quote)
                g$e$6814$dF01I
                (if (eq? g$o$6815$dF01I 'library-letrec*)
                  ((case-lambda
                     ((g$name$6816$dF01I g$e$6817$dF01I)
                      ((case-lambda
                         ((g$bindings$6818$dF01I g$body*$6819$dF01I)
                          ((case-lambda
                             ((g$lhs*$6820$dF01I
                                g$lhs**$6821$dF01I
                                g$rhs*$6822$dF01I)
                              (cons
                                'library-letrec*
                                (cons
                                  g$name$6816$dF01I
                                  (cons
                                    (g$map$5063$dF01I
                                      list
                                      g$lhs*$6820$dF01I
                                      g$lhs**$6821$dF01I
                                      (g$map$5063$dF01I
                                        g$fix-primitives$6613$dF01I
                                        g$rhs*$6822$dF01I))
                                    (g$map$5063$dF01I
                                      g$fix-primitives$6613$dF01I
                                      g$body*$6819$dF01I))))))
                           (g$map$5063$dF01I car g$bindings$6818$dF01I)
                           (g$map$5063$dF01I
                             g$cadr$5264$dF01I
                             g$bindings$6818$dF01I)
                           (g$map$5063$dF01I
                             g$caddr$5270$dF01I
                             g$bindings$6818$dF01I))))
                       (g$cadr$5264$dF01I g$e$6817$dF01I)
                       (g$cddr$5266$dF01I g$e$6817$dF01I))))
                   (g$cadr$5264$dF01I g$e$6814$dF01I)
                   (cdr g$e$6814$dF01I))
                  (if (begin '#f (g$primitive?$6612$dF01I g$o$6815$dF01I))
                    (if (pair? (cdr g$e$6814$dF01I))
                      (list
                        (g$fix-primitives$6613$dF01I
                          (g$cadr$5264$dF01I g$e$6814$dF01I))
                        (cons
                          g$o$6815$dF01I
                          (g$map$5063$dF01I
                            g$fix-primitives$6613$dF01I
                            (g$cddr$5266$dF01I g$e$6814$dF01I))))
                      g$e$6814$dF01I)
                    (cons
                      (g$fix-primitives$6613$dF01I g$o$6815$dF01I)
                      (g$map$5063$dF01I
                        g$fix-primitives$6613$dF01I
                        (cdr g$e$6814$dF01I))))))))
           (car g$e$6814$dF01I))
          (if (g$primitive?$6612$dF01I g$e$6814$dF01I)
            (list
              'case-lambda
              (list
                '(k . args)
                (cons 'apply (cons 'k (cons g$e$6814$dF01I '(args))))))
            g$e$6814$dF01I)))))
   (g$parse->cps$6614$dF01I
     g$parse->cps$6875$dF01I
     (case-lambda
       ((g$e$6823$dF01I)
        ((g$parse$6609$dF01I g$e$6823$dF01I)
         (g$variable-continuator$6581$dF01I 'identity-for-cps)))))
   (g$convert->cps$6615$dF01I
     g$convert->cps$6876$dF01I
     (case-lambda
       ((g$e$6824$dF01I)
        (g$fix-primitives$6613$dF01I
          (g$parse->cps$6614$dF01I g$e$6824$dF01I))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$6877$dF01I
     g$library-version-mismatch-warning$6973$dF01I
     (case-lambda
       ((g$name$6950$dF01I g$depname$6951$dF01I g$filename$6952$dF01I)
        (g$fprintf$6558$dF01I
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$6950$dF01I
          g$depname$6951$dF01I
          g$filename$6952$dF01I))))
   (g$file-locator-resolution-error$6878$dF01I
     g$file-locator-resolution-error$6974$dF01I
     (case-lambda
       ((g$libname$6953$dF01I g$failed-list$6954$dF01I)
        (letrec* ((g$7958$6955$dF01I
                    (make-record-type-descriptor
                      '&library-resolution
                      &condition-rtd
                      'g$7961$dF01I
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$7960$6956$dF01I '#f)
                  (g$7959$6957$dF01I
                    (make-record-constructor-descriptor
                      g$7958$6955$dF01I
                      &condition-rcd
                      g$7960$6956$dF01I))
                  (g$7957$6958$dF01I (record-predicate g$7958$6955$dF01I))
                  (g$make-library-resolution-condition$6959$dF01I
                    (record-constructor g$7959$6957$dF01I))
                  (g$7955$6960$dF01I (record-accessor g$7958$6955$dF01I '0))
                  (g$7956$6961$dF01I (record-accessor g$7958$6955$dF01I '1))
                  (g$library-resolution-condition?$6962$dF01I
                    (condition-predicate g$7958$6955$dF01I))
                  (g$condition-library$6963$dF01I
                    (condition-accessor g$7958$6955$dF01I g$7955$6960$dF01I))
                  (g$condition-files$6964$dF01I
                    (condition-accessor g$7958$6955$dF01I g$7956$6961$dF01I)))
          (raise
            (condition
              (g$make-error$5825$dF01I)
              (g$make-who-condition$5851$dF01I 'expander)
              (g$make-message-condition$5805$dF01I
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$6959$dF01I
                g$libname$6953$dF01I
                g$failed-list$6954$dF01I)))))))
   (g$read-library-source-file$6879$dF01I
     g$read-library-source-file$6975$dF01I
     (case-lambda
       ((g$file-name$6965$dF01I)
        (g$with-input-from-file$6385$dF01I
          g$file-name$6965$dF01I
          read-annotated))))
   (g$make-parameter$6880$dF01I
     g$make-parameter$6976$dF01I
     (case-lambda
       ((g$x$6966$dF01I)
        (g$make-parameter$6880$dF01I
          g$x$6966$dF01I
          (case-lambda ((g$x$6967$dF01I) g$x$6967$dF01I))))
       ((g$x$6968$dF01I g$fender$6969$dF01I)
        (begin
          (if (not (procedure? g$fender$6969$dF01I))
            (g$assertion-error$11593$dF01I
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(89,8) - (89,36)"))
            (void))
          ((case-lambda
             ((g$x$6970$dF01I)
              (case-lambda
                (() g$x$6970$dF01I)
                ((g$v$6971$dF01I)
                 (set! g$x$6970$dF01I (g$fender$6969$dF01I g$v$6971$dF01I))))))
           (g$fender$6969$dF01I g$x$6968$dF01I))))))
   (g$file-options-constructor$6948$dF01I
     g$file-options-constructor$6977$dF01I
     (g$make-parameter$6880$dF01I '#f))
   (g$file-options-spec$6949$dF01I
     g$file-options-spec$6978$dF01I
     (case-lambda
       ((g$x$6972$dF01I)
        ((g$file-options-constructor$6948$dF01I) g$x$6972$dF01I)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$7174$dF01I
     g$current-primitive-locations$7219$dF01I
     (g$make-parameter$6976$dF01I
       (case-lambda ((g$x$7180$dF01I) '#f))
       (case-lambda
         ((g$p$7181$dF01I)
          (begin
            (if (not (procedure? g$p$7181$dF01I))
              (g$assertion-error$11593$dF01I
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$7181$dF01I)))))
   (g$mutable?$7175$dF01I
     g$mutable?$7220$dF01I
     (case-lambda
       ((g$x$7182$dF01I)
        (letrec* ((g$simple?$7183$dF01I
                    (case-lambda
                      ((g$x$7184$dF01I)
                       ((case-lambda
                          ((g$t$7185$dF01I)
                           (if g$t$7185$dF01I
                             g$t$7185$dF01I
                             ((case-lambda
                                ((g$t$7186$dF01I)
                                 (if g$t$7186$dF01I
                                   g$t$7186$dF01I
                                   ((case-lambda
                                      ((g$t$7187$dF01I)
                                       (if g$t$7187$dF01I
                                         g$t$7187$dF01I
                                         ((case-lambda
                                            ((g$t$7188$dF01I)
                                             (if g$t$7188$dF01I
                                               g$t$7188$dF01I
                                               ((case-lambda
                                                  ((g$t$7189$dF01I)
                                                   (if g$t$7189$dF01I
                                                     g$t$7189$dF01I
                                                     ((case-lambda
                                                        ((g$t$7190$dF01I)
                                                         (if g$t$7190$dF01I
                                                           g$t$7190$dF01I
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$7184$dF01I)))))
                                                      (bytevector?
                                                        g$x$7184$dF01I)))))
                                                (string? g$x$7184$dF01I)))))
                                          (boolean? g$x$7184$dF01I)))))
                                    (symbol? g$x$7184$dF01I)))))
                              (char? g$x$7184$dF01I)))))
                        (null? g$x$7184$dF01I))))))
          (not (g$simple?$7183$dF01I g$x$7182$dF01I))))))
   (g$rewriter$7176$dF01I
     g$rewriter$7221$dF01I
     (case-lambda
       ((g$quote-hack?$7191$dF01I)
        (letrec* ((g$f$7192$dF01I
                    (case-lambda
                      ((g$x$7193$dF01I)
                       (if (pair? g$x$7193$dF01I)
                         ((case-lambda
                            ((g$t$7194$dF01I)
                             (if (g$memv$5056$dF01I g$t$7194$dF01I '(quote))
                               (if (if g$quote-hack?$7191$dF01I
                                     (begin
                                       '#f
                                       (g$mutable?$7175$dF01I
                                         (g$cadr$5264$dF01I g$x$7193$dF01I)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$7195$dF01I)
                                     (begin
                                       (set-symbol-value!
                                         g$g$7195$dF01I
                                         (g$cadr$5264$dF01I g$x$7193$dF01I))
                                       g$g$7195$dF01I)))
                                  (gensym))
                                 g$x$7193$dF01I)
                               (if (g$memv$5056$dF01I
                                     g$t$7194$dF01I
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (g$map$5063$dF01I
                                     (case-lambda
                                       ((g$x$7196$dF01I)
                                        (cons
                                          (car g$x$7196$dF01I)
                                          (g$map$5063$dF01I
                                            g$f$7192$dF01I
                                            (cdr g$x$7196$dF01I)))))
                                     (cdr g$x$7193$dF01I)))
                                 (if (g$memv$5056$dF01I
                                       g$t$7194$dF01I
                                       '(lambda))
                                   (g$cons*$5065$dF01I
                                     'lambda
                                     (g$cadr$5264$dF01I g$x$7193$dF01I)
                                     (g$map$5063$dF01I
                                       g$f$7192$dF01I
                                       (g$cddr$5266$dF01I g$x$7193$dF01I)))
                                   (if (g$memv$5056$dF01I
                                         g$t$7194$dF01I
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$7197$dF01I
                                           g$body*$7198$dF01I)
                                         ((case-lambda
                                            ((g$lhs*$7199$dF01I
                                               g$rhs*$7200$dF01I)
                                             (g$cons*$5065$dF01I
                                               'letrec
                                               (g$map$5063$dF01I
                                                 list
                                                 g$lhs*$7199$dF01I
                                                 (g$map$5063$dF01I
                                                   g$f$7192$dF01I
                                                   g$rhs*$7200$dF01I))
                                               (g$map$5063$dF01I
                                                 g$f$7192$dF01I
                                                 g$body*$7198$dF01I))))
                                          (g$map$5063$dF01I
                                            car
                                            g$bindings$7197$dF01I)
                                          (g$map$5063$dF01I
                                            g$cadr$5264$dF01I
                                            g$bindings$7197$dF01I))))
                                      (g$cadr$5264$dF01I g$x$7193$dF01I)
                                      (g$cddr$5266$dF01I g$x$7193$dF01I))
                                     (if (g$memv$5056$dF01I
                                           g$t$7194$dF01I
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$7201$dF01I
                                             g$body*$7202$dF01I)
                                           ((case-lambda
                                              ((g$lhs*$7203$dF01I
                                                 g$rhs*$7204$dF01I)
                                               (g$cons*$5065$dF01I
                                                 'letrec*
                                                 (g$map$5063$dF01I
                                                   list
                                                   g$lhs*$7203$dF01I
                                                   (g$map$5063$dF01I
                                                     g$f$7192$dF01I
                                                     g$rhs*$7204$dF01I))
                                                 (g$map$5063$dF01I
                                                   g$f$7192$dF01I
                                                   g$body*$7202$dF01I))))
                                            (g$map$5063$dF01I
                                              car
                                              g$bindings$7201$dF01I)
                                            (g$map$5063$dF01I
                                              g$cadr$5264$dF01I
                                              g$bindings$7201$dF01I))))
                                        (g$cadr$5264$dF01I g$x$7193$dF01I)
                                        (g$cddr$5266$dF01I g$x$7193$dF01I))
                                       (if (g$memv$5056$dF01I
                                             g$t$7194$dF01I
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$7205$dF01I g$x$7206$dF01I)
                                             ((case-lambda
                                                ((g$bindings$7207$dF01I
                                                   g$body*$7208$dF01I)
                                                 ((case-lambda
                                                    ((g$lhs*$7209$dF01I
                                                       g$lhs**$7210$dF01I
                                                       g$rhs*$7211$dF01I)
                                                     (g$cons*$5065$dF01I
                                                       'library-letrec*
                                                       g$name$7205$dF01I
                                                       (g$map$5063$dF01I
                                                         list
                                                         g$lhs*$7209$dF01I
                                                         g$lhs**$7210$dF01I
                                                         (g$map$5063$dF01I
                                                           g$f$7192$dF01I
                                                           g$rhs*$7211$dF01I))
                                                       (g$map$5063$dF01I
                                                         g$f$7192$dF01I
                                                         g$body*$7208$dF01I))))
                                                  (g$map$5063$dF01I
                                                    car
                                                    g$bindings$7207$dF01I)
                                                  (g$map$5063$dF01I
                                                    g$cadr$5264$dF01I
                                                    g$bindings$7207$dF01I)
                                                  (g$map$5063$dF01I
                                                    g$caddr$5270$dF01I
                                                    g$bindings$7207$dF01I))))
                                              (g$cadr$5264$dF01I g$x$7206$dF01I)
                                              (g$cddr$5266$dF01I
                                                g$x$7206$dF01I))))
                                          (g$cadr$5264$dF01I g$x$7193$dF01I)
                                          (cdr g$x$7193$dF01I))
                                         (if (g$memv$5056$dF01I
                                               g$t$7194$dF01I
                                               '(begin))
                                           (cons
                                             'begin
                                             (g$map$5063$dF01I
                                               g$f$7192$dF01I
                                               (cdr g$x$7193$dF01I)))
                                           (if (g$memv$5056$dF01I
                                                 g$t$7194$dF01I
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5264$dF01I
                                                 g$x$7193$dF01I)
                                               (g$f$7192$dF01I
                                                 (g$caddr$5270$dF01I
                                                   g$x$7193$dF01I)))
                                             (if (g$memv$5056$dF01I
                                                   g$t$7194$dF01I
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$7212$dF01I)
                                                   ((case-lambda
                                                      ((g$t$7213$dF01I)
                                                       (if g$t$7213$dF01I
                                                         ((case-lambda
                                                            ((g$loc$7214$dF01I)
                                                             g$loc$7214$dF01I))
                                                          g$t$7213$dF01I)
                                                         g$op$7212$dF01I)))
                                                    ((g$current-primitive-locations$7174$dF01I)
                                                     g$op$7212$dF01I))))
                                                (g$cadr$5264$dF01I
                                                  g$x$7193$dF01I))
                                               (if (g$memv$5056$dF01I
                                                     g$t$7194$dF01I
                                                     '(define))
                                                 g$x$7193$dF01I
                                                 (if (list? g$x$7193$dF01I)
                                                   (g$map$5063$dF01I
                                                     g$f$7192$dF01I
                                                     g$x$7193$dF01I)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$7193$dF01I
                                                     (list?
                                                       g$x$7193$dF01I)))))))))))))))
                          (car g$x$7193$dF01I))
                         g$x$7193$dF01I)))))
          g$f$7192$dF01I))))
   (g$expanded->core$7177$dF01I
     g$expanded->core$7222$dF01I
     (case-lambda
       ((g$x$7215$dF01I) ((g$rewriter$7176$dF01I '#t) g$x$7215$dF01I))))
   (g$compile-core-expr$7178$dF01I
     g$compile-core-expr$7223$dF01I
     (case-lambda
       ((g$x$7216$dF01I) ((g$rewriter$7176$dF01I '#f) g$x$7216$dF01I))))
   (g$compile-core-expr-to-port$7179$dF01I
     g$compile-core-expr-to-port$7224$dF01I
     (case-lambda
       ((g$x$7217$dF01I g$p$7218$dF01I)
        (g$pretty-print$7173$dF01I
          ((g$rewriter$7176$dF01I '#f) g$x$7217$dF01I)
          g$p$7218$dF01I)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$7263$dF01I
     g$make-collection$7458$dF01I
     (case-lambda
       (()
        ((case-lambda
           ((g$set$7324$dF01I)
            (letrec* ((g$set-cons$7325$dF01I
                        (case-lambda
                          ((g$x$7327$dF01I g$ls$7328$dF01I)
                           (if (g$memq$5055$dF01I
                                 g$x$7327$dF01I
                                 g$ls$7328$dF01I)
                             g$ls$7328$dF01I
                             (cons g$x$7327$dF01I g$ls$7328$dF01I))))))
              (case-lambda
                (() g$set$7324$dF01I)
                ((g$x$7326$dF01I)
                 (set! g$set$7324$dF01I
                   (g$set-cons$7325$dF01I g$x$7326$dF01I g$set$7324$dF01I)))))))
         '()))))
   (g$current-library-collection$7264$dF01I
     g$current-library-collection$7459$dF01I
     (g$make-parameter$6976$dF01I
       (g$make-collection$7263$dF01I)
       (case-lambda
         ((g$x$7329$dF01I)
          (begin
            (if (not (procedure? g$x$7329$dF01I))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$7329$dF01I)
              (void))
            g$x$7329$dF01I)))))
   (g$8274$7265$dF01I
     g$8274$7460$dF01I
     (make-record-type-descriptor
       'library
       '#f
       'g$8277$dF01I
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$8276$7266$dF01I g$8276$7461$dF01I '#f)
   (g$8275$7267$dF01I
     g$8275$7462$dF01I
     (make-record-constructor-descriptor
       g$8274$7265$dF01I
       '#f
       g$8276$7266$dF01I))
   (g$library?$7268$dF01I
     g$library?$7463$dF01I
     (record-predicate g$8274$7265$dF01I))
   (g$make-library$7269$dF01I
     g$make-library$7464$dF01I
     (record-constructor g$8275$7267$dF01I))
   (g$library-id$7270$dF01I
     g$library-id$7465$dF01I
     (record-accessor g$8274$7265$dF01I '0))
   (g$library-name$7271$dF01I
     g$library-name$7466$dF01I
     (record-accessor g$8274$7265$dF01I '1))
   (g$library-version$7272$dF01I
     g$library-version$7467$dF01I
     (record-accessor g$8274$7265$dF01I '2))
   (g$library-imp*$7273$dF01I
     g$library-imp*$7468$dF01I
     (record-accessor g$8274$7265$dF01I '3))
   (g$library-vis*$7274$dF01I
     g$library-vis*$7469$dF01I
     (record-accessor g$8274$7265$dF01I '4))
   (g$library-inv*$7275$dF01I
     g$library-inv*$7470$dF01I
     (record-accessor g$8274$7265$dF01I '5))
   (g$library-subst$7276$dF01I
     g$library-subst$7471$dF01I
     (record-accessor g$8274$7265$dF01I '6))
   (g$library-env$7277$dF01I
     g$library-env$7472$dF01I
     (record-accessor g$8274$7265$dF01I '7))
   (g$library-visit-state$7278$dF01I
     g$library-visit-state$7473$dF01I
     (record-accessor g$8274$7265$dF01I '8))
   (g$library-invoke-state$7279$dF01I
     g$library-invoke-state$7474$dF01I
     (record-accessor g$8274$7265$dF01I '9))
   (g$library-visit-code$7280$dF01I
     g$library-visit-code$7475$dF01I
     (record-accessor g$8274$7265$dF01I '10))
   (g$library-invoke-code$7281$dF01I
     g$library-invoke-code$7476$dF01I
     (record-accessor g$8274$7265$dF01I '11))
   (g$library-visible?$7282$dF01I
     g$library-visible?$7477$dF01I
     (record-accessor g$8274$7265$dF01I '12))
   (g$library-source-file-name$7283$dF01I
     g$library-source-file-name$7478$dF01I
     (record-accessor g$8274$7265$dF01I '13))
   (g$set-library-id!$7284$dF01I
     g$set-library-id!$7479$dF01I
     (record-mutator g$8274$7265$dF01I '0))
   (g$set-library-name!$7285$dF01I
     g$set-library-name!$7480$dF01I
     (record-mutator g$8274$7265$dF01I '1))
   (g$set-library-version!$7286$dF01I
     g$set-library-version!$7481$dF01I
     (record-mutator g$8274$7265$dF01I '2))
   (g$set-library-imp*!$7287$dF01I
     g$set-library-imp*!$7482$dF01I
     (record-mutator g$8274$7265$dF01I '3))
   (g$set-library-vis*!$7288$dF01I
     g$set-library-vis*!$7483$dF01I
     (record-mutator g$8274$7265$dF01I '4))
   (g$set-library-inv*!$7289$dF01I
     g$set-library-inv*!$7484$dF01I
     (record-mutator g$8274$7265$dF01I '5))
   (g$set-library-subst!$7290$dF01I
     g$set-library-subst!$7485$dF01I
     (record-mutator g$8274$7265$dF01I '6))
   (g$set-library-env!$7291$dF01I
     g$set-library-env!$7486$dF01I
     (record-mutator g$8274$7265$dF01I '7))
   (g$set-library-visit-state!$7292$dF01I
     g$set-library-visit-state!$7487$dF01I
     (record-mutator g$8274$7265$dF01I '8))
   (g$set-library-invoke-state!$7293$dF01I
     g$set-library-invoke-state!$7488$dF01I
     (record-mutator g$8274$7265$dF01I '9))
   (g$set-library-visit-code!$7294$dF01I
     g$set-library-visit-code!$7489$dF01I
     (record-mutator g$8274$7265$dF01I '10))
   (g$set-library-invoke-code!$7295$dF01I
     g$set-library-invoke-code!$7490$dF01I
     (record-mutator g$8274$7265$dF01I '11))
   (g$set-library-visible?!$7296$dF01I
     g$set-library-visible?!$7491$dF01I
     (record-mutator g$8274$7265$dF01I '12))
   (g$set-library-source-file-name!$7297$dF01I
     g$set-library-source-file-name!$7492$dF01I
     (record-mutator g$8274$7265$dF01I '13))
   (g$rp$7298$dF01I
     g$rp$7493$dF01I
     (make-record-printer
       'library
       (case-lambda
         ((g$x$7330$dF01I g$p$7331$dF01I g$wr$7332$dF01I)
          (begin
            (if (not (g$library?$7268$dF01I g$x$7330$dF01I))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6559$dF01I
                '"#<library ~s>"
                (if (null? (g$library-version$7272$dF01I g$x$7330$dF01I))
                  (g$library-name$7271$dF01I g$x$7330$dF01I)
                  (append
                    (g$library-name$7271$dF01I g$x$7330$dF01I)
                    (list (g$library-version$7272$dF01I g$x$7330$dF01I)))))
              g$p$7331$dF01I))))))
   (g$find-dependencies$7299$dF01I
     g$find-dependencies$7494$dF01I
     (case-lambda
       ((g$ls$7333$dF01I)
        (if (null? g$ls$7333$dF01I)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$7300$dF01I
     g$find-library-by$7495$dF01I
     (case-lambda
       ((g$pred$7334$dF01I)
        ((letrec ((g$f$7335$dF01I
                    (case-lambda
                      ((g$ls$7336$dF01I)
                       (if (null? g$ls$7336$dF01I)
                         '#f
                         (if (g$pred$7334$dF01I (car g$ls$7336$dF01I))
                           (car g$ls$7336$dF01I)
                           (g$f$7335$dF01I (cdr g$ls$7336$dF01I))))))))
           g$f$7335$dF01I)
         ((g$current-library-collection$7264$dF01I))))))
   (g$library-path$7301$dF01I
     g$library-path$7496$dF01I
     (g$make-parameter$6976$dF01I
       '(".")
       (case-lambda
         ((g$x$7337$dF01I)
          (if (if (list? g$x$7337$dF01I)
                (begin '#f (g$for-all$5061$dF01I string? g$x$7337$dF01I))
                '#f)
            (g$map$5063$dF01I
              (case-lambda ((g$x$7338$dF01I) g$x$7338$dF01I))
              g$x$7337$dF01I)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$7337$dF01I))))))
   (g$library-extensions$7302$dF01I
     g$library-extensions$7497$dF01I
     (g$make-parameter$6976$dF01I
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$7339$dF01I)
          (if (if (list? g$x$7339$dF01I)
                (begin '#f (g$for-all$5061$dF01I string? g$x$7339$dF01I))
                '#f)
            (g$map$5063$dF01I
              (case-lambda ((g$x$7340$dF01I) g$x$7340$dF01I))
              g$x$7339$dF01I)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$7339$dF01I))))))
   (g$library-name->file-name$7303$dF01I
     g$library-name->file-name$7498$dF01I
     (case-lambda
       ((g$x$7341$dF01I)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6336$dF01I)))
          (case-lambda
            ((g$p$7344$dF01I g$extract$7345$dF01I)
             ((case-lambda
                ((g$extract$7346$dF01I g$p$7347$dF01I)
                 (letrec* ((g$display-hex$7348$dF01I
                             (case-lambda
                               ((g$n$7356$dF01I)
                                (if (<= '0 g$n$7356$dF01I '9)
                                  (display g$n$7356$dF01I g$p$7347$dF01I)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$7356$dF01I '10)))
                                    g$p$7347$dF01I))))))
                   (begin
                     ((letrec ((g$f$7349$dF01I
                                 (case-lambda
                                   ((g$ls$7350$dF01I)
                                    (if (not (null? g$ls$7350$dF01I))
                                      (begin
                                        (display '"/" g$p$7347$dF01I)
                                        (g$for-each$5064$dF01I
                                          (case-lambda
                                            ((g$c$7351$dF01I)
                                             (if ((case-lambda
                                                    ((g$t$7352$dF01I)
                                                     (if g$t$7352$dF01I
                                                       g$t$7352$dF01I
                                                       ((case-lambda
                                                          ((g$t$7353$dF01I)
                                                           (if g$t$7353$dF01I
                                                             g$t$7353$dF01I
                                                             ((case-lambda
                                                                ((g$t$7354$dF01I)
                                                                 (if g$t$7354$dF01I
                                                                   g$t$7354$dF01I
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5056$dF01I
                                                                       g$c$7351$dF01I
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5310$dF01I
                                                                '#\0
                                                                g$c$7351$dF01I
                                                                '#\9)))))
                                                        (g$char<=?$5310$dF01I
                                                          '#\A
                                                          g$c$7351$dF01I
                                                          '#\Z)))))
                                                  (g$char<=?$5310$dF01I
                                                    '#\a
                                                    g$c$7351$dF01I
                                                    '#\z))
                                               (display
                                                 g$c$7351$dF01I
                                                 g$p$7347$dF01I)
                                               (begin
                                                 (display '"%" g$p$7347$dF01I)
                                                 ((case-lambda
                                                    ((g$n$7355$dF01I)
                                                     (begin
                                                       (g$display-hex$7348$dF01I
                                                         (g$quotient$5919$dF01I
                                                           g$n$7355$dF01I
                                                           '16))
                                                       (g$display-hex$7348$dF01I
                                                         (g$remainder$5920$dF01I
                                                           g$n$7355$dF01I
                                                           '16)))))
                                                  (char->integer
                                                    g$c$7351$dF01I))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$7350$dF01I))))
                                        (g$f$7349$dF01I (cdr g$ls$7350$dF01I)))
                                      (void))))))
                        g$f$7349$dF01I)
                      g$x$7341$dF01I)
                     (g$extract$7346$dF01I)))))
              g$extract$7345$dF01I
              g$p$7344$dF01I)))))))
   (g$file-locator$7304$dF01I
     g$file-locator$7499$dF01I
     (g$make-parameter$6976$dF01I
       (case-lambda
         ((g$x$7357$dF01I)
          ((case-lambda
             ((g$str$7358$dF01I)
              ((letrec ((g$f$7359$dF01I
                          (case-lambda
                            ((g$ls$7360$dF01I
                               g$exts$7361$dF01I
                               g$failed-list$7362$dF01I)
                             (if (null? g$ls$7360$dF01I)
                               (g$file-locator-resolution-error$6974$dF01I
                                 g$x$7357$dF01I
                                 (reverse g$failed-list$7362$dF01I))
                               (if (null? g$exts$7361$dF01I)
                                 (g$f$7359$dF01I
                                   (cdr g$ls$7360$dF01I)
                                   (g$library-extensions$7302$dF01I)
                                   g$failed-list$7362$dF01I)
                                 ((case-lambda
                                    ((g$name$7363$dF01I)
                                     (if (g$file-exists?$5556$dF01I
                                           g$name$7363$dF01I)
                                       g$name$7363$dF01I
                                       (g$f$7359$dF01I
                                         g$ls$7360$dF01I
                                         (cdr g$exts$7361$dF01I)
                                         (cons
                                           g$name$7363$dF01I
                                           g$failed-list$7362$dF01I)))))
                                  (string-append
                                    (car g$ls$7360$dF01I)
                                    g$str$7358$dF01I
                                    (car g$exts$7361$dF01I)))))))))
                 g$f$7359$dF01I)
               (g$library-path$7301$dF01I)
               (g$library-extensions$7302$dF01I)
               '())))
           (g$library-name->file-name$7303$dF01I g$x$7357$dF01I))))
       (case-lambda
         ((g$f$7364$dF01I)
          (if (procedure? g$f$7364$dF01I)
            g$f$7364$dF01I
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$7364$dF01I))))))
   (g$serialize-all$7305$dF01I
     g$serialize-all$7500$dF01I
     (case-lambda
       ((g$serialize$7365$dF01I g$compile$7366$dF01I)
        (letrec* ((g$library-desc$7367$dF01I
                    (case-lambda
                      ((g$x$7369$dF01I)
                       (list
                         (g$library-id$7270$dF01I g$x$7369$dF01I)
                         (g$library-name$7271$dF01I g$x$7369$dF01I))))))
          (g$for-each$5064$dF01I
            (case-lambda
              ((g$x$7368$dF01I)
               (if (g$library-source-file-name$7283$dF01I g$x$7368$dF01I)
                 (g$serialize$7365$dF01I
                   (g$library-source-file-name$7283$dF01I g$x$7368$dF01I)
                   (list
                     (g$library-id$7270$dF01I g$x$7368$dF01I)
                     (g$library-name$7271$dF01I g$x$7368$dF01I)
                     (g$library-version$7272$dF01I g$x$7368$dF01I)
                     (g$map$5063$dF01I
                       g$library-desc$7367$dF01I
                       (g$library-imp*$7273$dF01I g$x$7368$dF01I))
                     (g$map$5063$dF01I
                       g$library-desc$7367$dF01I
                       (g$library-vis*$7274$dF01I g$x$7368$dF01I))
                     (g$map$5063$dF01I
                       g$library-desc$7367$dF01I
                       (g$library-inv*$7275$dF01I g$x$7368$dF01I))
                     (g$library-subst$7276$dF01I g$x$7368$dF01I)
                     (g$library-env$7277$dF01I g$x$7368$dF01I)
                     (g$compile$7366$dF01I
                       (g$library-visit-code$7280$dF01I g$x$7368$dF01I))
                     (g$compile$7366$dF01I
                       (g$library-invoke-code$7281$dF01I g$x$7368$dF01I))
                     (g$library-visible?$7282$dF01I g$x$7368$dF01I)))
                 (void))))
            ((g$current-library-collection$7264$dF01I)))))))
   (g$current-precompiled-library-loader$7306$dF01I
     g$current-precompiled-library-loader$7501$dF01I
     (g$make-parameter$6976$dF01I
       (case-lambda ((g$filename$7370$dF01I g$sk$7371$dF01I) '#f))))
   (g$try-load-from-file$7307$dF01I
     g$try-load-from-file$7502$dF01I
     (case-lambda
       ((g$filename$7372$dF01I)
        ((g$current-precompiled-library-loader$7306$dF01I)
         g$filename$7372$dF01I
         (case-lambda
           ((g$id$7373$dF01I
              g$name$7374$dF01I
              g$ver$7375$dF01I
              g$imp*$7376$dF01I
              g$vis*$7377$dF01I
              g$inv*$7378$dF01I
              g$exp-subst$7379$dF01I
              g$exp-env$7380$dF01I
              g$visit-proc$7381$dF01I
              g$invoke-proc$7382$dF01I
              g$visible?$7383$dF01I)
            ((letrec ((g$f$7384$dF01I
                        (case-lambda
                          ((g$deps$7385$dF01I)
                           (if (null? g$deps$7385$dF01I)
                             (begin
                               (g$install-library$7317$dF01I
                                 g$id$7373$dF01I
                                 g$name$7374$dF01I
                                 g$ver$7375$dF01I
                                 g$imp*$7376$dF01I
                                 g$vis*$7377$dF01I
                                 g$inv*$7378$dF01I
                                 g$exp-subst$7379$dF01I
                                 g$exp-env$7380$dF01I
                                 g$visit-proc$7381$dF01I
                                 g$invoke-proc$7382$dF01I
                                 '#f
                                 '#f
                                 g$visible?$7383$dF01I
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$7386$dF01I)
                                 ((case-lambda
                                    ((g$label$7387$dF01I g$dname$7388$dF01I)
                                     ((case-lambda
                                        ((g$l$7389$dF01I)
                                         (if (if (g$library?$7268$dF01I
                                                   g$l$7389$dF01I)
                                               (begin
                                                 '#f
                                                 (eq? g$label$7387$dF01I
                                                      (g$library-id$7270$dF01I
                                                        g$l$7389$dF01I)))
                                               '#f)
                                           (g$f$7384$dF01I
                                             (cdr g$deps$7385$dF01I))
                                           (begin
                                             (g$library-version-mismatch-warning$6973$dF01I
                                               g$name$7374$dF01I
                                               g$dname$7388$dF01I
                                               g$filename$7372$dF01I)
                                             '#f))))
                                      (g$find-library-by-name$7312$dF01I
                                        g$dname$7388$dF01I))))
                                  (car g$d$7386$dF01I)
                                  (g$cadr$5264$dF01I g$d$7386$dF01I))))
                              (car g$deps$7385$dF01I)))))))
               g$f$7384$dF01I)
             (append g$imp*$7376$dF01I g$vis*$7377$dF01I g$inv*$7378$dF01I)))
           (g$others$7390$dF01I '#f))))))
   (g$library-loader$7308$dF01I
     g$library-loader$7503$dF01I
     (g$make-parameter$6976$dF01I
       (case-lambda
         ((g$x$7391$dF01I)
          ((case-lambda
             ((g$file-name$7392$dF01I)
              (if (not g$file-name$7392$dF01I)
                (assertion-violation '#f '"cannot file library" g$x$7391$dF01I)
                ((case-lambda
                   ((g$t$7393$dF01I)
                    (if g$t$7393$dF01I
                      g$t$7393$dF01I
                      (begin
                        '#f
                        ((g$current-library-expander$7309$dF01I)
                         (g$read-library-source-file$6975$dF01I
                           g$file-name$7392$dF01I)
                         g$file-name$7392$dF01I
                         (case-lambda
                           ((g$name$7394$dF01I)
                            (if (not (equal? g$name$7394$dF01I g$x$7391$dF01I))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6336$dF01I)))
                                  (case-lambda
                                    ((g$p$7397$dF01I g$e$7398$dF01I)
                                     ((case-lambda
                                        ((g$e$7399$dF01I g$p$7400$dF01I)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7400$dF01I)
                                           (write g$x$7391$dF01I g$p$7400$dF01I)
                                           (display '" in file " g$p$7400$dF01I)
                                           (display
                                             g$file-name$7392$dF01I
                                             g$p$7400$dF01I)
                                           (display '", found " g$p$7400$dF01I)
                                           (write
                                             g$name$7394$dF01I
                                             g$p$7400$dF01I)
                                           (display '" instead" g$p$7400$dF01I)
                                           (g$e$7399$dF01I))))
                                      g$e$7398$dF01I
                                      g$p$7397$dF01I)))))
                              (void)))))))))
                 (g$try-load-from-file$7307$dF01I g$file-name$7392$dF01I)))))
           ((g$file-locator$7304$dF01I) g$x$7391$dF01I))))
       (case-lambda
         ((g$f$7401$dF01I)
          (if (procedure? g$f$7401$dF01I)
            g$f$7401$dF01I
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7401$dF01I))))))
   (g$current-library-expander$7309$dF01I
     g$current-library-expander$7504$dF01I
     (g$make-parameter$6976$dF01I
       (case-lambda
         ((g$x$7402$dF01I)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7403$dF01I)
          (if (procedure? g$f$7403$dF01I)
            g$f$7403$dF01I
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7403$dF01I))))))
   (g$external-pending-libraries$7310$dF01I
     g$external-pending-libraries$7505$dF01I
     (g$make-parameter$6976$dF01I '()))
   (g$find-external-library$7311$dF01I
     g$find-external-library$7506$dF01I
     (case-lambda
       ((g$name$7404$dF01I)
        (begin
          (if (g$member$5057$dF01I
                g$name$7404$dF01I
                (g$external-pending-libraries$7310$dF01I))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7404$dF01I)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7407$dF01I
                g$external-pending-libraries$7408$dF01I)
              ((case-lambda
                 ((g$swap$7409$dF01I)
                  (dynamic-wind
                    g$swap$7409$dF01I
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$7308$dF01I) g$name$7404$dF01I)
                         ((case-lambda
                            ((g$t$7410$dF01I)
                             (if g$t$7410$dF01I
                               g$t$7410$dF01I
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7404$dF01I)))))
                          (g$find-library-by$7300$dF01I
                            (case-lambda
                              ((g$x$7411$dF01I)
                               (equal?
                                 (g$library-name$7271$dF01I g$x$7411$dF01I)
                                 g$name$7404$dF01I))))))))
                    g$swap$7409$dF01I)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7412$dF01I)
                      (begin
                        (g$external-pending-libraries$7407$dF01I
                          g$external-pending-libraries$7408$dF01I)
                        (set! g$external-pending-libraries$7408$dF01I
                          g$t$7412$dF01I))))
                   (g$external-pending-libraries$7407$dF01I)))))))
           g$external-pending-libraries$7310$dF01I
           (cons
             g$name$7404$dF01I
             (g$external-pending-libraries$7310$dF01I)))))))
   (g$find-library-by-name$7312$dF01I
     g$find-library-by-name$7507$dF01I
     (case-lambda
       ((g$name$7413$dF01I)
        ((case-lambda
           ((g$t$7414$dF01I)
            (if g$t$7414$dF01I
              g$t$7414$dF01I
              (begin
                '#f
                (g$find-external-library$7311$dF01I g$name$7413$dF01I)))))
         (g$find-library-by$7300$dF01I
           (case-lambda
             ((g$x$7415$dF01I)
              (equal?
                (g$library-name$7271$dF01I g$x$7415$dF01I)
                g$name$7413$dF01I))))))))
   (g$library-exists?$7313$dF01I
     g$library-exists?$7508$dF01I
     (case-lambda
       ((g$name$7416$dF01I)
        (if (g$find-library-by$7300$dF01I
              (case-lambda
                ((g$x$7417$dF01I)
                 (equal?
                   (g$library-name$7271$dF01I g$x$7417$dF01I)
                   g$name$7416$dF01I))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$7314$dF01I
     g$find-library-by-spec/die$7509$dF01I
     (case-lambda
       ((g$spec$7418$dF01I)
        ((case-lambda
           ((g$id$7419$dF01I)
            ((case-lambda
               ((g$t$7420$dF01I)
                (if g$t$7420$dF01I
                  g$t$7420$dF01I
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7418$dF01I)))))
             (g$find-library-by$7300$dF01I
               (case-lambda
                 ((g$x$7421$dF01I)
                  (eq? g$id$7419$dF01I
                       (g$library-id$7270$dF01I g$x$7421$dF01I))))))))
         (car g$spec$7418$dF01I)))))
   (g$label->binding-table$7315$dF01I
     g$label->binding-table$7510$dF01I
     (g$make-eq-hashtable$5538$dF01I))
   (g$install-library-record$7316$dF01I
     g$install-library-record$7511$dF01I
     (case-lambda
       ((g$lib$7422$dF01I)
        (begin
          ((case-lambda
             ((g$exp-env$7423$dF01I)
              (g$for-each$5064$dF01I
                (case-lambda
                  ((g$x$7424$dF01I)
                   ((case-lambda
                      ((g$label$7425$dF01I g$binding$7426$dF01I)
                       ((case-lambda
                          ((g$binding$7427$dF01I)
                           (g$hashtable-set!$5542$dF01I
                             g$label->binding-table$7315$dF01I
                             g$label$7425$dF01I
                             g$binding$7427$dF01I)))
                        ((case-lambda
                           ((g$t$7428$dF01I)
                            (if (g$memv$5056$dF01I g$t$7428$dF01I '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7422$dF01I
                                  (cdr g$binding$7426$dF01I)))
                              (if (g$memv$5056$dF01I
                                    g$t$7428$dF01I
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7422$dF01I
                                    (cdr g$binding$7426$dF01I)))
                                (if (g$memv$5056$dF01I
                                      g$t$7428$dF01I
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7422$dF01I
                                      (cdr g$binding$7426$dF01I)))
                                  g$binding$7426$dF01I)))))
                         (car g$binding$7426$dF01I)))))
                    (car g$x$7424$dF01I)
                    (cdr g$x$7424$dF01I))))
                g$exp-env$7423$dF01I)))
           (g$library-env$7277$dF01I g$lib$7422$dF01I))
          ((g$current-library-collection$7264$dF01I) g$lib$7422$dF01I)))))
   (g$install-library$7317$dF01I
     g$install-library$7512$dF01I
     (case-lambda
       ((g$id$7429$dF01I
          g$name$7430$dF01I
          g$ver$7431$dF01I
          g$imp*$7432$dF01I
          g$vis*$7433$dF01I
          g$inv*$7434$dF01I
          g$exp-subst$7435$dF01I
          g$exp-env$7436$dF01I
          g$visit-proc$7437$dF01I
          g$invoke-proc$7438$dF01I
          g$visit-code$7439$dF01I
          g$invoke-code$7440$dF01I
          g$visible?$7441$dF01I
          g$source-file-name$7442$dF01I)
        ((case-lambda
           ((g$imp-lib*$7443$dF01I g$vis-lib*$7444$dF01I g$inv-lib*$7445$dF01I)
            (begin
              (if (not (if (symbol? g$id$7429$dF01I)
                         (if (list? g$name$7430$dF01I)
                           (begin '#f (list? g$ver$7431$dF01I))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7429$dF01I
                  g$name$7430$dF01I
                  g$ver$7431$dF01I)
                (void))
              (if (g$library-exists?$7313$dF01I g$name$7430$dF01I)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7430$dF01I)
                (void))
              ((case-lambda
                 ((g$lib$7446$dF01I)
                  (g$install-library-record$7316$dF01I g$lib$7446$dF01I)))
               (g$make-library$7269$dF01I
                 g$id$7429$dF01I
                 g$name$7430$dF01I
                 g$ver$7431$dF01I
                 g$imp-lib*$7443$dF01I
                 g$vis-lib*$7444$dF01I
                 g$inv-lib*$7445$dF01I
                 g$exp-subst$7435$dF01I
                 g$exp-env$7436$dF01I
                 g$visit-proc$7437$dF01I
                 g$invoke-proc$7438$dF01I
                 g$visit-code$7439$dF01I
                 g$invoke-code$7440$dF01I
                 g$visible?$7441$dF01I
                 g$source-file-name$7442$dF01I)))))
         (g$map$5063$dF01I
           g$find-library-by-spec/die$7314$dF01I
           g$imp*$7432$dF01I)
         (g$map$5063$dF01I
           g$find-library-by-spec/die$7314$dF01I
           g$vis*$7433$dF01I)
         (g$map$5063$dF01I
           g$find-library-by-spec/die$7314$dF01I
           g$inv*$7434$dF01I)))))
   (g$imported-label->binding$7318$dF01I
     g$imported-label->binding$7513$dF01I
     (case-lambda
       ((g$lab$7447$dF01I)
        (g$hashtable-ref$5541$dF01I
          g$label->binding-table$7315$dF01I
          g$lab$7447$dF01I
          '#f))))
   (g$invoke-library$7319$dF01I
     g$invoke-library$7514$dF01I
     (case-lambda
       ((g$lib$7448$dF01I)
        ((case-lambda
           ((g$invoke$7449$dF01I)
            (if (procedure? g$invoke$7449$dF01I)
              (begin
                (g$set-library-invoke-state!$7293$dF01I
                  g$lib$7448$dF01I
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7448$dF01I))))
                (g$for-each$5064$dF01I
                  g$invoke-library$7319$dF01I
                  (g$library-inv*$7275$dF01I g$lib$7448$dF01I))
                (g$set-library-invoke-state!$7293$dF01I
                  g$lib$7448$dF01I
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7448$dF01I))))
                (g$invoke$7449$dF01I)
                (g$set-library-invoke-state!$7293$dF01I g$lib$7448$dF01I '#t))
              (void))))
         (g$library-invoke-state$7279$dF01I g$lib$7448$dF01I)))))
   (g$visit-library$7320$dF01I
     g$visit-library$7515$dF01I
     (case-lambda
       ((g$lib$7450$dF01I)
        ((case-lambda
           ((g$visit$7451$dF01I)
            (if (procedure? g$visit$7451$dF01I)
              (begin
                (g$set-library-visit-state!$7292$dF01I
                  g$lib$7450$dF01I
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7450$dF01I))))
                (g$for-each$5064$dF01I
                  g$invoke-library$7319$dF01I
                  (g$library-vis*$7274$dF01I g$lib$7450$dF01I))
                (g$set-library-visit-state!$7292$dF01I
                  g$lib$7450$dF01I
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7450$dF01I))))
                (g$visit$7451$dF01I)
                (g$set-library-visit-state!$7292$dF01I g$lib$7450$dF01I '#t))
              (void))))
         (g$library-visit-state$7278$dF01I g$lib$7450$dF01I)))))
   (g$invoke-library-by-spec$7321$dF01I
     g$invoke-library-by-spec$7516$dF01I
     (case-lambda
       ((g$spec$7452$dF01I)
        (g$invoke-library$7319$dF01I
          (g$find-library-by-spec/die$7314$dF01I g$spec$7452$dF01I)))))
   (g$installed-libraries$7322$dF01I
     g$installed-libraries$7517$dF01I
     (case-lambda
       ((g$all?$7453$dF01I)
        ((letrec ((g$f$7454$dF01I
                    (case-lambda
                      ((g$ls$7455$dF01I)
                       (if (null? g$ls$7455$dF01I)
                         '()
                         (if ((case-lambda
                                ((g$t$7456$dF01I)
                                 (if g$t$7456$dF01I
                                   g$t$7456$dF01I
                                   (begin
                                     '#f
                                     (g$library-visible?$7282$dF01I
                                       (car g$ls$7455$dF01I))))))
                              g$all?$7453$dF01I)
                           (cons
                             (car g$ls$7455$dF01I)
                             (g$f$7454$dF01I (cdr g$ls$7455$dF01I)))
                           (g$f$7454$dF01I (cdr g$ls$7455$dF01I))))))))
           g$f$7454$dF01I)
         ((g$current-library-collection$7264$dF01I))))
       (() (g$installed-libraries$7322$dF01I '#f))))
   (g$library-spec$7323$dF01I
     g$library-spec$7518$dF01I
     (case-lambda
       ((g$x$7457$dF01I)
        (begin
          (if (not (g$library?$7268$dF01I g$x$7457$dF01I))
            (assertion-violation 'library-spec '"not a library" g$x$7457$dF01I)
            (void))
          (list
            (g$library-id$7270$dF01I g$x$7457$dF01I)
            (g$library-name$7271$dF01I g$x$7457$dF01I)
            (g$library-version$7272$dF01I g$x$7457$dF01I)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7519$dF01I
     g$build-global-define$7629$dF01I
     (case-lambda ((g$x$7600$dF01I) (g$build-void$7596$dF01I))))
   (g$build-lambda$7568$dF01I
     g$build-lambda$7630$dF01I
     (case-lambda
       ((g$ae$7601$dF01I g$vars$7602$dF01I g$exp$7603$dF01I)
        (list 'case-lambda (list g$vars$7602$dF01I g$exp$7603$dF01I)))))
   (g$build-case-lambda$7569$dF01I
     g$build-case-lambda$7631$dF01I
     (case-lambda
       ((g$ae$7604$dF01I g$vars*$7605$dF01I g$exp*$7606$dF01I)
        (cons
          'case-lambda
          (g$map$5063$dF01I list g$vars*$7605$dF01I g$exp*$7606$dF01I)))))
   (g$build-let$7570$dF01I
     g$build-let$7632$dF01I
     (case-lambda
       ((g$ae$7607$dF01I g$lhs*$7608$dF01I g$rhs*$7609$dF01I g$body$7610$dF01I)
        (cons
          (g$build-lambda$7568$dF01I
            g$ae$7607$dF01I
            g$lhs*$7608$dF01I
            g$body$7610$dF01I)
          g$rhs*$7609$dF01I))))
   (g$build-sequence$7595$dF01I
     g$build-sequence$7633$dF01I
     (case-lambda
       ((g$ae$7611$dF01I g$exps$7612$dF01I)
        ((letrec ((g$loop$7613$dF01I
                    (case-lambda
                      ((g$exps$7614$dF01I)
                       (if (null? (cdr g$exps$7614$dF01I))
                         (car g$exps$7614$dF01I)
                         (if (equal?
                               (car g$exps$7614$dF01I)
                               (g$build-void$7596$dF01I))
                           (g$loop$7613$dF01I (cdr g$exps$7614$dF01I))
                           (cons 'begin g$exps$7614$dF01I)))))))
           g$loop$7613$dF01I)
         g$exps$7612$dF01I))))
   (g$build-void$7596$dF01I
     g$build-void$7634$dF01I
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7597$dF01I
     g$build-letrec$7635$dF01I
     (case-lambda
       ((g$ae$7615$dF01I
          g$vars$7616$dF01I
          g$val-exps$7617$dF01I
          g$body-exp$7618$dF01I)
        (if (null? g$vars$7616$dF01I)
          g$body-exp$7618$dF01I
          (list
            'letrec
            (g$map$5063$dF01I list g$vars$7616$dF01I g$val-exps$7617$dF01I)
            g$body-exp$7618$dF01I)))))
   (g$build-letrec*$7598$dF01I
     g$build-letrec*$7636$dF01I
     (case-lambda
       ((g$ae$7619$dF01I
          g$vars$7620$dF01I
          g$val-exps$7621$dF01I
          g$body-exp$7622$dF01I)
        (if (null? g$vars$7620$dF01I)
          g$body-exp$7622$dF01I
          (list
            'letrec*
            (g$map$5063$dF01I list g$vars$7620$dF01I g$val-exps$7621$dF01I)
            g$body-exp$7622$dF01I)))))
   (g$build-library-letrec*$7599$dF01I
     g$build-library-letrec*$7637$dF01I
     (case-lambda
       ((g$ae$7623$dF01I
          g$name$7624$dF01I
          g$vars$7625$dF01I
          g$locs$7626$dF01I
          g$val-exps$7627$dF01I
          g$body-exp$7628$dF01I)
        (list
          'library-letrec*
          g$name$7624$dF01I
          (g$map$5063$dF01I
            list
            g$vars$7625$dF01I
            g$locs$7626$dF01I
            g$val-exps$7627$dF01I)
          g$body-exp$7628$dF01I)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7638$dF01I
     g$set-cons$11334$dF01I
     (case-lambda
       ((g$x$8103$dF01I g$ls$8104$dF01I)
        (if (g$memq$5055$dF01I g$x$8103$dF01I g$ls$8104$dF01I)
          g$ls$8104$dF01I
          (cons g$x$8103$dF01I g$ls$8104$dF01I)))))
   (g$set-union$7639$dF01I
     g$set-union$11335$dF01I
     (case-lambda
       ((g$ls1$8105$dF01I g$ls2$8106$dF01I)
        (if (null? g$ls1$8105$dF01I)
          g$ls2$8106$dF01I
          (if (g$memq$5055$dF01I (car g$ls1$8105$dF01I) g$ls2$8106$dF01I)
            (g$set-union$7639$dF01I (cdr g$ls1$8105$dF01I) g$ls2$8106$dF01I)
            (cons
              (car g$ls1$8105$dF01I)
              (g$set-union$7639$dF01I
                (cdr g$ls1$8105$dF01I)
                g$ls2$8106$dF01I)))))))
   (g$top-mark*$7641$dF01I g$top-mark*$11336$dF01I '(top))
   (g$top-marked?$7642$dF01I
     g$top-marked?$11337$dF01I
     (case-lambda
       ((g$m*$8107$dF01I) (g$memq$5055$dF01I 'top g$m*$8107$dF01I))))
   (g$gen-lexical$7643$dF01I
     g$gen-lexical$11338$dF01I
     (case-lambda
       ((g$sym$8108$dF01I)
        (if (symbol? g$sym$8108$dF01I)
          (gensym g$sym$8108$dF01I)
          (if (g$stx?$7676$dF01I g$sym$8108$dF01I)
            (g$gen-lexical$7643$dF01I (g$id->sym$7705$dF01I g$sym$8108$dF01I))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$8108$dF01I))))))
   (g$gen-global$7644$dF01I
     g$gen-global$11339$dF01I
     (case-lambda
       ((g$x$8109$dF01I) (g$gen-lexical$7643$dF01I g$x$8109$dF01I))))
   (g$gen-label$7645$dF01I
     g$gen-label$11340$dF01I
     (case-lambda ((g$_$8110$dF01I) (gensym))))
   (g$gen-top-level-label$7646$dF01I
     g$gen-top-level-label$11341$dF01I
     (case-lambda
       ((g$id$8111$dF01I g$rib$8112$dF01I)
        (letrec* ((g$find$8113$dF01I
                    (case-lambda
                      ((g$sym$8119$dF01I
                         g$mark*$8120$dF01I
                         g$sym*$8121$dF01I
                         g$mark**$8122$dF01I
                         g$label*$8123$dF01I)
                       (if (pair? g$sym*$8121$dF01I)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8119$dF01I
                                        (car g$sym*$8121$dF01I))
                                 (begin
                                   '#f
                                   (g$same-marks?$7706$dF01I
                                     g$mark*$8120$dF01I
                                     (car g$mark**$8122$dF01I)))
                                 '#f)
                             (car g$label*$8123$dF01I)
                             (g$find$8113$dF01I
                               g$sym$8119$dF01I
                               g$mark*$8120$dF01I
                               (cdr g$sym*$8121$dF01I)
                               (cdr g$mark**$8122$dF01I)
                               (cdr g$label*$8123$dF01I))))
                         '#f)))))
          ((case-lambda
             ((g$sym$8114$dF01I g$mark*$8115$dF01I)
              ((case-lambda
                 ((g$sym*$8116$dF01I)
                  ((case-lambda
                     ((g$t$8117$dF01I)
                      (if g$t$8117$dF01I
                        ((case-lambda
                           ((g$label$8118$dF01I)
                            (if (g$imported-label->binding$7513$dF01I
                                  g$label$8118$dF01I)
                              (gensym)
                              g$label$8118$dF01I)))
                         g$t$8117$dF01I)
                        (gensym))))
                   (if (g$memq$5055$dF01I
                         g$sym$8114$dF01I
                         (g$rib-sym*$7654$dF01I g$rib$8112$dF01I))
                     (begin
                       '#f
                       (g$find$8113$dF01I
                         g$sym$8114$dF01I
                         g$mark*$8115$dF01I
                         g$sym*$8116$dF01I
                         (g$rib-mark**$7655$dF01I g$rib$8112$dF01I)
                         (g$rib-label*$7656$dF01I g$rib$8112$dF01I)))
                     '#f))))
               (g$rib-sym*$7654$dF01I g$rib$8112$dF01I))))
           (g$id->sym$7705$dF01I g$id$8111$dF01I)
           (g$stx-mark*$7679$dF01I g$id$8111$dF01I))))))
   (g$gen-define-label+loc$7647$dF01I
     g$gen-define-label+loc$11342$dF01I
     (case-lambda
       ((g$id$8124$dF01I g$rib$8125$dF01I g$sd?$8126$dF01I)
        (if g$sd?$8126$dF01I
          (values (gensym) (g$gen-lexical$7643$dF01I g$id$8124$dF01I))
          ((case-lambda
             ((g$env$8127$dF01I)
              ((case-lambda
                 ((g$label$8128$dF01I g$locs$8129$dF01I)
                  (values
                    g$label$8128$dF01I
                    ((case-lambda
                       ((g$t$8130$dF01I)
                        (if g$t$8130$dF01I
                          (cdr g$t$8130$dF01I)
                          ((case-lambda
                             ((g$loc$8131$dF01I)
                              (begin
                                (g$set-interaction-env-locs!$8065$dF01I
                                  g$env$8127$dF01I
                                  (cons
                                    (cons g$label$8128$dF01I g$loc$8131$dF01I)
                                    g$locs$8129$dF01I))
                                g$loc$8131$dF01I)))
                           (g$gen-lexical$7643$dF01I g$id$8124$dF01I)))))
                     (g$assq$5051$dF01I
                       g$label$8128$dF01I
                       g$locs$8129$dF01I)))))
               (g$gen-top-level-label$7646$dF01I
                 g$id$8124$dF01I
                 g$rib$8125$dF01I)
               (g$interaction-env-locs$8062$dF01I g$env$8127$dF01I))))
           (g$top-level-context$8102$dF01I))))))
   (g$gen-define-label$7648$dF01I
     g$gen-define-label$11343$dF01I
     (case-lambda
       ((g$id$8132$dF01I g$rib$8133$dF01I g$sd?$8134$dF01I)
        (if g$sd?$8134$dF01I
          (gensym)
          (g$gen-top-level-label$7646$dF01I
            g$id$8132$dF01I
            g$rib$8133$dF01I)))))
   (g$8658$7649$dF01I
     g$8658$11344$dF01I
     (make-record-type-descriptor
       'rib
       '#f
       'g$8661$dF01I
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8660$7650$dF01I g$8660$11345$dF01I '#f)
   (g$8659$7651$dF01I
     g$8659$11346$dF01I
     (make-record-constructor-descriptor
       g$8658$7649$dF01I
       '#f
       g$8660$7650$dF01I))
   (g$rib?$7652$dF01I
     g$rib?$11347$dF01I
     (record-predicate g$8658$7649$dF01I))
   (g$make-rib$7653$dF01I
     g$make-rib$11348$dF01I
     (record-constructor g$8659$7651$dF01I))
   (g$rib-sym*$7654$dF01I
     g$rib-sym*$11349$dF01I
     (record-accessor g$8658$7649$dF01I '0))
   (g$rib-mark**$7655$dF01I
     g$rib-mark**$11350$dF01I
     (record-accessor g$8658$7649$dF01I '1))
   (g$rib-label*$7656$dF01I
     g$rib-label*$11351$dF01I
     (record-accessor g$8658$7649$dF01I '2))
   (g$rib-sealed/freq$7657$dF01I
     g$rib-sealed/freq$11352$dF01I
     (record-accessor g$8658$7649$dF01I '3))
   (g$rib-cache$7658$dF01I
     g$rib-cache$11353$dF01I
     (record-accessor g$8658$7649$dF01I '4))
   (g$set-rib-sym*!$7659$dF01I
     g$set-rib-sym*!$11354$dF01I
     (record-mutator g$8658$7649$dF01I '0))
   (g$set-rib-mark**!$7660$dF01I
     g$set-rib-mark**!$11355$dF01I
     (record-mutator g$8658$7649$dF01I '1))
   (g$set-rib-label*!$7661$dF01I
     g$set-rib-label*!$11356$dF01I
     (record-mutator g$8658$7649$dF01I '2))
   (g$set-rib-sealed/freq!$7662$dF01I
     g$set-rib-sealed/freq!$11357$dF01I
     (record-mutator g$8658$7649$dF01I '3))
   (g$set-rib-cache!$7663$dF01I
     g$set-rib-cache!$11358$dF01I
     (record-mutator g$8658$7649$dF01I '4))
   (g$make-empty-rib$7664$dF01I
     g$make-empty-rib$11359$dF01I
     (case-lambda (() (g$make-rib$7653$dF01I '() '() '() '#f '#f))))
   (g$make-cache-rib$7665$dF01I
     g$make-cache-rib$11360$dF01I
     (case-lambda
       (()
        (g$make-rib$7653$dF01I
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5538$dF01I)))))
   (g$find-label$7666$dF01I
     g$find-label$11361$dF01I
     (case-lambda
       ((g$rib$8135$dF01I g$sym$8136$dF01I g$mark*$8137$dF01I)
        ((case-lambda
           ((g$ht$8138$dF01I)
            (if g$ht$8138$dF01I
              (begin
                '#f
                ((case-lambda
                   ((g$cv$8139$dF01I)
                    ((case-lambda
                       ((g$t$8140$dF01I)
                        (if g$t$8140$dF01I (cdr g$t$8140$dF01I) '#f)))
                     (if g$cv$8139$dF01I
                       (begin
                         '#f
                         (g$assp$5054$dF01I
                           (case-lambda
                             ((g$m$8141$dF01I)
                              (g$same-marks?$7706$dF01I
                                g$mark*$8137$dF01I
                                g$m$8141$dF01I)))
                           g$cv$8139$dF01I))
                       '#f))))
                 (g$hashtable-ref$5541$dF01I
                   g$ht$8138$dF01I
                   g$sym$8136$dF01I
                   '#f)))
              '#f)))
         (g$rib-cache$7658$dF01I g$rib$8135$dF01I)))))
   (g$extend-rib!$7667$dF01I
     g$extend-rib!$11362$dF01I
     (case-lambda
       ((g$rib$8142$dF01I g$id$8143$dF01I g$label$8144$dF01I g$sd?$8145$dF01I)
        (letrec* ((g$find$8146$dF01I
                    (case-lambda
                      ((g$sym$8155$dF01I
                         g$mark*$8156$dF01I
                         g$sym*$8157$dF01I
                         g$mark**$8158$dF01I
                         g$label*$8159$dF01I)
                       (if (pair? g$sym*$8157$dF01I)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8155$dF01I
                                        (car g$sym*$8157$dF01I))
                                 (begin
                                   '#f
                                   (g$same-marks?$7706$dF01I
                                     g$mark*$8156$dF01I
                                     (car g$mark**$8158$dF01I)))
                                 '#f)
                             g$label*$8159$dF01I
                             (g$find$8146$dF01I
                               g$sym$8155$dF01I
                               g$mark*$8156$dF01I
                               (cdr g$sym*$8157$dF01I)
                               (cdr g$mark**$8158$dF01I)
                               (cdr g$label*$8159$dF01I))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7657$dF01I g$rib$8142$dF01I)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$8142$dF01I)
              (void))
            ((case-lambda
               ((g$sym$8147$dF01I g$mark*$8148$dF01I)
                ((case-lambda
                   ((g$sym*$8149$dF01I)
                    ((case-lambda
                       ((g$t$8150$dF01I)
                        (if g$t$8150$dF01I
                          ((case-lambda
                             ((g$p$8151$dF01I)
                              (if (not (eq? g$label$8144$dF01I g$p$8151$dF01I))
                                (g$syntax-violation$8094$dF01I
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$8143$dF01I)
                                (void))))
                           g$t$8150$dF01I)
                          ((case-lambda
                             ((g$t$8152$dF01I)
                              (if g$t$8152$dF01I
                                ((case-lambda
                                   ((g$p$8153$dF01I)
                                    (if (not (eq? g$label$8144$dF01I
                                                  (car g$p$8153$dF01I)))
                                      (if (not g$sd?$8145$dF01I)
                                        (set-car!
                                          g$p$8153$dF01I
                                          g$label$8144$dF01I)
                                        (g$syntax-violation$8094$dF01I
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$8143$dF01I))
                                      (void))))
                                 g$t$8152$dF01I)
                                (begin
                                  (if (g$rib-cache$7658$dF01I g$rib$8142$dF01I)
                                    (g$hashtable-update!$5545$dF01I
                                      (g$rib-cache$7658$dF01I g$rib$8142$dF01I)
                                      g$sym$8147$dF01I
                                      (case-lambda
                                        ((g$e$8154$dF01I)
                                         (cons
                                           (cons
                                             g$mark*$8148$dF01I
                                             g$label$8144$dF01I)
                                           g$e$8154$dF01I)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7659$dF01I
                                    g$rib$8142$dF01I
                                    (cons g$sym$8147$dF01I g$sym*$8149$dF01I))
                                  (g$set-rib-mark**!$7660$dF01I
                                    g$rib$8142$dF01I
                                    (cons
                                      g$mark*$8148$dF01I
                                      (g$rib-mark**$7655$dF01I
                                        g$rib$8142$dF01I)))
                                  (g$set-rib-label*!$7661$dF01I
                                    g$rib$8142$dF01I
                                    (cons
                                      g$label$8144$dF01I
                                      (g$rib-label*$7656$dF01I
                                        g$rib$8142$dF01I)))))))
                           (if (g$memq$5055$dF01I
                                 g$sym$8147$dF01I
                                 (g$rib-sym*$7654$dF01I g$rib$8142$dF01I))
                             (begin
                               '#f
                               (g$find$8146$dF01I
                                 g$sym$8147$dF01I
                                 g$mark*$8148$dF01I
                                 g$sym*$8149$dF01I
                                 (g$rib-mark**$7655$dF01I g$rib$8142$dF01I)
                                 (g$rib-label*$7656$dF01I g$rib$8142$dF01I)))
                             '#f)))))
                     (g$find-label$7666$dF01I
                       g$rib$8142$dF01I
                       g$sym$8147$dF01I
                       g$mark*$8148$dF01I))))
                 (g$rib-sym*$7654$dF01I g$rib$8142$dF01I))))
             (g$id->sym$7705$dF01I g$id$8143$dF01I)
             (g$stx-mark*$7679$dF01I g$id$8143$dF01I)))))))
   (g$extend-rib/nc!$7668$dF01I
     g$extend-rib/nc!$11363$dF01I
     (case-lambda
       ((g$rib$8160$dF01I g$id$8161$dF01I g$label$8162$dF01I)
        ((case-lambda
           ((g$sym$8163$dF01I g$mark*$8164$dF01I)
            ((case-lambda
               ((g$sym*$8165$dF01I)
                (begin
                  (if (g$rib-cache$7658$dF01I g$rib$8160$dF01I)
                    (g$hashtable-update!$5545$dF01I
                      (g$rib-cache$7658$dF01I g$rib$8160$dF01I)
                      g$sym$8163$dF01I
                      (case-lambda
                        ((g$e$8166$dF01I)
                         (cons
                           (cons g$mark*$8164$dF01I g$label$8162$dF01I)
                           g$e$8166$dF01I)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7659$dF01I
                    g$rib$8160$dF01I
                    (cons g$sym$8163$dF01I g$sym*$8165$dF01I))
                  (g$set-rib-mark**!$7660$dF01I
                    g$rib$8160$dF01I
                    (cons
                      g$mark*$8164$dF01I
                      (g$rib-mark**$7655$dF01I g$rib$8160$dF01I)))
                  (g$set-rib-label*!$7661$dF01I
                    g$rib$8160$dF01I
                    (cons
                      g$label$8162$dF01I
                      (g$rib-label*$7656$dF01I g$rib$8160$dF01I))))))
             (g$rib-sym*$7654$dF01I g$rib$8160$dF01I))))
         (g$id->sym$7705$dF01I g$id$8161$dF01I)
         (g$stx-mark*$7679$dF01I g$id$8161$dF01I)))))
   (g$make-rib-map$7669$dF01I
     g$make-rib-map$11364$dF01I
     (case-lambda
       ((g$sym*$8167$dF01I)
        ((case-lambda
           ((g$ht$8168$dF01I)
            ((letrec ((g$f$8169$dF01I
                        (case-lambda
                          ((g$i$8170$dF01I g$sym*$8171$dF01I)
                           (if (null? g$sym*$8171$dF01I)
                             g$ht$8168$dF01I
                             (begin
                               (g$hashtable-update!$5545$dF01I
                                 g$ht$8168$dF01I
                                 (car g$sym*$8171$dF01I)
                                 (case-lambda
                                   ((g$x$8172$dF01I)
                                    (cons g$i$8170$dF01I g$x$8172$dF01I)))
                                 '())
                               (g$f$8169$dF01I
                                 (+ g$i$8170$dF01I '1)
                                 (cdr g$sym*$8171$dF01I))))))))
               g$f$8169$dF01I)
             '0
             g$sym*$8167$dF01I)))
         (g$make-eq-hashtable$5538$dF01I)))))
   (g$seal-rib!$7670$dF01I
     g$seal-rib!$11365$dF01I
     (case-lambda
       ((g$rib$8173$dF01I)
        ((case-lambda
           ((g$sym*$8174$dF01I)
            (if (not (null? g$sym*$8174$dF01I))
              (begin
                (g$set-rib-sym*!$7659$dF01I
                  g$rib$8173$dF01I
                  (list->vector g$sym*$8174$dF01I))
                (g$set-rib-mark**!$7660$dF01I
                  g$rib$8173$dF01I
                  (list->vector (g$rib-mark**$7655$dF01I g$rib$8173$dF01I)))
                (g$set-rib-label*!$7661$dF01I
                  g$rib$8173$dF01I
                  (list->vector (g$rib-label*$7656$dF01I g$rib$8173$dF01I)))
                (g$set-rib-sealed/freq!$7662$dF01I
                  g$rib$8173$dF01I
                  (g$make-rib-map$7669$dF01I g$sym*$8174$dF01I)))
              (void))))
         (g$rib-sym*$7654$dF01I g$rib$8173$dF01I)))))
   (g$unseal-rib!$7671$dF01I
     g$unseal-rib!$11366$dF01I
     (case-lambda
       ((g$rib$8175$dF01I)
        (if (g$rib-sealed/freq$7657$dF01I g$rib$8175$dF01I)
          (begin
            (g$set-rib-sealed/freq!$7662$dF01I g$rib$8175$dF01I '#f)
            (g$set-rib-sym*!$7659$dF01I
              g$rib$8175$dF01I
              (vector->list (g$rib-sym*$7654$dF01I g$rib$8175$dF01I)))
            (g$set-rib-mark**!$7660$dF01I
              g$rib$8175$dF01I
              (vector->list (g$rib-mark**$7655$dF01I g$rib$8175$dF01I)))
            (g$set-rib-label*!$7661$dF01I
              g$rib$8175$dF01I
              (vector->list (g$rib-label*$7656$dF01I g$rib$8175$dF01I))))
          (void)))))
   (g$make-full-rib$7672$dF01I
     g$make-full-rib$11367$dF01I
     (case-lambda
       ((g$id*$8176$dF01I g$label*$8177$dF01I)
        ((case-lambda
           ((g$r$8178$dF01I)
            (begin (g$seal-rib!$7670$dF01I g$r$8178$dF01I) g$r$8178$dF01I)))
         (g$make-rib$7653$dF01I
           (g$map$5063$dF01I g$id->sym$7705$dF01I g$id*$8176$dF01I)
           (g$map$5063$dF01I g$stx-mark*$7679$dF01I g$id*$8176$dF01I)
           g$label*$8177$dF01I
           '#f
           '#f)))))
   (g$8689$7673$dF01I
     g$8689$11368$dF01I
     (make-record-type-descriptor
       'stx
       '#f
       'g$8692$dF01I
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8691$7674$dF01I g$8691$11369$dF01I '#f)
   (g$8690$7675$dF01I
     g$8690$11370$dF01I
     (make-record-constructor-descriptor
       g$8689$7673$dF01I
       '#f
       g$8691$7674$dF01I))
   (g$stx?$7676$dF01I
     g$stx?$11371$dF01I
     (record-predicate g$8689$7673$dF01I))
   (g$make-stx$7677$dF01I
     g$make-stx$11372$dF01I
     (record-constructor g$8690$7675$dF01I))
   (g$stx-expr$7678$dF01I
     g$stx-expr$11373$dF01I
     (record-accessor g$8689$7673$dF01I '0))
   (g$stx-mark*$7679$dF01I
     g$stx-mark*$11374$dF01I
     (record-accessor g$8689$7673$dF01I '1))
   (g$stx-subst*$7680$dF01I
     g$stx-subst*$11375$dF01I
     (record-accessor g$8689$7673$dF01I '2))
   (g$stx-ae*$7681$dF01I
     g$stx-ae*$11376$dF01I
     (record-accessor g$8689$7673$dF01I '3))
   (g$set-stx-expr!$7682$dF01I
     g$set-stx-expr!$11377$dF01I
     (record-mutator g$8689$7673$dF01I '0))
   (g$set-stx-mark*!$7683$dF01I
     g$set-stx-mark*!$11378$dF01I
     (record-mutator g$8689$7673$dF01I '1))
   (g$set-stx-subst*!$7684$dF01I
     g$set-stx-subst*!$11379$dF01I
     (record-mutator g$8689$7673$dF01I '2))
   (g$set-stx-ae*!$7685$dF01I
     g$set-stx-ae*!$11380$dF01I
     (record-mutator g$8689$7673$dF01I '3))
   (g$rp$7686$dF01I
     g$rp$11381$dF01I
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$8179$dF01I g$p$8180$dF01I g$wr$8181$dF01I)
          (begin
            (display '"#<syntax " g$p$8180$dF01I)
            (write (g$stx->datum$7715$dF01I g$x$8179$dF01I) g$p$8180$dF01I)
            ((case-lambda
               ((g$expr$8182$dF01I)
                (if (annotation? g$expr$8182$dF01I)
                  ((case-lambda
                     ((g$src$8183$dF01I)
                      (if (pair? g$src$8183$dF01I)
                        (begin
                          (display '" (" g$p$8180$dF01I)
                          (display (cdr g$src$8183$dF01I) g$p$8180$dF01I)
                          (display '" of " g$p$8180$dF01I)
                          (display (car g$src$8183$dF01I) g$p$8180$dF01I)
                          (display '")" g$p$8180$dF01I))
                        (void))))
                   (annotation-source g$expr$8182$dF01I))
                  (void))))
             (g$stx-expr$7678$dF01I g$x$8179$dF01I))
            (display '">" g$p$8180$dF01I))))))
   (g$datum->stx$7687$dF01I
     g$datum->stx$11382$dF01I
     (case-lambda
       ((g$id$8184$dF01I g$datum$8185$dF01I)
        (g$make-stx$7677$dF01I
          g$datum$8185$dF01I
          (g$stx-mark*$7679$dF01I g$id$8184$dF01I)
          (g$stx-subst*$7680$dF01I g$id$8184$dF01I)
          (g$stx-ae*$7681$dF01I g$id$8184$dF01I)))))
   (g$gen-mark$7688$dF01I
     g$gen-mark$11383$dF01I
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7689$dF01I g$anti-mark$11384$dF01I '#f)
   (g$anti-mark?$7690$dF01I g$anti-mark?$11385$dF01I not)
   (g$join-wraps$7691$dF01I
     g$join-wraps$11386$dF01I
     (case-lambda
       ((g$m1*$8186$dF01I g$s1*$8187$dF01I g$ae1*$8188$dF01I g$e$8189$dF01I)
        (letrec* ((g$cancel$8190$dF01I
                    (case-lambda
                      ((g$ls1$8194$dF01I g$ls2$8195$dF01I)
                       ((letrec ((g$f$8196$dF01I
                                   (case-lambda
                                     ((g$x$8197$dF01I g$ls1$8198$dF01I)
                                      (if (null? g$ls1$8198$dF01I)
                                        (cdr g$ls2$8195$dF01I)
                                        (cons
                                          g$x$8197$dF01I
                                          (g$f$8196$dF01I
                                            (car g$ls1$8198$dF01I)
                                            (cdr g$ls1$8198$dF01I))))))))
                          g$f$8196$dF01I)
                        (car g$ls1$8194$dF01I)
                        (cdr g$ls1$8194$dF01I))))))
          ((case-lambda
             ((g$m2*$8191$dF01I g$s2*$8192$dF01I g$ae2*$8193$dF01I)
              (if (if (not (null? g$m1*$8186$dF01I))
                    (if (not (null? g$m2*$8191$dF01I))
                      (begin
                        '#f
                        (g$anti-mark?$7690$dF01I (car g$m2*$8191$dF01I)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$8190$dF01I g$m1*$8186$dF01I g$m2*$8191$dF01I)
                  (g$cancel$8190$dF01I g$s1*$8187$dF01I g$s2*$8192$dF01I)
                  (g$cancel$8190$dF01I g$ae1*$8188$dF01I g$ae2*$8193$dF01I))
                (values
                  (append g$m1*$8186$dF01I g$m2*$8191$dF01I)
                  (append g$s1*$8187$dF01I g$s2*$8192$dF01I)
                  (append g$ae1*$8188$dF01I g$ae2*$8193$dF01I)))))
           (g$stx-mark*$7679$dF01I g$e$8189$dF01I)
           (g$stx-subst*$7680$dF01I g$e$8189$dF01I)
           (g$stx-ae*$7681$dF01I g$e$8189$dF01I))))))
   (g$mkstx$7692$dF01I
     g$mkstx$11387$dF01I
     (case-lambda
       ((g$e$8199$dF01I g$m*$8200$dF01I g$s*$8201$dF01I g$ae*$8202$dF01I)
        (if (if (g$stx?$7676$dF01I g$e$8199$dF01I)
              (begin '#f (not (g$top-marked?$7642$dF01I g$m*$8200$dF01I)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7691$dF01I
                 g$m*$8200$dF01I
                 g$s*$8201$dF01I
                 g$ae*$8202$dF01I
                 g$e$8199$dF01I)))
            (case-lambda
              ((g$m*$8206$dF01I g$s*$8207$dF01I g$ae*$8208$dF01I)
               ((case-lambda
                  ((g$ae*$8209$dF01I g$s*$8210$dF01I g$m*$8211$dF01I)
                   (g$make-stx$7677$dF01I
                     (g$stx-expr$7678$dF01I g$e$8199$dF01I)
                     g$m*$8211$dF01I
                     g$s*$8210$dF01I
                     g$ae*$8209$dF01I)))
                g$ae*$8208$dF01I
                g$s*$8207$dF01I
                g$m*$8206$dF01I))))
          (g$make-stx$7677$dF01I
            g$e$8199$dF01I
            g$m*$8200$dF01I
            g$s*$8201$dF01I
            g$ae*$8202$dF01I)))))
   (g$add-mark$7693$dF01I
     g$add-mark$11388$dF01I
     (case-lambda
       ((g$m$8212$dF01I g$e$8213$dF01I g$ae$8214$dF01I)
        (g$mkstx$7692$dF01I
          g$e$8213$dF01I
          (list g$m$8212$dF01I)
          '(shift)
          (list g$ae$8214$dF01I)))))
   (g$add-subst$7694$dF01I
     g$add-subst$11389$dF01I
     (case-lambda
       ((g$subst$8215$dF01I g$e$8216$dF01I)
        (g$mkstx$7692$dF01I g$e$8216$dF01I '() (list g$subst$8215$dF01I) '()))))
   (g$syntax-kind?$7695$dF01I
     g$syntax-kind?$11390$dF01I
     (case-lambda
       ((g$x$8217$dF01I g$p?$8218$dF01I)
        (if (g$stx?$7676$dF01I g$x$8217$dF01I)
          (g$syntax-kind?$7695$dF01I
            (g$stx-expr$7678$dF01I g$x$8217$dF01I)
            g$p?$8218$dF01I)
          (if (annotation? g$x$8217$dF01I)
            (g$syntax-kind?$7695$dF01I
              (annotation-expression g$x$8217$dF01I)
              g$p?$8218$dF01I)
            (g$p?$8218$dF01I g$x$8217$dF01I))))))
   (g$syntax-vector->list$7696$dF01I
     g$syntax-vector->list$11391$dF01I
     (case-lambda
       ((g$x$8219$dF01I)
        (if (g$stx?$7676$dF01I g$x$8219$dF01I)
          ((case-lambda
             ((g$ls$8220$dF01I g$m*$8221$dF01I g$s*$8222$dF01I g$ae*$8223$dF01I)
              (g$map$5063$dF01I
                (case-lambda
                  ((g$x$8224$dF01I)
                   (g$mkstx$7692$dF01I
                     g$x$8224$dF01I
                     g$m*$8221$dF01I
                     g$s*$8222$dF01I
                     g$ae*$8223$dF01I)))
                g$ls$8220$dF01I)))
           (g$syntax-vector->list$7696$dF01I
             (g$stx-expr$7678$dF01I g$x$8219$dF01I))
           (g$stx-mark*$7679$dF01I g$x$8219$dF01I)
           (g$stx-subst*$7680$dF01I g$x$8219$dF01I)
           (g$stx-ae*$7681$dF01I g$x$8219$dF01I))
          (if (annotation? g$x$8219$dF01I)
            (g$syntax-vector->list$7696$dF01I
              (annotation-expression g$x$8219$dF01I))
            (if (vector? g$x$8219$dF01I)
              (vector->list g$x$8219$dF01I)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$8219$dF01I)))))))
   (g$syntax-pair?$7697$dF01I
     g$syntax-pair?$11392$dF01I
     (case-lambda
       ((g$x$8225$dF01I) (g$syntax-kind?$7695$dF01I g$x$8225$dF01I pair?))))
   (g$syntax-vector?$7698$dF01I
     g$syntax-vector?$11393$dF01I
     (case-lambda
       ((g$x$8226$dF01I) (g$syntax-kind?$7695$dF01I g$x$8226$dF01I vector?))))
   (g$syntax-null?$7699$dF01I
     g$syntax-null?$11394$dF01I
     (case-lambda
       ((g$x$8227$dF01I) (g$syntax-kind?$7695$dF01I g$x$8227$dF01I null?))))
   (g$syntax-list?$7700$dF01I
     g$syntax-list?$11395$dF01I
     (case-lambda
       ((g$x$8228$dF01I)
        ((case-lambda
           ((g$t$8229$dF01I)
            (if g$t$8229$dF01I
              g$t$8229$dF01I
              (begin
                '#f
                (if (g$syntax-pair?$7697$dF01I g$x$8228$dF01I)
                  (begin
                    '#f
                    (g$syntax-list?$7700$dF01I
                      (g$syntax-cdr$7702$dF01I g$x$8228$dF01I)))
                  '#f)))))
         (g$syntax-null?$7699$dF01I g$x$8228$dF01I)))))
   (g$syntax-car$7701$dF01I
     g$syntax-car$11396$dF01I
     (case-lambda
       ((g$x$8230$dF01I)
        (if (g$stx?$7676$dF01I g$x$8230$dF01I)
          (g$mkstx$7692$dF01I
            (g$syntax-car$7701$dF01I (g$stx-expr$7678$dF01I g$x$8230$dF01I))
            (g$stx-mark*$7679$dF01I g$x$8230$dF01I)
            (g$stx-subst*$7680$dF01I g$x$8230$dF01I)
            (g$stx-ae*$7681$dF01I g$x$8230$dF01I))
          (if (annotation? g$x$8230$dF01I)
            (g$syntax-car$7701$dF01I (annotation-expression g$x$8230$dF01I))
            (if (pair? g$x$8230$dF01I)
              (car g$x$8230$dF01I)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$8230$dF01I)))))))
   (g$syntax-cdr$7702$dF01I
     g$syntax-cdr$11397$dF01I
     (case-lambda
       ((g$x$8231$dF01I)
        (if (g$stx?$7676$dF01I g$x$8231$dF01I)
          (g$mkstx$7692$dF01I
            (g$syntax-cdr$7702$dF01I (g$stx-expr$7678$dF01I g$x$8231$dF01I))
            (g$stx-mark*$7679$dF01I g$x$8231$dF01I)
            (g$stx-subst*$7680$dF01I g$x$8231$dF01I)
            (g$stx-ae*$7681$dF01I g$x$8231$dF01I))
          (if (annotation? g$x$8231$dF01I)
            (g$syntax-cdr$7702$dF01I (annotation-expression g$x$8231$dF01I))
            (if (pair? g$x$8231$dF01I)
              (cdr g$x$8231$dF01I)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$8231$dF01I)))))))
   (g$syntax->list$7703$dF01I
     g$syntax->list$11398$dF01I
     (case-lambda
       ((g$x$8232$dF01I)
        (if (g$syntax-pair?$7697$dF01I g$x$8232$dF01I)
          (cons
            (g$syntax-car$7701$dF01I g$x$8232$dF01I)
            (g$syntax->list$7703$dF01I
              (g$syntax-cdr$7702$dF01I g$x$8232$dF01I)))
          (if (g$syntax-null?$7699$dF01I g$x$8232$dF01I)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$8232$dF01I))))))
   (g$id?$7704$dF01I
     g$id?$11399$dF01I
     (case-lambda
       ((g$x$8233$dF01I)
        (if (g$stx?$7676$dF01I g$x$8233$dF01I)
          (begin
            '#f
            ((case-lambda
               ((g$expr$8234$dF01I)
                (symbol?
                  (if (annotation? g$expr$8234$dF01I)
                    (annotation-stripped g$expr$8234$dF01I)
                    g$expr$8234$dF01I))))
             (g$stx-expr$7678$dF01I g$x$8233$dF01I)))
          '#f))))
   (g$id->sym$7705$dF01I
     g$id->sym$11400$dF01I
     (case-lambda
       ((g$x$8235$dF01I)
        (begin
          (if (not (g$stx?$7676$dF01I g$x$8235$dF01I))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$8235$dF01I)
            (void))
          ((case-lambda
             ((g$expr$8236$dF01I)
              ((case-lambda
                 ((g$sym$8237$dF01I)
                  (if (symbol? g$sym$8237$dF01I)
                    g$sym$8237$dF01I
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$8235$dF01I))))
               (if (annotation? g$expr$8236$dF01I)
                 (annotation-stripped g$expr$8236$dF01I)
                 g$expr$8236$dF01I))))
           (g$stx-expr$7678$dF01I g$x$8235$dF01I))))))
   (g$same-marks?$7706$dF01I
     g$same-marks?$11401$dF01I
     (case-lambda
       ((g$x$8238$dF01I g$y$8239$dF01I)
        ((case-lambda
           ((g$t$8240$dF01I)
            (if g$t$8240$dF01I
              g$t$8240$dF01I
              (begin
                '#f
                (if (pair? g$x$8238$dF01I)
                  (if (pair? g$y$8239$dF01I)
                    (if (eq? (car g$x$8238$dF01I) (car g$y$8239$dF01I))
                      (begin
                        '#f
                        (g$same-marks?$7706$dF01I
                          (cdr g$x$8238$dF01I)
                          (cdr g$y$8239$dF01I)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$8238$dF01I) (begin '#f (null? g$y$8239$dF01I)) '#f)))))
   (g$bound-id=?$7707$dF01I
     g$bound-id=?$11402$dF01I
     (case-lambda
       ((g$x$8241$dF01I g$y$8242$dF01I)
        (if (eq? (g$id->sym$7705$dF01I g$x$8241$dF01I)
                 (g$id->sym$7705$dF01I g$y$8242$dF01I))
          (begin
            '#f
            (g$same-marks?$7706$dF01I
              (g$stx-mark*$7679$dF01I g$x$8241$dF01I)
              (g$stx-mark*$7679$dF01I g$y$8242$dF01I)))
          '#f))))
   (g$free-id=?$7708$dF01I
     g$free-id=?$11403$dF01I
     (case-lambda
       ((g$i$8243$dF01I g$j$8244$dF01I)
        ((case-lambda
           ((g$t0$8245$dF01I g$t1$8246$dF01I)
            (if ((case-lambda
                   ((g$t$8247$dF01I)
                    (if g$t$8247$dF01I
                      g$t$8247$dF01I
                      (begin '#f g$t1$8246$dF01I))))
                 g$t0$8245$dF01I)
              (eq? g$t0$8245$dF01I g$t1$8246$dF01I)
              (eq? (g$id->sym$7705$dF01I g$i$8243$dF01I)
                   (g$id->sym$7705$dF01I g$j$8244$dF01I)))))
         (g$id->real-label$7718$dF01I g$i$8243$dF01I)
         (g$id->real-label$7718$dF01I g$j$8244$dF01I)))))
   (g$valid-bound-ids?$7709$dF01I
     g$valid-bound-ids?$11404$dF01I
     (case-lambda
       ((g$id*$8248$dF01I)
        (if (g$for-all$5061$dF01I g$id?$7704$dF01I g$id*$8248$dF01I)
          (begin '#f (g$distinct-bound-ids?$7710$dF01I g$id*$8248$dF01I))
          '#f))))
   (g$distinct-bound-ids?$7710$dF01I
     g$distinct-bound-ids?$11405$dF01I
     (case-lambda
       ((g$id*$8249$dF01I)
        ((case-lambda
           ((g$t$8250$dF01I)
            (if g$t$8250$dF01I
              g$t$8250$dF01I
              (begin
                '#f
                (if (not (g$bound-id-member?$7711$dF01I
                           (car g$id*$8249$dF01I)
                           (cdr g$id*$8249$dF01I)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7710$dF01I (cdr g$id*$8249$dF01I)))
                  '#f)))))
         (null? g$id*$8249$dF01I)))))
   (g$bound-id-member?$7711$dF01I
     g$bound-id-member?$11406$dF01I
     (case-lambda
       ((g$id$8251$dF01I g$id*$8252$dF01I)
        (if (pair? g$id*$8252$dF01I)
          (begin
            '#f
            ((case-lambda
               ((g$t$8253$dF01I)
                (if g$t$8253$dF01I
                  g$t$8253$dF01I
                  (begin
                    '#f
                    (g$bound-id-member?$7711$dF01I
                      g$id$8251$dF01I
                      (cdr g$id*$8252$dF01I))))))
             (g$bound-id=?$7707$dF01I g$id$8251$dF01I (car g$id*$8252$dF01I))))
          '#f))))
   (g$self-evaluating?$7712$dF01I
     g$self-evaluating?$11407$dF01I
     (case-lambda
       ((g$x$8254$dF01I)
        ((case-lambda
           ((g$t$8255$dF01I)
            (if g$t$8255$dF01I
              g$t$8255$dF01I
              ((case-lambda
                 ((g$t$8256$dF01I)
                  (if g$t$8256$dF01I
                    g$t$8256$dF01I
                    ((case-lambda
                       ((g$t$8257$dF01I)
                        (if g$t$8257$dF01I
                          g$t$8257$dF01I
                          ((case-lambda
                             ((g$t$8258$dF01I)
                              (if g$t$8258$dF01I
                                g$t$8258$dF01I
                                (begin '#f (bytevector? g$x$8254$dF01I)))))
                           (boolean? g$x$8254$dF01I)))))
                     (char? g$x$8254$dF01I)))))
               (string? g$x$8254$dF01I)))))
         (number? g$x$8254$dF01I)))))
   (g$strip-annotations$7713$dF01I
     g$strip-annotations$11408$dF01I
     (case-lambda
       ((g$x$8259$dF01I)
        (if (pair? g$x$8259$dF01I)
          (cons
            (g$strip-annotations$7713$dF01I (car g$x$8259$dF01I))
            (g$strip-annotations$7713$dF01I (cdr g$x$8259$dF01I)))
          (if (vector? g$x$8259$dF01I)
            (vector-map g$strip-annotations$7713$dF01I g$x$8259$dF01I)
            (if (annotation? g$x$8259$dF01I)
              (annotation-stripped g$x$8259$dF01I)
              g$x$8259$dF01I))))))
   (g$strip$7714$dF01I
     g$strip$11409$dF01I
     (case-lambda
       ((g$x$8260$dF01I g$m*$8261$dF01I)
        (if (g$top-marked?$7642$dF01I g$m*$8261$dF01I)
          (if ((case-lambda
                 ((g$t$8262$dF01I)
                  (if g$t$8262$dF01I
                    g$t$8262$dF01I
                    ((case-lambda
                       ((g$t$8263$dF01I)
                        (if g$t$8263$dF01I
                          g$t$8263$dF01I
                          (begin
                            '#f
                            (if (vector? g$x$8260$dF01I)
                              (if (> (vector-length g$x$8260$dF01I) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$8260$dF01I '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$8260$dF01I)
                       (begin '#f (annotation? (car g$x$8260$dF01I)))
                       '#f)))))
               (annotation? g$x$8260$dF01I))
            (g$strip-annotations$7713$dF01I g$x$8260$dF01I)
            g$x$8260$dF01I)
          ((letrec ((g$f$8264$dF01I
                      (case-lambda
                        ((g$x$8265$dF01I)
                         (if (g$stx?$7676$dF01I g$x$8265$dF01I)
                           (g$strip$7714$dF01I
                             (g$stx-expr$7678$dF01I g$x$8265$dF01I)
                             (g$stx-mark*$7679$dF01I g$x$8265$dF01I))
                           (if (annotation? g$x$8265$dF01I)
                             (annotation-stripped g$x$8265$dF01I)
                             (if (pair? g$x$8265$dF01I)
                               ((case-lambda
                                  ((g$a$8266$dF01I g$d$8267$dF01I)
                                   (if (if (eq? g$a$8266$dF01I
                                                (car g$x$8265$dF01I))
                                         (begin
                                           '#f
                                           (eq? g$d$8267$dF01I
                                                (cdr g$x$8265$dF01I)))
                                         '#f)
                                     g$x$8265$dF01I
                                     (cons g$a$8266$dF01I g$d$8267$dF01I))))
                                (g$f$8264$dF01I (car g$x$8265$dF01I))
                                (g$f$8264$dF01I (cdr g$x$8265$dF01I)))
                               (if (vector? g$x$8265$dF01I)
                                 ((case-lambda
                                    ((g$old$8268$dF01I)
                                     ((case-lambda
                                        ((g$new$8269$dF01I)
                                         (if (g$for-all$5061$dF01I
                                               eq?
                                               g$old$8268$dF01I
                                               g$new$8269$dF01I)
                                           g$x$8265$dF01I
                                           (list->vector g$new$8269$dF01I))))
                                      (g$map$5063$dF01I
                                        g$f$8264$dF01I
                                        g$old$8268$dF01I))))
                                  (vector->list g$x$8265$dF01I))
                                 g$x$8265$dF01I))))))))
             g$f$8264$dF01I)
           g$x$8260$dF01I)))))
   (g$stx->datum$7715$dF01I
     g$stx->datum$11410$dF01I
     (case-lambda
       ((g$x$8270$dF01I) (g$strip$7714$dF01I g$x$8270$dF01I '()))))
   (g$same-marks*?$7716$dF01I
     g$same-marks*?$11411$dF01I
     (case-lambda
       ((g$mark*$8271$dF01I g$mark**$8272$dF01I g$si$8273$dF01I)
        (if (null? g$si$8273$dF01I)
          '#f
          (if (g$same-marks?$7706$dF01I
                g$mark*$8271$dF01I
                (vector-ref g$mark**$8272$dF01I (car g$si$8273$dF01I)))
            (car g$si$8273$dF01I)
            (g$same-marks*?$7716$dF01I
              g$mark*$8271$dF01I
              g$mark**$8272$dF01I
              (cdr g$si$8273$dF01I)))))))
   (g$id->label$7717$dF01I
     g$id->label$11412$dF01I
     (case-lambda
       ((g$id$8274$dF01I)
        ((case-lambda
           ((g$t$8275$dF01I)
            (if g$t$8275$dF01I
              g$t$8275$dF01I
              (begin
                '#f
                ((case-lambda
                   ((g$t$8276$dF01I)
                    (if g$t$8276$dF01I
                      ((case-lambda
                         ((g$env$8277$dF01I)
                          ((case-lambda
                             ((g$rib$8278$dF01I)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7647$dF01I
                                     g$id$8274$dF01I
                                     g$rib$8278$dF01I
                                     '#f)))
                                (case-lambda
                                  ((g$lab$8281$dF01I g$_loc$8282$dF01I)
                                   ((case-lambda
                                      ((g$_loc$8283$dF01I g$lab$8284$dF01I)
                                       (begin
                                         (g$extend-rib!$7667$dF01I
                                           g$rib$8278$dF01I
                                           g$id$8274$dF01I
                                           g$lab$8284$dF01I
                                           '#t)
                                         g$lab$8284$dF01I)))
                                    g$_loc$8282$dF01I
                                    g$lab$8281$dF01I))))))
                           (g$interaction-env-rib$8060$dF01I
                             g$env$8277$dF01I))))
                       g$t$8276$dF01I)
                      '#f)))
                 (g$top-level-context$8102$dF01I))))))
         (g$id->real-label$7718$dF01I g$id$8274$dF01I)))))
   (g$id->real-label$7718$dF01I
     g$id->real-label$11413$dF01I
     (case-lambda
       ((g$id$8285$dF01I)
        ((case-lambda
           ((g$sym$8286$dF01I)
            ((letrec ((g$search$8287$dF01I
                        (case-lambda
                          ((g$subst*$8288$dF01I g$mark*$8289$dF01I)
                           (if (null? g$subst*$8288$dF01I)
                             '#f
                             (if (eq? (car g$subst*$8288$dF01I) 'shift)
                               (g$search$8287$dF01I
                                 (cdr g$subst*$8288$dF01I)
                                 (cdr g$mark*$8289$dF01I))
                               ((case-lambda
                                  ((g$rib$8290$dF01I)
                                   ((case-lambda
                                      ((g$t$8291$dF01I)
                                       (if g$t$8291$dF01I
                                         ((case-lambda
                                            ((g$ht$8292$dF01I)
                                             ((case-lambda
                                                ((g$si$8293$dF01I)
                                                 ((case-lambda
                                                    ((g$i$8294$dF01I)
                                                     (if g$i$8294$dF01I
                                                       (vector-ref
                                                         (g$rib-label*$7656$dF01I
                                                           g$rib$8290$dF01I)
                                                         g$i$8294$dF01I)
                                                       (g$search$8287$dF01I
                                                         (cdr g$subst*$8288$dF01I)
                                                         g$mark*$8289$dF01I))))
                                                  (if g$si$8293$dF01I
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7716$dF01I
                                                        g$mark*$8289$dF01I
                                                        (g$rib-mark**$7655$dF01I
                                                          g$rib$8290$dF01I)
                                                        (reverse
                                                          g$si$8293$dF01I)))
                                                    '#f))))
                                              (g$hashtable-ref$5541$dF01I
                                                g$ht$8292$dF01I
                                                g$sym$8286$dF01I
                                                '#f))))
                                          g$t$8291$dF01I)
                                         ((case-lambda
                                            ((g$t$8295$dF01I)
                                             (if g$t$8295$dF01I
                                               g$t$8295$dF01I
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$8296$dF01I
                                                             (case-lambda
                                                               ((g$sym*$8297$dF01I
                                                                  g$mark**$8298$dF01I
                                                                  g$label*$8299$dF01I)
                                                                (if (null?
                                                                      g$sym*$8297$dF01I)
                                                                  (g$search$8287$dF01I
                                                                    (cdr g$subst*$8288$dF01I)
                                                                    g$mark*$8289$dF01I)
                                                                  (if (if (eq? (car g$sym*$8297$dF01I)
                                                                               g$sym$8286$dF01I)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7706$dF01I
                                                                            (car g$mark**$8298$dF01I)
                                                                            g$mark*$8289$dF01I))
                                                                        '#f)
                                                                    (car g$label*$8299$dF01I)
                                                                    (g$f$8296$dF01I
                                                                      (cdr g$sym*$8297$dF01I)
                                                                      (cdr g$mark**$8298$dF01I)
                                                                      (cdr g$label*$8299$dF01I))))))))
                                                    g$f$8296$dF01I)
                                                  (g$rib-sym*$7654$dF01I
                                                    g$rib$8290$dF01I)
                                                  (g$rib-mark**$7655$dF01I
                                                    g$rib$8290$dF01I)
                                                  (g$rib-label*$7656$dF01I
                                                    g$rib$8290$dF01I))))))
                                          (g$find-label$7666$dF01I
                                            g$rib$8290$dF01I
                                            g$sym$8286$dF01I
                                            g$mark*$8289$dF01I)))))
                                    (g$rib-sealed/freq$7657$dF01I
                                      g$rib$8290$dF01I))))
                                (car g$subst*$8288$dF01I))))))))
               g$search$8287$dF01I)
             (g$stx-subst*$7680$dF01I g$id$8285$dF01I)
             (g$stx-mark*$7679$dF01I g$id$8285$dF01I))))
         (g$id->sym$7705$dF01I g$id$8285$dF01I)))))
   (g$label->binding$7719$dF01I
     g$label->binding$11414$dF01I
     (case-lambda
       ((g$x$8300$dF01I g$r$8301$dF01I)
        ((case-lambda
           ((g$t$8302$dF01I)
            (if g$t$8302$dF01I
              ((case-lambda
                 ((g$b$8303$dF01I)
                  (if (if (pair? g$b$8303$dF01I)
                        (begin '#f (eq? (car g$b$8303$dF01I) '$core-rtd))
                        '#f)
                    (cons
                      '$rtd
                      (g$map$5063$dF01I
                        g$bless$7945$dF01I
                        (cdr g$b$8303$dF01I)))
                    (if (if (pair? g$b$8303$dF01I)
                          (begin '#f (eq? (car g$b$8303$dF01I) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$8304$dF01I g$loc$8305$dF01I)
                          (cons '$rtd (symbol-value g$loc$8305$dF01I))))
                       (g$cadr$5264$dF01I g$b$8303$dF01I)
                       (g$cddr$5266$dF01I g$b$8303$dF01I))
                      g$b$8303$dF01I))))
               g$t$8302$dF01I)
              ((case-lambda
                 ((g$t$8306$dF01I)
                  (if g$t$8306$dF01I
                    (cdr g$t$8306$dF01I)
                    ((case-lambda
                       ((g$t$8307$dF01I)
                        (if g$t$8307$dF01I
                          ((case-lambda
                             ((g$env$8308$dF01I)
                              ((case-lambda
                                 ((g$t$8309$dF01I)
                                  (if g$t$8309$dF01I
                                    ((case-lambda
                                       ((g$p$8310$dF01I)
                                        (g$cons*$5065$dF01I
                                          'lexical
                                          (cdr g$p$8310$dF01I)
                                          '#f)))
                                     g$t$8309$dF01I)
                                    '(displaced-lexical . #f))))
                               (g$assq$5051$dF01I
                                 g$x$8300$dF01I
                                 (g$interaction-env-locs$8062$dF01I
                                   g$env$8308$dF01I)))))
                           g$t$8307$dF01I)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$8102$dF01I)))))
               (g$assq$5051$dF01I g$x$8300$dF01I g$r$8301$dF01I)))))
         (g$imported-label->binding$7513$dF01I g$x$8300$dF01I)))))
   (g$make-binding$7720$dF01I g$make-binding$11415$dF01I cons)
   (g$binding-type$7721$dF01I g$binding-type$11416$dF01I car)
   (g$binding-value$7722$dF01I g$binding-value$11417$dF01I cdr)
   (g$raise-unbound-error$7723$dF01I
     g$raise-unbound-error$11418$dF01I
     (case-lambda
       ((g$id$8311$dF01I)
        (g$syntax-violation*$8093$dF01I
          '#f
          '"unbound identifier"
          g$id$8311$dF01I
          (g$make-undefined-violation$5887$dF01I)))))
   (g$syntax-type$7724$dF01I
     g$syntax-type$11419$dF01I
     (case-lambda
       ((g$e$8312$dF01I g$r$8313$dF01I)
        (if (g$id?$7704$dF01I g$e$8312$dF01I)
          ((case-lambda
             ((g$id$8314$dF01I)
              ((case-lambda
                 ((g$label$8315$dF01I)
                  ((case-lambda
                     ((g$b$8316$dF01I)
                      ((case-lambda
                         ((g$type$8317$dF01I)
                          (begin
                            (if (not g$label$8315$dF01I)
                              (g$raise-unbound-error$7723$dF01I g$id$8314$dF01I)
                              (void))
                            ((case-lambda
                               ((g$t$8318$dF01I)
                                (if (g$memv$5056$dF01I
                                      g$t$8318$dF01I
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable))
                                  (values
                                    g$type$8317$dF01I
                                    (g$binding-value$7722$dF01I g$b$8316$dF01I)
                                    g$id$8314$dF01I)
                                  (values 'other '#f '#f))))
                             g$type$8317$dF01I))))
                       (g$binding-type$7721$dF01I g$b$8316$dF01I))))
                   (g$label->binding$7719$dF01I
                     g$label$8315$dF01I
                     g$r$8313$dF01I))))
               (g$id->label$7717$dF01I g$id$8314$dF01I))))
           g$e$8312$dF01I)
          (if (g$syntax-pair?$7697$dF01I g$e$8312$dF01I)
            ((case-lambda
               ((g$id$8319$dF01I)
                (if (g$id?$7704$dF01I g$id$8319$dF01I)
                  ((case-lambda
                     ((g$label$8320$dF01I)
                      ((case-lambda
                         ((g$b$8321$dF01I)
                          ((case-lambda
                             ((g$type$8322$dF01I)
                              (begin
                                (if (not g$label$8320$dF01I)
                                  (g$raise-unbound-error$7723$dF01I
                                    g$id$8319$dF01I)
                                  (void))
                                ((case-lambda
                                   ((g$t$8323$dF01I)
                                    (if (g$memv$5056$dF01I
                                          g$t$8323$dF01I
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd))
                                      (values
                                        g$type$8322$dF01I
                                        (g$binding-value$7722$dF01I
                                          g$b$8321$dF01I)
                                        g$id$8319$dF01I)
                                      (values 'call '#f '#f))))
                                 g$type$8322$dF01I))))
                           (g$binding-type$7721$dF01I g$b$8321$dF01I))))
                       (g$label->binding$7719$dF01I
                         g$label$8320$dF01I
                         g$r$8313$dF01I))))
                   (g$id->label$7717$dF01I g$id$8319$dF01I))
                  (values 'call '#f '#f))))
             (g$syntax-car$7701$dF01I g$e$8312$dF01I))
            ((case-lambda
               ((g$d$8324$dF01I)
                (if (g$self-evaluating?$7712$dF01I g$d$8324$dF01I)
                  (values 'constant g$d$8324$dF01I '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7715$dF01I g$e$8312$dF01I)))))))
   (g$sanitize-binding$7732$dF01I
     g$sanitize-binding$11420$dF01I
     (case-lambda
       ((g$x$8325$dF01I g$src$8326$dF01I)
        (if (procedure? g$x$8325$dF01I)
          (g$cons*$5065$dF01I 'local-macro g$x$8325$dF01I g$src$8326$dF01I)
          (if (if (pair? g$x$8325$dF01I)
                (if (eq? (car g$x$8325$dF01I) 'macro!)
                  (begin '#f (procedure? (cdr g$x$8325$dF01I)))
                  '#f)
                '#f)
            (g$cons*$5065$dF01I
              'local-macro!
              (cdr g$x$8325$dF01I)
              g$src$8326$dF01I)
            (if (if (pair? g$x$8325$dF01I)
                  (begin '#f (eq? (car g$x$8325$dF01I) '$rtd))
                  '#f)
              g$x$8325$dF01I
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$8325$dF01I)))))))
   (g$make-variable-transformer$7733$dF01I
     g$make-variable-transformer$11421$dF01I
     (case-lambda
       ((g$x$8327$dF01I)
        (if (procedure? g$x$8327$dF01I)
          (cons 'macro! g$x$8327$dF01I)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$8327$dF01I)))))
   (g$variable-transformer?$7734$dF01I
     g$variable-transformer?$11422$dF01I
     (case-lambda
       ((g$x$8328$dF01I)
        (if (pair? g$x$8328$dF01I)
          (if (eq? (car g$x$8328$dF01I) 'macro!)
            (begin '#f (procedure? (cdr g$x$8328$dF01I)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7735$dF01I
     g$variable-transformer-procedure$11423$dF01I
     (case-lambda
       ((g$x$8329$dF01I)
        (if (g$variable-transformer?$7734$dF01I g$x$8329$dF01I)
          (cdr g$x$8329$dF01I)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$8329$dF01I)))))
   (g$make-eval-transformer$7736$dF01I
     g$make-eval-transformer$11424$dF01I
     (case-lambda
       ((g$x$8330$dF01I)
        (g$sanitize-binding$7732$dF01I
          (eval-core (g$expanded->core$7222$dF01I g$x$8330$dF01I))
          g$x$8330$dF01I))))
   (g$parse-define$7922$dF01I
     g$parse-define$11425$dF01I
     (case-lambda
       ((g$x$8331$dF01I)
        ((case-lambda
           ((g$t$8332$dF01I)
            ((case-lambda
               ((g$ls/false$8333$dF01I)
                (if (if g$ls/false$8333$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8334$dF01I
                               g$fmls$8335$dF01I
                               g$b$8336$dF01I
                               g$b*$8337$dF01I)
                             (g$id?$7704$dF01I g$id$8334$dF01I)))
                          g$ls/false$8333$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8338$dF01I
                         g$fmls$8339$dF01I
                         g$b$8340$dF01I
                         g$b*$8341$dF01I)
                       (begin
                         (g$verify-formals$8002$dF01I
                           g$fmls$8339$dF01I
                           g$x$8331$dF01I)
                         (values
                           g$id$8338$dF01I
                           (cons
                             'defun
                             (cons
                               g$fmls$8339$dF01I
                               (cons g$b$8340$dF01I g$b*$8341$dF01I)))))))
                    g$ls/false$8333$dF01I)
                  ((case-lambda
                     ((g$t$8342$dF01I)
                      ((case-lambda
                         ((g$ls/false$8343$dF01I)
                          (if (if g$ls/false$8343$dF01I
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$8344$dF01I g$val$8345$dF01I)
                                       (g$id?$7704$dF01I g$id$8344$dF01I)))
                                    g$ls/false$8343$dF01I))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$8346$dF01I g$val$8347$dF01I)
                                 (values
                                   g$id$8346$dF01I
                                   (cons 'expr g$val$8347$dF01I))))
                              g$ls/false$8343$dF01I)
                            ((case-lambda
                               ((g$t$8348$dF01I)
                                ((case-lambda
                                   ((g$ls/false$8349$dF01I)
                                    (if (if g$ls/false$8349$dF01I
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$8350$dF01I)
                                                 (g$id?$7704$dF01I
                                                   g$id$8350$dF01I)))
                                              g$ls/false$8349$dF01I))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$8351$dF01I)
                                           (values
                                             g$id$8351$dF01I
                                             (cons
                                               'expr
                                               (g$bless$7945$dF01I '(void))))))
                                        g$ls/false$8349$dF01I)
                                      (g$syntax-violation$8094$dF01I
                                        '#f
                                        '"invalid syntax"
                                        g$t$8348$dF01I))))
                                 (g$syntax-dispatch$7982$dF01I
                                   g$t$8348$dF01I
                                   '(_ any)))))
                             g$t$8342$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$8342$dF01I
                         '(_ any any)))))
                   g$t$8332$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8332$dF01I
               '(_ (any . any) any . each-any)))))
         g$x$8331$dF01I))))
   (g$parse-define-syntax$7923$dF01I
     g$parse-define-syntax$11426$dF01I
     (case-lambda
       ((g$x$8352$dF01I)
        ((case-lambda
           ((g$t$8353$dF01I)
            ((case-lambda
               ((g$ls/false$8354$dF01I)
                (if (if g$ls/false$8354$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8355$dF01I g$val$8356$dF01I)
                             (g$id?$7704$dF01I g$id$8355$dF01I)))
                          g$ls/false$8354$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8357$dF01I g$val$8358$dF01I)
                       (values g$id$8357$dF01I g$val$8358$dF01I)))
                    g$ls/false$8354$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8353$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8353$dF01I '(_ any any)))))
         g$x$8352$dF01I))))
   (g$scheme-stx-hashtable$7924$dF01I
     g$scheme-stx-hashtable$11427$dF01I
     (g$make-eq-hashtable$5538$dF01I))
   (g$scheme-stx$7925$dF01I
     g$scheme-stx$11428$dF01I
     (case-lambda
       ((g$sym$8359$dF01I)
        ((case-lambda
           ((g$t$8360$dF01I)
            (if g$t$8360$dF01I
              g$t$8360$dF01I
              (begin
                '#f
                ((case-lambda
                   ((g$subst$8361$dF01I)
                    ((case-lambda
                       ((g$stx$8362$dF01I)
                        ((case-lambda
                           ((g$stx$8363$dF01I)
                            (begin
                              (g$hashtable-set!$5542$dF01I
                                g$scheme-stx-hashtable$7924$dF01I
                                g$sym$8359$dF01I
                                g$stx$8363$dF01I)
                              g$stx$8363$dF01I)))
                         ((case-lambda
                            ((g$t$8364$dF01I)
                             (if g$t$8364$dF01I
                               ((case-lambda
                                  ((g$x$8365$dF01I)
                                   ((case-lambda
                                      ((g$name$8366$dF01I g$label$8367$dF01I)
                                       (g$add-subst$7694$dF01I
                                         (g$make-rib$7653$dF01I
                                           (list g$name$8366$dF01I)
                                           (list g$top-mark*$7641$dF01I)
                                           (list g$label$8367$dF01I)
                                           '#f
                                           '#f)
                                         g$stx$8362$dF01I)))
                                    (car g$x$8365$dF01I)
                                    (cdr g$x$8365$dF01I))))
                                g$t$8364$dF01I)
                               g$stx$8362$dF01I)))
                          (g$assq$5051$dF01I
                            g$sym$8359$dF01I
                            g$subst$8361$dF01I)))))
                     (g$make-stx$7677$dF01I
                       g$sym$8359$dF01I
                       g$top-mark*$7641$dF01I
                       '()
                       '()))))
                 (g$library-subst$7471$dF01I
                   (g$find-library-by-name$7507$dF01I
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5541$dF01I
           g$scheme-stx-hashtable$7924$dF01I
           g$sym$8359$dF01I
           '#f)))))
   (g$lexical-var$7926$dF01I g$lexical-var$11429$dF01I car)
   (g$lexical-mutable?$7927$dF01I g$lexical-mutable?$11430$dF01I cdr)
   (g$set-lexical-mutable!$7928$dF01I
     g$set-lexical-mutable!$11431$dF01I
     set-cdr!)
   (g$add-lexical$7929$dF01I
     g$add-lexical$11432$dF01I
     (case-lambda
       ((g$lab$8368$dF01I g$lex$8369$dF01I g$r$8370$dF01I)
        (cons
          (g$cons*$5065$dF01I g$lab$8368$dF01I 'lexical g$lex$8369$dF01I '#f)
          g$r$8370$dF01I))))
   (g$add-lexicals$7930$dF01I
     g$add-lexicals$11433$dF01I
     (case-lambda
       ((g$lab*$8371$dF01I g$lex*$8372$dF01I g$r$8373$dF01I)
        (if (null? g$lab*$8371$dF01I)
          g$r$8373$dF01I
          (g$add-lexicals$7930$dF01I
            (cdr g$lab*$8371$dF01I)
            (cdr g$lex*$8372$dF01I)
            (g$add-lexical$7929$dF01I
              (car g$lab*$8371$dF01I)
              (car g$lex*$8372$dF01I)
              g$r$8373$dF01I))))))
   (g$letrec-helper$7931$dF01I
     g$letrec-helper$11434$dF01I
     (case-lambda
       ((g$e$8374$dF01I g$r$8375$dF01I g$mr$8376$dF01I g$build$8377$dF01I)
        ((case-lambda
           ((g$t$8378$dF01I)
            ((case-lambda
               ((g$ls/false$8379$dF01I)
                (if g$ls/false$8379$dF01I
                  (apply
                    (case-lambda
                      ((g$lhs*$8380$dF01I
                         g$rhs*$8381$dF01I
                         g$b$8382$dF01I
                         g$b*$8383$dF01I)
                       (if (not (g$valid-bound-ids?$7709$dF01I
                                  g$lhs*$8380$dF01I))
                         (g$invalid-fmls-error$7947$dF01I
                           g$e$8374$dF01I
                           g$lhs*$8380$dF01I)
                         ((case-lambda
                            ((g$lex*$8384$dF01I g$lab*$8385$dF01I)
                             ((case-lambda
                                ((g$rib$8386$dF01I g$r$8387$dF01I)
                                 ((case-lambda
                                    ((g$body$8388$dF01I g$rhs*$8389$dF01I)
                                     (g$build$8377$dF01I
                                       '#f
                                       g$lex*$8384$dF01I
                                       g$rhs*$8389$dF01I
                                       g$body$8388$dF01I)))
                                  (g$chi-internal$8011$dF01I
                                    (g$add-subst$7694$dF01I
                                      g$rib$8386$dF01I
                                      (cons g$b$8382$dF01I g$b*$8383$dF01I))
                                    g$r$8387$dF01I
                                    g$mr$8376$dF01I)
                                  (g$chi-expr*$7998$dF01I
                                    (g$map$5063$dF01I
                                      (case-lambda
                                        ((g$x$8390$dF01I)
                                         (g$add-subst$7694$dF01I
                                           g$rib$8386$dF01I
                                           g$x$8390$dF01I)))
                                      g$rhs*$8381$dF01I)
                                    g$r$8387$dF01I
                                    g$mr$8376$dF01I))))
                              (g$make-full-rib$7672$dF01I
                                g$lhs*$8380$dF01I
                                g$lab*$8385$dF01I)
                              (g$add-lexicals$7930$dF01I
                                g$lab*$8385$dF01I
                                g$lex*$8384$dF01I
                                g$r$8375$dF01I))))
                          (g$map$5063$dF01I
                            g$gen-lexical$7643$dF01I
                            g$lhs*$8380$dF01I)
                          (g$map$5063$dF01I
                            g$gen-label$7645$dF01I
                            g$lhs*$8380$dF01I)))))
                    g$ls/false$8379$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8378$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8378$dF01I
               '(_ #(each (any any)) any . each-any)))))
         g$e$8374$dF01I))))
   (g$letrec-transformer$7932$dF01I
     g$letrec-transformer$11435$dF01I
     (case-lambda
       ((g$e$8391$dF01I g$r$8392$dF01I g$mr$8393$dF01I)
        (g$letrec-helper$7931$dF01I
          g$e$8391$dF01I
          g$r$8392$dF01I
          g$mr$8393$dF01I
          g$build-letrec$7635$dF01I))))
   (g$letrec*-transformer$7933$dF01I
     g$letrec*-transformer$11436$dF01I
     (case-lambda
       ((g$e$8394$dF01I g$r$8395$dF01I g$mr$8396$dF01I)
        (g$letrec-helper$7931$dF01I
          g$e$8394$dF01I
          g$r$8395$dF01I
          g$mr$8396$dF01I
          g$build-letrec*$7636$dF01I))))
   (g$fluid-let-syntax-transformer$7934$dF01I
     g$fluid-let-syntax-transformer$11437$dF01I
     (case-lambda
       ((g$e$8397$dF01I g$r$8398$dF01I g$mr$8399$dF01I)
        (letrec* ((g$lookup$8400$dF01I
                    (case-lambda
                      ((g$x$8410$dF01I)
                       ((case-lambda
                          ((g$t$8411$dF01I)
                           (if g$t$8411$dF01I
                             g$t$8411$dF01I
                             (begin
                               '#f
                               (g$syntax-violation$8094$dF01I
                                 '#f
                                 '"unbound identifier"
                                 g$e$8397$dF01I
                                 g$x$8410$dF01I)))))
                        (g$id->label$7717$dF01I g$x$8410$dF01I))))))
          ((case-lambda
             ((g$t$8401$dF01I)
              ((case-lambda
                 ((g$ls/false$8402$dF01I)
                  (if g$ls/false$8402$dF01I
                    (apply
                      (case-lambda
                        ((g$lhs*$8403$dF01I
                           g$rhs*$8404$dF01I
                           g$b$8405$dF01I
                           g$b*$8406$dF01I)
                         (if (not (g$valid-bound-ids?$7709$dF01I
                                    g$lhs*$8403$dF01I))
                           (g$invalid-fmls-error$7947$dF01I
                             g$e$8397$dF01I
                             g$lhs*$8403$dF01I)
                           ((case-lambda
                              ((g$lab*$8407$dF01I g$rhs*$8408$dF01I)
                               (g$chi-internal$8011$dF01I
                                 (cons g$b$8405$dF01I g$b*$8406$dF01I)
                                 (append
                                   (g$map$5063$dF01I
                                     cons
                                     g$lab*$8407$dF01I
                                     g$rhs*$8408$dF01I)
                                   g$r$8398$dF01I)
                                 (append
                                   (g$map$5063$dF01I
                                     cons
                                     g$lab*$8407$dF01I
                                     g$rhs*$8408$dF01I)
                                   g$mr$8399$dF01I))))
                            (g$map$5063$dF01I
                              g$lookup$8400$dF01I
                              g$lhs*$8403$dF01I)
                            (g$map$5063$dF01I
                              (case-lambda
                                ((g$x$8409$dF01I)
                                 (g$make-eval-transformer$7736$dF01I
                                   (g$expand-transformer$8027$dF01I
                                     g$x$8409$dF01I
                                     g$mr$8399$dF01I))))
                              g$rhs*$8404$dF01I)))))
                      g$ls/false$8402$dF01I)
                    (g$syntax-violation$8094$dF01I
                      '#f
                      '"invalid syntax"
                      g$t$8401$dF01I))))
               (g$syntax-dispatch$7982$dF01I
                 g$t$8401$dF01I
                 '(_ #(each (any any)) any . each-any)))))
           g$e$8397$dF01I)))))
   (g$type-descriptor-transformer$7935$dF01I
     g$type-descriptor-transformer$11438$dF01I
     (case-lambda
       ((g$e$8412$dF01I g$r$8413$dF01I g$mr$8414$dF01I)
        ((case-lambda
           ((g$t$8415$dF01I)
            ((case-lambda
               ((g$ls/false$8416$dF01I)
                (if (if g$ls/false$8416$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8417$dF01I)
                             (g$id?$7704$dF01I g$id$8417$dF01I)))
                          g$ls/false$8416$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8418$dF01I)
                       ((case-lambda
                          ((g$lab$8419$dF01I)
                           ((case-lambda
                              ((g$b$8420$dF01I)
                               ((case-lambda
                                  ((g$type$8421$dF01I)
                                   (begin
                                     (if (not g$lab$8419$dF01I)
                                       (g$raise-unbound-error$7723$dF01I
                                         g$id$8418$dF01I)
                                       (void))
                                     (if (not (if (eq? g$type$8421$dF01I '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$7722$dF01I
                                                           g$b$8420$dF01I))))
                                                '#f))
                                       (g$syntax-violation$8094$dF01I
                                         '#f
                                         '"not a record type"
                                         g$e$8412$dF01I)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$7722$dF01I
                                         g$b$8420$dF01I)))))
                                (g$binding-type$7721$dF01I g$b$8420$dF01I))))
                            (g$label->binding$7719$dF01I
                              g$lab$8419$dF01I
                              g$r$8413$dF01I))))
                        (g$id->label$7717$dF01I g$id$8418$dF01I))))
                    g$ls/false$8416$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8415$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8415$dF01I '(_ any)))))
         g$e$8412$dF01I))))
   (g$record-type-descriptor-transformer$7936$dF01I
     g$record-type-descriptor-transformer$11439$dF01I
     (case-lambda
       ((g$e$8422$dF01I g$r$8423$dF01I g$mr$8424$dF01I)
        ((case-lambda
           ((g$t$8425$dF01I)
            ((case-lambda
               ((g$ls/false$8426$dF01I)
                (if (if g$ls/false$8426$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8427$dF01I)
                             (g$id?$7704$dF01I g$id$8427$dF01I)))
                          g$ls/false$8426$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8428$dF01I)
                       ((case-lambda
                          ((g$lab$8429$dF01I)
                           ((case-lambda
                              ((g$b$8430$dF01I)
                               ((case-lambda
                                  ((g$type$8431$dF01I)
                                   (begin
                                     (if (not g$lab$8429$dF01I)
                                       (g$raise-unbound-error$7723$dF01I
                                         g$id$8428$dF01I)
                                       (void))
                                     (if (not (if (eq? g$type$8431$dF01I '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7722$dF01I
                                                      g$b$8430$dF01I)))
                                                '#f))
                                       (g$syntax-violation$8094$dF01I
                                         '#f
                                         '"not a record type"
                                         g$e$8422$dF01I)
                                       (void))
                                     (g$chi-expr$8000$dF01I
                                       (car (g$binding-value$7722$dF01I
                                              g$b$8430$dF01I))
                                       g$r$8423$dF01I
                                       g$mr$8424$dF01I))))
                                (g$binding-type$7721$dF01I g$b$8430$dF01I))))
                            (g$label->binding$7719$dF01I
                              g$lab$8429$dF01I
                              g$r$8423$dF01I))))
                        (g$id->label$7717$dF01I g$id$8428$dF01I))))
                    g$ls/false$8426$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8425$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8425$dF01I '(_ any)))))
         g$e$8422$dF01I))))
   (g$record-constructor-descriptor-transformer$7937$dF01I
     g$record-constructor-descriptor-transformer$11440$dF01I
     (case-lambda
       ((g$e$8432$dF01I g$r$8433$dF01I g$mr$8434$dF01I)
        ((case-lambda
           ((g$t$8435$dF01I)
            ((case-lambda
               ((g$ls/false$8436$dF01I)
                (if (if g$ls/false$8436$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8437$dF01I)
                             (g$id?$7704$dF01I g$id$8437$dF01I)))
                          g$ls/false$8436$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8438$dF01I)
                       ((case-lambda
                          ((g$lab$8439$dF01I)
                           ((case-lambda
                              ((g$b$8440$dF01I)
                               ((case-lambda
                                  ((g$type$8441$dF01I)
                                   (begin
                                     (if (not g$lab$8439$dF01I)
                                       (g$raise-unbound-error$7723$dF01I
                                         g$id$8438$dF01I)
                                       (void))
                                     (if (not (if (eq? g$type$8441$dF01I '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7722$dF01I
                                                      g$b$8440$dF01I)))
                                                '#f))
                                       (g$syntax-violation$8094$dF01I
                                         '#f
                                         '"invalid type"
                                         g$e$8432$dF01I)
                                       (void))
                                     (g$chi-expr$8000$dF01I
                                       (g$cadr$5264$dF01I
                                         (g$binding-value$7722$dF01I
                                           g$b$8440$dF01I))
                                       g$r$8433$dF01I
                                       g$mr$8434$dF01I))))
                                (g$binding-type$7721$dF01I g$b$8440$dF01I))))
                            (g$label->binding$7719$dF01I
                              g$lab$8439$dF01I
                              g$r$8433$dF01I))))
                        (g$id->label$7717$dF01I g$id$8438$dF01I))))
                    g$ls/false$8436$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8435$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8435$dF01I '(_ any)))))
         g$e$8432$dF01I))))
   (g$when-macro$7938$dF01I
     g$when-macro$11441$dF01I
     (case-lambda
       ((g$e$8442$dF01I)
        ((case-lambda
           ((g$t$8443$dF01I)
            ((case-lambda
               ((g$ls/false$8444$dF01I)
                (if g$ls/false$8444$dF01I
                  (apply
                    (case-lambda
                      ((g$test$8445$dF01I g$e$8446$dF01I g$e*$8447$dF01I)
                       (g$bless$7945$dF01I
                         (list
                           'if
                           g$test$8445$dF01I
                           (cons
                             'begin
                             (cons g$e$8446$dF01I g$e*$8447$dF01I))))))
                    g$ls/false$8444$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8443$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8443$dF01I
               '(_ any any . each-any)))))
         g$e$8442$dF01I))))
   (g$unless-macro$7939$dF01I
     g$unless-macro$11442$dF01I
     (case-lambda
       ((g$e$8448$dF01I)
        ((case-lambda
           ((g$t$8449$dF01I)
            ((case-lambda
               ((g$ls/false$8450$dF01I)
                (if g$ls/false$8450$dF01I
                  (apply
                    (case-lambda
                      ((g$test$8451$dF01I g$e$8452$dF01I g$e*$8453$dF01I)
                       (g$bless$7945$dF01I
                         (list
                           'if
                           (list 'not g$test$8451$dF01I)
                           (cons
                             'begin
                             (cons g$e$8452$dF01I g$e*$8453$dF01I))))))
                    g$ls/false$8450$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8449$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8449$dF01I
               '(_ any any . each-any)))))
         g$e$8448$dF01I))))
   (g$if-transformer$7940$dF01I
     g$if-transformer$11443$dF01I
     (case-lambda
       ((g$e$8454$dF01I g$r$8455$dF01I g$mr$8456$dF01I)
        ((case-lambda
           ((g$t$8457$dF01I)
            ((case-lambda
               ((g$ls/false$8458$dF01I)
                (if g$ls/false$8458$dF01I
                  (apply
                    (case-lambda
                      ((g$e0$8459$dF01I g$e1$8460$dF01I g$e2$8461$dF01I)
                       (list
                         'if
                         (g$chi-expr$8000$dF01I
                           g$e0$8459$dF01I
                           g$r$8455$dF01I
                           g$mr$8456$dF01I)
                         (g$chi-expr$8000$dF01I
                           g$e1$8460$dF01I
                           g$r$8455$dF01I
                           g$mr$8456$dF01I)
                         (g$chi-expr$8000$dF01I
                           g$e2$8461$dF01I
                           g$r$8455$dF01I
                           g$mr$8456$dF01I))))
                    g$ls/false$8458$dF01I)
                  ((case-lambda
                     ((g$t$8462$dF01I)
                      ((case-lambda
                         ((g$ls/false$8463$dF01I)
                          (if g$ls/false$8463$dF01I
                            (apply
                              (case-lambda
                                ((g$e0$8464$dF01I g$e1$8465$dF01I)
                                 (list
                                   'if
                                   (g$chi-expr$8000$dF01I
                                     g$e0$8464$dF01I
                                     g$r$8455$dF01I
                                     g$mr$8456$dF01I)
                                   (g$chi-expr$8000$dF01I
                                     g$e1$8465$dF01I
                                     g$r$8455$dF01I
                                     g$mr$8456$dF01I)
                                   (g$build-void$7634$dF01I))))
                              g$ls/false$8463$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$8462$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$8462$dF01I
                         '(_ any any)))))
                   g$t$8457$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8457$dF01I '(_ any any any)))))
         g$e$8454$dF01I))))
   (g$case-macro$7941$dF01I
     g$case-macro$11444$dF01I
     (case-lambda
       ((g$e$8466$dF01I)
        (letrec* ((g$build-last$8467$dF01I
                    (case-lambda
                      ((g$cls$8487$dF01I)
                       ((case-lambda
                          ((g$t$8488$dF01I)
                           ((case-lambda
                              ((g$ls/false$8489$dF01I)
                               (if g$ls/false$8489$dF01I
                                 (apply
                                   (case-lambda
                                     ((g$e$8490$dF01I g$e*$8491$dF01I)
                                      (cons
                                        'begin
                                        (cons g$e$8490$dF01I g$e*$8491$dF01I))))
                                   g$ls/false$8489$dF01I)
                                 ((case-lambda
                                    ((g$t$8492$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$8493$dF01I)
                                         (if g$ls/false$8493$dF01I
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8468$dF01I
                                                  g$cls$8487$dF01I
                                                  '(if #f #f))))
                                             g$ls/false$8493$dF01I)
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$t$8492$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$8492$dF01I
                                        '_))))
                                  g$t$8488$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$8488$dF01I
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8487$dF01I))))
                  (g$build-one$8468$dF01I
                    (case-lambda
                      ((g$cls$8480$dF01I g$k$8481$dF01I)
                       ((case-lambda
                          ((g$t$8482$dF01I)
                           ((case-lambda
                              ((g$ls/false$8483$dF01I)
                               (if g$ls/false$8483$dF01I
                                 (apply
                                   (case-lambda
                                     ((g$d*$8484$dF01I
                                        g$e$8485$dF01I
                                        g$e*$8486$dF01I)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8484$dF01I))
                                        (cons
                                          'begin
                                          (cons g$e$8485$dF01I g$e*$8486$dF01I))
                                        g$k$8481$dF01I)))
                                   g$ls/false$8483$dF01I)
                                 (g$syntax-violation$8094$dF01I
                                   '#f
                                   '"invalid syntax"
                                   g$t$8482$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$8482$dF01I
                              '(each-any any . each-any)))))
                        g$cls$8480$dF01I)))))
          ((case-lambda
             ((g$t$8469$dF01I)
              ((case-lambda
                 ((g$ls/false$8470$dF01I)
                  (if g$ls/false$8470$dF01I
                    (apply
                      (case-lambda
                        ((g$expr$8471$dF01I)
                         (g$bless$7945$dF01I
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8471$dF01I))
                               '((if #f #f)))))))
                      g$ls/false$8470$dF01I)
                    ((case-lambda
                       ((g$t$8472$dF01I)
                        ((case-lambda
                           ((g$ls/false$8473$dF01I)
                            (if g$ls/false$8473$dF01I
                              (apply
                                (case-lambda
                                  ((g$expr$8474$dF01I
                                     g$cls$8475$dF01I
                                     g$cls*$8476$dF01I)
                                   (g$bless$7945$dF01I
                                     (list
                                       'let
                                       (list (list 't g$expr$8474$dF01I))
                                       ((letrec ((g$f$8477$dF01I
                                                   (case-lambda
                                                     ((g$cls$8478$dF01I
                                                        g$cls*$8479$dF01I)
                                                      (if (null?
                                                            g$cls*$8479$dF01I)
                                                        (g$build-last$8467$dF01I
                                                          g$cls$8478$dF01I)
                                                        (g$build-one$8468$dF01I
                                                          g$cls$8478$dF01I
                                                          (g$f$8477$dF01I
                                                            (car g$cls*$8479$dF01I)
                                                            (cdr g$cls*$8479$dF01I))))))))
                                          g$f$8477$dF01I)
                                        g$cls$8475$dF01I
                                        g$cls*$8476$dF01I)))))
                                g$ls/false$8473$dF01I)
                              (g$syntax-violation$8094$dF01I
                                '#f
                                '"invalid syntax"
                                g$t$8472$dF01I))))
                         (g$syntax-dispatch$7982$dF01I
                           g$t$8472$dF01I
                           '(_ any any . each-any)))))
                     g$t$8469$dF01I))))
               (g$syntax-dispatch$7982$dF01I g$t$8469$dF01I '(_ any)))))
           g$e$8466$dF01I)))))
   (g$quote-transformer$7942$dF01I
     g$quote-transformer$11445$dF01I
     (case-lambda
       ((g$e$8494$dF01I g$r$8495$dF01I g$mr$8496$dF01I)
        ((case-lambda
           ((g$t$8497$dF01I)
            ((case-lambda
               ((g$ls/false$8498$dF01I)
                (if g$ls/false$8498$dF01I
                  (apply
                    (case-lambda
                      ((g$datum$8499$dF01I)
                       (list
                         'quote
                         (g$stx->datum$7715$dF01I g$datum$8499$dF01I))))
                    g$ls/false$8498$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8497$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8497$dF01I '(_ any)))))
         g$e$8494$dF01I))))
   (g$case-lambda-transformer$7943$dF01I
     g$case-lambda-transformer$11446$dF01I
     (case-lambda
       ((g$e$8500$dF01I g$r$8501$dF01I g$mr$8502$dF01I)
        ((case-lambda
           ((g$t$8503$dF01I)
            ((case-lambda
               ((g$ls/false$8504$dF01I)
                (if g$ls/false$8504$dF01I
                  (apply
                    (case-lambda
                      ((g$fmls*$8505$dF01I g$b*$8506$dF01I g$b**$8507$dF01I)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$8004$dF01I
                              g$e$8500$dF01I
                              g$fmls*$8505$dF01I
                              (g$map$5063$dF01I
                                cons
                                g$b*$8506$dF01I
                                g$b**$8507$dF01I)
                              g$r$8501$dF01I
                              g$mr$8502$dF01I)))
                         (case-lambda
                           ((g$fmls*$8510$dF01I g$body*$8511$dF01I)
                            ((case-lambda
                               ((g$body*$8512$dF01I g$fmls*$8513$dF01I)
                                (g$build-case-lambda$7631$dF01I
                                  '#f
                                  g$fmls*$8513$dF01I
                                  g$body*$8512$dF01I)))
                             g$body*$8511$dF01I
                             g$fmls*$8510$dF01I))))))
                    g$ls/false$8504$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8503$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8503$dF01I
               '(_ . #(each (any any . each-any)))))))
         g$e$8500$dF01I))))
   (g$lambda-transformer$7944$dF01I
     g$lambda-transformer$11447$dF01I
     (case-lambda
       ((g$e$8514$dF01I g$r$8515$dF01I g$mr$8516$dF01I)
        ((case-lambda
           ((g$t$8517$dF01I)
            ((case-lambda
               ((g$ls/false$8518$dF01I)
                (if g$ls/false$8518$dF01I
                  (apply
                    (case-lambda
                      ((g$fmls$8519$dF01I g$b$8520$dF01I g$b*$8521$dF01I)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$8003$dF01I
                              g$e$8514$dF01I
                              g$fmls$8519$dF01I
                              (cons g$b$8520$dF01I g$b*$8521$dF01I)
                              g$r$8515$dF01I
                              g$mr$8516$dF01I)))
                         (case-lambda
                           ((g$fmls$8524$dF01I g$body$8525$dF01I)
                            ((case-lambda
                               ((g$body$8526$dF01I g$fmls$8527$dF01I)
                                (g$build-lambda$7630$dF01I
                                  '#f
                                  g$fmls$8527$dF01I
                                  g$body$8526$dF01I)))
                             g$body$8525$dF01I
                             g$fmls$8524$dF01I))))))
                    g$ls/false$8518$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8517$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8517$dF01I
               '(_ any any . each-any)))))
         g$e$8514$dF01I))))
   (g$bless$7945$dF01I
     g$bless$11448$dF01I
     (case-lambda
       ((g$x$8528$dF01I)
        (g$mkstx$7692$dF01I
          ((letrec ((g$f$8529$dF01I
                      (case-lambda
                        ((g$x$8530$dF01I)
                         (if (g$stx?$7676$dF01I g$x$8530$dF01I)
                           g$x$8530$dF01I
                           (if (pair? g$x$8530$dF01I)
                             (cons
                               (g$f$8529$dF01I (car g$x$8530$dF01I))
                               (g$f$8529$dF01I (cdr g$x$8530$dF01I)))
                             (if (symbol? g$x$8530$dF01I)
                               (g$scheme-stx$7925$dF01I g$x$8530$dF01I)
                               (if (vector? g$x$8530$dF01I)
                                 (vector-map g$f$8529$dF01I g$x$8530$dF01I)
                                 g$x$8530$dF01I))))))))
             g$f$8529$dF01I)
           g$x$8528$dF01I)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7946$dF01I
     g$with-syntax-macro$11449$dF01I
     (case-lambda
       ((g$e$8531$dF01I)
        ((case-lambda
           ((g$t$8532$dF01I)
            ((case-lambda
               ((g$ls/false$8533$dF01I)
                (if g$ls/false$8533$dF01I
                  (apply
                    (case-lambda
                      ((g$pat*$8534$dF01I
                         g$expr*$8535$dF01I
                         g$b$8536$dF01I
                         g$b*$8537$dF01I)
                       ((case-lambda
                          ((g$idn*$8538$dF01I)
                           (begin
                             (g$verify-formals$8002$dF01I
                               (g$map$5063$dF01I car g$idn*$8538$dF01I)
                               g$e$8531$dF01I)
                             ((case-lambda
                                ((g$t*$8539$dF01I)
                                 (g$bless$7945$dF01I
                                   (list
                                     'let
                                     (g$map$5063$dF01I
                                       list
                                       g$t*$8539$dF01I
                                       g$expr*$8535$dF01I)
                                     ((letrec ((g$f$8540$dF01I
                                                 (case-lambda
                                                   ((g$pat*$8541$dF01I
                                                      g$t*$8542$dF01I)
                                                    (if (null?
                                                          g$pat*$8541$dF01I)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8536$dF01I
                                                            g$b*$8537$dF01I)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8542$dF01I)
                                                        '()
                                                        (list
                                                          (car g$pat*$8541$dF01I)
                                                          (g$f$8540$dF01I
                                                            (cdr g$pat*$8541$dF01I)
                                                            (cdr g$t*$8542$dF01I)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8541$dF01I))
                                                            (car g$t*$8542$dF01I)))))))))
                                        g$f$8540$dF01I)
                                      g$pat*$8534$dF01I
                                      g$t*$8539$dF01I)))))
                              (g$generate-temporaries$8084$dF01I
                                g$expr*$8535$dF01I)))))
                        ((letrec ((g$f$8543$dF01I
                                    (case-lambda
                                      ((g$pat*$8544$dF01I)
                                       (if (null? g$pat*$8544$dF01I)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7981$dF01I
                                                (car g$pat*$8544$dF01I)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8547$dF01I
                                                g$idn*$8548$dF01I)
                                              ((case-lambda
                                                 ((g$idn*$8549$dF01I
                                                    g$pat$8550$dF01I)
                                                  (append
                                                    g$idn*$8549$dF01I
                                                    (g$f$8543$dF01I
                                                      (cdr g$pat*$8544$dF01I)))))
                                               g$idn*$8548$dF01I
                                               g$pat$8547$dF01I)))))))))
                           g$f$8543$dF01I)
                         g$pat*$8534$dF01I))))
                    g$ls/false$8533$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8532$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8532$dF01I
               '(_ #(each (any any)) any . each-any)))))
         g$e$8531$dF01I))))
   (g$invalid-fmls-error$7947$dF01I
     g$invalid-fmls-error$11450$dF01I
     (case-lambda
       ((g$stx$8551$dF01I g$fmls$8552$dF01I)
        ((case-lambda
           ((g$t$8553$dF01I)
            ((case-lambda
               ((g$ls/false$8554$dF01I)
                (if g$ls/false$8554$dF01I
                  (apply
                    (case-lambda
                      ((g$id*$8555$dF01I g$last$8556$dF01I)
                       ((letrec ((g$f$8557$dF01I
                                   (case-lambda
                                     ((g$id*$8558$dF01I)
                                      (if (null? g$id*$8558$dF01I)
                                        (values)
                                        (if (not (g$id?$7704$dF01I
                                                   (car g$id*$8558$dF01I)))
                                          (g$syntax-violation$8094$dF01I
                                            '#f
                                            '"not an identifier"
                                            g$stx$8551$dF01I
                                            (car g$id*$8558$dF01I))
                                          (begin
                                            (g$f$8557$dF01I
                                              (cdr g$id*$8558$dF01I))
                                            (if (g$bound-id-member?$7711$dF01I
                                                  (car g$id*$8558$dF01I)
                                                  (cdr g$id*$8558$dF01I))
                                              (g$syntax-violation$8094$dF01I
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8551$dF01I
                                                (car g$id*$8558$dF01I))
                                              (void)))))))))
                          g$f$8557$dF01I)
                        (if (g$id?$7704$dF01I g$last$8556$dF01I)
                          (cons g$last$8556$dF01I g$id*$8555$dF01I)
                          (if (g$syntax-null?$7699$dF01I g$last$8556$dF01I)
                            g$id*$8555$dF01I
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"not an identifier"
                              g$stx$8551$dF01I
                              g$last$8556$dF01I))))))
                    g$ls/false$8554$dF01I)
                  ((case-lambda
                     ((g$t$8559$dF01I)
                      ((case-lambda
                         ((g$ls/false$8560$dF01I)
                          (if g$ls/false$8560$dF01I
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8094$dF01I
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8551$dF01I
                                   g$fmls$8552$dF01I)))
                              g$ls/false$8560$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$8559$dF01I))))
                       (g$syntax-dispatch$7982$dF01I g$t$8559$dF01I '_))))
                   g$t$8553$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8553$dF01I
               '#(each+ any () any)))))
         g$fmls$8552$dF01I))))
   (g$let-macro$7948$dF01I
     g$let-macro$11451$dF01I
     (case-lambda
       ((g$stx$8561$dF01I)
        ((case-lambda
           ((g$t$8562$dF01I)
            ((case-lambda
               ((g$ls/false$8563$dF01I)
                (if g$ls/false$8563$dF01I
                  (apply
                    (case-lambda
                      ((g$lhs*$8564$dF01I
                         g$rhs*$8565$dF01I
                         g$b$8566$dF01I
                         g$b*$8567$dF01I)
                       (if (g$valid-bound-ids?$7709$dF01I g$lhs*$8564$dF01I)
                         (g$bless$7945$dF01I
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8564$dF01I
                                 (cons g$b$8566$dF01I g$b*$8567$dF01I)))
                             g$rhs*$8565$dF01I))
                         (g$invalid-fmls-error$7947$dF01I
                           g$stx$8561$dF01I
                           g$lhs*$8564$dF01I))))
                    g$ls/false$8563$dF01I)
                  ((case-lambda
                     ((g$t$8568$dF01I)
                      ((case-lambda
                         ((g$ls/false$8569$dF01I)
                          (if (if g$ls/false$8569$dF01I
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8570$dF01I
                                         g$lhs*$8571$dF01I
                                         g$rhs*$8572$dF01I
                                         g$b$8573$dF01I
                                         g$b*$8574$dF01I)
                                       (g$id?$7704$dF01I g$f$8570$dF01I)))
                                    g$ls/false$8569$dF01I))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8575$dF01I
                                   g$lhs*$8576$dF01I
                                   g$rhs*$8577$dF01I
                                   g$b$8578$dF01I
                                   g$b*$8579$dF01I)
                                 (if (g$valid-bound-ids?$7709$dF01I
                                       g$lhs*$8576$dF01I)
                                   (g$bless$7945$dF01I
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8575$dF01I
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8576$dF01I
                                                 (cons
                                                   g$b$8578$dF01I
                                                   g$b*$8579$dF01I)))))
                                         g$f$8575$dF01I)
                                       g$rhs*$8577$dF01I))
                                   (g$invalid-fmls-error$7947$dF01I
                                     g$stx$8561$dF01I
                                     g$lhs*$8576$dF01I))))
                              g$ls/false$8569$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$8568$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$8568$dF01I
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8562$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8562$dF01I
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8561$dF01I))))
   (g$let-values-macro$7949$dF01I
     g$let-values-macro$11452$dF01I
     (case-lambda
       ((g$stx$8580$dF01I)
        (letrec* ((g$rename$8581$dF01I
                    (case-lambda
                      ((g$x$8632$dF01I g$old*$8633$dF01I g$new*$8634$dF01I)
                       (begin
                         (if (not (g$id?$7704$dF01I g$x$8632$dF01I))
                           (g$syntax-violation$8094$dF01I
                             '#f
                             '"not an indentifier"
                             g$stx$8580$dF01I
                             g$x$8632$dF01I)
                           (void))
                         (if (g$bound-id-member?$7711$dF01I
                               g$x$8632$dF01I
                               g$old*$8633$dF01I)
                           (g$syntax-violation$8094$dF01I
                             '#f
                             '"duplicate binding"
                             g$stx$8580$dF01I
                             g$x$8632$dF01I)
                           (void))
                         ((case-lambda
                            ((g$y$8635$dF01I)
                             (values
                               g$y$8635$dF01I
                               (cons g$x$8632$dF01I g$old*$8633$dF01I)
                               (cons g$y$8635$dF01I g$new*$8634$dF01I))))
                          (gensym
                            (g$syntax->datum$8097$dF01I g$x$8632$dF01I)))))))
                  (g$rename*$8582$dF01I
                    (case-lambda
                      ((g$x*$8623$dF01I g$old*$8624$dF01I g$new*$8625$dF01I)
                       (if (null? g$x*$8623$dF01I)
                         (values '() g$old*$8624$dF01I g$new*$8625$dF01I)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8581$dF01I
                                (car g$x*$8623$dF01I)
                                g$old*$8624$dF01I
                                g$new*$8625$dF01I)))
                           (case-lambda
                             ((g$x$8626$dF01I
                                g$old*$8627$dF01I
                                g$new*$8628$dF01I)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8582$dF01I
                                     (cdr g$x*$8623$dF01I)
                                     g$old*$8627$dF01I
                                     g$new*$8628$dF01I)))
                                (case-lambda
                                  ((g$x*$8629$dF01I
                                     g$old*$8630$dF01I
                                     g$new*$8631$dF01I)
                                   (values
                                     (cons g$x$8626$dF01I g$x*$8629$dF01I)
                                     g$old*$8630$dF01I
                                     g$new*$8631$dF01I))))))))))))
          ((case-lambda
             ((g$t$8583$dF01I)
              ((case-lambda
                 ((g$ls/false$8584$dF01I)
                  (if g$ls/false$8584$dF01I
                    (apply
                      (case-lambda
                        ((g$b$8585$dF01I g$b*$8586$dF01I)
                         (g$cons*$5065$dF01I
                           (g$bless$7945$dF01I 'let)
                           '()
                           g$b$8585$dF01I
                           g$b*$8586$dF01I)))
                      g$ls/false$8584$dF01I)
                    ((case-lambda
                       ((g$t$8587$dF01I)
                        ((case-lambda
                           ((g$ls/false$8588$dF01I)
                            (if g$ls/false$8588$dF01I
                              (apply
                                (case-lambda
                                  ((g$lhs*$8589$dF01I
                                     g$rhs*$8590$dF01I
                                     g$b$8591$dF01I
                                     g$b*$8592$dF01I)
                                   (g$bless$7945$dF01I
                                     ((letrec ((g$f$8593$dF01I
                                                 (case-lambda
                                                   ((g$lhs*$8594$dF01I
                                                      g$rhs*$8595$dF01I
                                                      g$old*$8596$dF01I
                                                      g$new*$8597$dF01I)
                                                    (if (null?
                                                          g$lhs*$8594$dF01I)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5063$dF01I
                                                            list
                                                            g$old*$8596$dF01I
                                                            g$new*$8597$dF01I)
                                                          (cons
                                                            g$b$8591$dF01I
                                                            g$b*$8592$dF01I)))
                                                      ((case-lambda
                                                         ((g$t$8598$dF01I)
                                                          ((case-lambda
                                                             ((g$ls/false$8599$dF01I)
                                                              (if g$ls/false$8599$dF01I
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8600$dF01I)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8582$dF01I
                                                                            g$x*$8600$dF01I
                                                                            g$old*$8596$dF01I
                                                                            g$new*$8597$dF01I)))
                                                                       (case-lambda
                                                                         ((g$y*$8604$dF01I
                                                                            g$old*$8605$dF01I
                                                                            g$new*$8606$dF01I)
                                                                          ((case-lambda
                                                                             ((g$new*$8607$dF01I
                                                                                g$old*$8608$dF01I
                                                                                g$y*$8609$dF01I)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8595$dF01I))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8609$dF01I
                                                                                  (g$f$8593$dF01I
                                                                                    (cdr g$lhs*$8594$dF01I)
                                                                                    (cdr g$rhs*$8595$dF01I)
                                                                                    g$old*$8608$dF01I
                                                                                    g$new*$8607$dF01I)))))
                                                                           g$new*$8606$dF01I
                                                                           g$old*$8605$dF01I
                                                                           g$y*$8604$dF01I))))))
                                                                  g$ls/false$8599$dF01I)
                                                                ((case-lambda
                                                                   ((g$t$8610$dF01I)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8611$dF01I)
                                                                        (if g$ls/false$8611$dF01I
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8612$dF01I
                                                                                 g$x$8613$dF01I)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8581$dF01I
                                                                                      g$x$8613$dF01I
                                                                                      g$old*$8596$dF01I
                                                                                      g$new*$8597$dF01I)))
                                                                                 (case-lambda
                                                                                   ((g$y$8614$dF01I
                                                                                      g$old*$8615$dF01I
                                                                                      g$new*$8616$dF01I)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8582$dF01I
                                                                                           g$x*$8612$dF01I
                                                                                           g$old*$8615$dF01I
                                                                                           g$new*$8616$dF01I)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8617$dF01I
                                                                                           g$old*$8618$dF01I
                                                                                           g$new*$8619$dF01I)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8595$dF01I))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8617$dF01I
                                                                                               g$y$8614$dF01I)
                                                                                             (g$f$8593$dF01I
                                                                                               (cdr g$lhs*$8594$dF01I)
                                                                                               (cdr g$rhs*$8595$dF01I)
                                                                                               g$old*$8618$dF01I
                                                                                               g$new*$8619$dF01I)))))))))))
                                                                            g$ls/false$8611$dF01I)
                                                                          ((case-lambda
                                                                             ((g$t$8620$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8621$dF01I)
                                                                                  (if g$ls/false$8621$dF01I
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8622$dF01I)
                                                                                         (g$syntax-violation$8094$dF01I
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8580$dF01I
                                                                                           g$others$8622$dF01I)))
                                                                                      g$ls/false$8621$dF01I)
                                                                                    (g$syntax-violation$8094$dF01I
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8620$dF01I))))
                                                                               (g$syntax-dispatch$7982$dF01I
                                                                                 g$t$8620$dF01I
                                                                                 'any))))
                                                                           g$t$8610$dF01I))))
                                                                     (g$syntax-dispatch$7982$dF01I
                                                                       g$t$8610$dF01I
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8598$dF01I))))
                                                           (g$syntax-dispatch$7982$dF01I
                                                             g$t$8598$dF01I
                                                             'each-any))))
                                                       (car g$lhs*$8594$dF01I)))))))
                                        g$f$8593$dF01I)
                                      g$lhs*$8589$dF01I
                                      g$rhs*$8590$dF01I
                                      '()
                                      '()))))
                                g$ls/false$8588$dF01I)
                              (g$syntax-violation$8094$dF01I
                                '#f
                                '"invalid syntax"
                                g$t$8587$dF01I))))
                         (g$syntax-dispatch$7982$dF01I
                           g$t$8587$dF01I
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8583$dF01I))))
               (g$syntax-dispatch$7982$dF01I
                 g$t$8583$dF01I
                 '(_ () any . each-any)))))
           g$stx$8580$dF01I)))))
   (g$let*-values-macro$7950$dF01I
     g$let*-values-macro$11453$dF01I
     (case-lambda
       ((g$stx$8636$dF01I)
        (letrec* ((g$check$8637$dF01I
                    (case-lambda
                      ((g$x*$8661$dF01I)
                       (if (not (null? g$x*$8661$dF01I))
                         ((case-lambda
                            ((g$x$8662$dF01I)
                             (begin
                               (if (not (g$id?$7704$dF01I g$x$8662$dF01I))
                                 (g$syntax-violation$8094$dF01I
                                   '#f
                                   '"not an identifier"
                                   g$stx$8636$dF01I
                                   g$x$8662$dF01I)
                                 (void))
                               (g$check$8637$dF01I (cdr g$x*$8661$dF01I))
                               (if (g$bound-id-member?$7711$dF01I
                                     g$x$8662$dF01I
                                     (cdr g$x*$8661$dF01I))
                                 (g$syntax-violation$8094$dF01I
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8636$dF01I
                                   g$x$8662$dF01I)
                                 (void)))))
                          (car g$x*$8661$dF01I))
                         (void))))))
          ((case-lambda
             ((g$t$8638$dF01I)
              ((case-lambda
                 ((g$ls/false$8639$dF01I)
                  (if g$ls/false$8639$dF01I
                    (apply
                      (case-lambda
                        ((g$b$8640$dF01I g$b*$8641$dF01I)
                         (g$cons*$5065$dF01I
                           (g$bless$7945$dF01I 'let)
                           '()
                           g$b$8640$dF01I
                           g$b*$8641$dF01I)))
                      g$ls/false$8639$dF01I)
                    ((case-lambda
                       ((g$t$8642$dF01I)
                        ((case-lambda
                           ((g$ls/false$8643$dF01I)
                            (if g$ls/false$8643$dF01I
                              (apply
                                (case-lambda
                                  ((g$lhs*$8644$dF01I
                                     g$rhs*$8645$dF01I
                                     g$b$8646$dF01I
                                     g$b*$8647$dF01I)
                                   (g$bless$7945$dF01I
                                     ((letrec ((g$f$8648$dF01I
                                                 (case-lambda
                                                   ((g$lhs*$8649$dF01I
                                                      g$rhs*$8650$dF01I)
                                                    (if (null?
                                                          g$lhs*$8649$dF01I)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8646$dF01I
                                                          g$b*$8647$dF01I))
                                                      ((case-lambda
                                                         ((g$t$8651$dF01I)
                                                          ((case-lambda
                                                             ((g$ls/false$8652$dF01I)
                                                              (if g$ls/false$8652$dF01I
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8653$dF01I)
                                                                     (begin
                                                                       (g$check$8637$dF01I
                                                                         g$x*$8653$dF01I)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8650$dF01I))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8653$dF01I
                                                                           (g$f$8648$dF01I
                                                                             (cdr g$lhs*$8649$dF01I)
                                                                             (cdr g$rhs*$8650$dF01I)))))))
                                                                  g$ls/false$8652$dF01I)
                                                                ((case-lambda
                                                                   ((g$t$8654$dF01I)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8655$dF01I)
                                                                        (if g$ls/false$8655$dF01I
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8656$dF01I
                                                                                 g$x$8657$dF01I)
                                                                               (begin
                                                                                 (g$check$8637$dF01I
                                                                                   (cons
                                                                                     g$x$8657$dF01I
                                                                                     g$x*$8656$dF01I))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8650$dF01I))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8656$dF01I
                                                                                       g$x$8657$dF01I)
                                                                                     (g$f$8648$dF01I
                                                                                       (cdr g$lhs*$8649$dF01I)
                                                                                       (cdr g$rhs*$8650$dF01I)))))))
                                                                            g$ls/false$8655$dF01I)
                                                                          ((case-lambda
                                                                             ((g$t$8658$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8659$dF01I)
                                                                                  (if g$ls/false$8659$dF01I
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8660$dF01I)
                                                                                         (g$syntax-violation$8094$dF01I
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8636$dF01I
                                                                                           g$others$8660$dF01I)))
                                                                                      g$ls/false$8659$dF01I)
                                                                                    (g$syntax-violation$8094$dF01I
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8658$dF01I))))
                                                                               (g$syntax-dispatch$7982$dF01I
                                                                                 g$t$8658$dF01I
                                                                                 'any))))
                                                                           g$t$8654$dF01I))))
                                                                     (g$syntax-dispatch$7982$dF01I
                                                                       g$t$8654$dF01I
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8651$dF01I))))
                                                           (g$syntax-dispatch$7982$dF01I
                                                             g$t$8651$dF01I
                                                             'each-any))))
                                                       (car g$lhs*$8649$dF01I)))))))
                                        g$f$8648$dF01I)
                                      g$lhs*$8644$dF01I
                                      g$rhs*$8645$dF01I))))
                                g$ls/false$8643$dF01I)
                              (g$syntax-violation$8094$dF01I
                                '#f
                                '"invalid syntax"
                                g$t$8642$dF01I))))
                         (g$syntax-dispatch$7982$dF01I
                           g$t$8642$dF01I
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8638$dF01I))))
               (g$syntax-dispatch$7982$dF01I
                 g$t$8638$dF01I
                 '(_ () any . each-any)))))
           g$stx$8636$dF01I)))))
   (g$trace-lambda-macro$7951$dF01I
     g$trace-lambda-macro$11454$dF01I
     (case-lambda
       ((g$stx$8663$dF01I)
        ((case-lambda
           ((g$t$8664$dF01I)
            ((case-lambda
               ((g$ls/false$8665$dF01I)
                (if g$ls/false$8665$dF01I
                  (apply
                    (case-lambda
                      ((g$who$8666$dF01I
                         g$fmls$8667$dF01I
                         g$b$8668$dF01I
                         g$b*$8669$dF01I)
                       (if (g$valid-bound-ids?$7709$dF01I g$fmls$8667$dF01I)
                         (g$bless$7945$dF01I
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8666$dF01I)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8667$dF01I
                                 (cons g$b$8668$dF01I g$b*$8669$dF01I)))))
                         (g$invalid-fmls-error$7947$dF01I
                           g$stx$8663$dF01I
                           g$fmls$8667$dF01I))))
                    g$ls/false$8665$dF01I)
                  ((case-lambda
                     ((g$t$8670$dF01I)
                      ((case-lambda
                         ((g$ls/false$8671$dF01I)
                          (if g$ls/false$8671$dF01I
                            (apply
                              (case-lambda
                                ((g$who$8672$dF01I
                                   g$fmls$8673$dF01I
                                   g$last$8674$dF01I
                                   g$b$8675$dF01I
                                   g$b*$8676$dF01I)
                                 (if (g$valid-bound-ids?$7709$dF01I
                                       (cons
                                         g$last$8674$dF01I
                                         g$fmls$8673$dF01I))
                                   (g$bless$7945$dF01I
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8672$dF01I)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8673$dF01I
                                             g$last$8674$dF01I)
                                           (cons
                                             g$b$8675$dF01I
                                             g$b*$8676$dF01I)))))
                                   (g$invalid-fmls-error$7947$dF01I
                                     g$stx$8663$dF01I
                                     (append
                                       g$fmls$8673$dF01I
                                       g$last$8674$dF01I)))))
                              g$ls/false$8671$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$8670$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$8670$dF01I
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8664$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8664$dF01I
               '(_ any each-any any . each-any)))))
         g$stx$8663$dF01I))))
   (g$trace-define-macro$7952$dF01I
     g$trace-define-macro$11455$dF01I
     (case-lambda
       ((g$stx$8677$dF01I)
        ((case-lambda
           ((g$t$8678$dF01I)
            ((case-lambda
               ((g$ls/false$8679$dF01I)
                (if g$ls/false$8679$dF01I
                  (apply
                    (case-lambda
                      ((g$who$8680$dF01I
                         g$fmls$8681$dF01I
                         g$b$8682$dF01I
                         g$b*$8683$dF01I)
                       (if (g$valid-bound-ids?$7709$dF01I g$fmls$8681$dF01I)
                         (g$bless$7945$dF01I
                           (list
                             'define
                             g$who$8680$dF01I
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8680$dF01I)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8681$dF01I
                                   (cons g$b$8682$dF01I g$b*$8683$dF01I))))))
                         (g$invalid-fmls-error$7947$dF01I
                           g$stx$8677$dF01I
                           g$fmls$8681$dF01I))))
                    g$ls/false$8679$dF01I)
                  ((case-lambda
                     ((g$t$8684$dF01I)
                      ((case-lambda
                         ((g$ls/false$8685$dF01I)
                          (if g$ls/false$8685$dF01I
                            (apply
                              (case-lambda
                                ((g$who$8686$dF01I
                                   g$fmls$8687$dF01I
                                   g$last$8688$dF01I
                                   g$b$8689$dF01I
                                   g$b*$8690$dF01I)
                                 (if (g$valid-bound-ids?$7709$dF01I
                                       (cons
                                         g$last$8688$dF01I
                                         g$fmls$8687$dF01I))
                                   (g$bless$7945$dF01I
                                     (list
                                       'define
                                       g$who$8686$dF01I
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8686$dF01I)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8687$dF01I
                                               g$last$8688$dF01I)
                                             (cons
                                               g$b$8689$dF01I
                                               g$b*$8690$dF01I))))))
                                   (g$invalid-fmls-error$7947$dF01I
                                     g$stx$8677$dF01I
                                     (append
                                       g$fmls$8687$dF01I
                                       g$last$8688$dF01I)))))
                              g$ls/false$8685$dF01I)
                            ((case-lambda
                               ((g$t$8691$dF01I)
                                ((case-lambda
                                   ((g$ls/false$8692$dF01I)
                                    (if g$ls/false$8692$dF01I
                                      (apply
                                        (case-lambda
                                          ((g$who$8693$dF01I g$expr$8694$dF01I)
                                           (if (g$id?$7704$dF01I
                                                 g$who$8693$dF01I)
                                             (g$bless$7945$dF01I
                                               (list
                                                 'define
                                                 g$who$8693$dF01I
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8694$dF01I))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8693$dF01I)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$8094$dF01I
                                               '#f
                                               '"invalid name"
                                               g$stx$8677$dF01I))))
                                        g$ls/false$8692$dF01I)
                                      (g$syntax-violation$8094$dF01I
                                        '#f
                                        '"invalid syntax"
                                        g$t$8691$dF01I))))
                                 (g$syntax-dispatch$7982$dF01I
                                   g$t$8691$dF01I
                                   '(_ any any)))))
                             g$t$8684$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$8684$dF01I
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8678$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8678$dF01I
               '(_ (any . each-any) any . each-any)))))
         g$stx$8677$dF01I))))
   (g$trace-define-syntax-macro$7953$dF01I
     g$trace-define-syntax-macro$11456$dF01I
     (case-lambda
       ((g$stx$8695$dF01I)
        ((case-lambda
           ((g$t$8696$dF01I)
            ((case-lambda
               ((g$ls/false$8697$dF01I)
                (if g$ls/false$8697$dF01I
                  (apply
                    (case-lambda
                      ((g$who$8698$dF01I g$expr$8699$dF01I)
                       (if (g$id?$7704$dF01I g$who$8698$dF01I)
                         (g$bless$7945$dF01I
                           (list
                             'define-syntax
                             g$who$8698$dF01I
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8698$dF01I)
                               g$expr$8699$dF01I)))
                         (g$syntax-violation$8094$dF01I
                           '#f
                           '"invalid name"
                           g$stx$8695$dF01I))))
                    g$ls/false$8697$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8696$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8696$dF01I '(_ any any)))))
         g$stx$8695$dF01I))))
   (g$trace-let/rec-syntax$7954$dF01I
     g$trace-let/rec-syntax$11457$dF01I
     (case-lambda
       ((g$who$8700$dF01I)
        (case-lambda
          ((g$stx$8701$dF01I)
           ((case-lambda
              ((g$t$8702$dF01I)
               ((case-lambda
                  ((g$ls/false$8703$dF01I)
                   (if g$ls/false$8703$dF01I
                     (apply
                       (case-lambda
                         ((g$lhs*$8704$dF01I
                            g$rhs*$8705$dF01I
                            g$b$8706$dF01I
                            g$b*$8707$dF01I)
                          (if (g$valid-bound-ids?$7709$dF01I g$lhs*$8704$dF01I)
                            ((case-lambda
                               ((g$rhs*$8708$dF01I)
                                (g$bless$7945$dF01I
                                  (cons
                                    g$who$8700$dF01I
                                    (cons
                                      (g$map$5063$dF01I
                                        list
                                        g$lhs*$8704$dF01I
                                        g$rhs*$8708$dF01I)
                                      (cons g$b$8706$dF01I g$b*$8707$dF01I))))))
                             (g$map$5063$dF01I
                               (case-lambda
                                 ((g$lhs$8709$dF01I g$rhs$8710$dF01I)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$8709$dF01I)
                                    g$rhs$8710$dF01I)))
                               g$lhs*$8704$dF01I
                               g$rhs*$8705$dF01I))
                            (g$invalid-fmls-error$7947$dF01I
                              g$stx$8701$dF01I
                              g$lhs*$8704$dF01I))))
                       g$ls/false$8703$dF01I)
                     (g$syntax-violation$8094$dF01I
                       '#f
                       '"invalid syntax"
                       g$t$8702$dF01I))))
                (g$syntax-dispatch$7982$dF01I
                  g$t$8702$dF01I
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8701$dF01I))))))
   (g$trace-let-syntax-macro$7955$dF01I
     g$trace-let-syntax-macro$11458$dF01I
     (g$trace-let/rec-syntax$7954$dF01I 'let-syntax))
   (g$trace-letrec-syntax-macro$7956$dF01I
     g$trace-letrec-syntax-macro$11459$dF01I
     (g$trace-let/rec-syntax$7954$dF01I 'letrec-syntax))
   (g$guard-macro$7957$dF01I
     g$guard-macro$11460$dF01I
     (case-lambda
       ((g$x$8711$dF01I)
        (letrec* ((g$gen-clauses$8712$dF01I
                    (case-lambda
                      ((g$con$8724$dF01I
                         g$outerk$8725$dF01I
                         g$clause*$8726$dF01I)
                       (letrec* ((g$f$8727$dF01I
                                   (case-lambda
                                     ((g$x$8755$dF01I g$k$8756$dF01I)
                                      ((case-lambda
                                         ((g$t$8757$dF01I)
                                          ((case-lambda
                                             ((g$ls/false$8758$dF01I)
                                              (if g$ls/false$8758$dF01I
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8759$dF01I
                                                       g$p$8760$dF01I)
                                                     ((case-lambda
                                                        ((g$t$8761$dF01I)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8761$dF01I
                                                               g$e$8759$dF01I))
                                                           (list
                                                             'if
                                                             g$t$8761$dF01I
                                                             (list
                                                               g$p$8760$dF01I
                                                               g$t$8761$dF01I)
                                                             g$k$8756$dF01I))))
                                                      (gensym))))
                                                  g$ls/false$8758$dF01I)
                                                ((case-lambda
                                                   ((g$t$8762$dF01I)
                                                    ((case-lambda
                                                       ((g$ls/false$8763$dF01I)
                                                        (if g$ls/false$8763$dF01I
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8764$dF01I)
                                                               ((case-lambda
                                                                  ((g$t$8765$dF01I)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8765$dF01I
                                                                         g$e$8764$dF01I))
                                                                     (list
                                                                       'if
                                                                       g$t$8765$dF01I
                                                                       g$t$8765$dF01I
                                                                       g$k$8756$dF01I))))
                                                                (gensym))))
                                                            g$ls/false$8763$dF01I)
                                                          ((case-lambda
                                                             ((g$t$8766$dF01I)
                                                              ((case-lambda
                                                                 ((g$ls/false$8767$dF01I)
                                                                  (if g$ls/false$8767$dF01I
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8768$dF01I
                                                                           g$v$8769$dF01I
                                                                           g$v*$8770$dF01I)
                                                                         (list
                                                                           'if
                                                                           g$e$8768$dF01I
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8769$dF01I
                                                                               g$v*$8770$dF01I))
                                                                           g$k$8756$dF01I)))
                                                                      g$ls/false$8767$dF01I)
                                                                    ((case-lambda
                                                                       ((g$t$8771$dF01I)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8772$dF01I)
                                                                            (if g$ls/false$8772$dF01I
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$8094$dF01I
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8755$dF01I)))
                                                                                g$ls/false$8772$dF01I)
                                                                              (g$syntax-violation$8094$dF01I
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8771$dF01I))))
                                                                         (g$syntax-dispatch$7982$dF01I
                                                                           g$t$8771$dF01I
                                                                           '_))))
                                                                     g$t$8766$dF01I))))
                                                               (g$syntax-dispatch$7982$dF01I
                                                                 g$t$8766$dF01I
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8762$dF01I))))
                                                     (g$syntax-dispatch$7982$dF01I
                                                       g$t$8762$dF01I
                                                       '(any)))))
                                                 g$t$8757$dF01I))))
                                           (g$syntax-dispatch$7982$dF01I
                                             g$t$8757$dF01I
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8755$dF01I))))
                                 (g$f*$8728$dF01I
                                   (case-lambda
                                     ((g$x*$8735$dF01I)
                                      ((case-lambda
                                         ((g$t$8736$dF01I)
                                          ((case-lambda
                                             ((g$ls/false$8737$dF01I)
                                              (if g$ls/false$8737$dF01I
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8724$dF01I)
                                                       '#t)))
                                                  g$ls/false$8737$dF01I)
                                                ((case-lambda
                                                   ((g$t$8738$dF01I)
                                                    ((case-lambda
                                                       ((g$ls/false$8739$dF01I)
                                                        (if g$ls/false$8739$dF01I
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8740$dF01I
                                                                 g$e*$8741$dF01I)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8740$dF01I
                                                                     g$e*$8741$dF01I))
                                                                 '#f)))
                                                            g$ls/false$8739$dF01I)
                                                          ((case-lambda
                                                             ((g$t$8742$dF01I)
                                                              ((case-lambda
                                                                 ((g$ls/false$8743$dF01I)
                                                                  (if g$ls/false$8743$dF01I
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8744$dF01I
                                                                           g$cls*$8745$dF01I)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8728$dF01I
                                                                                g$cls*$8745$dF01I)))
                                                                           (case-lambda
                                                                             ((g$e$8748$dF01I
                                                                                g$g$8749$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$g$8750$dF01I
                                                                                    g$e$8751$dF01I)
                                                                                  (values
                                                                                    (g$f$8727$dF01I
                                                                                      g$cls$8744$dF01I
                                                                                      g$e$8751$dF01I)
                                                                                    g$g$8750$dF01I)))
                                                                               g$g$8749$dF01I
                                                                               g$e$8748$dF01I))))))
                                                                      g$ls/false$8743$dF01I)
                                                                    ((case-lambda
                                                                       ((g$t$8752$dF01I)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8753$dF01I)
                                                                            (if g$ls/false$8753$dF01I
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8754$dF01I)
                                                                                   (g$syntax-violation$8094$dF01I
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8754$dF01I)))
                                                                                g$ls/false$8753$dF01I)
                                                                              (g$syntax-violation$8094$dF01I
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8752$dF01I))))
                                                                         (g$syntax-dispatch$7982$dF01I
                                                                           g$t$8752$dF01I
                                                                           'any))))
                                                                     g$t$8742$dF01I))))
                                                               (g$syntax-dispatch$7982$dF01I
                                                                 g$t$8742$dF01I
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8738$dF01I))))
                                                     (g$syntax-dispatch$7982$dF01I
                                                       g$t$8738$dF01I
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8736$dF01I))))
                                           (g$syntax-dispatch$7982$dF01I
                                             g$t$8736$dF01I
                                             '()))))
                                       g$x*$8735$dF01I)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8728$dF01I g$clause*$8726$dF01I)))
                           (case-lambda
                             ((g$code$8731$dF01I g$raisek$8732$dF01I)
                              ((case-lambda
                                 ((g$raisek$8733$dF01I g$code$8734$dF01I)
                                  (if g$raisek$8733$dF01I
                                    (list g$outerk$8725$dF01I g$code$8734$dF01I)
                                    g$code$8734$dF01I)))
                               g$raisek$8732$dF01I
                               g$code$8731$dF01I)))))))))
          ((case-lambda
             ((g$t$8713$dF01I)
              ((case-lambda
                 ((g$ls/false$8714$dF01I)
                  (if (if g$ls/false$8714$dF01I
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8715$dF01I
                                 g$clause*$8716$dF01I
                                 g$b$8717$dF01I
                                 g$b*$8718$dF01I)
                               (g$id?$7704$dF01I g$con$8715$dF01I)))
                            g$ls/false$8714$dF01I))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8719$dF01I
                           g$clause*$8720$dF01I
                           g$b$8721$dF01I
                           g$b*$8722$dF01I)
                         ((case-lambda
                            ((g$outerk$8723$dF01I)
                             (g$bless$7945$dF01I
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8723$dF01I)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8719$dF01I)
                                           (g$gen-clauses$8712$dF01I
                                             g$con$8719$dF01I
                                             g$outerk$8723$dF01I
                                             g$clause*$8720$dF01I))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8721$dF01I
                                                 g$b*$8722$dF01I))))))))))))
                          (gensym))))
                      g$ls/false$8714$dF01I)
                    (g$syntax-violation$8094$dF01I
                      '#f
                      '"invalid syntax"
                      g$t$8713$dF01I))))
               (g$syntax-dispatch$7982$dF01I
                 g$t$8713$dF01I
                 '(_ (any . each-any) any . each-any)))))
           g$x$8711$dF01I)))))
   (g$define-enumeration-macro$7958$dF01I
     g$define-enumeration-macro$11461$dF01I
     (case-lambda
       ((g$stx$8773$dF01I)
        (letrec* ((g$set?$8774$dF01I
                    (case-lambda
                      ((g$x$8787$dF01I)
                       ((case-lambda
                          ((g$t$8788$dF01I)
                           (if g$t$8788$dF01I
                             g$t$8788$dF01I
                             (begin
                               '#f
                               (if (not (g$memq$5055$dF01I
                                          (car g$x$8787$dF01I)
                                          (cdr g$x$8787$dF01I)))
                                 (begin
                                   '#f
                                   (g$set?$8774$dF01I (cdr g$x$8787$dF01I)))
                                 '#f)))))
                        (null? g$x$8787$dF01I)))))
                  (g$remove-dups$8775$dF01I
                    (case-lambda
                      ((g$ls$8786$dF01I)
                       (if (null? g$ls$8786$dF01I)
                         '()
                         (cons
                           (car g$ls$8786$dF01I)
                           (g$remove-dups$8775$dF01I
                             (g$remq$5070$dF01I
                               (car g$ls$8786$dF01I)
                               (cdr g$ls$8786$dF01I)))))))))
          ((case-lambda
             ((g$t$8776$dF01I)
              ((case-lambda
                 ((g$ls/false$8777$dF01I)
                  (if (if g$ls/false$8777$dF01I
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8778$dF01I
                                 g$id*$8779$dF01I
                                 g$maker$8780$dF01I)
                               (if (g$id?$7704$dF01I g$name$8778$dF01I)
                                 (if (g$id?$7704$dF01I g$maker$8780$dF01I)
                                   (begin
                                     '#f
                                     (g$for-all$5061$dF01I
                                       g$id?$7704$dF01I
                                       g$id*$8779$dF01I))
                                   '#f)
                                 '#f)))
                            g$ls/false$8777$dF01I))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8781$dF01I g$id*$8782$dF01I g$maker$8783$dF01I)
                         ((case-lambda
                            ((g$name*$8784$dF01I g$mk$8785$dF01I)
                             (g$bless$7945$dF01I
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8785$dF01I
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8784$dF01I))))
                                 (list
                                   'define-syntax
                                   g$name$8781$dF01I
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8784$dF01I))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8781$dF01I)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8783$dF01I
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8783$dF01I)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8784$dF01I))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8783$dF01I)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8785$dF01I
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8775$dF01I
                            (g$syntax->datum$8097$dF01I g$id*$8782$dF01I))
                          (gensym))))
                      g$ls/false$8777$dF01I)
                    (g$syntax-violation$8094$dF01I
                      '#f
                      '"invalid syntax"
                      g$t$8776$dF01I))))
               (g$syntax-dispatch$7982$dF01I
                 g$t$8776$dF01I
                 '(_ any each-any any)))))
           g$stx$8773$dF01I)))))
   (g$time-macro$7959$dF01I
     g$time-macro$11462$dF01I
     (case-lambda
       ((g$stx$8789$dF01I)
        ((case-lambda
           ((g$t$8790$dF01I)
            ((case-lambda
               ((g$ls/false$8791$dF01I)
                (if g$ls/false$8791$dF01I
                  (apply
                    (case-lambda
                      ((g$expr$8792$dF01I)
                       ((case-lambda
                          ((g$str$8793$dF01I)
                           (g$bless$7945$dF01I
                             (list
                               'time-it
                               g$str$8793$dF01I
                               (list 'lambda '() g$expr$8792$dF01I)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6336$dF01I)))
                          (case-lambda
                            ((g$p$8796$dF01I g$e$8797$dF01I)
                             ((case-lambda
                                ((g$e$8798$dF01I g$p$8799$dF01I)
                                 (begin
                                   (write
                                     (g$syntax->datum$8097$dF01I
                                       g$expr$8792$dF01I)
                                     g$p$8799$dF01I)
                                   (g$e$8798$dF01I))))
                              g$e$8797$dF01I
                              g$p$8796$dF01I)))))))
                    g$ls/false$8791$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8790$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8790$dF01I '(_ any)))))
         g$stx$8789$dF01I))))
   (g$delay-macro$7960$dF01I
     g$delay-macro$11463$dF01I
     (case-lambda
       ((g$stx$8800$dF01I)
        ((case-lambda
           ((g$t$8801$dF01I)
            ((case-lambda
               ((g$ls/false$8802$dF01I)
                (if g$ls/false$8802$dF01I
                  (apply
                    (case-lambda
                      ((g$expr$8803$dF01I)
                       (g$bless$7945$dF01I
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8803$dF01I)))))
                    g$ls/false$8802$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8801$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8801$dF01I '(_ any)))))
         g$stx$8800$dF01I))))
   (g$assert-macro$7961$dF01I
     g$assert-macro$11464$dF01I
     (case-lambda
       ((g$stx$8804$dF01I)
        ((case-lambda
           ((g$t$8805$dF01I)
            ((case-lambda
               ((g$ls/false$8806$dF01I)
                (if g$ls/false$8806$dF01I
                  (apply
                    (case-lambda
                      ((g$expr$8807$dF01I)
                       ((case-lambda
                          ((g$pos$8808$dF01I)
                           (g$bless$7945$dF01I
                             (list
                               'unless
                               g$expr$8807$dF01I
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8807$dF01I)
                                 (list 'quote g$pos$8808$dF01I))))))
                        ((case-lambda
                           ((g$t$8809$dF01I)
                            (if g$t$8809$dF01I
                              g$t$8809$dF01I
                              (begin
                                '#f
                                (g$expression-position$8089$dF01I
                                  g$expr$8807$dF01I)))))
                         (g$expression-position$8089$dF01I g$stx$8804$dF01I)))))
                    g$ls/false$8806$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8805$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8805$dF01I '(_ any)))))
         g$stx$8804$dF01I))))
   (g$endianness-macro$7962$dF01I
     g$endianness-macro$11465$dF01I
     (case-lambda
       ((g$stx$8810$dF01I)
        ((case-lambda
           ((g$t$8811$dF01I)
            ((case-lambda
               ((g$ls/false$8812$dF01I)
                (if g$ls/false$8812$dF01I
                  (apply
                    (case-lambda
                      ((g$e$8813$dF01I)
                       ((case-lambda
                          ((g$t$8814$dF01I)
                           (if (g$memv$5056$dF01I g$t$8814$dF01I '(little))
                             (g$bless$7945$dF01I ''little)
                             (if (g$memv$5056$dF01I g$t$8814$dF01I '(big))
                               (g$bless$7945$dF01I ''big)
                               (g$syntax-violation$8094$dF01I
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8810$dF01I)))))
                        (g$syntax->datum$8097$dF01I g$e$8813$dF01I))))
                    g$ls/false$8812$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8811$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8811$dF01I '(_ any)))))
         g$stx$8810$dF01I))))
   (g$identifier-syntax-macro$7963$dF01I
     g$identifier-syntax-macro$11466$dF01I
     (case-lambda
       ((g$stx$8815$dF01I)
        ((case-lambda
           ((g$t$8816$dF01I)
            ((case-lambda
               ((g$ls/false$8817$dF01I)
                (if g$ls/false$8817$dF01I
                  (apply
                    (case-lambda
                      ((g$expr$8818$dF01I)
                       (g$bless$7945$dF01I
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8818$dF01I))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8818$dF01I)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8817$dF01I)
                  ((case-lambda
                     ((g$t$8819$dF01I)
                      ((case-lambda
                         ((g$ls/false$8820$dF01I)
                          (if (if g$ls/false$8820$dF01I
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8821$dF01I
                                         g$expr1$8822$dF01I
                                         g$id2$8823$dF01I
                                         g$expr2$8824$dF01I
                                         g$expr3$8825$dF01I)
                                       (if (g$id?$7704$dF01I g$id1$8821$dF01I)
                                         (if (g$id?$7704$dF01I g$id2$8823$dF01I)
                                           (begin
                                             '#f
                                             (g$id?$7704$dF01I
                                               g$expr2$8824$dF01I))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8820$dF01I))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8826$dF01I
                                   g$expr1$8827$dF01I
                                   g$id2$8828$dF01I
                                   g$expr2$8829$dF01I
                                   g$expr3$8830$dF01I)
                                 (g$bless$7945$dF01I
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8827$dF01I))
                                         (list
                                           (list 'set! 'id g$expr2$8829$dF01I)
                                           (list 'syntax g$expr3$8830$dF01I))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8827$dF01I
                                               '(e* ...))))))))))
                              g$ls/false$8820$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$8819$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$8819$dF01I
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8816$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8816$dF01I '(_ any)))))
         g$stx$8815$dF01I))))
   (g$do-macro$7964$dF01I
     g$do-macro$11467$dF01I
     (case-lambda
       ((g$stx$8831$dF01I)
        (letrec* ((g$bind$8832$dF01I
                    (case-lambda
                      ((g$x$8844$dF01I)
                       ((case-lambda
                          ((g$t$8845$dF01I)
                           ((case-lambda
                              ((g$ls/false$8846$dF01I)
                               (if g$ls/false$8846$dF01I
                                 (apply
                                   (case-lambda
                                     ((g$x$8847$dF01I g$init$8848$dF01I)
                                      (list
                                        g$x$8847$dF01I
                                        g$init$8848$dF01I
                                        g$x$8847$dF01I)))
                                   g$ls/false$8846$dF01I)
                                 ((case-lambda
                                    ((g$t$8849$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$8850$dF01I)
                                         (if g$ls/false$8850$dF01I
                                           (apply
                                             (case-lambda
                                               ((g$x$8851$dF01I
                                                  g$init$8852$dF01I
                                                  g$step$8853$dF01I)
                                                (list
                                                  g$x$8851$dF01I
                                                  g$init$8852$dF01I
                                                  g$step$8853$dF01I)))
                                             g$ls/false$8850$dF01I)
                                           ((case-lambda
                                              ((g$t$8854$dF01I)
                                               ((case-lambda
                                                  ((g$ls/false$8855$dF01I)
                                                   (if g$ls/false$8855$dF01I
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$8094$dF01I
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8831$dF01I)))
                                                       g$ls/false$8855$dF01I)
                                                     (g$syntax-violation$8094$dF01I
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8854$dF01I))))
                                                (g$syntax-dispatch$7982$dF01I
                                                  g$t$8854$dF01I
                                                  '_))))
                                            g$t$8849$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$8849$dF01I
                                        '(any any any)))))
                                  g$t$8845$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$8845$dF01I
                              '(any any)))))
                        g$x$8844$dF01I)))))
          ((case-lambda
             ((g$t$8833$dF01I)
              ((case-lambda
                 ((g$ls/false$8834$dF01I)
                  (if g$ls/false$8834$dF01I
                    (apply
                      (case-lambda
                        ((g$binding*$8835$dF01I
                           g$test$8836$dF01I
                           g$expr*$8837$dF01I
                           g$command*$8838$dF01I)
                         ((case-lambda
                            ((g$t$8839$dF01I)
                             ((case-lambda
                                ((g$ls/false$8840$dF01I)
                                 (if g$ls/false$8840$dF01I
                                   (apply
                                     (case-lambda
                                       ((g$x*$8841$dF01I
                                          g$init*$8842$dF01I
                                          g$step*$8843$dF01I)
                                        (if (g$valid-bound-ids?$7709$dF01I
                                              g$x*$8841$dF01I)
                                          (g$bless$7945$dF01I
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8841$dF01I
                                                    (list
                                                      'if
                                                      g$test$8836$dF01I
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8837$dF01I))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8838$dF01I
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8843$dF01I))))))))
                                              (cons 'loop g$init*$8842$dF01I)))
                                          (g$syntax-violation$8094$dF01I
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8831$dF01I))))
                                     g$ls/false$8840$dF01I)
                                   (g$syntax-violation$8094$dF01I
                                     '#f
                                     '"invalid syntax"
                                     g$t$8839$dF01I))))
                              (g$syntax-dispatch$7982$dF01I
                                g$t$8839$dF01I
                                '#(each (any any any))))))
                          (g$map$5063$dF01I
                            g$bind$8832$dF01I
                            g$binding*$8835$dF01I))))
                      g$ls/false$8834$dF01I)
                    (g$syntax-violation$8094$dF01I
                      '#f
                      '"invalid syntax"
                      g$t$8833$dF01I))))
               (g$syntax-dispatch$7982$dF01I
                 g$t$8833$dF01I
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8831$dF01I)))))
   (g$let*-macro$7965$dF01I
     g$let*-macro$11468$dF01I
     (case-lambda
       ((g$stx$8856$dF01I)
        ((case-lambda
           ((g$t$8857$dF01I)
            ((case-lambda
               ((g$ls/false$8858$dF01I)
                (if (if g$ls/false$8858$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8859$dF01I
                               g$rhs*$8860$dF01I
                               g$b$8861$dF01I
                               g$b*$8862$dF01I)
                             (g$for-all$5061$dF01I
                               g$id?$7704$dF01I
                               g$lhs*$8859$dF01I)))
                          g$ls/false$8858$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8863$dF01I
                         g$rhs*$8864$dF01I
                         g$b$8865$dF01I
                         g$b*$8866$dF01I)
                       (g$bless$7945$dF01I
                         ((letrec ((g$f$8867$dF01I
                                     (case-lambda
                                       ((g$x*$8868$dF01I)
                                        (if (null? g$x*$8868$dF01I)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8865$dF01I
                                                g$b*$8866$dF01I)))
                                          (if (null? (cdr g$x*$8868$dF01I))
                                            (cons
                                              'let
                                              (cons
                                                (list (car g$x*$8868$dF01I))
                                                (cons
                                                  g$b$8865$dF01I
                                                  g$b*$8866$dF01I)))
                                            (list
                                              'let
                                              (list (car g$x*$8868$dF01I))
                                              (g$f$8867$dF01I
                                                (cdr g$x*$8868$dF01I)))))))))
                            g$f$8867$dF01I)
                          (g$map$5063$dF01I
                            list
                            g$lhs*$8863$dF01I
                            g$rhs*$8864$dF01I)))))
                    g$ls/false$8858$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8857$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8857$dF01I
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8856$dF01I))))
   (g$or-macro$7966$dF01I
     g$or-macro$11469$dF01I
     (case-lambda
       ((g$stx$8869$dF01I)
        ((case-lambda
           ((g$t$8870$dF01I)
            ((case-lambda
               ((g$ls/false$8871$dF01I)
                (if g$ls/false$8871$dF01I
                  (apply (case-lambda (() '#f)) g$ls/false$8871$dF01I)
                  ((case-lambda
                     ((g$t$8872$dF01I)
                      ((case-lambda
                         ((g$ls/false$8873$dF01I)
                          (if g$ls/false$8873$dF01I
                            (apply
                              (case-lambda
                                ((g$e$8874$dF01I g$e*$8875$dF01I)
                                 (g$bless$7945$dF01I
                                   ((letrec ((g$f$8876$dF01I
                                               (case-lambda
                                                 ((g$e$8877$dF01I
                                                    g$e*$8878$dF01I)
                                                  (if (null? g$e*$8878$dF01I)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8877$dF01I)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8877$dF01I))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8876$dF01I
                                                          (car g$e*$8878$dF01I)
                                                          (cdr g$e*$8878$dF01I)))))))))
                                      g$f$8876$dF01I)
                                    g$e$8874$dF01I
                                    g$e*$8875$dF01I))))
                              g$ls/false$8873$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$8872$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$8872$dF01I
                         '(_ any . each-any)))))
                   g$t$8870$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8870$dF01I '(_)))))
         g$stx$8869$dF01I))))
   (g$and-macro$7967$dF01I
     g$and-macro$11470$dF01I
     (case-lambda
       ((g$stx$8879$dF01I)
        ((case-lambda
           ((g$t$8880$dF01I)
            ((case-lambda
               ((g$ls/false$8881$dF01I)
                (if g$ls/false$8881$dF01I
                  (apply (case-lambda (() '#t)) g$ls/false$8881$dF01I)
                  ((case-lambda
                     ((g$t$8882$dF01I)
                      ((case-lambda
                         ((g$ls/false$8883$dF01I)
                          (if g$ls/false$8883$dF01I
                            (apply
                              (case-lambda
                                ((g$e$8884$dF01I g$e*$8885$dF01I)
                                 (g$bless$7945$dF01I
                                   ((letrec ((g$f$8886$dF01I
                                               (case-lambda
                                                 ((g$e$8887$dF01I
                                                    g$e*$8888$dF01I)
                                                  (if (null? g$e*$8888$dF01I)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8887$dF01I)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8887$dF01I
                                                        (cons
                                                          (g$f$8886$dF01I
                                                            (car g$e*$8888$dF01I)
                                                            (cdr g$e*$8888$dF01I))
                                                          '(#f)))))))))
                                      g$f$8886$dF01I)
                                    g$e$8884$dF01I
                                    g$e*$8885$dF01I))))
                              g$ls/false$8883$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$8882$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$8882$dF01I
                         '(_ any . each-any)))))
                   g$t$8880$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8880$dF01I '(_)))))
         g$stx$8879$dF01I))))
   (g$cond-macro$7968$dF01I
     g$cond-macro$11471$dF01I
     (case-lambda
       ((g$stx$8889$dF01I)
        ((case-lambda
           ((g$t$8890$dF01I)
            ((case-lambda
               ((g$ls/false$8891$dF01I)
                (if g$ls/false$8891$dF01I
                  (apply
                    (case-lambda
                      ((g$cls$8892$dF01I g$cls*$8893$dF01I)
                       (g$bless$7945$dF01I
                         ((letrec ((g$f$8894$dF01I
                                     (case-lambda
                                       ((g$cls$8895$dF01I g$cls*$8896$dF01I)
                                        (if (null? g$cls*$8896$dF01I)
                                          ((case-lambda
                                             ((g$t$8897$dF01I)
                                              ((case-lambda
                                                 ((g$ls/false$8898$dF01I)
                                                  (if g$ls/false$8898$dF01I
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8899$dF01I
                                                           g$e*$8900$dF01I)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8899$dF01I
                                                             g$e*$8900$dF01I))))
                                                      g$ls/false$8898$dF01I)
                                                    ((case-lambda
                                                       ((g$t$8901$dF01I)
                                                        ((case-lambda
                                                           ((g$ls/false$8902$dF01I)
                                                            (if g$ls/false$8902$dF01I
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8903$dF01I
                                                                     g$p$8904$dF01I)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8903$dF01I))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8904$dF01I
                                                                         '(t))))))
                                                                g$ls/false$8902$dF01I)
                                                              ((case-lambda
                                                                 ((g$t$8905$dF01I)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8906$dF01I)
                                                                      (if g$ls/false$8906$dF01I
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8907$dF01I)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8907$dF01I
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8906$dF01I)
                                                                        ((case-lambda
                                                                           ((g$t$8908$dF01I)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8909$dF01I)
                                                                                (if g$ls/false$8909$dF01I
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8910$dF01I
                                                                                         g$e*$8911$dF01I)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8910$dF01I
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8911$dF01I))))
                                                                                    g$ls/false$8909$dF01I)
                                                                                  ((case-lambda
                                                                                     ((g$t$8912$dF01I)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8913$dF01I)
                                                                                          (if g$ls/false$8913$dF01I
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8094$dF01I
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8889$dF01I)))
                                                                                              g$ls/false$8913$dF01I)
                                                                                            (g$syntax-violation$8094$dF01I
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8912$dF01I))))
                                                                                       (g$syntax-dispatch$7982$dF01I
                                                                                         g$t$8912$dF01I
                                                                                         '_))))
                                                                                   g$t$8908$dF01I))))
                                                                             (g$syntax-dispatch$7982$dF01I
                                                                               g$t$8908$dF01I
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8905$dF01I))))
                                                                   (g$syntax-dispatch$7982$dF01I
                                                                     g$t$8905$dF01I
                                                                     '(any)))))
                                                               g$t$8901$dF01I))))
                                                         (g$syntax-dispatch$7982$dF01I
                                                           g$t$8901$dF01I
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8897$dF01I))))
                                               (g$syntax-dispatch$7982$dF01I
                                                 g$t$8897$dF01I
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8895$dF01I)
                                          ((case-lambda
                                             ((g$t$8914$dF01I)
                                              ((case-lambda
                                                 ((g$ls/false$8915$dF01I)
                                                  (if g$ls/false$8915$dF01I
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8916$dF01I
                                                           g$e*$8917$dF01I)
                                                         (g$syntax-violation$8094$dF01I
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8889$dF01I)))
                                                      g$ls/false$8915$dF01I)
                                                    ((case-lambda
                                                       ((g$t$8918$dF01I)
                                                        ((case-lambda
                                                           ((g$ls/false$8919$dF01I)
                                                            (if g$ls/false$8919$dF01I
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8920$dF01I
                                                                     g$p$8921$dF01I)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8920$dF01I))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8921$dF01I
                                                                         '(t))
                                                                       (g$f$8894$dF01I
                                                                         (car g$cls*$8896$dF01I)
                                                                         (cdr g$cls*$8896$dF01I))))))
                                                                g$ls/false$8919$dF01I)
                                                              ((case-lambda
                                                                 ((g$t$8922$dF01I)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8923$dF01I)
                                                                      (if g$ls/false$8923$dF01I
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8924$dF01I)
                                                                             (list
                                                                               'or
                                                                               g$e$8924$dF01I
                                                                               (g$f$8894$dF01I
                                                                                 (car g$cls*$8896$dF01I)
                                                                                 (cdr g$cls*$8896$dF01I)))))
                                                                          g$ls/false$8923$dF01I)
                                                                        ((case-lambda
                                                                           ((g$t$8925$dF01I)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8926$dF01I)
                                                                                (if g$ls/false$8926$dF01I
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8927$dF01I
                                                                                         g$e*$8928$dF01I)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8927$dF01I
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8928$dF01I)
                                                                                         (g$f$8894$dF01I
                                                                                           (car g$cls*$8896$dF01I)
                                                                                           (cdr g$cls*$8896$dF01I)))))
                                                                                    g$ls/false$8926$dF01I)
                                                                                  ((case-lambda
                                                                                     ((g$t$8929$dF01I)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8930$dF01I)
                                                                                          (if g$ls/false$8930$dF01I
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8094$dF01I
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8889$dF01I)))
                                                                                              g$ls/false$8930$dF01I)
                                                                                            (g$syntax-violation$8094$dF01I
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8929$dF01I))))
                                                                                       (g$syntax-dispatch$7982$dF01I
                                                                                         g$t$8929$dF01I
                                                                                         '_))))
                                                                                   g$t$8925$dF01I))))
                                                                             (g$syntax-dispatch$7982$dF01I
                                                                               g$t$8925$dF01I
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8922$dF01I))))
                                                                   (g$syntax-dispatch$7982$dF01I
                                                                     g$t$8922$dF01I
                                                                     '(any)))))
                                                               g$t$8918$dF01I))))
                                                         (g$syntax-dispatch$7982$dF01I
                                                           g$t$8918$dF01I
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8914$dF01I))))
                                               (g$syntax-dispatch$7982$dF01I
                                                 g$t$8914$dF01I
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8895$dF01I))))))
                            g$f$8894$dF01I)
                          g$cls$8892$dF01I
                          g$cls*$8893$dF01I))))
                    g$ls/false$8891$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8890$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8890$dF01I
               '(_ any . each-any)))))
         g$stx$8889$dF01I))))
   (g$do-include$7969$dF01I
     g$do-include$11472$dF01I
     (case-lambda
       ((g$stx$8931$dF01I g$id$8932$dF01I g$filename$8933$dF01I)
        ((case-lambda
           ((g$filename$8934$dF01I)
            (begin
              (if (not (if (string? g$filename$8934$dF01I)
                         (begin '#f (g$id?$7704$dF01I g$id$8932$dF01I))
                         '#f))
                (g$syntax-violation$8094$dF01I
                  '#f
                  '"invalid syntax"
                  g$stx$8931$dF01I)
                (void))
              (cons
                (g$bless$7945$dF01I 'begin)
                (g$with-input-from-file$6385$dF01I
                  g$filename$8934$dF01I
                  (case-lambda
                    (()
                     ((letrec ((g$f$8935$dF01I
                                 (case-lambda
                                   ((g$ls$8936$dF01I)
                                    ((case-lambda
                                       ((g$x$8937$dF01I)
                                        (if (eof-object? g$x$8937$dF01I)
                                          (reverse g$ls$8936$dF01I)
                                          (g$f$8935$dF01I
                                            (cons
                                              (g$datum->stx$7687$dF01I
                                                g$id$8932$dF01I
                                                g$x$8937$dF01I)
                                              g$ls$8936$dF01I)))))
                                     (read-annotated))))))
                        g$f$8935$dF01I)
                      '()))))))))
         (g$stx->datum$7715$dF01I g$filename$8933$dF01I)))))
   (g$include-macro$7970$dF01I
     g$include-macro$11473$dF01I
     (case-lambda
       ((g$e$8938$dF01I)
        ((case-lambda
           ((g$t$8939$dF01I)
            ((case-lambda
               ((g$ls/false$8940$dF01I)
                (if g$ls/false$8940$dF01I
                  (apply
                    (case-lambda
                      ((g$id$8941$dF01I g$filename$8942$dF01I)
                       (g$do-include$7969$dF01I
                         g$e$8938$dF01I
                         g$id$8941$dF01I
                         g$filename$8942$dF01I)))
                    g$ls/false$8940$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8939$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8939$dF01I '(any any)))))
         g$e$8938$dF01I))))
   (g$include-into-macro$7971$dF01I
     g$include-into-macro$11474$dF01I
     (case-lambda
       ((g$e$8943$dF01I)
        ((case-lambda
           ((g$t$8944$dF01I)
            ((case-lambda
               ((g$ls/false$8945$dF01I)
                (if g$ls/false$8945$dF01I
                  (apply
                    (case-lambda
                      ((g$id$8946$dF01I g$filename$8947$dF01I)
                       (g$do-include$7969$dF01I
                         g$e$8943$dF01I
                         g$id$8946$dF01I
                         g$filename$8947$dF01I)))
                    g$ls/false$8945$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8944$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$8944$dF01I '(_ any any)))))
         g$e$8943$dF01I))))
   (g$syntax-rules-macro$7972$dF01I
     g$syntax-rules-macro$11475$dF01I
     (case-lambda
       ((g$e$8948$dF01I)
        ((case-lambda
           ((g$t$8949$dF01I)
            ((case-lambda
               ((g$ls/false$8950$dF01I)
                (if g$ls/false$8950$dF01I
                  (apply
                    (case-lambda
                      ((g$lits$8951$dF01I g$pat*$8952$dF01I g$tmp*$8953$dF01I)
                       (begin
                         (g$verify-literals$7985$dF01I
                           g$lits$8951$dF01I
                           g$e$8948$dF01I)
                         (g$bless$7945$dF01I
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8951$dF01I
                                   (g$map$5063$dF01I
                                     (case-lambda
                                       ((g$pat$8954$dF01I g$tmp$8955$dF01I)
                                        ((case-lambda
                                           ((g$t$8956$dF01I)
                                            ((case-lambda
                                               ((g$ls/false$8957$dF01I)
                                                (if g$ls/false$8957$dF01I
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$8958$dF01I)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$8958$dF01I)
                                                         (list
                                                           'syntax
                                                           g$tmp$8955$dF01I))))
                                                    g$ls/false$8957$dF01I)
                                                  ((case-lambda
                                                     ((g$t$8959$dF01I)
                                                      ((case-lambda
                                                         ((g$ls/false$8960$dF01I)
                                                          (if g$ls/false$8960$dF01I
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$8094$dF01I
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$8948$dF01I
                                                                   g$pat$8954$dF01I)))
                                                              g$ls/false$8960$dF01I)
                                                            (g$syntax-violation$8094$dF01I
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$8959$dF01I))))
                                                       (g$syntax-dispatch$7982$dF01I
                                                         g$t$8959$dF01I
                                                         '_))))
                                                   g$t$8956$dF01I))))
                                             (g$syntax-dispatch$7982$dF01I
                                               g$t$8956$dF01I
                                               '(_ . any)))))
                                         g$pat$8954$dF01I)))
                                     g$pat*$8952$dF01I
                                     g$tmp*$8953$dF01I)))))))))
                    g$ls/false$8950$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$8949$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$8949$dF01I
               '(_ each-any . #(each (any any)))))))
         g$e$8948$dF01I))))
   (g$quasiquote-macro$7973$dF01I
     g$quasiquote-macro$11476$dF01I
     ((case-lambda
        (()
         (letrec* ((g$datum$8961$dF01I
                     (case-lambda
                       ((g$x$9092$dF01I)
                        (list
                          (g$scheme-stx$7925$dF01I 'quote)
                          (g$mkstx$7692$dF01I g$x$9092$dF01I '() '() '())))))
                   (g$quasicons*$8977$dF01I
                     (case-lambda
                       ((g$x$9088$dF01I g$y$9089$dF01I)
                        ((letrec ((g$f$9090$dF01I
                                    (case-lambda
                                      ((g$x$9091$dF01I)
                                       (if (null? g$x$9091$dF01I)
                                         g$y$9089$dF01I
                                         (g$quasicons$8978$dF01I
                                           (car g$x$9091$dF01I)
                                           (g$f$9090$dF01I
                                             (cdr g$x$9091$dF01I))))))))
                           g$f$9090$dF01I)
                         g$x$9088$dF01I))))
                   (g$quasicons$8978$dF01I
                     (case-lambda
                       ((g$x$9069$dF01I g$y$9070$dF01I)
                        ((case-lambda
                           ((g$t$9071$dF01I)
                            ((case-lambda
                               ((g$ls/false$9072$dF01I)
                                (if g$ls/false$9072$dF01I
                                  (apply
                                    (case-lambda
                                      ((g$dy$9073$dF01I)
                                       ((case-lambda
                                          ((g$t$9074$dF01I)
                                           ((case-lambda
                                              ((g$ls/false$9075$dF01I)
                                               (if g$ls/false$9075$dF01I
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$9076$dF01I)
                                                      (list
                                                        (g$scheme-stx$7925$dF01I
                                                          'quote)
                                                        (cons
                                                          g$dx$9076$dF01I
                                                          g$dy$9073$dF01I))))
                                                   g$ls/false$9075$dF01I)
                                                 ((case-lambda
                                                    ((g$t$9077$dF01I)
                                                     ((case-lambda
                                                        ((g$ls/false$9078$dF01I)
                                                         (if g$ls/false$9078$dF01I
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$9079$dF01I)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9080$dF01I)
                                                                        (if g$ls/false$9080$dF01I
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7925$dF01I
                                                                                   'list)
                                                                                 g$x$9069$dF01I)))
                                                                            g$ls/false$9080$dF01I)
                                                                          ((case-lambda
                                                                             ((g$t$9081$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9082$dF01I)
                                                                                  (if g$ls/false$9082$dF01I
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7925$dF01I
                                                                                             'cons)
                                                                                           g$x$9069$dF01I
                                                                                           g$y$9070$dF01I)))
                                                                                      g$ls/false$9082$dF01I)
                                                                                    (g$syntax-violation$8094$dF01I
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9081$dF01I))))
                                                                               (g$syntax-dispatch$7982$dF01I
                                                                                 g$t$9081$dF01I
                                                                                 '_))))
                                                                           g$t$9079$dF01I))))
                                                                     (g$syntax-dispatch$7982$dF01I
                                                                       g$t$9079$dF01I
                                                                       '()))))
                                                                 g$dy$9073$dF01I)))
                                                             g$ls/false$9078$dF01I)
                                                           (g$syntax-violation$8094$dF01I
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$9077$dF01I))))
                                                      (g$syntax-dispatch$7982$dF01I
                                                        g$t$9077$dF01I
                                                        '_))))
                                                  g$t$9074$dF01I))))
                                            (g$syntax-dispatch$7982$dF01I
                                              g$t$9074$dF01I
                                              '(#(scheme-id quote) any)))))
                                        g$x$9069$dF01I)))
                                    g$ls/false$9072$dF01I)
                                  ((case-lambda
                                     ((g$t$9083$dF01I)
                                      ((case-lambda
                                         ((g$ls/false$9084$dF01I)
                                          (if g$ls/false$9084$dF01I
                                            (apply
                                              (case-lambda
                                                ((g$stuff$9085$dF01I)
                                                 (g$cons*$5065$dF01I
                                                   (g$scheme-stx$7925$dF01I
                                                     'list)
                                                   g$x$9069$dF01I
                                                   g$stuff$9085$dF01I)))
                                              g$ls/false$9084$dF01I)
                                            ((case-lambda
                                               ((g$t$9086$dF01I)
                                                ((case-lambda
                                                   ((g$ls/false$9087$dF01I)
                                                    (if g$ls/false$9087$dF01I
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7925$dF01I
                                                               'cons)
                                                             g$x$9069$dF01I
                                                             g$y$9070$dF01I)))
                                                        g$ls/false$9087$dF01I)
                                                      (g$syntax-violation$8094$dF01I
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$9086$dF01I))))
                                                 (g$syntax-dispatch$7982$dF01I
                                                   g$t$9086$dF01I
                                                   '_))))
                                             g$t$9083$dF01I))))
                                       (g$syntax-dispatch$7982$dF01I
                                         g$t$9083$dF01I
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$9071$dF01I))))
                             (g$syntax-dispatch$7982$dF01I
                               g$t$9071$dF01I
                               '(#(scheme-id quote) any)))))
                         g$y$9070$dF01I))))
                   (g$quasiappend$8979$dF01I
                     (case-lambda
                       ((g$x$9056$dF01I g$y$9057$dF01I)
                        ((case-lambda
                           ((g$ls$9058$dF01I)
                            (if (null? g$ls$9058$dF01I)
                              (list (g$scheme-stx$7925$dF01I 'quote) '())
                              (if (null? (cdr g$ls$9058$dF01I))
                                (car g$ls$9058$dF01I)
                                (g$cons*$5065$dF01I
                                  (g$scheme-stx$7925$dF01I 'append)
                                  g$ls$9058$dF01I)))))
                         ((letrec ((g$f$9059$dF01I
                                     (case-lambda
                                       ((g$x$9060$dF01I)
                                        (if (null? g$x$9060$dF01I)
                                          ((case-lambda
                                             ((g$t$9061$dF01I)
                                              ((case-lambda
                                                 ((g$ls/false$9062$dF01I)
                                                  (if g$ls/false$9062$dF01I
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$9062$dF01I)
                                                    ((case-lambda
                                                       ((g$t$9063$dF01I)
                                                        ((case-lambda
                                                           ((g$ls/false$9064$dF01I)
                                                            (if g$ls/false$9064$dF01I
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$9057$dF01I)))
                                                                g$ls/false$9064$dF01I)
                                                              (g$syntax-violation$8094$dF01I
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9063$dF01I))))
                                                         (g$syntax-dispatch$7982$dF01I
                                                           g$t$9063$dF01I
                                                           '_))))
                                                     g$t$9061$dF01I))))
                                               (g$syntax-dispatch$7982$dF01I
                                                 g$t$9061$dF01I
                                                 '(#(scheme-id quote) ())))))
                                           g$y$9057$dF01I)
                                          ((case-lambda
                                             ((g$t$9065$dF01I)
                                              ((case-lambda
                                                 ((g$ls/false$9066$dF01I)
                                                  (if g$ls/false$9066$dF01I
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$9059$dF01I
                                                           (cdr g$x$9060$dF01I))))
                                                      g$ls/false$9066$dF01I)
                                                    ((case-lambda
                                                       ((g$t$9067$dF01I)
                                                        ((case-lambda
                                                           ((g$ls/false$9068$dF01I)
                                                            (if g$ls/false$9068$dF01I
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$9060$dF01I)
                                                                     (g$f$9059$dF01I
                                                                       (cdr g$x$9060$dF01I)))))
                                                                g$ls/false$9068$dF01I)
                                                              (g$syntax-violation$8094$dF01I
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9067$dF01I))))
                                                         (g$syntax-dispatch$7982$dF01I
                                                           g$t$9067$dF01I
                                                           '_))))
                                                     g$t$9065$dF01I))))
                                               (g$syntax-dispatch$7982$dF01I
                                                 g$t$9065$dF01I
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$9060$dF01I)))))))
                            g$f$9059$dF01I)
                          g$x$9056$dF01I)))))
                   (g$quasivector$8980$dF01I
                     (case-lambda
                       ((g$x$9031$dF01I)
                        ((case-lambda
                           ((g$pat-x$9032$dF01I)
                            ((case-lambda
                               ((g$t$9033$dF01I)
                                ((case-lambda
                                   ((g$ls/false$9034$dF01I)
                                    (if g$ls/false$9034$dF01I
                                      (apply
                                        (case-lambda
                                          ((g$x*$9035$dF01I)
                                           (list
                                             (g$scheme-stx$7925$dF01I 'quote)
                                             (list->vector g$x*$9035$dF01I))))
                                        g$ls/false$9034$dF01I)
                                      ((case-lambda
                                         ((g$t$9036$dF01I)
                                          ((case-lambda
                                             ((g$ls/false$9037$dF01I)
                                              (if g$ls/false$9037$dF01I
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$9038$dF01I
                                                                 (case-lambda
                                                                   ((g$x$9039$dF01I
                                                                      g$k$9040$dF01I)
                                                                    ((case-lambda
                                                                       ((g$t$9041$dF01I)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9042$dF01I)
                                                                            (if g$ls/false$9042$dF01I
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$9043$dF01I)
                                                                                   (g$k$9040$dF01I
                                                                                     (g$map$5063$dF01I
                                                                                       (case-lambda
                                                                                         ((g$x$9044$dF01I)
                                                                                          (list
                                                                                            (g$scheme-stx$7925$dF01I
                                                                                              'quote)
                                                                                            g$x$9044$dF01I)))
                                                                                       g$x*$9043$dF01I))))
                                                                                g$ls/false$9042$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$t$9045$dF01I)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$9046$dF01I)
                                                                                      (if g$ls/false$9046$dF01I
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$9047$dF01I)
                                                                                             (g$k$9040$dF01I
                                                                                               g$x*$9047$dF01I)))
                                                                                          g$ls/false$9046$dF01I)
                                                                                        ((case-lambda
                                                                                           ((g$t$9048$dF01I)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$9049$dF01I)
                                                                                                (if g$ls/false$9049$dF01I
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$9050$dF01I
                                                                                                         g$y$9051$dF01I)
                                                                                                       (g$f$9038$dF01I
                                                                                                         g$y$9051$dF01I
                                                                                                         (case-lambda
                                                                                                           ((g$ls$9052$dF01I)
                                                                                                            (g$k$9040$dF01I
                                                                                                              (cons
                                                                                                                g$x$9050$dF01I
                                                                                                                g$ls$9052$dF01I)))))))
                                                                                                    g$ls/false$9049$dF01I)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$9053$dF01I)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$9054$dF01I)
                                                                                                          (if g$ls/false$9054$dF01I
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7925$dF01I
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$9032$dF01I)))
                                                                                                              g$ls/false$9054$dF01I)
                                                                                                            (g$syntax-violation$8094$dF01I
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$9053$dF01I))))
                                                                                                       (g$syntax-dispatch$7982$dF01I
                                                                                                         g$t$9053$dF01I
                                                                                                         '_))))
                                                                                                   g$t$9048$dF01I))))
                                                                                             (g$syntax-dispatch$7982$dF01I
                                                                                               g$t$9048$dF01I
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$9045$dF01I))))
                                                                                   (g$syntax-dispatch$7982$dF01I
                                                                                     g$t$9045$dF01I
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$9041$dF01I))))
                                                                         (g$syntax-dispatch$7982$dF01I
                                                                           g$t$9041$dF01I
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$9039$dF01I)))))
                                                        g$f$9038$dF01I)
                                                      g$x$9031$dF01I
                                                      (case-lambda
                                                        ((g$ls$9055$dF01I)
                                                         (g$cons*$5065$dF01I
                                                           (g$scheme-stx$7925$dF01I
                                                             'vector)
                                                           g$ls$9055$dF01I))))))
                                                  g$ls/false$9037$dF01I)
                                                (g$syntax-violation$8094$dF01I
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$9036$dF01I))))
                                           (g$syntax-dispatch$7982$dF01I
                                             g$t$9036$dF01I
                                             '_))))
                                       g$t$9033$dF01I))))
                                 (g$syntax-dispatch$7982$dF01I
                                   g$t$9033$dF01I
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$9032$dF01I)))
                         g$x$9031$dF01I))))
                   (g$vquasi$8981$dF01I
                     (case-lambda
                       ((g$p$9014$dF01I g$lev$9015$dF01I)
                        ((case-lambda
                           ((g$t$9016$dF01I)
                            ((case-lambda
                               ((g$ls/false$9017$dF01I)
                                (if g$ls/false$9017$dF01I
                                  (apply
                                    (case-lambda
                                      ((g$p$9018$dF01I g$q$9019$dF01I)
                                       ((case-lambda
                                          ((g$t$9020$dF01I)
                                           ((case-lambda
                                              ((g$ls/false$9021$dF01I)
                                               (if g$ls/false$9021$dF01I
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9022$dF01I)
                                                      (if (= g$lev$9015$dF01I
                                                             '0)
                                                        (g$quasicons*$8977$dF01I
                                                          g$p$9022$dF01I
                                                          (g$vquasi$8981$dF01I
                                                            g$q$9019$dF01I
                                                            g$lev$9015$dF01I))
                                                        (g$quasicons$8978$dF01I
                                                          (g$quasicons$8978$dF01I
                                                            (g$datum$8961$dF01I
                                                              'unquote)
                                                            (g$quasi$8982$dF01I
                                                              g$p$9022$dF01I
                                                              (- g$lev$9015$dF01I
                                                                 '1)))
                                                          (g$vquasi$8981$dF01I
                                                            g$q$9019$dF01I
                                                            g$lev$9015$dF01I)))))
                                                   g$ls/false$9021$dF01I)
                                                 ((case-lambda
                                                    ((g$t$9023$dF01I)
                                                     ((case-lambda
                                                        ((g$ls/false$9024$dF01I)
                                                         (if g$ls/false$9024$dF01I
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$9025$dF01I)
                                                                (if (= g$lev$9015$dF01I
                                                                       '0)
                                                                  (g$quasiappend$8979$dF01I
                                                                    g$p$9025$dF01I
                                                                    (g$vquasi$8981$dF01I
                                                                      g$q$9019$dF01I
                                                                      g$lev$9015$dF01I))
                                                                  (g$quasicons$8978$dF01I
                                                                    (g$quasicons$8978$dF01I
                                                                      (g$datum$8961$dF01I
                                                                        'unquote-splicing)
                                                                      (g$quasi$8982$dF01I
                                                                        g$p$9025$dF01I
                                                                        (- g$lev$9015$dF01I
                                                                           '1)))
                                                                    (g$vquasi$8981$dF01I
                                                                      g$q$9019$dF01I
                                                                      g$lev$9015$dF01I)))))
                                                             g$ls/false$9024$dF01I)
                                                           ((case-lambda
                                                              ((g$t$9026$dF01I)
                                                               ((case-lambda
                                                                  ((g$ls/false$9027$dF01I)
                                                                   (if g$ls/false$9027$dF01I
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$9028$dF01I)
                                                                          (g$quasicons$8978$dF01I
                                                                            (g$quasi$8982$dF01I
                                                                              g$p$9028$dF01I
                                                                              g$lev$9015$dF01I)
                                                                            (g$vquasi$8981$dF01I
                                                                              g$q$9019$dF01I
                                                                              g$lev$9015$dF01I))))
                                                                       g$ls/false$9027$dF01I)
                                                                     (g$syntax-violation$8094$dF01I
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$9026$dF01I))))
                                                                (g$syntax-dispatch$7982$dF01I
                                                                  g$t$9026$dF01I
                                                                  'any))))
                                                            g$t$9023$dF01I))))
                                                      (g$syntax-dispatch$7982$dF01I
                                                        g$t$9023$dF01I
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$9020$dF01I))))
                                            (g$syntax-dispatch$7982$dF01I
                                              g$t$9020$dF01I
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$9018$dF01I)))
                                    g$ls/false$9017$dF01I)
                                  ((case-lambda
                                     ((g$t$9029$dF01I)
                                      ((case-lambda
                                         ((g$ls/false$9030$dF01I)
                                          (if g$ls/false$9030$dF01I
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7925$dF01I
                                                     'quote)
                                                   '())))
                                              g$ls/false$9030$dF01I)
                                            (g$syntax-violation$8094$dF01I
                                              '#f
                                              '"invalid syntax"
                                              g$t$9029$dF01I))))
                                       (g$syntax-dispatch$7982$dF01I
                                         g$t$9029$dF01I
                                         '()))))
                                   g$t$9016$dF01I))))
                             (g$syntax-dispatch$7982$dF01I
                               g$t$9016$dF01I
                               '(any . any)))))
                         g$p$9014$dF01I))))
                   (g$quasi$8982$dF01I
                     (case-lambda
                       ((g$p$8987$dF01I g$lev$8988$dF01I)
                        ((case-lambda
                           ((g$t$8989$dF01I)
                            ((case-lambda
                               ((g$ls/false$8990$dF01I)
                                (if g$ls/false$8990$dF01I
                                  (apply
                                    (case-lambda
                                      ((g$p$8991$dF01I)
                                       (if (= g$lev$8988$dF01I '0)
                                         g$p$8991$dF01I
                                         (g$quasicons$8978$dF01I
                                           (g$datum$8961$dF01I 'unquote)
                                           (g$quasi$8982$dF01I
                                             (list g$p$8991$dF01I)
                                             (- g$lev$8988$dF01I '1))))))
                                    g$ls/false$8990$dF01I)
                                  ((case-lambda
                                     ((g$t$8992$dF01I)
                                      ((case-lambda
                                         ((g$ls/false$8993$dF01I)
                                          (if g$ls/false$8993$dF01I
                                            (apply
                                              (case-lambda
                                                ((g$p$8994$dF01I g$q$8995$dF01I)
                                                 (if (= g$lev$8988$dF01I '0)
                                                   (g$quasicons*$8977$dF01I
                                                     g$p$8994$dF01I
                                                     (g$quasi$8982$dF01I
                                                       g$q$8995$dF01I
                                                       g$lev$8988$dF01I))
                                                   (g$quasicons$8978$dF01I
                                                     (g$quasicons$8978$dF01I
                                                       (g$datum$8961$dF01I
                                                         'unquote)
                                                       (g$quasi$8982$dF01I
                                                         g$p$8994$dF01I
                                                         (- g$lev$8988$dF01I
                                                            '1)))
                                                     (g$quasi$8982$dF01I
                                                       g$q$8995$dF01I
                                                       g$lev$8988$dF01I)))))
                                              g$ls/false$8993$dF01I)
                                            ((case-lambda
                                               ((g$t$8996$dF01I)
                                                ((case-lambda
                                                   ((g$ls/false$8997$dF01I)
                                                    (if g$ls/false$8997$dF01I
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8998$dF01I
                                                             g$q$8999$dF01I)
                                                           (if (= g$lev$8988$dF01I
                                                                  '0)
                                                             (g$quasiappend$8979$dF01I
                                                               g$p$8998$dF01I
                                                               (g$quasi$8982$dF01I
                                                                 g$q$8999$dF01I
                                                                 g$lev$8988$dF01I))
                                                             (g$quasicons$8978$dF01I
                                                               (g$quasicons$8978$dF01I
                                                                 (g$datum$8961$dF01I
                                                                   'unquote-splicing)
                                                                 (g$quasi$8982$dF01I
                                                                   g$p$8998$dF01I
                                                                   (- g$lev$8988$dF01I
                                                                      '1)))
                                                               (g$quasi$8982$dF01I
                                                                 g$q$8999$dF01I
                                                                 g$lev$8988$dF01I)))))
                                                        g$ls/false$8997$dF01I)
                                                      ((case-lambda
                                                         ((g$t$9000$dF01I)
                                                          ((case-lambda
                                                             ((g$ls/false$9001$dF01I)
                                                              (if g$ls/false$9001$dF01I
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$9002$dF01I)
                                                                     (g$quasicons$8978$dF01I
                                                                       (g$datum$8961$dF01I
                                                                         'quasiquote)
                                                                       (g$quasi$8982$dF01I
                                                                         (list
                                                                           g$p$9002$dF01I)
                                                                         (+ g$lev$8988$dF01I
                                                                            '1)))))
                                                                  g$ls/false$9001$dF01I)
                                                                ((case-lambda
                                                                   ((g$t$9003$dF01I)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9004$dF01I)
                                                                        (if g$ls/false$9004$dF01I
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$9005$dF01I
                                                                                 g$q$9006$dF01I)
                                                                               (g$quasicons$8978$dF01I
                                                                                 (g$quasi$8982$dF01I
                                                                                   g$p$9005$dF01I
                                                                                   g$lev$8988$dF01I)
                                                                                 (g$quasi$8982$dF01I
                                                                                   g$q$9006$dF01I
                                                                                   g$lev$8988$dF01I))))
                                                                            g$ls/false$9004$dF01I)
                                                                          ((case-lambda
                                                                             ((g$t$9007$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9008$dF01I)
                                                                                  (if (if g$ls/false$9008$dF01I
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$9009$dF01I)
                                                                                               (not (g$stx?$7676$dF01I
                                                                                                      g$x$9009$dF01I))))
                                                                                            g$ls/false$9008$dF01I))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$9010$dF01I)
                                                                                         (g$quasivector$8980$dF01I
                                                                                           (g$vquasi$8981$dF01I
                                                                                             g$x$9010$dF01I
                                                                                             g$lev$8988$dF01I))))
                                                                                      g$ls/false$9008$dF01I)
                                                                                    ((case-lambda
                                                                                       ((g$t$9011$dF01I)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9012$dF01I)
                                                                                            (if g$ls/false$9012$dF01I
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9013$dF01I)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7925$dF01I
                                                                                                       'quote)
                                                                                                     g$p$9013$dF01I)))
                                                                                                g$ls/false$9012$dF01I)
                                                                                              (g$syntax-violation$8094$dF01I
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9011$dF01I))))
                                                                                         (g$syntax-dispatch$7982$dF01I
                                                                                           g$t$9011$dF01I
                                                                                           'any))))
                                                                                     g$t$9007$dF01I))))
                                                                               (g$syntax-dispatch$7982$dF01I
                                                                                 g$t$9007$dF01I
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9003$dF01I))))
                                                                     (g$syntax-dispatch$7982$dF01I
                                                                       g$t$9003$dF01I
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9000$dF01I))))
                                                           (g$syntax-dispatch$7982$dF01I
                                                             g$t$9000$dF01I
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8996$dF01I))))
                                                 (g$syntax-dispatch$7982$dF01I
                                                   g$t$8996$dF01I
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8992$dF01I))))
                                       (g$syntax-dispatch$7982$dF01I
                                         g$t$8992$dF01I
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8989$dF01I))))
                             (g$syntax-dispatch$7982$dF01I
                               g$t$8989$dF01I
                               '(#(scheme-id unquote) any)))))
                         g$p$8987$dF01I)))))
           (case-lambda
             ((g$x$8983$dF01I)
              ((case-lambda
                 ((g$t$8984$dF01I)
                  ((case-lambda
                     ((g$ls/false$8985$dF01I)
                      (if g$ls/false$8985$dF01I
                        (apply
                          (case-lambda
                            ((g$e$8986$dF01I)
                             (g$quasi$8982$dF01I g$e$8986$dF01I '0)))
                          g$ls/false$8985$dF01I)
                        (g$syntax-violation$8094$dF01I
                          '#f
                          '"invalid syntax"
                          g$t$8984$dF01I))))
                   (g$syntax-dispatch$7982$dF01I g$t$8984$dF01I '(_ any)))))
               g$x$8983$dF01I))))))))
   (g$quasisyntax-macro$7974$dF01I
     g$quasisyntax-macro$11477$dF01I
     ((case-lambda
        (()
         (letrec* ((g$quasi$9093$dF01I
                     (case-lambda
                       ((g$p$9107$dF01I g$lev$9108$dF01I)
                        ((case-lambda
                           ((g$t$9109$dF01I)
                            ((case-lambda
                               ((g$ls/false$9110$dF01I)
                                (if g$ls/false$9110$dF01I
                                  (apply
                                    (case-lambda
                                      ((g$p$9111$dF01I)
                                       (if (= g$lev$9108$dF01I '0)
                                         ((case-lambda
                                            ((g$g$9112$dF01I)
                                             (values
                                               (list g$g$9112$dF01I)
                                               (list g$p$9111$dF01I)
                                               g$g$9112$dF01I)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$9093$dF01I
                                                g$p$9111$dF01I
                                                (- g$lev$9108$dF01I '1))))
                                           (case-lambda
                                             ((g$lhs*$9116$dF01I
                                                g$rhs*$9117$dF01I
                                                g$p$9118$dF01I)
                                              ((case-lambda
                                                 ((g$p$9119$dF01I
                                                    g$rhs*$9120$dF01I
                                                    g$lhs*$9121$dF01I)
                                                  (values
                                                    g$lhs*$9121$dF01I
                                                    g$rhs*$9120$dF01I
                                                    (list
                                                      'unsyntax
                                                      g$p$9119$dF01I))))
                                               g$p$9118$dF01I
                                               g$rhs*$9117$dF01I
                                               g$lhs*$9116$dF01I)))))))
                                    g$ls/false$9110$dF01I)
                                  ((case-lambda
                                     ((g$t$9122$dF01I)
                                      ((case-lambda
                                         ((g$ls/false$9123$dF01I)
                                          (if (if g$ls/false$9123$dF01I
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$9108$dF01I '0)))
                                                    g$ls/false$9123$dF01I))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$8094$dF01I
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$9107$dF01I)))
                                              g$ls/false$9123$dF01I)
                                            ((case-lambda
                                               ((g$t$9124$dF01I)
                                                ((case-lambda
                                                   ((g$ls/false$9125$dF01I)
                                                    (if g$ls/false$9125$dF01I
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$9126$dF01I
                                                             g$q$9127$dF01I)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$9093$dF01I
                                                                  g$q$9127$dF01I
                                                                  g$lev$9108$dF01I)))
                                                             (case-lambda
                                                               ((g$lhs*$9131$dF01I
                                                                  g$rhs*$9132$dF01I
                                                                  g$q$9133$dF01I)
                                                                ((case-lambda
                                                                   ((g$q$9134$dF01I
                                                                      g$rhs*$9135$dF01I
                                                                      g$lhs*$9136$dF01I)
                                                                    (if (= g$lev$9108$dF01I
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$9137$dF01I)
                                                                          (values
                                                                            (append
                                                                              g$g*$9137$dF01I
                                                                              g$lhs*$9136$dF01I)
                                                                            (append
                                                                              g$p*$9126$dF01I
                                                                              g$rhs*$9135$dF01I)
                                                                            (append
                                                                              g$g*$9137$dF01I
                                                                              g$q$9134$dF01I))))
                                                                       (g$map$5063$dF01I
                                                                         (case-lambda
                                                                           ((g$x$9138$dF01I)
                                                                            (gensym)))
                                                                         g$p*$9126$dF01I))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$9093$dF01I
                                                                             g$p*$9126$dF01I
                                                                             (- g$lev$9108$dF01I
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$9142$dF01I
                                                                             g$rhs2*$9143$dF01I
                                                                             g$p*$9144$dF01I)
                                                                           ((case-lambda
                                                                              ((g$p*$9145$dF01I
                                                                                 g$rhs2*$9146$dF01I
                                                                                 g$lhs2*$9147$dF01I)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$9147$dF01I
                                                                                   g$lhs*$9136$dF01I)
                                                                                 (append
                                                                                   g$rhs2*$9146$dF01I
                                                                                   g$rhs*$9135$dF01I)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$9145$dF01I)
                                                                                   g$q$9134$dF01I))))
                                                                            g$p*$9144$dF01I
                                                                            g$rhs2*$9143$dF01I
                                                                            g$lhs2*$9142$dF01I)))))))
                                                                 g$q$9133$dF01I
                                                                 g$rhs*$9132$dF01I
                                                                 g$lhs*$9131$dF01I))))))
                                                        g$ls/false$9125$dF01I)
                                                      ((case-lambda
                                                         ((g$t$9148$dF01I)
                                                          ((case-lambda
                                                             ((g$ls/false$9149$dF01I)
                                                              (if g$ls/false$9149$dF01I
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$9150$dF01I
                                                                       g$q$9151$dF01I)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$9093$dF01I
                                                                            g$q$9151$dF01I
                                                                            g$lev$9108$dF01I)))
                                                                       (case-lambda
                                                                         ((g$lhs*$9155$dF01I
                                                                            g$rhs*$9156$dF01I
                                                                            g$q$9157$dF01I)
                                                                          ((case-lambda
                                                                             ((g$q$9158$dF01I
                                                                                g$rhs*$9159$dF01I
                                                                                g$lhs*$9160$dF01I)
                                                                              (if (= g$lev$9108$dF01I
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$9161$dF01I)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5063$dF01I
                                                                                          (case-lambda
                                                                                            ((g$g$9162$dF01I)
                                                                                             (cons
                                                                                               g$g$9162$dF01I
                                                                                               '(...))))
                                                                                          g$g*$9161$dF01I)
                                                                                        g$lhs*$9160$dF01I)
                                                                                      (append
                                                                                        g$p*$9150$dF01I
                                                                                        g$rhs*$9159$dF01I)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5063$dF01I
                                                                                            (case-lambda
                                                                                              ((g$g$9163$dF01I)
                                                                                               (cons
                                                                                                 g$g$9163$dF01I
                                                                                                 '(...))))
                                                                                            g$g*$9161$dF01I))
                                                                                        g$q$9158$dF01I))))
                                                                                 (g$map$5063$dF01I
                                                                                   (case-lambda
                                                                                     ((g$x$9164$dF01I)
                                                                                      (gensym)))
                                                                                   g$p*$9150$dF01I))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$9093$dF01I
                                                                                       g$p*$9150$dF01I
                                                                                       (- g$lev$9108$dF01I
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$9168$dF01I
                                                                                       g$rhs2*$9169$dF01I
                                                                                       g$p*$9170$dF01I)
                                                                                     ((case-lambda
                                                                                        ((g$p*$9171$dF01I
                                                                                           g$rhs2*$9172$dF01I
                                                                                           g$lhs2*$9173$dF01I)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$9173$dF01I
                                                                                             g$lhs*$9160$dF01I)
                                                                                           (append
                                                                                             g$rhs2*$9172$dF01I
                                                                                             g$rhs*$9159$dF01I)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$9171$dF01I)
                                                                                             g$q$9158$dF01I))))
                                                                                      g$p*$9170$dF01I
                                                                                      g$rhs2*$9169$dF01I
                                                                                      g$lhs2*$9168$dF01I)))))))
                                                                           g$q$9157$dF01I
                                                                           g$rhs*$9156$dF01I
                                                                           g$lhs*$9155$dF01I))))))
                                                                  g$ls/false$9149$dF01I)
                                                                ((case-lambda
                                                                   ((g$t$9174$dF01I)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9175$dF01I)
                                                                        (if (if g$ls/false$9175$dF01I
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$9108$dF01I
                                                                                        '0)))
                                                                                  g$ls/false$9175$dF01I))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$8094$dF01I
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$9107$dF01I)))
                                                                            g$ls/false$9175$dF01I)
                                                                          ((case-lambda
                                                                             ((g$t$9176$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9177$dF01I)
                                                                                  (if g$ls/false$9177$dF01I
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$9178$dF01I)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$9093$dF01I
                                                                                                g$p$9178$dF01I
                                                                                                (+ g$lev$9108$dF01I
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$9182$dF01I
                                                                                                g$rhs*$9183$dF01I
                                                                                                g$p$9184$dF01I)
                                                                                              ((case-lambda
                                                                                                 ((g$p$9185$dF01I
                                                                                                    g$rhs*$9186$dF01I
                                                                                                    g$lhs*$9187$dF01I)
                                                                                                  (values
                                                                                                    g$lhs*$9187$dF01I
                                                                                                    g$rhs*$9186$dF01I
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$9185$dF01I))))
                                                                                               g$p$9184$dF01I
                                                                                               g$rhs*$9183$dF01I
                                                                                               g$lhs*$9182$dF01I))))))
                                                                                      g$ls/false$9177$dF01I)
                                                                                    ((case-lambda
                                                                                       ((g$t$9188$dF01I)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9189$dF01I)
                                                                                            (if g$ls/false$9189$dF01I
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9190$dF01I
                                                                                                     g$q$9191$dF01I)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$9093$dF01I
                                                                                                          g$p$9190$dF01I
                                                                                                          g$lev$9108$dF01I)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$9198$dF01I
                                                                                                          g$rhs*$9199$dF01I
                                                                                                          g$p$9200$dF01I)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$9093$dF01I
                                                                                                               g$q$9191$dF01I
                                                                                                               g$lev$9108$dF01I)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$9201$dF01I
                                                                                                               g$rhs2*$9202$dF01I
                                                                                                               g$q$9203$dF01I)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$9204$dF01I
                                                                                                                   g$rhs2*$9205$dF01I
                                                                                                                   g$lhs2*$9206$dF01I
                                                                                                                   g$p$9207$dF01I
                                                                                                                   g$rhs*$9208$dF01I
                                                                                                                   g$lhs*$9209$dF01I)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$9206$dF01I
                                                                                                                     g$lhs*$9209$dF01I)
                                                                                                                   (append
                                                                                                                     g$rhs2*$9205$dF01I
                                                                                                                     g$rhs*$9208$dF01I)
                                                                                                                   (cons
                                                                                                                     g$p$9207$dF01I
                                                                                                                     g$q$9204$dF01I))))
                                                                                                              g$q$9203$dF01I
                                                                                                              g$rhs2*$9202$dF01I
                                                                                                              g$lhs2*$9201$dF01I
                                                                                                              g$p$9200$dF01I
                                                                                                              g$rhs*$9199$dF01I
                                                                                                              g$lhs*$9198$dF01I)))))))))
                                                                                                g$ls/false$9189$dF01I)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9210$dF01I)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9211$dF01I)
                                                                                                      (if g$ls/false$9211$dF01I
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$9212$dF01I)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$9093$dF01I
                                                                                                                    g$x*$9212$dF01I
                                                                                                                    g$lev$9108$dF01I)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$9216$dF01I
                                                                                                                    g$rhs*$9217$dF01I
                                                                                                                    g$x*$9218$dF01I)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$9219$dF01I
                                                                                                                        g$rhs*$9220$dF01I
                                                                                                                        g$lhs*$9221$dF01I)
                                                                                                                      (values
                                                                                                                        g$lhs*$9221$dF01I
                                                                                                                        g$rhs*$9220$dF01I
                                                                                                                        (list->vector
                                                                                                                          g$x*$9219$dF01I))))
                                                                                                                   g$x*$9218$dF01I
                                                                                                                   g$rhs*$9217$dF01I
                                                                                                                   g$lhs*$9216$dF01I))))))
                                                                                                          g$ls/false$9211$dF01I)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9222$dF01I)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9223$dF01I)
                                                                                                                (if g$ls/false$9223$dF01I
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$9107$dF01I)))
                                                                                                                    g$ls/false$9223$dF01I)
                                                                                                                  (g$syntax-violation$8094$dF01I
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9222$dF01I))))
                                                                                                             (g$syntax-dispatch$7982$dF01I
                                                                                                               g$t$9222$dF01I
                                                                                                               '_))))
                                                                                                         g$t$9210$dF01I))))
                                                                                                   (g$syntax-dispatch$7982$dF01I
                                                                                                     g$t$9210$dF01I
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$9188$dF01I))))
                                                                                         (g$syntax-dispatch$7982$dF01I
                                                                                           g$t$9188$dF01I
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$9176$dF01I))))
                                                                               (g$syntax-dispatch$7982$dF01I
                                                                                 g$t$9176$dF01I
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$9174$dF01I))))
                                                                     (g$syntax-dispatch$7982$dF01I
                                                                       g$t$9174$dF01I
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$9148$dF01I))))
                                                           (g$syntax-dispatch$7982$dF01I
                                                             g$t$9148$dF01I
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$9124$dF01I))))
                                                 (g$syntax-dispatch$7982$dF01I
                                                   g$t$9124$dF01I
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9122$dF01I))))
                                       (g$syntax-dispatch$7982$dF01I
                                         g$t$9122$dF01I
                                         '#(scheme-id unsyntax)))))
                                   g$t$9109$dF01I))))
                             (g$syntax-dispatch$7982$dF01I
                               g$t$9109$dF01I
                               '(#(scheme-id unsyntax) any)))))
                         g$p$9107$dF01I)))))
           (case-lambda
             ((g$x$9094$dF01I)
              ((case-lambda
                 ((g$t$9095$dF01I)
                  ((case-lambda
                     ((g$ls/false$9096$dF01I)
                      (if g$ls/false$9096$dF01I
                        (apply
                          (case-lambda
                            ((g$e$9097$dF01I)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$9093$dF01I g$e$9097$dF01I '0)))
                               (case-lambda
                                 ((g$lhs*$9101$dF01I
                                    g$rhs*$9102$dF01I
                                    g$v$9103$dF01I)
                                  ((case-lambda
                                     ((g$v$9104$dF01I
                                        g$rhs*$9105$dF01I
                                        g$lhs*$9106$dF01I)
                                      (g$bless$7945$dF01I
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$9105$dF01I)
                                          '()
                                          (list
                                            g$lhs*$9106$dF01I
                                            (list 'syntax g$v$9104$dF01I))))))
                                   g$v$9103$dF01I
                                   g$rhs*$9102$dF01I
                                   g$lhs*$9101$dF01I))))))
                          g$ls/false$9096$dF01I)
                        (g$syntax-violation$8094$dF01I
                          '#f
                          '"invalid syntax"
                          g$t$9095$dF01I))))
                   (g$syntax-dispatch$7982$dF01I g$t$9095$dF01I '(_ any)))))
               g$x$9094$dF01I))))))))
   (g$define-struct-macro$7975$dF01I
     g$define-struct-macro$11478$dF01I
     (case-lambda
       ((g$stx$9224$dF01I)
        (g$syntax-violation$8094$dF01I
          '#f
          '"define-struct not supported"
          g$stx$9224$dF01I))))
   (g$define-record-type-macro$7976$dF01I
     g$define-record-type-macro$11479$dF01I
     (case-lambda
       ((g$x$9225$dF01I)
        (letrec* ((g$id$9226$dF01I
                    (case-lambda
                      ((g$ctxt$9478$dF01I . g$str*$9479$dF01I)
                       (g$datum->syntax$8096$dF01I
                         g$ctxt$9478$dF01I
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5063$dF01I
                               (case-lambda
                                 ((g$x$9480$dF01I)
                                  (if (symbol? g$x$9480$dF01I)
                                    (symbol->string g$x$9480$dF01I)
                                    (if (string? g$x$9480$dF01I)
                                      g$x$9480$dF01I
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$9479$dF01I)))))))
                  (g$get-record-name$9227$dF01I
                    (case-lambda
                      ((g$spec$9469$dF01I)
                       ((case-lambda
                          ((g$t$9470$dF01I)
                           ((case-lambda
                              ((g$ls/false$9471$dF01I)
                               (if g$ls/false$9471$dF01I
                                 (apply
                                   (case-lambda
                                     ((g$foo$9472$dF01I
                                        g$make-foo$9473$dF01I
                                        g$foo?$9474$dF01I)
                                      g$foo$9472$dF01I))
                                   g$ls/false$9471$dF01I)
                                 ((case-lambda
                                    ((g$t$9475$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$9476$dF01I)
                                         (if g$ls/false$9476$dF01I
                                           (apply
                                             (case-lambda
                                               ((g$foo$9477$dF01I)
                                                g$foo$9477$dF01I))
                                             g$ls/false$9476$dF01I)
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$t$9475$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$9475$dF01I
                                        'any))))
                                  g$t$9470$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$9470$dF01I
                              '(any any any)))))
                        g$spec$9469$dF01I))))
                  (g$get-record-constructor-name$9228$dF01I
                    (case-lambda
                      ((g$spec$9459$dF01I)
                       ((case-lambda
                          ((g$t$9460$dF01I)
                           ((case-lambda
                              ((g$ls/false$9461$dF01I)
                               (if g$ls/false$9461$dF01I
                                 (apply
                                   (case-lambda
                                     ((g$foo$9462$dF01I
                                        g$make-foo$9463$dF01I
                                        g$foo?$9464$dF01I)
                                      g$make-foo$9463$dF01I))
                                   g$ls/false$9461$dF01I)
                                 ((case-lambda
                                    ((g$t$9465$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$9466$dF01I)
                                         (if (if g$ls/false$9466$dF01I
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9467$dF01I)
                                                      (g$id?$7704$dF01I
                                                        g$foo$9467$dF01I)))
                                                   g$ls/false$9466$dF01I))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9468$dF01I)
                                                (g$id$9226$dF01I
                                                  g$foo$9468$dF01I
                                                  '"make-"
                                                  (g$stx->datum$7715$dF01I
                                                    g$foo$9468$dF01I))))
                                             g$ls/false$9466$dF01I)
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$t$9465$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$9465$dF01I
                                        'any))))
                                  g$t$9460$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$9460$dF01I
                              '(any any any)))))
                        g$spec$9459$dF01I))))
                  (g$get-record-predicate-name$9229$dF01I
                    (case-lambda
                      ((g$spec$9449$dF01I)
                       ((case-lambda
                          ((g$t$9450$dF01I)
                           ((case-lambda
                              ((g$ls/false$9451$dF01I)
                               (if g$ls/false$9451$dF01I
                                 (apply
                                   (case-lambda
                                     ((g$foo$9452$dF01I
                                        g$make-foo$9453$dF01I
                                        g$foo?$9454$dF01I)
                                      g$foo?$9454$dF01I))
                                   g$ls/false$9451$dF01I)
                                 ((case-lambda
                                    ((g$t$9455$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$9456$dF01I)
                                         (if (if g$ls/false$9456$dF01I
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9457$dF01I)
                                                      (g$id?$7704$dF01I
                                                        g$foo$9457$dF01I)))
                                                   g$ls/false$9456$dF01I))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9458$dF01I)
                                                (g$id$9226$dF01I
                                                  g$foo$9458$dF01I
                                                  (g$stx->datum$7715$dF01I
                                                    g$foo$9458$dF01I)
                                                  '"?")))
                                             g$ls/false$9456$dF01I)
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$t$9455$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$9455$dF01I
                                        'any))))
                                  g$t$9450$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$9450$dF01I
                              '(any any any)))))
                        g$spec$9449$dF01I))))
                  (g$get-clause$9230$dF01I
                    (case-lambda
                      ((g$id$9440$dF01I g$ls$9441$dF01I)
                       ((case-lambda
                          ((g$t$9442$dF01I)
                           ((case-lambda
                              ((g$ls/false$9443$dF01I)
                               (if g$ls/false$9443$dF01I
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9443$dF01I)
                                 ((case-lambda
                                    ((g$t$9444$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$9445$dF01I)
                                         (if g$ls/false$9445$dF01I
                                           (apply
                                             (case-lambda
                                               ((g$x$9446$dF01I
                                                  g$rest$9447$dF01I
                                                  g$ls$9448$dF01I)
                                                (if (g$free-id=?$7708$dF01I
                                                      (g$bless$7945$dF01I
                                                        g$id$9440$dF01I)
                                                      g$x$9446$dF01I)
                                                  (cons
                                                    g$x$9446$dF01I
                                                    g$rest$9447$dF01I)
                                                  (g$get-clause$9230$dF01I
                                                    g$id$9440$dF01I
                                                    g$ls$9448$dF01I))))
                                             g$ls/false$9445$dF01I)
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$t$9444$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$9444$dF01I
                                        '((any . any) . any)))))
                                  g$t$9442$dF01I))))
                            (g$syntax-dispatch$7982$dF01I g$t$9442$dF01I '()))))
                        g$ls$9441$dF01I))))
                  (g$foo-rtd-code$9231$dF01I
                    (case-lambda
                      ((g$name$9399$dF01I
                         g$clause*$9400$dF01I
                         g$parent-rtd-code$9401$dF01I)
                       (letrec* ((g$convert-field-spec*$9402$dF01I
                                   (case-lambda
                                     ((g$ls$9427$dF01I)
                                      (list->vector
                                        (g$map$5063$dF01I
                                          (case-lambda
                                            ((g$x$9428$dF01I)
                                             ((case-lambda
                                                ((g$t$9429$dF01I)
                                                 ((case-lambda
                                                    ((g$ls/false$9430$dF01I)
                                                     (if g$ls/false$9430$dF01I
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$9431$dF01I
                                                              g$rest$9432$dF01I)
                                                            (list
                                                              'mutable
                                                              g$name$9431$dF01I)))
                                                         g$ls/false$9430$dF01I)
                                                       ((case-lambda
                                                          ((g$t$9433$dF01I)
                                                           ((case-lambda
                                                              ((g$ls/false$9434$dF01I)
                                                               (if g$ls/false$9434$dF01I
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$9435$dF01I
                                                                        g$rest$9436$dF01I)
                                                                      (list
                                                                        'immutable
                                                                        g$name$9435$dF01I)))
                                                                   g$ls/false$9434$dF01I)
                                                                 ((case-lambda
                                                                    ((g$t$9437$dF01I)
                                                                     ((case-lambda
                                                                        ((g$ls/false$9438$dF01I)
                                                                         (if g$ls/false$9438$dF01I
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$9439$dF01I)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$9439$dF01I)))
                                                                             g$ls/false$9438$dF01I)
                                                                           (g$syntax-violation$8094$dF01I
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$9437$dF01I))))
                                                                      (g$syntax-dispatch$7982$dF01I
                                                                        g$t$9437$dF01I
                                                                        'any))))
                                                                  g$t$9433$dF01I))))
                                                            (g$syntax-dispatch$7982$dF01I
                                                              g$t$9433$dF01I
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$9429$dF01I))))
                                                  (g$syntax-dispatch$7982$dF01I
                                                    g$t$9429$dF01I
                                                    '(#(scheme-id mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$9428$dF01I)))
                                          g$ls$9427$dF01I))))))
                         ((case-lambda
                            ((g$uid-code$9403$dF01I
                               g$sealed?$9404$dF01I
                               g$opaque?$9405$dF01I
                               g$fields$9406$dF01I)
                             (g$bless$7945$dF01I
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$9399$dF01I)
                                 g$parent-rtd-code$9401$dF01I
                                 g$uid-code$9403$dF01I
                                 g$sealed?$9404$dF01I
                                 g$opaque?$9405$dF01I
                                 g$fields$9406$dF01I))))
                          ((case-lambda
                             ((g$t$9407$dF01I)
                              ((case-lambda
                                 ((g$ls/false$9408$dF01I)
                                  (if g$ls/false$9408$dF01I
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9408$dF01I)
                                    ((case-lambda
                                       ((g$t$9409$dF01I)
                                        ((case-lambda
                                           ((g$ls/false$9410$dF01I)
                                            (if g$ls/false$9410$dF01I
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9411$dF01I)
                                                   (list
                                                     'quote
                                                     g$uid$9411$dF01I)))
                                                g$ls/false$9410$dF01I)
                                              ((case-lambda
                                                 ((g$t$9412$dF01I)
                                                  ((case-lambda
                                                     ((g$ls/false$9413$dF01I)
                                                      (if g$ls/false$9413$dF01I
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9413$dF01I)
                                                        (g$syntax-violation$8094$dF01I
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9412$dF01I))))
                                                   (g$syntax-dispatch$7982$dF01I
                                                     g$t$9412$dF01I
                                                     '_))))
                                               g$t$9409$dF01I))))
                                         (g$syntax-dispatch$7982$dF01I
                                           g$t$9409$dF01I
                                           '(_ any)))))
                                     g$t$9407$dF01I))))
                               (g$syntax-dispatch$7982$dF01I
                                 g$t$9407$dF01I
                                 '(_)))))
                           (g$get-clause$9230$dF01I
                             'nongenerative
                             g$clause*$9400$dF01I))
                          ((case-lambda
                             ((g$t$9414$dF01I)
                              ((case-lambda
                                 ((g$ls/false$9415$dF01I)
                                  (if g$ls/false$9415$dF01I
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9415$dF01I)
                                    ((case-lambda
                                       ((g$t$9416$dF01I)
                                        ((case-lambda
                                           ((g$ls/false$9417$dF01I)
                                            (if g$ls/false$9417$dF01I
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9417$dF01I)
                                              (g$syntax-violation$8094$dF01I
                                                '#f
                                                '"invalid syntax"
                                                g$t$9416$dF01I))))
                                         (g$syntax-dispatch$7982$dF01I
                                           g$t$9416$dF01I
                                           '_))))
                                     g$t$9414$dF01I))))
                               (g$syntax-dispatch$7982$dF01I
                                 g$t$9414$dF01I
                                 '(_ #(atom #t))))))
                           (g$get-clause$9230$dF01I
                             'sealed
                             g$clause*$9400$dF01I))
                          ((case-lambda
                             ((g$t$9418$dF01I)
                              ((case-lambda
                                 ((g$ls/false$9419$dF01I)
                                  (if g$ls/false$9419$dF01I
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9419$dF01I)
                                    ((case-lambda
                                       ((g$t$9420$dF01I)
                                        ((case-lambda
                                           ((g$ls/false$9421$dF01I)
                                            (if g$ls/false$9421$dF01I
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9421$dF01I)
                                              (g$syntax-violation$8094$dF01I
                                                '#f
                                                '"invalid syntax"
                                                g$t$9420$dF01I))))
                                         (g$syntax-dispatch$7982$dF01I
                                           g$t$9420$dF01I
                                           '_))))
                                     g$t$9418$dF01I))))
                               (g$syntax-dispatch$7982$dF01I
                                 g$t$9418$dF01I
                                 '(_ #(atom #t))))))
                           (g$get-clause$9230$dF01I
                             'opaque
                             g$clause*$9400$dF01I))
                          ((case-lambda
                             ((g$t$9422$dF01I)
                              ((case-lambda
                                 ((g$ls/false$9423$dF01I)
                                  (if g$ls/false$9423$dF01I
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9424$dF01I)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9402$dF01I
                                             g$field-spec*$9424$dF01I))))
                                      g$ls/false$9423$dF01I)
                                    ((case-lambda
                                       ((g$t$9425$dF01I)
                                        ((case-lambda
                                           ((g$ls/false$9426$dF01I)
                                            (if g$ls/false$9426$dF01I
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9426$dF01I)
                                              (g$syntax-violation$8094$dF01I
                                                '#f
                                                '"invalid syntax"
                                                g$t$9425$dF01I))))
                                         (g$syntax-dispatch$7982$dF01I
                                           g$t$9425$dF01I
                                           '_))))
                                     g$t$9422$dF01I))))
                               (g$syntax-dispatch$7982$dF01I
                                 g$t$9422$dF01I
                                 '(_ . each-any)))))
                           (g$get-clause$9230$dF01I
                             'fields
                             g$clause*$9400$dF01I)))))))
                  (g$parent-rtd-code$9232$dF01I
                    (case-lambda
                      ((g$clause*$9387$dF01I)
                       ((case-lambda
                          ((g$t$9388$dF01I)
                           ((case-lambda
                              ((g$ls/false$9389$dF01I)
                               (if g$ls/false$9389$dF01I
                                 (apply
                                   (case-lambda
                                     ((g$name$9390$dF01I)
                                      (list
                                        'record-type-descriptor
                                        g$name$9390$dF01I)))
                                   g$ls/false$9389$dF01I)
                                 ((case-lambda
                                    ((g$t$9391$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$9392$dF01I)
                                         (if g$ls/false$9392$dF01I
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9393$dF01I)
                                                    ((case-lambda
                                                       ((g$ls/false$9394$dF01I)
                                                        (if g$ls/false$9394$dF01I
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9395$dF01I
                                                                 g$rcd$9396$dF01I)
                                                               g$rtd$9395$dF01I))
                                                            g$ls/false$9394$dF01I)
                                                          ((case-lambda
                                                             ((g$t$9397$dF01I)
                                                              ((case-lambda
                                                                 ((g$ls/false$9398$dF01I)
                                                                  (if g$ls/false$9398$dF01I
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9398$dF01I)
                                                                    (g$syntax-violation$8094$dF01I
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9397$dF01I))))
                                                               (g$syntax-dispatch$7982$dF01I
                                                                 g$t$9397$dF01I
                                                                 '#(atom #f)))))
                                                           g$t$9393$dF01I))))
                                                     (g$syntax-dispatch$7982$dF01I
                                                       g$t$9393$dF01I
                                                       '(_ any any)))))
                                                 (g$get-clause$9230$dF01I
                                                   'parent-rtd
                                                   g$clause*$9387$dF01I))))
                                             g$ls/false$9392$dF01I)
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$t$9391$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$9391$dF01I
                                        '#(atom #f)))))
                                  g$t$9388$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$9388$dF01I
                              '(_ any)))))
                        (g$get-clause$9230$dF01I
                          'parent
                          g$clause*$9387$dF01I)))))
                  (g$parent-rcd-code$9233$dF01I
                    (case-lambda
                      ((g$clause*$9375$dF01I)
                       ((case-lambda
                          ((g$t$9376$dF01I)
                           ((case-lambda
                              ((g$ls/false$9377$dF01I)
                               (if g$ls/false$9377$dF01I
                                 (apply
                                   (case-lambda
                                     ((g$name$9378$dF01I)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$9378$dF01I)))
                                   g$ls/false$9377$dF01I)
                                 ((case-lambda
                                    ((g$t$9379$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$9380$dF01I)
                                         (if g$ls/false$9380$dF01I
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9381$dF01I)
                                                    ((case-lambda
                                                       ((g$ls/false$9382$dF01I)
                                                        (if g$ls/false$9382$dF01I
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9383$dF01I
                                                                 g$rcd$9384$dF01I)
                                                               g$rcd$9384$dF01I))
                                                            g$ls/false$9382$dF01I)
                                                          ((case-lambda
                                                             ((g$t$9385$dF01I)
                                                              ((case-lambda
                                                                 ((g$ls/false$9386$dF01I)
                                                                  (if g$ls/false$9386$dF01I
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9386$dF01I)
                                                                    (g$syntax-violation$8094$dF01I
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9385$dF01I))))
                                                               (g$syntax-dispatch$7982$dF01I
                                                                 g$t$9385$dF01I
                                                                 '#(atom #f)))))
                                                           g$t$9381$dF01I))))
                                                     (g$syntax-dispatch$7982$dF01I
                                                       g$t$9381$dF01I
                                                       '(_ any any)))))
                                                 (g$get-clause$9230$dF01I
                                                   'parent-rtd
                                                   g$clause*$9375$dF01I))))
                                             g$ls/false$9380$dF01I)
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$t$9379$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$9379$dF01I
                                        '#(atom #f)))))
                                  g$t$9376$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$9376$dF01I
                              '(_ any)))))
                        (g$get-clause$9230$dF01I
                          'parent
                          g$clause*$9375$dF01I)))))
                  (g$foo-rcd-code$9234$dF01I
                    (case-lambda
                      ((g$clause*$9371$dF01I
                         g$foo-rtd$9372$dF01I
                         g$protocol$9373$dF01I
                         g$parent-rcd-code$9374$dF01I)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$9372$dF01I
                         g$parent-rcd-code$9374$dF01I
                         g$protocol$9373$dF01I))))
                  (g$get-protocol-code$9235$dF01I
                    (case-lambda
                      ((g$clause*$9365$dF01I)
                       ((case-lambda
                          ((g$t$9366$dF01I)
                           ((case-lambda
                              ((g$ls/false$9367$dF01I)
                               (if g$ls/false$9367$dF01I
                                 (apply
                                   (case-lambda
                                     ((g$expr$9368$dF01I) g$expr$9368$dF01I))
                                   g$ls/false$9367$dF01I)
                                 ((case-lambda
                                    ((g$t$9369$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$9370$dF01I)
                                         (if g$ls/false$9370$dF01I
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$9370$dF01I)
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$t$9369$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$9369$dF01I
                                        '_))))
                                  g$t$9366$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$9366$dF01I
                              '(_ any)))))
                        (g$get-clause$9230$dF01I
                          'protocol
                          g$clause*$9365$dF01I)))))
                  (g$get-fields$9236$dF01I
                    (case-lambda
                      ((g$clause*$9356$dF01I)
                       ((case-lambda
                          ((g$t$9357$dF01I)
                           ((case-lambda
                              ((g$ls/false$9358$dF01I)
                               (if g$ls/false$9358$dF01I
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$9358$dF01I)
                                 ((case-lambda
                                    ((g$t$9359$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$9360$dF01I)
                                         (if g$ls/false$9360$dF01I
                                           (apply
                                             (case-lambda
                                               ((g$f*$9361$dF01I)
                                                g$f*$9361$dF01I))
                                             g$ls/false$9360$dF01I)
                                           ((case-lambda
                                              ((g$t$9362$dF01I)
                                               ((case-lambda
                                                  ((g$ls/false$9363$dF01I)
                                                   (if g$ls/false$9363$dF01I
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$9364$dF01I)
                                                          (g$get-fields$9236$dF01I
                                                            g$rest$9364$dF01I)))
                                                       g$ls/false$9363$dF01I)
                                                     (g$syntax-violation$8094$dF01I
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9362$dF01I))))
                                                (g$syntax-dispatch$7982$dF01I
                                                  g$t$9362$dF01I
                                                  '(_ . any)))))
                                            g$t$9359$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$9359$dF01I
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$9357$dF01I))))
                            (g$syntax-dispatch$7982$dF01I g$t$9357$dF01I '()))))
                        g$clause*$9356$dF01I))))
                  (g$get-mutator-indices$9237$dF01I
                    (case-lambda
                      ((g$fields$9344$dF01I)
                       ((letrec ((g$f$9345$dF01I
                                   (case-lambda
                                     ((g$fields$9346$dF01I g$i$9347$dF01I)
                                      ((case-lambda
                                         ((g$t$9348$dF01I)
                                          ((case-lambda
                                             ((g$ls/false$9349$dF01I)
                                              (if g$ls/false$9349$dF01I
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$9349$dF01I)
                                                ((case-lambda
                                                   ((g$t$9350$dF01I)
                                                    ((case-lambda
                                                       ((g$ls/false$9351$dF01I)
                                                        (if g$ls/false$9351$dF01I
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$9352$dF01I)
                                                               (cons
                                                                 g$i$9347$dF01I
                                                                 (g$f$9345$dF01I
                                                                   g$rest$9352$dF01I
                                                                   (+ g$i$9347$dF01I
                                                                      '1)))))
                                                            g$ls/false$9351$dF01I)
                                                          ((case-lambda
                                                             ((g$t$9353$dF01I)
                                                              ((case-lambda
                                                                 ((g$ls/false$9354$dF01I)
                                                                  (if g$ls/false$9354$dF01I
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$9355$dF01I)
                                                                         (g$f$9345$dF01I
                                                                           g$rest$9355$dF01I
                                                                           (+ g$i$9347$dF01I
                                                                              '1))))
                                                                      g$ls/false$9354$dF01I)
                                                                    (g$syntax-violation$8094$dF01I
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9353$dF01I))))
                                                               (g$syntax-dispatch$7982$dF01I
                                                                 g$t$9353$dF01I
                                                                 '(_ . any)))))
                                                           g$t$9350$dF01I))))
                                                     (g$syntax-dispatch$7982$dF01I
                                                       g$t$9350$dF01I
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$9348$dF01I))))
                                           (g$syntax-dispatch$7982$dF01I
                                             g$t$9348$dF01I
                                             '()))))
                                       g$fields$9346$dF01I)))))
                          g$f$9345$dF01I)
                        g$fields$9344$dF01I
                        '0))))
                  (g$get-mutators$9238$dF01I
                    (case-lambda
                      ((g$foo$9323$dF01I g$fields$9324$dF01I)
                       (letrec* ((g$gen-name$9325$dF01I
                                   (case-lambda
                                     ((g$x$9343$dF01I)
                                      (g$datum->syntax$8096$dF01I
                                        g$foo$9323$dF01I
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8097$dF01I
                                                g$foo$9323$dF01I))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8097$dF01I
                                                g$x$9343$dF01I))
                                            '"-set!")))))))
                         ((letrec ((g$f$9326$dF01I
                                     (case-lambda
                                       ((g$fields$9327$dF01I)
                                        ((case-lambda
                                           ((g$t$9328$dF01I)
                                            ((case-lambda
                                               ((g$ls/false$9329$dF01I)
                                                (if g$ls/false$9329$dF01I
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$9329$dF01I)
                                                  ((case-lambda
                                                     ((g$t$9330$dF01I)
                                                      ((case-lambda
                                                         ((g$ls/false$9331$dF01I)
                                                          (if g$ls/false$9331$dF01I
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9332$dF01I
                                                                   g$accessor$9333$dF01I
                                                                   g$mutator$9334$dF01I
                                                                   g$rest$9335$dF01I)
                                                                 (cons
                                                                   g$mutator$9334$dF01I
                                                                   (g$f$9326$dF01I
                                                                     g$rest$9335$dF01I))))
                                                              g$ls/false$9331$dF01I)
                                                            ((case-lambda
                                                               ((g$t$9336$dF01I)
                                                                ((case-lambda
                                                                   ((g$ls/false$9337$dF01I)
                                                                    (if g$ls/false$9337$dF01I
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9338$dF01I
                                                                             g$rest$9339$dF01I)
                                                                           (cons
                                                                             (g$gen-name$9325$dF01I
                                                                               g$name$9338$dF01I)
                                                                             (g$f$9326$dF01I
                                                                               g$rest$9339$dF01I))))
                                                                        g$ls/false$9337$dF01I)
                                                                      ((case-lambda
                                                                         ((g$t$9340$dF01I)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9341$dF01I)
                                                                              (if g$ls/false$9341$dF01I
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$9342$dF01I)
                                                                                     (g$f$9326$dF01I
                                                                                       g$rest$9342$dF01I)))
                                                                                  g$ls/false$9341$dF01I)
                                                                                (g$syntax-violation$8094$dF01I
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9340$dF01I))))
                                                                           (g$syntax-dispatch$7982$dF01I
                                                                             g$t$9340$dF01I
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$9336$dF01I))))
                                                                 (g$syntax-dispatch$7982$dF01I
                                                                   g$t$9336$dF01I
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$9330$dF01I))))
                                                       (g$syntax-dispatch$7982$dF01I
                                                         g$t$9330$dF01I
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$9328$dF01I))))
                                             (g$syntax-dispatch$7982$dF01I
                                               g$t$9328$dF01I
                                               '()))))
                                         g$fields$9327$dF01I)))))
                            g$f$9326$dF01I)
                          g$fields$9324$dF01I)))))
                  (g$get-accessors$9239$dF01I
                    (case-lambda
                      ((g$foo$9289$dF01I g$fields$9290$dF01I)
                       (letrec* ((g$gen-name$9291$dF01I
                                   (case-lambda
                                     ((g$x$9322$dF01I)
                                      (g$datum->syntax$8096$dF01I
                                        g$foo$9289$dF01I
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8097$dF01I
                                                g$foo$9289$dF01I))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8097$dF01I
                                                g$x$9322$dF01I)))))))))
                         (g$map$5063$dF01I
                           (case-lambda
                             ((g$field$9292$dF01I)
                              ((case-lambda
                                 ((g$t$9293$dF01I)
                                  ((case-lambda
                                     ((g$ls/false$9294$dF01I)
                                      (if (if g$ls/false$9294$dF01I
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$9295$dF01I
                                                     g$accessor$9296$dF01I
                                                     g$mutator$9297$dF01I)
                                                   (g$id?$7704$dF01I
                                                     g$accessor$9296$dF01I)))
                                                g$ls/false$9294$dF01I))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$9298$dF01I
                                               g$accessor$9299$dF01I
                                               g$mutator$9300$dF01I)
                                             g$accessor$9299$dF01I))
                                          g$ls/false$9294$dF01I)
                                        ((case-lambda
                                           ((g$t$9301$dF01I)
                                            ((case-lambda
                                               ((g$ls/false$9302$dF01I)
                                                (if (if g$ls/false$9302$dF01I
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$9303$dF01I
                                                               g$accessor$9304$dF01I)
                                                             (g$id?$7704$dF01I
                                                               g$accessor$9304$dF01I)))
                                                          g$ls/false$9302$dF01I))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$9305$dF01I
                                                         g$accessor$9306$dF01I)
                                                       g$accessor$9306$dF01I))
                                                    g$ls/false$9302$dF01I)
                                                  ((case-lambda
                                                     ((g$t$9307$dF01I)
                                                      ((case-lambda
                                                         ((g$ls/false$9308$dF01I)
                                                          (if (if g$ls/false$9308$dF01I
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$9309$dF01I)
                                                                       (g$id?$7704$dF01I
                                                                         g$name$9309$dF01I)))
                                                                    g$ls/false$9308$dF01I))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9310$dF01I)
                                                                 (g$gen-name$9291$dF01I
                                                                   g$name$9310$dF01I)))
                                                              g$ls/false$9308$dF01I)
                                                            ((case-lambda
                                                               ((g$t$9311$dF01I)
                                                                ((case-lambda
                                                                   ((g$ls/false$9312$dF01I)
                                                                    (if (if g$ls/false$9312$dF01I
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$9313$dF01I)
                                                                                 (g$id?$7704$dF01I
                                                                                   g$name$9313$dF01I)))
                                                                              g$ls/false$9312$dF01I))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9314$dF01I)
                                                                           (g$gen-name$9291$dF01I
                                                                             g$name$9314$dF01I)))
                                                                        g$ls/false$9312$dF01I)
                                                                      ((case-lambda
                                                                         ((g$t$9315$dF01I)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9316$dF01I)
                                                                              (if (if g$ls/false$9316$dF01I
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$9317$dF01I)
                                                                                           (g$id?$7704$dF01I
                                                                                             g$name$9317$dF01I)))
                                                                                        g$ls/false$9316$dF01I))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$9318$dF01I)
                                                                                     (g$gen-name$9291$dF01I
                                                                                       g$name$9318$dF01I)))
                                                                                  g$ls/false$9316$dF01I)
                                                                                ((case-lambda
                                                                                   ((g$t$9319$dF01I)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$9320$dF01I)
                                                                                        (if g$ls/false$9320$dF01I
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$9321$dF01I)
                                                                                               (g$syntax-violation$8094$dF01I
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$9292$dF01I)))
                                                                                            g$ls/false$9320$dF01I)
                                                                                          (g$syntax-violation$8094$dF01I
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$9319$dF01I))))
                                                                                     (g$syntax-dispatch$7982$dF01I
                                                                                       g$t$9319$dF01I
                                                                                       'any))))
                                                                                 g$t$9315$dF01I))))
                                                                           (g$syntax-dispatch$7982$dF01I
                                                                             g$t$9315$dF01I
                                                                             'any))))
                                                                       g$t$9311$dF01I))))
                                                                 (g$syntax-dispatch$7982$dF01I
                                                                   g$t$9311$dF01I
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$9307$dF01I))))
                                                       (g$syntax-dispatch$7982$dF01I
                                                         g$t$9307$dF01I
                                                         '(#(scheme-id mutable)
                                                           any)))))
                                                   g$t$9301$dF01I))))
                                             (g$syntax-dispatch$7982$dF01I
                                               g$t$9301$dF01I
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$9293$dF01I))))
                                   (g$syntax-dispatch$7982$dF01I
                                     g$t$9293$dF01I
                                     '(#(scheme-id mutable) any any any)))))
                               g$field$9292$dF01I)))
                           g$fields$9290$dF01I)))))
                  (g$enumerate$9240$dF01I
                    (case-lambda
                      ((g$ls$9285$dF01I)
                       ((letrec ((g$f$9286$dF01I
                                   (case-lambda
                                     ((g$ls$9287$dF01I g$i$9288$dF01I)
                                      (if (null? g$ls$9287$dF01I)
                                        '()
                                        (cons
                                          g$i$9288$dF01I
                                          (g$f$9286$dF01I
                                            (cdr g$ls$9287$dF01I)
                                            (+ g$i$9288$dF01I '1))))))))
                          g$f$9286$dF01I)
                        g$ls$9285$dF01I
                        '0))))
                  (g$do-define-record$9241$dF01I
                    (case-lambda
                      ((g$namespec$9265$dF01I g$clause*$9266$dF01I)
                       ((case-lambda
                          ((g$foo$9267$dF01I)
                           ((case-lambda
                              ((g$foo-rtd$9268$dF01I)
                               ((case-lambda
                                  ((g$foo-rcd$9269$dF01I)
                                   ((case-lambda
                                      ((g$protocol$9270$dF01I)
                                       ((case-lambda
                                          ((g$make-foo$9271$dF01I)
                                           ((case-lambda
                                              ((g$fields$9272$dF01I)
                                               ((case-lambda
                                                  ((g$idx*$9273$dF01I)
                                                   ((case-lambda
                                                      ((g$foo-x*$9274$dF01I)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$9275$dF01I)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$9276$dF01I)
                                                               ((case-lambda
                                                                  ((g$foo?$9277$dF01I)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$9278$dF01I)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$9279$dF01I)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$9280$dF01I)
                                                                               (g$bless$7945$dF01I
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$9268$dF01I
                                                                                       g$foo-rtd-code$9278$dF01I)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$9270$dF01I
                                                                                         g$protocol-code$9280$dF01I)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$9269$dF01I
                                                                                           g$foo-rcd-code$9279$dF01I)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$9267$dF01I
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$9268$dF01I)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$9269$dF01I)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$9277$dF01I
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$9268$dF01I))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$9271$dF01I
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$9269$dF01I))
                                                                                               (append
                                                                                                 (g$map$5063$dF01I
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$9281$dF01I
                                                                                                        g$idx$9282$dF01I)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$9281$dF01I
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$9268$dF01I
                                                                                                          g$idx$9282$dF01I))))
                                                                                                   g$foo-x*$9274$dF01I
                                                                                                   g$idx*$9273$dF01I)
                                                                                                 (g$map$5063$dF01I
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$9283$dF01I
                                                                                                        g$idx$9284$dF01I)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$9283$dF01I
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$9268$dF01I
                                                                                                          g$idx$9284$dF01I))))
                                                                                                   g$set-foo-x!*$9275$dF01I
                                                                                                   g$set-foo-idx*$9276$dF01I))))))))))))
                                                                            (g$get-protocol-code$9235$dF01I
                                                                              g$clause*$9266$dF01I))))
                                                                        (g$foo-rcd-code$9234$dF01I
                                                                          g$clause*$9266$dF01I
                                                                          g$foo-rtd$9268$dF01I
                                                                          g$protocol$9270$dF01I
                                                                          (g$parent-rcd-code$9233$dF01I
                                                                            g$clause*$9266$dF01I)))))
                                                                    (g$foo-rtd-code$9231$dF01I
                                                                      g$foo$9267$dF01I
                                                                      g$clause*$9266$dF01I
                                                                      (g$parent-rtd-code$9232$dF01I
                                                                        g$clause*$9266$dF01I)))))
                                                                (g$get-record-predicate-name$9229$dF01I
                                                                  g$namespec$9265$dF01I))))
                                                            (g$get-mutator-indices$9237$dF01I
                                                              g$fields$9272$dF01I))))
                                                        (g$get-mutators$9238$dF01I
                                                          g$foo$9267$dF01I
                                                          g$fields$9272$dF01I))))
                                                    (g$get-accessors$9239$dF01I
                                                      g$foo$9267$dF01I
                                                      g$fields$9272$dF01I))))
                                                (g$enumerate$9240$dF01I
                                                  g$fields$9272$dF01I))))
                                            (g$get-fields$9236$dF01I
                                              g$clause*$9266$dF01I))))
                                        (g$get-record-constructor-name$9228$dF01I
                                          g$namespec$9265$dF01I))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$9227$dF01I g$namespec$9265$dF01I)))))
                  (g$verify-clauses$9242$dF01I
                    (case-lambda
                      ((g$x$9247$dF01I g$cls*$9248$dF01I)
                       (letrec* ((g$valid-kwds$9249$dF01I
                                   (g$map$5063$dF01I
                                     g$bless$7945$dF01I
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$9250$dF01I
                                   (case-lambda
                                     ((g$x$9262$dF01I g$ls$9263$dF01I)
                                      (if (pair? g$ls$9263$dF01I)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$9264$dF01I)
                                              (if g$t$9264$dF01I
                                                g$t$9264$dF01I
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$9250$dF01I
                                                    g$x$9262$dF01I
                                                    (cdr g$ls$9263$dF01I))))))
                                           (g$free-id=?$7708$dF01I
                                             g$x$9262$dF01I
                                             (car g$ls$9263$dF01I))))
                                        '#f)))))
                         ((letrec ((g$f$9251$dF01I
                                     (case-lambda
                                       ((g$cls*$9252$dF01I g$seen*$9253$dF01I)
                                        (if (not (null? g$cls*$9252$dF01I))
                                          ((case-lambda
                                             ((g$t$9254$dF01I)
                                              ((case-lambda
                                                 ((g$ls/false$9255$dF01I)
                                                  (if g$ls/false$9255$dF01I
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$9256$dF01I
                                                           g$rest$9257$dF01I)
                                                         (if ((case-lambda
                                                                ((g$t$9258$dF01I)
                                                                 (if g$t$9258$dF01I
                                                                   g$t$9258$dF01I
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$9250$dF01I
                                                                            g$kwd$9256$dF01I
                                                                            g$valid-kwds$9249$dF01I))))))
                                                              (not (g$id?$7704$dF01I
                                                                     g$kwd$9256$dF01I)))
                                                           (g$syntax-violation$8094$dF01I
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$9256$dF01I)
                                                           (if (g$bound-id-member?$7711$dF01I
                                                                 g$kwd$9256$dF01I
                                                                 g$seen*$9253$dF01I)
                                                             (g$syntax-violation$8094$dF01I
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$9247$dF01I
                                                               g$kwd$9256$dF01I)
                                                             (g$f$9251$dF01I
                                                               (cdr g$cls*$9252$dF01I)
                                                               (cons
                                                                 g$kwd$9256$dF01I
                                                                 g$seen*$9253$dF01I))))))
                                                      g$ls/false$9255$dF01I)
                                                    ((case-lambda
                                                       ((g$t$9259$dF01I)
                                                        ((case-lambda
                                                           ((g$ls/false$9260$dF01I)
                                                            (if g$ls/false$9260$dF01I
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$9261$dF01I)
                                                                   (g$syntax-violation$8094$dF01I
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$9261$dF01I)))
                                                                g$ls/false$9260$dF01I)
                                                              (g$syntax-violation$8094$dF01I
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9259$dF01I))))
                                                         (g$syntax-dispatch$7982$dF01I
                                                           g$t$9259$dF01I
                                                           'any))))
                                                     g$t$9254$dF01I))))
                                               (g$syntax-dispatch$7982$dF01I
                                                 g$t$9254$dF01I
                                                 '(any . any)))))
                                           (car g$cls*$9252$dF01I))
                                          (void))))))
                            g$f$9251$dF01I)
                          g$cls*$9248$dF01I
                          '()))))))
          ((case-lambda
             ((g$t$9243$dF01I)
              ((case-lambda
                 ((g$ls/false$9244$dF01I)
                  (if g$ls/false$9244$dF01I
                    (apply
                      (case-lambda
                        ((g$namespec$9245$dF01I g$clause*$9246$dF01I)
                         (begin
                           (g$verify-clauses$9242$dF01I
                             g$x$9225$dF01I
                             g$clause*$9246$dF01I)
                           (g$do-define-record$9241$dF01I
                             g$namespec$9245$dF01I
                             g$clause*$9246$dF01I))))
                      g$ls/false$9244$dF01I)
                    (g$syntax-violation$8094$dF01I
                      '#f
                      '"invalid syntax"
                      g$t$9243$dF01I))))
               (g$syntax-dispatch$7982$dF01I
                 g$t$9243$dF01I
                 '(_ any . each-any)))))
           g$x$9225$dF01I)))))
   (g$define-condition-type-macro$7977$dF01I
     g$define-condition-type-macro$11480$dF01I
     (case-lambda
       ((g$x$9481$dF01I)
        (letrec* ((g$mkname$9482$dF01I
                    (case-lambda
                      ((g$name$9505$dF01I g$suffix$9506$dF01I)
                       (g$datum->syntax$8096$dF01I
                         g$name$9505$dF01I
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$8097$dF01I g$name$9505$dF01I))
                             g$suffix$9506$dF01I)))))))
          ((case-lambda
             ((g$t$9483$dF01I)
              ((case-lambda
                 ((g$ls/false$9484$dF01I)
                  (if (if g$ls/false$9484$dF01I
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9485$dF01I
                                 g$name$9486$dF01I
                                 g$super$9487$dF01I
                                 g$constructor$9488$dF01I
                                 g$predicate$9489$dF01I
                                 g$field*$9490$dF01I
                                 g$accessor*$9491$dF01I)
                               (if (g$id?$7704$dF01I g$name$9486$dF01I)
                                 (if (g$id?$7704$dF01I g$super$9487$dF01I)
                                   (if (g$id?$7704$dF01I
                                         g$constructor$9488$dF01I)
                                     (if (g$id?$7704$dF01I
                                           g$predicate$9489$dF01I)
                                       (if (g$for-all$5061$dF01I
                                             g$id?$7704$dF01I
                                             g$field*$9490$dF01I)
                                         (begin
                                           '#f
                                           (g$for-all$5061$dF01I
                                             g$id?$7704$dF01I
                                             g$accessor*$9491$dF01I))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9484$dF01I))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9492$dF01I
                           g$name$9493$dF01I
                           g$super$9494$dF01I
                           g$constructor$9495$dF01I
                           g$predicate$9496$dF01I
                           g$field*$9497$dF01I
                           g$accessor*$9498$dF01I)
                         ((case-lambda
                            ((g$aux-accessor*$9499$dF01I)
                             (g$bless$7945$dF01I
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9493$dF01I
                                         g$constructor$9495$dF01I
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9494$dF01I)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5063$dF01I
                                               (case-lambda
                                                 ((g$field$9500$dF01I
                                                    g$aux$9501$dF01I)
                                                  (list
                                                    'immutable
                                                    g$field$9500$dF01I
                                                    g$aux$9501$dF01I)))
                                               g$field*$9497$dF01I
                                               g$aux-accessor*$9499$dF01I))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9496$dF01I
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9493$dF01I)))
                                     (g$map$5063$dF01I
                                       (case-lambda
                                         ((g$accessor$9502$dF01I
                                            g$aux$9503$dF01I)
                                          (list
                                            'define
                                            g$accessor$9502$dF01I
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$9493$dF01I)
                                              g$aux$9503$dF01I))))
                                       g$accessor*$9498$dF01I
                                       g$aux-accessor*$9499$dF01I)))))))
                          (g$map$5063$dF01I
                            (case-lambda ((g$x$9504$dF01I) (gensym)))
                            g$accessor*$9498$dF01I))))
                      g$ls/false$9484$dF01I)
                    (g$syntax-violation$8094$dF01I
                      '#f
                      '"invalid syntax"
                      g$t$9483$dF01I))))
               (g$syntax-dispatch$7982$dF01I
                 g$t$9483$dF01I
                 '(any any any any any . #(each (any any)))))))
           g$x$9481$dF01I)))))
   (g$incorrect-usage-macro$7978$dF01I
     g$incorrect-usage-macro$11481$dF01I
     (case-lambda
       ((g$e$9507$dF01I)
        (g$syntax-violation$8094$dF01I
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9507$dF01I))))
   (g$parameterize-macro$7979$dF01I
     g$parameterize-macro$11482$dF01I
     (case-lambda
       ((g$e$9508$dF01I)
        ((case-lambda
           ((g$t$9509$dF01I)
            ((case-lambda
               ((g$ls/false$9510$dF01I)
                (if g$ls/false$9510$dF01I
                  (apply
                    (case-lambda
                      ((g$b$9511$dF01I g$b*$9512$dF01I)
                       (g$bless$7945$dF01I
                         (cons
                           'let
                           (cons '() (cons g$b$9511$dF01I g$b*$9512$dF01I))))))
                    g$ls/false$9510$dF01I)
                  ((case-lambda
                     ((g$t$9513$dF01I)
                      ((case-lambda
                         ((g$ls/false$9514$dF01I)
                          (if g$ls/false$9514$dF01I
                            (apply
                              (case-lambda
                                ((g$olhs*$9515$dF01I
                                   g$orhs*$9516$dF01I
                                   g$b$9517$dF01I
                                   g$b*$9518$dF01I)
                                 ((case-lambda
                                    ((g$lhs*$9519$dF01I g$rhs*$9520$dF01I)
                                     (g$bless$7945$dF01I
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9519$dF01I
                                             g$rhs*$9520$dF01I)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5063$dF01I
                                                       (case-lambda
                                                         ((g$lhs$9521$dF01I
                                                            g$rhs$9522$dF01I)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$9521$dF01I)))
                                                            (list
                                                              g$lhs$9521$dF01I
                                                              g$rhs$9522$dF01I)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$9522$dF01I
                                                                '(t))))))
                                                       g$lhs*$9519$dF01I
                                                       g$rhs*$9520$dF01I)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9517$dF01I
                                                         g$b*$9518$dF01I)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9515$dF01I
                                           g$orhs*$9516$dF01I)))))
                                  (g$generate-temporaries$8084$dF01I
                                    g$olhs*$9515$dF01I)
                                  (g$generate-temporaries$8084$dF01I
                                    g$orhs*$9516$dF01I))))
                              g$ls/false$9514$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$9513$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$9513$dF01I
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9509$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$9509$dF01I
               '(_ () any . each-any)))))
         g$e$9508$dF01I))))
   (g$foreign-call-transformer$7980$dF01I
     g$foreign-call-transformer$11483$dF01I
     (case-lambda
       ((g$e$9523$dF01I g$r$9524$dF01I g$mr$9525$dF01I)
        ((case-lambda
           ((g$t$9526$dF01I)
            ((case-lambda
               ((g$ls/false$9527$dF01I)
                (if g$ls/false$9527$dF01I
                  (apply
                    (case-lambda
                      ((g$name$9528$dF01I g$arg*$9529$dF01I)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$8000$dF01I
                             g$name$9528$dF01I
                             g$r$9524$dF01I
                             g$mr$9525$dF01I)
                           (g$chi-expr*$7998$dF01I
                             g$arg*$9529$dF01I
                             g$r$9524$dF01I
                             g$mr$9525$dF01I)))))
                    g$ls/false$9527$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$9526$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$9526$dF01I
               '(_ any . each-any)))))
         g$e$9523$dF01I))))
   (g$convert-pattern$7981$dF01I
     g$convert-pattern$11484$dF01I
     (case-lambda
       ((g$pattern$9530$dF01I g$keys$9531$dF01I)
        (letrec* ((g$cvt*$9532$dF01I
                    (case-lambda
                      ((g$p*$9612$dF01I g$n$9613$dF01I g$ids$9614$dF01I)
                       (if (null? g$p*$9612$dF01I)
                         (values '() g$ids$9614$dF01I)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9532$dF01I
                                (cdr g$p*$9612$dF01I)
                                g$n$9613$dF01I
                                g$ids$9614$dF01I)))
                           (case-lambda
                             ((g$y$9617$dF01I g$ids$9618$dF01I)
                              ((case-lambda
                                 ((g$ids$9619$dF01I g$y$9620$dF01I)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9533$dF01I
                                         (car g$p*$9612$dF01I)
                                         g$n$9613$dF01I
                                         g$ids$9619$dF01I)))
                                    (case-lambda
                                      ((g$x$9623$dF01I g$ids$9624$dF01I)
                                       ((case-lambda
                                          ((g$ids$9625$dF01I g$x$9626$dF01I)
                                           (values
                                             (cons
                                               g$x$9626$dF01I
                                               g$y$9620$dF01I)
                                             g$ids$9625$dF01I)))
                                        g$ids$9624$dF01I
                                        g$x$9623$dF01I))))))
                               g$ids$9618$dF01I
                               g$y$9617$dF01I))))))))
                  (g$cvt$9533$dF01I
                    (case-lambda
                      ((g$p$9534$dF01I g$n$9535$dF01I g$ids$9536$dF01I)
                       ((case-lambda
                          ((g$t$9537$dF01I)
                           ((case-lambda
                              ((g$ls/false$9538$dF01I)
                               (if (if g$ls/false$9538$dF01I
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9539$dF01I)
                                            (g$id?$7704$dF01I g$id$9539$dF01I)))
                                         g$ls/false$9538$dF01I))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9540$dF01I)
                                      (if (g$bound-id-member?$7711$dF01I
                                            g$p$9534$dF01I
                                            g$keys$9531$dF01I)
                                        (values
                                          (vector 'free-id g$p$9534$dF01I)
                                          g$ids$9536$dF01I)
                                        (if (g$free-id=?$7708$dF01I
                                              g$p$9534$dF01I
                                              (g$scheme-stx$7925$dF01I '_))
                                          (values '_ g$ids$9536$dF01I)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9534$dF01I
                                                g$n$9535$dF01I)
                                              g$ids$9536$dF01I))))))
                                   g$ls/false$9538$dF01I)
                                 ((case-lambda
                                    ((g$t$9541$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$9542$dF01I)
                                         (if (if g$ls/false$9542$dF01I
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9543$dF01I
                                                        g$dots$9544$dF01I)
                                                      (g$ellipsis?$7983$dF01I
                                                        g$dots$9544$dF01I)))
                                                   g$ls/false$9542$dF01I))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9545$dF01I
                                                  g$dots$9546$dF01I)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9533$dF01I
                                                       g$p$9545$dF01I
                                                       (+ g$n$9535$dF01I '1)
                                                       g$ids$9536$dF01I)))
                                                  (case-lambda
                                                    ((g$p$9549$dF01I
                                                       g$ids$9550$dF01I)
                                                     ((case-lambda
                                                        ((g$ids$9551$dF01I
                                                           g$p$9552$dF01I)
                                                         (values
                                                           (if (eq? g$p$9552$dF01I
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9552$dF01I))
                                                           g$ids$9551$dF01I)))
                                                      g$ids$9550$dF01I
                                                      g$p$9549$dF01I))))))
                                             g$ls/false$9542$dF01I)
                                           ((case-lambda
                                              ((g$t$9553$dF01I)
                                               ((case-lambda
                                                  ((g$ls/false$9554$dF01I)
                                                   (if (if g$ls/false$9554$dF01I
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9555$dF01I
                                                                  g$dots$9556$dF01I
                                                                  g$ys$9557$dF01I
                                                                  g$z$9558$dF01I)
                                                                (g$ellipsis?$7983$dF01I
                                                                  g$dots$9556$dF01I)))
                                                             g$ls/false$9554$dF01I))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9559$dF01I
                                                            g$dots$9560$dF01I
                                                            g$ys$9561$dF01I
                                                            g$z$9562$dF01I)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9533$dF01I
                                                                 g$z$9562$dF01I
                                                                 g$n$9535$dF01I
                                                                 g$ids$9536$dF01I)))
                                                            (case-lambda
                                                              ((g$z$9565$dF01I
                                                                 g$ids$9566$dF01I)
                                                               ((case-lambda
                                                                  ((g$ids$9567$dF01I
                                                                     g$z$9568$dF01I)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9532$dF01I
                                                                          g$ys$9561$dF01I
                                                                          g$n$9535$dF01I
                                                                          g$ids$9567$dF01I)))
                                                                     (case-lambda
                                                                       ((g$ys$9571$dF01I
                                                                          g$ids$9572$dF01I)
                                                                        ((case-lambda
                                                                           ((g$ids$9573$dF01I
                                                                              g$ys$9574$dF01I)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9533$dF01I
                                                                                   g$x$9559$dF01I
                                                                                   (+ g$n$9535$dF01I
                                                                                      '1)
                                                                                   g$ids$9573$dF01I)))
                                                                              (case-lambda
                                                                                ((g$x$9577$dF01I
                                                                                   g$ids$9578$dF01I)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9579$dF01I
                                                                                       g$x$9580$dF01I)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9580$dF01I
                                                                                         (reverse
                                                                                           g$ys$9574$dF01I)
                                                                                         g$z$9568$dF01I)
                                                                                       g$ids$9579$dF01I)))
                                                                                  g$ids$9578$dF01I
                                                                                  g$x$9577$dF01I))))))
                                                                         g$ids$9572$dF01I
                                                                         g$ys$9571$dF01I))))))
                                                                g$ids$9566$dF01I
                                                                g$z$9565$dF01I))))))
                                                       g$ls/false$9554$dF01I)
                                                     ((case-lambda
                                                        ((g$t$9581$dF01I)
                                                         ((case-lambda
                                                            ((g$ls/false$9582$dF01I)
                                                             (if g$ls/false$9582$dF01I
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9583$dF01I
                                                                      g$y$9584$dF01I)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9533$dF01I
                                                                           g$y$9584$dF01I
                                                                           g$n$9535$dF01I
                                                                           g$ids$9536$dF01I)))
                                                                      (case-lambda
                                                                        ((g$y$9587$dF01I
                                                                           g$ids$9588$dF01I)
                                                                         ((case-lambda
                                                                            ((g$ids$9589$dF01I
                                                                               g$y$9590$dF01I)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9533$dF01I
                                                                                    g$x$9583$dF01I
                                                                                    g$n$9535$dF01I
                                                                                    g$ids$9589$dF01I)))
                                                                               (case-lambda
                                                                                 ((g$x$9593$dF01I
                                                                                    g$ids$9594$dF01I)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9595$dF01I
                                                                                        g$x$9596$dF01I)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9596$dF01I
                                                                                          g$y$9590$dF01I)
                                                                                        g$ids$9595$dF01I)))
                                                                                   g$ids$9594$dF01I
                                                                                   g$x$9593$dF01I))))))
                                                                          g$ids$9588$dF01I
                                                                          g$y$9587$dF01I))))))
                                                                 g$ls/false$9582$dF01I)
                                                               ((case-lambda
                                                                  ((g$t$9597$dF01I)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9598$dF01I)
                                                                       (if g$ls/false$9598$dF01I
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9536$dF01I)))
                                                                           g$ls/false$9598$dF01I)
                                                                         ((case-lambda
                                                                            ((g$t$9599$dF01I)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9600$dF01I)
                                                                                 (if (if g$ls/false$9600$dF01I
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9601$dF01I)
                                                                                              (not (g$stx?$7676$dF01I
                                                                                                     g$p$9601$dF01I))))
                                                                                           g$ls/false$9600$dF01I))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9602$dF01I)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9533$dF01I
                                                                                               g$p$9602$dF01I
                                                                                               g$n$9535$dF01I
                                                                                               g$ids$9536$dF01I)))
                                                                                          (case-lambda
                                                                                            ((g$p$9605$dF01I
                                                                                               g$ids$9606$dF01I)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9607$dF01I
                                                                                                   g$p$9608$dF01I)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9608$dF01I)
                                                                                                   g$ids$9607$dF01I)))
                                                                                              g$ids$9606$dF01I
                                                                                              g$p$9605$dF01I))))))
                                                                                     g$ls/false$9600$dF01I)
                                                                                   ((case-lambda
                                                                                      ((g$t$9609$dF01I)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9610$dF01I)
                                                                                           (if g$ls/false$9610$dF01I
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9611$dF01I)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7715$dF01I
                                                                                                        g$datum$9611$dF01I))
                                                                                                    g$ids$9536$dF01I)))
                                                                                               g$ls/false$9610$dF01I)
                                                                                             (g$syntax-violation$8094$dF01I
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9609$dF01I))))
                                                                                        (g$syntax-dispatch$7982$dF01I
                                                                                          g$t$9609$dF01I
                                                                                          'any))))
                                                                                    g$t$9599$dF01I))))
                                                                              (g$syntax-dispatch$7982$dF01I
                                                                                g$t$9599$dF01I
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9597$dF01I))))
                                                                    (g$syntax-dispatch$7982$dF01I
                                                                      g$t$9597$dF01I
                                                                      '()))))
                                                                g$t$9581$dF01I))))
                                                          (g$syntax-dispatch$7982$dF01I
                                                            g$t$9581$dF01I
                                                            '(any . any)))))
                                                      g$t$9553$dF01I))))
                                                (g$syntax-dispatch$7982$dF01I
                                                  g$t$9553$dF01I
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9541$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$9541$dF01I
                                        '(any any)))))
                                  g$t$9537$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$9537$dF01I
                              'any))))
                        g$p$9534$dF01I)))))
          (g$cvt$9533$dF01I g$pattern$9530$dF01I '0 '())))))
   (g$syntax-dispatch$7982$dF01I
     g$syntax-dispatch$11485$dF01I
     ((case-lambda
        (()
         (letrec* ((g$stx^$9627$dF01I
                     (case-lambda
                       ((g$e$9737$dF01I
                          g$m*$9738$dF01I
                          g$s*$9739$dF01I
                          g$ae*$9740$dF01I)
                        (if (if (null? g$m*$9738$dF01I)
                              (if (null? g$s*$9739$dF01I)
                                (begin '#f (null? g$ae*$9740$dF01I))
                                '#f)
                              '#f)
                          g$e$9737$dF01I
                          (g$mkstx$7692$dF01I
                            g$e$9737$dF01I
                            g$m*$9738$dF01I
                            g$s*$9739$dF01I
                            g$ae*$9740$dF01I)))))
                   (g$match-each$9628$dF01I
                     (case-lambda
                       ((g$e$9721$dF01I
                          g$p$9722$dF01I
                          g$m*$9723$dF01I
                          g$s*$9724$dF01I
                          g$ae*$9725$dF01I)
                        (if (pair? g$e$9721$dF01I)
                          ((case-lambda
                             ((g$first$9726$dF01I)
                              (if g$first$9726$dF01I
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9727$dF01I)
                                      (if g$rest$9727$dF01I
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9726$dF01I
                                            g$rest$9727$dF01I))
                                        '#f)))
                                   (g$match-each$9628$dF01I
                                     (cdr g$e$9721$dF01I)
                                     g$p$9722$dF01I
                                     g$m*$9723$dF01I
                                     g$s*$9724$dF01I
                                     g$ae*$9725$dF01I)))
                                '#f)))
                           (g$match$9634$dF01I
                             (car g$e$9721$dF01I)
                             g$p$9722$dF01I
                             g$m*$9723$dF01I
                             g$s*$9724$dF01I
                             g$ae*$9725$dF01I
                             '()))
                          (if (null? g$e$9721$dF01I)
                            '()
                            (if (g$stx?$7676$dF01I g$e$9721$dF01I)
                              (if (not (g$top-marked?$7642$dF01I
                                         g$m*$9723$dF01I))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7691$dF01I
                                         g$m*$9723$dF01I
                                         g$s*$9724$dF01I
                                         g$ae*$9725$dF01I
                                         g$e$9721$dF01I)))
                                    (case-lambda
                                      ((g$m*$9731$dF01I
                                         g$s*$9732$dF01I
                                         g$ae*$9733$dF01I)
                                       ((case-lambda
                                          ((g$ae*$9734$dF01I
                                             g$s*$9735$dF01I
                                             g$m*$9736$dF01I)
                                           (g$match-each$9628$dF01I
                                             (g$stx-expr$7678$dF01I
                                               g$e$9721$dF01I)
                                             g$p$9722$dF01I
                                             g$m*$9736$dF01I
                                             g$s*$9735$dF01I
                                             g$ae*$9734$dF01I)))
                                        g$ae*$9733$dF01I
                                        g$s*$9732$dF01I
                                        g$m*$9731$dF01I)))))
                                '#f)
                              (if (annotation? g$e$9721$dF01I)
                                (g$match-each$9628$dF01I
                                  (annotation-expression g$e$9721$dF01I)
                                  g$p$9722$dF01I
                                  g$m*$9723$dF01I
                                  g$s*$9724$dF01I
                                  g$ae*$9725$dF01I)
                                '#f)))))))
                   (g$match-each+$9629$dF01I
                     (case-lambda
                       ((g$e$9689$dF01I
                          g$x-pat$9690$dF01I
                          g$y-pat$9691$dF01I
                          g$z-pat$9692$dF01I
                          g$m*$9693$dF01I
                          g$s*$9694$dF01I
                          g$ae*$9695$dF01I
                          g$r$9696$dF01I)
                        ((letrec ((g$f$9697$dF01I
                                    (case-lambda
                                      ((g$e$9698$dF01I
                                         g$m*$9699$dF01I
                                         g$s*$9700$dF01I
                                         g$ae*$9701$dF01I)
                                       (if (pair? g$e$9698$dF01I)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9697$dF01I
                                                (cdr g$e$9698$dF01I)
                                                g$m*$9699$dF01I
                                                g$s*$9700$dF01I
                                                g$ae*$9701$dF01I)))
                                           (case-lambda
                                             ((g$xr*$9705$dF01I
                                                g$y-pat$9706$dF01I
                                                g$r$9707$dF01I)
                                              ((case-lambda
                                                 ((g$r$9708$dF01I
                                                    g$y-pat$9709$dF01I
                                                    g$xr*$9710$dF01I)
                                                  (if g$r$9708$dF01I
                                                    (if (null?
                                                          g$y-pat$9709$dF01I)
                                                      ((case-lambda
                                                         ((g$xr$9711$dF01I)
                                                          (if g$xr$9711$dF01I
                                                            (values
                                                              (cons
                                                                g$xr$9711$dF01I
                                                                g$xr*$9710$dF01I)
                                                              g$y-pat$9709$dF01I
                                                              g$r$9708$dF01I)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9634$dF01I
                                                         (car g$e$9698$dF01I)
                                                         g$x-pat$9690$dF01I
                                                         g$m*$9699$dF01I
                                                         g$s*$9700$dF01I
                                                         g$ae*$9701$dF01I
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9709$dF01I)
                                                        (g$match$9634$dF01I
                                                          (car g$e$9698$dF01I)
                                                          (car g$y-pat$9709$dF01I)
                                                          g$m*$9699$dF01I
                                                          g$s*$9700$dF01I
                                                          g$ae*$9701$dF01I
                                                          g$r$9708$dF01I)))
                                                    (values '#f '#f '#f))))
                                               g$r$9707$dF01I
                                               g$y-pat$9706$dF01I
                                               g$xr*$9705$dF01I))))
                                         (if (g$stx?$7676$dF01I g$e$9698$dF01I)
                                           (if (g$top-marked?$7642$dF01I
                                                 g$m*$9699$dF01I)
                                             (values
                                               '()
                                               g$y-pat$9691$dF01I
                                               (g$match$9634$dF01I
                                                 g$e$9698$dF01I
                                                 g$z-pat$9692$dF01I
                                                 g$m*$9699$dF01I
                                                 g$s*$9700$dF01I
                                                 g$ae*$9701$dF01I
                                                 g$r$9696$dF01I))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7691$dF01I
                                                    g$m*$9699$dF01I
                                                    g$s*$9700$dF01I
                                                    g$ae*$9701$dF01I
                                                    g$e$9698$dF01I)))
                                               (case-lambda
                                                 ((g$m*$9715$dF01I
                                                    g$s*$9716$dF01I
                                                    g$ae*$9717$dF01I)
                                                  ((case-lambda
                                                     ((g$ae*$9718$dF01I
                                                        g$s*$9719$dF01I
                                                        g$m*$9720$dF01I)
                                                      (g$f$9697$dF01I
                                                        (g$stx-expr$7678$dF01I
                                                          g$e$9698$dF01I)
                                                        g$m*$9720$dF01I
                                                        g$s*$9719$dF01I
                                                        g$ae*$9718$dF01I)))
                                                   g$ae*$9717$dF01I
                                                   g$s*$9716$dF01I
                                                   g$m*$9715$dF01I)))))
                                           (if (annotation? g$e$9698$dF01I)
                                             (g$f$9697$dF01I
                                               (annotation-expression
                                                 g$e$9698$dF01I)
                                               g$m*$9699$dF01I
                                               g$s*$9700$dF01I
                                               g$ae*$9701$dF01I)
                                             (values
                                               '()
                                               g$y-pat$9691$dF01I
                                               (g$match$9634$dF01I
                                                 g$e$9698$dF01I
                                                 g$z-pat$9692$dF01I
                                                 g$m*$9699$dF01I
                                                 g$s*$9700$dF01I
                                                 g$ae*$9701$dF01I
                                                 g$r$9696$dF01I)))))))))
                           g$f$9697$dF01I)
                         g$e$9689$dF01I
                         g$m*$9693$dF01I
                         g$s*$9694$dF01I
                         g$ae*$9695$dF01I))))
                   (g$match-each-any$9630$dF01I
                     (case-lambda
                       ((g$e$9675$dF01I
                          g$m*$9676$dF01I
                          g$s*$9677$dF01I
                          g$ae*$9678$dF01I)
                        (if (pair? g$e$9675$dF01I)
                          ((case-lambda
                             ((g$l$9679$dF01I)
                              (if g$l$9679$dF01I
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9627$dF01I
                                      (car g$e$9675$dF01I)
                                      g$m*$9676$dF01I
                                      g$s*$9677$dF01I
                                      g$ae*$9678$dF01I)
                                    g$l$9679$dF01I))
                                '#f)))
                           (g$match-each-any$9630$dF01I
                             (cdr g$e$9675$dF01I)
                             g$m*$9676$dF01I
                             g$s*$9677$dF01I
                             g$ae*$9678$dF01I))
                          (if (null? g$e$9675$dF01I)
                            '()
                            (if (g$stx?$7676$dF01I g$e$9675$dF01I)
                              (if (not (g$top-marked?$7642$dF01I
                                         g$m*$9676$dF01I))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7691$dF01I
                                         g$m*$9676$dF01I
                                         g$s*$9677$dF01I
                                         g$ae*$9678$dF01I
                                         g$e$9675$dF01I)))
                                    (case-lambda
                                      ((g$m*$9683$dF01I
                                         g$s*$9684$dF01I
                                         g$ae*$9685$dF01I)
                                       ((case-lambda
                                          ((g$ae*$9686$dF01I
                                             g$s*$9687$dF01I
                                             g$m*$9688$dF01I)
                                           (g$match-each-any$9630$dF01I
                                             (g$stx-expr$7678$dF01I
                                               g$e$9675$dF01I)
                                             g$m*$9688$dF01I
                                             g$s*$9687$dF01I
                                             g$ae*$9686$dF01I)))
                                        g$ae*$9685$dF01I
                                        g$s*$9684$dF01I
                                        g$m*$9683$dF01I)))))
                                '#f)
                              (if (annotation? g$e$9675$dF01I)
                                (g$match-each-any$9630$dF01I
                                  (annotation-expression g$e$9675$dF01I)
                                  g$m*$9676$dF01I
                                  g$s*$9677$dF01I
                                  g$ae*$9678$dF01I)
                                '#f)))))))
                   (g$match-empty$9631$dF01I
                     (case-lambda
                       ((g$p$9672$dF01I g$r$9673$dF01I)
                        (if (null? g$p$9672$dF01I)
                          g$r$9673$dF01I
                          (if (eq? g$p$9672$dF01I '_)
                            g$r$9673$dF01I
                            (if (eq? g$p$9672$dF01I 'any)
                              (cons '() g$r$9673$dF01I)
                              (if (pair? g$p$9672$dF01I)
                                (g$match-empty$9631$dF01I
                                  (car g$p$9672$dF01I)
                                  (g$match-empty$9631$dF01I
                                    (cdr g$p$9672$dF01I)
                                    g$r$9673$dF01I))
                                (if (eq? g$p$9672$dF01I 'each-any)
                                  (cons '() g$r$9673$dF01I)
                                  ((case-lambda
                                     ((g$t$9674$dF01I)
                                      (if (g$memv$5056$dF01I
                                            g$t$9674$dF01I
                                            '(each))
                                        (g$match-empty$9631$dF01I
                                          (vector-ref g$p$9672$dF01I '1)
                                          g$r$9673$dF01I)
                                        (if (g$memv$5056$dF01I
                                              g$t$9674$dF01I
                                              '(each+))
                                          (g$match-empty$9631$dF01I
                                            (vector-ref g$p$9672$dF01I '1)
                                            (g$match-empty$9631$dF01I
                                              (reverse
                                                (vector-ref g$p$9672$dF01I '2))
                                              (g$match-empty$9631$dF01I
                                                (vector-ref g$p$9672$dF01I '3)
                                                g$r$9673$dF01I)))
                                          (if (g$memv$5056$dF01I
                                                g$t$9674$dF01I
                                                '(free-id atom))
                                            g$r$9673$dF01I
                                            (if (g$memv$5056$dF01I
                                                  g$t$9674$dF01I
                                                  '(scheme-id atom))
                                              g$r$9673$dF01I
                                              (if (g$memv$5056$dF01I
                                                    g$t$9674$dF01I
                                                    '(vector))
                                                (g$match-empty$9631$dF01I
                                                  (vector-ref g$p$9672$dF01I '1)
                                                  g$r$9673$dF01I)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9672$dF01I))))))))
                                   (vector-ref g$p$9672$dF01I '0))))))))))
                   (g$combine$9632$dF01I
                     (case-lambda
                       ((g$r*$9670$dF01I g$r$9671$dF01I)
                        (if (null? (car g$r*$9670$dF01I))
                          g$r$9671$dF01I
                          (cons
                            (g$map$5063$dF01I car g$r*$9670$dF01I)
                            (g$combine$9632$dF01I
                              (g$map$5063$dF01I cdr g$r*$9670$dF01I)
                              g$r$9671$dF01I))))))
                   (g$match*$9633$dF01I
                     (case-lambda
                       ((g$e$9652$dF01I
                          g$p$9653$dF01I
                          g$m*$9654$dF01I
                          g$s*$9655$dF01I
                          g$ae*$9656$dF01I
                          g$r$9657$dF01I)
                        (if (null? g$p$9653$dF01I)
                          (if (null? g$e$9652$dF01I)
                            (begin '#f g$r$9657$dF01I)
                            '#f)
                          (if (pair? g$p$9653$dF01I)
                            (if (pair? g$e$9652$dF01I)
                              (begin
                                '#f
                                (g$match$9634$dF01I
                                  (car g$e$9652$dF01I)
                                  (car g$p$9653$dF01I)
                                  g$m*$9654$dF01I
                                  g$s*$9655$dF01I
                                  g$ae*$9656$dF01I
                                  (g$match$9634$dF01I
                                    (cdr g$e$9652$dF01I)
                                    (cdr g$p$9653$dF01I)
                                    g$m*$9654$dF01I
                                    g$s*$9655$dF01I
                                    g$ae*$9656$dF01I
                                    g$r$9657$dF01I)))
                              '#f)
                            (if (eq? g$p$9653$dF01I 'each-any)
                              ((case-lambda
                                 ((g$l$9658$dF01I)
                                  (if g$l$9658$dF01I
                                    (begin
                                      '#f
                                      (cons g$l$9658$dF01I g$r$9657$dF01I))
                                    '#f)))
                               (g$match-each-any$9630$dF01I
                                 g$e$9652$dF01I
                                 g$m*$9654$dF01I
                                 g$s*$9655$dF01I
                                 g$ae*$9656$dF01I))
                              ((case-lambda
                                 ((g$t$9659$dF01I)
                                  (if (g$memv$5056$dF01I g$t$9659$dF01I '(each))
                                    (if (null? g$e$9652$dF01I)
                                      (g$match-empty$9631$dF01I
                                        (vector-ref g$p$9653$dF01I '1)
                                        g$r$9657$dF01I)
                                      ((case-lambda
                                         ((g$r*$9660$dF01I)
                                          (if g$r*$9660$dF01I
                                            (begin
                                              '#f
                                              (g$combine$9632$dF01I
                                                g$r*$9660$dF01I
                                                g$r$9657$dF01I))
                                            '#f)))
                                       (g$match-each$9628$dF01I
                                         g$e$9652$dF01I
                                         (vector-ref g$p$9653$dF01I '1)
                                         g$m*$9654$dF01I
                                         g$s*$9655$dF01I
                                         g$ae*$9656$dF01I)))
                                    (if (g$memv$5056$dF01I
                                          g$t$9659$dF01I
                                          '(free-id))
                                      (if (symbol? g$e$9652$dF01I)
                                        (if (g$top-marked?$7642$dF01I
                                              g$m*$9654$dF01I)
                                          (if (g$free-id=?$7708$dF01I
                                                (g$stx^$9627$dF01I
                                                  g$e$9652$dF01I
                                                  g$m*$9654$dF01I
                                                  g$s*$9655$dF01I
                                                  g$ae*$9656$dF01I)
                                                (vector-ref g$p$9653$dF01I '1))
                                            (begin '#f g$r$9657$dF01I)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5056$dF01I
                                            g$t$9659$dF01I
                                            '(scheme-id))
                                        (if (symbol? g$e$9652$dF01I)
                                          (if (g$top-marked?$7642$dF01I
                                                g$m*$9654$dF01I)
                                            (if (g$free-id=?$7708$dF01I
                                                  (g$stx^$9627$dF01I
                                                    g$e$9652$dF01I
                                                    g$m*$9654$dF01I
                                                    g$s*$9655$dF01I
                                                    g$ae*$9656$dF01I)
                                                  (g$scheme-stx$7925$dF01I
                                                    (vector-ref
                                                      g$p$9653$dF01I
                                                      '1)))
                                              (begin '#f g$r$9657$dF01I)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5056$dF01I
                                              g$t$9659$dF01I
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9629$dF01I
                                                 g$e$9652$dF01I
                                                 (vector-ref g$p$9653$dF01I '1)
                                                 (vector-ref g$p$9653$dF01I '2)
                                                 (vector-ref g$p$9653$dF01I '3)
                                                 g$m*$9654$dF01I
                                                 g$s*$9655$dF01I
                                                 g$ae*$9656$dF01I
                                                 g$r$9657$dF01I)))
                                            (case-lambda
                                              ((g$xr*$9664$dF01I
                                                 g$y-pat$9665$dF01I
                                                 g$r$9666$dF01I)
                                               ((case-lambda
                                                  ((g$r$9667$dF01I
                                                     g$y-pat$9668$dF01I
                                                     g$xr*$9669$dF01I)
                                                   (if g$r$9667$dF01I
                                                     (if (null?
                                                           g$y-pat$9668$dF01I)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9669$dF01I)
                                                           (g$match-empty$9631$dF01I
                                                             (vector-ref
                                                               g$p$9653$dF01I
                                                               '1)
                                                             g$r$9667$dF01I)
                                                           (g$combine$9632$dF01I
                                                             g$xr*$9669$dF01I
                                                             g$r$9667$dF01I)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9666$dF01I
                                                g$y-pat$9665$dF01I
                                                g$xr*$9664$dF01I))))
                                          (if (g$memv$5056$dF01I
                                                g$t$9659$dF01I
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref g$p$9653$dF01I '1)
                                                  (g$strip$7714$dF01I
                                                    g$e$9652$dF01I
                                                    g$m*$9654$dF01I))
                                              (begin '#f g$r$9657$dF01I)
                                              '#f)
                                            (if (g$memv$5056$dF01I
                                                  g$t$9659$dF01I
                                                  '(vector))
                                              (if (vector? g$e$9652$dF01I)
                                                (begin
                                                  '#f
                                                  (g$match$9634$dF01I
                                                    (vector->list
                                                      g$e$9652$dF01I)
                                                    (vector-ref
                                                      g$p$9653$dF01I
                                                      '1)
                                                    g$m*$9654$dF01I
                                                    g$s*$9655$dF01I
                                                    g$ae*$9656$dF01I
                                                    g$r$9657$dF01I))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9653$dF01I)))))))))
                               (vector-ref g$p$9653$dF01I '0))))))))
                   (g$match$9634$dF01I
                     (case-lambda
                       ((g$e$9637$dF01I
                          g$p$9638$dF01I
                          g$m*$9639$dF01I
                          g$s*$9640$dF01I
                          g$ae*$9641$dF01I
                          g$r$9642$dF01I)
                        (if (not g$r$9642$dF01I)
                          '#f
                          (if (eq? g$p$9638$dF01I '_)
                            g$r$9642$dF01I
                            (if (eq? g$p$9638$dF01I 'any)
                              (cons
                                (g$stx^$9627$dF01I
                                  g$e$9637$dF01I
                                  g$m*$9639$dF01I
                                  g$s*$9640$dF01I
                                  g$ae*$9641$dF01I)
                                g$r$9642$dF01I)
                              (if (g$stx?$7676$dF01I g$e$9637$dF01I)
                                (if (not (g$top-marked?$7642$dF01I
                                           g$m*$9639$dF01I))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7691$dF01I
                                           g$m*$9639$dF01I
                                           g$s*$9640$dF01I
                                           g$ae*$9641$dF01I
                                           g$e$9637$dF01I)))
                                      (case-lambda
                                        ((g$m*$9646$dF01I
                                           g$s*$9647$dF01I
                                           g$ae*$9648$dF01I)
                                         ((case-lambda
                                            ((g$ae*$9649$dF01I
                                               g$s*$9650$dF01I
                                               g$m*$9651$dF01I)
                                             (g$match$9634$dF01I
                                               (g$stx-expr$7678$dF01I
                                                 g$e$9637$dF01I)
                                               g$p$9638$dF01I
                                               g$m*$9651$dF01I
                                               g$s*$9650$dF01I
                                               g$ae*$9649$dF01I
                                               g$r$9642$dF01I)))
                                          g$ae*$9648$dF01I
                                          g$s*$9647$dF01I
                                          g$m*$9646$dF01I)))))
                                  '#f)
                                (if (annotation? g$e$9637$dF01I)
                                  (g$match$9634$dF01I
                                    (annotation-expression g$e$9637$dF01I)
                                    g$p$9638$dF01I
                                    g$m*$9639$dF01I
                                    g$s*$9640$dF01I
                                    g$ae*$9641$dF01I
                                    g$r$9642$dF01I)
                                  (g$match*$9633$dF01I
                                    g$e$9637$dF01I
                                    g$p$9638$dF01I
                                    g$m*$9639$dF01I
                                    g$s*$9640$dF01I
                                    g$ae*$9641$dF01I
                                    g$r$9642$dF01I))))))))))
           (case-lambda
             ((g$e$9635$dF01I g$p$9636$dF01I)
              (g$match$9634$dF01I
                g$e$9635$dF01I
                g$p$9636$dF01I
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$7983$dF01I
     g$ellipsis?$11486$dF01I
     (case-lambda
       ((g$x$9741$dF01I)
        (if (g$id?$7704$dF01I g$x$9741$dF01I)
          (begin
            '#f
            (g$free-id=?$7708$dF01I
              g$x$9741$dF01I
              (g$scheme-stx$7925$dF01I '...)))
          '#f))))
   (g$underscore?$7984$dF01I
     g$underscore?$11487$dF01I
     (case-lambda
       ((g$x$9742$dF01I)
        (if (g$id?$7704$dF01I g$x$9742$dF01I)
          (begin
            '#f
            (g$free-id=?$7708$dF01I
              g$x$9742$dF01I
              (g$scheme-stx$7925$dF01I '_)))
          '#f))))
   (g$verify-literals$7985$dF01I
     g$verify-literals$11488$dF01I
     (case-lambda
       ((g$lits$9743$dF01I g$expr$9744$dF01I)
        (g$for-each$5064$dF01I
          (case-lambda
            ((g$x$9745$dF01I)
             (if ((case-lambda
                    ((g$t$9746$dF01I)
                     (if g$t$9746$dF01I
                       g$t$9746$dF01I
                       ((case-lambda
                          ((g$t$9747$dF01I)
                           (if g$t$9747$dF01I
                             g$t$9747$dF01I
                             (begin
                               '#f
                               (g$underscore?$7984$dF01I g$x$9745$dF01I)))))
                        (g$ellipsis?$7983$dF01I g$x$9745$dF01I)))))
                  (not (g$id?$7704$dF01I g$x$9745$dF01I)))
               (g$syntax-violation$8094$dF01I
                 '#f
                 '"invalid literal"
                 g$expr$9744$dF01I
                 g$x$9745$dF01I)
               (void))))
          g$lits$9743$dF01I))))
   (g$syntax-case-transformer$7986$dF01I
     g$syntax-case-transformer$11489$dF01I
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9748$dF01I
                     (case-lambda
                       ((g$pvars$9805$dF01I
                          g$expr$9806$dF01I
                          g$y$9807$dF01I
                          g$r$9808$dF01I
                          g$mr$9809$dF01I)
                        ((case-lambda
                           ((g$ids$9810$dF01I g$levels$9811$dF01I)
                            ((case-lambda
                               ((g$labels$9812$dF01I g$new-vars$9813$dF01I)
                                ((case-lambda
                                   ((g$body$9814$dF01I)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7630$dF01I
                                        '#f
                                        g$new-vars$9813$dF01I
                                        g$body$9814$dF01I)
                                      g$y$9807$dF01I)))
                                 (g$chi-expr$8000$dF01I
                                   (g$add-subst$7694$dF01I
                                     (g$make-full-rib$7672$dF01I
                                       g$ids$9810$dF01I
                                       g$labels$9812$dF01I)
                                     g$expr$9806$dF01I)
                                   (append
                                     (g$map$5063$dF01I
                                       (case-lambda
                                         ((g$label$9815$dF01I
                                            g$var$9816$dF01I
                                            g$level$9817$dF01I)
                                          (cons
                                            g$label$9815$dF01I
                                            (g$make-binding$7720$dF01I
                                              'syntax
                                              (cons
                                                g$var$9816$dF01I
                                                g$level$9817$dF01I)))))
                                       g$labels$9812$dF01I
                                       g$new-vars$9813$dF01I
                                       (g$map$5063$dF01I
                                         cdr
                                         g$pvars$9805$dF01I))
                                     g$r$9808$dF01I)
                                   g$mr$9809$dF01I))))
                             (g$map$5063$dF01I
                               g$gen-label$7645$dF01I
                               g$ids$9810$dF01I)
                             (g$map$5063$dF01I
                               g$gen-lexical$7643$dF01I
                               g$ids$9810$dF01I))))
                         (g$map$5063$dF01I car g$pvars$9805$dF01I)
                         (g$map$5063$dF01I cdr g$pvars$9805$dF01I)))))
                   (g$invalid-ids-error$9749$dF01I
                     (case-lambda
                       ((g$id*$9799$dF01I g$e$9800$dF01I g$class$9801$dF01I)
                        ((letrec ((g$find$9802$dF01I
                                    (case-lambda
                                      ((g$id*$9803$dF01I g$ok*$9804$dF01I)
                                       (if (null? g$id*$9803$dF01I)
                                         (g$syntax-violation$8094$dF01I
                                           '#f
                                           '"invalid syntax"
                                           g$e$9800$dF01I)
                                         (if (g$id?$7704$dF01I
                                               (car g$id*$9803$dF01I))
                                           (if (g$bound-id-member?$7711$dF01I
                                                 (car g$id*$9803$dF01I)
                                                 g$ok*$9804$dF01I)
                                             (g$syntax-error$8091$dF01I
                                               (car g$id*$9803$dF01I)
                                               '"duplicate "
                                               g$class$9801$dF01I)
                                             (g$find$9802$dF01I
                                               (cdr g$id*$9803$dF01I)
                                               (cons
                                                 (car g$id*$9803$dF01I)
                                                 g$ok*$9804$dF01I)))
                                           (g$syntax-error$8091$dF01I
                                             (car g$id*$9803$dF01I)
                                             '"invalid "
                                             g$class$9801$dF01I)))))))
                           g$find$9802$dF01I)
                         g$id*$9799$dF01I
                         '()))))
                   (g$gen-clause$9750$dF01I
                     (case-lambda
                       ((g$x$9779$dF01I
                          g$keys$9780$dF01I
                          g$clauses$9781$dF01I
                          g$r$9782$dF01I
                          g$mr$9783$dF01I
                          g$pat$9784$dF01I
                          g$fender$9785$dF01I
                          g$expr$9786$dF01I)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7981$dF01I
                               g$pat$9784$dF01I
                               g$keys$9780$dF01I)))
                          (case-lambda
                            ((g$p$9789$dF01I g$pvars$9790$dF01I)
                             ((case-lambda
                                ((g$pvars$9791$dF01I g$p$9792$dF01I)
                                 (if (not (g$distinct-bound-ids?$7710$dF01I
                                            (g$map$5063$dF01I
                                              car
                                              g$pvars$9791$dF01I)))
                                   (g$invalid-ids-error$9749$dF01I
                                     (g$map$5063$dF01I car g$pvars$9791$dF01I)
                                     g$pat$9784$dF01I
                                     '"pattern variable")
                                   (if (not (g$for-all$5061$dF01I
                                              (case-lambda
                                                ((g$x$9793$dF01I)
                                                 (not (g$ellipsis?$7983$dF01I
                                                        (car g$x$9793$dF01I)))))
                                              g$pvars$9791$dF01I))
                                     (g$syntax-violation$8094$dF01I
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9784$dF01I)
                                     ((case-lambda
                                        ((g$y$9794$dF01I)
                                         ((case-lambda
                                            ((g$test$9795$dF01I)
                                             ((case-lambda
                                                ((g$conseq$9796$dF01I)
                                                 ((case-lambda
                                                    ((g$altern$9797$dF01I)
                                                     (list
                                                       (g$build-lambda$7630$dF01I
                                                         '#f
                                                         (list g$y$9794$dF01I)
                                                         (list
                                                           'if
                                                           g$test$9795$dF01I
                                                           g$conseq$9796$dF01I
                                                           g$altern$9797$dF01I))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9779$dF01I
                                                         (list
                                                           'quote
                                                           g$p$9792$dF01I)))))
                                                  (g$gen-syntax-case$9751$dF01I
                                                    g$x$9779$dF01I
                                                    g$keys$9780$dF01I
                                                    g$clauses$9781$dF01I
                                                    g$r$9782$dF01I
                                                    g$mr$9783$dF01I))))
                                              (g$build-dispatch-call$9748$dF01I
                                                g$pvars$9791$dF01I
                                                g$expr$9786$dF01I
                                                g$y$9794$dF01I
                                                g$r$9782$dF01I
                                                g$mr$9783$dF01I))))
                                          (if (eq? g$fender$9785$dF01I '#t)
                                            g$y$9794$dF01I
                                            ((case-lambda
                                               ((g$call$9798$dF01I)
                                                (list
                                                  'if
                                                  g$y$9794$dF01I
                                                  g$call$9798$dF01I
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9748$dF01I
                                               g$pvars$9791$dF01I
                                               g$fender$9785$dF01I
                                               g$y$9794$dF01I
                                               g$r$9782$dF01I
                                               g$mr$9783$dF01I))))))
                                      (g$gen-lexical$7643$dF01I 'tmp))))))
                              g$pvars$9790$dF01I
                              g$p$9789$dF01I)))))))
                   (g$gen-syntax-case$9751$dF01I
                     (case-lambda
                       ((g$x$9762$dF01I
                          g$keys$9763$dF01I
                          g$clauses$9764$dF01I
                          g$r$9765$dF01I
                          g$mr$9766$dF01I)
                        (if (null? g$clauses$9764$dF01I)
                          (list '(primitive syntax-error) g$x$9762$dF01I)
                          ((case-lambda
                             ((g$t$9767$dF01I)
                              ((case-lambda
                                 ((g$ls/false$9768$dF01I)
                                  (if g$ls/false$9768$dF01I
                                    (apply
                                      (case-lambda
                                        ((g$pat$9769$dF01I g$expr$9770$dF01I)
                                         (if (if (g$id?$7704$dF01I
                                                   g$pat$9769$dF01I)
                                               (if (not (g$bound-id-member?$7711$dF01I
                                                          g$pat$9769$dF01I
                                                          g$keys$9763$dF01I))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7983$dF01I
                                                          g$pat$9769$dF01I)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7708$dF01I
                                                 g$pat$9769$dF01I
                                                 (g$scheme-stx$7925$dF01I '_))
                                             (g$chi-expr$8000$dF01I
                                               g$expr$9770$dF01I
                                               g$r$9765$dF01I
                                               g$mr$9766$dF01I)
                                             ((case-lambda
                                                ((g$lab$9771$dF01I
                                                   g$lex$9772$dF01I)
                                                 ((case-lambda
                                                    ((g$body$9773$dF01I)
                                                     (list
                                                       (g$build-lambda$7630$dF01I
                                                         '#f
                                                         (list g$lex$9772$dF01I)
                                                         g$body$9773$dF01I)
                                                       g$x$9762$dF01I)))
                                                  (g$chi-expr$8000$dF01I
                                                    (g$add-subst$7694$dF01I
                                                      (g$make-full-rib$7672$dF01I
                                                        (list g$pat$9769$dF01I)
                                                        (list g$lab$9771$dF01I))
                                                      g$expr$9770$dF01I)
                                                    (cons
                                                      (cons
                                                        g$lab$9771$dF01I
                                                        (g$make-binding$7720$dF01I
                                                          'syntax
                                                          (cons
                                                            g$lex$9772$dF01I
                                                            '0)))
                                                      g$r$9765$dF01I)
                                                    g$mr$9766$dF01I))))
                                              (g$gen-label$7645$dF01I
                                                g$pat$9769$dF01I)
                                              (g$gen-lexical$7643$dF01I
                                                g$pat$9769$dF01I)))
                                           (g$gen-clause$9750$dF01I
                                             g$x$9762$dF01I
                                             g$keys$9763$dF01I
                                             (cdr g$clauses$9764$dF01I)
                                             g$r$9765$dF01I
                                             g$mr$9766$dF01I
                                             g$pat$9769$dF01I
                                             '#t
                                             g$expr$9770$dF01I))))
                                      g$ls/false$9768$dF01I)
                                    ((case-lambda
                                       ((g$t$9774$dF01I)
                                        ((case-lambda
                                           ((g$ls/false$9775$dF01I)
                                            (if g$ls/false$9775$dF01I
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9776$dF01I
                                                     g$fender$9777$dF01I
                                                     g$expr$9778$dF01I)
                                                   (g$gen-clause$9750$dF01I
                                                     g$x$9762$dF01I
                                                     g$keys$9763$dF01I
                                                     (cdr g$clauses$9764$dF01I)
                                                     g$r$9765$dF01I
                                                     g$mr$9766$dF01I
                                                     g$pat$9776$dF01I
                                                     g$fender$9777$dF01I
                                                     g$expr$9778$dF01I)))
                                                g$ls/false$9775$dF01I)
                                              (g$syntax-violation$8094$dF01I
                                                '#f
                                                '"invalid syntax"
                                                g$t$9774$dF01I))))
                                         (g$syntax-dispatch$7982$dF01I
                                           g$t$9774$dF01I
                                           '(any any any)))))
                                     g$t$9767$dF01I))))
                               (g$syntax-dispatch$7982$dF01I
                                 g$t$9767$dF01I
                                 '(any any)))))
                           (car g$clauses$9764$dF01I)))))))
           (case-lambda
             ((g$e$9752$dF01I g$r$9753$dF01I g$mr$9754$dF01I)
              ((case-lambda
                 ((g$t$9755$dF01I)
                  ((case-lambda
                     ((g$ls/false$9756$dF01I)
                      (if g$ls/false$9756$dF01I
                        (apply
                          (case-lambda
                            ((g$expr$9757$dF01I
                               g$keys$9758$dF01I
                               g$clauses$9759$dF01I)
                             (begin
                               (g$verify-literals$7985$dF01I
                                 g$keys$9758$dF01I
                                 g$e$9752$dF01I)
                               ((case-lambda
                                  ((g$x$9760$dF01I)
                                   ((case-lambda
                                      ((g$body$9761$dF01I)
                                       (list
                                         (g$build-lambda$7630$dF01I
                                           '#f
                                           (list g$x$9760$dF01I)
                                           g$body$9761$dF01I)
                                         (g$chi-expr$8000$dF01I
                                           g$expr$9757$dF01I
                                           g$r$9753$dF01I
                                           g$mr$9754$dF01I))))
                                    (g$gen-syntax-case$9751$dF01I
                                      g$x$9760$dF01I
                                      g$keys$9758$dF01I
                                      g$clauses$9759$dF01I
                                      g$r$9753$dF01I
                                      g$mr$9754$dF01I))))
                                (g$gen-lexical$7643$dF01I 'tmp)))))
                          g$ls/false$9756$dF01I)
                        (g$syntax-violation$8094$dF01I
                          '#f
                          '"invalid syntax"
                          g$t$9755$dF01I))))
                   (g$syntax-dispatch$7982$dF01I
                     g$t$9755$dF01I
                     '(_ any each-any . each-any)))))
               g$e$9752$dF01I))))))))
   (g$ellipsis-map$7987$dF01I
     g$ellipsis-map$11490$dF01I
     (case-lambda
       ((g$proc$9818$dF01I g$ls$9819$dF01I . g$ls*$9820$dF01I)
        (letrec* ((g$who$9821$dF01I '...))
          (begin
            (if (not (list? g$ls$9819$dF01I))
              (assertion-violation
                g$who$9821$dF01I
                '"not a list"
                g$ls$9819$dF01I)
              (void))
            (if (not (null? g$ls*$9820$dF01I))
              ((case-lambda
                 ((g$n$9822$dF01I)
                  (g$for-each$5064$dF01I
                    (case-lambda
                      ((g$x$9823$dF01I)
                       (begin
                         (if (not (list? g$x$9823$dF01I))
                           (assertion-violation
                             g$who$9821$dF01I
                             '"not a list"
                             g$x$9823$dF01I)
                           (void))
                         (if (not (= (length g$x$9823$dF01I) g$n$9822$dF01I))
                           (assertion-violation
                             g$who$9821$dF01I
                             '"length mismatch"
                             g$ls$9819$dF01I
                             g$x$9823$dF01I)
                           (void)))))
                    g$ls*$9820$dF01I)))
               (length g$ls$9819$dF01I))
              (void))
            (apply
              g$map$5063$dF01I
              g$proc$9818$dF01I
              g$ls$9819$dF01I
              g$ls*$9820$dF01I))))))
   (g$syntax-transformer$7988$dF01I
     g$syntax-transformer$11491$dF01I
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9824$dF01I
                     (case-lambda
                       ((g$src$9884$dF01I
                          g$e$9885$dF01I
                          g$r$9886$dF01I
                          g$maps$9887$dF01I
                          g$ellipsis?$9888$dF01I
                          g$vec?$9889$dF01I)
                        ((case-lambda
                           ((g$t$9890$dF01I)
                            ((case-lambda
                               ((g$ls/false$9891$dF01I)
                                (if (if g$ls/false$9891$dF01I
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9892$dF01I)
                                             (g$ellipsis?$9888$dF01I
                                               g$dots$9892$dF01I)))
                                          g$ls/false$9891$dF01I))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9893$dF01I)
                                       (g$syntax-violation$8094$dF01I
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9884$dF01I)))
                                    g$ls/false$9891$dF01I)
                                  ((case-lambda
                                     ((g$t$9894$dF01I)
                                      ((case-lambda
                                         ((g$ls/false$9895$dF01I)
                                          (if (if g$ls/false$9895$dF01I
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9896$dF01I)
                                                       (g$id?$7704$dF01I
                                                         g$id$9896$dF01I)))
                                                    g$ls/false$9895$dF01I))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9897$dF01I)
                                                 ((case-lambda
                                                    ((g$label$9898$dF01I)
                                                     ((case-lambda
                                                        ((g$b$9899$dF01I)
                                                         (if (eq? (g$binding-type$7721$dF01I
                                                                    g$b$9899$dF01I)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$9902$dF01I)
                                                                    (g$gen-ref$9825$dF01I
                                                                      g$src$9884$dF01I
                                                                      (car g$var.lev$9902$dF01I)
                                                                      (cdr g$var.lev$9902$dF01I)
                                                                      g$maps$9887$dF01I)))
                                                                 (g$binding-value$7722$dF01I
                                                                   g$b$9899$dF01I))))
                                                             (case-lambda
                                                               ((g$var$9903$dF01I
                                                                  g$maps$9904$dF01I)
                                                                ((case-lambda
                                                                   ((g$maps$9905$dF01I
                                                                      g$var$9906$dF01I)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$9906$dF01I)
                                                                      g$maps$9905$dF01I)))
                                                                 g$maps$9904$dF01I
                                                                 g$var$9903$dF01I))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$9885$dF01I)
                                                             g$maps$9887$dF01I))))
                                                      (g$label->binding$7719$dF01I
                                                        g$label$9898$dF01I
                                                        g$r$9886$dF01I))))
                                                  (g$id->label$7717$dF01I
                                                    g$e$9885$dF01I))))
                                              g$ls/false$9895$dF01I)
                                            ((case-lambda
                                               ((g$t$9907$dF01I)
                                                ((case-lambda
                                                   ((g$ls/false$9908$dF01I)
                                                    (if (if g$ls/false$9908$dF01I
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9909$dF01I
                                                                   g$e$9910$dF01I)
                                                                 (g$ellipsis?$9888$dF01I
                                                                   g$dots$9909$dF01I)))
                                                              g$ls/false$9908$dF01I))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9911$dF01I
                                                             g$e$9912$dF01I)
                                                           (if g$vec?$9889$dF01I
                                                             (g$syntax-violation$8094$dF01I
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9884$dF01I)
                                                             (g$gen-syntax$9824$dF01I
                                                               g$src$9884$dF01I
                                                               g$e$9912$dF01I
                                                               g$r$9886$dF01I
                                                               g$maps$9887$dF01I
                                                               (case-lambda
                                                                 ((g$x$9913$dF01I)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9908$dF01I)
                                                      ((case-lambda
                                                         ((g$t$9914$dF01I)
                                                          ((case-lambda
                                                             ((g$ls/false$9915$dF01I)
                                                              (if (if g$ls/false$9915$dF01I
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9916$dF01I
                                                                             g$dots$9917$dF01I
                                                                             g$y$9918$dF01I)
                                                                           (g$ellipsis?$9888$dF01I
                                                                             g$dots$9917$dF01I)))
                                                                        g$ls/false$9915$dF01I))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9919$dF01I
                                                                       g$dots$9920$dF01I
                                                                       g$y$9921$dF01I)
                                                                     ((letrec ((g$f$9922$dF01I
                                                                                 (case-lambda
                                                                                   ((g$y$9923$dF01I
                                                                                      g$k$9924$dF01I)
                                                                                    ((case-lambda
                                                                                       ((g$t$9925$dF01I)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9926$dF01I)
                                                                                            (if g$ls/false$9926$dF01I
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9924$dF01I
                                                                                                     g$maps$9887$dF01I)))
                                                                                                g$ls/false$9926$dF01I)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9927$dF01I)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9928$dF01I)
                                                                                                      (if (if g$ls/false$9928$dF01I
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9929$dF01I
                                                                                                                     g$y$9930$dF01I)
                                                                                                                   (g$ellipsis?$9888$dF01I
                                                                                                                     g$dots$9929$dF01I)))
                                                                                                                g$ls/false$9928$dF01I))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9931$dF01I
                                                                                                               g$y$9932$dF01I)
                                                                                                             (g$f$9922$dF01I
                                                                                                               g$y$9932$dF01I
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9933$dF01I)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9924$dF01I
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9933$dF01I))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9936$dF01I
                                                                                                                         g$maps$9937$dF01I)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9938$dF01I
                                                                                                                             g$x$9939$dF01I)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9938$dF01I))
                                                                                                                             (g$syntax-violation$8094$dF01I
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9884$dF01I)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9827$dF01I
                                                                                                                                 g$x$9939$dF01I
                                                                                                                                 (car g$maps$9938$dF01I))
                                                                                                                               (cdr g$maps$9938$dF01I)))))
                                                                                                                        g$maps$9937$dF01I
                                                                                                                        g$x$9936$dF01I)))))))))
                                                                                                          g$ls/false$9928$dF01I)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9940$dF01I)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9941$dF01I)
                                                                                                                (if g$ls/false$9941$dF01I
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9824$dF01I
                                                                                                                              g$src$9884$dF01I
                                                                                                                              g$y$9923$dF01I
                                                                                                                              g$r$9886$dF01I
                                                                                                                              g$maps$9887$dF01I
                                                                                                                              g$ellipsis?$9888$dF01I
                                                                                                                              g$vec?$9889$dF01I)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9944$dF01I
                                                                                                                              g$maps$9945$dF01I)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9946$dF01I
                                                                                                                                  g$y$9947$dF01I)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9924$dF01I
                                                                                                                                       g$maps$9946$dF01I)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9950$dF01I
                                                                                                                                       g$maps$9951$dF01I)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9952$dF01I
                                                                                                                                           g$x$9953$dF01I)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9826$dF01I
                                                                                                                                             g$x$9953$dF01I
                                                                                                                                             g$y$9947$dF01I)
                                                                                                                                           g$maps$9952$dF01I)))
                                                                                                                                      g$maps$9951$dF01I
                                                                                                                                      g$x$9950$dF01I))))))
                                                                                                                             g$maps$9945$dF01I
                                                                                                                             g$y$9944$dF01I))))))
                                                                                                                    g$ls/false$9941$dF01I)
                                                                                                                  (g$syntax-violation$8094$dF01I
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9940$dF01I))))
                                                                                                             (g$syntax-dispatch$7982$dF01I
                                                                                                               g$t$9940$dF01I
                                                                                                               '_))))
                                                                                                         g$t$9927$dF01I))))
                                                                                                   (g$syntax-dispatch$7982$dF01I
                                                                                                     g$t$9927$dF01I
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9925$dF01I))))
                                                                                         (g$syntax-dispatch$7982$dF01I
                                                                                           g$t$9925$dF01I
                                                                                           '()))))
                                                                                     g$y$9923$dF01I)))))
                                                                        g$f$9922$dF01I)
                                                                      g$y$9921$dF01I
                                                                      (case-lambda
                                                                        ((g$maps$9954$dF01I)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9824$dF01I
                                                                                g$src$9884$dF01I
                                                                                g$x$9919$dF01I
                                                                                g$r$9886$dF01I
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9954$dF01I)
                                                                                g$ellipsis?$9888$dF01I
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9957$dF01I
                                                                                g$maps$9958$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$maps$9959$dF01I
                                                                                    g$x$9960$dF01I)
                                                                                  (if (null?
                                                                                        (car g$maps$9959$dF01I))
                                                                                    (g$syntax-violation$8094$dF01I
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9884$dF01I)
                                                                                    (values
                                                                                      (g$gen-map$9828$dF01I
                                                                                        g$x$9960$dF01I
                                                                                        (car g$maps$9959$dF01I))
                                                                                      (cdr g$maps$9959$dF01I)))))
                                                                               g$maps$9958$dF01I
                                                                               g$x$9957$dF01I)))))))))
                                                                  g$ls/false$9915$dF01I)
                                                                ((case-lambda
                                                                   ((g$t$9961$dF01I)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9962$dF01I)
                                                                        (if g$ls/false$9962$dF01I
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9963$dF01I
                                                                                 g$y$9964$dF01I)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9824$dF01I
                                                                                      g$src$9884$dF01I
                                                                                      g$x$9963$dF01I
                                                                                      g$r$9886$dF01I
                                                                                      g$maps$9887$dF01I
                                                                                      g$ellipsis?$9888$dF01I
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9967$dF01I
                                                                                      g$maps$9968$dF01I)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9969$dF01I
                                                                                          g$xnew$9970$dF01I)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9824$dF01I
                                                                                               g$src$9884$dF01I
                                                                                               g$y$9964$dF01I
                                                                                               g$r$9886$dF01I
                                                                                               g$maps$9969$dF01I
                                                                                               g$ellipsis?$9888$dF01I
                                                                                               g$vec?$9889$dF01I)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9973$dF01I
                                                                                               g$maps$9974$dF01I)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9975$dF01I
                                                                                                   g$ynew$9976$dF01I)
                                                                                                 (values
                                                                                                   (g$gen-cons$9829$dF01I
                                                                                                     g$e$9885$dF01I
                                                                                                     g$x$9963$dF01I
                                                                                                     g$y$9964$dF01I
                                                                                                     g$xnew$9970$dF01I
                                                                                                     g$ynew$9976$dF01I)
                                                                                                   g$maps$9975$dF01I)))
                                                                                              g$maps$9974$dF01I
                                                                                              g$ynew$9973$dF01I))))))
                                                                                     g$maps$9968$dF01I
                                                                                     g$xnew$9967$dF01I))))))
                                                                            g$ls/false$9962$dF01I)
                                                                          ((case-lambda
                                                                             ((g$t$9977$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9978$dF01I)
                                                                                  (if g$ls/false$9978$dF01I
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9979$dF01I)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9824$dF01I
                                                                                                g$src$9884$dF01I
                                                                                                g$ls$9979$dF01I
                                                                                                g$r$9886$dF01I
                                                                                                g$maps$9887$dF01I
                                                                                                g$ellipsis?$9888$dF01I
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9982$dF01I
                                                                                                g$maps$9983$dF01I)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9984$dF01I
                                                                                                    g$lsnew$9985$dF01I)
                                                                                                  (values
                                                                                                    (g$gen-vector$9830$dF01I
                                                                                                      g$e$9885$dF01I
                                                                                                      g$ls$9979$dF01I
                                                                                                      g$lsnew$9985$dF01I)
                                                                                                    g$maps$9984$dF01I)))
                                                                                               g$maps$9983$dF01I
                                                                                               g$lsnew$9982$dF01I))))))
                                                                                      g$ls/false$9978$dF01I)
                                                                                    ((case-lambda
                                                                                       ((g$t$9986$dF01I)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9987$dF01I)
                                                                                            (if g$ls/false$9987$dF01I
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9885$dF01I)
                                                                                                     g$maps$9887$dF01I)))
                                                                                                g$ls/false$9987$dF01I)
                                                                                              (g$syntax-violation$8094$dF01I
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9986$dF01I))))
                                                                                         (g$syntax-dispatch$7982$dF01I
                                                                                           g$t$9986$dF01I
                                                                                           '_))))
                                                                                     g$t$9977$dF01I))))
                                                                               (g$syntax-dispatch$7982$dF01I
                                                                                 g$t$9977$dF01I
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9961$dF01I))))
                                                                     (g$syntax-dispatch$7982$dF01I
                                                                       g$t$9961$dF01I
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9914$dF01I))))
                                                           (g$syntax-dispatch$7982$dF01I
                                                             g$t$9914$dF01I
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9907$dF01I))))
                                                 (g$syntax-dispatch$7982$dF01I
                                                   g$t$9907$dF01I
                                                   '(any any)))))
                                             g$t$9894$dF01I))))
                                       (g$syntax-dispatch$7982$dF01I
                                         g$t$9894$dF01I
                                         'any))))
                                   g$t$9890$dF01I))))
                             (g$syntax-dispatch$7982$dF01I
                               g$t$9890$dF01I
                               'any))))
                         g$e$9885$dF01I))))
                   (g$gen-ref$9825$dF01I
                     (case-lambda
                       ((g$src$9871$dF01I
                          g$var$9872$dF01I
                          g$level$9873$dF01I
                          g$maps$9874$dF01I)
                        (if (= g$level$9873$dF01I '0)
                          (values g$var$9872$dF01I g$maps$9874$dF01I)
                          (if (null? g$maps$9874$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9871$dF01I)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9825$dF01I
                                   g$src$9871$dF01I
                                   g$var$9872$dF01I
                                   (- g$level$9873$dF01I '1)
                                   (cdr g$maps$9874$dF01I))))
                              (case-lambda
                                ((g$outer-var$9877$dF01I
                                   g$outer-maps$9878$dF01I)
                                 ((case-lambda
                                    ((g$outer-maps$9879$dF01I
                                       g$outer-var$9880$dF01I)
                                     ((case-lambda
                                        ((g$t$9881$dF01I)
                                         (if g$t$9881$dF01I
                                           ((case-lambda
                                              ((g$b$9882$dF01I)
                                               (values
                                                 (cdr g$b$9882$dF01I)
                                                 g$maps$9874$dF01I)))
                                            g$t$9881$dF01I)
                                           ((case-lambda
                                              ((g$inner-var$9883$dF01I)
                                               (values
                                                 g$inner-var$9883$dF01I
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9880$dF01I
                                                       g$inner-var$9883$dF01I)
                                                     (car g$maps$9874$dF01I))
                                                   g$outer-maps$9879$dF01I))))
                                            (g$gen-lexical$7643$dF01I 'tmp)))))
                                      (g$assq$5051$dF01I
                                        g$outer-var$9880$dF01I
                                        (car g$maps$9874$dF01I)))))
                                  g$outer-maps$9878$dF01I
                                  g$outer-var$9877$dF01I)))))))))
                   (g$gen-append$9826$dF01I
                     (case-lambda
                       ((g$x$9869$dF01I g$y$9870$dF01I)
                        (if (equal? g$y$9870$dF01I ''())
                          g$x$9869$dF01I
                          (list 'append g$x$9869$dF01I g$y$9870$dF01I)))))
                   (g$gen-mappend$9827$dF01I
                     (case-lambda
                       ((g$e$9867$dF01I g$map-env$9868$dF01I)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9828$dF01I
                            g$e$9867$dF01I
                            g$map-env$9868$dF01I)))))
                   (g$gen-map$9828$dF01I
                     (case-lambda
                       ((g$e$9858$dF01I g$map-env$9859$dF01I)
                        ((case-lambda
                           ((g$formals$9860$dF01I g$actuals$9861$dF01I)
                            (if (eq? (car g$e$9858$dF01I) 'ref)
                              (car g$actuals$9861$dF01I)
                              (if (g$for-all$5061$dF01I
                                    (case-lambda
                                      ((g$x$9862$dF01I)
                                       (if (eq? (car g$x$9862$dF01I) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5055$dF01I
                                             (g$cadr$5264$dF01I g$x$9862$dF01I)
                                             g$formals$9860$dF01I))
                                         '#f)))
                                    (cdr g$e$9858$dF01I))
                                ((case-lambda
                                   ((g$args$9863$dF01I)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9858$dF01I))
                                        g$args$9863$dF01I))))
                                 (g$map$5063$dF01I
                                   ((case-lambda
                                      ((g$r$9864$dF01I)
                                       (case-lambda
                                         ((g$x$9865$dF01I)
                                          (cdr (g$assq$5051$dF01I
                                                 (g$cadr$5264$dF01I
                                                   g$x$9865$dF01I)
                                                 g$r$9864$dF01I))))))
                                    (g$map$5063$dF01I
                                      cons
                                      g$formals$9860$dF01I
                                      g$actuals$9861$dF01I))
                                   (cdr g$e$9858$dF01I)))
                                (g$cons*$5065$dF01I
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9860$dF01I
                                    g$e$9858$dF01I)
                                  g$actuals$9861$dF01I)))))
                         (g$map$5063$dF01I cdr g$map-env$9859$dF01I)
                         (g$map$5063$dF01I
                           (case-lambda
                             ((g$x$9866$dF01I)
                              (list 'ref (car g$x$9866$dF01I))))
                           g$map-env$9859$dF01I)))))
                   (g$gen-cons$9829$dF01I
                     (case-lambda
                       ((g$e$9850$dF01I
                          g$x$9851$dF01I
                          g$y$9852$dF01I
                          g$xnew$9853$dF01I
                          g$ynew$9854$dF01I)
                        ((case-lambda
                           ((g$t$9855$dF01I)
                            (if (g$memv$5056$dF01I g$t$9855$dF01I '(quote))
                              (if (eq? (car g$xnew$9853$dF01I) 'quote)
                                ((case-lambda
                                   ((g$xnew$9856$dF01I g$ynew$9857$dF01I)
                                    (if (if (eq? g$xnew$9856$dF01I
                                                 g$x$9851$dF01I)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9857$dF01I
                                                 g$y$9852$dF01I))
                                          '#f)
                                      (list 'quote g$e$9850$dF01I)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9856$dF01I
                                          g$ynew$9857$dF01I)))))
                                 (g$cadr$5264$dF01I g$xnew$9853$dF01I)
                                 (g$cadr$5264$dF01I g$ynew$9854$dF01I))
                                (if (null?
                                      (g$cadr$5264$dF01I g$ynew$9854$dF01I))
                                  (list 'list g$xnew$9853$dF01I)
                                  (list
                                    'cons
                                    g$xnew$9853$dF01I
                                    g$ynew$9854$dF01I)))
                              (if (g$memv$5056$dF01I g$t$9855$dF01I '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9853$dF01I
                                    (cdr g$ynew$9854$dF01I)))
                                (list
                                  'cons
                                  g$xnew$9853$dF01I
                                  g$ynew$9854$dF01I)))))
                         (car g$ynew$9854$dF01I)))))
                   (g$gen-vector$9830$dF01I
                     (case-lambda
                       ((g$e$9847$dF01I g$ls$9848$dF01I g$lsnew$9849$dF01I)
                        (if (eq? (car g$lsnew$9849$dF01I) 'quote)
                          (if (eq? (g$cadr$5264$dF01I g$lsnew$9849$dF01I)
                                   g$ls$9848$dF01I)
                            (list 'quote g$e$9847$dF01I)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5264$dF01I g$lsnew$9849$dF01I))))
                          (if (eq? (car g$lsnew$9849$dF01I) 'list)
                            (cons 'vector (cdr g$lsnew$9849$dF01I))
                            (list 'list->vector g$lsnew$9849$dF01I))))))
                   (g$regen$9831$dF01I
                     (case-lambda
                       ((g$x$9844$dF01I)
                        ((case-lambda
                           ((g$t$9845$dF01I)
                            (if (g$memv$5056$dF01I g$t$9845$dF01I '(ref))
                              (g$cadr$5264$dF01I g$x$9844$dF01I)
                              (if (g$memv$5056$dF01I
                                    g$t$9845$dF01I
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5264$dF01I g$x$9844$dF01I))
                                (if (g$memv$5056$dF01I g$t$9845$dF01I '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5264$dF01I g$x$9844$dF01I))
                                  (if (g$memv$5056$dF01I
                                        g$t$9845$dF01I
                                        '(lambda))
                                    (g$build-lambda$7630$dF01I
                                      '#f
                                      (g$cadr$5264$dF01I g$x$9844$dF01I)
                                      (g$regen$9831$dF01I
                                        (g$caddr$5270$dF01I g$x$9844$dF01I)))
                                    (if (g$memv$5056$dF01I
                                          g$t$9845$dF01I
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$9846$dF01I)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9846$dF01I)))
                                       (g$map$5063$dF01I
                                         g$regen$9831$dF01I
                                         (cdr g$x$9844$dF01I)))
                                      (cons
                                        (list 'primitive (car g$x$9844$dF01I))
                                        (g$map$5063$dF01I
                                          g$regen$9831$dF01I
                                          (cdr g$x$9844$dF01I))))))))))
                         (car g$x$9844$dF01I))))))
           (case-lambda
             ((g$e$9832$dF01I g$r$9833$dF01I g$mr$9834$dF01I)
              ((case-lambda
                 ((g$t$9835$dF01I)
                  ((case-lambda
                     ((g$ls/false$9836$dF01I)
                      (if g$ls/false$9836$dF01I
                        (apply
                          (case-lambda
                            ((g$x$9837$dF01I)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9824$dF01I
                                    g$e$9832$dF01I
                                    g$x$9837$dF01I
                                    g$r$9833$dF01I
                                    '()
                                    g$ellipsis?$7983$dF01I
                                    '#f)))
                               (case-lambda
                                 ((g$e$9840$dF01I g$maps$9841$dF01I)
                                  ((case-lambda
                                     ((g$maps$9842$dF01I g$e$9843$dF01I)
                                      (g$regen$9831$dF01I g$e$9843$dF01I)))
                                   g$maps$9841$dF01I
                                   g$e$9840$dF01I))))))
                          g$ls/false$9836$dF01I)
                        (g$syntax-violation$8094$dF01I
                          '#f
                          '"invalid syntax"
                          g$t$9835$dF01I))))
                   (g$syntax-dispatch$7982$dF01I g$t$9835$dF01I '(_ any)))))
               g$e$9832$dF01I))))))))
   (g$core-macro-transformer$7989$dF01I
     g$core-macro-transformer$11492$dF01I
     (case-lambda
       ((g$name$9988$dF01I)
        ((case-lambda
           ((g$t$9989$dF01I)
            (if (g$memv$5056$dF01I g$t$9989$dF01I '(quote))
              g$quote-transformer$7942$dF01I
              (if (g$memv$5056$dF01I g$t$9989$dF01I '(lambda))
                g$lambda-transformer$7944$dF01I
                (if (g$memv$5056$dF01I g$t$9989$dF01I '(case-lambda))
                  g$case-lambda-transformer$7943$dF01I
                  (if (g$memv$5056$dF01I g$t$9989$dF01I '(letrec))
                    g$letrec-transformer$7932$dF01I
                    (if (g$memv$5056$dF01I g$t$9989$dF01I '(letrec*))
                      g$letrec*-transformer$7933$dF01I
                      (if (g$memv$5056$dF01I g$t$9989$dF01I '(if))
                        g$if-transformer$7940$dF01I
                        (if (g$memv$5056$dF01I g$t$9989$dF01I '(foreign-call))
                          g$foreign-call-transformer$7980$dF01I
                          (if (g$memv$5056$dF01I g$t$9989$dF01I '(syntax-case))
                            g$syntax-case-transformer$7986$dF01I
                            (if (g$memv$5056$dF01I g$t$9989$dF01I '(syntax))
                              g$syntax-transformer$7988$dF01I
                              (if (g$memv$5056$dF01I
                                    g$t$9989$dF01I
                                    '(type-descriptor))
                                g$type-descriptor-transformer$7935$dF01I
                                (if (g$memv$5056$dF01I
                                      g$t$9989$dF01I
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7936$dF01I
                                  (if (g$memv$5056$dF01I
                                        g$t$9989$dF01I
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7937$dF01I
                                    (if (g$memv$5056$dF01I
                                          g$t$9989$dF01I
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7934$dF01I
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$9988$dF01I))))))))))))))))
         g$name$9988$dF01I))))
   (g$file-options-macro$7990$dF01I
     g$file-options-macro$11493$dF01I
     (case-lambda
       ((g$x$9990$dF01I)
        (letrec* ((g$valid-option?$9991$dF01I
                    (case-lambda
                      ((g$x$9996$dF01I)
                       (if (g$id?$7704$dF01I g$x$9996$dF01I)
                         (begin
                           '#f
                           (g$memq$5055$dF01I
                             (g$id->sym$7705$dF01I g$x$9996$dF01I)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$9992$dF01I)
              ((case-lambda
                 ((g$ls/false$9993$dF01I)
                  (if (if g$ls/false$9993$dF01I
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$9994$dF01I)
                               (if (g$for-all$5061$dF01I
                                     g$valid-option?$9991$dF01I
                                     g$opt*$9994$dF01I)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6978$dF01I
                                     (g$map$5063$dF01I
                                       g$id->sym$7705$dF01I
                                       g$opt*$9994$dF01I)))
                                 '#f)))
                            g$ls/false$9993$dF01I))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$9995$dF01I)
                         (g$bless$7945$dF01I
                           (list
                             'quote
                             (g$file-options-spec$6978$dF01I
                               (g$map$5063$dF01I
                                 g$id->sym$7705$dF01I
                                 g$opt*$9995$dF01I))))))
                      g$ls/false$9993$dF01I)
                    (g$syntax-violation$8094$dF01I
                      '#f
                      '"invalid syntax"
                      g$t$9992$dF01I))))
               (g$syntax-dispatch$7982$dF01I g$t$9992$dF01I '(_ . each-any)))))
           g$x$9990$dF01I)))))
   (g$symbol-macro$7991$dF01I
     g$symbol-macro$11494$dF01I
     (case-lambda
       ((g$x$9997$dF01I g$set$9998$dF01I)
        ((case-lambda
           ((g$t$9999$dF01I)
            ((case-lambda
               ((g$ls/false$10000$dF01I)
                (if (if g$ls/false$10000$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$10001$dF01I)
                             (if (g$id?$7704$dF01I g$name$10001$dF01I)
                               (begin
                                 '#f
                                 (g$memq$5055$dF01I
                                   (g$id->sym$7705$dF01I g$name$10001$dF01I)
                                   g$set$9998$dF01I))
                               '#f)))
                          g$ls/false$10000$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$10002$dF01I)
                       (g$bless$7945$dF01I (list 'quote g$name$10002$dF01I))))
                    g$ls/false$10000$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$9999$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$9999$dF01I '(_ any)))))
         g$x$9997$dF01I))))
   (g$macro-transformer$7992$dF01I
     g$macro-transformer$11495$dF01I
     (case-lambda
       ((g$x$10003$dF01I)
        (if (procedure? g$x$10003$dF01I)
          g$x$10003$dF01I
          (if (symbol? g$x$10003$dF01I)
            ((case-lambda
               ((g$t$10004$dF01I)
                (if (g$memv$5056$dF01I g$t$10004$dF01I '(define-record-type))
                  g$define-record-type-macro$7976$dF01I
                  (if (g$memv$5056$dF01I g$t$10004$dF01I '(define-struct))
                    g$define-struct-macro$7975$dF01I
                    (if (g$memv$5056$dF01I g$t$10004$dF01I '(include))
                      g$include-macro$7970$dF01I
                      (if (g$memv$5056$dF01I g$t$10004$dF01I '(cond))
                        g$cond-macro$7968$dF01I
                        (if (g$memv$5056$dF01I g$t$10004$dF01I '(let))
                          g$let-macro$7948$dF01I
                          (if (g$memv$5056$dF01I g$t$10004$dF01I '(do))
                            g$do-macro$7964$dF01I
                            (if (g$memv$5056$dF01I g$t$10004$dF01I '(or))
                              g$or-macro$7966$dF01I
                              (if (g$memv$5056$dF01I g$t$10004$dF01I '(and))
                                g$and-macro$7967$dF01I
                                (if (g$memv$5056$dF01I g$t$10004$dF01I '(let*))
                                  g$let*-macro$7965$dF01I
                                  (if (g$memv$5056$dF01I
                                        g$t$10004$dF01I
                                        '(let-values))
                                    g$let-values-macro$7949$dF01I
                                    (if (g$memv$5056$dF01I
                                          g$t$10004$dF01I
                                          '(let*-values))
                                      g$let*-values-macro$7950$dF01I
                                      (if (g$memv$5056$dF01I
                                            g$t$10004$dF01I
                                            '(syntax-rules))
                                        g$syntax-rules-macro$7972$dF01I
                                        (if (g$memv$5056$dF01I
                                              g$t$10004$dF01I
                                              '(quasiquote))
                                          g$quasiquote-macro$7973$dF01I
                                          (if (g$memv$5056$dF01I
                                                g$t$10004$dF01I
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7974$dF01I
                                            (if (g$memv$5056$dF01I
                                                  g$t$10004$dF01I
                                                  '(with-syntax))
                                              g$with-syntax-macro$7946$dF01I
                                              (if (g$memv$5056$dF01I
                                                    g$t$10004$dF01I
                                                    '(when))
                                                g$when-macro$7938$dF01I
                                                (if (g$memv$5056$dF01I
                                                      g$t$10004$dF01I
                                                      '(unless))
                                                  g$unless-macro$7939$dF01I
                                                  (if (g$memv$5056$dF01I
                                                        g$t$10004$dF01I
                                                        '(case))
                                                    g$case-macro$7941$dF01I
                                                    (if (g$memv$5056$dF01I
                                                          g$t$10004$dF01I
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7963$dF01I
                                                      (if (g$memv$5056$dF01I
                                                            g$t$10004$dF01I
                                                            '(time))
                                                        g$time-macro$7959$dF01I
                                                        (if (g$memv$5056$dF01I
                                                              g$t$10004$dF01I
                                                              '(delay))
                                                          g$delay-macro$7960$dF01I
                                                          (if (g$memv$5056$dF01I
                                                                g$t$10004$dF01I
                                                                '(assert))
                                                            g$assert-macro$7961$dF01I
                                                            (if (g$memv$5056$dF01I
                                                                  g$t$10004$dF01I
                                                                  '(endianness))
                                                              g$endianness-macro$7962$dF01I
                                                              (if (g$memv$5056$dF01I
                                                                    g$t$10004$dF01I
                                                                    '(guard))
                                                                g$guard-macro$7957$dF01I
                                                                (if (g$memv$5056$dF01I
                                                                      g$t$10004$dF01I
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7958$dF01I
                                                                  (if (g$memv$5056$dF01I
                                                                        g$t$10004$dF01I
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7951$dF01I
                                                                    (if (g$memv$5056$dF01I
                                                                          g$t$10004$dF01I
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7952$dF01I
                                                                      (if (g$memv$5056$dF01I
                                                                            g$t$10004$dF01I
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7953$dF01I
                                                                        (if (g$memv$5056$dF01I
                                                                              g$t$10004$dF01I
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7955$dF01I
                                                                          (if (g$memv$5056$dF01I
                                                                                g$t$10004$dF01I
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7956$dF01I
                                                                            (if (g$memv$5056$dF01I
                                                                                  g$t$10004$dF01I
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7977$dF01I
                                                                              (if (g$memv$5056$dF01I
                                                                                    g$t$10004$dF01I
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7979$dF01I
                                                                                (if (g$memv$5056$dF01I
                                                                                      g$t$10004$dF01I
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7971$dF01I
                                                                                  (if (g$memv$5056$dF01I
                                                                                        g$t$10004$dF01I
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$10005$dF01I)
                                                                                       (g$symbol-macro$7991$dF01I
                                                                                         g$x$10005$dF01I
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5056$dF01I
                                                                                          g$t$10004$dF01I
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$10006$dF01I)
                                                                                         (g$symbol-macro$7991$dF01I
                                                                                           g$x$10006$dF01I
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5056$dF01I
                                                                                            g$t$10004$dF01I
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$10007$dF01I)
                                                                                           (g$symbol-macro$7991$dF01I
                                                                                             g$x$10007$dF01I
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5056$dF01I
                                                                                              g$t$10004$dF01I
                                                                                              '(file-options))
                                                                                          g$file-options-macro$7990$dF01I
                                                                                          (if (g$memv$5056$dF01I
                                                                                                g$t$10004$dF01I
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7978$dF01I
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$10003$dF01I)))))))))))))))))))))))))))))))))))))))))
             g$x$10003$dF01I)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$10003$dF01I))))))
   (g$local-macro-transformer$7993$dF01I
     g$local-macro-transformer$11496$dF01I
     (case-lambda ((g$x$10008$dF01I) (car g$x$10008$dF01I))))
   (g$do-macro-call$7994$dF01I
     g$do-macro-call$11497$dF01I
     (case-lambda
       ((g$transformer$10009$dF01I g$expr$10010$dF01I)
        ((case-lambda
           ((g$out$10011$dF01I)
            (begin
              ((letrec ((g$f$10012$dF01I
                          (case-lambda
                            ((g$x$10013$dF01I)
                             (if (not (g$stx?$7676$dF01I g$x$10013$dF01I))
                               (if (pair? g$x$10013$dF01I)
                                 (begin
                                   (g$f$10012$dF01I (car g$x$10013$dF01I))
                                   (g$f$10012$dF01I (cdr g$x$10013$dF01I)))
                                 (if (vector? g$x$10013$dF01I)
                                   (vector-for-each
                                     g$f$10012$dF01I
                                     g$x$10013$dF01I)
                                   (if (symbol? g$x$10013$dF01I)
                                     (g$syntax-violation$8094$dF01I
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$10010$dF01I
                                       g$x$10013$dF01I)
                                     (void))))
                               (void))))))
                 g$f$10012$dF01I)
               g$out$10011$dF01I)
              (g$add-mark$7693$dF01I
                (g$gen-mark$7688$dF01I)
                g$out$10011$dF01I
                g$expr$10010$dF01I))))
         (g$transformer$10009$dF01I
           (g$add-mark$7693$dF01I
             g$anti-mark$7689$dF01I
             g$expr$10010$dF01I
             '#f))))))
   (g$chi-macro$7995$dF01I
     g$chi-macro$11498$dF01I
     (case-lambda
       ((g$p$10014$dF01I g$e$10015$dF01I)
        (g$do-macro-call$7994$dF01I
          (g$macro-transformer$7992$dF01I g$p$10014$dF01I)
          g$e$10015$dF01I))))
   (g$chi-local-macro$7996$dF01I
     g$chi-local-macro$11499$dF01I
     (case-lambda
       ((g$p$10016$dF01I g$e$10017$dF01I)
        (g$do-macro-call$7994$dF01I
          (g$local-macro-transformer$7993$dF01I g$p$10016$dF01I)
          g$e$10017$dF01I))))
   (g$chi-global-macro$7997$dF01I
     g$chi-global-macro$11500$dF01I
     (case-lambda
       ((g$p$10018$dF01I g$e$10019$dF01I)
        ((case-lambda
           ((g$lib$10020$dF01I g$loc$10021$dF01I)
            (begin
              (g$visit-library$7515$dF01I g$lib$10020$dF01I)
              ((case-lambda
                 ((g$x$10022$dF01I)
                  ((case-lambda
                     ((g$transformer$10023$dF01I)
                      (g$do-macro-call$7994$dF01I
                        g$transformer$10023$dF01I
                        g$e$10019$dF01I)))
                   (if (procedure? g$x$10022$dF01I)
                     g$x$10022$dF01I
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$10022$dF01I)))))
               (symbol-value g$loc$10021$dF01I)))))
         (car g$p$10018$dF01I)
         (cdr g$p$10018$dF01I)))))
   (g$chi-expr*$7998$dF01I
     g$chi-expr*$11501$dF01I
     (case-lambda
       ((g$e*$10024$dF01I g$r$10025$dF01I g$mr$10026$dF01I)
        (if (null? g$e*$10024$dF01I)
          '()
          ((case-lambda
             ((g$e$10027$dF01I)
              (cons
                g$e$10027$dF01I
                (g$chi-expr*$7998$dF01I
                  (cdr g$e*$10024$dF01I)
                  g$r$10025$dF01I
                  g$mr$10026$dF01I))))
           (g$chi-expr$8000$dF01I
             (car g$e*$10024$dF01I)
             g$r$10025$dF01I
             g$mr$10026$dF01I))))))
   (g$chi-application$7999$dF01I
     g$chi-application$11502$dF01I
     (case-lambda
       ((g$e$10028$dF01I g$r$10029$dF01I g$mr$10030$dF01I)
        ((case-lambda
           ((g$t$10031$dF01I)
            ((case-lambda
               ((g$ls/false$10032$dF01I)
                (if g$ls/false$10032$dF01I
                  (apply
                    (case-lambda
                      ((g$rator$10033$dF01I g$rands$10034$dF01I)
                       ((case-lambda
                          ((g$rator$10035$dF01I)
                           (cons
                             g$rator$10035$dF01I
                             (g$chi-expr*$7998$dF01I
                               g$rands$10034$dF01I
                               g$r$10029$dF01I
                               g$mr$10030$dF01I))))
                        (g$chi-expr$8000$dF01I
                          g$rator$10033$dF01I
                          g$r$10029$dF01I
                          g$mr$10030$dF01I))))
                    g$ls/false$10032$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$10031$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$10031$dF01I '(any . each-any)))))
         g$e$10028$dF01I))))
   (g$chi-expr$8000$dF01I
     g$chi-expr$11503$dF01I
     (case-lambda
       ((g$e$10036$dF01I g$r$10037$dF01I g$mr$10038$dF01I)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7724$dF01I g$e$10036$dF01I g$r$10037$dF01I)))
          (case-lambda
            ((g$type$10042$dF01I g$value$10043$dF01I g$kwd$10044$dF01I)
             ((case-lambda
                ((g$kwd$10045$dF01I g$value$10046$dF01I g$type$10047$dF01I)
                 ((case-lambda
                    ((g$t$10048$dF01I)
                     (if (g$memv$5056$dF01I g$t$10048$dF01I '(core-macro))
                       ((case-lambda
                          ((g$transformer$10049$dF01I)
                           (g$transformer$10049$dF01I
                             g$e$10036$dF01I
                             g$r$10037$dF01I
                             g$mr$10038$dF01I)))
                        (g$core-macro-transformer$7989$dF01I
                          g$value$10046$dF01I))
                       (if (g$memv$5056$dF01I g$t$10048$dF01I '(global))
                         ((case-lambda
                            ((g$lib$10050$dF01I)
                             ((case-lambda
                                ((g$loc$10051$dF01I)
                                 (begin
                                   ((g$inv-collector$8034$dF01I)
                                    g$lib$10050$dF01I)
                                   g$loc$10051$dF01I)))
                              (cdr g$value$10046$dF01I))))
                          (car g$value$10046$dF01I))
                         (if (g$memv$5056$dF01I g$t$10048$dF01I '(core-prim))
                           ((case-lambda
                              ((g$name$10052$dF01I)
                               (list 'primitive g$name$10052$dF01I)))
                            g$value$10046$dF01I)
                           (if (g$memv$5056$dF01I g$t$10048$dF01I '(call))
                             (g$chi-application$7999$dF01I
                               g$e$10036$dF01I
                               g$r$10037$dF01I
                               g$mr$10038$dF01I)
                             (if (g$memv$5056$dF01I g$t$10048$dF01I '(lexical))
                               ((case-lambda
                                  ((g$lex$10053$dF01I) g$lex$10053$dF01I))
                                (g$lexical-var$7926$dF01I g$value$10046$dF01I))
                               (if (g$memv$5056$dF01I
                                     g$t$10048$dF01I
                                     '(global-macro global-macro!))
                                 (g$chi-expr$8000$dF01I
                                   (g$chi-global-macro$7997$dF01I
                                     g$value$10046$dF01I
                                     g$e$10036$dF01I)
                                   g$r$10037$dF01I
                                   g$mr$10038$dF01I)
                                 (if (g$memv$5056$dF01I
                                       g$t$10048$dF01I
                                       '(local-macro local-macro!))
                                   (g$chi-expr$8000$dF01I
                                     (g$chi-local-macro$7996$dF01I
                                       g$value$10046$dF01I
                                       g$e$10036$dF01I)
                                     g$r$10037$dF01I
                                     g$mr$10038$dF01I)
                                   (if (g$memv$5056$dF01I
                                         g$t$10048$dF01I
                                         '(macro macro!))
                                     (g$chi-expr$8000$dF01I
                                       (g$chi-macro$7995$dF01I
                                         g$value$10046$dF01I
                                         g$e$10036$dF01I)
                                       g$r$10037$dF01I
                                       g$mr$10038$dF01I)
                                     (if (g$memv$5056$dF01I
                                           g$t$10048$dF01I
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$10054$dF01I)
                                           (list 'quote g$datum$10054$dF01I)))
                                        g$value$10046$dF01I)
                                       (if (g$memv$5056$dF01I
                                             g$t$10048$dF01I
                                             '(set!))
                                         (g$chi-set!$8001$dF01I
                                           g$e$10036$dF01I
                                           g$r$10037$dF01I
                                           g$mr$10038$dF01I)
                                         (if (g$memv$5056$dF01I
                                               g$t$10048$dF01I
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$10055$dF01I)
                                               ((case-lambda
                                                  ((g$ls/false$10056$dF01I)
                                                   (if g$ls/false$10056$dF01I
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$10057$dF01I
                                                            g$x*$10058$dF01I)
                                                          (g$build-sequence$7633$dF01I
                                                            '#f
                                                            (g$chi-expr*$7998$dF01I
                                                              (cons
                                                                g$x$10057$dF01I
                                                                g$x*$10058$dF01I)
                                                              g$r$10037$dF01I
                                                              g$mr$10038$dF01I))))
                                                       g$ls/false$10056$dF01I)
                                                     (g$syntax-violation$8094$dF01I
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10055$dF01I))))
                                                (g$syntax-dispatch$7982$dF01I
                                                  g$t$10055$dF01I
                                                  '(_ any . each-any)))))
                                            g$e$10036$dF01I)
                                           (if (g$memv$5056$dF01I
                                                 g$t$10048$dF01I
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$10059$dF01I)
                                                 ((case-lambda
                                                    ((g$ls/false$10060$dF01I)
                                                     (if (if g$ls/false$10060$dF01I
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$10061$dF01I
                                                                    g$xrhs*$10062$dF01I
                                                                    g$xbody$10063$dF01I
                                                                    g$xbody*$10064$dF01I)
                                                                  (if (not (g$valid-bound-ids?$7709$dF01I
                                                                             g$xlhs*$10061$dF01I))
                                                                    (g$syntax-violation$8094$dF01I
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$10036$dF01I)
                                                                    (void))))
                                                               g$ls/false$10060$dF01I))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$10065$dF01I
                                                              g$xrhs*$10066$dF01I
                                                              g$xbody$10067$dF01I
                                                              g$xbody*$10068$dF01I)
                                                            ((case-lambda
                                                               ((g$xlab*$10069$dF01I)
                                                                ((case-lambda
                                                                   ((g$xrib$10070$dF01I)
                                                                    ((case-lambda
                                                                       ((g$xb*$10071$dF01I)
                                                                        (g$build-sequence$7633$dF01I
                                                                          '#f
                                                                          (g$chi-expr*$7998$dF01I
                                                                            (g$map$5063$dF01I
                                                                              (case-lambda
                                                                                ((g$x$10072$dF01I)
                                                                                 (g$add-subst$7694$dF01I
                                                                                   g$xrib$10070$dF01I
                                                                                   g$x$10072$dF01I)))
                                                                              (cons
                                                                                g$xbody$10067$dF01I
                                                                                g$xbody*$10068$dF01I))
                                                                            (append
                                                                              (g$map$5063$dF01I
                                                                                cons
                                                                                g$xlab*$10069$dF01I
                                                                                g$xb*$10071$dF01I)
                                                                              g$r$10037$dF01I)
                                                                            (append
                                                                              (g$map$5063$dF01I
                                                                                cons
                                                                                g$xlab*$10069$dF01I
                                                                                g$xb*$10071$dF01I)
                                                                              g$mr$10038$dF01I)))))
                                                                     (g$map$5063$dF01I
                                                                       (case-lambda
                                                                         ((g$x$10073$dF01I)
                                                                          (g$make-eval-transformer$7736$dF01I
                                                                            (g$expand-transformer$8027$dF01I
                                                                              (if (eq? g$type$10047$dF01I
                                                                                       'let-syntax)
                                                                                g$x$10073$dF01I
                                                                                (g$add-subst$7694$dF01I
                                                                                  g$xrib$10070$dF01I
                                                                                  g$x$10073$dF01I))
                                                                              g$mr$10038$dF01I))))
                                                                       g$xrhs*$10066$dF01I))))
                                                                 (g$make-full-rib$7672$dF01I
                                                                   g$xlhs*$10065$dF01I
                                                                   g$xlab*$10069$dF01I))))
                                                             (g$map$5063$dF01I
                                                               g$gen-label$7645$dF01I
                                                               g$xlhs*$10065$dF01I))))
                                                         g$ls/false$10060$dF01I)
                                                       (g$syntax-violation$8094$dF01I
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$10059$dF01I))))
                                                  (g$syntax-dispatch$7982$dF01I
                                                    g$t$10059$dF01I
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$10036$dF01I)
                                             (if (g$memv$5056$dF01I
                                                   g$t$10048$dF01I
                                                   '(displaced-lexical))
                                               (g$syntax-violation$8094$dF01I
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$10036$dF01I)
                                               (if (g$memv$5056$dF01I
                                                     g$t$10048$dF01I
                                                     '(syntax))
                                                 (g$syntax-violation$8094$dF01I
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$10036$dF01I)
                                                 (if (g$memv$5056$dF01I
                                                       g$t$10048$dF01I
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$8094$dF01I
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$10074$dF01I)
                                                           (if (g$memv$5056$dF01I
                                                                 g$t$10074$dF01I
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5056$dF01I
                                                                   g$t$10074$dF01I
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5056$dF01I
                                                                     g$t$10074$dF01I
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5056$dF01I
                                                                       g$t$10074$dF01I
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5056$dF01I
                                                                         g$t$10074$dF01I
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5056$dF01I
                                                                           g$t$10074$dF01I
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$10047$dF01I)
                                                       '" was found where an expression was expected")
                                                     g$e$10036$dF01I)
                                                   (if (g$memv$5056$dF01I
                                                         g$t$10048$dF01I
                                                         '(mutable))
                                                     (g$syntax-violation$8094$dF01I
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$10036$dF01I)
                                                     (g$syntax-violation$8094$dF01I
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$10036$dF01I)))))))))))))))))))
                  g$type$10047$dF01I)))
              g$kwd$10044$dF01I
              g$value$10043$dF01I
              g$type$10042$dF01I)))))))
   (g$chi-set!$8001$dF01I
     g$chi-set!$11504$dF01I
     (case-lambda
       ((g$e$10075$dF01I g$r$10076$dF01I g$mr$10077$dF01I)
        ((case-lambda
           ((g$t$10078$dF01I)
            ((case-lambda
               ((g$ls/false$10079$dF01I)
                (if (if g$ls/false$10079$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$10080$dF01I g$v$10081$dF01I)
                             (g$id?$7704$dF01I g$x$10080$dF01I)))
                          g$ls/false$10079$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$10082$dF01I g$v$10083$dF01I)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7724$dF01I
                              g$x$10082$dF01I
                              g$r$10076$dF01I)))
                         (case-lambda
                           ((g$type$10087$dF01I
                              g$value$10088$dF01I
                              g$kwd$10089$dF01I)
                            ((case-lambda
                               ((g$kwd$10090$dF01I
                                  g$value$10091$dF01I
                                  g$type$10092$dF01I)
                                ((case-lambda
                                   ((g$t$10093$dF01I)
                                    (if (g$memv$5056$dF01I
                                          g$t$10093$dF01I
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7928$dF01I
                                          g$value$10091$dF01I
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7926$dF01I
                                            g$value$10091$dF01I)
                                          (g$chi-expr$8000$dF01I
                                            g$v$10083$dF01I
                                            g$r$10076$dF01I
                                            g$mr$10077$dF01I)))
                                      (if (g$memv$5056$dF01I
                                            g$t$10093$dF01I
                                            '(core-prim))
                                        (g$syntax-violation$8094$dF01I
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$10075$dF01I)
                                        (if (g$memv$5056$dF01I
                                              g$t$10093$dF01I
                                              '(global))
                                          (g$syntax-violation$8094$dF01I
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$10075$dF01I)
                                          (if (g$memv$5056$dF01I
                                                g$t$10093$dF01I
                                                '(global-macro!))
                                            (g$chi-expr$8000$dF01I
                                              (g$chi-global-macro$7997$dF01I
                                                g$value$10091$dF01I
                                                g$e$10075$dF01I)
                                              g$r$10076$dF01I
                                              g$mr$10077$dF01I)
                                            (if (g$memv$5056$dF01I
                                                  g$t$10093$dF01I
                                                  '(local-macro!))
                                              (g$chi-expr$8000$dF01I
                                                (g$chi-local-macro$7996$dF01I
                                                  g$value$10091$dF01I
                                                  g$e$10075$dF01I)
                                                g$r$10076$dF01I
                                                g$mr$10077$dF01I)
                                              (if (g$memv$5056$dF01I
                                                    g$t$10093$dF01I
                                                    '(mutable))
                                                (g$syntax-violation$8094$dF01I
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$10075$dF01I)
                                                (g$syntax-violation$8094$dF01I
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$10075$dF01I)))))))))
                                 g$type$10092$dF01I)))
                             g$kwd$10089$dF01I
                             g$value$10088$dF01I
                             g$type$10087$dF01I))))))
                    g$ls/false$10079$dF01I)
                  (g$syntax-violation$8094$dF01I
                    '#f
                    '"invalid syntax"
                    g$t$10078$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$10078$dF01I '(_ any any)))))
         g$e$10075$dF01I))))
   (g$verify-formals$8002$dF01I
     g$verify-formals$11505$dF01I
     (case-lambda
       ((g$fmls$10094$dF01I g$stx$10095$dF01I)
        ((case-lambda
           ((g$t$10096$dF01I)
            ((case-lambda
               ((g$ls/false$10097$dF01I)
                (if g$ls/false$10097$dF01I
                  (apply
                    (case-lambda
                      ((g$x*$10098$dF01I)
                       (if (not (g$valid-bound-ids?$7709$dF01I
                                  g$x*$10098$dF01I))
                         (g$invalid-fmls-error$7947$dF01I
                           g$stx$10095$dF01I
                           g$fmls$10094$dF01I)
                         (void))))
                    g$ls/false$10097$dF01I)
                  ((case-lambda
                     ((g$t$10099$dF01I)
                      ((case-lambda
                         ((g$ls/false$10100$dF01I)
                          (if g$ls/false$10100$dF01I
                            (apply
                              (case-lambda
                                ((g$x*$10101$dF01I g$x$10102$dF01I)
                                 (if (not (g$valid-bound-ids?$7709$dF01I
                                            (cons
                                              g$x$10102$dF01I
                                              g$x*$10101$dF01I)))
                                   (g$invalid-fmls-error$7947$dF01I
                                     g$stx$10095$dF01I
                                     g$fmls$10094$dF01I)
                                   (void))))
                              g$ls/false$10100$dF01I)
                            ((case-lambda
                               ((g$t$10103$dF01I)
                                ((case-lambda
                                   ((g$ls/false$10104$dF01I)
                                    (if g$ls/false$10104$dF01I
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$stx$10095$dF01I)))
                                        g$ls/false$10104$dF01I)
                                      (g$syntax-violation$8094$dF01I
                                        '#f
                                        '"invalid syntax"
                                        g$t$10103$dF01I))))
                                 (g$syntax-dispatch$7982$dF01I
                                   g$t$10103$dF01I
                                   '_))))
                             g$t$10099$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$10099$dF01I
                         '#(each+ any () any)))))
                   g$t$10096$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$10096$dF01I 'each-any))))
         g$fmls$10094$dF01I))))
   (g$chi-lambda-clause$8003$dF01I
     g$chi-lambda-clause$11506$dF01I
     (case-lambda
       ((g$stx$10105$dF01I
          g$fmls$10106$dF01I
          g$body*$10107$dF01I
          g$r$10108$dF01I
          g$mr$10109$dF01I)
        ((case-lambda
           ((g$t$10110$dF01I)
            ((case-lambda
               ((g$ls/false$10111$dF01I)
                (if g$ls/false$10111$dF01I
                  (apply
                    (case-lambda
                      ((g$x*$10112$dF01I)
                       (begin
                         (g$verify-formals$8002$dF01I
                           g$fmls$10106$dF01I
                           g$stx$10105$dF01I)
                         ((case-lambda
                            ((g$lex*$10113$dF01I g$lab*$10114$dF01I)
                             (values
                               g$lex*$10113$dF01I
                               (g$chi-internal$8011$dF01I
                                 (g$add-subst$7694$dF01I
                                   (g$make-full-rib$7672$dF01I
                                     g$x*$10112$dF01I
                                     g$lab*$10114$dF01I)
                                   g$body*$10107$dF01I)
                                 (g$add-lexicals$7930$dF01I
                                   g$lab*$10114$dF01I
                                   g$lex*$10113$dF01I
                                   g$r$10108$dF01I)
                                 g$mr$10109$dF01I))))
                          (g$map$5063$dF01I
                            g$gen-lexical$7643$dF01I
                            g$x*$10112$dF01I)
                          (g$map$5063$dF01I
                            g$gen-label$7645$dF01I
                            g$x*$10112$dF01I)))))
                    g$ls/false$10111$dF01I)
                  ((case-lambda
                     ((g$t$10115$dF01I)
                      ((case-lambda
                         ((g$ls/false$10116$dF01I)
                          (if g$ls/false$10116$dF01I
                            (apply
                              (case-lambda
                                ((g$x*$10117$dF01I g$x$10118$dF01I)
                                 (begin
                                   (g$verify-formals$8002$dF01I
                                     g$fmls$10106$dF01I
                                     g$stx$10105$dF01I)
                                   ((case-lambda
                                      ((g$lex*$10119$dF01I
                                         g$lab*$10120$dF01I
                                         g$lex$10121$dF01I
                                         g$lab$10122$dF01I)
                                       (values
                                         (append
                                           g$lex*$10119$dF01I
                                           g$lex$10121$dF01I)
                                         (g$chi-internal$8011$dF01I
                                           (g$add-subst$7694$dF01I
                                             (g$make-full-rib$7672$dF01I
                                               (cons
                                                 g$x$10118$dF01I
                                                 g$x*$10117$dF01I)
                                               (cons
                                                 g$lab$10122$dF01I
                                                 g$lab*$10120$dF01I))
                                             g$body*$10107$dF01I)
                                           (g$add-lexicals$7930$dF01I
                                             (cons
                                               g$lab$10122$dF01I
                                               g$lab*$10120$dF01I)
                                             (cons
                                               g$lex$10121$dF01I
                                               g$lex*$10119$dF01I)
                                             g$r$10108$dF01I)
                                           g$mr$10109$dF01I))))
                                    (g$map$5063$dF01I
                                      g$gen-lexical$7643$dF01I
                                      g$x*$10117$dF01I)
                                    (g$map$5063$dF01I
                                      g$gen-label$7645$dF01I
                                      g$x*$10117$dF01I)
                                    (g$gen-lexical$7643$dF01I g$x$10118$dF01I)
                                    (g$gen-label$7645$dF01I g$x$10118$dF01I)))))
                              g$ls/false$10116$dF01I)
                            ((case-lambda
                               ((g$t$10123$dF01I)
                                ((case-lambda
                                   ((g$ls/false$10124$dF01I)
                                    (if g$ls/false$10124$dF01I
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8094$dF01I
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$10106$dF01I)))
                                        g$ls/false$10124$dF01I)
                                      (g$syntax-violation$8094$dF01I
                                        '#f
                                        '"invalid syntax"
                                        g$t$10123$dF01I))))
                                 (g$syntax-dispatch$7982$dF01I
                                   g$t$10123$dF01I
                                   '_))))
                             g$t$10115$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$10115$dF01I
                         '#(each+ any () any)))))
                   g$t$10110$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$10110$dF01I 'each-any))))
         g$fmls$10106$dF01I))))
   (g$chi-lambda-clause*$8004$dF01I
     g$chi-lambda-clause*$11507$dF01I
     (case-lambda
       ((g$stx$10125$dF01I
          g$fmls*$10126$dF01I
          g$body**$10127$dF01I
          g$r$10128$dF01I
          g$mr$10129$dF01I)
        (if (null? g$fmls*$10126$dF01I)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$8003$dF01I
                 g$stx$10125$dF01I
                 (car g$fmls*$10126$dF01I)
                 (car g$body**$10127$dF01I)
                 g$r$10128$dF01I
                 g$mr$10129$dF01I)))
            (case-lambda
              ((g$a$10132$dF01I g$b$10133$dF01I)
               ((case-lambda
                  ((g$b$10134$dF01I g$a$10135$dF01I)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$8004$dF01I
                          g$stx$10125$dF01I
                          (cdr g$fmls*$10126$dF01I)
                          (cdr g$body**$10127$dF01I)
                          g$r$10128$dF01I
                          g$mr$10129$dF01I)))
                     (case-lambda
                       ((g$a*$10138$dF01I g$b*$10139$dF01I)
                        ((case-lambda
                           ((g$b*$10140$dF01I g$a*$10141$dF01I)
                            (values
                              (cons g$a$10135$dF01I g$a*$10141$dF01I)
                              (cons g$b$10134$dF01I g$b*$10140$dF01I))))
                         g$b*$10139$dF01I
                         g$a*$10138$dF01I))))))
                g$b$10133$dF01I
                g$a$10132$dF01I))))))))
   (g$chi-defun$8005$dF01I
     g$chi-defun$11508$dF01I
     (case-lambda
       ((g$x$10142$dF01I g$r$10143$dF01I g$mr$10144$dF01I)
        ((case-lambda
           ((g$fmls$10145$dF01I g$body*$10146$dF01I)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$8003$dF01I
                   g$fmls$10145$dF01I
                   g$fmls$10145$dF01I
                   g$body*$10146$dF01I
                   g$r$10143$dF01I
                   g$mr$10144$dF01I)))
              (case-lambda
                ((g$fmls$10149$dF01I g$body$10150$dF01I)
                 ((case-lambda
                    ((g$body$10151$dF01I g$fmls$10152$dF01I)
                     (g$build-lambda$7630$dF01I
                       '#f
                       g$fmls$10152$dF01I
                       g$body$10151$dF01I)))
                  g$body$10150$dF01I
                  g$fmls$10149$dF01I))))))
         (car g$x$10142$dF01I)
         (cdr g$x$10142$dF01I)))))
   (g$chi-rhs$8006$dF01I
     g$chi-rhs$11509$dF01I
     (case-lambda
       ((g$rhs$10153$dF01I g$r$10154$dF01I g$mr$10155$dF01I)
        ((case-lambda
           ((g$t$10156$dF01I)
            (if (g$memv$5056$dF01I g$t$10156$dF01I '(defun))
              (g$chi-defun$8005$dF01I
                (cdr g$rhs$10153$dF01I)
                g$r$10154$dF01I
                g$mr$10155$dF01I)
              (if (g$memv$5056$dF01I g$t$10156$dF01I '(expr))
                ((case-lambda
                   ((g$expr$10157$dF01I)
                    (g$chi-expr$8000$dF01I
                      g$expr$10157$dF01I
                      g$r$10154$dF01I
                      g$mr$10155$dF01I)))
                 (cdr g$rhs$10153$dF01I))
                (if (g$memv$5056$dF01I g$t$10156$dF01I '(top-expr))
                  ((case-lambda
                     ((g$expr$10158$dF01I)
                      (g$build-sequence$7633$dF01I
                        '#f
                        (list
                          (g$chi-expr$8000$dF01I
                            g$expr$10158$dF01I
                            g$r$10154$dF01I
                            g$mr$10155$dF01I)
                          (g$build-void$7634$dF01I)))))
                   (cdr g$rhs$10153$dF01I))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$10153$dF01I))))))
         (car g$rhs$10153$dF01I)))))
   (g$expand-interaction-rhs*/init*$8007$dF01I
     g$expand-interaction-rhs*/init*$11510$dF01I
     (case-lambda
       ((g$lhs*$10159$dF01I
          g$rhs*$10160$dF01I
          g$init*$10161$dF01I
          g$r$10162$dF01I
          g$mr$10163$dF01I)
        ((letrec ((g$f$10164$dF01I
                    (case-lambda
                      ((g$lhs*$10165$dF01I g$rhs*$10166$dF01I)
                       (if (null? g$lhs*$10165$dF01I)
                         (g$map$5063$dF01I
                           (case-lambda
                             ((g$x$10167$dF01I)
                              (g$chi-expr$8000$dF01I
                                g$x$10167$dF01I
                                g$r$10162$dF01I
                                g$mr$10163$dF01I)))
                           g$init*$10161$dF01I)
                         ((case-lambda
                            ((g$lhs$10168$dF01I g$rhs$10169$dF01I)
                             ((case-lambda
                                ((g$t$10170$dF01I)
                                 (if (g$memv$5056$dF01I
                                       g$t$10170$dF01I
                                       '(defun))
                                   ((case-lambda
                                      ((g$rhs$10171$dF01I)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$10168$dF01I
                                           g$rhs$10171$dF01I)
                                         (g$f$10164$dF01I
                                           (cdr g$lhs*$10165$dF01I)
                                           (cdr g$rhs*$10166$dF01I)))))
                                    (g$chi-defun$8005$dF01I
                                      (cdr g$rhs$10169$dF01I)
                                      g$r$10162$dF01I
                                      g$mr$10163$dF01I))
                                   (if (g$memv$5056$dF01I
                                         g$t$10170$dF01I
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$10172$dF01I)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$10168$dF01I
                                             g$rhs$10172$dF01I)
                                           (g$f$10164$dF01I
                                             (cdr g$lhs*$10165$dF01I)
                                             (cdr g$rhs*$10166$dF01I)))))
                                      (g$chi-expr$8000$dF01I
                                        (cdr g$rhs$10169$dF01I)
                                        g$r$10162$dF01I
                                        g$mr$10163$dF01I))
                                     (if (g$memv$5056$dF01I
                                           g$t$10170$dF01I
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$10173$dF01I)
                                           (cons
                                             g$e$10173$dF01I
                                             (g$f$10164$dF01I
                                               (cdr g$lhs*$10165$dF01I)
                                               (cdr g$rhs*$10166$dF01I)))))
                                        (g$chi-expr$8000$dF01I
                                          (cdr g$rhs$10169$dF01I)
                                          g$r$10162$dF01I
                                          g$mr$10163$dF01I))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$10169$dF01I))))))
                              (car g$rhs$10169$dF01I))))
                          (car g$lhs*$10165$dF01I)
                          (car g$rhs*$10166$dF01I)))))))
           g$f$10164$dF01I)
         g$lhs*$10159$dF01I
         g$rhs*$10160$dF01I))))
   (g$chi-rhs*$8008$dF01I
     g$chi-rhs*$11511$dF01I
     (case-lambda
       ((g$rhs*$10174$dF01I g$r$10175$dF01I g$mr$10176$dF01I)
        ((letrec ((g$f$10177$dF01I
                    (case-lambda
                      ((g$ls$10178$dF01I)
                       (if (null? g$ls$10178$dF01I)
                         '()
                         ((case-lambda
                            ((g$a$10179$dF01I)
                             (cons
                               g$a$10179$dF01I
                               (g$f$10177$dF01I (cdr g$ls$10178$dF01I)))))
                          (g$chi-rhs$8006$dF01I
                            (car g$ls$10178$dF01I)
                            g$r$10175$dF01I
                            g$mr$10176$dF01I)))))))
           g$f$10177$dF01I)
         g$rhs*$10174$dF01I))))
   (g$find-bound=?$8009$dF01I
     g$find-bound=?$11512$dF01I
     (case-lambda
       ((g$x$10180$dF01I g$lhs*$10181$dF01I g$rhs*$10182$dF01I)
        (if (null? g$lhs*$10181$dF01I)
          '#f
          (if (g$bound-id=?$7707$dF01I g$x$10180$dF01I (car g$lhs*$10181$dF01I))
            (car g$rhs*$10182$dF01I)
            (g$find-bound=?$8009$dF01I
              g$x$10180$dF01I
              (cdr g$lhs*$10181$dF01I)
              (cdr g$rhs*$10182$dF01I)))))))
   (g$find-dups$8010$dF01I
     g$find-dups$11513$dF01I
     (case-lambda
       ((g$ls$10183$dF01I)
        ((letrec ((g$f$10184$dF01I
                    (case-lambda
                      ((g$ls$10185$dF01I g$dups$10186$dF01I)
                       (if (null? g$ls$10185$dF01I)
                         g$dups$10186$dF01I
                         ((case-lambda
                            ((g$t$10187$dF01I)
                             (if g$t$10187$dF01I
                               ((case-lambda
                                  ((g$x$10188$dF01I)
                                   (g$f$10184$dF01I
                                     (cdr g$ls$10185$dF01I)
                                     (cons
                                       (list
                                         (car g$ls$10185$dF01I)
                                         g$x$10188$dF01I)
                                       g$dups$10186$dF01I))))
                                g$t$10187$dF01I)
                               (g$f$10184$dF01I
                                 (cdr g$ls$10185$dF01I)
                                 g$dups$10186$dF01I))))
                          (g$find-bound=?$8009$dF01I
                            (car g$ls$10185$dF01I)
                            (cdr g$ls$10185$dF01I)
                            (cdr g$ls$10185$dF01I))))))))
           g$f$10184$dF01I)
         g$ls$10183$dF01I
         '()))))
   (g$chi-internal$8011$dF01I
     g$chi-internal$11514$dF01I
     (case-lambda
       ((g$e*$10189$dF01I g$r$10190$dF01I g$mr$10191$dF01I)
        ((case-lambda
           ((g$rib$10192$dF01I)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$8026$dF01I
                   (g$map$5063$dF01I
                     (case-lambda
                       ((g$x$10201$dF01I)
                        (g$add-subst$7694$dF01I
                          g$rib$10192$dF01I
                          g$x$10201$dF01I)))
                     (g$syntax->list$7703$dF01I g$e*$10189$dF01I))
                   g$r$10190$dF01I
                   g$mr$10191$dF01I
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$10192$dF01I
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$10202$dF01I
                   g$r$10203$dF01I
                   g$mr$10204$dF01I
                   g$lex*$10205$dF01I
                   g$rhs*$10206$dF01I
                   g$mod**$10207$dF01I
                   g$kwd*$10208$dF01I
                   g$_exp*$10209$dF01I)
                 ((case-lambda
                    ((g$_exp*$10210$dF01I
                       g$kwd*$10211$dF01I
                       g$mod**$10212$dF01I
                       g$rhs*$10213$dF01I
                       g$lex*$10214$dF01I
                       g$mr$10215$dF01I
                       g$r$10216$dF01I
                       g$e*$10217$dF01I)
                     (begin
                       (if (null? g$e*$10217$dF01I)
                         (g$syntax-violation$8094$dF01I
                           '#f
                           '"no expression in body"
                           g$e*$10217$dF01I)
                         (void))
                       ((case-lambda
                          ((g$init*$10218$dF01I)
                           ((case-lambda
                              ((g$rhs*$10219$dF01I)
                               (g$build-letrec*$7636$dF01I
                                 '#f
                                 (reverse g$lex*$10214$dF01I)
                                 (reverse g$rhs*$10219$dF01I)
                                 (g$build-sequence$7633$dF01I
                                   '#f
                                   g$init*$10218$dF01I))))
                            (g$chi-rhs*$8008$dF01I
                              g$rhs*$10213$dF01I
                              g$r$10216$dF01I
                              g$mr$10215$dF01I))))
                        (g$chi-expr*$7998$dF01I
                          (append
                            (apply append (reverse g$mod**$10212$dF01I))
                            g$e*$10217$dF01I)
                          g$r$10216$dF01I
                          g$mr$10215$dF01I)))))
                  g$_exp*$10209$dF01I
                  g$kwd*$10208$dF01I
                  g$mod**$10207$dF01I
                  g$rhs*$10206$dF01I
                  g$lex*$10205$dF01I
                  g$mr$10204$dF01I
                  g$r$10203$dF01I
                  g$e*$10202$dF01I))))))
         (g$make-empty-rib$7664$dF01I)))))
   (g$parse-module$8012$dF01I
     g$parse-module$11515$dF01I
     (case-lambda
       ((g$e$10220$dF01I)
        ((case-lambda
           ((g$t$10221$dF01I)
            ((case-lambda
               ((g$ls/false$10222$dF01I)
                (if g$ls/false$10222$dF01I
                  (apply
                    (case-lambda
                      ((g$export*$10223$dF01I g$b*$10224$dF01I)
                       (begin
                         (if (not (g$for-all$5061$dF01I
                                    g$id?$7704$dF01I
                                    g$export*$10223$dF01I))
                           (g$syntax-violation$8094$dF01I
                             '#f
                             '"module exports must be identifiers"
                             g$e$10220$dF01I)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$10223$dF01I)
                           g$b*$10224$dF01I))))
                    g$ls/false$10222$dF01I)
                  ((case-lambda
                     ((g$t$10225$dF01I)
                      ((case-lambda
                         ((g$ls/false$10226$dF01I)
                          (if g$ls/false$10226$dF01I
                            (apply
                              (case-lambda
                                ((g$name$10227$dF01I
                                   g$export*$10228$dF01I
                                   g$b*$10229$dF01I)
                                 (begin
                                   (if (not (g$id?$7704$dF01I
                                              g$name$10227$dF01I))
                                     (g$syntax-violation$8094$dF01I
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$10220$dF01I)
                                     (void))
                                   (if (not (g$for-all$5061$dF01I
                                              g$id?$7704$dF01I
                                              g$export*$10228$dF01I))
                                     (g$syntax-violation$8094$dF01I
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$10220$dF01I)
                                     (void))
                                   (values
                                     g$name$10227$dF01I
                                     (list->vector g$export*$10228$dF01I)
                                     g$b*$10229$dF01I))))
                              g$ls/false$10226$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$10225$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$10225$dF01I
                         '(_ any each-any . each-any)))))
                   g$t$10221$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$10221$dF01I
               '(_ each-any . each-any)))))
         g$e$10220$dF01I))))
   (g$9059$8013$dF01I
     g$9059$11516$dF01I
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9062$dF01I
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$9061$8014$dF01I g$9061$11517$dF01I '#f)
   (g$9060$8015$dF01I
     g$9060$11518$dF01I
     (make-record-constructor-descriptor
       g$9059$8013$dF01I
       '#f
       g$9061$8014$dF01I))
   (g$module-interface?$8016$dF01I
     g$module-interface?$11519$dF01I
     (record-predicate g$9059$8013$dF01I))
   (g$make-module-interface$8017$dF01I
     g$make-module-interface$11520$dF01I
     (record-constructor g$9060$8015$dF01I))
   (g$module-interface-first-mark$8018$dF01I
     g$module-interface-first-mark$11521$dF01I
     (record-accessor g$9059$8013$dF01I '0))
   (g$module-interface-exp-id-vec$8019$dF01I
     g$module-interface-exp-id-vec$11522$dF01I
     (record-accessor g$9059$8013$dF01I '1))
   (g$module-interface-exp-lab-vec$8020$dF01I
     g$module-interface-exp-lab-vec$11523$dF01I
     (record-accessor g$9059$8013$dF01I '2))
   (g$set-module-interface-first-mark!$8021$dF01I
     g$set-module-interface-first-mark!$11524$dF01I
     (record-mutator g$9059$8013$dF01I '0))
   (g$set-module-interface-exp-id-vec!$8022$dF01I
     g$set-module-interface-exp-id-vec!$11525$dF01I
     (record-mutator g$9059$8013$dF01I '1))
   (g$set-module-interface-exp-lab-vec!$8023$dF01I
     g$set-module-interface-exp-lab-vec!$11526$dF01I
     (record-mutator g$9059$8013$dF01I '2))
   (g$module-interface-exp-id*$8024$dF01I
     g$module-interface-exp-id*$11527$dF01I
     (case-lambda
       ((g$iface$10230$dF01I g$id$10231$dF01I)
        (letrec* ((g$diff-marks$10232$dF01I
                    (case-lambda
                      ((g$ls$10236$dF01I g$x$10237$dF01I)
                       (begin
                         (if (null? g$ls$10236$dF01I)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$10238$dF01I)
                             (if (eq? g$a$10238$dF01I g$x$10237$dF01I)
                               '()
                               (cons
                                 g$a$10238$dF01I
                                 (g$diff-marks$10232$dF01I
                                   (cdr g$ls$10236$dF01I)
                                   g$x$10237$dF01I)))))
                          (car g$ls$10236$dF01I)))))))
          ((case-lambda
             ((g$diff$10233$dF01I g$id-vec$10234$dF01I)
              (if (null? g$diff$10233$dF01I)
                g$id-vec$10234$dF01I
                (vector-map
                  (case-lambda
                    ((g$x$10235$dF01I)
                     (g$make-stx$7677$dF01I
                       (g$stx-expr$7678$dF01I g$x$10235$dF01I)
                       (append
                         g$diff$10233$dF01I
                         (g$stx-mark*$7679$dF01I g$x$10235$dF01I))
                       '()
                       '())))
                  g$id-vec$10234$dF01I))))
           (g$diff-marks$10232$dF01I
             (g$stx-mark*$7679$dF01I g$id$10231$dF01I)
             (g$module-interface-first-mark$8018$dF01I g$iface$10230$dF01I))
           (g$module-interface-exp-id-vec$8019$dF01I g$iface$10230$dF01I))))))
   (g$chi-internal-module$8025$dF01I
     g$chi-internal-module$11528$dF01I
     (case-lambda
       ((g$e$10239$dF01I
          g$r$10240$dF01I
          g$mr$10241$dF01I
          g$lex*$10242$dF01I
          g$rhs*$10243$dF01I
          g$mod**$10244$dF01I
          g$kwd*$10245$dF01I)
        (call-with-values
          (case-lambda (() (g$parse-module$8012$dF01I g$e$10239$dF01I)))
          (case-lambda
            ((g$name$10249$dF01I g$exp-id*$10250$dF01I g$e*$10251$dF01I)
             ((case-lambda
                ((g$e*$10252$dF01I g$exp-id*$10253$dF01I g$name$10254$dF01I)
                 ((case-lambda
                    ((g$rib$10255$dF01I)
                     ((case-lambda
                        ((g$e*$10256$dF01I)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$8026$dF01I
                                g$e*$10256$dF01I
                                g$r$10240$dF01I
                                g$mr$10241$dF01I
                                g$lex*$10242$dF01I
                                g$rhs*$10243$dF01I
                                g$mod**$10244$dF01I
                                g$kwd*$10245$dF01I
                                '()
                                g$rib$10255$dF01I
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$10265$dF01I
                                g$r$10266$dF01I
                                g$mr$10267$dF01I
                                g$lex*$10268$dF01I
                                g$rhs*$10269$dF01I
                                g$mod**$10270$dF01I
                                g$kwd*$10271$dF01I
                                g$_exp*$10272$dF01I)
                              ((case-lambda
                                 ((g$_exp*$10273$dF01I
                                    g$kwd*$10274$dF01I
                                    g$mod**$10275$dF01I
                                    g$rhs*$10276$dF01I
                                    g$lex*$10277$dF01I
                                    g$mr$10278$dF01I
                                    g$r$10279$dF01I
                                    g$e*$10280$dF01I)
                                  ((case-lambda
                                     ((g$exp-lab*$10281$dF01I
                                        g$mod**$10282$dF01I)
                                      (if (not g$name$10254$dF01I)
                                        (values
                                          g$lex*$10277$dF01I
                                          g$rhs*$10276$dF01I
                                          g$exp-id*$10253$dF01I
                                          g$exp-lab*$10281$dF01I
                                          g$r$10279$dF01I
                                          g$mr$10278$dF01I
                                          g$mod**$10282$dF01I
                                          g$kwd*$10274$dF01I)
                                        ((case-lambda
                                           ((g$lab$10283$dF01I
                                              g$iface$10284$dF01I)
                                            (values
                                              g$lex*$10277$dF01I
                                              g$rhs*$10276$dF01I
                                              (vector g$name$10254$dF01I)
                                              (vector g$lab$10283$dF01I)
                                              (cons
                                                (cons
                                                  g$lab$10283$dF01I
                                                  (cons
                                                    '$module
                                                    g$iface$10284$dF01I))
                                                g$r$10279$dF01I)
                                              (cons
                                                (cons
                                                  g$lab$10283$dF01I
                                                  (cons
                                                    '$module
                                                    g$iface$10284$dF01I))
                                                g$mr$10278$dF01I)
                                              g$mod**$10282$dF01I
                                              g$kwd*$10274$dF01I)))
                                         (g$gen-label$7645$dF01I 'module)
                                         (g$make-module-interface$8017$dF01I
                                           (car (g$stx-mark*$7679$dF01I
                                                  g$name$10254$dF01I))
                                           (vector-map
                                             (case-lambda
                                               ((g$x$10285$dF01I)
                                                (g$make-stx$7677$dF01I
                                                  (g$stx-expr$7678$dF01I
                                                    g$x$10285$dF01I)
                                                  (g$stx-mark*$7679$dF01I
                                                    g$x$10285$dF01I)
                                                  '()
                                                  '())))
                                             g$exp-id*$10253$dF01I)
                                           g$exp-lab*$10281$dF01I)))))
                                   (vector-map
                                     (case-lambda
                                       ((g$x$10286$dF01I)
                                        ((case-lambda
                                           ((g$t$10287$dF01I)
                                            (if g$t$10287$dF01I
                                              g$t$10287$dF01I
                                              (begin
                                                '#f
                                                (g$syntax-violation$8094$dF01I
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$10286$dF01I)))))
                                         (g$id->label$7717$dF01I
                                           (g$make-stx$7677$dF01I
                                             (g$id->sym$7705$dF01I
                                               g$x$10286$dF01I)
                                             (g$stx-mark*$7679$dF01I
                                               g$x$10286$dF01I)
                                             (list g$rib$10255$dF01I)
                                             '())))))
                                     g$exp-id*$10253$dF01I)
                                   (cons
                                     g$e*$10280$dF01I
                                     g$mod**$10275$dF01I))))
                               g$_exp*$10272$dF01I
                               g$kwd*$10271$dF01I
                               g$mod**$10270$dF01I
                               g$rhs*$10269$dF01I
                               g$lex*$10268$dF01I
                               g$mr$10267$dF01I
                               g$r$10266$dF01I
                               g$e*$10265$dF01I))))))
                      (g$map$5063$dF01I
                        (case-lambda
                          ((g$x$10288$dF01I)
                           (g$add-subst$7694$dF01I
                             g$rib$10255$dF01I
                             g$x$10288$dF01I)))
                        (g$syntax->list$7703$dF01I g$e*$10252$dF01I)))))
                  (g$make-empty-rib$7664$dF01I))))
              g$e*$10251$dF01I
              g$exp-id*$10250$dF01I
              g$name$10249$dF01I)))))))
   (g$chi-body*$8026$dF01I
     g$chi-body*$11529$dF01I
     (case-lambda
       ((g$e*$10289$dF01I
          g$r$10290$dF01I
          g$mr$10291$dF01I
          g$lex*$10292$dF01I
          g$rhs*$10293$dF01I
          g$mod**$10294$dF01I
          g$kwd*$10295$dF01I
          g$exp*$10296$dF01I
          g$rib$10297$dF01I
          g$mix?$10298$dF01I
          g$sd?$10299$dF01I)
        (if (null? g$e*$10289$dF01I)
          (values
            g$e*$10289$dF01I
            g$r$10290$dF01I
            g$mr$10291$dF01I
            g$lex*$10292$dF01I
            g$rhs*$10293$dF01I
            g$mod**$10294$dF01I
            g$kwd*$10295$dF01I
            g$exp*$10296$dF01I)
          ((case-lambda
             ((g$e$10300$dF01I)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7724$dF01I g$e$10300$dF01I g$r$10290$dF01I)))
                (case-lambda
                  ((g$type$10304$dF01I g$value$10305$dF01I g$kwd$10306$dF01I)
                   ((case-lambda
                      ((g$kwd$10307$dF01I
                         g$value$10308$dF01I
                         g$type$10309$dF01I)
                       ((case-lambda
                          ((g$kwd*$10310$dF01I)
                           ((case-lambda
                              ((g$t$10311$dF01I)
                               (if (g$memv$5056$dF01I g$t$10311$dF01I '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7922$dF01I
                                        g$e$10300$dF01I)))
                                   (case-lambda
                                     ((g$id$10314$dF01I g$rhs$10315$dF01I)
                                      ((case-lambda
                                         ((g$rhs$10316$dF01I g$id$10317$dF01I)
                                          (begin
                                            (if (g$bound-id-member?$7711$dF01I
                                                  g$id$10317$dF01I
                                                  g$kwd*$10310$dF01I)
                                              (g$syntax-violation$8094$dF01I
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$10300$dF01I)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7647$dF01I
                                                   g$id$10317$dF01I
                                                   g$rib$10297$dF01I
                                                   g$sd?$10299$dF01I)))
                                              (case-lambda
                                                ((g$lab$10320$dF01I
                                                   g$lex$10321$dF01I)
                                                 ((case-lambda
                                                    ((g$lex$10322$dF01I
                                                       g$lab$10323$dF01I)
                                                     (begin
                                                       (g$extend-rib!$7667$dF01I
                                                         g$rib$10297$dF01I
                                                         g$id$10317$dF01I
                                                         g$lab$10323$dF01I
                                                         g$sd?$10299$dF01I)
                                                       (g$chi-body*$8026$dF01I
                                                         (cdr g$e*$10289$dF01I)
                                                         (g$add-lexical$7929$dF01I
                                                           g$lab$10323$dF01I
                                                           g$lex$10322$dF01I
                                                           g$r$10290$dF01I)
                                                         g$mr$10291$dF01I
                                                         (cons
                                                           g$lex$10322$dF01I
                                                           g$lex*$10292$dF01I)
                                                         (cons
                                                           g$rhs$10316$dF01I
                                                           g$rhs*$10293$dF01I)
                                                         g$mod**$10294$dF01I
                                                         g$kwd*$10310$dF01I
                                                         g$exp*$10296$dF01I
                                                         g$rib$10297$dF01I
                                                         g$mix?$10298$dF01I
                                                         g$sd?$10299$dF01I))))
                                                  g$lex$10321$dF01I
                                                  g$lab$10320$dF01I)))))))
                                       g$rhs$10315$dF01I
                                       g$id$10314$dF01I))))
                                 (if (g$memv$5056$dF01I
                                       g$t$10311$dF01I
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7923$dF01I
                                          g$e$10300$dF01I)))
                                     (case-lambda
                                       ((g$id$10326$dF01I g$rhs$10327$dF01I)
                                        ((case-lambda
                                           ((g$rhs$10328$dF01I g$id$10329$dF01I)
                                            (begin
                                              (if (g$bound-id-member?$7711$dF01I
                                                    g$id$10329$dF01I
                                                    g$kwd*$10310$dF01I)
                                                (g$syntax-violation$8094$dF01I
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$10300$dF01I)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$10330$dF01I)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$10331$dF01I)
                                                      (begin
                                                        (g$extend-rib!$7667$dF01I
                                                          g$rib$10297$dF01I
                                                          g$id$10329$dF01I
                                                          g$lab$10330$dF01I
                                                          g$sd?$10299$dF01I)
                                                        ((case-lambda
                                                           ((g$b$10332$dF01I)
                                                            (g$chi-body*$8026$dF01I
                                                              (cdr g$e*$10289$dF01I)
                                                              (cons
                                                                (cons
                                                                  g$lab$10330$dF01I
                                                                  g$b$10332$dF01I)
                                                                g$r$10290$dF01I)
                                                              (cons
                                                                (cons
                                                                  g$lab$10330$dF01I
                                                                  g$b$10332$dF01I)
                                                                g$mr$10291$dF01I)
                                                              g$lex*$10292$dF01I
                                                              g$rhs*$10293$dF01I
                                                              g$mod**$10294$dF01I
                                                              g$kwd*$10310$dF01I
                                                              g$exp*$10296$dF01I
                                                              g$rib$10297$dF01I
                                                              g$mix?$10298$dF01I
                                                              g$sd?$10299$dF01I)))
                                                         (g$make-eval-transformer$7736$dF01I
                                                           g$expanded-rhs$10331$dF01I)))))
                                                   (g$expand-transformer$8027$dF01I
                                                     g$rhs$10328$dF01I
                                                     g$mr$10291$dF01I))))
                                               (g$gen-define-label$7648$dF01I
                                                 g$id$10329$dF01I
                                                 g$rib$10297$dF01I
                                                 g$sd?$10299$dF01I)))))
                                         g$rhs$10327$dF01I
                                         g$id$10326$dF01I))))
                                   (if (g$memv$5056$dF01I
                                         g$t$10311$dF01I
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$10333$dF01I)
                                         ((case-lambda
                                            ((g$ls/false$10334$dF01I)
                                             (if (if g$ls/false$10334$dF01I
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$10335$dF01I
                                                            g$xrhs*$10336$dF01I
                                                            g$xbody*$10337$dF01I)
                                                          (if (not (g$valid-bound-ids?$7709$dF01I
                                                                     g$xlhs*$10335$dF01I))
                                                            (g$syntax-violation$8094$dF01I
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$10300$dF01I)
                                                            (void))))
                                                       g$ls/false$10334$dF01I))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$10338$dF01I
                                                      g$xrhs*$10339$dF01I
                                                      g$xbody*$10340$dF01I)
                                                    ((case-lambda
                                                       ((g$xlab*$10341$dF01I)
                                                        ((case-lambda
                                                           ((g$xrib$10342$dF01I)
                                                            ((case-lambda
                                                               ((g$xb*$10343$dF01I)
                                                                (g$chi-body*$8026$dF01I
                                                                  (append
                                                                    (g$map$5063$dF01I
                                                                      (case-lambda
                                                                        ((g$x$10344$dF01I)
                                                                         (g$add-subst$7694$dF01I
                                                                           g$xrib$10342$dF01I
                                                                           g$x$10344$dF01I)))
                                                                      g$xbody*$10340$dF01I)
                                                                    (cdr g$e*$10289$dF01I))
                                                                  (append
                                                                    (g$map$5063$dF01I
                                                                      cons
                                                                      g$xlab*$10341$dF01I
                                                                      g$xb*$10343$dF01I)
                                                                    g$r$10290$dF01I)
                                                                  (append
                                                                    (g$map$5063$dF01I
                                                                      cons
                                                                      g$xlab*$10341$dF01I
                                                                      g$xb*$10343$dF01I)
                                                                    g$mr$10291$dF01I)
                                                                  g$lex*$10292$dF01I
                                                                  g$rhs*$10293$dF01I
                                                                  g$mod**$10294$dF01I
                                                                  g$kwd*$10310$dF01I
                                                                  g$exp*$10296$dF01I
                                                                  g$rib$10297$dF01I
                                                                  g$mix?$10298$dF01I
                                                                  g$sd?$10299$dF01I)))
                                                             (g$map$5063$dF01I
                                                               (case-lambda
                                                                 ((g$x$10345$dF01I)
                                                                  (g$make-eval-transformer$7736$dF01I
                                                                    (g$expand-transformer$8027$dF01I
                                                                      (if (eq? g$type$10309$dF01I
                                                                               'let-syntax)
                                                                        g$x$10345$dF01I
                                                                        (g$add-subst$7694$dF01I
                                                                          g$xrib$10342$dF01I
                                                                          g$x$10345$dF01I))
                                                                      g$mr$10291$dF01I))))
                                                               g$xrhs*$10339$dF01I))))
                                                         (g$make-full-rib$7672$dF01I
                                                           g$xlhs*$10338$dF01I
                                                           g$xlab*$10341$dF01I))))
                                                     (g$map$5063$dF01I
                                                       g$gen-label$7645$dF01I
                                                       g$xlhs*$10338$dF01I))))
                                                 g$ls/false$10334$dF01I)
                                               (g$syntax-violation$8094$dF01I
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$10333$dF01I))))
                                          (g$syntax-dispatch$7982$dF01I
                                            g$t$10333$dF01I
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$10300$dF01I)
                                     (if (g$memv$5056$dF01I
                                           g$t$10311$dF01I
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$10346$dF01I)
                                           ((case-lambda
                                              ((g$ls/false$10347$dF01I)
                                               (if g$ls/false$10347$dF01I
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$10348$dF01I)
                                                      (g$chi-body*$8026$dF01I
                                                        (append
                                                          g$x*$10348$dF01I
                                                          (cdr g$e*$10289$dF01I))
                                                        g$r$10290$dF01I
                                                        g$mr$10291$dF01I
                                                        g$lex*$10292$dF01I
                                                        g$rhs*$10293$dF01I
                                                        g$mod**$10294$dF01I
                                                        g$kwd*$10310$dF01I
                                                        g$exp*$10296$dF01I
                                                        g$rib$10297$dF01I
                                                        g$mix?$10298$dF01I
                                                        g$sd?$10299$dF01I)))
                                                   g$ls/false$10347$dF01I)
                                                 (g$syntax-violation$8094$dF01I
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$10346$dF01I))))
                                            (g$syntax-dispatch$7982$dF01I
                                              g$t$10346$dF01I
                                              '(_ . each-any)))))
                                        g$e$10300$dF01I)
                                       (if (g$memv$5056$dF01I
                                             g$t$10311$dF01I
                                             '(global-macro global-macro!))
                                         (g$chi-body*$8026$dF01I
                                           (cons
                                             (g$add-subst$7694$dF01I
                                               g$rib$10297$dF01I
                                               (g$chi-global-macro$7997$dF01I
                                                 g$value$10308$dF01I
                                                 g$e$10300$dF01I))
                                             (cdr g$e*$10289$dF01I))
                                           g$r$10290$dF01I
                                           g$mr$10291$dF01I
                                           g$lex*$10292$dF01I
                                           g$rhs*$10293$dF01I
                                           g$mod**$10294$dF01I
                                           g$kwd*$10310$dF01I
                                           g$exp*$10296$dF01I
                                           g$rib$10297$dF01I
                                           g$mix?$10298$dF01I
                                           g$sd?$10299$dF01I)
                                         (if (g$memv$5056$dF01I
                                               g$t$10311$dF01I
                                               '(local-macro local-macro!))
                                           (g$chi-body*$8026$dF01I
                                             (cons
                                               (g$add-subst$7694$dF01I
                                                 g$rib$10297$dF01I
                                                 (g$chi-local-macro$7996$dF01I
                                                   g$value$10308$dF01I
                                                   g$e$10300$dF01I))
                                               (cdr g$e*$10289$dF01I))
                                             g$r$10290$dF01I
                                             g$mr$10291$dF01I
                                             g$lex*$10292$dF01I
                                             g$rhs*$10293$dF01I
                                             g$mod**$10294$dF01I
                                             g$kwd*$10310$dF01I
                                             g$exp*$10296$dF01I
                                             g$rib$10297$dF01I
                                             g$mix?$10298$dF01I
                                             g$sd?$10299$dF01I)
                                           (if (g$memv$5056$dF01I
                                                 g$t$10311$dF01I
                                                 '(macro macro!))
                                             (g$chi-body*$8026$dF01I
                                               (cons
                                                 (g$add-subst$7694$dF01I
                                                   g$rib$10297$dF01I
                                                   (g$chi-macro$7995$dF01I
                                                     g$value$10308$dF01I
                                                     g$e$10300$dF01I))
                                                 (cdr g$e*$10289$dF01I))
                                               g$r$10290$dF01I
                                               g$mr$10291$dF01I
                                               g$lex*$10292$dF01I
                                               g$rhs*$10293$dF01I
                                               g$mod**$10294$dF01I
                                               g$kwd*$10310$dF01I
                                               g$exp*$10296$dF01I
                                               g$rib$10297$dF01I
                                               g$mix?$10298$dF01I
                                               g$sd?$10299$dF01I)
                                             (if (g$memv$5056$dF01I
                                                   g$t$10311$dF01I
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$8025$dF01I
                                                      g$e$10300$dF01I
                                                      g$r$10290$dF01I
                                                      g$mr$10291$dF01I
                                                      g$lex*$10292$dF01I
                                                      g$rhs*$10293$dF01I
                                                      g$mod**$10294$dF01I
                                                      g$kwd*$10310$dF01I)))
                                                 (case-lambda
                                                   ((g$lex*$10357$dF01I
                                                      g$rhs*$10358$dF01I
                                                      g$m-exp-id*$10359$dF01I
                                                      g$m-exp-lab*$10360$dF01I
                                                      g$r$10361$dF01I
                                                      g$mr$10362$dF01I
                                                      g$mod**$10363$dF01I
                                                      g$kwd*$10364$dF01I)
                                                    ((case-lambda
                                                       ((g$kwd*$10365$dF01I
                                                          g$mod**$10366$dF01I
                                                          g$mr$10367$dF01I
                                                          g$r$10368$dF01I
                                                          g$m-exp-lab*$10369$dF01I
                                                          g$m-exp-id*$10370$dF01I
                                                          g$rhs*$10371$dF01I
                                                          g$lex*$10372$dF01I)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$10373$dF01I
                                                                 g$lab$10374$dF01I)
                                                               (g$extend-rib!$7667$dF01I
                                                                 g$rib$10297$dF01I
                                                                 g$id$10373$dF01I
                                                                 g$lab$10374$dF01I
                                                                 g$sd?$10299$dF01I)))
                                                            g$m-exp-id*$10370$dF01I
                                                            g$m-exp-lab*$10369$dF01I)
                                                          (g$chi-body*$8026$dF01I
                                                            (cdr g$e*$10289$dF01I)
                                                            g$r$10368$dF01I
                                                            g$mr$10367$dF01I
                                                            g$lex*$10372$dF01I
                                                            g$rhs*$10371$dF01I
                                                            g$mod**$10366$dF01I
                                                            g$kwd*$10365$dF01I
                                                            g$exp*$10296$dF01I
                                                            g$rib$10297$dF01I
                                                            g$mix?$10298$dF01I
                                                            g$sd?$10299$dF01I))))
                                                     g$kwd*$10364$dF01I
                                                     g$mod**$10363$dF01I
                                                     g$mr$10362$dF01I
                                                     g$r$10361$dF01I
                                                     g$m-exp-lab*$10360$dF01I
                                                     g$m-exp-id*$10359$dF01I
                                                     g$rhs*$10358$dF01I
                                                     g$lex*$10357$dF01I))))
                                               (if (g$memv$5056$dF01I
                                                     g$t$10311$dF01I
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$8078$dF01I
                                                     (g$stx->datum$7715$dF01I
                                                       g$e$10300$dF01I))
                                                   (g$chi-body*$8026$dF01I
                                                     (cdr g$e*$10289$dF01I)
                                                     g$r$10290$dF01I
                                                     g$mr$10291$dF01I
                                                     g$lex*$10292$dF01I
                                                     g$rhs*$10293$dF01I
                                                     g$mod**$10294$dF01I
                                                     g$kwd*$10310$dF01I
                                                     g$exp*$10296$dF01I
                                                     g$rib$10297$dF01I
                                                     g$mix?$10298$dF01I
                                                     g$sd?$10299$dF01I))
                                                 (if (g$memv$5056$dF01I
                                                       g$t$10311$dF01I
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$10375$dF01I)
                                                       ((case-lambda
                                                          ((g$ls/false$10376$dF01I)
                                                           (if g$ls/false$10376$dF01I
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$10377$dF01I)
                                                                  (g$chi-body*$8026$dF01I
                                                                    (cdr g$e*$10289$dF01I)
                                                                    g$r$10290$dF01I
                                                                    g$mr$10291$dF01I
                                                                    g$lex*$10292$dF01I
                                                                    g$rhs*$10293$dF01I
                                                                    g$mod**$10294$dF01I
                                                                    g$kwd*$10310$dF01I
                                                                    (append
                                                                      g$exp-decl*$10377$dF01I
                                                                      g$exp*$10296$dF01I)
                                                                    g$rib$10297$dF01I
                                                                    g$mix?$10298$dF01I
                                                                    g$sd?$10299$dF01I)))
                                                               g$ls/false$10376$dF01I)
                                                             (g$syntax-violation$8094$dF01I
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$10375$dF01I))))
                                                        (g$syntax-dispatch$7982$dF01I
                                                          g$t$10375$dF01I
                                                          '(_ . each-any)))))
                                                    g$e$10300$dF01I)
                                                   (if (g$memv$5056$dF01I
                                                         g$t$10311$dF01I
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$10378$dF01I
                                                                     (case-lambda
                                                                       ((g$e$10420$dF01I)
                                                                        ((case-lambda
                                                                           ((g$t$10421$dF01I)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10422$dF01I)
                                                                                (if (if g$ls/false$10422$dF01I
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10423$dF01I)
                                                                                             (g$id?$7704$dF01I
                                                                                               g$id$10423$dF01I)))
                                                                                          g$ls/false$10422$dF01I))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10424$dF01I)
                                                                                       '#t))
                                                                                    g$ls/false$10422$dF01I)
                                                                                  ((case-lambda
                                                                                     ((g$t$10425$dF01I)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10426$dF01I)
                                                                                          (if g$ls/false$10426$dF01I
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10427$dF01I)
                                                                                                 '#f))
                                                                                              g$ls/false$10426$dF01I)
                                                                                            ((case-lambda
                                                                                               ((g$t$10428$dF01I)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10429$dF01I)
                                                                                                    (if g$ls/false$10429$dF01I
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$8094$dF01I
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10420$dF01I)))
                                                                                                        g$ls/false$10429$dF01I)
                                                                                                      (g$syntax-violation$8094$dF01I
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10428$dF01I))))
                                                                                                 (g$syntax-dispatch$7982$dF01I
                                                                                                   g$t$10428$dF01I
                                                                                                   '_))))
                                                                                             g$t$10425$dF01I))))
                                                                                       (g$syntax-dispatch$7982$dF01I
                                                                                         g$t$10425$dF01I
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10421$dF01I))))
                                                                             (g$syntax-dispatch$7982$dF01I
                                                                               g$t$10421$dF01I
                                                                               '(_ any)))))
                                                                         g$e$10420$dF01I))))
                                                                   (g$module-import$10379$dF01I
                                                                     (case-lambda
                                                                       ((g$e$10403$dF01I
                                                                          g$r$10404$dF01I)
                                                                        ((case-lambda
                                                                           ((g$t$10405$dF01I)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10406$dF01I)
                                                                                (if (if g$ls/false$10406$dF01I
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10407$dF01I)
                                                                                             (g$id?$7704$dF01I
                                                                                               g$id$10407$dF01I)))
                                                                                          g$ls/false$10406$dF01I))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10408$dF01I)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7724$dF01I
                                                                                              g$id$10408$dF01I
                                                                                              g$r$10404$dF01I)))
                                                                                         (case-lambda
                                                                                           ((g$type$10412$dF01I
                                                                                              g$value$10413$dF01I
                                                                                              g$kwd$10414$dF01I)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$10415$dF01I
                                                                                                  g$value$10416$dF01I
                                                                                                  g$type$10417$dF01I)
                                                                                                ((case-lambda
                                                                                                   ((g$t$10418$dF01I)
                                                                                                    (if (g$memv$5056$dF01I
                                                                                                          g$t$10418$dF01I
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10419$dF01I)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$8024$dF01I
                                                                                                              g$iface$10419$dF01I
                                                                                                              g$id$10408$dF01I)
                                                                                                            (g$module-interface-exp-lab-vec$8020$dF01I
                                                                                                              g$iface$10419$dF01I))))
                                                                                                       g$value$10416$dF01I)
                                                                                                      (g$syntax-violation$8094$dF01I
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$10403$dF01I))))
                                                                                                 g$type$10417$dF01I)))
                                                                                             g$kwd$10414$dF01I
                                                                                             g$value$10413$dF01I
                                                                                             g$type$10412$dF01I))))))
                                                                                    g$ls/false$10406$dF01I)
                                                                                  (g$syntax-violation$8094$dF01I
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$10405$dF01I))))
                                                                             (g$syntax-dispatch$7982$dF01I
                                                                               g$t$10405$dF01I
                                                                               '(_ any)))))
                                                                         g$e$10403$dF01I))))
                                                                   (g$library-import$10380$dF01I
                                                                     (case-lambda
                                                                       ((g$e$10389$dF01I)
                                                                        ((case-lambda
                                                                           ((g$t$10390$dF01I)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10391$dF01I)
                                                                                (if g$ls/false$10391$dF01I
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$10392$dF01I
                                                                                         g$imp*$10393$dF01I)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$8031$dF01I
                                                                                              (g$syntax->datum$8097$dF01I
                                                                                                g$imp*$10393$dF01I))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$10396$dF01I
                                                                                              g$subst-labels$10397$dF01I)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$10398$dF01I
                                                                                                  g$subst-names$10399$dF01I)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$10400$dF01I)
                                                                                                       (g$datum->stx$7687$dF01I
                                                                                                         g$ctxt$10392$dF01I
                                                                                                         g$name$10400$dF01I)))
                                                                                                    g$subst-names$10399$dF01I)
                                                                                                  g$subst-labels$10398$dF01I)))
                                                                                             g$subst-labels$10397$dF01I
                                                                                             g$subst-names$10396$dF01I))))))
                                                                                    g$ls/false$10391$dF01I)
                                                                                  ((case-lambda
                                                                                     ((g$t$10401$dF01I)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10402$dF01I)
                                                                                          (if g$ls/false$10402$dF01I
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8094$dF01I
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$10389$dF01I)))
                                                                                              g$ls/false$10402$dF01I)
                                                                                            (g$syntax-violation$8094$dF01I
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10401$dF01I))))
                                                                                       (g$syntax-dispatch$7982$dF01I
                                                                                         g$t$10401$dF01I
                                                                                         '_))))
                                                                                   g$t$10390$dF01I))))
                                                                             (g$syntax-dispatch$7982$dF01I
                                                                               g$t$10390$dF01I
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$10389$dF01I)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$10378$dF01I
                                                                        g$e$10300$dF01I)
                                                                    (g$module-import$10379$dF01I
                                                                      g$e$10300$dF01I
                                                                      g$r$10290$dF01I)
                                                                    (g$library-import$10380$dF01I
                                                                      g$e$10300$dF01I))))
                                                               (case-lambda
                                                                 ((g$id*$10383$dF01I
                                                                    g$lab*$10384$dF01I)
                                                                  ((case-lambda
                                                                     ((g$lab*$10385$dF01I
                                                                        g$id*$10386$dF01I)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$10387$dF01I
                                                                             g$lab$10388$dF01I)
                                                                           (g$extend-rib!$7667$dF01I
                                                                             g$rib$10297$dF01I
                                                                             g$id$10387$dF01I
                                                                             g$lab$10388$dF01I
                                                                             g$sd?$10299$dF01I)))
                                                                        g$id*$10386$dF01I
                                                                        g$lab*$10385$dF01I)))
                                                                   g$lab*$10384$dF01I
                                                                   g$id*$10383$dF01I))))
                                                             (g$chi-body*$8026$dF01I
                                                               (cdr g$e*$10289$dF01I)
                                                               g$r$10290$dF01I
                                                               g$mr$10291$dF01I
                                                               g$lex*$10292$dF01I
                                                               g$rhs*$10293$dF01I
                                                               g$mod**$10294$dF01I
                                                               g$kwd*$10310$dF01I
                                                               g$exp*$10296$dF01I
                                                               g$rib$10297$dF01I
                                                               g$mix?$10298$dF01I
                                                               g$sd?$10299$dF01I))))))
                                                     (if g$mix?$10298$dF01I
                                                       (g$chi-body*$8026$dF01I
                                                         (cdr g$e*$10289$dF01I)
                                                         g$r$10290$dF01I
                                                         g$mr$10291$dF01I
                                                         (cons
                                                           (g$gen-lexical$7643$dF01I
                                                             'dummy)
                                                           g$lex*$10292$dF01I)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$10300$dF01I)
                                                           g$rhs*$10293$dF01I)
                                                         g$mod**$10294$dF01I
                                                         g$kwd*$10310$dF01I
                                                         g$exp*$10296$dF01I
                                                         g$rib$10297$dF01I
                                                         '#t
                                                         g$sd?$10299$dF01I)
                                                       (values
                                                         g$e*$10289$dF01I
                                                         g$r$10290$dF01I
                                                         g$mr$10291$dF01I
                                                         g$lex*$10292$dF01I
                                                         g$rhs*$10293$dF01I
                                                         g$mod**$10294$dF01I
                                                         g$kwd*$10310$dF01I
                                                         g$exp*$10296$dF01I)))))))))))))))
                            g$type$10309$dF01I)))
                        (if (g$id?$7704$dF01I g$kwd$10307$dF01I)
                          (cons g$kwd$10307$dF01I g$kwd*$10295$dF01I)
                          g$kwd*$10295$dF01I))))
                    g$kwd$10306$dF01I
                    g$value$10305$dF01I
                    g$type$10304$dF01I))))))
           (car g$e*$10289$dF01I))))))
   (g$expand-transformer$8027$dF01I
     g$expand-transformer$11530$dF01I
     (case-lambda
       ((g$expr$10430$dF01I g$r$10431$dF01I)
        ((case-lambda
           ((g$rtc$10432$dF01I)
            ((case-lambda
               ((g$expanded-rhs$10433$dF01I)
                (begin
                  (g$for-each$5064$dF01I
                    ((case-lambda
                       ((g$mark-visit$10434$dF01I)
                        (case-lambda
                          ((g$x$10435$dF01I)
                           (begin
                             (g$invoke-library$7514$dF01I g$x$10435$dF01I)
                             (g$mark-visit$10434$dF01I g$x$10435$dF01I))))))
                     (g$vis-collector$8035$dF01I))
                    (g$rtc$10432$dF01I))
                  g$expanded-rhs$10433$dF01I)))
             ((case-lambda
                ((g$inv-collector$10440$dF01I
                   g$vis-collector$10441$dF01I
                   g$inv-collector$10442$dF01I
                   g$vis-collector$10443$dF01I)
                 ((case-lambda
                    ((g$swap$10444$dF01I)
                     (dynamic-wind
                       g$swap$10444$dF01I
                       (case-lambda
                         (()
                          (g$chi-expr$8000$dF01I
                            g$expr$10430$dF01I
                            g$r$10431$dF01I
                            g$r$10431$dF01I)))
                       g$swap$10444$dF01I)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10445$dF01I)
                           (begin
                             (g$inv-collector$10440$dF01I
                               g$inv-collector$10442$dF01I)
                             (set! g$inv-collector$10442$dF01I
                               g$t$10445$dF01I))))
                        (g$inv-collector$10440$dF01I))
                       ((case-lambda
                          ((g$t$10446$dF01I)
                           (begin
                             (g$vis-collector$10441$dF01I
                               g$vis-collector$10443$dF01I)
                             (set! g$vis-collector$10443$dF01I
                               g$t$10446$dF01I))))
                        (g$vis-collector$10441$dF01I))))))))
              g$inv-collector$8034$dF01I
              g$vis-collector$8035$dF01I
              g$rtc$10432$dF01I
              (case-lambda ((g$x$10447$dF01I) (values)))))))
         (g$make-collector$8033$dF01I)))))
   (g$parse-exports$8028$dF01I
     g$parse-exports$11531$dF01I
     (case-lambda
       ((g$exp*$10448$dF01I)
        ((letrec ((g$f$10449$dF01I
                    (case-lambda
                      ((g$exp*$10450$dF01I
                         g$int*$10451$dF01I
                         g$ext*$10452$dF01I)
                       (if (null? g$exp*$10450$dF01I)
                         (begin
                           (if (not (g$valid-bound-ids?$7709$dF01I
                                      g$ext*$10452$dF01I))
                             (g$syntax-violation$8094$dF01I
                               'export
                               '"invalid exports"
                               (g$find-dups$8010$dF01I g$ext*$10452$dF01I))
                             (void))
                           (values
                             (g$map$5063$dF01I
                               g$syntax->datum$8097$dF01I
                               g$ext*$10452$dF01I)
                             g$int*$10451$dF01I))
                         ((case-lambda
                            ((g$t$10453$dF01I)
                             ((case-lambda
                                ((g$ls/false$10454$dF01I)
                                 (if g$ls/false$10454$dF01I
                                   (apply
                                     (case-lambda
                                       ((g$rename$10455$dF01I
                                          g$i*$10456$dF01I
                                          g$e*$10457$dF01I)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$8097$dF01I
                                                              g$rename$10455$dF01I)
                                                            'rename)
                                                     (if (g$for-all$5061$dF01I
                                                           g$id?$7704$dF01I
                                                           g$i*$10456$dF01I)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5061$dF01I
                                                           g$id?$7704$dF01I
                                                           g$e*$10457$dF01I))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$8094$dF01I
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10450$dF01I))
                                            (void))
                                          (g$f$10449$dF01I
                                            (cdr g$exp*$10450$dF01I)
                                            (append
                                              g$i*$10456$dF01I
                                              g$int*$10451$dF01I)
                                            (append
                                              g$e*$10457$dF01I
                                              g$ext*$10452$dF01I)))))
                                     g$ls/false$10454$dF01I)
                                   ((case-lambda
                                      ((g$t$10458$dF01I)
                                       ((case-lambda
                                          ((g$ls/false$10459$dF01I)
                                           (if g$ls/false$10459$dF01I
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10460$dF01I)
                                                  (begin
                                                    (if (not (g$id?$7704$dF01I
                                                               g$ie$10460$dF01I))
                                                      (g$syntax-violation$8094$dF01I
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10460$dF01I)
                                                      (void))
                                                    (g$f$10449$dF01I
                                                      (cdr g$exp*$10450$dF01I)
                                                      (cons
                                                        g$ie$10460$dF01I
                                                        g$int*$10451$dF01I)
                                                      (cons
                                                        g$ie$10460$dF01I
                                                        g$ext*$10452$dF01I)))))
                                               g$ls/false$10459$dF01I)
                                             (g$syntax-violation$8094$dF01I
                                               '#f
                                               '"invalid syntax"
                                               g$t$10458$dF01I))))
                                        (g$syntax-dispatch$7982$dF01I
                                          g$t$10458$dF01I
                                          'any))))
                                    g$t$10453$dF01I))))
                              (g$syntax-dispatch$7982$dF01I
                                g$t$10453$dF01I
                                '(any . #(each (any any)))))))
                          (car g$exp*$10450$dF01I)))))))
           g$f$10449$dF01I)
         g$exp*$10448$dF01I
         '()
         '()))))
   (g$parse-library-name$8029$dF01I
     g$parse-library-name$11532$dF01I
     (case-lambda
       ((g$spec$10461$dF01I)
        (letrec* ((g$parse$10462$dF01I
                    (case-lambda
                      ((g$x$10469$dF01I)
                       ((case-lambda
                          ((g$t$10470$dF01I)
                           ((case-lambda
                              ((g$ls/false$10471$dF01I)
                               (if (if g$ls/false$10471$dF01I
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10472$dF01I)
                                            (g$for-all$5061$dF01I
                                              (case-lambda
                                                ((g$x$10473$dF01I)
                                                 ((case-lambda
                                                    ((g$x$10474$dF01I)
                                                     (if (integer?
                                                           g$x$10474$dF01I)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10474$dF01I))
                                                       '#f)))
                                                  (g$syntax->datum$8097$dF01I
                                                    g$x$10473$dF01I))))
                                              g$v*$10472$dF01I)))
                                         g$ls/false$10471$dF01I))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10475$dF01I)
                                      (values
                                        '()
                                        (g$map$5063$dF01I
                                          g$syntax->datum$8097$dF01I
                                          g$v*$10475$dF01I))))
                                   g$ls/false$10471$dF01I)
                                 ((case-lambda
                                    ((g$t$10476$dF01I)
                                     ((case-lambda
                                        ((g$ls/false$10477$dF01I)
                                         (if (if g$ls/false$10477$dF01I
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10478$dF01I
                                                        g$rest$10479$dF01I)
                                                      (symbol?
                                                        (g$syntax->datum$8097$dF01I
                                                          g$x$10478$dF01I))))
                                                   g$ls/false$10477$dF01I))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10480$dF01I
                                                  g$rest$10481$dF01I)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10462$dF01I
                                                       g$rest$10481$dF01I)))
                                                  (case-lambda
                                                    ((g$x*$10484$dF01I
                                                       g$v*$10485$dF01I)
                                                     ((case-lambda
                                                        ((g$v*$10486$dF01I
                                                           g$x*$10487$dF01I)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$8097$dF01I
                                                               g$x$10480$dF01I)
                                                             g$x*$10487$dF01I)
                                                           g$v*$10486$dF01I)))
                                                      g$v*$10485$dF01I
                                                      g$x*$10484$dF01I))))))
                                             g$ls/false$10477$dF01I)
                                           ((case-lambda
                                              ((g$t$10488$dF01I)
                                               ((case-lambda
                                                  ((g$ls/false$10489$dF01I)
                                                   (if g$ls/false$10489$dF01I
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10489$dF01I)
                                                     ((case-lambda
                                                        ((g$t$10490$dF01I)
                                                         ((case-lambda
                                                            ((g$ls/false$10491$dF01I)
                                                             (if g$ls/false$10491$dF01I
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8094$dF01I
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10461$dF01I)))
                                                                 g$ls/false$10491$dF01I)
                                                               (g$syntax-violation$8094$dF01I
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10490$dF01I))))
                                                          (g$syntax-dispatch$7982$dF01I
                                                            g$t$10490$dF01I
                                                            '_))))
                                                      g$t$10488$dF01I))))
                                                (g$syntax-dispatch$7982$dF01I
                                                  g$t$10488$dF01I
                                                  '()))))
                                            g$t$10476$dF01I))))
                                      (g$syntax-dispatch$7982$dF01I
                                        g$t$10476$dF01I
                                        '(any . any)))))
                                  g$t$10470$dF01I))))
                            (g$syntax-dispatch$7982$dF01I
                              g$t$10470$dF01I
                              '(each-any)))))
                        g$x$10469$dF01I)))))
          (call-with-values
            (case-lambda (() (g$parse$10462$dF01I g$spec$10461$dF01I)))
            (case-lambda
              ((g$name*$10465$dF01I g$ver*$10466$dF01I)
               ((case-lambda
                  ((g$ver*$10467$dF01I g$name*$10468$dF01I)
                   (begin
                     (if (null? g$name*$10468$dF01I)
                       (g$syntax-violation$8094$dF01I
                         '#f
                         '"empty library name"
                         g$spec$10461$dF01I)
                       (void))
                     (values g$name*$10468$dF01I g$ver*$10467$dF01I))))
                g$ver*$10466$dF01I
                g$name*$10465$dF01I))))))))
   (g$parse-library$8030$dF01I
     g$parse-library$11533$dF01I
     (case-lambda
       ((g$e$10492$dF01I)
        ((case-lambda
           ((g$t$10493$dF01I)
            ((case-lambda
               ((g$ls/false$10494$dF01I)
                (if (if g$ls/false$10494$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10495$dF01I
                               g$name*$10496$dF01I
                               g$export$10497$dF01I
                               g$exp*$10498$dF01I
                               g$import$10499$dF01I
                               g$imp*$10500$dF01I
                               g$b*$10501$dF01I)
                             (if (eq? (g$syntax->datum$8097$dF01I
                                        g$export$10497$dF01I)
                                      'export)
                               (if (eq? (g$syntax->datum$8097$dF01I
                                          g$import$10499$dF01I)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$8097$dF01I
                                          g$library$10495$dF01I)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10494$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10502$dF01I
                         g$name*$10503$dF01I
                         g$export$10504$dF01I
                         g$exp*$10505$dF01I
                         g$import$10506$dF01I
                         g$imp*$10507$dF01I
                         g$b*$10508$dF01I)
                       (values
                         g$name*$10503$dF01I
                         g$exp*$10505$dF01I
                         g$imp*$10507$dF01I
                         g$b*$10508$dF01I)))
                    g$ls/false$10494$dF01I)
                  ((case-lambda
                     ((g$t$10509$dF01I)
                      ((case-lambda
                         ((g$ls/false$10510$dF01I)
                          (if g$ls/false$10510$dF01I
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8094$dF01I
                                   '#f
                                   '"malformed library"
                                   g$e$10492$dF01I)))
                              g$ls/false$10510$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$10509$dF01I))))
                       (g$syntax-dispatch$7982$dF01I g$t$10509$dF01I '_))))
                   g$t$10493$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$10493$dF01I
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10492$dF01I))))
   (g$parse-import-spec*$8031$dF01I
     g$parse-import-spec*$11534$dF01I
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10511$dF01I
                     (case-lambda
                       ((g$x$10772$dF01I)
                        (symbol?
                          (g$syntax->datum$8097$dF01I g$x$10772$dF01I)))))
                   (g$dup-error$10512$dF01I
                     (case-lambda
                       ((g$name$10771$dF01I)
                        (g$syntax-violation$8094$dF01I
                          'import
                          '"two imports with different bindings"
                          g$name$10771$dF01I))))
                   (g$merge-substs$10513$dF01I
                     (case-lambda
                       ((g$s$10762$dF01I g$subst$10763$dF01I)
                        (letrec* ((g$insert-to-subst$10764$dF01I
                                    (case-lambda
                                      ((g$a$10765$dF01I g$subst$10766$dF01I)
                                       ((case-lambda
                                          ((g$name$10767$dF01I
                                             g$label$10768$dF01I)
                                           ((case-lambda
                                              ((g$t$10769$dF01I)
                                               (if g$t$10769$dF01I
                                                 ((case-lambda
                                                    ((g$x$10770$dF01I)
                                                     (if (eq? (cdr g$x$10770$dF01I)
                                                              g$label$10768$dF01I)
                                                       g$subst$10766$dF01I
                                                       (g$dup-error$10512$dF01I
                                                         g$name$10767$dF01I))))
                                                  g$t$10769$dF01I)
                                                 (cons
                                                   g$a$10765$dF01I
                                                   g$subst$10766$dF01I))))
                                            (g$assq$5051$dF01I
                                              g$name$10767$dF01I
                                              g$subst$10766$dF01I))))
                                        (car g$a$10765$dF01I)
                                        (cdr g$a$10765$dF01I))))))
                          (if (null? g$s$10762$dF01I)
                            g$subst$10763$dF01I
                            (g$insert-to-subst$10764$dF01I
                              (car g$s$10762$dF01I)
                              (g$merge-substs$10513$dF01I
                                (cdr g$s$10762$dF01I)
                                g$subst$10763$dF01I)))))))
                   (g$exclude*$10514$dF01I
                     (case-lambda
                       ((g$sym*$10738$dF01I g$subst$10739$dF01I)
                        (letrec* ((g$exclude$10740$dF01I
                                    (case-lambda
                                      ((g$sym$10753$dF01I g$subst$10754$dF01I)
                                       (if (null? g$subst$10754$dF01I)
                                         (g$syntax-violation$8094$dF01I
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10753$dF01I)
                                         (if (eq? g$sym$10753$dF01I
                                                  (g$caar$5263$dF01I
                                                    g$subst$10754$dF01I))
                                           (values
                                             (g$cdar$5265$dF01I
                                               g$subst$10754$dF01I)
                                             (cdr g$subst$10754$dF01I))
                                           ((case-lambda
                                              ((g$a$10755$dF01I)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10740$dF01I
                                                      g$sym$10753$dF01I
                                                      (cdr g$subst$10754$dF01I))))
                                                 (case-lambda
                                                   ((g$old$10758$dF01I
                                                      g$subst$10759$dF01I)
                                                    ((case-lambda
                                                       ((g$subst$10760$dF01I
                                                          g$old$10761$dF01I)
                                                        (values
                                                          g$old$10761$dF01I
                                                          (cons
                                                            g$a$10755$dF01I
                                                            g$subst$10760$dF01I))))
                                                     g$subst$10759$dF01I
                                                     g$old$10758$dF01I))))))
                                            (car g$subst$10754$dF01I))))))))
                          (if (null? g$sym*$10738$dF01I)
                            (values '() g$subst$10739$dF01I)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10740$dF01I
                                   (car g$sym*$10738$dF01I)
                                   g$subst$10739$dF01I)))
                              (case-lambda
                                ((g$old$10743$dF01I g$subst$10744$dF01I)
                                 ((case-lambda
                                    ((g$subst$10745$dF01I g$old$10746$dF01I)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10514$dF01I
                                            (cdr g$sym*$10738$dF01I)
                                            g$subst$10745$dF01I)))
                                       (case-lambda
                                         ((g$old*$10749$dF01I
                                            g$subst$10750$dF01I)
                                          ((case-lambda
                                             ((g$subst$10751$dF01I
                                                g$old*$10752$dF01I)
                                              (values
                                                (cons
                                                  g$old$10746$dF01I
                                                  g$old*$10752$dF01I)
                                                g$subst$10751$dF01I)))
                                           g$subst$10750$dF01I
                                           g$old*$10749$dF01I))))))
                                  g$subst$10744$dF01I
                                  g$old$10743$dF01I)))))))))
                   (g$find*$10515$dF01I
                     (case-lambda
                       ((g$sym*$10734$dF01I g$subst$10735$dF01I)
                        (g$map$5063$dF01I
                          (case-lambda
                            ((g$x$10736$dF01I)
                             ((case-lambda
                                ((g$t$10737$dF01I)
                                 (if g$t$10737$dF01I
                                   (cdr g$t$10737$dF01I)
                                   (g$syntax-violation$8094$dF01I
                                     'import
                                     '"cannot find identifier"
                                     g$x$10736$dF01I))))
                              (g$assq$5051$dF01I
                                g$x$10736$dF01I
                                g$subst$10735$dF01I))))
                          g$sym*$10734$dF01I))))
                   (g$rem*$10516$dF01I
                     (case-lambda
                       ((g$sym*$10730$dF01I g$subst$10731$dF01I)
                        ((letrec ((g$f$10732$dF01I
                                    (case-lambda
                                      ((g$subst$10733$dF01I)
                                       (if (null? g$subst$10733$dF01I)
                                         '()
                                         (if (g$memq$5055$dF01I
                                               (g$caar$5263$dF01I
                                                 g$subst$10733$dF01I)
                                               g$sym*$10730$dF01I)
                                           (g$f$10732$dF01I
                                             (cdr g$subst$10733$dF01I))
                                           (cons
                                             (car g$subst$10733$dF01I)
                                             (g$f$10732$dF01I
                                               (cdr g$subst$10733$dF01I)))))))))
                           g$f$10732$dF01I)
                         g$subst$10731$dF01I))))
                   (g$remove-dups$10517$dF01I
                     (case-lambda
                       ((g$ls$10729$dF01I)
                        (if (null? g$ls$10729$dF01I)
                          '()
                          (if (g$memq$5055$dF01I
                                (car g$ls$10729$dF01I)
                                (cdr g$ls$10729$dF01I))
                            (g$remove-dups$10517$dF01I (cdr g$ls$10729$dF01I))
                            (cons
                              (car g$ls$10729$dF01I)
                              (g$remove-dups$10517$dF01I
                                (cdr g$ls$10729$dF01I))))))))
                   (g$parse-library-name$10518$dF01I
                     (case-lambda
                       ((g$spec$10613$dF01I)
                        (letrec* ((g$subversion?$10614$dF01I
                                    (case-lambda
                                      ((g$x$10727$dF01I)
                                       ((case-lambda
                                          ((g$x$10728$dF01I)
                                           (if (integer? g$x$10728$dF01I)
                                             (if (exact? g$x$10728$dF01I)
                                               (begin
                                                 '#f
                                                 (>= g$x$10728$dF01I '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$8097$dF01I
                                          g$x$10727$dF01I)))))
                                  (g$subversion-pred$10615$dF01I
                                    (case-lambda
                                      ((g$x*$10679$dF01I)
                                       ((case-lambda
                                          ((g$t$10680$dF01I)
                                           ((case-lambda
                                              ((g$ls/false$10681$dF01I)
                                               (if (if g$ls/false$10681$dF01I
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10682$dF01I)
                                                            (g$subversion?$10614$dF01I
                                                              g$n$10682$dF01I)))
                                                         g$ls/false$10681$dF01I))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10683$dF01I)
                                                      (case-lambda
                                                        ((g$x$10684$dF01I)
                                                         (= g$x$10684$dF01I
                                                            (g$syntax->datum$8097$dF01I
                                                              g$n$10683$dF01I))))))
                                                   g$ls/false$10681$dF01I)
                                                 ((case-lambda
                                                    ((g$t$10685$dF01I)
                                                     ((case-lambda
                                                        ((g$ls/false$10686$dF01I)
                                                         (if (if g$ls/false$10686$dF01I
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10687$dF01I
                                                                        g$sub*$10688$dF01I)
                                                                      (eq? (g$syntax->datum$8097$dF01I
                                                                             g$p?$10687$dF01I)
                                                                           'and)))
                                                                   g$ls/false$10686$dF01I))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10689$dF01I
                                                                  g$sub*$10690$dF01I)
                                                                ((case-lambda
                                                                   ((g$p*$10691$dF01I)
                                                                    (case-lambda
                                                                      ((g$x$10692$dF01I)
                                                                       (g$for-all$5061$dF01I
                                                                         (case-lambda
                                                                           ((g$p$10693$dF01I)
                                                                            (g$p$10693$dF01I
                                                                              g$x$10692$dF01I)))
                                                                         g$p*$10691$dF01I)))))
                                                                 (g$map$5063$dF01I
                                                                   g$subversion-pred$10615$dF01I
                                                                   g$sub*$10690$dF01I))))
                                                             g$ls/false$10686$dF01I)
                                                           ((case-lambda
                                                              ((g$t$10694$dF01I)
                                                               ((case-lambda
                                                                  ((g$ls/false$10695$dF01I)
                                                                   (if (if g$ls/false$10695$dF01I
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10696$dF01I
                                                                                  g$sub*$10697$dF01I)
                                                                                (eq? (g$syntax->datum$8097$dF01I
                                                                                       g$p?$10696$dF01I)
                                                                                     'or)))
                                                                             g$ls/false$10695$dF01I))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10698$dF01I
                                                                            g$sub*$10699$dF01I)
                                                                          ((case-lambda
                                                                             ((g$p*$10700$dF01I)
                                                                              (case-lambda
                                                                                ((g$x$10701$dF01I)
                                                                                 (g$exists$5062$dF01I
                                                                                   (case-lambda
                                                                                     ((g$p$10702$dF01I)
                                                                                      (g$p$10702$dF01I
                                                                                        g$x$10701$dF01I)))
                                                                                   g$p*$10700$dF01I)))))
                                                                           (g$map$5063$dF01I
                                                                             g$subversion-pred$10615$dF01I
                                                                             g$sub*$10699$dF01I))))
                                                                       g$ls/false$10695$dF01I)
                                                                     ((case-lambda
                                                                        ((g$t$10703$dF01I)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10704$dF01I)
                                                                             (if (if g$ls/false$10704$dF01I
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10705$dF01I
                                                                                            g$sub$10706$dF01I)
                                                                                          (eq? (g$syntax->datum$8097$dF01I
                                                                                                 g$p?$10705$dF01I)
                                                                                               'not)))
                                                                                       g$ls/false$10704$dF01I))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10707$dF01I
                                                                                      g$sub$10708$dF01I)
                                                                                    ((case-lambda
                                                                                       ((g$p$10709$dF01I)
                                                                                        (case-lambda
                                                                                          ((g$x$10710$dF01I)
                                                                                           (not (g$p$10709$dF01I
                                                                                                  g$x$10710$dF01I))))))
                                                                                     (g$subversion-pred$10615$dF01I
                                                                                       g$sub$10708$dF01I))))
                                                                                 g$ls/false$10704$dF01I)
                                                                               ((case-lambda
                                                                                  ((g$t$10711$dF01I)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10712$dF01I)
                                                                                       (if (if g$ls/false$10712$dF01I
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10713$dF01I
                                                                                                      g$n$10714$dF01I)
                                                                                                    (if (eq? (g$syntax->datum$8097$dF01I
                                                                                                               g$p?$10713$dF01I)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10614$dF01I
                                                                                                          g$n$10714$dF01I))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10712$dF01I))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10715$dF01I
                                                                                                g$n$10716$dF01I)
                                                                                              (case-lambda
                                                                                                ((g$x$10717$dF01I)
                                                                                                 (<= g$x$10717$dF01I
                                                                                                     (g$syntax->datum$8097$dF01I
                                                                                                       g$n$10716$dF01I))))))
                                                                                           g$ls/false$10712$dF01I)
                                                                                         ((case-lambda
                                                                                            ((g$t$10718$dF01I)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10719$dF01I)
                                                                                                 (if (if g$ls/false$10719$dF01I
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10720$dF01I
                                                                                                                g$n$10721$dF01I)
                                                                                                              (if (eq? (g$syntax->datum$8097$dF01I
                                                                                                                         g$p?$10720$dF01I)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10614$dF01I
                                                                                                                    g$n$10721$dF01I))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10719$dF01I))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10722$dF01I
                                                                                                          g$n$10723$dF01I)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10724$dF01I)
                                                                                                           (>= g$x$10724$dF01I
                                                                                                               (g$syntax->datum$8097$dF01I
                                                                                                                 g$n$10723$dF01I))))))
                                                                                                     g$ls/false$10719$dF01I)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10725$dF01I)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10726$dF01I)
                                                                                                           (if g$ls/false$10726$dF01I
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$8094$dF01I
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10613$dF01I
                                                                                                                    g$x*$10679$dF01I)))
                                                                                                               g$ls/false$10726$dF01I)
                                                                                                             (g$syntax-violation$8094$dF01I
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10725$dF01I))))
                                                                                                        (g$syntax-dispatch$7982$dF01I
                                                                                                          g$t$10725$dF01I
                                                                                                          '_))))
                                                                                                    g$t$10718$dF01I))))
                                                                                              (g$syntax-dispatch$7982$dF01I
                                                                                                g$t$10718$dF01I
                                                                                                '(any any)))))
                                                                                          g$t$10711$dF01I))))
                                                                                    (g$syntax-dispatch$7982$dF01I
                                                                                      g$t$10711$dF01I
                                                                                      '(any any)))))
                                                                                g$t$10703$dF01I))))
                                                                          (g$syntax-dispatch$7982$dF01I
                                                                            g$t$10703$dF01I
                                                                            '(any any)))))
                                                                      g$t$10694$dF01I))))
                                                                (g$syntax-dispatch$7982$dF01I
                                                                  g$t$10694$dF01I
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10685$dF01I))))
                                                      (g$syntax-dispatch$7982$dF01I
                                                        g$t$10685$dF01I
                                                        '(any . each-any)))))
                                                  g$t$10680$dF01I))))
                                            (g$syntax-dispatch$7982$dF01I
                                              g$t$10680$dF01I
                                              'any))))
                                        g$x*$10679$dF01I))))
                                  (g$version-pred$10616$dF01I
                                    (case-lambda
                                      ((g$x*$10639$dF01I)
                                       ((case-lambda
                                          ((g$t$10640$dF01I)
                                           ((case-lambda
                                              ((g$ls/false$10641$dF01I)
                                               (if g$ls/false$10641$dF01I
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10642$dF01I)
                                                         '#t))))
                                                   g$ls/false$10641$dF01I)
                                                 ((case-lambda
                                                    ((g$t$10643$dF01I)
                                                     ((case-lambda
                                                        ((g$ls/false$10644$dF01I)
                                                         (if (if g$ls/false$10644$dF01I
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10645$dF01I
                                                                        g$ver*$10646$dF01I)
                                                                      (eq? (g$syntax->datum$8097$dF01I
                                                                             g$c$10645$dF01I)
                                                                           'and)))
                                                                   g$ls/false$10644$dF01I))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10647$dF01I
                                                                  g$ver*$10648$dF01I)
                                                                ((case-lambda
                                                                   ((g$p*$10649$dF01I)
                                                                    (case-lambda
                                                                      ((g$x$10650$dF01I)
                                                                       (g$for-all$5061$dF01I
                                                                         (case-lambda
                                                                           ((g$p$10651$dF01I)
                                                                            (g$p$10651$dF01I
                                                                              g$x$10650$dF01I)))
                                                                         g$p*$10649$dF01I)))))
                                                                 (g$map$5063$dF01I
                                                                   g$version-pred$10616$dF01I
                                                                   g$ver*$10648$dF01I))))
                                                             g$ls/false$10644$dF01I)
                                                           ((case-lambda
                                                              ((g$t$10652$dF01I)
                                                               ((case-lambda
                                                                  ((g$ls/false$10653$dF01I)
                                                                   (if (if g$ls/false$10653$dF01I
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10654$dF01I
                                                                                  g$ver*$10655$dF01I)
                                                                                (eq? (g$syntax->datum$8097$dF01I
                                                                                       g$c$10654$dF01I)
                                                                                     'or)))
                                                                             g$ls/false$10653$dF01I))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10656$dF01I
                                                                            g$ver*$10657$dF01I)
                                                                          ((case-lambda
                                                                             ((g$p*$10658$dF01I)
                                                                              (case-lambda
                                                                                ((g$x$10659$dF01I)
                                                                                 (g$exists$5062$dF01I
                                                                                   (case-lambda
                                                                                     ((g$p$10660$dF01I)
                                                                                      (g$p$10660$dF01I
                                                                                        g$x$10659$dF01I)))
                                                                                   g$p*$10658$dF01I)))))
                                                                           (g$map$5063$dF01I
                                                                             g$version-pred$10616$dF01I
                                                                             g$ver*$10657$dF01I))))
                                                                       g$ls/false$10653$dF01I)
                                                                     ((case-lambda
                                                                        ((g$t$10661$dF01I)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10662$dF01I)
                                                                             (if (if g$ls/false$10662$dF01I
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10663$dF01I
                                                                                            g$ver$10664$dF01I)
                                                                                          (eq? (g$syntax->datum$8097$dF01I
                                                                                                 g$c$10663$dF01I)
                                                                                               'not)))
                                                                                       g$ls/false$10662$dF01I))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10665$dF01I
                                                                                      g$ver$10666$dF01I)
                                                                                    ((case-lambda
                                                                                       ((g$p$10667$dF01I)
                                                                                        (case-lambda
                                                                                          ((g$x$10668$dF01I)
                                                                                           (not (g$p$10667$dF01I
                                                                                                  g$x$10668$dF01I))))))
                                                                                     (g$version-pred$10616$dF01I
                                                                                       g$ver$10666$dF01I))))
                                                                                 g$ls/false$10662$dF01I)
                                                                               ((case-lambda
                                                                                  ((g$t$10669$dF01I)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10670$dF01I)
                                                                                       (if g$ls/false$10670$dF01I
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10671$dF01I)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10672$dF01I)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10673$dF01I)
                                                                                                     ((letrec ((g$f$10674$dF01I
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10675$dF01I
                                                                                                                      g$x$10676$dF01I)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10675$dF01I)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10676$dF01I)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10675$dF01I)
                                                                                                                             (car g$x$10676$dF01I))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10674$dF01I
                                                                                                                              (cdr g$p*$10675$dF01I)
                                                                                                                              (cdr g$x$10676$dF01I)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10674$dF01I)
                                                                                                      g$p*$10672$dF01I
                                                                                                      g$x$10673$dF01I)))))
                                                                                               (g$map$5063$dF01I
                                                                                                 g$subversion-pred$10615$dF01I
                                                                                                 g$sub*$10671$dF01I))))
                                                                                           g$ls/false$10670$dF01I)
                                                                                         ((case-lambda
                                                                                            ((g$t$10677$dF01I)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10678$dF01I)
                                                                                                 (if g$ls/false$10678$dF01I
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$8094$dF01I
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10613$dF01I
                                                                                                          g$x*$10639$dF01I)))
                                                                                                     g$ls/false$10678$dF01I)
                                                                                                   (g$syntax-violation$8094$dF01I
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10677$dF01I))))
                                                                                              (g$syntax-dispatch$7982$dF01I
                                                                                                g$t$10677$dF01I
                                                                                                '_))))
                                                                                          g$t$10669$dF01I))))
                                                                                    (g$syntax-dispatch$7982$dF01I
                                                                                      g$t$10669$dF01I
                                                                                      'each-any))))
                                                                                g$t$10661$dF01I))))
                                                                          (g$syntax-dispatch$7982$dF01I
                                                                            g$t$10661$dF01I
                                                                            '(any any)))))
                                                                      g$t$10652$dF01I))))
                                                                (g$syntax-dispatch$7982$dF01I
                                                                  g$t$10652$dF01I
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10643$dF01I))))
                                                      (g$syntax-dispatch$7982$dF01I
                                                        g$t$10643$dF01I
                                                        '(any . each-any)))))
                                                  g$t$10640$dF01I))))
                                            (g$syntax-dispatch$7982$dF01I
                                              g$t$10640$dF01I
                                              '()))))
                                        g$x*$10639$dF01I)))))
                          ((letrec ((g$f$10617$dF01I
                                      (case-lambda
                                        ((g$x$10618$dF01I)
                                         ((case-lambda
                                            ((g$t$10619$dF01I)
                                             ((case-lambda
                                                ((g$ls/false$10620$dF01I)
                                                 (if g$ls/false$10620$dF01I
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10621$dF01I)
                                                        (values
                                                          '()
                                                          (g$version-pred$10616$dF01I
                                                            g$version-spec*$10621$dF01I))))
                                                     g$ls/false$10620$dF01I)
                                                   ((case-lambda
                                                      ((g$t$10622$dF01I)
                                                       ((case-lambda
                                                          ((g$ls/false$10623$dF01I)
                                                           (if (if g$ls/false$10623$dF01I
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10624$dF01I
                                                                          g$x*$10625$dF01I)
                                                                        (g$idsyn?$10511$dF01I
                                                                          g$x$10624$dF01I)))
                                                                     g$ls/false$10623$dF01I))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10626$dF01I
                                                                    g$x*$10627$dF01I)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10617$dF01I
                                                                         g$x*$10627$dF01I)))
                                                                    (case-lambda
                                                                      ((g$name$10630$dF01I
                                                                         g$pred$10631$dF01I)
                                                                       ((case-lambda
                                                                          ((g$pred$10632$dF01I
                                                                             g$name$10633$dF01I)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$8097$dF01I
                                                                                 g$x$10626$dF01I)
                                                                               g$name$10633$dF01I)
                                                                             g$pred$10632$dF01I)))
                                                                        g$pred$10631$dF01I
                                                                        g$name$10630$dF01I))))))
                                                               g$ls/false$10623$dF01I)
                                                             ((case-lambda
                                                                ((g$t$10634$dF01I)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10635$dF01I)
                                                                     (if g$ls/false$10635$dF01I
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10636$dF01I)
                                                                                 '#t)))))
                                                                         g$ls/false$10635$dF01I)
                                                                       ((case-lambda
                                                                          ((g$t$10637$dF01I)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10638$dF01I)
                                                                               (if g$ls/false$10638$dF01I
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$8094$dF01I
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10613$dF01I)))
                                                                                   g$ls/false$10638$dF01I)
                                                                                 (g$syntax-violation$8094$dF01I
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10637$dF01I))))
                                                                            (g$syntax-dispatch$7982$dF01I
                                                                              g$t$10637$dF01I
                                                                              '_))))
                                                                        g$t$10634$dF01I))))
                                                                  (g$syntax-dispatch$7982$dF01I
                                                                    g$t$10634$dF01I
                                                                    '()))))
                                                              g$t$10622$dF01I))))
                                                        (g$syntax-dispatch$7982$dF01I
                                                          g$t$10622$dF01I
                                                          '(any . any)))))
                                                    g$t$10619$dF01I))))
                                              (g$syntax-dispatch$7982$dF01I
                                                g$t$10619$dF01I
                                                '(each-any)))))
                                          g$x$10618$dF01I)))))
                             g$f$10617$dF01I)
                           g$spec$10613$dF01I)))))
                   (g$import-library$10519$dF01I
                     (case-lambda
                       ((g$spec*$10605$dF01I)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10518$dF01I
                               g$spec*$10605$dF01I)))
                          (case-lambda
                            ((g$name$10608$dF01I g$pred$10609$dF01I)
                             ((case-lambda
                                ((g$pred$10610$dF01I g$name$10611$dF01I)
                                 (begin
                                   (if (null? g$name$10611$dF01I)
                                     (g$syntax-violation$8094$dF01I
                                       'import
                                       '"empty library name"
                                       g$spec*$10605$dF01I)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10612$dF01I)
                                       (begin
                                         (if (not g$lib$10612$dF01I)
                                           (g$syntax-violation$8094$dF01I
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10611$dF01I)
                                           (void))
                                         (if (not (g$pred$10610$dF01I
                                                    (g$library-version$7467$dF01I
                                                      g$lib$10612$dF01I)))
                                           (g$syntax-violation$8094$dF01I
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10605$dF01I
                                             g$lib$10612$dF01I)
                                           (void))
                                         ((g$imp-collector$8036$dF01I)
                                          g$lib$10612$dF01I)
                                         (g$library-subst$7471$dF01I
                                           g$lib$10612$dF01I))))
                                    (g$find-library-by-name$7507$dF01I
                                      g$name$10611$dF01I)))))
                              g$pred$10609$dF01I
                              g$name$10608$dF01I)))))))
                   (g$get-import$10520$dF01I
                     (case-lambda
                       ((g$spec$10534$dF01I)
                        ((case-lambda
                           ((g$t$10535$dF01I)
                            ((case-lambda
                               ((g$ls/false$10536$dF01I)
                                (if (if g$ls/false$10536$dF01I
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10537$dF01I g$x*$10538$dF01I)
                                             (not (g$memq$5055$dF01I
                                                    (g$syntax->datum$8097$dF01I
                                                      g$x$10537$dF01I)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10536$dF01I))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10539$dF01I g$x*$10540$dF01I)
                                       (g$import-library$10519$dF01I
                                         (cons
                                           g$x$10539$dF01I
                                           g$x*$10540$dF01I))))
                                    g$ls/false$10536$dF01I)
                                  ((case-lambda
                                     ((g$t$10541$dF01I)
                                      ((case-lambda
                                         ((g$ls/false$10542$dF01I)
                                          (if (if g$ls/false$10542$dF01I
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10543$dF01I
                                                         g$isp$10544$dF01I
                                                         g$old*$10545$dF01I
                                                         g$new*$10546$dF01I)
                                                       (if (eq? (g$syntax->datum$8097$dF01I
                                                                  g$rename$10543$dF01I)
                                                                'rename)
                                                         (if (g$for-all$5061$dF01I
                                                               g$idsyn?$10511$dF01I
                                                               g$old*$10545$dF01I)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5061$dF01I
                                                               g$idsyn?$10511$dF01I
                                                               g$new*$10546$dF01I))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10542$dF01I))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10547$dF01I
                                                   g$isp$10548$dF01I
                                                   g$old*$10549$dF01I
                                                   g$new*$10550$dF01I)
                                                 ((case-lambda
                                                    ((g$subst$10551$dF01I
                                                       g$old*$10552$dF01I
                                                       g$new*$10553$dF01I)
                                                     ((case-lambda
                                                        ((g$old-label*$10554$dF01I)
                                                         ((case-lambda
                                                            ((g$subst$10555$dF01I)
                                                             (g$merge-substs$10513$dF01I
                                                               (g$map$5063$dF01I
                                                                 cons
                                                                 g$new*$10553$dF01I
                                                                 g$old-label*$10554$dF01I)
                                                               g$subst$10555$dF01I)))
                                                          (g$rem*$10516$dF01I
                                                            g$old*$10552$dF01I
                                                            g$subst$10551$dF01I))))
                                                      (g$find*$10515$dF01I
                                                        g$old*$10552$dF01I
                                                        g$subst$10551$dF01I))))
                                                  (g$get-import$10520$dF01I
                                                    g$isp$10548$dF01I)
                                                  (g$map$5063$dF01I
                                                    g$syntax->datum$8097$dF01I
                                                    g$old*$10549$dF01I)
                                                  (g$map$5063$dF01I
                                                    g$syntax->datum$8097$dF01I
                                                    g$new*$10550$dF01I))))
                                              g$ls/false$10542$dF01I)
                                            ((case-lambda
                                               ((g$t$10556$dF01I)
                                                ((case-lambda
                                                   ((g$ls/false$10557$dF01I)
                                                    (if (if g$ls/false$10557$dF01I
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10558$dF01I
                                                                   g$isp$10559$dF01I
                                                                   g$sym*$10560$dF01I)
                                                                 (if (eq? (g$syntax->datum$8097$dF01I
                                                                            g$except$10558$dF01I)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5061$dF01I
                                                                       g$idsyn?$10511$dF01I
                                                                       g$sym*$10560$dF01I))
                                                                   '#f)))
                                                              g$ls/false$10557$dF01I))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10561$dF01I
                                                             g$isp$10562$dF01I
                                                             g$sym*$10563$dF01I)
                                                           ((case-lambda
                                                              ((g$subst$10564$dF01I)
                                                               (g$rem*$10516$dF01I
                                                                 (g$map$5063$dF01I
                                                                   g$syntax->datum$8097$dF01I
                                                                   g$sym*$10563$dF01I)
                                                                 g$subst$10564$dF01I)))
                                                            (g$get-import$10520$dF01I
                                                              g$isp$10562$dF01I))))
                                                        g$ls/false$10557$dF01I)
                                                      ((case-lambda
                                                         ((g$t$10565$dF01I)
                                                          ((case-lambda
                                                             ((g$ls/false$10566$dF01I)
                                                              (if (if g$ls/false$10566$dF01I
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10567$dF01I
                                                                             g$isp$10568$dF01I
                                                                             g$sym*$10569$dF01I)
                                                                           (if (eq? (g$syntax->datum$8097$dF01I
                                                                                      g$only$10567$dF01I)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5061$dF01I
                                                                                 g$idsyn?$10511$dF01I
                                                                                 g$sym*$10569$dF01I))
                                                                             '#f)))
                                                                        g$ls/false$10566$dF01I))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10570$dF01I
                                                                       g$isp$10571$dF01I
                                                                       g$sym*$10572$dF01I)
                                                                     ((case-lambda
                                                                        ((g$subst$10573$dF01I
                                                                           g$sym*$10574$dF01I)
                                                                         ((case-lambda
                                                                            ((g$sym*$10575$dF01I)
                                                                             ((case-lambda
                                                                                ((g$lab*$10576$dF01I)
                                                                                 (g$map$5063$dF01I
                                                                                   cons
                                                                                   g$sym*$10575$dF01I
                                                                                   g$lab*$10576$dF01I)))
                                                                              (g$find*$10515$dF01I
                                                                                g$sym*$10575$dF01I
                                                                                g$subst$10573$dF01I))))
                                                                          (g$remove-dups$10517$dF01I
                                                                            g$sym*$10574$dF01I))))
                                                                      (g$get-import$10520$dF01I
                                                                        g$isp$10571$dF01I)
                                                                      (g$map$5063$dF01I
                                                                        g$syntax->datum$8097$dF01I
                                                                        g$sym*$10572$dF01I))))
                                                                  g$ls/false$10566$dF01I)
                                                                ((case-lambda
                                                                   ((g$t$10577$dF01I)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10578$dF01I)
                                                                        (if (if g$ls/false$10578$dF01I
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10579$dF01I
                                                                                       g$isp$10580$dF01I
                                                                                       g$p$10581$dF01I)
                                                                                     (if (eq? (g$syntax->datum$8097$dF01I
                                                                                                g$prefix$10579$dF01I)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10511$dF01I
                                                                                           g$p$10581$dF01I))
                                                                                       '#f)))
                                                                                  g$ls/false$10578$dF01I))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10582$dF01I
                                                                                 g$isp$10583$dF01I
                                                                                 g$p$10584$dF01I)
                                                                               ((case-lambda
                                                                                  ((g$subst$10585$dF01I
                                                                                     g$prefix$10586$dF01I)
                                                                                   (g$map$5063$dF01I
                                                                                     (case-lambda
                                                                                       ((g$x$10587$dF01I)
                                                                                        (cons
                                                                                          (string->symbol
                                                                                            (string-append
                                                                                              g$prefix$10586$dF01I
                                                                                              (symbol->string
                                                                                                (car g$x$10587$dF01I))))
                                                                                          (cdr g$x$10587$dF01I))))
                                                                                     g$subst$10585$dF01I)))
                                                                                (g$get-import$10520$dF01I
                                                                                  g$isp$10583$dF01I)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$8097$dF01I
                                                                                    g$p$10584$dF01I)))))
                                                                            g$ls/false$10578$dF01I)
                                                                          ((case-lambda
                                                                             ((g$t$10588$dF01I)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10589$dF01I)
                                                                                  (if (if g$ls/false$10589$dF01I
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10590$dF01I
                                                                                                 g$spec*$10591$dF01I)
                                                                                               (eq? (g$syntax->datum$8097$dF01I
                                                                                                      g$library$10590$dF01I)
                                                                                                    'library)))
                                                                                            g$ls/false$10589$dF01I))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10592$dF01I
                                                                                           g$spec*$10593$dF01I)
                                                                                         (g$import-library$10519$dF01I
                                                                                           g$spec*$10593$dF01I)))
                                                                                      g$ls/false$10589$dF01I)
                                                                                    ((case-lambda
                                                                                       ((g$t$10594$dF01I)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10595$dF01I)
                                                                                            (if (if g$ls/false$10595$dF01I
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10596$dF01I
                                                                                                           g$isp$10597$dF01I
                                                                                                           g$rest$10598$dF01I)
                                                                                                         (eq? (g$syntax->datum$8097$dF01I
                                                                                                                g$for$10596$dF01I)
                                                                                                              'for)))
                                                                                                      g$ls/false$10595$dF01I))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10599$dF01I
                                                                                                     g$isp$10600$dF01I
                                                                                                     g$rest$10601$dF01I)
                                                                                                   (g$get-import$10520$dF01I
                                                                                                     g$isp$10600$dF01I)))
                                                                                                g$ls/false$10595$dF01I)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10602$dF01I)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10603$dF01I)
                                                                                                      (if g$ls/false$10603$dF01I
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10604$dF01I)
                                                                                                             (g$syntax-violation$8094$dF01I
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10604$dF01I)))
                                                                                                          g$ls/false$10603$dF01I)
                                                                                                        (g$syntax-violation$8094$dF01I
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10602$dF01I))))
                                                                                                   (g$syntax-dispatch$7982$dF01I
                                                                                                     g$t$10602$dF01I
                                                                                                     'any))))
                                                                                               g$t$10594$dF01I))))
                                                                                         (g$syntax-dispatch$7982$dF01I
                                                                                           g$t$10594$dF01I
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10588$dF01I))))
                                                                               (g$syntax-dispatch$7982$dF01I
                                                                                 g$t$10588$dF01I
                                                                                 '(any each-any)))))
                                                                           g$t$10577$dF01I))))
                                                                     (g$syntax-dispatch$7982$dF01I
                                                                       g$t$10577$dF01I
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10565$dF01I))))
                                                           (g$syntax-dispatch$7982$dF01I
                                                             g$t$10565$dF01I
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10556$dF01I))))
                                                 (g$syntax-dispatch$7982$dF01I
                                                   g$t$10556$dF01I
                                                   '(any any . each-any)))))
                                             g$t$10541$dF01I))))
                                       (g$syntax-dispatch$7982$dF01I
                                         g$t$10541$dF01I
                                         '(any any . #(each (any any)))))))
                                   g$t$10535$dF01I))))
                             (g$syntax-dispatch$7982$dF01I
                               g$t$10535$dF01I
                               '(any . each-any)))))
                         g$spec$10534$dF01I))))
                   (g$add-imports!$10521$dF01I
                     (case-lambda
                       ((g$imp$10526$dF01I g$h$10527$dF01I)
                        ((case-lambda
                           ((g$subst$10528$dF01I)
                            (g$for-each$5064$dF01I
                              (case-lambda
                                ((g$x$10529$dF01I)
                                 ((case-lambda
                                    ((g$name$10530$dF01I g$label$10531$dF01I)
                                     ((case-lambda
                                        ((g$t$10532$dF01I)
                                         (if g$t$10532$dF01I
                                           ((case-lambda
                                              ((g$l$10533$dF01I)
                                               (if (not (eq? g$l$10533$dF01I
                                                             g$label$10531$dF01I))
                                                 (g$dup-error$10512$dF01I
                                                   g$name$10530$dF01I)
                                                 (void))))
                                            g$t$10532$dF01I)
                                           (g$hashtable-set!$5542$dF01I
                                             g$h$10527$dF01I
                                             g$name$10530$dF01I
                                             g$label$10531$dF01I))))
                                      (g$hashtable-ref$5541$dF01I
                                        g$h$10527$dF01I
                                        g$name$10530$dF01I
                                        '#f))))
                                  (car g$x$10529$dF01I)
                                  (cdr g$x$10529$dF01I))))
                              g$subst$10528$dF01I)))
                         (g$get-import$10520$dF01I g$imp$10526$dF01I))))))
           (case-lambda
             ((g$imp*$10522$dF01I)
              ((letrec ((g$f$10523$dF01I
                          (case-lambda
                            ((g$imp*$10524$dF01I g$h$10525$dF01I)
                             (if (null? g$imp*$10524$dF01I)
                               (hashtable-entries g$h$10525$dF01I)
                               (begin
                                 (g$add-imports!$10521$dF01I
                                   (car g$imp*$10524$dF01I)
                                   g$h$10525$dF01I)
                                 (g$f$10523$dF01I
                                   (cdr g$imp*$10524$dF01I)
                                   g$h$10525$dF01I)))))))
                 g$f$10523$dF01I)
               g$imp*$10522$dF01I
               (g$make-eq-hashtable$5538$dF01I)))))))))
   (g$make-top-rib$8032$dF01I
     g$make-top-rib$11535$dF01I
     (case-lambda
       ((g$names$10773$dF01I g$labels$10774$dF01I)
        ((case-lambda
           ((g$rib$10775$dF01I)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10776$dF01I g$label$10777$dF01I)
                   (begin
                     (if (not (symbol? g$name$10776$dF01I))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10776$dF01I)
                       (void))
                     (g$extend-rib/nc!$7668$dF01I
                       g$rib$10775$dF01I
                       (g$make-stx$7677$dF01I
                         g$name$10776$dF01I
                         g$top-mark*$7641$dF01I
                         '()
                         '())
                       g$label$10777$dF01I))))
                g$names$10773$dF01I
                g$labels$10774$dF01I)
              g$rib$10775$dF01I)))
         (g$make-cache-rib$7665$dF01I)))))
   (g$make-collector$8033$dF01I
     g$make-collector$11536$dF01I
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10778$dF01I)
            (case-lambda
              (() g$ls$10778$dF01I)
              ((g$x$10779$dF01I)
               (set! g$ls$10778$dF01I
                 (g$set-cons$7638$dF01I g$x$10779$dF01I g$ls$10778$dF01I))))))
         '()))))
   (g$inv-collector$8034$dF01I
     g$inv-collector$11537$dF01I
     (g$make-parameter$6976$dF01I
       (case-lambda
         (g$args$10780$dF01I
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10781$dF01I)
          (begin
            (if (not (procedure? g$x$10781$dF01I))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10781$dF01I)
              (void))
            g$x$10781$dF01I)))))
   (g$vis-collector$8035$dF01I
     g$vis-collector$11538$dF01I
     (g$make-parameter$6976$dF01I
       (case-lambda
         (g$args$10782$dF01I
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10783$dF01I)
          (begin
            (if (not (procedure? g$x$10783$dF01I))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10783$dF01I)
              (void))
            g$x$10783$dF01I)))))
   (g$imp-collector$8036$dF01I
     g$imp-collector$11539$dF01I
     (g$make-parameter$6976$dF01I
       (case-lambda
         (g$args$10784$dF01I
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10785$dF01I)
          (begin
            (if (not (procedure? g$x$10785$dF01I))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10785$dF01I)
              (void))
            g$x$10785$dF01I)))))
   (g$chi-library-internal$8037$dF01I
     g$chi-library-internal$11540$dF01I
     (case-lambda
       ((g$e*$10786$dF01I g$rib$10787$dF01I g$mix?$10788$dF01I)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8026$dF01I
               g$e*$10786$dF01I
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10787$dF01I
               g$mix?$10788$dF01I
               '#t)))
          (case-lambda
            ((g$e*$10797$dF01I
               g$r$10798$dF01I
               g$mr$10799$dF01I
               g$lex*$10800$dF01I
               g$rhs*$10801$dF01I
               g$mod**$10802$dF01I
               g$_kwd*$10803$dF01I
               g$exp*$10804$dF01I)
             ((case-lambda
                ((g$exp*$10805$dF01I
                   g$_kwd*$10806$dF01I
                   g$mod**$10807$dF01I
                   g$rhs*$10808$dF01I
                   g$lex*$10809$dF01I
                   g$mr$10810$dF01I
                   g$r$10811$dF01I
                   g$e*$10812$dF01I)
                 (values
                   (append
                     (apply append (reverse g$mod**$10807$dF01I))
                     g$e*$10812$dF01I)
                   g$r$10811$dF01I
                   g$mr$10810$dF01I
                   (reverse g$lex*$10809$dF01I)
                   (reverse g$rhs*$10808$dF01I)
                   g$exp*$10805$dF01I)))
              g$exp*$10804$dF01I
              g$_kwd*$10803$dF01I
              g$mod**$10802$dF01I
              g$rhs*$10801$dF01I
              g$lex*$10800$dF01I
              g$mr$10799$dF01I
              g$r$10798$dF01I
              g$e*$10797$dF01I)))))))
   (g$chi-interaction-expr$8038$dF01I
     g$chi-interaction-expr$11541$dF01I
     (case-lambda
       ((g$e$10813$dF01I g$rib$10814$dF01I g$r$10815$dF01I)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8026$dF01I
               (list g$e$10813$dF01I)
               g$r$10815$dF01I
               g$r$10815$dF01I
               '()
               '()
               '()
               '()
               '()
               g$rib$10814$dF01I
               '#t
               '#f)))
          (case-lambda
            ((g$e*$10824$dF01I
               g$r$10825$dF01I
               g$mr$10826$dF01I
               g$lex*$10827$dF01I
               g$rhs*$10828$dF01I
               g$mod**$10829$dF01I
               g$_kwd*$10830$dF01I
               g$_exp*$10831$dF01I)
             ((case-lambda
                ((g$_exp*$10832$dF01I
                   g$_kwd*$10833$dF01I
                   g$mod**$10834$dF01I
                   g$rhs*$10835$dF01I
                   g$lex*$10836$dF01I
                   g$mr$10837$dF01I
                   g$r$10838$dF01I
                   g$e*$10839$dF01I)
                 ((case-lambda
                    ((g$e*$10840$dF01I)
                     ((case-lambda
                        ((g$e$10841$dF01I)
                         (values g$e$10841$dF01I g$r$10838$dF01I)))
                      (if (null? g$e*$10840$dF01I)
                        (g$build-void$7634$dF01I)
                        (if (null? (cdr g$e*$10840$dF01I))
                          (car g$e*$10840$dF01I)
                          (g$build-sequence$7633$dF01I
                            '#f
                            g$e*$10840$dF01I))))))
                  (g$expand-interaction-rhs*/init*$8007$dF01I
                    (reverse g$lex*$10836$dF01I)
                    (reverse g$rhs*$10835$dF01I)
                    (append
                      (apply append (reverse g$mod**$10834$dF01I))
                      g$e*$10839$dF01I)
                    g$r$10838$dF01I
                    g$mr$10837$dF01I))))
              g$_exp*$10831$dF01I
              g$_kwd*$10830$dF01I
              g$mod**$10829$dF01I
              g$rhs*$10828$dF01I
              g$lex*$10827$dF01I
              g$mr$10826$dF01I
              g$r$10825$dF01I
              g$e*$10824$dF01I)))))))
   (g$library-body-expander$8039$dF01I
     g$library-body-expander$11542$dF01I
     (case-lambda
       ((g$name$10842$dF01I
          g$main-exp*$10843$dF01I
          g$imp*$10844$dF01I
          g$b*$10845$dF01I
          g$mix?$10846$dF01I)
        (letrec* ((g$itc$10847$dF01I (g$make-collector$8033$dF01I)))
          ((case-lambda
             ((g$imp-collector$10852$dF01I
                g$top-level-context$10853$dF01I
                g$imp-collector$10854$dF01I
                g$top-level-context$10855$dF01I)
              ((case-lambda
                 ((g$swap$10856$dF01I)
                  (dynamic-wind
                    g$swap$10856$dF01I
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$8031$dF01I
                              g$imp*$10844$dF01I)))
                         (case-lambda
                           ((g$subst-names$10859$dF01I
                              g$subst-labels$10860$dF01I)
                            ((case-lambda
                               ((g$subst-labels$10861$dF01I
                                  g$subst-names$10862$dF01I)
                                ((case-lambda
                                   ((g$rib$10863$dF01I)
                                    (letrec* ((g$wrap$10864$dF01I
                                                (case-lambda
                                                  ((g$x$10926$dF01I)
                                                   (g$make-stx$7677$dF01I
                                                     g$x$10926$dF01I
                                                     g$top-mark*$7641$dF01I
                                                     (list g$rib$10863$dF01I)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10865$dF01I
                                            g$main-exp*$10866$dF01I
                                            g$rtc$10867$dF01I
                                            g$vtc$10868$dF01I)
                                          ((case-lambda
                                             ((g$inv-collector$10873$dF01I
                                                g$vis-collector$10874$dF01I
                                                g$inv-collector$10875$dF01I
                                                g$vis-collector$10876$dF01I)
                                              ((case-lambda
                                                 ((g$swap$10877$dF01I)
                                                  (dynamic-wind
                                                    g$swap$10877$dF01I
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$8037$dF01I
                                                              g$b*$10865$dF01I
                                                              g$rib$10863$dF01I
                                                              g$mix?$10846$dF01I)))
                                                         (case-lambda
                                                           ((g$init*$10884$dF01I
                                                              g$r$10885$dF01I
                                                              g$mr$10886$dF01I
                                                              g$lex*$10887$dF01I
                                                              g$rhs*$10888$dF01I
                                                              g$internal-exp*$10889$dF01I)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10890$dF01I
                                                                  g$rhs*$10891$dF01I
                                                                  g$lex*$10892$dF01I
                                                                  g$mr$10893$dF01I
                                                                  g$r$10894$dF01I
                                                                  g$init*$10895$dF01I)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$8028$dF01I
                                                                       (append
                                                                         g$main-exp*$10866$dF01I
                                                                         g$internal-exp*$10890$dF01I))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10898$dF01I
                                                                       g$exp-id*$10899$dF01I)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10900$dF01I
                                                                           g$exp-name*$10901$dF01I)
                                                                         (begin
                                                                           (g$seal-rib!$7670$dF01I
                                                                             g$rib$10863$dF01I)
                                                                           ((case-lambda
                                                                              ((g$init*$10902$dF01I)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10903$dF01I)
                                                                                   (begin
                                                                                     (g$unseal-rib!$7671$dF01I
                                                                                       g$rib$10863$dF01I)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$10904$dF01I
                                                                                           g$export-subst$10905$dF01I)
                                                                                         (letrec* ((g$errstr$10906$dF01I
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$8083$dF01I
                                                                                                  g$lex*$10892$dF01I
                                                                                                  g$loc*$10904$dF01I
                                                                                                  g$r$10894$dF01I)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$10910$dF01I
                                                                                                  g$global*$10911$dF01I
                                                                                                  g$macro*$10912$dF01I)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$10913$dF01I
                                                                                                      g$global*$10914$dF01I
                                                                                                      g$export-env$10915$dF01I)
                                                                                                    (begin
                                                                                                      (g$for-each$5064$dF01I
                                                                                                        (case-lambda
                                                                                                          ((g$s$10916$dF01I)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$10917$dF01I
                                                                                                                 g$label$10918$dF01I)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$10919$dF01I)
                                                                                                                   (if g$p$10919$dF01I
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$10920$dF01I)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$10921$dF01I)
                                                                                                                             (if (eq? g$type$10921$dF01I
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$8094$dF01I
                                                                                                                                 'export
                                                                                                                                 g$errstr$10906$dF01I
                                                                                                                                 g$name$10917$dF01I)
                                                                                                                               (void))))
                                                                                                                          (car g$b$10920$dF01I))))
                                                                                                                      (cdr g$p$10919$dF01I))
                                                                                                                     (void))))
                                                                                                                (g$assq$5051$dF01I
                                                                                                                  g$label$10918$dF01I
                                                                                                                  g$export-env$10915$dF01I))))
                                                                                                            (car g$s$10916$dF01I)
                                                                                                            (cdr g$s$10916$dF01I))))
                                                                                                        g$export-subst$10905$dF01I)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$10922$dF01I
                                                                                                            g$invoke-definitions$10923$dF01I)
                                                                                                          (values
                                                                                                            (g$itc$10847$dF01I)
                                                                                                            (g$rtc$10867$dF01I)
                                                                                                            (g$vtc$10868$dF01I)
                                                                                                            (g$build-sequence$7633$dF01I
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$10923$dF01I
                                                                                                                (list
                                                                                                                  g$invoke-body$10922$dF01I)))
                                                                                                            g$macro*$10913$dF01I
                                                                                                            g$export-subst$10905$dF01I
                                                                                                            g$export-env$10915$dF01I)))
                                                                                                       (g$build-library-letrec*$7637$dF01I
                                                                                                         '#f
                                                                                                         g$name$10842$dF01I
                                                                                                         g$lex*$10892$dF01I
                                                                                                         g$loc*$10904$dF01I
                                                                                                         g$rhs*$10903$dF01I
                                                                                                         (if (null?
                                                                                                               g$init*$10902$dF01I)
                                                                                                           (g$build-void$7634$dF01I)
                                                                                                           (g$build-sequence$7633$dF01I
                                                                                                             '#f
                                                                                                             g$init*$10902$dF01I)))
                                                                                                       (g$map$5063$dF01I
                                                                                                         g$build-global-define$7629$dF01I
                                                                                                         (g$map$5063$dF01I
                                                                                                           cdr
                                                                                                           g$global*$10914$dF01I))))))
                                                                                                 g$macro*$10912$dF01I
                                                                                                 g$global*$10911$dF01I
                                                                                                 g$export-env$10910$dF01I)))))))
                                                                                      (g$map$5063$dF01I
                                                                                        g$gen-global$7644$dF01I
                                                                                        g$lex*$10892$dF01I)
                                                                                      (g$make-export-subst$8082$dF01I
                                                                                        g$exp-name*$10901$dF01I
                                                                                        g$exp-id*$10900$dF01I)))))
                                                                                (g$chi-rhs*$8008$dF01I
                                                                                  g$rhs*$10891$dF01I
                                                                                  g$r$10894$dF01I
                                                                                  g$mr$10893$dF01I))))
                                                                            (g$chi-expr*$7998$dF01I
                                                                              g$init*$10895$dF01I
                                                                              g$r$10894$dF01I
                                                                              g$mr$10893$dF01I)))))
                                                                      g$exp-id*$10899$dF01I
                                                                      g$exp-name*$10898$dF01I))))))
                                                             g$internal-exp*$10889$dF01I
                                                             g$rhs*$10888$dF01I
                                                             g$lex*$10887$dF01I
                                                             g$mr$10886$dF01I
                                                             g$r$10885$dF01I
                                                             g$init*$10884$dF01I))))))
                                                    g$swap$10877$dF01I)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$10924$dF01I)
                                                        (begin
                                                          (g$inv-collector$10873$dF01I
                                                            g$inv-collector$10875$dF01I)
                                                          (set! g$inv-collector$10875$dF01I
                                                            g$t$10924$dF01I))))
                                                     (g$inv-collector$10873$dF01I))
                                                    ((case-lambda
                                                       ((g$t$10925$dF01I)
                                                        (begin
                                                          (g$vis-collector$10874$dF01I
                                                            g$vis-collector$10876$dF01I)
                                                          (set! g$vis-collector$10876$dF01I
                                                            g$t$10925$dF01I))))
                                                     (g$vis-collector$10874$dF01I))))))))
                                           g$inv-collector$8034$dF01I
                                           g$vis-collector$8035$dF01I
                                           g$rtc$10867$dF01I
                                           g$vtc$10868$dF01I)))
                                       (g$map$5063$dF01I
                                         g$wrap$10864$dF01I
                                         g$b*$10845$dF01I)
                                       (g$map$5063$dF01I
                                         g$wrap$10864$dF01I
                                         g$main-exp*$10843$dF01I)
                                       (g$make-collector$8033$dF01I)
                                       (g$make-collector$8033$dF01I)))))
                                 (g$make-top-rib$8032$dF01I
                                   g$subst-names$10862$dF01I
                                   g$subst-labels$10861$dF01I))))
                             g$subst-labels$10860$dF01I
                             g$subst-names$10859$dF01I))))))
                    g$swap$10856$dF01I)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10927$dF01I)
                        (begin
                          (g$imp-collector$10852$dF01I
                            g$imp-collector$10854$dF01I)
                          (set! g$imp-collector$10854$dF01I g$t$10927$dF01I))))
                     (g$imp-collector$10852$dF01I))
                    ((case-lambda
                       ((g$t$10928$dF01I)
                        (begin
                          (g$top-level-context$10853$dF01I
                            g$top-level-context$10855$dF01I)
                          (set! g$top-level-context$10855$dF01I
                            g$t$10928$dF01I))))
                     (g$top-level-context$10853$dF01I))))))))
           g$imp-collector$8036$dF01I
           g$top-level-context$8102$dF01I
           g$itc$10847$dF01I
           '#f)))))
   (g$core-library-expander$8040$dF01I
     g$core-library-expander$11543$dF01I
     (case-lambda
       ((g$e$10929$dF01I g$verify-name$10930$dF01I)
        (call-with-values
          (case-lambda (() (g$parse-library$8030$dF01I g$e$10929$dF01I)))
          (case-lambda
            ((g$name*$10935$dF01I
               g$exp*$10936$dF01I
               g$imp*$10937$dF01I
               g$b*$10938$dF01I)
             ((case-lambda
                ((g$b*$10939$dF01I
                   g$imp*$10940$dF01I
                   g$exp*$10941$dF01I
                   g$name*$10942$dF01I)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$8029$dF01I g$name*$10942$dF01I)))
                   (case-lambda
                     ((g$name$10945$dF01I g$ver$10946$dF01I)
                      ((case-lambda
                         ((g$ver$10947$dF01I g$name$10948$dF01I)
                          (begin
                            (g$verify-name$10930$dF01I g$name$10948$dF01I)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$8039$dF01I
                                   g$name$10948$dF01I
                                   g$exp*$10941$dF01I
                                   g$imp*$10940$dF01I
                                   g$b*$10939$dF01I
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10956$dF01I
                                   g$invoke-req*$10957$dF01I
                                   g$visit-req*$10958$dF01I
                                   g$invoke-code$10959$dF01I
                                   g$visit-code$10960$dF01I
                                   g$export-subst$10961$dF01I
                                   g$export-env$10962$dF01I)
                                 ((case-lambda
                                    ((g$export-env$10963$dF01I
                                       g$export-subst$10964$dF01I
                                       g$visit-code$10965$dF01I
                                       g$invoke-code$10966$dF01I
                                       g$visit-req*$10967$dF01I
                                       g$invoke-req*$10968$dF01I
                                       g$imp*$10969$dF01I)
                                     (values
                                       g$name$10948$dF01I
                                       g$ver$10947$dF01I
                                       g$imp*$10969$dF01I
                                       g$invoke-req*$10968$dF01I
                                       g$visit-req*$10967$dF01I
                                       g$invoke-code$10966$dF01I
                                       g$visit-code$10965$dF01I
                                       g$export-subst$10964$dF01I
                                       g$export-env$10963$dF01I)))
                                  g$export-env$10962$dF01I
                                  g$export-subst$10961$dF01I
                                  g$visit-code$10960$dF01I
                                  g$invoke-code$10959$dF01I
                                  g$visit-req*$10958$dF01I
                                  g$invoke-req*$10957$dF01I
                                  g$imp*$10956$dF01I)))))))
                       g$ver$10946$dF01I
                       g$name$10945$dF01I))))))
              g$b*$10938$dF01I
              g$imp*$10937$dF01I
              g$exp*$10936$dF01I
              g$name*$10935$dF01I)))))))
   (g$parse-top-level-program$8041$dF01I
     g$parse-top-level-program$11544$dF01I
     (case-lambda
       ((g$e*$10970$dF01I)
        ((case-lambda
           ((g$t$10971$dF01I)
            ((case-lambda
               ((g$ls/false$10972$dF01I)
                (if (if g$ls/false$10972$dF01I
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10973$dF01I
                               g$imp*$10974$dF01I
                               g$b*$10975$dF01I)
                             (eq? (g$syntax->datum$8097$dF01I
                                    g$import$10973$dF01I)
                                  'import)))
                          g$ls/false$10972$dF01I))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10976$dF01I
                         g$imp*$10977$dF01I
                         g$b*$10978$dF01I)
                       (values g$imp*$10977$dF01I g$b*$10978$dF01I)))
                    g$ls/false$10972$dF01I)
                  ((case-lambda
                     ((g$t$10979$dF01I)
                      ((case-lambda
                         ((g$ls/false$10980$dF01I)
                          (if (if g$ls/false$10980$dF01I
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10981$dF01I
                                         g$x$10982$dF01I
                                         g$y$10983$dF01I)
                                       (eq? (g$syntax->datum$8097$dF01I
                                              g$import$10981$dF01I)
                                            'import)))
                                    g$ls/false$10980$dF01I))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10984$dF01I
                                   g$x$10985$dF01I
                                   g$y$10986$dF01I)
                                 (g$syntax-violation$8094$dF01I
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7701$dF01I g$e*$10970$dF01I))))
                              g$ls/false$10980$dF01I)
                            ((case-lambda
                               ((g$t$10987$dF01I)
                                ((case-lambda
                                   ((g$ls/false$10988$dF01I)
                                    (if g$ls/false$10988$dF01I
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10988$dF01I)
                                      (g$syntax-violation$8094$dF01I
                                        '#f
                                        '"invalid syntax"
                                        g$t$10987$dF01I))))
                                 (g$syntax-dispatch$7982$dF01I
                                   g$t$10987$dF01I
                                   '_))))
                             g$t$10979$dF01I))))
                       (g$syntax-dispatch$7982$dF01I
                         g$t$10979$dF01I
                         '((any . any) . any)))))
                   g$t$10971$dF01I))))
             (g$syntax-dispatch$7982$dF01I
               g$t$10971$dF01I
               '((any . each-any) . each-any)))))
         g$e*$10970$dF01I))))
   (g$top-level-expander$8042$dF01I
     g$top-level-expander$11545$dF01I
     (case-lambda
       ((g$e*$10989$dF01I)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$8041$dF01I g$e*$10989$dF01I)))
          (case-lambda
            ((g$imp*$10992$dF01I g$b*$10993$dF01I)
             ((case-lambda
                ((g$b*$10994$dF01I g$imp*$10995$dF01I)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$8039$dF01I
                        '()
                        '()
                        g$imp*$10995$dF01I
                        g$b*$10994$dF01I
                        '#t)))
                   (case-lambda
                     ((g$imp*$11003$dF01I
                        g$invoke-req*$11004$dF01I
                        g$visit-req*$11005$dF01I
                        g$invoke-code$11006$dF01I
                        g$visit-code$11007$dF01I
                        g$export-subst$11008$dF01I
                        g$export-env$11009$dF01I)
                      ((case-lambda
                         ((g$export-env$11010$dF01I
                            g$export-subst$11011$dF01I
                            g$visit-code$11012$dF01I
                            g$invoke-code$11013$dF01I
                            g$visit-req*$11014$dF01I
                            g$invoke-req*$11015$dF01I
                            g$imp*$11016$dF01I)
                          (values
                            g$invoke-req*$11015$dF01I
                            g$invoke-code$11013$dF01I)))
                       g$export-env$11009$dF01I
                       g$export-subst$11008$dF01I
                       g$visit-code$11007$dF01I
                       g$invoke-code$11006$dF01I
                       g$visit-req*$11005$dF01I
                       g$invoke-req*$11004$dF01I
                       g$imp*$11003$dF01I))))))
              g$b*$10993$dF01I
              g$imp*$10992$dF01I)))))))
   (g$9096$8043$dF01I
     g$9096$11546$dF01I
     (make-record-type-descriptor
       'env
       '#f
       'g$9099$dF01I
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9098$8044$dF01I g$9098$11547$dF01I '#f)
   (g$9097$8045$dF01I
     g$9097$11548$dF01I
     (make-record-constructor-descriptor
       g$9096$8043$dF01I
       '#f
       g$9098$8044$dF01I))
   (g$env?$8046$dF01I
     g$env?$11549$dF01I
     (record-predicate g$9096$8043$dF01I))
   (g$make-env$8047$dF01I
     g$make-env$11550$dF01I
     (record-constructor g$9097$8045$dF01I))
   (g$env-names$8048$dF01I
     g$env-names$11551$dF01I
     (record-accessor g$9096$8043$dF01I '0))
   (g$env-labels$8049$dF01I
     g$env-labels$11552$dF01I
     (record-accessor g$9096$8043$dF01I '1))
   (g$env-itc$8050$dF01I
     g$env-itc$11553$dF01I
     (record-accessor g$9096$8043$dF01I '2))
   (g$set-env-names!$8051$dF01I
     g$set-env-names!$11554$dF01I
     (record-mutator g$9096$8043$dF01I '0))
   (g$set-env-labels!$8052$dF01I
     g$set-env-labels!$11555$dF01I
     (record-mutator g$9096$8043$dF01I '1))
   (g$set-env-itc!$8053$dF01I
     g$set-env-itc!$11556$dF01I
     (record-mutator g$9096$8043$dF01I '2))
   (g$rp$8054$dF01I
     g$rp$11557$dF01I
     (make-record-printer
       'env
       (case-lambda
         ((g$x$11017$dF01I g$p$11018$dF01I g$wr$11019$dF01I)
          (display '"#<environment>" g$p$11018$dF01I)))))
   (g$9115$8055$dF01I
     g$9115$11558$dF01I
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9118$dF01I
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9117$8056$dF01I g$9117$11559$dF01I '#f)
   (g$9116$8057$dF01I
     g$9116$11560$dF01I
     (make-record-constructor-descriptor
       g$9115$8055$dF01I
       '#f
       g$9117$8056$dF01I))
   (g$interaction-env?$8058$dF01I
     g$interaction-env?$11561$dF01I
     (record-predicate g$9115$8055$dF01I))
   (g$make-interaction-env$8059$dF01I
     g$make-interaction-env$11562$dF01I
     (record-constructor g$9116$8057$dF01I))
   (g$interaction-env-rib$8060$dF01I
     g$interaction-env-rib$11563$dF01I
     (record-accessor g$9115$8055$dF01I '0))
   (g$interaction-env-r$8061$dF01I
     g$interaction-env-r$11564$dF01I
     (record-accessor g$9115$8055$dF01I '1))
   (g$interaction-env-locs$8062$dF01I
     g$interaction-env-locs$11565$dF01I
     (record-accessor g$9115$8055$dF01I '2))
   (g$set-interaction-env-rib!$8063$dF01I
     g$set-interaction-env-rib!$11566$dF01I
     (record-mutator g$9115$8055$dF01I '0))
   (g$set-interaction-env-r!$8064$dF01I
     g$set-interaction-env-r!$11567$dF01I
     (record-mutator g$9115$8055$dF01I '1))
   (g$set-interaction-env-locs!$8065$dF01I
     g$set-interaction-env-locs!$11568$dF01I
     (record-mutator g$9115$8055$dF01I '2))
   (g$rp$8066$dF01I
     g$rp$11569$dF01I
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$11020$dF01I g$p$11021$dF01I g$wr$11022$dF01I)
          (display '"#<environment>" g$p$11021$dF01I)))))
   (g$interaction-environment-symbols$8067$dF01I
     g$interaction-environment-symbols$11570$dF01I
     (case-lambda
       (()
        (g$environment-symbols$8071$dF01I
          (g$interaction-environment$8101$dF01I)))))
   (g$environment-bindings$8068$dF01I
     g$environment-bindings$11571$dF01I
     (case-lambda
       ((g$e$11023$dF01I)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$11024$dF01I g$label$11025$dF01I)
               (g$parse-binding$8069$dF01I
                 (cons
                   g$name$11024$dF01I
                   (g$imported-label->binding$7513$dF01I
                     g$label$11025$dF01I)))))
            (g$env-names$8048$dF01I g$e$11023$dF01I)
            (g$env-labels$8049$dF01I g$e$11023$dF01I))))))
   (g$parse-binding$8069$dF01I
     g$parse-binding$11572$dF01I
     (case-lambda
       ((g$b$11026$dF01I)
        (cons
          (car g$b$11026$dF01I)
          ((case-lambda
             ((g$t$11027$dF01I)
              (if (g$memv$5056$dF01I g$t$11027$dF01I '(core-prim global))
                'procedure
                (if (g$memv$5056$dF01I
                      g$t$11027$dF01I
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5056$dF01I g$t$11027$dF01I '($core-rtd))
                    'record
                    (if (eq? (car g$b$11026$dF01I)
                             (g$cadr$5264$dF01I g$b$11026$dF01I))
                      'syntax
                      'unknown))))))
           (g$cadr$5264$dF01I g$b$11026$dF01I))))))
   (g$environment?$8070$dF01I
     g$environment?$11573$dF01I
     (case-lambda
       ((g$x$11028$dF01I)
        ((case-lambda
           ((g$t$11029$dF01I)
            (if g$t$11029$dF01I
              g$t$11029$dF01I
              (begin '#f (g$interaction-env?$8058$dF01I g$x$11028$dF01I)))))
         (g$env?$8046$dF01I g$x$11028$dF01I)))))
   (g$environment-symbols$8071$dF01I
     g$environment-symbols$11574$dF01I
     (case-lambda
       ((g$x$11030$dF01I)
        (if (g$env?$8046$dF01I g$x$11030$dF01I)
          (vector->list (g$env-names$8048$dF01I g$x$11030$dF01I))
          (if (g$interaction-env?$8058$dF01I g$x$11030$dF01I)
            (g$map$5063$dF01I
              values
              (g$rib-sym*$7654$dF01I
                (g$interaction-env-rib$8060$dF01I g$x$11030$dF01I)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$11030$dF01I))))))
   (g$environment$8072$dF01I
     g$environment$11575$dF01I
     (case-lambda
       (g$imp*$11031$dF01I
        ((case-lambda
           ((g$itc$11032$dF01I)
            ((case-lambda
               ((g$imp-collector$11035$dF01I g$imp-collector$11036$dF01I)
                ((case-lambda
                   ((g$swap$11037$dF01I)
                    (dynamic-wind
                      g$swap$11037$dF01I
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$8031$dF01I
                                g$imp*$11031$dF01I)))
                           (case-lambda
                             ((g$subst-names$11040$dF01I
                                g$subst-labels$11041$dF01I)
                              ((case-lambda
                                 ((g$subst-labels$11042$dF01I
                                    g$subst-names$11043$dF01I)
                                  (g$make-env$8047$dF01I
                                    g$subst-names$11043$dF01I
                                    g$subst-labels$11042$dF01I
                                    g$itc$11032$dF01I)))
                               g$subst-labels$11041$dF01I
                               g$subst-names$11040$dF01I))))))
                      g$swap$11037$dF01I)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$11044$dF01I)
                        (begin
                          (g$imp-collector$11035$dF01I
                            g$imp-collector$11036$dF01I)
                          (set! g$imp-collector$11036$dF01I g$t$11044$dF01I))))
                     (g$imp-collector$11035$dF01I)))))))
             g$imp-collector$8036$dF01I
             g$itc$11032$dF01I)))
         (g$make-collector$8033$dF01I)))))
   (g$null-environment$8073$dF01I
     g$null-environment$11576$dF01I
     (case-lambda
       ((g$n$11045$dF01I)
        (begin
          (if (not (eqv? g$n$11045$dF01I '5))
            (assertion-violation 'null-environment '"not 5" g$n$11045$dF01I)
            (void))
          (g$environment$8072$dF01I '(psyntax null-environment-5))))))
   (g$scheme-report-environment$8074$dF01I
     g$scheme-report-environment$11577$dF01I
     (case-lambda
       ((g$n$11046$dF01I)
        (begin
          (if (not (eqv? g$n$11046$dF01I '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$11046$dF01I)
            (void))
          (g$environment$8072$dF01I '(psyntax scheme-report-environment-5))))))
   (g$expand$8075$dF01I
     g$expand$11578$dF01I
     (case-lambda
       ((g$x$11047$dF01I g$env$11048$dF01I)
        (if (g$env?$8046$dF01I g$env$11048$dF01I)
          ((case-lambda
             ((g$rib$11049$dF01I)
              ((case-lambda
                 ((g$x$11050$dF01I
                    g$itc$11051$dF01I
                    g$rtc$11052$dF01I
                    g$vtc$11053$dF01I)
                  ((case-lambda
                     ((g$x$11054$dF01I)
                      (begin
                        (g$seal-rib!$7670$dF01I g$rib$11049$dF01I)
                        (values g$x$11054$dF01I (g$rtc$11052$dF01I)))))
                   ((case-lambda
                      ((g$top-level-context$11063$dF01I
                         g$inv-collector$11064$dF01I
                         g$vis-collector$11065$dF01I
                         g$imp-collector$11066$dF01I
                         g$top-level-context$11067$dF01I
                         g$inv-collector$11068$dF01I
                         g$vis-collector$11069$dF01I
                         g$imp-collector$11070$dF01I)
                       ((case-lambda
                          ((g$swap$11071$dF01I)
                           (dynamic-wind
                             g$swap$11071$dF01I
                             (case-lambda
                               (()
                                (g$chi-expr$8000$dF01I
                                  g$x$11050$dF01I
                                  '()
                                  '())))
                             g$swap$11071$dF01I)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$11072$dF01I)
                                 (begin
                                   (g$top-level-context$11063$dF01I
                                     g$top-level-context$11067$dF01I)
                                   (set! g$top-level-context$11067$dF01I
                                     g$t$11072$dF01I))))
                              (g$top-level-context$11063$dF01I))
                             ((case-lambda
                                ((g$t$11073$dF01I)
                                 (begin
                                   (g$inv-collector$11064$dF01I
                                     g$inv-collector$11068$dF01I)
                                   (set! g$inv-collector$11068$dF01I
                                     g$t$11073$dF01I))))
                              (g$inv-collector$11064$dF01I))
                             ((case-lambda
                                ((g$t$11074$dF01I)
                                 (begin
                                   (g$vis-collector$11065$dF01I
                                     g$vis-collector$11069$dF01I)
                                   (set! g$vis-collector$11069$dF01I
                                     g$t$11074$dF01I))))
                              (g$vis-collector$11065$dF01I))
                             ((case-lambda
                                ((g$t$11075$dF01I)
                                 (begin
                                   (g$imp-collector$11066$dF01I
                                     g$imp-collector$11070$dF01I)
                                   (set! g$imp-collector$11070$dF01I
                                     g$t$11075$dF01I))))
                              (g$imp-collector$11066$dF01I))))))))
                    g$top-level-context$8102$dF01I
                    g$inv-collector$8034$dF01I
                    g$vis-collector$8035$dF01I
                    g$imp-collector$8036$dF01I
                    '#f
                    g$rtc$11052$dF01I
                    g$vtc$11053$dF01I
                    g$itc$11051$dF01I))))
               (g$make-stx$7677$dF01I
                 g$x$11047$dF01I
                 g$top-mark*$7641$dF01I
                 (list g$rib$11049$dF01I)
                 '())
               (g$env-itc$8050$dF01I g$env$11048$dF01I)
               (g$make-collector$8033$dF01I)
               (g$make-collector$8033$dF01I))))
           (g$make-top-rib$8032$dF01I
             (g$env-names$8048$dF01I g$env$11048$dF01I)
             (g$env-labels$8049$dF01I g$env$11048$dF01I)))
          (if (g$interaction-env?$8058$dF01I g$env$11048$dF01I)
            ((case-lambda
               ((g$rib$11076$dF01I g$r$11077$dF01I g$rtc$11078$dF01I)
                ((case-lambda
                   ((g$x$11079$dF01I)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$11090$dF01I
                               g$inv-collector$11091$dF01I
                               g$vis-collector$11092$dF01I
                               g$imp-collector$11093$dF01I
                               g$top-level-context$11094$dF01I
                               g$inv-collector$11095$dF01I
                               g$vis-collector$11096$dF01I
                               g$imp-collector$11097$dF01I)
                             ((case-lambda
                                ((g$swap$11098$dF01I)
                                 (dynamic-wind
                                   g$swap$11098$dF01I
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$8038$dF01I
                                        g$x$11079$dF01I
                                        g$rib$11076$dF01I
                                        g$r$11077$dF01I)))
                                   g$swap$11098$dF01I)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$11099$dF01I)
                                       (begin
                                         (g$top-level-context$11090$dF01I
                                           g$top-level-context$11094$dF01I)
                                         (set! g$top-level-context$11094$dF01I
                                           g$t$11099$dF01I))))
                                    (g$top-level-context$11090$dF01I))
                                   ((case-lambda
                                      ((g$t$11100$dF01I)
                                       (begin
                                         (g$inv-collector$11091$dF01I
                                           g$inv-collector$11095$dF01I)
                                         (set! g$inv-collector$11095$dF01I
                                           g$t$11100$dF01I))))
                                    (g$inv-collector$11091$dF01I))
                                   ((case-lambda
                                      ((g$t$11101$dF01I)
                                       (begin
                                         (g$vis-collector$11092$dF01I
                                           g$vis-collector$11096$dF01I)
                                         (set! g$vis-collector$11096$dF01I
                                           g$t$11101$dF01I))))
                                    (g$vis-collector$11092$dF01I))
                                   ((case-lambda
                                      ((g$t$11102$dF01I)
                                       (begin
                                         (g$imp-collector$11093$dF01I
                                           g$imp-collector$11097$dF01I)
                                         (set! g$imp-collector$11097$dF01I
                                           g$t$11102$dF01I))))
                                    (g$imp-collector$11093$dF01I))))))))
                          g$top-level-context$8102$dF01I
                          g$inv-collector$8034$dF01I
                          g$vis-collector$8035$dF01I
                          g$imp-collector$8036$dF01I
                          g$env$11048$dF01I
                          g$rtc$11078$dF01I
                          (g$make-collector$8033$dF01I)
                          (g$make-collector$8033$dF01I))))
                      (case-lambda
                        ((g$e$11103$dF01I g$r^$11104$dF01I)
                         ((case-lambda
                            ((g$r^$11105$dF01I g$e$11106$dF01I)
                             (begin
                               (g$set-interaction-env-r!$8064$dF01I
                                 g$env$11048$dF01I
                                 g$r^$11105$dF01I)
                               (values g$e$11106$dF01I (g$rtc$11078$dF01I)))))
                          g$r^$11104$dF01I
                          g$e$11103$dF01I))))))
                 (g$make-stx$7677$dF01I
                   g$x$11047$dF01I
                   g$top-mark*$7641$dF01I
                   (list g$rib$11076$dF01I)
                   '()))))
             (g$interaction-env-rib$8060$dF01I g$env$11048$dF01I)
             (g$interaction-env-r$8061$dF01I g$env$11048$dF01I)
             (g$make-collector$8033$dF01I))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$11048$dF01I))))))
   (g$eval$8076$dF01I
     g$eval$11579$dF01I
     (case-lambda
       ((g$x$11107$dF01I g$env$11108$dF01I)
        (begin
          (if (not (g$environment?$8070$dF01I g$env$11108$dF01I))
            (error 'eval '"not an environment" g$env$11108$dF01I)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8075$dF01I g$x$11107$dF01I g$env$11108$dF01I)))
            (case-lambda
              ((g$x$11111$dF01I g$invoke-req*$11112$dF01I)
               ((case-lambda
                  ((g$invoke-req*$11113$dF01I g$x$11114$dF01I)
                   (begin
                     (g$for-each$5064$dF01I
                       g$invoke-library$7514$dF01I
                       g$invoke-req*$11113$dF01I)
                     (eval-core
                       (g$expanded->core$7222$dF01I g$x$11114$dF01I)))))
                g$invoke-req*$11112$dF01I
                g$x$11111$dF01I))))))))
   (g$expand->core$8077$dF01I
     g$expand->core$11580$dF01I
     (case-lambda
       ((g$x$11115$dF01I g$env$11116$dF01I)
        (begin
          (if (not (g$environment?$8070$dF01I g$env$11116$dF01I))
            (error 'eval '"not an environment" g$env$11116$dF01I)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8075$dF01I g$x$11115$dF01I g$env$11116$dF01I)))
            (case-lambda
              ((g$x$11119$dF01I g$invoke-req*$11120$dF01I)
               ((case-lambda
                  ((g$invoke-req*$11121$dF01I g$x$11122$dF01I)
                   (begin
                     (g$for-each$5064$dF01I
                       g$invoke-library$7514$dF01I
                       g$invoke-req*$11121$dF01I)
                     (g$expanded->core$7222$dF01I g$x$11122$dF01I))))
                g$invoke-req*$11120$dF01I
                g$x$11119$dF01I))))))))
   (g$library-expander$8078$dF01I
     g$library-expander$11581$dF01I
     (case-lambda
       ((g$x$11123$dF01I g$filename$11124$dF01I g$verify-name$11125$dF01I)
        (letrec* ((g$build-visit-code$11126$dF01I
                    (case-lambda
                      ((g$macro*$11169$dF01I)
                       (if (null? g$macro*$11169$dF01I)
                         (g$build-void$7634$dF01I)
                         (g$build-sequence$7633$dF01I
                           '#f
                           (g$map$5063$dF01I
                             (case-lambda
                               ((g$x$11170$dF01I)
                                ((case-lambda
                                   ((g$loc$11171$dF01I g$src$11172$dF01I)
                                    (list
                                      'set!
                                      g$loc$11171$dF01I
                                      g$src$11172$dF01I)))
                                 (car g$x$11170$dF01I)
                                 (g$cddr$5266$dF01I g$x$11170$dF01I))))
                             g$macro*$11169$dF01I))))))
                  (g$visit!$11127$dF01I
                    (case-lambda
                      ((g$macro*$11165$dF01I)
                       (g$for-each$5064$dF01I
                         (case-lambda
                           ((g$x$11166$dF01I)
                            ((case-lambda
                               ((g$loc$11167$dF01I g$proc$11168$dF01I)
                                (set-symbol-value!
                                  g$loc$11167$dF01I
                                  g$proc$11168$dF01I)))
                             (car g$x$11166$dF01I)
                             (g$cadr$5264$dF01I g$x$11166$dF01I))))
                         g$macro*$11165$dF01I)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$8040$dF01I
                 g$x$11123$dF01I
                 g$verify-name$11125$dF01I)))
            (case-lambda
              ((g$name$11137$dF01I
                 g$ver$11138$dF01I
                 g$imp*$11139$dF01I
                 g$inv*$11140$dF01I
                 g$vis*$11141$dF01I
                 g$invoke-code$11142$dF01I
                 g$macro*$11143$dF01I
                 g$export-subst$11144$dF01I
                 g$export-env$11145$dF01I)
               ((case-lambda
                  ((g$export-env$11146$dF01I
                     g$export-subst$11147$dF01I
                     g$macro*$11148$dF01I
                     g$invoke-code$11149$dF01I
                     g$vis*$11150$dF01I
                     g$inv*$11151$dF01I
                     g$imp*$11152$dF01I
                     g$ver$11153$dF01I
                     g$name$11154$dF01I)
                   ((case-lambda
                      ((g$id$11155$dF01I
                         g$name$11156$dF01I
                         g$ver$11157$dF01I
                         g$imp*$11158$dF01I
                         g$vis*$11159$dF01I
                         g$inv*$11160$dF01I
                         g$visit-proc$11161$dF01I
                         g$invoke-proc$11162$dF01I
                         g$visit-code$11163$dF01I
                         g$invoke-code$11164$dF01I)
                       (begin
                         (g$install-library$7512$dF01I
                           g$id$11155$dF01I
                           g$name$11156$dF01I
                           g$ver$11157$dF01I
                           g$imp*$11158$dF01I
                           g$vis*$11159$dF01I
                           g$inv*$11160$dF01I
                           g$export-subst$11147$dF01I
                           g$export-env$11146$dF01I
                           g$visit-proc$11161$dF01I
                           g$invoke-proc$11162$dF01I
                           g$visit-code$11163$dF01I
                           g$invoke-code$11164$dF01I
                           '#t
                           g$filename$11124$dF01I)
                         (values
                           g$id$11155$dF01I
                           g$name$11156$dF01I
                           g$ver$11157$dF01I
                           g$imp*$11158$dF01I
                           g$vis*$11159$dF01I
                           g$inv*$11160$dF01I
                           g$invoke-code$11164$dF01I
                           g$visit-code$11163$dF01I
                           g$export-subst$11147$dF01I
                           g$export-env$11146$dF01I))))
                    (gensym)
                    g$name$11154$dF01I
                    g$ver$11153$dF01I
                    (g$map$5063$dF01I
                      g$library-spec$7518$dF01I
                      g$imp*$11152$dF01I)
                    (g$map$5063$dF01I
                      g$library-spec$7518$dF01I
                      g$vis*$11150$dF01I)
                    (g$map$5063$dF01I
                      g$library-spec$7518$dF01I
                      g$inv*$11151$dF01I)
                    (case-lambda
                      (() (g$visit!$11127$dF01I g$macro*$11148$dF01I)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$7222$dF01I
                           g$invoke-code$11149$dF01I))))
                    (g$build-visit-code$11126$dF01I g$macro*$11148$dF01I)
                    g$invoke-code$11149$dF01I)))
                g$export-env$11145$dF01I
                g$export-subst$11144$dF01I
                g$macro*$11143$dF01I
                g$invoke-code$11142$dF01I
                g$vis*$11141$dF01I
                g$inv*$11140$dF01I
                g$imp*$11139$dF01I
                g$ver$11138$dF01I
                g$name$11137$dF01I))))))
       ((g$x$11173$dF01I g$filename$11174$dF01I)
        (g$library-expander$8078$dF01I
          g$x$11173$dF01I
          g$filename$11174$dF01I
          (case-lambda ((g$x$11175$dF01I) (values)))))
       ((g$x$11176$dF01I)
        (g$library-expander$8078$dF01I
          g$x$11176$dF01I
          '#f
          (case-lambda ((g$x$11177$dF01I) (values)))))))
   (g$boot-library-expand$8079$dF01I
     g$boot-library-expand$11582$dF01I
     (case-lambda
       ((g$x$11178$dF01I)
        (call-with-values
          (case-lambda (() (g$library-expander$8078$dF01I g$x$11178$dF01I)))
          (case-lambda
            ((g$id$11189$dF01I
               g$name$11190$dF01I
               g$ver$11191$dF01I
               g$imp*$11192$dF01I
               g$vis*$11193$dF01I
               g$inv*$11194$dF01I
               g$invoke-code$11195$dF01I
               g$visit-code$11196$dF01I
               g$export-subst$11197$dF01I
               g$export-env$11198$dF01I)
             ((case-lambda
                ((g$export-env$11199$dF01I
                   g$export-subst$11200$dF01I
                   g$visit-code$11201$dF01I
                   g$invoke-code$11202$dF01I
                   g$inv*$11203$dF01I
                   g$vis*$11204$dF01I
                   g$imp*$11205$dF01I
                   g$ver$11206$dF01I
                   g$name$11207$dF01I
                   g$id$11208$dF01I)
                 (values
                   g$name$11207$dF01I
                   g$invoke-code$11202$dF01I
                   g$export-subst$11200$dF01I
                   g$export-env$11199$dF01I)))
              g$export-env$11198$dF01I
              g$export-subst$11197$dF01I
              g$visit-code$11196$dF01I
              g$invoke-code$11195$dF01I
              g$inv*$11194$dF01I
              g$vis*$11193$dF01I
              g$imp*$11192$dF01I
              g$ver$11191$dF01I
              g$name$11190$dF01I
              g$id$11189$dF01I)))))))
   (g$rev-map-append$8080$dF01I
     g$rev-map-append$11583$dF01I
     (case-lambda
       ((g$f$11209$dF01I g$ls$11210$dF01I g$ac$11211$dF01I)
        (if (null? g$ls$11210$dF01I)
          g$ac$11211$dF01I
          (g$rev-map-append$8080$dF01I
            g$f$11209$dF01I
            (cdr g$ls$11210$dF01I)
            (cons
              (g$f$11209$dF01I (car g$ls$11210$dF01I))
              g$ac$11211$dF01I))))))
   (g$build-exports$8081$dF01I
     g$build-exports$11584$dF01I
     (case-lambda
       ((g$lex*+loc*$11212$dF01I g$init*$11213$dF01I)
        (g$build-sequence$7633$dF01I
          '#f
          (cons
            (g$build-void$7634$dF01I)
            (g$rev-map-append$8080$dF01I
              (case-lambda
                ((g$x$11214$dF01I)
                 (list 'set! (cdr g$x$11214$dF01I) (car g$x$11214$dF01I))))
              g$lex*+loc*$11212$dF01I
              g$init*$11213$dF01I))))))
   (g$make-export-subst$8082$dF01I
     g$make-export-subst$11585$dF01I
     (case-lambda
       ((g$name*$11215$dF01I g$id*$11216$dF01I)
        (g$map$5063$dF01I
          (case-lambda
            ((g$name$11217$dF01I g$id$11218$dF01I)
             ((case-lambda
                ((g$label$11219$dF01I)
                 (begin
                   (if (not g$label$11219$dF01I)
                     (g$syntax-violation$8094$dF01I
                       '#f
                       '"cannot export unbound identifier"
                       g$id$11218$dF01I)
                     (void))
                   (cons g$name$11217$dF01I g$label$11219$dF01I))))
              (g$id->label$7717$dF01I g$id$11218$dF01I))))
          g$name*$11215$dF01I
          g$id*$11216$dF01I))))
   (g$make-export-env/macros$8083$dF01I
     g$make-export-env/macros$11586$dF01I
     (case-lambda
       ((g$lex*$11220$dF01I g$loc*$11221$dF01I g$r$11222$dF01I)
        (letrec* ((g$lookup$11223$dF01I
                    (case-lambda
                      ((g$x$11238$dF01I)
                       ((letrec ((g$f$11239$dF01I
                                   (case-lambda
                                     ((g$x$11240$dF01I
                                        g$lex*$11241$dF01I
                                        g$loc*$11242$dF01I)
                                      (if (pair? g$lex*$11241$dF01I)
                                        (if (eq? g$x$11240$dF01I
                                                 (car g$lex*$11241$dF01I))
                                          (car g$loc*$11242$dF01I)
                                          (g$f$11239$dF01I
                                            g$x$11240$dF01I
                                            (cdr g$lex*$11241$dF01I)
                                            (cdr g$loc*$11242$dF01I)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$11239$dF01I)
                        g$x$11238$dF01I
                        g$lex*$11220$dF01I
                        g$loc*$11221$dF01I)))))
          ((letrec ((g$f$11224$dF01I
                      (case-lambda
                        ((g$r$11225$dF01I
                           g$env$11226$dF01I
                           g$global*$11227$dF01I
                           g$macro*$11228$dF01I)
                         (if (null? g$r$11225$dF01I)
                           (values
                             g$env$11226$dF01I
                             g$global*$11227$dF01I
                             g$macro*$11228$dF01I)
                           ((case-lambda
                              ((g$x$11229$dF01I)
                               ((case-lambda
                                  ((g$label$11230$dF01I g$b$11231$dF01I)
                                   ((case-lambda
                                      ((g$t$11232$dF01I)
                                       (if (g$memv$5056$dF01I
                                             g$t$11232$dF01I
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$11233$dF01I)
                                             ((case-lambda
                                                ((g$loc$11234$dF01I
                                                   g$type$11235$dF01I)
                                                 (g$f$11224$dF01I
                                                   (cdr g$r$11225$dF01I)
                                                   (cons
                                                     (g$cons*$5065$dF01I
                                                       g$label$11230$dF01I
                                                       g$type$11235$dF01I
                                                       g$loc$11234$dF01I)
                                                     g$env$11226$dF01I)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7926$dF01I
                                                         g$v$11233$dF01I)
                                                       g$loc$11234$dF01I)
                                                     g$global*$11227$dF01I)
                                                   g$macro*$11228$dF01I)))
                                              (g$lookup$11223$dF01I
                                                (g$lexical-var$7926$dF01I
                                                  g$v$11233$dF01I))
                                              (if (g$lexical-mutable?$7927$dF01I
                                                    g$v$11233$dF01I)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7722$dF01I
                                            g$b$11231$dF01I))
                                         (if (g$memv$5056$dF01I
                                               g$t$11232$dF01I
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$11236$dF01I)
                                               (g$f$11224$dF01I
                                                 (cdr g$r$11225$dF01I)
                                                 (cons
                                                   (g$cons*$5065$dF01I
                                                     g$label$11230$dF01I
                                                     'global-macro
                                                     g$loc$11236$dF01I)
                                                   g$env$11226$dF01I)
                                                 g$global*$11227$dF01I
                                                 (cons
                                                   (cons
                                                     g$loc$11236$dF01I
                                                     (g$binding-value$7722$dF01I
                                                       g$b$11231$dF01I))
                                                   g$macro*$11228$dF01I))))
                                            (gensym))
                                           (if (g$memv$5056$dF01I
                                                 g$t$11232$dF01I
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$11237$dF01I)
                                                 (g$f$11224$dF01I
                                                   (cdr g$r$11225$dF01I)
                                                   (cons
                                                     (g$cons*$5065$dF01I
                                                       g$label$11230$dF01I
                                                       'global-macro!
                                                       g$loc$11237$dF01I)
                                                     g$env$11226$dF01I)
                                                   g$global*$11227$dF01I
                                                   (cons
                                                     (cons
                                                       g$loc$11237$dF01I
                                                       (g$binding-value$7722$dF01I
                                                         g$b$11231$dF01I))
                                                     g$macro*$11228$dF01I))))
                                              (gensym))
                                             (if (g$memv$5056$dF01I
                                                   g$t$11232$dF01I
                                                   '($rtd $module))
                                               (g$f$11224$dF01I
                                                 (cdr g$r$11225$dF01I)
                                                 (cons
                                                   g$x$11229$dF01I
                                                   g$env$11226$dF01I)
                                                 g$global*$11227$dF01I
                                                 g$macro*$11228$dF01I)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7721$dF01I
                                                   g$b$11231$dF01I)
                                                 (g$binding-value$7722$dF01I
                                                   g$b$11231$dF01I))))))))
                                    (g$binding-type$7721$dF01I
                                      g$b$11231$dF01I))))
                                (car g$x$11229$dF01I)
                                (cdr g$x$11229$dF01I))))
                            (car g$r$11225$dF01I)))))))
             g$f$11224$dF01I)
           g$r$11222$dF01I
           '()
           '()
           '())))))
   (g$generate-temporaries$8084$dF01I
     g$generate-temporaries$11587$dF01I
     (case-lambda
       ((g$ls$11243$dF01I)
        ((case-lambda
           ((g$t$11244$dF01I)
            ((case-lambda
               ((g$ls/false$11245$dF01I)
                (if g$ls/false$11245$dF01I
                  (apply
                    (case-lambda
                      ((g$ls$11246$dF01I)
                       (g$map$5063$dF01I
                         (case-lambda
                           ((g$x$11247$dF01I)
                            (g$make-stx$7677$dF01I
                              ((case-lambda
                                 ((g$x$11248$dF01I)
                                  (if ((case-lambda
                                         ((g$t$11249$dF01I)
                                          (if g$t$11249$dF01I
                                            g$t$11249$dF01I
                                            (begin
                                              '#f
                                              (string? g$x$11248$dF01I)))))
                                       (symbol? g$x$11248$dF01I))
                                    (gensym g$x$11248$dF01I)
                                    (gensym 't))))
                               (g$syntax->datum$8097$dF01I g$x$11247$dF01I))
                              g$top-mark*$7641$dF01I
                              '()
                              '())))
                         g$ls$11246$dF01I)))
                    g$ls/false$11245$dF01I)
                  ((case-lambda
                     ((g$t$11250$dF01I)
                      ((case-lambda
                         ((g$ls/false$11251$dF01I)
                          (if g$ls/false$11251$dF01I
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$11251$dF01I)
                            (g$syntax-violation$8094$dF01I
                              '#f
                              '"invalid syntax"
                              g$t$11250$dF01I))))
                       (g$syntax-dispatch$7982$dF01I g$t$11250$dF01I '_))))
                   g$t$11244$dF01I))))
             (g$syntax-dispatch$7982$dF01I g$t$11244$dF01I 'each-any))))
         g$ls$11243$dF01I))))
   (g$free-identifier=?$8085$dF01I
     g$free-identifier=?$11588$dF01I
     (case-lambda
       ((g$x$11252$dF01I g$y$11253$dF01I)
        (if (g$id?$7704$dF01I g$x$11252$dF01I)
          (if (g$id?$7704$dF01I g$y$11253$dF01I)
            (g$free-id=?$7708$dF01I g$x$11252$dF01I g$y$11253$dF01I)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$11253$dF01I))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$11252$dF01I)))))
   (g$bound-identifier=?$8086$dF01I
     g$bound-identifier=?$11589$dF01I
     (case-lambda
       ((g$x$11254$dF01I g$y$11255$dF01I)
        (if (g$id?$7704$dF01I g$x$11254$dF01I)
          (if (g$id?$7704$dF01I g$y$11255$dF01I)
            (g$bound-id=?$7707$dF01I g$x$11254$dF01I g$y$11255$dF01I)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$11255$dF01I))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$11254$dF01I)))))
   (g$make-source-condition$8087$dF01I
     g$make-source-condition$11590$dF01I
     (case-lambda
       ((g$x$11256$dF01I)
        (letrec* ((g$12051$11257$dF01I
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$12054$dF01I
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12053$11258$dF01I '#f)
                  (g$12052$11259$dF01I
                    (make-record-constructor-descriptor
                      g$12051$11257$dF01I
                      &condition-rcd
                      g$12053$11258$dF01I))
                  (g$12050$11260$dF01I (record-predicate g$12051$11257$dF01I))
                  (g$make-source-condition$11261$dF01I
                    (record-constructor g$12052$11259$dF01I))
                  (g$12048$11262$dF01I (record-accessor g$12051$11257$dF01I '0))
                  (g$12049$11263$dF01I (record-accessor g$12051$11257$dF01I '1))
                  (g$source-condition?$11264$dF01I
                    (condition-predicate g$12051$11257$dF01I))
                  (g$source-filename$11265$dF01I
                    (condition-accessor
                      g$12051$11257$dF01I
                      g$12048$11262$dF01I))
                  (g$source-character$11266$dF01I
                    (condition-accessor
                      g$12051$11257$dF01I
                      g$12049$11263$dF01I)))
          (if (pair? g$x$11256$dF01I)
            (g$make-source-condition$11261$dF01I
              (car g$x$11256$dF01I)
              (cdr g$x$11256$dF01I))
            (condition))))))
   (g$extract-position-condition$8088$dF01I
     g$extract-position-condition$11591$dF01I
     (case-lambda
       ((g$x$11267$dF01I)
        (g$make-source-condition$8087$dF01I
          (g$expression-position$8089$dF01I g$x$11267$dF01I)))))
   (g$expression-position$8089$dF01I
     g$expression-position$11592$dF01I
     (case-lambda
       ((g$x$11268$dF01I)
        (if (g$stx?$7676$dF01I g$x$11268$dF01I)
          (begin
            '#f
            ((case-lambda
               ((g$x$11269$dF01I)
                (if (annotation? g$x$11269$dF01I)
                  (begin '#f (annotation-source g$x$11269$dF01I))
                  '#f)))
             (g$stx-expr$7678$dF01I g$x$11268$dF01I)))
          '#f))))
   (g$assertion-error$8090$dF01I
     g$assertion-error$11593$dF01I
     (case-lambda
       ((g$expr$11270$dF01I g$pos$11271$dF01I)
        (raise
          (condition
            (g$make-assertion-violation$5837$dF01I)
            (g$make-who-condition$5851$dF01I 'assert)
            (g$make-message-condition$5805$dF01I '"assertion failed")
            (g$make-irritants-condition$5843$dF01I (list g$expr$11270$dF01I))
            (g$make-source-condition$8087$dF01I g$pos$11271$dF01I))))))
   (g$syntax-error$8091$dF01I
     g$syntax-error$11594$dF01I
     (case-lambda
       ((g$x$11272$dF01I . g$args$11273$dF01I)
        (begin
          (if (not (g$for-all$5061$dF01I string? g$args$11273$dF01I))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$11273$dF01I)
            (void))
          (raise
            (condition
              (g$make-message-condition$5805$dF01I
                (if (null? g$args$11273$dF01I)
                  '"invalid syntax"
                  (apply string-append g$args$11273$dF01I)))
              (g$make-syntax-violation$5877$dF01I
                (g$syntax->datum$8097$dF01I g$x$11272$dF01I)
                '#f)
              (g$extract-position-condition$8088$dF01I g$x$11272$dF01I)
              (g$extract-trace$8092$dF01I g$x$11272$dF01I)))))))
   (g$extract-trace$8092$dF01I
     g$extract-trace$11595$dF01I
     (case-lambda
       ((g$x$11274$dF01I)
        (letrec* ((g$12078$11275$dF01I
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$12081$dF01I
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12080$11276$dF01I '#f)
                  (g$12079$11277$dF01I
                    (make-record-constructor-descriptor
                      g$12078$11275$dF01I
                      &condition-rcd
                      g$12080$11276$dF01I))
                  (g$12077$11278$dF01I (record-predicate g$12078$11275$dF01I))
                  (g$make-trace$11279$dF01I
                    (record-constructor g$12079$11277$dF01I))
                  (g$12076$11280$dF01I (record-accessor g$12078$11275$dF01I '0))
                  (g$trace?$11281$dF01I
                    (condition-predicate g$12078$11275$dF01I))
                  (g$trace-form$11282$dF01I
                    (condition-accessor
                      g$12078$11275$dF01I
                      g$12076$11280$dF01I)))
          ((letrec ((g$f$11283$dF01I
                      (case-lambda
                        ((g$x$11284$dF01I)
                         (if (g$stx?$7676$dF01I g$x$11284$dF01I)
                           (apply
                             condition
                             (g$make-trace$11279$dF01I g$x$11284$dF01I)
                             (g$map$5063$dF01I
                               g$f$11283$dF01I
                               (g$stx-ae*$7681$dF01I g$x$11284$dF01I)))
                           (if (annotation? g$x$11284$dF01I)
                             (g$make-trace$11279$dF01I
                               (g$make-stx$7677$dF01I
                                 g$x$11284$dF01I
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$11283$dF01I)
           g$x$11274$dF01I)))))
   (g$syntax-violation*$8093$dF01I
     g$syntax-violation*$11596$dF01I
     (case-lambda
       ((g$who$11285$dF01I
          g$msg$11286$dF01I
          g$form$11287$dF01I
          g$condition-object$11288$dF01I)
        (begin
          (if (not (string? g$msg$11286$dF01I))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$11286$dF01I)
            (void))
          ((case-lambda
             ((g$who$11289$dF01I)
              (raise
                (condition
                  (if g$who$11289$dF01I
                    (g$make-who-condition$5851$dF01I g$who$11289$dF01I)
                    (condition))
                  (g$make-message-condition$5805$dF01I g$msg$11286$dF01I)
                  g$condition-object$11288$dF01I
                  (g$extract-position-condition$8088$dF01I g$form$11287$dF01I)
                  (g$extract-trace$8092$dF01I g$form$11287$dF01I)))))
           (if ((case-lambda
                  ((g$t$11290$dF01I)
                   (if g$t$11290$dF01I
                     g$t$11290$dF01I
                     (begin '#f (symbol? g$who$11285$dF01I)))))
                (string? g$who$11285$dF01I))
             g$who$11285$dF01I
             (if (not g$who$11285$dF01I)
               ((case-lambda
                  ((g$t$11291$dF01I)
                   ((case-lambda
                      ((g$ls/false$11292$dF01I)
                       (if (if g$ls/false$11292$dF01I
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$11293$dF01I)
                                    (g$id?$7704$dF01I g$id$11293$dF01I)))
                                 g$ls/false$11292$dF01I))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$11294$dF01I)
                              (g$syntax->datum$8097$dF01I g$id$11294$dF01I)))
                           g$ls/false$11292$dF01I)
                         ((case-lambda
                            ((g$t$11295$dF01I)
                             ((case-lambda
                                ((g$ls/false$11296$dF01I)
                                 (if (if g$ls/false$11296$dF01I
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$11297$dF01I
                                                g$rest$11298$dF01I)
                                              (g$id?$7704$dF01I
                                                g$id$11297$dF01I)))
                                           g$ls/false$11296$dF01I))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$11299$dF01I g$rest$11300$dF01I)
                                        (g$syntax->datum$8097$dF01I
                                          g$id$11299$dF01I)))
                                     g$ls/false$11296$dF01I)
                                   ((case-lambda
                                      ((g$t$11301$dF01I)
                                       ((case-lambda
                                          ((g$ls/false$11302$dF01I)
                                           (if g$ls/false$11302$dF01I
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$11302$dF01I)
                                             (g$syntax-violation$8094$dF01I
                                               '#f
                                               '"invalid syntax"
                                               g$t$11301$dF01I))))
                                        (g$syntax-dispatch$7982$dF01I
                                          g$t$11301$dF01I
                                          '_))))
                                    g$t$11295$dF01I))))
                              (g$syntax-dispatch$7982$dF01I
                                g$t$11295$dF01I
                                '(any . any)))))
                          g$t$11291$dF01I))))
                    (g$syntax-dispatch$7982$dF01I g$t$11291$dF01I 'any))))
                g$form$11287$dF01I)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$11285$dF01I))))))))
   (g$syntax-violation$8094$dF01I
     g$syntax-violation$11597$dF01I
     (case-lambda
       ((g$who$11303$dF01I g$msg$11304$dF01I g$form$11305$dF01I)
        (g$syntax-violation$8094$dF01I
          g$who$11303$dF01I
          g$msg$11304$dF01I
          g$form$11305$dF01I
          '#f))
       ((g$who$11306$dF01I
          g$msg$11307$dF01I
          g$form$11308$dF01I
          g$subform$11309$dF01I)
        (g$syntax-violation*$8093$dF01I
          g$who$11306$dF01I
          g$msg$11307$dF01I
          g$form$11308$dF01I
          (g$make-syntax-violation$5877$dF01I
            (g$syntax->datum$8097$dF01I g$form$11308$dF01I)
            (g$syntax->datum$8097$dF01I g$subform$11309$dF01I))))))
   (g$identifier?$8095$dF01I
     g$identifier?$11598$dF01I
     (case-lambda ((g$x$11310$dF01I) (g$id?$7704$dF01I g$x$11310$dF01I))))
   (g$datum->syntax$8096$dF01I
     g$datum->syntax$11599$dF01I
     (case-lambda
       ((g$id$11311$dF01I g$datum$11312$dF01I)
        (if (g$id?$7704$dF01I g$id$11311$dF01I)
          (g$datum->stx$7687$dF01I g$id$11311$dF01I g$datum$11312$dF01I)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$11311$dF01I)))))
   (g$syntax->datum$8097$dF01I
     g$syntax->datum$11600$dF01I
     (case-lambda
       ((g$x$11313$dF01I) (g$stx->datum$7715$dF01I g$x$11313$dF01I))))
   (g$compile-r6rs-top-level$8098$dF01I
     g$compile-r6rs-top-level$11601$dF01I
     (case-lambda
       ((g$x*$11314$dF01I)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8042$dF01I g$x*$11314$dF01I)))
          (case-lambda
            ((g$lib*$11317$dF01I g$invoke-code$11318$dF01I)
             ((case-lambda
                ((g$invoke-code$11319$dF01I g$lib*$11320$dF01I)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5064$dF01I
                        g$invoke-library$7514$dF01I
                        g$lib*$11320$dF01I)
                      (eval-core
                        (g$expanded->core$7222$dF01I
                          g$invoke-code$11319$dF01I)))))))
              g$invoke-code$11318$dF01I
              g$lib*$11317$dF01I)))))))
   (g$pre-compile-r6rs-top-level$8099$dF01I
     g$pre-compile-r6rs-top-level$11602$dF01I
     (case-lambda
       ((g$x*$11321$dF01I)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8042$dF01I g$x*$11321$dF01I)))
          (case-lambda
            ((g$lib*$11324$dF01I g$invoke-code$11325$dF01I)
             ((case-lambda
                ((g$invoke-code$11326$dF01I g$lib*$11327$dF01I)
                 (begin
                   (g$for-each$5064$dF01I
                     g$invoke-library$7514$dF01I
                     g$lib*$11327$dF01I)
                   (compile-core
                     (g$expanded->core$7222$dF01I g$invoke-code$11326$dF01I)))))
              g$invoke-code$11325$dF01I
              g$lib*$11324$dF01I)))))))
   (g$new-interaction-environment$8100$dF01I
     g$new-interaction-environment$11603$dF01I
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$11328$dF01I g$rib$11329$dF01I)
            (begin
              ((case-lambda
                 ((g$subst$11330$dF01I)
                  (begin
                    (g$set-rib-sym*!$7659$dF01I
                      g$rib$11329$dF01I
                      (g$map$5063$dF01I car g$subst$11330$dF01I))
                    (g$set-rib-mark**!$7660$dF01I
                      g$rib$11329$dF01I
                      (g$map$5063$dF01I
                        (case-lambda ((g$x$11331$dF01I) g$top-mark*$7641$dF01I))
                        g$subst$11330$dF01I))
                    (g$set-rib-label*!$7661$dF01I
                      g$rib$11329$dF01I
                      (g$map$5063$dF01I cdr g$subst$11330$dF01I)))))
               (g$library-subst$7471$dF01I g$lib$11328$dF01I))
              (g$make-interaction-env$8059$dF01I g$rib$11329$dF01I '() '()))))
         (g$find-library-by-name$7507$dF01I '(ironscheme))
         (g$make-empty-rib$7664$dF01I)))))
   (g$interaction-environment$8101$dF01I
     g$interaction-environment$11604$dF01I
     ((case-lambda
        ((g$e$11332$dF01I)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$11333$dF01I)
                (if g$t$11333$dF01I
                  g$t$11333$dF01I
                  (begin
                    '#f
                    (begin
                      (set! g$e$11332$dF01I
                        (g$new-interaction-environment$8100$dF01I))
                      g$e$11332$dF01I)))))
             g$e$11332$dF01I)))))
      '#f))
   (g$top-level-context$8102$dF01I
     g$top-level-context$11605$dF01I
     (g$make-parameter$6976$dF01I '#f)))
  (g$current-library-expander$7504$dF01I g$library-expander$8078$dF01I))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$7219$dF01I
      (case-lambda
        ((g$x$11658$dF01I)
         ((case-lambda
            ((g$t$11659$dF01I) (if g$t$11659$dF01I (cdr g$t$11659$dF01I) '#f)))
          (g$assq$5051$dF01I
            g$x$11658$dF01I
            '((ellipsis-map . g$ellipsis-map$11490$dF01I)
              (make-list . g$make-list$5046$dF01I)
              (last-pair . g$last-pair$5045$dF01I)
              (ironscheme-build . g$ironscheme-build$11651$dF01I)
              (syntax-error . g$syntax-error$11594$dF01I)
              (syntax-dispatch . g$syntax-dispatch$11485$dF01I)
              (compile-system-libraries
                .
                g$compile-system-libraries$11653$dF01I)
              (compile->closure . g$compile->closure$11655$dF01I)
              (compile . g$compile$11654$dF01I)
              (load . g$load$11650$dF01I)
              (interaction-environment . g$interaction-environment$11604$dF01I)
              (string-ci>? . g$string-ci>?$6027$dF01I)
              (string-ci>=? . g$string-ci>=?$6029$dF01I)
              (string-ci=? . g$string-ci=?$6025$dF01I)
              (string-ci<? . g$string-ci<?$6026$dF01I)
              (string-ci<=? . g$string-ci<=?$6028$dF01I)
              (char-ci>? . g$char-ci>?$6032$dF01I)
              (char-ci>=? . g$char-ci>=?$6034$dF01I)
              (char-ci=? . g$char-ci=?$6030$dF01I)
              (char-ci<? . g$char-ci<?$6031$dF01I)
              (char-ci<=? . g$char-ci<=?$6033$dF01I)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$11423$dF01I)
              (variable-transformer? . g$variable-transformer?$11422$dF01I)
              (make-variable-transformer
                .
                g$make-variable-transformer$11421$dF01I)
              (identifier? . g$identifier?$11598$dF01I)
              (generate-temporaries . g$generate-temporaries$11587$dF01I)
              (free-identifier=? . g$free-identifier=?$11588$dF01I)
              (syntax->datum . g$syntax->datum$11600$dF01I)
              (datum->syntax . g$datum->syntax$11599$dF01I)
              (bound-identifier=? . g$bound-identifier=?$11589$dF01I)
              (delete-file . g$delete-file$5557$dF01I)
              (file-exists? . g$file-exists?$5556$dF01I)
              (list-sort . g$list-sort$5952$dF01I)
              (make-eqv-hashtable . g$make-eqv-hashtable$5539$dF01I)
              (make-eq-hashtable . g$make-eq-hashtable$5538$dF01I)
              (hashtable-update! . g$hashtable-update!$5545$dF01I)
              (hashtable-size . g$hashtable-size$5540$dF01I)
              (hashtable-set! . g$hashtable-set!$5542$dF01I)
              (hashtable-ref . g$hashtable-ref$5541$dF01I)
              (hashtable-delete! . g$hashtable-delete!$5543$dF01I)
              (hashtable-contains? . g$hashtable-contains?$5544$dF01I)
              (hashtable-clear! . g$hashtable-clear!$5546$dF01I)
              (call-with-output-file . g$call-with-output-file$6388$dF01I)
              (call-with-input-file . g$call-with-input-file$6387$dF01I)
              (write-char . g$write-char$6384$dF01I)
              (with-output-to-file . g$with-output-to-file$6386$dF01I)
              (with-input-from-file . g$with-input-from-file$6385$dF01I)
              (read-char . g$read-char$6383$dF01I)
              (peek-char . g$peek-char$6382$dF01I)
              (newline . g$newline$6389$dF01I)
              (port? . g$port?$6337$dF01I)
              (open-string-output-port . g$open-string-output-port$6336$dF01I)
              (make-i/o-write-error . g$make-i/o-write-error$6252$dF01I)
              (make-i/o-read-error . g$make-i/o-read-error$6246$dF01I)
              (make-i/o-port-error . g$make-i/o-port-error$6298$dF01I)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6258$dF01I)
              (make-i/o-filename-error . g$make-i/o-filename-error$6266$dF01I)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6274$dF01I)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6280$dF01I)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6292$dF01I)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6286$dF01I)
              (make-i/o-error . g$make-i/o-error$6240$dF01I)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6312$dF01I)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6306$dF01I)
              (i/o-write-error? . g$i/o-write-error?$6253$dF01I)
              (i/o-read-error? . g$i/o-read-error?$6247$dF01I)
              (i/o-port-error? . g$i/o-port-error?$6300$dF01I)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6260$dF01I)
              (i/o-error-position . g$i/o-error-position$6261$dF01I)
              (i/o-filename-error? . g$i/o-filename-error?$6268$dF01I)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6275$dF01I)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6281$dF01I)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6293$dF01I)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6287$dF01I)
              (i/o-error? . g$i/o-error?$6241$dF01I)
              (i/o-error-port . g$i/o-error-port$6301$dF01I)
              (i/o-error-filename . g$i/o-error-filename$6269$dF01I)
              (i/o-encoding-error? . g$i/o-encoding-error?$6314$dF01I)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6315$dF01I)
              (i/o-decoding-error? . g$i/o-decoding-error?$6307$dF01I)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6338$dF01I)
              (call-with-port . g$call-with-port$6339$dF01I)
              (scheme-report-environment
                .
                g$scheme-report-environment$11577$dF01I)
              (quotient . g$quotient$5919$dF01I)
              (null-environment . g$null-environment$11576$dF01I)
              (remainder . g$remainder$5920$dF01I)
              (modulo . g$modulo$5921$dF01I)
              (inexact->exact . g$inexact->exact$5916$dF01I)
              (force . g$force$5923$dF01I)
              (exact->inexact . g$exact->inexact$5917$dF01I)
              (command-line . g$command-line$11647$dF01I)
              (remove . g$remove$5068$dF01I)
              (remv . g$remv$5069$dF01I)
              (remp . g$remp$5049$dF01I)
              (remq . g$remq$5070$dF01I)
              (partition . g$partition$5048$dF01I)
              (memv . g$memv$5056$dF01I)
              (memq . g$memq$5055$dF01I)
              (memp . g$memp$5058$dF01I)
              (member . g$member$5057$dF01I)
              (exists . g$exists$5062$dF01I)
              (for-all . g$for-all$5061$dF01I)
              (fold-right . g$fold-right$5067$dF01I)
              (fold-left . g$fold-left$5066$dF01I)
              (find . g$find$5047$dF01I)
              (filter . g$filter$5050$dF01I)
              (cons* . g$cons*$5065$dF01I)
              (assv . g$assv$5052$dF01I)
              (assq . g$assq$5051$dF01I)
              (assp . g$assp$5054$dF01I)
              (assoc . g$assoc$5053$dF01I)
              (eval . g$eval$11579$dF01I)
              (environment . g$environment$11575$dF01I)
              (make-enumeration . g$make-enumeration$6521$dF01I)
              (enum-set=? . g$enum-set=?$6528$dF01I)
              (enum-set-universe . g$enum-set-universe$6522$dF01I)
              (enum-set-union . g$enum-set-union$6529$dF01I)
              (enum-set-subset? . g$enum-set-subset?$6527$dF01I)
              (enum-set-projection . g$enum-set-projection$6533$dF01I)
              (enum-set-member? . g$enum-set-member?$6526$dF01I)
              (enum-set-intersection . g$enum-set-intersection$6530$dF01I)
              (enum-set-indexer . g$enum-set-indexer$6523$dF01I)
              (enum-set-difference . g$enum-set-difference$6531$dF01I)
              (enum-set-constructor . g$enum-set-constructor$6524$dF01I)
              (enum-set-complement . g$enum-set-complement$6532$dF01I)
              (enum-set->list . g$enum-set->list$6525$dF01I)
              (who-condition? . g$who-condition?$5853$dF01I)
              (warning? . g$warning?$5814$dF01I)
              (violation? . g$violation?$5832$dF01I)
              (undefined-violation? . g$undefined-violation?$5888$dF01I)
              (syntax-violation? . g$syntax-violation?$5880$dF01I)
              (syntax-violation-subform . g$syntax-violation-subform$5882$dF01I)
              (syntax-violation-form . g$syntax-violation-form$5881$dF01I)
              (syntax-violation . g$syntax-violation$11597$dF01I)
              (serious-condition? . g$serious-condition?$5820$dF01I)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5860$dF01I)
              (message-condition? . g$message-condition?$5807$dF01I)
              (make-who-condition . g$make-who-condition$5851$dF01I)
              (make-warning . g$make-warning$5813$dF01I)
              (make-violation . g$make-violation$5831$dF01I)
              (make-undefined-violation . g$make-undefined-violation$5887$dF01I)
              (make-syntax-violation . g$make-syntax-violation$5877$dF01I)
              (make-serious-condition . g$make-serious-condition$5819$dF01I)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5859$dF01I)
              (make-message-condition . g$make-message-condition$5805$dF01I)
              (make-lexical-violation . g$make-lexical-violation$5871$dF01I)
              (make-irritants-condition . g$make-irritants-condition$5843$dF01I)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5865$dF01I)
              (make-error . g$make-error$5825$dF01I)
              (make-assertion-violation . g$make-assertion-violation$5837$dF01I)
              (lexical-violation? . g$lexical-violation?$5872$dF01I)
              (irritants-condition? . g$irritants-condition?$5845$dF01I)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5866$dF01I)
              (error? . g$error?$5826$dF01I)
              (condition-who . g$condition-who$5854$dF01I)
              (condition-message . g$condition-message$5808$dF01I)
              (condition-irritants . g$condition-irritants$5846$dF01I)
              (assertion-violation? . g$assertion-violation?$5838$dF01I)
              (native-endianness . g$native-endianness$5670$dF01I)
              (bytevector-u64-set! . g$bytevector-u64-set!$5691$dF01I)
              (bytevector-u64-ref . g$bytevector-u64-ref$5687$dF01I)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5693$dF01I)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5689$dF01I)
              (bytevector-u32-set! . g$bytevector-u32-set!$5683$dF01I)
              (bytevector-u32-ref . g$bytevector-u32-ref$5679$dF01I)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5685$dF01I)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5681$dF01I)
              (bytevector-u16-set! . g$bytevector-u16-set!$5675$dF01I)
              (bytevector-u16-ref . g$bytevector-u16-ref$5671$dF01I)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5677$dF01I)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5673$dF01I)
              (bytevector-s64-set! . g$bytevector-s64-set!$5692$dF01I)
              (bytevector-s64-ref . g$bytevector-s64-ref$5688$dF01I)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5694$dF01I)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5690$dF01I)
              (bytevector-s32-set! . g$bytevector-s32-set!$5684$dF01I)
              (bytevector-s32-ref . g$bytevector-s32-ref$5680$dF01I)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5686$dF01I)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5682$dF01I)
              (bytevector-s16-set! . g$bytevector-s16-set!$5676$dF01I)
              (bytevector-s16-ref . g$bytevector-s16-ref$5672$dF01I)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5678$dF01I)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5674$dF01I)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5697$dF01I)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5695$dF01I)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5698$dF01I)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5696$dF01I)
              (no-nans-violation? . g$no-nans-violation?$6155$dF01I)
              (no-infinities-violation? . g$no-infinities-violation?$6149$dF01I)
              (make-no-nans-violation . g$make-no-nans-violation$6154$dF01I)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6148$dF01I)
              (fxrotate-bit-field . g$fxrotate-bit-field$6131$dF01I)
              (fxif . g$fxif$6125$dF01I)
              (fxcopy-bit-field . g$fxcopy-bit-field$6128$dF01I)
              (fxcopy-bit . g$fxcopy-bit$6126$dF01I)
              (fxbit-field . g$fxbit-field$6127$dF01I)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$6130$dF01I)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6129$dF01I)
              (fx-/carry . g$fx-/carry$6123$dF01I)
              (fx+/carry . g$fx+/carry$6124$dF01I)
              (fx*/carry . g$fx*/carry$6122$dF01I)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$6072$dF01I)
              (bitwise-if . g$bitwise-if$6066$dF01I)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6069$dF01I)
              (bitwise-copy-bit . g$bitwise-copy-bit$6067$dF01I)
              (bitwise-bit-field . g$bitwise-bit-field$6068$dF01I)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6071$dF01I)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6070$dF01I)
              (zero? . g$zero?$5293$dF01I)
              (symbol=? . g$symbol=?$5305$dF01I)
              (string>? . g$string>?$5302$dF01I)
              (string>=? . g$string>=?$5304$dF01I)
              (string=? . g$string=?$5300$dF01I)
              (string<? . g$string<?$5301$dF01I)
              (string<=? . g$string<=?$5303$dF01I)
              (rationalize . g$rationalize$5312$dF01I)
              (positive? . g$positive?$5291$dF01I)
              (odd? . g$odd?$5295$dF01I)
              (negative? . g$negative?$5292$dF01I)
              (min . g$min$5297$dF01I)
              (max . g$max$5296$dF01I)
              (map . g$map$5063$dF01I)
              (list-tail . g$list-tail$5043$dF01I)
              (list-ref . g$list-ref$5044$dF01I)
              (lcm . g$lcm$5299$dF01I)
              (gcd . g$gcd$5298$dF01I)
              (for-each . g$for-each$5064$dF01I)
              (even? . g$even?$5294$dF01I)
              (char>? . g$char>?$5309$dF01I)
              (char>=? . g$char>=?$5311$dF01I)
              (char=? . g$char=?$5307$dF01I)
              (char<? . g$char<?$5308$dF01I)
              (char<=? . g$char<=?$5310$dF01I)
              (cddddr . g$cddddr$5290$dF01I)
              (cdddar . g$cdddar$5289$dF01I)
              (cddadr . g$cddadr$5288$dF01I)
              (cddaar . g$cddaar$5287$dF01I)
              (cdaddr . g$cdaddr$5286$dF01I)
              (cdadar . g$cdadar$5285$dF01I)
              (cdaadr . g$cdaadr$5284$dF01I)
              (cdaaar . g$cdaaar$5283$dF01I)
              (cadddr . g$cadddr$5282$dF01I)
              (caddar . g$caddar$5281$dF01I)
              (cadadr . g$cadadr$5280$dF01I)
              (cadaar . g$cadaar$5279$dF01I)
              (caaddr . g$caaddr$5278$dF01I)
              (caadar . g$caadar$5277$dF01I)
              (caaadr . g$caaadr$5276$dF01I)
              (caaaar . g$caaaar$5275$dF01I)
              (cdddr . g$cdddr$5274$dF01I)
              (cddar . g$cddar$5273$dF01I)
              (cdadr . g$cdadr$5272$dF01I)
              (cdaar . g$cdaar$5271$dF01I)
              (caddr . g$caddr$5270$dF01I)
              (cadar . g$cadar$5269$dF01I)
              (caadr . g$caadr$5268$dF01I)
              (caaar . g$caaar$5267$dF01I)
              (cddr . g$cddr$5266$dF01I)
              (cdar . g$cdar$5265$dF01I)
              (cadr . g$cadr$5264$dF01I)
              (caar . g$caar$5263$dF01I)
              (boolean=? . g$boolean=?$5306$dF01I)
              (enum-set? . g$enum?$6502$dF01I)
              (make-promise . g$make-promise$5922$dF01I)
              (load/args . g$load/args$11649$dF01I)
              (printf . g$printf$6557$dF01I)
              (fprintf . g$fprintf$6558$dF01I)
              (format . g$format$6559$dF01I)
              (trace-printer . g$trace-printer$11646$dF01I)
              (make-traced-macro . g$make-traced-macro$6563$dF01I)
              (assertion-error . g$assertion-error$11593$dF01I)
              (make-parameter . g$make-parameter$6976$dF01I)
              (environment-bindings . g$environment-bindings$11571$dF01I)
              (environment-symbols . g$environment-symbols$11574$dF01I)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11570$dF01I)
              (library-path . g$library-path$7496$dF01I)
              (expand->core . g$expand->core$11580$dF01I)
              (expand . g$expand$11578$dF01I)
              (convert->cps . g$convert->cps$6876$dF01I)
              (parse->cps . g$parse->cps$6875$dF01I)))))))
    (g$install-library$7512$dF01I
      'g$12773$dF01I
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12710$dF01I)
        (cosh . g$12709$dF01I)
        (sinh . g$12708$dF01I)
        (make-guid . g$12707$dF01I)
        (unspecified? . g$12706$dF01I)
        (make-list . g$5856$dF01I)
        (last-pair . g$5855$dF01I)
        (load-r5rs . g$12705$dF01I)
        (license . g$12704$dF01I)
        (stacktrace . g$12703$dF01I)
        (ironscheme-build . g$12149$dF01I)
        (set-symbol-value! . g$12690$dF01I)
        (symbol-value . g$12689$dF01I)
        (symbol-value? . g$12688$dF01I)
        (ungensym . g$12687$dF01I)
        (gensym . g$12686$dF01I)
        (void . g$12685$dF01I)
        (compile-system-libraries . g$12151$dF01I)
        (compile->closure . g$12153$dF01I)
        (compile . g$12152$dF01I)
        (load . g$12148$dF01I)
        (interaction-environment . g$9168$dF01I)
        (string-upcase . g$12681$dF01I)
        (string-titlecase . g$12680$dF01I)
        (string-normalize-nfkd . g$12679$dF01I)
        (string-normalize-nfkc . g$12678$dF01I)
        (string-normalize-nfd . g$12677$dF01I)
        (string-normalize-nfc . g$12676$dF01I)
        (string-foldcase . g$12675$dF01I)
        (string-downcase . g$12674$dF01I)
        (string-ci>? . g$6995$dF01I)
        (string-ci>=? . g$6997$dF01I)
        (string-ci=? . g$6993$dF01I)
        (string-ci<? . g$6994$dF01I)
        (string-ci<=? . g$6996$dF01I)
        (char-whitespace? . g$12673$dF01I)
        (char-upper-case? . g$12672$dF01I)
        (char-title-case? . g$12671$dF01I)
        (char-numeric? . g$12670$dF01I)
        (char-lower-case? . g$12669$dF01I)
        (char-general-category . g$12668$dF01I)
        (char-upcase . g$12667$dF01I)
        (char-titlecase . g$12666$dF01I)
        (char-foldcase . g$12665$dF01I)
        (char-downcase . g$12664$dF01I)
        (char-ci>? . g$7034$dF01I)
        (char-ci>=? . g$7036$dF01I)
        (char-ci=? . g$7032$dF01I)
        (char-ci<? . g$7033$dF01I)
        (char-ci<=? . g$7035$dF01I)
        (char-alphabetic? . g$12663$dF01I)
        (make-variable-transformer . g$8763$dF01I)
        (identifier? . g$9162$dF01I)
        (generate-temporaries . g$9151$dF01I)
        (free-identifier=? . g$9152$dF01I)
        (syntax->datum . g$9164$dF01I)
        (datum->syntax . g$9163$dF01I)
        (bound-identifier=? . g$9153$dF01I)
        (record-type-descriptor? . g$12662$dF01I)
        (record-predicate . g$12661$dF01I)
        (record-mutator . g$12660$dF01I)
        (record-constructor . g$12659$dF01I)
        (record-accessor . g$12658$dF01I)
        (make-record-type-descriptor . g$12657$dF01I)
        (make-record-constructor-descriptor . g$12656$dF01I)
        (record? . g$12655$dF01I)
        (record-type-uid . g$12654$dF01I)
        (record-type-sealed? . g$12653$dF01I)
        (record-type-parent . g$12652$dF01I)
        (record-type-opaque? . g$12651$dF01I)
        (record-type-name . g$12650$dF01I)
        (record-type-generative? . g$12649$dF01I)
        (record-type-field-names . g$12648$dF01I)
        (record-rtd . g$12647$dF01I)
        (record-field-mutable? . g$12646$dF01I)
        (delete-file . g$6569$dF01I)
        (file-exists? . g$6568$dF01I)
        (vector-sort! . g$12645$dF01I)
        (vector-sort . g$12644$dF01I)
        (list-sort . g$6935$dF01I)
        (symbol-hash . g$12643$dF01I)
        (string-ci-hash . g$12642$dF01I)
        (string-hash . g$12641$dF01I)
        (equal-hash . g$12640$dF01I)
        (hashtable-equivalence-function . g$12639$dF01I)
        (make-hashtable . g$12638$dF01I)
        (hashtable-hash-function . g$12637$dF01I)
        (make-eqv-hashtable . g$6537$dF01I)
        (make-eq-hashtable . g$6536$dF01I)
        (hashtable? . g$12636$dF01I)
        (hashtable-update! . g$6543$dF01I)
        (hashtable-size . g$6538$dF01I)
        (hashtable-set! . g$6540$dF01I)
        (hashtable-ref . g$6539$dF01I)
        (hashtable-mutable? . g$12635$dF01I)
        (hashtable-keys . g$12634$dF01I)
        (hashtable-entries . g$12633$dF01I)
        (hashtable-delete! . g$6541$dF01I)
        (hashtable-copy . g$12632$dF01I)
        (hashtable-contains? . g$6542$dF01I)
        (hashtable-clear! . g$6544$dF01I)
        (call-with-output-file . g$7420$dF01I)
        (call-with-input-file . g$7419$dF01I)
        (write-char . g$7401$dF01I)
        (write . g$12631$dF01I)
        (with-output-to-file . g$7418$dF01I)
        (with-input-from-file . g$7417$dF01I)
        (read-char . g$7400$dF01I)
        (read . g$12630$dF01I)
        (peek-char . g$7399$dF01I)
        (open-output-file . g$12629$dF01I)
        (open-input-file . g$12628$dF01I)
        (newline . g$7421$dF01I)
        (display . g$12627$dF01I)
        (close-output-port . g$12626$dF01I)
        (close-input-port . g$12625$dF01I)
        (eof-object? . g$12624$dF01I)
        (eof-object . g$12623$dF01I)
        (current-error-port . g$12622$dF01I)
        (current-output-port . g$12621$dF01I)
        (current-input-port . g$12620$dF01I)
        (output-port? . g$12619$dF01I)
        (input-port? . g$12618$dF01I)
        (utf-8-codec . g$12617$dF01I)
        (utf-16-codec . g$12616$dF01I)
        (transcoder-error-handling-mode . g$12615$dF01I)
        (transcoder-eol-style . g$12614$dF01I)
        (transcoder-codec . g$12613$dF01I)
        (transcoded-port . g$12612$dF01I)
        (textual-port? . g$12611$dF01I)
        (string->bytevector . g$12610$dF01I)
        (standard-output-port . g$12609$dF01I)
        (standard-input-port . g$12608$dF01I)
        (standard-error-port . g$12607$dF01I)
        (set-port-position! . g$12606$dF01I)
        (put-u8 . g$12605$dF01I)
        (put-string . g$12604$dF01I)
        (put-datum . g$12603$dF01I)
        (put-char . g$12602$dF01I)
        (put-bytevector . g$12601$dF01I)
        (port? . g$7386$dF01I)
        (port-transcoder . g$12600$dF01I)
        (port-position . g$12599$dF01I)
        (port-has-set-port-position!? . g$12598$dF01I)
        (port-has-port-position? . g$12597$dF01I)
        (port-eof? . g$12596$dF01I)
        (output-port-buffer-mode . g$12595$dF01I)
        (open-string-output-port . g$7385$dF01I)
        (open-string-input-port . g$12594$dF01I)
        (open-file-output-port . g$12593$dF01I)
        (open-file-input/output-port . g$12592$dF01I)
        (open-file-input-port . g$12591$dF01I)
        (open-bytevector-output-port . g$12590$dF01I)
        (open-bytevector-input-port . g$12589$dF01I)
        (native-transcoder . g$12588$dF01I)
        (native-eol-style . g$12587$dF01I)
        (make-transcoder . g$12586$dF01I)
        (latin-1-codec . g$12585$dF01I)
        (make-i/o-write-error . g$7241$dF01I)
        (make-i/o-read-error . g$7227$dF01I)
        (make-i/o-port-error . g$7346$dF01I)
        (make-i/o-invalid-position-error . g$7256$dF01I)
        (make-i/o-filename-error . g$7273$dF01I)
        (make-i/o-file-protection-error . g$7289$dF01I)
        (make-i/o-file-is-read-only-error . g$7303$dF01I)
        (make-i/o-file-does-not-exist-error . g$7331$dF01I)
        (make-i/o-file-already-exists-error . g$7317$dF01I)
        (make-i/o-error . g$7213$dF01I)
        (make-i/o-encoding-error . g$7377$dF01I)
        (make-i/o-decoding-error . g$7362$dF01I)
        (make-custom-textual-output-port . g$12584$dF01I)
        (make-custom-textual-input/output-port . g$12583$dF01I)
        (make-custom-textual-input-port . g$12582$dF01I)
        (make-custom-binary-output-port . g$12581$dF01I)
        (make-custom-binary-input/output-port . g$12580$dF01I)
        (make-custom-binary-input-port . g$12579$dF01I)
        (make-bytevector . g$12578$dF01I)
        (lookahead-u8 . g$12577$dF01I)
        (lookahead-char . g$12576$dF01I)
        (i/o-write-error? . g$7242$dF01I)
        (i/o-read-error? . g$7228$dF01I)
        (i/o-port-error? . g$7348$dF01I)
        (i/o-invalid-position-error? . g$7258$dF01I)
        (i/o-error-position . g$7259$dF01I)
        (i/o-filename-error? . g$7275$dF01I)
        (i/o-file-protection-error? . g$7290$dF01I)
        (i/o-file-is-read-only-error? . g$7304$dF01I)
        (i/o-file-does-not-exist-error? . g$7332$dF01I)
        (i/o-file-already-exists-error? . g$7318$dF01I)
        (i/o-error? . g$7214$dF01I)
        (i/o-error-port . g$7349$dF01I)
        (i/o-error-filename . g$7276$dF01I)
        (i/o-encoding-error? . g$7379$dF01I)
        (i/o-encoding-error-char . g$7380$dF01I)
        (i/o-decoding-error? . g$7363$dF01I)
        (get-u8 . g$12575$dF01I)
        (get-string-n! . g$12574$dF01I)
        (get-string-n . g$12573$dF01I)
        (get-string-all . g$12572$dF01I)
        (get-line . g$12571$dF01I)
        (get-datum . g$12570$dF01I)
        (get-char . g$12569$dF01I)
        (get-bytevector-some . g$12568$dF01I)
        (get-bytevector-n! . g$12567$dF01I)
        (get-bytevector-n . g$12566$dF01I)
        (get-bytevector-all . g$12565$dF01I)
        (flush-output-port . g$12564$dF01I)
        (close-port . g$12563$dF01I)
        (call-with-string-output-port . g$7387$dF01I)
        (call-with-port . g$7388$dF01I)
        (call-with-bytevector-output-port . g$12562$dF01I)
        (bytevector->string . g$12561$dF01I)
        (buffer-mode? . g$12560$dF01I)
        (binary-port? . g$12559$dF01I)
        (scheme-report-environment . g$9141$dF01I)
        (quotient . g$6914$dF01I)
        (null-environment . g$9140$dF01I)
        (remainder . g$6915$dF01I)
        (modulo . g$6916$dF01I)
        (inexact->exact . g$6911$dF01I)
        (force . g$6918$dF01I)
        (exact->inexact . g$6912$dF01I)
        (exit . g$12558$dF01I)
        (command-line . g$12145$dF01I)
        (string-fill! . g$12557$dF01I)
        (string-set! . g$12556$dF01I)
        (set-cdr! . g$12555$dF01I)
        (set-car! . g$12554$dF01I)
        (remove . g$5878$dF01I)
        (remv . g$5879$dF01I)
        (remp . g$5859$dF01I)
        (remq . g$5880$dF01I)
        (partition . g$5858$dF01I)
        (memv . g$5866$dF01I)
        (memq . g$5865$dF01I)
        (memp . g$5868$dF01I)
        (member . g$5867$dF01I)
        (exists . g$5872$dF01I)
        (for-all . g$5871$dF01I)
        (fold-right . g$5877$dF01I)
        (fold-left . g$5876$dF01I)
        (find . g$5857$dF01I)
        (filter . g$5860$dF01I)
        (cons* . g$5875$dF01I)
        (assv . g$5862$dF01I)
        (assq . g$5861$dF01I)
        (assp . g$5864$dF01I)
        (assoc . g$5863$dF01I)
        (with-exception-handler . g$12553$dF01I)
        (raise-continuable . g$12552$dF01I)
        (raise . g$12551$dF01I)
        (eval . g$9143$dF01I)
        (environment . g$9139$dF01I)
        (make-enumeration . g$7485$dF01I)
        (enum-set=? . g$7492$dF01I)
        (enum-set-universe . g$7486$dF01I)
        (enum-set-union . g$7493$dF01I)
        (enum-set-subset? . g$7491$dF01I)
        (enum-set-projection . g$7497$dF01I)
        (enum-set-member? . g$7490$dF01I)
        (enum-set-intersection . g$7494$dF01I)
        (enum-set-indexer . g$7487$dF01I)
        (enum-set-difference . g$7495$dF01I)
        (enum-set-constructor . g$7488$dF01I)
        (enum-set-complement . g$7496$dF01I)
        (enum-set->list . g$7489$dF01I)
        (who-condition? . g$6823$dF01I)
        (warning? . g$6734$dF01I)
        (violation? . g$6776$dF01I)
        (undefined-violation? . g$6900$dF01I)
        (syntax-violation? . g$6884$dF01I)
        (syntax-violation-subform . g$6886$dF01I)
        (syntax-violation-form . g$6885$dF01I)
        (syntax-violation . g$9161$dF01I)
        (simple-conditions . g$12550$dF01I)
        (serious-condition? . g$6748$dF01I)
        (non-continuable-violation? . g$6838$dF01I)
        (message-condition? . g$6719$dF01I)
        (make-who-condition . g$6821$dF01I)
        (make-warning . g$6733$dF01I)
        (make-violation . g$6775$dF01I)
        (make-undefined-violation . g$6899$dF01I)
        (make-syntax-violation . g$6881$dF01I)
        (make-serious-condition . g$6747$dF01I)
        (make-non-continuable-violation . g$6837$dF01I)
        (make-message-condition . g$6717$dF01I)
        (make-lexical-violation . g$6865$dF01I)
        (make-irritants-condition . g$6804$dF01I)
        (make-implementation-restriction-violation . g$6851$dF01I)
        (make-error . g$6761$dF01I)
        (make-assertion-violation . g$6789$dF01I)
        (lexical-violation? . g$6866$dF01I)
        (irritants-condition? . g$6806$dF01I)
        (implementation-restriction-violation? . g$6852$dF01I)
        (error? . g$6762$dF01I)
        (condition-who . g$6824$dF01I)
        (condition-predicate . g$12549$dF01I)
        (condition-message . g$6720$dF01I)
        (condition-irritants . g$6807$dF01I)
        (condition-accessor . g$12548$dF01I)
        (condition . g$12547$dF01I)
        (assertion-violation? . g$6790$dF01I)
        (condition? . g$12546$dF01I)
        (utf32->string . g$12545$dF01I)
        (utf16->string . g$12544$dF01I)
        (utf8->string . g$12543$dF01I)
        (uint-list->bytevector . g$12542$dF01I)
        (u8-list->bytevector . g$12541$dF01I)
        (string->utf8 . g$12540$dF01I)
        (string->utf32 . g$12539$dF01I)
        (string->utf16 . g$12538$dF01I)
        (sint-list->bytevector . g$12537$dF01I)
        (native-endianness . g$6575$dF01I)
        (bytevector? . g$12536$dF01I)
        (bytevector=? . g$12535$dF01I)
        (bytevector-uint-set! . g$12534$dF01I)
        (bytevector-uint-ref . g$12533$dF01I)
        (bytevector-u8-set! . g$12532$dF01I)
        (bytevector-u8-ref . g$12531$dF01I)
        (bytevector-u64-set! . g$6596$dF01I)
        (bytevector-u64-ref . g$6592$dF01I)
        (bytevector-u64-native-set! . g$6598$dF01I)
        (bytevector-u64-native-ref . g$6594$dF01I)
        (bytevector-u32-set! . g$6588$dF01I)
        (bytevector-u32-ref . g$6584$dF01I)
        (bytevector-u32-native-set! . g$6590$dF01I)
        (bytevector-u32-native-ref . g$6586$dF01I)
        (bytevector-u16-set! . g$6580$dF01I)
        (bytevector-u16-ref . g$6576$dF01I)
        (bytevector-u16-native-set! . g$6582$dF01I)
        (bytevector-u16-native-ref . g$6578$dF01I)
        (bytevector-sint-set! . g$12530$dF01I)
        (bytevector-sint-ref . g$12529$dF01I)
        (bytevector-s8-set! . g$12528$dF01I)
        (bytevector-s8-ref . g$12527$dF01I)
        (bytevector-s64-set! . g$6597$dF01I)
        (bytevector-s64-ref . g$6593$dF01I)
        (bytevector-s64-native-set! . g$6599$dF01I)
        (bytevector-s64-native-ref . g$6595$dF01I)
        (bytevector-s32-set! . g$6589$dF01I)
        (bytevector-s32-ref . g$6585$dF01I)
        (bytevector-s32-native-set! . g$6591$dF01I)
        (bytevector-s32-native-ref . g$6587$dF01I)
        (bytevector-s16-set! . g$6581$dF01I)
        (bytevector-s16-ref . g$6577$dF01I)
        (bytevector-s16-native-set! . g$6583$dF01I)
        (bytevector-s16-native-ref . g$6579$dF01I)
        (bytevector-length . g$12526$dF01I)
        (bytevector-ieee-single-set! . g$12525$dF01I)
        (bytevector-ieee-single-ref . g$12524$dF01I)
        (bytevector-ieee-single-native-set! . g$6602$dF01I)
        (bytevector-ieee-single-native-ref . g$6600$dF01I)
        (bytevector-ieee-double-set! . g$12523$dF01I)
        (bytevector-ieee-double-ref . g$12522$dF01I)
        (bytevector-ieee-double-native-set! . g$6603$dF01I)
        (bytevector-ieee-double-native-ref . g$6601$dF01I)
        (bytevector-fill! . g$12521$dF01I)
        (bytevector-copy! . g$12520$dF01I)
        (bytevector-copy . g$12519$dF01I)
        (bytevector->uint-list . g$12518$dF01I)
        (bytevector->u8-list . g$12517$dF01I)
        (bytevector->sint-list . g$12516$dF01I)
        (no-nans-violation? . g$7199$dF01I)
        (no-infinities-violation? . g$7185$dF01I)
        (make-no-nans-violation . g$7198$dF01I)
        (make-no-infinities-violation . g$7184$dF01I)
        (real->flonum . g$12515$dF01I)
        (flzero? . g$12514$dF01I)
        (fltruncate . g$12513$dF01I)
        (fltan . g$12512$dF01I)
        (flsqrt . g$12511$dF01I)
        (flsin . g$12510$dF01I)
        (flround . g$12509$dF01I)
        (flpositive? . g$12508$dF01I)
        (flonum? . g$12507$dF01I)
        (flodd? . g$12506$dF01I)
        (flnumerator . g$12505$dF01I)
        (flnegative? . g$12504$dF01I)
        (flnan? . g$12503$dF01I)
        (flmod0 . g$12502$dF01I)
        (flmod . g$12501$dF01I)
        (flmin . g$12500$dF01I)
        (flmax . g$12499$dF01I)
        (fllog . g$12498$dF01I)
        (flinteger? . g$12497$dF01I)
        (flinfinite? . g$12496$dF01I)
        (flfloor . g$12495$dF01I)
        (flfinite? . g$12494$dF01I)
        (flexpt . g$12493$dF01I)
        (flexp . g$12492$dF01I)
        (fleven? . g$12491$dF01I)
        (fldiv0-and-mod0 . g$12490$dF01I)
        (fldiv0 . g$12489$dF01I)
        (fldiv-and-mod . g$12488$dF01I)
        (fldiv . g$12487$dF01I)
        (fldenominator . g$12486$dF01I)
        (flcos . g$12485$dF01I)
        (flceiling . g$12484$dF01I)
        (flatan . g$12483$dF01I)
        (flasin . g$12482$dF01I)
        (flacos . g$12481$dF01I)
        (flabs . g$12480$dF01I)
        (fl>? . g$12479$dF01I)
        (fl>=? . g$12478$dF01I)
        (fl=? . g$12477$dF01I)
        (fl<? . g$12476$dF01I)
        (fl<=? . g$12475$dF01I)
        (fl/ . g$12474$dF01I)
        (fl- . g$12473$dF01I)
        (fl+ . g$12472$dF01I)
        (fl* . g$12471$dF01I)
        (fixnum->flonum . g$12470$dF01I)
        (fxzero? . g$12469$dF01I)
        (fxxor . g$12468$dF01I)
        (fxrotate-bit-field . g$7131$dF01I)
        (fxreverse-bit-field . g$12467$dF01I)
        (fxpositive? . g$12466$dF01I)
        (fxodd? . g$12465$dF01I)
        (fxnot . g$12464$dF01I)
        (fxnegative? . g$12463$dF01I)
        (fxmod0 . g$12462$dF01I)
        (fxmod . g$12461$dF01I)
        (fxmin . g$12460$dF01I)
        (fxmax . g$12459$dF01I)
        (fxlength . g$12458$dF01I)
        (fxior . g$12457$dF01I)
        (fxif . g$7125$dF01I)
        (fxfirst-bit-set . g$12456$dF01I)
        (fxeven? . g$12455$dF01I)
        (fxdiv0-and-mod0 . g$12454$dF01I)
        (fxdiv0 . g$12453$dF01I)
        (fxdiv-and-mod . g$12452$dF01I)
        (fxdiv . g$12451$dF01I)
        (fxcopy-bit-field . g$7128$dF01I)
        (fxcopy-bit . g$7126$dF01I)
        (fxbit-set? . g$12450$dF01I)
        (fxbit-field . g$7127$dF01I)
        (fxbit-count . g$12449$dF01I)
        (fxarithmetic-shift-right . g$7130$dF01I)
        (fxarithmetic-shift-left . g$7129$dF01I)
        (fxarithmetic-shift . g$12448$dF01I)
        (fxand . g$12447$dF01I)
        (fx>? . g$12446$dF01I)
        (fx>=? . g$12445$dF01I)
        (fx=? . g$12444$dF01I)
        (fx<? . g$12443$dF01I)
        (fx<=? . g$12442$dF01I)
        (fx-/carry . g$7123$dF01I)
        (fx- . g$12441$dF01I)
        (fx+/carry . g$7124$dF01I)
        (fx+ . g$12440$dF01I)
        (fx*/carry . g$7122$dF01I)
        (fx* . g$12439$dF01I)
        (greatest-fixnum . g$12438$dF01I)
        (least-fixnum . g$12437$dF01I)
        (fixnum-width . g$12436$dF01I)
        (fixnum? . g$12435$dF01I)
        (bitwise-rotate-bit-field . g$7096$dF01I)
        (bitwise-reverse-bit-field . g$12434$dF01I)
        (bitwise-length . g$12433$dF01I)
        (bitwise-if . g$7090$dF01I)
        (bitwise-first-bit-set . g$12432$dF01I)
        (bitwise-copy-bit-field . g$7093$dF01I)
        (bitwise-copy-bit . g$7091$dF01I)
        (bitwise-bit-set? . g$12431$dF01I)
        (bitwise-bit-field . g$7092$dF01I)
        (bitwise-bit-count . g$12430$dF01I)
        (bitwise-xor . g$12429$dF01I)
        (bitwise-ior . g$12428$dF01I)
        (bitwise-and . g$12427$dF01I)
        (bitwise-not . g$12426$dF01I)
        (bitwise-arithmetic-shift-right . g$7095$dF01I)
        (bitwise-arithmetic-shift-left . g$7094$dF01I)
        (bitwise-arithmetic-shift . g$12425$dF01I)
        (zero? . g$6021$dF01I)
        (vector? . g$12424$dF01I)
        (vector-set! . g$12423$dF01I)
        (vector-ref . g$12422$dF01I)
        (vector-map . g$12421$dF01I)
        (vector-length . g$12420$dF01I)
        (vector-for-each . g$12419$dF01I)
        (vector-fill! . g$12418$dF01I)
        (vector->list . g$12417$dF01I)
        (vector . g$12416$dF01I)
        (values . g$12415$dF01I)
        (truncate . g$12414$dF01I)
        (tan . g$12413$dF01I)
        (symbol? . g$12412$dF01I)
        (symbol=? . g$6067$dF01I)
        (symbol->string . g$12411$dF01I)
        (substring . g$12410$dF01I)
        (string? . g$12409$dF01I)
        (string>? . g$6064$dF01I)
        (string>=? . g$6066$dF01I)
        (string=? . g$6062$dF01I)
        (string<? . g$6063$dF01I)
        (string<=? . g$6065$dF01I)
        (string-ref . g$12408$dF01I)
        (string-length . g$12407$dF01I)
        (string-for-each . g$12406$dF01I)
        (string-copy . g$12405$dF01I)
        (string-append . g$12404$dF01I)
        (string->symbol . g$12403$dF01I)
        (string->number . g$12402$dF01I)
        (string->list . g$12401$dF01I)
        (string . g$12400$dF01I)
        (sqrt . g$12399$dF01I)
        (sin . g$12398$dF01I)
        (round . g$12397$dF01I)
        (reverse . g$12396$dF01I)
        (real? . g$12395$dF01I)
        (real-valued? . g$12394$dF01I)
        (real-part . g$12393$dF01I)
        (rationalize . g$6108$dF01I)
        (rational? . g$12392$dF01I)
        (rational-valued? . g$12391$dF01I)
        (procedure? . g$12390$dF01I)
        (positive? . g$6019$dF01I)
        (pair? . g$12389$dF01I)
        (odd? . g$6023$dF01I)
        (numerator . g$12388$dF01I)
        (number? . g$12387$dF01I)
        (number->string . g$12386$dF01I)
        (null? . g$12385$dF01I)
        (not . g$12384$dF01I)
        (negative? . g$6020$dF01I)
        (nan? . g$12383$dF01I)
        (min . g$6025$dF01I)
        (max . g$6024$dF01I)
        (map . g$5873$dF01I)
        (make-vector . g$12382$dF01I)
        (make-string . g$12381$dF01I)
        (make-rectangular . g$12380$dF01I)
        (make-polar . g$12379$dF01I)
        (magnitude . g$12378$dF01I)
        (log . g$12377$dF01I)
        (list? . g$12376$dF01I)
        (list-tail . g$5853$dF01I)
        (list-ref . g$5854$dF01I)
        (list->vector . g$12375$dF01I)
        (list->string . g$12374$dF01I)
        (list . g$12373$dF01I)
        (length . g$12372$dF01I)
        (lcm . g$6027$dF01I)
        (integer? . g$12371$dF01I)
        (integer-valued? . g$12370$dF01I)
        (integer->char . g$12369$dF01I)
        (infinite? . g$12368$dF01I)
        (inexact? . g$12367$dF01I)
        (inexact . g$12366$dF01I)
        (imag-part . g$12365$dF01I)
        (gcd . g$6026$dF01I)
        (for-each . g$5874$dF01I)
        (floor . g$12364$dF01I)
        (finite? . g$12363$dF01I)
        (expt . g$12362$dF01I)
        (exp . g$12361$dF01I)
        (exact? . g$12360$dF01I)
        (exact-integer-sqrt . g$12359$dF01I)
        (exact . g$12358$dF01I)
        (even? . g$6022$dF01I)
        (error . g$12357$dF01I)
        (eqv? . g$12356$dF01I)
        (equal? . g$12355$dF01I)
        (eq? . g$12354$dF01I)
        (dynamic-wind . g$12353$dF01I)
        (div0-and-mod0 . g$12352$dF01I)
        (mod0 . g$12351$dF01I)
        (div0 . g$12350$dF01I)
        (div-and-mod . g$12349$dF01I)
        (mod . g$12348$dF01I)
        (div . g$12347$dF01I)
        (denominator . g$12346$dF01I)
        (cos . g$12345$dF01I)
        (cons . g$12344$dF01I)
        (complex? . g$12343$dF01I)
        (char? . g$12342$dF01I)
        (char>? . g$6105$dF01I)
        (char>=? . g$6107$dF01I)
        (char=? . g$6103$dF01I)
        (char<? . g$6104$dF01I)
        (char<=? . g$6106$dF01I)
        (char->integer . g$12341$dF01I)
        (ceiling . g$12340$dF01I)
        (call-with-values . g$12339$dF01I)
        (call/cc . g$12338$dF01I)
        (call-with-current-continuation . g$12337$dF01I)
        (cddddr . g$6018$dF01I)
        (cdddar . g$6017$dF01I)
        (cddadr . g$6016$dF01I)
        (cddaar . g$6015$dF01I)
        (cdaddr . g$6014$dF01I)
        (cdadar . g$6013$dF01I)
        (cdaadr . g$6012$dF01I)
        (cdaaar . g$6011$dF01I)
        (cadddr . g$6010$dF01I)
        (caddar . g$6009$dF01I)
        (cadadr . g$6008$dF01I)
        (cadaar . g$6007$dF01I)
        (caaddr . g$6006$dF01I)
        (caadar . g$6005$dF01I)
        (caaadr . g$6004$dF01I)
        (caaaar . g$6003$dF01I)
        (cdddr . g$6002$dF01I)
        (cddar . g$6001$dF01I)
        (cdadr . g$6000$dF01I)
        (cdaar . g$5999$dF01I)
        (caddr . g$5998$dF01I)
        (cadar . g$5997$dF01I)
        (caadr . g$5996$dF01I)
        (caaar . g$5995$dF01I)
        (cddr . g$5994$dF01I)
        (cdar . g$5993$dF01I)
        (cadr . g$5992$dF01I)
        (caar . g$5991$dF01I)
        (cdr . g$12336$dF01I)
        (car . g$12335$dF01I)
        (boolean? . g$12334$dF01I)
        (boolean=? . g$6068$dF01I)
        (atan . g$12333$dF01I)
        (assertion-violation . g$12332$dF01I)
        (asin . g$12331$dF01I)
        (apply . g$12330$dF01I)
        (append . g$12329$dF01I)
        (angle . g$12328$dF01I)
        (acos . g$12327$dF01I)
        (abs . g$12326$dF01I)
        (/ . g$12325$dF01I)
        (* . g$12324$dF01I)
        (- . g$12323$dF01I)
        (+ . g$12322$dF01I)
        (>= . g$12321$dF01I)
        (> . g$12320$dF01I)
        (= . g$12319$dF01I)
        (<= . g$12318$dF01I)
        (< . g$12317$dF01I)
        (deserialize-port . g$12313$dF01I)
        (serialize-port . g$12312$dF01I)
        (enum-set? . g$7460$dF01I)
        (load/args . g$12147$dF01I)
        (printf . g$7571$dF01I)
        (fprintf . g$7572$dF01I)
        (format . g$7573$dF01I)
        (procedure-form . g$12311$dF01I)
        (procedure-environment . g$12310$dF01I)
        (procedure-name . g$12309$dF01I)
        (procedure-arity . g$12308$dF01I)
        (gc-collect . g$12307$dF01I)
        (clr-type? . g$12306$dF01I)
        (get-clr-type . g$12305$dF01I)
        (vector-append . g$12303$dF01I)
        (vector-filter . g$12302$dF01I)
        (vector-reverse! . g$12301$dF01I)
        (vector-contains? . g$12300$dF01I)
        (vector-index-of . g$12299$dF01I)
        (vector-copy . g$12298$dF01I)
        (vector-binary-search . g$12297$dF01I)
        (string-ci-compare . g$12296$dF01I)
        (string-compare . g$12295$dF01I)
        (string-format . g$12294$dF01I)
        (trace-printer . g$12144$dF01I)
        (time-it . g$12292$dF01I)
        (make-parameter . g$7862$dF01I)
        (open-tcp-input/output-port . g$12289$dF01I)
        (hashtable-for-each . g$12288$dF01I)
        (hashtable-map . g$12287$dF01I)
        (environment-bindings . g$9135$dF01I)
        (environment-symbols . g$9138$dF01I)
        (interaction-environment-symbols . g$9134$dF01I)
        (optimization-level . g$12286$dF01I)
        (library-path . g$8317$dF01I)
        (expand->core . g$9144$dF01I)
        (expand . g$9142$dF01I)
        (convert->cps . g$7648$dF01I)
        (parse->cps . g$7647$dF01I)
        (&no-nans . g$12285$dF01I)
        (&no-infinities . g$12284$dF01I)
        (&i/o-encoding . g$12283$dF01I)
        (&i/o-decoding . g$12282$dF01I)
        (&i/o-port . g$12281$dF01I)
        (&i/o-file-does-not-exist . g$12280$dF01I)
        (&i/o-file-already-exists . g$12279$dF01I)
        (&i/o-file-is-read-only . g$12278$dF01I)
        (&i/o-file-protection . g$12277$dF01I)
        (&i/o-filename . g$12276$dF01I)
        (&i/o-invalid-position . g$12275$dF01I)
        (&i/o-write . g$12274$dF01I)
        (&i/o-read . g$12273$dF01I)
        (&i/o . g$12272$dF01I)
        (&non-continuable . g$12271$dF01I)
        (&undefined . g$12270$dF01I)
        (&syntax . g$12269$dF01I)
        (&lexical . g$12268$dF01I)
        (&implementation-restriction . g$12267$dF01I)
        (&who . g$12266$dF01I)
        (&irritants . g$12265$dF01I)
        (&assertion . g$12264$dF01I)
        (&violation . g$12263$dF01I)
        (&error . g$12262$dF01I)
        (&serious . g$12261$dF01I)
        (&warning . g$12260$dF01I)
        (&message . g$12259$dF01I)
        (&condition . g$12258$dF01I)
        (define-condition-type . g$12257$dF01I)
        (define-enumeration . g$12256$dF01I)
        (define-record-type . g$12255$dF01I)
        (parent-rtd . g$12254$dF01I)
        (nongenerative . g$12253$dF01I)
        (opaque . g$12252$dF01I)
        (sealed . g$12251$dF01I)
        (protocol . g$12250$dF01I)
        (parent . g$12249$dF01I)
        (immutable . g$12248$dF01I)
        (mutable . g$12247$dF01I)
        (fields . g$12246$dF01I)
        (error-handling-mode . g$12245$dF01I)
        (file-options . g$12244$dF01I)
        (buffer-mode . g$12243$dF01I)
        (eol-style . g$12242$dF01I)
        (guard . g$12241$dF01I)
        (trace-letrec-syntax . g$12240$dF01I)
        (trace-let-syntax . g$12239$dF01I)
        (trace-define-syntax . g$12238$dF01I)
        (trace-define . g$12237$dF01I)
        (trace-lambda . g$12236$dF01I)
        (unsyntax-splicing . g$12235$dF01I)
        (unsyntax . g$12234$dF01I)
        (unquote-splicing . g$12233$dF01I)
        (unquote . g$12232$dF01I)
        (_ . g$12231$dF01I)
        (else . g$12230$dF01I)
        (=> . g$12229$dF01I)
        (... . g$12228$dF01I)
        (assert . g$12227$dF01I)
        (endianness . g$12226$dF01I)
        (delay . g$12225$dF01I)
        (time . g$12224$dF01I)
        (or . g$12223$dF01I)
        (and . g$12222$dF01I)
        (do . g$12221$dF01I)
        (cond . g$12220$dF01I)
        (let* . g$12219$dF01I)
        (let . g$12218$dF01I)
        (identifier-syntax . g$12217$dF01I)
        (with-syntax . g$12216$dF01I)
        (quasisyntax . g$12215$dF01I)
        (quasiquote . g$12214$dF01I)
        (syntax-rules . g$12213$dF01I)
        (include-into . g$12212$dF01I)
        (include . g$12211$dF01I)
        (let-values . g$12209$dF01I)
        (let*-values . g$12208$dF01I)
        (record-constructor-descriptor . g$12207$dF01I)
        (record-type-descriptor . g$12206$dF01I)
        (fluid-let-syntax . g$12205$dF01I)
        (case . g$12204$dF01I)
        (parameterize . g$12203$dF01I)
        (unless . g$12202$dF01I)
        (when . g$12201$dF01I)
        (if . g$12200$dF01I)
        (letrec* . g$12199$dF01I)
        (letrec . g$12198$dF01I)
        (case-lambda . g$12196$dF01I)
        (lambda . g$12195$dF01I)
        (syntax . g$12194$dF01I)
        (syntax-case . g$12193$dF01I)
        (quote . g$12192$dF01I)
        (letrec-syntax . g$12190$dF01I)
        (let-syntax . g$12189$dF01I)
        (set! . g$12188$dF01I)
        (export . g$12187$dF01I)
        (import . g$12186$dF01I)
        (library . g$12185$dF01I)
        (begin . g$12184$dF01I)
        (module . g$12183$dF01I)
        (define-syntax . g$12182$dF01I)
        (define . g$12181$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12774$dF01I
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$12290$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$dF01I
      'g$12775$dF01I
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12715$dF01I)
        (annotation-source . g$12714$dF01I)
        (annotation-expression . g$12713$dF01I)
        (annotation? . g$12712$dF01I)
        (read-annotated . g$12711$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$dF01I
      'g$12776$dF01I
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12684$dF01I)
        (serialize-library . g$12683$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$dF01I
      'g$12777$dF01I
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8765$dF01I)
        (variable-transformer? . g$8764$dF01I)
        (eqv-hash . g$12315$dF01I)
        (reverse! . g$12314$dF01I)
        (make-promise . g$6917$dF01I)
        (format . g$7573$dF01I)
        (get-command-line . g$12304$dF01I)
        (make-traced-procedure . g$12293$dF01I)
        (make-traced-macro . g$7593$dF01I)
        (assertion-error . g$9157$dF01I)
        (library-locator . g$12291$dF01I)
        (get-library-paths . g$12290$dF01I)
        (library-path . g$8317$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$dF01I
      'g$12778$dF01I
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$12316$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12779$dF01I
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12702$dF01I)
        (clr-field-set!-internal . g$12701$dF01I)
        (clr-field-get-internal . g$12700$dF01I)
        (clr-cast-internal . g$12699$dF01I)
        (clr-call-internal . g$12698$dF01I)
        (clr-new-internal . g$12697$dF01I)
        (clr-new-array-internal . g$12696$dF01I)
        (clr-is-internal . g$12695$dF01I)
        (clr-reference-internal . g$12694$dF01I)
        (clr-using-internal . g$12693$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12780$dF01I
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$12233$dF01I)
        (unquote . g$12232$dF01I)
        (else . g$12230$dF01I)
        (=> . g$12229$dF01I)
        (delay . g$12225$dF01I)
        (or . g$12223$dF01I)
        (and . g$12222$dF01I)
        (do . g$12221$dF01I)
        (cond . g$12220$dF01I)
        (let* . g$12219$dF01I)
        (let . g$12218$dF01I)
        (quasiquote . g$12214$dF01I)
        (syntax-rules . g$12213$dF01I)
        (case . g$12204$dF01I)
        (if . g$12200$dF01I)
        (letrec . g$12198$dF01I)
        (lambda . g$12195$dF01I)
        (quote . g$12192$dF01I)
        (letrec-syntax . g$12190$dF01I)
        (let-syntax . g$12189$dF01I)
        (set! . g$12188$dF01I)
        (begin . g$12184$dF01I)
        (define-syntax . g$12182$dF01I)
        (define . g$12181$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$dF01I
      'g$12781$dF01I
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$9168$dF01I)
        (char-ready? . g$12682$dF01I)
        (string-ci>? . g$6995$dF01I)
        (string-ci>=? . g$6997$dF01I)
        (string-ci=? . g$6993$dF01I)
        (string-ci<? . g$6994$dF01I)
        (string-ci<=? . g$6996$dF01I)
        (char-whitespace? . g$12673$dF01I)
        (char-upper-case? . g$12672$dF01I)
        (char-numeric? . g$12670$dF01I)
        (char-lower-case? . g$12669$dF01I)
        (char-upcase . g$12667$dF01I)
        (char-downcase . g$12664$dF01I)
        (char-ci>? . g$7034$dF01I)
        (char-ci>=? . g$7036$dF01I)
        (char-ci=? . g$7032$dF01I)
        (char-ci<? . g$7033$dF01I)
        (char-ci<=? . g$7035$dF01I)
        (char-alphabetic? . g$12663$dF01I)
        (call-with-output-file . g$7420$dF01I)
        (call-with-input-file . g$7419$dF01I)
        (write-char . g$7401$dF01I)
        (write . g$12631$dF01I)
        (with-output-to-file . g$7418$dF01I)
        (with-input-from-file . g$7417$dF01I)
        (read-char . g$7400$dF01I)
        (read . g$12630$dF01I)
        (peek-char . g$7399$dF01I)
        (open-output-file . g$12629$dF01I)
        (open-input-file . g$12628$dF01I)
        (newline . g$7421$dF01I)
        (display . g$12627$dF01I)
        (close-output-port . g$12626$dF01I)
        (close-input-port . g$12625$dF01I)
        (eof-object? . g$12624$dF01I)
        (eof-object . g$12623$dF01I)
        (current-error-port . g$12622$dF01I)
        (current-output-port . g$12621$dF01I)
        (current-input-port . g$12620$dF01I)
        (output-port? . g$12619$dF01I)
        (input-port? . g$12618$dF01I)
        (scheme-report-environment . g$9141$dF01I)
        (quotient . g$6914$dF01I)
        (null-environment . g$9140$dF01I)
        (remainder . g$6915$dF01I)
        (modulo . g$6916$dF01I)
        (inexact->exact . g$6911$dF01I)
        (force . g$6918$dF01I)
        (exact->inexact . g$6912$dF01I)
        (string-fill! . g$12557$dF01I)
        (string-set! . g$12556$dF01I)
        (set-cdr! . g$12555$dF01I)
        (set-car! . g$12554$dF01I)
        (memv . g$5866$dF01I)
        (memq . g$5865$dF01I)
        (member . g$5867$dF01I)
        (assv . g$5862$dF01I)
        (assq . g$5861$dF01I)
        (assoc . g$5863$dF01I)
        (eval . g$9143$dF01I)
        (zero? . g$6021$dF01I)
        (vector? . g$12424$dF01I)
        (vector-set! . g$12423$dF01I)
        (vector-ref . g$12422$dF01I)
        (vector-length . g$12420$dF01I)
        (vector-fill! . g$12418$dF01I)
        (vector->list . g$12417$dF01I)
        (vector . g$12416$dF01I)
        (values . g$12415$dF01I)
        (truncate . g$12414$dF01I)
        (tan . g$12413$dF01I)
        (symbol? . g$12412$dF01I)
        (symbol->string . g$12411$dF01I)
        (substring . g$12410$dF01I)
        (string? . g$12409$dF01I)
        (string>? . g$6064$dF01I)
        (string>=? . g$6066$dF01I)
        (string=? . g$6062$dF01I)
        (string<? . g$6063$dF01I)
        (string<=? . g$6065$dF01I)
        (string-ref . g$12408$dF01I)
        (string-length . g$12407$dF01I)
        (string-copy . g$12405$dF01I)
        (string-append . g$12404$dF01I)
        (string->symbol . g$12403$dF01I)
        (string->number . g$12402$dF01I)
        (string->list . g$12401$dF01I)
        (string . g$12400$dF01I)
        (sqrt . g$12399$dF01I)
        (sin . g$12398$dF01I)
        (round . g$12397$dF01I)
        (reverse . g$12396$dF01I)
        (real? . g$12395$dF01I)
        (real-part . g$12393$dF01I)
        (rationalize . g$6108$dF01I)
        (rational? . g$12392$dF01I)
        (procedure? . g$12390$dF01I)
        (positive? . g$6019$dF01I)
        (pair? . g$12389$dF01I)
        (odd? . g$6023$dF01I)
        (numerator . g$12388$dF01I)
        (number? . g$12387$dF01I)
        (number->string . g$12386$dF01I)
        (null? . g$12385$dF01I)
        (not . g$12384$dF01I)
        (negative? . g$6020$dF01I)
        (min . g$6025$dF01I)
        (max . g$6024$dF01I)
        (map . g$5873$dF01I)
        (make-vector . g$12382$dF01I)
        (make-string . g$12381$dF01I)
        (make-rectangular . g$12380$dF01I)
        (make-polar . g$12379$dF01I)
        (magnitude . g$12378$dF01I)
        (log . g$12377$dF01I)
        (list? . g$12376$dF01I)
        (list-tail . g$5853$dF01I)
        (list-ref . g$5854$dF01I)
        (list->vector . g$12375$dF01I)
        (list->string . g$12374$dF01I)
        (list . g$12373$dF01I)
        (length . g$12372$dF01I)
        (lcm . g$6027$dF01I)
        (integer? . g$12371$dF01I)
        (integer->char . g$12369$dF01I)
        (inexact? . g$12367$dF01I)
        (imag-part . g$12365$dF01I)
        (gcd . g$6026$dF01I)
        (for-each . g$5874$dF01I)
        (floor . g$12364$dF01I)
        (expt . g$12362$dF01I)
        (exp . g$12361$dF01I)
        (exact? . g$12360$dF01I)
        (even? . g$6022$dF01I)
        (eqv? . g$12356$dF01I)
        (equal? . g$12355$dF01I)
        (eq? . g$12354$dF01I)
        (dynamic-wind . g$12353$dF01I)
        (denominator . g$12346$dF01I)
        (cos . g$12345$dF01I)
        (cons . g$12344$dF01I)
        (complex? . g$12343$dF01I)
        (char? . g$12342$dF01I)
        (char>? . g$6105$dF01I)
        (char>=? . g$6107$dF01I)
        (char=? . g$6103$dF01I)
        (char<? . g$6104$dF01I)
        (char<=? . g$6106$dF01I)
        (char->integer . g$12341$dF01I)
        (ceiling . g$12340$dF01I)
        (call-with-values . g$12339$dF01I)
        (call-with-current-continuation . g$12337$dF01I)
        (cddddr . g$6018$dF01I)
        (cdddar . g$6017$dF01I)
        (cddadr . g$6016$dF01I)
        (cddaar . g$6015$dF01I)
        (cdaddr . g$6014$dF01I)
        (cdadar . g$6013$dF01I)
        (cdaadr . g$6012$dF01I)
        (cdaaar . g$6011$dF01I)
        (cadddr . g$6010$dF01I)
        (caddar . g$6009$dF01I)
        (cadadr . g$6008$dF01I)
        (cadaar . g$6007$dF01I)
        (caaddr . g$6006$dF01I)
        (caadar . g$6005$dF01I)
        (caaadr . g$6004$dF01I)
        (caaaar . g$6003$dF01I)
        (cdddr . g$6002$dF01I)
        (cddar . g$6001$dF01I)
        (cdadr . g$6000$dF01I)
        (cdaar . g$5999$dF01I)
        (caddr . g$5998$dF01I)
        (cadar . g$5997$dF01I)
        (caadr . g$5996$dF01I)
        (caaar . g$5995$dF01I)
        (cddr . g$5994$dF01I)
        (cdar . g$5993$dF01I)
        (cadr . g$5992$dF01I)
        (caar . g$5991$dF01I)
        (cdr . g$12336$dF01I)
        (car . g$12335$dF01I)
        (boolean? . g$12334$dF01I)
        (atan . g$12333$dF01I)
        (asin . g$12331$dF01I)
        (apply . g$12330$dF01I)
        (append . g$12329$dF01I)
        (angle . g$12328$dF01I)
        (acos . g$12327$dF01I)
        (abs . g$12326$dF01I)
        (/ . g$12325$dF01I)
        (* . g$12324$dF01I)
        (- . g$12323$dF01I)
        (+ . g$12322$dF01I)
        (>= . g$12321$dF01I)
        (> . g$12320$dF01I)
        (= . g$12319$dF01I)
        (<= . g$12318$dF01I)
        (< . g$12317$dF01I)
        (unquote-splicing . g$12233$dF01I)
        (unquote . g$12232$dF01I)
        (else . g$12230$dF01I)
        (=> . g$12229$dF01I)
        (... . g$12228$dF01I)
        (delay . g$12225$dF01I)
        (or . g$12223$dF01I)
        (and . g$12222$dF01I)
        (do . g$12221$dF01I)
        (cond . g$12220$dF01I)
        (let* . g$12219$dF01I)
        (let . g$12218$dF01I)
        (quasiquote . g$12214$dF01I)
        (syntax-rules . g$12213$dF01I)
        (case . g$12204$dF01I)
        (if . g$12200$dF01I)
        (letrec . g$12198$dF01I)
        (lambda . g$12195$dF01I)
        (quote . g$12192$dF01I)
        (letrec-syntax . g$12190$dF01I)
        (let-syntax . g$12189$dF01I)
        (set! . g$12188$dF01I)
        (begin . g$12184$dF01I)
        (define-syntax . g$12182$dF01I)
        (define . g$12181$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$dF01I
      'g$12782$dF01I
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12681$dF01I)
        (string-titlecase . g$12680$dF01I)
        (string-normalize-nfkd . g$12679$dF01I)
        (string-normalize-nfkc . g$12678$dF01I)
        (string-normalize-nfd . g$12677$dF01I)
        (string-normalize-nfc . g$12676$dF01I)
        (string-foldcase . g$12675$dF01I)
        (string-downcase . g$12674$dF01I)
        (string-ci>? . g$6995$dF01I)
        (string-ci>=? . g$6997$dF01I)
        (string-ci=? . g$6993$dF01I)
        (string-ci<? . g$6994$dF01I)
        (string-ci<=? . g$6996$dF01I)
        (char-whitespace? . g$12673$dF01I)
        (char-upper-case? . g$12672$dF01I)
        (char-title-case? . g$12671$dF01I)
        (char-numeric? . g$12670$dF01I)
        (char-lower-case? . g$12669$dF01I)
        (char-general-category . g$12668$dF01I)
        (char-upcase . g$12667$dF01I)
        (char-titlecase . g$12666$dF01I)
        (char-foldcase . g$12665$dF01I)
        (char-downcase . g$12664$dF01I)
        (char-ci>? . g$7034$dF01I)
        (char-ci>=? . g$7036$dF01I)
        (char-ci=? . g$7032$dF01I)
        (char-ci<? . g$7033$dF01I)
        (char-ci<=? . g$7035$dF01I)
        (char-alphabetic? . g$12663$dF01I)
        (make-variable-transformer . g$8763$dF01I)
        (identifier? . g$9162$dF01I)
        (generate-temporaries . g$9151$dF01I)
        (free-identifier=? . g$9152$dF01I)
        (syntax->datum . g$9164$dF01I)
        (datum->syntax . g$9163$dF01I)
        (bound-identifier=? . g$9153$dF01I)
        (record-type-descriptor? . g$12662$dF01I)
        (record-predicate . g$12661$dF01I)
        (record-mutator . g$12660$dF01I)
        (record-constructor . g$12659$dF01I)
        (record-accessor . g$12658$dF01I)
        (make-record-type-descriptor . g$12657$dF01I)
        (make-record-constructor-descriptor . g$12656$dF01I)
        (record? . g$12655$dF01I)
        (record-type-uid . g$12654$dF01I)
        (record-type-sealed? . g$12653$dF01I)
        (record-type-parent . g$12652$dF01I)
        (record-type-opaque? . g$12651$dF01I)
        (record-type-name . g$12650$dF01I)
        (record-type-generative? . g$12649$dF01I)
        (record-type-field-names . g$12648$dF01I)
        (record-rtd . g$12647$dF01I)
        (record-field-mutable? . g$12646$dF01I)
        (delete-file . g$6569$dF01I)
        (file-exists? . g$6568$dF01I)
        (vector-sort! . g$12645$dF01I)
        (vector-sort . g$12644$dF01I)
        (list-sort . g$6935$dF01I)
        (symbol-hash . g$12643$dF01I)
        (string-ci-hash . g$12642$dF01I)
        (string-hash . g$12641$dF01I)
        (equal-hash . g$12640$dF01I)
        (hashtable-equivalence-function . g$12639$dF01I)
        (make-hashtable . g$12638$dF01I)
        (hashtable-hash-function . g$12637$dF01I)
        (make-eqv-hashtable . g$6537$dF01I)
        (make-eq-hashtable . g$6536$dF01I)
        (hashtable? . g$12636$dF01I)
        (hashtable-update! . g$6543$dF01I)
        (hashtable-size . g$6538$dF01I)
        (hashtable-set! . g$6540$dF01I)
        (hashtable-ref . g$6539$dF01I)
        (hashtable-mutable? . g$12635$dF01I)
        (hashtable-keys . g$12634$dF01I)
        (hashtable-entries . g$12633$dF01I)
        (hashtable-delete! . g$6541$dF01I)
        (hashtable-copy . g$12632$dF01I)
        (hashtable-contains? . g$6542$dF01I)
        (hashtable-clear! . g$6544$dF01I)
        (call-with-output-file . g$7420$dF01I)
        (call-with-input-file . g$7419$dF01I)
        (write-char . g$7401$dF01I)
        (write . g$12631$dF01I)
        (with-output-to-file . g$7418$dF01I)
        (with-input-from-file . g$7417$dF01I)
        (read-char . g$7400$dF01I)
        (read . g$12630$dF01I)
        (peek-char . g$7399$dF01I)
        (open-output-file . g$12629$dF01I)
        (open-input-file . g$12628$dF01I)
        (newline . g$7421$dF01I)
        (display . g$12627$dF01I)
        (close-output-port . g$12626$dF01I)
        (close-input-port . g$12625$dF01I)
        (eof-object? . g$12624$dF01I)
        (eof-object . g$12623$dF01I)
        (current-error-port . g$12622$dF01I)
        (current-output-port . g$12621$dF01I)
        (current-input-port . g$12620$dF01I)
        (output-port? . g$12619$dF01I)
        (input-port? . g$12618$dF01I)
        (utf-8-codec . g$12617$dF01I)
        (utf-16-codec . g$12616$dF01I)
        (transcoder-error-handling-mode . g$12615$dF01I)
        (transcoder-eol-style . g$12614$dF01I)
        (transcoder-codec . g$12613$dF01I)
        (transcoded-port . g$12612$dF01I)
        (textual-port? . g$12611$dF01I)
        (string->bytevector . g$12610$dF01I)
        (standard-output-port . g$12609$dF01I)
        (standard-input-port . g$12608$dF01I)
        (standard-error-port . g$12607$dF01I)
        (set-port-position! . g$12606$dF01I)
        (put-u8 . g$12605$dF01I)
        (put-string . g$12604$dF01I)
        (put-datum . g$12603$dF01I)
        (put-char . g$12602$dF01I)
        (put-bytevector . g$12601$dF01I)
        (port? . g$7386$dF01I)
        (port-transcoder . g$12600$dF01I)
        (port-position . g$12599$dF01I)
        (port-has-set-port-position!? . g$12598$dF01I)
        (port-has-port-position? . g$12597$dF01I)
        (port-eof? . g$12596$dF01I)
        (output-port-buffer-mode . g$12595$dF01I)
        (open-string-output-port . g$7385$dF01I)
        (open-string-input-port . g$12594$dF01I)
        (open-file-output-port . g$12593$dF01I)
        (open-file-input/output-port . g$12592$dF01I)
        (open-file-input-port . g$12591$dF01I)
        (open-bytevector-output-port . g$12590$dF01I)
        (open-bytevector-input-port . g$12589$dF01I)
        (native-transcoder . g$12588$dF01I)
        (native-eol-style . g$12587$dF01I)
        (make-transcoder . g$12586$dF01I)
        (latin-1-codec . g$12585$dF01I)
        (make-i/o-write-error . g$7241$dF01I)
        (make-i/o-read-error . g$7227$dF01I)
        (make-i/o-port-error . g$7346$dF01I)
        (make-i/o-invalid-position-error . g$7256$dF01I)
        (make-i/o-filename-error . g$7273$dF01I)
        (make-i/o-file-protection-error . g$7289$dF01I)
        (make-i/o-file-is-read-only-error . g$7303$dF01I)
        (make-i/o-file-does-not-exist-error . g$7331$dF01I)
        (make-i/o-file-already-exists-error . g$7317$dF01I)
        (make-i/o-error . g$7213$dF01I)
        (make-i/o-encoding-error . g$7377$dF01I)
        (make-i/o-decoding-error . g$7362$dF01I)
        (make-custom-textual-output-port . g$12584$dF01I)
        (make-custom-textual-input/output-port . g$12583$dF01I)
        (make-custom-textual-input-port . g$12582$dF01I)
        (make-custom-binary-output-port . g$12581$dF01I)
        (make-custom-binary-input/output-port . g$12580$dF01I)
        (make-custom-binary-input-port . g$12579$dF01I)
        (make-bytevector . g$12578$dF01I)
        (lookahead-u8 . g$12577$dF01I)
        (lookahead-char . g$12576$dF01I)
        (i/o-write-error? . g$7242$dF01I)
        (i/o-read-error? . g$7228$dF01I)
        (i/o-port-error? . g$7348$dF01I)
        (i/o-invalid-position-error? . g$7258$dF01I)
        (i/o-error-position . g$7259$dF01I)
        (i/o-filename-error? . g$7275$dF01I)
        (i/o-file-protection-error? . g$7290$dF01I)
        (i/o-file-is-read-only-error? . g$7304$dF01I)
        (i/o-file-does-not-exist-error? . g$7332$dF01I)
        (i/o-file-already-exists-error? . g$7318$dF01I)
        (i/o-error? . g$7214$dF01I)
        (i/o-error-port . g$7349$dF01I)
        (i/o-error-filename . g$7276$dF01I)
        (i/o-encoding-error? . g$7379$dF01I)
        (i/o-encoding-error-char . g$7380$dF01I)
        (i/o-decoding-error? . g$7363$dF01I)
        (get-u8 . g$12575$dF01I)
        (get-string-n! . g$12574$dF01I)
        (get-string-n . g$12573$dF01I)
        (get-string-all . g$12572$dF01I)
        (get-line . g$12571$dF01I)
        (get-datum . g$12570$dF01I)
        (get-char . g$12569$dF01I)
        (get-bytevector-some . g$12568$dF01I)
        (get-bytevector-n! . g$12567$dF01I)
        (get-bytevector-n . g$12566$dF01I)
        (get-bytevector-all . g$12565$dF01I)
        (flush-output-port . g$12564$dF01I)
        (close-port . g$12563$dF01I)
        (call-with-string-output-port . g$7387$dF01I)
        (call-with-port . g$7388$dF01I)
        (call-with-bytevector-output-port . g$12562$dF01I)
        (bytevector->string . g$12561$dF01I)
        (buffer-mode? . g$12560$dF01I)
        (binary-port? . g$12559$dF01I)
        (exit . g$12558$dF01I)
        (command-line . g$12145$dF01I)
        (remove . g$5878$dF01I)
        (remv . g$5879$dF01I)
        (remp . g$5859$dF01I)
        (remq . g$5880$dF01I)
        (partition . g$5858$dF01I)
        (memv . g$5866$dF01I)
        (memq . g$5865$dF01I)
        (memp . g$5868$dF01I)
        (member . g$5867$dF01I)
        (exists . g$5872$dF01I)
        (for-all . g$5871$dF01I)
        (fold-right . g$5877$dF01I)
        (fold-left . g$5876$dF01I)
        (find . g$5857$dF01I)
        (filter . g$5860$dF01I)
        (cons* . g$5875$dF01I)
        (assv . g$5862$dF01I)
        (assq . g$5861$dF01I)
        (assp . g$5864$dF01I)
        (assoc . g$5863$dF01I)
        (with-exception-handler . g$12553$dF01I)
        (raise-continuable . g$12552$dF01I)
        (raise . g$12551$dF01I)
        (make-enumeration . g$7485$dF01I)
        (enum-set=? . g$7492$dF01I)
        (enum-set-universe . g$7486$dF01I)
        (enum-set-union . g$7493$dF01I)
        (enum-set-subset? . g$7491$dF01I)
        (enum-set-projection . g$7497$dF01I)
        (enum-set-member? . g$7490$dF01I)
        (enum-set-intersection . g$7494$dF01I)
        (enum-set-indexer . g$7487$dF01I)
        (enum-set-difference . g$7495$dF01I)
        (enum-set-constructor . g$7488$dF01I)
        (enum-set-complement . g$7496$dF01I)
        (enum-set->list . g$7489$dF01I)
        (who-condition? . g$6823$dF01I)
        (warning? . g$6734$dF01I)
        (violation? . g$6776$dF01I)
        (undefined-violation? . g$6900$dF01I)
        (syntax-violation? . g$6884$dF01I)
        (syntax-violation-subform . g$6886$dF01I)
        (syntax-violation-form . g$6885$dF01I)
        (syntax-violation . g$9161$dF01I)
        (simple-conditions . g$12550$dF01I)
        (serious-condition? . g$6748$dF01I)
        (non-continuable-violation? . g$6838$dF01I)
        (message-condition? . g$6719$dF01I)
        (make-who-condition . g$6821$dF01I)
        (make-warning . g$6733$dF01I)
        (make-violation . g$6775$dF01I)
        (make-undefined-violation . g$6899$dF01I)
        (make-syntax-violation . g$6881$dF01I)
        (make-serious-condition . g$6747$dF01I)
        (make-non-continuable-violation . g$6837$dF01I)
        (make-message-condition . g$6717$dF01I)
        (make-lexical-violation . g$6865$dF01I)
        (make-irritants-condition . g$6804$dF01I)
        (make-implementation-restriction-violation . g$6851$dF01I)
        (make-error . g$6761$dF01I)
        (make-assertion-violation . g$6789$dF01I)
        (lexical-violation? . g$6866$dF01I)
        (irritants-condition? . g$6806$dF01I)
        (implementation-restriction-violation? . g$6852$dF01I)
        (error? . g$6762$dF01I)
        (condition-who . g$6824$dF01I)
        (condition-predicate . g$12549$dF01I)
        (condition-message . g$6720$dF01I)
        (condition-irritants . g$6807$dF01I)
        (condition-accessor . g$12548$dF01I)
        (condition . g$12547$dF01I)
        (assertion-violation? . g$6790$dF01I)
        (condition? . g$12546$dF01I)
        (utf32->string . g$12545$dF01I)
        (utf16->string . g$12544$dF01I)
        (utf8->string . g$12543$dF01I)
        (uint-list->bytevector . g$12542$dF01I)
        (u8-list->bytevector . g$12541$dF01I)
        (string->utf8 . g$12540$dF01I)
        (string->utf32 . g$12539$dF01I)
        (string->utf16 . g$12538$dF01I)
        (sint-list->bytevector . g$12537$dF01I)
        (native-endianness . g$6575$dF01I)
        (bytevector? . g$12536$dF01I)
        (bytevector=? . g$12535$dF01I)
        (bytevector-uint-set! . g$12534$dF01I)
        (bytevector-uint-ref . g$12533$dF01I)
        (bytevector-u8-set! . g$12532$dF01I)
        (bytevector-u8-ref . g$12531$dF01I)
        (bytevector-u64-set! . g$6596$dF01I)
        (bytevector-u64-ref . g$6592$dF01I)
        (bytevector-u64-native-set! . g$6598$dF01I)
        (bytevector-u64-native-ref . g$6594$dF01I)
        (bytevector-u32-set! . g$6588$dF01I)
        (bytevector-u32-ref . g$6584$dF01I)
        (bytevector-u32-native-set! . g$6590$dF01I)
        (bytevector-u32-native-ref . g$6586$dF01I)
        (bytevector-u16-set! . g$6580$dF01I)
        (bytevector-u16-ref . g$6576$dF01I)
        (bytevector-u16-native-set! . g$6582$dF01I)
        (bytevector-u16-native-ref . g$6578$dF01I)
        (bytevector-sint-set! . g$12530$dF01I)
        (bytevector-sint-ref . g$12529$dF01I)
        (bytevector-s8-set! . g$12528$dF01I)
        (bytevector-s8-ref . g$12527$dF01I)
        (bytevector-s64-set! . g$6597$dF01I)
        (bytevector-s64-ref . g$6593$dF01I)
        (bytevector-s64-native-set! . g$6599$dF01I)
        (bytevector-s64-native-ref . g$6595$dF01I)
        (bytevector-s32-set! . g$6589$dF01I)
        (bytevector-s32-ref . g$6585$dF01I)
        (bytevector-s32-native-set! . g$6591$dF01I)
        (bytevector-s32-native-ref . g$6587$dF01I)
        (bytevector-s16-set! . g$6581$dF01I)
        (bytevector-s16-ref . g$6577$dF01I)
        (bytevector-s16-native-set! . g$6583$dF01I)
        (bytevector-s16-native-ref . g$6579$dF01I)
        (bytevector-length . g$12526$dF01I)
        (bytevector-ieee-single-set! . g$12525$dF01I)
        (bytevector-ieee-single-ref . g$12524$dF01I)
        (bytevector-ieee-single-native-set! . g$6602$dF01I)
        (bytevector-ieee-single-native-ref . g$6600$dF01I)
        (bytevector-ieee-double-set! . g$12523$dF01I)
        (bytevector-ieee-double-ref . g$12522$dF01I)
        (bytevector-ieee-double-native-set! . g$6603$dF01I)
        (bytevector-ieee-double-native-ref . g$6601$dF01I)
        (bytevector-fill! . g$12521$dF01I)
        (bytevector-copy! . g$12520$dF01I)
        (bytevector-copy . g$12519$dF01I)
        (bytevector->uint-list . g$12518$dF01I)
        (bytevector->u8-list . g$12517$dF01I)
        (bytevector->sint-list . g$12516$dF01I)
        (no-nans-violation? . g$7199$dF01I)
        (no-infinities-violation? . g$7185$dF01I)
        (make-no-nans-violation . g$7198$dF01I)
        (make-no-infinities-violation . g$7184$dF01I)
        (real->flonum . g$12515$dF01I)
        (flzero? . g$12514$dF01I)
        (fltruncate . g$12513$dF01I)
        (fltan . g$12512$dF01I)
        (flsqrt . g$12511$dF01I)
        (flsin . g$12510$dF01I)
        (flround . g$12509$dF01I)
        (flpositive? . g$12508$dF01I)
        (flonum? . g$12507$dF01I)
        (flodd? . g$12506$dF01I)
        (flnumerator . g$12505$dF01I)
        (flnegative? . g$12504$dF01I)
        (flnan? . g$12503$dF01I)
        (flmod0 . g$12502$dF01I)
        (flmod . g$12501$dF01I)
        (flmin . g$12500$dF01I)
        (flmax . g$12499$dF01I)
        (fllog . g$12498$dF01I)
        (flinteger? . g$12497$dF01I)
        (flinfinite? . g$12496$dF01I)
        (flfloor . g$12495$dF01I)
        (flfinite? . g$12494$dF01I)
        (flexpt . g$12493$dF01I)
        (flexp . g$12492$dF01I)
        (fleven? . g$12491$dF01I)
        (fldiv0-and-mod0 . g$12490$dF01I)
        (fldiv0 . g$12489$dF01I)
        (fldiv-and-mod . g$12488$dF01I)
        (fldiv . g$12487$dF01I)
        (fldenominator . g$12486$dF01I)
        (flcos . g$12485$dF01I)
        (flceiling . g$12484$dF01I)
        (flatan . g$12483$dF01I)
        (flasin . g$12482$dF01I)
        (flacos . g$12481$dF01I)
        (flabs . g$12480$dF01I)
        (fl>? . g$12479$dF01I)
        (fl>=? . g$12478$dF01I)
        (fl=? . g$12477$dF01I)
        (fl<? . g$12476$dF01I)
        (fl<=? . g$12475$dF01I)
        (fl/ . g$12474$dF01I)
        (fl- . g$12473$dF01I)
        (fl+ . g$12472$dF01I)
        (fl* . g$12471$dF01I)
        (fixnum->flonum . g$12470$dF01I)
        (fxzero? . g$12469$dF01I)
        (fxxor . g$12468$dF01I)
        (fxrotate-bit-field . g$7131$dF01I)
        (fxreverse-bit-field . g$12467$dF01I)
        (fxpositive? . g$12466$dF01I)
        (fxodd? . g$12465$dF01I)
        (fxnot . g$12464$dF01I)
        (fxnegative? . g$12463$dF01I)
        (fxmod0 . g$12462$dF01I)
        (fxmod . g$12461$dF01I)
        (fxmin . g$12460$dF01I)
        (fxmax . g$12459$dF01I)
        (fxlength . g$12458$dF01I)
        (fxior . g$12457$dF01I)
        (fxif . g$7125$dF01I)
        (fxfirst-bit-set . g$12456$dF01I)
        (fxeven? . g$12455$dF01I)
        (fxdiv0-and-mod0 . g$12454$dF01I)
        (fxdiv0 . g$12453$dF01I)
        (fxdiv-and-mod . g$12452$dF01I)
        (fxdiv . g$12451$dF01I)
        (fxcopy-bit-field . g$7128$dF01I)
        (fxcopy-bit . g$7126$dF01I)
        (fxbit-set? . g$12450$dF01I)
        (fxbit-field . g$7127$dF01I)
        (fxbit-count . g$12449$dF01I)
        (fxarithmetic-shift-right . g$7130$dF01I)
        (fxarithmetic-shift-left . g$7129$dF01I)
        (fxarithmetic-shift . g$12448$dF01I)
        (fxand . g$12447$dF01I)
        (fx>? . g$12446$dF01I)
        (fx>=? . g$12445$dF01I)
        (fx=? . g$12444$dF01I)
        (fx<? . g$12443$dF01I)
        (fx<=? . g$12442$dF01I)
        (fx-/carry . g$7123$dF01I)
        (fx- . g$12441$dF01I)
        (fx+/carry . g$7124$dF01I)
        (fx+ . g$12440$dF01I)
        (fx*/carry . g$7122$dF01I)
        (fx* . g$12439$dF01I)
        (greatest-fixnum . g$12438$dF01I)
        (least-fixnum . g$12437$dF01I)
        (fixnum-width . g$12436$dF01I)
        (fixnum? . g$12435$dF01I)
        (bitwise-rotate-bit-field . g$7096$dF01I)
        (bitwise-reverse-bit-field . g$12434$dF01I)
        (bitwise-length . g$12433$dF01I)
        (bitwise-if . g$7090$dF01I)
        (bitwise-first-bit-set . g$12432$dF01I)
        (bitwise-copy-bit-field . g$7093$dF01I)
        (bitwise-copy-bit . g$7091$dF01I)
        (bitwise-bit-set? . g$12431$dF01I)
        (bitwise-bit-field . g$7092$dF01I)
        (bitwise-bit-count . g$12430$dF01I)
        (bitwise-xor . g$12429$dF01I)
        (bitwise-ior . g$12428$dF01I)
        (bitwise-and . g$12427$dF01I)
        (bitwise-not . g$12426$dF01I)
        (bitwise-arithmetic-shift-right . g$7095$dF01I)
        (bitwise-arithmetic-shift-left . g$7094$dF01I)
        (bitwise-arithmetic-shift . g$12425$dF01I)
        (zero? . g$6021$dF01I)
        (vector? . g$12424$dF01I)
        (vector-set! . g$12423$dF01I)
        (vector-ref . g$12422$dF01I)
        (vector-map . g$12421$dF01I)
        (vector-length . g$12420$dF01I)
        (vector-for-each . g$12419$dF01I)
        (vector-fill! . g$12418$dF01I)
        (vector->list . g$12417$dF01I)
        (vector . g$12416$dF01I)
        (values . g$12415$dF01I)
        (truncate . g$12414$dF01I)
        (tan . g$12413$dF01I)
        (symbol? . g$12412$dF01I)
        (symbol=? . g$6067$dF01I)
        (symbol->string . g$12411$dF01I)
        (substring . g$12410$dF01I)
        (string? . g$12409$dF01I)
        (string>? . g$6064$dF01I)
        (string>=? . g$6066$dF01I)
        (string=? . g$6062$dF01I)
        (string<? . g$6063$dF01I)
        (string<=? . g$6065$dF01I)
        (string-ref . g$12408$dF01I)
        (string-length . g$12407$dF01I)
        (string-for-each . g$12406$dF01I)
        (string-copy . g$12405$dF01I)
        (string-append . g$12404$dF01I)
        (string->symbol . g$12403$dF01I)
        (string->number . g$12402$dF01I)
        (string->list . g$12401$dF01I)
        (string . g$12400$dF01I)
        (sqrt . g$12399$dF01I)
        (sin . g$12398$dF01I)
        (round . g$12397$dF01I)
        (reverse . g$12396$dF01I)
        (real? . g$12395$dF01I)
        (real-valued? . g$12394$dF01I)
        (real-part . g$12393$dF01I)
        (rationalize . g$6108$dF01I)
        (rational? . g$12392$dF01I)
        (rational-valued? . g$12391$dF01I)
        (procedure? . g$12390$dF01I)
        (positive? . g$6019$dF01I)
        (pair? . g$12389$dF01I)
        (odd? . g$6023$dF01I)
        (numerator . g$12388$dF01I)
        (number? . g$12387$dF01I)
        (number->string . g$12386$dF01I)
        (null? . g$12385$dF01I)
        (not . g$12384$dF01I)
        (negative? . g$6020$dF01I)
        (nan? . g$12383$dF01I)
        (min . g$6025$dF01I)
        (max . g$6024$dF01I)
        (map . g$5873$dF01I)
        (make-vector . g$12382$dF01I)
        (make-string . g$12381$dF01I)
        (make-rectangular . g$12380$dF01I)
        (make-polar . g$12379$dF01I)
        (magnitude . g$12378$dF01I)
        (log . g$12377$dF01I)
        (list? . g$12376$dF01I)
        (list-tail . g$5853$dF01I)
        (list-ref . g$5854$dF01I)
        (list->vector . g$12375$dF01I)
        (list->string . g$12374$dF01I)
        (list . g$12373$dF01I)
        (length . g$12372$dF01I)
        (lcm . g$6027$dF01I)
        (integer? . g$12371$dF01I)
        (integer-valued? . g$12370$dF01I)
        (integer->char . g$12369$dF01I)
        (infinite? . g$12368$dF01I)
        (inexact? . g$12367$dF01I)
        (inexact . g$12366$dF01I)
        (imag-part . g$12365$dF01I)
        (gcd . g$6026$dF01I)
        (for-each . g$5874$dF01I)
        (floor . g$12364$dF01I)
        (finite? . g$12363$dF01I)
        (expt . g$12362$dF01I)
        (exp . g$12361$dF01I)
        (exact? . g$12360$dF01I)
        (exact-integer-sqrt . g$12359$dF01I)
        (exact . g$12358$dF01I)
        (even? . g$6022$dF01I)
        (error . g$12357$dF01I)
        (eqv? . g$12356$dF01I)
        (equal? . g$12355$dF01I)
        (eq? . g$12354$dF01I)
        (dynamic-wind . g$12353$dF01I)
        (div0-and-mod0 . g$12352$dF01I)
        (mod0 . g$12351$dF01I)
        (div0 . g$12350$dF01I)
        (div-and-mod . g$12349$dF01I)
        (mod . g$12348$dF01I)
        (div . g$12347$dF01I)
        (denominator . g$12346$dF01I)
        (cos . g$12345$dF01I)
        (cons . g$12344$dF01I)
        (complex? . g$12343$dF01I)
        (char? . g$12342$dF01I)
        (char>? . g$6105$dF01I)
        (char>=? . g$6107$dF01I)
        (char=? . g$6103$dF01I)
        (char<? . g$6104$dF01I)
        (char<=? . g$6106$dF01I)
        (char->integer . g$12341$dF01I)
        (ceiling . g$12340$dF01I)
        (call-with-values . g$12339$dF01I)
        (call/cc . g$12338$dF01I)
        (call-with-current-continuation . g$12337$dF01I)
        (cddddr . g$6018$dF01I)
        (cdddar . g$6017$dF01I)
        (cddadr . g$6016$dF01I)
        (cddaar . g$6015$dF01I)
        (cdaddr . g$6014$dF01I)
        (cdadar . g$6013$dF01I)
        (cdaadr . g$6012$dF01I)
        (cdaaar . g$6011$dF01I)
        (cadddr . g$6010$dF01I)
        (caddar . g$6009$dF01I)
        (cadadr . g$6008$dF01I)
        (cadaar . g$6007$dF01I)
        (caaddr . g$6006$dF01I)
        (caadar . g$6005$dF01I)
        (caaadr . g$6004$dF01I)
        (caaaar . g$6003$dF01I)
        (cdddr . g$6002$dF01I)
        (cddar . g$6001$dF01I)
        (cdadr . g$6000$dF01I)
        (cdaar . g$5999$dF01I)
        (caddr . g$5998$dF01I)
        (cadar . g$5997$dF01I)
        (caadr . g$5996$dF01I)
        (caaar . g$5995$dF01I)
        (cddr . g$5994$dF01I)
        (cdar . g$5993$dF01I)
        (cadr . g$5992$dF01I)
        (caar . g$5991$dF01I)
        (cdr . g$12336$dF01I)
        (car . g$12335$dF01I)
        (boolean? . g$12334$dF01I)
        (boolean=? . g$6068$dF01I)
        (atan . g$12333$dF01I)
        (assertion-violation . g$12332$dF01I)
        (asin . g$12331$dF01I)
        (apply . g$12330$dF01I)
        (append . g$12329$dF01I)
        (angle . g$12328$dF01I)
        (acos . g$12327$dF01I)
        (abs . g$12326$dF01I)
        (/ . g$12325$dF01I)
        (* . g$12324$dF01I)
        (- . g$12323$dF01I)
        (+ . g$12322$dF01I)
        (>= . g$12321$dF01I)
        (> . g$12320$dF01I)
        (= . g$12319$dF01I)
        (<= . g$12318$dF01I)
        (< . g$12317$dF01I)
        (&no-nans . g$12285$dF01I)
        (&no-infinities . g$12284$dF01I)
        (&i/o-encoding . g$12283$dF01I)
        (&i/o-decoding . g$12282$dF01I)
        (&i/o-port . g$12281$dF01I)
        (&i/o-file-does-not-exist . g$12280$dF01I)
        (&i/o-file-already-exists . g$12279$dF01I)
        (&i/o-file-is-read-only . g$12278$dF01I)
        (&i/o-file-protection . g$12277$dF01I)
        (&i/o-filename . g$12276$dF01I)
        (&i/o-invalid-position . g$12275$dF01I)
        (&i/o-write . g$12274$dF01I)
        (&i/o-read . g$12273$dF01I)
        (&i/o . g$12272$dF01I)
        (&non-continuable . g$12271$dF01I)
        (&undefined . g$12270$dF01I)
        (&syntax . g$12269$dF01I)
        (&lexical . g$12268$dF01I)
        (&implementation-restriction . g$12267$dF01I)
        (&who . g$12266$dF01I)
        (&irritants . g$12265$dF01I)
        (&assertion . g$12264$dF01I)
        (&violation . g$12263$dF01I)
        (&error . g$12262$dF01I)
        (&serious . g$12261$dF01I)
        (&warning . g$12260$dF01I)
        (&message . g$12259$dF01I)
        (&condition . g$12258$dF01I)
        (define-condition-type . g$12257$dF01I)
        (define-enumeration . g$12256$dF01I)
        (define-record-type . g$12255$dF01I)
        (parent-rtd . g$12254$dF01I)
        (nongenerative . g$12253$dF01I)
        (opaque . g$12252$dF01I)
        (sealed . g$12251$dF01I)
        (protocol . g$12250$dF01I)
        (parent . g$12249$dF01I)
        (immutable . g$12248$dF01I)
        (mutable . g$12247$dF01I)
        (fields . g$12246$dF01I)
        (error-handling-mode . g$12245$dF01I)
        (file-options . g$12244$dF01I)
        (buffer-mode . g$12243$dF01I)
        (eol-style . g$12242$dF01I)
        (guard . g$12241$dF01I)
        (unsyntax-splicing . g$12235$dF01I)
        (unsyntax . g$12234$dF01I)
        (unquote-splicing . g$12233$dF01I)
        (unquote . g$12232$dF01I)
        (_ . g$12231$dF01I)
        (else . g$12230$dF01I)
        (=> . g$12229$dF01I)
        (... . g$12228$dF01I)
        (assert . g$12227$dF01I)
        (endianness . g$12226$dF01I)
        (or . g$12223$dF01I)
        (and . g$12222$dF01I)
        (do . g$12221$dF01I)
        (cond . g$12220$dF01I)
        (let* . g$12219$dF01I)
        (let . g$12218$dF01I)
        (identifier-syntax . g$12217$dF01I)
        (with-syntax . g$12216$dF01I)
        (quasisyntax . g$12215$dF01I)
        (quasiquote . g$12214$dF01I)
        (syntax-rules . g$12213$dF01I)
        (let-values . g$12209$dF01I)
        (let*-values . g$12208$dF01I)
        (record-constructor-descriptor . g$12207$dF01I)
        (record-type-descriptor . g$12206$dF01I)
        (case . g$12204$dF01I)
        (unless . g$12202$dF01I)
        (when . g$12201$dF01I)
        (if . g$12200$dF01I)
        (letrec* . g$12199$dF01I)
        (letrec . g$12198$dF01I)
        (case-lambda . g$12196$dF01I)
        (lambda . g$12195$dF01I)
        (syntax . g$12194$dF01I)
        (syntax-case . g$12193$dF01I)
        (quote . g$12192$dF01I)
        (letrec-syntax . g$12190$dF01I)
        (let-syntax . g$12189$dF01I)
        (set! . g$12188$dF01I)
        (begin . g$12184$dF01I)
        (define-syntax . g$12182$dF01I)
        (define . g$12181$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12783$dF01I
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$9168$dF01I)
        (scheme-report-environment . g$9141$dF01I)
        (quotient . g$6914$dF01I)
        (null-environment . g$9140$dF01I)
        (remainder . g$6915$dF01I)
        (modulo . g$6916$dF01I)
        (inexact->exact . g$6911$dF01I)
        (force . g$6918$dF01I)
        (exact->inexact . g$6912$dF01I)
        (delay . g$12225$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12784$dF01I
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$12221$dF01I)
        (unless . g$12202$dF01I)
        (when . g$12201$dF01I)
        (case-lambda . g$12196$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12785$dF01I
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9143$dF01I) (environment . g$9139$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12786$dF01I
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12555$dF01I) (set-car! . g$12554$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12787$dF01I
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12557$dF01I) (string-set! . g$12556$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12788$dF01I
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12558$dF01I) (command-line . g$12145$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12789$dF01I
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8763$dF01I)
        (identifier? . g$9162$dF01I)
        (generate-temporaries . g$9151$dF01I)
        (free-identifier=? . g$9152$dF01I)
        (syntax->datum . g$9164$dF01I)
        (datum->syntax . g$9163$dF01I)
        (bound-identifier=? . g$9153$dF01I)
        (syntax-violation . g$9161$dF01I)
        (unsyntax-splicing . g$12235$dF01I)
        (unsyntax . g$12234$dF01I)
        (_ . g$12231$dF01I)
        (... . g$12228$dF01I)
        (with-syntax . g$12216$dF01I)
        (quasisyntax . g$12215$dF01I)
        (syntax . g$12194$dF01I)
        (syntax-case . g$12193$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12790$dF01I
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6569$dF01I)
        (file-exists? . g$6568$dF01I)
        (make-i/o-write-error . g$7241$dF01I)
        (make-i/o-read-error . g$7227$dF01I)
        (make-i/o-port-error . g$7346$dF01I)
        (make-i/o-invalid-position-error . g$7256$dF01I)
        (make-i/o-filename-error . g$7273$dF01I)
        (make-i/o-file-protection-error . g$7289$dF01I)
        (make-i/o-file-is-read-only-error . g$7303$dF01I)
        (make-i/o-file-does-not-exist-error . g$7331$dF01I)
        (make-i/o-file-already-exists-error . g$7317$dF01I)
        (make-i/o-error . g$7213$dF01I)
        (i/o-write-error? . g$7242$dF01I)
        (i/o-read-error? . g$7228$dF01I)
        (i/o-port-error? . g$7348$dF01I)
        (i/o-invalid-position-error? . g$7258$dF01I)
        (i/o-error-position . g$7259$dF01I)
        (i/o-filename-error? . g$7275$dF01I)
        (i/o-file-protection-error? . g$7290$dF01I)
        (i/o-file-is-read-only-error? . g$7304$dF01I)
        (i/o-file-does-not-exist-error? . g$7332$dF01I)
        (i/o-file-already-exists-error? . g$7318$dF01I)
        (i/o-error? . g$7214$dF01I)
        (i/o-error-port . g$7349$dF01I)
        (i/o-error-filename . g$7276$dF01I)
        (&i/o-port . g$12281$dF01I)
        (&i/o-file-does-not-exist . g$12280$dF01I)
        (&i/o-file-already-exists . g$12279$dF01I)
        (&i/o-file-is-read-only . g$12278$dF01I)
        (&i/o-file-protection . g$12277$dF01I)
        (&i/o-filename . g$12276$dF01I)
        (&i/o-invalid-position . g$12275$dF01I)
        (&i/o-write . g$12274$dF01I)
        (&i/o-read . g$12273$dF01I)
        (&i/o . g$12272$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12791$dF01I
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12645$dF01I)
        (vector-sort . g$12644$dF01I)
        (list-sort . g$6935$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12792$dF01I
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$6021$dF01I)
        (vector? . g$12424$dF01I)
        (vector-set! . g$12423$dF01I)
        (vector-ref . g$12422$dF01I)
        (vector-map . g$12421$dF01I)
        (vector-length . g$12420$dF01I)
        (vector-for-each . g$12419$dF01I)
        (vector-fill! . g$12418$dF01I)
        (vector->list . g$12417$dF01I)
        (vector . g$12416$dF01I)
        (values . g$12415$dF01I)
        (truncate . g$12414$dF01I)
        (tan . g$12413$dF01I)
        (symbol? . g$12412$dF01I)
        (symbol=? . g$6067$dF01I)
        (symbol->string . g$12411$dF01I)
        (substring . g$12410$dF01I)
        (string? . g$12409$dF01I)
        (string>? . g$6064$dF01I)
        (string>=? . g$6066$dF01I)
        (string=? . g$6062$dF01I)
        (string<? . g$6063$dF01I)
        (string<=? . g$6065$dF01I)
        (string-ref . g$12408$dF01I)
        (string-length . g$12407$dF01I)
        (string-for-each . g$12406$dF01I)
        (string-copy . g$12405$dF01I)
        (string-append . g$12404$dF01I)
        (string->symbol . g$12403$dF01I)
        (string->number . g$12402$dF01I)
        (string->list . g$12401$dF01I)
        (string . g$12400$dF01I)
        (sqrt . g$12399$dF01I)
        (sin . g$12398$dF01I)
        (round . g$12397$dF01I)
        (reverse . g$12396$dF01I)
        (real? . g$12395$dF01I)
        (real-valued? . g$12394$dF01I)
        (real-part . g$12393$dF01I)
        (rationalize . g$6108$dF01I)
        (rational? . g$12392$dF01I)
        (rational-valued? . g$12391$dF01I)
        (procedure? . g$12390$dF01I)
        (positive? . g$6019$dF01I)
        (pair? . g$12389$dF01I)
        (odd? . g$6023$dF01I)
        (numerator . g$12388$dF01I)
        (number? . g$12387$dF01I)
        (number->string . g$12386$dF01I)
        (null? . g$12385$dF01I)
        (not . g$12384$dF01I)
        (negative? . g$6020$dF01I)
        (nan? . g$12383$dF01I)
        (min . g$6025$dF01I)
        (max . g$6024$dF01I)
        (map . g$5873$dF01I)
        (make-vector . g$12382$dF01I)
        (make-string . g$12381$dF01I)
        (make-rectangular . g$12380$dF01I)
        (make-polar . g$12379$dF01I)
        (magnitude . g$12378$dF01I)
        (log . g$12377$dF01I)
        (list? . g$12376$dF01I)
        (list-tail . g$5853$dF01I)
        (list-ref . g$5854$dF01I)
        (list->vector . g$12375$dF01I)
        (list->string . g$12374$dF01I)
        (list . g$12373$dF01I)
        (length . g$12372$dF01I)
        (lcm . g$6027$dF01I)
        (integer? . g$12371$dF01I)
        (integer-valued? . g$12370$dF01I)
        (integer->char . g$12369$dF01I)
        (infinite? . g$12368$dF01I)
        (inexact? . g$12367$dF01I)
        (inexact . g$12366$dF01I)
        (imag-part . g$12365$dF01I)
        (gcd . g$6026$dF01I)
        (for-each . g$5874$dF01I)
        (floor . g$12364$dF01I)
        (finite? . g$12363$dF01I)
        (expt . g$12362$dF01I)
        (exp . g$12361$dF01I)
        (exact? . g$12360$dF01I)
        (exact-integer-sqrt . g$12359$dF01I)
        (exact . g$12358$dF01I)
        (even? . g$6022$dF01I)
        (error . g$12357$dF01I)
        (eqv? . g$12356$dF01I)
        (equal? . g$12355$dF01I)
        (eq? . g$12354$dF01I)
        (dynamic-wind . g$12353$dF01I)
        (div0-and-mod0 . g$12352$dF01I)
        (mod0 . g$12351$dF01I)
        (div0 . g$12350$dF01I)
        (div-and-mod . g$12349$dF01I)
        (mod . g$12348$dF01I)
        (div . g$12347$dF01I)
        (denominator . g$12346$dF01I)
        (cos . g$12345$dF01I)
        (cons . g$12344$dF01I)
        (complex? . g$12343$dF01I)
        (char? . g$12342$dF01I)
        (char>? . g$6105$dF01I)
        (char>=? . g$6107$dF01I)
        (char=? . g$6103$dF01I)
        (char<? . g$6104$dF01I)
        (char<=? . g$6106$dF01I)
        (char->integer . g$12341$dF01I)
        (ceiling . g$12340$dF01I)
        (call-with-values . g$12339$dF01I)
        (call/cc . g$12338$dF01I)
        (call-with-current-continuation . g$12337$dF01I)
        (cddddr . g$6018$dF01I)
        (cdddar . g$6017$dF01I)
        (cddadr . g$6016$dF01I)
        (cddaar . g$6015$dF01I)
        (cdaddr . g$6014$dF01I)
        (cdadar . g$6013$dF01I)
        (cdaadr . g$6012$dF01I)
        (cdaaar . g$6011$dF01I)
        (cadddr . g$6010$dF01I)
        (caddar . g$6009$dF01I)
        (cadadr . g$6008$dF01I)
        (cadaar . g$6007$dF01I)
        (caaddr . g$6006$dF01I)
        (caadar . g$6005$dF01I)
        (caaadr . g$6004$dF01I)
        (caaaar . g$6003$dF01I)
        (cdddr . g$6002$dF01I)
        (cddar . g$6001$dF01I)
        (cdadr . g$6000$dF01I)
        (cdaar . g$5999$dF01I)
        (caddr . g$5998$dF01I)
        (cadar . g$5997$dF01I)
        (caadr . g$5996$dF01I)
        (caaar . g$5995$dF01I)
        (cddr . g$5994$dF01I)
        (cdar . g$5993$dF01I)
        (cadr . g$5992$dF01I)
        (caar . g$5991$dF01I)
        (cdr . g$12336$dF01I)
        (car . g$12335$dF01I)
        (boolean? . g$12334$dF01I)
        (boolean=? . g$6068$dF01I)
        (atan . g$12333$dF01I)
        (assertion-violation . g$12332$dF01I)
        (asin . g$12331$dF01I)
        (apply . g$12330$dF01I)
        (append . g$12329$dF01I)
        (angle . g$12328$dF01I)
        (acos . g$12327$dF01I)
        (abs . g$12326$dF01I)
        (/ . g$12325$dF01I)
        (* . g$12324$dF01I)
        (- . g$12323$dF01I)
        (+ . g$12322$dF01I)
        (>= . g$12321$dF01I)
        (> . g$12320$dF01I)
        (= . g$12319$dF01I)
        (<= . g$12318$dF01I)
        (< . g$12317$dF01I)
        (unquote-splicing . g$12233$dF01I)
        (unquote . g$12232$dF01I)
        (_ . g$12231$dF01I)
        (else . g$12230$dF01I)
        (=> . g$12229$dF01I)
        (... . g$12228$dF01I)
        (assert . g$12227$dF01I)
        (or . g$12223$dF01I)
        (and . g$12222$dF01I)
        (cond . g$12220$dF01I)
        (let* . g$12219$dF01I)
        (let . g$12218$dF01I)
        (identifier-syntax . g$12217$dF01I)
        (quasiquote . g$12214$dF01I)
        (syntax-rules . g$12213$dF01I)
        (let-values . g$12209$dF01I)
        (let*-values . g$12208$dF01I)
        (case . g$12204$dF01I)
        (if . g$12200$dF01I)
        (letrec* . g$12199$dF01I)
        (letrec . g$12198$dF01I)
        (lambda . g$12195$dF01I)
        (quote . g$12192$dF01I)
        (letrec-syntax . g$12190$dF01I)
        (let-syntax . g$12189$dF01I)
        (set! . g$12188$dF01I)
        (begin . g$12184$dF01I)
        (define-syntax . g$12182$dF01I)
        (define . g$12181$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12793$dF01I
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5878$dF01I)
        (remv . g$5879$dF01I)
        (remp . g$5859$dF01I)
        (remq . g$5880$dF01I)
        (partition . g$5858$dF01I)
        (memv . g$5866$dF01I)
        (memq . g$5865$dF01I)
        (memp . g$5868$dF01I)
        (member . g$5867$dF01I)
        (exists . g$5872$dF01I)
        (for-all . g$5871$dF01I)
        (fold-right . g$5877$dF01I)
        (fold-left . g$5876$dF01I)
        (find . g$5857$dF01I)
        (filter . g$5860$dF01I)
        (cons* . g$5875$dF01I)
        (assv . g$5862$dF01I)
        (assq . g$5861$dF01I)
        (assp . g$5864$dF01I)
        (assoc . g$5863$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12794$dF01I
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7420$dF01I)
        (call-with-input-file . g$7419$dF01I)
        (write-char . g$7401$dF01I)
        (write . g$12631$dF01I)
        (with-output-to-file . g$7418$dF01I)
        (with-input-from-file . g$7417$dF01I)
        (read-char . g$7400$dF01I)
        (read . g$12630$dF01I)
        (peek-char . g$7399$dF01I)
        (open-output-file . g$12629$dF01I)
        (open-input-file . g$12628$dF01I)
        (newline . g$7421$dF01I)
        (display . g$12627$dF01I)
        (close-output-port . g$12626$dF01I)
        (close-input-port . g$12625$dF01I)
        (eof-object? . g$12624$dF01I)
        (eof-object . g$12623$dF01I)
        (current-error-port . g$12622$dF01I)
        (current-output-port . g$12621$dF01I)
        (current-input-port . g$12620$dF01I)
        (output-port? . g$12619$dF01I)
        (input-port? . g$12618$dF01I)
        (make-i/o-write-error . g$7241$dF01I)
        (make-i/o-read-error . g$7227$dF01I)
        (make-i/o-port-error . g$7346$dF01I)
        (make-i/o-invalid-position-error . g$7256$dF01I)
        (make-i/o-filename-error . g$7273$dF01I)
        (make-i/o-file-protection-error . g$7289$dF01I)
        (make-i/o-file-is-read-only-error . g$7303$dF01I)
        (make-i/o-file-does-not-exist-error . g$7331$dF01I)
        (make-i/o-file-already-exists-error . g$7317$dF01I)
        (make-i/o-error . g$7213$dF01I)
        (i/o-write-error? . g$7242$dF01I)
        (i/o-read-error? . g$7228$dF01I)
        (i/o-port-error? . g$7348$dF01I)
        (i/o-invalid-position-error? . g$7258$dF01I)
        (i/o-error-position . g$7259$dF01I)
        (i/o-filename-error? . g$7275$dF01I)
        (i/o-file-protection-error? . g$7290$dF01I)
        (i/o-file-is-read-only-error? . g$7304$dF01I)
        (i/o-file-does-not-exist-error? . g$7332$dF01I)
        (i/o-file-already-exists-error? . g$7318$dF01I)
        (i/o-error? . g$7214$dF01I)
        (i/o-error-port . g$7349$dF01I)
        (i/o-error-filename . g$7276$dF01I)
        (&i/o-port . g$12281$dF01I)
        (&i/o-file-does-not-exist . g$12280$dF01I)
        (&i/o-file-already-exists . g$12279$dF01I)
        (&i/o-file-is-read-only . g$12278$dF01I)
        (&i/o-file-protection . g$12277$dF01I)
        (&i/o-filename . g$12276$dF01I)
        (&i/o-invalid-position . g$12275$dF01I)
        (&i/o-write . g$12274$dF01I)
        (&i/o-read . g$12273$dF01I)
        (&i/o . g$12272$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12795$dF01I
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12578$dF01I)
        (utf32->string . g$12545$dF01I)
        (utf16->string . g$12544$dF01I)
        (utf8->string . g$12543$dF01I)
        (uint-list->bytevector . g$12542$dF01I)
        (u8-list->bytevector . g$12541$dF01I)
        (string->utf8 . g$12540$dF01I)
        (string->utf32 . g$12539$dF01I)
        (string->utf16 . g$12538$dF01I)
        (sint-list->bytevector . g$12537$dF01I)
        (native-endianness . g$6575$dF01I)
        (bytevector? . g$12536$dF01I)
        (bytevector=? . g$12535$dF01I)
        (bytevector-uint-set! . g$12534$dF01I)
        (bytevector-uint-ref . g$12533$dF01I)
        (bytevector-u8-set! . g$12532$dF01I)
        (bytevector-u8-ref . g$12531$dF01I)
        (bytevector-u64-set! . g$6596$dF01I)
        (bytevector-u64-ref . g$6592$dF01I)
        (bytevector-u64-native-set! . g$6598$dF01I)
        (bytevector-u64-native-ref . g$6594$dF01I)
        (bytevector-u32-set! . g$6588$dF01I)
        (bytevector-u32-ref . g$6584$dF01I)
        (bytevector-u32-native-set! . g$6590$dF01I)
        (bytevector-u32-native-ref . g$6586$dF01I)
        (bytevector-u16-set! . g$6580$dF01I)
        (bytevector-u16-ref . g$6576$dF01I)
        (bytevector-u16-native-set! . g$6582$dF01I)
        (bytevector-u16-native-ref . g$6578$dF01I)
        (bytevector-sint-set! . g$12530$dF01I)
        (bytevector-sint-ref . g$12529$dF01I)
        (bytevector-s8-set! . g$12528$dF01I)
        (bytevector-s8-ref . g$12527$dF01I)
        (bytevector-s64-set! . g$6597$dF01I)
        (bytevector-s64-ref . g$6593$dF01I)
        (bytevector-s64-native-set! . g$6599$dF01I)
        (bytevector-s64-native-ref . g$6595$dF01I)
        (bytevector-s32-set! . g$6589$dF01I)
        (bytevector-s32-ref . g$6585$dF01I)
        (bytevector-s32-native-set! . g$6591$dF01I)
        (bytevector-s32-native-ref . g$6587$dF01I)
        (bytevector-s16-set! . g$6581$dF01I)
        (bytevector-s16-ref . g$6577$dF01I)
        (bytevector-s16-native-set! . g$6583$dF01I)
        (bytevector-s16-native-ref . g$6579$dF01I)
        (bytevector-length . g$12526$dF01I)
        (bytevector-ieee-single-set! . g$12525$dF01I)
        (bytevector-ieee-single-ref . g$12524$dF01I)
        (bytevector-ieee-single-native-set! . g$6602$dF01I)
        (bytevector-ieee-single-native-ref . g$6600$dF01I)
        (bytevector-ieee-double-set! . g$12523$dF01I)
        (bytevector-ieee-double-ref . g$12522$dF01I)
        (bytevector-ieee-double-native-set! . g$6603$dF01I)
        (bytevector-ieee-double-native-ref . g$6601$dF01I)
        (bytevector-fill! . g$12521$dF01I)
        (bytevector-copy! . g$12520$dF01I)
        (bytevector-copy . g$12519$dF01I)
        (bytevector->uint-list . g$12518$dF01I)
        (bytevector->u8-list . g$12517$dF01I)
        (bytevector->sint-list . g$12516$dF01I)
        (endianness . g$12226$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12796$dF01I
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12681$dF01I)
        (string-titlecase . g$12680$dF01I)
        (string-normalize-nfkd . g$12679$dF01I)
        (string-normalize-nfkc . g$12678$dF01I)
        (string-normalize-nfd . g$12677$dF01I)
        (string-normalize-nfc . g$12676$dF01I)
        (string-foldcase . g$12675$dF01I)
        (string-downcase . g$12674$dF01I)
        (string-ci>? . g$6995$dF01I)
        (string-ci>=? . g$6997$dF01I)
        (string-ci=? . g$6993$dF01I)
        (string-ci<? . g$6994$dF01I)
        (string-ci<=? . g$6996$dF01I)
        (char-whitespace? . g$12673$dF01I)
        (char-upper-case? . g$12672$dF01I)
        (char-title-case? . g$12671$dF01I)
        (char-numeric? . g$12670$dF01I)
        (char-lower-case? . g$12669$dF01I)
        (char-general-category . g$12668$dF01I)
        (char-upcase . g$12667$dF01I)
        (char-titlecase . g$12666$dF01I)
        (char-foldcase . g$12665$dF01I)
        (char-downcase . g$12664$dF01I)
        (char-ci>? . g$7034$dF01I)
        (char-ci>=? . g$7036$dF01I)
        (char-ci=? . g$7032$dF01I)
        (char-ci<? . g$7033$dF01I)
        (char-ci<=? . g$7035$dF01I)
        (char-alphabetic? . g$12663$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12797$dF01I
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12553$dF01I)
        (raise-continuable . g$12552$dF01I)
        (raise . g$12551$dF01I)
        (guard . g$12241$dF01I)
        (else . g$12230$dF01I)
        (=> . g$12229$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12798$dF01I
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7096$dF01I)
        (bitwise-reverse-bit-field . g$12434$dF01I)
        (bitwise-length . g$12433$dF01I)
        (bitwise-if . g$7090$dF01I)
        (bitwise-first-bit-set . g$12432$dF01I)
        (bitwise-copy-bit-field . g$7093$dF01I)
        (bitwise-copy-bit . g$7091$dF01I)
        (bitwise-bit-set? . g$12431$dF01I)
        (bitwise-bit-field . g$7092$dF01I)
        (bitwise-bit-count . g$12430$dF01I)
        (bitwise-xor . g$12429$dF01I)
        (bitwise-ior . g$12428$dF01I)
        (bitwise-and . g$12427$dF01I)
        (bitwise-not . g$12426$dF01I)
        (bitwise-arithmetic-shift-right . g$7095$dF01I)
        (bitwise-arithmetic-shift-left . g$7094$dF01I)
        (bitwise-arithmetic-shift . g$12425$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12799$dF01I
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12469$dF01I)
        (fxxor . g$12468$dF01I)
        (fxrotate-bit-field . g$7131$dF01I)
        (fxreverse-bit-field . g$12467$dF01I)
        (fxpositive? . g$12466$dF01I)
        (fxodd? . g$12465$dF01I)
        (fxnot . g$12464$dF01I)
        (fxnegative? . g$12463$dF01I)
        (fxmod0 . g$12462$dF01I)
        (fxmod . g$12461$dF01I)
        (fxmin . g$12460$dF01I)
        (fxmax . g$12459$dF01I)
        (fxlength . g$12458$dF01I)
        (fxior . g$12457$dF01I)
        (fxif . g$7125$dF01I)
        (fxfirst-bit-set . g$12456$dF01I)
        (fxeven? . g$12455$dF01I)
        (fxdiv0-and-mod0 . g$12454$dF01I)
        (fxdiv0 . g$12453$dF01I)
        (fxdiv-and-mod . g$12452$dF01I)
        (fxdiv . g$12451$dF01I)
        (fxcopy-bit-field . g$7128$dF01I)
        (fxcopy-bit . g$7126$dF01I)
        (fxbit-set? . g$12450$dF01I)
        (fxbit-field . g$7127$dF01I)
        (fxbit-count . g$12449$dF01I)
        (fxarithmetic-shift-right . g$7130$dF01I)
        (fxarithmetic-shift-left . g$7129$dF01I)
        (fxarithmetic-shift . g$12448$dF01I)
        (fxand . g$12447$dF01I)
        (fx>? . g$12446$dF01I)
        (fx>=? . g$12445$dF01I)
        (fx=? . g$12444$dF01I)
        (fx<? . g$12443$dF01I)
        (fx<=? . g$12442$dF01I)
        (fx-/carry . g$7123$dF01I)
        (fx- . g$12441$dF01I)
        (fx+/carry . g$7124$dF01I)
        (fx+ . g$12440$dF01I)
        (fx*/carry . g$7122$dF01I)
        (fx* . g$12439$dF01I)
        (greatest-fixnum . g$12438$dF01I)
        (least-fixnum . g$12437$dF01I)
        (fixnum-width . g$12436$dF01I)
        (fixnum? . g$12435$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12800$dF01I
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7199$dF01I)
        (no-infinities-violation? . g$7185$dF01I)
        (make-no-nans-violation . g$7198$dF01I)
        (make-no-infinities-violation . g$7184$dF01I)
        (real->flonum . g$12515$dF01I)
        (flzero? . g$12514$dF01I)
        (fltruncate . g$12513$dF01I)
        (fltan . g$12512$dF01I)
        (flsqrt . g$12511$dF01I)
        (flsin . g$12510$dF01I)
        (flround . g$12509$dF01I)
        (flpositive? . g$12508$dF01I)
        (flonum? . g$12507$dF01I)
        (flodd? . g$12506$dF01I)
        (flnumerator . g$12505$dF01I)
        (flnegative? . g$12504$dF01I)
        (flnan? . g$12503$dF01I)
        (flmod0 . g$12502$dF01I)
        (flmod . g$12501$dF01I)
        (flmin . g$12500$dF01I)
        (flmax . g$12499$dF01I)
        (fllog . g$12498$dF01I)
        (flinteger? . g$12497$dF01I)
        (flinfinite? . g$12496$dF01I)
        (flfloor . g$12495$dF01I)
        (flfinite? . g$12494$dF01I)
        (flexpt . g$12493$dF01I)
        (flexp . g$12492$dF01I)
        (fleven? . g$12491$dF01I)
        (fldiv0-and-mod0 . g$12490$dF01I)
        (fldiv0 . g$12489$dF01I)
        (fldiv-and-mod . g$12488$dF01I)
        (fldiv . g$12487$dF01I)
        (fldenominator . g$12486$dF01I)
        (flcos . g$12485$dF01I)
        (flceiling . g$12484$dF01I)
        (flatan . g$12483$dF01I)
        (flasin . g$12482$dF01I)
        (flacos . g$12481$dF01I)
        (flabs . g$12480$dF01I)
        (fl>? . g$12479$dF01I)
        (fl>=? . g$12478$dF01I)
        (fl=? . g$12477$dF01I)
        (fl<? . g$12476$dF01I)
        (fl<=? . g$12475$dF01I)
        (fl/ . g$12474$dF01I)
        (fl- . g$12473$dF01I)
        (fl+ . g$12472$dF01I)
        (fl* . g$12471$dF01I)
        (fixnum->flonum . g$12470$dF01I)
        (&no-nans . g$12285$dF01I)
        (&no-infinities . g$12284$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12801$dF01I
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12643$dF01I)
        (string-ci-hash . g$12642$dF01I)
        (string-hash . g$12641$dF01I)
        (equal-hash . g$12640$dF01I)
        (hashtable-equivalence-function . g$12639$dF01I)
        (make-hashtable . g$12638$dF01I)
        (hashtable-hash-function . g$12637$dF01I)
        (make-eqv-hashtable . g$6537$dF01I)
        (make-eq-hashtable . g$6536$dF01I)
        (hashtable? . g$12636$dF01I)
        (hashtable-update! . g$6543$dF01I)
        (hashtable-size . g$6538$dF01I)
        (hashtable-set! . g$6540$dF01I)
        (hashtable-ref . g$6539$dF01I)
        (hashtable-mutable? . g$12635$dF01I)
        (hashtable-keys . g$12634$dF01I)
        (hashtable-entries . g$12633$dF01I)
        (hashtable-delete! . g$6541$dF01I)
        (hashtable-copy . g$12632$dF01I)
        (hashtable-contains? . g$6542$dF01I)
        (hashtable-clear! . g$6544$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12802$dF01I
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12624$dF01I)
        (eof-object . g$12623$dF01I)
        (current-error-port . g$12622$dF01I)
        (current-output-port . g$12621$dF01I)
        (current-input-port . g$12620$dF01I)
        (output-port? . g$12619$dF01I)
        (input-port? . g$12618$dF01I)
        (utf-8-codec . g$12617$dF01I)
        (utf-16-codec . g$12616$dF01I)
        (transcoder-error-handling-mode . g$12615$dF01I)
        (transcoder-eol-style . g$12614$dF01I)
        (transcoder-codec . g$12613$dF01I)
        (transcoded-port . g$12612$dF01I)
        (textual-port? . g$12611$dF01I)
        (string->bytevector . g$12610$dF01I)
        (standard-output-port . g$12609$dF01I)
        (standard-input-port . g$12608$dF01I)
        (standard-error-port . g$12607$dF01I)
        (set-port-position! . g$12606$dF01I)
        (put-u8 . g$12605$dF01I)
        (put-string . g$12604$dF01I)
        (put-datum . g$12603$dF01I)
        (put-char . g$12602$dF01I)
        (put-bytevector . g$12601$dF01I)
        (port? . g$7386$dF01I)
        (port-transcoder . g$12600$dF01I)
        (port-position . g$12599$dF01I)
        (port-has-set-port-position!? . g$12598$dF01I)
        (port-has-port-position? . g$12597$dF01I)
        (port-eof? . g$12596$dF01I)
        (output-port-buffer-mode . g$12595$dF01I)
        (open-string-output-port . g$7385$dF01I)
        (open-string-input-port . g$12594$dF01I)
        (open-file-output-port . g$12593$dF01I)
        (open-file-input/output-port . g$12592$dF01I)
        (open-file-input-port . g$12591$dF01I)
        (open-bytevector-output-port . g$12590$dF01I)
        (open-bytevector-input-port . g$12589$dF01I)
        (native-transcoder . g$12588$dF01I)
        (native-eol-style . g$12587$dF01I)
        (make-transcoder . g$12586$dF01I)
        (latin-1-codec . g$12585$dF01I)
        (make-i/o-write-error . g$7241$dF01I)
        (make-i/o-read-error . g$7227$dF01I)
        (make-i/o-port-error . g$7346$dF01I)
        (make-i/o-invalid-position-error . g$7256$dF01I)
        (make-i/o-filename-error . g$7273$dF01I)
        (make-i/o-file-protection-error . g$7289$dF01I)
        (make-i/o-file-is-read-only-error . g$7303$dF01I)
        (make-i/o-file-does-not-exist-error . g$7331$dF01I)
        (make-i/o-file-already-exists-error . g$7317$dF01I)
        (make-i/o-error . g$7213$dF01I)
        (make-i/o-encoding-error . g$7377$dF01I)
        (make-i/o-decoding-error . g$7362$dF01I)
        (make-custom-textual-output-port . g$12584$dF01I)
        (make-custom-textual-input/output-port . g$12583$dF01I)
        (make-custom-textual-input-port . g$12582$dF01I)
        (make-custom-binary-output-port . g$12581$dF01I)
        (make-custom-binary-input/output-port . g$12580$dF01I)
        (make-custom-binary-input-port . g$12579$dF01I)
        (lookahead-u8 . g$12577$dF01I)
        (lookahead-char . g$12576$dF01I)
        (i/o-write-error? . g$7242$dF01I)
        (i/o-read-error? . g$7228$dF01I)
        (i/o-port-error? . g$7348$dF01I)
        (i/o-invalid-position-error? . g$7258$dF01I)
        (i/o-error-position . g$7259$dF01I)
        (i/o-filename-error? . g$7275$dF01I)
        (i/o-file-protection-error? . g$7290$dF01I)
        (i/o-file-is-read-only-error? . g$7304$dF01I)
        (i/o-file-does-not-exist-error? . g$7332$dF01I)
        (i/o-file-already-exists-error? . g$7318$dF01I)
        (i/o-error? . g$7214$dF01I)
        (i/o-error-port . g$7349$dF01I)
        (i/o-error-filename . g$7276$dF01I)
        (i/o-encoding-error? . g$7379$dF01I)
        (i/o-encoding-error-char . g$7380$dF01I)
        (i/o-decoding-error? . g$7363$dF01I)
        (get-u8 . g$12575$dF01I)
        (get-string-n! . g$12574$dF01I)
        (get-string-n . g$12573$dF01I)
        (get-string-all . g$12572$dF01I)
        (get-line . g$12571$dF01I)
        (get-datum . g$12570$dF01I)
        (get-char . g$12569$dF01I)
        (get-bytevector-some . g$12568$dF01I)
        (get-bytevector-n! . g$12567$dF01I)
        (get-bytevector-n . g$12566$dF01I)
        (get-bytevector-all . g$12565$dF01I)
        (flush-output-port . g$12564$dF01I)
        (close-port . g$12563$dF01I)
        (call-with-string-output-port . g$7387$dF01I)
        (call-with-port . g$7388$dF01I)
        (call-with-bytevector-output-port . g$12562$dF01I)
        (bytevector->string . g$12561$dF01I)
        (buffer-mode? . g$12560$dF01I)
        (binary-port? . g$12559$dF01I)
        (&i/o-encoding . g$12283$dF01I)
        (&i/o-decoding . g$12282$dF01I)
        (&i/o-port . g$12281$dF01I)
        (&i/o-file-does-not-exist . g$12280$dF01I)
        (&i/o-file-already-exists . g$12279$dF01I)
        (&i/o-file-is-read-only . g$12278$dF01I)
        (&i/o-file-protection . g$12277$dF01I)
        (&i/o-filename . g$12276$dF01I)
        (&i/o-invalid-position . g$12275$dF01I)
        (&i/o-write . g$12274$dF01I)
        (&i/o-read . g$12273$dF01I)
        (&i/o . g$12272$dF01I)
        (error-handling-mode . g$12245$dF01I)
        (file-options . g$12244$dF01I)
        (buffer-mode . g$12243$dF01I)
        (eol-style . g$12242$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12803$dF01I
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7485$dF01I)
        (enum-set=? . g$7492$dF01I)
        (enum-set-universe . g$7486$dF01I)
        (enum-set-union . g$7493$dF01I)
        (enum-set-subset? . g$7491$dF01I)
        (enum-set-projection . g$7497$dF01I)
        (enum-set-member? . g$7490$dF01I)
        (enum-set-intersection . g$7494$dF01I)
        (enum-set-indexer . g$7487$dF01I)
        (enum-set-difference . g$7495$dF01I)
        (enum-set-constructor . g$7488$dF01I)
        (enum-set-complement . g$7496$dF01I)
        (enum-set->list . g$7489$dF01I)
        (define-enumeration . g$12256$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12804$dF01I
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6823$dF01I)
        (warning? . g$6734$dF01I)
        (violation? . g$6776$dF01I)
        (undefined-violation? . g$6900$dF01I)
        (syntax-violation? . g$6884$dF01I)
        (syntax-violation-subform . g$6886$dF01I)
        (syntax-violation-form . g$6885$dF01I)
        (syntax-violation . g$9161$dF01I)
        (simple-conditions . g$12550$dF01I)
        (serious-condition? . g$6748$dF01I)
        (non-continuable-violation? . g$6838$dF01I)
        (message-condition? . g$6719$dF01I)
        (make-who-condition . g$6821$dF01I)
        (make-warning . g$6733$dF01I)
        (make-violation . g$6775$dF01I)
        (make-undefined-violation . g$6899$dF01I)
        (make-syntax-violation . g$6881$dF01I)
        (make-serious-condition . g$6747$dF01I)
        (make-non-continuable-violation . g$6837$dF01I)
        (make-message-condition . g$6717$dF01I)
        (make-lexical-violation . g$6865$dF01I)
        (make-irritants-condition . g$6804$dF01I)
        (make-implementation-restriction-violation . g$6851$dF01I)
        (make-error . g$6761$dF01I)
        (make-assertion-violation . g$6789$dF01I)
        (lexical-violation? . g$6866$dF01I)
        (irritants-condition? . g$6806$dF01I)
        (implementation-restriction-violation? . g$6852$dF01I)
        (error? . g$6762$dF01I)
        (condition-who . g$6824$dF01I)
        (condition-predicate . g$12549$dF01I)
        (condition-message . g$6720$dF01I)
        (condition-irritants . g$6807$dF01I)
        (condition-accessor . g$12548$dF01I)
        (condition . g$12547$dF01I)
        (assertion-violation? . g$6790$dF01I)
        (condition? . g$12546$dF01I)
        (&non-continuable . g$12271$dF01I)
        (&undefined . g$12270$dF01I)
        (&syntax . g$12269$dF01I)
        (&lexical . g$12268$dF01I)
        (&implementation-restriction . g$12267$dF01I)
        (&who . g$12266$dF01I)
        (&irritants . g$12265$dF01I)
        (&assertion . g$12264$dF01I)
        (&violation . g$12263$dF01I)
        (&error . g$12262$dF01I)
        (&serious . g$12261$dF01I)
        (&warning . g$12260$dF01I)
        (&message . g$12259$dF01I)
        (&condition . g$12258$dF01I)
        (define-condition-type . g$12257$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12805$dF01I
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12655$dF01I)
        (record-type-uid . g$12654$dF01I)
        (record-type-sealed? . g$12653$dF01I)
        (record-type-parent . g$12652$dF01I)
        (record-type-opaque? . g$12651$dF01I)
        (record-type-name . g$12650$dF01I)
        (record-type-generative? . g$12649$dF01I)
        (record-type-field-names . g$12648$dF01I)
        (record-rtd . g$12647$dF01I)
        (record-field-mutable? . g$12646$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12806$dF01I
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12662$dF01I)
        (record-predicate . g$12661$dF01I)
        (record-mutator . g$12660$dF01I)
        (record-constructor . g$12659$dF01I)
        (record-accessor . g$12658$dF01I)
        (make-record-type-descriptor . g$12657$dF01I)
        (make-record-constructor-descriptor . g$12656$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12807$dF01I
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$12255$dF01I)
        (parent-rtd . g$12254$dF01I)
        (nongenerative . g$12253$dF01I)
        (opaque . g$12252$dF01I)
        (sealed . g$12251$dF01I)
        (protocol . g$12250$dF01I)
        (parent . g$12249$dF01I)
        (immutable . g$12248$dF01I)
        (mutable . g$12247$dF01I)
        (fields . g$12246$dF01I)
        (record-constructor-descriptor . g$12207$dF01I)
        (record-type-descriptor . g$12206$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7512$dF01I
      'g$12808$dF01I
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9033$dF01I)
        (&no-nans-rcd . g$12772$dF01I)
        (&no-nans-rtd . g$12771$dF01I)
        (&no-infinities-rcd . g$12770$dF01I)
        (&no-infinities-rtd . g$12769$dF01I)
        (&i/o-encoding-rcd . g$12768$dF01I)
        (&i/o-encoding-rtd . g$12767$dF01I)
        (&i/o-decoding-rcd . g$12766$dF01I)
        (&i/o-decoding-rtd . g$12765$dF01I)
        (&i/o-port-rcd . g$12764$dF01I)
        (&i/o-port-rtd . g$12763$dF01I)
        (&i/o-file-does-not-exist-rcd . g$12762$dF01I)
        (&i/o-file-does-not-exist-rtd . g$12761$dF01I)
        (&i/o-file-already-exists-rcd . g$12760$dF01I)
        (&i/o-file-already-exists-rtd . g$12759$dF01I)
        (&i/o-file-is-read-only-rcd . g$12758$dF01I)
        (&i/o-file-is-read-only-rtd . g$12757$dF01I)
        (&i/o-file-protection-rcd . g$12756$dF01I)
        (&i/o-file-protection-rtd . g$12755$dF01I)
        (&i/o-filename-rcd . g$12754$dF01I)
        (&i/o-filename-rtd . g$12753$dF01I)
        (&i/o-invalid-position-rcd . g$12752$dF01I)
        (&i/o-invalid-position-rtd . g$12751$dF01I)
        (&i/o-write-rcd . g$12750$dF01I)
        (&i/o-write-rtd . g$12749$dF01I)
        (&i/o-read-rcd . g$12748$dF01I)
        (&i/o-read-rtd . g$12747$dF01I)
        (&i/o-rcd . g$12746$dF01I)
        (&i/o-rtd . g$12745$dF01I)
        (&undefined-rcd . g$12744$dF01I)
        (&undefined-rtd . g$12743$dF01I)
        (&syntax-rcd . g$12742$dF01I)
        (&syntax-rtd . g$12741$dF01I)
        (&lexical-rcd . g$12740$dF01I)
        (&lexical-rtd . g$12739$dF01I)
        (&implementation-restriction-rcd . g$12738$dF01I)
        (&implementation-restriction-rtd . g$12737$dF01I)
        (&non-continuable-rcd . g$12736$dF01I)
        (&non-continuable-rtd . g$12735$dF01I)
        (&who-rcd . g$12734$dF01I)
        (&who-rtd . g$12733$dF01I)
        (&irritants-rcd . g$12732$dF01I)
        (&irritants-rtd . g$12731$dF01I)
        (&assertion-rcd . g$12730$dF01I)
        (&assertion-rtd . g$12729$dF01I)
        (&violation-rcd . g$12728$dF01I)
        (&violation-rtd . g$12727$dF01I)
        (&error-rcd . g$12726$dF01I)
        (&error-rtd . g$12725$dF01I)
        (&serious-rcd . g$12724$dF01I)
        (&serious-rtd . g$12723$dF01I)
        (&warning-rcd . g$12722$dF01I)
        (&warning-rtd . g$12721$dF01I)
        (&message-rcd . g$12720$dF01I)
        (&message-rtd . g$12719$dF01I)
        (&condition-rcd . g$12718$dF01I)
        (&condition-rtd . g$12717$dF01I)
        (library-letrec* . g$12716$dF01I)
        (annotation-stripped . g$12715$dF01I)
        (annotation-source . g$12714$dF01I)
        (annotation-expression . g$12713$dF01I)
        (annotation? . g$12712$dF01I)
        (read-annotated . g$12711$dF01I)
        (tanh . g$12710$dF01I)
        (cosh . g$12709$dF01I)
        (sinh . g$12708$dF01I)
        (make-guid . g$12707$dF01I)
        (unspecified? . g$12706$dF01I)
        (make-list . g$5856$dF01I)
        (last-pair . g$5855$dF01I)
        (load-r5rs . g$12705$dF01I)
        (license . g$12704$dF01I)
        (stacktrace . g$12703$dF01I)
        (ironscheme-build . g$12149$dF01I)
        (define-clr-class-internal . g$12702$dF01I)
        (clr-field-set!-internal . g$12701$dF01I)
        (clr-field-get-internal . g$12700$dF01I)
        (clr-cast-internal . g$12699$dF01I)
        (clr-call-internal . g$12698$dF01I)
        (clr-new-internal . g$12697$dF01I)
        (clr-new-array-internal . g$12696$dF01I)
        (clr-is-internal . g$12695$dF01I)
        (clr-reference-internal . g$12694$dF01I)
        (clr-using-internal . g$12693$dF01I)
        (syntax-error . g$9158$dF01I)
        (syntax-dispatch . g$9028$dF01I)
        (compile-core . g$12692$dF01I)
        (eval-core . g$12691$dF01I)
        (set-symbol-value! . g$12690$dF01I)
        (symbol-value . g$12689$dF01I)
        (symbol-value? . g$12688$dF01I)
        (ungensym . g$12687$dF01I)
        (gensym . g$12686$dF01I)
        (void . g$12685$dF01I)
        (load-serialized-library . g$12684$dF01I)
        (serialize-library . g$12683$dF01I)
        (compile-system-libraries . g$12151$dF01I)
        (compile->closure . g$12153$dF01I)
        (compile . g$12152$dF01I)
        (load . g$12148$dF01I)
        (interaction-environment . g$9168$dF01I)
        (char-ready? . g$12682$dF01I)
        (string-upcase . g$12681$dF01I)
        (string-titlecase . g$12680$dF01I)
        (string-normalize-nfkd . g$12679$dF01I)
        (string-normalize-nfkc . g$12678$dF01I)
        (string-normalize-nfd . g$12677$dF01I)
        (string-normalize-nfc . g$12676$dF01I)
        (string-foldcase . g$12675$dF01I)
        (string-downcase . g$12674$dF01I)
        (string-ci>? . g$6995$dF01I)
        (string-ci>=? . g$6997$dF01I)
        (string-ci=? . g$6993$dF01I)
        (string-ci<? . g$6994$dF01I)
        (string-ci<=? . g$6996$dF01I)
        (char-whitespace? . g$12673$dF01I)
        (char-upper-case? . g$12672$dF01I)
        (char-title-case? . g$12671$dF01I)
        (char-numeric? . g$12670$dF01I)
        (char-lower-case? . g$12669$dF01I)
        (char-general-category . g$12668$dF01I)
        (char-upcase . g$12667$dF01I)
        (char-titlecase . g$12666$dF01I)
        (char-foldcase . g$12665$dF01I)
        (char-downcase . g$12664$dF01I)
        (char-ci>? . g$7034$dF01I)
        (char-ci>=? . g$7036$dF01I)
        (char-ci=? . g$7032$dF01I)
        (char-ci<? . g$7033$dF01I)
        (char-ci<=? . g$7035$dF01I)
        (char-alphabetic? . g$12663$dF01I)
        (variable-transformer-procedure . g$8765$dF01I)
        (variable-transformer? . g$8764$dF01I)
        (make-variable-transformer . g$8763$dF01I)
        (identifier? . g$9162$dF01I)
        (generate-temporaries . g$9151$dF01I)
        (free-identifier=? . g$9152$dF01I)
        (syntax->datum . g$9164$dF01I)
        (datum->syntax . g$9163$dF01I)
        (bound-identifier=? . g$9153$dF01I)
        (record-type-descriptor? . g$12662$dF01I)
        (record-predicate . g$12661$dF01I)
        (record-mutator . g$12660$dF01I)
        (record-constructor . g$12659$dF01I)
        (record-accessor . g$12658$dF01I)
        (make-record-type-descriptor . g$12657$dF01I)
        (make-record-constructor-descriptor . g$12656$dF01I)
        (record? . g$12655$dF01I)
        (record-type-uid . g$12654$dF01I)
        (record-type-sealed? . g$12653$dF01I)
        (record-type-parent . g$12652$dF01I)
        (record-type-opaque? . g$12651$dF01I)
        (record-type-name . g$12650$dF01I)
        (record-type-generative? . g$12649$dF01I)
        (record-type-field-names . g$12648$dF01I)
        (record-rtd . g$12647$dF01I)
        (record-field-mutable? . g$12646$dF01I)
        (delete-file . g$6569$dF01I)
        (file-exists? . g$6568$dF01I)
        (vector-sort! . g$12645$dF01I)
        (vector-sort . g$12644$dF01I)
        (list-sort . g$6935$dF01I)
        (symbol-hash . g$12643$dF01I)
        (string-ci-hash . g$12642$dF01I)
        (string-hash . g$12641$dF01I)
        (equal-hash . g$12640$dF01I)
        (hashtable-equivalence-function . g$12639$dF01I)
        (make-hashtable . g$12638$dF01I)
        (hashtable-hash-function . g$12637$dF01I)
        (make-eqv-hashtable . g$6537$dF01I)
        (make-eq-hashtable . g$6536$dF01I)
        (hashtable? . g$12636$dF01I)
        (hashtable-update! . g$6543$dF01I)
        (hashtable-size . g$6538$dF01I)
        (hashtable-set! . g$6540$dF01I)
        (hashtable-ref . g$6539$dF01I)
        (hashtable-mutable? . g$12635$dF01I)
        (hashtable-keys . g$12634$dF01I)
        (hashtable-entries . g$12633$dF01I)
        (hashtable-delete! . g$6541$dF01I)
        (hashtable-copy . g$12632$dF01I)
        (hashtable-contains? . g$6542$dF01I)
        (hashtable-clear! . g$6544$dF01I)
        (call-with-output-file . g$7420$dF01I)
        (call-with-input-file . g$7419$dF01I)
        (write-char . g$7401$dF01I)
        (write . g$12631$dF01I)
        (with-output-to-file . g$7418$dF01I)
        (with-input-from-file . g$7417$dF01I)
        (read-char . g$7400$dF01I)
        (read . g$12630$dF01I)
        (peek-char . g$7399$dF01I)
        (open-output-file . g$12629$dF01I)
        (open-input-file . g$12628$dF01I)
        (newline . g$7421$dF01I)
        (display . g$12627$dF01I)
        (close-output-port . g$12626$dF01I)
        (close-input-port . g$12625$dF01I)
        (eof-object? . g$12624$dF01I)
        (eof-object . g$12623$dF01I)
        (current-error-port . g$12622$dF01I)
        (current-output-port . g$12621$dF01I)
        (current-input-port . g$12620$dF01I)
        (output-port? . g$12619$dF01I)
        (input-port? . g$12618$dF01I)
        (utf-8-codec . g$12617$dF01I)
        (utf-16-codec . g$12616$dF01I)
        (transcoder-error-handling-mode . g$12615$dF01I)
        (transcoder-eol-style . g$12614$dF01I)
        (transcoder-codec . g$12613$dF01I)
        (transcoded-port . g$12612$dF01I)
        (textual-port? . g$12611$dF01I)
        (string->bytevector . g$12610$dF01I)
        (standard-output-port . g$12609$dF01I)
        (standard-input-port . g$12608$dF01I)
        (standard-error-port . g$12607$dF01I)
        (set-port-position! . g$12606$dF01I)
        (put-u8 . g$12605$dF01I)
        (put-string . g$12604$dF01I)
        (put-datum . g$12603$dF01I)
        (put-char . g$12602$dF01I)
        (put-bytevector . g$12601$dF01I)
        (port? . g$7386$dF01I)
        (port-transcoder . g$12600$dF01I)
        (port-position . g$12599$dF01I)
        (port-has-set-port-position!? . g$12598$dF01I)
        (port-has-port-position? . g$12597$dF01I)
        (port-eof? . g$12596$dF01I)
        (output-port-buffer-mode . g$12595$dF01I)
        (open-string-output-port . g$7385$dF01I)
        (open-string-input-port . g$12594$dF01I)
        (open-file-output-port . g$12593$dF01I)
        (open-file-input/output-port . g$12592$dF01I)
        (open-file-input-port . g$12591$dF01I)
        (open-bytevector-output-port . g$12590$dF01I)
        (open-bytevector-input-port . g$12589$dF01I)
        (native-transcoder . g$12588$dF01I)
        (native-eol-style . g$12587$dF01I)
        (make-transcoder . g$12586$dF01I)
        (latin-1-codec . g$12585$dF01I)
        (make-i/o-write-error . g$7241$dF01I)
        (make-i/o-read-error . g$7227$dF01I)
        (make-i/o-port-error . g$7346$dF01I)
        (make-i/o-invalid-position-error . g$7256$dF01I)
        (make-i/o-filename-error . g$7273$dF01I)
        (make-i/o-file-protection-error . g$7289$dF01I)
        (make-i/o-file-is-read-only-error . g$7303$dF01I)
        (make-i/o-file-does-not-exist-error . g$7331$dF01I)
        (make-i/o-file-already-exists-error . g$7317$dF01I)
        (make-i/o-error . g$7213$dF01I)
        (make-i/o-encoding-error . g$7377$dF01I)
        (make-i/o-decoding-error . g$7362$dF01I)
        (make-custom-textual-output-port . g$12584$dF01I)
        (make-custom-textual-input/output-port . g$12583$dF01I)
        (make-custom-textual-input-port . g$12582$dF01I)
        (make-custom-binary-output-port . g$12581$dF01I)
        (make-custom-binary-input/output-port . g$12580$dF01I)
        (make-custom-binary-input-port . g$12579$dF01I)
        (make-bytevector . g$12578$dF01I)
        (lookahead-u8 . g$12577$dF01I)
        (lookahead-char . g$12576$dF01I)
        (i/o-write-error? . g$7242$dF01I)
        (i/o-read-error? . g$7228$dF01I)
        (i/o-port-error? . g$7348$dF01I)
        (i/o-invalid-position-error? . g$7258$dF01I)
        (i/o-error-position . g$7259$dF01I)
        (i/o-filename-error? . g$7275$dF01I)
        (i/o-file-protection-error? . g$7290$dF01I)
        (i/o-file-is-read-only-error? . g$7304$dF01I)
        (i/o-file-does-not-exist-error? . g$7332$dF01I)
        (i/o-file-already-exists-error? . g$7318$dF01I)
        (i/o-error? . g$7214$dF01I)
        (i/o-error-port . g$7349$dF01I)
        (i/o-error-filename . g$7276$dF01I)
        (i/o-encoding-error? . g$7379$dF01I)
        (i/o-encoding-error-char . g$7380$dF01I)
        (i/o-decoding-error? . g$7363$dF01I)
        (get-u8 . g$12575$dF01I)
        (get-string-n! . g$12574$dF01I)
        (get-string-n . g$12573$dF01I)
        (get-string-all . g$12572$dF01I)
        (get-line . g$12571$dF01I)
        (get-datum . g$12570$dF01I)
        (get-char . g$12569$dF01I)
        (get-bytevector-some . g$12568$dF01I)
        (get-bytevector-n! . g$12567$dF01I)
        (get-bytevector-n . g$12566$dF01I)
        (get-bytevector-all . g$12565$dF01I)
        (flush-output-port . g$12564$dF01I)
        (close-port . g$12563$dF01I)
        (call-with-string-output-port . g$7387$dF01I)
        (call-with-port . g$7388$dF01I)
        (call-with-bytevector-output-port . g$12562$dF01I)
        (bytevector->string . g$12561$dF01I)
        (buffer-mode? . g$12560$dF01I)
        (binary-port? . g$12559$dF01I)
        (scheme-report-environment . g$9141$dF01I)
        (quotient . g$6914$dF01I)
        (null-environment . g$9140$dF01I)
        (remainder . g$6915$dF01I)
        (modulo . g$6916$dF01I)
        (inexact->exact . g$6911$dF01I)
        (force . g$6918$dF01I)
        (exact->inexact . g$6912$dF01I)
        (exit . g$12558$dF01I)
        (command-line . g$12145$dF01I)
        (string-fill! . g$12557$dF01I)
        (string-set! . g$12556$dF01I)
        (set-cdr! . g$12555$dF01I)
        (set-car! . g$12554$dF01I)
        (remove . g$5878$dF01I)
        (remv . g$5879$dF01I)
        (remp . g$5859$dF01I)
        (remq . g$5880$dF01I)
        (partition . g$5858$dF01I)
        (memv . g$5866$dF01I)
        (memq . g$5865$dF01I)
        (memp . g$5868$dF01I)
        (member . g$5867$dF01I)
        (exists . g$5872$dF01I)
        (for-all . g$5871$dF01I)
        (fold-right . g$5877$dF01I)
        (fold-left . g$5876$dF01I)
        (find . g$5857$dF01I)
        (filter . g$5860$dF01I)
        (cons* . g$5875$dF01I)
        (assv . g$5862$dF01I)
        (assq . g$5861$dF01I)
        (assp . g$5864$dF01I)
        (assoc . g$5863$dF01I)
        (with-exception-handler . g$12553$dF01I)
        (raise-continuable . g$12552$dF01I)
        (raise . g$12551$dF01I)
        (eval . g$9143$dF01I)
        (environment . g$9139$dF01I)
        (make-enumeration . g$7485$dF01I)
        (enum-set=? . g$7492$dF01I)
        (enum-set-universe . g$7486$dF01I)
        (enum-set-union . g$7493$dF01I)
        (enum-set-subset? . g$7491$dF01I)
        (enum-set-projection . g$7497$dF01I)
        (enum-set-member? . g$7490$dF01I)
        (enum-set-intersection . g$7494$dF01I)
        (enum-set-indexer . g$7487$dF01I)
        (enum-set-difference . g$7495$dF01I)
        (enum-set-constructor . g$7488$dF01I)
        (enum-set-complement . g$7496$dF01I)
        (enum-set->list . g$7489$dF01I)
        (who-condition? . g$6823$dF01I)
        (warning? . g$6734$dF01I)
        (violation? . g$6776$dF01I)
        (undefined-violation? . g$6900$dF01I)
        (syntax-violation? . g$6884$dF01I)
        (syntax-violation-subform . g$6886$dF01I)
        (syntax-violation-form . g$6885$dF01I)
        (syntax-violation . g$9161$dF01I)
        (simple-conditions . g$12550$dF01I)
        (serious-condition? . g$6748$dF01I)
        (non-continuable-violation? . g$6838$dF01I)
        (message-condition? . g$6719$dF01I)
        (make-who-condition . g$6821$dF01I)
        (make-warning . g$6733$dF01I)
        (make-violation . g$6775$dF01I)
        (make-undefined-violation . g$6899$dF01I)
        (make-syntax-violation . g$6881$dF01I)
        (make-serious-condition . g$6747$dF01I)
        (make-non-continuable-violation . g$6837$dF01I)
        (make-message-condition . g$6717$dF01I)
        (make-lexical-violation . g$6865$dF01I)
        (make-irritants-condition . g$6804$dF01I)
        (make-implementation-restriction-violation . g$6851$dF01I)
        (make-error . g$6761$dF01I)
        (make-assertion-violation . g$6789$dF01I)
        (lexical-violation? . g$6866$dF01I)
        (irritants-condition? . g$6806$dF01I)
        (implementation-restriction-violation? . g$6852$dF01I)
        (error? . g$6762$dF01I)
        (condition-who . g$6824$dF01I)
        (condition-predicate . g$12549$dF01I)
        (condition-message . g$6720$dF01I)
        (condition-irritants . g$6807$dF01I)
        (condition-accessor . g$12548$dF01I)
        (condition . g$12547$dF01I)
        (assertion-violation? . g$6790$dF01I)
        (condition? . g$12546$dF01I)
        (utf32->string . g$12545$dF01I)
        (utf16->string . g$12544$dF01I)
        (utf8->string . g$12543$dF01I)
        (uint-list->bytevector . g$12542$dF01I)
        (u8-list->bytevector . g$12541$dF01I)
        (string->utf8 . g$12540$dF01I)
        (string->utf32 . g$12539$dF01I)
        (string->utf16 . g$12538$dF01I)
        (sint-list->bytevector . g$12537$dF01I)
        (native-endianness . g$6575$dF01I)
        (bytevector? . g$12536$dF01I)
        (bytevector=? . g$12535$dF01I)
        (bytevector-uint-set! . g$12534$dF01I)
        (bytevector-uint-ref . g$12533$dF01I)
        (bytevector-u8-set! . g$12532$dF01I)
        (bytevector-u8-ref . g$12531$dF01I)
        (bytevector-u64-set! . g$6596$dF01I)
        (bytevector-u64-ref . g$6592$dF01I)
        (bytevector-u64-native-set! . g$6598$dF01I)
        (bytevector-u64-native-ref . g$6594$dF01I)
        (bytevector-u32-set! . g$6588$dF01I)
        (bytevector-u32-ref . g$6584$dF01I)
        (bytevector-u32-native-set! . g$6590$dF01I)
        (bytevector-u32-native-ref . g$6586$dF01I)
        (bytevector-u16-set! . g$6580$dF01I)
        (bytevector-u16-ref . g$6576$dF01I)
        (bytevector-u16-native-set! . g$6582$dF01I)
        (bytevector-u16-native-ref . g$6578$dF01I)
        (bytevector-sint-set! . g$12530$dF01I)
        (bytevector-sint-ref . g$12529$dF01I)
        (bytevector-s8-set! . g$12528$dF01I)
        (bytevector-s8-ref . g$12527$dF01I)
        (bytevector-s64-set! . g$6597$dF01I)
        (bytevector-s64-ref . g$6593$dF01I)
        (bytevector-s64-native-set! . g$6599$dF01I)
        (bytevector-s64-native-ref . g$6595$dF01I)
        (bytevector-s32-set! . g$6589$dF01I)
        (bytevector-s32-ref . g$6585$dF01I)
        (bytevector-s32-native-set! . g$6591$dF01I)
        (bytevector-s32-native-ref . g$6587$dF01I)
        (bytevector-s16-set! . g$6581$dF01I)
        (bytevector-s16-ref . g$6577$dF01I)
        (bytevector-s16-native-set! . g$6583$dF01I)
        (bytevector-s16-native-ref . g$6579$dF01I)
        (bytevector-length . g$12526$dF01I)
        (bytevector-ieee-single-set! . g$12525$dF01I)
        (bytevector-ieee-single-ref . g$12524$dF01I)
        (bytevector-ieee-single-native-set! . g$6602$dF01I)
        (bytevector-ieee-single-native-ref . g$6600$dF01I)
        (bytevector-ieee-double-set! . g$12523$dF01I)
        (bytevector-ieee-double-ref . g$12522$dF01I)
        (bytevector-ieee-double-native-set! . g$6603$dF01I)
        (bytevector-ieee-double-native-ref . g$6601$dF01I)
        (bytevector-fill! . g$12521$dF01I)
        (bytevector-copy! . g$12520$dF01I)
        (bytevector-copy . g$12519$dF01I)
        (bytevector->uint-list . g$12518$dF01I)
        (bytevector->u8-list . g$12517$dF01I)
        (bytevector->sint-list . g$12516$dF01I)
        (no-nans-violation? . g$7199$dF01I)
        (no-infinities-violation? . g$7185$dF01I)
        (make-no-nans-violation . g$7198$dF01I)
        (make-no-infinities-violation . g$7184$dF01I)
        (real->flonum . g$12515$dF01I)
        (flzero? . g$12514$dF01I)
        (fltruncate . g$12513$dF01I)
        (fltan . g$12512$dF01I)
        (flsqrt . g$12511$dF01I)
        (flsin . g$12510$dF01I)
        (flround . g$12509$dF01I)
        (flpositive? . g$12508$dF01I)
        (flonum? . g$12507$dF01I)
        (flodd? . g$12506$dF01I)
        (flnumerator . g$12505$dF01I)
        (flnegative? . g$12504$dF01I)
        (flnan? . g$12503$dF01I)
        (flmod0 . g$12502$dF01I)
        (flmod . g$12501$dF01I)
        (flmin . g$12500$dF01I)
        (flmax . g$12499$dF01I)
        (fllog . g$12498$dF01I)
        (flinteger? . g$12497$dF01I)
        (flinfinite? . g$12496$dF01I)
        (flfloor . g$12495$dF01I)
        (flfinite? . g$12494$dF01I)
        (flexpt . g$12493$dF01I)
        (flexp . g$12492$dF01I)
        (fleven? . g$12491$dF01I)
        (fldiv0-and-mod0 . g$12490$dF01I)
        (fldiv0 . g$12489$dF01I)
        (fldiv-and-mod . g$12488$dF01I)
        (fldiv . g$12487$dF01I)
        (fldenominator . g$12486$dF01I)
        (flcos . g$12485$dF01I)
        (flceiling . g$12484$dF01I)
        (flatan . g$12483$dF01I)
        (flasin . g$12482$dF01I)
        (flacos . g$12481$dF01I)
        (flabs . g$12480$dF01I)
        (fl>? . g$12479$dF01I)
        (fl>=? . g$12478$dF01I)
        (fl=? . g$12477$dF01I)
        (fl<? . g$12476$dF01I)
        (fl<=? . g$12475$dF01I)
        (fl/ . g$12474$dF01I)
        (fl- . g$12473$dF01I)
        (fl+ . g$12472$dF01I)
        (fl* . g$12471$dF01I)
        (fixnum->flonum . g$12470$dF01I)
        (fxzero? . g$12469$dF01I)
        (fxxor . g$12468$dF01I)
        (fxrotate-bit-field . g$7131$dF01I)
        (fxreverse-bit-field . g$12467$dF01I)
        (fxpositive? . g$12466$dF01I)
        (fxodd? . g$12465$dF01I)
        (fxnot . g$12464$dF01I)
        (fxnegative? . g$12463$dF01I)
        (fxmod0 . g$12462$dF01I)
        (fxmod . g$12461$dF01I)
        (fxmin . g$12460$dF01I)
        (fxmax . g$12459$dF01I)
        (fxlength . g$12458$dF01I)
        (fxior . g$12457$dF01I)
        (fxif . g$7125$dF01I)
        (fxfirst-bit-set . g$12456$dF01I)
        (fxeven? . g$12455$dF01I)
        (fxdiv0-and-mod0 . g$12454$dF01I)
        (fxdiv0 . g$12453$dF01I)
        (fxdiv-and-mod . g$12452$dF01I)
        (fxdiv . g$12451$dF01I)
        (fxcopy-bit-field . g$7128$dF01I)
        (fxcopy-bit . g$7126$dF01I)
        (fxbit-set? . g$12450$dF01I)
        (fxbit-field . g$7127$dF01I)
        (fxbit-count . g$12449$dF01I)
        (fxarithmetic-shift-right . g$7130$dF01I)
        (fxarithmetic-shift-left . g$7129$dF01I)
        (fxarithmetic-shift . g$12448$dF01I)
        (fxand . g$12447$dF01I)
        (fx>? . g$12446$dF01I)
        (fx>=? . g$12445$dF01I)
        (fx=? . g$12444$dF01I)
        (fx<? . g$12443$dF01I)
        (fx<=? . g$12442$dF01I)
        (fx-/carry . g$7123$dF01I)
        (fx- . g$12441$dF01I)
        (fx+/carry . g$7124$dF01I)
        (fx+ . g$12440$dF01I)
        (fx*/carry . g$7122$dF01I)
        (fx* . g$12439$dF01I)
        (greatest-fixnum . g$12438$dF01I)
        (least-fixnum . g$12437$dF01I)
        (fixnum-width . g$12436$dF01I)
        (fixnum? . g$12435$dF01I)
        (bitwise-rotate-bit-field . g$7096$dF01I)
        (bitwise-reverse-bit-field . g$12434$dF01I)
        (bitwise-length . g$12433$dF01I)
        (bitwise-if . g$7090$dF01I)
        (bitwise-first-bit-set . g$12432$dF01I)
        (bitwise-copy-bit-field . g$7093$dF01I)
        (bitwise-copy-bit . g$7091$dF01I)
        (bitwise-bit-set? . g$12431$dF01I)
        (bitwise-bit-field . g$7092$dF01I)
        (bitwise-bit-count . g$12430$dF01I)
        (bitwise-xor . g$12429$dF01I)
        (bitwise-ior . g$12428$dF01I)
        (bitwise-and . g$12427$dF01I)
        (bitwise-not . g$12426$dF01I)
        (bitwise-arithmetic-shift-right . g$7095$dF01I)
        (bitwise-arithmetic-shift-left . g$7094$dF01I)
        (bitwise-arithmetic-shift . g$12425$dF01I)
        (zero? . g$6021$dF01I)
        (vector? . g$12424$dF01I)
        (vector-set! . g$12423$dF01I)
        (vector-ref . g$12422$dF01I)
        (vector-map . g$12421$dF01I)
        (vector-length . g$12420$dF01I)
        (vector-for-each . g$12419$dF01I)
        (vector-fill! . g$12418$dF01I)
        (vector->list . g$12417$dF01I)
        (vector . g$12416$dF01I)
        (values . g$12415$dF01I)
        (truncate . g$12414$dF01I)
        (tan . g$12413$dF01I)
        (symbol? . g$12412$dF01I)
        (symbol=? . g$6067$dF01I)
        (symbol->string . g$12411$dF01I)
        (substring . g$12410$dF01I)
        (string? . g$12409$dF01I)
        (string>? . g$6064$dF01I)
        (string>=? . g$6066$dF01I)
        (string=? . g$6062$dF01I)
        (string<? . g$6063$dF01I)
        (string<=? . g$6065$dF01I)
        (string-ref . g$12408$dF01I)
        (string-length . g$12407$dF01I)
        (string-for-each . g$12406$dF01I)
        (string-copy . g$12405$dF01I)
        (string-append . g$12404$dF01I)
        (string->symbol . g$12403$dF01I)
        (string->number . g$12402$dF01I)
        (string->list . g$12401$dF01I)
        (string . g$12400$dF01I)
        (sqrt . g$12399$dF01I)
        (sin . g$12398$dF01I)
        (round . g$12397$dF01I)
        (reverse . g$12396$dF01I)
        (real? . g$12395$dF01I)
        (real-valued? . g$12394$dF01I)
        (real-part . g$12393$dF01I)
        (rationalize . g$6108$dF01I)
        (rational? . g$12392$dF01I)
        (rational-valued? . g$12391$dF01I)
        (procedure? . g$12390$dF01I)
        (positive? . g$6019$dF01I)
        (pair? . g$12389$dF01I)
        (odd? . g$6023$dF01I)
        (numerator . g$12388$dF01I)
        (number? . g$12387$dF01I)
        (number->string . g$12386$dF01I)
        (null? . g$12385$dF01I)
        (not . g$12384$dF01I)
        (negative? . g$6020$dF01I)
        (nan? . g$12383$dF01I)
        (min . g$6025$dF01I)
        (max . g$6024$dF01I)
        (map . g$5873$dF01I)
        (make-vector . g$12382$dF01I)
        (make-string . g$12381$dF01I)
        (make-rectangular . g$12380$dF01I)
        (make-polar . g$12379$dF01I)
        (magnitude . g$12378$dF01I)
        (log . g$12377$dF01I)
        (list? . g$12376$dF01I)
        (list-tail . g$5853$dF01I)
        (list-ref . g$5854$dF01I)
        (list->vector . g$12375$dF01I)
        (list->string . g$12374$dF01I)
        (list . g$12373$dF01I)
        (length . g$12372$dF01I)
        (lcm . g$6027$dF01I)
        (integer? . g$12371$dF01I)
        (integer-valued? . g$12370$dF01I)
        (integer->char . g$12369$dF01I)
        (infinite? . g$12368$dF01I)
        (inexact? . g$12367$dF01I)
        (inexact . g$12366$dF01I)
        (imag-part . g$12365$dF01I)
        (gcd . g$6026$dF01I)
        (for-each . g$5874$dF01I)
        (floor . g$12364$dF01I)
        (finite? . g$12363$dF01I)
        (expt . g$12362$dF01I)
        (exp . g$12361$dF01I)
        (exact? . g$12360$dF01I)
        (exact-integer-sqrt . g$12359$dF01I)
        (exact . g$12358$dF01I)
        (even? . g$6022$dF01I)
        (error . g$12357$dF01I)
        (eqv? . g$12356$dF01I)
        (equal? . g$12355$dF01I)
        (eq? . g$12354$dF01I)
        (dynamic-wind . g$12353$dF01I)
        (div0-and-mod0 . g$12352$dF01I)
        (mod0 . g$12351$dF01I)
        (div0 . g$12350$dF01I)
        (div-and-mod . g$12349$dF01I)
        (mod . g$12348$dF01I)
        (div . g$12347$dF01I)
        (denominator . g$12346$dF01I)
        (cos . g$12345$dF01I)
        (cons . g$12344$dF01I)
        (complex? . g$12343$dF01I)
        (char? . g$12342$dF01I)
        (char>? . g$6105$dF01I)
        (char>=? . g$6107$dF01I)
        (char=? . g$6103$dF01I)
        (char<? . g$6104$dF01I)
        (char<=? . g$6106$dF01I)
        (char->integer . g$12341$dF01I)
        (ceiling . g$12340$dF01I)
        (call-with-values . g$12339$dF01I)
        (call/cc . g$12338$dF01I)
        (call-with-current-continuation . g$12337$dF01I)
        (cddddr . g$6018$dF01I)
        (cdddar . g$6017$dF01I)
        (cddadr . g$6016$dF01I)
        (cddaar . g$6015$dF01I)
        (cdaddr . g$6014$dF01I)
        (cdadar . g$6013$dF01I)
        (cdaadr . g$6012$dF01I)
        (cdaaar . g$6011$dF01I)
        (cadddr . g$6010$dF01I)
        (caddar . g$6009$dF01I)
        (cadadr . g$6008$dF01I)
        (cadaar . g$6007$dF01I)
        (caaddr . g$6006$dF01I)
        (caadar . g$6005$dF01I)
        (caaadr . g$6004$dF01I)
        (caaaar . g$6003$dF01I)
        (cdddr . g$6002$dF01I)
        (cddar . g$6001$dF01I)
        (cdadr . g$6000$dF01I)
        (cdaar . g$5999$dF01I)
        (caddr . g$5998$dF01I)
        (cadar . g$5997$dF01I)
        (caadr . g$5996$dF01I)
        (caaar . g$5995$dF01I)
        (cddr . g$5994$dF01I)
        (cdar . g$5993$dF01I)
        (cadr . g$5992$dF01I)
        (caar . g$5991$dF01I)
        (cdr . g$12336$dF01I)
        (car . g$12335$dF01I)
        (boolean? . g$12334$dF01I)
        (boolean=? . g$6068$dF01I)
        (atan . g$12333$dF01I)
        (assertion-violation . g$12332$dF01I)
        (asin . g$12331$dF01I)
        (apply . g$12330$dF01I)
        (append . g$12329$dF01I)
        (angle . g$12328$dF01I)
        (acos . g$12327$dF01I)
        (abs . g$12326$dF01I)
        (/ . g$12325$dF01I)
        (* . g$12324$dF01I)
        (- . g$12323$dF01I)
        (+ . g$12322$dF01I)
        (>= . g$12321$dF01I)
        (> . g$12320$dF01I)
        (= . g$12319$dF01I)
        (<= . g$12318$dF01I)
        (< . g$12317$dF01I)
        (make-record-printer . g$12316$dF01I)
        (eqv-hash . g$12315$dF01I)
        (reverse! . g$12314$dF01I)
        (deserialize-port . g$12313$dF01I)
        (serialize-port . g$12312$dF01I)
        (enum-set? . g$7460$dF01I)
        (make-promise . g$6917$dF01I)
        (load/args . g$12147$dF01I)
        (printf . g$7571$dF01I)
        (fprintf . g$7572$dF01I)
        (format . g$7573$dF01I)
        (procedure-form . g$12311$dF01I)
        (procedure-environment . g$12310$dF01I)
        (procedure-name . g$12309$dF01I)
        (procedure-arity . g$12308$dF01I)
        (gc-collect . g$12307$dF01I)
        (clr-type? . g$12306$dF01I)
        (get-clr-type . g$12305$dF01I)
        (get-command-line . g$12304$dF01I)
        (vector-append . g$12303$dF01I)
        (vector-filter . g$12302$dF01I)
        (vector-reverse! . g$12301$dF01I)
        (vector-contains? . g$12300$dF01I)
        (vector-index-of . g$12299$dF01I)
        (vector-copy . g$12298$dF01I)
        (vector-binary-search . g$12297$dF01I)
        (string-ci-compare . g$12296$dF01I)
        (string-compare . g$12295$dF01I)
        (string-format . g$12294$dF01I)
        (trace-printer . g$12144$dF01I)
        (make-traced-procedure . g$12293$dF01I)
        (make-traced-macro . g$7593$dF01I)
        (assertion-error . g$9157$dF01I)
        (time-it . g$12292$dF01I)
        (make-parameter . g$7862$dF01I)
        (library-locator . g$12291$dF01I)
        (get-library-paths . g$12290$dF01I)
        (open-tcp-input/output-port . g$12289$dF01I)
        (hashtable-for-each . g$12288$dF01I)
        (hashtable-map . g$12287$dF01I)
        (environment-bindings . g$9135$dF01I)
        (environment-symbols . g$9138$dF01I)
        (interaction-environment-symbols . g$9134$dF01I)
        (optimization-level . g$12286$dF01I)
        (library-path . g$8317$dF01I)
        (expand->core . g$9144$dF01I)
        (expand . g$9142$dF01I)
        (convert->cps . g$7648$dF01I)
        (parse->cps . g$7647$dF01I)
        (&no-nans . g$12285$dF01I)
        (&no-infinities . g$12284$dF01I)
        (&i/o-encoding . g$12283$dF01I)
        (&i/o-decoding . g$12282$dF01I)
        (&i/o-port . g$12281$dF01I)
        (&i/o-file-does-not-exist . g$12280$dF01I)
        (&i/o-file-already-exists . g$12279$dF01I)
        (&i/o-file-is-read-only . g$12278$dF01I)
        (&i/o-file-protection . g$12277$dF01I)
        (&i/o-filename . g$12276$dF01I)
        (&i/o-invalid-position . g$12275$dF01I)
        (&i/o-write . g$12274$dF01I)
        (&i/o-read . g$12273$dF01I)
        (&i/o . g$12272$dF01I)
        (&non-continuable . g$12271$dF01I)
        (&undefined . g$12270$dF01I)
        (&syntax . g$12269$dF01I)
        (&lexical . g$12268$dF01I)
        (&implementation-restriction . g$12267$dF01I)
        (&who . g$12266$dF01I)
        (&irritants . g$12265$dF01I)
        (&assertion . g$12264$dF01I)
        (&violation . g$12263$dF01I)
        (&error . g$12262$dF01I)
        (&serious . g$12261$dF01I)
        (&warning . g$12260$dF01I)
        (&message . g$12259$dF01I)
        (&condition . g$12258$dF01I)
        (define-condition-type . g$12257$dF01I)
        (define-enumeration . g$12256$dF01I)
        (define-record-type . g$12255$dF01I)
        (parent-rtd . g$12254$dF01I)
        (nongenerative . g$12253$dF01I)
        (opaque . g$12252$dF01I)
        (sealed . g$12251$dF01I)
        (protocol . g$12250$dF01I)
        (parent . g$12249$dF01I)
        (immutable . g$12248$dF01I)
        (mutable . g$12247$dF01I)
        (fields . g$12246$dF01I)
        (error-handling-mode . g$12245$dF01I)
        (file-options . g$12244$dF01I)
        (buffer-mode . g$12243$dF01I)
        (eol-style . g$12242$dF01I)
        (guard . g$12241$dF01I)
        (trace-letrec-syntax . g$12240$dF01I)
        (trace-let-syntax . g$12239$dF01I)
        (trace-define-syntax . g$12238$dF01I)
        (trace-define . g$12237$dF01I)
        (trace-lambda . g$12236$dF01I)
        (unsyntax-splicing . g$12235$dF01I)
        (unsyntax . g$12234$dF01I)
        (unquote-splicing . g$12233$dF01I)
        (unquote . g$12232$dF01I)
        (_ . g$12231$dF01I)
        (else . g$12230$dF01I)
        (=> . g$12229$dF01I)
        (... . g$12228$dF01I)
        (assert . g$12227$dF01I)
        (endianness . g$12226$dF01I)
        (delay . g$12225$dF01I)
        (time . g$12224$dF01I)
        (or . g$12223$dF01I)
        (and . g$12222$dF01I)
        (do . g$12221$dF01I)
        (cond . g$12220$dF01I)
        (let* . g$12219$dF01I)
        (let . g$12218$dF01I)
        (identifier-syntax . g$12217$dF01I)
        (with-syntax . g$12216$dF01I)
        (quasisyntax . g$12215$dF01I)
        (quasiquote . g$12214$dF01I)
        (syntax-rules . g$12213$dF01I)
        (include-into . g$12212$dF01I)
        (include . g$12211$dF01I)
        (define-struct . g$12210$dF01I)
        (let-values . g$12209$dF01I)
        (let*-values . g$12208$dF01I)
        (record-constructor-descriptor . g$12207$dF01I)
        (record-type-descriptor . g$12206$dF01I)
        (fluid-let-syntax . g$12205$dF01I)
        (case . g$12204$dF01I)
        (parameterize . g$12203$dF01I)
        (unless . g$12202$dF01I)
        (when . g$12201$dF01I)
        (if . g$12200$dF01I)
        (letrec* . g$12199$dF01I)
        (letrec . g$12198$dF01I)
        (type-descriptor . g$12197$dF01I)
        (case-lambda . g$12196$dF01I)
        (lambda . g$12195$dF01I)
        (syntax . g$12194$dF01I)
        (syntax-case . g$12193$dF01I)
        (quote . g$12192$dF01I)
        (foreign-call . g$12191$dF01I)
        (letrec-syntax . g$12190$dF01I)
        (let-syntax . g$12189$dF01I)
        (set! . g$12188$dF01I)
        (export . g$12187$dF01I)
        (import . g$12186$dF01I)
        (library . g$12185$dF01I)
        (begin . g$12184$dF01I)
        (module . g$12183$dF01I)
        (define-syntax . g$12182$dF01I)
        (define . g$12181$dF01I))
      '((g$9033$dF01I core-prim . ellipsis-map)
        (g$12772$dF01I core-prim . &no-nans-rcd)
        (g$12771$dF01I core-prim . &no-nans-rtd)
        (g$12770$dF01I core-prim . &no-infinities-rcd)
        (g$12769$dF01I core-prim . &no-infinities-rtd)
        (g$12768$dF01I core-prim . &i/o-encoding-rcd)
        (g$12767$dF01I core-prim . &i/o-encoding-rtd)
        (g$12766$dF01I core-prim . &i/o-decoding-rcd)
        (g$12765$dF01I core-prim . &i/o-decoding-rtd)
        (g$12764$dF01I core-prim . &i/o-port-rcd)
        (g$12763$dF01I core-prim . &i/o-port-rtd)
        (g$12762$dF01I core-prim . &i/o-file-does-not-exist-rcd)
        (g$12761$dF01I core-prim . &i/o-file-does-not-exist-rtd)
        (g$12760$dF01I core-prim . &i/o-file-already-exists-rcd)
        (g$12759$dF01I core-prim . &i/o-file-already-exists-rtd)
        (g$12758$dF01I core-prim . &i/o-file-is-read-only-rcd)
        (g$12757$dF01I core-prim . &i/o-file-is-read-only-rtd)
        (g$12756$dF01I core-prim . &i/o-file-protection-rcd)
        (g$12755$dF01I core-prim . &i/o-file-protection-rtd)
        (g$12754$dF01I core-prim . &i/o-filename-rcd)
        (g$12753$dF01I core-prim . &i/o-filename-rtd)
        (g$12752$dF01I core-prim . &i/o-invalid-position-rcd)
        (g$12751$dF01I core-prim . &i/o-invalid-position-rtd)
        (g$12750$dF01I core-prim . &i/o-write-rcd)
        (g$12749$dF01I core-prim . &i/o-write-rtd)
        (g$12748$dF01I core-prim . &i/o-read-rcd)
        (g$12747$dF01I core-prim . &i/o-read-rtd)
        (g$12746$dF01I core-prim . &i/o-rcd)
        (g$12745$dF01I core-prim . &i/o-rtd)
        (g$12744$dF01I core-prim . &undefined-rcd)
        (g$12743$dF01I core-prim . &undefined-rtd)
        (g$12742$dF01I core-prim . &syntax-rcd)
        (g$12741$dF01I core-prim . &syntax-rtd)
        (g$12740$dF01I core-prim . &lexical-rcd)
        (g$12739$dF01I core-prim . &lexical-rtd)
        (g$12738$dF01I core-prim . &implementation-restriction-rcd)
        (g$12737$dF01I core-prim . &implementation-restriction-rtd)
        (g$12736$dF01I core-prim . &non-continuable-rcd)
        (g$12735$dF01I core-prim . &non-continuable-rtd)
        (g$12734$dF01I core-prim . &who-rcd)
        (g$12733$dF01I core-prim . &who-rtd)
        (g$12732$dF01I core-prim . &irritants-rcd)
        (g$12731$dF01I core-prim . &irritants-rtd)
        (g$12730$dF01I core-prim . &assertion-rcd)
        (g$12729$dF01I core-prim . &assertion-rtd)
        (g$12728$dF01I core-prim . &violation-rcd)
        (g$12727$dF01I core-prim . &violation-rtd)
        (g$12726$dF01I core-prim . &error-rcd)
        (g$12725$dF01I core-prim . &error-rtd)
        (g$12724$dF01I core-prim . &serious-rcd)
        (g$12723$dF01I core-prim . &serious-rtd)
        (g$12722$dF01I core-prim . &warning-rcd)
        (g$12721$dF01I core-prim . &warning-rtd)
        (g$12720$dF01I core-prim . &message-rcd)
        (g$12719$dF01I core-prim . &message-rtd)
        (g$12718$dF01I core-prim . &condition-rcd)
        (g$12717$dF01I core-prim . &condition-rtd)
        (g$12716$dF01I core-prim . library-letrec*)
        (g$12715$dF01I core-prim . annotation-stripped)
        (g$12714$dF01I core-prim . annotation-source)
        (g$12713$dF01I core-prim . annotation-expression)
        (g$12712$dF01I core-prim . annotation?)
        (g$12711$dF01I core-prim . read-annotated)
        (g$12710$dF01I core-prim . tanh)
        (g$12709$dF01I core-prim . cosh)
        (g$12708$dF01I core-prim . sinh)
        (g$12707$dF01I core-prim . make-guid)
        (g$12706$dF01I core-prim . unspecified?)
        (g$5856$dF01I core-prim . make-list)
        (g$5855$dF01I core-prim . last-pair)
        (g$12705$dF01I core-prim . load-r5rs)
        (g$12704$dF01I core-prim . license)
        (g$12703$dF01I core-prim . stacktrace)
        (g$12149$dF01I core-prim . ironscheme-build)
        (g$12702$dF01I core-prim . define-clr-class-internal)
        (g$12701$dF01I core-prim . clr-field-set!-internal)
        (g$12700$dF01I core-prim . clr-field-get-internal)
        (g$12699$dF01I core-prim . clr-cast-internal)
        (g$12698$dF01I core-prim . clr-call-internal)
        (g$12697$dF01I core-prim . clr-new-internal)
        (g$12696$dF01I core-prim . clr-new-array-internal)
        (g$12695$dF01I core-prim . clr-is-internal)
        (g$12694$dF01I core-prim . clr-reference-internal)
        (g$12693$dF01I core-prim . clr-using-internal)
        (g$9158$dF01I core-prim . syntax-error)
        (g$9028$dF01I core-prim . syntax-dispatch)
        (g$12692$dF01I core-prim . compile-core)
        (g$12691$dF01I core-prim . eval-core)
        (g$12690$dF01I core-prim . set-symbol-value!)
        (g$12689$dF01I core-prim . symbol-value)
        (g$12688$dF01I core-prim . symbol-value?)
        (g$12687$dF01I core-prim . ungensym)
        (g$12686$dF01I core-prim . gensym)
        (g$12685$dF01I core-prim . void)
        (g$12684$dF01I core-prim . load-serialized-library)
        (g$12683$dF01I core-prim . serialize-library)
        (g$12151$dF01I core-prim . compile-system-libraries)
        (g$12153$dF01I core-prim . compile->closure)
        (g$12152$dF01I core-prim . compile)
        (g$12148$dF01I core-prim . load)
        (g$9168$dF01I core-prim . interaction-environment)
        (g$12682$dF01I core-prim . char-ready?)
        (g$12681$dF01I core-prim . string-upcase)
        (g$12680$dF01I core-prim . string-titlecase)
        (g$12679$dF01I core-prim . string-normalize-nfkd)
        (g$12678$dF01I core-prim . string-normalize-nfkc)
        (g$12677$dF01I core-prim . string-normalize-nfd)
        (g$12676$dF01I core-prim . string-normalize-nfc)
        (g$12675$dF01I core-prim . string-foldcase)
        (g$12674$dF01I core-prim . string-downcase)
        (g$6995$dF01I core-prim . string-ci>?)
        (g$6997$dF01I core-prim . string-ci>=?)
        (g$6993$dF01I core-prim . string-ci=?)
        (g$6994$dF01I core-prim . string-ci<?)
        (g$6996$dF01I core-prim . string-ci<=?)
        (g$12673$dF01I core-prim . char-whitespace?)
        (g$12672$dF01I core-prim . char-upper-case?)
        (g$12671$dF01I core-prim . char-title-case?)
        (g$12670$dF01I core-prim . char-numeric?)
        (g$12669$dF01I core-prim . char-lower-case?)
        (g$12668$dF01I core-prim . char-general-category)
        (g$12667$dF01I core-prim . char-upcase)
        (g$12666$dF01I core-prim . char-titlecase)
        (g$12665$dF01I core-prim . char-foldcase)
        (g$12664$dF01I core-prim . char-downcase)
        (g$7034$dF01I core-prim . char-ci>?)
        (g$7036$dF01I core-prim . char-ci>=?)
        (g$7032$dF01I core-prim . char-ci=?)
        (g$7033$dF01I core-prim . char-ci<?)
        (g$7035$dF01I core-prim . char-ci<=?)
        (g$12663$dF01I core-prim . char-alphabetic?)
        (g$8765$dF01I core-prim . variable-transformer-procedure)
        (g$8764$dF01I core-prim . variable-transformer?)
        (g$8763$dF01I core-prim . make-variable-transformer)
        (g$9162$dF01I core-prim . identifier?)
        (g$9151$dF01I core-prim . generate-temporaries)
        (g$9152$dF01I core-prim . free-identifier=?)
        (g$9164$dF01I core-prim . syntax->datum)
        (g$9163$dF01I core-prim . datum->syntax)
        (g$9153$dF01I core-prim . bound-identifier=?)
        (g$12662$dF01I core-prim . record-type-descriptor?)
        (g$12661$dF01I core-prim . record-predicate)
        (g$12660$dF01I core-prim . record-mutator)
        (g$12659$dF01I core-prim . record-constructor)
        (g$12658$dF01I core-prim . record-accessor)
        (g$12657$dF01I core-prim . make-record-type-descriptor)
        (g$12656$dF01I core-prim . make-record-constructor-descriptor)
        (g$12655$dF01I core-prim . record?)
        (g$12654$dF01I core-prim . record-type-uid)
        (g$12653$dF01I core-prim . record-type-sealed?)
        (g$12652$dF01I core-prim . record-type-parent)
        (g$12651$dF01I core-prim . record-type-opaque?)
        (g$12650$dF01I core-prim . record-type-name)
        (g$12649$dF01I core-prim . record-type-generative?)
        (g$12648$dF01I core-prim . record-type-field-names)
        (g$12647$dF01I core-prim . record-rtd)
        (g$12646$dF01I core-prim . record-field-mutable?)
        (g$6569$dF01I core-prim . delete-file)
        (g$6568$dF01I core-prim . file-exists?)
        (g$12645$dF01I core-prim . vector-sort!)
        (g$12644$dF01I core-prim . vector-sort)
        (g$6935$dF01I core-prim . list-sort)
        (g$12643$dF01I core-prim . symbol-hash)
        (g$12642$dF01I core-prim . string-ci-hash)
        (g$12641$dF01I core-prim . string-hash)
        (g$12640$dF01I core-prim . equal-hash)
        (g$12639$dF01I core-prim . hashtable-equivalence-function)
        (g$12638$dF01I core-prim . make-hashtable)
        (g$12637$dF01I core-prim . hashtable-hash-function)
        (g$6537$dF01I core-prim . make-eqv-hashtable)
        (g$6536$dF01I core-prim . make-eq-hashtable)
        (g$12636$dF01I core-prim . hashtable?)
        (g$6543$dF01I core-prim . hashtable-update!)
        (g$6538$dF01I core-prim . hashtable-size)
        (g$6540$dF01I core-prim . hashtable-set!)
        (g$6539$dF01I core-prim . hashtable-ref)
        (g$12635$dF01I core-prim . hashtable-mutable?)
        (g$12634$dF01I core-prim . hashtable-keys)
        (g$12633$dF01I core-prim . hashtable-entries)
        (g$6541$dF01I core-prim . hashtable-delete!)
        (g$12632$dF01I core-prim . hashtable-copy)
        (g$6542$dF01I core-prim . hashtable-contains?)
        (g$6544$dF01I core-prim . hashtable-clear!)
        (g$7420$dF01I core-prim . call-with-output-file)
        (g$7419$dF01I core-prim . call-with-input-file)
        (g$7401$dF01I core-prim . write-char)
        (g$12631$dF01I core-prim . write)
        (g$7418$dF01I core-prim . with-output-to-file)
        (g$7417$dF01I core-prim . with-input-from-file)
        (g$7400$dF01I core-prim . read-char)
        (g$12630$dF01I core-prim . read)
        (g$7399$dF01I core-prim . peek-char)
        (g$12629$dF01I core-prim . open-output-file)
        (g$12628$dF01I core-prim . open-input-file)
        (g$7421$dF01I core-prim . newline)
        (g$12627$dF01I core-prim . display)
        (g$12626$dF01I core-prim . close-output-port)
        (g$12625$dF01I core-prim . close-input-port)
        (g$12624$dF01I core-prim . eof-object?)
        (g$12623$dF01I core-prim . eof-object)
        (g$12622$dF01I core-prim . current-error-port)
        (g$12621$dF01I core-prim . current-output-port)
        (g$12620$dF01I core-prim . current-input-port)
        (g$12619$dF01I core-prim . output-port?)
        (g$12618$dF01I core-prim . input-port?)
        (g$12617$dF01I core-prim . utf-8-codec)
        (g$12616$dF01I core-prim . utf-16-codec)
        (g$12615$dF01I core-prim . transcoder-error-handling-mode)
        (g$12614$dF01I core-prim . transcoder-eol-style)
        (g$12613$dF01I core-prim . transcoder-codec)
        (g$12612$dF01I core-prim . transcoded-port)
        (g$12611$dF01I core-prim . textual-port?)
        (g$12610$dF01I core-prim . string->bytevector)
        (g$12609$dF01I core-prim . standard-output-port)
        (g$12608$dF01I core-prim . standard-input-port)
        (g$12607$dF01I core-prim . standard-error-port)
        (g$12606$dF01I core-prim . set-port-position!)
        (g$12605$dF01I core-prim . put-u8)
        (g$12604$dF01I core-prim . put-string)
        (g$12603$dF01I core-prim . put-datum)
        (g$12602$dF01I core-prim . put-char)
        (g$12601$dF01I core-prim . put-bytevector)
        (g$7386$dF01I core-prim . port?)
        (g$12600$dF01I core-prim . port-transcoder)
        (g$12599$dF01I core-prim . port-position)
        (g$12598$dF01I core-prim . port-has-set-port-position!?)
        (g$12597$dF01I core-prim . port-has-port-position?)
        (g$12596$dF01I core-prim . port-eof?)
        (g$12595$dF01I core-prim . output-port-buffer-mode)
        (g$7385$dF01I core-prim . open-string-output-port)
        (g$12594$dF01I core-prim . open-string-input-port)
        (g$12593$dF01I core-prim . open-file-output-port)
        (g$12592$dF01I core-prim . open-file-input/output-port)
        (g$12591$dF01I core-prim . open-file-input-port)
        (g$12590$dF01I core-prim . open-bytevector-output-port)
        (g$12589$dF01I core-prim . open-bytevector-input-port)
        (g$12588$dF01I core-prim . native-transcoder)
        (g$12587$dF01I core-prim . native-eol-style)
        (g$12586$dF01I core-prim . make-transcoder)
        (g$12585$dF01I core-prim . latin-1-codec)
        (g$7241$dF01I core-prim . make-i/o-write-error)
        (g$7227$dF01I core-prim . make-i/o-read-error)
        (g$7346$dF01I core-prim . make-i/o-port-error)
        (g$7256$dF01I core-prim . make-i/o-invalid-position-error)
        (g$7273$dF01I core-prim . make-i/o-filename-error)
        (g$7289$dF01I core-prim . make-i/o-file-protection-error)
        (g$7303$dF01I core-prim . make-i/o-file-is-read-only-error)
        (g$7331$dF01I core-prim . make-i/o-file-does-not-exist-error)
        (g$7317$dF01I core-prim . make-i/o-file-already-exists-error)
        (g$7213$dF01I core-prim . make-i/o-error)
        (g$7377$dF01I core-prim . make-i/o-encoding-error)
        (g$7362$dF01I core-prim . make-i/o-decoding-error)
        (g$12584$dF01I core-prim . make-custom-textual-output-port)
        (g$12583$dF01I core-prim . make-custom-textual-input/output-port)
        (g$12582$dF01I core-prim . make-custom-textual-input-port)
        (g$12581$dF01I core-prim . make-custom-binary-output-port)
        (g$12580$dF01I core-prim . make-custom-binary-input/output-port)
        (g$12579$dF01I core-prim . make-custom-binary-input-port)
        (g$12578$dF01I core-prim . make-bytevector)
        (g$12577$dF01I core-prim . lookahead-u8)
        (g$12576$dF01I core-prim . lookahead-char)
        (g$7242$dF01I core-prim . i/o-write-error?)
        (g$7228$dF01I core-prim . i/o-read-error?)
        (g$7348$dF01I core-prim . i/o-port-error?)
        (g$7258$dF01I core-prim . i/o-invalid-position-error?)
        (g$7259$dF01I core-prim . i/o-error-position)
        (g$7275$dF01I core-prim . i/o-filename-error?)
        (g$7290$dF01I core-prim . i/o-file-protection-error?)
        (g$7304$dF01I core-prim . i/o-file-is-read-only-error?)
        (g$7332$dF01I core-prim . i/o-file-does-not-exist-error?)
        (g$7318$dF01I core-prim . i/o-file-already-exists-error?)
        (g$7214$dF01I core-prim . i/o-error?)
        (g$7349$dF01I core-prim . i/o-error-port)
        (g$7276$dF01I core-prim . i/o-error-filename)
        (g$7379$dF01I core-prim . i/o-encoding-error?)
        (g$7380$dF01I core-prim . i/o-encoding-error-char)
        (g$7363$dF01I core-prim . i/o-decoding-error?)
        (g$12575$dF01I core-prim . get-u8)
        (g$12574$dF01I core-prim . get-string-n!)
        (g$12573$dF01I core-prim . get-string-n)
        (g$12572$dF01I core-prim . get-string-all)
        (g$12571$dF01I core-prim . get-line)
        (g$12570$dF01I core-prim . get-datum)
        (g$12569$dF01I core-prim . get-char)
        (g$12568$dF01I core-prim . get-bytevector-some)
        (g$12567$dF01I core-prim . get-bytevector-n!)
        (g$12566$dF01I core-prim . get-bytevector-n)
        (g$12565$dF01I core-prim . get-bytevector-all)
        (g$12564$dF01I core-prim . flush-output-port)
        (g$12563$dF01I core-prim . close-port)
        (g$7387$dF01I core-prim . call-with-string-output-port)
        (g$7388$dF01I core-prim . call-with-port)
        (g$12562$dF01I core-prim . call-with-bytevector-output-port)
        (g$12561$dF01I core-prim . bytevector->string)
        (g$12560$dF01I core-prim . buffer-mode?)
        (g$12559$dF01I core-prim . binary-port?)
        (g$9141$dF01I core-prim . scheme-report-environment)
        (g$6914$dF01I core-prim . quotient)
        (g$9140$dF01I core-prim . null-environment)
        (g$6915$dF01I core-prim . remainder)
        (g$6916$dF01I core-prim . modulo)
        (g$6911$dF01I core-prim . inexact->exact)
        (g$6918$dF01I core-prim . force)
        (g$6912$dF01I core-prim . exact->inexact)
        (g$12558$dF01I core-prim . exit)
        (g$12145$dF01I core-prim . command-line)
        (g$12557$dF01I core-prim . string-fill!)
        (g$12556$dF01I core-prim . string-set!)
        (g$12555$dF01I core-prim . set-cdr!)
        (g$12554$dF01I core-prim . set-car!)
        (g$5878$dF01I core-prim . remove)
        (g$5879$dF01I core-prim . remv)
        (g$5859$dF01I core-prim . remp)
        (g$5880$dF01I core-prim . remq)
        (g$5858$dF01I core-prim . partition)
        (g$5866$dF01I core-prim . memv)
        (g$5865$dF01I core-prim . memq)
        (g$5868$dF01I core-prim . memp)
        (g$5867$dF01I core-prim . member)
        (g$5872$dF01I core-prim . exists)
        (g$5871$dF01I core-prim . for-all)
        (g$5877$dF01I core-prim . fold-right)
        (g$5876$dF01I core-prim . fold-left)
        (g$5857$dF01I core-prim . find)
        (g$5860$dF01I core-prim . filter)
        (g$5875$dF01I core-prim . cons*)
        (g$5862$dF01I core-prim . assv)
        (g$5861$dF01I core-prim . assq)
        (g$5864$dF01I core-prim . assp)
        (g$5863$dF01I core-prim . assoc)
        (g$12553$dF01I core-prim . with-exception-handler)
        (g$12552$dF01I core-prim . raise-continuable)
        (g$12551$dF01I core-prim . raise)
        (g$9143$dF01I core-prim . eval)
        (g$9139$dF01I core-prim . environment)
        (g$7485$dF01I core-prim . make-enumeration)
        (g$7492$dF01I core-prim . enum-set=?)
        (g$7486$dF01I core-prim . enum-set-universe)
        (g$7493$dF01I core-prim . enum-set-union)
        (g$7491$dF01I core-prim . enum-set-subset?)
        (g$7497$dF01I core-prim . enum-set-projection)
        (g$7490$dF01I core-prim . enum-set-member?)
        (g$7494$dF01I core-prim . enum-set-intersection)
        (g$7487$dF01I core-prim . enum-set-indexer)
        (g$7495$dF01I core-prim . enum-set-difference)
        (g$7488$dF01I core-prim . enum-set-constructor)
        (g$7496$dF01I core-prim . enum-set-complement)
        (g$7489$dF01I core-prim . enum-set->list)
        (g$6823$dF01I core-prim . who-condition?)
        (g$6734$dF01I core-prim . warning?)
        (g$6776$dF01I core-prim . violation?)
        (g$6900$dF01I core-prim . undefined-violation?)
        (g$6884$dF01I core-prim . syntax-violation?)
        (g$6886$dF01I core-prim . syntax-violation-subform)
        (g$6885$dF01I core-prim . syntax-violation-form)
        (g$9161$dF01I core-prim . syntax-violation)
        (g$12550$dF01I core-prim . simple-conditions)
        (g$6748$dF01I core-prim . serious-condition?)
        (g$6838$dF01I core-prim . non-continuable-violation?)
        (g$6719$dF01I core-prim . message-condition?)
        (g$6821$dF01I core-prim . make-who-condition)
        (g$6733$dF01I core-prim . make-warning)
        (g$6775$dF01I core-prim . make-violation)
        (g$6899$dF01I core-prim . make-undefined-violation)
        (g$6881$dF01I core-prim . make-syntax-violation)
        (g$6747$dF01I core-prim . make-serious-condition)
        (g$6837$dF01I core-prim . make-non-continuable-violation)
        (g$6717$dF01I core-prim . make-message-condition)
        (g$6865$dF01I core-prim . make-lexical-violation)
        (g$6804$dF01I core-prim . make-irritants-condition)
        (g$6851$dF01I core-prim . make-implementation-restriction-violation)
        (g$6761$dF01I core-prim . make-error)
        (g$6789$dF01I core-prim . make-assertion-violation)
        (g$6866$dF01I core-prim . lexical-violation?)
        (g$6806$dF01I core-prim . irritants-condition?)
        (g$6852$dF01I core-prim . implementation-restriction-violation?)
        (g$6762$dF01I core-prim . error?)
        (g$6824$dF01I core-prim . condition-who)
        (g$12549$dF01I core-prim . condition-predicate)
        (g$6720$dF01I core-prim . condition-message)
        (g$6807$dF01I core-prim . condition-irritants)
        (g$12548$dF01I core-prim . condition-accessor)
        (g$12547$dF01I core-prim . condition)
        (g$6790$dF01I core-prim . assertion-violation?)
        (g$12546$dF01I core-prim . condition?)
        (g$12545$dF01I core-prim . utf32->string)
        (g$12544$dF01I core-prim . utf16->string)
        (g$12543$dF01I core-prim . utf8->string)
        (g$12542$dF01I core-prim . uint-list->bytevector)
        (g$12541$dF01I core-prim . u8-list->bytevector)
        (g$12540$dF01I core-prim . string->utf8)
        (g$12539$dF01I core-prim . string->utf32)
        (g$12538$dF01I core-prim . string->utf16)
        (g$12537$dF01I core-prim . sint-list->bytevector)
        (g$6575$dF01I core-prim . native-endianness)
        (g$12536$dF01I core-prim . bytevector?)
        (g$12535$dF01I core-prim . bytevector=?)
        (g$12534$dF01I core-prim . bytevector-uint-set!)
        (g$12533$dF01I core-prim . bytevector-uint-ref)
        (g$12532$dF01I core-prim . bytevector-u8-set!)
        (g$12531$dF01I core-prim . bytevector-u8-ref)
        (g$6596$dF01I core-prim . bytevector-u64-set!)
        (g$6592$dF01I core-prim . bytevector-u64-ref)
        (g$6598$dF01I core-prim . bytevector-u64-native-set!)
        (g$6594$dF01I core-prim . bytevector-u64-native-ref)
        (g$6588$dF01I core-prim . bytevector-u32-set!)
        (g$6584$dF01I core-prim . bytevector-u32-ref)
        (g$6590$dF01I core-prim . bytevector-u32-native-set!)
        (g$6586$dF01I core-prim . bytevector-u32-native-ref)
        (g$6580$dF01I core-prim . bytevector-u16-set!)
        (g$6576$dF01I core-prim . bytevector-u16-ref)
        (g$6582$dF01I core-prim . bytevector-u16-native-set!)
        (g$6578$dF01I core-prim . bytevector-u16-native-ref)
        (g$12530$dF01I core-prim . bytevector-sint-set!)
        (g$12529$dF01I core-prim . bytevector-sint-ref)
        (g$12528$dF01I core-prim . bytevector-s8-set!)
        (g$12527$dF01I core-prim . bytevector-s8-ref)
        (g$6597$dF01I core-prim . bytevector-s64-set!)
        (g$6593$dF01I core-prim . bytevector-s64-ref)
        (g$6599$dF01I core-prim . bytevector-s64-native-set!)
        (g$6595$dF01I core-prim . bytevector-s64-native-ref)
        (g$6589$dF01I core-prim . bytevector-s32-set!)
        (g$6585$dF01I core-prim . bytevector-s32-ref)
        (g$6591$dF01I core-prim . bytevector-s32-native-set!)
        (g$6587$dF01I core-prim . bytevector-s32-native-ref)
        (g$6581$dF01I core-prim . bytevector-s16-set!)
        (g$6577$dF01I core-prim . bytevector-s16-ref)
        (g$6583$dF01I core-prim . bytevector-s16-native-set!)
        (g$6579$dF01I core-prim . bytevector-s16-native-ref)
        (g$12526$dF01I core-prim . bytevector-length)
        (g$12525$dF01I core-prim . bytevector-ieee-single-set!)
        (g$12524$dF01I core-prim . bytevector-ieee-single-ref)
        (g$6602$dF01I core-prim . bytevector-ieee-single-native-set!)
        (g$6600$dF01I core-prim . bytevector-ieee-single-native-ref)
        (g$12523$dF01I core-prim . bytevector-ieee-double-set!)
        (g$12522$dF01I core-prim . bytevector-ieee-double-ref)
        (g$6603$dF01I core-prim . bytevector-ieee-double-native-set!)
        (g$6601$dF01I core-prim . bytevector-ieee-double-native-ref)
        (g$12521$dF01I core-prim . bytevector-fill!)
        (g$12520$dF01I core-prim . bytevector-copy!)
        (g$12519$dF01I core-prim . bytevector-copy)
        (g$12518$dF01I core-prim . bytevector->uint-list)
        (g$12517$dF01I core-prim . bytevector->u8-list)
        (g$12516$dF01I core-prim . bytevector->sint-list)
        (g$7199$dF01I core-prim . no-nans-violation?)
        (g$7185$dF01I core-prim . no-infinities-violation?)
        (g$7198$dF01I core-prim . make-no-nans-violation)
        (g$7184$dF01I core-prim . make-no-infinities-violation)
        (g$12515$dF01I core-prim . real->flonum)
        (g$12514$dF01I core-prim . flzero?)
        (g$12513$dF01I core-prim . fltruncate)
        (g$12512$dF01I core-prim . fltan)
        (g$12511$dF01I core-prim . flsqrt)
        (g$12510$dF01I core-prim . flsin)
        (g$12509$dF01I core-prim . flround)
        (g$12508$dF01I core-prim . flpositive?)
        (g$12507$dF01I core-prim . flonum?)
        (g$12506$dF01I core-prim . flodd?)
        (g$12505$dF01I core-prim . flnumerator)
        (g$12504$dF01I core-prim . flnegative?)
        (g$12503$dF01I core-prim . flnan?)
        (g$12502$dF01I core-prim . flmod0)
        (g$12501$dF01I core-prim . flmod)
        (g$12500$dF01I core-prim . flmin)
        (g$12499$dF01I core-prim . flmax)
        (g$12498$dF01I core-prim . fllog)
        (g$12497$dF01I core-prim . flinteger?)
        (g$12496$dF01I core-prim . flinfinite?)
        (g$12495$dF01I core-prim . flfloor)
        (g$12494$dF01I core-prim . flfinite?)
        (g$12493$dF01I core-prim . flexpt)
        (g$12492$dF01I core-prim . flexp)
        (g$12491$dF01I core-prim . fleven?)
        (g$12490$dF01I core-prim . fldiv0-and-mod0)
        (g$12489$dF01I core-prim . fldiv0)
        (g$12488$dF01I core-prim . fldiv-and-mod)
        (g$12487$dF01I core-prim . fldiv)
        (g$12486$dF01I core-prim . fldenominator)
        (g$12485$dF01I core-prim . flcos)
        (g$12484$dF01I core-prim . flceiling)
        (g$12483$dF01I core-prim . flatan)
        (g$12482$dF01I core-prim . flasin)
        (g$12481$dF01I core-prim . flacos)
        (g$12480$dF01I core-prim . flabs)
        (g$12479$dF01I core-prim . fl>?)
        (g$12478$dF01I core-prim . fl>=?)
        (g$12477$dF01I core-prim . fl=?)
        (g$12476$dF01I core-prim . fl<?)
        (g$12475$dF01I core-prim . fl<=?)
        (g$12474$dF01I core-prim . fl/)
        (g$12473$dF01I core-prim . fl-)
        (g$12472$dF01I core-prim . fl+)
        (g$12471$dF01I core-prim . fl*)
        (g$12470$dF01I core-prim . fixnum->flonum)
        (g$12469$dF01I core-prim . fxzero?)
        (g$12468$dF01I core-prim . fxxor)
        (g$7131$dF01I core-prim . fxrotate-bit-field)
        (g$12467$dF01I core-prim . fxreverse-bit-field)
        (g$12466$dF01I core-prim . fxpositive?)
        (g$12465$dF01I core-prim . fxodd?)
        (g$12464$dF01I core-prim . fxnot)
        (g$12463$dF01I core-prim . fxnegative?)
        (g$12462$dF01I core-prim . fxmod0)
        (g$12461$dF01I core-prim . fxmod)
        (g$12460$dF01I core-prim . fxmin)
        (g$12459$dF01I core-prim . fxmax)
        (g$12458$dF01I core-prim . fxlength)
        (g$12457$dF01I core-prim . fxior)
        (g$7125$dF01I core-prim . fxif)
        (g$12456$dF01I core-prim . fxfirst-bit-set)
        (g$12455$dF01I core-prim . fxeven?)
        (g$12454$dF01I core-prim . fxdiv0-and-mod0)
        (g$12453$dF01I core-prim . fxdiv0)
        (g$12452$dF01I core-prim . fxdiv-and-mod)
        (g$12451$dF01I core-prim . fxdiv)
        (g$7128$dF01I core-prim . fxcopy-bit-field)
        (g$7126$dF01I core-prim . fxcopy-bit)
        (g$12450$dF01I core-prim . fxbit-set?)
        (g$7127$dF01I core-prim . fxbit-field)
        (g$12449$dF01I core-prim . fxbit-count)
        (g$7130$dF01I core-prim . fxarithmetic-shift-right)
        (g$7129$dF01I core-prim . fxarithmetic-shift-left)
        (g$12448$dF01I core-prim . fxarithmetic-shift)
        (g$12447$dF01I core-prim . fxand)
        (g$12446$dF01I core-prim . fx>?)
        (g$12445$dF01I core-prim . fx>=?)
        (g$12444$dF01I core-prim . fx=?)
        (g$12443$dF01I core-prim . fx<?)
        (g$12442$dF01I core-prim . fx<=?)
        (g$7123$dF01I core-prim . fx-/carry)
        (g$12441$dF01I core-prim . fx-)
        (g$7124$dF01I core-prim . fx+/carry)
        (g$12440$dF01I core-prim . fx+)
        (g$7122$dF01I core-prim . fx*/carry)
        (g$12439$dF01I core-prim . fx*)
        (g$12438$dF01I core-prim . greatest-fixnum)
        (g$12437$dF01I core-prim . least-fixnum)
        (g$12436$dF01I core-prim . fixnum-width)
        (g$12435$dF01I core-prim . fixnum?)
        (g$7096$dF01I core-prim . bitwise-rotate-bit-field)
        (g$12434$dF01I core-prim . bitwise-reverse-bit-field)
        (g$12433$dF01I core-prim . bitwise-length)
        (g$7090$dF01I core-prim . bitwise-if)
        (g$12432$dF01I core-prim . bitwise-first-bit-set)
        (g$7093$dF01I core-prim . bitwise-copy-bit-field)
        (g$7091$dF01I core-prim . bitwise-copy-bit)
        (g$12431$dF01I core-prim . bitwise-bit-set?)
        (g$7092$dF01I core-prim . bitwise-bit-field)
        (g$12430$dF01I core-prim . bitwise-bit-count)
        (g$12429$dF01I core-prim . bitwise-xor)
        (g$12428$dF01I core-prim . bitwise-ior)
        (g$12427$dF01I core-prim . bitwise-and)
        (g$12426$dF01I core-prim . bitwise-not)
        (g$7095$dF01I core-prim . bitwise-arithmetic-shift-right)
        (g$7094$dF01I core-prim . bitwise-arithmetic-shift-left)
        (g$12425$dF01I core-prim . bitwise-arithmetic-shift)
        (g$6021$dF01I core-prim . zero?)
        (g$12424$dF01I core-prim . vector?)
        (g$12423$dF01I core-prim . vector-set!)
        (g$12422$dF01I core-prim . vector-ref)
        (g$12421$dF01I core-prim . vector-map)
        (g$12420$dF01I core-prim . vector-length)
        (g$12419$dF01I core-prim . vector-for-each)
        (g$12418$dF01I core-prim . vector-fill!)
        (g$12417$dF01I core-prim . vector->list)
        (g$12416$dF01I core-prim . vector)
        (g$12415$dF01I core-prim . values)
        (g$12414$dF01I core-prim . truncate)
        (g$12413$dF01I core-prim . tan)
        (g$12412$dF01I core-prim . symbol?)
        (g$6067$dF01I core-prim . symbol=?)
        (g$12411$dF01I core-prim . symbol->string)
        (g$12410$dF01I core-prim . substring)
        (g$12409$dF01I core-prim . string?)
        (g$6064$dF01I core-prim . string>?)
        (g$6066$dF01I core-prim . string>=?)
        (g$6062$dF01I core-prim . string=?)
        (g$6063$dF01I core-prim . string<?)
        (g$6065$dF01I core-prim . string<=?)
        (g$12408$dF01I core-prim . string-ref)
        (g$12407$dF01I core-prim . string-length)
        (g$12406$dF01I core-prim . string-for-each)
        (g$12405$dF01I core-prim . string-copy)
        (g$12404$dF01I core-prim . string-append)
        (g$12403$dF01I core-prim . string->symbol)
        (g$12402$dF01I core-prim . string->number)
        (g$12401$dF01I core-prim . string->list)
        (g$12400$dF01I core-prim . string)
        (g$12399$dF01I core-prim . sqrt)
        (g$12398$dF01I core-prim . sin)
        (g$12397$dF01I core-prim . round)
        (g$12396$dF01I core-prim . reverse)
        (g$12395$dF01I core-prim . real?)
        (g$12394$dF01I core-prim . real-valued?)
        (g$12393$dF01I core-prim . real-part)
        (g$6108$dF01I core-prim . rationalize)
        (g$12392$dF01I core-prim . rational?)
        (g$12391$dF01I core-prim . rational-valued?)
        (g$12390$dF01I core-prim . procedure?)
        (g$6019$dF01I core-prim . positive?)
        (g$12389$dF01I core-prim . pair?)
        (g$6023$dF01I core-prim . odd?)
        (g$12388$dF01I core-prim . numerator)
        (g$12387$dF01I core-prim . number?)
        (g$12386$dF01I core-prim . number->string)
        (g$12385$dF01I core-prim . null?)
        (g$12384$dF01I core-prim . not)
        (g$6020$dF01I core-prim . negative?)
        (g$12383$dF01I core-prim . nan?)
        (g$6025$dF01I core-prim . min)
        (g$6024$dF01I core-prim . max)
        (g$5873$dF01I core-prim . map)
        (g$12382$dF01I core-prim . make-vector)
        (g$12381$dF01I core-prim . make-string)
        (g$12380$dF01I core-prim . make-rectangular)
        (g$12379$dF01I core-prim . make-polar)
        (g$12378$dF01I core-prim . magnitude)
        (g$12377$dF01I core-prim . log)
        (g$12376$dF01I core-prim . list?)
        (g$5853$dF01I core-prim . list-tail)
        (g$5854$dF01I core-prim . list-ref)
        (g$12375$dF01I core-prim . list->vector)
        (g$12374$dF01I core-prim . list->string)
        (g$12373$dF01I core-prim . list)
        (g$12372$dF01I core-prim . length)
        (g$6027$dF01I core-prim . lcm)
        (g$12371$dF01I core-prim . integer?)
        (g$12370$dF01I core-prim . integer-valued?)
        (g$12369$dF01I core-prim . integer->char)
        (g$12368$dF01I core-prim . infinite?)
        (g$12367$dF01I core-prim . inexact?)
        (g$12366$dF01I core-prim . inexact)
        (g$12365$dF01I core-prim . imag-part)
        (g$6026$dF01I core-prim . gcd)
        (g$5874$dF01I core-prim . for-each)
        (g$12364$dF01I core-prim . floor)
        (g$12363$dF01I core-prim . finite?)
        (g$12362$dF01I core-prim . expt)
        (g$12361$dF01I core-prim . exp)
        (g$12360$dF01I core-prim . exact?)
        (g$12359$dF01I core-prim . exact-integer-sqrt)
        (g$12358$dF01I core-prim . exact)
        (g$6022$dF01I core-prim . even?)
        (g$12357$dF01I core-prim . error)
        (g$12356$dF01I core-prim . eqv?)
        (g$12355$dF01I core-prim . equal?)
        (g$12354$dF01I core-prim . eq?)
        (g$12353$dF01I core-prim . dynamic-wind)
        (g$12352$dF01I core-prim . div0-and-mod0)
        (g$12351$dF01I core-prim . mod0)
        (g$12350$dF01I core-prim . div0)
        (g$12349$dF01I core-prim . div-and-mod)
        (g$12348$dF01I core-prim . mod)
        (g$12347$dF01I core-prim . div)
        (g$12346$dF01I core-prim . denominator)
        (g$12345$dF01I core-prim . cos)
        (g$12344$dF01I core-prim . cons)
        (g$12343$dF01I core-prim . complex?)
        (g$12342$dF01I core-prim . char?)
        (g$6105$dF01I core-prim . char>?)
        (g$6107$dF01I core-prim . char>=?)
        (g$6103$dF01I core-prim . char=?)
        (g$6104$dF01I core-prim . char<?)
        (g$6106$dF01I core-prim . char<=?)
        (g$12341$dF01I core-prim . char->integer)
        (g$12340$dF01I core-prim . ceiling)
        (g$12339$dF01I core-prim . call-with-values)
        (g$12338$dF01I core-prim . call/cc)
        (g$12337$dF01I core-prim . call-with-current-continuation)
        (g$6018$dF01I core-prim . cddddr)
        (g$6017$dF01I core-prim . cdddar)
        (g$6016$dF01I core-prim . cddadr)
        (g$6015$dF01I core-prim . cddaar)
        (g$6014$dF01I core-prim . cdaddr)
        (g$6013$dF01I core-prim . cdadar)
        (g$6012$dF01I core-prim . cdaadr)
        (g$6011$dF01I core-prim . cdaaar)
        (g$6010$dF01I core-prim . cadddr)
        (g$6009$dF01I core-prim . caddar)
        (g$6008$dF01I core-prim . cadadr)
        (g$6007$dF01I core-prim . cadaar)
        (g$6006$dF01I core-prim . caaddr)
        (g$6005$dF01I core-prim . caadar)
        (g$6004$dF01I core-prim . caaadr)
        (g$6003$dF01I core-prim . caaaar)
        (g$6002$dF01I core-prim . cdddr)
        (g$6001$dF01I core-prim . cddar)
        (g$6000$dF01I core-prim . cdadr)
        (g$5999$dF01I core-prim . cdaar)
        (g$5998$dF01I core-prim . caddr)
        (g$5997$dF01I core-prim . cadar)
        (g$5996$dF01I core-prim . caadr)
        (g$5995$dF01I core-prim . caaar)
        (g$5994$dF01I core-prim . cddr)
        (g$5993$dF01I core-prim . cdar)
        (g$5992$dF01I core-prim . cadr)
        (g$5991$dF01I core-prim . caar)
        (g$12336$dF01I core-prim . cdr)
        (g$12335$dF01I core-prim . car)
        (g$12334$dF01I core-prim . boolean?)
        (g$6068$dF01I core-prim . boolean=?)
        (g$12333$dF01I core-prim . atan)
        (g$12332$dF01I core-prim . assertion-violation)
        (g$12331$dF01I core-prim . asin)
        (g$12330$dF01I core-prim . apply)
        (g$12329$dF01I core-prim . append)
        (g$12328$dF01I core-prim . angle)
        (g$12327$dF01I core-prim . acos)
        (g$12326$dF01I core-prim . abs)
        (g$12325$dF01I core-prim . /)
        (g$12324$dF01I core-prim . *)
        (g$12323$dF01I core-prim . -)
        (g$12322$dF01I core-prim . +)
        (g$12321$dF01I core-prim . >=)
        (g$12320$dF01I core-prim . >)
        (g$12319$dF01I core-prim . =)
        (g$12318$dF01I core-prim . <=)
        (g$12317$dF01I core-prim . <)
        (g$12316$dF01I core-prim . make-record-printer)
        (g$12315$dF01I core-prim . eqv-hash)
        (g$12314$dF01I core-prim . reverse!)
        (g$12313$dF01I core-prim . deserialize-port)
        (g$12312$dF01I core-prim . serialize-port)
        (g$7460$dF01I core-prim . enum-set?)
        (g$6917$dF01I core-prim . make-promise)
        (g$12147$dF01I core-prim . load/args)
        (g$7571$dF01I core-prim . printf)
        (g$7572$dF01I core-prim . fprintf)
        (g$7573$dF01I core-prim . format)
        (g$12311$dF01I core-prim . procedure-form)
        (g$12310$dF01I core-prim . procedure-environment)
        (g$12309$dF01I core-prim . procedure-name)
        (g$12308$dF01I core-prim . procedure-arity)
        (g$12307$dF01I core-prim . gc-collect)
        (g$12306$dF01I core-prim . clr-type?)
        (g$12305$dF01I core-prim . get-clr-type)
        (g$12304$dF01I core-prim . get-command-line)
        (g$12303$dF01I core-prim . vector-append)
        (g$12302$dF01I core-prim . vector-filter)
        (g$12301$dF01I core-prim . vector-reverse!)
        (g$12300$dF01I core-prim . vector-contains?)
        (g$12299$dF01I core-prim . vector-index-of)
        (g$12298$dF01I core-prim . vector-copy)
        (g$12297$dF01I core-prim . vector-binary-search)
        (g$12296$dF01I core-prim . string-ci-compare)
        (g$12295$dF01I core-prim . string-compare)
        (g$12294$dF01I core-prim . string-format)
        (g$12144$dF01I core-prim . trace-printer)
        (g$12293$dF01I core-prim . make-traced-procedure)
        (g$7593$dF01I core-prim . make-traced-macro)
        (g$9157$dF01I core-prim . assertion-error)
        (g$12292$dF01I core-prim . time-it)
        (g$7862$dF01I core-prim . make-parameter)
        (g$12291$dF01I core-prim . library-locator)
        (g$12290$dF01I core-prim . get-library-paths)
        (g$12289$dF01I core-prim . open-tcp-input/output-port)
        (g$12288$dF01I core-prim . hashtable-for-each)
        (g$12287$dF01I core-prim . hashtable-map)
        (g$9135$dF01I core-prim . environment-bindings)
        (g$9138$dF01I core-prim . environment-symbols)
        (g$9134$dF01I core-prim . interaction-environment-symbols)
        (g$12286$dF01I core-prim . optimization-level)
        (g$8317$dF01I core-prim . library-path)
        (g$9144$dF01I core-prim . expand->core)
        (g$9142$dF01I core-prim . expand)
        (g$7648$dF01I core-prim . convert->cps)
        (g$7647$dF01I core-prim . parse->cps)
        (g$12285$dF01I $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$12284$dF01I $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$12283$dF01I $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$12282$dF01I $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$12281$dF01I $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$12280$dF01I
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$12279$dF01I
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$12278$dF01I
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$12277$dF01I
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$12276$dF01I $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$12275$dF01I
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$12274$dF01I $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$12273$dF01I $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$12272$dF01I $core-rtd &i/o-rtd &i/o-rcd)
        (g$12271$dF01I $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12270$dF01I $core-rtd &undefined-rtd &undefined-rcd)
        (g$12269$dF01I $core-rtd &syntax-rtd &syntax-rcd)
        (g$12268$dF01I $core-rtd &lexical-rtd &lexical-rcd)
        (g$12267$dF01I
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$12266$dF01I $core-rtd &who-rtd &who-rcd)
        (g$12265$dF01I $core-rtd &irritants-rtd &irritants-rcd)
        (g$12264$dF01I $core-rtd &assertion-rtd &assertion-rcd)
        (g$12263$dF01I $core-rtd &violation-rtd &violation-rcd)
        (g$12262$dF01I $core-rtd &error-rtd &error-rcd)
        (g$12261$dF01I $core-rtd &serious-rtd &serious-rcd)
        (g$12260$dF01I $core-rtd &warning-rtd &warning-rcd)
        (g$12259$dF01I $core-rtd &message-rtd &message-rcd)
        (g$12258$dF01I $core-rtd &condition-rtd &condition-rcd)
        (g$12257$dF01I macro . define-condition-type)
        (g$12256$dF01I macro . define-enumeration)
        (g$12255$dF01I macro . define-record-type)
        (g$12254$dF01I macro . parent-rtd)
        (g$12253$dF01I macro . nongenerative)
        (g$12252$dF01I macro . opaque)
        (g$12251$dF01I macro . sealed)
        (g$12250$dF01I macro . protocol)
        (g$12249$dF01I macro . parent)
        (g$12248$dF01I macro . immutable)
        (g$12247$dF01I macro . mutable)
        (g$12246$dF01I macro . fields)
        (g$12245$dF01I macro . error-handling-mode)
        (g$12244$dF01I macro . file-options)
        (g$12243$dF01I macro . buffer-mode)
        (g$12242$dF01I macro . eol-style)
        (g$12241$dF01I macro . guard)
        (g$12240$dF01I macro . trace-letrec-syntax)
        (g$12239$dF01I macro . trace-let-syntax)
        (g$12238$dF01I macro . trace-define-syntax)
        (g$12237$dF01I macro . trace-define)
        (g$12236$dF01I macro . trace-lambda)
        (g$12235$dF01I macro . unsyntax-splicing)
        (g$12234$dF01I macro . unsyntax)
        (g$12233$dF01I macro . unquote-splicing)
        (g$12232$dF01I macro . unquote)
        (g$12231$dF01I macro . _)
        (g$12230$dF01I macro . else)
        (g$12229$dF01I macro . =>)
        (g$12228$dF01I macro . ...)
        (g$12227$dF01I macro . assert)
        (g$12226$dF01I macro . endianness)
        (g$12225$dF01I macro . delay)
        (g$12224$dF01I macro . time)
        (g$12223$dF01I macro . or)
        (g$12222$dF01I macro . and)
        (g$12221$dF01I macro . do)
        (g$12220$dF01I macro . cond)
        (g$12219$dF01I macro . let*)
        (g$12218$dF01I macro . let)
        (g$12217$dF01I macro . identifier-syntax)
        (g$12216$dF01I macro . with-syntax)
        (g$12215$dF01I macro . quasisyntax)
        (g$12214$dF01I macro . quasiquote)
        (g$12213$dF01I macro . syntax-rules)
        (g$12212$dF01I macro . include-into)
        (g$12211$dF01I macro . include)
        (g$12210$dF01I macro . define-struct)
        (g$12209$dF01I macro . let-values)
        (g$12208$dF01I macro . let*-values)
        (g$12207$dF01I core-macro . record-constructor-descriptor)
        (g$12206$dF01I core-macro . record-type-descriptor)
        (g$12205$dF01I core-macro . fluid-let-syntax)
        (g$12204$dF01I macro . case)
        (g$12203$dF01I macro . parameterize)
        (g$12202$dF01I macro . unless)
        (g$12201$dF01I macro . when)
        (g$12200$dF01I core-macro . if)
        (g$12199$dF01I core-macro . letrec*)
        (g$12198$dF01I core-macro . letrec)
        (g$12197$dF01I core-macro . type-descriptor)
        (g$12196$dF01I core-macro . case-lambda)
        (g$12195$dF01I core-macro . lambda)
        (g$12194$dF01I core-macro . syntax)
        (g$12193$dF01I core-macro . syntax-case)
        (g$12192$dF01I core-macro . quote)
        (g$12191$dF01I core-macro . foreign-call)
        (g$12190$dF01I letrec-syntax)
        (g$12189$dF01I let-syntax)
        (g$12188$dF01I set!)
        (g$12187$dF01I export)
        (g$12186$dF01I import)
        (g$12185$dF01I library)
        (g$12184$dF01I begin)
        (g$12183$dF01I module)
        (g$12182$dF01I define-syntax)
        (g$12181$dF01I define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7512$dF01I
      'g$12809$dF01I
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12692$dF01I)
        (eval-core . g$12691$dF01I)
        (set-symbol-value! . g$12690$dF01I)
        (symbol-value . g$12689$dF01I)
        (gensym . g$12686$dF01I)
        (void . g$12685$dF01I))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11606$dF01I
     g$trace-printer$11646$dF01I
     (g$make-parameter$6976$dF01I write))
   (g$command-line$11607$dF01I
     g$command-line$11647$dF01I
     (g$make-parameter$6976$dF01I (get-command-line)))
   (g$local-library-path$11608$dF01I
     g$local-library-path$11648$dF01I
     (case-lambda
       ((g$filename$11619$dF01I)
        (cons
          (g$get-directory-name$5558$dF01I g$filename$11619$dF01I)
          (g$library-path$7496$dF01I)))))
   (g$load/args$11609$dF01I
     g$load/args$11649$dF01I
     (case-lambda
       ((g$filename$11620$dF01I . g$args$11621$dF01I)
        (begin
          (apply
            g$load-r6rs-top-level$11616$dF01I
            g$filename$11620$dF01I
            'load
            g$args$11621$dF01I)
          (void)))))
   (g$load$11610$dF01I
     g$load$11650$dF01I
     (case-lambda
       ((g$filename$11622$dF01I)
        (begin
          (apply
            g$load-r6rs-top-level$11616$dF01I
            g$filename$11622$dF01I
            'load
            (cdr (g$command-line$11607$dF01I)))
          (void)))))
   (g$ironscheme-build$11611$dF01I
     g$ironscheme-build$11651$dF01I
     (case-lambda (() (g$load$11610$dF01I '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11612$dF01I
     g$eval-top-level$11652$dF01I
     (case-lambda
       ((g$x$11623$dF01I)
        (g$eval$11579$dF01I
          g$x$11623$dF01I
          (g$interaction-environment$11604$dF01I)))))
   (g$compile-system-libraries$11613$dF01I
     g$compile-system-libraries$11653$dF01I
     (case-lambda
       (()
        (g$eval-top-level$11612$dF01I
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11614$dF01I
     g$compile$11654$dF01I
     (case-lambda
       ((g$filename$11624$dF01I)
        (g$load-r6rs-top-level$11616$dF01I g$filename$11624$dF01I 'compile))))
   (g$compile->closure$11615$dF01I
     g$compile->closure$11655$dF01I
     (case-lambda
       ((g$filename$11625$dF01I)
        (g$load-r6rs-top-level$11616$dF01I g$filename$11625$dF01I 'closure))))
   (g$load-r6rs-top-level$11616$dF01I
     g$load-r6rs-top-level$11656$dF01I
     (case-lambda
       ((g$filename$11626$dF01I g$how$11627$dF01I . g$args$11628$dF01I)
        ((case-lambda
           ((g$library-path$11631$dF01I g$library-path$11632$dF01I)
            ((case-lambda
               ((g$swap$11633$dF01I)
                (dynamic-wind
                  g$swap$11633$dF01I
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11634$dF01I)
                         ((case-lambda
                            ((g$t$11635$dF01I)
                             (if (g$memv$5056$dF01I g$t$11635$dF01I '(closure))
                               (g$pre-compile-r6rs-top-level$11602$dF01I
                                 g$x*$11634$dF01I)
                               (if (g$memv$5056$dF01I g$t$11635$dF01I '(load))
                                 ((case-lambda
                                    ((g$command-line$11638$dF01I
                                       g$command-line$11639$dF01I)
                                     ((case-lambda
                                        ((g$swap$11640$dF01I)
                                         (dynamic-wind
                                           g$swap$11640$dF01I
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11601$dF01I
                                                 g$x*$11634$dF01I))))
                                           g$swap$11640$dF01I)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11641$dF01I)
                                             (begin
                                               (g$command-line$11638$dF01I
                                                 g$command-line$11639$dF01I)
                                               (set! g$command-line$11639$dF01I
                                                 g$t$11641$dF01I))))
                                          (g$command-line$11638$dF01I)))))))
                                  g$command-line$11607$dF01I
                                  (cons
                                    g$filename$11626$dF01I
                                    (g$map$5063$dF01I
                                      (case-lambda
                                        ((g$x$11642$dF01I)
                                         (g$format$6559$dF01I
                                           '"~a"
                                           g$x$11642$dF01I)))
                                      g$args$11628$dF01I)))
                                 (if (g$memv$5056$dF01I
                                       g$t$11635$dF01I
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11601$dF01I
                                       g$x*$11634$dF01I)
                                     (g$serialize-all$7500$dF01I
                                       serialize-library
                                       g$compile-core-expr$7223$dF01I))
                                   (if '#f '#f (void)))))))
                          g$how$11627$dF01I)))
                      (g$with-input-from-file$6385$dF01I
                        g$filename$11626$dF01I
                        (case-lambda
                          (()
                           ((letrec ((g$f$11643$dF01I
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11644$dF01I)
                                              (if (eof-object? g$x$11644$dF01I)
                                                '()
                                                (cons
                                                  g$x$11644$dF01I
                                                  (g$f$11643$dF01I)))))
                                           (read-annotated))))))
                              g$f$11643$dF01I))))))))
                  g$swap$11633$dF01I)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11645$dF01I)
                    (begin
                      (g$library-path$11631$dF01I g$library-path$11632$dF01I)
                      (set! g$library-path$11632$dF01I g$t$11645$dF01I))))
                 (g$library-path$11631$dF01I)))))))
         g$library-path$7496$dF01I
         (g$local-library-path$11608$dF01I g$filename$11626$dF01I)))))
   (g$fo$11617$dF01I
     g$fo$11657$dF01I
     (g$make-enumeration$6521$dF01I '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7501$dF01I
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11618$dF01I)
         (if (g$serious-condition?$5820$dF01I g$ex$11618$dF01I)
           (raise g$ex$11618$dF01I)
           (begin (display g$ex$11618$dF01I) (g$newline$6389$dF01I))))))
    (set-symbol-value! 'load g$load$11610$dF01I)
    (set-symbol-value! 'compile g$compile$11614$dF01I)
    (set-symbol-value! 'compile->closure g$compile->closure$11615$dF01I)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11612$dF01I)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11570$dF01I)
    (set-symbol-value! 'expanded2core g$expanded->core$7222$dF01I)
    (set-symbol-value! 'trace-printer g$trace-printer$11606$dF01I)
    (set-symbol-value! 'convert->cps g$convert->cps$6876$dF01I)
    (g$file-options-constructor$6977$dF01I
      (g$enum-set-constructor$6524$dF01I g$fo$11617$dF01I))
    (g$library-path$7496$dF01I (get-library-paths))))

