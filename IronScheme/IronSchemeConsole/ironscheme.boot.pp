;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme lists)
  ((g$list-tail$4906$gDo33
     g$list-tail$5043$gDo33
     (case-lambda
       ((g$lst$4934$gDo33 g$index$4935$gDo33)
        (if ((case-lambda
               ((g$t$4936$gDo33)
                (if g$t$4936$gDo33
                  g$t$4936$gDo33
                  (begin '#f (g$negative?$5292$gDo33 g$index$4935$gDo33)))))
             (null? g$lst$4934$gDo33))
          (assertion-violation
            'list-tail
            '"index out of range"
            g$lst$4934$gDo33
            g$index$4935$gDo33)
          (if (g$zero?$5293$gDo33 g$index$4935$gDo33)
            g$lst$4934$gDo33
            (g$list-tail$4906$gDo33
              (cdr g$lst$4934$gDo33)
              (- g$index$4935$gDo33 '1)))))))
   (g$list-ref$4907$gDo33
     g$list-ref$5044$gDo33
     (case-lambda
       ((g$lst$4937$gDo33 g$index$4938$gDo33)
        (car (g$list-tail$4906$gDo33 g$lst$4937$gDo33 g$index$4938$gDo33)))))
   (g$last-pair$4908$gDo33
     g$last-pair$5045$gDo33
     (case-lambda
       ((g$lst$4939$gDo33)
        (if (null? g$lst$4939$gDo33)
          g$lst$4939$gDo33
          (if (null? (cdr g$lst$4939$gDo33))
            g$lst$4939$gDo33
            (g$last-pair$4908$gDo33 (cdr g$lst$4939$gDo33)))))))
   (g$make-list$4909$gDo33
     g$make-list$5046$gDo33
     (case-lambda
       ((g$n$4940$gDo33) (list->vector (make-vector g$n$4940$gDo33)))
       ((g$n$4941$gDo33 g$fill$4942$gDo33)
        (list->vector (make-vector g$n$4941$gDo33 g$fill$4942$gDo33)))))
   (g$find$4910$gDo33
     g$find$5047$gDo33
     (case-lambda
       ((g$proc$4943$gDo33 g$l$4944$gDo33)
        (if (null? g$l$4944$gDo33)
          '#f
          ((case-lambda
             ((g$e$4945$gDo33 g$r$4946$gDo33 g$proc$4947$gDo33)
              (if (g$proc$4947$gDo33 g$e$4945$gDo33)
                g$e$4945$gDo33
                (g$find$4910$gDo33 g$proc$4947$gDo33 g$r$4946$gDo33))))
           (car g$l$4944$gDo33)
           (cdr g$l$4944$gDo33)
           g$proc$4943$gDo33)))))
   (g$partition$4911$gDo33
     g$partition$5048$gDo33
     (case-lambda
       ((g$proc$4948$gDo33 g$l$4949$gDo33)
        ((letrec ((g$f$4950$gDo33
                    (case-lambda
                      ((g$l$4951$gDo33 g$a$4952$gDo33 g$b$4953$gDo33)
                       (if (null? g$l$4951$gDo33)
                         (values
                           (reverse! g$a$4952$gDo33)
                           (reverse! g$b$4953$gDo33))
                         ((case-lambda
                            ((g$e$4954$gDo33)
                             (if (g$proc$4948$gDo33 g$e$4954$gDo33)
                               (g$f$4950$gDo33
                                 (cdr g$l$4951$gDo33)
                                 (cons g$e$4954$gDo33 g$a$4952$gDo33)
                                 g$b$4953$gDo33)
                               (g$f$4950$gDo33
                                 (cdr g$l$4951$gDo33)
                                 g$a$4952$gDo33
                                 (cons g$e$4954$gDo33 g$b$4953$gDo33)))))
                          (car g$l$4951$gDo33)))))))
           g$f$4950$gDo33)
         g$l$4949$gDo33
         '()
         '()))))
   (g$remp$4912$gDo33
     g$remp$5049$gDo33
     (case-lambda
       ((g$proc$4955$gDo33 g$l$4956$gDo33)
        ((letrec ((g$f$4957$gDo33
                    (case-lambda
                      ((g$l$4958$gDo33 g$a$4959$gDo33)
                       (if (null? g$l$4958$gDo33)
                         (reverse! g$a$4959$gDo33)
                         ((case-lambda
                            ((g$e$4960$gDo33)
                             (if (g$proc$4955$gDo33 g$e$4960$gDo33)
                               (g$f$4957$gDo33
                                 (cdr g$l$4958$gDo33)
                                 g$a$4959$gDo33)
                               (g$f$4957$gDo33
                                 (cdr g$l$4958$gDo33)
                                 (cons g$e$4960$gDo33 g$a$4959$gDo33)))))
                          (car g$l$4958$gDo33)))))))
           g$f$4957$gDo33)
         g$l$4956$gDo33
         '()))))
   (g$filter$4913$gDo33
     g$filter$5050$gDo33
     (case-lambda
       ((g$proc$4961$gDo33 g$l$4962$gDo33)
        ((letrec ((g$f$4963$gDo33
                    (case-lambda
                      ((g$l$4964$gDo33 g$a$4965$gDo33)
                       (if (null? g$l$4964$gDo33)
                         (reverse! g$a$4965$gDo33)
                         ((case-lambda
                            ((g$e$4966$gDo33)
                             (if (g$proc$4961$gDo33 g$e$4966$gDo33)
                               (g$f$4963$gDo33
                                 (cdr g$l$4964$gDo33)
                                 (cons g$e$4966$gDo33 g$a$4965$gDo33))
                               (g$f$4963$gDo33
                                 (cdr g$l$4964$gDo33)
                                 g$a$4965$gDo33))))
                          (car g$l$4964$gDo33)))))))
           g$f$4963$gDo33)
         g$l$4962$gDo33
         '()))))
   (g$assq$4914$gDo33
     g$assq$5051$gDo33
     (case-lambda
       ((g$obj$4967$gDo33 g$lst$4968$gDo33)
        (if (null? g$lst$4968$gDo33)
          '#f
          ((case-lambda
             ((g$obj$4969$gDo33 g$t$4970$gDo33 g$r$4971$gDo33)
              (if (eq? g$obj$4969$gDo33 (car g$t$4970$gDo33))
                g$t$4970$gDo33
                (g$assq$4914$gDo33 g$obj$4969$gDo33 g$r$4971$gDo33))))
           g$obj$4967$gDo33
           (car g$lst$4968$gDo33)
           (cdr g$lst$4968$gDo33))))))
   (g$assv$4915$gDo33
     g$assv$5052$gDo33
     (case-lambda
       ((g$obj$4972$gDo33 g$lst$4973$gDo33)
        (if (null? g$lst$4973$gDo33)
          '#f
          ((case-lambda
             ((g$obj$4974$gDo33 g$t$4975$gDo33 g$r$4976$gDo33)
              (if (eqv? g$obj$4974$gDo33 (car g$t$4975$gDo33))
                g$t$4975$gDo33
                (g$assv$4915$gDo33 g$obj$4974$gDo33 g$r$4976$gDo33))))
           g$obj$4972$gDo33
           (car g$lst$4973$gDo33)
           (cdr g$lst$4973$gDo33))))))
   (g$assoc$4916$gDo33
     g$assoc$5053$gDo33
     (case-lambda
       ((g$obj$4977$gDo33 g$lst$4978$gDo33)
        (if (null? g$lst$4978$gDo33)
          '#f
          ((case-lambda
             ((g$obj$4979$gDo33 g$t$4980$gDo33 g$r$4981$gDo33)
              (if (equal? g$obj$4979$gDo33 (car g$t$4980$gDo33))
                g$t$4980$gDo33
                (g$assoc$4916$gDo33 g$obj$4979$gDo33 g$r$4981$gDo33))))
           g$obj$4977$gDo33
           (car g$lst$4978$gDo33)
           (cdr g$lst$4978$gDo33))))))
   (g$assp$4917$gDo33
     g$assp$5054$gDo33
     (case-lambda
       ((g$p?$4982$gDo33 g$lst$4983$gDo33)
        (if (null? g$lst$4983$gDo33)
          '#f
          ((case-lambda
             ((g$p?$4984$gDo33 g$t$4985$gDo33 g$r$4986$gDo33)
              (if (g$p?$4984$gDo33 (car g$t$4985$gDo33))
                g$t$4985$gDo33
                (g$assp$4917$gDo33 g$p?$4984$gDo33 g$r$4986$gDo33))))
           g$p?$4982$gDo33
           (car g$lst$4983$gDo33)
           (cdr g$lst$4983$gDo33))))))
   (g$memq$4918$gDo33
     g$memq$5055$gDo33
     (case-lambda
       ((g$obj$4987$gDo33 g$lst$4988$gDo33)
        (if (null? g$lst$4988$gDo33)
          '#f
          (if (eq? g$obj$4987$gDo33 (car g$lst$4988$gDo33))
            g$lst$4988$gDo33
            (g$memq$4918$gDo33 g$obj$4987$gDo33 (cdr g$lst$4988$gDo33)))))))
   (g$memv$4919$gDo33
     g$memv$5056$gDo33
     (case-lambda
       ((g$obj$4989$gDo33 g$lst$4990$gDo33)
        (if (null? g$lst$4990$gDo33)
          '#f
          (if (eqv? g$obj$4989$gDo33 (car g$lst$4990$gDo33))
            g$lst$4990$gDo33
            (g$memv$4919$gDo33 g$obj$4989$gDo33 (cdr g$lst$4990$gDo33)))))))
   (g$member$4920$gDo33
     g$member$5057$gDo33
     (case-lambda
       ((g$obj$4991$gDo33 g$lst$4992$gDo33)
        (if (null? g$lst$4992$gDo33)
          '#f
          (if (equal? g$obj$4991$gDo33 (car g$lst$4992$gDo33))
            g$lst$4992$gDo33
            (g$member$4920$gDo33 g$obj$4991$gDo33 (cdr g$lst$4992$gDo33)))))))
   (g$memp$4921$gDo33
     g$memp$5058$gDo33
     (case-lambda
       ((g$p?$4993$gDo33 g$lst$4994$gDo33)
        (if (null? g$lst$4994$gDo33)
          '#f
          (if (g$p?$4993$gDo33 (car g$lst$4994$gDo33))
            g$lst$4994$gDo33
            (g$memp$4921$gDo33 g$p?$4993$gDo33 (cdr g$lst$4994$gDo33)))))))
   (g$all-empty?$4922$gDo33
     g$all-empty?$5059$gDo33
     (case-lambda
       ((g$ls$4995$gDo33)
        ((case-lambda
           ((g$t$4996$gDo33)
            (if g$t$4996$gDo33
              g$t$4996$gDo33
              (begin
                '#f
                (if (null? (car g$ls$4995$gDo33))
                  (begin '#f (g$all-empty?$4922$gDo33 (cdr g$ls$4995$gDo33)))
                  '#f)))))
         (null? g$ls$4995$gDo33)))))
   (g$split$4923$gDo33
     g$split$5060$gDo33
     (case-lambda
       ((g$ls$4997$gDo33)
        (if (null? g$ls$4997$gDo33)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$4923$gDo33 (cdr g$ls$4997$gDo33))))
            (case-lambda
              ((g$cars$4998$gDo33 g$cdrs$4999$gDo33)
               ((case-lambda
                  ((g$a$5000$gDo33)
                   (values
                     (cons (car g$a$5000$gDo33) g$cars$4998$gDo33)
                     (cons (cdr g$a$5000$gDo33) g$cdrs$4999$gDo33))))
                (car g$ls$4997$gDo33)))))))))
   (g$for-all$4924$gDo33
     g$for-all$5061$gDo33
     (case-lambda
       ((g$f$5001$gDo33 . g$args$5002$gDo33)
        (if (g$all-empty?$4922$gDo33 g$args$5002$gDo33)
          '#t
          (call-with-values
            (case-lambda (() (g$split$4923$gDo33 g$args$5002$gDo33)))
            (case-lambda
              ((g$cars$5003$gDo33 g$cdrs$5004$gDo33)
               (if (g$all-empty?$4922$gDo33 g$cdrs$5004$gDo33)
                 (apply g$f$5001$gDo33 g$cars$5003$gDo33)
                 (if (apply g$f$5001$gDo33 g$cars$5003$gDo33)
                   (begin
                     '#f
                     (apply
                       g$for-all$4924$gDo33
                       g$f$5001$gDo33
                       g$cdrs$5004$gDo33))
                   '#f)))))))))
   (g$exists$4925$gDo33
     g$exists$5062$gDo33
     (case-lambda
       ((g$f$5005$gDo33 . g$args$5006$gDo33)
        (if (g$all-empty?$4922$gDo33 g$args$5006$gDo33)
          '#f
          (call-with-values
            (case-lambda (() (g$split$4923$gDo33 g$args$5006$gDo33)))
            (case-lambda
              ((g$cars$5007$gDo33 g$cdrs$5008$gDo33)
               ((case-lambda
                  ((g$t$5009$gDo33)
                   (if g$t$5009$gDo33
                     g$t$5009$gDo33
                     (begin
                       '#f
                       (apply
                         g$exists$4925$gDo33
                         g$f$5005$gDo33
                         g$cdrs$5008$gDo33)))))
                (apply g$f$5005$gDo33 g$cars$5007$gDo33)))))))))
   (g$map$4926$gDo33
     g$map$5063$gDo33
     (case-lambda
       ((g$proc$5010$gDo33 . g$lists$5011$gDo33)
        ((letrec ((g$f$5012$gDo33
                    (case-lambda
                      ((g$lists$5013$gDo33 g$a$5014$gDo33)
                       (if (g$all-empty?$4922$gDo33 g$lists$5013$gDo33)
                         (reverse! g$a$5014$gDo33)
                         (call-with-values
                           (case-lambda
                             (() (g$split$4923$gDo33 g$lists$5013$gDo33)))
                           (case-lambda
                             ((g$cars$5015$gDo33 g$cdrs$5016$gDo33)
                              (g$f$5012$gDo33
                                g$cdrs$5016$gDo33
                                (cons
                                  (apply g$proc$5010$gDo33 g$cars$5015$gDo33)
                                  g$a$5014$gDo33))))))))))
           g$f$5012$gDo33)
         g$lists$5011$gDo33
         '()))))
   (g$for-each$4927$gDo33
     g$for-each$5064$gDo33
     (case-lambda
       ((g$f$5017$gDo33 . g$args$5018$gDo33)
        (if (not (g$all-empty?$4922$gDo33 g$args$5018$gDo33))
          (call-with-values
            (case-lambda (() (g$split$4923$gDo33 g$args$5018$gDo33)))
            (case-lambda
              ((g$cars$5019$gDo33 g$cdrs$5020$gDo33)
               (begin
                 (apply g$f$5017$gDo33 g$cars$5019$gDo33)
                 (apply
                   g$for-each$4927$gDo33
                   g$f$5017$gDo33
                   g$cdrs$5020$gDo33)))))
          (void)))))
   (g$cons*$4928$gDo33
     g$cons*$5065$gDo33
     (case-lambda
       ((g$a$5021$gDo33 . g$rest$5022$gDo33)
        ((letrec ((g$f$5023$gDo33
                    (case-lambda
                      ((g$a$5024$gDo33 g$rest$5025$gDo33)
                       (if (null? g$rest$5025$gDo33)
                         g$a$5024$gDo33
                         (cons
                           g$a$5024$gDo33
                           (g$f$5023$gDo33
                             (car g$rest$5025$gDo33)
                             (cdr g$rest$5025$gDo33))))))))
           g$f$5023$gDo33)
         g$a$5021$gDo33
         g$rest$5022$gDo33))))
   (g$fold-left$4929$gDo33
     g$fold-left$5066$gDo33
     (case-lambda
       ((g$combine$5026$gDo33
          g$nil$5027$gDo33
          g$list1$5028$gDo33
          .
          g$lists$5029$gDo33)
        (if (null? g$list1$5028$gDo33)
          g$nil$5027$gDo33
          (apply
            g$fold-left$4929$gDo33
            (g$cons*$4928$gDo33
              g$combine$5026$gDo33
              (apply
                g$combine$5026$gDo33
                (g$cons*$4928$gDo33
                  g$nil$5027$gDo33
                  (car g$list1$5028$gDo33)
                  (g$map$4926$gDo33 car g$lists$5029$gDo33)))
              (cdr g$list1$5028$gDo33)
              (g$map$4926$gDo33 cdr g$lists$5029$gDo33)))))))
   (g$fold-right$4930$gDo33
     g$fold-right$5067$gDo33
     (case-lambda
       ((g$combine$5030$gDo33
          g$nil$5031$gDo33
          g$list1$5032$gDo33
          .
          g$lists$5033$gDo33)
        (if (null? g$list1$5032$gDo33)
          g$nil$5031$gDo33
          (apply
            g$combine$5030$gDo33
            (append
              (list (car g$list1$5032$gDo33))
              (g$map$4926$gDo33 car g$lists$5033$gDo33)
              (list
                (apply
                  g$fold-right$4930$gDo33
                  (g$cons*$4928$gDo33
                    g$combine$5030$gDo33
                    g$nil$5031$gDo33
                    (cdr g$list1$5032$gDo33)
                    (g$map$4926$gDo33 cdr g$lists$5033$gDo33))))))))))
   (g$remove$4931$gDo33
     g$remove$5068$gDo33
     (case-lambda
       ((g$obj$5034$gDo33 g$list$5035$gDo33)
        (g$remp$4912$gDo33
          (case-lambda
            ((g$x$5036$gDo33) (equal? g$obj$5034$gDo33 g$x$5036$gDo33)))
          g$list$5035$gDo33))))
   (g$remv$4932$gDo33
     g$remv$5069$gDo33
     (case-lambda
       ((g$obj$5037$gDo33 g$list$5038$gDo33)
        (g$remp$4912$gDo33
          (case-lambda
            ((g$x$5039$gDo33) (eqv? g$obj$5037$gDo33 g$x$5039$gDo33)))
          g$list$5038$gDo33))))
   (g$remq$4933$gDo33
     g$remq$5070$gDo33
     (case-lambda
       ((g$obj$5040$gDo33 g$list$5041$gDo33)
        (g$remp$4912$gDo33
          (case-lambda ((g$x$5042$gDo33) (eq? g$obj$5040$gDo33 g$x$5042$gDo33)))
          g$list$5041$gDo33)))))
  (void))

(library-letrec* (ironscheme base)
  ((g$caar$5071$gDo33
     g$caar$5263$gDo33
     (case-lambda ((g$x$5135$gDo33) (car (car g$x$5135$gDo33)))))
   (g$cadr$5072$gDo33
     g$cadr$5264$gDo33
     (case-lambda ((g$x$5136$gDo33) (car (cdr g$x$5136$gDo33)))))
   (g$cdar$5073$gDo33
     g$cdar$5265$gDo33
     (case-lambda ((g$x$5137$gDo33) (cdr (car g$x$5137$gDo33)))))
   (g$cddr$5074$gDo33
     g$cddr$5266$gDo33
     (case-lambda ((g$x$5138$gDo33) (cdr (cdr g$x$5138$gDo33)))))
   (g$caaar$5075$gDo33
     g$caaar$5267$gDo33
     (case-lambda
       ((g$x$5139$gDo33) (g$caar$5071$gDo33 (car g$x$5139$gDo33)))))
   (g$caadr$5076$gDo33
     g$caadr$5268$gDo33
     (case-lambda
       ((g$x$5140$gDo33) (g$caar$5071$gDo33 (cdr g$x$5140$gDo33)))))
   (g$cadar$5077$gDo33
     g$cadar$5269$gDo33
     (case-lambda
       ((g$x$5141$gDo33) (g$cadr$5072$gDo33 (car g$x$5141$gDo33)))))
   (g$caddr$5078$gDo33
     g$caddr$5270$gDo33
     (case-lambda
       ((g$x$5142$gDo33) (g$cadr$5072$gDo33 (cdr g$x$5142$gDo33)))))
   (g$cdaar$5079$gDo33
     g$cdaar$5271$gDo33
     (case-lambda
       ((g$x$5143$gDo33) (g$cdar$5073$gDo33 (car g$x$5143$gDo33)))))
   (g$cdadr$5080$gDo33
     g$cdadr$5272$gDo33
     (case-lambda
       ((g$x$5144$gDo33) (g$cdar$5073$gDo33 (cdr g$x$5144$gDo33)))))
   (g$cddar$5081$gDo33
     g$cddar$5273$gDo33
     (case-lambda
       ((g$x$5145$gDo33) (g$cddr$5074$gDo33 (car g$x$5145$gDo33)))))
   (g$cdddr$5082$gDo33
     g$cdddr$5274$gDo33
     (case-lambda
       ((g$x$5146$gDo33) (g$cddr$5074$gDo33 (cdr g$x$5146$gDo33)))))
   (g$caaaar$5083$gDo33
     g$caaaar$5275$gDo33
     (case-lambda
       ((g$x$5147$gDo33) (g$caaar$5075$gDo33 (car g$x$5147$gDo33)))))
   (g$caaadr$5084$gDo33
     g$caaadr$5276$gDo33
     (case-lambda
       ((g$x$5148$gDo33) (g$caaar$5075$gDo33 (cdr g$x$5148$gDo33)))))
   (g$caadar$5085$gDo33
     g$caadar$5277$gDo33
     (case-lambda
       ((g$x$5149$gDo33) (g$caadr$5076$gDo33 (car g$x$5149$gDo33)))))
   (g$caaddr$5086$gDo33
     g$caaddr$5278$gDo33
     (case-lambda
       ((g$x$5150$gDo33) (g$caadr$5076$gDo33 (cdr g$x$5150$gDo33)))))
   (g$cadaar$5087$gDo33
     g$cadaar$5279$gDo33
     (case-lambda
       ((g$x$5151$gDo33) (g$cadar$5077$gDo33 (car g$x$5151$gDo33)))))
   (g$cadadr$5088$gDo33
     g$cadadr$5280$gDo33
     (case-lambda
       ((g$x$5152$gDo33) (g$cadar$5077$gDo33 (cdr g$x$5152$gDo33)))))
   (g$caddar$5089$gDo33
     g$caddar$5281$gDo33
     (case-lambda
       ((g$x$5153$gDo33) (g$caddr$5078$gDo33 (car g$x$5153$gDo33)))))
   (g$cadddr$5090$gDo33
     g$cadddr$5282$gDo33
     (case-lambda
       ((g$x$5154$gDo33) (g$caddr$5078$gDo33 (cdr g$x$5154$gDo33)))))
   (g$cdaaar$5091$gDo33
     g$cdaaar$5283$gDo33
     (case-lambda
       ((g$x$5155$gDo33) (g$cdaar$5079$gDo33 (car g$x$5155$gDo33)))))
   (g$cdaadr$5092$gDo33
     g$cdaadr$5284$gDo33
     (case-lambda
       ((g$x$5156$gDo33) (g$cdaar$5079$gDo33 (cdr g$x$5156$gDo33)))))
   (g$cdadar$5093$gDo33
     g$cdadar$5285$gDo33
     (case-lambda
       ((g$x$5157$gDo33) (g$cdadr$5080$gDo33 (car g$x$5157$gDo33)))))
   (g$cdaddr$5094$gDo33
     g$cdaddr$5286$gDo33
     (case-lambda
       ((g$x$5158$gDo33) (g$cdadr$5080$gDo33 (cdr g$x$5158$gDo33)))))
   (g$cddaar$5095$gDo33
     g$cddaar$5287$gDo33
     (case-lambda
       ((g$x$5159$gDo33) (g$cddar$5081$gDo33 (car g$x$5159$gDo33)))))
   (g$cddadr$5096$gDo33
     g$cddadr$5288$gDo33
     (case-lambda
       ((g$x$5160$gDo33) (g$cddar$5081$gDo33 (cdr g$x$5160$gDo33)))))
   (g$cdddar$5097$gDo33
     g$cdddar$5289$gDo33
     (case-lambda
       ((g$x$5161$gDo33) (g$cdddr$5082$gDo33 (car g$x$5161$gDo33)))))
   (g$cddddr$5098$gDo33
     g$cddddr$5290$gDo33
     (case-lambda
       ((g$x$5162$gDo33) (g$cdddr$5082$gDo33 (cdr g$x$5162$gDo33)))))
   (g$positive?$5099$gDo33
     g$positive?$5291$gDo33
     (case-lambda
       ((g$r$5163$gDo33)
        (begin
          (if (not (real-valued? g$r$5163$gDo33))
            (assertion-violation 'positive? '"not a real" g$r$5163$gDo33)
            (void))
          (< '0 g$r$5163$gDo33)))))
   (g$negative?$5100$gDo33
     g$negative?$5292$gDo33
     (case-lambda
       ((g$r$5164$gDo33)
        (begin
          (if (not (real-valued? g$r$5164$gDo33))
            (assertion-violation 'negative? '"not a real" g$r$5164$gDo33)
            (void))
          (> '0 g$r$5164$gDo33)))))
   (g$zero?$5101$gDo33
     g$zero?$5293$gDo33
     (case-lambda
       ((g$r$5165$gDo33)
        (begin
          (if (not (real-valued? g$r$5165$gDo33))
            (assertion-violation 'zero? '"not a real" g$r$5165$gDo33)
            (void))
          (= '0 g$r$5165$gDo33)))))
   (g$even?$5102$gDo33
     g$even?$5294$gDo33
     (case-lambda
       ((g$n$5166$gDo33)
        (begin
          (if (not (integer-valued? g$n$5166$gDo33))
            (assertion-violation 'even? '"not a integer" g$n$5166$gDo33)
            (void))
          (= '0 (mod g$n$5166$gDo33 '2))))))
   (g$odd?$5103$gDo33
     g$odd?$5295$gDo33
     (case-lambda
       ((g$n$5167$gDo33)
        (begin
          (if (not (integer-valued? g$n$5167$gDo33))
            (assertion-violation 'odd? '"not a integer" g$n$5167$gDo33)
            (void))
          (= '1 (mod g$n$5167$gDo33 '2))))))
   (g$max$5104$gDo33
     g$max$5296$gDo33
     (case-lambda
       ((g$a$5168$gDo33 . g$rest$5169$gDo33)
        (g$fold-left$5066$gDo33
          (case-lambda
            ((g$a$5170$gDo33 g$b$5171$gDo33)
             ((case-lambda
                ((g$r$5172$gDo33)
                 (if ((case-lambda
                        ((g$t$5173$gDo33)
                         (if g$t$5173$gDo33
                           g$t$5173$gDo33
                           (begin '#f (inexact? g$b$5171$gDo33)))))
                      (inexact? g$a$5170$gDo33))
                   (inexact g$r$5172$gDo33)
                   g$r$5172$gDo33)))
              (if (< g$a$5170$gDo33 g$b$5171$gDo33)
                g$b$5171$gDo33
                g$a$5170$gDo33))))
          g$a$5168$gDo33
          g$rest$5169$gDo33))))
   (g$min$5105$gDo33
     g$min$5297$gDo33
     (case-lambda
       ((g$a$5174$gDo33 . g$rest$5175$gDo33)
        (g$fold-left$5066$gDo33
          (case-lambda
            ((g$a$5176$gDo33 g$b$5177$gDo33)
             ((case-lambda
                ((g$r$5178$gDo33)
                 (if ((case-lambda
                        ((g$t$5179$gDo33)
                         (if g$t$5179$gDo33
                           g$t$5179$gDo33
                           (begin '#f (inexact? g$b$5177$gDo33)))))
                      (inexact? g$a$5176$gDo33))
                   (inexact g$r$5178$gDo33)
                   g$r$5178$gDo33)))
              (if (> g$a$5176$gDo33 g$b$5177$gDo33)
                g$b$5177$gDo33
                g$a$5176$gDo33))))
          g$a$5174$gDo33
          g$rest$5175$gDo33))))
   (g$gcd$5106$gDo33
     g$gcd$5298$gDo33
     (case-lambda
       (g$nums$5180$gDo33
        ((case-lambda
           ((g$t$5181$gDo33)
            (if (g$memv$5056$gDo33 g$t$5181$gDo33 '(0))
              '0
              (if (g$memv$5056$gDo33 g$t$5181$gDo33 '(1))
                ((case-lambda
                   ((g$n$5182$gDo33)
                    (begin
                      (if (not (integer-valued? g$n$5182$gDo33))
                        (assertion-violation
                          'gcd
                          '"not an integer"
                          g$n$5182$gDo33)
                        (void))
                      (abs g$n$5182$gDo33))))
                 (car g$nums$5180$gDo33))
                (if (g$memv$5056$gDo33 g$t$5181$gDo33 '(2))
                  ((case-lambda
                     ((g$a$5183$gDo33 g$b$5184$gDo33)
                      (begin
                        (if (not (integer-valued? g$a$5183$gDo33))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$a$5183$gDo33)
                          (void))
                        (if (not (integer-valued? g$b$5184$gDo33))
                          (assertion-violation
                            'gcd
                            '"not an integer"
                            g$b$5184$gDo33)
                          (void))
                        (if (g$zero?$5101$gDo33 g$b$5184$gDo33)
                          (abs g$a$5183$gDo33)
                          (abs (g$gcd$5106$gDo33
                                 g$b$5184$gDo33
                                 (mod g$a$5183$gDo33 g$b$5184$gDo33)))))))
                   (car g$nums$5180$gDo33)
                   (g$cadr$5072$gDo33 g$nums$5180$gDo33))
                  (g$fold-left$5066$gDo33
                    g$gcd$5106$gDo33
                    (abs (car g$nums$5180$gDo33))
                    (cdr g$nums$5180$gDo33)))))))
         (length g$nums$5180$gDo33)))))
   (g$lcm$5107$gDo33
     g$lcm$5299$gDo33
     (case-lambda
       (g$nums$5185$gDo33
        ((case-lambda
           ((g$t$5186$gDo33)
            (if (g$memv$5056$gDo33 g$t$5186$gDo33 '(0))
              '1
              (if (g$memv$5056$gDo33 g$t$5186$gDo33 '(1))
                ((case-lambda
                   ((g$n$5187$gDo33)
                    (begin
                      (if (not (integer-valued? g$n$5187$gDo33))
                        (assertion-violation
                          'lcm
                          '"not an integer"
                          g$n$5187$gDo33)
                        (void))
                      (abs g$n$5187$gDo33))))
                 (car g$nums$5185$gDo33))
                (if (g$memv$5056$gDo33 g$t$5186$gDo33 '(2))
                  ((case-lambda
                     ((g$a$5188$gDo33 g$b$5189$gDo33)
                      (begin
                        (if (not (integer-valued? g$a$5188$gDo33))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$a$5188$gDo33)
                          (void))
                        (if (not (integer-valued? g$b$5189$gDo33))
                          (assertion-violation
                            'lcm
                            '"not an integer"
                            g$b$5189$gDo33)
                          (void))
                        (if ((case-lambda
                               ((g$t$5190$gDo33)
                                (if g$t$5190$gDo33
                                  g$t$5190$gDo33
                                  (begin
                                    '#f
                                    (g$zero?$5101$gDo33 g$b$5189$gDo33)))))
                             (g$zero?$5101$gDo33 g$a$5188$gDo33))
                          '0
                          (abs (* (/ g$a$5188$gDo33
                                     (g$gcd$5106$gDo33
                                       g$a$5188$gDo33
                                       g$b$5189$gDo33))
                                  g$b$5189$gDo33))))))
                   (car g$nums$5185$gDo33)
                   (g$cadr$5072$gDo33 g$nums$5185$gDo33))
                  (g$fold-left$5066$gDo33
                    g$lcm$5107$gDo33
                    (abs (car g$nums$5185$gDo33))
                    (cdr g$nums$5185$gDo33)))))))
         (length g$nums$5185$gDo33)))))
   (g$string=?$5114$gDo33
     g$string=?$5300$gDo33
     (case-lambda
       ((g$a$5191$gDo33 g$b$5192$gDo33 . g$rest$5193$gDo33)
        (begin
          (if (not (string? g$a$5191$gDo33))
            (assertion-violation 'string=? '"not a string" g$a$5191$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5194$gDo33)
               (begin
                 (if (not (string? g$x$5194$gDo33))
                   (assertion-violation
                     'string=?
                     '"not a string"
                     g$x$5194$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5195$gDo33)
                     (begin
                       (set! g$a$5191$gDo33 g$x$5194$gDo33)
                       g$r$5195$gDo33)))
                  (= (string-compare g$a$5191$gDo33 g$x$5194$gDo33) '0)))))
            (cons g$b$5192$gDo33 g$rest$5193$gDo33))))))
   (g$string<?$5115$gDo33
     g$string<?$5301$gDo33
     (case-lambda
       ((g$a$5196$gDo33 g$b$5197$gDo33 . g$rest$5198$gDo33)
        (begin
          (if (not (string? g$a$5196$gDo33))
            (assertion-violation 'string<? '"not a string" g$a$5196$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5199$gDo33)
               (begin
                 (if (not (string? g$x$5199$gDo33))
                   (assertion-violation
                     'string<?
                     '"not a string"
                     g$x$5199$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5200$gDo33)
                     (begin
                       (set! g$a$5196$gDo33 g$x$5199$gDo33)
                       g$r$5200$gDo33)))
                  (< (string-compare g$a$5196$gDo33 g$x$5199$gDo33) '0)))))
            (cons g$b$5197$gDo33 g$rest$5198$gDo33))))))
   (g$string>?$5116$gDo33
     g$string>?$5302$gDo33
     (case-lambda
       ((g$a$5201$gDo33 g$b$5202$gDo33 . g$rest$5203$gDo33)
        (begin
          (if (not (string? g$a$5201$gDo33))
            (assertion-violation 'string>? '"not a string" g$a$5201$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5204$gDo33)
               (begin
                 (if (not (string? g$x$5204$gDo33))
                   (assertion-violation
                     'string>?
                     '"not a string"
                     g$x$5204$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5205$gDo33)
                     (begin
                       (set! g$a$5201$gDo33 g$x$5204$gDo33)
                       g$r$5205$gDo33)))
                  (> (string-compare g$a$5201$gDo33 g$x$5204$gDo33) '0)))))
            (cons g$b$5202$gDo33 g$rest$5203$gDo33))))))
   (g$string<=?$5117$gDo33
     g$string<=?$5303$gDo33
     (case-lambda
       ((g$a$5206$gDo33 g$b$5207$gDo33 . g$rest$5208$gDo33)
        (begin
          (if (not (string? g$a$5206$gDo33))
            (assertion-violation 'string<=? '"not a string" g$a$5206$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5209$gDo33)
               (begin
                 (if (not (string? g$x$5209$gDo33))
                   (assertion-violation
                     'string<=?
                     '"not a string"
                     g$x$5209$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5210$gDo33)
                     (begin
                       (set! g$a$5206$gDo33 g$x$5209$gDo33)
                       g$r$5210$gDo33)))
                  (<= (string-compare g$a$5206$gDo33 g$x$5209$gDo33) '0)))))
            (cons g$b$5207$gDo33 g$rest$5208$gDo33))))))
   (g$string>=?$5118$gDo33
     g$string>=?$5304$gDo33
     (case-lambda
       ((g$a$5211$gDo33 g$b$5212$gDo33 . g$rest$5213$gDo33)
        (begin
          (if (not (string? g$a$5211$gDo33))
            (assertion-violation 'string>=? '"not a string" g$a$5211$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5214$gDo33)
               (begin
                 (if (not (string? g$x$5214$gDo33))
                   (assertion-violation
                     'string>=?
                     '"not a string"
                     g$x$5214$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5215$gDo33)
                     (begin
                       (set! g$a$5211$gDo33 g$x$5214$gDo33)
                       g$r$5215$gDo33)))
                  (>= (string-compare g$a$5211$gDo33 g$x$5214$gDo33) '0)))))
            (cons g$b$5212$gDo33 g$rest$5213$gDo33))))))
   (g$symbol=?$5119$gDo33
     g$symbol=?$5305$gDo33
     (case-lambda
       ((g$a$5216$gDo33 g$b$5217$gDo33 . g$rest$5218$gDo33)
        (begin
          (if (not (symbol? g$a$5216$gDo33))
            (assertion-violation 'symbol=? '"not a symbol" g$a$5216$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5219$gDo33)
               (begin
                 (if (not (symbol? g$x$5219$gDo33))
                   (assertion-violation
                     'symbol=?
                     '"not a symbol"
                     g$x$5219$gDo33)
                   (void))
                 (eq? g$a$5216$gDo33 g$x$5219$gDo33))))
            (cons g$b$5217$gDo33 g$rest$5218$gDo33))))))
   (g$boolean=?$5120$gDo33
     g$boolean=?$5306$gDo33
     (case-lambda
       ((g$a$5220$gDo33 g$b$5221$gDo33 . g$rest$5222$gDo33)
        (begin
          (if (not (boolean? g$a$5220$gDo33))
            (assertion-violation 'boolean=? '"not a boolean" g$a$5220$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5223$gDo33)
               (begin
                 (if (not (boolean? g$x$5223$gDo33))
                   (assertion-violation
                     'boolean=?
                     '"not a boolean"
                     g$x$5223$gDo33)
                   (void))
                 (eq? g$a$5220$gDo33 g$x$5223$gDo33))))
            (cons g$b$5221$gDo33 g$rest$5222$gDo33))))))
   (g$char=?$5127$gDo33
     g$char=?$5307$gDo33
     (case-lambda
       ((g$a$5224$gDo33 g$b$5225$gDo33 . g$rest$5226$gDo33)
        (begin
          (if (not (char? g$a$5224$gDo33))
            (assertion-violation 'char=? '"not a char" g$a$5224$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5227$gDo33)
               (begin
                 (if (not (char? g$x$5227$gDo33))
                   (assertion-violation 'char=? '"not a char" g$x$5227$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5228$gDo33)
                     (begin
                       (set! g$a$5224$gDo33 g$x$5227$gDo33)
                       g$r$5228$gDo33)))
                  (= (char->integer g$a$5224$gDo33)
                     (char->integer g$x$5227$gDo33))))))
            (cons g$b$5225$gDo33 g$rest$5226$gDo33))))))
   (g$char<?$5128$gDo33
     g$char<?$5308$gDo33
     (case-lambda
       ((g$a$5229$gDo33 g$b$5230$gDo33 . g$rest$5231$gDo33)
        (begin
          (if (not (char? g$a$5229$gDo33))
            (assertion-violation 'char<? '"not a char" g$a$5229$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5232$gDo33)
               (begin
                 (if (not (char? g$x$5232$gDo33))
                   (assertion-violation 'char<? '"not a char" g$x$5232$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5233$gDo33)
                     (begin
                       (set! g$a$5229$gDo33 g$x$5232$gDo33)
                       g$r$5233$gDo33)))
                  (< (char->integer g$a$5229$gDo33)
                     (char->integer g$x$5232$gDo33))))))
            (cons g$b$5230$gDo33 g$rest$5231$gDo33))))))
   (g$char>?$5129$gDo33
     g$char>?$5309$gDo33
     (case-lambda
       ((g$a$5234$gDo33 g$b$5235$gDo33 . g$rest$5236$gDo33)
        (begin
          (if (not (char? g$a$5234$gDo33))
            (assertion-violation 'char>? '"not a char" g$a$5234$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5237$gDo33)
               (begin
                 (if (not (char? g$x$5237$gDo33))
                   (assertion-violation 'char>? '"not a char" g$x$5237$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5238$gDo33)
                     (begin
                       (set! g$a$5234$gDo33 g$x$5237$gDo33)
                       g$r$5238$gDo33)))
                  (> (char->integer g$a$5234$gDo33)
                     (char->integer g$x$5237$gDo33))))))
            (cons g$b$5235$gDo33 g$rest$5236$gDo33))))))
   (g$char<=?$5130$gDo33
     g$char<=?$5310$gDo33
     (case-lambda
       ((g$a$5239$gDo33 g$b$5240$gDo33 . g$rest$5241$gDo33)
        (begin
          (if (not (char? g$a$5239$gDo33))
            (assertion-violation 'char<=? '"not a char" g$a$5239$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5242$gDo33)
               (begin
                 (if (not (char? g$x$5242$gDo33))
                   (assertion-violation 'char<=? '"not a char" g$x$5242$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5243$gDo33)
                     (begin
                       (set! g$a$5239$gDo33 g$x$5242$gDo33)
                       g$r$5243$gDo33)))
                  (<= (char->integer g$a$5239$gDo33)
                      (char->integer g$x$5242$gDo33))))))
            (cons g$b$5240$gDo33 g$rest$5241$gDo33))))))
   (g$char>=?$5131$gDo33
     g$char>=?$5311$gDo33
     (case-lambda
       ((g$a$5244$gDo33 g$b$5245$gDo33 . g$rest$5246$gDo33)
        (begin
          (if (not (char? g$a$5244$gDo33))
            (assertion-violation 'char>=? '"not a char" g$a$5244$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5247$gDo33)
               (begin
                 (if (not (char? g$x$5247$gDo33))
                   (assertion-violation 'char>=? '"not a char" g$x$5247$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5248$gDo33)
                     (begin
                       (set! g$a$5244$gDo33 g$x$5247$gDo33)
                       g$r$5248$gDo33)))
                  (>= (char->integer g$a$5244$gDo33)
                      (char->integer g$x$5247$gDo33))))))
            (cons g$b$5245$gDo33 g$rest$5246$gDo33))))))
   (g$rationalize$5132$gDo33
     g$rationalize$5312$gDo33
     (case-lambda
       ((g$x$5249$gDo33 g$e$5250$gDo33)
        (if (if (infinite? g$x$5249$gDo33)
              (begin '#f (infinite? g$e$5250$gDo33))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$5251$gDo33)
              (if (if (exact? g$x$5249$gDo33)
                    (begin '#f (exact? g$e$5250$gDo33))
                    '#f)
                g$r$5251$gDo33
                (inexact g$r$5251$gDo33))))
           (apply
             /
             (g$find-ratio$5133$gDo33 g$x$5249$gDo33 g$e$5250$gDo33)))))))
   (g$find-ratio$5133$gDo33
     g$find-ratio$5313$gDo33
     (case-lambda
       ((g$x$5252$gDo33 g$e$5253$gDo33)
        (g$find-ratio-between$5134$gDo33
          (- g$x$5252$gDo33 g$e$5253$gDo33)
          (+ g$x$5252$gDo33 g$e$5253$gDo33)))))
   (g$find-ratio-between$5134$gDo33
     g$find-ratio-between$5314$gDo33
     (case-lambda
       ((g$x$5254$gDo33 g$y$5255$gDo33)
        (letrec* ((g$sr$5256$gDo33
                    (case-lambda
                      ((g$x$5258$gDo33 g$y$5259$gDo33)
                       ((case-lambda
                          ((g$fx$5260$gDo33 g$fy$5261$gDo33)
                           (if (>= g$fx$5260$gDo33 g$x$5258$gDo33)
                             (list g$fx$5260$gDo33 '1)
                             (if (= g$fx$5260$gDo33 g$fy$5261$gDo33)
                               ((case-lambda
                                  ((g$rat$5262$gDo33)
                                   (list
                                     (+ (g$cadr$5072$gDo33 g$rat$5262$gDo33)
                                        (* g$fx$5260$gDo33
                                           (car g$rat$5262$gDo33)))
                                     (car g$rat$5262$gDo33))))
                                (g$sr$5256$gDo33
                                  (/ (- g$y$5259$gDo33 g$fy$5261$gDo33))
                                  (/ (- g$x$5258$gDo33 g$fx$5260$gDo33))))
                               (list (+ '1 g$fx$5260$gDo33) '1)))))
                        (exact (floor g$x$5258$gDo33))
                        (exact (floor g$y$5259$gDo33)))))))
          (if (< g$y$5255$gDo33 g$x$5254$gDo33)
            (g$find-ratio-between$5134$gDo33 g$y$5255$gDo33 g$x$5254$gDo33)
            (if (>= g$x$5254$gDo33 g$y$5255$gDo33)
              (list g$x$5254$gDo33 '1)
              (if (g$positive?$5099$gDo33 g$x$5254$gDo33)
                (g$sr$5256$gDo33 g$x$5254$gDo33 g$y$5255$gDo33)
                (if (g$negative?$5100$gDo33 g$y$5255$gDo33)
                  ((case-lambda
                     ((g$rat$5257$gDo33)
                      (list
                        (- (car g$rat$5257$gDo33))
                        (g$cadr$5072$gDo33 g$rat$5257$gDo33))))
                   (g$sr$5256$gDo33 (- g$y$5255$gDo33) (- g$x$5254$gDo33)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5503$gDo33 g$using$5536$gDo33 (clr-using-internal 'system))
   (g$using$5505$gDo33
     g$using$5537$gDo33
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5506$gDo33
     g$make-eq-hashtable$5538$gDo33
     (case-lambda
       (() (g$make-eq-hashtable$5506$gDo33 '32))
       ((g$k$5515$gDo33)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5515$gDo33)))))
   (g$make-eqv-hashtable$5507$gDo33
     g$make-eqv-hashtable$5539$gDo33
     (case-lambda
       (() (g$make-eqv-hashtable$5507$gDo33 '32))
       ((g$k$5516$gDo33) (make-hashtable eqv-hash eqv? g$k$5516$gDo33))))
   (g$hashtable-size$5508$gDo33
     g$hashtable-size$5540$gDo33
     (case-lambda
       ((g$ht$5517$gDo33)
        (clr-call-internal 'hashtable 'get_count g$ht$5517$gDo33))))
   (g$hashtable-ref$5509$gDo33
     g$hashtable-ref$5541$gDo33
     (case-lambda
       ((g$ht$5518$gDo33 g$key$5519$gDo33 g$default$5520$gDo33)
        (letrec* ((g$r$5521$gDo33
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5518$gDo33
                      g$key$5519$gDo33)))
          (if (not (null? g$r$5521$gDo33))
            g$r$5521$gDo33
            g$default$5520$gDo33)))))
   (g$hashtable-set!$5510$gDo33
     g$hashtable-set!$5542$gDo33
     (case-lambda
       ((g$ht$5522$gDo33 g$key$5523$gDo33 g$obj$5524$gDo33)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5522$gDo33
          g$key$5523$gDo33
          g$obj$5524$gDo33))))
   (g$hashtable-delete!$5511$gDo33
     g$hashtable-delete!$5543$gDo33
     (case-lambda
       ((g$ht$5525$gDo33 g$key$5526$gDo33)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5525$gDo33
          g$key$5526$gDo33))))
   (g$hashtable-contains?$5512$gDo33
     g$hashtable-contains?$5544$gDo33
     (case-lambda
       ((g$ht$5527$gDo33 g$key$5528$gDo33)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5527$gDo33
          g$key$5528$gDo33))))
   (g$hashtable-update!$5513$gDo33
     g$hashtable-update!$5545$gDo33
     (case-lambda
       ((g$ht$5529$gDo33
          g$key$5530$gDo33
          g$proc$5531$gDo33
          g$default$5532$gDo33)
        (g$hashtable-set!$5510$gDo33
          g$ht$5529$gDo33
          g$key$5530$gDo33
          (g$proc$5531$gDo33
            (g$hashtable-ref$5509$gDo33
              g$ht$5529$gDo33
              g$key$5530$gDo33
              g$default$5532$gDo33))))))
   (g$hashtable-clear!$5514$gDo33
     g$hashtable-clear!$5546$gDo33
     (case-lambda
       ((g$ht$5533$gDo33) (g$hashtable-clear!$5514$gDo33 g$ht$5533$gDo33 '32))
       ((g$ht$5534$gDo33 g$k$5535$gDo33)
        (clr-call-internal 'hashtable 'clear g$ht$5534$gDo33)))))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5548$gDo33 g$using$5555$gDo33 (clr-using-internal 'system.io))
   (g$file-exists?$5549$gDo33
     g$file-exists?$5556$gDo33
     (case-lambda
       ((g$fn$5552$gDo33)
        (clr-call-internal 'file 'exists '() g$fn$5552$gDo33))))
   (g$delete-file$5550$gDo33
     g$delete-file$5557$gDo33
     (case-lambda
       ((g$fn$5553$gDo33)
        (clr-call-internal 'file 'delete '() g$fn$5553$gDo33))))
   (g$get-directory-name$5551$gDo33
     g$get-directory-name$5558$gDo33
     (case-lambda
       ((g$path$5554$gDo33)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5554$gDo33)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5559$gDo33
     g$native-endianness$5670$gDo33
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5560$gDo33
     g$bytevector-u16-ref$5671$gDo33
     (case-lambda
       ((g$bytevector$5588$gDo33 g$k$5589$gDo33 g$endianness$5590$gDo33)
        (bytevector-uint-ref
          g$bytevector$5588$gDo33
          g$k$5589$gDo33
          g$endianness$5590$gDo33
          '2))))
   (g$bytevector-s16-ref$5561$gDo33
     g$bytevector-s16-ref$5672$gDo33
     (case-lambda
       ((g$bytevector$5591$gDo33 g$k$5592$gDo33 g$endianness$5593$gDo33)
        (bytevector-sint-ref
          g$bytevector$5591$gDo33
          g$k$5592$gDo33
          g$endianness$5593$gDo33
          '2))))
   (g$bytevector-u16-native-ref$5562$gDo33
     g$bytevector-u16-native-ref$5673$gDo33
     (case-lambda
       ((g$bytevector$5594$gDo33 g$k$5595$gDo33)
        (bytevector-uint-ref
          g$bytevector$5594$gDo33
          g$k$5595$gDo33
          (g$native-endianness$5559$gDo33)
          '2))))
   (g$bytevector-s16-native-ref$5563$gDo33
     g$bytevector-s16-native-ref$5674$gDo33
     (case-lambda
       ((g$bytevector$5596$gDo33 g$k$5597$gDo33)
        (bytevector-sint-ref
          g$bytevector$5596$gDo33
          g$k$5597$gDo33
          (g$native-endianness$5559$gDo33)
          '2))))
   (g$bytevector-u16-set!$5564$gDo33
     g$bytevector-u16-set!$5675$gDo33
     (case-lambda
       ((g$bytevector$5598$gDo33
          g$k$5599$gDo33
          g$n$5600$gDo33
          g$endianness$5601$gDo33)
        (bytevector-uint-set!
          g$bytevector$5598$gDo33
          g$k$5599$gDo33
          g$n$5600$gDo33
          g$endianness$5601$gDo33
          '2))))
   (g$bytevector-s16-set!$5565$gDo33
     g$bytevector-s16-set!$5676$gDo33
     (case-lambda
       ((g$bytevector$5602$gDo33
          g$k$5603$gDo33
          g$n$5604$gDo33
          g$endianness$5605$gDo33)
        (bytevector-sint-set!
          g$bytevector$5602$gDo33
          g$k$5603$gDo33
          g$n$5604$gDo33
          g$endianness$5605$gDo33
          '2))))
   (g$bytevector-u16-native-set!$5566$gDo33
     g$bytevector-u16-native-set!$5677$gDo33
     (case-lambda
       ((g$bytevector$5606$gDo33 g$k$5607$gDo33 g$n$5608$gDo33)
        (bytevector-uint-set!
          g$bytevector$5606$gDo33
          g$k$5607$gDo33
          g$n$5608$gDo33
          (g$native-endianness$5559$gDo33)
          '2))))
   (g$bytevector-s16-native-set!$5567$gDo33
     g$bytevector-s16-native-set!$5678$gDo33
     (case-lambda
       ((g$bytevector$5609$gDo33 g$k$5610$gDo33 g$n$5611$gDo33)
        (bytevector-sint-set!
          g$bytevector$5609$gDo33
          g$k$5610$gDo33
          g$n$5611$gDo33
          (g$native-endianness$5559$gDo33)
          '2))))
   (g$bytevector-u32-ref$5568$gDo33
     g$bytevector-u32-ref$5679$gDo33
     (case-lambda
       ((g$bytevector$5612$gDo33 g$k$5613$gDo33 g$endianness$5614$gDo33)
        (bytevector-uint-ref
          g$bytevector$5612$gDo33
          g$k$5613$gDo33
          g$endianness$5614$gDo33
          '4))))
   (g$bytevector-s32-ref$5569$gDo33
     g$bytevector-s32-ref$5680$gDo33
     (case-lambda
       ((g$bytevector$5615$gDo33 g$k$5616$gDo33 g$endianness$5617$gDo33)
        (bytevector-sint-ref
          g$bytevector$5615$gDo33
          g$k$5616$gDo33
          g$endianness$5617$gDo33
          '4))))
   (g$bytevector-u32-native-ref$5570$gDo33
     g$bytevector-u32-native-ref$5681$gDo33
     (case-lambda
       ((g$bytevector$5618$gDo33 g$k$5619$gDo33)
        (bytevector-uint-ref
          g$bytevector$5618$gDo33
          g$k$5619$gDo33
          (g$native-endianness$5559$gDo33)
          '4))))
   (g$bytevector-s32-native-ref$5571$gDo33
     g$bytevector-s32-native-ref$5682$gDo33
     (case-lambda
       ((g$bytevector$5620$gDo33 g$k$5621$gDo33)
        (bytevector-sint-ref
          g$bytevector$5620$gDo33
          g$k$5621$gDo33
          (g$native-endianness$5559$gDo33)
          '4))))
   (g$bytevector-u32-set!$5572$gDo33
     g$bytevector-u32-set!$5683$gDo33
     (case-lambda
       ((g$bytevector$5622$gDo33
          g$k$5623$gDo33
          g$n$5624$gDo33
          g$endianness$5625$gDo33)
        (bytevector-uint-set!
          g$bytevector$5622$gDo33
          g$k$5623$gDo33
          g$n$5624$gDo33
          g$endianness$5625$gDo33
          '4))))
   (g$bytevector-s32-set!$5573$gDo33
     g$bytevector-s32-set!$5684$gDo33
     (case-lambda
       ((g$bytevector$5626$gDo33
          g$k$5627$gDo33
          g$n$5628$gDo33
          g$endianness$5629$gDo33)
        (bytevector-sint-set!
          g$bytevector$5626$gDo33
          g$k$5627$gDo33
          g$n$5628$gDo33
          g$endianness$5629$gDo33
          '4))))
   (g$bytevector-u32-native-set!$5574$gDo33
     g$bytevector-u32-native-set!$5685$gDo33
     (case-lambda
       ((g$bytevector$5630$gDo33 g$k$5631$gDo33 g$n$5632$gDo33)
        (bytevector-uint-set!
          g$bytevector$5630$gDo33
          g$k$5631$gDo33
          g$n$5632$gDo33
          (g$native-endianness$5559$gDo33)
          '4))))
   (g$bytevector-s32-native-set!$5575$gDo33
     g$bytevector-s32-native-set!$5686$gDo33
     (case-lambda
       ((g$bytevector$5633$gDo33 g$k$5634$gDo33 g$n$5635$gDo33)
        (bytevector-sint-set!
          g$bytevector$5633$gDo33
          g$k$5634$gDo33
          g$n$5635$gDo33
          (g$native-endianness$5559$gDo33)
          '4))))
   (g$bytevector-u64-ref$5576$gDo33
     g$bytevector-u64-ref$5687$gDo33
     (case-lambda
       ((g$bytevector$5636$gDo33 g$k$5637$gDo33 g$endianness$5638$gDo33)
        (bytevector-uint-ref
          g$bytevector$5636$gDo33
          g$k$5637$gDo33
          g$endianness$5638$gDo33
          '8))))
   (g$bytevector-s64-ref$5577$gDo33
     g$bytevector-s64-ref$5688$gDo33
     (case-lambda
       ((g$bytevector$5639$gDo33 g$k$5640$gDo33 g$endianness$5641$gDo33)
        (bytevector-sint-ref
          g$bytevector$5639$gDo33
          g$k$5640$gDo33
          g$endianness$5641$gDo33
          '8))))
   (g$bytevector-u64-native-ref$5578$gDo33
     g$bytevector-u64-native-ref$5689$gDo33
     (case-lambda
       ((g$bytevector$5642$gDo33 g$k$5643$gDo33)
        (bytevector-uint-ref
          g$bytevector$5642$gDo33
          g$k$5643$gDo33
          (g$native-endianness$5559$gDo33)
          '8))))
   (g$bytevector-s64-native-ref$5579$gDo33
     g$bytevector-s64-native-ref$5690$gDo33
     (case-lambda
       ((g$bytevector$5644$gDo33 g$k$5645$gDo33)
        (bytevector-sint-ref
          g$bytevector$5644$gDo33
          g$k$5645$gDo33
          (g$native-endianness$5559$gDo33)
          '8))))
   (g$bytevector-u64-set!$5580$gDo33
     g$bytevector-u64-set!$5691$gDo33
     (case-lambda
       ((g$bytevector$5646$gDo33
          g$k$5647$gDo33
          g$n$5648$gDo33
          g$endianness$5649$gDo33)
        (bytevector-uint-set!
          g$bytevector$5646$gDo33
          g$k$5647$gDo33
          g$n$5648$gDo33
          g$endianness$5649$gDo33
          '8))))
   (g$bytevector-s64-set!$5581$gDo33
     g$bytevector-s64-set!$5692$gDo33
     (case-lambda
       ((g$bytevector$5650$gDo33
          g$k$5651$gDo33
          g$n$5652$gDo33
          g$endianness$5653$gDo33)
        (bytevector-sint-set!
          g$bytevector$5650$gDo33
          g$k$5651$gDo33
          g$n$5652$gDo33
          g$endianness$5653$gDo33
          '8))))
   (g$bytevector-u64-native-set!$5582$gDo33
     g$bytevector-u64-native-set!$5693$gDo33
     (case-lambda
       ((g$bytevector$5654$gDo33 g$k$5655$gDo33 g$n$5656$gDo33)
        (bytevector-uint-set!
          g$bytevector$5654$gDo33
          g$k$5655$gDo33
          g$n$5656$gDo33
          (g$native-endianness$5559$gDo33)
          '8))))
   (g$bytevector-s64-native-set!$5583$gDo33
     g$bytevector-s64-native-set!$5694$gDo33
     (case-lambda
       ((g$bytevector$5657$gDo33 g$k$5658$gDo33 g$n$5659$gDo33)
        (bytevector-sint-set!
          g$bytevector$5657$gDo33
          g$k$5658$gDo33
          g$n$5659$gDo33
          (g$native-endianness$5559$gDo33)
          '8))))
   (g$bytevector-ieee-single-native-ref$5584$gDo33
     g$bytevector-ieee-single-native-ref$5695$gDo33
     (case-lambda
       ((g$bytevector$5660$gDo33 g$k$5661$gDo33)
        (if (not (g$zero?$5293$gDo33 (mod g$k$5661$gDo33 '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5661$gDo33)
          (bytevector-ieee-single-ref
            g$bytevector$5660$gDo33
            g$k$5661$gDo33
            (g$native-endianness$5559$gDo33))))))
   (g$bytevector-ieee-double-native-ref$5585$gDo33
     g$bytevector-ieee-double-native-ref$5696$gDo33
     (case-lambda
       ((g$bytevector$5662$gDo33 g$k$5663$gDo33)
        (if (not (g$zero?$5293$gDo33 (mod g$k$5663$gDo33 '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5663$gDo33)
          (bytevector-ieee-double-ref
            g$bytevector$5662$gDo33
            g$k$5663$gDo33
            (g$native-endianness$5559$gDo33))))))
   (g$bytevector-ieee-single-native-set!$5586$gDo33
     g$bytevector-ieee-single-native-set!$5697$gDo33
     (case-lambda
       ((g$bytevector$5664$gDo33 g$k$5665$gDo33 g$x$5666$gDo33)
        (if (not (g$zero?$5293$gDo33 (mod g$k$5665$gDo33 '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5665$gDo33)
          (bytevector-ieee-single-set!
            g$bytevector$5664$gDo33
            g$k$5665$gDo33
            g$x$5666$gDo33
            (g$native-endianness$5559$gDo33))))))
   (g$bytevector-ieee-double-native-set!$5587$gDo33
     g$bytevector-ieee-double-native-set!$5698$gDo33
     (case-lambda
       ((g$bytevector$5667$gDo33 g$k$5668$gDo33 g$x$5669$gDo33)
        (if (not (g$zero?$5293$gDo33 (mod g$k$5668$gDo33 '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5668$gDo33)
          (bytevector-ieee-double-set!
            g$bytevector$5667$gDo33
            g$k$5668$gDo33
            g$x$5669$gDo33
            (g$native-endianness$5559$gDo33)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6690$5699$gDo33
     g$6690$5794$gDo33
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6693$gDo33
       '#f
       '#f
       '#()))
   (g$6692$5700$gDo33 g$6692$5795$gDo33 '#f)
   (g$6691$5701$gDo33
     g$6691$5796$gDo33
     (make-record-constructor-descriptor
       g$6690$5699$gDo33
       '#f
       g$6692$5700$gDo33))
   (g$&condition?$5702$gDo33
     g$&condition?$5797$gDo33
     (record-predicate g$6690$5699$gDo33))
   (g$make-&condition$5703$gDo33
     g$make-&condition$5798$gDo33
     (record-constructor g$6691$5701$gDo33))
   (g$&condition-rtd$5704$gDo33
     g$&condition-rtd$5799$gDo33
     g$6690$5699$gDo33)
   (g$&condition-rcd$5705$gDo33
     g$&condition-rcd$5800$gDo33
     g$6691$5701$gDo33)
   (g$6706$5706$gDo33
     g$6706$5801$gDo33
     (make-record-type-descriptor
       '&message
       g$6690$5699$gDo33
       'g$6709$gDo33
       '#f
       '#f
       '#((immutable message))))
   (g$6708$5707$gDo33 g$6708$5802$gDo33 '#f)
   (g$6707$5708$gDo33
     g$6707$5803$gDo33
     (make-record-constructor-descriptor
       g$6706$5706$gDo33
       g$6691$5701$gDo33
       g$6708$5707$gDo33))
   (g$6705$5709$gDo33
     g$6705$5804$gDo33
     (record-predicate g$6706$5706$gDo33))
   (g$make-message-condition$5710$gDo33
     g$make-message-condition$5805$gDo33
     (record-constructor g$6707$5708$gDo33))
   (g$6704$5711$gDo33
     g$6704$5806$gDo33
     (record-accessor g$6706$5706$gDo33 '0))
   (g$message-condition?$5712$gDo33
     g$message-condition?$5807$gDo33
     (condition-predicate g$6706$5706$gDo33))
   (g$condition-message$5713$gDo33
     g$condition-message$5808$gDo33
     (condition-accessor g$6706$5706$gDo33 g$6704$5711$gDo33))
   (g$6722$5714$gDo33
     g$6722$5809$gDo33
     (make-record-type-descriptor
       '&warning
       g$6690$5699$gDo33
       'g$6725$gDo33
       '#f
       '#f
       '#()))
   (g$6724$5715$gDo33 g$6724$5810$gDo33 '#f)
   (g$6723$5716$gDo33
     g$6723$5811$gDo33
     (make-record-constructor-descriptor
       g$6722$5714$gDo33
       g$6691$5701$gDo33
       g$6724$5715$gDo33))
   (g$6721$5717$gDo33
     g$6721$5812$gDo33
     (record-predicate g$6722$5714$gDo33))
   (g$make-warning$5718$gDo33
     g$make-warning$5813$gDo33
     (record-constructor g$6723$5716$gDo33))
   (g$warning?$5719$gDo33
     g$warning?$5814$gDo33
     (condition-predicate g$6722$5714$gDo33))
   (g$6736$5720$gDo33
     g$6736$5815$gDo33
     (make-record-type-descriptor
       '&serious
       g$6690$5699$gDo33
       'g$6739$gDo33
       '#f
       '#f
       '#()))
   (g$6738$5721$gDo33 g$6738$5816$gDo33 '#f)
   (g$6737$5722$gDo33
     g$6737$5817$gDo33
     (make-record-constructor-descriptor
       g$6736$5720$gDo33
       g$6691$5701$gDo33
       g$6738$5721$gDo33))
   (g$6735$5723$gDo33
     g$6735$5818$gDo33
     (record-predicate g$6736$5720$gDo33))
   (g$make-serious-condition$5724$gDo33
     g$make-serious-condition$5819$gDo33
     (record-constructor g$6737$5722$gDo33))
   (g$serious-condition?$5725$gDo33
     g$serious-condition?$5820$gDo33
     (condition-predicate g$6736$5720$gDo33))
   (g$6750$5726$gDo33
     g$6750$5821$gDo33
     (make-record-type-descriptor
       '&error
       g$6736$5720$gDo33
       'g$6753$gDo33
       '#f
       '#f
       '#()))
   (g$6752$5727$gDo33 g$6752$5822$gDo33 '#f)
   (g$6751$5728$gDo33
     g$6751$5823$gDo33
     (make-record-constructor-descriptor
       g$6750$5726$gDo33
       g$6737$5722$gDo33
       g$6752$5727$gDo33))
   (g$6749$5729$gDo33
     g$6749$5824$gDo33
     (record-predicate g$6750$5726$gDo33))
   (g$make-error$5730$gDo33
     g$make-error$5825$gDo33
     (record-constructor g$6751$5728$gDo33))
   (g$error?$5731$gDo33
     g$error?$5826$gDo33
     (condition-predicate g$6750$5726$gDo33))
   (g$6764$5732$gDo33
     g$6764$5827$gDo33
     (make-record-type-descriptor
       '&violation
       g$6736$5720$gDo33
       'g$6767$gDo33
       '#f
       '#f
       '#()))
   (g$6766$5733$gDo33 g$6766$5828$gDo33 '#f)
   (g$6765$5734$gDo33
     g$6765$5829$gDo33
     (make-record-constructor-descriptor
       g$6764$5732$gDo33
       g$6737$5722$gDo33
       g$6766$5733$gDo33))
   (g$6763$5735$gDo33
     g$6763$5830$gDo33
     (record-predicate g$6764$5732$gDo33))
   (g$make-violation$5736$gDo33
     g$make-violation$5831$gDo33
     (record-constructor g$6765$5734$gDo33))
   (g$violation?$5737$gDo33
     g$violation?$5832$gDo33
     (condition-predicate g$6764$5732$gDo33))
   (g$6778$5738$gDo33
     g$6778$5833$gDo33
     (make-record-type-descriptor
       '&assertion
       g$6764$5732$gDo33
       'g$6781$gDo33
       '#f
       '#f
       '#()))
   (g$6780$5739$gDo33 g$6780$5834$gDo33 '#f)
   (g$6779$5740$gDo33
     g$6779$5835$gDo33
     (make-record-constructor-descriptor
       g$6778$5738$gDo33
       g$6765$5734$gDo33
       g$6780$5739$gDo33))
   (g$6777$5741$gDo33
     g$6777$5836$gDo33
     (record-predicate g$6778$5738$gDo33))
   (g$make-assertion-violation$5742$gDo33
     g$make-assertion-violation$5837$gDo33
     (record-constructor g$6779$5740$gDo33))
   (g$assertion-violation?$5743$gDo33
     g$assertion-violation?$5838$gDo33
     (condition-predicate g$6778$5738$gDo33))
   (g$6793$5744$gDo33
     g$6793$5839$gDo33
     (make-record-type-descriptor
       '&irritants
       g$6690$5699$gDo33
       'g$6796$gDo33
       '#f
       '#f
       '#((immutable irritants))))
   (g$6795$5745$gDo33 g$6795$5840$gDo33 '#f)
   (g$6794$5746$gDo33
     g$6794$5841$gDo33
     (make-record-constructor-descriptor
       g$6793$5744$gDo33
       g$6691$5701$gDo33
       g$6795$5745$gDo33))
   (g$6792$5747$gDo33
     g$6792$5842$gDo33
     (record-predicate g$6793$5744$gDo33))
   (g$make-irritants-condition$5748$gDo33
     g$make-irritants-condition$5843$gDo33
     (record-constructor g$6794$5746$gDo33))
   (g$6791$5749$gDo33
     g$6791$5844$gDo33
     (record-accessor g$6793$5744$gDo33 '0))
   (g$irritants-condition?$5750$gDo33
     g$irritants-condition?$5845$gDo33
     (condition-predicate g$6793$5744$gDo33))
   (g$condition-irritants$5751$gDo33
     g$condition-irritants$5846$gDo33
     (condition-accessor g$6793$5744$gDo33 g$6791$5749$gDo33))
   (g$6810$5752$gDo33
     g$6810$5847$gDo33
     (make-record-type-descriptor
       '&who
       g$6690$5699$gDo33
       'g$6813$gDo33
       '#f
       '#f
       '#((immutable who))))
   (g$6812$5753$gDo33 g$6812$5848$gDo33 '#f)
   (g$6811$5754$gDo33
     g$6811$5849$gDo33
     (make-record-constructor-descriptor
       g$6810$5752$gDo33
       g$6691$5701$gDo33
       g$6812$5753$gDo33))
   (g$6809$5755$gDo33
     g$6809$5850$gDo33
     (record-predicate g$6810$5752$gDo33))
   (g$make-who-condition$5756$gDo33
     g$make-who-condition$5851$gDo33
     (record-constructor g$6811$5754$gDo33))
   (g$6808$5757$gDo33
     g$6808$5852$gDo33
     (record-accessor g$6810$5752$gDo33 '0))
   (g$who-condition?$5758$gDo33
     g$who-condition?$5853$gDo33
     (condition-predicate g$6810$5752$gDo33))
   (g$condition-who$5759$gDo33
     g$condition-who$5854$gDo33
     (condition-accessor g$6810$5752$gDo33 g$6808$5757$gDo33))
   (g$6826$5760$gDo33
     g$6826$5855$gDo33
     (make-record-type-descriptor
       '&non-continuable
       g$6764$5732$gDo33
       'g$6829$gDo33
       '#f
       '#f
       '#()))
   (g$6828$5761$gDo33 g$6828$5856$gDo33 '#f)
   (g$6827$5762$gDo33
     g$6827$5857$gDo33
     (make-record-constructor-descriptor
       g$6826$5760$gDo33
       g$6765$5734$gDo33
       g$6828$5761$gDo33))
   (g$6825$5763$gDo33
     g$6825$5858$gDo33
     (record-predicate g$6826$5760$gDo33))
   (g$make-non-continuable-violation$5764$gDo33
     g$make-non-continuable-violation$5859$gDo33
     (record-constructor g$6827$5762$gDo33))
   (g$non-continuable-violation?$5765$gDo33
     g$non-continuable-violation?$5860$gDo33
     (condition-predicate g$6826$5760$gDo33))
   (g$6840$5766$gDo33
     g$6840$5861$gDo33
     (make-record-type-descriptor
       '&implementation-restriction
       g$6764$5732$gDo33
       'g$6843$gDo33
       '#f
       '#f
       '#()))
   (g$6842$5767$gDo33 g$6842$5862$gDo33 '#f)
   (g$6841$5768$gDo33
     g$6841$5863$gDo33
     (make-record-constructor-descriptor
       g$6840$5766$gDo33
       g$6765$5734$gDo33
       g$6842$5767$gDo33))
   (g$6839$5769$gDo33
     g$6839$5864$gDo33
     (record-predicate g$6840$5766$gDo33))
   (g$make-implementation-restriction-violation$5770$gDo33
     g$make-implementation-restriction-violation$5865$gDo33
     (record-constructor g$6841$5768$gDo33))
   (g$implementation-restriction-violation?$5771$gDo33
     g$implementation-restriction-violation?$5866$gDo33
     (condition-predicate g$6840$5766$gDo33))
   (g$6854$5772$gDo33
     g$6854$5867$gDo33
     (make-record-type-descriptor
       '&lexical
       g$6764$5732$gDo33
       'g$6857$gDo33
       '#f
       '#f
       '#()))
   (g$6856$5773$gDo33 g$6856$5868$gDo33 '#f)
   (g$6855$5774$gDo33
     g$6855$5869$gDo33
     (make-record-constructor-descriptor
       g$6854$5772$gDo33
       g$6765$5734$gDo33
       g$6856$5773$gDo33))
   (g$6853$5775$gDo33
     g$6853$5870$gDo33
     (record-predicate g$6854$5772$gDo33))
   (g$make-lexical-violation$5776$gDo33
     g$make-lexical-violation$5871$gDo33
     (record-constructor g$6855$5774$gDo33))
   (g$lexical-violation?$5777$gDo33
     g$lexical-violation?$5872$gDo33
     (condition-predicate g$6854$5772$gDo33))
   (g$6870$5778$gDo33
     g$6870$5873$gDo33
     (make-record-type-descriptor
       '&syntax
       g$6764$5732$gDo33
       'g$6873$gDo33
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6872$5779$gDo33 g$6872$5874$gDo33 '#f)
   (g$6871$5780$gDo33
     g$6871$5875$gDo33
     (make-record-constructor-descriptor
       g$6870$5778$gDo33
       g$6765$5734$gDo33
       g$6872$5779$gDo33))
   (g$6869$5781$gDo33
     g$6869$5876$gDo33
     (record-predicate g$6870$5778$gDo33))
   (g$make-syntax-violation$5782$gDo33
     g$make-syntax-violation$5877$gDo33
     (record-constructor g$6871$5780$gDo33))
   (g$6867$5783$gDo33
     g$6867$5878$gDo33
     (record-accessor g$6870$5778$gDo33 '0))
   (g$6868$5784$gDo33
     g$6868$5879$gDo33
     (record-accessor g$6870$5778$gDo33 '1))
   (g$syntax-violation?$5785$gDo33
     g$syntax-violation?$5880$gDo33
     (condition-predicate g$6870$5778$gDo33))
   (g$syntax-violation-form$5786$gDo33
     g$syntax-violation-form$5881$gDo33
     (condition-accessor g$6870$5778$gDo33 g$6867$5783$gDo33))
   (g$syntax-violation-subform$5787$gDo33
     g$syntax-violation-subform$5882$gDo33
     (condition-accessor g$6870$5778$gDo33 g$6868$5784$gDo33))
   (g$6888$5788$gDo33
     g$6888$5883$gDo33
     (make-record-type-descriptor
       '&undefined
       g$6764$5732$gDo33
       'g$6891$gDo33
       '#f
       '#f
       '#()))
   (g$6890$5789$gDo33 g$6890$5884$gDo33 '#f)
   (g$6889$5790$gDo33
     g$6889$5885$gDo33
     (make-record-constructor-descriptor
       g$6888$5788$gDo33
       g$6765$5734$gDo33
       g$6890$5789$gDo33))
   (g$6887$5791$gDo33
     g$6887$5886$gDo33
     (record-predicate g$6888$5788$gDo33))
   (g$make-undefined-violation$5792$gDo33
     g$make-undefined-violation$5887$gDo33
     (record-constructor g$6889$5790$gDo33))
   (g$undefined-violation?$5793$gDo33
     g$undefined-violation?$5888$gDo33
     (condition-predicate g$6888$5788$gDo33)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5889$gDo33
     g$append!$5895$gDo33
     (case-lambda
       ((g$a$5890$gDo33 . g$b$5891$gDo33)
        (if (null? g$a$5890$gDo33)
          g$b$5891$gDo33
          (if (null? g$b$5891$gDo33)
            g$a$5890$gDo33
            (begin
              ((letrec ((g$f$5892$gDo33
                          (case-lambda
                            ((g$a$5893$gDo33)
                             ((case-lambda
                                ((g$n$5894$gDo33)
                                 (if (null? g$n$5894$gDo33)
                                   (set-cdr! g$a$5893$gDo33 g$b$5891$gDo33)
                                   (g$f$5892$gDo33 g$n$5894$gDo33))))
                              (cdr g$a$5893$gDo33))))))
                 g$f$5892$gDo33)
               g$a$5890$gDo33)
              g$a$5890$gDo33)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$inexact->exact$5896$gDo33 g$inexact->exact$5916$gDo33 exact)
   (g$exact->inexact$5897$gDo33 g$exact->inexact$5917$gDo33 inexact)
   (g$sign$5898$gDo33
     g$sign$5918$gDo33
     (case-lambda
       ((g$n$5904$gDo33)
        (if (> g$n$5904$gDo33 '0) '1 (if (< g$n$5904$gDo33 '0) '-1 '0)))))
   (g$quotient$5899$gDo33
     g$quotient$5919$gDo33
     (case-lambda
       ((g$n1$5905$gDo33 g$n2$5906$gDo33)
        (begin
          (if (not (integer-valued? g$n1$5905$gDo33))
            (assertion-violation 'quotient '"not an integer" g$n1$5905$gDo33)
            (void))
          (if (not (integer-valued? g$n2$5906$gDo33))
            (assertion-violation 'quotient '"not an integer" g$n2$5906$gDo33)
            (void))
          (* (g$sign$5898$gDo33 g$n1$5905$gDo33)
             (g$sign$5898$gDo33 g$n2$5906$gDo33)
             (div (abs g$n1$5905$gDo33) (abs g$n2$5906$gDo33)))))))
   (g$remainder$5900$gDo33
     g$remainder$5920$gDo33
     (case-lambda
       ((g$n1$5907$gDo33 g$n2$5908$gDo33)
        (begin
          (if (not (integer-valued? g$n1$5907$gDo33))
            (assertion-violation 'remainder '"not an integer" g$n1$5907$gDo33)
            (void))
          (if (not (integer-valued? g$n2$5908$gDo33))
            (assertion-violation 'remainder '"not an integer" g$n2$5908$gDo33)
            (void))
          (* (g$sign$5898$gDo33 g$n1$5907$gDo33)
             (mod (abs g$n1$5907$gDo33) (abs g$n2$5908$gDo33)))))))
   (g$modulo$5901$gDo33
     g$modulo$5921$gDo33
     (case-lambda
       ((g$n1$5909$gDo33 g$n2$5910$gDo33)
        (begin
          (if (not (integer-valued? g$n1$5909$gDo33))
            (assertion-violation 'modulo '"not an integer" g$n1$5909$gDo33)
            (void))
          (if (not (integer-valued? g$n2$5910$gDo33))
            (assertion-violation 'modulo '"not an integer" g$n2$5910$gDo33)
            (void))
          (* (g$sign$5898$gDo33 g$n2$5910$gDo33)
             (mod (* (g$sign$5898$gDo33 g$n2$5910$gDo33) g$n1$5909$gDo33)
                  (abs g$n2$5910$gDo33)))))))
   (g$make-promise$5902$gDo33
     g$make-promise$5922$gDo33
     (case-lambda
       ((g$proc$5911$gDo33)
        ((case-lambda
           ((g$result-ready?$5912$gDo33 g$result$5913$gDo33)
            (case-lambda
              (()
               (if g$result-ready?$5912$gDo33
                 g$result$5913$gDo33
                 ((case-lambda
                    ((g$x$5914$gDo33)
                     (if g$result-ready?$5912$gDo33
                       g$result$5913$gDo33
                       (begin
                         (set! g$result-ready?$5912$gDo33 '#t)
                         (set! g$result$5913$gDo33 g$x$5914$gDo33)
                         g$result$5913$gDo33))))
                  (g$proc$5911$gDo33)))))))
         '#f
         '#f))))
   (g$force$5903$gDo33
     g$force$5923$gDo33
     (case-lambda ((g$object$5915$gDo33) (g$object$5915$gDo33)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5924$gDo33
     g$split$5949$gDo33
     (case-lambda
       ((g$ls$5928$gDo33)
        ((letrec ((g$loop$5929$gDo33
                    (case-lambda
                      ((g$rest$5930$gDo33 g$left$5931$gDo33 g$right$5932$gDo33)
                       (if (null? g$rest$5930$gDo33)
                         (cons g$left$5931$gDo33 g$right$5932$gDo33)
                         (if (null? (cdr g$rest$5930$gDo33))
                           (cons
                             (cons (car g$rest$5930$gDo33) g$left$5931$gDo33)
                             g$right$5932$gDo33)
                           (g$loop$5929$gDo33
                             (g$cddr$5266$gDo33 g$rest$5930$gDo33)
                             (cons (car g$rest$5930$gDo33) g$left$5931$gDo33)
                             (cons
                               (g$cadr$5264$gDo33 g$rest$5930$gDo33)
                               g$right$5932$gDo33))))))))
           g$loop$5929$gDo33)
         g$ls$5928$gDo33
         '()
         '()))))
   (g$reverse-it$5925$gDo33
     g$reverse-it$5950$gDo33
     (case-lambda
       ((g$head$5933$gDo33 g$tail$5934$gDo33)
        (if (null? g$head$5933$gDo33)
          g$tail$5934$gDo33
          (g$reverse-it$5925$gDo33
            (cdr g$head$5933$gDo33)
            (cons (car g$head$5933$gDo33) g$tail$5934$gDo33))))))
   (g$merge$5926$gDo33
     g$merge$5951$gDo33
     (case-lambda
       ((g$list-1$5935$gDo33 g$list-2$5936$gDo33 g$precedes?$5937$gDo33)
        ((letrec ((g$loop$5938$gDo33
                    (case-lambda
                      ((g$source-1$5939$gDo33
                         g$source-2$5940$gDo33
                         g$so-far$5941$gDo33)
                       (if (null? g$source-1$5939$gDo33)
                         (g$reverse-it$5925$gDo33
                           g$so-far$5941$gDo33
                           g$source-2$5940$gDo33)
                         (if (null? g$source-2$5940$gDo33)
                           (g$reverse-it$5925$gDo33
                             g$so-far$5941$gDo33
                             g$source-1$5939$gDo33)
                           ((case-lambda
                              ((g$car-1$5942$gDo33 g$car-2$5943$gDo33)
                               (if (g$precedes?$5937$gDo33
                                     g$car-2$5943$gDo33
                                     g$car-1$5942$gDo33)
                                 (g$loop$5938$gDo33
                                   g$source-1$5939$gDo33
                                   (cdr g$source-2$5940$gDo33)
                                   (cons
                                     g$car-2$5943$gDo33
                                     g$so-far$5941$gDo33))
                                 (g$loop$5938$gDo33
                                   g$source-2$5940$gDo33
                                   (cdr g$source-1$5939$gDo33)
                                   (cons
                                     g$car-1$5942$gDo33
                                     g$so-far$5941$gDo33)))))
                            (car g$source-1$5939$gDo33)
                            (car g$source-2$5940$gDo33))))))))
           g$loop$5938$gDo33)
         g$list-1$5935$gDo33
         g$list-2$5936$gDo33
         '()))))
   (g$list-sort$5927$gDo33
     g$list-sort$5952$gDo33
     (case-lambda
       ((g$precedes?$5944$gDo33 g$ls$5945$gDo33)
        (if (null? g$ls$5945$gDo33)
          '()
          ((letrec ((g$helper$5946$gDo33
                      (case-lambda
                        ((g$piece$5947$gDo33)
                         (if (null? (cdr g$piece$5947$gDo33))
                           g$piece$5947$gDo33
                           ((case-lambda
                              ((g$parts$5948$gDo33)
                               (g$merge$5926$gDo33
                                 (g$helper$5946$gDo33 (car g$parts$5948$gDo33))
                                 (g$helper$5946$gDo33 (cdr g$parts$5948$gDo33))
                                 g$precedes?$5944$gDo33)))
                            (g$split$5924$gDo33 g$piece$5947$gDo33)))))))
             g$helper$5946$gDo33)
           g$ls$5945$gDo33))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode)
  ((g$string-ci=?$5959$gDo33
     g$string-ci=?$6025$gDo33
     (case-lambda
       ((g$a$5975$gDo33 g$b$5976$gDo33 . g$rest$5977$gDo33)
        (begin
          (if (not (string? g$a$5975$gDo33))
            (assertion-violation 'string-ci=? '"not a string" g$a$5975$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5978$gDo33)
               (begin
                 (if (not (string? g$x$5978$gDo33))
                   (assertion-violation
                     'string-ci=?
                     '"not a string"
                     g$x$5978$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5979$gDo33)
                     (begin
                       (set! g$a$5975$gDo33 g$x$5978$gDo33)
                       g$r$5979$gDo33)))
                  (= (string-ci-compare g$a$5975$gDo33 g$x$5978$gDo33) '0)))))
            (cons g$b$5976$gDo33 g$rest$5977$gDo33))))))
   (g$string-ci<?$5960$gDo33
     g$string-ci<?$6026$gDo33
     (case-lambda
       ((g$a$5980$gDo33 g$b$5981$gDo33 . g$rest$5982$gDo33)
        (begin
          (if (not (string? g$a$5980$gDo33))
            (assertion-violation 'string-ci<? '"not a string" g$a$5980$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5983$gDo33)
               (begin
                 (if (not (string? g$x$5983$gDo33))
                   (assertion-violation
                     'string-ci<?
                     '"not a string"
                     g$x$5983$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5984$gDo33)
                     (begin
                       (set! g$a$5980$gDo33 g$x$5983$gDo33)
                       g$r$5984$gDo33)))
                  (< (string-ci-compare g$a$5980$gDo33 g$x$5983$gDo33) '0)))))
            (cons g$b$5981$gDo33 g$rest$5982$gDo33))))))
   (g$string-ci>?$5961$gDo33
     g$string-ci>?$6027$gDo33
     (case-lambda
       ((g$a$5985$gDo33 g$b$5986$gDo33 . g$rest$5987$gDo33)
        (begin
          (if (not (string? g$a$5985$gDo33))
            (assertion-violation 'string-ci>? '"not a string" g$a$5985$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5988$gDo33)
               (begin
                 (if (not (string? g$x$5988$gDo33))
                   (assertion-violation
                     'string-ci>?
                     '"not a string"
                     g$x$5988$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5989$gDo33)
                     (begin
                       (set! g$a$5985$gDo33 g$x$5988$gDo33)
                       g$r$5989$gDo33)))
                  (> (string-ci-compare g$a$5985$gDo33 g$x$5988$gDo33) '0)))))
            (cons g$b$5986$gDo33 g$rest$5987$gDo33))))))
   (g$string-ci<=?$5962$gDo33
     g$string-ci<=?$6028$gDo33
     (case-lambda
       ((g$a$5990$gDo33 g$b$5991$gDo33 . g$rest$5992$gDo33)
        (begin
          (if (not (string? g$a$5990$gDo33))
            (assertion-violation 'string-ci<=? '"not a string" g$a$5990$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5993$gDo33)
               (begin
                 (if (not (string? g$x$5993$gDo33))
                   (assertion-violation
                     'string-ci<=?
                     '"not a string"
                     g$x$5993$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5994$gDo33)
                     (begin
                       (set! g$a$5990$gDo33 g$x$5993$gDo33)
                       g$r$5994$gDo33)))
                  (<= (string-ci-compare g$a$5990$gDo33 g$x$5993$gDo33) '0)))))
            (cons g$b$5991$gDo33 g$rest$5992$gDo33))))))
   (g$string-ci>=?$5963$gDo33
     g$string-ci>=?$6029$gDo33
     (case-lambda
       ((g$a$5995$gDo33 g$b$5996$gDo33 . g$rest$5997$gDo33)
        (begin
          (if (not (string? g$a$5995$gDo33))
            (assertion-violation 'string-ci>=? '"not a string" g$a$5995$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$5998$gDo33)
               (begin
                 (if (not (string? g$x$5998$gDo33))
                   (assertion-violation
                     'string-ci>=?
                     '"not a string"
                     g$x$5998$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$5999$gDo33)
                     (begin
                       (set! g$a$5995$gDo33 g$x$5998$gDo33)
                       g$r$5999$gDo33)))
                  (>= (string-ci-compare g$a$5995$gDo33 g$x$5998$gDo33) '0)))))
            (cons g$b$5996$gDo33 g$rest$5997$gDo33))))))
   (g$char-ci=?$5970$gDo33
     g$char-ci=?$6030$gDo33
     (case-lambda
       ((g$a$6000$gDo33 g$b$6001$gDo33 . g$rest$6002$gDo33)
        (begin
          (if (not (char? g$a$6000$gDo33))
            (assertion-violation 'char-ci=? '"not a char" g$a$6000$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$6003$gDo33)
               (begin
                 (if (not (char? g$x$6003$gDo33))
                   (assertion-violation 'char-ci=? '"not a char" g$x$6003$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$6004$gDo33)
                     (begin
                       (set! g$a$6000$gDo33 g$x$6003$gDo33)
                       g$r$6004$gDo33)))
                  (= (char->integer (char-upcase g$a$6000$gDo33))
                     (char->integer (char-upcase g$x$6003$gDo33)))))))
            (cons g$b$6001$gDo33 g$rest$6002$gDo33))))))
   (g$char-ci<?$5971$gDo33
     g$char-ci<?$6031$gDo33
     (case-lambda
       ((g$a$6005$gDo33 g$b$6006$gDo33 . g$rest$6007$gDo33)
        (begin
          (if (not (char? g$a$6005$gDo33))
            (assertion-violation 'char-ci<? '"not a char" g$a$6005$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$6008$gDo33)
               (begin
                 (if (not (char? g$x$6008$gDo33))
                   (assertion-violation 'char-ci<? '"not a char" g$x$6008$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$6009$gDo33)
                     (begin
                       (set! g$a$6005$gDo33 g$x$6008$gDo33)
                       g$r$6009$gDo33)))
                  (< (char->integer (char-upcase g$a$6005$gDo33))
                     (char->integer (char-upcase g$x$6008$gDo33)))))))
            (cons g$b$6006$gDo33 g$rest$6007$gDo33))))))
   (g$char-ci>?$5972$gDo33
     g$char-ci>?$6032$gDo33
     (case-lambda
       ((g$a$6010$gDo33 g$b$6011$gDo33 . g$rest$6012$gDo33)
        (begin
          (if (not (char? g$a$6010$gDo33))
            (assertion-violation 'char-ci>? '"not a char" g$a$6010$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$6013$gDo33)
               (begin
                 (if (not (char? g$x$6013$gDo33))
                   (assertion-violation 'char-ci>? '"not a char" g$x$6013$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$6014$gDo33)
                     (begin
                       (set! g$a$6010$gDo33 g$x$6013$gDo33)
                       g$r$6014$gDo33)))
                  (> (char->integer (char-upcase g$a$6010$gDo33))
                     (char->integer (char-upcase g$x$6013$gDo33)))))))
            (cons g$b$6011$gDo33 g$rest$6012$gDo33))))))
   (g$char-ci<=?$5973$gDo33
     g$char-ci<=?$6033$gDo33
     (case-lambda
       ((g$a$6015$gDo33 g$b$6016$gDo33 . g$rest$6017$gDo33)
        (begin
          (if (not (char? g$a$6015$gDo33))
            (assertion-violation 'char-ci<=? '"not a char" g$a$6015$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$6018$gDo33)
               (begin
                 (if (not (char? g$x$6018$gDo33))
                   (assertion-violation
                     'char-ci<=?
                     '"not a char"
                     g$x$6018$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$6019$gDo33)
                     (begin
                       (set! g$a$6015$gDo33 g$x$6018$gDo33)
                       g$r$6019$gDo33)))
                  (<= (char->integer (char-upcase g$a$6015$gDo33))
                      (char->integer (char-upcase g$x$6018$gDo33)))))))
            (cons g$b$6016$gDo33 g$rest$6017$gDo33))))))
   (g$char-ci>=?$5974$gDo33
     g$char-ci>=?$6034$gDo33
     (case-lambda
       ((g$a$6020$gDo33 g$b$6021$gDo33 . g$rest$6022$gDo33)
        (begin
          (if (not (char? g$a$6020$gDo33))
            (assertion-violation 'char-ci>=? '"not a char" g$a$6020$gDo33)
            (void))
          (g$for-all$5061$gDo33
            (case-lambda
              ((g$x$6023$gDo33)
               (begin
                 (if (not (char? g$x$6023$gDo33))
                   (assertion-violation
                     'char-ci>=?
                     '"not a char"
                     g$x$6023$gDo33)
                   (void))
                 ((case-lambda
                    ((g$r$6024$gDo33)
                     (begin
                       (set! g$a$6020$gDo33 g$x$6023$gDo33)
                       g$r$6024$gDo33)))
                  (>= (char->integer (char-upcase g$a$6020$gDo33))
                      (char->integer (char-upcase g$x$6023$gDo33)))))))
            (cons g$b$6021$gDo33 g$rest$6022$gDo33)))))))
  (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$6035$gDo33
     g$bitwise-if$6066$gDo33
     (case-lambda
       ((g$ei1$6042$gDo33 g$ei2$6043$gDo33 g$ei3$6044$gDo33)
        (bitwise-ior
          (bitwise-and g$ei1$6042$gDo33 g$ei2$6043$gDo33)
          (bitwise-and (bitwise-not g$ei1$6042$gDo33) g$ei3$6044$gDo33)))))
   (g$bitwise-copy-bit$6036$gDo33
     g$bitwise-copy-bit$6067$gDo33
     (case-lambda
       ((g$ei1$6045$gDo33 g$ei2$6046$gDo33 g$ei3$6047$gDo33)
        (g$bitwise-if$6035$gDo33
          (g$bitwise-arithmetic-shift-left$6039$gDo33 '1 g$ei2$6046$gDo33)
          (g$bitwise-arithmetic-shift-left$6039$gDo33
            g$ei3$6047$gDo33
            g$ei2$6046$gDo33)
          g$ei1$6045$gDo33))))
   (g$bitwise-bit-field$6037$gDo33
     g$bitwise-bit-field$6068$gDo33
     (case-lambda
       ((g$ei1$6048$gDo33 g$ei2$6049$gDo33 g$ei3$6050$gDo33)
        (g$bitwise-arithmetic-shift-right$6040$gDo33
          (bitwise-and
            g$ei1$6048$gDo33
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6039$gDo33
                '-1
                g$ei3$6050$gDo33)))
          g$ei2$6049$gDo33))))
   (g$bitwise-copy-bit-field$6038$gDo33
     g$bitwise-copy-bit-field$6069$gDo33
     (case-lambda
       ((g$to$6051$gDo33 g$start$6052$gDo33 g$end$6053$gDo33 g$from$6054$gDo33)
        (g$bitwise-if$6035$gDo33
          (bitwise-and
            (g$bitwise-arithmetic-shift-left$6039$gDo33 '-1 g$start$6052$gDo33)
            (bitwise-not
              (g$bitwise-arithmetic-shift-left$6039$gDo33
                '-1
                g$end$6053$gDo33)))
          (g$bitwise-arithmetic-shift-left$6039$gDo33
            g$from$6054$gDo33
            g$start$6052$gDo33)
          g$to$6051$gDo33))))
   (g$bitwise-arithmetic-shift-left$6039$gDo33
     g$bitwise-arithmetic-shift-left$6070$gDo33
     (case-lambda
       ((g$ei1$6055$gDo33 g$ei2$6056$gDo33)
        (bitwise-arithmetic-shift g$ei1$6055$gDo33 g$ei2$6056$gDo33))))
   (g$bitwise-arithmetic-shift-right$6040$gDo33
     g$bitwise-arithmetic-shift-right$6071$gDo33
     (case-lambda
       ((g$ei1$6057$gDo33 g$ei2$6058$gDo33)
        (bitwise-arithmetic-shift g$ei1$6057$gDo33 (- g$ei2$6058$gDo33)))))
   (g$bitwise-rotate-bit-field$6041$gDo33
     g$bitwise-rotate-bit-field$6072$gDo33
     (case-lambda
       ((g$n$6059$gDo33 g$start$6060$gDo33 g$end$6061$gDo33 g$count$6062$gDo33)
        ((case-lambda
           ((g$width$6063$gDo33)
            (if (g$positive?$5291$gDo33 g$width$6063$gDo33)
              ((case-lambda
                 ((g$count$6064$gDo33 g$field$6065$gDo33)
                  (g$bitwise-copy-bit-field$6038$gDo33
                    g$n$6059$gDo33
                    g$start$6060$gDo33
                    g$end$6061$gDo33
                    (bitwise-ior
                      (g$bitwise-arithmetic-shift-left$6039$gDo33
                        g$field$6065$gDo33
                        g$count$6064$gDo33)
                      (g$bitwise-arithmetic-shift-right$6040$gDo33
                        g$field$6065$gDo33
                        (- g$width$6063$gDo33 g$count$6064$gDo33))))))
               (mod g$count$6062$gDo33 g$width$6063$gDo33)
               (g$bitwise-bit-field$6037$gDo33
                 g$n$6059$gDo33
                 g$start$6060$gDo33
                 g$end$6061$gDo33))
              g$n$6059$gDo33)))
         (- g$end$6061$gDo33 g$start$6060$gDo33))))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fx*/carry$6073$gDo33
     g$fx*/carry$6122$gDo33
     (case-lambda
       ((g$fx1$6083$gDo33 g$fx2$6084$gDo33 g$fx3$6085$gDo33)
        ((case-lambda
           ((g$s$6086$gDo33 g$e$6087$gDo33)
            (values
              (mod0 g$s$6086$gDo33 g$e$6087$gDo33)
              (div0 g$s$6086$gDo33 g$e$6087$gDo33))))
         (+ (* g$fx1$6083$gDo33 g$fx2$6084$gDo33) g$fx3$6085$gDo33)
         (expt '2 (fixnum-width))))))
   (g$fx-/carry$6074$gDo33
     g$fx-/carry$6123$gDo33
     (case-lambda
       ((g$fx1$6088$gDo33 g$fx2$6089$gDo33 g$fx3$6090$gDo33)
        ((case-lambda
           ((g$s$6091$gDo33 g$e$6092$gDo33)
            (values
              (mod0 g$s$6091$gDo33 g$e$6092$gDo33)
              (div0 g$s$6091$gDo33 g$e$6092$gDo33))))
         (- g$fx1$6088$gDo33 g$fx2$6089$gDo33 g$fx3$6090$gDo33)
         (expt '2 (fixnum-width))))))
   (g$fx+/carry$6075$gDo33
     g$fx+/carry$6124$gDo33
     (case-lambda
       ((g$fx1$6093$gDo33 g$fx2$6094$gDo33 g$fx3$6095$gDo33)
        ((case-lambda
           ((g$s$6096$gDo33 g$e$6097$gDo33)
            (values
              (mod0 g$s$6096$gDo33 g$e$6097$gDo33)
              (div0 g$s$6096$gDo33 g$e$6097$gDo33))))
         (+ g$fx1$6093$gDo33 g$fx2$6094$gDo33 g$fx3$6095$gDo33)
         (expt '2 (fixnum-width))))))
   (g$fxif$6076$gDo33
     g$fxif$6125$gDo33
     (case-lambda
       ((g$fx1$6098$gDo33 g$fx2$6099$gDo33 g$fx3$6100$gDo33)
        (fxior
          (fxand g$fx1$6098$gDo33 g$fx2$6099$gDo33)
          (fxand (fxnot g$fx1$6098$gDo33) g$fx3$6100$gDo33)))))
   (g$fxcopy-bit$6077$gDo33
     g$fxcopy-bit$6126$gDo33
     (case-lambda
       ((g$fx1$6101$gDo33 g$fx2$6102$gDo33 g$fx3$6103$gDo33)
        (g$fxif$6076$gDo33
          (g$fxarithmetic-shift-left$6080$gDo33 '1 g$fx2$6102$gDo33)
          (g$fxarithmetic-shift-left$6080$gDo33
            g$fx3$6103$gDo33
            g$fx2$6102$gDo33)
          g$fx1$6101$gDo33))))
   (g$fxbit-field$6078$gDo33
     g$fxbit-field$6127$gDo33
     (case-lambda
       ((g$fx1$6104$gDo33 g$fx2$6105$gDo33 g$fx3$6106$gDo33)
        (g$fxarithmetic-shift-right$6081$gDo33
          (fxand
            g$fx1$6104$gDo33
            (fxnot (g$fxarithmetic-shift-left$6080$gDo33 '-1 g$fx3$6106$gDo33)))
          g$fx2$6105$gDo33))))
   (g$fxcopy-bit-field$6079$gDo33
     g$fxcopy-bit-field$6128$gDo33
     (case-lambda
       ((g$to$6107$gDo33 g$start$6108$gDo33 g$end$6109$gDo33 g$from$6110$gDo33)
        (g$fxif$6076$gDo33
          (fxand
            (g$fxarithmetic-shift-left$6080$gDo33 '-1 g$start$6108$gDo33)
            (fxnot (g$fxarithmetic-shift-left$6080$gDo33 '-1 g$end$6109$gDo33)))
          (g$fxarithmetic-shift-left$6080$gDo33
            g$from$6110$gDo33
            g$start$6108$gDo33)
          g$to$6107$gDo33))))
   (g$fxarithmetic-shift-left$6080$gDo33
     g$fxarithmetic-shift-left$6129$gDo33
     (case-lambda
       ((g$fx1$6111$gDo33 g$fx2$6112$gDo33)
        (fxarithmetic-shift g$fx1$6111$gDo33 g$fx2$6112$gDo33))))
   (g$fxarithmetic-shift-right$6081$gDo33
     g$fxarithmetic-shift-right$6130$gDo33
     (case-lambda
       ((g$fx1$6113$gDo33 g$fx2$6114$gDo33)
        (fxarithmetic-shift g$fx1$6113$gDo33 (fx- g$fx2$6114$gDo33)))))
   (g$fxrotate-bit-field$6082$gDo33
     g$fxrotate-bit-field$6131$gDo33
     (case-lambda
       ((g$n$6115$gDo33 g$start$6116$gDo33 g$end$6117$gDo33 g$count$6118$gDo33)
        ((case-lambda
           ((g$width$6119$gDo33)
            (if (fxpositive? g$width$6119$gDo33)
              ((case-lambda
                 ((g$count$6120$gDo33 g$field$6121$gDo33)
                  (g$fxcopy-bit-field$6079$gDo33
                    g$n$6115$gDo33
                    g$start$6116$gDo33
                    g$end$6117$gDo33
                    (fxior
                      (g$fxarithmetic-shift-left$6080$gDo33
                        g$field$6121$gDo33
                        g$count$6120$gDo33)
                      (g$fxarithmetic-shift-right$6081$gDo33
                        g$field$6121$gDo33
                        (fx- g$width$6119$gDo33 g$count$6120$gDo33))))))
               (fxmod g$count$6118$gDo33 g$width$6119$gDo33)
               (g$fxbit-field$6078$gDo33
                 g$n$6115$gDo33
                 g$start$6116$gDo33
                 g$end$6117$gDo33))
              g$n$6115$gDo33)))
         (fx- g$end$6117$gDo33 g$start$6116$gDo33))))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$7173$6132$gDo33
     g$7173$6144$gDo33
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$7176$gDo33
       '#f
       '#f
       '#()))
   (g$7175$6133$gDo33 g$7175$6145$gDo33 '#f)
   (g$7174$6134$gDo33
     g$7174$6146$gDo33
     (make-record-constructor-descriptor
       g$7173$6132$gDo33
       &implementation-restriction-rcd
       g$7175$6133$gDo33))
   (g$7172$6135$gDo33
     g$7172$6147$gDo33
     (record-predicate g$7173$6132$gDo33))
   (g$make-no-infinities-violation$6136$gDo33
     g$make-no-infinities-violation$6148$gDo33
     (record-constructor g$7174$6134$gDo33))
   (g$no-infinities-violation?$6137$gDo33
     g$no-infinities-violation?$6149$gDo33
     (condition-predicate g$7173$6132$gDo33))
   (g$7187$6138$gDo33
     g$7187$6150$gDo33
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$7190$gDo33
       '#f
       '#f
       '#()))
   (g$7189$6139$gDo33 g$7189$6151$gDo33 '#f)
   (g$7188$6140$gDo33
     g$7188$6152$gDo33
     (make-record-constructor-descriptor
       g$7187$6138$gDo33
       &implementation-restriction-rcd
       g$7189$6139$gDo33))
   (g$7186$6141$gDo33
     g$7186$6153$gDo33
     (record-predicate g$7187$6138$gDo33))
   (g$make-no-nans-violation$6142$gDo33
     g$make-no-nans-violation$6154$gDo33
     (record-constructor g$7188$6140$gDo33))
   (g$no-nans-violation?$6143$gDo33
     g$no-nans-violation?$6155$gDo33
     (condition-predicate g$7187$6138$gDo33)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$7202$6156$gDo33
     g$7202$6236$gDo33
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$7205$gDo33
       '#f
       '#f
       '#()))
   (g$7204$6157$gDo33 g$7204$6237$gDo33 '#f)
   (g$7203$6158$gDo33
     g$7203$6238$gDo33
     (make-record-constructor-descriptor
       g$7202$6156$gDo33
       &error-rcd
       g$7204$6157$gDo33))
   (g$7201$6159$gDo33
     g$7201$6239$gDo33
     (record-predicate g$7202$6156$gDo33))
   (g$make-i/o-error$6160$gDo33
     g$make-i/o-error$6240$gDo33
     (record-constructor g$7203$6158$gDo33))
   (g$i/o-error?$6161$gDo33
     g$i/o-error?$6241$gDo33
     (condition-predicate g$7202$6156$gDo33))
   (g$7216$6162$gDo33
     g$7216$6242$gDo33
     (make-record-type-descriptor
       '&i/o-read
       g$7202$6156$gDo33
       'g$7219$gDo33
       '#f
       '#f
       '#()))
   (g$7218$6163$gDo33 g$7218$6243$gDo33 '#f)
   (g$7217$6164$gDo33
     g$7217$6244$gDo33
     (make-record-constructor-descriptor
       g$7216$6162$gDo33
       g$7203$6158$gDo33
       g$7218$6163$gDo33))
   (g$7215$6165$gDo33
     g$7215$6245$gDo33
     (record-predicate g$7216$6162$gDo33))
   (g$make-i/o-read-error$6166$gDo33
     g$make-i/o-read-error$6246$gDo33
     (record-constructor g$7217$6164$gDo33))
   (g$i/o-read-error?$6167$gDo33
     g$i/o-read-error?$6247$gDo33
     (condition-predicate g$7216$6162$gDo33))
   (g$7230$6168$gDo33
     g$7230$6248$gDo33
     (make-record-type-descriptor
       '&i/o-write
       g$7202$6156$gDo33
       'g$7233$gDo33
       '#f
       '#f
       '#()))
   (g$7232$6169$gDo33 g$7232$6249$gDo33 '#f)
   (g$7231$6170$gDo33
     g$7231$6250$gDo33
     (make-record-constructor-descriptor
       g$7230$6168$gDo33
       g$7203$6158$gDo33
       g$7232$6169$gDo33))
   (g$7229$6171$gDo33
     g$7229$6251$gDo33
     (record-predicate g$7230$6168$gDo33))
   (g$make-i/o-write-error$6172$gDo33
     g$make-i/o-write-error$6252$gDo33
     (record-constructor g$7231$6170$gDo33))
   (g$i/o-write-error?$6173$gDo33
     g$i/o-write-error?$6253$gDo33
     (condition-predicate g$7230$6168$gDo33))
   (g$7245$6174$gDo33
     g$7245$6254$gDo33
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$7202$6156$gDo33
       'g$7248$gDo33
       '#f
       '#f
       '#((immutable position))))
   (g$7247$6175$gDo33 g$7247$6255$gDo33 '#f)
   (g$7246$6176$gDo33
     g$7246$6256$gDo33
     (make-record-constructor-descriptor
       g$7245$6174$gDo33
       g$7203$6158$gDo33
       g$7247$6175$gDo33))
   (g$7244$6177$gDo33
     g$7244$6257$gDo33
     (record-predicate g$7245$6174$gDo33))
   (g$make-i/o-invalid-position-error$6178$gDo33
     g$make-i/o-invalid-position-error$6258$gDo33
     (record-constructor g$7246$6176$gDo33))
   (g$7243$6179$gDo33
     g$7243$6259$gDo33
     (record-accessor g$7245$6174$gDo33 '0))
   (g$i/o-invalid-position-error?$6180$gDo33
     g$i/o-invalid-position-error?$6260$gDo33
     (condition-predicate g$7245$6174$gDo33))
   (g$i/o-error-position$6181$gDo33
     g$i/o-error-position$6261$gDo33
     (condition-accessor g$7245$6174$gDo33 g$7243$6179$gDo33))
   (g$7262$6182$gDo33
     g$7262$6262$gDo33
     (make-record-type-descriptor
       '&i/o-filename
       g$7202$6156$gDo33
       'g$7265$gDo33
       '#f
       '#f
       '#((immutable filename))))
   (g$7264$6183$gDo33 g$7264$6263$gDo33 '#f)
   (g$7263$6184$gDo33
     g$7263$6264$gDo33
     (make-record-constructor-descriptor
       g$7262$6182$gDo33
       g$7203$6158$gDo33
       g$7264$6183$gDo33))
   (g$7261$6185$gDo33
     g$7261$6265$gDo33
     (record-predicate g$7262$6182$gDo33))
   (g$make-i/o-filename-error$6186$gDo33
     g$make-i/o-filename-error$6266$gDo33
     (record-constructor g$7263$6184$gDo33))
   (g$7260$6187$gDo33
     g$7260$6267$gDo33
     (record-accessor g$7262$6182$gDo33 '0))
   (g$i/o-filename-error?$6188$gDo33
     g$i/o-filename-error?$6268$gDo33
     (condition-predicate g$7262$6182$gDo33))
   (g$i/o-error-filename$6189$gDo33
     g$i/o-error-filename$6269$gDo33
     (condition-accessor g$7262$6182$gDo33 g$7260$6187$gDo33))
   (g$7278$6190$gDo33
     g$7278$6270$gDo33
     (make-record-type-descriptor
       '&i/o-file-protection
       g$7262$6182$gDo33
       'g$7281$gDo33
       '#f
       '#f
       '#()))
   (g$7280$6191$gDo33 g$7280$6271$gDo33 '#f)
   (g$7279$6192$gDo33
     g$7279$6272$gDo33
     (make-record-constructor-descriptor
       g$7278$6190$gDo33
       g$7263$6184$gDo33
       g$7280$6191$gDo33))
   (g$7277$6193$gDo33
     g$7277$6273$gDo33
     (record-predicate g$7278$6190$gDo33))
   (g$make-i/o-file-protection-error$6194$gDo33
     g$make-i/o-file-protection-error$6274$gDo33
     (record-constructor g$7279$6192$gDo33))
   (g$i/o-file-protection-error?$6195$gDo33
     g$i/o-file-protection-error?$6275$gDo33
     (condition-predicate g$7278$6190$gDo33))
   (g$7292$6196$gDo33
     g$7292$6276$gDo33
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$7278$6190$gDo33
       'g$7295$gDo33
       '#f
       '#f
       '#()))
   (g$7294$6197$gDo33 g$7294$6277$gDo33 '#f)
   (g$7293$6198$gDo33
     g$7293$6278$gDo33
     (make-record-constructor-descriptor
       g$7292$6196$gDo33
       g$7279$6192$gDo33
       g$7294$6197$gDo33))
   (g$7291$6199$gDo33
     g$7291$6279$gDo33
     (record-predicate g$7292$6196$gDo33))
   (g$make-i/o-file-is-read-only-error$6200$gDo33
     g$make-i/o-file-is-read-only-error$6280$gDo33
     (record-constructor g$7293$6198$gDo33))
   (g$i/o-file-is-read-only-error?$6201$gDo33
     g$i/o-file-is-read-only-error?$6281$gDo33
     (condition-predicate g$7292$6196$gDo33))
   (g$7306$6202$gDo33
     g$7306$6282$gDo33
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$7262$6182$gDo33
       'g$7309$gDo33
       '#f
       '#f
       '#()))
   (g$7308$6203$gDo33 g$7308$6283$gDo33 '#f)
   (g$7307$6204$gDo33
     g$7307$6284$gDo33
     (make-record-constructor-descriptor
       g$7306$6202$gDo33
       g$7263$6184$gDo33
       g$7308$6203$gDo33))
   (g$7305$6205$gDo33
     g$7305$6285$gDo33
     (record-predicate g$7306$6202$gDo33))
   (g$make-i/o-file-already-exists-error$6206$gDo33
     g$make-i/o-file-already-exists-error$6286$gDo33
     (record-constructor g$7307$6204$gDo33))
   (g$i/o-file-already-exists-error?$6207$gDo33
     g$i/o-file-already-exists-error?$6287$gDo33
     (condition-predicate g$7306$6202$gDo33))
   (g$7320$6208$gDo33
     g$7320$6288$gDo33
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$7262$6182$gDo33
       'g$7323$gDo33
       '#f
       '#f
       '#()))
   (g$7322$6209$gDo33 g$7322$6289$gDo33 '#f)
   (g$7321$6210$gDo33
     g$7321$6290$gDo33
     (make-record-constructor-descriptor
       g$7320$6208$gDo33
       g$7263$6184$gDo33
       g$7322$6209$gDo33))
   (g$7319$6211$gDo33
     g$7319$6291$gDo33
     (record-predicate g$7320$6208$gDo33))
   (g$make-i/o-file-does-not-exist-error$6212$gDo33
     g$make-i/o-file-does-not-exist-error$6292$gDo33
     (record-constructor g$7321$6210$gDo33))
   (g$i/o-file-does-not-exist-error?$6213$gDo33
     g$i/o-file-does-not-exist-error?$6293$gDo33
     (condition-predicate g$7320$6208$gDo33))
   (g$7335$6214$gDo33
     g$7335$6294$gDo33
     (make-record-type-descriptor
       '&i/o-port
       g$7202$6156$gDo33
       'g$7338$gDo33
       '#f
       '#f
       '#((immutable port))))
   (g$7337$6215$gDo33 g$7337$6295$gDo33 '#f)
   (g$7336$6216$gDo33
     g$7336$6296$gDo33
     (make-record-constructor-descriptor
       g$7335$6214$gDo33
       g$7203$6158$gDo33
       g$7337$6215$gDo33))
   (g$7334$6217$gDo33
     g$7334$6297$gDo33
     (record-predicate g$7335$6214$gDo33))
   (g$make-i/o-port-error$6218$gDo33
     g$make-i/o-port-error$6298$gDo33
     (record-constructor g$7336$6216$gDo33))
   (g$7333$6219$gDo33
     g$7333$6299$gDo33
     (record-accessor g$7335$6214$gDo33 '0))
   (g$i/o-port-error?$6220$gDo33
     g$i/o-port-error?$6300$gDo33
     (condition-predicate g$7335$6214$gDo33))
   (g$i/o-error-port$6221$gDo33
     g$i/o-error-port$6301$gDo33
     (condition-accessor g$7335$6214$gDo33 g$7333$6219$gDo33))
   (g$7351$6222$gDo33
     g$7351$6302$gDo33
     (make-record-type-descriptor
       '&i/o-decoding
       g$7335$6214$gDo33
       'g$7354$gDo33
       '#f
       '#f
       '#()))
   (g$7353$6223$gDo33 g$7353$6303$gDo33 '#f)
   (g$7352$6224$gDo33
     g$7352$6304$gDo33
     (make-record-constructor-descriptor
       g$7351$6222$gDo33
       g$7336$6216$gDo33
       g$7353$6223$gDo33))
   (g$7350$6225$gDo33
     g$7350$6305$gDo33
     (record-predicate g$7351$6222$gDo33))
   (g$make-i/o-decoding-error$6226$gDo33
     g$make-i/o-decoding-error$6306$gDo33
     (record-constructor g$7352$6224$gDo33))
   (g$i/o-decoding-error?$6227$gDo33
     g$i/o-decoding-error?$6307$gDo33
     (condition-predicate g$7351$6222$gDo33))
   (g$7366$6228$gDo33
     g$7366$6308$gDo33
     (make-record-type-descriptor
       '&i/o-encoding
       g$7335$6214$gDo33
       'g$7369$gDo33
       '#f
       '#f
       '#((immutable char))))
   (g$7368$6229$gDo33 g$7368$6309$gDo33 '#f)
   (g$7367$6230$gDo33
     g$7367$6310$gDo33
     (make-record-constructor-descriptor
       g$7366$6228$gDo33
       g$7336$6216$gDo33
       g$7368$6229$gDo33))
   (g$7365$6231$gDo33
     g$7365$6311$gDo33
     (record-predicate g$7366$6228$gDo33))
   (g$make-i/o-encoding-error$6232$gDo33
     g$make-i/o-encoding-error$6312$gDo33
     (record-constructor g$7367$6230$gDo33))
   (g$7364$6233$gDo33
     g$7364$6313$gDo33
     (record-accessor g$7366$6228$gDo33 '0))
   (g$i/o-encoding-error?$6234$gDo33
     g$i/o-encoding-error?$6314$gDo33
     (condition-predicate g$7366$6228$gDo33))
   (g$i/o-encoding-error-char$6235$gDo33
     g$i/o-encoding-error-char$6315$gDo33
     (condition-accessor g$7366$6228$gDo33 g$7364$6233$gDo33)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$using$6317$gDo33
     g$using$6333$gDo33
     (clr-using-internal 'ironscheme.runtime))
   (g$get-output-string$6318$gDo33
     g$get-output-string$6334$gDo33
     (case-lambda
       ((g$port$6324$gDo33)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6324$gDo33))))
   (g$open-output-string$6319$gDo33
     g$open-output-string$6335$gDo33
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6320$gDo33
     g$open-string-output-port$6336$gDo33
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6325$gDo33)
            (values
              g$p$6325$gDo33
              (case-lambda
                (() (g$get-output-string$6318$gDo33 g$p$6325$gDo33))))))
         (g$open-output-string$6319$gDo33)))))
   (g$port?$6321$gDo33
     g$port?$6337$gDo33
     (case-lambda
       ((g$obj$6326$gDo33)
        ((case-lambda
           ((g$t$6327$gDo33)
            (if g$t$6327$gDo33
              g$t$6327$gDo33
              (begin '#f (binary-port? g$obj$6326$gDo33)))))
         (textual-port? g$obj$6326$gDo33)))))
   (g$call-with-string-output-port$6322$gDo33
     g$call-with-string-output-port$6338$gDo33
     (case-lambda
       ((g$proc$6328$gDo33)
        ((case-lambda
           ((g$p$6329$gDo33)
            (begin
              (g$call-with-port$6323$gDo33 g$p$6329$gDo33 g$proc$6328$gDo33)
              (g$get-output-string$6318$gDo33 g$p$6329$gDo33))))
         (g$open-output-string$6319$gDo33)))))
   (g$call-with-port$6323$gDo33
     g$call-with-port$6339$gDo33
     (case-lambda
       ((g$port$6330$gDo33 g$proc$6331$gDo33)
        ((case-lambda
           ((g$r$6332$gDo33)
            (begin (close-port g$port$6330$gDo33) g$r$6332$gDo33)))
         (g$proc$6331$gDo33 g$port$6330$gDo33))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$peek-char$6340$gDo33
     g$peek-char$6382$gDo33
     (case-lambda
       (() (g$peek-char$6340$gDo33 (current-input-port)))
       ((g$port$6354$gDo33) (lookahead-char g$port$6354$gDo33))))
   (g$read-char$6341$gDo33
     g$read-char$6383$gDo33
     (case-lambda
       (() (g$read-char$6341$gDo33 (current-input-port)))
       ((g$port$6355$gDo33) (get-char g$port$6355$gDo33))))
   (g$write-char$6342$gDo33
     g$write-char$6384$gDo33
     (case-lambda
       ((g$chr$6356$gDo33)
        (g$write-char$6342$gDo33 g$chr$6356$gDo33 (current-output-port)))
       ((g$chr$6357$gDo33 g$port$6358$gDo33)
        (put-char g$port$6358$gDo33 g$chr$6357$gDo33))))
   (g$with-input-from-file$6349$gDo33
     g$with-input-from-file$6385$gDo33
     (case-lambda
       ((g$filename$6359$gDo33 g$thunk$6360$gDo33)
        ((case-lambda
           ((g$current-input-port$6363$gDo33 g$t$6364$gDo33)
            ((case-lambda
               ((g$swap$6365$gDo33)
                (dynamic-wind
                  g$swap$6365$gDo33
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6360$gDo33)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6365$gDo33)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6366$gDo33)
                    (begin
                      (g$current-input-port$6363$gDo33 g$t$6364$gDo33)
                      (set! g$t$6364$gDo33 g$t$6366$gDo33))))
                 (g$current-input-port$6363$gDo33)))))))
         current-input-port
         (open-input-file g$filename$6359$gDo33)))))
   (g$with-output-to-file$6350$gDo33
     g$with-output-to-file$6386$gDo33
     (case-lambda
       ((g$filename$6367$gDo33 g$thunk$6368$gDo33)
        ((case-lambda
           ((g$current-output-port$6371$gDo33 g$t$6372$gDo33)
            ((case-lambda
               ((g$swap$6373$gDo33)
                (dynamic-wind
                  g$swap$6373$gDo33
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6368$gDo33)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6373$gDo33)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6374$gDo33)
                    (begin
                      (g$current-output-port$6371$gDo33 g$t$6372$gDo33)
                      (set! g$t$6372$gDo33 g$t$6374$gDo33))))
                 (g$current-output-port$6371$gDo33)))))))
         current-output-port
         (open-output-file g$filename$6367$gDo33)))))
   (g$call-with-input-file$6351$gDo33
     g$call-with-input-file$6387$gDo33
     (case-lambda
       ((g$filename$6375$gDo33 g$proc$6376$gDo33)
        ((case-lambda
           ((g$p$6377$gDo33)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6376$gDo33 g$p$6377$gDo33)))
              (case-lambda (() (close-input-port g$p$6377$gDo33))))))
         (open-input-file g$filename$6375$gDo33)))))
   (g$call-with-output-file$6352$gDo33
     g$call-with-output-file$6388$gDo33
     (case-lambda
       ((g$filename$6378$gDo33 g$proc$6379$gDo33)
        ((case-lambda
           ((g$p$6380$gDo33)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6379$gDo33 g$p$6380$gDo33)))
              (case-lambda (() (close-output-port g$p$6380$gDo33))))))
         (open-output-file g$filename$6378$gDo33)))))
   (g$newline$6353$gDo33
     g$newline$6389$gDo33
     (case-lambda
       (() (g$newline$6353$gDo33 (current-output-port)))
       ((g$port$6381$gDo33) (display '"
" g$port$6381$gDo33)))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7451$6390$gDo33
     g$7451$6499$gDo33
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7453$6391$gDo33 g$7453$6500$gDo33 '#f)
   (g$7452$6392$gDo33
     g$7452$6501$gDo33
     (make-record-constructor-descriptor
       g$7451$6390$gDo33
       '#f
       g$7453$6391$gDo33))
   (g$enum?$6393$gDo33
     g$enum?$6502$gDo33
     (record-predicate g$7451$6390$gDo33))
   (g$make-enum$6394$gDo33
     g$make-enum$6503$gDo33
     (record-constructor g$7452$6392$gDo33))
   (g$enum-value$6395$gDo33
     g$enum-value$6504$gDo33
     (record-accessor g$7451$6390$gDo33 '0))
   (g$enum-info$6396$gDo33
     g$enum-info$6505$gDo33
     (record-accessor g$7451$6390$gDo33 '1))
   (g$7464$6397$gDo33
     g$7464$6506$gDo33
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7466$6398$gDo33 g$7466$6507$gDo33 '#f)
   (g$7465$6399$gDo33
     g$7465$6508$gDo33
     (make-record-constructor-descriptor
       g$7464$6397$gDo33
       '#f
       g$7466$6398$gDo33))
   (g$enum-universe?$6400$gDo33
     g$enum-universe?$6509$gDo33
     (record-predicate g$7464$6397$gDo33))
   (g$make-enum-universe$6401$gDo33
     g$make-enum-universe$6510$gDo33
     (record-constructor g$7465$6399$gDo33))
   (g$enum-universe-id$6402$gDo33
     g$enum-universe-id$6511$gDo33
     (record-accessor g$7464$6397$gDo33 '0))
   (g$enum-universe-symbols$6403$gDo33
     g$enum-universe-symbols$6512$gDo33
     (record-accessor g$7464$6397$gDo33 '1))
   (g$enum-universe-mapping$6404$gDo33
     g$enum-universe-mapping$6513$gDo33
     (record-accessor g$7464$6397$gDo33 '2))
   (g$enum-universe-value$6405$gDo33
     g$enum-universe-value$6514$gDo33
     (record-accessor g$7464$6397$gDo33 '3))
   (g$enum-type=?$6406$gDo33
     g$enum-type=?$6515$gDo33
     (case-lambda
       ((g$enumset1$6428$gDo33 g$enumset2$6429$gDo33)
        (eq? (g$enum-universe-id$6402$gDo33
               (g$enum-info$6396$gDo33 g$enumset1$6428$gDo33))
             (g$enum-universe-id$6402$gDo33
               (g$enum-info$6396$gDo33 g$enumset2$6429$gDo33))))))
   (g$get-symbols$6407$gDo33
     g$get-symbols$6516$gDo33
     (case-lambda
       ((g$enumset$6430$gDo33)
        (g$enum-universe-symbols$6403$gDo33
          (g$enum-info$6396$gDo33 g$enumset$6430$gDo33)))))
   (g$get-value$6408$gDo33
     g$get-value$6517$gDo33
     (case-lambda
       ((g$enumset$6431$gDo33 g$s$6432$gDo33)
        (g$hashtable-ref$5541$gDo33
          (g$enum-universe-mapping$6404$gDo33
            (g$enum-info$6396$gDo33 g$enumset$6431$gDo33))
          g$s$6432$gDo33
          '#f))))
   (g$assert-enum$6409$gDo33
     g$assert-enum$6518$gDo33
     (case-lambda
       ((g$who$6433$gDo33 g$enumset$6434$gDo33)
        (if (not (g$enum?$6393$gDo33 g$enumset$6434$gDo33))
          (assertion-violation
            g$who$6433$gDo33
            '"not an enumeration"
            g$enumset$6434$gDo33)
          (void)))))
   (g$make-info$6410$gDo33
     g$make-info$6519$gDo33
     (case-lambda
       ((g$symbols$6435$gDo33)
        ((case-lambda
           ((g$ht$6436$gDo33)
            ((letrec ((g$f$6437$gDo33
                        (case-lambda
                          ((g$s$6438$gDo33 g$a$6439$gDo33 g$mask$6440$gDo33)
                           (if (null? g$s$6438$gDo33)
                             (values
                               (reverse! g$a$6439$gDo33)
                               g$ht$6436$gDo33
                               (- g$mask$6440$gDo33 '1))
                             ((case-lambda
                                ((g$n$6441$gDo33)
                                 (if (symbol? g$n$6441$gDo33)
                                   (if (g$hashtable-contains?$5544$gDo33
                                         g$ht$6436$gDo33
                                         g$n$6441$gDo33)
                                     (g$f$6437$gDo33
                                       (cdr g$s$6438$gDo33)
                                       g$a$6439$gDo33
                                       g$mask$6440$gDo33)
                                     (begin
                                       (g$hashtable-set!$5542$gDo33
                                         g$ht$6436$gDo33
                                         g$n$6441$gDo33
                                         g$mask$6440$gDo33)
                                       (g$f$6437$gDo33
                                         (cdr g$s$6438$gDo33)
                                         (cons g$n$6441$gDo33 g$a$6439$gDo33)
                                         (g$bitwise-arithmetic-shift-left$6070$gDo33
                                           g$mask$6440$gDo33
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6441$gDo33))))
                              (car g$s$6438$gDo33)))))))
               g$f$6437$gDo33)
             g$symbols$6435$gDo33
             '()
             '1)))
         (g$make-eq-hashtable$5538$gDo33)))))
   (g$make-name$6411$gDo33
     g$make-name$6520$gDo33
     (case-lambda
       ((g$symbols$6442$gDo33)
        (string->symbol (g$format$6559$gDo33 '"~a" g$symbols$6442$gDo33)))))
   (g$make-enumeration$6412$gDo33
     g$make-enumeration$6521$gDo33
     (case-lambda
       ((g$symbols$6443$gDo33)
        (call-with-values
          (case-lambda (() (g$make-info$6410$gDo33 g$symbols$6443$gDo33)))
          (case-lambda
            ((g$s$6447$gDo33 g$mapping$6448$gDo33 g$mask$6449$gDo33)
             ((case-lambda
                ((g$mask$6450$gDo33 g$mapping$6451$gDo33 g$s$6452$gDo33)
                 (g$make-enum$6394$gDo33
                   g$mask$6450$gDo33
                   (g$make-enum-universe$6401$gDo33
                     (g$make-name$6411$gDo33 g$s$6452$gDo33)
                     g$s$6452$gDo33
                     g$mapping$6451$gDo33
                     g$mask$6450$gDo33))))
              g$mask$6449$gDo33
              g$mapping$6448$gDo33
              g$s$6447$gDo33)))))))
   (g$enum-set-universe$6413$gDo33
     g$enum-set-universe$6522$gDo33
     (case-lambda
       ((g$enumset$6453$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set-universe g$enumset$6453$gDo33)
          ((case-lambda
             ((g$ei$6454$gDo33)
              (g$make-enum$6394$gDo33
                (g$enum-universe-value$6405$gDo33 g$ei$6454$gDo33)
                g$ei$6454$gDo33)))
           (g$enum-info$6396$gDo33 g$enumset$6453$gDo33))))))
   (g$enum-set-indexer$6414$gDo33
     g$enum-set-indexer$6523$gDo33
     (case-lambda
       ((g$enumset$6455$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set-indexer g$enumset$6455$gDo33)
          (case-lambda
            ((g$symbol$6456$gDo33)
             (begin
               (if (not (symbol? g$symbol$6456$gDo33))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6456$gDo33)
                 (void))
               ((case-lambda
                  ((g$v$6457$gDo33)
                   (if g$v$6457$gDo33
                     (- (bitwise-length g$v$6457$gDo33) '1)
                     '#f)))
                (g$get-value$6408$gDo33
                  g$enumset$6455$gDo33
                  g$symbol$6456$gDo33)))))))))
   (g$enum-set-constructor$6415$gDo33
     g$enum-set-constructor$6524$gDo33
     (case-lambda
       ((g$enumset$6458$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set-constructor g$enumset$6458$gDo33)
          (case-lambda
            ((g$symbols$6459$gDo33)
             ((letrec ((g$f$6460$gDo33
                         (case-lambda
                           ((g$v$6461$gDo33 g$s$6462$gDo33)
                            (if (null? g$s$6462$gDo33)
                              (g$make-enum$6394$gDo33
                                g$v$6461$gDo33
                                (g$enum-info$6396$gDo33 g$enumset$6458$gDo33))
                              ((case-lambda
                                 ((g$n$6463$gDo33)
                                  (if (symbol? g$n$6463$gDo33)
                                    ((case-lambda
                                       ((g$v*$6464$gDo33)
                                        (if g$v*$6464$gDo33
                                          (g$f$6460$gDo33
                                            (bitwise-ior
                                              g$v$6461$gDo33
                                              g$v*$6464$gDo33)
                                            (cdr g$s$6462$gDo33))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6463$gDo33))))
                                     (g$get-value$6408$gDo33
                                       g$enumset$6458$gDo33
                                       g$n$6463$gDo33))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6463$gDo33))))
                               (car g$s$6462$gDo33)))))))
                g$f$6460$gDo33)
              '0
              g$symbols$6459$gDo33)))))))
   (g$enum-set->list$6416$gDo33
     g$enum-set->list$6525$gDo33
     (case-lambda
       ((g$enumset$6465$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set->list g$enumset$6465$gDo33)
          ((case-lambda
             ((g$value$6466$gDo33)
              ((letrec ((g$f$6467$gDo33
                          (case-lambda
                            ((g$s$6468$gDo33 g$l$6469$gDo33)
                             (if (null? g$s$6468$gDo33)
                               (reverse! g$l$6469$gDo33)
                               (if (g$zero?$5293$gDo33
                                     (bitwise-and
                                       (g$get-value$6408$gDo33
                                         g$enumset$6465$gDo33
                                         (car g$s$6468$gDo33))
                                       g$value$6466$gDo33))
                                 (g$f$6467$gDo33
                                   (cdr g$s$6468$gDo33)
                                   g$l$6469$gDo33)
                                 (g$f$6467$gDo33
                                   (cdr g$s$6468$gDo33)
                                   (cons
                                     (car g$s$6468$gDo33)
                                     g$l$6469$gDo33))))))))
                 g$f$6467$gDo33)
               (g$get-symbols$6407$gDo33 g$enumset$6465$gDo33)
               '())))
           (g$enum-value$6395$gDo33 g$enumset$6465$gDo33))))))
   (g$enum-set-member?$6417$gDo33
     g$enum-set-member?$6526$gDo33
     (case-lambda
       ((g$symbol$6470$gDo33 g$enumset$6471$gDo33)
        (begin
          (if (not (symbol? g$symbol$6470$gDo33))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6470$gDo33)
            (void))
          (g$assert-enum$6409$gDo33 'enum-set-member? g$enumset$6471$gDo33)
          ((case-lambda
             ((g$v$6472$gDo33)
              (if g$v$6472$gDo33
                (not (g$zero?$5293$gDo33
                       (bitwise-and
                         g$v$6472$gDo33
                         (g$enum-value$6395$gDo33 g$enumset$6471$gDo33))))
                '#f)))
           (g$get-value$6408$gDo33
             g$enumset$6471$gDo33
             g$symbol$6470$gDo33))))))
   (g$enum-set-subset?$6418$gDo33
     g$enum-set-subset?$6527$gDo33
     (case-lambda
       ((g$enumset1$6473$gDo33 g$enumset2$6474$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set-subset? g$enumset1$6473$gDo33)
          (g$assert-enum$6409$gDo33 'enum-set-subset? g$enumset2$6474$gDo33)
          ((case-lambda
             ((g$v1$6475$gDo33 g$v2$6476$gDo33)
              (if (g$enum-type=?$6406$gDo33
                    g$enumset1$6473$gDo33
                    g$enumset2$6474$gDo33)
                (= (bitwise-and g$v1$6475$gDo33 g$v2$6476$gDo33)
                   g$v1$6475$gDo33)
                ((letrec ((g$f$6477$gDo33
                            (case-lambda
                              ((g$s$6478$gDo33)
                               (if (null? g$s$6478$gDo33)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6479$gDo33 g$v2*$6480$gDo33)
                                     (if g$v2*$6480$gDo33
                                       ((case-lambda
                                          ((g$has1$6481$gDo33 g$has2$6482$gDo33)
                                           (if (if g$has1$6481$gDo33
                                                 (begin
                                                   '#f
                                                   (not g$has2$6482$gDo33))
                                                 '#f)
                                             '#f
                                             (g$f$6477$gDo33
                                               (cdr g$s$6478$gDo33)))))
                                        (not (g$zero?$5293$gDo33
                                               (bitwise-and
                                                 g$v1$6475$gDo33
                                                 g$v1*$6479$gDo33)))
                                        (not (g$zero?$5293$gDo33
                                               (bitwise-and
                                                 g$v2$6476$gDo33
                                                 g$v2*$6480$gDo33))))
                                       '#f)))
                                  (g$get-value$6408$gDo33
                                    g$enumset1$6473$gDo33
                                    (car g$s$6478$gDo33))
                                  (g$get-value$6408$gDo33
                                    g$enumset2$6474$gDo33
                                    (car g$s$6478$gDo33))))))))
                   g$f$6477$gDo33)
                 (g$get-symbols$6407$gDo33 g$enumset1$6473$gDo33)))))
           (g$enum-value$6395$gDo33 g$enumset1$6473$gDo33)
           (g$enum-value$6395$gDo33 g$enumset2$6474$gDo33))))))
   (g$enum-set=?$6419$gDo33
     g$enum-set=?$6528$gDo33
     (case-lambda
       ((g$enumset1$6483$gDo33 g$enumset2$6484$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set=? g$enumset1$6483$gDo33)
          (g$assert-enum$6409$gDo33 'enum-set=? g$enumset2$6484$gDo33)
          (if (g$enum-set-subset?$6418$gDo33
                g$enumset1$6483$gDo33
                g$enumset2$6484$gDo33)
            (begin
              '#f
              (g$enum-set-subset?$6418$gDo33
                g$enumset2$6484$gDo33
                g$enumset1$6483$gDo33))
            '#f)))))
   (g$enum-set-union$6420$gDo33
     g$enum-set-union$6529$gDo33
     (case-lambda
       ((g$enumset1$6485$gDo33 g$enumset2$6486$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set-union g$enumset1$6485$gDo33)
          (g$assert-enum$6409$gDo33 'enum-set-union g$enumset2$6486$gDo33)
          (if (g$enum-type=?$6406$gDo33
                g$enumset1$6485$gDo33
                g$enumset2$6486$gDo33)
            (g$make-enum$6394$gDo33
              (bitwise-ior
                (g$enum-value$6395$gDo33 g$enumset1$6485$gDo33)
                (g$enum-value$6395$gDo33 g$enumset2$6486$gDo33))
              (g$enum-info$6396$gDo33 g$enumset1$6485$gDo33))
            '#f)))))
   (g$enum-set-intersection$6421$gDo33
     g$enum-set-intersection$6530$gDo33
     (case-lambda
       ((g$enumset1$6487$gDo33 g$enumset2$6488$gDo33)
        (begin
          (g$assert-enum$6409$gDo33
            'enum-set-intersection
            g$enumset1$6487$gDo33)
          (g$assert-enum$6409$gDo33
            'enum-set-intersection
            g$enumset2$6488$gDo33)
          (if (g$enum-type=?$6406$gDo33
                g$enumset1$6487$gDo33
                g$enumset2$6488$gDo33)
            (g$make-enum$6394$gDo33
              (bitwise-and
                (g$enum-value$6395$gDo33 g$enumset1$6487$gDo33)
                (g$enum-value$6395$gDo33 g$enumset2$6488$gDo33))
              (g$enum-info$6396$gDo33 g$enumset1$6487$gDo33))
            '#f)))))
   (g$enum-set-difference$6422$gDo33
     g$enum-set-difference$6531$gDo33
     (case-lambda
       ((g$enumset1$6489$gDo33 g$enumset2$6490$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set-difference g$enumset1$6489$gDo33)
          (g$assert-enum$6409$gDo33 'enum-set-difference g$enumset2$6490$gDo33)
          (if (g$enum-type=?$6406$gDo33
                g$enumset1$6489$gDo33
                g$enumset2$6490$gDo33)
            (g$make-enum$6394$gDo33
              (bitwise-and
                (g$enum-value$6395$gDo33 g$enumset1$6489$gDo33)
                (bitwise-not (g$enum-value$6395$gDo33 g$enumset2$6490$gDo33)))
              (g$enum-info$6396$gDo33 g$enumset1$6489$gDo33))
            '#f)))))
   (g$enum-set-complement$6423$gDo33
     g$enum-set-complement$6532$gDo33
     (case-lambda
       ((g$enumset$6491$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set-complement g$enumset$6491$gDo33)
          (g$make-enum$6394$gDo33
            (bitwise-not (g$enum-value$6395$gDo33 g$enumset$6491$gDo33))
            (g$enum-info$6396$gDo33 g$enumset$6491$gDo33))))))
   (g$enum-set-projection$6424$gDo33
     g$enum-set-projection$6533$gDo33
     (case-lambda
       ((g$enumset1$6492$gDo33 g$enumset2$6493$gDo33)
        (begin
          (g$assert-enum$6409$gDo33 'enum-set-projection g$enumset1$6492$gDo33)
          (g$assert-enum$6409$gDo33 'enum-set-projection g$enumset2$6493$gDo33)
          ((case-lambda
             ((g$v1$6494$gDo33)
              ((letrec ((g$f$6495$gDo33
                          (case-lambda
                            ((g$s$6496$gDo33 g$v$6497$gDo33)
                             (if (null? g$s$6496$gDo33)
                               (g$make-enum$6394$gDo33
                                 g$v$6497$gDo33
                                 (g$enum-info$6396$gDo33 g$enumset2$6493$gDo33))
                               (if (g$zero?$5293$gDo33
                                     (bitwise-and
                                       g$v1$6494$gDo33
                                       (g$get-value$6408$gDo33
                                         g$enumset1$6492$gDo33
                                         (car g$s$6496$gDo33))))
                                 (g$f$6495$gDo33
                                   (cdr g$s$6496$gDo33)
                                   g$v$6497$gDo33)
                                 ((case-lambda
                                    ((g$v2$6498$gDo33)
                                     (if g$v2$6498$gDo33
                                       (g$f$6495$gDo33
                                         (cdr g$s$6496$gDo33)
                                         (bitwise-ior
                                           g$v$6497$gDo33
                                           g$v2$6498$gDo33))
                                       (g$f$6495$gDo33
                                         (cdr g$s$6496$gDo33)
                                         g$v$6497$gDo33))))
                                  (g$get-value$6408$gDo33
                                    g$enumset2$6493$gDo33
                                    (car g$s$6496$gDo33)))))))))
                 g$f$6495$gDo33)
               (g$get-symbols$6407$gDo33 g$enumset1$6492$gDo33)
               '0)))
           (g$enum-value$6395$gDo33 g$enumset1$6492$gDo33)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6425$gDo33 g$p$6426$gDo33 g$wr$6427$gDo33)
       (g$fprintf$6558$gDo33
         g$p$6426$gDo33
         '"#[enum-set ~a]"
         (g$enum-set->list$6416$gDo33 g$x$6425$gDo33))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6534$gDo33
     g$dofmt$6556$gDo33
     (case-lambda
       ((g$p$6538$gDo33 g$cntl$6539$gDo33 g$args$6540$gDo33)
        ((case-lambda
           ((g$nmax$6541$gDo33)
            ((letrec ((g$loop$6542$gDo33
                        (case-lambda
                          ((g$n$6543$gDo33 g$a$6544$gDo33)
                           (if (fx<=? g$n$6543$gDo33 g$nmax$6541$gDo33)
                             ((case-lambda
                                ((g$c$6545$gDo33)
                                 (if (if (g$char=?$5307$gDo33
                                           g$c$6545$gDo33
                                           '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6543$gDo33
                                           g$nmax$6541$gDo33))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6546$gDo33)
                                       (if (g$memv$5056$gDo33
                                             g$t$6546$gDo33
                                             '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6544$gDo33)
                                             g$p$6538$gDo33)
                                           (g$loop$6542$gDo33
                                             (fx+ g$n$6543$gDo33 '2)
                                             (cdr g$a$6544$gDo33)))
                                         (if (g$memv$5056$gDo33
                                               g$t$6546$gDo33
                                               '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6544$gDo33)
                                               g$p$6538$gDo33)
                                             (g$loop$6542$gDo33
                                               (fx+ g$n$6543$gDo33 '2)
                                               (cdr g$a$6544$gDo33)))
                                           (if (g$memv$5056$gDo33
                                                 g$t$6546$gDo33
                                                 '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6544$gDo33)
                                                   '2)
                                                 g$p$6538$gDo33)
                                               (g$loop$6542$gDo33
                                                 (fx+ g$n$6543$gDo33 '2)
                                                 (cdr g$a$6544$gDo33)))
                                             (if (g$memv$5056$gDo33
                                                   g$t$6546$gDo33
                                                   '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6544$gDo33)
                                                     '8)
                                                   g$p$6538$gDo33)
                                                 (g$loop$6542$gDo33
                                                   (fx+ g$n$6543$gDo33 '2)
                                                   (cdr g$a$6544$gDo33)))
                                               (if (g$memv$5056$gDo33
                                                     g$t$6546$gDo33
                                                     '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6544$gDo33)
                                                       '16)
                                                     g$p$6538$gDo33)
                                                   (g$loop$6542$gDo33
                                                     (fx+ g$n$6543$gDo33 '2)
                                                     (cdr g$a$6544$gDo33)))
                                                 (if (g$memv$5056$gDo33
                                                       g$t$6546$gDo33
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6544$gDo33)
                                                         '10)
                                                       g$p$6538$gDo33)
                                                     (g$loop$6542$gDo33
                                                       (fx+ g$n$6543$gDo33 '2)
                                                       (cdr g$a$6544$gDo33)))
                                                   (if (g$memv$5056$gDo33
                                                         g$t$6546$gDo33
                                                         '(#\~))
                                                     (begin
                                                       (g$write-char$6384$gDo33
                                                         '#\~
                                                         g$p$6538$gDo33)
                                                       (g$loop$6542$gDo33
                                                         (fx+ g$n$6543$gDo33 '2)
                                                         g$a$6544$gDo33))
                                                     (begin
                                                       (g$write-char$6384$gDo33
                                                         g$c$6545$gDo33
                                                         g$p$6538$gDo33)
                                                       (g$loop$6542$gDo33
                                                         (fx+ g$n$6543$gDo33 '1)
                                                         g$a$6544$gDo33)))))))))))
                                    (string-ref
                                      g$cntl$6539$gDo33
                                      (fx+ g$n$6543$gDo33 '1)))
                                   (begin
                                     (g$write-char$6384$gDo33
                                       g$c$6545$gDo33
                                       g$p$6538$gDo33)
                                     (g$loop$6542$gDo33
                                       (fx+ g$n$6543$gDo33 '1)
                                       g$a$6544$gDo33)))))
                              (string-ref g$cntl$6539$gDo33 g$n$6543$gDo33))
                             (void))))))
               g$loop$6542$gDo33)
             '0
             g$args$6540$gDo33)))
         (fx- (string-length g$cntl$6539$gDo33) '1)))))
   (g$printf$6535$gDo33
     g$printf$6557$gDo33
     (case-lambda
       ((g$control$6547$gDo33 . g$args$6548$gDo33)
        (g$dofmt$6534$gDo33
          (current-output-port)
          g$control$6547$gDo33
          g$args$6548$gDo33))))
   (g$fprintf$6536$gDo33
     g$fprintf$6558$gDo33
     (case-lambda
       ((g$p$6549$gDo33 g$control$6550$gDo33 . g$args$6551$gDo33)
        (g$dofmt$6534$gDo33
          g$p$6549$gDo33
          g$control$6550$gDo33
          g$args$6551$gDo33))))
   (g$format$6537$gDo33
     g$format$6559$gDo33
     (case-lambda
       ((g$control$6552$gDo33 . g$args$6553$gDo33)
        (call-with-values
          g$open-string-output-port$6336$gDo33
          (case-lambda
            ((g$p$6554$gDo33 g$c$6555$gDo33)
             (begin
               (g$dofmt$6534$gDo33
                 g$p$6554$gDo33
                 g$control$6552$gDo33
                 g$args$6553$gDo33)
               (g$c$6555$gDo33)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6560$gDo33
     g$make-traced-macro$6563$gDo33
     (case-lambda
       ((g$name$6561$gDo33 g$x$6562$gDo33)
        (if (procedure? g$x$6562$gDo33)
          (make-traced-procedure
            g$name$6561$gDo33
            g$x$6562$gDo33
            g$syntax->datum$11615$gDo33)
          (if (g$variable-transformer?$11437$gDo33 g$x$6562$gDo33)
            (g$make-variable-transformer$11436$gDo33
              (make-traced-procedure
                g$name$6561$gDo33
                (g$variable-transformer-procedure$11438$gDo33 g$x$6562$gDo33)
                g$syntax->datum$11615$gDo33))
            g$x$6562$gDo33))))))
  (void))

(library-letrec* (ironscheme cps)
  ((g$cps/generate-reference$6564$gDo33
     g$cps/generate-reference$6837$gDo33
     (case-lambda
       ((g$variable$6619$gDo33)
        (g$cps/generate-operand$6568$gDo33
          (g$make-reference$6594$gDo33 g$variable$6619$gDo33)))))
   (g$cps/generate-literal$6565$gDo33
     g$cps/generate-literal$6838$gDo33
     (case-lambda
       ((g$datum$6620$gDo33)
        (g$cps/generate-operand$6568$gDo33
          (g$make-literal$6593$gDo33 g$datum$6620$gDo33)))))
   (g$cps/generate-abstraction$6566$gDo33
     g$cps/generate-abstraction$6839$gDo33
     (case-lambda
       ((g$bvl$6621$gDo33 g$body-generator$6622$gDo33)
        (g$cps/generate-operand$6568$gDo33
          (g$make-user-abstraction$6595$gDo33
            g$bvl$6621$gDo33
            (case-lambda
              ((g$continuation-variable$6623$gDo33)
               (g$body-generator$6622$gDo33
                 (g$variable-continuator$6581$gDo33
                   g$continuation-variable$6623$gDo33)))))))))
   (g$cps/generate-abstractions$6567$gDo33
     g$cps/generate-abstractions$6840$gDo33
     (case-lambda
       ((g$bvls$6624$gDo33 g$body-generators$6625$gDo33)
        (g$cps/generate-operand$6568$gDo33
          (g$make-user-abstractions$6596$gDo33
            g$bvls$6624$gDo33
            (g$map$5063$gDo33
              (case-lambda
                ((g$body-generator$6626$gDo33)
                 (case-lambda
                   ((g$continuation-variable$6627$gDo33)
                    (g$body-generator$6626$gDo33
                      (g$variable-continuator$6581$gDo33
                        g$continuation-variable$6627$gDo33))))))
              g$body-generators$6625$gDo33))))))
   (g$cps/generate-operand$6568$gDo33
     g$cps/generate-operand$6841$gDo33
     (case-lambda
       ((g$operand$6628$gDo33)
        (case-lambda
          ((g$continuator$6629$gDo33)
           (g$continue-with-operand$6584$gDo33
             g$continuator$6629$gDo33
             g$operand$6628$gDo33))))))
   (g$cps/generate-conditional$6569$gDo33
     g$cps/generate-conditional$6842$gDo33
     (case-lambda
       ((g$condition-generator$6630$gDo33
          g$consequent-generator$6631$gDo33
          g$alternative-generator$6632$gDo33)
        (case-lambda
          ((g$continuator$6633$gDo33)
           (letrec* ((g$if-variable$6634$gDo33
                       (case-lambda
                         ((g$continuation-variable$6636$gDo33)
                          ((case-lambda
                             ((g$continuator*$6637$gDo33)
                              (g$condition-generator$6630$gDo33
                                (g$conditional-continuator$6580$gDo33
                                  (case-lambda
                                    ((g$condition$6638$gDo33)
                                     (g$make-conditional$6603$gDo33
                                       g$condition$6638$gDo33
                                       (g$consequent-generator$6631$gDo33
                                         g$continuator*$6637$gDo33)
                                       (g$alternative-generator$6632$gDo33
                                         g$continuator*$6637$gDo33))))))))
                           (g$variable-continuator$6581$gDo33
                             g$continuation-variable$6636$gDo33))))))
             (g$reify-continuation*$6586$gDo33
               g$continuator$6633$gDo33
               g$if-variable$6634$gDo33
               (case-lambda
                 ((g$continuation-abstraction$6635$gDo33)
                  (g$make-conditional-join$6604$gDo33
                    g$continuation-abstraction$6635$gDo33
                    g$if-variable$6634$gDo33))))))))))
   (g$cps/generate-recursive-bind$6570$gDo33
     g$cps/generate-recursive-bind$6843$gDo33
     (case-lambda
       ((g$variables$6639$gDo33
          g$generators$6640$gDo33
          g$body-generator$6641$gDo33)
        (case-lambda
          ((g$continuator$6642$gDo33)
           (g$make-recursive-bind$6598$gDo33
             g$variables$6639$gDo33
             (g$map$5063$gDo33
               (case-lambda
                 ((g$generator$6643$gDo33)
                  (case-lambda
                    ((g$continuation-variable$6644$gDo33)
                     (g$generator$6643$gDo33
                       (g$variable-continuator$6581$gDo33
                         g$continuation-variable$6644$gDo33))))))
               g$generators$6640$gDo33)
             (g$body-generator$6641$gDo33
               (g$reified-continuator$6583$gDo33
                 g$continuator$6642$gDo33))))))))
   (g$cps/generate-recursive*-bind$6571$gDo33
     g$cps/generate-recursive*-bind$6844$gDo33
     (case-lambda
       ((g$variables$6645$gDo33
          g$generators$6646$gDo33
          g$body-generator$6647$gDo33)
        (case-lambda
          ((g$continuator$6648$gDo33)
           (g$make-recursive*-bind$6599$gDo33
             g$variables$6645$gDo33
             (g$map$5063$gDo33
               (case-lambda
                 ((g$generator$6649$gDo33)
                  (case-lambda
                    ((g$continuation-variable$6650$gDo33)
                     (g$generator$6649$gDo33
                       (g$variable-continuator$6581$gDo33
                         g$continuation-variable$6650$gDo33))))))
               g$generators$6646$gDo33)
             (g$body-generator$6647$gDo33
               (g$reified-continuator$6583$gDo33
                 g$continuator$6648$gDo33))))))))
   (g$cps/generate-recursive*-library-bind$6572$gDo33
     g$cps/generate-recursive*-library-bind$6845$gDo33
     (case-lambda
       ((g$name$6651$gDo33
          g$variables$6652$gDo33
          g$variables*$6653$gDo33
          g$generators$6654$gDo33
          g$body-generator$6655$gDo33)
        (case-lambda
          ((g$continuator$6656$gDo33)
           (g$make-recursive*-library-bind$6600$gDo33
             g$name$6651$gDo33
             g$variables$6652$gDo33
             g$variables*$6653$gDo33
             (g$map$5063$gDo33
               (case-lambda
                 ((g$generator$6657$gDo33)
                  (case-lambda
                    ((g$continuation-variable$6658$gDo33)
                     (g$generator$6657$gDo33
                       (g$variable-continuator$6581$gDo33
                         g$continuation-variable$6658$gDo33))))))
               g$generators$6654$gDo33)
             (g$body-generator$6655$gDo33
               (g$reified-continuator$6583$gDo33
                 g$continuator$6656$gDo33))))))))
   (g$cps/generate-sequence$6573$gDo33
     g$cps/generate-sequence$6846$gDo33
     (case-lambda
       ((g$generators$6659$gDo33)
        (case-lambda
          ((g$continuator$6660$gDo33)
           ((letrec ((g$recur$6661$gDo33
                       (case-lambda
                         ((g$generators$6662$gDo33)
                          ((car g$generators$6662$gDo33)
                           ((case-lambda
                              ((g$generators$6663$gDo33)
                               (if (pair? g$generators$6663$gDo33)
                                 (g$effect-continuator$6579$gDo33
                                   (case-lambda
                                     (()
                                      (g$recur$6661$gDo33
                                        g$generators$6663$gDo33))))
                                 g$continuator$6660$gDo33)))
                            (cdr g$generators$6662$gDo33)))))))
              g$recur$6661$gDo33)
            g$generators$6659$gDo33))))))
   (g$cps/generate-assignment$6574$gDo33
     g$cps/generate-assignment$6847$gDo33
     (case-lambda
       ((g$location$6664$gDo33 g$expression-generator$6665$gDo33)
        (case-lambda
          ((g$continuator$6666$gDo33)
           (g$expression-generator$6665$gDo33
             (g$operand-continuator$6578$gDo33
               (case-lambda
                 ((g$operand$6667$gDo33)
                  (g$make-assignment$6606$gDo33
                    g$location$6664$gDo33
                    g$operand$6667$gDo33
                    (g$continue-with-operand$6584$gDo33
                      g$continuator$6666$gDo33
                      '(void))))))))))))
   (g$cps/generate-primitive$6575$gDo33
     g$cps/generate-primitive$6848$gDo33
     (case-lambda
       ((g$operator$6668$gDo33 g$operand-generators$6669$gDo33)
        (case-lambda
          ((g$continuator$6670$gDo33)
           (g$continue-with-operand$6584$gDo33
             g$continuator$6670$gDo33
             (cons
               g$operator$6668$gDo33
               (g$map$5063$gDo33
                 (case-lambda
                   ((g$generator$6671$gDo33)
                    (case-lambda
                      ((g$continuation-variable$6672$gDo33)
                       (g$generator$6671$gDo33
                         (g$variable-continuator$6581$gDo33
                           g$continuation-variable$6672$gDo33))))))
                 g$operand-generators$6669$gDo33))))))))
   (g$cps/generate-combination$6576$gDo33
     g$cps/generate-combination$6849$gDo33
     (case-lambda
       ((g$operator-generator$6673$gDo33 g$operand-generators$6674$gDo33)
        (g$cps/generate-subproblems$6577$gDo33
          (reverse
            (cons
              g$operator-generator$6673$gDo33
              g$operand-generators$6674$gDo33))
          (case-lambda
            ((g$operands$6675$gDo33 g$continuator$6676$gDo33)
             (g$make-combination$6601$gDo33
               (car g$operands$6675$gDo33)
               (g$reify-continuation$6585$gDo33 g$continuator$6676$gDo33)
               (cdr g$operands$6675$gDo33))))))))
   (g$cps/generate-subproblems$6577$gDo33
     g$cps/generate-subproblems$6850$gDo33
     (case-lambda
       ((g$generators$6677$gDo33 g$combiner$6678$gDo33)
        (case-lambda
          ((g$continuator$6679$gDo33)
           ((letrec ((g$recur$6680$gDo33
                       (case-lambda
                         ((g$generators$6681$gDo33 g$operands$6682$gDo33)
                          (if (pair? g$generators$6681$gDo33)
                            ((car g$generators$6681$gDo33)
                             ((case-lambda
                                ((g$generators$6683$gDo33)
                                 (g$operand-continuator$6578$gDo33
                                   (case-lambda
                                     ((g$operand$6684$gDo33)
                                      (g$recur$6680$gDo33
                                        g$generators$6683$gDo33
                                        (cons
                                          g$operand$6684$gDo33
                                          g$operands$6682$gDo33)))))))
                              (cdr g$generators$6681$gDo33)))
                            (g$combiner$6678$gDo33
                              g$operands$6682$gDo33
                              g$continuator$6679$gDo33))))))
              g$recur$6680$gDo33)
            g$generators$6677$gDo33
            '()))))))
   (g$operand-continuator$6578$gDo33
     g$operand-continuator$6851$gDo33
     (case-lambda
       ((g$generator$6685$gDo33)
        (case-lambda
          ((g$if-operand$6686$gDo33
             g$if-effect$6687$gDo33
             g$if-conditional$6688$gDo33
             g$if-variable$6689$gDo33
             g$if-inline$6690$gDo33)
           (begin
             g$if-effect$6687$gDo33
             g$if-conditional$6688$gDo33
             g$if-variable$6689$gDo33
             g$if-inline$6690$gDo33
             (g$if-operand$6686$gDo33 g$generator$6685$gDo33)))))))
   (g$effect-continuator$6579$gDo33
     g$effect-continuator$6852$gDo33
     (case-lambda
       ((g$generator$6691$gDo33)
        (case-lambda
          ((g$if-operand$6692$gDo33
             g$if-effect$6693$gDo33
             g$if-conditional$6694$gDo33
             g$if-variable$6695$gDo33
             g$if-inline$6696$gDo33)
           (begin
             g$if-operand$6692$gDo33
             g$if-conditional$6694$gDo33
             g$if-variable$6695$gDo33
             g$if-inline$6696$gDo33
             (g$if-effect$6693$gDo33 g$generator$6691$gDo33)))))))
   (g$conditional-continuator$6580$gDo33
     g$conditional-continuator$6853$gDo33
     (case-lambda
       ((g$generator$6697$gDo33)
        (case-lambda
          ((g$if-operand$6698$gDo33
             g$if-effect$6699$gDo33
             g$if-conditional$6700$gDo33
             g$if-variable$6701$gDo33
             g$if-inline$6702$gDo33)
           (begin
             g$if-operand$6698$gDo33
             g$if-effect$6699$gDo33
             g$if-variable$6701$gDo33
             g$if-inline$6702$gDo33
             (g$if-conditional$6700$gDo33 g$generator$6697$gDo33)))))))
   (g$variable-continuator$6581$gDo33
     g$variable-continuator$6854$gDo33
     (case-lambda
       ((g$variable$6703$gDo33)
        (case-lambda
          ((g$if-operand$6704$gDo33
             g$if-effect$6705$gDo33
             g$if-conditional$6706$gDo33
             g$if-variable$6707$gDo33
             g$if-inline$6708$gDo33)
           (begin
             g$if-operand$6704$gDo33
             g$if-effect$6705$gDo33
             g$if-variable$6707$gDo33
             g$if-inline$6708$gDo33
             (g$if-variable$6707$gDo33 g$variable$6703$gDo33)))))))
   (g$inline-continuator$6582$gDo33
     g$inline-continuator$6855$gDo33
     (case-lambda
       ((g$continuation$6709$gDo33)
        (case-lambda
          ((g$if-operand$6710$gDo33
             g$if-effect$6711$gDo33
             g$if-conditional$6712$gDo33
             g$if-variable$6713$gDo33
             g$if-inline$6714$gDo33)
           (begin
             g$if-operand$6710$gDo33
             g$if-effect$6711$gDo33
             g$if-conditional$6712$gDo33
             g$if-variable$6713$gDo33
             (g$if-inline$6714$gDo33 g$continuation$6709$gDo33)))))))
   (g$reified-continuator$6583$gDo33
     g$reified-continuator$6856$gDo33
     (case-lambda
       ((g$continuator$6715$gDo33)
        (case-lambda
          ((g$if-operand$6716$gDo33
             g$if-effect$6717$gDo33
             g$if-conditional$6718$gDo33
             g$if-variable$6719$gDo33
             g$if-inline$6720$gDo33)
           (begin
             g$if-operand$6716$gDo33
             g$if-effect$6717$gDo33
             g$if-conditional$6718$gDo33
             (g$reify-continuation*$6586$gDo33
               g$continuator$6715$gDo33
               g$if-variable$6719$gDo33
               g$if-inline$6720$gDo33)))))))
   (g$continue-with-operand$6584$gDo33
     g$continue-with-operand$6857$gDo33
     (case-lambda
       ((g$continuator$6721$gDo33 g$operand$6722$gDo33)
        (g$continuator$6721$gDo33
          (case-lambda
            ((g$generator$6723$gDo33)
             (g$generator$6723$gDo33 g$operand$6722$gDo33)))
          (case-lambda ((g$generator$6724$gDo33) (g$generator$6724$gDo33)))
          (case-lambda
            ((g$generator$6725$gDo33)
             (g$generator$6725$gDo33
               (g$make-truth-test$6607$gDo33 g$operand$6722$gDo33))))
          (case-lambda
            ((g$continuation-variable$6726$gDo33)
             (g$make-return$6602$gDo33
               (g$make-reference$6594$gDo33 g$continuation-variable$6726$gDo33)
               (list g$operand$6722$gDo33))))
          (case-lambda
            ((g$continuation-abstraction$6727$gDo33)
             (g$make-return$6602$gDo33
               g$continuation-abstraction$6727$gDo33
               (list g$operand$6722$gDo33))))))))
   (g$reify-continuation$6585$gDo33
     g$reify-continuation$6858$gDo33
     (case-lambda
       ((g$continuator$6728$gDo33)
        (g$continuator$6728$gDo33
          g$operand-continuation-reifier$6588$gDo33
          g$effect-continuation-reifier$6590$gDo33
          g$conditional-continuation-reifier$6592$gDo33
          (case-lambda
            ((g$variable$6729$gDo33)
             (g$make-reference$6594$gDo33 g$variable$6729$gDo33)))
          (case-lambda
            ((g$continuation$6730$gDo33) g$continuation$6730$gDo33))))))
   (g$reify-continuation*$6586$gDo33
     g$reify-continuation*$6859$gDo33
     (case-lambda
       ((g$continuator$6731$gDo33
          g$if-variable$6732$gDo33
          g$if-inline$6733$gDo33)
        (g$continuator$6731$gDo33
          (g$operand-continuation-reifier*$6587$gDo33 g$if-inline$6733$gDo33)
          (g$effect-continuation-reifier*$6589$gDo33 g$if-inline$6733$gDo33)
          (g$conditional-continuation-reifier*$6591$gDo33
            g$if-inline$6733$gDo33)
          g$if-variable$6732$gDo33
          g$if-inline$6733$gDo33))))
   (g$operand-continuation-reifier*$6587$gDo33
     g$operand-continuation-reifier*$6860$gDo33
     (case-lambda
       ((g$receiver$6734$gDo33)
        (case-lambda
          ((g$generator$6735$gDo33)
           (g$receiver$6734$gDo33
             ((case-lambda
                ((g$variable$6736$gDo33)
                 (g$make-continuation-abstraction$6597$gDo33
                   (list g$variable$6736$gDo33)
                   (g$generator$6735$gDo33
                     (g$make-reference$6594$gDo33 g$variable$6736$gDo33)))))
              (g$generate-variable$6608$gDo33 'V))))))))
   (g$operand-continuation-reifier$6588$gDo33
     g$operand-continuation-reifier$6861$gDo33
     (g$operand-continuation-reifier*$6587$gDo33 values))
   (g$effect-continuation-reifier*$6589$gDo33
     g$effect-continuation-reifier*$6862$gDo33
     (case-lambda
       ((g$receiver$6737$gDo33)
        (case-lambda
          ((g$generator$6738$gDo33)
           (g$receiver$6737$gDo33
             ((case-lambda
                ((g$variable$6739$gDo33)
                 (g$make-continuation-abstraction$6597$gDo33
                   g$variable$6739$gDo33
                   (g$generator$6738$gDo33))))
              (g$generate-variable$6608$gDo33 'IGNORE))))))))
   (g$effect-continuation-reifier$6590$gDo33
     g$effect-continuation-reifier$6863$gDo33
     (g$effect-continuation-reifier*$6589$gDo33 values))
   (g$conditional-continuation-reifier*$6591$gDo33
     g$conditional-continuation-reifier*$6864$gDo33
     (case-lambda
       ((g$receiver$6740$gDo33)
        (case-lambda
          ((g$generator$6741$gDo33)
           (g$receiver$6740$gDo33
             ((case-lambda
                ((g$variable$6742$gDo33)
                 (g$make-continuation-abstraction$6597$gDo33
                   (list g$variable$6742$gDo33)
                   (g$generator$6741$gDo33
                     (g$make-truth-test$6607$gDo33
                       (g$make-reference$6594$gDo33 g$variable$6742$gDo33))))))
              (g$generate-variable$6608$gDo33 'T))))))))
   (g$conditional-continuation-reifier$6592$gDo33
     g$conditional-continuation-reifier$6865$gDo33
     (g$conditional-continuation-reifier*$6591$gDo33 values))
   (g$make-literal$6593$gDo33
     g$make-literal$6866$gDo33
     (case-lambda ((g$datum$6743$gDo33) (list 'quote g$datum$6743$gDo33))))
   (g$make-reference$6594$gDo33
     g$make-reference$6867$gDo33
     (case-lambda ((g$variable$6744$gDo33) g$variable$6744$gDo33)))
   (g$make-user-abstraction$6595$gDo33
     g$make-user-abstraction$6868$gDo33
     (case-lambda
       ((g$bvl$6745$gDo33 g$body-constructor$6746$gDo33)
        ((case-lambda
           ((g$continuation$6747$gDo33)
            (list
              'case-lambda
              (list
                (cons g$continuation$6747$gDo33 g$bvl$6745$gDo33)
                (g$body-constructor$6746$gDo33 g$continuation$6747$gDo33)))))
         (g$generate-variable$6608$gDo33 'C)))))
   (g$make-user-abstractions$6596$gDo33
     g$make-user-abstractions$6869$gDo33
     (case-lambda
       ((g$bvls$6748$gDo33 g$body-constructors$6749$gDo33)
        ((case-lambda
           ((g$continuation$6750$gDo33)
            (cons
              'case-lambda
              (g$map$5063$gDo33
                (case-lambda
                  ((g$bvl$6751$gDo33 g$body-constructor$6752$gDo33)
                   (list
                     (cons g$continuation$6750$gDo33 g$bvl$6751$gDo33)
                     (g$body-constructor$6752$gDo33
                       g$continuation$6750$gDo33))))
                g$bvls$6748$gDo33
                g$body-constructors$6749$gDo33))))
         (g$generate-variable$6608$gDo33 'C)))))
   (g$make-continuation-abstraction$6597$gDo33
     g$make-continuation-abstraction$6870$gDo33
     (case-lambda
       ((g$bvl$6753$gDo33 g$body$6754$gDo33)
        (list 'case-lambda (list g$bvl$6753$gDo33 g$body$6754$gDo33)))))
   (g$make-recursive-bind$6598$gDo33
     g$make-recursive-bind$6871$gDo33
     (case-lambda
       ((g$variables$6755$gDo33 g$constructors$6756$gDo33 g$body$6757$gDo33)
        (list
          'letrec
          (g$map$5063$gDo33
            (case-lambda
              ((g$variable$6758$gDo33 g$constructor$6759$gDo33)
               (list
                 g$variable$6758$gDo33
                 (list
                   (g$make-user-abstraction$6595$gDo33
                     '()
                     g$constructor$6759$gDo33)
                   (list
                     'letrec-identity
                     (list 'quote g$variable$6758$gDo33))))))
            g$variables$6755$gDo33
            g$constructors$6756$gDo33)
          g$body$6757$gDo33))))
   (g$make-recursive*-bind$6599$gDo33
     g$make-recursive*-bind$6872$gDo33
     (case-lambda
       ((g$variables$6760$gDo33 g$constructors$6761$gDo33 g$body$6762$gDo33)
        (list
          'letrec*
          (g$map$5063$gDo33
            (case-lambda
              ((g$variable$6763$gDo33 g$constructor$6764$gDo33)
               (list
                 g$variable$6763$gDo33
                 (list
                   (g$make-user-abstraction$6595$gDo33
                     '()
                     g$constructor$6764$gDo33)
                   (list
                     'letrec*-identity
                     (list 'quote g$variable$6763$gDo33))))))
            g$variables$6760$gDo33
            g$constructors$6761$gDo33)
          g$body$6762$gDo33))))
   (g$make-recursive*-library-bind$6600$gDo33
     g$make-recursive*-library-bind$6873$gDo33
     (case-lambda
       ((g$name$6765$gDo33
          g$variables$6766$gDo33
          g$variables*$6767$gDo33
          g$constructors$6768$gDo33
          g$body$6769$gDo33)
        (list
          'library-letrec*
          g$name$6765$gDo33
          (g$map$5063$gDo33
            (case-lambda
              ((g$variable$6770$gDo33
                 g$variable*$6771$gDo33
                 g$constructor$6772$gDo33)
               (list
                 g$variable$6770$gDo33
                 g$variable*$6771$gDo33
                 (list
                   (g$make-user-abstraction$6595$gDo33
                     '()
                     g$constructor$6772$gDo33)
                   (list
                     'library-letrec*-identity
                     (list 'quote g$variable$6770$gDo33))))))
            g$variables$6766$gDo33
            g$variables*$6767$gDo33
            g$constructors$6768$gDo33)
          g$body$6769$gDo33))))
   (g$make-combination$6601$gDo33
     g$make-combination$6874$gDo33
     (case-lambda
       ((g$operator$6773$gDo33 g$continuation$6774$gDo33 g$operands$6775$gDo33)
        (cons
          g$operator$6773$gDo33
          (cons g$continuation$6774$gDo33 g$operands$6775$gDo33)))))
   (g$make-return$6602$gDo33
     g$make-return$6875$gDo33
     (case-lambda
       ((g$continuation$6776$gDo33 g$operands$6777$gDo33)
        (cons g$continuation$6776$gDo33 g$operands$6777$gDo33))))
   (g$make-conditional$6603$gDo33
     g$make-conditional$6876$gDo33
     (case-lambda
       ((g$condition$6778$gDo33
          g$consequent$6779$gDo33
          g$alternative$6780$gDo33)
        (list
          'if
          g$condition$6778$gDo33
          g$consequent$6779$gDo33
          g$alternative$6780$gDo33))))
   (g$make-conditional-join$6604$gDo33
     g$make-conditional-join$6877$gDo33
     (case-lambda
       ((g$continuation$6781$gDo33 g$constructor$6782$gDo33)
        ((case-lambda
           ((g$variable$6783$gDo33)
            (g$make-let$6605$gDo33
              (list g$variable$6783$gDo33)
              (list g$continuation$6781$gDo33)
              (g$constructor$6782$gDo33 g$variable$6783$gDo33))))
         (g$generate-variable$6608$gDo33 'J)))))
   (g$make-let$6605$gDo33
     g$make-let$6878$gDo33
     (case-lambda
       ((g$variables$6784$gDo33 g$expressions$6785$gDo33 g$body$6786$gDo33)
        (cons
          (list 'case-lambda (list g$variables$6784$gDo33 g$body$6786$gDo33))
          g$expressions$6785$gDo33))))
   (g$make-assignment$6606$gDo33
     g$make-assignment$6879$gDo33
     (case-lambda
       ((g$location$6787$gDo33 g$operand$6788$gDo33 g$expression$6789$gDo33)
        (list
          'begin
          (list 'set! g$location$6787$gDo33 g$operand$6788$gDo33)
          g$expression$6789$gDo33))))
   (g$make-truth-test$6607$gDo33
     g$make-truth-test$6880$gDo33
     (case-lambda ((g$operand$6790$gDo33) g$operand$6790$gDo33)))
   (g$generate-variable$6608$gDo33
     g$generate-variable$6881$gDo33
     (case-lambda ((g$name$6791$gDo33) (gensym g$name$6791$gDo33))))
   (g$parse$6609$gDo33
     g$parse$6882$gDo33
     (case-lambda
       ((g$x$6792$gDo33)
        (if (pair? g$x$6792$gDo33)
          ((case-lambda
             ((g$t$6793$gDo33)
              (if (g$memv$5056$gDo33 g$t$6793$gDo33 '(quote))
                (g$cps/generate-literal$6565$gDo33
                  (g$cadr$5264$gDo33 g$x$6792$gDo33))
                (if (g$memv$5056$gDo33 g$t$6793$gDo33 '(if))
                  (g$cps/generate-conditional$6569$gDo33
                    (g$parse$6609$gDo33 (g$cadr$5264$gDo33 g$x$6792$gDo33))
                    (g$parse$6609$gDo33 (g$caddr$5270$gDo33 g$x$6792$gDo33))
                    (g$parse$6609$gDo33 (g$cadddr$5282$gDo33 g$x$6792$gDo33)))
                  (if (g$memv$5056$gDo33 g$t$6793$gDo33 '(case-lambda))
                    ((case-lambda
                       ((g$d$6794$gDo33)
                        (g$cps/generate-abstractions$6567$gDo33
                          (g$map$5063$gDo33 car g$d$6794$gDo33)
                          (g$map$5063$gDo33
                            (case-lambda
                              ((g$e$6795$gDo33)
                               (g$cps/generate-sequence$6573$gDo33
                                 (g$map$5063$gDo33
                                   g$parse$6609$gDo33
                                   (cdr g$e$6795$gDo33)))))
                            g$d$6794$gDo33))))
                     (cdr g$x$6792$gDo33))
                    (if (g$memv$5056$gDo33 g$t$6793$gDo33 '(letrec))
                      ((case-lambda
                         ((g$bindings$6796$gDo33 g$body*$6797$gDo33)
                          ((case-lambda
                             ((g$lhs*$6798$gDo33 g$rhs*$6799$gDo33)
                              (g$cps/generate-recursive-bind$6570$gDo33
                                g$lhs*$6798$gDo33
                                (g$map$5063$gDo33
                                  g$parse$6609$gDo33
                                  g$rhs*$6799$gDo33)
                                (g$parse$6609$gDo33
                                  (cons 'begin g$body*$6797$gDo33)))))
                           (g$map$5063$gDo33 car g$bindings$6796$gDo33)
                           (g$map$5063$gDo33
                             g$cadr$5264$gDo33
                             g$bindings$6796$gDo33))))
                       (g$cadr$5264$gDo33 g$x$6792$gDo33)
                       (g$cddr$5266$gDo33 g$x$6792$gDo33))
                      (if (g$memv$5056$gDo33 g$t$6793$gDo33 '(letrec*))
                        ((case-lambda
                           ((g$bindings$6800$gDo33 g$body*$6801$gDo33)
                            ((case-lambda
                               ((g$lhs*$6802$gDo33 g$rhs*$6803$gDo33)
                                (g$cps/generate-recursive*-bind$6571$gDo33
                                  g$lhs*$6802$gDo33
                                  (g$map$5063$gDo33
                                    g$parse$6609$gDo33
                                    g$rhs*$6803$gDo33)
                                  (g$parse$6609$gDo33
                                    (cons 'begin g$body*$6801$gDo33)))))
                             (g$map$5063$gDo33 car g$bindings$6800$gDo33)
                             (g$map$5063$gDo33
                               g$cadr$5264$gDo33
                               g$bindings$6800$gDo33))))
                         (g$cadr$5264$gDo33 g$x$6792$gDo33)
                         (g$cddr$5266$gDo33 g$x$6792$gDo33))
                        (if (g$memv$5056$gDo33
                              g$t$6793$gDo33
                              '(library-letrec*))
                          ((case-lambda
                             ((g$name$6804$gDo33 g$x$6805$gDo33)
                              ((case-lambda
                                 ((g$bindings$6806$gDo33 g$body*$6807$gDo33)
                                  ((case-lambda
                                     ((g$lhs*$6808$gDo33
                                        g$lhs**$6809$gDo33
                                        g$rhs*$6810$gDo33)
                                      (g$cps/generate-recursive*-library-bind$6572$gDo33
                                        g$name$6804$gDo33
                                        g$lhs*$6808$gDo33
                                        g$lhs**$6809$gDo33
                                        (g$map$5063$gDo33
                                          g$parse$6609$gDo33
                                          g$rhs*$6810$gDo33)
                                        (g$parse$6609$gDo33
                                          (cons 'begin g$body*$6807$gDo33)))))
                                   (g$map$5063$gDo33 car g$bindings$6806$gDo33)
                                   (g$map$5063$gDo33
                                     g$cadr$5264$gDo33
                                     g$bindings$6806$gDo33)
                                   (g$map$5063$gDo33
                                     g$caddr$5270$gDo33
                                     g$bindings$6806$gDo33))))
                               (g$cadr$5264$gDo33 g$x$6805$gDo33)
                               (g$cddr$5266$gDo33 g$x$6805$gDo33))))
                           (g$cadr$5264$gDo33 g$x$6792$gDo33)
                           (cdr g$x$6792$gDo33))
                          (if (g$memv$5056$gDo33 g$t$6793$gDo33 '(begin))
                            (g$cps/generate-sequence$6573$gDo33
                              (g$map$5063$gDo33
                                g$parse$6609$gDo33
                                (cdr g$x$6792$gDo33)))
                            (if (g$memv$5056$gDo33 g$t$6793$gDo33 '(set!))
                              (g$cps/generate-assignment$6574$gDo33
                                (g$cadr$5264$gDo33 g$x$6792$gDo33)
                                (g$parse$6609$gDo33
                                  (g$caddr$5270$gDo33 g$x$6792$gDo33)))
                              (if (list? g$x$6792$gDo33)
                                (g$cps/generate-combination$6576$gDo33
                                  (g$parse$6609$gDo33 (car g$x$6792$gDo33))
                                  (g$map$5063$gDo33
                                    g$parse$6609$gDo33
                                    (cdr g$x$6792$gDo33)))
                                (error
                                  'rewrite
                                  '"invalid form ~s ~s"
                                  g$x$6792$gDo33
                                  (list? g$x$6792$gDo33)))))))))))))
           (car g$x$6792$gDo33))
          (if (symbol? g$x$6792$gDo33)
            (g$cps/generate-reference$6564$gDo33 g$x$6792$gDo33)
            (g$cps/generate-literal$6565$gDo33 g$x$6792$gDo33))))))
   (g$starts-with?$6610$gDo33
     g$starts-with?$6883$gDo33
     (case-lambda
       ((g$str$6811$gDo33 g$sub$6812$gDo33)
        (clr-call-internal
          'system.string
          'startswith
          g$str$6811$gDo33
          g$sub$6812$gDo33))))
   (g$special$6611$gDo33
     g$special$6884$gDo33
     '(identity-for-cps
        letrec-identity
        library-letrec*-identity
        letrec*-identity
        cps-prim
        dynamic-wind
        values
        apply
        call-with-values
        call/cc
        call-with-current-continuation))
   (g$primitive?$6612$gDo33
     g$primitive?$6885$gDo33
     (case-lambda
       ((g$o$6813$gDo33)
        (if (if (symbol? g$o$6813$gDo33)
              (begin
                '#f
                (not (g$memq$5055$gDo33 g$o$6813$gDo33 g$special$6611$gDo33)))
              '#f)
          ((case-lambda
             ((g$b$6814$gDo33)
              ((case-lambda
                 ((g$t$6815$gDo33)
                  (if g$t$6815$gDo33
                    g$t$6815$gDo33
                    (begin
                      '#f
                      (g$starts-with?$6610$gDo33
                        (symbol->string g$o$6813$gDo33)
                        '"clr-")))))
               (clr-is-internal
                 'ironscheme.runtime.builtinmethod
                 g$b$6814$gDo33))))
           (symbol-value? g$o$6813$gDo33))
          '#f))))
   (g$fix-primitives$6613$gDo33
     g$fix-primitives$6886$gDo33
     (case-lambda
       ((g$e$6816$gDo33)
        (if (if (pair? g$e$6816$gDo33) (begin '#f (list? g$e$6816$gDo33)) '#f)
          ((case-lambda
             ((g$o$6817$gDo33)
              (if (eq? g$o$6817$gDo33 'quote)
                g$e$6816$gDo33
                (if (eq? g$o$6817$gDo33 'library-letrec*)
                  ((case-lambda
                     ((g$name$6818$gDo33 g$e$6819$gDo33)
                      ((case-lambda
                         ((g$bindings$6820$gDo33 g$body*$6821$gDo33)
                          ((case-lambda
                             ((g$lhs*$6822$gDo33
                                g$lhs**$6823$gDo33
                                g$rhs*$6824$gDo33)
                              (cons
                                'library-letrec*
                                (cons
                                  g$name$6818$gDo33
                                  (cons
                                    (g$map$5063$gDo33
                                      list
                                      g$lhs*$6822$gDo33
                                      g$lhs**$6823$gDo33
                                      (g$map$5063$gDo33
                                        g$fix-primitives$6613$gDo33
                                        g$rhs*$6824$gDo33))
                                    (g$map$5063$gDo33
                                      g$fix-primitives$6613$gDo33
                                      g$body*$6821$gDo33))))))
                           (g$map$5063$gDo33 car g$bindings$6820$gDo33)
                           (g$map$5063$gDo33
                             g$cadr$5264$gDo33
                             g$bindings$6820$gDo33)
                           (g$map$5063$gDo33
                             g$caddr$5270$gDo33
                             g$bindings$6820$gDo33))))
                       (g$cadr$5264$gDo33 g$e$6819$gDo33)
                       (g$cddr$5266$gDo33 g$e$6819$gDo33))))
                   (g$cadr$5264$gDo33 g$e$6816$gDo33)
                   (cdr g$e$6816$gDo33))
                  (if (begin '#f (g$primitive?$6612$gDo33 g$o$6817$gDo33))
                    (if (pair? (cdr g$e$6816$gDo33))
                      (list
                        (g$fix-primitives$6613$gDo33
                          (g$cadr$5264$gDo33 g$e$6816$gDo33))
                        (cons
                          g$o$6817$gDo33
                          (g$map$5063$gDo33
                            g$fix-primitives$6613$gDo33
                            (g$cddr$5266$gDo33 g$e$6816$gDo33))))
                      g$e$6816$gDo33)
                    (cons
                      (g$fix-primitives$6613$gDo33 g$o$6817$gDo33)
                      (g$map$5063$gDo33
                        g$fix-primitives$6613$gDo33
                        (cdr g$e$6816$gDo33))))))))
           (car g$e$6816$gDo33))
          (if (g$primitive?$6612$gDo33 g$e$6816$gDo33)
            (list 'cps-prim g$e$6816$gDo33)
            g$e$6816$gDo33)))))
   (g$parse->cps$6614$gDo33
     g$parse->cps$6887$gDo33
     (case-lambda
       ((g$e$6825$gDo33)
        ((g$parse$6609$gDo33 g$e$6825$gDo33)
         (g$variable-continuator$6581$gDo33 'identity-for-cps)))))
   (g$convert->cps$6615$gDo33
     g$convert->cps$6888$gDo33
     (case-lambda
       ((g$e$6826$gDo33)
        (g$fix-primitives$6613$gDo33
          (g$parse->cps$6614$gDo33 g$e$6826$gDo33)))))
   (g$bootfile$6616$gDo33 g$bootfile$6889$gDo33 '"ironscheme.boot.pp")
   (g$bootfile-cps$6617$gDo33
     g$bootfile-cps$6890$gDo33
     '"ironscheme.boot-cps.pp")
   (g$expand-boot-cps$6618$gDo33
     g$expand-boot-cps$6891$gDo33
     (case-lambda
       ((g$pretty-print$6827$gDo33)
        (letrec* ((g$read-file$6828$gDo33
                    (case-lambda
                      ((g$port$6832$gDo33)
                       ((letrec ((g$f$6833$gDo33
                                   (case-lambda
                                     ((g$e$6834$gDo33 g$a$6835$gDo33)
                                      (if (eof-object? g$e$6834$gDo33)
                                        (reverse g$a$6835$gDo33)
                                        ((case-lambda
                                           ((g$r$6836$gDo33)
                                            (g$f$6833$gDo33
                                              (read g$port$6832$gDo33)
                                              (cons
                                                g$r$6836$gDo33
                                                g$a$6835$gDo33))))
                                         (g$convert->cps$6615$gDo33
                                           g$e$6834$gDo33)))))))
                          g$f$6833$gDo33)
                        (read g$port$6832$gDo33)
                        '())))))
          (begin
            (if (g$file-exists?$5556$gDo33 g$bootfile-cps$6617$gDo33)
              (g$delete-file$5557$gDo33 g$bootfile-cps$6617$gDo33)
              (void))
            (g$call-with-input-file$6387$gDo33
              g$bootfile$6616$gDo33
              (case-lambda
                ((g$in$6829$gDo33)
                 (g$call-with-output-file$6388$gDo33
                   g$bootfile-cps$6617$gDo33
                   (case-lambda
                     ((g$out$6830$gDo33)
                      (g$for-each$5064$gDo33
                        (case-lambda
                          ((g$e$6831$gDo33)
                           (g$pretty-print$6827$gDo33
                             g$e$6831$gDo33
                             g$out$6830$gDo33)))
                        (g$read-file$6828$gDo33 g$in$6829$gDo33))))))))))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$library-version-mismatch-warning$6892$gDo33
     g$library-version-mismatch-warning$6988$gDo33
     (case-lambda
       ((g$name$6965$gDo33 g$depname$6966$gDo33 g$filename$6967$gDo33)
        (g$fprintf$6558$gDo33
          (current-error-port)
          '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
          g$name$6965$gDo33
          g$depname$6966$gDo33
          g$filename$6967$gDo33))))
   (g$file-locator-resolution-error$6893$gDo33
     g$file-locator-resolution-error$6989$gDo33
     (case-lambda
       ((g$libname$6968$gDo33 g$failed-list$6969$gDo33)
        (letrec* ((g$7970$6970$gDo33
                    (make-record-type-descriptor
                      '&library-resolution
                      &condition-rtd
                      'g$7973$gDo33
                      '#f
                      '#f
                      '#((immutable library) (immutable files))))
                  (g$7972$6971$gDo33 '#f)
                  (g$7971$6972$gDo33
                    (make-record-constructor-descriptor
                      g$7970$6970$gDo33
                      &condition-rcd
                      g$7972$6971$gDo33))
                  (g$7969$6973$gDo33 (record-predicate g$7970$6970$gDo33))
                  (g$make-library-resolution-condition$6974$gDo33
                    (record-constructor g$7971$6972$gDo33))
                  (g$7967$6975$gDo33 (record-accessor g$7970$6970$gDo33 '0))
                  (g$7968$6976$gDo33 (record-accessor g$7970$6970$gDo33 '1))
                  (g$library-resolution-condition?$6977$gDo33
                    (condition-predicate g$7970$6970$gDo33))
                  (g$condition-library$6978$gDo33
                    (condition-accessor g$7970$6970$gDo33 g$7967$6975$gDo33))
                  (g$condition-files$6979$gDo33
                    (condition-accessor g$7970$6970$gDo33 g$7968$6976$gDo33)))
          (raise
            (condition
              (g$make-error$5825$gDo33)
              (g$make-who-condition$5851$gDo33 'expander)
              (g$make-message-condition$5805$gDo33
                '"cannot locate library in library-path")
              (g$make-library-resolution-condition$6974$gDo33
                g$libname$6968$gDo33
                g$failed-list$6969$gDo33)))))))
   (g$read-library-source-file$6894$gDo33
     g$read-library-source-file$6990$gDo33
     (case-lambda
       ((g$file-name$6980$gDo33)
        (g$with-input-from-file$6385$gDo33
          g$file-name$6980$gDo33
          read-annotated))))
   (g$make-parameter$6895$gDo33
     g$make-parameter$6991$gDo33
     (case-lambda
       ((g$x$6981$gDo33)
        (g$make-parameter$6895$gDo33
          g$x$6981$gDo33
          (case-lambda ((g$x$6982$gDo33) g$x$6982$gDo33))))
       ((g$x$6983$gDo33 g$fender$6984$gDo33)
        (begin
          (if (not (procedure? g$fender$6984$gDo33))
            (g$assertion-error$11608$gDo33
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(89,8) - (89,36)"))
            (void))
          ((case-lambda
             ((g$x$6985$gDo33)
              (case-lambda
                (() g$x$6985$gDo33)
                ((g$v$6986$gDo33)
                 (set! g$x$6985$gDo33 (g$fender$6984$gDo33 g$v$6986$gDo33))))))
           (g$fender$6984$gDo33 g$x$6983$gDo33))))))
   (g$file-options-constructor$6963$gDo33
     g$file-options-constructor$6992$gDo33
     (g$make-parameter$6895$gDo33 '#f))
   (g$file-options-spec$6964$gDo33
     g$file-options-spec$6993$gDo33
     (case-lambda
       ((g$x$6987$gDo33)
        ((g$file-options-constructor$6963$gDo33) g$x$6987$gDo33)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$7189$gDo33
     g$current-primitive-locations$7234$gDo33
     (g$make-parameter$6991$gDo33
       (case-lambda ((g$x$7195$gDo33) '#f))
       (case-lambda
         ((g$p$7196$gDo33)
          (begin
            (if (not (procedure? g$p$7196$gDo33))
              (g$assertion-error$11608$gDo33
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$7196$gDo33)))))
   (g$mutable?$7190$gDo33
     g$mutable?$7235$gDo33
     (case-lambda
       ((g$x$7197$gDo33)
        (letrec* ((g$simple?$7198$gDo33
                    (case-lambda
                      ((g$x$7199$gDo33)
                       ((case-lambda
                          ((g$t$7200$gDo33)
                           (if g$t$7200$gDo33
                             g$t$7200$gDo33
                             ((case-lambda
                                ((g$t$7201$gDo33)
                                 (if g$t$7201$gDo33
                                   g$t$7201$gDo33
                                   ((case-lambda
                                      ((g$t$7202$gDo33)
                                       (if g$t$7202$gDo33
                                         g$t$7202$gDo33
                                         ((case-lambda
                                            ((g$t$7203$gDo33)
                                             (if g$t$7203$gDo33
                                               g$t$7203$gDo33
                                               ((case-lambda
                                                  ((g$t$7204$gDo33)
                                                   (if g$t$7204$gDo33
                                                     g$t$7204$gDo33
                                                     ((case-lambda
                                                        ((g$t$7205$gDo33)
                                                         (if g$t$7205$gDo33
                                                           g$t$7205$gDo33
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$7199$gDo33)))))
                                                      (bytevector?
                                                        g$x$7199$gDo33)))))
                                                (string? g$x$7199$gDo33)))))
                                          (boolean? g$x$7199$gDo33)))))
                                    (symbol? g$x$7199$gDo33)))))
                              (char? g$x$7199$gDo33)))))
                        (null? g$x$7199$gDo33))))))
          (not (g$simple?$7198$gDo33 g$x$7197$gDo33))))))
   (g$rewriter$7191$gDo33
     g$rewriter$7236$gDo33
     (case-lambda
       ((g$quote-hack?$7206$gDo33)
        (letrec* ((g$f$7207$gDo33
                    (case-lambda
                      ((g$x$7208$gDo33)
                       (if (pair? g$x$7208$gDo33)
                         ((case-lambda
                            ((g$t$7209$gDo33)
                             (if (g$memv$5056$gDo33 g$t$7209$gDo33 '(quote))
                               (if (if g$quote-hack?$7206$gDo33
                                     (begin
                                       '#f
                                       (g$mutable?$7190$gDo33
                                         (g$cadr$5264$gDo33 g$x$7208$gDo33)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$7210$gDo33)
                                     (begin
                                       (set-symbol-value!
                                         g$g$7210$gDo33
                                         (g$cadr$5264$gDo33 g$x$7208$gDo33))
                                       g$g$7210$gDo33)))
                                  (gensym))
                                 g$x$7208$gDo33)
                               (if (g$memv$5056$gDo33
                                     g$t$7209$gDo33
                                     '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (g$map$5063$gDo33
                                     (case-lambda
                                       ((g$x$7211$gDo33)
                                        (cons
                                          (car g$x$7211$gDo33)
                                          (g$map$5063$gDo33
                                            g$f$7207$gDo33
                                            (cdr g$x$7211$gDo33)))))
                                     (cdr g$x$7208$gDo33)))
                                 (if (g$memv$5056$gDo33
                                       g$t$7209$gDo33
                                       '(lambda))
                                   (g$cons*$5065$gDo33
                                     'lambda
                                     (g$cadr$5264$gDo33 g$x$7208$gDo33)
                                     (g$map$5063$gDo33
                                       g$f$7207$gDo33
                                       (g$cddr$5266$gDo33 g$x$7208$gDo33)))
                                   (if (g$memv$5056$gDo33
                                         g$t$7209$gDo33
                                         '(letrec))
                                     ((case-lambda
                                        ((g$bindings$7212$gDo33
                                           g$body*$7213$gDo33)
                                         ((case-lambda
                                            ((g$lhs*$7214$gDo33
                                               g$rhs*$7215$gDo33)
                                             (g$cons*$5065$gDo33
                                               'letrec
                                               (g$map$5063$gDo33
                                                 list
                                                 g$lhs*$7214$gDo33
                                                 (g$map$5063$gDo33
                                                   g$f$7207$gDo33
                                                   g$rhs*$7215$gDo33))
                                               (g$map$5063$gDo33
                                                 g$f$7207$gDo33
                                                 g$body*$7213$gDo33))))
                                          (g$map$5063$gDo33
                                            car
                                            g$bindings$7212$gDo33)
                                          (g$map$5063$gDo33
                                            g$cadr$5264$gDo33
                                            g$bindings$7212$gDo33))))
                                      (g$cadr$5264$gDo33 g$x$7208$gDo33)
                                      (g$cddr$5266$gDo33 g$x$7208$gDo33))
                                     (if (g$memv$5056$gDo33
                                           g$t$7209$gDo33
                                           '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$7216$gDo33
                                             g$body*$7217$gDo33)
                                           ((case-lambda
                                              ((g$lhs*$7218$gDo33
                                                 g$rhs*$7219$gDo33)
                                               (g$cons*$5065$gDo33
                                                 'letrec*
                                                 (g$map$5063$gDo33
                                                   list
                                                   g$lhs*$7218$gDo33
                                                   (g$map$5063$gDo33
                                                     g$f$7207$gDo33
                                                     g$rhs*$7219$gDo33))
                                                 (g$map$5063$gDo33
                                                   g$f$7207$gDo33
                                                   g$body*$7217$gDo33))))
                                            (g$map$5063$gDo33
                                              car
                                              g$bindings$7216$gDo33)
                                            (g$map$5063$gDo33
                                              g$cadr$5264$gDo33
                                              g$bindings$7216$gDo33))))
                                        (g$cadr$5264$gDo33 g$x$7208$gDo33)
                                        (g$cddr$5266$gDo33 g$x$7208$gDo33))
                                       (if (g$memv$5056$gDo33
                                             g$t$7209$gDo33
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$7220$gDo33 g$x$7221$gDo33)
                                             ((case-lambda
                                                ((g$bindings$7222$gDo33
                                                   g$body*$7223$gDo33)
                                                 ((case-lambda
                                                    ((g$lhs*$7224$gDo33
                                                       g$lhs**$7225$gDo33
                                                       g$rhs*$7226$gDo33)
                                                     (g$cons*$5065$gDo33
                                                       'library-letrec*
                                                       g$name$7220$gDo33
                                                       (g$map$5063$gDo33
                                                         list
                                                         g$lhs*$7224$gDo33
                                                         g$lhs**$7225$gDo33
                                                         (g$map$5063$gDo33
                                                           g$f$7207$gDo33
                                                           g$rhs*$7226$gDo33))
                                                       (g$map$5063$gDo33
                                                         g$f$7207$gDo33
                                                         g$body*$7223$gDo33))))
                                                  (g$map$5063$gDo33
                                                    car
                                                    g$bindings$7222$gDo33)
                                                  (g$map$5063$gDo33
                                                    g$cadr$5264$gDo33
                                                    g$bindings$7222$gDo33)
                                                  (g$map$5063$gDo33
                                                    g$caddr$5270$gDo33
                                                    g$bindings$7222$gDo33))))
                                              (g$cadr$5264$gDo33 g$x$7221$gDo33)
                                              (g$cddr$5266$gDo33
                                                g$x$7221$gDo33))))
                                          (g$cadr$5264$gDo33 g$x$7208$gDo33)
                                          (cdr g$x$7208$gDo33))
                                         (if (g$memv$5056$gDo33
                                               g$t$7209$gDo33
                                               '(begin))
                                           (cons
                                             'begin
                                             (g$map$5063$gDo33
                                               g$f$7207$gDo33
                                               (cdr g$x$7208$gDo33)))
                                           (if (g$memv$5056$gDo33
                                                 g$t$7209$gDo33
                                                 '(set!))
                                             (list
                                               'set!
                                               (g$cadr$5264$gDo33
                                                 g$x$7208$gDo33)
                                               (g$f$7207$gDo33
                                                 (g$caddr$5270$gDo33
                                                   g$x$7208$gDo33)))
                                             (if (g$memv$5056$gDo33
                                                   g$t$7209$gDo33
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$7227$gDo33)
                                                   ((case-lambda
                                                      ((g$t$7228$gDo33)
                                                       (if g$t$7228$gDo33
                                                         ((case-lambda
                                                            ((g$loc$7229$gDo33)
                                                             g$loc$7229$gDo33))
                                                          g$t$7228$gDo33)
                                                         g$op$7227$gDo33)))
                                                    ((g$current-primitive-locations$7189$gDo33)
                                                     g$op$7227$gDo33))))
                                                (g$cadr$5264$gDo33
                                                  g$x$7208$gDo33))
                                               (if (g$memv$5056$gDo33
                                                     g$t$7209$gDo33
                                                     '(define))
                                                 g$x$7208$gDo33
                                                 (if (list? g$x$7208$gDo33)
                                                   (g$map$5063$gDo33
                                                     g$f$7207$gDo33
                                                     g$x$7208$gDo33)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$7208$gDo33
                                                     (list?
                                                       g$x$7208$gDo33)))))))))))))))
                          (car g$x$7208$gDo33))
                         g$x$7208$gDo33)))))
          g$f$7207$gDo33))))
   (g$expanded->core$7192$gDo33
     g$expanded->core$7237$gDo33
     (case-lambda
       ((g$x$7230$gDo33) ((g$rewriter$7191$gDo33 '#t) g$x$7230$gDo33))))
   (g$compile-core-expr$7193$gDo33
     g$compile-core-expr$7238$gDo33
     (case-lambda
       ((g$x$7231$gDo33) ((g$rewriter$7191$gDo33 '#f) g$x$7231$gDo33))))
   (g$compile-core-expr-to-port$7194$gDo33
     g$compile-core-expr-to-port$7239$gDo33
     (case-lambda
       ((g$x$7232$gDo33 g$p$7233$gDo33)
        (g$pretty-print$7188$gDo33
          ((g$rewriter$7191$gDo33 '#f) g$x$7232$gDo33)
          g$p$7233$gDo33)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$7278$gDo33
     g$make-collection$7473$gDo33
     (case-lambda
       (()
        ((case-lambda
           ((g$set$7339$gDo33)
            (letrec* ((g$set-cons$7340$gDo33
                        (case-lambda
                          ((g$x$7342$gDo33 g$ls$7343$gDo33)
                           (if (g$memq$5055$gDo33
                                 g$x$7342$gDo33
                                 g$ls$7343$gDo33)
                             g$ls$7343$gDo33
                             (cons g$x$7342$gDo33 g$ls$7343$gDo33))))))
              (case-lambda
                (() g$set$7339$gDo33)
                ((g$x$7341$gDo33)
                 (set! g$set$7339$gDo33
                   (g$set-cons$7340$gDo33 g$x$7341$gDo33 g$set$7339$gDo33)))))))
         '()))))
   (g$current-library-collection$7279$gDo33
     g$current-library-collection$7474$gDo33
     (g$make-parameter$6991$gDo33
       (g$make-collection$7278$gDo33)
       (case-lambda
         ((g$x$7344$gDo33)
          (begin
            (if (not (procedure? g$x$7344$gDo33))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$7344$gDo33)
              (void))
            g$x$7344$gDo33)))))
   (g$8286$7280$gDo33
     g$8286$7475$gDo33
     (make-record-type-descriptor
       'library
       '#f
       'g$8289$gDo33
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$8288$7281$gDo33 g$8288$7476$gDo33 '#f)
   (g$8287$7282$gDo33
     g$8287$7477$gDo33
     (make-record-constructor-descriptor
       g$8286$7280$gDo33
       '#f
       g$8288$7281$gDo33))
   (g$library?$7283$gDo33
     g$library?$7478$gDo33
     (record-predicate g$8286$7280$gDo33))
   (g$make-library$7284$gDo33
     g$make-library$7479$gDo33
     (record-constructor g$8287$7282$gDo33))
   (g$library-id$7285$gDo33
     g$library-id$7480$gDo33
     (record-accessor g$8286$7280$gDo33 '0))
   (g$library-name$7286$gDo33
     g$library-name$7481$gDo33
     (record-accessor g$8286$7280$gDo33 '1))
   (g$library-version$7287$gDo33
     g$library-version$7482$gDo33
     (record-accessor g$8286$7280$gDo33 '2))
   (g$library-imp*$7288$gDo33
     g$library-imp*$7483$gDo33
     (record-accessor g$8286$7280$gDo33 '3))
   (g$library-vis*$7289$gDo33
     g$library-vis*$7484$gDo33
     (record-accessor g$8286$7280$gDo33 '4))
   (g$library-inv*$7290$gDo33
     g$library-inv*$7485$gDo33
     (record-accessor g$8286$7280$gDo33 '5))
   (g$library-subst$7291$gDo33
     g$library-subst$7486$gDo33
     (record-accessor g$8286$7280$gDo33 '6))
   (g$library-env$7292$gDo33
     g$library-env$7487$gDo33
     (record-accessor g$8286$7280$gDo33 '7))
   (g$library-visit-state$7293$gDo33
     g$library-visit-state$7488$gDo33
     (record-accessor g$8286$7280$gDo33 '8))
   (g$library-invoke-state$7294$gDo33
     g$library-invoke-state$7489$gDo33
     (record-accessor g$8286$7280$gDo33 '9))
   (g$library-visit-code$7295$gDo33
     g$library-visit-code$7490$gDo33
     (record-accessor g$8286$7280$gDo33 '10))
   (g$library-invoke-code$7296$gDo33
     g$library-invoke-code$7491$gDo33
     (record-accessor g$8286$7280$gDo33 '11))
   (g$library-visible?$7297$gDo33
     g$library-visible?$7492$gDo33
     (record-accessor g$8286$7280$gDo33 '12))
   (g$library-source-file-name$7298$gDo33
     g$library-source-file-name$7493$gDo33
     (record-accessor g$8286$7280$gDo33 '13))
   (g$set-library-id!$7299$gDo33
     g$set-library-id!$7494$gDo33
     (record-mutator g$8286$7280$gDo33 '0))
   (g$set-library-name!$7300$gDo33
     g$set-library-name!$7495$gDo33
     (record-mutator g$8286$7280$gDo33 '1))
   (g$set-library-version!$7301$gDo33
     g$set-library-version!$7496$gDo33
     (record-mutator g$8286$7280$gDo33 '2))
   (g$set-library-imp*!$7302$gDo33
     g$set-library-imp*!$7497$gDo33
     (record-mutator g$8286$7280$gDo33 '3))
   (g$set-library-vis*!$7303$gDo33
     g$set-library-vis*!$7498$gDo33
     (record-mutator g$8286$7280$gDo33 '4))
   (g$set-library-inv*!$7304$gDo33
     g$set-library-inv*!$7499$gDo33
     (record-mutator g$8286$7280$gDo33 '5))
   (g$set-library-subst!$7305$gDo33
     g$set-library-subst!$7500$gDo33
     (record-mutator g$8286$7280$gDo33 '6))
   (g$set-library-env!$7306$gDo33
     g$set-library-env!$7501$gDo33
     (record-mutator g$8286$7280$gDo33 '7))
   (g$set-library-visit-state!$7307$gDo33
     g$set-library-visit-state!$7502$gDo33
     (record-mutator g$8286$7280$gDo33 '8))
   (g$set-library-invoke-state!$7308$gDo33
     g$set-library-invoke-state!$7503$gDo33
     (record-mutator g$8286$7280$gDo33 '9))
   (g$set-library-visit-code!$7309$gDo33
     g$set-library-visit-code!$7504$gDo33
     (record-mutator g$8286$7280$gDo33 '10))
   (g$set-library-invoke-code!$7310$gDo33
     g$set-library-invoke-code!$7505$gDo33
     (record-mutator g$8286$7280$gDo33 '11))
   (g$set-library-visible?!$7311$gDo33
     g$set-library-visible?!$7506$gDo33
     (record-mutator g$8286$7280$gDo33 '12))
   (g$set-library-source-file-name!$7312$gDo33
     g$set-library-source-file-name!$7507$gDo33
     (record-mutator g$8286$7280$gDo33 '13))
   (g$rp$7313$gDo33
     g$rp$7508$gDo33
     (make-record-printer
       'library
       (case-lambda
         ((g$x$7345$gDo33 g$p$7346$gDo33 g$wr$7347$gDo33)
          (begin
            (if (not (g$library?$7283$gDo33 g$x$7345$gDo33))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6559$gDo33
                '"#<library ~s>"
                (if (null? (g$library-version$7287$gDo33 g$x$7345$gDo33))
                  (g$library-name$7286$gDo33 g$x$7345$gDo33)
                  (append
                    (g$library-name$7286$gDo33 g$x$7345$gDo33)
                    (list (g$library-version$7287$gDo33 g$x$7345$gDo33)))))
              g$p$7346$gDo33))))))
   (g$find-dependencies$7314$gDo33
     g$find-dependencies$7509$gDo33
     (case-lambda
       ((g$ls$7348$gDo33)
        (if (null? g$ls$7348$gDo33)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$7315$gDo33
     g$find-library-by$7510$gDo33
     (case-lambda
       ((g$pred$7349$gDo33)
        ((letrec ((g$f$7350$gDo33
                    (case-lambda
                      ((g$ls$7351$gDo33)
                       (if (null? g$ls$7351$gDo33)
                         '#f
                         (if (g$pred$7349$gDo33 (car g$ls$7351$gDo33))
                           (car g$ls$7351$gDo33)
                           (g$f$7350$gDo33 (cdr g$ls$7351$gDo33))))))))
           g$f$7350$gDo33)
         ((g$current-library-collection$7279$gDo33))))))
   (g$library-path$7316$gDo33
     g$library-path$7511$gDo33
     (g$make-parameter$6991$gDo33
       '(".")
       (case-lambda
         ((g$x$7352$gDo33)
          (if (if (list? g$x$7352$gDo33)
                (begin '#f (g$for-all$5061$gDo33 string? g$x$7352$gDo33))
                '#f)
            (g$map$5063$gDo33
              (case-lambda ((g$x$7353$gDo33) g$x$7353$gDo33))
              g$x$7352$gDo33)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$7352$gDo33))))))
   (g$library-extensions$7317$gDo33
     g$library-extensions$7512$gDo33
     (g$make-parameter$6991$gDo33
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$7354$gDo33)
          (if (if (list? g$x$7354$gDo33)
                (begin '#f (g$for-all$5061$gDo33 string? g$x$7354$gDo33))
                '#f)
            (g$map$5063$gDo33
              (case-lambda ((g$x$7355$gDo33) g$x$7355$gDo33))
              g$x$7354$gDo33)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$7354$gDo33))))))
   (g$library-name->file-name$7318$gDo33
     g$library-name->file-name$7513$gDo33
     (case-lambda
       ((g$x$7356$gDo33)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6336$gDo33)))
          (case-lambda
            ((g$p$7359$gDo33 g$extract$7360$gDo33)
             ((case-lambda
                ((g$extract$7361$gDo33 g$p$7362$gDo33)
                 (letrec* ((g$display-hex$7363$gDo33
                             (case-lambda
                               ((g$n$7371$gDo33)
                                (if (<= '0 g$n$7371$gDo33 '9)
                                  (display g$n$7371$gDo33 g$p$7362$gDo33)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$7371$gDo33 '10)))
                                    g$p$7362$gDo33))))))
                   (begin
                     ((letrec ((g$f$7364$gDo33
                                 (case-lambda
                                   ((g$ls$7365$gDo33)
                                    (if (not (null? g$ls$7365$gDo33))
                                      (begin
                                        (display '"/" g$p$7362$gDo33)
                                        (g$for-each$5064$gDo33
                                          (case-lambda
                                            ((g$c$7366$gDo33)
                                             (if ((case-lambda
                                                    ((g$t$7367$gDo33)
                                                     (if g$t$7367$gDo33
                                                       g$t$7367$gDo33
                                                       ((case-lambda
                                                          ((g$t$7368$gDo33)
                                                           (if g$t$7368$gDo33
                                                             g$t$7368$gDo33
                                                             ((case-lambda
                                                                ((g$t$7369$gDo33)
                                                                 (if g$t$7369$gDo33
                                                                   g$t$7369$gDo33
                                                                   (begin
                                                                     '#f
                                                                     (g$memv$5056$gDo33
                                                                       g$c$7366$gDo33
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (g$char<=?$5310$gDo33
                                                                '#\0
                                                                g$c$7366$gDo33
                                                                '#\9)))))
                                                        (g$char<=?$5310$gDo33
                                                          '#\A
                                                          g$c$7366$gDo33
                                                          '#\Z)))))
                                                  (g$char<=?$5310$gDo33
                                                    '#\a
                                                    g$c$7366$gDo33
                                                    '#\z))
                                               (display
                                                 g$c$7366$gDo33
                                                 g$p$7362$gDo33)
                                               (begin
                                                 (display '"%" g$p$7362$gDo33)
                                                 ((case-lambda
                                                    ((g$n$7370$gDo33)
                                                     (begin
                                                       (g$display-hex$7363$gDo33
                                                         (g$quotient$5919$gDo33
                                                           g$n$7370$gDo33
                                                           '16))
                                                       (g$display-hex$7363$gDo33
                                                         (g$remainder$5920$gDo33
                                                           g$n$7370$gDo33
                                                           '16)))))
                                                  (char->integer
                                                    g$c$7366$gDo33))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$7365$gDo33))))
                                        (g$f$7364$gDo33 (cdr g$ls$7365$gDo33)))
                                      (void))))))
                        g$f$7364$gDo33)
                      g$x$7356$gDo33)
                     (g$extract$7361$gDo33)))))
              g$extract$7360$gDo33
              g$p$7359$gDo33)))))))
   (g$file-locator$7319$gDo33
     g$file-locator$7514$gDo33
     (g$make-parameter$6991$gDo33
       (case-lambda
         ((g$x$7372$gDo33)
          ((case-lambda
             ((g$str$7373$gDo33)
              ((letrec ((g$f$7374$gDo33
                          (case-lambda
                            ((g$ls$7375$gDo33
                               g$exts$7376$gDo33
                               g$failed-list$7377$gDo33)
                             (if (null? g$ls$7375$gDo33)
                               (g$file-locator-resolution-error$6989$gDo33
                                 g$x$7372$gDo33
                                 (reverse g$failed-list$7377$gDo33))
                               (if (null? g$exts$7376$gDo33)
                                 (g$f$7374$gDo33
                                   (cdr g$ls$7375$gDo33)
                                   (g$library-extensions$7317$gDo33)
                                   g$failed-list$7377$gDo33)
                                 ((case-lambda
                                    ((g$name$7378$gDo33)
                                     (if (g$file-exists?$5556$gDo33
                                           g$name$7378$gDo33)
                                       g$name$7378$gDo33
                                       (g$f$7374$gDo33
                                         g$ls$7375$gDo33
                                         (cdr g$exts$7376$gDo33)
                                         (cons
                                           g$name$7378$gDo33
                                           g$failed-list$7377$gDo33)))))
                                  (string-append
                                    (car g$ls$7375$gDo33)
                                    g$str$7373$gDo33
                                    (car g$exts$7376$gDo33)))))))))
                 g$f$7374$gDo33)
               (g$library-path$7316$gDo33)
               (g$library-extensions$7317$gDo33)
               '())))
           (g$library-name->file-name$7318$gDo33 g$x$7372$gDo33))))
       (case-lambda
         ((g$f$7379$gDo33)
          (if (procedure? g$f$7379$gDo33)
            g$f$7379$gDo33
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$7379$gDo33))))))
   (g$serialize-all$7320$gDo33
     g$serialize-all$7515$gDo33
     (case-lambda
       ((g$serialize$7380$gDo33 g$compile$7381$gDo33)
        (letrec* ((g$library-desc$7382$gDo33
                    (case-lambda
                      ((g$x$7384$gDo33)
                       (list
                         (g$library-id$7285$gDo33 g$x$7384$gDo33)
                         (g$library-name$7286$gDo33 g$x$7384$gDo33))))))
          (g$for-each$5064$gDo33
            (case-lambda
              ((g$x$7383$gDo33)
               (if (g$library-source-file-name$7298$gDo33 g$x$7383$gDo33)
                 (g$serialize$7380$gDo33
                   (g$library-source-file-name$7298$gDo33 g$x$7383$gDo33)
                   (list
                     (g$library-id$7285$gDo33 g$x$7383$gDo33)
                     (g$library-name$7286$gDo33 g$x$7383$gDo33)
                     (g$library-version$7287$gDo33 g$x$7383$gDo33)
                     (g$map$5063$gDo33
                       g$library-desc$7382$gDo33
                       (g$library-imp*$7288$gDo33 g$x$7383$gDo33))
                     (g$map$5063$gDo33
                       g$library-desc$7382$gDo33
                       (g$library-vis*$7289$gDo33 g$x$7383$gDo33))
                     (g$map$5063$gDo33
                       g$library-desc$7382$gDo33
                       (g$library-inv*$7290$gDo33 g$x$7383$gDo33))
                     (g$library-subst$7291$gDo33 g$x$7383$gDo33)
                     (g$library-env$7292$gDo33 g$x$7383$gDo33)
                     (g$compile$7381$gDo33
                       (g$library-visit-code$7295$gDo33 g$x$7383$gDo33))
                     (g$compile$7381$gDo33
                       (g$library-invoke-code$7296$gDo33 g$x$7383$gDo33))
                     (g$library-visible?$7297$gDo33 g$x$7383$gDo33)))
                 (void))))
            ((g$current-library-collection$7279$gDo33)))))))
   (g$current-precompiled-library-loader$7321$gDo33
     g$current-precompiled-library-loader$7516$gDo33
     (g$make-parameter$6991$gDo33
       (case-lambda ((g$filename$7385$gDo33 g$sk$7386$gDo33) '#f))))
   (g$try-load-from-file$7322$gDo33
     g$try-load-from-file$7517$gDo33
     (case-lambda
       ((g$filename$7387$gDo33)
        ((g$current-precompiled-library-loader$7321$gDo33)
         g$filename$7387$gDo33
         (case-lambda
           ((g$id$7388$gDo33
              g$name$7389$gDo33
              g$ver$7390$gDo33
              g$imp*$7391$gDo33
              g$vis*$7392$gDo33
              g$inv*$7393$gDo33
              g$exp-subst$7394$gDo33
              g$exp-env$7395$gDo33
              g$visit-proc$7396$gDo33
              g$invoke-proc$7397$gDo33
              g$visible?$7398$gDo33)
            ((letrec ((g$f$7399$gDo33
                        (case-lambda
                          ((g$deps$7400$gDo33)
                           (if (null? g$deps$7400$gDo33)
                             (begin
                               (g$install-library$7332$gDo33
                                 g$id$7388$gDo33
                                 g$name$7389$gDo33
                                 g$ver$7390$gDo33
                                 g$imp*$7391$gDo33
                                 g$vis*$7392$gDo33
                                 g$inv*$7393$gDo33
                                 g$exp-subst$7394$gDo33
                                 g$exp-env$7395$gDo33
                                 g$visit-proc$7396$gDo33
                                 g$invoke-proc$7397$gDo33
                                 '#f
                                 '#f
                                 g$visible?$7398$gDo33
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$7401$gDo33)
                                 ((case-lambda
                                    ((g$label$7402$gDo33 g$dname$7403$gDo33)
                                     ((case-lambda
                                        ((g$l$7404$gDo33)
                                         (if (if (g$library?$7283$gDo33
                                                   g$l$7404$gDo33)
                                               (begin
                                                 '#f
                                                 (eq? g$label$7402$gDo33
                                                      (g$library-id$7285$gDo33
                                                        g$l$7404$gDo33)))
                                               '#f)
                                           (g$f$7399$gDo33
                                             (cdr g$deps$7400$gDo33))
                                           (begin
                                             (g$library-version-mismatch-warning$6988$gDo33
                                               g$name$7389$gDo33
                                               g$dname$7403$gDo33
                                               g$filename$7387$gDo33)
                                             '#f))))
                                      (g$find-library-by-name$7327$gDo33
                                        g$dname$7403$gDo33))))
                                  (car g$d$7401$gDo33)
                                  (g$cadr$5264$gDo33 g$d$7401$gDo33))))
                              (car g$deps$7400$gDo33)))))))
               g$f$7399$gDo33)
             (append g$imp*$7391$gDo33 g$vis*$7392$gDo33 g$inv*$7393$gDo33)))
           (g$others$7405$gDo33 '#f))))))
   (g$library-loader$7323$gDo33
     g$library-loader$7518$gDo33
     (g$make-parameter$6991$gDo33
       (case-lambda
         ((g$x$7406$gDo33)
          ((case-lambda
             ((g$file-name$7407$gDo33)
              (if (not g$file-name$7407$gDo33)
                (assertion-violation '#f '"cannot file library" g$x$7406$gDo33)
                ((case-lambda
                   ((g$t$7408$gDo33)
                    (if g$t$7408$gDo33
                      g$t$7408$gDo33
                      (begin
                        '#f
                        ((g$current-library-expander$7324$gDo33)
                         (g$read-library-source-file$6990$gDo33
                           g$file-name$7407$gDo33)
                         g$file-name$7407$gDo33
                         (case-lambda
                           ((g$name$7409$gDo33)
                            (if (not (equal? g$name$7409$gDo33 g$x$7406$gDo33))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (() (g$open-string-output-port$6336$gDo33)))
                                  (case-lambda
                                    ((g$p$7412$gDo33 g$e$7413$gDo33)
                                     ((case-lambda
                                        ((g$e$7414$gDo33 g$p$7415$gDo33)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$7415$gDo33)
                                           (write g$x$7406$gDo33 g$p$7415$gDo33)
                                           (display '" in file " g$p$7415$gDo33)
                                           (display
                                             g$file-name$7407$gDo33
                                             g$p$7415$gDo33)
                                           (display '", found " g$p$7415$gDo33)
                                           (write
                                             g$name$7409$gDo33
                                             g$p$7415$gDo33)
                                           (display '" instead" g$p$7415$gDo33)
                                           (g$e$7414$gDo33))))
                                      g$e$7413$gDo33
                                      g$p$7412$gDo33)))))
                              (void)))))))))
                 (g$try-load-from-file$7322$gDo33 g$file-name$7407$gDo33)))))
           ((g$file-locator$7319$gDo33) g$x$7406$gDo33))))
       (case-lambda
         ((g$f$7416$gDo33)
          (if (procedure? g$f$7416$gDo33)
            g$f$7416$gDo33
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$7416$gDo33))))))
   (g$current-library-expander$7324$gDo33
     g$current-library-expander$7519$gDo33
     (g$make-parameter$6991$gDo33
       (case-lambda
         ((g$x$7417$gDo33)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$7418$gDo33)
          (if (procedure? g$f$7418$gDo33)
            g$f$7418$gDo33
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$7418$gDo33))))))
   (g$external-pending-libraries$7325$gDo33
     g$external-pending-libraries$7520$gDo33
     (g$make-parameter$6991$gDo33 '()))
   (g$find-external-library$7326$gDo33
     g$find-external-library$7521$gDo33
     (case-lambda
       ((g$name$7419$gDo33)
        (begin
          (if (g$member$5057$gDo33
                g$name$7419$gDo33
                (g$external-pending-libraries$7325$gDo33))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$7419$gDo33)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$7422$gDo33
                g$external-pending-libraries$7423$gDo33)
              ((case-lambda
                 ((g$swap$7424$gDo33)
                  (dynamic-wind
                    g$swap$7424$gDo33
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$7323$gDo33) g$name$7419$gDo33)
                         ((case-lambda
                            ((g$t$7425$gDo33)
                             (if g$t$7425$gDo33
                               g$t$7425$gDo33
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$7419$gDo33)))))
                          (g$find-library-by$7315$gDo33
                            (case-lambda
                              ((g$x$7426$gDo33)
                               (equal?
                                 (g$library-name$7286$gDo33 g$x$7426$gDo33)
                                 g$name$7419$gDo33))))))))
                    g$swap$7424$gDo33)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$7427$gDo33)
                      (begin
                        (g$external-pending-libraries$7422$gDo33
                          g$external-pending-libraries$7423$gDo33)
                        (set! g$external-pending-libraries$7423$gDo33
                          g$t$7427$gDo33))))
                   (g$external-pending-libraries$7422$gDo33)))))))
           g$external-pending-libraries$7325$gDo33
           (cons
             g$name$7419$gDo33
             (g$external-pending-libraries$7325$gDo33)))))))
   (g$find-library-by-name$7327$gDo33
     g$find-library-by-name$7522$gDo33
     (case-lambda
       ((g$name$7428$gDo33)
        ((case-lambda
           ((g$t$7429$gDo33)
            (if g$t$7429$gDo33
              g$t$7429$gDo33
              (begin
                '#f
                (g$find-external-library$7326$gDo33 g$name$7428$gDo33)))))
         (g$find-library-by$7315$gDo33
           (case-lambda
             ((g$x$7430$gDo33)
              (equal?
                (g$library-name$7286$gDo33 g$x$7430$gDo33)
                g$name$7428$gDo33))))))))
   (g$library-exists?$7328$gDo33
     g$library-exists?$7523$gDo33
     (case-lambda
       ((g$name$7431$gDo33)
        (if (g$find-library-by$7315$gDo33
              (case-lambda
                ((g$x$7432$gDo33)
                 (equal?
                   (g$library-name$7286$gDo33 g$x$7432$gDo33)
                   g$name$7431$gDo33))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$7329$gDo33
     g$find-library-by-spec/die$7524$gDo33
     (case-lambda
       ((g$spec$7433$gDo33)
        ((case-lambda
           ((g$id$7434$gDo33)
            ((case-lambda
               ((g$t$7435$gDo33)
                (if g$t$7435$gDo33
                  g$t$7435$gDo33
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$7433$gDo33)))))
             (g$find-library-by$7315$gDo33
               (case-lambda
                 ((g$x$7436$gDo33)
                  (eq? g$id$7434$gDo33
                       (g$library-id$7285$gDo33 g$x$7436$gDo33))))))))
         (car g$spec$7433$gDo33)))))
   (g$label->binding-table$7330$gDo33
     g$label->binding-table$7525$gDo33
     (g$make-eq-hashtable$5538$gDo33))
   (g$install-library-record$7331$gDo33
     g$install-library-record$7526$gDo33
     (case-lambda
       ((g$lib$7437$gDo33)
        (begin
          ((case-lambda
             ((g$exp-env$7438$gDo33)
              (g$for-each$5064$gDo33
                (case-lambda
                  ((g$x$7439$gDo33)
                   ((case-lambda
                      ((g$label$7440$gDo33 g$binding$7441$gDo33)
                       ((case-lambda
                          ((g$binding$7442$gDo33)
                           (g$hashtable-set!$5542$gDo33
                             g$label->binding-table$7330$gDo33
                             g$label$7440$gDo33
                             g$binding$7442$gDo33)))
                        ((case-lambda
                           ((g$t$7443$gDo33)
                            (if (g$memv$5056$gDo33 g$t$7443$gDo33 '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$7437$gDo33
                                  (cdr g$binding$7441$gDo33)))
                              (if (g$memv$5056$gDo33
                                    g$t$7443$gDo33
                                    '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$7437$gDo33
                                    (cdr g$binding$7441$gDo33)))
                                (if (g$memv$5056$gDo33
                                      g$t$7443$gDo33
                                      '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$7437$gDo33
                                      (cdr g$binding$7441$gDo33)))
                                  g$binding$7441$gDo33)))))
                         (car g$binding$7441$gDo33)))))
                    (car g$x$7439$gDo33)
                    (cdr g$x$7439$gDo33))))
                g$exp-env$7438$gDo33)))
           (g$library-env$7292$gDo33 g$lib$7437$gDo33))
          ((g$current-library-collection$7279$gDo33) g$lib$7437$gDo33)))))
   (g$install-library$7332$gDo33
     g$install-library$7527$gDo33
     (case-lambda
       ((g$id$7444$gDo33
          g$name$7445$gDo33
          g$ver$7446$gDo33
          g$imp*$7447$gDo33
          g$vis*$7448$gDo33
          g$inv*$7449$gDo33
          g$exp-subst$7450$gDo33
          g$exp-env$7451$gDo33
          g$visit-proc$7452$gDo33
          g$invoke-proc$7453$gDo33
          g$visit-code$7454$gDo33
          g$invoke-code$7455$gDo33
          g$visible?$7456$gDo33
          g$source-file-name$7457$gDo33)
        ((case-lambda
           ((g$imp-lib*$7458$gDo33 g$vis-lib*$7459$gDo33 g$inv-lib*$7460$gDo33)
            (begin
              (if (not (if (symbol? g$id$7444$gDo33)
                         (if (list? g$name$7445$gDo33)
                           (begin '#f (list? g$ver$7446$gDo33))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$7444$gDo33
                  g$name$7445$gDo33
                  g$ver$7446$gDo33)
                (void))
              (if (g$library-exists?$7328$gDo33 g$name$7445$gDo33)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$7445$gDo33)
                (void))
              ((case-lambda
                 ((g$lib$7461$gDo33)
                  (g$install-library-record$7331$gDo33 g$lib$7461$gDo33)))
               (g$make-library$7284$gDo33
                 g$id$7444$gDo33
                 g$name$7445$gDo33
                 g$ver$7446$gDo33
                 g$imp-lib*$7458$gDo33
                 g$vis-lib*$7459$gDo33
                 g$inv-lib*$7460$gDo33
                 g$exp-subst$7450$gDo33
                 g$exp-env$7451$gDo33
                 g$visit-proc$7452$gDo33
                 g$invoke-proc$7453$gDo33
                 g$visit-code$7454$gDo33
                 g$invoke-code$7455$gDo33
                 g$visible?$7456$gDo33
                 g$source-file-name$7457$gDo33)))))
         (g$map$5063$gDo33
           g$find-library-by-spec/die$7329$gDo33
           g$imp*$7447$gDo33)
         (g$map$5063$gDo33
           g$find-library-by-spec/die$7329$gDo33
           g$vis*$7448$gDo33)
         (g$map$5063$gDo33
           g$find-library-by-spec/die$7329$gDo33
           g$inv*$7449$gDo33)))))
   (g$imported-label->binding$7333$gDo33
     g$imported-label->binding$7528$gDo33
     (case-lambda
       ((g$lab$7462$gDo33)
        (g$hashtable-ref$5541$gDo33
          g$label->binding-table$7330$gDo33
          g$lab$7462$gDo33
          '#f))))
   (g$invoke-library$7334$gDo33
     g$invoke-library$7529$gDo33
     (case-lambda
       ((g$lib$7463$gDo33)
        ((case-lambda
           ((g$invoke$7464$gDo33)
            (if (procedure? g$invoke$7464$gDo33)
              (begin
                (g$set-library-invoke-state!$7308$gDo33
                  g$lib$7463$gDo33
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$7463$gDo33))))
                (g$for-each$5064$gDo33
                  g$invoke-library$7334$gDo33
                  (g$library-inv*$7290$gDo33 g$lib$7463$gDo33))
                (g$set-library-invoke-state!$7308$gDo33
                  g$lib$7463$gDo33
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$7463$gDo33))))
                (g$invoke$7464$gDo33)
                (g$set-library-invoke-state!$7308$gDo33 g$lib$7463$gDo33 '#t))
              (void))))
         (g$library-invoke-state$7294$gDo33 g$lib$7463$gDo33)))))
   (g$visit-library$7335$gDo33
     g$visit-library$7530$gDo33
     (case-lambda
       ((g$lib$7465$gDo33)
        ((case-lambda
           ((g$visit$7466$gDo33)
            (if (procedure? g$visit$7466$gDo33)
              (begin
                (g$set-library-visit-state!$7307$gDo33
                  g$lib$7465$gDo33
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$7465$gDo33))))
                (g$for-each$5064$gDo33
                  g$invoke-library$7334$gDo33
                  (g$library-vis*$7289$gDo33 g$lib$7465$gDo33))
                (g$set-library-visit-state!$7307$gDo33
                  g$lib$7465$gDo33
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$7465$gDo33))))
                (g$visit$7466$gDo33)
                (g$set-library-visit-state!$7307$gDo33 g$lib$7465$gDo33 '#t))
              (void))))
         (g$library-visit-state$7293$gDo33 g$lib$7465$gDo33)))))
   (g$invoke-library-by-spec$7336$gDo33
     g$invoke-library-by-spec$7531$gDo33
     (case-lambda
       ((g$spec$7467$gDo33)
        (g$invoke-library$7334$gDo33
          (g$find-library-by-spec/die$7329$gDo33 g$spec$7467$gDo33)))))
   (g$installed-libraries$7337$gDo33
     g$installed-libraries$7532$gDo33
     (case-lambda
       ((g$all?$7468$gDo33)
        ((letrec ((g$f$7469$gDo33
                    (case-lambda
                      ((g$ls$7470$gDo33)
                       (if (null? g$ls$7470$gDo33)
                         '()
                         (if ((case-lambda
                                ((g$t$7471$gDo33)
                                 (if g$t$7471$gDo33
                                   g$t$7471$gDo33
                                   (begin
                                     '#f
                                     (g$library-visible?$7297$gDo33
                                       (car g$ls$7470$gDo33))))))
                              g$all?$7468$gDo33)
                           (cons
                             (car g$ls$7470$gDo33)
                             (g$f$7469$gDo33 (cdr g$ls$7470$gDo33)))
                           (g$f$7469$gDo33 (cdr g$ls$7470$gDo33))))))))
           g$f$7469$gDo33)
         ((g$current-library-collection$7279$gDo33))))
       (() (g$installed-libraries$7337$gDo33 '#f))))
   (g$library-spec$7338$gDo33
     g$library-spec$7533$gDo33
     (case-lambda
       ((g$x$7472$gDo33)
        (begin
          (if (not (g$library?$7283$gDo33 g$x$7472$gDo33))
            (assertion-violation 'library-spec '"not a library" g$x$7472$gDo33)
            (void))
          (list
            (g$library-id$7285$gDo33 g$x$7472$gDo33)
            (g$library-name$7286$gDo33 g$x$7472$gDo33)
            (g$library-version$7287$gDo33 g$x$7472$gDo33)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$7534$gDo33
     g$build-global-define$7644$gDo33
     (case-lambda ((g$x$7615$gDo33) (g$build-void$7611$gDo33))))
   (g$build-lambda$7583$gDo33
     g$build-lambda$7645$gDo33
     (case-lambda
       ((g$ae$7616$gDo33 g$vars$7617$gDo33 g$exp$7618$gDo33)
        (list 'case-lambda (list g$vars$7617$gDo33 g$exp$7618$gDo33)))))
   (g$build-case-lambda$7584$gDo33
     g$build-case-lambda$7646$gDo33
     (case-lambda
       ((g$ae$7619$gDo33 g$vars*$7620$gDo33 g$exp*$7621$gDo33)
        (cons
          'case-lambda
          (g$map$5063$gDo33 list g$vars*$7620$gDo33 g$exp*$7621$gDo33)))))
   (g$build-let$7585$gDo33
     g$build-let$7647$gDo33
     (case-lambda
       ((g$ae$7622$gDo33 g$lhs*$7623$gDo33 g$rhs*$7624$gDo33 g$body$7625$gDo33)
        (cons
          (g$build-lambda$7583$gDo33
            g$ae$7622$gDo33
            g$lhs*$7623$gDo33
            g$body$7625$gDo33)
          g$rhs*$7624$gDo33))))
   (g$build-sequence$7610$gDo33
     g$build-sequence$7648$gDo33
     (case-lambda
       ((g$ae$7626$gDo33 g$exps$7627$gDo33)
        ((letrec ((g$loop$7628$gDo33
                    (case-lambda
                      ((g$exps$7629$gDo33)
                       (if (null? (cdr g$exps$7629$gDo33))
                         (car g$exps$7629$gDo33)
                         (if (equal?
                               (car g$exps$7629$gDo33)
                               (g$build-void$7611$gDo33))
                           (g$loop$7628$gDo33 (cdr g$exps$7629$gDo33))
                           (cons 'begin g$exps$7629$gDo33)))))))
           g$loop$7628$gDo33)
         g$exps$7627$gDo33))))
   (g$build-void$7611$gDo33
     g$build-void$7649$gDo33
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7612$gDo33
     g$build-letrec$7650$gDo33
     (case-lambda
       ((g$ae$7630$gDo33
          g$vars$7631$gDo33
          g$val-exps$7632$gDo33
          g$body-exp$7633$gDo33)
        (if (null? g$vars$7631$gDo33)
          g$body-exp$7633$gDo33
          (list
            'letrec
            (g$map$5063$gDo33 list g$vars$7631$gDo33 g$val-exps$7632$gDo33)
            g$body-exp$7633$gDo33)))))
   (g$build-letrec*$7613$gDo33
     g$build-letrec*$7651$gDo33
     (case-lambda
       ((g$ae$7634$gDo33
          g$vars$7635$gDo33
          g$val-exps$7636$gDo33
          g$body-exp$7637$gDo33)
        (if (null? g$vars$7635$gDo33)
          g$body-exp$7637$gDo33
          (list
            'letrec*
            (g$map$5063$gDo33 list g$vars$7635$gDo33 g$val-exps$7636$gDo33)
            g$body-exp$7637$gDo33)))))
   (g$build-library-letrec*$7614$gDo33
     g$build-library-letrec*$7652$gDo33
     (case-lambda
       ((g$ae$7638$gDo33
          g$name$7639$gDo33
          g$vars$7640$gDo33
          g$locs$7641$gDo33
          g$val-exps$7642$gDo33
          g$body-exp$7643$gDo33)
        (list
          'library-letrec*
          g$name$7639$gDo33
          (g$map$5063$gDo33
            list
            g$vars$7640$gDo33
            g$locs$7641$gDo33
            g$val-exps$7642$gDo33)
          g$body-exp$7643$gDo33)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7653$gDo33
     g$set-cons$11349$gDo33
     (case-lambda
       ((g$x$8118$gDo33 g$ls$8119$gDo33)
        (if (g$memq$5055$gDo33 g$x$8118$gDo33 g$ls$8119$gDo33)
          g$ls$8119$gDo33
          (cons g$x$8118$gDo33 g$ls$8119$gDo33)))))
   (g$set-union$7654$gDo33
     g$set-union$11350$gDo33
     (case-lambda
       ((g$ls1$8120$gDo33 g$ls2$8121$gDo33)
        (if (null? g$ls1$8120$gDo33)
          g$ls2$8121$gDo33
          (if (g$memq$5055$gDo33 (car g$ls1$8120$gDo33) g$ls2$8121$gDo33)
            (g$set-union$7654$gDo33 (cdr g$ls1$8120$gDo33) g$ls2$8121$gDo33)
            (cons
              (car g$ls1$8120$gDo33)
              (g$set-union$7654$gDo33
                (cdr g$ls1$8120$gDo33)
                g$ls2$8121$gDo33)))))))
   (g$top-mark*$7656$gDo33 g$top-mark*$11351$gDo33 '(top))
   (g$top-marked?$7657$gDo33
     g$top-marked?$11352$gDo33
     (case-lambda
       ((g$m*$8122$gDo33) (g$memq$5055$gDo33 'top g$m*$8122$gDo33))))
   (g$gen-lexical$7658$gDo33
     g$gen-lexical$11353$gDo33
     (case-lambda
       ((g$sym$8123$gDo33)
        (if (symbol? g$sym$8123$gDo33)
          (gensym g$sym$8123$gDo33)
          (if (g$stx?$7691$gDo33 g$sym$8123$gDo33)
            (g$gen-lexical$7658$gDo33 (g$id->sym$7720$gDo33 g$sym$8123$gDo33))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$8123$gDo33))))))
   (g$gen-global$7659$gDo33
     g$gen-global$11354$gDo33
     (case-lambda
       ((g$x$8124$gDo33) (g$gen-lexical$7658$gDo33 g$x$8124$gDo33))))
   (g$gen-label$7660$gDo33
     g$gen-label$11355$gDo33
     (case-lambda ((g$_$8125$gDo33) (gensym))))
   (g$gen-top-level-label$7661$gDo33
     g$gen-top-level-label$11356$gDo33
     (case-lambda
       ((g$id$8126$gDo33 g$rib$8127$gDo33)
        (letrec* ((g$find$8128$gDo33
                    (case-lambda
                      ((g$sym$8134$gDo33
                         g$mark*$8135$gDo33
                         g$sym*$8136$gDo33
                         g$mark**$8137$gDo33
                         g$label*$8138$gDo33)
                       (if (pair? g$sym*$8136$gDo33)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8134$gDo33
                                        (car g$sym*$8136$gDo33))
                                 (begin
                                   '#f
                                   (g$same-marks?$7721$gDo33
                                     g$mark*$8135$gDo33
                                     (car g$mark**$8137$gDo33)))
                                 '#f)
                             (car g$label*$8138$gDo33)
                             (g$find$8128$gDo33
                               g$sym$8134$gDo33
                               g$mark*$8135$gDo33
                               (cdr g$sym*$8136$gDo33)
                               (cdr g$mark**$8137$gDo33)
                               (cdr g$label*$8138$gDo33))))
                         '#f)))))
          ((case-lambda
             ((g$sym$8129$gDo33 g$mark*$8130$gDo33)
              ((case-lambda
                 ((g$sym*$8131$gDo33)
                  ((case-lambda
                     ((g$t$8132$gDo33)
                      (if g$t$8132$gDo33
                        ((case-lambda
                           ((g$label$8133$gDo33)
                            (if (g$imported-label->binding$7528$gDo33
                                  g$label$8133$gDo33)
                              (gensym)
                              g$label$8133$gDo33)))
                         g$t$8132$gDo33)
                        (gensym))))
                   (if (g$memq$5055$gDo33
                         g$sym$8129$gDo33
                         (g$rib-sym*$7669$gDo33 g$rib$8127$gDo33))
                     (begin
                       '#f
                       (g$find$8128$gDo33
                         g$sym$8129$gDo33
                         g$mark*$8130$gDo33
                         g$sym*$8131$gDo33
                         (g$rib-mark**$7670$gDo33 g$rib$8127$gDo33)
                         (g$rib-label*$7671$gDo33 g$rib$8127$gDo33)))
                     '#f))))
               (g$rib-sym*$7669$gDo33 g$rib$8127$gDo33))))
           (g$id->sym$7720$gDo33 g$id$8126$gDo33)
           (g$stx-mark*$7694$gDo33 g$id$8126$gDo33))))))
   (g$gen-define-label+loc$7662$gDo33
     g$gen-define-label+loc$11357$gDo33
     (case-lambda
       ((g$id$8139$gDo33 g$rib$8140$gDo33 g$sd?$8141$gDo33)
        (if g$sd?$8141$gDo33
          (values (gensym) (g$gen-lexical$7658$gDo33 g$id$8139$gDo33))
          ((case-lambda
             ((g$env$8142$gDo33)
              ((case-lambda
                 ((g$label$8143$gDo33 g$locs$8144$gDo33)
                  (values
                    g$label$8143$gDo33
                    ((case-lambda
                       ((g$t$8145$gDo33)
                        (if g$t$8145$gDo33
                          (cdr g$t$8145$gDo33)
                          ((case-lambda
                             ((g$loc$8146$gDo33)
                              (begin
                                (g$set-interaction-env-locs!$8080$gDo33
                                  g$env$8142$gDo33
                                  (cons
                                    (cons g$label$8143$gDo33 g$loc$8146$gDo33)
                                    g$locs$8144$gDo33))
                                g$loc$8146$gDo33)))
                           (g$gen-lexical$7658$gDo33 g$id$8139$gDo33)))))
                     (g$assq$5051$gDo33
                       g$label$8143$gDo33
                       g$locs$8144$gDo33)))))
               (g$gen-top-level-label$7661$gDo33
                 g$id$8139$gDo33
                 g$rib$8140$gDo33)
               (g$interaction-env-locs$8077$gDo33 g$env$8142$gDo33))))
           (g$top-level-context$8117$gDo33))))))
   (g$gen-define-label$7663$gDo33
     g$gen-define-label$11358$gDo33
     (case-lambda
       ((g$id$8147$gDo33 g$rib$8148$gDo33 g$sd?$8149$gDo33)
        (if g$sd?$8149$gDo33
          (gensym)
          (g$gen-top-level-label$7661$gDo33
            g$id$8147$gDo33
            g$rib$8148$gDo33)))))
   (g$8670$7664$gDo33
     g$8670$11359$gDo33
     (make-record-type-descriptor
       'rib
       '#f
       'g$8673$gDo33
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq)
          (mutable cache))))
   (g$8672$7665$gDo33 g$8672$11360$gDo33 '#f)
   (g$8671$7666$gDo33
     g$8671$11361$gDo33
     (make-record-constructor-descriptor
       g$8670$7664$gDo33
       '#f
       g$8672$7665$gDo33))
   (g$rib?$7667$gDo33
     g$rib?$11362$gDo33
     (record-predicate g$8670$7664$gDo33))
   (g$make-rib$7668$gDo33
     g$make-rib$11363$gDo33
     (record-constructor g$8671$7666$gDo33))
   (g$rib-sym*$7669$gDo33
     g$rib-sym*$11364$gDo33
     (record-accessor g$8670$7664$gDo33 '0))
   (g$rib-mark**$7670$gDo33
     g$rib-mark**$11365$gDo33
     (record-accessor g$8670$7664$gDo33 '1))
   (g$rib-label*$7671$gDo33
     g$rib-label*$11366$gDo33
     (record-accessor g$8670$7664$gDo33 '2))
   (g$rib-sealed/freq$7672$gDo33
     g$rib-sealed/freq$11367$gDo33
     (record-accessor g$8670$7664$gDo33 '3))
   (g$rib-cache$7673$gDo33
     g$rib-cache$11368$gDo33
     (record-accessor g$8670$7664$gDo33 '4))
   (g$set-rib-sym*!$7674$gDo33
     g$set-rib-sym*!$11369$gDo33
     (record-mutator g$8670$7664$gDo33 '0))
   (g$set-rib-mark**!$7675$gDo33
     g$set-rib-mark**!$11370$gDo33
     (record-mutator g$8670$7664$gDo33 '1))
   (g$set-rib-label*!$7676$gDo33
     g$set-rib-label*!$11371$gDo33
     (record-mutator g$8670$7664$gDo33 '2))
   (g$set-rib-sealed/freq!$7677$gDo33
     g$set-rib-sealed/freq!$11372$gDo33
     (record-mutator g$8670$7664$gDo33 '3))
   (g$set-rib-cache!$7678$gDo33
     g$set-rib-cache!$11373$gDo33
     (record-mutator g$8670$7664$gDo33 '4))
   (g$make-empty-rib$7679$gDo33
     g$make-empty-rib$11374$gDo33
     (case-lambda (() (g$make-rib$7668$gDo33 '() '() '() '#f '#f))))
   (g$make-cache-rib$7680$gDo33
     g$make-cache-rib$11375$gDo33
     (case-lambda
       (()
        (g$make-rib$7668$gDo33
          '()
          '()
          '()
          '#f
          (g$make-eq-hashtable$5538$gDo33)))))
   (g$find-label$7681$gDo33
     g$find-label$11376$gDo33
     (case-lambda
       ((g$rib$8150$gDo33 g$sym$8151$gDo33 g$mark*$8152$gDo33)
        ((case-lambda
           ((g$ht$8153$gDo33)
            (if g$ht$8153$gDo33
              (begin
                '#f
                ((case-lambda
                   ((g$cv$8154$gDo33)
                    ((case-lambda
                       ((g$t$8155$gDo33)
                        (if g$t$8155$gDo33 (cdr g$t$8155$gDo33) '#f)))
                     (if g$cv$8154$gDo33
                       (begin
                         '#f
                         (g$assp$5054$gDo33
                           (case-lambda
                             ((g$m$8156$gDo33)
                              (g$same-marks?$7721$gDo33
                                g$mark*$8152$gDo33
                                g$m$8156$gDo33)))
                           g$cv$8154$gDo33))
                       '#f))))
                 (g$hashtable-ref$5541$gDo33
                   g$ht$8153$gDo33
                   g$sym$8151$gDo33
                   '#f)))
              '#f)))
         (g$rib-cache$7673$gDo33 g$rib$8150$gDo33)))))
   (g$extend-rib!$7682$gDo33
     g$extend-rib!$11377$gDo33
     (case-lambda
       ((g$rib$8157$gDo33 g$id$8158$gDo33 g$label$8159$gDo33 g$sd?$8160$gDo33)
        (letrec* ((g$find$8161$gDo33
                    (case-lambda
                      ((g$sym$8170$gDo33
                         g$mark*$8171$gDo33
                         g$sym*$8172$gDo33
                         g$mark**$8173$gDo33
                         g$label*$8174$gDo33)
                       (if (pair? g$sym*$8172$gDo33)
                         (begin
                           '#f
                           (if (if (eq? g$sym$8170$gDo33
                                        (car g$sym*$8172$gDo33))
                                 (begin
                                   '#f
                                   (g$same-marks?$7721$gDo33
                                     g$mark*$8171$gDo33
                                     (car g$mark**$8173$gDo33)))
                                 '#f)
                             g$label*$8174$gDo33
                             (g$find$8161$gDo33
                               g$sym$8170$gDo33
                               g$mark*$8171$gDo33
                               (cdr g$sym*$8172$gDo33)
                               (cdr g$mark**$8173$gDo33)
                               (cdr g$label*$8174$gDo33))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7672$gDo33 g$rib$8157$gDo33)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$8157$gDo33)
              (void))
            ((case-lambda
               ((g$sym$8162$gDo33 g$mark*$8163$gDo33)
                ((case-lambda
                   ((g$sym*$8164$gDo33)
                    ((case-lambda
                       ((g$t$8165$gDo33)
                        (if g$t$8165$gDo33
                          ((case-lambda
                             ((g$p$8166$gDo33)
                              (if (not (eq? g$label$8159$gDo33 g$p$8166$gDo33))
                                (g$syntax-violation$8109$gDo33
                                  '#f
                                  '"multiple definitions of identifier"
                                  g$id$8158$gDo33)
                                (void))))
                           g$t$8165$gDo33)
                          ((case-lambda
                             ((g$t$8167$gDo33)
                              (if g$t$8167$gDo33
                                ((case-lambda
                                   ((g$p$8168$gDo33)
                                    (if (not (eq? g$label$8159$gDo33
                                                  (car g$p$8168$gDo33)))
                                      (if (not g$sd?$8160$gDo33)
                                        (set-car!
                                          g$p$8168$gDo33
                                          g$label$8159$gDo33)
                                        (g$syntax-violation$8109$gDo33
                                          '#f
                                          '"multiple definitions of identifier"
                                          g$id$8158$gDo33))
                                      (void))))
                                 g$t$8167$gDo33)
                                (begin
                                  (if (g$rib-cache$7673$gDo33 g$rib$8157$gDo33)
                                    (g$hashtable-update!$5545$gDo33
                                      (g$rib-cache$7673$gDo33 g$rib$8157$gDo33)
                                      g$sym$8162$gDo33
                                      (case-lambda
                                        ((g$e$8169$gDo33)
                                         (cons
                                           (cons
                                             g$mark*$8163$gDo33
                                             g$label$8159$gDo33)
                                           g$e$8169$gDo33)))
                                      '())
                                    (void))
                                  (g$set-rib-sym*!$7674$gDo33
                                    g$rib$8157$gDo33
                                    (cons g$sym$8162$gDo33 g$sym*$8164$gDo33))
                                  (g$set-rib-mark**!$7675$gDo33
                                    g$rib$8157$gDo33
                                    (cons
                                      g$mark*$8163$gDo33
                                      (g$rib-mark**$7670$gDo33
                                        g$rib$8157$gDo33)))
                                  (g$set-rib-label*!$7676$gDo33
                                    g$rib$8157$gDo33
                                    (cons
                                      g$label$8159$gDo33
                                      (g$rib-label*$7671$gDo33
                                        g$rib$8157$gDo33)))))))
                           (if (g$memq$5055$gDo33
                                 g$sym$8162$gDo33
                                 (g$rib-sym*$7669$gDo33 g$rib$8157$gDo33))
                             (begin
                               '#f
                               (g$find$8161$gDo33
                                 g$sym$8162$gDo33
                                 g$mark*$8163$gDo33
                                 g$sym*$8164$gDo33
                                 (g$rib-mark**$7670$gDo33 g$rib$8157$gDo33)
                                 (g$rib-label*$7671$gDo33 g$rib$8157$gDo33)))
                             '#f)))))
                     (g$find-label$7681$gDo33
                       g$rib$8157$gDo33
                       g$sym$8162$gDo33
                       g$mark*$8163$gDo33))))
                 (g$rib-sym*$7669$gDo33 g$rib$8157$gDo33))))
             (g$id->sym$7720$gDo33 g$id$8158$gDo33)
             (g$stx-mark*$7694$gDo33 g$id$8158$gDo33)))))))
   (g$extend-rib/nc!$7683$gDo33
     g$extend-rib/nc!$11378$gDo33
     (case-lambda
       ((g$rib$8175$gDo33 g$id$8176$gDo33 g$label$8177$gDo33)
        ((case-lambda
           ((g$sym$8178$gDo33 g$mark*$8179$gDo33)
            ((case-lambda
               ((g$sym*$8180$gDo33)
                (begin
                  (if (g$rib-cache$7673$gDo33 g$rib$8175$gDo33)
                    (g$hashtable-update!$5545$gDo33
                      (g$rib-cache$7673$gDo33 g$rib$8175$gDo33)
                      g$sym$8178$gDo33
                      (case-lambda
                        ((g$e$8181$gDo33)
                         (cons
                           (cons g$mark*$8179$gDo33 g$label$8177$gDo33)
                           g$e$8181$gDo33)))
                      '())
                    (void))
                  (g$set-rib-sym*!$7674$gDo33
                    g$rib$8175$gDo33
                    (cons g$sym$8178$gDo33 g$sym*$8180$gDo33))
                  (g$set-rib-mark**!$7675$gDo33
                    g$rib$8175$gDo33
                    (cons
                      g$mark*$8179$gDo33
                      (g$rib-mark**$7670$gDo33 g$rib$8175$gDo33)))
                  (g$set-rib-label*!$7676$gDo33
                    g$rib$8175$gDo33
                    (cons
                      g$label$8177$gDo33
                      (g$rib-label*$7671$gDo33 g$rib$8175$gDo33))))))
             (g$rib-sym*$7669$gDo33 g$rib$8175$gDo33))))
         (g$id->sym$7720$gDo33 g$id$8176$gDo33)
         (g$stx-mark*$7694$gDo33 g$id$8176$gDo33)))))
   (g$make-rib-map$7684$gDo33
     g$make-rib-map$11379$gDo33
     (case-lambda
       ((g$sym*$8182$gDo33)
        ((case-lambda
           ((g$ht$8183$gDo33)
            ((letrec ((g$f$8184$gDo33
                        (case-lambda
                          ((g$i$8185$gDo33 g$sym*$8186$gDo33)
                           (if (null? g$sym*$8186$gDo33)
                             g$ht$8183$gDo33
                             (begin
                               (g$hashtable-update!$5545$gDo33
                                 g$ht$8183$gDo33
                                 (car g$sym*$8186$gDo33)
                                 (case-lambda
                                   ((g$x$8187$gDo33)
                                    (cons g$i$8185$gDo33 g$x$8187$gDo33)))
                                 '())
                               (g$f$8184$gDo33
                                 (+ g$i$8185$gDo33 '1)
                                 (cdr g$sym*$8186$gDo33))))))))
               g$f$8184$gDo33)
             '0
             g$sym*$8182$gDo33)))
         (g$make-eq-hashtable$5538$gDo33)))))
   (g$seal-rib!$7685$gDo33
     g$seal-rib!$11380$gDo33
     (case-lambda
       ((g$rib$8188$gDo33)
        ((case-lambda
           ((g$sym*$8189$gDo33)
            (if (not (null? g$sym*$8189$gDo33))
              (begin
                (g$set-rib-sym*!$7674$gDo33
                  g$rib$8188$gDo33
                  (list->vector g$sym*$8189$gDo33))
                (g$set-rib-mark**!$7675$gDo33
                  g$rib$8188$gDo33
                  (list->vector (g$rib-mark**$7670$gDo33 g$rib$8188$gDo33)))
                (g$set-rib-label*!$7676$gDo33
                  g$rib$8188$gDo33
                  (list->vector (g$rib-label*$7671$gDo33 g$rib$8188$gDo33)))
                (g$set-rib-sealed/freq!$7677$gDo33
                  g$rib$8188$gDo33
                  (g$make-rib-map$7684$gDo33 g$sym*$8189$gDo33)))
              (void))))
         (g$rib-sym*$7669$gDo33 g$rib$8188$gDo33)))))
   (g$unseal-rib!$7686$gDo33
     g$unseal-rib!$11381$gDo33
     (case-lambda
       ((g$rib$8190$gDo33)
        (if (g$rib-sealed/freq$7672$gDo33 g$rib$8190$gDo33)
          (begin
            (g$set-rib-sealed/freq!$7677$gDo33 g$rib$8190$gDo33 '#f)
            (g$set-rib-sym*!$7674$gDo33
              g$rib$8190$gDo33
              (vector->list (g$rib-sym*$7669$gDo33 g$rib$8190$gDo33)))
            (g$set-rib-mark**!$7675$gDo33
              g$rib$8190$gDo33
              (vector->list (g$rib-mark**$7670$gDo33 g$rib$8190$gDo33)))
            (g$set-rib-label*!$7676$gDo33
              g$rib$8190$gDo33
              (vector->list (g$rib-label*$7671$gDo33 g$rib$8190$gDo33))))
          (void)))))
   (g$make-full-rib$7687$gDo33
     g$make-full-rib$11382$gDo33
     (case-lambda
       ((g$id*$8191$gDo33 g$label*$8192$gDo33)
        ((case-lambda
           ((g$r$8193$gDo33)
            (begin (g$seal-rib!$7685$gDo33 g$r$8193$gDo33) g$r$8193$gDo33)))
         (g$make-rib$7668$gDo33
           (g$map$5063$gDo33 g$id->sym$7720$gDo33 g$id*$8191$gDo33)
           (g$map$5063$gDo33 g$stx-mark*$7694$gDo33 g$id*$8191$gDo33)
           g$label*$8192$gDo33
           '#f
           '#f)))))
   (g$8701$7688$gDo33
     g$8701$11383$gDo33
     (make-record-type-descriptor
       'stx
       '#f
       'g$8704$gDo33
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8703$7689$gDo33 g$8703$11384$gDo33 '#f)
   (g$8702$7690$gDo33
     g$8702$11385$gDo33
     (make-record-constructor-descriptor
       g$8701$7688$gDo33
       '#f
       g$8703$7689$gDo33))
   (g$stx?$7691$gDo33
     g$stx?$11386$gDo33
     (record-predicate g$8701$7688$gDo33))
   (g$make-stx$7692$gDo33
     g$make-stx$11387$gDo33
     (record-constructor g$8702$7690$gDo33))
   (g$stx-expr$7693$gDo33
     g$stx-expr$11388$gDo33
     (record-accessor g$8701$7688$gDo33 '0))
   (g$stx-mark*$7694$gDo33
     g$stx-mark*$11389$gDo33
     (record-accessor g$8701$7688$gDo33 '1))
   (g$stx-subst*$7695$gDo33
     g$stx-subst*$11390$gDo33
     (record-accessor g$8701$7688$gDo33 '2))
   (g$stx-ae*$7696$gDo33
     g$stx-ae*$11391$gDo33
     (record-accessor g$8701$7688$gDo33 '3))
   (g$set-stx-expr!$7697$gDo33
     g$set-stx-expr!$11392$gDo33
     (record-mutator g$8701$7688$gDo33 '0))
   (g$set-stx-mark*!$7698$gDo33
     g$set-stx-mark*!$11393$gDo33
     (record-mutator g$8701$7688$gDo33 '1))
   (g$set-stx-subst*!$7699$gDo33
     g$set-stx-subst*!$11394$gDo33
     (record-mutator g$8701$7688$gDo33 '2))
   (g$set-stx-ae*!$7700$gDo33
     g$set-stx-ae*!$11395$gDo33
     (record-mutator g$8701$7688$gDo33 '3))
   (g$rp$7701$gDo33
     g$rp$11396$gDo33
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$8194$gDo33 g$p$8195$gDo33 g$wr$8196$gDo33)
          (begin
            (display '"#<syntax " g$p$8195$gDo33)
            (write (g$stx->datum$7730$gDo33 g$x$8194$gDo33) g$p$8195$gDo33)
            ((case-lambda
               ((g$expr$8197$gDo33)
                (if (annotation? g$expr$8197$gDo33)
                  ((case-lambda
                     ((g$src$8198$gDo33)
                      (if (pair? g$src$8198$gDo33)
                        (begin
                          (display '" (" g$p$8195$gDo33)
                          (display (cdr g$src$8198$gDo33) g$p$8195$gDo33)
                          (display '" of " g$p$8195$gDo33)
                          (display (car g$src$8198$gDo33) g$p$8195$gDo33)
                          (display '")" g$p$8195$gDo33))
                        (void))))
                   (annotation-source g$expr$8197$gDo33))
                  (void))))
             (g$stx-expr$7693$gDo33 g$x$8194$gDo33))
            (display '">" g$p$8195$gDo33))))))
   (g$datum->stx$7702$gDo33
     g$datum->stx$11397$gDo33
     (case-lambda
       ((g$id$8199$gDo33 g$datum$8200$gDo33)
        (g$make-stx$7692$gDo33
          g$datum$8200$gDo33
          (g$stx-mark*$7694$gDo33 g$id$8199$gDo33)
          (g$stx-subst*$7695$gDo33 g$id$8199$gDo33)
          (g$stx-ae*$7696$gDo33 g$id$8199$gDo33)))))
   (g$gen-mark$7703$gDo33
     g$gen-mark$11398$gDo33
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7704$gDo33 g$anti-mark$11399$gDo33 '#f)
   (g$anti-mark?$7705$gDo33 g$anti-mark?$11400$gDo33 not)
   (g$join-wraps$7706$gDo33
     g$join-wraps$11401$gDo33
     (case-lambda
       ((g$m1*$8201$gDo33 g$s1*$8202$gDo33 g$ae1*$8203$gDo33 g$e$8204$gDo33)
        (letrec* ((g$cancel$8205$gDo33
                    (case-lambda
                      ((g$ls1$8209$gDo33 g$ls2$8210$gDo33)
                       ((letrec ((g$f$8211$gDo33
                                   (case-lambda
                                     ((g$x$8212$gDo33 g$ls1$8213$gDo33)
                                      (if (null? g$ls1$8213$gDo33)
                                        (cdr g$ls2$8210$gDo33)
                                        (cons
                                          g$x$8212$gDo33
                                          (g$f$8211$gDo33
                                            (car g$ls1$8213$gDo33)
                                            (cdr g$ls1$8213$gDo33))))))))
                          g$f$8211$gDo33)
                        (car g$ls1$8209$gDo33)
                        (cdr g$ls1$8209$gDo33))))))
          ((case-lambda
             ((g$m2*$8206$gDo33 g$s2*$8207$gDo33 g$ae2*$8208$gDo33)
              (if (if (not (null? g$m1*$8201$gDo33))
                    (if (not (null? g$m2*$8206$gDo33))
                      (begin
                        '#f
                        (g$anti-mark?$7705$gDo33 (car g$m2*$8206$gDo33)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$8205$gDo33 g$m1*$8201$gDo33 g$m2*$8206$gDo33)
                  (g$cancel$8205$gDo33 g$s1*$8202$gDo33 g$s2*$8207$gDo33)
                  (g$cancel$8205$gDo33 g$ae1*$8203$gDo33 g$ae2*$8208$gDo33))
                (values
                  (append g$m1*$8201$gDo33 g$m2*$8206$gDo33)
                  (append g$s1*$8202$gDo33 g$s2*$8207$gDo33)
                  (append g$ae1*$8203$gDo33 g$ae2*$8208$gDo33)))))
           (g$stx-mark*$7694$gDo33 g$e$8204$gDo33)
           (g$stx-subst*$7695$gDo33 g$e$8204$gDo33)
           (g$stx-ae*$7696$gDo33 g$e$8204$gDo33))))))
   (g$mkstx$7707$gDo33
     g$mkstx$11402$gDo33
     (case-lambda
       ((g$e$8214$gDo33 g$m*$8215$gDo33 g$s*$8216$gDo33 g$ae*$8217$gDo33)
        (if (if (g$stx?$7691$gDo33 g$e$8214$gDo33)
              (begin '#f (not (g$top-marked?$7657$gDo33 g$m*$8215$gDo33)))
              '#f)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7706$gDo33
                 g$m*$8215$gDo33
                 g$s*$8216$gDo33
                 g$ae*$8217$gDo33
                 g$e$8214$gDo33)))
            (case-lambda
              ((g$m*$8221$gDo33 g$s*$8222$gDo33 g$ae*$8223$gDo33)
               ((case-lambda
                  ((g$ae*$8224$gDo33 g$s*$8225$gDo33 g$m*$8226$gDo33)
                   (g$make-stx$7692$gDo33
                     (g$stx-expr$7693$gDo33 g$e$8214$gDo33)
                     g$m*$8226$gDo33
                     g$s*$8225$gDo33
                     g$ae*$8224$gDo33)))
                g$ae*$8223$gDo33
                g$s*$8222$gDo33
                g$m*$8221$gDo33))))
          (g$make-stx$7692$gDo33
            g$e$8214$gDo33
            g$m*$8215$gDo33
            g$s*$8216$gDo33
            g$ae*$8217$gDo33)))))
   (g$add-mark$7708$gDo33
     g$add-mark$11403$gDo33
     (case-lambda
       ((g$m$8227$gDo33 g$e$8228$gDo33 g$ae$8229$gDo33)
        (g$mkstx$7707$gDo33
          g$e$8228$gDo33
          (list g$m$8227$gDo33)
          '(shift)
          (list g$ae$8229$gDo33)))))
   (g$add-subst$7709$gDo33
     g$add-subst$11404$gDo33
     (case-lambda
       ((g$subst$8230$gDo33 g$e$8231$gDo33)
        (g$mkstx$7707$gDo33 g$e$8231$gDo33 '() (list g$subst$8230$gDo33) '()))))
   (g$syntax-kind?$7710$gDo33
     g$syntax-kind?$11405$gDo33
     (case-lambda
       ((g$x$8232$gDo33 g$p?$8233$gDo33)
        (if (g$stx?$7691$gDo33 g$x$8232$gDo33)
          (g$syntax-kind?$7710$gDo33
            (g$stx-expr$7693$gDo33 g$x$8232$gDo33)
            g$p?$8233$gDo33)
          (if (annotation? g$x$8232$gDo33)
            (g$syntax-kind?$7710$gDo33
              (annotation-expression g$x$8232$gDo33)
              g$p?$8233$gDo33)
            (g$p?$8233$gDo33 g$x$8232$gDo33))))))
   (g$syntax-vector->list$7711$gDo33
     g$syntax-vector->list$11406$gDo33
     (case-lambda
       ((g$x$8234$gDo33)
        (if (g$stx?$7691$gDo33 g$x$8234$gDo33)
          ((case-lambda
             ((g$ls$8235$gDo33 g$m*$8236$gDo33 g$s*$8237$gDo33 g$ae*$8238$gDo33)
              (g$map$5063$gDo33
                (case-lambda
                  ((g$x$8239$gDo33)
                   (g$mkstx$7707$gDo33
                     g$x$8239$gDo33
                     g$m*$8236$gDo33
                     g$s*$8237$gDo33
                     g$ae*$8238$gDo33)))
                g$ls$8235$gDo33)))
           (g$syntax-vector->list$7711$gDo33
             (g$stx-expr$7693$gDo33 g$x$8234$gDo33))
           (g$stx-mark*$7694$gDo33 g$x$8234$gDo33)
           (g$stx-subst*$7695$gDo33 g$x$8234$gDo33)
           (g$stx-ae*$7696$gDo33 g$x$8234$gDo33))
          (if (annotation? g$x$8234$gDo33)
            (g$syntax-vector->list$7711$gDo33
              (annotation-expression g$x$8234$gDo33))
            (if (vector? g$x$8234$gDo33)
              (vector->list g$x$8234$gDo33)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$8234$gDo33)))))))
   (g$syntax-pair?$7712$gDo33
     g$syntax-pair?$11407$gDo33
     (case-lambda
       ((g$x$8240$gDo33) (g$syntax-kind?$7710$gDo33 g$x$8240$gDo33 pair?))))
   (g$syntax-vector?$7713$gDo33
     g$syntax-vector?$11408$gDo33
     (case-lambda
       ((g$x$8241$gDo33) (g$syntax-kind?$7710$gDo33 g$x$8241$gDo33 vector?))))
   (g$syntax-null?$7714$gDo33
     g$syntax-null?$11409$gDo33
     (case-lambda
       ((g$x$8242$gDo33) (g$syntax-kind?$7710$gDo33 g$x$8242$gDo33 null?))))
   (g$syntax-list?$7715$gDo33
     g$syntax-list?$11410$gDo33
     (case-lambda
       ((g$x$8243$gDo33)
        ((case-lambda
           ((g$t$8244$gDo33)
            (if g$t$8244$gDo33
              g$t$8244$gDo33
              (begin
                '#f
                (if (g$syntax-pair?$7712$gDo33 g$x$8243$gDo33)
                  (begin
                    '#f
                    (g$syntax-list?$7715$gDo33
                      (g$syntax-cdr$7717$gDo33 g$x$8243$gDo33)))
                  '#f)))))
         (g$syntax-null?$7714$gDo33 g$x$8243$gDo33)))))
   (g$syntax-car$7716$gDo33
     g$syntax-car$11411$gDo33
     (case-lambda
       ((g$x$8245$gDo33)
        (if (g$stx?$7691$gDo33 g$x$8245$gDo33)
          (g$mkstx$7707$gDo33
            (g$syntax-car$7716$gDo33 (g$stx-expr$7693$gDo33 g$x$8245$gDo33))
            (g$stx-mark*$7694$gDo33 g$x$8245$gDo33)
            (g$stx-subst*$7695$gDo33 g$x$8245$gDo33)
            (g$stx-ae*$7696$gDo33 g$x$8245$gDo33))
          (if (annotation? g$x$8245$gDo33)
            (g$syntax-car$7716$gDo33 (annotation-expression g$x$8245$gDo33))
            (if (pair? g$x$8245$gDo33)
              (car g$x$8245$gDo33)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$8245$gDo33)))))))
   (g$syntax-cdr$7717$gDo33
     g$syntax-cdr$11412$gDo33
     (case-lambda
       ((g$x$8246$gDo33)
        (if (g$stx?$7691$gDo33 g$x$8246$gDo33)
          (g$mkstx$7707$gDo33
            (g$syntax-cdr$7717$gDo33 (g$stx-expr$7693$gDo33 g$x$8246$gDo33))
            (g$stx-mark*$7694$gDo33 g$x$8246$gDo33)
            (g$stx-subst*$7695$gDo33 g$x$8246$gDo33)
            (g$stx-ae*$7696$gDo33 g$x$8246$gDo33))
          (if (annotation? g$x$8246$gDo33)
            (g$syntax-cdr$7717$gDo33 (annotation-expression g$x$8246$gDo33))
            (if (pair? g$x$8246$gDo33)
              (cdr g$x$8246$gDo33)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$8246$gDo33)))))))
   (g$syntax->list$7718$gDo33
     g$syntax->list$11413$gDo33
     (case-lambda
       ((g$x$8247$gDo33)
        (if (g$syntax-pair?$7712$gDo33 g$x$8247$gDo33)
          (cons
            (g$syntax-car$7716$gDo33 g$x$8247$gDo33)
            (g$syntax->list$7718$gDo33
              (g$syntax-cdr$7717$gDo33 g$x$8247$gDo33)))
          (if (g$syntax-null?$7714$gDo33 g$x$8247$gDo33)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$8247$gDo33))))))
   (g$id?$7719$gDo33
     g$id?$11414$gDo33
     (case-lambda
       ((g$x$8248$gDo33)
        (if (g$stx?$7691$gDo33 g$x$8248$gDo33)
          (begin
            '#f
            ((case-lambda
               ((g$expr$8249$gDo33)
                (symbol?
                  (if (annotation? g$expr$8249$gDo33)
                    (annotation-stripped g$expr$8249$gDo33)
                    g$expr$8249$gDo33))))
             (g$stx-expr$7693$gDo33 g$x$8248$gDo33)))
          '#f))))
   (g$id->sym$7720$gDo33
     g$id->sym$11415$gDo33
     (case-lambda
       ((g$x$8250$gDo33)
        (begin
          (if (not (g$stx?$7691$gDo33 g$x$8250$gDo33))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$8250$gDo33)
            (void))
          ((case-lambda
             ((g$expr$8251$gDo33)
              ((case-lambda
                 ((g$sym$8252$gDo33)
                  (if (symbol? g$sym$8252$gDo33)
                    g$sym$8252$gDo33
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$8250$gDo33))))
               (if (annotation? g$expr$8251$gDo33)
                 (annotation-stripped g$expr$8251$gDo33)
                 g$expr$8251$gDo33))))
           (g$stx-expr$7693$gDo33 g$x$8250$gDo33))))))
   (g$same-marks?$7721$gDo33
     g$same-marks?$11416$gDo33
     (case-lambda
       ((g$x$8253$gDo33 g$y$8254$gDo33)
        ((case-lambda
           ((g$t$8255$gDo33)
            (if g$t$8255$gDo33
              g$t$8255$gDo33
              (begin
                '#f
                (if (pair? g$x$8253$gDo33)
                  (if (pair? g$y$8254$gDo33)
                    (if (eq? (car g$x$8253$gDo33) (car g$y$8254$gDo33))
                      (begin
                        '#f
                        (g$same-marks?$7721$gDo33
                          (cdr g$x$8253$gDo33)
                          (cdr g$y$8254$gDo33)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$8253$gDo33) (begin '#f (null? g$y$8254$gDo33)) '#f)))))
   (g$bound-id=?$7722$gDo33
     g$bound-id=?$11417$gDo33
     (case-lambda
       ((g$x$8256$gDo33 g$y$8257$gDo33)
        (if (eq? (g$id->sym$7720$gDo33 g$x$8256$gDo33)
                 (g$id->sym$7720$gDo33 g$y$8257$gDo33))
          (begin
            '#f
            (g$same-marks?$7721$gDo33
              (g$stx-mark*$7694$gDo33 g$x$8256$gDo33)
              (g$stx-mark*$7694$gDo33 g$y$8257$gDo33)))
          '#f))))
   (g$free-id=?$7723$gDo33
     g$free-id=?$11418$gDo33
     (case-lambda
       ((g$i$8258$gDo33 g$j$8259$gDo33)
        ((case-lambda
           ((g$t0$8260$gDo33 g$t1$8261$gDo33)
            (if ((case-lambda
                   ((g$t$8262$gDo33)
                    (if g$t$8262$gDo33
                      g$t$8262$gDo33
                      (begin '#f g$t1$8261$gDo33))))
                 g$t0$8260$gDo33)
              (eq? g$t0$8260$gDo33 g$t1$8261$gDo33)
              (eq? (g$id->sym$7720$gDo33 g$i$8258$gDo33)
                   (g$id->sym$7720$gDo33 g$j$8259$gDo33)))))
         (g$id->real-label$7733$gDo33 g$i$8258$gDo33)
         (g$id->real-label$7733$gDo33 g$j$8259$gDo33)))))
   (g$valid-bound-ids?$7724$gDo33
     g$valid-bound-ids?$11419$gDo33
     (case-lambda
       ((g$id*$8263$gDo33)
        (if (g$for-all$5061$gDo33 g$id?$7719$gDo33 g$id*$8263$gDo33)
          (begin '#f (g$distinct-bound-ids?$7725$gDo33 g$id*$8263$gDo33))
          '#f))))
   (g$distinct-bound-ids?$7725$gDo33
     g$distinct-bound-ids?$11420$gDo33
     (case-lambda
       ((g$id*$8264$gDo33)
        ((case-lambda
           ((g$t$8265$gDo33)
            (if g$t$8265$gDo33
              g$t$8265$gDo33
              (begin
                '#f
                (if (not (g$bound-id-member?$7726$gDo33
                           (car g$id*$8264$gDo33)
                           (cdr g$id*$8264$gDo33)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7725$gDo33 (cdr g$id*$8264$gDo33)))
                  '#f)))))
         (null? g$id*$8264$gDo33)))))
   (g$bound-id-member?$7726$gDo33
     g$bound-id-member?$11421$gDo33
     (case-lambda
       ((g$id$8266$gDo33 g$id*$8267$gDo33)
        (if (pair? g$id*$8267$gDo33)
          (begin
            '#f
            ((case-lambda
               ((g$t$8268$gDo33)
                (if g$t$8268$gDo33
                  g$t$8268$gDo33
                  (begin
                    '#f
                    (g$bound-id-member?$7726$gDo33
                      g$id$8266$gDo33
                      (cdr g$id*$8267$gDo33))))))
             (g$bound-id=?$7722$gDo33 g$id$8266$gDo33 (car g$id*$8267$gDo33))))
          '#f))))
   (g$self-evaluating?$7727$gDo33
     g$self-evaluating?$11422$gDo33
     (case-lambda
       ((g$x$8269$gDo33)
        ((case-lambda
           ((g$t$8270$gDo33)
            (if g$t$8270$gDo33
              g$t$8270$gDo33
              ((case-lambda
                 ((g$t$8271$gDo33)
                  (if g$t$8271$gDo33
                    g$t$8271$gDo33
                    ((case-lambda
                       ((g$t$8272$gDo33)
                        (if g$t$8272$gDo33
                          g$t$8272$gDo33
                          ((case-lambda
                             ((g$t$8273$gDo33)
                              (if g$t$8273$gDo33
                                g$t$8273$gDo33
                                (begin '#f (bytevector? g$x$8269$gDo33)))))
                           (boolean? g$x$8269$gDo33)))))
                     (char? g$x$8269$gDo33)))))
               (string? g$x$8269$gDo33)))))
         (number? g$x$8269$gDo33)))))
   (g$strip-annotations$7728$gDo33
     g$strip-annotations$11423$gDo33
     (case-lambda
       ((g$x$8274$gDo33)
        (if (pair? g$x$8274$gDo33)
          (cons
            (g$strip-annotations$7728$gDo33 (car g$x$8274$gDo33))
            (g$strip-annotations$7728$gDo33 (cdr g$x$8274$gDo33)))
          (if (vector? g$x$8274$gDo33)
            (vector-map g$strip-annotations$7728$gDo33 g$x$8274$gDo33)
            (if (annotation? g$x$8274$gDo33)
              (annotation-stripped g$x$8274$gDo33)
              g$x$8274$gDo33))))))
   (g$strip$7729$gDo33
     g$strip$11424$gDo33
     (case-lambda
       ((g$x$8275$gDo33 g$m*$8276$gDo33)
        (if (g$top-marked?$7657$gDo33 g$m*$8276$gDo33)
          (if ((case-lambda
                 ((g$t$8277$gDo33)
                  (if g$t$8277$gDo33
                    g$t$8277$gDo33
                    ((case-lambda
                       ((g$t$8278$gDo33)
                        (if g$t$8278$gDo33
                          g$t$8278$gDo33
                          (begin
                            '#f
                            (if (vector? g$x$8275$gDo33)
                              (if (> (vector-length g$x$8275$gDo33) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$8275$gDo33 '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$8275$gDo33)
                       (begin '#f (annotation? (car g$x$8275$gDo33)))
                       '#f)))))
               (annotation? g$x$8275$gDo33))
            (g$strip-annotations$7728$gDo33 g$x$8275$gDo33)
            g$x$8275$gDo33)
          ((letrec ((g$f$8279$gDo33
                      (case-lambda
                        ((g$x$8280$gDo33)
                         (if (g$stx?$7691$gDo33 g$x$8280$gDo33)
                           (g$strip$7729$gDo33
                             (g$stx-expr$7693$gDo33 g$x$8280$gDo33)
                             (g$stx-mark*$7694$gDo33 g$x$8280$gDo33))
                           (if (annotation? g$x$8280$gDo33)
                             (annotation-stripped g$x$8280$gDo33)
                             (if (pair? g$x$8280$gDo33)
                               ((case-lambda
                                  ((g$a$8281$gDo33 g$d$8282$gDo33)
                                   (if (if (eq? g$a$8281$gDo33
                                                (car g$x$8280$gDo33))
                                         (begin
                                           '#f
                                           (eq? g$d$8282$gDo33
                                                (cdr g$x$8280$gDo33)))
                                         '#f)
                                     g$x$8280$gDo33
                                     (cons g$a$8281$gDo33 g$d$8282$gDo33))))
                                (g$f$8279$gDo33 (car g$x$8280$gDo33))
                                (g$f$8279$gDo33 (cdr g$x$8280$gDo33)))
                               (if (vector? g$x$8280$gDo33)
                                 ((case-lambda
                                    ((g$old$8283$gDo33)
                                     ((case-lambda
                                        ((g$new$8284$gDo33)
                                         (if (g$for-all$5061$gDo33
                                               eq?
                                               g$old$8283$gDo33
                                               g$new$8284$gDo33)
                                           g$x$8280$gDo33
                                           (list->vector g$new$8284$gDo33))))
                                      (g$map$5063$gDo33
                                        g$f$8279$gDo33
                                        g$old$8283$gDo33))))
                                  (vector->list g$x$8280$gDo33))
                                 g$x$8280$gDo33))))))))
             g$f$8279$gDo33)
           g$x$8275$gDo33)))))
   (g$stx->datum$7730$gDo33
     g$stx->datum$11425$gDo33
     (case-lambda
       ((g$x$8285$gDo33) (g$strip$7729$gDo33 g$x$8285$gDo33 '()))))
   (g$same-marks*?$7731$gDo33
     g$same-marks*?$11426$gDo33
     (case-lambda
       ((g$mark*$8286$gDo33 g$mark**$8287$gDo33 g$si$8288$gDo33)
        (if (null? g$si$8288$gDo33)
          '#f
          (if (g$same-marks?$7721$gDo33
                g$mark*$8286$gDo33
                (vector-ref g$mark**$8287$gDo33 (car g$si$8288$gDo33)))
            (car g$si$8288$gDo33)
            (g$same-marks*?$7731$gDo33
              g$mark*$8286$gDo33
              g$mark**$8287$gDo33
              (cdr g$si$8288$gDo33)))))))
   (g$id->label$7732$gDo33
     g$id->label$11427$gDo33
     (case-lambda
       ((g$id$8289$gDo33)
        ((case-lambda
           ((g$t$8290$gDo33)
            (if g$t$8290$gDo33
              g$t$8290$gDo33
              (begin
                '#f
                ((case-lambda
                   ((g$t$8291$gDo33)
                    (if g$t$8291$gDo33
                      ((case-lambda
                         ((g$env$8292$gDo33)
                          ((case-lambda
                             ((g$rib$8293$gDo33)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7662$gDo33
                                     g$id$8289$gDo33
                                     g$rib$8293$gDo33
                                     '#f)))
                                (case-lambda
                                  ((g$lab$8296$gDo33 g$_loc$8297$gDo33)
                                   ((case-lambda
                                      ((g$_loc$8298$gDo33 g$lab$8299$gDo33)
                                       (begin
                                         (g$extend-rib!$7682$gDo33
                                           g$rib$8293$gDo33
                                           g$id$8289$gDo33
                                           g$lab$8299$gDo33
                                           '#t)
                                         g$lab$8299$gDo33)))
                                    g$_loc$8297$gDo33
                                    g$lab$8296$gDo33))))))
                           (g$interaction-env-rib$8075$gDo33
                             g$env$8292$gDo33))))
                       g$t$8291$gDo33)
                      '#f)))
                 (g$top-level-context$8117$gDo33))))))
         (g$id->real-label$7733$gDo33 g$id$8289$gDo33)))))
   (g$id->real-label$7733$gDo33
     g$id->real-label$11428$gDo33
     (case-lambda
       ((g$id$8300$gDo33)
        ((case-lambda
           ((g$sym$8301$gDo33)
            ((letrec ((g$search$8302$gDo33
                        (case-lambda
                          ((g$subst*$8303$gDo33 g$mark*$8304$gDo33)
                           (if (null? g$subst*$8303$gDo33)
                             '#f
                             (if (eq? (car g$subst*$8303$gDo33) 'shift)
                               (g$search$8302$gDo33
                                 (cdr g$subst*$8303$gDo33)
                                 (cdr g$mark*$8304$gDo33))
                               ((case-lambda
                                  ((g$rib$8305$gDo33)
                                   ((case-lambda
                                      ((g$t$8306$gDo33)
                                       (if g$t$8306$gDo33
                                         ((case-lambda
                                            ((g$ht$8307$gDo33)
                                             ((case-lambda
                                                ((g$si$8308$gDo33)
                                                 ((case-lambda
                                                    ((g$i$8309$gDo33)
                                                     (if g$i$8309$gDo33
                                                       (vector-ref
                                                         (g$rib-label*$7671$gDo33
                                                           g$rib$8305$gDo33)
                                                         g$i$8309$gDo33)
                                                       (g$search$8302$gDo33
                                                         (cdr g$subst*$8303$gDo33)
                                                         g$mark*$8304$gDo33))))
                                                  (if g$si$8308$gDo33
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7731$gDo33
                                                        g$mark*$8304$gDo33
                                                        (g$rib-mark**$7670$gDo33
                                                          g$rib$8305$gDo33)
                                                        (reverse
                                                          g$si$8308$gDo33)))
                                                    '#f))))
                                              (g$hashtable-ref$5541$gDo33
                                                g$ht$8307$gDo33
                                                g$sym$8301$gDo33
                                                '#f))))
                                          g$t$8306$gDo33)
                                         ((case-lambda
                                            ((g$t$8310$gDo33)
                                             (if g$t$8310$gDo33
                                               g$t$8310$gDo33
                                               (begin
                                                 '#f
                                                 ((letrec ((g$f$8311$gDo33
                                                             (case-lambda
                                                               ((g$sym*$8312$gDo33
                                                                  g$mark**$8313$gDo33
                                                                  g$label*$8314$gDo33)
                                                                (if (null?
                                                                      g$sym*$8312$gDo33)
                                                                  (g$search$8302$gDo33
                                                                    (cdr g$subst*$8303$gDo33)
                                                                    g$mark*$8304$gDo33)
                                                                  (if (if (eq? (car g$sym*$8312$gDo33)
                                                                               g$sym$8301$gDo33)
                                                                        (begin
                                                                          '#f
                                                                          (g$same-marks?$7721$gDo33
                                                                            (car g$mark**$8313$gDo33)
                                                                            g$mark*$8304$gDo33))
                                                                        '#f)
                                                                    (car g$label*$8314$gDo33)
                                                                    (g$f$8311$gDo33
                                                                      (cdr g$sym*$8312$gDo33)
                                                                      (cdr g$mark**$8313$gDo33)
                                                                      (cdr g$label*$8314$gDo33))))))))
                                                    g$f$8311$gDo33)
                                                  (g$rib-sym*$7669$gDo33
                                                    g$rib$8305$gDo33)
                                                  (g$rib-mark**$7670$gDo33
                                                    g$rib$8305$gDo33)
                                                  (g$rib-label*$7671$gDo33
                                                    g$rib$8305$gDo33))))))
                                          (g$find-label$7681$gDo33
                                            g$rib$8305$gDo33
                                            g$sym$8301$gDo33
                                            g$mark*$8304$gDo33)))))
                                    (g$rib-sealed/freq$7672$gDo33
                                      g$rib$8305$gDo33))))
                                (car g$subst*$8303$gDo33))))))))
               g$search$8302$gDo33)
             (g$stx-subst*$7695$gDo33 g$id$8300$gDo33)
             (g$stx-mark*$7694$gDo33 g$id$8300$gDo33))))
         (g$id->sym$7720$gDo33 g$id$8300$gDo33)))))
   (g$label->binding$7734$gDo33
     g$label->binding$11429$gDo33
     (case-lambda
       ((g$x$8315$gDo33 g$r$8316$gDo33)
        ((case-lambda
           ((g$t$8317$gDo33)
            (if g$t$8317$gDo33
              ((case-lambda
                 ((g$b$8318$gDo33)
                  (if (if (pair? g$b$8318$gDo33)
                        (begin '#f (eq? (car g$b$8318$gDo33) '$core-rtd))
                        '#f)
                    (cons
                      '$rtd
                      (g$map$5063$gDo33
                        g$bless$7960$gDo33
                        (cdr g$b$8318$gDo33)))
                    (if (if (pair? g$b$8318$gDo33)
                          (begin '#f (eq? (car g$b$8318$gDo33) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$8319$gDo33 g$loc$8320$gDo33)
                          (cons '$rtd (symbol-value g$loc$8320$gDo33))))
                       (g$cadr$5264$gDo33 g$b$8318$gDo33)
                       (g$cddr$5266$gDo33 g$b$8318$gDo33))
                      g$b$8318$gDo33))))
               g$t$8317$gDo33)
              ((case-lambda
                 ((g$t$8321$gDo33)
                  (if g$t$8321$gDo33
                    (cdr g$t$8321$gDo33)
                    ((case-lambda
                       ((g$t$8322$gDo33)
                        (if g$t$8322$gDo33
                          ((case-lambda
                             ((g$env$8323$gDo33)
                              ((case-lambda
                                 ((g$t$8324$gDo33)
                                  (if g$t$8324$gDo33
                                    ((case-lambda
                                       ((g$p$8325$gDo33)
                                        (g$cons*$5065$gDo33
                                          'lexical
                                          (cdr g$p$8325$gDo33)
                                          '#f)))
                                     g$t$8324$gDo33)
                                    '(displaced-lexical . #f))))
                               (g$assq$5051$gDo33
                                 g$x$8315$gDo33
                                 (g$interaction-env-locs$8077$gDo33
                                   g$env$8323$gDo33)))))
                           g$t$8322$gDo33)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$8117$gDo33)))))
               (g$assq$5051$gDo33 g$x$8315$gDo33 g$r$8316$gDo33)))))
         (g$imported-label->binding$7528$gDo33 g$x$8315$gDo33)))))
   (g$make-binding$7735$gDo33 g$make-binding$11430$gDo33 cons)
   (g$binding-type$7736$gDo33 g$binding-type$11431$gDo33 car)
   (g$binding-value$7737$gDo33 g$binding-value$11432$gDo33 cdr)
   (g$raise-unbound-error$7738$gDo33
     g$raise-unbound-error$11433$gDo33
     (case-lambda
       ((g$id$8326$gDo33)
        (g$syntax-violation*$8108$gDo33
          '#f
          '"unbound identifier"
          g$id$8326$gDo33
          (g$make-undefined-violation$5887$gDo33)))))
   (g$syntax-type$7739$gDo33
     g$syntax-type$11434$gDo33
     (case-lambda
       ((g$e$8327$gDo33 g$r$8328$gDo33)
        (if (g$id?$7719$gDo33 g$e$8327$gDo33)
          ((case-lambda
             ((g$id$8329$gDo33)
              ((case-lambda
                 ((g$label$8330$gDo33)
                  ((case-lambda
                     ((g$b$8331$gDo33)
                      ((case-lambda
                         ((g$type$8332$gDo33)
                          (begin
                            (if (not g$label$8330$gDo33)
                              (g$raise-unbound-error$7738$gDo33 g$id$8329$gDo33)
                              (void))
                            ((case-lambda
                               ((g$t$8333$gDo33)
                                (if (g$memv$5056$gDo33
                                      g$t$8333$gDo33
                                      '(lexical
                                         core-prim
                                         macro
                                         macro!
                                         global
                                         local-macro
                                         local-macro!
                                         global-macro
                                         global-macro!
                                         displaced-lexical
                                         syntax
                                         import
                                         export
                                         $module
                                         $core-rtd
                                         library
                                         mutable))
                                  (values
                                    g$type$8332$gDo33
                                    (g$binding-value$7737$gDo33 g$b$8331$gDo33)
                                    g$id$8329$gDo33)
                                  (values 'other '#f '#f))))
                             g$type$8332$gDo33))))
                       (g$binding-type$7736$gDo33 g$b$8331$gDo33))))
                   (g$label->binding$7734$gDo33
                     g$label$8330$gDo33
                     g$r$8328$gDo33))))
               (g$id->label$7732$gDo33 g$id$8329$gDo33))))
           g$e$8327$gDo33)
          (if (g$syntax-pair?$7712$gDo33 g$e$8327$gDo33)
            ((case-lambda
               ((g$id$8334$gDo33)
                (if (g$id?$7719$gDo33 g$id$8334$gDo33)
                  ((case-lambda
                     ((g$label$8335$gDo33)
                      ((case-lambda
                         ((g$b$8336$gDo33)
                          ((case-lambda
                             ((g$type$8337$gDo33)
                              (begin
                                (if (not g$label$8335$gDo33)
                                  (g$raise-unbound-error$7738$gDo33
                                    g$id$8334$gDo33)
                                  (void))
                                ((case-lambda
                                   ((g$t$8338$gDo33)
                                    (if (g$memv$5056$gDo33
                                          g$t$8338$gDo33
                                          '(define define-syntax
                                             core-macro
                                             begin
                                             macro
                                             macro!
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             module
                                             library
                                             set!
                                             let-syntax
                                             letrec-syntax
                                             import
                                             export
                                             $core-rtd))
                                      (values
                                        g$type$8337$gDo33
                                        (g$binding-value$7737$gDo33
                                          g$b$8336$gDo33)
                                        g$id$8334$gDo33)
                                      (values 'call '#f '#f))))
                                 g$type$8337$gDo33))))
                           (g$binding-type$7736$gDo33 g$b$8336$gDo33))))
                       (g$label->binding$7734$gDo33
                         g$label$8335$gDo33
                         g$r$8328$gDo33))))
                   (g$id->label$7732$gDo33 g$id$8334$gDo33))
                  (values 'call '#f '#f))))
             (g$syntax-car$7716$gDo33 g$e$8327$gDo33))
            ((case-lambda
               ((g$d$8339$gDo33)
                (if (g$self-evaluating?$7727$gDo33 g$d$8339$gDo33)
                  (values 'constant g$d$8339$gDo33 '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7730$gDo33 g$e$8327$gDo33)))))))
   (g$sanitize-binding$7747$gDo33
     g$sanitize-binding$11435$gDo33
     (case-lambda
       ((g$x$8340$gDo33 g$src$8341$gDo33)
        (if (procedure? g$x$8340$gDo33)
          (g$cons*$5065$gDo33 'local-macro g$x$8340$gDo33 g$src$8341$gDo33)
          (if (if (pair? g$x$8340$gDo33)
                (if (eq? (car g$x$8340$gDo33) 'macro!)
                  (begin '#f (procedure? (cdr g$x$8340$gDo33)))
                  '#f)
                '#f)
            (g$cons*$5065$gDo33
              'local-macro!
              (cdr g$x$8340$gDo33)
              g$src$8341$gDo33)
            (if (if (pair? g$x$8340$gDo33)
                  (begin '#f (eq? (car g$x$8340$gDo33) '$rtd))
                  '#f)
              g$x$8340$gDo33
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$8340$gDo33)))))))
   (g$make-variable-transformer$7748$gDo33
     g$make-variable-transformer$11436$gDo33
     (case-lambda
       ((g$x$8342$gDo33)
        (if (procedure? g$x$8342$gDo33)
          (cons 'macro! g$x$8342$gDo33)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$8342$gDo33)))))
   (g$variable-transformer?$7749$gDo33
     g$variable-transformer?$11437$gDo33
     (case-lambda
       ((g$x$8343$gDo33)
        (if (pair? g$x$8343$gDo33)
          (if (eq? (car g$x$8343$gDo33) 'macro!)
            (begin '#f (procedure? (cdr g$x$8343$gDo33)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7750$gDo33
     g$variable-transformer-procedure$11438$gDo33
     (case-lambda
       ((g$x$8344$gDo33)
        (if (g$variable-transformer?$7749$gDo33 g$x$8344$gDo33)
          (cdr g$x$8344$gDo33)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$8344$gDo33)))))
   (g$make-eval-transformer$7751$gDo33
     g$make-eval-transformer$11439$gDo33
     (case-lambda
       ((g$x$8345$gDo33)
        (g$sanitize-binding$7747$gDo33
          (eval-core (g$expanded->core$7237$gDo33 g$x$8345$gDo33))
          g$x$8345$gDo33))))
   (g$parse-define$7937$gDo33
     g$parse-define$11440$gDo33
     (case-lambda
       ((g$x$8346$gDo33)
        ((case-lambda
           ((g$t$8347$gDo33)
            ((case-lambda
               ((g$ls/false$8348$gDo33)
                (if (if g$ls/false$8348$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8349$gDo33
                               g$fmls$8350$gDo33
                               g$b$8351$gDo33
                               g$b*$8352$gDo33)
                             (g$id?$7719$gDo33 g$id$8349$gDo33)))
                          g$ls/false$8348$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8353$gDo33
                         g$fmls$8354$gDo33
                         g$b$8355$gDo33
                         g$b*$8356$gDo33)
                       (begin
                         (g$verify-formals$8017$gDo33
                           g$fmls$8354$gDo33
                           g$x$8346$gDo33)
                         (values
                           g$id$8353$gDo33
                           (cons
                             'defun
                             (cons
                               g$fmls$8354$gDo33
                               (cons g$b$8355$gDo33 g$b*$8356$gDo33)))))))
                    g$ls/false$8348$gDo33)
                  ((case-lambda
                     ((g$t$8357$gDo33)
                      ((case-lambda
                         ((g$ls/false$8358$gDo33)
                          (if (if g$ls/false$8358$gDo33
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$8359$gDo33 g$val$8360$gDo33)
                                       (g$id?$7719$gDo33 g$id$8359$gDo33)))
                                    g$ls/false$8358$gDo33))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$8361$gDo33 g$val$8362$gDo33)
                                 (values
                                   g$id$8361$gDo33
                                   (cons 'expr g$val$8362$gDo33))))
                              g$ls/false$8358$gDo33)
                            ((case-lambda
                               ((g$t$8363$gDo33)
                                ((case-lambda
                                   ((g$ls/false$8364$gDo33)
                                    (if (if g$ls/false$8364$gDo33
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$8365$gDo33)
                                                 (g$id?$7719$gDo33
                                                   g$id$8365$gDo33)))
                                              g$ls/false$8364$gDo33))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$8366$gDo33)
                                           (values
                                             g$id$8366$gDo33
                                             (cons
                                               'expr
                                               (g$bless$7960$gDo33 '(void))))))
                                        g$ls/false$8364$gDo33)
                                      (g$syntax-violation$8109$gDo33
                                        '#f
                                        '"invalid syntax"
                                        g$t$8363$gDo33))))
                                 (g$syntax-dispatch$7997$gDo33
                                   g$t$8363$gDo33
                                   '(_ any)))))
                             g$t$8357$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$8357$gDo33
                         '(_ any any)))))
                   g$t$8347$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8347$gDo33
               '(_ (any . any) any . each-any)))))
         g$x$8346$gDo33))))
   (g$parse-define-syntax$7938$gDo33
     g$parse-define-syntax$11441$gDo33
     (case-lambda
       ((g$x$8367$gDo33)
        ((case-lambda
           ((g$t$8368$gDo33)
            ((case-lambda
               ((g$ls/false$8369$gDo33)
                (if (if g$ls/false$8369$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8370$gDo33 g$val$8371$gDo33)
                             (g$id?$7719$gDo33 g$id$8370$gDo33)))
                          g$ls/false$8369$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8372$gDo33 g$val$8373$gDo33)
                       (values g$id$8372$gDo33 g$val$8373$gDo33)))
                    g$ls/false$8369$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8368$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8368$gDo33 '(_ any any)))))
         g$x$8367$gDo33))))
   (g$scheme-stx-hashtable$7939$gDo33
     g$scheme-stx-hashtable$11442$gDo33
     (g$make-eq-hashtable$5538$gDo33))
   (g$scheme-stx$7940$gDo33
     g$scheme-stx$11443$gDo33
     (case-lambda
       ((g$sym$8374$gDo33)
        ((case-lambda
           ((g$t$8375$gDo33)
            (if g$t$8375$gDo33
              g$t$8375$gDo33
              (begin
                '#f
                ((case-lambda
                   ((g$subst$8376$gDo33)
                    ((case-lambda
                       ((g$stx$8377$gDo33)
                        ((case-lambda
                           ((g$stx$8378$gDo33)
                            (begin
                              (g$hashtable-set!$5542$gDo33
                                g$scheme-stx-hashtable$7939$gDo33
                                g$sym$8374$gDo33
                                g$stx$8378$gDo33)
                              g$stx$8378$gDo33)))
                         ((case-lambda
                            ((g$t$8379$gDo33)
                             (if g$t$8379$gDo33
                               ((case-lambda
                                  ((g$x$8380$gDo33)
                                   ((case-lambda
                                      ((g$name$8381$gDo33 g$label$8382$gDo33)
                                       (g$add-subst$7709$gDo33
                                         (g$make-rib$7668$gDo33
                                           (list g$name$8381$gDo33)
                                           (list g$top-mark*$7656$gDo33)
                                           (list g$label$8382$gDo33)
                                           '#f
                                           '#f)
                                         g$stx$8377$gDo33)))
                                    (car g$x$8380$gDo33)
                                    (cdr g$x$8380$gDo33))))
                                g$t$8379$gDo33)
                               g$stx$8377$gDo33)))
                          (g$assq$5051$gDo33
                            g$sym$8374$gDo33
                            g$subst$8376$gDo33)))))
                     (g$make-stx$7692$gDo33
                       g$sym$8374$gDo33
                       g$top-mark*$7656$gDo33
                       '()
                       '()))))
                 (g$library-subst$7486$gDo33
                   (g$find-library-by-name$7522$gDo33
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5541$gDo33
           g$scheme-stx-hashtable$7939$gDo33
           g$sym$8374$gDo33
           '#f)))))
   (g$lexical-var$7941$gDo33 g$lexical-var$11444$gDo33 car)
   (g$lexical-mutable?$7942$gDo33 g$lexical-mutable?$11445$gDo33 cdr)
   (g$set-lexical-mutable!$7943$gDo33
     g$set-lexical-mutable!$11446$gDo33
     set-cdr!)
   (g$add-lexical$7944$gDo33
     g$add-lexical$11447$gDo33
     (case-lambda
       ((g$lab$8383$gDo33 g$lex$8384$gDo33 g$r$8385$gDo33)
        (cons
          (g$cons*$5065$gDo33 g$lab$8383$gDo33 'lexical g$lex$8384$gDo33 '#f)
          g$r$8385$gDo33))))
   (g$add-lexicals$7945$gDo33
     g$add-lexicals$11448$gDo33
     (case-lambda
       ((g$lab*$8386$gDo33 g$lex*$8387$gDo33 g$r$8388$gDo33)
        (if (null? g$lab*$8386$gDo33)
          g$r$8388$gDo33
          (g$add-lexicals$7945$gDo33
            (cdr g$lab*$8386$gDo33)
            (cdr g$lex*$8387$gDo33)
            (g$add-lexical$7944$gDo33
              (car g$lab*$8386$gDo33)
              (car g$lex*$8387$gDo33)
              g$r$8388$gDo33))))))
   (g$letrec-helper$7946$gDo33
     g$letrec-helper$11449$gDo33
     (case-lambda
       ((g$e$8389$gDo33 g$r$8390$gDo33 g$mr$8391$gDo33 g$build$8392$gDo33)
        ((case-lambda
           ((g$t$8393$gDo33)
            ((case-lambda
               ((g$ls/false$8394$gDo33)
                (if g$ls/false$8394$gDo33
                  (apply
                    (case-lambda
                      ((g$lhs*$8395$gDo33
                         g$rhs*$8396$gDo33
                         g$b$8397$gDo33
                         g$b*$8398$gDo33)
                       (if (not (g$valid-bound-ids?$7724$gDo33
                                  g$lhs*$8395$gDo33))
                         (g$invalid-fmls-error$7962$gDo33
                           g$e$8389$gDo33
                           g$lhs*$8395$gDo33)
                         ((case-lambda
                            ((g$lex*$8399$gDo33 g$lab*$8400$gDo33)
                             ((case-lambda
                                ((g$rib$8401$gDo33 g$r$8402$gDo33)
                                 ((case-lambda
                                    ((g$body$8403$gDo33 g$rhs*$8404$gDo33)
                                     (g$build$8392$gDo33
                                       '#f
                                       g$lex*$8399$gDo33
                                       g$rhs*$8404$gDo33
                                       g$body$8403$gDo33)))
                                  (g$chi-internal$8026$gDo33
                                    (g$add-subst$7709$gDo33
                                      g$rib$8401$gDo33
                                      (cons g$b$8397$gDo33 g$b*$8398$gDo33))
                                    g$r$8402$gDo33
                                    g$mr$8391$gDo33)
                                  (g$chi-expr*$8013$gDo33
                                    (g$map$5063$gDo33
                                      (case-lambda
                                        ((g$x$8405$gDo33)
                                         (g$add-subst$7709$gDo33
                                           g$rib$8401$gDo33
                                           g$x$8405$gDo33)))
                                      g$rhs*$8396$gDo33)
                                    g$r$8402$gDo33
                                    g$mr$8391$gDo33))))
                              (g$make-full-rib$7687$gDo33
                                g$lhs*$8395$gDo33
                                g$lab*$8400$gDo33)
                              (g$add-lexicals$7945$gDo33
                                g$lab*$8400$gDo33
                                g$lex*$8399$gDo33
                                g$r$8390$gDo33))))
                          (g$map$5063$gDo33
                            g$gen-lexical$7658$gDo33
                            g$lhs*$8395$gDo33)
                          (g$map$5063$gDo33
                            g$gen-label$7660$gDo33
                            g$lhs*$8395$gDo33)))))
                    g$ls/false$8394$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8393$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8393$gDo33
               '(_ #(each (any any)) any . each-any)))))
         g$e$8389$gDo33))))
   (g$letrec-transformer$7947$gDo33
     g$letrec-transformer$11450$gDo33
     (case-lambda
       ((g$e$8406$gDo33 g$r$8407$gDo33 g$mr$8408$gDo33)
        (g$letrec-helper$7946$gDo33
          g$e$8406$gDo33
          g$r$8407$gDo33
          g$mr$8408$gDo33
          g$build-letrec$7650$gDo33))))
   (g$letrec*-transformer$7948$gDo33
     g$letrec*-transformer$11451$gDo33
     (case-lambda
       ((g$e$8409$gDo33 g$r$8410$gDo33 g$mr$8411$gDo33)
        (g$letrec-helper$7946$gDo33
          g$e$8409$gDo33
          g$r$8410$gDo33
          g$mr$8411$gDo33
          g$build-letrec*$7651$gDo33))))
   (g$fluid-let-syntax-transformer$7949$gDo33
     g$fluid-let-syntax-transformer$11452$gDo33
     (case-lambda
       ((g$e$8412$gDo33 g$r$8413$gDo33 g$mr$8414$gDo33)
        (letrec* ((g$lookup$8415$gDo33
                    (case-lambda
                      ((g$x$8425$gDo33)
                       ((case-lambda
                          ((g$t$8426$gDo33)
                           (if g$t$8426$gDo33
                             g$t$8426$gDo33
                             (begin
                               '#f
                               (g$syntax-violation$8109$gDo33
                                 '#f
                                 '"unbound identifier"
                                 g$e$8412$gDo33
                                 g$x$8425$gDo33)))))
                        (g$id->label$7732$gDo33 g$x$8425$gDo33))))))
          ((case-lambda
             ((g$t$8416$gDo33)
              ((case-lambda
                 ((g$ls/false$8417$gDo33)
                  (if g$ls/false$8417$gDo33
                    (apply
                      (case-lambda
                        ((g$lhs*$8418$gDo33
                           g$rhs*$8419$gDo33
                           g$b$8420$gDo33
                           g$b*$8421$gDo33)
                         (if (not (g$valid-bound-ids?$7724$gDo33
                                    g$lhs*$8418$gDo33))
                           (g$invalid-fmls-error$7962$gDo33
                             g$e$8412$gDo33
                             g$lhs*$8418$gDo33)
                           ((case-lambda
                              ((g$lab*$8422$gDo33 g$rhs*$8423$gDo33)
                               (g$chi-internal$8026$gDo33
                                 (cons g$b$8420$gDo33 g$b*$8421$gDo33)
                                 (append
                                   (g$map$5063$gDo33
                                     cons
                                     g$lab*$8422$gDo33
                                     g$rhs*$8423$gDo33)
                                   g$r$8413$gDo33)
                                 (append
                                   (g$map$5063$gDo33
                                     cons
                                     g$lab*$8422$gDo33
                                     g$rhs*$8423$gDo33)
                                   g$mr$8414$gDo33))))
                            (g$map$5063$gDo33
                              g$lookup$8415$gDo33
                              g$lhs*$8418$gDo33)
                            (g$map$5063$gDo33
                              (case-lambda
                                ((g$x$8424$gDo33)
                                 (g$make-eval-transformer$7751$gDo33
                                   (g$expand-transformer$8042$gDo33
                                     g$x$8424$gDo33
                                     g$mr$8414$gDo33))))
                              g$rhs*$8419$gDo33)))))
                      g$ls/false$8417$gDo33)
                    (g$syntax-violation$8109$gDo33
                      '#f
                      '"invalid syntax"
                      g$t$8416$gDo33))))
               (g$syntax-dispatch$7997$gDo33
                 g$t$8416$gDo33
                 '(_ #(each (any any)) any . each-any)))))
           g$e$8412$gDo33)))))
   (g$type-descriptor-transformer$7950$gDo33
     g$type-descriptor-transformer$11453$gDo33
     (case-lambda
       ((g$e$8427$gDo33 g$r$8428$gDo33 g$mr$8429$gDo33)
        ((case-lambda
           ((g$t$8430$gDo33)
            ((case-lambda
               ((g$ls/false$8431$gDo33)
                (if (if g$ls/false$8431$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8432$gDo33)
                             (g$id?$7719$gDo33 g$id$8432$gDo33)))
                          g$ls/false$8431$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8433$gDo33)
                       ((case-lambda
                          ((g$lab$8434$gDo33)
                           ((case-lambda
                              ((g$b$8435$gDo33)
                               ((case-lambda
                                  ((g$type$8436$gDo33)
                                   (begin
                                     (if (not g$lab$8434$gDo33)
                                       (g$raise-unbound-error$7738$gDo33
                                         g$id$8433$gDo33)
                                       (void))
                                     (if (not (if (eq? g$type$8436$gDo33 '$rtd)
                                                (begin
                                                  '#f
                                                  (not (list?
                                                         (g$binding-value$7737$gDo33
                                                           g$b$8435$gDo33))))
                                                '#f))
                                       (g$syntax-violation$8109$gDo33
                                         '#f
                                         '"not a record type"
                                         g$e$8427$gDo33)
                                       (void))
                                     (list
                                       'quote
                                       (g$binding-value$7737$gDo33
                                         g$b$8435$gDo33)))))
                                (g$binding-type$7736$gDo33 g$b$8435$gDo33))))
                            (g$label->binding$7734$gDo33
                              g$lab$8434$gDo33
                              g$r$8428$gDo33))))
                        (g$id->label$7732$gDo33 g$id$8433$gDo33))))
                    g$ls/false$8431$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8430$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8430$gDo33 '(_ any)))))
         g$e$8427$gDo33))))
   (g$record-type-descriptor-transformer$7951$gDo33
     g$record-type-descriptor-transformer$11454$gDo33
     (case-lambda
       ((g$e$8437$gDo33 g$r$8438$gDo33 g$mr$8439$gDo33)
        ((case-lambda
           ((g$t$8440$gDo33)
            ((case-lambda
               ((g$ls/false$8441$gDo33)
                (if (if g$ls/false$8441$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8442$gDo33)
                             (g$id?$7719$gDo33 g$id$8442$gDo33)))
                          g$ls/false$8441$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8443$gDo33)
                       ((case-lambda
                          ((g$lab$8444$gDo33)
                           ((case-lambda
                              ((g$b$8445$gDo33)
                               ((case-lambda
                                  ((g$type$8446$gDo33)
                                   (begin
                                     (if (not g$lab$8444$gDo33)
                                       (g$raise-unbound-error$7738$gDo33
                                         g$id$8443$gDo33)
                                       (void))
                                     (if (not (if (eq? g$type$8446$gDo33 '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7737$gDo33
                                                      g$b$8445$gDo33)))
                                                '#f))
                                       (g$syntax-violation$8109$gDo33
                                         '#f
                                         '"not a record type"
                                         g$e$8437$gDo33)
                                       (void))
                                     (g$chi-expr$8015$gDo33
                                       (car (g$binding-value$7737$gDo33
                                              g$b$8445$gDo33))
                                       g$r$8438$gDo33
                                       g$mr$8439$gDo33))))
                                (g$binding-type$7736$gDo33 g$b$8445$gDo33))))
                            (g$label->binding$7734$gDo33
                              g$lab$8444$gDo33
                              g$r$8438$gDo33))))
                        (g$id->label$7732$gDo33 g$id$8443$gDo33))))
                    g$ls/false$8441$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8440$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8440$gDo33 '(_ any)))))
         g$e$8437$gDo33))))
   (g$record-constructor-descriptor-transformer$7952$gDo33
     g$record-constructor-descriptor-transformer$11455$gDo33
     (case-lambda
       ((g$e$8447$gDo33 g$r$8448$gDo33 g$mr$8449$gDo33)
        ((case-lambda
           ((g$t$8450$gDo33)
            ((case-lambda
               ((g$ls/false$8451$gDo33)
                (if (if g$ls/false$8451$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$8452$gDo33)
                             (g$id?$7719$gDo33 g$id$8452$gDo33)))
                          g$ls/false$8451$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$8453$gDo33)
                       ((case-lambda
                          ((g$lab$8454$gDo33)
                           ((case-lambda
                              ((g$b$8455$gDo33)
                               ((case-lambda
                                  ((g$type$8456$gDo33)
                                   (begin
                                     (if (not g$lab$8454$gDo33)
                                       (g$raise-unbound-error$7738$gDo33
                                         g$id$8453$gDo33)
                                       (void))
                                     (if (not (if (eq? g$type$8456$gDo33 '$rtd)
                                                (begin
                                                  '#f
                                                  (list?
                                                    (g$binding-value$7737$gDo33
                                                      g$b$8455$gDo33)))
                                                '#f))
                                       (g$syntax-violation$8109$gDo33
                                         '#f
                                         '"invalid type"
                                         g$e$8447$gDo33)
                                       (void))
                                     (g$chi-expr$8015$gDo33
                                       (g$cadr$5264$gDo33
                                         (g$binding-value$7737$gDo33
                                           g$b$8455$gDo33))
                                       g$r$8448$gDo33
                                       g$mr$8449$gDo33))))
                                (g$binding-type$7736$gDo33 g$b$8455$gDo33))))
                            (g$label->binding$7734$gDo33
                              g$lab$8454$gDo33
                              g$r$8448$gDo33))))
                        (g$id->label$7732$gDo33 g$id$8453$gDo33))))
                    g$ls/false$8451$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8450$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8450$gDo33 '(_ any)))))
         g$e$8447$gDo33))))
   (g$when-macro$7953$gDo33
     g$when-macro$11456$gDo33
     (case-lambda
       ((g$e$8457$gDo33)
        ((case-lambda
           ((g$t$8458$gDo33)
            ((case-lambda
               ((g$ls/false$8459$gDo33)
                (if g$ls/false$8459$gDo33
                  (apply
                    (case-lambda
                      ((g$test$8460$gDo33 g$e$8461$gDo33 g$e*$8462$gDo33)
                       (g$bless$7960$gDo33
                         (list
                           'if
                           g$test$8460$gDo33
                           (cons
                             'begin
                             (cons g$e$8461$gDo33 g$e*$8462$gDo33))))))
                    g$ls/false$8459$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8458$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8458$gDo33
               '(_ any any . each-any)))))
         g$e$8457$gDo33))))
   (g$unless-macro$7954$gDo33
     g$unless-macro$11457$gDo33
     (case-lambda
       ((g$e$8463$gDo33)
        ((case-lambda
           ((g$t$8464$gDo33)
            ((case-lambda
               ((g$ls/false$8465$gDo33)
                (if g$ls/false$8465$gDo33
                  (apply
                    (case-lambda
                      ((g$test$8466$gDo33 g$e$8467$gDo33 g$e*$8468$gDo33)
                       (g$bless$7960$gDo33
                         (list
                           'if
                           (list 'not g$test$8466$gDo33)
                           (cons
                             'begin
                             (cons g$e$8467$gDo33 g$e*$8468$gDo33))))))
                    g$ls/false$8465$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8464$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8464$gDo33
               '(_ any any . each-any)))))
         g$e$8463$gDo33))))
   (g$if-transformer$7955$gDo33
     g$if-transformer$11458$gDo33
     (case-lambda
       ((g$e$8469$gDo33 g$r$8470$gDo33 g$mr$8471$gDo33)
        ((case-lambda
           ((g$t$8472$gDo33)
            ((case-lambda
               ((g$ls/false$8473$gDo33)
                (if g$ls/false$8473$gDo33
                  (apply
                    (case-lambda
                      ((g$e0$8474$gDo33 g$e1$8475$gDo33 g$e2$8476$gDo33)
                       (list
                         'if
                         (g$chi-expr$8015$gDo33
                           g$e0$8474$gDo33
                           g$r$8470$gDo33
                           g$mr$8471$gDo33)
                         (g$chi-expr$8015$gDo33
                           g$e1$8475$gDo33
                           g$r$8470$gDo33
                           g$mr$8471$gDo33)
                         (g$chi-expr$8015$gDo33
                           g$e2$8476$gDo33
                           g$r$8470$gDo33
                           g$mr$8471$gDo33))))
                    g$ls/false$8473$gDo33)
                  ((case-lambda
                     ((g$t$8477$gDo33)
                      ((case-lambda
                         ((g$ls/false$8478$gDo33)
                          (if g$ls/false$8478$gDo33
                            (apply
                              (case-lambda
                                ((g$e0$8479$gDo33 g$e1$8480$gDo33)
                                 (list
                                   'if
                                   (g$chi-expr$8015$gDo33
                                     g$e0$8479$gDo33
                                     g$r$8470$gDo33
                                     g$mr$8471$gDo33)
                                   (g$chi-expr$8015$gDo33
                                     g$e1$8480$gDo33
                                     g$r$8470$gDo33
                                     g$mr$8471$gDo33)
                                   (g$build-void$7649$gDo33))))
                              g$ls/false$8478$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$8477$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$8477$gDo33
                         '(_ any any)))))
                   g$t$8472$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8472$gDo33 '(_ any any any)))))
         g$e$8469$gDo33))))
   (g$case-macro$7956$gDo33
     g$case-macro$11459$gDo33
     (case-lambda
       ((g$e$8481$gDo33)
        (letrec* ((g$build-last$8482$gDo33
                    (case-lambda
                      ((g$cls$8502$gDo33)
                       ((case-lambda
                          ((g$t$8503$gDo33)
                           ((case-lambda
                              ((g$ls/false$8504$gDo33)
                               (if g$ls/false$8504$gDo33
                                 (apply
                                   (case-lambda
                                     ((g$e$8505$gDo33 g$e*$8506$gDo33)
                                      (cons
                                        'begin
                                        (cons g$e$8505$gDo33 g$e*$8506$gDo33))))
                                   g$ls/false$8504$gDo33)
                                 ((case-lambda
                                    ((g$t$8507$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$8508$gDo33)
                                         (if g$ls/false$8508$gDo33
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$8483$gDo33
                                                  g$cls$8502$gDo33
                                                  '(if #f #f))))
                                             g$ls/false$8508$gDo33)
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$t$8507$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$8507$gDo33
                                        '_))))
                                  g$t$8503$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$8503$gDo33
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$8502$gDo33))))
                  (g$build-one$8483$gDo33
                    (case-lambda
                      ((g$cls$8495$gDo33 g$k$8496$gDo33)
                       ((case-lambda
                          ((g$t$8497$gDo33)
                           ((case-lambda
                              ((g$ls/false$8498$gDo33)
                               (if g$ls/false$8498$gDo33
                                 (apply
                                   (case-lambda
                                     ((g$d*$8499$gDo33
                                        g$e$8500$gDo33
                                        g$e*$8501$gDo33)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$8499$gDo33))
                                        (cons
                                          'begin
                                          (cons g$e$8500$gDo33 g$e*$8501$gDo33))
                                        g$k$8496$gDo33)))
                                   g$ls/false$8498$gDo33)
                                 (g$syntax-violation$8109$gDo33
                                   '#f
                                   '"invalid syntax"
                                   g$t$8497$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$8497$gDo33
                              '(each-any any . each-any)))))
                        g$cls$8495$gDo33)))))
          ((case-lambda
             ((g$t$8484$gDo33)
              ((case-lambda
                 ((g$ls/false$8485$gDo33)
                  (if g$ls/false$8485$gDo33
                    (apply
                      (case-lambda
                        ((g$expr$8486$gDo33)
                         (g$bless$7960$gDo33
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$8486$gDo33))
                               '((if #f #f)))))))
                      g$ls/false$8485$gDo33)
                    ((case-lambda
                       ((g$t$8487$gDo33)
                        ((case-lambda
                           ((g$ls/false$8488$gDo33)
                            (if g$ls/false$8488$gDo33
                              (apply
                                (case-lambda
                                  ((g$expr$8489$gDo33
                                     g$cls$8490$gDo33
                                     g$cls*$8491$gDo33)
                                   (g$bless$7960$gDo33
                                     (list
                                       'let
                                       (list (list 't g$expr$8489$gDo33))
                                       ((letrec ((g$f$8492$gDo33
                                                   (case-lambda
                                                     ((g$cls$8493$gDo33
                                                        g$cls*$8494$gDo33)
                                                      (if (null?
                                                            g$cls*$8494$gDo33)
                                                        (g$build-last$8482$gDo33
                                                          g$cls$8493$gDo33)
                                                        (g$build-one$8483$gDo33
                                                          g$cls$8493$gDo33
                                                          (g$f$8492$gDo33
                                                            (car g$cls*$8494$gDo33)
                                                            (cdr g$cls*$8494$gDo33))))))))
                                          g$f$8492$gDo33)
                                        g$cls$8490$gDo33
                                        g$cls*$8491$gDo33)))))
                                g$ls/false$8488$gDo33)
                              (g$syntax-violation$8109$gDo33
                                '#f
                                '"invalid syntax"
                                g$t$8487$gDo33))))
                         (g$syntax-dispatch$7997$gDo33
                           g$t$8487$gDo33
                           '(_ any any . each-any)))))
                     g$t$8484$gDo33))))
               (g$syntax-dispatch$7997$gDo33 g$t$8484$gDo33 '(_ any)))))
           g$e$8481$gDo33)))))
   (g$quote-transformer$7957$gDo33
     g$quote-transformer$11460$gDo33
     (case-lambda
       ((g$e$8509$gDo33 g$r$8510$gDo33 g$mr$8511$gDo33)
        ((case-lambda
           ((g$t$8512$gDo33)
            ((case-lambda
               ((g$ls/false$8513$gDo33)
                (if g$ls/false$8513$gDo33
                  (apply
                    (case-lambda
                      ((g$datum$8514$gDo33)
                       (list
                         'quote
                         (g$stx->datum$7730$gDo33 g$datum$8514$gDo33))))
                    g$ls/false$8513$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8512$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8512$gDo33 '(_ any)))))
         g$e$8509$gDo33))))
   (g$case-lambda-transformer$7958$gDo33
     g$case-lambda-transformer$11461$gDo33
     (case-lambda
       ((g$e$8515$gDo33 g$r$8516$gDo33 g$mr$8517$gDo33)
        ((case-lambda
           ((g$t$8518$gDo33)
            ((case-lambda
               ((g$ls/false$8519$gDo33)
                (if g$ls/false$8519$gDo33
                  (apply
                    (case-lambda
                      ((g$fmls*$8520$gDo33 g$b*$8521$gDo33 g$b**$8522$gDo33)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$8019$gDo33
                              g$e$8515$gDo33
                              g$fmls*$8520$gDo33
                              (g$map$5063$gDo33
                                cons
                                g$b*$8521$gDo33
                                g$b**$8522$gDo33)
                              g$r$8516$gDo33
                              g$mr$8517$gDo33)))
                         (case-lambda
                           ((g$fmls*$8525$gDo33 g$body*$8526$gDo33)
                            ((case-lambda
                               ((g$body*$8527$gDo33 g$fmls*$8528$gDo33)
                                (g$build-case-lambda$7646$gDo33
                                  '#f
                                  g$fmls*$8528$gDo33
                                  g$body*$8527$gDo33)))
                             g$body*$8526$gDo33
                             g$fmls*$8525$gDo33))))))
                    g$ls/false$8519$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8518$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8518$gDo33
               '(_ . #(each (any any . each-any)))))))
         g$e$8515$gDo33))))
   (g$lambda-transformer$7959$gDo33
     g$lambda-transformer$11462$gDo33
     (case-lambda
       ((g$e$8529$gDo33 g$r$8530$gDo33 g$mr$8531$gDo33)
        ((case-lambda
           ((g$t$8532$gDo33)
            ((case-lambda
               ((g$ls/false$8533$gDo33)
                (if g$ls/false$8533$gDo33
                  (apply
                    (case-lambda
                      ((g$fmls$8534$gDo33 g$b$8535$gDo33 g$b*$8536$gDo33)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$8018$gDo33
                              g$e$8529$gDo33
                              g$fmls$8534$gDo33
                              (cons g$b$8535$gDo33 g$b*$8536$gDo33)
                              g$r$8530$gDo33
                              g$mr$8531$gDo33)))
                         (case-lambda
                           ((g$fmls$8539$gDo33 g$body$8540$gDo33)
                            ((case-lambda
                               ((g$body$8541$gDo33 g$fmls$8542$gDo33)
                                (g$build-lambda$7645$gDo33
                                  '#f
                                  g$fmls$8542$gDo33
                                  g$body$8541$gDo33)))
                             g$body$8540$gDo33
                             g$fmls$8539$gDo33))))))
                    g$ls/false$8533$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8532$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8532$gDo33
               '(_ any any . each-any)))))
         g$e$8529$gDo33))))
   (g$bless$7960$gDo33
     g$bless$11463$gDo33
     (case-lambda
       ((g$x$8543$gDo33)
        (g$mkstx$7707$gDo33
          ((letrec ((g$f$8544$gDo33
                      (case-lambda
                        ((g$x$8545$gDo33)
                         (if (g$stx?$7691$gDo33 g$x$8545$gDo33)
                           g$x$8545$gDo33
                           (if (pair? g$x$8545$gDo33)
                             (cons
                               (g$f$8544$gDo33 (car g$x$8545$gDo33))
                               (g$f$8544$gDo33 (cdr g$x$8545$gDo33)))
                             (if (symbol? g$x$8545$gDo33)
                               (g$scheme-stx$7940$gDo33 g$x$8545$gDo33)
                               (if (vector? g$x$8545$gDo33)
                                 (vector-map g$f$8544$gDo33 g$x$8545$gDo33)
                                 g$x$8545$gDo33))))))))
             g$f$8544$gDo33)
           g$x$8543$gDo33)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7961$gDo33
     g$with-syntax-macro$11464$gDo33
     (case-lambda
       ((g$e$8546$gDo33)
        ((case-lambda
           ((g$t$8547$gDo33)
            ((case-lambda
               ((g$ls/false$8548$gDo33)
                (if g$ls/false$8548$gDo33
                  (apply
                    (case-lambda
                      ((g$pat*$8549$gDo33
                         g$expr*$8550$gDo33
                         g$b$8551$gDo33
                         g$b*$8552$gDo33)
                       ((case-lambda
                          ((g$idn*$8553$gDo33)
                           (begin
                             (g$verify-formals$8017$gDo33
                               (g$map$5063$gDo33 car g$idn*$8553$gDo33)
                               g$e$8546$gDo33)
                             ((case-lambda
                                ((g$t*$8554$gDo33)
                                 (g$bless$7960$gDo33
                                   (list
                                     'let
                                     (g$map$5063$gDo33
                                       list
                                       g$t*$8554$gDo33
                                       g$expr*$8550$gDo33)
                                     ((letrec ((g$f$8555$gDo33
                                                 (case-lambda
                                                   ((g$pat*$8556$gDo33
                                                      g$t*$8557$gDo33)
                                                    (if (null?
                                                          g$pat*$8556$gDo33)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$8551$gDo33
                                                            g$b*$8552$gDo33)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$8557$gDo33)
                                                        '()
                                                        (list
                                                          (car g$pat*$8556$gDo33)
                                                          (g$f$8555$gDo33
                                                            (cdr g$pat*$8556$gDo33)
                                                            (cdr g$t*$8557$gDo33)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$8556$gDo33))
                                                            (car g$t*$8557$gDo33)))))))))
                                        g$f$8555$gDo33)
                                      g$pat*$8549$gDo33
                                      g$t*$8554$gDo33)))))
                              (g$generate-temporaries$8099$gDo33
                                g$expr*$8550$gDo33)))))
                        ((letrec ((g$f$8558$gDo33
                                    (case-lambda
                                      ((g$pat*$8559$gDo33)
                                       (if (null? g$pat*$8559$gDo33)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7996$gDo33
                                                (car g$pat*$8559$gDo33)
                                                '())))
                                           (case-lambda
                                             ((g$pat$8562$gDo33
                                                g$idn*$8563$gDo33)
                                              ((case-lambda
                                                 ((g$idn*$8564$gDo33
                                                    g$pat$8565$gDo33)
                                                  (append
                                                    g$idn*$8564$gDo33
                                                    (g$f$8558$gDo33
                                                      (cdr g$pat*$8559$gDo33)))))
                                               g$idn*$8563$gDo33
                                               g$pat$8562$gDo33)))))))))
                           g$f$8558$gDo33)
                         g$pat*$8549$gDo33))))
                    g$ls/false$8548$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8547$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8547$gDo33
               '(_ #(each (any any)) any . each-any)))))
         g$e$8546$gDo33))))
   (g$invalid-fmls-error$7962$gDo33
     g$invalid-fmls-error$11465$gDo33
     (case-lambda
       ((g$stx$8566$gDo33 g$fmls$8567$gDo33)
        ((case-lambda
           ((g$t$8568$gDo33)
            ((case-lambda
               ((g$ls/false$8569$gDo33)
                (if g$ls/false$8569$gDo33
                  (apply
                    (case-lambda
                      ((g$id*$8570$gDo33 g$last$8571$gDo33)
                       ((letrec ((g$f$8572$gDo33
                                   (case-lambda
                                     ((g$id*$8573$gDo33)
                                      (if (null? g$id*$8573$gDo33)
                                        (values)
                                        (if (not (g$id?$7719$gDo33
                                                   (car g$id*$8573$gDo33)))
                                          (g$syntax-violation$8109$gDo33
                                            '#f
                                            '"not an identifier"
                                            g$stx$8566$gDo33
                                            (car g$id*$8573$gDo33))
                                          (begin
                                            (g$f$8572$gDo33
                                              (cdr g$id*$8573$gDo33))
                                            (if (g$bound-id-member?$7726$gDo33
                                                  (car g$id*$8573$gDo33)
                                                  (cdr g$id*$8573$gDo33))
                                              (g$syntax-violation$8109$gDo33
                                                '#f
                                                '"duplicate binding"
                                                g$stx$8566$gDo33
                                                (car g$id*$8573$gDo33))
                                              (void)))))))))
                          g$f$8572$gDo33)
                        (if (g$id?$7719$gDo33 g$last$8571$gDo33)
                          (cons g$last$8571$gDo33 g$id*$8570$gDo33)
                          (if (g$syntax-null?$7714$gDo33 g$last$8571$gDo33)
                            g$id*$8570$gDo33
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"not an identifier"
                              g$stx$8566$gDo33
                              g$last$8571$gDo33))))))
                    g$ls/false$8569$gDo33)
                  ((case-lambda
                     ((g$t$8574$gDo33)
                      ((case-lambda
                         ((g$ls/false$8575$gDo33)
                          (if g$ls/false$8575$gDo33
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8109$gDo33
                                   '#f
                                   '"malformed binding form"
                                   g$stx$8566$gDo33
                                   g$fmls$8567$gDo33)))
                              g$ls/false$8575$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$8574$gDo33))))
                       (g$syntax-dispatch$7997$gDo33 g$t$8574$gDo33 '_))))
                   g$t$8568$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8568$gDo33
               '#(each+ any () any)))))
         g$fmls$8567$gDo33))))
   (g$let-macro$7963$gDo33
     g$let-macro$11466$gDo33
     (case-lambda
       ((g$stx$8576$gDo33)
        ((case-lambda
           ((g$t$8577$gDo33)
            ((case-lambda
               ((g$ls/false$8578$gDo33)
                (if g$ls/false$8578$gDo33
                  (apply
                    (case-lambda
                      ((g$lhs*$8579$gDo33
                         g$rhs*$8580$gDo33
                         g$b$8581$gDo33
                         g$b*$8582$gDo33)
                       (if (g$valid-bound-ids?$7724$gDo33 g$lhs*$8579$gDo33)
                         (g$bless$7960$gDo33
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$8579$gDo33
                                 (cons g$b$8581$gDo33 g$b*$8582$gDo33)))
                             g$rhs*$8580$gDo33))
                         (g$invalid-fmls-error$7962$gDo33
                           g$stx$8576$gDo33
                           g$lhs*$8579$gDo33))))
                    g$ls/false$8578$gDo33)
                  ((case-lambda
                     ((g$t$8583$gDo33)
                      ((case-lambda
                         ((g$ls/false$8584$gDo33)
                          (if (if g$ls/false$8584$gDo33
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$8585$gDo33
                                         g$lhs*$8586$gDo33
                                         g$rhs*$8587$gDo33
                                         g$b$8588$gDo33
                                         g$b*$8589$gDo33)
                                       (g$id?$7719$gDo33 g$f$8585$gDo33)))
                                    g$ls/false$8584$gDo33))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$8590$gDo33
                                   g$lhs*$8591$gDo33
                                   g$rhs*$8592$gDo33
                                   g$b$8593$gDo33
                                   g$b*$8594$gDo33)
                                 (if (g$valid-bound-ids?$7724$gDo33
                                       g$lhs*$8591$gDo33)
                                   (g$bless$7960$gDo33
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$8590$gDo33
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$8591$gDo33
                                                 (cons
                                                   g$b$8593$gDo33
                                                   g$b*$8594$gDo33)))))
                                         g$f$8590$gDo33)
                                       g$rhs*$8592$gDo33))
                                   (g$invalid-fmls-error$7962$gDo33
                                     g$stx$8576$gDo33
                                     g$lhs*$8591$gDo33))))
                              g$ls/false$8584$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$8583$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$8583$gDo33
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$8577$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8577$gDo33
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8576$gDo33))))
   (g$let-values-macro$7964$gDo33
     g$let-values-macro$11467$gDo33
     (case-lambda
       ((g$stx$8595$gDo33)
        (letrec* ((g$rename$8596$gDo33
                    (case-lambda
                      ((g$x$8647$gDo33 g$old*$8648$gDo33 g$new*$8649$gDo33)
                       (begin
                         (if (not (g$id?$7719$gDo33 g$x$8647$gDo33))
                           (g$syntax-violation$8109$gDo33
                             '#f
                             '"not an indentifier"
                             g$stx$8595$gDo33
                             g$x$8647$gDo33)
                           (void))
                         (if (g$bound-id-member?$7726$gDo33
                               g$x$8647$gDo33
                               g$old*$8648$gDo33)
                           (g$syntax-violation$8109$gDo33
                             '#f
                             '"duplicate binding"
                             g$stx$8595$gDo33
                             g$x$8647$gDo33)
                           (void))
                         ((case-lambda
                            ((g$y$8650$gDo33)
                             (values
                               g$y$8650$gDo33
                               (cons g$x$8647$gDo33 g$old*$8648$gDo33)
                               (cons g$y$8650$gDo33 g$new*$8649$gDo33))))
                          (gensym
                            (g$syntax->datum$8112$gDo33 g$x$8647$gDo33)))))))
                  (g$rename*$8597$gDo33
                    (case-lambda
                      ((g$x*$8638$gDo33 g$old*$8639$gDo33 g$new*$8640$gDo33)
                       (if (null? g$x*$8638$gDo33)
                         (values '() g$old*$8639$gDo33 g$new*$8640$gDo33)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$8596$gDo33
                                (car g$x*$8638$gDo33)
                                g$old*$8639$gDo33
                                g$new*$8640$gDo33)))
                           (case-lambda
                             ((g$x$8641$gDo33
                                g$old*$8642$gDo33
                                g$new*$8643$gDo33)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$8597$gDo33
                                     (cdr g$x*$8638$gDo33)
                                     g$old*$8642$gDo33
                                     g$new*$8643$gDo33)))
                                (case-lambda
                                  ((g$x*$8644$gDo33
                                     g$old*$8645$gDo33
                                     g$new*$8646$gDo33)
                                   (values
                                     (cons g$x$8641$gDo33 g$x*$8644$gDo33)
                                     g$old*$8645$gDo33
                                     g$new*$8646$gDo33))))))))))))
          ((case-lambda
             ((g$t$8598$gDo33)
              ((case-lambda
                 ((g$ls/false$8599$gDo33)
                  (if g$ls/false$8599$gDo33
                    (apply
                      (case-lambda
                        ((g$b$8600$gDo33 g$b*$8601$gDo33)
                         (g$cons*$5065$gDo33
                           (g$bless$7960$gDo33 'let)
                           '()
                           g$b$8600$gDo33
                           g$b*$8601$gDo33)))
                      g$ls/false$8599$gDo33)
                    ((case-lambda
                       ((g$t$8602$gDo33)
                        ((case-lambda
                           ((g$ls/false$8603$gDo33)
                            (if g$ls/false$8603$gDo33
                              (apply
                                (case-lambda
                                  ((g$lhs*$8604$gDo33
                                     g$rhs*$8605$gDo33
                                     g$b$8606$gDo33
                                     g$b*$8607$gDo33)
                                   (g$bless$7960$gDo33
                                     ((letrec ((g$f$8608$gDo33
                                                 (case-lambda
                                                   ((g$lhs*$8609$gDo33
                                                      g$rhs*$8610$gDo33
                                                      g$old*$8611$gDo33
                                                      g$new*$8612$gDo33)
                                                    (if (null?
                                                          g$lhs*$8609$gDo33)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (g$map$5063$gDo33
                                                            list
                                                            g$old*$8611$gDo33
                                                            g$new*$8612$gDo33)
                                                          (cons
                                                            g$b$8606$gDo33
                                                            g$b*$8607$gDo33)))
                                                      ((case-lambda
                                                         ((g$t$8613$gDo33)
                                                          ((case-lambda
                                                             ((g$ls/false$8614$gDo33)
                                                              (if g$ls/false$8614$gDo33
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8615$gDo33)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$8597$gDo33
                                                                            g$x*$8615$gDo33
                                                                            g$old*$8611$gDo33
                                                                            g$new*$8612$gDo33)))
                                                                       (case-lambda
                                                                         ((g$y*$8619$gDo33
                                                                            g$old*$8620$gDo33
                                                                            g$new*$8621$gDo33)
                                                                          ((case-lambda
                                                                             ((g$new*$8622$gDo33
                                                                                g$old*$8623$gDo33
                                                                                g$y*$8624$gDo33)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$8610$gDo33))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$8624$gDo33
                                                                                  (g$f$8608$gDo33
                                                                                    (cdr g$lhs*$8609$gDo33)
                                                                                    (cdr g$rhs*$8610$gDo33)
                                                                                    g$old*$8623$gDo33
                                                                                    g$new*$8622$gDo33)))))
                                                                           g$new*$8621$gDo33
                                                                           g$old*$8620$gDo33
                                                                           g$y*$8619$gDo33))))))
                                                                  g$ls/false$8614$gDo33)
                                                                ((case-lambda
                                                                   ((g$t$8625$gDo33)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8626$gDo33)
                                                                        (if g$ls/false$8626$gDo33
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8627$gDo33
                                                                                 g$x$8628$gDo33)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$8596$gDo33
                                                                                      g$x$8628$gDo33
                                                                                      g$old*$8611$gDo33
                                                                                      g$new*$8612$gDo33)))
                                                                                 (case-lambda
                                                                                   ((g$y$8629$gDo33
                                                                                      g$old*$8630$gDo33
                                                                                      g$new*$8631$gDo33)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$8597$gDo33
                                                                                           g$x*$8627$gDo33
                                                                                           g$old*$8630$gDo33
                                                                                           g$new*$8631$gDo33)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8632$gDo33
                                                                                           g$old*$8633$gDo33
                                                                                           g$new*$8634$gDo33)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$8610$gDo33))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8632$gDo33
                                                                                               g$y$8629$gDo33)
                                                                                             (g$f$8608$gDo33
                                                                                               (cdr g$lhs*$8609$gDo33)
                                                                                               (cdr g$rhs*$8610$gDo33)
                                                                                               g$old*$8633$gDo33
                                                                                               g$new*$8634$gDo33)))))))))))
                                                                            g$ls/false$8626$gDo33)
                                                                          ((case-lambda
                                                                             ((g$t$8635$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8636$gDo33)
                                                                                  (if g$ls/false$8636$gDo33
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8637$gDo33)
                                                                                         (g$syntax-violation$8109$gDo33
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8595$gDo33
                                                                                           g$others$8637$gDo33)))
                                                                                      g$ls/false$8636$gDo33)
                                                                                    (g$syntax-violation$8109$gDo33
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8635$gDo33))))
                                                                               (g$syntax-dispatch$7997$gDo33
                                                                                 g$t$8635$gDo33
                                                                                 'any))))
                                                                           g$t$8625$gDo33))))
                                                                     (g$syntax-dispatch$7997$gDo33
                                                                       g$t$8625$gDo33
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8613$gDo33))))
                                                           (g$syntax-dispatch$7997$gDo33
                                                             g$t$8613$gDo33
                                                             'each-any))))
                                                       (car g$lhs*$8609$gDo33)))))))
                                        g$f$8608$gDo33)
                                      g$lhs*$8604$gDo33
                                      g$rhs*$8605$gDo33
                                      '()
                                      '()))))
                                g$ls/false$8603$gDo33)
                              (g$syntax-violation$8109$gDo33
                                '#f
                                '"invalid syntax"
                                g$t$8602$gDo33))))
                         (g$syntax-dispatch$7997$gDo33
                           g$t$8602$gDo33
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8598$gDo33))))
               (g$syntax-dispatch$7997$gDo33
                 g$t$8598$gDo33
                 '(_ () any . each-any)))))
           g$stx$8595$gDo33)))))
   (g$let*-values-macro$7965$gDo33
     g$let*-values-macro$11468$gDo33
     (case-lambda
       ((g$stx$8651$gDo33)
        (letrec* ((g$check$8652$gDo33
                    (case-lambda
                      ((g$x*$8676$gDo33)
                       (if (not (null? g$x*$8676$gDo33))
                         ((case-lambda
                            ((g$x$8677$gDo33)
                             (begin
                               (if (not (g$id?$7719$gDo33 g$x$8677$gDo33))
                                 (g$syntax-violation$8109$gDo33
                                   '#f
                                   '"not an identifier"
                                   g$stx$8651$gDo33
                                   g$x$8677$gDo33)
                                 (void))
                               (g$check$8652$gDo33 (cdr g$x*$8676$gDo33))
                               (if (g$bound-id-member?$7726$gDo33
                                     g$x$8677$gDo33
                                     (cdr g$x*$8676$gDo33))
                                 (g$syntax-violation$8109$gDo33
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8651$gDo33
                                   g$x$8677$gDo33)
                                 (void)))))
                          (car g$x*$8676$gDo33))
                         (void))))))
          ((case-lambda
             ((g$t$8653$gDo33)
              ((case-lambda
                 ((g$ls/false$8654$gDo33)
                  (if g$ls/false$8654$gDo33
                    (apply
                      (case-lambda
                        ((g$b$8655$gDo33 g$b*$8656$gDo33)
                         (g$cons*$5065$gDo33
                           (g$bless$7960$gDo33 'let)
                           '()
                           g$b$8655$gDo33
                           g$b*$8656$gDo33)))
                      g$ls/false$8654$gDo33)
                    ((case-lambda
                       ((g$t$8657$gDo33)
                        ((case-lambda
                           ((g$ls/false$8658$gDo33)
                            (if g$ls/false$8658$gDo33
                              (apply
                                (case-lambda
                                  ((g$lhs*$8659$gDo33
                                     g$rhs*$8660$gDo33
                                     g$b$8661$gDo33
                                     g$b*$8662$gDo33)
                                   (g$bless$7960$gDo33
                                     ((letrec ((g$f$8663$gDo33
                                                 (case-lambda
                                                   ((g$lhs*$8664$gDo33
                                                      g$rhs*$8665$gDo33)
                                                    (if (null?
                                                          g$lhs*$8664$gDo33)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8661$gDo33
                                                          g$b*$8662$gDo33))
                                                      ((case-lambda
                                                         ((g$t$8666$gDo33)
                                                          ((case-lambda
                                                             ((g$ls/false$8667$gDo33)
                                                              (if g$ls/false$8667$gDo33
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8668$gDo33)
                                                                     (begin
                                                                       (g$check$8652$gDo33
                                                                         g$x*$8668$gDo33)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8665$gDo33))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8668$gDo33
                                                                           (g$f$8663$gDo33
                                                                             (cdr g$lhs*$8664$gDo33)
                                                                             (cdr g$rhs*$8665$gDo33)))))))
                                                                  g$ls/false$8667$gDo33)
                                                                ((case-lambda
                                                                   ((g$t$8669$gDo33)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8670$gDo33)
                                                                        (if g$ls/false$8670$gDo33
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8671$gDo33
                                                                                 g$x$8672$gDo33)
                                                                               (begin
                                                                                 (g$check$8652$gDo33
                                                                                   (cons
                                                                                     g$x$8672$gDo33
                                                                                     g$x*$8671$gDo33))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8665$gDo33))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8671$gDo33
                                                                                       g$x$8672$gDo33)
                                                                                     (g$f$8663$gDo33
                                                                                       (cdr g$lhs*$8664$gDo33)
                                                                                       (cdr g$rhs*$8665$gDo33)))))))
                                                                            g$ls/false$8670$gDo33)
                                                                          ((case-lambda
                                                                             ((g$t$8673$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8674$gDo33)
                                                                                  (if g$ls/false$8674$gDo33
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8675$gDo33)
                                                                                         (g$syntax-violation$8109$gDo33
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8651$gDo33
                                                                                           g$others$8675$gDo33)))
                                                                                      g$ls/false$8674$gDo33)
                                                                                    (g$syntax-violation$8109$gDo33
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8673$gDo33))))
                                                                               (g$syntax-dispatch$7997$gDo33
                                                                                 g$t$8673$gDo33
                                                                                 'any))))
                                                                           g$t$8669$gDo33))))
                                                                     (g$syntax-dispatch$7997$gDo33
                                                                       g$t$8669$gDo33
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8666$gDo33))))
                                                           (g$syntax-dispatch$7997$gDo33
                                                             g$t$8666$gDo33
                                                             'each-any))))
                                                       (car g$lhs*$8664$gDo33)))))))
                                        g$f$8663$gDo33)
                                      g$lhs*$8659$gDo33
                                      g$rhs*$8660$gDo33))))
                                g$ls/false$8658$gDo33)
                              (g$syntax-violation$8109$gDo33
                                '#f
                                '"invalid syntax"
                                g$t$8657$gDo33))))
                         (g$syntax-dispatch$7997$gDo33
                           g$t$8657$gDo33
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8653$gDo33))))
               (g$syntax-dispatch$7997$gDo33
                 g$t$8653$gDo33
                 '(_ () any . each-any)))))
           g$stx$8651$gDo33)))))
   (g$trace-lambda-macro$7966$gDo33
     g$trace-lambda-macro$11469$gDo33
     (case-lambda
       ((g$stx$8678$gDo33)
        ((case-lambda
           ((g$t$8679$gDo33)
            ((case-lambda
               ((g$ls/false$8680$gDo33)
                (if g$ls/false$8680$gDo33
                  (apply
                    (case-lambda
                      ((g$who$8681$gDo33
                         g$fmls$8682$gDo33
                         g$b$8683$gDo33
                         g$b*$8684$gDo33)
                       (if (g$valid-bound-ids?$7724$gDo33 g$fmls$8682$gDo33)
                         (g$bless$7960$gDo33
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8681$gDo33)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8682$gDo33
                                 (cons g$b$8683$gDo33 g$b*$8684$gDo33)))))
                         (g$invalid-fmls-error$7962$gDo33
                           g$stx$8678$gDo33
                           g$fmls$8682$gDo33))))
                    g$ls/false$8680$gDo33)
                  ((case-lambda
                     ((g$t$8685$gDo33)
                      ((case-lambda
                         ((g$ls/false$8686$gDo33)
                          (if g$ls/false$8686$gDo33
                            (apply
                              (case-lambda
                                ((g$who$8687$gDo33
                                   g$fmls$8688$gDo33
                                   g$last$8689$gDo33
                                   g$b$8690$gDo33
                                   g$b*$8691$gDo33)
                                 (if (g$valid-bound-ids?$7724$gDo33
                                       (cons
                                         g$last$8689$gDo33
                                         g$fmls$8688$gDo33))
                                   (g$bless$7960$gDo33
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8687$gDo33)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8688$gDo33
                                             g$last$8689$gDo33)
                                           (cons
                                             g$b$8690$gDo33
                                             g$b*$8691$gDo33)))))
                                   (g$invalid-fmls-error$7962$gDo33
                                     g$stx$8678$gDo33
                                     (append
                                       g$fmls$8688$gDo33
                                       g$last$8689$gDo33)))))
                              g$ls/false$8686$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$8685$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$8685$gDo33
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8679$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8679$gDo33
               '(_ any each-any any . each-any)))))
         g$stx$8678$gDo33))))
   (g$trace-define-macro$7967$gDo33
     g$trace-define-macro$11470$gDo33
     (case-lambda
       ((g$stx$8692$gDo33)
        ((case-lambda
           ((g$t$8693$gDo33)
            ((case-lambda
               ((g$ls/false$8694$gDo33)
                (if g$ls/false$8694$gDo33
                  (apply
                    (case-lambda
                      ((g$who$8695$gDo33
                         g$fmls$8696$gDo33
                         g$b$8697$gDo33
                         g$b*$8698$gDo33)
                       (if (g$valid-bound-ids?$7724$gDo33 g$fmls$8696$gDo33)
                         (g$bless$7960$gDo33
                           (list
                             'define
                             g$who$8695$gDo33
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8695$gDo33)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8696$gDo33
                                   (cons g$b$8697$gDo33 g$b*$8698$gDo33))))))
                         (g$invalid-fmls-error$7962$gDo33
                           g$stx$8692$gDo33
                           g$fmls$8696$gDo33))))
                    g$ls/false$8694$gDo33)
                  ((case-lambda
                     ((g$t$8699$gDo33)
                      ((case-lambda
                         ((g$ls/false$8700$gDo33)
                          (if g$ls/false$8700$gDo33
                            (apply
                              (case-lambda
                                ((g$who$8701$gDo33
                                   g$fmls$8702$gDo33
                                   g$last$8703$gDo33
                                   g$b$8704$gDo33
                                   g$b*$8705$gDo33)
                                 (if (g$valid-bound-ids?$7724$gDo33
                                       (cons
                                         g$last$8703$gDo33
                                         g$fmls$8702$gDo33))
                                   (g$bless$7960$gDo33
                                     (list
                                       'define
                                       g$who$8701$gDo33
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8701$gDo33)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8702$gDo33
                                               g$last$8703$gDo33)
                                             (cons
                                               g$b$8704$gDo33
                                               g$b*$8705$gDo33))))))
                                   (g$invalid-fmls-error$7962$gDo33
                                     g$stx$8692$gDo33
                                     (append
                                       g$fmls$8702$gDo33
                                       g$last$8703$gDo33)))))
                              g$ls/false$8700$gDo33)
                            ((case-lambda
                               ((g$t$8706$gDo33)
                                ((case-lambda
                                   ((g$ls/false$8707$gDo33)
                                    (if g$ls/false$8707$gDo33
                                      (apply
                                        (case-lambda
                                          ((g$who$8708$gDo33 g$expr$8709$gDo33)
                                           (if (g$id?$7719$gDo33
                                                 g$who$8708$gDo33)
                                             (g$bless$7960$gDo33
                                               (list
                                                 'define
                                                 g$who$8708$gDo33
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8709$gDo33))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8708$gDo33)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$8109$gDo33
                                               '#f
                                               '"invalid name"
                                               g$stx$8692$gDo33))))
                                        g$ls/false$8707$gDo33)
                                      (g$syntax-violation$8109$gDo33
                                        '#f
                                        '"invalid syntax"
                                        g$t$8706$gDo33))))
                                 (g$syntax-dispatch$7997$gDo33
                                   g$t$8706$gDo33
                                   '(_ any any)))))
                             g$t$8699$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$8699$gDo33
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8693$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8693$gDo33
               '(_ (any . each-any) any . each-any)))))
         g$stx$8692$gDo33))))
   (g$trace-define-syntax-macro$7968$gDo33
     g$trace-define-syntax-macro$11471$gDo33
     (case-lambda
       ((g$stx$8710$gDo33)
        ((case-lambda
           ((g$t$8711$gDo33)
            ((case-lambda
               ((g$ls/false$8712$gDo33)
                (if g$ls/false$8712$gDo33
                  (apply
                    (case-lambda
                      ((g$who$8713$gDo33 g$expr$8714$gDo33)
                       (if (g$id?$7719$gDo33 g$who$8713$gDo33)
                         (g$bless$7960$gDo33
                           (list
                             'define-syntax
                             g$who$8713$gDo33
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8713$gDo33)
                               g$expr$8714$gDo33)))
                         (g$syntax-violation$8109$gDo33
                           '#f
                           '"invalid name"
                           g$stx$8710$gDo33))))
                    g$ls/false$8712$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8711$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8711$gDo33 '(_ any any)))))
         g$stx$8710$gDo33))))
   (g$trace-let/rec-syntax$7969$gDo33
     g$trace-let/rec-syntax$11472$gDo33
     (case-lambda
       ((g$who$8715$gDo33)
        (case-lambda
          ((g$stx$8716$gDo33)
           ((case-lambda
              ((g$t$8717$gDo33)
               ((case-lambda
                  ((g$ls/false$8718$gDo33)
                   (if g$ls/false$8718$gDo33
                     (apply
                       (case-lambda
                         ((g$lhs*$8719$gDo33
                            g$rhs*$8720$gDo33
                            g$b$8721$gDo33
                            g$b*$8722$gDo33)
                          (if (g$valid-bound-ids?$7724$gDo33 g$lhs*$8719$gDo33)
                            ((case-lambda
                               ((g$rhs*$8723$gDo33)
                                (g$bless$7960$gDo33
                                  (cons
                                    g$who$8715$gDo33
                                    (cons
                                      (g$map$5063$gDo33
                                        list
                                        g$lhs*$8719$gDo33
                                        g$rhs*$8723$gDo33)
                                      (cons g$b$8721$gDo33 g$b*$8722$gDo33))))))
                             (g$map$5063$gDo33
                               (case-lambda
                                 ((g$lhs$8724$gDo33 g$rhs$8725$gDo33)
                                  (list
                                    'make-traced-macro
                                    (list 'quote g$lhs$8724$gDo33)
                                    g$rhs$8725$gDo33)))
                               g$lhs*$8719$gDo33
                               g$rhs*$8720$gDo33))
                            (g$invalid-fmls-error$7962$gDo33
                              g$stx$8716$gDo33
                              g$lhs*$8719$gDo33))))
                       g$ls/false$8718$gDo33)
                     (g$syntax-violation$8109$gDo33
                       '#f
                       '"invalid syntax"
                       g$t$8717$gDo33))))
                (g$syntax-dispatch$7997$gDo33
                  g$t$8717$gDo33
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8716$gDo33))))))
   (g$trace-let-syntax-macro$7970$gDo33
     g$trace-let-syntax-macro$11473$gDo33
     (g$trace-let/rec-syntax$7969$gDo33 'let-syntax))
   (g$trace-letrec-syntax-macro$7971$gDo33
     g$trace-letrec-syntax-macro$11474$gDo33
     (g$trace-let/rec-syntax$7969$gDo33 'letrec-syntax))
   (g$guard-macro$7972$gDo33
     g$guard-macro$11475$gDo33
     (case-lambda
       ((g$x$8726$gDo33)
        (letrec* ((g$gen-clauses$8727$gDo33
                    (case-lambda
                      ((g$con$8739$gDo33
                         g$outerk$8740$gDo33
                         g$clause*$8741$gDo33)
                       (letrec* ((g$f$8742$gDo33
                                   (case-lambda
                                     ((g$x$8770$gDo33 g$k$8771$gDo33)
                                      ((case-lambda
                                         ((g$t$8772$gDo33)
                                          ((case-lambda
                                             ((g$ls/false$8773$gDo33)
                                              (if g$ls/false$8773$gDo33
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8774$gDo33
                                                       g$p$8775$gDo33)
                                                     ((case-lambda
                                                        ((g$t$8776$gDo33)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8776$gDo33
                                                               g$e$8774$gDo33))
                                                           (list
                                                             'if
                                                             g$t$8776$gDo33
                                                             (list
                                                               g$p$8775$gDo33
                                                               g$t$8776$gDo33)
                                                             g$k$8771$gDo33))))
                                                      (gensym))))
                                                  g$ls/false$8773$gDo33)
                                                ((case-lambda
                                                   ((g$t$8777$gDo33)
                                                    ((case-lambda
                                                       ((g$ls/false$8778$gDo33)
                                                        (if g$ls/false$8778$gDo33
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8779$gDo33)
                                                               ((case-lambda
                                                                  ((g$t$8780$gDo33)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8780$gDo33
                                                                         g$e$8779$gDo33))
                                                                     (list
                                                                       'if
                                                                       g$t$8780$gDo33
                                                                       g$t$8780$gDo33
                                                                       g$k$8771$gDo33))))
                                                                (gensym))))
                                                            g$ls/false$8778$gDo33)
                                                          ((case-lambda
                                                             ((g$t$8781$gDo33)
                                                              ((case-lambda
                                                                 ((g$ls/false$8782$gDo33)
                                                                  (if g$ls/false$8782$gDo33
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8783$gDo33
                                                                           g$v$8784$gDo33
                                                                           g$v*$8785$gDo33)
                                                                         (list
                                                                           'if
                                                                           g$e$8783$gDo33
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8784$gDo33
                                                                               g$v*$8785$gDo33))
                                                                           g$k$8771$gDo33)))
                                                                      g$ls/false$8782$gDo33)
                                                                    ((case-lambda
                                                                       ((g$t$8786$gDo33)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8787$gDo33)
                                                                            (if g$ls/false$8787$gDo33
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$8109$gDo33
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8770$gDo33)))
                                                                                g$ls/false$8787$gDo33)
                                                                              (g$syntax-violation$8109$gDo33
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8786$gDo33))))
                                                                         (g$syntax-dispatch$7997$gDo33
                                                                           g$t$8786$gDo33
                                                                           '_))))
                                                                     g$t$8781$gDo33))))
                                                               (g$syntax-dispatch$7997$gDo33
                                                                 g$t$8781$gDo33
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8777$gDo33))))
                                                     (g$syntax-dispatch$7997$gDo33
                                                       g$t$8777$gDo33
                                                       '(any)))))
                                                 g$t$8772$gDo33))))
                                           (g$syntax-dispatch$7997$gDo33
                                             g$t$8772$gDo33
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8770$gDo33))))
                                 (g$f*$8743$gDo33
                                   (case-lambda
                                     ((g$x*$8750$gDo33)
                                      ((case-lambda
                                         ((g$t$8751$gDo33)
                                          ((case-lambda
                                             ((g$ls/false$8752$gDo33)
                                              (if g$ls/false$8752$gDo33
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8739$gDo33)
                                                       '#t)))
                                                  g$ls/false$8752$gDo33)
                                                ((case-lambda
                                                   ((g$t$8753$gDo33)
                                                    ((case-lambda
                                                       ((g$ls/false$8754$gDo33)
                                                        (if g$ls/false$8754$gDo33
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8755$gDo33
                                                                 g$e*$8756$gDo33)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8755$gDo33
                                                                     g$e*$8756$gDo33))
                                                                 '#f)))
                                                            g$ls/false$8754$gDo33)
                                                          ((case-lambda
                                                             ((g$t$8757$gDo33)
                                                              ((case-lambda
                                                                 ((g$ls/false$8758$gDo33)
                                                                  (if g$ls/false$8758$gDo33
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8759$gDo33
                                                                           g$cls*$8760$gDo33)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8743$gDo33
                                                                                g$cls*$8760$gDo33)))
                                                                           (case-lambda
                                                                             ((g$e$8763$gDo33
                                                                                g$g$8764$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$g$8765$gDo33
                                                                                    g$e$8766$gDo33)
                                                                                  (values
                                                                                    (g$f$8742$gDo33
                                                                                      g$cls$8759$gDo33
                                                                                      g$e$8766$gDo33)
                                                                                    g$g$8765$gDo33)))
                                                                               g$g$8764$gDo33
                                                                               g$e$8763$gDo33))))))
                                                                      g$ls/false$8758$gDo33)
                                                                    ((case-lambda
                                                                       ((g$t$8767$gDo33)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8768$gDo33)
                                                                            (if g$ls/false$8768$gDo33
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8769$gDo33)
                                                                                   (g$syntax-violation$8109$gDo33
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8769$gDo33)))
                                                                                g$ls/false$8768$gDo33)
                                                                              (g$syntax-violation$8109$gDo33
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8767$gDo33))))
                                                                         (g$syntax-dispatch$7997$gDo33
                                                                           g$t$8767$gDo33
                                                                           'any))))
                                                                     g$t$8757$gDo33))))
                                                               (g$syntax-dispatch$7997$gDo33
                                                                 g$t$8757$gDo33
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8753$gDo33))))
                                                     (g$syntax-dispatch$7997$gDo33
                                                       g$t$8753$gDo33
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8751$gDo33))))
                                           (g$syntax-dispatch$7997$gDo33
                                             g$t$8751$gDo33
                                             '()))))
                                       g$x*$8750$gDo33)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8743$gDo33 g$clause*$8741$gDo33)))
                           (case-lambda
                             ((g$code$8746$gDo33 g$raisek$8747$gDo33)
                              ((case-lambda
                                 ((g$raisek$8748$gDo33 g$code$8749$gDo33)
                                  (if g$raisek$8748$gDo33
                                    (list g$outerk$8740$gDo33 g$code$8749$gDo33)
                                    g$code$8749$gDo33)))
                               g$raisek$8747$gDo33
                               g$code$8746$gDo33)))))))))
          ((case-lambda
             ((g$t$8728$gDo33)
              ((case-lambda
                 ((g$ls/false$8729$gDo33)
                  (if (if g$ls/false$8729$gDo33
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8730$gDo33
                                 g$clause*$8731$gDo33
                                 g$b$8732$gDo33
                                 g$b*$8733$gDo33)
                               (g$id?$7719$gDo33 g$con$8730$gDo33)))
                            g$ls/false$8729$gDo33))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8734$gDo33
                           g$clause*$8735$gDo33
                           g$b$8736$gDo33
                           g$b*$8737$gDo33)
                         ((case-lambda
                            ((g$outerk$8738$gDo33)
                             (g$bless$7960$gDo33
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8738$gDo33)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8734$gDo33)
                                           (g$gen-clauses$8727$gDo33
                                             g$con$8734$gDo33
                                             g$outerk$8738$gDo33
                                             g$clause*$8735$gDo33))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8736$gDo33
                                                 g$b*$8737$gDo33))))))))))))
                          (gensym))))
                      g$ls/false$8729$gDo33)
                    (g$syntax-violation$8109$gDo33
                      '#f
                      '"invalid syntax"
                      g$t$8728$gDo33))))
               (g$syntax-dispatch$7997$gDo33
                 g$t$8728$gDo33
                 '(_ (any . each-any) any . each-any)))))
           g$x$8726$gDo33)))))
   (g$define-enumeration-macro$7973$gDo33
     g$define-enumeration-macro$11476$gDo33
     (case-lambda
       ((g$stx$8788$gDo33)
        (letrec* ((g$set?$8789$gDo33
                    (case-lambda
                      ((g$x$8802$gDo33)
                       ((case-lambda
                          ((g$t$8803$gDo33)
                           (if g$t$8803$gDo33
                             g$t$8803$gDo33
                             (begin
                               '#f
                               (if (not (g$memq$5055$gDo33
                                          (car g$x$8802$gDo33)
                                          (cdr g$x$8802$gDo33)))
                                 (begin
                                   '#f
                                   (g$set?$8789$gDo33 (cdr g$x$8802$gDo33)))
                                 '#f)))))
                        (null? g$x$8802$gDo33)))))
                  (g$remove-dups$8790$gDo33
                    (case-lambda
                      ((g$ls$8801$gDo33)
                       (if (null? g$ls$8801$gDo33)
                         '()
                         (cons
                           (car g$ls$8801$gDo33)
                           (g$remove-dups$8790$gDo33
                             (g$remq$5070$gDo33
                               (car g$ls$8801$gDo33)
                               (cdr g$ls$8801$gDo33)))))))))
          ((case-lambda
             ((g$t$8791$gDo33)
              ((case-lambda
                 ((g$ls/false$8792$gDo33)
                  (if (if g$ls/false$8792$gDo33
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8793$gDo33
                                 g$id*$8794$gDo33
                                 g$maker$8795$gDo33)
                               (if (g$id?$7719$gDo33 g$name$8793$gDo33)
                                 (if (g$id?$7719$gDo33 g$maker$8795$gDo33)
                                   (begin
                                     '#f
                                     (g$for-all$5061$gDo33
                                       g$id?$7719$gDo33
                                       g$id*$8794$gDo33))
                                   '#f)
                                 '#f)))
                            g$ls/false$8792$gDo33))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8796$gDo33 g$id*$8797$gDo33 g$maker$8798$gDo33)
                         ((case-lambda
                            ((g$name*$8799$gDo33 g$mk$8800$gDo33)
                             (g$bless$7960$gDo33
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8800$gDo33
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8799$gDo33))))
                                 (list
                                   'define-syntax
                                   g$name$8796$gDo33
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8799$gDo33))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8796$gDo33)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8798$gDo33
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8798$gDo33)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8799$gDo33))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8798$gDo33)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8800$gDo33
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8790$gDo33
                            (g$syntax->datum$8112$gDo33 g$id*$8797$gDo33))
                          (gensym))))
                      g$ls/false$8792$gDo33)
                    (g$syntax-violation$8109$gDo33
                      '#f
                      '"invalid syntax"
                      g$t$8791$gDo33))))
               (g$syntax-dispatch$7997$gDo33
                 g$t$8791$gDo33
                 '(_ any each-any any)))))
           g$stx$8788$gDo33)))))
   (g$time-macro$7974$gDo33
     g$time-macro$11477$gDo33
     (case-lambda
       ((g$stx$8804$gDo33)
        ((case-lambda
           ((g$t$8805$gDo33)
            ((case-lambda
               ((g$ls/false$8806$gDo33)
                (if g$ls/false$8806$gDo33
                  (apply
                    (case-lambda
                      ((g$expr$8807$gDo33)
                       ((case-lambda
                          ((g$str$8808$gDo33)
                           (g$bless$7960$gDo33
                             (list
                               'time-it
                               g$str$8808$gDo33
                               (list 'lambda '() g$expr$8807$gDo33)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6336$gDo33)))
                          (case-lambda
                            ((g$p$8811$gDo33 g$e$8812$gDo33)
                             ((case-lambda
                                ((g$e$8813$gDo33 g$p$8814$gDo33)
                                 (begin
                                   (write
                                     (g$syntax->datum$8112$gDo33
                                       g$expr$8807$gDo33)
                                     g$p$8814$gDo33)
                                   (g$e$8813$gDo33))))
                              g$e$8812$gDo33
                              g$p$8811$gDo33)))))))
                    g$ls/false$8806$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8805$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8805$gDo33 '(_ any)))))
         g$stx$8804$gDo33))))
   (g$delay-macro$7975$gDo33
     g$delay-macro$11478$gDo33
     (case-lambda
       ((g$stx$8815$gDo33)
        ((case-lambda
           ((g$t$8816$gDo33)
            ((case-lambda
               ((g$ls/false$8817$gDo33)
                (if g$ls/false$8817$gDo33
                  (apply
                    (case-lambda
                      ((g$expr$8818$gDo33)
                       (g$bless$7960$gDo33
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8818$gDo33)))))
                    g$ls/false$8817$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8816$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8816$gDo33 '(_ any)))))
         g$stx$8815$gDo33))))
   (g$assert-macro$7976$gDo33
     g$assert-macro$11479$gDo33
     (case-lambda
       ((g$stx$8819$gDo33)
        ((case-lambda
           ((g$t$8820$gDo33)
            ((case-lambda
               ((g$ls/false$8821$gDo33)
                (if g$ls/false$8821$gDo33
                  (apply
                    (case-lambda
                      ((g$expr$8822$gDo33)
                       ((case-lambda
                          ((g$pos$8823$gDo33)
                           (g$bless$7960$gDo33
                             (list
                               'unless
                               g$expr$8822$gDo33
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8822$gDo33)
                                 (list 'quote g$pos$8823$gDo33))))))
                        ((case-lambda
                           ((g$t$8824$gDo33)
                            (if g$t$8824$gDo33
                              g$t$8824$gDo33
                              (begin
                                '#f
                                (g$expression-position$8104$gDo33
                                  g$expr$8822$gDo33)))))
                         (g$expression-position$8104$gDo33 g$stx$8819$gDo33)))))
                    g$ls/false$8821$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8820$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8820$gDo33 '(_ any)))))
         g$stx$8819$gDo33))))
   (g$endianness-macro$7977$gDo33
     g$endianness-macro$11480$gDo33
     (case-lambda
       ((g$stx$8825$gDo33)
        ((case-lambda
           ((g$t$8826$gDo33)
            ((case-lambda
               ((g$ls/false$8827$gDo33)
                (if g$ls/false$8827$gDo33
                  (apply
                    (case-lambda
                      ((g$e$8828$gDo33)
                       ((case-lambda
                          ((g$t$8829$gDo33)
                           (if (g$memv$5056$gDo33 g$t$8829$gDo33 '(little))
                             (g$bless$7960$gDo33 ''little)
                             (if (g$memv$5056$gDo33 g$t$8829$gDo33 '(big))
                               (g$bless$7960$gDo33 ''big)
                               (g$syntax-violation$8109$gDo33
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8825$gDo33)))))
                        (g$syntax->datum$8112$gDo33 g$e$8828$gDo33))))
                    g$ls/false$8827$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8826$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8826$gDo33 '(_ any)))))
         g$stx$8825$gDo33))))
   (g$identifier-syntax-macro$7978$gDo33
     g$identifier-syntax-macro$11481$gDo33
     (case-lambda
       ((g$stx$8830$gDo33)
        ((case-lambda
           ((g$t$8831$gDo33)
            ((case-lambda
               ((g$ls/false$8832$gDo33)
                (if g$ls/false$8832$gDo33
                  (apply
                    (case-lambda
                      ((g$expr$8833$gDo33)
                       (g$bless$7960$gDo33
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8833$gDo33))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8833$gDo33)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8832$gDo33)
                  ((case-lambda
                     ((g$t$8834$gDo33)
                      ((case-lambda
                         ((g$ls/false$8835$gDo33)
                          (if (if g$ls/false$8835$gDo33
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8836$gDo33
                                         g$expr1$8837$gDo33
                                         g$id2$8838$gDo33
                                         g$expr2$8839$gDo33
                                         g$expr3$8840$gDo33)
                                       (if (g$id?$7719$gDo33 g$id1$8836$gDo33)
                                         (if (g$id?$7719$gDo33 g$id2$8838$gDo33)
                                           (begin
                                             '#f
                                             (g$id?$7719$gDo33
                                               g$expr2$8839$gDo33))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8835$gDo33))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8841$gDo33
                                   g$expr1$8842$gDo33
                                   g$id2$8843$gDo33
                                   g$expr2$8844$gDo33
                                   g$expr3$8845$gDo33)
                                 (g$bless$7960$gDo33
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8842$gDo33))
                                         (list
                                           (list 'set! 'id g$expr2$8844$gDo33)
                                           (list 'syntax g$expr3$8845$gDo33))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8842$gDo33
                                               '(e* ...))))))))))
                              g$ls/false$8835$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$8834$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$8834$gDo33
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8831$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8831$gDo33 '(_ any)))))
         g$stx$8830$gDo33))))
   (g$do-macro$7979$gDo33
     g$do-macro$11482$gDo33
     (case-lambda
       ((g$stx$8846$gDo33)
        (letrec* ((g$bind$8847$gDo33
                    (case-lambda
                      ((g$x$8859$gDo33)
                       ((case-lambda
                          ((g$t$8860$gDo33)
                           ((case-lambda
                              ((g$ls/false$8861$gDo33)
                               (if g$ls/false$8861$gDo33
                                 (apply
                                   (case-lambda
                                     ((g$x$8862$gDo33 g$init$8863$gDo33)
                                      (list
                                        g$x$8862$gDo33
                                        g$init$8863$gDo33
                                        g$x$8862$gDo33)))
                                   g$ls/false$8861$gDo33)
                                 ((case-lambda
                                    ((g$t$8864$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$8865$gDo33)
                                         (if g$ls/false$8865$gDo33
                                           (apply
                                             (case-lambda
                                               ((g$x$8866$gDo33
                                                  g$init$8867$gDo33
                                                  g$step$8868$gDo33)
                                                (list
                                                  g$x$8866$gDo33
                                                  g$init$8867$gDo33
                                                  g$step$8868$gDo33)))
                                             g$ls/false$8865$gDo33)
                                           ((case-lambda
                                              ((g$t$8869$gDo33)
                                               ((case-lambda
                                                  ((g$ls/false$8870$gDo33)
                                                   (if g$ls/false$8870$gDo33
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$8109$gDo33
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8846$gDo33)))
                                                       g$ls/false$8870$gDo33)
                                                     (g$syntax-violation$8109$gDo33
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8869$gDo33))))
                                                (g$syntax-dispatch$7997$gDo33
                                                  g$t$8869$gDo33
                                                  '_))))
                                            g$t$8864$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$8864$gDo33
                                        '(any any any)))))
                                  g$t$8860$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$8860$gDo33
                              '(any any)))))
                        g$x$8859$gDo33)))))
          ((case-lambda
             ((g$t$8848$gDo33)
              ((case-lambda
                 ((g$ls/false$8849$gDo33)
                  (if g$ls/false$8849$gDo33
                    (apply
                      (case-lambda
                        ((g$binding*$8850$gDo33
                           g$test$8851$gDo33
                           g$expr*$8852$gDo33
                           g$command*$8853$gDo33)
                         ((case-lambda
                            ((g$t$8854$gDo33)
                             ((case-lambda
                                ((g$ls/false$8855$gDo33)
                                 (if g$ls/false$8855$gDo33
                                   (apply
                                     (case-lambda
                                       ((g$x*$8856$gDo33
                                          g$init*$8857$gDo33
                                          g$step*$8858$gDo33)
                                        (if (g$valid-bound-ids?$7724$gDo33
                                              g$x*$8856$gDo33)
                                          (g$bless$7960$gDo33
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8856$gDo33
                                                    (list
                                                      'if
                                                      g$test$8851$gDo33
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8852$gDo33))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8853$gDo33
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8858$gDo33))))))))
                                              (cons 'loop g$init*$8857$gDo33)))
                                          (g$syntax-violation$8109$gDo33
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8846$gDo33))))
                                     g$ls/false$8855$gDo33)
                                   (g$syntax-violation$8109$gDo33
                                     '#f
                                     '"invalid syntax"
                                     g$t$8854$gDo33))))
                              (g$syntax-dispatch$7997$gDo33
                                g$t$8854$gDo33
                                '#(each (any any any))))))
                          (g$map$5063$gDo33
                            g$bind$8847$gDo33
                            g$binding*$8850$gDo33))))
                      g$ls/false$8849$gDo33)
                    (g$syntax-violation$8109$gDo33
                      '#f
                      '"invalid syntax"
                      g$t$8848$gDo33))))
               (g$syntax-dispatch$7997$gDo33
                 g$t$8848$gDo33
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8846$gDo33)))))
   (g$let*-macro$7980$gDo33
     g$let*-macro$11483$gDo33
     (case-lambda
       ((g$stx$8871$gDo33)
        ((case-lambda
           ((g$t$8872$gDo33)
            ((case-lambda
               ((g$ls/false$8873$gDo33)
                (if (if g$ls/false$8873$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8874$gDo33
                               g$rhs*$8875$gDo33
                               g$b$8876$gDo33
                               g$b*$8877$gDo33)
                             (g$for-all$5061$gDo33
                               g$id?$7719$gDo33
                               g$lhs*$8874$gDo33)))
                          g$ls/false$8873$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8878$gDo33
                         g$rhs*$8879$gDo33
                         g$b$8880$gDo33
                         g$b*$8881$gDo33)
                       (g$bless$7960$gDo33
                         ((letrec ((g$f$8882$gDo33
                                     (case-lambda
                                       ((g$x*$8883$gDo33)
                                        (if (null? g$x*$8883$gDo33)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8880$gDo33
                                                g$b*$8881$gDo33)))
                                          (if (null? (cdr g$x*$8883$gDo33))
                                            (cons
                                              'let
                                              (cons
                                                (list (car g$x*$8883$gDo33))
                                                (cons
                                                  g$b$8880$gDo33
                                                  g$b*$8881$gDo33)))
                                            (list
                                              'let
                                              (list (car g$x*$8883$gDo33))
                                              (g$f$8882$gDo33
                                                (cdr g$x*$8883$gDo33)))))))))
                            g$f$8882$gDo33)
                          (g$map$5063$gDo33
                            list
                            g$lhs*$8878$gDo33
                            g$rhs*$8879$gDo33)))))
                    g$ls/false$8873$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8872$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8872$gDo33
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8871$gDo33))))
   (g$or-macro$7981$gDo33
     g$or-macro$11484$gDo33
     (case-lambda
       ((g$stx$8884$gDo33)
        ((case-lambda
           ((g$t$8885$gDo33)
            ((case-lambda
               ((g$ls/false$8886$gDo33)
                (if g$ls/false$8886$gDo33
                  (apply (case-lambda (() '#f)) g$ls/false$8886$gDo33)
                  ((case-lambda
                     ((g$t$8887$gDo33)
                      ((case-lambda
                         ((g$ls/false$8888$gDo33)
                          (if g$ls/false$8888$gDo33
                            (apply
                              (case-lambda
                                ((g$e$8889$gDo33 g$e*$8890$gDo33)
                                 (g$bless$7960$gDo33
                                   ((letrec ((g$f$8891$gDo33
                                               (case-lambda
                                                 ((g$e$8892$gDo33
                                                    g$e*$8893$gDo33)
                                                  (if (null? g$e*$8893$gDo33)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8892$gDo33)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8892$gDo33))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8891$gDo33
                                                          (car g$e*$8893$gDo33)
                                                          (cdr g$e*$8893$gDo33)))))))))
                                      g$f$8891$gDo33)
                                    g$e$8889$gDo33
                                    g$e*$8890$gDo33))))
                              g$ls/false$8888$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$8887$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$8887$gDo33
                         '(_ any . each-any)))))
                   g$t$8885$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8885$gDo33 '(_)))))
         g$stx$8884$gDo33))))
   (g$and-macro$7982$gDo33
     g$and-macro$11485$gDo33
     (case-lambda
       ((g$stx$8894$gDo33)
        ((case-lambda
           ((g$t$8895$gDo33)
            ((case-lambda
               ((g$ls/false$8896$gDo33)
                (if g$ls/false$8896$gDo33
                  (apply (case-lambda (() '#t)) g$ls/false$8896$gDo33)
                  ((case-lambda
                     ((g$t$8897$gDo33)
                      ((case-lambda
                         ((g$ls/false$8898$gDo33)
                          (if g$ls/false$8898$gDo33
                            (apply
                              (case-lambda
                                ((g$e$8899$gDo33 g$e*$8900$gDo33)
                                 (g$bless$7960$gDo33
                                   ((letrec ((g$f$8901$gDo33
                                               (case-lambda
                                                 ((g$e$8902$gDo33
                                                    g$e*$8903$gDo33)
                                                  (if (null? g$e*$8903$gDo33)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8902$gDo33)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8902$gDo33
                                                        (cons
                                                          (g$f$8901$gDo33
                                                            (car g$e*$8903$gDo33)
                                                            (cdr g$e*$8903$gDo33))
                                                          '(#f)))))))))
                                      g$f$8901$gDo33)
                                    g$e$8899$gDo33
                                    g$e*$8900$gDo33))))
                              g$ls/false$8898$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$8897$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$8897$gDo33
                         '(_ any . each-any)))))
                   g$t$8895$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8895$gDo33 '(_)))))
         g$stx$8894$gDo33))))
   (g$cond-macro$7983$gDo33
     g$cond-macro$11486$gDo33
     (case-lambda
       ((g$stx$8904$gDo33)
        ((case-lambda
           ((g$t$8905$gDo33)
            ((case-lambda
               ((g$ls/false$8906$gDo33)
                (if g$ls/false$8906$gDo33
                  (apply
                    (case-lambda
                      ((g$cls$8907$gDo33 g$cls*$8908$gDo33)
                       (g$bless$7960$gDo33
                         ((letrec ((g$f$8909$gDo33
                                     (case-lambda
                                       ((g$cls$8910$gDo33 g$cls*$8911$gDo33)
                                        (if (null? g$cls*$8911$gDo33)
                                          ((case-lambda
                                             ((g$t$8912$gDo33)
                                              ((case-lambda
                                                 ((g$ls/false$8913$gDo33)
                                                  (if g$ls/false$8913$gDo33
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8914$gDo33
                                                           g$e*$8915$gDo33)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8914$gDo33
                                                             g$e*$8915$gDo33))))
                                                      g$ls/false$8913$gDo33)
                                                    ((case-lambda
                                                       ((g$t$8916$gDo33)
                                                        ((case-lambda
                                                           ((g$ls/false$8917$gDo33)
                                                            (if g$ls/false$8917$gDo33
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8918$gDo33
                                                                     g$p$8919$gDo33)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8918$gDo33))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8919$gDo33
                                                                         '(t))))))
                                                                g$ls/false$8917$gDo33)
                                                              ((case-lambda
                                                                 ((g$t$8920$gDo33)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8921$gDo33)
                                                                      (if g$ls/false$8921$gDo33
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8922$gDo33)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8922$gDo33
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8921$gDo33)
                                                                        ((case-lambda
                                                                           ((g$t$8923$gDo33)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8924$gDo33)
                                                                                (if g$ls/false$8924$gDo33
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8925$gDo33
                                                                                         g$e*$8926$gDo33)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8925$gDo33
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8926$gDo33))))
                                                                                    g$ls/false$8924$gDo33)
                                                                                  ((case-lambda
                                                                                     ((g$t$8927$gDo33)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8928$gDo33)
                                                                                          (if g$ls/false$8928$gDo33
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8109$gDo33
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8904$gDo33)))
                                                                                              g$ls/false$8928$gDo33)
                                                                                            (g$syntax-violation$8109$gDo33
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8927$gDo33))))
                                                                                       (g$syntax-dispatch$7997$gDo33
                                                                                         g$t$8927$gDo33
                                                                                         '_))))
                                                                                   g$t$8923$gDo33))))
                                                                             (g$syntax-dispatch$7997$gDo33
                                                                               g$t$8923$gDo33
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8920$gDo33))))
                                                                   (g$syntax-dispatch$7997$gDo33
                                                                     g$t$8920$gDo33
                                                                     '(any)))))
                                                               g$t$8916$gDo33))))
                                                         (g$syntax-dispatch$7997$gDo33
                                                           g$t$8916$gDo33
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8912$gDo33))))
                                               (g$syntax-dispatch$7997$gDo33
                                                 g$t$8912$gDo33
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8910$gDo33)
                                          ((case-lambda
                                             ((g$t$8929$gDo33)
                                              ((case-lambda
                                                 ((g$ls/false$8930$gDo33)
                                                  (if g$ls/false$8930$gDo33
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8931$gDo33
                                                           g$e*$8932$gDo33)
                                                         (g$syntax-violation$8109$gDo33
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8904$gDo33)))
                                                      g$ls/false$8930$gDo33)
                                                    ((case-lambda
                                                       ((g$t$8933$gDo33)
                                                        ((case-lambda
                                                           ((g$ls/false$8934$gDo33)
                                                            (if g$ls/false$8934$gDo33
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8935$gDo33
                                                                     g$p$8936$gDo33)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8935$gDo33))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8936$gDo33
                                                                         '(t))
                                                                       (g$f$8909$gDo33
                                                                         (car g$cls*$8911$gDo33)
                                                                         (cdr g$cls*$8911$gDo33))))))
                                                                g$ls/false$8934$gDo33)
                                                              ((case-lambda
                                                                 ((g$t$8937$gDo33)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8938$gDo33)
                                                                      (if g$ls/false$8938$gDo33
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8939$gDo33)
                                                                             (list
                                                                               'or
                                                                               g$e$8939$gDo33
                                                                               (g$f$8909$gDo33
                                                                                 (car g$cls*$8911$gDo33)
                                                                                 (cdr g$cls*$8911$gDo33)))))
                                                                          g$ls/false$8938$gDo33)
                                                                        ((case-lambda
                                                                           ((g$t$8940$gDo33)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8941$gDo33)
                                                                                (if g$ls/false$8941$gDo33
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8942$gDo33
                                                                                         g$e*$8943$gDo33)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8942$gDo33
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8943$gDo33)
                                                                                         (g$f$8909$gDo33
                                                                                           (car g$cls*$8911$gDo33)
                                                                                           (cdr g$cls*$8911$gDo33)))))
                                                                                    g$ls/false$8941$gDo33)
                                                                                  ((case-lambda
                                                                                     ((g$t$8944$gDo33)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8945$gDo33)
                                                                                          (if g$ls/false$8945$gDo33
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8109$gDo33
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8904$gDo33)))
                                                                                              g$ls/false$8945$gDo33)
                                                                                            (g$syntax-violation$8109$gDo33
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8944$gDo33))))
                                                                                       (g$syntax-dispatch$7997$gDo33
                                                                                         g$t$8944$gDo33
                                                                                         '_))))
                                                                                   g$t$8940$gDo33))))
                                                                             (g$syntax-dispatch$7997$gDo33
                                                                               g$t$8940$gDo33
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8937$gDo33))))
                                                                   (g$syntax-dispatch$7997$gDo33
                                                                     g$t$8937$gDo33
                                                                     '(any)))))
                                                               g$t$8933$gDo33))))
                                                         (g$syntax-dispatch$7997$gDo33
                                                           g$t$8933$gDo33
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8929$gDo33))))
                                               (g$syntax-dispatch$7997$gDo33
                                                 g$t$8929$gDo33
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8910$gDo33))))))
                            g$f$8909$gDo33)
                          g$cls$8907$gDo33
                          g$cls*$8908$gDo33))))
                    g$ls/false$8906$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8905$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8905$gDo33
               '(_ any . each-any)))))
         g$stx$8904$gDo33))))
   (g$do-include$7984$gDo33
     g$do-include$11487$gDo33
     (case-lambda
       ((g$stx$8946$gDo33 g$id$8947$gDo33 g$filename$8948$gDo33)
        ((case-lambda
           ((g$filename$8949$gDo33)
            (begin
              (if (not (if (string? g$filename$8949$gDo33)
                         (begin '#f (g$id?$7719$gDo33 g$id$8947$gDo33))
                         '#f))
                (g$syntax-violation$8109$gDo33
                  '#f
                  '"invalid syntax"
                  g$stx$8946$gDo33)
                (void))
              (cons
                (g$bless$7960$gDo33 'begin)
                (g$with-input-from-file$6385$gDo33
                  g$filename$8949$gDo33
                  (case-lambda
                    (()
                     ((letrec ((g$f$8950$gDo33
                                 (case-lambda
                                   ((g$ls$8951$gDo33)
                                    ((case-lambda
                                       ((g$x$8952$gDo33)
                                        (if (eof-object? g$x$8952$gDo33)
                                          (reverse g$ls$8951$gDo33)
                                          (g$f$8950$gDo33
                                            (cons
                                              (g$datum->stx$7702$gDo33
                                                g$id$8947$gDo33
                                                g$x$8952$gDo33)
                                              g$ls$8951$gDo33)))))
                                     (read-annotated))))))
                        g$f$8950$gDo33)
                      '()))))))))
         (g$stx->datum$7730$gDo33 g$filename$8948$gDo33)))))
   (g$include-macro$7985$gDo33
     g$include-macro$11488$gDo33
     (case-lambda
       ((g$e$8953$gDo33)
        ((case-lambda
           ((g$t$8954$gDo33)
            ((case-lambda
               ((g$ls/false$8955$gDo33)
                (if g$ls/false$8955$gDo33
                  (apply
                    (case-lambda
                      ((g$id$8956$gDo33 g$filename$8957$gDo33)
                       (g$do-include$7984$gDo33
                         g$e$8953$gDo33
                         g$id$8956$gDo33
                         g$filename$8957$gDo33)))
                    g$ls/false$8955$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8954$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8954$gDo33 '(any any)))))
         g$e$8953$gDo33))))
   (g$include-into-macro$7986$gDo33
     g$include-into-macro$11489$gDo33
     (case-lambda
       ((g$e$8958$gDo33)
        ((case-lambda
           ((g$t$8959$gDo33)
            ((case-lambda
               ((g$ls/false$8960$gDo33)
                (if g$ls/false$8960$gDo33
                  (apply
                    (case-lambda
                      ((g$id$8961$gDo33 g$filename$8962$gDo33)
                       (g$do-include$7984$gDo33
                         g$e$8958$gDo33
                         g$id$8961$gDo33
                         g$filename$8962$gDo33)))
                    g$ls/false$8960$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8959$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$8959$gDo33 '(_ any any)))))
         g$e$8958$gDo33))))
   (g$syntax-rules-macro$7987$gDo33
     g$syntax-rules-macro$11490$gDo33
     (case-lambda
       ((g$e$8963$gDo33)
        ((case-lambda
           ((g$t$8964$gDo33)
            ((case-lambda
               ((g$ls/false$8965$gDo33)
                (if g$ls/false$8965$gDo33
                  (apply
                    (case-lambda
                      ((g$lits$8966$gDo33 g$pat*$8967$gDo33 g$tmp*$8968$gDo33)
                       (begin
                         (g$verify-literals$8000$gDo33
                           g$lits$8966$gDo33
                           g$e$8963$gDo33)
                         (g$bless$7960$gDo33
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8966$gDo33
                                   (g$map$5063$gDo33
                                     (case-lambda
                                       ((g$pat$8969$gDo33 g$tmp$8970$gDo33)
                                        ((case-lambda
                                           ((g$t$8971$gDo33)
                                            ((case-lambda
                                               ((g$ls/false$8972$gDo33)
                                                (if g$ls/false$8972$gDo33
                                                  (apply
                                                    (case-lambda
                                                      ((g$rest$8973$gDo33)
                                                       (list
                                                         (cons
                                                           'g
                                                           g$rest$8973$gDo33)
                                                         (list
                                                           'syntax
                                                           g$tmp$8970$gDo33))))
                                                    g$ls/false$8972$gDo33)
                                                  ((case-lambda
                                                     ((g$t$8974$gDo33)
                                                      ((case-lambda
                                                         ((g$ls/false$8975$gDo33)
                                                          (if g$ls/false$8975$gDo33
                                                            (apply
                                                              (case-lambda
                                                                (()
                                                                 (g$syntax-violation$8109$gDo33
                                                                   '#f
                                                                   '"invalid syntax-rules pattern"
                                                                   g$e$8963$gDo33
                                                                   g$pat$8969$gDo33)))
                                                              g$ls/false$8975$gDo33)
                                                            (g$syntax-violation$8109$gDo33
                                                              '#f
                                                              '"invalid syntax"
                                                              g$t$8974$gDo33))))
                                                       (g$syntax-dispatch$7997$gDo33
                                                         g$t$8974$gDo33
                                                         '_))))
                                                   g$t$8971$gDo33))))
                                             (g$syntax-dispatch$7997$gDo33
                                               g$t$8971$gDo33
                                               '(_ . any)))))
                                         g$pat$8969$gDo33)))
                                     g$pat*$8967$gDo33
                                     g$tmp*$8968$gDo33)))))))))
                    g$ls/false$8965$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$8964$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$8964$gDo33
               '(_ each-any . #(each (any any)))))))
         g$e$8963$gDo33))))
   (g$quasiquote-macro$7988$gDo33
     g$quasiquote-macro$11491$gDo33
     ((case-lambda
        (()
         (letrec* ((g$datum$8976$gDo33
                     (case-lambda
                       ((g$x$9107$gDo33)
                        (list
                          (g$scheme-stx$7940$gDo33 'quote)
                          (g$mkstx$7707$gDo33 g$x$9107$gDo33 '() '() '())))))
                   (g$quasicons*$8992$gDo33
                     (case-lambda
                       ((g$x$9103$gDo33 g$y$9104$gDo33)
                        ((letrec ((g$f$9105$gDo33
                                    (case-lambda
                                      ((g$x$9106$gDo33)
                                       (if (null? g$x$9106$gDo33)
                                         g$y$9104$gDo33
                                         (g$quasicons$8993$gDo33
                                           (car g$x$9106$gDo33)
                                           (g$f$9105$gDo33
                                             (cdr g$x$9106$gDo33))))))))
                           g$f$9105$gDo33)
                         g$x$9103$gDo33))))
                   (g$quasicons$8993$gDo33
                     (case-lambda
                       ((g$x$9084$gDo33 g$y$9085$gDo33)
                        ((case-lambda
                           ((g$t$9086$gDo33)
                            ((case-lambda
                               ((g$ls/false$9087$gDo33)
                                (if g$ls/false$9087$gDo33
                                  (apply
                                    (case-lambda
                                      ((g$dy$9088$gDo33)
                                       ((case-lambda
                                          ((g$t$9089$gDo33)
                                           ((case-lambda
                                              ((g$ls/false$9090$gDo33)
                                               (if g$ls/false$9090$gDo33
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$9091$gDo33)
                                                      (list
                                                        (g$scheme-stx$7940$gDo33
                                                          'quote)
                                                        (cons
                                                          g$dx$9091$gDo33
                                                          g$dy$9088$gDo33))))
                                                   g$ls/false$9090$gDo33)
                                                 ((case-lambda
                                                    ((g$t$9092$gDo33)
                                                     ((case-lambda
                                                        ((g$ls/false$9093$gDo33)
                                                         (if g$ls/false$9093$gDo33
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$9094$gDo33)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9095$gDo33)
                                                                        (if g$ls/false$9095$gDo33
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7940$gDo33
                                                                                   'list)
                                                                                 g$x$9084$gDo33)))
                                                                            g$ls/false$9095$gDo33)
                                                                          ((case-lambda
                                                                             ((g$t$9096$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9097$gDo33)
                                                                                  (if g$ls/false$9097$gDo33
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7940$gDo33
                                                                                             'cons)
                                                                                           g$x$9084$gDo33
                                                                                           g$y$9085$gDo33)))
                                                                                      g$ls/false$9097$gDo33)
                                                                                    (g$syntax-violation$8109$gDo33
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$9096$gDo33))))
                                                                               (g$syntax-dispatch$7997$gDo33
                                                                                 g$t$9096$gDo33
                                                                                 '_))))
                                                                           g$t$9094$gDo33))))
                                                                     (g$syntax-dispatch$7997$gDo33
                                                                       g$t$9094$gDo33
                                                                       '()))))
                                                                 g$dy$9088$gDo33)))
                                                             g$ls/false$9093$gDo33)
                                                           (g$syntax-violation$8109$gDo33
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$9092$gDo33))))
                                                      (g$syntax-dispatch$7997$gDo33
                                                        g$t$9092$gDo33
                                                        '_))))
                                                  g$t$9089$gDo33))))
                                            (g$syntax-dispatch$7997$gDo33
                                              g$t$9089$gDo33
                                              '(#(scheme-id quote) any)))))
                                        g$x$9084$gDo33)))
                                    g$ls/false$9087$gDo33)
                                  ((case-lambda
                                     ((g$t$9098$gDo33)
                                      ((case-lambda
                                         ((g$ls/false$9099$gDo33)
                                          (if g$ls/false$9099$gDo33
                                            (apply
                                              (case-lambda
                                                ((g$stuff$9100$gDo33)
                                                 (g$cons*$5065$gDo33
                                                   (g$scheme-stx$7940$gDo33
                                                     'list)
                                                   g$x$9084$gDo33
                                                   g$stuff$9100$gDo33)))
                                              g$ls/false$9099$gDo33)
                                            ((case-lambda
                                               ((g$t$9101$gDo33)
                                                ((case-lambda
                                                   ((g$ls/false$9102$gDo33)
                                                    (if g$ls/false$9102$gDo33
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7940$gDo33
                                                               'cons)
                                                             g$x$9084$gDo33
                                                             g$y$9085$gDo33)))
                                                        g$ls/false$9102$gDo33)
                                                      (g$syntax-violation$8109$gDo33
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$9101$gDo33))))
                                                 (g$syntax-dispatch$7997$gDo33
                                                   g$t$9101$gDo33
                                                   '_))))
                                             g$t$9098$gDo33))))
                                       (g$syntax-dispatch$7997$gDo33
                                         g$t$9098$gDo33
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$9086$gDo33))))
                             (g$syntax-dispatch$7997$gDo33
                               g$t$9086$gDo33
                               '(#(scheme-id quote) any)))))
                         g$y$9085$gDo33))))
                   (g$quasiappend$8994$gDo33
                     (case-lambda
                       ((g$x$9071$gDo33 g$y$9072$gDo33)
                        ((case-lambda
                           ((g$ls$9073$gDo33)
                            (if (null? g$ls$9073$gDo33)
                              (list (g$scheme-stx$7940$gDo33 'quote) '())
                              (if (null? (cdr g$ls$9073$gDo33))
                                (car g$ls$9073$gDo33)
                                (g$cons*$5065$gDo33
                                  (g$scheme-stx$7940$gDo33 'append)
                                  g$ls$9073$gDo33)))))
                         ((letrec ((g$f$9074$gDo33
                                     (case-lambda
                                       ((g$x$9075$gDo33)
                                        (if (null? g$x$9075$gDo33)
                                          ((case-lambda
                                             ((g$t$9076$gDo33)
                                              ((case-lambda
                                                 ((g$ls/false$9077$gDo33)
                                                  (if g$ls/false$9077$gDo33
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$9077$gDo33)
                                                    ((case-lambda
                                                       ((g$t$9078$gDo33)
                                                        ((case-lambda
                                                           ((g$ls/false$9079$gDo33)
                                                            (if g$ls/false$9079$gDo33
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$9072$gDo33)))
                                                                g$ls/false$9079$gDo33)
                                                              (g$syntax-violation$8109$gDo33
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9078$gDo33))))
                                                         (g$syntax-dispatch$7997$gDo33
                                                           g$t$9078$gDo33
                                                           '_))))
                                                     g$t$9076$gDo33))))
                                               (g$syntax-dispatch$7997$gDo33
                                                 g$t$9076$gDo33
                                                 '(#(scheme-id quote) ())))))
                                           g$y$9072$gDo33)
                                          ((case-lambda
                                             ((g$t$9080$gDo33)
                                              ((case-lambda
                                                 ((g$ls/false$9081$gDo33)
                                                  (if g$ls/false$9081$gDo33
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$9074$gDo33
                                                           (cdr g$x$9075$gDo33))))
                                                      g$ls/false$9081$gDo33)
                                                    ((case-lambda
                                                       ((g$t$9082$gDo33)
                                                        ((case-lambda
                                                           ((g$ls/false$9083$gDo33)
                                                            (if g$ls/false$9083$gDo33
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$9075$gDo33)
                                                                     (g$f$9074$gDo33
                                                                       (cdr g$x$9075$gDo33)))))
                                                                g$ls/false$9083$gDo33)
                                                              (g$syntax-violation$8109$gDo33
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9082$gDo33))))
                                                         (g$syntax-dispatch$7997$gDo33
                                                           g$t$9082$gDo33
                                                           '_))))
                                                     g$t$9080$gDo33))))
                                               (g$syntax-dispatch$7997$gDo33
                                                 g$t$9080$gDo33
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$9075$gDo33)))))))
                            g$f$9074$gDo33)
                          g$x$9071$gDo33)))))
                   (g$quasivector$8995$gDo33
                     (case-lambda
                       ((g$x$9046$gDo33)
                        ((case-lambda
                           ((g$pat-x$9047$gDo33)
                            ((case-lambda
                               ((g$t$9048$gDo33)
                                ((case-lambda
                                   ((g$ls/false$9049$gDo33)
                                    (if g$ls/false$9049$gDo33
                                      (apply
                                        (case-lambda
                                          ((g$x*$9050$gDo33)
                                           (list
                                             (g$scheme-stx$7940$gDo33 'quote)
                                             (list->vector g$x*$9050$gDo33))))
                                        g$ls/false$9049$gDo33)
                                      ((case-lambda
                                         ((g$t$9051$gDo33)
                                          ((case-lambda
                                             ((g$ls/false$9052$gDo33)
                                              (if g$ls/false$9052$gDo33
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$9053$gDo33
                                                                 (case-lambda
                                                                   ((g$x$9054$gDo33
                                                                      g$k$9055$gDo33)
                                                                    ((case-lambda
                                                                       ((g$t$9056$gDo33)
                                                                        ((case-lambda
                                                                           ((g$ls/false$9057$gDo33)
                                                                            (if g$ls/false$9057$gDo33
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$9058$gDo33)
                                                                                   (g$k$9055$gDo33
                                                                                     (g$map$5063$gDo33
                                                                                       (case-lambda
                                                                                         ((g$x$9059$gDo33)
                                                                                          (list
                                                                                            (g$scheme-stx$7940$gDo33
                                                                                              'quote)
                                                                                            g$x$9059$gDo33)))
                                                                                       g$x*$9058$gDo33))))
                                                                                g$ls/false$9057$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$t$9060$gDo33)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$9061$gDo33)
                                                                                      (if g$ls/false$9061$gDo33
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$9062$gDo33)
                                                                                             (g$k$9055$gDo33
                                                                                               g$x*$9062$gDo33)))
                                                                                          g$ls/false$9061$gDo33)
                                                                                        ((case-lambda
                                                                                           ((g$t$9063$gDo33)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$9064$gDo33)
                                                                                                (if g$ls/false$9064$gDo33
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$9065$gDo33
                                                                                                         g$y$9066$gDo33)
                                                                                                       (g$f$9053$gDo33
                                                                                                         g$y$9066$gDo33
                                                                                                         (case-lambda
                                                                                                           ((g$ls$9067$gDo33)
                                                                                                            (g$k$9055$gDo33
                                                                                                              (cons
                                                                                                                g$x$9065$gDo33
                                                                                                                g$ls$9067$gDo33)))))))
                                                                                                    g$ls/false$9064$gDo33)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$9068$gDo33)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$9069$gDo33)
                                                                                                          (if g$ls/false$9069$gDo33
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7940$gDo33
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$9047$gDo33)))
                                                                                                              g$ls/false$9069$gDo33)
                                                                                                            (g$syntax-violation$8109$gDo33
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$9068$gDo33))))
                                                                                                       (g$syntax-dispatch$7997$gDo33
                                                                                                         g$t$9068$gDo33
                                                                                                         '_))))
                                                                                                   g$t$9063$gDo33))))
                                                                                             (g$syntax-dispatch$7997$gDo33
                                                                                               g$t$9063$gDo33
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$9060$gDo33))))
                                                                                   (g$syntax-dispatch$7997$gDo33
                                                                                     g$t$9060$gDo33
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$9056$gDo33))))
                                                                         (g$syntax-dispatch$7997$gDo33
                                                                           g$t$9056$gDo33
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$9054$gDo33)))))
                                                        g$f$9053$gDo33)
                                                      g$x$9046$gDo33
                                                      (case-lambda
                                                        ((g$ls$9070$gDo33)
                                                         (g$cons*$5065$gDo33
                                                           (g$scheme-stx$7940$gDo33
                                                             'vector)
                                                           g$ls$9070$gDo33))))))
                                                  g$ls/false$9052$gDo33)
                                                (g$syntax-violation$8109$gDo33
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$9051$gDo33))))
                                           (g$syntax-dispatch$7997$gDo33
                                             g$t$9051$gDo33
                                             '_))))
                                       g$t$9048$gDo33))))
                                 (g$syntax-dispatch$7997$gDo33
                                   g$t$9048$gDo33
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$9047$gDo33)))
                         g$x$9046$gDo33))))
                   (g$vquasi$8996$gDo33
                     (case-lambda
                       ((g$p$9029$gDo33 g$lev$9030$gDo33)
                        ((case-lambda
                           ((g$t$9031$gDo33)
                            ((case-lambda
                               ((g$ls/false$9032$gDo33)
                                (if g$ls/false$9032$gDo33
                                  (apply
                                    (case-lambda
                                      ((g$p$9033$gDo33 g$q$9034$gDo33)
                                       ((case-lambda
                                          ((g$t$9035$gDo33)
                                           ((case-lambda
                                              ((g$ls/false$9036$gDo33)
                                               (if g$ls/false$9036$gDo33
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9037$gDo33)
                                                      (if (= g$lev$9030$gDo33
                                                             '0)
                                                        (g$quasicons*$8992$gDo33
                                                          g$p$9037$gDo33
                                                          (g$vquasi$8996$gDo33
                                                            g$q$9034$gDo33
                                                            g$lev$9030$gDo33))
                                                        (g$quasicons$8993$gDo33
                                                          (g$quasicons$8993$gDo33
                                                            (g$datum$8976$gDo33
                                                              'unquote)
                                                            (g$quasi$8997$gDo33
                                                              g$p$9037$gDo33
                                                              (- g$lev$9030$gDo33
                                                                 '1)))
                                                          (g$vquasi$8996$gDo33
                                                            g$q$9034$gDo33
                                                            g$lev$9030$gDo33)))))
                                                   g$ls/false$9036$gDo33)
                                                 ((case-lambda
                                                    ((g$t$9038$gDo33)
                                                     ((case-lambda
                                                        ((g$ls/false$9039$gDo33)
                                                         (if g$ls/false$9039$gDo33
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$9040$gDo33)
                                                                (if (= g$lev$9030$gDo33
                                                                       '0)
                                                                  (g$quasiappend$8994$gDo33
                                                                    g$p$9040$gDo33
                                                                    (g$vquasi$8996$gDo33
                                                                      g$q$9034$gDo33
                                                                      g$lev$9030$gDo33))
                                                                  (g$quasicons$8993$gDo33
                                                                    (g$quasicons$8993$gDo33
                                                                      (g$datum$8976$gDo33
                                                                        'unquote-splicing)
                                                                      (g$quasi$8997$gDo33
                                                                        g$p$9040$gDo33
                                                                        (- g$lev$9030$gDo33
                                                                           '1)))
                                                                    (g$vquasi$8996$gDo33
                                                                      g$q$9034$gDo33
                                                                      g$lev$9030$gDo33)))))
                                                             g$ls/false$9039$gDo33)
                                                           ((case-lambda
                                                              ((g$t$9041$gDo33)
                                                               ((case-lambda
                                                                  ((g$ls/false$9042$gDo33)
                                                                   (if g$ls/false$9042$gDo33
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$9043$gDo33)
                                                                          (g$quasicons$8993$gDo33
                                                                            (g$quasi$8997$gDo33
                                                                              g$p$9043$gDo33
                                                                              g$lev$9030$gDo33)
                                                                            (g$vquasi$8996$gDo33
                                                                              g$q$9034$gDo33
                                                                              g$lev$9030$gDo33))))
                                                                       g$ls/false$9042$gDo33)
                                                                     (g$syntax-violation$8109$gDo33
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$9041$gDo33))))
                                                                (g$syntax-dispatch$7997$gDo33
                                                                  g$t$9041$gDo33
                                                                  'any))))
                                                            g$t$9038$gDo33))))
                                                      (g$syntax-dispatch$7997$gDo33
                                                        g$t$9038$gDo33
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$9035$gDo33))))
                                            (g$syntax-dispatch$7997$gDo33
                                              g$t$9035$gDo33
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$9033$gDo33)))
                                    g$ls/false$9032$gDo33)
                                  ((case-lambda
                                     ((g$t$9044$gDo33)
                                      ((case-lambda
                                         ((g$ls/false$9045$gDo33)
                                          (if g$ls/false$9045$gDo33
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7940$gDo33
                                                     'quote)
                                                   '())))
                                              g$ls/false$9045$gDo33)
                                            (g$syntax-violation$8109$gDo33
                                              '#f
                                              '"invalid syntax"
                                              g$t$9044$gDo33))))
                                       (g$syntax-dispatch$7997$gDo33
                                         g$t$9044$gDo33
                                         '()))))
                                   g$t$9031$gDo33))))
                             (g$syntax-dispatch$7997$gDo33
                               g$t$9031$gDo33
                               '(any . any)))))
                         g$p$9029$gDo33))))
                   (g$quasi$8997$gDo33
                     (case-lambda
                       ((g$p$9002$gDo33 g$lev$9003$gDo33)
                        ((case-lambda
                           ((g$t$9004$gDo33)
                            ((case-lambda
                               ((g$ls/false$9005$gDo33)
                                (if g$ls/false$9005$gDo33
                                  (apply
                                    (case-lambda
                                      ((g$p$9006$gDo33)
                                       (if (= g$lev$9003$gDo33 '0)
                                         g$p$9006$gDo33
                                         (g$quasicons$8993$gDo33
                                           (g$datum$8976$gDo33 'unquote)
                                           (g$quasi$8997$gDo33
                                             (list g$p$9006$gDo33)
                                             (- g$lev$9003$gDo33 '1))))))
                                    g$ls/false$9005$gDo33)
                                  ((case-lambda
                                     ((g$t$9007$gDo33)
                                      ((case-lambda
                                         ((g$ls/false$9008$gDo33)
                                          (if g$ls/false$9008$gDo33
                                            (apply
                                              (case-lambda
                                                ((g$p$9009$gDo33 g$q$9010$gDo33)
                                                 (if (= g$lev$9003$gDo33 '0)
                                                   (g$quasicons*$8992$gDo33
                                                     g$p$9009$gDo33
                                                     (g$quasi$8997$gDo33
                                                       g$q$9010$gDo33
                                                       g$lev$9003$gDo33))
                                                   (g$quasicons$8993$gDo33
                                                     (g$quasicons$8993$gDo33
                                                       (g$datum$8976$gDo33
                                                         'unquote)
                                                       (g$quasi$8997$gDo33
                                                         g$p$9009$gDo33
                                                         (- g$lev$9003$gDo33
                                                            '1)))
                                                     (g$quasi$8997$gDo33
                                                       g$q$9010$gDo33
                                                       g$lev$9003$gDo33)))))
                                              g$ls/false$9008$gDo33)
                                            ((case-lambda
                                               ((g$t$9011$gDo33)
                                                ((case-lambda
                                                   ((g$ls/false$9012$gDo33)
                                                    (if g$ls/false$9012$gDo33
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$9013$gDo33
                                                             g$q$9014$gDo33)
                                                           (if (= g$lev$9003$gDo33
                                                                  '0)
                                                             (g$quasiappend$8994$gDo33
                                                               g$p$9013$gDo33
                                                               (g$quasi$8997$gDo33
                                                                 g$q$9014$gDo33
                                                                 g$lev$9003$gDo33))
                                                             (g$quasicons$8993$gDo33
                                                               (g$quasicons$8993$gDo33
                                                                 (g$datum$8976$gDo33
                                                                   'unquote-splicing)
                                                                 (g$quasi$8997$gDo33
                                                                   g$p$9013$gDo33
                                                                   (- g$lev$9003$gDo33
                                                                      '1)))
                                                               (g$quasi$8997$gDo33
                                                                 g$q$9014$gDo33
                                                                 g$lev$9003$gDo33)))))
                                                        g$ls/false$9012$gDo33)
                                                      ((case-lambda
                                                         ((g$t$9015$gDo33)
                                                          ((case-lambda
                                                             ((g$ls/false$9016$gDo33)
                                                              (if g$ls/false$9016$gDo33
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$9017$gDo33)
                                                                     (g$quasicons$8993$gDo33
                                                                       (g$datum$8976$gDo33
                                                                         'quasiquote)
                                                                       (g$quasi$8997$gDo33
                                                                         (list
                                                                           g$p$9017$gDo33)
                                                                         (+ g$lev$9003$gDo33
                                                                            '1)))))
                                                                  g$ls/false$9016$gDo33)
                                                                ((case-lambda
                                                                   ((g$t$9018$gDo33)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9019$gDo33)
                                                                        (if g$ls/false$9019$gDo33
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$9020$gDo33
                                                                                 g$q$9021$gDo33)
                                                                               (g$quasicons$8993$gDo33
                                                                                 (g$quasi$8997$gDo33
                                                                                   g$p$9020$gDo33
                                                                                   g$lev$9003$gDo33)
                                                                                 (g$quasi$8997$gDo33
                                                                                   g$q$9021$gDo33
                                                                                   g$lev$9003$gDo33))))
                                                                            g$ls/false$9019$gDo33)
                                                                          ((case-lambda
                                                                             ((g$t$9022$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9023$gDo33)
                                                                                  (if (if g$ls/false$9023$gDo33
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$9024$gDo33)
                                                                                               (not (g$stx?$7691$gDo33
                                                                                                      g$x$9024$gDo33))))
                                                                                            g$ls/false$9023$gDo33))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$9025$gDo33)
                                                                                         (g$quasivector$8995$gDo33
                                                                                           (g$vquasi$8996$gDo33
                                                                                             g$x$9025$gDo33
                                                                                             g$lev$9003$gDo33))))
                                                                                      g$ls/false$9023$gDo33)
                                                                                    ((case-lambda
                                                                                       ((g$t$9026$gDo33)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9027$gDo33)
                                                                                            (if g$ls/false$9027$gDo33
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9028$gDo33)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7940$gDo33
                                                                                                       'quote)
                                                                                                     g$p$9028$gDo33)))
                                                                                                g$ls/false$9027$gDo33)
                                                                                              (g$syntax-violation$8109$gDo33
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9026$gDo33))))
                                                                                         (g$syntax-dispatch$7997$gDo33
                                                                                           g$t$9026$gDo33
                                                                                           'any))))
                                                                                     g$t$9022$gDo33))))
                                                                               (g$syntax-dispatch$7997$gDo33
                                                                                 g$t$9022$gDo33
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9018$gDo33))))
                                                                     (g$syntax-dispatch$7997$gDo33
                                                                       g$t$9018$gDo33
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9015$gDo33))))
                                                           (g$syntax-dispatch$7997$gDo33
                                                             g$t$9015$gDo33
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$9011$gDo33))))
                                                 (g$syntax-dispatch$7997$gDo33
                                                   g$t$9011$gDo33
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9007$gDo33))))
                                       (g$syntax-dispatch$7997$gDo33
                                         g$t$9007$gDo33
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$9004$gDo33))))
                             (g$syntax-dispatch$7997$gDo33
                               g$t$9004$gDo33
                               '(#(scheme-id unquote) any)))))
                         g$p$9002$gDo33)))))
           (case-lambda
             ((g$x$8998$gDo33)
              ((case-lambda
                 ((g$t$8999$gDo33)
                  ((case-lambda
                     ((g$ls/false$9000$gDo33)
                      (if g$ls/false$9000$gDo33
                        (apply
                          (case-lambda
                            ((g$e$9001$gDo33)
                             (g$quasi$8997$gDo33 g$e$9001$gDo33 '0)))
                          g$ls/false$9000$gDo33)
                        (g$syntax-violation$8109$gDo33
                          '#f
                          '"invalid syntax"
                          g$t$8999$gDo33))))
                   (g$syntax-dispatch$7997$gDo33 g$t$8999$gDo33 '(_ any)))))
               g$x$8998$gDo33))))))))
   (g$quasisyntax-macro$7989$gDo33
     g$quasisyntax-macro$11492$gDo33
     ((case-lambda
        (()
         (letrec* ((g$quasi$9108$gDo33
                     (case-lambda
                       ((g$p$9122$gDo33 g$lev$9123$gDo33)
                        ((case-lambda
                           ((g$t$9124$gDo33)
                            ((case-lambda
                               ((g$ls/false$9125$gDo33)
                                (if g$ls/false$9125$gDo33
                                  (apply
                                    (case-lambda
                                      ((g$p$9126$gDo33)
                                       (if (= g$lev$9123$gDo33 '0)
                                         ((case-lambda
                                            ((g$g$9127$gDo33)
                                             (values
                                               (list g$g$9127$gDo33)
                                               (list g$p$9126$gDo33)
                                               g$g$9127$gDo33)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$9108$gDo33
                                                g$p$9126$gDo33
                                                (- g$lev$9123$gDo33 '1))))
                                           (case-lambda
                                             ((g$lhs*$9131$gDo33
                                                g$rhs*$9132$gDo33
                                                g$p$9133$gDo33)
                                              ((case-lambda
                                                 ((g$p$9134$gDo33
                                                    g$rhs*$9135$gDo33
                                                    g$lhs*$9136$gDo33)
                                                  (values
                                                    g$lhs*$9136$gDo33
                                                    g$rhs*$9135$gDo33
                                                    (list
                                                      'unsyntax
                                                      g$p$9134$gDo33))))
                                               g$p$9133$gDo33
                                               g$rhs*$9132$gDo33
                                               g$lhs*$9131$gDo33)))))))
                                    g$ls/false$9125$gDo33)
                                  ((case-lambda
                                     ((g$t$9137$gDo33)
                                      ((case-lambda
                                         ((g$ls/false$9138$gDo33)
                                          (if (if g$ls/false$9138$gDo33
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$9123$gDo33 '0)))
                                                    g$ls/false$9138$gDo33))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$8109$gDo33
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$9122$gDo33)))
                                              g$ls/false$9138$gDo33)
                                            ((case-lambda
                                               ((g$t$9139$gDo33)
                                                ((case-lambda
                                                   ((g$ls/false$9140$gDo33)
                                                    (if g$ls/false$9140$gDo33
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$9141$gDo33
                                                             g$q$9142$gDo33)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$9108$gDo33
                                                                  g$q$9142$gDo33
                                                                  g$lev$9123$gDo33)))
                                                             (case-lambda
                                                               ((g$lhs*$9146$gDo33
                                                                  g$rhs*$9147$gDo33
                                                                  g$q$9148$gDo33)
                                                                ((case-lambda
                                                                   ((g$q$9149$gDo33
                                                                      g$rhs*$9150$gDo33
                                                                      g$lhs*$9151$gDo33)
                                                                    (if (= g$lev$9123$gDo33
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$9152$gDo33)
                                                                          (values
                                                                            (append
                                                                              g$g*$9152$gDo33
                                                                              g$lhs*$9151$gDo33)
                                                                            (append
                                                                              g$p*$9141$gDo33
                                                                              g$rhs*$9150$gDo33)
                                                                            (append
                                                                              g$g*$9152$gDo33
                                                                              g$q$9149$gDo33))))
                                                                       (g$map$5063$gDo33
                                                                         (case-lambda
                                                                           ((g$x$9153$gDo33)
                                                                            (gensym)))
                                                                         g$p*$9141$gDo33))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$9108$gDo33
                                                                             g$p*$9141$gDo33
                                                                             (- g$lev$9123$gDo33
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$9157$gDo33
                                                                             g$rhs2*$9158$gDo33
                                                                             g$p*$9159$gDo33)
                                                                           ((case-lambda
                                                                              ((g$p*$9160$gDo33
                                                                                 g$rhs2*$9161$gDo33
                                                                                 g$lhs2*$9162$gDo33)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$9162$gDo33
                                                                                   g$lhs*$9151$gDo33)
                                                                                 (append
                                                                                   g$rhs2*$9161$gDo33
                                                                                   g$rhs*$9150$gDo33)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$9160$gDo33)
                                                                                   g$q$9149$gDo33))))
                                                                            g$p*$9159$gDo33
                                                                            g$rhs2*$9158$gDo33
                                                                            g$lhs2*$9157$gDo33)))))))
                                                                 g$q$9148$gDo33
                                                                 g$rhs*$9147$gDo33
                                                                 g$lhs*$9146$gDo33))))))
                                                        g$ls/false$9140$gDo33)
                                                      ((case-lambda
                                                         ((g$t$9163$gDo33)
                                                          ((case-lambda
                                                             ((g$ls/false$9164$gDo33)
                                                              (if g$ls/false$9164$gDo33
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$9165$gDo33
                                                                       g$q$9166$gDo33)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$9108$gDo33
                                                                            g$q$9166$gDo33
                                                                            g$lev$9123$gDo33)))
                                                                       (case-lambda
                                                                         ((g$lhs*$9170$gDo33
                                                                            g$rhs*$9171$gDo33
                                                                            g$q$9172$gDo33)
                                                                          ((case-lambda
                                                                             ((g$q$9173$gDo33
                                                                                g$rhs*$9174$gDo33
                                                                                g$lhs*$9175$gDo33)
                                                                              (if (= g$lev$9123$gDo33
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$9176$gDo33)
                                                                                    (values
                                                                                      (append
                                                                                        (g$map$5063$gDo33
                                                                                          (case-lambda
                                                                                            ((g$g$9177$gDo33)
                                                                                             (cons
                                                                                               g$g$9177$gDo33
                                                                                               '(...))))
                                                                                          g$g*$9176$gDo33)
                                                                                        g$lhs*$9175$gDo33)
                                                                                      (append
                                                                                        g$p*$9165$gDo33
                                                                                        g$rhs*$9174$gDo33)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (g$map$5063$gDo33
                                                                                            (case-lambda
                                                                                              ((g$g$9178$gDo33)
                                                                                               (cons
                                                                                                 g$g$9178$gDo33
                                                                                                 '(...))))
                                                                                            g$g*$9176$gDo33))
                                                                                        g$q$9173$gDo33))))
                                                                                 (g$map$5063$gDo33
                                                                                   (case-lambda
                                                                                     ((g$x$9179$gDo33)
                                                                                      (gensym)))
                                                                                   g$p*$9165$gDo33))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$9108$gDo33
                                                                                       g$p*$9165$gDo33
                                                                                       (- g$lev$9123$gDo33
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$9183$gDo33
                                                                                       g$rhs2*$9184$gDo33
                                                                                       g$p*$9185$gDo33)
                                                                                     ((case-lambda
                                                                                        ((g$p*$9186$gDo33
                                                                                           g$rhs2*$9187$gDo33
                                                                                           g$lhs2*$9188$gDo33)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$9188$gDo33
                                                                                             g$lhs*$9175$gDo33)
                                                                                           (append
                                                                                             g$rhs2*$9187$gDo33
                                                                                             g$rhs*$9174$gDo33)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$9186$gDo33)
                                                                                             g$q$9173$gDo33))))
                                                                                      g$p*$9185$gDo33
                                                                                      g$rhs2*$9184$gDo33
                                                                                      g$lhs2*$9183$gDo33)))))))
                                                                           g$q$9172$gDo33
                                                                           g$rhs*$9171$gDo33
                                                                           g$lhs*$9170$gDo33))))))
                                                                  g$ls/false$9164$gDo33)
                                                                ((case-lambda
                                                                   ((g$t$9189$gDo33)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9190$gDo33)
                                                                        (if (if g$ls/false$9190$gDo33
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$9123$gDo33
                                                                                        '0)))
                                                                                  g$ls/false$9190$gDo33))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$8109$gDo33
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$9122$gDo33)))
                                                                            g$ls/false$9190$gDo33)
                                                                          ((case-lambda
                                                                             ((g$t$9191$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9192$gDo33)
                                                                                  (if g$ls/false$9192$gDo33
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$9193$gDo33)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$9108$gDo33
                                                                                                g$p$9193$gDo33
                                                                                                (+ g$lev$9123$gDo33
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$9197$gDo33
                                                                                                g$rhs*$9198$gDo33
                                                                                                g$p$9199$gDo33)
                                                                                              ((case-lambda
                                                                                                 ((g$p$9200$gDo33
                                                                                                    g$rhs*$9201$gDo33
                                                                                                    g$lhs*$9202$gDo33)
                                                                                                  (values
                                                                                                    g$lhs*$9202$gDo33
                                                                                                    g$rhs*$9201$gDo33
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$9200$gDo33))))
                                                                                               g$p$9199$gDo33
                                                                                               g$rhs*$9198$gDo33
                                                                                               g$lhs*$9197$gDo33))))))
                                                                                      g$ls/false$9192$gDo33)
                                                                                    ((case-lambda
                                                                                       ((g$t$9203$gDo33)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9204$gDo33)
                                                                                            (if g$ls/false$9204$gDo33
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$9205$gDo33
                                                                                                     g$q$9206$gDo33)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$9108$gDo33
                                                                                                          g$p$9205$gDo33
                                                                                                          g$lev$9123$gDo33)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$9213$gDo33
                                                                                                          g$rhs*$9214$gDo33
                                                                                                          g$p$9215$gDo33)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$9108$gDo33
                                                                                                               g$q$9206$gDo33
                                                                                                               g$lev$9123$gDo33)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$9216$gDo33
                                                                                                               g$rhs2*$9217$gDo33
                                                                                                               g$q$9218$gDo33)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$9219$gDo33
                                                                                                                   g$rhs2*$9220$gDo33
                                                                                                                   g$lhs2*$9221$gDo33
                                                                                                                   g$p$9222$gDo33
                                                                                                                   g$rhs*$9223$gDo33
                                                                                                                   g$lhs*$9224$gDo33)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$9221$gDo33
                                                                                                                     g$lhs*$9224$gDo33)
                                                                                                                   (append
                                                                                                                     g$rhs2*$9220$gDo33
                                                                                                                     g$rhs*$9223$gDo33)
                                                                                                                   (cons
                                                                                                                     g$p$9222$gDo33
                                                                                                                     g$q$9219$gDo33))))
                                                                                                              g$q$9218$gDo33
                                                                                                              g$rhs2*$9217$gDo33
                                                                                                              g$lhs2*$9216$gDo33
                                                                                                              g$p$9215$gDo33
                                                                                                              g$rhs*$9214$gDo33
                                                                                                              g$lhs*$9213$gDo33)))))))))
                                                                                                g$ls/false$9204$gDo33)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9225$gDo33)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9226$gDo33)
                                                                                                      (if g$ls/false$9226$gDo33
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$9227$gDo33)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$9108$gDo33
                                                                                                                    g$x*$9227$gDo33
                                                                                                                    g$lev$9123$gDo33)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$9231$gDo33
                                                                                                                    g$rhs*$9232$gDo33
                                                                                                                    g$x*$9233$gDo33)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$9234$gDo33
                                                                                                                        g$rhs*$9235$gDo33
                                                                                                                        g$lhs*$9236$gDo33)
                                                                                                                      (values
                                                                                                                        g$lhs*$9236$gDo33
                                                                                                                        g$rhs*$9235$gDo33
                                                                                                                        (list->vector
                                                                                                                          g$x*$9234$gDo33))))
                                                                                                                   g$x*$9233$gDo33
                                                                                                                   g$rhs*$9232$gDo33
                                                                                                                   g$lhs*$9231$gDo33))))))
                                                                                                          g$ls/false$9226$gDo33)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9237$gDo33)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9238$gDo33)
                                                                                                                (if g$ls/false$9238$gDo33
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$9122$gDo33)))
                                                                                                                    g$ls/false$9238$gDo33)
                                                                                                                  (g$syntax-violation$8109$gDo33
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9237$gDo33))))
                                                                                                             (g$syntax-dispatch$7997$gDo33
                                                                                                               g$t$9237$gDo33
                                                                                                               '_))))
                                                                                                         g$t$9225$gDo33))))
                                                                                                   (g$syntax-dispatch$7997$gDo33
                                                                                                     g$t$9225$gDo33
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$9203$gDo33))))
                                                                                         (g$syntax-dispatch$7997$gDo33
                                                                                           g$t$9203$gDo33
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$9191$gDo33))))
                                                                               (g$syntax-dispatch$7997$gDo33
                                                                                 g$t$9191$gDo33
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$9189$gDo33))))
                                                                     (g$syntax-dispatch$7997$gDo33
                                                                       g$t$9189$gDo33
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$9163$gDo33))))
                                                           (g$syntax-dispatch$7997$gDo33
                                                             g$t$9163$gDo33
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$9139$gDo33))))
                                                 (g$syntax-dispatch$7997$gDo33
                                                   g$t$9139$gDo33
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$9137$gDo33))))
                                       (g$syntax-dispatch$7997$gDo33
                                         g$t$9137$gDo33
                                         '#(scheme-id unsyntax)))))
                                   g$t$9124$gDo33))))
                             (g$syntax-dispatch$7997$gDo33
                               g$t$9124$gDo33
                               '(#(scheme-id unsyntax) any)))))
                         g$p$9122$gDo33)))))
           (case-lambda
             ((g$x$9109$gDo33)
              ((case-lambda
                 ((g$t$9110$gDo33)
                  ((case-lambda
                     ((g$ls/false$9111$gDo33)
                      (if g$ls/false$9111$gDo33
                        (apply
                          (case-lambda
                            ((g$e$9112$gDo33)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$9108$gDo33 g$e$9112$gDo33 '0)))
                               (case-lambda
                                 ((g$lhs*$9116$gDo33
                                    g$rhs*$9117$gDo33
                                    g$v$9118$gDo33)
                                  ((case-lambda
                                     ((g$v$9119$gDo33
                                        g$rhs*$9120$gDo33
                                        g$lhs*$9121$gDo33)
                                      (g$bless$7960$gDo33
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$9120$gDo33)
                                          '()
                                          (list
                                            g$lhs*$9121$gDo33
                                            (list 'syntax g$v$9119$gDo33))))))
                                   g$v$9118$gDo33
                                   g$rhs*$9117$gDo33
                                   g$lhs*$9116$gDo33))))))
                          g$ls/false$9111$gDo33)
                        (g$syntax-violation$8109$gDo33
                          '#f
                          '"invalid syntax"
                          g$t$9110$gDo33))))
                   (g$syntax-dispatch$7997$gDo33 g$t$9110$gDo33 '(_ any)))))
               g$x$9109$gDo33))))))))
   (g$define-struct-macro$7990$gDo33
     g$define-struct-macro$11493$gDo33
     (case-lambda
       ((g$stx$9239$gDo33)
        (g$syntax-violation$8109$gDo33
          '#f
          '"define-struct not supported"
          g$stx$9239$gDo33))))
   (g$define-record-type-macro$7991$gDo33
     g$define-record-type-macro$11494$gDo33
     (case-lambda
       ((g$x$9240$gDo33)
        (letrec* ((g$id$9241$gDo33
                    (case-lambda
                      ((g$ctxt$9493$gDo33 . g$str*$9494$gDo33)
                       (g$datum->syntax$8111$gDo33
                         g$ctxt$9493$gDo33
                         (string->symbol
                           (apply
                             string-append
                             (g$map$5063$gDo33
                               (case-lambda
                                 ((g$x$9495$gDo33)
                                  (if (symbol? g$x$9495$gDo33)
                                    (symbol->string g$x$9495$gDo33)
                                    (if (string? g$x$9495$gDo33)
                                      g$x$9495$gDo33
                                      (assertion-violation
                                        'define-record-type
                                        '"BUG")))))
                               g$str*$9494$gDo33)))))))
                  (g$get-record-name$9242$gDo33
                    (case-lambda
                      ((g$spec$9484$gDo33)
                       ((case-lambda
                          ((g$t$9485$gDo33)
                           ((case-lambda
                              ((g$ls/false$9486$gDo33)
                               (if g$ls/false$9486$gDo33
                                 (apply
                                   (case-lambda
                                     ((g$foo$9487$gDo33
                                        g$make-foo$9488$gDo33
                                        g$foo?$9489$gDo33)
                                      g$foo$9487$gDo33))
                                   g$ls/false$9486$gDo33)
                                 ((case-lambda
                                    ((g$t$9490$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$9491$gDo33)
                                         (if g$ls/false$9491$gDo33
                                           (apply
                                             (case-lambda
                                               ((g$foo$9492$gDo33)
                                                g$foo$9492$gDo33))
                                             g$ls/false$9491$gDo33)
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$t$9490$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$9490$gDo33
                                        'any))))
                                  g$t$9485$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$9485$gDo33
                              '(any any any)))))
                        g$spec$9484$gDo33))))
                  (g$get-record-constructor-name$9243$gDo33
                    (case-lambda
                      ((g$spec$9474$gDo33)
                       ((case-lambda
                          ((g$t$9475$gDo33)
                           ((case-lambda
                              ((g$ls/false$9476$gDo33)
                               (if g$ls/false$9476$gDo33
                                 (apply
                                   (case-lambda
                                     ((g$foo$9477$gDo33
                                        g$make-foo$9478$gDo33
                                        g$foo?$9479$gDo33)
                                      g$make-foo$9478$gDo33))
                                   g$ls/false$9476$gDo33)
                                 ((case-lambda
                                    ((g$t$9480$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$9481$gDo33)
                                         (if (if g$ls/false$9481$gDo33
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9482$gDo33)
                                                      (g$id?$7719$gDo33
                                                        g$foo$9482$gDo33)))
                                                   g$ls/false$9481$gDo33))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9483$gDo33)
                                                (g$id$9241$gDo33
                                                  g$foo$9483$gDo33
                                                  '"make-"
                                                  (g$stx->datum$7730$gDo33
                                                    g$foo$9483$gDo33))))
                                             g$ls/false$9481$gDo33)
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$t$9480$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$9480$gDo33
                                        'any))))
                                  g$t$9475$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$9475$gDo33
                              '(any any any)))))
                        g$spec$9474$gDo33))))
                  (g$get-record-predicate-name$9244$gDo33
                    (case-lambda
                      ((g$spec$9464$gDo33)
                       ((case-lambda
                          ((g$t$9465$gDo33)
                           ((case-lambda
                              ((g$ls/false$9466$gDo33)
                               (if g$ls/false$9466$gDo33
                                 (apply
                                   (case-lambda
                                     ((g$foo$9467$gDo33
                                        g$make-foo$9468$gDo33
                                        g$foo?$9469$gDo33)
                                      g$foo?$9469$gDo33))
                                   g$ls/false$9466$gDo33)
                                 ((case-lambda
                                    ((g$t$9470$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$9471$gDo33)
                                         (if (if g$ls/false$9471$gDo33
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$9472$gDo33)
                                                      (g$id?$7719$gDo33
                                                        g$foo$9472$gDo33)))
                                                   g$ls/false$9471$gDo33))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$9473$gDo33)
                                                (g$id$9241$gDo33
                                                  g$foo$9473$gDo33
                                                  (g$stx->datum$7730$gDo33
                                                    g$foo$9473$gDo33)
                                                  '"?")))
                                             g$ls/false$9471$gDo33)
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$t$9470$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$9470$gDo33
                                        'any))))
                                  g$t$9465$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$9465$gDo33
                              '(any any any)))))
                        g$spec$9464$gDo33))))
                  (g$get-clause$9245$gDo33
                    (case-lambda
                      ((g$id$9455$gDo33 g$ls$9456$gDo33)
                       ((case-lambda
                          ((g$t$9457$gDo33)
                           ((case-lambda
                              ((g$ls/false$9458$gDo33)
                               (if g$ls/false$9458$gDo33
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$9458$gDo33)
                                 ((case-lambda
                                    ((g$t$9459$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$9460$gDo33)
                                         (if g$ls/false$9460$gDo33
                                           (apply
                                             (case-lambda
                                               ((g$x$9461$gDo33
                                                  g$rest$9462$gDo33
                                                  g$ls$9463$gDo33)
                                                (if (g$free-id=?$7723$gDo33
                                                      (g$bless$7960$gDo33
                                                        g$id$9455$gDo33)
                                                      g$x$9461$gDo33)
                                                  (cons
                                                    g$x$9461$gDo33
                                                    g$rest$9462$gDo33)
                                                  (g$get-clause$9245$gDo33
                                                    g$id$9455$gDo33
                                                    g$ls$9463$gDo33))))
                                             g$ls/false$9460$gDo33)
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$t$9459$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$9459$gDo33
                                        '((any . any) . any)))))
                                  g$t$9457$gDo33))))
                            (g$syntax-dispatch$7997$gDo33 g$t$9457$gDo33 '()))))
                        g$ls$9456$gDo33))))
                  (g$foo-rtd-code$9246$gDo33
                    (case-lambda
                      ((g$name$9414$gDo33
                         g$clause*$9415$gDo33
                         g$parent-rtd-code$9416$gDo33)
                       (letrec* ((g$convert-field-spec*$9417$gDo33
                                   (case-lambda
                                     ((g$ls$9442$gDo33)
                                      (list->vector
                                        (g$map$5063$gDo33
                                          (case-lambda
                                            ((g$x$9443$gDo33)
                                             ((case-lambda
                                                ((g$t$9444$gDo33)
                                                 ((case-lambda
                                                    ((g$ls/false$9445$gDo33)
                                                     (if g$ls/false$9445$gDo33
                                                       (apply
                                                         (case-lambda
                                                           ((g$name$9446$gDo33
                                                              g$rest$9447$gDo33)
                                                            (list
                                                              'mutable
                                                              g$name$9446$gDo33)))
                                                         g$ls/false$9445$gDo33)
                                                       ((case-lambda
                                                          ((g$t$9448$gDo33)
                                                           ((case-lambda
                                                              ((g$ls/false$9449$gDo33)
                                                               (if g$ls/false$9449$gDo33
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$name$9450$gDo33
                                                                        g$rest$9451$gDo33)
                                                                      (list
                                                                        'immutable
                                                                        g$name$9450$gDo33)))
                                                                   g$ls/false$9449$gDo33)
                                                                 ((case-lambda
                                                                    ((g$t$9452$gDo33)
                                                                     ((case-lambda
                                                                        ((g$ls/false$9453$gDo33)
                                                                         (if g$ls/false$9453$gDo33
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$name$9454$gDo33)
                                                                                (list
                                                                                  'immutable
                                                                                  g$name$9454$gDo33)))
                                                                             g$ls/false$9453$gDo33)
                                                                           (g$syntax-violation$8109$gDo33
                                                                             '#f
                                                                             '"invalid syntax"
                                                                             g$t$9452$gDo33))))
                                                                      (g$syntax-dispatch$7997$gDo33
                                                                        g$t$9452$gDo33
                                                                        'any))))
                                                                  g$t$9448$gDo33))))
                                                            (g$syntax-dispatch$7997$gDo33
                                                              g$t$9448$gDo33
                                                              '(#(scheme-id
                                                                  immutable)
                                                                any
                                                                .
                                                                any)))))
                                                        g$t$9444$gDo33))))
                                                  (g$syntax-dispatch$7997$gDo33
                                                    g$t$9444$gDo33
                                                    '(#(scheme-id mutable)
                                                      any
                                                      .
                                                      any)))))
                                              g$x$9443$gDo33)))
                                          g$ls$9442$gDo33))))))
                         ((case-lambda
                            ((g$uid-code$9418$gDo33
                               g$sealed?$9419$gDo33
                               g$opaque?$9420$gDo33
                               g$fields$9421$gDo33)
                             (g$bless$7960$gDo33
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$9414$gDo33)
                                 g$parent-rtd-code$9416$gDo33
                                 g$uid-code$9418$gDo33
                                 g$sealed?$9419$gDo33
                                 g$opaque?$9420$gDo33
                                 g$fields$9421$gDo33))))
                          ((case-lambda
                             ((g$t$9422$gDo33)
                              ((case-lambda
                                 ((g$ls/false$9423$gDo33)
                                  (if g$ls/false$9423$gDo33
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$9423$gDo33)
                                    ((case-lambda
                                       ((g$t$9424$gDo33)
                                        ((case-lambda
                                           ((g$ls/false$9425$gDo33)
                                            (if g$ls/false$9425$gDo33
                                              (apply
                                                (case-lambda
                                                  ((g$uid$9426$gDo33)
                                                   (list
                                                     'quote
                                                     g$uid$9426$gDo33)))
                                                g$ls/false$9425$gDo33)
                                              ((case-lambda
                                                 ((g$t$9427$gDo33)
                                                  ((case-lambda
                                                     ((g$ls/false$9428$gDo33)
                                                      (if g$ls/false$9428$gDo33
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$9428$gDo33)
                                                        (g$syntax-violation$8109$gDo33
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$9427$gDo33))))
                                                   (g$syntax-dispatch$7997$gDo33
                                                     g$t$9427$gDo33
                                                     '_))))
                                               g$t$9424$gDo33))))
                                         (g$syntax-dispatch$7997$gDo33
                                           g$t$9424$gDo33
                                           '(_ any)))))
                                     g$t$9422$gDo33))))
                               (g$syntax-dispatch$7997$gDo33
                                 g$t$9422$gDo33
                                 '(_)))))
                           (g$get-clause$9245$gDo33
                             'nongenerative
                             g$clause*$9415$gDo33))
                          ((case-lambda
                             ((g$t$9429$gDo33)
                              ((case-lambda
                                 ((g$ls/false$9430$gDo33)
                                  (if g$ls/false$9430$gDo33
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9430$gDo33)
                                    ((case-lambda
                                       ((g$t$9431$gDo33)
                                        ((case-lambda
                                           ((g$ls/false$9432$gDo33)
                                            (if g$ls/false$9432$gDo33
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9432$gDo33)
                                              (g$syntax-violation$8109$gDo33
                                                '#f
                                                '"invalid syntax"
                                                g$t$9431$gDo33))))
                                         (g$syntax-dispatch$7997$gDo33
                                           g$t$9431$gDo33
                                           '_))))
                                     g$t$9429$gDo33))))
                               (g$syntax-dispatch$7997$gDo33
                                 g$t$9429$gDo33
                                 '(_ #(atom #t))))))
                           (g$get-clause$9245$gDo33
                             'sealed
                             g$clause*$9415$gDo33))
                          ((case-lambda
                             ((g$t$9433$gDo33)
                              ((case-lambda
                                 ((g$ls/false$9434$gDo33)
                                  (if g$ls/false$9434$gDo33
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$9434$gDo33)
                                    ((case-lambda
                                       ((g$t$9435$gDo33)
                                        ((case-lambda
                                           ((g$ls/false$9436$gDo33)
                                            (if g$ls/false$9436$gDo33
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$9436$gDo33)
                                              (g$syntax-violation$8109$gDo33
                                                '#f
                                                '"invalid syntax"
                                                g$t$9435$gDo33))))
                                         (g$syntax-dispatch$7997$gDo33
                                           g$t$9435$gDo33
                                           '_))))
                                     g$t$9433$gDo33))))
                               (g$syntax-dispatch$7997$gDo33
                                 g$t$9433$gDo33
                                 '(_ #(atom #t))))))
                           (g$get-clause$9245$gDo33
                             'opaque
                             g$clause*$9415$gDo33))
                          ((case-lambda
                             ((g$t$9437$gDo33)
                              ((case-lambda
                                 ((g$ls/false$9438$gDo33)
                                  (if g$ls/false$9438$gDo33
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$9439$gDo33)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$9417$gDo33
                                             g$field-spec*$9439$gDo33))))
                                      g$ls/false$9438$gDo33)
                                    ((case-lambda
                                       ((g$t$9440$gDo33)
                                        ((case-lambda
                                           ((g$ls/false$9441$gDo33)
                                            (if g$ls/false$9441$gDo33
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$9441$gDo33)
                                              (g$syntax-violation$8109$gDo33
                                                '#f
                                                '"invalid syntax"
                                                g$t$9440$gDo33))))
                                         (g$syntax-dispatch$7997$gDo33
                                           g$t$9440$gDo33
                                           '_))))
                                     g$t$9437$gDo33))))
                               (g$syntax-dispatch$7997$gDo33
                                 g$t$9437$gDo33
                                 '(_ . each-any)))))
                           (g$get-clause$9245$gDo33
                             'fields
                             g$clause*$9415$gDo33)))))))
                  (g$parent-rtd-code$9247$gDo33
                    (case-lambda
                      ((g$clause*$9402$gDo33)
                       ((case-lambda
                          ((g$t$9403$gDo33)
                           ((case-lambda
                              ((g$ls/false$9404$gDo33)
                               (if g$ls/false$9404$gDo33
                                 (apply
                                   (case-lambda
                                     ((g$name$9405$gDo33)
                                      (list
                                        'record-type-descriptor
                                        g$name$9405$gDo33)))
                                   g$ls/false$9404$gDo33)
                                 ((case-lambda
                                    ((g$t$9406$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$9407$gDo33)
                                         (if g$ls/false$9407$gDo33
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9408$gDo33)
                                                    ((case-lambda
                                                       ((g$ls/false$9409$gDo33)
                                                        (if g$ls/false$9409$gDo33
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9410$gDo33
                                                                 g$rcd$9411$gDo33)
                                                               g$rtd$9410$gDo33))
                                                            g$ls/false$9409$gDo33)
                                                          ((case-lambda
                                                             ((g$t$9412$gDo33)
                                                              ((case-lambda
                                                                 ((g$ls/false$9413$gDo33)
                                                                  (if g$ls/false$9413$gDo33
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9413$gDo33)
                                                                    (g$syntax-violation$8109$gDo33
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9412$gDo33))))
                                                               (g$syntax-dispatch$7997$gDo33
                                                                 g$t$9412$gDo33
                                                                 '#(atom #f)))))
                                                           g$t$9408$gDo33))))
                                                     (g$syntax-dispatch$7997$gDo33
                                                       g$t$9408$gDo33
                                                       '(_ any any)))))
                                                 (g$get-clause$9245$gDo33
                                                   'parent-rtd
                                                   g$clause*$9402$gDo33))))
                                             g$ls/false$9407$gDo33)
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$t$9406$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$9406$gDo33
                                        '#(atom #f)))))
                                  g$t$9403$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$9403$gDo33
                              '(_ any)))))
                        (g$get-clause$9245$gDo33
                          'parent
                          g$clause*$9402$gDo33)))))
                  (g$parent-rcd-code$9248$gDo33
                    (case-lambda
                      ((g$clause*$9390$gDo33)
                       ((case-lambda
                          ((g$t$9391$gDo33)
                           ((case-lambda
                              ((g$ls/false$9392$gDo33)
                               (if g$ls/false$9392$gDo33
                                 (apply
                                   (case-lambda
                                     ((g$name$9393$gDo33)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$9393$gDo33)))
                                   g$ls/false$9392$gDo33)
                                 ((case-lambda
                                    ((g$t$9394$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$9395$gDo33)
                                         (if g$ls/false$9395$gDo33
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$9396$gDo33)
                                                    ((case-lambda
                                                       ((g$ls/false$9397$gDo33)
                                                        (if g$ls/false$9397$gDo33
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$9398$gDo33
                                                                 g$rcd$9399$gDo33)
                                                               g$rcd$9399$gDo33))
                                                            g$ls/false$9397$gDo33)
                                                          ((case-lambda
                                                             ((g$t$9400$gDo33)
                                                              ((case-lambda
                                                                 ((g$ls/false$9401$gDo33)
                                                                  (if g$ls/false$9401$gDo33
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$9401$gDo33)
                                                                    (g$syntax-violation$8109$gDo33
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9400$gDo33))))
                                                               (g$syntax-dispatch$7997$gDo33
                                                                 g$t$9400$gDo33
                                                                 '#(atom #f)))))
                                                           g$t$9396$gDo33))))
                                                     (g$syntax-dispatch$7997$gDo33
                                                       g$t$9396$gDo33
                                                       '(_ any any)))))
                                                 (g$get-clause$9245$gDo33
                                                   'parent-rtd
                                                   g$clause*$9390$gDo33))))
                                             g$ls/false$9395$gDo33)
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$t$9394$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$9394$gDo33
                                        '#(atom #f)))))
                                  g$t$9391$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$9391$gDo33
                              '(_ any)))))
                        (g$get-clause$9245$gDo33
                          'parent
                          g$clause*$9390$gDo33)))))
                  (g$foo-rcd-code$9249$gDo33
                    (case-lambda
                      ((g$clause*$9386$gDo33
                         g$foo-rtd$9387$gDo33
                         g$protocol$9388$gDo33
                         g$parent-rcd-code$9389$gDo33)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$9387$gDo33
                         g$parent-rcd-code$9389$gDo33
                         g$protocol$9388$gDo33))))
                  (g$get-protocol-code$9250$gDo33
                    (case-lambda
                      ((g$clause*$9380$gDo33)
                       ((case-lambda
                          ((g$t$9381$gDo33)
                           ((case-lambda
                              ((g$ls/false$9382$gDo33)
                               (if g$ls/false$9382$gDo33
                                 (apply
                                   (case-lambda
                                     ((g$expr$9383$gDo33) g$expr$9383$gDo33))
                                   g$ls/false$9382$gDo33)
                                 ((case-lambda
                                    ((g$t$9384$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$9385$gDo33)
                                         (if g$ls/false$9385$gDo33
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$9385$gDo33)
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$t$9384$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$9384$gDo33
                                        '_))))
                                  g$t$9381$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$9381$gDo33
                              '(_ any)))))
                        (g$get-clause$9245$gDo33
                          'protocol
                          g$clause*$9380$gDo33)))))
                  (g$get-fields$9251$gDo33
                    (case-lambda
                      ((g$clause*$9371$gDo33)
                       ((case-lambda
                          ((g$t$9372$gDo33)
                           ((case-lambda
                              ((g$ls/false$9373$gDo33)
                               (if g$ls/false$9373$gDo33
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$9373$gDo33)
                                 ((case-lambda
                                    ((g$t$9374$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$9375$gDo33)
                                         (if g$ls/false$9375$gDo33
                                           (apply
                                             (case-lambda
                                               ((g$f*$9376$gDo33)
                                                g$f*$9376$gDo33))
                                             g$ls/false$9375$gDo33)
                                           ((case-lambda
                                              ((g$t$9377$gDo33)
                                               ((case-lambda
                                                  ((g$ls/false$9378$gDo33)
                                                   (if g$ls/false$9378$gDo33
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$9379$gDo33)
                                                          (g$get-fields$9251$gDo33
                                                            g$rest$9379$gDo33)))
                                                       g$ls/false$9378$gDo33)
                                                     (g$syntax-violation$8109$gDo33
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9377$gDo33))))
                                                (g$syntax-dispatch$7997$gDo33
                                                  g$t$9377$gDo33
                                                  '(_ . any)))))
                                            g$t$9374$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$9374$gDo33
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$9372$gDo33))))
                            (g$syntax-dispatch$7997$gDo33 g$t$9372$gDo33 '()))))
                        g$clause*$9371$gDo33))))
                  (g$get-mutator-indices$9252$gDo33
                    (case-lambda
                      ((g$fields$9359$gDo33)
                       ((letrec ((g$f$9360$gDo33
                                   (case-lambda
                                     ((g$fields$9361$gDo33 g$i$9362$gDo33)
                                      ((case-lambda
                                         ((g$t$9363$gDo33)
                                          ((case-lambda
                                             ((g$ls/false$9364$gDo33)
                                              (if g$ls/false$9364$gDo33
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$9364$gDo33)
                                                ((case-lambda
                                                   ((g$t$9365$gDo33)
                                                    ((case-lambda
                                                       ((g$ls/false$9366$gDo33)
                                                        (if g$ls/false$9366$gDo33
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$9367$gDo33)
                                                               (cons
                                                                 g$i$9362$gDo33
                                                                 (g$f$9360$gDo33
                                                                   g$rest$9367$gDo33
                                                                   (+ g$i$9362$gDo33
                                                                      '1)))))
                                                            g$ls/false$9366$gDo33)
                                                          ((case-lambda
                                                             ((g$t$9368$gDo33)
                                                              ((case-lambda
                                                                 ((g$ls/false$9369$gDo33)
                                                                  (if g$ls/false$9369$gDo33
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$9370$gDo33)
                                                                         (g$f$9360$gDo33
                                                                           g$rest$9370$gDo33
                                                                           (+ g$i$9362$gDo33
                                                                              '1))))
                                                                      g$ls/false$9369$gDo33)
                                                                    (g$syntax-violation$8109$gDo33
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$9368$gDo33))))
                                                               (g$syntax-dispatch$7997$gDo33
                                                                 g$t$9368$gDo33
                                                                 '(_ . any)))))
                                                           g$t$9365$gDo33))))
                                                     (g$syntax-dispatch$7997$gDo33
                                                       g$t$9365$gDo33
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$9363$gDo33))))
                                           (g$syntax-dispatch$7997$gDo33
                                             g$t$9363$gDo33
                                             '()))))
                                       g$fields$9361$gDo33)))))
                          g$f$9360$gDo33)
                        g$fields$9359$gDo33
                        '0))))
                  (g$get-mutators$9253$gDo33
                    (case-lambda
                      ((g$foo$9338$gDo33 g$fields$9339$gDo33)
                       (letrec* ((g$gen-name$9340$gDo33
                                   (case-lambda
                                     ((g$x$9358$gDo33)
                                      (g$datum->syntax$8111$gDo33
                                        g$foo$9338$gDo33
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8112$gDo33
                                                g$foo$9338$gDo33))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8112$gDo33
                                                g$x$9358$gDo33))
                                            '"-set!")))))))
                         ((letrec ((g$f$9341$gDo33
                                     (case-lambda
                                       ((g$fields$9342$gDo33)
                                        ((case-lambda
                                           ((g$t$9343$gDo33)
                                            ((case-lambda
                                               ((g$ls/false$9344$gDo33)
                                                (if g$ls/false$9344$gDo33
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$9344$gDo33)
                                                  ((case-lambda
                                                     ((g$t$9345$gDo33)
                                                      ((case-lambda
                                                         ((g$ls/false$9346$gDo33)
                                                          (if g$ls/false$9346$gDo33
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9347$gDo33
                                                                   g$accessor$9348$gDo33
                                                                   g$mutator$9349$gDo33
                                                                   g$rest$9350$gDo33)
                                                                 (cons
                                                                   g$mutator$9349$gDo33
                                                                   (g$f$9341$gDo33
                                                                     g$rest$9350$gDo33))))
                                                              g$ls/false$9346$gDo33)
                                                            ((case-lambda
                                                               ((g$t$9351$gDo33)
                                                                ((case-lambda
                                                                   ((g$ls/false$9352$gDo33)
                                                                    (if g$ls/false$9352$gDo33
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9353$gDo33
                                                                             g$rest$9354$gDo33)
                                                                           (cons
                                                                             (g$gen-name$9340$gDo33
                                                                               g$name$9353$gDo33)
                                                                             (g$f$9341$gDo33
                                                                               g$rest$9354$gDo33))))
                                                                        g$ls/false$9352$gDo33)
                                                                      ((case-lambda
                                                                         ((g$t$9355$gDo33)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9356$gDo33)
                                                                              (if g$ls/false$9356$gDo33
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$9357$gDo33)
                                                                                     (g$f$9341$gDo33
                                                                                       g$rest$9357$gDo33)))
                                                                                  g$ls/false$9356$gDo33)
                                                                                (g$syntax-violation$8109$gDo33
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$9355$gDo33))))
                                                                           (g$syntax-dispatch$7997$gDo33
                                                                             g$t$9355$gDo33
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$9351$gDo33))))
                                                                 (g$syntax-dispatch$7997$gDo33
                                                                   g$t$9351$gDo33
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$9345$gDo33))))
                                                       (g$syntax-dispatch$7997$gDo33
                                                         g$t$9345$gDo33
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$9343$gDo33))))
                                             (g$syntax-dispatch$7997$gDo33
                                               g$t$9343$gDo33
                                               '()))))
                                         g$fields$9342$gDo33)))))
                            g$f$9341$gDo33)
                          g$fields$9339$gDo33)))))
                  (g$get-accessors$9254$gDo33
                    (case-lambda
                      ((g$foo$9304$gDo33 g$fields$9305$gDo33)
                       (letrec* ((g$gen-name$9306$gDo33
                                   (case-lambda
                                     ((g$x$9337$gDo33)
                                      (g$datum->syntax$8111$gDo33
                                        g$foo$9304$gDo33
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$8112$gDo33
                                                g$foo$9304$gDo33))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$8112$gDo33
                                                g$x$9337$gDo33)))))))))
                         (g$map$5063$gDo33
                           (case-lambda
                             ((g$field$9307$gDo33)
                              ((case-lambda
                                 ((g$t$9308$gDo33)
                                  ((case-lambda
                                     ((g$ls/false$9309$gDo33)
                                      (if (if g$ls/false$9309$gDo33
                                            (begin
                                              '#f
                                              (apply
                                                (case-lambda
                                                  ((g$name$9310$gDo33
                                                     g$accessor$9311$gDo33
                                                     g$mutator$9312$gDo33)
                                                   (g$id?$7719$gDo33
                                                     g$accessor$9311$gDo33)))
                                                g$ls/false$9309$gDo33))
                                            '#f)
                                        (apply
                                          (case-lambda
                                            ((g$name$9313$gDo33
                                               g$accessor$9314$gDo33
                                               g$mutator$9315$gDo33)
                                             g$accessor$9314$gDo33))
                                          g$ls/false$9309$gDo33)
                                        ((case-lambda
                                           ((g$t$9316$gDo33)
                                            ((case-lambda
                                               ((g$ls/false$9317$gDo33)
                                                (if (if g$ls/false$9317$gDo33
                                                      (begin
                                                        '#f
                                                        (apply
                                                          (case-lambda
                                                            ((g$name$9318$gDo33
                                                               g$accessor$9319$gDo33)
                                                             (g$id?$7719$gDo33
                                                               g$accessor$9319$gDo33)))
                                                          g$ls/false$9317$gDo33))
                                                      '#f)
                                                  (apply
                                                    (case-lambda
                                                      ((g$name$9320$gDo33
                                                         g$accessor$9321$gDo33)
                                                       g$accessor$9321$gDo33))
                                                    g$ls/false$9317$gDo33)
                                                  ((case-lambda
                                                     ((g$t$9322$gDo33)
                                                      ((case-lambda
                                                         ((g$ls/false$9323$gDo33)
                                                          (if (if g$ls/false$9323$gDo33
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$name$9324$gDo33)
                                                                       (g$id?$7719$gDo33
                                                                         g$name$9324$gDo33)))
                                                                    g$ls/false$9323$gDo33))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$9325$gDo33)
                                                                 (g$gen-name$9306$gDo33
                                                                   g$name$9325$gDo33)))
                                                              g$ls/false$9323$gDo33)
                                                            ((case-lambda
                                                               ((g$t$9326$gDo33)
                                                                ((case-lambda
                                                                   ((g$ls/false$9327$gDo33)
                                                                    (if (if g$ls/false$9327$gDo33
                                                                          (begin
                                                                            '#f
                                                                            (apply
                                                                              (case-lambda
                                                                                ((g$name$9328$gDo33)
                                                                                 (g$id?$7719$gDo33
                                                                                   g$name$9328$gDo33)))
                                                                              g$ls/false$9327$gDo33))
                                                                          '#f)
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$9329$gDo33)
                                                                           (g$gen-name$9306$gDo33
                                                                             g$name$9329$gDo33)))
                                                                        g$ls/false$9327$gDo33)
                                                                      ((case-lambda
                                                                         ((g$t$9330$gDo33)
                                                                          ((case-lambda
                                                                             ((g$ls/false$9331$gDo33)
                                                                              (if (if g$ls/false$9331$gDo33
                                                                                    (begin
                                                                                      '#f
                                                                                      (apply
                                                                                        (case-lambda
                                                                                          ((g$name$9332$gDo33)
                                                                                           (g$id?$7719$gDo33
                                                                                             g$name$9332$gDo33)))
                                                                                        g$ls/false$9331$gDo33))
                                                                                    '#f)
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$name$9333$gDo33)
                                                                                     (g$gen-name$9306$gDo33
                                                                                       g$name$9333$gDo33)))
                                                                                  g$ls/false$9331$gDo33)
                                                                                ((case-lambda
                                                                                   ((g$t$9334$gDo33)
                                                                                    ((case-lambda
                                                                                       ((g$ls/false$9335$gDo33)
                                                                                        (if g$ls/false$9335$gDo33
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$others$9336$gDo33)
                                                                                               (g$syntax-violation$8109$gDo33
                                                                                                 '#f
                                                                                                 '"invalid field spec"
                                                                                                 g$field$9307$gDo33)))
                                                                                            g$ls/false$9335$gDo33)
                                                                                          (g$syntax-violation$8109$gDo33
                                                                                            '#f
                                                                                            '"invalid syntax"
                                                                                            g$t$9334$gDo33))))
                                                                                     (g$syntax-dispatch$7997$gDo33
                                                                                       g$t$9334$gDo33
                                                                                       'any))))
                                                                                 g$t$9330$gDo33))))
                                                                           (g$syntax-dispatch$7997$gDo33
                                                                             g$t$9330$gDo33
                                                                             'any))))
                                                                       g$t$9326$gDo33))))
                                                                 (g$syntax-dispatch$7997$gDo33
                                                                   g$t$9326$gDo33
                                                                   '(#(scheme-id
                                                                       immutable)
                                                                     any)))))
                                                             g$t$9322$gDo33))))
                                                       (g$syntax-dispatch$7997$gDo33
                                                         g$t$9322$gDo33
                                                         '(#(scheme-id mutable)
                                                           any)))))
                                                   g$t$9316$gDo33))))
                                             (g$syntax-dispatch$7997$gDo33
                                               g$t$9316$gDo33
                                               '(#(scheme-id immutable)
                                                 any
                                                 any)))))
                                         g$t$9308$gDo33))))
                                   (g$syntax-dispatch$7997$gDo33
                                     g$t$9308$gDo33
                                     '(#(scheme-id mutable) any any any)))))
                               g$field$9307$gDo33)))
                           g$fields$9305$gDo33)))))
                  (g$enumerate$9255$gDo33
                    (case-lambda
                      ((g$ls$9300$gDo33)
                       ((letrec ((g$f$9301$gDo33
                                   (case-lambda
                                     ((g$ls$9302$gDo33 g$i$9303$gDo33)
                                      (if (null? g$ls$9302$gDo33)
                                        '()
                                        (cons
                                          g$i$9303$gDo33
                                          (g$f$9301$gDo33
                                            (cdr g$ls$9302$gDo33)
                                            (+ g$i$9303$gDo33 '1))))))))
                          g$f$9301$gDo33)
                        g$ls$9300$gDo33
                        '0))))
                  (g$do-define-record$9256$gDo33
                    (case-lambda
                      ((g$namespec$9280$gDo33 g$clause*$9281$gDo33)
                       ((case-lambda
                          ((g$foo$9282$gDo33)
                           ((case-lambda
                              ((g$foo-rtd$9283$gDo33)
                               ((case-lambda
                                  ((g$foo-rcd$9284$gDo33)
                                   ((case-lambda
                                      ((g$protocol$9285$gDo33)
                                       ((case-lambda
                                          ((g$make-foo$9286$gDo33)
                                           ((case-lambda
                                              ((g$fields$9287$gDo33)
                                               ((case-lambda
                                                  ((g$idx*$9288$gDo33)
                                                   ((case-lambda
                                                      ((g$foo-x*$9289$gDo33)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$9290$gDo33)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$9291$gDo33)
                                                               ((case-lambda
                                                                  ((g$foo?$9292$gDo33)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$9293$gDo33)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$9294$gDo33)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$9295$gDo33)
                                                                               (g$bless$7960$gDo33
                                                                                 (cons
                                                                                   'begin
                                                                                   (cons
                                                                                     (list
                                                                                       'define
                                                                                       g$foo-rtd$9283$gDo33
                                                                                       g$foo-rtd-code$9293$gDo33)
                                                                                     (cons
                                                                                       (list
                                                                                         'define
                                                                                         g$protocol$9285$gDo33
                                                                                         g$protocol-code$9295$gDo33)
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rcd$9284$gDo33
                                                                                           g$foo-rcd-code$9294$gDo33)
                                                                                         (cons
                                                                                           (list
                                                                                             'define-syntax
                                                                                             g$foo$9282$gDo33
                                                                                             (list
                                                                                               'list
                                                                                               ''$rtd
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rtd$9283$gDo33)
                                                                                               (list
                                                                                                 'syntax
                                                                                                 g$foo-rcd$9284$gDo33)))
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo?$9292$gDo33
                                                                                               (list
                                                                                                 'record-predicate
                                                                                                 g$foo-rtd$9283$gDo33))
                                                                                             (cons
                                                                                               (list
                                                                                                 'define
                                                                                                 g$make-foo$9286$gDo33
                                                                                                 (list
                                                                                                   'record-constructor
                                                                                                   g$foo-rcd$9284$gDo33))
                                                                                               (append
                                                                                                 (g$map$5063$gDo33
                                                                                                   (case-lambda
                                                                                                     ((g$foo-x$9296$gDo33
                                                                                                        g$idx$9297$gDo33)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$foo-x$9296$gDo33
                                                                                                        (list
                                                                                                          'record-accessor
                                                                                                          g$foo-rtd$9283$gDo33
                                                                                                          g$idx$9297$gDo33))))
                                                                                                   g$foo-x*$9289$gDo33
                                                                                                   g$idx*$9288$gDo33)
                                                                                                 (g$map$5063$gDo33
                                                                                                   (case-lambda
                                                                                                     ((g$set-foo-x!$9298$gDo33
                                                                                                        g$idx$9299$gDo33)
                                                                                                      (list
                                                                                                        'define
                                                                                                        g$set-foo-x!$9298$gDo33
                                                                                                        (list
                                                                                                          'record-mutator
                                                                                                          g$foo-rtd$9283$gDo33
                                                                                                          g$idx$9299$gDo33))))
                                                                                                   g$set-foo-x!*$9290$gDo33
                                                                                                   g$set-foo-idx*$9291$gDo33))))))))))))
                                                                            (g$get-protocol-code$9250$gDo33
                                                                              g$clause*$9281$gDo33))))
                                                                        (g$foo-rcd-code$9249$gDo33
                                                                          g$clause*$9281$gDo33
                                                                          g$foo-rtd$9283$gDo33
                                                                          g$protocol$9285$gDo33
                                                                          (g$parent-rcd-code$9248$gDo33
                                                                            g$clause*$9281$gDo33)))))
                                                                    (g$foo-rtd-code$9246$gDo33
                                                                      g$foo$9282$gDo33
                                                                      g$clause*$9281$gDo33
                                                                      (g$parent-rtd-code$9247$gDo33
                                                                        g$clause*$9281$gDo33)))))
                                                                (g$get-record-predicate-name$9244$gDo33
                                                                  g$namespec$9280$gDo33))))
                                                            (g$get-mutator-indices$9252$gDo33
                                                              g$fields$9287$gDo33))))
                                                        (g$get-mutators$9253$gDo33
                                                          g$foo$9282$gDo33
                                                          g$fields$9287$gDo33))))
                                                    (g$get-accessors$9254$gDo33
                                                      g$foo$9282$gDo33
                                                      g$fields$9287$gDo33))))
                                                (g$enumerate$9255$gDo33
                                                  g$fields$9287$gDo33))))
                                            (g$get-fields$9251$gDo33
                                              g$clause*$9281$gDo33))))
                                        (g$get-record-constructor-name$9243$gDo33
                                          g$namespec$9280$gDo33))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$9242$gDo33 g$namespec$9280$gDo33)))))
                  (g$verify-clauses$9257$gDo33
                    (case-lambda
                      ((g$x$9262$gDo33 g$cls*$9263$gDo33)
                       (letrec* ((g$valid-kwds$9264$gDo33
                                   (g$map$5063$gDo33
                                     g$bless$7960$gDo33
                                     '(fields
                                        parent
                                        parent-rtd
                                        protocol
                                        sealed
                                        opaque
                                        nongenerative)))
                                 (g$free-id-member?$9265$gDo33
                                   (case-lambda
                                     ((g$x$9277$gDo33 g$ls$9278$gDo33)
                                      (if (pair? g$ls$9278$gDo33)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$9279$gDo33)
                                              (if g$t$9279$gDo33
                                                g$t$9279$gDo33
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$9265$gDo33
                                                    g$x$9277$gDo33
                                                    (cdr g$ls$9278$gDo33))))))
                                           (g$free-id=?$7723$gDo33
                                             g$x$9277$gDo33
                                             (car g$ls$9278$gDo33))))
                                        '#f)))))
                         ((letrec ((g$f$9266$gDo33
                                     (case-lambda
                                       ((g$cls*$9267$gDo33 g$seen*$9268$gDo33)
                                        (if (not (null? g$cls*$9267$gDo33))
                                          ((case-lambda
                                             ((g$t$9269$gDo33)
                                              ((case-lambda
                                                 ((g$ls/false$9270$gDo33)
                                                  (if g$ls/false$9270$gDo33
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$9271$gDo33
                                                           g$rest$9272$gDo33)
                                                         (if ((case-lambda
                                                                ((g$t$9273$gDo33)
                                                                 (if g$t$9273$gDo33
                                                                   g$t$9273$gDo33
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$9265$gDo33
                                                                            g$kwd$9271$gDo33
                                                                            g$valid-kwds$9264$gDo33))))))
                                                              (not (g$id?$7719$gDo33
                                                                     g$kwd$9271$gDo33)))
                                                           (g$syntax-violation$8109$gDo33
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$9271$gDo33)
                                                           (if (g$bound-id-member?$7726$gDo33
                                                                 g$kwd$9271$gDo33
                                                                 g$seen*$9268$gDo33)
                                                             (g$syntax-violation$8109$gDo33
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$9262$gDo33
                                                               g$kwd$9271$gDo33)
                                                             (g$f$9266$gDo33
                                                               (cdr g$cls*$9267$gDo33)
                                                               (cons
                                                                 g$kwd$9271$gDo33
                                                                 g$seen*$9268$gDo33))))))
                                                      g$ls/false$9270$gDo33)
                                                    ((case-lambda
                                                       ((g$t$9274$gDo33)
                                                        ((case-lambda
                                                           ((g$ls/false$9275$gDo33)
                                                            (if g$ls/false$9275$gDo33
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$9276$gDo33)
                                                                   (g$syntax-violation$8109$gDo33
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$9276$gDo33)))
                                                                g$ls/false$9275$gDo33)
                                                              (g$syntax-violation$8109$gDo33
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$9274$gDo33))))
                                                         (g$syntax-dispatch$7997$gDo33
                                                           g$t$9274$gDo33
                                                           'any))))
                                                     g$t$9269$gDo33))))
                                               (g$syntax-dispatch$7997$gDo33
                                                 g$t$9269$gDo33
                                                 '(any . any)))))
                                           (car g$cls*$9267$gDo33))
                                          (void))))))
                            g$f$9266$gDo33)
                          g$cls*$9263$gDo33
                          '()))))))
          ((case-lambda
             ((g$t$9258$gDo33)
              ((case-lambda
                 ((g$ls/false$9259$gDo33)
                  (if g$ls/false$9259$gDo33
                    (apply
                      (case-lambda
                        ((g$namespec$9260$gDo33 g$clause*$9261$gDo33)
                         (begin
                           (g$verify-clauses$9257$gDo33
                             g$x$9240$gDo33
                             g$clause*$9261$gDo33)
                           (g$do-define-record$9256$gDo33
                             g$namespec$9260$gDo33
                             g$clause*$9261$gDo33))))
                      g$ls/false$9259$gDo33)
                    (g$syntax-violation$8109$gDo33
                      '#f
                      '"invalid syntax"
                      g$t$9258$gDo33))))
               (g$syntax-dispatch$7997$gDo33
                 g$t$9258$gDo33
                 '(_ any . each-any)))))
           g$x$9240$gDo33)))))
   (g$define-condition-type-macro$7992$gDo33
     g$define-condition-type-macro$11495$gDo33
     (case-lambda
       ((g$x$9496$gDo33)
        (letrec* ((g$mkname$9497$gDo33
                    (case-lambda
                      ((g$name$9520$gDo33 g$suffix$9521$gDo33)
                       (g$datum->syntax$8111$gDo33
                         g$name$9520$gDo33
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$8112$gDo33 g$name$9520$gDo33))
                             g$suffix$9521$gDo33)))))))
          ((case-lambda
             ((g$t$9498$gDo33)
              ((case-lambda
                 ((g$ls/false$9499$gDo33)
                  (if (if g$ls/false$9499$gDo33
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$9500$gDo33
                                 g$name$9501$gDo33
                                 g$super$9502$gDo33
                                 g$constructor$9503$gDo33
                                 g$predicate$9504$gDo33
                                 g$field*$9505$gDo33
                                 g$accessor*$9506$gDo33)
                               (if (g$id?$7719$gDo33 g$name$9501$gDo33)
                                 (if (g$id?$7719$gDo33 g$super$9502$gDo33)
                                   (if (g$id?$7719$gDo33
                                         g$constructor$9503$gDo33)
                                     (if (g$id?$7719$gDo33
                                           g$predicate$9504$gDo33)
                                       (if (g$for-all$5061$gDo33
                                             g$id?$7719$gDo33
                                             g$field*$9505$gDo33)
                                         (begin
                                           '#f
                                           (g$for-all$5061$gDo33
                                             g$id?$7719$gDo33
                                             g$accessor*$9506$gDo33))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$9499$gDo33))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$9507$gDo33
                           g$name$9508$gDo33
                           g$super$9509$gDo33
                           g$constructor$9510$gDo33
                           g$predicate$9511$gDo33
                           g$field*$9512$gDo33
                           g$accessor*$9513$gDo33)
                         ((case-lambda
                            ((g$aux-accessor*$9514$gDo33)
                             (g$bless$7960$gDo33
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$9508$gDo33
                                         g$constructor$9510$gDo33
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$9509$gDo33)
                                         (cons
                                           (cons
                                             'fields
                                             (g$map$5063$gDo33
                                               (case-lambda
                                                 ((g$field$9515$gDo33
                                                    g$aux$9516$gDo33)
                                                  (list
                                                    'immutable
                                                    g$field$9515$gDo33
                                                    g$aux$9516$gDo33)))
                                               g$field*$9512$gDo33
                                               g$aux-accessor*$9514$gDo33))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$9511$gDo33
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$9508$gDo33)))
                                     (g$map$5063$gDo33
                                       (case-lambda
                                         ((g$accessor$9517$gDo33
                                            g$aux$9518$gDo33)
                                          (list
                                            'define
                                            g$accessor$9517$gDo33
                                            (list
                                              'condition-accessor
                                              (list
                                                'record-type-descriptor
                                                g$name$9508$gDo33)
                                              g$aux$9518$gDo33))))
                                       g$accessor*$9513$gDo33
                                       g$aux-accessor*$9514$gDo33)))))))
                          (g$map$5063$gDo33
                            (case-lambda ((g$x$9519$gDo33) (gensym)))
                            g$accessor*$9513$gDo33))))
                      g$ls/false$9499$gDo33)
                    (g$syntax-violation$8109$gDo33
                      '#f
                      '"invalid syntax"
                      g$t$9498$gDo33))))
               (g$syntax-dispatch$7997$gDo33
                 g$t$9498$gDo33
                 '(any any any any any . #(each (any any)))))))
           g$x$9496$gDo33)))))
   (g$incorrect-usage-macro$7993$gDo33
     g$incorrect-usage-macro$11496$gDo33
     (case-lambda
       ((g$e$9522$gDo33)
        (g$syntax-violation$8109$gDo33
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$9522$gDo33))))
   (g$parameterize-macro$7994$gDo33
     g$parameterize-macro$11497$gDo33
     (case-lambda
       ((g$e$9523$gDo33)
        ((case-lambda
           ((g$t$9524$gDo33)
            ((case-lambda
               ((g$ls/false$9525$gDo33)
                (if g$ls/false$9525$gDo33
                  (apply
                    (case-lambda
                      ((g$b$9526$gDo33 g$b*$9527$gDo33)
                       (g$bless$7960$gDo33
                         (cons
                           'let
                           (cons '() (cons g$b$9526$gDo33 g$b*$9527$gDo33))))))
                    g$ls/false$9525$gDo33)
                  ((case-lambda
                     ((g$t$9528$gDo33)
                      ((case-lambda
                         ((g$ls/false$9529$gDo33)
                          (if g$ls/false$9529$gDo33
                            (apply
                              (case-lambda
                                ((g$olhs*$9530$gDo33
                                   g$orhs*$9531$gDo33
                                   g$b$9532$gDo33
                                   g$b*$9533$gDo33)
                                 ((case-lambda
                                    ((g$lhs*$9534$gDo33 g$rhs*$9535$gDo33)
                                     (g$bless$7960$gDo33
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$9534$gDo33
                                             g$rhs*$9535$gDo33)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (g$map$5063$gDo33
                                                       (case-lambda
                                                         ((g$lhs$9536$gDo33
                                                            g$rhs$9537$gDo33)
                                                          (list
                                                            'let
                                                            (list
                                                              (list
                                                                't
                                                                (list
                                                                  g$lhs$9536$gDo33)))
                                                            (list
                                                              g$lhs$9536$gDo33
                                                              g$rhs$9537$gDo33)
                                                            (cons
                                                              'set!
                                                              (cons
                                                                g$rhs$9537$gDo33
                                                                '(t))))))
                                                       g$lhs*$9534$gDo33
                                                       g$rhs*$9535$gDo33)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$9532$gDo33
                                                         g$b*$9533$gDo33)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$9530$gDo33
                                           g$orhs*$9531$gDo33)))))
                                  (g$generate-temporaries$8099$gDo33
                                    g$olhs*$9530$gDo33)
                                  (g$generate-temporaries$8099$gDo33
                                    g$orhs*$9531$gDo33))))
                              g$ls/false$9529$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$9528$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$9528$gDo33
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$9524$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$9524$gDo33
               '(_ () any . each-any)))))
         g$e$9523$gDo33))))
   (g$foreign-call-transformer$7995$gDo33
     g$foreign-call-transformer$11498$gDo33
     (case-lambda
       ((g$e$9538$gDo33 g$r$9539$gDo33 g$mr$9540$gDo33)
        ((case-lambda
           ((g$t$9541$gDo33)
            ((case-lambda
               ((g$ls/false$9542$gDo33)
                (if g$ls/false$9542$gDo33
                  (apply
                    (case-lambda
                      ((g$name$9543$gDo33 g$arg*$9544$gDo33)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$8015$gDo33
                             g$name$9543$gDo33
                             g$r$9539$gDo33
                             g$mr$9540$gDo33)
                           (g$chi-expr*$8013$gDo33
                             g$arg*$9544$gDo33
                             g$r$9539$gDo33
                             g$mr$9540$gDo33)))))
                    g$ls/false$9542$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$9541$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$9541$gDo33
               '(_ any . each-any)))))
         g$e$9538$gDo33))))
   (g$convert-pattern$7996$gDo33
     g$convert-pattern$11499$gDo33
     (case-lambda
       ((g$pattern$9545$gDo33 g$keys$9546$gDo33)
        (letrec* ((g$cvt*$9547$gDo33
                    (case-lambda
                      ((g$p*$9627$gDo33 g$n$9628$gDo33 g$ids$9629$gDo33)
                       (if (null? g$p*$9627$gDo33)
                         (values '() g$ids$9629$gDo33)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$9547$gDo33
                                (cdr g$p*$9627$gDo33)
                                g$n$9628$gDo33
                                g$ids$9629$gDo33)))
                           (case-lambda
                             ((g$y$9632$gDo33 g$ids$9633$gDo33)
                              ((case-lambda
                                 ((g$ids$9634$gDo33 g$y$9635$gDo33)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$9548$gDo33
                                         (car g$p*$9627$gDo33)
                                         g$n$9628$gDo33
                                         g$ids$9634$gDo33)))
                                    (case-lambda
                                      ((g$x$9638$gDo33 g$ids$9639$gDo33)
                                       ((case-lambda
                                          ((g$ids$9640$gDo33 g$x$9641$gDo33)
                                           (values
                                             (cons
                                               g$x$9641$gDo33
                                               g$y$9635$gDo33)
                                             g$ids$9640$gDo33)))
                                        g$ids$9639$gDo33
                                        g$x$9638$gDo33))))))
                               g$ids$9633$gDo33
                               g$y$9632$gDo33))))))))
                  (g$cvt$9548$gDo33
                    (case-lambda
                      ((g$p$9549$gDo33 g$n$9550$gDo33 g$ids$9551$gDo33)
                       ((case-lambda
                          ((g$t$9552$gDo33)
                           ((case-lambda
                              ((g$ls/false$9553$gDo33)
                               (if (if g$ls/false$9553$gDo33
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$9554$gDo33)
                                            (g$id?$7719$gDo33 g$id$9554$gDo33)))
                                         g$ls/false$9553$gDo33))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$9555$gDo33)
                                      (if (g$bound-id-member?$7726$gDo33
                                            g$p$9549$gDo33
                                            g$keys$9546$gDo33)
                                        (values
                                          (vector 'free-id g$p$9549$gDo33)
                                          g$ids$9551$gDo33)
                                        (if (g$free-id=?$7723$gDo33
                                              g$p$9549$gDo33
                                              (g$scheme-stx$7940$gDo33 '_))
                                          (values '_ g$ids$9551$gDo33)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$9549$gDo33
                                                g$n$9550$gDo33)
                                              g$ids$9551$gDo33))))))
                                   g$ls/false$9553$gDo33)
                                 ((case-lambda
                                    ((g$t$9556$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$9557$gDo33)
                                         (if (if g$ls/false$9557$gDo33
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$9558$gDo33
                                                        g$dots$9559$gDo33)
                                                      (g$ellipsis?$7998$gDo33
                                                        g$dots$9559$gDo33)))
                                                   g$ls/false$9557$gDo33))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$9560$gDo33
                                                  g$dots$9561$gDo33)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$9548$gDo33
                                                       g$p$9560$gDo33
                                                       (+ g$n$9550$gDo33 '1)
                                                       g$ids$9551$gDo33)))
                                                  (case-lambda
                                                    ((g$p$9564$gDo33
                                                       g$ids$9565$gDo33)
                                                     ((case-lambda
                                                        ((g$ids$9566$gDo33
                                                           g$p$9567$gDo33)
                                                         (values
                                                           (if (eq? g$p$9567$gDo33
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$9567$gDo33))
                                                           g$ids$9566$gDo33)))
                                                      g$ids$9565$gDo33
                                                      g$p$9564$gDo33))))))
                                             g$ls/false$9557$gDo33)
                                           ((case-lambda
                                              ((g$t$9568$gDo33)
                                               ((case-lambda
                                                  ((g$ls/false$9569$gDo33)
                                                   (if (if g$ls/false$9569$gDo33
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$9570$gDo33
                                                                  g$dots$9571$gDo33
                                                                  g$ys$9572$gDo33
                                                                  g$z$9573$gDo33)
                                                                (g$ellipsis?$7998$gDo33
                                                                  g$dots$9571$gDo33)))
                                                             g$ls/false$9569$gDo33))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9574$gDo33
                                                            g$dots$9575$gDo33
                                                            g$ys$9576$gDo33
                                                            g$z$9577$gDo33)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$9548$gDo33
                                                                 g$z$9577$gDo33
                                                                 g$n$9550$gDo33
                                                                 g$ids$9551$gDo33)))
                                                            (case-lambda
                                                              ((g$z$9580$gDo33
                                                                 g$ids$9581$gDo33)
                                                               ((case-lambda
                                                                  ((g$ids$9582$gDo33
                                                                     g$z$9583$gDo33)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$9547$gDo33
                                                                          g$ys$9576$gDo33
                                                                          g$n$9550$gDo33
                                                                          g$ids$9582$gDo33)))
                                                                     (case-lambda
                                                                       ((g$ys$9586$gDo33
                                                                          g$ids$9587$gDo33)
                                                                        ((case-lambda
                                                                           ((g$ids$9588$gDo33
                                                                              g$ys$9589$gDo33)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$9548$gDo33
                                                                                   g$x$9574$gDo33
                                                                                   (+ g$n$9550$gDo33
                                                                                      '1)
                                                                                   g$ids$9588$gDo33)))
                                                                              (case-lambda
                                                                                ((g$x$9592$gDo33
                                                                                   g$ids$9593$gDo33)
                                                                                 ((case-lambda
                                                                                    ((g$ids$9594$gDo33
                                                                                       g$x$9595$gDo33)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$9595$gDo33
                                                                                         (reverse
                                                                                           g$ys$9589$gDo33)
                                                                                         g$z$9583$gDo33)
                                                                                       g$ids$9594$gDo33)))
                                                                                  g$ids$9593$gDo33
                                                                                  g$x$9592$gDo33))))))
                                                                         g$ids$9587$gDo33
                                                                         g$ys$9586$gDo33))))))
                                                                g$ids$9581$gDo33
                                                                g$z$9580$gDo33))))))
                                                       g$ls/false$9569$gDo33)
                                                     ((case-lambda
                                                        ((g$t$9596$gDo33)
                                                         ((case-lambda
                                                            ((g$ls/false$9597$gDo33)
                                                             (if g$ls/false$9597$gDo33
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$9598$gDo33
                                                                      g$y$9599$gDo33)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$9548$gDo33
                                                                           g$y$9599$gDo33
                                                                           g$n$9550$gDo33
                                                                           g$ids$9551$gDo33)))
                                                                      (case-lambda
                                                                        ((g$y$9602$gDo33
                                                                           g$ids$9603$gDo33)
                                                                         ((case-lambda
                                                                            ((g$ids$9604$gDo33
                                                                               g$y$9605$gDo33)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$9548$gDo33
                                                                                    g$x$9598$gDo33
                                                                                    g$n$9550$gDo33
                                                                                    g$ids$9604$gDo33)))
                                                                               (case-lambda
                                                                                 ((g$x$9608$gDo33
                                                                                    g$ids$9609$gDo33)
                                                                                  ((case-lambda
                                                                                     ((g$ids$9610$gDo33
                                                                                        g$x$9611$gDo33)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$9611$gDo33
                                                                                          g$y$9605$gDo33)
                                                                                        g$ids$9610$gDo33)))
                                                                                   g$ids$9609$gDo33
                                                                                   g$x$9608$gDo33))))))
                                                                          g$ids$9603$gDo33
                                                                          g$y$9602$gDo33))))))
                                                                 g$ls/false$9597$gDo33)
                                                               ((case-lambda
                                                                  ((g$t$9612$gDo33)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9613$gDo33)
                                                                       (if g$ls/false$9613$gDo33
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$9551$gDo33)))
                                                                           g$ls/false$9613$gDo33)
                                                                         ((case-lambda
                                                                            ((g$t$9614$gDo33)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9615$gDo33)
                                                                                 (if (if g$ls/false$9615$gDo33
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$9616$gDo33)
                                                                                              (not (g$stx?$7691$gDo33
                                                                                                     g$p$9616$gDo33))))
                                                                                           g$ls/false$9615$gDo33))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$9617$gDo33)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$9548$gDo33
                                                                                               g$p$9617$gDo33
                                                                                               g$n$9550$gDo33
                                                                                               g$ids$9551$gDo33)))
                                                                                          (case-lambda
                                                                                            ((g$p$9620$gDo33
                                                                                               g$ids$9621$gDo33)
                                                                                             ((case-lambda
                                                                                                ((g$ids$9622$gDo33
                                                                                                   g$p$9623$gDo33)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$9623$gDo33)
                                                                                                   g$ids$9622$gDo33)))
                                                                                              g$ids$9621$gDo33
                                                                                              g$p$9620$gDo33))))))
                                                                                     g$ls/false$9615$gDo33)
                                                                                   ((case-lambda
                                                                                      ((g$t$9624$gDo33)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9625$gDo33)
                                                                                           (if g$ls/false$9625$gDo33
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$9626$gDo33)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7730$gDo33
                                                                                                        g$datum$9626$gDo33))
                                                                                                    g$ids$9551$gDo33)))
                                                                                               g$ls/false$9625$gDo33)
                                                                                             (g$syntax-violation$8109$gDo33
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$9624$gDo33))))
                                                                                        (g$syntax-dispatch$7997$gDo33
                                                                                          g$t$9624$gDo33
                                                                                          'any))))
                                                                                    g$t$9614$gDo33))))
                                                                              (g$syntax-dispatch$7997$gDo33
                                                                                g$t$9614$gDo33
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$9612$gDo33))))
                                                                    (g$syntax-dispatch$7997$gDo33
                                                                      g$t$9612$gDo33
                                                                      '()))))
                                                                g$t$9596$gDo33))))
                                                          (g$syntax-dispatch$7997$gDo33
                                                            g$t$9596$gDo33
                                                            '(any . any)))))
                                                      g$t$9568$gDo33))))
                                                (g$syntax-dispatch$7997$gDo33
                                                  g$t$9568$gDo33
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$9556$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$9556$gDo33
                                        '(any any)))))
                                  g$t$9552$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$9552$gDo33
                              'any))))
                        g$p$9549$gDo33)))))
          (g$cvt$9548$gDo33 g$pattern$9545$gDo33 '0 '())))))
   (g$syntax-dispatch$7997$gDo33
     g$syntax-dispatch$11500$gDo33
     ((case-lambda
        (()
         (letrec* ((g$stx^$9642$gDo33
                     (case-lambda
                       ((g$e$9752$gDo33
                          g$m*$9753$gDo33
                          g$s*$9754$gDo33
                          g$ae*$9755$gDo33)
                        (if (if (null? g$m*$9753$gDo33)
                              (if (null? g$s*$9754$gDo33)
                                (begin '#f (null? g$ae*$9755$gDo33))
                                '#f)
                              '#f)
                          g$e$9752$gDo33
                          (g$mkstx$7707$gDo33
                            g$e$9752$gDo33
                            g$m*$9753$gDo33
                            g$s*$9754$gDo33
                            g$ae*$9755$gDo33)))))
                   (g$match-each$9643$gDo33
                     (case-lambda
                       ((g$e$9736$gDo33
                          g$p$9737$gDo33
                          g$m*$9738$gDo33
                          g$s*$9739$gDo33
                          g$ae*$9740$gDo33)
                        (if (pair? g$e$9736$gDo33)
                          ((case-lambda
                             ((g$first$9741$gDo33)
                              (if g$first$9741$gDo33
                                (begin
                                  '#f
                                  ((case-lambda
                                     ((g$rest$9742$gDo33)
                                      (if g$rest$9742$gDo33
                                        (begin
                                          '#f
                                          (cons
                                            g$first$9741$gDo33
                                            g$rest$9742$gDo33))
                                        '#f)))
                                   (g$match-each$9643$gDo33
                                     (cdr g$e$9736$gDo33)
                                     g$p$9737$gDo33
                                     g$m*$9738$gDo33
                                     g$s*$9739$gDo33
                                     g$ae*$9740$gDo33)))
                                '#f)))
                           (g$match$9649$gDo33
                             (car g$e$9736$gDo33)
                             g$p$9737$gDo33
                             g$m*$9738$gDo33
                             g$s*$9739$gDo33
                             g$ae*$9740$gDo33
                             '()))
                          (if (null? g$e$9736$gDo33)
                            '()
                            (if (g$stx?$7691$gDo33 g$e$9736$gDo33)
                              (if (not (g$top-marked?$7657$gDo33
                                         g$m*$9738$gDo33))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7706$gDo33
                                         g$m*$9738$gDo33
                                         g$s*$9739$gDo33
                                         g$ae*$9740$gDo33
                                         g$e$9736$gDo33)))
                                    (case-lambda
                                      ((g$m*$9746$gDo33
                                         g$s*$9747$gDo33
                                         g$ae*$9748$gDo33)
                                       ((case-lambda
                                          ((g$ae*$9749$gDo33
                                             g$s*$9750$gDo33
                                             g$m*$9751$gDo33)
                                           (g$match-each$9643$gDo33
                                             (g$stx-expr$7693$gDo33
                                               g$e$9736$gDo33)
                                             g$p$9737$gDo33
                                             g$m*$9751$gDo33
                                             g$s*$9750$gDo33
                                             g$ae*$9749$gDo33)))
                                        g$ae*$9748$gDo33
                                        g$s*$9747$gDo33
                                        g$m*$9746$gDo33)))))
                                '#f)
                              (if (annotation? g$e$9736$gDo33)
                                (g$match-each$9643$gDo33
                                  (annotation-expression g$e$9736$gDo33)
                                  g$p$9737$gDo33
                                  g$m*$9738$gDo33
                                  g$s*$9739$gDo33
                                  g$ae*$9740$gDo33)
                                '#f)))))))
                   (g$match-each+$9644$gDo33
                     (case-lambda
                       ((g$e$9704$gDo33
                          g$x-pat$9705$gDo33
                          g$y-pat$9706$gDo33
                          g$z-pat$9707$gDo33
                          g$m*$9708$gDo33
                          g$s*$9709$gDo33
                          g$ae*$9710$gDo33
                          g$r$9711$gDo33)
                        ((letrec ((g$f$9712$gDo33
                                    (case-lambda
                                      ((g$e$9713$gDo33
                                         g$m*$9714$gDo33
                                         g$s*$9715$gDo33
                                         g$ae*$9716$gDo33)
                                       (if (pair? g$e$9713$gDo33)
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$f$9712$gDo33
                                                (cdr g$e$9713$gDo33)
                                                g$m*$9714$gDo33
                                                g$s*$9715$gDo33
                                                g$ae*$9716$gDo33)))
                                           (case-lambda
                                             ((g$xr*$9720$gDo33
                                                g$y-pat$9721$gDo33
                                                g$r$9722$gDo33)
                                              ((case-lambda
                                                 ((g$r$9723$gDo33
                                                    g$y-pat$9724$gDo33
                                                    g$xr*$9725$gDo33)
                                                  (if g$r$9723$gDo33
                                                    (if (null?
                                                          g$y-pat$9724$gDo33)
                                                      ((case-lambda
                                                         ((g$xr$9726$gDo33)
                                                          (if g$xr$9726$gDo33
                                                            (values
                                                              (cons
                                                                g$xr$9726$gDo33
                                                                g$xr*$9725$gDo33)
                                                              g$y-pat$9724$gDo33
                                                              g$r$9723$gDo33)
                                                            (values
                                                              '#f
                                                              '#f
                                                              '#f))))
                                                       (g$match$9649$gDo33
                                                         (car g$e$9713$gDo33)
                                                         g$x-pat$9705$gDo33
                                                         g$m*$9714$gDo33
                                                         g$s*$9715$gDo33
                                                         g$ae*$9716$gDo33
                                                         '()))
                                                      (values
                                                        '()
                                                        (cdr g$y-pat$9724$gDo33)
                                                        (g$match$9649$gDo33
                                                          (car g$e$9713$gDo33)
                                                          (car g$y-pat$9724$gDo33)
                                                          g$m*$9714$gDo33
                                                          g$s*$9715$gDo33
                                                          g$ae*$9716$gDo33
                                                          g$r$9723$gDo33)))
                                                    (values '#f '#f '#f))))
                                               g$r$9722$gDo33
                                               g$y-pat$9721$gDo33
                                               g$xr*$9720$gDo33))))
                                         (if (g$stx?$7691$gDo33 g$e$9713$gDo33)
                                           (if (g$top-marked?$7657$gDo33
                                                 g$m*$9714$gDo33)
                                             (values
                                               '()
                                               g$y-pat$9706$gDo33
                                               (g$match$9649$gDo33
                                                 g$e$9713$gDo33
                                                 g$z-pat$9707$gDo33
                                                 g$m*$9714$gDo33
                                                 g$s*$9715$gDo33
                                                 g$ae*$9716$gDo33
                                                 g$r$9711$gDo33))
                                             (call-with-values
                                               (case-lambda
                                                 (()
                                                  (g$join-wraps$7706$gDo33
                                                    g$m*$9714$gDo33
                                                    g$s*$9715$gDo33
                                                    g$ae*$9716$gDo33
                                                    g$e$9713$gDo33)))
                                               (case-lambda
                                                 ((g$m*$9730$gDo33
                                                    g$s*$9731$gDo33
                                                    g$ae*$9732$gDo33)
                                                  ((case-lambda
                                                     ((g$ae*$9733$gDo33
                                                        g$s*$9734$gDo33
                                                        g$m*$9735$gDo33)
                                                      (g$f$9712$gDo33
                                                        (g$stx-expr$7693$gDo33
                                                          g$e$9713$gDo33)
                                                        g$m*$9735$gDo33
                                                        g$s*$9734$gDo33
                                                        g$ae*$9733$gDo33)))
                                                   g$ae*$9732$gDo33
                                                   g$s*$9731$gDo33
                                                   g$m*$9730$gDo33)))))
                                           (if (annotation? g$e$9713$gDo33)
                                             (g$f$9712$gDo33
                                               (annotation-expression
                                                 g$e$9713$gDo33)
                                               g$m*$9714$gDo33
                                               g$s*$9715$gDo33
                                               g$ae*$9716$gDo33)
                                             (values
                                               '()
                                               g$y-pat$9706$gDo33
                                               (g$match$9649$gDo33
                                                 g$e$9713$gDo33
                                                 g$z-pat$9707$gDo33
                                                 g$m*$9714$gDo33
                                                 g$s*$9715$gDo33
                                                 g$ae*$9716$gDo33
                                                 g$r$9711$gDo33)))))))))
                           g$f$9712$gDo33)
                         g$e$9704$gDo33
                         g$m*$9708$gDo33
                         g$s*$9709$gDo33
                         g$ae*$9710$gDo33))))
                   (g$match-each-any$9645$gDo33
                     (case-lambda
                       ((g$e$9690$gDo33
                          g$m*$9691$gDo33
                          g$s*$9692$gDo33
                          g$ae*$9693$gDo33)
                        (if (pair? g$e$9690$gDo33)
                          ((case-lambda
                             ((g$l$9694$gDo33)
                              (if g$l$9694$gDo33
                                (begin
                                  '#f
                                  (cons
                                    (g$stx^$9642$gDo33
                                      (car g$e$9690$gDo33)
                                      g$m*$9691$gDo33
                                      g$s*$9692$gDo33
                                      g$ae*$9693$gDo33)
                                    g$l$9694$gDo33))
                                '#f)))
                           (g$match-each-any$9645$gDo33
                             (cdr g$e$9690$gDo33)
                             g$m*$9691$gDo33
                             g$s*$9692$gDo33
                             g$ae*$9693$gDo33))
                          (if (null? g$e$9690$gDo33)
                            '()
                            (if (g$stx?$7691$gDo33 g$e$9690$gDo33)
                              (if (not (g$top-marked?$7657$gDo33
                                         g$m*$9691$gDo33))
                                (begin
                                  '#f
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$join-wraps$7706$gDo33
                                         g$m*$9691$gDo33
                                         g$s*$9692$gDo33
                                         g$ae*$9693$gDo33
                                         g$e$9690$gDo33)))
                                    (case-lambda
                                      ((g$m*$9698$gDo33
                                         g$s*$9699$gDo33
                                         g$ae*$9700$gDo33)
                                       ((case-lambda
                                          ((g$ae*$9701$gDo33
                                             g$s*$9702$gDo33
                                             g$m*$9703$gDo33)
                                           (g$match-each-any$9645$gDo33
                                             (g$stx-expr$7693$gDo33
                                               g$e$9690$gDo33)
                                             g$m*$9703$gDo33
                                             g$s*$9702$gDo33
                                             g$ae*$9701$gDo33)))
                                        g$ae*$9700$gDo33
                                        g$s*$9699$gDo33
                                        g$m*$9698$gDo33)))))
                                '#f)
                              (if (annotation? g$e$9690$gDo33)
                                (g$match-each-any$9645$gDo33
                                  (annotation-expression g$e$9690$gDo33)
                                  g$m*$9691$gDo33
                                  g$s*$9692$gDo33
                                  g$ae*$9693$gDo33)
                                '#f)))))))
                   (g$match-empty$9646$gDo33
                     (case-lambda
                       ((g$p$9687$gDo33 g$r$9688$gDo33)
                        (if (null? g$p$9687$gDo33)
                          g$r$9688$gDo33
                          (if (eq? g$p$9687$gDo33 '_)
                            g$r$9688$gDo33
                            (if (eq? g$p$9687$gDo33 'any)
                              (cons '() g$r$9688$gDo33)
                              (if (pair? g$p$9687$gDo33)
                                (g$match-empty$9646$gDo33
                                  (car g$p$9687$gDo33)
                                  (g$match-empty$9646$gDo33
                                    (cdr g$p$9687$gDo33)
                                    g$r$9688$gDo33))
                                (if (eq? g$p$9687$gDo33 'each-any)
                                  (cons '() g$r$9688$gDo33)
                                  ((case-lambda
                                     ((g$t$9689$gDo33)
                                      (if (g$memv$5056$gDo33
                                            g$t$9689$gDo33
                                            '(each))
                                        (g$match-empty$9646$gDo33
                                          (vector-ref g$p$9687$gDo33 '1)
                                          g$r$9688$gDo33)
                                        (if (g$memv$5056$gDo33
                                              g$t$9689$gDo33
                                              '(each+))
                                          (g$match-empty$9646$gDo33
                                            (vector-ref g$p$9687$gDo33 '1)
                                            (g$match-empty$9646$gDo33
                                              (reverse
                                                (vector-ref g$p$9687$gDo33 '2))
                                              (g$match-empty$9646$gDo33
                                                (vector-ref g$p$9687$gDo33 '3)
                                                g$r$9688$gDo33)))
                                          (if (g$memv$5056$gDo33
                                                g$t$9689$gDo33
                                                '(free-id atom))
                                            g$r$9688$gDo33
                                            (if (g$memv$5056$gDo33
                                                  g$t$9689$gDo33
                                                  '(scheme-id atom))
                                              g$r$9688$gDo33
                                              (if (g$memv$5056$gDo33
                                                    g$t$9689$gDo33
                                                    '(vector))
                                                (g$match-empty$9646$gDo33
                                                  (vector-ref g$p$9687$gDo33 '1)
                                                  g$r$9688$gDo33)
                                                (assertion-violation
                                                  'syntax-dispatch
                                                  '"invalid pattern"
                                                  g$p$9687$gDo33))))))))
                                   (vector-ref g$p$9687$gDo33 '0))))))))))
                   (g$combine$9647$gDo33
                     (case-lambda
                       ((g$r*$9685$gDo33 g$r$9686$gDo33)
                        (if (null? (car g$r*$9685$gDo33))
                          g$r$9686$gDo33
                          (cons
                            (g$map$5063$gDo33 car g$r*$9685$gDo33)
                            (g$combine$9647$gDo33
                              (g$map$5063$gDo33 cdr g$r*$9685$gDo33)
                              g$r$9686$gDo33))))))
                   (g$match*$9648$gDo33
                     (case-lambda
                       ((g$e$9667$gDo33
                          g$p$9668$gDo33
                          g$m*$9669$gDo33
                          g$s*$9670$gDo33
                          g$ae*$9671$gDo33
                          g$r$9672$gDo33)
                        (if (null? g$p$9668$gDo33)
                          (if (null? g$e$9667$gDo33)
                            (begin '#f g$r$9672$gDo33)
                            '#f)
                          (if (pair? g$p$9668$gDo33)
                            (if (pair? g$e$9667$gDo33)
                              (begin
                                '#f
                                (g$match$9649$gDo33
                                  (car g$e$9667$gDo33)
                                  (car g$p$9668$gDo33)
                                  g$m*$9669$gDo33
                                  g$s*$9670$gDo33
                                  g$ae*$9671$gDo33
                                  (g$match$9649$gDo33
                                    (cdr g$e$9667$gDo33)
                                    (cdr g$p$9668$gDo33)
                                    g$m*$9669$gDo33
                                    g$s*$9670$gDo33
                                    g$ae*$9671$gDo33
                                    g$r$9672$gDo33)))
                              '#f)
                            (if (eq? g$p$9668$gDo33 'each-any)
                              ((case-lambda
                                 ((g$l$9673$gDo33)
                                  (if g$l$9673$gDo33
                                    (begin
                                      '#f
                                      (cons g$l$9673$gDo33 g$r$9672$gDo33))
                                    '#f)))
                               (g$match-each-any$9645$gDo33
                                 g$e$9667$gDo33
                                 g$m*$9669$gDo33
                                 g$s*$9670$gDo33
                                 g$ae*$9671$gDo33))
                              ((case-lambda
                                 ((g$t$9674$gDo33)
                                  (if (g$memv$5056$gDo33 g$t$9674$gDo33 '(each))
                                    (if (null? g$e$9667$gDo33)
                                      (g$match-empty$9646$gDo33
                                        (vector-ref g$p$9668$gDo33 '1)
                                        g$r$9672$gDo33)
                                      ((case-lambda
                                         ((g$r*$9675$gDo33)
                                          (if g$r*$9675$gDo33
                                            (begin
                                              '#f
                                              (g$combine$9647$gDo33
                                                g$r*$9675$gDo33
                                                g$r$9672$gDo33))
                                            '#f)))
                                       (g$match-each$9643$gDo33
                                         g$e$9667$gDo33
                                         (vector-ref g$p$9668$gDo33 '1)
                                         g$m*$9669$gDo33
                                         g$s*$9670$gDo33
                                         g$ae*$9671$gDo33)))
                                    (if (g$memv$5056$gDo33
                                          g$t$9674$gDo33
                                          '(free-id))
                                      (if (symbol? g$e$9667$gDo33)
                                        (if (g$top-marked?$7657$gDo33
                                              g$m*$9669$gDo33)
                                          (if (g$free-id=?$7723$gDo33
                                                (g$stx^$9642$gDo33
                                                  g$e$9667$gDo33
                                                  g$m*$9669$gDo33
                                                  g$s*$9670$gDo33
                                                  g$ae*$9671$gDo33)
                                                (vector-ref g$p$9668$gDo33 '1))
                                            (begin '#f g$r$9672$gDo33)
                                            '#f)
                                          '#f)
                                        '#f)
                                      (if (g$memv$5056$gDo33
                                            g$t$9674$gDo33
                                            '(scheme-id))
                                        (if (symbol? g$e$9667$gDo33)
                                          (if (g$top-marked?$7657$gDo33
                                                g$m*$9669$gDo33)
                                            (if (g$free-id=?$7723$gDo33
                                                  (g$stx^$9642$gDo33
                                                    g$e$9667$gDo33
                                                    g$m*$9669$gDo33
                                                    g$s*$9670$gDo33
                                                    g$ae*$9671$gDo33)
                                                  (g$scheme-stx$7940$gDo33
                                                    (vector-ref
                                                      g$p$9668$gDo33
                                                      '1)))
                                              (begin '#f g$r$9672$gDo33)
                                              '#f)
                                            '#f)
                                          '#f)
                                        (if (g$memv$5056$gDo33
                                              g$t$9674$gDo33
                                              '(each+))
                                          (call-with-values
                                            (case-lambda
                                              (()
                                               (g$match-each+$9644$gDo33
                                                 g$e$9667$gDo33
                                                 (vector-ref g$p$9668$gDo33 '1)
                                                 (vector-ref g$p$9668$gDo33 '2)
                                                 (vector-ref g$p$9668$gDo33 '3)
                                                 g$m*$9669$gDo33
                                                 g$s*$9670$gDo33
                                                 g$ae*$9671$gDo33
                                                 g$r$9672$gDo33)))
                                            (case-lambda
                                              ((g$xr*$9679$gDo33
                                                 g$y-pat$9680$gDo33
                                                 g$r$9681$gDo33)
                                               ((case-lambda
                                                  ((g$r$9682$gDo33
                                                     g$y-pat$9683$gDo33
                                                     g$xr*$9684$gDo33)
                                                   (if g$r$9682$gDo33
                                                     (if (null?
                                                           g$y-pat$9683$gDo33)
                                                       (begin
                                                         '#f
                                                         (if (null?
                                                               g$xr*$9684$gDo33)
                                                           (g$match-empty$9646$gDo33
                                                             (vector-ref
                                                               g$p$9668$gDo33
                                                               '1)
                                                             g$r$9682$gDo33)
                                                           (g$combine$9647$gDo33
                                                             g$xr*$9684$gDo33
                                                             g$r$9682$gDo33)))
                                                       '#f)
                                                     '#f)))
                                                g$r$9681$gDo33
                                                g$y-pat$9680$gDo33
                                                g$xr*$9679$gDo33))))
                                          (if (g$memv$5056$gDo33
                                                g$t$9674$gDo33
                                                '(atom))
                                            (if (equal?
                                                  (vector-ref g$p$9668$gDo33 '1)
                                                  (g$strip$7729$gDo33
                                                    g$e$9667$gDo33
                                                    g$m*$9669$gDo33))
                                              (begin '#f g$r$9672$gDo33)
                                              '#f)
                                            (if (g$memv$5056$gDo33
                                                  g$t$9674$gDo33
                                                  '(vector))
                                              (if (vector? g$e$9667$gDo33)
                                                (begin
                                                  '#f
                                                  (g$match$9649$gDo33
                                                    (vector->list
                                                      g$e$9667$gDo33)
                                                    (vector-ref
                                                      g$p$9668$gDo33
                                                      '1)
                                                    g$m*$9669$gDo33
                                                    g$s*$9670$gDo33
                                                    g$ae*$9671$gDo33
                                                    g$r$9672$gDo33))
                                                '#f)
                                              (assertion-violation
                                                'syntax-dispatch
                                                '"invalid pattern"
                                                g$p$9668$gDo33)))))))))
                               (vector-ref g$p$9668$gDo33 '0))))))))
                   (g$match$9649$gDo33
                     (case-lambda
                       ((g$e$9652$gDo33
                          g$p$9653$gDo33
                          g$m*$9654$gDo33
                          g$s*$9655$gDo33
                          g$ae*$9656$gDo33
                          g$r$9657$gDo33)
                        (if (not g$r$9657$gDo33)
                          '#f
                          (if (eq? g$p$9653$gDo33 '_)
                            g$r$9657$gDo33
                            (if (eq? g$p$9653$gDo33 'any)
                              (cons
                                (g$stx^$9642$gDo33
                                  g$e$9652$gDo33
                                  g$m*$9654$gDo33
                                  g$s*$9655$gDo33
                                  g$ae*$9656$gDo33)
                                g$r$9657$gDo33)
                              (if (g$stx?$7691$gDo33 g$e$9652$gDo33)
                                (if (not (g$top-marked?$7657$gDo33
                                           g$m*$9654$gDo33))
                                  (begin
                                    '#f
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$join-wraps$7706$gDo33
                                           g$m*$9654$gDo33
                                           g$s*$9655$gDo33
                                           g$ae*$9656$gDo33
                                           g$e$9652$gDo33)))
                                      (case-lambda
                                        ((g$m*$9661$gDo33
                                           g$s*$9662$gDo33
                                           g$ae*$9663$gDo33)
                                         ((case-lambda
                                            ((g$ae*$9664$gDo33
                                               g$s*$9665$gDo33
                                               g$m*$9666$gDo33)
                                             (g$match$9649$gDo33
                                               (g$stx-expr$7693$gDo33
                                                 g$e$9652$gDo33)
                                               g$p$9653$gDo33
                                               g$m*$9666$gDo33
                                               g$s*$9665$gDo33
                                               g$ae*$9664$gDo33
                                               g$r$9657$gDo33)))
                                          g$ae*$9663$gDo33
                                          g$s*$9662$gDo33
                                          g$m*$9661$gDo33)))))
                                  '#f)
                                (if (annotation? g$e$9652$gDo33)
                                  (g$match$9649$gDo33
                                    (annotation-expression g$e$9652$gDo33)
                                    g$p$9653$gDo33
                                    g$m*$9654$gDo33
                                    g$s*$9655$gDo33
                                    g$ae*$9656$gDo33
                                    g$r$9657$gDo33)
                                  (g$match*$9648$gDo33
                                    g$e$9652$gDo33
                                    g$p$9653$gDo33
                                    g$m*$9654$gDo33
                                    g$s*$9655$gDo33
                                    g$ae*$9656$gDo33
                                    g$r$9657$gDo33))))))))))
           (case-lambda
             ((g$e$9650$gDo33 g$p$9651$gDo33)
              (g$match$9649$gDo33
                g$e$9650$gDo33
                g$p$9651$gDo33
                '()
                '()
                '()
                '()))))))))
   (g$ellipsis?$7998$gDo33
     g$ellipsis?$11501$gDo33
     (case-lambda
       ((g$x$9756$gDo33)
        (if (g$id?$7719$gDo33 g$x$9756$gDo33)
          (begin
            '#f
            (g$free-id=?$7723$gDo33
              g$x$9756$gDo33
              (g$scheme-stx$7940$gDo33 '...)))
          '#f))))
   (g$underscore?$7999$gDo33
     g$underscore?$11502$gDo33
     (case-lambda
       ((g$x$9757$gDo33)
        (if (g$id?$7719$gDo33 g$x$9757$gDo33)
          (begin
            '#f
            (g$free-id=?$7723$gDo33
              g$x$9757$gDo33
              (g$scheme-stx$7940$gDo33 '_)))
          '#f))))
   (g$verify-literals$8000$gDo33
     g$verify-literals$11503$gDo33
     (case-lambda
       ((g$lits$9758$gDo33 g$expr$9759$gDo33)
        (g$for-each$5064$gDo33
          (case-lambda
            ((g$x$9760$gDo33)
             (if ((case-lambda
                    ((g$t$9761$gDo33)
                     (if g$t$9761$gDo33
                       g$t$9761$gDo33
                       ((case-lambda
                          ((g$t$9762$gDo33)
                           (if g$t$9762$gDo33
                             g$t$9762$gDo33
                             (begin
                               '#f
                               (g$underscore?$7999$gDo33 g$x$9760$gDo33)))))
                        (g$ellipsis?$7998$gDo33 g$x$9760$gDo33)))))
                  (not (g$id?$7719$gDo33 g$x$9760$gDo33)))
               (g$syntax-violation$8109$gDo33
                 '#f
                 '"invalid literal"
                 g$expr$9759$gDo33
                 g$x$9760$gDo33)
               (void))))
          g$lits$9758$gDo33))))
   (g$syntax-case-transformer$8001$gDo33
     g$syntax-case-transformer$11504$gDo33
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9763$gDo33
                     (case-lambda
                       ((g$pvars$9820$gDo33
                          g$expr$9821$gDo33
                          g$y$9822$gDo33
                          g$r$9823$gDo33
                          g$mr$9824$gDo33)
                        ((case-lambda
                           ((g$ids$9825$gDo33 g$levels$9826$gDo33)
                            ((case-lambda
                               ((g$labels$9827$gDo33 g$new-vars$9828$gDo33)
                                ((case-lambda
                                   ((g$body$9829$gDo33)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7645$gDo33
                                        '#f
                                        g$new-vars$9828$gDo33
                                        g$body$9829$gDo33)
                                      g$y$9822$gDo33)))
                                 (g$chi-expr$8015$gDo33
                                   (g$add-subst$7709$gDo33
                                     (g$make-full-rib$7687$gDo33
                                       g$ids$9825$gDo33
                                       g$labels$9827$gDo33)
                                     g$expr$9821$gDo33)
                                   (append
                                     (g$map$5063$gDo33
                                       (case-lambda
                                         ((g$label$9830$gDo33
                                            g$var$9831$gDo33
                                            g$level$9832$gDo33)
                                          (cons
                                            g$label$9830$gDo33
                                            (g$make-binding$7735$gDo33
                                              'syntax
                                              (cons
                                                g$var$9831$gDo33
                                                g$level$9832$gDo33)))))
                                       g$labels$9827$gDo33
                                       g$new-vars$9828$gDo33
                                       (g$map$5063$gDo33
                                         cdr
                                         g$pvars$9820$gDo33))
                                     g$r$9823$gDo33)
                                   g$mr$9824$gDo33))))
                             (g$map$5063$gDo33
                               g$gen-label$7660$gDo33
                               g$ids$9825$gDo33)
                             (g$map$5063$gDo33
                               g$gen-lexical$7658$gDo33
                               g$ids$9825$gDo33))))
                         (g$map$5063$gDo33 car g$pvars$9820$gDo33)
                         (g$map$5063$gDo33 cdr g$pvars$9820$gDo33)))))
                   (g$invalid-ids-error$9764$gDo33
                     (case-lambda
                       ((g$id*$9814$gDo33 g$e$9815$gDo33 g$class$9816$gDo33)
                        ((letrec ((g$find$9817$gDo33
                                    (case-lambda
                                      ((g$id*$9818$gDo33 g$ok*$9819$gDo33)
                                       (if (null? g$id*$9818$gDo33)
                                         (g$syntax-violation$8109$gDo33
                                           '#f
                                           '"invalid syntax"
                                           g$e$9815$gDo33)
                                         (if (g$id?$7719$gDo33
                                               (car g$id*$9818$gDo33))
                                           (if (g$bound-id-member?$7726$gDo33
                                                 (car g$id*$9818$gDo33)
                                                 g$ok*$9819$gDo33)
                                             (g$syntax-error$8106$gDo33
                                               (car g$id*$9818$gDo33)
                                               '"duplicate "
                                               g$class$9816$gDo33)
                                             (g$find$9817$gDo33
                                               (cdr g$id*$9818$gDo33)
                                               (cons
                                                 (car g$id*$9818$gDo33)
                                                 g$ok*$9819$gDo33)))
                                           (g$syntax-error$8106$gDo33
                                             (car g$id*$9818$gDo33)
                                             '"invalid "
                                             g$class$9816$gDo33)))))))
                           g$find$9817$gDo33)
                         g$id*$9814$gDo33
                         '()))))
                   (g$gen-clause$9765$gDo33
                     (case-lambda
                       ((g$x$9794$gDo33
                          g$keys$9795$gDo33
                          g$clauses$9796$gDo33
                          g$r$9797$gDo33
                          g$mr$9798$gDo33
                          g$pat$9799$gDo33
                          g$fender$9800$gDo33
                          g$expr$9801$gDo33)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7996$gDo33
                               g$pat$9799$gDo33
                               g$keys$9795$gDo33)))
                          (case-lambda
                            ((g$p$9804$gDo33 g$pvars$9805$gDo33)
                             ((case-lambda
                                ((g$pvars$9806$gDo33 g$p$9807$gDo33)
                                 (if (not (g$distinct-bound-ids?$7725$gDo33
                                            (g$map$5063$gDo33
                                              car
                                              g$pvars$9806$gDo33)))
                                   (g$invalid-ids-error$9764$gDo33
                                     (g$map$5063$gDo33 car g$pvars$9806$gDo33)
                                     g$pat$9799$gDo33
                                     '"pattern variable")
                                   (if (not (g$for-all$5061$gDo33
                                              (case-lambda
                                                ((g$x$9808$gDo33)
                                                 (not (g$ellipsis?$7998$gDo33
                                                        (car g$x$9808$gDo33)))))
                                              g$pvars$9806$gDo33))
                                     (g$syntax-violation$8109$gDo33
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9799$gDo33)
                                     ((case-lambda
                                        ((g$y$9809$gDo33)
                                         ((case-lambda
                                            ((g$test$9810$gDo33)
                                             ((case-lambda
                                                ((g$conseq$9811$gDo33)
                                                 ((case-lambda
                                                    ((g$altern$9812$gDo33)
                                                     (list
                                                       (g$build-lambda$7645$gDo33
                                                         '#f
                                                         (list g$y$9809$gDo33)
                                                         (list
                                                           'if
                                                           g$test$9810$gDo33
                                                           g$conseq$9811$gDo33
                                                           g$altern$9812$gDo33))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9794$gDo33
                                                         (list
                                                           'quote
                                                           g$p$9807$gDo33)))))
                                                  (g$gen-syntax-case$9766$gDo33
                                                    g$x$9794$gDo33
                                                    g$keys$9795$gDo33
                                                    g$clauses$9796$gDo33
                                                    g$r$9797$gDo33
                                                    g$mr$9798$gDo33))))
                                              (g$build-dispatch-call$9763$gDo33
                                                g$pvars$9806$gDo33
                                                g$expr$9801$gDo33
                                                g$y$9809$gDo33
                                                g$r$9797$gDo33
                                                g$mr$9798$gDo33))))
                                          (if (eq? g$fender$9800$gDo33 '#t)
                                            g$y$9809$gDo33
                                            ((case-lambda
                                               ((g$call$9813$gDo33)
                                                (list
                                                  'if
                                                  g$y$9809$gDo33
                                                  g$call$9813$gDo33
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9763$gDo33
                                               g$pvars$9806$gDo33
                                               g$fender$9800$gDo33
                                               g$y$9809$gDo33
                                               g$r$9797$gDo33
                                               g$mr$9798$gDo33))))))
                                      (g$gen-lexical$7658$gDo33 'tmp))))))
                              g$pvars$9805$gDo33
                              g$p$9804$gDo33)))))))
                   (g$gen-syntax-case$9766$gDo33
                     (case-lambda
                       ((g$x$9777$gDo33
                          g$keys$9778$gDo33
                          g$clauses$9779$gDo33
                          g$r$9780$gDo33
                          g$mr$9781$gDo33)
                        (if (null? g$clauses$9779$gDo33)
                          (list '(primitive syntax-error) g$x$9777$gDo33)
                          ((case-lambda
                             ((g$t$9782$gDo33)
                              ((case-lambda
                                 ((g$ls/false$9783$gDo33)
                                  (if g$ls/false$9783$gDo33
                                    (apply
                                      (case-lambda
                                        ((g$pat$9784$gDo33 g$expr$9785$gDo33)
                                         (if (if (g$id?$7719$gDo33
                                                   g$pat$9784$gDo33)
                                               (if (not (g$bound-id-member?$7726$gDo33
                                                          g$pat$9784$gDo33
                                                          g$keys$9778$gDo33))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7998$gDo33
                                                          g$pat$9784$gDo33)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7723$gDo33
                                                 g$pat$9784$gDo33
                                                 (g$scheme-stx$7940$gDo33 '_))
                                             (g$chi-expr$8015$gDo33
                                               g$expr$9785$gDo33
                                               g$r$9780$gDo33
                                               g$mr$9781$gDo33)
                                             ((case-lambda
                                                ((g$lab$9786$gDo33
                                                   g$lex$9787$gDo33)
                                                 ((case-lambda
                                                    ((g$body$9788$gDo33)
                                                     (list
                                                       (g$build-lambda$7645$gDo33
                                                         '#f
                                                         (list g$lex$9787$gDo33)
                                                         g$body$9788$gDo33)
                                                       g$x$9777$gDo33)))
                                                  (g$chi-expr$8015$gDo33
                                                    (g$add-subst$7709$gDo33
                                                      (g$make-full-rib$7687$gDo33
                                                        (list g$pat$9784$gDo33)
                                                        (list g$lab$9786$gDo33))
                                                      g$expr$9785$gDo33)
                                                    (cons
                                                      (cons
                                                        g$lab$9786$gDo33
                                                        (g$make-binding$7735$gDo33
                                                          'syntax
                                                          (cons
                                                            g$lex$9787$gDo33
                                                            '0)))
                                                      g$r$9780$gDo33)
                                                    g$mr$9781$gDo33))))
                                              (g$gen-label$7660$gDo33
                                                g$pat$9784$gDo33)
                                              (g$gen-lexical$7658$gDo33
                                                g$pat$9784$gDo33)))
                                           (g$gen-clause$9765$gDo33
                                             g$x$9777$gDo33
                                             g$keys$9778$gDo33
                                             (cdr g$clauses$9779$gDo33)
                                             g$r$9780$gDo33
                                             g$mr$9781$gDo33
                                             g$pat$9784$gDo33
                                             '#t
                                             g$expr$9785$gDo33))))
                                      g$ls/false$9783$gDo33)
                                    ((case-lambda
                                       ((g$t$9789$gDo33)
                                        ((case-lambda
                                           ((g$ls/false$9790$gDo33)
                                            (if g$ls/false$9790$gDo33
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9791$gDo33
                                                     g$fender$9792$gDo33
                                                     g$expr$9793$gDo33)
                                                   (g$gen-clause$9765$gDo33
                                                     g$x$9777$gDo33
                                                     g$keys$9778$gDo33
                                                     (cdr g$clauses$9779$gDo33)
                                                     g$r$9780$gDo33
                                                     g$mr$9781$gDo33
                                                     g$pat$9791$gDo33
                                                     g$fender$9792$gDo33
                                                     g$expr$9793$gDo33)))
                                                g$ls/false$9790$gDo33)
                                              (g$syntax-violation$8109$gDo33
                                                '#f
                                                '"invalid syntax"
                                                g$t$9789$gDo33))))
                                         (g$syntax-dispatch$7997$gDo33
                                           g$t$9789$gDo33
                                           '(any any any)))))
                                     g$t$9782$gDo33))))
                               (g$syntax-dispatch$7997$gDo33
                                 g$t$9782$gDo33
                                 '(any any)))))
                           (car g$clauses$9779$gDo33)))))))
           (case-lambda
             ((g$e$9767$gDo33 g$r$9768$gDo33 g$mr$9769$gDo33)
              ((case-lambda
                 ((g$t$9770$gDo33)
                  ((case-lambda
                     ((g$ls/false$9771$gDo33)
                      (if g$ls/false$9771$gDo33
                        (apply
                          (case-lambda
                            ((g$expr$9772$gDo33
                               g$keys$9773$gDo33
                               g$clauses$9774$gDo33)
                             (begin
                               (g$verify-literals$8000$gDo33
                                 g$keys$9773$gDo33
                                 g$e$9767$gDo33)
                               ((case-lambda
                                  ((g$x$9775$gDo33)
                                   ((case-lambda
                                      ((g$body$9776$gDo33)
                                       (list
                                         (g$build-lambda$7645$gDo33
                                           '#f
                                           (list g$x$9775$gDo33)
                                           g$body$9776$gDo33)
                                         (g$chi-expr$8015$gDo33
                                           g$expr$9772$gDo33
                                           g$r$9768$gDo33
                                           g$mr$9769$gDo33))))
                                    (g$gen-syntax-case$9766$gDo33
                                      g$x$9775$gDo33
                                      g$keys$9773$gDo33
                                      g$clauses$9774$gDo33
                                      g$r$9768$gDo33
                                      g$mr$9769$gDo33))))
                                (g$gen-lexical$7658$gDo33 'tmp)))))
                          g$ls/false$9771$gDo33)
                        (g$syntax-violation$8109$gDo33
                          '#f
                          '"invalid syntax"
                          g$t$9770$gDo33))))
                   (g$syntax-dispatch$7997$gDo33
                     g$t$9770$gDo33
                     '(_ any each-any . each-any)))))
               g$e$9767$gDo33))))))))
   (g$ellipsis-map$8002$gDo33
     g$ellipsis-map$11505$gDo33
     (case-lambda
       ((g$proc$9833$gDo33 g$ls$9834$gDo33 . g$ls*$9835$gDo33)
        (letrec* ((g$who$9836$gDo33 '...))
          (begin
            (if (not (list? g$ls$9834$gDo33))
              (assertion-violation
                g$who$9836$gDo33
                '"not a list"
                g$ls$9834$gDo33)
              (void))
            (if (not (null? g$ls*$9835$gDo33))
              ((case-lambda
                 ((g$n$9837$gDo33)
                  (g$for-each$5064$gDo33
                    (case-lambda
                      ((g$x$9838$gDo33)
                       (begin
                         (if (not (list? g$x$9838$gDo33))
                           (assertion-violation
                             g$who$9836$gDo33
                             '"not a list"
                             g$x$9838$gDo33)
                           (void))
                         (if (not (= (length g$x$9838$gDo33) g$n$9837$gDo33))
                           (assertion-violation
                             g$who$9836$gDo33
                             '"length mismatch"
                             g$ls$9834$gDo33
                             g$x$9838$gDo33)
                           (void)))))
                    g$ls*$9835$gDo33)))
               (length g$ls$9834$gDo33))
              (void))
            (apply
              g$map$5063$gDo33
              g$proc$9833$gDo33
              g$ls$9834$gDo33
              g$ls*$9835$gDo33))))))
   (g$syntax-transformer$8003$gDo33
     g$syntax-transformer$11506$gDo33
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9839$gDo33
                     (case-lambda
                       ((g$src$9899$gDo33
                          g$e$9900$gDo33
                          g$r$9901$gDo33
                          g$maps$9902$gDo33
                          g$ellipsis?$9903$gDo33
                          g$vec?$9904$gDo33)
                        ((case-lambda
                           ((g$t$9905$gDo33)
                            ((case-lambda
                               ((g$ls/false$9906$gDo33)
                                (if (if g$ls/false$9906$gDo33
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9907$gDo33)
                                             (g$ellipsis?$9903$gDo33
                                               g$dots$9907$gDo33)))
                                          g$ls/false$9906$gDo33))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9908$gDo33)
                                       (g$syntax-violation$8109$gDo33
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9899$gDo33)))
                                    g$ls/false$9906$gDo33)
                                  ((case-lambda
                                     ((g$t$9909$gDo33)
                                      ((case-lambda
                                         ((g$ls/false$9910$gDo33)
                                          (if (if g$ls/false$9910$gDo33
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9911$gDo33)
                                                       (g$id?$7719$gDo33
                                                         g$id$9911$gDo33)))
                                                    g$ls/false$9910$gDo33))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9912$gDo33)
                                                 ((case-lambda
                                                    ((g$label$9913$gDo33)
                                                     ((case-lambda
                                                        ((g$b$9914$gDo33)
                                                         (if (eq? (g$binding-type$7736$gDo33
                                                                    g$b$9914$gDo33)
                                                                  'syntax)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$var.lev$9917$gDo33)
                                                                    (g$gen-ref$9840$gDo33
                                                                      g$src$9899$gDo33
                                                                      (car g$var.lev$9917$gDo33)
                                                                      (cdr g$var.lev$9917$gDo33)
                                                                      g$maps$9902$gDo33)))
                                                                 (g$binding-value$7737$gDo33
                                                                   g$b$9914$gDo33))))
                                                             (case-lambda
                                                               ((g$var$9918$gDo33
                                                                  g$maps$9919$gDo33)
                                                                ((case-lambda
                                                                   ((g$maps$9920$gDo33
                                                                      g$var$9921$gDo33)
                                                                    (values
                                                                      (list
                                                                        'ref
                                                                        g$var$9921$gDo33)
                                                                      g$maps$9920$gDo33)))
                                                                 g$maps$9919$gDo33
                                                                 g$var$9918$gDo33))))
                                                           (values
                                                             (list
                                                               'quote
                                                               g$e$9900$gDo33)
                                                             g$maps$9902$gDo33))))
                                                      (g$label->binding$7734$gDo33
                                                        g$label$9913$gDo33
                                                        g$r$9901$gDo33))))
                                                  (g$id->label$7732$gDo33
                                                    g$e$9900$gDo33))))
                                              g$ls/false$9910$gDo33)
                                            ((case-lambda
                                               ((g$t$9922$gDo33)
                                                ((case-lambda
                                                   ((g$ls/false$9923$gDo33)
                                                    (if (if g$ls/false$9923$gDo33
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9924$gDo33
                                                                   g$e$9925$gDo33)
                                                                 (g$ellipsis?$9903$gDo33
                                                                   g$dots$9924$gDo33)))
                                                              g$ls/false$9923$gDo33))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9926$gDo33
                                                             g$e$9927$gDo33)
                                                           (if g$vec?$9904$gDo33
                                                             (g$syntax-violation$8109$gDo33
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9899$gDo33)
                                                             (g$gen-syntax$9839$gDo33
                                                               g$src$9899$gDo33
                                                               g$e$9927$gDo33
                                                               g$r$9901$gDo33
                                                               g$maps$9902$gDo33
                                                               (case-lambda
                                                                 ((g$x$9928$gDo33)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9923$gDo33)
                                                      ((case-lambda
                                                         ((g$t$9929$gDo33)
                                                          ((case-lambda
                                                             ((g$ls/false$9930$gDo33)
                                                              (if (if g$ls/false$9930$gDo33
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9931$gDo33
                                                                             g$dots$9932$gDo33
                                                                             g$y$9933$gDo33)
                                                                           (g$ellipsis?$9903$gDo33
                                                                             g$dots$9932$gDo33)))
                                                                        g$ls/false$9930$gDo33))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9934$gDo33
                                                                       g$dots$9935$gDo33
                                                                       g$y$9936$gDo33)
                                                                     ((letrec ((g$f$9937$gDo33
                                                                                 (case-lambda
                                                                                   ((g$y$9938$gDo33
                                                                                      g$k$9939$gDo33)
                                                                                    ((case-lambda
                                                                                       ((g$t$9940$gDo33)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9941$gDo33)
                                                                                            (if g$ls/false$9941$gDo33
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9939$gDo33
                                                                                                     g$maps$9902$gDo33)))
                                                                                                g$ls/false$9941$gDo33)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9942$gDo33)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9943$gDo33)
                                                                                                      (if (if g$ls/false$9943$gDo33
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9944$gDo33
                                                                                                                     g$y$9945$gDo33)
                                                                                                                   (g$ellipsis?$9903$gDo33
                                                                                                                     g$dots$9944$gDo33)))
                                                                                                                g$ls/false$9943$gDo33))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9946$gDo33
                                                                                                               g$y$9947$gDo33)
                                                                                                             (g$f$9937$gDo33
                                                                                                               g$y$9947$gDo33
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9948$gDo33)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9939$gDo33
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9948$gDo33))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9951$gDo33
                                                                                                                         g$maps$9952$gDo33)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9953$gDo33
                                                                                                                             g$x$9954$gDo33)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9953$gDo33))
                                                                                                                             (g$syntax-violation$8109$gDo33
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9899$gDo33)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9842$gDo33
                                                                                                                                 g$x$9954$gDo33
                                                                                                                                 (car g$maps$9953$gDo33))
                                                                                                                               (cdr g$maps$9953$gDo33)))))
                                                                                                                        g$maps$9952$gDo33
                                                                                                                        g$x$9951$gDo33)))))))))
                                                                                                          g$ls/false$9943$gDo33)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9955$gDo33)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9956$gDo33)
                                                                                                                (if g$ls/false$9956$gDo33
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9839$gDo33
                                                                                                                              g$src$9899$gDo33
                                                                                                                              g$y$9938$gDo33
                                                                                                                              g$r$9901$gDo33
                                                                                                                              g$maps$9902$gDo33
                                                                                                                              g$ellipsis?$9903$gDo33
                                                                                                                              g$vec?$9904$gDo33)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9959$gDo33
                                                                                                                              g$maps$9960$gDo33)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9961$gDo33
                                                                                                                                  g$y$9962$gDo33)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9939$gDo33
                                                                                                                                       g$maps$9961$gDo33)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9965$gDo33
                                                                                                                                       g$maps$9966$gDo33)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9967$gDo33
                                                                                                                                           g$x$9968$gDo33)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9841$gDo33
                                                                                                                                             g$x$9968$gDo33
                                                                                                                                             g$y$9962$gDo33)
                                                                                                                                           g$maps$9967$gDo33)))
                                                                                                                                      g$maps$9966$gDo33
                                                                                                                                      g$x$9965$gDo33))))))
                                                                                                                             g$maps$9960$gDo33
                                                                                                                             g$y$9959$gDo33))))))
                                                                                                                    g$ls/false$9956$gDo33)
                                                                                                                  (g$syntax-violation$8109$gDo33
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9955$gDo33))))
                                                                                                             (g$syntax-dispatch$7997$gDo33
                                                                                                               g$t$9955$gDo33
                                                                                                               '_))))
                                                                                                         g$t$9942$gDo33))))
                                                                                                   (g$syntax-dispatch$7997$gDo33
                                                                                                     g$t$9942$gDo33
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9940$gDo33))))
                                                                                         (g$syntax-dispatch$7997$gDo33
                                                                                           g$t$9940$gDo33
                                                                                           '()))))
                                                                                     g$y$9938$gDo33)))))
                                                                        g$f$9937$gDo33)
                                                                      g$y$9936$gDo33
                                                                      (case-lambda
                                                                        ((g$maps$9969$gDo33)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9839$gDo33
                                                                                g$src$9899$gDo33
                                                                                g$x$9934$gDo33
                                                                                g$r$9901$gDo33
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9969$gDo33)
                                                                                g$ellipsis?$9903$gDo33
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9972$gDo33
                                                                                g$maps$9973$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$maps$9974$gDo33
                                                                                    g$x$9975$gDo33)
                                                                                  (if (null?
                                                                                        (car g$maps$9974$gDo33))
                                                                                    (g$syntax-violation$8109$gDo33
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9899$gDo33)
                                                                                    (values
                                                                                      (g$gen-map$9843$gDo33
                                                                                        g$x$9975$gDo33
                                                                                        (car g$maps$9974$gDo33))
                                                                                      (cdr g$maps$9974$gDo33)))))
                                                                               g$maps$9973$gDo33
                                                                               g$x$9972$gDo33)))))))))
                                                                  g$ls/false$9930$gDo33)
                                                                ((case-lambda
                                                                   ((g$t$9976$gDo33)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9977$gDo33)
                                                                        (if g$ls/false$9977$gDo33
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9978$gDo33
                                                                                 g$y$9979$gDo33)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9839$gDo33
                                                                                      g$src$9899$gDo33
                                                                                      g$x$9978$gDo33
                                                                                      g$r$9901$gDo33
                                                                                      g$maps$9902$gDo33
                                                                                      g$ellipsis?$9903$gDo33
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9982$gDo33
                                                                                      g$maps$9983$gDo33)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9984$gDo33
                                                                                          g$xnew$9985$gDo33)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9839$gDo33
                                                                                               g$src$9899$gDo33
                                                                                               g$y$9979$gDo33
                                                                                               g$r$9901$gDo33
                                                                                               g$maps$9984$gDo33
                                                                                               g$ellipsis?$9903$gDo33
                                                                                               g$vec?$9904$gDo33)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9988$gDo33
                                                                                               g$maps$9989$gDo33)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9990$gDo33
                                                                                                   g$ynew$9991$gDo33)
                                                                                                 (values
                                                                                                   (g$gen-cons$9844$gDo33
                                                                                                     g$e$9900$gDo33
                                                                                                     g$x$9978$gDo33
                                                                                                     g$y$9979$gDo33
                                                                                                     g$xnew$9985$gDo33
                                                                                                     g$ynew$9991$gDo33)
                                                                                                   g$maps$9990$gDo33)))
                                                                                              g$maps$9989$gDo33
                                                                                              g$ynew$9988$gDo33))))))
                                                                                     g$maps$9983$gDo33
                                                                                     g$xnew$9982$gDo33))))))
                                                                            g$ls/false$9977$gDo33)
                                                                          ((case-lambda
                                                                             ((g$t$9992$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9993$gDo33)
                                                                                  (if g$ls/false$9993$gDo33
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9994$gDo33)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9839$gDo33
                                                                                                g$src$9899$gDo33
                                                                                                g$ls$9994$gDo33
                                                                                                g$r$9901$gDo33
                                                                                                g$maps$9902$gDo33
                                                                                                g$ellipsis?$9903$gDo33
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9997$gDo33
                                                                                                g$maps$9998$gDo33)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9999$gDo33
                                                                                                    g$lsnew$10000$gDo33)
                                                                                                  (values
                                                                                                    (g$gen-vector$9845$gDo33
                                                                                                      g$e$9900$gDo33
                                                                                                      g$ls$9994$gDo33
                                                                                                      g$lsnew$10000$gDo33)
                                                                                                    g$maps$9999$gDo33)))
                                                                                               g$maps$9998$gDo33
                                                                                               g$lsnew$9997$gDo33))))))
                                                                                      g$ls/false$9993$gDo33)
                                                                                    ((case-lambda
                                                                                       ((g$t$10001$gDo33)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10002$gDo33)
                                                                                            (if g$ls/false$10002$gDo33
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9900$gDo33)
                                                                                                     g$maps$9902$gDo33)))
                                                                                                g$ls/false$10002$gDo33)
                                                                                              (g$syntax-violation$8109$gDo33
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$10001$gDo33))))
                                                                                         (g$syntax-dispatch$7997$gDo33
                                                                                           g$t$10001$gDo33
                                                                                           '_))))
                                                                                     g$t$9992$gDo33))))
                                                                               (g$syntax-dispatch$7997$gDo33
                                                                                 g$t$9992$gDo33
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9976$gDo33))))
                                                                     (g$syntax-dispatch$7997$gDo33
                                                                       g$t$9976$gDo33
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9929$gDo33))))
                                                           (g$syntax-dispatch$7997$gDo33
                                                             g$t$9929$gDo33
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9922$gDo33))))
                                                 (g$syntax-dispatch$7997$gDo33
                                                   g$t$9922$gDo33
                                                   '(any any)))))
                                             g$t$9909$gDo33))))
                                       (g$syntax-dispatch$7997$gDo33
                                         g$t$9909$gDo33
                                         'any))))
                                   g$t$9905$gDo33))))
                             (g$syntax-dispatch$7997$gDo33
                               g$t$9905$gDo33
                               'any))))
                         g$e$9900$gDo33))))
                   (g$gen-ref$9840$gDo33
                     (case-lambda
                       ((g$src$9886$gDo33
                          g$var$9887$gDo33
                          g$level$9888$gDo33
                          g$maps$9889$gDo33)
                        (if (= g$level$9888$gDo33 '0)
                          (values g$var$9887$gDo33 g$maps$9889$gDo33)
                          (if (null? g$maps$9889$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9886$gDo33)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9840$gDo33
                                   g$src$9886$gDo33
                                   g$var$9887$gDo33
                                   (- g$level$9888$gDo33 '1)
                                   (cdr g$maps$9889$gDo33))))
                              (case-lambda
                                ((g$outer-var$9892$gDo33
                                   g$outer-maps$9893$gDo33)
                                 ((case-lambda
                                    ((g$outer-maps$9894$gDo33
                                       g$outer-var$9895$gDo33)
                                     ((case-lambda
                                        ((g$t$9896$gDo33)
                                         (if g$t$9896$gDo33
                                           ((case-lambda
                                              ((g$b$9897$gDo33)
                                               (values
                                                 (cdr g$b$9897$gDo33)
                                                 g$maps$9889$gDo33)))
                                            g$t$9896$gDo33)
                                           ((case-lambda
                                              ((g$inner-var$9898$gDo33)
                                               (values
                                                 g$inner-var$9898$gDo33
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9895$gDo33
                                                       g$inner-var$9898$gDo33)
                                                     (car g$maps$9889$gDo33))
                                                   g$outer-maps$9894$gDo33))))
                                            (g$gen-lexical$7658$gDo33 'tmp)))))
                                      (g$assq$5051$gDo33
                                        g$outer-var$9895$gDo33
                                        (car g$maps$9889$gDo33)))))
                                  g$outer-maps$9893$gDo33
                                  g$outer-var$9892$gDo33)))))))))
                   (g$gen-append$9841$gDo33
                     (case-lambda
                       ((g$x$9884$gDo33 g$y$9885$gDo33)
                        (if (equal? g$y$9885$gDo33 ''())
                          g$x$9884$gDo33
                          (list 'append g$x$9884$gDo33 g$y$9885$gDo33)))))
                   (g$gen-mappend$9842$gDo33
                     (case-lambda
                       ((g$e$9882$gDo33 g$map-env$9883$gDo33)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9843$gDo33
                            g$e$9882$gDo33
                            g$map-env$9883$gDo33)))))
                   (g$gen-map$9843$gDo33
                     (case-lambda
                       ((g$e$9873$gDo33 g$map-env$9874$gDo33)
                        ((case-lambda
                           ((g$formals$9875$gDo33 g$actuals$9876$gDo33)
                            (if (eq? (car g$e$9873$gDo33) 'ref)
                              (car g$actuals$9876$gDo33)
                              (if (g$for-all$5061$gDo33
                                    (case-lambda
                                      ((g$x$9877$gDo33)
                                       (if (eq? (car g$x$9877$gDo33) 'ref)
                                         (begin
                                           '#f
                                           (g$memq$5055$gDo33
                                             (g$cadr$5264$gDo33 g$x$9877$gDo33)
                                             g$formals$9875$gDo33))
                                         '#f)))
                                    (cdr g$e$9873$gDo33))
                                ((case-lambda
                                   ((g$args$9878$gDo33)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9873$gDo33))
                                        g$args$9878$gDo33))))
                                 (g$map$5063$gDo33
                                   ((case-lambda
                                      ((g$r$9879$gDo33)
                                       (case-lambda
                                         ((g$x$9880$gDo33)
                                          (cdr (g$assq$5051$gDo33
                                                 (g$cadr$5264$gDo33
                                                   g$x$9880$gDo33)
                                                 g$r$9879$gDo33))))))
                                    (g$map$5063$gDo33
                                      cons
                                      g$formals$9875$gDo33
                                      g$actuals$9876$gDo33))
                                   (cdr g$e$9873$gDo33)))
                                (g$cons*$5065$gDo33
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9875$gDo33
                                    g$e$9873$gDo33)
                                  g$actuals$9876$gDo33)))))
                         (g$map$5063$gDo33 cdr g$map-env$9874$gDo33)
                         (g$map$5063$gDo33
                           (case-lambda
                             ((g$x$9881$gDo33)
                              (list 'ref (car g$x$9881$gDo33))))
                           g$map-env$9874$gDo33)))))
                   (g$gen-cons$9844$gDo33
                     (case-lambda
                       ((g$e$9865$gDo33
                          g$x$9866$gDo33
                          g$y$9867$gDo33
                          g$xnew$9868$gDo33
                          g$ynew$9869$gDo33)
                        ((case-lambda
                           ((g$t$9870$gDo33)
                            (if (g$memv$5056$gDo33 g$t$9870$gDo33 '(quote))
                              (if (eq? (car g$xnew$9868$gDo33) 'quote)
                                ((case-lambda
                                   ((g$xnew$9871$gDo33 g$ynew$9872$gDo33)
                                    (if (if (eq? g$xnew$9871$gDo33
                                                 g$x$9866$gDo33)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9872$gDo33
                                                 g$y$9867$gDo33))
                                          '#f)
                                      (list 'quote g$e$9865$gDo33)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9871$gDo33
                                          g$ynew$9872$gDo33)))))
                                 (g$cadr$5264$gDo33 g$xnew$9868$gDo33)
                                 (g$cadr$5264$gDo33 g$ynew$9869$gDo33))
                                (if (null?
                                      (g$cadr$5264$gDo33 g$ynew$9869$gDo33))
                                  (list 'list g$xnew$9868$gDo33)
                                  (list
                                    'cons
                                    g$xnew$9868$gDo33
                                    g$ynew$9869$gDo33)))
                              (if (g$memv$5056$gDo33 g$t$9870$gDo33 '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9868$gDo33
                                    (cdr g$ynew$9869$gDo33)))
                                (list
                                  'cons
                                  g$xnew$9868$gDo33
                                  g$ynew$9869$gDo33)))))
                         (car g$ynew$9869$gDo33)))))
                   (g$gen-vector$9845$gDo33
                     (case-lambda
                       ((g$e$9862$gDo33 g$ls$9863$gDo33 g$lsnew$9864$gDo33)
                        (if (eq? (car g$lsnew$9864$gDo33) 'quote)
                          (if (eq? (g$cadr$5264$gDo33 g$lsnew$9864$gDo33)
                                   g$ls$9863$gDo33)
                            (list 'quote g$e$9862$gDo33)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$5264$gDo33 g$lsnew$9864$gDo33))))
                          (if (eq? (car g$lsnew$9864$gDo33) 'list)
                            (cons 'vector (cdr g$lsnew$9864$gDo33))
                            (list 'list->vector g$lsnew$9864$gDo33))))))
                   (g$regen$9846$gDo33
                     (case-lambda
                       ((g$x$9859$gDo33)
                        ((case-lambda
                           ((g$t$9860$gDo33)
                            (if (g$memv$5056$gDo33 g$t$9860$gDo33 '(ref))
                              (g$cadr$5264$gDo33 g$x$9859$gDo33)
                              (if (g$memv$5056$gDo33
                                    g$t$9860$gDo33
                                    '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$5264$gDo33 g$x$9859$gDo33))
                                (if (g$memv$5056$gDo33 g$t$9860$gDo33 '(quote))
                                  (list
                                    'quote
                                    (g$cadr$5264$gDo33 g$x$9859$gDo33))
                                  (if (g$memv$5056$gDo33
                                        g$t$9860$gDo33
                                        '(lambda))
                                    (g$build-lambda$7645$gDo33
                                      '#f
                                      (g$cadr$5264$gDo33 g$x$9859$gDo33)
                                      (g$regen$9846$gDo33
                                        (g$caddr$5270$gDo33 g$x$9859$gDo33)))
                                    (if (g$memv$5056$gDo33
                                          g$t$9860$gDo33
                                          '(map))
                                      ((case-lambda
                                         ((g$ls$9861$gDo33)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9861$gDo33)))
                                       (g$map$5063$gDo33
                                         g$regen$9846$gDo33
                                         (cdr g$x$9859$gDo33)))
                                      (cons
                                        (list 'primitive (car g$x$9859$gDo33))
                                        (g$map$5063$gDo33
                                          g$regen$9846$gDo33
                                          (cdr g$x$9859$gDo33))))))))))
                         (car g$x$9859$gDo33))))))
           (case-lambda
             ((g$e$9847$gDo33 g$r$9848$gDo33 g$mr$9849$gDo33)
              ((case-lambda
                 ((g$t$9850$gDo33)
                  ((case-lambda
                     ((g$ls/false$9851$gDo33)
                      (if g$ls/false$9851$gDo33
                        (apply
                          (case-lambda
                            ((g$x$9852$gDo33)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9839$gDo33
                                    g$e$9847$gDo33
                                    g$x$9852$gDo33
                                    g$r$9848$gDo33
                                    '()
                                    g$ellipsis?$7998$gDo33
                                    '#f)))
                               (case-lambda
                                 ((g$e$9855$gDo33 g$maps$9856$gDo33)
                                  ((case-lambda
                                     ((g$maps$9857$gDo33 g$e$9858$gDo33)
                                      (g$regen$9846$gDo33 g$e$9858$gDo33)))
                                   g$maps$9856$gDo33
                                   g$e$9855$gDo33))))))
                          g$ls/false$9851$gDo33)
                        (g$syntax-violation$8109$gDo33
                          '#f
                          '"invalid syntax"
                          g$t$9850$gDo33))))
                   (g$syntax-dispatch$7997$gDo33 g$t$9850$gDo33 '(_ any)))))
               g$e$9847$gDo33))))))))
   (g$core-macro-transformer$8004$gDo33
     g$core-macro-transformer$11507$gDo33
     (case-lambda
       ((g$name$10003$gDo33)
        ((case-lambda
           ((g$t$10004$gDo33)
            (if (g$memv$5056$gDo33 g$t$10004$gDo33 '(quote))
              g$quote-transformer$7957$gDo33
              (if (g$memv$5056$gDo33 g$t$10004$gDo33 '(lambda))
                g$lambda-transformer$7959$gDo33
                (if (g$memv$5056$gDo33 g$t$10004$gDo33 '(case-lambda))
                  g$case-lambda-transformer$7958$gDo33
                  (if (g$memv$5056$gDo33 g$t$10004$gDo33 '(letrec))
                    g$letrec-transformer$7947$gDo33
                    (if (g$memv$5056$gDo33 g$t$10004$gDo33 '(letrec*))
                      g$letrec*-transformer$7948$gDo33
                      (if (g$memv$5056$gDo33 g$t$10004$gDo33 '(if))
                        g$if-transformer$7955$gDo33
                        (if (g$memv$5056$gDo33 g$t$10004$gDo33 '(foreign-call))
                          g$foreign-call-transformer$7995$gDo33
                          (if (g$memv$5056$gDo33 g$t$10004$gDo33 '(syntax-case))
                            g$syntax-case-transformer$8001$gDo33
                            (if (g$memv$5056$gDo33 g$t$10004$gDo33 '(syntax))
                              g$syntax-transformer$8003$gDo33
                              (if (g$memv$5056$gDo33
                                    g$t$10004$gDo33
                                    '(type-descriptor))
                                g$type-descriptor-transformer$7950$gDo33
                                (if (g$memv$5056$gDo33
                                      g$t$10004$gDo33
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7951$gDo33
                                  (if (g$memv$5056$gDo33
                                        g$t$10004$gDo33
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7952$gDo33
                                    (if (g$memv$5056$gDo33
                                          g$t$10004$gDo33
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7949$gDo33
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$10003$gDo33))))))))))))))))
         g$name$10003$gDo33))))
   (g$file-options-macro$8005$gDo33
     g$file-options-macro$11508$gDo33
     (case-lambda
       ((g$x$10005$gDo33)
        (letrec* ((g$valid-option?$10006$gDo33
                    (case-lambda
                      ((g$x$10011$gDo33)
                       (if (g$id?$7719$gDo33 g$x$10011$gDo33)
                         (begin
                           '#f
                           (g$memq$5055$gDo33
                             (g$id->sym$7720$gDo33 g$x$10011$gDo33)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$10007$gDo33)
              ((case-lambda
                 ((g$ls/false$10008$gDo33)
                  (if (if g$ls/false$10008$gDo33
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$10009$gDo33)
                               (if (g$for-all$5061$gDo33
                                     g$valid-option?$10006$gDo33
                                     g$opt*$10009$gDo33)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6993$gDo33
                                     (g$map$5063$gDo33
                                       g$id->sym$7720$gDo33
                                       g$opt*$10009$gDo33)))
                                 '#f)))
                            g$ls/false$10008$gDo33))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$10010$gDo33)
                         (g$bless$7960$gDo33
                           (list
                             'quote
                             (g$file-options-spec$6993$gDo33
                               (g$map$5063$gDo33
                                 g$id->sym$7720$gDo33
                                 g$opt*$10010$gDo33))))))
                      g$ls/false$10008$gDo33)
                    (g$syntax-violation$8109$gDo33
                      '#f
                      '"invalid syntax"
                      g$t$10007$gDo33))))
               (g$syntax-dispatch$7997$gDo33 g$t$10007$gDo33 '(_ . each-any)))))
           g$x$10005$gDo33)))))
   (g$symbol-macro$8006$gDo33
     g$symbol-macro$11509$gDo33
     (case-lambda
       ((g$x$10012$gDo33 g$set$10013$gDo33)
        ((case-lambda
           ((g$t$10014$gDo33)
            ((case-lambda
               ((g$ls/false$10015$gDo33)
                (if (if g$ls/false$10015$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$10016$gDo33)
                             (if (g$id?$7719$gDo33 g$name$10016$gDo33)
                               (begin
                                 '#f
                                 (g$memq$5055$gDo33
                                   (g$id->sym$7720$gDo33 g$name$10016$gDo33)
                                   g$set$10013$gDo33))
                               '#f)))
                          g$ls/false$10015$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$10017$gDo33)
                       (g$bless$7960$gDo33 (list 'quote g$name$10017$gDo33))))
                    g$ls/false$10015$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$10014$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$10014$gDo33 '(_ any)))))
         g$x$10012$gDo33))))
   (g$macro-transformer$8007$gDo33
     g$macro-transformer$11510$gDo33
     (case-lambda
       ((g$x$10018$gDo33)
        (if (procedure? g$x$10018$gDo33)
          g$x$10018$gDo33
          (if (symbol? g$x$10018$gDo33)
            ((case-lambda
               ((g$t$10019$gDo33)
                (if (g$memv$5056$gDo33 g$t$10019$gDo33 '(define-record-type))
                  g$define-record-type-macro$7991$gDo33
                  (if (g$memv$5056$gDo33 g$t$10019$gDo33 '(define-struct))
                    g$define-struct-macro$7990$gDo33
                    (if (g$memv$5056$gDo33 g$t$10019$gDo33 '(include))
                      g$include-macro$7985$gDo33
                      (if (g$memv$5056$gDo33 g$t$10019$gDo33 '(cond))
                        g$cond-macro$7983$gDo33
                        (if (g$memv$5056$gDo33 g$t$10019$gDo33 '(let))
                          g$let-macro$7963$gDo33
                          (if (g$memv$5056$gDo33 g$t$10019$gDo33 '(do))
                            g$do-macro$7979$gDo33
                            (if (g$memv$5056$gDo33 g$t$10019$gDo33 '(or))
                              g$or-macro$7981$gDo33
                              (if (g$memv$5056$gDo33 g$t$10019$gDo33 '(and))
                                g$and-macro$7982$gDo33
                                (if (g$memv$5056$gDo33 g$t$10019$gDo33 '(let*))
                                  g$let*-macro$7980$gDo33
                                  (if (g$memv$5056$gDo33
                                        g$t$10019$gDo33
                                        '(let-values))
                                    g$let-values-macro$7964$gDo33
                                    (if (g$memv$5056$gDo33
                                          g$t$10019$gDo33
                                          '(let*-values))
                                      g$let*-values-macro$7965$gDo33
                                      (if (g$memv$5056$gDo33
                                            g$t$10019$gDo33
                                            '(syntax-rules))
                                        g$syntax-rules-macro$7987$gDo33
                                        (if (g$memv$5056$gDo33
                                              g$t$10019$gDo33
                                              '(quasiquote))
                                          g$quasiquote-macro$7988$gDo33
                                          (if (g$memv$5056$gDo33
                                                g$t$10019$gDo33
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7989$gDo33
                                            (if (g$memv$5056$gDo33
                                                  g$t$10019$gDo33
                                                  '(with-syntax))
                                              g$with-syntax-macro$7961$gDo33
                                              (if (g$memv$5056$gDo33
                                                    g$t$10019$gDo33
                                                    '(when))
                                                g$when-macro$7953$gDo33
                                                (if (g$memv$5056$gDo33
                                                      g$t$10019$gDo33
                                                      '(unless))
                                                  g$unless-macro$7954$gDo33
                                                  (if (g$memv$5056$gDo33
                                                        g$t$10019$gDo33
                                                        '(case))
                                                    g$case-macro$7956$gDo33
                                                    (if (g$memv$5056$gDo33
                                                          g$t$10019$gDo33
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7978$gDo33
                                                      (if (g$memv$5056$gDo33
                                                            g$t$10019$gDo33
                                                            '(time))
                                                        g$time-macro$7974$gDo33
                                                        (if (g$memv$5056$gDo33
                                                              g$t$10019$gDo33
                                                              '(delay))
                                                          g$delay-macro$7975$gDo33
                                                          (if (g$memv$5056$gDo33
                                                                g$t$10019$gDo33
                                                                '(assert))
                                                            g$assert-macro$7976$gDo33
                                                            (if (g$memv$5056$gDo33
                                                                  g$t$10019$gDo33
                                                                  '(endianness))
                                                              g$endianness-macro$7977$gDo33
                                                              (if (g$memv$5056$gDo33
                                                                    g$t$10019$gDo33
                                                                    '(guard))
                                                                g$guard-macro$7972$gDo33
                                                                (if (g$memv$5056$gDo33
                                                                      g$t$10019$gDo33
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7973$gDo33
                                                                  (if (g$memv$5056$gDo33
                                                                        g$t$10019$gDo33
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7966$gDo33
                                                                    (if (g$memv$5056$gDo33
                                                                          g$t$10019$gDo33
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7967$gDo33
                                                                      (if (g$memv$5056$gDo33
                                                                            g$t$10019$gDo33
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7968$gDo33
                                                                        (if (g$memv$5056$gDo33
                                                                              g$t$10019$gDo33
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7970$gDo33
                                                                          (if (g$memv$5056$gDo33
                                                                                g$t$10019$gDo33
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7971$gDo33
                                                                            (if (g$memv$5056$gDo33
                                                                                  g$t$10019$gDo33
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7992$gDo33
                                                                              (if (g$memv$5056$gDo33
                                                                                    g$t$10019$gDo33
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7994$gDo33
                                                                                (if (g$memv$5056$gDo33
                                                                                      g$t$10019$gDo33
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7986$gDo33
                                                                                  (if (g$memv$5056$gDo33
                                                                                        g$t$10019$gDo33
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$10020$gDo33)
                                                                                       (g$symbol-macro$8006$gDo33
                                                                                         g$x$10020$gDo33
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (g$memv$5056$gDo33
                                                                                          g$t$10019$gDo33
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$10021$gDo33)
                                                                                         (g$symbol-macro$8006$gDo33
                                                                                           g$x$10021$gDo33
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (g$memv$5056$gDo33
                                                                                            g$t$10019$gDo33
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$10022$gDo33)
                                                                                           (g$symbol-macro$8006$gDo33
                                                                                             g$x$10022$gDo33
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (g$memv$5056$gDo33
                                                                                              g$t$10019$gDo33
                                                                                              '(file-options))
                                                                                          g$file-options-macro$8005$gDo33
                                                                                          (if (g$memv$5056$gDo33
                                                                                                g$t$10019$gDo33
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7993$gDo33
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$10018$gDo33)))))))))))))))))))))))))))))))))))))))))
             g$x$10018$gDo33)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$10018$gDo33))))))
   (g$local-macro-transformer$8008$gDo33
     g$local-macro-transformer$11511$gDo33
     (case-lambda ((g$x$10023$gDo33) (car g$x$10023$gDo33))))
   (g$do-macro-call$8009$gDo33
     g$do-macro-call$11512$gDo33
     (case-lambda
       ((g$transformer$10024$gDo33 g$expr$10025$gDo33)
        ((case-lambda
           ((g$out$10026$gDo33)
            (begin
              ((letrec ((g$f$10027$gDo33
                          (case-lambda
                            ((g$x$10028$gDo33)
                             (if (not (g$stx?$7691$gDo33 g$x$10028$gDo33))
                               (if (pair? g$x$10028$gDo33)
                                 (begin
                                   (g$f$10027$gDo33 (car g$x$10028$gDo33))
                                   (g$f$10027$gDo33 (cdr g$x$10028$gDo33)))
                                 (if (vector? g$x$10028$gDo33)
                                   (vector-for-each
                                     g$f$10027$gDo33
                                     g$x$10028$gDo33)
                                   (if (symbol? g$x$10028$gDo33)
                                     (g$syntax-violation$8109$gDo33
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$10025$gDo33
                                       g$x$10028$gDo33)
                                     (void))))
                               (void))))))
                 g$f$10027$gDo33)
               g$out$10026$gDo33)
              (g$add-mark$7708$gDo33
                (g$gen-mark$7703$gDo33)
                g$out$10026$gDo33
                g$expr$10025$gDo33))))
         (g$transformer$10024$gDo33
           (g$add-mark$7708$gDo33
             g$anti-mark$7704$gDo33
             g$expr$10025$gDo33
             '#f))))))
   (g$chi-macro$8010$gDo33
     g$chi-macro$11513$gDo33
     (case-lambda
       ((g$p$10029$gDo33 g$e$10030$gDo33)
        (g$do-macro-call$8009$gDo33
          (g$macro-transformer$8007$gDo33 g$p$10029$gDo33)
          g$e$10030$gDo33))))
   (g$chi-local-macro$8011$gDo33
     g$chi-local-macro$11514$gDo33
     (case-lambda
       ((g$p$10031$gDo33 g$e$10032$gDo33)
        (g$do-macro-call$8009$gDo33
          (g$local-macro-transformer$8008$gDo33 g$p$10031$gDo33)
          g$e$10032$gDo33))))
   (g$chi-global-macro$8012$gDo33
     g$chi-global-macro$11515$gDo33
     (case-lambda
       ((g$p$10033$gDo33 g$e$10034$gDo33)
        ((case-lambda
           ((g$lib$10035$gDo33 g$loc$10036$gDo33)
            (begin
              (g$visit-library$7530$gDo33 g$lib$10035$gDo33)
              ((case-lambda
                 ((g$x$10037$gDo33)
                  ((case-lambda
                     ((g$transformer$10038$gDo33)
                      (g$do-macro-call$8009$gDo33
                        g$transformer$10038$gDo33
                        g$e$10034$gDo33)))
                   (if (procedure? g$x$10037$gDo33)
                     g$x$10037$gDo33
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$10037$gDo33)))))
               (symbol-value g$loc$10036$gDo33)))))
         (car g$p$10033$gDo33)
         (cdr g$p$10033$gDo33)))))
   (g$chi-expr*$8013$gDo33
     g$chi-expr*$11516$gDo33
     (case-lambda
       ((g$e*$10039$gDo33 g$r$10040$gDo33 g$mr$10041$gDo33)
        (if (null? g$e*$10039$gDo33)
          '()
          ((case-lambda
             ((g$e$10042$gDo33)
              (cons
                g$e$10042$gDo33
                (g$chi-expr*$8013$gDo33
                  (cdr g$e*$10039$gDo33)
                  g$r$10040$gDo33
                  g$mr$10041$gDo33))))
           (g$chi-expr$8015$gDo33
             (car g$e*$10039$gDo33)
             g$r$10040$gDo33
             g$mr$10041$gDo33))))))
   (g$chi-application$8014$gDo33
     g$chi-application$11517$gDo33
     (case-lambda
       ((g$e$10043$gDo33 g$r$10044$gDo33 g$mr$10045$gDo33)
        ((case-lambda
           ((g$t$10046$gDo33)
            ((case-lambda
               ((g$ls/false$10047$gDo33)
                (if g$ls/false$10047$gDo33
                  (apply
                    (case-lambda
                      ((g$rator$10048$gDo33 g$rands$10049$gDo33)
                       ((case-lambda
                          ((g$rator$10050$gDo33)
                           (cons
                             g$rator$10050$gDo33
                             (g$chi-expr*$8013$gDo33
                               g$rands$10049$gDo33
                               g$r$10044$gDo33
                               g$mr$10045$gDo33))))
                        (g$chi-expr$8015$gDo33
                          g$rator$10048$gDo33
                          g$r$10044$gDo33
                          g$mr$10045$gDo33))))
                    g$ls/false$10047$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$10046$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$10046$gDo33 '(any . each-any)))))
         g$e$10043$gDo33))))
   (g$chi-expr$8015$gDo33
     g$chi-expr$11518$gDo33
     (case-lambda
       ((g$e$10051$gDo33 g$r$10052$gDo33 g$mr$10053$gDo33)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7739$gDo33 g$e$10051$gDo33 g$r$10052$gDo33)))
          (case-lambda
            ((g$type$10057$gDo33 g$value$10058$gDo33 g$kwd$10059$gDo33)
             ((case-lambda
                ((g$kwd$10060$gDo33 g$value$10061$gDo33 g$type$10062$gDo33)
                 ((case-lambda
                    ((g$t$10063$gDo33)
                     (if (g$memv$5056$gDo33 g$t$10063$gDo33 '(core-macro))
                       ((case-lambda
                          ((g$transformer$10064$gDo33)
                           (g$transformer$10064$gDo33
                             g$e$10051$gDo33
                             g$r$10052$gDo33
                             g$mr$10053$gDo33)))
                        (g$core-macro-transformer$8004$gDo33
                          g$value$10061$gDo33))
                       (if (g$memv$5056$gDo33 g$t$10063$gDo33 '(global))
                         ((case-lambda
                            ((g$lib$10065$gDo33)
                             ((case-lambda
                                ((g$loc$10066$gDo33)
                                 (begin
                                   ((g$inv-collector$8049$gDo33)
                                    g$lib$10065$gDo33)
                                   g$loc$10066$gDo33)))
                              (cdr g$value$10061$gDo33))))
                          (car g$value$10061$gDo33))
                         (if (g$memv$5056$gDo33 g$t$10063$gDo33 '(core-prim))
                           ((case-lambda
                              ((g$name$10067$gDo33)
                               (list 'primitive g$name$10067$gDo33)))
                            g$value$10061$gDo33)
                           (if (g$memv$5056$gDo33 g$t$10063$gDo33 '(call))
                             (g$chi-application$8014$gDo33
                               g$e$10051$gDo33
                               g$r$10052$gDo33
                               g$mr$10053$gDo33)
                             (if (g$memv$5056$gDo33 g$t$10063$gDo33 '(lexical))
                               ((case-lambda
                                  ((g$lex$10068$gDo33) g$lex$10068$gDo33))
                                (g$lexical-var$7941$gDo33 g$value$10061$gDo33))
                               (if (g$memv$5056$gDo33
                                     g$t$10063$gDo33
                                     '(global-macro global-macro!))
                                 (g$chi-expr$8015$gDo33
                                   (g$chi-global-macro$8012$gDo33
                                     g$value$10061$gDo33
                                     g$e$10051$gDo33)
                                   g$r$10052$gDo33
                                   g$mr$10053$gDo33)
                                 (if (g$memv$5056$gDo33
                                       g$t$10063$gDo33
                                       '(local-macro local-macro!))
                                   (g$chi-expr$8015$gDo33
                                     (g$chi-local-macro$8011$gDo33
                                       g$value$10061$gDo33
                                       g$e$10051$gDo33)
                                     g$r$10052$gDo33
                                     g$mr$10053$gDo33)
                                   (if (g$memv$5056$gDo33
                                         g$t$10063$gDo33
                                         '(macro macro!))
                                     (g$chi-expr$8015$gDo33
                                       (g$chi-macro$8010$gDo33
                                         g$value$10061$gDo33
                                         g$e$10051$gDo33)
                                       g$r$10052$gDo33
                                       g$mr$10053$gDo33)
                                     (if (g$memv$5056$gDo33
                                           g$t$10063$gDo33
                                           '(constant))
                                       ((case-lambda
                                          ((g$datum$10069$gDo33)
                                           (list 'quote g$datum$10069$gDo33)))
                                        g$value$10061$gDo33)
                                       (if (g$memv$5056$gDo33
                                             g$t$10063$gDo33
                                             '(set!))
                                         (g$chi-set!$8016$gDo33
                                           g$e$10051$gDo33
                                           g$r$10052$gDo33
                                           g$mr$10053$gDo33)
                                         (if (g$memv$5056$gDo33
                                               g$t$10063$gDo33
                                               '(begin))
                                           ((case-lambda
                                              ((g$t$10070$gDo33)
                                               ((case-lambda
                                                  ((g$ls/false$10071$gDo33)
                                                   (if g$ls/false$10071$gDo33
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$10072$gDo33
                                                            g$x*$10073$gDo33)
                                                          (g$build-sequence$7648$gDo33
                                                            '#f
                                                            (g$chi-expr*$8013$gDo33
                                                              (cons
                                                                g$x$10072$gDo33
                                                                g$x*$10073$gDo33)
                                                              g$r$10052$gDo33
                                                              g$mr$10053$gDo33))))
                                                       g$ls/false$10071$gDo33)
                                                     (g$syntax-violation$8109$gDo33
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$10070$gDo33))))
                                                (g$syntax-dispatch$7997$gDo33
                                                  g$t$10070$gDo33
                                                  '(_ any . each-any)))))
                                            g$e$10051$gDo33)
                                           (if (g$memv$5056$gDo33
                                                 g$t$10063$gDo33
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$10074$gDo33)
                                                 ((case-lambda
                                                    ((g$ls/false$10075$gDo33)
                                                     (if (if g$ls/false$10075$gDo33
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$10076$gDo33
                                                                    g$xrhs*$10077$gDo33
                                                                    g$xbody$10078$gDo33
                                                                    g$xbody*$10079$gDo33)
                                                                  (if (not (g$valid-bound-ids?$7724$gDo33
                                                                             g$xlhs*$10076$gDo33))
                                                                    (g$syntax-violation$8109$gDo33
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$10051$gDo33)
                                                                    (void))))
                                                               g$ls/false$10075$gDo33))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$10080$gDo33
                                                              g$xrhs*$10081$gDo33
                                                              g$xbody$10082$gDo33
                                                              g$xbody*$10083$gDo33)
                                                            ((case-lambda
                                                               ((g$xlab*$10084$gDo33)
                                                                ((case-lambda
                                                                   ((g$xrib$10085$gDo33)
                                                                    ((case-lambda
                                                                       ((g$xb*$10086$gDo33)
                                                                        (g$build-sequence$7648$gDo33
                                                                          '#f
                                                                          (g$chi-expr*$8013$gDo33
                                                                            (g$map$5063$gDo33
                                                                              (case-lambda
                                                                                ((g$x$10087$gDo33)
                                                                                 (g$add-subst$7709$gDo33
                                                                                   g$xrib$10085$gDo33
                                                                                   g$x$10087$gDo33)))
                                                                              (cons
                                                                                g$xbody$10082$gDo33
                                                                                g$xbody*$10083$gDo33))
                                                                            (append
                                                                              (g$map$5063$gDo33
                                                                                cons
                                                                                g$xlab*$10084$gDo33
                                                                                g$xb*$10086$gDo33)
                                                                              g$r$10052$gDo33)
                                                                            (append
                                                                              (g$map$5063$gDo33
                                                                                cons
                                                                                g$xlab*$10084$gDo33
                                                                                g$xb*$10086$gDo33)
                                                                              g$mr$10053$gDo33)))))
                                                                     (g$map$5063$gDo33
                                                                       (case-lambda
                                                                         ((g$x$10088$gDo33)
                                                                          (g$make-eval-transformer$7751$gDo33
                                                                            (g$expand-transformer$8042$gDo33
                                                                              (if (eq? g$type$10062$gDo33
                                                                                       'let-syntax)
                                                                                g$x$10088$gDo33
                                                                                (g$add-subst$7709$gDo33
                                                                                  g$xrib$10085$gDo33
                                                                                  g$x$10088$gDo33))
                                                                              g$mr$10053$gDo33))))
                                                                       g$xrhs*$10081$gDo33))))
                                                                 (g$make-full-rib$7687$gDo33
                                                                   g$xlhs*$10080$gDo33
                                                                   g$xlab*$10084$gDo33))))
                                                             (g$map$5063$gDo33
                                                               g$gen-label$7660$gDo33
                                                               g$xlhs*$10080$gDo33))))
                                                         g$ls/false$10075$gDo33)
                                                       (g$syntax-violation$8109$gDo33
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$10074$gDo33))))
                                                  (g$syntax-dispatch$7997$gDo33
                                                    g$t$10074$gDo33
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$10051$gDo33)
                                             (if (g$memv$5056$gDo33
                                                   g$t$10063$gDo33
                                                   '(displaced-lexical))
                                               (g$syntax-violation$8109$gDo33
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$10051$gDo33)
                                               (if (g$memv$5056$gDo33
                                                     g$t$10063$gDo33
                                                     '(syntax))
                                                 (g$syntax-violation$8109$gDo33
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$10051$gDo33)
                                                 (if (g$memv$5056$gDo33
                                                       g$t$10063$gDo33
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$8109$gDo33
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$10089$gDo33)
                                                           (if (g$memv$5056$gDo33
                                                                 g$t$10089$gDo33
                                                                 '(define))
                                                             '"a definition"
                                                             (if (g$memv$5056$gDo33
                                                                   g$t$10089$gDo33
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (g$memv$5056$gDo33
                                                                     g$t$10089$gDo33
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (g$memv$5056$gDo33
                                                                       g$t$10089$gDo33
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (g$memv$5056$gDo33
                                                                         g$t$10089$gDo33
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     (if (g$memv$5056$gDo33
                                                                           g$t$10089$gDo33
                                                                           '(export))
                                                                       '"an export declaration"
                                                                       '"a non-expression"))))))))
                                                        g$type$10062$gDo33)
                                                       '" was found where an expression was expected")
                                                     g$e$10051$gDo33)
                                                   (if (g$memv$5056$gDo33
                                                         g$t$10063$gDo33
                                                         '(mutable))
                                                     (g$syntax-violation$8109$gDo33
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$10051$gDo33)
                                                     (g$syntax-violation$8109$gDo33
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$10051$gDo33)))))))))))))))))))
                  g$type$10062$gDo33)))
              g$kwd$10059$gDo33
              g$value$10058$gDo33
              g$type$10057$gDo33)))))))
   (g$chi-set!$8016$gDo33
     g$chi-set!$11519$gDo33
     (case-lambda
       ((g$e$10090$gDo33 g$r$10091$gDo33 g$mr$10092$gDo33)
        ((case-lambda
           ((g$t$10093$gDo33)
            ((case-lambda
               ((g$ls/false$10094$gDo33)
                (if (if g$ls/false$10094$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$10095$gDo33 g$v$10096$gDo33)
                             (g$id?$7719$gDo33 g$x$10095$gDo33)))
                          g$ls/false$10094$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$10097$gDo33 g$v$10098$gDo33)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7739$gDo33
                              g$x$10097$gDo33
                              g$r$10091$gDo33)))
                         (case-lambda
                           ((g$type$10102$gDo33
                              g$value$10103$gDo33
                              g$kwd$10104$gDo33)
                            ((case-lambda
                               ((g$kwd$10105$gDo33
                                  g$value$10106$gDo33
                                  g$type$10107$gDo33)
                                ((case-lambda
                                   ((g$t$10108$gDo33)
                                    (if (g$memv$5056$gDo33
                                          g$t$10108$gDo33
                                          '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7943$gDo33
                                          g$value$10106$gDo33
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7941$gDo33
                                            g$value$10106$gDo33)
                                          (g$chi-expr$8015$gDo33
                                            g$v$10098$gDo33
                                            g$r$10091$gDo33
                                            g$mr$10092$gDo33)))
                                      (if (g$memv$5056$gDo33
                                            g$t$10108$gDo33
                                            '(core-prim))
                                        (g$syntax-violation$8109$gDo33
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$10090$gDo33)
                                        (if (g$memv$5056$gDo33
                                              g$t$10108$gDo33
                                              '(global))
                                          (g$syntax-violation$8109$gDo33
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$10090$gDo33)
                                          (if (g$memv$5056$gDo33
                                                g$t$10108$gDo33
                                                '(global-macro!))
                                            (g$chi-expr$8015$gDo33
                                              (g$chi-global-macro$8012$gDo33
                                                g$value$10106$gDo33
                                                g$e$10090$gDo33)
                                              g$r$10091$gDo33
                                              g$mr$10092$gDo33)
                                            (if (g$memv$5056$gDo33
                                                  g$t$10108$gDo33
                                                  '(local-macro!))
                                              (g$chi-expr$8015$gDo33
                                                (g$chi-local-macro$8011$gDo33
                                                  g$value$10106$gDo33
                                                  g$e$10090$gDo33)
                                                g$r$10091$gDo33
                                                g$mr$10092$gDo33)
                                              (if (g$memv$5056$gDo33
                                                    g$t$10108$gDo33
                                                    '(mutable))
                                                (g$syntax-violation$8109$gDo33
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$10090$gDo33)
                                                (g$syntax-violation$8109$gDo33
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$10090$gDo33)))))))))
                                 g$type$10107$gDo33)))
                             g$kwd$10104$gDo33
                             g$value$10103$gDo33
                             g$type$10102$gDo33))))))
                    g$ls/false$10094$gDo33)
                  (g$syntax-violation$8109$gDo33
                    '#f
                    '"invalid syntax"
                    g$t$10093$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$10093$gDo33 '(_ any any)))))
         g$e$10090$gDo33))))
   (g$verify-formals$8017$gDo33
     g$verify-formals$11520$gDo33
     (case-lambda
       ((g$fmls$10109$gDo33 g$stx$10110$gDo33)
        ((case-lambda
           ((g$t$10111$gDo33)
            ((case-lambda
               ((g$ls/false$10112$gDo33)
                (if g$ls/false$10112$gDo33
                  (apply
                    (case-lambda
                      ((g$x*$10113$gDo33)
                       (if (not (g$valid-bound-ids?$7724$gDo33
                                  g$x*$10113$gDo33))
                         (g$invalid-fmls-error$7962$gDo33
                           g$stx$10110$gDo33
                           g$fmls$10109$gDo33)
                         (void))))
                    g$ls/false$10112$gDo33)
                  ((case-lambda
                     ((g$t$10114$gDo33)
                      ((case-lambda
                         ((g$ls/false$10115$gDo33)
                          (if g$ls/false$10115$gDo33
                            (apply
                              (case-lambda
                                ((g$x*$10116$gDo33 g$x$10117$gDo33)
                                 (if (not (g$valid-bound-ids?$7724$gDo33
                                            (cons
                                              g$x$10117$gDo33
                                              g$x*$10116$gDo33)))
                                   (g$invalid-fmls-error$7962$gDo33
                                     g$stx$10110$gDo33
                                     g$fmls$10109$gDo33)
                                   (void))))
                              g$ls/false$10115$gDo33)
                            ((case-lambda
                               ((g$t$10118$gDo33)
                                ((case-lambda
                                   ((g$ls/false$10119$gDo33)
                                    (if g$ls/false$10119$gDo33
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$stx$10110$gDo33)))
                                        g$ls/false$10119$gDo33)
                                      (g$syntax-violation$8109$gDo33
                                        '#f
                                        '"invalid syntax"
                                        g$t$10118$gDo33))))
                                 (g$syntax-dispatch$7997$gDo33
                                   g$t$10118$gDo33
                                   '_))))
                             g$t$10114$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$10114$gDo33
                         '#(each+ any () any)))))
                   g$t$10111$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$10111$gDo33 'each-any))))
         g$fmls$10109$gDo33))))
   (g$chi-lambda-clause$8018$gDo33
     g$chi-lambda-clause$11521$gDo33
     (case-lambda
       ((g$stx$10120$gDo33
          g$fmls$10121$gDo33
          g$body*$10122$gDo33
          g$r$10123$gDo33
          g$mr$10124$gDo33)
        ((case-lambda
           ((g$t$10125$gDo33)
            ((case-lambda
               ((g$ls/false$10126$gDo33)
                (if g$ls/false$10126$gDo33
                  (apply
                    (case-lambda
                      ((g$x*$10127$gDo33)
                       (begin
                         (g$verify-formals$8017$gDo33
                           g$fmls$10121$gDo33
                           g$stx$10120$gDo33)
                         ((case-lambda
                            ((g$lex*$10128$gDo33 g$lab*$10129$gDo33)
                             (values
                               g$lex*$10128$gDo33
                               (g$chi-internal$8026$gDo33
                                 (g$add-subst$7709$gDo33
                                   (g$make-full-rib$7687$gDo33
                                     g$x*$10127$gDo33
                                     g$lab*$10129$gDo33)
                                   g$body*$10122$gDo33)
                                 (g$add-lexicals$7945$gDo33
                                   g$lab*$10129$gDo33
                                   g$lex*$10128$gDo33
                                   g$r$10123$gDo33)
                                 g$mr$10124$gDo33))))
                          (g$map$5063$gDo33
                            g$gen-lexical$7658$gDo33
                            g$x*$10127$gDo33)
                          (g$map$5063$gDo33
                            g$gen-label$7660$gDo33
                            g$x*$10127$gDo33)))))
                    g$ls/false$10126$gDo33)
                  ((case-lambda
                     ((g$t$10130$gDo33)
                      ((case-lambda
                         ((g$ls/false$10131$gDo33)
                          (if g$ls/false$10131$gDo33
                            (apply
                              (case-lambda
                                ((g$x*$10132$gDo33 g$x$10133$gDo33)
                                 (begin
                                   (g$verify-formals$8017$gDo33
                                     g$fmls$10121$gDo33
                                     g$stx$10120$gDo33)
                                   ((case-lambda
                                      ((g$lex*$10134$gDo33
                                         g$lab*$10135$gDo33
                                         g$lex$10136$gDo33
                                         g$lab$10137$gDo33)
                                       (values
                                         (append
                                           g$lex*$10134$gDo33
                                           g$lex$10136$gDo33)
                                         (g$chi-internal$8026$gDo33
                                           (g$add-subst$7709$gDo33
                                             (g$make-full-rib$7687$gDo33
                                               (cons
                                                 g$x$10133$gDo33
                                                 g$x*$10132$gDo33)
                                               (cons
                                                 g$lab$10137$gDo33
                                                 g$lab*$10135$gDo33))
                                             g$body*$10122$gDo33)
                                           (g$add-lexicals$7945$gDo33
                                             (cons
                                               g$lab$10137$gDo33
                                               g$lab*$10135$gDo33)
                                             (cons
                                               g$lex$10136$gDo33
                                               g$lex*$10134$gDo33)
                                             g$r$10123$gDo33)
                                           g$mr$10124$gDo33))))
                                    (g$map$5063$gDo33
                                      g$gen-lexical$7658$gDo33
                                      g$x*$10132$gDo33)
                                    (g$map$5063$gDo33
                                      g$gen-label$7660$gDo33
                                      g$x*$10132$gDo33)
                                    (g$gen-lexical$7658$gDo33 g$x$10133$gDo33)
                                    (g$gen-label$7660$gDo33 g$x$10133$gDo33)))))
                              g$ls/false$10131$gDo33)
                            ((case-lambda
                               ((g$t$10138$gDo33)
                                ((case-lambda
                                   ((g$ls/false$10139$gDo33)
                                    (if g$ls/false$10139$gDo33
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$8109$gDo33
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$10121$gDo33)))
                                        g$ls/false$10139$gDo33)
                                      (g$syntax-violation$8109$gDo33
                                        '#f
                                        '"invalid syntax"
                                        g$t$10138$gDo33))))
                                 (g$syntax-dispatch$7997$gDo33
                                   g$t$10138$gDo33
                                   '_))))
                             g$t$10130$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$10130$gDo33
                         '#(each+ any () any)))))
                   g$t$10125$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$10125$gDo33 'each-any))))
         g$fmls$10121$gDo33))))
   (g$chi-lambda-clause*$8019$gDo33
     g$chi-lambda-clause*$11522$gDo33
     (case-lambda
       ((g$stx$10140$gDo33
          g$fmls*$10141$gDo33
          g$body**$10142$gDo33
          g$r$10143$gDo33
          g$mr$10144$gDo33)
        (if (null? g$fmls*$10141$gDo33)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$8018$gDo33
                 g$stx$10140$gDo33
                 (car g$fmls*$10141$gDo33)
                 (car g$body**$10142$gDo33)
                 g$r$10143$gDo33
                 g$mr$10144$gDo33)))
            (case-lambda
              ((g$a$10147$gDo33 g$b$10148$gDo33)
               ((case-lambda
                  ((g$b$10149$gDo33 g$a$10150$gDo33)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$8019$gDo33
                          g$stx$10140$gDo33
                          (cdr g$fmls*$10141$gDo33)
                          (cdr g$body**$10142$gDo33)
                          g$r$10143$gDo33
                          g$mr$10144$gDo33)))
                     (case-lambda
                       ((g$a*$10153$gDo33 g$b*$10154$gDo33)
                        ((case-lambda
                           ((g$b*$10155$gDo33 g$a*$10156$gDo33)
                            (values
                              (cons g$a$10150$gDo33 g$a*$10156$gDo33)
                              (cons g$b$10149$gDo33 g$b*$10155$gDo33))))
                         g$b*$10154$gDo33
                         g$a*$10153$gDo33))))))
                g$b$10148$gDo33
                g$a$10147$gDo33))))))))
   (g$chi-defun$8020$gDo33
     g$chi-defun$11523$gDo33
     (case-lambda
       ((g$x$10157$gDo33 g$r$10158$gDo33 g$mr$10159$gDo33)
        ((case-lambda
           ((g$fmls$10160$gDo33 g$body*$10161$gDo33)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$8018$gDo33
                   g$fmls$10160$gDo33
                   g$fmls$10160$gDo33
                   g$body*$10161$gDo33
                   g$r$10158$gDo33
                   g$mr$10159$gDo33)))
              (case-lambda
                ((g$fmls$10164$gDo33 g$body$10165$gDo33)
                 ((case-lambda
                    ((g$body$10166$gDo33 g$fmls$10167$gDo33)
                     (g$build-lambda$7645$gDo33
                       '#f
                       g$fmls$10167$gDo33
                       g$body$10166$gDo33)))
                  g$body$10165$gDo33
                  g$fmls$10164$gDo33))))))
         (car g$x$10157$gDo33)
         (cdr g$x$10157$gDo33)))))
   (g$chi-rhs$8021$gDo33
     g$chi-rhs$11524$gDo33
     (case-lambda
       ((g$rhs$10168$gDo33 g$r$10169$gDo33 g$mr$10170$gDo33)
        ((case-lambda
           ((g$t$10171$gDo33)
            (if (g$memv$5056$gDo33 g$t$10171$gDo33 '(defun))
              (g$chi-defun$8020$gDo33
                (cdr g$rhs$10168$gDo33)
                g$r$10169$gDo33
                g$mr$10170$gDo33)
              (if (g$memv$5056$gDo33 g$t$10171$gDo33 '(expr))
                ((case-lambda
                   ((g$expr$10172$gDo33)
                    (g$chi-expr$8015$gDo33
                      g$expr$10172$gDo33
                      g$r$10169$gDo33
                      g$mr$10170$gDo33)))
                 (cdr g$rhs$10168$gDo33))
                (if (g$memv$5056$gDo33 g$t$10171$gDo33 '(top-expr))
                  ((case-lambda
                     ((g$expr$10173$gDo33)
                      (g$build-sequence$7648$gDo33
                        '#f
                        (list
                          (g$chi-expr$8015$gDo33
                            g$expr$10173$gDo33
                            g$r$10169$gDo33
                            g$mr$10170$gDo33)
                          (g$build-void$7649$gDo33)))))
                   (cdr g$rhs$10168$gDo33))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$10168$gDo33))))))
         (car g$rhs$10168$gDo33)))))
   (g$expand-interaction-rhs*/init*$8022$gDo33
     g$expand-interaction-rhs*/init*$11525$gDo33
     (case-lambda
       ((g$lhs*$10174$gDo33
          g$rhs*$10175$gDo33
          g$init*$10176$gDo33
          g$r$10177$gDo33
          g$mr$10178$gDo33)
        ((letrec ((g$f$10179$gDo33
                    (case-lambda
                      ((g$lhs*$10180$gDo33 g$rhs*$10181$gDo33)
                       (if (null? g$lhs*$10180$gDo33)
                         (g$map$5063$gDo33
                           (case-lambda
                             ((g$x$10182$gDo33)
                              (g$chi-expr$8015$gDo33
                                g$x$10182$gDo33
                                g$r$10177$gDo33
                                g$mr$10178$gDo33)))
                           g$init*$10176$gDo33)
                         ((case-lambda
                            ((g$lhs$10183$gDo33 g$rhs$10184$gDo33)
                             ((case-lambda
                                ((g$t$10185$gDo33)
                                 (if (g$memv$5056$gDo33
                                       g$t$10185$gDo33
                                       '(defun))
                                   ((case-lambda
                                      ((g$rhs$10186$gDo33)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$10183$gDo33
                                           g$rhs$10186$gDo33)
                                         (g$f$10179$gDo33
                                           (cdr g$lhs*$10180$gDo33)
                                           (cdr g$rhs*$10181$gDo33)))))
                                    (g$chi-defun$8020$gDo33
                                      (cdr g$rhs$10184$gDo33)
                                      g$r$10177$gDo33
                                      g$mr$10178$gDo33))
                                   (if (g$memv$5056$gDo33
                                         g$t$10185$gDo33
                                         '(expr))
                                     ((case-lambda
                                        ((g$rhs$10187$gDo33)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$10183$gDo33
                                             g$rhs$10187$gDo33)
                                           (g$f$10179$gDo33
                                             (cdr g$lhs*$10180$gDo33)
                                             (cdr g$rhs*$10181$gDo33)))))
                                      (g$chi-expr$8015$gDo33
                                        (cdr g$rhs$10184$gDo33)
                                        g$r$10177$gDo33
                                        g$mr$10178$gDo33))
                                     (if (g$memv$5056$gDo33
                                           g$t$10185$gDo33
                                           '(top-expr))
                                       ((case-lambda
                                          ((g$e$10188$gDo33)
                                           (cons
                                             g$e$10188$gDo33
                                             (g$f$10179$gDo33
                                               (cdr g$lhs*$10180$gDo33)
                                               (cdr g$rhs*$10181$gDo33)))))
                                        (g$chi-expr$8015$gDo33
                                          (cdr g$rhs$10184$gDo33)
                                          g$r$10177$gDo33
                                          g$mr$10178$gDo33))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$10184$gDo33))))))
                              (car g$rhs$10184$gDo33))))
                          (car g$lhs*$10180$gDo33)
                          (car g$rhs*$10181$gDo33)))))))
           g$f$10179$gDo33)
         g$lhs*$10174$gDo33
         g$rhs*$10175$gDo33))))
   (g$chi-rhs*$8023$gDo33
     g$chi-rhs*$11526$gDo33
     (case-lambda
       ((g$rhs*$10189$gDo33 g$r$10190$gDo33 g$mr$10191$gDo33)
        ((letrec ((g$f$10192$gDo33
                    (case-lambda
                      ((g$ls$10193$gDo33)
                       (if (null? g$ls$10193$gDo33)
                         '()
                         ((case-lambda
                            ((g$a$10194$gDo33)
                             (cons
                               g$a$10194$gDo33
                               (g$f$10192$gDo33 (cdr g$ls$10193$gDo33)))))
                          (g$chi-rhs$8021$gDo33
                            (car g$ls$10193$gDo33)
                            g$r$10190$gDo33
                            g$mr$10191$gDo33)))))))
           g$f$10192$gDo33)
         g$rhs*$10189$gDo33))))
   (g$find-bound=?$8024$gDo33
     g$find-bound=?$11527$gDo33
     (case-lambda
       ((g$x$10195$gDo33 g$lhs*$10196$gDo33 g$rhs*$10197$gDo33)
        (if (null? g$lhs*$10196$gDo33)
          '#f
          (if (g$bound-id=?$7722$gDo33 g$x$10195$gDo33 (car g$lhs*$10196$gDo33))
            (car g$rhs*$10197$gDo33)
            (g$find-bound=?$8024$gDo33
              g$x$10195$gDo33
              (cdr g$lhs*$10196$gDo33)
              (cdr g$rhs*$10197$gDo33)))))))
   (g$find-dups$8025$gDo33
     g$find-dups$11528$gDo33
     (case-lambda
       ((g$ls$10198$gDo33)
        ((letrec ((g$f$10199$gDo33
                    (case-lambda
                      ((g$ls$10200$gDo33 g$dups$10201$gDo33)
                       (if (null? g$ls$10200$gDo33)
                         g$dups$10201$gDo33
                         ((case-lambda
                            ((g$t$10202$gDo33)
                             (if g$t$10202$gDo33
                               ((case-lambda
                                  ((g$x$10203$gDo33)
                                   (g$f$10199$gDo33
                                     (cdr g$ls$10200$gDo33)
                                     (cons
                                       (list
                                         (car g$ls$10200$gDo33)
                                         g$x$10203$gDo33)
                                       g$dups$10201$gDo33))))
                                g$t$10202$gDo33)
                               (g$f$10199$gDo33
                                 (cdr g$ls$10200$gDo33)
                                 g$dups$10201$gDo33))))
                          (g$find-bound=?$8024$gDo33
                            (car g$ls$10200$gDo33)
                            (cdr g$ls$10200$gDo33)
                            (cdr g$ls$10200$gDo33))))))))
           g$f$10199$gDo33)
         g$ls$10198$gDo33
         '()))))
   (g$chi-internal$8026$gDo33
     g$chi-internal$11529$gDo33
     (case-lambda
       ((g$e*$10204$gDo33 g$r$10205$gDo33 g$mr$10206$gDo33)
        ((case-lambda
           ((g$rib$10207$gDo33)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$8041$gDo33
                   (g$map$5063$gDo33
                     (case-lambda
                       ((g$x$10216$gDo33)
                        (g$add-subst$7709$gDo33
                          g$rib$10207$gDo33
                          g$x$10216$gDo33)))
                     (g$syntax->list$7718$gDo33 g$e*$10204$gDo33))
                   g$r$10205$gDo33
                   g$mr$10206$gDo33
                   '()
                   '()
                   '()
                   '()
                   '()
                   g$rib$10207$gDo33
                   '#f
                   '#t)))
              (case-lambda
                ((g$e*$10217$gDo33
                   g$r$10218$gDo33
                   g$mr$10219$gDo33
                   g$lex*$10220$gDo33
                   g$rhs*$10221$gDo33
                   g$mod**$10222$gDo33
                   g$kwd*$10223$gDo33
                   g$_exp*$10224$gDo33)
                 ((case-lambda
                    ((g$_exp*$10225$gDo33
                       g$kwd*$10226$gDo33
                       g$mod**$10227$gDo33
                       g$rhs*$10228$gDo33
                       g$lex*$10229$gDo33
                       g$mr$10230$gDo33
                       g$r$10231$gDo33
                       g$e*$10232$gDo33)
                     (begin
                       (if (null? g$e*$10232$gDo33)
                         (g$syntax-violation$8109$gDo33
                           '#f
                           '"no expression in body"
                           g$e*$10232$gDo33)
                         (void))
                       ((case-lambda
                          ((g$init*$10233$gDo33)
                           ((case-lambda
                              ((g$rhs*$10234$gDo33)
                               (g$build-letrec*$7651$gDo33
                                 '#f
                                 (reverse g$lex*$10229$gDo33)
                                 (reverse g$rhs*$10234$gDo33)
                                 (g$build-sequence$7648$gDo33
                                   '#f
                                   g$init*$10233$gDo33))))
                            (g$chi-rhs*$8023$gDo33
                              g$rhs*$10228$gDo33
                              g$r$10231$gDo33
                              g$mr$10230$gDo33))))
                        (g$chi-expr*$8013$gDo33
                          (append
                            (apply append (reverse g$mod**$10227$gDo33))
                            g$e*$10232$gDo33)
                          g$r$10231$gDo33
                          g$mr$10230$gDo33)))))
                  g$_exp*$10224$gDo33
                  g$kwd*$10223$gDo33
                  g$mod**$10222$gDo33
                  g$rhs*$10221$gDo33
                  g$lex*$10220$gDo33
                  g$mr$10219$gDo33
                  g$r$10218$gDo33
                  g$e*$10217$gDo33))))))
         (g$make-empty-rib$7679$gDo33)))))
   (g$parse-module$8027$gDo33
     g$parse-module$11530$gDo33
     (case-lambda
       ((g$e$10235$gDo33)
        ((case-lambda
           ((g$t$10236$gDo33)
            ((case-lambda
               ((g$ls/false$10237$gDo33)
                (if g$ls/false$10237$gDo33
                  (apply
                    (case-lambda
                      ((g$export*$10238$gDo33 g$b*$10239$gDo33)
                       (begin
                         (if (not (g$for-all$5061$gDo33
                                    g$id?$7719$gDo33
                                    g$export*$10238$gDo33))
                           (g$syntax-violation$8109$gDo33
                             '#f
                             '"module exports must be identifiers"
                             g$e$10235$gDo33)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$10238$gDo33)
                           g$b*$10239$gDo33))))
                    g$ls/false$10237$gDo33)
                  ((case-lambda
                     ((g$t$10240$gDo33)
                      ((case-lambda
                         ((g$ls/false$10241$gDo33)
                          (if g$ls/false$10241$gDo33
                            (apply
                              (case-lambda
                                ((g$name$10242$gDo33
                                   g$export*$10243$gDo33
                                   g$b*$10244$gDo33)
                                 (begin
                                   (if (not (g$id?$7719$gDo33
                                              g$name$10242$gDo33))
                                     (g$syntax-violation$8109$gDo33
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$10235$gDo33)
                                     (void))
                                   (if (not (g$for-all$5061$gDo33
                                              g$id?$7719$gDo33
                                              g$export*$10243$gDo33))
                                     (g$syntax-violation$8109$gDo33
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$10235$gDo33)
                                     (void))
                                   (values
                                     g$name$10242$gDo33
                                     (list->vector g$export*$10243$gDo33)
                                     g$b*$10244$gDo33))))
                              g$ls/false$10241$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$10240$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$10240$gDo33
                         '(_ any each-any . each-any)))))
                   g$t$10236$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$10236$gDo33
               '(_ each-any . each-any)))))
         g$e$10235$gDo33))))
   (g$9071$8028$gDo33
     g$9071$11531$gDo33
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$9074$gDo33
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$9073$8029$gDo33 g$9073$11532$gDo33 '#f)
   (g$9072$8030$gDo33
     g$9072$11533$gDo33
     (make-record-constructor-descriptor
       g$9071$8028$gDo33
       '#f
       g$9073$8029$gDo33))
   (g$module-interface?$8031$gDo33
     g$module-interface?$11534$gDo33
     (record-predicate g$9071$8028$gDo33))
   (g$make-module-interface$8032$gDo33
     g$make-module-interface$11535$gDo33
     (record-constructor g$9072$8030$gDo33))
   (g$module-interface-first-mark$8033$gDo33
     g$module-interface-first-mark$11536$gDo33
     (record-accessor g$9071$8028$gDo33 '0))
   (g$module-interface-exp-id-vec$8034$gDo33
     g$module-interface-exp-id-vec$11537$gDo33
     (record-accessor g$9071$8028$gDo33 '1))
   (g$module-interface-exp-lab-vec$8035$gDo33
     g$module-interface-exp-lab-vec$11538$gDo33
     (record-accessor g$9071$8028$gDo33 '2))
   (g$set-module-interface-first-mark!$8036$gDo33
     g$set-module-interface-first-mark!$11539$gDo33
     (record-mutator g$9071$8028$gDo33 '0))
   (g$set-module-interface-exp-id-vec!$8037$gDo33
     g$set-module-interface-exp-id-vec!$11540$gDo33
     (record-mutator g$9071$8028$gDo33 '1))
   (g$set-module-interface-exp-lab-vec!$8038$gDo33
     g$set-module-interface-exp-lab-vec!$11541$gDo33
     (record-mutator g$9071$8028$gDo33 '2))
   (g$module-interface-exp-id*$8039$gDo33
     g$module-interface-exp-id*$11542$gDo33
     (case-lambda
       ((g$iface$10245$gDo33 g$id$10246$gDo33)
        (letrec* ((g$diff-marks$10247$gDo33
                    (case-lambda
                      ((g$ls$10251$gDo33 g$x$10252$gDo33)
                       (begin
                         (if (null? g$ls$10251$gDo33)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$10253$gDo33)
                             (if (eq? g$a$10253$gDo33 g$x$10252$gDo33)
                               '()
                               (cons
                                 g$a$10253$gDo33
                                 (g$diff-marks$10247$gDo33
                                   (cdr g$ls$10251$gDo33)
                                   g$x$10252$gDo33)))))
                          (car g$ls$10251$gDo33)))))))
          ((case-lambda
             ((g$diff$10248$gDo33 g$id-vec$10249$gDo33)
              (if (null? g$diff$10248$gDo33)
                g$id-vec$10249$gDo33
                (vector-map
                  (case-lambda
                    ((g$x$10250$gDo33)
                     (g$make-stx$7692$gDo33
                       (g$stx-expr$7693$gDo33 g$x$10250$gDo33)
                       (append
                         g$diff$10248$gDo33
                         (g$stx-mark*$7694$gDo33 g$x$10250$gDo33))
                       '()
                       '())))
                  g$id-vec$10249$gDo33))))
           (g$diff-marks$10247$gDo33
             (g$stx-mark*$7694$gDo33 g$id$10246$gDo33)
             (g$module-interface-first-mark$8033$gDo33 g$iface$10245$gDo33))
           (g$module-interface-exp-id-vec$8034$gDo33 g$iface$10245$gDo33))))))
   (g$chi-internal-module$8040$gDo33
     g$chi-internal-module$11543$gDo33
     (case-lambda
       ((g$e$10254$gDo33
          g$r$10255$gDo33
          g$mr$10256$gDo33
          g$lex*$10257$gDo33
          g$rhs*$10258$gDo33
          g$mod**$10259$gDo33
          g$kwd*$10260$gDo33)
        (call-with-values
          (case-lambda (() (g$parse-module$8027$gDo33 g$e$10254$gDo33)))
          (case-lambda
            ((g$name$10264$gDo33 g$exp-id*$10265$gDo33 g$e*$10266$gDo33)
             ((case-lambda
                ((g$e*$10267$gDo33 g$exp-id*$10268$gDo33 g$name$10269$gDo33)
                 ((case-lambda
                    ((g$rib$10270$gDo33)
                     ((case-lambda
                        ((g$e*$10271$gDo33)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$chi-body*$8041$gDo33
                                g$e*$10271$gDo33
                                g$r$10255$gDo33
                                g$mr$10256$gDo33
                                g$lex*$10257$gDo33
                                g$rhs*$10258$gDo33
                                g$mod**$10259$gDo33
                                g$kwd*$10260$gDo33
                                '()
                                g$rib$10270$gDo33
                                '#f
                                '#t)))
                           (case-lambda
                             ((g$e*$10280$gDo33
                                g$r$10281$gDo33
                                g$mr$10282$gDo33
                                g$lex*$10283$gDo33
                                g$rhs*$10284$gDo33
                                g$mod**$10285$gDo33
                                g$kwd*$10286$gDo33
                                g$_exp*$10287$gDo33)
                              ((case-lambda
                                 ((g$_exp*$10288$gDo33
                                    g$kwd*$10289$gDo33
                                    g$mod**$10290$gDo33
                                    g$rhs*$10291$gDo33
                                    g$lex*$10292$gDo33
                                    g$mr$10293$gDo33
                                    g$r$10294$gDo33
                                    g$e*$10295$gDo33)
                                  ((case-lambda
                                     ((g$exp-lab*$10296$gDo33
                                        g$mod**$10297$gDo33)
                                      (if (not g$name$10269$gDo33)
                                        (values
                                          g$lex*$10292$gDo33
                                          g$rhs*$10291$gDo33
                                          g$exp-id*$10268$gDo33
                                          g$exp-lab*$10296$gDo33
                                          g$r$10294$gDo33
                                          g$mr$10293$gDo33
                                          g$mod**$10297$gDo33
                                          g$kwd*$10289$gDo33)
                                        ((case-lambda
                                           ((g$lab$10298$gDo33
                                              g$iface$10299$gDo33)
                                            (values
                                              g$lex*$10292$gDo33
                                              g$rhs*$10291$gDo33
                                              (vector g$name$10269$gDo33)
                                              (vector g$lab$10298$gDo33)
                                              (cons
                                                (cons
                                                  g$lab$10298$gDo33
                                                  (cons
                                                    '$module
                                                    g$iface$10299$gDo33))
                                                g$r$10294$gDo33)
                                              (cons
                                                (cons
                                                  g$lab$10298$gDo33
                                                  (cons
                                                    '$module
                                                    g$iface$10299$gDo33))
                                                g$mr$10293$gDo33)
                                              g$mod**$10297$gDo33
                                              g$kwd*$10289$gDo33)))
                                         (g$gen-label$7660$gDo33 'module)
                                         (g$make-module-interface$8032$gDo33
                                           (car (g$stx-mark*$7694$gDo33
                                                  g$name$10269$gDo33))
                                           (vector-map
                                             (case-lambda
                                               ((g$x$10300$gDo33)
                                                (g$make-stx$7692$gDo33
                                                  (g$stx-expr$7693$gDo33
                                                    g$x$10300$gDo33)
                                                  (g$stx-mark*$7694$gDo33
                                                    g$x$10300$gDo33)
                                                  '()
                                                  '())))
                                             g$exp-id*$10268$gDo33)
                                           g$exp-lab*$10296$gDo33)))))
                                   (vector-map
                                     (case-lambda
                                       ((g$x$10301$gDo33)
                                        ((case-lambda
                                           ((g$t$10302$gDo33)
                                            (if g$t$10302$gDo33
                                              g$t$10302$gDo33
                                              (begin
                                                '#f
                                                (g$syntax-violation$8109$gDo33
                                                  '#f
                                                  '"cannot find module export"
                                                  g$x$10301$gDo33)))))
                                         (g$id->label$7732$gDo33
                                           (g$make-stx$7692$gDo33
                                             (g$id->sym$7720$gDo33
                                               g$x$10301$gDo33)
                                             (g$stx-mark*$7694$gDo33
                                               g$x$10301$gDo33)
                                             (list g$rib$10270$gDo33)
                                             '())))))
                                     g$exp-id*$10268$gDo33)
                                   (cons
                                     g$e*$10295$gDo33
                                     g$mod**$10290$gDo33))))
                               g$_exp*$10287$gDo33
                               g$kwd*$10286$gDo33
                               g$mod**$10285$gDo33
                               g$rhs*$10284$gDo33
                               g$lex*$10283$gDo33
                               g$mr$10282$gDo33
                               g$r$10281$gDo33
                               g$e*$10280$gDo33))))))
                      (g$map$5063$gDo33
                        (case-lambda
                          ((g$x$10303$gDo33)
                           (g$add-subst$7709$gDo33
                             g$rib$10270$gDo33
                             g$x$10303$gDo33)))
                        (g$syntax->list$7718$gDo33 g$e*$10267$gDo33)))))
                  (g$make-empty-rib$7679$gDo33))))
              g$e*$10266$gDo33
              g$exp-id*$10265$gDo33
              g$name$10264$gDo33)))))))
   (g$chi-body*$8041$gDo33
     g$chi-body*$11544$gDo33
     (case-lambda
       ((g$e*$10304$gDo33
          g$r$10305$gDo33
          g$mr$10306$gDo33
          g$lex*$10307$gDo33
          g$rhs*$10308$gDo33
          g$mod**$10309$gDo33
          g$kwd*$10310$gDo33
          g$exp*$10311$gDo33
          g$rib$10312$gDo33
          g$mix?$10313$gDo33
          g$sd?$10314$gDo33)
        (if (null? g$e*$10304$gDo33)
          (values
            g$e*$10304$gDo33
            g$r$10305$gDo33
            g$mr$10306$gDo33
            g$lex*$10307$gDo33
            g$rhs*$10308$gDo33
            g$mod**$10309$gDo33
            g$kwd*$10310$gDo33
            g$exp*$10311$gDo33)
          ((case-lambda
             ((g$e$10315$gDo33)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7739$gDo33 g$e$10315$gDo33 g$r$10305$gDo33)))
                (case-lambda
                  ((g$type$10319$gDo33 g$value$10320$gDo33 g$kwd$10321$gDo33)
                   ((case-lambda
                      ((g$kwd$10322$gDo33
                         g$value$10323$gDo33
                         g$type$10324$gDo33)
                       ((case-lambda
                          ((g$kwd*$10325$gDo33)
                           ((case-lambda
                              ((g$t$10326$gDo33)
                               (if (g$memv$5056$gDo33 g$t$10326$gDo33 '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7937$gDo33
                                        g$e$10315$gDo33)))
                                   (case-lambda
                                     ((g$id$10329$gDo33 g$rhs$10330$gDo33)
                                      ((case-lambda
                                         ((g$rhs$10331$gDo33 g$id$10332$gDo33)
                                          (begin
                                            (if (g$bound-id-member?$7726$gDo33
                                                  g$id$10332$gDo33
                                                  g$kwd*$10325$gDo33)
                                              (g$syntax-violation$8109$gDo33
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$10315$gDo33)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7662$gDo33
                                                   g$id$10332$gDo33
                                                   g$rib$10312$gDo33
                                                   g$sd?$10314$gDo33)))
                                              (case-lambda
                                                ((g$lab$10335$gDo33
                                                   g$lex$10336$gDo33)
                                                 ((case-lambda
                                                    ((g$lex$10337$gDo33
                                                       g$lab$10338$gDo33)
                                                     (begin
                                                       (g$extend-rib!$7682$gDo33
                                                         g$rib$10312$gDo33
                                                         g$id$10332$gDo33
                                                         g$lab$10338$gDo33
                                                         g$sd?$10314$gDo33)
                                                       (g$chi-body*$8041$gDo33
                                                         (cdr g$e*$10304$gDo33)
                                                         (g$add-lexical$7944$gDo33
                                                           g$lab$10338$gDo33
                                                           g$lex$10337$gDo33
                                                           g$r$10305$gDo33)
                                                         g$mr$10306$gDo33
                                                         (cons
                                                           g$lex$10337$gDo33
                                                           g$lex*$10307$gDo33)
                                                         (cons
                                                           g$rhs$10331$gDo33
                                                           g$rhs*$10308$gDo33)
                                                         g$mod**$10309$gDo33
                                                         g$kwd*$10325$gDo33
                                                         g$exp*$10311$gDo33
                                                         g$rib$10312$gDo33
                                                         g$mix?$10313$gDo33
                                                         g$sd?$10314$gDo33))))
                                                  g$lex$10336$gDo33
                                                  g$lab$10335$gDo33)))))))
                                       g$rhs$10330$gDo33
                                       g$id$10329$gDo33))))
                                 (if (g$memv$5056$gDo33
                                       g$t$10326$gDo33
                                       '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7938$gDo33
                                          g$e$10315$gDo33)))
                                     (case-lambda
                                       ((g$id$10341$gDo33 g$rhs$10342$gDo33)
                                        ((case-lambda
                                           ((g$rhs$10343$gDo33 g$id$10344$gDo33)
                                            (begin
                                              (if (g$bound-id-member?$7726$gDo33
                                                    g$id$10344$gDo33
                                                    g$kwd*$10325$gDo33)
                                                (g$syntax-violation$8109$gDo33
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$10315$gDo33)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$10345$gDo33)
                                                  ((case-lambda
                                                     ((g$expanded-rhs$10346$gDo33)
                                                      (begin
                                                        (g$extend-rib!$7682$gDo33
                                                          g$rib$10312$gDo33
                                                          g$id$10344$gDo33
                                                          g$lab$10345$gDo33
                                                          g$sd?$10314$gDo33)
                                                        ((case-lambda
                                                           ((g$b$10347$gDo33)
                                                            (g$chi-body*$8041$gDo33
                                                              (cdr g$e*$10304$gDo33)
                                                              (cons
                                                                (cons
                                                                  g$lab$10345$gDo33
                                                                  g$b$10347$gDo33)
                                                                g$r$10305$gDo33)
                                                              (cons
                                                                (cons
                                                                  g$lab$10345$gDo33
                                                                  g$b$10347$gDo33)
                                                                g$mr$10306$gDo33)
                                                              g$lex*$10307$gDo33
                                                              g$rhs*$10308$gDo33
                                                              g$mod**$10309$gDo33
                                                              g$kwd*$10325$gDo33
                                                              g$exp*$10311$gDo33
                                                              g$rib$10312$gDo33
                                                              g$mix?$10313$gDo33
                                                              g$sd?$10314$gDo33)))
                                                         (g$make-eval-transformer$7751$gDo33
                                                           g$expanded-rhs$10346$gDo33)))))
                                                   (g$expand-transformer$8042$gDo33
                                                     g$rhs$10343$gDo33
                                                     g$mr$10306$gDo33))))
                                               (g$gen-define-label$7663$gDo33
                                                 g$id$10344$gDo33
                                                 g$rib$10312$gDo33
                                                 g$sd?$10314$gDo33)))))
                                         g$rhs$10342$gDo33
                                         g$id$10341$gDo33))))
                                   (if (g$memv$5056$gDo33
                                         g$t$10326$gDo33
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$10348$gDo33)
                                         ((case-lambda
                                            ((g$ls/false$10349$gDo33)
                                             (if (if g$ls/false$10349$gDo33
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$10350$gDo33
                                                            g$xrhs*$10351$gDo33
                                                            g$xbody*$10352$gDo33)
                                                          (if (not (g$valid-bound-ids?$7724$gDo33
                                                                     g$xlhs*$10350$gDo33))
                                                            (g$syntax-violation$8109$gDo33
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$10315$gDo33)
                                                            (void))))
                                                       g$ls/false$10349$gDo33))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$10353$gDo33
                                                      g$xrhs*$10354$gDo33
                                                      g$xbody*$10355$gDo33)
                                                    ((case-lambda
                                                       ((g$xlab*$10356$gDo33)
                                                        ((case-lambda
                                                           ((g$xrib$10357$gDo33)
                                                            ((case-lambda
                                                               ((g$xb*$10358$gDo33)
                                                                (g$chi-body*$8041$gDo33
                                                                  (append
                                                                    (g$map$5063$gDo33
                                                                      (case-lambda
                                                                        ((g$x$10359$gDo33)
                                                                         (g$add-subst$7709$gDo33
                                                                           g$xrib$10357$gDo33
                                                                           g$x$10359$gDo33)))
                                                                      g$xbody*$10355$gDo33)
                                                                    (cdr g$e*$10304$gDo33))
                                                                  (append
                                                                    (g$map$5063$gDo33
                                                                      cons
                                                                      g$xlab*$10356$gDo33
                                                                      g$xb*$10358$gDo33)
                                                                    g$r$10305$gDo33)
                                                                  (append
                                                                    (g$map$5063$gDo33
                                                                      cons
                                                                      g$xlab*$10356$gDo33
                                                                      g$xb*$10358$gDo33)
                                                                    g$mr$10306$gDo33)
                                                                  g$lex*$10307$gDo33
                                                                  g$rhs*$10308$gDo33
                                                                  g$mod**$10309$gDo33
                                                                  g$kwd*$10325$gDo33
                                                                  g$exp*$10311$gDo33
                                                                  g$rib$10312$gDo33
                                                                  g$mix?$10313$gDo33
                                                                  g$sd?$10314$gDo33)))
                                                             (g$map$5063$gDo33
                                                               (case-lambda
                                                                 ((g$x$10360$gDo33)
                                                                  (g$make-eval-transformer$7751$gDo33
                                                                    (g$expand-transformer$8042$gDo33
                                                                      (if (eq? g$type$10324$gDo33
                                                                               'let-syntax)
                                                                        g$x$10360$gDo33
                                                                        (g$add-subst$7709$gDo33
                                                                          g$xrib$10357$gDo33
                                                                          g$x$10360$gDo33))
                                                                      g$mr$10306$gDo33))))
                                                               g$xrhs*$10354$gDo33))))
                                                         (g$make-full-rib$7687$gDo33
                                                           g$xlhs*$10353$gDo33
                                                           g$xlab*$10356$gDo33))))
                                                     (g$map$5063$gDo33
                                                       g$gen-label$7660$gDo33
                                                       g$xlhs*$10353$gDo33))))
                                                 g$ls/false$10349$gDo33)
                                               (g$syntax-violation$8109$gDo33
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$10348$gDo33))))
                                          (g$syntax-dispatch$7997$gDo33
                                            g$t$10348$gDo33
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$10315$gDo33)
                                     (if (g$memv$5056$gDo33
                                           g$t$10326$gDo33
                                           '(begin))
                                       ((case-lambda
                                          ((g$t$10361$gDo33)
                                           ((case-lambda
                                              ((g$ls/false$10362$gDo33)
                                               (if g$ls/false$10362$gDo33
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$10363$gDo33)
                                                      (g$chi-body*$8041$gDo33
                                                        (append
                                                          g$x*$10363$gDo33
                                                          (cdr g$e*$10304$gDo33))
                                                        g$r$10305$gDo33
                                                        g$mr$10306$gDo33
                                                        g$lex*$10307$gDo33
                                                        g$rhs*$10308$gDo33
                                                        g$mod**$10309$gDo33
                                                        g$kwd*$10325$gDo33
                                                        g$exp*$10311$gDo33
                                                        g$rib$10312$gDo33
                                                        g$mix?$10313$gDo33
                                                        g$sd?$10314$gDo33)))
                                                   g$ls/false$10362$gDo33)
                                                 (g$syntax-violation$8109$gDo33
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$10361$gDo33))))
                                            (g$syntax-dispatch$7997$gDo33
                                              g$t$10361$gDo33
                                              '(_ . each-any)))))
                                        g$e$10315$gDo33)
                                       (if (g$memv$5056$gDo33
                                             g$t$10326$gDo33
                                             '(global-macro global-macro!))
                                         (g$chi-body*$8041$gDo33
                                           (cons
                                             (g$add-subst$7709$gDo33
                                               g$rib$10312$gDo33
                                               (g$chi-global-macro$8012$gDo33
                                                 g$value$10323$gDo33
                                                 g$e$10315$gDo33))
                                             (cdr g$e*$10304$gDo33))
                                           g$r$10305$gDo33
                                           g$mr$10306$gDo33
                                           g$lex*$10307$gDo33
                                           g$rhs*$10308$gDo33
                                           g$mod**$10309$gDo33
                                           g$kwd*$10325$gDo33
                                           g$exp*$10311$gDo33
                                           g$rib$10312$gDo33
                                           g$mix?$10313$gDo33
                                           g$sd?$10314$gDo33)
                                         (if (g$memv$5056$gDo33
                                               g$t$10326$gDo33
                                               '(local-macro local-macro!))
                                           (g$chi-body*$8041$gDo33
                                             (cons
                                               (g$add-subst$7709$gDo33
                                                 g$rib$10312$gDo33
                                                 (g$chi-local-macro$8011$gDo33
                                                   g$value$10323$gDo33
                                                   g$e$10315$gDo33))
                                               (cdr g$e*$10304$gDo33))
                                             g$r$10305$gDo33
                                             g$mr$10306$gDo33
                                             g$lex*$10307$gDo33
                                             g$rhs*$10308$gDo33
                                             g$mod**$10309$gDo33
                                             g$kwd*$10325$gDo33
                                             g$exp*$10311$gDo33
                                             g$rib$10312$gDo33
                                             g$mix?$10313$gDo33
                                             g$sd?$10314$gDo33)
                                           (if (g$memv$5056$gDo33
                                                 g$t$10326$gDo33
                                                 '(macro macro!))
                                             (g$chi-body*$8041$gDo33
                                               (cons
                                                 (g$add-subst$7709$gDo33
                                                   g$rib$10312$gDo33
                                                   (g$chi-macro$8010$gDo33
                                                     g$value$10323$gDo33
                                                     g$e$10315$gDo33))
                                                 (cdr g$e*$10304$gDo33))
                                               g$r$10305$gDo33
                                               g$mr$10306$gDo33
                                               g$lex*$10307$gDo33
                                               g$rhs*$10308$gDo33
                                               g$mod**$10309$gDo33
                                               g$kwd*$10325$gDo33
                                               g$exp*$10311$gDo33
                                               g$rib$10312$gDo33
                                               g$mix?$10313$gDo33
                                               g$sd?$10314$gDo33)
                                             (if (g$memv$5056$gDo33
                                                   g$t$10326$gDo33
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$8040$gDo33
                                                      g$e$10315$gDo33
                                                      g$r$10305$gDo33
                                                      g$mr$10306$gDo33
                                                      g$lex*$10307$gDo33
                                                      g$rhs*$10308$gDo33
                                                      g$mod**$10309$gDo33
                                                      g$kwd*$10325$gDo33)))
                                                 (case-lambda
                                                   ((g$lex*$10372$gDo33
                                                      g$rhs*$10373$gDo33
                                                      g$m-exp-id*$10374$gDo33
                                                      g$m-exp-lab*$10375$gDo33
                                                      g$r$10376$gDo33
                                                      g$mr$10377$gDo33
                                                      g$mod**$10378$gDo33
                                                      g$kwd*$10379$gDo33)
                                                    ((case-lambda
                                                       ((g$kwd*$10380$gDo33
                                                          g$mod**$10381$gDo33
                                                          g$mr$10382$gDo33
                                                          g$r$10383$gDo33
                                                          g$m-exp-lab*$10384$gDo33
                                                          g$m-exp-id*$10385$gDo33
                                                          g$rhs*$10386$gDo33
                                                          g$lex*$10387$gDo33)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$10388$gDo33
                                                                 g$lab$10389$gDo33)
                                                               (g$extend-rib!$7682$gDo33
                                                                 g$rib$10312$gDo33
                                                                 g$id$10388$gDo33
                                                                 g$lab$10389$gDo33
                                                                 g$sd?$10314$gDo33)))
                                                            g$m-exp-id*$10385$gDo33
                                                            g$m-exp-lab*$10384$gDo33)
                                                          (g$chi-body*$8041$gDo33
                                                            (cdr g$e*$10304$gDo33)
                                                            g$r$10383$gDo33
                                                            g$mr$10382$gDo33
                                                            g$lex*$10387$gDo33
                                                            g$rhs*$10386$gDo33
                                                            g$mod**$10381$gDo33
                                                            g$kwd*$10380$gDo33
                                                            g$exp*$10311$gDo33
                                                            g$rib$10312$gDo33
                                                            g$mix?$10313$gDo33
                                                            g$sd?$10314$gDo33))))
                                                     g$kwd*$10379$gDo33
                                                     g$mod**$10378$gDo33
                                                     g$mr$10377$gDo33
                                                     g$r$10376$gDo33
                                                     g$m-exp-lab*$10375$gDo33
                                                     g$m-exp-id*$10374$gDo33
                                                     g$rhs*$10373$gDo33
                                                     g$lex*$10372$gDo33))))
                                               (if (g$memv$5056$gDo33
                                                     g$t$10326$gDo33
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$8093$gDo33
                                                     (g$stx->datum$7730$gDo33
                                                       g$e$10315$gDo33))
                                                   (g$chi-body*$8041$gDo33
                                                     (cdr g$e*$10304$gDo33)
                                                     g$r$10305$gDo33
                                                     g$mr$10306$gDo33
                                                     g$lex*$10307$gDo33
                                                     g$rhs*$10308$gDo33
                                                     g$mod**$10309$gDo33
                                                     g$kwd*$10325$gDo33
                                                     g$exp*$10311$gDo33
                                                     g$rib$10312$gDo33
                                                     g$mix?$10313$gDo33
                                                     g$sd?$10314$gDo33))
                                                 (if (g$memv$5056$gDo33
                                                       g$t$10326$gDo33
                                                       '(export))
                                                   ((case-lambda
                                                      ((g$t$10390$gDo33)
                                                       ((case-lambda
                                                          ((g$ls/false$10391$gDo33)
                                                           (if g$ls/false$10391$gDo33
                                                             (apply
                                                               (case-lambda
                                                                 ((g$exp-decl*$10392$gDo33)
                                                                  (g$chi-body*$8041$gDo33
                                                                    (cdr g$e*$10304$gDo33)
                                                                    g$r$10305$gDo33
                                                                    g$mr$10306$gDo33
                                                                    g$lex*$10307$gDo33
                                                                    g$rhs*$10308$gDo33
                                                                    g$mod**$10309$gDo33
                                                                    g$kwd*$10325$gDo33
                                                                    (append
                                                                      g$exp-decl*$10392$gDo33
                                                                      g$exp*$10311$gDo33)
                                                                    g$rib$10312$gDo33
                                                                    g$mix?$10313$gDo33
                                                                    g$sd?$10314$gDo33)))
                                                               g$ls/false$10391$gDo33)
                                                             (g$syntax-violation$8109$gDo33
                                                               '#f
                                                               '"invalid syntax"
                                                               g$t$10390$gDo33))))
                                                        (g$syntax-dispatch$7997$gDo33
                                                          g$t$10390$gDo33
                                                          '(_ . each-any)))))
                                                    g$e$10315$gDo33)
                                                   (if (g$memv$5056$gDo33
                                                         g$t$10326$gDo33
                                                         '(import))
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$10393$gDo33
                                                                     (case-lambda
                                                                       ((g$e$10435$gDo33)
                                                                        ((case-lambda
                                                                           ((g$t$10436$gDo33)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10437$gDo33)
                                                                                (if (if g$ls/false$10437$gDo33
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10438$gDo33)
                                                                                             (g$id?$7719$gDo33
                                                                                               g$id$10438$gDo33)))
                                                                                          g$ls/false$10437$gDo33))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10439$gDo33)
                                                                                       '#t))
                                                                                    g$ls/false$10437$gDo33)
                                                                                  ((case-lambda
                                                                                     ((g$t$10440$gDo33)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10441$gDo33)
                                                                                          (if g$ls/false$10441$gDo33
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$10442$gDo33)
                                                                                                 '#f))
                                                                                              g$ls/false$10441$gDo33)
                                                                                            ((case-lambda
                                                                                               ((g$t$10443$gDo33)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$10444$gDo33)
                                                                                                    (if g$ls/false$10444$gDo33
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$8109$gDo33
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$10435$gDo33)))
                                                                                                        g$ls/false$10444$gDo33)
                                                                                                      (g$syntax-violation$8109$gDo33
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$10443$gDo33))))
                                                                                                 (g$syntax-dispatch$7997$gDo33
                                                                                                   g$t$10443$gDo33
                                                                                                   '_))))
                                                                                             g$t$10440$gDo33))))
                                                                                       (g$syntax-dispatch$7997$gDo33
                                                                                         g$t$10440$gDo33
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$10436$gDo33))))
                                                                             (g$syntax-dispatch$7997$gDo33
                                                                               g$t$10436$gDo33
                                                                               '(_ any)))))
                                                                         g$e$10435$gDo33))))
                                                                   (g$module-import$10394$gDo33
                                                                     (case-lambda
                                                                       ((g$e$10418$gDo33
                                                                          g$r$10419$gDo33)
                                                                        ((case-lambda
                                                                           ((g$t$10420$gDo33)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10421$gDo33)
                                                                                (if (if g$ls/false$10421$gDo33
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$10422$gDo33)
                                                                                             (g$id?$7719$gDo33
                                                                                               g$id$10422$gDo33)))
                                                                                          g$ls/false$10421$gDo33))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$10423$gDo33)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7739$gDo33
                                                                                              g$id$10423$gDo33
                                                                                              g$r$10419$gDo33)))
                                                                                         (case-lambda
                                                                                           ((g$type$10427$gDo33
                                                                                              g$value$10428$gDo33
                                                                                              g$kwd$10429$gDo33)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$10430$gDo33
                                                                                                  g$value$10431$gDo33
                                                                                                  g$type$10432$gDo33)
                                                                                                ((case-lambda
                                                                                                   ((g$t$10433$gDo33)
                                                                                                    (if (g$memv$5056$gDo33
                                                                                                          g$t$10433$gDo33
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$10434$gDo33)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$8039$gDo33
                                                                                                              g$iface$10434$gDo33
                                                                                                              g$id$10423$gDo33)
                                                                                                            (g$module-interface-exp-lab-vec$8035$gDo33
                                                                                                              g$iface$10434$gDo33))))
                                                                                                       g$value$10431$gDo33)
                                                                                                      (g$syntax-violation$8109$gDo33
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$10418$gDo33))))
                                                                                                 g$type$10432$gDo33)))
                                                                                             g$kwd$10429$gDo33
                                                                                             g$value$10428$gDo33
                                                                                             g$type$10427$gDo33))))))
                                                                                    g$ls/false$10421$gDo33)
                                                                                  (g$syntax-violation$8109$gDo33
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$10420$gDo33))))
                                                                             (g$syntax-dispatch$7997$gDo33
                                                                               g$t$10420$gDo33
                                                                               '(_ any)))))
                                                                         g$e$10418$gDo33))))
                                                                   (g$library-import$10395$gDo33
                                                                     (case-lambda
                                                                       ((g$e$10404$gDo33)
                                                                        ((case-lambda
                                                                           ((g$t$10405$gDo33)
                                                                            ((case-lambda
                                                                               ((g$ls/false$10406$gDo33)
                                                                                (if g$ls/false$10406$gDo33
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$10407$gDo33
                                                                                         g$imp*$10408$gDo33)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$8046$gDo33
                                                                                              (g$syntax->datum$8112$gDo33
                                                                                                g$imp*$10408$gDo33))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$10411$gDo33
                                                                                              g$subst-labels$10412$gDo33)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$10413$gDo33
                                                                                                  g$subst-names$10414$gDo33)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$10415$gDo33)
                                                                                                       (g$datum->stx$7702$gDo33
                                                                                                         g$ctxt$10407$gDo33
                                                                                                         g$name$10415$gDo33)))
                                                                                                    g$subst-names$10414$gDo33)
                                                                                                  g$subst-labels$10413$gDo33)))
                                                                                             g$subst-labels$10412$gDo33
                                                                                             g$subst-names$10411$gDo33))))))
                                                                                    g$ls/false$10406$gDo33)
                                                                                  ((case-lambda
                                                                                     ((g$t$10416$gDo33)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$10417$gDo33)
                                                                                          (if g$ls/false$10417$gDo33
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$8109$gDo33
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$10404$gDo33)))
                                                                                              g$ls/false$10417$gDo33)
                                                                                            (g$syntax-violation$8109$gDo33
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$10416$gDo33))))
                                                                                       (g$syntax-dispatch$7997$gDo33
                                                                                         g$t$10416$gDo33
                                                                                         '_))))
                                                                                   g$t$10405$gDo33))))
                                                                             (g$syntax-dispatch$7997$gDo33
                                                                               g$t$10405$gDo33
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$10404$gDo33)))))
                                                           (begin
                                                             (call-with-values
                                                               (case-lambda
                                                                 (()
                                                                  (if (g$module-import?$10393$gDo33
                                                                        g$e$10315$gDo33)
                                                                    (g$module-import$10394$gDo33
                                                                      g$e$10315$gDo33
                                                                      g$r$10305$gDo33)
                                                                    (g$library-import$10395$gDo33
                                                                      g$e$10315$gDo33))))
                                                               (case-lambda
                                                                 ((g$id*$10398$gDo33
                                                                    g$lab*$10399$gDo33)
                                                                  ((case-lambda
                                                                     ((g$lab*$10400$gDo33
                                                                        g$id*$10401$gDo33)
                                                                      (vector-for-each
                                                                        (case-lambda
                                                                          ((g$id$10402$gDo33
                                                                             g$lab$10403$gDo33)
                                                                           (g$extend-rib!$7682$gDo33
                                                                             g$rib$10312$gDo33
                                                                             g$id$10402$gDo33
                                                                             g$lab$10403$gDo33
                                                                             g$sd?$10314$gDo33)))
                                                                        g$id*$10401$gDo33
                                                                        g$lab*$10400$gDo33)))
                                                                   g$lab*$10399$gDo33
                                                                   g$id*$10398$gDo33))))
                                                             (g$chi-body*$8041$gDo33
                                                               (cdr g$e*$10304$gDo33)
                                                               g$r$10305$gDo33
                                                               g$mr$10306$gDo33
                                                               g$lex*$10307$gDo33
                                                               g$rhs*$10308$gDo33
                                                               g$mod**$10309$gDo33
                                                               g$kwd*$10325$gDo33
                                                               g$exp*$10311$gDo33
                                                               g$rib$10312$gDo33
                                                               g$mix?$10313$gDo33
                                                               g$sd?$10314$gDo33))))))
                                                     (if g$mix?$10313$gDo33
                                                       (g$chi-body*$8041$gDo33
                                                         (cdr g$e*$10304$gDo33)
                                                         g$r$10305$gDo33
                                                         g$mr$10306$gDo33
                                                         (cons
                                                           (g$gen-lexical$7658$gDo33
                                                             'dummy)
                                                           g$lex*$10307$gDo33)
                                                         (cons
                                                           (cons
                                                             'top-expr
                                                             g$e$10315$gDo33)
                                                           g$rhs*$10308$gDo33)
                                                         g$mod**$10309$gDo33
                                                         g$kwd*$10325$gDo33
                                                         g$exp*$10311$gDo33
                                                         g$rib$10312$gDo33
                                                         '#t
                                                         g$sd?$10314$gDo33)
                                                       (values
                                                         g$e*$10304$gDo33
                                                         g$r$10305$gDo33
                                                         g$mr$10306$gDo33
                                                         g$lex*$10307$gDo33
                                                         g$rhs*$10308$gDo33
                                                         g$mod**$10309$gDo33
                                                         g$kwd*$10325$gDo33
                                                         g$exp*$10311$gDo33)))))))))))))))
                            g$type$10324$gDo33)))
                        (if (g$id?$7719$gDo33 g$kwd$10322$gDo33)
                          (cons g$kwd$10322$gDo33 g$kwd*$10310$gDo33)
                          g$kwd*$10310$gDo33))))
                    g$kwd$10321$gDo33
                    g$value$10320$gDo33
                    g$type$10319$gDo33))))))
           (car g$e*$10304$gDo33))))))
   (g$expand-transformer$8042$gDo33
     g$expand-transformer$11545$gDo33
     (case-lambda
       ((g$expr$10445$gDo33 g$r$10446$gDo33)
        ((case-lambda
           ((g$rtc$10447$gDo33)
            ((case-lambda
               ((g$expanded-rhs$10448$gDo33)
                (begin
                  (g$for-each$5064$gDo33
                    ((case-lambda
                       ((g$mark-visit$10449$gDo33)
                        (case-lambda
                          ((g$x$10450$gDo33)
                           (begin
                             (g$invoke-library$7529$gDo33 g$x$10450$gDo33)
                             (g$mark-visit$10449$gDo33 g$x$10450$gDo33))))))
                     (g$vis-collector$8050$gDo33))
                    (g$rtc$10447$gDo33))
                  g$expanded-rhs$10448$gDo33)))
             ((case-lambda
                ((g$inv-collector$10455$gDo33
                   g$vis-collector$10456$gDo33
                   g$inv-collector$10457$gDo33
                   g$vis-collector$10458$gDo33)
                 ((case-lambda
                    ((g$swap$10459$gDo33)
                     (dynamic-wind
                       g$swap$10459$gDo33
                       (case-lambda
                         (()
                          (g$chi-expr$8015$gDo33
                            g$expr$10445$gDo33
                            g$r$10446$gDo33
                            g$r$10446$gDo33)))
                       g$swap$10459$gDo33)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$10460$gDo33)
                           (begin
                             (g$inv-collector$10455$gDo33
                               g$inv-collector$10457$gDo33)
                             (set! g$inv-collector$10457$gDo33
                               g$t$10460$gDo33))))
                        (g$inv-collector$10455$gDo33))
                       ((case-lambda
                          ((g$t$10461$gDo33)
                           (begin
                             (g$vis-collector$10456$gDo33
                               g$vis-collector$10458$gDo33)
                             (set! g$vis-collector$10458$gDo33
                               g$t$10461$gDo33))))
                        (g$vis-collector$10456$gDo33))))))))
              g$inv-collector$8049$gDo33
              g$vis-collector$8050$gDo33
              g$rtc$10447$gDo33
              (case-lambda ((g$x$10462$gDo33) (values)))))))
         (g$make-collector$8048$gDo33)))))
   (g$parse-exports$8043$gDo33
     g$parse-exports$11546$gDo33
     (case-lambda
       ((g$exp*$10463$gDo33)
        ((letrec ((g$f$10464$gDo33
                    (case-lambda
                      ((g$exp*$10465$gDo33
                         g$int*$10466$gDo33
                         g$ext*$10467$gDo33)
                       (if (null? g$exp*$10465$gDo33)
                         (begin
                           (if (not (g$valid-bound-ids?$7724$gDo33
                                      g$ext*$10467$gDo33))
                             (g$syntax-violation$8109$gDo33
                               'export
                               '"invalid exports"
                               (g$find-dups$8025$gDo33 g$ext*$10467$gDo33))
                             (void))
                           (values
                             (g$map$5063$gDo33
                               g$syntax->datum$8112$gDo33
                               g$ext*$10467$gDo33)
                             g$int*$10466$gDo33))
                         ((case-lambda
                            ((g$t$10468$gDo33)
                             ((case-lambda
                                ((g$ls/false$10469$gDo33)
                                 (if g$ls/false$10469$gDo33
                                   (apply
                                     (case-lambda
                                       ((g$rename$10470$gDo33
                                          g$i*$10471$gDo33
                                          g$e*$10472$gDo33)
                                        (begin
                                          (if (not (if (eq? (g$syntax->datum$8112$gDo33
                                                              g$rename$10470$gDo33)
                                                            'rename)
                                                     (if (g$for-all$5061$gDo33
                                                           g$id?$7719$gDo33
                                                           g$i*$10471$gDo33)
                                                       (begin
                                                         '#f
                                                         (g$for-all$5061$gDo33
                                                           g$id?$7719$gDo33
                                                           g$e*$10472$gDo33))
                                                       '#f)
                                                     '#f))
                                            (g$syntax-violation$8109$gDo33
                                              'export
                                              '"invalid export specifier"
                                              (car g$exp*$10465$gDo33))
                                            (void))
                                          (g$f$10464$gDo33
                                            (cdr g$exp*$10465$gDo33)
                                            (append
                                              g$i*$10471$gDo33
                                              g$int*$10466$gDo33)
                                            (append
                                              g$e*$10472$gDo33
                                              g$ext*$10467$gDo33)))))
                                     g$ls/false$10469$gDo33)
                                   ((case-lambda
                                      ((g$t$10473$gDo33)
                                       ((case-lambda
                                          ((g$ls/false$10474$gDo33)
                                           (if g$ls/false$10474$gDo33
                                             (apply
                                               (case-lambda
                                                 ((g$ie$10475$gDo33)
                                                  (begin
                                                    (if (not (g$id?$7719$gDo33
                                                               g$ie$10475$gDo33))
                                                      (g$syntax-violation$8109$gDo33
                                                        'export
                                                        '"invalid export"
                                                        g$ie$10475$gDo33)
                                                      (void))
                                                    (g$f$10464$gDo33
                                                      (cdr g$exp*$10465$gDo33)
                                                      (cons
                                                        g$ie$10475$gDo33
                                                        g$int*$10466$gDo33)
                                                      (cons
                                                        g$ie$10475$gDo33
                                                        g$ext*$10467$gDo33)))))
                                               g$ls/false$10474$gDo33)
                                             (g$syntax-violation$8109$gDo33
                                               '#f
                                               '"invalid syntax"
                                               g$t$10473$gDo33))))
                                        (g$syntax-dispatch$7997$gDo33
                                          g$t$10473$gDo33
                                          'any))))
                                    g$t$10468$gDo33))))
                              (g$syntax-dispatch$7997$gDo33
                                g$t$10468$gDo33
                                '(any . #(each (any any)))))))
                          (car g$exp*$10465$gDo33)))))))
           g$f$10464$gDo33)
         g$exp*$10463$gDo33
         '()
         '()))))
   (g$parse-library-name$8044$gDo33
     g$parse-library-name$11547$gDo33
     (case-lambda
       ((g$spec$10476$gDo33)
        (letrec* ((g$parse$10477$gDo33
                    (case-lambda
                      ((g$x$10484$gDo33)
                       ((case-lambda
                          ((g$t$10485$gDo33)
                           ((case-lambda
                              ((g$ls/false$10486$gDo33)
                               (if (if g$ls/false$10486$gDo33
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$10487$gDo33)
                                            (g$for-all$5061$gDo33
                                              (case-lambda
                                                ((g$x$10488$gDo33)
                                                 ((case-lambda
                                                    ((g$x$10489$gDo33)
                                                     (if (integer?
                                                           g$x$10489$gDo33)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$10489$gDo33))
                                                       '#f)))
                                                  (g$syntax->datum$8112$gDo33
                                                    g$x$10488$gDo33))))
                                              g$v*$10487$gDo33)))
                                         g$ls/false$10486$gDo33))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$10490$gDo33)
                                      (values
                                        '()
                                        (g$map$5063$gDo33
                                          g$syntax->datum$8112$gDo33
                                          g$v*$10490$gDo33))))
                                   g$ls/false$10486$gDo33)
                                 ((case-lambda
                                    ((g$t$10491$gDo33)
                                     ((case-lambda
                                        ((g$ls/false$10492$gDo33)
                                         (if (if g$ls/false$10492$gDo33
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$10493$gDo33
                                                        g$rest$10494$gDo33)
                                                      (symbol?
                                                        (g$syntax->datum$8112$gDo33
                                                          g$x$10493$gDo33))))
                                                   g$ls/false$10492$gDo33))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$10495$gDo33
                                                  g$rest$10496$gDo33)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$10477$gDo33
                                                       g$rest$10496$gDo33)))
                                                  (case-lambda
                                                    ((g$x*$10499$gDo33
                                                       g$v*$10500$gDo33)
                                                     ((case-lambda
                                                        ((g$v*$10501$gDo33
                                                           g$x*$10502$gDo33)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$8112$gDo33
                                                               g$x$10495$gDo33)
                                                             g$x*$10502$gDo33)
                                                           g$v*$10501$gDo33)))
                                                      g$v*$10500$gDo33
                                                      g$x*$10499$gDo33))))))
                                             g$ls/false$10492$gDo33)
                                           ((case-lambda
                                              ((g$t$10503$gDo33)
                                               ((case-lambda
                                                  ((g$ls/false$10504$gDo33)
                                                   (if g$ls/false$10504$gDo33
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$10504$gDo33)
                                                     ((case-lambda
                                                        ((g$t$10505$gDo33)
                                                         ((case-lambda
                                                            ((g$ls/false$10506$gDo33)
                                                             (if g$ls/false$10506$gDo33
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$8109$gDo33
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$10476$gDo33)))
                                                                 g$ls/false$10506$gDo33)
                                                               (g$syntax-violation$8109$gDo33
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$10505$gDo33))))
                                                          (g$syntax-dispatch$7997$gDo33
                                                            g$t$10505$gDo33
                                                            '_))))
                                                      g$t$10503$gDo33))))
                                                (g$syntax-dispatch$7997$gDo33
                                                  g$t$10503$gDo33
                                                  '()))))
                                            g$t$10491$gDo33))))
                                      (g$syntax-dispatch$7997$gDo33
                                        g$t$10491$gDo33
                                        '(any . any)))))
                                  g$t$10485$gDo33))))
                            (g$syntax-dispatch$7997$gDo33
                              g$t$10485$gDo33
                              '(each-any)))))
                        g$x$10484$gDo33)))))
          (call-with-values
            (case-lambda (() (g$parse$10477$gDo33 g$spec$10476$gDo33)))
            (case-lambda
              ((g$name*$10480$gDo33 g$ver*$10481$gDo33)
               ((case-lambda
                  ((g$ver*$10482$gDo33 g$name*$10483$gDo33)
                   (begin
                     (if (null? g$name*$10483$gDo33)
                       (g$syntax-violation$8109$gDo33
                         '#f
                         '"empty library name"
                         g$spec$10476$gDo33)
                       (void))
                     (values g$name*$10483$gDo33 g$ver*$10482$gDo33))))
                g$ver*$10481$gDo33
                g$name*$10480$gDo33))))))))
   (g$parse-library$8045$gDo33
     g$parse-library$11548$gDo33
     (case-lambda
       ((g$e$10507$gDo33)
        ((case-lambda
           ((g$t$10508$gDo33)
            ((case-lambda
               ((g$ls/false$10509$gDo33)
                (if (if g$ls/false$10509$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$10510$gDo33
                               g$name*$10511$gDo33
                               g$export$10512$gDo33
                               g$exp*$10513$gDo33
                               g$import$10514$gDo33
                               g$imp*$10515$gDo33
                               g$b*$10516$gDo33)
                             (if (eq? (g$syntax->datum$8112$gDo33
                                        g$export$10512$gDo33)
                                      'export)
                               (if (eq? (g$syntax->datum$8112$gDo33
                                          g$import$10514$gDo33)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$8112$gDo33
                                          g$library$10510$gDo33)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$10509$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$10517$gDo33
                         g$name*$10518$gDo33
                         g$export$10519$gDo33
                         g$exp*$10520$gDo33
                         g$import$10521$gDo33
                         g$imp*$10522$gDo33
                         g$b*$10523$gDo33)
                       (values
                         g$name*$10518$gDo33
                         g$exp*$10520$gDo33
                         g$imp*$10522$gDo33
                         g$b*$10523$gDo33)))
                    g$ls/false$10509$gDo33)
                  ((case-lambda
                     ((g$t$10524$gDo33)
                      ((case-lambda
                         ((g$ls/false$10525$gDo33)
                          (if g$ls/false$10525$gDo33
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$8109$gDo33
                                   '#f
                                   '"malformed library"
                                   g$e$10507$gDo33)))
                              g$ls/false$10525$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$10524$gDo33))))
                       (g$syntax-dispatch$7997$gDo33 g$t$10524$gDo33 '_))))
                   g$t$10508$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$10508$gDo33
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$10507$gDo33))))
   (g$parse-import-spec*$8046$gDo33
     g$parse-import-spec*$11549$gDo33
     ((case-lambda
        (()
         (letrec* ((g$idsyn?$10526$gDo33
                     (case-lambda
                       ((g$x$10787$gDo33)
                        (symbol?
                          (g$syntax->datum$8112$gDo33 g$x$10787$gDo33)))))
                   (g$dup-error$10527$gDo33
                     (case-lambda
                       ((g$name$10786$gDo33)
                        (g$syntax-violation$8109$gDo33
                          'import
                          '"two imports with different bindings"
                          g$name$10786$gDo33))))
                   (g$merge-substs$10528$gDo33
                     (case-lambda
                       ((g$s$10777$gDo33 g$subst$10778$gDo33)
                        (letrec* ((g$insert-to-subst$10779$gDo33
                                    (case-lambda
                                      ((g$a$10780$gDo33 g$subst$10781$gDo33)
                                       ((case-lambda
                                          ((g$name$10782$gDo33
                                             g$label$10783$gDo33)
                                           ((case-lambda
                                              ((g$t$10784$gDo33)
                                               (if g$t$10784$gDo33
                                                 ((case-lambda
                                                    ((g$x$10785$gDo33)
                                                     (if (eq? (cdr g$x$10785$gDo33)
                                                              g$label$10783$gDo33)
                                                       g$subst$10781$gDo33
                                                       (g$dup-error$10527$gDo33
                                                         g$name$10782$gDo33))))
                                                  g$t$10784$gDo33)
                                                 (cons
                                                   g$a$10780$gDo33
                                                   g$subst$10781$gDo33))))
                                            (g$assq$5051$gDo33
                                              g$name$10782$gDo33
                                              g$subst$10781$gDo33))))
                                        (car g$a$10780$gDo33)
                                        (cdr g$a$10780$gDo33))))))
                          (if (null? g$s$10777$gDo33)
                            g$subst$10778$gDo33
                            (g$insert-to-subst$10779$gDo33
                              (car g$s$10777$gDo33)
                              (g$merge-substs$10528$gDo33
                                (cdr g$s$10777$gDo33)
                                g$subst$10778$gDo33)))))))
                   (g$exclude*$10529$gDo33
                     (case-lambda
                       ((g$sym*$10753$gDo33 g$subst$10754$gDo33)
                        (letrec* ((g$exclude$10755$gDo33
                                    (case-lambda
                                      ((g$sym$10768$gDo33 g$subst$10769$gDo33)
                                       (if (null? g$subst$10769$gDo33)
                                         (g$syntax-violation$8109$gDo33
                                           'import
                                           '"cannot rename unbound identifier"
                                           g$sym$10768$gDo33)
                                         (if (eq? g$sym$10768$gDo33
                                                  (g$caar$5263$gDo33
                                                    g$subst$10769$gDo33))
                                           (values
                                             (g$cdar$5265$gDo33
                                               g$subst$10769$gDo33)
                                             (cdr g$subst$10769$gDo33))
                                           ((case-lambda
                                              ((g$a$10770$gDo33)
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$exclude$10755$gDo33
                                                      g$sym$10768$gDo33
                                                      (cdr g$subst$10769$gDo33))))
                                                 (case-lambda
                                                   ((g$old$10773$gDo33
                                                      g$subst$10774$gDo33)
                                                    ((case-lambda
                                                       ((g$subst$10775$gDo33
                                                          g$old$10776$gDo33)
                                                        (values
                                                          g$old$10776$gDo33
                                                          (cons
                                                            g$a$10770$gDo33
                                                            g$subst$10775$gDo33))))
                                                     g$subst$10774$gDo33
                                                     g$old$10773$gDo33))))))
                                            (car g$subst$10769$gDo33))))))))
                          (if (null? g$sym*$10753$gDo33)
                            (values '() g$subst$10754$gDo33)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$exclude$10755$gDo33
                                   (car g$sym*$10753$gDo33)
                                   g$subst$10754$gDo33)))
                              (case-lambda
                                ((g$old$10758$gDo33 g$subst$10759$gDo33)
                                 ((case-lambda
                                    ((g$subst$10760$gDo33 g$old$10761$gDo33)
                                     (call-with-values
                                       (case-lambda
                                         (()
                                          (g$exclude*$10529$gDo33
                                            (cdr g$sym*$10753$gDo33)
                                            g$subst$10760$gDo33)))
                                       (case-lambda
                                         ((g$old*$10764$gDo33
                                            g$subst$10765$gDo33)
                                          ((case-lambda
                                             ((g$subst$10766$gDo33
                                                g$old*$10767$gDo33)
                                              (values
                                                (cons
                                                  g$old$10761$gDo33
                                                  g$old*$10767$gDo33)
                                                g$subst$10766$gDo33)))
                                           g$subst$10765$gDo33
                                           g$old*$10764$gDo33))))))
                                  g$subst$10759$gDo33
                                  g$old$10758$gDo33)))))))))
                   (g$find*$10530$gDo33
                     (case-lambda
                       ((g$sym*$10749$gDo33 g$subst$10750$gDo33)
                        (g$map$5063$gDo33
                          (case-lambda
                            ((g$x$10751$gDo33)
                             ((case-lambda
                                ((g$t$10752$gDo33)
                                 (if g$t$10752$gDo33
                                   (cdr g$t$10752$gDo33)
                                   (g$syntax-violation$8109$gDo33
                                     'import
                                     '"cannot find identifier"
                                     g$x$10751$gDo33))))
                              (g$assq$5051$gDo33
                                g$x$10751$gDo33
                                g$subst$10750$gDo33))))
                          g$sym*$10749$gDo33))))
                   (g$rem*$10531$gDo33
                     (case-lambda
                       ((g$sym*$10745$gDo33 g$subst$10746$gDo33)
                        ((letrec ((g$f$10747$gDo33
                                    (case-lambda
                                      ((g$subst$10748$gDo33)
                                       (if (null? g$subst$10748$gDo33)
                                         '()
                                         (if (g$memq$5055$gDo33
                                               (g$caar$5263$gDo33
                                                 g$subst$10748$gDo33)
                                               g$sym*$10745$gDo33)
                                           (g$f$10747$gDo33
                                             (cdr g$subst$10748$gDo33))
                                           (cons
                                             (car g$subst$10748$gDo33)
                                             (g$f$10747$gDo33
                                               (cdr g$subst$10748$gDo33)))))))))
                           g$f$10747$gDo33)
                         g$subst$10746$gDo33))))
                   (g$remove-dups$10532$gDo33
                     (case-lambda
                       ((g$ls$10744$gDo33)
                        (if (null? g$ls$10744$gDo33)
                          '()
                          (if (g$memq$5055$gDo33
                                (car g$ls$10744$gDo33)
                                (cdr g$ls$10744$gDo33))
                            (g$remove-dups$10532$gDo33 (cdr g$ls$10744$gDo33))
                            (cons
                              (car g$ls$10744$gDo33)
                              (g$remove-dups$10532$gDo33
                                (cdr g$ls$10744$gDo33))))))))
                   (g$parse-library-name$10533$gDo33
                     (case-lambda
                       ((g$spec$10628$gDo33)
                        (letrec* ((g$subversion?$10629$gDo33
                                    (case-lambda
                                      ((g$x$10742$gDo33)
                                       ((case-lambda
                                          ((g$x$10743$gDo33)
                                           (if (integer? g$x$10743$gDo33)
                                             (if (exact? g$x$10743$gDo33)
                                               (begin
                                                 '#f
                                                 (>= g$x$10743$gDo33 '0))
                                               '#f)
                                             '#f)))
                                        (g$syntax->datum$8112$gDo33
                                          g$x$10742$gDo33)))))
                                  (g$subversion-pred$10630$gDo33
                                    (case-lambda
                                      ((g$x*$10694$gDo33)
                                       ((case-lambda
                                          ((g$t$10695$gDo33)
                                           ((case-lambda
                                              ((g$ls/false$10696$gDo33)
                                               (if (if g$ls/false$10696$gDo33
                                                     (begin
                                                       '#f
                                                       (apply
                                                         (case-lambda
                                                           ((g$n$10697$gDo33)
                                                            (g$subversion?$10629$gDo33
                                                              g$n$10697$gDo33)))
                                                         g$ls/false$10696$gDo33))
                                                     '#f)
                                                 (apply
                                                   (case-lambda
                                                     ((g$n$10698$gDo33)
                                                      (case-lambda
                                                        ((g$x$10699$gDo33)
                                                         (= g$x$10699$gDo33
                                                            (g$syntax->datum$8112$gDo33
                                                              g$n$10698$gDo33))))))
                                                   g$ls/false$10696$gDo33)
                                                 ((case-lambda
                                                    ((g$t$10700$gDo33)
                                                     ((case-lambda
                                                        ((g$ls/false$10701$gDo33)
                                                         (if (if g$ls/false$10701$gDo33
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$p?$10702$gDo33
                                                                        g$sub*$10703$gDo33)
                                                                      (eq? (g$syntax->datum$8112$gDo33
                                                                             g$p?$10702$gDo33)
                                                                           'and)))
                                                                   g$ls/false$10701$gDo33))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$p?$10704$gDo33
                                                                  g$sub*$10705$gDo33)
                                                                ((case-lambda
                                                                   ((g$p*$10706$gDo33)
                                                                    (case-lambda
                                                                      ((g$x$10707$gDo33)
                                                                       (g$for-all$5061$gDo33
                                                                         (case-lambda
                                                                           ((g$p$10708$gDo33)
                                                                            (g$p$10708$gDo33
                                                                              g$x$10707$gDo33)))
                                                                         g$p*$10706$gDo33)))))
                                                                 (g$map$5063$gDo33
                                                                   g$subversion-pred$10630$gDo33
                                                                   g$sub*$10705$gDo33))))
                                                             g$ls/false$10701$gDo33)
                                                           ((case-lambda
                                                              ((g$t$10709$gDo33)
                                                               ((case-lambda
                                                                  ((g$ls/false$10710$gDo33)
                                                                   (if (if g$ls/false$10710$gDo33
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$p?$10711$gDo33
                                                                                  g$sub*$10712$gDo33)
                                                                                (eq? (g$syntax->datum$8112$gDo33
                                                                                       g$p?$10711$gDo33)
                                                                                     'or)))
                                                                             g$ls/false$10710$gDo33))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p?$10713$gDo33
                                                                            g$sub*$10714$gDo33)
                                                                          ((case-lambda
                                                                             ((g$p*$10715$gDo33)
                                                                              (case-lambda
                                                                                ((g$x$10716$gDo33)
                                                                                 (g$exists$5062$gDo33
                                                                                   (case-lambda
                                                                                     ((g$p$10717$gDo33)
                                                                                      (g$p$10717$gDo33
                                                                                        g$x$10716$gDo33)))
                                                                                   g$p*$10715$gDo33)))))
                                                                           (g$map$5063$gDo33
                                                                             g$subversion-pred$10630$gDo33
                                                                             g$sub*$10714$gDo33))))
                                                                       g$ls/false$10710$gDo33)
                                                                     ((case-lambda
                                                                        ((g$t$10718$gDo33)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10719$gDo33)
                                                                             (if (if g$ls/false$10719$gDo33
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$p?$10720$gDo33
                                                                                            g$sub$10721$gDo33)
                                                                                          (eq? (g$syntax->datum$8112$gDo33
                                                                                                 g$p?$10720$gDo33)
                                                                                               'not)))
                                                                                       g$ls/false$10719$gDo33))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$p?$10722$gDo33
                                                                                      g$sub$10723$gDo33)
                                                                                    ((case-lambda
                                                                                       ((g$p$10724$gDo33)
                                                                                        (case-lambda
                                                                                          ((g$x$10725$gDo33)
                                                                                           (not (g$p$10724$gDo33
                                                                                                  g$x$10725$gDo33))))))
                                                                                     (g$subversion-pred$10630$gDo33
                                                                                       g$sub$10723$gDo33))))
                                                                                 g$ls/false$10719$gDo33)
                                                                               ((case-lambda
                                                                                  ((g$t$10726$gDo33)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10727$gDo33)
                                                                                       (if (if g$ls/false$10727$gDo33
                                                                                             (begin
                                                                                               '#f
                                                                                               (apply
                                                                                                 (case-lambda
                                                                                                   ((g$p?$10728$gDo33
                                                                                                      g$n$10729$gDo33)
                                                                                                    (if (eq? (g$syntax->datum$8112$gDo33
                                                                                                               g$p?$10728$gDo33)
                                                                                                             '<=)
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (g$subversion?$10629$gDo33
                                                                                                          g$n$10729$gDo33))
                                                                                                      '#f)))
                                                                                                 g$ls/false$10727$gDo33))
                                                                                             '#f)
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p?$10730$gDo33
                                                                                                g$n$10731$gDo33)
                                                                                              (case-lambda
                                                                                                ((g$x$10732$gDo33)
                                                                                                 (<= g$x$10732$gDo33
                                                                                                     (g$syntax->datum$8112$gDo33
                                                                                                       g$n$10731$gDo33))))))
                                                                                           g$ls/false$10727$gDo33)
                                                                                         ((case-lambda
                                                                                            ((g$t$10733$gDo33)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10734$gDo33)
                                                                                                 (if (if g$ls/false$10734$gDo33
                                                                                                       (begin
                                                                                                         '#f
                                                                                                         (apply
                                                                                                           (case-lambda
                                                                                                             ((g$p?$10735$gDo33
                                                                                                                g$n$10736$gDo33)
                                                                                                              (if (eq? (g$syntax->datum$8112$gDo33
                                                                                                                         g$p?$10735$gDo33)
                                                                                                                       '>=)
                                                                                                                (begin
                                                                                                                  '#f
                                                                                                                  (g$subversion?$10629$gDo33
                                                                                                                    g$n$10736$gDo33))
                                                                                                                '#f)))
                                                                                                           g$ls/false$10734$gDo33))
                                                                                                       '#f)
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$p?$10737$gDo33
                                                                                                          g$n$10738$gDo33)
                                                                                                        (case-lambda
                                                                                                          ((g$x$10739$gDo33)
                                                                                                           (>= g$x$10739$gDo33
                                                                                                               (g$syntax->datum$8112$gDo33
                                                                                                                 g$n$10738$gDo33))))))
                                                                                                     g$ls/false$10734$gDo33)
                                                                                                   ((case-lambda
                                                                                                      ((g$t$10740$gDo33)
                                                                                                       ((case-lambda
                                                                                                          ((g$ls/false$10741$gDo33)
                                                                                                           (if g$ls/false$10741$gDo33
                                                                                                             (apply
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$syntax-violation$8109$gDo33
                                                                                                                    'import
                                                                                                                    '"invalid sub-version spec"
                                                                                                                    g$spec$10628$gDo33
                                                                                                                    g$x*$10694$gDo33)))
                                                                                                               g$ls/false$10741$gDo33)
                                                                                                             (g$syntax-violation$8109$gDo33
                                                                                                               '#f
                                                                                                               '"invalid syntax"
                                                                                                               g$t$10740$gDo33))))
                                                                                                        (g$syntax-dispatch$7997$gDo33
                                                                                                          g$t$10740$gDo33
                                                                                                          '_))))
                                                                                                    g$t$10733$gDo33))))
                                                                                              (g$syntax-dispatch$7997$gDo33
                                                                                                g$t$10733$gDo33
                                                                                                '(any any)))))
                                                                                          g$t$10726$gDo33))))
                                                                                    (g$syntax-dispatch$7997$gDo33
                                                                                      g$t$10726$gDo33
                                                                                      '(any any)))))
                                                                                g$t$10718$gDo33))))
                                                                          (g$syntax-dispatch$7997$gDo33
                                                                            g$t$10718$gDo33
                                                                            '(any any)))))
                                                                      g$t$10709$gDo33))))
                                                                (g$syntax-dispatch$7997$gDo33
                                                                  g$t$10709$gDo33
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10700$gDo33))))
                                                      (g$syntax-dispatch$7997$gDo33
                                                        g$t$10700$gDo33
                                                        '(any . each-any)))))
                                                  g$t$10695$gDo33))))
                                            (g$syntax-dispatch$7997$gDo33
                                              g$t$10695$gDo33
                                              'any))))
                                        g$x*$10694$gDo33))))
                                  (g$version-pred$10631$gDo33
                                    (case-lambda
                                      ((g$x*$10654$gDo33)
                                       ((case-lambda
                                          ((g$t$10655$gDo33)
                                           ((case-lambda
                                              ((g$ls/false$10656$gDo33)
                                               (if g$ls/false$10656$gDo33
                                                 (apply
                                                   (case-lambda
                                                     (()
                                                      (case-lambda
                                                        ((g$x$10657$gDo33)
                                                         '#t))))
                                                   g$ls/false$10656$gDo33)
                                                 ((case-lambda
                                                    ((g$t$10658$gDo33)
                                                     ((case-lambda
                                                        ((g$ls/false$10659$gDo33)
                                                         (if (if g$ls/false$10659$gDo33
                                                               (begin
                                                                 '#f
                                                                 (apply
                                                                   (case-lambda
                                                                     ((g$c$10660$gDo33
                                                                        g$ver*$10661$gDo33)
                                                                      (eq? (g$syntax->datum$8112$gDo33
                                                                             g$c$10660$gDo33)
                                                                           'and)))
                                                                   g$ls/false$10659$gDo33))
                                                               '#f)
                                                           (apply
                                                             (case-lambda
                                                               ((g$c$10662$gDo33
                                                                  g$ver*$10663$gDo33)
                                                                ((case-lambda
                                                                   ((g$p*$10664$gDo33)
                                                                    (case-lambda
                                                                      ((g$x$10665$gDo33)
                                                                       (g$for-all$5061$gDo33
                                                                         (case-lambda
                                                                           ((g$p$10666$gDo33)
                                                                            (g$p$10666$gDo33
                                                                              g$x$10665$gDo33)))
                                                                         g$p*$10664$gDo33)))))
                                                                 (g$map$5063$gDo33
                                                                   g$version-pred$10631$gDo33
                                                                   g$ver*$10663$gDo33))))
                                                             g$ls/false$10659$gDo33)
                                                           ((case-lambda
                                                              ((g$t$10667$gDo33)
                                                               ((case-lambda
                                                                  ((g$ls/false$10668$gDo33)
                                                                   (if (if g$ls/false$10668$gDo33
                                                                         (begin
                                                                           '#f
                                                                           (apply
                                                                             (case-lambda
                                                                               ((g$c$10669$gDo33
                                                                                  g$ver*$10670$gDo33)
                                                                                (eq? (g$syntax->datum$8112$gDo33
                                                                                       g$c$10669$gDo33)
                                                                                     'or)))
                                                                             g$ls/false$10668$gDo33))
                                                                         '#f)
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$c$10671$gDo33
                                                                            g$ver*$10672$gDo33)
                                                                          ((case-lambda
                                                                             ((g$p*$10673$gDo33)
                                                                              (case-lambda
                                                                                ((g$x$10674$gDo33)
                                                                                 (g$exists$5062$gDo33
                                                                                   (case-lambda
                                                                                     ((g$p$10675$gDo33)
                                                                                      (g$p$10675$gDo33
                                                                                        g$x$10674$gDo33)))
                                                                                   g$p*$10673$gDo33)))))
                                                                           (g$map$5063$gDo33
                                                                             g$version-pred$10631$gDo33
                                                                             g$ver*$10672$gDo33))))
                                                                       g$ls/false$10668$gDo33)
                                                                     ((case-lambda
                                                                        ((g$t$10676$gDo33)
                                                                         ((case-lambda
                                                                            ((g$ls/false$10677$gDo33)
                                                                             (if (if g$ls/false$10677$gDo33
                                                                                   (begin
                                                                                     '#f
                                                                                     (apply
                                                                                       (case-lambda
                                                                                         ((g$c$10678$gDo33
                                                                                            g$ver$10679$gDo33)
                                                                                          (eq? (g$syntax->datum$8112$gDo33
                                                                                                 g$c$10678$gDo33)
                                                                                               'not)))
                                                                                       g$ls/false$10677$gDo33))
                                                                                   '#f)
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$c$10680$gDo33
                                                                                      g$ver$10681$gDo33)
                                                                                    ((case-lambda
                                                                                       ((g$p$10682$gDo33)
                                                                                        (case-lambda
                                                                                          ((g$x$10683$gDo33)
                                                                                           (not (g$p$10682$gDo33
                                                                                                  g$x$10683$gDo33))))))
                                                                                     (g$version-pred$10631$gDo33
                                                                                       g$ver$10681$gDo33))))
                                                                                 g$ls/false$10677$gDo33)
                                                                               ((case-lambda
                                                                                  ((g$t$10684$gDo33)
                                                                                   ((case-lambda
                                                                                      ((g$ls/false$10685$gDo33)
                                                                                       (if g$ls/false$10685$gDo33
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$sub*$10686$gDo33)
                                                                                              ((case-lambda
                                                                                                 ((g$p*$10687$gDo33)
                                                                                                  (case-lambda
                                                                                                    ((g$x$10688$gDo33)
                                                                                                     ((letrec ((g$f$10689$gDo33
                                                                                                                 (case-lambda
                                                                                                                   ((g$p*$10690$gDo33
                                                                                                                      g$x$10691$gDo33)
                                                                                                                    (if (null?
                                                                                                                          g$p*$10690$gDo33)
                                                                                                                      '#t
                                                                                                                      (if (null?
                                                                                                                            g$x$10691$gDo33)
                                                                                                                        '#f
                                                                                                                        (if ((car g$p*$10690$gDo33)
                                                                                                                             (car g$x$10691$gDo33))
                                                                                                                          (begin
                                                                                                                            '#f
                                                                                                                            (g$f$10689$gDo33
                                                                                                                              (cdr g$p*$10690$gDo33)
                                                                                                                              (cdr g$x$10691$gDo33)))
                                                                                                                          '#f)))))))
                                                                                                        g$f$10689$gDo33)
                                                                                                      g$p*$10687$gDo33
                                                                                                      g$x$10688$gDo33)))))
                                                                                               (g$map$5063$gDo33
                                                                                                 g$subversion-pred$10630$gDo33
                                                                                                 g$sub*$10686$gDo33))))
                                                                                           g$ls/false$10685$gDo33)
                                                                                         ((case-lambda
                                                                                            ((g$t$10692$gDo33)
                                                                                             ((case-lambda
                                                                                                ((g$ls/false$10693$gDo33)
                                                                                                 (if g$ls/false$10693$gDo33
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$syntax-violation$8109$gDo33
                                                                                                          'import
                                                                                                          '"invalid version spec"
                                                                                                          g$spec$10628$gDo33
                                                                                                          g$x*$10654$gDo33)))
                                                                                                     g$ls/false$10693$gDo33)
                                                                                                   (g$syntax-violation$8109$gDo33
                                                                                                     '#f
                                                                                                     '"invalid syntax"
                                                                                                     g$t$10692$gDo33))))
                                                                                              (g$syntax-dispatch$7997$gDo33
                                                                                                g$t$10692$gDo33
                                                                                                '_))))
                                                                                          g$t$10684$gDo33))))
                                                                                    (g$syntax-dispatch$7997$gDo33
                                                                                      g$t$10684$gDo33
                                                                                      'each-any))))
                                                                                g$t$10676$gDo33))))
                                                                          (g$syntax-dispatch$7997$gDo33
                                                                            g$t$10676$gDo33
                                                                            '(any any)))))
                                                                      g$t$10667$gDo33))))
                                                                (g$syntax-dispatch$7997$gDo33
                                                                  g$t$10667$gDo33
                                                                  '(any .
                                                                        each-any)))))
                                                            g$t$10658$gDo33))))
                                                      (g$syntax-dispatch$7997$gDo33
                                                        g$t$10658$gDo33
                                                        '(any . each-any)))))
                                                  g$t$10655$gDo33))))
                                            (g$syntax-dispatch$7997$gDo33
                                              g$t$10655$gDo33
                                              '()))))
                                        g$x*$10654$gDo33)))))
                          ((letrec ((g$f$10632$gDo33
                                      (case-lambda
                                        ((g$x$10633$gDo33)
                                         ((case-lambda
                                            ((g$t$10634$gDo33)
                                             ((case-lambda
                                                ((g$ls/false$10635$gDo33)
                                                 (if g$ls/false$10635$gDo33
                                                   (apply
                                                     (case-lambda
                                                       ((g$version-spec*$10636$gDo33)
                                                        (values
                                                          '()
                                                          (g$version-pred$10631$gDo33
                                                            g$version-spec*$10636$gDo33))))
                                                     g$ls/false$10635$gDo33)
                                                   ((case-lambda
                                                      ((g$t$10637$gDo33)
                                                       ((case-lambda
                                                          ((g$ls/false$10638$gDo33)
                                                           (if (if g$ls/false$10638$gDo33
                                                                 (begin
                                                                   '#f
                                                                   (apply
                                                                     (case-lambda
                                                                       ((g$x$10639$gDo33
                                                                          g$x*$10640$gDo33)
                                                                        (g$idsyn?$10526$gDo33
                                                                          g$x$10639$gDo33)))
                                                                     g$ls/false$10638$gDo33))
                                                                 '#f)
                                                             (apply
                                                               (case-lambda
                                                                 ((g$x$10641$gDo33
                                                                    g$x*$10642$gDo33)
                                                                  (call-with-values
                                                                    (case-lambda
                                                                      (()
                                                                       (g$f$10632$gDo33
                                                                         g$x*$10642$gDo33)))
                                                                    (case-lambda
                                                                      ((g$name$10645$gDo33
                                                                         g$pred$10646$gDo33)
                                                                       ((case-lambda
                                                                          ((g$pred$10647$gDo33
                                                                             g$name$10648$gDo33)
                                                                           (values
                                                                             (cons
                                                                               (g$syntax->datum$8112$gDo33
                                                                                 g$x$10641$gDo33)
                                                                               g$name$10648$gDo33)
                                                                             g$pred$10647$gDo33)))
                                                                        g$pred$10646$gDo33
                                                                        g$name$10645$gDo33))))))
                                                               g$ls/false$10638$gDo33)
                                                             ((case-lambda
                                                                ((g$t$10649$gDo33)
                                                                 ((case-lambda
                                                                    ((g$ls/false$10650$gDo33)
                                                                     (if g$ls/false$10650$gDo33
                                                                       (apply
                                                                         (case-lambda
                                                                           (()
                                                                            (values
                                                                              '()
                                                                              (case-lambda
                                                                                ((g$x$10651$gDo33)
                                                                                 '#t)))))
                                                                         g$ls/false$10650$gDo33)
                                                                       ((case-lambda
                                                                          ((g$t$10652$gDo33)
                                                                           ((case-lambda
                                                                              ((g$ls/false$10653$gDo33)
                                                                               (if g$ls/false$10653$gDo33
                                                                                 (apply
                                                                                   (case-lambda
                                                                                     (()
                                                                                      (g$syntax-violation$8109$gDo33
                                                                                        '#f
                                                                                        '"invalid import spec"
                                                                                        g$spec$10628$gDo33)))
                                                                                   g$ls/false$10653$gDo33)
                                                                                 (g$syntax-violation$8109$gDo33
                                                                                   '#f
                                                                                   '"invalid syntax"
                                                                                   g$t$10652$gDo33))))
                                                                            (g$syntax-dispatch$7997$gDo33
                                                                              g$t$10652$gDo33
                                                                              '_))))
                                                                        g$t$10649$gDo33))))
                                                                  (g$syntax-dispatch$7997$gDo33
                                                                    g$t$10649$gDo33
                                                                    '()))))
                                                              g$t$10637$gDo33))))
                                                        (g$syntax-dispatch$7997$gDo33
                                                          g$t$10637$gDo33
                                                          '(any . any)))))
                                                    g$t$10634$gDo33))))
                                              (g$syntax-dispatch$7997$gDo33
                                                g$t$10634$gDo33
                                                '(each-any)))))
                                          g$x$10633$gDo33)))))
                             g$f$10632$gDo33)
                           g$spec$10628$gDo33)))))
                   (g$import-library$10534$gDo33
                     (case-lambda
                       ((g$spec*$10620$gDo33)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$parse-library-name$10533$gDo33
                               g$spec*$10620$gDo33)))
                          (case-lambda
                            ((g$name$10623$gDo33 g$pred$10624$gDo33)
                             ((case-lambda
                                ((g$pred$10625$gDo33 g$name$10626$gDo33)
                                 (begin
                                   (if (null? g$name$10626$gDo33)
                                     (g$syntax-violation$8109$gDo33
                                       'import
                                       '"empty library name"
                                       g$spec*$10620$gDo33)
                                     (void))
                                   ((case-lambda
                                      ((g$lib$10627$gDo33)
                                       (begin
                                         (if (not g$lib$10627$gDo33)
                                           (g$syntax-violation$8109$gDo33
                                             'import
                                             '"cannot find library with required name"
                                             g$name$10626$gDo33)
                                           (void))
                                         (if (not (g$pred$10625$gDo33
                                                    (g$library-version$7482$gDo33
                                                      g$lib$10627$gDo33)))
                                           (g$syntax-violation$8109$gDo33
                                             'import
                                             '"library does not satisfy version specification"
                                             g$spec*$10620$gDo33
                                             g$lib$10627$gDo33)
                                           (void))
                                         ((g$imp-collector$8051$gDo33)
                                          g$lib$10627$gDo33)
                                         (g$library-subst$7486$gDo33
                                           g$lib$10627$gDo33))))
                                    (g$find-library-by-name$7522$gDo33
                                      g$name$10626$gDo33)))))
                              g$pred$10624$gDo33
                              g$name$10623$gDo33)))))))
                   (g$get-import$10535$gDo33
                     (case-lambda
                       ((g$spec$10549$gDo33)
                        ((case-lambda
                           ((g$t$10550$gDo33)
                            ((case-lambda
                               ((g$ls/false$10551$gDo33)
                                (if (if g$ls/false$10551$gDo33
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$x$10552$gDo33 g$x*$10553$gDo33)
                                             (not (g$memq$5055$gDo33
                                                    (g$syntax->datum$8112$gDo33
                                                      g$x$10552$gDo33)
                                                    '(for rename
                                                          except
                                                          only
                                                          prefix
                                                          library)))))
                                          g$ls/false$10551$gDo33))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$x$10554$gDo33 g$x*$10555$gDo33)
                                       (g$import-library$10534$gDo33
                                         (cons
                                           g$x$10554$gDo33
                                           g$x*$10555$gDo33))))
                                    g$ls/false$10551$gDo33)
                                  ((case-lambda
                                     ((g$t$10556$gDo33)
                                      ((case-lambda
                                         ((g$ls/false$10557$gDo33)
                                          (if (if g$ls/false$10557$gDo33
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$rename$10558$gDo33
                                                         g$isp$10559$gDo33
                                                         g$old*$10560$gDo33
                                                         g$new*$10561$gDo33)
                                                       (if (eq? (g$syntax->datum$8112$gDo33
                                                                  g$rename$10558$gDo33)
                                                                'rename)
                                                         (if (g$for-all$5061$gDo33
                                                               g$idsyn?$10526$gDo33
                                                               g$old*$10560$gDo33)
                                                           (begin
                                                             '#f
                                                             (g$for-all$5061$gDo33
                                                               g$idsyn?$10526$gDo33
                                                               g$new*$10561$gDo33))
                                                           '#f)
                                                         '#f)))
                                                    g$ls/false$10557$gDo33))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$rename$10562$gDo33
                                                   g$isp$10563$gDo33
                                                   g$old*$10564$gDo33
                                                   g$new*$10565$gDo33)
                                                 ((case-lambda
                                                    ((g$subst$10566$gDo33
                                                       g$old*$10567$gDo33
                                                       g$new*$10568$gDo33)
                                                     ((case-lambda
                                                        ((g$old-label*$10569$gDo33)
                                                         ((case-lambda
                                                            ((g$subst$10570$gDo33)
                                                             (g$merge-substs$10528$gDo33
                                                               (g$map$5063$gDo33
                                                                 cons
                                                                 g$new*$10568$gDo33
                                                                 g$old-label*$10569$gDo33)
                                                               g$subst$10570$gDo33)))
                                                          (g$rem*$10531$gDo33
                                                            g$old*$10567$gDo33
                                                            g$subst$10566$gDo33))))
                                                      (g$find*$10530$gDo33
                                                        g$old*$10567$gDo33
                                                        g$subst$10566$gDo33))))
                                                  (g$get-import$10535$gDo33
                                                    g$isp$10563$gDo33)
                                                  (g$map$5063$gDo33
                                                    g$syntax->datum$8112$gDo33
                                                    g$old*$10564$gDo33)
                                                  (g$map$5063$gDo33
                                                    g$syntax->datum$8112$gDo33
                                                    g$new*$10565$gDo33))))
                                              g$ls/false$10557$gDo33)
                                            ((case-lambda
                                               ((g$t$10571$gDo33)
                                                ((case-lambda
                                                   ((g$ls/false$10572$gDo33)
                                                    (if (if g$ls/false$10572$gDo33
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$except$10573$gDo33
                                                                   g$isp$10574$gDo33
                                                                   g$sym*$10575$gDo33)
                                                                 (if (eq? (g$syntax->datum$8112$gDo33
                                                                            g$except$10573$gDo33)
                                                                          'except)
                                                                   (begin
                                                                     '#f
                                                                     (g$for-all$5061$gDo33
                                                                       g$idsyn?$10526$gDo33
                                                                       g$sym*$10575$gDo33))
                                                                   '#f)))
                                                              g$ls/false$10572$gDo33))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$except$10576$gDo33
                                                             g$isp$10577$gDo33
                                                             g$sym*$10578$gDo33)
                                                           ((case-lambda
                                                              ((g$subst$10579$gDo33)
                                                               (g$rem*$10531$gDo33
                                                                 (g$map$5063$gDo33
                                                                   g$syntax->datum$8112$gDo33
                                                                   g$sym*$10578$gDo33)
                                                                 g$subst$10579$gDo33)))
                                                            (g$get-import$10535$gDo33
                                                              g$isp$10577$gDo33))))
                                                        g$ls/false$10572$gDo33)
                                                      ((case-lambda
                                                         ((g$t$10580$gDo33)
                                                          ((case-lambda
                                                             ((g$ls/false$10581$gDo33)
                                                              (if (if g$ls/false$10581$gDo33
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$only$10582$gDo33
                                                                             g$isp$10583$gDo33
                                                                             g$sym*$10584$gDo33)
                                                                           (if (eq? (g$syntax->datum$8112$gDo33
                                                                                      g$only$10582$gDo33)
                                                                                    'only)
                                                                             (begin
                                                                               '#f
                                                                               (g$for-all$5061$gDo33
                                                                                 g$idsyn?$10526$gDo33
                                                                                 g$sym*$10584$gDo33))
                                                                             '#f)))
                                                                        g$ls/false$10581$gDo33))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$only$10585$gDo33
                                                                       g$isp$10586$gDo33
                                                                       g$sym*$10587$gDo33)
                                                                     ((case-lambda
                                                                        ((g$subst$10588$gDo33
                                                                           g$sym*$10589$gDo33)
                                                                         ((case-lambda
                                                                            ((g$sym*$10590$gDo33)
                                                                             ((case-lambda
                                                                                ((g$lab*$10591$gDo33)
                                                                                 (g$map$5063$gDo33
                                                                                   cons
                                                                                   g$sym*$10590$gDo33
                                                                                   g$lab*$10591$gDo33)))
                                                                              (g$find*$10530$gDo33
                                                                                g$sym*$10590$gDo33
                                                                                g$subst$10588$gDo33))))
                                                                          (g$remove-dups$10532$gDo33
                                                                            g$sym*$10589$gDo33))))
                                                                      (g$get-import$10535$gDo33
                                                                        g$isp$10586$gDo33)
                                                                      (g$map$5063$gDo33
                                                                        g$syntax->datum$8112$gDo33
                                                                        g$sym*$10587$gDo33))))
                                                                  g$ls/false$10581$gDo33)
                                                                ((case-lambda
                                                                   ((g$t$10592$gDo33)
                                                                    ((case-lambda
                                                                       ((g$ls/false$10593$gDo33)
                                                                        (if (if g$ls/false$10593$gDo33
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$prefix$10594$gDo33
                                                                                       g$isp$10595$gDo33
                                                                                       g$p$10596$gDo33)
                                                                                     (if (eq? (g$syntax->datum$8112$gDo33
                                                                                                g$prefix$10594$gDo33)
                                                                                              'prefix)
                                                                                       (begin
                                                                                         '#f
                                                                                         (g$idsyn?$10526$gDo33
                                                                                           g$p$10596$gDo33))
                                                                                       '#f)))
                                                                                  g$ls/false$10593$gDo33))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$prefix$10597$gDo33
                                                                                 g$isp$10598$gDo33
                                                                                 g$p$10599$gDo33)
                                                                               ((case-lambda
                                                                                  ((g$subst$10600$gDo33
                                                                                     g$prefix$10601$gDo33)
                                                                                   (g$map$5063$gDo33
                                                                                     (case-lambda
                                                                                       ((g$x$10602$gDo33)
                                                                                        (cons
                                                                                          (string->symbol
                                                                                            (string-append
                                                                                              g$prefix$10601$gDo33
                                                                                              (symbol->string
                                                                                                (car g$x$10602$gDo33))))
                                                                                          (cdr g$x$10602$gDo33))))
                                                                                     g$subst$10600$gDo33)))
                                                                                (g$get-import$10535$gDo33
                                                                                  g$isp$10598$gDo33)
                                                                                (symbol->string
                                                                                  (g$syntax->datum$8112$gDo33
                                                                                    g$p$10599$gDo33)))))
                                                                            g$ls/false$10593$gDo33)
                                                                          ((case-lambda
                                                                             ((g$t$10603$gDo33)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$10604$gDo33)
                                                                                  (if (if g$ls/false$10604$gDo33
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$library$10605$gDo33
                                                                                                 g$spec*$10606$gDo33)
                                                                                               (eq? (g$syntax->datum$8112$gDo33
                                                                                                      g$library$10605$gDo33)
                                                                                                    'library)))
                                                                                            g$ls/false$10604$gDo33))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$library$10607$gDo33
                                                                                           g$spec*$10608$gDo33)
                                                                                         (g$import-library$10534$gDo33
                                                                                           g$spec*$10608$gDo33)))
                                                                                      g$ls/false$10604$gDo33)
                                                                                    ((case-lambda
                                                                                       ((g$t$10609$gDo33)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$10610$gDo33)
                                                                                            (if (if g$ls/false$10610$gDo33
                                                                                                  (begin
                                                                                                    '#f
                                                                                                    (apply
                                                                                                      (case-lambda
                                                                                                        ((g$for$10611$gDo33
                                                                                                           g$isp$10612$gDo33
                                                                                                           g$rest$10613$gDo33)
                                                                                                         (eq? (g$syntax->datum$8112$gDo33
                                                                                                                g$for$10611$gDo33)
                                                                                                              'for)))
                                                                                                      g$ls/false$10610$gDo33))
                                                                                                  '#f)
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$for$10614$gDo33
                                                                                                     g$isp$10615$gDo33
                                                                                                     g$rest$10616$gDo33)
                                                                                                   (g$get-import$10535$gDo33
                                                                                                     g$isp$10615$gDo33)))
                                                                                                g$ls/false$10610$gDo33)
                                                                                              ((case-lambda
                                                                                                 ((g$t$10617$gDo33)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$10618$gDo33)
                                                                                                      (if g$ls/false$10618$gDo33
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$spec$10619$gDo33)
                                                                                                             (g$syntax-violation$8109$gDo33
                                                                                                               'import
                                                                                                               '"invalid import spec"
                                                                                                               g$spec$10619$gDo33)))
                                                                                                          g$ls/false$10618$gDo33)
                                                                                                        (g$syntax-violation$8109$gDo33
                                                                                                          '#f
                                                                                                          '"invalid syntax"
                                                                                                          g$t$10617$gDo33))))
                                                                                                   (g$syntax-dispatch$7997$gDo33
                                                                                                     g$t$10617$gDo33
                                                                                                     'any))))
                                                                                               g$t$10609$gDo33))))
                                                                                         (g$syntax-dispatch$7997$gDo33
                                                                                           g$t$10609$gDo33
                                                                                           '(any any
                                                                                                 .
                                                                                                 any)))))
                                                                                     g$t$10603$gDo33))))
                                                                               (g$syntax-dispatch$7997$gDo33
                                                                                 g$t$10603$gDo33
                                                                                 '(any each-any)))))
                                                                           g$t$10592$gDo33))))
                                                                     (g$syntax-dispatch$7997$gDo33
                                                                       g$t$10592$gDo33
                                                                       '(any any
                                                                             any)))))
                                                                 g$t$10580$gDo33))))
                                                           (g$syntax-dispatch$7997$gDo33
                                                             g$t$10580$gDo33
                                                             '(any any
                                                                   .
                                                                   each-any)))))
                                                       g$t$10571$gDo33))))
                                                 (g$syntax-dispatch$7997$gDo33
                                                   g$t$10571$gDo33
                                                   '(any any . each-any)))))
                                             g$t$10556$gDo33))))
                                       (g$syntax-dispatch$7997$gDo33
                                         g$t$10556$gDo33
                                         '(any any . #(each (any any)))))))
                                   g$t$10550$gDo33))))
                             (g$syntax-dispatch$7997$gDo33
                               g$t$10550$gDo33
                               '(any . each-any)))))
                         g$spec$10549$gDo33))))
                   (g$add-imports!$10536$gDo33
                     (case-lambda
                       ((g$imp$10541$gDo33 g$h$10542$gDo33)
                        ((case-lambda
                           ((g$subst$10543$gDo33)
                            (g$for-each$5064$gDo33
                              (case-lambda
                                ((g$x$10544$gDo33)
                                 ((case-lambda
                                    ((g$name$10545$gDo33 g$label$10546$gDo33)
                                     ((case-lambda
                                        ((g$t$10547$gDo33)
                                         (if g$t$10547$gDo33
                                           ((case-lambda
                                              ((g$l$10548$gDo33)
                                               (if (not (eq? g$l$10548$gDo33
                                                             g$label$10546$gDo33))
                                                 (g$dup-error$10527$gDo33
                                                   g$name$10545$gDo33)
                                                 (void))))
                                            g$t$10547$gDo33)
                                           (g$hashtable-set!$5542$gDo33
                                             g$h$10542$gDo33
                                             g$name$10545$gDo33
                                             g$label$10546$gDo33))))
                                      (g$hashtable-ref$5541$gDo33
                                        g$h$10542$gDo33
                                        g$name$10545$gDo33
                                        '#f))))
                                  (car g$x$10544$gDo33)
                                  (cdr g$x$10544$gDo33))))
                              g$subst$10543$gDo33)))
                         (g$get-import$10535$gDo33 g$imp$10541$gDo33))))))
           (case-lambda
             ((g$imp*$10537$gDo33)
              ((letrec ((g$f$10538$gDo33
                          (case-lambda
                            ((g$imp*$10539$gDo33 g$h$10540$gDo33)
                             (if (null? g$imp*$10539$gDo33)
                               (hashtable-entries g$h$10540$gDo33)
                               (begin
                                 (g$add-imports!$10536$gDo33
                                   (car g$imp*$10539$gDo33)
                                   g$h$10540$gDo33)
                                 (g$f$10538$gDo33
                                   (cdr g$imp*$10539$gDo33)
                                   g$h$10540$gDo33)))))))
                 g$f$10538$gDo33)
               g$imp*$10537$gDo33
               (g$make-eq-hashtable$5538$gDo33)))))))))
   (g$make-top-rib$8047$gDo33
     g$make-top-rib$11550$gDo33
     (case-lambda
       ((g$names$10788$gDo33 g$labels$10789$gDo33)
        ((case-lambda
           ((g$rib$10790$gDo33)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10791$gDo33 g$label$10792$gDo33)
                   (begin
                     (if (not (symbol? g$name$10791$gDo33))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10791$gDo33)
                       (void))
                     (g$extend-rib/nc!$7683$gDo33
                       g$rib$10790$gDo33
                       (g$make-stx$7692$gDo33
                         g$name$10791$gDo33
                         g$top-mark*$7656$gDo33
                         '()
                         '())
                       g$label$10792$gDo33))))
                g$names$10788$gDo33
                g$labels$10789$gDo33)
              g$rib$10790$gDo33)))
         (g$make-cache-rib$7680$gDo33)))))
   (g$make-collector$8048$gDo33
     g$make-collector$11551$gDo33
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10793$gDo33)
            (case-lambda
              (() g$ls$10793$gDo33)
              ((g$x$10794$gDo33)
               (set! g$ls$10793$gDo33
                 (g$set-cons$7653$gDo33 g$x$10794$gDo33 g$ls$10793$gDo33))))))
         '()))))
   (g$inv-collector$8049$gDo33
     g$inv-collector$11552$gDo33
     (g$make-parameter$6991$gDo33
       (case-lambda
         (g$args$10795$gDo33
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10796$gDo33)
          (begin
            (if (not (procedure? g$x$10796$gDo33))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10796$gDo33)
              (void))
            g$x$10796$gDo33)))))
   (g$vis-collector$8050$gDo33
     g$vis-collector$11553$gDo33
     (g$make-parameter$6991$gDo33
       (case-lambda
         (g$args$10797$gDo33
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10798$gDo33)
          (begin
            (if (not (procedure? g$x$10798$gDo33))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10798$gDo33)
              (void))
            g$x$10798$gDo33)))))
   (g$imp-collector$8051$gDo33
     g$imp-collector$11554$gDo33
     (g$make-parameter$6991$gDo33
       (case-lambda
         (g$args$10799$gDo33
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10800$gDo33)
          (begin
            (if (not (procedure? g$x$10800$gDo33))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10800$gDo33)
              (void))
            g$x$10800$gDo33)))))
   (g$chi-library-internal$8052$gDo33
     g$chi-library-internal$11555$gDo33
     (case-lambda
       ((g$e*$10801$gDo33 g$rib$10802$gDo33 g$mix?$10803$gDo33)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8041$gDo33
               g$e*$10801$gDo33
               '()
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10802$gDo33
               g$mix?$10803$gDo33
               '#t)))
          (case-lambda
            ((g$e*$10812$gDo33
               g$r$10813$gDo33
               g$mr$10814$gDo33
               g$lex*$10815$gDo33
               g$rhs*$10816$gDo33
               g$mod**$10817$gDo33
               g$_kwd*$10818$gDo33
               g$exp*$10819$gDo33)
             ((case-lambda
                ((g$exp*$10820$gDo33
                   g$_kwd*$10821$gDo33
                   g$mod**$10822$gDo33
                   g$rhs*$10823$gDo33
                   g$lex*$10824$gDo33
                   g$mr$10825$gDo33
                   g$r$10826$gDo33
                   g$e*$10827$gDo33)
                 (values
                   (append
                     (apply append (reverse g$mod**$10822$gDo33))
                     g$e*$10827$gDo33)
                   g$r$10826$gDo33
                   g$mr$10825$gDo33
                   (reverse g$lex*$10824$gDo33)
                   (reverse g$rhs*$10823$gDo33)
                   g$exp*$10820$gDo33)))
              g$exp*$10819$gDo33
              g$_kwd*$10818$gDo33
              g$mod**$10817$gDo33
              g$rhs*$10816$gDo33
              g$lex*$10815$gDo33
              g$mr$10814$gDo33
              g$r$10813$gDo33
              g$e*$10812$gDo33)))))))
   (g$chi-interaction-expr$8053$gDo33
     g$chi-interaction-expr$11556$gDo33
     (case-lambda
       ((g$e$10828$gDo33 g$rib$10829$gDo33 g$r$10830$gDo33)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$8041$gDo33
               (list g$e$10828$gDo33)
               g$r$10830$gDo33
               g$r$10830$gDo33
               '()
               '()
               '()
               '()
               '()
               g$rib$10829$gDo33
               '#t
               '#f)))
          (case-lambda
            ((g$e*$10839$gDo33
               g$r$10840$gDo33
               g$mr$10841$gDo33
               g$lex*$10842$gDo33
               g$rhs*$10843$gDo33
               g$mod**$10844$gDo33
               g$_kwd*$10845$gDo33
               g$_exp*$10846$gDo33)
             ((case-lambda
                ((g$_exp*$10847$gDo33
                   g$_kwd*$10848$gDo33
                   g$mod**$10849$gDo33
                   g$rhs*$10850$gDo33
                   g$lex*$10851$gDo33
                   g$mr$10852$gDo33
                   g$r$10853$gDo33
                   g$e*$10854$gDo33)
                 ((case-lambda
                    ((g$e*$10855$gDo33)
                     ((case-lambda
                        ((g$e$10856$gDo33)
                         (values g$e$10856$gDo33 g$r$10853$gDo33)))
                      (if (null? g$e*$10855$gDo33)
                        (g$build-void$7649$gDo33)
                        (if (null? (cdr g$e*$10855$gDo33))
                          (car g$e*$10855$gDo33)
                          (g$build-sequence$7648$gDo33
                            '#f
                            g$e*$10855$gDo33))))))
                  (g$expand-interaction-rhs*/init*$8022$gDo33
                    (reverse g$lex*$10851$gDo33)
                    (reverse g$rhs*$10850$gDo33)
                    (append
                      (apply append (reverse g$mod**$10849$gDo33))
                      g$e*$10854$gDo33)
                    g$r$10853$gDo33
                    g$mr$10852$gDo33))))
              g$_exp*$10846$gDo33
              g$_kwd*$10845$gDo33
              g$mod**$10844$gDo33
              g$rhs*$10843$gDo33
              g$lex*$10842$gDo33
              g$mr$10841$gDo33
              g$r$10840$gDo33
              g$e*$10839$gDo33)))))))
   (g$library-body-expander$8054$gDo33
     g$library-body-expander$11557$gDo33
     (case-lambda
       ((g$name$10857$gDo33
          g$main-exp*$10858$gDo33
          g$imp*$10859$gDo33
          g$b*$10860$gDo33
          g$mix?$10861$gDo33)
        (letrec* ((g$itc$10862$gDo33 (g$make-collector$8048$gDo33)))
          ((case-lambda
             ((g$imp-collector$10867$gDo33
                g$top-level-context$10868$gDo33
                g$imp-collector$10869$gDo33
                g$top-level-context$10870$gDo33)
              ((case-lambda
                 ((g$swap$10871$gDo33)
                  (dynamic-wind
                    g$swap$10871$gDo33
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-import-spec*$8046$gDo33
                              g$imp*$10859$gDo33)))
                         (case-lambda
                           ((g$subst-names$10874$gDo33
                              g$subst-labels$10875$gDo33)
                            ((case-lambda
                               ((g$subst-labels$10876$gDo33
                                  g$subst-names$10877$gDo33)
                                ((case-lambda
                                   ((g$rib$10878$gDo33)
                                    (letrec* ((g$wrap$10879$gDo33
                                                (case-lambda
                                                  ((g$x$10941$gDo33)
                                                   (g$make-stx$7692$gDo33
                                                     g$x$10941$gDo33
                                                     g$top-mark*$7656$gDo33
                                                     (list g$rib$10878$gDo33)
                                                     '())))))
                                      ((case-lambda
                                         ((g$b*$10880$gDo33
                                            g$main-exp*$10881$gDo33
                                            g$rtc$10882$gDo33
                                            g$vtc$10883$gDo33)
                                          ((case-lambda
                                             ((g$inv-collector$10888$gDo33
                                                g$vis-collector$10889$gDo33
                                                g$inv-collector$10890$gDo33
                                                g$vis-collector$10891$gDo33)
                                              ((case-lambda
                                                 ((g$swap$10892$gDo33)
                                                  (dynamic-wind
                                                    g$swap$10892$gDo33
                                                    (case-lambda
                                                      (()
                                                       (call-with-values
                                                         (case-lambda
                                                           (()
                                                            (g$chi-library-internal$8052$gDo33
                                                              g$b*$10880$gDo33
                                                              g$rib$10878$gDo33
                                                              g$mix?$10861$gDo33)))
                                                         (case-lambda
                                                           ((g$init*$10899$gDo33
                                                              g$r$10900$gDo33
                                                              g$mr$10901$gDo33
                                                              g$lex*$10902$gDo33
                                                              g$rhs*$10903$gDo33
                                                              g$internal-exp*$10904$gDo33)
                                                            ((case-lambda
                                                               ((g$internal-exp*$10905$gDo33
                                                                  g$rhs*$10906$gDo33
                                                                  g$lex*$10907$gDo33
                                                                  g$mr$10908$gDo33
                                                                  g$r$10909$gDo33
                                                                  g$init*$10910$gDo33)
                                                                (call-with-values
                                                                  (case-lambda
                                                                    (()
                                                                     (g$parse-exports$8043$gDo33
                                                                       (append
                                                                         g$main-exp*$10881$gDo33
                                                                         g$internal-exp*$10905$gDo33))))
                                                                  (case-lambda
                                                                    ((g$exp-name*$10913$gDo33
                                                                       g$exp-id*$10914$gDo33)
                                                                     ((case-lambda
                                                                        ((g$exp-id*$10915$gDo33
                                                                           g$exp-name*$10916$gDo33)
                                                                         (begin
                                                                           (g$seal-rib!$7685$gDo33
                                                                             g$rib$10878$gDo33)
                                                                           ((case-lambda
                                                                              ((g$init*$10917$gDo33)
                                                                               ((case-lambda
                                                                                  ((g$rhs*$10918$gDo33)
                                                                                   (begin
                                                                                     (g$unseal-rib!$7686$gDo33
                                                                                       g$rib$10878$gDo33)
                                                                                     ((case-lambda
                                                                                        ((g$loc*$10919$gDo33
                                                                                           g$export-subst$10920$gDo33)
                                                                                         (letrec* ((g$errstr$10921$gDo33
                                                                                                     '"attempt to export mutated variable"))
                                                                                           (call-with-values
                                                                                             (case-lambda
                                                                                               (()
                                                                                                (g$make-export-env/macros$8098$gDo33
                                                                                                  g$lex*$10907$gDo33
                                                                                                  g$loc*$10919$gDo33
                                                                                                  g$r$10909$gDo33)))
                                                                                             (case-lambda
                                                                                               ((g$export-env$10925$gDo33
                                                                                                  g$global*$10926$gDo33
                                                                                                  g$macro*$10927$gDo33)
                                                                                                ((case-lambda
                                                                                                   ((g$macro*$10928$gDo33
                                                                                                      g$global*$10929$gDo33
                                                                                                      g$export-env$10930$gDo33)
                                                                                                    (begin
                                                                                                      (g$for-each$5064$gDo33
                                                                                                        (case-lambda
                                                                                                          ((g$s$10931$gDo33)
                                                                                                           ((case-lambda
                                                                                                              ((g$name$10932$gDo33
                                                                                                                 g$label$10933$gDo33)
                                                                                                               ((case-lambda
                                                                                                                  ((g$p$10934$gDo33)
                                                                                                                   (if g$p$10934$gDo33
                                                                                                                     ((case-lambda
                                                                                                                        ((g$b$10935$gDo33)
                                                                                                                         ((case-lambda
                                                                                                                            ((g$type$10936$gDo33)
                                                                                                                             (if (eq? g$type$10936$gDo33
                                                                                                                                      'mutable)
                                                                                                                               (g$syntax-violation$8109$gDo33
                                                                                                                                 'export
                                                                                                                                 g$errstr$10921$gDo33
                                                                                                                                 g$name$10932$gDo33)
                                                                                                                               (void))))
                                                                                                                          (car g$b$10935$gDo33))))
                                                                                                                      (cdr g$p$10934$gDo33))
                                                                                                                     (void))))
                                                                                                                (g$assq$5051$gDo33
                                                                                                                  g$label$10933$gDo33
                                                                                                                  g$export-env$10930$gDo33))))
                                                                                                            (car g$s$10931$gDo33)
                                                                                                            (cdr g$s$10931$gDo33))))
                                                                                                        g$export-subst$10920$gDo33)
                                                                                                      ((case-lambda
                                                                                                         ((g$invoke-body$10937$gDo33
                                                                                                            g$invoke-definitions$10938$gDo33)
                                                                                                          (values
                                                                                                            (g$itc$10862$gDo33)
                                                                                                            (g$rtc$10882$gDo33)
                                                                                                            (g$vtc$10883$gDo33)
                                                                                                            (g$build-sequence$7648$gDo33
                                                                                                              '#f
                                                                                                              (append
                                                                                                                g$invoke-definitions$10938$gDo33
                                                                                                                (list
                                                                                                                  g$invoke-body$10937$gDo33)))
                                                                                                            g$macro*$10928$gDo33
                                                                                                            g$export-subst$10920$gDo33
                                                                                                            g$export-env$10930$gDo33)))
                                                                                                       (g$build-library-letrec*$7652$gDo33
                                                                                                         '#f
                                                                                                         g$name$10857$gDo33
                                                                                                         g$lex*$10907$gDo33
                                                                                                         g$loc*$10919$gDo33
                                                                                                         g$rhs*$10918$gDo33
                                                                                                         (if (null?
                                                                                                               g$init*$10917$gDo33)
                                                                                                           (g$build-void$7649$gDo33)
                                                                                                           (g$build-sequence$7648$gDo33
                                                                                                             '#f
                                                                                                             g$init*$10917$gDo33)))
                                                                                                       (g$map$5063$gDo33
                                                                                                         g$build-global-define$7644$gDo33
                                                                                                         (g$map$5063$gDo33
                                                                                                           cdr
                                                                                                           g$global*$10929$gDo33))))))
                                                                                                 g$macro*$10927$gDo33
                                                                                                 g$global*$10926$gDo33
                                                                                                 g$export-env$10925$gDo33)))))))
                                                                                      (g$map$5063$gDo33
                                                                                        g$gen-global$7659$gDo33
                                                                                        g$lex*$10907$gDo33)
                                                                                      (g$make-export-subst$8097$gDo33
                                                                                        g$exp-name*$10916$gDo33
                                                                                        g$exp-id*$10915$gDo33)))))
                                                                                (g$chi-rhs*$8023$gDo33
                                                                                  g$rhs*$10906$gDo33
                                                                                  g$r$10909$gDo33
                                                                                  g$mr$10908$gDo33))))
                                                                            (g$chi-expr*$8013$gDo33
                                                                              g$init*$10910$gDo33
                                                                              g$r$10909$gDo33
                                                                              g$mr$10908$gDo33)))))
                                                                      g$exp-id*$10914$gDo33
                                                                      g$exp-name*$10913$gDo33))))))
                                                             g$internal-exp*$10904$gDo33
                                                             g$rhs*$10903$gDo33
                                                             g$lex*$10902$gDo33
                                                             g$mr$10901$gDo33
                                                             g$r$10900$gDo33
                                                             g$init*$10899$gDo33))))))
                                                    g$swap$10892$gDo33)))
                                               (case-lambda
                                                 (()
                                                  (begin
                                                    ((case-lambda
                                                       ((g$t$10939$gDo33)
                                                        (begin
                                                          (g$inv-collector$10888$gDo33
                                                            g$inv-collector$10890$gDo33)
                                                          (set! g$inv-collector$10890$gDo33
                                                            g$t$10939$gDo33))))
                                                     (g$inv-collector$10888$gDo33))
                                                    ((case-lambda
                                                       ((g$t$10940$gDo33)
                                                        (begin
                                                          (g$vis-collector$10889$gDo33
                                                            g$vis-collector$10891$gDo33)
                                                          (set! g$vis-collector$10891$gDo33
                                                            g$t$10940$gDo33))))
                                                     (g$vis-collector$10889$gDo33))))))))
                                           g$inv-collector$8049$gDo33
                                           g$vis-collector$8050$gDo33
                                           g$rtc$10882$gDo33
                                           g$vtc$10883$gDo33)))
                                       (g$map$5063$gDo33
                                         g$wrap$10879$gDo33
                                         g$b*$10860$gDo33)
                                       (g$map$5063$gDo33
                                         g$wrap$10879$gDo33
                                         g$main-exp*$10858$gDo33)
                                       (g$make-collector$8048$gDo33)
                                       (g$make-collector$8048$gDo33)))))
                                 (g$make-top-rib$8047$gDo33
                                   g$subst-names$10877$gDo33
                                   g$subst-labels$10876$gDo33))))
                             g$subst-labels$10875$gDo33
                             g$subst-names$10874$gDo33))))))
                    g$swap$10871$gDo33)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10942$gDo33)
                        (begin
                          (g$imp-collector$10867$gDo33
                            g$imp-collector$10869$gDo33)
                          (set! g$imp-collector$10869$gDo33 g$t$10942$gDo33))))
                     (g$imp-collector$10867$gDo33))
                    ((case-lambda
                       ((g$t$10943$gDo33)
                        (begin
                          (g$top-level-context$10868$gDo33
                            g$top-level-context$10870$gDo33)
                          (set! g$top-level-context$10870$gDo33
                            g$t$10943$gDo33))))
                     (g$top-level-context$10868$gDo33))))))))
           g$imp-collector$8051$gDo33
           g$top-level-context$8117$gDo33
           g$itc$10862$gDo33
           '#f)))))
   (g$core-library-expander$8055$gDo33
     g$core-library-expander$11558$gDo33
     (case-lambda
       ((g$e$10944$gDo33 g$verify-name$10945$gDo33)
        (call-with-values
          (case-lambda (() (g$parse-library$8045$gDo33 g$e$10944$gDo33)))
          (case-lambda
            ((g$name*$10950$gDo33
               g$exp*$10951$gDo33
               g$imp*$10952$gDo33
               g$b*$10953$gDo33)
             ((case-lambda
                ((g$b*$10954$gDo33
                   g$imp*$10955$gDo33
                   g$exp*$10956$gDo33
                   g$name*$10957$gDo33)
                 (call-with-values
                   (case-lambda
                     (() (g$parse-library-name$8044$gDo33 g$name*$10957$gDo33)))
                   (case-lambda
                     ((g$name$10960$gDo33 g$ver$10961$gDo33)
                      ((case-lambda
                         ((g$ver$10962$gDo33 g$name$10963$gDo33)
                          (begin
                            (g$verify-name$10945$gDo33 g$name$10963$gDo33)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$8054$gDo33
                                   g$name$10963$gDo33
                                   g$exp*$10956$gDo33
                                   g$imp*$10955$gDo33
                                   g$b*$10954$gDo33
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10971$gDo33
                                   g$invoke-req*$10972$gDo33
                                   g$visit-req*$10973$gDo33
                                   g$invoke-code$10974$gDo33
                                   g$visit-code$10975$gDo33
                                   g$export-subst$10976$gDo33
                                   g$export-env$10977$gDo33)
                                 ((case-lambda
                                    ((g$export-env$10978$gDo33
                                       g$export-subst$10979$gDo33
                                       g$visit-code$10980$gDo33
                                       g$invoke-code$10981$gDo33
                                       g$visit-req*$10982$gDo33
                                       g$invoke-req*$10983$gDo33
                                       g$imp*$10984$gDo33)
                                     (values
                                       g$name$10963$gDo33
                                       g$ver$10962$gDo33
                                       g$imp*$10984$gDo33
                                       g$invoke-req*$10983$gDo33
                                       g$visit-req*$10982$gDo33
                                       g$invoke-code$10981$gDo33
                                       g$visit-code$10980$gDo33
                                       g$export-subst$10979$gDo33
                                       g$export-env$10978$gDo33)))
                                  g$export-env$10977$gDo33
                                  g$export-subst$10976$gDo33
                                  g$visit-code$10975$gDo33
                                  g$invoke-code$10974$gDo33
                                  g$visit-req*$10973$gDo33
                                  g$invoke-req*$10972$gDo33
                                  g$imp*$10971$gDo33)))))))
                       g$ver$10961$gDo33
                       g$name$10960$gDo33))))))
              g$b*$10953$gDo33
              g$imp*$10952$gDo33
              g$exp*$10951$gDo33
              g$name*$10950$gDo33)))))))
   (g$parse-top-level-program$8056$gDo33
     g$parse-top-level-program$11559$gDo33
     (case-lambda
       ((g$e*$10985$gDo33)
        ((case-lambda
           ((g$t$10986$gDo33)
            ((case-lambda
               ((g$ls/false$10987$gDo33)
                (if (if g$ls/false$10987$gDo33
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10988$gDo33
                               g$imp*$10989$gDo33
                               g$b*$10990$gDo33)
                             (eq? (g$syntax->datum$8112$gDo33
                                    g$import$10988$gDo33)
                                  'import)))
                          g$ls/false$10987$gDo33))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10991$gDo33
                         g$imp*$10992$gDo33
                         g$b*$10993$gDo33)
                       (values g$imp*$10992$gDo33 g$b*$10993$gDo33)))
                    g$ls/false$10987$gDo33)
                  ((case-lambda
                     ((g$t$10994$gDo33)
                      ((case-lambda
                         ((g$ls/false$10995$gDo33)
                          (if (if g$ls/false$10995$gDo33
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10996$gDo33
                                         g$x$10997$gDo33
                                         g$y$10998$gDo33)
                                       (eq? (g$syntax->datum$8112$gDo33
                                              g$import$10996$gDo33)
                                            'import)))
                                    g$ls/false$10995$gDo33))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10999$gDo33
                                   g$x$11000$gDo33
                                   g$y$11001$gDo33)
                                 (g$syntax-violation$8109$gDo33
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7716$gDo33 g$e*$10985$gDo33))))
                              g$ls/false$10995$gDo33)
                            ((case-lambda
                               ((g$t$11002$gDo33)
                                ((case-lambda
                                   ((g$ls/false$11003$gDo33)
                                    (if g$ls/false$11003$gDo33
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$11003$gDo33)
                                      (g$syntax-violation$8109$gDo33
                                        '#f
                                        '"invalid syntax"
                                        g$t$11002$gDo33))))
                                 (g$syntax-dispatch$7997$gDo33
                                   g$t$11002$gDo33
                                   '_))))
                             g$t$10994$gDo33))))
                       (g$syntax-dispatch$7997$gDo33
                         g$t$10994$gDo33
                         '((any . any) . any)))))
                   g$t$10986$gDo33))))
             (g$syntax-dispatch$7997$gDo33
               g$t$10986$gDo33
               '((any . each-any) . each-any)))))
         g$e*$10985$gDo33))))
   (g$top-level-expander$8057$gDo33
     g$top-level-expander$11560$gDo33
     (case-lambda
       ((g$e*$11004$gDo33)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$8056$gDo33 g$e*$11004$gDo33)))
          (case-lambda
            ((g$imp*$11007$gDo33 g$b*$11008$gDo33)
             ((case-lambda
                ((g$b*$11009$gDo33 g$imp*$11010$gDo33)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$8054$gDo33
                        '()
                        '()
                        g$imp*$11010$gDo33
                        g$b*$11009$gDo33
                        '#t)))
                   (case-lambda
                     ((g$imp*$11018$gDo33
                        g$invoke-req*$11019$gDo33
                        g$visit-req*$11020$gDo33
                        g$invoke-code$11021$gDo33
                        g$visit-code$11022$gDo33
                        g$export-subst$11023$gDo33
                        g$export-env$11024$gDo33)
                      ((case-lambda
                         ((g$export-env$11025$gDo33
                            g$export-subst$11026$gDo33
                            g$visit-code$11027$gDo33
                            g$invoke-code$11028$gDo33
                            g$visit-req*$11029$gDo33
                            g$invoke-req*$11030$gDo33
                            g$imp*$11031$gDo33)
                          (values
                            g$invoke-req*$11030$gDo33
                            g$invoke-code$11028$gDo33)))
                       g$export-env$11024$gDo33
                       g$export-subst$11023$gDo33
                       g$visit-code$11022$gDo33
                       g$invoke-code$11021$gDo33
                       g$visit-req*$11020$gDo33
                       g$invoke-req*$11019$gDo33
                       g$imp*$11018$gDo33))))))
              g$b*$11008$gDo33
              g$imp*$11007$gDo33)))))))
   (g$9108$8058$gDo33
     g$9108$11561$gDo33
     (make-record-type-descriptor
       'env
       '#f
       'g$9111$gDo33
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$9110$8059$gDo33 g$9110$11562$gDo33 '#f)
   (g$9109$8060$gDo33
     g$9109$11563$gDo33
     (make-record-constructor-descriptor
       g$9108$8058$gDo33
       '#f
       g$9110$8059$gDo33))
   (g$env?$8061$gDo33
     g$env?$11564$gDo33
     (record-predicate g$9108$8058$gDo33))
   (g$make-env$8062$gDo33
     g$make-env$11565$gDo33
     (record-constructor g$9109$8060$gDo33))
   (g$env-names$8063$gDo33
     g$env-names$11566$gDo33
     (record-accessor g$9108$8058$gDo33 '0))
   (g$env-labels$8064$gDo33
     g$env-labels$11567$gDo33
     (record-accessor g$9108$8058$gDo33 '1))
   (g$env-itc$8065$gDo33
     g$env-itc$11568$gDo33
     (record-accessor g$9108$8058$gDo33 '2))
   (g$set-env-names!$8066$gDo33
     g$set-env-names!$11569$gDo33
     (record-mutator g$9108$8058$gDo33 '0))
   (g$set-env-labels!$8067$gDo33
     g$set-env-labels!$11570$gDo33
     (record-mutator g$9108$8058$gDo33 '1))
   (g$set-env-itc!$8068$gDo33
     g$set-env-itc!$11571$gDo33
     (record-mutator g$9108$8058$gDo33 '2))
   (g$rp$8069$gDo33
     g$rp$11572$gDo33
     (make-record-printer
       'env
       (case-lambda
         ((g$x$11032$gDo33 g$p$11033$gDo33 g$wr$11034$gDo33)
          (display '"#<environment>" g$p$11033$gDo33)))))
   (g$9127$8070$gDo33
     g$9127$11573$gDo33
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$9130$gDo33
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$9129$8071$gDo33 g$9129$11574$gDo33 '#f)
   (g$9128$8072$gDo33
     g$9128$11575$gDo33
     (make-record-constructor-descriptor
       g$9127$8070$gDo33
       '#f
       g$9129$8071$gDo33))
   (g$interaction-env?$8073$gDo33
     g$interaction-env?$11576$gDo33
     (record-predicate g$9127$8070$gDo33))
   (g$make-interaction-env$8074$gDo33
     g$make-interaction-env$11577$gDo33
     (record-constructor g$9128$8072$gDo33))
   (g$interaction-env-rib$8075$gDo33
     g$interaction-env-rib$11578$gDo33
     (record-accessor g$9127$8070$gDo33 '0))
   (g$interaction-env-r$8076$gDo33
     g$interaction-env-r$11579$gDo33
     (record-accessor g$9127$8070$gDo33 '1))
   (g$interaction-env-locs$8077$gDo33
     g$interaction-env-locs$11580$gDo33
     (record-accessor g$9127$8070$gDo33 '2))
   (g$set-interaction-env-rib!$8078$gDo33
     g$set-interaction-env-rib!$11581$gDo33
     (record-mutator g$9127$8070$gDo33 '0))
   (g$set-interaction-env-r!$8079$gDo33
     g$set-interaction-env-r!$11582$gDo33
     (record-mutator g$9127$8070$gDo33 '1))
   (g$set-interaction-env-locs!$8080$gDo33
     g$set-interaction-env-locs!$11583$gDo33
     (record-mutator g$9127$8070$gDo33 '2))
   (g$rp$8081$gDo33
     g$rp$11584$gDo33
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$11035$gDo33 g$p$11036$gDo33 g$wr$11037$gDo33)
          (display '"#<environment>" g$p$11036$gDo33)))))
   (g$interaction-environment-symbols$8082$gDo33
     g$interaction-environment-symbols$11585$gDo33
     (case-lambda
       (()
        (g$environment-symbols$8086$gDo33
          (g$interaction-environment$8116$gDo33)))))
   (g$environment-bindings$8083$gDo33
     g$environment-bindings$11586$gDo33
     (case-lambda
       ((g$e$11038$gDo33)
        (vector->list
          (vector-map
            (case-lambda
              ((g$name$11039$gDo33 g$label$11040$gDo33)
               (g$parse-binding$8084$gDo33
                 (cons
                   g$name$11039$gDo33
                   (g$imported-label->binding$7528$gDo33
                     g$label$11040$gDo33)))))
            (g$env-names$8063$gDo33 g$e$11038$gDo33)
            (g$env-labels$8064$gDo33 g$e$11038$gDo33))))))
   (g$parse-binding$8084$gDo33
     g$parse-binding$11587$gDo33
     (case-lambda
       ((g$b$11041$gDo33)
        (cons
          (car g$b$11041$gDo33)
          ((case-lambda
             ((g$t$11042$gDo33)
              (if (g$memv$5056$gDo33 g$t$11042$gDo33 '(core-prim global))
                'procedure
                (if (g$memv$5056$gDo33
                      g$t$11042$gDo33
                      '(core-macro macro global-macro))
                  'syntax
                  (if (g$memv$5056$gDo33 g$t$11042$gDo33 '($core-rtd))
                    'record
                    (if (eq? (car g$b$11041$gDo33)
                             (g$cadr$5264$gDo33 g$b$11041$gDo33))
                      'syntax
                      'unknown))))))
           (g$cadr$5264$gDo33 g$b$11041$gDo33))))))
   (g$environment?$8085$gDo33
     g$environment?$11588$gDo33
     (case-lambda
       ((g$x$11043$gDo33)
        ((case-lambda
           ((g$t$11044$gDo33)
            (if g$t$11044$gDo33
              g$t$11044$gDo33
              (begin '#f (g$interaction-env?$8073$gDo33 g$x$11043$gDo33)))))
         (g$env?$8061$gDo33 g$x$11043$gDo33)))))
   (g$environment-symbols$8086$gDo33
     g$environment-symbols$11589$gDo33
     (case-lambda
       ((g$x$11045$gDo33)
        (if (g$env?$8061$gDo33 g$x$11045$gDo33)
          (vector->list (g$env-names$8063$gDo33 g$x$11045$gDo33))
          (if (g$interaction-env?$8073$gDo33 g$x$11045$gDo33)
            (g$map$5063$gDo33
              values
              (g$rib-sym*$7669$gDo33
                (g$interaction-env-rib$8075$gDo33 g$x$11045$gDo33)))
            (assertion-violation
              'environment-symbols
              '"not an environment"
              g$x$11045$gDo33))))))
   (g$environment$8087$gDo33
     g$environment$11590$gDo33
     (case-lambda
       (g$imp*$11046$gDo33
        ((case-lambda
           ((g$itc$11047$gDo33)
            ((case-lambda
               ((g$imp-collector$11050$gDo33 g$imp-collector$11051$gDo33)
                ((case-lambda
                   ((g$swap$11052$gDo33)
                    (dynamic-wind
                      g$swap$11052$gDo33
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$8046$gDo33
                                g$imp*$11046$gDo33)))
                           (case-lambda
                             ((g$subst-names$11055$gDo33
                                g$subst-labels$11056$gDo33)
                              ((case-lambda
                                 ((g$subst-labels$11057$gDo33
                                    g$subst-names$11058$gDo33)
                                  (g$make-env$8062$gDo33
                                    g$subst-names$11058$gDo33
                                    g$subst-labels$11057$gDo33
                                    g$itc$11047$gDo33)))
                               g$subst-labels$11056$gDo33
                               g$subst-names$11055$gDo33))))))
                      g$swap$11052$gDo33)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$11059$gDo33)
                        (begin
                          (g$imp-collector$11050$gDo33
                            g$imp-collector$11051$gDo33)
                          (set! g$imp-collector$11051$gDo33 g$t$11059$gDo33))))
                     (g$imp-collector$11050$gDo33)))))))
             g$imp-collector$8051$gDo33
             g$itc$11047$gDo33)))
         (g$make-collector$8048$gDo33)))))
   (g$null-environment$8088$gDo33
     g$null-environment$11591$gDo33
     (case-lambda
       ((g$n$11060$gDo33)
        (begin
          (if (not (eqv? g$n$11060$gDo33 '5))
            (assertion-violation 'null-environment '"not 5" g$n$11060$gDo33)
            (void))
          (g$environment$8087$gDo33 '(psyntax null-environment-5))))))
   (g$scheme-report-environment$8089$gDo33
     g$scheme-report-environment$11592$gDo33
     (case-lambda
       ((g$n$11061$gDo33)
        (begin
          (if (not (eqv? g$n$11061$gDo33 '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$11061$gDo33)
            (void))
          (g$environment$8087$gDo33 '(psyntax scheme-report-environment-5))))))
   (g$expand$8090$gDo33
     g$expand$11593$gDo33
     (case-lambda
       ((g$x$11062$gDo33 g$env$11063$gDo33)
        (if (g$env?$8061$gDo33 g$env$11063$gDo33)
          ((case-lambda
             ((g$rib$11064$gDo33)
              ((case-lambda
                 ((g$x$11065$gDo33
                    g$itc$11066$gDo33
                    g$rtc$11067$gDo33
                    g$vtc$11068$gDo33)
                  ((case-lambda
                     ((g$x$11069$gDo33)
                      (begin
                        (g$seal-rib!$7685$gDo33 g$rib$11064$gDo33)
                        (values g$x$11069$gDo33 (g$rtc$11067$gDo33)))))
                   ((case-lambda
                      ((g$top-level-context$11078$gDo33
                         g$inv-collector$11079$gDo33
                         g$vis-collector$11080$gDo33
                         g$imp-collector$11081$gDo33
                         g$top-level-context$11082$gDo33
                         g$inv-collector$11083$gDo33
                         g$vis-collector$11084$gDo33
                         g$imp-collector$11085$gDo33)
                       ((case-lambda
                          ((g$swap$11086$gDo33)
                           (dynamic-wind
                             g$swap$11086$gDo33
                             (case-lambda
                               (()
                                (g$chi-expr$8015$gDo33
                                  g$x$11065$gDo33
                                  '()
                                  '())))
                             g$swap$11086$gDo33)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$11087$gDo33)
                                 (begin
                                   (g$top-level-context$11078$gDo33
                                     g$top-level-context$11082$gDo33)
                                   (set! g$top-level-context$11082$gDo33
                                     g$t$11087$gDo33))))
                              (g$top-level-context$11078$gDo33))
                             ((case-lambda
                                ((g$t$11088$gDo33)
                                 (begin
                                   (g$inv-collector$11079$gDo33
                                     g$inv-collector$11083$gDo33)
                                   (set! g$inv-collector$11083$gDo33
                                     g$t$11088$gDo33))))
                              (g$inv-collector$11079$gDo33))
                             ((case-lambda
                                ((g$t$11089$gDo33)
                                 (begin
                                   (g$vis-collector$11080$gDo33
                                     g$vis-collector$11084$gDo33)
                                   (set! g$vis-collector$11084$gDo33
                                     g$t$11089$gDo33))))
                              (g$vis-collector$11080$gDo33))
                             ((case-lambda
                                ((g$t$11090$gDo33)
                                 (begin
                                   (g$imp-collector$11081$gDo33
                                     g$imp-collector$11085$gDo33)
                                   (set! g$imp-collector$11085$gDo33
                                     g$t$11090$gDo33))))
                              (g$imp-collector$11081$gDo33))))))))
                    g$top-level-context$8117$gDo33
                    g$inv-collector$8049$gDo33
                    g$vis-collector$8050$gDo33
                    g$imp-collector$8051$gDo33
                    '#f
                    g$rtc$11067$gDo33
                    g$vtc$11068$gDo33
                    g$itc$11066$gDo33))))
               (g$make-stx$7692$gDo33
                 g$x$11062$gDo33
                 g$top-mark*$7656$gDo33
                 (list g$rib$11064$gDo33)
                 '())
               (g$env-itc$8065$gDo33 g$env$11063$gDo33)
               (g$make-collector$8048$gDo33)
               (g$make-collector$8048$gDo33))))
           (g$make-top-rib$8047$gDo33
             (g$env-names$8063$gDo33 g$env$11063$gDo33)
             (g$env-labels$8064$gDo33 g$env$11063$gDo33)))
          (if (g$interaction-env?$8073$gDo33 g$env$11063$gDo33)
            ((case-lambda
               ((g$rib$11091$gDo33 g$r$11092$gDo33 g$rtc$11093$gDo33)
                ((case-lambda
                   ((g$x$11094$gDo33)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$11105$gDo33
                               g$inv-collector$11106$gDo33
                               g$vis-collector$11107$gDo33
                               g$imp-collector$11108$gDo33
                               g$top-level-context$11109$gDo33
                               g$inv-collector$11110$gDo33
                               g$vis-collector$11111$gDo33
                               g$imp-collector$11112$gDo33)
                             ((case-lambda
                                ((g$swap$11113$gDo33)
                                 (dynamic-wind
                                   g$swap$11113$gDo33
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$8053$gDo33
                                        g$x$11094$gDo33
                                        g$rib$11091$gDo33
                                        g$r$11092$gDo33)))
                                   g$swap$11113$gDo33)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$11114$gDo33)
                                       (begin
                                         (g$top-level-context$11105$gDo33
                                           g$top-level-context$11109$gDo33)
                                         (set! g$top-level-context$11109$gDo33
                                           g$t$11114$gDo33))))
                                    (g$top-level-context$11105$gDo33))
                                   ((case-lambda
                                      ((g$t$11115$gDo33)
                                       (begin
                                         (g$inv-collector$11106$gDo33
                                           g$inv-collector$11110$gDo33)
                                         (set! g$inv-collector$11110$gDo33
                                           g$t$11115$gDo33))))
                                    (g$inv-collector$11106$gDo33))
                                   ((case-lambda
                                      ((g$t$11116$gDo33)
                                       (begin
                                         (g$vis-collector$11107$gDo33
                                           g$vis-collector$11111$gDo33)
                                         (set! g$vis-collector$11111$gDo33
                                           g$t$11116$gDo33))))
                                    (g$vis-collector$11107$gDo33))
                                   ((case-lambda
                                      ((g$t$11117$gDo33)
                                       (begin
                                         (g$imp-collector$11108$gDo33
                                           g$imp-collector$11112$gDo33)
                                         (set! g$imp-collector$11112$gDo33
                                           g$t$11117$gDo33))))
                                    (g$imp-collector$11108$gDo33))))))))
                          g$top-level-context$8117$gDo33
                          g$inv-collector$8049$gDo33
                          g$vis-collector$8050$gDo33
                          g$imp-collector$8051$gDo33
                          g$env$11063$gDo33
                          g$rtc$11093$gDo33
                          (g$make-collector$8048$gDo33)
                          (g$make-collector$8048$gDo33))))
                      (case-lambda
                        ((g$e$11118$gDo33 g$r^$11119$gDo33)
                         ((case-lambda
                            ((g$r^$11120$gDo33 g$e$11121$gDo33)
                             (begin
                               (g$set-interaction-env-r!$8079$gDo33
                                 g$env$11063$gDo33
                                 g$r^$11120$gDo33)
                               (values g$e$11121$gDo33 (g$rtc$11093$gDo33)))))
                          g$r^$11119$gDo33
                          g$e$11118$gDo33))))))
                 (g$make-stx$7692$gDo33
                   g$x$11062$gDo33
                   g$top-mark*$7656$gDo33
                   (list g$rib$11091$gDo33)
                   '()))))
             (g$interaction-env-rib$8075$gDo33 g$env$11063$gDo33)
             (g$interaction-env-r$8076$gDo33 g$env$11063$gDo33)
             (g$make-collector$8048$gDo33))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$11063$gDo33))))))
   (g$eval$8091$gDo33
     g$eval$11594$gDo33
     (case-lambda
       ((g$x$11122$gDo33 g$env$11123$gDo33)
        (begin
          (if (not (g$environment?$8085$gDo33 g$env$11123$gDo33))
            (error 'eval '"not an environment" g$env$11123$gDo33)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8090$gDo33 g$x$11122$gDo33 g$env$11123$gDo33)))
            (case-lambda
              ((g$x$11126$gDo33 g$invoke-req*$11127$gDo33)
               ((case-lambda
                  ((g$invoke-req*$11128$gDo33 g$x$11129$gDo33)
                   (begin
                     (g$for-each$5064$gDo33
                       g$invoke-library$7529$gDo33
                       g$invoke-req*$11128$gDo33)
                     (eval-core
                       (g$expanded->core$7237$gDo33 g$x$11129$gDo33)))))
                g$invoke-req*$11127$gDo33
                g$x$11126$gDo33))))))))
   (g$expand->core$8092$gDo33
     g$expand->core$11595$gDo33
     (case-lambda
       ((g$x$11130$gDo33 g$env$11131$gDo33)
        (begin
          (if (not (g$environment?$8085$gDo33 g$env$11131$gDo33))
            (error 'eval '"not an environment" g$env$11131$gDo33)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$8090$gDo33 g$x$11130$gDo33 g$env$11131$gDo33)))
            (case-lambda
              ((g$x$11134$gDo33 g$invoke-req*$11135$gDo33)
               ((case-lambda
                  ((g$invoke-req*$11136$gDo33 g$x$11137$gDo33)
                   (begin
                     (g$for-each$5064$gDo33
                       g$invoke-library$7529$gDo33
                       g$invoke-req*$11136$gDo33)
                     (g$expanded->core$7237$gDo33 g$x$11137$gDo33))))
                g$invoke-req*$11135$gDo33
                g$x$11134$gDo33))))))))
   (g$library-expander$8093$gDo33
     g$library-expander$11596$gDo33
     (case-lambda
       ((g$x$11138$gDo33 g$filename$11139$gDo33 g$verify-name$11140$gDo33)
        (letrec* ((g$build-visit-code$11141$gDo33
                    (case-lambda
                      ((g$macro*$11184$gDo33)
                       (if (null? g$macro*$11184$gDo33)
                         (g$build-void$7649$gDo33)
                         (g$build-sequence$7648$gDo33
                           '#f
                           (g$map$5063$gDo33
                             (case-lambda
                               ((g$x$11185$gDo33)
                                ((case-lambda
                                   ((g$loc$11186$gDo33 g$src$11187$gDo33)
                                    (list
                                      'set!
                                      g$loc$11186$gDo33
                                      g$src$11187$gDo33)))
                                 (car g$x$11185$gDo33)
                                 (g$cddr$5266$gDo33 g$x$11185$gDo33))))
                             g$macro*$11184$gDo33))))))
                  (g$visit!$11142$gDo33
                    (case-lambda
                      ((g$macro*$11180$gDo33)
                       (g$for-each$5064$gDo33
                         (case-lambda
                           ((g$x$11181$gDo33)
                            ((case-lambda
                               ((g$loc$11182$gDo33 g$proc$11183$gDo33)
                                (set-symbol-value!
                                  g$loc$11182$gDo33
                                  g$proc$11183$gDo33)))
                             (car g$x$11181$gDo33)
                             (g$cadr$5264$gDo33 g$x$11181$gDo33))))
                         g$macro*$11180$gDo33)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$8055$gDo33
                 g$x$11138$gDo33
                 g$verify-name$11140$gDo33)))
            (case-lambda
              ((g$name$11152$gDo33
                 g$ver$11153$gDo33
                 g$imp*$11154$gDo33
                 g$inv*$11155$gDo33
                 g$vis*$11156$gDo33
                 g$invoke-code$11157$gDo33
                 g$macro*$11158$gDo33
                 g$export-subst$11159$gDo33
                 g$export-env$11160$gDo33)
               ((case-lambda
                  ((g$export-env$11161$gDo33
                     g$export-subst$11162$gDo33
                     g$macro*$11163$gDo33
                     g$invoke-code$11164$gDo33
                     g$vis*$11165$gDo33
                     g$inv*$11166$gDo33
                     g$imp*$11167$gDo33
                     g$ver$11168$gDo33
                     g$name$11169$gDo33)
                   ((case-lambda
                      ((g$id$11170$gDo33
                         g$name$11171$gDo33
                         g$ver$11172$gDo33
                         g$imp*$11173$gDo33
                         g$vis*$11174$gDo33
                         g$inv*$11175$gDo33
                         g$visit-proc$11176$gDo33
                         g$invoke-proc$11177$gDo33
                         g$visit-code$11178$gDo33
                         g$invoke-code$11179$gDo33)
                       (begin
                         (g$install-library$7527$gDo33
                           g$id$11170$gDo33
                           g$name$11171$gDo33
                           g$ver$11172$gDo33
                           g$imp*$11173$gDo33
                           g$vis*$11174$gDo33
                           g$inv*$11175$gDo33
                           g$export-subst$11162$gDo33
                           g$export-env$11161$gDo33
                           g$visit-proc$11176$gDo33
                           g$invoke-proc$11177$gDo33
                           g$visit-code$11178$gDo33
                           g$invoke-code$11179$gDo33
                           '#t
                           g$filename$11139$gDo33)
                         (values
                           g$id$11170$gDo33
                           g$name$11171$gDo33
                           g$ver$11172$gDo33
                           g$imp*$11173$gDo33
                           g$vis*$11174$gDo33
                           g$inv*$11175$gDo33
                           g$invoke-code$11179$gDo33
                           g$visit-code$11178$gDo33
                           g$export-subst$11162$gDo33
                           g$export-env$11161$gDo33))))
                    (gensym)
                    g$name$11169$gDo33
                    g$ver$11168$gDo33
                    (g$map$5063$gDo33
                      g$library-spec$7533$gDo33
                      g$imp*$11167$gDo33)
                    (g$map$5063$gDo33
                      g$library-spec$7533$gDo33
                      g$vis*$11165$gDo33)
                    (g$map$5063$gDo33
                      g$library-spec$7533$gDo33
                      g$inv*$11166$gDo33)
                    (case-lambda
                      (() (g$visit!$11142$gDo33 g$macro*$11163$gDo33)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$7237$gDo33
                           g$invoke-code$11164$gDo33))))
                    (g$build-visit-code$11141$gDo33 g$macro*$11163$gDo33)
                    g$invoke-code$11164$gDo33)))
                g$export-env$11160$gDo33
                g$export-subst$11159$gDo33
                g$macro*$11158$gDo33
                g$invoke-code$11157$gDo33
                g$vis*$11156$gDo33
                g$inv*$11155$gDo33
                g$imp*$11154$gDo33
                g$ver$11153$gDo33
                g$name$11152$gDo33))))))
       ((g$x$11188$gDo33 g$filename$11189$gDo33)
        (g$library-expander$8093$gDo33
          g$x$11188$gDo33
          g$filename$11189$gDo33
          (case-lambda ((g$x$11190$gDo33) (values)))))
       ((g$x$11191$gDo33)
        (g$library-expander$8093$gDo33
          g$x$11191$gDo33
          '#f
          (case-lambda ((g$x$11192$gDo33) (values)))))))
   (g$boot-library-expand$8094$gDo33
     g$boot-library-expand$11597$gDo33
     (case-lambda
       ((g$x$11193$gDo33)
        (call-with-values
          (case-lambda (() (g$library-expander$8093$gDo33 g$x$11193$gDo33)))
          (case-lambda
            ((g$id$11204$gDo33
               g$name$11205$gDo33
               g$ver$11206$gDo33
               g$imp*$11207$gDo33
               g$vis*$11208$gDo33
               g$inv*$11209$gDo33
               g$invoke-code$11210$gDo33
               g$visit-code$11211$gDo33
               g$export-subst$11212$gDo33
               g$export-env$11213$gDo33)
             ((case-lambda
                ((g$export-env$11214$gDo33
                   g$export-subst$11215$gDo33
                   g$visit-code$11216$gDo33
                   g$invoke-code$11217$gDo33
                   g$inv*$11218$gDo33
                   g$vis*$11219$gDo33
                   g$imp*$11220$gDo33
                   g$ver$11221$gDo33
                   g$name$11222$gDo33
                   g$id$11223$gDo33)
                 (values
                   g$name$11222$gDo33
                   g$invoke-code$11217$gDo33
                   g$export-subst$11215$gDo33
                   g$export-env$11214$gDo33)))
              g$export-env$11213$gDo33
              g$export-subst$11212$gDo33
              g$visit-code$11211$gDo33
              g$invoke-code$11210$gDo33
              g$inv*$11209$gDo33
              g$vis*$11208$gDo33
              g$imp*$11207$gDo33
              g$ver$11206$gDo33
              g$name$11205$gDo33
              g$id$11204$gDo33)))))))
   (g$rev-map-append$8095$gDo33
     g$rev-map-append$11598$gDo33
     (case-lambda
       ((g$f$11224$gDo33 g$ls$11225$gDo33 g$ac$11226$gDo33)
        (if (null? g$ls$11225$gDo33)
          g$ac$11226$gDo33
          (g$rev-map-append$8095$gDo33
            g$f$11224$gDo33
            (cdr g$ls$11225$gDo33)
            (cons
              (g$f$11224$gDo33 (car g$ls$11225$gDo33))
              g$ac$11226$gDo33))))))
   (g$build-exports$8096$gDo33
     g$build-exports$11599$gDo33
     (case-lambda
       ((g$lex*+loc*$11227$gDo33 g$init*$11228$gDo33)
        (g$build-sequence$7648$gDo33
          '#f
          (cons
            (g$build-void$7649$gDo33)
            (g$rev-map-append$8095$gDo33
              (case-lambda
                ((g$x$11229$gDo33)
                 (list 'set! (cdr g$x$11229$gDo33) (car g$x$11229$gDo33))))
              g$lex*+loc*$11227$gDo33
              g$init*$11228$gDo33))))))
   (g$make-export-subst$8097$gDo33
     g$make-export-subst$11600$gDo33
     (case-lambda
       ((g$name*$11230$gDo33 g$id*$11231$gDo33)
        (g$map$5063$gDo33
          (case-lambda
            ((g$name$11232$gDo33 g$id$11233$gDo33)
             ((case-lambda
                ((g$label$11234$gDo33)
                 (begin
                   (if (not g$label$11234$gDo33)
                     (g$syntax-violation$8109$gDo33
                       '#f
                       '"cannot export unbound identifier"
                       g$id$11233$gDo33)
                     (void))
                   (cons g$name$11232$gDo33 g$label$11234$gDo33))))
              (g$id->label$7732$gDo33 g$id$11233$gDo33))))
          g$name*$11230$gDo33
          g$id*$11231$gDo33))))
   (g$make-export-env/macros$8098$gDo33
     g$make-export-env/macros$11601$gDo33
     (case-lambda
       ((g$lex*$11235$gDo33 g$loc*$11236$gDo33 g$r$11237$gDo33)
        (letrec* ((g$lookup$11238$gDo33
                    (case-lambda
                      ((g$x$11253$gDo33)
                       ((letrec ((g$f$11254$gDo33
                                   (case-lambda
                                     ((g$x$11255$gDo33
                                        g$lex*$11256$gDo33
                                        g$loc*$11257$gDo33)
                                      (if (pair? g$lex*$11256$gDo33)
                                        (if (eq? g$x$11255$gDo33
                                                 (car g$lex*$11256$gDo33))
                                          (car g$loc*$11257$gDo33)
                                          (g$f$11254$gDo33
                                            g$x$11255$gDo33
                                            (cdr g$lex*$11256$gDo33)
                                            (cdr g$loc*$11257$gDo33)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$11254$gDo33)
                        g$x$11253$gDo33
                        g$lex*$11235$gDo33
                        g$loc*$11236$gDo33)))))
          ((letrec ((g$f$11239$gDo33
                      (case-lambda
                        ((g$r$11240$gDo33
                           g$env$11241$gDo33
                           g$global*$11242$gDo33
                           g$macro*$11243$gDo33)
                         (if (null? g$r$11240$gDo33)
                           (values
                             g$env$11241$gDo33
                             g$global*$11242$gDo33
                             g$macro*$11243$gDo33)
                           ((case-lambda
                              ((g$x$11244$gDo33)
                               ((case-lambda
                                  ((g$label$11245$gDo33 g$b$11246$gDo33)
                                   ((case-lambda
                                      ((g$t$11247$gDo33)
                                       (if (g$memv$5056$gDo33
                                             g$t$11247$gDo33
                                             '(lexical))
                                         ((case-lambda
                                            ((g$v$11248$gDo33)
                                             ((case-lambda
                                                ((g$loc$11249$gDo33
                                                   g$type$11250$gDo33)
                                                 (g$f$11239$gDo33
                                                   (cdr g$r$11240$gDo33)
                                                   (cons
                                                     (g$cons*$5065$gDo33
                                                       g$label$11245$gDo33
                                                       g$type$11250$gDo33
                                                       g$loc$11249$gDo33)
                                                     g$env$11241$gDo33)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7941$gDo33
                                                         g$v$11248$gDo33)
                                                       g$loc$11249$gDo33)
                                                     g$global*$11242$gDo33)
                                                   g$macro*$11243$gDo33)))
                                              (g$lookup$11238$gDo33
                                                (g$lexical-var$7941$gDo33
                                                  g$v$11248$gDo33))
                                              (if (g$lexical-mutable?$7942$gDo33
                                                    g$v$11248$gDo33)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7737$gDo33
                                            g$b$11246$gDo33))
                                         (if (g$memv$5056$gDo33
                                               g$t$11247$gDo33
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$11251$gDo33)
                                               (g$f$11239$gDo33
                                                 (cdr g$r$11240$gDo33)
                                                 (cons
                                                   (g$cons*$5065$gDo33
                                                     g$label$11245$gDo33
                                                     'global-macro
                                                     g$loc$11251$gDo33)
                                                   g$env$11241$gDo33)
                                                 g$global*$11242$gDo33
                                                 (cons
                                                   (cons
                                                     g$loc$11251$gDo33
                                                     (g$binding-value$7737$gDo33
                                                       g$b$11246$gDo33))
                                                   g$macro*$11243$gDo33))))
                                            (gensym))
                                           (if (g$memv$5056$gDo33
                                                 g$t$11247$gDo33
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$11252$gDo33)
                                                 (g$f$11239$gDo33
                                                   (cdr g$r$11240$gDo33)
                                                   (cons
                                                     (g$cons*$5065$gDo33
                                                       g$label$11245$gDo33
                                                       'global-macro!
                                                       g$loc$11252$gDo33)
                                                     g$env$11241$gDo33)
                                                   g$global*$11242$gDo33
                                                   (cons
                                                     (cons
                                                       g$loc$11252$gDo33
                                                       (g$binding-value$7737$gDo33
                                                         g$b$11246$gDo33))
                                                     g$macro*$11243$gDo33))))
                                              (gensym))
                                             (if (g$memv$5056$gDo33
                                                   g$t$11247$gDo33
                                                   '($rtd $module))
                                               (g$f$11239$gDo33
                                                 (cdr g$r$11240$gDo33)
                                                 (cons
                                                   g$x$11244$gDo33
                                                   g$env$11241$gDo33)
                                                 g$global*$11242$gDo33
                                                 g$macro*$11243$gDo33)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7736$gDo33
                                                   g$b$11246$gDo33)
                                                 (g$binding-value$7737$gDo33
                                                   g$b$11246$gDo33))))))))
                                    (g$binding-type$7736$gDo33
                                      g$b$11246$gDo33))))
                                (car g$x$11244$gDo33)
                                (cdr g$x$11244$gDo33))))
                            (car g$r$11240$gDo33)))))))
             g$f$11239$gDo33)
           g$r$11237$gDo33
           '()
           '()
           '())))))
   (g$generate-temporaries$8099$gDo33
     g$generate-temporaries$11602$gDo33
     (case-lambda
       ((g$ls$11258$gDo33)
        ((case-lambda
           ((g$t$11259$gDo33)
            ((case-lambda
               ((g$ls/false$11260$gDo33)
                (if g$ls/false$11260$gDo33
                  (apply
                    (case-lambda
                      ((g$ls$11261$gDo33)
                       (g$map$5063$gDo33
                         (case-lambda
                           ((g$x$11262$gDo33)
                            (g$make-stx$7692$gDo33
                              ((case-lambda
                                 ((g$x$11263$gDo33)
                                  (if ((case-lambda
                                         ((g$t$11264$gDo33)
                                          (if g$t$11264$gDo33
                                            g$t$11264$gDo33
                                            (begin
                                              '#f
                                              (string? g$x$11263$gDo33)))))
                                       (symbol? g$x$11263$gDo33))
                                    (gensym g$x$11263$gDo33)
                                    (gensym 't))))
                               (g$syntax->datum$8112$gDo33 g$x$11262$gDo33))
                              g$top-mark*$7656$gDo33
                              '()
                              '())))
                         g$ls$11261$gDo33)))
                    g$ls/false$11260$gDo33)
                  ((case-lambda
                     ((g$t$11265$gDo33)
                      ((case-lambda
                         ((g$ls/false$11266$gDo33)
                          (if g$ls/false$11266$gDo33
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$11266$gDo33)
                            (g$syntax-violation$8109$gDo33
                              '#f
                              '"invalid syntax"
                              g$t$11265$gDo33))))
                       (g$syntax-dispatch$7997$gDo33 g$t$11265$gDo33 '_))))
                   g$t$11259$gDo33))))
             (g$syntax-dispatch$7997$gDo33 g$t$11259$gDo33 'each-any))))
         g$ls$11258$gDo33))))
   (g$free-identifier=?$8100$gDo33
     g$free-identifier=?$11603$gDo33
     (case-lambda
       ((g$x$11267$gDo33 g$y$11268$gDo33)
        (if (g$id?$7719$gDo33 g$x$11267$gDo33)
          (if (g$id?$7719$gDo33 g$y$11268$gDo33)
            (g$free-id=?$7723$gDo33 g$x$11267$gDo33 g$y$11268$gDo33)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$11268$gDo33))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$11267$gDo33)))))
   (g$bound-identifier=?$8101$gDo33
     g$bound-identifier=?$11604$gDo33
     (case-lambda
       ((g$x$11269$gDo33 g$y$11270$gDo33)
        (if (g$id?$7719$gDo33 g$x$11269$gDo33)
          (if (g$id?$7719$gDo33 g$y$11270$gDo33)
            (g$bound-id=?$7722$gDo33 g$x$11269$gDo33 g$y$11270$gDo33)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$11270$gDo33))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$11269$gDo33)))))
   (g$make-source-condition$8102$gDo33
     g$make-source-condition$11605$gDo33
     (case-lambda
       ((g$x$11271$gDo33)
        (letrec* ((g$12063$11272$gDo33
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$12066$gDo33
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$12065$11273$gDo33 '#f)
                  (g$12064$11274$gDo33
                    (make-record-constructor-descriptor
                      g$12063$11272$gDo33
                      &condition-rcd
                      g$12065$11273$gDo33))
                  (g$12062$11275$gDo33 (record-predicate g$12063$11272$gDo33))
                  (g$make-source-condition$11276$gDo33
                    (record-constructor g$12064$11274$gDo33))
                  (g$12060$11277$gDo33 (record-accessor g$12063$11272$gDo33 '0))
                  (g$12061$11278$gDo33 (record-accessor g$12063$11272$gDo33 '1))
                  (g$source-condition?$11279$gDo33
                    (condition-predicate g$12063$11272$gDo33))
                  (g$source-filename$11280$gDo33
                    (condition-accessor
                      g$12063$11272$gDo33
                      g$12060$11277$gDo33))
                  (g$source-character$11281$gDo33
                    (condition-accessor
                      g$12063$11272$gDo33
                      g$12061$11278$gDo33)))
          (if (pair? g$x$11271$gDo33)
            (g$make-source-condition$11276$gDo33
              (car g$x$11271$gDo33)
              (cdr g$x$11271$gDo33))
            (condition))))))
   (g$extract-position-condition$8103$gDo33
     g$extract-position-condition$11606$gDo33
     (case-lambda
       ((g$x$11282$gDo33)
        (g$make-source-condition$8102$gDo33
          (g$expression-position$8104$gDo33 g$x$11282$gDo33)))))
   (g$expression-position$8104$gDo33
     g$expression-position$11607$gDo33
     (case-lambda
       ((g$x$11283$gDo33)
        (if (g$stx?$7691$gDo33 g$x$11283$gDo33)
          (begin
            '#f
            ((case-lambda
               ((g$x$11284$gDo33)
                (if (annotation? g$x$11284$gDo33)
                  (begin '#f (annotation-source g$x$11284$gDo33))
                  '#f)))
             (g$stx-expr$7693$gDo33 g$x$11283$gDo33)))
          '#f))))
   (g$assertion-error$8105$gDo33
     g$assertion-error$11608$gDo33
     (case-lambda
       ((g$expr$11285$gDo33 g$pos$11286$gDo33)
        (raise
          (condition
            (g$make-assertion-violation$5837$gDo33)
            (g$make-who-condition$5851$gDo33 'assert)
            (g$make-message-condition$5805$gDo33 '"assertion failed")
            (g$make-irritants-condition$5843$gDo33 (list g$expr$11285$gDo33))
            (g$make-source-condition$8102$gDo33 g$pos$11286$gDo33))))))
   (g$syntax-error$8106$gDo33
     g$syntax-error$11609$gDo33
     (case-lambda
       ((g$x$11287$gDo33 . g$args$11288$gDo33)
        (begin
          (if (not (g$for-all$5061$gDo33 string? g$args$11288$gDo33))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$11288$gDo33)
            (void))
          (raise
            (condition
              (g$make-message-condition$5805$gDo33
                (if (null? g$args$11288$gDo33)
                  '"invalid syntax"
                  (apply string-append g$args$11288$gDo33)))
              (g$make-syntax-violation$5877$gDo33
                (g$syntax->datum$8112$gDo33 g$x$11287$gDo33)
                '#f)
              (g$extract-position-condition$8103$gDo33 g$x$11287$gDo33)
              (g$extract-trace$8107$gDo33 g$x$11287$gDo33)))))))
   (g$extract-trace$8107$gDo33
     g$extract-trace$11610$gDo33
     (case-lambda
       ((g$x$11289$gDo33)
        (letrec* ((g$12090$11290$gDo33
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$12093$gDo33
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$12092$11291$gDo33 '#f)
                  (g$12091$11292$gDo33
                    (make-record-constructor-descriptor
                      g$12090$11290$gDo33
                      &condition-rcd
                      g$12092$11291$gDo33))
                  (g$12089$11293$gDo33 (record-predicate g$12090$11290$gDo33))
                  (g$make-trace$11294$gDo33
                    (record-constructor g$12091$11292$gDo33))
                  (g$12088$11295$gDo33 (record-accessor g$12090$11290$gDo33 '0))
                  (g$trace?$11296$gDo33
                    (condition-predicate g$12090$11290$gDo33))
                  (g$trace-form$11297$gDo33
                    (condition-accessor
                      g$12090$11290$gDo33
                      g$12088$11295$gDo33)))
          ((letrec ((g$f$11298$gDo33
                      (case-lambda
                        ((g$x$11299$gDo33)
                         (if (g$stx?$7691$gDo33 g$x$11299$gDo33)
                           (apply
                             condition
                             (g$make-trace$11294$gDo33 g$x$11299$gDo33)
                             (g$map$5063$gDo33
                               g$f$11298$gDo33
                               (g$stx-ae*$7696$gDo33 g$x$11299$gDo33)))
                           (if (annotation? g$x$11299$gDo33)
                             (g$make-trace$11294$gDo33
                               (g$make-stx$7692$gDo33
                                 g$x$11299$gDo33
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$11298$gDo33)
           g$x$11289$gDo33)))))
   (g$syntax-violation*$8108$gDo33
     g$syntax-violation*$11611$gDo33
     (case-lambda
       ((g$who$11300$gDo33
          g$msg$11301$gDo33
          g$form$11302$gDo33
          g$condition-object$11303$gDo33)
        (begin
          (if (not (string? g$msg$11301$gDo33))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$11301$gDo33)
            (void))
          ((case-lambda
             ((g$who$11304$gDo33)
              (raise
                (condition
                  (if g$who$11304$gDo33
                    (g$make-who-condition$5851$gDo33 g$who$11304$gDo33)
                    (condition))
                  (g$make-message-condition$5805$gDo33 g$msg$11301$gDo33)
                  g$condition-object$11303$gDo33
                  (g$extract-position-condition$8103$gDo33 g$form$11302$gDo33)
                  (g$extract-trace$8107$gDo33 g$form$11302$gDo33)))))
           (if ((case-lambda
                  ((g$t$11305$gDo33)
                   (if g$t$11305$gDo33
                     g$t$11305$gDo33
                     (begin '#f (symbol? g$who$11300$gDo33)))))
                (string? g$who$11300$gDo33))
             g$who$11300$gDo33
             (if (not g$who$11300$gDo33)
               ((case-lambda
                  ((g$t$11306$gDo33)
                   ((case-lambda
                      ((g$ls/false$11307$gDo33)
                       (if (if g$ls/false$11307$gDo33
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$11308$gDo33)
                                    (g$id?$7719$gDo33 g$id$11308$gDo33)))
                                 g$ls/false$11307$gDo33))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$11309$gDo33)
                              (g$syntax->datum$8112$gDo33 g$id$11309$gDo33)))
                           g$ls/false$11307$gDo33)
                         ((case-lambda
                            ((g$t$11310$gDo33)
                             ((case-lambda
                                ((g$ls/false$11311$gDo33)
                                 (if (if g$ls/false$11311$gDo33
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$11312$gDo33
                                                g$rest$11313$gDo33)
                                              (g$id?$7719$gDo33
                                                g$id$11312$gDo33)))
                                           g$ls/false$11311$gDo33))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$11314$gDo33 g$rest$11315$gDo33)
                                        (g$syntax->datum$8112$gDo33
                                          g$id$11314$gDo33)))
                                     g$ls/false$11311$gDo33)
                                   ((case-lambda
                                      ((g$t$11316$gDo33)
                                       ((case-lambda
                                          ((g$ls/false$11317$gDo33)
                                           (if g$ls/false$11317$gDo33
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$11317$gDo33)
                                             (g$syntax-violation$8109$gDo33
                                               '#f
                                               '"invalid syntax"
                                               g$t$11316$gDo33))))
                                        (g$syntax-dispatch$7997$gDo33
                                          g$t$11316$gDo33
                                          '_))))
                                    g$t$11310$gDo33))))
                              (g$syntax-dispatch$7997$gDo33
                                g$t$11310$gDo33
                                '(any . any)))))
                          g$t$11306$gDo33))))
                    (g$syntax-dispatch$7997$gDo33 g$t$11306$gDo33 'any))))
                g$form$11302$gDo33)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$11300$gDo33))))))))
   (g$syntax-violation$8109$gDo33
     g$syntax-violation$11612$gDo33
     (case-lambda
       ((g$who$11318$gDo33 g$msg$11319$gDo33 g$form$11320$gDo33)
        (g$syntax-violation$8109$gDo33
          g$who$11318$gDo33
          g$msg$11319$gDo33
          g$form$11320$gDo33
          '#f))
       ((g$who$11321$gDo33
          g$msg$11322$gDo33
          g$form$11323$gDo33
          g$subform$11324$gDo33)
        (g$syntax-violation*$8108$gDo33
          g$who$11321$gDo33
          g$msg$11322$gDo33
          g$form$11323$gDo33
          (g$make-syntax-violation$5877$gDo33
            (g$syntax->datum$8112$gDo33 g$form$11323$gDo33)
            (g$syntax->datum$8112$gDo33 g$subform$11324$gDo33))))))
   (g$identifier?$8110$gDo33
     g$identifier?$11613$gDo33
     (case-lambda ((g$x$11325$gDo33) (g$id?$7719$gDo33 g$x$11325$gDo33))))
   (g$datum->syntax$8111$gDo33
     g$datum->syntax$11614$gDo33
     (case-lambda
       ((g$id$11326$gDo33 g$datum$11327$gDo33)
        (if (g$id?$7719$gDo33 g$id$11326$gDo33)
          (g$datum->stx$7702$gDo33 g$id$11326$gDo33 g$datum$11327$gDo33)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$11326$gDo33)))))
   (g$syntax->datum$8112$gDo33
     g$syntax->datum$11615$gDo33
     (case-lambda
       ((g$x$11328$gDo33) (g$stx->datum$7730$gDo33 g$x$11328$gDo33))))
   (g$compile-r6rs-top-level$8113$gDo33
     g$compile-r6rs-top-level$11616$gDo33
     (case-lambda
       ((g$x*$11329$gDo33)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8057$gDo33 g$x*$11329$gDo33)))
          (case-lambda
            ((g$lib*$11332$gDo33 g$invoke-code$11333$gDo33)
             ((case-lambda
                ((g$invoke-code$11334$gDo33 g$lib*$11335$gDo33)
                 (case-lambda
                   (()
                    (begin
                      (g$for-each$5064$gDo33
                        g$invoke-library$7529$gDo33
                        g$lib*$11335$gDo33)
                      (eval-core
                        (g$expanded->core$7237$gDo33
                          g$invoke-code$11334$gDo33)))))))
              g$invoke-code$11333$gDo33
              g$lib*$11332$gDo33)))))))
   (g$pre-compile-r6rs-top-level$8114$gDo33
     g$pre-compile-r6rs-top-level$11617$gDo33
     (case-lambda
       ((g$x*$11336$gDo33)
        (call-with-values
          (case-lambda (() (g$top-level-expander$8057$gDo33 g$x*$11336$gDo33)))
          (case-lambda
            ((g$lib*$11339$gDo33 g$invoke-code$11340$gDo33)
             ((case-lambda
                ((g$invoke-code$11341$gDo33 g$lib*$11342$gDo33)
                 (begin
                   (g$for-each$5064$gDo33
                     g$invoke-library$7529$gDo33
                     g$lib*$11342$gDo33)
                   (compile-core
                     (g$expanded->core$7237$gDo33 g$invoke-code$11341$gDo33)))))
              g$invoke-code$11340$gDo33
              g$lib*$11339$gDo33)))))))
   (g$new-interaction-environment$8115$gDo33
     g$new-interaction-environment$11618$gDo33
     (case-lambda
       (()
        ((case-lambda
           ((g$lib$11343$gDo33 g$rib$11344$gDo33)
            (begin
              ((case-lambda
                 ((g$subst$11345$gDo33)
                  (begin
                    (g$set-rib-sym*!$7674$gDo33
                      g$rib$11344$gDo33
                      (g$map$5063$gDo33 car g$subst$11345$gDo33))
                    (g$set-rib-mark**!$7675$gDo33
                      g$rib$11344$gDo33
                      (g$map$5063$gDo33
                        (case-lambda ((g$x$11346$gDo33) g$top-mark*$7656$gDo33))
                        g$subst$11345$gDo33))
                    (g$set-rib-label*!$7676$gDo33
                      g$rib$11344$gDo33
                      (g$map$5063$gDo33 cdr g$subst$11345$gDo33)))))
               (g$library-subst$7486$gDo33 g$lib$11343$gDo33))
              (g$make-interaction-env$8074$gDo33 g$rib$11344$gDo33 '() '()))))
         (g$find-library-by-name$7522$gDo33 '(ironscheme))
         (g$make-empty-rib$7679$gDo33)))))
   (g$interaction-environment$8116$gDo33
     g$interaction-environment$11619$gDo33
     ((case-lambda
        ((g$e$11347$gDo33)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$11348$gDo33)
                (if g$t$11348$gDo33
                  g$t$11348$gDo33
                  (begin
                    '#f
                    (begin
                      (set! g$e$11347$gDo33
                        (g$new-interaction-environment$8115$gDo33))
                      g$e$11347$gDo33)))))
             g$e$11347$gDo33)))))
      '#f))
   (g$top-level-context$8117$gDo33
     g$top-level-context$11620$gDo33
     (g$make-parameter$6991$gDo33 '#f)))
  (g$current-library-expander$7519$gDo33 g$library-expander$8093$gDo33))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$7234$gDo33
      (case-lambda
        ((g$x$11673$gDo33)
         ((case-lambda
            ((g$t$11674$gDo33) (if g$t$11674$gDo33 (cdr g$t$11674$gDo33) '#f)))
          (g$assq$5051$gDo33
            g$x$11673$gDo33
            '((ellipsis-map . g$ellipsis-map$11505$gDo33)
              (make-list . g$make-list$5046$gDo33)
              (last-pair . g$last-pair$5045$gDo33)
              (ironscheme-build . g$ironscheme-build$11666$gDo33)
              (syntax-error . g$syntax-error$11609$gDo33)
              (syntax-dispatch . g$syntax-dispatch$11500$gDo33)
              (compile-system-libraries
                .
                g$compile-system-libraries$11668$gDo33)
              (compile->closure . g$compile->closure$11670$gDo33)
              (compile . g$compile$11669$gDo33)
              (load . g$load$11665$gDo33)
              (interaction-environment . g$interaction-environment$11619$gDo33)
              (string-ci>? . g$string-ci>?$6027$gDo33)
              (string-ci>=? . g$string-ci>=?$6029$gDo33)
              (string-ci=? . g$string-ci=?$6025$gDo33)
              (string-ci<? . g$string-ci<?$6026$gDo33)
              (string-ci<=? . g$string-ci<=?$6028$gDo33)
              (char-ci>? . g$char-ci>?$6032$gDo33)
              (char-ci>=? . g$char-ci>=?$6034$gDo33)
              (char-ci=? . g$char-ci=?$6030$gDo33)
              (char-ci<? . g$char-ci<?$6031$gDo33)
              (char-ci<=? . g$char-ci<=?$6033$gDo33)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$11438$gDo33)
              (variable-transformer? . g$variable-transformer?$11437$gDo33)
              (make-variable-transformer
                .
                g$make-variable-transformer$11436$gDo33)
              (identifier? . g$identifier?$11613$gDo33)
              (generate-temporaries . g$generate-temporaries$11602$gDo33)
              (free-identifier=? . g$free-identifier=?$11603$gDo33)
              (syntax->datum . g$syntax->datum$11615$gDo33)
              (datum->syntax . g$datum->syntax$11614$gDo33)
              (bound-identifier=? . g$bound-identifier=?$11604$gDo33)
              (delete-file . g$delete-file$5557$gDo33)
              (file-exists? . g$file-exists?$5556$gDo33)
              (list-sort . g$list-sort$5952$gDo33)
              (make-eqv-hashtable . g$make-eqv-hashtable$5539$gDo33)
              (make-eq-hashtable . g$make-eq-hashtable$5538$gDo33)
              (hashtable-update! . g$hashtable-update!$5545$gDo33)
              (hashtable-size . g$hashtable-size$5540$gDo33)
              (hashtable-set! . g$hashtable-set!$5542$gDo33)
              (hashtable-ref . g$hashtable-ref$5541$gDo33)
              (hashtable-delete! . g$hashtable-delete!$5543$gDo33)
              (hashtable-contains? . g$hashtable-contains?$5544$gDo33)
              (hashtable-clear! . g$hashtable-clear!$5546$gDo33)
              (call-with-output-file . g$call-with-output-file$6388$gDo33)
              (call-with-input-file . g$call-with-input-file$6387$gDo33)
              (write-char . g$write-char$6384$gDo33)
              (with-output-to-file . g$with-output-to-file$6386$gDo33)
              (with-input-from-file . g$with-input-from-file$6385$gDo33)
              (read-char . g$read-char$6383$gDo33)
              (peek-char . g$peek-char$6382$gDo33)
              (newline . g$newline$6389$gDo33)
              (port? . g$port?$6337$gDo33)
              (open-string-output-port . g$open-string-output-port$6336$gDo33)
              (make-i/o-write-error . g$make-i/o-write-error$6252$gDo33)
              (make-i/o-read-error . g$make-i/o-read-error$6246$gDo33)
              (make-i/o-port-error . g$make-i/o-port-error$6298$gDo33)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6258$gDo33)
              (make-i/o-filename-error . g$make-i/o-filename-error$6266$gDo33)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6274$gDo33)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6280$gDo33)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6292$gDo33)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6286$gDo33)
              (make-i/o-error . g$make-i/o-error$6240$gDo33)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6312$gDo33)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6306$gDo33)
              (i/o-write-error? . g$i/o-write-error?$6253$gDo33)
              (i/o-read-error? . g$i/o-read-error?$6247$gDo33)
              (i/o-port-error? . g$i/o-port-error?$6300$gDo33)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6260$gDo33)
              (i/o-error-position . g$i/o-error-position$6261$gDo33)
              (i/o-filename-error? . g$i/o-filename-error?$6268$gDo33)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6275$gDo33)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6281$gDo33)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6293$gDo33)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6287$gDo33)
              (i/o-error? . g$i/o-error?$6241$gDo33)
              (i/o-error-port . g$i/o-error-port$6301$gDo33)
              (i/o-error-filename . g$i/o-error-filename$6269$gDo33)
              (i/o-encoding-error? . g$i/o-encoding-error?$6314$gDo33)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6315$gDo33)
              (i/o-decoding-error? . g$i/o-decoding-error?$6307$gDo33)
              (call-with-string-output-port
                .
                g$call-with-string-output-port$6338$gDo33)
              (call-with-port . g$call-with-port$6339$gDo33)
              (scheme-report-environment
                .
                g$scheme-report-environment$11592$gDo33)
              (quotient . g$quotient$5919$gDo33)
              (null-environment . g$null-environment$11591$gDo33)
              (remainder . g$remainder$5920$gDo33)
              (modulo . g$modulo$5921$gDo33)
              (inexact->exact . g$inexact->exact$5916$gDo33)
              (force . g$force$5923$gDo33)
              (exact->inexact . g$exact->inexact$5917$gDo33)
              (command-line . g$command-line$11662$gDo33)
              (remove . g$remove$5068$gDo33)
              (remv . g$remv$5069$gDo33)
              (remp . g$remp$5049$gDo33)
              (remq . g$remq$5070$gDo33)
              (partition . g$partition$5048$gDo33)
              (memv . g$memv$5056$gDo33)
              (memq . g$memq$5055$gDo33)
              (memp . g$memp$5058$gDo33)
              (member . g$member$5057$gDo33)
              (exists . g$exists$5062$gDo33)
              (for-all . g$for-all$5061$gDo33)
              (fold-right . g$fold-right$5067$gDo33)
              (fold-left . g$fold-left$5066$gDo33)
              (find . g$find$5047$gDo33)
              (filter . g$filter$5050$gDo33)
              (cons* . g$cons*$5065$gDo33)
              (assv . g$assv$5052$gDo33)
              (assq . g$assq$5051$gDo33)
              (assp . g$assp$5054$gDo33)
              (assoc . g$assoc$5053$gDo33)
              (eval . g$eval$11594$gDo33)
              (environment . g$environment$11590$gDo33)
              (make-enumeration . g$make-enumeration$6521$gDo33)
              (enum-set=? . g$enum-set=?$6528$gDo33)
              (enum-set-universe . g$enum-set-universe$6522$gDo33)
              (enum-set-union . g$enum-set-union$6529$gDo33)
              (enum-set-subset? . g$enum-set-subset?$6527$gDo33)
              (enum-set-projection . g$enum-set-projection$6533$gDo33)
              (enum-set-member? . g$enum-set-member?$6526$gDo33)
              (enum-set-intersection . g$enum-set-intersection$6530$gDo33)
              (enum-set-indexer . g$enum-set-indexer$6523$gDo33)
              (enum-set-difference . g$enum-set-difference$6531$gDo33)
              (enum-set-constructor . g$enum-set-constructor$6524$gDo33)
              (enum-set-complement . g$enum-set-complement$6532$gDo33)
              (enum-set->list . g$enum-set->list$6525$gDo33)
              (who-condition? . g$who-condition?$5853$gDo33)
              (warning? . g$warning?$5814$gDo33)
              (violation? . g$violation?$5832$gDo33)
              (undefined-violation? . g$undefined-violation?$5888$gDo33)
              (syntax-violation? . g$syntax-violation?$5880$gDo33)
              (syntax-violation-subform . g$syntax-violation-subform$5882$gDo33)
              (syntax-violation-form . g$syntax-violation-form$5881$gDo33)
              (syntax-violation . g$syntax-violation$11612$gDo33)
              (serious-condition? . g$serious-condition?$5820$gDo33)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5860$gDo33)
              (message-condition? . g$message-condition?$5807$gDo33)
              (make-who-condition . g$make-who-condition$5851$gDo33)
              (make-warning . g$make-warning$5813$gDo33)
              (make-violation . g$make-violation$5831$gDo33)
              (make-undefined-violation . g$make-undefined-violation$5887$gDo33)
              (make-syntax-violation . g$make-syntax-violation$5877$gDo33)
              (make-serious-condition . g$make-serious-condition$5819$gDo33)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5859$gDo33)
              (make-message-condition . g$make-message-condition$5805$gDo33)
              (make-lexical-violation . g$make-lexical-violation$5871$gDo33)
              (make-irritants-condition . g$make-irritants-condition$5843$gDo33)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5865$gDo33)
              (make-error . g$make-error$5825$gDo33)
              (make-assertion-violation . g$make-assertion-violation$5837$gDo33)
              (lexical-violation? . g$lexical-violation?$5872$gDo33)
              (irritants-condition? . g$irritants-condition?$5845$gDo33)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5866$gDo33)
              (error? . g$error?$5826$gDo33)
              (condition-who . g$condition-who$5854$gDo33)
              (condition-message . g$condition-message$5808$gDo33)
              (condition-irritants . g$condition-irritants$5846$gDo33)
              (assertion-violation? . g$assertion-violation?$5838$gDo33)
              (native-endianness . g$native-endianness$5670$gDo33)
              (bytevector-u64-set! . g$bytevector-u64-set!$5691$gDo33)
              (bytevector-u64-ref . g$bytevector-u64-ref$5687$gDo33)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5693$gDo33)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5689$gDo33)
              (bytevector-u32-set! . g$bytevector-u32-set!$5683$gDo33)
              (bytevector-u32-ref . g$bytevector-u32-ref$5679$gDo33)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5685$gDo33)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5681$gDo33)
              (bytevector-u16-set! . g$bytevector-u16-set!$5675$gDo33)
              (bytevector-u16-ref . g$bytevector-u16-ref$5671$gDo33)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5677$gDo33)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5673$gDo33)
              (bytevector-s64-set! . g$bytevector-s64-set!$5692$gDo33)
              (bytevector-s64-ref . g$bytevector-s64-ref$5688$gDo33)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5694$gDo33)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5690$gDo33)
              (bytevector-s32-set! . g$bytevector-s32-set!$5684$gDo33)
              (bytevector-s32-ref . g$bytevector-s32-ref$5680$gDo33)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5686$gDo33)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5682$gDo33)
              (bytevector-s16-set! . g$bytevector-s16-set!$5676$gDo33)
              (bytevector-s16-ref . g$bytevector-s16-ref$5672$gDo33)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5678$gDo33)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5674$gDo33)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5697$gDo33)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5695$gDo33)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5698$gDo33)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5696$gDo33)
              (no-nans-violation? . g$no-nans-violation?$6155$gDo33)
              (no-infinities-violation? . g$no-infinities-violation?$6149$gDo33)
              (make-no-nans-violation . g$make-no-nans-violation$6154$gDo33)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$6148$gDo33)
              (fxrotate-bit-field . g$fxrotate-bit-field$6131$gDo33)
              (fxif . g$fxif$6125$gDo33)
              (fxcopy-bit-field . g$fxcopy-bit-field$6128$gDo33)
              (fxcopy-bit . g$fxcopy-bit$6126$gDo33)
              (fxbit-field . g$fxbit-field$6127$gDo33)
              (fxarithmetic-shift-right . g$fxarithmetic-shift-right$6130$gDo33)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$6129$gDo33)
              (fx-/carry . g$fx-/carry$6123$gDo33)
              (fx+/carry . g$fx+/carry$6124$gDo33)
              (fx*/carry . g$fx*/carry$6122$gDo33)
              (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$6072$gDo33)
              (bitwise-if . g$bitwise-if$6066$gDo33)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$6069$gDo33)
              (bitwise-copy-bit . g$bitwise-copy-bit$6067$gDo33)
              (bitwise-bit-field . g$bitwise-bit-field$6068$gDo33)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$6071$gDo33)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$6070$gDo33)
              (zero? . g$zero?$5293$gDo33)
              (symbol=? . g$symbol=?$5305$gDo33)
              (string>? . g$string>?$5302$gDo33)
              (string>=? . g$string>=?$5304$gDo33)
              (string=? . g$string=?$5300$gDo33)
              (string<? . g$string<?$5301$gDo33)
              (string<=? . g$string<=?$5303$gDo33)
              (rationalize . g$rationalize$5312$gDo33)
              (positive? . g$positive?$5291$gDo33)
              (odd? . g$odd?$5295$gDo33)
              (negative? . g$negative?$5292$gDo33)
              (min . g$min$5297$gDo33)
              (max . g$max$5296$gDo33)
              (map . g$map$5063$gDo33)
              (list-tail . g$list-tail$5043$gDo33)
              (list-ref . g$list-ref$5044$gDo33)
              (lcm . g$lcm$5299$gDo33)
              (gcd . g$gcd$5298$gDo33)
              (for-each . g$for-each$5064$gDo33)
              (even? . g$even?$5294$gDo33)
              (char>? . g$char>?$5309$gDo33)
              (char>=? . g$char>=?$5311$gDo33)
              (char=? . g$char=?$5307$gDo33)
              (char<? . g$char<?$5308$gDo33)
              (char<=? . g$char<=?$5310$gDo33)
              (cddddr . g$cddddr$5290$gDo33)
              (cdddar . g$cdddar$5289$gDo33)
              (cddadr . g$cddadr$5288$gDo33)
              (cddaar . g$cddaar$5287$gDo33)
              (cdaddr . g$cdaddr$5286$gDo33)
              (cdadar . g$cdadar$5285$gDo33)
              (cdaadr . g$cdaadr$5284$gDo33)
              (cdaaar . g$cdaaar$5283$gDo33)
              (cadddr . g$cadddr$5282$gDo33)
              (caddar . g$caddar$5281$gDo33)
              (cadadr . g$cadadr$5280$gDo33)
              (cadaar . g$cadaar$5279$gDo33)
              (caaddr . g$caaddr$5278$gDo33)
              (caadar . g$caadar$5277$gDo33)
              (caaadr . g$caaadr$5276$gDo33)
              (caaaar . g$caaaar$5275$gDo33)
              (cdddr . g$cdddr$5274$gDo33)
              (cddar . g$cddar$5273$gDo33)
              (cdadr . g$cdadr$5272$gDo33)
              (cdaar . g$cdaar$5271$gDo33)
              (caddr . g$caddr$5270$gDo33)
              (cadar . g$cadar$5269$gDo33)
              (caadr . g$caadr$5268$gDo33)
              (caaar . g$caaar$5267$gDo33)
              (cddr . g$cddr$5266$gDo33)
              (cdar . g$cdar$5265$gDo33)
              (cadr . g$cadr$5264$gDo33)
              (caar . g$caar$5263$gDo33)
              (boolean=? . g$boolean=?$5306$gDo33)
              (enum-set? . g$enum?$6502$gDo33)
              (make-promise . g$make-promise$5922$gDo33)
              (load/args . g$load/args$11664$gDo33)
              (printf . g$printf$6557$gDo33)
              (fprintf . g$fprintf$6558$gDo33)
              (format . g$format$6559$gDo33)
              (trace-printer . g$trace-printer$11661$gDo33)
              (make-traced-macro . g$make-traced-macro$6563$gDo33)
              (assertion-error . g$assertion-error$11608$gDo33)
              (make-parameter . g$make-parameter$6991$gDo33)
              (environment-bindings . g$environment-bindings$11586$gDo33)
              (environment-symbols . g$environment-symbols$11589$gDo33)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$11585$gDo33)
              (library-path . g$library-path$7511$gDo33)
              (expand->core . g$expand->core$11595$gDo33)
              (expand . g$expand$11593$gDo33)
              (expand-boot-cps . g$expand-boot-cps$6891$gDo33)
              (convert->cps . g$convert->cps$6888$gDo33)))))))
    (g$install-library$7527$gDo33
      'g$12785$gDo33
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12722$gDo33)
        (cosh . g$12721$gDo33)
        (sinh . g$12720$gDo33)
        (make-guid . g$12719$gDo33)
        (unspecified? . g$12718$gDo33)
        (make-list . g$5856$gDo33)
        (last-pair . g$5855$gDo33)
        (load-r5rs . g$12717$gDo33)
        (license . g$12716$gDo33)
        (stacktrace . g$12715$gDo33)
        (ironscheme-build . g$12161$gDo33)
        (set-symbol-value! . g$12702$gDo33)
        (symbol-value . g$12701$gDo33)
        (symbol-value? . g$12700$gDo33)
        (ungensym . g$12699$gDo33)
        (gensym . g$12698$gDo33)
        (void . g$12697$gDo33)
        (compile-system-libraries . g$12163$gDo33)
        (compile->closure . g$12165$gDo33)
        (compile . g$12164$gDo33)
        (load . g$12160$gDo33)
        (interaction-environment . g$9180$gDo33)
        (string-upcase . g$12693$gDo33)
        (string-titlecase . g$12692$gDo33)
        (string-normalize-nfkd . g$12691$gDo33)
        (string-normalize-nfkc . g$12690$gDo33)
        (string-normalize-nfd . g$12689$gDo33)
        (string-normalize-nfc . g$12688$gDo33)
        (string-foldcase . g$12687$gDo33)
        (string-downcase . g$12686$gDo33)
        (string-ci>? . g$6995$gDo33)
        (string-ci>=? . g$6997$gDo33)
        (string-ci=? . g$6993$gDo33)
        (string-ci<? . g$6994$gDo33)
        (string-ci<=? . g$6996$gDo33)
        (char-whitespace? . g$12685$gDo33)
        (char-upper-case? . g$12684$gDo33)
        (char-title-case? . g$12683$gDo33)
        (char-numeric? . g$12682$gDo33)
        (char-lower-case? . g$12681$gDo33)
        (char-general-category . g$12680$gDo33)
        (char-upcase . g$12679$gDo33)
        (char-titlecase . g$12678$gDo33)
        (char-foldcase . g$12677$gDo33)
        (char-downcase . g$12676$gDo33)
        (char-ci>? . g$7034$gDo33)
        (char-ci>=? . g$7036$gDo33)
        (char-ci=? . g$7032$gDo33)
        (char-ci<? . g$7033$gDo33)
        (char-ci<=? . g$7035$gDo33)
        (char-alphabetic? . g$12675$gDo33)
        (make-variable-transformer . g$8775$gDo33)
        (identifier? . g$9174$gDo33)
        (generate-temporaries . g$9163$gDo33)
        (free-identifier=? . g$9164$gDo33)
        (syntax->datum . g$9176$gDo33)
        (datum->syntax . g$9175$gDo33)
        (bound-identifier=? . g$9165$gDo33)
        (record-type-descriptor? . g$12674$gDo33)
        (record-predicate . g$12673$gDo33)
        (record-mutator . g$12672$gDo33)
        (record-constructor . g$12671$gDo33)
        (record-accessor . g$12670$gDo33)
        (make-record-type-descriptor . g$12669$gDo33)
        (make-record-constructor-descriptor . g$12668$gDo33)
        (record? . g$12667$gDo33)
        (record-type-uid . g$12666$gDo33)
        (record-type-sealed? . g$12665$gDo33)
        (record-type-parent . g$12664$gDo33)
        (record-type-opaque? . g$12663$gDo33)
        (record-type-name . g$12662$gDo33)
        (record-type-generative? . g$12661$gDo33)
        (record-type-field-names . g$12660$gDo33)
        (record-rtd . g$12659$gDo33)
        (record-field-mutable? . g$12658$gDo33)
        (delete-file . g$6569$gDo33)
        (file-exists? . g$6568$gDo33)
        (vector-sort! . g$12657$gDo33)
        (vector-sort . g$12656$gDo33)
        (list-sort . g$6935$gDo33)
        (symbol-hash . g$12655$gDo33)
        (string-ci-hash . g$12654$gDo33)
        (string-hash . g$12653$gDo33)
        (equal-hash . g$12652$gDo33)
        (hashtable-equivalence-function . g$12651$gDo33)
        (make-hashtable . g$12650$gDo33)
        (hashtable-hash-function . g$12649$gDo33)
        (make-eqv-hashtable . g$6537$gDo33)
        (make-eq-hashtable . g$6536$gDo33)
        (hashtable? . g$12648$gDo33)
        (hashtable-update! . g$6543$gDo33)
        (hashtable-size . g$6538$gDo33)
        (hashtable-set! . g$6540$gDo33)
        (hashtable-ref . g$6539$gDo33)
        (hashtable-mutable? . g$12647$gDo33)
        (hashtable-keys . g$12646$gDo33)
        (hashtable-entries . g$12645$gDo33)
        (hashtable-delete! . g$6541$gDo33)
        (hashtable-copy . g$12644$gDo33)
        (hashtable-contains? . g$6542$gDo33)
        (hashtable-clear! . g$6544$gDo33)
        (call-with-output-file . g$7420$gDo33)
        (call-with-input-file . g$7419$gDo33)
        (write-char . g$7401$gDo33)
        (write . g$12643$gDo33)
        (with-output-to-file . g$7418$gDo33)
        (with-input-from-file . g$7417$gDo33)
        (read-char . g$7400$gDo33)
        (read . g$12642$gDo33)
        (peek-char . g$7399$gDo33)
        (open-output-file . g$12641$gDo33)
        (open-input-file . g$12640$gDo33)
        (newline . g$7421$gDo33)
        (display . g$12639$gDo33)
        (close-output-port . g$12638$gDo33)
        (close-input-port . g$12637$gDo33)
        (eof-object? . g$12636$gDo33)
        (eof-object . g$12635$gDo33)
        (current-error-port . g$12634$gDo33)
        (current-output-port . g$12633$gDo33)
        (current-input-port . g$12632$gDo33)
        (output-port? . g$12631$gDo33)
        (input-port? . g$12630$gDo33)
        (utf-8-codec . g$12629$gDo33)
        (utf-16-codec . g$12628$gDo33)
        (transcoder-error-handling-mode . g$12627$gDo33)
        (transcoder-eol-style . g$12626$gDo33)
        (transcoder-codec . g$12625$gDo33)
        (transcoded-port . g$12624$gDo33)
        (textual-port? . g$12623$gDo33)
        (string->bytevector . g$12622$gDo33)
        (standard-output-port . g$12621$gDo33)
        (standard-input-port . g$12620$gDo33)
        (standard-error-port . g$12619$gDo33)
        (set-port-position! . g$12618$gDo33)
        (put-u8 . g$12617$gDo33)
        (put-string . g$12616$gDo33)
        (put-datum . g$12615$gDo33)
        (put-char . g$12614$gDo33)
        (put-bytevector . g$12613$gDo33)
        (port? . g$7386$gDo33)
        (port-transcoder . g$12612$gDo33)
        (port-position . g$12611$gDo33)
        (port-has-set-port-position!? . g$12610$gDo33)
        (port-has-port-position? . g$12609$gDo33)
        (port-eof? . g$12608$gDo33)
        (output-port-buffer-mode . g$12607$gDo33)
        (open-string-output-port . g$7385$gDo33)
        (open-string-input-port . g$12606$gDo33)
        (open-file-output-port . g$12605$gDo33)
        (open-file-input/output-port . g$12604$gDo33)
        (open-file-input-port . g$12603$gDo33)
        (open-bytevector-output-port . g$12602$gDo33)
        (open-bytevector-input-port . g$12601$gDo33)
        (native-transcoder . g$12600$gDo33)
        (native-eol-style . g$12599$gDo33)
        (make-transcoder . g$12598$gDo33)
        (latin-1-codec . g$12597$gDo33)
        (make-i/o-write-error . g$7241$gDo33)
        (make-i/o-read-error . g$7227$gDo33)
        (make-i/o-port-error . g$7346$gDo33)
        (make-i/o-invalid-position-error . g$7256$gDo33)
        (make-i/o-filename-error . g$7273$gDo33)
        (make-i/o-file-protection-error . g$7289$gDo33)
        (make-i/o-file-is-read-only-error . g$7303$gDo33)
        (make-i/o-file-does-not-exist-error . g$7331$gDo33)
        (make-i/o-file-already-exists-error . g$7317$gDo33)
        (make-i/o-error . g$7213$gDo33)
        (make-i/o-encoding-error . g$7377$gDo33)
        (make-i/o-decoding-error . g$7362$gDo33)
        (make-custom-textual-output-port . g$12596$gDo33)
        (make-custom-textual-input/output-port . g$12595$gDo33)
        (make-custom-textual-input-port . g$12594$gDo33)
        (make-custom-binary-output-port . g$12593$gDo33)
        (make-custom-binary-input/output-port . g$12592$gDo33)
        (make-custom-binary-input-port . g$12591$gDo33)
        (make-bytevector . g$12590$gDo33)
        (lookahead-u8 . g$12589$gDo33)
        (lookahead-char . g$12588$gDo33)
        (i/o-write-error? . g$7242$gDo33)
        (i/o-read-error? . g$7228$gDo33)
        (i/o-port-error? . g$7348$gDo33)
        (i/o-invalid-position-error? . g$7258$gDo33)
        (i/o-error-position . g$7259$gDo33)
        (i/o-filename-error? . g$7275$gDo33)
        (i/o-file-protection-error? . g$7290$gDo33)
        (i/o-file-is-read-only-error? . g$7304$gDo33)
        (i/o-file-does-not-exist-error? . g$7332$gDo33)
        (i/o-file-already-exists-error? . g$7318$gDo33)
        (i/o-error? . g$7214$gDo33)
        (i/o-error-port . g$7349$gDo33)
        (i/o-error-filename . g$7276$gDo33)
        (i/o-encoding-error? . g$7379$gDo33)
        (i/o-encoding-error-char . g$7380$gDo33)
        (i/o-decoding-error? . g$7363$gDo33)
        (get-u8 . g$12587$gDo33)
        (get-string-n! . g$12586$gDo33)
        (get-string-n . g$12585$gDo33)
        (get-string-all . g$12584$gDo33)
        (get-line . g$12583$gDo33)
        (get-datum . g$12582$gDo33)
        (get-char . g$12581$gDo33)
        (get-bytevector-some . g$12580$gDo33)
        (get-bytevector-n! . g$12579$gDo33)
        (get-bytevector-n . g$12578$gDo33)
        (get-bytevector-all . g$12577$gDo33)
        (flush-output-port . g$12576$gDo33)
        (close-port . g$12575$gDo33)
        (call-with-string-output-port . g$7387$gDo33)
        (call-with-port . g$7388$gDo33)
        (call-with-bytevector-output-port . g$12574$gDo33)
        (bytevector->string . g$12573$gDo33)
        (buffer-mode? . g$12572$gDo33)
        (binary-port? . g$12571$gDo33)
        (scheme-report-environment . g$9153$gDo33)
        (quotient . g$6914$gDo33)
        (null-environment . g$9152$gDo33)
        (remainder . g$6915$gDo33)
        (modulo . g$6916$gDo33)
        (inexact->exact . g$6911$gDo33)
        (force . g$6918$gDo33)
        (exact->inexact . g$6912$gDo33)
        (exit . g$12570$gDo33)
        (command-line . g$12157$gDo33)
        (string-fill! . g$12569$gDo33)
        (string-set! . g$12568$gDo33)
        (set-cdr! . g$12567$gDo33)
        (set-car! . g$12566$gDo33)
        (remove . g$5878$gDo33)
        (remv . g$5879$gDo33)
        (remp . g$5859$gDo33)
        (remq . g$5880$gDo33)
        (partition . g$5858$gDo33)
        (memv . g$5866$gDo33)
        (memq . g$5865$gDo33)
        (memp . g$5868$gDo33)
        (member . g$5867$gDo33)
        (exists . g$5872$gDo33)
        (for-all . g$5871$gDo33)
        (fold-right . g$5877$gDo33)
        (fold-left . g$5876$gDo33)
        (find . g$5857$gDo33)
        (filter . g$5860$gDo33)
        (cons* . g$5875$gDo33)
        (assv . g$5862$gDo33)
        (assq . g$5861$gDo33)
        (assp . g$5864$gDo33)
        (assoc . g$5863$gDo33)
        (with-exception-handler . g$12565$gDo33)
        (raise-continuable . g$12564$gDo33)
        (raise . g$12563$gDo33)
        (eval . g$9155$gDo33)
        (environment . g$9151$gDo33)
        (make-enumeration . g$7485$gDo33)
        (enum-set=? . g$7492$gDo33)
        (enum-set-universe . g$7486$gDo33)
        (enum-set-union . g$7493$gDo33)
        (enum-set-subset? . g$7491$gDo33)
        (enum-set-projection . g$7497$gDo33)
        (enum-set-member? . g$7490$gDo33)
        (enum-set-intersection . g$7494$gDo33)
        (enum-set-indexer . g$7487$gDo33)
        (enum-set-difference . g$7495$gDo33)
        (enum-set-constructor . g$7488$gDo33)
        (enum-set-complement . g$7496$gDo33)
        (enum-set->list . g$7489$gDo33)
        (who-condition? . g$6823$gDo33)
        (warning? . g$6734$gDo33)
        (violation? . g$6776$gDo33)
        (undefined-violation? . g$6900$gDo33)
        (syntax-violation? . g$6884$gDo33)
        (syntax-violation-subform . g$6886$gDo33)
        (syntax-violation-form . g$6885$gDo33)
        (syntax-violation . g$9173$gDo33)
        (simple-conditions . g$12562$gDo33)
        (serious-condition? . g$6748$gDo33)
        (non-continuable-violation? . g$6838$gDo33)
        (message-condition? . g$6719$gDo33)
        (make-who-condition . g$6821$gDo33)
        (make-warning . g$6733$gDo33)
        (make-violation . g$6775$gDo33)
        (make-undefined-violation . g$6899$gDo33)
        (make-syntax-violation . g$6881$gDo33)
        (make-serious-condition . g$6747$gDo33)
        (make-non-continuable-violation . g$6837$gDo33)
        (make-message-condition . g$6717$gDo33)
        (make-lexical-violation . g$6865$gDo33)
        (make-irritants-condition . g$6804$gDo33)
        (make-implementation-restriction-violation . g$6851$gDo33)
        (make-error . g$6761$gDo33)
        (make-assertion-violation . g$6789$gDo33)
        (lexical-violation? . g$6866$gDo33)
        (irritants-condition? . g$6806$gDo33)
        (implementation-restriction-violation? . g$6852$gDo33)
        (error? . g$6762$gDo33)
        (condition-who . g$6824$gDo33)
        (condition-predicate . g$12561$gDo33)
        (condition-message . g$6720$gDo33)
        (condition-irritants . g$6807$gDo33)
        (condition-accessor . g$12560$gDo33)
        (condition . g$12559$gDo33)
        (assertion-violation? . g$6790$gDo33)
        (condition? . g$12558$gDo33)
        (utf32->string . g$12557$gDo33)
        (utf16->string . g$12556$gDo33)
        (utf8->string . g$12555$gDo33)
        (uint-list->bytevector . g$12554$gDo33)
        (u8-list->bytevector . g$12553$gDo33)
        (string->utf8 . g$12552$gDo33)
        (string->utf32 . g$12551$gDo33)
        (string->utf16 . g$12550$gDo33)
        (sint-list->bytevector . g$12549$gDo33)
        (native-endianness . g$6575$gDo33)
        (bytevector? . g$12548$gDo33)
        (bytevector=? . g$12547$gDo33)
        (bytevector-uint-set! . g$12546$gDo33)
        (bytevector-uint-ref . g$12545$gDo33)
        (bytevector-u8-set! . g$12544$gDo33)
        (bytevector-u8-ref . g$12543$gDo33)
        (bytevector-u64-set! . g$6596$gDo33)
        (bytevector-u64-ref . g$6592$gDo33)
        (bytevector-u64-native-set! . g$6598$gDo33)
        (bytevector-u64-native-ref . g$6594$gDo33)
        (bytevector-u32-set! . g$6588$gDo33)
        (bytevector-u32-ref . g$6584$gDo33)
        (bytevector-u32-native-set! . g$6590$gDo33)
        (bytevector-u32-native-ref . g$6586$gDo33)
        (bytevector-u16-set! . g$6580$gDo33)
        (bytevector-u16-ref . g$6576$gDo33)
        (bytevector-u16-native-set! . g$6582$gDo33)
        (bytevector-u16-native-ref . g$6578$gDo33)
        (bytevector-sint-set! . g$12542$gDo33)
        (bytevector-sint-ref . g$12541$gDo33)
        (bytevector-s8-set! . g$12540$gDo33)
        (bytevector-s8-ref . g$12539$gDo33)
        (bytevector-s64-set! . g$6597$gDo33)
        (bytevector-s64-ref . g$6593$gDo33)
        (bytevector-s64-native-set! . g$6599$gDo33)
        (bytevector-s64-native-ref . g$6595$gDo33)
        (bytevector-s32-set! . g$6589$gDo33)
        (bytevector-s32-ref . g$6585$gDo33)
        (bytevector-s32-native-set! . g$6591$gDo33)
        (bytevector-s32-native-ref . g$6587$gDo33)
        (bytevector-s16-set! . g$6581$gDo33)
        (bytevector-s16-ref . g$6577$gDo33)
        (bytevector-s16-native-set! . g$6583$gDo33)
        (bytevector-s16-native-ref . g$6579$gDo33)
        (bytevector-length . g$12538$gDo33)
        (bytevector-ieee-single-set! . g$12537$gDo33)
        (bytevector-ieee-single-ref . g$12536$gDo33)
        (bytevector-ieee-single-native-set! . g$6602$gDo33)
        (bytevector-ieee-single-native-ref . g$6600$gDo33)
        (bytevector-ieee-double-set! . g$12535$gDo33)
        (bytevector-ieee-double-ref . g$12534$gDo33)
        (bytevector-ieee-double-native-set! . g$6603$gDo33)
        (bytevector-ieee-double-native-ref . g$6601$gDo33)
        (bytevector-fill! . g$12533$gDo33)
        (bytevector-copy! . g$12532$gDo33)
        (bytevector-copy . g$12531$gDo33)
        (bytevector->uint-list . g$12530$gDo33)
        (bytevector->u8-list . g$12529$gDo33)
        (bytevector->sint-list . g$12528$gDo33)
        (no-nans-violation? . g$7199$gDo33)
        (no-infinities-violation? . g$7185$gDo33)
        (make-no-nans-violation . g$7198$gDo33)
        (make-no-infinities-violation . g$7184$gDo33)
        (real->flonum . g$12527$gDo33)
        (flzero? . g$12526$gDo33)
        (fltruncate . g$12525$gDo33)
        (fltan . g$12524$gDo33)
        (flsqrt . g$12523$gDo33)
        (flsin . g$12522$gDo33)
        (flround . g$12521$gDo33)
        (flpositive? . g$12520$gDo33)
        (flonum? . g$12519$gDo33)
        (flodd? . g$12518$gDo33)
        (flnumerator . g$12517$gDo33)
        (flnegative? . g$12516$gDo33)
        (flnan? . g$12515$gDo33)
        (flmod0 . g$12514$gDo33)
        (flmod . g$12513$gDo33)
        (flmin . g$12512$gDo33)
        (flmax . g$12511$gDo33)
        (fllog . g$12510$gDo33)
        (flinteger? . g$12509$gDo33)
        (flinfinite? . g$12508$gDo33)
        (flfloor . g$12507$gDo33)
        (flfinite? . g$12506$gDo33)
        (flexpt . g$12505$gDo33)
        (flexp . g$12504$gDo33)
        (fleven? . g$12503$gDo33)
        (fldiv0-and-mod0 . g$12502$gDo33)
        (fldiv0 . g$12501$gDo33)
        (fldiv-and-mod . g$12500$gDo33)
        (fldiv . g$12499$gDo33)
        (fldenominator . g$12498$gDo33)
        (flcos . g$12497$gDo33)
        (flceiling . g$12496$gDo33)
        (flatan . g$12495$gDo33)
        (flasin . g$12494$gDo33)
        (flacos . g$12493$gDo33)
        (flabs . g$12492$gDo33)
        (fl>? . g$12491$gDo33)
        (fl>=? . g$12490$gDo33)
        (fl=? . g$12489$gDo33)
        (fl<? . g$12488$gDo33)
        (fl<=? . g$12487$gDo33)
        (fl/ . g$12486$gDo33)
        (fl- . g$12485$gDo33)
        (fl+ . g$12484$gDo33)
        (fl* . g$12483$gDo33)
        (fixnum->flonum . g$12482$gDo33)
        (fxzero? . g$12481$gDo33)
        (fxxor . g$12480$gDo33)
        (fxrotate-bit-field . g$7131$gDo33)
        (fxreverse-bit-field . g$12479$gDo33)
        (fxpositive? . g$12478$gDo33)
        (fxodd? . g$12477$gDo33)
        (fxnot . g$12476$gDo33)
        (fxnegative? . g$12475$gDo33)
        (fxmod0 . g$12474$gDo33)
        (fxmod . g$12473$gDo33)
        (fxmin . g$12472$gDo33)
        (fxmax . g$12471$gDo33)
        (fxlength . g$12470$gDo33)
        (fxior . g$12469$gDo33)
        (fxif . g$7125$gDo33)
        (fxfirst-bit-set . g$12468$gDo33)
        (fxeven? . g$12467$gDo33)
        (fxdiv0-and-mod0 . g$12466$gDo33)
        (fxdiv0 . g$12465$gDo33)
        (fxdiv-and-mod . g$12464$gDo33)
        (fxdiv . g$12463$gDo33)
        (fxcopy-bit-field . g$7128$gDo33)
        (fxcopy-bit . g$7126$gDo33)
        (fxbit-set? . g$12462$gDo33)
        (fxbit-field . g$7127$gDo33)
        (fxbit-count . g$12461$gDo33)
        (fxarithmetic-shift-right . g$7130$gDo33)
        (fxarithmetic-shift-left . g$7129$gDo33)
        (fxarithmetic-shift . g$12460$gDo33)
        (fxand . g$12459$gDo33)
        (fx>? . g$12458$gDo33)
        (fx>=? . g$12457$gDo33)
        (fx=? . g$12456$gDo33)
        (fx<? . g$12455$gDo33)
        (fx<=? . g$12454$gDo33)
        (fx-/carry . g$7123$gDo33)
        (fx- . g$12453$gDo33)
        (fx+/carry . g$7124$gDo33)
        (fx+ . g$12452$gDo33)
        (fx*/carry . g$7122$gDo33)
        (fx* . g$12451$gDo33)
        (greatest-fixnum . g$12450$gDo33)
        (least-fixnum . g$12449$gDo33)
        (fixnum-width . g$12448$gDo33)
        (fixnum? . g$12447$gDo33)
        (bitwise-rotate-bit-field . g$7096$gDo33)
        (bitwise-reverse-bit-field . g$12446$gDo33)
        (bitwise-length . g$12445$gDo33)
        (bitwise-if . g$7090$gDo33)
        (bitwise-first-bit-set . g$12444$gDo33)
        (bitwise-copy-bit-field . g$7093$gDo33)
        (bitwise-copy-bit . g$7091$gDo33)
        (bitwise-bit-set? . g$12443$gDo33)
        (bitwise-bit-field . g$7092$gDo33)
        (bitwise-bit-count . g$12442$gDo33)
        (bitwise-xor . g$12441$gDo33)
        (bitwise-ior . g$12440$gDo33)
        (bitwise-and . g$12439$gDo33)
        (bitwise-not . g$12438$gDo33)
        (bitwise-arithmetic-shift-right . g$7095$gDo33)
        (bitwise-arithmetic-shift-left . g$7094$gDo33)
        (bitwise-arithmetic-shift . g$12437$gDo33)
        (zero? . g$6021$gDo33)
        (vector? . g$12436$gDo33)
        (vector-set! . g$12435$gDo33)
        (vector-ref . g$12434$gDo33)
        (vector-map . g$12433$gDo33)
        (vector-length . g$12432$gDo33)
        (vector-for-each . g$12431$gDo33)
        (vector-fill! . g$12430$gDo33)
        (vector->list . g$12429$gDo33)
        (vector . g$12428$gDo33)
        (values . g$12427$gDo33)
        (truncate . g$12426$gDo33)
        (tan . g$12425$gDo33)
        (symbol? . g$12424$gDo33)
        (symbol=? . g$6067$gDo33)
        (symbol->string . g$12423$gDo33)
        (substring . g$12422$gDo33)
        (string? . g$12421$gDo33)
        (string>? . g$6064$gDo33)
        (string>=? . g$6066$gDo33)
        (string=? . g$6062$gDo33)
        (string<? . g$6063$gDo33)
        (string<=? . g$6065$gDo33)
        (string-ref . g$12420$gDo33)
        (string-length . g$12419$gDo33)
        (string-for-each . g$12418$gDo33)
        (string-copy . g$12417$gDo33)
        (string-append . g$12416$gDo33)
        (string->symbol . g$12415$gDo33)
        (string->number . g$12414$gDo33)
        (string->list . g$12413$gDo33)
        (string . g$12412$gDo33)
        (sqrt . g$12411$gDo33)
        (sin . g$12410$gDo33)
        (round . g$12409$gDo33)
        (reverse . g$12408$gDo33)
        (real? . g$12407$gDo33)
        (real-valued? . g$12406$gDo33)
        (real-part . g$12405$gDo33)
        (rationalize . g$6108$gDo33)
        (rational? . g$12404$gDo33)
        (rational-valued? . g$12403$gDo33)
        (procedure? . g$12402$gDo33)
        (positive? . g$6019$gDo33)
        (pair? . g$12401$gDo33)
        (odd? . g$6023$gDo33)
        (numerator . g$12400$gDo33)
        (number? . g$12399$gDo33)
        (number->string . g$12398$gDo33)
        (null? . g$12397$gDo33)
        (not . g$12396$gDo33)
        (negative? . g$6020$gDo33)
        (nan? . g$12395$gDo33)
        (min . g$6025$gDo33)
        (max . g$6024$gDo33)
        (map . g$5873$gDo33)
        (make-vector . g$12394$gDo33)
        (make-string . g$12393$gDo33)
        (make-rectangular . g$12392$gDo33)
        (make-polar . g$12391$gDo33)
        (magnitude . g$12390$gDo33)
        (log . g$12389$gDo33)
        (list? . g$12388$gDo33)
        (list-tail . g$5853$gDo33)
        (list-ref . g$5854$gDo33)
        (list->vector . g$12387$gDo33)
        (list->string . g$12386$gDo33)
        (list . g$12385$gDo33)
        (length . g$12384$gDo33)
        (lcm . g$6027$gDo33)
        (integer? . g$12383$gDo33)
        (integer-valued? . g$12382$gDo33)
        (integer->char . g$12381$gDo33)
        (infinite? . g$12380$gDo33)
        (inexact? . g$12379$gDo33)
        (inexact . g$12378$gDo33)
        (imag-part . g$12377$gDo33)
        (gcd . g$6026$gDo33)
        (for-each . g$5874$gDo33)
        (floor . g$12376$gDo33)
        (finite? . g$12375$gDo33)
        (expt . g$12374$gDo33)
        (exp . g$12373$gDo33)
        (exact? . g$12372$gDo33)
        (exact-integer-sqrt . g$12371$gDo33)
        (exact . g$12370$gDo33)
        (even? . g$6022$gDo33)
        (error . g$12369$gDo33)
        (eqv? . g$12368$gDo33)
        (equal? . g$12367$gDo33)
        (eq? . g$12366$gDo33)
        (dynamic-wind . g$12365$gDo33)
        (div0-and-mod0 . g$12364$gDo33)
        (mod0 . g$12363$gDo33)
        (div0 . g$12362$gDo33)
        (div-and-mod . g$12361$gDo33)
        (mod . g$12360$gDo33)
        (div . g$12359$gDo33)
        (denominator . g$12358$gDo33)
        (cos . g$12357$gDo33)
        (cons . g$12356$gDo33)
        (complex? . g$12355$gDo33)
        (char? . g$12354$gDo33)
        (char>? . g$6105$gDo33)
        (char>=? . g$6107$gDo33)
        (char=? . g$6103$gDo33)
        (char<? . g$6104$gDo33)
        (char<=? . g$6106$gDo33)
        (char->integer . g$12353$gDo33)
        (ceiling . g$12352$gDo33)
        (call-with-values . g$12351$gDo33)
        (call/cc . g$12350$gDo33)
        (call-with-current-continuation . g$12349$gDo33)
        (cddddr . g$6018$gDo33)
        (cdddar . g$6017$gDo33)
        (cddadr . g$6016$gDo33)
        (cddaar . g$6015$gDo33)
        (cdaddr . g$6014$gDo33)
        (cdadar . g$6013$gDo33)
        (cdaadr . g$6012$gDo33)
        (cdaaar . g$6011$gDo33)
        (cadddr . g$6010$gDo33)
        (caddar . g$6009$gDo33)
        (cadadr . g$6008$gDo33)
        (cadaar . g$6007$gDo33)
        (caaddr . g$6006$gDo33)
        (caadar . g$6005$gDo33)
        (caaadr . g$6004$gDo33)
        (caaaar . g$6003$gDo33)
        (cdddr . g$6002$gDo33)
        (cddar . g$6001$gDo33)
        (cdadr . g$6000$gDo33)
        (cdaar . g$5999$gDo33)
        (caddr . g$5998$gDo33)
        (cadar . g$5997$gDo33)
        (caadr . g$5996$gDo33)
        (caaar . g$5995$gDo33)
        (cddr . g$5994$gDo33)
        (cdar . g$5993$gDo33)
        (cadr . g$5992$gDo33)
        (caar . g$5991$gDo33)
        (cdr . g$12348$gDo33)
        (car . g$12347$gDo33)
        (boolean? . g$12346$gDo33)
        (boolean=? . g$6068$gDo33)
        (atan . g$12345$gDo33)
        (assertion-violation . g$12344$gDo33)
        (asin . g$12343$gDo33)
        (apply . g$12342$gDo33)
        (append . g$12341$gDo33)
        (angle . g$12340$gDo33)
        (acos . g$12339$gDo33)
        (abs . g$12338$gDo33)
        (/ . g$12337$gDo33)
        (* . g$12336$gDo33)
        (- . g$12335$gDo33)
        (+ . g$12334$gDo33)
        (>= . g$12333$gDo33)
        (> . g$12332$gDo33)
        (= . g$12331$gDo33)
        (<= . g$12330$gDo33)
        (< . g$12329$gDo33)
        (deserialize-port . g$12325$gDo33)
        (serialize-port . g$12324$gDo33)
        (enum-set? . g$7460$gDo33)
        (load/args . g$12159$gDo33)
        (printf . g$7571$gDo33)
        (fprintf . g$7572$gDo33)
        (format . g$7573$gDo33)
        (procedure-form . g$12323$gDo33)
        (procedure-environment . g$12322$gDo33)
        (procedure-name . g$12321$gDo33)
        (procedure-arity . g$12320$gDo33)
        (gc-collect . g$12319$gDo33)
        (clr-type? . g$12318$gDo33)
        (get-clr-type . g$12317$gDo33)
        (vector-append . g$12315$gDo33)
        (vector-filter . g$12314$gDo33)
        (vector-reverse! . g$12313$gDo33)
        (vector-contains? . g$12312$gDo33)
        (vector-index-of . g$12311$gDo33)
        (vector-copy . g$12310$gDo33)
        (vector-binary-search . g$12309$gDo33)
        (string-ci-compare . g$12308$gDo33)
        (string-compare . g$12307$gDo33)
        (string-format . g$12306$gDo33)
        (trace-printer . g$12156$gDo33)
        (time-it . g$12304$gDo33)
        (make-parameter . g$7874$gDo33)
        (open-tcp-input/output-port . g$12301$gDo33)
        (hashtable-for-each . g$12300$gDo33)
        (hashtable-map . g$12299$gDo33)
        (environment-bindings . g$9147$gDo33)
        (environment-symbols . g$9150$gDo33)
        (interaction-environment-symbols . g$9146$gDo33)
        (optimization-level . g$12298$gDo33)
        (library-path . g$8329$gDo33)
        (expand->core . g$9156$gDo33)
        (expand . g$9154$gDo33)
        (expand-boot-cps . g$7651$gDo33)
        (convert->cps . g$7648$gDo33)
        (&no-nans . g$12297$gDo33)
        (&no-infinities . g$12296$gDo33)
        (&i/o-encoding . g$12295$gDo33)
        (&i/o-decoding . g$12294$gDo33)
        (&i/o-port . g$12293$gDo33)
        (&i/o-file-does-not-exist . g$12292$gDo33)
        (&i/o-file-already-exists . g$12291$gDo33)
        (&i/o-file-is-read-only . g$12290$gDo33)
        (&i/o-file-protection . g$12289$gDo33)
        (&i/o-filename . g$12288$gDo33)
        (&i/o-invalid-position . g$12287$gDo33)
        (&i/o-write . g$12286$gDo33)
        (&i/o-read . g$12285$gDo33)
        (&i/o . g$12284$gDo33)
        (&non-continuable . g$12283$gDo33)
        (&undefined . g$12282$gDo33)
        (&syntax . g$12281$gDo33)
        (&lexical . g$12280$gDo33)
        (&implementation-restriction . g$12279$gDo33)
        (&who . g$12278$gDo33)
        (&irritants . g$12277$gDo33)
        (&assertion . g$12276$gDo33)
        (&violation . g$12275$gDo33)
        (&error . g$12274$gDo33)
        (&serious . g$12273$gDo33)
        (&warning . g$12272$gDo33)
        (&message . g$12271$gDo33)
        (&condition . g$12270$gDo33)
        (define-condition-type . g$12269$gDo33)
        (define-enumeration . g$12268$gDo33)
        (define-record-type . g$12267$gDo33)
        (parent-rtd . g$12266$gDo33)
        (nongenerative . g$12265$gDo33)
        (opaque . g$12264$gDo33)
        (sealed . g$12263$gDo33)
        (protocol . g$12262$gDo33)
        (parent . g$12261$gDo33)
        (immutable . g$12260$gDo33)
        (mutable . g$12259$gDo33)
        (fields . g$12258$gDo33)
        (error-handling-mode . g$12257$gDo33)
        (file-options . g$12256$gDo33)
        (buffer-mode . g$12255$gDo33)
        (eol-style . g$12254$gDo33)
        (guard . g$12253$gDo33)
        (trace-letrec-syntax . g$12252$gDo33)
        (trace-let-syntax . g$12251$gDo33)
        (trace-define-syntax . g$12250$gDo33)
        (trace-define . g$12249$gDo33)
        (trace-lambda . g$12248$gDo33)
        (unsyntax-splicing . g$12247$gDo33)
        (unsyntax . g$12246$gDo33)
        (unquote-splicing . g$12245$gDo33)
        (unquote . g$12244$gDo33)
        (_ . g$12243$gDo33)
        (else . g$12242$gDo33)
        (=> . g$12241$gDo33)
        (... . g$12240$gDo33)
        (assert . g$12239$gDo33)
        (endianness . g$12238$gDo33)
        (delay . g$12237$gDo33)
        (time . g$12236$gDo33)
        (or . g$12235$gDo33)
        (and . g$12234$gDo33)
        (do . g$12233$gDo33)
        (cond . g$12232$gDo33)
        (let* . g$12231$gDo33)
        (let . g$12230$gDo33)
        (identifier-syntax . g$12229$gDo33)
        (with-syntax . g$12228$gDo33)
        (quasisyntax . g$12227$gDo33)
        (quasiquote . g$12226$gDo33)
        (syntax-rules . g$12225$gDo33)
        (include-into . g$12224$gDo33)
        (include . g$12223$gDo33)
        (let-values . g$12221$gDo33)
        (let*-values . g$12220$gDo33)
        (record-constructor-descriptor . g$12219$gDo33)
        (record-type-descriptor . g$12218$gDo33)
        (fluid-let-syntax . g$12217$gDo33)
        (case . g$12216$gDo33)
        (parameterize . g$12215$gDo33)
        (unless . g$12214$gDo33)
        (when . g$12213$gDo33)
        (if . g$12212$gDo33)
        (letrec* . g$12211$gDo33)
        (letrec . g$12210$gDo33)
        (case-lambda . g$12208$gDo33)
        (lambda . g$12207$gDo33)
        (syntax . g$12206$gDo33)
        (syntax-case . g$12205$gDo33)
        (quote . g$12204$gDo33)
        (letrec-syntax . g$12202$gDo33)
        (let-syntax . g$12201$gDo33)
        (set! . g$12200$gDo33)
        (export . g$12199$gDo33)
        (import . g$12198$gDo33)
        (library . g$12197$gDo33)
        (begin . g$12196$gDo33)
        (module . g$12195$gDo33)
        (define-syntax . g$12194$gDo33)
        (define . g$12193$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12786$gDo33
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$12302$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$gDo33
      'g$12787$gDo33
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12727$gDo33)
        (annotation-source . g$12726$gDo33)
        (annotation-expression . g$12725$gDo33)
        (annotation? . g$12724$gDo33)
        (read-annotated . g$12723$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$gDo33
      'g$12788$gDo33
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12696$gDo33)
        (serialize-library . g$12695$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$gDo33
      'g$12789$gDo33
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8777$gDo33)
        (variable-transformer? . g$8776$gDo33)
        (eqv-hash . g$12327$gDo33)
        (reverse! . g$12326$gDo33)
        (make-promise . g$6917$gDo33)
        (format . g$7573$gDo33)
        (get-command-line . g$12316$gDo33)
        (make-traced-procedure . g$12305$gDo33)
        (make-traced-macro . g$7593$gDo33)
        (assertion-error . g$9169$gDo33)
        (library-locator . g$12303$gDo33)
        (get-library-paths . g$12302$gDo33)
        (library-path . g$8329$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$gDo33
      'g$12790$gDo33
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$12328$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12791$gDo33
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12714$gDo33)
        (clr-field-set!-internal . g$12713$gDo33)
        (clr-field-get-internal . g$12712$gDo33)
        (clr-cast-internal . g$12711$gDo33)
        (clr-call-internal . g$12710$gDo33)
        (clr-new-internal . g$12709$gDo33)
        (clr-new-array-internal . g$12708$gDo33)
        (clr-is-internal . g$12707$gDo33)
        (clr-reference-internal . g$12706$gDo33)
        (clr-using-internal . g$12705$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12792$gDo33
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$12245$gDo33)
        (unquote . g$12244$gDo33)
        (else . g$12242$gDo33)
        (=> . g$12241$gDo33)
        (delay . g$12237$gDo33)
        (or . g$12235$gDo33)
        (and . g$12234$gDo33)
        (do . g$12233$gDo33)
        (cond . g$12232$gDo33)
        (let* . g$12231$gDo33)
        (let . g$12230$gDo33)
        (quasiquote . g$12226$gDo33)
        (syntax-rules . g$12225$gDo33)
        (case . g$12216$gDo33)
        (if . g$12212$gDo33)
        (letrec . g$12210$gDo33)
        (lambda . g$12207$gDo33)
        (quote . g$12204$gDo33)
        (letrec-syntax . g$12202$gDo33)
        (let-syntax . g$12201$gDo33)
        (set! . g$12200$gDo33)
        (begin . g$12196$gDo33)
        (define-syntax . g$12194$gDo33)
        (define . g$12193$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$gDo33
      'g$12793$gDo33
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$9180$gDo33)
        (char-ready? . g$12694$gDo33)
        (string-ci>? . g$6995$gDo33)
        (string-ci>=? . g$6997$gDo33)
        (string-ci=? . g$6993$gDo33)
        (string-ci<? . g$6994$gDo33)
        (string-ci<=? . g$6996$gDo33)
        (char-whitespace? . g$12685$gDo33)
        (char-upper-case? . g$12684$gDo33)
        (char-numeric? . g$12682$gDo33)
        (char-lower-case? . g$12681$gDo33)
        (char-upcase . g$12679$gDo33)
        (char-downcase . g$12676$gDo33)
        (char-ci>? . g$7034$gDo33)
        (char-ci>=? . g$7036$gDo33)
        (char-ci=? . g$7032$gDo33)
        (char-ci<? . g$7033$gDo33)
        (char-ci<=? . g$7035$gDo33)
        (char-alphabetic? . g$12675$gDo33)
        (call-with-output-file . g$7420$gDo33)
        (call-with-input-file . g$7419$gDo33)
        (write-char . g$7401$gDo33)
        (write . g$12643$gDo33)
        (with-output-to-file . g$7418$gDo33)
        (with-input-from-file . g$7417$gDo33)
        (read-char . g$7400$gDo33)
        (read . g$12642$gDo33)
        (peek-char . g$7399$gDo33)
        (open-output-file . g$12641$gDo33)
        (open-input-file . g$12640$gDo33)
        (newline . g$7421$gDo33)
        (display . g$12639$gDo33)
        (close-output-port . g$12638$gDo33)
        (close-input-port . g$12637$gDo33)
        (eof-object? . g$12636$gDo33)
        (eof-object . g$12635$gDo33)
        (current-error-port . g$12634$gDo33)
        (current-output-port . g$12633$gDo33)
        (current-input-port . g$12632$gDo33)
        (output-port? . g$12631$gDo33)
        (input-port? . g$12630$gDo33)
        (scheme-report-environment . g$9153$gDo33)
        (quotient . g$6914$gDo33)
        (null-environment . g$9152$gDo33)
        (remainder . g$6915$gDo33)
        (modulo . g$6916$gDo33)
        (inexact->exact . g$6911$gDo33)
        (force . g$6918$gDo33)
        (exact->inexact . g$6912$gDo33)
        (string-fill! . g$12569$gDo33)
        (string-set! . g$12568$gDo33)
        (set-cdr! . g$12567$gDo33)
        (set-car! . g$12566$gDo33)
        (memv . g$5866$gDo33)
        (memq . g$5865$gDo33)
        (member . g$5867$gDo33)
        (assv . g$5862$gDo33)
        (assq . g$5861$gDo33)
        (assoc . g$5863$gDo33)
        (eval . g$9155$gDo33)
        (zero? . g$6021$gDo33)
        (vector? . g$12436$gDo33)
        (vector-set! . g$12435$gDo33)
        (vector-ref . g$12434$gDo33)
        (vector-length . g$12432$gDo33)
        (vector-fill! . g$12430$gDo33)
        (vector->list . g$12429$gDo33)
        (vector . g$12428$gDo33)
        (values . g$12427$gDo33)
        (truncate . g$12426$gDo33)
        (tan . g$12425$gDo33)
        (symbol? . g$12424$gDo33)
        (symbol->string . g$12423$gDo33)
        (substring . g$12422$gDo33)
        (string? . g$12421$gDo33)
        (string>? . g$6064$gDo33)
        (string>=? . g$6066$gDo33)
        (string=? . g$6062$gDo33)
        (string<? . g$6063$gDo33)
        (string<=? . g$6065$gDo33)
        (string-ref . g$12420$gDo33)
        (string-length . g$12419$gDo33)
        (string-copy . g$12417$gDo33)
        (string-append . g$12416$gDo33)
        (string->symbol . g$12415$gDo33)
        (string->number . g$12414$gDo33)
        (string->list . g$12413$gDo33)
        (string . g$12412$gDo33)
        (sqrt . g$12411$gDo33)
        (sin . g$12410$gDo33)
        (round . g$12409$gDo33)
        (reverse . g$12408$gDo33)
        (real? . g$12407$gDo33)
        (real-part . g$12405$gDo33)
        (rationalize . g$6108$gDo33)
        (rational? . g$12404$gDo33)
        (procedure? . g$12402$gDo33)
        (positive? . g$6019$gDo33)
        (pair? . g$12401$gDo33)
        (odd? . g$6023$gDo33)
        (numerator . g$12400$gDo33)
        (number? . g$12399$gDo33)
        (number->string . g$12398$gDo33)
        (null? . g$12397$gDo33)
        (not . g$12396$gDo33)
        (negative? . g$6020$gDo33)
        (min . g$6025$gDo33)
        (max . g$6024$gDo33)
        (map . g$5873$gDo33)
        (make-vector . g$12394$gDo33)
        (make-string . g$12393$gDo33)
        (make-rectangular . g$12392$gDo33)
        (make-polar . g$12391$gDo33)
        (magnitude . g$12390$gDo33)
        (log . g$12389$gDo33)
        (list? . g$12388$gDo33)
        (list-tail . g$5853$gDo33)
        (list-ref . g$5854$gDo33)
        (list->vector . g$12387$gDo33)
        (list->string . g$12386$gDo33)
        (list . g$12385$gDo33)
        (length . g$12384$gDo33)
        (lcm . g$6027$gDo33)
        (integer? . g$12383$gDo33)
        (integer->char . g$12381$gDo33)
        (inexact? . g$12379$gDo33)
        (imag-part . g$12377$gDo33)
        (gcd . g$6026$gDo33)
        (for-each . g$5874$gDo33)
        (floor . g$12376$gDo33)
        (expt . g$12374$gDo33)
        (exp . g$12373$gDo33)
        (exact? . g$12372$gDo33)
        (even? . g$6022$gDo33)
        (eqv? . g$12368$gDo33)
        (equal? . g$12367$gDo33)
        (eq? . g$12366$gDo33)
        (dynamic-wind . g$12365$gDo33)
        (denominator . g$12358$gDo33)
        (cos . g$12357$gDo33)
        (cons . g$12356$gDo33)
        (complex? . g$12355$gDo33)
        (char? . g$12354$gDo33)
        (char>? . g$6105$gDo33)
        (char>=? . g$6107$gDo33)
        (char=? . g$6103$gDo33)
        (char<? . g$6104$gDo33)
        (char<=? . g$6106$gDo33)
        (char->integer . g$12353$gDo33)
        (ceiling . g$12352$gDo33)
        (call-with-values . g$12351$gDo33)
        (call-with-current-continuation . g$12349$gDo33)
        (cddddr . g$6018$gDo33)
        (cdddar . g$6017$gDo33)
        (cddadr . g$6016$gDo33)
        (cddaar . g$6015$gDo33)
        (cdaddr . g$6014$gDo33)
        (cdadar . g$6013$gDo33)
        (cdaadr . g$6012$gDo33)
        (cdaaar . g$6011$gDo33)
        (cadddr . g$6010$gDo33)
        (caddar . g$6009$gDo33)
        (cadadr . g$6008$gDo33)
        (cadaar . g$6007$gDo33)
        (caaddr . g$6006$gDo33)
        (caadar . g$6005$gDo33)
        (caaadr . g$6004$gDo33)
        (caaaar . g$6003$gDo33)
        (cdddr . g$6002$gDo33)
        (cddar . g$6001$gDo33)
        (cdadr . g$6000$gDo33)
        (cdaar . g$5999$gDo33)
        (caddr . g$5998$gDo33)
        (cadar . g$5997$gDo33)
        (caadr . g$5996$gDo33)
        (caaar . g$5995$gDo33)
        (cddr . g$5994$gDo33)
        (cdar . g$5993$gDo33)
        (cadr . g$5992$gDo33)
        (caar . g$5991$gDo33)
        (cdr . g$12348$gDo33)
        (car . g$12347$gDo33)
        (boolean? . g$12346$gDo33)
        (atan . g$12345$gDo33)
        (asin . g$12343$gDo33)
        (apply . g$12342$gDo33)
        (append . g$12341$gDo33)
        (angle . g$12340$gDo33)
        (acos . g$12339$gDo33)
        (abs . g$12338$gDo33)
        (/ . g$12337$gDo33)
        (* . g$12336$gDo33)
        (- . g$12335$gDo33)
        (+ . g$12334$gDo33)
        (>= . g$12333$gDo33)
        (> . g$12332$gDo33)
        (= . g$12331$gDo33)
        (<= . g$12330$gDo33)
        (< . g$12329$gDo33)
        (unquote-splicing . g$12245$gDo33)
        (unquote . g$12244$gDo33)
        (else . g$12242$gDo33)
        (=> . g$12241$gDo33)
        (... . g$12240$gDo33)
        (delay . g$12237$gDo33)
        (or . g$12235$gDo33)
        (and . g$12234$gDo33)
        (do . g$12233$gDo33)
        (cond . g$12232$gDo33)
        (let* . g$12231$gDo33)
        (let . g$12230$gDo33)
        (quasiquote . g$12226$gDo33)
        (syntax-rules . g$12225$gDo33)
        (case . g$12216$gDo33)
        (if . g$12212$gDo33)
        (letrec . g$12210$gDo33)
        (lambda . g$12207$gDo33)
        (quote . g$12204$gDo33)
        (letrec-syntax . g$12202$gDo33)
        (let-syntax . g$12201$gDo33)
        (set! . g$12200$gDo33)
        (begin . g$12196$gDo33)
        (define-syntax . g$12194$gDo33)
        (define . g$12193$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$gDo33
      'g$12794$gDo33
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12693$gDo33)
        (string-titlecase . g$12692$gDo33)
        (string-normalize-nfkd . g$12691$gDo33)
        (string-normalize-nfkc . g$12690$gDo33)
        (string-normalize-nfd . g$12689$gDo33)
        (string-normalize-nfc . g$12688$gDo33)
        (string-foldcase . g$12687$gDo33)
        (string-downcase . g$12686$gDo33)
        (string-ci>? . g$6995$gDo33)
        (string-ci>=? . g$6997$gDo33)
        (string-ci=? . g$6993$gDo33)
        (string-ci<? . g$6994$gDo33)
        (string-ci<=? . g$6996$gDo33)
        (char-whitespace? . g$12685$gDo33)
        (char-upper-case? . g$12684$gDo33)
        (char-title-case? . g$12683$gDo33)
        (char-numeric? . g$12682$gDo33)
        (char-lower-case? . g$12681$gDo33)
        (char-general-category . g$12680$gDo33)
        (char-upcase . g$12679$gDo33)
        (char-titlecase . g$12678$gDo33)
        (char-foldcase . g$12677$gDo33)
        (char-downcase . g$12676$gDo33)
        (char-ci>? . g$7034$gDo33)
        (char-ci>=? . g$7036$gDo33)
        (char-ci=? . g$7032$gDo33)
        (char-ci<? . g$7033$gDo33)
        (char-ci<=? . g$7035$gDo33)
        (char-alphabetic? . g$12675$gDo33)
        (make-variable-transformer . g$8775$gDo33)
        (identifier? . g$9174$gDo33)
        (generate-temporaries . g$9163$gDo33)
        (free-identifier=? . g$9164$gDo33)
        (syntax->datum . g$9176$gDo33)
        (datum->syntax . g$9175$gDo33)
        (bound-identifier=? . g$9165$gDo33)
        (record-type-descriptor? . g$12674$gDo33)
        (record-predicate . g$12673$gDo33)
        (record-mutator . g$12672$gDo33)
        (record-constructor . g$12671$gDo33)
        (record-accessor . g$12670$gDo33)
        (make-record-type-descriptor . g$12669$gDo33)
        (make-record-constructor-descriptor . g$12668$gDo33)
        (record? . g$12667$gDo33)
        (record-type-uid . g$12666$gDo33)
        (record-type-sealed? . g$12665$gDo33)
        (record-type-parent . g$12664$gDo33)
        (record-type-opaque? . g$12663$gDo33)
        (record-type-name . g$12662$gDo33)
        (record-type-generative? . g$12661$gDo33)
        (record-type-field-names . g$12660$gDo33)
        (record-rtd . g$12659$gDo33)
        (record-field-mutable? . g$12658$gDo33)
        (delete-file . g$6569$gDo33)
        (file-exists? . g$6568$gDo33)
        (vector-sort! . g$12657$gDo33)
        (vector-sort . g$12656$gDo33)
        (list-sort . g$6935$gDo33)
        (symbol-hash . g$12655$gDo33)
        (string-ci-hash . g$12654$gDo33)
        (string-hash . g$12653$gDo33)
        (equal-hash . g$12652$gDo33)
        (hashtable-equivalence-function . g$12651$gDo33)
        (make-hashtable . g$12650$gDo33)
        (hashtable-hash-function . g$12649$gDo33)
        (make-eqv-hashtable . g$6537$gDo33)
        (make-eq-hashtable . g$6536$gDo33)
        (hashtable? . g$12648$gDo33)
        (hashtable-update! . g$6543$gDo33)
        (hashtable-size . g$6538$gDo33)
        (hashtable-set! . g$6540$gDo33)
        (hashtable-ref . g$6539$gDo33)
        (hashtable-mutable? . g$12647$gDo33)
        (hashtable-keys . g$12646$gDo33)
        (hashtable-entries . g$12645$gDo33)
        (hashtable-delete! . g$6541$gDo33)
        (hashtable-copy . g$12644$gDo33)
        (hashtable-contains? . g$6542$gDo33)
        (hashtable-clear! . g$6544$gDo33)
        (call-with-output-file . g$7420$gDo33)
        (call-with-input-file . g$7419$gDo33)
        (write-char . g$7401$gDo33)
        (write . g$12643$gDo33)
        (with-output-to-file . g$7418$gDo33)
        (with-input-from-file . g$7417$gDo33)
        (read-char . g$7400$gDo33)
        (read . g$12642$gDo33)
        (peek-char . g$7399$gDo33)
        (open-output-file . g$12641$gDo33)
        (open-input-file . g$12640$gDo33)
        (newline . g$7421$gDo33)
        (display . g$12639$gDo33)
        (close-output-port . g$12638$gDo33)
        (close-input-port . g$12637$gDo33)
        (eof-object? . g$12636$gDo33)
        (eof-object . g$12635$gDo33)
        (current-error-port . g$12634$gDo33)
        (current-output-port . g$12633$gDo33)
        (current-input-port . g$12632$gDo33)
        (output-port? . g$12631$gDo33)
        (input-port? . g$12630$gDo33)
        (utf-8-codec . g$12629$gDo33)
        (utf-16-codec . g$12628$gDo33)
        (transcoder-error-handling-mode . g$12627$gDo33)
        (transcoder-eol-style . g$12626$gDo33)
        (transcoder-codec . g$12625$gDo33)
        (transcoded-port . g$12624$gDo33)
        (textual-port? . g$12623$gDo33)
        (string->bytevector . g$12622$gDo33)
        (standard-output-port . g$12621$gDo33)
        (standard-input-port . g$12620$gDo33)
        (standard-error-port . g$12619$gDo33)
        (set-port-position! . g$12618$gDo33)
        (put-u8 . g$12617$gDo33)
        (put-string . g$12616$gDo33)
        (put-datum . g$12615$gDo33)
        (put-char . g$12614$gDo33)
        (put-bytevector . g$12613$gDo33)
        (port? . g$7386$gDo33)
        (port-transcoder . g$12612$gDo33)
        (port-position . g$12611$gDo33)
        (port-has-set-port-position!? . g$12610$gDo33)
        (port-has-port-position? . g$12609$gDo33)
        (port-eof? . g$12608$gDo33)
        (output-port-buffer-mode . g$12607$gDo33)
        (open-string-output-port . g$7385$gDo33)
        (open-string-input-port . g$12606$gDo33)
        (open-file-output-port . g$12605$gDo33)
        (open-file-input/output-port . g$12604$gDo33)
        (open-file-input-port . g$12603$gDo33)
        (open-bytevector-output-port . g$12602$gDo33)
        (open-bytevector-input-port . g$12601$gDo33)
        (native-transcoder . g$12600$gDo33)
        (native-eol-style . g$12599$gDo33)
        (make-transcoder . g$12598$gDo33)
        (latin-1-codec . g$12597$gDo33)
        (make-i/o-write-error . g$7241$gDo33)
        (make-i/o-read-error . g$7227$gDo33)
        (make-i/o-port-error . g$7346$gDo33)
        (make-i/o-invalid-position-error . g$7256$gDo33)
        (make-i/o-filename-error . g$7273$gDo33)
        (make-i/o-file-protection-error . g$7289$gDo33)
        (make-i/o-file-is-read-only-error . g$7303$gDo33)
        (make-i/o-file-does-not-exist-error . g$7331$gDo33)
        (make-i/o-file-already-exists-error . g$7317$gDo33)
        (make-i/o-error . g$7213$gDo33)
        (make-i/o-encoding-error . g$7377$gDo33)
        (make-i/o-decoding-error . g$7362$gDo33)
        (make-custom-textual-output-port . g$12596$gDo33)
        (make-custom-textual-input/output-port . g$12595$gDo33)
        (make-custom-textual-input-port . g$12594$gDo33)
        (make-custom-binary-output-port . g$12593$gDo33)
        (make-custom-binary-input/output-port . g$12592$gDo33)
        (make-custom-binary-input-port . g$12591$gDo33)
        (make-bytevector . g$12590$gDo33)
        (lookahead-u8 . g$12589$gDo33)
        (lookahead-char . g$12588$gDo33)
        (i/o-write-error? . g$7242$gDo33)
        (i/o-read-error? . g$7228$gDo33)
        (i/o-port-error? . g$7348$gDo33)
        (i/o-invalid-position-error? . g$7258$gDo33)
        (i/o-error-position . g$7259$gDo33)
        (i/o-filename-error? . g$7275$gDo33)
        (i/o-file-protection-error? . g$7290$gDo33)
        (i/o-file-is-read-only-error? . g$7304$gDo33)
        (i/o-file-does-not-exist-error? . g$7332$gDo33)
        (i/o-file-already-exists-error? . g$7318$gDo33)
        (i/o-error? . g$7214$gDo33)
        (i/o-error-port . g$7349$gDo33)
        (i/o-error-filename . g$7276$gDo33)
        (i/o-encoding-error? . g$7379$gDo33)
        (i/o-encoding-error-char . g$7380$gDo33)
        (i/o-decoding-error? . g$7363$gDo33)
        (get-u8 . g$12587$gDo33)
        (get-string-n! . g$12586$gDo33)
        (get-string-n . g$12585$gDo33)
        (get-string-all . g$12584$gDo33)
        (get-line . g$12583$gDo33)
        (get-datum . g$12582$gDo33)
        (get-char . g$12581$gDo33)
        (get-bytevector-some . g$12580$gDo33)
        (get-bytevector-n! . g$12579$gDo33)
        (get-bytevector-n . g$12578$gDo33)
        (get-bytevector-all . g$12577$gDo33)
        (flush-output-port . g$12576$gDo33)
        (close-port . g$12575$gDo33)
        (call-with-string-output-port . g$7387$gDo33)
        (call-with-port . g$7388$gDo33)
        (call-with-bytevector-output-port . g$12574$gDo33)
        (bytevector->string . g$12573$gDo33)
        (buffer-mode? . g$12572$gDo33)
        (binary-port? . g$12571$gDo33)
        (exit . g$12570$gDo33)
        (command-line . g$12157$gDo33)
        (remove . g$5878$gDo33)
        (remv . g$5879$gDo33)
        (remp . g$5859$gDo33)
        (remq . g$5880$gDo33)
        (partition . g$5858$gDo33)
        (memv . g$5866$gDo33)
        (memq . g$5865$gDo33)
        (memp . g$5868$gDo33)
        (member . g$5867$gDo33)
        (exists . g$5872$gDo33)
        (for-all . g$5871$gDo33)
        (fold-right . g$5877$gDo33)
        (fold-left . g$5876$gDo33)
        (find . g$5857$gDo33)
        (filter . g$5860$gDo33)
        (cons* . g$5875$gDo33)
        (assv . g$5862$gDo33)
        (assq . g$5861$gDo33)
        (assp . g$5864$gDo33)
        (assoc . g$5863$gDo33)
        (with-exception-handler . g$12565$gDo33)
        (raise-continuable . g$12564$gDo33)
        (raise . g$12563$gDo33)
        (make-enumeration . g$7485$gDo33)
        (enum-set=? . g$7492$gDo33)
        (enum-set-universe . g$7486$gDo33)
        (enum-set-union . g$7493$gDo33)
        (enum-set-subset? . g$7491$gDo33)
        (enum-set-projection . g$7497$gDo33)
        (enum-set-member? . g$7490$gDo33)
        (enum-set-intersection . g$7494$gDo33)
        (enum-set-indexer . g$7487$gDo33)
        (enum-set-difference . g$7495$gDo33)
        (enum-set-constructor . g$7488$gDo33)
        (enum-set-complement . g$7496$gDo33)
        (enum-set->list . g$7489$gDo33)
        (who-condition? . g$6823$gDo33)
        (warning? . g$6734$gDo33)
        (violation? . g$6776$gDo33)
        (undefined-violation? . g$6900$gDo33)
        (syntax-violation? . g$6884$gDo33)
        (syntax-violation-subform . g$6886$gDo33)
        (syntax-violation-form . g$6885$gDo33)
        (syntax-violation . g$9173$gDo33)
        (simple-conditions . g$12562$gDo33)
        (serious-condition? . g$6748$gDo33)
        (non-continuable-violation? . g$6838$gDo33)
        (message-condition? . g$6719$gDo33)
        (make-who-condition . g$6821$gDo33)
        (make-warning . g$6733$gDo33)
        (make-violation . g$6775$gDo33)
        (make-undefined-violation . g$6899$gDo33)
        (make-syntax-violation . g$6881$gDo33)
        (make-serious-condition . g$6747$gDo33)
        (make-non-continuable-violation . g$6837$gDo33)
        (make-message-condition . g$6717$gDo33)
        (make-lexical-violation . g$6865$gDo33)
        (make-irritants-condition . g$6804$gDo33)
        (make-implementation-restriction-violation . g$6851$gDo33)
        (make-error . g$6761$gDo33)
        (make-assertion-violation . g$6789$gDo33)
        (lexical-violation? . g$6866$gDo33)
        (irritants-condition? . g$6806$gDo33)
        (implementation-restriction-violation? . g$6852$gDo33)
        (error? . g$6762$gDo33)
        (condition-who . g$6824$gDo33)
        (condition-predicate . g$12561$gDo33)
        (condition-message . g$6720$gDo33)
        (condition-irritants . g$6807$gDo33)
        (condition-accessor . g$12560$gDo33)
        (condition . g$12559$gDo33)
        (assertion-violation? . g$6790$gDo33)
        (condition? . g$12558$gDo33)
        (utf32->string . g$12557$gDo33)
        (utf16->string . g$12556$gDo33)
        (utf8->string . g$12555$gDo33)
        (uint-list->bytevector . g$12554$gDo33)
        (u8-list->bytevector . g$12553$gDo33)
        (string->utf8 . g$12552$gDo33)
        (string->utf32 . g$12551$gDo33)
        (string->utf16 . g$12550$gDo33)
        (sint-list->bytevector . g$12549$gDo33)
        (native-endianness . g$6575$gDo33)
        (bytevector? . g$12548$gDo33)
        (bytevector=? . g$12547$gDo33)
        (bytevector-uint-set! . g$12546$gDo33)
        (bytevector-uint-ref . g$12545$gDo33)
        (bytevector-u8-set! . g$12544$gDo33)
        (bytevector-u8-ref . g$12543$gDo33)
        (bytevector-u64-set! . g$6596$gDo33)
        (bytevector-u64-ref . g$6592$gDo33)
        (bytevector-u64-native-set! . g$6598$gDo33)
        (bytevector-u64-native-ref . g$6594$gDo33)
        (bytevector-u32-set! . g$6588$gDo33)
        (bytevector-u32-ref . g$6584$gDo33)
        (bytevector-u32-native-set! . g$6590$gDo33)
        (bytevector-u32-native-ref . g$6586$gDo33)
        (bytevector-u16-set! . g$6580$gDo33)
        (bytevector-u16-ref . g$6576$gDo33)
        (bytevector-u16-native-set! . g$6582$gDo33)
        (bytevector-u16-native-ref . g$6578$gDo33)
        (bytevector-sint-set! . g$12542$gDo33)
        (bytevector-sint-ref . g$12541$gDo33)
        (bytevector-s8-set! . g$12540$gDo33)
        (bytevector-s8-ref . g$12539$gDo33)
        (bytevector-s64-set! . g$6597$gDo33)
        (bytevector-s64-ref . g$6593$gDo33)
        (bytevector-s64-native-set! . g$6599$gDo33)
        (bytevector-s64-native-ref . g$6595$gDo33)
        (bytevector-s32-set! . g$6589$gDo33)
        (bytevector-s32-ref . g$6585$gDo33)
        (bytevector-s32-native-set! . g$6591$gDo33)
        (bytevector-s32-native-ref . g$6587$gDo33)
        (bytevector-s16-set! . g$6581$gDo33)
        (bytevector-s16-ref . g$6577$gDo33)
        (bytevector-s16-native-set! . g$6583$gDo33)
        (bytevector-s16-native-ref . g$6579$gDo33)
        (bytevector-length . g$12538$gDo33)
        (bytevector-ieee-single-set! . g$12537$gDo33)
        (bytevector-ieee-single-ref . g$12536$gDo33)
        (bytevector-ieee-single-native-set! . g$6602$gDo33)
        (bytevector-ieee-single-native-ref . g$6600$gDo33)
        (bytevector-ieee-double-set! . g$12535$gDo33)
        (bytevector-ieee-double-ref . g$12534$gDo33)
        (bytevector-ieee-double-native-set! . g$6603$gDo33)
        (bytevector-ieee-double-native-ref . g$6601$gDo33)
        (bytevector-fill! . g$12533$gDo33)
        (bytevector-copy! . g$12532$gDo33)
        (bytevector-copy . g$12531$gDo33)
        (bytevector->uint-list . g$12530$gDo33)
        (bytevector->u8-list . g$12529$gDo33)
        (bytevector->sint-list . g$12528$gDo33)
        (no-nans-violation? . g$7199$gDo33)
        (no-infinities-violation? . g$7185$gDo33)
        (make-no-nans-violation . g$7198$gDo33)
        (make-no-infinities-violation . g$7184$gDo33)
        (real->flonum . g$12527$gDo33)
        (flzero? . g$12526$gDo33)
        (fltruncate . g$12525$gDo33)
        (fltan . g$12524$gDo33)
        (flsqrt . g$12523$gDo33)
        (flsin . g$12522$gDo33)
        (flround . g$12521$gDo33)
        (flpositive? . g$12520$gDo33)
        (flonum? . g$12519$gDo33)
        (flodd? . g$12518$gDo33)
        (flnumerator . g$12517$gDo33)
        (flnegative? . g$12516$gDo33)
        (flnan? . g$12515$gDo33)
        (flmod0 . g$12514$gDo33)
        (flmod . g$12513$gDo33)
        (flmin . g$12512$gDo33)
        (flmax . g$12511$gDo33)
        (fllog . g$12510$gDo33)
        (flinteger? . g$12509$gDo33)
        (flinfinite? . g$12508$gDo33)
        (flfloor . g$12507$gDo33)
        (flfinite? . g$12506$gDo33)
        (flexpt . g$12505$gDo33)
        (flexp . g$12504$gDo33)
        (fleven? . g$12503$gDo33)
        (fldiv0-and-mod0 . g$12502$gDo33)
        (fldiv0 . g$12501$gDo33)
        (fldiv-and-mod . g$12500$gDo33)
        (fldiv . g$12499$gDo33)
        (fldenominator . g$12498$gDo33)
        (flcos . g$12497$gDo33)
        (flceiling . g$12496$gDo33)
        (flatan . g$12495$gDo33)
        (flasin . g$12494$gDo33)
        (flacos . g$12493$gDo33)
        (flabs . g$12492$gDo33)
        (fl>? . g$12491$gDo33)
        (fl>=? . g$12490$gDo33)
        (fl=? . g$12489$gDo33)
        (fl<? . g$12488$gDo33)
        (fl<=? . g$12487$gDo33)
        (fl/ . g$12486$gDo33)
        (fl- . g$12485$gDo33)
        (fl+ . g$12484$gDo33)
        (fl* . g$12483$gDo33)
        (fixnum->flonum . g$12482$gDo33)
        (fxzero? . g$12481$gDo33)
        (fxxor . g$12480$gDo33)
        (fxrotate-bit-field . g$7131$gDo33)
        (fxreverse-bit-field . g$12479$gDo33)
        (fxpositive? . g$12478$gDo33)
        (fxodd? . g$12477$gDo33)
        (fxnot . g$12476$gDo33)
        (fxnegative? . g$12475$gDo33)
        (fxmod0 . g$12474$gDo33)
        (fxmod . g$12473$gDo33)
        (fxmin . g$12472$gDo33)
        (fxmax . g$12471$gDo33)
        (fxlength . g$12470$gDo33)
        (fxior . g$12469$gDo33)
        (fxif . g$7125$gDo33)
        (fxfirst-bit-set . g$12468$gDo33)
        (fxeven? . g$12467$gDo33)
        (fxdiv0-and-mod0 . g$12466$gDo33)
        (fxdiv0 . g$12465$gDo33)
        (fxdiv-and-mod . g$12464$gDo33)
        (fxdiv . g$12463$gDo33)
        (fxcopy-bit-field . g$7128$gDo33)
        (fxcopy-bit . g$7126$gDo33)
        (fxbit-set? . g$12462$gDo33)
        (fxbit-field . g$7127$gDo33)
        (fxbit-count . g$12461$gDo33)
        (fxarithmetic-shift-right . g$7130$gDo33)
        (fxarithmetic-shift-left . g$7129$gDo33)
        (fxarithmetic-shift . g$12460$gDo33)
        (fxand . g$12459$gDo33)
        (fx>? . g$12458$gDo33)
        (fx>=? . g$12457$gDo33)
        (fx=? . g$12456$gDo33)
        (fx<? . g$12455$gDo33)
        (fx<=? . g$12454$gDo33)
        (fx-/carry . g$7123$gDo33)
        (fx- . g$12453$gDo33)
        (fx+/carry . g$7124$gDo33)
        (fx+ . g$12452$gDo33)
        (fx*/carry . g$7122$gDo33)
        (fx* . g$12451$gDo33)
        (greatest-fixnum . g$12450$gDo33)
        (least-fixnum . g$12449$gDo33)
        (fixnum-width . g$12448$gDo33)
        (fixnum? . g$12447$gDo33)
        (bitwise-rotate-bit-field . g$7096$gDo33)
        (bitwise-reverse-bit-field . g$12446$gDo33)
        (bitwise-length . g$12445$gDo33)
        (bitwise-if . g$7090$gDo33)
        (bitwise-first-bit-set . g$12444$gDo33)
        (bitwise-copy-bit-field . g$7093$gDo33)
        (bitwise-copy-bit . g$7091$gDo33)
        (bitwise-bit-set? . g$12443$gDo33)
        (bitwise-bit-field . g$7092$gDo33)
        (bitwise-bit-count . g$12442$gDo33)
        (bitwise-xor . g$12441$gDo33)
        (bitwise-ior . g$12440$gDo33)
        (bitwise-and . g$12439$gDo33)
        (bitwise-not . g$12438$gDo33)
        (bitwise-arithmetic-shift-right . g$7095$gDo33)
        (bitwise-arithmetic-shift-left . g$7094$gDo33)
        (bitwise-arithmetic-shift . g$12437$gDo33)
        (zero? . g$6021$gDo33)
        (vector? . g$12436$gDo33)
        (vector-set! . g$12435$gDo33)
        (vector-ref . g$12434$gDo33)
        (vector-map . g$12433$gDo33)
        (vector-length . g$12432$gDo33)
        (vector-for-each . g$12431$gDo33)
        (vector-fill! . g$12430$gDo33)
        (vector->list . g$12429$gDo33)
        (vector . g$12428$gDo33)
        (values . g$12427$gDo33)
        (truncate . g$12426$gDo33)
        (tan . g$12425$gDo33)
        (symbol? . g$12424$gDo33)
        (symbol=? . g$6067$gDo33)
        (symbol->string . g$12423$gDo33)
        (substring . g$12422$gDo33)
        (string? . g$12421$gDo33)
        (string>? . g$6064$gDo33)
        (string>=? . g$6066$gDo33)
        (string=? . g$6062$gDo33)
        (string<? . g$6063$gDo33)
        (string<=? . g$6065$gDo33)
        (string-ref . g$12420$gDo33)
        (string-length . g$12419$gDo33)
        (string-for-each . g$12418$gDo33)
        (string-copy . g$12417$gDo33)
        (string-append . g$12416$gDo33)
        (string->symbol . g$12415$gDo33)
        (string->number . g$12414$gDo33)
        (string->list . g$12413$gDo33)
        (string . g$12412$gDo33)
        (sqrt . g$12411$gDo33)
        (sin . g$12410$gDo33)
        (round . g$12409$gDo33)
        (reverse . g$12408$gDo33)
        (real? . g$12407$gDo33)
        (real-valued? . g$12406$gDo33)
        (real-part . g$12405$gDo33)
        (rationalize . g$6108$gDo33)
        (rational? . g$12404$gDo33)
        (rational-valued? . g$12403$gDo33)
        (procedure? . g$12402$gDo33)
        (positive? . g$6019$gDo33)
        (pair? . g$12401$gDo33)
        (odd? . g$6023$gDo33)
        (numerator . g$12400$gDo33)
        (number? . g$12399$gDo33)
        (number->string . g$12398$gDo33)
        (null? . g$12397$gDo33)
        (not . g$12396$gDo33)
        (negative? . g$6020$gDo33)
        (nan? . g$12395$gDo33)
        (min . g$6025$gDo33)
        (max . g$6024$gDo33)
        (map . g$5873$gDo33)
        (make-vector . g$12394$gDo33)
        (make-string . g$12393$gDo33)
        (make-rectangular . g$12392$gDo33)
        (make-polar . g$12391$gDo33)
        (magnitude . g$12390$gDo33)
        (log . g$12389$gDo33)
        (list? . g$12388$gDo33)
        (list-tail . g$5853$gDo33)
        (list-ref . g$5854$gDo33)
        (list->vector . g$12387$gDo33)
        (list->string . g$12386$gDo33)
        (list . g$12385$gDo33)
        (length . g$12384$gDo33)
        (lcm . g$6027$gDo33)
        (integer? . g$12383$gDo33)
        (integer-valued? . g$12382$gDo33)
        (integer->char . g$12381$gDo33)
        (infinite? . g$12380$gDo33)
        (inexact? . g$12379$gDo33)
        (inexact . g$12378$gDo33)
        (imag-part . g$12377$gDo33)
        (gcd . g$6026$gDo33)
        (for-each . g$5874$gDo33)
        (floor . g$12376$gDo33)
        (finite? . g$12375$gDo33)
        (expt . g$12374$gDo33)
        (exp . g$12373$gDo33)
        (exact? . g$12372$gDo33)
        (exact-integer-sqrt . g$12371$gDo33)
        (exact . g$12370$gDo33)
        (even? . g$6022$gDo33)
        (error . g$12369$gDo33)
        (eqv? . g$12368$gDo33)
        (equal? . g$12367$gDo33)
        (eq? . g$12366$gDo33)
        (dynamic-wind . g$12365$gDo33)
        (div0-and-mod0 . g$12364$gDo33)
        (mod0 . g$12363$gDo33)
        (div0 . g$12362$gDo33)
        (div-and-mod . g$12361$gDo33)
        (mod . g$12360$gDo33)
        (div . g$12359$gDo33)
        (denominator . g$12358$gDo33)
        (cos . g$12357$gDo33)
        (cons . g$12356$gDo33)
        (complex? . g$12355$gDo33)
        (char? . g$12354$gDo33)
        (char>? . g$6105$gDo33)
        (char>=? . g$6107$gDo33)
        (char=? . g$6103$gDo33)
        (char<? . g$6104$gDo33)
        (char<=? . g$6106$gDo33)
        (char->integer . g$12353$gDo33)
        (ceiling . g$12352$gDo33)
        (call-with-values . g$12351$gDo33)
        (call/cc . g$12350$gDo33)
        (call-with-current-continuation . g$12349$gDo33)
        (cddddr . g$6018$gDo33)
        (cdddar . g$6017$gDo33)
        (cddadr . g$6016$gDo33)
        (cddaar . g$6015$gDo33)
        (cdaddr . g$6014$gDo33)
        (cdadar . g$6013$gDo33)
        (cdaadr . g$6012$gDo33)
        (cdaaar . g$6011$gDo33)
        (cadddr . g$6010$gDo33)
        (caddar . g$6009$gDo33)
        (cadadr . g$6008$gDo33)
        (cadaar . g$6007$gDo33)
        (caaddr . g$6006$gDo33)
        (caadar . g$6005$gDo33)
        (caaadr . g$6004$gDo33)
        (caaaar . g$6003$gDo33)
        (cdddr . g$6002$gDo33)
        (cddar . g$6001$gDo33)
        (cdadr . g$6000$gDo33)
        (cdaar . g$5999$gDo33)
        (caddr . g$5998$gDo33)
        (cadar . g$5997$gDo33)
        (caadr . g$5996$gDo33)
        (caaar . g$5995$gDo33)
        (cddr . g$5994$gDo33)
        (cdar . g$5993$gDo33)
        (cadr . g$5992$gDo33)
        (caar . g$5991$gDo33)
        (cdr . g$12348$gDo33)
        (car . g$12347$gDo33)
        (boolean? . g$12346$gDo33)
        (boolean=? . g$6068$gDo33)
        (atan . g$12345$gDo33)
        (assertion-violation . g$12344$gDo33)
        (asin . g$12343$gDo33)
        (apply . g$12342$gDo33)
        (append . g$12341$gDo33)
        (angle . g$12340$gDo33)
        (acos . g$12339$gDo33)
        (abs . g$12338$gDo33)
        (/ . g$12337$gDo33)
        (* . g$12336$gDo33)
        (- . g$12335$gDo33)
        (+ . g$12334$gDo33)
        (>= . g$12333$gDo33)
        (> . g$12332$gDo33)
        (= . g$12331$gDo33)
        (<= . g$12330$gDo33)
        (< . g$12329$gDo33)
        (&no-nans . g$12297$gDo33)
        (&no-infinities . g$12296$gDo33)
        (&i/o-encoding . g$12295$gDo33)
        (&i/o-decoding . g$12294$gDo33)
        (&i/o-port . g$12293$gDo33)
        (&i/o-file-does-not-exist . g$12292$gDo33)
        (&i/o-file-already-exists . g$12291$gDo33)
        (&i/o-file-is-read-only . g$12290$gDo33)
        (&i/o-file-protection . g$12289$gDo33)
        (&i/o-filename . g$12288$gDo33)
        (&i/o-invalid-position . g$12287$gDo33)
        (&i/o-write . g$12286$gDo33)
        (&i/o-read . g$12285$gDo33)
        (&i/o . g$12284$gDo33)
        (&non-continuable . g$12283$gDo33)
        (&undefined . g$12282$gDo33)
        (&syntax . g$12281$gDo33)
        (&lexical . g$12280$gDo33)
        (&implementation-restriction . g$12279$gDo33)
        (&who . g$12278$gDo33)
        (&irritants . g$12277$gDo33)
        (&assertion . g$12276$gDo33)
        (&violation . g$12275$gDo33)
        (&error . g$12274$gDo33)
        (&serious . g$12273$gDo33)
        (&warning . g$12272$gDo33)
        (&message . g$12271$gDo33)
        (&condition . g$12270$gDo33)
        (define-condition-type . g$12269$gDo33)
        (define-enumeration . g$12268$gDo33)
        (define-record-type . g$12267$gDo33)
        (parent-rtd . g$12266$gDo33)
        (nongenerative . g$12265$gDo33)
        (opaque . g$12264$gDo33)
        (sealed . g$12263$gDo33)
        (protocol . g$12262$gDo33)
        (parent . g$12261$gDo33)
        (immutable . g$12260$gDo33)
        (mutable . g$12259$gDo33)
        (fields . g$12258$gDo33)
        (error-handling-mode . g$12257$gDo33)
        (file-options . g$12256$gDo33)
        (buffer-mode . g$12255$gDo33)
        (eol-style . g$12254$gDo33)
        (guard . g$12253$gDo33)
        (unsyntax-splicing . g$12247$gDo33)
        (unsyntax . g$12246$gDo33)
        (unquote-splicing . g$12245$gDo33)
        (unquote . g$12244$gDo33)
        (_ . g$12243$gDo33)
        (else . g$12242$gDo33)
        (=> . g$12241$gDo33)
        (... . g$12240$gDo33)
        (assert . g$12239$gDo33)
        (endianness . g$12238$gDo33)
        (or . g$12235$gDo33)
        (and . g$12234$gDo33)
        (do . g$12233$gDo33)
        (cond . g$12232$gDo33)
        (let* . g$12231$gDo33)
        (let . g$12230$gDo33)
        (identifier-syntax . g$12229$gDo33)
        (with-syntax . g$12228$gDo33)
        (quasisyntax . g$12227$gDo33)
        (quasiquote . g$12226$gDo33)
        (syntax-rules . g$12225$gDo33)
        (let-values . g$12221$gDo33)
        (let*-values . g$12220$gDo33)
        (record-constructor-descriptor . g$12219$gDo33)
        (record-type-descriptor . g$12218$gDo33)
        (case . g$12216$gDo33)
        (unless . g$12214$gDo33)
        (when . g$12213$gDo33)
        (if . g$12212$gDo33)
        (letrec* . g$12211$gDo33)
        (letrec . g$12210$gDo33)
        (case-lambda . g$12208$gDo33)
        (lambda . g$12207$gDo33)
        (syntax . g$12206$gDo33)
        (syntax-case . g$12205$gDo33)
        (quote . g$12204$gDo33)
        (letrec-syntax . g$12202$gDo33)
        (let-syntax . g$12201$gDo33)
        (set! . g$12200$gDo33)
        (begin . g$12196$gDo33)
        (define-syntax . g$12194$gDo33)
        (define . g$12193$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12795$gDo33
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$9180$gDo33)
        (scheme-report-environment . g$9153$gDo33)
        (quotient . g$6914$gDo33)
        (null-environment . g$9152$gDo33)
        (remainder . g$6915$gDo33)
        (modulo . g$6916$gDo33)
        (inexact->exact . g$6911$gDo33)
        (force . g$6918$gDo33)
        (exact->inexact . g$6912$gDo33)
        (delay . g$12237$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12796$gDo33
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$12233$gDo33)
        (unless . g$12214$gDo33)
        (when . g$12213$gDo33)
        (case-lambda . g$12208$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12797$gDo33
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$9155$gDo33) (environment . g$9151$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12798$gDo33
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$12567$gDo33) (set-car! . g$12566$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12799$gDo33
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$12569$gDo33) (string-set! . g$12568$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12800$gDo33
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$12570$gDo33) (command-line . g$12157$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12801$gDo33
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8775$gDo33)
        (identifier? . g$9174$gDo33)
        (generate-temporaries . g$9163$gDo33)
        (free-identifier=? . g$9164$gDo33)
        (syntax->datum . g$9176$gDo33)
        (datum->syntax . g$9175$gDo33)
        (bound-identifier=? . g$9165$gDo33)
        (syntax-violation . g$9173$gDo33)
        (unsyntax-splicing . g$12247$gDo33)
        (unsyntax . g$12246$gDo33)
        (_ . g$12243$gDo33)
        (... . g$12240$gDo33)
        (with-syntax . g$12228$gDo33)
        (quasisyntax . g$12227$gDo33)
        (syntax . g$12206$gDo33)
        (syntax-case . g$12205$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12802$gDo33
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6569$gDo33)
        (file-exists? . g$6568$gDo33)
        (make-i/o-write-error . g$7241$gDo33)
        (make-i/o-read-error . g$7227$gDo33)
        (make-i/o-port-error . g$7346$gDo33)
        (make-i/o-invalid-position-error . g$7256$gDo33)
        (make-i/o-filename-error . g$7273$gDo33)
        (make-i/o-file-protection-error . g$7289$gDo33)
        (make-i/o-file-is-read-only-error . g$7303$gDo33)
        (make-i/o-file-does-not-exist-error . g$7331$gDo33)
        (make-i/o-file-already-exists-error . g$7317$gDo33)
        (make-i/o-error . g$7213$gDo33)
        (i/o-write-error? . g$7242$gDo33)
        (i/o-read-error? . g$7228$gDo33)
        (i/o-port-error? . g$7348$gDo33)
        (i/o-invalid-position-error? . g$7258$gDo33)
        (i/o-error-position . g$7259$gDo33)
        (i/o-filename-error? . g$7275$gDo33)
        (i/o-file-protection-error? . g$7290$gDo33)
        (i/o-file-is-read-only-error? . g$7304$gDo33)
        (i/o-file-does-not-exist-error? . g$7332$gDo33)
        (i/o-file-already-exists-error? . g$7318$gDo33)
        (i/o-error? . g$7214$gDo33)
        (i/o-error-port . g$7349$gDo33)
        (i/o-error-filename . g$7276$gDo33)
        (&i/o-port . g$12293$gDo33)
        (&i/o-file-does-not-exist . g$12292$gDo33)
        (&i/o-file-already-exists . g$12291$gDo33)
        (&i/o-file-is-read-only . g$12290$gDo33)
        (&i/o-file-protection . g$12289$gDo33)
        (&i/o-filename . g$12288$gDo33)
        (&i/o-invalid-position . g$12287$gDo33)
        (&i/o-write . g$12286$gDo33)
        (&i/o-read . g$12285$gDo33)
        (&i/o . g$12284$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12803$gDo33
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12657$gDo33)
        (vector-sort . g$12656$gDo33)
        (list-sort . g$6935$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12804$gDo33
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$6021$gDo33)
        (vector? . g$12436$gDo33)
        (vector-set! . g$12435$gDo33)
        (vector-ref . g$12434$gDo33)
        (vector-map . g$12433$gDo33)
        (vector-length . g$12432$gDo33)
        (vector-for-each . g$12431$gDo33)
        (vector-fill! . g$12430$gDo33)
        (vector->list . g$12429$gDo33)
        (vector . g$12428$gDo33)
        (values . g$12427$gDo33)
        (truncate . g$12426$gDo33)
        (tan . g$12425$gDo33)
        (symbol? . g$12424$gDo33)
        (symbol=? . g$6067$gDo33)
        (symbol->string . g$12423$gDo33)
        (substring . g$12422$gDo33)
        (string? . g$12421$gDo33)
        (string>? . g$6064$gDo33)
        (string>=? . g$6066$gDo33)
        (string=? . g$6062$gDo33)
        (string<? . g$6063$gDo33)
        (string<=? . g$6065$gDo33)
        (string-ref . g$12420$gDo33)
        (string-length . g$12419$gDo33)
        (string-for-each . g$12418$gDo33)
        (string-copy . g$12417$gDo33)
        (string-append . g$12416$gDo33)
        (string->symbol . g$12415$gDo33)
        (string->number . g$12414$gDo33)
        (string->list . g$12413$gDo33)
        (string . g$12412$gDo33)
        (sqrt . g$12411$gDo33)
        (sin . g$12410$gDo33)
        (round . g$12409$gDo33)
        (reverse . g$12408$gDo33)
        (real? . g$12407$gDo33)
        (real-valued? . g$12406$gDo33)
        (real-part . g$12405$gDo33)
        (rationalize . g$6108$gDo33)
        (rational? . g$12404$gDo33)
        (rational-valued? . g$12403$gDo33)
        (procedure? . g$12402$gDo33)
        (positive? . g$6019$gDo33)
        (pair? . g$12401$gDo33)
        (odd? . g$6023$gDo33)
        (numerator . g$12400$gDo33)
        (number? . g$12399$gDo33)
        (number->string . g$12398$gDo33)
        (null? . g$12397$gDo33)
        (not . g$12396$gDo33)
        (negative? . g$6020$gDo33)
        (nan? . g$12395$gDo33)
        (min . g$6025$gDo33)
        (max . g$6024$gDo33)
        (map . g$5873$gDo33)
        (make-vector . g$12394$gDo33)
        (make-string . g$12393$gDo33)
        (make-rectangular . g$12392$gDo33)
        (make-polar . g$12391$gDo33)
        (magnitude . g$12390$gDo33)
        (log . g$12389$gDo33)
        (list? . g$12388$gDo33)
        (list-tail . g$5853$gDo33)
        (list-ref . g$5854$gDo33)
        (list->vector . g$12387$gDo33)
        (list->string . g$12386$gDo33)
        (list . g$12385$gDo33)
        (length . g$12384$gDo33)
        (lcm . g$6027$gDo33)
        (integer? . g$12383$gDo33)
        (integer-valued? . g$12382$gDo33)
        (integer->char . g$12381$gDo33)
        (infinite? . g$12380$gDo33)
        (inexact? . g$12379$gDo33)
        (inexact . g$12378$gDo33)
        (imag-part . g$12377$gDo33)
        (gcd . g$6026$gDo33)
        (for-each . g$5874$gDo33)
        (floor . g$12376$gDo33)
        (finite? . g$12375$gDo33)
        (expt . g$12374$gDo33)
        (exp . g$12373$gDo33)
        (exact? . g$12372$gDo33)
        (exact-integer-sqrt . g$12371$gDo33)
        (exact . g$12370$gDo33)
        (even? . g$6022$gDo33)
        (error . g$12369$gDo33)
        (eqv? . g$12368$gDo33)
        (equal? . g$12367$gDo33)
        (eq? . g$12366$gDo33)
        (dynamic-wind . g$12365$gDo33)
        (div0-and-mod0 . g$12364$gDo33)
        (mod0 . g$12363$gDo33)
        (div0 . g$12362$gDo33)
        (div-and-mod . g$12361$gDo33)
        (mod . g$12360$gDo33)
        (div . g$12359$gDo33)
        (denominator . g$12358$gDo33)
        (cos . g$12357$gDo33)
        (cons . g$12356$gDo33)
        (complex? . g$12355$gDo33)
        (char? . g$12354$gDo33)
        (char>? . g$6105$gDo33)
        (char>=? . g$6107$gDo33)
        (char=? . g$6103$gDo33)
        (char<? . g$6104$gDo33)
        (char<=? . g$6106$gDo33)
        (char->integer . g$12353$gDo33)
        (ceiling . g$12352$gDo33)
        (call-with-values . g$12351$gDo33)
        (call/cc . g$12350$gDo33)
        (call-with-current-continuation . g$12349$gDo33)
        (cddddr . g$6018$gDo33)
        (cdddar . g$6017$gDo33)
        (cddadr . g$6016$gDo33)
        (cddaar . g$6015$gDo33)
        (cdaddr . g$6014$gDo33)
        (cdadar . g$6013$gDo33)
        (cdaadr . g$6012$gDo33)
        (cdaaar . g$6011$gDo33)
        (cadddr . g$6010$gDo33)
        (caddar . g$6009$gDo33)
        (cadadr . g$6008$gDo33)
        (cadaar . g$6007$gDo33)
        (caaddr . g$6006$gDo33)
        (caadar . g$6005$gDo33)
        (caaadr . g$6004$gDo33)
        (caaaar . g$6003$gDo33)
        (cdddr . g$6002$gDo33)
        (cddar . g$6001$gDo33)
        (cdadr . g$6000$gDo33)
        (cdaar . g$5999$gDo33)
        (caddr . g$5998$gDo33)
        (cadar . g$5997$gDo33)
        (caadr . g$5996$gDo33)
        (caaar . g$5995$gDo33)
        (cddr . g$5994$gDo33)
        (cdar . g$5993$gDo33)
        (cadr . g$5992$gDo33)
        (caar . g$5991$gDo33)
        (cdr . g$12348$gDo33)
        (car . g$12347$gDo33)
        (boolean? . g$12346$gDo33)
        (boolean=? . g$6068$gDo33)
        (atan . g$12345$gDo33)
        (assertion-violation . g$12344$gDo33)
        (asin . g$12343$gDo33)
        (apply . g$12342$gDo33)
        (append . g$12341$gDo33)
        (angle . g$12340$gDo33)
        (acos . g$12339$gDo33)
        (abs . g$12338$gDo33)
        (/ . g$12337$gDo33)
        (* . g$12336$gDo33)
        (- . g$12335$gDo33)
        (+ . g$12334$gDo33)
        (>= . g$12333$gDo33)
        (> . g$12332$gDo33)
        (= . g$12331$gDo33)
        (<= . g$12330$gDo33)
        (< . g$12329$gDo33)
        (unquote-splicing . g$12245$gDo33)
        (unquote . g$12244$gDo33)
        (_ . g$12243$gDo33)
        (else . g$12242$gDo33)
        (=> . g$12241$gDo33)
        (... . g$12240$gDo33)
        (assert . g$12239$gDo33)
        (or . g$12235$gDo33)
        (and . g$12234$gDo33)
        (cond . g$12232$gDo33)
        (let* . g$12231$gDo33)
        (let . g$12230$gDo33)
        (identifier-syntax . g$12229$gDo33)
        (quasiquote . g$12226$gDo33)
        (syntax-rules . g$12225$gDo33)
        (let-values . g$12221$gDo33)
        (let*-values . g$12220$gDo33)
        (case . g$12216$gDo33)
        (if . g$12212$gDo33)
        (letrec* . g$12211$gDo33)
        (letrec . g$12210$gDo33)
        (lambda . g$12207$gDo33)
        (quote . g$12204$gDo33)
        (letrec-syntax . g$12202$gDo33)
        (let-syntax . g$12201$gDo33)
        (set! . g$12200$gDo33)
        (begin . g$12196$gDo33)
        (define-syntax . g$12194$gDo33)
        (define . g$12193$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12805$gDo33
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$5878$gDo33)
        (remv . g$5879$gDo33)
        (remp . g$5859$gDo33)
        (remq . g$5880$gDo33)
        (partition . g$5858$gDo33)
        (memv . g$5866$gDo33)
        (memq . g$5865$gDo33)
        (memp . g$5868$gDo33)
        (member . g$5867$gDo33)
        (exists . g$5872$gDo33)
        (for-all . g$5871$gDo33)
        (fold-right . g$5877$gDo33)
        (fold-left . g$5876$gDo33)
        (find . g$5857$gDo33)
        (filter . g$5860$gDo33)
        (cons* . g$5875$gDo33)
        (assv . g$5862$gDo33)
        (assq . g$5861$gDo33)
        (assp . g$5864$gDo33)
        (assoc . g$5863$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12806$gDo33
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7420$gDo33)
        (call-with-input-file . g$7419$gDo33)
        (write-char . g$7401$gDo33)
        (write . g$12643$gDo33)
        (with-output-to-file . g$7418$gDo33)
        (with-input-from-file . g$7417$gDo33)
        (read-char . g$7400$gDo33)
        (read . g$12642$gDo33)
        (peek-char . g$7399$gDo33)
        (open-output-file . g$12641$gDo33)
        (open-input-file . g$12640$gDo33)
        (newline . g$7421$gDo33)
        (display . g$12639$gDo33)
        (close-output-port . g$12638$gDo33)
        (close-input-port . g$12637$gDo33)
        (eof-object? . g$12636$gDo33)
        (eof-object . g$12635$gDo33)
        (current-error-port . g$12634$gDo33)
        (current-output-port . g$12633$gDo33)
        (current-input-port . g$12632$gDo33)
        (output-port? . g$12631$gDo33)
        (input-port? . g$12630$gDo33)
        (make-i/o-write-error . g$7241$gDo33)
        (make-i/o-read-error . g$7227$gDo33)
        (make-i/o-port-error . g$7346$gDo33)
        (make-i/o-invalid-position-error . g$7256$gDo33)
        (make-i/o-filename-error . g$7273$gDo33)
        (make-i/o-file-protection-error . g$7289$gDo33)
        (make-i/o-file-is-read-only-error . g$7303$gDo33)
        (make-i/o-file-does-not-exist-error . g$7331$gDo33)
        (make-i/o-file-already-exists-error . g$7317$gDo33)
        (make-i/o-error . g$7213$gDo33)
        (i/o-write-error? . g$7242$gDo33)
        (i/o-read-error? . g$7228$gDo33)
        (i/o-port-error? . g$7348$gDo33)
        (i/o-invalid-position-error? . g$7258$gDo33)
        (i/o-error-position . g$7259$gDo33)
        (i/o-filename-error? . g$7275$gDo33)
        (i/o-file-protection-error? . g$7290$gDo33)
        (i/o-file-is-read-only-error? . g$7304$gDo33)
        (i/o-file-does-not-exist-error? . g$7332$gDo33)
        (i/o-file-already-exists-error? . g$7318$gDo33)
        (i/o-error? . g$7214$gDo33)
        (i/o-error-port . g$7349$gDo33)
        (i/o-error-filename . g$7276$gDo33)
        (&i/o-port . g$12293$gDo33)
        (&i/o-file-does-not-exist . g$12292$gDo33)
        (&i/o-file-already-exists . g$12291$gDo33)
        (&i/o-file-is-read-only . g$12290$gDo33)
        (&i/o-file-protection . g$12289$gDo33)
        (&i/o-filename . g$12288$gDo33)
        (&i/o-invalid-position . g$12287$gDo33)
        (&i/o-write . g$12286$gDo33)
        (&i/o-read . g$12285$gDo33)
        (&i/o . g$12284$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12807$gDo33
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$12590$gDo33)
        (utf32->string . g$12557$gDo33)
        (utf16->string . g$12556$gDo33)
        (utf8->string . g$12555$gDo33)
        (uint-list->bytevector . g$12554$gDo33)
        (u8-list->bytevector . g$12553$gDo33)
        (string->utf8 . g$12552$gDo33)
        (string->utf32 . g$12551$gDo33)
        (string->utf16 . g$12550$gDo33)
        (sint-list->bytevector . g$12549$gDo33)
        (native-endianness . g$6575$gDo33)
        (bytevector? . g$12548$gDo33)
        (bytevector=? . g$12547$gDo33)
        (bytevector-uint-set! . g$12546$gDo33)
        (bytevector-uint-ref . g$12545$gDo33)
        (bytevector-u8-set! . g$12544$gDo33)
        (bytevector-u8-ref . g$12543$gDo33)
        (bytevector-u64-set! . g$6596$gDo33)
        (bytevector-u64-ref . g$6592$gDo33)
        (bytevector-u64-native-set! . g$6598$gDo33)
        (bytevector-u64-native-ref . g$6594$gDo33)
        (bytevector-u32-set! . g$6588$gDo33)
        (bytevector-u32-ref . g$6584$gDo33)
        (bytevector-u32-native-set! . g$6590$gDo33)
        (bytevector-u32-native-ref . g$6586$gDo33)
        (bytevector-u16-set! . g$6580$gDo33)
        (bytevector-u16-ref . g$6576$gDo33)
        (bytevector-u16-native-set! . g$6582$gDo33)
        (bytevector-u16-native-ref . g$6578$gDo33)
        (bytevector-sint-set! . g$12542$gDo33)
        (bytevector-sint-ref . g$12541$gDo33)
        (bytevector-s8-set! . g$12540$gDo33)
        (bytevector-s8-ref . g$12539$gDo33)
        (bytevector-s64-set! . g$6597$gDo33)
        (bytevector-s64-ref . g$6593$gDo33)
        (bytevector-s64-native-set! . g$6599$gDo33)
        (bytevector-s64-native-ref . g$6595$gDo33)
        (bytevector-s32-set! . g$6589$gDo33)
        (bytevector-s32-ref . g$6585$gDo33)
        (bytevector-s32-native-set! . g$6591$gDo33)
        (bytevector-s32-native-ref . g$6587$gDo33)
        (bytevector-s16-set! . g$6581$gDo33)
        (bytevector-s16-ref . g$6577$gDo33)
        (bytevector-s16-native-set! . g$6583$gDo33)
        (bytevector-s16-native-ref . g$6579$gDo33)
        (bytevector-length . g$12538$gDo33)
        (bytevector-ieee-single-set! . g$12537$gDo33)
        (bytevector-ieee-single-ref . g$12536$gDo33)
        (bytevector-ieee-single-native-set! . g$6602$gDo33)
        (bytevector-ieee-single-native-ref . g$6600$gDo33)
        (bytevector-ieee-double-set! . g$12535$gDo33)
        (bytevector-ieee-double-ref . g$12534$gDo33)
        (bytevector-ieee-double-native-set! . g$6603$gDo33)
        (bytevector-ieee-double-native-ref . g$6601$gDo33)
        (bytevector-fill! . g$12533$gDo33)
        (bytevector-copy! . g$12532$gDo33)
        (bytevector-copy . g$12531$gDo33)
        (bytevector->uint-list . g$12530$gDo33)
        (bytevector->u8-list . g$12529$gDo33)
        (bytevector->sint-list . g$12528$gDo33)
        (endianness . g$12238$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12808$gDo33
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12693$gDo33)
        (string-titlecase . g$12692$gDo33)
        (string-normalize-nfkd . g$12691$gDo33)
        (string-normalize-nfkc . g$12690$gDo33)
        (string-normalize-nfd . g$12689$gDo33)
        (string-normalize-nfc . g$12688$gDo33)
        (string-foldcase . g$12687$gDo33)
        (string-downcase . g$12686$gDo33)
        (string-ci>? . g$6995$gDo33)
        (string-ci>=? . g$6997$gDo33)
        (string-ci=? . g$6993$gDo33)
        (string-ci<? . g$6994$gDo33)
        (string-ci<=? . g$6996$gDo33)
        (char-whitespace? . g$12685$gDo33)
        (char-upper-case? . g$12684$gDo33)
        (char-title-case? . g$12683$gDo33)
        (char-numeric? . g$12682$gDo33)
        (char-lower-case? . g$12681$gDo33)
        (char-general-category . g$12680$gDo33)
        (char-upcase . g$12679$gDo33)
        (char-titlecase . g$12678$gDo33)
        (char-foldcase . g$12677$gDo33)
        (char-downcase . g$12676$gDo33)
        (char-ci>? . g$7034$gDo33)
        (char-ci>=? . g$7036$gDo33)
        (char-ci=? . g$7032$gDo33)
        (char-ci<? . g$7033$gDo33)
        (char-ci<=? . g$7035$gDo33)
        (char-alphabetic? . g$12675$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12809$gDo33
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$12565$gDo33)
        (raise-continuable . g$12564$gDo33)
        (raise . g$12563$gDo33)
        (guard . g$12253$gDo33)
        (else . g$12242$gDo33)
        (=> . g$12241$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12810$gDo33
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$7096$gDo33)
        (bitwise-reverse-bit-field . g$12446$gDo33)
        (bitwise-length . g$12445$gDo33)
        (bitwise-if . g$7090$gDo33)
        (bitwise-first-bit-set . g$12444$gDo33)
        (bitwise-copy-bit-field . g$7093$gDo33)
        (bitwise-copy-bit . g$7091$gDo33)
        (bitwise-bit-set? . g$12443$gDo33)
        (bitwise-bit-field . g$7092$gDo33)
        (bitwise-bit-count . g$12442$gDo33)
        (bitwise-xor . g$12441$gDo33)
        (bitwise-ior . g$12440$gDo33)
        (bitwise-and . g$12439$gDo33)
        (bitwise-not . g$12438$gDo33)
        (bitwise-arithmetic-shift-right . g$7095$gDo33)
        (bitwise-arithmetic-shift-left . g$7094$gDo33)
        (bitwise-arithmetic-shift . g$12437$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12811$gDo33
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$12481$gDo33)
        (fxxor . g$12480$gDo33)
        (fxrotate-bit-field . g$7131$gDo33)
        (fxreverse-bit-field . g$12479$gDo33)
        (fxpositive? . g$12478$gDo33)
        (fxodd? . g$12477$gDo33)
        (fxnot . g$12476$gDo33)
        (fxnegative? . g$12475$gDo33)
        (fxmod0 . g$12474$gDo33)
        (fxmod . g$12473$gDo33)
        (fxmin . g$12472$gDo33)
        (fxmax . g$12471$gDo33)
        (fxlength . g$12470$gDo33)
        (fxior . g$12469$gDo33)
        (fxif . g$7125$gDo33)
        (fxfirst-bit-set . g$12468$gDo33)
        (fxeven? . g$12467$gDo33)
        (fxdiv0-and-mod0 . g$12466$gDo33)
        (fxdiv0 . g$12465$gDo33)
        (fxdiv-and-mod . g$12464$gDo33)
        (fxdiv . g$12463$gDo33)
        (fxcopy-bit-field . g$7128$gDo33)
        (fxcopy-bit . g$7126$gDo33)
        (fxbit-set? . g$12462$gDo33)
        (fxbit-field . g$7127$gDo33)
        (fxbit-count . g$12461$gDo33)
        (fxarithmetic-shift-right . g$7130$gDo33)
        (fxarithmetic-shift-left . g$7129$gDo33)
        (fxarithmetic-shift . g$12460$gDo33)
        (fxand . g$12459$gDo33)
        (fx>? . g$12458$gDo33)
        (fx>=? . g$12457$gDo33)
        (fx=? . g$12456$gDo33)
        (fx<? . g$12455$gDo33)
        (fx<=? . g$12454$gDo33)
        (fx-/carry . g$7123$gDo33)
        (fx- . g$12453$gDo33)
        (fx+/carry . g$7124$gDo33)
        (fx+ . g$12452$gDo33)
        (fx*/carry . g$7122$gDo33)
        (fx* . g$12451$gDo33)
        (greatest-fixnum . g$12450$gDo33)
        (least-fixnum . g$12449$gDo33)
        (fixnum-width . g$12448$gDo33)
        (fixnum? . g$12447$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12812$gDo33
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$7199$gDo33)
        (no-infinities-violation? . g$7185$gDo33)
        (make-no-nans-violation . g$7198$gDo33)
        (make-no-infinities-violation . g$7184$gDo33)
        (real->flonum . g$12527$gDo33)
        (flzero? . g$12526$gDo33)
        (fltruncate . g$12525$gDo33)
        (fltan . g$12524$gDo33)
        (flsqrt . g$12523$gDo33)
        (flsin . g$12522$gDo33)
        (flround . g$12521$gDo33)
        (flpositive? . g$12520$gDo33)
        (flonum? . g$12519$gDo33)
        (flodd? . g$12518$gDo33)
        (flnumerator . g$12517$gDo33)
        (flnegative? . g$12516$gDo33)
        (flnan? . g$12515$gDo33)
        (flmod0 . g$12514$gDo33)
        (flmod . g$12513$gDo33)
        (flmin . g$12512$gDo33)
        (flmax . g$12511$gDo33)
        (fllog . g$12510$gDo33)
        (flinteger? . g$12509$gDo33)
        (flinfinite? . g$12508$gDo33)
        (flfloor . g$12507$gDo33)
        (flfinite? . g$12506$gDo33)
        (flexpt . g$12505$gDo33)
        (flexp . g$12504$gDo33)
        (fleven? . g$12503$gDo33)
        (fldiv0-and-mod0 . g$12502$gDo33)
        (fldiv0 . g$12501$gDo33)
        (fldiv-and-mod . g$12500$gDo33)
        (fldiv . g$12499$gDo33)
        (fldenominator . g$12498$gDo33)
        (flcos . g$12497$gDo33)
        (flceiling . g$12496$gDo33)
        (flatan . g$12495$gDo33)
        (flasin . g$12494$gDo33)
        (flacos . g$12493$gDo33)
        (flabs . g$12492$gDo33)
        (fl>? . g$12491$gDo33)
        (fl>=? . g$12490$gDo33)
        (fl=? . g$12489$gDo33)
        (fl<? . g$12488$gDo33)
        (fl<=? . g$12487$gDo33)
        (fl/ . g$12486$gDo33)
        (fl- . g$12485$gDo33)
        (fl+ . g$12484$gDo33)
        (fl* . g$12483$gDo33)
        (fixnum->flonum . g$12482$gDo33)
        (&no-nans . g$12297$gDo33)
        (&no-infinities . g$12296$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12813$gDo33
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12655$gDo33)
        (string-ci-hash . g$12654$gDo33)
        (string-hash . g$12653$gDo33)
        (equal-hash . g$12652$gDo33)
        (hashtable-equivalence-function . g$12651$gDo33)
        (make-hashtable . g$12650$gDo33)
        (hashtable-hash-function . g$12649$gDo33)
        (make-eqv-hashtable . g$6537$gDo33)
        (make-eq-hashtable . g$6536$gDo33)
        (hashtable? . g$12648$gDo33)
        (hashtable-update! . g$6543$gDo33)
        (hashtable-size . g$6538$gDo33)
        (hashtable-set! . g$6540$gDo33)
        (hashtable-ref . g$6539$gDo33)
        (hashtable-mutable? . g$12647$gDo33)
        (hashtable-keys . g$12646$gDo33)
        (hashtable-entries . g$12645$gDo33)
        (hashtable-delete! . g$6541$gDo33)
        (hashtable-copy . g$12644$gDo33)
        (hashtable-contains? . g$6542$gDo33)
        (hashtable-clear! . g$6544$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12814$gDo33
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$12636$gDo33)
        (eof-object . g$12635$gDo33)
        (current-error-port . g$12634$gDo33)
        (current-output-port . g$12633$gDo33)
        (current-input-port . g$12632$gDo33)
        (output-port? . g$12631$gDo33)
        (input-port? . g$12630$gDo33)
        (utf-8-codec . g$12629$gDo33)
        (utf-16-codec . g$12628$gDo33)
        (transcoder-error-handling-mode . g$12627$gDo33)
        (transcoder-eol-style . g$12626$gDo33)
        (transcoder-codec . g$12625$gDo33)
        (transcoded-port . g$12624$gDo33)
        (textual-port? . g$12623$gDo33)
        (string->bytevector . g$12622$gDo33)
        (standard-output-port . g$12621$gDo33)
        (standard-input-port . g$12620$gDo33)
        (standard-error-port . g$12619$gDo33)
        (set-port-position! . g$12618$gDo33)
        (put-u8 . g$12617$gDo33)
        (put-string . g$12616$gDo33)
        (put-datum . g$12615$gDo33)
        (put-char . g$12614$gDo33)
        (put-bytevector . g$12613$gDo33)
        (port? . g$7386$gDo33)
        (port-transcoder . g$12612$gDo33)
        (port-position . g$12611$gDo33)
        (port-has-set-port-position!? . g$12610$gDo33)
        (port-has-port-position? . g$12609$gDo33)
        (port-eof? . g$12608$gDo33)
        (output-port-buffer-mode . g$12607$gDo33)
        (open-string-output-port . g$7385$gDo33)
        (open-string-input-port . g$12606$gDo33)
        (open-file-output-port . g$12605$gDo33)
        (open-file-input/output-port . g$12604$gDo33)
        (open-file-input-port . g$12603$gDo33)
        (open-bytevector-output-port . g$12602$gDo33)
        (open-bytevector-input-port . g$12601$gDo33)
        (native-transcoder . g$12600$gDo33)
        (native-eol-style . g$12599$gDo33)
        (make-transcoder . g$12598$gDo33)
        (latin-1-codec . g$12597$gDo33)
        (make-i/o-write-error . g$7241$gDo33)
        (make-i/o-read-error . g$7227$gDo33)
        (make-i/o-port-error . g$7346$gDo33)
        (make-i/o-invalid-position-error . g$7256$gDo33)
        (make-i/o-filename-error . g$7273$gDo33)
        (make-i/o-file-protection-error . g$7289$gDo33)
        (make-i/o-file-is-read-only-error . g$7303$gDo33)
        (make-i/o-file-does-not-exist-error . g$7331$gDo33)
        (make-i/o-file-already-exists-error . g$7317$gDo33)
        (make-i/o-error . g$7213$gDo33)
        (make-i/o-encoding-error . g$7377$gDo33)
        (make-i/o-decoding-error . g$7362$gDo33)
        (make-custom-textual-output-port . g$12596$gDo33)
        (make-custom-textual-input/output-port . g$12595$gDo33)
        (make-custom-textual-input-port . g$12594$gDo33)
        (make-custom-binary-output-port . g$12593$gDo33)
        (make-custom-binary-input/output-port . g$12592$gDo33)
        (make-custom-binary-input-port . g$12591$gDo33)
        (lookahead-u8 . g$12589$gDo33)
        (lookahead-char . g$12588$gDo33)
        (i/o-write-error? . g$7242$gDo33)
        (i/o-read-error? . g$7228$gDo33)
        (i/o-port-error? . g$7348$gDo33)
        (i/o-invalid-position-error? . g$7258$gDo33)
        (i/o-error-position . g$7259$gDo33)
        (i/o-filename-error? . g$7275$gDo33)
        (i/o-file-protection-error? . g$7290$gDo33)
        (i/o-file-is-read-only-error? . g$7304$gDo33)
        (i/o-file-does-not-exist-error? . g$7332$gDo33)
        (i/o-file-already-exists-error? . g$7318$gDo33)
        (i/o-error? . g$7214$gDo33)
        (i/o-error-port . g$7349$gDo33)
        (i/o-error-filename . g$7276$gDo33)
        (i/o-encoding-error? . g$7379$gDo33)
        (i/o-encoding-error-char . g$7380$gDo33)
        (i/o-decoding-error? . g$7363$gDo33)
        (get-u8 . g$12587$gDo33)
        (get-string-n! . g$12586$gDo33)
        (get-string-n . g$12585$gDo33)
        (get-string-all . g$12584$gDo33)
        (get-line . g$12583$gDo33)
        (get-datum . g$12582$gDo33)
        (get-char . g$12581$gDo33)
        (get-bytevector-some . g$12580$gDo33)
        (get-bytevector-n! . g$12579$gDo33)
        (get-bytevector-n . g$12578$gDo33)
        (get-bytevector-all . g$12577$gDo33)
        (flush-output-port . g$12576$gDo33)
        (close-port . g$12575$gDo33)
        (call-with-string-output-port . g$7387$gDo33)
        (call-with-port . g$7388$gDo33)
        (call-with-bytevector-output-port . g$12574$gDo33)
        (bytevector->string . g$12573$gDo33)
        (buffer-mode? . g$12572$gDo33)
        (binary-port? . g$12571$gDo33)
        (&i/o-encoding . g$12295$gDo33)
        (&i/o-decoding . g$12294$gDo33)
        (&i/o-port . g$12293$gDo33)
        (&i/o-file-does-not-exist . g$12292$gDo33)
        (&i/o-file-already-exists . g$12291$gDo33)
        (&i/o-file-is-read-only . g$12290$gDo33)
        (&i/o-file-protection . g$12289$gDo33)
        (&i/o-filename . g$12288$gDo33)
        (&i/o-invalid-position . g$12287$gDo33)
        (&i/o-write . g$12286$gDo33)
        (&i/o-read . g$12285$gDo33)
        (&i/o . g$12284$gDo33)
        (error-handling-mode . g$12257$gDo33)
        (file-options . g$12256$gDo33)
        (buffer-mode . g$12255$gDo33)
        (eol-style . g$12254$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12815$gDo33
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7485$gDo33)
        (enum-set=? . g$7492$gDo33)
        (enum-set-universe . g$7486$gDo33)
        (enum-set-union . g$7493$gDo33)
        (enum-set-subset? . g$7491$gDo33)
        (enum-set-projection . g$7497$gDo33)
        (enum-set-member? . g$7490$gDo33)
        (enum-set-intersection . g$7494$gDo33)
        (enum-set-indexer . g$7487$gDo33)
        (enum-set-difference . g$7495$gDo33)
        (enum-set-constructor . g$7488$gDo33)
        (enum-set-complement . g$7496$gDo33)
        (enum-set->list . g$7489$gDo33)
        (define-enumeration . g$12268$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12816$gDo33
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6823$gDo33)
        (warning? . g$6734$gDo33)
        (violation? . g$6776$gDo33)
        (undefined-violation? . g$6900$gDo33)
        (syntax-violation? . g$6884$gDo33)
        (syntax-violation-subform . g$6886$gDo33)
        (syntax-violation-form . g$6885$gDo33)
        (syntax-violation . g$9173$gDo33)
        (simple-conditions . g$12562$gDo33)
        (serious-condition? . g$6748$gDo33)
        (non-continuable-violation? . g$6838$gDo33)
        (message-condition? . g$6719$gDo33)
        (make-who-condition . g$6821$gDo33)
        (make-warning . g$6733$gDo33)
        (make-violation . g$6775$gDo33)
        (make-undefined-violation . g$6899$gDo33)
        (make-syntax-violation . g$6881$gDo33)
        (make-serious-condition . g$6747$gDo33)
        (make-non-continuable-violation . g$6837$gDo33)
        (make-message-condition . g$6717$gDo33)
        (make-lexical-violation . g$6865$gDo33)
        (make-irritants-condition . g$6804$gDo33)
        (make-implementation-restriction-violation . g$6851$gDo33)
        (make-error . g$6761$gDo33)
        (make-assertion-violation . g$6789$gDo33)
        (lexical-violation? . g$6866$gDo33)
        (irritants-condition? . g$6806$gDo33)
        (implementation-restriction-violation? . g$6852$gDo33)
        (error? . g$6762$gDo33)
        (condition-who . g$6824$gDo33)
        (condition-predicate . g$12561$gDo33)
        (condition-message . g$6720$gDo33)
        (condition-irritants . g$6807$gDo33)
        (condition-accessor . g$12560$gDo33)
        (condition . g$12559$gDo33)
        (assertion-violation? . g$6790$gDo33)
        (condition? . g$12558$gDo33)
        (&non-continuable . g$12283$gDo33)
        (&undefined . g$12282$gDo33)
        (&syntax . g$12281$gDo33)
        (&lexical . g$12280$gDo33)
        (&implementation-restriction . g$12279$gDo33)
        (&who . g$12278$gDo33)
        (&irritants . g$12277$gDo33)
        (&assertion . g$12276$gDo33)
        (&violation . g$12275$gDo33)
        (&error . g$12274$gDo33)
        (&serious . g$12273$gDo33)
        (&warning . g$12272$gDo33)
        (&message . g$12271$gDo33)
        (&condition . g$12270$gDo33)
        (define-condition-type . g$12269$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12817$gDo33
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12667$gDo33)
        (record-type-uid . g$12666$gDo33)
        (record-type-sealed? . g$12665$gDo33)
        (record-type-parent . g$12664$gDo33)
        (record-type-opaque? . g$12663$gDo33)
        (record-type-name . g$12662$gDo33)
        (record-type-generative? . g$12661$gDo33)
        (record-type-field-names . g$12660$gDo33)
        (record-rtd . g$12659$gDo33)
        (record-field-mutable? . g$12658$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12818$gDo33
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12674$gDo33)
        (record-predicate . g$12673$gDo33)
        (record-mutator . g$12672$gDo33)
        (record-constructor . g$12671$gDo33)
        (record-accessor . g$12670$gDo33)
        (make-record-type-descriptor . g$12669$gDo33)
        (make-record-constructor-descriptor . g$12668$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12819$gDo33
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$12267$gDo33)
        (parent-rtd . g$12266$gDo33)
        (nongenerative . g$12265$gDo33)
        (opaque . g$12264$gDo33)
        (sealed . g$12263$gDo33)
        (protocol . g$12262$gDo33)
        (parent . g$12261$gDo33)
        (immutable . g$12260$gDo33)
        (mutable . g$12259$gDo33)
        (fields . g$12258$gDo33)
        (record-constructor-descriptor . g$12219$gDo33)
        (record-type-descriptor . g$12218$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$7527$gDo33
      'g$12820$gDo33
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$9045$gDo33)
        (&no-nans-rcd . g$12784$gDo33)
        (&no-nans-rtd . g$12783$gDo33)
        (&no-infinities-rcd . g$12782$gDo33)
        (&no-infinities-rtd . g$12781$gDo33)
        (&i/o-encoding-rcd . g$12780$gDo33)
        (&i/o-encoding-rtd . g$12779$gDo33)
        (&i/o-decoding-rcd . g$12778$gDo33)
        (&i/o-decoding-rtd . g$12777$gDo33)
        (&i/o-port-rcd . g$12776$gDo33)
        (&i/o-port-rtd . g$12775$gDo33)
        (&i/o-file-does-not-exist-rcd . g$12774$gDo33)
        (&i/o-file-does-not-exist-rtd . g$12773$gDo33)
        (&i/o-file-already-exists-rcd . g$12772$gDo33)
        (&i/o-file-already-exists-rtd . g$12771$gDo33)
        (&i/o-file-is-read-only-rcd . g$12770$gDo33)
        (&i/o-file-is-read-only-rtd . g$12769$gDo33)
        (&i/o-file-protection-rcd . g$12768$gDo33)
        (&i/o-file-protection-rtd . g$12767$gDo33)
        (&i/o-filename-rcd . g$12766$gDo33)
        (&i/o-filename-rtd . g$12765$gDo33)
        (&i/o-invalid-position-rcd . g$12764$gDo33)
        (&i/o-invalid-position-rtd . g$12763$gDo33)
        (&i/o-write-rcd . g$12762$gDo33)
        (&i/o-write-rtd . g$12761$gDo33)
        (&i/o-read-rcd . g$12760$gDo33)
        (&i/o-read-rtd . g$12759$gDo33)
        (&i/o-rcd . g$12758$gDo33)
        (&i/o-rtd . g$12757$gDo33)
        (&undefined-rcd . g$12756$gDo33)
        (&undefined-rtd . g$12755$gDo33)
        (&syntax-rcd . g$12754$gDo33)
        (&syntax-rtd . g$12753$gDo33)
        (&lexical-rcd . g$12752$gDo33)
        (&lexical-rtd . g$12751$gDo33)
        (&implementation-restriction-rcd . g$12750$gDo33)
        (&implementation-restriction-rtd . g$12749$gDo33)
        (&non-continuable-rcd . g$12748$gDo33)
        (&non-continuable-rtd . g$12747$gDo33)
        (&who-rcd . g$12746$gDo33)
        (&who-rtd . g$12745$gDo33)
        (&irritants-rcd . g$12744$gDo33)
        (&irritants-rtd . g$12743$gDo33)
        (&assertion-rcd . g$12742$gDo33)
        (&assertion-rtd . g$12741$gDo33)
        (&violation-rcd . g$12740$gDo33)
        (&violation-rtd . g$12739$gDo33)
        (&error-rcd . g$12738$gDo33)
        (&error-rtd . g$12737$gDo33)
        (&serious-rcd . g$12736$gDo33)
        (&serious-rtd . g$12735$gDo33)
        (&warning-rcd . g$12734$gDo33)
        (&warning-rtd . g$12733$gDo33)
        (&message-rcd . g$12732$gDo33)
        (&message-rtd . g$12731$gDo33)
        (&condition-rcd . g$12730$gDo33)
        (&condition-rtd . g$12729$gDo33)
        (library-letrec* . g$12728$gDo33)
        (annotation-stripped . g$12727$gDo33)
        (annotation-source . g$12726$gDo33)
        (annotation-expression . g$12725$gDo33)
        (annotation? . g$12724$gDo33)
        (read-annotated . g$12723$gDo33)
        (tanh . g$12722$gDo33)
        (cosh . g$12721$gDo33)
        (sinh . g$12720$gDo33)
        (make-guid . g$12719$gDo33)
        (unspecified? . g$12718$gDo33)
        (make-list . g$5856$gDo33)
        (last-pair . g$5855$gDo33)
        (load-r5rs . g$12717$gDo33)
        (license . g$12716$gDo33)
        (stacktrace . g$12715$gDo33)
        (ironscheme-build . g$12161$gDo33)
        (define-clr-class-internal . g$12714$gDo33)
        (clr-field-set!-internal . g$12713$gDo33)
        (clr-field-get-internal . g$12712$gDo33)
        (clr-cast-internal . g$12711$gDo33)
        (clr-call-internal . g$12710$gDo33)
        (clr-new-internal . g$12709$gDo33)
        (clr-new-array-internal . g$12708$gDo33)
        (clr-is-internal . g$12707$gDo33)
        (clr-reference-internal . g$12706$gDo33)
        (clr-using-internal . g$12705$gDo33)
        (syntax-error . g$9170$gDo33)
        (syntax-dispatch . g$9040$gDo33)
        (compile-core . g$12704$gDo33)
        (eval-core . g$12703$gDo33)
        (set-symbol-value! . g$12702$gDo33)
        (symbol-value . g$12701$gDo33)
        (symbol-value? . g$12700$gDo33)
        (ungensym . g$12699$gDo33)
        (gensym . g$12698$gDo33)
        (void . g$12697$gDo33)
        (load-serialized-library . g$12696$gDo33)
        (serialize-library . g$12695$gDo33)
        (compile-system-libraries . g$12163$gDo33)
        (compile->closure . g$12165$gDo33)
        (compile . g$12164$gDo33)
        (load . g$12160$gDo33)
        (interaction-environment . g$9180$gDo33)
        (char-ready? . g$12694$gDo33)
        (string-upcase . g$12693$gDo33)
        (string-titlecase . g$12692$gDo33)
        (string-normalize-nfkd . g$12691$gDo33)
        (string-normalize-nfkc . g$12690$gDo33)
        (string-normalize-nfd . g$12689$gDo33)
        (string-normalize-nfc . g$12688$gDo33)
        (string-foldcase . g$12687$gDo33)
        (string-downcase . g$12686$gDo33)
        (string-ci>? . g$6995$gDo33)
        (string-ci>=? . g$6997$gDo33)
        (string-ci=? . g$6993$gDo33)
        (string-ci<? . g$6994$gDo33)
        (string-ci<=? . g$6996$gDo33)
        (char-whitespace? . g$12685$gDo33)
        (char-upper-case? . g$12684$gDo33)
        (char-title-case? . g$12683$gDo33)
        (char-numeric? . g$12682$gDo33)
        (char-lower-case? . g$12681$gDo33)
        (char-general-category . g$12680$gDo33)
        (char-upcase . g$12679$gDo33)
        (char-titlecase . g$12678$gDo33)
        (char-foldcase . g$12677$gDo33)
        (char-downcase . g$12676$gDo33)
        (char-ci>? . g$7034$gDo33)
        (char-ci>=? . g$7036$gDo33)
        (char-ci=? . g$7032$gDo33)
        (char-ci<? . g$7033$gDo33)
        (char-ci<=? . g$7035$gDo33)
        (char-alphabetic? . g$12675$gDo33)
        (variable-transformer-procedure . g$8777$gDo33)
        (variable-transformer? . g$8776$gDo33)
        (make-variable-transformer . g$8775$gDo33)
        (identifier? . g$9174$gDo33)
        (generate-temporaries . g$9163$gDo33)
        (free-identifier=? . g$9164$gDo33)
        (syntax->datum . g$9176$gDo33)
        (datum->syntax . g$9175$gDo33)
        (bound-identifier=? . g$9165$gDo33)
        (record-type-descriptor? . g$12674$gDo33)
        (record-predicate . g$12673$gDo33)
        (record-mutator . g$12672$gDo33)
        (record-constructor . g$12671$gDo33)
        (record-accessor . g$12670$gDo33)
        (make-record-type-descriptor . g$12669$gDo33)
        (make-record-constructor-descriptor . g$12668$gDo33)
        (record? . g$12667$gDo33)
        (record-type-uid . g$12666$gDo33)
        (record-type-sealed? . g$12665$gDo33)
        (record-type-parent . g$12664$gDo33)
        (record-type-opaque? . g$12663$gDo33)
        (record-type-name . g$12662$gDo33)
        (record-type-generative? . g$12661$gDo33)
        (record-type-field-names . g$12660$gDo33)
        (record-rtd . g$12659$gDo33)
        (record-field-mutable? . g$12658$gDo33)
        (delete-file . g$6569$gDo33)
        (file-exists? . g$6568$gDo33)
        (vector-sort! . g$12657$gDo33)
        (vector-sort . g$12656$gDo33)
        (list-sort . g$6935$gDo33)
        (symbol-hash . g$12655$gDo33)
        (string-ci-hash . g$12654$gDo33)
        (string-hash . g$12653$gDo33)
        (equal-hash . g$12652$gDo33)
        (hashtable-equivalence-function . g$12651$gDo33)
        (make-hashtable . g$12650$gDo33)
        (hashtable-hash-function . g$12649$gDo33)
        (make-eqv-hashtable . g$6537$gDo33)
        (make-eq-hashtable . g$6536$gDo33)
        (hashtable? . g$12648$gDo33)
        (hashtable-update! . g$6543$gDo33)
        (hashtable-size . g$6538$gDo33)
        (hashtable-set! . g$6540$gDo33)
        (hashtable-ref . g$6539$gDo33)
        (hashtable-mutable? . g$12647$gDo33)
        (hashtable-keys . g$12646$gDo33)
        (hashtable-entries . g$12645$gDo33)
        (hashtable-delete! . g$6541$gDo33)
        (hashtable-copy . g$12644$gDo33)
        (hashtable-contains? . g$6542$gDo33)
        (hashtable-clear! . g$6544$gDo33)
        (call-with-output-file . g$7420$gDo33)
        (call-with-input-file . g$7419$gDo33)
        (write-char . g$7401$gDo33)
        (write . g$12643$gDo33)
        (with-output-to-file . g$7418$gDo33)
        (with-input-from-file . g$7417$gDo33)
        (read-char . g$7400$gDo33)
        (read . g$12642$gDo33)
        (peek-char . g$7399$gDo33)
        (open-output-file . g$12641$gDo33)
        (open-input-file . g$12640$gDo33)
        (newline . g$7421$gDo33)
        (display . g$12639$gDo33)
        (close-output-port . g$12638$gDo33)
        (close-input-port . g$12637$gDo33)
        (eof-object? . g$12636$gDo33)
        (eof-object . g$12635$gDo33)
        (current-error-port . g$12634$gDo33)
        (current-output-port . g$12633$gDo33)
        (current-input-port . g$12632$gDo33)
        (output-port? . g$12631$gDo33)
        (input-port? . g$12630$gDo33)
        (utf-8-codec . g$12629$gDo33)
        (utf-16-codec . g$12628$gDo33)
        (transcoder-error-handling-mode . g$12627$gDo33)
        (transcoder-eol-style . g$12626$gDo33)
        (transcoder-codec . g$12625$gDo33)
        (transcoded-port . g$12624$gDo33)
        (textual-port? . g$12623$gDo33)
        (string->bytevector . g$12622$gDo33)
        (standard-output-port . g$12621$gDo33)
        (standard-input-port . g$12620$gDo33)
        (standard-error-port . g$12619$gDo33)
        (set-port-position! . g$12618$gDo33)
        (put-u8 . g$12617$gDo33)
        (put-string . g$12616$gDo33)
        (put-datum . g$12615$gDo33)
        (put-char . g$12614$gDo33)
        (put-bytevector . g$12613$gDo33)
        (port? . g$7386$gDo33)
        (port-transcoder . g$12612$gDo33)
        (port-position . g$12611$gDo33)
        (port-has-set-port-position!? . g$12610$gDo33)
        (port-has-port-position? . g$12609$gDo33)
        (port-eof? . g$12608$gDo33)
        (output-port-buffer-mode . g$12607$gDo33)
        (open-string-output-port . g$7385$gDo33)
        (open-string-input-port . g$12606$gDo33)
        (open-file-output-port . g$12605$gDo33)
        (open-file-input/output-port . g$12604$gDo33)
        (open-file-input-port . g$12603$gDo33)
        (open-bytevector-output-port . g$12602$gDo33)
        (open-bytevector-input-port . g$12601$gDo33)
        (native-transcoder . g$12600$gDo33)
        (native-eol-style . g$12599$gDo33)
        (make-transcoder . g$12598$gDo33)
        (latin-1-codec . g$12597$gDo33)
        (make-i/o-write-error . g$7241$gDo33)
        (make-i/o-read-error . g$7227$gDo33)
        (make-i/o-port-error . g$7346$gDo33)
        (make-i/o-invalid-position-error . g$7256$gDo33)
        (make-i/o-filename-error . g$7273$gDo33)
        (make-i/o-file-protection-error . g$7289$gDo33)
        (make-i/o-file-is-read-only-error . g$7303$gDo33)
        (make-i/o-file-does-not-exist-error . g$7331$gDo33)
        (make-i/o-file-already-exists-error . g$7317$gDo33)
        (make-i/o-error . g$7213$gDo33)
        (make-i/o-encoding-error . g$7377$gDo33)
        (make-i/o-decoding-error . g$7362$gDo33)
        (make-custom-textual-output-port . g$12596$gDo33)
        (make-custom-textual-input/output-port . g$12595$gDo33)
        (make-custom-textual-input-port . g$12594$gDo33)
        (make-custom-binary-output-port . g$12593$gDo33)
        (make-custom-binary-input/output-port . g$12592$gDo33)
        (make-custom-binary-input-port . g$12591$gDo33)
        (make-bytevector . g$12590$gDo33)
        (lookahead-u8 . g$12589$gDo33)
        (lookahead-char . g$12588$gDo33)
        (i/o-write-error? . g$7242$gDo33)
        (i/o-read-error? . g$7228$gDo33)
        (i/o-port-error? . g$7348$gDo33)
        (i/o-invalid-position-error? . g$7258$gDo33)
        (i/o-error-position . g$7259$gDo33)
        (i/o-filename-error? . g$7275$gDo33)
        (i/o-file-protection-error? . g$7290$gDo33)
        (i/o-file-is-read-only-error? . g$7304$gDo33)
        (i/o-file-does-not-exist-error? . g$7332$gDo33)
        (i/o-file-already-exists-error? . g$7318$gDo33)
        (i/o-error? . g$7214$gDo33)
        (i/o-error-port . g$7349$gDo33)
        (i/o-error-filename . g$7276$gDo33)
        (i/o-encoding-error? . g$7379$gDo33)
        (i/o-encoding-error-char . g$7380$gDo33)
        (i/o-decoding-error? . g$7363$gDo33)
        (get-u8 . g$12587$gDo33)
        (get-string-n! . g$12586$gDo33)
        (get-string-n . g$12585$gDo33)
        (get-string-all . g$12584$gDo33)
        (get-line . g$12583$gDo33)
        (get-datum . g$12582$gDo33)
        (get-char . g$12581$gDo33)
        (get-bytevector-some . g$12580$gDo33)
        (get-bytevector-n! . g$12579$gDo33)
        (get-bytevector-n . g$12578$gDo33)
        (get-bytevector-all . g$12577$gDo33)
        (flush-output-port . g$12576$gDo33)
        (close-port . g$12575$gDo33)
        (call-with-string-output-port . g$7387$gDo33)
        (call-with-port . g$7388$gDo33)
        (call-with-bytevector-output-port . g$12574$gDo33)
        (bytevector->string . g$12573$gDo33)
        (buffer-mode? . g$12572$gDo33)
        (binary-port? . g$12571$gDo33)
        (scheme-report-environment . g$9153$gDo33)
        (quotient . g$6914$gDo33)
        (null-environment . g$9152$gDo33)
        (remainder . g$6915$gDo33)
        (modulo . g$6916$gDo33)
        (inexact->exact . g$6911$gDo33)
        (force . g$6918$gDo33)
        (exact->inexact . g$6912$gDo33)
        (exit . g$12570$gDo33)
        (command-line . g$12157$gDo33)
        (string-fill! . g$12569$gDo33)
        (string-set! . g$12568$gDo33)
        (set-cdr! . g$12567$gDo33)
        (set-car! . g$12566$gDo33)
        (remove . g$5878$gDo33)
        (remv . g$5879$gDo33)
        (remp . g$5859$gDo33)
        (remq . g$5880$gDo33)
        (partition . g$5858$gDo33)
        (memv . g$5866$gDo33)
        (memq . g$5865$gDo33)
        (memp . g$5868$gDo33)
        (member . g$5867$gDo33)
        (exists . g$5872$gDo33)
        (for-all . g$5871$gDo33)
        (fold-right . g$5877$gDo33)
        (fold-left . g$5876$gDo33)
        (find . g$5857$gDo33)
        (filter . g$5860$gDo33)
        (cons* . g$5875$gDo33)
        (assv . g$5862$gDo33)
        (assq . g$5861$gDo33)
        (assp . g$5864$gDo33)
        (assoc . g$5863$gDo33)
        (with-exception-handler . g$12565$gDo33)
        (raise-continuable . g$12564$gDo33)
        (raise . g$12563$gDo33)
        (eval . g$9155$gDo33)
        (environment . g$9151$gDo33)
        (make-enumeration . g$7485$gDo33)
        (enum-set=? . g$7492$gDo33)
        (enum-set-universe . g$7486$gDo33)
        (enum-set-union . g$7493$gDo33)
        (enum-set-subset? . g$7491$gDo33)
        (enum-set-projection . g$7497$gDo33)
        (enum-set-member? . g$7490$gDo33)
        (enum-set-intersection . g$7494$gDo33)
        (enum-set-indexer . g$7487$gDo33)
        (enum-set-difference . g$7495$gDo33)
        (enum-set-constructor . g$7488$gDo33)
        (enum-set-complement . g$7496$gDo33)
        (enum-set->list . g$7489$gDo33)
        (who-condition? . g$6823$gDo33)
        (warning? . g$6734$gDo33)
        (violation? . g$6776$gDo33)
        (undefined-violation? . g$6900$gDo33)
        (syntax-violation? . g$6884$gDo33)
        (syntax-violation-subform . g$6886$gDo33)
        (syntax-violation-form . g$6885$gDo33)
        (syntax-violation . g$9173$gDo33)
        (simple-conditions . g$12562$gDo33)
        (serious-condition? . g$6748$gDo33)
        (non-continuable-violation? . g$6838$gDo33)
        (message-condition? . g$6719$gDo33)
        (make-who-condition . g$6821$gDo33)
        (make-warning . g$6733$gDo33)
        (make-violation . g$6775$gDo33)
        (make-undefined-violation . g$6899$gDo33)
        (make-syntax-violation . g$6881$gDo33)
        (make-serious-condition . g$6747$gDo33)
        (make-non-continuable-violation . g$6837$gDo33)
        (make-message-condition . g$6717$gDo33)
        (make-lexical-violation . g$6865$gDo33)
        (make-irritants-condition . g$6804$gDo33)
        (make-implementation-restriction-violation . g$6851$gDo33)
        (make-error . g$6761$gDo33)
        (make-assertion-violation . g$6789$gDo33)
        (lexical-violation? . g$6866$gDo33)
        (irritants-condition? . g$6806$gDo33)
        (implementation-restriction-violation? . g$6852$gDo33)
        (error? . g$6762$gDo33)
        (condition-who . g$6824$gDo33)
        (condition-predicate . g$12561$gDo33)
        (condition-message . g$6720$gDo33)
        (condition-irritants . g$6807$gDo33)
        (condition-accessor . g$12560$gDo33)
        (condition . g$12559$gDo33)
        (assertion-violation? . g$6790$gDo33)
        (condition? . g$12558$gDo33)
        (utf32->string . g$12557$gDo33)
        (utf16->string . g$12556$gDo33)
        (utf8->string . g$12555$gDo33)
        (uint-list->bytevector . g$12554$gDo33)
        (u8-list->bytevector . g$12553$gDo33)
        (string->utf8 . g$12552$gDo33)
        (string->utf32 . g$12551$gDo33)
        (string->utf16 . g$12550$gDo33)
        (sint-list->bytevector . g$12549$gDo33)
        (native-endianness . g$6575$gDo33)
        (bytevector? . g$12548$gDo33)
        (bytevector=? . g$12547$gDo33)
        (bytevector-uint-set! . g$12546$gDo33)
        (bytevector-uint-ref . g$12545$gDo33)
        (bytevector-u8-set! . g$12544$gDo33)
        (bytevector-u8-ref . g$12543$gDo33)
        (bytevector-u64-set! . g$6596$gDo33)
        (bytevector-u64-ref . g$6592$gDo33)
        (bytevector-u64-native-set! . g$6598$gDo33)
        (bytevector-u64-native-ref . g$6594$gDo33)
        (bytevector-u32-set! . g$6588$gDo33)
        (bytevector-u32-ref . g$6584$gDo33)
        (bytevector-u32-native-set! . g$6590$gDo33)
        (bytevector-u32-native-ref . g$6586$gDo33)
        (bytevector-u16-set! . g$6580$gDo33)
        (bytevector-u16-ref . g$6576$gDo33)
        (bytevector-u16-native-set! . g$6582$gDo33)
        (bytevector-u16-native-ref . g$6578$gDo33)
        (bytevector-sint-set! . g$12542$gDo33)
        (bytevector-sint-ref . g$12541$gDo33)
        (bytevector-s8-set! . g$12540$gDo33)
        (bytevector-s8-ref . g$12539$gDo33)
        (bytevector-s64-set! . g$6597$gDo33)
        (bytevector-s64-ref . g$6593$gDo33)
        (bytevector-s64-native-set! . g$6599$gDo33)
        (bytevector-s64-native-ref . g$6595$gDo33)
        (bytevector-s32-set! . g$6589$gDo33)
        (bytevector-s32-ref . g$6585$gDo33)
        (bytevector-s32-native-set! . g$6591$gDo33)
        (bytevector-s32-native-ref . g$6587$gDo33)
        (bytevector-s16-set! . g$6581$gDo33)
        (bytevector-s16-ref . g$6577$gDo33)
        (bytevector-s16-native-set! . g$6583$gDo33)
        (bytevector-s16-native-ref . g$6579$gDo33)
        (bytevector-length . g$12538$gDo33)
        (bytevector-ieee-single-set! . g$12537$gDo33)
        (bytevector-ieee-single-ref . g$12536$gDo33)
        (bytevector-ieee-single-native-set! . g$6602$gDo33)
        (bytevector-ieee-single-native-ref . g$6600$gDo33)
        (bytevector-ieee-double-set! . g$12535$gDo33)
        (bytevector-ieee-double-ref . g$12534$gDo33)
        (bytevector-ieee-double-native-set! . g$6603$gDo33)
        (bytevector-ieee-double-native-ref . g$6601$gDo33)
        (bytevector-fill! . g$12533$gDo33)
        (bytevector-copy! . g$12532$gDo33)
        (bytevector-copy . g$12531$gDo33)
        (bytevector->uint-list . g$12530$gDo33)
        (bytevector->u8-list . g$12529$gDo33)
        (bytevector->sint-list . g$12528$gDo33)
        (no-nans-violation? . g$7199$gDo33)
        (no-infinities-violation? . g$7185$gDo33)
        (make-no-nans-violation . g$7198$gDo33)
        (make-no-infinities-violation . g$7184$gDo33)
        (real->flonum . g$12527$gDo33)
        (flzero? . g$12526$gDo33)
        (fltruncate . g$12525$gDo33)
        (fltan . g$12524$gDo33)
        (flsqrt . g$12523$gDo33)
        (flsin . g$12522$gDo33)
        (flround . g$12521$gDo33)
        (flpositive? . g$12520$gDo33)
        (flonum? . g$12519$gDo33)
        (flodd? . g$12518$gDo33)
        (flnumerator . g$12517$gDo33)
        (flnegative? . g$12516$gDo33)
        (flnan? . g$12515$gDo33)
        (flmod0 . g$12514$gDo33)
        (flmod . g$12513$gDo33)
        (flmin . g$12512$gDo33)
        (flmax . g$12511$gDo33)
        (fllog . g$12510$gDo33)
        (flinteger? . g$12509$gDo33)
        (flinfinite? . g$12508$gDo33)
        (flfloor . g$12507$gDo33)
        (flfinite? . g$12506$gDo33)
        (flexpt . g$12505$gDo33)
        (flexp . g$12504$gDo33)
        (fleven? . g$12503$gDo33)
        (fldiv0-and-mod0 . g$12502$gDo33)
        (fldiv0 . g$12501$gDo33)
        (fldiv-and-mod . g$12500$gDo33)
        (fldiv . g$12499$gDo33)
        (fldenominator . g$12498$gDo33)
        (flcos . g$12497$gDo33)
        (flceiling . g$12496$gDo33)
        (flatan . g$12495$gDo33)
        (flasin . g$12494$gDo33)
        (flacos . g$12493$gDo33)
        (flabs . g$12492$gDo33)
        (fl>? . g$12491$gDo33)
        (fl>=? . g$12490$gDo33)
        (fl=? . g$12489$gDo33)
        (fl<? . g$12488$gDo33)
        (fl<=? . g$12487$gDo33)
        (fl/ . g$12486$gDo33)
        (fl- . g$12485$gDo33)
        (fl+ . g$12484$gDo33)
        (fl* . g$12483$gDo33)
        (fixnum->flonum . g$12482$gDo33)
        (fxzero? . g$12481$gDo33)
        (fxxor . g$12480$gDo33)
        (fxrotate-bit-field . g$7131$gDo33)
        (fxreverse-bit-field . g$12479$gDo33)
        (fxpositive? . g$12478$gDo33)
        (fxodd? . g$12477$gDo33)
        (fxnot . g$12476$gDo33)
        (fxnegative? . g$12475$gDo33)
        (fxmod0 . g$12474$gDo33)
        (fxmod . g$12473$gDo33)
        (fxmin . g$12472$gDo33)
        (fxmax . g$12471$gDo33)
        (fxlength . g$12470$gDo33)
        (fxior . g$12469$gDo33)
        (fxif . g$7125$gDo33)
        (fxfirst-bit-set . g$12468$gDo33)
        (fxeven? . g$12467$gDo33)
        (fxdiv0-and-mod0 . g$12466$gDo33)
        (fxdiv0 . g$12465$gDo33)
        (fxdiv-and-mod . g$12464$gDo33)
        (fxdiv . g$12463$gDo33)
        (fxcopy-bit-field . g$7128$gDo33)
        (fxcopy-bit . g$7126$gDo33)
        (fxbit-set? . g$12462$gDo33)
        (fxbit-field . g$7127$gDo33)
        (fxbit-count . g$12461$gDo33)
        (fxarithmetic-shift-right . g$7130$gDo33)
        (fxarithmetic-shift-left . g$7129$gDo33)
        (fxarithmetic-shift . g$12460$gDo33)
        (fxand . g$12459$gDo33)
        (fx>? . g$12458$gDo33)
        (fx>=? . g$12457$gDo33)
        (fx=? . g$12456$gDo33)
        (fx<? . g$12455$gDo33)
        (fx<=? . g$12454$gDo33)
        (fx-/carry . g$7123$gDo33)
        (fx- . g$12453$gDo33)
        (fx+/carry . g$7124$gDo33)
        (fx+ . g$12452$gDo33)
        (fx*/carry . g$7122$gDo33)
        (fx* . g$12451$gDo33)
        (greatest-fixnum . g$12450$gDo33)
        (least-fixnum . g$12449$gDo33)
        (fixnum-width . g$12448$gDo33)
        (fixnum? . g$12447$gDo33)
        (bitwise-rotate-bit-field . g$7096$gDo33)
        (bitwise-reverse-bit-field . g$12446$gDo33)
        (bitwise-length . g$12445$gDo33)
        (bitwise-if . g$7090$gDo33)
        (bitwise-first-bit-set . g$12444$gDo33)
        (bitwise-copy-bit-field . g$7093$gDo33)
        (bitwise-copy-bit . g$7091$gDo33)
        (bitwise-bit-set? . g$12443$gDo33)
        (bitwise-bit-field . g$7092$gDo33)
        (bitwise-bit-count . g$12442$gDo33)
        (bitwise-xor . g$12441$gDo33)
        (bitwise-ior . g$12440$gDo33)
        (bitwise-and . g$12439$gDo33)
        (bitwise-not . g$12438$gDo33)
        (bitwise-arithmetic-shift-right . g$7095$gDo33)
        (bitwise-arithmetic-shift-left . g$7094$gDo33)
        (bitwise-arithmetic-shift . g$12437$gDo33)
        (zero? . g$6021$gDo33)
        (vector? . g$12436$gDo33)
        (vector-set! . g$12435$gDo33)
        (vector-ref . g$12434$gDo33)
        (vector-map . g$12433$gDo33)
        (vector-length . g$12432$gDo33)
        (vector-for-each . g$12431$gDo33)
        (vector-fill! . g$12430$gDo33)
        (vector->list . g$12429$gDo33)
        (vector . g$12428$gDo33)
        (values . g$12427$gDo33)
        (truncate . g$12426$gDo33)
        (tan . g$12425$gDo33)
        (symbol? . g$12424$gDo33)
        (symbol=? . g$6067$gDo33)
        (symbol->string . g$12423$gDo33)
        (substring . g$12422$gDo33)
        (string? . g$12421$gDo33)
        (string>? . g$6064$gDo33)
        (string>=? . g$6066$gDo33)
        (string=? . g$6062$gDo33)
        (string<? . g$6063$gDo33)
        (string<=? . g$6065$gDo33)
        (string-ref . g$12420$gDo33)
        (string-length . g$12419$gDo33)
        (string-for-each . g$12418$gDo33)
        (string-copy . g$12417$gDo33)
        (string-append . g$12416$gDo33)
        (string->symbol . g$12415$gDo33)
        (string->number . g$12414$gDo33)
        (string->list . g$12413$gDo33)
        (string . g$12412$gDo33)
        (sqrt . g$12411$gDo33)
        (sin . g$12410$gDo33)
        (round . g$12409$gDo33)
        (reverse . g$12408$gDo33)
        (real? . g$12407$gDo33)
        (real-valued? . g$12406$gDo33)
        (real-part . g$12405$gDo33)
        (rationalize . g$6108$gDo33)
        (rational? . g$12404$gDo33)
        (rational-valued? . g$12403$gDo33)
        (procedure? . g$12402$gDo33)
        (positive? . g$6019$gDo33)
        (pair? . g$12401$gDo33)
        (odd? . g$6023$gDo33)
        (numerator . g$12400$gDo33)
        (number? . g$12399$gDo33)
        (number->string . g$12398$gDo33)
        (null? . g$12397$gDo33)
        (not . g$12396$gDo33)
        (negative? . g$6020$gDo33)
        (nan? . g$12395$gDo33)
        (min . g$6025$gDo33)
        (max . g$6024$gDo33)
        (map . g$5873$gDo33)
        (make-vector . g$12394$gDo33)
        (make-string . g$12393$gDo33)
        (make-rectangular . g$12392$gDo33)
        (make-polar . g$12391$gDo33)
        (magnitude . g$12390$gDo33)
        (log . g$12389$gDo33)
        (list? . g$12388$gDo33)
        (list-tail . g$5853$gDo33)
        (list-ref . g$5854$gDo33)
        (list->vector . g$12387$gDo33)
        (list->string . g$12386$gDo33)
        (list . g$12385$gDo33)
        (length . g$12384$gDo33)
        (lcm . g$6027$gDo33)
        (integer? . g$12383$gDo33)
        (integer-valued? . g$12382$gDo33)
        (integer->char . g$12381$gDo33)
        (infinite? . g$12380$gDo33)
        (inexact? . g$12379$gDo33)
        (inexact . g$12378$gDo33)
        (imag-part . g$12377$gDo33)
        (gcd . g$6026$gDo33)
        (for-each . g$5874$gDo33)
        (floor . g$12376$gDo33)
        (finite? . g$12375$gDo33)
        (expt . g$12374$gDo33)
        (exp . g$12373$gDo33)
        (exact? . g$12372$gDo33)
        (exact-integer-sqrt . g$12371$gDo33)
        (exact . g$12370$gDo33)
        (even? . g$6022$gDo33)
        (error . g$12369$gDo33)
        (eqv? . g$12368$gDo33)
        (equal? . g$12367$gDo33)
        (eq? . g$12366$gDo33)
        (dynamic-wind . g$12365$gDo33)
        (div0-and-mod0 . g$12364$gDo33)
        (mod0 . g$12363$gDo33)
        (div0 . g$12362$gDo33)
        (div-and-mod . g$12361$gDo33)
        (mod . g$12360$gDo33)
        (div . g$12359$gDo33)
        (denominator . g$12358$gDo33)
        (cos . g$12357$gDo33)
        (cons . g$12356$gDo33)
        (complex? . g$12355$gDo33)
        (char? . g$12354$gDo33)
        (char>? . g$6105$gDo33)
        (char>=? . g$6107$gDo33)
        (char=? . g$6103$gDo33)
        (char<? . g$6104$gDo33)
        (char<=? . g$6106$gDo33)
        (char->integer . g$12353$gDo33)
        (ceiling . g$12352$gDo33)
        (call-with-values . g$12351$gDo33)
        (call/cc . g$12350$gDo33)
        (call-with-current-continuation . g$12349$gDo33)
        (cddddr . g$6018$gDo33)
        (cdddar . g$6017$gDo33)
        (cddadr . g$6016$gDo33)
        (cddaar . g$6015$gDo33)
        (cdaddr . g$6014$gDo33)
        (cdadar . g$6013$gDo33)
        (cdaadr . g$6012$gDo33)
        (cdaaar . g$6011$gDo33)
        (cadddr . g$6010$gDo33)
        (caddar . g$6009$gDo33)
        (cadadr . g$6008$gDo33)
        (cadaar . g$6007$gDo33)
        (caaddr . g$6006$gDo33)
        (caadar . g$6005$gDo33)
        (caaadr . g$6004$gDo33)
        (caaaar . g$6003$gDo33)
        (cdddr . g$6002$gDo33)
        (cddar . g$6001$gDo33)
        (cdadr . g$6000$gDo33)
        (cdaar . g$5999$gDo33)
        (caddr . g$5998$gDo33)
        (cadar . g$5997$gDo33)
        (caadr . g$5996$gDo33)
        (caaar . g$5995$gDo33)
        (cddr . g$5994$gDo33)
        (cdar . g$5993$gDo33)
        (cadr . g$5992$gDo33)
        (caar . g$5991$gDo33)
        (cdr . g$12348$gDo33)
        (car . g$12347$gDo33)
        (boolean? . g$12346$gDo33)
        (boolean=? . g$6068$gDo33)
        (atan . g$12345$gDo33)
        (assertion-violation . g$12344$gDo33)
        (asin . g$12343$gDo33)
        (apply . g$12342$gDo33)
        (append . g$12341$gDo33)
        (angle . g$12340$gDo33)
        (acos . g$12339$gDo33)
        (abs . g$12338$gDo33)
        (/ . g$12337$gDo33)
        (* . g$12336$gDo33)
        (- . g$12335$gDo33)
        (+ . g$12334$gDo33)
        (>= . g$12333$gDo33)
        (> . g$12332$gDo33)
        (= . g$12331$gDo33)
        (<= . g$12330$gDo33)
        (< . g$12329$gDo33)
        (make-record-printer . g$12328$gDo33)
        (eqv-hash . g$12327$gDo33)
        (reverse! . g$12326$gDo33)
        (deserialize-port . g$12325$gDo33)
        (serialize-port . g$12324$gDo33)
        (enum-set? . g$7460$gDo33)
        (make-promise . g$6917$gDo33)
        (load/args . g$12159$gDo33)
        (printf . g$7571$gDo33)
        (fprintf . g$7572$gDo33)
        (format . g$7573$gDo33)
        (procedure-form . g$12323$gDo33)
        (procedure-environment . g$12322$gDo33)
        (procedure-name . g$12321$gDo33)
        (procedure-arity . g$12320$gDo33)
        (gc-collect . g$12319$gDo33)
        (clr-type? . g$12318$gDo33)
        (get-clr-type . g$12317$gDo33)
        (get-command-line . g$12316$gDo33)
        (vector-append . g$12315$gDo33)
        (vector-filter . g$12314$gDo33)
        (vector-reverse! . g$12313$gDo33)
        (vector-contains? . g$12312$gDo33)
        (vector-index-of . g$12311$gDo33)
        (vector-copy . g$12310$gDo33)
        (vector-binary-search . g$12309$gDo33)
        (string-ci-compare . g$12308$gDo33)
        (string-compare . g$12307$gDo33)
        (string-format . g$12306$gDo33)
        (trace-printer . g$12156$gDo33)
        (make-traced-procedure . g$12305$gDo33)
        (make-traced-macro . g$7593$gDo33)
        (assertion-error . g$9169$gDo33)
        (time-it . g$12304$gDo33)
        (make-parameter . g$7874$gDo33)
        (library-locator . g$12303$gDo33)
        (get-library-paths . g$12302$gDo33)
        (open-tcp-input/output-port . g$12301$gDo33)
        (hashtable-for-each . g$12300$gDo33)
        (hashtable-map . g$12299$gDo33)
        (environment-bindings . g$9147$gDo33)
        (environment-symbols . g$9150$gDo33)
        (interaction-environment-symbols . g$9146$gDo33)
        (optimization-level . g$12298$gDo33)
        (library-path . g$8329$gDo33)
        (expand->core . g$9156$gDo33)
        (expand . g$9154$gDo33)
        (expand-boot-cps . g$7651$gDo33)
        (convert->cps . g$7648$gDo33)
        (&no-nans . g$12297$gDo33)
        (&no-infinities . g$12296$gDo33)
        (&i/o-encoding . g$12295$gDo33)
        (&i/o-decoding . g$12294$gDo33)
        (&i/o-port . g$12293$gDo33)
        (&i/o-file-does-not-exist . g$12292$gDo33)
        (&i/o-file-already-exists . g$12291$gDo33)
        (&i/o-file-is-read-only . g$12290$gDo33)
        (&i/o-file-protection . g$12289$gDo33)
        (&i/o-filename . g$12288$gDo33)
        (&i/o-invalid-position . g$12287$gDo33)
        (&i/o-write . g$12286$gDo33)
        (&i/o-read . g$12285$gDo33)
        (&i/o . g$12284$gDo33)
        (&non-continuable . g$12283$gDo33)
        (&undefined . g$12282$gDo33)
        (&syntax . g$12281$gDo33)
        (&lexical . g$12280$gDo33)
        (&implementation-restriction . g$12279$gDo33)
        (&who . g$12278$gDo33)
        (&irritants . g$12277$gDo33)
        (&assertion . g$12276$gDo33)
        (&violation . g$12275$gDo33)
        (&error . g$12274$gDo33)
        (&serious . g$12273$gDo33)
        (&warning . g$12272$gDo33)
        (&message . g$12271$gDo33)
        (&condition . g$12270$gDo33)
        (define-condition-type . g$12269$gDo33)
        (define-enumeration . g$12268$gDo33)
        (define-record-type . g$12267$gDo33)
        (parent-rtd . g$12266$gDo33)
        (nongenerative . g$12265$gDo33)
        (opaque . g$12264$gDo33)
        (sealed . g$12263$gDo33)
        (protocol . g$12262$gDo33)
        (parent . g$12261$gDo33)
        (immutable . g$12260$gDo33)
        (mutable . g$12259$gDo33)
        (fields . g$12258$gDo33)
        (error-handling-mode . g$12257$gDo33)
        (file-options . g$12256$gDo33)
        (buffer-mode . g$12255$gDo33)
        (eol-style . g$12254$gDo33)
        (guard . g$12253$gDo33)
        (trace-letrec-syntax . g$12252$gDo33)
        (trace-let-syntax . g$12251$gDo33)
        (trace-define-syntax . g$12250$gDo33)
        (trace-define . g$12249$gDo33)
        (trace-lambda . g$12248$gDo33)
        (unsyntax-splicing . g$12247$gDo33)
        (unsyntax . g$12246$gDo33)
        (unquote-splicing . g$12245$gDo33)
        (unquote . g$12244$gDo33)
        (_ . g$12243$gDo33)
        (else . g$12242$gDo33)
        (=> . g$12241$gDo33)
        (... . g$12240$gDo33)
        (assert . g$12239$gDo33)
        (endianness . g$12238$gDo33)
        (delay . g$12237$gDo33)
        (time . g$12236$gDo33)
        (or . g$12235$gDo33)
        (and . g$12234$gDo33)
        (do . g$12233$gDo33)
        (cond . g$12232$gDo33)
        (let* . g$12231$gDo33)
        (let . g$12230$gDo33)
        (identifier-syntax . g$12229$gDo33)
        (with-syntax . g$12228$gDo33)
        (quasisyntax . g$12227$gDo33)
        (quasiquote . g$12226$gDo33)
        (syntax-rules . g$12225$gDo33)
        (include-into . g$12224$gDo33)
        (include . g$12223$gDo33)
        (define-struct . g$12222$gDo33)
        (let-values . g$12221$gDo33)
        (let*-values . g$12220$gDo33)
        (record-constructor-descriptor . g$12219$gDo33)
        (record-type-descriptor . g$12218$gDo33)
        (fluid-let-syntax . g$12217$gDo33)
        (case . g$12216$gDo33)
        (parameterize . g$12215$gDo33)
        (unless . g$12214$gDo33)
        (when . g$12213$gDo33)
        (if . g$12212$gDo33)
        (letrec* . g$12211$gDo33)
        (letrec . g$12210$gDo33)
        (type-descriptor . g$12209$gDo33)
        (case-lambda . g$12208$gDo33)
        (lambda . g$12207$gDo33)
        (syntax . g$12206$gDo33)
        (syntax-case . g$12205$gDo33)
        (quote . g$12204$gDo33)
        (foreign-call . g$12203$gDo33)
        (letrec-syntax . g$12202$gDo33)
        (let-syntax . g$12201$gDo33)
        (set! . g$12200$gDo33)
        (export . g$12199$gDo33)
        (import . g$12198$gDo33)
        (library . g$12197$gDo33)
        (begin . g$12196$gDo33)
        (module . g$12195$gDo33)
        (define-syntax . g$12194$gDo33)
        (define . g$12193$gDo33))
      '((g$9045$gDo33 core-prim . ellipsis-map)
        (g$12784$gDo33 core-prim . &no-nans-rcd)
        (g$12783$gDo33 core-prim . &no-nans-rtd)
        (g$12782$gDo33 core-prim . &no-infinities-rcd)
        (g$12781$gDo33 core-prim . &no-infinities-rtd)
        (g$12780$gDo33 core-prim . &i/o-encoding-rcd)
        (g$12779$gDo33 core-prim . &i/o-encoding-rtd)
        (g$12778$gDo33 core-prim . &i/o-decoding-rcd)
        (g$12777$gDo33 core-prim . &i/o-decoding-rtd)
        (g$12776$gDo33 core-prim . &i/o-port-rcd)
        (g$12775$gDo33 core-prim . &i/o-port-rtd)
        (g$12774$gDo33 core-prim . &i/o-file-does-not-exist-rcd)
        (g$12773$gDo33 core-prim . &i/o-file-does-not-exist-rtd)
        (g$12772$gDo33 core-prim . &i/o-file-already-exists-rcd)
        (g$12771$gDo33 core-prim . &i/o-file-already-exists-rtd)
        (g$12770$gDo33 core-prim . &i/o-file-is-read-only-rcd)
        (g$12769$gDo33 core-prim . &i/o-file-is-read-only-rtd)
        (g$12768$gDo33 core-prim . &i/o-file-protection-rcd)
        (g$12767$gDo33 core-prim . &i/o-file-protection-rtd)
        (g$12766$gDo33 core-prim . &i/o-filename-rcd)
        (g$12765$gDo33 core-prim . &i/o-filename-rtd)
        (g$12764$gDo33 core-prim . &i/o-invalid-position-rcd)
        (g$12763$gDo33 core-prim . &i/o-invalid-position-rtd)
        (g$12762$gDo33 core-prim . &i/o-write-rcd)
        (g$12761$gDo33 core-prim . &i/o-write-rtd)
        (g$12760$gDo33 core-prim . &i/o-read-rcd)
        (g$12759$gDo33 core-prim . &i/o-read-rtd)
        (g$12758$gDo33 core-prim . &i/o-rcd)
        (g$12757$gDo33 core-prim . &i/o-rtd)
        (g$12756$gDo33 core-prim . &undefined-rcd)
        (g$12755$gDo33 core-prim . &undefined-rtd)
        (g$12754$gDo33 core-prim . &syntax-rcd)
        (g$12753$gDo33 core-prim . &syntax-rtd)
        (g$12752$gDo33 core-prim . &lexical-rcd)
        (g$12751$gDo33 core-prim . &lexical-rtd)
        (g$12750$gDo33 core-prim . &implementation-restriction-rcd)
        (g$12749$gDo33 core-prim . &implementation-restriction-rtd)
        (g$12748$gDo33 core-prim . &non-continuable-rcd)
        (g$12747$gDo33 core-prim . &non-continuable-rtd)
        (g$12746$gDo33 core-prim . &who-rcd)
        (g$12745$gDo33 core-prim . &who-rtd)
        (g$12744$gDo33 core-prim . &irritants-rcd)
        (g$12743$gDo33 core-prim . &irritants-rtd)
        (g$12742$gDo33 core-prim . &assertion-rcd)
        (g$12741$gDo33 core-prim . &assertion-rtd)
        (g$12740$gDo33 core-prim . &violation-rcd)
        (g$12739$gDo33 core-prim . &violation-rtd)
        (g$12738$gDo33 core-prim . &error-rcd)
        (g$12737$gDo33 core-prim . &error-rtd)
        (g$12736$gDo33 core-prim . &serious-rcd)
        (g$12735$gDo33 core-prim . &serious-rtd)
        (g$12734$gDo33 core-prim . &warning-rcd)
        (g$12733$gDo33 core-prim . &warning-rtd)
        (g$12732$gDo33 core-prim . &message-rcd)
        (g$12731$gDo33 core-prim . &message-rtd)
        (g$12730$gDo33 core-prim . &condition-rcd)
        (g$12729$gDo33 core-prim . &condition-rtd)
        (g$12728$gDo33 core-prim . library-letrec*)
        (g$12727$gDo33 core-prim . annotation-stripped)
        (g$12726$gDo33 core-prim . annotation-source)
        (g$12725$gDo33 core-prim . annotation-expression)
        (g$12724$gDo33 core-prim . annotation?)
        (g$12723$gDo33 core-prim . read-annotated)
        (g$12722$gDo33 core-prim . tanh)
        (g$12721$gDo33 core-prim . cosh)
        (g$12720$gDo33 core-prim . sinh)
        (g$12719$gDo33 core-prim . make-guid)
        (g$12718$gDo33 core-prim . unspecified?)
        (g$5856$gDo33 core-prim . make-list)
        (g$5855$gDo33 core-prim . last-pair)
        (g$12717$gDo33 core-prim . load-r5rs)
        (g$12716$gDo33 core-prim . license)
        (g$12715$gDo33 core-prim . stacktrace)
        (g$12161$gDo33 core-prim . ironscheme-build)
        (g$12714$gDo33 core-prim . define-clr-class-internal)
        (g$12713$gDo33 core-prim . clr-field-set!-internal)
        (g$12712$gDo33 core-prim . clr-field-get-internal)
        (g$12711$gDo33 core-prim . clr-cast-internal)
        (g$12710$gDo33 core-prim . clr-call-internal)
        (g$12709$gDo33 core-prim . clr-new-internal)
        (g$12708$gDo33 core-prim . clr-new-array-internal)
        (g$12707$gDo33 core-prim . clr-is-internal)
        (g$12706$gDo33 core-prim . clr-reference-internal)
        (g$12705$gDo33 core-prim . clr-using-internal)
        (g$9170$gDo33 core-prim . syntax-error)
        (g$9040$gDo33 core-prim . syntax-dispatch)
        (g$12704$gDo33 core-prim . compile-core)
        (g$12703$gDo33 core-prim . eval-core)
        (g$12702$gDo33 core-prim . set-symbol-value!)
        (g$12701$gDo33 core-prim . symbol-value)
        (g$12700$gDo33 core-prim . symbol-value?)
        (g$12699$gDo33 core-prim . ungensym)
        (g$12698$gDo33 core-prim . gensym)
        (g$12697$gDo33 core-prim . void)
        (g$12696$gDo33 core-prim . load-serialized-library)
        (g$12695$gDo33 core-prim . serialize-library)
        (g$12163$gDo33 core-prim . compile-system-libraries)
        (g$12165$gDo33 core-prim . compile->closure)
        (g$12164$gDo33 core-prim . compile)
        (g$12160$gDo33 core-prim . load)
        (g$9180$gDo33 core-prim . interaction-environment)
        (g$12694$gDo33 core-prim . char-ready?)
        (g$12693$gDo33 core-prim . string-upcase)
        (g$12692$gDo33 core-prim . string-titlecase)
        (g$12691$gDo33 core-prim . string-normalize-nfkd)
        (g$12690$gDo33 core-prim . string-normalize-nfkc)
        (g$12689$gDo33 core-prim . string-normalize-nfd)
        (g$12688$gDo33 core-prim . string-normalize-nfc)
        (g$12687$gDo33 core-prim . string-foldcase)
        (g$12686$gDo33 core-prim . string-downcase)
        (g$6995$gDo33 core-prim . string-ci>?)
        (g$6997$gDo33 core-prim . string-ci>=?)
        (g$6993$gDo33 core-prim . string-ci=?)
        (g$6994$gDo33 core-prim . string-ci<?)
        (g$6996$gDo33 core-prim . string-ci<=?)
        (g$12685$gDo33 core-prim . char-whitespace?)
        (g$12684$gDo33 core-prim . char-upper-case?)
        (g$12683$gDo33 core-prim . char-title-case?)
        (g$12682$gDo33 core-prim . char-numeric?)
        (g$12681$gDo33 core-prim . char-lower-case?)
        (g$12680$gDo33 core-prim . char-general-category)
        (g$12679$gDo33 core-prim . char-upcase)
        (g$12678$gDo33 core-prim . char-titlecase)
        (g$12677$gDo33 core-prim . char-foldcase)
        (g$12676$gDo33 core-prim . char-downcase)
        (g$7034$gDo33 core-prim . char-ci>?)
        (g$7036$gDo33 core-prim . char-ci>=?)
        (g$7032$gDo33 core-prim . char-ci=?)
        (g$7033$gDo33 core-prim . char-ci<?)
        (g$7035$gDo33 core-prim . char-ci<=?)
        (g$12675$gDo33 core-prim . char-alphabetic?)
        (g$8777$gDo33 core-prim . variable-transformer-procedure)
        (g$8776$gDo33 core-prim . variable-transformer?)
        (g$8775$gDo33 core-prim . make-variable-transformer)
        (g$9174$gDo33 core-prim . identifier?)
        (g$9163$gDo33 core-prim . generate-temporaries)
        (g$9164$gDo33 core-prim . free-identifier=?)
        (g$9176$gDo33 core-prim . syntax->datum)
        (g$9175$gDo33 core-prim . datum->syntax)
        (g$9165$gDo33 core-prim . bound-identifier=?)
        (g$12674$gDo33 core-prim . record-type-descriptor?)
        (g$12673$gDo33 core-prim . record-predicate)
        (g$12672$gDo33 core-prim . record-mutator)
        (g$12671$gDo33 core-prim . record-constructor)
        (g$12670$gDo33 core-prim . record-accessor)
        (g$12669$gDo33 core-prim . make-record-type-descriptor)
        (g$12668$gDo33 core-prim . make-record-constructor-descriptor)
        (g$12667$gDo33 core-prim . record?)
        (g$12666$gDo33 core-prim . record-type-uid)
        (g$12665$gDo33 core-prim . record-type-sealed?)
        (g$12664$gDo33 core-prim . record-type-parent)
        (g$12663$gDo33 core-prim . record-type-opaque?)
        (g$12662$gDo33 core-prim . record-type-name)
        (g$12661$gDo33 core-prim . record-type-generative?)
        (g$12660$gDo33 core-prim . record-type-field-names)
        (g$12659$gDo33 core-prim . record-rtd)
        (g$12658$gDo33 core-prim . record-field-mutable?)
        (g$6569$gDo33 core-prim . delete-file)
        (g$6568$gDo33 core-prim . file-exists?)
        (g$12657$gDo33 core-prim . vector-sort!)
        (g$12656$gDo33 core-prim . vector-sort)
        (g$6935$gDo33 core-prim . list-sort)
        (g$12655$gDo33 core-prim . symbol-hash)
        (g$12654$gDo33 core-prim . string-ci-hash)
        (g$12653$gDo33 core-prim . string-hash)
        (g$12652$gDo33 core-prim . equal-hash)
        (g$12651$gDo33 core-prim . hashtable-equivalence-function)
        (g$12650$gDo33 core-prim . make-hashtable)
        (g$12649$gDo33 core-prim . hashtable-hash-function)
        (g$6537$gDo33 core-prim . make-eqv-hashtable)
        (g$6536$gDo33 core-prim . make-eq-hashtable)
        (g$12648$gDo33 core-prim . hashtable?)
        (g$6543$gDo33 core-prim . hashtable-update!)
        (g$6538$gDo33 core-prim . hashtable-size)
        (g$6540$gDo33 core-prim . hashtable-set!)
        (g$6539$gDo33 core-prim . hashtable-ref)
        (g$12647$gDo33 core-prim . hashtable-mutable?)
        (g$12646$gDo33 core-prim . hashtable-keys)
        (g$12645$gDo33 core-prim . hashtable-entries)
        (g$6541$gDo33 core-prim . hashtable-delete!)
        (g$12644$gDo33 core-prim . hashtable-copy)
        (g$6542$gDo33 core-prim . hashtable-contains?)
        (g$6544$gDo33 core-prim . hashtable-clear!)
        (g$7420$gDo33 core-prim . call-with-output-file)
        (g$7419$gDo33 core-prim . call-with-input-file)
        (g$7401$gDo33 core-prim . write-char)
        (g$12643$gDo33 core-prim . write)
        (g$7418$gDo33 core-prim . with-output-to-file)
        (g$7417$gDo33 core-prim . with-input-from-file)
        (g$7400$gDo33 core-prim . read-char)
        (g$12642$gDo33 core-prim . read)
        (g$7399$gDo33 core-prim . peek-char)
        (g$12641$gDo33 core-prim . open-output-file)
        (g$12640$gDo33 core-prim . open-input-file)
        (g$7421$gDo33 core-prim . newline)
        (g$12639$gDo33 core-prim . display)
        (g$12638$gDo33 core-prim . close-output-port)
        (g$12637$gDo33 core-prim . close-input-port)
        (g$12636$gDo33 core-prim . eof-object?)
        (g$12635$gDo33 core-prim . eof-object)
        (g$12634$gDo33 core-prim . current-error-port)
        (g$12633$gDo33 core-prim . current-output-port)
        (g$12632$gDo33 core-prim . current-input-port)
        (g$12631$gDo33 core-prim . output-port?)
        (g$12630$gDo33 core-prim . input-port?)
        (g$12629$gDo33 core-prim . utf-8-codec)
        (g$12628$gDo33 core-prim . utf-16-codec)
        (g$12627$gDo33 core-prim . transcoder-error-handling-mode)
        (g$12626$gDo33 core-prim . transcoder-eol-style)
        (g$12625$gDo33 core-prim . transcoder-codec)
        (g$12624$gDo33 core-prim . transcoded-port)
        (g$12623$gDo33 core-prim . textual-port?)
        (g$12622$gDo33 core-prim . string->bytevector)
        (g$12621$gDo33 core-prim . standard-output-port)
        (g$12620$gDo33 core-prim . standard-input-port)
        (g$12619$gDo33 core-prim . standard-error-port)
        (g$12618$gDo33 core-prim . set-port-position!)
        (g$12617$gDo33 core-prim . put-u8)
        (g$12616$gDo33 core-prim . put-string)
        (g$12615$gDo33 core-prim . put-datum)
        (g$12614$gDo33 core-prim . put-char)
        (g$12613$gDo33 core-prim . put-bytevector)
        (g$7386$gDo33 core-prim . port?)
        (g$12612$gDo33 core-prim . port-transcoder)
        (g$12611$gDo33 core-prim . port-position)
        (g$12610$gDo33 core-prim . port-has-set-port-position!?)
        (g$12609$gDo33 core-prim . port-has-port-position?)
        (g$12608$gDo33 core-prim . port-eof?)
        (g$12607$gDo33 core-prim . output-port-buffer-mode)
        (g$7385$gDo33 core-prim . open-string-output-port)
        (g$12606$gDo33 core-prim . open-string-input-port)
        (g$12605$gDo33 core-prim . open-file-output-port)
        (g$12604$gDo33 core-prim . open-file-input/output-port)
        (g$12603$gDo33 core-prim . open-file-input-port)
        (g$12602$gDo33 core-prim . open-bytevector-output-port)
        (g$12601$gDo33 core-prim . open-bytevector-input-port)
        (g$12600$gDo33 core-prim . native-transcoder)
        (g$12599$gDo33 core-prim . native-eol-style)
        (g$12598$gDo33 core-prim . make-transcoder)
        (g$12597$gDo33 core-prim . latin-1-codec)
        (g$7241$gDo33 core-prim . make-i/o-write-error)
        (g$7227$gDo33 core-prim . make-i/o-read-error)
        (g$7346$gDo33 core-prim . make-i/o-port-error)
        (g$7256$gDo33 core-prim . make-i/o-invalid-position-error)
        (g$7273$gDo33 core-prim . make-i/o-filename-error)
        (g$7289$gDo33 core-prim . make-i/o-file-protection-error)
        (g$7303$gDo33 core-prim . make-i/o-file-is-read-only-error)
        (g$7331$gDo33 core-prim . make-i/o-file-does-not-exist-error)
        (g$7317$gDo33 core-prim . make-i/o-file-already-exists-error)
        (g$7213$gDo33 core-prim . make-i/o-error)
        (g$7377$gDo33 core-prim . make-i/o-encoding-error)
        (g$7362$gDo33 core-prim . make-i/o-decoding-error)
        (g$12596$gDo33 core-prim . make-custom-textual-output-port)
        (g$12595$gDo33 core-prim . make-custom-textual-input/output-port)
        (g$12594$gDo33 core-prim . make-custom-textual-input-port)
        (g$12593$gDo33 core-prim . make-custom-binary-output-port)
        (g$12592$gDo33 core-prim . make-custom-binary-input/output-port)
        (g$12591$gDo33 core-prim . make-custom-binary-input-port)
        (g$12590$gDo33 core-prim . make-bytevector)
        (g$12589$gDo33 core-prim . lookahead-u8)
        (g$12588$gDo33 core-prim . lookahead-char)
        (g$7242$gDo33 core-prim . i/o-write-error?)
        (g$7228$gDo33 core-prim . i/o-read-error?)
        (g$7348$gDo33 core-prim . i/o-port-error?)
        (g$7258$gDo33 core-prim . i/o-invalid-position-error?)
        (g$7259$gDo33 core-prim . i/o-error-position)
        (g$7275$gDo33 core-prim . i/o-filename-error?)
        (g$7290$gDo33 core-prim . i/o-file-protection-error?)
        (g$7304$gDo33 core-prim . i/o-file-is-read-only-error?)
        (g$7332$gDo33 core-prim . i/o-file-does-not-exist-error?)
        (g$7318$gDo33 core-prim . i/o-file-already-exists-error?)
        (g$7214$gDo33 core-prim . i/o-error?)
        (g$7349$gDo33 core-prim . i/o-error-port)
        (g$7276$gDo33 core-prim . i/o-error-filename)
        (g$7379$gDo33 core-prim . i/o-encoding-error?)
        (g$7380$gDo33 core-prim . i/o-encoding-error-char)
        (g$7363$gDo33 core-prim . i/o-decoding-error?)
        (g$12587$gDo33 core-prim . get-u8)
        (g$12586$gDo33 core-prim . get-string-n!)
        (g$12585$gDo33 core-prim . get-string-n)
        (g$12584$gDo33 core-prim . get-string-all)
        (g$12583$gDo33 core-prim . get-line)
        (g$12582$gDo33 core-prim . get-datum)
        (g$12581$gDo33 core-prim . get-char)
        (g$12580$gDo33 core-prim . get-bytevector-some)
        (g$12579$gDo33 core-prim . get-bytevector-n!)
        (g$12578$gDo33 core-prim . get-bytevector-n)
        (g$12577$gDo33 core-prim . get-bytevector-all)
        (g$12576$gDo33 core-prim . flush-output-port)
        (g$12575$gDo33 core-prim . close-port)
        (g$7387$gDo33 core-prim . call-with-string-output-port)
        (g$7388$gDo33 core-prim . call-with-port)
        (g$12574$gDo33 core-prim . call-with-bytevector-output-port)
        (g$12573$gDo33 core-prim . bytevector->string)
        (g$12572$gDo33 core-prim . buffer-mode?)
        (g$12571$gDo33 core-prim . binary-port?)
        (g$9153$gDo33 core-prim . scheme-report-environment)
        (g$6914$gDo33 core-prim . quotient)
        (g$9152$gDo33 core-prim . null-environment)
        (g$6915$gDo33 core-prim . remainder)
        (g$6916$gDo33 core-prim . modulo)
        (g$6911$gDo33 core-prim . inexact->exact)
        (g$6918$gDo33 core-prim . force)
        (g$6912$gDo33 core-prim . exact->inexact)
        (g$12570$gDo33 core-prim . exit)
        (g$12157$gDo33 core-prim . command-line)
        (g$12569$gDo33 core-prim . string-fill!)
        (g$12568$gDo33 core-prim . string-set!)
        (g$12567$gDo33 core-prim . set-cdr!)
        (g$12566$gDo33 core-prim . set-car!)
        (g$5878$gDo33 core-prim . remove)
        (g$5879$gDo33 core-prim . remv)
        (g$5859$gDo33 core-prim . remp)
        (g$5880$gDo33 core-prim . remq)
        (g$5858$gDo33 core-prim . partition)
        (g$5866$gDo33 core-prim . memv)
        (g$5865$gDo33 core-prim . memq)
        (g$5868$gDo33 core-prim . memp)
        (g$5867$gDo33 core-prim . member)
        (g$5872$gDo33 core-prim . exists)
        (g$5871$gDo33 core-prim . for-all)
        (g$5877$gDo33 core-prim . fold-right)
        (g$5876$gDo33 core-prim . fold-left)
        (g$5857$gDo33 core-prim . find)
        (g$5860$gDo33 core-prim . filter)
        (g$5875$gDo33 core-prim . cons*)
        (g$5862$gDo33 core-prim . assv)
        (g$5861$gDo33 core-prim . assq)
        (g$5864$gDo33 core-prim . assp)
        (g$5863$gDo33 core-prim . assoc)
        (g$12565$gDo33 core-prim . with-exception-handler)
        (g$12564$gDo33 core-prim . raise-continuable)
        (g$12563$gDo33 core-prim . raise)
        (g$9155$gDo33 core-prim . eval)
        (g$9151$gDo33 core-prim . environment)
        (g$7485$gDo33 core-prim . make-enumeration)
        (g$7492$gDo33 core-prim . enum-set=?)
        (g$7486$gDo33 core-prim . enum-set-universe)
        (g$7493$gDo33 core-prim . enum-set-union)
        (g$7491$gDo33 core-prim . enum-set-subset?)
        (g$7497$gDo33 core-prim . enum-set-projection)
        (g$7490$gDo33 core-prim . enum-set-member?)
        (g$7494$gDo33 core-prim . enum-set-intersection)
        (g$7487$gDo33 core-prim . enum-set-indexer)
        (g$7495$gDo33 core-prim . enum-set-difference)
        (g$7488$gDo33 core-prim . enum-set-constructor)
        (g$7496$gDo33 core-prim . enum-set-complement)
        (g$7489$gDo33 core-prim . enum-set->list)
        (g$6823$gDo33 core-prim . who-condition?)
        (g$6734$gDo33 core-prim . warning?)
        (g$6776$gDo33 core-prim . violation?)
        (g$6900$gDo33 core-prim . undefined-violation?)
        (g$6884$gDo33 core-prim . syntax-violation?)
        (g$6886$gDo33 core-prim . syntax-violation-subform)
        (g$6885$gDo33 core-prim . syntax-violation-form)
        (g$9173$gDo33 core-prim . syntax-violation)
        (g$12562$gDo33 core-prim . simple-conditions)
        (g$6748$gDo33 core-prim . serious-condition?)
        (g$6838$gDo33 core-prim . non-continuable-violation?)
        (g$6719$gDo33 core-prim . message-condition?)
        (g$6821$gDo33 core-prim . make-who-condition)
        (g$6733$gDo33 core-prim . make-warning)
        (g$6775$gDo33 core-prim . make-violation)
        (g$6899$gDo33 core-prim . make-undefined-violation)
        (g$6881$gDo33 core-prim . make-syntax-violation)
        (g$6747$gDo33 core-prim . make-serious-condition)
        (g$6837$gDo33 core-prim . make-non-continuable-violation)
        (g$6717$gDo33 core-prim . make-message-condition)
        (g$6865$gDo33 core-prim . make-lexical-violation)
        (g$6804$gDo33 core-prim . make-irritants-condition)
        (g$6851$gDo33 core-prim . make-implementation-restriction-violation)
        (g$6761$gDo33 core-prim . make-error)
        (g$6789$gDo33 core-prim . make-assertion-violation)
        (g$6866$gDo33 core-prim . lexical-violation?)
        (g$6806$gDo33 core-prim . irritants-condition?)
        (g$6852$gDo33 core-prim . implementation-restriction-violation?)
        (g$6762$gDo33 core-prim . error?)
        (g$6824$gDo33 core-prim . condition-who)
        (g$12561$gDo33 core-prim . condition-predicate)
        (g$6720$gDo33 core-prim . condition-message)
        (g$6807$gDo33 core-prim . condition-irritants)
        (g$12560$gDo33 core-prim . condition-accessor)
        (g$12559$gDo33 core-prim . condition)
        (g$6790$gDo33 core-prim . assertion-violation?)
        (g$12558$gDo33 core-prim . condition?)
        (g$12557$gDo33 core-prim . utf32->string)
        (g$12556$gDo33 core-prim . utf16->string)
        (g$12555$gDo33 core-prim . utf8->string)
        (g$12554$gDo33 core-prim . uint-list->bytevector)
        (g$12553$gDo33 core-prim . u8-list->bytevector)
        (g$12552$gDo33 core-prim . string->utf8)
        (g$12551$gDo33 core-prim . string->utf32)
        (g$12550$gDo33 core-prim . string->utf16)
        (g$12549$gDo33 core-prim . sint-list->bytevector)
        (g$6575$gDo33 core-prim . native-endianness)
        (g$12548$gDo33 core-prim . bytevector?)
        (g$12547$gDo33 core-prim . bytevector=?)
        (g$12546$gDo33 core-prim . bytevector-uint-set!)
        (g$12545$gDo33 core-prim . bytevector-uint-ref)
        (g$12544$gDo33 core-prim . bytevector-u8-set!)
        (g$12543$gDo33 core-prim . bytevector-u8-ref)
        (g$6596$gDo33 core-prim . bytevector-u64-set!)
        (g$6592$gDo33 core-prim . bytevector-u64-ref)
        (g$6598$gDo33 core-prim . bytevector-u64-native-set!)
        (g$6594$gDo33 core-prim . bytevector-u64-native-ref)
        (g$6588$gDo33 core-prim . bytevector-u32-set!)
        (g$6584$gDo33 core-prim . bytevector-u32-ref)
        (g$6590$gDo33 core-prim . bytevector-u32-native-set!)
        (g$6586$gDo33 core-prim . bytevector-u32-native-ref)
        (g$6580$gDo33 core-prim . bytevector-u16-set!)
        (g$6576$gDo33 core-prim . bytevector-u16-ref)
        (g$6582$gDo33 core-prim . bytevector-u16-native-set!)
        (g$6578$gDo33 core-prim . bytevector-u16-native-ref)
        (g$12542$gDo33 core-prim . bytevector-sint-set!)
        (g$12541$gDo33 core-prim . bytevector-sint-ref)
        (g$12540$gDo33 core-prim . bytevector-s8-set!)
        (g$12539$gDo33 core-prim . bytevector-s8-ref)
        (g$6597$gDo33 core-prim . bytevector-s64-set!)
        (g$6593$gDo33 core-prim . bytevector-s64-ref)
        (g$6599$gDo33 core-prim . bytevector-s64-native-set!)
        (g$6595$gDo33 core-prim . bytevector-s64-native-ref)
        (g$6589$gDo33 core-prim . bytevector-s32-set!)
        (g$6585$gDo33 core-prim . bytevector-s32-ref)
        (g$6591$gDo33 core-prim . bytevector-s32-native-set!)
        (g$6587$gDo33 core-prim . bytevector-s32-native-ref)
        (g$6581$gDo33 core-prim . bytevector-s16-set!)
        (g$6577$gDo33 core-prim . bytevector-s16-ref)
        (g$6583$gDo33 core-prim . bytevector-s16-native-set!)
        (g$6579$gDo33 core-prim . bytevector-s16-native-ref)
        (g$12538$gDo33 core-prim . bytevector-length)
        (g$12537$gDo33 core-prim . bytevector-ieee-single-set!)
        (g$12536$gDo33 core-prim . bytevector-ieee-single-ref)
        (g$6602$gDo33 core-prim . bytevector-ieee-single-native-set!)
        (g$6600$gDo33 core-prim . bytevector-ieee-single-native-ref)
        (g$12535$gDo33 core-prim . bytevector-ieee-double-set!)
        (g$12534$gDo33 core-prim . bytevector-ieee-double-ref)
        (g$6603$gDo33 core-prim . bytevector-ieee-double-native-set!)
        (g$6601$gDo33 core-prim . bytevector-ieee-double-native-ref)
        (g$12533$gDo33 core-prim . bytevector-fill!)
        (g$12532$gDo33 core-prim . bytevector-copy!)
        (g$12531$gDo33 core-prim . bytevector-copy)
        (g$12530$gDo33 core-prim . bytevector->uint-list)
        (g$12529$gDo33 core-prim . bytevector->u8-list)
        (g$12528$gDo33 core-prim . bytevector->sint-list)
        (g$7199$gDo33 core-prim . no-nans-violation?)
        (g$7185$gDo33 core-prim . no-infinities-violation?)
        (g$7198$gDo33 core-prim . make-no-nans-violation)
        (g$7184$gDo33 core-prim . make-no-infinities-violation)
        (g$12527$gDo33 core-prim . real->flonum)
        (g$12526$gDo33 core-prim . flzero?)
        (g$12525$gDo33 core-prim . fltruncate)
        (g$12524$gDo33 core-prim . fltan)
        (g$12523$gDo33 core-prim . flsqrt)
        (g$12522$gDo33 core-prim . flsin)
        (g$12521$gDo33 core-prim . flround)
        (g$12520$gDo33 core-prim . flpositive?)
        (g$12519$gDo33 core-prim . flonum?)
        (g$12518$gDo33 core-prim . flodd?)
        (g$12517$gDo33 core-prim . flnumerator)
        (g$12516$gDo33 core-prim . flnegative?)
        (g$12515$gDo33 core-prim . flnan?)
        (g$12514$gDo33 core-prim . flmod0)
        (g$12513$gDo33 core-prim . flmod)
        (g$12512$gDo33 core-prim . flmin)
        (g$12511$gDo33 core-prim . flmax)
        (g$12510$gDo33 core-prim . fllog)
        (g$12509$gDo33 core-prim . flinteger?)
        (g$12508$gDo33 core-prim . flinfinite?)
        (g$12507$gDo33 core-prim . flfloor)
        (g$12506$gDo33 core-prim . flfinite?)
        (g$12505$gDo33 core-prim . flexpt)
        (g$12504$gDo33 core-prim . flexp)
        (g$12503$gDo33 core-prim . fleven?)
        (g$12502$gDo33 core-prim . fldiv0-and-mod0)
        (g$12501$gDo33 core-prim . fldiv0)
        (g$12500$gDo33 core-prim . fldiv-and-mod)
        (g$12499$gDo33 core-prim . fldiv)
        (g$12498$gDo33 core-prim . fldenominator)
        (g$12497$gDo33 core-prim . flcos)
        (g$12496$gDo33 core-prim . flceiling)
        (g$12495$gDo33 core-prim . flatan)
        (g$12494$gDo33 core-prim . flasin)
        (g$12493$gDo33 core-prim . flacos)
        (g$12492$gDo33 core-prim . flabs)
        (g$12491$gDo33 core-prim . fl>?)
        (g$12490$gDo33 core-prim . fl>=?)
        (g$12489$gDo33 core-prim . fl=?)
        (g$12488$gDo33 core-prim . fl<?)
        (g$12487$gDo33 core-prim . fl<=?)
        (g$12486$gDo33 core-prim . fl/)
        (g$12485$gDo33 core-prim . fl-)
        (g$12484$gDo33 core-prim . fl+)
        (g$12483$gDo33 core-prim . fl*)
        (g$12482$gDo33 core-prim . fixnum->flonum)
        (g$12481$gDo33 core-prim . fxzero?)
        (g$12480$gDo33 core-prim . fxxor)
        (g$7131$gDo33 core-prim . fxrotate-bit-field)
        (g$12479$gDo33 core-prim . fxreverse-bit-field)
        (g$12478$gDo33 core-prim . fxpositive?)
        (g$12477$gDo33 core-prim . fxodd?)
        (g$12476$gDo33 core-prim . fxnot)
        (g$12475$gDo33 core-prim . fxnegative?)
        (g$12474$gDo33 core-prim . fxmod0)
        (g$12473$gDo33 core-prim . fxmod)
        (g$12472$gDo33 core-prim . fxmin)
        (g$12471$gDo33 core-prim . fxmax)
        (g$12470$gDo33 core-prim . fxlength)
        (g$12469$gDo33 core-prim . fxior)
        (g$7125$gDo33 core-prim . fxif)
        (g$12468$gDo33 core-prim . fxfirst-bit-set)
        (g$12467$gDo33 core-prim . fxeven?)
        (g$12466$gDo33 core-prim . fxdiv0-and-mod0)
        (g$12465$gDo33 core-prim . fxdiv0)
        (g$12464$gDo33 core-prim . fxdiv-and-mod)
        (g$12463$gDo33 core-prim . fxdiv)
        (g$7128$gDo33 core-prim . fxcopy-bit-field)
        (g$7126$gDo33 core-prim . fxcopy-bit)
        (g$12462$gDo33 core-prim . fxbit-set?)
        (g$7127$gDo33 core-prim . fxbit-field)
        (g$12461$gDo33 core-prim . fxbit-count)
        (g$7130$gDo33 core-prim . fxarithmetic-shift-right)
        (g$7129$gDo33 core-prim . fxarithmetic-shift-left)
        (g$12460$gDo33 core-prim . fxarithmetic-shift)
        (g$12459$gDo33 core-prim . fxand)
        (g$12458$gDo33 core-prim . fx>?)
        (g$12457$gDo33 core-prim . fx>=?)
        (g$12456$gDo33 core-prim . fx=?)
        (g$12455$gDo33 core-prim . fx<?)
        (g$12454$gDo33 core-prim . fx<=?)
        (g$7123$gDo33 core-prim . fx-/carry)
        (g$12453$gDo33 core-prim . fx-)
        (g$7124$gDo33 core-prim . fx+/carry)
        (g$12452$gDo33 core-prim . fx+)
        (g$7122$gDo33 core-prim . fx*/carry)
        (g$12451$gDo33 core-prim . fx*)
        (g$12450$gDo33 core-prim . greatest-fixnum)
        (g$12449$gDo33 core-prim . least-fixnum)
        (g$12448$gDo33 core-prim . fixnum-width)
        (g$12447$gDo33 core-prim . fixnum?)
        (g$7096$gDo33 core-prim . bitwise-rotate-bit-field)
        (g$12446$gDo33 core-prim . bitwise-reverse-bit-field)
        (g$12445$gDo33 core-prim . bitwise-length)
        (g$7090$gDo33 core-prim . bitwise-if)
        (g$12444$gDo33 core-prim . bitwise-first-bit-set)
        (g$7093$gDo33 core-prim . bitwise-copy-bit-field)
        (g$7091$gDo33 core-prim . bitwise-copy-bit)
        (g$12443$gDo33 core-prim . bitwise-bit-set?)
        (g$7092$gDo33 core-prim . bitwise-bit-field)
        (g$12442$gDo33 core-prim . bitwise-bit-count)
        (g$12441$gDo33 core-prim . bitwise-xor)
        (g$12440$gDo33 core-prim . bitwise-ior)
        (g$12439$gDo33 core-prim . bitwise-and)
        (g$12438$gDo33 core-prim . bitwise-not)
        (g$7095$gDo33 core-prim . bitwise-arithmetic-shift-right)
        (g$7094$gDo33 core-prim . bitwise-arithmetic-shift-left)
        (g$12437$gDo33 core-prim . bitwise-arithmetic-shift)
        (g$6021$gDo33 core-prim . zero?)
        (g$12436$gDo33 core-prim . vector?)
        (g$12435$gDo33 core-prim . vector-set!)
        (g$12434$gDo33 core-prim . vector-ref)
        (g$12433$gDo33 core-prim . vector-map)
        (g$12432$gDo33 core-prim . vector-length)
        (g$12431$gDo33 core-prim . vector-for-each)
        (g$12430$gDo33 core-prim . vector-fill!)
        (g$12429$gDo33 core-prim . vector->list)
        (g$12428$gDo33 core-prim . vector)
        (g$12427$gDo33 core-prim . values)
        (g$12426$gDo33 core-prim . truncate)
        (g$12425$gDo33 core-prim . tan)
        (g$12424$gDo33 core-prim . symbol?)
        (g$6067$gDo33 core-prim . symbol=?)
        (g$12423$gDo33 core-prim . symbol->string)
        (g$12422$gDo33 core-prim . substring)
        (g$12421$gDo33 core-prim . string?)
        (g$6064$gDo33 core-prim . string>?)
        (g$6066$gDo33 core-prim . string>=?)
        (g$6062$gDo33 core-prim . string=?)
        (g$6063$gDo33 core-prim . string<?)
        (g$6065$gDo33 core-prim . string<=?)
        (g$12420$gDo33 core-prim . string-ref)
        (g$12419$gDo33 core-prim . string-length)
        (g$12418$gDo33 core-prim . string-for-each)
        (g$12417$gDo33 core-prim . string-copy)
        (g$12416$gDo33 core-prim . string-append)
        (g$12415$gDo33 core-prim . string->symbol)
        (g$12414$gDo33 core-prim . string->number)
        (g$12413$gDo33 core-prim . string->list)
        (g$12412$gDo33 core-prim . string)
        (g$12411$gDo33 core-prim . sqrt)
        (g$12410$gDo33 core-prim . sin)
        (g$12409$gDo33 core-prim . round)
        (g$12408$gDo33 core-prim . reverse)
        (g$12407$gDo33 core-prim . real?)
        (g$12406$gDo33 core-prim . real-valued?)
        (g$12405$gDo33 core-prim . real-part)
        (g$6108$gDo33 core-prim . rationalize)
        (g$12404$gDo33 core-prim . rational?)
        (g$12403$gDo33 core-prim . rational-valued?)
        (g$12402$gDo33 core-prim . procedure?)
        (g$6019$gDo33 core-prim . positive?)
        (g$12401$gDo33 core-prim . pair?)
        (g$6023$gDo33 core-prim . odd?)
        (g$12400$gDo33 core-prim . numerator)
        (g$12399$gDo33 core-prim . number?)
        (g$12398$gDo33 core-prim . number->string)
        (g$12397$gDo33 core-prim . null?)
        (g$12396$gDo33 core-prim . not)
        (g$6020$gDo33 core-prim . negative?)
        (g$12395$gDo33 core-prim . nan?)
        (g$6025$gDo33 core-prim . min)
        (g$6024$gDo33 core-prim . max)
        (g$5873$gDo33 core-prim . map)
        (g$12394$gDo33 core-prim . make-vector)
        (g$12393$gDo33 core-prim . make-string)
        (g$12392$gDo33 core-prim . make-rectangular)
        (g$12391$gDo33 core-prim . make-polar)
        (g$12390$gDo33 core-prim . magnitude)
        (g$12389$gDo33 core-prim . log)
        (g$12388$gDo33 core-prim . list?)
        (g$5853$gDo33 core-prim . list-tail)
        (g$5854$gDo33 core-prim . list-ref)
        (g$12387$gDo33 core-prim . list->vector)
        (g$12386$gDo33 core-prim . list->string)
        (g$12385$gDo33 core-prim . list)
        (g$12384$gDo33 core-prim . length)
        (g$6027$gDo33 core-prim . lcm)
        (g$12383$gDo33 core-prim . integer?)
        (g$12382$gDo33 core-prim . integer-valued?)
        (g$12381$gDo33 core-prim . integer->char)
        (g$12380$gDo33 core-prim . infinite?)
        (g$12379$gDo33 core-prim . inexact?)
        (g$12378$gDo33 core-prim . inexact)
        (g$12377$gDo33 core-prim . imag-part)
        (g$6026$gDo33 core-prim . gcd)
        (g$5874$gDo33 core-prim . for-each)
        (g$12376$gDo33 core-prim . floor)
        (g$12375$gDo33 core-prim . finite?)
        (g$12374$gDo33 core-prim . expt)
        (g$12373$gDo33 core-prim . exp)
        (g$12372$gDo33 core-prim . exact?)
        (g$12371$gDo33 core-prim . exact-integer-sqrt)
        (g$12370$gDo33 core-prim . exact)
        (g$6022$gDo33 core-prim . even?)
        (g$12369$gDo33 core-prim . error)
        (g$12368$gDo33 core-prim . eqv?)
        (g$12367$gDo33 core-prim . equal?)
        (g$12366$gDo33 core-prim . eq?)
        (g$12365$gDo33 core-prim . dynamic-wind)
        (g$12364$gDo33 core-prim . div0-and-mod0)
        (g$12363$gDo33 core-prim . mod0)
        (g$12362$gDo33 core-prim . div0)
        (g$12361$gDo33 core-prim . div-and-mod)
        (g$12360$gDo33 core-prim . mod)
        (g$12359$gDo33 core-prim . div)
        (g$12358$gDo33 core-prim . denominator)
        (g$12357$gDo33 core-prim . cos)
        (g$12356$gDo33 core-prim . cons)
        (g$12355$gDo33 core-prim . complex?)
        (g$12354$gDo33 core-prim . char?)
        (g$6105$gDo33 core-prim . char>?)
        (g$6107$gDo33 core-prim . char>=?)
        (g$6103$gDo33 core-prim . char=?)
        (g$6104$gDo33 core-prim . char<?)
        (g$6106$gDo33 core-prim . char<=?)
        (g$12353$gDo33 core-prim . char->integer)
        (g$12352$gDo33 core-prim . ceiling)
        (g$12351$gDo33 core-prim . call-with-values)
        (g$12350$gDo33 core-prim . call/cc)
        (g$12349$gDo33 core-prim . call-with-current-continuation)
        (g$6018$gDo33 core-prim . cddddr)
        (g$6017$gDo33 core-prim . cdddar)
        (g$6016$gDo33 core-prim . cddadr)
        (g$6015$gDo33 core-prim . cddaar)
        (g$6014$gDo33 core-prim . cdaddr)
        (g$6013$gDo33 core-prim . cdadar)
        (g$6012$gDo33 core-prim . cdaadr)
        (g$6011$gDo33 core-prim . cdaaar)
        (g$6010$gDo33 core-prim . cadddr)
        (g$6009$gDo33 core-prim . caddar)
        (g$6008$gDo33 core-prim . cadadr)
        (g$6007$gDo33 core-prim . cadaar)
        (g$6006$gDo33 core-prim . caaddr)
        (g$6005$gDo33 core-prim . caadar)
        (g$6004$gDo33 core-prim . caaadr)
        (g$6003$gDo33 core-prim . caaaar)
        (g$6002$gDo33 core-prim . cdddr)
        (g$6001$gDo33 core-prim . cddar)
        (g$6000$gDo33 core-prim . cdadr)
        (g$5999$gDo33 core-prim . cdaar)
        (g$5998$gDo33 core-prim . caddr)
        (g$5997$gDo33 core-prim . cadar)
        (g$5996$gDo33 core-prim . caadr)
        (g$5995$gDo33 core-prim . caaar)
        (g$5994$gDo33 core-prim . cddr)
        (g$5993$gDo33 core-prim . cdar)
        (g$5992$gDo33 core-prim . cadr)
        (g$5991$gDo33 core-prim . caar)
        (g$12348$gDo33 core-prim . cdr)
        (g$12347$gDo33 core-prim . car)
        (g$12346$gDo33 core-prim . boolean?)
        (g$6068$gDo33 core-prim . boolean=?)
        (g$12345$gDo33 core-prim . atan)
        (g$12344$gDo33 core-prim . assertion-violation)
        (g$12343$gDo33 core-prim . asin)
        (g$12342$gDo33 core-prim . apply)
        (g$12341$gDo33 core-prim . append)
        (g$12340$gDo33 core-prim . angle)
        (g$12339$gDo33 core-prim . acos)
        (g$12338$gDo33 core-prim . abs)
        (g$12337$gDo33 core-prim . /)
        (g$12336$gDo33 core-prim . *)
        (g$12335$gDo33 core-prim . -)
        (g$12334$gDo33 core-prim . +)
        (g$12333$gDo33 core-prim . >=)
        (g$12332$gDo33 core-prim . >)
        (g$12331$gDo33 core-prim . =)
        (g$12330$gDo33 core-prim . <=)
        (g$12329$gDo33 core-prim . <)
        (g$12328$gDo33 core-prim . make-record-printer)
        (g$12327$gDo33 core-prim . eqv-hash)
        (g$12326$gDo33 core-prim . reverse!)
        (g$12325$gDo33 core-prim . deserialize-port)
        (g$12324$gDo33 core-prim . serialize-port)
        (g$7460$gDo33 core-prim . enum-set?)
        (g$6917$gDo33 core-prim . make-promise)
        (g$12159$gDo33 core-prim . load/args)
        (g$7571$gDo33 core-prim . printf)
        (g$7572$gDo33 core-prim . fprintf)
        (g$7573$gDo33 core-prim . format)
        (g$12323$gDo33 core-prim . procedure-form)
        (g$12322$gDo33 core-prim . procedure-environment)
        (g$12321$gDo33 core-prim . procedure-name)
        (g$12320$gDo33 core-prim . procedure-arity)
        (g$12319$gDo33 core-prim . gc-collect)
        (g$12318$gDo33 core-prim . clr-type?)
        (g$12317$gDo33 core-prim . get-clr-type)
        (g$12316$gDo33 core-prim . get-command-line)
        (g$12315$gDo33 core-prim . vector-append)
        (g$12314$gDo33 core-prim . vector-filter)
        (g$12313$gDo33 core-prim . vector-reverse!)
        (g$12312$gDo33 core-prim . vector-contains?)
        (g$12311$gDo33 core-prim . vector-index-of)
        (g$12310$gDo33 core-prim . vector-copy)
        (g$12309$gDo33 core-prim . vector-binary-search)
        (g$12308$gDo33 core-prim . string-ci-compare)
        (g$12307$gDo33 core-prim . string-compare)
        (g$12306$gDo33 core-prim . string-format)
        (g$12156$gDo33 core-prim . trace-printer)
        (g$12305$gDo33 core-prim . make-traced-procedure)
        (g$7593$gDo33 core-prim . make-traced-macro)
        (g$9169$gDo33 core-prim . assertion-error)
        (g$12304$gDo33 core-prim . time-it)
        (g$7874$gDo33 core-prim . make-parameter)
        (g$12303$gDo33 core-prim . library-locator)
        (g$12302$gDo33 core-prim . get-library-paths)
        (g$12301$gDo33 core-prim . open-tcp-input/output-port)
        (g$12300$gDo33 core-prim . hashtable-for-each)
        (g$12299$gDo33 core-prim . hashtable-map)
        (g$9147$gDo33 core-prim . environment-bindings)
        (g$9150$gDo33 core-prim . environment-symbols)
        (g$9146$gDo33 core-prim . interaction-environment-symbols)
        (g$12298$gDo33 core-prim . optimization-level)
        (g$8329$gDo33 core-prim . library-path)
        (g$9156$gDo33 core-prim . expand->core)
        (g$9154$gDo33 core-prim . expand)
        (g$7651$gDo33 core-prim . expand-boot-cps)
        (g$7648$gDo33 core-prim . convert->cps)
        (g$12297$gDo33 $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$12296$gDo33 $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$12295$gDo33 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$12294$gDo33 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$12293$gDo33 $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$12292$gDo33
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$12291$gDo33
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$12290$gDo33
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$12289$gDo33
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$12288$gDo33 $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$12287$gDo33
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$12286$gDo33 $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$12285$gDo33 $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$12284$gDo33 $core-rtd &i/o-rtd &i/o-rcd)
        (g$12283$gDo33 $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$12282$gDo33 $core-rtd &undefined-rtd &undefined-rcd)
        (g$12281$gDo33 $core-rtd &syntax-rtd &syntax-rcd)
        (g$12280$gDo33 $core-rtd &lexical-rtd &lexical-rcd)
        (g$12279$gDo33
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$12278$gDo33 $core-rtd &who-rtd &who-rcd)
        (g$12277$gDo33 $core-rtd &irritants-rtd &irritants-rcd)
        (g$12276$gDo33 $core-rtd &assertion-rtd &assertion-rcd)
        (g$12275$gDo33 $core-rtd &violation-rtd &violation-rcd)
        (g$12274$gDo33 $core-rtd &error-rtd &error-rcd)
        (g$12273$gDo33 $core-rtd &serious-rtd &serious-rcd)
        (g$12272$gDo33 $core-rtd &warning-rtd &warning-rcd)
        (g$12271$gDo33 $core-rtd &message-rtd &message-rcd)
        (g$12270$gDo33 $core-rtd &condition-rtd &condition-rcd)
        (g$12269$gDo33 macro . define-condition-type)
        (g$12268$gDo33 macro . define-enumeration)
        (g$12267$gDo33 macro . define-record-type)
        (g$12266$gDo33 macro . parent-rtd)
        (g$12265$gDo33 macro . nongenerative)
        (g$12264$gDo33 macro . opaque)
        (g$12263$gDo33 macro . sealed)
        (g$12262$gDo33 macro . protocol)
        (g$12261$gDo33 macro . parent)
        (g$12260$gDo33 macro . immutable)
        (g$12259$gDo33 macro . mutable)
        (g$12258$gDo33 macro . fields)
        (g$12257$gDo33 macro . error-handling-mode)
        (g$12256$gDo33 macro . file-options)
        (g$12255$gDo33 macro . buffer-mode)
        (g$12254$gDo33 macro . eol-style)
        (g$12253$gDo33 macro . guard)
        (g$12252$gDo33 macro . trace-letrec-syntax)
        (g$12251$gDo33 macro . trace-let-syntax)
        (g$12250$gDo33 macro . trace-define-syntax)
        (g$12249$gDo33 macro . trace-define)
        (g$12248$gDo33 macro . trace-lambda)
        (g$12247$gDo33 macro . unsyntax-splicing)
        (g$12246$gDo33 macro . unsyntax)
        (g$12245$gDo33 macro . unquote-splicing)
        (g$12244$gDo33 macro . unquote)
        (g$12243$gDo33 macro . _)
        (g$12242$gDo33 macro . else)
        (g$12241$gDo33 macro . =>)
        (g$12240$gDo33 macro . ...)
        (g$12239$gDo33 macro . assert)
        (g$12238$gDo33 macro . endianness)
        (g$12237$gDo33 macro . delay)
        (g$12236$gDo33 macro . time)
        (g$12235$gDo33 macro . or)
        (g$12234$gDo33 macro . and)
        (g$12233$gDo33 macro . do)
        (g$12232$gDo33 macro . cond)
        (g$12231$gDo33 macro . let*)
        (g$12230$gDo33 macro . let)
        (g$12229$gDo33 macro . identifier-syntax)
        (g$12228$gDo33 macro . with-syntax)
        (g$12227$gDo33 macro . quasisyntax)
        (g$12226$gDo33 macro . quasiquote)
        (g$12225$gDo33 macro . syntax-rules)
        (g$12224$gDo33 macro . include-into)
        (g$12223$gDo33 macro . include)
        (g$12222$gDo33 macro . define-struct)
        (g$12221$gDo33 macro . let-values)
        (g$12220$gDo33 macro . let*-values)
        (g$12219$gDo33 core-macro . record-constructor-descriptor)
        (g$12218$gDo33 core-macro . record-type-descriptor)
        (g$12217$gDo33 core-macro . fluid-let-syntax)
        (g$12216$gDo33 macro . case)
        (g$12215$gDo33 macro . parameterize)
        (g$12214$gDo33 macro . unless)
        (g$12213$gDo33 macro . when)
        (g$12212$gDo33 core-macro . if)
        (g$12211$gDo33 core-macro . letrec*)
        (g$12210$gDo33 core-macro . letrec)
        (g$12209$gDo33 core-macro . type-descriptor)
        (g$12208$gDo33 core-macro . case-lambda)
        (g$12207$gDo33 core-macro . lambda)
        (g$12206$gDo33 core-macro . syntax)
        (g$12205$gDo33 core-macro . syntax-case)
        (g$12204$gDo33 core-macro . quote)
        (g$12203$gDo33 core-macro . foreign-call)
        (g$12202$gDo33 letrec-syntax)
        (g$12201$gDo33 let-syntax)
        (g$12200$gDo33 set!)
        (g$12199$gDo33 export)
        (g$12198$gDo33 import)
        (g$12197$gDo33 library)
        (g$12196$gDo33 begin)
        (g$12195$gDo33 module)
        (g$12194$gDo33 define-syntax)
        (g$12193$gDo33 define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$7527$gDo33
      'g$12821$gDo33
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12704$gDo33)
        (eval-core . g$12703$gDo33)
        (set-symbol-value! . g$12702$gDo33)
        (symbol-value . g$12701$gDo33)
        (gensym . g$12698$gDo33)
        (void . g$12697$gDo33))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$11621$gDo33
     g$trace-printer$11661$gDo33
     (g$make-parameter$6991$gDo33 write))
   (g$command-line$11622$gDo33
     g$command-line$11662$gDo33
     (g$make-parameter$6991$gDo33 (get-command-line)))
   (g$local-library-path$11623$gDo33
     g$local-library-path$11663$gDo33
     (case-lambda
       ((g$filename$11634$gDo33)
        (cons
          (g$get-directory-name$5558$gDo33 g$filename$11634$gDo33)
          (g$library-path$7511$gDo33)))))
   (g$load/args$11624$gDo33
     g$load/args$11664$gDo33
     (case-lambda
       ((g$filename$11635$gDo33 . g$args$11636$gDo33)
        (begin
          (apply
            g$load-r6rs-top-level$11631$gDo33
            g$filename$11635$gDo33
            'load
            g$args$11636$gDo33)
          (void)))))
   (g$load$11625$gDo33
     g$load$11665$gDo33
     (case-lambda
       ((g$filename$11637$gDo33)
        (begin
          (apply
            g$load-r6rs-top-level$11631$gDo33
            g$filename$11637$gDo33
            'load
            (cdr (g$command-line$11622$gDo33)))
          (void)))))
   (g$ironscheme-build$11626$gDo33
     g$ironscheme-build$11666$gDo33
     (case-lambda (() (g$load$11625$gDo33 '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$11627$gDo33
     g$eval-top-level$11667$gDo33
     (case-lambda
       ((g$x$11638$gDo33)
        (g$eval$11594$gDo33
          g$x$11638$gDo33
          (g$interaction-environment$11619$gDo33)))))
   (g$compile-system-libraries$11628$gDo33
     g$compile-system-libraries$11668$gDo33
     (case-lambda
       (()
        (g$eval-top-level$11627$gDo33
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$11629$gDo33
     g$compile$11669$gDo33
     (case-lambda
       ((g$filename$11639$gDo33)
        (g$load-r6rs-top-level$11631$gDo33 g$filename$11639$gDo33 'compile))))
   (g$compile->closure$11630$gDo33
     g$compile->closure$11670$gDo33
     (case-lambda
       ((g$filename$11640$gDo33)
        (g$load-r6rs-top-level$11631$gDo33 g$filename$11640$gDo33 'closure))))
   (g$load-r6rs-top-level$11631$gDo33
     g$load-r6rs-top-level$11671$gDo33
     (case-lambda
       ((g$filename$11641$gDo33 g$how$11642$gDo33 . g$args$11643$gDo33)
        ((case-lambda
           ((g$library-path$11646$gDo33 g$library-path$11647$gDo33)
            ((case-lambda
               ((g$swap$11648$gDo33)
                (dynamic-wind
                  g$swap$11648$gDo33
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$11649$gDo33)
                         ((case-lambda
                            ((g$t$11650$gDo33)
                             (if (g$memv$5056$gDo33 g$t$11650$gDo33 '(closure))
                               (g$pre-compile-r6rs-top-level$11617$gDo33
                                 g$x*$11649$gDo33)
                               (if (g$memv$5056$gDo33 g$t$11650$gDo33 '(load))
                                 ((case-lambda
                                    ((g$command-line$11653$gDo33
                                       g$command-line$11654$gDo33)
                                     ((case-lambda
                                        ((g$swap$11655$gDo33)
                                         (dynamic-wind
                                           g$swap$11655$gDo33
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$11616$gDo33
                                                 g$x*$11649$gDo33))))
                                           g$swap$11655$gDo33)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$11656$gDo33)
                                             (begin
                                               (g$command-line$11653$gDo33
                                                 g$command-line$11654$gDo33)
                                               (set! g$command-line$11654$gDo33
                                                 g$t$11656$gDo33))))
                                          (g$command-line$11653$gDo33)))))))
                                  g$command-line$11622$gDo33
                                  (cons
                                    g$filename$11641$gDo33
                                    (g$map$5063$gDo33
                                      (case-lambda
                                        ((g$x$11657$gDo33)
                                         (g$format$6559$gDo33
                                           '"~a"
                                           g$x$11657$gDo33)))
                                      g$args$11643$gDo33)))
                                 (if (g$memv$5056$gDo33
                                       g$t$11650$gDo33
                                       '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$11616$gDo33
                                       g$x*$11649$gDo33)
                                     (g$serialize-all$7515$gDo33
                                       serialize-library
                                       g$compile-core-expr$7238$gDo33))
                                   (if '#f '#f (void)))))))
                          g$how$11642$gDo33)))
                      (g$with-input-from-file$6385$gDo33
                        g$filename$11641$gDo33
                        (case-lambda
                          (()
                           ((letrec ((g$f$11658$gDo33
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$11659$gDo33)
                                              (if (eof-object? g$x$11659$gDo33)
                                                '()
                                                (cons
                                                  g$x$11659$gDo33
                                                  (g$f$11658$gDo33)))))
                                           (read-annotated))))))
                              g$f$11658$gDo33))))))))
                  g$swap$11648$gDo33)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$11660$gDo33)
                    (begin
                      (g$library-path$11646$gDo33 g$library-path$11647$gDo33)
                      (set! g$library-path$11647$gDo33 g$t$11660$gDo33))))
                 (g$library-path$11646$gDo33)))))))
         g$library-path$7511$gDo33
         (g$local-library-path$11623$gDo33 g$filename$11641$gDo33)))))
   (g$fo$11632$gDo33
     g$fo$11672$gDo33
     (g$make-enumeration$6521$gDo33 '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$7516$gDo33
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$11633$gDo33)
         (if (g$serious-condition?$5820$gDo33 g$ex$11633$gDo33)
           (raise g$ex$11633$gDo33)
           (begin (display g$ex$11633$gDo33) (g$newline$6389$gDo33))))))
    (set-symbol-value! 'load g$load$11625$gDo33)
    (set-symbol-value! 'compile g$compile$11629$gDo33)
    (set-symbol-value! 'compile->closure g$compile->closure$11630$gDo33)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$11627$gDo33)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$11585$gDo33)
    (set-symbol-value! 'expanded2core g$expanded->core$7237$gDo33)
    (set-symbol-value! 'trace-printer g$trace-printer$11621$gDo33)
    (set-symbol-value! 'convert->cps g$convert->cps$6888$gDo33)
    (g$file-options-constructor$6992$gDo33
      (g$enum-set-constructor$6524$gDo33 g$fo$11632$gDo33))
    (g$library-path$7511$gDo33 (get-library-paths))))

