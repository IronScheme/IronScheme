;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* ((g$caar$7997$1IfLeT g$caar$8069$1IfLeT (case-lambda ((g$x$8028$1IfLeT) (car (car g$x$8028$1IfLeT))))) (g$cadr$7998$1IfLeT g$cadr$8070$1IfLeT (case-lambda ((g$x$8029$1IfLeT) (car (cdr g$x$8029$1IfLeT))))) (g$cdar$7999$1IfLeT g$cdar$8071$1IfLeT (case-lambda ((g$x$8030$1IfLeT) (cdr (car g$x$8030$1IfLeT))))) (g$cddr$8000$1IfLeT g$cddr$8072$1IfLeT (case-lambda ((g$x$8031$1IfLeT) (cdr (cdr g$x$8031$1IfLeT))))) (g$caaar$8001$1IfLeT g$caaar$8073$1IfLeT (case-lambda ((g$x$8032$1IfLeT) (g$caar$7997$1IfLeT (car g$x$8032$1IfLeT))))) (g$caadr$8002$1IfLeT g$caadr$8074$1IfLeT (case-lambda ((g$x$8033$1IfLeT) (g$caar$7997$1IfLeT (cdr g$x$8033$1IfLeT))))) (g$cadar$8003$1IfLeT g$cadar$8075$1IfLeT (case-lambda ((g$x$8034$1IfLeT) (g$cadr$7998$1IfLeT (car g$x$8034$1IfLeT))))) (g$caddr$8004$1IfLeT g$caddr$8076$1IfLeT (case-lambda ((g$x$8035$1IfLeT) (g$cadr$7998$1IfLeT (cdr g$x$8035$1IfLeT))))) (g$cdaar$8005$1IfLeT g$cdaar$8077$1IfLeT (case-lambda ((g$x$8036$1IfLeT) (g$cdar$7999$1IfLeT (car g$x$8036$1IfLeT))))) (g$cdadr$8006$1IfLeT g$cdadr$8078$1IfLeT (case-lambda ((g$x$8037$1IfLeT) (g$cdar$7999$1IfLeT (cdr g$x$8037$1IfLeT))))) (g$cddar$8007$1IfLeT g$cddar$8079$1IfLeT (case-lambda ((g$x$8038$1IfLeT) (g$cddr$8000$1IfLeT (car g$x$8038$1IfLeT))))) (g$cdddr$8008$1IfLeT g$cdddr$8080$1IfLeT (case-lambda ((g$x$8039$1IfLeT) (g$cddr$8000$1IfLeT (cdr g$x$8039$1IfLeT))))) (g$caaaar$8009$1IfLeT g$caaaar$8081$1IfLeT (case-lambda ((g$x$8040$1IfLeT) (g$caaar$8001$1IfLeT (car g$x$8040$1IfLeT))))) (g$caaadr$8010$1IfLeT g$caaadr$8082$1IfLeT (case-lambda ((g$x$8041$1IfLeT) (g$caaar$8001$1IfLeT (cdr g$x$8041$1IfLeT))))) (g$caadar$8011$1IfLeT g$caadar$8083$1IfLeT (case-lambda ((g$x$8042$1IfLeT) (g$caadr$8002$1IfLeT (car g$x$8042$1IfLeT))))) (g$caaddr$8012$1IfLeT g$caaddr$8084$1IfLeT (case-lambda ((g$x$8043$1IfLeT) (g$caadr$8002$1IfLeT (cdr g$x$8043$1IfLeT))))) (g$cadaar$8013$1IfLeT g$cadaar$8085$1IfLeT (case-lambda ((g$x$8044$1IfLeT) (g$cadar$8003$1IfLeT (car g$x$8044$1IfLeT))))) (g$cadadr$8014$1IfLeT g$cadadr$8086$1IfLeT (case-lambda ((g$x$8045$1IfLeT) (g$cadar$8003$1IfLeT (cdr g$x$8045$1IfLeT))))) (g$caddar$8015$1IfLeT g$caddar$8087$1IfLeT (case-lambda ((g$x$8046$1IfLeT) (g$caddr$8004$1IfLeT (car g$x$8046$1IfLeT))))) (g$cadddr$8016$1IfLeT g$cadddr$8088$1IfLeT (case-lambda ((g$x$8047$1IfLeT) (g$caddr$8004$1IfLeT (cdr g$x$8047$1IfLeT))))) (g$cdaaar$8017$1IfLeT g$cdaaar$8089$1IfLeT (case-lambda ((g$x$8048$1IfLeT) (g$cdaar$8005$1IfLeT (car g$x$8048$1IfLeT))))) (g$cdaadr$8018$1IfLeT g$cdaadr$8090$1IfLeT (case-lambda ((g$x$8049$1IfLeT) (g$cdaar$8005$1IfLeT (cdr g$x$8049$1IfLeT))))) (g$cdadar$8019$1IfLeT g$cdadar$8091$1IfLeT (case-lambda ((g$x$8050$1IfLeT) (g$cdadr$8006$1IfLeT (car g$x$8050$1IfLeT))))) (g$cdaddr$8020$1IfLeT g$cdaddr$8092$1IfLeT (case-lambda ((g$x$8051$1IfLeT) (g$cdadr$8006$1IfLeT (cdr g$x$8051$1IfLeT))))) (g$cddaar$8021$1IfLeT g$cddaar$8093$1IfLeT (case-lambda ((g$x$8052$1IfLeT) (g$cddar$8007$1IfLeT (car g$x$8052$1IfLeT))))) (g$cddadr$8022$1IfLeT g$cddadr$8094$1IfLeT (case-lambda ((g$x$8053$1IfLeT) (g$cddar$8007$1IfLeT (cdr g$x$8053$1IfLeT))))) (g$cdddar$8023$1IfLeT g$cdddar$8095$1IfLeT (case-lambda ((g$x$8054$1IfLeT) (g$cdddr$8008$1IfLeT (car g$x$8054$1IfLeT))))) (g$cddddr$8024$1IfLeT g$cddddr$8096$1IfLeT (case-lambda ((g$x$8055$1IfLeT) (g$cdddr$8008$1IfLeT (cdr g$x$8055$1IfLeT))))) (g$rationalize$8025$1IfLeT g$rationalize$8097$1IfLeT (case-lambda ((g$x$8056$1IfLeT g$e$8057$1IfLeT) (apply / (g$find-ratio$8026$1IfLeT g$x$8056$1IfLeT g$e$8057$1IfLeT))))) (g$find-ratio$8026$1IfLeT g$find-ratio$8098$1IfLeT (case-lambda ((g$x$8058$1IfLeT g$e$8059$1IfLeT) (g$find-ratio-between$8027$1IfLeT (- g$x$8058$1IfLeT g$e$8059$1IfLeT) (+ g$x$8058$1IfLeT g$e$8059$1IfLeT))))) (g$find-ratio-between$8027$1IfLeT g$find-ratio-between$8099$1IfLeT (case-lambda ((g$x$8060$1IfLeT g$y$8061$1IfLeT) (letrec* ((g$sr$8062$1IfLeT (case-lambda ((g$x$8064$1IfLeT g$y$8065$1IfLeT) ((case-lambda ((g$fx$8066$1IfLeT g$fy$8067$1IfLeT) (if (>= g$fx$8066$1IfLeT g$x$8064$1IfLeT) (list g$fx$8066$1IfLeT '1) (if (= g$fx$8066$1IfLeT g$fy$8067$1IfLeT) ((case-lambda ((g$rat$8068$1IfLeT) (list (+ (g$cadr$7998$1IfLeT g$rat$8068$1IfLeT) (* g$fx$8066$1IfLeT (car g$rat$8068$1IfLeT))) (car g$rat$8068$1IfLeT)))) (g$sr$8062$1IfLeT (/ (- g$y$8065$1IfLeT g$fy$8067$1IfLeT)) (/ (- g$x$8064$1IfLeT g$fx$8066$1IfLeT)))) (list (+ '1 g$fx$8066$1IfLeT) '1))))) (exact (floor g$x$8064$1IfLeT)) (exact (floor g$y$8065$1IfLeT))))))) (if (< g$y$8061$1IfLeT g$x$8060$1IfLeT) (g$find-ratio-between$8027$1IfLeT g$y$8061$1IfLeT g$x$8060$1IfLeT) (if (>= g$x$8060$1IfLeT g$y$8061$1IfLeT) (list g$x$8060$1IfLeT '1) (if (positive? g$x$8060$1IfLeT) (g$sr$8062$1IfLeT g$x$8060$1IfLeT g$y$8061$1IfLeT) (if (negative? g$y$8061$1IfLeT) ((case-lambda ((g$rat$8063$1IfLeT) (list (- (car g$rat$8063$1IfLeT)) (g$cadr$7998$1IfLeT g$rat$8063$1IfLeT)))) (g$sr$8062$1IfLeT (- g$y$8061$1IfLeT) (- g$x$8060$1IfLeT))) '(0 1)))))))))) (void))
(library-letrec* ((g$using$8295$1IfLeT g$using$8332$1IfLeT (clr-using-internal 'system)) (g$using$8297$1IfLeT g$using$8333$1IfLeT (clr-using-internal 'system.collections)) (g$make-eq-hashtable$8298$1IfLeT g$make-eq-hashtable$8334$1IfLeT (case-lambda (() (clr-new-internal 'hashtable)) ((g$k$8311$1IfLeT) (clr-new-internal 'hashtable (clr-cast-internal 'int32 g$k$8311$1IfLeT))))) (g$make-eqv-hashtable$8299$1IfLeT g$make-eqv-hashtable$8335$1IfLeT (case-lambda (() (clr-new-internal 'hashtable)) ((g$k$8312$1IfLeT) (clr-new-internal 'hashtable (clr-cast-internal 'int32 g$k$8312$1IfLeT))))) (g$hashtable-size$8300$1IfLeT g$hashtable-size$8336$1IfLeT (case-lambda ((g$ht$8313$1IfLeT) (clr-call-internal 'hashtable 'get_count g$ht$8313$1IfLeT)))) (g$hashtable-ref$8301$1IfLeT g$hashtable-ref$8337$1IfLeT (case-lambda ((g$ht$8314$1IfLeT g$key$8315$1IfLeT g$default$8316$1IfLeT) (letrec* ((g$r$8317$1IfLeT (clr-call-internal 'hashtable 'get_item g$ht$8314$1IfLeT g$key$8315$1IfLeT))) (if (not (null? g$r$8317$1IfLeT)) g$r$8317$1IfLeT g$default$8316$1IfLeT))))) (g$hashtable-set!$8302$1IfLeT g$hashtable-set!$8338$1IfLeT (case-lambda ((g$ht$8318$1IfLeT g$key$8319$1IfLeT g$obj$8320$1IfLeT) (clr-call-internal 'hashtable 'set_item g$ht$8318$1IfLeT g$key$8319$1IfLeT g$obj$8320$1IfLeT)))) (g$hashtable-delete!$8303$1IfLeT g$hashtable-delete!$8339$1IfLeT (case-lambda ((g$ht$8321$1IfLeT g$key$8322$1IfLeT) (clr-call-internal 'hashtable 'remove g$ht$8321$1IfLeT g$key$8322$1IfLeT)))) (g$hashtable-contains?$8304$1IfLeT g$hashtable-contains?$8340$1IfLeT (case-lambda ((g$ht$8323$1IfLeT g$key$8324$1IfLeT) (clr-call-internal 'hashtable 'containskey g$ht$8323$1IfLeT g$key$8324$1IfLeT)))) (g$hashtable-update!$8305$1IfLeT g$hashtable-update!$8341$1IfLeT (case-lambda ((g$ht$8325$1IfLeT g$key$8326$1IfLeT g$proc$8327$1IfLeT g$default$8328$1IfLeT) (g$hashtable-set!$8302$1IfLeT g$ht$8325$1IfLeT g$key$8326$1IfLeT (g$proc$8327$1IfLeT (g$hashtable-ref$8301$1IfLeT g$ht$8325$1IfLeT g$key$8326$1IfLeT g$default$8328$1IfLeT)))))) (g$hashtable-clear!$8306$1IfLeT g$hashtable-clear!$8342$1IfLeT (case-lambda ((g$ht$8329$1IfLeT) (clr-call-internal 'hashtable 'clear g$ht$8329$1IfLeT)) ((g$ht$8330$1IfLeT g$k$8331$1IfLeT) (clr-call-internal 'hashtable 'clear g$ht$8330$1IfLeT)))) (g$hashtable-equivalence-function$8307$1IfLeT g$hashtable-equivalence-function$8343$1IfLeT '#f) (g$hashtable-hash-function$8308$1IfLeT g$hashtable-hash-function$8344$1IfLeT '#f) (g$clear-usings$8310$1IfLeT g$clear-usings$8345$1IfLeT (clr-clear-usings-internal))) (void))
(library-letrec* ((g$using$8347$1IfLeT g$using$8413$1IfLeT (clr-using-internal 'system.io)) (g$file-exists?$8348$1IfLeT g$file-exists?$8414$1IfLeT (case-lambda ((g$fn$8376$1IfLeT) (clr-call-internal 'file 'exists '() g$fn$8376$1IfLeT)))) (g$delete-file$8349$1IfLeT g$delete-file$8415$1IfLeT (case-lambda ((g$fn$8377$1IfLeT) (clr-call-internal 'file 'delete '() g$fn$8377$1IfLeT)))) (g$file-copy$8350$1IfLeT g$file-copy$8416$1IfLeT (case-lambda ((g$from$8378$1IfLeT g$to$8379$1IfLeT) (g$file-copy$8350$1IfLeT g$from$8378$1IfLeT g$to$8379$1IfLeT '#f)) ((g$from$8380$1IfLeT g$to$8381$1IfLeT g$overwrite?$8382$1IfLeT) (clr-call-internal 'file 'copy '() g$from$8380$1IfLeT g$to$8381$1IfLeT g$overwrite?$8382$1IfLeT)))) (g$file-move$8351$1IfLeT g$file-move$8417$1IfLeT (case-lambda ((g$from$8383$1IfLeT g$to$8384$1IfLeT) (clr-call-internal 'file 'move '() g$from$8383$1IfLeT g$to$8384$1IfLeT)))) (g$file-create-time$8352$1IfLeT g$file-create-time$8418$1IfLeT (case-lambda ((g$fn$8385$1IfLeT) (clr-call-internal 'file 'getcreationtime '() g$fn$8385$1IfLeT)))) (g$file-access-time$8353$1IfLeT g$file-access-time$8419$1IfLeT (case-lambda ((g$fn$8386$1IfLeT) (clr-call-internal 'file 'getlastaccesstime '() g$fn$8386$1IfLeT)))) (g$file-modified-time$8354$1IfLeT g$file-modified-time$8420$1IfLeT (case-lambda ((g$fn$8387$1IfLeT) (clr-call-internal 'file 'getlastwritetime '() g$fn$8387$1IfLeT)))) (g$directory-exists?$8355$1IfLeT g$directory-exists?$8421$1IfLeT (case-lambda ((g$fn$8388$1IfLeT) (clr-call-internal 'directory 'exists '() g$fn$8388$1IfLeT)))) (g$delete-directory$8356$1IfLeT g$delete-directory$8422$1IfLeT (case-lambda ((g$dir$8389$1IfLeT) (g$delete-directory$8356$1IfLeT g$dir$8389$1IfLeT '#f)) ((g$dir$8390$1IfLeT g$recursive?$8391$1IfLeT) (clr-call-internal 'directory 'delete '() g$dir$8390$1IfLeT g$recursive?$8391$1IfLeT)))) (g$directory-move$8357$1IfLeT g$directory-move$8423$1IfLeT (case-lambda ((g$from$8392$1IfLeT g$to$8393$1IfLeT) (clr-call-internal 'directory 'move '() g$from$8392$1IfLeT g$to$8393$1IfLeT)))) (g$create-directory$8358$1IfLeT g$create-directory$8424$1IfLeT (case-lambda ((g$name$8394$1IfLeT) (clr-call-internal 'directory 'createdirectory '() g$name$8394$1IfLeT)))) (g$get-files$8359$1IfLeT g$get-files$8425$1IfLeT (case-lambda ((g$dir$8395$1IfLeT) (g$get-files$8359$1IfLeT g$dir$8395$1IfLeT '"*")) ((g$dir$8396$1IfLeT g$pattern$8397$1IfLeT) (clr-call-internal 'directory 'getfiles '() g$dir$8396$1IfLeT g$pattern$8397$1IfLeT)))) (g$get-directories$8360$1IfLeT g$get-directories$8426$1IfLeT (case-lambda ((g$dir$8398$1IfLeT) (g$get-directories$8360$1IfLeT g$dir$8398$1IfLeT '"*")) ((g$dir$8399$1IfLeT g$pattern$8400$1IfLeT) (clr-call-internal 'directory 'getdirectories '() g$dir$8399$1IfLeT g$pattern$8400$1IfLeT)))) (g$change-extension$8361$1IfLeT g$change-extension$8427$1IfLeT (case-lambda ((g$path$8401$1IfLeT g$extension$8402$1IfLeT) (clr-call-internal 'path 'changeextension '() g$path$8401$1IfLeT g$extension$8402$1IfLeT)))) (g$path-combine$8362$1IfLeT g$path-combine$8428$1IfLeT (case-lambda ((g$path1$8403$1IfLeT g$path2$8404$1IfLeT) (clr-call-internal 'path 'combine '() g$path1$8403$1IfLeT g$path2$8404$1IfLeT)))) (g$get-directory-name$8363$1IfLeT g$get-directory-name$8429$1IfLeT (case-lambda ((g$path$8405$1IfLeT) (clr-call-internal 'path 'getdirectoryname '() g$path$8405$1IfLeT)))) (g$get-extension$8364$1IfLeT g$get-extension$8430$1IfLeT (case-lambda ((g$path$8406$1IfLeT) (clr-call-internal 'path 'getextension '() g$path$8406$1IfLeT)))) (g$get-filename$8365$1IfLeT g$get-filename$8431$1IfLeT (case-lambda ((g$path$8407$1IfLeT) (clr-call-internal 'path 'getfilename '() g$path$8407$1IfLeT)))) (g$get-filename-without-extension$8366$1IfLeT g$get-filename-without-extension$8432$1IfLeT (case-lambda ((g$path$8408$1IfLeT) (clr-call-internal 'path 'getfilenamewithoutextension '() g$path$8408$1IfLeT)))) (g$get-full-path$8367$1IfLeT g$get-full-path$8433$1IfLeT (case-lambda ((g$path$8409$1IfLeT) (clr-call-internal 'path 'getfullpath '() g$path$8409$1IfLeT)))) (g$get-path-root$8368$1IfLeT g$get-path-root$8434$1IfLeT (case-lambda ((g$path$8410$1IfLeT) (clr-call-internal 'path 'getpathroot '() g$path$8410$1IfLeT)))) (g$get-random-filename$8369$1IfLeT g$get-random-filename$8435$1IfLeT (case-lambda (() (clr-call-internal 'path 'getrandomfilename '())))) (g$get-temp-filename$8370$1IfLeT g$get-temp-filename$8436$1IfLeT (case-lambda (() (clr-call-internal 'path 'gettempfilename '())))) (g$get-temp-path$8371$1IfLeT g$get-temp-path$8437$1IfLeT (case-lambda (() (clr-call-internal 'path 'gettemppath '())))) (g$path-rooted?$8372$1IfLeT g$path-rooted?$8438$1IfLeT (case-lambda ((g$path$8411$1IfLeT) (clr-call-internal 'path 'ispathrooted '() g$path$8411$1IfLeT)))) (g$path-has-extension?$8373$1IfLeT g$path-has-extension?$8439$1IfLeT (case-lambda ((g$path$8412$1IfLeT) (clr-call-internal 'path 'hasextension '() g$path$8412$1IfLeT)))) (g$clear-usings$8375$1IfLeT g$clear-usings$8440$1IfLeT (clr-clear-usings-internal))) (void))
(library-letrec* ((g$all-empty?$8441$1IfLeT g$all-empty?$8488$1IfLeT (case-lambda ((g$ls$8451$1IfLeT) ((case-lambda ((g$t$8452$1IfLeT) (if g$t$8452$1IfLeT g$t$8452$1IfLeT (begin '#f (if (null? (car g$ls$8451$1IfLeT)) (begin '#f (g$all-empty?$8441$1IfLeT (cdr g$ls$8451$1IfLeT))) '#f))))) (null? g$ls$8451$1IfLeT))))) (g$split$8442$1IfLeT g$split$8489$1IfLeT (case-lambda ((g$ls$8453$1IfLeT) (if (null? g$ls$8453$1IfLeT) (values '() '()) (call-with-values (case-lambda (() (g$split$8442$1IfLeT (cdr g$ls$8453$1IfLeT)))) (case-lambda ((g$cars$8454$1IfLeT g$cdrs$8455$1IfLeT) ((case-lambda ((g$a$8456$1IfLeT) (values (cons (car g$a$8456$1IfLeT) g$cars$8454$1IfLeT) (cons (cdr g$a$8456$1IfLeT) g$cdrs$8455$1IfLeT)))) (car g$ls$8453$1IfLeT))))))))) (g$for-all$8443$1IfLeT g$for-all$8490$1IfLeT (case-lambda ((g$f$8457$1IfLeT . g$args$8458$1IfLeT) (if (g$all-empty?$8441$1IfLeT g$args$8458$1IfLeT) '#t (call-with-values (case-lambda (() (g$split$8442$1IfLeT g$args$8458$1IfLeT))) (case-lambda ((g$cars$8459$1IfLeT g$cdrs$8460$1IfLeT) (if (apply g$f$8457$1IfLeT g$cars$8459$1IfLeT) (begin '#f (apply g$for-all$8443$1IfLeT g$f$8457$1IfLeT g$cdrs$8460$1IfLeT)) '#f)))))))) (g$exists$8444$1IfLeT g$exists$8491$1IfLeT (case-lambda ((g$f$8461$1IfLeT . g$args$8462$1IfLeT) (if (g$all-empty?$8441$1IfLeT g$args$8462$1IfLeT) '#f (call-with-values (case-lambda (() (g$split$8442$1IfLeT g$args$8462$1IfLeT))) (case-lambda ((g$cars$8463$1IfLeT g$cdrs$8464$1IfLeT) ((case-lambda ((g$t$8465$1IfLeT) (if g$t$8465$1IfLeT g$t$8465$1IfLeT (begin '#f (apply g$exists$8444$1IfLeT g$f$8461$1IfLeT g$cdrs$8464$1IfLeT))))) (apply g$f$8461$1IfLeT g$cars$8463$1IfLeT))))))))) (g$cons*$8445$1IfLeT g$cons*$8492$1IfLeT (case-lambda ((g$a$8466$1IfLeT . g$rest$8467$1IfLeT) ((letrec ((g$f$8468$1IfLeT (case-lambda ((g$a$8469$1IfLeT g$rest$8470$1IfLeT) (if (null? g$rest$8470$1IfLeT) g$a$8469$1IfLeT (cons g$a$8469$1IfLeT (g$f$8468$1IfLeT (car g$rest$8470$1IfLeT) (cdr g$rest$8470$1IfLeT)))))))) g$f$8468$1IfLeT) g$a$8466$1IfLeT g$rest$8467$1IfLeT)))) (g$fold-left$8446$1IfLeT g$fold-left$8493$1IfLeT (case-lambda ((g$combine$8471$1IfLeT g$nil$8472$1IfLeT g$list1$8473$1IfLeT . g$lists$8474$1IfLeT) (if (null? g$list1$8473$1IfLeT) g$nil$8472$1IfLeT (apply g$fold-left$8446$1IfLeT (g$cons*$8445$1IfLeT g$combine$8471$1IfLeT (apply g$combine$8471$1IfLeT (g$cons*$8445$1IfLeT g$nil$8472$1IfLeT (car g$list1$8473$1IfLeT) (map car g$lists$8474$1IfLeT))) (cdr g$list1$8473$1IfLeT) (map cdr g$lists$8474$1IfLeT))))))) (g$fold-right$8447$1IfLeT g$fold-right$8494$1IfLeT (case-lambda ((g$combine$8475$1IfLeT g$nil$8476$1IfLeT g$list1$8477$1IfLeT . g$lists$8478$1IfLeT) (if (null? g$list1$8477$1IfLeT) g$nil$8476$1IfLeT (apply g$combine$8475$1IfLeT (append (list (car g$list1$8477$1IfLeT)) (map car g$lists$8478$1IfLeT) (list (apply g$fold-right$8447$1IfLeT (g$cons*$8445$1IfLeT g$combine$8475$1IfLeT g$nil$8476$1IfLeT (cdr g$list1$8477$1IfLeT) (map cdr g$lists$8478$1IfLeT)))))))))) (g$remove$8448$1IfLeT g$remove$8495$1IfLeT (case-lambda ((g$obj$8479$1IfLeT g$list$8480$1IfLeT) (remp (case-lambda ((g$x$8481$1IfLeT) (equal? g$obj$8479$1IfLeT g$x$8481$1IfLeT))) g$list$8480$1IfLeT)))) (g$remv$8449$1IfLeT g$remv$8496$1IfLeT (case-lambda ((g$obj$8482$1IfLeT g$list$8483$1IfLeT) (remp (case-lambda ((g$x$8484$1IfLeT) (eqv? g$obj$8482$1IfLeT g$x$8484$1IfLeT))) g$list$8483$1IfLeT)))) (g$remq$8450$1IfLeT g$remq$8497$1IfLeT (case-lambda ((g$obj$8485$1IfLeT g$list$8486$1IfLeT) (remp (case-lambda ((g$x$8487$1IfLeT) (eq? g$obj$8485$1IfLeT g$x$8487$1IfLeT))) g$list$8486$1IfLeT))))) (void))
(library-letrec* ((g$native-endianness$8498$1IfLeT g$native-endianness$8609$1IfLeT (case-lambda (() 'little))) (g$bytevector-u16-ref$8499$1IfLeT g$bytevector-u16-ref$8610$1IfLeT (case-lambda ((g$bytevector$8527$1IfLeT g$k$8528$1IfLeT g$endianness$8529$1IfLeT) (bytevector-uint-ref g$bytevector$8527$1IfLeT g$k$8528$1IfLeT g$endianness$8529$1IfLeT '2)))) (g$bytevector-s16-ref$8500$1IfLeT g$bytevector-s16-ref$8611$1IfLeT (case-lambda ((g$bytevector$8530$1IfLeT g$k$8531$1IfLeT g$endianness$8532$1IfLeT) (bytevector-sint-ref g$bytevector$8530$1IfLeT g$k$8531$1IfLeT g$endianness$8532$1IfLeT '2)))) (g$bytevector-u16-native-ref$8501$1IfLeT g$bytevector-u16-native-ref$8612$1IfLeT (case-lambda ((g$bytevector$8533$1IfLeT g$k$8534$1IfLeT) (bytevector-uint-ref g$bytevector$8533$1IfLeT g$k$8534$1IfLeT (g$native-endianness$8498$1IfLeT) '2)))) (g$bytevector-s16-native-ref$8502$1IfLeT g$bytevector-s16-native-ref$8613$1IfLeT (case-lambda ((g$bytevector$8535$1IfLeT g$k$8536$1IfLeT) (bytevector-sint-ref g$bytevector$8535$1IfLeT g$k$8536$1IfLeT (g$native-endianness$8498$1IfLeT) '2)))) (g$bytevector-u16-set!$8503$1IfLeT g$bytevector-u16-set!$8614$1IfLeT (case-lambda ((g$bytevector$8537$1IfLeT g$k$8538$1IfLeT g$n$8539$1IfLeT g$endianness$8540$1IfLeT) (bytevector-uint-ref g$bytevector$8537$1IfLeT g$k$8538$1IfLeT g$endianness$8540$1IfLeT '2)))) (g$bytevector-s16-set!$8504$1IfLeT g$bytevector-s16-set!$8615$1IfLeT (case-lambda ((g$bytevector$8541$1IfLeT g$k$8542$1IfLeT g$n$8543$1IfLeT g$endianness$8544$1IfLeT) (bytevector-sint-ref g$bytevector$8541$1IfLeT g$k$8542$1IfLeT g$endianness$8544$1IfLeT '2)))) (g$bytevector-u16-native-set!$8505$1IfLeT g$bytevector-u16-native-set!$8616$1IfLeT (case-lambda ((g$bytevector$8545$1IfLeT g$k$8546$1IfLeT g$n$8547$1IfLeT) (bytevector-uint-ref g$bytevector$8545$1IfLeT g$k$8546$1IfLeT (g$native-endianness$8498$1IfLeT) '2)))) (g$bytevector-s16-native-set!$8506$1IfLeT g$bytevector-s16-native-set!$8617$1IfLeT (case-lambda ((g$bytevector$8548$1IfLeT g$k$8549$1IfLeT g$n$8550$1IfLeT) (bytevector-sint-ref g$bytevector$8548$1IfLeT g$k$8549$1IfLeT (g$native-endianness$8498$1IfLeT) '2)))) (g$bytevector-u32-ref$8507$1IfLeT g$bytevector-u32-ref$8618$1IfLeT (case-lambda ((g$bytevector$8551$1IfLeT g$k$8552$1IfLeT g$endianness$8553$1IfLeT) (bytevector-uint-ref g$bytevector$8551$1IfLeT g$k$8552$1IfLeT g$endianness$8553$1IfLeT '4)))) (g$bytevector-s32-ref$8508$1IfLeT g$bytevector-s32-ref$8619$1IfLeT (case-lambda ((g$bytevector$8554$1IfLeT g$k$8555$1IfLeT g$endianness$8556$1IfLeT) (bytevector-sint-ref g$bytevector$8554$1IfLeT g$k$8555$1IfLeT g$endianness$8556$1IfLeT '4)))) (g$bytevector-u32-native-ref$8509$1IfLeT g$bytevector-u32-native-ref$8620$1IfLeT (case-lambda ((g$bytevector$8557$1IfLeT g$k$8558$1IfLeT) (bytevector-uint-ref g$bytevector$8557$1IfLeT g$k$8558$1IfLeT (g$native-endianness$8498$1IfLeT) '4)))) (g$bytevector-s32-native-ref$8510$1IfLeT g$bytevector-s32-native-ref$8621$1IfLeT (case-lambda ((g$bytevector$8559$1IfLeT g$k$8560$1IfLeT) (bytevector-sint-ref g$bytevector$8559$1IfLeT g$k$8560$1IfLeT (g$native-endianness$8498$1IfLeT) '4)))) (g$bytevector-u32-set!$8511$1IfLeT g$bytevector-u32-set!$8622$1IfLeT (case-lambda ((g$bytevector$8561$1IfLeT g$k$8562$1IfLeT g$n$8563$1IfLeT g$endianness$8564$1IfLeT) (bytevector-uint-ref g$bytevector$8561$1IfLeT g$k$8562$1IfLeT g$endianness$8564$1IfLeT '4)))) (g$bytevector-s32-set!$8512$1IfLeT g$bytevector-s32-set!$8623$1IfLeT (case-lambda ((g$bytevector$8565$1IfLeT g$k$8566$1IfLeT g$n$8567$1IfLeT g$endianness$8568$1IfLeT) (bytevector-sint-ref g$bytevector$8565$1IfLeT g$k$8566$1IfLeT g$endianness$8568$1IfLeT '4)))) (g$bytevector-u32-native-set!$8513$1IfLeT g$bytevector-u32-native-set!$8624$1IfLeT (case-lambda ((g$bytevector$8569$1IfLeT g$k$8570$1IfLeT g$n$8571$1IfLeT) (bytevector-uint-ref g$bytevector$8569$1IfLeT g$k$8570$1IfLeT (g$native-endianness$8498$1IfLeT) '4)))) (g$bytevector-s32-native-set!$8514$1IfLeT g$bytevector-s32-native-set!$8625$1IfLeT (case-lambda ((g$bytevector$8572$1IfLeT g$k$8573$1IfLeT g$n$8574$1IfLeT) (bytevector-sint-ref g$bytevector$8572$1IfLeT g$k$8573$1IfLeT (g$native-endianness$8498$1IfLeT) '4)))) (g$bytevector-u64-ref$8515$1IfLeT g$bytevector-u64-ref$8626$1IfLeT (case-lambda ((g$bytevector$8575$1IfLeT g$k$8576$1IfLeT g$endianness$8577$1IfLeT) (bytevector-uint-ref g$bytevector$8575$1IfLeT g$k$8576$1IfLeT g$endianness$8577$1IfLeT '8)))) (g$bytevector-s64-ref$8516$1IfLeT g$bytevector-s64-ref$8627$1IfLeT (case-lambda ((g$bytevector$8578$1IfLeT g$k$8579$1IfLeT g$endianness$8580$1IfLeT) (bytevector-sint-ref g$bytevector$8578$1IfLeT g$k$8579$1IfLeT g$endianness$8580$1IfLeT '8)))) (g$bytevector-u64-native-ref$8517$1IfLeT g$bytevector-u64-native-ref$8628$1IfLeT (case-lambda ((g$bytevector$8581$1IfLeT g$k$8582$1IfLeT) (bytevector-uint-ref g$bytevector$8581$1IfLeT g$k$8582$1IfLeT (g$native-endianness$8498$1IfLeT) '8)))) (g$bytevector-s64-native-ref$8518$1IfLeT g$bytevector-s64-native-ref$8629$1IfLeT (case-lambda ((g$bytevector$8583$1IfLeT g$k$8584$1IfLeT) (bytevector-sint-ref g$bytevector$8583$1IfLeT g$k$8584$1IfLeT (g$native-endianness$8498$1IfLeT) '8)))) (g$bytevector-u64-set!$8519$1IfLeT g$bytevector-u64-set!$8630$1IfLeT (case-lambda ((g$bytevector$8585$1IfLeT g$k$8586$1IfLeT g$n$8587$1IfLeT g$endianness$8588$1IfLeT) (bytevector-uint-ref g$bytevector$8585$1IfLeT g$k$8586$1IfLeT g$endianness$8588$1IfLeT '8)))) (g$bytevector-s64-set!$8520$1IfLeT g$bytevector-s64-set!$8631$1IfLeT (case-lambda ((g$bytevector$8589$1IfLeT g$k$8590$1IfLeT g$n$8591$1IfLeT g$endianness$8592$1IfLeT) (bytevector-sint-ref g$bytevector$8589$1IfLeT g$k$8590$1IfLeT g$endianness$8592$1IfLeT '8)))) (g$bytevector-u64-native-set!$8521$1IfLeT g$bytevector-u64-native-set!$8632$1IfLeT (case-lambda ((g$bytevector$8593$1IfLeT g$k$8594$1IfLeT g$n$8595$1IfLeT) (bytevector-uint-ref g$bytevector$8593$1IfLeT g$k$8594$1IfLeT (g$native-endianness$8498$1IfLeT) '8)))) (g$bytevector-s64-native-set!$8522$1IfLeT g$bytevector-s64-native-set!$8633$1IfLeT (case-lambda ((g$bytevector$8596$1IfLeT g$k$8597$1IfLeT g$n$8598$1IfLeT) (bytevector-sint-ref g$bytevector$8596$1IfLeT g$k$8597$1IfLeT (g$native-endianness$8498$1IfLeT) '8)))) (g$bytevector-ieee-single-native-ref$8523$1IfLeT g$bytevector-ieee-single-native-ref$8634$1IfLeT (case-lambda ((g$bytevector$8599$1IfLeT g$k$8600$1IfLeT) (bytevector-ieee-single-ref g$bytevector$8599$1IfLeT g$k$8600$1IfLeT (g$native-endianness$8498$1IfLeT))))) (g$bytevector-ieee-double-native-ref$8524$1IfLeT g$bytevector-ieee-double-native-ref$8635$1IfLeT (case-lambda ((g$bytevector$8601$1IfLeT g$k$8602$1IfLeT) (bytevector-ieee-double-ref g$bytevector$8601$1IfLeT g$k$8602$1IfLeT (g$native-endianness$8498$1IfLeT))))) (g$bytevector-ieee-single-native-set!$8525$1IfLeT g$bytevector-ieee-single-native-set!$8636$1IfLeT (case-lambda ((g$bytevector$8603$1IfLeT g$k$8604$1IfLeT g$x$8605$1IfLeT) (bytevector-ieee-single-set! g$bytevector$8603$1IfLeT g$k$8604$1IfLeT g$x$8605$1IfLeT (g$native-endianness$8498$1IfLeT))))) (g$bytevector-ieee-double-native-set!$8526$1IfLeT g$bytevector-ieee-double-native-set!$8637$1IfLeT (case-lambda ((g$bytevector$8606$1IfLeT g$k$8607$1IfLeT g$x$8608$1IfLeT) (bytevector-ieee-double-set! g$bytevector$8606$1IfLeT g$k$8607$1IfLeT g$x$8608$1IfLeT (g$native-endianness$8498$1IfLeT)))))) (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* ((g$8422$8638$1IfLeT g$8422$8733$1IfLeT (make-record-type-descriptor '&condition '#f 'g$8425$1IfLeT '#f '#f '#())) (g$8424$8639$1IfLeT g$8424$8734$1IfLeT '#f) (g$8423$8640$1IfLeT g$8423$8735$1IfLeT (make-record-constructor-descriptor g$8422$8638$1IfLeT '#f g$8424$8639$1IfLeT)) (g$&condition?$8641$1IfLeT g$&condition?$8736$1IfLeT (record-predicate g$8422$8638$1IfLeT)) (g$make-&condition$8642$1IfLeT g$make-&condition$8737$1IfLeT (record-constructor g$8423$8640$1IfLeT)) (g$&condition-rtd$8643$1IfLeT g$&condition-rtd$8738$1IfLeT g$8422$8638$1IfLeT) (g$&condition-rcd$8644$1IfLeT g$&condition-rcd$8739$1IfLeT g$8423$8640$1IfLeT) (g$8436$8645$1IfLeT g$8436$8740$1IfLeT (make-record-type-descriptor '&message g$8422$8638$1IfLeT 'g$8439$1IfLeT '#f '#f '#((immutable message)))) (g$8438$8646$1IfLeT g$8438$8741$1IfLeT '#f) (g$8437$8647$1IfLeT g$8437$8742$1IfLeT (make-record-constructor-descriptor g$8436$8645$1IfLeT g$8423$8640$1IfLeT g$8438$8646$1IfLeT)) (g$8435$8648$1IfLeT g$8435$8743$1IfLeT (record-predicate g$8436$8645$1IfLeT)) (g$make-message-condition$8649$1IfLeT g$make-message-condition$8744$1IfLeT (record-constructor g$8437$8647$1IfLeT)) (g$8434$8650$1IfLeT g$8434$8745$1IfLeT (record-accessor g$8436$8645$1IfLeT '0)) (g$message-condition?$8651$1IfLeT g$message-condition?$8746$1IfLeT (condition-predicate g$8436$8645$1IfLeT)) (g$condition-message$8652$1IfLeT g$condition-message$8747$1IfLeT (condition-accessor g$8436$8645$1IfLeT g$8434$8650$1IfLeT)) (g$8450$8653$1IfLeT g$8450$8748$1IfLeT (make-record-type-descriptor '&warning g$8422$8638$1IfLeT 'g$8453$1IfLeT '#f '#f '#())) (g$8452$8654$1IfLeT g$8452$8749$1IfLeT '#f) (g$8451$8655$1IfLeT g$8451$8750$1IfLeT (make-record-constructor-descriptor g$8450$8653$1IfLeT g$8423$8640$1IfLeT g$8452$8654$1IfLeT)) (g$8449$8656$1IfLeT g$8449$8751$1IfLeT (record-predicate g$8450$8653$1IfLeT)) (g$make-warning$8657$1IfLeT g$make-warning$8752$1IfLeT (record-constructor g$8451$8655$1IfLeT)) (g$warning?$8658$1IfLeT g$warning?$8753$1IfLeT (condition-predicate g$8450$8653$1IfLeT)) (g$8462$8659$1IfLeT g$8462$8754$1IfLeT (make-record-type-descriptor '&serious g$8422$8638$1IfLeT 'g$8465$1IfLeT '#f '#f '#())) (g$8464$8660$1IfLeT g$8464$8755$1IfLeT '#f) (g$8463$8661$1IfLeT g$8463$8756$1IfLeT (make-record-constructor-descriptor g$8462$8659$1IfLeT g$8423$8640$1IfLeT g$8464$8660$1IfLeT)) (g$8461$8662$1IfLeT g$8461$8757$1IfLeT (record-predicate g$8462$8659$1IfLeT)) (g$make-serious-condition$8663$1IfLeT g$make-serious-condition$8758$1IfLeT (record-constructor g$8463$8661$1IfLeT)) (g$serious-condition?$8664$1IfLeT g$serious-condition?$8759$1IfLeT (condition-predicate g$8462$8659$1IfLeT)) (g$8474$8665$1IfLeT g$8474$8760$1IfLeT (make-record-type-descriptor '&error g$8462$8659$1IfLeT 'g$8477$1IfLeT '#f '#f '#())) (g$8476$8666$1IfLeT g$8476$8761$1IfLeT '#f) (g$8475$8667$1IfLeT g$8475$8762$1IfLeT (make-record-constructor-descriptor g$8474$8665$1IfLeT g$8463$8661$1IfLeT g$8476$8666$1IfLeT)) (g$8473$8668$1IfLeT g$8473$8763$1IfLeT (record-predicate g$8474$8665$1IfLeT)) (g$make-error$8669$1IfLeT g$make-error$8764$1IfLeT (record-constructor g$8475$8667$1IfLeT)) (g$error?$8670$1IfLeT g$error?$8765$1IfLeT (condition-predicate g$8474$8665$1IfLeT)) (g$8486$8671$1IfLeT g$8486$8766$1IfLeT (make-record-type-descriptor '&violation g$8462$8659$1IfLeT 'g$8489$1IfLeT '#f '#f '#())) (g$8488$8672$1IfLeT g$8488$8767$1IfLeT '#f) (g$8487$8673$1IfLeT g$8487$8768$1IfLeT (make-record-constructor-descriptor g$8486$8671$1IfLeT g$8463$8661$1IfLeT g$8488$8672$1IfLeT)) (g$8485$8674$1IfLeT g$8485$8769$1IfLeT (record-predicate g$8486$8671$1IfLeT)) (g$make-violation$8675$1IfLeT g$make-violation$8770$1IfLeT (record-constructor g$8487$8673$1IfLeT)) (g$violation?$8676$1IfLeT g$violation?$8771$1IfLeT (condition-predicate g$8486$8671$1IfLeT)) (g$8498$8677$1IfLeT g$8498$8772$1IfLeT (make-record-type-descriptor '&assertion g$8486$8671$1IfLeT 'g$8501$1IfLeT '#f '#f '#())) (g$8500$8678$1IfLeT g$8500$8773$1IfLeT '#f) (g$8499$8679$1IfLeT g$8499$8774$1IfLeT (make-record-constructor-descriptor g$8498$8677$1IfLeT g$8487$8673$1IfLeT g$8500$8678$1IfLeT)) (g$8497$8680$1IfLeT g$8497$8775$1IfLeT (record-predicate g$8498$8677$1IfLeT)) (g$make-assertion-violation$8681$1IfLeT g$make-assertion-violation$8776$1IfLeT (record-constructor g$8499$8679$1IfLeT)) (g$assertion-violation?$8682$1IfLeT g$assertion-violation?$8777$1IfLeT (condition-predicate g$8498$8677$1IfLeT)) (g$8511$8683$1IfLeT g$8511$8778$1IfLeT (make-record-type-descriptor '&irritants g$8422$8638$1IfLeT 'g$8514$1IfLeT '#f '#f '#((immutable irritants)))) (g$8513$8684$1IfLeT g$8513$8779$1IfLeT '#f) (g$8512$8685$1IfLeT g$8512$8780$1IfLeT (make-record-constructor-descriptor g$8511$8683$1IfLeT g$8423$8640$1IfLeT g$8513$8684$1IfLeT)) (g$8510$8686$1IfLeT g$8510$8781$1IfLeT (record-predicate g$8511$8683$1IfLeT)) (g$make-irritants-condition$8687$1IfLeT g$make-irritants-condition$8782$1IfLeT (record-constructor g$8512$8685$1IfLeT)) (g$8509$8688$1IfLeT g$8509$8783$1IfLeT (record-accessor g$8511$8683$1IfLeT '0)) (g$irritants-condition?$8689$1IfLeT g$irritants-condition?$8784$1IfLeT (condition-predicate g$8511$8683$1IfLeT)) (g$condition-irritants$8690$1IfLeT g$condition-irritants$8785$1IfLeT (condition-accessor g$8511$8683$1IfLeT g$8509$8688$1IfLeT)) (g$8526$8691$1IfLeT g$8526$8786$1IfLeT (make-record-type-descriptor '&who g$8422$8638$1IfLeT 'g$8529$1IfLeT '#f '#f '#((immutable who)))) (g$8528$8692$1IfLeT g$8528$8787$1IfLeT '#f) (g$8527$8693$1IfLeT g$8527$8788$1IfLeT (make-record-constructor-descriptor g$8526$8691$1IfLeT g$8423$8640$1IfLeT g$8528$8692$1IfLeT)) (g$8525$8694$1IfLeT g$8525$8789$1IfLeT (record-predicate g$8526$8691$1IfLeT)) (g$make-who-condition$8695$1IfLeT g$make-who-condition$8790$1IfLeT (record-constructor g$8527$8693$1IfLeT)) (g$8524$8696$1IfLeT g$8524$8791$1IfLeT (record-accessor g$8526$8691$1IfLeT '0)) (g$who-condition?$8697$1IfLeT g$who-condition?$8792$1IfLeT (condition-predicate g$8526$8691$1IfLeT)) (g$condition-who$8698$1IfLeT g$condition-who$8793$1IfLeT (condition-accessor g$8526$8691$1IfLeT g$8524$8696$1IfLeT)) (g$8540$8699$1IfLeT g$8540$8794$1IfLeT (make-record-type-descriptor '&non-continuable g$8486$8671$1IfLeT 'g$8543$1IfLeT '#f '#f '#())) (g$8542$8700$1IfLeT g$8542$8795$1IfLeT '#f) (g$8541$8701$1IfLeT g$8541$8796$1IfLeT (make-record-constructor-descriptor g$8540$8699$1IfLeT g$8487$8673$1IfLeT g$8542$8700$1IfLeT)) (g$8539$8702$1IfLeT g$8539$8797$1IfLeT (record-predicate g$8540$8699$1IfLeT)) (g$make-non-continuable-violation$8703$1IfLeT g$make-non-continuable-violation$8798$1IfLeT (record-constructor g$8541$8701$1IfLeT)) (g$non-continuable-violation?$8704$1IfLeT g$non-continuable-violation?$8799$1IfLeT (condition-predicate g$8540$8699$1IfLeT)) (g$8552$8705$1IfLeT g$8552$8800$1IfLeT (make-record-type-descriptor '&implementation-restriction g$8486$8671$1IfLeT 'g$8555$1IfLeT '#f '#f '#())) (g$8554$8706$1IfLeT g$8554$8801$1IfLeT '#f) (g$8553$8707$1IfLeT g$8553$8802$1IfLeT (make-record-constructor-descriptor g$8552$8705$1IfLeT g$8487$8673$1IfLeT g$8554$8706$1IfLeT)) (g$8551$8708$1IfLeT g$8551$8803$1IfLeT (record-predicate g$8552$8705$1IfLeT)) (g$make-implementation-restriction-violation$8709$1IfLeT g$make-implementation-restriction-violation$8804$1IfLeT (record-constructor g$8553$8707$1IfLeT)) (g$implementation-restriction-violation?$8710$1IfLeT g$implementation-restriction-violation?$8805$1IfLeT (condition-predicate g$8552$8705$1IfLeT)) (g$8564$8711$1IfLeT g$8564$8806$1IfLeT (make-record-type-descriptor '&lexical g$8486$8671$1IfLeT 'g$8567$1IfLeT '#f '#f '#())) (g$8566$8712$1IfLeT g$8566$8807$1IfLeT '#f) (g$8565$8713$1IfLeT g$8565$8808$1IfLeT (make-record-constructor-descriptor g$8564$8711$1IfLeT g$8487$8673$1IfLeT g$8566$8712$1IfLeT)) (g$8563$8714$1IfLeT g$8563$8809$1IfLeT (record-predicate g$8564$8711$1IfLeT)) (g$make-lexical-violation$8715$1IfLeT g$make-lexical-violation$8810$1IfLeT (record-constructor g$8565$8713$1IfLeT)) (g$lexical-violation?$8716$1IfLeT g$lexical-violation?$8811$1IfLeT (condition-predicate g$8564$8711$1IfLeT)) (g$8578$8717$1IfLeT g$8578$8812$1IfLeT (make-record-type-descriptor '&syntax g$8486$8671$1IfLeT 'g$8581$1IfLeT '#f '#f '#((immutable form) (immutable subform)))) (g$8580$8718$1IfLeT g$8580$8813$1IfLeT '#f) (g$8579$8719$1IfLeT g$8579$8814$1IfLeT (make-record-constructor-descriptor g$8578$8717$1IfLeT g$8487$8673$1IfLeT g$8580$8718$1IfLeT)) (g$8577$8720$1IfLeT g$8577$8815$1IfLeT (record-predicate g$8578$8717$1IfLeT)) (g$make-syntax-violation$8721$1IfLeT g$make-syntax-violation$8816$1IfLeT (record-constructor g$8579$8719$1IfLeT)) (g$8575$8722$1IfLeT g$8575$8817$1IfLeT (record-accessor g$8578$8717$1IfLeT '0)) (g$8576$8723$1IfLeT g$8576$8818$1IfLeT (record-accessor g$8578$8717$1IfLeT '1)) (g$syntax-violation?$8724$1IfLeT g$syntax-violation?$8819$1IfLeT (condition-predicate g$8578$8717$1IfLeT)) (g$syntax-violation-form$8725$1IfLeT g$syntax-violation-form$8820$1IfLeT (condition-accessor g$8578$8717$1IfLeT g$8575$8722$1IfLeT)) (g$syntax-violation-subform$8726$1IfLeT g$syntax-violation-subform$8821$1IfLeT (condition-accessor g$8578$8717$1IfLeT g$8576$8723$1IfLeT)) (g$8594$8727$1IfLeT g$8594$8822$1IfLeT (make-record-type-descriptor '&undefined g$8486$8671$1IfLeT 'g$8597$1IfLeT '#f '#f '#())) (g$8596$8728$1IfLeT g$8596$8823$1IfLeT '#f) (g$8595$8729$1IfLeT g$8595$8824$1IfLeT (make-record-constructor-descriptor g$8594$8727$1IfLeT g$8487$8673$1IfLeT g$8596$8728$1IfLeT)) (g$8593$8730$1IfLeT g$8593$8825$1IfLeT (record-predicate g$8594$8727$1IfLeT)) (g$make-undefined-violation$8731$1IfLeT g$make-undefined-violation$8826$1IfLeT (record-constructor g$8595$8729$1IfLeT)) (g$undefined-violation?$8732$1IfLeT g$undefined-violation?$8827$1IfLeT (condition-predicate g$8594$8727$1IfLeT))) (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* ((g$sign$8828$1IfLeT g$sign$8839$1IfLeT (case-lambda ((g$n$8832$1IfLeT) (if (> g$n$8832$1IfLeT '0) '1 (if (< g$n$8832$1IfLeT '0) '-1 '0))))) (g$quotient$8829$1IfLeT g$quotient$8840$1IfLeT (case-lambda ((g$n1$8833$1IfLeT g$n2$8834$1IfLeT) (* (g$sign$8828$1IfLeT g$n1$8833$1IfLeT) (g$sign$8828$1IfLeT g$n2$8834$1IfLeT) (div (abs g$n1$8833$1IfLeT) (abs g$n2$8834$1IfLeT)))))) (g$remainder$8830$1IfLeT g$remainder$8841$1IfLeT (case-lambda ((g$n1$8835$1IfLeT g$n2$8836$1IfLeT) (* (g$sign$8828$1IfLeT g$n1$8835$1IfLeT) (mod (abs g$n1$8835$1IfLeT) (abs g$n2$8836$1IfLeT)))))) (g$modulo$8831$1IfLeT g$modulo$8842$1IfLeT (case-lambda ((g$n1$8837$1IfLeT g$n2$8838$1IfLeT) (* (g$sign$8828$1IfLeT g$n2$8838$1IfLeT) (mod (* (g$sign$8828$1IfLeT g$n2$8838$1IfLeT) g$n1$8837$1IfLeT) (abs g$n2$8838$1IfLeT))))))) (void))
(library-letrec* ((g$split$8843$1IfLeT g$split$8869$1IfLeT (case-lambda ((g$ls$8846$1IfLeT) ((letrec ((g$loop$8847$1IfLeT (case-lambda ((g$rest$8848$1IfLeT g$left$8849$1IfLeT g$right$8850$1IfLeT) (if (null? g$rest$8848$1IfLeT) (cons g$left$8849$1IfLeT g$right$8850$1IfLeT) (if (null? (cdr g$rest$8848$1IfLeT)) (cons (cons (car g$rest$8848$1IfLeT) g$left$8849$1IfLeT) g$right$8850$1IfLeT) (g$loop$8847$1IfLeT (g$cddr$8072$1IfLeT g$rest$8848$1IfLeT) (cons (car g$rest$8848$1IfLeT) g$left$8849$1IfLeT) (cons (g$cadr$8070$1IfLeT g$rest$8848$1IfLeT) g$right$8850$1IfLeT)))))))) g$loop$8847$1IfLeT) g$ls$8846$1IfLeT '() '())))) (g$reverse-it$8844$1IfLeT g$reverse-it$8870$1IfLeT (case-lambda ((g$head$8851$1IfLeT g$tail$8852$1IfLeT) (if (null? g$head$8851$1IfLeT) g$tail$8852$1IfLeT ((case-lambda ((g$hd$8853$1IfLeT g$tl$8854$1IfLeT) (g$reverse-it$8844$1IfLeT g$tl$8854$1IfLeT (cons g$hd$8853$1IfLeT g$tail$8852$1IfLeT)))) (car g$head$8851$1IfLeT) (cdr g$head$8851$1IfLeT)))))) (g$list-sort$8845$1IfLeT g$list-sort$8871$1IfLeT (case-lambda ((g$precedes?$8855$1IfLeT g$ls$8856$1IfLeT) ((case-lambda ((g$merge$8857$1IfLeT) ((case-lambda (() (if (null? g$ls$8856$1IfLeT) '() ((letrec ((g$helper$8858$1IfLeT (case-lambda ((g$piece$8859$1IfLeT) (if (null? (cdr g$piece$8859$1IfLeT)) g$piece$8859$1IfLeT ((case-lambda ((g$parts$8860$1IfLeT) (g$merge$8857$1IfLeT (g$helper$8858$1IfLeT (car g$parts$8860$1IfLeT)) (g$helper$8858$1IfLeT (cdr g$parts$8860$1IfLeT))))) (g$split$8843$1IfLeT g$piece$8859$1IfLeT))))))) g$helper$8858$1IfLeT) g$ls$8856$1IfLeT))))))) (case-lambda ((g$list-1$8861$1IfLeT g$list-2$8862$1IfLeT) ((letrec ((g$loop$8863$1IfLeT (case-lambda ((g$source-1$8864$1IfLeT g$source-2$8865$1IfLeT g$so-far$8866$1IfLeT) (if (null? g$source-1$8864$1IfLeT) (g$reverse-it$8844$1IfLeT g$so-far$8866$1IfLeT g$source-2$8865$1IfLeT) (if (null? g$source-2$8865$1IfLeT) (g$reverse-it$8844$1IfLeT g$so-far$8866$1IfLeT g$source-1$8864$1IfLeT) ((case-lambda ((g$car-1$8867$1IfLeT g$car-2$8868$1IfLeT) (if (g$precedes?$8855$1IfLeT g$car-2$8868$1IfLeT g$car-1$8867$1IfLeT) (g$loop$8863$1IfLeT g$source-1$8864$1IfLeT (cdr g$source-2$8865$1IfLeT) (cons g$car-2$8868$1IfLeT g$so-far$8866$1IfLeT)) (g$loop$8863$1IfLeT g$source-2$8865$1IfLeT (cdr g$source-1$8864$1IfLeT) (cons g$car-1$8867$1IfLeT g$so-far$8866$1IfLeT))))) (car g$source-1$8864$1IfLeT) (car g$source-2$8865$1IfLeT)))))))) g$loop$8863$1IfLeT) g$list-1$8861$1IfLeT g$list-2$8862$1IfLeT '())))))))) (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* ((g$bitwise-if$8909$1IfLeT g$bitwise-if$8960$1IfLeT (case-lambda ((g$ei1$8917$1IfLeT g$ei2$8918$1IfLeT g$ei3$8919$1IfLeT) (bitwise-ior (bitwise-and g$ei1$8917$1IfLeT g$ei2$8918$1IfLeT) (bitwise-and (bitwise-not g$ei1$8917$1IfLeT) g$ei3$8919$1IfLeT))))) (g$bitwise-copy-bit$8910$1IfLeT g$bitwise-copy-bit$8961$1IfLeT (case-lambda ((g$ei1$8920$1IfLeT g$ei2$8921$1IfLeT g$ei3$8922$1IfLeT) ((case-lambda ((g$mask$8923$1IfLeT) ((case-lambda (() (g$bitwise-if$8909$1IfLeT g$mask$8923$1IfLeT (g$bitwise-arithmetic-shift-left$8913$1IfLeT g$ei3$8922$1IfLeT g$ei2$8921$1IfLeT) g$ei1$8920$1IfLeT)))))) (g$bitwise-arithmetic-shift-left$8913$1IfLeT '1 g$ei2$8921$1IfLeT))))) (g$bitwise-bit-field$8911$1IfLeT g$bitwise-bit-field$8962$1IfLeT (case-lambda ((g$ei1$8924$1IfLeT g$ei2$8925$1IfLeT g$ei3$8926$1IfLeT) ((case-lambda ((g$mask$8927$1IfLeT) (g$bitwise-arithmetic-shift-right$8914$1IfLeT (bitwise-and g$ei1$8924$1IfLeT g$mask$8927$1IfLeT) g$ei2$8925$1IfLeT))) (bitwise-not (g$bitwise-arithmetic-shift-left$8913$1IfLeT '-1 g$ei3$8926$1IfLeT)))))) (g$bitwise-copy-bit-field$8912$1IfLeT g$bitwise-copy-bit-field$8963$1IfLeT (case-lambda ((g$ei1$8928$1IfLeT g$ei2$8929$1IfLeT g$ei3$8930$1IfLeT g$ei4$8931$1IfLeT) ((case-lambda ((g$to$8932$1IfLeT) ((case-lambda ((g$start$8933$1IfLeT) ((case-lambda ((g$end$8934$1IfLeT) ((case-lambda ((g$from$8935$1IfLeT) ((case-lambda ((g$mask1$8936$1IfLeT) ((case-lambda ((g$mask2$8937$1IfLeT) ((case-lambda ((g$mask$8938$1IfLeT) ((case-lambda (() (g$bitwise-if$8909$1IfLeT g$mask$8938$1IfLeT (g$bitwise-arithmetic-shift-left$8913$1IfLeT g$from$8935$1IfLeT g$start$8933$1IfLeT) g$to$8932$1IfLeT)))))) (bitwise-and g$mask1$8936$1IfLeT g$mask2$8937$1IfLeT)))) (bitwise-not (g$bitwise-arithmetic-shift-left$8913$1IfLeT '-1 g$end$8934$1IfLeT))))) (g$bitwise-arithmetic-shift-left$8913$1IfLeT '-1 g$start$8933$1IfLeT)))) g$ei4$8931$1IfLeT))) g$ei3$8930$1IfLeT))) g$ei2$8929$1IfLeT))) g$ei1$8928$1IfLeT)))) (g$bitwise-arithmetic-shift-left$8913$1IfLeT g$bitwise-arithmetic-shift-left$8964$1IfLeT (case-lambda ((g$ei1$8939$1IfLeT g$ei2$8940$1IfLeT) (bitwise-arithmetic-shift g$ei1$8939$1IfLeT g$ei2$8940$1IfLeT)))) (g$bitwise-arithmetic-shift-right$8914$1IfLeT g$bitwise-arithmetic-shift-right$8965$1IfLeT (case-lambda ((g$ei1$8941$1IfLeT g$ei2$8942$1IfLeT) (bitwise-arithmetic-shift g$ei1$8941$1IfLeT (- g$ei2$8942$1IfLeT))))) (g$bitwise-rotate-bit-field$8915$1IfLeT g$bitwise-rotate-bit-field$8966$1IfLeT (case-lambda ((g$ei1$8943$1IfLeT g$ei2$8944$1IfLeT g$ei3$8945$1IfLeT g$ei4$8946$1IfLeT) ((case-lambda ((g$n$8947$1IfLeT) ((case-lambda ((g$start$8948$1IfLeT) ((case-lambda ((g$end$8949$1IfLeT) ((case-lambda ((g$count$8950$1IfLeT) ((case-lambda ((g$width$8951$1IfLeT) ((case-lambda (() (if (positive? g$width$8951$1IfLeT) ((case-lambda ((g$count$8952$1IfLeT) ((case-lambda ((g$field0$8953$1IfLeT) ((case-lambda ((g$field1$8954$1IfLeT) ((case-lambda ((g$field2$8955$1IfLeT) ((case-lambda ((g$field$8956$1IfLeT) ((case-lambda (() (g$bitwise-copy-bit-field$8912$1IfLeT g$n$8947$1IfLeT g$start$8948$1IfLeT g$end$8949$1IfLeT g$field$8956$1IfLeT)))))) (bitwise-ior g$field1$8954$1IfLeT g$field2$8955$1IfLeT)))) (g$bitwise-arithmetic-shift-right$8914$1IfLeT g$field0$8953$1IfLeT (- g$width$8951$1IfLeT g$count$8952$1IfLeT))))) (g$bitwise-arithmetic-shift-left$8913$1IfLeT g$field0$8953$1IfLeT g$count$8952$1IfLeT)))) (g$bitwise-bit-field$8911$1IfLeT g$n$8947$1IfLeT g$start$8948$1IfLeT g$end$8949$1IfLeT)))) (mod g$count$8950$1IfLeT g$width$8951$1IfLeT)) g$n$8947$1IfLeT)))))) (- g$end$8949$1IfLeT g$start$8948$1IfLeT)))) g$ei4$8946$1IfLeT))) g$ei3$8945$1IfLeT))) g$ei2$8944$1IfLeT))) g$ei1$8943$1IfLeT)))) (g$bitwise-reverse-bit-field$8916$1IfLeT g$bitwise-reverse-bit-field$8967$1IfLeT (case-lambda ((g$ei1$8957$1IfLeT g$ei2$8958$1IfLeT g$ei3$8959$1IfLeT) 'TODO)))) (void))
(library-letrec* ((g$fxif$8968$1IfLeT g$fxif$9015$1IfLeT (case-lambda ((g$fx1$8975$1IfLeT g$fx2$8976$1IfLeT g$fx3$8977$1IfLeT) (fxior (fxand g$fx1$8975$1IfLeT g$fx2$8976$1IfLeT) (fxand (fxnot g$fx1$8975$1IfLeT) g$fx3$8977$1IfLeT))))) (g$fxcopy-bit$8969$1IfLeT g$fxcopy-bit$9016$1IfLeT (case-lambda ((g$fx1$8978$1IfLeT g$fx2$8979$1IfLeT g$fx3$8980$1IfLeT) ((case-lambda ((g$mask$8981$1IfLeT) ((case-lambda (() (g$fxif$8968$1IfLeT g$mask$8981$1IfLeT (g$fxarithmetic-shift-left$8972$1IfLeT g$fx3$8980$1IfLeT g$fx2$8979$1IfLeT) g$fx1$8978$1IfLeT)))))) (g$fxarithmetic-shift-left$8972$1IfLeT '1 g$fx2$8979$1IfLeT))))) (g$fxbit-field$8970$1IfLeT g$fxbit-field$9017$1IfLeT (case-lambda ((g$fx1$8982$1IfLeT g$fx2$8983$1IfLeT g$fx3$8984$1IfLeT) ((case-lambda ((g$mask$8985$1IfLeT) ((case-lambda (() (g$fxarithmetic-shift-right$8973$1IfLeT (fxand g$fx1$8982$1IfLeT g$mask$8985$1IfLeT) g$fx2$8983$1IfLeT)))))) (fxnot (g$fxarithmetic-shift-left$8972$1IfLeT '-1 g$fx3$8984$1IfLeT)))))) (g$fxcopy-bit-field$8971$1IfLeT g$fxcopy-bit-field$9018$1IfLeT (case-lambda ((g$fx1$8986$1IfLeT g$fx2$8987$1IfLeT g$fx3$8988$1IfLeT g$fx4$8989$1IfLeT) ((case-lambda ((g$to$8990$1IfLeT) ((case-lambda ((g$start$8991$1IfLeT) ((case-lambda ((g$end$8992$1IfLeT) ((case-lambda ((g$from$8993$1IfLeT) ((case-lambda ((g$mask1$8994$1IfLeT) ((case-lambda ((g$mask2$8995$1IfLeT) ((case-lambda ((g$mask$8996$1IfLeT) ((case-lambda (() (g$fxif$8968$1IfLeT g$mask$8996$1IfLeT (g$fxarithmetic-shift-left$8972$1IfLeT g$from$8993$1IfLeT g$start$8991$1IfLeT) g$to$8990$1IfLeT)))))) (fxand g$mask1$8994$1IfLeT g$mask2$8995$1IfLeT)))) (fxnot (g$fxarithmetic-shift-left$8972$1IfLeT '-1 g$end$8992$1IfLeT))))) (g$fxarithmetic-shift-left$8972$1IfLeT '-1 g$start$8991$1IfLeT)))) g$fx4$8989$1IfLeT))) g$fx3$8988$1IfLeT))) g$fx2$8987$1IfLeT))) g$fx1$8986$1IfLeT)))) (g$fxarithmetic-shift-left$8972$1IfLeT g$fxarithmetic-shift-left$9019$1IfLeT (case-lambda ((g$fx1$8997$1IfLeT g$fx2$8998$1IfLeT) (fxarithmetic-shift g$fx1$8997$1IfLeT g$fx2$8998$1IfLeT)))) (g$fxarithmetic-shift-right$8973$1IfLeT g$fxarithmetic-shift-right$9020$1IfLeT (case-lambda ((g$fx1$8999$1IfLeT g$fx2$9000$1IfLeT) (fxarithmetic-shift g$fx1$8999$1IfLeT (- g$fx2$9000$1IfLeT))))) (g$fxrotate-bit-field$8974$1IfLeT g$fxrotate-bit-field$9021$1IfLeT (case-lambda ((g$fx1$9001$1IfLeT g$fx2$9002$1IfLeT g$fx3$9003$1IfLeT g$fx4$9004$1IfLeT) ((case-lambda ((g$n$9005$1IfLeT) ((case-lambda ((g$start$9006$1IfLeT) ((case-lambda ((g$end$9007$1IfLeT) ((case-lambda ((g$count$9008$1IfLeT) ((case-lambda ((g$width$9009$1IfLeT) ((case-lambda (() (if (positive? g$width$9009$1IfLeT) ((case-lambda ((g$count$9010$1IfLeT) ((case-lambda ((g$field0$9011$1IfLeT) ((case-lambda ((g$field1$9012$1IfLeT) ((case-lambda ((g$field2$9013$1IfLeT) ((case-lambda ((g$field$9014$1IfLeT) ((case-lambda (() (g$fxcopy-bit-field$8971$1IfLeT g$n$9005$1IfLeT g$start$9006$1IfLeT g$end$9007$1IfLeT g$field$9014$1IfLeT)))))) (fxior g$field1$9012$1IfLeT g$field2$9013$1IfLeT)))) (g$fxarithmetic-shift-right$8973$1IfLeT g$field0$9011$1IfLeT (- g$width$9009$1IfLeT g$count$9010$1IfLeT))))) (g$fxarithmetic-shift-left$8972$1IfLeT g$field0$9011$1IfLeT g$count$9010$1IfLeT)))) (g$fxbit-field$8970$1IfLeT g$n$9005$1IfLeT g$start$9006$1IfLeT g$end$9007$1IfLeT)))) (mod g$count$9008$1IfLeT g$width$9009$1IfLeT)) g$n$9005$1IfLeT)))))) (- g$end$9007$1IfLeT g$start$9006$1IfLeT)))) g$fx4$9004$1IfLeT))) g$fx3$9003$1IfLeT))) g$fx2$9002$1IfLeT))) g$fx1$9001$1IfLeT))))) (void))
(library-letrec* ((g$8767$9022$1IfLeT g$8767$9034$1IfLeT (make-record-type-descriptor '&no-infinities &implementation-restriction-rtd 'g$8770$1IfLeT '#f '#f '#())) (g$8769$9023$1IfLeT g$8769$9035$1IfLeT '#f) (g$8768$9024$1IfLeT g$8768$9036$1IfLeT (make-record-constructor-descriptor g$8767$9022$1IfLeT &implementation-restriction-rcd g$8769$9023$1IfLeT)) (g$8766$9025$1IfLeT g$8766$9037$1IfLeT (record-predicate g$8767$9022$1IfLeT)) (g$make-no-infinities-violation$9026$1IfLeT g$make-no-infinities-violation$9038$1IfLeT (record-constructor g$8768$9024$1IfLeT)) (g$no-infinities-violation?$9027$1IfLeT g$no-infinities-violation?$9039$1IfLeT (condition-predicate g$8767$9022$1IfLeT)) (g$8779$9028$1IfLeT g$8779$9040$1IfLeT (make-record-type-descriptor '&no-nans &implementation-restriction-rtd 'g$8782$1IfLeT '#f '#f '#())) (g$8781$9029$1IfLeT g$8781$9041$1IfLeT '#f) (g$8780$9030$1IfLeT g$8780$9042$1IfLeT (make-record-constructor-descriptor g$8779$9028$1IfLeT &implementation-restriction-rcd g$8781$9029$1IfLeT)) (g$8778$9031$1IfLeT g$8778$9043$1IfLeT (record-predicate g$8779$9028$1IfLeT)) (g$make-no-nans-violation$9032$1IfLeT g$make-no-nans-violation$9044$1IfLeT (record-constructor g$8780$9030$1IfLeT)) (g$no-nans-violation?$9033$1IfLeT g$no-nans-violation?$9045$1IfLeT (condition-predicate g$8779$9028$1IfLeT))) (void))
(library-letrec* ((g$8792$9046$1IfLeT g$8792$9126$1IfLeT (make-record-type-descriptor '&i/o &error-rtd 'g$8795$1IfLeT '#f '#f '#())) (g$8794$9047$1IfLeT g$8794$9127$1IfLeT '#f) (g$8793$9048$1IfLeT g$8793$9128$1IfLeT (make-record-constructor-descriptor g$8792$9046$1IfLeT &error-rcd g$8794$9047$1IfLeT)) (g$8791$9049$1IfLeT g$8791$9129$1IfLeT (record-predicate g$8792$9046$1IfLeT)) (g$make-i/o-error$9050$1IfLeT g$make-i/o-error$9130$1IfLeT (record-constructor g$8793$9048$1IfLeT)) (g$i/o-error?$9051$1IfLeT g$i/o-error?$9131$1IfLeT (condition-predicate g$8792$9046$1IfLeT)) (g$8804$9052$1IfLeT g$8804$9132$1IfLeT (make-record-type-descriptor '&i/o-read g$8792$9046$1IfLeT 'g$8807$1IfLeT '#f '#f '#())) (g$8806$9053$1IfLeT g$8806$9133$1IfLeT '#f) (g$8805$9054$1IfLeT g$8805$9134$1IfLeT (make-record-constructor-descriptor g$8804$9052$1IfLeT g$8793$9048$1IfLeT g$8806$9053$1IfLeT)) (g$8803$9055$1IfLeT g$8803$9135$1IfLeT (record-predicate g$8804$9052$1IfLeT)) (g$make-i/o-read-error$9056$1IfLeT g$make-i/o-read-error$9136$1IfLeT (record-constructor g$8805$9054$1IfLeT)) (g$i/o-read-error?$9057$1IfLeT g$i/o-read-error?$9137$1IfLeT (condition-predicate g$8804$9052$1IfLeT)) (g$8816$9058$1IfLeT g$8816$9138$1IfLeT (make-record-type-descriptor '&i/o-write g$8792$9046$1IfLeT 'g$8819$1IfLeT '#f '#f '#())) (g$8818$9059$1IfLeT g$8818$9139$1IfLeT '#f) (g$8817$9060$1IfLeT g$8817$9140$1IfLeT (make-record-constructor-descriptor g$8816$9058$1IfLeT g$8793$9048$1IfLeT g$8818$9059$1IfLeT)) (g$8815$9061$1IfLeT g$8815$9141$1IfLeT (record-predicate g$8816$9058$1IfLeT)) (g$make-i/o-write-error$9062$1IfLeT g$make-i/o-write-error$9142$1IfLeT (record-constructor g$8817$9060$1IfLeT)) (g$i/o-write-error?$9063$1IfLeT g$i/o-write-error?$9143$1IfLeT (condition-predicate g$8816$9058$1IfLeT)) (g$8829$9064$1IfLeT g$8829$9144$1IfLeT (make-record-type-descriptor '&i/o-invalid-position g$8792$9046$1IfLeT 'g$8832$1IfLeT '#f '#f '#((immutable position)))) (g$8831$9065$1IfLeT g$8831$9145$1IfLeT '#f) (g$8830$9066$1IfLeT g$8830$9146$1IfLeT (make-record-constructor-descriptor g$8829$9064$1IfLeT g$8793$9048$1IfLeT g$8831$9065$1IfLeT)) (g$8828$9067$1IfLeT g$8828$9147$1IfLeT (record-predicate g$8829$9064$1IfLeT)) (g$make-i/o-invalid-position-error$9068$1IfLeT g$make-i/o-invalid-position-error$9148$1IfLeT (record-constructor g$8830$9066$1IfLeT)) (g$8827$9069$1IfLeT g$8827$9149$1IfLeT (record-accessor g$8829$9064$1IfLeT '0)) (g$i/o-invalid-position-error?$9070$1IfLeT g$i/o-invalid-position-error?$9150$1IfLeT (condition-predicate g$8829$9064$1IfLeT)) (g$i/o-error-position$9071$1IfLeT g$i/o-error-position$9151$1IfLeT (condition-accessor g$8829$9064$1IfLeT g$8827$9069$1IfLeT)) (g$8844$9072$1IfLeT g$8844$9152$1IfLeT (make-record-type-descriptor '&i/o-filename g$8792$9046$1IfLeT 'g$8847$1IfLeT '#f '#f '#((immutable filename)))) (g$8846$9073$1IfLeT g$8846$9153$1IfLeT '#f) (g$8845$9074$1IfLeT g$8845$9154$1IfLeT (make-record-constructor-descriptor g$8844$9072$1IfLeT g$8793$9048$1IfLeT g$8846$9073$1IfLeT)) (g$8843$9075$1IfLeT g$8843$9155$1IfLeT (record-predicate g$8844$9072$1IfLeT)) (g$make-i/o-filename-error$9076$1IfLeT g$make-i/o-filename-error$9156$1IfLeT (record-constructor g$8845$9074$1IfLeT)) (g$8842$9077$1IfLeT g$8842$9157$1IfLeT (record-accessor g$8844$9072$1IfLeT '0)) (g$i/o-filename-error?$9078$1IfLeT g$i/o-filename-error?$9158$1IfLeT (condition-predicate g$8844$9072$1IfLeT)) (g$i/o-error-filename$9079$1IfLeT g$i/o-error-filename$9159$1IfLeT (condition-accessor g$8844$9072$1IfLeT g$8842$9077$1IfLeT)) (g$8858$9080$1IfLeT g$8858$9160$1IfLeT (make-record-type-descriptor '&i/o-file-protection g$8792$9046$1IfLeT 'g$8861$1IfLeT '#f '#f '#())) (g$8860$9081$1IfLeT g$8860$9161$1IfLeT '#f) (g$8859$9082$1IfLeT g$8859$9162$1IfLeT (make-record-constructor-descriptor g$8858$9080$1IfLeT g$8793$9048$1IfLeT g$8860$9081$1IfLeT)) (g$8857$9083$1IfLeT g$8857$9163$1IfLeT (record-predicate g$8858$9080$1IfLeT)) (g$make-i/o-file-protection-error$9084$1IfLeT g$make-i/o-file-protection-error$9164$1IfLeT (record-constructor g$8859$9082$1IfLeT)) (g$i/o-file-protection-error?$9085$1IfLeT g$i/o-file-protection-error?$9165$1IfLeT (condition-predicate g$8858$9080$1IfLeT)) (g$8870$9086$1IfLeT g$8870$9166$1IfLeT (make-record-type-descriptor '&i/o-file-is-read-only g$8858$9080$1IfLeT 'g$8873$1IfLeT '#f '#f '#())) (g$8872$9087$1IfLeT g$8872$9167$1IfLeT '#f) (g$8871$9088$1IfLeT g$8871$9168$1IfLeT (make-record-constructor-descriptor g$8870$9086$1IfLeT g$8859$9082$1IfLeT g$8872$9087$1IfLeT)) (g$8869$9089$1IfLeT g$8869$9169$1IfLeT (record-predicate g$8870$9086$1IfLeT)) (g$make-i/o-file-is-read-only-error$9090$1IfLeT g$make-i/o-file-is-read-only-error$9170$1IfLeT (record-constructor g$8871$9088$1IfLeT)) (g$i/o-file-is-read-only-error?$9091$1IfLeT g$i/o-file-is-read-only-error?$9171$1IfLeT (condition-predicate g$8870$9086$1IfLeT)) (g$8882$9092$1IfLeT g$8882$9172$1IfLeT (make-record-type-descriptor '&i/o-file-already-exists g$8844$9072$1IfLeT 'g$8885$1IfLeT '#f '#f '#())) (g$8884$9093$1IfLeT g$8884$9173$1IfLeT '#f) (g$8883$9094$1IfLeT g$8883$9174$1IfLeT (make-record-constructor-descriptor g$8882$9092$1IfLeT g$8845$9074$1IfLeT g$8884$9093$1IfLeT)) (g$8881$9095$1IfLeT g$8881$9175$1IfLeT (record-predicate g$8882$9092$1IfLeT)) (g$make-i/o-file-already-exists-error$9096$1IfLeT g$make-i/o-file-already-exists-error$9176$1IfLeT (record-constructor g$8883$9094$1IfLeT)) (g$i/o-file-already-exists-error?$9097$1IfLeT g$i/o-file-already-exists-error?$9177$1IfLeT (condition-predicate g$8882$9092$1IfLeT)) (g$8894$9098$1IfLeT g$8894$9178$1IfLeT (make-record-type-descriptor '&i/o-file-does-not-exist g$8844$9072$1IfLeT 'g$8897$1IfLeT '#f '#f '#())) (g$8896$9099$1IfLeT g$8896$9179$1IfLeT '#f) (g$8895$9100$1IfLeT g$8895$9180$1IfLeT (make-record-constructor-descriptor g$8894$9098$1IfLeT g$8845$9074$1IfLeT g$8896$9099$1IfLeT)) (g$8893$9101$1IfLeT g$8893$9181$1IfLeT (record-predicate g$8894$9098$1IfLeT)) (g$make-i/o-file-does-not-exist-error$9102$1IfLeT g$make-i/o-file-does-not-exist-error$9182$1IfLeT (record-constructor g$8895$9100$1IfLeT)) (g$i/o-file-does-not-exist-error?$9103$1IfLeT g$i/o-file-does-not-exist-error?$9183$1IfLeT (condition-predicate g$8894$9098$1IfLeT)) (g$8907$9104$1IfLeT g$8907$9184$1IfLeT (make-record-type-descriptor '&i/o-port g$8792$9046$1IfLeT 'g$8910$1IfLeT '#f '#f '#((immutable port)))) (g$8909$9105$1IfLeT g$8909$9185$1IfLeT '#f) (g$8908$9106$1IfLeT g$8908$9186$1IfLeT (make-record-constructor-descriptor g$8907$9104$1IfLeT g$8793$9048$1IfLeT g$8909$9105$1IfLeT)) (g$8906$9107$1IfLeT g$8906$9187$1IfLeT (record-predicate g$8907$9104$1IfLeT)) (g$make-i/o-port-error$9108$1IfLeT g$make-i/o-port-error$9188$1IfLeT (record-constructor g$8908$9106$1IfLeT)) (g$8905$9109$1IfLeT g$8905$9189$1IfLeT (record-accessor g$8907$9104$1IfLeT '0)) (g$i/o-port-error?$9110$1IfLeT g$i/o-port-error?$9190$1IfLeT (condition-predicate g$8907$9104$1IfLeT)) (g$i/o-error-port$9111$1IfLeT g$i/o-error-port$9191$1IfLeT (condition-accessor g$8907$9104$1IfLeT g$8905$9109$1IfLeT)) (g$8921$9112$1IfLeT g$8921$9192$1IfLeT (make-record-type-descriptor '&i/o-decoding g$8907$9104$1IfLeT 'g$8924$1IfLeT '#f '#f '#())) (g$8923$9113$1IfLeT g$8923$9193$1IfLeT '#f) (g$8922$9114$1IfLeT g$8922$9194$1IfLeT (make-record-constructor-descriptor g$8921$9112$1IfLeT g$8908$9106$1IfLeT g$8923$9113$1IfLeT)) (g$8920$9115$1IfLeT g$8920$9195$1IfLeT (record-predicate g$8921$9112$1IfLeT)) (g$make-i/o-decoding-error$9116$1IfLeT g$make-i/o-decoding-error$9196$1IfLeT (record-constructor g$8922$9114$1IfLeT)) (g$i/o-decoding-error?$9117$1IfLeT g$i/o-decoding-error?$9197$1IfLeT (condition-predicate g$8921$9112$1IfLeT)) (g$8934$9118$1IfLeT g$8934$9198$1IfLeT (make-record-type-descriptor '&i/o-encoding g$8907$9104$1IfLeT 'g$8937$1IfLeT '#f '#f '#((immutable char)))) (g$8936$9119$1IfLeT g$8936$9199$1IfLeT '#f) (g$8935$9120$1IfLeT g$8935$9200$1IfLeT (make-record-constructor-descriptor g$8934$9118$1IfLeT g$8908$9106$1IfLeT g$8936$9119$1IfLeT)) (g$8933$9121$1IfLeT g$8933$9201$1IfLeT (record-predicate g$8934$9118$1IfLeT)) (g$make-i/o-encoding-error$9122$1IfLeT g$make-i/o-encoding-error$9202$1IfLeT (record-constructor g$8935$9120$1IfLeT)) (g$8932$9123$1IfLeT g$8932$9203$1IfLeT (record-accessor g$8934$9118$1IfLeT '0)) (g$i/o-encoding-error?$9124$1IfLeT g$i/o-encoding-error?$9204$1IfLeT (condition-predicate g$8934$9118$1IfLeT)) (g$i/o-encoding-error-char$9125$1IfLeT g$i/o-encoding-error-char$9205$1IfLeT (condition-accessor g$8934$9118$1IfLeT g$8932$9123$1IfLeT))) (void))
(library-letrec* ((g$get-output-string$9206$1IfLeT g$get-output-string$9211$1IfLeT (case-lambda ((g$port$9209$1IfLeT) (clr-call-internal 'system.io.stringwriter 'tostring g$port$9209$1IfLeT)))) (g$open-output-string$9207$1IfLeT g$open-output-string$9212$1IfLeT (case-lambda (() (clr-new-internal 'system.io.stringwriter)))) (g$open-string-output-port$9208$1IfLeT g$open-string-output-port$9213$1IfLeT (case-lambda (() ((case-lambda ((g$p$9210$1IfLeT) (values g$p$9210$1IfLeT (case-lambda (() (g$get-output-string$9206$1IfLeT g$p$9210$1IfLeT)))))) (g$open-output-string$9207$1IfLeT)))))) (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* () (void))
(library-letrec* ((g$dofmt$9214$1IfLeT g$dofmt$9236$1IfLeT (case-lambda ((g$p$9218$1IfLeT g$cntl$9219$1IfLeT g$args$9220$1IfLeT) ((case-lambda ((g$nmax$9221$1IfLeT) ((letrec ((g$loop$9222$1IfLeT (case-lambda ((g$n$9223$1IfLeT g$a$9224$1IfLeT) (if (fx<=? g$n$9223$1IfLeT g$nmax$9221$1IfLeT) ((case-lambda ((g$c$9225$1IfLeT) (if (if (char=? g$c$9225$1IfLeT '#\~) (begin '#f (fx<? g$n$9223$1IfLeT g$nmax$9221$1IfLeT)) '#f) ((case-lambda ((g$t$9226$1IfLeT) (if (memv g$t$9226$1IfLeT '(#\a)) (begin (display (car g$a$9224$1IfLeT) g$p$9218$1IfLeT) (g$loop$9222$1IfLeT (fx+ g$n$9223$1IfLeT '2) (cdr g$a$9224$1IfLeT))) (if (memv g$t$9226$1IfLeT '(#\s)) (begin (write (car g$a$9224$1IfLeT) g$p$9218$1IfLeT) (g$loop$9222$1IfLeT (fx+ g$n$9223$1IfLeT '2) (cdr g$a$9224$1IfLeT))) (if (memv g$t$9226$1IfLeT '(#\b)) (begin (write (number->string (car g$a$9224$1IfLeT) '2) g$p$9218$1IfLeT) (g$loop$9222$1IfLeT (fx+ g$n$9223$1IfLeT '2) (cdr g$a$9224$1IfLeT))) (if (memv g$t$9226$1IfLeT '(#\o)) (begin (write (number->string (car g$a$9224$1IfLeT) '8) g$p$9218$1IfLeT) (g$loop$9222$1IfLeT (fx+ g$n$9223$1IfLeT '2) (cdr g$a$9224$1IfLeT))) (if (memv g$t$9226$1IfLeT '(#\x)) (begin (write (number->string (car g$a$9224$1IfLeT) '16) g$p$9218$1IfLeT) (g$loop$9222$1IfLeT (fx+ g$n$9223$1IfLeT '2) (cdr g$a$9224$1IfLeT))) (if (memv g$t$9226$1IfLeT '(#\d)) (begin (write (number->string (car g$a$9224$1IfLeT) '10) g$p$9218$1IfLeT) (g$loop$9222$1IfLeT (fx+ g$n$9223$1IfLeT '2) (cdr g$a$9224$1IfLeT))) (if (memv g$t$9226$1IfLeT '(#\~)) (begin (write-char '#\~ g$p$9218$1IfLeT) (g$loop$9222$1IfLeT (fx+ g$n$9223$1IfLeT '2) g$a$9224$1IfLeT)) (begin (write-char g$c$9225$1IfLeT g$p$9218$1IfLeT) (g$loop$9222$1IfLeT (fx+ g$n$9223$1IfLeT '1) g$a$9224$1IfLeT))))))))))) (string-ref g$cntl$9219$1IfLeT (fx+ g$n$9223$1IfLeT '1))) (begin (write-char g$c$9225$1IfLeT g$p$9218$1IfLeT) (g$loop$9222$1IfLeT (fx+ g$n$9223$1IfLeT '1) g$a$9224$1IfLeT))))) (string-ref g$cntl$9219$1IfLeT g$n$9223$1IfLeT)) (void)))))) g$loop$9222$1IfLeT) '0 g$args$9220$1IfLeT))) (fx- (string-length g$cntl$9219$1IfLeT) '1))))) (g$printf$9215$1IfLeT g$printf$9237$1IfLeT (case-lambda ((g$control$9227$1IfLeT . g$args$9228$1IfLeT) (g$dofmt$9214$1IfLeT (current-output-port) g$control$9227$1IfLeT g$args$9228$1IfLeT)))) (g$fprintf$9216$1IfLeT g$fprintf$9238$1IfLeT (case-lambda ((g$p$9229$1IfLeT g$control$9230$1IfLeT . g$args$9231$1IfLeT) (g$dofmt$9214$1IfLeT g$p$9229$1IfLeT g$control$9230$1IfLeT g$args$9231$1IfLeT)))) (g$format$9217$1IfLeT g$format$9239$1IfLeT (case-lambda ((g$control$9232$1IfLeT . g$args$9233$1IfLeT) (call-with-values g$open-string-output-port$9213$1IfLeT (case-lambda ((g$p$9234$1IfLeT g$c$9235$1IfLeT) (begin (g$dofmt$9214$1IfLeT g$p$9234$1IfLeT g$control$9232$1IfLeT g$args$9233$1IfLeT) (g$c$9235$1IfLeT))))))))) (void))
(library-letrec* ((g$load-precompiled-library$9240$1IfLeT g$load-precompiled-library$9319$1IfLeT (case-lambda ((g$filename$9310$1IfLeT g$sk$9311$1IfLeT) '#f))) (g$make-parameter$9241$1IfLeT g$make-parameter$9320$1IfLeT (case-lambda ((g$x$9312$1IfLeT) (g$make-parameter$9241$1IfLeT g$x$9312$1IfLeT (case-lambda ((g$x$9313$1IfLeT) g$x$9313$1IfLeT)))) ((g$x$9314$1IfLeT g$fender$9315$1IfLeT) (begin (if (procedure? g$fender$9315$1IfLeT) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((case-lambda ((g$x$9316$1IfLeT) (case-lambda (() g$x$9316$1IfLeT) ((g$v$9317$1IfLeT) (set! g$x$9316$1IfLeT (g$fender$9315$1IfLeT g$v$9317$1IfLeT)))))) (g$fender$9315$1IfLeT g$x$9314$1IfLeT)))))) (g$file-options-spec$9309$1IfLeT g$file-options-spec$9321$1IfLeT (case-lambda ((g$x$9318$1IfLeT) g$x$9318$1IfLeT)))) (void))
(library-letrec* ((g$current-primitive-locations$9322$1IfLeT g$current-primitive-locations$9362$1IfLeT (g$make-parameter$9320$1IfLeT (case-lambda ((g$x$9329$1IfLeT) '#f)) (case-lambda ((g$p$9330$1IfLeT) (begin (if (procedure? g$p$9330$1IfLeT) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) g$p$9330$1IfLeT))))) (g$mutable?$9323$1IfLeT g$mutable?$9363$1IfLeT (case-lambda ((g$x$9331$1IfLeT) (letrec* ((g$simple?$9332$1IfLeT (case-lambda ((g$x$9333$1IfLeT) ((case-lambda ((g$t$9334$1IfLeT) (if g$t$9334$1IfLeT g$t$9334$1IfLeT ((case-lambda ((g$t$9335$1IfLeT) (if g$t$9335$1IfLeT g$t$9335$1IfLeT ((case-lambda ((g$t$9336$1IfLeT) (if g$t$9336$1IfLeT g$t$9336$1IfLeT ((case-lambda ((g$t$9337$1IfLeT) (if g$t$9337$1IfLeT g$t$9337$1IfLeT ((case-lambda ((g$t$9338$1IfLeT) (if g$t$9338$1IfLeT g$t$9338$1IfLeT ((case-lambda ((g$t$9339$1IfLeT) (if g$t$9339$1IfLeT g$t$9339$1IfLeT (begin '#f (number? g$x$9333$1IfLeT))))) (bytevector? g$x$9333$1IfLeT))))) (string? g$x$9333$1IfLeT))))) (boolean? g$x$9333$1IfLeT))))) (symbol? g$x$9333$1IfLeT))))) (char? g$x$9333$1IfLeT))))) (null? g$x$9333$1IfLeT)))))) (not (g$simple?$9332$1IfLeT g$x$9331$1IfLeT)))))) (g$rewriter$9324$1IfLeT g$rewriter$9364$1IfLeT (case-lambda ((g$quote-hack?$9340$1IfLeT) (letrec* ((g$f$9341$1IfLeT (case-lambda ((g$x$9342$1IfLeT) (if (pair? g$x$9342$1IfLeT) ((case-lambda ((g$t$9343$1IfLeT) (if (memv g$t$9343$1IfLeT '(quote)) (if (if g$quote-hack?$9340$1IfLeT (begin '#f (g$mutable?$9323$1IfLeT (g$cadr$8070$1IfLeT g$x$9342$1IfLeT))) '#f) ((case-lambda ((g$g$9356$1IfLeT) (begin (set-symbol-value! g$g$9356$1IfLeT (g$cadr$8070$1IfLeT g$x$9342$1IfLeT)) g$g$9356$1IfLeT))) (gensym)) g$x$9342$1IfLeT) (if (memv g$t$9343$1IfLeT '(case-lambda)) (cons 'case-lambda (map (case-lambda ((g$x$9355$1IfLeT) (cons (car g$x$9355$1IfLeT) (map g$f$9341$1IfLeT (cdr g$x$9355$1IfLeT))))) (cdr g$x$9342$1IfLeT))) (if (memv g$t$9343$1IfLeT '(lambda)) (g$cons*$8492$1IfLeT 'lambda (g$cadr$8070$1IfLeT g$x$9342$1IfLeT) (map g$f$9341$1IfLeT (g$cddr$8072$1IfLeT g$x$9342$1IfLeT))) (if (memv g$t$9343$1IfLeT '(letrec)) ((case-lambda ((g$bindings$9351$1IfLeT g$body*$9352$1IfLeT) ((case-lambda ((g$lhs*$9353$1IfLeT g$rhs*$9354$1IfLeT) (g$cons*$8492$1IfLeT 'letrec (map list g$lhs*$9353$1IfLeT (map g$f$9341$1IfLeT g$rhs*$9354$1IfLeT)) (map g$f$9341$1IfLeT g$body*$9352$1IfLeT)))) (map car g$bindings$9351$1IfLeT) (map g$cadr$8070$1IfLeT g$bindings$9351$1IfLeT)))) (g$cadr$8070$1IfLeT g$x$9342$1IfLeT) (g$cddr$8072$1IfLeT g$x$9342$1IfLeT)) (if (memv g$t$9343$1IfLeT '(letrec*)) ((case-lambda ((g$bindings$9347$1IfLeT g$body*$9348$1IfLeT) ((case-lambda ((g$lhs*$9349$1IfLeT g$rhs*$9350$1IfLeT) (g$cons*$8492$1IfLeT 'letrec* (map list g$lhs*$9349$1IfLeT (map g$f$9341$1IfLeT g$rhs*$9350$1IfLeT)) (map g$f$9341$1IfLeT g$body*$9348$1IfLeT)))) (map car g$bindings$9347$1IfLeT) (map g$cadr$8070$1IfLeT g$bindings$9347$1IfLeT)))) (g$cadr$8070$1IfLeT g$x$9342$1IfLeT) (g$cddr$8072$1IfLeT g$x$9342$1IfLeT)) (if (memv g$t$9343$1IfLeT '(begin)) (cons 'begin (map g$f$9341$1IfLeT (cdr g$x$9342$1IfLeT))) (if (memv g$t$9343$1IfLeT '(set!)) (list 'set! (g$cadr$8070$1IfLeT g$x$9342$1IfLeT) (g$f$9341$1IfLeT (g$caddr$8076$1IfLeT g$x$9342$1IfLeT))) (if (memv g$t$9343$1IfLeT '(primitive)) ((case-lambda ((g$op$9344$1IfLeT) ((case-lambda ((g$t$9345$1IfLeT) (if g$t$9345$1IfLeT ((case-lambda ((g$loc$9346$1IfLeT) g$loc$9346$1IfLeT)) g$t$9345$1IfLeT) g$op$9344$1IfLeT))) ((g$current-primitive-locations$9322$1IfLeT) g$op$9344$1IfLeT)))) (g$cadr$8070$1IfLeT g$x$9342$1IfLeT)) (if (memv g$t$9343$1IfLeT '(define)) g$x$9342$1IfLeT (if (list? g$x$9342$1IfLeT) (map g$f$9341$1IfLeT g$x$9342$1IfLeT) (error 'rewrite '"invalid form ~s ~s" g$x$9342$1IfLeT (list? g$x$9342$1IfLeT)))))))))))))) (car g$x$9342$1IfLeT)) g$x$9342$1IfLeT))))) g$f$9341$1IfLeT)))) (g$need-quote-hack?$9325$1IfLeT g$need-quote-hack?$9365$1IfLeT ((case-lambda ((g$x$9357$1IfLeT) (not (eq? (eval-core (list 'quote g$x$9357$1IfLeT)) (eval-core (list 'quote g$x$9357$1IfLeT)))))) (cons '1 '2))) (g$expanded->core$9326$1IfLeT g$expanded->core$9366$1IfLeT (case-lambda ((g$x$9358$1IfLeT) ((g$rewriter$9324$1IfLeT g$need-quote-hack?$9325$1IfLeT) g$x$9358$1IfLeT)))) (g$compile-core-expr$9327$1IfLeT g$compile-core-expr$9367$1IfLeT (case-lambda ((g$x$9359$1IfLeT) ((g$rewriter$9324$1IfLeT '#f) g$x$9359$1IfLeT)))) (g$compile-core-expr-to-port$9328$1IfLeT g$compile-core-expr-to-port$9368$1IfLeT (case-lambda ((g$x$9360$1IfLeT g$p$9361$1IfLeT) (write ((g$rewriter$9324$1IfLeT '#f) g$x$9360$1IfLeT) g$p$9361$1IfLeT))))) (void))
(library-letrec* () (void))
(library-letrec* ((g$make-collection$9401$1IfLeT g$make-collection$9598$1IfLeT (case-lambda (() ((case-lambda ((g$set$9462$1IfLeT) (letrec* ((g$set-cons$9463$1IfLeT (case-lambda ((g$x$9465$1IfLeT g$ls$9466$1IfLeT) (if (memq g$x$9465$1IfLeT g$ls$9466$1IfLeT) g$ls$9466$1IfLeT (cons g$x$9465$1IfLeT g$ls$9466$1IfLeT)))))) (case-lambda (() g$set$9462$1IfLeT) ((g$x$9464$1IfLeT) (set! g$set$9462$1IfLeT (g$set-cons$9463$1IfLeT g$x$9464$1IfLeT g$set$9462$1IfLeT))))))) '())))) (g$current-library-collection$9402$1IfLeT g$current-library-collection$9599$1IfLeT (g$make-parameter$9320$1IfLeT (g$make-collection$9401$1IfLeT) (case-lambda ((g$x$9467$1IfLeT) (begin (if (procedure? g$x$9467$1IfLeT) (void) (assertion-violation 'current-library-collection '"not a procedure" g$x$9467$1IfLeT)) g$x$9467$1IfLeT))))) (g$9100$9403$1IfLeT g$9100$9600$1IfLeT (make-record-type-descriptor 'library '#f 'g$9103$1IfLeT '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (g$9102$9404$1IfLeT g$9102$9601$1IfLeT '#f) (g$9101$9405$1IfLeT g$9101$9602$1IfLeT (make-record-constructor-descriptor g$9100$9403$1IfLeT '#f g$9102$9404$1IfLeT)) (g$library?$9406$1IfLeT g$library?$9603$1IfLeT (record-predicate g$9100$9403$1IfLeT)) (g$make-library$9407$1IfLeT g$make-library$9604$1IfLeT (record-constructor g$9101$9405$1IfLeT)) (g$library-id$9408$1IfLeT g$library-id$9605$1IfLeT (record-accessor g$9100$9403$1IfLeT '0)) (g$library-name$9409$1IfLeT g$library-name$9606$1IfLeT (record-accessor g$9100$9403$1IfLeT '1)) (g$library-version$9410$1IfLeT g$library-version$9607$1IfLeT (record-accessor g$9100$9403$1IfLeT '2)) (g$library-imp*$9411$1IfLeT g$library-imp*$9608$1IfLeT (record-accessor g$9100$9403$1IfLeT '3)) (g$library-vis*$9412$1IfLeT g$library-vis*$9609$1IfLeT (record-accessor g$9100$9403$1IfLeT '4)) (g$library-inv*$9413$1IfLeT g$library-inv*$9610$1IfLeT (record-accessor g$9100$9403$1IfLeT '5)) (g$library-subst$9414$1IfLeT g$library-subst$9611$1IfLeT (record-accessor g$9100$9403$1IfLeT '6)) (g$library-env$9415$1IfLeT g$library-env$9612$1IfLeT (record-accessor g$9100$9403$1IfLeT '7)) (g$library-visit-state$9416$1IfLeT g$library-visit-state$9613$1IfLeT (record-accessor g$9100$9403$1IfLeT '8)) (g$library-invoke-state$9417$1IfLeT g$library-invoke-state$9614$1IfLeT (record-accessor g$9100$9403$1IfLeT '9)) (g$library-visit-code$9418$1IfLeT g$library-visit-code$9615$1IfLeT (record-accessor g$9100$9403$1IfLeT '10)) (g$library-invoke-code$9419$1IfLeT g$library-invoke-code$9616$1IfLeT (record-accessor g$9100$9403$1IfLeT '11)) (g$library-visible?$9420$1IfLeT g$library-visible?$9617$1IfLeT (record-accessor g$9100$9403$1IfLeT '12)) (g$library-source-file-name$9421$1IfLeT g$library-source-file-name$9618$1IfLeT (record-accessor g$9100$9403$1IfLeT '13)) (g$set-library-id!$9422$1IfLeT g$set-library-id!$9619$1IfLeT (record-mutator g$9100$9403$1IfLeT '0)) (g$set-library-name!$9423$1IfLeT g$set-library-name!$9620$1IfLeT (record-mutator g$9100$9403$1IfLeT '1)) (g$set-library-version!$9424$1IfLeT g$set-library-version!$9621$1IfLeT (record-mutator g$9100$9403$1IfLeT '2)) (g$set-library-imp*!$9425$1IfLeT g$set-library-imp*!$9622$1IfLeT (record-mutator g$9100$9403$1IfLeT '3)) (g$set-library-vis*!$9426$1IfLeT g$set-library-vis*!$9623$1IfLeT (record-mutator g$9100$9403$1IfLeT '4)) (g$set-library-inv*!$9427$1IfLeT g$set-library-inv*!$9624$1IfLeT (record-mutator g$9100$9403$1IfLeT '5)) (g$set-library-subst!$9428$1IfLeT g$set-library-subst!$9625$1IfLeT (record-mutator g$9100$9403$1IfLeT '6)) (g$set-library-env!$9429$1IfLeT g$set-library-env!$9626$1IfLeT (record-mutator g$9100$9403$1IfLeT '7)) (g$set-library-visit-state!$9430$1IfLeT g$set-library-visit-state!$9627$1IfLeT (record-mutator g$9100$9403$1IfLeT '8)) (g$set-library-invoke-state!$9431$1IfLeT g$set-library-invoke-state!$9628$1IfLeT (record-mutator g$9100$9403$1IfLeT '9)) (g$set-library-visit-code!$9432$1IfLeT g$set-library-visit-code!$9629$1IfLeT (record-mutator g$9100$9403$1IfLeT '10)) (g$set-library-invoke-code!$9433$1IfLeT g$set-library-invoke-code!$9630$1IfLeT (record-mutator g$9100$9403$1IfLeT '11)) (g$set-library-visible?!$9434$1IfLeT g$set-library-visible?!$9631$1IfLeT (record-mutator g$9100$9403$1IfLeT '12)) (g$set-library-source-file-name!$9435$1IfLeT g$set-library-source-file-name!$9632$1IfLeT (record-mutator g$9100$9403$1IfLeT '13)) (g$rp$9436$1IfLeT g$rp$9633$1IfLeT (make-record-printer 'library (case-lambda ((g$x$9468$1IfLeT g$p$9469$1IfLeT) (begin (if (g$library?$9406$1IfLeT g$x$9468$1IfLeT) (void) (assertion-violation 'record-type-printer '"not a library")) (display (g$format$9239$1IfLeT '"#<library ~s>" (if (null? (g$library-version$9410$1IfLeT g$x$9468$1IfLeT)) (g$library-name$9409$1IfLeT g$x$9468$1IfLeT) (append (g$library-name$9409$1IfLeT g$x$9468$1IfLeT) (list (g$library-version$9410$1IfLeT g$x$9468$1IfLeT))))) g$p$9469$1IfLeT)))))) (g$find-dependencies$9437$1IfLeT g$find-dependencies$9634$1IfLeT (case-lambda ((g$ls$9470$1IfLeT) (if (null? g$ls$9470$1IfLeT) '() (assertion-violation 'find-dependencies '"cannot handle deps yet"))))) (g$find-library-by$9438$1IfLeT g$find-library-by$9635$1IfLeT (case-lambda ((g$pred$9471$1IfLeT) ((letrec ((g$f$9472$1IfLeT (case-lambda ((g$ls$9473$1IfLeT) (if (null? g$ls$9473$1IfLeT) '#f (if (g$pred$9471$1IfLeT (car g$ls$9473$1IfLeT)) (car g$ls$9473$1IfLeT) (g$f$9472$1IfLeT (cdr g$ls$9473$1IfLeT)))))))) g$f$9472$1IfLeT) ((g$current-library-collection$9402$1IfLeT)))))) (g$library-path$9439$1IfLeT g$library-path$9636$1IfLeT (g$make-parameter$9320$1IfLeT '(".") (case-lambda ((g$x$9474$1IfLeT) (if (if (list? g$x$9474$1IfLeT) (begin '#f (g$for-all$8490$1IfLeT string? g$x$9474$1IfLeT)) '#f) (map (case-lambda ((g$x$9475$1IfLeT) g$x$9475$1IfLeT)) g$x$9474$1IfLeT) (assertion-violation 'library-path '"not a list of strings" g$x$9474$1IfLeT)))))) (g$library-extensions$9440$1IfLeT g$library-extensions$9637$1IfLeT (g$make-parameter$9320$1IfLeT '(".sls" ".ss" ".scm") (case-lambda ((g$x$9476$1IfLeT) (if (if (list? g$x$9476$1IfLeT) (begin '#f (g$for-all$8490$1IfLeT string? g$x$9476$1IfLeT)) '#f) (map (case-lambda ((g$x$9477$1IfLeT) g$x$9477$1IfLeT)) g$x$9476$1IfLeT) (assertion-violation 'library-extensions '"not a list of strings" g$x$9476$1IfLeT)))))) (g$library-name->file-name$9441$1IfLeT g$library-name->file-name$9638$1IfLeT (case-lambda ((g$x$9478$1IfLeT) (call-with-values (case-lambda (() (g$open-string-output-port$9213$1IfLeT))) (case-lambda ((g$p$9481$1IfLeT g$extract$9482$1IfLeT) ((case-lambda ((g$extract$9483$1IfLeT g$p$9484$1IfLeT) (letrec* ((g$display-hex$9485$1IfLeT (case-lambda ((g$n$9493$1IfLeT) (if (<= '0 g$n$9493$1IfLeT '9) (display g$n$9493$1IfLeT g$p$9484$1IfLeT) (display (integer->char (+ (char->integer '#\A) (- g$n$9493$1IfLeT '10))) g$p$9484$1IfLeT)))))) (begin ((letrec ((g$f$9486$1IfLeT (case-lambda ((g$ls$9487$1IfLeT) (if (null? g$ls$9487$1IfLeT) (void) (begin (display '"/" g$p$9484$1IfLeT) (for-each (case-lambda ((g$c$9488$1IfLeT) (if ((case-lambda ((g$t$9489$1IfLeT) (if g$t$9489$1IfLeT g$t$9489$1IfLeT ((case-lambda ((g$t$9490$1IfLeT) (if g$t$9490$1IfLeT g$t$9490$1IfLeT ((case-lambda ((g$t$9491$1IfLeT) (if g$t$9491$1IfLeT g$t$9491$1IfLeT (begin '#f (memv g$c$9488$1IfLeT '(#\- #\. #\_ #\~)))))) (char<=? '#\0 g$c$9488$1IfLeT '#\9))))) (char<=? '#\A g$c$9488$1IfLeT '#\Z))))) (char<=? '#\a g$c$9488$1IfLeT '#\z)) (display g$c$9488$1IfLeT g$p$9484$1IfLeT) (begin (display '"%" g$p$9484$1IfLeT) ((case-lambda ((g$n$9492$1IfLeT) (begin (g$display-hex$9485$1IfLeT (g$quotient$8840$1IfLeT g$n$9492$1IfLeT '16)) (g$display-hex$9485$1IfLeT (g$remainder$8841$1IfLeT g$n$9492$1IfLeT '16))))) (char->integer g$c$9488$1IfLeT)))))) (string->list (symbol->string (car g$ls$9487$1IfLeT)))) (g$f$9486$1IfLeT (cdr g$ls$9487$1IfLeT)))))))) g$f$9486$1IfLeT) g$x$9478$1IfLeT) (g$extract$9483$1IfLeT))))) g$extract$9482$1IfLeT g$p$9481$1IfLeT))))))) (g$file-locator$9442$1IfLeT g$file-locator$9639$1IfLeT (g$make-parameter$9320$1IfLeT (case-lambda ((g$x$9494$1IfLeT) ((case-lambda ((g$str$9495$1IfLeT) ((letrec ((g$f$9496$1IfLeT (case-lambda ((g$ls$9497$1IfLeT g$exts$9498$1IfLeT g$failed-list$9499$1IfLeT) (if (null? g$ls$9497$1IfLeT) ((case-lambda (() (letrec* ((g$9203$9500$1IfLeT (make-record-type-descriptor '&library-resolution &condition-rtd 'g$9206$1IfLeT '#f '#f '#((immutable library) (immutable files)))) (g$9205$9501$1IfLeT '#f) (g$9204$9502$1IfLeT (make-record-constructor-descriptor g$9203$9500$1IfLeT &condition-rcd g$9205$9501$1IfLeT)) (g$9202$9503$1IfLeT (record-predicate g$9203$9500$1IfLeT)) (g$make-library-resolution-condition$9504$1IfLeT (record-constructor g$9204$9502$1IfLeT)) (g$9200$9505$1IfLeT (record-accessor g$9203$9500$1IfLeT '0)) (g$9201$9506$1IfLeT (record-accessor g$9203$9500$1IfLeT '1)) (g$library-resolution-condition?$9507$1IfLeT (condition-predicate g$9203$9500$1IfLeT)) (g$condition-library$9508$1IfLeT (condition-accessor g$9203$9500$1IfLeT g$9200$9505$1IfLeT)) (g$condition-files$9509$1IfLeT (condition-accessor g$9203$9500$1IfLeT g$9201$9506$1IfLeT))) (raise (condition (g$make-error$8764$1IfLeT) (g$make-who-condition$8790$1IfLeT 'expander) (g$make-message-condition$8744$1IfLeT '"cannot locate library in library-path") (g$make-library-resolution-condition$9504$1IfLeT g$x$9494$1IfLeT (reverse g$failed-list$9499$1IfLeT)))))))) (if (null? g$exts$9498$1IfLeT) (g$f$9496$1IfLeT (cdr g$ls$9497$1IfLeT) (g$library-extensions$9440$1IfLeT) g$failed-list$9499$1IfLeT) ((case-lambda ((g$name$9510$1IfLeT) (if (g$file-exists?$8414$1IfLeT g$name$9510$1IfLeT) g$name$9510$1IfLeT (g$f$9496$1IfLeT g$ls$9497$1IfLeT (cdr g$exts$9498$1IfLeT) (cons g$name$9510$1IfLeT g$failed-list$9499$1IfLeT))))) (string-append (car g$ls$9497$1IfLeT) g$str$9495$1IfLeT (car g$exts$9498$1IfLeT))))))))) g$f$9496$1IfLeT) (g$library-path$9439$1IfLeT) (g$library-extensions$9440$1IfLeT) '()))) (g$library-name->file-name$9441$1IfLeT g$x$9494$1IfLeT)))) (case-lambda ((g$f$9511$1IfLeT) (if (procedure? g$f$9511$1IfLeT) g$f$9511$1IfLeT (assertion-violation 'file-locator '"not a procedure" g$f$9511$1IfLeT)))))) (g$serialize-all$9443$1IfLeT g$serialize-all$9640$1IfLeT (case-lambda ((g$serialize$9512$1IfLeT g$compile$9513$1IfLeT) (letrec* ((g$library-desc$9514$1IfLeT (case-lambda ((g$x$9516$1IfLeT) (list (g$library-id$9408$1IfLeT g$x$9516$1IfLeT) (g$library-name$9409$1IfLeT g$x$9516$1IfLeT)))))) (for-each (case-lambda ((g$x$9515$1IfLeT) (if (g$library-source-file-name$9421$1IfLeT g$x$9515$1IfLeT) (g$serialize$9512$1IfLeT (g$library-source-file-name$9421$1IfLeT g$x$9515$1IfLeT) (list (g$library-id$9408$1IfLeT g$x$9515$1IfLeT) (g$library-name$9409$1IfLeT g$x$9515$1IfLeT) (g$library-version$9410$1IfLeT g$x$9515$1IfLeT) (map g$library-desc$9514$1IfLeT (g$library-imp*$9411$1IfLeT g$x$9515$1IfLeT)) (map g$library-desc$9514$1IfLeT (g$library-vis*$9412$1IfLeT g$x$9515$1IfLeT)) (map g$library-desc$9514$1IfLeT (g$library-inv*$9413$1IfLeT g$x$9515$1IfLeT)) (g$library-subst$9414$1IfLeT g$x$9515$1IfLeT) (g$library-env$9415$1IfLeT g$x$9515$1IfLeT) (g$compile$9513$1IfLeT (g$library-visit-code$9418$1IfLeT g$x$9515$1IfLeT)) (g$compile$9513$1IfLeT (g$library-invoke-code$9419$1IfLeT g$x$9515$1IfLeT)) (g$library-visible?$9420$1IfLeT g$x$9515$1IfLeT))) (void)))) ((g$current-library-collection$9402$1IfLeT))))))) (g$current-precompiled-library-loader$9444$1IfLeT g$current-precompiled-library-loader$9641$1IfLeT (g$make-parameter$9320$1IfLeT (case-lambda ((g$filename$9517$1IfLeT g$sk$9518$1IfLeT) '#f)))) (g$try-load-from-file$9445$1IfLeT g$try-load-from-file$9642$1IfLeT (case-lambda ((g$filename$9519$1IfLeT) ((g$current-precompiled-library-loader$9444$1IfLeT) g$filename$9519$1IfLeT (case-lambda ((g$id$9520$1IfLeT g$name$9521$1IfLeT g$ver$9522$1IfLeT g$imp*$9523$1IfLeT g$vis*$9524$1IfLeT g$inv*$9525$1IfLeT g$exp-subst$9526$1IfLeT g$exp-env$9527$1IfLeT g$visit-proc$9528$1IfLeT g$invoke-proc$9529$1IfLeT g$visible?$9530$1IfLeT) ((letrec ((g$f$9531$1IfLeT (case-lambda ((g$deps$9532$1IfLeT) (if (null? g$deps$9532$1IfLeT) (begin (g$install-library$9455$1IfLeT g$id$9520$1IfLeT g$name$9521$1IfLeT g$ver$9522$1IfLeT g$imp*$9523$1IfLeT g$vis*$9524$1IfLeT g$inv*$9525$1IfLeT g$exp-subst$9526$1IfLeT g$exp-env$9527$1IfLeT g$visit-proc$9528$1IfLeT g$invoke-proc$9529$1IfLeT '#f '#f g$visible?$9530$1IfLeT '#f) '#t) ((case-lambda ((g$d$9533$1IfLeT) ((case-lambda ((g$label$9534$1IfLeT g$dname$9535$1IfLeT) ((case-lambda ((g$l$9536$1IfLeT) (if (if (g$library?$9406$1IfLeT g$l$9536$1IfLeT) (begin '#f (eq? g$label$9534$1IfLeT (g$library-id$9408$1IfLeT g$l$9536$1IfLeT))) '#f) (g$f$9531$1IfLeT (cdr g$deps$9532$1IfLeT)) (begin (g$fprintf$9238$1IfLeT (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from \\\\n                           source.\\n" g$name$9521$1IfLeT g$dname$9535$1IfLeT g$filename$9519$1IfLeT) '#f)))) (g$find-library-by-name$9450$1IfLeT g$dname$9535$1IfLeT)))) (car g$d$9533$1IfLeT) (g$cadr$8070$1IfLeT g$d$9533$1IfLeT)))) (car g$deps$9532$1IfLeT))))))) g$f$9531$1IfLeT) (append g$imp*$9523$1IfLeT g$vis*$9524$1IfLeT g$inv*$9525$1IfLeT))) (g$others$9537$1IfLeT '#f)))))) (g$library-loader$9446$1IfLeT g$library-loader$9643$1IfLeT (g$make-parameter$9320$1IfLeT (case-lambda ((g$x$9538$1IfLeT) ((case-lambda ((g$file-name$9539$1IfLeT) (if (not g$file-name$9539$1IfLeT) (assertion-violation '#f '"cannot file library" g$x$9538$1IfLeT) ((case-lambda ((g$t$9540$1IfLeT) (if g$t$9540$1IfLeT g$t$9540$1IfLeT (begin '#f ((g$current-library-expander$9447$1IfLeT) (with-input-from-file g$file-name$9539$1IfLeT read-annotated) g$file-name$9539$1IfLeT))))) (g$try-load-from-file$9445$1IfLeT g$file-name$9539$1IfLeT))))) ((g$file-locator$9442$1IfLeT) g$x$9538$1IfLeT)))) (case-lambda ((g$f$9541$1IfLeT) (if (procedure? g$f$9541$1IfLeT) g$f$9541$1IfLeT (assertion-violation 'library-locator '"not a procedure" g$f$9541$1IfLeT)))))) (g$current-library-expander$9447$1IfLeT g$current-library-expander$9644$1IfLeT (g$make-parameter$9320$1IfLeT (case-lambda ((g$x$9542$1IfLeT) (assertion-violation 'library-expander '"not initialized"))) (case-lambda ((g$f$9543$1IfLeT) (if (procedure? g$f$9543$1IfLeT) g$f$9543$1IfLeT (assertion-violation 'library-expander '"not a procedure" g$f$9543$1IfLeT)))))) (g$external-pending-libraries$9448$1IfLeT g$external-pending-libraries$9645$1IfLeT (g$make-parameter$9320$1IfLeT '())) (g$find-external-library$9449$1IfLeT g$find-external-library$9646$1IfLeT (case-lambda ((g$name$9544$1IfLeT) (begin (if (member g$name$9544$1IfLeT (g$external-pending-libraries$9448$1IfLeT)) (assertion-violation '#f '"circular attempt to import library was detected" g$name$9544$1IfLeT) (void)) ((case-lambda ((g$external-pending-libraries$9547$1IfLeT g$external-pending-libraries$9548$1IfLeT) ((case-lambda ((g$swap$9549$1IfLeT) (dynamic-wind g$swap$9549$1IfLeT (case-lambda (() (begin ((g$library-loader$9446$1IfLeT) g$name$9544$1IfLeT) ((case-lambda ((g$t$9550$1IfLeT) (if g$t$9550$1IfLeT g$t$9550$1IfLeT (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" g$name$9544$1IfLeT))))) (g$find-library-by$9438$1IfLeT (case-lambda ((g$x$9551$1IfLeT) (equal? (g$library-name$9409$1IfLeT g$x$9551$1IfLeT) g$name$9544$1IfLeT)))))))) g$swap$9549$1IfLeT))) (case-lambda (() ((case-lambda ((g$t$9552$1IfLeT) (begin (g$external-pending-libraries$9547$1IfLeT g$external-pending-libraries$9548$1IfLeT) (set! g$external-pending-libraries$9548$1IfLeT g$t$9552$1IfLeT)))) (g$external-pending-libraries$9547$1IfLeT))))))) g$external-pending-libraries$9448$1IfLeT (cons g$name$9544$1IfLeT (g$external-pending-libraries$9448$1IfLeT))))))) (g$find-library-by-name$9450$1IfLeT g$find-library-by-name$9647$1IfLeT (case-lambda ((g$name$9553$1IfLeT) ((case-lambda ((g$t$9554$1IfLeT) (if g$t$9554$1IfLeT g$t$9554$1IfLeT (begin '#f (g$find-external-library$9449$1IfLeT g$name$9553$1IfLeT))))) (g$find-library-by$9438$1IfLeT (case-lambda ((g$x$9555$1IfLeT) (equal? (g$library-name$9409$1IfLeT g$x$9555$1IfLeT) g$name$9553$1IfLeT)))))))) (g$library-exists?$9451$1IfLeT g$library-exists?$9648$1IfLeT (case-lambda ((g$name$9556$1IfLeT) (if (g$find-library-by$9438$1IfLeT (case-lambda ((g$x$9557$1IfLeT) (equal? (g$library-name$9409$1IfLeT g$x$9557$1IfLeT) g$name$9556$1IfLeT)))) (begin '#f '#t) '#f)))) (g$find-library-by-spec/die$9452$1IfLeT g$find-library-by-spec/die$9649$1IfLeT (case-lambda ((g$spec$9558$1IfLeT) ((case-lambda ((g$id$9559$1IfLeT) ((case-lambda ((g$t$9560$1IfLeT) (if g$t$9560$1IfLeT g$t$9560$1IfLeT (begin '#f (assertion-violation '#f '"cannot find library with required spec" g$spec$9558$1IfLeT))))) (g$find-library-by$9438$1IfLeT (case-lambda ((g$x$9561$1IfLeT) (eq? g$id$9559$1IfLeT (g$library-id$9408$1IfLeT g$x$9561$1IfLeT)))))))) (car g$spec$9558$1IfLeT))))) (g$label->binding-table$9453$1IfLeT g$label->binding-table$9650$1IfLeT (g$make-eq-hashtable$8334$1IfLeT)) (g$install-library-record$9454$1IfLeT g$install-library-record$9651$1IfLeT (case-lambda ((g$lib$9562$1IfLeT) (begin ((case-lambda ((g$exp-env$9563$1IfLeT) (for-each (case-lambda ((g$x$9564$1IfLeT) ((case-lambda ((g$label$9565$1IfLeT g$binding$9566$1IfLeT) ((case-lambda ((g$binding$9567$1IfLeT) (g$hashtable-set!$8338$1IfLeT g$label->binding-table$9453$1IfLeT g$label$9565$1IfLeT g$binding$9567$1IfLeT))) ((case-lambda ((g$t$9568$1IfLeT) (if (memv g$t$9568$1IfLeT '(global)) (cons 'global (cons g$lib$9562$1IfLeT (cdr g$binding$9566$1IfLeT))) (if (memv g$t$9568$1IfLeT '(global-macro)) (cons 'global-macro (cons g$lib$9562$1IfLeT (cdr g$binding$9566$1IfLeT))) (if (memv g$t$9568$1IfLeT '(global-macro!)) (cons 'global-macro! (cons g$lib$9562$1IfLeT (cdr g$binding$9566$1IfLeT))) g$binding$9566$1IfLeT))))) (car g$binding$9566$1IfLeT))))) (car g$x$9564$1IfLeT) (cdr g$x$9564$1IfLeT)))) g$exp-env$9563$1IfLeT))) (g$library-env$9415$1IfLeT g$lib$9562$1IfLeT)) ((g$current-library-collection$9402$1IfLeT) g$lib$9562$1IfLeT))))) (g$install-library$9455$1IfLeT g$install-library$9652$1IfLeT (case-lambda ((g$id$9569$1IfLeT g$name$9570$1IfLeT g$ver$9571$1IfLeT g$imp*$9572$1IfLeT g$vis*$9573$1IfLeT g$inv*$9574$1IfLeT g$exp-subst$9575$1IfLeT g$exp-env$9576$1IfLeT g$visit-proc$9577$1IfLeT g$invoke-proc$9578$1IfLeT g$visit-code$9579$1IfLeT g$invoke-code$9580$1IfLeT g$visible?$9581$1IfLeT g$source-file-name$9582$1IfLeT) ((case-lambda ((g$imp-lib*$9583$1IfLeT g$vis-lib*$9584$1IfLeT g$inv-lib*$9585$1IfLeT) (begin (if (if (symbol? g$id$9569$1IfLeT) (if (list? g$name$9570$1IfLeT) (begin '#f (list? g$ver$9571$1IfLeT)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" g$id$9569$1IfLeT g$name$9570$1IfLeT g$ver$9571$1IfLeT)) (if (g$library-exists?$9451$1IfLeT g$name$9570$1IfLeT) (assertion-violation 'install-library '"library is already installed" g$name$9570$1IfLeT) (void)) ((case-lambda ((g$lib$9586$1IfLeT) (g$install-library-record$9454$1IfLeT g$lib$9586$1IfLeT))) (g$make-library$9407$1IfLeT g$id$9569$1IfLeT g$name$9570$1IfLeT g$ver$9571$1IfLeT g$imp-lib*$9583$1IfLeT g$vis-lib*$9584$1IfLeT g$inv-lib*$9585$1IfLeT g$exp-subst$9575$1IfLeT g$exp-env$9576$1IfLeT g$visit-proc$9577$1IfLeT g$invoke-proc$9578$1IfLeT g$visit-code$9579$1IfLeT g$invoke-code$9580$1IfLeT g$visible?$9581$1IfLeT g$source-file-name$9582$1IfLeT))))) (map g$find-library-by-spec/die$9452$1IfLeT g$imp*$9572$1IfLeT) (map g$find-library-by-spec/die$9452$1IfLeT g$vis*$9573$1IfLeT) (map g$find-library-by-spec/die$9452$1IfLeT g$inv*$9574$1IfLeT))))) (g$imported-label->binding$9456$1IfLeT g$imported-label->binding$9653$1IfLeT (case-lambda ((g$lab$9587$1IfLeT) (g$hashtable-ref$8337$1IfLeT g$label->binding-table$9453$1IfLeT g$lab$9587$1IfLeT '#f)))) (g$invoke-library$9457$1IfLeT g$invoke-library$9654$1IfLeT (case-lambda ((g$lib$9588$1IfLeT) ((case-lambda ((g$invoke$9589$1IfLeT) (if (procedure? g$invoke$9589$1IfLeT) (begin (g$set-library-invoke-state!$9431$1IfLeT g$lib$9588$1IfLeT (case-lambda (() (assertion-violation 'invoke '"circularity detected" g$lib$9588$1IfLeT)))) (for-each g$invoke-library$9457$1IfLeT (g$library-inv*$9413$1IfLeT g$lib$9588$1IfLeT)) (g$set-library-invoke-state!$9431$1IfLeT g$lib$9588$1IfLeT (case-lambda (() (assertion-violation 'invoke '"first invoke did not return" g$lib$9588$1IfLeT)))) (g$invoke$9589$1IfLeT) (g$set-library-invoke-state!$9431$1IfLeT g$lib$9588$1IfLeT '#t)) (void)))) (g$library-invoke-state$9417$1IfLeT g$lib$9588$1IfLeT))))) (g$visit-library$9458$1IfLeT g$visit-library$9655$1IfLeT (case-lambda ((g$lib$9590$1IfLeT) ((case-lambda ((g$visit$9591$1IfLeT) (if (procedure? g$visit$9591$1IfLeT) (begin (g$set-library-visit-state!$9430$1IfLeT g$lib$9590$1IfLeT (case-lambda (() (assertion-violation 'visit '"circularity detected" g$lib$9590$1IfLeT)))) (for-each g$invoke-library$9457$1IfLeT (g$library-vis*$9412$1IfLeT g$lib$9590$1IfLeT)) (g$set-library-visit-state!$9430$1IfLeT g$lib$9590$1IfLeT (case-lambda (() (assertion-violation 'invoke '"first visit did not return" g$lib$9590$1IfLeT)))) (g$visit$9591$1IfLeT) (g$set-library-visit-state!$9430$1IfLeT g$lib$9590$1IfLeT '#t)) (void)))) (g$library-visit-state$9416$1IfLeT g$lib$9590$1IfLeT))))) (g$invoke-library-by-spec$9459$1IfLeT g$invoke-library-by-spec$9656$1IfLeT (case-lambda ((g$spec$9592$1IfLeT) (g$invoke-library$9457$1IfLeT (g$find-library-by-spec/die$9452$1IfLeT g$spec$9592$1IfLeT))))) (g$installed-libraries$9460$1IfLeT g$installed-libraries$9657$1IfLeT (case-lambda ((g$all?$9593$1IfLeT) ((letrec ((g$f$9594$1IfLeT (case-lambda ((g$ls$9595$1IfLeT) (if (null? g$ls$9595$1IfLeT) '() (if ((case-lambda ((g$t$9596$1IfLeT) (if g$t$9596$1IfLeT g$t$9596$1IfLeT (begin '#f (g$library-visible?$9420$1IfLeT (car g$ls$9595$1IfLeT)))))) g$all?$9593$1IfLeT) (cons (car g$ls$9595$1IfLeT) (g$f$9594$1IfLeT (cdr g$ls$9595$1IfLeT))) (g$f$9594$1IfLeT (cdr g$ls$9595$1IfLeT)))))))) g$f$9594$1IfLeT) ((g$current-library-collection$9402$1IfLeT)))) (() (g$installed-libraries$9460$1IfLeT '#f)))) (g$library-spec$9461$1IfLeT g$library-spec$9658$1IfLeT (case-lambda ((g$x$9597$1IfLeT) (begin (if (g$library?$9406$1IfLeT g$x$9597$1IfLeT) (void) (assertion-violation 'library-spec '"not a library" g$x$9597$1IfLeT)) (list (g$library-id$9408$1IfLeT g$x$9597$1IfLeT) (g$library-name$9409$1IfLeT g$x$9597$1IfLeT) (g$library-version$9410$1IfLeT g$x$9597$1IfLeT))))))) (void))
(library-letrec* ((g$build-global-define$9659$1IfLeT g$build-global-define$9768$1IfLeT (case-lambda ((g$x$9740$1IfLeT) (g$build-void$9736$1IfLeT)))) (g$build-lambda$9708$1IfLeT g$build-lambda$9769$1IfLeT (case-lambda ((g$ae$9741$1IfLeT g$vars$9742$1IfLeT g$exp$9743$1IfLeT) (list 'case-lambda (list g$vars$9742$1IfLeT g$exp$9743$1IfLeT))))) (g$build-case-lambda$9709$1IfLeT g$build-case-lambda$9770$1IfLeT (case-lambda ((g$ae$9744$1IfLeT g$vars*$9745$1IfLeT g$exp*$9746$1IfLeT) (cons 'case-lambda (map list g$vars*$9745$1IfLeT g$exp*$9746$1IfLeT))))) (g$build-let$9710$1IfLeT g$build-let$9771$1IfLeT (case-lambda ((g$ae$9747$1IfLeT g$lhs*$9748$1IfLeT g$rhs*$9749$1IfLeT g$body$9750$1IfLeT) (cons (g$build-lambda$9708$1IfLeT g$ae$9747$1IfLeT g$lhs*$9748$1IfLeT g$body$9750$1IfLeT) g$rhs*$9749$1IfLeT)))) (g$build-sequence$9735$1IfLeT g$build-sequence$9772$1IfLeT (case-lambda ((g$ae$9751$1IfLeT g$exps$9752$1IfLeT) ((letrec ((g$loop$9753$1IfLeT (case-lambda ((g$exps$9754$1IfLeT) (if (null? (cdr g$exps$9754$1IfLeT)) (car g$exps$9754$1IfLeT) (if (equal? (car g$exps$9754$1IfLeT) (g$build-void$9736$1IfLeT)) (g$loop$9753$1IfLeT (cdr g$exps$9754$1IfLeT)) (cons 'begin g$exps$9754$1IfLeT))))))) g$loop$9753$1IfLeT) g$exps$9752$1IfLeT)))) (g$build-void$9736$1IfLeT g$build-void$9773$1IfLeT (case-lambda (() '((primitive void))))) (g$build-letrec$9737$1IfLeT g$build-letrec$9774$1IfLeT (case-lambda ((g$ae$9755$1IfLeT g$vars$9756$1IfLeT g$val-exps$9757$1IfLeT g$body-exp$9758$1IfLeT) (if (null? g$vars$9756$1IfLeT) g$body-exp$9758$1IfLeT (list 'letrec (map list g$vars$9756$1IfLeT g$val-exps$9757$1IfLeT) g$body-exp$9758$1IfLeT))))) (g$build-letrec*$9738$1IfLeT g$build-letrec*$9775$1IfLeT (case-lambda ((g$ae$9759$1IfLeT g$vars$9760$1IfLeT g$val-exps$9761$1IfLeT g$body-exp$9762$1IfLeT) (if (null? g$vars$9760$1IfLeT) g$body-exp$9762$1IfLeT (list 'letrec* (map list g$vars$9760$1IfLeT g$val-exps$9761$1IfLeT) g$body-exp$9762$1IfLeT))))) (g$build-library-letrec*$9739$1IfLeT g$build-library-letrec*$9776$1IfLeT (case-lambda ((g$ae$9763$1IfLeT g$vars$9764$1IfLeT g$locs$9765$1IfLeT g$val-exps$9766$1IfLeT g$body-exp$9767$1IfLeT) (list 'library-letrec* (map list g$vars$9764$1IfLeT g$locs$9765$1IfLeT g$val-exps$9766$1IfLeT) g$body-exp$9767$1IfLeT))))) (void))
(library-letrec* ((g$set-cons$9777$1IfLeT g$set-cons$16082$1IfLeT (case-lambda ((g$x$10228$1IfLeT g$ls$10229$1IfLeT) (if (memq g$x$10228$1IfLeT g$ls$10229$1IfLeT) g$ls$10229$1IfLeT (cons g$x$10228$1IfLeT g$ls$10229$1IfLeT))))) (g$set-union$9778$1IfLeT g$set-union$16083$1IfLeT (case-lambda ((g$ls1$10230$1IfLeT g$ls2$10231$1IfLeT) (if (null? g$ls1$10230$1IfLeT) g$ls2$10231$1IfLeT (if (memq (car g$ls1$10230$1IfLeT) g$ls2$10231$1IfLeT) (g$set-union$9778$1IfLeT (cdr g$ls1$10230$1IfLeT) g$ls2$10231$1IfLeT) (cons (car g$ls1$10230$1IfLeT) (g$set-union$9778$1IfLeT (cdr g$ls1$10230$1IfLeT) g$ls2$10231$1IfLeT))))))) (g$top-mark*$9780$1IfLeT g$top-mark*$16084$1IfLeT '(top)) (g$top-marked?$9781$1IfLeT g$top-marked?$16085$1IfLeT (case-lambda ((g$m*$10232$1IfLeT) (memq 'top g$m*$10232$1IfLeT)))) (g$gen-lexical$9782$1IfLeT g$gen-lexical$16086$1IfLeT (case-lambda ((g$sym$10233$1IfLeT) (if (symbol? g$sym$10233$1IfLeT) (gensym g$sym$10233$1IfLeT) (if (g$stx?$9810$1IfLeT g$sym$10233$1IfLeT) (g$gen-lexical$9782$1IfLeT (g$id->sym$9839$1IfLeT g$sym$10233$1IfLeT)) (assertion-violation 'gen-lexical '"BUG: invalid arg" g$sym$10233$1IfLeT)))))) (g$gen-global$9783$1IfLeT g$gen-global$16087$1IfLeT (case-lambda ((g$x$10234$1IfLeT) (g$gen-lexical$9782$1IfLeT g$x$10234$1IfLeT)))) (g$gen-label$9784$1IfLeT g$gen-label$16088$1IfLeT (case-lambda ((g$_$10235$1IfLeT) (gensym)))) (g$gen-top-level-label$9785$1IfLeT g$gen-top-level-label$16089$1IfLeT (case-lambda ((g$id$10236$1IfLeT g$rib$10237$1IfLeT) (letrec* ((g$find$10238$1IfLeT (case-lambda ((g$sym$10244$1IfLeT g$mark*$10245$1IfLeT g$sym*$10246$1IfLeT g$mark**$10247$1IfLeT g$label*$10248$1IfLeT) (if (pair? g$sym*$10246$1IfLeT) (begin '#f (if (if (eq? g$sym$10244$1IfLeT (car g$sym*$10246$1IfLeT)) (begin '#f (g$same-marks?$9840$1IfLeT g$mark*$10245$1IfLeT (car g$mark**$10247$1IfLeT))) '#f) (car g$label*$10248$1IfLeT) (g$find$10238$1IfLeT g$sym$10244$1IfLeT g$mark*$10245$1IfLeT (cdr g$sym*$10246$1IfLeT) (cdr g$mark**$10247$1IfLeT) (cdr g$label*$10248$1IfLeT)))) '#f))))) ((case-lambda ((g$sym$10239$1IfLeT g$mark*$10240$1IfLeT) ((case-lambda ((g$sym*$10241$1IfLeT) ((case-lambda ((g$t$10242$1IfLeT) (if g$t$10242$1IfLeT ((case-lambda ((g$label$10243$1IfLeT) (if (g$imported-label->binding$9653$1IfLeT g$label$10243$1IfLeT) (gensym) g$label$10243$1IfLeT))) g$t$10242$1IfLeT) (gensym)))) (if (memq g$sym$10239$1IfLeT (g$rib-sym*$9793$1IfLeT g$rib$10237$1IfLeT)) (begin '#f (g$find$10238$1IfLeT g$sym$10239$1IfLeT g$mark*$10240$1IfLeT g$sym*$10241$1IfLeT (g$rib-mark**$9794$1IfLeT g$rib$10237$1IfLeT) (g$rib-label*$9795$1IfLeT g$rib$10237$1IfLeT))) '#f)))) (g$rib-sym*$9793$1IfLeT g$rib$10237$1IfLeT)))) (g$id->sym$9839$1IfLeT g$id$10236$1IfLeT) (g$stx-mark*$9813$1IfLeT g$id$10236$1IfLeT)))))) (g$gen-define-label+loc$9786$1IfLeT g$gen-define-label+loc$16090$1IfLeT (case-lambda ((g$id$10249$1IfLeT g$rib$10250$1IfLeT) ((case-lambda ((g$t$10251$1IfLeT) (if g$t$10251$1IfLeT ((case-lambda ((g$env$10252$1IfLeT) ((case-lambda ((g$label$10253$1IfLeT g$locs$10254$1IfLeT) (values g$label$10253$1IfLeT ((case-lambda ((g$t$10255$1IfLeT) (if g$t$10255$1IfLeT (cdr g$t$10255$1IfLeT) ((case-lambda ((g$loc$10256$1IfLeT) (begin (g$set-interaction-env-locs!$10198$1IfLeT g$env$10252$1IfLeT (cons (cons g$label$10253$1IfLeT g$loc$10256$1IfLeT) g$locs$10254$1IfLeT)) g$loc$10256$1IfLeT))) (g$gen-lexical$9782$1IfLeT g$id$10249$1IfLeT))))) (assq g$label$10253$1IfLeT g$locs$10254$1IfLeT))))) (g$gen-top-level-label$9785$1IfLeT g$id$10249$1IfLeT g$rib$10250$1IfLeT) (g$interaction-env-locs$10195$1IfLeT g$env$10252$1IfLeT)))) g$t$10251$1IfLeT) (values (gensym) (g$gen-lexical$9782$1IfLeT g$id$10249$1IfLeT))))) (g$top-level-context$10227$1IfLeT))))) (g$gen-define-label$9787$1IfLeT g$gen-define-label$16091$1IfLeT (case-lambda ((g$id$10257$1IfLeT g$rib$10258$1IfLeT) (if (g$top-level-context$10227$1IfLeT) (g$gen-top-level-label$9785$1IfLeT g$id$10257$1IfLeT g$rib$10258$1IfLeT) (gensym))))) (g$9425$9788$1IfLeT g$9425$16092$1IfLeT (make-record-type-descriptor 'rib '#f 'g$9428$1IfLeT '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (g$9427$9789$1IfLeT g$9427$16093$1IfLeT '#f) (g$9426$9790$1IfLeT g$9426$16094$1IfLeT (make-record-constructor-descriptor g$9425$9788$1IfLeT '#f g$9427$9789$1IfLeT)) (g$rib?$9791$1IfLeT g$rib?$16095$1IfLeT (record-predicate g$9425$9788$1IfLeT)) (g$make-rib$9792$1IfLeT g$make-rib$16096$1IfLeT (record-constructor g$9426$9790$1IfLeT)) (g$rib-sym*$9793$1IfLeT g$rib-sym*$16097$1IfLeT (record-accessor g$9425$9788$1IfLeT '0)) (g$rib-mark**$9794$1IfLeT g$rib-mark**$16098$1IfLeT (record-accessor g$9425$9788$1IfLeT '1)) (g$rib-label*$9795$1IfLeT g$rib-label*$16099$1IfLeT (record-accessor g$9425$9788$1IfLeT '2)) (g$rib-sealed/freq$9796$1IfLeT g$rib-sealed/freq$16100$1IfLeT (record-accessor g$9425$9788$1IfLeT '3)) (g$set-rib-sym*!$9797$1IfLeT g$set-rib-sym*!$16101$1IfLeT (record-mutator g$9425$9788$1IfLeT '0)) (g$set-rib-mark**!$9798$1IfLeT g$set-rib-mark**!$16102$1IfLeT (record-mutator g$9425$9788$1IfLeT '1)) (g$set-rib-label*!$9799$1IfLeT g$set-rib-label*!$16103$1IfLeT (record-mutator g$9425$9788$1IfLeT '2)) (g$set-rib-sealed/freq!$9800$1IfLeT g$set-rib-sealed/freq!$16104$1IfLeT (record-mutator g$9425$9788$1IfLeT '3)) (g$make-empty-rib$9801$1IfLeT g$make-empty-rib$16105$1IfLeT (case-lambda (() (g$make-rib$9792$1IfLeT '() '() '() '#f)))) (g$extend-rib!$9802$1IfLeT g$extend-rib!$16106$1IfLeT (case-lambda ((g$rib$10259$1IfLeT g$id$10260$1IfLeT g$label$10261$1IfLeT) (letrec* ((g$find$10262$1IfLeT (case-lambda ((g$sym$10268$1IfLeT g$mark*$10269$1IfLeT g$sym*$10270$1IfLeT g$mark**$10271$1IfLeT g$label*$10272$1IfLeT) (if (pair? g$sym*$10270$1IfLeT) (begin '#f (if (if (eq? g$sym$10268$1IfLeT (car g$sym*$10270$1IfLeT)) (begin '#f (g$same-marks?$9840$1IfLeT g$mark*$10269$1IfLeT (car g$mark**$10271$1IfLeT))) '#f) g$label*$10272$1IfLeT (g$find$10262$1IfLeT g$sym$10268$1IfLeT g$mark*$10269$1IfLeT (cdr g$sym*$10270$1IfLeT) (cdr g$mark**$10271$1IfLeT) (cdr g$label*$10272$1IfLeT)))) '#f))))) (begin (if (g$rib-sealed/freq$9796$1IfLeT g$rib$10259$1IfLeT) (assertion-violation 'extend-rib! '"BUG: rib is sealed" g$rib$10259$1IfLeT) (void)) ((case-lambda ((g$sym$10263$1IfLeT g$mark*$10264$1IfLeT) ((case-lambda ((g$sym*$10265$1IfLeT) ((case-lambda ((g$t$10266$1IfLeT) (if g$t$10266$1IfLeT ((case-lambda ((g$p$10267$1IfLeT) (if (eq? g$label$10261$1IfLeT (car g$p$10267$1IfLeT)) (void) (if (g$top-level-context$10227$1IfLeT) (set-car! g$p$10267$1IfLeT g$label$10261$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"cannot redefine" g$id$10260$1IfLeT))))) g$t$10266$1IfLeT) (begin (g$set-rib-sym*!$9797$1IfLeT g$rib$10259$1IfLeT (cons g$sym$10263$1IfLeT g$sym*$10265$1IfLeT)) (g$set-rib-mark**!$9798$1IfLeT g$rib$10259$1IfLeT (cons g$mark*$10264$1IfLeT (g$rib-mark**$9794$1IfLeT g$rib$10259$1IfLeT))) (g$set-rib-label*!$9799$1IfLeT g$rib$10259$1IfLeT (cons g$label$10261$1IfLeT (g$rib-label*$9795$1IfLeT g$rib$10259$1IfLeT))))))) (if (memq g$sym$10263$1IfLeT (g$rib-sym*$9793$1IfLeT g$rib$10259$1IfLeT)) (begin '#f (g$find$10262$1IfLeT g$sym$10263$1IfLeT g$mark*$10264$1IfLeT g$sym*$10265$1IfLeT (g$rib-mark**$9794$1IfLeT g$rib$10259$1IfLeT) (g$rib-label*$9795$1IfLeT g$rib$10259$1IfLeT))) '#f)))) (g$rib-sym*$9793$1IfLeT g$rib$10259$1IfLeT)))) (g$id->sym$9839$1IfLeT g$id$10260$1IfLeT) (g$stx-mark*$9813$1IfLeT g$id$10260$1IfLeT))))))) (g$seal-rib!$9803$1IfLeT g$seal-rib!$16107$1IfLeT (case-lambda ((g$rib$10273$1IfLeT) ((case-lambda ((g$sym*$10274$1IfLeT) (if (null? g$sym*$10274$1IfLeT) (void) ((case-lambda ((g$sym*$10275$1IfLeT) (begin (g$set-rib-sym*!$9797$1IfLeT g$rib$10273$1IfLeT g$sym*$10275$1IfLeT) (g$set-rib-mark**!$9798$1IfLeT g$rib$10273$1IfLeT (list->vector (g$rib-mark**$9794$1IfLeT g$rib$10273$1IfLeT))) (g$set-rib-label*!$9799$1IfLeT g$rib$10273$1IfLeT (list->vector (g$rib-label*$9795$1IfLeT g$rib$10273$1IfLeT))) (g$set-rib-sealed/freq!$9800$1IfLeT g$rib$10273$1IfLeT (make-vector (vector-length g$sym*$10275$1IfLeT) '0))))) (list->vector g$sym*$10274$1IfLeT))))) (g$rib-sym*$9793$1IfLeT g$rib$10273$1IfLeT))))) (g$unseal-rib!$9804$1IfLeT g$unseal-rib!$16108$1IfLeT (case-lambda ((g$rib$10276$1IfLeT) (if (g$rib-sealed/freq$9796$1IfLeT g$rib$10276$1IfLeT) (begin (g$set-rib-sealed/freq!$9800$1IfLeT g$rib$10276$1IfLeT '#f) (g$set-rib-sym*!$9797$1IfLeT g$rib$10276$1IfLeT (vector->list (g$rib-sym*$9793$1IfLeT g$rib$10276$1IfLeT))) (g$set-rib-mark**!$9798$1IfLeT g$rib$10276$1IfLeT (vector->list (g$rib-mark**$9794$1IfLeT g$rib$10276$1IfLeT))) (g$set-rib-label*!$9799$1IfLeT g$rib$10276$1IfLeT (vector->list (g$rib-label*$9795$1IfLeT g$rib$10276$1IfLeT)))) (void))))) (g$increment-rib-frequency!$9805$1IfLeT g$increment-rib-frequency!$16109$1IfLeT (case-lambda ((g$rib$10277$1IfLeT g$idx$10278$1IfLeT) ((case-lambda ((g$freq*$10279$1IfLeT) ((case-lambda ((g$freq$10280$1IfLeT) ((case-lambda ((g$i$10281$1IfLeT) (begin (vector-set! g$freq*$10279$1IfLeT g$i$10281$1IfLeT (+ g$freq$10280$1IfLeT '1)) (if (= g$i$10281$1IfLeT g$idx$10278$1IfLeT) (void) ((case-lambda ((g$sym*$10282$1IfLeT g$mark**$10283$1IfLeT g$label*$10284$1IfLeT) (begin ((case-lambda ((g$sym$10285$1IfLeT) (begin (vector-set! g$sym*$10282$1IfLeT g$idx$10278$1IfLeT (vector-ref g$sym*$10282$1IfLeT g$i$10281$1IfLeT)) (vector-set! g$sym*$10282$1IfLeT g$i$10281$1IfLeT g$sym$10285$1IfLeT)))) (vector-ref g$sym*$10282$1IfLeT g$idx$10278$1IfLeT)) ((case-lambda ((g$mark*$10286$1IfLeT) (begin (vector-set! g$mark**$10283$1IfLeT g$idx$10278$1IfLeT (vector-ref g$mark**$10283$1IfLeT g$i$10281$1IfLeT)) (vector-set! g$mark**$10283$1IfLeT g$i$10281$1IfLeT g$mark*$10286$1IfLeT)))) (vector-ref g$mark**$10283$1IfLeT g$idx$10278$1IfLeT)) ((case-lambda ((g$label$10287$1IfLeT) (begin (vector-set! g$label*$10284$1IfLeT g$idx$10278$1IfLeT (vector-ref g$label*$10284$1IfLeT g$i$10281$1IfLeT)) (vector-set! g$label*$10284$1IfLeT g$i$10281$1IfLeT g$label$10287$1IfLeT)))) (vector-ref g$label*$10284$1IfLeT g$idx$10278$1IfLeT))))) (g$rib-sym*$9793$1IfLeT g$rib$10277$1IfLeT) (g$rib-mark**$9794$1IfLeT g$rib$10277$1IfLeT) (g$rib-label*$9795$1IfLeT g$rib$10277$1IfLeT)))))) ((letrec ((g$f$10288$1IfLeT (case-lambda ((g$i$10289$1IfLeT) (if (zero? g$i$10289$1IfLeT) '0 ((case-lambda ((g$j$10290$1IfLeT) (if (= g$freq$10280$1IfLeT (vector-ref g$freq*$10279$1IfLeT g$j$10290$1IfLeT)) (g$f$10288$1IfLeT g$j$10290$1IfLeT) g$i$10289$1IfLeT))) (- g$i$10289$1IfLeT '1))))))) g$f$10288$1IfLeT) g$idx$10278$1IfLeT)))) (vector-ref g$freq*$10279$1IfLeT g$idx$10278$1IfLeT)))) (g$rib-sealed/freq$9796$1IfLeT g$rib$10277$1IfLeT))))) (g$make-full-rib$9806$1IfLeT g$make-full-rib$16110$1IfLeT (case-lambda ((g$id*$10291$1IfLeT g$label*$10292$1IfLeT) (g$make-rib$9792$1IfLeT (map g$id->sym$9839$1IfLeT g$id*$10291$1IfLeT) (map g$stx-mark*$9813$1IfLeT g$id*$10291$1IfLeT) g$label*$10292$1IfLeT '#f)))) (g$9449$9807$1IfLeT g$9449$16111$1IfLeT (make-record-type-descriptor 'stx '#f 'g$9452$1IfLeT '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (g$9451$9808$1IfLeT g$9451$16112$1IfLeT '#f) (g$9450$9809$1IfLeT g$9450$16113$1IfLeT (make-record-constructor-descriptor g$9449$9807$1IfLeT '#f g$9451$9808$1IfLeT)) (g$stx?$9810$1IfLeT g$stx?$16114$1IfLeT (record-predicate g$9449$9807$1IfLeT)) (g$make-stx$9811$1IfLeT g$make-stx$16115$1IfLeT (record-constructor g$9450$9809$1IfLeT)) (g$stx-expr$9812$1IfLeT g$stx-expr$16116$1IfLeT (record-accessor g$9449$9807$1IfLeT '0)) (g$stx-mark*$9813$1IfLeT g$stx-mark*$16117$1IfLeT (record-accessor g$9449$9807$1IfLeT '1)) (g$stx-subst*$9814$1IfLeT g$stx-subst*$16118$1IfLeT (record-accessor g$9449$9807$1IfLeT '2)) (g$stx-ae*$9815$1IfLeT g$stx-ae*$16119$1IfLeT (record-accessor g$9449$9807$1IfLeT '3)) (g$set-stx-expr!$9816$1IfLeT g$set-stx-expr!$16120$1IfLeT (record-mutator g$9449$9807$1IfLeT '0)) (g$set-stx-mark*!$9817$1IfLeT g$set-stx-mark*!$16121$1IfLeT (record-mutator g$9449$9807$1IfLeT '1)) (g$set-stx-subst*!$9818$1IfLeT g$set-stx-subst*!$16122$1IfLeT (record-mutator g$9449$9807$1IfLeT '2)) (g$set-stx-ae*!$9819$1IfLeT g$set-stx-ae*!$16123$1IfLeT (record-mutator g$9449$9807$1IfLeT '3)) (g$rp$9820$1IfLeT g$rp$16124$1IfLeT (make-record-printer 'stx (case-lambda ((g$x$10293$1IfLeT g$p$10294$1IfLeT) (begin (display '"#<syntax " g$p$10294$1IfLeT) (write (g$stx->datum$9849$1IfLeT g$x$10293$1IfLeT) g$p$10294$1IfLeT) ((case-lambda ((g$expr$10295$1IfLeT) (if (annotation? g$expr$10295$1IfLeT) ((case-lambda ((g$src$10296$1IfLeT) (if (pair? g$src$10296$1IfLeT) (begin (display '" [byte " g$p$10294$1IfLeT) (display (cdr g$src$10296$1IfLeT) g$p$10294$1IfLeT) (display '" of " g$p$10294$1IfLeT) (display (car g$src$10296$1IfLeT) g$p$10294$1IfLeT) (display '"]" g$p$10294$1IfLeT)) (void)))) (annotation-source g$expr$10295$1IfLeT)) (void)))) (g$stx-expr$9812$1IfLeT g$x$10293$1IfLeT)) (display '">" g$p$10294$1IfLeT)))))) (g$datum->stx$9821$1IfLeT g$datum->stx$16125$1IfLeT (case-lambda ((g$id$10297$1IfLeT g$datum$10298$1IfLeT) (g$make-stx$9811$1IfLeT g$datum$10298$1IfLeT (g$stx-mark*$9813$1IfLeT g$id$10297$1IfLeT) (g$stx-subst*$9814$1IfLeT g$id$10297$1IfLeT) (g$stx-ae*$9815$1IfLeT g$id$10297$1IfLeT))))) (g$gen-mark$9822$1IfLeT g$gen-mark$16126$1IfLeT (case-lambda (() (string '#\m)))) (g$anti-mark$9823$1IfLeT g$anti-mark$16127$1IfLeT '#f) (g$anti-mark?$9824$1IfLeT g$anti-mark?$16128$1IfLeT not) (g$join-wraps$9825$1IfLeT g$join-wraps$16129$1IfLeT (case-lambda ((g$m1*$10299$1IfLeT g$s1*$10300$1IfLeT g$ae1*$10301$1IfLeT g$e$10302$1IfLeT) (letrec* ((g$cancel$10303$1IfLeT (case-lambda ((g$ls1$10307$1IfLeT g$ls2$10308$1IfLeT) ((letrec ((g$f$10309$1IfLeT (case-lambda ((g$x$10310$1IfLeT g$ls1$10311$1IfLeT) (if (null? g$ls1$10311$1IfLeT) (cdr g$ls2$10308$1IfLeT) (cons g$x$10310$1IfLeT (g$f$10309$1IfLeT (car g$ls1$10311$1IfLeT) (cdr g$ls1$10311$1IfLeT)))))))) g$f$10309$1IfLeT) (car g$ls1$10307$1IfLeT) (cdr g$ls1$10307$1IfLeT)))))) ((case-lambda ((g$m2*$10304$1IfLeT g$s2*$10305$1IfLeT g$ae2*$10306$1IfLeT) (if (if (not (null? g$m1*$10299$1IfLeT)) (if (not (null? g$m2*$10304$1IfLeT)) (begin '#f (g$anti-mark?$9824$1IfLeT (car g$m2*$10304$1IfLeT))) '#f) '#f) (values (g$cancel$10303$1IfLeT g$m1*$10299$1IfLeT g$m2*$10304$1IfLeT) (g$cancel$10303$1IfLeT g$s1*$10300$1IfLeT g$s2*$10305$1IfLeT) (g$cancel$10303$1IfLeT g$ae1*$10301$1IfLeT g$ae2*$10306$1IfLeT)) (values (append g$m1*$10299$1IfLeT g$m2*$10304$1IfLeT) (append g$s1*$10300$1IfLeT g$s2*$10305$1IfLeT) (append g$ae1*$10301$1IfLeT g$ae2*$10306$1IfLeT))))) (g$stx-mark*$9813$1IfLeT g$e$10302$1IfLeT) (g$stx-subst*$9814$1IfLeT g$e$10302$1IfLeT) (g$stx-ae*$9815$1IfLeT g$e$10302$1IfLeT)))))) (g$mkstx$9826$1IfLeT g$mkstx$16130$1IfLeT (case-lambda ((g$e$10312$1IfLeT g$m*$10313$1IfLeT g$s*$10314$1IfLeT g$ae*$10315$1IfLeT) (if (g$stx?$9810$1IfLeT g$e$10312$1IfLeT) (call-with-values (case-lambda (() (g$join-wraps$9825$1IfLeT g$m*$10313$1IfLeT g$s*$10314$1IfLeT g$ae*$10315$1IfLeT g$e$10312$1IfLeT))) (case-lambda ((g$m*$10319$1IfLeT g$s*$10320$1IfLeT g$ae*$10321$1IfLeT) ((case-lambda ((g$ae*$10322$1IfLeT g$s*$10323$1IfLeT g$m*$10324$1IfLeT) (g$make-stx$9811$1IfLeT (g$stx-expr$9812$1IfLeT g$e$10312$1IfLeT) g$m*$10324$1IfLeT g$s*$10323$1IfLeT g$ae*$10322$1IfLeT))) g$ae*$10321$1IfLeT g$s*$10320$1IfLeT g$m*$10319$1IfLeT)))) (g$make-stx$9811$1IfLeT g$e$10312$1IfLeT g$m*$10313$1IfLeT g$s*$10314$1IfLeT g$ae*$10315$1IfLeT))))) (g$add-mark$9827$1IfLeT g$add-mark$16131$1IfLeT (case-lambda ((g$m$10325$1IfLeT g$e$10326$1IfLeT g$ae$10327$1IfLeT) (g$mkstx$9826$1IfLeT g$e$10326$1IfLeT (list g$m$10325$1IfLeT) '(shift) (list g$ae$10327$1IfLeT))))) (g$add-subst$9828$1IfLeT g$add-subst$16132$1IfLeT (case-lambda ((g$subst$10328$1IfLeT g$e$10329$1IfLeT) (g$mkstx$9826$1IfLeT g$e$10329$1IfLeT '() (list g$subst$10328$1IfLeT) '())))) (g$syntax-kind?$9829$1IfLeT g$syntax-kind?$16133$1IfLeT (case-lambda ((g$x$10330$1IfLeT g$p?$10331$1IfLeT) (if (g$stx?$9810$1IfLeT g$x$10330$1IfLeT) (g$syntax-kind?$9829$1IfLeT (g$stx-expr$9812$1IfLeT g$x$10330$1IfLeT) g$p?$10331$1IfLeT) (if (annotation? g$x$10330$1IfLeT) (g$syntax-kind?$9829$1IfLeT (annotation-expression g$x$10330$1IfLeT) g$p?$10331$1IfLeT) (g$p?$10331$1IfLeT g$x$10330$1IfLeT)))))) (g$syntax-vector->list$9830$1IfLeT g$syntax-vector->list$16134$1IfLeT (case-lambda ((g$x$10332$1IfLeT) (if (g$stx?$9810$1IfLeT g$x$10332$1IfLeT) ((case-lambda ((g$ls$10333$1IfLeT g$m*$10334$1IfLeT g$s*$10335$1IfLeT g$ae*$10336$1IfLeT) (map (case-lambda ((g$x$10337$1IfLeT) (g$mkstx$9826$1IfLeT g$x$10337$1IfLeT g$m*$10334$1IfLeT g$s*$10335$1IfLeT g$ae*$10336$1IfLeT))) g$ls$10333$1IfLeT))) (g$syntax-vector->list$9830$1IfLeT (g$stx-expr$9812$1IfLeT g$x$10332$1IfLeT)) (g$stx-mark*$9813$1IfLeT g$x$10332$1IfLeT) (g$stx-subst*$9814$1IfLeT g$x$10332$1IfLeT) (g$stx-ae*$9815$1IfLeT g$x$10332$1IfLeT)) (if (annotation? g$x$10332$1IfLeT) (g$syntax-vector->list$9830$1IfLeT (annotation-expression g$x$10332$1IfLeT)) (if (vector? g$x$10332$1IfLeT) (vector->list g$x$10332$1IfLeT) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" g$x$10332$1IfLeT))))))) (g$syntax-pair?$9831$1IfLeT g$syntax-pair?$16135$1IfLeT (case-lambda ((g$x$10338$1IfLeT) (g$syntax-kind?$9829$1IfLeT g$x$10338$1IfLeT pair?)))) (g$syntax-vector?$9832$1IfLeT g$syntax-vector?$16136$1IfLeT (case-lambda ((g$x$10339$1IfLeT) (g$syntax-kind?$9829$1IfLeT g$x$10339$1IfLeT vector?)))) (g$syntax-null?$9833$1IfLeT g$syntax-null?$16137$1IfLeT (case-lambda ((g$x$10340$1IfLeT) (g$syntax-kind?$9829$1IfLeT g$x$10340$1IfLeT null?)))) (g$syntax-list?$9834$1IfLeT g$syntax-list?$16138$1IfLeT (case-lambda ((g$x$10341$1IfLeT) ((case-lambda ((g$t$10342$1IfLeT) (if g$t$10342$1IfLeT g$t$10342$1IfLeT (begin '#f (if (g$syntax-pair?$9831$1IfLeT g$x$10341$1IfLeT) (begin '#f (g$syntax-list?$9834$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10341$1IfLeT))) '#f))))) (g$syntax-null?$9833$1IfLeT g$x$10341$1IfLeT))))) (g$syntax-car$9835$1IfLeT g$syntax-car$16139$1IfLeT (case-lambda ((g$x$10343$1IfLeT) (if (g$stx?$9810$1IfLeT g$x$10343$1IfLeT) (g$mkstx$9826$1IfLeT (g$syntax-car$9835$1IfLeT (g$stx-expr$9812$1IfLeT g$x$10343$1IfLeT)) (g$stx-mark*$9813$1IfLeT g$x$10343$1IfLeT) (g$stx-subst*$9814$1IfLeT g$x$10343$1IfLeT) (g$stx-ae*$9815$1IfLeT g$x$10343$1IfLeT)) (if (annotation? g$x$10343$1IfLeT) (g$syntax-car$9835$1IfLeT (annotation-expression g$x$10343$1IfLeT)) (if (pair? g$x$10343$1IfLeT) (car g$x$10343$1IfLeT) (assertion-violation 'syntax-car '"BUG: not a pair" g$x$10343$1IfLeT))))))) (g$syntax-cdr$9836$1IfLeT g$syntax-cdr$16140$1IfLeT (case-lambda ((g$x$10344$1IfLeT) (if (g$stx?$9810$1IfLeT g$x$10344$1IfLeT) (g$mkstx$9826$1IfLeT (g$syntax-cdr$9836$1IfLeT (g$stx-expr$9812$1IfLeT g$x$10344$1IfLeT)) (g$stx-mark*$9813$1IfLeT g$x$10344$1IfLeT) (g$stx-subst*$9814$1IfLeT g$x$10344$1IfLeT) (g$stx-ae*$9815$1IfLeT g$x$10344$1IfLeT)) (if (annotation? g$x$10344$1IfLeT) (g$syntax-cdr$9836$1IfLeT (annotation-expression g$x$10344$1IfLeT)) (if (pair? g$x$10344$1IfLeT) (cdr g$x$10344$1IfLeT) (assertion-violation 'syntax-cdr '"BUG: not a pair" g$x$10344$1IfLeT))))))) (g$syntax->list$9837$1IfLeT g$syntax->list$16141$1IfLeT (case-lambda ((g$x$10345$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10345$1IfLeT) (cons (g$syntax-car$9835$1IfLeT g$x$10345$1IfLeT) (g$syntax->list$9837$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10345$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10345$1IfLeT) '() (assertion-violation 'syntax->list '"BUG: invalid argument" g$x$10345$1IfLeT)))))) (g$id?$9838$1IfLeT g$id?$16142$1IfLeT (case-lambda ((g$x$10346$1IfLeT) (if (g$stx?$9810$1IfLeT g$x$10346$1IfLeT) (begin '#f ((case-lambda ((g$expr$10347$1IfLeT) (symbol? (if (annotation? g$expr$10347$1IfLeT) (annotation-stripped g$expr$10347$1IfLeT) g$expr$10347$1IfLeT)))) (g$stx-expr$9812$1IfLeT g$x$10346$1IfLeT))) '#f)))) (g$id->sym$9839$1IfLeT g$id->sym$16143$1IfLeT (case-lambda ((g$x$10348$1IfLeT) (begin (if (g$stx?$9810$1IfLeT g$x$10348$1IfLeT) (void) (error 'id->sym '"BUG in ikarus: not an id" g$x$10348$1IfLeT)) ((case-lambda ((g$expr$10349$1IfLeT) ((case-lambda ((g$sym$10350$1IfLeT) (if (symbol? g$sym$10350$1IfLeT) g$sym$10350$1IfLeT (error 'id->sym '"BUG in ikarus: not an id" g$x$10348$1IfLeT)))) (if (annotation? g$expr$10349$1IfLeT) (annotation-stripped g$expr$10349$1IfLeT) g$expr$10349$1IfLeT)))) (g$stx-expr$9812$1IfLeT g$x$10348$1IfLeT)))))) (g$same-marks?$9840$1IfLeT g$same-marks?$16144$1IfLeT (case-lambda ((g$x$10351$1IfLeT g$y$10352$1IfLeT) ((case-lambda ((g$t$10353$1IfLeT) (if g$t$10353$1IfLeT g$t$10353$1IfLeT (begin '#f (if (pair? g$x$10351$1IfLeT) (if (pair? g$y$10352$1IfLeT) (if (eq? (car g$x$10351$1IfLeT) (car g$y$10352$1IfLeT)) (begin '#f (g$same-marks?$9840$1IfLeT (cdr g$x$10351$1IfLeT) (cdr g$y$10352$1IfLeT))) '#f) '#f) '#f))))) (if (null? g$x$10351$1IfLeT) (begin '#f (null? g$y$10352$1IfLeT)) '#f))))) (g$bound-id=?$9841$1IfLeT g$bound-id=?$16145$1IfLeT (case-lambda ((g$x$10354$1IfLeT g$y$10355$1IfLeT) (if (eq? (g$id->sym$9839$1IfLeT g$x$10354$1IfLeT) (g$id->sym$9839$1IfLeT g$y$10355$1IfLeT)) (begin '#f (g$same-marks?$9840$1IfLeT (g$stx-mark*$9813$1IfLeT g$x$10354$1IfLeT) (g$stx-mark*$9813$1IfLeT g$y$10355$1IfLeT))) '#f)))) (g$free-id=?$9842$1IfLeT g$free-id=?$16146$1IfLeT (case-lambda ((g$i$10356$1IfLeT g$j$10357$1IfLeT) ((case-lambda ((g$t0$10358$1IfLeT g$t1$10359$1IfLeT) (if ((case-lambda ((g$t$10360$1IfLeT) (if g$t$10360$1IfLeT g$t$10360$1IfLeT (begin '#f g$t1$10359$1IfLeT)))) g$t0$10358$1IfLeT) (eq? g$t0$10358$1IfLeT g$t1$10359$1IfLeT) (eq? (g$id->sym$9839$1IfLeT g$i$10356$1IfLeT) (g$id->sym$9839$1IfLeT g$j$10357$1IfLeT))))) (g$id->real-label$9851$1IfLeT g$i$10356$1IfLeT) (g$id->real-label$9851$1IfLeT g$j$10357$1IfLeT))))) (g$valid-bound-ids?$9843$1IfLeT g$valid-bound-ids?$16147$1IfLeT (case-lambda ((g$id*$10361$1IfLeT) (if (g$for-all$8490$1IfLeT g$id?$9838$1IfLeT g$id*$10361$1IfLeT) (begin '#f (g$distinct-bound-ids?$9844$1IfLeT g$id*$10361$1IfLeT)) '#f)))) (g$distinct-bound-ids?$9844$1IfLeT g$distinct-bound-ids?$16148$1IfLeT (case-lambda ((g$id*$10362$1IfLeT) ((case-lambda ((g$t$10363$1IfLeT) (if g$t$10363$1IfLeT g$t$10363$1IfLeT (begin '#f (if (not (g$bound-id-member?$9845$1IfLeT (car g$id*$10362$1IfLeT) (cdr g$id*$10362$1IfLeT))) (begin '#f (g$distinct-bound-ids?$9844$1IfLeT (cdr g$id*$10362$1IfLeT))) '#f))))) (null? g$id*$10362$1IfLeT))))) (g$bound-id-member?$9845$1IfLeT g$bound-id-member?$16149$1IfLeT (case-lambda ((g$id$10364$1IfLeT g$id*$10365$1IfLeT) (if (pair? g$id*$10365$1IfLeT) (begin '#f ((case-lambda ((g$t$10366$1IfLeT) (if g$t$10366$1IfLeT g$t$10366$1IfLeT (begin '#f (g$bound-id-member?$9845$1IfLeT g$id$10364$1IfLeT (cdr g$id*$10365$1IfLeT)))))) (g$bound-id=?$9841$1IfLeT g$id$10364$1IfLeT (car g$id*$10365$1IfLeT)))) '#f)))) (g$self-evaluating?$9846$1IfLeT g$self-evaluating?$16150$1IfLeT (case-lambda ((g$x$10367$1IfLeT) ((case-lambda ((g$t$10368$1IfLeT) (if g$t$10368$1IfLeT g$t$10368$1IfLeT ((case-lambda ((g$t$10369$1IfLeT) (if g$t$10369$1IfLeT g$t$10369$1IfLeT ((case-lambda ((g$t$10370$1IfLeT) (if g$t$10370$1IfLeT g$t$10370$1IfLeT ((case-lambda ((g$t$10371$1IfLeT) (if g$t$10371$1IfLeT g$t$10371$1IfLeT (begin '#f (bytevector? g$x$10367$1IfLeT))))) (boolean? g$x$10367$1IfLeT))))) (char? g$x$10367$1IfLeT))))) (string? g$x$10367$1IfLeT))))) (number? g$x$10367$1IfLeT))))) (g$strip-annotations$9847$1IfLeT g$strip-annotations$16151$1IfLeT (case-lambda ((g$x$10372$1IfLeT) (if (pair? g$x$10372$1IfLeT) (cons (g$strip-annotations$9847$1IfLeT (car g$x$10372$1IfLeT)) (g$strip-annotations$9847$1IfLeT (cdr g$x$10372$1IfLeT))) (if (vector? g$x$10372$1IfLeT) (vector-map g$strip-annotations$9847$1IfLeT g$x$10372$1IfLeT) (if (annotation? g$x$10372$1IfLeT) (annotation-stripped g$x$10372$1IfLeT) g$x$10372$1IfLeT)))))) (g$strip$9848$1IfLeT g$strip$16152$1IfLeT (case-lambda ((g$x$10373$1IfLeT g$m*$10374$1IfLeT) (if (g$top-marked?$9781$1IfLeT g$m*$10374$1IfLeT) (if ((case-lambda ((g$t$10375$1IfLeT) (if g$t$10375$1IfLeT g$t$10375$1IfLeT ((case-lambda ((g$t$10376$1IfLeT) (if g$t$10376$1IfLeT g$t$10376$1IfLeT (begin '#f (if (vector? g$x$10373$1IfLeT) (if (> (vector-length g$x$10373$1IfLeT) '0) (begin '#f (annotation? (vector-ref g$x$10373$1IfLeT '0))) '#f) '#f))))) (if (pair? g$x$10373$1IfLeT) (begin '#f (annotation? (car g$x$10373$1IfLeT))) '#f))))) (annotation? g$x$10373$1IfLeT)) (g$strip-annotations$9847$1IfLeT g$x$10373$1IfLeT) g$x$10373$1IfLeT) ((letrec ((g$f$10377$1IfLeT (case-lambda ((g$x$10378$1IfLeT) (if (g$stx?$9810$1IfLeT g$x$10378$1IfLeT) (g$strip$9848$1IfLeT (g$stx-expr$9812$1IfLeT g$x$10378$1IfLeT) (g$stx-mark*$9813$1IfLeT g$x$10378$1IfLeT)) (if (annotation? g$x$10378$1IfLeT) (annotation-stripped g$x$10378$1IfLeT) (if (pair? g$x$10378$1IfLeT) ((case-lambda ((g$a$10379$1IfLeT g$d$10380$1IfLeT) (if (if (eq? g$a$10379$1IfLeT (car g$x$10378$1IfLeT)) (begin '#f (eq? g$d$10380$1IfLeT (cdr g$x$10378$1IfLeT))) '#f) g$x$10378$1IfLeT (cons g$a$10379$1IfLeT g$d$10380$1IfLeT)))) (g$f$10377$1IfLeT (car g$x$10378$1IfLeT)) (g$f$10377$1IfLeT (cdr g$x$10378$1IfLeT))) (if (vector? g$x$10378$1IfLeT) ((case-lambda ((g$old$10381$1IfLeT) ((case-lambda ((g$new$10382$1IfLeT) (if (g$for-all$8490$1IfLeT eq? g$old$10381$1IfLeT g$new$10382$1IfLeT) g$x$10378$1IfLeT (list->vector g$new$10382$1IfLeT)))) (map g$f$10377$1IfLeT g$old$10381$1IfLeT)))) (vector->list g$x$10378$1IfLeT)) g$x$10378$1IfLeT)))))))) g$f$10377$1IfLeT) g$x$10373$1IfLeT))))) (g$stx->datum$9849$1IfLeT g$stx->datum$16153$1IfLeT (case-lambda ((g$x$10383$1IfLeT) (g$strip$9848$1IfLeT g$x$10383$1IfLeT '())))) (g$id->label$9850$1IfLeT g$id->label$16154$1IfLeT (case-lambda ((g$id$10384$1IfLeT) ((case-lambda ((g$t$10385$1IfLeT) (if g$t$10385$1IfLeT g$t$10385$1IfLeT (begin '#f ((case-lambda ((g$t$10386$1IfLeT) (if g$t$10386$1IfLeT ((case-lambda ((g$env$10387$1IfLeT) ((case-lambda ((g$rib$10388$1IfLeT) (call-with-values (case-lambda (() (g$gen-define-label+loc$9786$1IfLeT g$id$10384$1IfLeT g$rib$10388$1IfLeT))) (case-lambda ((g$lab$10391$1IfLeT g$loc_$10392$1IfLeT) ((case-lambda ((g$loc_$10393$1IfLeT g$lab$10394$1IfLeT) g$lab$10394$1IfLeT)) g$loc_$10392$1IfLeT g$lab$10391$1IfLeT)))))) (g$interaction-env-rib$10193$1IfLeT g$env$10387$1IfLeT)))) g$t$10386$1IfLeT) '#f))) (g$top-level-context$10227$1IfLeT)))))) (g$id->real-label$9851$1IfLeT g$id$10384$1IfLeT))))) (g$id->real-label$9851$1IfLeT g$id->real-label$16155$1IfLeT (case-lambda ((g$id$10395$1IfLeT) ((case-lambda ((g$sym$10396$1IfLeT) ((letrec ((g$search$10397$1IfLeT (case-lambda ((g$subst*$10398$1IfLeT g$mark*$10399$1IfLeT) (if (null? g$subst*$10398$1IfLeT) '#f (if (eq? (car g$subst*$10398$1IfLeT) 'shift) (g$search$10397$1IfLeT (cdr g$subst*$10398$1IfLeT) (cdr g$mark*$10399$1IfLeT)) ((case-lambda ((g$rib$10400$1IfLeT) (if (g$rib-sealed/freq$9796$1IfLeT g$rib$10400$1IfLeT) ((case-lambda ((g$sym*$10401$1IfLeT) ((letrec ((g$f$10402$1IfLeT (case-lambda ((g$i$10403$1IfLeT g$j$10404$1IfLeT) (if (= g$i$10403$1IfLeT g$j$10404$1IfLeT) (g$search$10397$1IfLeT (cdr g$subst*$10398$1IfLeT) g$mark*$10399$1IfLeT) (if (if (eq? (vector-ref g$sym*$10401$1IfLeT g$i$10403$1IfLeT) g$sym$10396$1IfLeT) (begin '#f (g$same-marks?$9840$1IfLeT g$mark*$10399$1IfLeT (vector-ref (g$rib-mark**$9794$1IfLeT g$rib$10400$1IfLeT) g$i$10403$1IfLeT))) '#f) ((case-lambda ((g$label$10405$1IfLeT) (begin (g$increment-rib-frequency!$9805$1IfLeT g$rib$10400$1IfLeT g$i$10403$1IfLeT) g$label$10405$1IfLeT))) (vector-ref (g$rib-label*$9795$1IfLeT g$rib$10400$1IfLeT) g$i$10403$1IfLeT)) (g$f$10402$1IfLeT (+ g$i$10403$1IfLeT '1) g$j$10404$1IfLeT))))))) g$f$10402$1IfLeT) '0 (vector-length g$sym*$10401$1IfLeT)))) (g$rib-sym*$9793$1IfLeT g$rib$10400$1IfLeT)) ((letrec ((g$f$10406$1IfLeT (case-lambda ((g$sym*$10407$1IfLeT g$mark**$10408$1IfLeT g$label*$10409$1IfLeT) (if (null? g$sym*$10407$1IfLeT) (g$search$10397$1IfLeT (cdr g$subst*$10398$1IfLeT) g$mark*$10399$1IfLeT) (if (if (eq? (car g$sym*$10407$1IfLeT) g$sym$10396$1IfLeT) (begin '#f (g$same-marks?$9840$1IfLeT (car g$mark**$10408$1IfLeT) g$mark*$10399$1IfLeT)) '#f) (car g$label*$10409$1IfLeT) (g$f$10406$1IfLeT (cdr g$sym*$10407$1IfLeT) (cdr g$mark**$10408$1IfLeT) (cdr g$label*$10409$1IfLeT)))))))) g$f$10406$1IfLeT) (g$rib-sym*$9793$1IfLeT g$rib$10400$1IfLeT) (g$rib-mark**$9794$1IfLeT g$rib$10400$1IfLeT) (g$rib-label*$9795$1IfLeT g$rib$10400$1IfLeT))))) (car g$subst*$10398$1IfLeT)))))))) g$search$10397$1IfLeT) (g$stx-subst*$9814$1IfLeT g$id$10395$1IfLeT) (g$stx-mark*$9813$1IfLeT g$id$10395$1IfLeT)))) (g$id->sym$9839$1IfLeT g$id$10395$1IfLeT))))) (g$label->binding$9852$1IfLeT g$label->binding$16156$1IfLeT (case-lambda ((g$x$10410$1IfLeT g$r$10411$1IfLeT) ((case-lambda ((g$t$10412$1IfLeT) (if g$t$10412$1IfLeT ((case-lambda ((g$b$10413$1IfLeT) (if (if (pair? g$b$10413$1IfLeT) (begin '#f (eq? (car g$b$10413$1IfLeT) '$core-rtd)) '#f) (cons '$rtd (map g$bless$10083$1IfLeT (cdr g$b$10413$1IfLeT))) (if (if (pair? g$b$10413$1IfLeT) (begin '#f (eq? (car g$b$10413$1IfLeT) 'global-rtd)) '#f) ((case-lambda ((g$lib$10414$1IfLeT g$loc$10415$1IfLeT) (cons '$rtd (symbol-value g$loc$10415$1IfLeT)))) (g$cadr$8070$1IfLeT g$b$10413$1IfLeT) (g$cddr$8072$1IfLeT g$b$10413$1IfLeT)) g$b$10413$1IfLeT)))) g$t$10412$1IfLeT) ((case-lambda ((g$t$10416$1IfLeT) (if g$t$10416$1IfLeT (cdr g$t$10416$1IfLeT) ((case-lambda ((g$t$10417$1IfLeT) (if g$t$10417$1IfLeT ((case-lambda ((g$env$10418$1IfLeT) ((case-lambda ((g$t$10419$1IfLeT) (if g$t$10419$1IfLeT ((case-lambda ((g$p$10420$1IfLeT) (g$cons*$8492$1IfLeT 'lexical (cdr g$p$10420$1IfLeT) '#f))) g$t$10419$1IfLeT) '(displaced-lexical . #f)))) (assq g$x$10410$1IfLeT (g$interaction-env-locs$10195$1IfLeT g$env$10418$1IfLeT))))) g$t$10417$1IfLeT) '(displaced-lexical . #f)))) (g$top-level-context$10227$1IfLeT))))) (assq g$x$10410$1IfLeT g$r$10411$1IfLeT))))) (g$imported-label->binding$9653$1IfLeT g$x$10410$1IfLeT))))) (g$make-binding$9853$1IfLeT g$make-binding$16157$1IfLeT cons) (g$binding-type$9854$1IfLeT g$binding-type$16158$1IfLeT car) (g$binding-value$9855$1IfLeT g$binding-value$16159$1IfLeT cdr) (g$raise-unbound-error$9856$1IfLeT g$raise-unbound-error$16160$1IfLeT (case-lambda ((g$id$10421$1IfLeT) (g$syntax-violation*$10220$1IfLeT '#f '"unbound identifier" g$id$10421$1IfLeT (g$make-undefined-violation$8826$1IfLeT))))) (g$syntax-type$9857$1IfLeT g$syntax-type$16161$1IfLeT (case-lambda ((g$e$10422$1IfLeT g$r$10423$1IfLeT) (if (g$id?$9838$1IfLeT g$e$10422$1IfLeT) ((case-lambda ((g$id$10424$1IfLeT) ((case-lambda ((g$label$10425$1IfLeT) ((case-lambda ((g$b$10426$1IfLeT) ((case-lambda ((g$type$10427$1IfLeT) ((case-lambda (() (begin (if g$label$10425$1IfLeT (void) (g$raise-unbound-error$9856$1IfLeT g$id$10424$1IfLeT)) ((case-lambda ((g$t$10428$1IfLeT) (if (memv g$t$10428$1IfLeT '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values g$type$10427$1IfLeT (g$binding-value$9855$1IfLeT g$b$10426$1IfLeT) g$id$10424$1IfLeT) (values 'other '#f '#f)))) g$type$10427$1IfLeT))))))) (g$binding-type$9854$1IfLeT g$b$10426$1IfLeT)))) (g$label->binding$9852$1IfLeT g$label$10425$1IfLeT g$r$10423$1IfLeT)))) (g$id->label$9850$1IfLeT g$id$10424$1IfLeT)))) g$e$10422$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$e$10422$1IfLeT) ((case-lambda ((g$id$10429$1IfLeT) (if (g$id?$9838$1IfLeT g$id$10429$1IfLeT) ((case-lambda ((g$label$10430$1IfLeT) ((case-lambda ((g$b$10431$1IfLeT) ((case-lambda ((g$type$10432$1IfLeT) ((case-lambda (() (begin (if g$label$10430$1IfLeT (void) (g$raise-unbound-error$9856$1IfLeT g$id$10429$1IfLeT)) ((case-lambda ((g$t$10433$1IfLeT) (if (memv g$t$10433$1IfLeT '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values g$type$10432$1IfLeT (g$binding-value$9855$1IfLeT g$b$10431$1IfLeT) g$id$10429$1IfLeT) (values 'call '#f '#f)))) g$type$10432$1IfLeT))))))) (g$binding-type$9854$1IfLeT g$b$10431$1IfLeT)))) (g$label->binding$9852$1IfLeT g$label$10430$1IfLeT g$r$10423$1IfLeT)))) (g$id->label$9850$1IfLeT g$id$10429$1IfLeT)) (values 'call '#f '#f)))) (g$syntax-car$9835$1IfLeT g$e$10422$1IfLeT)) ((case-lambda ((g$d$10434$1IfLeT) (if (g$self-evaluating?$9846$1IfLeT g$d$10434$1IfLeT) (values 'constant g$d$10434$1IfLeT '#f) (values 'other '#f '#f)))) (g$stx->datum$9849$1IfLeT g$e$10422$1IfLeT))))))) (g$sanitize-binding$9865$1IfLeT g$sanitize-binding$16162$1IfLeT (case-lambda ((g$x$10435$1IfLeT g$src$10436$1IfLeT) (if (procedure? g$x$10435$1IfLeT) (g$cons*$8492$1IfLeT 'local-macro g$x$10435$1IfLeT g$src$10436$1IfLeT) (if (if (pair? g$x$10435$1IfLeT) (if (eq? (car g$x$10435$1IfLeT) 'macro!) (begin '#f (procedure? (cdr g$x$10435$1IfLeT))) '#f) '#f) (g$cons*$8492$1IfLeT 'local-macro! (cdr g$x$10435$1IfLeT) g$src$10436$1IfLeT) (if (if (pair? g$x$10435$1IfLeT) (begin '#f (eq? (car g$x$10435$1IfLeT) '$rtd)) '#f) g$x$10435$1IfLeT (assertion-violation 'expand '"invalid transformer" g$x$10435$1IfLeT))))))) (g$make-variable-transformer$9866$1IfLeT g$make-variable-transformer$16163$1IfLeT (case-lambda ((g$x$10437$1IfLeT) (if (procedure? g$x$10437$1IfLeT) (cons 'macro! g$x$10437$1IfLeT) (assertion-violation 'make-variable-transformer '"not a procedure" g$x$10437$1IfLeT))))) (g$make-eval-transformer$9867$1IfLeT g$make-eval-transformer$16164$1IfLeT (case-lambda ((g$x$10438$1IfLeT) (g$sanitize-binding$9865$1IfLeT (eval-core (g$expanded->core$9366$1IfLeT g$x$10438$1IfLeT)) g$x$10438$1IfLeT)))) (g$parse-define$10060$1IfLeT g$parse-define$16165$1IfLeT (case-lambda ((g$x$10439$1IfLeT) ((case-lambda ((g$t$10440$1IfLeT) ((case-lambda ((g$ls/false$10441$1IfLeT) (if (if g$ls/false$10441$1IfLeT (begin '#f (apply (case-lambda ((g$id$10442$1IfLeT g$fmls$10443$1IfLeT g$b$10444$1IfLeT g$b*$10445$1IfLeT) (g$id?$9838$1IfLeT g$id$10442$1IfLeT))) g$ls/false$10441$1IfLeT)) '#f) (apply (case-lambda ((g$id$10446$1IfLeT g$fmls$10447$1IfLeT g$b$10448$1IfLeT g$b*$10449$1IfLeT) (begin (g$verify-formals$10135$1IfLeT g$fmls$10447$1IfLeT g$x$10439$1IfLeT) (values g$id$10446$1IfLeT (cons 'defun (cons g$fmls$10447$1IfLeT (cons g$b$10448$1IfLeT g$b*$10449$1IfLeT))))))) g$ls/false$10441$1IfLeT) ((case-lambda ((g$t$10450$1IfLeT) ((case-lambda ((g$ls/false$10451$1IfLeT) (if (if g$ls/false$10451$1IfLeT (begin '#f (apply (case-lambda ((g$id$10452$1IfLeT g$val$10453$1IfLeT) (g$id?$9838$1IfLeT g$id$10452$1IfLeT))) g$ls/false$10451$1IfLeT)) '#f) (apply (case-lambda ((g$id$10454$1IfLeT g$val$10455$1IfLeT) (values g$id$10454$1IfLeT (cons 'expr g$val$10455$1IfLeT)))) g$ls/false$10451$1IfLeT) ((case-lambda ((g$t$10456$1IfLeT) ((case-lambda ((g$ls/false$10457$1IfLeT) (if (if g$ls/false$10457$1IfLeT (begin '#f (apply (case-lambda ((g$id$10458$1IfLeT) (g$id?$9838$1IfLeT g$id$10458$1IfLeT))) g$ls/false$10457$1IfLeT)) '#f) (apply (case-lambda ((g$id$10459$1IfLeT) (values g$id$10459$1IfLeT (cons 'expr (g$bless$10083$1IfLeT '(void)))))) g$ls/false$10457$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10456$1IfLeT)))) ((case-lambda ((g$x$10460$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10460$1IfLeT) (begin '#f ((case-lambda ((g$q$10461$1IfLeT) (if g$q$10461$1IfLeT (begin '#f ((case-lambda ((g$r$10462$1IfLeT) (if g$r$10462$1IfLeT (begin '#f (append g$q$10461$1IfLeT g$r$10462$1IfLeT)) '#f))) ((case-lambda ((g$x$10463$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10463$1IfLeT) (begin '#f ((case-lambda ((g$q$10464$1IfLeT) (if g$q$10464$1IfLeT (begin '#f ((case-lambda ((g$r$10465$1IfLeT) (if g$r$10465$1IfLeT (begin '#f (append g$q$10464$1IfLeT g$r$10465$1IfLeT)) '#f))) ((case-lambda ((g$x$10466$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10466$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10463$1IfLeT)))) '#f))) ((case-lambda ((g$x$10467$1IfLeT) (list g$x$10467$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10463$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10460$1IfLeT)))) '#f))) ((case-lambda ((g$x$10468$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10460$1IfLeT)))) '#f))) g$t$10456$1IfLeT)))) g$t$10450$1IfLeT)))) ((case-lambda ((g$x$10469$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10469$1IfLeT) (begin '#f ((case-lambda ((g$q$10470$1IfLeT) (if g$q$10470$1IfLeT (begin '#f ((case-lambda ((g$r$10471$1IfLeT) (if g$r$10471$1IfLeT (begin '#f (append g$q$10470$1IfLeT g$r$10471$1IfLeT)) '#f))) ((case-lambda ((g$x$10472$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10472$1IfLeT) (begin '#f ((case-lambda ((g$q$10473$1IfLeT) (if g$q$10473$1IfLeT (begin '#f ((case-lambda ((g$r$10474$1IfLeT) (if g$r$10474$1IfLeT (begin '#f (append g$q$10473$1IfLeT g$r$10474$1IfLeT)) '#f))) ((case-lambda ((g$x$10475$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10475$1IfLeT) (begin '#f ((case-lambda ((g$q$10476$1IfLeT) (if g$q$10476$1IfLeT (begin '#f ((case-lambda ((g$r$10477$1IfLeT) (if g$r$10477$1IfLeT (begin '#f (append g$q$10476$1IfLeT g$r$10477$1IfLeT)) '#f))) ((case-lambda ((g$x$10478$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10478$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10475$1IfLeT)))) '#f))) ((case-lambda ((g$x$10479$1IfLeT) (list g$x$10479$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10475$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10472$1IfLeT)))) '#f))) ((case-lambda ((g$x$10480$1IfLeT) (list g$x$10480$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10472$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10469$1IfLeT)))) '#f))) ((case-lambda ((g$x$10481$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10469$1IfLeT)))) '#f))) g$t$10450$1IfLeT)))) g$t$10440$1IfLeT)))) ((case-lambda ((g$x$10482$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10482$1IfLeT) (begin '#f ((case-lambda ((g$q$10483$1IfLeT) (if g$q$10483$1IfLeT (begin '#f ((case-lambda ((g$r$10484$1IfLeT) (if g$r$10484$1IfLeT (begin '#f (append g$q$10483$1IfLeT g$r$10484$1IfLeT)) '#f))) ((case-lambda ((g$x$10485$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10485$1IfLeT) (begin '#f ((case-lambda ((g$q$10486$1IfLeT) (if g$q$10486$1IfLeT (begin '#f ((case-lambda ((g$r$10487$1IfLeT) (if g$r$10487$1IfLeT (begin '#f (append g$q$10486$1IfLeT g$r$10487$1IfLeT)) '#f))) ((case-lambda ((g$x$10488$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10488$1IfLeT) (begin '#f ((case-lambda ((g$q$10489$1IfLeT) (if g$q$10489$1IfLeT (begin '#f ((case-lambda ((g$r$10490$1IfLeT) (if g$r$10490$1IfLeT (begin '#f (append g$q$10489$1IfLeT g$r$10490$1IfLeT)) '#f))) ((letrec ((g$f$10491$1IfLeT (case-lambda ((g$x$10492$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10492$1IfLeT) ((case-lambda ((g$cars/f$10493$1IfLeT) (if g$cars/f$10493$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10494$1IfLeT) (if g$cdrs/f$10494$1IfLeT (begin '#f (map cons g$cars/f$10493$1IfLeT g$cdrs/f$10494$1IfLeT)) '#f))) (g$f$10491$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10492$1IfLeT)))) '#f))) ((case-lambda ((g$x$10495$1IfLeT) (list g$x$10495$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10492$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10492$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$10491$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10488$1IfLeT)))) '#f))) ((case-lambda ((g$x$10496$1IfLeT) (list g$x$10496$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10488$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10485$1IfLeT)))) '#f))) ((case-lambda ((g$x$10497$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10497$1IfLeT) (begin '#f ((case-lambda ((g$q$10498$1IfLeT) (if g$q$10498$1IfLeT (begin '#f ((case-lambda ((g$r$10499$1IfLeT) (if g$r$10499$1IfLeT (begin '#f (append g$q$10498$1IfLeT g$r$10499$1IfLeT)) '#f))) ((case-lambda ((g$x$10500$1IfLeT) (list g$x$10500$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$10497$1IfLeT)))) '#f))) ((case-lambda ((g$x$10501$1IfLeT) (list g$x$10501$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10497$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$10485$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10482$1IfLeT)))) '#f))) ((case-lambda ((g$x$10502$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10482$1IfLeT)))) '#f))) g$t$10440$1IfLeT)))) g$x$10439$1IfLeT)))) (g$parse-define-syntax$10061$1IfLeT g$parse-define-syntax$16166$1IfLeT (case-lambda ((g$x$10503$1IfLeT) ((case-lambda ((g$t$10504$1IfLeT) ((case-lambda ((g$ls/false$10505$1IfLeT) (if (if g$ls/false$10505$1IfLeT (begin '#f (apply (case-lambda ((g$id$10506$1IfLeT g$val$10507$1IfLeT) (g$id?$9838$1IfLeT g$id$10506$1IfLeT))) g$ls/false$10505$1IfLeT)) '#f) (apply (case-lambda ((g$id$10508$1IfLeT g$val$10509$1IfLeT) (values g$id$10508$1IfLeT g$val$10509$1IfLeT))) g$ls/false$10505$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10504$1IfLeT)))) ((case-lambda ((g$x$10510$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10510$1IfLeT) (begin '#f ((case-lambda ((g$q$10511$1IfLeT) (if g$q$10511$1IfLeT (begin '#f ((case-lambda ((g$r$10512$1IfLeT) (if g$r$10512$1IfLeT (begin '#f (append g$q$10511$1IfLeT g$r$10512$1IfLeT)) '#f))) ((case-lambda ((g$x$10513$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10513$1IfLeT) (begin '#f ((case-lambda ((g$q$10514$1IfLeT) (if g$q$10514$1IfLeT (begin '#f ((case-lambda ((g$r$10515$1IfLeT) (if g$r$10515$1IfLeT (begin '#f (append g$q$10514$1IfLeT g$r$10515$1IfLeT)) '#f))) ((case-lambda ((g$x$10516$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10516$1IfLeT) (begin '#f ((case-lambda ((g$q$10517$1IfLeT) (if g$q$10517$1IfLeT (begin '#f ((case-lambda ((g$r$10518$1IfLeT) (if g$r$10518$1IfLeT (begin '#f (append g$q$10517$1IfLeT g$r$10518$1IfLeT)) '#f))) ((case-lambda ((g$x$10519$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10519$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10516$1IfLeT)))) '#f))) ((case-lambda ((g$x$10520$1IfLeT) (list g$x$10520$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10516$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10513$1IfLeT)))) '#f))) ((case-lambda ((g$x$10521$1IfLeT) (list g$x$10521$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10513$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10510$1IfLeT)))) '#f))) ((case-lambda ((g$x$10522$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10510$1IfLeT)))) '#f))) g$t$10504$1IfLeT)))) g$x$10503$1IfLeT)))) (g$scheme-stx-hashtable$10062$1IfLeT g$scheme-stx-hashtable$16167$1IfLeT (g$make-eq-hashtable$8334$1IfLeT)) (g$scheme-stx$10063$1IfLeT g$scheme-stx$16168$1IfLeT (case-lambda ((g$sym$10523$1IfLeT) ((case-lambda ((g$t$10524$1IfLeT) (if g$t$10524$1IfLeT g$t$10524$1IfLeT (begin '#f ((case-lambda ((g$subst$10525$1IfLeT) ((case-lambda ((g$stx$10526$1IfLeT) ((case-lambda ((g$stx$10527$1IfLeT) ((case-lambda (() (begin (g$hashtable-set!$8338$1IfLeT g$scheme-stx-hashtable$10062$1IfLeT g$sym$10523$1IfLeT g$stx$10527$1IfLeT) g$stx$10527$1IfLeT)))))) ((case-lambda ((g$t$10528$1IfLeT) (if g$t$10528$1IfLeT ((case-lambda ((g$x$10529$1IfLeT) ((case-lambda ((g$name$10530$1IfLeT g$label$10531$1IfLeT) (g$add-subst$9828$1IfLeT (g$make-rib$9792$1IfLeT (list g$name$10530$1IfLeT) (list g$top-mark*$9780$1IfLeT) (list g$label$10531$1IfLeT) '#f) g$stx$10526$1IfLeT))) (car g$x$10529$1IfLeT) (cdr g$x$10529$1IfLeT)))) g$t$10528$1IfLeT) g$stx$10526$1IfLeT))) (assq g$sym$10523$1IfLeT g$subst$10525$1IfLeT))))) (g$mkstx$9826$1IfLeT g$sym$10523$1IfLeT g$top-mark*$9780$1IfLeT '() '())))) (g$library-subst$9611$1IfLeT (g$find-library-by-name$9647$1IfLeT '(psyntax system $all)))))))) (g$hashtable-ref$8337$1IfLeT g$scheme-stx-hashtable$10062$1IfLeT g$sym$10523$1IfLeT '#f))))) (g$lexical-var$10064$1IfLeT g$lexical-var$16169$1IfLeT car) (g$lexical-mutable?$10065$1IfLeT g$lexical-mutable?$16170$1IfLeT cdr) (g$set-lexical-mutable!$10066$1IfLeT g$set-lexical-mutable!$16171$1IfLeT set-cdr!) (g$add-lexical$10067$1IfLeT g$add-lexical$16172$1IfLeT (case-lambda ((g$lab$10532$1IfLeT g$lex$10533$1IfLeT g$r$10534$1IfLeT) (cons (g$cons*$8492$1IfLeT g$lab$10532$1IfLeT 'lexical g$lex$10533$1IfLeT '#f) g$r$10534$1IfLeT)))) (g$add-lexicals$10068$1IfLeT g$add-lexicals$16173$1IfLeT (case-lambda ((g$lab*$10535$1IfLeT g$lex*$10536$1IfLeT g$r$10537$1IfLeT) (if (null? g$lab*$10535$1IfLeT) g$r$10537$1IfLeT (g$add-lexicals$10068$1IfLeT (cdr g$lab*$10535$1IfLeT) (cdr g$lex*$10536$1IfLeT) (g$add-lexical$10067$1IfLeT (car g$lab*$10535$1IfLeT) (car g$lex*$10536$1IfLeT) g$r$10537$1IfLeT)))))) (g$letrec-helper$10069$1IfLeT g$letrec-helper$16174$1IfLeT (case-lambda ((g$e$10538$1IfLeT g$r$10539$1IfLeT g$mr$10540$1IfLeT g$build$10541$1IfLeT) ((case-lambda ((g$t$10542$1IfLeT) ((case-lambda ((g$ls/false$10543$1IfLeT) (if (if g$ls/false$10543$1IfLeT (begin '#f (apply (case-lambda ((g$lhs*$10544$1IfLeT g$rhs*$10545$1IfLeT g$b$10546$1IfLeT g$b*$10547$1IfLeT) '#t)) g$ls/false$10543$1IfLeT)) '#f) (apply (case-lambda ((g$lhs*$10548$1IfLeT g$rhs*$10549$1IfLeT g$b$10550$1IfLeT g$b*$10551$1IfLeT) (if (not (g$valid-bound-ids?$9843$1IfLeT g$lhs*$10548$1IfLeT)) (g$invalid-fmls-error$10085$1IfLeT g$e$10538$1IfLeT g$lhs*$10548$1IfLeT) ((case-lambda ((g$lex*$10552$1IfLeT g$lab*$10553$1IfLeT) ((case-lambda ((g$rib$10554$1IfLeT g$r$10555$1IfLeT) ((case-lambda ((g$body$10556$1IfLeT g$rhs*$10557$1IfLeT) (g$build$10541$1IfLeT '#f g$lex*$10552$1IfLeT g$rhs*$10557$1IfLeT g$body$10556$1IfLeT))) (g$chi-internal$10144$1IfLeT (g$add-subst$9828$1IfLeT g$rib$10554$1IfLeT (cons g$b$10550$1IfLeT g$b*$10551$1IfLeT)) g$r$10555$1IfLeT g$mr$10540$1IfLeT) (g$chi-expr*$10131$1IfLeT (map (case-lambda ((g$x$10558$1IfLeT) (g$add-subst$9828$1IfLeT g$rib$10554$1IfLeT g$x$10558$1IfLeT))) g$rhs*$10549$1IfLeT) g$r$10555$1IfLeT g$mr$10540$1IfLeT)))) (g$make-full-rib$9806$1IfLeT g$lhs*$10548$1IfLeT g$lab*$10553$1IfLeT) (g$add-lexicals$10068$1IfLeT g$lab*$10553$1IfLeT g$lex*$10552$1IfLeT g$r$10539$1IfLeT)))) (map g$gen-lexical$9782$1IfLeT g$lhs*$10548$1IfLeT) (map g$gen-label$9784$1IfLeT g$lhs*$10548$1IfLeT))))) g$ls/false$10543$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10542$1IfLeT)))) ((case-lambda ((g$x$10559$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10559$1IfLeT) (begin '#f ((case-lambda ((g$q$10560$1IfLeT) (if g$q$10560$1IfLeT (begin '#f ((case-lambda ((g$r$10561$1IfLeT) (if g$r$10561$1IfLeT (begin '#f (append g$q$10560$1IfLeT g$r$10561$1IfLeT)) '#f))) ((case-lambda ((g$x$10562$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10562$1IfLeT) (begin '#f ((case-lambda ((g$q$10563$1IfLeT) (if g$q$10563$1IfLeT (begin '#f ((case-lambda ((g$r$10564$1IfLeT) (if g$r$10564$1IfLeT (begin '#f (append g$q$10563$1IfLeT g$r$10564$1IfLeT)) '#f))) ((case-lambda ((g$x$10565$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10565$1IfLeT) (begin '#f ((case-lambda ((g$q$10566$1IfLeT) (if g$q$10566$1IfLeT (begin '#f ((case-lambda ((g$r$10567$1IfLeT) (if g$r$10567$1IfLeT (begin '#f (append g$q$10566$1IfLeT g$r$10567$1IfLeT)) '#f))) ((letrec ((g$f$10568$1IfLeT (case-lambda ((g$x$10569$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10569$1IfLeT) ((case-lambda ((g$cars/f$10570$1IfLeT) (if g$cars/f$10570$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10571$1IfLeT) (if g$cdrs/f$10571$1IfLeT (begin '#f (map cons g$cars/f$10570$1IfLeT g$cdrs/f$10571$1IfLeT)) '#f))) (g$f$10568$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10569$1IfLeT)))) '#f))) ((case-lambda ((g$x$10572$1IfLeT) (list g$x$10572$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10569$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10569$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$10568$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10565$1IfLeT)))) '#f))) ((case-lambda ((g$x$10573$1IfLeT) (list g$x$10573$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10565$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10562$1IfLeT)))) '#f))) ((letrec ((g$f$10574$1IfLeT (case-lambda ((g$x$10575$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10575$1IfLeT) ((case-lambda ((g$cars/f$10576$1IfLeT) (if g$cars/f$10576$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10577$1IfLeT) (if g$cdrs/f$10577$1IfLeT (begin '#f (map cons g$cars/f$10576$1IfLeT g$cdrs/f$10577$1IfLeT)) '#f))) (g$f$10574$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10575$1IfLeT)))) '#f))) ((case-lambda ((g$x$10578$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10578$1IfLeT) (begin '#f ((case-lambda ((g$q$10579$1IfLeT) (if g$q$10579$1IfLeT (begin '#f ((case-lambda ((g$r$10580$1IfLeT) (if g$r$10580$1IfLeT (begin '#f (append g$q$10579$1IfLeT g$r$10580$1IfLeT)) '#f))) ((case-lambda ((g$x$10581$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10581$1IfLeT) (begin '#f ((case-lambda ((g$q$10582$1IfLeT) (if g$q$10582$1IfLeT (begin '#f ((case-lambda ((g$r$10583$1IfLeT) (if g$r$10583$1IfLeT (begin '#f (append g$q$10582$1IfLeT g$r$10583$1IfLeT)) '#f))) ((case-lambda ((g$x$10584$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10584$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10581$1IfLeT)))) '#f))) ((case-lambda ((g$x$10585$1IfLeT) (list g$x$10585$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10581$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10578$1IfLeT)))) '#f))) ((case-lambda ((g$x$10586$1IfLeT) (list g$x$10586$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10578$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$10575$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10575$1IfLeT) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$10574$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$10562$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10559$1IfLeT)))) '#f))) ((case-lambda ((g$x$10587$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10559$1IfLeT)))) '#f))) g$t$10542$1IfLeT)))) g$e$10538$1IfLeT)))) (g$letrec-transformer$10070$1IfLeT g$letrec-transformer$16175$1IfLeT (case-lambda ((g$e$10588$1IfLeT g$r$10589$1IfLeT g$mr$10590$1IfLeT) (g$letrec-helper$10069$1IfLeT g$e$10588$1IfLeT g$r$10589$1IfLeT g$mr$10590$1IfLeT g$build-letrec$9774$1IfLeT)))) (g$letrec*-transformer$10071$1IfLeT g$letrec*-transformer$16176$1IfLeT (case-lambda ((g$e$10591$1IfLeT g$r$10592$1IfLeT g$mr$10593$1IfLeT) (g$letrec-helper$10069$1IfLeT g$e$10591$1IfLeT g$r$10592$1IfLeT g$mr$10593$1IfLeT g$build-letrec*$9775$1IfLeT)))) (g$fluid-let-syntax-transformer$10072$1IfLeT g$fluid-let-syntax-transformer$16177$1IfLeT (case-lambda ((g$e$10594$1IfLeT g$r$10595$1IfLeT g$mr$10596$1IfLeT) (letrec* ((g$lookup$10597$1IfLeT (case-lambda ((g$x$10640$1IfLeT) ((case-lambda ((g$t$10641$1IfLeT) (if g$t$10641$1IfLeT g$t$10641$1IfLeT (begin '#f (g$syntax-violation$10221$1IfLeT '#f '"unbound identifier" g$e$10594$1IfLeT g$x$10640$1IfLeT))))) (g$id->label$9850$1IfLeT g$x$10640$1IfLeT)))))) ((case-lambda ((g$t$10598$1IfLeT) ((case-lambda ((g$ls/false$10599$1IfLeT) (if (if g$ls/false$10599$1IfLeT (begin '#f (apply (case-lambda ((g$lhs*$10600$1IfLeT g$rhs*$10601$1IfLeT g$b$10602$1IfLeT g$b*$10603$1IfLeT) '#t)) g$ls/false$10599$1IfLeT)) '#f) (apply (case-lambda ((g$lhs*$10604$1IfLeT g$rhs*$10605$1IfLeT g$b$10606$1IfLeT g$b*$10607$1IfLeT) (if (not (g$valid-bound-ids?$9843$1IfLeT g$lhs*$10604$1IfLeT)) (g$invalid-fmls-error$10085$1IfLeT g$e$10594$1IfLeT g$lhs*$10604$1IfLeT) ((case-lambda ((g$lab*$10608$1IfLeT g$rhs*$10609$1IfLeT) (g$chi-internal$10144$1IfLeT (cons g$b$10606$1IfLeT g$b*$10607$1IfLeT) (append (map cons g$lab*$10608$1IfLeT g$rhs*$10609$1IfLeT) g$r$10595$1IfLeT) (append (map cons g$lab*$10608$1IfLeT g$rhs*$10609$1IfLeT) g$mr$10596$1IfLeT)))) (map g$lookup$10597$1IfLeT g$lhs*$10604$1IfLeT) (map (case-lambda ((g$x$10610$1IfLeT) (g$make-eval-transformer$9867$1IfLeT (g$expand-transformer$10160$1IfLeT g$x$10610$1IfLeT g$mr$10596$1IfLeT)))) g$rhs*$10605$1IfLeT))))) g$ls/false$10599$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10598$1IfLeT)))) ((case-lambda ((g$x$10611$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10611$1IfLeT) (begin '#f ((case-lambda ((g$q$10612$1IfLeT) (if g$q$10612$1IfLeT (begin '#f ((case-lambda ((g$r$10613$1IfLeT) (if g$r$10613$1IfLeT (begin '#f (append g$q$10612$1IfLeT g$r$10613$1IfLeT)) '#f))) ((case-lambda ((g$x$10614$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10614$1IfLeT) (begin '#f ((case-lambda ((g$q$10615$1IfLeT) (if g$q$10615$1IfLeT (begin '#f ((case-lambda ((g$r$10616$1IfLeT) (if g$r$10616$1IfLeT (begin '#f (append g$q$10615$1IfLeT g$r$10616$1IfLeT)) '#f))) ((case-lambda ((g$x$10617$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10617$1IfLeT) (begin '#f ((case-lambda ((g$q$10618$1IfLeT) (if g$q$10618$1IfLeT (begin '#f ((case-lambda ((g$r$10619$1IfLeT) (if g$r$10619$1IfLeT (begin '#f (append g$q$10618$1IfLeT g$r$10619$1IfLeT)) '#f))) ((letrec ((g$f$10620$1IfLeT (case-lambda ((g$x$10621$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10621$1IfLeT) ((case-lambda ((g$cars/f$10622$1IfLeT) (if g$cars/f$10622$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10623$1IfLeT) (if g$cdrs/f$10623$1IfLeT (begin '#f (map cons g$cars/f$10622$1IfLeT g$cdrs/f$10623$1IfLeT)) '#f))) (g$f$10620$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10621$1IfLeT)))) '#f))) ((case-lambda ((g$x$10624$1IfLeT) (list g$x$10624$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10621$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10621$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$10620$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10617$1IfLeT)))) '#f))) ((case-lambda ((g$x$10625$1IfLeT) (list g$x$10625$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10617$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10614$1IfLeT)))) '#f))) ((letrec ((g$f$10626$1IfLeT (case-lambda ((g$x$10627$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10627$1IfLeT) ((case-lambda ((g$cars/f$10628$1IfLeT) (if g$cars/f$10628$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10629$1IfLeT) (if g$cdrs/f$10629$1IfLeT (begin '#f (map cons g$cars/f$10628$1IfLeT g$cdrs/f$10629$1IfLeT)) '#f))) (g$f$10626$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10627$1IfLeT)))) '#f))) ((case-lambda ((g$x$10630$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10630$1IfLeT) (begin '#f ((case-lambda ((g$q$10631$1IfLeT) (if g$q$10631$1IfLeT (begin '#f ((case-lambda ((g$r$10632$1IfLeT) (if g$r$10632$1IfLeT (begin '#f (append g$q$10631$1IfLeT g$r$10632$1IfLeT)) '#f))) ((case-lambda ((g$x$10633$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10633$1IfLeT) (begin '#f ((case-lambda ((g$q$10634$1IfLeT) (if g$q$10634$1IfLeT (begin '#f ((case-lambda ((g$r$10635$1IfLeT) (if g$r$10635$1IfLeT (begin '#f (append g$q$10634$1IfLeT g$r$10635$1IfLeT)) '#f))) ((case-lambda ((g$x$10636$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10636$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10633$1IfLeT)))) '#f))) ((case-lambda ((g$x$10637$1IfLeT) (list g$x$10637$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10633$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10630$1IfLeT)))) '#f))) ((case-lambda ((g$x$10638$1IfLeT) (list g$x$10638$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10630$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$10627$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10627$1IfLeT) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$10626$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$10614$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10611$1IfLeT)))) '#f))) ((case-lambda ((g$x$10639$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10611$1IfLeT)))) '#f))) g$t$10598$1IfLeT)))) g$e$10594$1IfLeT))))) (g$type-descriptor-transformer$10073$1IfLeT g$type-descriptor-transformer$16178$1IfLeT (case-lambda ((g$e$10642$1IfLeT g$r$10643$1IfLeT g$mr$10644$1IfLeT) ((case-lambda ((g$t$10645$1IfLeT) ((case-lambda ((g$ls/false$10646$1IfLeT) (if (if g$ls/false$10646$1IfLeT (begin '#f (apply (case-lambda ((g$id$10647$1IfLeT) (g$id?$9838$1IfLeT g$id$10647$1IfLeT))) g$ls/false$10646$1IfLeT)) '#f) (apply (case-lambda ((g$id$10648$1IfLeT) ((case-lambda ((g$lab$10649$1IfLeT) ((case-lambda ((g$b$10650$1IfLeT) ((case-lambda ((g$type$10651$1IfLeT) ((case-lambda (() (begin (if g$lab$10649$1IfLeT (void) (g$raise-unbound-error$9856$1IfLeT g$id$10648$1IfLeT)) (if (if (eq? g$type$10651$1IfLeT '$rtd) (begin '#f (not (list? (g$binding-value$9855$1IfLeT g$b$10650$1IfLeT)))) '#f) (void) (g$syntax-violation$10221$1IfLeT '#f '"not a record type" g$e$10642$1IfLeT)) (list 'quote (g$binding-value$9855$1IfLeT g$b$10650$1IfLeT)))))))) (g$binding-type$9854$1IfLeT g$b$10650$1IfLeT)))) (g$label->binding$9852$1IfLeT g$lab$10649$1IfLeT g$r$10643$1IfLeT)))) (g$id->label$9850$1IfLeT g$id$10648$1IfLeT)))) g$ls/false$10646$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10645$1IfLeT)))) ((case-lambda ((g$x$10652$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10652$1IfLeT) (begin '#f ((case-lambda ((g$q$10653$1IfLeT) (if g$q$10653$1IfLeT (begin '#f ((case-lambda ((g$r$10654$1IfLeT) (if g$r$10654$1IfLeT (begin '#f (append g$q$10653$1IfLeT g$r$10654$1IfLeT)) '#f))) ((case-lambda ((g$x$10655$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10655$1IfLeT) (begin '#f ((case-lambda ((g$q$10656$1IfLeT) (if g$q$10656$1IfLeT (begin '#f ((case-lambda ((g$r$10657$1IfLeT) (if g$r$10657$1IfLeT (begin '#f (append g$q$10656$1IfLeT g$r$10657$1IfLeT)) '#f))) ((case-lambda ((g$x$10658$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10658$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10655$1IfLeT)))) '#f))) ((case-lambda ((g$x$10659$1IfLeT) (list g$x$10659$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10655$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10652$1IfLeT)))) '#f))) ((case-lambda ((g$x$10660$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10652$1IfLeT)))) '#f))) g$t$10645$1IfLeT)))) g$e$10642$1IfLeT)))) (g$record-type-descriptor-transformer$10074$1IfLeT g$record-type-descriptor-transformer$16179$1IfLeT (case-lambda ((g$e$10661$1IfLeT g$r$10662$1IfLeT g$mr$10663$1IfLeT) ((case-lambda ((g$t$10664$1IfLeT) ((case-lambda ((g$ls/false$10665$1IfLeT) (if (if g$ls/false$10665$1IfLeT (begin '#f (apply (case-lambda ((g$id$10666$1IfLeT) (g$id?$9838$1IfLeT g$id$10666$1IfLeT))) g$ls/false$10665$1IfLeT)) '#f) (apply (case-lambda ((g$id$10667$1IfLeT) ((case-lambda ((g$lab$10668$1IfLeT) ((case-lambda ((g$b$10669$1IfLeT) ((case-lambda ((g$type$10670$1IfLeT) ((case-lambda (() (begin (if g$lab$10668$1IfLeT (void) (g$raise-unbound-error$9856$1IfLeT g$id$10667$1IfLeT)) (if (if (eq? g$type$10670$1IfLeT '$rtd) (begin '#f (list? (g$binding-value$9855$1IfLeT g$b$10669$1IfLeT))) '#f) (void) (g$syntax-violation$10221$1IfLeT '#f '"not a record type" g$e$10661$1IfLeT)) (g$chi-expr$10133$1IfLeT (car (g$binding-value$9855$1IfLeT g$b$10669$1IfLeT)) g$r$10662$1IfLeT g$mr$10663$1IfLeT))))))) (g$binding-type$9854$1IfLeT g$b$10669$1IfLeT)))) (g$label->binding$9852$1IfLeT g$lab$10668$1IfLeT g$r$10662$1IfLeT)))) (g$id->label$9850$1IfLeT g$id$10667$1IfLeT)))) g$ls/false$10665$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10664$1IfLeT)))) ((case-lambda ((g$x$10671$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10671$1IfLeT) (begin '#f ((case-lambda ((g$q$10672$1IfLeT) (if g$q$10672$1IfLeT (begin '#f ((case-lambda ((g$r$10673$1IfLeT) (if g$r$10673$1IfLeT (begin '#f (append g$q$10672$1IfLeT g$r$10673$1IfLeT)) '#f))) ((case-lambda ((g$x$10674$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10674$1IfLeT) (begin '#f ((case-lambda ((g$q$10675$1IfLeT) (if g$q$10675$1IfLeT (begin '#f ((case-lambda ((g$r$10676$1IfLeT) (if g$r$10676$1IfLeT (begin '#f (append g$q$10675$1IfLeT g$r$10676$1IfLeT)) '#f))) ((case-lambda ((g$x$10677$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10677$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10674$1IfLeT)))) '#f))) ((case-lambda ((g$x$10678$1IfLeT) (list g$x$10678$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10674$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10671$1IfLeT)))) '#f))) ((case-lambda ((g$x$10679$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10671$1IfLeT)))) '#f))) g$t$10664$1IfLeT)))) g$e$10661$1IfLeT)))) (g$record-constructor-descriptor-transformer$10075$1IfLeT g$record-constructor-descriptor-transformer$16180$1IfLeT (case-lambda ((g$e$10680$1IfLeT g$r$10681$1IfLeT g$mr$10682$1IfLeT) ((case-lambda ((g$t$10683$1IfLeT) ((case-lambda ((g$ls/false$10684$1IfLeT) (if (if g$ls/false$10684$1IfLeT (begin '#f (apply (case-lambda ((g$id$10685$1IfLeT) (g$id?$9838$1IfLeT g$id$10685$1IfLeT))) g$ls/false$10684$1IfLeT)) '#f) (apply (case-lambda ((g$id$10686$1IfLeT) ((case-lambda ((g$lab$10687$1IfLeT) ((case-lambda ((g$b$10688$1IfLeT) ((case-lambda ((g$type$10689$1IfLeT) ((case-lambda (() (begin (if g$lab$10687$1IfLeT (void) (g$raise-unbound-error$9856$1IfLeT g$id$10686$1IfLeT)) (if (if (eq? g$type$10689$1IfLeT '$rtd) (begin '#f (list? (g$binding-value$9855$1IfLeT g$b$10688$1IfLeT))) '#f) (void) (g$syntax-violation$10221$1IfLeT '#f '"invalid type" g$e$10680$1IfLeT)) (g$chi-expr$10133$1IfLeT (g$cadr$8070$1IfLeT (g$binding-value$9855$1IfLeT g$b$10688$1IfLeT)) g$r$10681$1IfLeT g$mr$10682$1IfLeT))))))) (g$binding-type$9854$1IfLeT g$b$10688$1IfLeT)))) (g$label->binding$9852$1IfLeT g$lab$10687$1IfLeT g$r$10681$1IfLeT)))) (g$id->label$9850$1IfLeT g$id$10686$1IfLeT)))) g$ls/false$10684$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10683$1IfLeT)))) ((case-lambda ((g$x$10690$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10690$1IfLeT) (begin '#f ((case-lambda ((g$q$10691$1IfLeT) (if g$q$10691$1IfLeT (begin '#f ((case-lambda ((g$r$10692$1IfLeT) (if g$r$10692$1IfLeT (begin '#f (append g$q$10691$1IfLeT g$r$10692$1IfLeT)) '#f))) ((case-lambda ((g$x$10693$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10693$1IfLeT) (begin '#f ((case-lambda ((g$q$10694$1IfLeT) (if g$q$10694$1IfLeT (begin '#f ((case-lambda ((g$r$10695$1IfLeT) (if g$r$10695$1IfLeT (begin '#f (append g$q$10694$1IfLeT g$r$10695$1IfLeT)) '#f))) ((case-lambda ((g$x$10696$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10696$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10693$1IfLeT)))) '#f))) ((case-lambda ((g$x$10697$1IfLeT) (list g$x$10697$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10693$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10690$1IfLeT)))) '#f))) ((case-lambda ((g$x$10698$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10690$1IfLeT)))) '#f))) g$t$10683$1IfLeT)))) g$e$10680$1IfLeT)))) (g$when-transformer$10076$1IfLeT g$when-transformer$16181$1IfLeT (case-lambda ((g$e$10699$1IfLeT g$r$10700$1IfLeT g$mr$10701$1IfLeT) ((case-lambda ((g$t$10702$1IfLeT) ((case-lambda ((g$ls/false$10703$1IfLeT) (if (if g$ls/false$10703$1IfLeT (begin '#f (apply (case-lambda ((g$test$10704$1IfLeT g$e$10705$1IfLeT g$e*$10706$1IfLeT) '#t)) g$ls/false$10703$1IfLeT)) '#f) (apply (case-lambda ((g$test$10707$1IfLeT g$e$10708$1IfLeT g$e*$10709$1IfLeT) (list 'if (g$chi-expr$10133$1IfLeT g$test$10707$1IfLeT g$r$10700$1IfLeT g$mr$10701$1IfLeT) (g$build-sequence$9772$1IfLeT '#f (g$chi-expr*$10131$1IfLeT (cons g$e$10708$1IfLeT g$e*$10709$1IfLeT) g$r$10700$1IfLeT g$mr$10701$1IfLeT)) (g$build-void$9773$1IfLeT)))) g$ls/false$10703$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10702$1IfLeT)))) ((case-lambda ((g$x$10710$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10710$1IfLeT) (begin '#f ((case-lambda ((g$q$10711$1IfLeT) (if g$q$10711$1IfLeT (begin '#f ((case-lambda ((g$r$10712$1IfLeT) (if g$r$10712$1IfLeT (begin '#f (append g$q$10711$1IfLeT g$r$10712$1IfLeT)) '#f))) ((case-lambda ((g$x$10713$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10713$1IfLeT) (begin '#f ((case-lambda ((g$q$10714$1IfLeT) (if g$q$10714$1IfLeT (begin '#f ((case-lambda ((g$r$10715$1IfLeT) (if g$r$10715$1IfLeT (begin '#f (append g$q$10714$1IfLeT g$r$10715$1IfLeT)) '#f))) ((case-lambda ((g$x$10716$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10716$1IfLeT) (begin '#f ((case-lambda ((g$q$10717$1IfLeT) (if g$q$10717$1IfLeT (begin '#f ((case-lambda ((g$r$10718$1IfLeT) (if g$r$10718$1IfLeT (begin '#f (append g$q$10717$1IfLeT g$r$10718$1IfLeT)) '#f))) ((letrec ((g$f$10719$1IfLeT (case-lambda ((g$x$10720$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10720$1IfLeT) ((case-lambda ((g$cars/f$10721$1IfLeT) (if g$cars/f$10721$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10722$1IfLeT) (if g$cdrs/f$10722$1IfLeT (begin '#f (map cons g$cars/f$10721$1IfLeT g$cdrs/f$10722$1IfLeT)) '#f))) (g$f$10719$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10720$1IfLeT)))) '#f))) ((case-lambda ((g$x$10723$1IfLeT) (list g$x$10723$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10720$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10720$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$10719$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10716$1IfLeT)))) '#f))) ((case-lambda ((g$x$10724$1IfLeT) (list g$x$10724$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10716$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10713$1IfLeT)))) '#f))) ((case-lambda ((g$x$10725$1IfLeT) (list g$x$10725$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10713$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10710$1IfLeT)))) '#f))) ((case-lambda ((g$x$10726$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10710$1IfLeT)))) '#f))) g$t$10702$1IfLeT)))) g$e$10699$1IfLeT)))) (g$unless-transformer$10077$1IfLeT g$unless-transformer$16182$1IfLeT (case-lambda ((g$e$10727$1IfLeT g$r$10728$1IfLeT g$mr$10729$1IfLeT) ((case-lambda ((g$t$10730$1IfLeT) ((case-lambda ((g$ls/false$10731$1IfLeT) (if (if g$ls/false$10731$1IfLeT (begin '#f (apply (case-lambda ((g$test$10732$1IfLeT g$e$10733$1IfLeT g$e*$10734$1IfLeT) '#t)) g$ls/false$10731$1IfLeT)) '#f) (apply (case-lambda ((g$test$10735$1IfLeT g$e$10736$1IfLeT g$e*$10737$1IfLeT) (list 'if (g$chi-expr$10133$1IfLeT g$test$10735$1IfLeT g$r$10728$1IfLeT g$mr$10729$1IfLeT) (g$build-void$9773$1IfLeT) (g$build-sequence$9772$1IfLeT '#f (g$chi-expr*$10131$1IfLeT (cons g$e$10736$1IfLeT g$e*$10737$1IfLeT) g$r$10728$1IfLeT g$mr$10729$1IfLeT))))) g$ls/false$10731$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10730$1IfLeT)))) ((case-lambda ((g$x$10738$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10738$1IfLeT) (begin '#f ((case-lambda ((g$q$10739$1IfLeT) (if g$q$10739$1IfLeT (begin '#f ((case-lambda ((g$r$10740$1IfLeT) (if g$r$10740$1IfLeT (begin '#f (append g$q$10739$1IfLeT g$r$10740$1IfLeT)) '#f))) ((case-lambda ((g$x$10741$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10741$1IfLeT) (begin '#f ((case-lambda ((g$q$10742$1IfLeT) (if g$q$10742$1IfLeT (begin '#f ((case-lambda ((g$r$10743$1IfLeT) (if g$r$10743$1IfLeT (begin '#f (append g$q$10742$1IfLeT g$r$10743$1IfLeT)) '#f))) ((case-lambda ((g$x$10744$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10744$1IfLeT) (begin '#f ((case-lambda ((g$q$10745$1IfLeT) (if g$q$10745$1IfLeT (begin '#f ((case-lambda ((g$r$10746$1IfLeT) (if g$r$10746$1IfLeT (begin '#f (append g$q$10745$1IfLeT g$r$10746$1IfLeT)) '#f))) ((letrec ((g$f$10747$1IfLeT (case-lambda ((g$x$10748$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10748$1IfLeT) ((case-lambda ((g$cars/f$10749$1IfLeT) (if g$cars/f$10749$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10750$1IfLeT) (if g$cdrs/f$10750$1IfLeT (begin '#f (map cons g$cars/f$10749$1IfLeT g$cdrs/f$10750$1IfLeT)) '#f))) (g$f$10747$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10748$1IfLeT)))) '#f))) ((case-lambda ((g$x$10751$1IfLeT) (list g$x$10751$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10748$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10748$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$10747$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10744$1IfLeT)))) '#f))) ((case-lambda ((g$x$10752$1IfLeT) (list g$x$10752$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10744$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10741$1IfLeT)))) '#f))) ((case-lambda ((g$x$10753$1IfLeT) (list g$x$10753$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10741$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10738$1IfLeT)))) '#f))) ((case-lambda ((g$x$10754$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10738$1IfLeT)))) '#f))) g$t$10730$1IfLeT)))) g$e$10727$1IfLeT)))) (g$if-transformer$10078$1IfLeT g$if-transformer$16183$1IfLeT (case-lambda ((g$e$10755$1IfLeT g$r$10756$1IfLeT g$mr$10757$1IfLeT) ((case-lambda ((g$t$10758$1IfLeT) ((case-lambda ((g$ls/false$10759$1IfLeT) (if (if g$ls/false$10759$1IfLeT (begin '#f (apply (case-lambda ((g$e0$10760$1IfLeT g$e1$10761$1IfLeT g$e2$10762$1IfLeT) '#t)) g$ls/false$10759$1IfLeT)) '#f) (apply (case-lambda ((g$e0$10763$1IfLeT g$e1$10764$1IfLeT g$e2$10765$1IfLeT) (list 'if (g$chi-expr$10133$1IfLeT g$e0$10763$1IfLeT g$r$10756$1IfLeT g$mr$10757$1IfLeT) (g$chi-expr$10133$1IfLeT g$e1$10764$1IfLeT g$r$10756$1IfLeT g$mr$10757$1IfLeT) (g$chi-expr$10133$1IfLeT g$e2$10765$1IfLeT g$r$10756$1IfLeT g$mr$10757$1IfLeT)))) g$ls/false$10759$1IfLeT) ((case-lambda ((g$t$10766$1IfLeT) ((case-lambda ((g$ls/false$10767$1IfLeT) (if (if g$ls/false$10767$1IfLeT (begin '#f (apply (case-lambda ((g$e0$10768$1IfLeT g$e1$10769$1IfLeT) '#t)) g$ls/false$10767$1IfLeT)) '#f) (apply (case-lambda ((g$e0$10770$1IfLeT g$e1$10771$1IfLeT) (list 'if (g$chi-expr$10133$1IfLeT g$e0$10770$1IfLeT g$r$10756$1IfLeT g$mr$10757$1IfLeT) (g$chi-expr$10133$1IfLeT g$e1$10771$1IfLeT g$r$10756$1IfLeT g$mr$10757$1IfLeT) (g$build-void$9773$1IfLeT)))) g$ls/false$10767$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10766$1IfLeT)))) ((case-lambda ((g$x$10772$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10772$1IfLeT) (begin '#f ((case-lambda ((g$q$10773$1IfLeT) (if g$q$10773$1IfLeT (begin '#f ((case-lambda ((g$r$10774$1IfLeT) (if g$r$10774$1IfLeT (begin '#f (append g$q$10773$1IfLeT g$r$10774$1IfLeT)) '#f))) ((case-lambda ((g$x$10775$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10775$1IfLeT) (begin '#f ((case-lambda ((g$q$10776$1IfLeT) (if g$q$10776$1IfLeT (begin '#f ((case-lambda ((g$r$10777$1IfLeT) (if g$r$10777$1IfLeT (begin '#f (append g$q$10776$1IfLeT g$r$10777$1IfLeT)) '#f))) ((case-lambda ((g$x$10778$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10778$1IfLeT) (begin '#f ((case-lambda ((g$q$10779$1IfLeT) (if g$q$10779$1IfLeT (begin '#f ((case-lambda ((g$r$10780$1IfLeT) (if g$r$10780$1IfLeT (begin '#f (append g$q$10779$1IfLeT g$r$10780$1IfLeT)) '#f))) ((case-lambda ((g$x$10781$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10781$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10778$1IfLeT)))) '#f))) ((case-lambda ((g$x$10782$1IfLeT) (list g$x$10782$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10778$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10775$1IfLeT)))) '#f))) ((case-lambda ((g$x$10783$1IfLeT) (list g$x$10783$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10775$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10772$1IfLeT)))) '#f))) ((case-lambda ((g$x$10784$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10772$1IfLeT)))) '#f))) g$t$10766$1IfLeT)))) g$t$10758$1IfLeT)))) ((case-lambda ((g$x$10785$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10785$1IfLeT) (begin '#f ((case-lambda ((g$q$10786$1IfLeT) (if g$q$10786$1IfLeT (begin '#f ((case-lambda ((g$r$10787$1IfLeT) (if g$r$10787$1IfLeT (begin '#f (append g$q$10786$1IfLeT g$r$10787$1IfLeT)) '#f))) ((case-lambda ((g$x$10788$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10788$1IfLeT) (begin '#f ((case-lambda ((g$q$10789$1IfLeT) (if g$q$10789$1IfLeT (begin '#f ((case-lambda ((g$r$10790$1IfLeT) (if g$r$10790$1IfLeT (begin '#f (append g$q$10789$1IfLeT g$r$10790$1IfLeT)) '#f))) ((case-lambda ((g$x$10791$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10791$1IfLeT) (begin '#f ((case-lambda ((g$q$10792$1IfLeT) (if g$q$10792$1IfLeT (begin '#f ((case-lambda ((g$r$10793$1IfLeT) (if g$r$10793$1IfLeT (begin '#f (append g$q$10792$1IfLeT g$r$10793$1IfLeT)) '#f))) ((case-lambda ((g$x$10794$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10794$1IfLeT) (begin '#f ((case-lambda ((g$q$10795$1IfLeT) (if g$q$10795$1IfLeT (begin '#f ((case-lambda ((g$r$10796$1IfLeT) (if g$r$10796$1IfLeT (begin '#f (append g$q$10795$1IfLeT g$r$10796$1IfLeT)) '#f))) ((case-lambda ((g$x$10797$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10797$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10794$1IfLeT)))) '#f))) ((case-lambda ((g$x$10798$1IfLeT) (list g$x$10798$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10794$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10791$1IfLeT)))) '#f))) ((case-lambda ((g$x$10799$1IfLeT) (list g$x$10799$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10791$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10788$1IfLeT)))) '#f))) ((case-lambda ((g$x$10800$1IfLeT) (list g$x$10800$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10788$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10785$1IfLeT)))) '#f))) ((case-lambda ((g$x$10801$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10785$1IfLeT)))) '#f))) g$t$10758$1IfLeT)))) g$e$10755$1IfLeT)))) (g$case-transformer$10079$1IfLeT g$case-transformer$16184$1IfLeT (case-lambda ((g$e$10802$1IfLeT g$r$10803$1IfLeT g$mr$10804$1IfLeT) (letrec* ((g$build-one$10805$1IfLeT (case-lambda ((g$t$10902$1IfLeT g$cls$10903$1IfLeT g$rest$10904$1IfLeT) ((case-lambda ((g$t$10905$1IfLeT) ((case-lambda ((g$ls/false$10906$1IfLeT) (if (if g$ls/false$10906$1IfLeT (begin '#f (apply (case-lambda ((g$d*$10907$1IfLeT g$e$10908$1IfLeT g$e*$10909$1IfLeT) '#t)) g$ls/false$10906$1IfLeT)) '#f) (apply (case-lambda ((g$d*$10910$1IfLeT g$e$10911$1IfLeT g$e*$10912$1IfLeT) (list 'if (list '(primitive memv) g$t$10902$1IfLeT (list 'quote (g$stx->datum$9849$1IfLeT g$d*$10910$1IfLeT))) (g$build-sequence$9772$1IfLeT '#f (g$chi-expr*$10131$1IfLeT (cons g$e$10911$1IfLeT g$e*$10912$1IfLeT) g$r$10803$1IfLeT g$mr$10804$1IfLeT)) g$rest$10904$1IfLeT))) g$ls/false$10906$1IfLeT) ((case-lambda ((g$t$10913$1IfLeT) ((case-lambda ((g$ls/false$10914$1IfLeT) (if (if g$ls/false$10914$1IfLeT (begin '#f (apply (case-lambda ((g$else$10915$1IfLeT) '#t)) g$ls/false$10914$1IfLeT)) '#f) (apply (case-lambda ((g$else$10916$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$e$10802$1IfLeT))) g$ls/false$10914$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10913$1IfLeT)))) ((case-lambda ((g$x$10917$1IfLeT) (list g$x$10917$1IfLeT))) g$t$10913$1IfLeT)))) g$t$10905$1IfLeT)))) ((case-lambda ((g$x$10918$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10918$1IfLeT) (begin '#f ((case-lambda ((g$q$10919$1IfLeT) (if g$q$10919$1IfLeT (begin '#f ((case-lambda ((g$r$10920$1IfLeT) (if g$r$10920$1IfLeT (begin '#f (append g$q$10919$1IfLeT g$r$10920$1IfLeT)) '#f))) ((case-lambda ((g$x$10921$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10921$1IfLeT) (begin '#f ((case-lambda ((g$q$10922$1IfLeT) (if g$q$10922$1IfLeT (begin '#f ((case-lambda ((g$r$10923$1IfLeT) (if g$r$10923$1IfLeT (begin '#f (append g$q$10922$1IfLeT g$r$10923$1IfLeT)) '#f))) ((letrec ((g$f$10924$1IfLeT (case-lambda ((g$x$10925$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10925$1IfLeT) ((case-lambda ((g$cars/f$10926$1IfLeT) (if g$cars/f$10926$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10927$1IfLeT) (if g$cdrs/f$10927$1IfLeT (begin '#f (map cons g$cars/f$10926$1IfLeT g$cdrs/f$10927$1IfLeT)) '#f))) (g$f$10924$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10925$1IfLeT)))) '#f))) ((case-lambda ((g$x$10928$1IfLeT) (list g$x$10928$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10925$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10925$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$10924$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10921$1IfLeT)))) '#f))) ((case-lambda ((g$x$10929$1IfLeT) (list g$x$10929$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10921$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10918$1IfLeT)))) '#f))) ((letrec ((g$f$10930$1IfLeT (case-lambda ((g$x$10931$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10931$1IfLeT) ((case-lambda ((g$cars/f$10932$1IfLeT) (if g$cars/f$10932$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10933$1IfLeT) (if g$cdrs/f$10933$1IfLeT (begin '#f (map cons g$cars/f$10932$1IfLeT g$cdrs/f$10933$1IfLeT)) '#f))) (g$f$10930$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10931$1IfLeT)))) '#f))) ((case-lambda ((g$x$10934$1IfLeT) (list g$x$10934$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10931$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10931$1IfLeT) (list (begin 'd* '())) '#f)))))) g$f$10930$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$10918$1IfLeT)))) '#f))) g$t$10905$1IfLeT)))) g$cls$10903$1IfLeT)))) (g$build-last$10806$1IfLeT (case-lambda ((g$t$10849$1IfLeT g$cls$10850$1IfLeT) ((case-lambda ((g$t$10851$1IfLeT) ((case-lambda ((g$ls/false$10852$1IfLeT) (if (if g$ls/false$10852$1IfLeT (begin '#f (apply (case-lambda ((g$d*$10853$1IfLeT g$e$10854$1IfLeT g$e*$10855$1IfLeT) '#t)) g$ls/false$10852$1IfLeT)) '#f) (apply (case-lambda ((g$d*$10856$1IfLeT g$e$10857$1IfLeT g$e*$10858$1IfLeT) (g$build-one$10805$1IfLeT g$t$10849$1IfLeT g$cls$10850$1IfLeT (g$build-void$9773$1IfLeT)))) g$ls/false$10852$1IfLeT) ((case-lambda ((g$t$10859$1IfLeT) ((case-lambda ((g$ls/false$10860$1IfLeT) (if (if g$ls/false$10860$1IfLeT (begin '#f (apply (case-lambda ((g$else-kwd$10861$1IfLeT g$x$10862$1IfLeT g$x*$10863$1IfLeT) '#t)) g$ls/false$10860$1IfLeT)) '#f) (apply (case-lambda ((g$else-kwd$10864$1IfLeT g$x$10865$1IfLeT g$x*$10866$1IfLeT) (if (if (g$id?$9838$1IfLeT g$else-kwd$10864$1IfLeT) (begin '#f (g$free-id=?$9842$1IfLeT g$else-kwd$10864$1IfLeT (g$scheme-stx$10063$1IfLeT 'else))) '#f) (g$build-sequence$9772$1IfLeT '#f (g$chi-expr*$10131$1IfLeT (cons g$x$10865$1IfLeT g$x*$10866$1IfLeT) g$r$10803$1IfLeT g$mr$10804$1IfLeT)) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$e$10802$1IfLeT)))) g$ls/false$10860$1IfLeT) ((case-lambda ((g$t$10867$1IfLeT) ((case-lambda ((g$ls/false$10868$1IfLeT) (if (if g$ls/false$10868$1IfLeT (begin '#f (apply (case-lambda ((g$else$10869$1IfLeT) '#t)) g$ls/false$10868$1IfLeT)) '#f) (apply (case-lambda ((g$else$10870$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$e$10802$1IfLeT))) g$ls/false$10868$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10867$1IfLeT)))) ((case-lambda ((g$x$10871$1IfLeT) (list g$x$10871$1IfLeT))) g$t$10867$1IfLeT)))) g$t$10859$1IfLeT)))) ((case-lambda ((g$x$10872$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10872$1IfLeT) (begin '#f ((case-lambda ((g$q$10873$1IfLeT) (if g$q$10873$1IfLeT (begin '#f ((case-lambda ((g$r$10874$1IfLeT) (if g$r$10874$1IfLeT (begin '#f (append g$q$10873$1IfLeT g$r$10874$1IfLeT)) '#f))) ((case-lambda ((g$x$10875$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10875$1IfLeT) (begin '#f ((case-lambda ((g$q$10876$1IfLeT) (if g$q$10876$1IfLeT (begin '#f ((case-lambda ((g$r$10877$1IfLeT) (if g$r$10877$1IfLeT (begin '#f (append g$q$10876$1IfLeT g$r$10877$1IfLeT)) '#f))) ((letrec ((g$f$10878$1IfLeT (case-lambda ((g$x$10879$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10879$1IfLeT) ((case-lambda ((g$cars/f$10880$1IfLeT) (if g$cars/f$10880$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10881$1IfLeT) (if g$cdrs/f$10881$1IfLeT (begin '#f (map cons g$cars/f$10880$1IfLeT g$cdrs/f$10881$1IfLeT)) '#f))) (g$f$10878$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10879$1IfLeT)))) '#f))) ((case-lambda ((g$x$10882$1IfLeT) (list g$x$10882$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10879$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10879$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$10878$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10875$1IfLeT)))) '#f))) ((case-lambda ((g$x$10883$1IfLeT) (list g$x$10883$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10875$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10872$1IfLeT)))) '#f))) ((case-lambda ((g$x$10884$1IfLeT) (list g$x$10884$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10872$1IfLeT)))) '#f))) g$t$10859$1IfLeT)))) g$t$10851$1IfLeT)))) ((case-lambda ((g$x$10885$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10885$1IfLeT) (begin '#f ((case-lambda ((g$q$10886$1IfLeT) (if g$q$10886$1IfLeT (begin '#f ((case-lambda ((g$r$10887$1IfLeT) (if g$r$10887$1IfLeT (begin '#f (append g$q$10886$1IfLeT g$r$10887$1IfLeT)) '#f))) ((case-lambda ((g$x$10888$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10888$1IfLeT) (begin '#f ((case-lambda ((g$q$10889$1IfLeT) (if g$q$10889$1IfLeT (begin '#f ((case-lambda ((g$r$10890$1IfLeT) (if g$r$10890$1IfLeT (begin '#f (append g$q$10889$1IfLeT g$r$10890$1IfLeT)) '#f))) ((letrec ((g$f$10891$1IfLeT (case-lambda ((g$x$10892$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10892$1IfLeT) ((case-lambda ((g$cars/f$10893$1IfLeT) (if g$cars/f$10893$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10894$1IfLeT) (if g$cdrs/f$10894$1IfLeT (begin '#f (map cons g$cars/f$10893$1IfLeT g$cdrs/f$10894$1IfLeT)) '#f))) (g$f$10891$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10892$1IfLeT)))) '#f))) ((case-lambda ((g$x$10895$1IfLeT) (list g$x$10895$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10892$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10892$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$10891$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10888$1IfLeT)))) '#f))) ((case-lambda ((g$x$10896$1IfLeT) (list g$x$10896$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10888$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10885$1IfLeT)))) '#f))) ((letrec ((g$f$10897$1IfLeT (case-lambda ((g$x$10898$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10898$1IfLeT) ((case-lambda ((g$cars/f$10899$1IfLeT) (if g$cars/f$10899$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10900$1IfLeT) (if g$cdrs/f$10900$1IfLeT (begin '#f (map cons g$cars/f$10899$1IfLeT g$cdrs/f$10900$1IfLeT)) '#f))) (g$f$10897$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10898$1IfLeT)))) '#f))) ((case-lambda ((g$x$10901$1IfLeT) (list g$x$10901$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10898$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10898$1IfLeT) (list (begin 'd* '())) '#f)))))) g$f$10897$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$10885$1IfLeT)))) '#f))) g$t$10851$1IfLeT)))) g$cls$10850$1IfLeT))))) ((case-lambda ((g$t$10807$1IfLeT) ((case-lambda ((g$ls/false$10808$1IfLeT) (if (if g$ls/false$10808$1IfLeT (begin '#f (apply (case-lambda ((g$expr$10809$1IfLeT) '#t)) g$ls/false$10808$1IfLeT)) '#f) (apply (case-lambda ((g$expr$10810$1IfLeT) (g$build-sequence$9772$1IfLeT '#f (list (g$chi-expr$10133$1IfLeT g$expr$10810$1IfLeT g$r$10803$1IfLeT g$mr$10804$1IfLeT) (g$build-void$9773$1IfLeT))))) g$ls/false$10808$1IfLeT) ((case-lambda ((g$t$10811$1IfLeT) ((case-lambda ((g$ls/false$10812$1IfLeT) (if (if g$ls/false$10812$1IfLeT (begin '#f (apply (case-lambda ((g$expr$10813$1IfLeT g$cls$10814$1IfLeT g$cls*$10815$1IfLeT) '#t)) g$ls/false$10812$1IfLeT)) '#f) (apply (case-lambda ((g$expr$10816$1IfLeT g$cls$10817$1IfLeT g$cls*$10818$1IfLeT) ((case-lambda ((g$t$10819$1IfLeT) (g$build-let$9771$1IfLeT '#f (list g$t$10819$1IfLeT) (list (g$chi-expr$10133$1IfLeT g$expr$10816$1IfLeT g$r$10803$1IfLeT g$mr$10804$1IfLeT)) ((letrec ((g$f$10820$1IfLeT (case-lambda ((g$cls$10821$1IfLeT g$cls*$10822$1IfLeT) (if (null? g$cls*$10822$1IfLeT) (g$build-last$10806$1IfLeT g$t$10819$1IfLeT g$cls$10821$1IfLeT) (g$build-one$10805$1IfLeT g$t$10819$1IfLeT g$cls$10821$1IfLeT (g$f$10820$1IfLeT (car g$cls*$10822$1IfLeT) (cdr g$cls*$10822$1IfLeT)))))))) g$f$10820$1IfLeT) g$cls$10817$1IfLeT g$cls*$10818$1IfLeT)))) (g$gen-lexical$9782$1IfLeT 't)))) g$ls/false$10812$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10811$1IfLeT)))) ((case-lambda ((g$x$10823$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10823$1IfLeT) (begin '#f ((case-lambda ((g$q$10824$1IfLeT) (if g$q$10824$1IfLeT (begin '#f ((case-lambda ((g$r$10825$1IfLeT) (if g$r$10825$1IfLeT (begin '#f (append g$q$10824$1IfLeT g$r$10825$1IfLeT)) '#f))) ((case-lambda ((g$x$10826$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10826$1IfLeT) (begin '#f ((case-lambda ((g$q$10827$1IfLeT) (if g$q$10827$1IfLeT (begin '#f ((case-lambda ((g$r$10828$1IfLeT) (if g$r$10828$1IfLeT (begin '#f (append g$q$10827$1IfLeT g$r$10828$1IfLeT)) '#f))) ((case-lambda ((g$x$10829$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10829$1IfLeT) (begin '#f ((case-lambda ((g$q$10830$1IfLeT) (if g$q$10830$1IfLeT (begin '#f ((case-lambda ((g$r$10831$1IfLeT) (if g$r$10831$1IfLeT (begin '#f (append g$q$10830$1IfLeT g$r$10831$1IfLeT)) '#f))) ((letrec ((g$f$10832$1IfLeT (case-lambda ((g$x$10833$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10833$1IfLeT) ((case-lambda ((g$cars/f$10834$1IfLeT) (if g$cars/f$10834$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10835$1IfLeT) (if g$cdrs/f$10835$1IfLeT (begin '#f (map cons g$cars/f$10834$1IfLeT g$cdrs/f$10835$1IfLeT)) '#f))) (g$f$10832$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10833$1IfLeT)))) '#f))) ((case-lambda ((g$x$10836$1IfLeT) (list g$x$10836$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10833$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10833$1IfLeT) (list (begin 'cls* '())) '#f)))))) g$f$10832$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10829$1IfLeT)))) '#f))) ((case-lambda ((g$x$10837$1IfLeT) (list g$x$10837$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10829$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10826$1IfLeT)))) '#f))) ((case-lambda ((g$x$10838$1IfLeT) (list g$x$10838$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10826$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10823$1IfLeT)))) '#f))) ((case-lambda ((g$x$10839$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10823$1IfLeT)))) '#f))) g$t$10811$1IfLeT)))) g$t$10807$1IfLeT)))) ((case-lambda ((g$x$10840$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10840$1IfLeT) (begin '#f ((case-lambda ((g$q$10841$1IfLeT) (if g$q$10841$1IfLeT (begin '#f ((case-lambda ((g$r$10842$1IfLeT) (if g$r$10842$1IfLeT (begin '#f (append g$q$10841$1IfLeT g$r$10842$1IfLeT)) '#f))) ((case-lambda ((g$x$10843$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10843$1IfLeT) (begin '#f ((case-lambda ((g$q$10844$1IfLeT) (if g$q$10844$1IfLeT (begin '#f ((case-lambda ((g$r$10845$1IfLeT) (if g$r$10845$1IfLeT (begin '#f (append g$q$10844$1IfLeT g$r$10845$1IfLeT)) '#f))) ((case-lambda ((g$x$10846$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10846$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10843$1IfLeT)))) '#f))) ((case-lambda ((g$x$10847$1IfLeT) (list g$x$10847$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10843$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10840$1IfLeT)))) '#f))) ((case-lambda ((g$x$10848$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10840$1IfLeT)))) '#f))) g$t$10807$1IfLeT)))) g$e$10802$1IfLeT))))) (g$quote-transformer$10080$1IfLeT g$quote-transformer$16185$1IfLeT (case-lambda ((g$e$10935$1IfLeT g$r$10936$1IfLeT g$mr$10937$1IfLeT) ((case-lambda ((g$t$10938$1IfLeT) ((case-lambda ((g$ls/false$10939$1IfLeT) (if (if g$ls/false$10939$1IfLeT (begin '#f (apply (case-lambda ((g$datum$10940$1IfLeT) '#t)) g$ls/false$10939$1IfLeT)) '#f) (apply (case-lambda ((g$datum$10941$1IfLeT) (list 'quote (g$stx->datum$9849$1IfLeT g$datum$10941$1IfLeT)))) g$ls/false$10939$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10938$1IfLeT)))) ((case-lambda ((g$x$10942$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10942$1IfLeT) (begin '#f ((case-lambda ((g$q$10943$1IfLeT) (if g$q$10943$1IfLeT (begin '#f ((case-lambda ((g$r$10944$1IfLeT) (if g$r$10944$1IfLeT (begin '#f (append g$q$10943$1IfLeT g$r$10944$1IfLeT)) '#f))) ((case-lambda ((g$x$10945$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10945$1IfLeT) (begin '#f ((case-lambda ((g$q$10946$1IfLeT) (if g$q$10946$1IfLeT (begin '#f ((case-lambda ((g$r$10947$1IfLeT) (if g$r$10947$1IfLeT (begin '#f (append g$q$10946$1IfLeT g$r$10947$1IfLeT)) '#f))) ((case-lambda ((g$x$10948$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$10948$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10945$1IfLeT)))) '#f))) ((case-lambda ((g$x$10949$1IfLeT) (list g$x$10949$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10945$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10942$1IfLeT)))) '#f))) ((case-lambda ((g$x$10950$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10942$1IfLeT)))) '#f))) g$t$10938$1IfLeT)))) g$e$10935$1IfLeT)))) (g$case-lambda-transformer$10081$1IfLeT g$case-lambda-transformer$16186$1IfLeT (case-lambda ((g$e$10951$1IfLeT g$r$10952$1IfLeT g$mr$10953$1IfLeT) ((case-lambda ((g$t$10954$1IfLeT) ((case-lambda ((g$ls/false$10955$1IfLeT) (if (if g$ls/false$10955$1IfLeT (begin '#f (apply (case-lambda ((g$fmls*$10956$1IfLeT g$b*$10957$1IfLeT g$b**$10958$1IfLeT) '#t)) g$ls/false$10955$1IfLeT)) '#f) (apply (case-lambda ((g$fmls*$10959$1IfLeT g$b*$10960$1IfLeT g$b**$10961$1IfLeT) (call-with-values (case-lambda (() (g$chi-lambda-clause*$10137$1IfLeT g$e$10951$1IfLeT g$fmls*$10959$1IfLeT (map cons g$b*$10960$1IfLeT g$b**$10961$1IfLeT) g$r$10952$1IfLeT g$mr$10953$1IfLeT))) (case-lambda ((g$fmls*$10964$1IfLeT g$body*$10965$1IfLeT) ((case-lambda ((g$body*$10966$1IfLeT g$fmls*$10967$1IfLeT) (g$build-case-lambda$9770$1IfLeT '#f g$fmls*$10967$1IfLeT g$body*$10966$1IfLeT))) g$body*$10965$1IfLeT g$fmls*$10964$1IfLeT)))))) g$ls/false$10955$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10954$1IfLeT)))) ((case-lambda ((g$x$10968$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10968$1IfLeT) (begin '#f ((case-lambda ((g$q$10969$1IfLeT) (if g$q$10969$1IfLeT (begin '#f ((case-lambda ((g$r$10970$1IfLeT) (if g$r$10970$1IfLeT (begin '#f (append g$q$10969$1IfLeT g$r$10970$1IfLeT)) '#f))) ((letrec ((g$f$10971$1IfLeT (case-lambda ((g$x$10972$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10972$1IfLeT) ((case-lambda ((g$cars/f$10973$1IfLeT) (if g$cars/f$10973$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10974$1IfLeT) (if g$cdrs/f$10974$1IfLeT (begin '#f (map cons g$cars/f$10973$1IfLeT g$cdrs/f$10974$1IfLeT)) '#f))) (g$f$10971$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10972$1IfLeT)))) '#f))) ((case-lambda ((g$x$10975$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10975$1IfLeT) (begin '#f ((case-lambda ((g$q$10976$1IfLeT) (if g$q$10976$1IfLeT (begin '#f ((case-lambda ((g$r$10977$1IfLeT) (if g$r$10977$1IfLeT (begin '#f (append g$q$10976$1IfLeT g$r$10977$1IfLeT)) '#f))) ((case-lambda ((g$x$10978$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10978$1IfLeT) (begin '#f ((case-lambda ((g$q$10979$1IfLeT) (if g$q$10979$1IfLeT (begin '#f ((case-lambda ((g$r$10980$1IfLeT) (if g$r$10980$1IfLeT (begin '#f (append g$q$10979$1IfLeT g$r$10980$1IfLeT)) '#f))) ((letrec ((g$f$10981$1IfLeT (case-lambda ((g$x$10982$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$10982$1IfLeT) ((case-lambda ((g$cars/f$10983$1IfLeT) (if g$cars/f$10983$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$10984$1IfLeT) (if g$cdrs/f$10984$1IfLeT (begin '#f (map cons g$cars/f$10983$1IfLeT g$cdrs/f$10984$1IfLeT)) '#f))) (g$f$10981$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$10982$1IfLeT)))) '#f))) ((case-lambda ((g$x$10985$1IfLeT) (list g$x$10985$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10982$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10982$1IfLeT) (list (begin 'b** '())) '#f)))))) g$f$10981$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10978$1IfLeT)))) '#f))) ((case-lambda ((g$x$10986$1IfLeT) (list g$x$10986$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10978$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$10975$1IfLeT)))) '#f))) ((case-lambda ((g$x$10987$1IfLeT) (list g$x$10987$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$10975$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$10972$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$10972$1IfLeT) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f)))))) g$f$10971$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$10968$1IfLeT)))) '#f))) ((case-lambda ((g$x$10988$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$10968$1IfLeT)))) '#f))) g$t$10954$1IfLeT)))) g$e$10951$1IfLeT)))) (g$lambda-transformer$10082$1IfLeT g$lambda-transformer$16187$1IfLeT (case-lambda ((g$e$10989$1IfLeT g$r$10990$1IfLeT g$mr$10991$1IfLeT) ((case-lambda ((g$t$10992$1IfLeT) ((case-lambda ((g$ls/false$10993$1IfLeT) (if (if g$ls/false$10993$1IfLeT (begin '#f (apply (case-lambda ((g$fmls$10994$1IfLeT g$b$10995$1IfLeT g$b*$10996$1IfLeT) '#t)) g$ls/false$10993$1IfLeT)) '#f) (apply (case-lambda ((g$fmls$10997$1IfLeT g$b$10998$1IfLeT g$b*$10999$1IfLeT) (call-with-values (case-lambda (() (g$chi-lambda-clause$10136$1IfLeT g$e$10989$1IfLeT g$fmls$10997$1IfLeT (cons g$b$10998$1IfLeT g$b*$10999$1IfLeT) g$r$10990$1IfLeT g$mr$10991$1IfLeT))) (case-lambda ((g$fmls$11002$1IfLeT g$body$11003$1IfLeT) ((case-lambda ((g$body$11004$1IfLeT g$fmls$11005$1IfLeT) (g$build-lambda$9769$1IfLeT '#f g$fmls$11005$1IfLeT g$body$11004$1IfLeT))) g$body$11003$1IfLeT g$fmls$11002$1IfLeT)))))) g$ls/false$10993$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$10992$1IfLeT)))) ((case-lambda ((g$x$11006$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11006$1IfLeT) (begin '#f ((case-lambda ((g$q$11007$1IfLeT) (if g$q$11007$1IfLeT (begin '#f ((case-lambda ((g$r$11008$1IfLeT) (if g$r$11008$1IfLeT (begin '#f (append g$q$11007$1IfLeT g$r$11008$1IfLeT)) '#f))) ((case-lambda ((g$x$11009$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11009$1IfLeT) (begin '#f ((case-lambda ((g$q$11010$1IfLeT) (if g$q$11010$1IfLeT (begin '#f ((case-lambda ((g$r$11011$1IfLeT) (if g$r$11011$1IfLeT (begin '#f (append g$q$11010$1IfLeT g$r$11011$1IfLeT)) '#f))) ((case-lambda ((g$x$11012$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11012$1IfLeT) (begin '#f ((case-lambda ((g$q$11013$1IfLeT) (if g$q$11013$1IfLeT (begin '#f ((case-lambda ((g$r$11014$1IfLeT) (if g$r$11014$1IfLeT (begin '#f (append g$q$11013$1IfLeT g$r$11014$1IfLeT)) '#f))) ((letrec ((g$f$11015$1IfLeT (case-lambda ((g$x$11016$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11016$1IfLeT) ((case-lambda ((g$cars/f$11017$1IfLeT) (if g$cars/f$11017$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11018$1IfLeT) (if g$cdrs/f$11018$1IfLeT (begin '#f (map cons g$cars/f$11017$1IfLeT g$cdrs/f$11018$1IfLeT)) '#f))) (g$f$11015$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11016$1IfLeT)))) '#f))) ((case-lambda ((g$x$11019$1IfLeT) (list g$x$11019$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11016$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11016$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11015$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11012$1IfLeT)))) '#f))) ((case-lambda ((g$x$11020$1IfLeT) (list g$x$11020$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11012$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11009$1IfLeT)))) '#f))) ((case-lambda ((g$x$11021$1IfLeT) (list g$x$11021$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11009$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11006$1IfLeT)))) '#f))) ((case-lambda ((g$x$11022$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11006$1IfLeT)))) '#f))) g$t$10992$1IfLeT)))) g$e$10989$1IfLeT)))) (g$bless$10083$1IfLeT g$bless$16188$1IfLeT (case-lambda ((g$x$11023$1IfLeT) (g$mkstx$9826$1IfLeT ((letrec ((g$f$11024$1IfLeT (case-lambda ((g$x$11025$1IfLeT) (if (g$stx?$9810$1IfLeT g$x$11025$1IfLeT) g$x$11025$1IfLeT (if (pair? g$x$11025$1IfLeT) (cons (g$f$11024$1IfLeT (car g$x$11025$1IfLeT)) (g$f$11024$1IfLeT (cdr g$x$11025$1IfLeT))) (if (symbol? g$x$11025$1IfLeT) (g$scheme-stx$10063$1IfLeT g$x$11025$1IfLeT) (if (vector? g$x$11025$1IfLeT) (list->vector (map g$f$11024$1IfLeT (vector->list g$x$11025$1IfLeT))) g$x$11025$1IfLeT)))))))) g$f$11024$1IfLeT) g$x$11023$1IfLeT) '() '() '())))) (g$with-syntax-macro$10084$1IfLeT g$with-syntax-macro$16189$1IfLeT (case-lambda ((g$e$11026$1IfLeT) ((case-lambda ((g$t$11027$1IfLeT) ((case-lambda ((g$ls/false$11028$1IfLeT) (if (if g$ls/false$11028$1IfLeT (begin '#f (apply (case-lambda ((g$pat*$11029$1IfLeT g$expr*$11030$1IfLeT g$b$11031$1IfLeT g$b*$11032$1IfLeT) '#t)) g$ls/false$11028$1IfLeT)) '#f) (apply (case-lambda ((g$pat*$11033$1IfLeT g$expr*$11034$1IfLeT g$b$11035$1IfLeT g$b*$11036$1IfLeT) ((case-lambda ((g$idn*$11037$1IfLeT) (begin (g$verify-formals$10135$1IfLeT (map car g$idn*$11037$1IfLeT) g$e$11026$1IfLeT) ((case-lambda ((g$t*$11038$1IfLeT) (g$bless$10083$1IfLeT (list 'let (map list g$t*$11038$1IfLeT g$expr*$11034$1IfLeT) ((letrec ((g$f$11039$1IfLeT (case-lambda ((g$pat*$11040$1IfLeT g$t*$11041$1IfLeT) (if (null? g$pat*$11040$1IfLeT) (cons 'begin (cons '#f (cons g$b$11035$1IfLeT g$b*$11036$1IfLeT))) (list 'syntax-case (car g$t*$11041$1IfLeT) '() (list (car g$pat*$11040$1IfLeT) (g$f$11039$1IfLeT (cdr g$pat*$11040$1IfLeT) (cdr g$t*$11041$1IfLeT))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car g$pat*$11040$1IfLeT)) (car g$t*$11041$1IfLeT))))))))) g$f$11039$1IfLeT) g$pat*$11033$1IfLeT g$t*$11038$1IfLeT))))) (g$generate-temporaries$10214$1IfLeT g$expr*$11034$1IfLeT))))) ((letrec ((g$f$11042$1IfLeT (case-lambda ((g$pat*$11043$1IfLeT) (if (null? g$pat*$11043$1IfLeT) '() (call-with-values (case-lambda (() (g$convert-pattern$10116$1IfLeT (car g$pat*$11043$1IfLeT) '()))) (case-lambda ((g$pat$11046$1IfLeT g$idn*$11047$1IfLeT) ((case-lambda ((g$idn*$11048$1IfLeT g$pat$11049$1IfLeT) (append g$idn*$11048$1IfLeT (g$f$11042$1IfLeT (cdr g$pat*$11043$1IfLeT))))) g$idn*$11047$1IfLeT g$pat$11046$1IfLeT))))))))) g$f$11042$1IfLeT) g$pat*$11033$1IfLeT)))) g$ls/false$11028$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11027$1IfLeT)))) ((case-lambda ((g$x$11050$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11050$1IfLeT) (begin '#f ((case-lambda ((g$q$11051$1IfLeT) (if g$q$11051$1IfLeT (begin '#f ((case-lambda ((g$r$11052$1IfLeT) (if g$r$11052$1IfLeT (begin '#f (append g$q$11051$1IfLeT g$r$11052$1IfLeT)) '#f))) ((case-lambda ((g$x$11053$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11053$1IfLeT) (begin '#f ((case-lambda ((g$q$11054$1IfLeT) (if g$q$11054$1IfLeT (begin '#f ((case-lambda ((g$r$11055$1IfLeT) (if g$r$11055$1IfLeT (begin '#f (append g$q$11054$1IfLeT g$r$11055$1IfLeT)) '#f))) ((case-lambda ((g$x$11056$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11056$1IfLeT) (begin '#f ((case-lambda ((g$q$11057$1IfLeT) (if g$q$11057$1IfLeT (begin '#f ((case-lambda ((g$r$11058$1IfLeT) (if g$r$11058$1IfLeT (begin '#f (append g$q$11057$1IfLeT g$r$11058$1IfLeT)) '#f))) ((letrec ((g$f$11059$1IfLeT (case-lambda ((g$x$11060$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11060$1IfLeT) ((case-lambda ((g$cars/f$11061$1IfLeT) (if g$cars/f$11061$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11062$1IfLeT) (if g$cdrs/f$11062$1IfLeT (begin '#f (map cons g$cars/f$11061$1IfLeT g$cdrs/f$11062$1IfLeT)) '#f))) (g$f$11059$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11060$1IfLeT)))) '#f))) ((case-lambda ((g$x$11063$1IfLeT) (list g$x$11063$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11060$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11060$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11059$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11056$1IfLeT)))) '#f))) ((case-lambda ((g$x$11064$1IfLeT) (list g$x$11064$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11056$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11053$1IfLeT)))) '#f))) ((letrec ((g$f$11065$1IfLeT (case-lambda ((g$x$11066$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11066$1IfLeT) ((case-lambda ((g$cars/f$11067$1IfLeT) (if g$cars/f$11067$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11068$1IfLeT) (if g$cdrs/f$11068$1IfLeT (begin '#f (map cons g$cars/f$11067$1IfLeT g$cdrs/f$11068$1IfLeT)) '#f))) (g$f$11065$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11066$1IfLeT)))) '#f))) ((case-lambda ((g$x$11069$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11069$1IfLeT) (begin '#f ((case-lambda ((g$q$11070$1IfLeT) (if g$q$11070$1IfLeT (begin '#f ((case-lambda ((g$r$11071$1IfLeT) (if g$r$11071$1IfLeT (begin '#f (append g$q$11070$1IfLeT g$r$11071$1IfLeT)) '#f))) ((case-lambda ((g$x$11072$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11072$1IfLeT) (begin '#f ((case-lambda ((g$q$11073$1IfLeT) (if g$q$11073$1IfLeT (begin '#f ((case-lambda ((g$r$11074$1IfLeT) (if g$r$11074$1IfLeT (begin '#f (append g$q$11073$1IfLeT g$r$11074$1IfLeT)) '#f))) ((case-lambda ((g$x$11075$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11075$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11072$1IfLeT)))) '#f))) ((case-lambda ((g$x$11076$1IfLeT) (list g$x$11076$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11072$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11069$1IfLeT)))) '#f))) ((case-lambda ((g$x$11077$1IfLeT) (list g$x$11077$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11069$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11066$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11066$1IfLeT) (list (begin 'pat* '()) (begin 'expr* '())) '#f)))))) g$f$11065$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$11053$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11050$1IfLeT)))) '#f))) ((case-lambda ((g$x$11078$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11050$1IfLeT)))) '#f))) g$t$11027$1IfLeT)))) g$e$11026$1IfLeT)))) (g$invalid-fmls-error$10085$1IfLeT g$invalid-fmls-error$16190$1IfLeT (case-lambda ((g$stx$11079$1IfLeT g$fmls$11080$1IfLeT) ((case-lambda ((g$t$11081$1IfLeT) ((case-lambda ((g$ls/false$11082$1IfLeT) (if (if g$ls/false$11082$1IfLeT (begin '#f (apply (case-lambda ((g$id*$11083$1IfLeT g$last$11084$1IfLeT) '#t)) g$ls/false$11082$1IfLeT)) '#f) (apply (case-lambda ((g$id*$11085$1IfLeT g$last$11086$1IfLeT) ((letrec ((g$f$11087$1IfLeT (case-lambda ((g$id*$11088$1IfLeT) (if (null? g$id*$11088$1IfLeT) (values) (if (not (g$id?$9838$1IfLeT (car g$id*$11088$1IfLeT))) (g$syntax-violation$10221$1IfLeT '#f '"not an identifier" g$stx$11079$1IfLeT (car g$id*$11088$1IfLeT)) (begin (g$f$11087$1IfLeT (cdr g$id*$11088$1IfLeT)) (if (g$bound-id-member?$9845$1IfLeT (car g$id*$11088$1IfLeT) (cdr g$id*$11088$1IfLeT)) (g$syntax-violation$10221$1IfLeT '#f '"duplicate binding" g$stx$11079$1IfLeT (car g$id*$11088$1IfLeT)) (void))))))))) g$f$11087$1IfLeT) (if (g$id?$9838$1IfLeT g$last$11086$1IfLeT) (cons g$last$11086$1IfLeT g$id*$11085$1IfLeT) (if (g$syntax-null?$9833$1IfLeT g$last$11086$1IfLeT) g$id*$11085$1IfLeT (g$syntax-violation$10221$1IfLeT '#f '"not an identifier" g$stx$11079$1IfLeT g$last$11086$1IfLeT)))))) g$ls/false$11082$1IfLeT) ((case-lambda ((g$t$11089$1IfLeT) ((case-lambda ((g$ls/false$11090$1IfLeT) (if (if g$ls/false$11090$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11090$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"malformed binding form" g$stx$11079$1IfLeT g$fmls$11080$1IfLeT))) g$ls/false$11090$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11089$1IfLeT)))) ((case-lambda ((g$x$11091$1IfLeT) '())) g$t$11089$1IfLeT)))) g$t$11081$1IfLeT)))) ((letrec ((g$f$11092$1IfLeT (case-lambda ((g$x$11095$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11095$1IfLeT) ((case-lambda ((g$cars/f$11096$1IfLeT) (if g$cars/f$11096$1IfLeT (begin '#f ((case-lambda ((g$d/f$11097$1IfLeT) (if g$d/f$11097$1IfLeT (begin '#f (cons (map cons g$cars/f$11096$1IfLeT (car g$d/f$11097$1IfLeT)) (cdr g$d/f$11097$1IfLeT))) '#f))) (g$f$11092$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11095$1IfLeT)))) '#f))) ((case-lambda ((g$x$11098$1IfLeT) (list g$x$11098$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11095$1IfLeT))) ((case-lambda ((g$d$11099$1IfLeT) (if g$d$11099$1IfLeT (begin '#f (cons (list (begin 'id* '())) g$d$11099$1IfLeT)) '#f))) ((case-lambda ((g$x$11100$1IfLeT) (list g$x$11100$1IfLeT))) g$x$11095$1IfLeT))))))) (case-lambda ((g$x$11093$1IfLeT) ((case-lambda ((g$x$11094$1IfLeT) (if g$x$11094$1IfLeT (begin '#f (append (car g$x$11094$1IfLeT) (cdr g$x$11094$1IfLeT))) '#f))) (g$f$11092$1IfLeT g$x$11093$1IfLeT))))) g$t$11081$1IfLeT)))) g$fmls$11080$1IfLeT)))) (g$let-macro$10086$1IfLeT g$let-macro$16191$1IfLeT (case-lambda ((g$stx$11101$1IfLeT) ((case-lambda ((g$t$11102$1IfLeT) ((case-lambda ((g$ls/false$11103$1IfLeT) (if (if g$ls/false$11103$1IfLeT (begin '#f (apply (case-lambda ((g$lhs*$11104$1IfLeT g$rhs*$11105$1IfLeT g$b$11106$1IfLeT g$b*$11107$1IfLeT) '#t)) g$ls/false$11103$1IfLeT)) '#f) (apply (case-lambda ((g$lhs*$11108$1IfLeT g$rhs*$11109$1IfLeT g$b$11110$1IfLeT g$b*$11111$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT g$lhs*$11108$1IfLeT) (g$bless$10083$1IfLeT (cons (cons 'lambda (cons g$lhs*$11108$1IfLeT (cons g$b$11110$1IfLeT g$b*$11111$1IfLeT))) g$rhs*$11109$1IfLeT)) (g$invalid-fmls-error$10085$1IfLeT g$stx$11101$1IfLeT g$lhs*$11108$1IfLeT)))) g$ls/false$11103$1IfLeT) ((case-lambda ((g$t$11112$1IfLeT) ((case-lambda ((g$ls/false$11113$1IfLeT) (if (if g$ls/false$11113$1IfLeT (begin '#f (apply (case-lambda ((g$f$11114$1IfLeT g$lhs*$11115$1IfLeT g$rhs*$11116$1IfLeT g$b$11117$1IfLeT g$b*$11118$1IfLeT) (g$id?$9838$1IfLeT g$f$11114$1IfLeT))) g$ls/false$11113$1IfLeT)) '#f) (apply (case-lambda ((g$f$11119$1IfLeT g$lhs*$11120$1IfLeT g$rhs*$11121$1IfLeT g$b$11122$1IfLeT g$b*$11123$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT g$lhs*$11120$1IfLeT) (g$bless$10083$1IfLeT (cons (list 'letrec (list (list g$f$11119$1IfLeT (cons 'lambda (cons g$lhs*$11120$1IfLeT (cons g$b$11122$1IfLeT g$b*$11123$1IfLeT))))) g$f$11119$1IfLeT) g$rhs*$11121$1IfLeT)) (g$invalid-fmls-error$10085$1IfLeT g$stx$11101$1IfLeT g$lhs*$11120$1IfLeT)))) g$ls/false$11113$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11112$1IfLeT)))) ((case-lambda ((g$x$11124$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11124$1IfLeT) (begin '#f ((case-lambda ((g$q$11125$1IfLeT) (if g$q$11125$1IfLeT (begin '#f ((case-lambda ((g$r$11126$1IfLeT) (if g$r$11126$1IfLeT (begin '#f (append g$q$11125$1IfLeT g$r$11126$1IfLeT)) '#f))) ((case-lambda ((g$x$11127$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11127$1IfLeT) (begin '#f ((case-lambda ((g$q$11128$1IfLeT) (if g$q$11128$1IfLeT (begin '#f ((case-lambda ((g$r$11129$1IfLeT) (if g$r$11129$1IfLeT (begin '#f (append g$q$11128$1IfLeT g$r$11129$1IfLeT)) '#f))) ((case-lambda ((g$x$11130$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11130$1IfLeT) (begin '#f ((case-lambda ((g$q$11131$1IfLeT) (if g$q$11131$1IfLeT (begin '#f ((case-lambda ((g$r$11132$1IfLeT) (if g$r$11132$1IfLeT (begin '#f (append g$q$11131$1IfLeT g$r$11132$1IfLeT)) '#f))) ((case-lambda ((g$x$11133$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11133$1IfLeT) (begin '#f ((case-lambda ((g$q$11134$1IfLeT) (if g$q$11134$1IfLeT (begin '#f ((case-lambda ((g$r$11135$1IfLeT) (if g$r$11135$1IfLeT (begin '#f (append g$q$11134$1IfLeT g$r$11135$1IfLeT)) '#f))) ((letrec ((g$f$11136$1IfLeT (case-lambda ((g$x$11137$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11137$1IfLeT) ((case-lambda ((g$cars/f$11138$1IfLeT) (if g$cars/f$11138$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11139$1IfLeT) (if g$cdrs/f$11139$1IfLeT (begin '#f (map cons g$cars/f$11138$1IfLeT g$cdrs/f$11139$1IfLeT)) '#f))) (g$f$11136$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11137$1IfLeT)))) '#f))) ((case-lambda ((g$x$11140$1IfLeT) (list g$x$11140$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11137$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11137$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11136$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11133$1IfLeT)))) '#f))) ((case-lambda ((g$x$11141$1IfLeT) (list g$x$11141$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11133$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11130$1IfLeT)))) '#f))) ((letrec ((g$f$11142$1IfLeT (case-lambda ((g$x$11143$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11143$1IfLeT) ((case-lambda ((g$cars/f$11144$1IfLeT) (if g$cars/f$11144$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11145$1IfLeT) (if g$cdrs/f$11145$1IfLeT (begin '#f (map cons g$cars/f$11144$1IfLeT g$cdrs/f$11145$1IfLeT)) '#f))) (g$f$11142$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11143$1IfLeT)))) '#f))) ((case-lambda ((g$x$11146$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11146$1IfLeT) (begin '#f ((case-lambda ((g$q$11147$1IfLeT) (if g$q$11147$1IfLeT (begin '#f ((case-lambda ((g$r$11148$1IfLeT) (if g$r$11148$1IfLeT (begin '#f (append g$q$11147$1IfLeT g$r$11148$1IfLeT)) '#f))) ((case-lambda ((g$x$11149$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11149$1IfLeT) (begin '#f ((case-lambda ((g$q$11150$1IfLeT) (if g$q$11150$1IfLeT (begin '#f ((case-lambda ((g$r$11151$1IfLeT) (if g$r$11151$1IfLeT (begin '#f (append g$q$11150$1IfLeT g$r$11151$1IfLeT)) '#f))) ((case-lambda ((g$x$11152$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11152$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11149$1IfLeT)))) '#f))) ((case-lambda ((g$x$11153$1IfLeT) (list g$x$11153$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11149$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11146$1IfLeT)))) '#f))) ((case-lambda ((g$x$11154$1IfLeT) (list g$x$11154$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11146$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11143$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11143$1IfLeT) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$11142$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$11130$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11127$1IfLeT)))) '#f))) ((case-lambda ((g$x$11155$1IfLeT) (list g$x$11155$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11127$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11124$1IfLeT)))) '#f))) ((case-lambda ((g$x$11156$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11124$1IfLeT)))) '#f))) g$t$11112$1IfLeT)))) g$t$11102$1IfLeT)))) ((case-lambda ((g$x$11157$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11157$1IfLeT) (begin '#f ((case-lambda ((g$q$11158$1IfLeT) (if g$q$11158$1IfLeT (begin '#f ((case-lambda ((g$r$11159$1IfLeT) (if g$r$11159$1IfLeT (begin '#f (append g$q$11158$1IfLeT g$r$11159$1IfLeT)) '#f))) ((case-lambda ((g$x$11160$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11160$1IfLeT) (begin '#f ((case-lambda ((g$q$11161$1IfLeT) (if g$q$11161$1IfLeT (begin '#f ((case-lambda ((g$r$11162$1IfLeT) (if g$r$11162$1IfLeT (begin '#f (append g$q$11161$1IfLeT g$r$11162$1IfLeT)) '#f))) ((case-lambda ((g$x$11163$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11163$1IfLeT) (begin '#f ((case-lambda ((g$q$11164$1IfLeT) (if g$q$11164$1IfLeT (begin '#f ((case-lambda ((g$r$11165$1IfLeT) (if g$r$11165$1IfLeT (begin '#f (append g$q$11164$1IfLeT g$r$11165$1IfLeT)) '#f))) ((letrec ((g$f$11166$1IfLeT (case-lambda ((g$x$11167$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11167$1IfLeT) ((case-lambda ((g$cars/f$11168$1IfLeT) (if g$cars/f$11168$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11169$1IfLeT) (if g$cdrs/f$11169$1IfLeT (begin '#f (map cons g$cars/f$11168$1IfLeT g$cdrs/f$11169$1IfLeT)) '#f))) (g$f$11166$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11167$1IfLeT)))) '#f))) ((case-lambda ((g$x$11170$1IfLeT) (list g$x$11170$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11167$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11167$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11166$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11163$1IfLeT)))) '#f))) ((case-lambda ((g$x$11171$1IfLeT) (list g$x$11171$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11163$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11160$1IfLeT)))) '#f))) ((letrec ((g$f$11172$1IfLeT (case-lambda ((g$x$11173$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11173$1IfLeT) ((case-lambda ((g$cars/f$11174$1IfLeT) (if g$cars/f$11174$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11175$1IfLeT) (if g$cdrs/f$11175$1IfLeT (begin '#f (map cons g$cars/f$11174$1IfLeT g$cdrs/f$11175$1IfLeT)) '#f))) (g$f$11172$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11173$1IfLeT)))) '#f))) ((case-lambda ((g$x$11176$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11176$1IfLeT) (begin '#f ((case-lambda ((g$q$11177$1IfLeT) (if g$q$11177$1IfLeT (begin '#f ((case-lambda ((g$r$11178$1IfLeT) (if g$r$11178$1IfLeT (begin '#f (append g$q$11177$1IfLeT g$r$11178$1IfLeT)) '#f))) ((case-lambda ((g$x$11179$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11179$1IfLeT) (begin '#f ((case-lambda ((g$q$11180$1IfLeT) (if g$q$11180$1IfLeT (begin '#f ((case-lambda ((g$r$11181$1IfLeT) (if g$r$11181$1IfLeT (begin '#f (append g$q$11180$1IfLeT g$r$11181$1IfLeT)) '#f))) ((case-lambda ((g$x$11182$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11182$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11179$1IfLeT)))) '#f))) ((case-lambda ((g$x$11183$1IfLeT) (list g$x$11183$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11179$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11176$1IfLeT)))) '#f))) ((case-lambda ((g$x$11184$1IfLeT) (list g$x$11184$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11176$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11173$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11173$1IfLeT) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$11172$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$11160$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11157$1IfLeT)))) '#f))) ((case-lambda ((g$x$11185$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11157$1IfLeT)))) '#f))) g$t$11102$1IfLeT)))) g$stx$11101$1IfLeT)))) (g$let-values-macro$10087$1IfLeT g$let-values-macro$16192$1IfLeT (case-lambda ((g$stx$11186$1IfLeT) (letrec* ((g$rename$11187$1IfLeT (case-lambda ((g$x$11309$1IfLeT g$old*$11310$1IfLeT g$new*$11311$1IfLeT) (begin (if (g$id?$9838$1IfLeT g$x$11309$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"not an indentifier" g$stx$11186$1IfLeT g$x$11309$1IfLeT)) (if (g$bound-id-member?$9845$1IfLeT g$x$11309$1IfLeT g$old*$11310$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"duplicate binding" g$stx$11186$1IfLeT g$x$11309$1IfLeT) (void)) ((case-lambda ((g$y$11312$1IfLeT) (values g$y$11312$1IfLeT (cons g$x$11309$1IfLeT g$old*$11310$1IfLeT) (cons g$y$11312$1IfLeT g$new*$11311$1IfLeT)))) (gensym (g$syntax->datum$10224$1IfLeT g$x$11309$1IfLeT))))))) (g$rename*$11188$1IfLeT (case-lambda ((g$x*$11300$1IfLeT g$old*$11301$1IfLeT g$new*$11302$1IfLeT) (if (null? g$x*$11300$1IfLeT) (values '() g$old*$11301$1IfLeT g$new*$11302$1IfLeT) (call-with-values (case-lambda (() (g$rename$11187$1IfLeT (car g$x*$11300$1IfLeT) g$old*$11301$1IfLeT g$new*$11302$1IfLeT))) (case-lambda ((g$x$11303$1IfLeT g$old*$11304$1IfLeT g$new*$11305$1IfLeT) (call-with-values (case-lambda (() (g$rename*$11188$1IfLeT (cdr g$x*$11300$1IfLeT) g$old*$11304$1IfLeT g$new*$11305$1IfLeT))) (case-lambda ((g$x*$11306$1IfLeT g$old*$11307$1IfLeT g$new*$11308$1IfLeT) (values (cons g$x$11303$1IfLeT g$x*$11306$1IfLeT) g$old*$11307$1IfLeT g$new*$11308$1IfLeT)))))))))))) ((case-lambda ((g$t$11189$1IfLeT) ((case-lambda ((g$ls/false$11190$1IfLeT) (if (if g$ls/false$11190$1IfLeT (begin '#f (apply (case-lambda ((g$b$11191$1IfLeT g$b*$11192$1IfLeT) '#t)) g$ls/false$11190$1IfLeT)) '#f) (apply (case-lambda ((g$b$11193$1IfLeT g$b*$11194$1IfLeT) (g$cons*$8492$1IfLeT (g$bless$10083$1IfLeT 'let) '() g$b$11193$1IfLeT g$b*$11194$1IfLeT))) g$ls/false$11190$1IfLeT) ((case-lambda ((g$t$11195$1IfLeT) ((case-lambda ((g$ls/false$11196$1IfLeT) (if (if g$ls/false$11196$1IfLeT (begin '#f (apply (case-lambda ((g$lhs*$11197$1IfLeT g$rhs*$11198$1IfLeT g$b$11199$1IfLeT g$b*$11200$1IfLeT) '#t)) g$ls/false$11196$1IfLeT)) '#f) (apply (case-lambda ((g$lhs*$11201$1IfLeT g$rhs*$11202$1IfLeT g$b$11203$1IfLeT g$b*$11204$1IfLeT) (g$bless$10083$1IfLeT ((letrec ((g$f$11205$1IfLeT (case-lambda ((g$lhs*$11206$1IfLeT g$rhs*$11207$1IfLeT g$old*$11208$1IfLeT g$new*$11209$1IfLeT) (if (null? g$lhs*$11206$1IfLeT) (cons 'let (cons (map list g$old*$11208$1IfLeT g$new*$11209$1IfLeT) (cons g$b$11203$1IfLeT g$b*$11204$1IfLeT))) ((case-lambda ((g$t$11210$1IfLeT) ((case-lambda ((g$ls/false$11211$1IfLeT) (if (if g$ls/false$11211$1IfLeT (begin '#f (apply (case-lambda ((g$x*$11212$1IfLeT) '#t)) g$ls/false$11211$1IfLeT)) '#f) (apply (case-lambda ((g$x*$11213$1IfLeT) (call-with-values (case-lambda (() (g$rename*$11188$1IfLeT g$x*$11213$1IfLeT g$old*$11208$1IfLeT g$new*$11209$1IfLeT))) (case-lambda ((g$y*$11217$1IfLeT g$old*$11218$1IfLeT g$new*$11219$1IfLeT) ((case-lambda ((g$new*$11220$1IfLeT g$old*$11221$1IfLeT g$y*$11222$1IfLeT) (list 'call-with-values (list 'lambda '() (car g$rhs*$11207$1IfLeT)) (list 'lambda g$y*$11222$1IfLeT (g$f$11205$1IfLeT (cdr g$lhs*$11206$1IfLeT) (cdr g$rhs*$11207$1IfLeT) g$old*$11221$1IfLeT g$new*$11220$1IfLeT))))) g$new*$11219$1IfLeT g$old*$11218$1IfLeT g$y*$11217$1IfLeT)))))) g$ls/false$11211$1IfLeT) ((case-lambda ((g$t$11223$1IfLeT) ((case-lambda ((g$ls/false$11224$1IfLeT) (if (if g$ls/false$11224$1IfLeT (begin '#f (apply (case-lambda ((g$x*$11225$1IfLeT g$x$11226$1IfLeT) '#t)) g$ls/false$11224$1IfLeT)) '#f) (apply (case-lambda ((g$x*$11227$1IfLeT g$x$11228$1IfLeT) (call-with-values (case-lambda (() (g$rename$11187$1IfLeT g$x$11228$1IfLeT g$old*$11208$1IfLeT g$new*$11209$1IfLeT))) (case-lambda ((g$y$11229$1IfLeT g$old*$11230$1IfLeT g$new*$11231$1IfLeT) (call-with-values (case-lambda (() (g$rename*$11188$1IfLeT g$x*$11227$1IfLeT g$old*$11230$1IfLeT g$new*$11231$1IfLeT))) (case-lambda ((g$y*$11232$1IfLeT g$old*$11233$1IfLeT g$new*$11234$1IfLeT) (list 'call-with-values (list 'lambda '() (car g$rhs*$11207$1IfLeT)) (list 'lambda (append g$y*$11232$1IfLeT g$y$11229$1IfLeT) (g$f$11205$1IfLeT (cdr g$lhs*$11206$1IfLeT) (cdr g$rhs*$11207$1IfLeT) g$old*$11233$1IfLeT g$new*$11234$1IfLeT))))))))))) g$ls/false$11224$1IfLeT) ((case-lambda ((g$t$11235$1IfLeT) ((case-lambda ((g$ls/false$11236$1IfLeT) (if (if g$ls/false$11236$1IfLeT (begin '#f (apply (case-lambda ((g$others$11237$1IfLeT) '#t)) g$ls/false$11236$1IfLeT)) '#f) (apply (case-lambda ((g$others$11238$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"malformed bindings" g$stx$11186$1IfLeT g$others$11238$1IfLeT))) g$ls/false$11236$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11235$1IfLeT)))) ((case-lambda ((g$x$11239$1IfLeT) (list g$x$11239$1IfLeT))) g$t$11235$1IfLeT)))) g$t$11223$1IfLeT)))) ((letrec ((g$f$11240$1IfLeT (case-lambda ((g$x$11243$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11243$1IfLeT) ((case-lambda ((g$cars/f$11244$1IfLeT) (if g$cars/f$11244$1IfLeT (begin '#f ((case-lambda ((g$d/f$11245$1IfLeT) (if g$d/f$11245$1IfLeT (begin '#f (cons (map cons g$cars/f$11244$1IfLeT (car g$d/f$11245$1IfLeT)) (cdr g$d/f$11245$1IfLeT))) '#f))) (g$f$11240$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11243$1IfLeT)))) '#f))) ((case-lambda ((g$x$11246$1IfLeT) (list g$x$11246$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11243$1IfLeT))) ((case-lambda ((g$d$11247$1IfLeT) (if g$d$11247$1IfLeT (begin '#f (cons (list (begin 'x* '())) g$d$11247$1IfLeT)) '#f))) ((case-lambda ((g$x$11248$1IfLeT) (list g$x$11248$1IfLeT))) g$x$11243$1IfLeT))))))) (case-lambda ((g$x$11241$1IfLeT) ((case-lambda ((g$x$11242$1IfLeT) (if g$x$11242$1IfLeT (begin '#f (append (car g$x$11242$1IfLeT) (cdr g$x$11242$1IfLeT))) '#f))) (g$f$11240$1IfLeT g$x$11241$1IfLeT))))) g$t$11223$1IfLeT)))) g$t$11210$1IfLeT)))) ((letrec ((g$f$11249$1IfLeT (case-lambda ((g$x$11250$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11250$1IfLeT) ((case-lambda ((g$cars/f$11251$1IfLeT) (if g$cars/f$11251$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11252$1IfLeT) (if g$cdrs/f$11252$1IfLeT (begin '#f (map cons g$cars/f$11251$1IfLeT g$cdrs/f$11252$1IfLeT)) '#f))) (g$f$11249$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11250$1IfLeT)))) '#f))) ((case-lambda ((g$x$11253$1IfLeT) (list g$x$11253$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11250$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11250$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$11249$1IfLeT) g$t$11210$1IfLeT)))) (car g$lhs*$11206$1IfLeT))))))) g$f$11205$1IfLeT) g$lhs*$11201$1IfLeT g$rhs*$11202$1IfLeT '() '())))) g$ls/false$11196$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11195$1IfLeT)))) ((case-lambda ((g$x$11254$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11254$1IfLeT) (begin '#f ((case-lambda ((g$q$11255$1IfLeT) (if g$q$11255$1IfLeT (begin '#f ((case-lambda ((g$r$11256$1IfLeT) (if g$r$11256$1IfLeT (begin '#f (append g$q$11255$1IfLeT g$r$11256$1IfLeT)) '#f))) ((case-lambda ((g$x$11257$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11257$1IfLeT) (begin '#f ((case-lambda ((g$q$11258$1IfLeT) (if g$q$11258$1IfLeT (begin '#f ((case-lambda ((g$r$11259$1IfLeT) (if g$r$11259$1IfLeT (begin '#f (append g$q$11258$1IfLeT g$r$11259$1IfLeT)) '#f))) ((case-lambda ((g$x$11260$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11260$1IfLeT) (begin '#f ((case-lambda ((g$q$11261$1IfLeT) (if g$q$11261$1IfLeT (begin '#f ((case-lambda ((g$r$11262$1IfLeT) (if g$r$11262$1IfLeT (begin '#f (append g$q$11261$1IfLeT g$r$11262$1IfLeT)) '#f))) ((letrec ((g$f$11263$1IfLeT (case-lambda ((g$x$11264$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11264$1IfLeT) ((case-lambda ((g$cars/f$11265$1IfLeT) (if g$cars/f$11265$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11266$1IfLeT) (if g$cdrs/f$11266$1IfLeT (begin '#f (map cons g$cars/f$11265$1IfLeT g$cdrs/f$11266$1IfLeT)) '#f))) (g$f$11263$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11264$1IfLeT)))) '#f))) ((case-lambda ((g$x$11267$1IfLeT) (list g$x$11267$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11264$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11264$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11263$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11260$1IfLeT)))) '#f))) ((case-lambda ((g$x$11268$1IfLeT) (list g$x$11268$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11260$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11257$1IfLeT)))) '#f))) ((letrec ((g$f$11269$1IfLeT (case-lambda ((g$x$11270$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11270$1IfLeT) ((case-lambda ((g$cars/f$11271$1IfLeT) (if g$cars/f$11271$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11272$1IfLeT) (if g$cdrs/f$11272$1IfLeT (begin '#f (map cons g$cars/f$11271$1IfLeT g$cdrs/f$11272$1IfLeT)) '#f))) (g$f$11269$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11270$1IfLeT)))) '#f))) ((case-lambda ((g$x$11273$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11273$1IfLeT) (begin '#f ((case-lambda ((g$q$11274$1IfLeT) (if g$q$11274$1IfLeT (begin '#f ((case-lambda ((g$r$11275$1IfLeT) (if g$r$11275$1IfLeT (begin '#f (append g$q$11274$1IfLeT g$r$11275$1IfLeT)) '#f))) ((case-lambda ((g$x$11276$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11276$1IfLeT) (begin '#f ((case-lambda ((g$q$11277$1IfLeT) (if g$q$11277$1IfLeT (begin '#f ((case-lambda ((g$r$11278$1IfLeT) (if g$r$11278$1IfLeT (begin '#f (append g$q$11277$1IfLeT g$r$11278$1IfLeT)) '#f))) ((case-lambda ((g$x$11279$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11279$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11276$1IfLeT)))) '#f))) ((case-lambda ((g$x$11280$1IfLeT) (list g$x$11280$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11276$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11273$1IfLeT)))) '#f))) ((case-lambda ((g$x$11281$1IfLeT) (list g$x$11281$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11273$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11270$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11270$1IfLeT) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$11269$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$11257$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11254$1IfLeT)))) '#f))) ((case-lambda ((g$x$11282$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11254$1IfLeT)))) '#f))) g$t$11195$1IfLeT)))) g$t$11189$1IfLeT)))) ((case-lambda ((g$x$11283$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11283$1IfLeT) (begin '#f ((case-lambda ((g$q$11284$1IfLeT) (if g$q$11284$1IfLeT (begin '#f ((case-lambda ((g$r$11285$1IfLeT) (if g$r$11285$1IfLeT (begin '#f (append g$q$11284$1IfLeT g$r$11285$1IfLeT)) '#f))) ((case-lambda ((g$x$11286$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11286$1IfLeT) (begin '#f ((case-lambda ((g$q$11287$1IfLeT) (if g$q$11287$1IfLeT (begin '#f ((case-lambda ((g$r$11288$1IfLeT) (if g$r$11288$1IfLeT (begin '#f (append g$q$11287$1IfLeT g$r$11288$1IfLeT)) '#f))) ((case-lambda ((g$x$11289$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11289$1IfLeT) (begin '#f ((case-lambda ((g$q$11290$1IfLeT) (if g$q$11290$1IfLeT (begin '#f ((case-lambda ((g$r$11291$1IfLeT) (if g$r$11291$1IfLeT (begin '#f (append g$q$11290$1IfLeT g$r$11291$1IfLeT)) '#f))) ((letrec ((g$f$11292$1IfLeT (case-lambda ((g$x$11293$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11293$1IfLeT) ((case-lambda ((g$cars/f$11294$1IfLeT) (if g$cars/f$11294$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11295$1IfLeT) (if g$cdrs/f$11295$1IfLeT (begin '#f (map cons g$cars/f$11294$1IfLeT g$cdrs/f$11295$1IfLeT)) '#f))) (g$f$11292$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11293$1IfLeT)))) '#f))) ((case-lambda ((g$x$11296$1IfLeT) (list g$x$11296$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11293$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11293$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11292$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11289$1IfLeT)))) '#f))) ((case-lambda ((g$x$11297$1IfLeT) (list g$x$11297$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11289$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11286$1IfLeT)))) '#f))) ((case-lambda ((g$x$11298$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11298$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-car$9835$1IfLeT g$x$11286$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11283$1IfLeT)))) '#f))) ((case-lambda ((g$x$11299$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11283$1IfLeT)))) '#f))) g$t$11189$1IfLeT)))) g$stx$11186$1IfLeT))))) (g$let*-values-macro$10088$1IfLeT g$let*-values-macro$16193$1IfLeT (case-lambda ((g$stx$11313$1IfLeT) (letrec* ((g$check$11314$1IfLeT (case-lambda ((g$x*$11409$1IfLeT) (if (null? g$x*$11409$1IfLeT) (void) ((case-lambda ((g$x$11410$1IfLeT) (begin (if (g$id?$9838$1IfLeT g$x$11410$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"not an identifier" g$stx$11313$1IfLeT g$x$11410$1IfLeT)) (g$check$11314$1IfLeT (cdr g$x*$11409$1IfLeT)) (if (g$bound-id-member?$9845$1IfLeT g$x$11410$1IfLeT (cdr g$x*$11409$1IfLeT)) (g$syntax-violation$10221$1IfLeT '#f '"duplicate identifier" g$stx$11313$1IfLeT g$x$11410$1IfLeT) (void))))) (car g$x*$11409$1IfLeT))))))) ((case-lambda ((g$t$11315$1IfLeT) ((case-lambda ((g$ls/false$11316$1IfLeT) (if (if g$ls/false$11316$1IfLeT (begin '#f (apply (case-lambda ((g$b$11317$1IfLeT g$b*$11318$1IfLeT) '#t)) g$ls/false$11316$1IfLeT)) '#f) (apply (case-lambda ((g$b$11319$1IfLeT g$b*$11320$1IfLeT) (g$cons*$8492$1IfLeT (g$bless$10083$1IfLeT 'let) '() g$b$11319$1IfLeT g$b*$11320$1IfLeT))) g$ls/false$11316$1IfLeT) ((case-lambda ((g$t$11321$1IfLeT) ((case-lambda ((g$ls/false$11322$1IfLeT) (if (if g$ls/false$11322$1IfLeT (begin '#f (apply (case-lambda ((g$lhs*$11323$1IfLeT g$rhs*$11324$1IfLeT g$b$11325$1IfLeT g$b*$11326$1IfLeT) '#t)) g$ls/false$11322$1IfLeT)) '#f) (apply (case-lambda ((g$lhs*$11327$1IfLeT g$rhs*$11328$1IfLeT g$b$11329$1IfLeT g$b*$11330$1IfLeT) (g$bless$10083$1IfLeT ((letrec ((g$f$11331$1IfLeT (case-lambda ((g$lhs*$11332$1IfLeT g$rhs*$11333$1IfLeT) (if (null? g$lhs*$11332$1IfLeT) (cons 'begin (cons g$b$11329$1IfLeT g$b*$11330$1IfLeT)) ((case-lambda ((g$t$11334$1IfLeT) ((case-lambda ((g$ls/false$11335$1IfLeT) (if (if g$ls/false$11335$1IfLeT (begin '#f (apply (case-lambda ((g$x*$11336$1IfLeT) '#t)) g$ls/false$11335$1IfLeT)) '#f) (apply (case-lambda ((g$x*$11337$1IfLeT) (begin (g$check$11314$1IfLeT g$x*$11337$1IfLeT) (list 'call-with-values (list 'lambda '() (car g$rhs*$11333$1IfLeT)) (list 'lambda g$x*$11337$1IfLeT (g$f$11331$1IfLeT (cdr g$lhs*$11332$1IfLeT) (cdr g$rhs*$11333$1IfLeT))))))) g$ls/false$11335$1IfLeT) ((case-lambda ((g$t$11338$1IfLeT) ((case-lambda ((g$ls/false$11339$1IfLeT) (if (if g$ls/false$11339$1IfLeT (begin '#f (apply (case-lambda ((g$x*$11340$1IfLeT g$x$11341$1IfLeT) '#t)) g$ls/false$11339$1IfLeT)) '#f) (apply (case-lambda ((g$x*$11342$1IfLeT g$x$11343$1IfLeT) (begin (g$check$11314$1IfLeT (cons g$x$11343$1IfLeT g$x*$11342$1IfLeT)) (list 'call-with-values (list 'lambda '() (car g$rhs*$11333$1IfLeT)) (list 'lambda (append g$x*$11342$1IfLeT g$x$11343$1IfLeT) (g$f$11331$1IfLeT (cdr g$lhs*$11332$1IfLeT) (cdr g$rhs*$11333$1IfLeT))))))) g$ls/false$11339$1IfLeT) ((case-lambda ((g$t$11344$1IfLeT) ((case-lambda ((g$ls/false$11345$1IfLeT) (if (if g$ls/false$11345$1IfLeT (begin '#f (apply (case-lambda ((g$others$11346$1IfLeT) '#t)) g$ls/false$11345$1IfLeT)) '#f) (apply (case-lambda ((g$others$11347$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"malformed bindings" g$stx$11313$1IfLeT g$others$11347$1IfLeT))) g$ls/false$11345$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11344$1IfLeT)))) ((case-lambda ((g$x$11348$1IfLeT) (list g$x$11348$1IfLeT))) g$t$11344$1IfLeT)))) g$t$11338$1IfLeT)))) ((letrec ((g$f$11349$1IfLeT (case-lambda ((g$x$11352$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11352$1IfLeT) ((case-lambda ((g$cars/f$11353$1IfLeT) (if g$cars/f$11353$1IfLeT (begin '#f ((case-lambda ((g$d/f$11354$1IfLeT) (if g$d/f$11354$1IfLeT (begin '#f (cons (map cons g$cars/f$11353$1IfLeT (car g$d/f$11354$1IfLeT)) (cdr g$d/f$11354$1IfLeT))) '#f))) (g$f$11349$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11352$1IfLeT)))) '#f))) ((case-lambda ((g$x$11355$1IfLeT) (list g$x$11355$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11352$1IfLeT))) ((case-lambda ((g$d$11356$1IfLeT) (if g$d$11356$1IfLeT (begin '#f (cons (list (begin 'x* '())) g$d$11356$1IfLeT)) '#f))) ((case-lambda ((g$x$11357$1IfLeT) (list g$x$11357$1IfLeT))) g$x$11352$1IfLeT))))))) (case-lambda ((g$x$11350$1IfLeT) ((case-lambda ((g$x$11351$1IfLeT) (if g$x$11351$1IfLeT (begin '#f (append (car g$x$11351$1IfLeT) (cdr g$x$11351$1IfLeT))) '#f))) (g$f$11349$1IfLeT g$x$11350$1IfLeT))))) g$t$11338$1IfLeT)))) g$t$11334$1IfLeT)))) ((letrec ((g$f$11358$1IfLeT (case-lambda ((g$x$11359$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11359$1IfLeT) ((case-lambda ((g$cars/f$11360$1IfLeT) (if g$cars/f$11360$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11361$1IfLeT) (if g$cdrs/f$11361$1IfLeT (begin '#f (map cons g$cars/f$11360$1IfLeT g$cdrs/f$11361$1IfLeT)) '#f))) (g$f$11358$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11359$1IfLeT)))) '#f))) ((case-lambda ((g$x$11362$1IfLeT) (list g$x$11362$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11359$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11359$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$11358$1IfLeT) g$t$11334$1IfLeT)))) (car g$lhs*$11332$1IfLeT))))))) g$f$11331$1IfLeT) g$lhs*$11327$1IfLeT g$rhs*$11328$1IfLeT)))) g$ls/false$11322$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11321$1IfLeT)))) ((case-lambda ((g$x$11363$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11363$1IfLeT) (begin '#f ((case-lambda ((g$q$11364$1IfLeT) (if g$q$11364$1IfLeT (begin '#f ((case-lambda ((g$r$11365$1IfLeT) (if g$r$11365$1IfLeT (begin '#f (append g$q$11364$1IfLeT g$r$11365$1IfLeT)) '#f))) ((case-lambda ((g$x$11366$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11366$1IfLeT) (begin '#f ((case-lambda ((g$q$11367$1IfLeT) (if g$q$11367$1IfLeT (begin '#f ((case-lambda ((g$r$11368$1IfLeT) (if g$r$11368$1IfLeT (begin '#f (append g$q$11367$1IfLeT g$r$11368$1IfLeT)) '#f))) ((case-lambda ((g$x$11369$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11369$1IfLeT) (begin '#f ((case-lambda ((g$q$11370$1IfLeT) (if g$q$11370$1IfLeT (begin '#f ((case-lambda ((g$r$11371$1IfLeT) (if g$r$11371$1IfLeT (begin '#f (append g$q$11370$1IfLeT g$r$11371$1IfLeT)) '#f))) ((letrec ((g$f$11372$1IfLeT (case-lambda ((g$x$11373$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11373$1IfLeT) ((case-lambda ((g$cars/f$11374$1IfLeT) (if g$cars/f$11374$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11375$1IfLeT) (if g$cdrs/f$11375$1IfLeT (begin '#f (map cons g$cars/f$11374$1IfLeT g$cdrs/f$11375$1IfLeT)) '#f))) (g$f$11372$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11373$1IfLeT)))) '#f))) ((case-lambda ((g$x$11376$1IfLeT) (list g$x$11376$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11373$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11373$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11372$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11369$1IfLeT)))) '#f))) ((case-lambda ((g$x$11377$1IfLeT) (list g$x$11377$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11369$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11366$1IfLeT)))) '#f))) ((letrec ((g$f$11378$1IfLeT (case-lambda ((g$x$11379$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11379$1IfLeT) ((case-lambda ((g$cars/f$11380$1IfLeT) (if g$cars/f$11380$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11381$1IfLeT) (if g$cdrs/f$11381$1IfLeT (begin '#f (map cons g$cars/f$11380$1IfLeT g$cdrs/f$11381$1IfLeT)) '#f))) (g$f$11378$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11379$1IfLeT)))) '#f))) ((case-lambda ((g$x$11382$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11382$1IfLeT) (begin '#f ((case-lambda ((g$q$11383$1IfLeT) (if g$q$11383$1IfLeT (begin '#f ((case-lambda ((g$r$11384$1IfLeT) (if g$r$11384$1IfLeT (begin '#f (append g$q$11383$1IfLeT g$r$11384$1IfLeT)) '#f))) ((case-lambda ((g$x$11385$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11385$1IfLeT) (begin '#f ((case-lambda ((g$q$11386$1IfLeT) (if g$q$11386$1IfLeT (begin '#f ((case-lambda ((g$r$11387$1IfLeT) (if g$r$11387$1IfLeT (begin '#f (append g$q$11386$1IfLeT g$r$11387$1IfLeT)) '#f))) ((case-lambda ((g$x$11388$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11388$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11385$1IfLeT)))) '#f))) ((case-lambda ((g$x$11389$1IfLeT) (list g$x$11389$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11385$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11382$1IfLeT)))) '#f))) ((case-lambda ((g$x$11390$1IfLeT) (list g$x$11390$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11382$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11379$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11379$1IfLeT) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$11378$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$11366$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11363$1IfLeT)))) '#f))) ((case-lambda ((g$x$11391$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11363$1IfLeT)))) '#f))) g$t$11321$1IfLeT)))) g$t$11315$1IfLeT)))) ((case-lambda ((g$x$11392$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11392$1IfLeT) (begin '#f ((case-lambda ((g$q$11393$1IfLeT) (if g$q$11393$1IfLeT (begin '#f ((case-lambda ((g$r$11394$1IfLeT) (if g$r$11394$1IfLeT (begin '#f (append g$q$11393$1IfLeT g$r$11394$1IfLeT)) '#f))) ((case-lambda ((g$x$11395$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11395$1IfLeT) (begin '#f ((case-lambda ((g$q$11396$1IfLeT) (if g$q$11396$1IfLeT (begin '#f ((case-lambda ((g$r$11397$1IfLeT) (if g$r$11397$1IfLeT (begin '#f (append g$q$11396$1IfLeT g$r$11397$1IfLeT)) '#f))) ((case-lambda ((g$x$11398$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11398$1IfLeT) (begin '#f ((case-lambda ((g$q$11399$1IfLeT) (if g$q$11399$1IfLeT (begin '#f ((case-lambda ((g$r$11400$1IfLeT) (if g$r$11400$1IfLeT (begin '#f (append g$q$11399$1IfLeT g$r$11400$1IfLeT)) '#f))) ((letrec ((g$f$11401$1IfLeT (case-lambda ((g$x$11402$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11402$1IfLeT) ((case-lambda ((g$cars/f$11403$1IfLeT) (if g$cars/f$11403$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11404$1IfLeT) (if g$cdrs/f$11404$1IfLeT (begin '#f (map cons g$cars/f$11403$1IfLeT g$cdrs/f$11404$1IfLeT)) '#f))) (g$f$11401$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11402$1IfLeT)))) '#f))) ((case-lambda ((g$x$11405$1IfLeT) (list g$x$11405$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11402$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11402$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11401$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11398$1IfLeT)))) '#f))) ((case-lambda ((g$x$11406$1IfLeT) (list g$x$11406$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11398$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11395$1IfLeT)))) '#f))) ((case-lambda ((g$x$11407$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11407$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-car$9835$1IfLeT g$x$11395$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11392$1IfLeT)))) '#f))) ((case-lambda ((g$x$11408$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11392$1IfLeT)))) '#f))) g$t$11315$1IfLeT)))) g$stx$11313$1IfLeT))))) (g$trace-lambda-macro$10089$1IfLeT g$trace-lambda-macro$16194$1IfLeT (case-lambda ((g$stx$11411$1IfLeT) ((case-lambda ((g$t$11412$1IfLeT) ((case-lambda ((g$ls/false$11413$1IfLeT) (if (if g$ls/false$11413$1IfLeT (begin '#f (apply (case-lambda ((g$who$11414$1IfLeT g$fmls$11415$1IfLeT g$b$11416$1IfLeT g$b*$11417$1IfLeT) '#t)) g$ls/false$11413$1IfLeT)) '#f) (apply (case-lambda ((g$who$11418$1IfLeT g$fmls$11419$1IfLeT g$b$11420$1IfLeT g$b*$11421$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT g$fmls$11419$1IfLeT) (g$bless$10083$1IfLeT (list 'make-traced-procedure (list 'quote g$who$11418$1IfLeT) (cons 'lambda (cons g$fmls$11419$1IfLeT (cons g$b$11420$1IfLeT g$b*$11421$1IfLeT))))) (g$invalid-fmls-error$10085$1IfLeT g$stx$11411$1IfLeT g$fmls$11419$1IfLeT)))) g$ls/false$11413$1IfLeT) ((case-lambda ((g$t$11422$1IfLeT) ((case-lambda ((g$ls/false$11423$1IfLeT) (if (if g$ls/false$11423$1IfLeT (begin '#f (apply (case-lambda ((g$who$11424$1IfLeT g$fmls$11425$1IfLeT g$last$11426$1IfLeT g$b$11427$1IfLeT g$b*$11428$1IfLeT) '#t)) g$ls/false$11423$1IfLeT)) '#f) (apply (case-lambda ((g$who$11429$1IfLeT g$fmls$11430$1IfLeT g$last$11431$1IfLeT g$b$11432$1IfLeT g$b*$11433$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT (cons g$last$11431$1IfLeT g$fmls$11430$1IfLeT)) (g$bless$10083$1IfLeT (list 'make-traced-procedure (list 'quote g$who$11429$1IfLeT) (cons 'lambda (cons (append g$fmls$11430$1IfLeT g$last$11431$1IfLeT) (cons g$b$11432$1IfLeT g$b*$11433$1IfLeT))))) (g$invalid-fmls-error$10085$1IfLeT g$stx$11411$1IfLeT (append g$fmls$11430$1IfLeT g$last$11431$1IfLeT))))) g$ls/false$11423$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11422$1IfLeT)))) ((case-lambda ((g$x$11434$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11434$1IfLeT) (begin '#f ((case-lambda ((g$q$11435$1IfLeT) (if g$q$11435$1IfLeT (begin '#f ((case-lambda ((g$r$11436$1IfLeT) (if g$r$11436$1IfLeT (begin '#f (append g$q$11435$1IfLeT g$r$11436$1IfLeT)) '#f))) ((case-lambda ((g$x$11437$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11437$1IfLeT) (begin '#f ((case-lambda ((g$q$11438$1IfLeT) (if g$q$11438$1IfLeT (begin '#f ((case-lambda ((g$r$11439$1IfLeT) (if g$r$11439$1IfLeT (begin '#f (append g$q$11438$1IfLeT g$r$11439$1IfLeT)) '#f))) ((case-lambda ((g$x$11440$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11440$1IfLeT) (begin '#f ((case-lambda ((g$q$11441$1IfLeT) (if g$q$11441$1IfLeT (begin '#f ((case-lambda ((g$r$11442$1IfLeT) (if g$r$11442$1IfLeT (begin '#f (append g$q$11441$1IfLeT g$r$11442$1IfLeT)) '#f))) ((case-lambda ((g$x$11443$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11443$1IfLeT) (begin '#f ((case-lambda ((g$q$11444$1IfLeT) (if g$q$11444$1IfLeT (begin '#f ((case-lambda ((g$r$11445$1IfLeT) (if g$r$11445$1IfLeT (begin '#f (append g$q$11444$1IfLeT g$r$11445$1IfLeT)) '#f))) ((letrec ((g$f$11446$1IfLeT (case-lambda ((g$x$11447$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11447$1IfLeT) ((case-lambda ((g$cars/f$11448$1IfLeT) (if g$cars/f$11448$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11449$1IfLeT) (if g$cdrs/f$11449$1IfLeT (begin '#f (map cons g$cars/f$11448$1IfLeT g$cdrs/f$11449$1IfLeT)) '#f))) (g$f$11446$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11447$1IfLeT)))) '#f))) ((case-lambda ((g$x$11450$1IfLeT) (list g$x$11450$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11447$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11447$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11446$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11443$1IfLeT)))) '#f))) ((case-lambda ((g$x$11451$1IfLeT) (list g$x$11451$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11443$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11440$1IfLeT)))) '#f))) ((letrec ((g$f$11452$1IfLeT (case-lambda ((g$x$11455$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11455$1IfLeT) ((case-lambda ((g$cars/f$11456$1IfLeT) (if g$cars/f$11456$1IfLeT (begin '#f ((case-lambda ((g$d/f$11457$1IfLeT) (if g$d/f$11457$1IfLeT (begin '#f (cons (map cons g$cars/f$11456$1IfLeT (car g$d/f$11457$1IfLeT)) (cdr g$d/f$11457$1IfLeT))) '#f))) (g$f$11452$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11455$1IfLeT)))) '#f))) ((case-lambda ((g$x$11458$1IfLeT) (list g$x$11458$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11455$1IfLeT))) ((case-lambda ((g$d$11459$1IfLeT) (if g$d$11459$1IfLeT (begin '#f (cons (list (begin 'fmls '())) g$d$11459$1IfLeT)) '#f))) ((case-lambda ((g$x$11460$1IfLeT) (list g$x$11460$1IfLeT))) g$x$11455$1IfLeT))))))) (case-lambda ((g$x$11453$1IfLeT) ((case-lambda ((g$x$11454$1IfLeT) (if g$x$11454$1IfLeT (begin '#f (append (car g$x$11454$1IfLeT) (cdr g$x$11454$1IfLeT))) '#f))) (g$f$11452$1IfLeT g$x$11453$1IfLeT))))) (g$syntax-car$9835$1IfLeT g$x$11440$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11437$1IfLeT)))) '#f))) ((case-lambda ((g$x$11461$1IfLeT) (list g$x$11461$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11437$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11434$1IfLeT)))) '#f))) ((case-lambda ((g$x$11462$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11434$1IfLeT)))) '#f))) g$t$11422$1IfLeT)))) g$t$11412$1IfLeT)))) ((case-lambda ((g$x$11463$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11463$1IfLeT) (begin '#f ((case-lambda ((g$q$11464$1IfLeT) (if g$q$11464$1IfLeT (begin '#f ((case-lambda ((g$r$11465$1IfLeT) (if g$r$11465$1IfLeT (begin '#f (append g$q$11464$1IfLeT g$r$11465$1IfLeT)) '#f))) ((case-lambda ((g$x$11466$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11466$1IfLeT) (begin '#f ((case-lambda ((g$q$11467$1IfLeT) (if g$q$11467$1IfLeT (begin '#f ((case-lambda ((g$r$11468$1IfLeT) (if g$r$11468$1IfLeT (begin '#f (append g$q$11467$1IfLeT g$r$11468$1IfLeT)) '#f))) ((case-lambda ((g$x$11469$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11469$1IfLeT) (begin '#f ((case-lambda ((g$q$11470$1IfLeT) (if g$q$11470$1IfLeT (begin '#f ((case-lambda ((g$r$11471$1IfLeT) (if g$r$11471$1IfLeT (begin '#f (append g$q$11470$1IfLeT g$r$11471$1IfLeT)) '#f))) ((case-lambda ((g$x$11472$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11472$1IfLeT) (begin '#f ((case-lambda ((g$q$11473$1IfLeT) (if g$q$11473$1IfLeT (begin '#f ((case-lambda ((g$r$11474$1IfLeT) (if g$r$11474$1IfLeT (begin '#f (append g$q$11473$1IfLeT g$r$11474$1IfLeT)) '#f))) ((letrec ((g$f$11475$1IfLeT (case-lambda ((g$x$11476$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11476$1IfLeT) ((case-lambda ((g$cars/f$11477$1IfLeT) (if g$cars/f$11477$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11478$1IfLeT) (if g$cdrs/f$11478$1IfLeT (begin '#f (map cons g$cars/f$11477$1IfLeT g$cdrs/f$11478$1IfLeT)) '#f))) (g$f$11475$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11476$1IfLeT)))) '#f))) ((case-lambda ((g$x$11479$1IfLeT) (list g$x$11479$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11476$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11476$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11475$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11472$1IfLeT)))) '#f))) ((case-lambda ((g$x$11480$1IfLeT) (list g$x$11480$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11472$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11469$1IfLeT)))) '#f))) ((letrec ((g$f$11481$1IfLeT (case-lambda ((g$x$11482$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11482$1IfLeT) ((case-lambda ((g$cars/f$11483$1IfLeT) (if g$cars/f$11483$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11484$1IfLeT) (if g$cdrs/f$11484$1IfLeT (begin '#f (map cons g$cars/f$11483$1IfLeT g$cdrs/f$11484$1IfLeT)) '#f))) (g$f$11481$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11482$1IfLeT)))) '#f))) ((case-lambda ((g$x$11485$1IfLeT) (list g$x$11485$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11482$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11482$1IfLeT) (list (begin 'fmls '())) '#f)))))) g$f$11481$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$11469$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11466$1IfLeT)))) '#f))) ((case-lambda ((g$x$11486$1IfLeT) (list g$x$11486$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11466$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11463$1IfLeT)))) '#f))) ((case-lambda ((g$x$11487$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11463$1IfLeT)))) '#f))) g$t$11412$1IfLeT)))) g$stx$11411$1IfLeT)))) (g$trace-define-macro$10090$1IfLeT g$trace-define-macro$16195$1IfLeT (case-lambda ((g$stx$11488$1IfLeT) ((case-lambda ((g$t$11489$1IfLeT) ((case-lambda ((g$ls/false$11490$1IfLeT) (if (if g$ls/false$11490$1IfLeT (begin '#f (apply (case-lambda ((g$who$11491$1IfLeT g$fmls$11492$1IfLeT g$b$11493$1IfLeT g$b*$11494$1IfLeT) '#t)) g$ls/false$11490$1IfLeT)) '#f) (apply (case-lambda ((g$who$11495$1IfLeT g$fmls$11496$1IfLeT g$b$11497$1IfLeT g$b*$11498$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT g$fmls$11496$1IfLeT) (g$bless$10083$1IfLeT (list 'define g$who$11495$1IfLeT (list 'make-traced-procedure (list 'quote g$who$11495$1IfLeT) (cons 'lambda (cons g$fmls$11496$1IfLeT (cons g$b$11497$1IfLeT g$b*$11498$1IfLeT)))))) (g$invalid-fmls-error$10085$1IfLeT g$stx$11488$1IfLeT g$fmls$11496$1IfLeT)))) g$ls/false$11490$1IfLeT) ((case-lambda ((g$t$11499$1IfLeT) ((case-lambda ((g$ls/false$11500$1IfLeT) (if (if g$ls/false$11500$1IfLeT (begin '#f (apply (case-lambda ((g$who$11501$1IfLeT g$fmls$11502$1IfLeT g$last$11503$1IfLeT g$b$11504$1IfLeT g$b*$11505$1IfLeT) '#t)) g$ls/false$11500$1IfLeT)) '#f) (apply (case-lambda ((g$who$11506$1IfLeT g$fmls$11507$1IfLeT g$last$11508$1IfLeT g$b$11509$1IfLeT g$b*$11510$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT (cons g$last$11508$1IfLeT g$fmls$11507$1IfLeT)) (g$bless$10083$1IfLeT (list 'define g$who$11506$1IfLeT (list 'make-traced-procedure (list 'quote g$who$11506$1IfLeT) (cons 'lambda (cons (append g$fmls$11507$1IfLeT g$last$11508$1IfLeT) (cons g$b$11509$1IfLeT g$b*$11510$1IfLeT)))))) (g$invalid-fmls-error$10085$1IfLeT g$stx$11488$1IfLeT (append g$fmls$11507$1IfLeT g$last$11508$1IfLeT))))) g$ls/false$11500$1IfLeT) ((case-lambda ((g$t$11511$1IfLeT) ((case-lambda ((g$ls/false$11512$1IfLeT) (if (if g$ls/false$11512$1IfLeT (begin '#f (apply (case-lambda ((g$who$11513$1IfLeT g$expr$11514$1IfLeT) '#t)) g$ls/false$11512$1IfLeT)) '#f) (apply (case-lambda ((g$who$11515$1IfLeT g$expr$11516$1IfLeT) (if (g$id?$9838$1IfLeT g$who$11515$1IfLeT) (g$bless$10083$1IfLeT (list 'define g$who$11515$1IfLeT (list 'let (list (list 'v g$expr$11516$1IfLeT)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$who$11515$1IfLeT) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (g$syntax-violation$10221$1IfLeT '#f '"invalid name" g$stx$11488$1IfLeT)))) g$ls/false$11512$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11511$1IfLeT)))) ((case-lambda ((g$x$11517$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11517$1IfLeT) (begin '#f ((case-lambda ((g$q$11518$1IfLeT) (if g$q$11518$1IfLeT (begin '#f ((case-lambda ((g$r$11519$1IfLeT) (if g$r$11519$1IfLeT (begin '#f (append g$q$11518$1IfLeT g$r$11519$1IfLeT)) '#f))) ((case-lambda ((g$x$11520$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11520$1IfLeT) (begin '#f ((case-lambda ((g$q$11521$1IfLeT) (if g$q$11521$1IfLeT (begin '#f ((case-lambda ((g$r$11522$1IfLeT) (if g$r$11522$1IfLeT (begin '#f (append g$q$11521$1IfLeT g$r$11522$1IfLeT)) '#f))) ((case-lambda ((g$x$11523$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11523$1IfLeT) (begin '#f ((case-lambda ((g$q$11524$1IfLeT) (if g$q$11524$1IfLeT (begin '#f ((case-lambda ((g$r$11525$1IfLeT) (if g$r$11525$1IfLeT (begin '#f (append g$q$11524$1IfLeT g$r$11525$1IfLeT)) '#f))) ((case-lambda ((g$x$11526$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11526$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11523$1IfLeT)))) '#f))) ((case-lambda ((g$x$11527$1IfLeT) (list g$x$11527$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11523$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11520$1IfLeT)))) '#f))) ((case-lambda ((g$x$11528$1IfLeT) (list g$x$11528$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11520$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11517$1IfLeT)))) '#f))) ((case-lambda ((g$x$11529$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11517$1IfLeT)))) '#f))) g$t$11511$1IfLeT)))) g$t$11499$1IfLeT)))) ((case-lambda ((g$x$11530$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11530$1IfLeT) (begin '#f ((case-lambda ((g$q$11531$1IfLeT) (if g$q$11531$1IfLeT (begin '#f ((case-lambda ((g$r$11532$1IfLeT) (if g$r$11532$1IfLeT (begin '#f (append g$q$11531$1IfLeT g$r$11532$1IfLeT)) '#f))) ((case-lambda ((g$x$11533$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11533$1IfLeT) (begin '#f ((case-lambda ((g$q$11534$1IfLeT) (if g$q$11534$1IfLeT (begin '#f ((case-lambda ((g$r$11535$1IfLeT) (if g$r$11535$1IfLeT (begin '#f (append g$q$11534$1IfLeT g$r$11535$1IfLeT)) '#f))) ((case-lambda ((g$x$11536$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11536$1IfLeT) (begin '#f ((case-lambda ((g$q$11537$1IfLeT) (if g$q$11537$1IfLeT (begin '#f ((case-lambda ((g$r$11538$1IfLeT) (if g$r$11538$1IfLeT (begin '#f (append g$q$11537$1IfLeT g$r$11538$1IfLeT)) '#f))) ((letrec ((g$f$11539$1IfLeT (case-lambda ((g$x$11540$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11540$1IfLeT) ((case-lambda ((g$cars/f$11541$1IfLeT) (if g$cars/f$11541$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11542$1IfLeT) (if g$cdrs/f$11542$1IfLeT (begin '#f (map cons g$cars/f$11541$1IfLeT g$cdrs/f$11542$1IfLeT)) '#f))) (g$f$11539$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11540$1IfLeT)))) '#f))) ((case-lambda ((g$x$11543$1IfLeT) (list g$x$11543$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11540$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11540$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11539$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11536$1IfLeT)))) '#f))) ((case-lambda ((g$x$11544$1IfLeT) (list g$x$11544$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11536$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11533$1IfLeT)))) '#f))) ((case-lambda ((g$x$11545$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11545$1IfLeT) (begin '#f ((case-lambda ((g$q$11546$1IfLeT) (if g$q$11546$1IfLeT (begin '#f ((case-lambda ((g$r$11547$1IfLeT) (if g$r$11547$1IfLeT (begin '#f (append g$q$11546$1IfLeT g$r$11547$1IfLeT)) '#f))) ((letrec ((g$f$11548$1IfLeT (case-lambda ((g$x$11551$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11551$1IfLeT) ((case-lambda ((g$cars/f$11552$1IfLeT) (if g$cars/f$11552$1IfLeT (begin '#f ((case-lambda ((g$d/f$11553$1IfLeT) (if g$d/f$11553$1IfLeT (begin '#f (cons (map cons g$cars/f$11552$1IfLeT (car g$d/f$11553$1IfLeT)) (cdr g$d/f$11553$1IfLeT))) '#f))) (g$f$11548$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11551$1IfLeT)))) '#f))) ((case-lambda ((g$x$11554$1IfLeT) (list g$x$11554$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11551$1IfLeT))) ((case-lambda ((g$d$11555$1IfLeT) (if g$d$11555$1IfLeT (begin '#f (cons (list (begin 'fmls '())) g$d$11555$1IfLeT)) '#f))) ((case-lambda ((g$x$11556$1IfLeT) (list g$x$11556$1IfLeT))) g$x$11551$1IfLeT))))))) (case-lambda ((g$x$11549$1IfLeT) ((case-lambda ((g$x$11550$1IfLeT) (if g$x$11550$1IfLeT (begin '#f (append (car g$x$11550$1IfLeT) (cdr g$x$11550$1IfLeT))) '#f))) (g$f$11548$1IfLeT g$x$11549$1IfLeT))))) (g$syntax-cdr$9836$1IfLeT g$x$11545$1IfLeT)))) '#f))) ((case-lambda ((g$x$11557$1IfLeT) (list g$x$11557$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11545$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11533$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11530$1IfLeT)))) '#f))) ((case-lambda ((g$x$11558$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11530$1IfLeT)))) '#f))) g$t$11499$1IfLeT)))) g$t$11489$1IfLeT)))) ((case-lambda ((g$x$11559$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11559$1IfLeT) (begin '#f ((case-lambda ((g$q$11560$1IfLeT) (if g$q$11560$1IfLeT (begin '#f ((case-lambda ((g$r$11561$1IfLeT) (if g$r$11561$1IfLeT (begin '#f (append g$q$11560$1IfLeT g$r$11561$1IfLeT)) '#f))) ((case-lambda ((g$x$11562$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11562$1IfLeT) (begin '#f ((case-lambda ((g$q$11563$1IfLeT) (if g$q$11563$1IfLeT (begin '#f ((case-lambda ((g$r$11564$1IfLeT) (if g$r$11564$1IfLeT (begin '#f (append g$q$11563$1IfLeT g$r$11564$1IfLeT)) '#f))) ((case-lambda ((g$x$11565$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11565$1IfLeT) (begin '#f ((case-lambda ((g$q$11566$1IfLeT) (if g$q$11566$1IfLeT (begin '#f ((case-lambda ((g$r$11567$1IfLeT) (if g$r$11567$1IfLeT (begin '#f (append g$q$11566$1IfLeT g$r$11567$1IfLeT)) '#f))) ((letrec ((g$f$11568$1IfLeT (case-lambda ((g$x$11569$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11569$1IfLeT) ((case-lambda ((g$cars/f$11570$1IfLeT) (if g$cars/f$11570$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11571$1IfLeT) (if g$cdrs/f$11571$1IfLeT (begin '#f (map cons g$cars/f$11570$1IfLeT g$cdrs/f$11571$1IfLeT)) '#f))) (g$f$11568$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11569$1IfLeT)))) '#f))) ((case-lambda ((g$x$11572$1IfLeT) (list g$x$11572$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11569$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11569$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11568$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11565$1IfLeT)))) '#f))) ((case-lambda ((g$x$11573$1IfLeT) (list g$x$11573$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11565$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11562$1IfLeT)))) '#f))) ((case-lambda ((g$x$11574$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11574$1IfLeT) (begin '#f ((case-lambda ((g$q$11575$1IfLeT) (if g$q$11575$1IfLeT (begin '#f ((case-lambda ((g$r$11576$1IfLeT) (if g$r$11576$1IfLeT (begin '#f (append g$q$11575$1IfLeT g$r$11576$1IfLeT)) '#f))) ((letrec ((g$f$11577$1IfLeT (case-lambda ((g$x$11578$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11578$1IfLeT) ((case-lambda ((g$cars/f$11579$1IfLeT) (if g$cars/f$11579$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11580$1IfLeT) (if g$cdrs/f$11580$1IfLeT (begin '#f (map cons g$cars/f$11579$1IfLeT g$cdrs/f$11580$1IfLeT)) '#f))) (g$f$11577$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11578$1IfLeT)))) '#f))) ((case-lambda ((g$x$11581$1IfLeT) (list g$x$11581$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11578$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11578$1IfLeT) (list (begin 'fmls '())) '#f)))))) g$f$11577$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11574$1IfLeT)))) '#f))) ((case-lambda ((g$x$11582$1IfLeT) (list g$x$11582$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11574$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11562$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11559$1IfLeT)))) '#f))) ((case-lambda ((g$x$11583$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11559$1IfLeT)))) '#f))) g$t$11489$1IfLeT)))) g$stx$11488$1IfLeT)))) (g$trace-define-syntax-macro$10091$1IfLeT g$trace-define-syntax-macro$16196$1IfLeT (case-lambda ((g$stx$11584$1IfLeT) ((case-lambda ((g$t$11585$1IfLeT) ((case-lambda ((g$ls/false$11586$1IfLeT) (if (if g$ls/false$11586$1IfLeT (begin '#f (apply (case-lambda ((g$who$11587$1IfLeT g$expr$11588$1IfLeT) '#t)) g$ls/false$11586$1IfLeT)) '#f) (apply (case-lambda ((g$who$11589$1IfLeT g$expr$11590$1IfLeT) (if (g$id?$9838$1IfLeT g$who$11589$1IfLeT) (g$bless$10083$1IfLeT (list 'define-syntax g$who$11589$1IfLeT (list 'let (list (list 'v g$expr$11590$1IfLeT)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$who$11589$1IfLeT) '(v syntax->datum))) '((assertion-violation 'trace-define-syntax "not a procedure" v)))))))) (g$syntax-violation$10221$1IfLeT '#f '"invalid name" g$stx$11584$1IfLeT)))) g$ls/false$11586$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11585$1IfLeT)))) ((case-lambda ((g$x$11591$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11591$1IfLeT) (begin '#f ((case-lambda ((g$q$11592$1IfLeT) (if g$q$11592$1IfLeT (begin '#f ((case-lambda ((g$r$11593$1IfLeT) (if g$r$11593$1IfLeT (begin '#f (append g$q$11592$1IfLeT g$r$11593$1IfLeT)) '#f))) ((case-lambda ((g$x$11594$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11594$1IfLeT) (begin '#f ((case-lambda ((g$q$11595$1IfLeT) (if g$q$11595$1IfLeT (begin '#f ((case-lambda ((g$r$11596$1IfLeT) (if g$r$11596$1IfLeT (begin '#f (append g$q$11595$1IfLeT g$r$11596$1IfLeT)) '#f))) ((case-lambda ((g$x$11597$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11597$1IfLeT) (begin '#f ((case-lambda ((g$q$11598$1IfLeT) (if g$q$11598$1IfLeT (begin '#f ((case-lambda ((g$r$11599$1IfLeT) (if g$r$11599$1IfLeT (begin '#f (append g$q$11598$1IfLeT g$r$11599$1IfLeT)) '#f))) ((case-lambda ((g$x$11600$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11600$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11597$1IfLeT)))) '#f))) ((case-lambda ((g$x$11601$1IfLeT) (list g$x$11601$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11597$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11594$1IfLeT)))) '#f))) ((case-lambda ((g$x$11602$1IfLeT) (list g$x$11602$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11594$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11591$1IfLeT)))) '#f))) ((case-lambda ((g$x$11603$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11591$1IfLeT)))) '#f))) g$t$11585$1IfLeT)))) g$stx$11584$1IfLeT)))) (g$guard-macro$10092$1IfLeT g$guard-macro$16197$1IfLeT (case-lambda ((g$x$11604$1IfLeT) (letrec* ((g$gen-clauses$11605$1IfLeT (case-lambda ((g$con$11642$1IfLeT g$outerk$11643$1IfLeT g$clause*$11644$1IfLeT) (letrec* ((g$f$11645$1IfLeT (case-lambda ((g$x$11703$1IfLeT g$k$11704$1IfLeT) ((case-lambda ((g$t$11705$1IfLeT) ((case-lambda ((g$ls/false$11706$1IfLeT) (if (if g$ls/false$11706$1IfLeT (begin '#f (apply (case-lambda ((g$e$11707$1IfLeT g$p$11708$1IfLeT) '#t)) g$ls/false$11706$1IfLeT)) '#f) (apply (case-lambda ((g$e$11709$1IfLeT g$p$11710$1IfLeT) ((case-lambda ((g$t$11711$1IfLeT) (list 'let (list (list g$t$11711$1IfLeT g$e$11709$1IfLeT)) (list 'if g$t$11711$1IfLeT (list g$p$11710$1IfLeT g$t$11711$1IfLeT) g$k$11704$1IfLeT)))) (gensym)))) g$ls/false$11706$1IfLeT) ((case-lambda ((g$t$11712$1IfLeT) ((case-lambda ((g$ls/false$11713$1IfLeT) (if (if g$ls/false$11713$1IfLeT (begin '#f (apply (case-lambda ((g$e$11714$1IfLeT) '#t)) g$ls/false$11713$1IfLeT)) '#f) (apply (case-lambda ((g$e$11715$1IfLeT) ((case-lambda ((g$t$11716$1IfLeT) (list 'let (list (list g$t$11716$1IfLeT g$e$11715$1IfLeT)) (list 'if g$t$11716$1IfLeT g$t$11716$1IfLeT g$k$11704$1IfLeT)))) (gensym)))) g$ls/false$11713$1IfLeT) ((case-lambda ((g$t$11717$1IfLeT) ((case-lambda ((g$ls/false$11718$1IfLeT) (if (if g$ls/false$11718$1IfLeT (begin '#f (apply (case-lambda ((g$e$11719$1IfLeT g$v$11720$1IfLeT g$v*$11721$1IfLeT) '#t)) g$ls/false$11718$1IfLeT)) '#f) (apply (case-lambda ((g$e$11722$1IfLeT g$v$11723$1IfLeT g$v*$11724$1IfLeT) (list 'if g$e$11722$1IfLeT (cons 'begin (cons g$v$11723$1IfLeT g$v*$11724$1IfLeT)) g$k$11704$1IfLeT))) g$ls/false$11718$1IfLeT) ((case-lambda ((g$t$11725$1IfLeT) ((case-lambda ((g$ls/false$11726$1IfLeT) (if (if g$ls/false$11726$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11726$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid guard clause" g$x$11703$1IfLeT))) g$ls/false$11726$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11725$1IfLeT)))) ((case-lambda ((g$x$11727$1IfLeT) '())) g$t$11725$1IfLeT)))) g$t$11717$1IfLeT)))) ((case-lambda ((g$x$11728$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11728$1IfLeT) (begin '#f ((case-lambda ((g$q$11729$1IfLeT) (if g$q$11729$1IfLeT (begin '#f ((case-lambda ((g$r$11730$1IfLeT) (if g$r$11730$1IfLeT (begin '#f (append g$q$11729$1IfLeT g$r$11730$1IfLeT)) '#f))) ((case-lambda ((g$x$11731$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11731$1IfLeT) (begin '#f ((case-lambda ((g$q$11732$1IfLeT) (if g$q$11732$1IfLeT (begin '#f ((case-lambda ((g$r$11733$1IfLeT) (if g$r$11733$1IfLeT (begin '#f (append g$q$11732$1IfLeT g$r$11733$1IfLeT)) '#f))) ((letrec ((g$f$11734$1IfLeT (case-lambda ((g$x$11735$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11735$1IfLeT) ((case-lambda ((g$cars/f$11736$1IfLeT) (if g$cars/f$11736$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11737$1IfLeT) (if g$cdrs/f$11737$1IfLeT (begin '#f (map cons g$cars/f$11736$1IfLeT g$cdrs/f$11737$1IfLeT)) '#f))) (g$f$11734$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11735$1IfLeT)))) '#f))) ((case-lambda ((g$x$11738$1IfLeT) (list g$x$11738$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11735$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11735$1IfLeT) (list (begin 'v* '())) '#f)))))) g$f$11734$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11731$1IfLeT)))) '#f))) ((case-lambda ((g$x$11739$1IfLeT) (list g$x$11739$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11731$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11728$1IfLeT)))) '#f))) ((case-lambda ((g$x$11740$1IfLeT) (list g$x$11740$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11728$1IfLeT)))) '#f))) g$t$11717$1IfLeT)))) g$t$11712$1IfLeT)))) ((case-lambda ((g$x$11741$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11741$1IfLeT) (begin '#f ((case-lambda ((g$q$11742$1IfLeT) (if g$q$11742$1IfLeT (begin '#f ((case-lambda ((g$r$11743$1IfLeT) (if g$r$11743$1IfLeT (begin '#f (append g$q$11742$1IfLeT g$r$11743$1IfLeT)) '#f))) ((case-lambda ((g$x$11744$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11744$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11741$1IfLeT)))) '#f))) ((case-lambda ((g$x$11745$1IfLeT) (list g$x$11745$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11741$1IfLeT)))) '#f))) g$t$11712$1IfLeT)))) g$t$11705$1IfLeT)))) ((case-lambda ((g$x$11746$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11746$1IfLeT) (begin '#f ((case-lambda ((g$q$11747$1IfLeT) (if g$q$11747$1IfLeT (begin '#f ((case-lambda ((g$r$11748$1IfLeT) (if g$r$11748$1IfLeT (begin '#f (append g$q$11747$1IfLeT g$r$11748$1IfLeT)) '#f))) ((case-lambda ((g$x$11749$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11749$1IfLeT) (begin '#f ((case-lambda ((g$q$11750$1IfLeT) (if g$q$11750$1IfLeT (begin '#f ((case-lambda ((g$r$11751$1IfLeT) (if g$r$11751$1IfLeT (begin '#f (append g$q$11750$1IfLeT g$r$11751$1IfLeT)) '#f))) ((case-lambda ((g$x$11752$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11752$1IfLeT) (begin '#f ((case-lambda ((g$q$11753$1IfLeT) (if g$q$11753$1IfLeT (begin '#f ((case-lambda ((g$r$11754$1IfLeT) (if g$r$11754$1IfLeT (begin '#f (append g$q$11753$1IfLeT g$r$11754$1IfLeT)) '#f))) ((case-lambda ((g$x$11755$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11755$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11752$1IfLeT)))) '#f))) ((case-lambda ((g$x$11756$1IfLeT) (list g$x$11756$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11752$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11749$1IfLeT)))) '#f))) ((case-lambda ((g$x$11757$1IfLeT) (if (g$id?$9838$1IfLeT g$x$11757$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$11757$1IfLeT (g$scheme-stx$10063$1IfLeT '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$11749$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11746$1IfLeT)))) '#f))) ((case-lambda ((g$x$11758$1IfLeT) (list g$x$11758$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11746$1IfLeT)))) '#f))) g$t$11705$1IfLeT)))) g$x$11703$1IfLeT)))) (g$f*$11646$1IfLeT (case-lambda ((g$x*$11653$1IfLeT) ((case-lambda ((g$t$11654$1IfLeT) ((case-lambda ((g$ls/false$11655$1IfLeT) (if (if g$ls/false$11655$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$11655$1IfLeT)) '#f) (apply (case-lambda (() ((case-lambda ((g$g$11656$1IfLeT) (values (list g$g$11656$1IfLeT (list 'lambda '() (list 'raise g$con$11642$1IfLeT))) g$g$11656$1IfLeT))) (gensym)))) g$ls/false$11655$1IfLeT) ((case-lambda ((g$t$11657$1IfLeT) ((case-lambda ((g$ls/false$11658$1IfLeT) (if (if g$ls/false$11658$1IfLeT (begin '#f (apply (case-lambda ((g$e$11659$1IfLeT g$e*$11660$1IfLeT) '#t)) g$ls/false$11658$1IfLeT)) '#f) (apply (case-lambda ((g$e$11661$1IfLeT g$e*$11662$1IfLeT) (values (cons 'begin (cons g$e$11661$1IfLeT g$e*$11662$1IfLeT)) '#f))) g$ls/false$11658$1IfLeT) ((case-lambda ((g$t$11663$1IfLeT) ((case-lambda ((g$ls/false$11664$1IfLeT) (if (if g$ls/false$11664$1IfLeT (begin '#f (apply (case-lambda ((g$cls$11665$1IfLeT g$cls*$11666$1IfLeT) '#t)) g$ls/false$11664$1IfLeT)) '#f) (apply (case-lambda ((g$cls$11667$1IfLeT g$cls*$11668$1IfLeT) (call-with-values (case-lambda (() (g$f*$11646$1IfLeT g$cls*$11668$1IfLeT))) (case-lambda ((g$e$11671$1IfLeT g$g$11672$1IfLeT) ((case-lambda ((g$g$11673$1IfLeT g$e$11674$1IfLeT) (values (g$f$11645$1IfLeT g$cls$11667$1IfLeT g$e$11674$1IfLeT) g$g$11673$1IfLeT))) g$g$11672$1IfLeT g$e$11671$1IfLeT)))))) g$ls/false$11664$1IfLeT) ((case-lambda ((g$t$11675$1IfLeT) ((case-lambda ((g$ls/false$11676$1IfLeT) (if (if g$ls/false$11676$1IfLeT (begin '#f (apply (case-lambda ((g$others$11677$1IfLeT) '#t)) g$ls/false$11676$1IfLeT)) '#f) (apply (case-lambda ((g$others$11678$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid guard clause" g$others$11678$1IfLeT))) g$ls/false$11676$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11675$1IfLeT)))) ((case-lambda ((g$x$11679$1IfLeT) (list g$x$11679$1IfLeT))) g$t$11675$1IfLeT)))) g$t$11663$1IfLeT)))) ((case-lambda ((g$x$11680$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11680$1IfLeT) (begin '#f ((case-lambda ((g$q$11681$1IfLeT) (if g$q$11681$1IfLeT (begin '#f ((case-lambda ((g$r$11682$1IfLeT) (if g$r$11682$1IfLeT (begin '#f (append g$q$11681$1IfLeT g$r$11682$1IfLeT)) '#f))) ((case-lambda ((g$x$11683$1IfLeT) (list g$x$11683$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$11680$1IfLeT)))) '#f))) ((case-lambda ((g$x$11684$1IfLeT) (list g$x$11684$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11680$1IfLeT)))) '#f))) g$t$11663$1IfLeT)))) g$t$11657$1IfLeT)))) ((case-lambda ((g$x$11685$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11685$1IfLeT) (begin '#f ((case-lambda ((g$q$11686$1IfLeT) (if g$q$11686$1IfLeT (begin '#f ((case-lambda ((g$r$11687$1IfLeT) (if g$r$11687$1IfLeT (begin '#f (append g$q$11686$1IfLeT g$r$11687$1IfLeT)) '#f))) ((case-lambda ((g$x$11688$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11688$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11685$1IfLeT)))) '#f))) ((case-lambda ((g$x$11689$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11689$1IfLeT) (begin '#f ((case-lambda ((g$q$11690$1IfLeT) (if g$q$11690$1IfLeT (begin '#f ((case-lambda ((g$r$11691$1IfLeT) (if g$r$11691$1IfLeT (begin '#f (append g$q$11690$1IfLeT g$r$11691$1IfLeT)) '#f))) ((case-lambda ((g$x$11692$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11692$1IfLeT) (begin '#f ((case-lambda ((g$q$11693$1IfLeT) (if g$q$11693$1IfLeT (begin '#f ((case-lambda ((g$r$11694$1IfLeT) (if g$r$11694$1IfLeT (begin '#f (append g$q$11693$1IfLeT g$r$11694$1IfLeT)) '#f))) ((letrec ((g$f$11695$1IfLeT (case-lambda ((g$x$11696$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11696$1IfLeT) ((case-lambda ((g$cars/f$11697$1IfLeT) (if g$cars/f$11697$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11698$1IfLeT) (if g$cdrs/f$11698$1IfLeT (begin '#f (map cons g$cars/f$11697$1IfLeT g$cdrs/f$11698$1IfLeT)) '#f))) (g$f$11695$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11696$1IfLeT)))) '#f))) ((case-lambda ((g$x$11699$1IfLeT) (list g$x$11699$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11696$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11696$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$11695$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11692$1IfLeT)))) '#f))) ((case-lambda ((g$x$11700$1IfLeT) (list g$x$11700$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11692$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11689$1IfLeT)))) '#f))) ((case-lambda ((g$x$11701$1IfLeT) (if (g$id?$9838$1IfLeT g$x$11701$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$11701$1IfLeT (g$scheme-stx$10063$1IfLeT 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$11689$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11685$1IfLeT)))) '#f))) g$t$11657$1IfLeT)))) g$t$11654$1IfLeT)))) ((case-lambda ((g$x$11702$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11702$1IfLeT) '()) (begin '#f '()) '#f))) g$t$11654$1IfLeT)))) g$x*$11653$1IfLeT))))) (call-with-values (case-lambda (() (g$f*$11646$1IfLeT g$clause*$11644$1IfLeT))) (case-lambda ((g$code$11649$1IfLeT g$raisek$11650$1IfLeT) ((case-lambda ((g$raisek$11651$1IfLeT g$code$11652$1IfLeT) (if g$raisek$11651$1IfLeT (list (list 'call/cc (list 'lambda (list g$raisek$11651$1IfLeT) (list g$outerk$11643$1IfLeT (list 'lambda '() g$code$11652$1IfLeT))))) (list g$outerk$11643$1IfLeT (list 'lambda '() g$code$11652$1IfLeT))))) g$raisek$11650$1IfLeT g$code$11649$1IfLeT))))))))) ((case-lambda ((g$t$11606$1IfLeT) ((case-lambda ((g$ls/false$11607$1IfLeT) (if (if g$ls/false$11607$1IfLeT (begin '#f (apply (case-lambda ((g$con$11608$1IfLeT g$clause*$11609$1IfLeT g$b$11610$1IfLeT g$b*$11611$1IfLeT) (g$id?$9838$1IfLeT g$con$11608$1IfLeT))) g$ls/false$11607$1IfLeT)) '#f) (apply (case-lambda ((g$con$11612$1IfLeT g$clause*$11613$1IfLeT g$b$11614$1IfLeT g$b*$11615$1IfLeT) ((case-lambda ((g$outerk$11616$1IfLeT) (g$bless$10083$1IfLeT (list (list 'call/cc (list 'lambda (list g$outerk$11616$1IfLeT) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$con$11612$1IfLeT) (g$gen-clauses$11605$1IfLeT g$con$11612$1IfLeT g$outerk$11616$1IfLeT g$clause*$11613$1IfLeT)) (cons 'lambda (cons '() (cons '#f (cons g$b$11614$1IfLeT g$b*$11615$1IfLeT)))))))))))) (gensym)))) g$ls/false$11607$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11606$1IfLeT)))) ((case-lambda ((g$x$11617$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11617$1IfLeT) (begin '#f ((case-lambda ((g$q$11618$1IfLeT) (if g$q$11618$1IfLeT (begin '#f ((case-lambda ((g$r$11619$1IfLeT) (if g$r$11619$1IfLeT (begin '#f (append g$q$11618$1IfLeT g$r$11619$1IfLeT)) '#f))) ((case-lambda ((g$x$11620$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11620$1IfLeT) (begin '#f ((case-lambda ((g$q$11621$1IfLeT) (if g$q$11621$1IfLeT (begin '#f ((case-lambda ((g$r$11622$1IfLeT) (if g$r$11622$1IfLeT (begin '#f (append g$q$11621$1IfLeT g$r$11622$1IfLeT)) '#f))) ((case-lambda ((g$x$11623$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11623$1IfLeT) (begin '#f ((case-lambda ((g$q$11624$1IfLeT) (if g$q$11624$1IfLeT (begin '#f ((case-lambda ((g$r$11625$1IfLeT) (if g$r$11625$1IfLeT (begin '#f (append g$q$11624$1IfLeT g$r$11625$1IfLeT)) '#f))) ((letrec ((g$f$11626$1IfLeT (case-lambda ((g$x$11627$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11627$1IfLeT) ((case-lambda ((g$cars/f$11628$1IfLeT) (if g$cars/f$11628$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11629$1IfLeT) (if g$cdrs/f$11629$1IfLeT (begin '#f (map cons g$cars/f$11628$1IfLeT g$cdrs/f$11629$1IfLeT)) '#f))) (g$f$11626$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11627$1IfLeT)))) '#f))) ((case-lambda ((g$x$11630$1IfLeT) (list g$x$11630$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11627$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11627$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$11626$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11623$1IfLeT)))) '#f))) ((case-lambda ((g$x$11631$1IfLeT) (list g$x$11631$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11623$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11620$1IfLeT)))) '#f))) ((case-lambda ((g$x$11632$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11632$1IfLeT) (begin '#f ((case-lambda ((g$q$11633$1IfLeT) (if g$q$11633$1IfLeT (begin '#f ((case-lambda ((g$r$11634$1IfLeT) (if g$r$11634$1IfLeT (begin '#f (append g$q$11633$1IfLeT g$r$11634$1IfLeT)) '#f))) ((letrec ((g$f$11635$1IfLeT (case-lambda ((g$x$11636$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11636$1IfLeT) ((case-lambda ((g$cars/f$11637$1IfLeT) (if g$cars/f$11637$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11638$1IfLeT) (if g$cdrs/f$11638$1IfLeT (begin '#f (map cons g$cars/f$11637$1IfLeT g$cdrs/f$11638$1IfLeT)) '#f))) (g$f$11635$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11636$1IfLeT)))) '#f))) ((case-lambda ((g$x$11639$1IfLeT) (list g$x$11639$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11636$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11636$1IfLeT) (list (begin 'clause* '())) '#f)))))) g$f$11635$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11632$1IfLeT)))) '#f))) ((case-lambda ((g$x$11640$1IfLeT) (list g$x$11640$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11632$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11620$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11617$1IfLeT)))) '#f))) ((case-lambda ((g$x$11641$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11617$1IfLeT)))) '#f))) g$t$11606$1IfLeT)))) g$x$11604$1IfLeT))))) (g$define-enumeration-macro$10093$1IfLeT g$define-enumeration-macro$16198$1IfLeT (case-lambda ((g$stx$11759$1IfLeT) (letrec* ((g$set?$11760$1IfLeT (case-lambda ((g$x$11792$1IfLeT) ((case-lambda ((g$t$11793$1IfLeT) (if g$t$11793$1IfLeT g$t$11793$1IfLeT (begin '#f (if (not (memq (car g$x$11792$1IfLeT) (cdr g$x$11792$1IfLeT))) (begin '#f (g$set?$11760$1IfLeT (cdr g$x$11792$1IfLeT))) '#f))))) (null? g$x$11792$1IfLeT)))))) ((case-lambda ((g$t$11761$1IfLeT) ((case-lambda ((g$ls/false$11762$1IfLeT) (if (if g$ls/false$11762$1IfLeT (begin '#f (apply (case-lambda ((g$name$11763$1IfLeT g$id*$11764$1IfLeT g$maker$11765$1IfLeT) (if (g$id?$9838$1IfLeT g$name$11763$1IfLeT) (if (g$id?$9838$1IfLeT g$maker$11765$1IfLeT) (begin '#f (g$for-all$8490$1IfLeT g$id?$9838$1IfLeT g$id*$11764$1IfLeT)) '#f) '#f))) g$ls/false$11762$1IfLeT)) '#f) (apply (case-lambda ((g$name$11766$1IfLeT g$id*$11767$1IfLeT g$maker$11768$1IfLeT) ((case-lambda ((g$name*$11769$1IfLeT g$mk$11770$1IfLeT) (begin (if (g$set?$11760$1IfLeT g$name*$11769$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"duplicate names in enumeration set" g$stx$11759$1IfLeT)) (g$bless$10083$1IfLeT (list 'begin (list 'define g$mk$11770$1IfLeT (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$name*$11769$1IfLeT)))) (list 'define-syntax g$name$11766$1IfLeT (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$name*$11769$1IfLeT)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$name*$11769$1IfLeT))))))) (list 'define-syntax g$maker$11768$1IfLeT (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$name*$11769$1IfLeT)) '((syntax-error n "not a member of set"))))) '((syntax (n* ...))))) (list 'syntax (cons g$mk$11770$1IfLeT '('(n* ...)))))))))))))) (g$syntax->datum$10224$1IfLeT g$id*$11767$1IfLeT) (gensym)))) g$ls/false$11762$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11761$1IfLeT)))) ((case-lambda ((g$x$11771$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11771$1IfLeT) (begin '#f ((case-lambda ((g$q$11772$1IfLeT) (if g$q$11772$1IfLeT (begin '#f ((case-lambda ((g$r$11773$1IfLeT) (if g$r$11773$1IfLeT (begin '#f (append g$q$11772$1IfLeT g$r$11773$1IfLeT)) '#f))) ((case-lambda ((g$x$11774$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11774$1IfLeT) (begin '#f ((case-lambda ((g$q$11775$1IfLeT) (if g$q$11775$1IfLeT (begin '#f ((case-lambda ((g$r$11776$1IfLeT) (if g$r$11776$1IfLeT (begin '#f (append g$q$11775$1IfLeT g$r$11776$1IfLeT)) '#f))) ((case-lambda ((g$x$11777$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11777$1IfLeT) (begin '#f ((case-lambda ((g$q$11778$1IfLeT) (if g$q$11778$1IfLeT (begin '#f ((case-lambda ((g$r$11779$1IfLeT) (if g$r$11779$1IfLeT (begin '#f (append g$q$11778$1IfLeT g$r$11779$1IfLeT)) '#f))) ((case-lambda ((g$x$11780$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11780$1IfLeT) (begin '#f ((case-lambda ((g$q$11781$1IfLeT) (if g$q$11781$1IfLeT (begin '#f ((case-lambda ((g$r$11782$1IfLeT) (if g$r$11782$1IfLeT (begin '#f (append g$q$11781$1IfLeT g$r$11782$1IfLeT)) '#f))) ((case-lambda ((g$x$11783$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11783$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11780$1IfLeT)))) '#f))) ((case-lambda ((g$x$11784$1IfLeT) (list g$x$11784$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11780$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11777$1IfLeT)))) '#f))) ((letrec ((g$f$11785$1IfLeT (case-lambda ((g$x$11786$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11786$1IfLeT) ((case-lambda ((g$cars/f$11787$1IfLeT) (if g$cars/f$11787$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11788$1IfLeT) (if g$cdrs/f$11788$1IfLeT (begin '#f (map cons g$cars/f$11787$1IfLeT g$cdrs/f$11788$1IfLeT)) '#f))) (g$f$11785$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11786$1IfLeT)))) '#f))) ((case-lambda ((g$x$11789$1IfLeT) (list g$x$11789$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11786$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11786$1IfLeT) (list (begin 'id* '())) '#f)))))) g$f$11785$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$11777$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11774$1IfLeT)))) '#f))) ((case-lambda ((g$x$11790$1IfLeT) (list g$x$11790$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11774$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11771$1IfLeT)))) '#f))) ((case-lambda ((g$x$11791$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11771$1IfLeT)))) '#f))) g$t$11761$1IfLeT)))) g$stx$11759$1IfLeT))))) (g$time-macro$10094$1IfLeT g$time-macro$16199$1IfLeT (case-lambda ((g$stx$11794$1IfLeT) ((case-lambda ((g$t$11795$1IfLeT) ((case-lambda ((g$ls/false$11796$1IfLeT) (if (if g$ls/false$11796$1IfLeT (begin '#f (apply (case-lambda ((g$expr$11797$1IfLeT) '#t)) g$ls/false$11796$1IfLeT)) '#f) (apply (case-lambda ((g$expr$11798$1IfLeT) ((case-lambda ((g$str$11799$1IfLeT) (g$bless$10083$1IfLeT (list 'time-it g$str$11799$1IfLeT (list 'lambda '() g$expr$11798$1IfLeT))))) (call-with-values (case-lambda (() (g$open-string-output-port$9213$1IfLeT))) (case-lambda ((g$p$11802$1IfLeT g$e$11803$1IfLeT) ((case-lambda ((g$e$11804$1IfLeT g$p$11805$1IfLeT) (begin (write (g$syntax->datum$10224$1IfLeT g$expr$11798$1IfLeT) g$p$11805$1IfLeT) (g$e$11804$1IfLeT)))) g$e$11803$1IfLeT g$p$11802$1IfLeT))))))) g$ls/false$11796$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11795$1IfLeT)))) ((case-lambda ((g$x$11806$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11806$1IfLeT) (begin '#f ((case-lambda ((g$q$11807$1IfLeT) (if g$q$11807$1IfLeT (begin '#f ((case-lambda ((g$r$11808$1IfLeT) (if g$r$11808$1IfLeT (begin '#f (append g$q$11807$1IfLeT g$r$11808$1IfLeT)) '#f))) ((case-lambda ((g$x$11809$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11809$1IfLeT) (begin '#f ((case-lambda ((g$q$11810$1IfLeT) (if g$q$11810$1IfLeT (begin '#f ((case-lambda ((g$r$11811$1IfLeT) (if g$r$11811$1IfLeT (begin '#f (append g$q$11810$1IfLeT g$r$11811$1IfLeT)) '#f))) ((case-lambda ((g$x$11812$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11812$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11809$1IfLeT)))) '#f))) ((case-lambda ((g$x$11813$1IfLeT) (list g$x$11813$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11809$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11806$1IfLeT)))) '#f))) ((case-lambda ((g$x$11814$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11806$1IfLeT)))) '#f))) g$t$11795$1IfLeT)))) g$stx$11794$1IfLeT)))) (g$delay-macro$10095$1IfLeT g$delay-macro$16200$1IfLeT (case-lambda ((g$stx$11815$1IfLeT) ((case-lambda ((g$t$11816$1IfLeT) ((case-lambda ((g$ls/false$11817$1IfLeT) (if (if g$ls/false$11817$1IfLeT (begin '#f (apply (case-lambda ((g$expr$11818$1IfLeT) '#t)) g$ls/false$11817$1IfLeT)) '#f) (apply (case-lambda ((g$expr$11819$1IfLeT) (g$bless$10083$1IfLeT (list 'make-promise (list 'lambda '() g$expr$11819$1IfLeT))))) g$ls/false$11817$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11816$1IfLeT)))) ((case-lambda ((g$x$11820$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11820$1IfLeT) (begin '#f ((case-lambda ((g$q$11821$1IfLeT) (if g$q$11821$1IfLeT (begin '#f ((case-lambda ((g$r$11822$1IfLeT) (if g$r$11822$1IfLeT (begin '#f (append g$q$11821$1IfLeT g$r$11822$1IfLeT)) '#f))) ((case-lambda ((g$x$11823$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11823$1IfLeT) (begin '#f ((case-lambda ((g$q$11824$1IfLeT) (if g$q$11824$1IfLeT (begin '#f ((case-lambda ((g$r$11825$1IfLeT) (if g$r$11825$1IfLeT (begin '#f (append g$q$11824$1IfLeT g$r$11825$1IfLeT)) '#f))) ((case-lambda ((g$x$11826$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11826$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11823$1IfLeT)))) '#f))) ((case-lambda ((g$x$11827$1IfLeT) (list g$x$11827$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11823$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11820$1IfLeT)))) '#f))) ((case-lambda ((g$x$11828$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11820$1IfLeT)))) '#f))) g$t$11816$1IfLeT)))) g$stx$11815$1IfLeT)))) (g$assert-macro$10096$1IfLeT g$assert-macro$16201$1IfLeT (case-lambda ((g$stx$11829$1IfLeT) ((case-lambda ((g$t$11830$1IfLeT) ((case-lambda ((g$ls/false$11831$1IfLeT) (if (if g$ls/false$11831$1IfLeT (begin '#f (apply (case-lambda ((g$expr$11832$1IfLeT) '#t)) g$ls/false$11831$1IfLeT)) '#f) (apply (case-lambda ((g$expr$11833$1IfLeT) (g$bless$10083$1IfLeT (list 'unless g$expr$11833$1IfLeT (list 'assertion-violation ''assert '"assertion failed" (list 'quote g$expr$11833$1IfLeT)))))) g$ls/false$11831$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11830$1IfLeT)))) ((case-lambda ((g$x$11834$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11834$1IfLeT) (begin '#f ((case-lambda ((g$q$11835$1IfLeT) (if g$q$11835$1IfLeT (begin '#f ((case-lambda ((g$r$11836$1IfLeT) (if g$r$11836$1IfLeT (begin '#f (append g$q$11835$1IfLeT g$r$11836$1IfLeT)) '#f))) ((case-lambda ((g$x$11837$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11837$1IfLeT) (begin '#f ((case-lambda ((g$q$11838$1IfLeT) (if g$q$11838$1IfLeT (begin '#f ((case-lambda ((g$r$11839$1IfLeT) (if g$r$11839$1IfLeT (begin '#f (append g$q$11838$1IfLeT g$r$11839$1IfLeT)) '#f))) ((case-lambda ((g$x$11840$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11840$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11837$1IfLeT)))) '#f))) ((case-lambda ((g$x$11841$1IfLeT) (list g$x$11841$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11837$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11834$1IfLeT)))) '#f))) ((case-lambda ((g$x$11842$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11834$1IfLeT)))) '#f))) g$t$11830$1IfLeT)))) g$stx$11829$1IfLeT)))) (g$endianness-macro$10097$1IfLeT g$endianness-macro$16202$1IfLeT (case-lambda ((g$stx$11843$1IfLeT) ((case-lambda ((g$t$11844$1IfLeT) ((case-lambda ((g$ls/false$11845$1IfLeT) (if (if g$ls/false$11845$1IfLeT (begin '#f (apply (case-lambda ((g$e$11846$1IfLeT) '#t)) g$ls/false$11845$1IfLeT)) '#f) (apply (case-lambda ((g$e$11847$1IfLeT) ((case-lambda ((g$t$11848$1IfLeT) (if (memv g$t$11848$1IfLeT '(little)) (g$bless$10083$1IfLeT ''little) (if (memv g$t$11848$1IfLeT '(big)) (g$bless$10083$1IfLeT ''big) (g$syntax-violation$10221$1IfLeT '#f '"endianness must be big or little" g$stx$11843$1IfLeT))))) (g$syntax->datum$10224$1IfLeT g$e$11847$1IfLeT)))) g$ls/false$11845$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11844$1IfLeT)))) ((case-lambda ((g$x$11849$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11849$1IfLeT) (begin '#f ((case-lambda ((g$q$11850$1IfLeT) (if g$q$11850$1IfLeT (begin '#f ((case-lambda ((g$r$11851$1IfLeT) (if g$r$11851$1IfLeT (begin '#f (append g$q$11850$1IfLeT g$r$11851$1IfLeT)) '#f))) ((case-lambda ((g$x$11852$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11852$1IfLeT) (begin '#f ((case-lambda ((g$q$11853$1IfLeT) (if g$q$11853$1IfLeT (begin '#f ((case-lambda ((g$r$11854$1IfLeT) (if g$r$11854$1IfLeT (begin '#f (append g$q$11853$1IfLeT g$r$11854$1IfLeT)) '#f))) ((case-lambda ((g$x$11855$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11855$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11852$1IfLeT)))) '#f))) ((case-lambda ((g$x$11856$1IfLeT) (list g$x$11856$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11852$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11849$1IfLeT)))) '#f))) ((case-lambda ((g$x$11857$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11849$1IfLeT)))) '#f))) g$t$11844$1IfLeT)))) g$stx$11843$1IfLeT)))) (g$identifier-syntax-macro$10098$1IfLeT g$identifier-syntax-macro$16203$1IfLeT (case-lambda ((g$stx$11858$1IfLeT) ((case-lambda ((g$t$11859$1IfLeT) ((case-lambda ((g$ls/false$11860$1IfLeT) (if (if g$ls/false$11860$1IfLeT (begin '#f (apply (case-lambda ((g$expr$11861$1IfLeT) '#t)) g$ls/false$11860$1IfLeT)) '#f) (apply (case-lambda ((g$expr$11862$1IfLeT) (g$bless$10083$1IfLeT (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$expr$11862$1IfLeT)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$expr$11862$1IfLeT) '((syntax (e* ...))))))))))) g$ls/false$11860$1IfLeT) ((case-lambda ((g$t$11863$1IfLeT) ((case-lambda ((g$ls/false$11864$1IfLeT) (if (if g$ls/false$11864$1IfLeT (begin '#f (apply (case-lambda ((g$id1$11865$1IfLeT g$expr1$11866$1IfLeT g$id2$11867$1IfLeT g$expr2$11868$1IfLeT g$expr3$11869$1IfLeT) (if (g$id?$9838$1IfLeT g$id1$11865$1IfLeT) (if (g$id?$9838$1IfLeT g$id2$11867$1IfLeT) (begin '#f (g$id?$9838$1IfLeT g$expr2$11868$1IfLeT)) '#f) '#f))) g$ls/false$11864$1IfLeT)) '#f) (apply (case-lambda ((g$id1$11870$1IfLeT g$expr1$11871$1IfLeT g$id2$11872$1IfLeT g$expr2$11873$1IfLeT g$expr3$11874$1IfLeT) (g$bless$10083$1IfLeT (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$expr1$11871$1IfLeT)) (list (list 'set! 'id g$expr2$11873$1IfLeT) (list 'syntax g$expr3$11874$1IfLeT)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons g$expr1$11871$1IfLeT '(e* ...)))))))))) g$ls/false$11864$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11863$1IfLeT)))) ((case-lambda ((g$x$11875$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11875$1IfLeT) (begin '#f ((case-lambda ((g$q$11876$1IfLeT) (if g$q$11876$1IfLeT (begin '#f ((case-lambda ((g$r$11877$1IfLeT) (if g$r$11877$1IfLeT (begin '#f (append g$q$11876$1IfLeT g$r$11877$1IfLeT)) '#f))) ((case-lambda ((g$x$11878$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11878$1IfLeT) (begin '#f ((case-lambda ((g$q$11879$1IfLeT) (if g$q$11879$1IfLeT (begin '#f ((case-lambda ((g$r$11880$1IfLeT) (if g$r$11880$1IfLeT (begin '#f (append g$q$11879$1IfLeT g$r$11880$1IfLeT)) '#f))) ((case-lambda ((g$x$11881$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11881$1IfLeT) (begin '#f ((case-lambda ((g$q$11882$1IfLeT) (if g$q$11882$1IfLeT (begin '#f ((case-lambda ((g$r$11883$1IfLeT) (if g$r$11883$1IfLeT (begin '#f (append g$q$11882$1IfLeT g$r$11883$1IfLeT)) '#f))) ((case-lambda ((g$x$11884$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11884$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11881$1IfLeT)))) '#f))) ((case-lambda ((g$x$11885$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11885$1IfLeT) (begin '#f ((case-lambda ((g$q$11886$1IfLeT) (if g$q$11886$1IfLeT (begin '#f ((case-lambda ((g$r$11887$1IfLeT) (if g$r$11887$1IfLeT (begin '#f (append g$q$11886$1IfLeT g$r$11887$1IfLeT)) '#f))) ((case-lambda ((g$x$11888$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11888$1IfLeT) (begin '#f ((case-lambda ((g$q$11889$1IfLeT) (if g$q$11889$1IfLeT (begin '#f ((case-lambda ((g$r$11890$1IfLeT) (if g$r$11890$1IfLeT (begin '#f (append g$q$11889$1IfLeT g$r$11890$1IfLeT)) '#f))) ((case-lambda ((g$x$11891$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11891$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11888$1IfLeT)))) '#f))) ((case-lambda ((g$x$11892$1IfLeT) (list g$x$11892$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11888$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11885$1IfLeT)))) '#f))) ((case-lambda ((g$x$11893$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11893$1IfLeT) (begin '#f ((case-lambda ((g$q$11894$1IfLeT) (if g$q$11894$1IfLeT (begin '#f ((case-lambda ((g$r$11895$1IfLeT) (if g$r$11895$1IfLeT (begin '#f (append g$q$11894$1IfLeT g$r$11895$1IfLeT)) '#f))) ((case-lambda ((g$x$11896$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11896$1IfLeT) (begin '#f ((case-lambda ((g$q$11897$1IfLeT) (if g$q$11897$1IfLeT (begin '#f ((case-lambda ((g$r$11898$1IfLeT) (if g$r$11898$1IfLeT (begin '#f (append g$q$11897$1IfLeT g$r$11898$1IfLeT)) '#f))) ((case-lambda ((g$x$11899$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11899$1IfLeT) (begin '#f ((case-lambda ((g$q$11900$1IfLeT) (if g$q$11900$1IfLeT (begin '#f ((case-lambda ((g$r$11901$1IfLeT) (if g$r$11901$1IfLeT (begin '#f (append g$q$11900$1IfLeT g$r$11901$1IfLeT)) '#f))) ((case-lambda ((g$x$11902$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11902$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11899$1IfLeT)))) '#f))) ((case-lambda ((g$x$11903$1IfLeT) (list g$x$11903$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11899$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11896$1IfLeT)))) '#f))) ((case-lambda ((g$x$11904$1IfLeT) (list g$x$11904$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11896$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11893$1IfLeT)))) '#f))) ((case-lambda ((g$x$11905$1IfLeT) (if (g$id?$9838$1IfLeT g$x$11905$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$11905$1IfLeT (g$scheme-stx$10063$1IfLeT 'set!)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$11893$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11885$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11881$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11878$1IfLeT)))) '#f))) ((case-lambda ((g$x$11906$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11906$1IfLeT) (begin '#f ((case-lambda ((g$q$11907$1IfLeT) (if g$q$11907$1IfLeT (begin '#f ((case-lambda ((g$r$11908$1IfLeT) (if g$r$11908$1IfLeT (begin '#f (append g$q$11907$1IfLeT g$r$11908$1IfLeT)) '#f))) ((case-lambda ((g$x$11909$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11909$1IfLeT) (begin '#f ((case-lambda ((g$q$11910$1IfLeT) (if g$q$11910$1IfLeT (begin '#f ((case-lambda ((g$r$11911$1IfLeT) (if g$r$11911$1IfLeT (begin '#f (append g$q$11910$1IfLeT g$r$11911$1IfLeT)) '#f))) ((case-lambda ((g$x$11912$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11912$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11909$1IfLeT)))) '#f))) ((case-lambda ((g$x$11913$1IfLeT) (list g$x$11913$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11909$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11906$1IfLeT)))) '#f))) ((case-lambda ((g$x$11914$1IfLeT) (list g$x$11914$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11906$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11878$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11875$1IfLeT)))) '#f))) ((case-lambda ((g$x$11915$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11875$1IfLeT)))) '#f))) g$t$11863$1IfLeT)))) g$t$11859$1IfLeT)))) ((case-lambda ((g$x$11916$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11916$1IfLeT) (begin '#f ((case-lambda ((g$q$11917$1IfLeT) (if g$q$11917$1IfLeT (begin '#f ((case-lambda ((g$r$11918$1IfLeT) (if g$r$11918$1IfLeT (begin '#f (append g$q$11917$1IfLeT g$r$11918$1IfLeT)) '#f))) ((case-lambda ((g$x$11919$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11919$1IfLeT) (begin '#f ((case-lambda ((g$q$11920$1IfLeT) (if g$q$11920$1IfLeT (begin '#f ((case-lambda ((g$r$11921$1IfLeT) (if g$r$11921$1IfLeT (begin '#f (append g$q$11920$1IfLeT g$r$11921$1IfLeT)) '#f))) ((case-lambda ((g$x$11922$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11922$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11919$1IfLeT)))) '#f))) ((case-lambda ((g$x$11923$1IfLeT) (list g$x$11923$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11919$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11916$1IfLeT)))) '#f))) ((case-lambda ((g$x$11924$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11916$1IfLeT)))) '#f))) g$t$11859$1IfLeT)))) g$stx$11858$1IfLeT)))) (g$do-macro$10099$1IfLeT g$do-macro$16204$1IfLeT (case-lambda ((g$stx$11925$1IfLeT) (letrec* ((g$bind$11926$1IfLeT (case-lambda ((g$x$11991$1IfLeT) ((case-lambda ((g$t$11992$1IfLeT) ((case-lambda ((g$ls/false$11993$1IfLeT) (if (if g$ls/false$11993$1IfLeT (begin '#f (apply (case-lambda ((g$x$11994$1IfLeT g$init$11995$1IfLeT) '#t)) g$ls/false$11993$1IfLeT)) '#f) (apply (case-lambda ((g$x$11996$1IfLeT g$init$11997$1IfLeT) (list g$x$11996$1IfLeT g$init$11997$1IfLeT g$x$11996$1IfLeT))) g$ls/false$11993$1IfLeT) ((case-lambda ((g$t$11998$1IfLeT) ((case-lambda ((g$ls/false$11999$1IfLeT) (if (if g$ls/false$11999$1IfLeT (begin '#f (apply (case-lambda ((g$x$12000$1IfLeT g$init$12001$1IfLeT g$step$12002$1IfLeT) '#t)) g$ls/false$11999$1IfLeT)) '#f) (apply (case-lambda ((g$x$12003$1IfLeT g$init$12004$1IfLeT g$step$12005$1IfLeT) (list g$x$12003$1IfLeT g$init$12004$1IfLeT g$step$12005$1IfLeT))) g$ls/false$11999$1IfLeT) ((case-lambda ((g$t$12006$1IfLeT) ((case-lambda ((g$ls/false$12007$1IfLeT) (if (if g$ls/false$12007$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12007$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid binding" g$stx$11925$1IfLeT))) g$ls/false$12007$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12006$1IfLeT)))) ((case-lambda ((g$x$12008$1IfLeT) '())) g$t$12006$1IfLeT)))) g$t$11998$1IfLeT)))) ((case-lambda ((g$x$12009$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12009$1IfLeT) (begin '#f ((case-lambda ((g$q$12010$1IfLeT) (if g$q$12010$1IfLeT (begin '#f ((case-lambda ((g$r$12011$1IfLeT) (if g$r$12011$1IfLeT (begin '#f (append g$q$12010$1IfLeT g$r$12011$1IfLeT)) '#f))) ((case-lambda ((g$x$12012$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12012$1IfLeT) (begin '#f ((case-lambda ((g$q$12013$1IfLeT) (if g$q$12013$1IfLeT (begin '#f ((case-lambda ((g$r$12014$1IfLeT) (if g$r$12014$1IfLeT (begin '#f (append g$q$12013$1IfLeT g$r$12014$1IfLeT)) '#f))) ((case-lambda ((g$x$12015$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12015$1IfLeT) (begin '#f ((case-lambda ((g$q$12016$1IfLeT) (if g$q$12016$1IfLeT (begin '#f ((case-lambda ((g$r$12017$1IfLeT) (if g$r$12017$1IfLeT (begin '#f (append g$q$12016$1IfLeT g$r$12017$1IfLeT)) '#f))) ((case-lambda ((g$x$12018$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12018$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12015$1IfLeT)))) '#f))) ((case-lambda ((g$x$12019$1IfLeT) (list g$x$12019$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12015$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12012$1IfLeT)))) '#f))) ((case-lambda ((g$x$12020$1IfLeT) (list g$x$12020$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12012$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12009$1IfLeT)))) '#f))) ((case-lambda ((g$x$12021$1IfLeT) (list g$x$12021$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12009$1IfLeT)))) '#f))) g$t$11998$1IfLeT)))) g$t$11992$1IfLeT)))) ((case-lambda ((g$x$12022$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12022$1IfLeT) (begin '#f ((case-lambda ((g$q$12023$1IfLeT) (if g$q$12023$1IfLeT (begin '#f ((case-lambda ((g$r$12024$1IfLeT) (if g$r$12024$1IfLeT (begin '#f (append g$q$12023$1IfLeT g$r$12024$1IfLeT)) '#f))) ((case-lambda ((g$x$12025$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12025$1IfLeT) (begin '#f ((case-lambda ((g$q$12026$1IfLeT) (if g$q$12026$1IfLeT (begin '#f ((case-lambda ((g$r$12027$1IfLeT) (if g$r$12027$1IfLeT (begin '#f (append g$q$12026$1IfLeT g$r$12027$1IfLeT)) '#f))) ((case-lambda ((g$x$12028$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12028$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12025$1IfLeT)))) '#f))) ((case-lambda ((g$x$12029$1IfLeT) (list g$x$12029$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12025$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12022$1IfLeT)))) '#f))) ((case-lambda ((g$x$12030$1IfLeT) (list g$x$12030$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12022$1IfLeT)))) '#f))) g$t$11992$1IfLeT)))) g$x$11991$1IfLeT))))) ((case-lambda ((g$t$11927$1IfLeT) ((case-lambda ((g$ls/false$11928$1IfLeT) (if (if g$ls/false$11928$1IfLeT (begin '#f (apply (case-lambda ((g$binding*$11929$1IfLeT g$test$11930$1IfLeT g$expr*$11931$1IfLeT g$command*$11932$1IfLeT) '#t)) g$ls/false$11928$1IfLeT)) '#f) (apply (case-lambda ((g$binding*$11933$1IfLeT g$test$11934$1IfLeT g$expr*$11935$1IfLeT g$command*$11936$1IfLeT) ((case-lambda ((g$t$11937$1IfLeT) ((case-lambda ((g$ls/false$11938$1IfLeT) (if (if g$ls/false$11938$1IfLeT (begin '#f (apply (case-lambda ((g$x*$11939$1IfLeT g$init*$11940$1IfLeT g$step*$11941$1IfLeT) '#t)) g$ls/false$11938$1IfLeT)) '#f) (apply (case-lambda ((g$x*$11942$1IfLeT g$init*$11943$1IfLeT g$step*$11944$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT g$x*$11942$1IfLeT) (g$bless$10083$1IfLeT (list 'letrec (list (list 'loop (list 'lambda g$x*$11942$1IfLeT (list 'if g$test$11934$1IfLeT (cons 'begin (cons '(if #f #f) g$expr*$11935$1IfLeT)) (cons 'begin (append g$command*$11936$1IfLeT (list (cons 'loop g$step*$11944$1IfLeT)))))))) (cons 'loop g$init*$11943$1IfLeT))) (g$syntax-violation$10221$1IfLeT '#f '"invalid bindings" g$stx$11925$1IfLeT)))) g$ls/false$11938$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11937$1IfLeT)))) ((letrec ((g$f$11945$1IfLeT (case-lambda ((g$x$11946$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11946$1IfLeT) ((case-lambda ((g$cars/f$11947$1IfLeT) (if g$cars/f$11947$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11948$1IfLeT) (if g$cdrs/f$11948$1IfLeT (begin '#f (map cons g$cars/f$11947$1IfLeT g$cdrs/f$11948$1IfLeT)) '#f))) (g$f$11945$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11946$1IfLeT)))) '#f))) ((case-lambda ((g$x$11949$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11949$1IfLeT) (begin '#f ((case-lambda ((g$q$11950$1IfLeT) (if g$q$11950$1IfLeT (begin '#f ((case-lambda ((g$r$11951$1IfLeT) (if g$r$11951$1IfLeT (begin '#f (append g$q$11950$1IfLeT g$r$11951$1IfLeT)) '#f))) ((case-lambda ((g$x$11952$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11952$1IfLeT) (begin '#f ((case-lambda ((g$q$11953$1IfLeT) (if g$q$11953$1IfLeT (begin '#f ((case-lambda ((g$r$11954$1IfLeT) (if g$r$11954$1IfLeT (begin '#f (append g$q$11953$1IfLeT g$r$11954$1IfLeT)) '#f))) ((case-lambda ((g$x$11955$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11955$1IfLeT) (begin '#f ((case-lambda ((g$q$11956$1IfLeT) (if g$q$11956$1IfLeT (begin '#f ((case-lambda ((g$r$11957$1IfLeT) (if g$r$11957$1IfLeT (begin '#f (append g$q$11956$1IfLeT g$r$11957$1IfLeT)) '#f))) ((case-lambda ((g$x$11958$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$11958$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11955$1IfLeT)))) '#f))) ((case-lambda ((g$x$11959$1IfLeT) (list g$x$11959$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11955$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11952$1IfLeT)))) '#f))) ((case-lambda ((g$x$11960$1IfLeT) (list g$x$11960$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11952$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11949$1IfLeT)))) '#f))) ((case-lambda ((g$x$11961$1IfLeT) (list g$x$11961$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11949$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11946$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11946$1IfLeT) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f)))))) g$f$11945$1IfLeT) g$t$11937$1IfLeT)))) (map g$bind$11926$1IfLeT g$binding*$11933$1IfLeT)))) g$ls/false$11928$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$11927$1IfLeT)))) ((case-lambda ((g$x$11962$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11962$1IfLeT) (begin '#f ((case-lambda ((g$q$11963$1IfLeT) (if g$q$11963$1IfLeT (begin '#f ((case-lambda ((g$r$11964$1IfLeT) (if g$r$11964$1IfLeT (begin '#f (append g$q$11963$1IfLeT g$r$11964$1IfLeT)) '#f))) ((case-lambda ((g$x$11965$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11965$1IfLeT) (begin '#f ((case-lambda ((g$q$11966$1IfLeT) (if g$q$11966$1IfLeT (begin '#f ((case-lambda ((g$r$11967$1IfLeT) (if g$r$11967$1IfLeT (begin '#f (append g$q$11966$1IfLeT g$r$11967$1IfLeT)) '#f))) ((case-lambda ((g$x$11968$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11968$1IfLeT) (begin '#f ((case-lambda ((g$q$11969$1IfLeT) (if g$q$11969$1IfLeT (begin '#f ((case-lambda ((g$r$11970$1IfLeT) (if g$r$11970$1IfLeT (begin '#f (append g$q$11969$1IfLeT g$r$11970$1IfLeT)) '#f))) ((letrec ((g$f$11971$1IfLeT (case-lambda ((g$x$11972$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11972$1IfLeT) ((case-lambda ((g$cars/f$11973$1IfLeT) (if g$cars/f$11973$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11974$1IfLeT) (if g$cdrs/f$11974$1IfLeT (begin '#f (map cons g$cars/f$11973$1IfLeT g$cdrs/f$11974$1IfLeT)) '#f))) (g$f$11971$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11972$1IfLeT)))) '#f))) ((case-lambda ((g$x$11975$1IfLeT) (list g$x$11975$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11972$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11972$1IfLeT) (list (begin 'command* '())) '#f)))))) g$f$11971$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11968$1IfLeT)))) '#f))) ((case-lambda ((g$x$11976$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11976$1IfLeT) (begin '#f ((case-lambda ((g$q$11977$1IfLeT) (if g$q$11977$1IfLeT (begin '#f ((case-lambda ((g$r$11978$1IfLeT) (if g$r$11978$1IfLeT (begin '#f (append g$q$11977$1IfLeT g$r$11978$1IfLeT)) '#f))) ((letrec ((g$f$11979$1IfLeT (case-lambda ((g$x$11980$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11980$1IfLeT) ((case-lambda ((g$cars/f$11981$1IfLeT) (if g$cars/f$11981$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11982$1IfLeT) (if g$cdrs/f$11982$1IfLeT (begin '#f (map cons g$cars/f$11981$1IfLeT g$cdrs/f$11982$1IfLeT)) '#f))) (g$f$11979$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11980$1IfLeT)))) '#f))) ((case-lambda ((g$x$11983$1IfLeT) (list g$x$11983$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11980$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11980$1IfLeT) (list (begin 'expr* '())) '#f)))))) g$f$11979$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$11976$1IfLeT)))) '#f))) ((case-lambda ((g$x$11984$1IfLeT) (list g$x$11984$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11976$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$11968$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11965$1IfLeT)))) '#f))) ((letrec ((g$f$11985$1IfLeT (case-lambda ((g$x$11986$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$11986$1IfLeT) ((case-lambda ((g$cars/f$11987$1IfLeT) (if g$cars/f$11987$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$11988$1IfLeT) (if g$cdrs/f$11988$1IfLeT (begin '#f (map cons g$cars/f$11987$1IfLeT g$cdrs/f$11988$1IfLeT)) '#f))) (g$f$11985$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$11986$1IfLeT)))) '#f))) ((case-lambda ((g$x$11989$1IfLeT) (list g$x$11989$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$11986$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$11986$1IfLeT) (list (begin 'binding* '())) '#f)))))) g$f$11985$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$11965$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$11962$1IfLeT)))) '#f))) ((case-lambda ((g$x$11990$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$11962$1IfLeT)))) '#f))) g$t$11927$1IfLeT)))) g$stx$11925$1IfLeT))))) (g$let*-macro$10100$1IfLeT g$let*-macro$16205$1IfLeT (case-lambda ((g$stx$12031$1IfLeT) ((case-lambda ((g$t$12032$1IfLeT) ((case-lambda ((g$ls/false$12033$1IfLeT) (if (if g$ls/false$12033$1IfLeT (begin '#f (apply (case-lambda ((g$lhs*$12034$1IfLeT g$rhs*$12035$1IfLeT g$b$12036$1IfLeT g$b*$12037$1IfLeT) (g$for-all$8490$1IfLeT g$id?$9838$1IfLeT g$lhs*$12034$1IfLeT))) g$ls/false$12033$1IfLeT)) '#f) (apply (case-lambda ((g$lhs*$12038$1IfLeT g$rhs*$12039$1IfLeT g$b$12040$1IfLeT g$b*$12041$1IfLeT) (g$bless$10083$1IfLeT ((letrec ((g$f$12042$1IfLeT (case-lambda ((g$x*$12043$1IfLeT) (if (null? g$x*$12043$1IfLeT) (cons 'let (cons '() (cons g$b$12040$1IfLeT g$b*$12041$1IfLeT))) (list 'let (list (car g$x*$12043$1IfLeT)) (g$f$12042$1IfLeT (cdr g$x*$12043$1IfLeT)))))))) g$f$12042$1IfLeT) (map list g$lhs*$12038$1IfLeT g$rhs*$12039$1IfLeT))))) g$ls/false$12033$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12032$1IfLeT)))) ((case-lambda ((g$x$12044$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12044$1IfLeT) (begin '#f ((case-lambda ((g$q$12045$1IfLeT) (if g$q$12045$1IfLeT (begin '#f ((case-lambda ((g$r$12046$1IfLeT) (if g$r$12046$1IfLeT (begin '#f (append g$q$12045$1IfLeT g$r$12046$1IfLeT)) '#f))) ((case-lambda ((g$x$12047$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12047$1IfLeT) (begin '#f ((case-lambda ((g$q$12048$1IfLeT) (if g$q$12048$1IfLeT (begin '#f ((case-lambda ((g$r$12049$1IfLeT) (if g$r$12049$1IfLeT (begin '#f (append g$q$12048$1IfLeT g$r$12049$1IfLeT)) '#f))) ((case-lambda ((g$x$12050$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12050$1IfLeT) (begin '#f ((case-lambda ((g$q$12051$1IfLeT) (if g$q$12051$1IfLeT (begin '#f ((case-lambda ((g$r$12052$1IfLeT) (if g$r$12052$1IfLeT (begin '#f (append g$q$12051$1IfLeT g$r$12052$1IfLeT)) '#f))) ((letrec ((g$f$12053$1IfLeT (case-lambda ((g$x$12054$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12054$1IfLeT) ((case-lambda ((g$cars/f$12055$1IfLeT) (if g$cars/f$12055$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12056$1IfLeT) (if g$cdrs/f$12056$1IfLeT (begin '#f (map cons g$cars/f$12055$1IfLeT g$cdrs/f$12056$1IfLeT)) '#f))) (g$f$12053$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12054$1IfLeT)))) '#f))) ((case-lambda ((g$x$12057$1IfLeT) (list g$x$12057$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12054$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12054$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$12053$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12050$1IfLeT)))) '#f))) ((case-lambda ((g$x$12058$1IfLeT) (list g$x$12058$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12050$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12047$1IfLeT)))) '#f))) ((letrec ((g$f$12059$1IfLeT (case-lambda ((g$x$12060$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12060$1IfLeT) ((case-lambda ((g$cars/f$12061$1IfLeT) (if g$cars/f$12061$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12062$1IfLeT) (if g$cdrs/f$12062$1IfLeT (begin '#f (map cons g$cars/f$12061$1IfLeT g$cdrs/f$12062$1IfLeT)) '#f))) (g$f$12059$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12060$1IfLeT)))) '#f))) ((case-lambda ((g$x$12063$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12063$1IfLeT) (begin '#f ((case-lambda ((g$q$12064$1IfLeT) (if g$q$12064$1IfLeT (begin '#f ((case-lambda ((g$r$12065$1IfLeT) (if g$r$12065$1IfLeT (begin '#f (append g$q$12064$1IfLeT g$r$12065$1IfLeT)) '#f))) ((case-lambda ((g$x$12066$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12066$1IfLeT) (begin '#f ((case-lambda ((g$q$12067$1IfLeT) (if g$q$12067$1IfLeT (begin '#f ((case-lambda ((g$r$12068$1IfLeT) (if g$r$12068$1IfLeT (begin '#f (append g$q$12067$1IfLeT g$r$12068$1IfLeT)) '#f))) ((case-lambda ((g$x$12069$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12069$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12066$1IfLeT)))) '#f))) ((case-lambda ((g$x$12070$1IfLeT) (list g$x$12070$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12066$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12063$1IfLeT)))) '#f))) ((case-lambda ((g$x$12071$1IfLeT) (list g$x$12071$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12063$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$12060$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12060$1IfLeT) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f)))))) g$f$12059$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$12047$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12044$1IfLeT)))) '#f))) ((case-lambda ((g$x$12072$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12044$1IfLeT)))) '#f))) g$t$12032$1IfLeT)))) g$stx$12031$1IfLeT)))) (g$or-macro$10101$1IfLeT g$or-macro$16206$1IfLeT (case-lambda ((g$stx$12073$1IfLeT) ((case-lambda ((g$t$12074$1IfLeT) ((case-lambda ((g$ls/false$12075$1IfLeT) (if (if g$ls/false$12075$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12075$1IfLeT)) '#f) (apply (case-lambda (() '#f)) g$ls/false$12075$1IfLeT) ((case-lambda ((g$t$12076$1IfLeT) ((case-lambda ((g$ls/false$12077$1IfLeT) (if (if g$ls/false$12077$1IfLeT (begin '#f (apply (case-lambda ((g$e$12078$1IfLeT g$e*$12079$1IfLeT) '#t)) g$ls/false$12077$1IfLeT)) '#f) (apply (case-lambda ((g$e$12080$1IfLeT g$e*$12081$1IfLeT) (g$bless$10083$1IfLeT ((letrec ((g$f$12082$1IfLeT (case-lambda ((g$e$12083$1IfLeT g$e*$12084$1IfLeT) (if (null? g$e*$12084$1IfLeT) (list 'begin '#f g$e$12083$1IfLeT) (list 'let (list (list 't g$e$12083$1IfLeT)) (list 'if 't 't (g$f$12082$1IfLeT (car g$e*$12084$1IfLeT) (cdr g$e*$12084$1IfLeT))))))))) g$f$12082$1IfLeT) g$e$12080$1IfLeT g$e*$12081$1IfLeT)))) g$ls/false$12077$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12076$1IfLeT)))) ((case-lambda ((g$x$12085$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12085$1IfLeT) (begin '#f ((case-lambda ((g$q$12086$1IfLeT) (if g$q$12086$1IfLeT (begin '#f ((case-lambda ((g$r$12087$1IfLeT) (if g$r$12087$1IfLeT (begin '#f (append g$q$12086$1IfLeT g$r$12087$1IfLeT)) '#f))) ((case-lambda ((g$x$12088$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12088$1IfLeT) (begin '#f ((case-lambda ((g$q$12089$1IfLeT) (if g$q$12089$1IfLeT (begin '#f ((case-lambda ((g$r$12090$1IfLeT) (if g$r$12090$1IfLeT (begin '#f (append g$q$12089$1IfLeT g$r$12090$1IfLeT)) '#f))) ((letrec ((g$f$12091$1IfLeT (case-lambda ((g$x$12092$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12092$1IfLeT) ((case-lambda ((g$cars/f$12093$1IfLeT) (if g$cars/f$12093$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12094$1IfLeT) (if g$cdrs/f$12094$1IfLeT (begin '#f (map cons g$cars/f$12093$1IfLeT g$cdrs/f$12094$1IfLeT)) '#f))) (g$f$12091$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12092$1IfLeT)))) '#f))) ((case-lambda ((g$x$12095$1IfLeT) (list g$x$12095$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12092$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12092$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$12091$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12088$1IfLeT)))) '#f))) ((case-lambda ((g$x$12096$1IfLeT) (list g$x$12096$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12088$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12085$1IfLeT)))) '#f))) ((case-lambda ((g$x$12097$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12085$1IfLeT)))) '#f))) g$t$12076$1IfLeT)))) g$t$12074$1IfLeT)))) ((case-lambda ((g$x$12098$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12098$1IfLeT) (begin '#f ((case-lambda ((g$q$12099$1IfLeT) (if g$q$12099$1IfLeT (begin '#f ((case-lambda ((g$r$12100$1IfLeT) (if g$r$12100$1IfLeT (begin '#f (append g$q$12099$1IfLeT g$r$12100$1IfLeT)) '#f))) ((case-lambda ((g$x$12101$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12101$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12098$1IfLeT)))) '#f))) ((case-lambda ((g$x$12102$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12098$1IfLeT)))) '#f))) g$t$12074$1IfLeT)))) g$stx$12073$1IfLeT)))) (g$and-macro$10102$1IfLeT g$and-macro$16207$1IfLeT (case-lambda ((g$stx$12103$1IfLeT) ((case-lambda ((g$t$12104$1IfLeT) ((case-lambda ((g$ls/false$12105$1IfLeT) (if (if g$ls/false$12105$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12105$1IfLeT)) '#f) (apply (case-lambda (() '#t)) g$ls/false$12105$1IfLeT) ((case-lambda ((g$t$12106$1IfLeT) ((case-lambda ((g$ls/false$12107$1IfLeT) (if (if g$ls/false$12107$1IfLeT (begin '#f (apply (case-lambda ((g$e$12108$1IfLeT g$e*$12109$1IfLeT) '#t)) g$ls/false$12107$1IfLeT)) '#f) (apply (case-lambda ((g$e$12110$1IfLeT g$e*$12111$1IfLeT) (g$bless$10083$1IfLeT ((letrec ((g$f$12112$1IfLeT (case-lambda ((g$e$12113$1IfLeT g$e*$12114$1IfLeT) (if (null? g$e*$12114$1IfLeT) (list 'begin '#f g$e$12113$1IfLeT) (cons 'if (cons g$e$12113$1IfLeT (cons (g$f$12112$1IfLeT (car g$e*$12114$1IfLeT) (cdr g$e*$12114$1IfLeT)) '(#f))))))))) g$f$12112$1IfLeT) g$e$12110$1IfLeT g$e*$12111$1IfLeT)))) g$ls/false$12107$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12106$1IfLeT)))) ((case-lambda ((g$x$12115$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12115$1IfLeT) (begin '#f ((case-lambda ((g$q$12116$1IfLeT) (if g$q$12116$1IfLeT (begin '#f ((case-lambda ((g$r$12117$1IfLeT) (if g$r$12117$1IfLeT (begin '#f (append g$q$12116$1IfLeT g$r$12117$1IfLeT)) '#f))) ((case-lambda ((g$x$12118$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12118$1IfLeT) (begin '#f ((case-lambda ((g$q$12119$1IfLeT) (if g$q$12119$1IfLeT (begin '#f ((case-lambda ((g$r$12120$1IfLeT) (if g$r$12120$1IfLeT (begin '#f (append g$q$12119$1IfLeT g$r$12120$1IfLeT)) '#f))) ((letrec ((g$f$12121$1IfLeT (case-lambda ((g$x$12122$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12122$1IfLeT) ((case-lambda ((g$cars/f$12123$1IfLeT) (if g$cars/f$12123$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12124$1IfLeT) (if g$cdrs/f$12124$1IfLeT (begin '#f (map cons g$cars/f$12123$1IfLeT g$cdrs/f$12124$1IfLeT)) '#f))) (g$f$12121$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12122$1IfLeT)))) '#f))) ((case-lambda ((g$x$12125$1IfLeT) (list g$x$12125$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12122$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12122$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$12121$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12118$1IfLeT)))) '#f))) ((case-lambda ((g$x$12126$1IfLeT) (list g$x$12126$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12118$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12115$1IfLeT)))) '#f))) ((case-lambda ((g$x$12127$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12115$1IfLeT)))) '#f))) g$t$12106$1IfLeT)))) g$t$12104$1IfLeT)))) ((case-lambda ((g$x$12128$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12128$1IfLeT) (begin '#f ((case-lambda ((g$q$12129$1IfLeT) (if g$q$12129$1IfLeT (begin '#f ((case-lambda ((g$r$12130$1IfLeT) (if g$r$12130$1IfLeT (begin '#f (append g$q$12129$1IfLeT g$r$12130$1IfLeT)) '#f))) ((case-lambda ((g$x$12131$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12131$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12128$1IfLeT)))) '#f))) ((case-lambda ((g$x$12132$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12128$1IfLeT)))) '#f))) g$t$12104$1IfLeT)))) g$stx$12103$1IfLeT)))) (g$cond-macro$10103$1IfLeT g$cond-macro$16208$1IfLeT (case-lambda ((g$stx$12133$1IfLeT) ((case-lambda ((g$t$12134$1IfLeT) ((case-lambda ((g$ls/false$12135$1IfLeT) (if (if g$ls/false$12135$1IfLeT (begin '#f (apply (case-lambda ((g$cls$12136$1IfLeT g$cls*$12137$1IfLeT) '#t)) g$ls/false$12135$1IfLeT)) '#f) (apply (case-lambda ((g$cls$12138$1IfLeT g$cls*$12139$1IfLeT) (g$bless$10083$1IfLeT ((letrec ((g$f$12140$1IfLeT (case-lambda ((g$cls$12141$1IfLeT g$cls*$12142$1IfLeT) (if (null? g$cls*$12142$1IfLeT) ((case-lambda ((g$t$12143$1IfLeT) ((case-lambda ((g$ls/false$12144$1IfLeT) (if (if g$ls/false$12144$1IfLeT (begin '#f (apply (case-lambda ((g$e$12145$1IfLeT g$e*$12146$1IfLeT) '#t)) g$ls/false$12144$1IfLeT)) '#f) (apply (case-lambda ((g$e$12147$1IfLeT g$e*$12148$1IfLeT) (cons 'begin (cons g$e$12147$1IfLeT g$e*$12148$1IfLeT)))) g$ls/false$12144$1IfLeT) ((case-lambda ((g$t$12149$1IfLeT) ((case-lambda ((g$ls/false$12150$1IfLeT) (if (if g$ls/false$12150$1IfLeT (begin '#f (apply (case-lambda ((g$e$12151$1IfLeT g$p$12152$1IfLeT) '#t)) g$ls/false$12150$1IfLeT)) '#f) (apply (case-lambda ((g$e$12153$1IfLeT g$p$12154$1IfLeT) (list 'let (list (list 't g$e$12153$1IfLeT)) (list 'if 't (cons g$p$12154$1IfLeT '(t)))))) g$ls/false$12150$1IfLeT) ((case-lambda ((g$t$12155$1IfLeT) ((case-lambda ((g$ls/false$12156$1IfLeT) (if (if g$ls/false$12156$1IfLeT (begin '#f (apply (case-lambda ((g$e$12157$1IfLeT) '#t)) g$ls/false$12156$1IfLeT)) '#f) (apply (case-lambda ((g$e$12158$1IfLeT) (cons 'or (cons g$e$12158$1IfLeT '((if #f #f)))))) g$ls/false$12156$1IfLeT) ((case-lambda ((g$t$12159$1IfLeT) ((case-lambda ((g$ls/false$12160$1IfLeT) (if (if g$ls/false$12160$1IfLeT (begin '#f (apply (case-lambda ((g$e$12161$1IfLeT g$e*$12162$1IfLeT) '#t)) g$ls/false$12160$1IfLeT)) '#f) (apply (case-lambda ((g$e$12163$1IfLeT g$e*$12164$1IfLeT) (list 'if g$e$12163$1IfLeT (cons 'begin g$e*$12164$1IfLeT)))) g$ls/false$12160$1IfLeT) ((case-lambda ((g$t$12165$1IfLeT) ((case-lambda ((g$ls/false$12166$1IfLeT) (if (if g$ls/false$12166$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12166$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid last clause" g$stx$12133$1IfLeT))) g$ls/false$12166$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12165$1IfLeT)))) ((case-lambda ((g$x$12167$1IfLeT) '())) g$t$12165$1IfLeT)))) g$t$12159$1IfLeT)))) ((case-lambda ((g$x$12168$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12168$1IfLeT) (begin '#f ((case-lambda ((g$q$12169$1IfLeT) (if g$q$12169$1IfLeT (begin '#f ((case-lambda ((g$r$12170$1IfLeT) (if g$r$12170$1IfLeT (begin '#f (append g$q$12169$1IfLeT g$r$12170$1IfLeT)) '#f))) ((letrec ((g$f$12171$1IfLeT (case-lambda ((g$x$12172$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12172$1IfLeT) ((case-lambda ((g$cars/f$12173$1IfLeT) (if g$cars/f$12173$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12174$1IfLeT) (if g$cdrs/f$12174$1IfLeT (begin '#f (map cons g$cars/f$12173$1IfLeT g$cdrs/f$12174$1IfLeT)) '#f))) (g$f$12171$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12172$1IfLeT)))) '#f))) ((case-lambda ((g$x$12175$1IfLeT) (list g$x$12175$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12172$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12172$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$12171$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12168$1IfLeT)))) '#f))) ((case-lambda ((g$x$12176$1IfLeT) (list g$x$12176$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12168$1IfLeT)))) '#f))) g$t$12159$1IfLeT)))) g$t$12155$1IfLeT)))) ((case-lambda ((g$x$12177$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12177$1IfLeT) (begin '#f ((case-lambda ((g$q$12178$1IfLeT) (if g$q$12178$1IfLeT (begin '#f ((case-lambda ((g$r$12179$1IfLeT) (if g$r$12179$1IfLeT (begin '#f (append g$q$12178$1IfLeT g$r$12179$1IfLeT)) '#f))) ((case-lambda ((g$x$12180$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12180$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12177$1IfLeT)))) '#f))) ((case-lambda ((g$x$12181$1IfLeT) (list g$x$12181$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12177$1IfLeT)))) '#f))) g$t$12155$1IfLeT)))) g$t$12149$1IfLeT)))) ((case-lambda ((g$x$12182$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12182$1IfLeT) (begin '#f ((case-lambda ((g$q$12183$1IfLeT) (if g$q$12183$1IfLeT (begin '#f ((case-lambda ((g$r$12184$1IfLeT) (if g$r$12184$1IfLeT (begin '#f (append g$q$12183$1IfLeT g$r$12184$1IfLeT)) '#f))) ((case-lambda ((g$x$12185$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12185$1IfLeT) (begin '#f ((case-lambda ((g$q$12186$1IfLeT) (if g$q$12186$1IfLeT (begin '#f ((case-lambda ((g$r$12187$1IfLeT) (if g$r$12187$1IfLeT (begin '#f (append g$q$12186$1IfLeT g$r$12187$1IfLeT)) '#f))) ((case-lambda ((g$x$12188$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12188$1IfLeT) (begin '#f ((case-lambda ((g$q$12189$1IfLeT) (if g$q$12189$1IfLeT (begin '#f ((case-lambda ((g$r$12190$1IfLeT) (if g$r$12190$1IfLeT (begin '#f (append g$q$12189$1IfLeT g$r$12190$1IfLeT)) '#f))) ((case-lambda ((g$x$12191$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12191$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12188$1IfLeT)))) '#f))) ((case-lambda ((g$x$12192$1IfLeT) (list g$x$12192$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12188$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12185$1IfLeT)))) '#f))) ((case-lambda ((g$x$12193$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12193$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12193$1IfLeT (g$scheme-stx$10063$1IfLeT '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12185$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12182$1IfLeT)))) '#f))) ((case-lambda ((g$x$12194$1IfLeT) (list g$x$12194$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12182$1IfLeT)))) '#f))) g$t$12149$1IfLeT)))) g$t$12143$1IfLeT)))) ((case-lambda ((g$x$12195$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12195$1IfLeT) (begin '#f ((case-lambda ((g$q$12196$1IfLeT) (if g$q$12196$1IfLeT (begin '#f ((case-lambda ((g$r$12197$1IfLeT) (if g$r$12197$1IfLeT (begin '#f (append g$q$12196$1IfLeT g$r$12197$1IfLeT)) '#f))) ((case-lambda ((g$x$12198$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12198$1IfLeT) (begin '#f ((case-lambda ((g$q$12199$1IfLeT) (if g$q$12199$1IfLeT (begin '#f ((case-lambda ((g$r$12200$1IfLeT) (if g$r$12200$1IfLeT (begin '#f (append g$q$12199$1IfLeT g$r$12200$1IfLeT)) '#f))) ((letrec ((g$f$12201$1IfLeT (case-lambda ((g$x$12202$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12202$1IfLeT) ((case-lambda ((g$cars/f$12203$1IfLeT) (if g$cars/f$12203$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12204$1IfLeT) (if g$cdrs/f$12204$1IfLeT (begin '#f (map cons g$cars/f$12203$1IfLeT g$cdrs/f$12204$1IfLeT)) '#f))) (g$f$12201$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12202$1IfLeT)))) '#f))) ((case-lambda ((g$x$12205$1IfLeT) (list g$x$12205$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12202$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12202$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$12201$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12198$1IfLeT)))) '#f))) ((case-lambda ((g$x$12206$1IfLeT) (list g$x$12206$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12198$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12195$1IfLeT)))) '#f))) ((case-lambda ((g$x$12207$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12207$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12207$1IfLeT (g$scheme-stx$10063$1IfLeT 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12195$1IfLeT)))) '#f))) g$t$12143$1IfLeT)))) g$cls$12141$1IfLeT) ((case-lambda ((g$t$12208$1IfLeT) ((case-lambda ((g$ls/false$12209$1IfLeT) (if (if g$ls/false$12209$1IfLeT (begin '#f (apply (case-lambda ((g$e$12210$1IfLeT g$e*$12211$1IfLeT) '#t)) g$ls/false$12209$1IfLeT)) '#f) (apply (case-lambda ((g$e$12212$1IfLeT g$e*$12213$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"incorrect position of keyword else" g$stx$12133$1IfLeT))) g$ls/false$12209$1IfLeT) ((case-lambda ((g$t$12214$1IfLeT) ((case-lambda ((g$ls/false$12215$1IfLeT) (if (if g$ls/false$12215$1IfLeT (begin '#f (apply (case-lambda ((g$e$12216$1IfLeT g$p$12217$1IfLeT) '#t)) g$ls/false$12215$1IfLeT)) '#f) (apply (case-lambda ((g$e$12218$1IfLeT g$p$12219$1IfLeT) (list 'let (list (list 't g$e$12218$1IfLeT)) (list 'if 't (cons g$p$12219$1IfLeT '(t)) (g$f$12140$1IfLeT (car g$cls*$12142$1IfLeT) (cdr g$cls*$12142$1IfLeT)))))) g$ls/false$12215$1IfLeT) ((case-lambda ((g$t$12220$1IfLeT) ((case-lambda ((g$ls/false$12221$1IfLeT) (if (if g$ls/false$12221$1IfLeT (begin '#f (apply (case-lambda ((g$e$12222$1IfLeT) '#t)) g$ls/false$12221$1IfLeT)) '#f) (apply (case-lambda ((g$e$12223$1IfLeT) (list 'or g$e$12223$1IfLeT (g$f$12140$1IfLeT (car g$cls*$12142$1IfLeT) (cdr g$cls*$12142$1IfLeT))))) g$ls/false$12221$1IfLeT) ((case-lambda ((g$t$12224$1IfLeT) ((case-lambda ((g$ls/false$12225$1IfLeT) (if (if g$ls/false$12225$1IfLeT (begin '#f (apply (case-lambda ((g$e$12226$1IfLeT g$e*$12227$1IfLeT) '#t)) g$ls/false$12225$1IfLeT)) '#f) (apply (case-lambda ((g$e$12228$1IfLeT g$e*$12229$1IfLeT) (list 'if g$e$12228$1IfLeT (cons 'begin g$e*$12229$1IfLeT) (g$f$12140$1IfLeT (car g$cls*$12142$1IfLeT) (cdr g$cls*$12142$1IfLeT))))) g$ls/false$12225$1IfLeT) ((case-lambda ((g$t$12230$1IfLeT) ((case-lambda ((g$ls/false$12231$1IfLeT) (if (if g$ls/false$12231$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12231$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid last clause" g$stx$12133$1IfLeT))) g$ls/false$12231$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12230$1IfLeT)))) ((case-lambda ((g$x$12232$1IfLeT) '())) g$t$12230$1IfLeT)))) g$t$12224$1IfLeT)))) ((case-lambda ((g$x$12233$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12233$1IfLeT) (begin '#f ((case-lambda ((g$q$12234$1IfLeT) (if g$q$12234$1IfLeT (begin '#f ((case-lambda ((g$r$12235$1IfLeT) (if g$r$12235$1IfLeT (begin '#f (append g$q$12234$1IfLeT g$r$12235$1IfLeT)) '#f))) ((letrec ((g$f$12236$1IfLeT (case-lambda ((g$x$12237$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12237$1IfLeT) ((case-lambda ((g$cars/f$12238$1IfLeT) (if g$cars/f$12238$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12239$1IfLeT) (if g$cdrs/f$12239$1IfLeT (begin '#f (map cons g$cars/f$12238$1IfLeT g$cdrs/f$12239$1IfLeT)) '#f))) (g$f$12236$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12237$1IfLeT)))) '#f))) ((case-lambda ((g$x$12240$1IfLeT) (list g$x$12240$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12237$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12237$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$12236$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12233$1IfLeT)))) '#f))) ((case-lambda ((g$x$12241$1IfLeT) (list g$x$12241$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12233$1IfLeT)))) '#f))) g$t$12224$1IfLeT)))) g$t$12220$1IfLeT)))) ((case-lambda ((g$x$12242$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12242$1IfLeT) (begin '#f ((case-lambda ((g$q$12243$1IfLeT) (if g$q$12243$1IfLeT (begin '#f ((case-lambda ((g$r$12244$1IfLeT) (if g$r$12244$1IfLeT (begin '#f (append g$q$12243$1IfLeT g$r$12244$1IfLeT)) '#f))) ((case-lambda ((g$x$12245$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12245$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12242$1IfLeT)))) '#f))) ((case-lambda ((g$x$12246$1IfLeT) (list g$x$12246$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12242$1IfLeT)))) '#f))) g$t$12220$1IfLeT)))) g$t$12214$1IfLeT)))) ((case-lambda ((g$x$12247$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12247$1IfLeT) (begin '#f ((case-lambda ((g$q$12248$1IfLeT) (if g$q$12248$1IfLeT (begin '#f ((case-lambda ((g$r$12249$1IfLeT) (if g$r$12249$1IfLeT (begin '#f (append g$q$12248$1IfLeT g$r$12249$1IfLeT)) '#f))) ((case-lambda ((g$x$12250$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12250$1IfLeT) (begin '#f ((case-lambda ((g$q$12251$1IfLeT) (if g$q$12251$1IfLeT (begin '#f ((case-lambda ((g$r$12252$1IfLeT) (if g$r$12252$1IfLeT (begin '#f (append g$q$12251$1IfLeT g$r$12252$1IfLeT)) '#f))) ((case-lambda ((g$x$12253$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12253$1IfLeT) (begin '#f ((case-lambda ((g$q$12254$1IfLeT) (if g$q$12254$1IfLeT (begin '#f ((case-lambda ((g$r$12255$1IfLeT) (if g$r$12255$1IfLeT (begin '#f (append g$q$12254$1IfLeT g$r$12255$1IfLeT)) '#f))) ((case-lambda ((g$x$12256$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12256$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12253$1IfLeT)))) '#f))) ((case-lambda ((g$x$12257$1IfLeT) (list g$x$12257$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12253$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12250$1IfLeT)))) '#f))) ((case-lambda ((g$x$12258$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12258$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12258$1IfLeT (g$scheme-stx$10063$1IfLeT '=>)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12250$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12247$1IfLeT)))) '#f))) ((case-lambda ((g$x$12259$1IfLeT) (list g$x$12259$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12247$1IfLeT)))) '#f))) g$t$12214$1IfLeT)))) g$t$12208$1IfLeT)))) ((case-lambda ((g$x$12260$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12260$1IfLeT) (begin '#f ((case-lambda ((g$q$12261$1IfLeT) (if g$q$12261$1IfLeT (begin '#f ((case-lambda ((g$r$12262$1IfLeT) (if g$r$12262$1IfLeT (begin '#f (append g$q$12261$1IfLeT g$r$12262$1IfLeT)) '#f))) ((case-lambda ((g$x$12263$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12263$1IfLeT) (begin '#f ((case-lambda ((g$q$12264$1IfLeT) (if g$q$12264$1IfLeT (begin '#f ((case-lambda ((g$r$12265$1IfLeT) (if g$r$12265$1IfLeT (begin '#f (append g$q$12264$1IfLeT g$r$12265$1IfLeT)) '#f))) ((letrec ((g$f$12266$1IfLeT (case-lambda ((g$x$12267$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12267$1IfLeT) ((case-lambda ((g$cars/f$12268$1IfLeT) (if g$cars/f$12268$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12269$1IfLeT) (if g$cdrs/f$12269$1IfLeT (begin '#f (map cons g$cars/f$12268$1IfLeT g$cdrs/f$12269$1IfLeT)) '#f))) (g$f$12266$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12267$1IfLeT)))) '#f))) ((case-lambda ((g$x$12270$1IfLeT) (list g$x$12270$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12267$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12267$1IfLeT) (list (begin 'e* '())) '#f)))))) g$f$12266$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12263$1IfLeT)))) '#f))) ((case-lambda ((g$x$12271$1IfLeT) (list g$x$12271$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12263$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12260$1IfLeT)))) '#f))) ((case-lambda ((g$x$12272$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12272$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12272$1IfLeT (g$scheme-stx$10063$1IfLeT 'else)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12260$1IfLeT)))) '#f))) g$t$12208$1IfLeT)))) g$cls$12141$1IfLeT)))))) g$f$12140$1IfLeT) g$cls$12138$1IfLeT g$cls*$12139$1IfLeT)))) g$ls/false$12135$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12134$1IfLeT)))) ((case-lambda ((g$x$12273$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12273$1IfLeT) (begin '#f ((case-lambda ((g$q$12274$1IfLeT) (if g$q$12274$1IfLeT (begin '#f ((case-lambda ((g$r$12275$1IfLeT) (if g$r$12275$1IfLeT (begin '#f (append g$q$12274$1IfLeT g$r$12275$1IfLeT)) '#f))) ((case-lambda ((g$x$12276$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12276$1IfLeT) (begin '#f ((case-lambda ((g$q$12277$1IfLeT) (if g$q$12277$1IfLeT (begin '#f ((case-lambda ((g$r$12278$1IfLeT) (if g$r$12278$1IfLeT (begin '#f (append g$q$12277$1IfLeT g$r$12278$1IfLeT)) '#f))) ((letrec ((g$f$12279$1IfLeT (case-lambda ((g$x$12280$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12280$1IfLeT) ((case-lambda ((g$cars/f$12281$1IfLeT) (if g$cars/f$12281$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12282$1IfLeT) (if g$cdrs/f$12282$1IfLeT (begin '#f (map cons g$cars/f$12281$1IfLeT g$cdrs/f$12282$1IfLeT)) '#f))) (g$f$12279$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12280$1IfLeT)))) '#f))) ((case-lambda ((g$x$12283$1IfLeT) (list g$x$12283$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12280$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12280$1IfLeT) (list (begin 'cls* '())) '#f)))))) g$f$12279$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12276$1IfLeT)))) '#f))) ((case-lambda ((g$x$12284$1IfLeT) (list g$x$12284$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12276$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12273$1IfLeT)))) '#f))) ((case-lambda ((g$x$12285$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12273$1IfLeT)))) '#f))) g$t$12134$1IfLeT)))) g$stx$12133$1IfLeT)))) (g$do-include$10104$1IfLeT g$do-include$16209$1IfLeT (case-lambda ((g$stx$12286$1IfLeT g$id$12287$1IfLeT g$filename$12288$1IfLeT) ((case-lambda ((g$filename$12289$1IfLeT) (begin (if (if (string? g$filename$12289$1IfLeT) (begin '#f (g$id?$9838$1IfLeT g$id$12287$1IfLeT)) '#f) (void) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$stx$12286$1IfLeT)) (cons (g$bless$10083$1IfLeT 'begin) (with-input-from-file g$filename$12289$1IfLeT (case-lambda (() ((letrec ((g$f$12290$1IfLeT (case-lambda ((g$ls$12291$1IfLeT) ((case-lambda ((g$x$12292$1IfLeT) (if (eof-object? g$x$12292$1IfLeT) (reverse g$ls$12291$1IfLeT) (g$f$12290$1IfLeT (cons (g$datum->stx$9821$1IfLeT g$id$12287$1IfLeT g$x$12292$1IfLeT) g$ls$12291$1IfLeT))))) (read-annotated)))))) g$f$12290$1IfLeT) '())))))))) (g$stx->datum$9849$1IfLeT g$filename$12288$1IfLeT))))) (g$include-macro$10105$1IfLeT g$include-macro$16210$1IfLeT (case-lambda ((g$e$12293$1IfLeT) ((case-lambda ((g$t$12294$1IfLeT) ((case-lambda ((g$ls/false$12295$1IfLeT) (if (if g$ls/false$12295$1IfLeT (begin '#f (apply (case-lambda ((g$id$12296$1IfLeT g$filename$12297$1IfLeT) '#t)) g$ls/false$12295$1IfLeT)) '#f) (apply (case-lambda ((g$id$12298$1IfLeT g$filename$12299$1IfLeT) (g$do-include$10104$1IfLeT g$e$12293$1IfLeT g$id$12298$1IfLeT g$filename$12299$1IfLeT))) g$ls/false$12295$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12294$1IfLeT)))) ((case-lambda ((g$x$12300$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12300$1IfLeT) (begin '#f ((case-lambda ((g$q$12301$1IfLeT) (if g$q$12301$1IfLeT (begin '#f ((case-lambda ((g$r$12302$1IfLeT) (if g$r$12302$1IfLeT (begin '#f (append g$q$12301$1IfLeT g$r$12302$1IfLeT)) '#f))) ((case-lambda ((g$x$12303$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12303$1IfLeT) (begin '#f ((case-lambda ((g$q$12304$1IfLeT) (if g$q$12304$1IfLeT (begin '#f ((case-lambda ((g$r$12305$1IfLeT) (if g$r$12305$1IfLeT (begin '#f (append g$q$12304$1IfLeT g$r$12305$1IfLeT)) '#f))) ((case-lambda ((g$x$12306$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12306$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12303$1IfLeT)))) '#f))) ((case-lambda ((g$x$12307$1IfLeT) (list g$x$12307$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12303$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12300$1IfLeT)))) '#f))) ((case-lambda ((g$x$12308$1IfLeT) (list g$x$12308$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12300$1IfLeT)))) '#f))) g$t$12294$1IfLeT)))) g$e$12293$1IfLeT)))) (g$include-into-macro$10106$1IfLeT g$include-into-macro$16211$1IfLeT (case-lambda ((g$e$12309$1IfLeT) ((case-lambda ((g$t$12310$1IfLeT) ((case-lambda ((g$ls/false$12311$1IfLeT) (if (if g$ls/false$12311$1IfLeT (begin '#f (apply (case-lambda ((g$id$12312$1IfLeT g$filename$12313$1IfLeT) '#t)) g$ls/false$12311$1IfLeT)) '#f) (apply (case-lambda ((g$id$12314$1IfLeT g$filename$12315$1IfLeT) (g$do-include$10104$1IfLeT g$e$12309$1IfLeT g$id$12314$1IfLeT g$filename$12315$1IfLeT))) g$ls/false$12311$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12310$1IfLeT)))) ((case-lambda ((g$x$12316$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12316$1IfLeT) (begin '#f ((case-lambda ((g$q$12317$1IfLeT) (if g$q$12317$1IfLeT (begin '#f ((case-lambda ((g$r$12318$1IfLeT) (if g$r$12318$1IfLeT (begin '#f (append g$q$12317$1IfLeT g$r$12318$1IfLeT)) '#f))) ((case-lambda ((g$x$12319$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12319$1IfLeT) (begin '#f ((case-lambda ((g$q$12320$1IfLeT) (if g$q$12320$1IfLeT (begin '#f ((case-lambda ((g$r$12321$1IfLeT) (if g$r$12321$1IfLeT (begin '#f (append g$q$12320$1IfLeT g$r$12321$1IfLeT)) '#f))) ((case-lambda ((g$x$12322$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12322$1IfLeT) (begin '#f ((case-lambda ((g$q$12323$1IfLeT) (if g$q$12323$1IfLeT (begin '#f ((case-lambda ((g$r$12324$1IfLeT) (if g$r$12324$1IfLeT (begin '#f (append g$q$12323$1IfLeT g$r$12324$1IfLeT)) '#f))) ((case-lambda ((g$x$12325$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12325$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12322$1IfLeT)))) '#f))) ((case-lambda ((g$x$12326$1IfLeT) (list g$x$12326$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12322$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12319$1IfLeT)))) '#f))) ((case-lambda ((g$x$12327$1IfLeT) (list g$x$12327$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12319$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12316$1IfLeT)))) '#f))) ((case-lambda ((g$x$12328$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12316$1IfLeT)))) '#f))) g$t$12310$1IfLeT)))) g$e$12309$1IfLeT)))) (g$syntax-rules-macro$10107$1IfLeT g$syntax-rules-macro$16212$1IfLeT (case-lambda ((g$e$12329$1IfLeT) ((case-lambda ((g$t$12330$1IfLeT) ((case-lambda ((g$ls/false$12331$1IfLeT) (if (if g$ls/false$12331$1IfLeT (begin '#f (apply (case-lambda ((g$lits$12332$1IfLeT g$pat*$12333$1IfLeT g$tmp*$12334$1IfLeT) '#t)) g$ls/false$12331$1IfLeT)) '#f) (apply (case-lambda ((g$lits$12335$1IfLeT g$pat*$12336$1IfLeT g$tmp*$12337$1IfLeT) (begin (if (g$for-all$8490$1IfLeT (case-lambda ((g$x$12338$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12338$1IfLeT) (if (not (g$free-id=?$9842$1IfLeT g$x$12338$1IfLeT (g$scheme-stx$10063$1IfLeT '...))) (begin '#f (not (g$free-id=?$9842$1IfLeT g$x$12338$1IfLeT (g$scheme-stx$10063$1IfLeT '_)))) '#f) '#f))) g$lits$12335$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"invalid literals" g$e$12329$1IfLeT)) (g$bless$10083$1IfLeT (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$lits$12335$1IfLeT (map (case-lambda ((g$pat$12339$1IfLeT g$tmp$12340$1IfLeT) ((case-lambda ((g$t$12341$1IfLeT) ((case-lambda ((g$ls/false$12342$1IfLeT) (if (if g$ls/false$12342$1IfLeT (begin '#f (apply (case-lambda ((g$rest$12343$1IfLeT) '#t)) g$ls/false$12342$1IfLeT)) '#f) (apply (case-lambda ((g$rest$12344$1IfLeT) (list (cons 'g g$rest$12344$1IfLeT) (list 'syntax g$tmp$12340$1IfLeT)))) g$ls/false$12342$1IfLeT) ((case-lambda ((g$t$12345$1IfLeT) ((case-lambda ((g$ls/false$12346$1IfLeT) (if (if g$ls/false$12346$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12346$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax-rules pattern" g$e$12329$1IfLeT g$pat$12339$1IfLeT))) g$ls/false$12346$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12345$1IfLeT)))) ((case-lambda ((g$x$12347$1IfLeT) '())) g$t$12345$1IfLeT)))) g$t$12341$1IfLeT)))) ((case-lambda ((g$x$12348$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12348$1IfLeT) (begin '#f ((case-lambda ((g$q$12349$1IfLeT) (if g$q$12349$1IfLeT (begin '#f ((case-lambda ((g$r$12350$1IfLeT) (if g$r$12350$1IfLeT (begin '#f (append g$q$12349$1IfLeT g$r$12350$1IfLeT)) '#f))) ((case-lambda ((g$x$12351$1IfLeT) (list g$x$12351$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$12348$1IfLeT)))) '#f))) ((case-lambda ((g$x$12352$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12348$1IfLeT)))) '#f))) g$t$12341$1IfLeT)))) g$pat$12339$1IfLeT))) g$pat*$12336$1IfLeT g$tmp*$12337$1IfLeT))))))))) g$ls/false$12331$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12330$1IfLeT)))) ((case-lambda ((g$x$12353$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12353$1IfLeT) (begin '#f ((case-lambda ((g$q$12354$1IfLeT) (if g$q$12354$1IfLeT (begin '#f ((case-lambda ((g$r$12355$1IfLeT) (if g$r$12355$1IfLeT (begin '#f (append g$q$12354$1IfLeT g$r$12355$1IfLeT)) '#f))) ((case-lambda ((g$x$12356$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12356$1IfLeT) (begin '#f ((case-lambda ((g$q$12357$1IfLeT) (if g$q$12357$1IfLeT (begin '#f ((case-lambda ((g$r$12358$1IfLeT) (if g$r$12358$1IfLeT (begin '#f (append g$q$12357$1IfLeT g$r$12358$1IfLeT)) '#f))) ((letrec ((g$f$12359$1IfLeT (case-lambda ((g$x$12360$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12360$1IfLeT) ((case-lambda ((g$cars/f$12361$1IfLeT) (if g$cars/f$12361$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12362$1IfLeT) (if g$cdrs/f$12362$1IfLeT (begin '#f (map cons g$cars/f$12361$1IfLeT g$cdrs/f$12362$1IfLeT)) '#f))) (g$f$12359$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12360$1IfLeT)))) '#f))) ((case-lambda ((g$x$12363$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12363$1IfLeT) (begin '#f ((case-lambda ((g$q$12364$1IfLeT) (if g$q$12364$1IfLeT (begin '#f ((case-lambda ((g$r$12365$1IfLeT) (if g$r$12365$1IfLeT (begin '#f (append g$q$12364$1IfLeT g$r$12365$1IfLeT)) '#f))) ((case-lambda ((g$x$12366$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12366$1IfLeT) (begin '#f ((case-lambda ((g$q$12367$1IfLeT) (if g$q$12367$1IfLeT (begin '#f ((case-lambda ((g$r$12368$1IfLeT) (if g$r$12368$1IfLeT (begin '#f (append g$q$12367$1IfLeT g$r$12368$1IfLeT)) '#f))) ((case-lambda ((g$x$12369$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12369$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12366$1IfLeT)))) '#f))) ((case-lambda ((g$x$12370$1IfLeT) (list g$x$12370$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12366$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12363$1IfLeT)))) '#f))) ((case-lambda ((g$x$12371$1IfLeT) (list g$x$12371$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12363$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$12360$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12360$1IfLeT) (list (begin 'pat* '()) (begin 'tmp* '())) '#f)))))) g$f$12359$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12356$1IfLeT)))) '#f))) ((letrec ((g$f$12372$1IfLeT (case-lambda ((g$x$12373$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12373$1IfLeT) ((case-lambda ((g$cars/f$12374$1IfLeT) (if g$cars/f$12374$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12375$1IfLeT) (if g$cdrs/f$12375$1IfLeT (begin '#f (map cons g$cars/f$12374$1IfLeT g$cdrs/f$12375$1IfLeT)) '#f))) (g$f$12372$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12373$1IfLeT)))) '#f))) ((case-lambda ((g$x$12376$1IfLeT) (list g$x$12376$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12373$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12373$1IfLeT) (list (begin 'lits '())) '#f)))))) g$f$12372$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$12356$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12353$1IfLeT)))) '#f))) ((case-lambda ((g$x$12377$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12353$1IfLeT)))) '#f))) g$t$12330$1IfLeT)))) g$e$12329$1IfLeT)))) (g$quasiquote-macro$10108$1IfLeT g$quasiquote-macro$16213$1IfLeT ((case-lambda (() (letrec* ((g$datum$12378$1IfLeT (case-lambda ((g$x$12723$1IfLeT) (list (g$scheme-stx$10063$1IfLeT 'quote) (g$mkstx$9826$1IfLeT g$x$12723$1IfLeT '() '() '()))))) (g$quasicons*$12394$1IfLeT (case-lambda ((g$x$12719$1IfLeT g$y$12720$1IfLeT) ((letrec ((g$f$12721$1IfLeT (case-lambda ((g$x$12722$1IfLeT) (if (null? g$x$12722$1IfLeT) g$y$12720$1IfLeT (g$quasicons$12395$1IfLeT (car g$x$12722$1IfLeT) (g$f$12721$1IfLeT (cdr g$x$12722$1IfLeT)))))))) g$f$12721$1IfLeT) g$x$12719$1IfLeT)))) (g$quasicons$12395$1IfLeT (case-lambda ((g$x$12666$1IfLeT g$y$12667$1IfLeT) ((case-lambda ((g$t$12668$1IfLeT) ((case-lambda ((g$ls/false$12669$1IfLeT) (if (if g$ls/false$12669$1IfLeT (begin '#f (apply (case-lambda ((g$dy$12670$1IfLeT) '#t)) g$ls/false$12669$1IfLeT)) '#f) (apply (case-lambda ((g$dy$12671$1IfLeT) ((case-lambda ((g$t$12672$1IfLeT) ((case-lambda ((g$ls/false$12673$1IfLeT) (if (if g$ls/false$12673$1IfLeT (begin '#f (apply (case-lambda ((g$dx$12674$1IfLeT) '#t)) g$ls/false$12673$1IfLeT)) '#f) (apply (case-lambda ((g$dx$12675$1IfLeT) (list (g$scheme-stx$10063$1IfLeT 'quote) (cons g$dx$12675$1IfLeT g$dy$12671$1IfLeT)))) g$ls/false$12673$1IfLeT) ((case-lambda ((g$t$12676$1IfLeT) ((case-lambda ((g$ls/false$12677$1IfLeT) (if (if g$ls/false$12677$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12677$1IfLeT)) '#f) (apply (case-lambda (() ((case-lambda ((g$t$12678$1IfLeT) ((case-lambda ((g$ls/false$12679$1IfLeT) (if (if g$ls/false$12679$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12679$1IfLeT)) '#f) (apply (case-lambda (() (list (g$scheme-stx$10063$1IfLeT 'list) g$x$12666$1IfLeT))) g$ls/false$12679$1IfLeT) ((case-lambda ((g$t$12680$1IfLeT) ((case-lambda ((g$ls/false$12681$1IfLeT) (if (if g$ls/false$12681$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12681$1IfLeT)) '#f) (apply (case-lambda (() (list (g$scheme-stx$10063$1IfLeT 'cons) g$x$12666$1IfLeT g$y$12667$1IfLeT))) g$ls/false$12681$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12680$1IfLeT)))) ((case-lambda ((g$x$12682$1IfLeT) '())) g$t$12680$1IfLeT)))) g$t$12678$1IfLeT)))) ((case-lambda ((g$x$12683$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12683$1IfLeT) '()) (begin '#f '()) '#f))) g$t$12678$1IfLeT)))) g$dy$12671$1IfLeT))) g$ls/false$12677$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12676$1IfLeT)))) ((case-lambda ((g$x$12684$1IfLeT) '())) g$t$12676$1IfLeT)))) g$t$12672$1IfLeT)))) ((case-lambda ((g$x$12685$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12685$1IfLeT) (begin '#f ((case-lambda ((g$q$12686$1IfLeT) (if g$q$12686$1IfLeT (begin '#f ((case-lambda ((g$r$12687$1IfLeT) (if g$r$12687$1IfLeT (begin '#f (append g$q$12686$1IfLeT g$r$12687$1IfLeT)) '#f))) ((case-lambda ((g$x$12688$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12688$1IfLeT) (begin '#f ((case-lambda ((g$q$12689$1IfLeT) (if g$q$12689$1IfLeT (begin '#f ((case-lambda ((g$r$12690$1IfLeT) (if g$r$12690$1IfLeT (begin '#f (append g$q$12689$1IfLeT g$r$12690$1IfLeT)) '#f))) ((case-lambda ((g$x$12691$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12691$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12688$1IfLeT)))) '#f))) ((case-lambda ((g$x$12692$1IfLeT) (list g$x$12692$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12688$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12685$1IfLeT)))) '#f))) ((case-lambda ((g$x$12693$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12693$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12693$1IfLeT (g$scheme-stx$10063$1IfLeT 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12685$1IfLeT)))) '#f))) g$t$12672$1IfLeT)))) g$x$12666$1IfLeT))) g$ls/false$12669$1IfLeT) ((case-lambda ((g$t$12694$1IfLeT) ((case-lambda ((g$ls/false$12695$1IfLeT) (if (if g$ls/false$12695$1IfLeT (begin '#f (apply (case-lambda ((g$stuff$12696$1IfLeT) '#t)) g$ls/false$12695$1IfLeT)) '#f) (apply (case-lambda ((g$stuff$12697$1IfLeT) (g$cons*$8492$1IfLeT (g$scheme-stx$10063$1IfLeT 'list) g$x$12666$1IfLeT g$stuff$12697$1IfLeT))) g$ls/false$12695$1IfLeT) ((case-lambda ((g$t$12698$1IfLeT) ((case-lambda ((g$ls/false$12699$1IfLeT) (if (if g$ls/false$12699$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12699$1IfLeT)) '#f) (apply (case-lambda (() (list (g$scheme-stx$10063$1IfLeT 'cons) g$x$12666$1IfLeT g$y$12667$1IfLeT))) g$ls/false$12699$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12698$1IfLeT)))) ((case-lambda ((g$x$12700$1IfLeT) '())) g$t$12698$1IfLeT)))) g$t$12694$1IfLeT)))) ((case-lambda ((g$x$12701$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12701$1IfLeT) (begin '#f ((case-lambda ((g$q$12702$1IfLeT) (if g$q$12702$1IfLeT (begin '#f ((case-lambda ((g$r$12703$1IfLeT) (if g$r$12703$1IfLeT (begin '#f (append g$q$12702$1IfLeT g$r$12703$1IfLeT)) '#f))) ((letrec ((g$f$12704$1IfLeT (case-lambda ((g$x$12705$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12705$1IfLeT) ((case-lambda ((g$cars/f$12706$1IfLeT) (if g$cars/f$12706$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12707$1IfLeT) (if g$cdrs/f$12707$1IfLeT (begin '#f (map cons g$cars/f$12706$1IfLeT g$cdrs/f$12707$1IfLeT)) '#f))) (g$f$12704$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12705$1IfLeT)))) '#f))) ((case-lambda ((g$x$12708$1IfLeT) (list g$x$12708$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12705$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12705$1IfLeT) (list (begin 'stuff '())) '#f)))))) g$f$12704$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12701$1IfLeT)))) '#f))) ((case-lambda ((g$x$12709$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12709$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12709$1IfLeT (g$scheme-stx$10063$1IfLeT 'list)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12701$1IfLeT)))) '#f))) g$t$12694$1IfLeT)))) g$t$12668$1IfLeT)))) ((case-lambda ((g$x$12710$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12710$1IfLeT) (begin '#f ((case-lambda ((g$q$12711$1IfLeT) (if g$q$12711$1IfLeT (begin '#f ((case-lambda ((g$r$12712$1IfLeT) (if g$r$12712$1IfLeT (begin '#f (append g$q$12711$1IfLeT g$r$12712$1IfLeT)) '#f))) ((case-lambda ((g$x$12713$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12713$1IfLeT) (begin '#f ((case-lambda ((g$q$12714$1IfLeT) (if g$q$12714$1IfLeT (begin '#f ((case-lambda ((g$r$12715$1IfLeT) (if g$r$12715$1IfLeT (begin '#f (append g$q$12714$1IfLeT g$r$12715$1IfLeT)) '#f))) ((case-lambda ((g$x$12716$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12716$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12713$1IfLeT)))) '#f))) ((case-lambda ((g$x$12717$1IfLeT) (list g$x$12717$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12713$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12710$1IfLeT)))) '#f))) ((case-lambda ((g$x$12718$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12718$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12718$1IfLeT (g$scheme-stx$10063$1IfLeT 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12710$1IfLeT)))) '#f))) g$t$12668$1IfLeT)))) g$y$12667$1IfLeT)))) (g$quasiappend$12396$1IfLeT (case-lambda ((g$x$12633$1IfLeT g$y$12634$1IfLeT) ((case-lambda ((g$ls$12635$1IfLeT) (if (null? g$ls$12635$1IfLeT) (list (g$scheme-stx$10063$1IfLeT 'quote) '()) (if (null? (cdr g$ls$12635$1IfLeT)) (car g$ls$12635$1IfLeT) (g$cons*$8492$1IfLeT (g$scheme-stx$10063$1IfLeT 'append) g$ls$12635$1IfLeT))))) ((letrec ((g$f$12636$1IfLeT (case-lambda ((g$x$12637$1IfLeT) (if (null? g$x$12637$1IfLeT) ((case-lambda ((g$t$12638$1IfLeT) ((case-lambda ((g$ls/false$12639$1IfLeT) (if (if g$ls/false$12639$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12639$1IfLeT)) '#f) (apply (case-lambda (() '())) g$ls/false$12639$1IfLeT) ((case-lambda ((g$t$12640$1IfLeT) ((case-lambda ((g$ls/false$12641$1IfLeT) (if (if g$ls/false$12641$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12641$1IfLeT)) '#f) (apply (case-lambda (() (list g$y$12634$1IfLeT))) g$ls/false$12641$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12640$1IfLeT)))) ((case-lambda ((g$x$12642$1IfLeT) '())) g$t$12640$1IfLeT)))) g$t$12638$1IfLeT)))) ((case-lambda ((g$x$12643$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12643$1IfLeT) (begin '#f ((case-lambda ((g$q$12644$1IfLeT) (if g$q$12644$1IfLeT (begin '#f ((case-lambda ((g$r$12645$1IfLeT) (if g$r$12645$1IfLeT (begin '#f (append g$q$12644$1IfLeT g$r$12645$1IfLeT)) '#f))) ((case-lambda ((g$x$12646$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12646$1IfLeT) (begin '#f ((case-lambda ((g$q$12647$1IfLeT) (if g$q$12647$1IfLeT (begin '#f ((case-lambda ((g$r$12648$1IfLeT) (if g$r$12648$1IfLeT (begin '#f (append g$q$12647$1IfLeT g$r$12648$1IfLeT)) '#f))) ((case-lambda ((g$x$12649$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12649$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12646$1IfLeT)))) '#f))) ((case-lambda ((g$x$12650$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12650$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-car$9835$1IfLeT g$x$12646$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12643$1IfLeT)))) '#f))) ((case-lambda ((g$x$12651$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12651$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12651$1IfLeT (g$scheme-stx$10063$1IfLeT 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12643$1IfLeT)))) '#f))) g$t$12638$1IfLeT)))) g$y$12634$1IfLeT) ((case-lambda ((g$t$12652$1IfLeT) ((case-lambda ((g$ls/false$12653$1IfLeT) (if (if g$ls/false$12653$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12653$1IfLeT)) '#f) (apply (case-lambda (() (g$f$12636$1IfLeT (cdr g$x$12637$1IfLeT)))) g$ls/false$12653$1IfLeT) ((case-lambda ((g$t$12654$1IfLeT) ((case-lambda ((g$ls/false$12655$1IfLeT) (if (if g$ls/false$12655$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12655$1IfLeT)) '#f) (apply (case-lambda (() (cons (car g$x$12637$1IfLeT) (g$f$12636$1IfLeT (cdr g$x$12637$1IfLeT))))) g$ls/false$12655$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12654$1IfLeT)))) ((case-lambda ((g$x$12656$1IfLeT) '())) g$t$12654$1IfLeT)))) g$t$12652$1IfLeT)))) ((case-lambda ((g$x$12657$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12657$1IfLeT) (begin '#f ((case-lambda ((g$q$12658$1IfLeT) (if g$q$12658$1IfLeT (begin '#f ((case-lambda ((g$r$12659$1IfLeT) (if g$r$12659$1IfLeT (begin '#f (append g$q$12658$1IfLeT g$r$12659$1IfLeT)) '#f))) ((case-lambda ((g$x$12660$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12660$1IfLeT) (begin '#f ((case-lambda ((g$q$12661$1IfLeT) (if g$q$12661$1IfLeT (begin '#f ((case-lambda ((g$r$12662$1IfLeT) (if g$r$12662$1IfLeT (begin '#f (append g$q$12661$1IfLeT g$r$12662$1IfLeT)) '#f))) ((case-lambda ((g$x$12663$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12663$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12660$1IfLeT)))) '#f))) ((case-lambda ((g$x$12664$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12664$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-car$9835$1IfLeT g$x$12660$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12657$1IfLeT)))) '#f))) ((case-lambda ((g$x$12665$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12665$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12665$1IfLeT (g$scheme-stx$10063$1IfLeT 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12657$1IfLeT)))) '#f))) g$t$12652$1IfLeT)))) (car g$x$12637$1IfLeT))))))) g$f$12636$1IfLeT) g$x$12633$1IfLeT))))) (g$quasivector$12397$1IfLeT (case-lambda ((g$x$12553$1IfLeT) ((case-lambda ((g$pat-x$12554$1IfLeT) ((case-lambda ((g$t$12555$1IfLeT) ((case-lambda ((g$ls/false$12556$1IfLeT) (if (if g$ls/false$12556$1IfLeT (begin '#f (apply (case-lambda ((g$x*$12557$1IfLeT) '#t)) g$ls/false$12556$1IfLeT)) '#f) (apply (case-lambda ((g$x*$12558$1IfLeT) (list (g$scheme-stx$10063$1IfLeT 'quote) (list->vector g$x*$12558$1IfLeT)))) g$ls/false$12556$1IfLeT) ((case-lambda ((g$t$12559$1IfLeT) ((case-lambda ((g$ls/false$12560$1IfLeT) (if (if g$ls/false$12560$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12560$1IfLeT)) '#f) (apply (case-lambda (() ((letrec ((g$f$12561$1IfLeT (case-lambda ((g$x$12562$1IfLeT g$k$12563$1IfLeT) ((case-lambda ((g$t$12564$1IfLeT) ((case-lambda ((g$ls/false$12565$1IfLeT) (if (if g$ls/false$12565$1IfLeT (begin '#f (apply (case-lambda ((g$x*$12566$1IfLeT) '#t)) g$ls/false$12565$1IfLeT)) '#f) (apply (case-lambda ((g$x*$12567$1IfLeT) (g$k$12563$1IfLeT (map (case-lambda ((g$x$12568$1IfLeT) (list (g$scheme-stx$10063$1IfLeT 'quote) g$x$12568$1IfLeT))) g$x*$12567$1IfLeT)))) g$ls/false$12565$1IfLeT) ((case-lambda ((g$t$12569$1IfLeT) ((case-lambda ((g$ls/false$12570$1IfLeT) (if (if g$ls/false$12570$1IfLeT (begin '#f (apply (case-lambda ((g$x*$12571$1IfLeT) '#t)) g$ls/false$12570$1IfLeT)) '#f) (apply (case-lambda ((g$x*$12572$1IfLeT) (g$k$12563$1IfLeT g$x*$12572$1IfLeT))) g$ls/false$12570$1IfLeT) ((case-lambda ((g$t$12573$1IfLeT) ((case-lambda ((g$ls/false$12574$1IfLeT) (if (if g$ls/false$12574$1IfLeT (begin '#f (apply (case-lambda ((g$x$12575$1IfLeT g$y$12576$1IfLeT) '#t)) g$ls/false$12574$1IfLeT)) '#f) (apply (case-lambda ((g$x$12577$1IfLeT g$y$12578$1IfLeT) (g$f$12561$1IfLeT g$y$12578$1IfLeT (case-lambda ((g$ls$12579$1IfLeT) (g$k$12563$1IfLeT (cons g$x$12577$1IfLeT g$ls$12579$1IfLeT))))))) g$ls/false$12574$1IfLeT) ((case-lambda ((g$t$12580$1IfLeT) ((case-lambda ((g$ls/false$12581$1IfLeT) (if (if g$ls/false$12581$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12581$1IfLeT)) '#f) (apply (case-lambda (() (list (g$scheme-stx$10063$1IfLeT 'list->vector) g$pat-x$12554$1IfLeT))) g$ls/false$12581$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12580$1IfLeT)))) ((case-lambda ((g$x$12582$1IfLeT) '())) g$t$12580$1IfLeT)))) g$t$12573$1IfLeT)))) ((case-lambda ((g$x$12583$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12583$1IfLeT) (begin '#f ((case-lambda ((g$q$12584$1IfLeT) (if g$q$12584$1IfLeT (begin '#f ((case-lambda ((g$r$12585$1IfLeT) (if g$r$12585$1IfLeT (begin '#f (append g$q$12584$1IfLeT g$r$12585$1IfLeT)) '#f))) ((case-lambda ((g$x$12586$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12586$1IfLeT) (begin '#f ((case-lambda ((g$q$12587$1IfLeT) (if g$q$12587$1IfLeT (begin '#f ((case-lambda ((g$r$12588$1IfLeT) (if g$r$12588$1IfLeT (begin '#f (append g$q$12587$1IfLeT g$r$12588$1IfLeT)) '#f))) ((case-lambda ((g$x$12589$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12589$1IfLeT) (begin '#f ((case-lambda ((g$q$12590$1IfLeT) (if g$q$12590$1IfLeT (begin '#f ((case-lambda ((g$r$12591$1IfLeT) (if g$r$12591$1IfLeT (begin '#f (append g$q$12590$1IfLeT g$r$12591$1IfLeT)) '#f))) ((case-lambda ((g$x$12592$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12592$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12589$1IfLeT)))) '#f))) ((case-lambda ((g$x$12593$1IfLeT) (list g$x$12593$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12589$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12586$1IfLeT)))) '#f))) ((case-lambda ((g$x$12594$1IfLeT) (list g$x$12594$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12586$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12583$1IfLeT)))) '#f))) ((case-lambda ((g$x$12595$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12595$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12595$1IfLeT (g$scheme-stx$10063$1IfLeT 'cons)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12583$1IfLeT)))) '#f))) g$t$12573$1IfLeT)))) g$t$12569$1IfLeT)))) ((case-lambda ((g$x$12596$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12596$1IfLeT) (begin '#f ((case-lambda ((g$q$12597$1IfLeT) (if g$q$12597$1IfLeT (begin '#f ((case-lambda ((g$r$12598$1IfLeT) (if g$r$12598$1IfLeT (begin '#f (append g$q$12597$1IfLeT g$r$12598$1IfLeT)) '#f))) ((letrec ((g$f$12599$1IfLeT (case-lambda ((g$x$12600$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12600$1IfLeT) ((case-lambda ((g$cars/f$12601$1IfLeT) (if g$cars/f$12601$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12602$1IfLeT) (if g$cdrs/f$12602$1IfLeT (begin '#f (map cons g$cars/f$12601$1IfLeT g$cdrs/f$12602$1IfLeT)) '#f))) (g$f$12599$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12600$1IfLeT)))) '#f))) ((case-lambda ((g$x$12603$1IfLeT) (list g$x$12603$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12600$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12600$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$12599$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12596$1IfLeT)))) '#f))) ((case-lambda ((g$x$12604$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12604$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12604$1IfLeT (g$scheme-stx$10063$1IfLeT 'list)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12596$1IfLeT)))) '#f))) g$t$12569$1IfLeT)))) g$t$12564$1IfLeT)))) ((case-lambda ((g$x$12605$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12605$1IfLeT) (begin '#f ((case-lambda ((g$q$12606$1IfLeT) (if g$q$12606$1IfLeT (begin '#f ((case-lambda ((g$r$12607$1IfLeT) (if g$r$12607$1IfLeT (begin '#f (append g$q$12606$1IfLeT g$r$12607$1IfLeT)) '#f))) ((case-lambda ((g$x$12608$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12608$1IfLeT) (begin '#f ((case-lambda ((g$q$12609$1IfLeT) (if g$q$12609$1IfLeT (begin '#f ((case-lambda ((g$r$12610$1IfLeT) (if g$r$12610$1IfLeT (begin '#f (append g$q$12609$1IfLeT g$r$12610$1IfLeT)) '#f))) ((case-lambda ((g$x$12611$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12611$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12608$1IfLeT)))) '#f))) ((letrec ((g$f$12612$1IfLeT (case-lambda ((g$x$12613$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12613$1IfLeT) ((case-lambda ((g$cars/f$12614$1IfLeT) (if g$cars/f$12614$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12615$1IfLeT) (if g$cdrs/f$12615$1IfLeT (begin '#f (map cons g$cars/f$12614$1IfLeT g$cdrs/f$12615$1IfLeT)) '#f))) (g$f$12612$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12613$1IfLeT)))) '#f))) ((case-lambda ((g$x$12616$1IfLeT) (list g$x$12616$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12613$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12613$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$12612$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$12608$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12605$1IfLeT)))) '#f))) ((case-lambda ((g$x$12617$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12617$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12617$1IfLeT (g$scheme-stx$10063$1IfLeT 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12605$1IfLeT)))) '#f))) g$t$12564$1IfLeT)))) g$x$12562$1IfLeT))))) g$f$12561$1IfLeT) g$x$12553$1IfLeT (case-lambda ((g$ls$12618$1IfLeT) (g$cons*$8492$1IfLeT (g$scheme-stx$10063$1IfLeT 'vector) g$ls$12618$1IfLeT)))))) g$ls/false$12560$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12559$1IfLeT)))) ((case-lambda ((g$x$12619$1IfLeT) '())) g$t$12559$1IfLeT)))) g$t$12555$1IfLeT)))) ((case-lambda ((g$x$12620$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12620$1IfLeT) (begin '#f ((case-lambda ((g$q$12621$1IfLeT) (if g$q$12621$1IfLeT (begin '#f ((case-lambda ((g$r$12622$1IfLeT) (if g$r$12622$1IfLeT (begin '#f (append g$q$12621$1IfLeT g$r$12622$1IfLeT)) '#f))) ((case-lambda ((g$x$12623$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12623$1IfLeT) (begin '#f ((case-lambda ((g$q$12624$1IfLeT) (if g$q$12624$1IfLeT (begin '#f ((case-lambda ((g$r$12625$1IfLeT) (if g$r$12625$1IfLeT (begin '#f (append g$q$12624$1IfLeT g$r$12625$1IfLeT)) '#f))) ((case-lambda ((g$x$12626$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12626$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12623$1IfLeT)))) '#f))) ((letrec ((g$f$12627$1IfLeT (case-lambda ((g$x$12628$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12628$1IfLeT) ((case-lambda ((g$cars/f$12629$1IfLeT) (if g$cars/f$12629$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12630$1IfLeT) (if g$cdrs/f$12630$1IfLeT (begin '#f (map cons g$cars/f$12629$1IfLeT g$cdrs/f$12630$1IfLeT)) '#f))) (g$f$12627$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12628$1IfLeT)))) '#f))) ((case-lambda ((g$x$12631$1IfLeT) (list g$x$12631$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12628$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12628$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$12627$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$12623$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12620$1IfLeT)))) '#f))) ((case-lambda ((g$x$12632$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12632$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12632$1IfLeT (g$scheme-stx$10063$1IfLeT 'quote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12620$1IfLeT)))) '#f))) g$t$12555$1IfLeT)))) g$pat-x$12554$1IfLeT))) g$x$12553$1IfLeT)))) (g$vquasi$12398$1IfLeT (case-lambda ((g$p$12506$1IfLeT g$lev$12507$1IfLeT) ((case-lambda ((g$t$12508$1IfLeT) ((case-lambda ((g$ls/false$12509$1IfLeT) (if (if g$ls/false$12509$1IfLeT (begin '#f (apply (case-lambda ((g$p$12510$1IfLeT g$q$12511$1IfLeT) '#t)) g$ls/false$12509$1IfLeT)) '#f) (apply (case-lambda ((g$p$12512$1IfLeT g$q$12513$1IfLeT) ((case-lambda ((g$t$12514$1IfLeT) ((case-lambda ((g$ls/false$12515$1IfLeT) (if (if g$ls/false$12515$1IfLeT (begin '#f (apply (case-lambda ((g$p$12516$1IfLeT) '#t)) g$ls/false$12515$1IfLeT)) '#f) (apply (case-lambda ((g$p$12517$1IfLeT) (if (= g$lev$12507$1IfLeT '0) (g$quasicons*$12394$1IfLeT g$p$12517$1IfLeT (g$vquasi$12398$1IfLeT g$q$12513$1IfLeT g$lev$12507$1IfLeT)) (g$quasicons$12395$1IfLeT (g$quasicons$12395$1IfLeT (g$datum$12378$1IfLeT 'unquote) (g$quasi$12399$1IfLeT g$p$12517$1IfLeT (- g$lev$12507$1IfLeT '1))) (g$vquasi$12398$1IfLeT g$q$12513$1IfLeT g$lev$12507$1IfLeT))))) g$ls/false$12515$1IfLeT) ((case-lambda ((g$t$12518$1IfLeT) ((case-lambda ((g$ls/false$12519$1IfLeT) (if (if g$ls/false$12519$1IfLeT (begin '#f (apply (case-lambda ((g$p$12520$1IfLeT) '#t)) g$ls/false$12519$1IfLeT)) '#f) (apply (case-lambda ((g$p$12521$1IfLeT) (if (= g$lev$12507$1IfLeT '0) (g$quasiappend$12396$1IfLeT g$p$12521$1IfLeT (g$vquasi$12398$1IfLeT g$q$12513$1IfLeT g$lev$12507$1IfLeT)) (g$quasicons$12395$1IfLeT (g$quasicons$12395$1IfLeT (g$datum$12378$1IfLeT 'unquote-splicing) (g$quasi$12399$1IfLeT g$p$12521$1IfLeT (- g$lev$12507$1IfLeT '1))) (g$vquasi$12398$1IfLeT g$q$12513$1IfLeT g$lev$12507$1IfLeT))))) g$ls/false$12519$1IfLeT) ((case-lambda ((g$t$12522$1IfLeT) ((case-lambda ((g$ls/false$12523$1IfLeT) (if (if g$ls/false$12523$1IfLeT (begin '#f (apply (case-lambda ((g$p$12524$1IfLeT) '#t)) g$ls/false$12523$1IfLeT)) '#f) (apply (case-lambda ((g$p$12525$1IfLeT) (g$quasicons$12395$1IfLeT (g$quasi$12399$1IfLeT g$p$12525$1IfLeT g$lev$12507$1IfLeT) (g$vquasi$12398$1IfLeT g$q$12513$1IfLeT g$lev$12507$1IfLeT)))) g$ls/false$12523$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12522$1IfLeT)))) ((case-lambda ((g$x$12526$1IfLeT) (list g$x$12526$1IfLeT))) g$t$12522$1IfLeT)))) g$t$12518$1IfLeT)))) ((case-lambda ((g$x$12527$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12527$1IfLeT) (begin '#f ((case-lambda ((g$q$12528$1IfLeT) (if g$q$12528$1IfLeT (begin '#f ((case-lambda ((g$r$12529$1IfLeT) (if g$r$12529$1IfLeT (begin '#f (append g$q$12528$1IfLeT g$r$12529$1IfLeT)) '#f))) ((letrec ((g$f$12530$1IfLeT (case-lambda ((g$x$12531$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12531$1IfLeT) ((case-lambda ((g$cars/f$12532$1IfLeT) (if g$cars/f$12532$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12533$1IfLeT) (if g$cdrs/f$12533$1IfLeT (begin '#f (map cons g$cars/f$12532$1IfLeT g$cdrs/f$12533$1IfLeT)) '#f))) (g$f$12530$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12531$1IfLeT)))) '#f))) ((case-lambda ((g$x$12534$1IfLeT) (list g$x$12534$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12531$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12531$1IfLeT) (list (begin 'p '())) '#f)))))) g$f$12530$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12527$1IfLeT)))) '#f))) ((case-lambda ((g$x$12535$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12535$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12535$1IfLeT (g$scheme-stx$10063$1IfLeT 'unquote-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12527$1IfLeT)))) '#f))) g$t$12518$1IfLeT)))) g$t$12514$1IfLeT)))) ((case-lambda ((g$x$12536$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12536$1IfLeT) (begin '#f ((case-lambda ((g$q$12537$1IfLeT) (if g$q$12537$1IfLeT (begin '#f ((case-lambda ((g$r$12538$1IfLeT) (if g$r$12538$1IfLeT (begin '#f (append g$q$12537$1IfLeT g$r$12538$1IfLeT)) '#f))) ((letrec ((g$f$12539$1IfLeT (case-lambda ((g$x$12540$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12540$1IfLeT) ((case-lambda ((g$cars/f$12541$1IfLeT) (if g$cars/f$12541$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12542$1IfLeT) (if g$cdrs/f$12542$1IfLeT (begin '#f (map cons g$cars/f$12541$1IfLeT g$cdrs/f$12542$1IfLeT)) '#f))) (g$f$12539$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12540$1IfLeT)))) '#f))) ((case-lambda ((g$x$12543$1IfLeT) (list g$x$12543$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12540$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12540$1IfLeT) (list (begin 'p '())) '#f)))))) g$f$12539$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12536$1IfLeT)))) '#f))) ((case-lambda ((g$x$12544$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12544$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12544$1IfLeT (g$scheme-stx$10063$1IfLeT 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12536$1IfLeT)))) '#f))) g$t$12514$1IfLeT)))) g$p$12512$1IfLeT))) g$ls/false$12509$1IfLeT) ((case-lambda ((g$t$12545$1IfLeT) ((case-lambda ((g$ls/false$12546$1IfLeT) (if (if g$ls/false$12546$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12546$1IfLeT)) '#f) (apply (case-lambda (() (list (g$scheme-stx$10063$1IfLeT 'quote) '()))) g$ls/false$12546$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12545$1IfLeT)))) ((case-lambda ((g$x$12547$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12547$1IfLeT) '()) (begin '#f '()) '#f))) g$t$12545$1IfLeT)))) g$t$12508$1IfLeT)))) ((case-lambda ((g$x$12548$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12548$1IfLeT) (begin '#f ((case-lambda ((g$q$12549$1IfLeT) (if g$q$12549$1IfLeT (begin '#f ((case-lambda ((g$r$12550$1IfLeT) (if g$r$12550$1IfLeT (begin '#f (append g$q$12549$1IfLeT g$r$12550$1IfLeT)) '#f))) ((case-lambda ((g$x$12551$1IfLeT) (list g$x$12551$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$12548$1IfLeT)))) '#f))) ((case-lambda ((g$x$12552$1IfLeT) (list g$x$12552$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12548$1IfLeT)))) '#f))) g$t$12508$1IfLeT)))) g$p$12506$1IfLeT)))) (g$quasi$12399$1IfLeT (case-lambda ((g$p$12414$1IfLeT g$lev$12415$1IfLeT) ((case-lambda ((g$t$12416$1IfLeT) ((case-lambda ((g$ls/false$12417$1IfLeT) (if (if g$ls/false$12417$1IfLeT (begin '#f (apply (case-lambda ((g$p$12418$1IfLeT) '#t)) g$ls/false$12417$1IfLeT)) '#f) (apply (case-lambda ((g$p$12419$1IfLeT) (if (= g$lev$12415$1IfLeT '0) g$p$12419$1IfLeT (g$quasicons$12395$1IfLeT (g$datum$12378$1IfLeT 'unquote) (g$quasi$12399$1IfLeT (list g$p$12419$1IfLeT) (- g$lev$12415$1IfLeT '1)))))) g$ls/false$12417$1IfLeT) ((case-lambda ((g$t$12420$1IfLeT) ((case-lambda ((g$ls/false$12421$1IfLeT) (if (if g$ls/false$12421$1IfLeT (begin '#f (apply (case-lambda ((g$p$12422$1IfLeT g$q$12423$1IfLeT) '#t)) g$ls/false$12421$1IfLeT)) '#f) (apply (case-lambda ((g$p$12424$1IfLeT g$q$12425$1IfLeT) (if (= g$lev$12415$1IfLeT '0) (g$quasicons*$12394$1IfLeT g$p$12424$1IfLeT (g$quasi$12399$1IfLeT g$q$12425$1IfLeT g$lev$12415$1IfLeT)) (g$quasicons$12395$1IfLeT (g$quasicons$12395$1IfLeT (g$datum$12378$1IfLeT 'unquote) (g$quasi$12399$1IfLeT g$p$12424$1IfLeT (- g$lev$12415$1IfLeT '1))) (g$quasi$12399$1IfLeT g$q$12425$1IfLeT g$lev$12415$1IfLeT))))) g$ls/false$12421$1IfLeT) ((case-lambda ((g$t$12426$1IfLeT) ((case-lambda ((g$ls/false$12427$1IfLeT) (if (if g$ls/false$12427$1IfLeT (begin '#f (apply (case-lambda ((g$p$12428$1IfLeT g$q$12429$1IfLeT) '#t)) g$ls/false$12427$1IfLeT)) '#f) (apply (case-lambda ((g$p$12430$1IfLeT g$q$12431$1IfLeT) (if (= g$lev$12415$1IfLeT '0) (g$quasiappend$12396$1IfLeT g$p$12430$1IfLeT (g$quasi$12399$1IfLeT g$q$12431$1IfLeT g$lev$12415$1IfLeT)) (g$quasicons$12395$1IfLeT (g$quasicons$12395$1IfLeT (g$datum$12378$1IfLeT 'unquote-splicing) (g$quasi$12399$1IfLeT g$p$12430$1IfLeT (- g$lev$12415$1IfLeT '1))) (g$quasi$12399$1IfLeT g$q$12431$1IfLeT g$lev$12415$1IfLeT))))) g$ls/false$12427$1IfLeT) ((case-lambda ((g$t$12432$1IfLeT) ((case-lambda ((g$ls/false$12433$1IfLeT) (if (if g$ls/false$12433$1IfLeT (begin '#f (apply (case-lambda ((g$p$12434$1IfLeT) '#t)) g$ls/false$12433$1IfLeT)) '#f) (apply (case-lambda ((g$p$12435$1IfLeT) (g$quasicons$12395$1IfLeT (g$datum$12378$1IfLeT 'quasiquote) (g$quasi$12399$1IfLeT (list g$p$12435$1IfLeT) (+ g$lev$12415$1IfLeT '1))))) g$ls/false$12433$1IfLeT) ((case-lambda ((g$t$12436$1IfLeT) ((case-lambda ((g$ls/false$12437$1IfLeT) (if (if g$ls/false$12437$1IfLeT (begin '#f (apply (case-lambda ((g$p$12438$1IfLeT g$q$12439$1IfLeT) '#t)) g$ls/false$12437$1IfLeT)) '#f) (apply (case-lambda ((g$p$12440$1IfLeT g$q$12441$1IfLeT) (g$quasicons$12395$1IfLeT (g$quasi$12399$1IfLeT g$p$12440$1IfLeT g$lev$12415$1IfLeT) (g$quasi$12399$1IfLeT g$q$12441$1IfLeT g$lev$12415$1IfLeT)))) g$ls/false$12437$1IfLeT) ((case-lambda ((g$t$12442$1IfLeT) ((case-lambda ((g$ls/false$12443$1IfLeT) (if (if g$ls/false$12443$1IfLeT (begin '#f (apply (case-lambda ((g$x$12444$1IfLeT) (not (g$stx?$9810$1IfLeT g$x$12444$1IfLeT)))) g$ls/false$12443$1IfLeT)) '#f) (apply (case-lambda ((g$x$12445$1IfLeT) (g$quasivector$12397$1IfLeT (g$vquasi$12398$1IfLeT g$x$12445$1IfLeT g$lev$12415$1IfLeT)))) g$ls/false$12443$1IfLeT) ((case-lambda ((g$t$12446$1IfLeT) ((case-lambda ((g$ls/false$12447$1IfLeT) (if (if g$ls/false$12447$1IfLeT (begin '#f (apply (case-lambda ((g$p$12448$1IfLeT) '#t)) g$ls/false$12447$1IfLeT)) '#f) (apply (case-lambda ((g$p$12449$1IfLeT) (list (g$scheme-stx$10063$1IfLeT 'quote) g$p$12449$1IfLeT))) g$ls/false$12447$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12446$1IfLeT)))) ((case-lambda ((g$x$12450$1IfLeT) (list g$x$12450$1IfLeT))) g$t$12446$1IfLeT)))) g$t$12442$1IfLeT)))) ((case-lambda ((g$x$12451$1IfLeT) (if (g$syntax-vector?$9832$1IfLeT g$x$12451$1IfLeT) (begin '#f ((letrec ((g$f$12452$1IfLeT (case-lambda ((g$x$12453$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12453$1IfLeT) ((case-lambda ((g$cars/f$12454$1IfLeT) (if g$cars/f$12454$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12455$1IfLeT) (if g$cdrs/f$12455$1IfLeT (begin '#f (map cons g$cars/f$12454$1IfLeT g$cdrs/f$12455$1IfLeT)) '#f))) (g$f$12452$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12453$1IfLeT)))) '#f))) ((case-lambda ((g$x$12456$1IfLeT) (list g$x$12456$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12453$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12453$1IfLeT) (list (begin 'x '())) '#f)))))) g$f$12452$1IfLeT) (g$syntax-vector->list$9830$1IfLeT g$x$12451$1IfLeT))) '#f))) g$t$12442$1IfLeT)))) g$t$12436$1IfLeT)))) ((case-lambda ((g$x$12457$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12457$1IfLeT) (begin '#f ((case-lambda ((g$q$12458$1IfLeT) (if g$q$12458$1IfLeT (begin '#f ((case-lambda ((g$r$12459$1IfLeT) (if g$r$12459$1IfLeT (begin '#f (append g$q$12458$1IfLeT g$r$12459$1IfLeT)) '#f))) ((case-lambda ((g$x$12460$1IfLeT) (list g$x$12460$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$12457$1IfLeT)))) '#f))) ((case-lambda ((g$x$12461$1IfLeT) (list g$x$12461$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12457$1IfLeT)))) '#f))) g$t$12436$1IfLeT)))) g$t$12432$1IfLeT)))) ((case-lambda ((g$x$12462$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12462$1IfLeT) (begin '#f ((case-lambda ((g$q$12463$1IfLeT) (if g$q$12463$1IfLeT (begin '#f ((case-lambda ((g$r$12464$1IfLeT) (if g$r$12464$1IfLeT (begin '#f (append g$q$12463$1IfLeT g$r$12464$1IfLeT)) '#f))) ((case-lambda ((g$x$12465$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12465$1IfLeT) (begin '#f ((case-lambda ((g$q$12466$1IfLeT) (if g$q$12466$1IfLeT (begin '#f ((case-lambda ((g$r$12467$1IfLeT) (if g$r$12467$1IfLeT (begin '#f (append g$q$12466$1IfLeT g$r$12467$1IfLeT)) '#f))) ((case-lambda ((g$x$12468$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12468$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12465$1IfLeT)))) '#f))) ((case-lambda ((g$x$12469$1IfLeT) (list g$x$12469$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12465$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12462$1IfLeT)))) '#f))) ((case-lambda ((g$x$12470$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12470$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12470$1IfLeT (g$scheme-stx$10063$1IfLeT 'quasiquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12462$1IfLeT)))) '#f))) g$t$12432$1IfLeT)))) g$t$12426$1IfLeT)))) ((case-lambda ((g$x$12471$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12471$1IfLeT) (begin '#f ((case-lambda ((g$q$12472$1IfLeT) (if g$q$12472$1IfLeT (begin '#f ((case-lambda ((g$r$12473$1IfLeT) (if g$r$12473$1IfLeT (begin '#f (append g$q$12472$1IfLeT g$r$12473$1IfLeT)) '#f))) ((case-lambda ((g$x$12474$1IfLeT) (list g$x$12474$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$12471$1IfLeT)))) '#f))) ((case-lambda ((g$x$12475$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12475$1IfLeT) (begin '#f ((case-lambda ((g$q$12476$1IfLeT) (if g$q$12476$1IfLeT (begin '#f ((case-lambda ((g$r$12477$1IfLeT) (if g$r$12477$1IfLeT (begin '#f (append g$q$12476$1IfLeT g$r$12477$1IfLeT)) '#f))) ((letrec ((g$f$12478$1IfLeT (case-lambda ((g$x$12479$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12479$1IfLeT) ((case-lambda ((g$cars/f$12480$1IfLeT) (if g$cars/f$12480$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12481$1IfLeT) (if g$cdrs/f$12481$1IfLeT (begin '#f (map cons g$cars/f$12480$1IfLeT g$cdrs/f$12481$1IfLeT)) '#f))) (g$f$12478$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12479$1IfLeT)))) '#f))) ((case-lambda ((g$x$12482$1IfLeT) (list g$x$12482$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12479$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12479$1IfLeT) (list (begin 'p '())) '#f)))))) g$f$12478$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12475$1IfLeT)))) '#f))) ((case-lambda ((g$x$12483$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12483$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12483$1IfLeT (g$scheme-stx$10063$1IfLeT 'unquote-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12475$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$12471$1IfLeT)))) '#f))) g$t$12426$1IfLeT)))) g$t$12420$1IfLeT)))) ((case-lambda ((g$x$12484$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12484$1IfLeT) (begin '#f ((case-lambda ((g$q$12485$1IfLeT) (if g$q$12485$1IfLeT (begin '#f ((case-lambda ((g$r$12486$1IfLeT) (if g$r$12486$1IfLeT (begin '#f (append g$q$12485$1IfLeT g$r$12486$1IfLeT)) '#f))) ((case-lambda ((g$x$12487$1IfLeT) (list g$x$12487$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$12484$1IfLeT)))) '#f))) ((case-lambda ((g$x$12488$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12488$1IfLeT) (begin '#f ((case-lambda ((g$q$12489$1IfLeT) (if g$q$12489$1IfLeT (begin '#f ((case-lambda ((g$r$12490$1IfLeT) (if g$r$12490$1IfLeT (begin '#f (append g$q$12489$1IfLeT g$r$12490$1IfLeT)) '#f))) ((letrec ((g$f$12491$1IfLeT (case-lambda ((g$x$12492$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12492$1IfLeT) ((case-lambda ((g$cars/f$12493$1IfLeT) (if g$cars/f$12493$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12494$1IfLeT) (if g$cdrs/f$12494$1IfLeT (begin '#f (map cons g$cars/f$12493$1IfLeT g$cdrs/f$12494$1IfLeT)) '#f))) (g$f$12491$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12492$1IfLeT)))) '#f))) ((case-lambda ((g$x$12495$1IfLeT) (list g$x$12495$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12492$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12492$1IfLeT) (list (begin 'p '())) '#f)))))) g$f$12491$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12488$1IfLeT)))) '#f))) ((case-lambda ((g$x$12496$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12496$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12496$1IfLeT (g$scheme-stx$10063$1IfLeT 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12488$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$12484$1IfLeT)))) '#f))) g$t$12420$1IfLeT)))) g$t$12416$1IfLeT)))) ((case-lambda ((g$x$12497$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12497$1IfLeT) (begin '#f ((case-lambda ((g$q$12498$1IfLeT) (if g$q$12498$1IfLeT (begin '#f ((case-lambda ((g$r$12499$1IfLeT) (if g$r$12499$1IfLeT (begin '#f (append g$q$12498$1IfLeT g$r$12499$1IfLeT)) '#f))) ((case-lambda ((g$x$12500$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12500$1IfLeT) (begin '#f ((case-lambda ((g$q$12501$1IfLeT) (if g$q$12501$1IfLeT (begin '#f ((case-lambda ((g$r$12502$1IfLeT) (if g$r$12502$1IfLeT (begin '#f (append g$q$12501$1IfLeT g$r$12502$1IfLeT)) '#f))) ((case-lambda ((g$x$12503$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12503$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12500$1IfLeT)))) '#f))) ((case-lambda ((g$x$12504$1IfLeT) (list g$x$12504$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12500$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12497$1IfLeT)))) '#f))) ((case-lambda ((g$x$12505$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12505$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12505$1IfLeT (g$scheme-stx$10063$1IfLeT 'unquote)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12497$1IfLeT)))) '#f))) g$t$12416$1IfLeT)))) g$p$12414$1IfLeT))))) (case-lambda ((g$x$12400$1IfLeT) ((case-lambda ((g$t$12401$1IfLeT) ((case-lambda ((g$ls/false$12402$1IfLeT) (if (if g$ls/false$12402$1IfLeT (begin '#f (apply (case-lambda ((g$e$12403$1IfLeT) '#t)) g$ls/false$12402$1IfLeT)) '#f) (apply (case-lambda ((g$e$12404$1IfLeT) (g$quasi$12399$1IfLeT g$e$12404$1IfLeT '0))) g$ls/false$12402$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12401$1IfLeT)))) ((case-lambda ((g$x$12405$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12405$1IfLeT) (begin '#f ((case-lambda ((g$q$12406$1IfLeT) (if g$q$12406$1IfLeT (begin '#f ((case-lambda ((g$r$12407$1IfLeT) (if g$r$12407$1IfLeT (begin '#f (append g$q$12406$1IfLeT g$r$12407$1IfLeT)) '#f))) ((case-lambda ((g$x$12408$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12408$1IfLeT) (begin '#f ((case-lambda ((g$q$12409$1IfLeT) (if g$q$12409$1IfLeT (begin '#f ((case-lambda ((g$r$12410$1IfLeT) (if g$r$12410$1IfLeT (begin '#f (append g$q$12409$1IfLeT g$r$12410$1IfLeT)) '#f))) ((case-lambda ((g$x$12411$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12411$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12408$1IfLeT)))) '#f))) ((case-lambda ((g$x$12412$1IfLeT) (list g$x$12412$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12408$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12405$1IfLeT)))) '#f))) ((case-lambda ((g$x$12413$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12405$1IfLeT)))) '#f))) g$t$12401$1IfLeT)))) g$x$12400$1IfLeT)))))))) (g$quasisyntax-macro$10109$1IfLeT g$quasisyntax-macro$16214$1IfLeT ((case-lambda (() (letrec* ((g$quasi$12724$1IfLeT (case-lambda ((g$p$12748$1IfLeT g$lev$12749$1IfLeT) ((case-lambda ((g$t$12750$1IfLeT) ((case-lambda ((g$ls/false$12751$1IfLeT) (if (if g$ls/false$12751$1IfLeT (begin '#f (apply (case-lambda ((g$p$12752$1IfLeT) '#t)) g$ls/false$12751$1IfLeT)) '#f) (apply (case-lambda ((g$p$12753$1IfLeT) (if (= g$lev$12749$1IfLeT '0) ((case-lambda ((g$g$12754$1IfLeT) (values (list g$g$12754$1IfLeT) (list g$p$12753$1IfLeT) g$g$12754$1IfLeT))) (gensym)) (call-with-values (case-lambda (() (g$quasi$12724$1IfLeT g$p$12753$1IfLeT (- g$lev$12749$1IfLeT '1)))) (case-lambda ((g$lhs*$12758$1IfLeT g$rhs*$12759$1IfLeT g$p$12760$1IfLeT) ((case-lambda ((g$p$12761$1IfLeT g$rhs*$12762$1IfLeT g$lhs*$12763$1IfLeT) (values g$lhs*$12763$1IfLeT g$rhs*$12762$1IfLeT (list 'unsyntax g$p$12761$1IfLeT)))) g$p$12760$1IfLeT g$rhs*$12759$1IfLeT g$lhs*$12758$1IfLeT))))))) g$ls/false$12751$1IfLeT) ((case-lambda ((g$t$12764$1IfLeT) ((case-lambda ((g$ls/false$12765$1IfLeT) (if (if g$ls/false$12765$1IfLeT (begin '#f (apply (case-lambda (() (= g$lev$12749$1IfLeT '0))) g$ls/false$12765$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"incorrect use of unsyntax" g$p$12748$1IfLeT))) g$ls/false$12765$1IfLeT) ((case-lambda ((g$t$12766$1IfLeT) ((case-lambda ((g$ls/false$12767$1IfLeT) (if (if g$ls/false$12767$1IfLeT (begin '#f (apply (case-lambda ((g$p$12768$1IfLeT g$q$12769$1IfLeT) '#t)) g$ls/false$12767$1IfLeT)) '#f) (apply (case-lambda ((g$p$12770$1IfLeT g$q$12771$1IfLeT) (call-with-values (case-lambda (() (g$quasi$12724$1IfLeT g$q$12771$1IfLeT g$lev$12749$1IfLeT))) (case-lambda ((g$lhs*$12775$1IfLeT g$rhs*$12776$1IfLeT g$q$12777$1IfLeT) ((case-lambda ((g$q$12778$1IfLeT g$rhs*$12779$1IfLeT g$lhs*$12780$1IfLeT) (if (= g$lev$12749$1IfLeT '0) ((case-lambda ((g$g$12781$1IfLeT) (values (cons (cons g$g$12781$1IfLeT '(...)) g$lhs*$12780$1IfLeT) (cons g$p$12770$1IfLeT g$rhs*$12779$1IfLeT) (cons g$g$12781$1IfLeT (cons '... g$q$12778$1IfLeT))))) (gensym)) (call-with-values (case-lambda (() (g$quasi$12724$1IfLeT g$p$12770$1IfLeT (- g$lev$12749$1IfLeT '1)))) (case-lambda ((g$lhs2*$12785$1IfLeT g$rhs2*$12786$1IfLeT g$p$12787$1IfLeT) ((case-lambda ((g$p$12788$1IfLeT g$rhs2*$12789$1IfLeT g$lhs2*$12790$1IfLeT) (values (append g$lhs2*$12790$1IfLeT g$lhs*$12780$1IfLeT) (append g$rhs2*$12789$1IfLeT g$rhs*$12779$1IfLeT) (cons (list 'unsyntax-splicing g$p$12788$1IfLeT) g$q$12778$1IfLeT)))) g$p$12787$1IfLeT g$rhs2*$12786$1IfLeT g$lhs2*$12785$1IfLeT))))))) g$q$12777$1IfLeT g$rhs*$12776$1IfLeT g$lhs*$12775$1IfLeT)))))) g$ls/false$12767$1IfLeT) ((case-lambda ((g$t$12791$1IfLeT) ((case-lambda ((g$ls/false$12792$1IfLeT) (if (if g$ls/false$12792$1IfLeT (begin '#f (apply (case-lambda (() (= g$lev$12749$1IfLeT '0))) g$ls/false$12792$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"incorrect use of unsyntax-splicing" g$p$12748$1IfLeT))) g$ls/false$12792$1IfLeT) ((case-lambda ((g$t$12793$1IfLeT) ((case-lambda ((g$ls/false$12794$1IfLeT) (if (if g$ls/false$12794$1IfLeT (begin '#f (apply (case-lambda ((g$p$12795$1IfLeT) '#t)) g$ls/false$12794$1IfLeT)) '#f) (apply (case-lambda ((g$p$12796$1IfLeT) (call-with-values (case-lambda (() (g$quasi$12724$1IfLeT g$p$12796$1IfLeT (+ g$lev$12749$1IfLeT '1)))) (case-lambda ((g$lhs*$12800$1IfLeT g$rhs*$12801$1IfLeT g$p$12802$1IfLeT) ((case-lambda ((g$p$12803$1IfLeT g$rhs*$12804$1IfLeT g$lhs*$12805$1IfLeT) (values g$lhs*$12805$1IfLeT g$rhs*$12804$1IfLeT (list 'quasisyntax g$p$12803$1IfLeT)))) g$p$12802$1IfLeT g$rhs*$12801$1IfLeT g$lhs*$12800$1IfLeT)))))) g$ls/false$12794$1IfLeT) ((case-lambda ((g$t$12806$1IfLeT) ((case-lambda ((g$ls/false$12807$1IfLeT) (if (if g$ls/false$12807$1IfLeT (begin '#f (apply (case-lambda ((g$p$12808$1IfLeT g$q$12809$1IfLeT) '#t)) g$ls/false$12807$1IfLeT)) '#f) (apply (case-lambda ((g$p$12810$1IfLeT g$q$12811$1IfLeT) (call-with-values (case-lambda (() (g$quasi$12724$1IfLeT g$p$12810$1IfLeT g$lev$12749$1IfLeT))) (case-lambda ((g$lhs*$12818$1IfLeT g$rhs*$12819$1IfLeT g$p$12820$1IfLeT) (call-with-values (case-lambda (() (g$quasi$12724$1IfLeT g$q$12811$1IfLeT g$lev$12749$1IfLeT))) (case-lambda ((g$lhs2*$12821$1IfLeT g$rhs2*$12822$1IfLeT g$q$12823$1IfLeT) ((case-lambda ((g$q$12824$1IfLeT g$rhs2*$12825$1IfLeT g$lhs2*$12826$1IfLeT g$p$12827$1IfLeT g$rhs*$12828$1IfLeT g$lhs*$12829$1IfLeT) (values (append g$lhs2*$12826$1IfLeT g$lhs*$12829$1IfLeT) (append g$rhs2*$12825$1IfLeT g$rhs*$12828$1IfLeT) (cons g$p$12827$1IfLeT g$q$12824$1IfLeT)))) g$q$12823$1IfLeT g$rhs2*$12822$1IfLeT g$lhs2*$12821$1IfLeT g$p$12820$1IfLeT g$rhs*$12819$1IfLeT g$lhs*$12818$1IfLeT))))))))) g$ls/false$12807$1IfLeT) ((case-lambda ((g$t$12830$1IfLeT) ((case-lambda ((g$ls/false$12831$1IfLeT) (if (if g$ls/false$12831$1IfLeT (begin '#f (apply (case-lambda ((g$x$12832$1IfLeT) (not (g$stx?$9810$1IfLeT g$p$12748$1IfLeT)))) g$ls/false$12831$1IfLeT)) '#f) (apply (case-lambda ((g$x$12833$1IfLeT) (call-with-values (case-lambda (() ((letrec ((g$f$12837$1IfLeT (case-lambda ((g$x$12838$1IfLeT) (if (null? g$x$12838$1IfLeT) (values '() '() '()) (call-with-values (case-lambda (() (g$quasi$12724$1IfLeT (car g$x$12838$1IfLeT) g$lev$12749$1IfLeT))) (case-lambda ((g$lhs*$12842$1IfLeT g$rhs*$12843$1IfLeT g$a$12844$1IfLeT) ((case-lambda ((g$a$12845$1IfLeT g$rhs*$12846$1IfLeT g$lhs*$12847$1IfLeT) (call-with-values (case-lambda (() (g$f$12837$1IfLeT (cdr g$x$12838$1IfLeT)))) (case-lambda ((g$lhs2*$12851$1IfLeT g$rhs2*$12852$1IfLeT g$d$12853$1IfLeT) ((case-lambda ((g$d$12854$1IfLeT g$rhs2*$12855$1IfLeT g$lhs2*$12856$1IfLeT) (values (append g$lhs*$12847$1IfLeT g$lhs2*$12856$1IfLeT) (append g$rhs*$12846$1IfLeT g$rhs2*$12855$1IfLeT) (cons g$a$12845$1IfLeT g$d$12854$1IfLeT)))) g$d$12853$1IfLeT g$rhs2*$12852$1IfLeT g$lhs2*$12851$1IfLeT)))))) g$a$12844$1IfLeT g$rhs*$12843$1IfLeT g$lhs*$12842$1IfLeT))))))))) g$f$12837$1IfLeT) g$x$12833$1IfLeT))) (case-lambda ((g$lhs*$12857$1IfLeT g$rhs*$12858$1IfLeT g$x*$12859$1IfLeT) ((case-lambda ((g$x*$12860$1IfLeT g$rhs*$12861$1IfLeT g$lhs*$12862$1IfLeT) (values g$lhs*$12862$1IfLeT g$rhs*$12861$1IfLeT (list->vector g$x*$12860$1IfLeT)))) g$x*$12859$1IfLeT g$rhs*$12858$1IfLeT g$lhs*$12857$1IfLeT)))))) g$ls/false$12831$1IfLeT) ((case-lambda ((g$t$12863$1IfLeT) ((case-lambda ((g$ls/false$12864$1IfLeT) (if (if g$ls/false$12864$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$12864$1IfLeT)) '#f) (apply (case-lambda (() (values '() '() g$p$12748$1IfLeT))) g$ls/false$12864$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12863$1IfLeT)))) ((case-lambda ((g$x$12865$1IfLeT) '())) g$t$12863$1IfLeT)))) g$t$12830$1IfLeT)))) ((case-lambda ((g$x$12866$1IfLeT) (if (g$syntax-vector?$9832$1IfLeT g$x$12866$1IfLeT) (begin '#f ((letrec ((g$f$12867$1IfLeT (case-lambda ((g$x$12868$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12868$1IfLeT) ((case-lambda ((g$cars/f$12869$1IfLeT) (if g$cars/f$12869$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12870$1IfLeT) (if g$cdrs/f$12870$1IfLeT (begin '#f (map cons g$cars/f$12869$1IfLeT g$cdrs/f$12870$1IfLeT)) '#f))) (g$f$12867$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12868$1IfLeT)))) '#f))) ((case-lambda ((g$x$12871$1IfLeT) (list g$x$12871$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12868$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12868$1IfLeT) (list (begin 'x '())) '#f)))))) g$f$12867$1IfLeT) (g$syntax-vector->list$9830$1IfLeT g$x$12866$1IfLeT))) '#f))) g$t$12830$1IfLeT)))) g$t$12806$1IfLeT)))) ((case-lambda ((g$x$12872$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12872$1IfLeT) (begin '#f ((case-lambda ((g$q$12873$1IfLeT) (if g$q$12873$1IfLeT (begin '#f ((case-lambda ((g$r$12874$1IfLeT) (if g$r$12874$1IfLeT (begin '#f (append g$q$12873$1IfLeT g$r$12874$1IfLeT)) '#f))) ((case-lambda ((g$x$12875$1IfLeT) (list g$x$12875$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$12872$1IfLeT)))) '#f))) ((case-lambda ((g$x$12876$1IfLeT) (list g$x$12876$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12872$1IfLeT)))) '#f))) g$t$12806$1IfLeT)))) g$t$12793$1IfLeT)))) ((case-lambda ((g$x$12877$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12877$1IfLeT) (begin '#f ((case-lambda ((g$q$12878$1IfLeT) (if g$q$12878$1IfLeT (begin '#f ((case-lambda ((g$r$12879$1IfLeT) (if g$r$12879$1IfLeT (begin '#f (append g$q$12878$1IfLeT g$r$12879$1IfLeT)) '#f))) ((case-lambda ((g$x$12880$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12880$1IfLeT) (begin '#f ((case-lambda ((g$q$12881$1IfLeT) (if g$q$12881$1IfLeT (begin '#f ((case-lambda ((g$r$12882$1IfLeT) (if g$r$12882$1IfLeT (begin '#f (append g$q$12881$1IfLeT g$r$12882$1IfLeT)) '#f))) ((case-lambda ((g$x$12883$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12883$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12880$1IfLeT)))) '#f))) ((case-lambda ((g$x$12884$1IfLeT) (list g$x$12884$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12880$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12877$1IfLeT)))) '#f))) ((case-lambda ((g$x$12885$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12885$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12885$1IfLeT (g$scheme-stx$10063$1IfLeT 'quasisyntax)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12877$1IfLeT)))) '#f))) g$t$12793$1IfLeT)))) g$t$12791$1IfLeT)))) ((case-lambda ((g$x$12886$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12886$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12886$1IfLeT (g$scheme-stx$10063$1IfLeT 'unsyntax-splicing)) (begin '#f '()) '#f) '#f))) g$t$12791$1IfLeT)))) g$t$12766$1IfLeT)))) ((case-lambda ((g$x$12887$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12887$1IfLeT) (begin '#f ((case-lambda ((g$q$12888$1IfLeT) (if g$q$12888$1IfLeT (begin '#f ((case-lambda ((g$r$12889$1IfLeT) (if g$r$12889$1IfLeT (begin '#f (append g$q$12888$1IfLeT g$r$12889$1IfLeT)) '#f))) ((case-lambda ((g$x$12890$1IfLeT) (list g$x$12890$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$12887$1IfLeT)))) '#f))) ((case-lambda ((g$x$12891$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12891$1IfLeT) (begin '#f ((case-lambda ((g$q$12892$1IfLeT) (if g$q$12892$1IfLeT (begin '#f ((case-lambda ((g$r$12893$1IfLeT) (if g$r$12893$1IfLeT (begin '#f (append g$q$12892$1IfLeT g$r$12893$1IfLeT)) '#f))) ((case-lambda ((g$x$12894$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12894$1IfLeT) (begin '#f ((case-lambda ((g$q$12895$1IfLeT) (if g$q$12895$1IfLeT (begin '#f ((case-lambda ((g$r$12896$1IfLeT) (if g$r$12896$1IfLeT (begin '#f (append g$q$12895$1IfLeT g$r$12896$1IfLeT)) '#f))) ((case-lambda ((g$x$12897$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12897$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12894$1IfLeT)))) '#f))) ((case-lambda ((g$x$12898$1IfLeT) (list g$x$12898$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12894$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12891$1IfLeT)))) '#f))) ((case-lambda ((g$x$12899$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12899$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12899$1IfLeT (g$scheme-stx$10063$1IfLeT 'unsyntax-splicing)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12891$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$12887$1IfLeT)))) '#f))) g$t$12766$1IfLeT)))) g$t$12764$1IfLeT)))) ((case-lambda ((g$x$12900$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12900$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12900$1IfLeT (g$scheme-stx$10063$1IfLeT 'unsyntax)) (begin '#f '()) '#f) '#f))) g$t$12764$1IfLeT)))) g$t$12750$1IfLeT)))) ((case-lambda ((g$x$12901$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12901$1IfLeT) (begin '#f ((case-lambda ((g$q$12902$1IfLeT) (if g$q$12902$1IfLeT (begin '#f ((case-lambda ((g$r$12903$1IfLeT) (if g$r$12903$1IfLeT (begin '#f (append g$q$12902$1IfLeT g$r$12903$1IfLeT)) '#f))) ((case-lambda ((g$x$12904$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12904$1IfLeT) (begin '#f ((case-lambda ((g$q$12905$1IfLeT) (if g$q$12905$1IfLeT (begin '#f ((case-lambda ((g$r$12906$1IfLeT) (if g$r$12906$1IfLeT (begin '#f (append g$q$12905$1IfLeT g$r$12906$1IfLeT)) '#f))) ((case-lambda ((g$x$12907$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12907$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12904$1IfLeT)))) '#f))) ((case-lambda ((g$x$12908$1IfLeT) (list g$x$12908$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12904$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12901$1IfLeT)))) '#f))) ((case-lambda ((g$x$12909$1IfLeT) (if (g$id?$9838$1IfLeT g$x$12909$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$12909$1IfLeT (g$scheme-stx$10063$1IfLeT 'unsyntax)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$12901$1IfLeT)))) '#f))) g$t$12750$1IfLeT)))) g$p$12748$1IfLeT))))) (case-lambda ((g$x$12725$1IfLeT) ((case-lambda ((g$t$12726$1IfLeT) ((case-lambda ((g$ls/false$12727$1IfLeT) (if (if g$ls/false$12727$1IfLeT (begin '#f (apply (case-lambda ((g$e$12728$1IfLeT) '#t)) g$ls/false$12727$1IfLeT)) '#f) (apply (case-lambda ((g$e$12729$1IfLeT) (call-with-values (case-lambda (() (g$quasi$12724$1IfLeT g$e$12729$1IfLeT '0))) (case-lambda ((g$lhs*$12733$1IfLeT g$rhs*$12734$1IfLeT g$v$12735$1IfLeT) ((case-lambda ((g$v$12736$1IfLeT g$rhs*$12737$1IfLeT g$lhs*$12738$1IfLeT) (g$bless$10083$1IfLeT (list 'syntax-case (cons 'list g$rhs*$12737$1IfLeT) '() (list g$lhs*$12738$1IfLeT (list 'syntax g$v$12736$1IfLeT)))))) g$v$12735$1IfLeT g$rhs*$12734$1IfLeT g$lhs*$12733$1IfLeT)))))) g$ls/false$12727$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12726$1IfLeT)))) ((case-lambda ((g$x$12739$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12739$1IfLeT) (begin '#f ((case-lambda ((g$q$12740$1IfLeT) (if g$q$12740$1IfLeT (begin '#f ((case-lambda ((g$r$12741$1IfLeT) (if g$r$12741$1IfLeT (begin '#f (append g$q$12740$1IfLeT g$r$12741$1IfLeT)) '#f))) ((case-lambda ((g$x$12742$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12742$1IfLeT) (begin '#f ((case-lambda ((g$q$12743$1IfLeT) (if g$q$12743$1IfLeT (begin '#f ((case-lambda ((g$r$12744$1IfLeT) (if g$r$12744$1IfLeT (begin '#f (append g$q$12743$1IfLeT g$r$12744$1IfLeT)) '#f))) ((case-lambda ((g$x$12745$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$12745$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12742$1IfLeT)))) '#f))) ((case-lambda ((g$x$12746$1IfLeT) (list g$x$12746$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12742$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12739$1IfLeT)))) '#f))) ((case-lambda ((g$x$12747$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12739$1IfLeT)))) '#f))) g$t$12726$1IfLeT)))) g$x$12725$1IfLeT)))))))) (g$define-struct-macro$10110$1IfLeT g$define-struct-macro$16215$1IfLeT (case-lambda ((g$stx$12910$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"define-struct not supported" g$stx$12910$1IfLeT)))) (g$define-record-type-macro$10111$1IfLeT g$define-record-type-macro$16216$1IfLeT (case-lambda ((g$x$12911$1IfLeT) (letrec* ((g$id$12912$1IfLeT (case-lambda ((g$ctxt$13477$1IfLeT . g$str*$13478$1IfLeT) (g$datum->syntax$10223$1IfLeT g$ctxt$13477$1IfLeT (string->symbol (apply string-append (map (case-lambda ((g$x$13479$1IfLeT) (if (symbol? g$x$13479$1IfLeT) (symbol->string g$x$13479$1IfLeT) (if (string? g$x$13479$1IfLeT) g$x$13479$1IfLeT (assertion-violation 'define-record-type '"BUG"))))) g$str*$13478$1IfLeT))))))) (g$get-record-name$12913$1IfLeT (case-lambda ((g$spec$13450$1IfLeT) ((case-lambda ((g$t$13451$1IfLeT) ((case-lambda ((g$ls/false$13452$1IfLeT) (if (if g$ls/false$13452$1IfLeT (begin '#f (apply (case-lambda ((g$foo$13453$1IfLeT g$make-foo$13454$1IfLeT g$foo?$13455$1IfLeT) '#t)) g$ls/false$13452$1IfLeT)) '#f) (apply (case-lambda ((g$foo$13456$1IfLeT g$make-foo$13457$1IfLeT g$foo?$13458$1IfLeT) g$foo$13456$1IfLeT)) g$ls/false$13452$1IfLeT) ((case-lambda ((g$t$13459$1IfLeT) ((case-lambda ((g$ls/false$13460$1IfLeT) (if (if g$ls/false$13460$1IfLeT (begin '#f (apply (case-lambda ((g$foo$13461$1IfLeT) '#t)) g$ls/false$13460$1IfLeT)) '#f) (apply (case-lambda ((g$foo$13462$1IfLeT) g$foo$13462$1IfLeT)) g$ls/false$13460$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13459$1IfLeT)))) ((case-lambda ((g$x$13463$1IfLeT) (list g$x$13463$1IfLeT))) g$t$13459$1IfLeT)))) g$t$13451$1IfLeT)))) ((case-lambda ((g$x$13464$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13464$1IfLeT) (begin '#f ((case-lambda ((g$q$13465$1IfLeT) (if g$q$13465$1IfLeT (begin '#f ((case-lambda ((g$r$13466$1IfLeT) (if g$r$13466$1IfLeT (begin '#f (append g$q$13465$1IfLeT g$r$13466$1IfLeT)) '#f))) ((case-lambda ((g$x$13467$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13467$1IfLeT) (begin '#f ((case-lambda ((g$q$13468$1IfLeT) (if g$q$13468$1IfLeT (begin '#f ((case-lambda ((g$r$13469$1IfLeT) (if g$r$13469$1IfLeT (begin '#f (append g$q$13468$1IfLeT g$r$13469$1IfLeT)) '#f))) ((case-lambda ((g$x$13470$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13470$1IfLeT) (begin '#f ((case-lambda ((g$q$13471$1IfLeT) (if g$q$13471$1IfLeT (begin '#f ((case-lambda ((g$r$13472$1IfLeT) (if g$r$13472$1IfLeT (begin '#f (append g$q$13471$1IfLeT g$r$13472$1IfLeT)) '#f))) ((case-lambda ((g$x$13473$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13473$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13470$1IfLeT)))) '#f))) ((case-lambda ((g$x$13474$1IfLeT) (list g$x$13474$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13470$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13467$1IfLeT)))) '#f))) ((case-lambda ((g$x$13475$1IfLeT) (list g$x$13475$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13467$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13464$1IfLeT)))) '#f))) ((case-lambda ((g$x$13476$1IfLeT) (list g$x$13476$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13464$1IfLeT)))) '#f))) g$t$13451$1IfLeT)))) g$spec$13450$1IfLeT)))) (g$get-record-constructor-name$12914$1IfLeT (case-lambda ((g$spec$13423$1IfLeT) ((case-lambda ((g$t$13424$1IfLeT) ((case-lambda ((g$ls/false$13425$1IfLeT) (if (if g$ls/false$13425$1IfLeT (begin '#f (apply (case-lambda ((g$foo$13426$1IfLeT g$make-foo$13427$1IfLeT g$foo?$13428$1IfLeT) '#t)) g$ls/false$13425$1IfLeT)) '#f) (apply (case-lambda ((g$foo$13429$1IfLeT g$make-foo$13430$1IfLeT g$foo?$13431$1IfLeT) g$make-foo$13430$1IfLeT)) g$ls/false$13425$1IfLeT) ((case-lambda ((g$t$13432$1IfLeT) ((case-lambda ((g$ls/false$13433$1IfLeT) (if (if g$ls/false$13433$1IfLeT (begin '#f (apply (case-lambda ((g$foo$13434$1IfLeT) (g$id?$9838$1IfLeT g$foo$13434$1IfLeT))) g$ls/false$13433$1IfLeT)) '#f) (apply (case-lambda ((g$foo$13435$1IfLeT) (g$id$12912$1IfLeT g$foo$13435$1IfLeT '"make-" (g$stx->datum$9849$1IfLeT g$foo$13435$1IfLeT)))) g$ls/false$13433$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13432$1IfLeT)))) ((case-lambda ((g$x$13436$1IfLeT) (list g$x$13436$1IfLeT))) g$t$13432$1IfLeT)))) g$t$13424$1IfLeT)))) ((case-lambda ((g$x$13437$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13437$1IfLeT) (begin '#f ((case-lambda ((g$q$13438$1IfLeT) (if g$q$13438$1IfLeT (begin '#f ((case-lambda ((g$r$13439$1IfLeT) (if g$r$13439$1IfLeT (begin '#f (append g$q$13438$1IfLeT g$r$13439$1IfLeT)) '#f))) ((case-lambda ((g$x$13440$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13440$1IfLeT) (begin '#f ((case-lambda ((g$q$13441$1IfLeT) (if g$q$13441$1IfLeT (begin '#f ((case-lambda ((g$r$13442$1IfLeT) (if g$r$13442$1IfLeT (begin '#f (append g$q$13441$1IfLeT g$r$13442$1IfLeT)) '#f))) ((case-lambda ((g$x$13443$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13443$1IfLeT) (begin '#f ((case-lambda ((g$q$13444$1IfLeT) (if g$q$13444$1IfLeT (begin '#f ((case-lambda ((g$r$13445$1IfLeT) (if g$r$13445$1IfLeT (begin '#f (append g$q$13444$1IfLeT g$r$13445$1IfLeT)) '#f))) ((case-lambda ((g$x$13446$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13446$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13443$1IfLeT)))) '#f))) ((case-lambda ((g$x$13447$1IfLeT) (list g$x$13447$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13443$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13440$1IfLeT)))) '#f))) ((case-lambda ((g$x$13448$1IfLeT) (list g$x$13448$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13440$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13437$1IfLeT)))) '#f))) ((case-lambda ((g$x$13449$1IfLeT) (list g$x$13449$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13437$1IfLeT)))) '#f))) g$t$13424$1IfLeT)))) g$spec$13423$1IfLeT)))) (g$get-record-predicate-name$12915$1IfLeT (case-lambda ((g$spec$13396$1IfLeT) ((case-lambda ((g$t$13397$1IfLeT) ((case-lambda ((g$ls/false$13398$1IfLeT) (if (if g$ls/false$13398$1IfLeT (begin '#f (apply (case-lambda ((g$foo$13399$1IfLeT g$make-foo$13400$1IfLeT g$foo?$13401$1IfLeT) '#t)) g$ls/false$13398$1IfLeT)) '#f) (apply (case-lambda ((g$foo$13402$1IfLeT g$make-foo$13403$1IfLeT g$foo?$13404$1IfLeT) g$foo?$13404$1IfLeT)) g$ls/false$13398$1IfLeT) ((case-lambda ((g$t$13405$1IfLeT) ((case-lambda ((g$ls/false$13406$1IfLeT) (if (if g$ls/false$13406$1IfLeT (begin '#f (apply (case-lambda ((g$foo$13407$1IfLeT) (g$id?$9838$1IfLeT g$foo$13407$1IfLeT))) g$ls/false$13406$1IfLeT)) '#f) (apply (case-lambda ((g$foo$13408$1IfLeT) (g$id$12912$1IfLeT g$foo$13408$1IfLeT (g$stx->datum$9849$1IfLeT g$foo$13408$1IfLeT) '"?"))) g$ls/false$13406$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13405$1IfLeT)))) ((case-lambda ((g$x$13409$1IfLeT) (list g$x$13409$1IfLeT))) g$t$13405$1IfLeT)))) g$t$13397$1IfLeT)))) ((case-lambda ((g$x$13410$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13410$1IfLeT) (begin '#f ((case-lambda ((g$q$13411$1IfLeT) (if g$q$13411$1IfLeT (begin '#f ((case-lambda ((g$r$13412$1IfLeT) (if g$r$13412$1IfLeT (begin '#f (append g$q$13411$1IfLeT g$r$13412$1IfLeT)) '#f))) ((case-lambda ((g$x$13413$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13413$1IfLeT) (begin '#f ((case-lambda ((g$q$13414$1IfLeT) (if g$q$13414$1IfLeT (begin '#f ((case-lambda ((g$r$13415$1IfLeT) (if g$r$13415$1IfLeT (begin '#f (append g$q$13414$1IfLeT g$r$13415$1IfLeT)) '#f))) ((case-lambda ((g$x$13416$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13416$1IfLeT) (begin '#f ((case-lambda ((g$q$13417$1IfLeT) (if g$q$13417$1IfLeT (begin '#f ((case-lambda ((g$r$13418$1IfLeT) (if g$r$13418$1IfLeT (begin '#f (append g$q$13417$1IfLeT g$r$13418$1IfLeT)) '#f))) ((case-lambda ((g$x$13419$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13419$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13416$1IfLeT)))) '#f))) ((case-lambda ((g$x$13420$1IfLeT) (list g$x$13420$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13416$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13413$1IfLeT)))) '#f))) ((case-lambda ((g$x$13421$1IfLeT) (list g$x$13421$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13413$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13410$1IfLeT)))) '#f))) ((case-lambda ((g$x$13422$1IfLeT) (list g$x$13422$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13410$1IfLeT)))) '#f))) g$t$13397$1IfLeT)))) g$spec$13396$1IfLeT)))) (g$get-clause$12916$1IfLeT (case-lambda ((g$id$13374$1IfLeT g$ls$13375$1IfLeT) ((case-lambda ((g$t$13376$1IfLeT) ((case-lambda ((g$ls/false$13377$1IfLeT) (if (if g$ls/false$13377$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13377$1IfLeT)) '#f) (apply (case-lambda (() '#f)) g$ls/false$13377$1IfLeT) ((case-lambda ((g$t$13378$1IfLeT) ((case-lambda ((g$ls/false$13379$1IfLeT) (if (if g$ls/false$13379$1IfLeT (begin '#f (apply (case-lambda ((g$x$13380$1IfLeT g$rest$13381$1IfLeT g$ls$13382$1IfLeT) '#t)) g$ls/false$13379$1IfLeT)) '#f) (apply (case-lambda ((g$x$13383$1IfLeT g$rest$13384$1IfLeT g$ls$13385$1IfLeT) (if (g$free-id=?$9842$1IfLeT (g$bless$10083$1IfLeT g$id$13374$1IfLeT) g$x$13383$1IfLeT) (cons g$x$13383$1IfLeT g$rest$13384$1IfLeT) (g$get-clause$12916$1IfLeT g$id$13374$1IfLeT g$ls$13385$1IfLeT)))) g$ls/false$13379$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13378$1IfLeT)))) ((case-lambda ((g$x$13386$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13386$1IfLeT) (begin '#f ((case-lambda ((g$q$13387$1IfLeT) (if g$q$13387$1IfLeT (begin '#f ((case-lambda ((g$r$13388$1IfLeT) (if g$r$13388$1IfLeT (begin '#f (append g$q$13387$1IfLeT g$r$13388$1IfLeT)) '#f))) ((case-lambda ((g$x$13389$1IfLeT) (list g$x$13389$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13386$1IfLeT)))) '#f))) ((case-lambda ((g$x$13390$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13390$1IfLeT) (begin '#f ((case-lambda ((g$q$13391$1IfLeT) (if g$q$13391$1IfLeT (begin '#f ((case-lambda ((g$r$13392$1IfLeT) (if g$r$13392$1IfLeT (begin '#f (append g$q$13391$1IfLeT g$r$13392$1IfLeT)) '#f))) ((case-lambda ((g$x$13393$1IfLeT) (list g$x$13393$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13390$1IfLeT)))) '#f))) ((case-lambda ((g$x$13394$1IfLeT) (list g$x$13394$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13390$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$13386$1IfLeT)))) '#f))) g$t$13378$1IfLeT)))) g$t$13376$1IfLeT)))) ((case-lambda ((g$x$13395$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13395$1IfLeT) '()) (begin '#f '()) '#f))) g$t$13376$1IfLeT)))) g$ls$13375$1IfLeT)))) (g$foo-rtd-code$12917$1IfLeT (case-lambda ((g$name$13246$1IfLeT g$clause*$13247$1IfLeT) (letrec* ((g$convert-field-spec*$13248$1IfLeT (case-lambda ((g$ls$13337$1IfLeT) (list->vector (map (case-lambda ((g$x$13338$1IfLeT) ((case-lambda ((g$t$13339$1IfLeT) ((case-lambda ((g$ls/false$13340$1IfLeT) (if (if g$ls/false$13340$1IfLeT (begin '#f (apply (case-lambda ((g$name$13341$1IfLeT g$rest$13342$1IfLeT) '#t)) g$ls/false$13340$1IfLeT)) '#f) (apply (case-lambda ((g$name$13343$1IfLeT g$rest$13344$1IfLeT) (list 'mutable g$name$13343$1IfLeT))) g$ls/false$13340$1IfLeT) ((case-lambda ((g$t$13345$1IfLeT) ((case-lambda ((g$ls/false$13346$1IfLeT) (if (if g$ls/false$13346$1IfLeT (begin '#f (apply (case-lambda ((g$name$13347$1IfLeT g$rest$13348$1IfLeT) '#t)) g$ls/false$13346$1IfLeT)) '#f) (apply (case-lambda ((g$name$13349$1IfLeT g$rest$13350$1IfLeT) (list 'immutable g$name$13349$1IfLeT))) g$ls/false$13346$1IfLeT) ((case-lambda ((g$t$13351$1IfLeT) ((case-lambda ((g$ls/false$13352$1IfLeT) (if (if g$ls/false$13352$1IfLeT (begin '#f (apply (case-lambda ((g$name$13353$1IfLeT) '#t)) g$ls/false$13352$1IfLeT)) '#f) (apply (case-lambda ((g$name$13354$1IfLeT) (list 'immutable g$name$13354$1IfLeT))) g$ls/false$13352$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13351$1IfLeT)))) ((case-lambda ((g$x$13355$1IfLeT) (list g$x$13355$1IfLeT))) g$t$13351$1IfLeT)))) g$t$13345$1IfLeT)))) ((case-lambda ((g$x$13356$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13356$1IfLeT) (begin '#f ((case-lambda ((g$q$13357$1IfLeT) (if g$q$13357$1IfLeT (begin '#f ((case-lambda ((g$r$13358$1IfLeT) (if g$r$13358$1IfLeT (begin '#f (append g$q$13357$1IfLeT g$r$13358$1IfLeT)) '#f))) ((case-lambda ((g$x$13359$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13359$1IfLeT) (begin '#f ((case-lambda ((g$q$13360$1IfLeT) (if g$q$13360$1IfLeT (begin '#f ((case-lambda ((g$r$13361$1IfLeT) (if g$r$13361$1IfLeT (begin '#f (append g$q$13360$1IfLeT g$r$13361$1IfLeT)) '#f))) ((case-lambda ((g$x$13362$1IfLeT) (list g$x$13362$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13359$1IfLeT)))) '#f))) ((case-lambda ((g$x$13363$1IfLeT) (list g$x$13363$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13359$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13356$1IfLeT)))) '#f))) ((case-lambda ((g$x$13364$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13364$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13364$1IfLeT (g$scheme-stx$10063$1IfLeT 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13356$1IfLeT)))) '#f))) g$t$13345$1IfLeT)))) g$t$13339$1IfLeT)))) ((case-lambda ((g$x$13365$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13365$1IfLeT) (begin '#f ((case-lambda ((g$q$13366$1IfLeT) (if g$q$13366$1IfLeT (begin '#f ((case-lambda ((g$r$13367$1IfLeT) (if g$r$13367$1IfLeT (begin '#f (append g$q$13366$1IfLeT g$r$13367$1IfLeT)) '#f))) ((case-lambda ((g$x$13368$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13368$1IfLeT) (begin '#f ((case-lambda ((g$q$13369$1IfLeT) (if g$q$13369$1IfLeT (begin '#f ((case-lambda ((g$r$13370$1IfLeT) (if g$r$13370$1IfLeT (begin '#f (append g$q$13369$1IfLeT g$r$13370$1IfLeT)) '#f))) ((case-lambda ((g$x$13371$1IfLeT) (list g$x$13371$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13368$1IfLeT)))) '#f))) ((case-lambda ((g$x$13372$1IfLeT) (list g$x$13372$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13368$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13365$1IfLeT)))) '#f))) ((case-lambda ((g$x$13373$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13373$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13373$1IfLeT (g$scheme-stx$10063$1IfLeT 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13365$1IfLeT)))) '#f))) g$t$13339$1IfLeT)))) g$x$13338$1IfLeT))) g$ls$13337$1IfLeT)))))) ((case-lambda ((g$parent-rtd-code$13249$1IfLeT g$uid-code$13250$1IfLeT g$sealed?$13251$1IfLeT g$opaque?$13252$1IfLeT g$fields$13253$1IfLeT) (g$bless$10083$1IfLeT (list 'make-record-type-descriptor (list 'quote g$name$13246$1IfLeT) g$parent-rtd-code$13249$1IfLeT g$uid-code$13250$1IfLeT g$sealed?$13251$1IfLeT g$opaque?$13252$1IfLeT g$fields$13253$1IfLeT)))) ((case-lambda ((g$t$13254$1IfLeT) ((case-lambda ((g$ls/false$13255$1IfLeT) (if (if g$ls/false$13255$1IfLeT (begin '#f (apply (case-lambda ((g$name$13256$1IfLeT) '#t)) g$ls/false$13255$1IfLeT)) '#f) (apply (case-lambda ((g$name$13257$1IfLeT) (list 'record-type-descriptor g$name$13257$1IfLeT))) g$ls/false$13255$1IfLeT) ((case-lambda ((g$t$13258$1IfLeT) ((case-lambda ((g$ls/false$13259$1IfLeT) (if (if g$ls/false$13259$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13259$1IfLeT)) '#f) (apply (case-lambda (() '#f)) g$ls/false$13259$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13258$1IfLeT)))) ((case-lambda ((g$x$13260$1IfLeT) '())) g$t$13258$1IfLeT)))) g$t$13254$1IfLeT)))) ((case-lambda ((g$x$13261$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13261$1IfLeT) (begin '#f ((case-lambda ((g$q$13262$1IfLeT) (if g$q$13262$1IfLeT (begin '#f ((case-lambda ((g$r$13263$1IfLeT) (if g$r$13263$1IfLeT (begin '#f (append g$q$13262$1IfLeT g$r$13263$1IfLeT)) '#f))) ((case-lambda ((g$x$13264$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13264$1IfLeT) (begin '#f ((case-lambda ((g$q$13265$1IfLeT) (if g$q$13265$1IfLeT (begin '#f ((case-lambda ((g$r$13266$1IfLeT) (if g$r$13266$1IfLeT (begin '#f (append g$q$13265$1IfLeT g$r$13266$1IfLeT)) '#f))) ((case-lambda ((g$x$13267$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13267$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13264$1IfLeT)))) '#f))) ((case-lambda ((g$x$13268$1IfLeT) (list g$x$13268$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13264$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13261$1IfLeT)))) '#f))) ((case-lambda ((g$x$13269$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13261$1IfLeT)))) '#f))) g$t$13254$1IfLeT)))) (g$get-clause$12916$1IfLeT 'parent g$clause*$13247$1IfLeT)) ((case-lambda ((g$t$13270$1IfLeT) ((case-lambda ((g$ls/false$13271$1IfLeT) (if (if g$ls/false$13271$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13271$1IfLeT)) '#f) (apply (case-lambda (() (list 'quote (gensym)))) g$ls/false$13271$1IfLeT) ((case-lambda ((g$t$13272$1IfLeT) ((case-lambda ((g$ls/false$13273$1IfLeT) (if (if g$ls/false$13273$1IfLeT (begin '#f (apply (case-lambda ((g$uid$13274$1IfLeT) '#t)) g$ls/false$13273$1IfLeT)) '#f) (apply (case-lambda ((g$uid$13275$1IfLeT) (list 'quote g$uid$13275$1IfLeT))) g$ls/false$13273$1IfLeT) ((case-lambda ((g$t$13276$1IfLeT) ((case-lambda ((g$ls/false$13277$1IfLeT) (if (if g$ls/false$13277$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13277$1IfLeT)) '#f) (apply (case-lambda (() '#f)) g$ls/false$13277$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13276$1IfLeT)))) ((case-lambda ((g$x$13278$1IfLeT) '())) g$t$13276$1IfLeT)))) g$t$13272$1IfLeT)))) ((case-lambda ((g$x$13279$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13279$1IfLeT) (begin '#f ((case-lambda ((g$q$13280$1IfLeT) (if g$q$13280$1IfLeT (begin '#f ((case-lambda ((g$r$13281$1IfLeT) (if g$r$13281$1IfLeT (begin '#f (append g$q$13280$1IfLeT g$r$13281$1IfLeT)) '#f))) ((case-lambda ((g$x$13282$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13282$1IfLeT) (begin '#f ((case-lambda ((g$q$13283$1IfLeT) (if g$q$13283$1IfLeT (begin '#f ((case-lambda ((g$r$13284$1IfLeT) (if g$r$13284$1IfLeT (begin '#f (append g$q$13283$1IfLeT g$r$13284$1IfLeT)) '#f))) ((case-lambda ((g$x$13285$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13285$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13282$1IfLeT)))) '#f))) ((case-lambda ((g$x$13286$1IfLeT) (list g$x$13286$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13282$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13279$1IfLeT)))) '#f))) ((case-lambda ((g$x$13287$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13279$1IfLeT)))) '#f))) g$t$13272$1IfLeT)))) g$t$13270$1IfLeT)))) ((case-lambda ((g$x$13288$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13288$1IfLeT) (begin '#f ((case-lambda ((g$q$13289$1IfLeT) (if g$q$13289$1IfLeT (begin '#f ((case-lambda ((g$r$13290$1IfLeT) (if g$r$13290$1IfLeT (begin '#f (append g$q$13289$1IfLeT g$r$13290$1IfLeT)) '#f))) ((case-lambda ((g$x$13291$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13291$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13288$1IfLeT)))) '#f))) ((case-lambda ((g$x$13292$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13288$1IfLeT)))) '#f))) g$t$13270$1IfLeT)))) (g$get-clause$12916$1IfLeT 'nongenerative g$clause*$13247$1IfLeT)) ((case-lambda ((g$t$13293$1IfLeT) ((case-lambda ((g$ls/false$13294$1IfLeT) (if (if g$ls/false$13294$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13294$1IfLeT)) '#f) (apply (case-lambda (() '#t)) g$ls/false$13294$1IfLeT) ((case-lambda ((g$t$13295$1IfLeT) ((case-lambda ((g$ls/false$13296$1IfLeT) (if (if g$ls/false$13296$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13296$1IfLeT)) '#f) (apply (case-lambda (() '#f)) g$ls/false$13296$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13295$1IfLeT)))) ((case-lambda ((g$x$13297$1IfLeT) '())) g$t$13295$1IfLeT)))) g$t$13293$1IfLeT)))) ((case-lambda ((g$x$13298$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13298$1IfLeT) (begin '#f ((case-lambda ((g$q$13299$1IfLeT) (if g$q$13299$1IfLeT (begin '#f ((case-lambda ((g$r$13300$1IfLeT) (if g$r$13300$1IfLeT (begin '#f (append g$q$13299$1IfLeT g$r$13300$1IfLeT)) '#f))) ((case-lambda ((g$x$13301$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13301$1IfLeT) (begin '#f ((case-lambda ((g$q$13302$1IfLeT) (if g$q$13302$1IfLeT (begin '#f ((case-lambda ((g$r$13303$1IfLeT) (if g$r$13303$1IfLeT (begin '#f (append g$q$13302$1IfLeT g$r$13303$1IfLeT)) '#f))) ((case-lambda ((g$x$13304$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13304$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13301$1IfLeT)))) '#f))) ((case-lambda ((g$x$13305$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13305$1IfLeT) '#t) (begin '#f '()) '#f))) (g$syntax-car$9835$1IfLeT g$x$13301$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13298$1IfLeT)))) '#f))) ((case-lambda ((g$x$13306$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13298$1IfLeT)))) '#f))) g$t$13293$1IfLeT)))) (g$get-clause$12916$1IfLeT 'sealed g$clause*$13247$1IfLeT)) ((case-lambda ((g$t$13307$1IfLeT) ((case-lambda ((g$ls/false$13308$1IfLeT) (if (if g$ls/false$13308$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13308$1IfLeT)) '#f) (apply (case-lambda (() '#t)) g$ls/false$13308$1IfLeT) ((case-lambda ((g$t$13309$1IfLeT) ((case-lambda ((g$ls/false$13310$1IfLeT) (if (if g$ls/false$13310$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13310$1IfLeT)) '#f) (apply (case-lambda (() '#f)) g$ls/false$13310$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13309$1IfLeT)))) ((case-lambda ((g$x$13311$1IfLeT) '())) g$t$13309$1IfLeT)))) g$t$13307$1IfLeT)))) ((case-lambda ((g$x$13312$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13312$1IfLeT) (begin '#f ((case-lambda ((g$q$13313$1IfLeT) (if g$q$13313$1IfLeT (begin '#f ((case-lambda ((g$r$13314$1IfLeT) (if g$r$13314$1IfLeT (begin '#f (append g$q$13313$1IfLeT g$r$13314$1IfLeT)) '#f))) ((case-lambda ((g$x$13315$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13315$1IfLeT) (begin '#f ((case-lambda ((g$q$13316$1IfLeT) (if g$q$13316$1IfLeT (begin '#f ((case-lambda ((g$r$13317$1IfLeT) (if g$r$13317$1IfLeT (begin '#f (append g$q$13316$1IfLeT g$r$13317$1IfLeT)) '#f))) ((case-lambda ((g$x$13318$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13318$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13315$1IfLeT)))) '#f))) ((case-lambda ((g$x$13319$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13319$1IfLeT) '#t) (begin '#f '()) '#f))) (g$syntax-car$9835$1IfLeT g$x$13315$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13312$1IfLeT)))) '#f))) ((case-lambda ((g$x$13320$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13312$1IfLeT)))) '#f))) g$t$13307$1IfLeT)))) (g$get-clause$12916$1IfLeT 'opaque g$clause*$13247$1IfLeT)) ((case-lambda ((g$t$13321$1IfLeT) ((case-lambda ((g$ls/false$13322$1IfLeT) (if (if g$ls/false$13322$1IfLeT (begin '#f (apply (case-lambda ((g$field-spec*$13323$1IfLeT) '#t)) g$ls/false$13322$1IfLeT)) '#f) (apply (case-lambda ((g$field-spec*$13324$1IfLeT) (list 'quote (g$convert-field-spec*$13248$1IfLeT g$field-spec*$13324$1IfLeT)))) g$ls/false$13322$1IfLeT) ((case-lambda ((g$t$13325$1IfLeT) ((case-lambda ((g$ls/false$13326$1IfLeT) (if (if g$ls/false$13326$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13326$1IfLeT)) '#f) (apply (case-lambda (() ''#())) g$ls/false$13326$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13325$1IfLeT)))) ((case-lambda ((g$x$13327$1IfLeT) '())) g$t$13325$1IfLeT)))) g$t$13321$1IfLeT)))) ((case-lambda ((g$x$13328$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13328$1IfLeT) (begin '#f ((case-lambda ((g$q$13329$1IfLeT) (if g$q$13329$1IfLeT (begin '#f ((case-lambda ((g$r$13330$1IfLeT) (if g$r$13330$1IfLeT (begin '#f (append g$q$13329$1IfLeT g$r$13330$1IfLeT)) '#f))) ((letrec ((g$f$13331$1IfLeT (case-lambda ((g$x$13332$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13332$1IfLeT) ((case-lambda ((g$cars/f$13333$1IfLeT) (if g$cars/f$13333$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13334$1IfLeT) (if g$cdrs/f$13334$1IfLeT (begin '#f (map cons g$cars/f$13333$1IfLeT g$cdrs/f$13334$1IfLeT)) '#f))) (g$f$13331$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13332$1IfLeT)))) '#f))) ((case-lambda ((g$x$13335$1IfLeT) (list g$x$13335$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13332$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13332$1IfLeT) (list (begin 'field-spec* '())) '#f)))))) g$f$13331$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$13328$1IfLeT)))) '#f))) ((case-lambda ((g$x$13336$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13328$1IfLeT)))) '#f))) g$t$13321$1IfLeT)))) (g$get-clause$12916$1IfLeT 'fields g$clause*$13247$1IfLeT))))))) (g$foo-rcd-code$12918$1IfLeT (case-lambda ((g$clause*$13226$1IfLeT g$foo-rtd$13227$1IfLeT g$protocol$13228$1IfLeT) ((case-lambda ((g$parent-rcd-code$13229$1IfLeT) (list 'make-record-constructor-descriptor g$foo-rtd$13227$1IfLeT g$parent-rcd-code$13229$1IfLeT g$protocol$13228$1IfLeT))) ((case-lambda ((g$t$13230$1IfLeT) ((case-lambda ((g$ls/false$13231$1IfLeT) (if (if g$ls/false$13231$1IfLeT (begin '#f (apply (case-lambda ((g$name$13232$1IfLeT) '#t)) g$ls/false$13231$1IfLeT)) '#f) (apply (case-lambda ((g$name$13233$1IfLeT) (list 'record-constructor-descriptor g$name$13233$1IfLeT))) g$ls/false$13231$1IfLeT) ((case-lambda ((g$t$13234$1IfLeT) ((case-lambda ((g$ls/false$13235$1IfLeT) (if (if g$ls/false$13235$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13235$1IfLeT)) '#f) (apply (case-lambda (() '#f)) g$ls/false$13235$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13234$1IfLeT)))) ((case-lambda ((g$x$13236$1IfLeT) '())) g$t$13234$1IfLeT)))) g$t$13230$1IfLeT)))) ((case-lambda ((g$x$13237$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13237$1IfLeT) (begin '#f ((case-lambda ((g$q$13238$1IfLeT) (if g$q$13238$1IfLeT (begin '#f ((case-lambda ((g$r$13239$1IfLeT) (if g$r$13239$1IfLeT (begin '#f (append g$q$13238$1IfLeT g$r$13239$1IfLeT)) '#f))) ((case-lambda ((g$x$13240$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13240$1IfLeT) (begin '#f ((case-lambda ((g$q$13241$1IfLeT) (if g$q$13241$1IfLeT (begin '#f ((case-lambda ((g$r$13242$1IfLeT) (if g$r$13242$1IfLeT (begin '#f (append g$q$13241$1IfLeT g$r$13242$1IfLeT)) '#f))) ((case-lambda ((g$x$13243$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13243$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13240$1IfLeT)))) '#f))) ((case-lambda ((g$x$13244$1IfLeT) (list g$x$13244$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13240$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13237$1IfLeT)))) '#f))) ((case-lambda ((g$x$13245$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13237$1IfLeT)))) '#f))) g$t$13230$1IfLeT)))) (g$get-clause$12916$1IfLeT 'parent g$clause*$13226$1IfLeT)))))) (g$get-protocol-code$12919$1IfLeT (case-lambda ((g$clause*$13209$1IfLeT) ((case-lambda ((g$t$13210$1IfLeT) ((case-lambda ((g$ls/false$13211$1IfLeT) (if (if g$ls/false$13211$1IfLeT (begin '#f (apply (case-lambda ((g$expr$13212$1IfLeT) '#t)) g$ls/false$13211$1IfLeT)) '#f) (apply (case-lambda ((g$expr$13213$1IfLeT) g$expr$13213$1IfLeT)) g$ls/false$13211$1IfLeT) ((case-lambda ((g$t$13214$1IfLeT) ((case-lambda ((g$ls/false$13215$1IfLeT) (if (if g$ls/false$13215$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13215$1IfLeT)) '#f) (apply (case-lambda (() '#f)) g$ls/false$13215$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13214$1IfLeT)))) ((case-lambda ((g$x$13216$1IfLeT) '())) g$t$13214$1IfLeT)))) g$t$13210$1IfLeT)))) ((case-lambda ((g$x$13217$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13217$1IfLeT) (begin '#f ((case-lambda ((g$q$13218$1IfLeT) (if g$q$13218$1IfLeT (begin '#f ((case-lambda ((g$r$13219$1IfLeT) (if g$r$13219$1IfLeT (begin '#f (append g$q$13218$1IfLeT g$r$13219$1IfLeT)) '#f))) ((case-lambda ((g$x$13220$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13220$1IfLeT) (begin '#f ((case-lambda ((g$q$13221$1IfLeT) (if g$q$13221$1IfLeT (begin '#f ((case-lambda ((g$r$13222$1IfLeT) (if g$r$13222$1IfLeT (begin '#f (append g$q$13221$1IfLeT g$r$13222$1IfLeT)) '#f))) ((case-lambda ((g$x$13223$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13223$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13220$1IfLeT)))) '#f))) ((case-lambda ((g$x$13224$1IfLeT) (list g$x$13224$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13220$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13217$1IfLeT)))) '#f))) ((case-lambda ((g$x$13225$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13217$1IfLeT)))) '#f))) g$t$13210$1IfLeT)))) (g$get-clause$12916$1IfLeT 'protocol g$clause*$13209$1IfLeT))))) (g$get-fields$12920$1IfLeT (case-lambda ((g$clause*$13179$1IfLeT) ((case-lambda ((g$t$13180$1IfLeT) ((case-lambda ((g$ls/false$13181$1IfLeT) (if (if g$ls/false$13181$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13181$1IfLeT)) '#f) (apply (case-lambda (() '())) g$ls/false$13181$1IfLeT) ((case-lambda ((g$t$13182$1IfLeT) ((case-lambda ((g$ls/false$13183$1IfLeT) (if (if g$ls/false$13183$1IfLeT (begin '#f (apply (case-lambda ((g$f*$13184$1IfLeT) '#t)) g$ls/false$13183$1IfLeT)) '#f) (apply (case-lambda ((g$f*$13185$1IfLeT) g$f*$13185$1IfLeT)) g$ls/false$13183$1IfLeT) ((case-lambda ((g$t$13186$1IfLeT) ((case-lambda ((g$ls/false$13187$1IfLeT) (if (if g$ls/false$13187$1IfLeT (begin '#f (apply (case-lambda ((g$rest$13188$1IfLeT) '#t)) g$ls/false$13187$1IfLeT)) '#f) (apply (case-lambda ((g$rest$13189$1IfLeT) (g$get-fields$12920$1IfLeT g$rest$13189$1IfLeT))) g$ls/false$13187$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13186$1IfLeT)))) ((case-lambda ((g$x$13190$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13190$1IfLeT) (begin '#f ((case-lambda ((g$q$13191$1IfLeT) (if g$q$13191$1IfLeT (begin '#f ((case-lambda ((g$r$13192$1IfLeT) (if g$r$13192$1IfLeT (begin '#f (append g$q$13191$1IfLeT g$r$13192$1IfLeT)) '#f))) ((case-lambda ((g$x$13193$1IfLeT) (list g$x$13193$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13190$1IfLeT)))) '#f))) ((case-lambda ((g$x$13194$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13190$1IfLeT)))) '#f))) g$t$13186$1IfLeT)))) g$t$13182$1IfLeT)))) ((case-lambda ((g$x$13195$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13195$1IfLeT) (begin '#f ((case-lambda ((g$q$13196$1IfLeT) (if g$q$13196$1IfLeT (begin '#f ((case-lambda ((g$r$13197$1IfLeT) (if g$r$13197$1IfLeT (begin '#f (append g$q$13196$1IfLeT g$r$13197$1IfLeT)) '#f))) ((case-lambda ((g$x$13198$1IfLeT) '())) (g$syntax-cdr$9836$1IfLeT g$x$13195$1IfLeT)))) '#f))) ((case-lambda ((g$x$13199$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13199$1IfLeT) (begin '#f ((case-lambda ((g$q$13200$1IfLeT) (if g$q$13200$1IfLeT (begin '#f ((case-lambda ((g$r$13201$1IfLeT) (if g$r$13201$1IfLeT (begin '#f (append g$q$13200$1IfLeT g$r$13201$1IfLeT)) '#f))) ((letrec ((g$f$13202$1IfLeT (case-lambda ((g$x$13203$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13203$1IfLeT) ((case-lambda ((g$cars/f$13204$1IfLeT) (if g$cars/f$13204$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13205$1IfLeT) (if g$cdrs/f$13205$1IfLeT (begin '#f (map cons g$cars/f$13204$1IfLeT g$cdrs/f$13205$1IfLeT)) '#f))) (g$f$13202$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13203$1IfLeT)))) '#f))) ((case-lambda ((g$x$13206$1IfLeT) (list g$x$13206$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13203$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13203$1IfLeT) (list (begin 'f* '())) '#f)))))) g$f$13202$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$13199$1IfLeT)))) '#f))) ((case-lambda ((g$x$13207$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13207$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13207$1IfLeT (g$scheme-stx$10063$1IfLeT 'fields)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13199$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$13195$1IfLeT)))) '#f))) g$t$13182$1IfLeT)))) g$t$13180$1IfLeT)))) ((case-lambda ((g$x$13208$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13208$1IfLeT) '()) (begin '#f '()) '#f))) g$t$13180$1IfLeT)))) g$clause*$13179$1IfLeT)))) (g$get-mutator-indices$12921$1IfLeT (case-lambda ((g$fields$13150$1IfLeT) ((letrec ((g$f$13151$1IfLeT (case-lambda ((g$fields$13152$1IfLeT g$i$13153$1IfLeT) ((case-lambda ((g$t$13154$1IfLeT) ((case-lambda ((g$ls/false$13155$1IfLeT) (if (if g$ls/false$13155$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13155$1IfLeT)) '#f) (apply (case-lambda (() '())) g$ls/false$13155$1IfLeT) ((case-lambda ((g$t$13156$1IfLeT) ((case-lambda ((g$ls/false$13157$1IfLeT) (if (if g$ls/false$13157$1IfLeT (begin '#f (apply (case-lambda ((g$rest$13158$1IfLeT) '#t)) g$ls/false$13157$1IfLeT)) '#f) (apply (case-lambda ((g$rest$13159$1IfLeT) (cons g$i$13153$1IfLeT (g$f$13151$1IfLeT g$rest$13159$1IfLeT (+ g$i$13153$1IfLeT '1))))) g$ls/false$13157$1IfLeT) ((case-lambda ((g$t$13160$1IfLeT) ((case-lambda ((g$ls/false$13161$1IfLeT) (if (if g$ls/false$13161$1IfLeT (begin '#f (apply (case-lambda ((g$rest$13162$1IfLeT) '#t)) g$ls/false$13161$1IfLeT)) '#f) (apply (case-lambda ((g$rest$13163$1IfLeT) (g$f$13151$1IfLeT g$rest$13163$1IfLeT (+ g$i$13153$1IfLeT '1)))) g$ls/false$13161$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13160$1IfLeT)))) ((case-lambda ((g$x$13164$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13164$1IfLeT) (begin '#f ((case-lambda ((g$q$13165$1IfLeT) (if g$q$13165$1IfLeT (begin '#f ((case-lambda ((g$r$13166$1IfLeT) (if g$r$13166$1IfLeT (begin '#f (append g$q$13165$1IfLeT g$r$13166$1IfLeT)) '#f))) ((case-lambda ((g$x$13167$1IfLeT) (list g$x$13167$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13164$1IfLeT)))) '#f))) ((case-lambda ((g$x$13168$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13164$1IfLeT)))) '#f))) g$t$13160$1IfLeT)))) g$t$13156$1IfLeT)))) ((case-lambda ((g$x$13169$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13169$1IfLeT) (begin '#f ((case-lambda ((g$q$13170$1IfLeT) (if g$q$13170$1IfLeT (begin '#f ((case-lambda ((g$r$13171$1IfLeT) (if g$r$13171$1IfLeT (begin '#f (append g$q$13170$1IfLeT g$r$13171$1IfLeT)) '#f))) ((case-lambda ((g$x$13172$1IfLeT) (list g$x$13172$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13169$1IfLeT)))) '#f))) ((case-lambda ((g$x$13173$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13173$1IfLeT) (begin '#f ((case-lambda ((g$q$13174$1IfLeT) (if g$q$13174$1IfLeT (begin '#f ((case-lambda ((g$r$13175$1IfLeT) (if g$r$13175$1IfLeT (begin '#f (append g$q$13174$1IfLeT g$r$13175$1IfLeT)) '#f))) ((case-lambda ((g$x$13176$1IfLeT) '())) (g$syntax-cdr$9836$1IfLeT g$x$13173$1IfLeT)))) '#f))) ((case-lambda ((g$x$13177$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13177$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13177$1IfLeT (g$scheme-stx$10063$1IfLeT 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13173$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$13169$1IfLeT)))) '#f))) g$t$13156$1IfLeT)))) g$t$13154$1IfLeT)))) ((case-lambda ((g$x$13178$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13178$1IfLeT) '()) (begin '#f '()) '#f))) g$t$13154$1IfLeT)))) g$fields$13152$1IfLeT))))) g$f$13151$1IfLeT) g$fields$13150$1IfLeT '0)))) (g$get-mutators$12922$1IfLeT (case-lambda ((g$foo$13082$1IfLeT g$fields$13083$1IfLeT) (letrec* ((g$gen-name$13084$1IfLeT (case-lambda ((g$x$13149$1IfLeT) (g$datum->syntax$10223$1IfLeT g$foo$13082$1IfLeT (string->symbol (string-append (symbol->string (g$syntax->datum$10224$1IfLeT g$foo$13082$1IfLeT)) '"-" (symbol->string (g$syntax->datum$10224$1IfLeT g$x$13149$1IfLeT)) '"-set!"))))))) ((letrec ((g$f$13085$1IfLeT (case-lambda ((g$fields$13086$1IfLeT) ((case-lambda ((g$t$13087$1IfLeT) ((case-lambda ((g$ls/false$13088$1IfLeT) (if (if g$ls/false$13088$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13088$1IfLeT)) '#f) (apply (case-lambda (() '())) g$ls/false$13088$1IfLeT) ((case-lambda ((g$t$13089$1IfLeT) ((case-lambda ((g$ls/false$13090$1IfLeT) (if (if g$ls/false$13090$1IfLeT (begin '#f (apply (case-lambda ((g$name$13091$1IfLeT g$accessor$13092$1IfLeT g$mutator$13093$1IfLeT g$rest$13094$1IfLeT) '#t)) g$ls/false$13090$1IfLeT)) '#f) (apply (case-lambda ((g$name$13095$1IfLeT g$accessor$13096$1IfLeT g$mutator$13097$1IfLeT g$rest$13098$1IfLeT) (cons g$mutator$13097$1IfLeT (g$f$13085$1IfLeT g$rest$13098$1IfLeT)))) g$ls/false$13090$1IfLeT) ((case-lambda ((g$t$13099$1IfLeT) ((case-lambda ((g$ls/false$13100$1IfLeT) (if (if g$ls/false$13100$1IfLeT (begin '#f (apply (case-lambda ((g$name$13101$1IfLeT g$rest$13102$1IfLeT) '#t)) g$ls/false$13100$1IfLeT)) '#f) (apply (case-lambda ((g$name$13103$1IfLeT g$rest$13104$1IfLeT) (cons (g$gen-name$13084$1IfLeT g$name$13103$1IfLeT) (g$f$13085$1IfLeT g$rest$13104$1IfLeT)))) g$ls/false$13100$1IfLeT) ((case-lambda ((g$t$13105$1IfLeT) ((case-lambda ((g$ls/false$13106$1IfLeT) (if (if g$ls/false$13106$1IfLeT (begin '#f (apply (case-lambda ((g$rest$13107$1IfLeT) '#t)) g$ls/false$13106$1IfLeT)) '#f) (apply (case-lambda ((g$rest$13108$1IfLeT) (g$f$13085$1IfLeT g$rest$13108$1IfLeT))) g$ls/false$13106$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13105$1IfLeT)))) ((case-lambda ((g$x$13109$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13109$1IfLeT) (begin '#f ((case-lambda ((g$q$13110$1IfLeT) (if g$q$13110$1IfLeT (begin '#f ((case-lambda ((g$r$13111$1IfLeT) (if g$r$13111$1IfLeT (begin '#f (append g$q$13110$1IfLeT g$r$13111$1IfLeT)) '#f))) ((case-lambda ((g$x$13112$1IfLeT) (list g$x$13112$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13109$1IfLeT)))) '#f))) ((case-lambda ((g$x$13113$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13109$1IfLeT)))) '#f))) g$t$13105$1IfLeT)))) g$t$13099$1IfLeT)))) ((case-lambda ((g$x$13114$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13114$1IfLeT) (begin '#f ((case-lambda ((g$q$13115$1IfLeT) (if g$q$13115$1IfLeT (begin '#f ((case-lambda ((g$r$13116$1IfLeT) (if g$r$13116$1IfLeT (begin '#f (append g$q$13115$1IfLeT g$r$13116$1IfLeT)) '#f))) ((case-lambda ((g$x$13117$1IfLeT) (list g$x$13117$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13114$1IfLeT)))) '#f))) ((case-lambda ((g$x$13118$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13118$1IfLeT) (begin '#f ((case-lambda ((g$q$13119$1IfLeT) (if g$q$13119$1IfLeT (begin '#f ((case-lambda ((g$r$13120$1IfLeT) (if g$r$13120$1IfLeT (begin '#f (append g$q$13119$1IfLeT g$r$13120$1IfLeT)) '#f))) ((case-lambda ((g$x$13121$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13121$1IfLeT) (begin '#f ((case-lambda ((g$q$13122$1IfLeT) (if g$q$13122$1IfLeT (begin '#f ((case-lambda ((g$r$13123$1IfLeT) (if g$r$13123$1IfLeT (begin '#f (append g$q$13122$1IfLeT g$r$13123$1IfLeT)) '#f))) ((case-lambda ((g$x$13124$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13124$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13121$1IfLeT)))) '#f))) ((case-lambda ((g$x$13125$1IfLeT) (list g$x$13125$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13121$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13118$1IfLeT)))) '#f))) ((case-lambda ((g$x$13126$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13126$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13126$1IfLeT (g$scheme-stx$10063$1IfLeT 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13118$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$13114$1IfLeT)))) '#f))) g$t$13099$1IfLeT)))) g$t$13089$1IfLeT)))) ((case-lambda ((g$x$13127$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13127$1IfLeT) (begin '#f ((case-lambda ((g$q$13128$1IfLeT) (if g$q$13128$1IfLeT (begin '#f ((case-lambda ((g$r$13129$1IfLeT) (if g$r$13129$1IfLeT (begin '#f (append g$q$13128$1IfLeT g$r$13129$1IfLeT)) '#f))) ((case-lambda ((g$x$13130$1IfLeT) (list g$x$13130$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13127$1IfLeT)))) '#f))) ((case-lambda ((g$x$13131$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13131$1IfLeT) (begin '#f ((case-lambda ((g$q$13132$1IfLeT) (if g$q$13132$1IfLeT (begin '#f ((case-lambda ((g$r$13133$1IfLeT) (if g$r$13133$1IfLeT (begin '#f (append g$q$13132$1IfLeT g$r$13133$1IfLeT)) '#f))) ((case-lambda ((g$x$13134$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13134$1IfLeT) (begin '#f ((case-lambda ((g$q$13135$1IfLeT) (if g$q$13135$1IfLeT (begin '#f ((case-lambda ((g$r$13136$1IfLeT) (if g$r$13136$1IfLeT (begin '#f (append g$q$13135$1IfLeT g$r$13136$1IfLeT)) '#f))) ((case-lambda ((g$x$13137$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13137$1IfLeT) (begin '#f ((case-lambda ((g$q$13138$1IfLeT) (if g$q$13138$1IfLeT (begin '#f ((case-lambda ((g$r$13139$1IfLeT) (if g$r$13139$1IfLeT (begin '#f (append g$q$13138$1IfLeT g$r$13139$1IfLeT)) '#f))) ((case-lambda ((g$x$13140$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13140$1IfLeT) (begin '#f ((case-lambda ((g$q$13141$1IfLeT) (if g$q$13141$1IfLeT (begin '#f ((case-lambda ((g$r$13142$1IfLeT) (if g$r$13142$1IfLeT (begin '#f (append g$q$13141$1IfLeT g$r$13142$1IfLeT)) '#f))) ((case-lambda ((g$x$13143$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13143$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13140$1IfLeT)))) '#f))) ((case-lambda ((g$x$13144$1IfLeT) (list g$x$13144$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13140$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13137$1IfLeT)))) '#f))) ((case-lambda ((g$x$13145$1IfLeT) (list g$x$13145$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13137$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13134$1IfLeT)))) '#f))) ((case-lambda ((g$x$13146$1IfLeT) (list g$x$13146$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13134$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13131$1IfLeT)))) '#f))) ((case-lambda ((g$x$13147$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13147$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13147$1IfLeT (g$scheme-stx$10063$1IfLeT 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13131$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$13127$1IfLeT)))) '#f))) g$t$13089$1IfLeT)))) g$t$13087$1IfLeT)))) ((case-lambda ((g$x$13148$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13148$1IfLeT) '()) (begin '#f '()) '#f))) g$t$13087$1IfLeT)))) g$fields$13086$1IfLeT))))) g$f$13085$1IfLeT) g$fields$13083$1IfLeT))))) (g$get-accessors$12923$1IfLeT (case-lambda ((g$foo$12997$1IfLeT g$fields$12998$1IfLeT) (letrec* ((g$gen-name$12999$1IfLeT (case-lambda ((g$x$13081$1IfLeT) (g$datum->syntax$10223$1IfLeT g$foo$12997$1IfLeT (string->symbol (string-append (symbol->string (g$syntax->datum$10224$1IfLeT g$foo$12997$1IfLeT)) '"-" (symbol->string (g$syntax->datum$10224$1IfLeT g$x$13081$1IfLeT))))))))) (map (case-lambda ((g$field$13000$1IfLeT) ((case-lambda ((g$t$13001$1IfLeT) ((case-lambda ((g$ls/false$13002$1IfLeT) (if (if g$ls/false$13002$1IfLeT (begin '#f (apply (case-lambda ((g$name$13003$1IfLeT g$accessor$13004$1IfLeT g$mutator$13005$1IfLeT) (g$id?$9838$1IfLeT g$accessor$13004$1IfLeT))) g$ls/false$13002$1IfLeT)) '#f) (apply (case-lambda ((g$name$13006$1IfLeT g$accessor$13007$1IfLeT g$mutator$13008$1IfLeT) g$accessor$13007$1IfLeT)) g$ls/false$13002$1IfLeT) ((case-lambda ((g$t$13009$1IfLeT) ((case-lambda ((g$ls/false$13010$1IfLeT) (if (if g$ls/false$13010$1IfLeT (begin '#f (apply (case-lambda ((g$name$13011$1IfLeT g$accessor$13012$1IfLeT) (g$id?$9838$1IfLeT g$accessor$13012$1IfLeT))) g$ls/false$13010$1IfLeT)) '#f) (apply (case-lambda ((g$name$13013$1IfLeT g$accessor$13014$1IfLeT) g$accessor$13014$1IfLeT)) g$ls/false$13010$1IfLeT) ((case-lambda ((g$t$13015$1IfLeT) ((case-lambda ((g$ls/false$13016$1IfLeT) (if (if g$ls/false$13016$1IfLeT (begin '#f (apply (case-lambda ((g$name$13017$1IfLeT) (g$id?$9838$1IfLeT g$name$13017$1IfLeT))) g$ls/false$13016$1IfLeT)) '#f) (apply (case-lambda ((g$name$13018$1IfLeT) (g$gen-name$12999$1IfLeT g$name$13018$1IfLeT))) g$ls/false$13016$1IfLeT) ((case-lambda ((g$t$13019$1IfLeT) ((case-lambda ((g$ls/false$13020$1IfLeT) (if (if g$ls/false$13020$1IfLeT (begin '#f (apply (case-lambda ((g$name$13021$1IfLeT) (g$id?$9838$1IfLeT g$name$13021$1IfLeT))) g$ls/false$13020$1IfLeT)) '#f) (apply (case-lambda ((g$name$13022$1IfLeT) (g$gen-name$12999$1IfLeT g$name$13022$1IfLeT))) g$ls/false$13020$1IfLeT) ((case-lambda ((g$t$13023$1IfLeT) ((case-lambda ((g$ls/false$13024$1IfLeT) (if (if g$ls/false$13024$1IfLeT (begin '#f (apply (case-lambda ((g$name$13025$1IfLeT) (g$id?$9838$1IfLeT g$name$13025$1IfLeT))) g$ls/false$13024$1IfLeT)) '#f) (apply (case-lambda ((g$name$13026$1IfLeT) (g$gen-name$12999$1IfLeT g$name$13026$1IfLeT))) g$ls/false$13024$1IfLeT) ((case-lambda ((g$t$13027$1IfLeT) ((case-lambda ((g$ls/false$13028$1IfLeT) (if (if g$ls/false$13028$1IfLeT (begin '#f (apply (case-lambda ((g$others$13029$1IfLeT) '#t)) g$ls/false$13028$1IfLeT)) '#f) (apply (case-lambda ((g$others$13030$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid field spec" g$field$13000$1IfLeT))) g$ls/false$13028$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13027$1IfLeT)))) ((case-lambda ((g$x$13031$1IfLeT) (list g$x$13031$1IfLeT))) g$t$13027$1IfLeT)))) g$t$13023$1IfLeT)))) ((case-lambda ((g$x$13032$1IfLeT) (list g$x$13032$1IfLeT))) g$t$13023$1IfLeT)))) g$t$13019$1IfLeT)))) ((case-lambda ((g$x$13033$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13033$1IfLeT) (begin '#f ((case-lambda ((g$q$13034$1IfLeT) (if g$q$13034$1IfLeT (begin '#f ((case-lambda ((g$r$13035$1IfLeT) (if g$r$13035$1IfLeT (begin '#f (append g$q$13034$1IfLeT g$r$13035$1IfLeT)) '#f))) ((case-lambda ((g$x$13036$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13036$1IfLeT) (begin '#f ((case-lambda ((g$q$13037$1IfLeT) (if g$q$13037$1IfLeT (begin '#f ((case-lambda ((g$r$13038$1IfLeT) (if g$r$13038$1IfLeT (begin '#f (append g$q$13037$1IfLeT g$r$13038$1IfLeT)) '#f))) ((case-lambda ((g$x$13039$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13039$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13036$1IfLeT)))) '#f))) ((case-lambda ((g$x$13040$1IfLeT) (list g$x$13040$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13036$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13033$1IfLeT)))) '#f))) ((case-lambda ((g$x$13041$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13041$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13041$1IfLeT (g$scheme-stx$10063$1IfLeT 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13033$1IfLeT)))) '#f))) g$t$13019$1IfLeT)))) g$t$13015$1IfLeT)))) ((case-lambda ((g$x$13042$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13042$1IfLeT) (begin '#f ((case-lambda ((g$q$13043$1IfLeT) (if g$q$13043$1IfLeT (begin '#f ((case-lambda ((g$r$13044$1IfLeT) (if g$r$13044$1IfLeT (begin '#f (append g$q$13043$1IfLeT g$r$13044$1IfLeT)) '#f))) ((case-lambda ((g$x$13045$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13045$1IfLeT) (begin '#f ((case-lambda ((g$q$13046$1IfLeT) (if g$q$13046$1IfLeT (begin '#f ((case-lambda ((g$r$13047$1IfLeT) (if g$r$13047$1IfLeT (begin '#f (append g$q$13046$1IfLeT g$r$13047$1IfLeT)) '#f))) ((case-lambda ((g$x$13048$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13048$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13045$1IfLeT)))) '#f))) ((case-lambda ((g$x$13049$1IfLeT) (list g$x$13049$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13045$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13042$1IfLeT)))) '#f))) ((case-lambda ((g$x$13050$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13050$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13050$1IfLeT (g$scheme-stx$10063$1IfLeT 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13042$1IfLeT)))) '#f))) g$t$13015$1IfLeT)))) g$t$13009$1IfLeT)))) ((case-lambda ((g$x$13051$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13051$1IfLeT) (begin '#f ((case-lambda ((g$q$13052$1IfLeT) (if g$q$13052$1IfLeT (begin '#f ((case-lambda ((g$r$13053$1IfLeT) (if g$r$13053$1IfLeT (begin '#f (append g$q$13052$1IfLeT g$r$13053$1IfLeT)) '#f))) ((case-lambda ((g$x$13054$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13054$1IfLeT) (begin '#f ((case-lambda ((g$q$13055$1IfLeT) (if g$q$13055$1IfLeT (begin '#f ((case-lambda ((g$r$13056$1IfLeT) (if g$r$13056$1IfLeT (begin '#f (append g$q$13055$1IfLeT g$r$13056$1IfLeT)) '#f))) ((case-lambda ((g$x$13057$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13057$1IfLeT) (begin '#f ((case-lambda ((g$q$13058$1IfLeT) (if g$q$13058$1IfLeT (begin '#f ((case-lambda ((g$r$13059$1IfLeT) (if g$r$13059$1IfLeT (begin '#f (append g$q$13058$1IfLeT g$r$13059$1IfLeT)) '#f))) ((case-lambda ((g$x$13060$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13060$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13057$1IfLeT)))) '#f))) ((case-lambda ((g$x$13061$1IfLeT) (list g$x$13061$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13057$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13054$1IfLeT)))) '#f))) ((case-lambda ((g$x$13062$1IfLeT) (list g$x$13062$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13054$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13051$1IfLeT)))) '#f))) ((case-lambda ((g$x$13063$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13063$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13063$1IfLeT (g$scheme-stx$10063$1IfLeT 'immutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13051$1IfLeT)))) '#f))) g$t$13009$1IfLeT)))) g$t$13001$1IfLeT)))) ((case-lambda ((g$x$13064$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13064$1IfLeT) (begin '#f ((case-lambda ((g$q$13065$1IfLeT) (if g$q$13065$1IfLeT (begin '#f ((case-lambda ((g$r$13066$1IfLeT) (if g$r$13066$1IfLeT (begin '#f (append g$q$13065$1IfLeT g$r$13066$1IfLeT)) '#f))) ((case-lambda ((g$x$13067$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13067$1IfLeT) (begin '#f ((case-lambda ((g$q$13068$1IfLeT) (if g$q$13068$1IfLeT (begin '#f ((case-lambda ((g$r$13069$1IfLeT) (if g$r$13069$1IfLeT (begin '#f (append g$q$13068$1IfLeT g$r$13069$1IfLeT)) '#f))) ((case-lambda ((g$x$13070$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13070$1IfLeT) (begin '#f ((case-lambda ((g$q$13071$1IfLeT) (if g$q$13071$1IfLeT (begin '#f ((case-lambda ((g$r$13072$1IfLeT) (if g$r$13072$1IfLeT (begin '#f (append g$q$13071$1IfLeT g$r$13072$1IfLeT)) '#f))) ((case-lambda ((g$x$13073$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13073$1IfLeT) (begin '#f ((case-lambda ((g$q$13074$1IfLeT) (if g$q$13074$1IfLeT (begin '#f ((case-lambda ((g$r$13075$1IfLeT) (if g$r$13075$1IfLeT (begin '#f (append g$q$13074$1IfLeT g$r$13075$1IfLeT)) '#f))) ((case-lambda ((g$x$13076$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13076$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13073$1IfLeT)))) '#f))) ((case-lambda ((g$x$13077$1IfLeT) (list g$x$13077$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13073$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13070$1IfLeT)))) '#f))) ((case-lambda ((g$x$13078$1IfLeT) (list g$x$13078$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13070$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13067$1IfLeT)))) '#f))) ((case-lambda ((g$x$13079$1IfLeT) (list g$x$13079$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13067$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13064$1IfLeT)))) '#f))) ((case-lambda ((g$x$13080$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13080$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$x$13080$1IfLeT (g$scheme-stx$10063$1IfLeT 'mutable)) (begin '#f '()) '#f) '#f))) (g$syntax-car$9835$1IfLeT g$x$13064$1IfLeT)))) '#f))) g$t$13001$1IfLeT)))) g$field$13000$1IfLeT))) g$fields$12998$1IfLeT))))) (g$enumerate$12924$1IfLeT (case-lambda ((g$ls$12993$1IfLeT) ((letrec ((g$f$12994$1IfLeT (case-lambda ((g$ls$12995$1IfLeT g$i$12996$1IfLeT) (if (null? g$ls$12995$1IfLeT) '() (cons g$i$12996$1IfLeT (g$f$12994$1IfLeT (cdr g$ls$12995$1IfLeT) (+ g$i$12996$1IfLeT '1)))))))) g$f$12994$1IfLeT) g$ls$12993$1IfLeT '0)))) (g$do-define-record$12925$1IfLeT (case-lambda ((g$namespec$12973$1IfLeT g$clause*$12974$1IfLeT) ((case-lambda ((g$foo$12975$1IfLeT) ((case-lambda ((g$foo-rtd$12976$1IfLeT) ((case-lambda ((g$foo-rcd$12977$1IfLeT) ((case-lambda ((g$protocol$12978$1IfLeT) ((case-lambda ((g$make-foo$12979$1IfLeT) ((case-lambda ((g$fields$12980$1IfLeT) ((case-lambda ((g$idx*$12981$1IfLeT) ((case-lambda ((g$foo-x*$12982$1IfLeT) ((case-lambda ((g$set-foo-x!*$12983$1IfLeT) ((case-lambda ((g$set-foo-idx*$12984$1IfLeT) ((case-lambda ((g$foo?$12985$1IfLeT) ((case-lambda ((g$foo-rtd-code$12986$1IfLeT) ((case-lambda ((g$foo-rcd-code$12987$1IfLeT) ((case-lambda ((g$protocol-code$12988$1IfLeT) ((case-lambda (() (g$bless$10083$1IfLeT (cons 'begin (cons (list 'define g$foo-rtd$12976$1IfLeT g$foo-rtd-code$12986$1IfLeT) (cons (list 'define g$protocol$12978$1IfLeT g$protocol-code$12988$1IfLeT) (cons (list 'define g$foo-rcd$12977$1IfLeT g$foo-rcd-code$12987$1IfLeT) (cons (list 'define-syntax g$foo$12975$1IfLeT (list 'list ''$rtd (list 'syntax g$foo-rtd$12976$1IfLeT) (list 'syntax g$foo-rcd$12977$1IfLeT))) (cons (list 'define g$foo?$12985$1IfLeT (list 'record-predicate g$foo-rtd$12976$1IfLeT)) (cons (list 'define g$make-foo$12979$1IfLeT (list 'record-constructor g$foo-rcd$12977$1IfLeT)) (append (map (case-lambda ((g$foo-x$12989$1IfLeT g$idx$12990$1IfLeT) (list 'define g$foo-x$12989$1IfLeT (list 'record-accessor g$foo-rtd$12976$1IfLeT g$idx$12990$1IfLeT)))) g$foo-x*$12982$1IfLeT g$idx*$12981$1IfLeT) (map (case-lambda ((g$set-foo-x!$12991$1IfLeT g$idx$12992$1IfLeT) (list 'define g$set-foo-x!$12991$1IfLeT (list 'record-mutator g$foo-rtd$12976$1IfLeT g$idx$12992$1IfLeT)))) g$set-foo-x!*$12983$1IfLeT g$set-foo-idx*$12984$1IfLeT))))))))))))))) (g$get-protocol-code$12919$1IfLeT g$clause*$12974$1IfLeT)))) (g$foo-rcd-code$12918$1IfLeT g$clause*$12974$1IfLeT g$foo-rtd$12976$1IfLeT g$protocol$12978$1IfLeT)))) (g$foo-rtd-code$12917$1IfLeT g$foo$12975$1IfLeT g$clause*$12974$1IfLeT)))) (g$get-record-predicate-name$12915$1IfLeT g$namespec$12973$1IfLeT)))) (g$get-mutator-indices$12921$1IfLeT g$fields$12980$1IfLeT)))) (g$get-mutators$12922$1IfLeT g$foo$12975$1IfLeT g$fields$12980$1IfLeT)))) (g$get-accessors$12923$1IfLeT g$foo$12975$1IfLeT g$fields$12980$1IfLeT)))) (g$enumerate$12924$1IfLeT g$fields$12980$1IfLeT)))) (g$get-fields$12920$1IfLeT g$clause*$12974$1IfLeT)))) (g$get-record-constructor-name$12914$1IfLeT g$namespec$12973$1IfLeT)))) (gensym)))) (gensym)))) (gensym)))) (g$get-record-name$12913$1IfLeT g$namespec$12973$1IfLeT))))) (g$verify-clauses$12926$1IfLeT (case-lambda ((g$x$12946$1IfLeT g$cls*$12947$1IfLeT) (letrec* ((g$valid-kwds$12948$1IfLeT (map g$bless$10083$1IfLeT '(fields parent parent-rtd protocol sealed opaque nongenerative))) (g$free-id-member?$12949$1IfLeT (case-lambda ((g$x$12970$1IfLeT g$ls$12971$1IfLeT) (if (pair? g$ls$12971$1IfLeT) (begin '#f ((case-lambda ((g$t$12972$1IfLeT) (if g$t$12972$1IfLeT g$t$12972$1IfLeT (begin '#f (g$free-id-member?$12949$1IfLeT g$x$12970$1IfLeT (cdr g$ls$12971$1IfLeT)))))) (g$free-id=?$9842$1IfLeT g$x$12970$1IfLeT (car g$ls$12971$1IfLeT)))) '#f))))) ((letrec ((g$f$12950$1IfLeT (case-lambda ((g$cls*$12951$1IfLeT g$seen*$12952$1IfLeT) (if (null? g$cls*$12951$1IfLeT) (void) ((case-lambda ((g$t$12953$1IfLeT) ((case-lambda ((g$ls/false$12954$1IfLeT) (if (if g$ls/false$12954$1IfLeT (begin '#f (apply (case-lambda ((g$kwd$12955$1IfLeT g$rest$12956$1IfLeT) '#t)) g$ls/false$12954$1IfLeT)) '#f) (apply (case-lambda ((g$kwd$12957$1IfLeT g$rest$12958$1IfLeT) (if ((case-lambda ((g$t$12959$1IfLeT) (if g$t$12959$1IfLeT g$t$12959$1IfLeT (begin '#f (not (g$free-id-member?$12949$1IfLeT g$kwd$12957$1IfLeT g$valid-kwds$12948$1IfLeT)))))) (not (g$id?$9838$1IfLeT g$kwd$12957$1IfLeT))) (g$syntax-violation$10221$1IfLeT '#f '"not a valid define-record-type keyword" g$kwd$12957$1IfLeT) (if (g$bound-id-member?$9845$1IfLeT g$kwd$12957$1IfLeT g$seen*$12952$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"duplicate use of keyword " g$x$12946$1IfLeT g$kwd$12957$1IfLeT) (g$f$12950$1IfLeT (cdr g$cls*$12951$1IfLeT) (cons g$kwd$12957$1IfLeT g$seen*$12952$1IfLeT)))))) g$ls/false$12954$1IfLeT) ((case-lambda ((g$t$12960$1IfLeT) ((case-lambda ((g$ls/false$12961$1IfLeT) (if (if g$ls/false$12961$1IfLeT (begin '#f (apply (case-lambda ((g$cls$12962$1IfLeT) '#t)) g$ls/false$12961$1IfLeT)) '#f) (apply (case-lambda ((g$cls$12963$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"malformed define-record-type clause" g$cls$12963$1IfLeT))) g$ls/false$12961$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12960$1IfLeT)))) ((case-lambda ((g$x$12964$1IfLeT) (list g$x$12964$1IfLeT))) g$t$12960$1IfLeT)))) g$t$12953$1IfLeT)))) ((case-lambda ((g$x$12965$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12965$1IfLeT) (begin '#f ((case-lambda ((g$q$12966$1IfLeT) (if g$q$12966$1IfLeT (begin '#f ((case-lambda ((g$r$12967$1IfLeT) (if g$r$12967$1IfLeT (begin '#f (append g$q$12966$1IfLeT g$r$12967$1IfLeT)) '#f))) ((case-lambda ((g$x$12968$1IfLeT) (list g$x$12968$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$12965$1IfLeT)))) '#f))) ((case-lambda ((g$x$12969$1IfLeT) (list g$x$12969$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12965$1IfLeT)))) '#f))) g$t$12953$1IfLeT)))) (car g$cls*$12951$1IfLeT))))))) g$f$12950$1IfLeT) g$cls*$12947$1IfLeT '())))))) ((case-lambda ((g$t$12927$1IfLeT) ((case-lambda ((g$ls/false$12928$1IfLeT) (if (if g$ls/false$12928$1IfLeT (begin '#f (apply (case-lambda ((g$namespec$12929$1IfLeT g$clause*$12930$1IfLeT) '#t)) g$ls/false$12928$1IfLeT)) '#f) (apply (case-lambda ((g$namespec$12931$1IfLeT g$clause*$12932$1IfLeT) (begin (g$verify-clauses$12926$1IfLeT g$x$12911$1IfLeT g$clause*$12932$1IfLeT) (g$do-define-record$12925$1IfLeT g$namespec$12931$1IfLeT g$clause*$12932$1IfLeT)))) g$ls/false$12928$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$12927$1IfLeT)))) ((case-lambda ((g$x$12933$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12933$1IfLeT) (begin '#f ((case-lambda ((g$q$12934$1IfLeT) (if g$q$12934$1IfLeT (begin '#f ((case-lambda ((g$r$12935$1IfLeT) (if g$r$12935$1IfLeT (begin '#f (append g$q$12934$1IfLeT g$r$12935$1IfLeT)) '#f))) ((case-lambda ((g$x$12936$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12936$1IfLeT) (begin '#f ((case-lambda ((g$q$12937$1IfLeT) (if g$q$12937$1IfLeT (begin '#f ((case-lambda ((g$r$12938$1IfLeT) (if g$r$12938$1IfLeT (begin '#f (append g$q$12937$1IfLeT g$r$12938$1IfLeT)) '#f))) ((letrec ((g$f$12939$1IfLeT (case-lambda ((g$x$12940$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$12940$1IfLeT) ((case-lambda ((g$cars/f$12941$1IfLeT) (if g$cars/f$12941$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$12942$1IfLeT) (if g$cdrs/f$12942$1IfLeT (begin '#f (map cons g$cars/f$12941$1IfLeT g$cdrs/f$12942$1IfLeT)) '#f))) (g$f$12939$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$12940$1IfLeT)))) '#f))) ((case-lambda ((g$x$12943$1IfLeT) (list g$x$12943$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12940$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$12940$1IfLeT) (list (begin 'clause* '())) '#f)))))) g$f$12939$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$12936$1IfLeT)))) '#f))) ((case-lambda ((g$x$12944$1IfLeT) (list g$x$12944$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$12936$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$12933$1IfLeT)))) '#f))) ((case-lambda ((g$x$12945$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$12933$1IfLeT)))) '#f))) g$t$12927$1IfLeT)))) g$x$12911$1IfLeT))))) (g$define-condition-type-macro$10112$1IfLeT g$define-condition-type-macro$16217$1IfLeT (case-lambda ((g$x$13480$1IfLeT) (letrec* ((g$mkname$13481$1IfLeT (case-lambda ((g$name$13537$1IfLeT g$suffix$13538$1IfLeT) (g$datum->syntax$10223$1IfLeT g$name$13537$1IfLeT (string->symbol (string-append (symbol->string (g$syntax->datum$10224$1IfLeT g$name$13537$1IfLeT)) g$suffix$13538$1IfLeT))))))) ((case-lambda ((g$t$13482$1IfLeT) ((case-lambda ((g$ls/false$13483$1IfLeT) (if (if g$ls/false$13483$1IfLeT (begin '#f (apply (case-lambda ((g$ctxt$13484$1IfLeT g$name$13485$1IfLeT g$super$13486$1IfLeT g$constructor$13487$1IfLeT g$predicate$13488$1IfLeT g$field*$13489$1IfLeT g$accessor*$13490$1IfLeT) (if (g$id?$9838$1IfLeT g$name$13485$1IfLeT) (if (g$id?$9838$1IfLeT g$super$13486$1IfLeT) (if (g$id?$9838$1IfLeT g$constructor$13487$1IfLeT) (if (g$id?$9838$1IfLeT g$predicate$13488$1IfLeT) (if (g$for-all$8490$1IfLeT g$id?$9838$1IfLeT g$field*$13489$1IfLeT) (begin '#f (g$for-all$8490$1IfLeT g$id?$9838$1IfLeT g$accessor*$13490$1IfLeT)) '#f) '#f) '#f) '#f) '#f))) g$ls/false$13483$1IfLeT)) '#f) (apply (case-lambda ((g$ctxt$13491$1IfLeT g$name$13492$1IfLeT g$super$13493$1IfLeT g$constructor$13494$1IfLeT g$predicate$13495$1IfLeT g$field*$13496$1IfLeT g$accessor*$13497$1IfLeT) ((case-lambda ((g$aux-accessor*$13498$1IfLeT) (g$bless$10083$1IfLeT (cons 'begin (cons (cons 'define-record-type (cons (list g$name$13492$1IfLeT g$constructor$13494$1IfLeT (gensym)) (cons (list 'parent g$super$13493$1IfLeT) (cons (cons 'fields (map (case-lambda ((g$field$13499$1IfLeT g$aux$13500$1IfLeT) (list 'immutable g$field$13499$1IfLeT g$aux$13500$1IfLeT))) g$field*$13496$1IfLeT g$aux-accessor*$13498$1IfLeT)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$predicate$13495$1IfLeT (list 'condition-predicate (list 'record-type-descriptor g$name$13492$1IfLeT))) (map (case-lambda ((g$accessor$13501$1IfLeT g$aux$13502$1IfLeT) (list 'define g$accessor$13501$1IfLeT (list 'condition-accessor (list 'record-type-descriptor g$name$13492$1IfLeT) g$aux$13502$1IfLeT)))) g$accessor*$13497$1IfLeT g$aux-accessor*$13498$1IfLeT))))))) (map (case-lambda ((g$x$13503$1IfLeT) (gensym))) g$accessor*$13497$1IfLeT)))) g$ls/false$13483$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13482$1IfLeT)))) ((case-lambda ((g$x$13504$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13504$1IfLeT) (begin '#f ((case-lambda ((g$q$13505$1IfLeT) (if g$q$13505$1IfLeT (begin '#f ((case-lambda ((g$r$13506$1IfLeT) (if g$r$13506$1IfLeT (begin '#f (append g$q$13505$1IfLeT g$r$13506$1IfLeT)) '#f))) ((case-lambda ((g$x$13507$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13507$1IfLeT) (begin '#f ((case-lambda ((g$q$13508$1IfLeT) (if g$q$13508$1IfLeT (begin '#f ((case-lambda ((g$r$13509$1IfLeT) (if g$r$13509$1IfLeT (begin '#f (append g$q$13508$1IfLeT g$r$13509$1IfLeT)) '#f))) ((case-lambda ((g$x$13510$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13510$1IfLeT) (begin '#f ((case-lambda ((g$q$13511$1IfLeT) (if g$q$13511$1IfLeT (begin '#f ((case-lambda ((g$r$13512$1IfLeT) (if g$r$13512$1IfLeT (begin '#f (append g$q$13511$1IfLeT g$r$13512$1IfLeT)) '#f))) ((case-lambda ((g$x$13513$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13513$1IfLeT) (begin '#f ((case-lambda ((g$q$13514$1IfLeT) (if g$q$13514$1IfLeT (begin '#f ((case-lambda ((g$r$13515$1IfLeT) (if g$r$13515$1IfLeT (begin '#f (append g$q$13514$1IfLeT g$r$13515$1IfLeT)) '#f))) ((case-lambda ((g$x$13516$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13516$1IfLeT) (begin '#f ((case-lambda ((g$q$13517$1IfLeT) (if g$q$13517$1IfLeT (begin '#f ((case-lambda ((g$r$13518$1IfLeT) (if g$r$13518$1IfLeT (begin '#f (append g$q$13517$1IfLeT g$r$13518$1IfLeT)) '#f))) ((letrec ((g$f$13519$1IfLeT (case-lambda ((g$x$13520$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13520$1IfLeT) ((case-lambda ((g$cars/f$13521$1IfLeT) (if g$cars/f$13521$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13522$1IfLeT) (if g$cdrs/f$13522$1IfLeT (begin '#f (map cons g$cars/f$13521$1IfLeT g$cdrs/f$13522$1IfLeT)) '#f))) (g$f$13519$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13520$1IfLeT)))) '#f))) ((case-lambda ((g$x$13523$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13523$1IfLeT) (begin '#f ((case-lambda ((g$q$13524$1IfLeT) (if g$q$13524$1IfLeT (begin '#f ((case-lambda ((g$r$13525$1IfLeT) (if g$r$13525$1IfLeT (begin '#f (append g$q$13524$1IfLeT g$r$13525$1IfLeT)) '#f))) ((case-lambda ((g$x$13526$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13526$1IfLeT) (begin '#f ((case-lambda ((g$q$13527$1IfLeT) (if g$q$13527$1IfLeT (begin '#f ((case-lambda ((g$r$13528$1IfLeT) (if g$r$13528$1IfLeT (begin '#f (append g$q$13527$1IfLeT g$r$13528$1IfLeT)) '#f))) ((case-lambda ((g$x$13529$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13529$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13526$1IfLeT)))) '#f))) ((case-lambda ((g$x$13530$1IfLeT) (list g$x$13530$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13526$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13523$1IfLeT)))) '#f))) ((case-lambda ((g$x$13531$1IfLeT) (list g$x$13531$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13523$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$13520$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13520$1IfLeT) (list (begin 'field* '()) (begin 'accessor* '())) '#f)))))) g$f$13519$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$13516$1IfLeT)))) '#f))) ((case-lambda ((g$x$13532$1IfLeT) (list g$x$13532$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13516$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13513$1IfLeT)))) '#f))) ((case-lambda ((g$x$13533$1IfLeT) (list g$x$13533$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13513$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13510$1IfLeT)))) '#f))) ((case-lambda ((g$x$13534$1IfLeT) (list g$x$13534$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13510$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13507$1IfLeT)))) '#f))) ((case-lambda ((g$x$13535$1IfLeT) (list g$x$13535$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13507$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13504$1IfLeT)))) '#f))) ((case-lambda ((g$x$13536$1IfLeT) (list g$x$13536$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13504$1IfLeT)))) '#f))) g$t$13482$1IfLeT)))) g$x$13480$1IfLeT))))) (g$incorrect-usage-macro$10113$1IfLeT g$incorrect-usage-macro$16218$1IfLeT (case-lambda ((g$e$13539$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"incorrect usage of auxiliary keyword" g$e$13539$1IfLeT)))) (g$parameterize-transformer$10114$1IfLeT g$parameterize-transformer$16219$1IfLeT (case-lambda ((g$e$13540$1IfLeT g$r$13541$1IfLeT g$mr$13542$1IfLeT) ((case-lambda ((g$t$13543$1IfLeT) ((case-lambda ((g$ls/false$13544$1IfLeT) (if (if g$ls/false$13544$1IfLeT (begin '#f (apply (case-lambda ((g$b$13545$1IfLeT g$b*$13546$1IfLeT) '#t)) g$ls/false$13544$1IfLeT)) '#f) (apply (case-lambda ((g$b$13547$1IfLeT g$b*$13548$1IfLeT) (g$chi-internal$10144$1IfLeT (cons g$b$13547$1IfLeT g$b*$13548$1IfLeT) g$r$13541$1IfLeT g$mr$13542$1IfLeT))) g$ls/false$13544$1IfLeT) ((case-lambda ((g$t$13549$1IfLeT) ((case-lambda ((g$ls/false$13550$1IfLeT) (if (if g$ls/false$13550$1IfLeT (begin '#f (apply (case-lambda ((g$olhs*$13551$1IfLeT g$orhs*$13552$1IfLeT g$b$13553$1IfLeT g$b*$13554$1IfLeT) '#t)) g$ls/false$13550$1IfLeT)) '#f) (apply (case-lambda ((g$olhs*$13555$1IfLeT g$orhs*$13556$1IfLeT g$b$13557$1IfLeT g$b*$13558$1IfLeT) ((case-lambda ((g$lhs*$13559$1IfLeT g$rhs*$13560$1IfLeT g$t*$13561$1IfLeT g$swap$13562$1IfLeT) (g$build-let$9771$1IfLeT '#f (append g$lhs*$13559$1IfLeT g$rhs*$13560$1IfLeT) (append (g$chi-expr*$10131$1IfLeT g$olhs*$13555$1IfLeT g$r$13541$1IfLeT g$mr$13542$1IfLeT) (g$chi-expr*$10131$1IfLeT g$orhs*$13556$1IfLeT g$r$13541$1IfLeT g$mr$13542$1IfLeT)) (g$build-let$9771$1IfLeT '#f (list g$swap$13562$1IfLeT) (list (g$build-lambda$9769$1IfLeT '#f '() (g$build-sequence$9772$1IfLeT '#f (map (case-lambda ((g$t$13563$1IfLeT g$lhs$13564$1IfLeT g$rhs$13565$1IfLeT) (g$build-let$9771$1IfLeT '#f (list g$t$13563$1IfLeT) (list (list g$lhs$13564$1IfLeT)) (g$build-sequence$9772$1IfLeT '#f (list (list g$lhs$13564$1IfLeT g$rhs$13565$1IfLeT) (list 'set! g$rhs$13565$1IfLeT g$t$13563$1IfLeT)))))) g$t*$13561$1IfLeT g$lhs*$13559$1IfLeT g$rhs*$13560$1IfLeT)))) (list '(primitive dynamic-wind) g$swap$13562$1IfLeT (g$build-lambda$9769$1IfLeT '#f '() (g$chi-internal$10144$1IfLeT (cons g$b$13557$1IfLeT g$b*$13558$1IfLeT) g$r$13541$1IfLeT g$mr$13542$1IfLeT)) g$swap$13562$1IfLeT))))) (map (case-lambda ((g$x$13566$1IfLeT) (g$gen-lexical$9782$1IfLeT 'lhs))) g$olhs*$13555$1IfLeT) (map (case-lambda ((g$x$13567$1IfLeT) (g$gen-lexical$9782$1IfLeT 'rhs))) g$olhs*$13555$1IfLeT) (map (case-lambda ((g$x$13568$1IfLeT) (g$gen-lexical$9782$1IfLeT 't))) g$olhs*$13555$1IfLeT) (g$gen-lexical$9782$1IfLeT 'swap)))) g$ls/false$13550$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13549$1IfLeT)))) ((case-lambda ((g$x$13569$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13569$1IfLeT) (begin '#f ((case-lambda ((g$q$13570$1IfLeT) (if g$q$13570$1IfLeT (begin '#f ((case-lambda ((g$r$13571$1IfLeT) (if g$r$13571$1IfLeT (begin '#f (append g$q$13570$1IfLeT g$r$13571$1IfLeT)) '#f))) ((case-lambda ((g$x$13572$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13572$1IfLeT) (begin '#f ((case-lambda ((g$q$13573$1IfLeT) (if g$q$13573$1IfLeT (begin '#f ((case-lambda ((g$r$13574$1IfLeT) (if g$r$13574$1IfLeT (begin '#f (append g$q$13573$1IfLeT g$r$13574$1IfLeT)) '#f))) ((case-lambda ((g$x$13575$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13575$1IfLeT) (begin '#f ((case-lambda ((g$q$13576$1IfLeT) (if g$q$13576$1IfLeT (begin '#f ((case-lambda ((g$r$13577$1IfLeT) (if g$r$13577$1IfLeT (begin '#f (append g$q$13576$1IfLeT g$r$13577$1IfLeT)) '#f))) ((letrec ((g$f$13578$1IfLeT (case-lambda ((g$x$13579$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13579$1IfLeT) ((case-lambda ((g$cars/f$13580$1IfLeT) (if g$cars/f$13580$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13581$1IfLeT) (if g$cdrs/f$13581$1IfLeT (begin '#f (map cons g$cars/f$13580$1IfLeT g$cdrs/f$13581$1IfLeT)) '#f))) (g$f$13578$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13579$1IfLeT)))) '#f))) ((case-lambda ((g$x$13582$1IfLeT) (list g$x$13582$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13579$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13579$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$13578$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$13575$1IfLeT)))) '#f))) ((case-lambda ((g$x$13583$1IfLeT) (list g$x$13583$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13575$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13572$1IfLeT)))) '#f))) ((letrec ((g$f$13584$1IfLeT (case-lambda ((g$x$13585$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13585$1IfLeT) ((case-lambda ((g$cars/f$13586$1IfLeT) (if g$cars/f$13586$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13587$1IfLeT) (if g$cdrs/f$13587$1IfLeT (begin '#f (map cons g$cars/f$13586$1IfLeT g$cdrs/f$13587$1IfLeT)) '#f))) (g$f$13584$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13585$1IfLeT)))) '#f))) ((case-lambda ((g$x$13588$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13588$1IfLeT) (begin '#f ((case-lambda ((g$q$13589$1IfLeT) (if g$q$13589$1IfLeT (begin '#f ((case-lambda ((g$r$13590$1IfLeT) (if g$r$13590$1IfLeT (begin '#f (append g$q$13589$1IfLeT g$r$13590$1IfLeT)) '#f))) ((case-lambda ((g$x$13591$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13591$1IfLeT) (begin '#f ((case-lambda ((g$q$13592$1IfLeT) (if g$q$13592$1IfLeT (begin '#f ((case-lambda ((g$r$13593$1IfLeT) (if g$r$13593$1IfLeT (begin '#f (append g$q$13592$1IfLeT g$r$13593$1IfLeT)) '#f))) ((case-lambda ((g$x$13594$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13594$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13591$1IfLeT)))) '#f))) ((case-lambda ((g$x$13595$1IfLeT) (list g$x$13595$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13591$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13588$1IfLeT)))) '#f))) ((case-lambda ((g$x$13596$1IfLeT) (list g$x$13596$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13588$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$13585$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13585$1IfLeT) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f)))))) g$f$13584$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$13572$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13569$1IfLeT)))) '#f))) ((case-lambda ((g$x$13597$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13569$1IfLeT)))) '#f))) g$t$13549$1IfLeT)))) g$t$13543$1IfLeT)))) ((case-lambda ((g$x$13598$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13598$1IfLeT) (begin '#f ((case-lambda ((g$q$13599$1IfLeT) (if g$q$13599$1IfLeT (begin '#f ((case-lambda ((g$r$13600$1IfLeT) (if g$r$13600$1IfLeT (begin '#f (append g$q$13599$1IfLeT g$r$13600$1IfLeT)) '#f))) ((case-lambda ((g$x$13601$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13601$1IfLeT) (begin '#f ((case-lambda ((g$q$13602$1IfLeT) (if g$q$13602$1IfLeT (begin '#f ((case-lambda ((g$r$13603$1IfLeT) (if g$r$13603$1IfLeT (begin '#f (append g$q$13602$1IfLeT g$r$13603$1IfLeT)) '#f))) ((case-lambda ((g$x$13604$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13604$1IfLeT) (begin '#f ((case-lambda ((g$q$13605$1IfLeT) (if g$q$13605$1IfLeT (begin '#f ((case-lambda ((g$r$13606$1IfLeT) (if g$r$13606$1IfLeT (begin '#f (append g$q$13605$1IfLeT g$r$13606$1IfLeT)) '#f))) ((letrec ((g$f$13607$1IfLeT (case-lambda ((g$x$13608$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13608$1IfLeT) ((case-lambda ((g$cars/f$13609$1IfLeT) (if g$cars/f$13609$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13610$1IfLeT) (if g$cdrs/f$13610$1IfLeT (begin '#f (map cons g$cars/f$13609$1IfLeT g$cdrs/f$13610$1IfLeT)) '#f))) (g$f$13607$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13608$1IfLeT)))) '#f))) ((case-lambda ((g$x$13611$1IfLeT) (list g$x$13611$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13608$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13608$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$13607$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$13604$1IfLeT)))) '#f))) ((case-lambda ((g$x$13612$1IfLeT) (list g$x$13612$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13604$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13601$1IfLeT)))) '#f))) ((case-lambda ((g$x$13613$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13613$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-car$9835$1IfLeT g$x$13601$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13598$1IfLeT)))) '#f))) ((case-lambda ((g$x$13614$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13598$1IfLeT)))) '#f))) g$t$13543$1IfLeT)))) g$e$13540$1IfLeT)))) (g$foreign-call-transformer$10115$1IfLeT g$foreign-call-transformer$16220$1IfLeT (case-lambda ((g$e$13615$1IfLeT g$r$13616$1IfLeT g$mr$13617$1IfLeT) ((case-lambda ((g$t$13618$1IfLeT) ((case-lambda ((g$ls/false$13619$1IfLeT) (if (if g$ls/false$13619$1IfLeT (begin '#f (apply (case-lambda ((g$name$13620$1IfLeT g$arg*$13621$1IfLeT) '#t)) g$ls/false$13619$1IfLeT)) '#f) (apply (case-lambda ((g$name$13622$1IfLeT g$arg*$13623$1IfLeT) (cons 'foreign-call (cons (g$chi-expr$10133$1IfLeT g$name$13622$1IfLeT g$r$13616$1IfLeT g$mr$13617$1IfLeT) (g$chi-expr*$10131$1IfLeT g$arg*$13623$1IfLeT g$r$13616$1IfLeT g$mr$13617$1IfLeT))))) g$ls/false$13619$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13618$1IfLeT)))) ((case-lambda ((g$x$13624$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13624$1IfLeT) (begin '#f ((case-lambda ((g$q$13625$1IfLeT) (if g$q$13625$1IfLeT (begin '#f ((case-lambda ((g$r$13626$1IfLeT) (if g$r$13626$1IfLeT (begin '#f (append g$q$13625$1IfLeT g$r$13626$1IfLeT)) '#f))) ((case-lambda ((g$x$13627$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13627$1IfLeT) (begin '#f ((case-lambda ((g$q$13628$1IfLeT) (if g$q$13628$1IfLeT (begin '#f ((case-lambda ((g$r$13629$1IfLeT) (if g$r$13629$1IfLeT (begin '#f (append g$q$13628$1IfLeT g$r$13629$1IfLeT)) '#f))) ((letrec ((g$f$13630$1IfLeT (case-lambda ((g$x$13631$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13631$1IfLeT) ((case-lambda ((g$cars/f$13632$1IfLeT) (if g$cars/f$13632$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13633$1IfLeT) (if g$cdrs/f$13633$1IfLeT (begin '#f (map cons g$cars/f$13632$1IfLeT g$cdrs/f$13633$1IfLeT)) '#f))) (g$f$13630$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13631$1IfLeT)))) '#f))) ((case-lambda ((g$x$13634$1IfLeT) (list g$x$13634$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13631$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13631$1IfLeT) (list (begin 'arg* '())) '#f)))))) g$f$13630$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$13627$1IfLeT)))) '#f))) ((case-lambda ((g$x$13635$1IfLeT) (list g$x$13635$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13627$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13624$1IfLeT)))) '#f))) ((case-lambda ((g$x$13636$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13624$1IfLeT)))) '#f))) g$t$13618$1IfLeT)))) g$e$13615$1IfLeT)))) (g$convert-pattern$10116$1IfLeT g$convert-pattern$16221$1IfLeT (case-lambda ((g$pattern$13637$1IfLeT g$keys$13638$1IfLeT) (letrec* ((g$cvt*$13639$1IfLeT (case-lambda ((g$p*$13762$1IfLeT g$n$13763$1IfLeT g$ids$13764$1IfLeT) (if (null? g$p*$13762$1IfLeT) (values '() g$ids$13764$1IfLeT) (call-with-values (case-lambda (() (g$cvt*$13639$1IfLeT (cdr g$p*$13762$1IfLeT) g$n$13763$1IfLeT g$ids$13764$1IfLeT))) (case-lambda ((g$y$13767$1IfLeT g$ids$13768$1IfLeT) ((case-lambda ((g$ids$13769$1IfLeT g$y$13770$1IfLeT) (call-with-values (case-lambda (() (g$cvt$13640$1IfLeT (car g$p*$13762$1IfLeT) g$n$13763$1IfLeT g$ids$13769$1IfLeT))) (case-lambda ((g$x$13773$1IfLeT g$ids$13774$1IfLeT) ((case-lambda ((g$ids$13775$1IfLeT g$x$13776$1IfLeT) (values (cons g$x$13776$1IfLeT g$y$13770$1IfLeT) g$ids$13775$1IfLeT))) g$ids$13774$1IfLeT g$x$13773$1IfLeT)))))) g$ids$13768$1IfLeT g$y$13767$1IfLeT)))))))) (g$cvt$13640$1IfLeT (case-lambda ((g$p$13641$1IfLeT g$n$13642$1IfLeT g$ids$13643$1IfLeT) ((case-lambda ((g$t$13644$1IfLeT) ((case-lambda ((g$ls/false$13645$1IfLeT) (if (if g$ls/false$13645$1IfLeT (begin '#f (apply (case-lambda ((g$id$13646$1IfLeT) (g$id?$9838$1IfLeT g$id$13646$1IfLeT))) g$ls/false$13645$1IfLeT)) '#f) (apply (case-lambda ((g$id$13647$1IfLeT) (if (g$bound-id-member?$9845$1IfLeT g$p$13641$1IfLeT g$keys$13638$1IfLeT) (values (vector 'free-id g$p$13641$1IfLeT) g$ids$13643$1IfLeT) (if (g$free-id=?$9842$1IfLeT g$p$13641$1IfLeT (g$scheme-stx$10063$1IfLeT '_)) (values '_ g$ids$13643$1IfLeT) (values 'any (cons (cons g$p$13641$1IfLeT g$n$13642$1IfLeT) g$ids$13643$1IfLeT)))))) g$ls/false$13645$1IfLeT) ((case-lambda ((g$t$13648$1IfLeT) ((case-lambda ((g$ls/false$13649$1IfLeT) (if (if g$ls/false$13649$1IfLeT (begin '#f (apply (case-lambda ((g$p$13650$1IfLeT g$dots$13651$1IfLeT) (g$ellipsis?$10118$1IfLeT g$dots$13651$1IfLeT))) g$ls/false$13649$1IfLeT)) '#f) (apply (case-lambda ((g$p$13652$1IfLeT g$dots$13653$1IfLeT) (call-with-values (case-lambda (() (g$cvt$13640$1IfLeT g$p$13652$1IfLeT (+ g$n$13642$1IfLeT '1) g$ids$13643$1IfLeT))) (case-lambda ((g$p$13656$1IfLeT g$ids$13657$1IfLeT) ((case-lambda ((g$ids$13658$1IfLeT g$p$13659$1IfLeT) (values (if (eq? g$p$13659$1IfLeT 'any) 'each-any (vector 'each g$p$13659$1IfLeT)) g$ids$13658$1IfLeT))) g$ids$13657$1IfLeT g$p$13656$1IfLeT)))))) g$ls/false$13649$1IfLeT) ((case-lambda ((g$t$13660$1IfLeT) ((case-lambda ((g$ls/false$13661$1IfLeT) (if (if g$ls/false$13661$1IfLeT (begin '#f (apply (case-lambda ((g$x$13662$1IfLeT g$dots$13663$1IfLeT g$ys$13664$1IfLeT g$z$13665$1IfLeT) (g$ellipsis?$10118$1IfLeT g$dots$13663$1IfLeT))) g$ls/false$13661$1IfLeT)) '#f) (apply (case-lambda ((g$x$13666$1IfLeT g$dots$13667$1IfLeT g$ys$13668$1IfLeT g$z$13669$1IfLeT) (call-with-values (case-lambda (() (g$cvt$13640$1IfLeT g$z$13669$1IfLeT g$n$13642$1IfLeT g$ids$13643$1IfLeT))) (case-lambda ((g$z$13672$1IfLeT g$ids$13673$1IfLeT) ((case-lambda ((g$ids$13674$1IfLeT g$z$13675$1IfLeT) (call-with-values (case-lambda (() (g$cvt*$13639$1IfLeT g$ys$13668$1IfLeT g$n$13642$1IfLeT g$ids$13674$1IfLeT))) (case-lambda ((g$ys$13678$1IfLeT g$ids$13679$1IfLeT) ((case-lambda ((g$ids$13680$1IfLeT g$ys$13681$1IfLeT) (call-with-values (case-lambda (() (g$cvt$13640$1IfLeT g$x$13666$1IfLeT (+ g$n$13642$1IfLeT '1) g$ids$13680$1IfLeT))) (case-lambda ((g$x$13684$1IfLeT g$ids$13685$1IfLeT) ((case-lambda ((g$ids$13686$1IfLeT g$x$13687$1IfLeT) (values (vector 'each+ g$x$13687$1IfLeT (reverse g$ys$13681$1IfLeT) g$z$13675$1IfLeT) g$ids$13686$1IfLeT))) g$ids$13685$1IfLeT g$x$13684$1IfLeT)))))) g$ids$13679$1IfLeT g$ys$13678$1IfLeT)))))) g$ids$13673$1IfLeT g$z$13672$1IfLeT)))))) g$ls/false$13661$1IfLeT) ((case-lambda ((g$t$13688$1IfLeT) ((case-lambda ((g$ls/false$13689$1IfLeT) (if (if g$ls/false$13689$1IfLeT (begin '#f (apply (case-lambda ((g$x$13690$1IfLeT g$y$13691$1IfLeT) '#t)) g$ls/false$13689$1IfLeT)) '#f) (apply (case-lambda ((g$x$13692$1IfLeT g$y$13693$1IfLeT) (call-with-values (case-lambda (() (g$cvt$13640$1IfLeT g$y$13693$1IfLeT g$n$13642$1IfLeT g$ids$13643$1IfLeT))) (case-lambda ((g$y$13696$1IfLeT g$ids$13697$1IfLeT) ((case-lambda ((g$ids$13698$1IfLeT g$y$13699$1IfLeT) (call-with-values (case-lambda (() (g$cvt$13640$1IfLeT g$x$13692$1IfLeT g$n$13642$1IfLeT g$ids$13698$1IfLeT))) (case-lambda ((g$x$13702$1IfLeT g$ids$13703$1IfLeT) ((case-lambda ((g$ids$13704$1IfLeT g$x$13705$1IfLeT) (values (cons g$x$13705$1IfLeT g$y$13699$1IfLeT) g$ids$13704$1IfLeT))) g$ids$13703$1IfLeT g$x$13702$1IfLeT)))))) g$ids$13697$1IfLeT g$y$13696$1IfLeT)))))) g$ls/false$13689$1IfLeT) ((case-lambda ((g$t$13706$1IfLeT) ((case-lambda ((g$ls/false$13707$1IfLeT) (if (if g$ls/false$13707$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$13707$1IfLeT)) '#f) (apply (case-lambda (() (values '() g$ids$13643$1IfLeT))) g$ls/false$13707$1IfLeT) ((case-lambda ((g$t$13708$1IfLeT) ((case-lambda ((g$ls/false$13709$1IfLeT) (if (if g$ls/false$13709$1IfLeT (begin '#f (apply (case-lambda ((g$p$13710$1IfLeT) (not (g$stx?$9810$1IfLeT g$p$13710$1IfLeT)))) g$ls/false$13709$1IfLeT)) '#f) (apply (case-lambda ((g$p$13711$1IfLeT) (call-with-values (case-lambda (() (g$cvt$13640$1IfLeT g$p$13711$1IfLeT g$n$13642$1IfLeT g$ids$13643$1IfLeT))) (case-lambda ((g$p$13714$1IfLeT g$ids$13715$1IfLeT) ((case-lambda ((g$ids$13716$1IfLeT g$p$13717$1IfLeT) (values (vector 'vector g$p$13717$1IfLeT) g$ids$13716$1IfLeT))) g$ids$13715$1IfLeT g$p$13714$1IfLeT)))))) g$ls/false$13709$1IfLeT) ((case-lambda ((g$t$13718$1IfLeT) ((case-lambda ((g$ls/false$13719$1IfLeT) (if (if g$ls/false$13719$1IfLeT (begin '#f (apply (case-lambda ((g$datum$13720$1IfLeT) '#t)) g$ls/false$13719$1IfLeT)) '#f) (apply (case-lambda ((g$datum$13721$1IfLeT) (values (vector 'atom (g$stx->datum$9849$1IfLeT g$datum$13721$1IfLeT)) g$ids$13643$1IfLeT))) g$ls/false$13719$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13718$1IfLeT)))) ((case-lambda ((g$x$13722$1IfLeT) (list g$x$13722$1IfLeT))) g$t$13718$1IfLeT)))) g$t$13708$1IfLeT)))) ((case-lambda ((g$x$13723$1IfLeT) (if (g$syntax-vector?$9832$1IfLeT g$x$13723$1IfLeT) (begin '#f ((letrec ((g$f$13724$1IfLeT (case-lambda ((g$x$13725$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13725$1IfLeT) ((case-lambda ((g$cars/f$13726$1IfLeT) (if g$cars/f$13726$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13727$1IfLeT) (if g$cdrs/f$13727$1IfLeT (begin '#f (map cons g$cars/f$13726$1IfLeT g$cdrs/f$13727$1IfLeT)) '#f))) (g$f$13724$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13725$1IfLeT)))) '#f))) ((case-lambda ((g$x$13728$1IfLeT) (list g$x$13728$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13725$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13725$1IfLeT) (list (begin 'p '())) '#f)))))) g$f$13724$1IfLeT) (g$syntax-vector->list$9830$1IfLeT g$x$13723$1IfLeT))) '#f))) g$t$13708$1IfLeT)))) g$t$13706$1IfLeT)))) ((case-lambda ((g$x$13729$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13729$1IfLeT) '()) (begin '#f '()) '#f))) g$t$13706$1IfLeT)))) g$t$13688$1IfLeT)))) ((case-lambda ((g$x$13730$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13730$1IfLeT) (begin '#f ((case-lambda ((g$q$13731$1IfLeT) (if g$q$13731$1IfLeT (begin '#f ((case-lambda ((g$r$13732$1IfLeT) (if g$r$13732$1IfLeT (begin '#f (append g$q$13731$1IfLeT g$r$13732$1IfLeT)) '#f))) ((case-lambda ((g$x$13733$1IfLeT) (list g$x$13733$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$13730$1IfLeT)))) '#f))) ((case-lambda ((g$x$13734$1IfLeT) (list g$x$13734$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13730$1IfLeT)))) '#f))) g$t$13688$1IfLeT)))) g$t$13660$1IfLeT)))) ((case-lambda ((g$x$13735$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13735$1IfLeT) (begin '#f ((case-lambda ((g$q$13736$1IfLeT) (if g$q$13736$1IfLeT (begin '#f ((case-lambda ((g$r$13737$1IfLeT) (if g$r$13737$1IfLeT (begin '#f (append g$q$13736$1IfLeT g$r$13737$1IfLeT)) '#f))) ((case-lambda ((g$x$13738$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13738$1IfLeT) (begin '#f ((case-lambda ((g$q$13739$1IfLeT) (if g$q$13739$1IfLeT (begin '#f ((case-lambda ((g$r$13740$1IfLeT) (if g$r$13740$1IfLeT (begin '#f (append g$q$13739$1IfLeT g$r$13740$1IfLeT)) '#f))) ((letrec ((g$f$13741$1IfLeT (case-lambda ((g$x$13744$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13744$1IfLeT) ((case-lambda ((g$cars/f$13745$1IfLeT) (if g$cars/f$13745$1IfLeT (begin '#f ((case-lambda ((g$d/f$13746$1IfLeT) (if g$d/f$13746$1IfLeT (begin '#f (cons (map cons g$cars/f$13745$1IfLeT (car g$d/f$13746$1IfLeT)) (cdr g$d/f$13746$1IfLeT))) '#f))) (g$f$13741$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13744$1IfLeT)))) '#f))) ((case-lambda ((g$x$13747$1IfLeT) (list g$x$13747$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13744$1IfLeT))) ((case-lambda ((g$d$13748$1IfLeT) (if g$d$13748$1IfLeT (begin '#f (cons (list (begin 'ys '())) g$d$13748$1IfLeT)) '#f))) ((case-lambda ((g$x$13749$1IfLeT) (list g$x$13749$1IfLeT))) g$x$13744$1IfLeT))))))) (case-lambda ((g$x$13742$1IfLeT) ((case-lambda ((g$x$13743$1IfLeT) (if g$x$13743$1IfLeT (begin '#f (append (car g$x$13743$1IfLeT) (cdr g$x$13743$1IfLeT))) '#f))) (g$f$13741$1IfLeT g$x$13742$1IfLeT))))) (g$syntax-cdr$9836$1IfLeT g$x$13738$1IfLeT)))) '#f))) ((case-lambda ((g$x$13750$1IfLeT) (list g$x$13750$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13738$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13735$1IfLeT)))) '#f))) ((case-lambda ((g$x$13751$1IfLeT) (list g$x$13751$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13735$1IfLeT)))) '#f))) g$t$13660$1IfLeT)))) g$t$13648$1IfLeT)))) ((case-lambda ((g$x$13752$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13752$1IfLeT) (begin '#f ((case-lambda ((g$q$13753$1IfLeT) (if g$q$13753$1IfLeT (begin '#f ((case-lambda ((g$r$13754$1IfLeT) (if g$r$13754$1IfLeT (begin '#f (append g$q$13753$1IfLeT g$r$13754$1IfLeT)) '#f))) ((case-lambda ((g$x$13755$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13755$1IfLeT) (begin '#f ((case-lambda ((g$q$13756$1IfLeT) (if g$q$13756$1IfLeT (begin '#f ((case-lambda ((g$r$13757$1IfLeT) (if g$r$13757$1IfLeT (begin '#f (append g$q$13756$1IfLeT g$r$13757$1IfLeT)) '#f))) ((case-lambda ((g$x$13758$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13758$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13755$1IfLeT)))) '#f))) ((case-lambda ((g$x$13759$1IfLeT) (list g$x$13759$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13755$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13752$1IfLeT)))) '#f))) ((case-lambda ((g$x$13760$1IfLeT) (list g$x$13760$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13752$1IfLeT)))) '#f))) g$t$13648$1IfLeT)))) g$t$13644$1IfLeT)))) ((case-lambda ((g$x$13761$1IfLeT) (list g$x$13761$1IfLeT))) g$t$13644$1IfLeT)))) g$p$13641$1IfLeT))))) (g$cvt$13640$1IfLeT g$pattern$13637$1IfLeT '0 '()))))) (g$syntax-dispatch$10117$1IfLeT g$syntax-dispatch$16222$1IfLeT (case-lambda ((g$e$13777$1IfLeT g$p$13778$1IfLeT) (letrec* ((g$stx^$13779$1IfLeT (case-lambda ((g$e$13887$1IfLeT g$m*$13888$1IfLeT g$s*$13889$1IfLeT g$ae*$13890$1IfLeT) (if (if (null? g$m*$13888$1IfLeT) (begin '#f (null? g$s*$13889$1IfLeT)) '#f) g$e$13887$1IfLeT (g$mkstx$9826$1IfLeT g$e$13887$1IfLeT g$m*$13888$1IfLeT g$s*$13889$1IfLeT g$ae*$13890$1IfLeT))))) (g$match-each$13780$1IfLeT (case-lambda ((g$e$13871$1IfLeT g$p$13872$1IfLeT g$m*$13873$1IfLeT g$s*$13874$1IfLeT g$ae*$13875$1IfLeT) (if (pair? g$e$13871$1IfLeT) ((case-lambda ((g$first$13876$1IfLeT) (if g$first$13876$1IfLeT (begin '#f ((case-lambda ((g$rest$13877$1IfLeT) (if g$rest$13877$1IfLeT (begin '#f (cons g$first$13876$1IfLeT g$rest$13877$1IfLeT)) '#f))) (g$match-each$13780$1IfLeT (cdr g$e$13871$1IfLeT) g$p$13872$1IfLeT g$m*$13873$1IfLeT g$s*$13874$1IfLeT g$ae*$13875$1IfLeT))) '#f))) (g$match$13786$1IfLeT (car g$e$13871$1IfLeT) g$p$13872$1IfLeT g$m*$13873$1IfLeT g$s*$13874$1IfLeT g$ae*$13875$1IfLeT '())) (if (null? g$e$13871$1IfLeT) '() (if (g$stx?$9810$1IfLeT g$e$13871$1IfLeT) (call-with-values (case-lambda (() (g$join-wraps$9825$1IfLeT g$m*$13873$1IfLeT g$s*$13874$1IfLeT g$ae*$13875$1IfLeT g$e$13871$1IfLeT))) (case-lambda ((g$m*$13881$1IfLeT g$s*$13882$1IfLeT g$ae*$13883$1IfLeT) ((case-lambda ((g$ae*$13884$1IfLeT g$s*$13885$1IfLeT g$m*$13886$1IfLeT) (g$match-each$13780$1IfLeT (g$stx-expr$9812$1IfLeT g$e$13871$1IfLeT) g$p$13872$1IfLeT g$m*$13886$1IfLeT g$s*$13885$1IfLeT g$ae*$13884$1IfLeT))) g$ae*$13883$1IfLeT g$s*$13882$1IfLeT g$m*$13881$1IfLeT)))) (if (annotation? g$e$13871$1IfLeT) (g$match-each$13780$1IfLeT (annotation-expression g$e$13871$1IfLeT) g$p$13872$1IfLeT g$m*$13873$1IfLeT g$s*$13874$1IfLeT g$ae*$13875$1IfLeT) '#f))))))) (g$match-each+$13781$1IfLeT (case-lambda ((g$e$13839$1IfLeT g$x-pat$13840$1IfLeT g$y-pat$13841$1IfLeT g$z-pat$13842$1IfLeT g$m*$13843$1IfLeT g$s*$13844$1IfLeT g$ae*$13845$1IfLeT g$r$13846$1IfLeT) ((letrec ((g$f$13847$1IfLeT (case-lambda ((g$e$13848$1IfLeT g$m*$13849$1IfLeT g$s*$13850$1IfLeT g$ae*$13851$1IfLeT) (if (pair? g$e$13848$1IfLeT) (call-with-values (case-lambda (() (g$f$13847$1IfLeT (cdr g$e$13848$1IfLeT) g$m*$13849$1IfLeT g$s*$13850$1IfLeT g$ae*$13851$1IfLeT))) (case-lambda ((g$xr*$13855$1IfLeT g$y-pat$13856$1IfLeT g$r$13857$1IfLeT) ((case-lambda ((g$r$13858$1IfLeT g$y-pat$13859$1IfLeT g$xr*$13860$1IfLeT) (if g$r$13858$1IfLeT (if (null? g$y-pat$13859$1IfLeT) ((case-lambda ((g$xr$13861$1IfLeT) (if g$xr$13861$1IfLeT (values (cons g$xr$13861$1IfLeT g$xr*$13860$1IfLeT) g$y-pat$13859$1IfLeT g$r$13858$1IfLeT) (values '#f '#f '#f)))) (g$match$13786$1IfLeT (car g$e$13848$1IfLeT) g$x-pat$13840$1IfLeT g$m*$13849$1IfLeT g$s*$13850$1IfLeT g$ae*$13851$1IfLeT '())) (values '() (cdr g$y-pat$13859$1IfLeT) (g$match$13786$1IfLeT (car g$e$13848$1IfLeT) (car g$y-pat$13859$1IfLeT) g$m*$13849$1IfLeT g$s*$13850$1IfLeT g$ae*$13851$1IfLeT g$r$13858$1IfLeT))) (values '#f '#f '#f)))) g$r$13857$1IfLeT g$y-pat$13856$1IfLeT g$xr*$13855$1IfLeT)))) (if (g$stx?$9810$1IfLeT g$e$13848$1IfLeT) (call-with-values (case-lambda (() (g$join-wraps$9825$1IfLeT g$m*$13849$1IfLeT g$s*$13850$1IfLeT g$ae*$13851$1IfLeT g$e$13848$1IfLeT))) (case-lambda ((g$m*$13865$1IfLeT g$s*$13866$1IfLeT g$ae*$13867$1IfLeT) ((case-lambda ((g$ae*$13868$1IfLeT g$s*$13869$1IfLeT g$m*$13870$1IfLeT) (g$f$13847$1IfLeT (g$stx-expr$9812$1IfLeT g$e$13848$1IfLeT) g$m*$13870$1IfLeT g$s*$13869$1IfLeT g$ae*$13868$1IfLeT))) g$ae*$13867$1IfLeT g$s*$13866$1IfLeT g$m*$13865$1IfLeT)))) (if (annotation? g$e$13848$1IfLeT) (g$f$13847$1IfLeT (annotation-expression g$e$13848$1IfLeT) g$m*$13849$1IfLeT g$s*$13850$1IfLeT g$ae*$13851$1IfLeT) (values '() g$y-pat$13841$1IfLeT (g$match$13786$1IfLeT g$e$13848$1IfLeT g$z-pat$13842$1IfLeT g$m*$13849$1IfLeT g$s*$13850$1IfLeT g$ae*$13851$1IfLeT g$r$13846$1IfLeT))))))))) g$f$13847$1IfLeT) g$e$13839$1IfLeT g$m*$13843$1IfLeT g$s*$13844$1IfLeT g$ae*$13845$1IfLeT)))) (g$match-each-any$13782$1IfLeT (case-lambda ((g$e$13825$1IfLeT g$m*$13826$1IfLeT g$s*$13827$1IfLeT g$ae*$13828$1IfLeT) (if (pair? g$e$13825$1IfLeT) ((case-lambda ((g$l$13829$1IfLeT) (if g$l$13829$1IfLeT (begin '#f (cons (g$stx^$13779$1IfLeT (car g$e$13825$1IfLeT) g$m*$13826$1IfLeT g$s*$13827$1IfLeT g$ae*$13828$1IfLeT) g$l$13829$1IfLeT)) '#f))) (g$match-each-any$13782$1IfLeT (cdr g$e$13825$1IfLeT) g$m*$13826$1IfLeT g$s*$13827$1IfLeT g$ae*$13828$1IfLeT)) (if (null? g$e$13825$1IfLeT) '() (if (g$stx?$9810$1IfLeT g$e$13825$1IfLeT) (call-with-values (case-lambda (() (g$join-wraps$9825$1IfLeT g$m*$13826$1IfLeT g$s*$13827$1IfLeT g$ae*$13828$1IfLeT g$e$13825$1IfLeT))) (case-lambda ((g$m*$13833$1IfLeT g$s*$13834$1IfLeT g$ae*$13835$1IfLeT) ((case-lambda ((g$ae*$13836$1IfLeT g$s*$13837$1IfLeT g$m*$13838$1IfLeT) (g$match-each-any$13782$1IfLeT (g$stx-expr$9812$1IfLeT g$e$13825$1IfLeT) g$m*$13838$1IfLeT g$s*$13837$1IfLeT g$ae*$13836$1IfLeT))) g$ae*$13835$1IfLeT g$s*$13834$1IfLeT g$m*$13833$1IfLeT)))) (if (annotation? g$e$13825$1IfLeT) (g$match-each-any$13782$1IfLeT (annotation-expression g$e$13825$1IfLeT) g$m*$13826$1IfLeT g$s*$13827$1IfLeT g$ae*$13828$1IfLeT) '#f))))))) (g$match-empty$13783$1IfLeT (case-lambda ((g$p$13822$1IfLeT g$r$13823$1IfLeT) (if (null? g$p$13822$1IfLeT) g$r$13823$1IfLeT (if (eq? g$p$13822$1IfLeT '_) g$r$13823$1IfLeT (if (eq? g$p$13822$1IfLeT 'any) (cons '() g$r$13823$1IfLeT) (if (pair? g$p$13822$1IfLeT) (g$match-empty$13783$1IfLeT (car g$p$13822$1IfLeT) (g$match-empty$13783$1IfLeT (cdr g$p$13822$1IfLeT) g$r$13823$1IfLeT)) (if (eq? g$p$13822$1IfLeT 'each-any) (cons '() g$r$13823$1IfLeT) ((case-lambda ((g$t$13824$1IfLeT) (if (memv g$t$13824$1IfLeT '(each)) (g$match-empty$13783$1IfLeT (vector-ref g$p$13822$1IfLeT '1) g$r$13823$1IfLeT) (if (memv g$t$13824$1IfLeT '(each+)) (g$match-empty$13783$1IfLeT (vector-ref g$p$13822$1IfLeT '1) (g$match-empty$13783$1IfLeT (reverse (vector-ref g$p$13822$1IfLeT '2)) (g$match-empty$13783$1IfLeT (vector-ref g$p$13822$1IfLeT '3) g$r$13823$1IfLeT))) (if (memv g$t$13824$1IfLeT '(free-id atom)) g$r$13823$1IfLeT (if (memv g$t$13824$1IfLeT '(vector)) (g$match-empty$13783$1IfLeT (vector-ref g$p$13822$1IfLeT '1) g$r$13823$1IfLeT) (assertion-violation 'syntax-dispatch '"invalid pattern" g$p$13822$1IfLeT))))))) (vector-ref g$p$13822$1IfLeT '0)))))))))) (g$combine$13784$1IfLeT (case-lambda ((g$r*$13820$1IfLeT g$r$13821$1IfLeT) (if (null? (car g$r*$13820$1IfLeT)) g$r$13821$1IfLeT (cons (map car g$r*$13820$1IfLeT) (g$combine$13784$1IfLeT (map cdr g$r*$13820$1IfLeT) g$r$13821$1IfLeT)))))) (g$match*$13785$1IfLeT (case-lambda ((g$e$13802$1IfLeT g$p$13803$1IfLeT g$m*$13804$1IfLeT g$s*$13805$1IfLeT g$ae*$13806$1IfLeT g$r$13807$1IfLeT) (if (null? g$p$13803$1IfLeT) (if (null? g$e$13802$1IfLeT) (begin '#f g$r$13807$1IfLeT) '#f) (if (pair? g$p$13803$1IfLeT) (if (pair? g$e$13802$1IfLeT) (begin '#f (g$match$13786$1IfLeT (car g$e$13802$1IfLeT) (car g$p$13803$1IfLeT) g$m*$13804$1IfLeT g$s*$13805$1IfLeT g$ae*$13806$1IfLeT (g$match$13786$1IfLeT (cdr g$e$13802$1IfLeT) (cdr g$p$13803$1IfLeT) g$m*$13804$1IfLeT g$s*$13805$1IfLeT g$ae*$13806$1IfLeT g$r$13807$1IfLeT))) '#f) (if (eq? g$p$13803$1IfLeT 'each-any) ((case-lambda ((g$l$13808$1IfLeT) (if g$l$13808$1IfLeT (begin '#f (cons g$l$13808$1IfLeT g$r$13807$1IfLeT)) '#f))) (g$match-each-any$13782$1IfLeT g$e$13802$1IfLeT g$m*$13804$1IfLeT g$s*$13805$1IfLeT g$ae*$13806$1IfLeT)) ((case-lambda ((g$t$13809$1IfLeT) (if (memv g$t$13809$1IfLeT '(each)) (if (null? g$e$13802$1IfLeT) (g$match-empty$13783$1IfLeT (vector-ref g$p$13803$1IfLeT '1) g$r$13807$1IfLeT) ((case-lambda ((g$r*$13819$1IfLeT) (if g$r*$13819$1IfLeT (begin '#f (g$combine$13784$1IfLeT g$r*$13819$1IfLeT g$r$13807$1IfLeT)) '#f))) (g$match-each$13780$1IfLeT g$e$13802$1IfLeT (vector-ref g$p$13803$1IfLeT '1) g$m*$13804$1IfLeT g$s*$13805$1IfLeT g$ae*$13806$1IfLeT))) (if (memv g$t$13809$1IfLeT '(free-id)) (if (symbol? g$e$13802$1IfLeT) (if (g$top-marked?$9781$1IfLeT g$m*$13804$1IfLeT) (if (g$free-id=?$9842$1IfLeT (g$stx^$13779$1IfLeT g$e$13802$1IfLeT g$m*$13804$1IfLeT g$s*$13805$1IfLeT g$ae*$13806$1IfLeT) (vector-ref g$p$13803$1IfLeT '1)) (begin '#f g$r$13807$1IfLeT) '#f) '#f) '#f) (if (memv g$t$13809$1IfLeT '(each+)) (call-with-values (case-lambda (() (g$match-each+$13781$1IfLeT g$e$13802$1IfLeT (vector-ref g$p$13803$1IfLeT '1) (vector-ref g$p$13803$1IfLeT '2) (vector-ref g$p$13803$1IfLeT '3) g$m*$13804$1IfLeT g$s*$13805$1IfLeT g$ae*$13806$1IfLeT g$r$13807$1IfLeT))) (case-lambda ((g$xr*$13813$1IfLeT g$y-pat$13814$1IfLeT g$r$13815$1IfLeT) ((case-lambda ((g$r$13816$1IfLeT g$y-pat$13817$1IfLeT g$xr*$13818$1IfLeT) (if g$r$13816$1IfLeT (if (null? g$y-pat$13817$1IfLeT) (begin '#f (if (null? g$xr*$13818$1IfLeT) (g$match-empty$13783$1IfLeT (vector-ref g$p$13803$1IfLeT '1) g$r$13816$1IfLeT) (g$combine$13784$1IfLeT g$xr*$13818$1IfLeT g$r$13816$1IfLeT))) '#f) '#f))) g$r$13815$1IfLeT g$y-pat$13814$1IfLeT g$xr*$13813$1IfLeT)))) (if (memv g$t$13809$1IfLeT '(atom)) (if (equal? (vector-ref g$p$13803$1IfLeT '1) (g$strip$9848$1IfLeT g$e$13802$1IfLeT g$m*$13804$1IfLeT)) (begin '#f g$r$13807$1IfLeT) '#f) (if (memv g$t$13809$1IfLeT '(vector)) (if (vector? g$e$13802$1IfLeT) (begin '#f (g$match$13786$1IfLeT (vector->list g$e$13802$1IfLeT) (vector-ref g$p$13803$1IfLeT '1) g$m*$13804$1IfLeT g$s*$13805$1IfLeT g$ae*$13806$1IfLeT g$r$13807$1IfLeT)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" g$p$13803$1IfLeT)))))))) (vector-ref g$p$13803$1IfLeT '0)))))))) (g$match$13786$1IfLeT (case-lambda ((g$e$13787$1IfLeT g$p$13788$1IfLeT g$m*$13789$1IfLeT g$s*$13790$1IfLeT g$ae*$13791$1IfLeT g$r$13792$1IfLeT) (if (not g$r$13792$1IfLeT) '#f (if (eq? g$p$13788$1IfLeT '_) g$r$13792$1IfLeT (if (eq? g$p$13788$1IfLeT 'any) (cons (g$stx^$13779$1IfLeT g$e$13787$1IfLeT g$m*$13789$1IfLeT g$s*$13790$1IfLeT g$ae*$13791$1IfLeT) g$r$13792$1IfLeT) (if (g$stx?$9810$1IfLeT g$e$13787$1IfLeT) (call-with-values (case-lambda (() (g$join-wraps$9825$1IfLeT g$m*$13789$1IfLeT g$s*$13790$1IfLeT g$ae*$13791$1IfLeT g$e$13787$1IfLeT))) (case-lambda ((g$m*$13796$1IfLeT g$s*$13797$1IfLeT g$ae*$13798$1IfLeT) ((case-lambda ((g$ae*$13799$1IfLeT g$s*$13800$1IfLeT g$m*$13801$1IfLeT) (g$match$13786$1IfLeT (g$stx-expr$9812$1IfLeT g$e$13787$1IfLeT) g$p$13788$1IfLeT g$m*$13801$1IfLeT g$s*$13800$1IfLeT g$ae*$13799$1IfLeT g$r$13792$1IfLeT))) g$ae*$13798$1IfLeT g$s*$13797$1IfLeT g$m*$13796$1IfLeT)))) (if (annotation? g$e$13787$1IfLeT) (g$match$13786$1IfLeT (annotation-expression g$e$13787$1IfLeT) g$p$13788$1IfLeT g$m*$13789$1IfLeT g$s*$13790$1IfLeT g$ae*$13791$1IfLeT g$r$13792$1IfLeT) (g$match*$13785$1IfLeT g$e$13787$1IfLeT g$p$13788$1IfLeT g$m*$13789$1IfLeT g$s*$13790$1IfLeT g$ae*$13791$1IfLeT g$r$13792$1IfLeT)))))))))) (g$match$13786$1IfLeT g$e$13777$1IfLeT g$p$13778$1IfLeT '() '() '() '()))))) (g$ellipsis?$10118$1IfLeT g$ellipsis?$16223$1IfLeT (case-lambda ((g$x$13891$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13891$1IfLeT) (begin '#f (g$free-id=?$9842$1IfLeT g$x$13891$1IfLeT (g$scheme-stx$10063$1IfLeT '...))) '#f)))) (g$syntax-case-transformer$10119$1IfLeT g$syntax-case-transformer$16224$1IfLeT ((case-lambda (() (letrec* ((g$build-dispatch-call$13892$1IfLeT (case-lambda ((g$pvars$14001$1IfLeT g$expr$14002$1IfLeT g$y$14003$1IfLeT g$r$14004$1IfLeT g$mr$14005$1IfLeT) ((case-lambda ((g$ids$14006$1IfLeT g$levels$14007$1IfLeT) ((case-lambda ((g$labels$14008$1IfLeT g$new-vars$14009$1IfLeT) ((case-lambda ((g$body$14010$1IfLeT) (list '(primitive apply) (g$build-lambda$9769$1IfLeT '#f g$new-vars$14009$1IfLeT g$body$14010$1IfLeT) g$y$14003$1IfLeT))) (g$chi-expr$10133$1IfLeT (g$add-subst$9828$1IfLeT (g$make-full-rib$9806$1IfLeT g$ids$14006$1IfLeT g$labels$14008$1IfLeT) g$expr$14002$1IfLeT) (append (map (case-lambda ((g$label$14011$1IfLeT g$var$14012$1IfLeT g$level$14013$1IfLeT) (cons g$label$14011$1IfLeT (g$make-binding$9853$1IfLeT 'syntax (cons g$var$14012$1IfLeT g$level$14013$1IfLeT))))) g$labels$14008$1IfLeT g$new-vars$14009$1IfLeT (map cdr g$pvars$14001$1IfLeT)) g$r$14004$1IfLeT) g$mr$14005$1IfLeT)))) (map g$gen-label$9784$1IfLeT g$ids$14006$1IfLeT) (map g$gen-lexical$9782$1IfLeT g$ids$14006$1IfLeT)))) (map car g$pvars$14001$1IfLeT) (map cdr g$pvars$14001$1IfLeT))))) (g$invalid-ids-error$13893$1IfLeT (case-lambda ((g$id*$13995$1IfLeT g$e$13996$1IfLeT g$class$13997$1IfLeT) ((letrec ((g$find$13998$1IfLeT (case-lambda ((g$id*$13999$1IfLeT g$ok*$14000$1IfLeT) (if (null? g$id*$13999$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$e$13996$1IfLeT) (if (g$id?$9838$1IfLeT (car g$id*$13999$1IfLeT)) (if (g$bound-id-member?$9845$1IfLeT (car g$id*$13999$1IfLeT) g$ok*$14000$1IfLeT) (g$syntax-error$10218$1IfLeT (car g$id*$13999$1IfLeT) '"duplicate " g$class$13997$1IfLeT) (g$find$13998$1IfLeT (cdr g$id*$13999$1IfLeT) (cons (car g$id*$13999$1IfLeT) g$ok*$14000$1IfLeT))) (g$syntax-error$10218$1IfLeT (car g$id*$13999$1IfLeT) '"invalid " g$class$13997$1IfLeT))))))) g$find$13998$1IfLeT) g$id*$13995$1IfLeT '())))) (g$gen-clause$13894$1IfLeT (case-lambda ((g$x$13975$1IfLeT g$keys$13976$1IfLeT g$clauses$13977$1IfLeT g$r$13978$1IfLeT g$mr$13979$1IfLeT g$pat$13980$1IfLeT g$fender$13981$1IfLeT g$expr$13982$1IfLeT) (call-with-values (case-lambda (() (g$convert-pattern$10116$1IfLeT g$pat$13980$1IfLeT g$keys$13976$1IfLeT))) (case-lambda ((g$p$13985$1IfLeT g$pvars$13986$1IfLeT) ((case-lambda ((g$pvars$13987$1IfLeT g$p$13988$1IfLeT) (if (not (g$distinct-bound-ids?$9844$1IfLeT (map car g$pvars$13987$1IfLeT))) (g$invalid-ids-error$13893$1IfLeT (map car g$pvars$13987$1IfLeT) g$pat$13980$1IfLeT '"pattern variable") (if (not (g$for-all$8490$1IfLeT (case-lambda ((g$x$13989$1IfLeT) (not (g$ellipsis?$10118$1IfLeT (car g$x$13989$1IfLeT))))) g$pvars$13987$1IfLeT)) (g$syntax-violation$10221$1IfLeT '#f '"misplaced ellipsis in syntax-case pattern" g$pat$13980$1IfLeT) ((case-lambda ((g$y$13990$1IfLeT) ((case-lambda ((g$test$13991$1IfLeT) ((case-lambda ((g$conseq$13992$1IfLeT) ((case-lambda ((g$altern$13993$1IfLeT) (list (g$build-lambda$9769$1IfLeT '#f (list g$y$13990$1IfLeT) (list 'if g$test$13991$1IfLeT g$conseq$13992$1IfLeT g$altern$13993$1IfLeT)) (list '(primitive syntax-dispatch) g$x$13975$1IfLeT (list 'quote g$p$13988$1IfLeT))))) (g$gen-syntax-case$13895$1IfLeT g$x$13975$1IfLeT g$keys$13976$1IfLeT g$clauses$13977$1IfLeT g$r$13978$1IfLeT g$mr$13979$1IfLeT)))) (g$build-dispatch-call$13892$1IfLeT g$pvars$13987$1IfLeT g$expr$13982$1IfLeT g$y$13990$1IfLeT g$r$13978$1IfLeT g$mr$13979$1IfLeT)))) (if (eq? g$fender$13981$1IfLeT '#t) g$y$13990$1IfLeT ((case-lambda ((g$call$13994$1IfLeT) (list 'if g$y$13990$1IfLeT g$call$13994$1IfLeT (list 'quote '#f)))) (g$build-dispatch-call$13892$1IfLeT g$pvars$13987$1IfLeT g$fender$13981$1IfLeT g$y$13990$1IfLeT g$r$13978$1IfLeT g$mr$13979$1IfLeT)))))) (g$gen-lexical$9782$1IfLeT 'tmp)))))) g$pvars$13986$1IfLeT g$p$13985$1IfLeT))))))) (g$gen-syntax-case$13895$1IfLeT (case-lambda ((g$x$13931$1IfLeT g$keys$13932$1IfLeT g$clauses$13933$1IfLeT g$r$13934$1IfLeT g$mr$13935$1IfLeT) (if (null? g$clauses$13933$1IfLeT) (list '(primitive syntax-error) g$x$13931$1IfLeT) ((case-lambda ((g$t$13936$1IfLeT) ((case-lambda ((g$ls/false$13937$1IfLeT) (if (if g$ls/false$13937$1IfLeT (begin '#f (apply (case-lambda ((g$pat$13938$1IfLeT g$expr$13939$1IfLeT) '#t)) g$ls/false$13937$1IfLeT)) '#f) (apply (case-lambda ((g$pat$13940$1IfLeT g$expr$13941$1IfLeT) (if (if (g$id?$9838$1IfLeT g$pat$13940$1IfLeT) (if (not (g$bound-id-member?$9845$1IfLeT g$pat$13940$1IfLeT g$keys$13932$1IfLeT)) (begin '#f (not (g$ellipsis?$10118$1IfLeT g$pat$13940$1IfLeT))) '#f) '#f) (if (g$free-id=?$9842$1IfLeT g$pat$13940$1IfLeT (g$scheme-stx$10063$1IfLeT '_)) (g$chi-expr$10133$1IfLeT g$expr$13941$1IfLeT g$r$13934$1IfLeT g$mr$13935$1IfLeT) ((case-lambda ((g$lab$13942$1IfLeT g$lex$13943$1IfLeT) ((case-lambda ((g$body$13944$1IfLeT) (list (g$build-lambda$9769$1IfLeT '#f (list g$lex$13943$1IfLeT) g$body$13944$1IfLeT) g$x$13931$1IfLeT))) (g$chi-expr$10133$1IfLeT (g$add-subst$9828$1IfLeT (g$make-full-rib$9806$1IfLeT (list g$pat$13940$1IfLeT) (list g$lab$13942$1IfLeT)) g$expr$13941$1IfLeT) (cons (cons g$lab$13942$1IfLeT (g$make-binding$9853$1IfLeT 'syntax (cons g$lex$13943$1IfLeT '0))) g$r$13934$1IfLeT) g$mr$13935$1IfLeT)))) (g$gen-label$9784$1IfLeT g$pat$13940$1IfLeT) (g$gen-lexical$9782$1IfLeT g$pat$13940$1IfLeT))) (g$gen-clause$13894$1IfLeT g$x$13931$1IfLeT g$keys$13932$1IfLeT (cdr g$clauses$13933$1IfLeT) g$r$13934$1IfLeT g$mr$13935$1IfLeT g$pat$13940$1IfLeT '#t g$expr$13941$1IfLeT)))) g$ls/false$13937$1IfLeT) ((case-lambda ((g$t$13945$1IfLeT) ((case-lambda ((g$ls/false$13946$1IfLeT) (if (if g$ls/false$13946$1IfLeT (begin '#f (apply (case-lambda ((g$pat$13947$1IfLeT g$fender$13948$1IfLeT g$expr$13949$1IfLeT) '#t)) g$ls/false$13946$1IfLeT)) '#f) (apply (case-lambda ((g$pat$13950$1IfLeT g$fender$13951$1IfLeT g$expr$13952$1IfLeT) (g$gen-clause$13894$1IfLeT g$x$13931$1IfLeT g$keys$13932$1IfLeT (cdr g$clauses$13933$1IfLeT) g$r$13934$1IfLeT g$mr$13935$1IfLeT g$pat$13950$1IfLeT g$fender$13951$1IfLeT g$expr$13952$1IfLeT))) g$ls/false$13946$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13945$1IfLeT)))) ((case-lambda ((g$x$13953$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13953$1IfLeT) (begin '#f ((case-lambda ((g$q$13954$1IfLeT) (if g$q$13954$1IfLeT (begin '#f ((case-lambda ((g$r$13955$1IfLeT) (if g$r$13955$1IfLeT (begin '#f (append g$q$13954$1IfLeT g$r$13955$1IfLeT)) '#f))) ((case-lambda ((g$x$13956$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13956$1IfLeT) (begin '#f ((case-lambda ((g$q$13957$1IfLeT) (if g$q$13957$1IfLeT (begin '#f ((case-lambda ((g$r$13958$1IfLeT) (if g$r$13958$1IfLeT (begin '#f (append g$q$13957$1IfLeT g$r$13958$1IfLeT)) '#f))) ((case-lambda ((g$x$13959$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13959$1IfLeT) (begin '#f ((case-lambda ((g$q$13960$1IfLeT) (if g$q$13960$1IfLeT (begin '#f ((case-lambda ((g$r$13961$1IfLeT) (if g$r$13961$1IfLeT (begin '#f (append g$q$13960$1IfLeT g$r$13961$1IfLeT)) '#f))) ((case-lambda ((g$x$13962$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13962$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13959$1IfLeT)))) '#f))) ((case-lambda ((g$x$13963$1IfLeT) (list g$x$13963$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13959$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13956$1IfLeT)))) '#f))) ((case-lambda ((g$x$13964$1IfLeT) (list g$x$13964$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13956$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13953$1IfLeT)))) '#f))) ((case-lambda ((g$x$13965$1IfLeT) (list g$x$13965$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13953$1IfLeT)))) '#f))) g$t$13945$1IfLeT)))) g$t$13936$1IfLeT)))) ((case-lambda ((g$x$13966$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13966$1IfLeT) (begin '#f ((case-lambda ((g$q$13967$1IfLeT) (if g$q$13967$1IfLeT (begin '#f ((case-lambda ((g$r$13968$1IfLeT) (if g$r$13968$1IfLeT (begin '#f (append g$q$13967$1IfLeT g$r$13968$1IfLeT)) '#f))) ((case-lambda ((g$x$13969$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13969$1IfLeT) (begin '#f ((case-lambda ((g$q$13970$1IfLeT) (if g$q$13970$1IfLeT (begin '#f ((case-lambda ((g$r$13971$1IfLeT) (if g$r$13971$1IfLeT (begin '#f (append g$q$13970$1IfLeT g$r$13971$1IfLeT)) '#f))) ((case-lambda ((g$x$13972$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$13972$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13969$1IfLeT)))) '#f))) ((case-lambda ((g$x$13973$1IfLeT) (list g$x$13973$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13969$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13966$1IfLeT)))) '#f))) ((case-lambda ((g$x$13974$1IfLeT) (list g$x$13974$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13966$1IfLeT)))) '#f))) g$t$13936$1IfLeT)))) (car g$clauses$13933$1IfLeT))))))) (case-lambda ((g$e$13896$1IfLeT g$r$13897$1IfLeT g$mr$13898$1IfLeT) ((case-lambda ((g$t$13899$1IfLeT) ((case-lambda ((g$ls/false$13900$1IfLeT) (if (if g$ls/false$13900$1IfLeT (begin '#f (apply (case-lambda ((g$expr$13901$1IfLeT g$keys$13902$1IfLeT g$clauses$13903$1IfLeT) '#t)) g$ls/false$13900$1IfLeT)) '#f) (apply (case-lambda ((g$expr$13904$1IfLeT g$keys$13905$1IfLeT g$clauses$13906$1IfLeT) (begin (if (g$for-all$8490$1IfLeT (case-lambda ((g$x$13907$1IfLeT) (if (g$id?$9838$1IfLeT g$x$13907$1IfLeT) (begin '#f (not (g$ellipsis?$10118$1IfLeT g$x$13907$1IfLeT))) '#f))) g$keys$13905$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"invalid literals" g$e$13896$1IfLeT)) ((case-lambda ((g$x$13908$1IfLeT) ((case-lambda ((g$body$13909$1IfLeT) (list (g$build-lambda$9769$1IfLeT '#f (list g$x$13908$1IfLeT) g$body$13909$1IfLeT) (g$chi-expr$10133$1IfLeT g$expr$13904$1IfLeT g$r$13897$1IfLeT g$mr$13898$1IfLeT)))) (g$gen-syntax-case$13895$1IfLeT g$x$13908$1IfLeT g$keys$13905$1IfLeT g$clauses$13906$1IfLeT g$r$13897$1IfLeT g$mr$13898$1IfLeT)))) (g$gen-lexical$9782$1IfLeT 'tmp))))) g$ls/false$13900$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$13899$1IfLeT)))) ((case-lambda ((g$x$13910$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13910$1IfLeT) (begin '#f ((case-lambda ((g$q$13911$1IfLeT) (if g$q$13911$1IfLeT (begin '#f ((case-lambda ((g$r$13912$1IfLeT) (if g$r$13912$1IfLeT (begin '#f (append g$q$13911$1IfLeT g$r$13912$1IfLeT)) '#f))) ((case-lambda ((g$x$13913$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13913$1IfLeT) (begin '#f ((case-lambda ((g$q$13914$1IfLeT) (if g$q$13914$1IfLeT (begin '#f ((case-lambda ((g$r$13915$1IfLeT) (if g$r$13915$1IfLeT (begin '#f (append g$q$13914$1IfLeT g$r$13915$1IfLeT)) '#f))) ((case-lambda ((g$x$13916$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13916$1IfLeT) (begin '#f ((case-lambda ((g$q$13917$1IfLeT) (if g$q$13917$1IfLeT (begin '#f ((case-lambda ((g$r$13918$1IfLeT) (if g$r$13918$1IfLeT (begin '#f (append g$q$13917$1IfLeT g$r$13918$1IfLeT)) '#f))) ((letrec ((g$f$13919$1IfLeT (case-lambda ((g$x$13920$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13920$1IfLeT) ((case-lambda ((g$cars/f$13921$1IfLeT) (if g$cars/f$13921$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13922$1IfLeT) (if g$cdrs/f$13922$1IfLeT (begin '#f (map cons g$cars/f$13921$1IfLeT g$cdrs/f$13922$1IfLeT)) '#f))) (g$f$13919$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13920$1IfLeT)))) '#f))) ((case-lambda ((g$x$13923$1IfLeT) (list g$x$13923$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13920$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13920$1IfLeT) (list (begin 'clauses '())) '#f)))))) g$f$13919$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$13916$1IfLeT)))) '#f))) ((letrec ((g$f$13924$1IfLeT (case-lambda ((g$x$13925$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$13925$1IfLeT) ((case-lambda ((g$cars/f$13926$1IfLeT) (if g$cars/f$13926$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$13927$1IfLeT) (if g$cdrs/f$13927$1IfLeT (begin '#f (map cons g$cars/f$13926$1IfLeT g$cdrs/f$13927$1IfLeT)) '#f))) (g$f$13924$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$13925$1IfLeT)))) '#f))) ((case-lambda ((g$x$13928$1IfLeT) (list g$x$13928$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13925$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$13925$1IfLeT) (list (begin 'keys '())) '#f)))))) g$f$13924$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$13916$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13913$1IfLeT)))) '#f))) ((case-lambda ((g$x$13929$1IfLeT) (list g$x$13929$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$13913$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$13910$1IfLeT)))) '#f))) ((case-lambda ((g$x$13930$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$13910$1IfLeT)))) '#f))) g$t$13899$1IfLeT)))) g$e$13896$1IfLeT)))))))) (g$ellipsis-map$10120$1IfLeT g$ellipsis-map$16225$1IfLeT (case-lambda ((g$proc$14014$1IfLeT g$ls$14015$1IfLeT . g$ls*$14016$1IfLeT) (letrec* ((g$who$14017$1IfLeT '...)) (begin (if (list? g$ls$14015$1IfLeT) (void) (assertion-violation g$who$14017$1IfLeT '"not a list" g$ls$14015$1IfLeT)) (if (null? g$ls*$14016$1IfLeT) (void) ((case-lambda ((g$n$14018$1IfLeT) (for-each (case-lambda ((g$x$14019$1IfLeT) (begin (if (list? g$x$14019$1IfLeT) (void) (assertion-violation g$who$14017$1IfLeT '"not a list" g$x$14019$1IfLeT)) (if (= (length g$x$14019$1IfLeT) g$n$14018$1IfLeT) (void) (assertion-violation g$who$14017$1IfLeT '"length mismatch" g$ls$14015$1IfLeT g$x$14019$1IfLeT))))) g$ls*$14016$1IfLeT))) (length g$ls$14015$1IfLeT))) (apply map g$proc$14014$1IfLeT g$ls$14015$1IfLeT g$ls*$14016$1IfLeT)))))) (g$syntax-transformer$10121$1IfLeT g$syntax-transformer$16226$1IfLeT ((case-lambda (() (letrec* ((g$gen-syntax$14020$1IfLeT (case-lambda ((g$src$14090$1IfLeT g$e$14091$1IfLeT g$r$14092$1IfLeT g$maps$14093$1IfLeT g$ellipsis?$14094$1IfLeT g$vec?$14095$1IfLeT) ((case-lambda ((g$t$14096$1IfLeT) ((case-lambda ((g$ls/false$14097$1IfLeT) (if (if g$ls/false$14097$1IfLeT (begin '#f (apply (case-lambda ((g$dots$14098$1IfLeT) (g$ellipsis?$14094$1IfLeT g$dots$14098$1IfLeT))) g$ls/false$14097$1IfLeT)) '#f) (apply (case-lambda ((g$dots$14099$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"misplaced ellipsis in syntax form" g$src$14090$1IfLeT))) g$ls/false$14097$1IfLeT) ((case-lambda ((g$t$14100$1IfLeT) ((case-lambda ((g$ls/false$14101$1IfLeT) (if (if g$ls/false$14101$1IfLeT (begin '#f (apply (case-lambda ((g$id$14102$1IfLeT) (g$id?$9838$1IfLeT g$id$14102$1IfLeT))) g$ls/false$14101$1IfLeT)) '#f) (apply (case-lambda ((g$id$14103$1IfLeT) ((case-lambda ((g$label$14104$1IfLeT) ((case-lambda ((g$b$14105$1IfLeT) ((case-lambda (() (if (eq? (g$binding-type$9854$1IfLeT g$b$14105$1IfLeT) 'syntax) (call-with-values (case-lambda (() ((case-lambda ((g$var.lev$14108$1IfLeT) (g$gen-ref$14021$1IfLeT g$src$14090$1IfLeT (car g$var.lev$14108$1IfLeT) (cdr g$var.lev$14108$1IfLeT) g$maps$14093$1IfLeT))) (g$binding-value$9855$1IfLeT g$b$14105$1IfLeT)))) (case-lambda ((g$var$14109$1IfLeT g$maps$14110$1IfLeT) ((case-lambda ((g$maps$14111$1IfLeT g$var$14112$1IfLeT) (values (list 'ref g$var$14112$1IfLeT) g$maps$14111$1IfLeT))) g$maps$14110$1IfLeT g$var$14109$1IfLeT)))) (values (list 'quote g$e$14091$1IfLeT) g$maps$14093$1IfLeT))))))) (g$label->binding$9852$1IfLeT g$label$14104$1IfLeT g$r$14092$1IfLeT)))) (g$id->label$9850$1IfLeT g$e$14091$1IfLeT)))) g$ls/false$14101$1IfLeT) ((case-lambda ((g$t$14113$1IfLeT) ((case-lambda ((g$ls/false$14114$1IfLeT) (if (if g$ls/false$14114$1IfLeT (begin '#f (apply (case-lambda ((g$dots$14115$1IfLeT g$e$14116$1IfLeT) (g$ellipsis?$14094$1IfLeT g$dots$14115$1IfLeT))) g$ls/false$14114$1IfLeT)) '#f) (apply (case-lambda ((g$dots$14117$1IfLeT g$e$14118$1IfLeT) (if g$vec?$14095$1IfLeT (g$syntax-violation$10221$1IfLeT '#f '"misplaced ellipsis in syntax form" g$src$14090$1IfLeT) (g$gen-syntax$14020$1IfLeT g$src$14090$1IfLeT g$e$14118$1IfLeT g$r$14092$1IfLeT g$maps$14093$1IfLeT (case-lambda ((g$x$14119$1IfLeT) '#f)) '#f)))) g$ls/false$14114$1IfLeT) ((case-lambda ((g$t$14120$1IfLeT) ((case-lambda ((g$ls/false$14121$1IfLeT) (if (if g$ls/false$14121$1IfLeT (begin '#f (apply (case-lambda ((g$x$14122$1IfLeT g$dots$14123$1IfLeT g$y$14124$1IfLeT) (g$ellipsis?$14094$1IfLeT g$dots$14123$1IfLeT))) g$ls/false$14121$1IfLeT)) '#f) (apply (case-lambda ((g$x$14125$1IfLeT g$dots$14126$1IfLeT g$y$14127$1IfLeT) ((letrec ((g$f$14128$1IfLeT (case-lambda ((g$y$14129$1IfLeT g$k$14130$1IfLeT) ((case-lambda ((g$t$14131$1IfLeT) ((case-lambda ((g$ls/false$14132$1IfLeT) (if (if g$ls/false$14132$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14132$1IfLeT)) '#f) (apply (case-lambda (() (g$k$14130$1IfLeT g$maps$14093$1IfLeT))) g$ls/false$14132$1IfLeT) ((case-lambda ((g$t$14133$1IfLeT) ((case-lambda ((g$ls/false$14134$1IfLeT) (if (if g$ls/false$14134$1IfLeT (begin '#f (apply (case-lambda ((g$dots$14135$1IfLeT g$y$14136$1IfLeT) (g$ellipsis?$14094$1IfLeT g$dots$14135$1IfLeT))) g$ls/false$14134$1IfLeT)) '#f) (apply (case-lambda ((g$dots$14137$1IfLeT g$y$14138$1IfLeT) (g$f$14128$1IfLeT g$y$14138$1IfLeT (case-lambda ((g$maps$14139$1IfLeT) (call-with-values (case-lambda (() (g$k$14130$1IfLeT (cons '() g$maps$14139$1IfLeT)))) (case-lambda ((g$x$14142$1IfLeT g$maps$14143$1IfLeT) ((case-lambda ((g$maps$14144$1IfLeT g$x$14145$1IfLeT) (if (null? (car g$maps$14144$1IfLeT)) (g$syntax-violation$10221$1IfLeT '#f '"extra ellipsis in syntax form" g$src$14090$1IfLeT) (values (g$gen-mappend$14023$1IfLeT g$x$14145$1IfLeT (car g$maps$14144$1IfLeT)) (cdr g$maps$14144$1IfLeT))))) g$maps$14143$1IfLeT g$x$14142$1IfLeT))))))))) g$ls/false$14134$1IfLeT) ((case-lambda ((g$t$14146$1IfLeT) ((case-lambda ((g$ls/false$14147$1IfLeT) (if (if g$ls/false$14147$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14147$1IfLeT)) '#f) (apply (case-lambda (() (call-with-values (case-lambda (() (g$gen-syntax$14020$1IfLeT g$src$14090$1IfLeT g$y$14129$1IfLeT g$r$14092$1IfLeT g$maps$14093$1IfLeT g$ellipsis?$14094$1IfLeT g$vec?$14095$1IfLeT))) (case-lambda ((g$y$14150$1IfLeT g$maps$14151$1IfLeT) ((case-lambda ((g$maps$14152$1IfLeT g$y$14153$1IfLeT) (call-with-values (case-lambda (() (g$k$14130$1IfLeT g$maps$14152$1IfLeT))) (case-lambda ((g$x$14156$1IfLeT g$maps$14157$1IfLeT) ((case-lambda ((g$maps$14158$1IfLeT g$x$14159$1IfLeT) (values (g$gen-append$14022$1IfLeT g$x$14159$1IfLeT g$y$14153$1IfLeT) g$maps$14158$1IfLeT))) g$maps$14157$1IfLeT g$x$14156$1IfLeT)))))) g$maps$14151$1IfLeT g$y$14150$1IfLeT)))))) g$ls/false$14147$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14146$1IfLeT)))) ((case-lambda ((g$x$14160$1IfLeT) '())) g$t$14146$1IfLeT)))) g$t$14133$1IfLeT)))) ((case-lambda ((g$x$14161$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14161$1IfLeT) (begin '#f ((case-lambda ((g$q$14162$1IfLeT) (if g$q$14162$1IfLeT (begin '#f ((case-lambda ((g$r$14163$1IfLeT) (if g$r$14163$1IfLeT (begin '#f (append g$q$14162$1IfLeT g$r$14163$1IfLeT)) '#f))) ((case-lambda ((g$x$14164$1IfLeT) (list g$x$14164$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$14161$1IfLeT)))) '#f))) ((case-lambda ((g$x$14165$1IfLeT) (list g$x$14165$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14161$1IfLeT)))) '#f))) g$t$14133$1IfLeT)))) g$t$14131$1IfLeT)))) ((case-lambda ((g$x$14166$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14166$1IfLeT) '()) (begin '#f '()) '#f))) g$t$14131$1IfLeT)))) g$y$14129$1IfLeT))))) g$f$14128$1IfLeT) g$y$14127$1IfLeT (case-lambda ((g$maps$14167$1IfLeT) (call-with-values (case-lambda (() (g$gen-syntax$14020$1IfLeT g$src$14090$1IfLeT g$x$14125$1IfLeT g$r$14092$1IfLeT (cons '() g$maps$14167$1IfLeT) g$ellipsis?$14094$1IfLeT '#f))) (case-lambda ((g$x$14170$1IfLeT g$maps$14171$1IfLeT) ((case-lambda ((g$maps$14172$1IfLeT g$x$14173$1IfLeT) (if (null? (car g$maps$14172$1IfLeT)) (g$syntax-violation$10221$1IfLeT '#f '"extra ellipsis in syntax form" g$src$14090$1IfLeT) (values (g$gen-map$14024$1IfLeT g$x$14173$1IfLeT (car g$maps$14172$1IfLeT)) (cdr g$maps$14172$1IfLeT))))) g$maps$14171$1IfLeT g$x$14170$1IfLeT))))))))) g$ls/false$14121$1IfLeT) ((case-lambda ((g$t$14174$1IfLeT) ((case-lambda ((g$ls/false$14175$1IfLeT) (if (if g$ls/false$14175$1IfLeT (begin '#f (apply (case-lambda ((g$x$14176$1IfLeT g$y$14177$1IfLeT) '#t)) g$ls/false$14175$1IfLeT)) '#f) (apply (case-lambda ((g$x$14178$1IfLeT g$y$14179$1IfLeT) (call-with-values (case-lambda (() (g$gen-syntax$14020$1IfLeT g$src$14090$1IfLeT g$x$14178$1IfLeT g$r$14092$1IfLeT g$maps$14093$1IfLeT g$ellipsis?$14094$1IfLeT '#f))) (case-lambda ((g$xnew$14182$1IfLeT g$maps$14183$1IfLeT) ((case-lambda ((g$maps$14184$1IfLeT g$xnew$14185$1IfLeT) (call-with-values (case-lambda (() (g$gen-syntax$14020$1IfLeT g$src$14090$1IfLeT g$y$14179$1IfLeT g$r$14092$1IfLeT g$maps$14184$1IfLeT g$ellipsis?$14094$1IfLeT g$vec?$14095$1IfLeT))) (case-lambda ((g$ynew$14188$1IfLeT g$maps$14189$1IfLeT) ((case-lambda ((g$maps$14190$1IfLeT g$ynew$14191$1IfLeT) (values (g$gen-cons$14025$1IfLeT g$e$14091$1IfLeT g$x$14178$1IfLeT g$y$14179$1IfLeT g$xnew$14185$1IfLeT g$ynew$14191$1IfLeT) g$maps$14190$1IfLeT))) g$maps$14189$1IfLeT g$ynew$14188$1IfLeT)))))) g$maps$14183$1IfLeT g$xnew$14182$1IfLeT)))))) g$ls/false$14175$1IfLeT) ((case-lambda ((g$t$14192$1IfLeT) ((case-lambda ((g$ls/false$14193$1IfLeT) (if (if g$ls/false$14193$1IfLeT (begin '#f (apply (case-lambda ((g$ls$14194$1IfLeT) '#t)) g$ls/false$14193$1IfLeT)) '#f) (apply (case-lambda ((g$ls$14195$1IfLeT) (call-with-values (case-lambda (() (g$gen-syntax$14020$1IfLeT g$src$14090$1IfLeT g$ls$14195$1IfLeT g$r$14092$1IfLeT g$maps$14093$1IfLeT g$ellipsis?$14094$1IfLeT '#t))) (case-lambda ((g$lsnew$14198$1IfLeT g$maps$14199$1IfLeT) ((case-lambda ((g$maps$14200$1IfLeT g$lsnew$14201$1IfLeT) (values (g$gen-vector$14026$1IfLeT g$e$14091$1IfLeT g$ls$14195$1IfLeT g$lsnew$14201$1IfLeT) g$maps$14200$1IfLeT))) g$maps$14199$1IfLeT g$lsnew$14198$1IfLeT)))))) g$ls/false$14193$1IfLeT) ((case-lambda ((g$t$14202$1IfLeT) ((case-lambda ((g$ls/false$14203$1IfLeT) (if (if g$ls/false$14203$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14203$1IfLeT)) '#f) (apply (case-lambda (() (values (list 'quote g$e$14091$1IfLeT) g$maps$14093$1IfLeT))) g$ls/false$14203$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14202$1IfLeT)))) ((case-lambda ((g$x$14204$1IfLeT) '())) g$t$14202$1IfLeT)))) g$t$14192$1IfLeT)))) ((case-lambda ((g$x$14205$1IfLeT) (if (g$syntax-vector?$9832$1IfLeT g$x$14205$1IfLeT) (begin '#f ((letrec ((g$f$14206$1IfLeT (case-lambda ((g$x$14207$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14207$1IfLeT) ((case-lambda ((g$cars/f$14208$1IfLeT) (if g$cars/f$14208$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14209$1IfLeT) (if g$cdrs/f$14209$1IfLeT (begin '#f (map cons g$cars/f$14208$1IfLeT g$cdrs/f$14209$1IfLeT)) '#f))) (g$f$14206$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14207$1IfLeT)))) '#f))) ((case-lambda ((g$x$14210$1IfLeT) (list g$x$14210$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14207$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14207$1IfLeT) (list (begin 'ls '())) '#f)))))) g$f$14206$1IfLeT) (g$syntax-vector->list$9830$1IfLeT g$x$14205$1IfLeT))) '#f))) g$t$14192$1IfLeT)))) g$t$14174$1IfLeT)))) ((case-lambda ((g$x$14211$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14211$1IfLeT) (begin '#f ((case-lambda ((g$q$14212$1IfLeT) (if g$q$14212$1IfLeT (begin '#f ((case-lambda ((g$r$14213$1IfLeT) (if g$r$14213$1IfLeT (begin '#f (append g$q$14212$1IfLeT g$r$14213$1IfLeT)) '#f))) ((case-lambda ((g$x$14214$1IfLeT) (list g$x$14214$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$14211$1IfLeT)))) '#f))) ((case-lambda ((g$x$14215$1IfLeT) (list g$x$14215$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14211$1IfLeT)))) '#f))) g$t$14174$1IfLeT)))) g$t$14120$1IfLeT)))) ((case-lambda ((g$x$14216$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14216$1IfLeT) (begin '#f ((case-lambda ((g$q$14217$1IfLeT) (if g$q$14217$1IfLeT (begin '#f ((case-lambda ((g$r$14218$1IfLeT) (if g$r$14218$1IfLeT (begin '#f (append g$q$14217$1IfLeT g$r$14218$1IfLeT)) '#f))) ((case-lambda ((g$x$14219$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14219$1IfLeT) (begin '#f ((case-lambda ((g$q$14220$1IfLeT) (if g$q$14220$1IfLeT (begin '#f ((case-lambda ((g$r$14221$1IfLeT) (if g$r$14221$1IfLeT (begin '#f (append g$q$14220$1IfLeT g$r$14221$1IfLeT)) '#f))) ((case-lambda ((g$x$14222$1IfLeT) (list g$x$14222$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$14219$1IfLeT)))) '#f))) ((case-lambda ((g$x$14223$1IfLeT) (list g$x$14223$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14219$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14216$1IfLeT)))) '#f))) ((case-lambda ((g$x$14224$1IfLeT) (list g$x$14224$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14216$1IfLeT)))) '#f))) g$t$14120$1IfLeT)))) g$t$14113$1IfLeT)))) ((case-lambda ((g$x$14225$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14225$1IfLeT) (begin '#f ((case-lambda ((g$q$14226$1IfLeT) (if g$q$14226$1IfLeT (begin '#f ((case-lambda ((g$r$14227$1IfLeT) (if g$r$14227$1IfLeT (begin '#f (append g$q$14226$1IfLeT g$r$14227$1IfLeT)) '#f))) ((case-lambda ((g$x$14228$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14228$1IfLeT) (begin '#f ((case-lambda ((g$q$14229$1IfLeT) (if g$q$14229$1IfLeT (begin '#f ((case-lambda ((g$r$14230$1IfLeT) (if g$r$14230$1IfLeT (begin '#f (append g$q$14229$1IfLeT g$r$14230$1IfLeT)) '#f))) ((case-lambda ((g$x$14231$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14231$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14228$1IfLeT)))) '#f))) ((case-lambda ((g$x$14232$1IfLeT) (list g$x$14232$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14228$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14225$1IfLeT)))) '#f))) ((case-lambda ((g$x$14233$1IfLeT) (list g$x$14233$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14225$1IfLeT)))) '#f))) g$t$14113$1IfLeT)))) g$t$14100$1IfLeT)))) ((case-lambda ((g$x$14234$1IfLeT) (list g$x$14234$1IfLeT))) g$t$14100$1IfLeT)))) g$t$14096$1IfLeT)))) ((case-lambda ((g$x$14235$1IfLeT) (list g$x$14235$1IfLeT))) g$t$14096$1IfLeT)))) g$e$14091$1IfLeT)))) (g$gen-ref$14021$1IfLeT (case-lambda ((g$src$14077$1IfLeT g$var$14078$1IfLeT g$level$14079$1IfLeT g$maps$14080$1IfLeT) (if (= g$level$14079$1IfLeT '0) (values g$var$14078$1IfLeT g$maps$14080$1IfLeT) (if (null? g$maps$14080$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"missing ellipsis in syntax form" g$src$14077$1IfLeT) (call-with-values (case-lambda (() (g$gen-ref$14021$1IfLeT g$src$14077$1IfLeT g$var$14078$1IfLeT (- g$level$14079$1IfLeT '1) (cdr g$maps$14080$1IfLeT)))) (case-lambda ((g$outer-var$14083$1IfLeT g$outer-maps$14084$1IfLeT) ((case-lambda ((g$outer-maps$14085$1IfLeT g$outer-var$14086$1IfLeT) ((case-lambda ((g$t$14087$1IfLeT) (if g$t$14087$1IfLeT ((case-lambda ((g$b$14088$1IfLeT) (values (cdr g$b$14088$1IfLeT) g$maps$14080$1IfLeT))) g$t$14087$1IfLeT) ((case-lambda ((g$inner-var$14089$1IfLeT) (values g$inner-var$14089$1IfLeT (cons (cons (cons g$outer-var$14086$1IfLeT g$inner-var$14089$1IfLeT) (car g$maps$14080$1IfLeT)) g$outer-maps$14085$1IfLeT)))) (g$gen-lexical$9782$1IfLeT 'tmp))))) (assq g$outer-var$14086$1IfLeT (car g$maps$14080$1IfLeT))))) g$outer-maps$14084$1IfLeT g$outer-var$14083$1IfLeT))))))))) (g$gen-append$14022$1IfLeT (case-lambda ((g$x$14075$1IfLeT g$y$14076$1IfLeT) (if (equal? g$y$14076$1IfLeT ''()) g$x$14075$1IfLeT (list 'append g$x$14075$1IfLeT g$y$14076$1IfLeT))))) (g$gen-mappend$14023$1IfLeT (case-lambda ((g$e$14073$1IfLeT g$map-env$14074$1IfLeT) (list 'apply '(primitive append) (g$gen-map$14024$1IfLeT g$e$14073$1IfLeT g$map-env$14074$1IfLeT))))) (g$gen-map$14024$1IfLeT (case-lambda ((g$e$14064$1IfLeT g$map-env$14065$1IfLeT) ((case-lambda ((g$formals$14066$1IfLeT g$actuals$14067$1IfLeT) (if (eq? (car g$e$14064$1IfLeT) 'ref) (car g$actuals$14067$1IfLeT) (if (g$for-all$8490$1IfLeT (case-lambda ((g$x$14068$1IfLeT) (if (eq? (car g$x$14068$1IfLeT) 'ref) (begin '#f (memq (g$cadr$8070$1IfLeT g$x$14068$1IfLeT) g$formals$14066$1IfLeT)) '#f))) (cdr g$e$14064$1IfLeT)) ((case-lambda ((g$args$14069$1IfLeT) (cons 'map (cons (list 'primitive (car g$e$14064$1IfLeT)) g$args$14069$1IfLeT)))) (map ((case-lambda ((g$r$14070$1IfLeT) (case-lambda ((g$x$14071$1IfLeT) (cdr (assq (g$cadr$8070$1IfLeT g$x$14071$1IfLeT) g$r$14070$1IfLeT)))))) (map cons g$formals$14066$1IfLeT g$actuals$14067$1IfLeT)) (cdr g$e$14064$1IfLeT))) (g$cons*$8492$1IfLeT 'map (list 'lambda g$formals$14066$1IfLeT g$e$14064$1IfLeT) g$actuals$14067$1IfLeT))))) (map cdr g$map-env$14065$1IfLeT) (map (case-lambda ((g$x$14072$1IfLeT) (list 'ref (car g$x$14072$1IfLeT)))) g$map-env$14065$1IfLeT))))) (g$gen-cons$14025$1IfLeT (case-lambda ((g$e$14056$1IfLeT g$x$14057$1IfLeT g$y$14058$1IfLeT g$xnew$14059$1IfLeT g$ynew$14060$1IfLeT) ((case-lambda ((g$t$14061$1IfLeT) (if (memv g$t$14061$1IfLeT '(quote)) (if (eq? (car g$xnew$14059$1IfLeT) 'quote) ((case-lambda ((g$xnew$14062$1IfLeT g$ynew$14063$1IfLeT) (if (if (eq? g$xnew$14062$1IfLeT g$x$14057$1IfLeT) (begin '#f (eq? g$ynew$14063$1IfLeT g$y$14058$1IfLeT)) '#f) (list 'quote g$e$14056$1IfLeT) (list 'quote (cons g$xnew$14062$1IfLeT g$ynew$14063$1IfLeT))))) (g$cadr$8070$1IfLeT g$xnew$14059$1IfLeT) (g$cadr$8070$1IfLeT g$ynew$14060$1IfLeT)) (if (null? (g$cadr$8070$1IfLeT g$ynew$14060$1IfLeT)) (list 'list g$xnew$14059$1IfLeT) (list 'cons g$xnew$14059$1IfLeT g$ynew$14060$1IfLeT))) (if (memv g$t$14061$1IfLeT '(list)) (cons 'list (cons g$xnew$14059$1IfLeT (cdr g$ynew$14060$1IfLeT))) (list 'cons g$xnew$14059$1IfLeT g$ynew$14060$1IfLeT))))) (car g$ynew$14060$1IfLeT))))) (g$gen-vector$14026$1IfLeT (case-lambda ((g$e$14053$1IfLeT g$ls$14054$1IfLeT g$lsnew$14055$1IfLeT) (if (eq? (car g$lsnew$14055$1IfLeT) 'quote) (if (eq? (g$cadr$8070$1IfLeT g$lsnew$14055$1IfLeT) g$ls$14054$1IfLeT) (list 'quote g$e$14053$1IfLeT) (list 'quote (list->vector (g$cadr$8070$1IfLeT g$lsnew$14055$1IfLeT)))) (if (eq? (car g$lsnew$14055$1IfLeT) 'list) (cons 'vector (cdr g$lsnew$14055$1IfLeT)) (list 'list->vector g$lsnew$14055$1IfLeT)))))) (g$regen$14027$1IfLeT (case-lambda ((g$x$14050$1IfLeT) ((case-lambda ((g$t$14051$1IfLeT) (if (memv g$t$14051$1IfLeT '(ref)) (g$cadr$8070$1IfLeT g$x$14050$1IfLeT) (if (memv g$t$14051$1IfLeT '(primitive)) (list 'primitive (g$cadr$8070$1IfLeT g$x$14050$1IfLeT)) (if (memv g$t$14051$1IfLeT '(quote)) (list 'quote (g$cadr$8070$1IfLeT g$x$14050$1IfLeT)) (if (memv g$t$14051$1IfLeT '(lambda)) (g$build-lambda$9769$1IfLeT '#f (g$cadr$8070$1IfLeT g$x$14050$1IfLeT) (g$regen$14027$1IfLeT (g$caddr$8076$1IfLeT g$x$14050$1IfLeT))) (if (memv g$t$14051$1IfLeT '(map)) ((case-lambda ((g$ls$14052$1IfLeT) (cons '(primitive ellipsis-map) g$ls$14052$1IfLeT))) (map g$regen$14027$1IfLeT (cdr g$x$14050$1IfLeT))) (cons (list 'primitive (car g$x$14050$1IfLeT)) (map g$regen$14027$1IfLeT (cdr g$x$14050$1IfLeT)))))))))) (car g$x$14050$1IfLeT)))))) (case-lambda ((g$e$14028$1IfLeT g$r$14029$1IfLeT g$mr$14030$1IfLeT) ((case-lambda ((g$t$14031$1IfLeT) ((case-lambda ((g$ls/false$14032$1IfLeT) (if (if g$ls/false$14032$1IfLeT (begin '#f (apply (case-lambda ((g$x$14033$1IfLeT) '#t)) g$ls/false$14032$1IfLeT)) '#f) (apply (case-lambda ((g$x$14034$1IfLeT) (call-with-values (case-lambda (() (g$gen-syntax$14020$1IfLeT g$e$14028$1IfLeT g$x$14034$1IfLeT g$r$14029$1IfLeT '() g$ellipsis?$10118$1IfLeT '#f))) (case-lambda ((g$e$14037$1IfLeT g$maps$14038$1IfLeT) ((case-lambda ((g$maps$14039$1IfLeT g$e$14040$1IfLeT) (g$regen$14027$1IfLeT g$e$14040$1IfLeT))) g$maps$14038$1IfLeT g$e$14037$1IfLeT)))))) g$ls/false$14032$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14031$1IfLeT)))) ((case-lambda ((g$x$14041$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14041$1IfLeT) (begin '#f ((case-lambda ((g$q$14042$1IfLeT) (if g$q$14042$1IfLeT (begin '#f ((case-lambda ((g$r$14043$1IfLeT) (if g$r$14043$1IfLeT (begin '#f (append g$q$14042$1IfLeT g$r$14043$1IfLeT)) '#f))) ((case-lambda ((g$x$14044$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14044$1IfLeT) (begin '#f ((case-lambda ((g$q$14045$1IfLeT) (if g$q$14045$1IfLeT (begin '#f ((case-lambda ((g$r$14046$1IfLeT) (if g$r$14046$1IfLeT (begin '#f (append g$q$14045$1IfLeT g$r$14046$1IfLeT)) '#f))) ((case-lambda ((g$x$14047$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14047$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14044$1IfLeT)))) '#f))) ((case-lambda ((g$x$14048$1IfLeT) (list g$x$14048$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14044$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14041$1IfLeT)))) '#f))) ((case-lambda ((g$x$14049$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14041$1IfLeT)))) '#f))) g$t$14031$1IfLeT)))) g$e$14028$1IfLeT)))))))) (g$core-macro-transformer$10122$1IfLeT g$core-macro-transformer$16227$1IfLeT (case-lambda ((g$name$14236$1IfLeT) ((case-lambda ((g$t$14237$1IfLeT) (if (memv g$t$14237$1IfLeT '(quote)) g$quote-transformer$10080$1IfLeT (if (memv g$t$14237$1IfLeT '(lambda)) g$lambda-transformer$10082$1IfLeT (if (memv g$t$14237$1IfLeT '(case-lambda)) g$case-lambda-transformer$10081$1IfLeT (if (memv g$t$14237$1IfLeT '(letrec)) g$letrec-transformer$10070$1IfLeT (if (memv g$t$14237$1IfLeT '(letrec*)) g$letrec*-transformer$10071$1IfLeT (if (memv g$t$14237$1IfLeT '(case)) g$case-transformer$10079$1IfLeT (if (memv g$t$14237$1IfLeT '(if)) g$if-transformer$10078$1IfLeT (if (memv g$t$14237$1IfLeT '(when)) g$when-transformer$10076$1IfLeT (if (memv g$t$14237$1IfLeT '(unless)) g$unless-transformer$10077$1IfLeT (if (memv g$t$14237$1IfLeT '(parameterize)) g$parameterize-transformer$10114$1IfLeT (if (memv g$t$14237$1IfLeT '(foreign-call)) g$foreign-call-transformer$10115$1IfLeT (if (memv g$t$14237$1IfLeT '(syntax-case)) g$syntax-case-transformer$10119$1IfLeT (if (memv g$t$14237$1IfLeT '(syntax)) g$syntax-transformer$10121$1IfLeT (if (memv g$t$14237$1IfLeT '(type-descriptor)) g$type-descriptor-transformer$10073$1IfLeT (if (memv g$t$14237$1IfLeT '(record-type-descriptor)) g$record-type-descriptor-transformer$10074$1IfLeT (if (memv g$t$14237$1IfLeT '(record-constructor-descriptor)) g$record-constructor-descriptor-transformer$10075$1IfLeT (if (memv g$t$14237$1IfLeT '(fluid-let-syntax)) g$fluid-let-syntax-transformer$10072$1IfLeT (assertion-violation 'macro-transformer '"BUG: cannot find transformer" g$name$14236$1IfLeT)))))))))))))))))))) g$name$14236$1IfLeT)))) (g$file-options-macro$10123$1IfLeT g$file-options-macro$16228$1IfLeT (case-lambda ((g$x$14238$1IfLeT) ((case-lambda ((g$t$14239$1IfLeT) ((case-lambda ((g$ls/false$14240$1IfLeT) (if (if g$ls/false$14240$1IfLeT (begin '#f (apply (case-lambda ((g$opt*$14241$1IfLeT) (if (g$for-all$8490$1IfLeT g$id?$9838$1IfLeT g$opt*$14241$1IfLeT) (begin '#f (g$file-options-spec$9321$1IfLeT (map g$id->sym$9839$1IfLeT g$opt*$14241$1IfLeT))) '#f))) g$ls/false$14240$1IfLeT)) '#f) (apply (case-lambda ((g$opt*$14242$1IfLeT) (g$bless$10083$1IfLeT (list 'quote (g$file-options-spec$9321$1IfLeT (map g$id->sym$9839$1IfLeT g$opt*$14242$1IfLeT)))))) g$ls/false$14240$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14239$1IfLeT)))) ((case-lambda ((g$x$14243$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14243$1IfLeT) (begin '#f ((case-lambda ((g$q$14244$1IfLeT) (if g$q$14244$1IfLeT (begin '#f ((case-lambda ((g$r$14245$1IfLeT) (if g$r$14245$1IfLeT (begin '#f (append g$q$14244$1IfLeT g$r$14245$1IfLeT)) '#f))) ((letrec ((g$f$14246$1IfLeT (case-lambda ((g$x$14247$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14247$1IfLeT) ((case-lambda ((g$cars/f$14248$1IfLeT) (if g$cars/f$14248$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14249$1IfLeT) (if g$cdrs/f$14249$1IfLeT (begin '#f (map cons g$cars/f$14248$1IfLeT g$cdrs/f$14249$1IfLeT)) '#f))) (g$f$14246$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14247$1IfLeT)))) '#f))) ((case-lambda ((g$x$14250$1IfLeT) (list g$x$14250$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14247$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14247$1IfLeT) (list (begin 'opt* '())) '#f)))))) g$f$14246$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14243$1IfLeT)))) '#f))) ((case-lambda ((g$x$14251$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14243$1IfLeT)))) '#f))) g$t$14239$1IfLeT)))) g$x$14238$1IfLeT)))) (g$symbol-macro$10124$1IfLeT g$symbol-macro$16229$1IfLeT (case-lambda ((g$x$14252$1IfLeT g$set$14253$1IfLeT) ((case-lambda ((g$t$14254$1IfLeT) ((case-lambda ((g$ls/false$14255$1IfLeT) (if (if g$ls/false$14255$1IfLeT (begin '#f (apply (case-lambda ((g$name$14256$1IfLeT) (if (g$id?$9838$1IfLeT g$name$14256$1IfLeT) (begin '#f (memq (g$id->sym$9839$1IfLeT g$name$14256$1IfLeT) g$set$14253$1IfLeT)) '#f))) g$ls/false$14255$1IfLeT)) '#f) (apply (case-lambda ((g$name$14257$1IfLeT) (g$bless$10083$1IfLeT (list 'quote g$name$14257$1IfLeT)))) g$ls/false$14255$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14254$1IfLeT)))) ((case-lambda ((g$x$14258$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14258$1IfLeT) (begin '#f ((case-lambda ((g$q$14259$1IfLeT) (if g$q$14259$1IfLeT (begin '#f ((case-lambda ((g$r$14260$1IfLeT) (if g$r$14260$1IfLeT (begin '#f (append g$q$14259$1IfLeT g$r$14260$1IfLeT)) '#f))) ((case-lambda ((g$x$14261$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14261$1IfLeT) (begin '#f ((case-lambda ((g$q$14262$1IfLeT) (if g$q$14262$1IfLeT (begin '#f ((case-lambda ((g$r$14263$1IfLeT) (if g$r$14263$1IfLeT (begin '#f (append g$q$14262$1IfLeT g$r$14263$1IfLeT)) '#f))) ((case-lambda ((g$x$14264$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14264$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14261$1IfLeT)))) '#f))) ((case-lambda ((g$x$14265$1IfLeT) (list g$x$14265$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14261$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14258$1IfLeT)))) '#f))) ((case-lambda ((g$x$14266$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14258$1IfLeT)))) '#f))) g$t$14254$1IfLeT)))) g$x$14252$1IfLeT)))) (g$macro-transformer$10125$1IfLeT g$macro-transformer$16230$1IfLeT (case-lambda ((g$x$14267$1IfLeT) (if (procedure? g$x$14267$1IfLeT) g$x$14267$1IfLeT (if (symbol? g$x$14267$1IfLeT) ((case-lambda ((g$t$14268$1IfLeT) (if (memv g$t$14268$1IfLeT '(define-record-type)) g$define-record-type-macro$10111$1IfLeT (if (memv g$t$14268$1IfLeT '(define-struct)) g$define-struct-macro$10110$1IfLeT (if (memv g$t$14268$1IfLeT '(include)) g$include-macro$10105$1IfLeT (if (memv g$t$14268$1IfLeT '(cond)) g$cond-macro$10103$1IfLeT (if (memv g$t$14268$1IfLeT '(let)) g$let-macro$10086$1IfLeT (if (memv g$t$14268$1IfLeT '(do)) g$do-macro$10099$1IfLeT (if (memv g$t$14268$1IfLeT '(or)) g$or-macro$10101$1IfLeT (if (memv g$t$14268$1IfLeT '(and)) g$and-macro$10102$1IfLeT (if (memv g$t$14268$1IfLeT '(let*)) g$let*-macro$10100$1IfLeT (if (memv g$t$14268$1IfLeT '(let-values)) g$let-values-macro$10087$1IfLeT (if (memv g$t$14268$1IfLeT '(let*-values)) g$let*-values-macro$10088$1IfLeT (if (memv g$t$14268$1IfLeT '(syntax-rules)) g$syntax-rules-macro$10107$1IfLeT (if (memv g$t$14268$1IfLeT '(quasiquote)) g$quasiquote-macro$10108$1IfLeT (if (memv g$t$14268$1IfLeT '(quasisyntax)) g$quasisyntax-macro$10109$1IfLeT (if (memv g$t$14268$1IfLeT '(with-syntax)) g$with-syntax-macro$10084$1IfLeT (if (memv g$t$14268$1IfLeT '(identifier-syntax)) g$identifier-syntax-macro$10098$1IfLeT (if (memv g$t$14268$1IfLeT '(time)) g$time-macro$10094$1IfLeT (if (memv g$t$14268$1IfLeT '(delay)) g$delay-macro$10095$1IfLeT (if (memv g$t$14268$1IfLeT '(assert)) g$assert-macro$10096$1IfLeT (if (memv g$t$14268$1IfLeT '(endianness)) g$endianness-macro$10097$1IfLeT (if (memv g$t$14268$1IfLeT '(guard)) g$guard-macro$10092$1IfLeT (if (memv g$t$14268$1IfLeT '(define-enumeration)) g$define-enumeration-macro$10093$1IfLeT (if (memv g$t$14268$1IfLeT '(trace-lambda)) g$trace-lambda-macro$10089$1IfLeT (if (memv g$t$14268$1IfLeT '(trace-define)) g$trace-define-macro$10090$1IfLeT (if (memv g$t$14268$1IfLeT '(trace-define-syntax)) g$trace-define-syntax-macro$10091$1IfLeT (if (memv g$t$14268$1IfLeT '(define-condition-type)) g$define-condition-type-macro$10112$1IfLeT (if (memv g$t$14268$1IfLeT '(include-into)) g$include-into-macro$10106$1IfLeT (if (memv g$t$14268$1IfLeT '(eol-style)) (case-lambda ((g$x$14271$1IfLeT) (g$symbol-macro$10124$1IfLeT g$x$14271$1IfLeT '(none lf cr crlf nel crnel ls)))) (if (memv g$t$14268$1IfLeT '(error-handling-mode)) (case-lambda ((g$x$14270$1IfLeT) (g$symbol-macro$10124$1IfLeT g$x$14270$1IfLeT '(ignore raise replace)))) (if (memv g$t$14268$1IfLeT '(buffer-mode)) (case-lambda ((g$x$14269$1IfLeT) (g$symbol-macro$10124$1IfLeT g$x$14269$1IfLeT '(none line block)))) (if (memv g$t$14268$1IfLeT '(file-options)) g$file-options-macro$10123$1IfLeT (if (memv g$t$14268$1IfLeT '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$incorrect-usage-macro$10113$1IfLeT (error 'macro-transformer '"BUG: invalid macro" g$x$14267$1IfLeT))))))))))))))))))))))))))))))))))) g$x$14267$1IfLeT) (error 'core-macro-transformer '"BUG: invalid macro" g$x$14267$1IfLeT)))))) (g$local-macro-transformer$10126$1IfLeT g$local-macro-transformer$16231$1IfLeT (case-lambda ((g$x$14272$1IfLeT) (car g$x$14272$1IfLeT)))) (g$do-macro-call$10127$1IfLeT g$do-macro-call$16232$1IfLeT (case-lambda ((g$transformer$14273$1IfLeT g$expr$14274$1IfLeT) ((case-lambda ((g$out$14275$1IfLeT) (begin ((letrec ((g$f$14276$1IfLeT (case-lambda ((g$x$14277$1IfLeT) (if (g$stx?$9810$1IfLeT g$x$14277$1IfLeT) (void) (if (pair? g$x$14277$1IfLeT) (begin (g$f$14276$1IfLeT (car g$x$14277$1IfLeT)) (g$f$14276$1IfLeT (cdr g$x$14277$1IfLeT))) (if (vector? g$x$14277$1IfLeT) (vector-for-each g$f$14276$1IfLeT g$x$14277$1IfLeT) (if (symbol? g$x$14277$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"raw symbol encountered in output of macro" g$expr$14274$1IfLeT g$x$14277$1IfLeT) (void))))))))) g$f$14276$1IfLeT) g$out$14275$1IfLeT) (g$add-mark$9827$1IfLeT (g$gen-mark$9822$1IfLeT) g$out$14275$1IfLeT g$expr$14274$1IfLeT)))) (g$transformer$14273$1IfLeT (g$add-mark$9827$1IfLeT g$anti-mark$9823$1IfLeT g$expr$14274$1IfLeT '#f)))))) (g$chi-macro$10128$1IfLeT g$chi-macro$16233$1IfLeT (case-lambda ((g$p$14278$1IfLeT g$e$14279$1IfLeT) (g$do-macro-call$10127$1IfLeT (g$macro-transformer$10125$1IfLeT g$p$14278$1IfLeT) g$e$14279$1IfLeT)))) (g$chi-local-macro$10129$1IfLeT g$chi-local-macro$16234$1IfLeT (case-lambda ((g$p$14280$1IfLeT g$e$14281$1IfLeT) (g$do-macro-call$10127$1IfLeT (g$local-macro-transformer$10126$1IfLeT g$p$14280$1IfLeT) g$e$14281$1IfLeT)))) (g$chi-global-macro$10130$1IfLeT g$chi-global-macro$16235$1IfLeT (case-lambda ((g$p$14282$1IfLeT g$e$14283$1IfLeT) ((case-lambda ((g$lib$14284$1IfLeT g$loc$14285$1IfLeT) (begin (g$visit-library$9655$1IfLeT g$lib$14284$1IfLeT) ((case-lambda ((g$x$14286$1IfLeT) ((case-lambda ((g$transformer$14287$1IfLeT) (g$do-macro-call$10127$1IfLeT g$transformer$14287$1IfLeT g$e$14283$1IfLeT))) (if (procedure? g$x$14286$1IfLeT) g$x$14286$1IfLeT (assertion-violation 'chi-global-macro '"BUG: not a procedure" g$x$14286$1IfLeT))))) (symbol-value g$loc$14285$1IfLeT))))) (car g$p$14282$1IfLeT) (cdr g$p$14282$1IfLeT))))) (g$chi-expr*$10131$1IfLeT g$chi-expr*$16236$1IfLeT (case-lambda ((g$e*$14288$1IfLeT g$r$14289$1IfLeT g$mr$14290$1IfLeT) (if (null? g$e*$14288$1IfLeT) '() ((case-lambda ((g$e$14291$1IfLeT) (cons g$e$14291$1IfLeT (g$chi-expr*$10131$1IfLeT (cdr g$e*$14288$1IfLeT) g$r$14289$1IfLeT g$mr$14290$1IfLeT)))) (g$chi-expr$10133$1IfLeT (car g$e*$14288$1IfLeT) g$r$14289$1IfLeT g$mr$14290$1IfLeT)))))) (g$chi-application$10132$1IfLeT g$chi-application$16237$1IfLeT (case-lambda ((g$e$14292$1IfLeT g$r$14293$1IfLeT g$mr$14294$1IfLeT) ((case-lambda ((g$t$14295$1IfLeT) ((case-lambda ((g$ls/false$14296$1IfLeT) (if (if g$ls/false$14296$1IfLeT (begin '#f (apply (case-lambda ((g$rator$14297$1IfLeT g$rands$14298$1IfLeT) '#t)) g$ls/false$14296$1IfLeT)) '#f) (apply (case-lambda ((g$rator$14299$1IfLeT g$rands$14300$1IfLeT) ((case-lambda ((g$rator$14301$1IfLeT) (cons g$rator$14301$1IfLeT (g$chi-expr*$10131$1IfLeT g$rands$14300$1IfLeT g$r$14293$1IfLeT g$mr$14294$1IfLeT)))) (g$chi-expr$10133$1IfLeT g$rator$14299$1IfLeT g$r$14293$1IfLeT g$mr$14294$1IfLeT)))) g$ls/false$14296$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14295$1IfLeT)))) ((case-lambda ((g$x$14302$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14302$1IfLeT) (begin '#f ((case-lambda ((g$q$14303$1IfLeT) (if g$q$14303$1IfLeT (begin '#f ((case-lambda ((g$r$14304$1IfLeT) (if g$r$14304$1IfLeT (begin '#f (append g$q$14303$1IfLeT g$r$14304$1IfLeT)) '#f))) ((letrec ((g$f$14305$1IfLeT (case-lambda ((g$x$14306$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14306$1IfLeT) ((case-lambda ((g$cars/f$14307$1IfLeT) (if g$cars/f$14307$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14308$1IfLeT) (if g$cdrs/f$14308$1IfLeT (begin '#f (map cons g$cars/f$14307$1IfLeT g$cdrs/f$14308$1IfLeT)) '#f))) (g$f$14305$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14306$1IfLeT)))) '#f))) ((case-lambda ((g$x$14309$1IfLeT) (list g$x$14309$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14306$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14306$1IfLeT) (list (begin 'rands '())) '#f)))))) g$f$14305$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14302$1IfLeT)))) '#f))) ((case-lambda ((g$x$14310$1IfLeT) (list g$x$14310$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14302$1IfLeT)))) '#f))) g$t$14295$1IfLeT)))) g$e$14292$1IfLeT)))) (g$chi-expr$10133$1IfLeT g$chi-expr$16238$1IfLeT (case-lambda ((g$e$14311$1IfLeT g$r$14312$1IfLeT g$mr$14313$1IfLeT) (call-with-values (case-lambda (() (g$syntax-type$9857$1IfLeT g$e$14311$1IfLeT g$r$14312$1IfLeT))) (case-lambda ((g$type$14317$1IfLeT g$value$14318$1IfLeT g$kwd$14319$1IfLeT) ((case-lambda ((g$kwd$14320$1IfLeT g$value$14321$1IfLeT g$type$14322$1IfLeT) ((case-lambda ((g$t$14323$1IfLeT) (if (memv g$t$14323$1IfLeT '(core-macro)) ((case-lambda ((g$transformer$14393$1IfLeT) (g$transformer$14393$1IfLeT g$e$14311$1IfLeT g$r$14312$1IfLeT g$mr$14313$1IfLeT))) (g$core-macro-transformer$10122$1IfLeT g$value$14321$1IfLeT)) (if (memv g$t$14323$1IfLeT '(global)) ((case-lambda ((g$lib$14391$1IfLeT) ((case-lambda ((g$loc$14392$1IfLeT) ((case-lambda (() (begin ((g$inv-collector$10167$1IfLeT) g$lib$14391$1IfLeT) g$loc$14392$1IfLeT)))))) (cdr g$value$14321$1IfLeT)))) (car g$value$14321$1IfLeT)) (if (memv g$t$14323$1IfLeT '(core-prim)) ((case-lambda ((g$name$14390$1IfLeT) (list 'primitive g$name$14390$1IfLeT))) g$value$14321$1IfLeT) (if (memv g$t$14323$1IfLeT '(call)) (g$chi-application$10132$1IfLeT g$e$14311$1IfLeT g$r$14312$1IfLeT g$mr$14313$1IfLeT) (if (memv g$t$14323$1IfLeT '(lexical)) ((case-lambda ((g$lex$14389$1IfLeT) g$lex$14389$1IfLeT)) (g$lexical-var$10064$1IfLeT g$value$14321$1IfLeT)) (if (memv g$t$14323$1IfLeT '(global-macro global-macro!)) (g$chi-expr$10133$1IfLeT (g$chi-global-macro$10130$1IfLeT g$value$14321$1IfLeT g$e$14311$1IfLeT) g$r$14312$1IfLeT g$mr$14313$1IfLeT) (if (memv g$t$14323$1IfLeT '(local-macro local-macro!)) (g$chi-expr$10133$1IfLeT (g$chi-local-macro$10129$1IfLeT g$value$14321$1IfLeT g$e$14311$1IfLeT) g$r$14312$1IfLeT g$mr$14313$1IfLeT) (if (memv g$t$14323$1IfLeT '(macro macro!)) (g$chi-expr$10133$1IfLeT (g$chi-macro$10128$1IfLeT g$value$14321$1IfLeT g$e$14311$1IfLeT) g$r$14312$1IfLeT g$mr$14313$1IfLeT) (if (memv g$t$14323$1IfLeT '(constant)) ((case-lambda ((g$datum$14388$1IfLeT) (list 'quote g$datum$14388$1IfLeT))) g$value$14321$1IfLeT) (if (memv g$t$14323$1IfLeT '(set!)) (g$chi-set!$10134$1IfLeT g$e$14311$1IfLeT g$r$14312$1IfLeT g$mr$14313$1IfLeT) (if (memv g$t$14323$1IfLeT '(begin)) ((case-lambda ((g$t$14369$1IfLeT) ((case-lambda ((g$ls/false$14370$1IfLeT) (if (if g$ls/false$14370$1IfLeT (begin '#f (apply (case-lambda ((g$x$14371$1IfLeT g$x*$14372$1IfLeT) '#t)) g$ls/false$14370$1IfLeT)) '#f) (apply (case-lambda ((g$x$14373$1IfLeT g$x*$14374$1IfLeT) (g$build-sequence$9772$1IfLeT '#f (g$chi-expr*$10131$1IfLeT (cons g$x$14373$1IfLeT g$x*$14374$1IfLeT) g$r$14312$1IfLeT g$mr$14313$1IfLeT)))) g$ls/false$14370$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14369$1IfLeT)))) ((case-lambda ((g$x$14375$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14375$1IfLeT) (begin '#f ((case-lambda ((g$q$14376$1IfLeT) (if g$q$14376$1IfLeT (begin '#f ((case-lambda ((g$r$14377$1IfLeT) (if g$r$14377$1IfLeT (begin '#f (append g$q$14376$1IfLeT g$r$14377$1IfLeT)) '#f))) ((case-lambda ((g$x$14378$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14378$1IfLeT) (begin '#f ((case-lambda ((g$q$14379$1IfLeT) (if g$q$14379$1IfLeT (begin '#f ((case-lambda ((g$r$14380$1IfLeT) (if g$r$14380$1IfLeT (begin '#f (append g$q$14379$1IfLeT g$r$14380$1IfLeT)) '#f))) ((letrec ((g$f$14381$1IfLeT (case-lambda ((g$x$14382$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14382$1IfLeT) ((case-lambda ((g$cars/f$14383$1IfLeT) (if g$cars/f$14383$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14384$1IfLeT) (if g$cdrs/f$14384$1IfLeT (begin '#f (map cons g$cars/f$14383$1IfLeT g$cdrs/f$14384$1IfLeT)) '#f))) (g$f$14381$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14382$1IfLeT)))) '#f))) ((case-lambda ((g$x$14385$1IfLeT) (list g$x$14385$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14382$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14382$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$14381$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14378$1IfLeT)))) '#f))) ((case-lambda ((g$x$14386$1IfLeT) (list g$x$14386$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14378$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14375$1IfLeT)))) '#f))) ((case-lambda ((g$x$14387$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14375$1IfLeT)))) '#f))) g$t$14369$1IfLeT)))) g$e$14311$1IfLeT) (if (memv g$t$14323$1IfLeT '(let-syntax letrec-syntax)) ((case-lambda ((g$t$14325$1IfLeT) ((case-lambda ((g$ls/false$14326$1IfLeT) (if (if g$ls/false$14326$1IfLeT (begin '#f (apply (case-lambda ((g$xlhs*$14327$1IfLeT g$xrhs*$14328$1IfLeT g$xbody$14329$1IfLeT g$xbody*$14330$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT g$xlhs*$14327$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"invalid identifiers" g$e$14311$1IfLeT)))) g$ls/false$14326$1IfLeT)) '#f) (apply (case-lambda ((g$xlhs*$14331$1IfLeT g$xrhs*$14332$1IfLeT g$xbody$14333$1IfLeT g$xbody*$14334$1IfLeT) ((case-lambda ((g$xlab*$14335$1IfLeT) ((case-lambda ((g$xrib$14336$1IfLeT) ((case-lambda ((g$xb*$14337$1IfLeT) ((case-lambda (() (g$build-sequence$9772$1IfLeT '#f (g$chi-expr*$10131$1IfLeT (map (case-lambda ((g$x$14338$1IfLeT) (g$add-subst$9828$1IfLeT g$xrib$14336$1IfLeT g$x$14338$1IfLeT))) (cons g$xbody$14333$1IfLeT g$xbody*$14334$1IfLeT)) (append (map cons g$xlab*$14335$1IfLeT g$xb*$14337$1IfLeT) g$r$14312$1IfLeT) (append (map cons g$xlab*$14335$1IfLeT g$xb*$14337$1IfLeT) g$mr$14313$1IfLeT)))))))) (map (case-lambda ((g$x$14339$1IfLeT) (g$make-eval-transformer$9867$1IfLeT (g$expand-transformer$10160$1IfLeT (if (eq? g$type$14322$1IfLeT 'let-syntax) g$x$14339$1IfLeT (g$add-subst$9828$1IfLeT g$xrib$14336$1IfLeT g$x$14339$1IfLeT)) g$mr$14313$1IfLeT)))) g$xrhs*$14332$1IfLeT)))) (g$make-full-rib$9806$1IfLeT g$xlhs*$14331$1IfLeT g$xlab*$14335$1IfLeT)))) (map g$gen-label$9784$1IfLeT g$xlhs*$14331$1IfLeT)))) g$ls/false$14326$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14325$1IfLeT)))) ((case-lambda ((g$x$14340$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14340$1IfLeT) (begin '#f ((case-lambda ((g$q$14341$1IfLeT) (if g$q$14341$1IfLeT (begin '#f ((case-lambda ((g$r$14342$1IfLeT) (if g$r$14342$1IfLeT (begin '#f (append g$q$14341$1IfLeT g$r$14342$1IfLeT)) '#f))) ((case-lambda ((g$x$14343$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14343$1IfLeT) (begin '#f ((case-lambda ((g$q$14344$1IfLeT) (if g$q$14344$1IfLeT (begin '#f ((case-lambda ((g$r$14345$1IfLeT) (if g$r$14345$1IfLeT (begin '#f (append g$q$14344$1IfLeT g$r$14345$1IfLeT)) '#f))) ((case-lambda ((g$x$14346$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14346$1IfLeT) (begin '#f ((case-lambda ((g$q$14347$1IfLeT) (if g$q$14347$1IfLeT (begin '#f ((case-lambda ((g$r$14348$1IfLeT) (if g$r$14348$1IfLeT (begin '#f (append g$q$14347$1IfLeT g$r$14348$1IfLeT)) '#f))) ((letrec ((g$f$14349$1IfLeT (case-lambda ((g$x$14350$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14350$1IfLeT) ((case-lambda ((g$cars/f$14351$1IfLeT) (if g$cars/f$14351$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14352$1IfLeT) (if g$cdrs/f$14352$1IfLeT (begin '#f (map cons g$cars/f$14351$1IfLeT g$cdrs/f$14352$1IfLeT)) '#f))) (g$f$14349$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14350$1IfLeT)))) '#f))) ((case-lambda ((g$x$14353$1IfLeT) (list g$x$14353$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14350$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14350$1IfLeT) (list (begin 'xbody* '())) '#f)))))) g$f$14349$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14346$1IfLeT)))) '#f))) ((case-lambda ((g$x$14354$1IfLeT) (list g$x$14354$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14346$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14343$1IfLeT)))) '#f))) ((letrec ((g$f$14355$1IfLeT (case-lambda ((g$x$14356$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14356$1IfLeT) ((case-lambda ((g$cars/f$14357$1IfLeT) (if g$cars/f$14357$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14358$1IfLeT) (if g$cdrs/f$14358$1IfLeT (begin '#f (map cons g$cars/f$14357$1IfLeT g$cdrs/f$14358$1IfLeT)) '#f))) (g$f$14355$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14356$1IfLeT)))) '#f))) ((case-lambda ((g$x$14359$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14359$1IfLeT) (begin '#f ((case-lambda ((g$q$14360$1IfLeT) (if g$q$14360$1IfLeT (begin '#f ((case-lambda ((g$r$14361$1IfLeT) (if g$r$14361$1IfLeT (begin '#f (append g$q$14360$1IfLeT g$r$14361$1IfLeT)) '#f))) ((case-lambda ((g$x$14362$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14362$1IfLeT) (begin '#f ((case-lambda ((g$q$14363$1IfLeT) (if g$q$14363$1IfLeT (begin '#f ((case-lambda ((g$r$14364$1IfLeT) (if g$r$14364$1IfLeT (begin '#f (append g$q$14363$1IfLeT g$r$14364$1IfLeT)) '#f))) ((case-lambda ((g$x$14365$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14365$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14362$1IfLeT)))) '#f))) ((case-lambda ((g$x$14366$1IfLeT) (list g$x$14366$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14362$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14359$1IfLeT)))) '#f))) ((case-lambda ((g$x$14367$1IfLeT) (list g$x$14367$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14359$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$14356$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14356$1IfLeT) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f)))))) g$f$14355$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$14343$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14340$1IfLeT)))) '#f))) ((case-lambda ((g$x$14368$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14340$1IfLeT)))) '#f))) g$t$14325$1IfLeT)))) g$e$14311$1IfLeT) (if (memv g$t$14323$1IfLeT '(displaced-lexical)) (g$syntax-violation$10221$1IfLeT '#f '"identifier out of context" g$e$14311$1IfLeT) (if (memv g$t$14323$1IfLeT '(syntax)) (g$syntax-violation$10221$1IfLeT '#f '"reference to pattern variable outside a syntax form" g$e$14311$1IfLeT) (if (memv g$t$14323$1IfLeT '(define define-syntax module import library)) (g$syntax-violation$10221$1IfLeT '#f (string-append ((case-lambda ((g$t$14324$1IfLeT) (if (memv g$t$14324$1IfLeT '(define)) '"a definition" (if (memv g$t$14324$1IfLeT '(define-syntax)) '"a define-syntax" (if (memv g$t$14324$1IfLeT '(module)) '"a module definition" (if (memv g$t$14324$1IfLeT '(library)) '"a library definition" (if (memv g$t$14324$1IfLeT '(import)) '"an import declaration" '"a non-expression"))))))) g$type$14322$1IfLeT) '" was found where an expression was expected") g$e$14311$1IfLeT) (if (memv g$t$14323$1IfLeT '(mutable)) (g$syntax-violation$10221$1IfLeT '#f '"attempt to reference an unexportable variable" g$e$14311$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid expression" g$e$14311$1IfLeT))))))))))))))))))) g$type$14322$1IfLeT))) g$kwd$14319$1IfLeT g$value$14318$1IfLeT g$type$14317$1IfLeT))))))) (g$chi-set!$10134$1IfLeT g$chi-set!$16239$1IfLeT (case-lambda ((g$e$14394$1IfLeT g$r$14395$1IfLeT g$mr$14396$1IfLeT) ((case-lambda ((g$t$14397$1IfLeT) ((case-lambda ((g$ls/false$14398$1IfLeT) (if (if g$ls/false$14398$1IfLeT (begin '#f (apply (case-lambda ((g$x$14399$1IfLeT g$v$14400$1IfLeT) (g$id?$9838$1IfLeT g$x$14399$1IfLeT))) g$ls/false$14398$1IfLeT)) '#f) (apply (case-lambda ((g$x$14401$1IfLeT g$v$14402$1IfLeT) (call-with-values (case-lambda (() (g$syntax-type$9857$1IfLeT g$x$14401$1IfLeT g$r$14395$1IfLeT))) (case-lambda ((g$type$14406$1IfLeT g$value$14407$1IfLeT g$kwd$14408$1IfLeT) ((case-lambda ((g$kwd$14409$1IfLeT g$value$14410$1IfLeT g$type$14411$1IfLeT) ((case-lambda ((g$t$14412$1IfLeT) (if (memv g$t$14412$1IfLeT '(lexical)) (begin (g$set-lexical-mutable!$10066$1IfLeT g$value$14410$1IfLeT '#t) (list 'set! (g$lexical-var$10064$1IfLeT g$value$14410$1IfLeT) (g$chi-expr$10133$1IfLeT g$v$14402$1IfLeT g$r$14395$1IfLeT g$mr$14396$1IfLeT))) (if (memv g$t$14412$1IfLeT '(core-prim)) (g$syntax-violation$10221$1IfLeT '#f '"cannot modify imported core primitive" g$e$14394$1IfLeT) (if (memv g$t$14412$1IfLeT '(global)) (g$syntax-violation$10221$1IfLeT '#f '"attempt to modify imported binding" g$e$14394$1IfLeT) (if (memv g$t$14412$1IfLeT '(global-macro!)) (g$chi-expr$10133$1IfLeT (g$chi-global-macro$10130$1IfLeT g$value$14410$1IfLeT g$e$14394$1IfLeT) g$r$14395$1IfLeT g$mr$14396$1IfLeT) (if (memv g$t$14412$1IfLeT '(local-macro!)) (g$chi-expr$10133$1IfLeT (g$chi-local-macro$10129$1IfLeT g$value$14410$1IfLeT g$e$14394$1IfLeT) g$r$14395$1IfLeT g$mr$14396$1IfLeT) (if (memv g$t$14412$1IfLeT '(mutable)) (g$syntax-violation$10221$1IfLeT '#f '"attempt to assign to an unexportable variable" g$e$14394$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$e$14394$1IfLeT))))))))) g$type$14411$1IfLeT))) g$kwd$14408$1IfLeT g$value$14407$1IfLeT g$type$14406$1IfLeT)))))) g$ls/false$14398$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14397$1IfLeT)))) ((case-lambda ((g$x$14413$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14413$1IfLeT) (begin '#f ((case-lambda ((g$q$14414$1IfLeT) (if g$q$14414$1IfLeT (begin '#f ((case-lambda ((g$r$14415$1IfLeT) (if g$r$14415$1IfLeT (begin '#f (append g$q$14414$1IfLeT g$r$14415$1IfLeT)) '#f))) ((case-lambda ((g$x$14416$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14416$1IfLeT) (begin '#f ((case-lambda ((g$q$14417$1IfLeT) (if g$q$14417$1IfLeT (begin '#f ((case-lambda ((g$r$14418$1IfLeT) (if g$r$14418$1IfLeT (begin '#f (append g$q$14417$1IfLeT g$r$14418$1IfLeT)) '#f))) ((case-lambda ((g$x$14419$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14419$1IfLeT) (begin '#f ((case-lambda ((g$q$14420$1IfLeT) (if g$q$14420$1IfLeT (begin '#f ((case-lambda ((g$r$14421$1IfLeT) (if g$r$14421$1IfLeT (begin '#f (append g$q$14420$1IfLeT g$r$14421$1IfLeT)) '#f))) ((case-lambda ((g$x$14422$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14422$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14419$1IfLeT)))) '#f))) ((case-lambda ((g$x$14423$1IfLeT) (list g$x$14423$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14419$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14416$1IfLeT)))) '#f))) ((case-lambda ((g$x$14424$1IfLeT) (list g$x$14424$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14416$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14413$1IfLeT)))) '#f))) ((case-lambda ((g$x$14425$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14413$1IfLeT)))) '#f))) g$t$14397$1IfLeT)))) g$e$14394$1IfLeT)))) (g$verify-formals$10135$1IfLeT g$verify-formals$16240$1IfLeT (case-lambda ((g$fmls$14426$1IfLeT g$stx$14427$1IfLeT) ((case-lambda ((g$t$14428$1IfLeT) ((case-lambda ((g$ls/false$14429$1IfLeT) (if (if g$ls/false$14429$1IfLeT (begin '#f (apply (case-lambda ((g$x*$14430$1IfLeT) '#t)) g$ls/false$14429$1IfLeT)) '#f) (apply (case-lambda ((g$x*$14431$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT g$x*$14431$1IfLeT) (void) (g$invalid-fmls-error$10085$1IfLeT g$stx$14427$1IfLeT g$fmls$14426$1IfLeT)))) g$ls/false$14429$1IfLeT) ((case-lambda ((g$t$14432$1IfLeT) ((case-lambda ((g$ls/false$14433$1IfLeT) (if (if g$ls/false$14433$1IfLeT (begin '#f (apply (case-lambda ((g$x*$14434$1IfLeT g$x$14435$1IfLeT) '#t)) g$ls/false$14433$1IfLeT)) '#f) (apply (case-lambda ((g$x*$14436$1IfLeT g$x$14437$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT (cons g$x$14437$1IfLeT g$x*$14436$1IfLeT)) (void) (g$invalid-fmls-error$10085$1IfLeT g$stx$14427$1IfLeT g$fmls$14426$1IfLeT)))) g$ls/false$14433$1IfLeT) ((case-lambda ((g$t$14438$1IfLeT) ((case-lambda ((g$ls/false$14439$1IfLeT) (if (if g$ls/false$14439$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14439$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$stx$14427$1IfLeT))) g$ls/false$14439$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14438$1IfLeT)))) ((case-lambda ((g$x$14440$1IfLeT) '())) g$t$14438$1IfLeT)))) g$t$14432$1IfLeT)))) ((letrec ((g$f$14441$1IfLeT (case-lambda ((g$x$14444$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14444$1IfLeT) ((case-lambda ((g$cars/f$14445$1IfLeT) (if g$cars/f$14445$1IfLeT (begin '#f ((case-lambda ((g$d/f$14446$1IfLeT) (if g$d/f$14446$1IfLeT (begin '#f (cons (map cons g$cars/f$14445$1IfLeT (car g$d/f$14446$1IfLeT)) (cdr g$d/f$14446$1IfLeT))) '#f))) (g$f$14441$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14444$1IfLeT)))) '#f))) ((case-lambda ((g$x$14447$1IfLeT) (list g$x$14447$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14444$1IfLeT))) ((case-lambda ((g$d$14448$1IfLeT) (if g$d$14448$1IfLeT (begin '#f (cons (list (begin 'x* '())) g$d$14448$1IfLeT)) '#f))) ((case-lambda ((g$x$14449$1IfLeT) (list g$x$14449$1IfLeT))) g$x$14444$1IfLeT))))))) (case-lambda ((g$x$14442$1IfLeT) ((case-lambda ((g$x$14443$1IfLeT) (if g$x$14443$1IfLeT (begin '#f (append (car g$x$14443$1IfLeT) (cdr g$x$14443$1IfLeT))) '#f))) (g$f$14441$1IfLeT g$x$14442$1IfLeT))))) g$t$14432$1IfLeT)))) g$t$14428$1IfLeT)))) ((letrec ((g$f$14450$1IfLeT (case-lambda ((g$x$14451$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14451$1IfLeT) ((case-lambda ((g$cars/f$14452$1IfLeT) (if g$cars/f$14452$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14453$1IfLeT) (if g$cdrs/f$14453$1IfLeT (begin '#f (map cons g$cars/f$14452$1IfLeT g$cdrs/f$14453$1IfLeT)) '#f))) (g$f$14450$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14451$1IfLeT)))) '#f))) ((case-lambda ((g$x$14454$1IfLeT) (list g$x$14454$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14451$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14451$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$14450$1IfLeT) g$t$14428$1IfLeT)))) g$fmls$14426$1IfLeT)))) (g$chi-lambda-clause$10136$1IfLeT g$chi-lambda-clause$16241$1IfLeT (case-lambda ((g$stx$14455$1IfLeT g$fmls$14456$1IfLeT g$body*$14457$1IfLeT g$r$14458$1IfLeT g$mr$14459$1IfLeT) ((case-lambda ((g$t$14460$1IfLeT) ((case-lambda ((g$ls/false$14461$1IfLeT) (if (if g$ls/false$14461$1IfLeT (begin '#f (apply (case-lambda ((g$x*$14462$1IfLeT) '#t)) g$ls/false$14461$1IfLeT)) '#f) (apply (case-lambda ((g$x*$14463$1IfLeT) (begin (g$verify-formals$10135$1IfLeT g$fmls$14456$1IfLeT g$stx$14455$1IfLeT) ((case-lambda ((g$lex*$14464$1IfLeT g$lab*$14465$1IfLeT) (values g$lex*$14464$1IfLeT (g$chi-internal$10144$1IfLeT (g$add-subst$9828$1IfLeT (g$make-full-rib$9806$1IfLeT g$x*$14463$1IfLeT g$lab*$14465$1IfLeT) g$body*$14457$1IfLeT) (g$add-lexicals$10068$1IfLeT g$lab*$14465$1IfLeT g$lex*$14464$1IfLeT g$r$14458$1IfLeT) g$mr$14459$1IfLeT)))) (map g$gen-lexical$9782$1IfLeT g$x*$14463$1IfLeT) (map g$gen-label$9784$1IfLeT g$x*$14463$1IfLeT))))) g$ls/false$14461$1IfLeT) ((case-lambda ((g$t$14466$1IfLeT) ((case-lambda ((g$ls/false$14467$1IfLeT) (if (if g$ls/false$14467$1IfLeT (begin '#f (apply (case-lambda ((g$x*$14468$1IfLeT g$x$14469$1IfLeT) '#t)) g$ls/false$14467$1IfLeT)) '#f) (apply (case-lambda ((g$x*$14470$1IfLeT g$x$14471$1IfLeT) (begin (g$verify-formals$10135$1IfLeT g$fmls$14456$1IfLeT g$stx$14455$1IfLeT) ((case-lambda ((g$lex*$14472$1IfLeT g$lab*$14473$1IfLeT g$lex$14474$1IfLeT g$lab$14475$1IfLeT) (values (append g$lex*$14472$1IfLeT g$lex$14474$1IfLeT) (g$chi-internal$10144$1IfLeT (g$add-subst$9828$1IfLeT (g$make-full-rib$9806$1IfLeT (cons g$x$14471$1IfLeT g$x*$14470$1IfLeT) (cons g$lab$14475$1IfLeT g$lab*$14473$1IfLeT)) g$body*$14457$1IfLeT) (g$add-lexicals$10068$1IfLeT (cons g$lab$14475$1IfLeT g$lab*$14473$1IfLeT) (cons g$lex$14474$1IfLeT g$lex*$14472$1IfLeT) g$r$14458$1IfLeT) g$mr$14459$1IfLeT)))) (map g$gen-lexical$9782$1IfLeT g$x*$14470$1IfLeT) (map g$gen-label$9784$1IfLeT g$x*$14470$1IfLeT) (g$gen-lexical$9782$1IfLeT g$x$14471$1IfLeT) (g$gen-label$9784$1IfLeT g$x$14471$1IfLeT))))) g$ls/false$14467$1IfLeT) ((case-lambda ((g$t$14476$1IfLeT) ((case-lambda ((g$ls/false$14477$1IfLeT) (if (if g$ls/false$14477$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14477$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$fmls$14456$1IfLeT))) g$ls/false$14477$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14476$1IfLeT)))) ((case-lambda ((g$x$14478$1IfLeT) '())) g$t$14476$1IfLeT)))) g$t$14466$1IfLeT)))) ((letrec ((g$f$14479$1IfLeT (case-lambda ((g$x$14482$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14482$1IfLeT) ((case-lambda ((g$cars/f$14483$1IfLeT) (if g$cars/f$14483$1IfLeT (begin '#f ((case-lambda ((g$d/f$14484$1IfLeT) (if g$d/f$14484$1IfLeT (begin '#f (cons (map cons g$cars/f$14483$1IfLeT (car g$d/f$14484$1IfLeT)) (cdr g$d/f$14484$1IfLeT))) '#f))) (g$f$14479$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14482$1IfLeT)))) '#f))) ((case-lambda ((g$x$14485$1IfLeT) (list g$x$14485$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14482$1IfLeT))) ((case-lambda ((g$d$14486$1IfLeT) (if g$d$14486$1IfLeT (begin '#f (cons (list (begin 'x* '())) g$d$14486$1IfLeT)) '#f))) ((case-lambda ((g$x$14487$1IfLeT) (list g$x$14487$1IfLeT))) g$x$14482$1IfLeT))))))) (case-lambda ((g$x$14480$1IfLeT) ((case-lambda ((g$x$14481$1IfLeT) (if g$x$14481$1IfLeT (begin '#f (append (car g$x$14481$1IfLeT) (cdr g$x$14481$1IfLeT))) '#f))) (g$f$14479$1IfLeT g$x$14480$1IfLeT))))) g$t$14466$1IfLeT)))) g$t$14460$1IfLeT)))) ((letrec ((g$f$14488$1IfLeT (case-lambda ((g$x$14489$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14489$1IfLeT) ((case-lambda ((g$cars/f$14490$1IfLeT) (if g$cars/f$14490$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14491$1IfLeT) (if g$cdrs/f$14491$1IfLeT (begin '#f (map cons g$cars/f$14490$1IfLeT g$cdrs/f$14491$1IfLeT)) '#f))) (g$f$14488$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14489$1IfLeT)))) '#f))) ((case-lambda ((g$x$14492$1IfLeT) (list g$x$14492$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14489$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14489$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$14488$1IfLeT) g$t$14460$1IfLeT)))) g$fmls$14456$1IfLeT)))) (g$chi-lambda-clause*$10137$1IfLeT g$chi-lambda-clause*$16242$1IfLeT (case-lambda ((g$stx$14493$1IfLeT g$fmls*$14494$1IfLeT g$body**$14495$1IfLeT g$r$14496$1IfLeT g$mr$14497$1IfLeT) (if (null? g$fmls*$14494$1IfLeT) (values '() '()) (call-with-values (case-lambda (() (g$chi-lambda-clause$10136$1IfLeT g$stx$14493$1IfLeT (car g$fmls*$14494$1IfLeT) (car g$body**$14495$1IfLeT) g$r$14496$1IfLeT g$mr$14497$1IfLeT))) (case-lambda ((g$a$14500$1IfLeT g$b$14501$1IfLeT) ((case-lambda ((g$b$14502$1IfLeT g$a$14503$1IfLeT) (call-with-values (case-lambda (() (g$chi-lambda-clause*$10137$1IfLeT g$stx$14493$1IfLeT (cdr g$fmls*$14494$1IfLeT) (cdr g$body**$14495$1IfLeT) g$r$14496$1IfLeT g$mr$14497$1IfLeT))) (case-lambda ((g$a*$14506$1IfLeT g$b*$14507$1IfLeT) ((case-lambda ((g$b*$14508$1IfLeT g$a*$14509$1IfLeT) (values (cons g$a$14503$1IfLeT g$a*$14509$1IfLeT) (cons g$b$14502$1IfLeT g$b*$14508$1IfLeT)))) g$b*$14507$1IfLeT g$a*$14506$1IfLeT)))))) g$b$14501$1IfLeT g$a$14500$1IfLeT)))))))) (g$chi-defun$10138$1IfLeT g$chi-defun$16243$1IfLeT (case-lambda ((g$x$14510$1IfLeT g$r$14511$1IfLeT g$mr$14512$1IfLeT) ((case-lambda ((g$fmls$14513$1IfLeT g$body*$14514$1IfLeT) (call-with-values (case-lambda (() (g$chi-lambda-clause$10136$1IfLeT g$fmls$14513$1IfLeT g$fmls$14513$1IfLeT g$body*$14514$1IfLeT g$r$14511$1IfLeT g$mr$14512$1IfLeT))) (case-lambda ((g$fmls$14517$1IfLeT g$body$14518$1IfLeT) ((case-lambda ((g$body$14519$1IfLeT g$fmls$14520$1IfLeT) (g$build-lambda$9769$1IfLeT '#f g$fmls$14520$1IfLeT g$body$14519$1IfLeT))) g$body$14518$1IfLeT g$fmls$14517$1IfLeT)))))) (car g$x$14510$1IfLeT) (cdr g$x$14510$1IfLeT))))) (g$chi-rhs$10139$1IfLeT g$chi-rhs$16244$1IfLeT (case-lambda ((g$rhs$14521$1IfLeT g$r$14522$1IfLeT g$mr$14523$1IfLeT) ((case-lambda ((g$t$14524$1IfLeT) (if (memv g$t$14524$1IfLeT '(defun)) (g$chi-defun$10138$1IfLeT (cdr g$rhs$14521$1IfLeT) g$r$14522$1IfLeT g$mr$14523$1IfLeT) (if (memv g$t$14524$1IfLeT '(expr)) ((case-lambda ((g$expr$14526$1IfLeT) (g$chi-expr$10133$1IfLeT g$expr$14526$1IfLeT g$r$14522$1IfLeT g$mr$14523$1IfLeT))) (cdr g$rhs$14521$1IfLeT)) (if (memv g$t$14524$1IfLeT '(top-expr)) ((case-lambda ((g$expr$14525$1IfLeT) (g$build-sequence$9772$1IfLeT '#f (list (g$chi-expr$10133$1IfLeT g$expr$14525$1IfLeT g$r$14522$1IfLeT g$mr$14523$1IfLeT) (g$build-void$9773$1IfLeT))))) (cdr g$rhs$14521$1IfLeT)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" g$rhs$14521$1IfLeT)))))) (car g$rhs$14521$1IfLeT))))) (g$expand-interaction-rhs*/init*$10140$1IfLeT g$expand-interaction-rhs*/init*$16245$1IfLeT (case-lambda ((g$lhs*$14527$1IfLeT g$rhs*$14528$1IfLeT g$init*$14529$1IfLeT g$r$14530$1IfLeT g$mr$14531$1IfLeT) ((letrec ((g$f$14532$1IfLeT (case-lambda ((g$lhs*$14533$1IfLeT g$rhs*$14534$1IfLeT) (if (null? g$lhs*$14533$1IfLeT) (map (case-lambda ((g$x$14535$1IfLeT) (g$chi-expr$10133$1IfLeT g$x$14535$1IfLeT g$r$14530$1IfLeT g$mr$14531$1IfLeT))) g$init*$14529$1IfLeT) ((case-lambda ((g$lhs$14536$1IfLeT g$rhs$14537$1IfLeT) ((case-lambda ((g$t$14538$1IfLeT) (if (memv g$t$14538$1IfLeT '(defun)) ((case-lambda ((g$rhs$14541$1IfLeT) (cons (list 'set! g$lhs$14536$1IfLeT g$rhs$14541$1IfLeT) (g$f$14532$1IfLeT (cdr g$lhs*$14533$1IfLeT) (cdr g$rhs*$14534$1IfLeT))))) (g$chi-defun$10138$1IfLeT (cdr g$rhs$14537$1IfLeT) g$r$14530$1IfLeT g$mr$14531$1IfLeT)) (if (memv g$t$14538$1IfLeT '(expr)) ((case-lambda ((g$rhs$14540$1IfLeT) (cons (list 'set! g$lhs$14536$1IfLeT g$rhs$14540$1IfLeT) (g$f$14532$1IfLeT (cdr g$lhs*$14533$1IfLeT) (cdr g$rhs*$14534$1IfLeT))))) (g$chi-expr$10133$1IfLeT (cdr g$rhs$14537$1IfLeT) g$r$14530$1IfLeT g$mr$14531$1IfLeT)) (if (memv g$t$14538$1IfLeT '(top-expr)) ((case-lambda ((g$e$14539$1IfLeT) (cons g$e$14539$1IfLeT (g$f$14532$1IfLeT (cdr g$lhs*$14533$1IfLeT) (cdr g$rhs*$14534$1IfLeT))))) (g$chi-expr$10133$1IfLeT (cdr g$rhs$14537$1IfLeT) g$r$14530$1IfLeT g$mr$14531$1IfLeT)) (error 'expand-interaction '"invallid" g$rhs$14537$1IfLeT)))))) (car g$rhs$14537$1IfLeT)))) (car g$lhs*$14533$1IfLeT) (car g$rhs*$14534$1IfLeT))))))) g$f$14532$1IfLeT) g$lhs*$14527$1IfLeT g$rhs*$14528$1IfLeT)))) (g$chi-rhs*$10141$1IfLeT g$chi-rhs*$16246$1IfLeT (case-lambda ((g$rhs*$14542$1IfLeT g$r$14543$1IfLeT g$mr$14544$1IfLeT) ((letrec ((g$f$14545$1IfLeT (case-lambda ((g$ls$14546$1IfLeT) (if (null? g$ls$14546$1IfLeT) '() ((case-lambda ((g$a$14547$1IfLeT) (cons g$a$14547$1IfLeT (g$f$14545$1IfLeT (cdr g$ls$14546$1IfLeT))))) (g$chi-rhs$10139$1IfLeT (car g$ls$14546$1IfLeT) g$r$14543$1IfLeT g$mr$14544$1IfLeT))))))) g$f$14545$1IfLeT) g$rhs*$14542$1IfLeT)))) (g$find-bound=?$10142$1IfLeT g$find-bound=?$16247$1IfLeT (case-lambda ((g$x$14548$1IfLeT g$lhs*$14549$1IfLeT g$rhs*$14550$1IfLeT) (if (null? g$lhs*$14549$1IfLeT) '#f (if (g$bound-id=?$9841$1IfLeT g$x$14548$1IfLeT (car g$lhs*$14549$1IfLeT)) (car g$rhs*$14550$1IfLeT) (g$find-bound=?$10142$1IfLeT g$x$14548$1IfLeT (cdr g$lhs*$14549$1IfLeT) (cdr g$rhs*$14550$1IfLeT))))))) (g$find-dups$10143$1IfLeT g$find-dups$16248$1IfLeT (case-lambda ((g$ls$14551$1IfLeT) ((letrec ((g$f$14552$1IfLeT (case-lambda ((g$ls$14553$1IfLeT g$dups$14554$1IfLeT) (if (null? g$ls$14553$1IfLeT) g$dups$14554$1IfLeT ((case-lambda ((g$t$14555$1IfLeT) (if g$t$14555$1IfLeT ((case-lambda ((g$x$14556$1IfLeT) (g$f$14552$1IfLeT (cdr g$ls$14553$1IfLeT) (cons (list (car g$ls$14553$1IfLeT) g$x$14556$1IfLeT) g$dups$14554$1IfLeT)))) g$t$14555$1IfLeT) (g$f$14552$1IfLeT (cdr g$ls$14553$1IfLeT) g$dups$14554$1IfLeT)))) (g$find-bound=?$10142$1IfLeT (car g$ls$14553$1IfLeT) (cdr g$ls$14553$1IfLeT) (cdr g$ls$14553$1IfLeT)))))))) g$f$14552$1IfLeT) g$ls$14551$1IfLeT '())))) (g$chi-internal$10144$1IfLeT g$chi-internal$16249$1IfLeT (case-lambda ((g$e*$14557$1IfLeT g$r$14558$1IfLeT g$mr$14559$1IfLeT) ((case-lambda ((g$rib$14560$1IfLeT) (call-with-values (case-lambda (() (g$chi-body*$10159$1IfLeT (map (case-lambda ((g$x$14568$1IfLeT) (g$add-subst$9828$1IfLeT g$rib$14560$1IfLeT g$x$14568$1IfLeT))) (g$syntax->list$9837$1IfLeT g$e*$14557$1IfLeT)) g$r$14558$1IfLeT g$mr$14559$1IfLeT '() '() '() '() g$rib$14560$1IfLeT '#f))) (case-lambda ((g$e*$14569$1IfLeT g$r$14570$1IfLeT g$mr$14571$1IfLeT g$lex*$14572$1IfLeT g$rhs*$14573$1IfLeT g$mod**$14574$1IfLeT g$kwd*$14575$1IfLeT) ((case-lambda ((g$kwd*$14576$1IfLeT g$mod**$14577$1IfLeT g$rhs*$14578$1IfLeT g$lex*$14579$1IfLeT g$mr$14580$1IfLeT g$r$14581$1IfLeT g$e*$14582$1IfLeT) (begin (if (null? g$e*$14582$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"no expression in body" g$e*$14582$1IfLeT) (void)) ((case-lambda ((g$init*$14583$1IfLeT) ((case-lambda ((g$rhs*$14584$1IfLeT) ((case-lambda (() (g$build-letrec*$9775$1IfLeT '#f (reverse g$lex*$14579$1IfLeT) (reverse g$rhs*$14584$1IfLeT) (g$build-sequence$9772$1IfLeT '#f g$init*$14583$1IfLeT))))))) (g$chi-rhs*$10141$1IfLeT g$rhs*$14578$1IfLeT g$r$14581$1IfLeT g$mr$14580$1IfLeT)))) (g$chi-expr*$10131$1IfLeT (append (apply append (reverse g$mod**$14577$1IfLeT)) g$e*$14582$1IfLeT) g$r$14581$1IfLeT g$mr$14580$1IfLeT))))) g$kwd*$14575$1IfLeT g$mod**$14574$1IfLeT g$rhs*$14573$1IfLeT g$lex*$14572$1IfLeT g$mr$14571$1IfLeT g$r$14570$1IfLeT g$e*$14569$1IfLeT)))))) (g$make-empty-rib$9801$1IfLeT))))) (g$parse-module$10145$1IfLeT g$parse-module$16250$1IfLeT (case-lambda ((g$e$14585$1IfLeT) ((case-lambda ((g$t$14586$1IfLeT) ((case-lambda ((g$ls/false$14587$1IfLeT) (if (if g$ls/false$14587$1IfLeT (begin '#f (apply (case-lambda ((g$export*$14588$1IfLeT g$b*$14589$1IfLeT) '#t)) g$ls/false$14587$1IfLeT)) '#f) (apply (case-lambda ((g$export*$14590$1IfLeT g$b*$14591$1IfLeT) (begin (if (g$for-all$8490$1IfLeT g$id?$9838$1IfLeT g$export*$14590$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"module exports must be identifiers" g$e$14585$1IfLeT)) (values '#f (list->vector g$export*$14590$1IfLeT) g$b*$14591$1IfLeT)))) g$ls/false$14587$1IfLeT) ((case-lambda ((g$t$14592$1IfLeT) ((case-lambda ((g$ls/false$14593$1IfLeT) (if (if g$ls/false$14593$1IfLeT (begin '#f (apply (case-lambda ((g$name$14594$1IfLeT g$export*$14595$1IfLeT g$b*$14596$1IfLeT) '#t)) g$ls/false$14593$1IfLeT)) '#f) (apply (case-lambda ((g$name$14597$1IfLeT g$export*$14598$1IfLeT g$b*$14599$1IfLeT) (begin (if (g$id?$9838$1IfLeT g$name$14597$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"module name must be an identifier" g$e$14585$1IfLeT)) (if (g$for-all$8490$1IfLeT g$id?$9838$1IfLeT g$export*$14598$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"module exports must be identifiers" g$e$14585$1IfLeT)) (values g$name$14597$1IfLeT (list->vector g$export*$14598$1IfLeT) g$b*$14599$1IfLeT)))) g$ls/false$14593$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14592$1IfLeT)))) ((case-lambda ((g$x$14600$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14600$1IfLeT) (begin '#f ((case-lambda ((g$q$14601$1IfLeT) (if g$q$14601$1IfLeT (begin '#f ((case-lambda ((g$r$14602$1IfLeT) (if g$r$14602$1IfLeT (begin '#f (append g$q$14601$1IfLeT g$r$14602$1IfLeT)) '#f))) ((case-lambda ((g$x$14603$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14603$1IfLeT) (begin '#f ((case-lambda ((g$q$14604$1IfLeT) (if g$q$14604$1IfLeT (begin '#f ((case-lambda ((g$r$14605$1IfLeT) (if g$r$14605$1IfLeT (begin '#f (append g$q$14604$1IfLeT g$r$14605$1IfLeT)) '#f))) ((case-lambda ((g$x$14606$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14606$1IfLeT) (begin '#f ((case-lambda ((g$q$14607$1IfLeT) (if g$q$14607$1IfLeT (begin '#f ((case-lambda ((g$r$14608$1IfLeT) (if g$r$14608$1IfLeT (begin '#f (append g$q$14607$1IfLeT g$r$14608$1IfLeT)) '#f))) ((letrec ((g$f$14609$1IfLeT (case-lambda ((g$x$14610$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14610$1IfLeT) ((case-lambda ((g$cars/f$14611$1IfLeT) (if g$cars/f$14611$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14612$1IfLeT) (if g$cdrs/f$14612$1IfLeT (begin '#f (map cons g$cars/f$14611$1IfLeT g$cdrs/f$14612$1IfLeT)) '#f))) (g$f$14609$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14610$1IfLeT)))) '#f))) ((case-lambda ((g$x$14613$1IfLeT) (list g$x$14613$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14610$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14610$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$14609$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14606$1IfLeT)))) '#f))) ((letrec ((g$f$14614$1IfLeT (case-lambda ((g$x$14615$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14615$1IfLeT) ((case-lambda ((g$cars/f$14616$1IfLeT) (if g$cars/f$14616$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14617$1IfLeT) (if g$cdrs/f$14617$1IfLeT (begin '#f (map cons g$cars/f$14616$1IfLeT g$cdrs/f$14617$1IfLeT)) '#f))) (g$f$14614$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14615$1IfLeT)))) '#f))) ((case-lambda ((g$x$14618$1IfLeT) (list g$x$14618$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14615$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14615$1IfLeT) (list (begin 'export* '())) '#f)))))) g$f$14614$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$14606$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14603$1IfLeT)))) '#f))) ((case-lambda ((g$x$14619$1IfLeT) (list g$x$14619$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14603$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14600$1IfLeT)))) '#f))) ((case-lambda ((g$x$14620$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14600$1IfLeT)))) '#f))) g$t$14592$1IfLeT)))) g$t$14586$1IfLeT)))) ((case-lambda ((g$x$14621$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14621$1IfLeT) (begin '#f ((case-lambda ((g$q$14622$1IfLeT) (if g$q$14622$1IfLeT (begin '#f ((case-lambda ((g$r$14623$1IfLeT) (if g$r$14623$1IfLeT (begin '#f (append g$q$14622$1IfLeT g$r$14623$1IfLeT)) '#f))) ((case-lambda ((g$x$14624$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14624$1IfLeT) (begin '#f ((case-lambda ((g$q$14625$1IfLeT) (if g$q$14625$1IfLeT (begin '#f ((case-lambda ((g$r$14626$1IfLeT) (if g$r$14626$1IfLeT (begin '#f (append g$q$14625$1IfLeT g$r$14626$1IfLeT)) '#f))) ((letrec ((g$f$14627$1IfLeT (case-lambda ((g$x$14628$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14628$1IfLeT) ((case-lambda ((g$cars/f$14629$1IfLeT) (if g$cars/f$14629$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14630$1IfLeT) (if g$cdrs/f$14630$1IfLeT (begin '#f (map cons g$cars/f$14629$1IfLeT g$cdrs/f$14630$1IfLeT)) '#f))) (g$f$14627$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14628$1IfLeT)))) '#f))) ((case-lambda ((g$x$14631$1IfLeT) (list g$x$14631$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14628$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14628$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$14627$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14624$1IfLeT)))) '#f))) ((letrec ((g$f$14632$1IfLeT (case-lambda ((g$x$14633$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14633$1IfLeT) ((case-lambda ((g$cars/f$14634$1IfLeT) (if g$cars/f$14634$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14635$1IfLeT) (if g$cdrs/f$14635$1IfLeT (begin '#f (map cons g$cars/f$14634$1IfLeT g$cdrs/f$14635$1IfLeT)) '#f))) (g$f$14632$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14633$1IfLeT)))) '#f))) ((case-lambda ((g$x$14636$1IfLeT) (list g$x$14636$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14633$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14633$1IfLeT) (list (begin 'export* '())) '#f)))))) g$f$14632$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$14624$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14621$1IfLeT)))) '#f))) ((case-lambda ((g$x$14637$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14621$1IfLeT)))) '#f))) g$t$14586$1IfLeT)))) g$e$14585$1IfLeT)))) (g$9713$10146$1IfLeT g$9713$16251$1IfLeT (make-record-type-descriptor 'module-interface '#f 'g$9716$1IfLeT '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (g$9715$10147$1IfLeT g$9715$16252$1IfLeT '#f) (g$9714$10148$1IfLeT g$9714$16253$1IfLeT (make-record-constructor-descriptor g$9713$10146$1IfLeT '#f g$9715$10147$1IfLeT)) (g$module-interface?$10149$1IfLeT g$module-interface?$16254$1IfLeT (record-predicate g$9713$10146$1IfLeT)) (g$make-module-interface$10150$1IfLeT g$make-module-interface$16255$1IfLeT (record-constructor g$9714$10148$1IfLeT)) (g$module-interface-first-mark$10151$1IfLeT g$module-interface-first-mark$16256$1IfLeT (record-accessor g$9713$10146$1IfLeT '0)) (g$module-interface-exp-id-vec$10152$1IfLeT g$module-interface-exp-id-vec$16257$1IfLeT (record-accessor g$9713$10146$1IfLeT '1)) (g$module-interface-exp-lab-vec$10153$1IfLeT g$module-interface-exp-lab-vec$16258$1IfLeT (record-accessor g$9713$10146$1IfLeT '2)) (g$set-module-interface-first-mark!$10154$1IfLeT g$set-module-interface-first-mark!$16259$1IfLeT (record-mutator g$9713$10146$1IfLeT '0)) (g$set-module-interface-exp-id-vec!$10155$1IfLeT g$set-module-interface-exp-id-vec!$16260$1IfLeT (record-mutator g$9713$10146$1IfLeT '1)) (g$set-module-interface-exp-lab-vec!$10156$1IfLeT g$set-module-interface-exp-lab-vec!$16261$1IfLeT (record-mutator g$9713$10146$1IfLeT '2)) (g$module-interface-exp-id*$10157$1IfLeT g$module-interface-exp-id*$16262$1IfLeT (case-lambda ((g$iface$14638$1IfLeT g$id$14639$1IfLeT) (letrec* ((g$diff-marks$14640$1IfLeT (case-lambda ((g$ls$14644$1IfLeT g$x$14645$1IfLeT) (begin (if (null? g$ls$14644$1IfLeT) (error 'diff-marks '"BUG: should not happen") (void)) ((case-lambda ((g$a$14646$1IfLeT) (if (eq? g$a$14646$1IfLeT g$x$14645$1IfLeT) '() (cons g$a$14646$1IfLeT (g$diff-marks$14640$1IfLeT (cdr g$ls$14644$1IfLeT) g$x$14645$1IfLeT))))) (car g$ls$14644$1IfLeT))))))) ((case-lambda ((g$diff$14641$1IfLeT g$id-vec$14642$1IfLeT) (if (null? g$diff$14641$1IfLeT) g$id-vec$14642$1IfLeT (vector-map (case-lambda ((g$x$14643$1IfLeT) (g$make-stx$9811$1IfLeT (g$stx-expr$9812$1IfLeT g$x$14643$1IfLeT) (append g$diff$14641$1IfLeT (g$stx-mark*$9813$1IfLeT g$x$14643$1IfLeT)) '() '()))) g$id-vec$14642$1IfLeT)))) (g$diff-marks$14640$1IfLeT (g$stx-mark*$9813$1IfLeT g$id$14639$1IfLeT) (g$module-interface-first-mark$10151$1IfLeT g$iface$14638$1IfLeT)) (g$module-interface-exp-id-vec$10152$1IfLeT g$iface$14638$1IfLeT)))))) (g$chi-internal-module$10158$1IfLeT g$chi-internal-module$16263$1IfLeT (case-lambda ((g$e$14647$1IfLeT g$r$14648$1IfLeT g$mr$14649$1IfLeT g$lex*$14650$1IfLeT g$rhs*$14651$1IfLeT g$mod**$14652$1IfLeT g$kwd*$14653$1IfLeT) (call-with-values (case-lambda (() (g$parse-module$10145$1IfLeT g$e$14647$1IfLeT))) (case-lambda ((g$name$14657$1IfLeT g$exp-id*$14658$1IfLeT g$e*$14659$1IfLeT) ((case-lambda ((g$e*$14660$1IfLeT g$exp-id*$14661$1IfLeT g$name$14662$1IfLeT) ((case-lambda ((g$rib$14663$1IfLeT) ((case-lambda ((g$e*$14664$1IfLeT) ((case-lambda (() (call-with-values (case-lambda (() (g$chi-body*$10159$1IfLeT g$e*$14664$1IfLeT g$r$14648$1IfLeT g$mr$14649$1IfLeT g$lex*$14650$1IfLeT g$rhs*$14651$1IfLeT g$mod**$14652$1IfLeT g$kwd*$14653$1IfLeT g$rib$14663$1IfLeT '#f))) (case-lambda ((g$e*$14672$1IfLeT g$r$14673$1IfLeT g$mr$14674$1IfLeT g$lex*$14675$1IfLeT g$rhs*$14676$1IfLeT g$mod**$14677$1IfLeT g$kwd*$14678$1IfLeT) ((case-lambda ((g$kwd*$14679$1IfLeT g$mod**$14680$1IfLeT g$rhs*$14681$1IfLeT g$lex*$14682$1IfLeT g$mr$14683$1IfLeT g$r$14684$1IfLeT g$e*$14685$1IfLeT) ((case-lambda ((g$exp-lab*$14686$1IfLeT g$mod**$14687$1IfLeT) (if (not g$name$14662$1IfLeT) (values g$lex*$14682$1IfLeT g$rhs*$14681$1IfLeT g$exp-id*$14661$1IfLeT g$exp-lab*$14686$1IfLeT g$r$14684$1IfLeT g$mr$14683$1IfLeT g$mod**$14687$1IfLeT g$kwd*$14679$1IfLeT) ((case-lambda ((g$lab$14688$1IfLeT g$iface$14689$1IfLeT) (values g$lex*$14682$1IfLeT g$rhs*$14681$1IfLeT (vector g$name$14662$1IfLeT) (vector g$lab$14688$1IfLeT) (cons (cons g$lab$14688$1IfLeT (cons '$module g$iface$14689$1IfLeT)) g$r$14684$1IfLeT) (cons (cons g$lab$14688$1IfLeT (cons '$module g$iface$14689$1IfLeT)) g$mr$14683$1IfLeT) g$mod**$14687$1IfLeT g$kwd*$14679$1IfLeT))) (g$gen-label$9784$1IfLeT 'module) (g$make-module-interface$10150$1IfLeT (car (g$stx-mark*$9813$1IfLeT g$name$14662$1IfLeT)) (vector-map (case-lambda ((g$x$14690$1IfLeT) (g$make-stx$9811$1IfLeT (g$stx-expr$9812$1IfLeT g$x$14690$1IfLeT) (g$stx-mark*$9813$1IfLeT g$x$14690$1IfLeT) '() '()))) g$exp-id*$14661$1IfLeT) g$exp-lab*$14686$1IfLeT))))) (vector-map (case-lambda ((g$x$14691$1IfLeT) ((case-lambda ((g$t$14692$1IfLeT) (if g$t$14692$1IfLeT g$t$14692$1IfLeT (begin '#f (g$syntax-violation$10221$1IfLeT '#f '"cannot find module export" g$x$14691$1IfLeT))))) (g$id->label$9850$1IfLeT (g$mkstx$9826$1IfLeT (g$id->sym$9839$1IfLeT g$x$14691$1IfLeT) (g$stx-mark*$9813$1IfLeT g$x$14691$1IfLeT) (list g$rib$14663$1IfLeT) '()))))) g$exp-id*$14661$1IfLeT) (cons g$e*$14685$1IfLeT g$mod**$14680$1IfLeT)))) g$kwd*$14678$1IfLeT g$mod**$14677$1IfLeT g$rhs*$14676$1IfLeT g$lex*$14675$1IfLeT g$mr$14674$1IfLeT g$r$14673$1IfLeT g$e*$14672$1IfLeT))))))))) (map (case-lambda ((g$x$14693$1IfLeT) (g$add-subst$9828$1IfLeT g$rib$14663$1IfLeT g$x$14693$1IfLeT))) (g$syntax->list$9837$1IfLeT g$e*$14660$1IfLeT))))) (g$make-empty-rib$9801$1IfLeT)))) g$e*$14659$1IfLeT g$exp-id*$14658$1IfLeT g$name$14657$1IfLeT))))))) (g$chi-body*$10159$1IfLeT g$chi-body*$16264$1IfLeT (case-lambda ((g$e*$14694$1IfLeT g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14700$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT) (if (null? g$e*$14694$1IfLeT) (values g$e*$14694$1IfLeT g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14700$1IfLeT) ((case-lambda ((g$e$14703$1IfLeT) (call-with-values (case-lambda (() (g$syntax-type$9857$1IfLeT g$e$14703$1IfLeT g$r$14695$1IfLeT))) (case-lambda ((g$type$14707$1IfLeT g$value$14708$1IfLeT g$kwd$14709$1IfLeT) ((case-lambda ((g$kwd$14710$1IfLeT g$value$14711$1IfLeT g$type$14712$1IfLeT) ((case-lambda ((g$kwd*$14713$1IfLeT) ((case-lambda ((g$t$14714$1IfLeT) (if (memv g$t$14714$1IfLeT '(define)) (call-with-values (case-lambda (() (g$parse-define$10060$1IfLeT g$e$14703$1IfLeT))) (case-lambda ((g$id$14896$1IfLeT g$rhs$14897$1IfLeT) ((case-lambda ((g$rhs$14898$1IfLeT g$id$14899$1IfLeT) (begin (if (g$bound-id-member?$9845$1IfLeT g$id$14899$1IfLeT g$kwd*$14713$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"cannot redefine keyword" g$e$14703$1IfLeT) (void)) (call-with-values (case-lambda (() (g$gen-define-label+loc$9786$1IfLeT g$id$14899$1IfLeT g$rib$14701$1IfLeT))) (case-lambda ((g$lab$14902$1IfLeT g$lex$14903$1IfLeT) ((case-lambda ((g$lex$14904$1IfLeT g$lab$14905$1IfLeT) (begin (g$extend-rib!$9802$1IfLeT g$rib$14701$1IfLeT g$id$14899$1IfLeT g$lab$14905$1IfLeT) (g$chi-body*$10159$1IfLeT (cdr g$e*$14694$1IfLeT) (g$add-lexical$10067$1IfLeT g$lab$14905$1IfLeT g$lex$14904$1IfLeT g$r$14695$1IfLeT) g$mr$14696$1IfLeT (cons g$lex$14904$1IfLeT g$lex*$14697$1IfLeT) (cons g$rhs$14898$1IfLeT g$rhs*$14698$1IfLeT) g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT)))) g$lex$14903$1IfLeT g$lab$14902$1IfLeT))))))) g$rhs$14897$1IfLeT g$id$14896$1IfLeT)))) (if (memv g$t$14714$1IfLeT '(define-syntax)) (call-with-values (case-lambda (() (g$parse-define-syntax$10061$1IfLeT g$e$14703$1IfLeT))) (case-lambda ((g$id$14887$1IfLeT g$rhs$14888$1IfLeT) ((case-lambda ((g$rhs$14889$1IfLeT g$id$14890$1IfLeT) (begin (if (g$bound-id-member?$9845$1IfLeT g$id$14890$1IfLeT g$kwd*$14713$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"cannot redefine keyword" g$e$14703$1IfLeT) (void)) ((case-lambda ((g$lab$14891$1IfLeT g$expanded-rhs$14892$1IfLeT) (begin (g$extend-rib!$9802$1IfLeT g$rib$14701$1IfLeT g$id$14890$1IfLeT g$lab$14891$1IfLeT) ((case-lambda ((g$b$14893$1IfLeT) (g$chi-body*$10159$1IfLeT (cdr g$e*$14694$1IfLeT) (cons (cons g$lab$14891$1IfLeT g$b$14893$1IfLeT) g$r$14695$1IfLeT) (cons (cons g$lab$14891$1IfLeT g$b$14893$1IfLeT) g$mr$14696$1IfLeT) g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT))) (g$make-eval-transformer$9867$1IfLeT g$expanded-rhs$14892$1IfLeT))))) (g$gen-define-label$9787$1IfLeT g$id$14890$1IfLeT g$rib$14701$1IfLeT) (g$expand-transformer$10160$1IfLeT g$rhs$14889$1IfLeT g$mr$14696$1IfLeT))))) g$rhs$14888$1IfLeT g$id$14887$1IfLeT)))) (if (memv g$t$14714$1IfLeT '(let-syntax letrec-syntax)) ((case-lambda ((g$t$14847$1IfLeT) ((case-lambda ((g$ls/false$14848$1IfLeT) (if (if g$ls/false$14848$1IfLeT (begin '#f (apply (case-lambda ((g$xlhs*$14849$1IfLeT g$xrhs*$14850$1IfLeT g$xbody*$14851$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT g$xlhs*$14849$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT '#f '"invalid identifiers" g$e$14703$1IfLeT)))) g$ls/false$14848$1IfLeT)) '#f) (apply (case-lambda ((g$xlhs*$14852$1IfLeT g$xrhs*$14853$1IfLeT g$xbody*$14854$1IfLeT) ((case-lambda ((g$xlab*$14855$1IfLeT) ((case-lambda ((g$xrib$14856$1IfLeT) ((case-lambda ((g$xb*$14857$1IfLeT) ((case-lambda (() (g$chi-body*$10159$1IfLeT (append (map (case-lambda ((g$x$14858$1IfLeT) (g$add-subst$9828$1IfLeT g$xrib$14856$1IfLeT g$x$14858$1IfLeT))) g$xbody*$14854$1IfLeT) (cdr g$e*$14694$1IfLeT)) (append (map cons g$xlab*$14855$1IfLeT g$xb*$14857$1IfLeT) g$r$14695$1IfLeT) (append (map cons g$xlab*$14855$1IfLeT g$xb*$14857$1IfLeT) g$mr$14696$1IfLeT) g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT)))))) (map (case-lambda ((g$x$14859$1IfLeT) (g$make-eval-transformer$9867$1IfLeT (g$expand-transformer$10160$1IfLeT (if (eq? g$type$14712$1IfLeT 'let-syntax) g$x$14859$1IfLeT (g$add-subst$9828$1IfLeT g$xrib$14856$1IfLeT g$x$14859$1IfLeT)) g$mr$14696$1IfLeT)))) g$xrhs*$14853$1IfLeT)))) (g$make-full-rib$9806$1IfLeT g$xlhs*$14852$1IfLeT g$xlab*$14855$1IfLeT)))) (map g$gen-label$9784$1IfLeT g$xlhs*$14852$1IfLeT)))) g$ls/false$14848$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14847$1IfLeT)))) ((case-lambda ((g$x$14860$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14860$1IfLeT) (begin '#f ((case-lambda ((g$q$14861$1IfLeT) (if g$q$14861$1IfLeT (begin '#f ((case-lambda ((g$r$14862$1IfLeT) (if g$r$14862$1IfLeT (begin '#f (append g$q$14861$1IfLeT g$r$14862$1IfLeT)) '#f))) ((case-lambda ((g$x$14863$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14863$1IfLeT) (begin '#f ((case-lambda ((g$q$14864$1IfLeT) (if g$q$14864$1IfLeT (begin '#f ((case-lambda ((g$r$14865$1IfLeT) (if g$r$14865$1IfLeT (begin '#f (append g$q$14864$1IfLeT g$r$14865$1IfLeT)) '#f))) ((letrec ((g$f$14866$1IfLeT (case-lambda ((g$x$14867$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14867$1IfLeT) ((case-lambda ((g$cars/f$14868$1IfLeT) (if g$cars/f$14868$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14869$1IfLeT) (if g$cdrs/f$14869$1IfLeT (begin '#f (map cons g$cars/f$14868$1IfLeT g$cdrs/f$14869$1IfLeT)) '#f))) (g$f$14866$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14867$1IfLeT)))) '#f))) ((case-lambda ((g$x$14870$1IfLeT) (list g$x$14870$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14867$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14867$1IfLeT) (list (begin 'xbody* '())) '#f)))))) g$f$14866$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14863$1IfLeT)))) '#f))) ((letrec ((g$f$14871$1IfLeT (case-lambda ((g$x$14872$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14872$1IfLeT) ((case-lambda ((g$cars/f$14873$1IfLeT) (if g$cars/f$14873$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14874$1IfLeT) (if g$cdrs/f$14874$1IfLeT (begin '#f (map cons g$cars/f$14873$1IfLeT g$cdrs/f$14874$1IfLeT)) '#f))) (g$f$14871$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14872$1IfLeT)))) '#f))) ((case-lambda ((g$x$14875$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14875$1IfLeT) (begin '#f ((case-lambda ((g$q$14876$1IfLeT) (if g$q$14876$1IfLeT (begin '#f ((case-lambda ((g$r$14877$1IfLeT) (if g$r$14877$1IfLeT (begin '#f (append g$q$14876$1IfLeT g$r$14877$1IfLeT)) '#f))) ((case-lambda ((g$x$14878$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14878$1IfLeT) (begin '#f ((case-lambda ((g$q$14879$1IfLeT) (if g$q$14879$1IfLeT (begin '#f ((case-lambda ((g$r$14880$1IfLeT) (if g$r$14880$1IfLeT (begin '#f (append g$q$14879$1IfLeT g$r$14880$1IfLeT)) '#f))) ((case-lambda ((g$x$14881$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14881$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14878$1IfLeT)))) '#f))) ((case-lambda ((g$x$14882$1IfLeT) (list g$x$14882$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14878$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14875$1IfLeT)))) '#f))) ((case-lambda ((g$x$14883$1IfLeT) (list g$x$14883$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14875$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$14872$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14872$1IfLeT) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f)))))) g$f$14871$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$14863$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14860$1IfLeT)))) '#f))) ((case-lambda ((g$x$14884$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14860$1IfLeT)))) '#f))) g$t$14847$1IfLeT)))) g$e$14703$1IfLeT) (if (memv g$t$14714$1IfLeT '(begin)) ((case-lambda ((g$t$14834$1IfLeT) ((case-lambda ((g$ls/false$14835$1IfLeT) (if (if g$ls/false$14835$1IfLeT (begin '#f (apply (case-lambda ((g$x*$14836$1IfLeT) '#t)) g$ls/false$14835$1IfLeT)) '#f) (apply (case-lambda ((g$x*$14837$1IfLeT) (g$chi-body*$10159$1IfLeT (append g$x*$14837$1IfLeT (cdr g$e*$14694$1IfLeT)) g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT))) g$ls/false$14835$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14834$1IfLeT)))) ((case-lambda ((g$x$14838$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14838$1IfLeT) (begin '#f ((case-lambda ((g$q$14839$1IfLeT) (if g$q$14839$1IfLeT (begin '#f ((case-lambda ((g$r$14840$1IfLeT) (if g$r$14840$1IfLeT (begin '#f (append g$q$14839$1IfLeT g$r$14840$1IfLeT)) '#f))) ((letrec ((g$f$14841$1IfLeT (case-lambda ((g$x$14842$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14842$1IfLeT) ((case-lambda ((g$cars/f$14843$1IfLeT) (if g$cars/f$14843$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14844$1IfLeT) (if g$cdrs/f$14844$1IfLeT (begin '#f (map cons g$cars/f$14843$1IfLeT g$cdrs/f$14844$1IfLeT)) '#f))) (g$f$14841$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14842$1IfLeT)))) '#f))) ((case-lambda ((g$x$14845$1IfLeT) (list g$x$14845$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14842$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14842$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$14841$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14838$1IfLeT)))) '#f))) ((case-lambda ((g$x$14846$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14838$1IfLeT)))) '#f))) g$t$14834$1IfLeT)))) g$e$14703$1IfLeT) (if (memv g$t$14714$1IfLeT '(global-macro global-macro!)) (g$chi-body*$10159$1IfLeT (cons (g$add-subst$9828$1IfLeT g$rib$14701$1IfLeT (g$chi-global-macro$10130$1IfLeT g$value$14711$1IfLeT g$e$14703$1IfLeT)) (cdr g$e*$14694$1IfLeT)) g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT) (if (memv g$t$14714$1IfLeT '(local-macro local-macro!)) (g$chi-body*$10159$1IfLeT (cons (g$add-subst$9828$1IfLeT g$rib$14701$1IfLeT (g$chi-local-macro$10129$1IfLeT g$value$14711$1IfLeT g$e$14703$1IfLeT)) (cdr g$e*$14694$1IfLeT)) g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT) (if (memv g$t$14714$1IfLeT '(macro macro!)) (g$chi-body*$10159$1IfLeT (cons (g$add-subst$9828$1IfLeT g$rib$14701$1IfLeT (g$chi-macro$10128$1IfLeT g$value$14711$1IfLeT g$e$14703$1IfLeT)) (cdr g$e*$14694$1IfLeT)) g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT) (if (memv g$t$14714$1IfLeT '(module)) (call-with-values (case-lambda (() (g$chi-internal-module$10158$1IfLeT g$e$14703$1IfLeT g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT))) (case-lambda ((g$lex*$14816$1IfLeT g$rhs*$14817$1IfLeT g$m-exp-id*$14818$1IfLeT g$m-exp-lab*$14819$1IfLeT g$r$14820$1IfLeT g$mr$14821$1IfLeT g$mod**$14822$1IfLeT g$kwd*$14823$1IfLeT) ((case-lambda ((g$kwd*$14824$1IfLeT g$mod**$14825$1IfLeT g$mr$14826$1IfLeT g$r$14827$1IfLeT g$m-exp-lab*$14828$1IfLeT g$m-exp-id*$14829$1IfLeT g$rhs*$14830$1IfLeT g$lex*$14831$1IfLeT) (begin (vector-for-each (case-lambda ((g$id$14832$1IfLeT g$lab$14833$1IfLeT) (g$extend-rib!$9802$1IfLeT g$rib$14701$1IfLeT g$id$14832$1IfLeT g$lab$14833$1IfLeT))) g$m-exp-id*$14829$1IfLeT g$m-exp-lab*$14828$1IfLeT) (g$chi-body*$10159$1IfLeT (cdr g$e*$14694$1IfLeT) g$r$14827$1IfLeT g$mr$14826$1IfLeT g$lex*$14831$1IfLeT g$rhs*$14830$1IfLeT g$mod**$14825$1IfLeT g$kwd*$14824$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT)))) g$kwd*$14823$1IfLeT g$mod**$14822$1IfLeT g$mr$14821$1IfLeT g$r$14820$1IfLeT g$m-exp-lab*$14819$1IfLeT g$m-exp-id*$14818$1IfLeT g$rhs*$14817$1IfLeT g$lex*$14816$1IfLeT)))) (if (memv g$t$14714$1IfLeT '(library)) (begin (g$library-expander$10208$1IfLeT (g$stx->datum$9849$1IfLeT g$e$14703$1IfLeT)) (g$chi-body*$10159$1IfLeT (cdr g$e*$14694$1IfLeT) g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT)) (if (memv g$t$14714$1IfLeT '(import)) (begin ((case-lambda (() (letrec* ((g$module-import?$14715$1IfLeT (case-lambda ((g$e$14778$1IfLeT) ((case-lambda ((g$t$14779$1IfLeT) ((case-lambda ((g$ls/false$14780$1IfLeT) (if (if g$ls/false$14780$1IfLeT (begin '#f (apply (case-lambda ((g$id$14781$1IfLeT) (g$id?$9838$1IfLeT g$id$14781$1IfLeT))) g$ls/false$14780$1IfLeT)) '#f) (apply (case-lambda ((g$id$14782$1IfLeT) '#t)) g$ls/false$14780$1IfLeT) ((case-lambda ((g$t$14783$1IfLeT) ((case-lambda ((g$ls/false$14784$1IfLeT) (if (if g$ls/false$14784$1IfLeT (begin '#f (apply (case-lambda ((g$imp*$14785$1IfLeT) '#t)) g$ls/false$14784$1IfLeT)) '#f) (apply (case-lambda ((g$imp*$14786$1IfLeT) '#f)) g$ls/false$14784$1IfLeT) ((case-lambda ((g$t$14787$1IfLeT) ((case-lambda ((g$ls/false$14788$1IfLeT) (if (if g$ls/false$14788$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14788$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"malformed import form" g$e$14778$1IfLeT))) g$ls/false$14788$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14787$1IfLeT)))) ((case-lambda ((g$x$14789$1IfLeT) '())) g$t$14787$1IfLeT)))) g$t$14783$1IfLeT)))) ((case-lambda ((g$x$14790$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14790$1IfLeT) (begin '#f ((case-lambda ((g$q$14791$1IfLeT) (if g$q$14791$1IfLeT (begin '#f ((case-lambda ((g$r$14792$1IfLeT) (if g$r$14792$1IfLeT (begin '#f (append g$q$14791$1IfLeT g$r$14792$1IfLeT)) '#f))) ((letrec ((g$f$14793$1IfLeT (case-lambda ((g$x$14794$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14794$1IfLeT) ((case-lambda ((g$cars/f$14795$1IfLeT) (if g$cars/f$14795$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14796$1IfLeT) (if g$cdrs/f$14796$1IfLeT (begin '#f (map cons g$cars/f$14795$1IfLeT g$cdrs/f$14796$1IfLeT)) '#f))) (g$f$14793$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14794$1IfLeT)))) '#f))) ((case-lambda ((g$x$14797$1IfLeT) (list g$x$14797$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14794$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14794$1IfLeT) (list (begin 'imp* '())) '#f)))))) g$f$14793$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14790$1IfLeT)))) '#f))) ((case-lambda ((g$x$14798$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14790$1IfLeT)))) '#f))) g$t$14783$1IfLeT)))) g$t$14779$1IfLeT)))) ((case-lambda ((g$x$14799$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14799$1IfLeT) (begin '#f ((case-lambda ((g$q$14800$1IfLeT) (if g$q$14800$1IfLeT (begin '#f ((case-lambda ((g$r$14801$1IfLeT) (if g$r$14801$1IfLeT (begin '#f (append g$q$14800$1IfLeT g$r$14801$1IfLeT)) '#f))) ((case-lambda ((g$x$14802$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14802$1IfLeT) (begin '#f ((case-lambda ((g$q$14803$1IfLeT) (if g$q$14803$1IfLeT (begin '#f ((case-lambda ((g$r$14804$1IfLeT) (if g$r$14804$1IfLeT (begin '#f (append g$q$14803$1IfLeT g$r$14804$1IfLeT)) '#f))) ((case-lambda ((g$x$14805$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14805$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14802$1IfLeT)))) '#f))) ((case-lambda ((g$x$14806$1IfLeT) (list g$x$14806$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14802$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14799$1IfLeT)))) '#f))) ((case-lambda ((g$x$14807$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14799$1IfLeT)))) '#f))) g$t$14779$1IfLeT)))) g$e$14778$1IfLeT)))) (g$module-import$14716$1IfLeT (case-lambda ((g$e$14752$1IfLeT g$r$14753$1IfLeT) ((case-lambda ((g$t$14754$1IfLeT) ((case-lambda ((g$ls/false$14755$1IfLeT) (if (if g$ls/false$14755$1IfLeT (begin '#f (apply (case-lambda ((g$id$14756$1IfLeT) (g$id?$9838$1IfLeT g$id$14756$1IfLeT))) g$ls/false$14755$1IfLeT)) '#f) (apply (case-lambda ((g$id$14757$1IfLeT) (call-with-values (case-lambda (() (g$syntax-type$9857$1IfLeT g$id$14757$1IfLeT g$r$14753$1IfLeT))) (case-lambda ((g$type$14761$1IfLeT g$value$14762$1IfLeT g$kwd$14763$1IfLeT) ((case-lambda ((g$kwd$14764$1IfLeT g$value$14765$1IfLeT g$type$14766$1IfLeT) ((case-lambda ((g$t$14767$1IfLeT) (if (memv g$t$14767$1IfLeT '($module)) ((case-lambda ((g$iface$14768$1IfLeT) (values (g$module-interface-exp-id*$10157$1IfLeT g$iface$14768$1IfLeT g$id$14757$1IfLeT) (g$module-interface-exp-lab-vec$10153$1IfLeT g$iface$14768$1IfLeT)))) g$value$14765$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid import" g$e$14752$1IfLeT)))) g$type$14766$1IfLeT))) g$kwd$14763$1IfLeT g$value$14762$1IfLeT g$type$14761$1IfLeT)))))) g$ls/false$14755$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14754$1IfLeT)))) ((case-lambda ((g$x$14769$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14769$1IfLeT) (begin '#f ((case-lambda ((g$q$14770$1IfLeT) (if g$q$14770$1IfLeT (begin '#f ((case-lambda ((g$r$14771$1IfLeT) (if g$r$14771$1IfLeT (begin '#f (append g$q$14770$1IfLeT g$r$14771$1IfLeT)) '#f))) ((case-lambda ((g$x$14772$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14772$1IfLeT) (begin '#f ((case-lambda ((g$q$14773$1IfLeT) (if g$q$14773$1IfLeT (begin '#f ((case-lambda ((g$r$14774$1IfLeT) (if g$r$14774$1IfLeT (begin '#f (append g$q$14773$1IfLeT g$r$14774$1IfLeT)) '#f))) ((case-lambda ((g$x$14775$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14775$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14772$1IfLeT)))) '#f))) ((case-lambda ((g$x$14776$1IfLeT) (list g$x$14776$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14772$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14769$1IfLeT)))) '#f))) ((case-lambda ((g$x$14777$1IfLeT) '())) (g$syntax-car$9835$1IfLeT g$x$14769$1IfLeT)))) '#f))) g$t$14754$1IfLeT)))) g$e$14752$1IfLeT)))) (g$library-import$14717$1IfLeT (case-lambda ((g$e$14726$1IfLeT) ((case-lambda ((g$t$14727$1IfLeT) ((case-lambda ((g$ls/false$14728$1IfLeT) (if (if g$ls/false$14728$1IfLeT (begin '#f (apply (case-lambda ((g$ctxt$14729$1IfLeT g$imp*$14730$1IfLeT) '#t)) g$ls/false$14728$1IfLeT)) '#f) (apply (case-lambda ((g$ctxt$14731$1IfLeT g$imp*$14732$1IfLeT) (call-with-values (case-lambda (() (g$parse-import-spec*$10164$1IfLeT (g$syntax->datum$10224$1IfLeT g$imp*$14732$1IfLeT)))) (case-lambda ((g$subst-names$14735$1IfLeT g$subst-labels$14736$1IfLeT) ((case-lambda ((g$subst-labels$14737$1IfLeT g$subst-names$14738$1IfLeT) (values (vector-map (case-lambda ((g$name$14739$1IfLeT) (g$datum->stx$9821$1IfLeT g$ctxt$14731$1IfLeT g$name$14739$1IfLeT))) g$subst-names$14738$1IfLeT) g$subst-labels$14737$1IfLeT))) g$subst-labels$14736$1IfLeT g$subst-names$14735$1IfLeT)))))) g$ls/false$14728$1IfLeT) ((case-lambda ((g$t$14740$1IfLeT) ((case-lambda ((g$ls/false$14741$1IfLeT) (if (if g$ls/false$14741$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14741$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid import form" g$e$14726$1IfLeT))) g$ls/false$14741$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14740$1IfLeT)))) ((case-lambda ((g$x$14742$1IfLeT) '())) g$t$14740$1IfLeT)))) g$t$14727$1IfLeT)))) ((case-lambda ((g$x$14743$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14743$1IfLeT) (begin '#f ((case-lambda ((g$q$14744$1IfLeT) (if g$q$14744$1IfLeT (begin '#f ((case-lambda ((g$r$14745$1IfLeT) (if g$r$14745$1IfLeT (begin '#f (append g$q$14744$1IfLeT g$r$14745$1IfLeT)) '#f))) ((letrec ((g$f$14746$1IfLeT (case-lambda ((g$x$14747$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14747$1IfLeT) ((case-lambda ((g$cars/f$14748$1IfLeT) (if g$cars/f$14748$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14749$1IfLeT) (if g$cdrs/f$14749$1IfLeT (begin '#f (map cons g$cars/f$14748$1IfLeT g$cdrs/f$14749$1IfLeT)) '#f))) (g$f$14746$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14747$1IfLeT)))) '#f))) ((case-lambda ((g$x$14750$1IfLeT) (list g$x$14750$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14747$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14747$1IfLeT) (list (begin 'imp* '())) '#f)))))) g$f$14746$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14743$1IfLeT)))) '#f))) ((case-lambda ((g$x$14751$1IfLeT) (list g$x$14751$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14743$1IfLeT)))) '#f))) g$t$14727$1IfLeT)))) g$e$14726$1IfLeT))))) (call-with-values (case-lambda (() (if (g$module-import?$14715$1IfLeT g$e$14703$1IfLeT) (g$module-import$14716$1IfLeT g$e$14703$1IfLeT g$r$14695$1IfLeT) (g$library-import$14717$1IfLeT g$e$14703$1IfLeT)))) (case-lambda ((g$id*$14720$1IfLeT g$lab*$14721$1IfLeT) ((case-lambda ((g$lab*$14722$1IfLeT g$id*$14723$1IfLeT) (vector-for-each (case-lambda ((g$id$14724$1IfLeT g$lab$14725$1IfLeT) (g$extend-rib!$9802$1IfLeT g$rib$14701$1IfLeT g$id$14724$1IfLeT g$lab$14725$1IfLeT))) g$id*$14723$1IfLeT g$lab*$14722$1IfLeT))) g$lab*$14721$1IfLeT g$id*$14720$1IfLeT)))))))) (g$chi-body*$10159$1IfLeT (cdr g$e*$14694$1IfLeT) g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT)) (if g$top?$14702$1IfLeT (g$chi-body*$10159$1IfLeT (cdr g$e*$14694$1IfLeT) g$r$14695$1IfLeT g$mr$14696$1IfLeT (cons (g$gen-lexical$9782$1IfLeT 'dummy) g$lex*$14697$1IfLeT) (cons (cons 'top-expr g$e$14703$1IfLeT) g$rhs*$14698$1IfLeT) g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT g$rib$14701$1IfLeT g$top?$14702$1IfLeT) (values g$e*$14694$1IfLeT g$r$14695$1IfLeT g$mr$14696$1IfLeT g$lex*$14697$1IfLeT g$rhs*$14698$1IfLeT g$mod**$14699$1IfLeT g$kwd*$14713$1IfLeT)))))))))))))) g$type$14712$1IfLeT))) (if (g$id?$9838$1IfLeT g$kwd$14710$1IfLeT) (cons g$kwd$14710$1IfLeT g$kwd*$14700$1IfLeT) g$kwd*$14700$1IfLeT)))) g$kwd$14709$1IfLeT g$value$14708$1IfLeT g$type$14707$1IfLeT)))))) (car g$e*$14694$1IfLeT)))))) (g$expand-transformer$10160$1IfLeT g$expand-transformer$16265$1IfLeT (case-lambda ((g$expr$14906$1IfLeT g$r$14907$1IfLeT) ((case-lambda ((g$rtc$14908$1IfLeT) ((case-lambda ((g$expanded-rhs$14909$1IfLeT) (begin (for-each ((case-lambda ((g$mark-visit$14910$1IfLeT) (case-lambda ((g$x$14911$1IfLeT) (begin (g$invoke-library$9654$1IfLeT g$x$14911$1IfLeT) (g$mark-visit$14910$1IfLeT g$x$14911$1IfLeT)))))) (g$vis-collector$10168$1IfLeT)) (g$rtc$14908$1IfLeT)) g$expanded-rhs$14909$1IfLeT))) ((case-lambda ((g$inv-collector$14916$1IfLeT g$vis-collector$14917$1IfLeT g$inv-collector$14918$1IfLeT g$vis-collector$14919$1IfLeT) ((case-lambda ((g$swap$14920$1IfLeT) (dynamic-wind g$swap$14920$1IfLeT (case-lambda (() (g$chi-expr$10133$1IfLeT g$expr$14906$1IfLeT g$r$14907$1IfLeT g$r$14907$1IfLeT))) g$swap$14920$1IfLeT))) (case-lambda (() (begin ((case-lambda ((g$t$14921$1IfLeT) (begin (g$inv-collector$14916$1IfLeT g$inv-collector$14918$1IfLeT) (set! g$inv-collector$14918$1IfLeT g$t$14921$1IfLeT)))) (g$inv-collector$14916$1IfLeT)) ((case-lambda ((g$t$14922$1IfLeT) (begin (g$vis-collector$14917$1IfLeT g$vis-collector$14919$1IfLeT) (set! g$vis-collector$14919$1IfLeT g$t$14922$1IfLeT)))) (g$vis-collector$14917$1IfLeT)))))))) g$inv-collector$10167$1IfLeT g$vis-collector$10168$1IfLeT g$rtc$14908$1IfLeT (case-lambda ((g$x$14923$1IfLeT) (values))))))) (g$make-collector$10166$1IfLeT))))) (g$parse-exports$10161$1IfLeT g$parse-exports$16266$1IfLeT (case-lambda ((g$exp*$14924$1IfLeT) (letrec* ((g$idsyn?$14925$1IfLeT (case-lambda ((g$x$14962$1IfLeT) (symbol? (g$syntax->datum$10224$1IfLeT g$x$14962$1IfLeT)))))) ((letrec ((g$f$14926$1IfLeT (case-lambda ((g$exp*$14927$1IfLeT g$int*$14928$1IfLeT g$ext*$14929$1IfLeT) (if (null? g$exp*$14927$1IfLeT) (begin ((case-lambda ((g$id*$14930$1IfLeT) (if (g$valid-bound-ids?$9843$1IfLeT g$id*$14930$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT 'export '"invalid exports" (g$find-dups$10143$1IfLeT g$id*$14930$1IfLeT))))) (map (case-lambda ((g$x$14931$1IfLeT) (g$make-stx$9811$1IfLeT g$x$14931$1IfLeT g$top-mark*$9780$1IfLeT '() '()))) g$ext*$14929$1IfLeT)) (values (map g$syntax->datum$10224$1IfLeT g$int*$14928$1IfLeT) (map g$syntax->datum$10224$1IfLeT g$ext*$14929$1IfLeT))) ((case-lambda ((g$t$14932$1IfLeT) ((case-lambda ((g$ls/false$14933$1IfLeT) (if (if g$ls/false$14933$1IfLeT (begin '#f (apply (case-lambda ((g$rename$14934$1IfLeT g$i*$14935$1IfLeT g$e*$14936$1IfLeT) '#t)) g$ls/false$14933$1IfLeT)) '#f) (apply (case-lambda ((g$rename$14937$1IfLeT g$i*$14938$1IfLeT g$e*$14939$1IfLeT) (begin (if (if (eq? (g$syntax->datum$10224$1IfLeT g$rename$14937$1IfLeT) 'rename) (if (g$for-all$8490$1IfLeT g$idsyn?$14925$1IfLeT g$i*$14938$1IfLeT) (begin '#f (g$for-all$8490$1IfLeT g$idsyn?$14925$1IfLeT g$e*$14939$1IfLeT)) '#f) '#f) (void) (g$syntax-violation$10221$1IfLeT 'export '"invalid export specifier" (car g$exp*$14927$1IfLeT))) (g$f$14926$1IfLeT (cdr g$exp*$14927$1IfLeT) (append g$i*$14938$1IfLeT g$int*$14928$1IfLeT) (append g$e*$14939$1IfLeT g$ext*$14929$1IfLeT))))) g$ls/false$14933$1IfLeT) ((case-lambda ((g$t$14940$1IfLeT) ((case-lambda ((g$ls/false$14941$1IfLeT) (if (if g$ls/false$14941$1IfLeT (begin '#f (apply (case-lambda ((g$ie$14942$1IfLeT) '#t)) g$ls/false$14941$1IfLeT)) '#f) (apply (case-lambda ((g$ie$14943$1IfLeT) (begin (if (g$idsyn?$14925$1IfLeT g$ie$14943$1IfLeT) (void) (g$syntax-violation$10221$1IfLeT 'export '"invalid export" g$ie$14943$1IfLeT)) (g$f$14926$1IfLeT (cdr g$exp*$14927$1IfLeT) (cons g$ie$14943$1IfLeT g$int*$14928$1IfLeT) (cons g$ie$14943$1IfLeT g$ext*$14929$1IfLeT))))) g$ls/false$14941$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14940$1IfLeT)))) ((case-lambda ((g$x$14944$1IfLeT) (list g$x$14944$1IfLeT))) g$t$14940$1IfLeT)))) g$t$14932$1IfLeT)))) ((case-lambda ((g$x$14945$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14945$1IfLeT) (begin '#f ((case-lambda ((g$q$14946$1IfLeT) (if g$q$14946$1IfLeT (begin '#f ((case-lambda ((g$r$14947$1IfLeT) (if g$r$14947$1IfLeT (begin '#f (append g$q$14946$1IfLeT g$r$14947$1IfLeT)) '#f))) ((letrec ((g$f$14948$1IfLeT (case-lambda ((g$x$14949$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14949$1IfLeT) ((case-lambda ((g$cars/f$14950$1IfLeT) (if g$cars/f$14950$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$14951$1IfLeT) (if g$cdrs/f$14951$1IfLeT (begin '#f (map cons g$cars/f$14950$1IfLeT g$cdrs/f$14951$1IfLeT)) '#f))) (g$f$14948$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$14949$1IfLeT)))) '#f))) ((case-lambda ((g$x$14952$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14952$1IfLeT) (begin '#f ((case-lambda ((g$q$14953$1IfLeT) (if g$q$14953$1IfLeT (begin '#f ((case-lambda ((g$r$14954$1IfLeT) (if g$r$14954$1IfLeT (begin '#f (append g$q$14953$1IfLeT g$r$14954$1IfLeT)) '#f))) ((case-lambda ((g$x$14955$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14955$1IfLeT) (begin '#f ((case-lambda ((g$q$14956$1IfLeT) (if g$q$14956$1IfLeT (begin '#f ((case-lambda ((g$r$14957$1IfLeT) (if g$r$14957$1IfLeT (begin '#f (append g$q$14956$1IfLeT g$r$14957$1IfLeT)) '#f))) ((case-lambda ((g$x$14958$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14958$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14955$1IfLeT)))) '#f))) ((case-lambda ((g$x$14959$1IfLeT) (list g$x$14959$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14955$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$14952$1IfLeT)))) '#f))) ((case-lambda ((g$x$14960$1IfLeT) (list g$x$14960$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14952$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$14949$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$14949$1IfLeT) (list (begin 'i* '()) (begin 'e* '())) '#f)))))) g$f$14948$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$14945$1IfLeT)))) '#f))) ((case-lambda ((g$x$14961$1IfLeT) (list g$x$14961$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14945$1IfLeT)))) '#f))) g$t$14932$1IfLeT)))) (car g$exp*$14927$1IfLeT))))))) g$f$14926$1IfLeT) g$exp*$14924$1IfLeT '() '()))))) (g$parse-library-name$10162$1IfLeT g$parse-library-name$16267$1IfLeT (case-lambda ((g$spec$14963$1IfLeT) (letrec* ((g$parse$14964$1IfLeT (case-lambda ((g$x$14971$1IfLeT) ((case-lambda ((g$t$14972$1IfLeT) ((case-lambda ((g$ls/false$14973$1IfLeT) (if (if g$ls/false$14973$1IfLeT (begin '#f (apply (case-lambda ((g$v*$14974$1IfLeT) (g$for-all$8490$1IfLeT (case-lambda ((g$x$14975$1IfLeT) ((case-lambda ((g$x$14976$1IfLeT) (if (integer? g$x$14976$1IfLeT) (begin '#f (exact? g$x$14976$1IfLeT)) '#f))) (g$syntax->datum$10224$1IfLeT g$x$14975$1IfLeT)))) g$v*$14974$1IfLeT))) g$ls/false$14973$1IfLeT)) '#f) (apply (case-lambda ((g$v*$14977$1IfLeT) (values '() (map g$syntax->datum$10224$1IfLeT g$v*$14977$1IfLeT)))) g$ls/false$14973$1IfLeT) ((case-lambda ((g$t$14978$1IfLeT) ((case-lambda ((g$ls/false$14979$1IfLeT) (if (if g$ls/false$14979$1IfLeT (begin '#f (apply (case-lambda ((g$x$14980$1IfLeT g$rest$14981$1IfLeT) (symbol? (g$syntax->datum$10224$1IfLeT g$x$14980$1IfLeT)))) g$ls/false$14979$1IfLeT)) '#f) (apply (case-lambda ((g$x$14982$1IfLeT g$rest$14983$1IfLeT) (call-with-values (case-lambda (() (g$parse$14964$1IfLeT g$rest$14983$1IfLeT))) (case-lambda ((g$x*$14986$1IfLeT g$v*$14987$1IfLeT) ((case-lambda ((g$v*$14988$1IfLeT g$x*$14989$1IfLeT) (values (cons (g$syntax->datum$10224$1IfLeT g$x$14982$1IfLeT) g$x*$14989$1IfLeT) g$v*$14988$1IfLeT))) g$v*$14987$1IfLeT g$x*$14986$1IfLeT)))))) g$ls/false$14979$1IfLeT) ((case-lambda ((g$t$14990$1IfLeT) ((case-lambda ((g$ls/false$14991$1IfLeT) (if (if g$ls/false$14991$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14991$1IfLeT)) '#f) (apply (case-lambda (() (values '() '()))) g$ls/false$14991$1IfLeT) ((case-lambda ((g$t$14992$1IfLeT) ((case-lambda ((g$ls/false$14993$1IfLeT) (if (if g$ls/false$14993$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$14993$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid library name" g$spec$14963$1IfLeT))) g$ls/false$14993$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$14992$1IfLeT)))) ((case-lambda ((g$x$14994$1IfLeT) '())) g$t$14992$1IfLeT)))) g$t$14990$1IfLeT)))) ((case-lambda ((g$x$14995$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$14995$1IfLeT) '()) (begin '#f '()) '#f))) g$t$14990$1IfLeT)))) g$t$14978$1IfLeT)))) ((case-lambda ((g$x$14996$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$14996$1IfLeT) (begin '#f ((case-lambda ((g$q$14997$1IfLeT) (if g$q$14997$1IfLeT (begin '#f ((case-lambda ((g$r$14998$1IfLeT) (if g$r$14998$1IfLeT (begin '#f (append g$q$14997$1IfLeT g$r$14998$1IfLeT)) '#f))) ((case-lambda ((g$x$14999$1IfLeT) (list g$x$14999$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$14996$1IfLeT)))) '#f))) ((case-lambda ((g$x$15000$1IfLeT) (list g$x$15000$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$14996$1IfLeT)))) '#f))) g$t$14978$1IfLeT)))) g$t$14972$1IfLeT)))) ((case-lambda ((g$x$15001$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15001$1IfLeT) (begin '#f ((case-lambda ((g$q$15002$1IfLeT) (if g$q$15002$1IfLeT (begin '#f ((case-lambda ((g$r$15003$1IfLeT) (if g$r$15003$1IfLeT (begin '#f (append g$q$15002$1IfLeT g$r$15003$1IfLeT)) '#f))) ((case-lambda ((g$x$15004$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15004$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15001$1IfLeT)))) '#f))) ((letrec ((g$f$15005$1IfLeT (case-lambda ((g$x$15006$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15006$1IfLeT) ((case-lambda ((g$cars/f$15007$1IfLeT) (if g$cars/f$15007$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15008$1IfLeT) (if g$cdrs/f$15008$1IfLeT (begin '#f (map cons g$cars/f$15007$1IfLeT g$cdrs/f$15008$1IfLeT)) '#f))) (g$f$15005$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15006$1IfLeT)))) '#f))) ((case-lambda ((g$x$15009$1IfLeT) (list g$x$15009$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15006$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15006$1IfLeT) (list (begin 'v* '())) '#f)))))) g$f$15005$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$15001$1IfLeT)))) '#f))) g$t$14972$1IfLeT)))) g$x$14971$1IfLeT))))) (call-with-values (case-lambda (() (g$parse$14964$1IfLeT g$spec$14963$1IfLeT))) (case-lambda ((g$name*$14967$1IfLeT g$ver*$14968$1IfLeT) ((case-lambda ((g$ver*$14969$1IfLeT g$name*$14970$1IfLeT) (begin (if (null? g$name*$14970$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"empty library name" g$spec$14963$1IfLeT) (void)) (values g$name*$14970$1IfLeT g$ver*$14969$1IfLeT)))) g$ver*$14968$1IfLeT g$name*$14967$1IfLeT)))))))) (g$parse-library$10163$1IfLeT g$parse-library$16268$1IfLeT (case-lambda ((g$e$15010$1IfLeT) ((case-lambda ((g$t$15011$1IfLeT) ((case-lambda ((g$ls/false$15012$1IfLeT) (if (if g$ls/false$15012$1IfLeT (begin '#f (apply (case-lambda ((g$library$15013$1IfLeT g$name*$15014$1IfLeT g$export$15015$1IfLeT g$exp*$15016$1IfLeT g$import$15017$1IfLeT g$imp*$15018$1IfLeT g$b*$15019$1IfLeT) (if (eq? (g$syntax->datum$10224$1IfLeT g$export$15015$1IfLeT) 'export) (if (eq? (g$syntax->datum$10224$1IfLeT g$import$15017$1IfLeT) 'import) (begin '#f (eq? (g$syntax->datum$10224$1IfLeT g$library$15013$1IfLeT) 'library)) '#f) '#f))) g$ls/false$15012$1IfLeT)) '#f) (apply (case-lambda ((g$library$15020$1IfLeT g$name*$15021$1IfLeT g$export$15022$1IfLeT g$exp*$15023$1IfLeT g$import$15024$1IfLeT g$imp*$15025$1IfLeT g$b*$15026$1IfLeT) (values g$name*$15021$1IfLeT g$exp*$15023$1IfLeT g$imp*$15025$1IfLeT g$b*$15026$1IfLeT))) g$ls/false$15012$1IfLeT) ((case-lambda ((g$t$15027$1IfLeT) ((case-lambda ((g$ls/false$15028$1IfLeT) (if (if g$ls/false$15028$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15028$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"malformed library" g$e$15010$1IfLeT))) g$ls/false$15028$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$15027$1IfLeT)))) ((case-lambda ((g$x$15029$1IfLeT) '())) g$t$15027$1IfLeT)))) g$t$15011$1IfLeT)))) ((case-lambda ((g$x$15030$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15030$1IfLeT) (begin '#f ((case-lambda ((g$q$15031$1IfLeT) (if g$q$15031$1IfLeT (begin '#f ((case-lambda ((g$r$15032$1IfLeT) (if g$r$15032$1IfLeT (begin '#f (append g$q$15031$1IfLeT g$r$15032$1IfLeT)) '#f))) ((case-lambda ((g$x$15033$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15033$1IfLeT) (begin '#f ((case-lambda ((g$q$15034$1IfLeT) (if g$q$15034$1IfLeT (begin '#f ((case-lambda ((g$r$15035$1IfLeT) (if g$r$15035$1IfLeT (begin '#f (append g$q$15034$1IfLeT g$r$15035$1IfLeT)) '#f))) ((case-lambda ((g$x$15036$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15036$1IfLeT) (begin '#f ((case-lambda ((g$q$15037$1IfLeT) (if g$q$15037$1IfLeT (begin '#f ((case-lambda ((g$r$15038$1IfLeT) (if g$r$15038$1IfLeT (begin '#f (append g$q$15037$1IfLeT g$r$15038$1IfLeT)) '#f))) ((case-lambda ((g$x$15039$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15039$1IfLeT) (begin '#f ((case-lambda ((g$q$15040$1IfLeT) (if g$q$15040$1IfLeT (begin '#f ((case-lambda ((g$r$15041$1IfLeT) (if g$r$15041$1IfLeT (begin '#f (append g$q$15040$1IfLeT g$r$15041$1IfLeT)) '#f))) ((letrec ((g$f$15042$1IfLeT (case-lambda ((g$x$15043$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15043$1IfLeT) ((case-lambda ((g$cars/f$15044$1IfLeT) (if g$cars/f$15044$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15045$1IfLeT) (if g$cdrs/f$15045$1IfLeT (begin '#f (map cons g$cars/f$15044$1IfLeT g$cdrs/f$15045$1IfLeT)) '#f))) (g$f$15042$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15043$1IfLeT)))) '#f))) ((case-lambda ((g$x$15046$1IfLeT) (list g$x$15046$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15043$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15043$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$15042$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15039$1IfLeT)))) '#f))) ((case-lambda ((g$x$15047$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15047$1IfLeT) (begin '#f ((case-lambda ((g$q$15048$1IfLeT) (if g$q$15048$1IfLeT (begin '#f ((case-lambda ((g$r$15049$1IfLeT) (if g$r$15049$1IfLeT (begin '#f (append g$q$15048$1IfLeT g$r$15049$1IfLeT)) '#f))) ((letrec ((g$f$15050$1IfLeT (case-lambda ((g$x$15051$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15051$1IfLeT) ((case-lambda ((g$cars/f$15052$1IfLeT) (if g$cars/f$15052$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15053$1IfLeT) (if g$cdrs/f$15053$1IfLeT (begin '#f (map cons g$cars/f$15052$1IfLeT g$cdrs/f$15053$1IfLeT)) '#f))) (g$f$15050$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15051$1IfLeT)))) '#f))) ((case-lambda ((g$x$15054$1IfLeT) (list g$x$15054$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15051$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15051$1IfLeT) (list (begin 'imp* '())) '#f)))))) g$f$15050$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15047$1IfLeT)))) '#f))) ((case-lambda ((g$x$15055$1IfLeT) (list g$x$15055$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15047$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$15039$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15036$1IfLeT)))) '#f))) ((case-lambda ((g$x$15056$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15056$1IfLeT) (begin '#f ((case-lambda ((g$q$15057$1IfLeT) (if g$q$15057$1IfLeT (begin '#f ((case-lambda ((g$r$15058$1IfLeT) (if g$r$15058$1IfLeT (begin '#f (append g$q$15057$1IfLeT g$r$15058$1IfLeT)) '#f))) ((letrec ((g$f$15059$1IfLeT (case-lambda ((g$x$15060$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15060$1IfLeT) ((case-lambda ((g$cars/f$15061$1IfLeT) (if g$cars/f$15061$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15062$1IfLeT) (if g$cdrs/f$15062$1IfLeT (begin '#f (map cons g$cars/f$15061$1IfLeT g$cdrs/f$15062$1IfLeT)) '#f))) (g$f$15059$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15060$1IfLeT)))) '#f))) ((case-lambda ((g$x$15063$1IfLeT) (list g$x$15063$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15060$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15060$1IfLeT) (list (begin 'exp* '())) '#f)))))) g$f$15059$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15056$1IfLeT)))) '#f))) ((case-lambda ((g$x$15064$1IfLeT) (list g$x$15064$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15056$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$15036$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15033$1IfLeT)))) '#f))) ((letrec ((g$f$15065$1IfLeT (case-lambda ((g$x$15066$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15066$1IfLeT) ((case-lambda ((g$cars/f$15067$1IfLeT) (if g$cars/f$15067$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15068$1IfLeT) (if g$cdrs/f$15068$1IfLeT (begin '#f (map cons g$cars/f$15067$1IfLeT g$cdrs/f$15068$1IfLeT)) '#f))) (g$f$15065$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15066$1IfLeT)))) '#f))) ((case-lambda ((g$x$15069$1IfLeT) (list g$x$15069$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15066$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15066$1IfLeT) (list (begin 'name* '())) '#f)))))) g$f$15065$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$15033$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15030$1IfLeT)))) '#f))) ((case-lambda ((g$x$15070$1IfLeT) (list g$x$15070$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15030$1IfLeT)))) '#f))) g$t$15011$1IfLeT)))) g$e$15010$1IfLeT)))) (g$parse-import-spec*$10164$1IfLeT g$parse-import-spec*$16269$1IfLeT (case-lambda ((g$imp*$15071$1IfLeT) (letrec* ((g$idsyn?$15072$1IfLeT (case-lambda ((g$x$15523$1IfLeT) (symbol? (g$syntax->datum$10224$1IfLeT g$x$15523$1IfLeT))))) (g$dup-error$15073$1IfLeT (case-lambda ((g$name$15522$1IfLeT) (g$syntax-violation$10221$1IfLeT 'import '"two imports with different bindings" g$name$15522$1IfLeT)))) (g$merge-substs$15074$1IfLeT (case-lambda ((g$s$15513$1IfLeT g$subst$15514$1IfLeT) (letrec* ((g$insert-to-subst$15515$1IfLeT (case-lambda ((g$a$15516$1IfLeT g$subst$15517$1IfLeT) ((case-lambda ((g$name$15518$1IfLeT g$label$15519$1IfLeT) ((case-lambda ((g$t$15520$1IfLeT) (if g$t$15520$1IfLeT ((case-lambda ((g$x$15521$1IfLeT) (if (eq? (cdr g$x$15521$1IfLeT) g$label$15519$1IfLeT) g$subst$15517$1IfLeT (g$dup-error$15073$1IfLeT g$name$15518$1IfLeT)))) g$t$15520$1IfLeT) (cons g$a$15516$1IfLeT g$subst$15517$1IfLeT)))) (assq g$name$15518$1IfLeT g$subst$15517$1IfLeT)))) (car g$a$15516$1IfLeT) (cdr g$a$15516$1IfLeT)))))) (if (null? g$s$15513$1IfLeT) g$subst$15514$1IfLeT (g$insert-to-subst$15515$1IfLeT (car g$s$15513$1IfLeT) (g$merge-substs$15074$1IfLeT (cdr g$s$15513$1IfLeT) g$subst$15514$1IfLeT))))))) (g$exclude*$15075$1IfLeT (case-lambda ((g$sym*$15489$1IfLeT g$subst$15490$1IfLeT) (letrec* ((g$exclude$15491$1IfLeT (case-lambda ((g$sym$15504$1IfLeT g$subst$15505$1IfLeT) (if (null? g$subst$15505$1IfLeT) (g$syntax-violation$10221$1IfLeT 'import '"cannot rename unbound identifier" g$sym$15504$1IfLeT) (if (eq? g$sym$15504$1IfLeT (g$caar$8069$1IfLeT g$subst$15505$1IfLeT)) (values (g$cdar$8071$1IfLeT g$subst$15505$1IfLeT) (cdr g$subst$15505$1IfLeT)) ((case-lambda ((g$a$15506$1IfLeT) (call-with-values (case-lambda (() (g$exclude$15491$1IfLeT g$sym$15504$1IfLeT (cdr g$subst$15505$1IfLeT)))) (case-lambda ((g$old$15509$1IfLeT g$subst$15510$1IfLeT) ((case-lambda ((g$subst$15511$1IfLeT g$old$15512$1IfLeT) (values g$old$15512$1IfLeT (cons g$a$15506$1IfLeT g$subst$15511$1IfLeT)))) g$subst$15510$1IfLeT g$old$15509$1IfLeT)))))) (car g$subst$15505$1IfLeT)))))))) (if (null? g$sym*$15489$1IfLeT) (values '() g$subst$15490$1IfLeT) (call-with-values (case-lambda (() (g$exclude$15491$1IfLeT (car g$sym*$15489$1IfLeT) g$subst$15490$1IfLeT))) (case-lambda ((g$old$15494$1IfLeT g$subst$15495$1IfLeT) ((case-lambda ((g$subst$15496$1IfLeT g$old$15497$1IfLeT) (call-with-values (case-lambda (() (g$exclude*$15075$1IfLeT (cdr g$sym*$15489$1IfLeT) g$subst$15496$1IfLeT))) (case-lambda ((g$old*$15500$1IfLeT g$subst$15501$1IfLeT) ((case-lambda ((g$subst$15502$1IfLeT g$old*$15503$1IfLeT) (values (cons g$old$15497$1IfLeT g$old*$15503$1IfLeT) g$subst$15502$1IfLeT))) g$subst$15501$1IfLeT g$old*$15500$1IfLeT)))))) g$subst$15495$1IfLeT g$old$15494$1IfLeT))))))))) (g$find*$15076$1IfLeT (case-lambda ((g$sym*$15485$1IfLeT g$subst$15486$1IfLeT) (map (case-lambda ((g$x$15487$1IfLeT) ((case-lambda ((g$t$15488$1IfLeT) (if g$t$15488$1IfLeT (cdr g$t$15488$1IfLeT) (g$syntax-violation$10221$1IfLeT 'import '"cannot find identifier" g$x$15487$1IfLeT)))) (assq g$x$15487$1IfLeT g$subst$15486$1IfLeT)))) g$sym*$15485$1IfLeT)))) (g$rem*$15077$1IfLeT (case-lambda ((g$sym*$15481$1IfLeT g$subst$15482$1IfLeT) ((letrec ((g$f$15483$1IfLeT (case-lambda ((g$subst$15484$1IfLeT) (if (null? g$subst$15484$1IfLeT) '() (if (memq (g$caar$8069$1IfLeT g$subst$15484$1IfLeT) g$sym*$15481$1IfLeT) (g$f$15483$1IfLeT (cdr g$subst$15484$1IfLeT)) (cons (car g$subst$15484$1IfLeT) (g$f$15483$1IfLeT (cdr g$subst$15484$1IfLeT))))))))) g$f$15483$1IfLeT) g$subst$15482$1IfLeT)))) (g$remove-dups$15078$1IfLeT (case-lambda ((g$ls$15480$1IfLeT) (if (null? g$ls$15480$1IfLeT) '() (if (memq (car g$ls$15480$1IfLeT) (cdr g$ls$15480$1IfLeT)) (g$remove-dups$15078$1IfLeT (cdr g$ls$15480$1IfLeT)) (cons (car g$ls$15480$1IfLeT) (g$remove-dups$15078$1IfLeT (cdr g$ls$15480$1IfLeT)))))))) (g$parse-library-name$15079$1IfLeT (case-lambda ((g$spec$15266$1IfLeT) (letrec* ((g$subversion?$15267$1IfLeT (case-lambda ((g$x$15479$1IfLeT) (if (integer? g$x$15479$1IfLeT) (if (exact? g$x$15479$1IfLeT) (begin '#f (>= g$x$15479$1IfLeT '0)) '#f) '#f)))) (g$subversion-pred$15268$1IfLeT (case-lambda ((g$x*$15384$1IfLeT) ((case-lambda ((g$t$15385$1IfLeT) ((case-lambda ((g$ls/false$15386$1IfLeT) (if (if g$ls/false$15386$1IfLeT (begin '#f (apply (case-lambda ((g$n$15387$1IfLeT) (g$subversion?$15267$1IfLeT (g$syntax->datum$10224$1IfLeT g$n$15387$1IfLeT)))) g$ls/false$15386$1IfLeT)) '#f) (apply (case-lambda ((g$n$15388$1IfLeT) (case-lambda ((g$x$15389$1IfLeT) (= g$x$15389$1IfLeT (g$syntax->datum$10224$1IfLeT g$n$15388$1IfLeT)))))) g$ls/false$15386$1IfLeT) ((case-lambda ((g$t$15390$1IfLeT) ((case-lambda ((g$ls/false$15391$1IfLeT) (if (if g$ls/false$15391$1IfLeT (begin '#f (apply (case-lambda ((g$p?$15392$1IfLeT g$sub*$15393$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$p?$15392$1IfLeT) 'and))) g$ls/false$15391$1IfLeT)) '#f) (apply (case-lambda ((g$p?$15394$1IfLeT g$sub*$15395$1IfLeT) ((case-lambda ((g$p*$15396$1IfLeT) (case-lambda ((g$x$15397$1IfLeT) (g$for-all$8490$1IfLeT (case-lambda ((g$p$15398$1IfLeT) (g$p$15398$1IfLeT g$x$15397$1IfLeT))) g$p*$15396$1IfLeT))))) (map g$subversion-pred$15268$1IfLeT g$sub*$15395$1IfLeT)))) g$ls/false$15391$1IfLeT) ((case-lambda ((g$t$15399$1IfLeT) ((case-lambda ((g$ls/false$15400$1IfLeT) (if (if g$ls/false$15400$1IfLeT (begin '#f (apply (case-lambda ((g$p?$15401$1IfLeT g$sub*$15402$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$p?$15401$1IfLeT) 'or))) g$ls/false$15400$1IfLeT)) '#f) (apply (case-lambda ((g$p?$15403$1IfLeT g$sub*$15404$1IfLeT) ((case-lambda ((g$p*$15405$1IfLeT) (case-lambda ((g$x$15406$1IfLeT) (g$exists$8491$1IfLeT (case-lambda ((g$p$15407$1IfLeT) (g$p$15407$1IfLeT g$x$15406$1IfLeT))) g$p*$15405$1IfLeT))))) (map g$subversion-pred$15268$1IfLeT g$sub*$15404$1IfLeT)))) g$ls/false$15400$1IfLeT) ((case-lambda ((g$t$15408$1IfLeT) ((case-lambda ((g$ls/false$15409$1IfLeT) (if (if g$ls/false$15409$1IfLeT (begin '#f (apply (case-lambda ((g$p?$15410$1IfLeT g$sub$15411$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$p?$15410$1IfLeT) 'not))) g$ls/false$15409$1IfLeT)) '#f) (apply (case-lambda ((g$p?$15412$1IfLeT g$sub$15413$1IfLeT) ((case-lambda ((g$p$15414$1IfLeT) (case-lambda ((g$x$15415$1IfLeT) (not (g$p$15414$1IfLeT g$x$15415$1IfLeT)))))) (g$subversion-pred$15268$1IfLeT g$sub$15413$1IfLeT)))) g$ls/false$15409$1IfLeT) ((case-lambda ((g$t$15416$1IfLeT) ((case-lambda ((g$ls/false$15417$1IfLeT) (if (if g$ls/false$15417$1IfLeT (begin '#f (apply (case-lambda ((g$p?$15418$1IfLeT g$n$15419$1IfLeT) (if (eq? (g$syntax->datum$10224$1IfLeT g$p?$15418$1IfLeT) '<=) (begin '#f (g$subversion?$15267$1IfLeT (g$syntax->datum$10224$1IfLeT g$n$15419$1IfLeT))) '#f))) g$ls/false$15417$1IfLeT)) '#f) (apply (case-lambda ((g$p?$15420$1IfLeT g$n$15421$1IfLeT) (case-lambda ((g$x$15422$1IfLeT) (<= g$x$15422$1IfLeT (g$syntax->datum$10224$1IfLeT g$n$15421$1IfLeT)))))) g$ls/false$15417$1IfLeT) ((case-lambda ((g$t$15423$1IfLeT) ((case-lambda ((g$ls/false$15424$1IfLeT) (if (if g$ls/false$15424$1IfLeT (begin '#f (apply (case-lambda ((g$p?$15425$1IfLeT g$n$15426$1IfLeT) (if (eq? (g$syntax->datum$10224$1IfLeT g$p?$15425$1IfLeT) '>=) (begin '#f (g$subversion?$15267$1IfLeT g$n$15426$1IfLeT)) '#f))) g$ls/false$15424$1IfLeT)) '#f) (apply (case-lambda ((g$p?$15427$1IfLeT g$n$15428$1IfLeT) (case-lambda ((g$x$15429$1IfLeT) (>= g$x$15429$1IfLeT (g$syntax->datum$10224$1IfLeT g$n$15428$1IfLeT)))))) g$ls/false$15424$1IfLeT) ((case-lambda ((g$t$15430$1IfLeT) ((case-lambda ((g$ls/false$15431$1IfLeT) (if (if g$ls/false$15431$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15431$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT 'import '"invalid sub-version spec" g$spec$15266$1IfLeT g$x*$15384$1IfLeT))) g$ls/false$15431$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$15430$1IfLeT)))) ((case-lambda ((g$x$15432$1IfLeT) '())) g$t$15430$1IfLeT)))) g$t$15423$1IfLeT)))) ((case-lambda ((g$x$15433$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15433$1IfLeT) (begin '#f ((case-lambda ((g$q$15434$1IfLeT) (if g$q$15434$1IfLeT (begin '#f ((case-lambda ((g$r$15435$1IfLeT) (if g$r$15435$1IfLeT (begin '#f (append g$q$15434$1IfLeT g$r$15435$1IfLeT)) '#f))) ((case-lambda ((g$x$15436$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15436$1IfLeT) (begin '#f ((case-lambda ((g$q$15437$1IfLeT) (if g$q$15437$1IfLeT (begin '#f ((case-lambda ((g$r$15438$1IfLeT) (if g$r$15438$1IfLeT (begin '#f (append g$q$15437$1IfLeT g$r$15438$1IfLeT)) '#f))) ((case-lambda ((g$x$15439$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15439$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15436$1IfLeT)))) '#f))) ((case-lambda ((g$x$15440$1IfLeT) (list g$x$15440$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15436$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15433$1IfLeT)))) '#f))) ((case-lambda ((g$x$15441$1IfLeT) (list g$x$15441$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15433$1IfLeT)))) '#f))) g$t$15423$1IfLeT)))) g$t$15416$1IfLeT)))) ((case-lambda ((g$x$15442$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15442$1IfLeT) (begin '#f ((case-lambda ((g$q$15443$1IfLeT) (if g$q$15443$1IfLeT (begin '#f ((case-lambda ((g$r$15444$1IfLeT) (if g$r$15444$1IfLeT (begin '#f (append g$q$15443$1IfLeT g$r$15444$1IfLeT)) '#f))) ((case-lambda ((g$x$15445$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15445$1IfLeT) (begin '#f ((case-lambda ((g$q$15446$1IfLeT) (if g$q$15446$1IfLeT (begin '#f ((case-lambda ((g$r$15447$1IfLeT) (if g$r$15447$1IfLeT (begin '#f (append g$q$15446$1IfLeT g$r$15447$1IfLeT)) '#f))) ((case-lambda ((g$x$15448$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15448$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15445$1IfLeT)))) '#f))) ((case-lambda ((g$x$15449$1IfLeT) (list g$x$15449$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15445$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15442$1IfLeT)))) '#f))) ((case-lambda ((g$x$15450$1IfLeT) (list g$x$15450$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15442$1IfLeT)))) '#f))) g$t$15416$1IfLeT)))) g$t$15408$1IfLeT)))) ((case-lambda ((g$x$15451$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15451$1IfLeT) (begin '#f ((case-lambda ((g$q$15452$1IfLeT) (if g$q$15452$1IfLeT (begin '#f ((case-lambda ((g$r$15453$1IfLeT) (if g$r$15453$1IfLeT (begin '#f (append g$q$15452$1IfLeT g$r$15453$1IfLeT)) '#f))) ((case-lambda ((g$x$15454$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15454$1IfLeT) (begin '#f ((case-lambda ((g$q$15455$1IfLeT) (if g$q$15455$1IfLeT (begin '#f ((case-lambda ((g$r$15456$1IfLeT) (if g$r$15456$1IfLeT (begin '#f (append g$q$15455$1IfLeT g$r$15456$1IfLeT)) '#f))) ((case-lambda ((g$x$15457$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15457$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15454$1IfLeT)))) '#f))) ((case-lambda ((g$x$15458$1IfLeT) (list g$x$15458$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15454$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15451$1IfLeT)))) '#f))) ((case-lambda ((g$x$15459$1IfLeT) (list g$x$15459$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15451$1IfLeT)))) '#f))) g$t$15408$1IfLeT)))) g$t$15399$1IfLeT)))) ((case-lambda ((g$x$15460$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15460$1IfLeT) (begin '#f ((case-lambda ((g$q$15461$1IfLeT) (if g$q$15461$1IfLeT (begin '#f ((case-lambda ((g$r$15462$1IfLeT) (if g$r$15462$1IfLeT (begin '#f (append g$q$15461$1IfLeT g$r$15462$1IfLeT)) '#f))) ((letrec ((g$f$15463$1IfLeT (case-lambda ((g$x$15464$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15464$1IfLeT) ((case-lambda ((g$cars/f$15465$1IfLeT) (if g$cars/f$15465$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15466$1IfLeT) (if g$cdrs/f$15466$1IfLeT (begin '#f (map cons g$cars/f$15465$1IfLeT g$cdrs/f$15466$1IfLeT)) '#f))) (g$f$15463$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15464$1IfLeT)))) '#f))) ((case-lambda ((g$x$15467$1IfLeT) (list g$x$15467$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15464$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15464$1IfLeT) (list (begin 'sub* '())) '#f)))))) g$f$15463$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15460$1IfLeT)))) '#f))) ((case-lambda ((g$x$15468$1IfLeT) (list g$x$15468$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15460$1IfLeT)))) '#f))) g$t$15399$1IfLeT)))) g$t$15390$1IfLeT)))) ((case-lambda ((g$x$15469$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15469$1IfLeT) (begin '#f ((case-lambda ((g$q$15470$1IfLeT) (if g$q$15470$1IfLeT (begin '#f ((case-lambda ((g$r$15471$1IfLeT) (if g$r$15471$1IfLeT (begin '#f (append g$q$15470$1IfLeT g$r$15471$1IfLeT)) '#f))) ((letrec ((g$f$15472$1IfLeT (case-lambda ((g$x$15473$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15473$1IfLeT) ((case-lambda ((g$cars/f$15474$1IfLeT) (if g$cars/f$15474$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15475$1IfLeT) (if g$cdrs/f$15475$1IfLeT (begin '#f (map cons g$cars/f$15474$1IfLeT g$cdrs/f$15475$1IfLeT)) '#f))) (g$f$15472$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15473$1IfLeT)))) '#f))) ((case-lambda ((g$x$15476$1IfLeT) (list g$x$15476$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15473$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15473$1IfLeT) (list (begin 'sub* '())) '#f)))))) g$f$15472$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15469$1IfLeT)))) '#f))) ((case-lambda ((g$x$15477$1IfLeT) (list g$x$15477$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15469$1IfLeT)))) '#f))) g$t$15390$1IfLeT)))) g$t$15385$1IfLeT)))) ((case-lambda ((g$x$15478$1IfLeT) (list g$x$15478$1IfLeT))) g$t$15385$1IfLeT)))) g$x*$15384$1IfLeT)))) (g$version-pred$15269$1IfLeT (case-lambda ((g$x*$15309$1IfLeT) ((case-lambda ((g$t$15310$1IfLeT) ((case-lambda ((g$ls/false$15311$1IfLeT) (if (if g$ls/false$15311$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15311$1IfLeT)) '#f) (apply (case-lambda (() (case-lambda ((g$x$15312$1IfLeT) '#t)))) g$ls/false$15311$1IfLeT) ((case-lambda ((g$t$15313$1IfLeT) ((case-lambda ((g$ls/false$15314$1IfLeT) (if (if g$ls/false$15314$1IfLeT (begin '#f (apply (case-lambda ((g$c$15315$1IfLeT g$ver*$15316$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$c$15315$1IfLeT) 'and))) g$ls/false$15314$1IfLeT)) '#f) (apply (case-lambda ((g$c$15317$1IfLeT g$ver*$15318$1IfLeT) ((case-lambda ((g$p*$15319$1IfLeT) (case-lambda ((g$x$15320$1IfLeT) (g$for-all$8490$1IfLeT (case-lambda ((g$p$15321$1IfLeT) (g$p$15321$1IfLeT g$x$15320$1IfLeT))) g$p*$15319$1IfLeT))))) (map g$version-pred$15269$1IfLeT g$ver*$15318$1IfLeT)))) g$ls/false$15314$1IfLeT) ((case-lambda ((g$t$15322$1IfLeT) ((case-lambda ((g$ls/false$15323$1IfLeT) (if (if g$ls/false$15323$1IfLeT (begin '#f (apply (case-lambda ((g$c$15324$1IfLeT g$ver*$15325$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$c$15324$1IfLeT) 'or))) g$ls/false$15323$1IfLeT)) '#f) (apply (case-lambda ((g$c$15326$1IfLeT g$ver*$15327$1IfLeT) ((case-lambda ((g$p*$15328$1IfLeT) (case-lambda ((g$x$15329$1IfLeT) (g$exists$8491$1IfLeT (case-lambda ((g$p$15330$1IfLeT) (g$p$15330$1IfLeT g$x$15329$1IfLeT))) g$p*$15328$1IfLeT))))) (map g$version-pred$15269$1IfLeT g$ver*$15327$1IfLeT)))) g$ls/false$15323$1IfLeT) ((case-lambda ((g$t$15331$1IfLeT) ((case-lambda ((g$ls/false$15332$1IfLeT) (if (if g$ls/false$15332$1IfLeT (begin '#f (apply (case-lambda ((g$c$15333$1IfLeT g$ver$15334$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$c$15333$1IfLeT) 'not))) g$ls/false$15332$1IfLeT)) '#f) (apply (case-lambda ((g$c$15335$1IfLeT g$ver$15336$1IfLeT) ((case-lambda ((g$p$15337$1IfLeT) (case-lambda ((g$x$15338$1IfLeT) (not (g$p$15337$1IfLeT g$x$15338$1IfLeT)))))) (g$version-pred$15269$1IfLeT g$ver$15336$1IfLeT)))) g$ls/false$15332$1IfLeT) ((case-lambda ((g$t$15339$1IfLeT) ((case-lambda ((g$ls/false$15340$1IfLeT) (if (if g$ls/false$15340$1IfLeT (begin '#f (apply (case-lambda ((g$sub*$15341$1IfLeT) '#t)) g$ls/false$15340$1IfLeT)) '#f) (apply (case-lambda ((g$sub*$15342$1IfLeT) ((case-lambda ((g$p*$15343$1IfLeT) (case-lambda ((g$x$15344$1IfLeT) ((letrec ((g$f$15345$1IfLeT (case-lambda ((g$p*$15346$1IfLeT g$x$15347$1IfLeT) (if (null? g$p*$15346$1IfLeT) '#t (if (null? g$x$15347$1IfLeT) '#f (if ((car g$p*$15346$1IfLeT) (car g$x$15347$1IfLeT)) (begin '#f (g$f$15345$1IfLeT (cdr g$p*$15346$1IfLeT) (cdr g$x*$15309$1IfLeT))) '#f))))))) g$f$15345$1IfLeT) g$p*$15343$1IfLeT g$x$15344$1IfLeT))))) (map g$subversion-pred$15268$1IfLeT g$sub*$15342$1IfLeT)))) g$ls/false$15340$1IfLeT) ((case-lambda ((g$t$15348$1IfLeT) ((case-lambda ((g$ls/false$15349$1IfLeT) (if (if g$ls/false$15349$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15349$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT 'import '"invalid version spec" g$spec$15266$1IfLeT g$x*$15309$1IfLeT))) g$ls/false$15349$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$15348$1IfLeT)))) ((case-lambda ((g$x$15350$1IfLeT) '())) g$t$15348$1IfLeT)))) g$t$15339$1IfLeT)))) ((letrec ((g$f$15351$1IfLeT (case-lambda ((g$x$15352$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15352$1IfLeT) ((case-lambda ((g$cars/f$15353$1IfLeT) (if g$cars/f$15353$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15354$1IfLeT) (if g$cdrs/f$15354$1IfLeT (begin '#f (map cons g$cars/f$15353$1IfLeT g$cdrs/f$15354$1IfLeT)) '#f))) (g$f$15351$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15352$1IfLeT)))) '#f))) ((case-lambda ((g$x$15355$1IfLeT) (list g$x$15355$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15352$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15352$1IfLeT) (list (begin 'sub* '())) '#f)))))) g$f$15351$1IfLeT) g$t$15339$1IfLeT)))) g$t$15331$1IfLeT)))) ((case-lambda ((g$x$15356$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15356$1IfLeT) (begin '#f ((case-lambda ((g$q$15357$1IfLeT) (if g$q$15357$1IfLeT (begin '#f ((case-lambda ((g$r$15358$1IfLeT) (if g$r$15358$1IfLeT (begin '#f (append g$q$15357$1IfLeT g$r$15358$1IfLeT)) '#f))) ((case-lambda ((g$x$15359$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15359$1IfLeT) (begin '#f ((case-lambda ((g$q$15360$1IfLeT) (if g$q$15360$1IfLeT (begin '#f ((case-lambda ((g$r$15361$1IfLeT) (if g$r$15361$1IfLeT (begin '#f (append g$q$15360$1IfLeT g$r$15361$1IfLeT)) '#f))) ((case-lambda ((g$x$15362$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15362$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15359$1IfLeT)))) '#f))) ((case-lambda ((g$x$15363$1IfLeT) (list g$x$15363$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15359$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15356$1IfLeT)))) '#f))) ((case-lambda ((g$x$15364$1IfLeT) (list g$x$15364$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15356$1IfLeT)))) '#f))) g$t$15331$1IfLeT)))) g$t$15322$1IfLeT)))) ((case-lambda ((g$x$15365$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15365$1IfLeT) (begin '#f ((case-lambda ((g$q$15366$1IfLeT) (if g$q$15366$1IfLeT (begin '#f ((case-lambda ((g$r$15367$1IfLeT) (if g$r$15367$1IfLeT (begin '#f (append g$q$15366$1IfLeT g$r$15367$1IfLeT)) '#f))) ((letrec ((g$f$15368$1IfLeT (case-lambda ((g$x$15369$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15369$1IfLeT) ((case-lambda ((g$cars/f$15370$1IfLeT) (if g$cars/f$15370$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15371$1IfLeT) (if g$cdrs/f$15371$1IfLeT (begin '#f (map cons g$cars/f$15370$1IfLeT g$cdrs/f$15371$1IfLeT)) '#f))) (g$f$15368$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15369$1IfLeT)))) '#f))) ((case-lambda ((g$x$15372$1IfLeT) (list g$x$15372$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15369$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15369$1IfLeT) (list (begin 'ver* '())) '#f)))))) g$f$15368$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15365$1IfLeT)))) '#f))) ((case-lambda ((g$x$15373$1IfLeT) (list g$x$15373$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15365$1IfLeT)))) '#f))) g$t$15322$1IfLeT)))) g$t$15313$1IfLeT)))) ((case-lambda ((g$x$15374$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15374$1IfLeT) (begin '#f ((case-lambda ((g$q$15375$1IfLeT) (if g$q$15375$1IfLeT (begin '#f ((case-lambda ((g$r$15376$1IfLeT) (if g$r$15376$1IfLeT (begin '#f (append g$q$15375$1IfLeT g$r$15376$1IfLeT)) '#f))) ((letrec ((g$f$15377$1IfLeT (case-lambda ((g$x$15378$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15378$1IfLeT) ((case-lambda ((g$cars/f$15379$1IfLeT) (if g$cars/f$15379$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15380$1IfLeT) (if g$cdrs/f$15380$1IfLeT (begin '#f (map cons g$cars/f$15379$1IfLeT g$cdrs/f$15380$1IfLeT)) '#f))) (g$f$15377$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15378$1IfLeT)))) '#f))) ((case-lambda ((g$x$15381$1IfLeT) (list g$x$15381$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15378$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15378$1IfLeT) (list (begin 'ver* '())) '#f)))))) g$f$15377$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15374$1IfLeT)))) '#f))) ((case-lambda ((g$x$15382$1IfLeT) (list g$x$15382$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15374$1IfLeT)))) '#f))) g$t$15313$1IfLeT)))) g$t$15310$1IfLeT)))) ((case-lambda ((g$x$15383$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15383$1IfLeT) '()) (begin '#f '()) '#f))) g$t$15310$1IfLeT)))) g$x*$15309$1IfLeT))))) ((letrec ((g$f$15270$1IfLeT (case-lambda ((g$x$15271$1IfLeT) ((case-lambda ((g$t$15272$1IfLeT) ((case-lambda ((g$ls/false$15273$1IfLeT) (if (if g$ls/false$15273$1IfLeT (begin '#f (apply (case-lambda ((g$version-spec*$15274$1IfLeT) '#t)) g$ls/false$15273$1IfLeT)) '#f) (apply (case-lambda ((g$version-spec*$15275$1IfLeT) (values '() (g$version-pred$15269$1IfLeT g$version-spec*$15275$1IfLeT)))) g$ls/false$15273$1IfLeT) ((case-lambda ((g$t$15276$1IfLeT) ((case-lambda ((g$ls/false$15277$1IfLeT) (if (if g$ls/false$15277$1IfLeT (begin '#f (apply (case-lambda ((g$x$15278$1IfLeT g$x*$15279$1IfLeT) (g$idsyn?$15072$1IfLeT g$x$15278$1IfLeT))) g$ls/false$15277$1IfLeT)) '#f) (apply (case-lambda ((g$x$15280$1IfLeT g$x*$15281$1IfLeT) (call-with-values (case-lambda (() (g$f$15270$1IfLeT g$x*$15281$1IfLeT))) (case-lambda ((g$name$15284$1IfLeT g$pred$15285$1IfLeT) ((case-lambda ((g$pred$15286$1IfLeT g$name$15287$1IfLeT) (values (cons (g$syntax->datum$10224$1IfLeT g$x$15280$1IfLeT) g$name$15287$1IfLeT) g$pred$15286$1IfLeT))) g$pred$15285$1IfLeT g$name$15284$1IfLeT)))))) g$ls/false$15277$1IfLeT) ((case-lambda ((g$t$15288$1IfLeT) ((case-lambda ((g$ls/false$15289$1IfLeT) (if (if g$ls/false$15289$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15289$1IfLeT)) '#f) (apply (case-lambda (() (values '() (case-lambda ((g$x$15290$1IfLeT) '#t))))) g$ls/false$15289$1IfLeT) ((case-lambda ((g$t$15291$1IfLeT) ((case-lambda ((g$ls/false$15292$1IfLeT) (if (if g$ls/false$15292$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15292$1IfLeT)) '#f) (apply (case-lambda (() (g$syntax-violation$10221$1IfLeT '#f '"invalid import spec" g$spec$15266$1IfLeT))) g$ls/false$15292$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$15291$1IfLeT)))) ((case-lambda ((g$x$15293$1IfLeT) '())) g$t$15291$1IfLeT)))) g$t$15288$1IfLeT)))) ((case-lambda ((g$x$15294$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15294$1IfLeT) '()) (begin '#f '()) '#f))) g$t$15288$1IfLeT)))) g$t$15276$1IfLeT)))) ((case-lambda ((g$x$15295$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15295$1IfLeT) (begin '#f ((case-lambda ((g$q$15296$1IfLeT) (if g$q$15296$1IfLeT (begin '#f ((case-lambda ((g$r$15297$1IfLeT) (if g$r$15297$1IfLeT (begin '#f (append g$q$15296$1IfLeT g$r$15297$1IfLeT)) '#f))) ((case-lambda ((g$x$15298$1IfLeT) (list g$x$15298$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$15295$1IfLeT)))) '#f))) ((case-lambda ((g$x$15299$1IfLeT) (list g$x$15299$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15295$1IfLeT)))) '#f))) g$t$15276$1IfLeT)))) g$t$15272$1IfLeT)))) ((case-lambda ((g$x$15300$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15300$1IfLeT) (begin '#f ((case-lambda ((g$q$15301$1IfLeT) (if g$q$15301$1IfLeT (begin '#f ((case-lambda ((g$r$15302$1IfLeT) (if g$r$15302$1IfLeT (begin '#f (append g$q$15301$1IfLeT g$r$15302$1IfLeT)) '#f))) ((case-lambda ((g$x$15303$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15303$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15300$1IfLeT)))) '#f))) ((letrec ((g$f$15304$1IfLeT (case-lambda ((g$x$15305$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15305$1IfLeT) ((case-lambda ((g$cars/f$15306$1IfLeT) (if g$cars/f$15306$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15307$1IfLeT) (if g$cdrs/f$15307$1IfLeT (begin '#f (map cons g$cars/f$15306$1IfLeT g$cdrs/f$15307$1IfLeT)) '#f))) (g$f$15304$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15305$1IfLeT)))) '#f))) ((case-lambda ((g$x$15308$1IfLeT) (list g$x$15308$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15305$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15305$1IfLeT) (list (begin 'version-spec* '())) '#f)))))) g$f$15304$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$15300$1IfLeT)))) '#f))) g$t$15272$1IfLeT)))) g$x$15271$1IfLeT))))) g$f$15270$1IfLeT) g$spec$15266$1IfLeT))))) (g$import-library$15080$1IfLeT (case-lambda ((g$spec*$15258$1IfLeT) (call-with-values (case-lambda (() (g$parse-library-name$15079$1IfLeT g$spec*$15258$1IfLeT))) (case-lambda ((g$name$15261$1IfLeT g$pred$15262$1IfLeT) ((case-lambda ((g$pred$15263$1IfLeT g$name$15264$1IfLeT) (begin (if (null? g$name$15264$1IfLeT) (g$syntax-violation$10221$1IfLeT 'import '"empty library name" g$spec*$15258$1IfLeT) (void)) ((case-lambda ((g$lib$15265$1IfLeT) (begin (if g$lib$15265$1IfLeT (void) (g$syntax-violation$10221$1IfLeT 'import '"cannot find library with required name" g$name$15264$1IfLeT)) (if (g$pred$15263$1IfLeT (g$library-version$9607$1IfLeT g$lib$15265$1IfLeT)) (void) (g$syntax-violation$10221$1IfLeT 'import '"library does not satisfy version specification" g$spec*$15258$1IfLeT g$lib$15265$1IfLeT)) ((g$imp-collector$10169$1IfLeT) g$lib$15265$1IfLeT) (g$library-subst$9611$1IfLeT g$lib$15265$1IfLeT)))) (g$find-library-by-name$9647$1IfLeT g$name$15264$1IfLeT))))) g$pred$15262$1IfLeT g$name$15261$1IfLeT))))))) (g$get-import$15081$1IfLeT (case-lambda ((g$spec$15094$1IfLeT) ((case-lambda ((g$t$15095$1IfLeT) ((case-lambda ((g$ls/false$15096$1IfLeT) (if (if g$ls/false$15096$1IfLeT (begin '#f (apply (case-lambda ((g$x$15097$1IfLeT g$x*$15098$1IfLeT) (not (memq (g$syntax->datum$10224$1IfLeT g$x$15097$1IfLeT) '(for rename except only prefix library))))) g$ls/false$15096$1IfLeT)) '#f) (apply (case-lambda ((g$x$15099$1IfLeT g$x*$15100$1IfLeT) (g$import-library$15080$1IfLeT (cons g$x$15099$1IfLeT g$x*$15100$1IfLeT)))) g$ls/false$15096$1IfLeT) ((case-lambda ((g$t$15101$1IfLeT) ((case-lambda ((g$ls/false$15102$1IfLeT) (if (if g$ls/false$15102$1IfLeT (begin '#f (apply (case-lambda ((g$rename$15103$1IfLeT g$isp$15104$1IfLeT g$old*$15105$1IfLeT g$new*$15106$1IfLeT) (if (eq? (g$syntax->datum$10224$1IfLeT g$rename$15103$1IfLeT) 'rename) (if (g$for-all$8490$1IfLeT g$idsyn?$15072$1IfLeT g$old*$15105$1IfLeT) (begin '#f (g$for-all$8490$1IfLeT g$idsyn?$15072$1IfLeT g$new*$15106$1IfLeT)) '#f) '#f))) g$ls/false$15102$1IfLeT)) '#f) (apply (case-lambda ((g$rename$15107$1IfLeT g$isp$15108$1IfLeT g$old*$15109$1IfLeT g$new*$15110$1IfLeT) ((case-lambda ((g$subst$15111$1IfLeT g$old*$15112$1IfLeT g$new*$15113$1IfLeT) ((case-lambda ((g$old-label*$15114$1IfLeT) ((case-lambda ((g$subst$15115$1IfLeT) (g$merge-substs$15074$1IfLeT (map cons g$new*$15113$1IfLeT g$old-label*$15114$1IfLeT) g$subst$15115$1IfLeT))) (g$rem*$15077$1IfLeT g$old*$15112$1IfLeT g$subst$15111$1IfLeT)))) (g$find*$15076$1IfLeT g$old*$15112$1IfLeT g$subst$15111$1IfLeT)))) (g$get-import$15081$1IfLeT g$isp$15108$1IfLeT) (map g$syntax->datum$10224$1IfLeT g$old*$15109$1IfLeT) (map g$syntax->datum$10224$1IfLeT g$new*$15110$1IfLeT)))) g$ls/false$15102$1IfLeT) ((case-lambda ((g$t$15116$1IfLeT) ((case-lambda ((g$ls/false$15117$1IfLeT) (if (if g$ls/false$15117$1IfLeT (begin '#f (apply (case-lambda ((g$except$15118$1IfLeT g$isp$15119$1IfLeT g$sym*$15120$1IfLeT) (if (eq? (g$syntax->datum$10224$1IfLeT g$except$15118$1IfLeT) 'except) (begin '#f (g$for-all$8490$1IfLeT g$idsyn?$15072$1IfLeT g$sym*$15120$1IfLeT)) '#f))) g$ls/false$15117$1IfLeT)) '#f) (apply (case-lambda ((g$except$15121$1IfLeT g$isp$15122$1IfLeT g$sym*$15123$1IfLeT) ((case-lambda ((g$subst$15124$1IfLeT) (g$rem*$15077$1IfLeT (map g$syntax->datum$10224$1IfLeT g$sym*$15123$1IfLeT) g$subst$15124$1IfLeT))) (g$get-import$15081$1IfLeT g$isp$15122$1IfLeT)))) g$ls/false$15117$1IfLeT) ((case-lambda ((g$t$15125$1IfLeT) ((case-lambda ((g$ls/false$15126$1IfLeT) (if (if g$ls/false$15126$1IfLeT (begin '#f (apply (case-lambda ((g$only$15127$1IfLeT g$isp$15128$1IfLeT g$sym*$15129$1IfLeT) (if (eq? (g$syntax->datum$10224$1IfLeT g$only$15127$1IfLeT) 'only) (begin '#f (g$for-all$8490$1IfLeT g$idsyn?$15072$1IfLeT g$sym*$15129$1IfLeT)) '#f))) g$ls/false$15126$1IfLeT)) '#f) (apply (case-lambda ((g$only$15130$1IfLeT g$isp$15131$1IfLeT g$sym*$15132$1IfLeT) ((case-lambda ((g$subst$15133$1IfLeT g$sym*$15134$1IfLeT) ((case-lambda ((g$sym*$15135$1IfLeT) ((case-lambda ((g$lab*$15136$1IfLeT) (map cons g$sym*$15135$1IfLeT g$lab*$15136$1IfLeT))) (g$find*$15076$1IfLeT g$sym*$15135$1IfLeT g$subst$15133$1IfLeT)))) (g$remove-dups$15078$1IfLeT g$sym*$15134$1IfLeT)))) (g$get-import$15081$1IfLeT g$isp$15131$1IfLeT) (map g$syntax->datum$10224$1IfLeT g$sym*$15132$1IfLeT)))) g$ls/false$15126$1IfLeT) ((case-lambda ((g$t$15137$1IfLeT) ((case-lambda ((g$ls/false$15138$1IfLeT) (if (if g$ls/false$15138$1IfLeT (begin '#f (apply (case-lambda ((g$prefix$15139$1IfLeT g$isp$15140$1IfLeT g$p$15141$1IfLeT) (if (eq? (g$syntax->datum$10224$1IfLeT g$prefix$15139$1IfLeT) 'prefix) (begin '#f (g$idsyn?$15072$1IfLeT g$p$15141$1IfLeT)) '#f))) g$ls/false$15138$1IfLeT)) '#f) (apply (case-lambda ((g$prefix$15142$1IfLeT g$isp$15143$1IfLeT g$p$15144$1IfLeT) ((case-lambda ((g$subst$15145$1IfLeT g$prefix$15146$1IfLeT) (map (case-lambda ((g$x$15147$1IfLeT) (cons (string->symbol (string-append g$prefix$15146$1IfLeT (symbol->string (car g$x$15147$1IfLeT)))) (cdr g$x$15147$1IfLeT)))) g$subst$15145$1IfLeT))) (g$get-import$15081$1IfLeT g$isp$15143$1IfLeT) (symbol->string (g$syntax->datum$10224$1IfLeT g$p$15144$1IfLeT))))) g$ls/false$15138$1IfLeT) ((case-lambda ((g$t$15148$1IfLeT) ((case-lambda ((g$ls/false$15149$1IfLeT) (if (if g$ls/false$15149$1IfLeT (begin '#f (apply (case-lambda ((g$library$15150$1IfLeT g$spec*$15151$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$library$15150$1IfLeT) 'library))) g$ls/false$15149$1IfLeT)) '#f) (apply (case-lambda ((g$library$15152$1IfLeT g$spec*$15153$1IfLeT) (g$import-library$15080$1IfLeT g$spec*$15153$1IfLeT))) g$ls/false$15149$1IfLeT) ((case-lambda ((g$t$15154$1IfLeT) ((case-lambda ((g$ls/false$15155$1IfLeT) (if (if g$ls/false$15155$1IfLeT (begin '#f (apply (case-lambda ((g$for$15156$1IfLeT g$isp$15157$1IfLeT g$rest$15158$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$for$15156$1IfLeT) 'for))) g$ls/false$15155$1IfLeT)) '#f) (apply (case-lambda ((g$for$15159$1IfLeT g$isp$15160$1IfLeT g$rest$15161$1IfLeT) (g$get-import$15081$1IfLeT g$isp$15160$1IfLeT))) g$ls/false$15155$1IfLeT) ((case-lambda ((g$t$15162$1IfLeT) ((case-lambda ((g$ls/false$15163$1IfLeT) (if (if g$ls/false$15163$1IfLeT (begin '#f (apply (case-lambda ((g$spec$15164$1IfLeT) '#t)) g$ls/false$15163$1IfLeT)) '#f) (apply (case-lambda ((g$spec$15165$1IfLeT) (g$syntax-violation$10221$1IfLeT 'import '"invalid import spec" g$spec$15165$1IfLeT))) g$ls/false$15163$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$15162$1IfLeT)))) ((case-lambda ((g$x$15166$1IfLeT) (list g$x$15166$1IfLeT))) g$t$15162$1IfLeT)))) g$t$15154$1IfLeT)))) ((case-lambda ((g$x$15167$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15167$1IfLeT) (begin '#f ((case-lambda ((g$q$15168$1IfLeT) (if g$q$15168$1IfLeT (begin '#f ((case-lambda ((g$r$15169$1IfLeT) (if g$r$15169$1IfLeT (begin '#f (append g$q$15168$1IfLeT g$r$15169$1IfLeT)) '#f))) ((case-lambda ((g$x$15170$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15170$1IfLeT) (begin '#f ((case-lambda ((g$q$15171$1IfLeT) (if g$q$15171$1IfLeT (begin '#f ((case-lambda ((g$r$15172$1IfLeT) (if g$r$15172$1IfLeT (begin '#f (append g$q$15171$1IfLeT g$r$15172$1IfLeT)) '#f))) ((case-lambda ((g$x$15173$1IfLeT) (list g$x$15173$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$15170$1IfLeT)))) '#f))) ((case-lambda ((g$x$15174$1IfLeT) (list g$x$15174$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15170$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15167$1IfLeT)))) '#f))) ((case-lambda ((g$x$15175$1IfLeT) (list g$x$15175$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15167$1IfLeT)))) '#f))) g$t$15154$1IfLeT)))) g$t$15148$1IfLeT)))) ((case-lambda ((g$x$15176$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15176$1IfLeT) (begin '#f ((case-lambda ((g$q$15177$1IfLeT) (if g$q$15177$1IfLeT (begin '#f ((case-lambda ((g$r$15178$1IfLeT) (if g$r$15178$1IfLeT (begin '#f (append g$q$15177$1IfLeT g$r$15178$1IfLeT)) '#f))) ((case-lambda ((g$x$15179$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15179$1IfLeT) (begin '#f ((case-lambda ((g$q$15180$1IfLeT) (if g$q$15180$1IfLeT (begin '#f ((case-lambda ((g$r$15181$1IfLeT) (if g$r$15181$1IfLeT (begin '#f (append g$q$15180$1IfLeT g$r$15181$1IfLeT)) '#f))) ((case-lambda ((g$x$15182$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15182$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15179$1IfLeT)))) '#f))) ((letrec ((g$f$15183$1IfLeT (case-lambda ((g$x$15184$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15184$1IfLeT) ((case-lambda ((g$cars/f$15185$1IfLeT) (if g$cars/f$15185$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15186$1IfLeT) (if g$cdrs/f$15186$1IfLeT (begin '#f (map cons g$cars/f$15185$1IfLeT g$cdrs/f$15186$1IfLeT)) '#f))) (g$f$15183$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15184$1IfLeT)))) '#f))) ((case-lambda ((g$x$15187$1IfLeT) (list g$x$15187$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15184$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15184$1IfLeT) (list (begin 'spec* '())) '#f)))))) g$f$15183$1IfLeT) (g$syntax-car$9835$1IfLeT g$x$15179$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15176$1IfLeT)))) '#f))) ((case-lambda ((g$x$15188$1IfLeT) (list g$x$15188$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15176$1IfLeT)))) '#f))) g$t$15148$1IfLeT)))) g$t$15137$1IfLeT)))) ((case-lambda ((g$x$15189$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15189$1IfLeT) (begin '#f ((case-lambda ((g$q$15190$1IfLeT) (if g$q$15190$1IfLeT (begin '#f ((case-lambda ((g$r$15191$1IfLeT) (if g$r$15191$1IfLeT (begin '#f (append g$q$15190$1IfLeT g$r$15191$1IfLeT)) '#f))) ((case-lambda ((g$x$15192$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15192$1IfLeT) (begin '#f ((case-lambda ((g$q$15193$1IfLeT) (if g$q$15193$1IfLeT (begin '#f ((case-lambda ((g$r$15194$1IfLeT) (if g$r$15194$1IfLeT (begin '#f (append g$q$15193$1IfLeT g$r$15194$1IfLeT)) '#f))) ((case-lambda ((g$x$15195$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15195$1IfLeT) (begin '#f ((case-lambda ((g$q$15196$1IfLeT) (if g$q$15196$1IfLeT (begin '#f ((case-lambda ((g$r$15197$1IfLeT) (if g$r$15197$1IfLeT (begin '#f (append g$q$15196$1IfLeT g$r$15197$1IfLeT)) '#f))) ((case-lambda ((g$x$15198$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15198$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15195$1IfLeT)))) '#f))) ((case-lambda ((g$x$15199$1IfLeT) (list g$x$15199$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15195$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15192$1IfLeT)))) '#f))) ((case-lambda ((g$x$15200$1IfLeT) (list g$x$15200$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15192$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15189$1IfLeT)))) '#f))) ((case-lambda ((g$x$15201$1IfLeT) (list g$x$15201$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15189$1IfLeT)))) '#f))) g$t$15137$1IfLeT)))) g$t$15125$1IfLeT)))) ((case-lambda ((g$x$15202$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15202$1IfLeT) (begin '#f ((case-lambda ((g$q$15203$1IfLeT) (if g$q$15203$1IfLeT (begin '#f ((case-lambda ((g$r$15204$1IfLeT) (if g$r$15204$1IfLeT (begin '#f (append g$q$15203$1IfLeT g$r$15204$1IfLeT)) '#f))) ((case-lambda ((g$x$15205$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15205$1IfLeT) (begin '#f ((case-lambda ((g$q$15206$1IfLeT) (if g$q$15206$1IfLeT (begin '#f ((case-lambda ((g$r$15207$1IfLeT) (if g$r$15207$1IfLeT (begin '#f (append g$q$15206$1IfLeT g$r$15207$1IfLeT)) '#f))) ((letrec ((g$f$15208$1IfLeT (case-lambda ((g$x$15209$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15209$1IfLeT) ((case-lambda ((g$cars/f$15210$1IfLeT) (if g$cars/f$15210$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15211$1IfLeT) (if g$cdrs/f$15211$1IfLeT (begin '#f (map cons g$cars/f$15210$1IfLeT g$cdrs/f$15211$1IfLeT)) '#f))) (g$f$15208$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15209$1IfLeT)))) '#f))) ((case-lambda ((g$x$15212$1IfLeT) (list g$x$15212$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15209$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15209$1IfLeT) (list (begin 'sym* '())) '#f)))))) g$f$15208$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15205$1IfLeT)))) '#f))) ((case-lambda ((g$x$15213$1IfLeT) (list g$x$15213$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15205$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15202$1IfLeT)))) '#f))) ((case-lambda ((g$x$15214$1IfLeT) (list g$x$15214$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15202$1IfLeT)))) '#f))) g$t$15125$1IfLeT)))) g$t$15116$1IfLeT)))) ((case-lambda ((g$x$15215$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15215$1IfLeT) (begin '#f ((case-lambda ((g$q$15216$1IfLeT) (if g$q$15216$1IfLeT (begin '#f ((case-lambda ((g$r$15217$1IfLeT) (if g$r$15217$1IfLeT (begin '#f (append g$q$15216$1IfLeT g$r$15217$1IfLeT)) '#f))) ((case-lambda ((g$x$15218$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15218$1IfLeT) (begin '#f ((case-lambda ((g$q$15219$1IfLeT) (if g$q$15219$1IfLeT (begin '#f ((case-lambda ((g$r$15220$1IfLeT) (if g$r$15220$1IfLeT (begin '#f (append g$q$15219$1IfLeT g$r$15220$1IfLeT)) '#f))) ((letrec ((g$f$15221$1IfLeT (case-lambda ((g$x$15222$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15222$1IfLeT) ((case-lambda ((g$cars/f$15223$1IfLeT) (if g$cars/f$15223$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15224$1IfLeT) (if g$cdrs/f$15224$1IfLeT (begin '#f (map cons g$cars/f$15223$1IfLeT g$cdrs/f$15224$1IfLeT)) '#f))) (g$f$15221$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15222$1IfLeT)))) '#f))) ((case-lambda ((g$x$15225$1IfLeT) (list g$x$15225$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15222$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15222$1IfLeT) (list (begin 'sym* '())) '#f)))))) g$f$15221$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15218$1IfLeT)))) '#f))) ((case-lambda ((g$x$15226$1IfLeT) (list g$x$15226$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15218$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15215$1IfLeT)))) '#f))) ((case-lambda ((g$x$15227$1IfLeT) (list g$x$15227$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15215$1IfLeT)))) '#f))) g$t$15116$1IfLeT)))) g$t$15101$1IfLeT)))) ((case-lambda ((g$x$15228$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15228$1IfLeT) (begin '#f ((case-lambda ((g$q$15229$1IfLeT) (if g$q$15229$1IfLeT (begin '#f ((case-lambda ((g$r$15230$1IfLeT) (if g$r$15230$1IfLeT (begin '#f (append g$q$15229$1IfLeT g$r$15230$1IfLeT)) '#f))) ((case-lambda ((g$x$15231$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15231$1IfLeT) (begin '#f ((case-lambda ((g$q$15232$1IfLeT) (if g$q$15232$1IfLeT (begin '#f ((case-lambda ((g$r$15233$1IfLeT) (if g$r$15233$1IfLeT (begin '#f (append g$q$15232$1IfLeT g$r$15233$1IfLeT)) '#f))) ((letrec ((g$f$15234$1IfLeT (case-lambda ((g$x$15235$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15235$1IfLeT) ((case-lambda ((g$cars/f$15236$1IfLeT) (if g$cars/f$15236$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15237$1IfLeT) (if g$cdrs/f$15237$1IfLeT (begin '#f (map cons g$cars/f$15236$1IfLeT g$cdrs/f$15237$1IfLeT)) '#f))) (g$f$15234$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15235$1IfLeT)))) '#f))) ((case-lambda ((g$x$15238$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15238$1IfLeT) (begin '#f ((case-lambda ((g$q$15239$1IfLeT) (if g$q$15239$1IfLeT (begin '#f ((case-lambda ((g$r$15240$1IfLeT) (if g$r$15240$1IfLeT (begin '#f (append g$q$15239$1IfLeT g$r$15240$1IfLeT)) '#f))) ((case-lambda ((g$x$15241$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15241$1IfLeT) (begin '#f ((case-lambda ((g$q$15242$1IfLeT) (if g$q$15242$1IfLeT (begin '#f ((case-lambda ((g$r$15243$1IfLeT) (if g$r$15243$1IfLeT (begin '#f (append g$q$15242$1IfLeT g$r$15243$1IfLeT)) '#f))) ((case-lambda ((g$x$15244$1IfLeT) (if (equal? (g$stx->datum$9849$1IfLeT g$x$15244$1IfLeT) '()) (begin '#f '()) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15241$1IfLeT)))) '#f))) ((case-lambda ((g$x$15245$1IfLeT) (list g$x$15245$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15241$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15238$1IfLeT)))) '#f))) ((case-lambda ((g$x$15246$1IfLeT) (list g$x$15246$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15238$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$15235$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15235$1IfLeT) (list (begin 'old* '()) (begin 'new* '())) '#f)))))) g$f$15234$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15231$1IfLeT)))) '#f))) ((case-lambda ((g$x$15247$1IfLeT) (list g$x$15247$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15231$1IfLeT)))) '#f))) (g$syntax-cdr$9836$1IfLeT g$x$15228$1IfLeT)))) '#f))) ((case-lambda ((g$x$15248$1IfLeT) (list g$x$15248$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15228$1IfLeT)))) '#f))) g$t$15101$1IfLeT)))) g$t$15095$1IfLeT)))) ((case-lambda ((g$x$15249$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15249$1IfLeT) (begin '#f ((case-lambda ((g$q$15250$1IfLeT) (if g$q$15250$1IfLeT (begin '#f ((case-lambda ((g$r$15251$1IfLeT) (if g$r$15251$1IfLeT (begin '#f (append g$q$15250$1IfLeT g$r$15251$1IfLeT)) '#f))) ((letrec ((g$f$15252$1IfLeT (case-lambda ((g$x$15253$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15253$1IfLeT) ((case-lambda ((g$cars/f$15254$1IfLeT) (if g$cars/f$15254$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15255$1IfLeT) (if g$cdrs/f$15255$1IfLeT (begin '#f (map cons g$cars/f$15254$1IfLeT g$cdrs/f$15255$1IfLeT)) '#f))) (g$f$15252$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15253$1IfLeT)))) '#f))) ((case-lambda ((g$x$15256$1IfLeT) (list g$x$15256$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15253$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15253$1IfLeT) (list (begin 'x* '())) '#f)))))) g$f$15252$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15249$1IfLeT)))) '#f))) ((case-lambda ((g$x$15257$1IfLeT) (list g$x$15257$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15249$1IfLeT)))) '#f))) g$t$15095$1IfLeT)))) g$spec$15094$1IfLeT)))) (g$add-imports!$15082$1IfLeT (case-lambda ((g$imp$15086$1IfLeT g$h$15087$1IfLeT) ((case-lambda ((g$subst$15088$1IfLeT) (for-each (case-lambda ((g$x$15089$1IfLeT) ((case-lambda ((g$name$15090$1IfLeT g$label$15091$1IfLeT) ((case-lambda ((g$t$15092$1IfLeT) (if g$t$15092$1IfLeT ((case-lambda ((g$l$15093$1IfLeT) (if (eq? g$l$15093$1IfLeT g$label$15091$1IfLeT) (void) (g$dup-error$15073$1IfLeT g$name$15090$1IfLeT)))) g$t$15092$1IfLeT) (g$hashtable-set!$8338$1IfLeT g$h$15087$1IfLeT g$name$15090$1IfLeT g$label$15091$1IfLeT)))) (g$hashtable-ref$8337$1IfLeT g$h$15087$1IfLeT g$name$15090$1IfLeT '#f)))) (car g$x$15089$1IfLeT) (cdr g$x$15089$1IfLeT)))) g$subst$15088$1IfLeT))) (g$get-import$15081$1IfLeT g$imp$15086$1IfLeT)))))) ((letrec ((g$f$15083$1IfLeT (case-lambda ((g$imp*$15084$1IfLeT g$h$15085$1IfLeT) (if (null? g$imp*$15084$1IfLeT) (hashtable-entries g$h$15085$1IfLeT) (begin (g$add-imports!$15082$1IfLeT (car g$imp*$15084$1IfLeT) g$h$15085$1IfLeT) (g$f$15083$1IfLeT (cdr g$imp*$15084$1IfLeT) g$h$15085$1IfLeT))))))) g$f$15083$1IfLeT) g$imp*$15071$1IfLeT (g$make-eq-hashtable$8334$1IfLeT)))))) (g$make-top-rib$10165$1IfLeT g$make-top-rib$16270$1IfLeT (case-lambda ((g$names$15524$1IfLeT g$labels$15525$1IfLeT) ((case-lambda ((g$rib$15526$1IfLeT) (begin (vector-for-each (case-lambda ((g$name$15527$1IfLeT g$label$15528$1IfLeT) (begin (if (symbol? g$name$15527$1IfLeT) (void) (error 'make-top-rib '"BUG: not a symbol" g$name$15527$1IfLeT)) (g$extend-rib!$9802$1IfLeT g$rib$15526$1IfLeT (g$make-stx$9811$1IfLeT g$name$15527$1IfLeT g$top-mark*$9780$1IfLeT '() '()) g$label$15528$1IfLeT)))) g$names$15524$1IfLeT g$labels$15525$1IfLeT) g$rib$15526$1IfLeT))) (g$make-empty-rib$9801$1IfLeT))))) (g$make-collector$10166$1IfLeT g$make-collector$16271$1IfLeT (case-lambda (() ((case-lambda ((g$ls$15529$1IfLeT) (case-lambda (() g$ls$15529$1IfLeT) ((g$x$15530$1IfLeT) (set! g$ls$15529$1IfLeT (cons g$x$15530$1IfLeT g$ls$15529$1IfLeT)))))) '())))) (g$inv-collector$10167$1IfLeT g$inv-collector$16272$1IfLeT (g$make-parameter$9320$1IfLeT (case-lambda (g$args$15531$1IfLeT (assertion-violation 'inv-collector '"BUG: not initialized"))) (case-lambda ((g$x$15532$1IfLeT) (begin (if (procedure? g$x$15532$1IfLeT) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" g$x$15532$1IfLeT)) g$x$15532$1IfLeT))))) (g$vis-collector$10168$1IfLeT g$vis-collector$16273$1IfLeT (g$make-parameter$9320$1IfLeT (case-lambda (g$args$15533$1IfLeT (assertion-violation 'vis-collector '"BUG: not initialized"))) (case-lambda ((g$x$15534$1IfLeT) (begin (if (procedure? g$x$15534$1IfLeT) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" g$x$15534$1IfLeT)) g$x$15534$1IfLeT))))) (g$imp-collector$10169$1IfLeT g$imp-collector$16274$1IfLeT (g$make-parameter$9320$1IfLeT (case-lambda (g$args$15535$1IfLeT (assertion-violation 'imp-collector '"BUG: not initialized"))) (case-lambda ((g$x$15536$1IfLeT) (begin (if (procedure? g$x$15536$1IfLeT) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" g$x$15536$1IfLeT)) g$x$15536$1IfLeT))))) (g$chi-library-internal$10170$1IfLeT g$chi-library-internal$16275$1IfLeT (case-lambda ((g$e*$15537$1IfLeT g$rib$15538$1IfLeT g$top?$15539$1IfLeT) (call-with-values (case-lambda (() (g$chi-body*$10159$1IfLeT g$e*$15537$1IfLeT '() '() '() '() '() '() g$rib$15538$1IfLeT g$top?$15539$1IfLeT))) (case-lambda ((g$e*$15547$1IfLeT g$r$15548$1IfLeT g$mr$15549$1IfLeT g$lex*$15550$1IfLeT g$rhs*$15551$1IfLeT g$mod**$15552$1IfLeT g$_kwd*$15553$1IfLeT) ((case-lambda ((g$_kwd*$15554$1IfLeT g$mod**$15555$1IfLeT g$rhs*$15556$1IfLeT g$lex*$15557$1IfLeT g$mr$15558$1IfLeT g$r$15559$1IfLeT g$e*$15560$1IfLeT) (values (append (apply append (reverse g$mod**$15555$1IfLeT)) g$e*$15560$1IfLeT) g$r$15559$1IfLeT g$mr$15558$1IfLeT (reverse g$lex*$15557$1IfLeT) (reverse g$rhs*$15556$1IfLeT)))) g$_kwd*$15553$1IfLeT g$mod**$15552$1IfLeT g$rhs*$15551$1IfLeT g$lex*$15550$1IfLeT g$mr$15549$1IfLeT g$r$15548$1IfLeT g$e*$15547$1IfLeT))))))) (g$chi-interaction-expr$10171$1IfLeT g$chi-interaction-expr$16276$1IfLeT (case-lambda ((g$e$15561$1IfLeT g$rib$15562$1IfLeT g$r$15563$1IfLeT) (call-with-values (case-lambda (() (g$chi-body*$10159$1IfLeT (list g$e$15561$1IfLeT) g$r$15563$1IfLeT g$r$15563$1IfLeT '() '() '() '() g$rib$15562$1IfLeT '#t))) (case-lambda ((g$e*$15571$1IfLeT g$r$15572$1IfLeT g$mr$15573$1IfLeT g$lex*$15574$1IfLeT g$rhs*$15575$1IfLeT g$mod**$15576$1IfLeT g$_kwd*$15577$1IfLeT) ((case-lambda ((g$_kwd*$15578$1IfLeT g$mod**$15579$1IfLeT g$rhs*$15580$1IfLeT g$lex*$15581$1IfLeT g$mr$15582$1IfLeT g$r$15583$1IfLeT g$e*$15584$1IfLeT) ((case-lambda ((g$e*$15585$1IfLeT) ((case-lambda ((g$e$15586$1IfLeT) (values g$e$15586$1IfLeT g$r$15583$1IfLeT))) (if (null? g$e*$15585$1IfLeT) (g$build-void$9773$1IfLeT) (if (null? (cdr g$e*$15585$1IfLeT)) (car g$e*$15585$1IfLeT) (g$build-sequence$9772$1IfLeT '#f g$e*$15585$1IfLeT)))))) (g$expand-interaction-rhs*/init*$10140$1IfLeT (reverse g$lex*$15581$1IfLeT) (reverse g$rhs*$15580$1IfLeT) (append (apply append (reverse g$mod**$15579$1IfLeT)) g$e*$15584$1IfLeT) g$r$15583$1IfLeT g$mr$15582$1IfLeT)))) g$_kwd*$15577$1IfLeT g$mod**$15576$1IfLeT g$rhs*$15575$1IfLeT g$lex*$15574$1IfLeT g$mr$15573$1IfLeT g$r$15572$1IfLeT g$e*$15571$1IfLeT))))))) (g$library-body-expander$10172$1IfLeT g$library-body-expander$16277$1IfLeT (case-lambda ((g$exp*$15587$1IfLeT g$imp*$15588$1IfLeT g$b*$15589$1IfLeT g$top?$15590$1IfLeT) (letrec* ((g$itc$15591$1IfLeT (g$make-collector$10166$1IfLeT))) ((case-lambda ((g$imp-collector$15596$1IfLeT g$top-level-context$15597$1IfLeT g$imp-collector$15598$1IfLeT g$top-level-context$15599$1IfLeT) ((case-lambda ((g$swap$15600$1IfLeT) (dynamic-wind g$swap$15600$1IfLeT (case-lambda (() (call-with-values (case-lambda (() (g$parse-exports$10161$1IfLeT g$exp*$15587$1IfLeT))) (case-lambda ((g$exp-int*$15603$1IfLeT g$exp-ext*$15604$1IfLeT) ((case-lambda ((g$exp-ext*$15605$1IfLeT g$exp-int*$15606$1IfLeT) (call-with-values (case-lambda (() (g$parse-import-spec*$10164$1IfLeT g$imp*$15588$1IfLeT))) (case-lambda ((g$subst-names$15609$1IfLeT g$subst-labels$15610$1IfLeT) ((case-lambda ((g$subst-labels$15611$1IfLeT g$subst-names$15612$1IfLeT) ((case-lambda ((g$rib$15613$1IfLeT) ((case-lambda ((g$b*$15614$1IfLeT g$rtc$15615$1IfLeT g$vtc$15616$1IfLeT) ((case-lambda ((g$inv-collector$15621$1IfLeT g$vis-collector$15622$1IfLeT g$inv-collector$15623$1IfLeT g$vis-collector$15624$1IfLeT) ((case-lambda ((g$swap$15625$1IfLeT) (dynamic-wind g$swap$15625$1IfLeT (case-lambda (() (call-with-values (case-lambda (() (g$chi-library-internal$10170$1IfLeT g$b*$15614$1IfLeT g$rib$15613$1IfLeT g$top?$15590$1IfLeT))) (case-lambda ((g$init*$15631$1IfLeT g$r$15632$1IfLeT g$mr$15633$1IfLeT g$lex*$15634$1IfLeT g$rhs*$15635$1IfLeT) ((case-lambda ((g$rhs*$15636$1IfLeT g$lex*$15637$1IfLeT g$mr$15638$1IfLeT g$r$15639$1IfLeT g$init*$15640$1IfLeT) (begin (g$seal-rib!$9803$1IfLeT g$rib$15613$1IfLeT) ((case-lambda ((g$init*$15641$1IfLeT) ((case-lambda ((g$rhs*$15642$1IfLeT) ((case-lambda (() (begin (g$unseal-rib!$9804$1IfLeT g$rib$15613$1IfLeT) ((case-lambda ((g$loc*$15643$1IfLeT g$export-subst$15644$1IfLeT) (letrec* ((g$errstr$15645$1IfLeT '"attempt to export mutated variable")) (call-with-values (case-lambda (() (g$make-export-env/macros$10213$1IfLeT g$lex*$15637$1IfLeT g$loc*$15643$1IfLeT g$r$15639$1IfLeT))) (case-lambda ((g$export-env$15649$1IfLeT g$global*$15650$1IfLeT g$macro*$15651$1IfLeT) ((case-lambda ((g$macro*$15652$1IfLeT g$global*$15653$1IfLeT g$export-env$15654$1IfLeT) (begin (for-each (case-lambda ((g$s$15655$1IfLeT) ((case-lambda ((g$name$15656$1IfLeT g$label$15657$1IfLeT) ((case-lambda ((g$p$15658$1IfLeT) (if g$p$15658$1IfLeT ((case-lambda ((g$b$15659$1IfLeT) ((case-lambda ((g$type$15660$1IfLeT) (if (eq? g$type$15660$1IfLeT 'mutable) (g$syntax-violation$10221$1IfLeT 'export g$errstr$15645$1IfLeT g$name$15656$1IfLeT) (void)))) (car g$b$15659$1IfLeT)))) (cdr g$p$15658$1IfLeT)) (void)))) (assq g$label$15657$1IfLeT g$export-env$15654$1IfLeT)))) (car g$s$15655$1IfLeT) (cdr g$s$15655$1IfLeT)))) g$export-subst$15644$1IfLeT) ((case-lambda ((g$invoke-body$15661$1IfLeT g$invoke-definitions$15662$1IfLeT) (values (g$itc$15591$1IfLeT) (g$rtc$15615$1IfLeT) (g$vtc$15616$1IfLeT) (g$build-sequence$9772$1IfLeT '#f (append g$invoke-definitions$15662$1IfLeT (list g$invoke-body$15661$1IfLeT))) g$macro*$15652$1IfLeT g$export-subst$15644$1IfLeT g$export-env$15654$1IfLeT))) (g$build-library-letrec*$9776$1IfLeT '#f g$lex*$15637$1IfLeT g$loc*$15643$1IfLeT g$rhs*$15642$1IfLeT (if (null? g$init*$15641$1IfLeT) (g$build-void$9773$1IfLeT) (g$build-sequence$9772$1IfLeT '#f g$init*$15641$1IfLeT))) (map g$build-global-define$9768$1IfLeT (map cdr g$global*$15653$1IfLeT)))))) g$macro*$15651$1IfLeT g$global*$15650$1IfLeT g$export-env$15649$1IfLeT))))))) (map g$gen-global$9783$1IfLeT g$lex*$15637$1IfLeT) (g$make-export-subst$10212$1IfLeT g$exp-int*$15606$1IfLeT g$exp-ext*$15605$1IfLeT g$rib$15613$1IfLeT)))))))) (g$chi-rhs*$10141$1IfLeT g$rhs*$15636$1IfLeT g$r$15639$1IfLeT g$mr$15638$1IfLeT)))) (g$chi-expr*$10131$1IfLeT g$init*$15640$1IfLeT g$r$15639$1IfLeT g$mr$15638$1IfLeT))))) g$rhs*$15635$1IfLeT g$lex*$15634$1IfLeT g$mr$15633$1IfLeT g$r$15632$1IfLeT g$init*$15631$1IfLeT)))))) g$swap$15625$1IfLeT))) (case-lambda (() (begin ((case-lambda ((g$t$15663$1IfLeT) (begin (g$inv-collector$15621$1IfLeT g$inv-collector$15623$1IfLeT) (set! g$inv-collector$15623$1IfLeT g$t$15663$1IfLeT)))) (g$inv-collector$15621$1IfLeT)) ((case-lambda ((g$t$15664$1IfLeT) (begin (g$vis-collector$15622$1IfLeT g$vis-collector$15624$1IfLeT) (set! g$vis-collector$15624$1IfLeT g$t$15664$1IfLeT)))) (g$vis-collector$15622$1IfLeT)))))))) g$inv-collector$10167$1IfLeT g$vis-collector$10168$1IfLeT g$rtc$15615$1IfLeT g$vtc$15616$1IfLeT))) (map (case-lambda ((g$x$15665$1IfLeT) (g$mkstx$9826$1IfLeT g$x$15665$1IfLeT g$top-mark*$9780$1IfLeT (list g$rib$15613$1IfLeT) '()))) g$b*$15589$1IfLeT) (g$make-collector$10166$1IfLeT) (g$make-collector$10166$1IfLeT)))) (g$make-top-rib$10165$1IfLeT g$subst-names$15612$1IfLeT g$subst-labels$15611$1IfLeT)))) g$subst-labels$15610$1IfLeT g$subst-names$15609$1IfLeT)))))) g$exp-ext*$15604$1IfLeT g$exp-int*$15603$1IfLeT)))))) g$swap$15600$1IfLeT))) (case-lambda (() (begin ((case-lambda ((g$t$15666$1IfLeT) (begin (g$imp-collector$15596$1IfLeT g$imp-collector$15598$1IfLeT) (set! g$imp-collector$15598$1IfLeT g$t$15666$1IfLeT)))) (g$imp-collector$15596$1IfLeT)) ((case-lambda ((g$t$15667$1IfLeT) (begin (g$top-level-context$15597$1IfLeT g$top-level-context$15599$1IfLeT) (set! g$top-level-context$15599$1IfLeT g$t$15667$1IfLeT)))) (g$top-level-context$15597$1IfLeT)))))))) g$imp-collector$10169$1IfLeT g$top-level-context$10227$1IfLeT g$itc$15591$1IfLeT '#f))))) (g$core-library-expander$10173$1IfLeT g$core-library-expander$16278$1IfLeT (case-lambda ((g$e$15668$1IfLeT) (call-with-values (case-lambda (() (g$parse-library$10163$1IfLeT g$e$15668$1IfLeT))) (case-lambda ((g$name*$15673$1IfLeT g$exp*$15674$1IfLeT g$imp*$15675$1IfLeT g$b*$15676$1IfLeT) ((case-lambda ((g$b*$15677$1IfLeT g$imp*$15678$1IfLeT g$exp*$15679$1IfLeT g$name*$15680$1IfLeT) (call-with-values (case-lambda (() (g$parse-library-name$10162$1IfLeT g$name*$15680$1IfLeT))) (case-lambda ((g$name$15683$1IfLeT g$ver$15684$1IfLeT) ((case-lambda ((g$ver$15685$1IfLeT g$name$15686$1IfLeT) (call-with-values (case-lambda (() (g$library-body-expander$10172$1IfLeT g$exp*$15679$1IfLeT g$imp*$15678$1IfLeT g$b*$15677$1IfLeT '#f))) (case-lambda ((g$imp*$15694$1IfLeT g$invoke-req*$15695$1IfLeT g$visit-req*$15696$1IfLeT g$invoke-code$15697$1IfLeT g$visit-code$15698$1IfLeT g$export-subst$15699$1IfLeT g$export-env$15700$1IfLeT) ((case-lambda ((g$export-env$15701$1IfLeT g$export-subst$15702$1IfLeT g$visit-code$15703$1IfLeT g$invoke-code$15704$1IfLeT g$visit-req*$15705$1IfLeT g$invoke-req*$15706$1IfLeT g$imp*$15707$1IfLeT) (values g$name$15686$1IfLeT g$ver$15685$1IfLeT g$imp*$15707$1IfLeT g$invoke-req*$15706$1IfLeT g$visit-req*$15705$1IfLeT g$invoke-code$15704$1IfLeT g$visit-code$15703$1IfLeT g$export-subst$15702$1IfLeT g$export-env$15701$1IfLeT))) g$export-env$15700$1IfLeT g$export-subst$15699$1IfLeT g$visit-code$15698$1IfLeT g$invoke-code$15697$1IfLeT g$visit-req*$15696$1IfLeT g$invoke-req*$15695$1IfLeT g$imp*$15694$1IfLeT)))))) g$ver$15684$1IfLeT g$name$15683$1IfLeT)))))) g$b*$15676$1IfLeT g$imp*$15675$1IfLeT g$exp*$15674$1IfLeT g$name*$15673$1IfLeT))))))) (g$parse-top-level-program$10174$1IfLeT g$parse-top-level-program$16279$1IfLeT (case-lambda ((g$e*$15708$1IfLeT) ((case-lambda ((g$t$15709$1IfLeT) ((case-lambda ((g$ls/false$15710$1IfLeT) (if (if g$ls/false$15710$1IfLeT (begin '#f (apply (case-lambda ((g$import$15711$1IfLeT g$imp*$15712$1IfLeT g$b*$15713$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$import$15711$1IfLeT) 'import))) g$ls/false$15710$1IfLeT)) '#f) (apply (case-lambda ((g$import$15714$1IfLeT g$imp*$15715$1IfLeT g$b*$15716$1IfLeT) (values g$imp*$15715$1IfLeT g$b*$15716$1IfLeT))) g$ls/false$15710$1IfLeT) ((case-lambda ((g$t$15717$1IfLeT) ((case-lambda ((g$ls/false$15718$1IfLeT) (if (if g$ls/false$15718$1IfLeT (begin '#f (apply (case-lambda ((g$import$15719$1IfLeT g$x$15720$1IfLeT g$y$15721$1IfLeT) (eq? (g$syntax->datum$10224$1IfLeT g$import$15719$1IfLeT) 'import))) g$ls/false$15718$1IfLeT)) '#f) (apply (case-lambda ((g$import$15722$1IfLeT g$x$15723$1IfLeT g$y$15724$1IfLeT) (g$syntax-violation$10221$1IfLeT 'expander '"invalid syntax of top-level program" (g$syntax-car$9835$1IfLeT g$e*$15708$1IfLeT)))) g$ls/false$15718$1IfLeT) ((case-lambda ((g$t$15725$1IfLeT) ((case-lambda ((g$ls/false$15726$1IfLeT) (if (if g$ls/false$15726$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15726$1IfLeT)) '#f) (apply (case-lambda (() (assertion-violation 'expander '"top-level program is missing an (import ---) clause"))) g$ls/false$15726$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$15725$1IfLeT)))) ((case-lambda ((g$x$15727$1IfLeT) '())) g$t$15725$1IfLeT)))) g$t$15717$1IfLeT)))) ((case-lambda ((g$x$15728$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15728$1IfLeT) (begin '#f ((case-lambda ((g$q$15729$1IfLeT) (if g$q$15729$1IfLeT (begin '#f ((case-lambda ((g$r$15730$1IfLeT) (if g$r$15730$1IfLeT (begin '#f (append g$q$15729$1IfLeT g$r$15730$1IfLeT)) '#f))) ((case-lambda ((g$x$15731$1IfLeT) (list g$x$15731$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$15728$1IfLeT)))) '#f))) ((case-lambda ((g$x$15732$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15732$1IfLeT) (begin '#f ((case-lambda ((g$q$15733$1IfLeT) (if g$q$15733$1IfLeT (begin '#f ((case-lambda ((g$r$15734$1IfLeT) (if g$r$15734$1IfLeT (begin '#f (append g$q$15733$1IfLeT g$r$15734$1IfLeT)) '#f))) ((case-lambda ((g$x$15735$1IfLeT) (list g$x$15735$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$15732$1IfLeT)))) '#f))) ((case-lambda ((g$x$15736$1IfLeT) (list g$x$15736$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15732$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$15728$1IfLeT)))) '#f))) g$t$15717$1IfLeT)))) g$t$15709$1IfLeT)))) ((case-lambda ((g$x$15737$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15737$1IfLeT) (begin '#f ((case-lambda ((g$q$15738$1IfLeT) (if g$q$15738$1IfLeT (begin '#f ((case-lambda ((g$r$15739$1IfLeT) (if g$r$15739$1IfLeT (begin '#f (append g$q$15738$1IfLeT g$r$15739$1IfLeT)) '#f))) ((letrec ((g$f$15740$1IfLeT (case-lambda ((g$x$15741$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15741$1IfLeT) ((case-lambda ((g$cars/f$15742$1IfLeT) (if g$cars/f$15742$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15743$1IfLeT) (if g$cdrs/f$15743$1IfLeT (begin '#f (map cons g$cars/f$15742$1IfLeT g$cdrs/f$15743$1IfLeT)) '#f))) (g$f$15740$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15741$1IfLeT)))) '#f))) ((case-lambda ((g$x$15744$1IfLeT) (list g$x$15744$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15741$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15741$1IfLeT) (list (begin 'b* '())) '#f)))))) g$f$15740$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15737$1IfLeT)))) '#f))) ((case-lambda ((g$x$15745$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15745$1IfLeT) (begin '#f ((case-lambda ((g$q$15746$1IfLeT) (if g$q$15746$1IfLeT (begin '#f ((case-lambda ((g$r$15747$1IfLeT) (if g$r$15747$1IfLeT (begin '#f (append g$q$15746$1IfLeT g$r$15747$1IfLeT)) '#f))) ((letrec ((g$f$15748$1IfLeT (case-lambda ((g$x$15749$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15749$1IfLeT) ((case-lambda ((g$cars/f$15750$1IfLeT) (if g$cars/f$15750$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$15751$1IfLeT) (if g$cdrs/f$15751$1IfLeT (begin '#f (map cons g$cars/f$15750$1IfLeT g$cdrs/f$15751$1IfLeT)) '#f))) (g$f$15748$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15749$1IfLeT)))) '#f))) ((case-lambda ((g$x$15752$1IfLeT) (list g$x$15752$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15749$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15749$1IfLeT) (list (begin 'imp* '())) '#f)))))) g$f$15748$1IfLeT) (g$syntax-cdr$9836$1IfLeT g$x$15745$1IfLeT)))) '#f))) ((case-lambda ((g$x$15753$1IfLeT) (list g$x$15753$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15745$1IfLeT)))) '#f))) (g$syntax-car$9835$1IfLeT g$x$15737$1IfLeT)))) '#f))) g$t$15709$1IfLeT)))) g$e*$15708$1IfLeT)))) (g$top-level-expander$10175$1IfLeT g$top-level-expander$16280$1IfLeT (case-lambda ((g$e*$15754$1IfLeT) (call-with-values (case-lambda (() (g$parse-top-level-program$10174$1IfLeT g$e*$15754$1IfLeT))) (case-lambda ((g$imp*$15757$1IfLeT g$b*$15758$1IfLeT) ((case-lambda ((g$b*$15759$1IfLeT g$imp*$15760$1IfLeT) (call-with-values (case-lambda (() (g$library-body-expander$10172$1IfLeT '() g$imp*$15760$1IfLeT g$b*$15759$1IfLeT '#t))) (case-lambda ((g$imp*$15768$1IfLeT g$invoke-req*$15769$1IfLeT g$visit-req*$15770$1IfLeT g$invoke-code$15771$1IfLeT g$visit-code$15772$1IfLeT g$export-subst$15773$1IfLeT g$export-env$15774$1IfLeT) ((case-lambda ((g$export-env$15775$1IfLeT g$export-subst$15776$1IfLeT g$visit-code$15777$1IfLeT g$invoke-code$15778$1IfLeT g$visit-req*$15779$1IfLeT g$invoke-req*$15780$1IfLeT g$imp*$15781$1IfLeT) (values g$invoke-req*$15780$1IfLeT g$invoke-code$15778$1IfLeT))) g$export-env$15774$1IfLeT g$export-subst$15773$1IfLeT g$visit-code$15772$1IfLeT g$invoke-code$15771$1IfLeT g$visit-req*$15770$1IfLeT g$invoke-req*$15769$1IfLeT g$imp*$15768$1IfLeT)))))) g$b*$15758$1IfLeT g$imp*$15757$1IfLeT))))))) (g$9748$10176$1IfLeT g$9748$16281$1IfLeT (make-record-type-descriptor 'env '#f 'g$9751$1IfLeT '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (g$9750$10177$1IfLeT g$9750$16282$1IfLeT '#f) (g$9749$10178$1IfLeT g$9749$16283$1IfLeT (make-record-constructor-descriptor g$9748$10176$1IfLeT '#f g$9750$10177$1IfLeT)) (g$env?$10179$1IfLeT g$env?$16284$1IfLeT (record-predicate g$9748$10176$1IfLeT)) (g$make-env$10180$1IfLeT g$make-env$16285$1IfLeT (record-constructor g$9749$10178$1IfLeT)) (g$env-names$10181$1IfLeT g$env-names$16286$1IfLeT (record-accessor g$9748$10176$1IfLeT '0)) (g$env-labels$10182$1IfLeT g$env-labels$16287$1IfLeT (record-accessor g$9748$10176$1IfLeT '1)) (g$env-itc$10183$1IfLeT g$env-itc$16288$1IfLeT (record-accessor g$9748$10176$1IfLeT '2)) (g$set-env-names!$10184$1IfLeT g$set-env-names!$16289$1IfLeT (record-mutator g$9748$10176$1IfLeT '0)) (g$set-env-labels!$10185$1IfLeT g$set-env-labels!$16290$1IfLeT (record-mutator g$9748$10176$1IfLeT '1)) (g$set-env-itc!$10186$1IfLeT g$set-env-itc!$16291$1IfLeT (record-mutator g$9748$10176$1IfLeT '2)) (g$rp$10187$1IfLeT g$rp$16292$1IfLeT (make-record-printer 'env (case-lambda ((g$x$15782$1IfLeT g$p$15783$1IfLeT) (display '"#<environment>" g$p$15783$1IfLeT))))) (g$9765$10188$1IfLeT g$9765$16293$1IfLeT (make-record-type-descriptor 'interaction-env '#f 'g$9768$1IfLeT '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (g$9767$10189$1IfLeT g$9767$16294$1IfLeT '#f) (g$9766$10190$1IfLeT g$9766$16295$1IfLeT (make-record-constructor-descriptor g$9765$10188$1IfLeT '#f g$9767$10189$1IfLeT)) (g$interaction-env?$10191$1IfLeT g$interaction-env?$16296$1IfLeT (record-predicate g$9765$10188$1IfLeT)) (g$make-interaction-env$10192$1IfLeT g$make-interaction-env$16297$1IfLeT (record-constructor g$9766$10190$1IfLeT)) (g$interaction-env-rib$10193$1IfLeT g$interaction-env-rib$16298$1IfLeT (record-accessor g$9765$10188$1IfLeT '0)) (g$interaction-env-r$10194$1IfLeT g$interaction-env-r$16299$1IfLeT (record-accessor g$9765$10188$1IfLeT '1)) (g$interaction-env-locs$10195$1IfLeT g$interaction-env-locs$16300$1IfLeT (record-accessor g$9765$10188$1IfLeT '2)) (g$set-interaction-env-rib!$10196$1IfLeT g$set-interaction-env-rib!$16301$1IfLeT (record-mutator g$9765$10188$1IfLeT '0)) (g$set-interaction-env-r!$10197$1IfLeT g$set-interaction-env-r!$16302$1IfLeT (record-mutator g$9765$10188$1IfLeT '1)) (g$set-interaction-env-locs!$10198$1IfLeT g$set-interaction-env-locs!$16303$1IfLeT (record-mutator g$9765$10188$1IfLeT '2)) (g$rp$10199$1IfLeT g$rp$16304$1IfLeT (make-record-printer 'interaction-env (case-lambda ((g$x$15784$1IfLeT g$p$15785$1IfLeT) (display '"#<environment>" g$p$15785$1IfLeT))))) (g$interaction-environment-symbols$10200$1IfLeT g$interaction-environment-symbols$16305$1IfLeT (case-lambda (() (map (case-lambda ((g$x$15786$1IfLeT) g$x$15786$1IfLeT)) (g$rib-sym*$9793$1IfLeT (g$interaction-env-rib$10193$1IfLeT (g$interaction-environment$10226$1IfLeT))))))) (g$environment-symbols$10201$1IfLeT g$environment-symbols$16306$1IfLeT (case-lambda ((g$e$15787$1IfLeT) (vector->list (g$env-names$10181$1IfLeT g$e$15787$1IfLeT))))) (g$environment?$10202$1IfLeT g$environment?$16307$1IfLeT (case-lambda ((g$x$15788$1IfLeT) ((case-lambda ((g$t$15789$1IfLeT) (if g$t$15789$1IfLeT g$t$15789$1IfLeT (begin '#f (g$interaction-env?$10191$1IfLeT g$x$15788$1IfLeT))))) (g$env?$10179$1IfLeT g$x$15788$1IfLeT))))) (g$environment$10203$1IfLeT g$environment$16308$1IfLeT (case-lambda (g$imp*$15790$1IfLeT ((case-lambda ((g$itc$15791$1IfLeT) ((case-lambda ((g$imp-collector$15794$1IfLeT g$imp-collector$15795$1IfLeT) ((case-lambda ((g$swap$15796$1IfLeT) (dynamic-wind g$swap$15796$1IfLeT (case-lambda (() (call-with-values (case-lambda (() (g$parse-import-spec*$10164$1IfLeT g$imp*$15790$1IfLeT))) (case-lambda ((g$subst-names$15799$1IfLeT g$subst-labels$15800$1IfLeT) ((case-lambda ((g$subst-labels$15801$1IfLeT g$subst-names$15802$1IfLeT) (g$make-env$10180$1IfLeT g$subst-names$15802$1IfLeT g$subst-labels$15801$1IfLeT g$itc$15791$1IfLeT))) g$subst-labels$15800$1IfLeT g$subst-names$15799$1IfLeT)))))) g$swap$15796$1IfLeT))) (case-lambda (() ((case-lambda ((g$t$15803$1IfLeT) (begin (g$imp-collector$15794$1IfLeT g$imp-collector$15795$1IfLeT) (set! g$imp-collector$15795$1IfLeT g$t$15803$1IfLeT)))) (g$imp-collector$15794$1IfLeT))))))) g$imp-collector$10169$1IfLeT g$itc$15791$1IfLeT))) (g$make-collector$10166$1IfLeT))))) (g$null-environment$10204$1IfLeT g$null-environment$16309$1IfLeT (case-lambda ((g$n$15804$1IfLeT) (begin (if (eqv? g$n$15804$1IfLeT '5) (void) (assertion-violation 'null-environment '"not 5" g$n$15804$1IfLeT)) (g$environment$10203$1IfLeT '(psyntax null-environment-5)))))) (g$scheme-report-environment$10205$1IfLeT g$scheme-report-environment$16310$1IfLeT (case-lambda ((g$n$15805$1IfLeT) (begin (if (eqv? g$n$15805$1IfLeT '5) (void) (assertion-violation 'scheme-report-environment '"not 5" g$n$15805$1IfLeT)) (g$environment$10203$1IfLeT '(psyntax scheme-report-environment-5)))))) (g$expand$10206$1IfLeT g$expand$16311$1IfLeT (case-lambda ((g$x$15806$1IfLeT g$env$15807$1IfLeT) (if (g$env?$10179$1IfLeT g$env$15807$1IfLeT) ((case-lambda ((g$rib$15808$1IfLeT) ((case-lambda ((g$x$15809$1IfLeT g$itc$15810$1IfLeT g$rtc$15811$1IfLeT g$vtc$15812$1IfLeT) ((case-lambda ((g$x$15813$1IfLeT) (begin (g$seal-rib!$9803$1IfLeT g$rib$15808$1IfLeT) (values g$x$15813$1IfLeT (g$rtc$15811$1IfLeT))))) ((case-lambda ((g$inv-collector$15820$1IfLeT g$vis-collector$15821$1IfLeT g$imp-collector$15822$1IfLeT g$inv-collector$15823$1IfLeT g$vis-collector$15824$1IfLeT g$imp-collector$15825$1IfLeT) ((case-lambda ((g$swap$15826$1IfLeT) (dynamic-wind g$swap$15826$1IfLeT (case-lambda (() (g$chi-expr$10133$1IfLeT g$x$15809$1IfLeT '() '()))) g$swap$15826$1IfLeT))) (case-lambda (() (begin ((case-lambda ((g$t$15827$1IfLeT) (begin (g$inv-collector$15820$1IfLeT g$inv-collector$15823$1IfLeT) (set! g$inv-collector$15823$1IfLeT g$t$15827$1IfLeT)))) (g$inv-collector$15820$1IfLeT)) ((case-lambda ((g$t$15828$1IfLeT) (begin (g$vis-collector$15821$1IfLeT g$vis-collector$15824$1IfLeT) (set! g$vis-collector$15824$1IfLeT g$t$15828$1IfLeT)))) (g$vis-collector$15821$1IfLeT)) ((case-lambda ((g$t$15829$1IfLeT) (begin (g$imp-collector$15822$1IfLeT g$imp-collector$15825$1IfLeT) (set! g$imp-collector$15825$1IfLeT g$t$15829$1IfLeT)))) (g$imp-collector$15822$1IfLeT)))))))) g$inv-collector$10167$1IfLeT g$vis-collector$10168$1IfLeT g$imp-collector$10169$1IfLeT g$rtc$15811$1IfLeT g$vtc$15812$1IfLeT g$itc$15810$1IfLeT)))) (g$mkstx$9826$1IfLeT g$x$15806$1IfLeT g$top-mark*$9780$1IfLeT (list g$rib$15808$1IfLeT) '()) (g$env-itc$10183$1IfLeT g$env$15807$1IfLeT) (g$make-collector$10166$1IfLeT) (g$make-collector$10166$1IfLeT)))) (g$make-top-rib$10165$1IfLeT (g$env-names$10181$1IfLeT g$env$15807$1IfLeT) (g$env-labels$10182$1IfLeT g$env$15807$1IfLeT))) (if (g$interaction-env?$10191$1IfLeT g$env$15807$1IfLeT) ((case-lambda ((g$rib$15830$1IfLeT g$r$15831$1IfLeT g$rtc$15832$1IfLeT) ((case-lambda ((g$x$15833$1IfLeT) (call-with-values (case-lambda (() ((case-lambda ((g$top-level-context$15844$1IfLeT g$inv-collector$15845$1IfLeT g$vis-collector$15846$1IfLeT g$imp-collector$15847$1IfLeT g$top-level-context$15848$1IfLeT g$inv-collector$15849$1IfLeT g$vis-collector$15850$1IfLeT g$imp-collector$15851$1IfLeT) ((case-lambda ((g$swap$15852$1IfLeT) (dynamic-wind g$swap$15852$1IfLeT (case-lambda (() (g$chi-interaction-expr$10171$1IfLeT g$x$15833$1IfLeT g$rib$15830$1IfLeT g$r$15831$1IfLeT))) g$swap$15852$1IfLeT))) (case-lambda (() (begin ((case-lambda ((g$t$15853$1IfLeT) (begin (g$top-level-context$15844$1IfLeT g$top-level-context$15848$1IfLeT) (set! g$top-level-context$15848$1IfLeT g$t$15853$1IfLeT)))) (g$top-level-context$15844$1IfLeT)) ((case-lambda ((g$t$15854$1IfLeT) (begin (g$inv-collector$15845$1IfLeT g$inv-collector$15849$1IfLeT) (set! g$inv-collector$15849$1IfLeT g$t$15854$1IfLeT)))) (g$inv-collector$15845$1IfLeT)) ((case-lambda ((g$t$15855$1IfLeT) (begin (g$vis-collector$15846$1IfLeT g$vis-collector$15850$1IfLeT) (set! g$vis-collector$15850$1IfLeT g$t$15855$1IfLeT)))) (g$vis-collector$15846$1IfLeT)) ((case-lambda ((g$t$15856$1IfLeT) (begin (g$imp-collector$15847$1IfLeT g$imp-collector$15851$1IfLeT) (set! g$imp-collector$15851$1IfLeT g$t$15856$1IfLeT)))) (g$imp-collector$15847$1IfLeT)))))))) g$top-level-context$10227$1IfLeT g$inv-collector$10167$1IfLeT g$vis-collector$10168$1IfLeT g$imp-collector$10169$1IfLeT g$env$15807$1IfLeT g$rtc$15832$1IfLeT (g$make-collector$10166$1IfLeT) (g$make-collector$10166$1IfLeT)))) (case-lambda ((g$e$15857$1IfLeT g$r^$15858$1IfLeT) ((case-lambda ((g$r^$15859$1IfLeT g$e$15860$1IfLeT) (begin (g$set-interaction-env-r!$10197$1IfLeT g$env$15807$1IfLeT g$r^$15859$1IfLeT) (values g$e$15860$1IfLeT (g$rtc$15832$1IfLeT))))) g$r^$15858$1IfLeT g$e$15857$1IfLeT)))))) (g$make-stx$9811$1IfLeT g$x$15806$1IfLeT g$top-mark*$9780$1IfLeT (list g$rib$15830$1IfLeT) '())))) (g$interaction-env-rib$10193$1IfLeT g$env$15807$1IfLeT) (g$interaction-env-r$10194$1IfLeT g$env$15807$1IfLeT) (g$make-collector$10166$1IfLeT)) (assertion-violation 'expand '"not an environment" g$env$15807$1IfLeT)))))) (g$eval$10207$1IfLeT g$eval$16312$1IfLeT (case-lambda ((g$x$15861$1IfLeT g$env$15862$1IfLeT) (begin (if (g$environment?$10202$1IfLeT g$env$15862$1IfLeT) (void) (error 'eval '"not an environment" g$env$15862$1IfLeT)) (call-with-values (case-lambda (() (g$expand$10206$1IfLeT g$x$15861$1IfLeT g$env$15862$1IfLeT))) (case-lambda ((g$x$15865$1IfLeT g$invoke-req*$15866$1IfLeT) ((case-lambda ((g$invoke-req*$15867$1IfLeT g$x$15868$1IfLeT) (begin (for-each g$invoke-library$9654$1IfLeT g$invoke-req*$15867$1IfLeT) (eval-core (g$expanded->core$9366$1IfLeT g$x$15868$1IfLeT))))) g$invoke-req*$15866$1IfLeT g$x$15865$1IfLeT)))))))) (g$library-expander$10208$1IfLeT g$library-expander$16313$1IfLeT (case-lambda ((g$x$15869$1IfLeT g$filename$15870$1IfLeT) (letrec* ((g$build-visit-code$15871$1IfLeT (case-lambda ((g$macro*$15914$1IfLeT) (if (null? g$macro*$15914$1IfLeT) (g$build-void$9773$1IfLeT) (g$build-sequence$9772$1IfLeT '#f (map (case-lambda ((g$x$15915$1IfLeT) ((case-lambda ((g$loc$15916$1IfLeT g$src$15917$1IfLeT) (list 'set! g$loc$15916$1IfLeT g$src$15917$1IfLeT))) (car g$x$15915$1IfLeT) (g$cddr$8072$1IfLeT g$x$15915$1IfLeT)))) g$macro*$15914$1IfLeT)))))) (g$visit!$15872$1IfLeT (case-lambda ((g$macro*$15910$1IfLeT) (for-each (case-lambda ((g$x$15911$1IfLeT) ((case-lambda ((g$loc$15912$1IfLeT g$proc$15913$1IfLeT) (set-symbol-value! g$loc$15912$1IfLeT g$proc$15913$1IfLeT))) (car g$x$15911$1IfLeT) (g$cadr$8070$1IfLeT g$x$15911$1IfLeT)))) g$macro*$15910$1IfLeT))))) (call-with-values (case-lambda (() (g$core-library-expander$10173$1IfLeT g$x$15869$1IfLeT))) (case-lambda ((g$name$15882$1IfLeT g$ver$15883$1IfLeT g$imp*$15884$1IfLeT g$inv*$15885$1IfLeT g$vis*$15886$1IfLeT g$invoke-code$15887$1IfLeT g$macro*$15888$1IfLeT g$export-subst$15889$1IfLeT g$export-env$15890$1IfLeT) ((case-lambda ((g$export-env$15891$1IfLeT g$export-subst$15892$1IfLeT g$macro*$15893$1IfLeT g$invoke-code$15894$1IfLeT g$vis*$15895$1IfLeT g$inv*$15896$1IfLeT g$imp*$15897$1IfLeT g$ver$15898$1IfLeT g$name$15899$1IfLeT) ((case-lambda ((g$id$15900$1IfLeT g$name$15901$1IfLeT g$ver$15902$1IfLeT g$imp*$15903$1IfLeT g$vis*$15904$1IfLeT g$inv*$15905$1IfLeT g$visit-proc$15906$1IfLeT g$invoke-proc$15907$1IfLeT g$visit-code$15908$1IfLeT g$invoke-code$15909$1IfLeT) (begin (g$install-library$9652$1IfLeT g$id$15900$1IfLeT g$name$15901$1IfLeT g$ver$15902$1IfLeT g$imp*$15903$1IfLeT g$vis*$15904$1IfLeT g$inv*$15905$1IfLeT g$export-subst$15892$1IfLeT g$export-env$15891$1IfLeT g$visit-proc$15906$1IfLeT g$invoke-proc$15907$1IfLeT g$visit-code$15908$1IfLeT g$invoke-code$15909$1IfLeT '#t g$filename$15870$1IfLeT) (values g$id$15900$1IfLeT g$name$15901$1IfLeT g$ver$15902$1IfLeT g$imp*$15903$1IfLeT g$vis*$15904$1IfLeT g$inv*$15905$1IfLeT g$invoke-code$15909$1IfLeT g$visit-code$15908$1IfLeT g$export-subst$15892$1IfLeT g$export-env$15891$1IfLeT)))) (gensym) g$name$15899$1IfLeT g$ver$15898$1IfLeT (map g$library-spec$9658$1IfLeT g$imp*$15897$1IfLeT) (map g$library-spec$9658$1IfLeT g$vis*$15895$1IfLeT) (map g$library-spec$9658$1IfLeT g$inv*$15896$1IfLeT) (case-lambda (() (g$visit!$15872$1IfLeT g$macro*$15893$1IfLeT))) (case-lambda (() (eval-core (g$expanded->core$9366$1IfLeT g$invoke-code$15894$1IfLeT)))) (g$build-visit-code$15871$1IfLeT g$macro*$15893$1IfLeT) g$invoke-code$15894$1IfLeT))) g$export-env$15890$1IfLeT g$export-subst$15889$1IfLeT g$macro*$15888$1IfLeT g$invoke-code$15887$1IfLeT g$vis*$15886$1IfLeT g$inv*$15885$1IfLeT g$imp*$15884$1IfLeT g$ver$15883$1IfLeT g$name$15882$1IfLeT)))))) ((g$x$15918$1IfLeT) (g$library-expander$10208$1IfLeT g$x$15918$1IfLeT '#f)))) (g$boot-library-expand$10209$1IfLeT g$boot-library-expand$16314$1IfLeT (case-lambda ((g$x$15919$1IfLeT) (call-with-values (case-lambda (() (g$library-expander$10208$1IfLeT g$x$15919$1IfLeT))) (case-lambda ((g$id$15930$1IfLeT g$name$15931$1IfLeT g$ver$15932$1IfLeT g$imp*$15933$1IfLeT g$vis*$15934$1IfLeT g$inv*$15935$1IfLeT g$invoke-code$15936$1IfLeT g$visit-code$15937$1IfLeT g$export-subst$15938$1IfLeT g$export-env$15939$1IfLeT) ((case-lambda ((g$export-env$15940$1IfLeT g$export-subst$15941$1IfLeT g$visit-code$15942$1IfLeT g$invoke-code$15943$1IfLeT g$inv*$15944$1IfLeT g$vis*$15945$1IfLeT g$imp*$15946$1IfLeT g$ver$15947$1IfLeT g$name$15948$1IfLeT g$id$15949$1IfLeT) (values g$invoke-code$15943$1IfLeT g$export-subst$15941$1IfLeT g$export-env$15940$1IfLeT))) g$export-env$15939$1IfLeT g$export-subst$15938$1IfLeT g$visit-code$15937$1IfLeT g$invoke-code$15936$1IfLeT g$inv*$15935$1IfLeT g$vis*$15934$1IfLeT g$imp*$15933$1IfLeT g$ver$15932$1IfLeT g$name$15931$1IfLeT g$id$15930$1IfLeT))))))) (g$rev-map-append$10210$1IfLeT g$rev-map-append$16315$1IfLeT (case-lambda ((g$f$15950$1IfLeT g$ls$15951$1IfLeT g$ac$15952$1IfLeT) (if (null? g$ls$15951$1IfLeT) g$ac$15952$1IfLeT (g$rev-map-append$10210$1IfLeT g$f$15950$1IfLeT (cdr g$ls$15951$1IfLeT) (cons (g$f$15950$1IfLeT (car g$ls$15951$1IfLeT)) g$ac$15952$1IfLeT)))))) (g$build-exports$10211$1IfLeT g$build-exports$16316$1IfLeT (case-lambda ((g$lex*+loc*$15953$1IfLeT g$init*$15954$1IfLeT) (g$build-sequence$9772$1IfLeT '#f (cons (g$build-void$9773$1IfLeT) (g$rev-map-append$10210$1IfLeT (case-lambda ((g$x$15955$1IfLeT) (list 'set! (cdr g$x$15955$1IfLeT) (car g$x$15955$1IfLeT)))) g$lex*+loc*$15953$1IfLeT g$init*$15954$1IfLeT)))))) (g$make-export-subst$10212$1IfLeT g$make-export-subst$16317$1IfLeT (case-lambda ((g$int*$15956$1IfLeT g$ext*$15957$1IfLeT g$rib$15958$1IfLeT) (map (case-lambda ((g$int$15959$1IfLeT g$ext$15960$1IfLeT) ((case-lambda ((g$id$15961$1IfLeT) ((case-lambda ((g$label$15962$1IfLeT) ((case-lambda (() (begin (if g$label$15962$1IfLeT (void) (g$syntax-violation$10221$1IfLeT '#f '"cannot export unbound identifier" g$id$15961$1IfLeT)) (cons g$ext$15960$1IfLeT g$label$15962$1IfLeT))))))) (g$id->label$9850$1IfLeT g$id$15961$1IfLeT)))) (g$mkstx$9826$1IfLeT g$int$15959$1IfLeT g$top-mark*$9780$1IfLeT (list g$rib$15958$1IfLeT) '())))) g$int*$15956$1IfLeT g$ext*$15957$1IfLeT)))) (g$make-export-env/macros$10213$1IfLeT g$make-export-env/macros$16318$1IfLeT (case-lambda ((g$lex*$15963$1IfLeT g$loc*$15964$1IfLeT g$r$15965$1IfLeT) (letrec* ((g$lookup$15966$1IfLeT (case-lambda ((g$x$15981$1IfLeT) ((letrec ((g$f$15982$1IfLeT (case-lambda ((g$x$15983$1IfLeT g$lex*$15984$1IfLeT g$loc*$15985$1IfLeT) (if (pair? g$lex*$15984$1IfLeT) (if (eq? g$x$15983$1IfLeT (car g$lex*$15984$1IfLeT)) (car g$loc*$15985$1IfLeT) (g$f$15982$1IfLeT g$x$15983$1IfLeT (cdr g$lex*$15984$1IfLeT) (cdr g$loc*$15985$1IfLeT))) (assertion-violation 'lookup-make-export '"BUG")))))) g$f$15982$1IfLeT) g$x$15981$1IfLeT g$lex*$15963$1IfLeT g$loc*$15964$1IfLeT))))) ((letrec ((g$f$15967$1IfLeT (case-lambda ((g$r$15968$1IfLeT g$env$15969$1IfLeT g$global*$15970$1IfLeT g$macro*$15971$1IfLeT) (if (null? g$r$15968$1IfLeT) (values g$env$15969$1IfLeT g$global*$15970$1IfLeT g$macro*$15971$1IfLeT) ((case-lambda ((g$x$15972$1IfLeT) ((case-lambda ((g$label$15973$1IfLeT g$b$15974$1IfLeT) ((case-lambda ((g$t$15975$1IfLeT) (if (memv g$t$15975$1IfLeT '(lexical)) ((case-lambda ((g$v$15978$1IfLeT) ((case-lambda ((g$loc$15979$1IfLeT g$type$15980$1IfLeT) (g$f$15967$1IfLeT (cdr g$r$15968$1IfLeT) (cons (g$cons*$8492$1IfLeT g$label$15973$1IfLeT g$type$15980$1IfLeT g$loc$15979$1IfLeT) g$env$15969$1IfLeT) (cons (cons (g$lexical-var$10064$1IfLeT g$v$15978$1IfLeT) g$loc$15979$1IfLeT) g$global*$15970$1IfLeT) g$macro*$15971$1IfLeT))) (g$lookup$15966$1IfLeT (g$lexical-var$10064$1IfLeT g$v$15978$1IfLeT)) (if (g$lexical-mutable?$10065$1IfLeT g$v$15978$1IfLeT) 'mutable 'global)))) (g$binding-value$9855$1IfLeT g$b$15974$1IfLeT)) (if (memv g$t$15975$1IfLeT '(local-macro)) ((case-lambda ((g$loc$15977$1IfLeT) (g$f$15967$1IfLeT (cdr g$r$15968$1IfLeT) (cons (g$cons*$8492$1IfLeT g$label$15973$1IfLeT 'global-macro g$loc$15977$1IfLeT) g$env$15969$1IfLeT) g$global*$15970$1IfLeT (cons (cons g$loc$15977$1IfLeT (g$binding-value$9855$1IfLeT g$b$15974$1IfLeT)) g$macro*$15971$1IfLeT)))) (gensym)) (if (memv g$t$15975$1IfLeT '(local-macro!)) ((case-lambda ((g$loc$15976$1IfLeT) (g$f$15967$1IfLeT (cdr g$r$15968$1IfLeT) (cons (g$cons*$8492$1IfLeT g$label$15973$1IfLeT 'global-macro! g$loc$15976$1IfLeT) g$env$15969$1IfLeT) g$global*$15970$1IfLeT (cons (cons g$loc$15976$1IfLeT (g$binding-value$9855$1IfLeT g$b$15974$1IfLeT)) g$macro*$15971$1IfLeT)))) (gensym)) (if (memv g$t$15975$1IfLeT '($rtd $module)) (g$f$15967$1IfLeT (cdr g$r$15968$1IfLeT) (cons g$x$15972$1IfLeT g$env$15969$1IfLeT) g$global*$15970$1IfLeT g$macro*$15971$1IfLeT) (assertion-violation 'expander '"BUG: do not know how to export" (g$binding-type$9854$1IfLeT g$b$15974$1IfLeT) (g$binding-value$9855$1IfLeT g$b$15974$1IfLeT)))))))) (g$binding-type$9854$1IfLeT g$b$15974$1IfLeT)))) (car g$x$15972$1IfLeT) (cdr g$x$15972$1IfLeT)))) (car g$r$15968$1IfLeT))))))) g$f$15967$1IfLeT) g$r$15965$1IfLeT '() '() '()))))) (g$generate-temporaries$10214$1IfLeT g$generate-temporaries$16319$1IfLeT (case-lambda ((g$ls$15986$1IfLeT) ((case-lambda ((g$t$15987$1IfLeT) ((case-lambda ((g$ls/false$15988$1IfLeT) (if (if g$ls/false$15988$1IfLeT (begin '#f (apply (case-lambda ((g$ls$15989$1IfLeT) '#t)) g$ls/false$15988$1IfLeT)) '#f) (apply (case-lambda ((g$ls$15990$1IfLeT) (map (case-lambda ((g$x$15991$1IfLeT) (g$make-stx$9811$1IfLeT ((case-lambda ((g$x$15992$1IfLeT) (if ((case-lambda ((g$t$15993$1IfLeT) (if g$t$15993$1IfLeT g$t$15993$1IfLeT (begin '#f (string? g$x$15992$1IfLeT))))) (symbol? g$x$15992$1IfLeT)) (gensym g$x$15992$1IfLeT) (gensym 't)))) (g$syntax->datum$10224$1IfLeT g$x$15991$1IfLeT)) g$top-mark*$9780$1IfLeT '() '()))) g$ls$15990$1IfLeT))) g$ls/false$15988$1IfLeT) ((case-lambda ((g$t$15994$1IfLeT) ((case-lambda ((g$ls/false$15995$1IfLeT) (if (if g$ls/false$15995$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$15995$1IfLeT)) '#f) (apply (case-lambda (() (assertion-violation 'generate-temporaries '"not a list"))) g$ls/false$15995$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$15994$1IfLeT)))) ((case-lambda ((g$x$15996$1IfLeT) '())) g$t$15994$1IfLeT)))) g$t$15987$1IfLeT)))) ((letrec ((g$f$15997$1IfLeT (case-lambda ((g$x$15998$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$15998$1IfLeT) ((case-lambda ((g$cars/f$15999$1IfLeT) (if g$cars/f$15999$1IfLeT (begin '#f ((case-lambda ((g$cdrs/f$16000$1IfLeT) (if g$cdrs/f$16000$1IfLeT (begin '#f (map cons g$cars/f$15999$1IfLeT g$cdrs/f$16000$1IfLeT)) '#f))) (g$f$15997$1IfLeT (g$syntax-cdr$9836$1IfLeT g$x$15998$1IfLeT)))) '#f))) ((case-lambda ((g$x$16001$1IfLeT) (list g$x$16001$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$15998$1IfLeT))) (if (g$syntax-null?$9833$1IfLeT g$x$15998$1IfLeT) (list (begin 'ls '())) '#f)))))) g$f$15997$1IfLeT) g$t$15987$1IfLeT)))) g$ls$15986$1IfLeT)))) (g$free-identifier=?$10215$1IfLeT g$free-identifier=?$16320$1IfLeT (case-lambda ((g$x$16002$1IfLeT g$y$16003$1IfLeT) (if (g$id?$9838$1IfLeT g$x$16002$1IfLeT) (if (g$id?$9838$1IfLeT g$y$16003$1IfLeT) (g$free-id=?$9842$1IfLeT g$x$16002$1IfLeT g$y$16003$1IfLeT) (assertion-violation 'free-identifier=? '"not an identifier" g$y$16003$1IfLeT)) (assertion-violation 'free-identifier=? '"not an identifier" g$x$16002$1IfLeT))))) (g$bound-identifier=?$10216$1IfLeT g$bound-identifier=?$16321$1IfLeT (case-lambda ((g$x$16004$1IfLeT g$y$16005$1IfLeT) (if (g$id?$9838$1IfLeT g$x$16004$1IfLeT) (if (g$id?$9838$1IfLeT g$y$16005$1IfLeT) (g$bound-id=?$9841$1IfLeT g$x$16004$1IfLeT g$y$16005$1IfLeT) (assertion-violation 'bound-identifier=? '"not an identifier" g$y$16005$1IfLeT)) (assertion-violation 'bound-identifier=? '"not an identifier" g$x$16004$1IfLeT))))) (g$extract-position-condition$10217$1IfLeT g$extract-position-condition$16322$1IfLeT (case-lambda ((g$x$16006$1IfLeT) (letrec* ((g$15295$16007$1IfLeT (make-record-type-descriptor '&source-information &condition-rtd 'g$15298$1IfLeT '#f '#f '#((immutable file-name) (immutable character)))) (g$15297$16008$1IfLeT '#f) (g$15296$16009$1IfLeT (make-record-constructor-descriptor g$15295$16007$1IfLeT &condition-rcd g$15297$16008$1IfLeT)) (g$15294$16010$1IfLeT (record-predicate g$15295$16007$1IfLeT)) (g$make-source-condition$16011$1IfLeT (record-constructor g$15296$16009$1IfLeT)) (g$15292$16012$1IfLeT (record-accessor g$15295$16007$1IfLeT '0)) (g$15293$16013$1IfLeT (record-accessor g$15295$16007$1IfLeT '1)) (g$source-condition?$16014$1IfLeT (condition-predicate g$15295$16007$1IfLeT)) (g$source-filename$16015$1IfLeT (condition-accessor g$15295$16007$1IfLeT g$15292$16012$1IfLeT)) (g$source-character$16016$1IfLeT (condition-accessor g$15295$16007$1IfLeT g$15293$16013$1IfLeT))) (if (g$stx?$9810$1IfLeT g$x$16006$1IfLeT) ((case-lambda ((g$x$16017$1IfLeT) (if (annotation? g$x$16017$1IfLeT) ((case-lambda ((g$src$16018$1IfLeT) (if (pair? g$src$16018$1IfLeT) (g$make-source-condition$16011$1IfLeT (car g$src$16018$1IfLeT) (cdr g$src$16018$1IfLeT)) (condition)))) (annotation-source g$x$16017$1IfLeT)) (condition)))) (g$stx-expr$9812$1IfLeT g$x$16006$1IfLeT)) (condition)))))) (g$syntax-error$10218$1IfLeT g$syntax-error$16323$1IfLeT (case-lambda ((g$x$16019$1IfLeT . g$args$16020$1IfLeT) (begin (if (g$for-all$8490$1IfLeT string? g$args$16020$1IfLeT) (void) (assertion-violation 'syntax-error '"invalid argument" g$args$16020$1IfLeT)) (raise (condition (g$make-message-condition$8744$1IfLeT (if (null? g$args$16020$1IfLeT) '"invalid syntax" (apply string-append g$args$16020$1IfLeT))) (g$make-syntax-violation$8816$1IfLeT (g$syntax->datum$10224$1IfLeT g$x$16019$1IfLeT) '#f) (g$extract-position-condition$10217$1IfLeT g$x$16019$1IfLeT) (g$extract-trace$10219$1IfLeT g$x$16019$1IfLeT))))))) (g$extract-trace$10219$1IfLeT g$extract-trace$16324$1IfLeT (case-lambda ((g$x$16021$1IfLeT) (letrec* ((g$15317$16022$1IfLeT (make-record-type-descriptor '&trace &condition-rtd 'g$15320$1IfLeT '#f '#f '#((immutable form)))) (g$15319$16023$1IfLeT '#f) (g$15318$16024$1IfLeT (make-record-constructor-descriptor g$15317$16022$1IfLeT &condition-rcd g$15319$16023$1IfLeT)) (g$15316$16025$1IfLeT (record-predicate g$15317$16022$1IfLeT)) (g$make-trace$16026$1IfLeT (record-constructor g$15318$16024$1IfLeT)) (g$15315$16027$1IfLeT (record-accessor g$15317$16022$1IfLeT '0)) (g$trace?$16028$1IfLeT (condition-predicate g$15317$16022$1IfLeT)) (g$trace-form$16029$1IfLeT (condition-accessor g$15317$16022$1IfLeT g$15315$16027$1IfLeT))) ((letrec ((g$f$16030$1IfLeT (case-lambda ((g$x$16031$1IfLeT) (if (g$stx?$9810$1IfLeT g$x$16031$1IfLeT) (apply condition (g$make-trace$16026$1IfLeT g$x$16031$1IfLeT) (map g$f$16030$1IfLeT (g$stx-ae*$9815$1IfLeT g$x$16031$1IfLeT))) (if (annotation? g$x$16031$1IfLeT) (g$make-trace$16026$1IfLeT g$x$16031$1IfLeT) (condition))))))) g$f$16030$1IfLeT) g$x$16021$1IfLeT))))) (g$syntax-violation*$10220$1IfLeT g$syntax-violation*$16325$1IfLeT (case-lambda ((g$who$16032$1IfLeT g$msg$16033$1IfLeT g$form$16034$1IfLeT g$condition-object$16035$1IfLeT) (begin (if (string? g$msg$16033$1IfLeT) (void) (assertion-violation 'syntax-violation '"message is not a string" g$msg$16033$1IfLeT)) ((case-lambda ((g$who$16036$1IfLeT) (raise (condition (if g$who$16036$1IfLeT (g$make-who-condition$8790$1IfLeT g$who$16036$1IfLeT) (condition)) (g$make-message-condition$8744$1IfLeT g$msg$16033$1IfLeT) g$condition-object$16035$1IfLeT (g$extract-position-condition$10217$1IfLeT g$form$16034$1IfLeT) (g$extract-trace$10219$1IfLeT g$form$16034$1IfLeT))))) (if ((case-lambda ((g$t$16037$1IfLeT) (if g$t$16037$1IfLeT g$t$16037$1IfLeT (begin '#f (symbol? g$who$16032$1IfLeT))))) (string? g$who$16032$1IfLeT)) g$who$16032$1IfLeT (if (not g$who$16032$1IfLeT) ((case-lambda ((g$t$16038$1IfLeT) ((case-lambda ((g$ls/false$16039$1IfLeT) (if (if g$ls/false$16039$1IfLeT (begin '#f (apply (case-lambda ((g$id$16040$1IfLeT) (g$id?$9838$1IfLeT g$id$16040$1IfLeT))) g$ls/false$16039$1IfLeT)) '#f) (apply (case-lambda ((g$id$16041$1IfLeT) (g$syntax->datum$10224$1IfLeT g$id$16041$1IfLeT))) g$ls/false$16039$1IfLeT) ((case-lambda ((g$t$16042$1IfLeT) ((case-lambda ((g$ls/false$16043$1IfLeT) (if (if g$ls/false$16043$1IfLeT (begin '#f (apply (case-lambda ((g$id$16044$1IfLeT g$rest$16045$1IfLeT) (g$id?$9838$1IfLeT g$id$16044$1IfLeT))) g$ls/false$16043$1IfLeT)) '#f) (apply (case-lambda ((g$id$16046$1IfLeT g$rest$16047$1IfLeT) (g$syntax->datum$10224$1IfLeT g$id$16046$1IfLeT))) g$ls/false$16043$1IfLeT) ((case-lambda ((g$t$16048$1IfLeT) ((case-lambda ((g$ls/false$16049$1IfLeT) (if (if g$ls/false$16049$1IfLeT (begin '#f (apply (case-lambda (() '#t)) g$ls/false$16049$1IfLeT)) '#f) (apply (case-lambda (() '#f)) g$ls/false$16049$1IfLeT) (g$syntax-violation$10221$1IfLeT '#f '"invalid syntax" g$t$16048$1IfLeT)))) ((case-lambda ((g$x$16050$1IfLeT) '())) g$t$16048$1IfLeT)))) g$t$16042$1IfLeT)))) ((case-lambda ((g$x$16051$1IfLeT) (if (g$syntax-pair?$9831$1IfLeT g$x$16051$1IfLeT) (begin '#f ((case-lambda ((g$q$16052$1IfLeT) (if g$q$16052$1IfLeT (begin '#f ((case-lambda ((g$r$16053$1IfLeT) (if g$r$16053$1IfLeT (begin '#f (append g$q$16052$1IfLeT g$r$16053$1IfLeT)) '#f))) ((case-lambda ((g$x$16054$1IfLeT) (list g$x$16054$1IfLeT))) (g$syntax-cdr$9836$1IfLeT g$x$16051$1IfLeT)))) '#f))) ((case-lambda ((g$x$16055$1IfLeT) (list g$x$16055$1IfLeT))) (g$syntax-car$9835$1IfLeT g$x$16051$1IfLeT)))) '#f))) g$t$16042$1IfLeT)))) g$t$16038$1IfLeT)))) ((case-lambda ((g$x$16056$1IfLeT) (list g$x$16056$1IfLeT))) g$t$16038$1IfLeT)))) g$form$16034$1IfLeT) (assertion-violation 'syntax-violation '"invalid who argument" g$who$16032$1IfLeT)))))))) (g$syntax-violation$10221$1IfLeT g$syntax-violation$16326$1IfLeT (case-lambda ((g$who$16057$1IfLeT g$msg$16058$1IfLeT g$form$16059$1IfLeT) (g$syntax-violation$10221$1IfLeT g$who$16057$1IfLeT g$msg$16058$1IfLeT g$form$16059$1IfLeT '#f)) ((g$who$16060$1IfLeT g$msg$16061$1IfLeT g$form$16062$1IfLeT g$subform$16063$1IfLeT) (g$syntax-violation*$10220$1IfLeT g$who$16060$1IfLeT g$msg$16061$1IfLeT g$form$16062$1IfLeT (g$make-syntax-violation$8816$1IfLeT (g$syntax->datum$10224$1IfLeT g$form$16062$1IfLeT) (g$syntax->datum$10224$1IfLeT g$subform$16063$1IfLeT)))))) (g$identifier?$10222$1IfLeT g$identifier?$16327$1IfLeT (case-lambda ((g$x$16064$1IfLeT) (g$id?$9838$1IfLeT g$x$16064$1IfLeT)))) (g$datum->syntax$10223$1IfLeT g$datum->syntax$16328$1IfLeT (case-lambda ((g$id$16065$1IfLeT g$datum$16066$1IfLeT) (if (g$id?$9838$1IfLeT g$id$16065$1IfLeT) (g$datum->stx$9821$1IfLeT g$id$16065$1IfLeT g$datum$16066$1IfLeT) (assertion-violation 'datum->syntax '"not an identifier" g$id$16065$1IfLeT))))) (g$syntax->datum$10224$1IfLeT g$syntax->datum$16329$1IfLeT (case-lambda ((g$x$16067$1IfLeT) (g$stx->datum$9849$1IfLeT g$x$16067$1IfLeT)))) (g$compile-r6rs-top-level$10225$1IfLeT g$compile-r6rs-top-level$16330$1IfLeT (case-lambda ((g$x*$16068$1IfLeT) (call-with-values (case-lambda (() (g$top-level-expander$10175$1IfLeT g$x*$16068$1IfLeT))) (case-lambda ((g$lib*$16071$1IfLeT g$invoke-code$16072$1IfLeT) ((case-lambda ((g$invoke-code$16073$1IfLeT g$lib*$16074$1IfLeT) (case-lambda (() (begin (for-each g$invoke-library$9654$1IfLeT g$lib*$16074$1IfLeT) (eval-core (g$expanded->core$9366$1IfLeT g$invoke-code$16073$1IfLeT))))))) g$invoke-code$16072$1IfLeT g$lib*$16071$1IfLeT))))))) (g$interaction-environment$10226$1IfLeT g$interaction-environment$16331$1IfLeT ((case-lambda ((g$the-env$16075$1IfLeT) (case-lambda (() ((case-lambda ((g$t$16076$1IfLeT) (if g$t$16076$1IfLeT g$t$16076$1IfLeT (begin '#f ((case-lambda ((g$lib$16077$1IfLeT g$rib$16078$1IfLeT) (begin ((case-lambda ((g$subst$16079$1IfLeT) (begin (g$set-rib-sym*!$9797$1IfLeT g$rib$16078$1IfLeT (map car g$subst$16079$1IfLeT)) (g$set-rib-mark**!$9798$1IfLeT g$rib$16078$1IfLeT (map (case-lambda ((g$x$16080$1IfLeT) g$top-mark*$9780$1IfLeT)) g$subst$16079$1IfLeT)) (g$set-rib-label*!$9799$1IfLeT g$rib$16078$1IfLeT (map cdr g$subst$16079$1IfLeT))))) (g$library-subst$9611$1IfLeT g$lib$16077$1IfLeT)) ((case-lambda ((g$env$16081$1IfLeT) (begin (set! g$the-env$16075$1IfLeT g$env$16081$1IfLeT) g$env$16081$1IfLeT))) (g$make-interaction-env$10192$1IfLeT g$rib$16078$1IfLeT '() '()))))) (g$find-library-by-name$9647$1IfLeT '(ironscheme)) (g$make-empty-rib$9801$1IfLeT)))))) g$the-env$16075$1IfLeT))))) '#f)) (g$top-level-context$10227$1IfLeT g$top-level-context$16332$1IfLeT (g$make-parameter$9320$1IfLeT '#f))) (g$current-library-expander$9644$1IfLeT g$library-expander$10208$1IfLeT))
(library-letrec* () (begin (g$current-primitive-locations$9362$1IfLeT (case-lambda ((g$x$16366$1IfLeT) ((case-lambda ((g$t$16367$1IfLeT) (if g$t$16367$1IfLeT (cdr g$t$16367$1IfLeT) '#f))) (assq g$x$16366$1IfLeT '((ellipsis-map . g$ellipsis-map$16225$1IfLeT) (ironscheme-build . g$ironscheme-build$16360$1IfLeT) (syntax-error . g$syntax-error$16323$1IfLeT) (syntax-dispatch . g$syntax-dispatch$16222$1IfLeT) (compile-system-libraries . g$compile-system-libraries$16362$1IfLeT) (compile->closure . g$compile->closure$16364$1IfLeT) (compile . g$compile$16363$1IfLeT) (load . g$load$16359$1IfLeT) (interaction-environment . g$interaction-environment$16331$1IfLeT) (make-variable-transformer . g$make-variable-transformer$16163$1IfLeT) (identifier? . g$identifier?$16327$1IfLeT) (generate-temporaries . g$generate-temporaries$16319$1IfLeT) (free-identifier=? . g$free-identifier=?$16320$1IfLeT) (syntax->datum . g$syntax->datum$16329$1IfLeT) (datum->syntax . g$datum->syntax$16328$1IfLeT) (bound-identifier=? . g$bound-identifier=?$16321$1IfLeT) (delete-file . g$delete-file$8415$1IfLeT) (file-exists? . g$file-exists?$8414$1IfLeT) (list-sort . g$list-sort$8871$1IfLeT) (hashtable-equivalence-function . g$hashtable-equivalence-function$8343$1IfLeT) (hashtable-hash-function . g$hashtable-hash-function$8344$1IfLeT) (make-eqv-hashtable . g$make-eqv-hashtable$8335$1IfLeT) (make-eq-hashtable . g$make-eq-hashtable$8334$1IfLeT) (hashtable-update! . g$hashtable-update!$8341$1IfLeT) (hashtable-size . g$hashtable-size$8336$1IfLeT) (hashtable-set! . g$hashtable-set!$8338$1IfLeT) (hashtable-ref . g$hashtable-ref$8337$1IfLeT) (hashtable-delete! . g$hashtable-delete!$8339$1IfLeT) (hashtable-contains? . g$hashtable-contains?$8340$1IfLeT) (hashtable-clear! . g$hashtable-clear!$8342$1IfLeT) (open-string-output-port . g$open-string-output-port$9213$1IfLeT) (make-i/o-write-error . g$make-i/o-write-error$9142$1IfLeT) (make-i/o-read-error . g$make-i/o-read-error$9136$1IfLeT) (make-i/o-port-error . g$make-i/o-port-error$9188$1IfLeT) (make-i/o-invalid-position-error . g$make-i/o-invalid-position-error$9148$1IfLeT) (make-i/o-filename-error . g$make-i/o-filename-error$9156$1IfLeT) (make-i/o-file-protection-error . g$make-i/o-file-protection-error$9164$1IfLeT) (make-i/o-file-is-read-only-error . g$make-i/o-file-is-read-only-error$9170$1IfLeT) (make-i/o-file-does-not-exist-error . g$make-i/o-file-does-not-exist-error$9182$1IfLeT) (make-i/o-file-already-exists-error . g$make-i/o-file-already-exists-error$9176$1IfLeT) (make-i/o-error . g$make-i/o-error$9130$1IfLeT) (make-i/o-encoding-error . g$make-i/o-encoding-error$9202$1IfLeT) (make-i/o-decoding-error . g$make-i/o-decoding-error$9196$1IfLeT) (i/o-write-error? . g$i/o-write-error?$9143$1IfLeT) (i/o-read-error? . g$i/o-read-error?$9137$1IfLeT) (i/o-port-error? . g$i/o-port-error?$9190$1IfLeT) (i/o-invalid-position-error? . g$i/o-invalid-position-error?$9150$1IfLeT) (i/o-filename-error? . g$i/o-filename-error?$9158$1IfLeT) (i/o-file-protection-error? . g$i/o-file-protection-error?$9165$1IfLeT) (i/o-file-is-read-only-error? . g$i/o-file-is-read-only-error?$9171$1IfLeT) (i/o-file-does-not-exist-error? . g$i/o-file-does-not-exist-error?$9183$1IfLeT) (i/o-file-already-exists-error? . g$i/o-file-already-exists-error?$9177$1IfLeT) (i/o-error? . g$i/o-error?$9131$1IfLeT) (i/o-error-port . g$i/o-error-port$9191$1IfLeT) (i/o-error-filename . g$i/o-error-filename$9159$1IfLeT) (i/o-encoding-error? . g$i/o-encoding-error?$9204$1IfLeT) (i/o-encoding-error-char . g$i/o-encoding-error-char$9205$1IfLeT) (i/o-decoding-error? . g$i/o-decoding-error?$9197$1IfLeT) (scheme-report-environment . g$scheme-report-environment$16310$1IfLeT) (quotient . g$quotient$8840$1IfLeT) (null-environment . g$null-environment$16309$1IfLeT) (remainder . g$remainder$8841$1IfLeT) (modulo . g$modulo$8842$1IfLeT) (remove . g$remove$8495$1IfLeT) (remv . g$remv$8496$1IfLeT) (remq . g$remq$8497$1IfLeT) (exists . g$exists$8491$1IfLeT) (for-all . g$for-all$8490$1IfLeT) (fold-right . g$fold-right$8494$1IfLeT) (fold-left . g$fold-left$8493$1IfLeT) (cons* . g$cons*$8492$1IfLeT) (eval . g$eval$16312$1IfLeT) (environment . g$environment$16308$1IfLeT) (who-condition? . g$who-condition?$8792$1IfLeT) (warning? . g$warning?$8753$1IfLeT) (violation? . g$violation?$8771$1IfLeT) (undefined-violation? . g$undefined-violation?$8827$1IfLeT) (syntax-violation? . g$syntax-violation?$8819$1IfLeT) (syntax-violation-subform . g$syntax-violation-subform$8821$1IfLeT) (syntax-violation-form . g$syntax-violation-form$8820$1IfLeT) (syntax-violation . g$syntax-violation$16326$1IfLeT) (serious-condition? . g$serious-condition?$8759$1IfLeT) (non-continuable-violation? . g$non-continuable-violation?$8799$1IfLeT) (message-condition? . g$message-condition?$8746$1IfLeT) (make-who-condition . g$make-who-condition$8790$1IfLeT) (make-warning . g$make-warning$8752$1IfLeT) (make-violation . g$make-violation$8770$1IfLeT) (make-undefined-violation . g$make-undefined-violation$8826$1IfLeT) (make-syntax-violation . g$make-syntax-violation$8816$1IfLeT) (make-serious-condition . g$make-serious-condition$8758$1IfLeT) (make-non-continuable-violation . g$make-non-continuable-violation$8798$1IfLeT) (make-message-condition . g$make-message-condition$8744$1IfLeT) (make-lexical-violation . g$make-lexical-violation$8810$1IfLeT) (make-irritants-condition . g$make-irritants-condition$8782$1IfLeT) (make-implementation-restriction-violation . g$make-implementation-restriction-violation$8804$1IfLeT) (make-error . g$make-error$8764$1IfLeT) (make-assertion-violation . g$make-assertion-violation$8776$1IfLeT) (lexical-violation? . g$lexical-violation?$8811$1IfLeT) (irritants-condition? . g$irritants-condition?$8784$1IfLeT) (implementation-restriction-violation? . g$implementation-restriction-violation?$8805$1IfLeT) (error? . g$error?$8765$1IfLeT) (condition-who . g$condition-who$8793$1IfLeT) (condition-message . g$condition-message$8747$1IfLeT) (condition-irritants . g$condition-irritants$8785$1IfLeT) (assertion-violation? . g$assertion-violation?$8777$1IfLeT) (native-endianness . g$native-endianness$8609$1IfLeT) (bytevector-u64-set! . g$bytevector-u64-set!$8630$1IfLeT) (bytevector-u64-ref . g$bytevector-u64-ref$8626$1IfLeT) (bytevector-u64-native-set! . g$bytevector-u64-native-set!$8632$1IfLeT) (bytevector-u64-native-ref . g$bytevector-u64-native-ref$8628$1IfLeT) (bytevector-u32-set! . g$bytevector-u32-set!$8622$1IfLeT) (bytevector-u32-ref . g$bytevector-u32-ref$8618$1IfLeT) (bytevector-u32-native-set! . g$bytevector-u32-native-set!$8624$1IfLeT) (bytevector-u32-native-ref . g$bytevector-u32-native-ref$8620$1IfLeT) (bytevector-u16-set! . g$bytevector-u16-set!$8614$1IfLeT) (bytevector-u16-ref . g$bytevector-u16-ref$8610$1IfLeT) (bytevector-u16-native-set! . g$bytevector-u16-native-set!$8616$1IfLeT) (bytevector-u16-native-ref . g$bytevector-u16-native-ref$8612$1IfLeT) (bytevector-s64-set! . g$bytevector-s64-set!$8631$1IfLeT) (bytevector-s64-ref . g$bytevector-s64-ref$8627$1IfLeT) (bytevector-s64-native-set! . g$bytevector-s64-native-set!$8633$1IfLeT) (bytevector-s64-native-ref . g$bytevector-s64-native-ref$8629$1IfLeT) (bytevector-s32-set! . g$bytevector-s32-set!$8623$1IfLeT) (bytevector-s32-ref . g$bytevector-s32-ref$8619$1IfLeT) (bytevector-s32-native-set! . g$bytevector-s32-native-set!$8625$1IfLeT) (bytevector-s32-native-ref . g$bytevector-s32-native-ref$8621$1IfLeT) (bytevector-s16-set! . g$bytevector-s16-set!$8615$1IfLeT) (bytevector-s16-ref . g$bytevector-s16-ref$8611$1IfLeT) (bytevector-s16-native-set! . g$bytevector-s16-native-set!$8617$1IfLeT) (bytevector-s16-native-ref . g$bytevector-s16-native-ref$8613$1IfLeT) (bytevector-ieee-single-native-set! . g$bytevector-ieee-single-native-set!$8636$1IfLeT) (bytevector-ieee-single-native-ref . g$bytevector-ieee-single-native-ref$8634$1IfLeT) (bytevector-ieee-double-native-set! . g$bytevector-ieee-double-native-set!$8637$1IfLeT) (bytevector-ieee-double-native-ref . g$bytevector-ieee-double-native-ref$8635$1IfLeT) (no-nans-violation? . g$no-nans-violation?$9045$1IfLeT) (no-infinities-violation? . g$no-infinities-violation?$9039$1IfLeT) (make-no-nans-violation . g$make-no-nans-violation$9044$1IfLeT) (make-no-infinities-violation . g$make-no-infinities-violation$9038$1IfLeT) (fxrotate-bit-field . g$fxrotate-bit-field$9021$1IfLeT) (fxif . g$fxif$9015$1IfLeT) (fxcopy-bit-field . g$fxcopy-bit-field$9018$1IfLeT) (fxcopy-bit . g$fxcopy-bit$9016$1IfLeT) (fxbit-field . g$fxbit-field$9017$1IfLeT) (fxarithmetic-shift-right . g$fxarithmetic-shift-right$9020$1IfLeT) (fxarithmetic-shift-left . g$fxarithmetic-shift-left$9019$1IfLeT) (bitwise-rotate-bit-field . g$bitwise-rotate-bit-field$8966$1IfLeT) (bitwise-reverse-bit-field . g$bitwise-reverse-bit-field$8967$1IfLeT) (bitwise-if . g$bitwise-if$8960$1IfLeT) (bitwise-copy-bit-field . g$bitwise-copy-bit-field$8963$1IfLeT) (bitwise-copy-bit . g$bitwise-copy-bit$8961$1IfLeT) (bitwise-arithmetic-shift-right . g$bitwise-arithmetic-shift-right$8965$1IfLeT) (bitwise-arithmetic-shift-left . g$bitwise-arithmetic-shift-left$8964$1IfLeT) (rationalize . g$rationalize$8097$1IfLeT) (cddddr . g$cddddr$8096$1IfLeT) (cdddar . g$cdddar$8095$1IfLeT) (cddadr . g$cddadr$8094$1IfLeT) (cddaar . g$cddaar$8093$1IfLeT) (cdaddr . g$cdaddr$8092$1IfLeT) (cdadar . g$cdadar$8091$1IfLeT) (cdaadr . g$cdaadr$8090$1IfLeT) (cdaaar . g$cdaaar$8089$1IfLeT) (cadddr . g$cadddr$8088$1IfLeT) (caddar . g$caddar$8087$1IfLeT) (cadadr . g$cadadr$8086$1IfLeT) (cadaar . g$cadaar$8085$1IfLeT) (caaddr . g$caaddr$8084$1IfLeT) (caadar . g$caadar$8083$1IfLeT) (caaadr . g$caaadr$8082$1IfLeT) (caaaar . g$caaaar$8081$1IfLeT) (cdddr . g$cdddr$8080$1IfLeT) (cddar . g$cddar$8079$1IfLeT) (cdadr . g$cdadr$8078$1IfLeT) (cdaar . g$cdaar$8077$1IfLeT) (caddr . g$caddr$8076$1IfLeT) (cadar . g$cadar$8075$1IfLeT) (caadr . g$caadr$8074$1IfLeT) (caaar . g$caaar$8073$1IfLeT) (cddr . g$cddr$8072$1IfLeT) (cdar . g$cdar$8071$1IfLeT) (cadr . g$cadr$8070$1IfLeT) (caar . g$caar$8069$1IfLeT) (make-parameter . g$make-parameter$9320$1IfLeT) (environment-symbols . g$environment-symbols$16306$1IfLeT) (interaction-environment-symbols . g$interaction-environment-symbols$16305$1IfLeT) (library-path . g$library-path$9636$1IfLeT) (library-extensions . g$library-extensions$9637$1IfLeT) (installed-libraries . g$installed-libraries$9657$1IfLeT) (expand . g$expand$16311$1IfLeT))))))) (g$install-library$9652$1IfLeT 'g$16061$1IfLeT '(ironscheme) '() '() '() '() '((tanh . g$15998$1IfLeT) (cosh . g$15997$1IfLeT) (sinh . g$15996$1IfLeT) (make-guid . g$15995$1IfLeT) (unspecified? . g$15994$1IfLeT) (make-trace . g$15993$1IfLeT) (make-list . g$15992$1IfLeT) (last-pair . g$15991$1IfLeT) (load-r5rs . g$15990$1IfLeT) (license . g$15989$1IfLeT) (stacktrace . g$15988$1IfLeT) (ironscheme-build . g$15386$1IfLeT) (set-symbol-value! . g$15975$1IfLeT) (symbol-value . g$15974$1IfLeT) (ungensym . g$15973$1IfLeT) (gensym . g$15972$1IfLeT) (void . g$15971$1IfLeT) (compile-system-libraries . g$15388$1IfLeT) (compile->closure . g$15390$1IfLeT) (compile . g$15389$1IfLeT) (load . g$15385$1IfLeT) (interaction-environment . g$9808$1IfLeT) (string-upcase . g$15967$1IfLeT) (string-titlecase . g$15966$1IfLeT) (string-normalize-nfkd . g$15965$1IfLeT) (string-normalize-nfkc . g$15964$1IfLeT) (string-normalize-nfd . g$15963$1IfLeT) (string-normalize-nfc . g$15962$1IfLeT) (string-foldcase . g$15961$1IfLeT) (string-downcase . g$15960$1IfLeT) (string-ci>? . g$15959$1IfLeT) (string-ci>=? . g$15958$1IfLeT) (string-ci=? . g$15957$1IfLeT) (string-ci<? . g$15956$1IfLeT) (string-ci<=? . g$15955$1IfLeT) (char-whitespace? . g$15954$1IfLeT) (char-upper-case? . g$15953$1IfLeT) (char-title-case? . g$15952$1IfLeT) (char-numeric? . g$15951$1IfLeT) (char-lower-case? . g$15950$1IfLeT) (char-general-category . g$15949$1IfLeT) (char-upcase . g$15948$1IfLeT) (char-titlecase . g$15947$1IfLeT) (char-foldcase . g$15946$1IfLeT) (char-downcase . g$15945$1IfLeT) (char-ci>? . g$15944$1IfLeT) (char-ci>=? . g$15943$1IfLeT) (char-ci=? . g$15942$1IfLeT) (char-ci<? . g$15941$1IfLeT) (char-ci<=? . g$15940$1IfLeT) (char-alphabetic? . g$15939$1IfLeT) (make-variable-transformer . g$9511$1IfLeT) (identifier? . g$9804$1IfLeT) (generate-temporaries . g$9796$1IfLeT) (free-identifier=? . g$9797$1IfLeT) (syntax->datum . g$9806$1IfLeT) (datum->syntax . g$9805$1IfLeT) (bound-identifier=? . g$9798$1IfLeT) (record-type-descriptor? . g$15938$1IfLeT) (record-predicate . g$15937$1IfLeT) (record-mutator . g$15936$1IfLeT) (record-constructor . g$15935$1IfLeT) (record-accessor . g$15934$1IfLeT) (make-record-type-descriptor . g$15933$1IfLeT) (make-record-constructor-descriptor . g$15932$1IfLeT) (record? . g$15931$1IfLeT) (record-type-uid . g$15930$1IfLeT) (record-type-sealed? . g$15929$1IfLeT) (record-type-parent . g$15928$1IfLeT) (record-type-opaque? . g$15927$1IfLeT) (record-type-name . g$15926$1IfLeT) (record-type-generative? . g$15925$1IfLeT) (record-type-field-names . g$15924$1IfLeT) (record-rtd . g$15923$1IfLeT) (record-field-mutable? . g$15922$1IfLeT) (delete-file . g$8194$1IfLeT) (file-exists? . g$8193$1IfLeT) (vector-sort! . g$15921$1IfLeT) (vector-sort . g$15920$1IfLeT) (list-sort . g$8623$1IfLeT) (symbol-hash . g$15919$1IfLeT) (string-ci-hash . g$15918$1IfLeT) (string-hash . g$15917$1IfLeT) (equal-hash . g$15916$1IfLeT) (hashtable-equivalence-function . g$8167$1IfLeT) (make-hashtable . g$15915$1IfLeT) (hashtable-hash-function . g$8168$1IfLeT) (make-eqv-hashtable . g$8159$1IfLeT) (make-eq-hashtable . g$8158$1IfLeT) (hashtable? . g$15914$1IfLeT) (hashtable-update! . g$8165$1IfLeT) (hashtable-size . g$8160$1IfLeT) (hashtable-set! . g$8162$1IfLeT) (hashtable-ref . g$8161$1IfLeT) (hashtable-mutable? . g$15913$1IfLeT) (hashtable-keys . g$15912$1IfLeT) (hashtable-entries . g$15911$1IfLeT) (hashtable-delete! . g$8163$1IfLeT) (hashtable-copy . g$15910$1IfLeT) (hashtable-contains? . g$8164$1IfLeT) (hashtable-clear! . g$8166$1IfLeT) (call-with-output-file . g$15909$1IfLeT) (call-with-input-file . g$15908$1IfLeT) (write-char . g$15907$1IfLeT) (write . g$15906$1IfLeT) (with-output-to-file . g$15905$1IfLeT) (with-input-from-file . g$15904$1IfLeT) (read-char . g$15903$1IfLeT) (read . g$15902$1IfLeT) (peek-char . g$15901$1IfLeT) (open-output-file . g$15900$1IfLeT) (open-input-file . g$15899$1IfLeT) (newline . g$15898$1IfLeT) (display . g$15897$1IfLeT) (close-output-port . g$15896$1IfLeT) (close-input-port . g$15895$1IfLeT) (eof-object? . g$15894$1IfLeT) (eof-object . g$15893$1IfLeT) (current-error-port . g$15892$1IfLeT) (current-output-port . g$15891$1IfLeT) (current-input-port . g$15890$1IfLeT) (output-port? . g$15889$1IfLeT) (input-port? . g$15888$1IfLeT) (utf-8-codec . g$15887$1IfLeT) (utf-16-codec . g$15886$1IfLeT) (transcoder-error-handling-mode . g$15885$1IfLeT) (transcoder-eol-style . g$15884$1IfLeT) (transcoder-codec . g$15883$1IfLeT) (transcoded-port . g$15882$1IfLeT) (textual-port? . g$15881$1IfLeT) (string->bytevector . g$15880$1IfLeT) (standard-output-port . g$15879$1IfLeT) (standard-input-port . g$15878$1IfLeT) (standard-error-port . g$15877$1IfLeT) (set-port-position! . g$15876$1IfLeT) (put-u8 . g$15875$1IfLeT) (put-string . g$15874$1IfLeT) (put-datum . g$15873$1IfLeT) (put-char . g$15872$1IfLeT) (put-bytevector . g$15871$1IfLeT) (port? . g$15870$1IfLeT) (port-transcoder . g$15869$1IfLeT) (port-position . g$15868$1IfLeT) (port-has-set-port-position!? . g$15867$1IfLeT) (port-has-port-position? . g$15866$1IfLeT) (port-eof? . g$15865$1IfLeT) (output-port-buffer-mode . g$15864$1IfLeT) (open-string-output-port . g$8950$1IfLeT) (open-string-input-port . g$15863$1IfLeT) (open-file-output-port . g$15862$1IfLeT) (open-file-input/output-port . g$15861$1IfLeT) (open-file-input-port . g$15860$1IfLeT) (open-bytevector-output-port . g$15859$1IfLeT) (open-bytevector-input-port . g$15858$1IfLeT) (native-transcoder . g$15857$1IfLeT) (native-eol-style . g$15856$1IfLeT) (make-transcoder . g$15855$1IfLeT) (latin-1-codec . g$15854$1IfLeT) (make-i/o-write-error . g$8825$1IfLeT) (make-i/o-read-error . g$8813$1IfLeT) (make-i/o-port-error . g$8916$1IfLeT) (make-i/o-invalid-position-error . g$8838$1IfLeT) (make-i/o-filename-error . g$8853$1IfLeT) (make-i/o-file-protection-error . g$8867$1IfLeT) (make-i/o-file-is-read-only-error . g$8879$1IfLeT) (make-i/o-file-does-not-exist-error . g$8903$1IfLeT) (make-i/o-file-already-exists-error . g$8891$1IfLeT) (make-i/o-error . g$8801$1IfLeT) (make-i/o-encoding-error . g$8943$1IfLeT) (make-i/o-decoding-error . g$8930$1IfLeT) (make-custom-textual-output-port . g$15853$1IfLeT) (make-custom-textual-input/output-port . g$15852$1IfLeT) (make-custom-textual-input-port . g$15851$1IfLeT) (make-custom-binary-output-port . g$15850$1IfLeT) (make-custom-binary-input/output-port . g$15849$1IfLeT) (make-custom-binary-input-port . g$15848$1IfLeT) (make-bytevector . g$15847$1IfLeT) (lookahead-u8 . g$15846$1IfLeT) (lookahead-char . g$15845$1IfLeT) (i/o-write-error? . g$8826$1IfLeT) (i/o-read-error? . g$8814$1IfLeT) (i/o-port-error? . g$8918$1IfLeT) (i/o-invalid-position-error? . g$8840$1IfLeT) (i/o-filename-error? . g$8855$1IfLeT) (i/o-file-protection-error? . g$8868$1IfLeT) (i/o-file-is-read-only-error? . g$8880$1IfLeT) (i/o-file-does-not-exist-error? . g$8904$1IfLeT) (i/o-file-already-exists-error? . g$8892$1IfLeT) (i/o-error? . g$8802$1IfLeT) (i/o-error-port . g$8919$1IfLeT) (i/o-error-filename . g$8856$1IfLeT) (i/o-encoding-error? . g$8945$1IfLeT) (i/o-encoding-error-char . g$8946$1IfLeT) (i/o-decoding-error? . g$8931$1IfLeT) (get-u8 . g$15844$1IfLeT) (get-string-n! . g$15843$1IfLeT) (get-string-n . g$15842$1IfLeT) (get-string-all . g$15841$1IfLeT) (get-line . g$15840$1IfLeT) (get-datum . g$15839$1IfLeT) (get-char . g$15838$1IfLeT) (get-bytevector-some . g$15837$1IfLeT) (get-bytevector-n! . g$15836$1IfLeT) (get-bytevector-n . g$15835$1IfLeT) (get-bytevector-all . g$15834$1IfLeT) (flush-output-port . g$15833$1IfLeT) (close-port . g$15832$1IfLeT) (call-with-string-output-port . g$15831$1IfLeT) (call-with-port . g$15830$1IfLeT) (call-with-bytevector-output-port . g$15829$1IfLeT) (bytevector->string . g$15828$1IfLeT) (buffer-mode? . g$15827$1IfLeT) (binary-port? . g$15826$1IfLeT) (scheme-report-environment . g$9787$1IfLeT) (quotient . g$8610$1IfLeT) (null-environment . g$9786$1IfLeT) (remainder . g$8611$1IfLeT) (modulo . g$8612$1IfLeT) (inexact->exact . g$15825$1IfLeT) (force . g$15824$1IfLeT) (exact->inexact . g$15823$1IfLeT) (exit . g$15822$1IfLeT) (command-line . g$15821$1IfLeT) (string-fill! . g$15820$1IfLeT) (string-set! . g$15819$1IfLeT) (set-cdr! . g$15818$1IfLeT) (set-car! . g$15817$1IfLeT) (remove . g$8265$1IfLeT) (remv . g$8266$1IfLeT) (remp . g$15816$1IfLeT) (remq . g$8267$1IfLeT) (partition . g$15815$1IfLeT) (memv . g$15814$1IfLeT) (memq . g$15813$1IfLeT) (memp . g$15812$1IfLeT) (member . g$15811$1IfLeT) (exists . g$8261$1IfLeT) (for-all . g$8260$1IfLeT) (fold-right . g$8264$1IfLeT) (fold-left . g$8263$1IfLeT) (find . g$15810$1IfLeT) (filter . g$15809$1IfLeT) (cons* . g$8262$1IfLeT) (assv . g$15808$1IfLeT) (assq . g$15807$1IfLeT) (assp . g$15806$1IfLeT) (assoc . g$15805$1IfLeT) (with-exception-handler . g$15804$1IfLeT) (raise-continuable . g$15803$1IfLeT) (raise . g$15802$1IfLeT) (eval . g$9789$1IfLeT) (environment . g$9785$1IfLeT) (make-enumeration . g$15801$1IfLeT) (enum-set=? . g$15800$1IfLeT) (enum-set-universe . g$15799$1IfLeT) (enum-set-union . g$15798$1IfLeT) (enum-set-subset? . g$15797$1IfLeT) (enum-set-projection . g$15796$1IfLeT) (enum-set-member? . g$15795$1IfLeT) (enum-set-intersection . g$15794$1IfLeT) (enum-set-indexer . g$15793$1IfLeT) (enum-set-difference . g$15792$1IfLeT) (enum-set-constructor . g$15791$1IfLeT) (enum-set-complement . g$15790$1IfLeT) (enum-set->list . g$15789$1IfLeT) (who-condition? . g$8537$1IfLeT) (warning? . g$8460$1IfLeT) (violation? . g$8496$1IfLeT) (undefined-violation? . g$8604$1IfLeT) (syntax-violation? . g$8590$1IfLeT) (syntax-violation-subform . g$8592$1IfLeT) (syntax-violation-form . g$8591$1IfLeT) (syntax-violation . g$9803$1IfLeT) (simple-conditions . g$15788$1IfLeT) (serious-condition? . g$8472$1IfLeT) (non-continuable-violation? . g$8550$1IfLeT) (message-condition? . g$8447$1IfLeT) (make-who-condition . g$8535$1IfLeT) (make-warning . g$8459$1IfLeT) (make-violation . g$8495$1IfLeT) (make-undefined-violation . g$8603$1IfLeT) (make-syntax-violation . g$8587$1IfLeT) (make-serious-condition . g$8471$1IfLeT) (make-non-continuable-violation . g$8549$1IfLeT) (make-message-condition . g$8445$1IfLeT) (make-lexical-violation . g$8573$1IfLeT) (make-irritants-condition . g$8520$1IfLeT) (make-implementation-restriction-violation . g$8561$1IfLeT) (make-error . g$8483$1IfLeT) (make-assertion-violation . g$8507$1IfLeT) (lexical-violation? . g$8574$1IfLeT) (irritants-condition? . g$8522$1IfLeT) (implementation-restriction-violation? . g$8562$1IfLeT) (error? . g$8484$1IfLeT) (condition-who . g$8538$1IfLeT) (condition-predicate . g$15787$1IfLeT) (condition-message . g$8448$1IfLeT) (condition-irritants . g$8523$1IfLeT) (condition-accessor . g$15786$1IfLeT) (condition . g$15785$1IfLeT) (assertion-violation? . g$8508$1IfLeT) (condition? . g$15784$1IfLeT) (utf32->string . g$15783$1IfLeT) (utf16->string . g$15782$1IfLeT) (utf8->string . g$15781$1IfLeT) (uint-list->bytevector . g$15780$1IfLeT) (u8-list->bytevector . g$15779$1IfLeT) (string->utf8 . g$15778$1IfLeT) (string->utf32 . g$15777$1IfLeT) (string->utf16 . g$15776$1IfLeT) (sint-list->bytevector . g$15775$1IfLeT) (native-endianness . g$8306$1IfLeT) (bytevector? . g$15774$1IfLeT) (bytevector=? . g$15773$1IfLeT) (bytevector-uint-set! . g$15772$1IfLeT) (bytevector-uint-ref . g$15771$1IfLeT) (bytevector-u8-set! . g$15770$1IfLeT) (bytevector-u8-ref . g$15769$1IfLeT) (bytevector-u64-set! . g$8327$1IfLeT) (bytevector-u64-ref . g$8323$1IfLeT) (bytevector-u64-native-set! . g$8329$1IfLeT) (bytevector-u64-native-ref . g$8325$1IfLeT) (bytevector-u32-set! . g$8319$1IfLeT) (bytevector-u32-ref . g$8315$1IfLeT) (bytevector-u32-native-set! . g$8321$1IfLeT) (bytevector-u32-native-ref . g$8317$1IfLeT) (bytevector-u16-set! . g$8311$1IfLeT) (bytevector-u16-ref . g$8307$1IfLeT) (bytevector-u16-native-set! . g$8313$1IfLeT) (bytevector-u16-native-ref . g$8309$1IfLeT) (bytevector-sint-set! . g$15768$1IfLeT) (bytevector-sint-ref . g$15767$1IfLeT) (bytevector-s8-set! . g$15766$1IfLeT) (bytevector-s8-ref . g$15765$1IfLeT) (bytevector-s64-set! . g$8328$1IfLeT) (bytevector-s64-ref . g$8324$1IfLeT) (bytevector-s64-native-set! . g$8330$1IfLeT) (bytevector-s64-native-ref . g$8326$1IfLeT) (bytevector-s32-set! . g$8320$1IfLeT) (bytevector-s32-ref . g$8316$1IfLeT) (bytevector-s32-native-set! . g$8322$1IfLeT) (bytevector-s32-native-ref . g$8318$1IfLeT) (bytevector-s16-set! . g$8312$1IfLeT) (bytevector-s16-ref . g$8308$1IfLeT) (bytevector-s16-native-set! . g$8314$1IfLeT) (bytevector-s16-native-ref . g$8310$1IfLeT) (bytevector-length . g$15764$1IfLeT) (bytevector-ieee-single-set! . g$15763$1IfLeT) (bytevector-ieee-single-ref . g$15762$1IfLeT) (bytevector-ieee-single-native-set! . g$8333$1IfLeT) (bytevector-ieee-single-native-ref . g$8331$1IfLeT) (bytevector-ieee-double-set! . g$15761$1IfLeT) (bytevector-ieee-double-ref . g$15760$1IfLeT) (bytevector-ieee-double-native-set! . g$8334$1IfLeT) (bytevector-ieee-double-native-ref . g$8332$1IfLeT) (bytevector-fill! . g$15759$1IfLeT) (bytevector-copy! . g$15758$1IfLeT) (bytevector-copy . g$15757$1IfLeT) (bytevector->uint-list . g$15756$1IfLeT) (bytevector->u8-list . g$15755$1IfLeT) (bytevector->sint-list . g$15754$1IfLeT) (no-nans-violation? . g$8789$1IfLeT) (no-infinities-violation? . g$8777$1IfLeT) (make-no-nans-violation . g$8788$1IfLeT) (make-no-infinities-violation . g$8776$1IfLeT) (real->flonum . g$15753$1IfLeT) (flzero? . g$15752$1IfLeT) (fltruncate . g$15751$1IfLeT) (fltan . g$15750$1IfLeT) (flsqrt . g$15749$1IfLeT) (flsin . g$15748$1IfLeT) (flround . g$15747$1IfLeT) (flpositive? . g$15746$1IfLeT) (flonum? . g$15745$1IfLeT) (flodd? . g$15744$1IfLeT) (flnumerator . g$15743$1IfLeT) (flnegative? . g$15742$1IfLeT) (flnan? . g$15741$1IfLeT) (flmod0 . g$15740$1IfLeT) (flmod . g$15739$1IfLeT) (flmin . g$15738$1IfLeT) (flmax . g$15737$1IfLeT) (fllog . g$15736$1IfLeT) (flinteger? . g$15735$1IfLeT) (flinfinite? . g$15734$1IfLeT) (flfloor . g$15733$1IfLeT) (flfinite? . g$15732$1IfLeT) (flexpt . g$15731$1IfLeT) (flexp . g$15730$1IfLeT) (fleven? . g$15729$1IfLeT) (fldiv0-and-mod0 . g$15728$1IfLeT) (fldiv0 . g$15727$1IfLeT) (fldiv-and-mod . g$15726$1IfLeT) (fldiv . g$15725$1IfLeT) (fldenominator . g$15724$1IfLeT) (flcos . g$15723$1IfLeT) (flceiling . g$15722$1IfLeT) (flatan . g$15721$1IfLeT) (flasin . g$15720$1IfLeT) (flacos . g$15719$1IfLeT) (flabs . g$15718$1IfLeT) (fl>? . g$15717$1IfLeT) (fl>=? . g$15716$1IfLeT) (fl=? . g$15715$1IfLeT) (fl<? . g$15714$1IfLeT) (fl<=? . g$15713$1IfLeT) (fl/ . g$15712$1IfLeT) (fl- . g$15711$1IfLeT) (fl+ . g$15710$1IfLeT) (fl* . g$15709$1IfLeT) (fixnum->flonum . g$15708$1IfLeT) (fxzero? . g$15707$1IfLeT) (fxxor . g$15706$1IfLeT) (fxrotate-bit-field . g$8724$1IfLeT) (fxreverse-bit-field . g$15705$1IfLeT) (fxpositive? . g$15704$1IfLeT) (fxodd? . g$15703$1IfLeT) (fxnot . g$15702$1IfLeT) (fxnegative? . g$15701$1IfLeT) (fxmod0 . g$15700$1IfLeT) (fxmod . g$15699$1IfLeT) (fxmin . g$15698$1IfLeT) (fxmax . g$15697$1IfLeT) (fxlength . g$15696$1IfLeT) (fxior . g$15695$1IfLeT) (fxif . g$8718$1IfLeT) (fxfirst-bit-set . g$15694$1IfLeT) (fxeven? . g$15693$1IfLeT) (fxdiv0-and-mod0 . g$15692$1IfLeT) (fxdiv0 . g$15691$1IfLeT) (fxdiv-and-mod . g$15690$1IfLeT) (fxdiv . g$15689$1IfLeT) (fxcopy-bit-field . g$8721$1IfLeT) (fxcopy-bit . g$8719$1IfLeT) (fxbit-set? . g$15688$1IfLeT) (fxbit-field . g$8720$1IfLeT) (fxbit-count . g$15687$1IfLeT) (fxarithmetic-shift-right . g$8723$1IfLeT) (fxarithmetic-shift-left . g$8722$1IfLeT) (fxarithmetic-shift . g$15686$1IfLeT) (fxand . g$15685$1IfLeT) (fx>? . g$15684$1IfLeT) (fx>=? . g$15683$1IfLeT) (fx=? . g$15682$1IfLeT) (fx<? . g$15681$1IfLeT) (fx<=? . g$15680$1IfLeT) (fx-/carry . g$15679$1IfLeT) (fx- . g$15678$1IfLeT) (fx+/carry . g$15677$1IfLeT) (fx+ . g$15676$1IfLeT) (fx*/carry . g$15675$1IfLeT) (fx* . g$15674$1IfLeT) (greatest-fixnum . g$15673$1IfLeT) (least-fixnum . g$15672$1IfLeT) (fixnum-width . g$15671$1IfLeT) (fixnum? . g$15670$1IfLeT) (bitwise-rotate-bit-field . g$8672$1IfLeT) (bitwise-reverse-bit-field . g$8673$1IfLeT) (bitwise-length . g$15669$1IfLeT) (bitwise-if . g$8666$1IfLeT) (bitwise-first-bit-set . g$15668$1IfLeT) (bitwise-copy-bit-field . g$8669$1IfLeT) (bitwise-copy-bit . g$8667$1IfLeT) (bitwise-bit-set? . g$15667$1IfLeT) (bitwise-bit-field . g$15666$1IfLeT) (bitwise-bit-count . g$15665$1IfLeT) (bitwise-xor . g$15664$1IfLeT) (bitwise-ior . g$15663$1IfLeT) (bitwise-and . g$15662$1IfLeT) (bitwise-not . g$15661$1IfLeT) (bitwise-arithmetic-shift-right . g$8671$1IfLeT) (bitwise-arithmetic-shift-left . g$8670$1IfLeT) (bitwise-arithmetic-shift . g$15660$1IfLeT) (zero? . g$15659$1IfLeT) (vector? . g$15658$1IfLeT) (vector-set! . g$15657$1IfLeT) (vector-ref . g$15656$1IfLeT) (vector-map . g$15655$1IfLeT) (vector-length . g$15654$1IfLeT) (vector-for-each . g$15653$1IfLeT) (vector-fill! . g$15652$1IfLeT) (vector->list . g$15651$1IfLeT) (vector . g$15650$1IfLeT) (values . g$15649$1IfLeT) (truncate . g$15648$1IfLeT) (tan . g$15647$1IfLeT) (symbol? . g$15646$1IfLeT) (symbol=? . g$15645$1IfLeT) (symbol->string . g$15644$1IfLeT) (substring . g$15643$1IfLeT) (string? . g$15642$1IfLeT) (string>? . g$15641$1IfLeT) (string>=? . g$15640$1IfLeT) (string=? . g$15639$1IfLeT) (string<? . g$15638$1IfLeT) (string<=? . g$15637$1IfLeT) (string-ref . g$15636$1IfLeT) (string-length . g$15635$1IfLeT) (string-for-each . g$15634$1IfLeT) (string-copy . g$15633$1IfLeT) (string-append . g$15632$1IfLeT) (string->symbol . g$15631$1IfLeT) (string->number . g$15630$1IfLeT) (string->list . g$15629$1IfLeT) (string . g$15628$1IfLeT) (sqrt . g$15627$1IfLeT) (sin . g$15626$1IfLeT) (round . g$15625$1IfLeT) (reverse . g$15624$1IfLeT) (real? . g$15623$1IfLeT) (real-valued? . g$15622$1IfLeT) (real-part . g$15621$1IfLeT) (rationalize . g$7934$1IfLeT) (rational? . g$15620$1IfLeT) (rational-valued? . g$15619$1IfLeT) (procedure? . g$15618$1IfLeT) (positive? . g$15617$1IfLeT) (pair? . g$15616$1IfLeT) (odd? . g$15615$1IfLeT) (numerator . g$15614$1IfLeT) (number? . g$15613$1IfLeT) (number->string . g$15612$1IfLeT) (null? . g$15611$1IfLeT) (not . g$15610$1IfLeT) (negative? . g$15609$1IfLeT) (nan? . g$15608$1IfLeT) (min . g$15607$1IfLeT) (max . g$15606$1IfLeT) (map . g$15605$1IfLeT) (make-vector . g$15604$1IfLeT) (make-string . g$15603$1IfLeT) (make-rectangular . g$15602$1IfLeT) (make-polar . g$15601$1IfLeT) (magnitude . g$15600$1IfLeT) (log . g$15599$1IfLeT) (list? . g$15598$1IfLeT) (list-tail . g$15597$1IfLeT) (list-ref . g$15596$1IfLeT) (list->vector . g$15595$1IfLeT) (list->string . g$15594$1IfLeT) (list . g$15593$1IfLeT) (length . g$15592$1IfLeT) (lcm . g$15591$1IfLeT) (integer? . g$15590$1IfLeT) (integer-valued? . g$15589$1IfLeT) (integer->char . g$15588$1IfLeT) (infinite? . g$15587$1IfLeT) (inexact? . g$15586$1IfLeT) (inexact . g$15585$1IfLeT) (imag-part . g$15584$1IfLeT) (gcd . g$15583$1IfLeT) (for-each . g$15582$1IfLeT) (floor . g$15581$1IfLeT) (finite? . g$15580$1IfLeT) (expt . g$15579$1IfLeT) (exp . g$15578$1IfLeT) (exact? . g$15577$1IfLeT) (exact-integer-sqrt . g$15576$1IfLeT) (exact . g$15575$1IfLeT) (even? . g$15574$1IfLeT) (error . g$15573$1IfLeT) (eqv? . g$15572$1IfLeT) (equal? . g$15571$1IfLeT) (eq? . g$15570$1IfLeT) (dynamic-wind . g$15569$1IfLeT) (div0-and-mod0 . g$15568$1IfLeT) (mod0 . g$15567$1IfLeT) (div0 . g$15566$1IfLeT) (div-and-mod . g$15565$1IfLeT) (mod . g$15564$1IfLeT) (div . g$15563$1IfLeT) (denominator . g$15562$1IfLeT) (cos . g$15561$1IfLeT) (cons . g$15560$1IfLeT) (complex? . g$15559$1IfLeT) (char? . g$15558$1IfLeT) (char>? . g$15557$1IfLeT) (char>=? . g$15556$1IfLeT) (char=? . g$15555$1IfLeT) (char<? . g$15554$1IfLeT) (char<=? . g$15553$1IfLeT) (char->integer . g$15552$1IfLeT) (ceiling . g$15551$1IfLeT) (call-with-values . g$15550$1IfLeT) (call/cc . g$15549$1IfLeT) (call-with-current-continuation . g$15548$1IfLeT) (cddddr . g$7933$1IfLeT) (cdddar . g$7932$1IfLeT) (cddadr . g$7931$1IfLeT) (cddaar . g$7930$1IfLeT) (cdaddr . g$7929$1IfLeT) (cdadar . g$7928$1IfLeT) (cdaadr . g$7927$1IfLeT) (cdaaar . g$7926$1IfLeT) (cadddr . g$7925$1IfLeT) (caddar . g$7924$1IfLeT) (cadadr . g$7923$1IfLeT) (cadaar . g$7922$1IfLeT) (caaddr . g$7921$1IfLeT) (caadar . g$7920$1IfLeT) (caaadr . g$7919$1IfLeT) (caaaar . g$7918$1IfLeT) (cdddr . g$7917$1IfLeT) (cddar . g$7916$1IfLeT) (cdadr . g$7915$1IfLeT) (cdaar . g$7914$1IfLeT) (caddr . g$7913$1IfLeT) (cadar . g$7912$1IfLeT) (caadr . g$7911$1IfLeT) (caaar . g$7910$1IfLeT) (cddr . g$7909$1IfLeT) (cdar . g$7908$1IfLeT) (cadr . g$7907$1IfLeT) (caar . g$7906$1IfLeT) (cdr . g$15547$1IfLeT) (car . g$15546$1IfLeT) (boolean? . g$15545$1IfLeT) (boolean=? . g$15544$1IfLeT) (atan . g$15543$1IfLeT) (assertion-violation . g$15542$1IfLeT) (asin . g$15541$1IfLeT) (apply . g$15540$1IfLeT) (append . g$15539$1IfLeT) (angle . g$15538$1IfLeT) (acos . g$15537$1IfLeT) (abs . g$15536$1IfLeT) (/ . g$15535$1IfLeT) (* . g$15534$1IfLeT) (- . g$15533$1IfLeT) (+ . g$15532$1IfLeT) (>= . g$15531$1IfLeT) (> . g$15530$1IfLeT) (= . g$15529$1IfLeT) (<= . g$15528$1IfLeT) (< . g$15527$1IfLeT) (vector-append . g$15525$1IfLeT) (vector-filter . g$15524$1IfLeT) (vector-reverse! . g$15523$1IfLeT) (vector-contains? . g$15522$1IfLeT) (vector-index-of . g$15521$1IfLeT) (vector-copy . g$15520$1IfLeT) (vector-binary-search . g$15519$1IfLeT) (get-output-string . g$15518$1IfLeT) (open-output-string . g$15517$1IfLeT) (open-input-string . g$15516$1IfLeT) (string-format . g$15515$1IfLeT) (make-traced-procedure . g$15514$1IfLeT) (pmap . g$15513$1IfLeT) (time-it . g$15512$1IfLeT) (make-parameter . g$8981$1IfLeT) (library-locator . g$15511$1IfLeT) (get-library-paths . g$15510$1IfLeT) (environment-symbols . g$9783$1IfLeT) (interaction-environment-symbols . g$9782$1IfLeT) (library-path . g$9141$1IfLeT) (library-extensions . g$9142$1IfLeT) (installed-libraries . g$9162$1IfLeT) (expand . g$9788$1IfLeT) (&no-nans . g$15509$1IfLeT) (&no-infinities . g$15508$1IfLeT) (&i/o-encoding . g$15507$1IfLeT) (&i/o-decoding . g$15506$1IfLeT) (&i/o-port . g$15505$1IfLeT) (&i/o-file-does-not-exist . g$15504$1IfLeT) (&i/o-file-already-exists . g$15503$1IfLeT) (&i/o-file-is-read-only . g$15502$1IfLeT) (&i/o-file-protection . g$15501$1IfLeT) (&i/o-filename . g$15500$1IfLeT) (&i/o-invalid-position . g$15499$1IfLeT) (&i/o-write . g$15498$1IfLeT) (&i/o-read . g$15497$1IfLeT) (&i/o . g$15496$1IfLeT) (&non-continuable . g$15495$1IfLeT) (&undefined . g$15494$1IfLeT) (&syntax . g$15493$1IfLeT) (&lexical . g$15492$1IfLeT) (&implementation-restriction . g$15491$1IfLeT) (&who . g$15489$1IfLeT) (&irritants . g$15488$1IfLeT) (&assertion . g$15487$1IfLeT) (&violation . g$15486$1IfLeT) (&error . g$15485$1IfLeT) (&serious . g$15484$1IfLeT) (&warning . g$15483$1IfLeT) (&message . g$15482$1IfLeT) (&condition . g$15481$1IfLeT) (define-condition-type . g$15480$1IfLeT) (define-enumeration . g$15479$1IfLeT) (define-record-type . g$15478$1IfLeT) (parent-rtd . g$15477$1IfLeT) (nongenerative . g$15476$1IfLeT) (opaque . g$15475$1IfLeT) (sealed . g$15474$1IfLeT) (protocol . g$15473$1IfLeT) (parent . g$15472$1IfLeT) (immutable . g$15471$1IfLeT) (mutable . g$15470$1IfLeT) (fields . g$15469$1IfLeT) (error-handling-mode . g$15468$1IfLeT) (file-options . g$15467$1IfLeT) (buffer-mode . g$15466$1IfLeT) (eol-style . g$15465$1IfLeT) (guard . g$15464$1IfLeT) (trace-define-syntax . g$15463$1IfLeT) (trace-define . g$15462$1IfLeT) (trace-lambda . g$15461$1IfLeT) (unsyntax-splicing . g$15460$1IfLeT) (unsyntax . g$15459$1IfLeT) (unquote-splicing . g$15458$1IfLeT) (unquote . g$15457$1IfLeT) (_ . g$15456$1IfLeT) (else . g$15455$1IfLeT) (=> . g$15454$1IfLeT) (... . g$15453$1IfLeT) (assert . g$15452$1IfLeT) (endianness . g$15451$1IfLeT) (delay . g$15450$1IfLeT) (time . g$15449$1IfLeT) (or . g$15448$1IfLeT) (and . g$15447$1IfLeT) (do . g$15446$1IfLeT) (cond . g$15445$1IfLeT) (let* . g$15444$1IfLeT) (let . g$15443$1IfLeT) (identifier-syntax . g$15442$1IfLeT) (with-syntax . g$15441$1IfLeT) (quasisyntax . g$15440$1IfLeT) (quasiquote . g$15439$1IfLeT) (syntax-rules . g$15438$1IfLeT) (include-into . g$15437$1IfLeT) (include . g$15436$1IfLeT) (let-values . g$15434$1IfLeT) (let*-values . g$15433$1IfLeT) (record-constructor-descriptor . g$15432$1IfLeT) (record-type-descriptor . g$15431$1IfLeT) (fluid-let-syntax . g$15430$1IfLeT) (case . g$15429$1IfLeT) (parameterize . g$15428$1IfLeT) (unless . g$15427$1IfLeT) (when . g$15426$1IfLeT) (if . g$15425$1IfLeT) (letrec* . g$15424$1IfLeT) (letrec . g$15423$1IfLeT) (case-lambda . g$15421$1IfLeT) (lambda . g$15420$1IfLeT) (syntax . g$15419$1IfLeT) (syntax-case . g$15418$1IfLeT) (quote . g$15417$1IfLeT) (letrec-syntax . g$15415$1IfLeT) (let-syntax . g$15414$1IfLeT) (set! . g$15413$1IfLeT) (import . g$15412$1IfLeT) (library . g$15411$1IfLeT) (begin . g$15410$1IfLeT) (module . g$15409$1IfLeT) (define-syntax . g$15408$1IfLeT) (define . g$15407$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16062$1IfLeT '(ironscheme library) '() '() '() '() '((get-library-paths . g$15510$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16063$1IfLeT '(ironscheme reader) '() '() '() '() '((annotation-stripped . g$16003$1IfLeT) (annotation-source . g$16002$1IfLeT) (annotation-expression . g$16001$1IfLeT) (annotation? . g$16000$1IfLeT) (read-annotated . g$15999$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16064$1IfLeT '(ironscheme serialization) '() '() '() '() '((load-serialized-library . g$15970$1IfLeT) (serialize-library . g$15969$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16065$1IfLeT '(ironscheme records printer) '() '() '() '() '((make-record-printer . g$15526$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16066$1IfLeT '(ironscheme clr internal) '() '() '() '() '((define-clr-class-internal . g$15987$1IfLeT) (clr-field-set!-internal . g$15986$1IfLeT) (clr-field-get-internal . g$15985$1IfLeT) (clr-cast-internal . g$15984$1IfLeT) (clr-call-internal . g$15983$1IfLeT) (clr-new-internal . g$15982$1IfLeT) (clr-new-array-internal . g$15981$1IfLeT) (clr-is-internal . g$15980$1IfLeT) (clr-reference-internal . g$15979$1IfLeT) (clr-using-internal . g$15978$1IfLeT) (clr-clear-usings-internal . g$15977$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16067$1IfLeT '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$15458$1IfLeT) (unquote . g$15457$1IfLeT) (delay . g$15450$1IfLeT) (or . g$15448$1IfLeT) (and . g$15447$1IfLeT) (do . g$15446$1IfLeT) (cond . g$15445$1IfLeT) (let* . g$15444$1IfLeT) (let . g$15443$1IfLeT) (quasiquote . g$15439$1IfLeT) (syntax-rules . g$15438$1IfLeT) (case . g$15429$1IfLeT) (if . g$15425$1IfLeT) (letrec . g$15423$1IfLeT) (lambda . g$15420$1IfLeT) (quote . g$15417$1IfLeT) (letrec-syntax . g$15415$1IfLeT) (let-syntax . g$15414$1IfLeT) (set! . g$15413$1IfLeT) (begin . g$15410$1IfLeT) (define-syntax . g$15408$1IfLeT) (define . g$15407$1IfLeT)) '() values values '#f '#f '#f '#f) (g$install-library$9652$1IfLeT 'g$16068$1IfLeT '(psyntax scheme-report-environment-5) '() '() '() '() '((interaction-environment . g$9808$1IfLeT) (char-ready? . g$15968$1IfLeT) (string-ci>? . g$15959$1IfLeT) (string-ci>=? . g$15958$1IfLeT) (string-ci=? . g$15957$1IfLeT) (string-ci<? . g$15956$1IfLeT) (string-ci<=? . g$15955$1IfLeT) (char-whitespace? . g$15954$1IfLeT) (char-upper-case? . g$15953$1IfLeT) (char-numeric? . g$15951$1IfLeT) (char-lower-case? . g$15950$1IfLeT) (char-upcase . g$15948$1IfLeT) (char-downcase . g$15945$1IfLeT) (char-ci>? . g$15944$1IfLeT) (char-ci>=? . g$15943$1IfLeT) (char-ci=? . g$15942$1IfLeT) (char-ci<? . g$15941$1IfLeT) (char-ci<=? . g$15940$1IfLeT) (char-alphabetic? . g$15939$1IfLeT) (call-with-output-file . g$15909$1IfLeT) (call-with-input-file . g$15908$1IfLeT) (write-char . g$15907$1IfLeT) (write . g$15906$1IfLeT) (with-output-to-file . g$15905$1IfLeT) (with-input-from-file . g$15904$1IfLeT) (read-char . g$15903$1IfLeT) (read . g$15902$1IfLeT) (peek-char . g$15901$1IfLeT) (open-output-file . g$15900$1IfLeT) (open-input-file . g$15899$1IfLeT) (newline . g$15898$1IfLeT) (display . g$15897$1IfLeT) (close-output-port . g$15896$1IfLeT) (close-input-port . g$15895$1IfLeT) (eof-object? . g$15894$1IfLeT) (eof-object . g$15893$1IfLeT) (current-error-port . g$15892$1IfLeT) (current-output-port . g$15891$1IfLeT) (current-input-port . g$15890$1IfLeT) (output-port? . g$15889$1IfLeT) (input-port? . g$15888$1IfLeT) (scheme-report-environment . g$9787$1IfLeT) (quotient . g$8610$1IfLeT) (null-environment . g$9786$1IfLeT) (remainder . g$8611$1IfLeT) (modulo . g$8612$1IfLeT) (inexact->exact . g$15825$1IfLeT) (force . g$15824$1IfLeT) (exact->inexact . g$15823$1IfLeT) (string-fill! . g$15820$1IfLeT) (string-set! . g$15819$1IfLeT) (set-cdr! . g$15818$1IfLeT) (set-car! . g$15817$1IfLeT) (memv . g$15814$1IfLeT) (memq . g$15813$1IfLeT) (member . g$15811$1IfLeT) (assv . g$15808$1IfLeT) (assq . g$15807$1IfLeT) (assoc . g$15805$1IfLeT) (eval . g$9789$1IfLeT) (zero? . g$15659$1IfLeT) (vector? . g$15658$1IfLeT) (vector-set! . g$15657$1IfLeT) (vector-ref . g$15656$1IfLeT) (vector-length . g$15654$1IfLeT) (vector-fill! . g$15652$1IfLeT) (vector->list . g$15651$1IfLeT) (vector . g$15650$1IfLeT) (values . g$15649$1IfLeT) (truncate . g$15648$1IfLeT) (tan . g$15647$1IfLeT) (symbol? . g$15646$1IfLeT) (symbol->string . g$15644$1IfLeT) (substring . g$15643$1IfLeT) (string? . g$15642$1IfLeT) (string>? . g$15641$1IfLeT) (string>=? . g$15640$1IfLeT) (string=? . g$15639$1IfLeT) (string<? . g$15638$1IfLeT) (string<=? . g$15637$1IfLeT) (string-ref . g$15636$1IfLeT) (string-length . g$15635$1IfLeT) (string-copy . g$15633$1IfLeT) (string-append . g$15632$1IfLeT) (string->symbol . g$15631$1IfLeT) (string->number . g$15630$1IfLeT) (string->list . g$15629$1IfLeT) (string . g$15628$1IfLeT) (sqrt . g$15627$1IfLeT) (sin . g$15626$1IfLeT) (round . g$15625$1IfLeT) (reverse . g$15624$1IfLeT) (real? . g$15623$1IfLeT) (real-part . g$15621$1IfLeT) (rationalize . g$7934$1IfLeT) (rational? . g$15620$1IfLeT) (procedure? . g$15618$1IfLeT) (positive? . g$15617$1IfLeT) (pair? . g$15616$1IfLeT) (odd? . g$15615$1IfLeT) (numerator . g$15614$1IfLeT) (number? . g$15613$1IfLeT) (number->string . g$15612$1IfLeT) (null? . g$15611$1IfLeT) (not . g$15610$1IfLeT) (negative? . g$15609$1IfLeT) (min . g$15607$1IfLeT) (max . g$15606$1IfLeT) (map . g$15605$1IfLeT) (make-vector . g$15604$1IfLeT) (make-string . g$15603$1IfLeT) (make-rectangular . g$15602$1IfLeT) (make-polar . g$15601$1IfLeT) (magnitude . g$15600$1IfLeT) (log . g$15599$1IfLeT) (list? . g$15598$1IfLeT) (list-tail . g$15597$1IfLeT) (list-ref . g$15596$1IfLeT) (list->vector . g$15595$1IfLeT) (list->string . g$15594$1IfLeT) (list . g$15593$1IfLeT) (length . g$15592$1IfLeT) (lcm . g$15591$1IfLeT) (integer? . g$15590$1IfLeT) (integer->char . g$15588$1IfLeT) (inexact? . g$15586$1IfLeT) (imag-part . g$15584$1IfLeT) (gcd . g$15583$1IfLeT) (for-each . g$15582$1IfLeT) (floor . g$15581$1IfLeT) (expt . g$15579$1IfLeT) (exp . g$15578$1IfLeT) (exact? . g$15577$1IfLeT) (even? . g$15574$1IfLeT) (eqv? . g$15572$1IfLeT) (equal? . g$15571$1IfLeT) (eq? . g$15570$1IfLeT) (dynamic-wind . g$15569$1IfLeT) (denominator . g$15562$1IfLeT) (cos . g$15561$1IfLeT) (cons . g$15560$1IfLeT) (complex? . g$15559$1IfLeT) (char? . g$15558$1IfLeT) (char>? . g$15557$1IfLeT) (char>=? . g$15556$1IfLeT) (char=? . g$15555$1IfLeT) (char<? . g$15554$1IfLeT) (char<=? . g$15553$1IfLeT) (char->integer . g$15552$1IfLeT) (ceiling . g$15551$1IfLeT) (call-with-values . g$15550$1IfLeT) (call-with-current-continuation . g$15548$1IfLeT) (cddddr . g$7933$1IfLeT) (cdddar . g$7932$1IfLeT) (cddadr . g$7931$1IfLeT) (cddaar . g$7930$1IfLeT) (cdaddr . g$7929$1IfLeT) (cdadar . g$7928$1IfLeT) (cdaadr . g$7927$1IfLeT) (cdaaar . g$7926$1IfLeT) (cadddr . g$7925$1IfLeT) (caddar . g$7924$1IfLeT) (cadadr . g$7923$1IfLeT) (cadaar . g$7922$1IfLeT) (caaddr . g$7921$1IfLeT) (caadar . g$7920$1IfLeT) (caaadr . g$7919$1IfLeT) (caaaar . g$7918$1IfLeT) (cdddr . g$7917$1IfLeT) (cddar . g$7916$1IfLeT) (cdadr . g$7915$1IfLeT) (cdaar . g$7914$1IfLeT) (caddr . g$7913$1IfLeT) (cadar . g$7912$1IfLeT) (caadr . g$7911$1IfLeT) (caaar . g$7910$1IfLeT) (cddr . g$7909$1IfLeT) (cdar . g$7908$1IfLeT) (cadr . g$7907$1IfLeT) (caar . g$7906$1IfLeT) (cdr . g$15547$1IfLeT) (car . g$15546$1IfLeT) (boolean? . g$15545$1IfLeT) (atan . g$15543$1IfLeT) (asin . g$15541$1IfLeT) (apply . g$15540$1IfLeT) (append . g$15539$1IfLeT) (angle . g$15538$1IfLeT) (acos . g$15537$1IfLeT) (abs . g$15536$1IfLeT) (/ . g$15535$1IfLeT) (* . g$15534$1IfLeT) (- . g$15533$1IfLeT) (+ . g$15532$1IfLeT) (>= . g$15531$1IfLeT) (> . g$15530$1IfLeT) (= . g$15529$1IfLeT) (<= . g$15528$1IfLeT) (< . g$15527$1IfLeT) (unquote-splicing . g$15458$1IfLeT) (unquote . g$15457$1IfLeT) (else . g$15455$1IfLeT) (=> . g$15454$1IfLeT) (... . g$15453$1IfLeT) (delay . g$15450$1IfLeT) (or . g$15448$1IfLeT) (and . g$15447$1IfLeT) (do . g$15446$1IfLeT) (cond . g$15445$1IfLeT) (let* . g$15444$1IfLeT) (let . g$15443$1IfLeT) (quasiquote . g$15439$1IfLeT) (syntax-rules . g$15438$1IfLeT) (case . g$15429$1IfLeT) (if . g$15425$1IfLeT) (letrec . g$15423$1IfLeT) (lambda . g$15420$1IfLeT) (quote . g$15417$1IfLeT) (letrec-syntax . g$15415$1IfLeT) (let-syntax . g$15414$1IfLeT) (set! . g$15413$1IfLeT) (begin . g$15410$1IfLeT) (define-syntax . g$15408$1IfLeT) (define . g$15407$1IfLeT)) '() values values '#f '#f '#f '#f) (g$install-library$9652$1IfLeT 'g$16069$1IfLeT '(rnrs) '(6) '() '() '() '((string-upcase . g$15967$1IfLeT) (string-titlecase . g$15966$1IfLeT) (string-normalize-nfkd . g$15965$1IfLeT) (string-normalize-nfkc . g$15964$1IfLeT) (string-normalize-nfd . g$15963$1IfLeT) (string-normalize-nfc . g$15962$1IfLeT) (string-foldcase . g$15961$1IfLeT) (string-downcase . g$15960$1IfLeT) (string-ci>? . g$15959$1IfLeT) (string-ci>=? . g$15958$1IfLeT) (string-ci=? . g$15957$1IfLeT) (string-ci<? . g$15956$1IfLeT) (string-ci<=? . g$15955$1IfLeT) (char-whitespace? . g$15954$1IfLeT) (char-upper-case? . g$15953$1IfLeT) (char-title-case? . g$15952$1IfLeT) (char-numeric? . g$15951$1IfLeT) (char-lower-case? . g$15950$1IfLeT) (char-general-category . g$15949$1IfLeT) (char-upcase . g$15948$1IfLeT) (char-titlecase . g$15947$1IfLeT) (char-foldcase . g$15946$1IfLeT) (char-downcase . g$15945$1IfLeT) (char-ci>? . g$15944$1IfLeT) (char-ci>=? . g$15943$1IfLeT) (char-ci=? . g$15942$1IfLeT) (char-ci<? . g$15941$1IfLeT) (char-ci<=? . g$15940$1IfLeT) (char-alphabetic? . g$15939$1IfLeT) (make-variable-transformer . g$9511$1IfLeT) (identifier? . g$9804$1IfLeT) (generate-temporaries . g$9796$1IfLeT) (free-identifier=? . g$9797$1IfLeT) (syntax->datum . g$9806$1IfLeT) (datum->syntax . g$9805$1IfLeT) (bound-identifier=? . g$9798$1IfLeT) (record-type-descriptor? . g$15938$1IfLeT) (record-predicate . g$15937$1IfLeT) (record-mutator . g$15936$1IfLeT) (record-constructor . g$15935$1IfLeT) (record-accessor . g$15934$1IfLeT) (make-record-type-descriptor . g$15933$1IfLeT) (make-record-constructor-descriptor . g$15932$1IfLeT) (record? . g$15931$1IfLeT) (record-type-uid . g$15930$1IfLeT) (record-type-sealed? . g$15929$1IfLeT) (record-type-parent . g$15928$1IfLeT) (record-type-opaque? . g$15927$1IfLeT) (record-type-name . g$15926$1IfLeT) (record-type-generative? . g$15925$1IfLeT) (record-type-field-names . g$15924$1IfLeT) (record-rtd . g$15923$1IfLeT) (record-field-mutable? . g$15922$1IfLeT) (delete-file . g$8194$1IfLeT) (file-exists? . g$8193$1IfLeT) (vector-sort! . g$15921$1IfLeT) (vector-sort . g$15920$1IfLeT) (list-sort . g$8623$1IfLeT) (symbol-hash . g$15919$1IfLeT) (string-ci-hash . g$15918$1IfLeT) (string-hash . g$15917$1IfLeT) (equal-hash . g$15916$1IfLeT) (hashtable-equivalence-function . g$8167$1IfLeT) (make-hashtable . g$15915$1IfLeT) (hashtable-hash-function . g$8168$1IfLeT) (make-eqv-hashtable . g$8159$1IfLeT) (make-eq-hashtable . g$8158$1IfLeT) (hashtable? . g$15914$1IfLeT) (hashtable-update! . g$8165$1IfLeT) (hashtable-size . g$8160$1IfLeT) (hashtable-set! . g$8162$1IfLeT) (hashtable-ref . g$8161$1IfLeT) (hashtable-mutable? . g$15913$1IfLeT) (hashtable-keys . g$15912$1IfLeT) (hashtable-entries . g$15911$1IfLeT) (hashtable-delete! . g$8163$1IfLeT) (hashtable-copy . g$15910$1IfLeT) (hashtable-contains? . g$8164$1IfLeT) (hashtable-clear! . g$8166$1IfLeT) (call-with-output-file . g$15909$1IfLeT) (call-with-input-file . g$15908$1IfLeT) (write-char . g$15907$1IfLeT) (write . g$15906$1IfLeT) (with-output-to-file . g$15905$1IfLeT) (with-input-from-file . g$15904$1IfLeT) (read-char . g$15903$1IfLeT) (read . g$15902$1IfLeT) (peek-char . g$15901$1IfLeT) (open-output-file . g$15900$1IfLeT) (open-input-file . g$15899$1IfLeT) (newline . g$15898$1IfLeT) (display . g$15897$1IfLeT) (close-output-port . g$15896$1IfLeT) (close-input-port . g$15895$1IfLeT) (eof-object? . g$15894$1IfLeT) (eof-object . g$15893$1IfLeT) (current-error-port . g$15892$1IfLeT) (current-output-port . g$15891$1IfLeT) (current-input-port . g$15890$1IfLeT) (output-port? . g$15889$1IfLeT) (input-port? . g$15888$1IfLeT) (utf-8-codec . g$15887$1IfLeT) (utf-16-codec . g$15886$1IfLeT) (transcoder-error-handling-mode . g$15885$1IfLeT) (transcoder-eol-style . g$15884$1IfLeT) (transcoder-codec . g$15883$1IfLeT) (transcoded-port . g$15882$1IfLeT) (textual-port? . g$15881$1IfLeT) (string->bytevector . g$15880$1IfLeT) (standard-output-port . g$15879$1IfLeT) (standard-input-port . g$15878$1IfLeT) (standard-error-port . g$15877$1IfLeT) (set-port-position! . g$15876$1IfLeT) (put-u8 . g$15875$1IfLeT) (put-string . g$15874$1IfLeT) (put-datum . g$15873$1IfLeT) (put-char . g$15872$1IfLeT) (put-bytevector . g$15871$1IfLeT) (port? . g$15870$1IfLeT) (port-transcoder . g$15869$1IfLeT) (port-position . g$15868$1IfLeT) (port-has-set-port-position!? . g$15867$1IfLeT) (port-has-port-position? . g$15866$1IfLeT) (port-eof? . g$15865$1IfLeT) (output-port-buffer-mode . g$15864$1IfLeT) (open-string-output-port . g$8950$1IfLeT) (open-string-input-port . g$15863$1IfLeT) (open-file-output-port . g$15862$1IfLeT) (open-file-input/output-port . g$15861$1IfLeT) (open-file-input-port . g$15860$1IfLeT) (open-bytevector-output-port . g$15859$1IfLeT) (open-bytevector-input-port . g$15858$1IfLeT) (native-transcoder . g$15857$1IfLeT) (native-eol-style . g$15856$1IfLeT) (make-transcoder . g$15855$1IfLeT) (latin-1-codec . g$15854$1IfLeT) (make-i/o-write-error . g$8825$1IfLeT) (make-i/o-read-error . g$8813$1IfLeT) (make-i/o-port-error . g$8916$1IfLeT) (make-i/o-invalid-position-error . g$8838$1IfLeT) (make-i/o-filename-error . g$8853$1IfLeT) (make-i/o-file-protection-error . g$8867$1IfLeT) (make-i/o-file-is-read-only-error . g$8879$1IfLeT) (make-i/o-file-does-not-exist-error . g$8903$1IfLeT) (make-i/o-file-already-exists-error . g$8891$1IfLeT) (make-i/o-error . g$8801$1IfLeT) (make-i/o-encoding-error . g$8943$1IfLeT) (make-i/o-decoding-error . g$8930$1IfLeT) (make-custom-textual-output-port . g$15853$1IfLeT) (make-custom-textual-input/output-port . g$15852$1IfLeT) (make-custom-textual-input-port . g$15851$1IfLeT) (make-custom-binary-output-port . g$15850$1IfLeT) (make-custom-binary-input/output-port . g$15849$1IfLeT) (make-custom-binary-input-port . g$15848$1IfLeT) (make-bytevector . g$15847$1IfLeT) (lookahead-u8 . g$15846$1IfLeT) (lookahead-char . g$15845$1IfLeT) (i/o-write-error? . g$8826$1IfLeT) (i/o-read-error? . g$8814$1IfLeT) (i/o-port-error? . g$8918$1IfLeT) (i/o-invalid-position-error? . g$8840$1IfLeT) (i/o-filename-error? . g$8855$1IfLeT) (i/o-file-protection-error? . g$8868$1IfLeT) (i/o-file-is-read-only-error? . g$8880$1IfLeT) (i/o-file-does-not-exist-error? . g$8904$1IfLeT) (i/o-file-already-exists-error? . g$8892$1IfLeT) (i/o-error? . g$8802$1IfLeT) (i/o-error-port . g$8919$1IfLeT) (i/o-error-filename . g$8856$1IfLeT) (i/o-encoding-error? . g$8945$1IfLeT) (i/o-encoding-error-char . g$8946$1IfLeT) (i/o-decoding-error? . g$8931$1IfLeT) (get-u8 . g$15844$1IfLeT) (get-string-n! . g$15843$1IfLeT) (get-string-n . g$15842$1IfLeT) (get-string-all . g$15841$1IfLeT) (get-line . g$15840$1IfLeT) (get-datum . g$15839$1IfLeT) (get-char . g$15838$1IfLeT) (get-bytevector-some . g$15837$1IfLeT) (get-bytevector-n! . g$15836$1IfLeT) (get-bytevector-n . g$15835$1IfLeT) (get-bytevector-all . g$15834$1IfLeT) (flush-output-port . g$15833$1IfLeT) (close-port . g$15832$1IfLeT) (call-with-string-output-port . g$15831$1IfLeT) (call-with-port . g$15830$1IfLeT) (call-with-bytevector-output-port . g$15829$1IfLeT) (bytevector->string . g$15828$1IfLeT) (buffer-mode? . g$15827$1IfLeT) (binary-port? . g$15826$1IfLeT) (exit . g$15822$1IfLeT) (command-line . g$15821$1IfLeT) (remove . g$8265$1IfLeT) (remv . g$8266$1IfLeT) (remp . g$15816$1IfLeT) (remq . g$8267$1IfLeT) (partition . g$15815$1IfLeT) (memv . g$15814$1IfLeT) (memq . g$15813$1IfLeT) (memp . g$15812$1IfLeT) (member . g$15811$1IfLeT) (exists . g$8261$1IfLeT) (for-all . g$8260$1IfLeT) (fold-right . g$8264$1IfLeT) (fold-left . g$8263$1IfLeT) (find . g$15810$1IfLeT) (filter . g$15809$1IfLeT) (cons* . g$8262$1IfLeT) (assv . g$15808$1IfLeT) (assq . g$15807$1IfLeT) (assp . g$15806$1IfLeT) (assoc . g$15805$1IfLeT) (with-exception-handler . g$15804$1IfLeT) (raise-continuable . g$15803$1IfLeT) (raise . g$15802$1IfLeT) (make-enumeration . g$15801$1IfLeT) (enum-set=? . g$15800$1IfLeT) (enum-set-universe . g$15799$1IfLeT) (enum-set-union . g$15798$1IfLeT) (enum-set-subset? . g$15797$1IfLeT) (enum-set-projection . g$15796$1IfLeT) (enum-set-member? . g$15795$1IfLeT) (enum-set-intersection . g$15794$1IfLeT) (enum-set-indexer . g$15793$1IfLeT) (enum-set-difference . g$15792$1IfLeT) (enum-set-constructor . g$15791$1IfLeT) (enum-set-complement . g$15790$1IfLeT) (enum-set->list . g$15789$1IfLeT) (who-condition? . g$8537$1IfLeT) (warning? . g$8460$1IfLeT) (violation? . g$8496$1IfLeT) (undefined-violation? . g$8604$1IfLeT) (syntax-violation? . g$8590$1IfLeT) (syntax-violation-subform . g$8592$1IfLeT) (syntax-violation-form . g$8591$1IfLeT) (syntax-violation . g$9803$1IfLeT) (simple-conditions . g$15788$1IfLeT) (serious-condition? . g$8472$1IfLeT) (non-continuable-violation? . g$8550$1IfLeT) (message-condition? . g$8447$1IfLeT) (make-who-condition . g$8535$1IfLeT) (make-warning . g$8459$1IfLeT) (make-violation . g$8495$1IfLeT) (make-undefined-violation . g$8603$1IfLeT) (make-syntax-violation . g$8587$1IfLeT) (make-serious-condition . g$8471$1IfLeT) (make-non-continuable-violation . g$8549$1IfLeT) (make-message-condition . g$8445$1IfLeT) (make-lexical-violation . g$8573$1IfLeT) (make-irritants-condition . g$8520$1IfLeT) (make-implementation-restriction-violation . g$8561$1IfLeT) (make-error . g$8483$1IfLeT) (make-assertion-violation . g$8507$1IfLeT) (lexical-violation? . g$8574$1IfLeT) (irritants-condition? . g$8522$1IfLeT) (implementation-restriction-violation? . g$8562$1IfLeT) (error? . g$8484$1IfLeT) (condition-who . g$8538$1IfLeT) (condition-predicate . g$15787$1IfLeT) (condition-message . g$8448$1IfLeT) (condition-irritants . g$8523$1IfLeT) (condition-accessor . g$15786$1IfLeT) (condition . g$15785$1IfLeT) (assertion-violation? . g$8508$1IfLeT) (condition? . g$15784$1IfLeT) (utf32->string . g$15783$1IfLeT) (utf16->string . g$15782$1IfLeT) (utf8->string . g$15781$1IfLeT) (uint-list->bytevector . g$15780$1IfLeT) (u8-list->bytevector . g$15779$1IfLeT) (string->utf8 . g$15778$1IfLeT) (string->utf32 . g$15777$1IfLeT) (string->utf16 . g$15776$1IfLeT) (sint-list->bytevector . g$15775$1IfLeT) (native-endianness . g$8306$1IfLeT) (bytevector? . g$15774$1IfLeT) (bytevector=? . g$15773$1IfLeT) (bytevector-uint-set! . g$15772$1IfLeT) (bytevector-uint-ref . g$15771$1IfLeT) (bytevector-u8-set! . g$15770$1IfLeT) (bytevector-u8-ref . g$15769$1IfLeT) (bytevector-u64-set! . g$8327$1IfLeT) (bytevector-u64-ref . g$8323$1IfLeT) (bytevector-u64-native-set! . g$8329$1IfLeT) (bytevector-u64-native-ref . g$8325$1IfLeT) (bytevector-u32-set! . g$8319$1IfLeT) (bytevector-u32-ref . g$8315$1IfLeT) (bytevector-u32-native-set! . g$8321$1IfLeT) (bytevector-u32-native-ref . g$8317$1IfLeT) (bytevector-u16-set! . g$8311$1IfLeT) (bytevector-u16-ref . g$8307$1IfLeT) (bytevector-u16-native-set! . g$8313$1IfLeT) (bytevector-u16-native-ref . g$8309$1IfLeT) (bytevector-sint-set! . g$15768$1IfLeT) (bytevector-sint-ref . g$15767$1IfLeT) (bytevector-s8-set! . g$15766$1IfLeT) (bytevector-s8-ref . g$15765$1IfLeT) (bytevector-s64-set! . g$8328$1IfLeT) (bytevector-s64-ref . g$8324$1IfLeT) (bytevector-s64-native-set! . g$8330$1IfLeT) (bytevector-s64-native-ref . g$8326$1IfLeT) (bytevector-s32-set! . g$8320$1IfLeT) (bytevector-s32-ref . g$8316$1IfLeT) (bytevector-s32-native-set! . g$8322$1IfLeT) (bytevector-s32-native-ref . g$8318$1IfLeT) (bytevector-s16-set! . g$8312$1IfLeT) (bytevector-s16-ref . g$8308$1IfLeT) (bytevector-s16-native-set! . g$8314$1IfLeT) (bytevector-s16-native-ref . g$8310$1IfLeT) (bytevector-length . g$15764$1IfLeT) (bytevector-ieee-single-set! . g$15763$1IfLeT) (bytevector-ieee-single-ref . g$15762$1IfLeT) (bytevector-ieee-single-native-set! . g$8333$1IfLeT) (bytevector-ieee-single-native-ref . g$8331$1IfLeT) (bytevector-ieee-double-set! . g$15761$1IfLeT) (bytevector-ieee-double-ref . g$15760$1IfLeT) (bytevector-ieee-double-native-set! . g$8334$1IfLeT) (bytevector-ieee-double-native-ref . g$8332$1IfLeT) (bytevector-fill! . g$15759$1IfLeT) (bytevector-copy! . g$15758$1IfLeT) (bytevector-copy . g$15757$1IfLeT) (bytevector->uint-list . g$15756$1IfLeT) (bytevector->u8-list . g$15755$1IfLeT) (bytevector->sint-list . g$15754$1IfLeT) (no-nans-violation? . g$8789$1IfLeT) (no-infinities-violation? . g$8777$1IfLeT) (make-no-nans-violation . g$8788$1IfLeT) (make-no-infinities-violation . g$8776$1IfLeT) (real->flonum . g$15753$1IfLeT) (flzero? . g$15752$1IfLeT) (fltruncate . g$15751$1IfLeT) (fltan . g$15750$1IfLeT) (flsqrt . g$15749$1IfLeT) (flsin . g$15748$1IfLeT) (flround . g$15747$1IfLeT) (flpositive? . g$15746$1IfLeT) (flonum? . g$15745$1IfLeT) (flodd? . g$15744$1IfLeT) (flnumerator . g$15743$1IfLeT) (flnegative? . g$15742$1IfLeT) (flnan? . g$15741$1IfLeT) (flmod0 . g$15740$1IfLeT) (flmod . g$15739$1IfLeT) (flmin . g$15738$1IfLeT) (flmax . g$15737$1IfLeT) (fllog . g$15736$1IfLeT) (flinteger? . g$15735$1IfLeT) (flinfinite? . g$15734$1IfLeT) (flfloor . g$15733$1IfLeT) (flfinite? . g$15732$1IfLeT) (flexpt . g$15731$1IfLeT) (flexp . g$15730$1IfLeT) (fleven? . g$15729$1IfLeT) (fldiv0-and-mod0 . g$15728$1IfLeT) (fldiv0 . g$15727$1IfLeT) (fldiv-and-mod . g$15726$1IfLeT) (fldiv . g$15725$1IfLeT) (fldenominator . g$15724$1IfLeT) (flcos . g$15723$1IfLeT) (flceiling . g$15722$1IfLeT) (flatan . g$15721$1IfLeT) (flasin . g$15720$1IfLeT) (flacos . g$15719$1IfLeT) (flabs . g$15718$1IfLeT) (fl>? . g$15717$1IfLeT) (fl>=? . g$15716$1IfLeT) (fl=? . g$15715$1IfLeT) (fl<? . g$15714$1IfLeT) (fl<=? . g$15713$1IfLeT) (fl/ . g$15712$1IfLeT) (fl- . g$15711$1IfLeT) (fl+ . g$15710$1IfLeT) (fl* . g$15709$1IfLeT) (fixnum->flonum . g$15708$1IfLeT) (fxzero? . g$15707$1IfLeT) (fxxor . g$15706$1IfLeT) (fxrotate-bit-field . g$8724$1IfLeT) (fxreverse-bit-field . g$15705$1IfLeT) (fxpositive? . g$15704$1IfLeT) (fxodd? . g$15703$1IfLeT) (fxnot . g$15702$1IfLeT) (fxnegative? . g$15701$1IfLeT) (fxmod0 . g$15700$1IfLeT) (fxmod . g$15699$1IfLeT) (fxmin . g$15698$1IfLeT) (fxmax . g$15697$1IfLeT) (fxlength . g$15696$1IfLeT) (fxior . g$15695$1IfLeT) (fxif . g$8718$1IfLeT) (fxfirst-bit-set . g$15694$1IfLeT) (fxeven? . g$15693$1IfLeT) (fxdiv0-and-mod0 . g$15692$1IfLeT) (fxdiv0 . g$15691$1IfLeT) (fxdiv-and-mod . g$15690$1IfLeT) (fxdiv . g$15689$1IfLeT) (fxcopy-bit-field . g$8721$1IfLeT) (fxcopy-bit . g$8719$1IfLeT) (fxbit-set? . g$15688$1IfLeT) (fxbit-field . g$8720$1IfLeT) (fxbit-count . g$15687$1IfLeT) (fxarithmetic-shift-right . g$8723$1IfLeT) (fxarithmetic-shift-left . g$8722$1IfLeT) (fxarithmetic-shift . g$15686$1IfLeT) (fxand . g$15685$1IfLeT) (fx>? . g$15684$1IfLeT) (fx>=? . g$15683$1IfLeT) (fx=? . g$15682$1IfLeT) (fx<? . g$15681$1IfLeT) (fx<=? . g$15680$1IfLeT) (fx-/carry . g$15679$1IfLeT) (fx- . g$15678$1IfLeT) (fx+/carry . g$15677$1IfLeT) (fx+ . g$15676$1IfLeT) (fx*/carry . g$15675$1IfLeT) (fx* . g$15674$1IfLeT) (greatest-fixnum . g$15673$1IfLeT) (least-fixnum . g$15672$1IfLeT) (fixnum-width . g$15671$1IfLeT) (fixnum? . g$15670$1IfLeT) (bitwise-rotate-bit-field . g$8672$1IfLeT) (bitwise-reverse-bit-field . g$8673$1IfLeT) (bitwise-length . g$15669$1IfLeT) (bitwise-if . g$8666$1IfLeT) (bitwise-first-bit-set . g$15668$1IfLeT) (bitwise-copy-bit-field . g$8669$1IfLeT) (bitwise-copy-bit . g$8667$1IfLeT) (bitwise-bit-set? . g$15667$1IfLeT) (bitwise-bit-field . g$15666$1IfLeT) (bitwise-bit-count . g$15665$1IfLeT) (bitwise-xor . g$15664$1IfLeT) (bitwise-ior . g$15663$1IfLeT) (bitwise-and . g$15662$1IfLeT) (bitwise-not . g$15661$1IfLeT) (bitwise-arithmetic-shift-right . g$8671$1IfLeT) (bitwise-arithmetic-shift-left . g$8670$1IfLeT) (bitwise-arithmetic-shift . g$15660$1IfLeT) (zero? . g$15659$1IfLeT) (vector? . g$15658$1IfLeT) (vector-set! . g$15657$1IfLeT) (vector-ref . g$15656$1IfLeT) (vector-map . g$15655$1IfLeT) (vector-length . g$15654$1IfLeT) (vector-for-each . g$15653$1IfLeT) (vector-fill! . g$15652$1IfLeT) (vector->list . g$15651$1IfLeT) (vector . g$15650$1IfLeT) (values . g$15649$1IfLeT) (truncate . g$15648$1IfLeT) (tan . g$15647$1IfLeT) (symbol? . g$15646$1IfLeT) (symbol=? . g$15645$1IfLeT) (symbol->string . g$15644$1IfLeT) (substring . g$15643$1IfLeT) (string? . g$15642$1IfLeT) (string>? . g$15641$1IfLeT) (string>=? . g$15640$1IfLeT) (string=? . g$15639$1IfLeT) (string<? . g$15638$1IfLeT) (string<=? . g$15637$1IfLeT) (string-ref . g$15636$1IfLeT) (string-length . g$15635$1IfLeT) (string-for-each . g$15634$1IfLeT) (string-copy . g$15633$1IfLeT) (string-append . g$15632$1IfLeT) (string->symbol . g$15631$1IfLeT) (string->number . g$15630$1IfLeT) (string->list . g$15629$1IfLeT) (string . g$15628$1IfLeT) (sqrt . g$15627$1IfLeT) (sin . g$15626$1IfLeT) (round . g$15625$1IfLeT) (reverse . g$15624$1IfLeT) (real? . g$15623$1IfLeT) (real-valued? . g$15622$1IfLeT) (real-part . g$15621$1IfLeT) (rationalize . g$7934$1IfLeT) (rational? . g$15620$1IfLeT) (rational-valued? . g$15619$1IfLeT) (procedure? . g$15618$1IfLeT) (positive? . g$15617$1IfLeT) (pair? . g$15616$1IfLeT) (odd? . g$15615$1IfLeT) (numerator . g$15614$1IfLeT) (number? . g$15613$1IfLeT) (number->string . g$15612$1IfLeT) (null? . g$15611$1IfLeT) (not . g$15610$1IfLeT) (negative? . g$15609$1IfLeT) (nan? . g$15608$1IfLeT) (min . g$15607$1IfLeT) (max . g$15606$1IfLeT) (map . g$15605$1IfLeT) (make-vector . g$15604$1IfLeT) (make-string . g$15603$1IfLeT) (make-rectangular . g$15602$1IfLeT) (make-polar . g$15601$1IfLeT) (magnitude . g$15600$1IfLeT) (log . g$15599$1IfLeT) (list? . g$15598$1IfLeT) (list-tail . g$15597$1IfLeT) (list-ref . g$15596$1IfLeT) (list->vector . g$15595$1IfLeT) (list->string . g$15594$1IfLeT) (list . g$15593$1IfLeT) (length . g$15592$1IfLeT) (lcm . g$15591$1IfLeT) (integer? . g$15590$1IfLeT) (integer-valued? . g$15589$1IfLeT) (integer->char . g$15588$1IfLeT) (infinite? . g$15587$1IfLeT) (inexact? . g$15586$1IfLeT) (inexact . g$15585$1IfLeT) (imag-part . g$15584$1IfLeT) (gcd . g$15583$1IfLeT) (for-each . g$15582$1IfLeT) (floor . g$15581$1IfLeT) (finite? . g$15580$1IfLeT) (expt . g$15579$1IfLeT) (exp . g$15578$1IfLeT) (exact? . g$15577$1IfLeT) (exact-integer-sqrt . g$15576$1IfLeT) (exact . g$15575$1IfLeT) (even? . g$15574$1IfLeT) (error . g$15573$1IfLeT) (eqv? . g$15572$1IfLeT) (equal? . g$15571$1IfLeT) (eq? . g$15570$1IfLeT) (dynamic-wind . g$15569$1IfLeT) (div0-and-mod0 . g$15568$1IfLeT) (mod0 . g$15567$1IfLeT) (div0 . g$15566$1IfLeT) (div-and-mod . g$15565$1IfLeT) (mod . g$15564$1IfLeT) (div . g$15563$1IfLeT) (denominator . g$15562$1IfLeT) (cos . g$15561$1IfLeT) (cons . g$15560$1IfLeT) (complex? . g$15559$1IfLeT) (char? . g$15558$1IfLeT) (char>? . g$15557$1IfLeT) (char>=? . g$15556$1IfLeT) (char=? . g$15555$1IfLeT) (char<? . g$15554$1IfLeT) (char<=? . g$15553$1IfLeT) (char->integer . g$15552$1IfLeT) (ceiling . g$15551$1IfLeT) (call-with-values . g$15550$1IfLeT) (call/cc . g$15549$1IfLeT) (call-with-current-continuation . g$15548$1IfLeT) (cddddr . g$7933$1IfLeT) (cdddar . g$7932$1IfLeT) (cddadr . g$7931$1IfLeT) (cddaar . g$7930$1IfLeT) (cdaddr . g$7929$1IfLeT) (cdadar . g$7928$1IfLeT) (cdaadr . g$7927$1IfLeT) (cdaaar . g$7926$1IfLeT) (cadddr . g$7925$1IfLeT) (caddar . g$7924$1IfLeT) (cadadr . g$7923$1IfLeT) (cadaar . g$7922$1IfLeT) (caaddr . g$7921$1IfLeT) (caadar . g$7920$1IfLeT) (caaadr . g$7919$1IfLeT) (caaaar . g$7918$1IfLeT) (cdddr . g$7917$1IfLeT) (cddar . g$7916$1IfLeT) (cdadr . g$7915$1IfLeT) (cdaar . g$7914$1IfLeT) (caddr . g$7913$1IfLeT) (cadar . g$7912$1IfLeT) (caadr . g$7911$1IfLeT) (caaar . g$7910$1IfLeT) (cddr . g$7909$1IfLeT) (cdar . g$7908$1IfLeT) (cadr . g$7907$1IfLeT) (caar . g$7906$1IfLeT) (cdr . g$15547$1IfLeT) (car . g$15546$1IfLeT) (boolean? . g$15545$1IfLeT) (boolean=? . g$15544$1IfLeT) (atan . g$15543$1IfLeT) (assertion-violation . g$15542$1IfLeT) (asin . g$15541$1IfLeT) (apply . g$15540$1IfLeT) (append . g$15539$1IfLeT) (angle . g$15538$1IfLeT) (acos . g$15537$1IfLeT) (abs . g$15536$1IfLeT) (/ . g$15535$1IfLeT) (* . g$15534$1IfLeT) (- . g$15533$1IfLeT) (+ . g$15532$1IfLeT) (>= . g$15531$1IfLeT) (> . g$15530$1IfLeT) (= . g$15529$1IfLeT) (<= . g$15528$1IfLeT) (< . g$15527$1IfLeT) (&no-nans . g$15509$1IfLeT) (&no-infinities . g$15508$1IfLeT) (&i/o-encoding . g$15507$1IfLeT) (&i/o-decoding . g$15506$1IfLeT) (&i/o-port . g$15505$1IfLeT) (&i/o-file-does-not-exist . g$15504$1IfLeT) (&i/o-file-already-exists . g$15503$1IfLeT) (&i/o-file-is-read-only . g$15502$1IfLeT) (&i/o-file-protection . g$15501$1IfLeT) (&i/o-filename . g$15500$1IfLeT) (&i/o-invalid-position . g$15499$1IfLeT) (&i/o-write . g$15498$1IfLeT) (&i/o-read . g$15497$1IfLeT) (&i/o . g$15496$1IfLeT) (&non-continuable . g$15495$1IfLeT) (&undefined . g$15494$1IfLeT) (&syntax . g$15493$1IfLeT) (&lexical . g$15492$1IfLeT) (&implementation-restriction . g$15491$1IfLeT) (&who . g$15489$1IfLeT) (&irritants . g$15488$1IfLeT) (&assertion . g$15487$1IfLeT) (&violation . g$15486$1IfLeT) (&error . g$15485$1IfLeT) (&serious . g$15484$1IfLeT) (&warning . g$15483$1IfLeT) (&message . g$15482$1IfLeT) (&condition . g$15481$1IfLeT) (define-condition-type . g$15480$1IfLeT) (define-enumeration . g$15479$1IfLeT) (define-record-type . g$15478$1IfLeT) (parent-rtd . g$15477$1IfLeT) (nongenerative . g$15476$1IfLeT) (opaque . g$15475$1IfLeT) (sealed . g$15474$1IfLeT) (protocol . g$15473$1IfLeT) (parent . g$15472$1IfLeT) (immutable . g$15471$1IfLeT) (mutable . g$15470$1IfLeT) (fields . g$15469$1IfLeT) (error-handling-mode . g$15468$1IfLeT) (file-options . g$15467$1IfLeT) (buffer-mode . g$15466$1IfLeT) (eol-style . g$15465$1IfLeT) (guard . g$15464$1IfLeT) (unsyntax-splicing . g$15460$1IfLeT) (unsyntax . g$15459$1IfLeT) (unquote-splicing . g$15458$1IfLeT) (unquote . g$15457$1IfLeT) (_ . g$15456$1IfLeT) (else . g$15455$1IfLeT) (=> . g$15454$1IfLeT) (... . g$15453$1IfLeT) (assert . g$15452$1IfLeT) (endianness . g$15451$1IfLeT) (or . g$15448$1IfLeT) (and . g$15447$1IfLeT) (do . g$15446$1IfLeT) (cond . g$15445$1IfLeT) (let* . g$15444$1IfLeT) (let . g$15443$1IfLeT) (identifier-syntax . g$15442$1IfLeT) (with-syntax . g$15441$1IfLeT) (quasisyntax . g$15440$1IfLeT) (quasiquote . g$15439$1IfLeT) (syntax-rules . g$15438$1IfLeT) (let-values . g$15434$1IfLeT) (let*-values . g$15433$1IfLeT) (record-constructor-descriptor . g$15432$1IfLeT) (record-type-descriptor . g$15431$1IfLeT) (case . g$15429$1IfLeT) (unless . g$15427$1IfLeT) (when . g$15426$1IfLeT) (if . g$15425$1IfLeT) (letrec* . g$15424$1IfLeT) (letrec . g$15423$1IfLeT) (case-lambda . g$15421$1IfLeT) (lambda . g$15420$1IfLeT) (syntax . g$15419$1IfLeT) (syntax-case . g$15418$1IfLeT) (quote . g$15417$1IfLeT) (letrec-syntax . g$15415$1IfLeT) (let-syntax . g$15414$1IfLeT) (set! . g$15413$1IfLeT) (import . g$15412$1IfLeT) (library . g$15411$1IfLeT) (begin . g$15410$1IfLeT) (define-syntax . g$15408$1IfLeT) (define . g$15407$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16070$1IfLeT '(rnrs r5rs) '(6) '() '() '() '((interaction-environment . g$9808$1IfLeT) (scheme-report-environment . g$9787$1IfLeT) (quotient . g$8610$1IfLeT) (null-environment . g$9786$1IfLeT) (remainder . g$8611$1IfLeT) (modulo . g$8612$1IfLeT) (inexact->exact . g$15825$1IfLeT) (force . g$15824$1IfLeT) (exact->inexact . g$15823$1IfLeT) (delay . g$15450$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16071$1IfLeT '(rnrs control) '(6) '() '() '() '((do . g$15446$1IfLeT) (unless . g$15427$1IfLeT) (when . g$15426$1IfLeT) (case-lambda . g$15421$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16072$1IfLeT '(rnrs eval) '(6) '() '() '() '((eval . g$9789$1IfLeT) (environment . g$9785$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16073$1IfLeT '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$15818$1IfLeT) (set-car! . g$15817$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16074$1IfLeT '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$15820$1IfLeT) (string-set! . g$15819$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16075$1IfLeT '(rnrs programs) '(6) '() '() '() '((exit . g$15822$1IfLeT) (command-line . g$15821$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16076$1IfLeT '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$9511$1IfLeT) (identifier? . g$9804$1IfLeT) (generate-temporaries . g$9796$1IfLeT) (free-identifier=? . g$9797$1IfLeT) (syntax->datum . g$9806$1IfLeT) (datum->syntax . g$9805$1IfLeT) (bound-identifier=? . g$9798$1IfLeT) (syntax-violation . g$9803$1IfLeT) (unsyntax-splicing . g$15460$1IfLeT) (unsyntax . g$15459$1IfLeT) (_ . g$15456$1IfLeT) (... . g$15453$1IfLeT) (with-syntax . g$15441$1IfLeT) (quasisyntax . g$15440$1IfLeT) (syntax . g$15419$1IfLeT) (syntax-case . g$15418$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16077$1IfLeT '(rnrs files) '(6) '() '() '() '((delete-file . g$8194$1IfLeT) (file-exists? . g$8193$1IfLeT) (make-i/o-write-error . g$8825$1IfLeT) (make-i/o-read-error . g$8813$1IfLeT) (make-i/o-port-error . g$8916$1IfLeT) (make-i/o-invalid-position-error . g$8838$1IfLeT) (make-i/o-filename-error . g$8853$1IfLeT) (make-i/o-file-protection-error . g$8867$1IfLeT) (make-i/o-file-is-read-only-error . g$8879$1IfLeT) (make-i/o-file-does-not-exist-error . g$8903$1IfLeT) (make-i/o-file-already-exists-error . g$8891$1IfLeT) (make-i/o-error . g$8801$1IfLeT) (i/o-write-error? . g$8826$1IfLeT) (i/o-read-error? . g$8814$1IfLeT) (i/o-port-error? . g$8918$1IfLeT) (i/o-invalid-position-error? . g$8840$1IfLeT) (i/o-filename-error? . g$8855$1IfLeT) (i/o-file-protection-error? . g$8868$1IfLeT) (i/o-file-is-read-only-error? . g$8880$1IfLeT) (i/o-file-does-not-exist-error? . g$8904$1IfLeT) (i/o-file-already-exists-error? . g$8892$1IfLeT) (i/o-error? . g$8802$1IfLeT) (i/o-error-port . g$8919$1IfLeT) (i/o-error-filename . g$8856$1IfLeT) (&i/o-port . g$15505$1IfLeT) (&i/o-file-does-not-exist . g$15504$1IfLeT) (&i/o-file-already-exists . g$15503$1IfLeT) (&i/o-file-is-read-only . g$15502$1IfLeT) (&i/o-file-protection . g$15501$1IfLeT) (&i/o-filename . g$15500$1IfLeT) (&i/o-invalid-position . g$15499$1IfLeT) (&i/o-write . g$15498$1IfLeT) (&i/o-read . g$15497$1IfLeT) (&i/o . g$15496$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16078$1IfLeT '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$15921$1IfLeT) (vector-sort . g$15920$1IfLeT) (list-sort . g$8623$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16079$1IfLeT '(rnrs base) '(6) '() '() '() '((zero? . g$15659$1IfLeT) (vector? . g$15658$1IfLeT) (vector-set! . g$15657$1IfLeT) (vector-ref . g$15656$1IfLeT) (vector-map . g$15655$1IfLeT) (vector-length . g$15654$1IfLeT) (vector-for-each . g$15653$1IfLeT) (vector-fill! . g$15652$1IfLeT) (vector->list . g$15651$1IfLeT) (vector . g$15650$1IfLeT) (values . g$15649$1IfLeT) (truncate . g$15648$1IfLeT) (tan . g$15647$1IfLeT) (symbol? . g$15646$1IfLeT) (symbol=? . g$15645$1IfLeT) (symbol->string . g$15644$1IfLeT) (substring . g$15643$1IfLeT) (string? . g$15642$1IfLeT) (string>? . g$15641$1IfLeT) (string>=? . g$15640$1IfLeT) (string=? . g$15639$1IfLeT) (string<? . g$15638$1IfLeT) (string<=? . g$15637$1IfLeT) (string-ref . g$15636$1IfLeT) (string-length . g$15635$1IfLeT) (string-for-each . g$15634$1IfLeT) (string-copy . g$15633$1IfLeT) (string-append . g$15632$1IfLeT) (string->symbol . g$15631$1IfLeT) (string->number . g$15630$1IfLeT) (string->list . g$15629$1IfLeT) (string . g$15628$1IfLeT) (sqrt . g$15627$1IfLeT) (sin . g$15626$1IfLeT) (round . g$15625$1IfLeT) (reverse . g$15624$1IfLeT) (real? . g$15623$1IfLeT) (real-valued? . g$15622$1IfLeT) (real-part . g$15621$1IfLeT) (rationalize . g$7934$1IfLeT) (rational? . g$15620$1IfLeT) (rational-valued? . g$15619$1IfLeT) (procedure? . g$15618$1IfLeT) (positive? . g$15617$1IfLeT) (pair? . g$15616$1IfLeT) (odd? . g$15615$1IfLeT) (numerator . g$15614$1IfLeT) (number? . g$15613$1IfLeT) (number->string . g$15612$1IfLeT) (null? . g$15611$1IfLeT) (not . g$15610$1IfLeT) (negative? . g$15609$1IfLeT) (nan? . g$15608$1IfLeT) (min . g$15607$1IfLeT) (max . g$15606$1IfLeT) (map . g$15605$1IfLeT) (make-vector . g$15604$1IfLeT) (make-string . g$15603$1IfLeT) (make-rectangular . g$15602$1IfLeT) (make-polar . g$15601$1IfLeT) (magnitude . g$15600$1IfLeT) (log . g$15599$1IfLeT) (list? . g$15598$1IfLeT) (list-tail . g$15597$1IfLeT) (list-ref . g$15596$1IfLeT) (list->vector . g$15595$1IfLeT) (list->string . g$15594$1IfLeT) (list . g$15593$1IfLeT) (length . g$15592$1IfLeT) (lcm . g$15591$1IfLeT) (integer? . g$15590$1IfLeT) (integer-valued? . g$15589$1IfLeT) (integer->char . g$15588$1IfLeT) (infinite? . g$15587$1IfLeT) (inexact? . g$15586$1IfLeT) (inexact . g$15585$1IfLeT) (imag-part . g$15584$1IfLeT) (gcd . g$15583$1IfLeT) (for-each . g$15582$1IfLeT) (floor . g$15581$1IfLeT) (finite? . g$15580$1IfLeT) (expt . g$15579$1IfLeT) (exp . g$15578$1IfLeT) (exact? . g$15577$1IfLeT) (exact-integer-sqrt . g$15576$1IfLeT) (exact . g$15575$1IfLeT) (even? . g$15574$1IfLeT) (error . g$15573$1IfLeT) (eqv? . g$15572$1IfLeT) (equal? . g$15571$1IfLeT) (eq? . g$15570$1IfLeT) (dynamic-wind . g$15569$1IfLeT) (div0-and-mod0 . g$15568$1IfLeT) (mod0 . g$15567$1IfLeT) (div0 . g$15566$1IfLeT) (div-and-mod . g$15565$1IfLeT) (mod . g$15564$1IfLeT) (div . g$15563$1IfLeT) (denominator . g$15562$1IfLeT) (cos . g$15561$1IfLeT) (cons . g$15560$1IfLeT) (complex? . g$15559$1IfLeT) (char? . g$15558$1IfLeT) (char>? . g$15557$1IfLeT) (char>=? . g$15556$1IfLeT) (char=? . g$15555$1IfLeT) (char<? . g$15554$1IfLeT) (char<=? . g$15553$1IfLeT) (char->integer . g$15552$1IfLeT) (ceiling . g$15551$1IfLeT) (call-with-values . g$15550$1IfLeT) (call/cc . g$15549$1IfLeT) (call-with-current-continuation . g$15548$1IfLeT) (cddddr . g$7933$1IfLeT) (cdddar . g$7932$1IfLeT) (cddadr . g$7931$1IfLeT) (cddaar . g$7930$1IfLeT) (cdaddr . g$7929$1IfLeT) (cdadar . g$7928$1IfLeT) (cdaadr . g$7927$1IfLeT) (cdaaar . g$7926$1IfLeT) (cadddr . g$7925$1IfLeT) (caddar . g$7924$1IfLeT) (cadadr . g$7923$1IfLeT) (cadaar . g$7922$1IfLeT) (caaddr . g$7921$1IfLeT) (caadar . g$7920$1IfLeT) (caaadr . g$7919$1IfLeT) (caaaar . g$7918$1IfLeT) (cdddr . g$7917$1IfLeT) (cddar . g$7916$1IfLeT) (cdadr . g$7915$1IfLeT) (cdaar . g$7914$1IfLeT) (caddr . g$7913$1IfLeT) (cadar . g$7912$1IfLeT) (caadr . g$7911$1IfLeT) (caaar . g$7910$1IfLeT) (cddr . g$7909$1IfLeT) (cdar . g$7908$1IfLeT) (cadr . g$7907$1IfLeT) (caar . g$7906$1IfLeT) (cdr . g$15547$1IfLeT) (car . g$15546$1IfLeT) (boolean? . g$15545$1IfLeT) (boolean=? . g$15544$1IfLeT) (atan . g$15543$1IfLeT) (assertion-violation . g$15542$1IfLeT) (asin . g$15541$1IfLeT) (apply . g$15540$1IfLeT) (append . g$15539$1IfLeT) (angle . g$15538$1IfLeT) (acos . g$15537$1IfLeT) (abs . g$15536$1IfLeT) (/ . g$15535$1IfLeT) (* . g$15534$1IfLeT) (- . g$15533$1IfLeT) (+ . g$15532$1IfLeT) (>= . g$15531$1IfLeT) (> . g$15530$1IfLeT) (= . g$15529$1IfLeT) (<= . g$15528$1IfLeT) (< . g$15527$1IfLeT) (unquote-splicing . g$15458$1IfLeT) (unquote . g$15457$1IfLeT) (_ . g$15456$1IfLeT) (else . g$15455$1IfLeT) (=> . g$15454$1IfLeT) (... . g$15453$1IfLeT) (assert . g$15452$1IfLeT) (or . g$15448$1IfLeT) (and . g$15447$1IfLeT) (cond . g$15445$1IfLeT) (let* . g$15444$1IfLeT) (let . g$15443$1IfLeT) (identifier-syntax . g$15442$1IfLeT) (quasiquote . g$15439$1IfLeT) (syntax-rules . g$15438$1IfLeT) (let-values . g$15434$1IfLeT) (let*-values . g$15433$1IfLeT) (case . g$15429$1IfLeT) (if . g$15425$1IfLeT) (letrec* . g$15424$1IfLeT) (letrec . g$15423$1IfLeT) (lambda . g$15420$1IfLeT) (quote . g$15417$1IfLeT) (letrec-syntax . g$15415$1IfLeT) (let-syntax . g$15414$1IfLeT) (set! . g$15413$1IfLeT) (begin . g$15410$1IfLeT) (define-syntax . g$15408$1IfLeT) (define . g$15407$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16080$1IfLeT '(rnrs lists) '(6) '() '() '() '((remove . g$8265$1IfLeT) (remv . g$8266$1IfLeT) (remp . g$15816$1IfLeT) (remq . g$8267$1IfLeT) (partition . g$15815$1IfLeT) (memv . g$15814$1IfLeT) (memq . g$15813$1IfLeT) (memp . g$15812$1IfLeT) (member . g$15811$1IfLeT) (exists . g$8261$1IfLeT) (for-all . g$8260$1IfLeT) (fold-right . g$8264$1IfLeT) (fold-left . g$8263$1IfLeT) (find . g$15810$1IfLeT) (filter . g$15809$1IfLeT) (cons* . g$8262$1IfLeT) (assv . g$15808$1IfLeT) (assq . g$15807$1IfLeT) (assp . g$15806$1IfLeT) (assoc . g$15805$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16081$1IfLeT '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g$15909$1IfLeT) (call-with-input-file . g$15908$1IfLeT) (write-char . g$15907$1IfLeT) (write . g$15906$1IfLeT) (with-output-to-file . g$15905$1IfLeT) (with-input-from-file . g$15904$1IfLeT) (read-char . g$15903$1IfLeT) (read . g$15902$1IfLeT) (peek-char . g$15901$1IfLeT) (open-output-file . g$15900$1IfLeT) (open-input-file . g$15899$1IfLeT) (newline . g$15898$1IfLeT) (display . g$15897$1IfLeT) (close-output-port . g$15896$1IfLeT) (close-input-port . g$15895$1IfLeT) (eof-object? . g$15894$1IfLeT) (eof-object . g$15893$1IfLeT) (current-error-port . g$15892$1IfLeT) (current-output-port . g$15891$1IfLeT) (current-input-port . g$15890$1IfLeT) (output-port? . g$15889$1IfLeT) (input-port? . g$15888$1IfLeT) (make-i/o-write-error . g$8825$1IfLeT) (make-i/o-read-error . g$8813$1IfLeT) (make-i/o-port-error . g$8916$1IfLeT) (make-i/o-invalid-position-error . g$8838$1IfLeT) (make-i/o-filename-error . g$8853$1IfLeT) (make-i/o-file-protection-error . g$8867$1IfLeT) (make-i/o-file-is-read-only-error . g$8879$1IfLeT) (make-i/o-file-does-not-exist-error . g$8903$1IfLeT) (make-i/o-file-already-exists-error . g$8891$1IfLeT) (make-i/o-error . g$8801$1IfLeT) (i/o-write-error? . g$8826$1IfLeT) (i/o-read-error? . g$8814$1IfLeT) (i/o-port-error? . g$8918$1IfLeT) (i/o-invalid-position-error? . g$8840$1IfLeT) (i/o-filename-error? . g$8855$1IfLeT) (i/o-file-protection-error? . g$8868$1IfLeT) (i/o-file-is-read-only-error? . g$8880$1IfLeT) (i/o-file-does-not-exist-error? . g$8904$1IfLeT) (i/o-file-already-exists-error? . g$8892$1IfLeT) (i/o-error? . g$8802$1IfLeT) (i/o-error-port . g$8919$1IfLeT) (i/o-error-filename . g$8856$1IfLeT) (&i/o-port . g$15505$1IfLeT) (&i/o-file-does-not-exist . g$15504$1IfLeT) (&i/o-file-already-exists . g$15503$1IfLeT) (&i/o-file-is-read-only . g$15502$1IfLeT) (&i/o-file-protection . g$15501$1IfLeT) (&i/o-filename . g$15500$1IfLeT) (&i/o-invalid-position . g$15499$1IfLeT) (&i/o-write . g$15498$1IfLeT) (&i/o-read . g$15497$1IfLeT) (&i/o . g$15496$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16082$1IfLeT '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$15847$1IfLeT) (utf32->string . g$15783$1IfLeT) (utf16->string . g$15782$1IfLeT) (utf8->string . g$15781$1IfLeT) (uint-list->bytevector . g$15780$1IfLeT) (u8-list->bytevector . g$15779$1IfLeT) (string->utf8 . g$15778$1IfLeT) (string->utf32 . g$15777$1IfLeT) (string->utf16 . g$15776$1IfLeT) (sint-list->bytevector . g$15775$1IfLeT) (native-endianness . g$8306$1IfLeT) (bytevector? . g$15774$1IfLeT) (bytevector=? . g$15773$1IfLeT) (bytevector-uint-set! . g$15772$1IfLeT) (bytevector-uint-ref . g$15771$1IfLeT) (bytevector-u8-set! . g$15770$1IfLeT) (bytevector-u8-ref . g$15769$1IfLeT) (bytevector-u64-set! . g$8327$1IfLeT) (bytevector-u64-ref . g$8323$1IfLeT) (bytevector-u64-native-set! . g$8329$1IfLeT) (bytevector-u64-native-ref . g$8325$1IfLeT) (bytevector-u32-set! . g$8319$1IfLeT) (bytevector-u32-ref . g$8315$1IfLeT) (bytevector-u32-native-set! . g$8321$1IfLeT) (bytevector-u32-native-ref . g$8317$1IfLeT) (bytevector-u16-set! . g$8311$1IfLeT) (bytevector-u16-ref . g$8307$1IfLeT) (bytevector-u16-native-set! . g$8313$1IfLeT) (bytevector-u16-native-ref . g$8309$1IfLeT) (bytevector-sint-set! . g$15768$1IfLeT) (bytevector-sint-ref . g$15767$1IfLeT) (bytevector-s8-set! . g$15766$1IfLeT) (bytevector-s8-ref . g$15765$1IfLeT) (bytevector-s64-set! . g$8328$1IfLeT) (bytevector-s64-ref . g$8324$1IfLeT) (bytevector-s64-native-set! . g$8330$1IfLeT) (bytevector-s64-native-ref . g$8326$1IfLeT) (bytevector-s32-set! . g$8320$1IfLeT) (bytevector-s32-ref . g$8316$1IfLeT) (bytevector-s32-native-set! . g$8322$1IfLeT) (bytevector-s32-native-ref . g$8318$1IfLeT) (bytevector-s16-set! . g$8312$1IfLeT) (bytevector-s16-ref . g$8308$1IfLeT) (bytevector-s16-native-set! . g$8314$1IfLeT) (bytevector-s16-native-ref . g$8310$1IfLeT) (bytevector-length . g$15764$1IfLeT) (bytevector-ieee-single-set! . g$15763$1IfLeT) (bytevector-ieee-single-ref . g$15762$1IfLeT) (bytevector-ieee-single-native-set! . g$8333$1IfLeT) (bytevector-ieee-single-native-ref . g$8331$1IfLeT) (bytevector-ieee-double-set! . g$15761$1IfLeT) (bytevector-ieee-double-ref . g$15760$1IfLeT) (bytevector-ieee-double-native-set! . g$8334$1IfLeT) (bytevector-ieee-double-native-ref . g$8332$1IfLeT) (bytevector-fill! . g$15759$1IfLeT) (bytevector-copy! . g$15758$1IfLeT) (bytevector-copy . g$15757$1IfLeT) (bytevector->uint-list . g$15756$1IfLeT) (bytevector->u8-list . g$15755$1IfLeT) (bytevector->sint-list . g$15754$1IfLeT) (endianness . g$15451$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16083$1IfLeT '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$15967$1IfLeT) (string-titlecase . g$15966$1IfLeT) (string-normalize-nfkd . g$15965$1IfLeT) (string-normalize-nfkc . g$15964$1IfLeT) (string-normalize-nfd . g$15963$1IfLeT) (string-normalize-nfc . g$15962$1IfLeT) (string-foldcase . g$15961$1IfLeT) (string-downcase . g$15960$1IfLeT) (string-ci>? . g$15959$1IfLeT) (string-ci>=? . g$15958$1IfLeT) (string-ci=? . g$15957$1IfLeT) (string-ci<? . g$15956$1IfLeT) (string-ci<=? . g$15955$1IfLeT) (char-whitespace? . g$15954$1IfLeT) (char-upper-case? . g$15953$1IfLeT) (char-title-case? . g$15952$1IfLeT) (char-numeric? . g$15951$1IfLeT) (char-lower-case? . g$15950$1IfLeT) (char-general-category . g$15949$1IfLeT) (char-upcase . g$15948$1IfLeT) (char-titlecase . g$15947$1IfLeT) (char-foldcase . g$15946$1IfLeT) (char-downcase . g$15945$1IfLeT) (char-ci>? . g$15944$1IfLeT) (char-ci>=? . g$15943$1IfLeT) (char-ci=? . g$15942$1IfLeT) (char-ci<? . g$15941$1IfLeT) (char-ci<=? . g$15940$1IfLeT) (char-alphabetic? . g$15939$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16084$1IfLeT '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$15804$1IfLeT) (raise-continuable . g$15803$1IfLeT) (raise . g$15802$1IfLeT) (guard . g$15464$1IfLeT) (else . g$15455$1IfLeT) (=> . g$15454$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16085$1IfLeT '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$8672$1IfLeT) (bitwise-reverse-bit-field . g$8673$1IfLeT) (bitwise-length . g$15669$1IfLeT) (bitwise-if . g$8666$1IfLeT) (bitwise-first-bit-set . g$15668$1IfLeT) (bitwise-copy-bit-field . g$8669$1IfLeT) (bitwise-copy-bit . g$8667$1IfLeT) (bitwise-bit-set? . g$15667$1IfLeT) (bitwise-bit-field . g$15666$1IfLeT) (bitwise-bit-count . g$15665$1IfLeT) (bitwise-xor . g$15664$1IfLeT) (bitwise-ior . g$15663$1IfLeT) (bitwise-and . g$15662$1IfLeT) (bitwise-not . g$15661$1IfLeT) (bitwise-arithmetic-shift-right . g$8671$1IfLeT) (bitwise-arithmetic-shift-left . g$8670$1IfLeT) (bitwise-arithmetic-shift . g$15660$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16086$1IfLeT '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$15707$1IfLeT) (fxxor . g$15706$1IfLeT) (fxrotate-bit-field . g$8724$1IfLeT) (fxreverse-bit-field . g$15705$1IfLeT) (fxpositive? . g$15704$1IfLeT) (fxodd? . g$15703$1IfLeT) (fxnot . g$15702$1IfLeT) (fxnegative? . g$15701$1IfLeT) (fxmod0 . g$15700$1IfLeT) (fxmod . g$15699$1IfLeT) (fxmin . g$15698$1IfLeT) (fxmax . g$15697$1IfLeT) (fxlength . g$15696$1IfLeT) (fxior . g$15695$1IfLeT) (fxif . g$8718$1IfLeT) (fxfirst-bit-set . g$15694$1IfLeT) (fxeven? . g$15693$1IfLeT) (fxdiv0-and-mod0 . g$15692$1IfLeT) (fxdiv0 . g$15691$1IfLeT) (fxdiv-and-mod . g$15690$1IfLeT) (fxdiv . g$15689$1IfLeT) (fxcopy-bit-field . g$8721$1IfLeT) (fxcopy-bit . g$8719$1IfLeT) (fxbit-set? . g$15688$1IfLeT) (fxbit-field . g$8720$1IfLeT) (fxbit-count . g$15687$1IfLeT) (fxarithmetic-shift-right . g$8723$1IfLeT) (fxarithmetic-shift-left . g$8722$1IfLeT) (fxarithmetic-shift . g$15686$1IfLeT) (fxand . g$15685$1IfLeT) (fx>? . g$15684$1IfLeT) (fx>=? . g$15683$1IfLeT) (fx=? . g$15682$1IfLeT) (fx<? . g$15681$1IfLeT) (fx<=? . g$15680$1IfLeT) (fx-/carry . g$15679$1IfLeT) (fx- . g$15678$1IfLeT) (fx+/carry . g$15677$1IfLeT) (fx+ . g$15676$1IfLeT) (fx*/carry . g$15675$1IfLeT) (fx* . g$15674$1IfLeT) (greatest-fixnum . g$15673$1IfLeT) (least-fixnum . g$15672$1IfLeT) (fixnum-width . g$15671$1IfLeT) (fixnum? . g$15670$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16087$1IfLeT '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$8789$1IfLeT) (no-infinities-violation? . g$8777$1IfLeT) (make-no-nans-violation . g$8788$1IfLeT) (make-no-infinities-violation . g$8776$1IfLeT) (real->flonum . g$15753$1IfLeT) (flzero? . g$15752$1IfLeT) (fltruncate . g$15751$1IfLeT) (fltan . g$15750$1IfLeT) (flsqrt . g$15749$1IfLeT) (flsin . g$15748$1IfLeT) (flround . g$15747$1IfLeT) (flpositive? . g$15746$1IfLeT) (flonum? . g$15745$1IfLeT) (flodd? . g$15744$1IfLeT) (flnumerator . g$15743$1IfLeT) (flnegative? . g$15742$1IfLeT) (flnan? . g$15741$1IfLeT) (flmod0 . g$15740$1IfLeT) (flmod . g$15739$1IfLeT) (flmin . g$15738$1IfLeT) (flmax . g$15737$1IfLeT) (fllog . g$15736$1IfLeT) (flinteger? . g$15735$1IfLeT) (flinfinite? . g$15734$1IfLeT) (flfloor . g$15733$1IfLeT) (flfinite? . g$15732$1IfLeT) (flexpt . g$15731$1IfLeT) (flexp . g$15730$1IfLeT) (fleven? . g$15729$1IfLeT) (fldiv0-and-mod0 . g$15728$1IfLeT) (fldiv0 . g$15727$1IfLeT) (fldiv-and-mod . g$15726$1IfLeT) (fldiv . g$15725$1IfLeT) (fldenominator . g$15724$1IfLeT) (flcos . g$15723$1IfLeT) (flceiling . g$15722$1IfLeT) (flatan . g$15721$1IfLeT) (flasin . g$15720$1IfLeT) (flacos . g$15719$1IfLeT) (flabs . g$15718$1IfLeT) (fl>? . g$15717$1IfLeT) (fl>=? . g$15716$1IfLeT) (fl=? . g$15715$1IfLeT) (fl<? . g$15714$1IfLeT) (fl<=? . g$15713$1IfLeT) (fl/ . g$15712$1IfLeT) (fl- . g$15711$1IfLeT) (fl+ . g$15710$1IfLeT) (fl* . g$15709$1IfLeT) (fixnum->flonum . g$15708$1IfLeT) (&no-nans . g$15509$1IfLeT) (&no-infinities . g$15508$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16088$1IfLeT '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$15919$1IfLeT) (string-ci-hash . g$15918$1IfLeT) (string-hash . g$15917$1IfLeT) (equal-hash . g$15916$1IfLeT) (hashtable-equivalence-function . g$8167$1IfLeT) (make-hashtable . g$15915$1IfLeT) (hashtable-hash-function . g$8168$1IfLeT) (make-eqv-hashtable . g$8159$1IfLeT) (make-eq-hashtable . g$8158$1IfLeT) (hashtable? . g$15914$1IfLeT) (hashtable-update! . g$8165$1IfLeT) (hashtable-size . g$8160$1IfLeT) (hashtable-set! . g$8162$1IfLeT) (hashtable-ref . g$8161$1IfLeT) (hashtable-mutable? . g$15913$1IfLeT) (hashtable-keys . g$15912$1IfLeT) (hashtable-entries . g$15911$1IfLeT) (hashtable-delete! . g$8163$1IfLeT) (hashtable-copy . g$15910$1IfLeT) (hashtable-contains? . g$8164$1IfLeT) (hashtable-clear! . g$8166$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16089$1IfLeT '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$15894$1IfLeT) (eof-object . g$15893$1IfLeT) (current-error-port . g$15892$1IfLeT) (current-output-port . g$15891$1IfLeT) (current-input-port . g$15890$1IfLeT) (output-port? . g$15889$1IfLeT) (input-port? . g$15888$1IfLeT) (utf-8-codec . g$15887$1IfLeT) (utf-16-codec . g$15886$1IfLeT) (transcoder-error-handling-mode . g$15885$1IfLeT) (transcoder-eol-style . g$15884$1IfLeT) (transcoder-codec . g$15883$1IfLeT) (transcoded-port . g$15882$1IfLeT) (textual-port? . g$15881$1IfLeT) (string->bytevector . g$15880$1IfLeT) (standard-output-port . g$15879$1IfLeT) (standard-input-port . g$15878$1IfLeT) (standard-error-port . g$15877$1IfLeT) (set-port-position! . g$15876$1IfLeT) (put-u8 . g$15875$1IfLeT) (put-string . g$15874$1IfLeT) (put-datum . g$15873$1IfLeT) (put-char . g$15872$1IfLeT) (put-bytevector . g$15871$1IfLeT) (port? . g$15870$1IfLeT) (port-transcoder . g$15869$1IfLeT) (port-position . g$15868$1IfLeT) (port-has-set-port-position!? . g$15867$1IfLeT) (port-has-port-position? . g$15866$1IfLeT) (port-eof? . g$15865$1IfLeT) (output-port-buffer-mode . g$15864$1IfLeT) (open-string-output-port . g$8950$1IfLeT) (open-string-input-port . g$15863$1IfLeT) (open-file-output-port . g$15862$1IfLeT) (open-file-input/output-port . g$15861$1IfLeT) (open-file-input-port . g$15860$1IfLeT) (open-bytevector-output-port . g$15859$1IfLeT) (open-bytevector-input-port . g$15858$1IfLeT) (native-transcoder . g$15857$1IfLeT) (native-eol-style . g$15856$1IfLeT) (make-transcoder . g$15855$1IfLeT) (latin-1-codec . g$15854$1IfLeT) (make-i/o-write-error . g$8825$1IfLeT) (make-i/o-read-error . g$8813$1IfLeT) (make-i/o-port-error . g$8916$1IfLeT) (make-i/o-invalid-position-error . g$8838$1IfLeT) (make-i/o-filename-error . g$8853$1IfLeT) (make-i/o-file-protection-error . g$8867$1IfLeT) (make-i/o-file-is-read-only-error . g$8879$1IfLeT) (make-i/o-file-does-not-exist-error . g$8903$1IfLeT) (make-i/o-file-already-exists-error . g$8891$1IfLeT) (make-i/o-error . g$8801$1IfLeT) (make-i/o-encoding-error . g$8943$1IfLeT) (make-i/o-decoding-error . g$8930$1IfLeT) (make-custom-textual-output-port . g$15853$1IfLeT) (make-custom-textual-input/output-port . g$15852$1IfLeT) (make-custom-textual-input-port . g$15851$1IfLeT) (make-custom-binary-output-port . g$15850$1IfLeT) (make-custom-binary-input/output-port . g$15849$1IfLeT) (make-custom-binary-input-port . g$15848$1IfLeT) (lookahead-u8 . g$15846$1IfLeT) (lookahead-char . g$15845$1IfLeT) (i/o-write-error? . g$8826$1IfLeT) (i/o-read-error? . g$8814$1IfLeT) (i/o-port-error? . g$8918$1IfLeT) (i/o-invalid-position-error? . g$8840$1IfLeT) (i/o-filename-error? . g$8855$1IfLeT) (i/o-file-protection-error? . g$8868$1IfLeT) (i/o-file-is-read-only-error? . g$8880$1IfLeT) (i/o-file-does-not-exist-error? . g$8904$1IfLeT) (i/o-file-already-exists-error? . g$8892$1IfLeT) (i/o-error? . g$8802$1IfLeT) (i/o-error-port . g$8919$1IfLeT) (i/o-error-filename . g$8856$1IfLeT) (i/o-encoding-error? . g$8945$1IfLeT) (i/o-encoding-error-char . g$8946$1IfLeT) (i/o-decoding-error? . g$8931$1IfLeT) (get-u8 . g$15844$1IfLeT) (get-string-n! . g$15843$1IfLeT) (get-string-n . g$15842$1IfLeT) (get-string-all . g$15841$1IfLeT) (get-line . g$15840$1IfLeT) (get-datum . g$15839$1IfLeT) (get-char . g$15838$1IfLeT) (get-bytevector-some . g$15837$1IfLeT) (get-bytevector-n! . g$15836$1IfLeT) (get-bytevector-n . g$15835$1IfLeT) (get-bytevector-all . g$15834$1IfLeT) (flush-output-port . g$15833$1IfLeT) (close-port . g$15832$1IfLeT) (call-with-string-output-port . g$15831$1IfLeT) (call-with-port . g$15830$1IfLeT) (call-with-bytevector-output-port . g$15829$1IfLeT) (bytevector->string . g$15828$1IfLeT) (buffer-mode? . g$15827$1IfLeT) (binary-port? . g$15826$1IfLeT) (&i/o-encoding . g$15507$1IfLeT) (&i/o-decoding . g$15506$1IfLeT) (&i/o-port . g$15505$1IfLeT) (&i/o-file-does-not-exist . g$15504$1IfLeT) (&i/o-file-already-exists . g$15503$1IfLeT) (&i/o-file-is-read-only . g$15502$1IfLeT) (&i/o-file-protection . g$15501$1IfLeT) (&i/o-filename . g$15500$1IfLeT) (&i/o-invalid-position . g$15499$1IfLeT) (&i/o-write . g$15498$1IfLeT) (&i/o-read . g$15497$1IfLeT) (&i/o . g$15496$1IfLeT) (error-handling-mode . g$15468$1IfLeT) (file-options . g$15467$1IfLeT) (buffer-mode . g$15466$1IfLeT) (eol-style . g$15465$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16090$1IfLeT '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$15801$1IfLeT) (enum-set=? . g$15800$1IfLeT) (enum-set-universe . g$15799$1IfLeT) (enum-set-union . g$15798$1IfLeT) (enum-set-subset? . g$15797$1IfLeT) (enum-set-projection . g$15796$1IfLeT) (enum-set-member? . g$15795$1IfLeT) (enum-set-intersection . g$15794$1IfLeT) (enum-set-indexer . g$15793$1IfLeT) (enum-set-difference . g$15792$1IfLeT) (enum-set-constructor . g$15791$1IfLeT) (enum-set-complement . g$15790$1IfLeT) (enum-set->list . g$15789$1IfLeT) (define-enumeration . g$15479$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16091$1IfLeT '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$8537$1IfLeT) (warning? . g$8460$1IfLeT) (violation? . g$8496$1IfLeT) (undefined-violation? . g$8604$1IfLeT) (syntax-violation? . g$8590$1IfLeT) (syntax-violation-subform . g$8592$1IfLeT) (syntax-violation-form . g$8591$1IfLeT) (syntax-violation . g$9803$1IfLeT) (simple-conditions . g$15788$1IfLeT) (serious-condition? . g$8472$1IfLeT) (non-continuable-violation? . g$8550$1IfLeT) (message-condition? . g$8447$1IfLeT) (make-who-condition . g$8535$1IfLeT) (make-warning . g$8459$1IfLeT) (make-violation . g$8495$1IfLeT) (make-undefined-violation . g$8603$1IfLeT) (make-syntax-violation . g$8587$1IfLeT) (make-serious-condition . g$8471$1IfLeT) (make-non-continuable-violation . g$8549$1IfLeT) (make-message-condition . g$8445$1IfLeT) (make-lexical-violation . g$8573$1IfLeT) (make-irritants-condition . g$8520$1IfLeT) (make-implementation-restriction-violation . g$8561$1IfLeT) (make-error . g$8483$1IfLeT) (make-assertion-violation . g$8507$1IfLeT) (lexical-violation? . g$8574$1IfLeT) (irritants-condition? . g$8522$1IfLeT) (implementation-restriction-violation? . g$8562$1IfLeT) (error? . g$8484$1IfLeT) (condition-who . g$8538$1IfLeT) (condition-predicate . g$15787$1IfLeT) (condition-message . g$8448$1IfLeT) (condition-irritants . g$8523$1IfLeT) (condition-accessor . g$15786$1IfLeT) (condition . g$15785$1IfLeT) (assertion-violation? . g$8508$1IfLeT) (condition? . g$15784$1IfLeT) (&non-continuable . g$15495$1IfLeT) (&undefined . g$15494$1IfLeT) (&syntax . g$15493$1IfLeT) (&lexical . g$15492$1IfLeT) (&implementation-restriction . g$15491$1IfLeT) (&who . g$15489$1IfLeT) (&irritants . g$15488$1IfLeT) (&assertion . g$15487$1IfLeT) (&violation . g$15486$1IfLeT) (&error . g$15485$1IfLeT) (&serious . g$15484$1IfLeT) (&warning . g$15483$1IfLeT) (&message . g$15482$1IfLeT) (&condition . g$15481$1IfLeT) (define-condition-type . g$15480$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16092$1IfLeT '(rnrs records inspection) '(6) '() '() '() '((record? . g$15931$1IfLeT) (record-type-uid . g$15930$1IfLeT) (record-type-sealed? . g$15929$1IfLeT) (record-type-parent . g$15928$1IfLeT) (record-type-opaque? . g$15927$1IfLeT) (record-type-name . g$15926$1IfLeT) (record-type-generative? . g$15925$1IfLeT) (record-type-field-names . g$15924$1IfLeT) (record-rtd . g$15923$1IfLeT) (record-field-mutable? . g$15922$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16093$1IfLeT '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$15938$1IfLeT) (record-predicate . g$15937$1IfLeT) (record-mutator . g$15936$1IfLeT) (record-constructor . g$15935$1IfLeT) (record-accessor . g$15934$1IfLeT) (make-record-type-descriptor . g$15933$1IfLeT) (make-record-constructor-descriptor . g$15932$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16094$1IfLeT '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$15478$1IfLeT) (parent-rtd . g$15477$1IfLeT) (nongenerative . g$15476$1IfLeT) (opaque . g$15475$1IfLeT) (sealed . g$15474$1IfLeT) (protocol . g$15473$1IfLeT) (parent . g$15472$1IfLeT) (immutable . g$15471$1IfLeT) (mutable . g$15470$1IfLeT) (fields . g$15469$1IfLeT) (record-constructor-descriptor . g$15432$1IfLeT) (record-type-descriptor . g$15431$1IfLeT)) '() values values '#f '#f '#t '#f) (g$install-library$9652$1IfLeT 'g$16095$1IfLeT '(psyntax system $all) '() '() '() '() '((ellipsis-map . g$9687$1IfLeT) (&no-nans-rcd . g$16060$1IfLeT) (&no-nans-rtd . g$16059$1IfLeT) (&no-infinities-rcd . g$16058$1IfLeT) (&no-infinities-rtd . g$16057$1IfLeT) (&i/o-encoding-rcd . g$16056$1IfLeT) (&i/o-encoding-rtd . g$16055$1IfLeT) (&i/o-decoding-rcd . g$16054$1IfLeT) (&i/o-decoding-rtd . g$16053$1IfLeT) (&i/o-port-rcd . g$16052$1IfLeT) (&i/o-port-rtd . g$16051$1IfLeT) (&i/o-file-does-not-exist-rcd . g$16050$1IfLeT) (&i/o-file-does-not-exist-rtd . g$16049$1IfLeT) (&i/o-file-already-exists-rcd . g$16048$1IfLeT) (&i/o-file-already-exists-rtd . g$16047$1IfLeT) (&i/o-fie-is-read-only-rcd . g$16046$1IfLeT) (&i/o-fie-is-read-only-rtd . g$16045$1IfLeT) (&i/o-file-protection-rcd . g$16044$1IfLeT) (&i/o-file-protection-rtd . g$16043$1IfLeT) (&i/o-filename-rcd . g$16042$1IfLeT) (&i/o-filename-rtd . g$16041$1IfLeT) (&i/o-invalid-position-rcd . g$16040$1IfLeT) (&i/o-invalid-position-rtd . g$16039$1IfLeT) (&i/o-write-rcd . g$16038$1IfLeT) (&i/o-write-rtd . g$16037$1IfLeT) (&i/o-read-rcd . g$16036$1IfLeT) (&i/o-read-rtd . g$16035$1IfLeT) (&i/o-rcd . g$16034$1IfLeT) (&i/o-rtd . g$16033$1IfLeT) (&undefined-rcd . g$16032$1IfLeT) (&undefined-rtd . g$16031$1IfLeT) (&syntax-rcd . g$16030$1IfLeT) (&syntax-rtd . g$16029$1IfLeT) (&lexical-rcd . g$16028$1IfLeT) (&lexical-rtd . g$16027$1IfLeT) (&implementation-restriction-rcd . g$16026$1IfLeT) (&implementation-restriction-rtd . g$16025$1IfLeT) (&non-continuable-rcd . g$16024$1IfLeT) (&non-continuable-rtd . g$16023$1IfLeT) (&who-rcd . g$16022$1IfLeT) (&who-rtd . g$16021$1IfLeT) (&irritants-rcd . g$16020$1IfLeT) (&irritants-rtd . g$16019$1IfLeT) (&assertion-rcd . g$16018$1IfLeT) (&assertion-rtd . g$16017$1IfLeT) (&violation-rcd . g$16016$1IfLeT) (&violation-rtd . g$16015$1IfLeT) (&error-rcd . g$16014$1IfLeT) (&error-rtd . g$16013$1IfLeT) (&serious-rcd . g$16012$1IfLeT) (&serious-rtd . g$16011$1IfLeT) (&warning-rcd . g$16010$1IfLeT) (&warning-rtd . g$16009$1IfLeT) (&message-rcd . g$16008$1IfLeT) (&message-rtd . g$16007$1IfLeT) (&condition-rcd . g$16006$1IfLeT) (&condition-rtd . g$16005$1IfLeT) (library-letrec* . g$16004$1IfLeT) (annotation-stripped . g$16003$1IfLeT) (annotation-source . g$16002$1IfLeT) (annotation-expression . g$16001$1IfLeT) (annotation? . g$16000$1IfLeT) (read-annotated . g$15999$1IfLeT) (tanh . g$15998$1IfLeT) (cosh . g$15997$1IfLeT) (sinh . g$15996$1IfLeT) (make-guid . g$15995$1IfLeT) (unspecified? . g$15994$1IfLeT) (make-trace . g$15993$1IfLeT) (make-list . g$15992$1IfLeT) (last-pair . g$15991$1IfLeT) (load-r5rs . g$15990$1IfLeT) (license . g$15989$1IfLeT) (stacktrace . g$15988$1IfLeT) (ironscheme-build . g$15386$1IfLeT) (define-clr-class-internal . g$15987$1IfLeT) (clr-field-set!-internal . g$15986$1IfLeT) (clr-field-get-internal . g$15985$1IfLeT) (clr-cast-internal . g$15984$1IfLeT) (clr-call-internal . g$15983$1IfLeT) (clr-new-internal . g$15982$1IfLeT) (clr-new-array-internal . g$15981$1IfLeT) (clr-is-internal . g$15980$1IfLeT) (clr-reference-internal . g$15979$1IfLeT) (clr-using-internal . g$15978$1IfLeT) (clr-clear-usings-internal . g$15977$1IfLeT) (syntax-error . g$9800$1IfLeT) (syntax-dispatch . g$9684$1IfLeT) (eval-core . g$15976$1IfLeT) (set-symbol-value! . g$15975$1IfLeT) (symbol-value . g$15974$1IfLeT) (ungensym . g$15973$1IfLeT) (gensym . g$15972$1IfLeT) (void . g$15971$1IfLeT) (load-serialized-library . g$15970$1IfLeT) (serialize-library . g$15969$1IfLeT) (compile-system-libraries . g$15388$1IfLeT) (compile->closure . g$15390$1IfLeT) (compile . g$15389$1IfLeT) (load . g$15385$1IfLeT) (interaction-environment . g$9808$1IfLeT) (char-ready? . g$15968$1IfLeT) (string-upcase . g$15967$1IfLeT) (string-titlecase . g$15966$1IfLeT) (string-normalize-nfkd . g$15965$1IfLeT) (string-normalize-nfkc . g$15964$1IfLeT) (string-normalize-nfd . g$15963$1IfLeT) (string-normalize-nfc . g$15962$1IfLeT) (string-foldcase . g$15961$1IfLeT) (string-downcase . g$15960$1IfLeT) (string-ci>? . g$15959$1IfLeT) (string-ci>=? . g$15958$1IfLeT) (string-ci=? . g$15957$1IfLeT) (string-ci<? . g$15956$1IfLeT) (string-ci<=? . g$15955$1IfLeT) (char-whitespace? . g$15954$1IfLeT) (char-upper-case? . g$15953$1IfLeT) (char-title-case? . g$15952$1IfLeT) (char-numeric? . g$15951$1IfLeT) (char-lower-case? . g$15950$1IfLeT) (char-general-category . g$15949$1IfLeT) (char-upcase . g$15948$1IfLeT) (char-titlecase . g$15947$1IfLeT) (char-foldcase . g$15946$1IfLeT) (char-downcase . g$15945$1IfLeT) (char-ci>? . g$15944$1IfLeT) (char-ci>=? . g$15943$1IfLeT) (char-ci=? . g$15942$1IfLeT) (char-ci<? . g$15941$1IfLeT) (char-ci<=? . g$15940$1IfLeT) (char-alphabetic? . g$15939$1IfLeT) (make-variable-transformer . g$9511$1IfLeT) (identifier? . g$9804$1IfLeT) (generate-temporaries . g$9796$1IfLeT) (free-identifier=? . g$9797$1IfLeT) (syntax->datum . g$9806$1IfLeT) (datum->syntax . g$9805$1IfLeT) (bound-identifier=? . g$9798$1IfLeT) (record-type-descriptor? . g$15938$1IfLeT) (record-predicate . g$15937$1IfLeT) (record-mutator . g$15936$1IfLeT) (record-constructor . g$15935$1IfLeT) (record-accessor . g$15934$1IfLeT) (make-record-type-descriptor . g$15933$1IfLeT) (make-record-constructor-descriptor . g$15932$1IfLeT) (record? . g$15931$1IfLeT) (record-type-uid . g$15930$1IfLeT) (record-type-sealed? . g$15929$1IfLeT) (record-type-parent . g$15928$1IfLeT) (record-type-opaque? . g$15927$1IfLeT) (record-type-name . g$15926$1IfLeT) (record-type-generative? . g$15925$1IfLeT) (record-type-field-names . g$15924$1IfLeT) (record-rtd . g$15923$1IfLeT) (record-field-mutable? . g$15922$1IfLeT) (delete-file . g$8194$1IfLeT) (file-exists? . g$8193$1IfLeT) (vector-sort! . g$15921$1IfLeT) (vector-sort . g$15920$1IfLeT) (list-sort . g$8623$1IfLeT) (symbol-hash . g$15919$1IfLeT) (string-ci-hash . g$15918$1IfLeT) (string-hash . g$15917$1IfLeT) (equal-hash . g$15916$1IfLeT) (hashtable-equivalence-function . g$8167$1IfLeT) (make-hashtable . g$15915$1IfLeT) (hashtable-hash-function . g$8168$1IfLeT) (make-eqv-hashtable . g$8159$1IfLeT) (make-eq-hashtable . g$8158$1IfLeT) (hashtable? . g$15914$1IfLeT) (hashtable-update! . g$8165$1IfLeT) (hashtable-size . g$8160$1IfLeT) (hashtable-set! . g$8162$1IfLeT) (hashtable-ref . g$8161$1IfLeT) (hashtable-mutable? . g$15913$1IfLeT) (hashtable-keys . g$15912$1IfLeT) (hashtable-entries . g$15911$1IfLeT) (hashtable-delete! . g$8163$1IfLeT) (hashtable-copy . g$15910$1IfLeT) (hashtable-contains? . g$8164$1IfLeT) (hashtable-clear! . g$8166$1IfLeT) (call-with-output-file . g$15909$1IfLeT) (call-with-input-file . g$15908$1IfLeT) (write-char . g$15907$1IfLeT) (write . g$15906$1IfLeT) (with-output-to-file . g$15905$1IfLeT) (with-input-from-file . g$15904$1IfLeT) (read-char . g$15903$1IfLeT) (read . g$15902$1IfLeT) (peek-char . g$15901$1IfLeT) (open-output-file . g$15900$1IfLeT) (open-input-file . g$15899$1IfLeT) (newline . g$15898$1IfLeT) (display . g$15897$1IfLeT) (close-output-port . g$15896$1IfLeT) (close-input-port . g$15895$1IfLeT) (eof-object? . g$15894$1IfLeT) (eof-object . g$15893$1IfLeT) (current-error-port . g$15892$1IfLeT) (current-output-port . g$15891$1IfLeT) (current-input-port . g$15890$1IfLeT) (output-port? . g$15889$1IfLeT) (input-port? . g$15888$1IfLeT) (utf-8-codec . g$15887$1IfLeT) (utf-16-codec . g$15886$1IfLeT) (transcoder-error-handling-mode . g$15885$1IfLeT) (transcoder-eol-style . g$15884$1IfLeT) (transcoder-codec . g$15883$1IfLeT) (transcoded-port . g$15882$1IfLeT) (textual-port? . g$15881$1IfLeT) (string->bytevector . g$15880$1IfLeT) (standard-output-port . g$15879$1IfLeT) (standard-input-port . g$15878$1IfLeT) (standard-error-port . g$15877$1IfLeT) (set-port-position! . g$15876$1IfLeT) (put-u8 . g$15875$1IfLeT) (put-string . g$15874$1IfLeT) (put-datum . g$15873$1IfLeT) (put-char . g$15872$1IfLeT) (put-bytevector . g$15871$1IfLeT) (port? . g$15870$1IfLeT) (port-transcoder . g$15869$1IfLeT) (port-position . g$15868$1IfLeT) (port-has-set-port-position!? . g$15867$1IfLeT) (port-has-port-position? . g$15866$1IfLeT) (port-eof? . g$15865$1IfLeT) (output-port-buffer-mode . g$15864$1IfLeT) (open-string-output-port . g$8950$1IfLeT) (open-string-input-port . g$15863$1IfLeT) (open-file-output-port . g$15862$1IfLeT) (open-file-input/output-port . g$15861$1IfLeT) (open-file-input-port . g$15860$1IfLeT) (open-bytevector-output-port . g$15859$1IfLeT) (open-bytevector-input-port . g$15858$1IfLeT) (native-transcoder . g$15857$1IfLeT) (native-eol-style . g$15856$1IfLeT) (make-transcoder . g$15855$1IfLeT) (latin-1-codec . g$15854$1IfLeT) (make-i/o-write-error . g$8825$1IfLeT) (make-i/o-read-error . g$8813$1IfLeT) (make-i/o-port-error . g$8916$1IfLeT) (make-i/o-invalid-position-error . g$8838$1IfLeT) (make-i/o-filename-error . g$8853$1IfLeT) (make-i/o-file-protection-error . g$8867$1IfLeT) (make-i/o-file-is-read-only-error . g$8879$1IfLeT) (make-i/o-file-does-not-exist-error . g$8903$1IfLeT) (make-i/o-file-already-exists-error . g$8891$1IfLeT) (make-i/o-error . g$8801$1IfLeT) (make-i/o-encoding-error . g$8943$1IfLeT) (make-i/o-decoding-error . g$8930$1IfLeT) (make-custom-textual-output-port . g$15853$1IfLeT) (make-custom-textual-input/output-port . g$15852$1IfLeT) (make-custom-textual-input-port . g$15851$1IfLeT) (make-custom-binary-output-port . g$15850$1IfLeT) (make-custom-binary-input/output-port . g$15849$1IfLeT) (make-custom-binary-input-port . g$15848$1IfLeT) (make-bytevector . g$15847$1IfLeT) (lookahead-u8 . g$15846$1IfLeT) (lookahead-char . g$15845$1IfLeT) (i/o-write-error? . g$8826$1IfLeT) (i/o-read-error? . g$8814$1IfLeT) (i/o-port-error? . g$8918$1IfLeT) (i/o-invalid-position-error? . g$8840$1IfLeT) (i/o-filename-error? . g$8855$1IfLeT) (i/o-file-protection-error? . g$8868$1IfLeT) (i/o-file-is-read-only-error? . g$8880$1IfLeT) (i/o-file-does-not-exist-error? . g$8904$1IfLeT) (i/o-file-already-exists-error? . g$8892$1IfLeT) (i/o-error? . g$8802$1IfLeT) (i/o-error-port . g$8919$1IfLeT) (i/o-error-filename . g$8856$1IfLeT) (i/o-encoding-error? . g$8945$1IfLeT) (i/o-encoding-error-char . g$8946$1IfLeT) (i/o-decoding-error? . g$8931$1IfLeT) (get-u8 . g$15844$1IfLeT) (get-string-n! . g$15843$1IfLeT) (get-string-n . g$15842$1IfLeT) (get-string-all . g$15841$1IfLeT) (get-line . g$15840$1IfLeT) (get-datum . g$15839$1IfLeT) (get-char . g$15838$1IfLeT) (get-bytevector-some . g$15837$1IfLeT) (get-bytevector-n! . g$15836$1IfLeT) (get-bytevector-n . g$15835$1IfLeT) (get-bytevector-all . g$15834$1IfLeT) (flush-output-port . g$15833$1IfLeT) (close-port . g$15832$1IfLeT) (call-with-string-output-port . g$15831$1IfLeT) (call-with-port . g$15830$1IfLeT) (call-with-bytevector-output-port . g$15829$1IfLeT) (bytevector->string . g$15828$1IfLeT) (buffer-mode? . g$15827$1IfLeT) (binary-port? . g$15826$1IfLeT) (scheme-report-environment . g$9787$1IfLeT) (quotient . g$8610$1IfLeT) (null-environment . g$9786$1IfLeT) (remainder . g$8611$1IfLeT) (modulo . g$8612$1IfLeT) (inexact->exact . g$15825$1IfLeT) (force . g$15824$1IfLeT) (exact->inexact . g$15823$1IfLeT) (exit . g$15822$1IfLeT) (command-line . g$15821$1IfLeT) (string-fill! . g$15820$1IfLeT) (string-set! . g$15819$1IfLeT) (set-cdr! . g$15818$1IfLeT) (set-car! . g$15817$1IfLeT) (remove . g$8265$1IfLeT) (remv . g$8266$1IfLeT) (remp . g$15816$1IfLeT) (remq . g$8267$1IfLeT) (partition . g$15815$1IfLeT) (memv . g$15814$1IfLeT) (memq . g$15813$1IfLeT) (memp . g$15812$1IfLeT) (member . g$15811$1IfLeT) (exists . g$8261$1IfLeT) (for-all . g$8260$1IfLeT) (fold-right . g$8264$1IfLeT) (fold-left . g$8263$1IfLeT) (find . g$15810$1IfLeT) (filter . g$15809$1IfLeT) (cons* . g$8262$1IfLeT) (assv . g$15808$1IfLeT) (assq . g$15807$1IfLeT) (assp . g$15806$1IfLeT) (assoc . g$15805$1IfLeT) (with-exception-handler . g$15804$1IfLeT) (raise-continuable . g$15803$1IfLeT) (raise . g$15802$1IfLeT) (eval . g$9789$1IfLeT) (environment . g$9785$1IfLeT) (make-enumeration . g$15801$1IfLeT) (enum-set=? . g$15800$1IfLeT) (enum-set-universe . g$15799$1IfLeT) (enum-set-union . g$15798$1IfLeT) (enum-set-subset? . g$15797$1IfLeT) (enum-set-projection . g$15796$1IfLeT) (enum-set-member? . g$15795$1IfLeT) (enum-set-intersection . g$15794$1IfLeT) (enum-set-indexer . g$15793$1IfLeT) (enum-set-difference . g$15792$1IfLeT) (enum-set-constructor . g$15791$1IfLeT) (enum-set-complement . g$15790$1IfLeT) (enum-set->list . g$15789$1IfLeT) (who-condition? . g$8537$1IfLeT) (warning? . g$8460$1IfLeT) (violation? . g$8496$1IfLeT) (undefined-violation? . g$8604$1IfLeT) (syntax-violation? . g$8590$1IfLeT) (syntax-violation-subform . g$8592$1IfLeT) (syntax-violation-form . g$8591$1IfLeT) (syntax-violation . g$9803$1IfLeT) (simple-conditions . g$15788$1IfLeT) (serious-condition? . g$8472$1IfLeT) (non-continuable-violation? . g$8550$1IfLeT) (message-condition? . g$8447$1IfLeT) (make-who-condition . g$8535$1IfLeT) (make-warning . g$8459$1IfLeT) (make-violation . g$8495$1IfLeT) (make-undefined-violation . g$8603$1IfLeT) (make-syntax-violation . g$8587$1IfLeT) (make-serious-condition . g$8471$1IfLeT) (make-non-continuable-violation . g$8549$1IfLeT) (make-message-condition . g$8445$1IfLeT) (make-lexical-violation . g$8573$1IfLeT) (make-irritants-condition . g$8520$1IfLeT) (make-implementation-restriction-violation . g$8561$1IfLeT) (make-error . g$8483$1IfLeT) (make-assertion-violation . g$8507$1IfLeT) (lexical-violation? . g$8574$1IfLeT) (irritants-condition? . g$8522$1IfLeT) (implementation-restriction-violation? . g$8562$1IfLeT) (error? . g$8484$1IfLeT) (condition-who . g$8538$1IfLeT) (condition-predicate . g$15787$1IfLeT) (condition-message . g$8448$1IfLeT) (condition-irritants . g$8523$1IfLeT) (condition-accessor . g$15786$1IfLeT) (condition . g$15785$1IfLeT) (assertion-violation? . g$8508$1IfLeT) (condition? . g$15784$1IfLeT) (utf32->string . g$15783$1IfLeT) (utf16->string . g$15782$1IfLeT) (utf8->string . g$15781$1IfLeT) (uint-list->bytevector . g$15780$1IfLeT) (u8-list->bytevector . g$15779$1IfLeT) (string->utf8 . g$15778$1IfLeT) (string->utf32 . g$15777$1IfLeT) (string->utf16 . g$15776$1IfLeT) (sint-list->bytevector . g$15775$1IfLeT) (native-endianness . g$8306$1IfLeT) (bytevector? . g$15774$1IfLeT) (bytevector=? . g$15773$1IfLeT) (bytevector-uint-set! . g$15772$1IfLeT) (bytevector-uint-ref . g$15771$1IfLeT) (bytevector-u8-set! . g$15770$1IfLeT) (bytevector-u8-ref . g$15769$1IfLeT) (bytevector-u64-set! . g$8327$1IfLeT) (bytevector-u64-ref . g$8323$1IfLeT) (bytevector-u64-native-set! . g$8329$1IfLeT) (bytevector-u64-native-ref . g$8325$1IfLeT) (bytevector-u32-set! . g$8319$1IfLeT) (bytevector-u32-ref . g$8315$1IfLeT) (bytevector-u32-native-set! . g$8321$1IfLeT) (bytevector-u32-native-ref . g$8317$1IfLeT) (bytevector-u16-set! . g$8311$1IfLeT) (bytevector-u16-ref . g$8307$1IfLeT) (bytevector-u16-native-set! . g$8313$1IfLeT) (bytevector-u16-native-ref . g$8309$1IfLeT) (bytevector-sint-set! . g$15768$1IfLeT) (bytevector-sint-ref . g$15767$1IfLeT) (bytevector-s8-set! . g$15766$1IfLeT) (bytevector-s8-ref . g$15765$1IfLeT) (bytevector-s64-set! . g$8328$1IfLeT) (bytevector-s64-ref . g$8324$1IfLeT) (bytevector-s64-native-set! . g$8330$1IfLeT) (bytevector-s64-native-ref . g$8326$1IfLeT) (bytevector-s32-set! . g$8320$1IfLeT) (bytevector-s32-ref . g$8316$1IfLeT) (bytevector-s32-native-set! . g$8322$1IfLeT) (bytevector-s32-native-ref . g$8318$1IfLeT) (bytevector-s16-set! . g$8312$1IfLeT) (bytevector-s16-ref . g$8308$1IfLeT) (bytevector-s16-native-set! . g$8314$1IfLeT) (bytevector-s16-native-ref . g$8310$1IfLeT) (bytevector-length . g$15764$1IfLeT) (bytevector-ieee-single-set! . g$15763$1IfLeT) (bytevector-ieee-single-ref . g$15762$1IfLeT) (bytevector-ieee-single-native-set! . g$8333$1IfLeT) (bytevector-ieee-single-native-ref . g$8331$1IfLeT) (bytevector-ieee-double-set! . g$15761$1IfLeT) (bytevector-ieee-double-ref . g$15760$1IfLeT) (bytevector-ieee-double-native-set! . g$8334$1IfLeT) (bytevector-ieee-double-native-ref . g$8332$1IfLeT) (bytevector-fill! . g$15759$1IfLeT) (bytevector-copy! . g$15758$1IfLeT) (bytevector-copy . g$15757$1IfLeT) (bytevector->uint-list . g$15756$1IfLeT) (bytevector->u8-list . g$15755$1IfLeT) (bytevector->sint-list . g$15754$1IfLeT) (no-nans-violation? . g$8789$1IfLeT) (no-infinities-violation? . g$8777$1IfLeT) (make-no-nans-violation . g$8788$1IfLeT) (make-no-infinities-violation . g$8776$1IfLeT) (real->flonum . g$15753$1IfLeT) (flzero? . g$15752$1IfLeT) (fltruncate . g$15751$1IfLeT) (fltan . g$15750$1IfLeT) (flsqrt . g$15749$1IfLeT) (flsin . g$15748$1IfLeT) (flround . g$15747$1IfLeT) (flpositive? . g$15746$1IfLeT) (flonum? . g$15745$1IfLeT) (flodd? . g$15744$1IfLeT) (flnumerator . g$15743$1IfLeT) (flnegative? . g$15742$1IfLeT) (flnan? . g$15741$1IfLeT) (flmod0 . g$15740$1IfLeT) (flmod . g$15739$1IfLeT) (flmin . g$15738$1IfLeT) (flmax . g$15737$1IfLeT) (fllog . g$15736$1IfLeT) (flinteger? . g$15735$1IfLeT) (flinfinite? . g$15734$1IfLeT) (flfloor . g$15733$1IfLeT) (flfinite? . g$15732$1IfLeT) (flexpt . g$15731$1IfLeT) (flexp . g$15730$1IfLeT) (fleven? . g$15729$1IfLeT) (fldiv0-and-mod0 . g$15728$1IfLeT) (fldiv0 . g$15727$1IfLeT) (fldiv-and-mod . g$15726$1IfLeT) (fldiv . g$15725$1IfLeT) (fldenominator . g$15724$1IfLeT) (flcos . g$15723$1IfLeT) (flceiling . g$15722$1IfLeT) (flatan . g$15721$1IfLeT) (flasin . g$15720$1IfLeT) (flacos . g$15719$1IfLeT) (flabs . g$15718$1IfLeT) (fl>? . g$15717$1IfLeT) (fl>=? . g$15716$1IfLeT) (fl=? . g$15715$1IfLeT) (fl<? . g$15714$1IfLeT) (fl<=? . g$15713$1IfLeT) (fl/ . g$15712$1IfLeT) (fl- . g$15711$1IfLeT) (fl+ . g$15710$1IfLeT) (fl* . g$15709$1IfLeT) (fixnum->flonum . g$15708$1IfLeT) (fxzero? . g$15707$1IfLeT) (fxxor . g$15706$1IfLeT) (fxrotate-bit-field . g$8724$1IfLeT) (fxreverse-bit-field . g$15705$1IfLeT) (fxpositive? . g$15704$1IfLeT) (fxodd? . g$15703$1IfLeT) (fxnot . g$15702$1IfLeT) (fxnegative? . g$15701$1IfLeT) (fxmod0 . g$15700$1IfLeT) (fxmod . g$15699$1IfLeT) (fxmin . g$15698$1IfLeT) (fxmax . g$15697$1IfLeT) (fxlength . g$15696$1IfLeT) (fxior . g$15695$1IfLeT) (fxif . g$8718$1IfLeT) (fxfirst-bit-set . g$15694$1IfLeT) (fxeven? . g$15693$1IfLeT) (fxdiv0-and-mod0 . g$15692$1IfLeT) (fxdiv0 . g$15691$1IfLeT) (fxdiv-and-mod . g$15690$1IfLeT) (fxdiv . g$15689$1IfLeT) (fxcopy-bit-field . g$8721$1IfLeT) (fxcopy-bit . g$8719$1IfLeT) (fxbit-set? . g$15688$1IfLeT) (fxbit-field . g$8720$1IfLeT) (fxbit-count . g$15687$1IfLeT) (fxarithmetic-shift-right . g$8723$1IfLeT) (fxarithmetic-shift-left . g$8722$1IfLeT) (fxarithmetic-shift . g$15686$1IfLeT) (fxand . g$15685$1IfLeT) (fx>? . g$15684$1IfLeT) (fx>=? . g$15683$1IfLeT) (fx=? . g$15682$1IfLeT) (fx<? . g$15681$1IfLeT) (fx<=? . g$15680$1IfLeT) (fx-/carry . g$15679$1IfLeT) (fx- . g$15678$1IfLeT) (fx+/carry . g$15677$1IfLeT) (fx+ . g$15676$1IfLeT) (fx*/carry . g$15675$1IfLeT) (fx* . g$15674$1IfLeT) (greatest-fixnum . g$15673$1IfLeT) (least-fixnum . g$15672$1IfLeT) (fixnum-width . g$15671$1IfLeT) (fixnum? . g$15670$1IfLeT) (bitwise-rotate-bit-field . g$8672$1IfLeT) (bitwise-reverse-bit-field . g$8673$1IfLeT) (bitwise-length . g$15669$1IfLeT) (bitwise-if . g$8666$1IfLeT) (bitwise-first-bit-set . g$15668$1IfLeT) (bitwise-copy-bit-field . g$8669$1IfLeT) (bitwise-copy-bit . g$8667$1IfLeT) (bitwise-bit-set? . g$15667$1IfLeT) (bitwise-bit-field . g$15666$1IfLeT) (bitwise-bit-count . g$15665$1IfLeT) (bitwise-xor . g$15664$1IfLeT) (bitwise-ior . g$15663$1IfLeT) (bitwise-and . g$15662$1IfLeT) (bitwise-not . g$15661$1IfLeT) (bitwise-arithmetic-shift-right . g$8671$1IfLeT) (bitwise-arithmetic-shift-left . g$8670$1IfLeT) (bitwise-arithmetic-shift . g$15660$1IfLeT) (zero? . g$15659$1IfLeT) (vector? . g$15658$1IfLeT) (vector-set! . g$15657$1IfLeT) (vector-ref . g$15656$1IfLeT) (vector-map . g$15655$1IfLeT) (vector-length . g$15654$1IfLeT) (vector-for-each . g$15653$1IfLeT) (vector-fill! . g$15652$1IfLeT) (vector->list . g$15651$1IfLeT) (vector . g$15650$1IfLeT) (values . g$15649$1IfLeT) (truncate . g$15648$1IfLeT) (tan . g$15647$1IfLeT) (symbol? . g$15646$1IfLeT) (symbol=? . g$15645$1IfLeT) (symbol->string . g$15644$1IfLeT) (substring . g$15643$1IfLeT) (string? . g$15642$1IfLeT) (string>? . g$15641$1IfLeT) (string>=? . g$15640$1IfLeT) (string=? . g$15639$1IfLeT) (string<? . g$15638$1IfLeT) (string<=? . g$15637$1IfLeT) (string-ref . g$15636$1IfLeT) (string-length . g$15635$1IfLeT) (string-for-each . g$15634$1IfLeT) (string-copy . g$15633$1IfLeT) (string-append . g$15632$1IfLeT) (string->symbol . g$15631$1IfLeT) (string->number . g$15630$1IfLeT) (string->list . g$15629$1IfLeT) (string . g$15628$1IfLeT) (sqrt . g$15627$1IfLeT) (sin . g$15626$1IfLeT) (round . g$15625$1IfLeT) (reverse . g$15624$1IfLeT) (real? . g$15623$1IfLeT) (real-valued? . g$15622$1IfLeT) (real-part . g$15621$1IfLeT) (rationalize . g$7934$1IfLeT) (rational? . g$15620$1IfLeT) (rational-valued? . g$15619$1IfLeT) (procedure? . g$15618$1IfLeT) (positive? . g$15617$1IfLeT) (pair? . g$15616$1IfLeT) (odd? . g$15615$1IfLeT) (numerator . g$15614$1IfLeT) (number? . g$15613$1IfLeT) (number->string . g$15612$1IfLeT) (null? . g$15611$1IfLeT) (not . g$15610$1IfLeT) (negative? . g$15609$1IfLeT) (nan? . g$15608$1IfLeT) (min . g$15607$1IfLeT) (max . g$15606$1IfLeT) (map . g$15605$1IfLeT) (make-vector . g$15604$1IfLeT) (make-string . g$15603$1IfLeT) (make-rectangular . g$15602$1IfLeT) (make-polar . g$15601$1IfLeT) (magnitude . g$15600$1IfLeT) (log . g$15599$1IfLeT) (list? . g$15598$1IfLeT) (list-tail . g$15597$1IfLeT) (list-ref . g$15596$1IfLeT) (list->vector . g$15595$1IfLeT) (list->string . g$15594$1IfLeT) (list . g$15593$1IfLeT) (length . g$15592$1IfLeT) (lcm . g$15591$1IfLeT) (integer? . g$15590$1IfLeT) (integer-valued? . g$15589$1IfLeT) (integer->char . g$15588$1IfLeT) (infinite? . g$15587$1IfLeT) (inexact? . g$15586$1IfLeT) (inexact . g$15585$1IfLeT) (imag-part . g$15584$1IfLeT) (gcd . g$15583$1IfLeT) (for-each . g$15582$1IfLeT) (floor . g$15581$1IfLeT) (finite? . g$15580$1IfLeT) (expt . g$15579$1IfLeT) (exp . g$15578$1IfLeT) (exact? . g$15577$1IfLeT) (exact-integer-sqrt . g$15576$1IfLeT) (exact . g$15575$1IfLeT) (even? . g$15574$1IfLeT) (error . g$15573$1IfLeT) (eqv? . g$15572$1IfLeT) (equal? . g$15571$1IfLeT) (eq? . g$15570$1IfLeT) (dynamic-wind . g$15569$1IfLeT) (div0-and-mod0 . g$15568$1IfLeT) (mod0 . g$15567$1IfLeT) (div0 . g$15566$1IfLeT) (div-and-mod . g$15565$1IfLeT) (mod . g$15564$1IfLeT) (div . g$15563$1IfLeT) (denominator . g$15562$1IfLeT) (cos . g$15561$1IfLeT) (cons . g$15560$1IfLeT) (complex? . g$15559$1IfLeT) (char? . g$15558$1IfLeT) (char>? . g$15557$1IfLeT) (char>=? . g$15556$1IfLeT) (char=? . g$15555$1IfLeT) (char<? . g$15554$1IfLeT) (char<=? . g$15553$1IfLeT) (char->integer . g$15552$1IfLeT) (ceiling . g$15551$1IfLeT) (call-with-values . g$15550$1IfLeT) (call/cc . g$15549$1IfLeT) (call-with-current-continuation . g$15548$1IfLeT) (cddddr . g$7933$1IfLeT) (cdddar . g$7932$1IfLeT) (cddadr . g$7931$1IfLeT) (cddaar . g$7930$1IfLeT) (cdaddr . g$7929$1IfLeT) (cdadar . g$7928$1IfLeT) (cdaadr . g$7927$1IfLeT) (cdaaar . g$7926$1IfLeT) (cadddr . g$7925$1IfLeT) (caddar . g$7924$1IfLeT) (cadadr . g$7923$1IfLeT) (cadaar . g$7922$1IfLeT) (caaddr . g$7921$1IfLeT) (caadar . g$7920$1IfLeT) (caaadr . g$7919$1IfLeT) (caaaar . g$7918$1IfLeT) (cdddr . g$7917$1IfLeT) (cddar . g$7916$1IfLeT) (cdadr . g$7915$1IfLeT) (cdaar . g$7914$1IfLeT) (caddr . g$7913$1IfLeT) (cadar . g$7912$1IfLeT) (caadr . g$7911$1IfLeT) (caaar . g$7910$1IfLeT) (cddr . g$7909$1IfLeT) (cdar . g$7908$1IfLeT) (cadr . g$7907$1IfLeT) (caar . g$7906$1IfLeT) (cdr . g$15547$1IfLeT) (car . g$15546$1IfLeT) (boolean? . g$15545$1IfLeT) (boolean=? . g$15544$1IfLeT) (atan . g$15543$1IfLeT) (assertion-violation . g$15542$1IfLeT) (asin . g$15541$1IfLeT) (apply . g$15540$1IfLeT) (append . g$15539$1IfLeT) (angle . g$15538$1IfLeT) (acos . g$15537$1IfLeT) (abs . g$15536$1IfLeT) (/ . g$15535$1IfLeT) (* . g$15534$1IfLeT) (- . g$15533$1IfLeT) (+ . g$15532$1IfLeT) (>= . g$15531$1IfLeT) (> . g$15530$1IfLeT) (= . g$15529$1IfLeT) (<= . g$15528$1IfLeT) (< . g$15527$1IfLeT) (make-record-printer . g$15526$1IfLeT) (vector-append . g$15525$1IfLeT) (vector-filter . g$15524$1IfLeT) (vector-reverse! . g$15523$1IfLeT) (vector-contains? . g$15522$1IfLeT) (vector-index-of . g$15521$1IfLeT) (vector-copy . g$15520$1IfLeT) (vector-binary-search . g$15519$1IfLeT) (get-output-string . g$15518$1IfLeT) (open-output-string . g$15517$1IfLeT) (open-input-string . g$15516$1IfLeT) (string-format . g$15515$1IfLeT) (make-traced-procedure . g$15514$1IfLeT) (pmap . g$15513$1IfLeT) (time-it . g$15512$1IfLeT) (make-parameter . g$8981$1IfLeT) (library-locator . g$15511$1IfLeT) (get-library-paths . g$15510$1IfLeT) (environment-symbols . g$9783$1IfLeT) (interaction-environment-symbols . g$9782$1IfLeT) (library-path . g$9141$1IfLeT) (library-extensions . g$9142$1IfLeT) (installed-libraries . g$9162$1IfLeT) (expand . g$9788$1IfLeT) (&no-nans . g$15509$1IfLeT) (&no-infinities . g$15508$1IfLeT) (&i/o-encoding . g$15507$1IfLeT) (&i/o-decoding . g$15506$1IfLeT) (&i/o-port . g$15505$1IfLeT) (&i/o-file-does-not-exist . g$15504$1IfLeT) (&i/o-file-already-exists . g$15503$1IfLeT) (&i/o-file-is-read-only . g$15502$1IfLeT) (&i/o-file-protection . g$15501$1IfLeT) (&i/o-filename . g$15500$1IfLeT) (&i/o-invalid-position . g$15499$1IfLeT) (&i/o-write . g$15498$1IfLeT) (&i/o-read . g$15497$1IfLeT) (&i/o . g$15496$1IfLeT) (&non-continuable . g$15495$1IfLeT) (&undefined . g$15494$1IfLeT) (&syntax . g$15493$1IfLeT) (&lexical . g$15492$1IfLeT) (&implementation-restriction . g$15491$1IfLeT) (&non . g$15490$1IfLeT) (&who . g$15489$1IfLeT) (&irritants . g$15488$1IfLeT) (&assertion . g$15487$1IfLeT) (&violation . g$15486$1IfLeT) (&error . g$15485$1IfLeT) (&serious . g$15484$1IfLeT) (&warning . g$15483$1IfLeT) (&message . g$15482$1IfLeT) (&condition . g$15481$1IfLeT) (define-condition-type . g$15480$1IfLeT) (define-enumeration . g$15479$1IfLeT) (define-record-type . g$15478$1IfLeT) (parent-rtd . g$15477$1IfLeT) (nongenerative . g$15476$1IfLeT) (opaque . g$15475$1IfLeT) (sealed . g$15474$1IfLeT) (protocol . g$15473$1IfLeT) (parent . g$15472$1IfLeT) (immutable . g$15471$1IfLeT) (mutable . g$15470$1IfLeT) (fields . g$15469$1IfLeT) (error-handling-mode . g$15468$1IfLeT) (file-options . g$15467$1IfLeT) (buffer-mode . g$15466$1IfLeT) (eol-style . g$15465$1IfLeT) (guard . g$15464$1IfLeT) (trace-define-syntax . g$15463$1IfLeT) (trace-define . g$15462$1IfLeT) (trace-lambda . g$15461$1IfLeT) (unsyntax-splicing . g$15460$1IfLeT) (unsyntax . g$15459$1IfLeT) (unquote-splicing . g$15458$1IfLeT) (unquote . g$15457$1IfLeT) (_ . g$15456$1IfLeT) (else . g$15455$1IfLeT) (=> . g$15454$1IfLeT) (... . g$15453$1IfLeT) (assert . g$15452$1IfLeT) (endianness . g$15451$1IfLeT) (delay . g$15450$1IfLeT) (time . g$15449$1IfLeT) (or . g$15448$1IfLeT) (and . g$15447$1IfLeT) (do . g$15446$1IfLeT) (cond . g$15445$1IfLeT) (let* . g$15444$1IfLeT) (let . g$15443$1IfLeT) (identifier-syntax . g$15442$1IfLeT) (with-syntax . g$15441$1IfLeT) (quasisyntax . g$15440$1IfLeT) (quasiquote . g$15439$1IfLeT) (syntax-rules . g$15438$1IfLeT) (include-into . g$15437$1IfLeT) (include . g$15436$1IfLeT) (define-struct . g$15435$1IfLeT) (let-values . g$15434$1IfLeT) (let*-values . g$15433$1IfLeT) (record-constructor-descriptor . g$15432$1IfLeT) (record-type-descriptor . g$15431$1IfLeT) (fluid-let-syntax . g$15430$1IfLeT) (case . g$15429$1IfLeT) (parameterize . g$15428$1IfLeT) (unless . g$15427$1IfLeT) (when . g$15426$1IfLeT) (if . g$15425$1IfLeT) (letrec* . g$15424$1IfLeT) (letrec . g$15423$1IfLeT) (type-descriptor . g$15422$1IfLeT) (case-lambda . g$15421$1IfLeT) (lambda . g$15420$1IfLeT) (syntax . g$15419$1IfLeT) (syntax-case . g$15418$1IfLeT) (quote . g$15417$1IfLeT) (foreign-call . g$15416$1IfLeT) (letrec-syntax . g$15415$1IfLeT) (let-syntax . g$15414$1IfLeT) (set! . g$15413$1IfLeT) (import . g$15412$1IfLeT) (library . g$15411$1IfLeT) (begin . g$15410$1IfLeT) (module . g$15409$1IfLeT) (define-syntax . g$15408$1IfLeT) (define . g$15407$1IfLeT)) '((g$9687$1IfLeT core-prim . ellipsis-map) (g$16060$1IfLeT core-prim . &no-nans-rcd) (g$16059$1IfLeT core-prim . &no-nans-rtd) (g$16058$1IfLeT core-prim . &no-infinities-rcd) (g$16057$1IfLeT core-prim . &no-infinities-rtd) (g$16056$1IfLeT core-prim . &i/o-encoding-rcd) (g$16055$1IfLeT core-prim . &i/o-encoding-rtd) (g$16054$1IfLeT core-prim . &i/o-decoding-rcd) (g$16053$1IfLeT core-prim . &i/o-decoding-rtd) (g$16052$1IfLeT core-prim . &i/o-port-rcd) (g$16051$1IfLeT core-prim . &i/o-port-rtd) (g$16050$1IfLeT core-prim . &i/o-file-does-not-exist-rcd) (g$16049$1IfLeT core-prim . &i/o-file-does-not-exist-rtd) (g$16048$1IfLeT core-prim . &i/o-file-already-exists-rcd) (g$16047$1IfLeT core-prim . &i/o-file-already-exists-rtd) (g$16046$1IfLeT core-prim . &i/o-fie-is-read-only-rcd) (g$16045$1IfLeT core-prim . &i/o-fie-is-read-only-rtd) (g$16044$1IfLeT core-prim . &i/o-file-protection-rcd) (g$16043$1IfLeT core-prim . &i/o-file-protection-rtd) (g$16042$1IfLeT core-prim . &i/o-filename-rcd) (g$16041$1IfLeT core-prim . &i/o-filename-rtd) (g$16040$1IfLeT core-prim . &i/o-invalid-position-rcd) (g$16039$1IfLeT core-prim . &i/o-invalid-position-rtd) (g$16038$1IfLeT core-prim . &i/o-write-rcd) (g$16037$1IfLeT core-prim . &i/o-write-rtd) (g$16036$1IfLeT core-prim . &i/o-read-rcd) (g$16035$1IfLeT core-prim . &i/o-read-rtd) (g$16034$1IfLeT core-prim . &i/o-rcd) (g$16033$1IfLeT core-prim . &i/o-rtd) (g$16032$1IfLeT core-prim . &undefined-rcd) (g$16031$1IfLeT core-prim . &undefined-rtd) (g$16030$1IfLeT core-prim . &syntax-rcd) (g$16029$1IfLeT core-prim . &syntax-rtd) (g$16028$1IfLeT core-prim . &lexical-rcd) (g$16027$1IfLeT core-prim . &lexical-rtd) (g$16026$1IfLeT core-prim . &implementation-restriction-rcd) (g$16025$1IfLeT core-prim . &implementation-restriction-rtd) (g$16024$1IfLeT core-prim . &non-continuable-rcd) (g$16023$1IfLeT core-prim . &non-continuable-rtd) (g$16022$1IfLeT core-prim . &who-rcd) (g$16021$1IfLeT core-prim . &who-rtd) (g$16020$1IfLeT core-prim . &irritants-rcd) (g$16019$1IfLeT core-prim . &irritants-rtd) (g$16018$1IfLeT core-prim . &assertion-rcd) (g$16017$1IfLeT core-prim . &assertion-rtd) (g$16016$1IfLeT core-prim . &violation-rcd) (g$16015$1IfLeT core-prim . &violation-rtd) (g$16014$1IfLeT core-prim . &error-rcd) (g$16013$1IfLeT core-prim . &error-rtd) (g$16012$1IfLeT core-prim . &serious-rcd) (g$16011$1IfLeT core-prim . &serious-rtd) (g$16010$1IfLeT core-prim . &warning-rcd) (g$16009$1IfLeT core-prim . &warning-rtd) (g$16008$1IfLeT core-prim . &message-rcd) (g$16007$1IfLeT core-prim . &message-rtd) (g$16006$1IfLeT core-prim . &condition-rcd) (g$16005$1IfLeT core-prim . &condition-rtd) (g$16004$1IfLeT core-prim . library-letrec*) (g$16003$1IfLeT core-prim . annotation-stripped) (g$16002$1IfLeT core-prim . annotation-source) (g$16001$1IfLeT core-prim . annotation-expression) (g$16000$1IfLeT core-prim . annotation?) (g$15999$1IfLeT core-prim . read-annotated) (g$15998$1IfLeT core-prim . tanh) (g$15997$1IfLeT core-prim . cosh) (g$15996$1IfLeT core-prim . sinh) (g$15995$1IfLeT core-prim . make-guid) (g$15994$1IfLeT core-prim . unspecified?) (g$15993$1IfLeT core-prim . make-trace) (g$15992$1IfLeT core-prim . make-list) (g$15991$1IfLeT core-prim . last-pair) (g$15990$1IfLeT core-prim . load-r5rs) (g$15989$1IfLeT core-prim . license) (g$15988$1IfLeT core-prim . stacktrace) (g$15386$1IfLeT core-prim . ironscheme-build) (g$15987$1IfLeT core-prim . define-clr-class-internal) (g$15986$1IfLeT core-prim . clr-field-set!-internal) (g$15985$1IfLeT core-prim . clr-field-get-internal) (g$15984$1IfLeT core-prim . clr-cast-internal) (g$15983$1IfLeT core-prim . clr-call-internal) (g$15982$1IfLeT core-prim . clr-new-internal) (g$15981$1IfLeT core-prim . clr-new-array-internal) (g$15980$1IfLeT core-prim . clr-is-internal) (g$15979$1IfLeT core-prim . clr-reference-internal) (g$15978$1IfLeT core-prim . clr-using-internal) (g$15977$1IfLeT core-prim . clr-clear-usings-internal) (g$9800$1IfLeT core-prim . syntax-error) (g$9684$1IfLeT core-prim . syntax-dispatch) (g$15976$1IfLeT core-prim . eval-core) (g$15975$1IfLeT core-prim . set-symbol-value!) (g$15974$1IfLeT core-prim . symbol-value) (g$15973$1IfLeT core-prim . ungensym) (g$15972$1IfLeT core-prim . gensym) (g$15971$1IfLeT core-prim . void) (g$15970$1IfLeT core-prim . load-serialized-library) (g$15969$1IfLeT core-prim . serialize-library) (g$15388$1IfLeT core-prim . compile-system-libraries) (g$15390$1IfLeT core-prim . compile->closure) (g$15389$1IfLeT core-prim . compile) (g$15385$1IfLeT core-prim . load) (g$9808$1IfLeT core-prim . interaction-environment) (g$15968$1IfLeT core-prim . char-ready?) (g$15967$1IfLeT core-prim . string-upcase) (g$15966$1IfLeT core-prim . string-titlecase) (g$15965$1IfLeT core-prim . string-normalize-nfkd) (g$15964$1IfLeT core-prim . string-normalize-nfkc) (g$15963$1IfLeT core-prim . string-normalize-nfd) (g$15962$1IfLeT core-prim . string-normalize-nfc) (g$15961$1IfLeT core-prim . string-foldcase) (g$15960$1IfLeT core-prim . string-downcase) (g$15959$1IfLeT core-prim . string-ci>?) (g$15958$1IfLeT core-prim . string-ci>=?) (g$15957$1IfLeT core-prim . string-ci=?) (g$15956$1IfLeT core-prim . string-ci<?) (g$15955$1IfLeT core-prim . string-ci<=?) (g$15954$1IfLeT core-prim . char-whitespace?) (g$15953$1IfLeT core-prim . char-upper-case?) (g$15952$1IfLeT core-prim . char-title-case?) (g$15951$1IfLeT core-prim . char-numeric?) (g$15950$1IfLeT core-prim . char-lower-case?) (g$15949$1IfLeT core-prim . char-general-category) (g$15948$1IfLeT core-prim . char-upcase) (g$15947$1IfLeT core-prim . char-titlecase) (g$15946$1IfLeT core-prim . char-foldcase) (g$15945$1IfLeT core-prim . char-downcase) (g$15944$1IfLeT core-prim . char-ci>?) (g$15943$1IfLeT core-prim . char-ci>=?) (g$15942$1IfLeT core-prim . char-ci=?) (g$15941$1IfLeT core-prim . char-ci<?) (g$15940$1IfLeT core-prim . char-ci<=?) (g$15939$1IfLeT core-prim . char-alphabetic?) (g$9511$1IfLeT core-prim . make-variable-transformer) (g$9804$1IfLeT core-prim . identifier?) (g$9796$1IfLeT core-prim . generate-temporaries) (g$9797$1IfLeT core-prim . free-identifier=?) (g$9806$1IfLeT core-prim . syntax->datum) (g$9805$1IfLeT core-prim . datum->syntax) (g$9798$1IfLeT core-prim . bound-identifier=?) (g$15938$1IfLeT core-prim . record-type-descriptor?) (g$15937$1IfLeT core-prim . record-predicate) (g$15936$1IfLeT core-prim . record-mutator) (g$15935$1IfLeT core-prim . record-constructor) (g$15934$1IfLeT core-prim . record-accessor) (g$15933$1IfLeT core-prim . make-record-type-descriptor) (g$15932$1IfLeT core-prim . make-record-constructor-descriptor) (g$15931$1IfLeT core-prim . record?) (g$15930$1IfLeT core-prim . record-type-uid) (g$15929$1IfLeT core-prim . record-type-sealed?) (g$15928$1IfLeT core-prim . record-type-parent) (g$15927$1IfLeT core-prim . record-type-opaque?) (g$15926$1IfLeT core-prim . record-type-name) (g$15925$1IfLeT core-prim . record-type-generative?) (g$15924$1IfLeT core-prim . record-type-field-names) (g$15923$1IfLeT core-prim . record-rtd) (g$15922$1IfLeT core-prim . record-field-mutable?) (g$8194$1IfLeT core-prim . delete-file) (g$8193$1IfLeT core-prim . file-exists?) (g$15921$1IfLeT core-prim . vector-sort!) (g$15920$1IfLeT core-prim . vector-sort) (g$8623$1IfLeT core-prim . list-sort) (g$15919$1IfLeT core-prim . symbol-hash) (g$15918$1IfLeT core-prim . string-ci-hash) (g$15917$1IfLeT core-prim . string-hash) (g$15916$1IfLeT core-prim . equal-hash) (g$8167$1IfLeT core-prim . hashtable-equivalence-function) (g$15915$1IfLeT core-prim . make-hashtable) (g$8168$1IfLeT core-prim . hashtable-hash-function) (g$8159$1IfLeT core-prim . make-eqv-hashtable) (g$8158$1IfLeT core-prim . make-eq-hashtable) (g$15914$1IfLeT core-prim . hashtable?) (g$8165$1IfLeT core-prim . hashtable-update!) (g$8160$1IfLeT core-prim . hashtable-size) (g$8162$1IfLeT core-prim . hashtable-set!) (g$8161$1IfLeT core-prim . hashtable-ref) (g$15913$1IfLeT core-prim . hashtable-mutable?) (g$15912$1IfLeT core-prim . hashtable-keys) (g$15911$1IfLeT core-prim . hashtable-entries) (g$8163$1IfLeT core-prim . hashtable-delete!) (g$15910$1IfLeT core-prim . hashtable-copy) (g$8164$1IfLeT core-prim . hashtable-contains?) (g$8166$1IfLeT core-prim . hashtable-clear!) (g$15909$1IfLeT core-prim . call-with-output-file) (g$15908$1IfLeT core-prim . call-with-input-file) (g$15907$1IfLeT core-prim . write-char) (g$15906$1IfLeT core-prim . write) (g$15905$1IfLeT core-prim . with-output-to-file) (g$15904$1IfLeT core-prim . with-input-from-file) (g$15903$1IfLeT core-prim . read-char) (g$15902$1IfLeT core-prim . read) (g$15901$1IfLeT core-prim . peek-char) (g$15900$1IfLeT core-prim . open-output-file) (g$15899$1IfLeT core-prim . open-input-file) (g$15898$1IfLeT core-prim . newline) (g$15897$1IfLeT core-prim . display) (g$15896$1IfLeT core-prim . close-output-port) (g$15895$1IfLeT core-prim . close-input-port) (g$15894$1IfLeT core-prim . eof-object?) (g$15893$1IfLeT core-prim . eof-object) (g$15892$1IfLeT core-prim . current-error-port) (g$15891$1IfLeT core-prim . current-output-port) (g$15890$1IfLeT core-prim . current-input-port) (g$15889$1IfLeT core-prim . output-port?) (g$15888$1IfLeT core-prim . input-port?) (g$15887$1IfLeT core-prim . utf-8-codec) (g$15886$1IfLeT core-prim . utf-16-codec) (g$15885$1IfLeT core-prim . transcoder-error-handling-mode) (g$15884$1IfLeT core-prim . transcoder-eol-style) (g$15883$1IfLeT core-prim . transcoder-codec) (g$15882$1IfLeT core-prim . transcoded-port) (g$15881$1IfLeT core-prim . textual-port?) (g$15880$1IfLeT core-prim . string->bytevector) (g$15879$1IfLeT core-prim . standard-output-port) (g$15878$1IfLeT core-prim . standard-input-port) (g$15877$1IfLeT core-prim . standard-error-port) (g$15876$1IfLeT core-prim . set-port-position!) (g$15875$1IfLeT core-prim . put-u8) (g$15874$1IfLeT core-prim . put-string) (g$15873$1IfLeT core-prim . put-datum) (g$15872$1IfLeT core-prim . put-char) (g$15871$1IfLeT core-prim . put-bytevector) (g$15870$1IfLeT core-prim . port?) (g$15869$1IfLeT core-prim . port-transcoder) (g$15868$1IfLeT core-prim . port-position) (g$15867$1IfLeT core-prim . port-has-set-port-position!?) (g$15866$1IfLeT core-prim . port-has-port-position?) (g$15865$1IfLeT core-prim . port-eof?) (g$15864$1IfLeT core-prim . output-port-buffer-mode) (g$8950$1IfLeT core-prim . open-string-output-port) (g$15863$1IfLeT core-prim . open-string-input-port) (g$15862$1IfLeT core-prim . open-file-output-port) (g$15861$1IfLeT core-prim . open-file-input/output-port) (g$15860$1IfLeT core-prim . open-file-input-port) (g$15859$1IfLeT core-prim . open-bytevector-output-port) (g$15858$1IfLeT core-prim . open-bytevector-input-port) (g$15857$1IfLeT core-prim . native-transcoder) (g$15856$1IfLeT core-prim . native-eol-style) (g$15855$1IfLeT core-prim . make-transcoder) (g$15854$1IfLeT core-prim . latin-1-codec) (g$8825$1IfLeT core-prim . make-i/o-write-error) (g$8813$1IfLeT core-prim . make-i/o-read-error) (g$8916$1IfLeT core-prim . make-i/o-port-error) (g$8838$1IfLeT core-prim . make-i/o-invalid-position-error) (g$8853$1IfLeT core-prim . make-i/o-filename-error) (g$8867$1IfLeT core-prim . make-i/o-file-protection-error) (g$8879$1IfLeT core-prim . make-i/o-file-is-read-only-error) (g$8903$1IfLeT core-prim . make-i/o-file-does-not-exist-error) (g$8891$1IfLeT core-prim . make-i/o-file-already-exists-error) (g$8801$1IfLeT core-prim . make-i/o-error) (g$8943$1IfLeT core-prim . make-i/o-encoding-error) (g$8930$1IfLeT core-prim . make-i/o-decoding-error) (g$15853$1IfLeT core-prim . make-custom-textual-output-port) (g$15852$1IfLeT core-prim . make-custom-textual-input/output-port) (g$15851$1IfLeT core-prim . make-custom-textual-input-port) (g$15850$1IfLeT core-prim . make-custom-binary-output-port) (g$15849$1IfLeT core-prim . make-custom-binary-input/output-port) (g$15848$1IfLeT core-prim . make-custom-binary-input-port) (g$15847$1IfLeT core-prim . make-bytevector) (g$15846$1IfLeT core-prim . lookahead-u8) (g$15845$1IfLeT core-prim . lookahead-char) (g$8826$1IfLeT core-prim . i/o-write-error?) (g$8814$1IfLeT core-prim . i/o-read-error?) (g$8918$1IfLeT core-prim . i/o-port-error?) (g$8840$1IfLeT core-prim . i/o-invalid-position-error?) (g$8855$1IfLeT core-prim . i/o-filename-error?) (g$8868$1IfLeT core-prim . i/o-file-protection-error?) (g$8880$1IfLeT core-prim . i/o-file-is-read-only-error?) (g$8904$1IfLeT core-prim . i/o-file-does-not-exist-error?) (g$8892$1IfLeT core-prim . i/o-file-already-exists-error?) (g$8802$1IfLeT core-prim . i/o-error?) (g$8919$1IfLeT core-prim . i/o-error-port) (g$8856$1IfLeT core-prim . i/o-error-filename) (g$8945$1IfLeT core-prim . i/o-encoding-error?) (g$8946$1IfLeT core-prim . i/o-encoding-error-char) (g$8931$1IfLeT core-prim . i/o-decoding-error?) (g$15844$1IfLeT core-prim . get-u8) (g$15843$1IfLeT core-prim . get-string-n!) (g$15842$1IfLeT core-prim . get-string-n) (g$15841$1IfLeT core-prim . get-string-all) (g$15840$1IfLeT core-prim . get-line) (g$15839$1IfLeT core-prim . get-datum) (g$15838$1IfLeT core-prim . get-char) (g$15837$1IfLeT core-prim . get-bytevector-some) (g$15836$1IfLeT core-prim . get-bytevector-n!) (g$15835$1IfLeT core-prim . get-bytevector-n) (g$15834$1IfLeT core-prim . get-bytevector-all) (g$15833$1IfLeT core-prim . flush-output-port) (g$15832$1IfLeT core-prim . close-port) (g$15831$1IfLeT core-prim . call-with-string-output-port) (g$15830$1IfLeT core-prim . call-with-port) (g$15829$1IfLeT core-prim . call-with-bytevector-output-port) (g$15828$1IfLeT core-prim . bytevector->string) (g$15827$1IfLeT core-prim . buffer-mode?) (g$15826$1IfLeT core-prim . binary-port?) (g$9787$1IfLeT core-prim . scheme-report-environment) (g$8610$1IfLeT core-prim . quotient) (g$9786$1IfLeT core-prim . null-environment) (g$8611$1IfLeT core-prim . remainder) (g$8612$1IfLeT core-prim . modulo) (g$15825$1IfLeT core-prim . inexact->exact) (g$15824$1IfLeT core-prim . force) (g$15823$1IfLeT core-prim . exact->inexact) (g$15822$1IfLeT core-prim . exit) (g$15821$1IfLeT core-prim . command-line) (g$15820$1IfLeT core-prim . string-fill!) (g$15819$1IfLeT core-prim . string-set!) (g$15818$1IfLeT core-prim . set-cdr!) (g$15817$1IfLeT core-prim . set-car!) (g$8265$1IfLeT core-prim . remove) (g$8266$1IfLeT core-prim . remv) (g$15816$1IfLeT core-prim . remp) (g$8267$1IfLeT core-prim . remq) (g$15815$1IfLeT core-prim . partition) (g$15814$1IfLeT core-prim . memv) (g$15813$1IfLeT core-prim . memq) (g$15812$1IfLeT core-prim . memp) (g$15811$1IfLeT core-prim . member) (g$8261$1IfLeT core-prim . exists) (g$8260$1IfLeT core-prim . for-all) (g$8264$1IfLeT core-prim . fold-right) (g$8263$1IfLeT core-prim . fold-left) (g$15810$1IfLeT core-prim . find) (g$15809$1IfLeT core-prim . filter) (g$8262$1IfLeT core-prim . cons*) (g$15808$1IfLeT core-prim . assv) (g$15807$1IfLeT core-prim . assq) (g$15806$1IfLeT core-prim . assp) (g$15805$1IfLeT core-prim . assoc) (g$15804$1IfLeT core-prim . with-exception-handler) (g$15803$1IfLeT core-prim . raise-continuable) (g$15802$1IfLeT core-prim . raise) (g$9789$1IfLeT core-prim . eval) (g$9785$1IfLeT core-prim . environment) (g$15801$1IfLeT core-prim . make-enumeration) (g$15800$1IfLeT core-prim . enum-set=?) (g$15799$1IfLeT core-prim . enum-set-universe) (g$15798$1IfLeT core-prim . enum-set-union) (g$15797$1IfLeT core-prim . enum-set-subset?) (g$15796$1IfLeT core-prim . enum-set-projection) (g$15795$1IfLeT core-prim . enum-set-member?) (g$15794$1IfLeT core-prim . enum-set-intersection) (g$15793$1IfLeT core-prim . enum-set-indexer) (g$15792$1IfLeT core-prim . enum-set-difference) (g$15791$1IfLeT core-prim . enum-set-constructor) (g$15790$1IfLeT core-prim . enum-set-complement) (g$15789$1IfLeT core-prim . enum-set->list) (g$8537$1IfLeT core-prim . who-condition?) (g$8460$1IfLeT core-prim . warning?) (g$8496$1IfLeT core-prim . violation?) (g$8604$1IfLeT core-prim . undefined-violation?) (g$8590$1IfLeT core-prim . syntax-violation?) (g$8592$1IfLeT core-prim . syntax-violation-subform) (g$8591$1IfLeT core-prim . syntax-violation-form) (g$9803$1IfLeT core-prim . syntax-violation) (g$15788$1IfLeT core-prim . simple-conditions) (g$8472$1IfLeT core-prim . serious-condition?) (g$8550$1IfLeT core-prim . non-continuable-violation?) (g$8447$1IfLeT core-prim . message-condition?) (g$8535$1IfLeT core-prim . make-who-condition) (g$8459$1IfLeT core-prim . make-warning) (g$8495$1IfLeT core-prim . make-violation) (g$8603$1IfLeT core-prim . make-undefined-violation) (g$8587$1IfLeT core-prim . make-syntax-violation) (g$8471$1IfLeT core-prim . make-serious-condition) (g$8549$1IfLeT core-prim . make-non-continuable-violation) (g$8445$1IfLeT core-prim . make-message-condition) (g$8573$1IfLeT core-prim . make-lexical-violation) (g$8520$1IfLeT core-prim . make-irritants-condition) (g$8561$1IfLeT core-prim . make-implementation-restriction-violation) (g$8483$1IfLeT core-prim . make-error) (g$8507$1IfLeT core-prim . make-assertion-violation) (g$8574$1IfLeT core-prim . lexical-violation?) (g$8522$1IfLeT core-prim . irritants-condition?) (g$8562$1IfLeT core-prim . implementation-restriction-violation?) (g$8484$1IfLeT core-prim . error?) (g$8538$1IfLeT core-prim . condition-who) (g$15787$1IfLeT core-prim . condition-predicate) (g$8448$1IfLeT core-prim . condition-message) (g$8523$1IfLeT core-prim . condition-irritants) (g$15786$1IfLeT core-prim . condition-accessor) (g$15785$1IfLeT core-prim . condition) (g$8508$1IfLeT core-prim . assertion-violation?) (g$15784$1IfLeT core-prim . condition?) (g$15783$1IfLeT core-prim . utf32->string) (g$15782$1IfLeT core-prim . utf16->string) (g$15781$1IfLeT core-prim . utf8->string) (g$15780$1IfLeT core-prim . uint-list->bytevector) (g$15779$1IfLeT core-prim . u8-list->bytevector) (g$15778$1IfLeT core-prim . string->utf8) (g$15777$1IfLeT core-prim . string->utf32) (g$15776$1IfLeT core-prim . string->utf16) (g$15775$1IfLeT core-prim . sint-list->bytevector) (g$8306$1IfLeT core-prim . native-endianness) (g$15774$1IfLeT core-prim . bytevector?) (g$15773$1IfLeT core-prim . bytevector=?) (g$15772$1IfLeT core-prim . bytevector-uint-set!) (g$15771$1IfLeT core-prim . bytevector-uint-ref) (g$15770$1IfLeT core-prim . bytevector-u8-set!) (g$15769$1IfLeT core-prim . bytevector-u8-ref) (g$8327$1IfLeT core-prim . bytevector-u64-set!) (g$8323$1IfLeT core-prim . bytevector-u64-ref) (g$8329$1IfLeT core-prim . bytevector-u64-native-set!) (g$8325$1IfLeT core-prim . bytevector-u64-native-ref) (g$8319$1IfLeT core-prim . bytevector-u32-set!) (g$8315$1IfLeT core-prim . bytevector-u32-ref) (g$8321$1IfLeT core-prim . bytevector-u32-native-set!) (g$8317$1IfLeT core-prim . bytevector-u32-native-ref) (g$8311$1IfLeT core-prim . bytevector-u16-set!) (g$8307$1IfLeT core-prim . bytevector-u16-ref) (g$8313$1IfLeT core-prim . bytevector-u16-native-set!) (g$8309$1IfLeT core-prim . bytevector-u16-native-ref) (g$15768$1IfLeT core-prim . bytevector-sint-set!) (g$15767$1IfLeT core-prim . bytevector-sint-ref) (g$15766$1IfLeT core-prim . bytevector-s8-set!) (g$15765$1IfLeT core-prim . bytevector-s8-ref) (g$8328$1IfLeT core-prim . bytevector-s64-set!) (g$8324$1IfLeT core-prim . bytevector-s64-ref) (g$8330$1IfLeT core-prim . bytevector-s64-native-set!) (g$8326$1IfLeT core-prim . bytevector-s64-native-ref) (g$8320$1IfLeT core-prim . bytevector-s32-set!) (g$8316$1IfLeT core-prim . bytevector-s32-ref) (g$8322$1IfLeT core-prim . bytevector-s32-native-set!) (g$8318$1IfLeT core-prim . bytevector-s32-native-ref) (g$8312$1IfLeT core-prim . bytevector-s16-set!) (g$8308$1IfLeT core-prim . bytevector-s16-ref) (g$8314$1IfLeT core-prim . bytevector-s16-native-set!) (g$8310$1IfLeT core-prim . bytevector-s16-native-ref) (g$15764$1IfLeT core-prim . bytevector-length) (g$15763$1IfLeT core-prim . bytevector-ieee-single-set!) (g$15762$1IfLeT core-prim . bytevector-ieee-single-ref) (g$8333$1IfLeT core-prim . bytevector-ieee-single-native-set!) (g$8331$1IfLeT core-prim . bytevector-ieee-single-native-ref) (g$15761$1IfLeT core-prim . bytevector-ieee-double-set!) (g$15760$1IfLeT core-prim . bytevector-ieee-double-ref) (g$8334$1IfLeT core-prim . bytevector-ieee-double-native-set!) (g$8332$1IfLeT core-prim . bytevector-ieee-double-native-ref) (g$15759$1IfLeT core-prim . bytevector-fill!) (g$15758$1IfLeT core-prim . bytevector-copy!) (g$15757$1IfLeT core-prim . bytevector-copy) (g$15756$1IfLeT core-prim . bytevector->uint-list) (g$15755$1IfLeT core-prim . bytevector->u8-list) (g$15754$1IfLeT core-prim . bytevector->sint-list) (g$8789$1IfLeT core-prim . no-nans-violation?) (g$8777$1IfLeT core-prim . no-infinities-violation?) (g$8788$1IfLeT core-prim . make-no-nans-violation) (g$8776$1IfLeT core-prim . make-no-infinities-violation) (g$15753$1IfLeT core-prim . real->flonum) (g$15752$1IfLeT core-prim . flzero?) (g$15751$1IfLeT core-prim . fltruncate) (g$15750$1IfLeT core-prim . fltan) (g$15749$1IfLeT core-prim . flsqrt) (g$15748$1IfLeT core-prim . flsin) (g$15747$1IfLeT core-prim . flround) (g$15746$1IfLeT core-prim . flpositive?) (g$15745$1IfLeT core-prim . flonum?) (g$15744$1IfLeT core-prim . flodd?) (g$15743$1IfLeT core-prim . flnumerator) (g$15742$1IfLeT core-prim . flnegative?) (g$15741$1IfLeT core-prim . flnan?) (g$15740$1IfLeT core-prim . flmod0) (g$15739$1IfLeT core-prim . flmod) (g$15738$1IfLeT core-prim . flmin) (g$15737$1IfLeT core-prim . flmax) (g$15736$1IfLeT core-prim . fllog) (g$15735$1IfLeT core-prim . flinteger?) (g$15734$1IfLeT core-prim . flinfinite?) (g$15733$1IfLeT core-prim . flfloor) (g$15732$1IfLeT core-prim . flfinite?) (g$15731$1IfLeT core-prim . flexpt) (g$15730$1IfLeT core-prim . flexp) (g$15729$1IfLeT core-prim . fleven?) (g$15728$1IfLeT core-prim . fldiv0-and-mod0) (g$15727$1IfLeT core-prim . fldiv0) (g$15726$1IfLeT core-prim . fldiv-and-mod) (g$15725$1IfLeT core-prim . fldiv) (g$15724$1IfLeT core-prim . fldenominator) (g$15723$1IfLeT core-prim . flcos) (g$15722$1IfLeT core-prim . flceiling) (g$15721$1IfLeT core-prim . flatan) (g$15720$1IfLeT core-prim . flasin) (g$15719$1IfLeT core-prim . flacos) (g$15718$1IfLeT core-prim . flabs) (g$15717$1IfLeT core-prim . fl>?) (g$15716$1IfLeT core-prim . fl>=?) (g$15715$1IfLeT core-prim . fl=?) (g$15714$1IfLeT core-prim . fl<?) (g$15713$1IfLeT core-prim . fl<=?) (g$15712$1IfLeT core-prim . fl/) (g$15711$1IfLeT core-prim . fl-) (g$15710$1IfLeT core-prim . fl+) (g$15709$1IfLeT core-prim . fl*) (g$15708$1IfLeT core-prim . fixnum->flonum) (g$15707$1IfLeT core-prim . fxzero?) (g$15706$1IfLeT core-prim . fxxor) (g$8724$1IfLeT core-prim . fxrotate-bit-field) (g$15705$1IfLeT core-prim . fxreverse-bit-field) (g$15704$1IfLeT core-prim . fxpositive?) (g$15703$1IfLeT core-prim . fxodd?) (g$15702$1IfLeT core-prim . fxnot) (g$15701$1IfLeT core-prim . fxnegative?) (g$15700$1IfLeT core-prim . fxmod0) (g$15699$1IfLeT core-prim . fxmod) (g$15698$1IfLeT core-prim . fxmin) (g$15697$1IfLeT core-prim . fxmax) (g$15696$1IfLeT core-prim . fxlength) (g$15695$1IfLeT core-prim . fxior) (g$8718$1IfLeT core-prim . fxif) (g$15694$1IfLeT core-prim . fxfirst-bit-set) (g$15693$1IfLeT core-prim . fxeven?) (g$15692$1IfLeT core-prim . fxdiv0-and-mod0) (g$15691$1IfLeT core-prim . fxdiv0) (g$15690$1IfLeT core-prim . fxdiv-and-mod) (g$15689$1IfLeT core-prim . fxdiv) (g$8721$1IfLeT core-prim . fxcopy-bit-field) (g$8719$1IfLeT core-prim . fxcopy-bit) (g$15688$1IfLeT core-prim . fxbit-set?) (g$8720$1IfLeT core-prim . fxbit-field) (g$15687$1IfLeT core-prim . fxbit-count) (g$8723$1IfLeT core-prim . fxarithmetic-shift-right) (g$8722$1IfLeT core-prim . fxarithmetic-shift-left) (g$15686$1IfLeT core-prim . fxarithmetic-shift) (g$15685$1IfLeT core-prim . fxand) (g$15684$1IfLeT core-prim . fx>?) (g$15683$1IfLeT core-prim . fx>=?) (g$15682$1IfLeT core-prim . fx=?) (g$15681$1IfLeT core-prim . fx<?) (g$15680$1IfLeT core-prim . fx<=?) (g$15679$1IfLeT core-prim . fx-/carry) (g$15678$1IfLeT core-prim . fx-) (g$15677$1IfLeT core-prim . fx+/carry) (g$15676$1IfLeT core-prim . fx+) (g$15675$1IfLeT core-prim . fx*/carry) (g$15674$1IfLeT core-prim . fx*) (g$15673$1IfLeT core-prim . greatest-fixnum) (g$15672$1IfLeT core-prim . least-fixnum) (g$15671$1IfLeT core-prim . fixnum-width) (g$15670$1IfLeT core-prim . fixnum?) (g$8672$1IfLeT core-prim . bitwise-rotate-bit-field) (g$8673$1IfLeT core-prim . bitwise-reverse-bit-field) (g$15669$1IfLeT core-prim . bitwise-length) (g$8666$1IfLeT core-prim . bitwise-if) (g$15668$1IfLeT core-prim . bitwise-first-bit-set) (g$8669$1IfLeT core-prim . bitwise-copy-bit-field) (g$8667$1IfLeT core-prim . bitwise-copy-bit) (g$15667$1IfLeT core-prim . bitwise-bit-set?) (g$15666$1IfLeT core-prim . bitwise-bit-field) (g$15665$1IfLeT core-prim . bitwise-bit-count) (g$15664$1IfLeT core-prim . bitwise-xor) (g$15663$1IfLeT core-prim . bitwise-ior) (g$15662$1IfLeT core-prim . bitwise-and) (g$15661$1IfLeT core-prim . bitwise-not) (g$8671$1IfLeT core-prim . bitwise-arithmetic-shift-right) (g$8670$1IfLeT core-prim . bitwise-arithmetic-shift-left) (g$15660$1IfLeT core-prim . bitwise-arithmetic-shift) (g$15659$1IfLeT core-prim . zero?) (g$15658$1IfLeT core-prim . vector?) (g$15657$1IfLeT core-prim . vector-set!) (g$15656$1IfLeT core-prim . vector-ref) (g$15655$1IfLeT core-prim . vector-map) (g$15654$1IfLeT core-prim . vector-length) (g$15653$1IfLeT core-prim . vector-for-each) (g$15652$1IfLeT core-prim . vector-fill!) (g$15651$1IfLeT core-prim . vector->list) (g$15650$1IfLeT core-prim . vector) (g$15649$1IfLeT core-prim . values) (g$15648$1IfLeT core-prim . truncate) (g$15647$1IfLeT core-prim . tan) (g$15646$1IfLeT core-prim . symbol?) (g$15645$1IfLeT core-prim . symbol=?) (g$15644$1IfLeT core-prim . symbol->string) (g$15643$1IfLeT core-prim . substring) (g$15642$1IfLeT core-prim . string?) (g$15641$1IfLeT core-prim . string>?) (g$15640$1IfLeT core-prim . string>=?) (g$15639$1IfLeT core-prim . string=?) (g$15638$1IfLeT core-prim . string<?) (g$15637$1IfLeT core-prim . string<=?) (g$15636$1IfLeT core-prim . string-ref) (g$15635$1IfLeT core-prim . string-length) (g$15634$1IfLeT core-prim . string-for-each) (g$15633$1IfLeT core-prim . string-copy) (g$15632$1IfLeT core-prim . string-append) (g$15631$1IfLeT core-prim . string->symbol) (g$15630$1IfLeT core-prim . string->number) (g$15629$1IfLeT core-prim . string->list) (g$15628$1IfLeT core-prim . string) (g$15627$1IfLeT core-prim . sqrt) (g$15626$1IfLeT core-prim . sin) (g$15625$1IfLeT core-prim . round) (g$15624$1IfLeT core-prim . reverse) (g$15623$1IfLeT core-prim . real?) (g$15622$1IfLeT core-prim . real-valued?) (g$15621$1IfLeT core-prim . real-part) (g$7934$1IfLeT core-prim . rationalize) (g$15620$1IfLeT core-prim . rational?) (g$15619$1IfLeT core-prim . rational-valued?) (g$15618$1IfLeT core-prim . procedure?) (g$15617$1IfLeT core-prim . positive?) (g$15616$1IfLeT core-prim . pair?) (g$15615$1IfLeT core-prim . odd?) (g$15614$1IfLeT core-prim . numerator) (g$15613$1IfLeT core-prim . number?) (g$15612$1IfLeT core-prim . number->string) (g$15611$1IfLeT core-prim . null?) (g$15610$1IfLeT core-prim . not) (g$15609$1IfLeT core-prim . negative?) (g$15608$1IfLeT core-prim . nan?) (g$15607$1IfLeT core-prim . min) (g$15606$1IfLeT core-prim . max) (g$15605$1IfLeT core-prim . map) (g$15604$1IfLeT core-prim . make-vector) (g$15603$1IfLeT core-prim . make-string) (g$15602$1IfLeT core-prim . make-rectangular) (g$15601$1IfLeT core-prim . make-polar) (g$15600$1IfLeT core-prim . magnitude) (g$15599$1IfLeT core-prim . log) (g$15598$1IfLeT core-prim . list?) (g$15597$1IfLeT core-prim . list-tail) (g$15596$1IfLeT core-prim . list-ref) (g$15595$1IfLeT core-prim . list->vector) (g$15594$1IfLeT core-prim . list->string) (g$15593$1IfLeT core-prim . list) (g$15592$1IfLeT core-prim . length) (g$15591$1IfLeT core-prim . lcm) (g$15590$1IfLeT core-prim . integer?) (g$15589$1IfLeT core-prim . integer-valued?) (g$15588$1IfLeT core-prim . integer->char) (g$15587$1IfLeT core-prim . infinite?) (g$15586$1IfLeT core-prim . inexact?) (g$15585$1IfLeT core-prim . inexact) (g$15584$1IfLeT core-prim . imag-part) (g$15583$1IfLeT core-prim . gcd) (g$15582$1IfLeT core-prim . for-each) (g$15581$1IfLeT core-prim . floor) (g$15580$1IfLeT core-prim . finite?) (g$15579$1IfLeT core-prim . expt) (g$15578$1IfLeT core-prim . exp) (g$15577$1IfLeT core-prim . exact?) (g$15576$1IfLeT core-prim . exact-integer-sqrt) (g$15575$1IfLeT core-prim . exact) (g$15574$1IfLeT core-prim . even?) (g$15573$1IfLeT core-prim . error) (g$15572$1IfLeT core-prim . eqv?) (g$15571$1IfLeT core-prim . equal?) (g$15570$1IfLeT core-prim . eq?) (g$15569$1IfLeT core-prim . dynamic-wind) (g$15568$1IfLeT core-prim . div0-and-mod0) (g$15567$1IfLeT core-prim . mod0) (g$15566$1IfLeT core-prim . div0) (g$15565$1IfLeT core-prim . div-and-mod) (g$15564$1IfLeT core-prim . mod) (g$15563$1IfLeT core-prim . div) (g$15562$1IfLeT core-prim . denominator) (g$15561$1IfLeT core-prim . cos) (g$15560$1IfLeT core-prim . cons) (g$15559$1IfLeT core-prim . complex?) (g$15558$1IfLeT core-prim . char?) (g$15557$1IfLeT core-prim . char>?) (g$15556$1IfLeT core-prim . char>=?) (g$15555$1IfLeT core-prim . char=?) (g$15554$1IfLeT core-prim . char<?) (g$15553$1IfLeT core-prim . char<=?) (g$15552$1IfLeT core-prim . char->integer) (g$15551$1IfLeT core-prim . ceiling) (g$15550$1IfLeT core-prim . call-with-values) (g$15549$1IfLeT core-prim . call/cc) (g$15548$1IfLeT core-prim . call-with-current-continuation) (g$7933$1IfLeT core-prim . cddddr) (g$7932$1IfLeT core-prim . cdddar) (g$7931$1IfLeT core-prim . cddadr) (g$7930$1IfLeT core-prim . cddaar) (g$7929$1IfLeT core-prim . cdaddr) (g$7928$1IfLeT core-prim . cdadar) (g$7927$1IfLeT core-prim . cdaadr) (g$7926$1IfLeT core-prim . cdaaar) (g$7925$1IfLeT core-prim . cadddr) (g$7924$1IfLeT core-prim . caddar) (g$7923$1IfLeT core-prim . cadadr) (g$7922$1IfLeT core-prim . cadaar) (g$7921$1IfLeT core-prim . caaddr) (g$7920$1IfLeT core-prim . caadar) (g$7919$1IfLeT core-prim . caaadr) (g$7918$1IfLeT core-prim . caaaar) (g$7917$1IfLeT core-prim . cdddr) (g$7916$1IfLeT core-prim . cddar) (g$7915$1IfLeT core-prim . cdadr) (g$7914$1IfLeT core-prim . cdaar) (g$7913$1IfLeT core-prim . caddr) (g$7912$1IfLeT core-prim . cadar) (g$7911$1IfLeT core-prim . caadr) (g$7910$1IfLeT core-prim . caaar) (g$7909$1IfLeT core-prim . cddr) (g$7908$1IfLeT core-prim . cdar) (g$7907$1IfLeT core-prim . cadr) (g$7906$1IfLeT core-prim . caar) (g$15547$1IfLeT core-prim . cdr) (g$15546$1IfLeT core-prim . car) (g$15545$1IfLeT core-prim . boolean?) (g$15544$1IfLeT core-prim . boolean=?) (g$15543$1IfLeT core-prim . atan) (g$15542$1IfLeT core-prim . assertion-violation) (g$15541$1IfLeT core-prim . asin) (g$15540$1IfLeT core-prim . apply) (g$15539$1IfLeT core-prim . append) (g$15538$1IfLeT core-prim . angle) (g$15537$1IfLeT core-prim . acos) (g$15536$1IfLeT core-prim . abs) (g$15535$1IfLeT core-prim . /) (g$15534$1IfLeT core-prim . *) (g$15533$1IfLeT core-prim . -) (g$15532$1IfLeT core-prim . +) (g$15531$1IfLeT core-prim . >=) (g$15530$1IfLeT core-prim . >) (g$15529$1IfLeT core-prim . =) (g$15528$1IfLeT core-prim . <=) (g$15527$1IfLeT core-prim . <) (g$15526$1IfLeT core-prim . make-record-printer) (g$15525$1IfLeT core-prim . vector-append) (g$15524$1IfLeT core-prim . vector-filter) (g$15523$1IfLeT core-prim . vector-reverse!) (g$15522$1IfLeT core-prim . vector-contains?) (g$15521$1IfLeT core-prim . vector-index-of) (g$15520$1IfLeT core-prim . vector-copy) (g$15519$1IfLeT core-prim . vector-binary-search) (g$15518$1IfLeT core-prim . get-output-string) (g$15517$1IfLeT core-prim . open-output-string) (g$15516$1IfLeT core-prim . open-input-string) (g$15515$1IfLeT core-prim . string-format) (g$15514$1IfLeT core-prim . make-traced-procedure) (g$15513$1IfLeT core-prim . pmap) (g$15512$1IfLeT core-prim . time-it) (g$8981$1IfLeT core-prim . make-parameter) (g$15511$1IfLeT core-prim . library-locator) (g$15510$1IfLeT core-prim . get-library-paths) (g$9783$1IfLeT core-prim . environment-symbols) (g$9782$1IfLeT core-prim . interaction-environment-symbols) (g$9141$1IfLeT core-prim . library-path) (g$9142$1IfLeT core-prim . library-extensions) (g$9162$1IfLeT core-prim . installed-libraries) (g$9788$1IfLeT core-prim . expand) (g$15509$1IfLeT $core-rtd &no-nans-rtd &no-nans-rcd) (g$15508$1IfLeT $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$15507$1IfLeT $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$15506$1IfLeT $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$15505$1IfLeT $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$15504$1IfLeT $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$15503$1IfLeT $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$15502$1IfLeT $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$15501$1IfLeT $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$15500$1IfLeT $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$15499$1IfLeT $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$15498$1IfLeT $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$15497$1IfLeT $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$15496$1IfLeT $core-rtd &i/o-rtd &i/o-rcd) (g$15495$1IfLeT $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$15494$1IfLeT $core-rtd &undefined-rtd &undefined-rcd) (g$15493$1IfLeT $core-rtd &syntax-rtd &syntax-rcd) (g$15492$1IfLeT $core-rtd &lexical-rtd &lexical-rcd) (g$15491$1IfLeT $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$15490$1IfLeT $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$15489$1IfLeT $core-rtd &who-rtd &who-rcd) (g$15488$1IfLeT $core-rtd &irritants-rtd &irritants-rcd) (g$15487$1IfLeT $core-rtd &assertion-rtd &assertion-rcd) (g$15486$1IfLeT $core-rtd &violation-rtd &violation-rcd) (g$15485$1IfLeT $core-rtd &error-rtd &error-rcd) (g$15484$1IfLeT $core-rtd &serious-rtd &serious-rcd) (g$15483$1IfLeT $core-rtd &warning-rtd &warning-rcd) (g$15482$1IfLeT $core-rtd &message-rtd &message-rcd) (g$15481$1IfLeT $core-rtd &condition-rtd &condition-rcd) (g$15480$1IfLeT macro . define-condition-type) (g$15479$1IfLeT macro . define-enumeration) (g$15478$1IfLeT macro . define-record-type) (g$15477$1IfLeT macro . parent-rtd) (g$15476$1IfLeT macro . nongenerative) (g$15475$1IfLeT macro . opaque) (g$15474$1IfLeT macro . sealed) (g$15473$1IfLeT macro . protocol) (g$15472$1IfLeT macro . parent) (g$15471$1IfLeT macro . immutable) (g$15470$1IfLeT macro . mutable) (g$15469$1IfLeT macro . fields) (g$15468$1IfLeT macro . error-handling-mode) (g$15467$1IfLeT macro . file-options) (g$15466$1IfLeT macro . buffer-mode) (g$15465$1IfLeT macro . eol-style) (g$15464$1IfLeT macro . guard) (g$15463$1IfLeT macro . trace-define-syntax) (g$15462$1IfLeT macro . trace-define) (g$15461$1IfLeT macro . trace-lambda) (g$15460$1IfLeT macro . unsyntax-splicing) (g$15459$1IfLeT macro . unsyntax) (g$15458$1IfLeT macro . unquote-splicing) (g$15457$1IfLeT macro . unquote) (g$15456$1IfLeT macro . _) (g$15455$1IfLeT macro . else) (g$15454$1IfLeT macro . =>) (g$15453$1IfLeT macro . ...) (g$15452$1IfLeT macro . assert) (g$15451$1IfLeT macro . endianness) (g$15450$1IfLeT macro . delay) (g$15449$1IfLeT macro . time) (g$15448$1IfLeT macro . or) (g$15447$1IfLeT macro . and) (g$15446$1IfLeT macro . do) (g$15445$1IfLeT macro . cond) (g$15444$1IfLeT macro . let*) (g$15443$1IfLeT macro . let) (g$15442$1IfLeT macro . identifier-syntax) (g$15441$1IfLeT macro . with-syntax) (g$15440$1IfLeT macro . quasisyntax) (g$15439$1IfLeT macro . quasiquote) (g$15438$1IfLeT macro . syntax-rules) (g$15437$1IfLeT macro . include-into) (g$15436$1IfLeT macro . include) (g$15435$1IfLeT macro . define-struct) (g$15434$1IfLeT macro . let-values) (g$15433$1IfLeT macro . let*-values) (g$15432$1IfLeT core-macro . record-constructor-descriptor) (g$15431$1IfLeT core-macro . record-type-descriptor) (g$15430$1IfLeT core-macro . fluid-let-syntax) (g$15429$1IfLeT core-macro . case) (g$15428$1IfLeT core-macro . parameterize) (g$15427$1IfLeT core-macro . unless) (g$15426$1IfLeT core-macro . when) (g$15425$1IfLeT core-macro . if) (g$15424$1IfLeT core-macro . letrec*) (g$15423$1IfLeT core-macro . letrec) (g$15422$1IfLeT core-macro . type-descriptor) (g$15421$1IfLeT core-macro . case-lambda) (g$15420$1IfLeT core-macro . lambda) (g$15419$1IfLeT core-macro . syntax) (g$15418$1IfLeT core-macro . syntax-case) (g$15417$1IfLeT core-macro . quote) (g$15416$1IfLeT core-macro . foreign-call) (g$15415$1IfLeT letrec-syntax) (g$15414$1IfLeT let-syntax) (g$15413$1IfLeT set!) (g$15412$1IfLeT import) (g$15411$1IfLeT library) (g$15410$1IfLeT begin) (g$15409$1IfLeT module) (g$15408$1IfLeT define-syntax) (g$15407$1IfLeT define)) values values '#f '#f '#f '#f) (g$install-library$9652$1IfLeT 'g$16096$1IfLeT '(psyntax system $bootstrap) '() '() '() '() '((eval-core . g$15976$1IfLeT) (set-symbol-value! . g$15975$1IfLeT) (symbol-value . g$15974$1IfLeT) (gensym . g$15972$1IfLeT) (void . g$15971$1IfLeT)) '() values values '#f '#f '#f '#f)))
(library-letrec* ((g$local-library-path$16333$1IfLeT g$local-library-path$16358$1IfLeT (case-lambda ((g$filename$16341$1IfLeT) (cons (g$get-directory-name$8429$1IfLeT g$filename$16341$1IfLeT) (g$library-path$9636$1IfLeT))))) (g$load$16334$1IfLeT g$load$16359$1IfLeT (case-lambda ((g$filename$16342$1IfLeT) (begin (g$load-r6rs-top-level$16340$1IfLeT g$filename$16342$1IfLeT 'load) (void))))) (g$ironscheme-build$16335$1IfLeT g$ironscheme-build$16360$1IfLeT (case-lambda (() (g$load$16334$1IfLeT '"ironscheme-buildscript.ss")))) (g$eval-top-level$16336$1IfLeT g$eval-top-level$16361$1IfLeT (case-lambda ((g$x$16343$1IfLeT) (g$eval$16312$1IfLeT g$x$16343$1IfLeT (g$interaction-environment$16331$1IfLeT))))) (g$compile-system-libraries$16337$1IfLeT g$compile-system-libraries$16362$1IfLeT (case-lambda (() (g$eval-top-level$16336$1IfLeT '(begin (include "system-libraries.ss") (compile "system-libraries.ss")))))) (g$compile$16338$1IfLeT g$compile$16363$1IfLeT (case-lambda ((g$filename$16344$1IfLeT) (g$load-r6rs-top-level$16340$1IfLeT g$filename$16344$1IfLeT 'compile)))) (g$compile->closure$16339$1IfLeT g$compile->closure$16364$1IfLeT (case-lambda ((g$filename$16345$1IfLeT) (g$load-r6rs-top-level$16340$1IfLeT g$filename$16345$1IfLeT 'closure)))) (g$load-r6rs-top-level$16340$1IfLeT g$load-r6rs-top-level$16365$1IfLeT (case-lambda ((g$filename$16346$1IfLeT g$how$16347$1IfLeT) ((case-lambda ((g$library-path$16350$1IfLeT g$library-path$16351$1IfLeT) ((case-lambda ((g$swap$16352$1IfLeT) (dynamic-wind g$swap$16352$1IfLeT (case-lambda (() ((case-lambda ((g$x*$16353$1IfLeT) ((case-lambda ((g$t$16354$1IfLeT) (if (memv g$t$16354$1IfLeT '(closure)) (g$compile-r6rs-top-level$16330$1IfLeT g$x*$16353$1IfLeT) (if (memv g$t$16354$1IfLeT '(load)) ((g$compile-r6rs-top-level$16330$1IfLeT g$x*$16353$1IfLeT)) (if (memv g$t$16354$1IfLeT '(compile)) (begin (g$compile-r6rs-top-level$16330$1IfLeT g$x*$16353$1IfLeT) (g$serialize-all$9640$1IfLeT serialize-library g$compile-core-expr$9367$1IfLeT)) (void)))))) g$how$16347$1IfLeT))) (with-input-from-file g$filename$16346$1IfLeT (case-lambda (() ((letrec ((g$f$16355$1IfLeT (case-lambda (() ((case-lambda ((g$x$16356$1IfLeT) (if (eof-object? g$x$16356$1IfLeT) '() (cons g$x$16356$1IfLeT (g$f$16355$1IfLeT))))) (read-annotated)))))) g$f$16355$1IfLeT)))))))) g$swap$16352$1IfLeT))) (case-lambda (() ((case-lambda ((g$t$16357$1IfLeT) (begin (g$library-path$16350$1IfLeT g$library-path$16351$1IfLeT) (set! g$library-path$16351$1IfLeT g$t$16357$1IfLeT)))) (g$library-path$16350$1IfLeT))))))) g$library-path$9636$1IfLeT (g$local-library-path$16333$1IfLeT g$filename$16346$1IfLeT)))))) (begin (g$current-precompiled-library-loader$9641$1IfLeT load-serialized-library) (set-symbol-value! 'load g$load$16334$1IfLeT) (set-symbol-value! 'compile g$compile$16338$1IfLeT) (set-symbol-value! 'compile->closure g$compile->closure$16339$1IfLeT) (set-symbol-value! 'eval-r6rs g$eval-top-level$16336$1IfLeT) (set-symbol-value! 'int-env-syms g$interaction-environment-symbols$16305$1IfLeT) (g$library-path$9636$1IfLeT (get-library-paths))))
