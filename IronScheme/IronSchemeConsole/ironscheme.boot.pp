;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; Copyright (c) 2007, 2008 Llewellyn Pritchard
;;; automatically generated from psyntax & ironscheme sources
;;; for copyright details, see psyntax/main.ss

(library-letrec* (ironscheme base)
  ((g$caar$4816$15i0ov
     g$caar$4889$15i0ov
     (case-lambda ((g$x$4847$15i0ov) (car (car g$x$4847$15i0ov)))))
   (g$cadr$4817$15i0ov
     g$cadr$4890$15i0ov
     (case-lambda ((g$x$4848$15i0ov) (car (cdr g$x$4848$15i0ov)))))
   (g$cdar$4818$15i0ov
     g$cdar$4891$15i0ov
     (case-lambda ((g$x$4849$15i0ov) (cdr (car g$x$4849$15i0ov)))))
   (g$cddr$4819$15i0ov
     g$cddr$4892$15i0ov
     (case-lambda ((g$x$4850$15i0ov) (cdr (cdr g$x$4850$15i0ov)))))
   (g$caaar$4820$15i0ov
     g$caaar$4893$15i0ov
     (case-lambda
       ((g$x$4851$15i0ov) (g$caar$4816$15i0ov (car g$x$4851$15i0ov)))))
   (g$caadr$4821$15i0ov
     g$caadr$4894$15i0ov
     (case-lambda
       ((g$x$4852$15i0ov) (g$caar$4816$15i0ov (cdr g$x$4852$15i0ov)))))
   (g$cadar$4822$15i0ov
     g$cadar$4895$15i0ov
     (case-lambda
       ((g$x$4853$15i0ov) (g$cadr$4817$15i0ov (car g$x$4853$15i0ov)))))
   (g$caddr$4823$15i0ov
     g$caddr$4896$15i0ov
     (case-lambda
       ((g$x$4854$15i0ov) (g$cadr$4817$15i0ov (cdr g$x$4854$15i0ov)))))
   (g$cdaar$4824$15i0ov
     g$cdaar$4897$15i0ov
     (case-lambda
       ((g$x$4855$15i0ov) (g$cdar$4818$15i0ov (car g$x$4855$15i0ov)))))
   (g$cdadr$4825$15i0ov
     g$cdadr$4898$15i0ov
     (case-lambda
       ((g$x$4856$15i0ov) (g$cdar$4818$15i0ov (cdr g$x$4856$15i0ov)))))
   (g$cddar$4826$15i0ov
     g$cddar$4899$15i0ov
     (case-lambda
       ((g$x$4857$15i0ov) (g$cddr$4819$15i0ov (car g$x$4857$15i0ov)))))
   (g$cdddr$4827$15i0ov
     g$cdddr$4900$15i0ov
     (case-lambda
       ((g$x$4858$15i0ov) (g$cddr$4819$15i0ov (cdr g$x$4858$15i0ov)))))
   (g$caaaar$4828$15i0ov
     g$caaaar$4901$15i0ov
     (case-lambda
       ((g$x$4859$15i0ov) (g$caaar$4820$15i0ov (car g$x$4859$15i0ov)))))
   (g$caaadr$4829$15i0ov
     g$caaadr$4902$15i0ov
     (case-lambda
       ((g$x$4860$15i0ov) (g$caaar$4820$15i0ov (cdr g$x$4860$15i0ov)))))
   (g$caadar$4830$15i0ov
     g$caadar$4903$15i0ov
     (case-lambda
       ((g$x$4861$15i0ov) (g$caadr$4821$15i0ov (car g$x$4861$15i0ov)))))
   (g$caaddr$4831$15i0ov
     g$caaddr$4904$15i0ov
     (case-lambda
       ((g$x$4862$15i0ov) (g$caadr$4821$15i0ov (cdr g$x$4862$15i0ov)))))
   (g$cadaar$4832$15i0ov
     g$cadaar$4905$15i0ov
     (case-lambda
       ((g$x$4863$15i0ov) (g$cadar$4822$15i0ov (car g$x$4863$15i0ov)))))
   (g$cadadr$4833$15i0ov
     g$cadadr$4906$15i0ov
     (case-lambda
       ((g$x$4864$15i0ov) (g$cadar$4822$15i0ov (cdr g$x$4864$15i0ov)))))
   (g$caddar$4834$15i0ov
     g$caddar$4907$15i0ov
     (case-lambda
       ((g$x$4865$15i0ov) (g$caddr$4823$15i0ov (car g$x$4865$15i0ov)))))
   (g$cadddr$4835$15i0ov
     g$cadddr$4908$15i0ov
     (case-lambda
       ((g$x$4866$15i0ov) (g$caddr$4823$15i0ov (cdr g$x$4866$15i0ov)))))
   (g$cdaaar$4836$15i0ov
     g$cdaaar$4909$15i0ov
     (case-lambda
       ((g$x$4867$15i0ov) (g$cdaar$4824$15i0ov (car g$x$4867$15i0ov)))))
   (g$cdaadr$4837$15i0ov
     g$cdaadr$4910$15i0ov
     (case-lambda
       ((g$x$4868$15i0ov) (g$cdaar$4824$15i0ov (cdr g$x$4868$15i0ov)))))
   (g$cdadar$4838$15i0ov
     g$cdadar$4911$15i0ov
     (case-lambda
       ((g$x$4869$15i0ov) (g$cdadr$4825$15i0ov (car g$x$4869$15i0ov)))))
   (g$cdaddr$4839$15i0ov
     g$cdaddr$4912$15i0ov
     (case-lambda
       ((g$x$4870$15i0ov) (g$cdadr$4825$15i0ov (cdr g$x$4870$15i0ov)))))
   (g$cddaar$4840$15i0ov
     g$cddaar$4913$15i0ov
     (case-lambda
       ((g$x$4871$15i0ov) (g$cddar$4826$15i0ov (car g$x$4871$15i0ov)))))
   (g$cddadr$4841$15i0ov
     g$cddadr$4914$15i0ov
     (case-lambda
       ((g$x$4872$15i0ov) (g$cddar$4826$15i0ov (cdr g$x$4872$15i0ov)))))
   (g$cdddar$4842$15i0ov
     g$cdddar$4915$15i0ov
     (case-lambda
       ((g$x$4873$15i0ov) (g$cdddr$4827$15i0ov (car g$x$4873$15i0ov)))))
   (g$cddddr$4843$15i0ov
     g$cddddr$4916$15i0ov
     (case-lambda
       ((g$x$4874$15i0ov) (g$cdddr$4827$15i0ov (cdr g$x$4874$15i0ov)))))
   (g$rationalize$4844$15i0ov
     g$rationalize$4917$15i0ov
     (case-lambda
       ((g$x$4875$15i0ov g$e$4876$15i0ov)
        (if (if (infinite? g$x$4875$15i0ov)
              (begin '#f (infinite? g$e$4876$15i0ov))
              '#f)
          '+nan.0
          ((case-lambda
             ((g$r$4877$15i0ov)
              (if (if (exact? g$x$4875$15i0ov)
                    (begin '#f (exact? g$e$4876$15i0ov))
                    '#f)
                g$r$4877$15i0ov
                (inexact g$r$4877$15i0ov))))
           (apply
             /
             (g$find-ratio$4845$15i0ov g$x$4875$15i0ov g$e$4876$15i0ov)))))))
   (g$find-ratio$4845$15i0ov
     g$find-ratio$4918$15i0ov
     (case-lambda
       ((g$x$4878$15i0ov g$e$4879$15i0ov)
        (g$find-ratio-between$4846$15i0ov
          (- g$x$4878$15i0ov g$e$4879$15i0ov)
          (+ g$x$4878$15i0ov g$e$4879$15i0ov)))))
   (g$find-ratio-between$4846$15i0ov
     g$find-ratio-between$4919$15i0ov
     (case-lambda
       ((g$x$4880$15i0ov g$y$4881$15i0ov)
        (letrec* ((g$sr$4882$15i0ov
                    (case-lambda
                      ((g$x$4884$15i0ov g$y$4885$15i0ov)
                       ((case-lambda
                          ((g$fx$4886$15i0ov g$fy$4887$15i0ov)
                           (if (>= g$fx$4886$15i0ov g$x$4884$15i0ov)
                             (list g$fx$4886$15i0ov '1)
                             (if (= g$fx$4886$15i0ov g$fy$4887$15i0ov)
                               ((case-lambda
                                  ((g$rat$4888$15i0ov)
                                   (list
                                     (+ (g$cadr$4817$15i0ov g$rat$4888$15i0ov)
                                        (* g$fx$4886$15i0ov
                                           (car g$rat$4888$15i0ov)))
                                     (car g$rat$4888$15i0ov))))
                                (g$sr$4882$15i0ov
                                  (/ (- g$y$4885$15i0ov g$fy$4887$15i0ov))
                                  (/ (- g$x$4884$15i0ov g$fx$4886$15i0ov))))
                               (list (+ '1 g$fx$4886$15i0ov) '1)))))
                        (exact (floor g$x$4884$15i0ov))
                        (exact (floor g$y$4885$15i0ov)))))))
          (if (< g$y$4881$15i0ov g$x$4880$15i0ov)
            (g$find-ratio-between$4846$15i0ov g$y$4881$15i0ov g$x$4880$15i0ov)
            (if (>= g$x$4880$15i0ov g$y$4881$15i0ov)
              (list g$x$4880$15i0ov '1)
              (if (positive? g$x$4880$15i0ov)
                (g$sr$4882$15i0ov g$x$4880$15i0ov g$y$4881$15i0ov)
                (if (negative? g$y$4881$15i0ov)
                  ((case-lambda
                     ((g$rat$4883$15i0ov)
                      (list
                        (- (car g$rat$4883$15i0ov))
                        (g$cadr$4817$15i0ov g$rat$4883$15i0ov))))
                   (g$sr$4882$15i0ov (- g$y$4881$15i0ov) (- g$x$4880$15i0ov)))
                  '(0 1))))))))))
  (void))

(library-letrec* (ironscheme hashtables)
  ((g$using$5115$15i0ov g$using$5150$15i0ov (clr-using-internal 'system))
   (g$using$5117$15i0ov
     g$using$5151$15i0ov
     (clr-using-internal 'system.collections))
   (g$make-eq-hashtable$5118$15i0ov
     g$make-eq-hashtable$5152$15i0ov
     (case-lambda
       (() (clr-new-internal 'hashtable))
       ((g$k$5129$15i0ov)
        (clr-new-internal
          'hashtable
          (clr-cast-internal 'int32 g$k$5129$15i0ov)))))
   (g$make-eqv-hashtable$5119$15i0ov
     g$make-eqv-hashtable$5153$15i0ov
     (case-lambda
       (() (make-hashtable eqv-hash eqv?))
       ((g$k$5130$15i0ov) (make-hashtable eqv-hash eqv? g$k$5130$15i0ov))))
   (g$hashtable-size$5120$15i0ov
     g$hashtable-size$5154$15i0ov
     (case-lambda
       ((g$ht$5131$15i0ov)
        (clr-call-internal 'hashtable 'get_count g$ht$5131$15i0ov))))
   (g$hashtable-ref$5121$15i0ov
     g$hashtable-ref$5155$15i0ov
     (case-lambda
       ((g$ht$5132$15i0ov g$key$5133$15i0ov g$default$5134$15i0ov)
        (letrec* ((g$r$5135$15i0ov
                    (clr-call-internal
                      'hashtable
                      'get_item
                      g$ht$5132$15i0ov
                      g$key$5133$15i0ov)))
          (if (not (null? g$r$5135$15i0ov))
            g$r$5135$15i0ov
            g$default$5134$15i0ov)))))
   (g$hashtable-set!$5122$15i0ov
     g$hashtable-set!$5156$15i0ov
     (case-lambda
       ((g$ht$5136$15i0ov g$key$5137$15i0ov g$obj$5138$15i0ov)
        (clr-call-internal
          'hashtable
          'set_item
          g$ht$5136$15i0ov
          g$key$5137$15i0ov
          g$obj$5138$15i0ov))))
   (g$hashtable-delete!$5123$15i0ov
     g$hashtable-delete!$5157$15i0ov
     (case-lambda
       ((g$ht$5139$15i0ov g$key$5140$15i0ov)
        (clr-call-internal
          'hashtable
          'remove
          g$ht$5139$15i0ov
          g$key$5140$15i0ov))))
   (g$hashtable-contains?$5124$15i0ov
     g$hashtable-contains?$5158$15i0ov
     (case-lambda
       ((g$ht$5141$15i0ov g$key$5142$15i0ov)
        (clr-call-internal
          'hashtable
          'containskey
          g$ht$5141$15i0ov
          g$key$5142$15i0ov))))
   (g$hashtable-update!$5125$15i0ov
     g$hashtable-update!$5159$15i0ov
     (case-lambda
       ((g$ht$5143$15i0ov
          g$key$5144$15i0ov
          g$proc$5145$15i0ov
          g$default$5146$15i0ov)
        (g$hashtable-set!$5122$15i0ov
          g$ht$5143$15i0ov
          g$key$5144$15i0ov
          (g$proc$5145$15i0ov
            (g$hashtable-ref$5121$15i0ov
              g$ht$5143$15i0ov
              g$key$5144$15i0ov
              g$default$5146$15i0ov))))))
   (g$hashtable-clear!$5126$15i0ov
     g$hashtable-clear!$5160$15i0ov
     (case-lambda
       ((g$ht$5147$15i0ov)
        (clr-call-internal 'hashtable 'clear g$ht$5147$15i0ov))
       ((g$ht$5148$15i0ov g$k$5149$15i0ov)
        (clr-call-internal 'hashtable 'clear g$ht$5148$15i0ov))))
   (g$clear-usings$5128$15i0ov
     g$clear-usings$5161$15i0ov
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme files)
  ((g$using$5163$15i0ov
     g$using$5229$15i0ov
     (clr-using-internal 'system.io))
   (g$file-exists?$5164$15i0ov
     g$file-exists?$5230$15i0ov
     (case-lambda
       ((g$fn$5192$15i0ov)
        (clr-call-internal 'file 'exists '() g$fn$5192$15i0ov))))
   (g$delete-file$5165$15i0ov
     g$delete-file$5231$15i0ov
     (case-lambda
       ((g$fn$5193$15i0ov)
        (clr-call-internal 'file 'delete '() g$fn$5193$15i0ov))))
   (g$file-copy$5166$15i0ov
     g$file-copy$5232$15i0ov
     (case-lambda
       ((g$from$5194$15i0ov g$to$5195$15i0ov)
        (g$file-copy$5166$15i0ov g$from$5194$15i0ov g$to$5195$15i0ov '#f))
       ((g$from$5196$15i0ov g$to$5197$15i0ov g$overwrite?$5198$15i0ov)
        (clr-call-internal
          'file
          'copy
          '()
          g$from$5196$15i0ov
          g$to$5197$15i0ov
          g$overwrite?$5198$15i0ov))))
   (g$file-move$5167$15i0ov
     g$file-move$5233$15i0ov
     (case-lambda
       ((g$from$5199$15i0ov g$to$5200$15i0ov)
        (clr-call-internal
          'file
          'move
          '()
          g$from$5199$15i0ov
          g$to$5200$15i0ov))))
   (g$file-create-time$5168$15i0ov
     g$file-create-time$5234$15i0ov
     (case-lambda
       ((g$fn$5201$15i0ov)
        (clr-call-internal 'file 'getcreationtime '() g$fn$5201$15i0ov))))
   (g$file-access-time$5169$15i0ov
     g$file-access-time$5235$15i0ov
     (case-lambda
       ((g$fn$5202$15i0ov)
        (clr-call-internal 'file 'getlastaccesstime '() g$fn$5202$15i0ov))))
   (g$file-modified-time$5170$15i0ov
     g$file-modified-time$5236$15i0ov
     (case-lambda
       ((g$fn$5203$15i0ov)
        (clr-call-internal 'file 'getlastwritetime '() g$fn$5203$15i0ov))))
   (g$directory-exists?$5171$15i0ov
     g$directory-exists?$5237$15i0ov
     (case-lambda
       ((g$fn$5204$15i0ov)
        (clr-call-internal 'directory 'exists '() g$fn$5204$15i0ov))))
   (g$delete-directory$5172$15i0ov
     g$delete-directory$5238$15i0ov
     (case-lambda
       ((g$dir$5205$15i0ov)
        (g$delete-directory$5172$15i0ov g$dir$5205$15i0ov '#f))
       ((g$dir$5206$15i0ov g$recursive?$5207$15i0ov)
        (clr-call-internal
          'directory
          'delete
          '()
          g$dir$5206$15i0ov
          g$recursive?$5207$15i0ov))))
   (g$directory-move$5173$15i0ov
     g$directory-move$5239$15i0ov
     (case-lambda
       ((g$from$5208$15i0ov g$to$5209$15i0ov)
        (clr-call-internal
          'directory
          'move
          '()
          g$from$5208$15i0ov
          g$to$5209$15i0ov))))
   (g$create-directory$5174$15i0ov
     g$create-directory$5240$15i0ov
     (case-lambda
       ((g$name$5210$15i0ov)
        (clr-call-internal
          'directory
          'createdirectory
          '()
          g$name$5210$15i0ov))))
   (g$get-files$5175$15i0ov
     g$get-files$5241$15i0ov
     (case-lambda
       ((g$dir$5211$15i0ov) (g$get-files$5175$15i0ov g$dir$5211$15i0ov '"*"))
       ((g$dir$5212$15i0ov g$pattern$5213$15i0ov)
        (clr-call-internal
          'directory
          'getfiles
          '()
          g$dir$5212$15i0ov
          g$pattern$5213$15i0ov))))
   (g$get-directories$5176$15i0ov
     g$get-directories$5242$15i0ov
     (case-lambda
       ((g$dir$5214$15i0ov)
        (g$get-directories$5176$15i0ov g$dir$5214$15i0ov '"*"))
       ((g$dir$5215$15i0ov g$pattern$5216$15i0ov)
        (clr-call-internal
          'directory
          'getdirectories
          '()
          g$dir$5215$15i0ov
          g$pattern$5216$15i0ov))))
   (g$change-extension$5177$15i0ov
     g$change-extension$5243$15i0ov
     (case-lambda
       ((g$path$5217$15i0ov g$extension$5218$15i0ov)
        (clr-call-internal
          'path
          'changeextension
          '()
          g$path$5217$15i0ov
          g$extension$5218$15i0ov))))
   (g$path-combine$5178$15i0ov
     g$path-combine$5244$15i0ov
     (case-lambda
       ((g$path1$5219$15i0ov g$path2$5220$15i0ov)
        (clr-call-internal
          'path
          'combine
          '()
          g$path1$5219$15i0ov
          g$path2$5220$15i0ov))))
   (g$get-directory-name$5179$15i0ov
     g$get-directory-name$5245$15i0ov
     (case-lambda
       ((g$path$5221$15i0ov)
        (clr-call-internal 'path 'getdirectoryname '() g$path$5221$15i0ov))))
   (g$get-extension$5180$15i0ov
     g$get-extension$5246$15i0ov
     (case-lambda
       ((g$path$5222$15i0ov)
        (clr-call-internal 'path 'getextension '() g$path$5222$15i0ov))))
   (g$get-filename$5181$15i0ov
     g$get-filename$5247$15i0ov
     (case-lambda
       ((g$path$5223$15i0ov)
        (clr-call-internal 'path 'getfilename '() g$path$5223$15i0ov))))
   (g$get-filename-without-extension$5182$15i0ov
     g$get-filename-without-extension$5248$15i0ov
     (case-lambda
       ((g$path$5224$15i0ov)
        (clr-call-internal
          'path
          'getfilenamewithoutextension
          '()
          g$path$5224$15i0ov))))
   (g$get-full-path$5183$15i0ov
     g$get-full-path$5249$15i0ov
     (case-lambda
       ((g$path$5225$15i0ov)
        (clr-call-internal 'path 'getfullpath '() g$path$5225$15i0ov))))
   (g$get-path-root$5184$15i0ov
     g$get-path-root$5250$15i0ov
     (case-lambda
       ((g$path$5226$15i0ov)
        (clr-call-internal 'path 'getpathroot '() g$path$5226$15i0ov))))
   (g$get-random-filename$5185$15i0ov
     g$get-random-filename$5251$15i0ov
     (case-lambda (() (clr-call-internal 'path 'getrandomfilename '()))))
   (g$get-temp-filename$5186$15i0ov
     g$get-temp-filename$5252$15i0ov
     (case-lambda (() (clr-call-internal 'path 'gettempfilename '()))))
   (g$get-temp-path$5187$15i0ov
     g$get-temp-path$5253$15i0ov
     (case-lambda (() (clr-call-internal 'path 'gettemppath '()))))
   (g$path-rooted?$5188$15i0ov
     g$path-rooted?$5254$15i0ov
     (case-lambda
       ((g$path$5227$15i0ov)
        (clr-call-internal 'path 'ispathrooted '() g$path$5227$15i0ov))))
   (g$path-has-extension?$5189$15i0ov
     g$path-has-extension?$5255$15i0ov
     (case-lambda
       ((g$path$5228$15i0ov)
        (clr-call-internal 'path 'hasextension '() g$path$5228$15i0ov))))
   (g$clear-usings$5191$15i0ov
     g$clear-usings$5256$15i0ov
     (clr-clear-usings-internal)))
  (void))

(library-letrec* (ironscheme lists)
  ((g$find$5257$15i0ov
     g$find$5348$15i0ov
     (case-lambda
       ((g$proc$5276$15i0ov g$l$5277$15i0ov)
        (if (null? g$l$5277$15i0ov)
          '#f
          ((case-lambda
             ((g$e$5278$15i0ov)
              (if (g$proc$5276$15i0ov g$e$5278$15i0ov)
                g$e$5278$15i0ov
                (g$find$5257$15i0ov g$proc$5276$15i0ov (cdr g$l$5277$15i0ov)))))
           (car g$l$5277$15i0ov))))))
   (g$partition$5258$15i0ov
     g$partition$5349$15i0ov
     (case-lambda
       ((g$proc$5279$15i0ov g$l$5280$15i0ov)
        ((letrec ((g$f$5281$15i0ov
                    (case-lambda
                      ((g$l$5282$15i0ov g$a$5283$15i0ov g$b$5284$15i0ov)
                       (if (null? g$l$5282$15i0ov)
                         (values
                           (reverse! g$a$5283$15i0ov)
                           (reverse! g$b$5284$15i0ov))
                         ((case-lambda
                            ((g$e$5285$15i0ov)
                             (if (g$proc$5279$15i0ov g$e$5285$15i0ov)
                               (g$f$5281$15i0ov
                                 (cdr g$l$5282$15i0ov)
                                 (cons g$e$5285$15i0ov g$a$5283$15i0ov)
                                 g$b$5284$15i0ov)
                               (g$f$5281$15i0ov
                                 (cdr g$l$5282$15i0ov)
                                 g$a$5283$15i0ov
                                 (cons g$e$5285$15i0ov g$b$5284$15i0ov)))))
                          (car g$l$5282$15i0ov)))))))
           g$f$5281$15i0ov)
         g$l$5280$15i0ov
         '()
         '()))))
   (g$remp$5259$15i0ov
     g$remp$5350$15i0ov
     (case-lambda
       ((g$proc$5286$15i0ov g$l$5287$15i0ov)
        ((letrec ((g$f$5288$15i0ov
                    (case-lambda
                      ((g$l$5289$15i0ov g$a$5290$15i0ov)
                       (if (null? g$l$5289$15i0ov)
                         (reverse! g$a$5290$15i0ov)
                         ((case-lambda
                            ((g$e$5291$15i0ov)
                             (if (g$proc$5286$15i0ov g$e$5291$15i0ov)
                               (g$f$5288$15i0ov
                                 (cdr g$l$5289$15i0ov)
                                 g$a$5290$15i0ov)
                               (g$f$5288$15i0ov
                                 (cdr g$l$5289$15i0ov)
                                 (cons g$e$5291$15i0ov g$a$5290$15i0ov)))))
                          (car g$l$5289$15i0ov)))))))
           g$f$5288$15i0ov)
         g$l$5287$15i0ov
         '()))))
   (g$filter$5260$15i0ov
     g$filter$5351$15i0ov
     (case-lambda
       ((g$proc$5292$15i0ov g$l$5293$15i0ov)
        ((letrec ((g$f$5294$15i0ov
                    (case-lambda
                      ((g$l$5295$15i0ov g$a$5296$15i0ov)
                       (if (null? g$l$5295$15i0ov)
                         (reverse! g$a$5296$15i0ov)
                         ((case-lambda
                            ((g$e$5297$15i0ov)
                             (if (g$proc$5292$15i0ov g$e$5297$15i0ov)
                               (g$f$5294$15i0ov
                                 (cdr g$l$5295$15i0ov)
                                 (cons g$e$5297$15i0ov g$a$5296$15i0ov))
                               (g$f$5294$15i0ov
                                 (cdr g$l$5295$15i0ov)
                                 g$a$5296$15i0ov))))
                          (car g$l$5295$15i0ov)))))))
           g$f$5294$15i0ov)
         g$l$5293$15i0ov
         '()))))
   (g$assv$5261$15i0ov
     g$assv$5352$15i0ov
     (case-lambda
       ((g$obj$5298$15i0ov g$lst$5299$15i0ov)
        (if (null? g$lst$5299$15i0ov)
          '#f
          ((case-lambda
             ((g$c$5300$15i0ov)
              (if (eqv? g$obj$5298$15i0ov (car g$c$5300$15i0ov))
                g$c$5300$15i0ov
                (g$assv$5261$15i0ov
                  g$obj$5298$15i0ov
                  (cdr g$lst$5299$15i0ov)))))
           (car g$lst$5299$15i0ov))))))
   (g$assoc$5262$15i0ov
     g$assoc$5353$15i0ov
     (case-lambda
       ((g$obj$5301$15i0ov g$lst$5302$15i0ov)
        (if (null? g$lst$5302$15i0ov)
          '#f
          ((case-lambda
             ((g$c$5303$15i0ov)
              (if (equal? g$obj$5301$15i0ov (car g$c$5303$15i0ov))
                g$c$5303$15i0ov
                (g$assoc$5262$15i0ov
                  g$obj$5301$15i0ov
                  (cdr g$lst$5302$15i0ov)))))
           (car g$lst$5302$15i0ov))))))
   (g$assp$5263$15i0ov
     g$assp$5354$15i0ov
     (case-lambda
       ((g$p?$5304$15i0ov g$lst$5305$15i0ov)
        (if (null? g$lst$5305$15i0ov)
          '#f
          ((case-lambda
             ((g$c$5306$15i0ov)
              (if (g$p?$5304$15i0ov (car g$c$5306$15i0ov))
                g$c$5306$15i0ov
                (g$assp$5263$15i0ov g$p?$5304$15i0ov (cdr g$lst$5305$15i0ov)))))
           (car g$lst$5305$15i0ov))))))
   (g$member$5264$15i0ov
     g$member$5355$15i0ov
     (case-lambda
       ((g$obj$5307$15i0ov g$lst$5308$15i0ov)
        (if (null? g$lst$5308$15i0ov)
          '#f
          (if (equal? g$obj$5307$15i0ov (car g$lst$5308$15i0ov))
            g$lst$5308$15i0ov
            (g$member$5264$15i0ov
              g$obj$5307$15i0ov
              (cdr g$lst$5308$15i0ov)))))))
   (g$memp$5265$15i0ov
     g$memp$5356$15i0ov
     (case-lambda
       ((g$p?$5309$15i0ov g$lst$5310$15i0ov)
        (if (null? g$lst$5310$15i0ov)
          '#f
          (if (g$p?$5309$15i0ov (car g$lst$5310$15i0ov))
            g$lst$5310$15i0ov
            (g$memp$5265$15i0ov g$p?$5309$15i0ov (cdr g$lst$5310$15i0ov)))))))
   (g$all-empty?$5266$15i0ov
     g$all-empty?$5357$15i0ov
     (case-lambda
       ((g$ls$5311$15i0ov)
        ((case-lambda
           ((g$t$5312$15i0ov)
            (if g$t$5312$15i0ov
              g$t$5312$15i0ov
              (begin
                '#f
                (if (null? (car g$ls$5311$15i0ov))
                  (begin '#f (g$all-empty?$5266$15i0ov (cdr g$ls$5311$15i0ov)))
                  '#f)))))
         (null? g$ls$5311$15i0ov)))))
   (g$split$5267$15i0ov
     g$split$5358$15i0ov
     (case-lambda
       ((g$ls$5313$15i0ov)
        (if (null? g$ls$5313$15i0ov)
          (values '() '())
          (call-with-values
            (case-lambda (() (g$split$5267$15i0ov (cdr g$ls$5313$15i0ov))))
            (case-lambda
              ((g$cars$5314$15i0ov g$cdrs$5315$15i0ov)
               ((case-lambda
                  ((g$a$5316$15i0ov)
                   (values
                     (cons (car g$a$5316$15i0ov) g$cars$5314$15i0ov)
                     (cons (cdr g$a$5316$15i0ov) g$cdrs$5315$15i0ov))))
                (car g$ls$5313$15i0ov)))))))))
   (g$for-all$5268$15i0ov
     g$for-all$5359$15i0ov
     (case-lambda
       ((g$f$5317$15i0ov . g$args$5318$15i0ov)
        (if (g$all-empty?$5266$15i0ov g$args$5318$15i0ov)
          '#t
          (call-with-values
            (case-lambda (() (g$split$5267$15i0ov g$args$5318$15i0ov)))
            (case-lambda
              ((g$cars$5319$15i0ov g$cdrs$5320$15i0ov)
               (if (g$all-empty?$5266$15i0ov g$cdrs$5320$15i0ov)
                 (apply g$f$5317$15i0ov g$cars$5319$15i0ov)
                 (if (apply g$f$5317$15i0ov g$cars$5319$15i0ov)
                   (begin
                     '#f
                     (apply
                       g$for-all$5268$15i0ov
                       g$f$5317$15i0ov
                       g$cdrs$5320$15i0ov))
                   '#f)))))))))
   (g$exists$5269$15i0ov
     g$exists$5360$15i0ov
     (case-lambda
       ((g$f$5321$15i0ov . g$args$5322$15i0ov)
        (if (g$all-empty?$5266$15i0ov g$args$5322$15i0ov)
          '#f
          (call-with-values
            (case-lambda (() (g$split$5267$15i0ov g$args$5322$15i0ov)))
            (case-lambda
              ((g$cars$5323$15i0ov g$cdrs$5324$15i0ov)
               ((case-lambda
                  ((g$t$5325$15i0ov)
                   (if g$t$5325$15i0ov
                     g$t$5325$15i0ov
                     (begin
                       '#f
                       (apply
                         g$exists$5269$15i0ov
                         g$f$5321$15i0ov
                         g$cdrs$5324$15i0ov)))))
                (apply g$f$5321$15i0ov g$cars$5323$15i0ov)))))))))
   (g$cons*$5270$15i0ov
     g$cons*$5361$15i0ov
     (case-lambda
       ((g$a$5326$15i0ov . g$rest$5327$15i0ov)
        ((letrec ((g$f$5328$15i0ov
                    (case-lambda
                      ((g$a$5329$15i0ov g$rest$5330$15i0ov)
                       (if (null? g$rest$5330$15i0ov)
                         g$a$5329$15i0ov
                         (cons
                           g$a$5329$15i0ov
                           (g$f$5328$15i0ov
                             (car g$rest$5330$15i0ov)
                             (cdr g$rest$5330$15i0ov))))))))
           g$f$5328$15i0ov)
         g$a$5326$15i0ov
         g$rest$5327$15i0ov))))
   (g$fold-left$5271$15i0ov
     g$fold-left$5362$15i0ov
     (case-lambda
       ((g$combine$5331$15i0ov
          g$nil$5332$15i0ov
          g$list1$5333$15i0ov
          .
          g$lists$5334$15i0ov)
        (if (null? g$list1$5333$15i0ov)
          g$nil$5332$15i0ov
          (apply
            g$fold-left$5271$15i0ov
            (g$cons*$5270$15i0ov
              g$combine$5331$15i0ov
              (apply
                g$combine$5331$15i0ov
                (g$cons*$5270$15i0ov
                  g$nil$5332$15i0ov
                  (car g$list1$5333$15i0ov)
                  (map car g$lists$5334$15i0ov)))
              (cdr g$list1$5333$15i0ov)
              (map cdr g$lists$5334$15i0ov)))))))
   (g$fold-right$5272$15i0ov
     g$fold-right$5363$15i0ov
     (case-lambda
       ((g$combine$5335$15i0ov
          g$nil$5336$15i0ov
          g$list1$5337$15i0ov
          .
          g$lists$5338$15i0ov)
        (if (null? g$list1$5337$15i0ov)
          g$nil$5336$15i0ov
          (apply
            g$combine$5335$15i0ov
            (append
              (list (car g$list1$5337$15i0ov))
              (map car g$lists$5338$15i0ov)
              (list
                (apply
                  g$fold-right$5272$15i0ov
                  (g$cons*$5270$15i0ov
                    g$combine$5335$15i0ov
                    g$nil$5336$15i0ov
                    (cdr g$list1$5337$15i0ov)
                    (map cdr g$lists$5338$15i0ov))))))))))
   (g$remove$5273$15i0ov
     g$remove$5364$15i0ov
     (case-lambda
       ((g$obj$5339$15i0ov g$list$5340$15i0ov)
        (g$remp$5259$15i0ov
          (case-lambda
            ((g$x$5341$15i0ov) (equal? g$obj$5339$15i0ov g$x$5341$15i0ov)))
          g$list$5340$15i0ov))))
   (g$remv$5274$15i0ov
     g$remv$5365$15i0ov
     (case-lambda
       ((g$obj$5342$15i0ov g$list$5343$15i0ov)
        (g$remp$5259$15i0ov
          (case-lambda
            ((g$x$5344$15i0ov) (eqv? g$obj$5342$15i0ov g$x$5344$15i0ov)))
          g$list$5343$15i0ov))))
   (g$remq$5275$15i0ov
     g$remq$5366$15i0ov
     (case-lambda
       ((g$obj$5345$15i0ov g$list$5346$15i0ov)
        (g$remp$5259$15i0ov
          (case-lambda
            ((g$x$5347$15i0ov) (eq? g$obj$5345$15i0ov g$x$5347$15i0ov)))
          g$list$5346$15i0ov)))))
  (void))

(library-letrec* (ironscheme bytevectors)
  ((g$native-endianness$5367$15i0ov
     g$native-endianness$5478$15i0ov
     (case-lambda (() 'little)))
   (g$bytevector-u16-ref$5368$15i0ov
     g$bytevector-u16-ref$5479$15i0ov
     (case-lambda
       ((g$bytevector$5396$15i0ov g$k$5397$15i0ov g$endianness$5398$15i0ov)
        (bytevector-uint-ref
          g$bytevector$5396$15i0ov
          g$k$5397$15i0ov
          g$endianness$5398$15i0ov
          '2))))
   (g$bytevector-s16-ref$5369$15i0ov
     g$bytevector-s16-ref$5480$15i0ov
     (case-lambda
       ((g$bytevector$5399$15i0ov g$k$5400$15i0ov g$endianness$5401$15i0ov)
        (bytevector-sint-ref
          g$bytevector$5399$15i0ov
          g$k$5400$15i0ov
          g$endianness$5401$15i0ov
          '2))))
   (g$bytevector-u16-native-ref$5370$15i0ov
     g$bytevector-u16-native-ref$5481$15i0ov
     (case-lambda
       ((g$bytevector$5402$15i0ov g$k$5403$15i0ov)
        (bytevector-uint-ref
          g$bytevector$5402$15i0ov
          g$k$5403$15i0ov
          (g$native-endianness$5367$15i0ov)
          '2))))
   (g$bytevector-s16-native-ref$5371$15i0ov
     g$bytevector-s16-native-ref$5482$15i0ov
     (case-lambda
       ((g$bytevector$5404$15i0ov g$k$5405$15i0ov)
        (bytevector-sint-ref
          g$bytevector$5404$15i0ov
          g$k$5405$15i0ov
          (g$native-endianness$5367$15i0ov)
          '2))))
   (g$bytevector-u16-set!$5372$15i0ov
     g$bytevector-u16-set!$5483$15i0ov
     (case-lambda
       ((g$bytevector$5406$15i0ov
          g$k$5407$15i0ov
          g$n$5408$15i0ov
          g$endianness$5409$15i0ov)
        (bytevector-uint-set!
          g$bytevector$5406$15i0ov
          g$k$5407$15i0ov
          g$n$5408$15i0ov
          g$endianness$5409$15i0ov
          '2))))
   (g$bytevector-s16-set!$5373$15i0ov
     g$bytevector-s16-set!$5484$15i0ov
     (case-lambda
       ((g$bytevector$5410$15i0ov
          g$k$5411$15i0ov
          g$n$5412$15i0ov
          g$endianness$5413$15i0ov)
        (bytevector-sint-set!
          g$bytevector$5410$15i0ov
          g$k$5411$15i0ov
          g$n$5412$15i0ov
          g$endianness$5413$15i0ov
          '2))))
   (g$bytevector-u16-native-set!$5374$15i0ov
     g$bytevector-u16-native-set!$5485$15i0ov
     (case-lambda
       ((g$bytevector$5414$15i0ov g$k$5415$15i0ov g$n$5416$15i0ov)
        (bytevector-uint-set!
          g$bytevector$5414$15i0ov
          g$k$5415$15i0ov
          g$n$5416$15i0ov
          (g$native-endianness$5367$15i0ov)
          '2))))
   (g$bytevector-s16-native-set!$5375$15i0ov
     g$bytevector-s16-native-set!$5486$15i0ov
     (case-lambda
       ((g$bytevector$5417$15i0ov g$k$5418$15i0ov g$n$5419$15i0ov)
        (bytevector-sint-set!
          g$bytevector$5417$15i0ov
          g$k$5418$15i0ov
          g$n$5419$15i0ov
          (g$native-endianness$5367$15i0ov)
          '2))))
   (g$bytevector-u32-ref$5376$15i0ov
     g$bytevector-u32-ref$5487$15i0ov
     (case-lambda
       ((g$bytevector$5420$15i0ov g$k$5421$15i0ov g$endianness$5422$15i0ov)
        (bytevector-uint-ref
          g$bytevector$5420$15i0ov
          g$k$5421$15i0ov
          g$endianness$5422$15i0ov
          '4))))
   (g$bytevector-s32-ref$5377$15i0ov
     g$bytevector-s32-ref$5488$15i0ov
     (case-lambda
       ((g$bytevector$5423$15i0ov g$k$5424$15i0ov g$endianness$5425$15i0ov)
        (bytevector-sint-ref
          g$bytevector$5423$15i0ov
          g$k$5424$15i0ov
          g$endianness$5425$15i0ov
          '4))))
   (g$bytevector-u32-native-ref$5378$15i0ov
     g$bytevector-u32-native-ref$5489$15i0ov
     (case-lambda
       ((g$bytevector$5426$15i0ov g$k$5427$15i0ov)
        (bytevector-uint-ref
          g$bytevector$5426$15i0ov
          g$k$5427$15i0ov
          (g$native-endianness$5367$15i0ov)
          '4))))
   (g$bytevector-s32-native-ref$5379$15i0ov
     g$bytevector-s32-native-ref$5490$15i0ov
     (case-lambda
       ((g$bytevector$5428$15i0ov g$k$5429$15i0ov)
        (bytevector-sint-ref
          g$bytevector$5428$15i0ov
          g$k$5429$15i0ov
          (g$native-endianness$5367$15i0ov)
          '4))))
   (g$bytevector-u32-set!$5380$15i0ov
     g$bytevector-u32-set!$5491$15i0ov
     (case-lambda
       ((g$bytevector$5430$15i0ov
          g$k$5431$15i0ov
          g$n$5432$15i0ov
          g$endianness$5433$15i0ov)
        (bytevector-uint-set!
          g$bytevector$5430$15i0ov
          g$k$5431$15i0ov
          g$n$5432$15i0ov
          g$endianness$5433$15i0ov
          '4))))
   (g$bytevector-s32-set!$5381$15i0ov
     g$bytevector-s32-set!$5492$15i0ov
     (case-lambda
       ((g$bytevector$5434$15i0ov
          g$k$5435$15i0ov
          g$n$5436$15i0ov
          g$endianness$5437$15i0ov)
        (bytevector-sint-set!
          g$bytevector$5434$15i0ov
          g$k$5435$15i0ov
          g$n$5436$15i0ov
          g$endianness$5437$15i0ov
          '4))))
   (g$bytevector-u32-native-set!$5382$15i0ov
     g$bytevector-u32-native-set!$5493$15i0ov
     (case-lambda
       ((g$bytevector$5438$15i0ov g$k$5439$15i0ov g$n$5440$15i0ov)
        (bytevector-uint-set!
          g$bytevector$5438$15i0ov
          g$k$5439$15i0ov
          g$n$5440$15i0ov
          (g$native-endianness$5367$15i0ov)
          '4))))
   (g$bytevector-s32-native-set!$5383$15i0ov
     g$bytevector-s32-native-set!$5494$15i0ov
     (case-lambda
       ((g$bytevector$5441$15i0ov g$k$5442$15i0ov g$n$5443$15i0ov)
        (bytevector-sint-set!
          g$bytevector$5441$15i0ov
          g$k$5442$15i0ov
          g$n$5443$15i0ov
          (g$native-endianness$5367$15i0ov)
          '4))))
   (g$bytevector-u64-ref$5384$15i0ov
     g$bytevector-u64-ref$5495$15i0ov
     (case-lambda
       ((g$bytevector$5444$15i0ov g$k$5445$15i0ov g$endianness$5446$15i0ov)
        (bytevector-uint-ref
          g$bytevector$5444$15i0ov
          g$k$5445$15i0ov
          g$endianness$5446$15i0ov
          '8))))
   (g$bytevector-s64-ref$5385$15i0ov
     g$bytevector-s64-ref$5496$15i0ov
     (case-lambda
       ((g$bytevector$5447$15i0ov g$k$5448$15i0ov g$endianness$5449$15i0ov)
        (bytevector-sint-ref
          g$bytevector$5447$15i0ov
          g$k$5448$15i0ov
          g$endianness$5449$15i0ov
          '8))))
   (g$bytevector-u64-native-ref$5386$15i0ov
     g$bytevector-u64-native-ref$5497$15i0ov
     (case-lambda
       ((g$bytevector$5450$15i0ov g$k$5451$15i0ov)
        (bytevector-uint-ref
          g$bytevector$5450$15i0ov
          g$k$5451$15i0ov
          (g$native-endianness$5367$15i0ov)
          '8))))
   (g$bytevector-s64-native-ref$5387$15i0ov
     g$bytevector-s64-native-ref$5498$15i0ov
     (case-lambda
       ((g$bytevector$5452$15i0ov g$k$5453$15i0ov)
        (bytevector-sint-ref
          g$bytevector$5452$15i0ov
          g$k$5453$15i0ov
          (g$native-endianness$5367$15i0ov)
          '8))))
   (g$bytevector-u64-set!$5388$15i0ov
     g$bytevector-u64-set!$5499$15i0ov
     (case-lambda
       ((g$bytevector$5454$15i0ov
          g$k$5455$15i0ov
          g$n$5456$15i0ov
          g$endianness$5457$15i0ov)
        (bytevector-uint-set!
          g$bytevector$5454$15i0ov
          g$k$5455$15i0ov
          g$n$5456$15i0ov
          g$endianness$5457$15i0ov
          '8))))
   (g$bytevector-s64-set!$5389$15i0ov
     g$bytevector-s64-set!$5500$15i0ov
     (case-lambda
       ((g$bytevector$5458$15i0ov
          g$k$5459$15i0ov
          g$n$5460$15i0ov
          g$endianness$5461$15i0ov)
        (bytevector-sint-set!
          g$bytevector$5458$15i0ov
          g$k$5459$15i0ov
          g$n$5460$15i0ov
          g$endianness$5461$15i0ov
          '8))))
   (g$bytevector-u64-native-set!$5390$15i0ov
     g$bytevector-u64-native-set!$5501$15i0ov
     (case-lambda
       ((g$bytevector$5462$15i0ov g$k$5463$15i0ov g$n$5464$15i0ov)
        (bytevector-uint-set!
          g$bytevector$5462$15i0ov
          g$k$5463$15i0ov
          g$n$5464$15i0ov
          (g$native-endianness$5367$15i0ov)
          '8))))
   (g$bytevector-s64-native-set!$5391$15i0ov
     g$bytevector-s64-native-set!$5502$15i0ov
     (case-lambda
       ((g$bytevector$5465$15i0ov g$k$5466$15i0ov g$n$5467$15i0ov)
        (bytevector-sint-set!
          g$bytevector$5465$15i0ov
          g$k$5466$15i0ov
          g$n$5467$15i0ov
          (g$native-endianness$5367$15i0ov)
          '8))))
   (g$bytevector-ieee-single-native-ref$5392$15i0ov
     g$bytevector-ieee-single-native-ref$5503$15i0ov
     (case-lambda
       ((g$bytevector$5468$15i0ov g$k$5469$15i0ov)
        (if (not (zero? (mod g$k$5469$15i0ov '4)))
          (assertion-violation
            'bytevector-ieee-single-native-ref
            '"must be multiple of 4"
            g$k$5469$15i0ov)
          (bytevector-ieee-single-ref
            g$bytevector$5468$15i0ov
            g$k$5469$15i0ov
            (g$native-endianness$5367$15i0ov))))))
   (g$bytevector-ieee-double-native-ref$5393$15i0ov
     g$bytevector-ieee-double-native-ref$5504$15i0ov
     (case-lambda
       ((g$bytevector$5470$15i0ov g$k$5471$15i0ov)
        (if (not (zero? (mod g$k$5471$15i0ov '8)))
          (assertion-violation
            'bytevector-ieee-double-native-ref
            '"must be multiple of 8"
            g$k$5471$15i0ov)
          (bytevector-ieee-double-ref
            g$bytevector$5470$15i0ov
            g$k$5471$15i0ov
            (g$native-endianness$5367$15i0ov))))))
   (g$bytevector-ieee-single-native-set!$5394$15i0ov
     g$bytevector-ieee-single-native-set!$5505$15i0ov
     (case-lambda
       ((g$bytevector$5472$15i0ov g$k$5473$15i0ov g$x$5474$15i0ov)
        (if (not (zero? (mod g$k$5473$15i0ov '4)))
          (assertion-violation
            'bytevector-ieee-single-native-set!
            '"must be multiple of 4"
            g$k$5473$15i0ov)
          (bytevector-ieee-single-set!
            g$bytevector$5472$15i0ov
            g$k$5473$15i0ov
            g$x$5474$15i0ov
            (g$native-endianness$5367$15i0ov))))))
   (g$bytevector-ieee-double-native-set!$5395$15i0ov
     g$bytevector-ieee-double-native-set!$5506$15i0ov
     (case-lambda
       ((g$bytevector$5475$15i0ov g$k$5476$15i0ov g$x$5477$15i0ov)
        (if (not (zero? (mod g$k$5476$15i0ov '8)))
          (assertion-violation
            'bytevector-ieee-double-native-set!
            '"must be multiple of 8"
            g$k$5476$15i0ov)
          (bytevector-ieee-double-set!
            g$bytevector$5475$15i0ov
            g$k$5476$15i0ov
            g$x$5477$15i0ov
            (g$native-endianness$5367$15i0ov)))))))
  (void))

(library-letrec* (ironscheme control) () (void))

(library-letrec* (ironscheme eval) () (void))

(library-letrec* (ironscheme exceptions) () (void))

(library-letrec* (ironscheme conditions)
  ((g$6445$5507$15i0ov
     g$6445$5602$15i0ov
     (make-record-type-descriptor
       '&condition
       '#f
       'g$6448$15i0ov
       '#f
       '#f
       '#()))
   (g$6447$5508$15i0ov g$6447$5603$15i0ov '#f)
   (g$6446$5509$15i0ov
     g$6446$5604$15i0ov
     (make-record-constructor-descriptor
       g$6445$5507$15i0ov
       '#f
       g$6447$5508$15i0ov))
   (g$&condition?$5510$15i0ov
     g$&condition?$5605$15i0ov
     (record-predicate g$6445$5507$15i0ov))
   (g$make-&condition$5511$15i0ov
     g$make-&condition$5606$15i0ov
     (record-constructor g$6446$5509$15i0ov))
   (g$&condition-rtd$5512$15i0ov
     g$&condition-rtd$5607$15i0ov
     g$6445$5507$15i0ov)
   (g$&condition-rcd$5513$15i0ov
     g$&condition-rcd$5608$15i0ov
     g$6446$5509$15i0ov)
   (g$6461$5514$15i0ov
     g$6461$5609$15i0ov
     (make-record-type-descriptor
       '&message
       g$6445$5507$15i0ov
       'g$6464$15i0ov
       '#f
       '#f
       '#((immutable message))))
   (g$6463$5515$15i0ov g$6463$5610$15i0ov '#f)
   (g$6462$5516$15i0ov
     g$6462$5611$15i0ov
     (make-record-constructor-descriptor
       g$6461$5514$15i0ov
       g$6446$5509$15i0ov
       g$6463$5515$15i0ov))
   (g$6460$5517$15i0ov
     g$6460$5612$15i0ov
     (record-predicate g$6461$5514$15i0ov))
   (g$make-message-condition$5518$15i0ov
     g$make-message-condition$5613$15i0ov
     (record-constructor g$6462$5516$15i0ov))
   (g$6459$5519$15i0ov
     g$6459$5614$15i0ov
     (record-accessor g$6461$5514$15i0ov '0))
   (g$message-condition?$5520$15i0ov
     g$message-condition?$5615$15i0ov
     (condition-predicate g$6461$5514$15i0ov))
   (g$condition-message$5521$15i0ov
     g$condition-message$5616$15i0ov
     (condition-accessor g$6461$5514$15i0ov g$6459$5519$15i0ov))
   (g$6477$5522$15i0ov
     g$6477$5617$15i0ov
     (make-record-type-descriptor
       '&warning
       g$6445$5507$15i0ov
       'g$6480$15i0ov
       '#f
       '#f
       '#()))
   (g$6479$5523$15i0ov g$6479$5618$15i0ov '#f)
   (g$6478$5524$15i0ov
     g$6478$5619$15i0ov
     (make-record-constructor-descriptor
       g$6477$5522$15i0ov
       g$6446$5509$15i0ov
       g$6479$5523$15i0ov))
   (g$6476$5525$15i0ov
     g$6476$5620$15i0ov
     (record-predicate g$6477$5522$15i0ov))
   (g$make-warning$5526$15i0ov
     g$make-warning$5621$15i0ov
     (record-constructor g$6478$5524$15i0ov))
   (g$warning?$5527$15i0ov
     g$warning?$5622$15i0ov
     (condition-predicate g$6477$5522$15i0ov))
   (g$6491$5528$15i0ov
     g$6491$5623$15i0ov
     (make-record-type-descriptor
       '&serious
       g$6445$5507$15i0ov
       'g$6494$15i0ov
       '#f
       '#f
       '#()))
   (g$6493$5529$15i0ov g$6493$5624$15i0ov '#f)
   (g$6492$5530$15i0ov
     g$6492$5625$15i0ov
     (make-record-constructor-descriptor
       g$6491$5528$15i0ov
       g$6446$5509$15i0ov
       g$6493$5529$15i0ov))
   (g$6490$5531$15i0ov
     g$6490$5626$15i0ov
     (record-predicate g$6491$5528$15i0ov))
   (g$make-serious-condition$5532$15i0ov
     g$make-serious-condition$5627$15i0ov
     (record-constructor g$6492$5530$15i0ov))
   (g$serious-condition?$5533$15i0ov
     g$serious-condition?$5628$15i0ov
     (condition-predicate g$6491$5528$15i0ov))
   (g$6505$5534$15i0ov
     g$6505$5629$15i0ov
     (make-record-type-descriptor
       '&error
       g$6491$5528$15i0ov
       'g$6508$15i0ov
       '#f
       '#f
       '#()))
   (g$6507$5535$15i0ov g$6507$5630$15i0ov '#f)
   (g$6506$5536$15i0ov
     g$6506$5631$15i0ov
     (make-record-constructor-descriptor
       g$6505$5534$15i0ov
       g$6492$5530$15i0ov
       g$6507$5535$15i0ov))
   (g$6504$5537$15i0ov
     g$6504$5632$15i0ov
     (record-predicate g$6505$5534$15i0ov))
   (g$make-error$5538$15i0ov
     g$make-error$5633$15i0ov
     (record-constructor g$6506$5536$15i0ov))
   (g$error?$5539$15i0ov
     g$error?$5634$15i0ov
     (condition-predicate g$6505$5534$15i0ov))
   (g$6519$5540$15i0ov
     g$6519$5635$15i0ov
     (make-record-type-descriptor
       '&violation
       g$6491$5528$15i0ov
       'g$6522$15i0ov
       '#f
       '#f
       '#()))
   (g$6521$5541$15i0ov g$6521$5636$15i0ov '#f)
   (g$6520$5542$15i0ov
     g$6520$5637$15i0ov
     (make-record-constructor-descriptor
       g$6519$5540$15i0ov
       g$6492$5530$15i0ov
       g$6521$5541$15i0ov))
   (g$6518$5543$15i0ov
     g$6518$5638$15i0ov
     (record-predicate g$6519$5540$15i0ov))
   (g$make-violation$5544$15i0ov
     g$make-violation$5639$15i0ov
     (record-constructor g$6520$5542$15i0ov))
   (g$violation?$5545$15i0ov
     g$violation?$5640$15i0ov
     (condition-predicate g$6519$5540$15i0ov))
   (g$6533$5546$15i0ov
     g$6533$5641$15i0ov
     (make-record-type-descriptor
       '&assertion
       g$6519$5540$15i0ov
       'g$6536$15i0ov
       '#f
       '#f
       '#()))
   (g$6535$5547$15i0ov g$6535$5642$15i0ov '#f)
   (g$6534$5548$15i0ov
     g$6534$5643$15i0ov
     (make-record-constructor-descriptor
       g$6533$5546$15i0ov
       g$6520$5542$15i0ov
       g$6535$5547$15i0ov))
   (g$6532$5549$15i0ov
     g$6532$5644$15i0ov
     (record-predicate g$6533$5546$15i0ov))
   (g$make-assertion-violation$5550$15i0ov
     g$make-assertion-violation$5645$15i0ov
     (record-constructor g$6534$5548$15i0ov))
   (g$assertion-violation?$5551$15i0ov
     g$assertion-violation?$5646$15i0ov
     (condition-predicate g$6533$5546$15i0ov))
   (g$6548$5552$15i0ov
     g$6548$5647$15i0ov
     (make-record-type-descriptor
       '&irritants
       g$6445$5507$15i0ov
       'g$6551$15i0ov
       '#f
       '#f
       '#((immutable irritants))))
   (g$6550$5553$15i0ov g$6550$5648$15i0ov '#f)
   (g$6549$5554$15i0ov
     g$6549$5649$15i0ov
     (make-record-constructor-descriptor
       g$6548$5552$15i0ov
       g$6446$5509$15i0ov
       g$6550$5553$15i0ov))
   (g$6547$5555$15i0ov
     g$6547$5650$15i0ov
     (record-predicate g$6548$5552$15i0ov))
   (g$make-irritants-condition$5556$15i0ov
     g$make-irritants-condition$5651$15i0ov
     (record-constructor g$6549$5554$15i0ov))
   (g$6546$5557$15i0ov
     g$6546$5652$15i0ov
     (record-accessor g$6548$5552$15i0ov '0))
   (g$irritants-condition?$5558$15i0ov
     g$irritants-condition?$5653$15i0ov
     (condition-predicate g$6548$5552$15i0ov))
   (g$condition-irritants$5559$15i0ov
     g$condition-irritants$5654$15i0ov
     (condition-accessor g$6548$5552$15i0ov g$6546$5557$15i0ov))
   (g$6565$5560$15i0ov
     g$6565$5655$15i0ov
     (make-record-type-descriptor
       '&who
       g$6445$5507$15i0ov
       'g$6568$15i0ov
       '#f
       '#f
       '#((immutable who))))
   (g$6567$5561$15i0ov g$6567$5656$15i0ov '#f)
   (g$6566$5562$15i0ov
     g$6566$5657$15i0ov
     (make-record-constructor-descriptor
       g$6565$5560$15i0ov
       g$6446$5509$15i0ov
       g$6567$5561$15i0ov))
   (g$6564$5563$15i0ov
     g$6564$5658$15i0ov
     (record-predicate g$6565$5560$15i0ov))
   (g$make-who-condition$5564$15i0ov
     g$make-who-condition$5659$15i0ov
     (record-constructor g$6566$5562$15i0ov))
   (g$6563$5565$15i0ov
     g$6563$5660$15i0ov
     (record-accessor g$6565$5560$15i0ov '0))
   (g$who-condition?$5566$15i0ov
     g$who-condition?$5661$15i0ov
     (condition-predicate g$6565$5560$15i0ov))
   (g$condition-who$5567$15i0ov
     g$condition-who$5662$15i0ov
     (condition-accessor g$6565$5560$15i0ov g$6563$5565$15i0ov))
   (g$6581$5568$15i0ov
     g$6581$5663$15i0ov
     (make-record-type-descriptor
       '&non-continuable
       g$6519$5540$15i0ov
       'g$6584$15i0ov
       '#f
       '#f
       '#()))
   (g$6583$5569$15i0ov g$6583$5664$15i0ov '#f)
   (g$6582$5570$15i0ov
     g$6582$5665$15i0ov
     (make-record-constructor-descriptor
       g$6581$5568$15i0ov
       g$6520$5542$15i0ov
       g$6583$5569$15i0ov))
   (g$6580$5571$15i0ov
     g$6580$5666$15i0ov
     (record-predicate g$6581$5568$15i0ov))
   (g$make-non-continuable-violation$5572$15i0ov
     g$make-non-continuable-violation$5667$15i0ov
     (record-constructor g$6582$5570$15i0ov))
   (g$non-continuable-violation?$5573$15i0ov
     g$non-continuable-violation?$5668$15i0ov
     (condition-predicate g$6581$5568$15i0ov))
   (g$6595$5574$15i0ov
     g$6595$5669$15i0ov
     (make-record-type-descriptor
       '&implementation-restriction
       g$6519$5540$15i0ov
       'g$6598$15i0ov
       '#f
       '#f
       '#()))
   (g$6597$5575$15i0ov g$6597$5670$15i0ov '#f)
   (g$6596$5576$15i0ov
     g$6596$5671$15i0ov
     (make-record-constructor-descriptor
       g$6595$5574$15i0ov
       g$6520$5542$15i0ov
       g$6597$5575$15i0ov))
   (g$6594$5577$15i0ov
     g$6594$5672$15i0ov
     (record-predicate g$6595$5574$15i0ov))
   (g$make-implementation-restriction-violation$5578$15i0ov
     g$make-implementation-restriction-violation$5673$15i0ov
     (record-constructor g$6596$5576$15i0ov))
   (g$implementation-restriction-violation?$5579$15i0ov
     g$implementation-restriction-violation?$5674$15i0ov
     (condition-predicate g$6595$5574$15i0ov))
   (g$6609$5580$15i0ov
     g$6609$5675$15i0ov
     (make-record-type-descriptor
       '&lexical
       g$6519$5540$15i0ov
       'g$6612$15i0ov
       '#f
       '#f
       '#()))
   (g$6611$5581$15i0ov g$6611$5676$15i0ov '#f)
   (g$6610$5582$15i0ov
     g$6610$5677$15i0ov
     (make-record-constructor-descriptor
       g$6609$5580$15i0ov
       g$6520$5542$15i0ov
       g$6611$5581$15i0ov))
   (g$6608$5583$15i0ov
     g$6608$5678$15i0ov
     (record-predicate g$6609$5580$15i0ov))
   (g$make-lexical-violation$5584$15i0ov
     g$make-lexical-violation$5679$15i0ov
     (record-constructor g$6610$5582$15i0ov))
   (g$lexical-violation?$5585$15i0ov
     g$lexical-violation?$5680$15i0ov
     (condition-predicate g$6609$5580$15i0ov))
   (g$6625$5586$15i0ov
     g$6625$5681$15i0ov
     (make-record-type-descriptor
       '&syntax
       g$6519$5540$15i0ov
       'g$6628$15i0ov
       '#f
       '#f
       '#((immutable form) (immutable subform))))
   (g$6627$5587$15i0ov g$6627$5682$15i0ov '#f)
   (g$6626$5588$15i0ov
     g$6626$5683$15i0ov
     (make-record-constructor-descriptor
       g$6625$5586$15i0ov
       g$6520$5542$15i0ov
       g$6627$5587$15i0ov))
   (g$6624$5589$15i0ov
     g$6624$5684$15i0ov
     (record-predicate g$6625$5586$15i0ov))
   (g$make-syntax-violation$5590$15i0ov
     g$make-syntax-violation$5685$15i0ov
     (record-constructor g$6626$5588$15i0ov))
   (g$6622$5591$15i0ov
     g$6622$5686$15i0ov
     (record-accessor g$6625$5586$15i0ov '0))
   (g$6623$5592$15i0ov
     g$6623$5687$15i0ov
     (record-accessor g$6625$5586$15i0ov '1))
   (g$syntax-violation?$5593$15i0ov
     g$syntax-violation?$5688$15i0ov
     (condition-predicate g$6625$5586$15i0ov))
   (g$syntax-violation-form$5594$15i0ov
     g$syntax-violation-form$5689$15i0ov
     (condition-accessor g$6625$5586$15i0ov g$6622$5591$15i0ov))
   (g$syntax-violation-subform$5595$15i0ov
     g$syntax-violation-subform$5690$15i0ov
     (condition-accessor g$6625$5586$15i0ov g$6623$5592$15i0ov))
   (g$6643$5596$15i0ov
     g$6643$5691$15i0ov
     (make-record-type-descriptor
       '&undefined
       g$6519$5540$15i0ov
       'g$6646$15i0ov
       '#f
       '#f
       '#()))
   (g$6645$5597$15i0ov g$6645$5692$15i0ov '#f)
   (g$6644$5598$15i0ov
     g$6644$5693$15i0ov
     (make-record-constructor-descriptor
       g$6643$5596$15i0ov
       g$6520$5542$15i0ov
       g$6645$5597$15i0ov))
   (g$6642$5599$15i0ov
     g$6642$5694$15i0ov
     (record-predicate g$6643$5596$15i0ov))
   (g$make-undefined-violation$5600$15i0ov
     g$make-undefined-violation$5695$15i0ov
     (record-constructor g$6644$5598$15i0ov))
   (g$undefined-violation?$5601$15i0ov
     g$undefined-violation?$5696$15i0ov
     (condition-predicate g$6643$5596$15i0ov)))
  (void))

(library-letrec* (ironscheme mutable-pairs)
  ((g$append!$5697$15i0ov
     g$append!$5703$15i0ov
     (case-lambda
       ((g$a$5698$15i0ov . g$b$5699$15i0ov)
        (if (null? g$a$5698$15i0ov)
          g$b$5699$15i0ov
          (if (null? g$b$5699$15i0ov)
            g$a$5698$15i0ov
            (begin
              ((letrec ((g$f$5700$15i0ov
                          (case-lambda
                            ((g$a$5701$15i0ov)
                             ((case-lambda
                                ((g$n$5702$15i0ov)
                                 (if (null? g$n$5702$15i0ov)
                                   (set-cdr! g$a$5701$15i0ov g$b$5699$15i0ov)
                                   (g$f$5700$15i0ov g$n$5702$15i0ov))))
                              (cdr g$a$5701$15i0ov))))))
                 g$f$5700$15i0ov)
               g$a$5698$15i0ov)
              g$a$5698$15i0ov)))))))
  (void))

(library-letrec* (ironscheme mutable-strings) () (void))

(library-letrec* (ironscheme programs) () (void))

(library-letrec* (ironscheme r5rs)
  ((g$sign$5704$15i0ov
     g$sign$5722$15i0ov
     (case-lambda
       ((g$n$5710$15i0ov)
        (if (> g$n$5710$15i0ov '0) '1 (if (< g$n$5710$15i0ov '0) '-1 '0)))))
   (g$quotient$5705$15i0ov
     g$quotient$5723$15i0ov
     (case-lambda
       ((g$n1$5711$15i0ov g$n2$5712$15i0ov)
        (* (g$sign$5704$15i0ov g$n1$5711$15i0ov)
           (g$sign$5704$15i0ov g$n2$5712$15i0ov)
           (div (abs g$n1$5711$15i0ov) (abs g$n2$5712$15i0ov))))))
   (g$remainder$5706$15i0ov
     g$remainder$5724$15i0ov
     (case-lambda
       ((g$n1$5713$15i0ov g$n2$5714$15i0ov)
        (* (g$sign$5704$15i0ov g$n1$5713$15i0ov)
           (mod (abs g$n1$5713$15i0ov) (abs g$n2$5714$15i0ov))))))
   (g$modulo$5707$15i0ov
     g$modulo$5725$15i0ov
     (case-lambda
       ((g$n1$5715$15i0ov g$n2$5716$15i0ov)
        (* (g$sign$5704$15i0ov g$n2$5716$15i0ov)
           (mod (* (g$sign$5704$15i0ov g$n2$5716$15i0ov) g$n1$5715$15i0ov)
                (abs g$n2$5716$15i0ov))))))
   (g$make-promise$5708$15i0ov
     g$make-promise$5726$15i0ov
     (case-lambda
       ((g$proc$5717$15i0ov)
        ((case-lambda
           ((g$result-ready?$5718$15i0ov g$result$5719$15i0ov)
            (case-lambda
              (()
               (if g$result-ready?$5718$15i0ov
                 g$result$5719$15i0ov
                 ((case-lambda
                    ((g$x$5720$15i0ov)
                     (if g$result-ready?$5718$15i0ov
                       g$result$5719$15i0ov
                       (begin
                         (set! g$result-ready?$5718$15i0ov '#t)
                         (set! g$result$5719$15i0ov g$x$5720$15i0ov)
                         g$result$5719$15i0ov))))
                  (g$proc$5717$15i0ov)))))))
         '#f
         '#f))))
   (g$force$5709$15i0ov
     g$force$5727$15i0ov
     (case-lambda ((g$object$5721$15i0ov) (g$object$5721$15i0ov)))))
  (void))

(library-letrec* (ironscheme sorting)
  ((g$split$5728$15i0ov
     g$split$5754$15i0ov
     (case-lambda
       ((g$ls$5731$15i0ov)
        ((letrec ((g$loop$5732$15i0ov
                    (case-lambda
                      ((g$rest$5733$15i0ov
                         g$left$5734$15i0ov
                         g$right$5735$15i0ov)
                       (if (null? g$rest$5733$15i0ov)
                         (cons g$left$5734$15i0ov g$right$5735$15i0ov)
                         (if (null? (cdr g$rest$5733$15i0ov))
                           (cons
                             (cons (car g$rest$5733$15i0ov) g$left$5734$15i0ov)
                             g$right$5735$15i0ov)
                           (g$loop$5732$15i0ov
                             (g$cddr$4892$15i0ov g$rest$5733$15i0ov)
                             (cons (car g$rest$5733$15i0ov) g$left$5734$15i0ov)
                             (cons
                               (g$cadr$4890$15i0ov g$rest$5733$15i0ov)
                               g$right$5735$15i0ov))))))))
           g$loop$5732$15i0ov)
         g$ls$5731$15i0ov
         '()
         '()))))
   (g$reverse-it$5729$15i0ov
     g$reverse-it$5755$15i0ov
     (case-lambda
       ((g$head$5736$15i0ov g$tail$5737$15i0ov)
        (if (null? g$head$5736$15i0ov)
          g$tail$5737$15i0ov
          ((case-lambda
             ((g$hd$5738$15i0ov g$tl$5739$15i0ov)
              (g$reverse-it$5729$15i0ov
                g$tl$5739$15i0ov
                (cons g$hd$5738$15i0ov g$tail$5737$15i0ov))))
           (car g$head$5736$15i0ov)
           (cdr g$head$5736$15i0ov))))))
   (g$list-sort$5730$15i0ov
     g$list-sort$5756$15i0ov
     (case-lambda
       ((g$precedes?$5740$15i0ov g$ls$5741$15i0ov)
        ((case-lambda
           ((g$merge$5742$15i0ov)
            ((case-lambda
               (()
                (if (null? g$ls$5741$15i0ov)
                  '()
                  ((letrec ((g$helper$5743$15i0ov
                              (case-lambda
                                ((g$piece$5744$15i0ov)
                                 (if (null? (cdr g$piece$5744$15i0ov))
                                   g$piece$5744$15i0ov
                                   ((case-lambda
                                      ((g$parts$5745$15i0ov)
                                       (g$merge$5742$15i0ov
                                         (g$helper$5743$15i0ov
                                           (car g$parts$5745$15i0ov))
                                         (g$helper$5743$15i0ov
                                           (cdr g$parts$5745$15i0ov)))))
                                    (g$split$5728$15i0ov
                                      g$piece$5744$15i0ov)))))))
                     g$helper$5743$15i0ov)
                   g$ls$5741$15i0ov)))))))
         (case-lambda
           ((g$list-1$5746$15i0ov g$list-2$5747$15i0ov)
            ((letrec ((g$loop$5748$15i0ov
                        (case-lambda
                          ((g$source-1$5749$15i0ov
                             g$source-2$5750$15i0ov
                             g$so-far$5751$15i0ov)
                           (if (null? g$source-1$5749$15i0ov)
                             (g$reverse-it$5729$15i0ov
                               g$so-far$5751$15i0ov
                               g$source-2$5750$15i0ov)
                             (if (null? g$source-2$5750$15i0ov)
                               (g$reverse-it$5729$15i0ov
                                 g$so-far$5751$15i0ov
                                 g$source-1$5749$15i0ov)
                               ((case-lambda
                                  ((g$car-1$5752$15i0ov g$car-2$5753$15i0ov)
                                   (if (g$precedes?$5740$15i0ov
                                         g$car-2$5753$15i0ov
                                         g$car-1$5752$15i0ov)
                                     (g$loop$5748$15i0ov
                                       g$source-1$5749$15i0ov
                                       (cdr g$source-2$5750$15i0ov)
                                       (cons
                                         g$car-2$5753$15i0ov
                                         g$so-far$5751$15i0ov))
                                     (g$loop$5748$15i0ov
                                       g$source-2$5750$15i0ov
                                       (cdr g$source-1$5749$15i0ov)
                                       (cons
                                         g$car-1$5752$15i0ov
                                         g$so-far$5751$15i0ov)))))
                                (car g$source-1$5749$15i0ov)
                                (car g$source-2$5750$15i0ov))))))))
               g$loop$5748$15i0ov)
             g$list-1$5746$15i0ov
             g$list-2$5747$15i0ov
             '()))))))))
  (void))

(library-letrec* (ironscheme syntax-case) () (void))

(library-letrec* (ironscheme unicode) () (void))

(library-letrec* (ironscheme arithmetic bitwise)
  ((g$bitwise-if$5794$15i0ov
     g$bitwise-if$5841$15i0ov
     (case-lambda
       ((g$ei1$5801$15i0ov g$ei2$5802$15i0ov g$ei3$5803$15i0ov)
        (bitwise-ior
          (bitwise-and g$ei1$5801$15i0ov g$ei2$5802$15i0ov)
          (bitwise-and (bitwise-not g$ei1$5801$15i0ov) g$ei3$5803$15i0ov)))))
   (g$bitwise-copy-bit$5795$15i0ov
     g$bitwise-copy-bit$5842$15i0ov
     (case-lambda
       ((g$ei1$5804$15i0ov g$ei2$5805$15i0ov g$ei3$5806$15i0ov)
        ((case-lambda
           ((g$mask$5807$15i0ov)
            ((case-lambda
               (()
                (g$bitwise-if$5794$15i0ov
                  g$mask$5807$15i0ov
                  (g$bitwise-arithmetic-shift-left$5798$15i0ov
                    g$ei3$5806$15i0ov
                    g$ei2$5805$15i0ov)
                  g$ei1$5804$15i0ov))))))
         (g$bitwise-arithmetic-shift-left$5798$15i0ov '1 g$ei2$5805$15i0ov)))))
   (g$bitwise-bit-field$5796$15i0ov
     g$bitwise-bit-field$5843$15i0ov
     (case-lambda
       ((g$ei1$5808$15i0ov g$ei2$5809$15i0ov g$ei3$5810$15i0ov)
        ((case-lambda
           ((g$mask$5811$15i0ov)
            (g$bitwise-arithmetic-shift-right$5799$15i0ov
              (bitwise-and g$ei1$5808$15i0ov g$mask$5811$15i0ov)
              g$ei2$5809$15i0ov)))
         (bitwise-not
           (g$bitwise-arithmetic-shift-left$5798$15i0ov
             '-1
             g$ei3$5810$15i0ov))))))
   (g$bitwise-copy-bit-field$5797$15i0ov
     g$bitwise-copy-bit-field$5844$15i0ov
     (case-lambda
       ((g$ei1$5812$15i0ov
          g$ei2$5813$15i0ov
          g$ei3$5814$15i0ov
          g$ei4$5815$15i0ov)
        ((case-lambda
           ((g$to$5816$15i0ov)
            ((case-lambda
               ((g$start$5817$15i0ov)
                ((case-lambda
                   ((g$end$5818$15i0ov)
                    ((case-lambda
                       ((g$from$5819$15i0ov)
                        ((case-lambda
                           ((g$mask1$5820$15i0ov)
                            ((case-lambda
                               ((g$mask2$5821$15i0ov)
                                ((case-lambda
                                   ((g$mask$5822$15i0ov)
                                    ((case-lambda
                                       (()
                                        (g$bitwise-if$5794$15i0ov
                                          g$mask$5822$15i0ov
                                          (g$bitwise-arithmetic-shift-left$5798$15i0ov
                                            g$from$5819$15i0ov
                                            g$start$5817$15i0ov)
                                          g$to$5816$15i0ov))))))
                                 (bitwise-and
                                   g$mask1$5820$15i0ov
                                   g$mask2$5821$15i0ov))))
                             (bitwise-not
                               (g$bitwise-arithmetic-shift-left$5798$15i0ov
                                 '-1
                                 g$end$5818$15i0ov)))))
                         (g$bitwise-arithmetic-shift-left$5798$15i0ov
                           '-1
                           g$start$5817$15i0ov))))
                     g$ei4$5815$15i0ov)))
                 g$ei3$5814$15i0ov)))
             g$ei2$5813$15i0ov)))
         g$ei1$5812$15i0ov))))
   (g$bitwise-arithmetic-shift-left$5798$15i0ov
     g$bitwise-arithmetic-shift-left$5845$15i0ov
     (case-lambda
       ((g$ei1$5823$15i0ov g$ei2$5824$15i0ov)
        (bitwise-arithmetic-shift g$ei1$5823$15i0ov g$ei2$5824$15i0ov))))
   (g$bitwise-arithmetic-shift-right$5799$15i0ov
     g$bitwise-arithmetic-shift-right$5846$15i0ov
     (case-lambda
       ((g$ei1$5825$15i0ov g$ei2$5826$15i0ov)
        (bitwise-arithmetic-shift g$ei1$5825$15i0ov (- g$ei2$5826$15i0ov)))))
   (g$bitwise-rotate-bit-field$5800$15i0ov
     g$bitwise-rotate-bit-field$5847$15i0ov
     (case-lambda
       ((g$ei1$5827$15i0ov
          g$ei2$5828$15i0ov
          g$ei3$5829$15i0ov
          g$ei4$5830$15i0ov)
        ((case-lambda
           ((g$n$5831$15i0ov)
            ((case-lambda
               ((g$start$5832$15i0ov)
                ((case-lambda
                   ((g$end$5833$15i0ov)
                    ((case-lambda
                       ((g$count$5834$15i0ov)
                        ((case-lambda
                           ((g$width$5835$15i0ov)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5835$15i0ov)
                                  ((case-lambda
                                     ((g$count$5836$15i0ov)
                                      ((case-lambda
                                         ((g$field0$5837$15i0ov)
                                          ((case-lambda
                                             ((g$field1$5838$15i0ov)
                                              ((case-lambda
                                                 ((g$field2$5839$15i0ov)
                                                  ((case-lambda
                                                     ((g$field$5840$15i0ov)
                                                      ((case-lambda
                                                         (()
                                                          (g$bitwise-copy-bit-field$5797$15i0ov
                                                            g$n$5831$15i0ov
                                                            g$start$5832$15i0ov
                                                            g$end$5833$15i0ov
                                                            g$field$5840$15i0ov))))))
                                                   (bitwise-ior
                                                     g$field1$5838$15i0ov
                                                     g$field2$5839$15i0ov))))
                                               (g$bitwise-arithmetic-shift-right$5799$15i0ov
                                                 g$field0$5837$15i0ov
                                                 (- g$width$5835$15i0ov
                                                    g$count$5836$15i0ov)))))
                                           (g$bitwise-arithmetic-shift-left$5798$15i0ov
                                             g$field0$5837$15i0ov
                                             g$count$5836$15i0ov))))
                                       (g$bitwise-bit-field$5796$15i0ov
                                         g$n$5831$15i0ov
                                         g$start$5832$15i0ov
                                         g$end$5833$15i0ov))))
                                   (mod g$count$5834$15i0ov
                                        g$width$5835$15i0ov))
                                  g$n$5831$15i0ov))))))
                         (- g$end$5833$15i0ov g$start$5832$15i0ov))))
                     g$ei4$5830$15i0ov)))
                 g$ei3$5829$15i0ov)))
             g$ei2$5828$15i0ov)))
         g$ei1$5827$15i0ov)))))
  (void))

(library-letrec* (ironscheme arithmetic fixnums)
  ((g$fxif$5848$15i0ov
     g$fxif$5895$15i0ov
     (case-lambda
       ((g$fx1$5855$15i0ov g$fx2$5856$15i0ov g$fx3$5857$15i0ov)
        (fxior
          (fxand g$fx1$5855$15i0ov g$fx2$5856$15i0ov)
          (fxand (fxnot g$fx1$5855$15i0ov) g$fx3$5857$15i0ov)))))
   (g$fxcopy-bit$5849$15i0ov
     g$fxcopy-bit$5896$15i0ov
     (case-lambda
       ((g$fx1$5858$15i0ov g$fx2$5859$15i0ov g$fx3$5860$15i0ov)
        ((case-lambda
           ((g$mask$5861$15i0ov)
            ((case-lambda
               (()
                (g$fxif$5848$15i0ov
                  g$mask$5861$15i0ov
                  (g$fxarithmetic-shift-left$5852$15i0ov
                    g$fx3$5860$15i0ov
                    g$fx2$5859$15i0ov)
                  g$fx1$5858$15i0ov))))))
         (g$fxarithmetic-shift-left$5852$15i0ov '1 g$fx2$5859$15i0ov)))))
   (g$fxbit-field$5850$15i0ov
     g$fxbit-field$5897$15i0ov
     (case-lambda
       ((g$fx1$5862$15i0ov g$fx2$5863$15i0ov g$fx3$5864$15i0ov)
        ((case-lambda
           ((g$mask$5865$15i0ov)
            ((case-lambda
               (()
                (g$fxarithmetic-shift-right$5853$15i0ov
                  (fxand g$fx1$5862$15i0ov g$mask$5865$15i0ov)
                  g$fx2$5863$15i0ov))))))
         (fxnot
           (g$fxarithmetic-shift-left$5852$15i0ov '-1 g$fx3$5864$15i0ov))))))
   (g$fxcopy-bit-field$5851$15i0ov
     g$fxcopy-bit-field$5898$15i0ov
     (case-lambda
       ((g$fx1$5866$15i0ov
          g$fx2$5867$15i0ov
          g$fx3$5868$15i0ov
          g$fx4$5869$15i0ov)
        ((case-lambda
           ((g$to$5870$15i0ov)
            ((case-lambda
               ((g$start$5871$15i0ov)
                ((case-lambda
                   ((g$end$5872$15i0ov)
                    ((case-lambda
                       ((g$from$5873$15i0ov)
                        ((case-lambda
                           ((g$mask1$5874$15i0ov)
                            ((case-lambda
                               ((g$mask2$5875$15i0ov)
                                ((case-lambda
                                   ((g$mask$5876$15i0ov)
                                    ((case-lambda
                                       (()
                                        (g$fxif$5848$15i0ov
                                          g$mask$5876$15i0ov
                                          (g$fxarithmetic-shift-left$5852$15i0ov
                                            g$from$5873$15i0ov
                                            g$start$5871$15i0ov)
                                          g$to$5870$15i0ov))))))
                                 (fxand
                                   g$mask1$5874$15i0ov
                                   g$mask2$5875$15i0ov))))
                             (fxnot
                               (g$fxarithmetic-shift-left$5852$15i0ov
                                 '-1
                                 g$end$5872$15i0ov)))))
                         (g$fxarithmetic-shift-left$5852$15i0ov
                           '-1
                           g$start$5871$15i0ov))))
                     g$fx4$5869$15i0ov)))
                 g$fx3$5868$15i0ov)))
             g$fx2$5867$15i0ov)))
         g$fx1$5866$15i0ov))))
   (g$fxarithmetic-shift-left$5852$15i0ov
     g$fxarithmetic-shift-left$5899$15i0ov
     (case-lambda
       ((g$fx1$5877$15i0ov g$fx2$5878$15i0ov)
        (fxarithmetic-shift g$fx1$5877$15i0ov g$fx2$5878$15i0ov))))
   (g$fxarithmetic-shift-right$5853$15i0ov
     g$fxarithmetic-shift-right$5900$15i0ov
     (case-lambda
       ((g$fx1$5879$15i0ov g$fx2$5880$15i0ov)
        (fxarithmetic-shift g$fx1$5879$15i0ov (- g$fx2$5880$15i0ov)))))
   (g$fxrotate-bit-field$5854$15i0ov
     g$fxrotate-bit-field$5901$15i0ov
     (case-lambda
       ((g$fx1$5881$15i0ov
          g$fx2$5882$15i0ov
          g$fx3$5883$15i0ov
          g$fx4$5884$15i0ov)
        ((case-lambda
           ((g$n$5885$15i0ov)
            ((case-lambda
               ((g$start$5886$15i0ov)
                ((case-lambda
                   ((g$end$5887$15i0ov)
                    ((case-lambda
                       ((g$count$5888$15i0ov)
                        ((case-lambda
                           ((g$width$5889$15i0ov)
                            ((case-lambda
                               (()
                                (if (positive? g$width$5889$15i0ov)
                                  ((case-lambda
                                     ((g$count$5890$15i0ov)
                                      ((case-lambda
                                         ((g$field0$5891$15i0ov)
                                          ((case-lambda
                                             ((g$field1$5892$15i0ov)
                                              ((case-lambda
                                                 ((g$field2$5893$15i0ov)
                                                  ((case-lambda
                                                     ((g$field$5894$15i0ov)
                                                      ((case-lambda
                                                         (()
                                                          (g$fxcopy-bit-field$5851$15i0ov
                                                            g$n$5885$15i0ov
                                                            g$start$5886$15i0ov
                                                            g$end$5887$15i0ov
                                                            g$field$5894$15i0ov))))))
                                                   (fxior
                                                     g$field1$5892$15i0ov
                                                     g$field2$5893$15i0ov))))
                                               (g$fxarithmetic-shift-right$5853$15i0ov
                                                 g$field0$5891$15i0ov
                                                 (- g$width$5889$15i0ov
                                                    g$count$5890$15i0ov)))))
                                           (g$fxarithmetic-shift-left$5852$15i0ov
                                             g$field0$5891$15i0ov
                                             g$count$5890$15i0ov))))
                                       (g$fxbit-field$5850$15i0ov
                                         g$n$5885$15i0ov
                                         g$start$5886$15i0ov
                                         g$end$5887$15i0ov))))
                                   (mod g$count$5888$15i0ov
                                        g$width$5889$15i0ov))
                                  g$n$5885$15i0ov))))))
                         (- g$end$5887$15i0ov g$start$5886$15i0ov))))
                     g$fx4$5884$15i0ov)))
                 g$fx3$5883$15i0ov)))
             g$fx2$5882$15i0ov)))
         g$fx1$5881$15i0ov)))))
  (void))

(library-letrec* (ironscheme arithmetic flonums)
  ((g$6863$5902$15i0ov
     g$6863$5914$15i0ov
     (make-record-type-descriptor
       '&no-infinities
       &implementation-restriction-rtd
       'g$6866$15i0ov
       '#f
       '#f
       '#()))
   (g$6865$5903$15i0ov g$6865$5915$15i0ov '#f)
   (g$6864$5904$15i0ov
     g$6864$5916$15i0ov
     (make-record-constructor-descriptor
       g$6863$5902$15i0ov
       &implementation-restriction-rcd
       g$6865$5903$15i0ov))
   (g$6862$5905$15i0ov
     g$6862$5917$15i0ov
     (record-predicate g$6863$5902$15i0ov))
   (g$make-no-infinities-violation$5906$15i0ov
     g$make-no-infinities-violation$5918$15i0ov
     (record-constructor g$6864$5904$15i0ov))
   (g$no-infinities-violation?$5907$15i0ov
     g$no-infinities-violation?$5919$15i0ov
     (condition-predicate g$6863$5902$15i0ov))
   (g$6877$5908$15i0ov
     g$6877$5920$15i0ov
     (make-record-type-descriptor
       '&no-nans
       &implementation-restriction-rtd
       'g$6880$15i0ov
       '#f
       '#f
       '#()))
   (g$6879$5909$15i0ov g$6879$5921$15i0ov '#f)
   (g$6878$5910$15i0ov
     g$6878$5922$15i0ov
     (make-record-constructor-descriptor
       g$6877$5908$15i0ov
       &implementation-restriction-rcd
       g$6879$5909$15i0ov))
   (g$6876$5911$15i0ov
     g$6876$5923$15i0ov
     (record-predicate g$6877$5908$15i0ov))
   (g$make-no-nans-violation$5912$15i0ov
     g$make-no-nans-violation$5924$15i0ov
     (record-constructor g$6878$5910$15i0ov))
   (g$no-nans-violation?$5913$15i0ov
     g$no-nans-violation?$5925$15i0ov
     (condition-predicate g$6877$5908$15i0ov)))
  (void))

(library-letrec* (ironscheme io conditions)
  ((g$6892$5926$15i0ov
     g$6892$6006$15i0ov
     (make-record-type-descriptor
       '&i/o
       &error-rtd
       'g$6895$15i0ov
       '#f
       '#f
       '#()))
   (g$6894$5927$15i0ov g$6894$6007$15i0ov '#f)
   (g$6893$5928$15i0ov
     g$6893$6008$15i0ov
     (make-record-constructor-descriptor
       g$6892$5926$15i0ov
       &error-rcd
       g$6894$5927$15i0ov))
   (g$6891$5929$15i0ov
     g$6891$6009$15i0ov
     (record-predicate g$6892$5926$15i0ov))
   (g$make-i/o-error$5930$15i0ov
     g$make-i/o-error$6010$15i0ov
     (record-constructor g$6893$5928$15i0ov))
   (g$i/o-error?$5931$15i0ov
     g$i/o-error?$6011$15i0ov
     (condition-predicate g$6892$5926$15i0ov))
   (g$6906$5932$15i0ov
     g$6906$6012$15i0ov
     (make-record-type-descriptor
       '&i/o-read
       g$6892$5926$15i0ov
       'g$6909$15i0ov
       '#f
       '#f
       '#()))
   (g$6908$5933$15i0ov g$6908$6013$15i0ov '#f)
   (g$6907$5934$15i0ov
     g$6907$6014$15i0ov
     (make-record-constructor-descriptor
       g$6906$5932$15i0ov
       g$6893$5928$15i0ov
       g$6908$5933$15i0ov))
   (g$6905$5935$15i0ov
     g$6905$6015$15i0ov
     (record-predicate g$6906$5932$15i0ov))
   (g$make-i/o-read-error$5936$15i0ov
     g$make-i/o-read-error$6016$15i0ov
     (record-constructor g$6907$5934$15i0ov))
   (g$i/o-read-error?$5937$15i0ov
     g$i/o-read-error?$6017$15i0ov
     (condition-predicate g$6906$5932$15i0ov))
   (g$6920$5938$15i0ov
     g$6920$6018$15i0ov
     (make-record-type-descriptor
       '&i/o-write
       g$6892$5926$15i0ov
       'g$6923$15i0ov
       '#f
       '#f
       '#()))
   (g$6922$5939$15i0ov g$6922$6019$15i0ov '#f)
   (g$6921$5940$15i0ov
     g$6921$6020$15i0ov
     (make-record-constructor-descriptor
       g$6920$5938$15i0ov
       g$6893$5928$15i0ov
       g$6922$5939$15i0ov))
   (g$6919$5941$15i0ov
     g$6919$6021$15i0ov
     (record-predicate g$6920$5938$15i0ov))
   (g$make-i/o-write-error$5942$15i0ov
     g$make-i/o-write-error$6022$15i0ov
     (record-constructor g$6921$5940$15i0ov))
   (g$i/o-write-error?$5943$15i0ov
     g$i/o-write-error?$6023$15i0ov
     (condition-predicate g$6920$5938$15i0ov))
   (g$6935$5944$15i0ov
     g$6935$6024$15i0ov
     (make-record-type-descriptor
       '&i/o-invalid-position
       g$6892$5926$15i0ov
       'g$6938$15i0ov
       '#f
       '#f
       '#((immutable position))))
   (g$6937$5945$15i0ov g$6937$6025$15i0ov '#f)
   (g$6936$5946$15i0ov
     g$6936$6026$15i0ov
     (make-record-constructor-descriptor
       g$6935$5944$15i0ov
       g$6893$5928$15i0ov
       g$6937$5945$15i0ov))
   (g$6934$5947$15i0ov
     g$6934$6027$15i0ov
     (record-predicate g$6935$5944$15i0ov))
   (g$make-i/o-invalid-position-error$5948$15i0ov
     g$make-i/o-invalid-position-error$6028$15i0ov
     (record-constructor g$6936$5946$15i0ov))
   (g$6933$5949$15i0ov
     g$6933$6029$15i0ov
     (record-accessor g$6935$5944$15i0ov '0))
   (g$i/o-invalid-position-error?$5950$15i0ov
     g$i/o-invalid-position-error?$6030$15i0ov
     (condition-predicate g$6935$5944$15i0ov))
   (g$i/o-error-position$5951$15i0ov
     g$i/o-error-position$6031$15i0ov
     (condition-accessor g$6935$5944$15i0ov g$6933$5949$15i0ov))
   (g$6952$5952$15i0ov
     g$6952$6032$15i0ov
     (make-record-type-descriptor
       '&i/o-filename
       g$6892$5926$15i0ov
       'g$6955$15i0ov
       '#f
       '#f
       '#((immutable filename))))
   (g$6954$5953$15i0ov g$6954$6033$15i0ov '#f)
   (g$6953$5954$15i0ov
     g$6953$6034$15i0ov
     (make-record-constructor-descriptor
       g$6952$5952$15i0ov
       g$6893$5928$15i0ov
       g$6954$5953$15i0ov))
   (g$6951$5955$15i0ov
     g$6951$6035$15i0ov
     (record-predicate g$6952$5952$15i0ov))
   (g$make-i/o-filename-error$5956$15i0ov
     g$make-i/o-filename-error$6036$15i0ov
     (record-constructor g$6953$5954$15i0ov))
   (g$6950$5957$15i0ov
     g$6950$6037$15i0ov
     (record-accessor g$6952$5952$15i0ov '0))
   (g$i/o-filename-error?$5958$15i0ov
     g$i/o-filename-error?$6038$15i0ov
     (condition-predicate g$6952$5952$15i0ov))
   (g$i/o-error-filename$5959$15i0ov
     g$i/o-error-filename$6039$15i0ov
     (condition-accessor g$6952$5952$15i0ov g$6950$5957$15i0ov))
   (g$6968$5960$15i0ov
     g$6968$6040$15i0ov
     (make-record-type-descriptor
       '&i/o-file-protection
       g$6952$5952$15i0ov
       'g$6971$15i0ov
       '#f
       '#f
       '#()))
   (g$6970$5961$15i0ov g$6970$6041$15i0ov '#f)
   (g$6969$5962$15i0ov
     g$6969$6042$15i0ov
     (make-record-constructor-descriptor
       g$6968$5960$15i0ov
       g$6953$5954$15i0ov
       g$6970$5961$15i0ov))
   (g$6967$5963$15i0ov
     g$6967$6043$15i0ov
     (record-predicate g$6968$5960$15i0ov))
   (g$make-i/o-file-protection-error$5964$15i0ov
     g$make-i/o-file-protection-error$6044$15i0ov
     (record-constructor g$6969$5962$15i0ov))
   (g$i/o-file-protection-error?$5965$15i0ov
     g$i/o-file-protection-error?$6045$15i0ov
     (condition-predicate g$6968$5960$15i0ov))
   (g$6982$5966$15i0ov
     g$6982$6046$15i0ov
     (make-record-type-descriptor
       '&i/o-file-is-read-only
       g$6968$5960$15i0ov
       'g$6985$15i0ov
       '#f
       '#f
       '#()))
   (g$6984$5967$15i0ov g$6984$6047$15i0ov '#f)
   (g$6983$5968$15i0ov
     g$6983$6048$15i0ov
     (make-record-constructor-descriptor
       g$6982$5966$15i0ov
       g$6969$5962$15i0ov
       g$6984$5967$15i0ov))
   (g$6981$5969$15i0ov
     g$6981$6049$15i0ov
     (record-predicate g$6982$5966$15i0ov))
   (g$make-i/o-file-is-read-only-error$5970$15i0ov
     g$make-i/o-file-is-read-only-error$6050$15i0ov
     (record-constructor g$6983$5968$15i0ov))
   (g$i/o-file-is-read-only-error?$5971$15i0ov
     g$i/o-file-is-read-only-error?$6051$15i0ov
     (condition-predicate g$6982$5966$15i0ov))
   (g$6996$5972$15i0ov
     g$6996$6052$15i0ov
     (make-record-type-descriptor
       '&i/o-file-already-exists
       g$6952$5952$15i0ov
       'g$6999$15i0ov
       '#f
       '#f
       '#()))
   (g$6998$5973$15i0ov g$6998$6053$15i0ov '#f)
   (g$6997$5974$15i0ov
     g$6997$6054$15i0ov
     (make-record-constructor-descriptor
       g$6996$5972$15i0ov
       g$6953$5954$15i0ov
       g$6998$5973$15i0ov))
   (g$6995$5975$15i0ov
     g$6995$6055$15i0ov
     (record-predicate g$6996$5972$15i0ov))
   (g$make-i/o-file-already-exists-error$5976$15i0ov
     g$make-i/o-file-already-exists-error$6056$15i0ov
     (record-constructor g$6997$5974$15i0ov))
   (g$i/o-file-already-exists-error?$5977$15i0ov
     g$i/o-file-already-exists-error?$6057$15i0ov
     (condition-predicate g$6996$5972$15i0ov))
   (g$7010$5978$15i0ov
     g$7010$6058$15i0ov
     (make-record-type-descriptor
       '&i/o-file-does-not-exist
       g$6952$5952$15i0ov
       'g$7013$15i0ov
       '#f
       '#f
       '#()))
   (g$7012$5979$15i0ov g$7012$6059$15i0ov '#f)
   (g$7011$5980$15i0ov
     g$7011$6060$15i0ov
     (make-record-constructor-descriptor
       g$7010$5978$15i0ov
       g$6953$5954$15i0ov
       g$7012$5979$15i0ov))
   (g$7009$5981$15i0ov
     g$7009$6061$15i0ov
     (record-predicate g$7010$5978$15i0ov))
   (g$make-i/o-file-does-not-exist-error$5982$15i0ov
     g$make-i/o-file-does-not-exist-error$6062$15i0ov
     (record-constructor g$7011$5980$15i0ov))
   (g$i/o-file-does-not-exist-error?$5983$15i0ov
     g$i/o-file-does-not-exist-error?$6063$15i0ov
     (condition-predicate g$7010$5978$15i0ov))
   (g$7025$5984$15i0ov
     g$7025$6064$15i0ov
     (make-record-type-descriptor
       '&i/o-port
       g$6892$5926$15i0ov
       'g$7028$15i0ov
       '#f
       '#f
       '#((immutable port))))
   (g$7027$5985$15i0ov g$7027$6065$15i0ov '#f)
   (g$7026$5986$15i0ov
     g$7026$6066$15i0ov
     (make-record-constructor-descriptor
       g$7025$5984$15i0ov
       g$6893$5928$15i0ov
       g$7027$5985$15i0ov))
   (g$7024$5987$15i0ov
     g$7024$6067$15i0ov
     (record-predicate g$7025$5984$15i0ov))
   (g$make-i/o-port-error$5988$15i0ov
     g$make-i/o-port-error$6068$15i0ov
     (record-constructor g$7026$5986$15i0ov))
   (g$7023$5989$15i0ov
     g$7023$6069$15i0ov
     (record-accessor g$7025$5984$15i0ov '0))
   (g$i/o-port-error?$5990$15i0ov
     g$i/o-port-error?$6070$15i0ov
     (condition-predicate g$7025$5984$15i0ov))
   (g$i/o-error-port$5991$15i0ov
     g$i/o-error-port$6071$15i0ov
     (condition-accessor g$7025$5984$15i0ov g$7023$5989$15i0ov))
   (g$7041$5992$15i0ov
     g$7041$6072$15i0ov
     (make-record-type-descriptor
       '&i/o-decoding
       g$7025$5984$15i0ov
       'g$7044$15i0ov
       '#f
       '#f
       '#()))
   (g$7043$5993$15i0ov g$7043$6073$15i0ov '#f)
   (g$7042$5994$15i0ov
     g$7042$6074$15i0ov
     (make-record-constructor-descriptor
       g$7041$5992$15i0ov
       g$7026$5986$15i0ov
       g$7043$5993$15i0ov))
   (g$7040$5995$15i0ov
     g$7040$6075$15i0ov
     (record-predicate g$7041$5992$15i0ov))
   (g$make-i/o-decoding-error$5996$15i0ov
     g$make-i/o-decoding-error$6076$15i0ov
     (record-constructor g$7042$5994$15i0ov))
   (g$i/o-decoding-error?$5997$15i0ov
     g$i/o-decoding-error?$6077$15i0ov
     (condition-predicate g$7041$5992$15i0ov))
   (g$7056$5998$15i0ov
     g$7056$6078$15i0ov
     (make-record-type-descriptor
       '&i/o-encoding
       g$7025$5984$15i0ov
       'g$7059$15i0ov
       '#f
       '#f
       '#((immutable char))))
   (g$7058$5999$15i0ov g$7058$6079$15i0ov '#f)
   (g$7057$6000$15i0ov
     g$7057$6080$15i0ov
     (make-record-constructor-descriptor
       g$7056$5998$15i0ov
       g$7026$5986$15i0ov
       g$7058$5999$15i0ov))
   (g$7055$6001$15i0ov
     g$7055$6081$15i0ov
     (record-predicate g$7056$5998$15i0ov))
   (g$make-i/o-encoding-error$6002$15i0ov
     g$make-i/o-encoding-error$6082$15i0ov
     (record-constructor g$7057$6000$15i0ov))
   (g$7054$6003$15i0ov
     g$7054$6083$15i0ov
     (record-accessor g$7056$5998$15i0ov '0))
   (g$i/o-encoding-error?$6004$15i0ov
     g$i/o-encoding-error?$6084$15i0ov
     (condition-predicate g$7056$5998$15i0ov))
   (g$i/o-encoding-error-char$6005$15i0ov
     g$i/o-encoding-error-char$6085$15i0ov
     (condition-accessor g$7056$5998$15i0ov g$7054$6003$15i0ov)))
  (void))

(library-letrec* (ironscheme io ports)
  ((g$get-output-string$6086$15i0ov
     g$get-output-string$6094$15i0ov
     (case-lambda
       ((g$port$6090$15i0ov)
        (clr-call-internal
          'ironscheme.runtime.stringwriter
          'getbuffer
          g$port$6090$15i0ov))))
   (g$open-output-string$6087$15i0ov
     g$open-output-string$6095$15i0ov
     (case-lambda (() (clr-new-internal 'ironscheme.runtime.stringwriter))))
   (g$open-string-output-port$6088$15i0ov
     g$open-string-output-port$6096$15i0ov
     (case-lambda
       (()
        ((case-lambda
           ((g$p$6091$15i0ov)
            (values
              g$p$6091$15i0ov
              (case-lambda
                (() (g$get-output-string$6086$15i0ov g$p$6091$15i0ov))))))
         (g$open-output-string$6087$15i0ov)))))
   (g$port?$6089$15i0ov
     g$port?$6097$15i0ov
     (case-lambda
       ((g$obj$6092$15i0ov)
        ((case-lambda
           ((g$t$6093$15i0ov)
            (if g$t$6093$15i0ov
              g$t$6093$15i0ov
              (begin '#f (binary-port? g$obj$6092$15i0ov)))))
         (textual-port? g$obj$6092$15i0ov))))))
  (void))

(library-letrec* (ironscheme io simple)
  ((g$with-input-from-file$6104$15i0ov
     g$with-input-from-file$6130$15i0ov
     (case-lambda
       ((g$filename$6108$15i0ov g$thunk$6109$15i0ov)
        ((case-lambda
           ((g$current-input-port$6112$15i0ov g$t$6113$15i0ov)
            ((case-lambda
               ((g$swap$6114$15i0ov)
                (dynamic-wind
                  g$swap$6114$15i0ov
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6109$15i0ov)))
                       (case-lambda
                         (() (close-input-port (current-input-port)))))))
                  g$swap$6114$15i0ov)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6115$15i0ov)
                    (begin
                      (g$current-input-port$6112$15i0ov g$t$6113$15i0ov)
                      (set! g$t$6113$15i0ov g$t$6115$15i0ov))))
                 (g$current-input-port$6112$15i0ov)))))))
         current-input-port
         (open-input-file g$filename$6108$15i0ov)))))
   (g$with-output-to-file$6105$15i0ov
     g$with-output-to-file$6131$15i0ov
     (case-lambda
       ((g$filename$6116$15i0ov g$thunk$6117$15i0ov)
        ((case-lambda
           ((g$current-output-port$6120$15i0ov g$t$6121$15i0ov)
            ((case-lambda
               ((g$swap$6122$15i0ov)
                (dynamic-wind
                  g$swap$6122$15i0ov
                  (case-lambda
                    (()
                     (dynamic-wind
                       (case-lambda (() '#f))
                       (case-lambda (() (g$thunk$6117$15i0ov)))
                       (case-lambda
                         (() (close-output-port (current-output-port)))))))
                  g$swap$6122$15i0ov)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$6123$15i0ov)
                    (begin
                      (g$current-output-port$6120$15i0ov g$t$6121$15i0ov)
                      (set! g$t$6121$15i0ov g$t$6123$15i0ov))))
                 (g$current-output-port$6120$15i0ov)))))))
         current-output-port
         (open-output-file g$filename$6116$15i0ov)))))
   (g$call-with-input-file$6106$15i0ov
     g$call-with-input-file$6132$15i0ov
     (case-lambda
       ((g$filename$6124$15i0ov g$proc$6125$15i0ov)
        ((case-lambda
           ((g$p$6126$15i0ov)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6125$15i0ov g$p$6126$15i0ov)))
              (case-lambda (() (close-input-port g$p$6126$15i0ov))))))
         (open-input-file g$filename$6124$15i0ov)))))
   (g$call-with-output-file$6107$15i0ov
     g$call-with-output-file$6133$15i0ov
     (case-lambda
       ((g$filename$6127$15i0ov g$proc$6128$15i0ov)
        ((case-lambda
           ((g$p$6129$15i0ov)
            (dynamic-wind
              (case-lambda (() '#f))
              (case-lambda (() (g$proc$6128$15i0ov g$p$6129$15i0ov)))
              (case-lambda (() (close-output-port g$p$6129$15i0ov))))))
         (open-output-file g$filename$6127$15i0ov))))))
  (void))

(library-letrec* (ironscheme records inspection) () (void))

(library-letrec* (ironscheme records procedural) () (void))

(library-letrec* (ironscheme records syntactic) () (void))

(library-letrec* (ironscheme enums)
  ((g$7123$6134$15i0ov
     g$7123$6240$15i0ov
     (make-record-type-descriptor
       'enum
       '#f
       '#f
       '#f
       '#f
       '#((immutable value) (immutable info))))
   (g$7125$6135$15i0ov g$7125$6241$15i0ov '#f)
   (g$7124$6136$15i0ov
     g$7124$6242$15i0ov
     (make-record-constructor-descriptor
       g$7123$6134$15i0ov
       '#f
       g$7125$6135$15i0ov))
   (g$enum?$6137$15i0ov
     g$enum?$6243$15i0ov
     (record-predicate g$7123$6134$15i0ov))
   (g$make-enum$6138$15i0ov
     g$make-enum$6244$15i0ov
     (record-constructor g$7124$6136$15i0ov))
   (g$enum-value$6139$15i0ov
     g$enum-value$6245$15i0ov
     (record-accessor g$7123$6134$15i0ov '0))
   (g$enum-info$6140$15i0ov
     g$enum-info$6246$15i0ov
     (record-accessor g$7123$6134$15i0ov '1))
   (g$7136$6141$15i0ov
     g$7136$6247$15i0ov
     (make-record-type-descriptor
       'enum-universe
       '#f
       '#f
       '#f
       '#f
       '#((immutable id)
          (immutable symbols)
          (immutable mapping)
          (immutable value))))
   (g$7138$6142$15i0ov g$7138$6248$15i0ov '#f)
   (g$7137$6143$15i0ov
     g$7137$6249$15i0ov
     (make-record-constructor-descriptor
       g$7136$6141$15i0ov
       '#f
       g$7138$6142$15i0ov))
   (g$enum-universe?$6144$15i0ov
     g$enum-universe?$6250$15i0ov
     (record-predicate g$7136$6141$15i0ov))
   (g$make-enum-universe$6145$15i0ov
     g$make-enum-universe$6251$15i0ov
     (record-constructor g$7137$6143$15i0ov))
   (g$enum-universe-id$6146$15i0ov
     g$enum-universe-id$6252$15i0ov
     (record-accessor g$7136$6141$15i0ov '0))
   (g$enum-universe-symbols$6147$15i0ov
     g$enum-universe-symbols$6253$15i0ov
     (record-accessor g$7136$6141$15i0ov '1))
   (g$enum-universe-mapping$6148$15i0ov
     g$enum-universe-mapping$6254$15i0ov
     (record-accessor g$7136$6141$15i0ov '2))
   (g$enum-universe-value$6149$15i0ov
     g$enum-universe-value$6255$15i0ov
     (record-accessor g$7136$6141$15i0ov '3))
   (g$enum-type=?$6150$15i0ov
     g$enum-type=?$6256$15i0ov
     (case-lambda
       ((g$enumset1$6170$15i0ov g$enumset2$6171$15i0ov)
        (eq? (g$enum-universe-id$6146$15i0ov
               (g$enum-info$6140$15i0ov g$enumset1$6170$15i0ov))
             (g$enum-universe-id$6146$15i0ov
               (g$enum-info$6140$15i0ov g$enumset2$6171$15i0ov))))))
   (g$get-symbols$6151$15i0ov
     g$get-symbols$6257$15i0ov
     (case-lambda
       ((g$enumset$6172$15i0ov)
        (g$enum-universe-symbols$6147$15i0ov
          (g$enum-info$6140$15i0ov g$enumset$6172$15i0ov)))))
   (g$get-value$6152$15i0ov
     g$get-value$6258$15i0ov
     (case-lambda
       ((g$enumset$6173$15i0ov g$s$6174$15i0ov)
        (g$hashtable-ref$5155$15i0ov
          (g$enum-universe-mapping$6148$15i0ov
            (g$enum-info$6140$15i0ov g$enumset$6173$15i0ov))
          g$s$6174$15i0ov
          '#f))))
   (g$assert-enum$6153$15i0ov
     g$assert-enum$6259$15i0ov
     (case-lambda
       ((g$who$6175$15i0ov g$enumset$6176$15i0ov)
        (if (not (g$enum?$6137$15i0ov g$enumset$6176$15i0ov))
          (assertion-violation
            g$who$6175$15i0ov
            '"not an enumeration"
            g$enumset$6176$15i0ov)
          (void)))))
   (g$make-info$6154$15i0ov
     g$make-info$6260$15i0ov
     (case-lambda
       ((g$symbols$6177$15i0ov)
        ((case-lambda
           ((g$ht$6178$15i0ov)
            ((letrec ((g$f$6179$15i0ov
                        (case-lambda
                          ((g$s$6180$15i0ov g$a$6181$15i0ov g$mask$6182$15i0ov)
                           (if (null? g$s$6180$15i0ov)
                             (values
                               (reverse! g$a$6181$15i0ov)
                               g$ht$6178$15i0ov
                               (- g$mask$6182$15i0ov '1))
                             ((case-lambda
                                ((g$n$6183$15i0ov)
                                 (if (symbol? g$n$6183$15i0ov)
                                   (if (g$hashtable-contains?$5158$15i0ov
                                         g$ht$6178$15i0ov
                                         g$n$6183$15i0ov)
                                     (g$f$6179$15i0ov
                                       (cdr g$s$6180$15i0ov)
                                       g$a$6181$15i0ov
                                       g$mask$6182$15i0ov)
                                     (begin
                                       (g$hashtable-set!$5156$15i0ov
                                         g$ht$6178$15i0ov
                                         g$n$6183$15i0ov
                                         g$mask$6182$15i0ov)
                                       (g$f$6179$15i0ov
                                         (cdr g$s$6180$15i0ov)
                                         (cons g$n$6183$15i0ov g$a$6181$15i0ov)
                                         (g$bitwise-arithmetic-shift-left$5845$15i0ov
                                           g$mask$6182$15i0ov
                                           '1))))
                                   (assertion-violation
                                     'make-enumeration
                                     '"not a symbol"
                                     g$n$6183$15i0ov))))
                              (car g$s$6180$15i0ov)))))))
               g$f$6179$15i0ov)
             g$symbols$6177$15i0ov
             '()
             '1)))
         (g$make-eq-hashtable$5152$15i0ov)))))
   (g$make-enumeration$6155$15i0ov
     g$make-enumeration$6261$15i0ov
     (case-lambda
       ((g$symbols$6184$15i0ov)
        (call-with-values
          (case-lambda (() (g$make-info$6154$15i0ov g$symbols$6184$15i0ov)))
          (case-lambda
            ((g$s$6188$15i0ov g$mapping$6189$15i0ov g$mask$6190$15i0ov)
             ((case-lambda
                ((g$mask$6191$15i0ov g$mapping$6192$15i0ov g$s$6193$15i0ov)
                 (g$make-enum$6138$15i0ov
                   g$mask$6191$15i0ov
                   (g$make-enum-universe$6145$15i0ov
                     (gensym)
                     g$s$6193$15i0ov
                     g$mapping$6192$15i0ov
                     g$mask$6191$15i0ov))))
              g$mask$6190$15i0ov
              g$mapping$6189$15i0ov
              g$s$6188$15i0ov)))))))
   (g$enum-set-universe$6156$15i0ov
     g$enum-set-universe$6262$15i0ov
     (case-lambda
       ((g$enumset$6194$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov 'enum-set-universe g$enumset$6194$15i0ov)
          ((case-lambda
             ((g$ei$6195$15i0ov)
              (g$make-enum$6138$15i0ov
                (g$enum-universe-value$6149$15i0ov g$ei$6195$15i0ov)
                g$ei$6195$15i0ov)))
           (g$enum-info$6140$15i0ov g$enumset$6194$15i0ov))))))
   (g$enum-set-indexer$6157$15i0ov
     g$enum-set-indexer$6263$15i0ov
     (case-lambda
       ((g$enumset$6196$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov 'enum-set-indexer g$enumset$6196$15i0ov)
          (case-lambda
            ((g$symbol$6197$15i0ov)
             (begin
               (if (not (symbol? g$symbol$6197$15i0ov))
                 (assertion-violation
                   'enum-set-indexer
                   '"not a symbol"
                   g$symbol$6197$15i0ov)
                 (void))
               ((case-lambda
                  ((g$v$6198$15i0ov)
                   (if g$v$6198$15i0ov
                     (- (bitwise-length g$v$6198$15i0ov) '1)
                     '#f)))
                (g$get-value$6152$15i0ov
                  g$enumset$6196$15i0ov
                  g$symbol$6197$15i0ov)))))))))
   (g$enum-set-constructor$6158$15i0ov
     g$enum-set-constructor$6264$15i0ov
     (case-lambda
       ((g$enumset$6199$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov
            'enum-set-constructor
            g$enumset$6199$15i0ov)
          (case-lambda
            ((g$symbols$6200$15i0ov)
             ((letrec ((g$f$6201$15i0ov
                         (case-lambda
                           ((g$v$6202$15i0ov g$s$6203$15i0ov)
                            (if (null? g$s$6203$15i0ov)
                              (g$make-enum$6138$15i0ov
                                g$v$6202$15i0ov
                                (g$enum-info$6140$15i0ov g$enumset$6199$15i0ov))
                              ((case-lambda
                                 ((g$n$6204$15i0ov)
                                  (if (symbol? g$n$6204$15i0ov)
                                    ((case-lambda
                                       ((g$v*$6205$15i0ov)
                                        (if g$v*$6205$15i0ov
                                          (g$f$6201$15i0ov
                                            (bitwise-ior
                                              g$v$6202$15i0ov
                                              g$v*$6205$15i0ov)
                                            (cdr g$s$6203$15i0ov))
                                          (assertion-violation
                                            'enum-set-constructor
                                            '"not a member of enum-set"
                                            g$n$6204$15i0ov))))
                                     (g$get-value$6152$15i0ov
                                       g$enumset$6199$15i0ov
                                       g$n$6204$15i0ov))
                                    (assertion-violation
                                      'enum-set-constructor
                                      '"not a symbol"
                                      g$n$6204$15i0ov))))
                               (car g$s$6203$15i0ov)))))))
                g$f$6201$15i0ov)
              '0
              g$symbols$6200$15i0ov)))))))
   (g$enum-set->list$6159$15i0ov
     g$enum-set->list$6265$15i0ov
     (case-lambda
       ((g$enumset$6206$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov 'enum-set->list g$enumset$6206$15i0ov)
          ((case-lambda
             ((g$value$6207$15i0ov)
              ((letrec ((g$f$6208$15i0ov
                          (case-lambda
                            ((g$s$6209$15i0ov g$l$6210$15i0ov)
                             (if (null? g$s$6209$15i0ov)
                               (reverse! g$l$6210$15i0ov)
                               (if (zero?
                                     (bitwise-and
                                       (g$get-value$6152$15i0ov
                                         g$enumset$6206$15i0ov
                                         (car g$s$6209$15i0ov))
                                       g$value$6207$15i0ov))
                                 (g$f$6208$15i0ov
                                   (cdr g$s$6209$15i0ov)
                                   g$l$6210$15i0ov)
                                 (g$f$6208$15i0ov
                                   (cdr g$s$6209$15i0ov)
                                   (cons
                                     (car g$s$6209$15i0ov)
                                     g$l$6210$15i0ov))))))))
                 g$f$6208$15i0ov)
               (g$get-symbols$6151$15i0ov g$enumset$6206$15i0ov)
               '())))
           (g$enum-value$6139$15i0ov g$enumset$6206$15i0ov))))))
   (g$enum-set-member?$6160$15i0ov
     g$enum-set-member?$6266$15i0ov
     (case-lambda
       ((g$symbol$6211$15i0ov g$enumset$6212$15i0ov)
        (begin
          (if (not (symbol? g$symbol$6211$15i0ov))
            (assertion-violation
              'enum-set-member?
              '"not a symbol"
              g$symbol$6211$15i0ov)
            (void))
          (g$assert-enum$6153$15i0ov 'enum-set-member? g$enumset$6212$15i0ov)
          ((case-lambda
             ((g$v$6213$15i0ov)
              (if g$v$6213$15i0ov
                (not (zero?
                       (bitwise-and
                         g$v$6213$15i0ov
                         (g$enum-value$6139$15i0ov g$enumset$6212$15i0ov))))
                '#f)))
           (g$get-value$6152$15i0ov
             g$enumset$6212$15i0ov
             g$symbol$6211$15i0ov))))))
   (g$enum-set-subset?$6161$15i0ov
     g$enum-set-subset?$6267$15i0ov
     (case-lambda
       ((g$enumset1$6214$15i0ov g$enumset2$6215$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov 'enum-set-subset? g$enumset1$6214$15i0ov)
          (g$assert-enum$6153$15i0ov 'enum-set-subset? g$enumset2$6215$15i0ov)
          ((case-lambda
             ((g$v1$6216$15i0ov g$v2$6217$15i0ov)
              (if (g$enum-type=?$6150$15i0ov
                    g$enumset1$6214$15i0ov
                    g$enumset2$6215$15i0ov)
                (= (bitwise-and g$v1$6216$15i0ov g$v2$6217$15i0ov)
                   g$v1$6216$15i0ov)
                ((letrec ((g$f$6218$15i0ov
                            (case-lambda
                              ((g$s$6219$15i0ov)
                               (if (null? g$s$6219$15i0ov)
                                 '#t
                                 ((case-lambda
                                    ((g$v1*$6220$15i0ov g$v2*$6221$15i0ov)
                                     (if g$v2*$6221$15i0ov
                                       ((case-lambda
                                          ((g$has1$6222$15i0ov
                                             g$has2$6223$15i0ov)
                                           (if (if g$has1$6222$15i0ov
                                                 (begin
                                                   '#f
                                                   (not g$has2$6223$15i0ov))
                                                 '#f)
                                             '#f
                                             (g$f$6218$15i0ov
                                               (cdr g$s$6219$15i0ov)))))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v1$6216$15i0ov
                                                 g$v1*$6220$15i0ov)))
                                        (not (zero?
                                               (bitwise-and
                                                 g$v2$6217$15i0ov
                                                 g$v2*$6221$15i0ov))))
                                       '#f)))
                                  (g$get-value$6152$15i0ov
                                    g$enumset1$6214$15i0ov
                                    (car g$s$6219$15i0ov))
                                  (g$get-value$6152$15i0ov
                                    g$enumset2$6215$15i0ov
                                    (car g$s$6219$15i0ov))))))))
                   g$f$6218$15i0ov)
                 (g$get-symbols$6151$15i0ov g$enumset1$6214$15i0ov)))))
           (g$enum-value$6139$15i0ov g$enumset1$6214$15i0ov)
           (g$enum-value$6139$15i0ov g$enumset2$6215$15i0ov))))))
   (g$enum-set=?$6162$15i0ov
     g$enum-set=?$6268$15i0ov
     (case-lambda
       ((g$enumset1$6224$15i0ov g$enumset2$6225$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov 'enum-set=? g$enumset1$6224$15i0ov)
          (g$assert-enum$6153$15i0ov 'enum-set=? g$enumset2$6225$15i0ov)
          (if (g$enum-set-subset?$6161$15i0ov
                g$enumset1$6224$15i0ov
                g$enumset2$6225$15i0ov)
            (begin
              '#f
              (g$enum-set-subset?$6161$15i0ov
                g$enumset2$6225$15i0ov
                g$enumset1$6224$15i0ov))
            '#f)))))
   (g$enum-set-union$6163$15i0ov
     g$enum-set-union$6269$15i0ov
     (case-lambda
       ((g$enumset1$6226$15i0ov g$enumset2$6227$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov 'enum-set-union g$enumset1$6226$15i0ov)
          (g$assert-enum$6153$15i0ov 'enum-set-union g$enumset2$6227$15i0ov)
          (if (g$enum-type=?$6150$15i0ov
                g$enumset1$6226$15i0ov
                g$enumset2$6227$15i0ov)
            (g$make-enum$6138$15i0ov
              (bitwise-ior
                (g$enum-value$6139$15i0ov g$enumset1$6226$15i0ov)
                (g$enum-value$6139$15i0ov g$enumset2$6227$15i0ov))
              (g$enum-info$6140$15i0ov g$enumset1$6226$15i0ov))
            '#f)))))
   (g$enum-set-intersection$6164$15i0ov
     g$enum-set-intersection$6270$15i0ov
     (case-lambda
       ((g$enumset1$6228$15i0ov g$enumset2$6229$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov
            'enum-set-intersection
            g$enumset1$6228$15i0ov)
          (g$assert-enum$6153$15i0ov
            'enum-set-intersection
            g$enumset2$6229$15i0ov)
          (if (g$enum-type=?$6150$15i0ov
                g$enumset1$6228$15i0ov
                g$enumset2$6229$15i0ov)
            (g$make-enum$6138$15i0ov
              (bitwise-and
                (g$enum-value$6139$15i0ov g$enumset1$6228$15i0ov)
                (g$enum-value$6139$15i0ov g$enumset2$6229$15i0ov))
              (g$enum-info$6140$15i0ov g$enumset1$6228$15i0ov))
            '#f)))))
   (g$enum-set-difference$6165$15i0ov
     g$enum-set-difference$6271$15i0ov
     (case-lambda
       ((g$enumset1$6230$15i0ov g$enumset2$6231$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov
            'enum-set-difference
            g$enumset1$6230$15i0ov)
          (g$assert-enum$6153$15i0ov
            'enum-set-difference
            g$enumset2$6231$15i0ov)
          (if (g$enum-type=?$6150$15i0ov
                g$enumset1$6230$15i0ov
                g$enumset2$6231$15i0ov)
            (g$make-enum$6138$15i0ov
              (bitwise-and
                (g$enum-value$6139$15i0ov g$enumset1$6230$15i0ov)
                (bitwise-not (g$enum-value$6139$15i0ov g$enumset2$6231$15i0ov)))
              (g$enum-info$6140$15i0ov g$enumset1$6230$15i0ov))
            '#f)))))
   (g$enum-set-complement$6166$15i0ov
     g$enum-set-complement$6272$15i0ov
     (case-lambda
       ((g$enumset$6232$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov 'enum-set-complement g$enumset$6232$15i0ov)
          (g$make-enum$6138$15i0ov
            (bitwise-not (g$enum-value$6139$15i0ov g$enumset$6232$15i0ov))
            (g$enum-info$6140$15i0ov g$enumset$6232$15i0ov))))))
   (g$enum-set-projection$6167$15i0ov
     g$enum-set-projection$6273$15i0ov
     (case-lambda
       ((g$enumset1$6233$15i0ov g$enumset2$6234$15i0ov)
        (begin
          (g$assert-enum$6153$15i0ov
            'enum-set-projection
            g$enumset1$6233$15i0ov)
          (g$assert-enum$6153$15i0ov
            'enum-set-projection
            g$enumset2$6234$15i0ov)
          ((case-lambda
             ((g$v1$6235$15i0ov)
              ((letrec ((g$f$6236$15i0ov
                          (case-lambda
                            ((g$s$6237$15i0ov g$v$6238$15i0ov)
                             (if (null? g$s$6237$15i0ov)
                               (g$make-enum$6138$15i0ov
                                 g$v$6238$15i0ov
                                 (g$enum-info$6140$15i0ov
                                   g$enumset2$6234$15i0ov))
                               (if (zero?
                                     (bitwise-and
                                       g$v1$6235$15i0ov
                                       (g$get-value$6152$15i0ov
                                         g$enumset1$6233$15i0ov
                                         (car g$s$6237$15i0ov))))
                                 (g$f$6236$15i0ov
                                   (cdr g$s$6237$15i0ov)
                                   g$v$6238$15i0ov)
                                 ((case-lambda
                                    ((g$v2$6239$15i0ov)
                                     (if g$v2$6239$15i0ov
                                       (g$f$6236$15i0ov
                                         (cdr g$s$6237$15i0ov)
                                         (bitwise-ior
                                           g$v$6238$15i0ov
                                           g$v2$6239$15i0ov))
                                       (g$f$6236$15i0ov
                                         (cdr g$s$6237$15i0ov)
                                         g$v$6238$15i0ov))))
                                  (g$get-value$6152$15i0ov
                                    g$enumset2$6234$15i0ov
                                    (car g$s$6237$15i0ov)))))))))
                 g$f$6236$15i0ov)
               (g$get-symbols$6151$15i0ov g$enumset1$6233$15i0ov)
               '0)))
           (g$enum-value$6139$15i0ov g$enumset1$6233$15i0ov)))))))
  (make-record-printer
    'enum
    (case-lambda
      ((g$x$6168$15i0ov g$p$6169$15i0ov)
       (g$fprintf$6298$15i0ov
         g$p$6169$15i0ov
         '"#[enum-set ~a]"
         (g$enum-set->list$6159$15i0ov g$x$6168$15i0ov))))))

(library-letrec* (ironscheme format)
  ((g$dofmt$6274$15i0ov
     g$dofmt$6296$15i0ov
     (case-lambda
       ((g$p$6278$15i0ov g$cntl$6279$15i0ov g$args$6280$15i0ov)
        ((case-lambda
           ((g$nmax$6281$15i0ov)
            ((letrec ((g$loop$6282$15i0ov
                        (case-lambda
                          ((g$n$6283$15i0ov g$a$6284$15i0ov)
                           (if (fx<=? g$n$6283$15i0ov g$nmax$6281$15i0ov)
                             ((case-lambda
                                ((g$c$6285$15i0ov)
                                 (if (if (char=? g$c$6285$15i0ov '#\~)
                                       (begin
                                         '#f
                                         (fx<?
                                           g$n$6283$15i0ov
                                           g$nmax$6281$15i0ov))
                                       '#f)
                                   ((case-lambda
                                      ((g$t$6286$15i0ov)
                                       (if (memv g$t$6286$15i0ov '(#\a))
                                         (begin
                                           (display
                                             (car g$a$6284$15i0ov)
                                             g$p$6278$15i0ov)
                                           (g$loop$6282$15i0ov
                                             (fx+ g$n$6283$15i0ov '2)
                                             (cdr g$a$6284$15i0ov)))
                                         (if (memv g$t$6286$15i0ov '(#\s))
                                           (begin
                                             (write
                                               (car g$a$6284$15i0ov)
                                               g$p$6278$15i0ov)
                                             (g$loop$6282$15i0ov
                                               (fx+ g$n$6283$15i0ov '2)
                                               (cdr g$a$6284$15i0ov)))
                                           (if (memv g$t$6286$15i0ov '(#\b))
                                             (begin
                                               (write
                                                 (number->string
                                                   (car g$a$6284$15i0ov)
                                                   '2)
                                                 g$p$6278$15i0ov)
                                               (g$loop$6282$15i0ov
                                                 (fx+ g$n$6283$15i0ov '2)
                                                 (cdr g$a$6284$15i0ov)))
                                             (if (memv g$t$6286$15i0ov '(#\o))
                                               (begin
                                                 (write
                                                   (number->string
                                                     (car g$a$6284$15i0ov)
                                                     '8)
                                                   g$p$6278$15i0ov)
                                                 (g$loop$6282$15i0ov
                                                   (fx+ g$n$6283$15i0ov '2)
                                                   (cdr g$a$6284$15i0ov)))
                                               (if (memv g$t$6286$15i0ov '(#\x))
                                                 (begin
                                                   (write
                                                     (number->string
                                                       (car g$a$6284$15i0ov)
                                                       '16)
                                                     g$p$6278$15i0ov)
                                                   (g$loop$6282$15i0ov
                                                     (fx+ g$n$6283$15i0ov '2)
                                                     (cdr g$a$6284$15i0ov)))
                                                 (if (memv
                                                       g$t$6286$15i0ov
                                                       '(#\d))
                                                   (begin
                                                     (write
                                                       (number->string
                                                         (car g$a$6284$15i0ov)
                                                         '10)
                                                       g$p$6278$15i0ov)
                                                     (g$loop$6282$15i0ov
                                                       (fx+ g$n$6283$15i0ov '2)
                                                       (cdr g$a$6284$15i0ov)))
                                                   (if (memv
                                                         g$t$6286$15i0ov
                                                         '(#\~))
                                                     (begin
                                                       (write-char
                                                         '#\~
                                                         g$p$6278$15i0ov)
                                                       (g$loop$6282$15i0ov
                                                         (fx+ g$n$6283$15i0ov
                                                              '2)
                                                         g$a$6284$15i0ov))
                                                     (begin
                                                       (write-char
                                                         g$c$6285$15i0ov
                                                         g$p$6278$15i0ov)
                                                       (g$loop$6282$15i0ov
                                                         (fx+ g$n$6283$15i0ov
                                                              '1)
                                                         g$a$6284$15i0ov)))))))))))
                                    (string-ref
                                      g$cntl$6279$15i0ov
                                      (fx+ g$n$6283$15i0ov '1)))
                                   (begin
                                     (write-char
                                       g$c$6285$15i0ov
                                       g$p$6278$15i0ov)
                                     (g$loop$6282$15i0ov
                                       (fx+ g$n$6283$15i0ov '1)
                                       g$a$6284$15i0ov)))))
                              (string-ref g$cntl$6279$15i0ov g$n$6283$15i0ov))
                             (void))))))
               g$loop$6282$15i0ov)
             '0
             g$args$6280$15i0ov)))
         (fx- (string-length g$cntl$6279$15i0ov) '1)))))
   (g$printf$6275$15i0ov
     g$printf$6297$15i0ov
     (case-lambda
       ((g$control$6287$15i0ov . g$args$6288$15i0ov)
        (g$dofmt$6274$15i0ov
          (current-output-port)
          g$control$6287$15i0ov
          g$args$6288$15i0ov))))
   (g$fprintf$6276$15i0ov
     g$fprintf$6298$15i0ov
     (case-lambda
       ((g$p$6289$15i0ov g$control$6290$15i0ov . g$args$6291$15i0ov)
        (g$dofmt$6274$15i0ov
          g$p$6289$15i0ov
          g$control$6290$15i0ov
          g$args$6291$15i0ov))))
   (g$format$6277$15i0ov
     g$format$6299$15i0ov
     (case-lambda
       ((g$control$6292$15i0ov . g$args$6293$15i0ov)
        (call-with-values
          g$open-string-output-port$6096$15i0ov
          (case-lambda
            ((g$p$6294$15i0ov g$c$6295$15i0ov)
             (begin
               (g$dofmt$6274$15i0ov
                 g$p$6294$15i0ov
                 g$control$6292$15i0ov
                 g$args$6293$15i0ov)
               (g$c$6295$15i0ov)))))))))
  (void))

(library-letrec* (ironscheme trace)
  ((g$make-traced-macro$6300$15i0ov
     g$make-traced-macro$6303$15i0ov
     (case-lambda
       ((g$name$6301$15i0ov g$x$6302$15i0ov)
        (if (procedure? g$x$6302$15i0ov)
          (make-traced-procedure
            g$name$6301$15i0ov
            g$x$6302$15i0ov
            g$syntax->datum$10946$15i0ov)
          (if (g$variable-transformer?$10771$15i0ov g$x$6302$15i0ov)
            (g$make-variable-transformer$10770$15i0ov
              (make-traced-procedure
                g$name$6301$15i0ov
                (g$variable-transformer-procedure$10772$15i0ov g$x$6302$15i0ov)
                g$syntax->datum$10946$15i0ov))
            g$x$6302$15i0ov))))))
  (void))

(library-letrec* (psyntax compat)
  ((g$read-library-source-file$6304$15i0ov
     g$read-library-source-file$6383$15i0ov
     (case-lambda
       ((g$file-name$6375$15i0ov)
        (g$with-input-from-file$6130$15i0ov
          g$file-name$6375$15i0ov
          read-annotated))))
   (g$make-parameter$6305$15i0ov
     g$make-parameter$6384$15i0ov
     (case-lambda
       ((g$x$6376$15i0ov)
        (g$make-parameter$6305$15i0ov
          g$x$6376$15i0ov
          (case-lambda ((g$x$6377$15i0ov) g$x$6377$15i0ov))))
       ((g$x$6378$15i0ov g$fender$6379$15i0ov)
        (begin
          (if (not (procedure? g$fender$6379$15i0ov))
            (g$assertion-error$10939$15i0ov
              '(procedure? fender)
              '("psyntax\\compat.ss" . "(51,8) - (51,36)"))
            (void))
          ((case-lambda
             ((g$x$6380$15i0ov)
              (case-lambda
                (() g$x$6380$15i0ov)
                ((g$v$6381$15i0ov)
                 (set! g$x$6380$15i0ov
                   (g$fender$6379$15i0ov g$v$6381$15i0ov))))))
           (g$fender$6379$15i0ov g$x$6378$15i0ov))))))
   (g$file-options-constructor$6373$15i0ov
     g$file-options-constructor$6385$15i0ov
     (g$make-parameter$6305$15i0ov '#f))
   (g$file-options-spec$6374$15i0ov
     g$file-options-spec$6386$15i0ov
     (case-lambda
       ((g$x$6382$15i0ov)
        ((g$file-options-constructor$6373$15i0ov) g$x$6382$15i0ov)))))
  (void))

(library-letrec* (psyntax internal)
  ((g$current-primitive-locations$6583$15i0ov
     g$current-primitive-locations$6628$15i0ov
     (g$make-parameter$6384$15i0ov
       (case-lambda ((g$x$6589$15i0ov) '#f))
       (case-lambda
         ((g$p$6590$15i0ov)
          (begin
            (if (not (procedure? g$p$6590$15i0ov))
              (g$assertion-error$10939$15i0ov
                '(procedure? p)
                '("psyntax\\internal.ss" . "(29,9) - (29,32)"))
              (void))
            g$p$6590$15i0ov)))))
   (g$mutable?$6584$15i0ov
     g$mutable?$6629$15i0ov
     (case-lambda
       ((g$x$6591$15i0ov)
        (letrec* ((g$simple?$6592$15i0ov
                    (case-lambda
                      ((g$x$6593$15i0ov)
                       ((case-lambda
                          ((g$t$6594$15i0ov)
                           (if g$t$6594$15i0ov
                             g$t$6594$15i0ov
                             ((case-lambda
                                ((g$t$6595$15i0ov)
                                 (if g$t$6595$15i0ov
                                   g$t$6595$15i0ov
                                   ((case-lambda
                                      ((g$t$6596$15i0ov)
                                       (if g$t$6596$15i0ov
                                         g$t$6596$15i0ov
                                         ((case-lambda
                                            ((g$t$6597$15i0ov)
                                             (if g$t$6597$15i0ov
                                               g$t$6597$15i0ov
                                               ((case-lambda
                                                  ((g$t$6598$15i0ov)
                                                   (if g$t$6598$15i0ov
                                                     g$t$6598$15i0ov
                                                     ((case-lambda
                                                        ((g$t$6599$15i0ov)
                                                         (if g$t$6599$15i0ov
                                                           g$t$6599$15i0ov
                                                           (begin
                                                             '#f
                                                             (number?
                                                               g$x$6593$15i0ov)))))
                                                      (bytevector?
                                                        g$x$6593$15i0ov)))))
                                                (string? g$x$6593$15i0ov)))))
                                          (boolean? g$x$6593$15i0ov)))))
                                    (symbol? g$x$6593$15i0ov)))))
                              (char? g$x$6593$15i0ov)))))
                        (null? g$x$6593$15i0ov))))))
          (not (g$simple?$6592$15i0ov g$x$6591$15i0ov))))))
   (g$rewriter$6585$15i0ov
     g$rewriter$6630$15i0ov
     (case-lambda
       ((g$quote-hack?$6600$15i0ov)
        (letrec* ((g$f$6601$15i0ov
                    (case-lambda
                      ((g$x$6602$15i0ov)
                       (if (pair? g$x$6602$15i0ov)
                         ((case-lambda
                            ((g$t$6603$15i0ov)
                             (if (memv g$t$6603$15i0ov '(quote))
                               (if (if g$quote-hack?$6600$15i0ov
                                     (begin
                                       '#f
                                       (g$mutable?$6584$15i0ov
                                         (g$cadr$4890$15i0ov g$x$6602$15i0ov)))
                                     '#f)
                                 ((case-lambda
                                    ((g$g$6604$15i0ov)
                                     (begin
                                       (set-symbol-value!
                                         g$g$6604$15i0ov
                                         (g$cadr$4890$15i0ov g$x$6602$15i0ov))
                                       g$g$6604$15i0ov)))
                                  (gensym))
                                 g$x$6602$15i0ov)
                               (if (memv g$t$6603$15i0ov '(case-lambda))
                                 (cons
                                   'case-lambda
                                   (map (case-lambda
                                          ((g$x$6605$15i0ov)
                                           (cons
                                             (car g$x$6605$15i0ov)
                                             (map g$f$6601$15i0ov
                                                  (cdr g$x$6605$15i0ov)))))
                                        (cdr g$x$6602$15i0ov)))
                                 (if (memv g$t$6603$15i0ov '(lambda))
                                   (g$cons*$5361$15i0ov
                                     'lambda
                                     (g$cadr$4890$15i0ov g$x$6602$15i0ov)
                                     (map g$f$6601$15i0ov
                                          (g$cddr$4892$15i0ov g$x$6602$15i0ov)))
                                   (if (memv g$t$6603$15i0ov '(letrec))
                                     ((case-lambda
                                        ((g$bindings$6606$15i0ov
                                           g$body*$6607$15i0ov)
                                         ((case-lambda
                                            ((g$lhs*$6608$15i0ov
                                               g$rhs*$6609$15i0ov)
                                             (g$cons*$5361$15i0ov
                                               'letrec
                                               (map list
                                                    g$lhs*$6608$15i0ov
                                                    (map g$f$6601$15i0ov
                                                         g$rhs*$6609$15i0ov))
                                               (map g$f$6601$15i0ov
                                                    g$body*$6607$15i0ov))))
                                          (map car g$bindings$6606$15i0ov)
                                          (map g$cadr$4890$15i0ov
                                               g$bindings$6606$15i0ov))))
                                      (g$cadr$4890$15i0ov g$x$6602$15i0ov)
                                      (g$cddr$4892$15i0ov g$x$6602$15i0ov))
                                     (if (memv g$t$6603$15i0ov '(letrec*))
                                       ((case-lambda
                                          ((g$bindings$6610$15i0ov
                                             g$body*$6611$15i0ov)
                                           ((case-lambda
                                              ((g$lhs*$6612$15i0ov
                                                 g$rhs*$6613$15i0ov)
                                               (g$cons*$5361$15i0ov
                                                 'letrec*
                                                 (map list
                                                      g$lhs*$6612$15i0ov
                                                      (map g$f$6601$15i0ov
                                                           g$rhs*$6613$15i0ov))
                                                 (map g$f$6601$15i0ov
                                                      g$body*$6611$15i0ov))))
                                            (map car g$bindings$6610$15i0ov)
                                            (map g$cadr$4890$15i0ov
                                                 g$bindings$6610$15i0ov))))
                                        (g$cadr$4890$15i0ov g$x$6602$15i0ov)
                                        (g$cddr$4892$15i0ov g$x$6602$15i0ov))
                                       (if (memv
                                             g$t$6603$15i0ov
                                             '(library-letrec*))
                                         ((case-lambda
                                            ((g$name$6614$15i0ov
                                               g$x$6615$15i0ov)
                                             ((case-lambda
                                                ((g$bindings$6616$15i0ov
                                                   g$body*$6617$15i0ov)
                                                 ((case-lambda
                                                    ((g$lhs*$6618$15i0ov
                                                       g$lhs**$6619$15i0ov
                                                       g$rhs*$6620$15i0ov)
                                                     (g$cons*$5361$15i0ov
                                                       'library-letrec*
                                                       g$name$6614$15i0ov
                                                       (map list
                                                            g$lhs*$6618$15i0ov
                                                            g$lhs**$6619$15i0ov
                                                            (map g$f$6601$15i0ov
                                                                 g$rhs*$6620$15i0ov))
                                                       (map g$f$6601$15i0ov
                                                            g$body*$6617$15i0ov))))
                                                  (map car
                                                       g$bindings$6616$15i0ov)
                                                  (map g$cadr$4890$15i0ov
                                                       g$bindings$6616$15i0ov)
                                                  (map g$caddr$4896$15i0ov
                                                       g$bindings$6616$15i0ov))))
                                              (g$cadr$4890$15i0ov
                                                g$x$6615$15i0ov)
                                              (g$cddr$4892$15i0ov
                                                g$x$6615$15i0ov))))
                                          (g$cadr$4890$15i0ov g$x$6602$15i0ov)
                                          (cdr g$x$6602$15i0ov))
                                         (if (memv g$t$6603$15i0ov '(begin))
                                           (cons
                                             'begin
                                             (map g$f$6601$15i0ov
                                                  (cdr g$x$6602$15i0ov)))
                                           (if (memv g$t$6603$15i0ov '(set!))
                                             (list
                                               'set!
                                               (g$cadr$4890$15i0ov
                                                 g$x$6602$15i0ov)
                                               (g$f$6601$15i0ov
                                                 (g$caddr$4896$15i0ov
                                                   g$x$6602$15i0ov)))
                                             (if (memv
                                                   g$t$6603$15i0ov
                                                   '(primitive))
                                               ((case-lambda
                                                  ((g$op$6621$15i0ov)
                                                   ((case-lambda
                                                      ((g$t$6622$15i0ov)
                                                       (if g$t$6622$15i0ov
                                                         ((case-lambda
                                                            ((g$loc$6623$15i0ov)
                                                             g$loc$6623$15i0ov))
                                                          g$t$6622$15i0ov)
                                                         g$op$6621$15i0ov)))
                                                    ((g$current-primitive-locations$6583$15i0ov)
                                                     g$op$6621$15i0ov))))
                                                (g$cadr$4890$15i0ov
                                                  g$x$6602$15i0ov))
                                               (if (memv
                                                     g$t$6603$15i0ov
                                                     '(define))
                                                 g$x$6602$15i0ov
                                                 (if (list? g$x$6602$15i0ov)
                                                   (map g$f$6601$15i0ov
                                                        g$x$6602$15i0ov)
                                                   (error
                                                     'rewrite
                                                     '"invalid form ~s ~s"
                                                     g$x$6602$15i0ov
                                                     (list?
                                                       g$x$6602$15i0ov)))))))))))))))
                          (car g$x$6602$15i0ov))
                         g$x$6602$15i0ov)))))
          g$f$6601$15i0ov))))
   (g$expanded->core$6586$15i0ov
     g$expanded->core$6631$15i0ov
     (case-lambda
       ((g$x$6624$15i0ov) ((g$rewriter$6585$15i0ov '#t) g$x$6624$15i0ov))))
   (g$compile-core-expr$6587$15i0ov
     g$compile-core-expr$6632$15i0ov
     (case-lambda
       ((g$x$6625$15i0ov) ((g$rewriter$6585$15i0ov '#f) g$x$6625$15i0ov))))
   (g$compile-core-expr-to-port$6588$15i0ov
     g$compile-core-expr-to-port$6633$15i0ov
     (case-lambda
       ((g$x$6626$15i0ov g$p$6627$15i0ov)
        (g$pretty-print$6582$15i0ov
          ((g$rewriter$6585$15i0ov '#f) g$x$6626$15i0ov)
          g$p$6627$15i0ov)))))
  (void))

(library-letrec* (psyntax config) () (void))

(library-letrec* (psyntax library-manager)
  ((g$make-collection$6672$15i0ov
     g$make-collection$6876$15i0ov
     (case-lambda
       (()
        ((case-lambda
           ((g$set$6733$15i0ov)
            (letrec* ((g$set-cons$6734$15i0ov
                        (case-lambda
                          ((g$x$6736$15i0ov g$ls$6737$15i0ov)
                           (if (memq g$x$6736$15i0ov g$ls$6737$15i0ov)
                             g$ls$6737$15i0ov
                             (cons g$x$6736$15i0ov g$ls$6737$15i0ov))))))
              (case-lambda
                (() g$set$6733$15i0ov)
                ((g$x$6735$15i0ov)
                 (set! g$set$6733$15i0ov
                   (g$set-cons$6734$15i0ov
                     g$x$6735$15i0ov
                     g$set$6733$15i0ov)))))))
         '()))))
   (g$current-library-collection$6673$15i0ov
     g$current-library-collection$6877$15i0ov
     (g$make-parameter$6384$15i0ov
       (g$make-collection$6672$15i0ov)
       (case-lambda
         ((g$x$6738$15i0ov)
          (begin
            (if (not (procedure? g$x$6738$15i0ov))
              (assertion-violation
                'current-library-collection
                '"not a procedure"
                g$x$6738$15i0ov)
              (void))
            g$x$6738$15i0ov)))))
   (g$7655$6674$15i0ov
     g$7655$6878$15i0ov
     (make-record-type-descriptor
       'library
       '#f
       'g$7658$15i0ov
       '#t
       '#t
       '#((mutable id)
          (mutable name)
          (mutable version)
          (mutable imp*)
          (mutable vis*)
          (mutable inv*)
          (mutable subst)
          (mutable env)
          (mutable visit-state)
          (mutable invoke-state)
          (mutable visit-code)
          (mutable invoke-code)
          (mutable visible?)
          (mutable source-file-name))))
   (g$7657$6675$15i0ov g$7657$6879$15i0ov '#f)
   (g$7656$6676$15i0ov
     g$7656$6880$15i0ov
     (make-record-constructor-descriptor
       g$7655$6674$15i0ov
       '#f
       g$7657$6675$15i0ov))
   (g$library?$6677$15i0ov
     g$library?$6881$15i0ov
     (record-predicate g$7655$6674$15i0ov))
   (g$make-library$6678$15i0ov
     g$make-library$6882$15i0ov
     (record-constructor g$7656$6676$15i0ov))
   (g$library-id$6679$15i0ov
     g$library-id$6883$15i0ov
     (record-accessor g$7655$6674$15i0ov '0))
   (g$library-name$6680$15i0ov
     g$library-name$6884$15i0ov
     (record-accessor g$7655$6674$15i0ov '1))
   (g$library-version$6681$15i0ov
     g$library-version$6885$15i0ov
     (record-accessor g$7655$6674$15i0ov '2))
   (g$library-imp*$6682$15i0ov
     g$library-imp*$6886$15i0ov
     (record-accessor g$7655$6674$15i0ov '3))
   (g$library-vis*$6683$15i0ov
     g$library-vis*$6887$15i0ov
     (record-accessor g$7655$6674$15i0ov '4))
   (g$library-inv*$6684$15i0ov
     g$library-inv*$6888$15i0ov
     (record-accessor g$7655$6674$15i0ov '5))
   (g$library-subst$6685$15i0ov
     g$library-subst$6889$15i0ov
     (record-accessor g$7655$6674$15i0ov '6))
   (g$library-env$6686$15i0ov
     g$library-env$6890$15i0ov
     (record-accessor g$7655$6674$15i0ov '7))
   (g$library-visit-state$6687$15i0ov
     g$library-visit-state$6891$15i0ov
     (record-accessor g$7655$6674$15i0ov '8))
   (g$library-invoke-state$6688$15i0ov
     g$library-invoke-state$6892$15i0ov
     (record-accessor g$7655$6674$15i0ov '9))
   (g$library-visit-code$6689$15i0ov
     g$library-visit-code$6893$15i0ov
     (record-accessor g$7655$6674$15i0ov '10))
   (g$library-invoke-code$6690$15i0ov
     g$library-invoke-code$6894$15i0ov
     (record-accessor g$7655$6674$15i0ov '11))
   (g$library-visible?$6691$15i0ov
     g$library-visible?$6895$15i0ov
     (record-accessor g$7655$6674$15i0ov '12))
   (g$library-source-file-name$6692$15i0ov
     g$library-source-file-name$6896$15i0ov
     (record-accessor g$7655$6674$15i0ov '13))
   (g$set-library-id!$6693$15i0ov
     g$set-library-id!$6897$15i0ov
     (record-mutator g$7655$6674$15i0ov '0))
   (g$set-library-name!$6694$15i0ov
     g$set-library-name!$6898$15i0ov
     (record-mutator g$7655$6674$15i0ov '1))
   (g$set-library-version!$6695$15i0ov
     g$set-library-version!$6899$15i0ov
     (record-mutator g$7655$6674$15i0ov '2))
   (g$set-library-imp*!$6696$15i0ov
     g$set-library-imp*!$6900$15i0ov
     (record-mutator g$7655$6674$15i0ov '3))
   (g$set-library-vis*!$6697$15i0ov
     g$set-library-vis*!$6901$15i0ov
     (record-mutator g$7655$6674$15i0ov '4))
   (g$set-library-inv*!$6698$15i0ov
     g$set-library-inv*!$6902$15i0ov
     (record-mutator g$7655$6674$15i0ov '5))
   (g$set-library-subst!$6699$15i0ov
     g$set-library-subst!$6903$15i0ov
     (record-mutator g$7655$6674$15i0ov '6))
   (g$set-library-env!$6700$15i0ov
     g$set-library-env!$6904$15i0ov
     (record-mutator g$7655$6674$15i0ov '7))
   (g$set-library-visit-state!$6701$15i0ov
     g$set-library-visit-state!$6905$15i0ov
     (record-mutator g$7655$6674$15i0ov '8))
   (g$set-library-invoke-state!$6702$15i0ov
     g$set-library-invoke-state!$6906$15i0ov
     (record-mutator g$7655$6674$15i0ov '9))
   (g$set-library-visit-code!$6703$15i0ov
     g$set-library-visit-code!$6907$15i0ov
     (record-mutator g$7655$6674$15i0ov '10))
   (g$set-library-invoke-code!$6704$15i0ov
     g$set-library-invoke-code!$6908$15i0ov
     (record-mutator g$7655$6674$15i0ov '11))
   (g$set-library-visible?!$6705$15i0ov
     g$set-library-visible?!$6909$15i0ov
     (record-mutator g$7655$6674$15i0ov '12))
   (g$set-library-source-file-name!$6706$15i0ov
     g$set-library-source-file-name!$6910$15i0ov
     (record-mutator g$7655$6674$15i0ov '13))
   (g$rp$6707$15i0ov
     g$rp$6911$15i0ov
     (make-record-printer
       'library
       (case-lambda
         ((g$x$6739$15i0ov g$p$6740$15i0ov)
          (begin
            (if (not (g$library?$6677$15i0ov g$x$6739$15i0ov))
              (assertion-violation 'record-type-printer '"not a library")
              (void))
            (display
              (g$format$6299$15i0ov
                '"#<library ~s>"
                (if (null? (g$library-version$6681$15i0ov g$x$6739$15i0ov))
                  (g$library-name$6680$15i0ov g$x$6739$15i0ov)
                  (append
                    (g$library-name$6680$15i0ov g$x$6739$15i0ov)
                    (list (g$library-version$6681$15i0ov g$x$6739$15i0ov)))))
              g$p$6740$15i0ov))))))
   (g$find-dependencies$6708$15i0ov
     g$find-dependencies$6912$15i0ov
     (case-lambda
       ((g$ls$6741$15i0ov)
        (if (null? g$ls$6741$15i0ov)
          '()
          (assertion-violation 'find-dependencies '"cannot handle deps yet")))))
   (g$find-library-by$6709$15i0ov
     g$find-library-by$6913$15i0ov
     (case-lambda
       ((g$pred$6742$15i0ov)
        ((letrec ((g$f$6743$15i0ov
                    (case-lambda
                      ((g$ls$6744$15i0ov)
                       (if (null? g$ls$6744$15i0ov)
                         '#f
                         (if (g$pred$6742$15i0ov (car g$ls$6744$15i0ov))
                           (car g$ls$6744$15i0ov)
                           (g$f$6743$15i0ov (cdr g$ls$6744$15i0ov))))))))
           g$f$6743$15i0ov)
         ((g$current-library-collection$6673$15i0ov))))))
   (g$library-path$6710$15i0ov
     g$library-path$6914$15i0ov
     (g$make-parameter$6384$15i0ov
       '(".")
       (case-lambda
         ((g$x$6745$15i0ov)
          (if (if (list? g$x$6745$15i0ov)
                (begin '#f (g$for-all$5359$15i0ov string? g$x$6745$15i0ov))
                '#f)
            (map (case-lambda ((g$x$6746$15i0ov) g$x$6746$15i0ov))
                 g$x$6745$15i0ov)
            (assertion-violation
              'library-path
              '"not a list of strings"
              g$x$6745$15i0ov))))))
   (g$library-extensions$6711$15i0ov
     g$library-extensions$6915$15i0ov
     (g$make-parameter$6384$15i0ov
       '(".sls" ".ss" ".scm")
       (case-lambda
         ((g$x$6747$15i0ov)
          (if (if (list? g$x$6747$15i0ov)
                (begin '#f (g$for-all$5359$15i0ov string? g$x$6747$15i0ov))
                '#f)
            (map (case-lambda ((g$x$6748$15i0ov) g$x$6748$15i0ov))
                 g$x$6747$15i0ov)
            (assertion-violation
              'library-extensions
              '"not a list of strings"
              g$x$6747$15i0ov))))))
   (g$library-name->file-name$6712$15i0ov
     g$library-name->file-name$6916$15i0ov
     (case-lambda
       ((g$x$6749$15i0ov)
        (call-with-values
          (case-lambda (() (g$open-string-output-port$6096$15i0ov)))
          (case-lambda
            ((g$p$6752$15i0ov g$extract$6753$15i0ov)
             ((case-lambda
                ((g$extract$6754$15i0ov g$p$6755$15i0ov)
                 (letrec* ((g$display-hex$6756$15i0ov
                             (case-lambda
                               ((g$n$6764$15i0ov)
                                (if (<= '0 g$n$6764$15i0ov '9)
                                  (display g$n$6764$15i0ov g$p$6755$15i0ov)
                                  (display
                                    (integer->char
                                      (+ (char->integer '#\A)
                                         (- g$n$6764$15i0ov '10)))
                                    g$p$6755$15i0ov))))))
                   (begin
                     ((letrec ((g$f$6757$15i0ov
                                 (case-lambda
                                   ((g$ls$6758$15i0ov)
                                    (if (not (null? g$ls$6758$15i0ov))
                                      (begin
                                        (display '"/" g$p$6755$15i0ov)
                                        (for-each
                                          (case-lambda
                                            ((g$c$6759$15i0ov)
                                             (if ((case-lambda
                                                    ((g$t$6760$15i0ov)
                                                     (if g$t$6760$15i0ov
                                                       g$t$6760$15i0ov
                                                       ((case-lambda
                                                          ((g$t$6761$15i0ov)
                                                           (if g$t$6761$15i0ov
                                                             g$t$6761$15i0ov
                                                             ((case-lambda
                                                                ((g$t$6762$15i0ov)
                                                                 (if g$t$6762$15i0ov
                                                                   g$t$6762$15i0ov
                                                                   (begin
                                                                     '#f
                                                                     (memv
                                                                       g$c$6759$15i0ov
                                                                       '(#\-
                                                                         #\.
                                                                         #\_
                                                                         #\~))))))
                                                              (char<=?
                                                                '#\0
                                                                g$c$6759$15i0ov
                                                                '#\9)))))
                                                        (char<=?
                                                          '#\A
                                                          g$c$6759$15i0ov
                                                          '#\Z)))))
                                                  (char<=?
                                                    '#\a
                                                    g$c$6759$15i0ov
                                                    '#\z))
                                               (display
                                                 g$c$6759$15i0ov
                                                 g$p$6755$15i0ov)
                                               (begin
                                                 (display '"%" g$p$6755$15i0ov)
                                                 ((case-lambda
                                                    ((g$n$6763$15i0ov)
                                                     (begin
                                                       (g$display-hex$6756$15i0ov
                                                         (g$quotient$5723$15i0ov
                                                           g$n$6763$15i0ov
                                                           '16))
                                                       (g$display-hex$6756$15i0ov
                                                         (g$remainder$5724$15i0ov
                                                           g$n$6763$15i0ov
                                                           '16)))))
                                                  (char->integer
                                                    g$c$6759$15i0ov))))))
                                          (string->list
                                            (symbol->string
                                              (car g$ls$6758$15i0ov))))
                                        (g$f$6757$15i0ov
                                          (cdr g$ls$6758$15i0ov)))
                                      (void))))))
                        g$f$6757$15i0ov)
                      g$x$6749$15i0ov)
                     (g$extract$6754$15i0ov)))))
              g$extract$6753$15i0ov
              g$p$6752$15i0ov)))))))
   (g$file-locator$6713$15i0ov
     g$file-locator$6917$15i0ov
     (g$make-parameter$6384$15i0ov
       (case-lambda
         ((g$x$6765$15i0ov)
          ((case-lambda
             ((g$str$6766$15i0ov)
              ((letrec ((g$f$6767$15i0ov
                          (case-lambda
                            ((g$ls$6768$15i0ov
                               g$exts$6769$15i0ov
                               g$failed-list$6770$15i0ov)
                             (if (null? g$ls$6768$15i0ov)
                               ((case-lambda
                                  (()
                                   (letrec* ((g$7760$6771$15i0ov
                                               (make-record-type-descriptor
                                                 '&library-resolution
                                                 &condition-rtd
                                                 'g$7763$15i0ov
                                                 '#f
                                                 '#f
                                                 '#((immutable library)
                                                    (immutable files))))
                                             (g$7762$6772$15i0ov '#f)
                                             (g$7761$6773$15i0ov
                                               (make-record-constructor-descriptor
                                                 g$7760$6771$15i0ov
                                                 &condition-rcd
                                                 g$7762$6772$15i0ov))
                                             (g$7759$6774$15i0ov
                                               (record-predicate
                                                 g$7760$6771$15i0ov))
                                             (g$make-library-resolution-condition$6775$15i0ov
                                               (record-constructor
                                                 g$7761$6773$15i0ov))
                                             (g$7757$6776$15i0ov
                                               (record-accessor
                                                 g$7760$6771$15i0ov
                                                 '0))
                                             (g$7758$6777$15i0ov
                                               (record-accessor
                                                 g$7760$6771$15i0ov
                                                 '1))
                                             (g$library-resolution-condition?$6778$15i0ov
                                               (condition-predicate
                                                 g$7760$6771$15i0ov))
                                             (g$condition-library$6779$15i0ov
                                               (condition-accessor
                                                 g$7760$6771$15i0ov
                                                 g$7757$6776$15i0ov))
                                             (g$condition-files$6780$15i0ov
                                               (condition-accessor
                                                 g$7760$6771$15i0ov
                                                 g$7758$6777$15i0ov)))
                                     (raise
                                       (condition
                                         (g$make-error$5633$15i0ov)
                                         (g$make-who-condition$5659$15i0ov
                                           'expander)
                                         (g$make-message-condition$5613$15i0ov
                                           '"cannot locate library in library-path")
                                         (g$make-library-resolution-condition$6775$15i0ov
                                           g$x$6765$15i0ov
                                           (reverse
                                             g$failed-list$6770$15i0ov))))))))
                               (if (null? g$exts$6769$15i0ov)
                                 (g$f$6767$15i0ov
                                   (cdr g$ls$6768$15i0ov)
                                   (g$library-extensions$6711$15i0ov)
                                   g$failed-list$6770$15i0ov)
                                 ((case-lambda
                                    ((g$name$6781$15i0ov)
                                     (if (g$file-exists?$5230$15i0ov
                                           g$name$6781$15i0ov)
                                       g$name$6781$15i0ov
                                       (g$f$6767$15i0ov
                                         g$ls$6768$15i0ov
                                         (cdr g$exts$6769$15i0ov)
                                         (cons
                                           g$name$6781$15i0ov
                                           g$failed-list$6770$15i0ov)))))
                                  (string-append
                                    (car g$ls$6768$15i0ov)
                                    g$str$6766$15i0ov
                                    (car g$exts$6769$15i0ov)))))))))
                 g$f$6767$15i0ov)
               (g$library-path$6710$15i0ov)
               (g$library-extensions$6711$15i0ov)
               '())))
           (g$library-name->file-name$6712$15i0ov g$x$6765$15i0ov))))
       (case-lambda
         ((g$f$6782$15i0ov)
          (if (procedure? g$f$6782$15i0ov)
            g$f$6782$15i0ov
            (assertion-violation
              'file-locator
              '"not a procedure"
              g$f$6782$15i0ov))))))
   (g$serialize-all$6714$15i0ov
     g$serialize-all$6918$15i0ov
     (case-lambda
       ((g$serialize$6783$15i0ov g$compile$6784$15i0ov)
        (letrec* ((g$library-desc$6785$15i0ov
                    (case-lambda
                      ((g$x$6787$15i0ov)
                       (list
                         (g$library-id$6679$15i0ov g$x$6787$15i0ov)
                         (g$library-name$6680$15i0ov g$x$6787$15i0ov))))))
          (for-each
            (case-lambda
              ((g$x$6786$15i0ov)
               (if (g$library-source-file-name$6692$15i0ov g$x$6786$15i0ov)
                 (g$serialize$6783$15i0ov
                   (g$library-source-file-name$6692$15i0ov g$x$6786$15i0ov)
                   (list
                     (g$library-id$6679$15i0ov g$x$6786$15i0ov)
                     (g$library-name$6680$15i0ov g$x$6786$15i0ov)
                     (g$library-version$6681$15i0ov g$x$6786$15i0ov)
                     (map g$library-desc$6785$15i0ov
                          (g$library-imp*$6682$15i0ov g$x$6786$15i0ov))
                     (map g$library-desc$6785$15i0ov
                          (g$library-vis*$6683$15i0ov g$x$6786$15i0ov))
                     (map g$library-desc$6785$15i0ov
                          (g$library-inv*$6684$15i0ov g$x$6786$15i0ov))
                     (g$library-subst$6685$15i0ov g$x$6786$15i0ov)
                     (g$library-env$6686$15i0ov g$x$6786$15i0ov)
                     (g$compile$6784$15i0ov
                       (g$library-visit-code$6689$15i0ov g$x$6786$15i0ov))
                     (g$compile$6784$15i0ov
                       (g$library-invoke-code$6690$15i0ov g$x$6786$15i0ov))
                     (g$library-visible?$6691$15i0ov g$x$6786$15i0ov)))
                 (void))))
            ((g$current-library-collection$6673$15i0ov)))))))
   (g$current-precompiled-library-loader$6715$15i0ov
     g$current-precompiled-library-loader$6919$15i0ov
     (g$make-parameter$6384$15i0ov
       (case-lambda ((g$filename$6788$15i0ov g$sk$6789$15i0ov) '#f))))
   (g$try-load-from-file$6716$15i0ov
     g$try-load-from-file$6920$15i0ov
     (case-lambda
       ((g$filename$6790$15i0ov)
        ((g$current-precompiled-library-loader$6715$15i0ov)
         g$filename$6790$15i0ov
         (case-lambda
           ((g$id$6791$15i0ov
              g$name$6792$15i0ov
              g$ver$6793$15i0ov
              g$imp*$6794$15i0ov
              g$vis*$6795$15i0ov
              g$inv*$6796$15i0ov
              g$exp-subst$6797$15i0ov
              g$exp-env$6798$15i0ov
              g$visit-proc$6799$15i0ov
              g$invoke-proc$6800$15i0ov
              g$visible?$6801$15i0ov)
            ((letrec ((g$f$6802$15i0ov
                        (case-lambda
                          ((g$deps$6803$15i0ov)
                           (if (null? g$deps$6803$15i0ov)
                             (begin
                               (g$install-library$6726$15i0ov
                                 g$id$6791$15i0ov
                                 g$name$6792$15i0ov
                                 g$ver$6793$15i0ov
                                 g$imp*$6794$15i0ov
                                 g$vis*$6795$15i0ov
                                 g$inv*$6796$15i0ov
                                 g$exp-subst$6797$15i0ov
                                 g$exp-env$6798$15i0ov
                                 g$visit-proc$6799$15i0ov
                                 g$invoke-proc$6800$15i0ov
                                 '#f
                                 '#f
                                 g$visible?$6801$15i0ov
                                 '#f)
                               '#t)
                             ((case-lambda
                                ((g$d$6804$15i0ov)
                                 ((case-lambda
                                    ((g$label$6805$15i0ov g$dname$6806$15i0ov)
                                     ((case-lambda
                                        ((g$l$6807$15i0ov)
                                         (if (if (g$library?$6677$15i0ov
                                                   g$l$6807$15i0ov)
                                               (begin
                                                 '#f
                                                 (eq? g$label$6805$15i0ov
                                                      (g$library-id$6679$15i0ov
                                                        g$l$6807$15i0ov)))
                                               '#f)
                                           (g$f$6802$15i0ov
                                             (cdr g$deps$6803$15i0ov))
                                           (begin
                                             (g$fprintf$6298$15i0ov
                                               (current-error-port)
                                               '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source.
"
                                               g$name$6792$15i0ov
                                               g$dname$6806$15i0ov
                                               g$filename$6790$15i0ov)
                                             '#f))))
                                      (g$find-library-by-name$6721$15i0ov
                                        g$dname$6806$15i0ov))))
                                  (car g$d$6804$15i0ov)
                                  (g$cadr$4890$15i0ov g$d$6804$15i0ov))))
                              (car g$deps$6803$15i0ov)))))))
               g$f$6802$15i0ov)
             (append g$imp*$6794$15i0ov g$vis*$6795$15i0ov g$inv*$6796$15i0ov)))
           (g$others$6808$15i0ov '#f))))))
   (g$library-loader$6717$15i0ov
     g$library-loader$6921$15i0ov
     (g$make-parameter$6384$15i0ov
       (case-lambda
         ((g$x$6809$15i0ov)
          ((case-lambda
             ((g$file-name$6810$15i0ov)
              (if (not g$file-name$6810$15i0ov)
                (assertion-violation '#f '"cannot file library" g$x$6809$15i0ov)
                ((case-lambda
                   ((g$t$6811$15i0ov)
                    (if g$t$6811$15i0ov
                      g$t$6811$15i0ov
                      (begin
                        '#f
                        ((g$current-library-expander$6718$15i0ov)
                         (g$read-library-source-file$6383$15i0ov
                           g$file-name$6810$15i0ov)
                         g$file-name$6810$15i0ov
                         (case-lambda
                           ((g$name$6812$15i0ov)
                            (if (not (equal?
                                       g$name$6812$15i0ov
                                       g$x$6809$15i0ov))
                              (assertion-violation
                                'import
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$open-string-output-port$6096$15i0ov)))
                                  (case-lambda
                                    ((g$p$6815$15i0ov g$e$6816$15i0ov)
                                     ((case-lambda
                                        ((g$e$6817$15i0ov g$p$6818$15i0ov)
                                         (begin
                                           (display
                                             '"expected to find library "
                                             g$p$6818$15i0ov)
                                           (write
                                             g$x$6809$15i0ov
                                             g$p$6818$15i0ov)
                                           (display
                                             '" in file "
                                             g$p$6818$15i0ov)
                                           (display
                                             g$file-name$6810$15i0ov
                                             g$p$6818$15i0ov)
                                           (display '", found " g$p$6818$15i0ov)
                                           (write
                                             g$name$6812$15i0ov
                                             g$p$6818$15i0ov)
                                           (display '" instead" g$p$6818$15i0ov)
                                           (g$e$6817$15i0ov))))
                                      g$e$6816$15i0ov
                                      g$p$6815$15i0ov)))))
                              (void)))))))))
                 (g$try-load-from-file$6716$15i0ov g$file-name$6810$15i0ov)))))
           ((g$file-locator$6713$15i0ov) g$x$6809$15i0ov))))
       (case-lambda
         ((g$f$6819$15i0ov)
          (if (procedure? g$f$6819$15i0ov)
            g$f$6819$15i0ov
            (assertion-violation
              'library-locator
              '"not a procedure"
              g$f$6819$15i0ov))))))
   (g$current-library-expander$6718$15i0ov
     g$current-library-expander$6922$15i0ov
     (g$make-parameter$6384$15i0ov
       (case-lambda
         ((g$x$6820$15i0ov)
          (assertion-violation 'library-expander '"not initialized")))
       (case-lambda
         ((g$f$6821$15i0ov)
          (if (procedure? g$f$6821$15i0ov)
            g$f$6821$15i0ov
            (assertion-violation
              'library-expander
              '"not a procedure"
              g$f$6821$15i0ov))))))
   (g$external-pending-libraries$6719$15i0ov
     g$external-pending-libraries$6923$15i0ov
     (g$make-parameter$6384$15i0ov '()))
   (g$find-external-library$6720$15i0ov
     g$find-external-library$6924$15i0ov
     (case-lambda
       ((g$name$6822$15i0ov)
        (begin
          (if (g$member$5355$15i0ov
                g$name$6822$15i0ov
                (g$external-pending-libraries$6719$15i0ov))
            (assertion-violation
              '#f
              '"circular attempt to import library was detected"
              g$name$6822$15i0ov)
            (void))
          ((case-lambda
             ((g$external-pending-libraries$6825$15i0ov
                g$external-pending-libraries$6826$15i0ov)
              ((case-lambda
                 ((g$swap$6827$15i0ov)
                  (dynamic-wind
                    g$swap$6827$15i0ov
                    (case-lambda
                      (()
                       (begin
                         ((g$library-loader$6717$15i0ov) g$name$6822$15i0ov)
                         ((case-lambda
                            ((g$t$6828$15i0ov)
                             (if g$t$6828$15i0ov
                               g$t$6828$15i0ov
                               (begin
                                 '#f
                                 (assertion-violation
                                   '#f
                                   '"handling external library did not yield the correct library"
                                   g$name$6822$15i0ov)))))
                          (g$find-library-by$6709$15i0ov
                            (case-lambda
                              ((g$x$6829$15i0ov)
                               (equal?
                                 (g$library-name$6680$15i0ov g$x$6829$15i0ov)
                                 g$name$6822$15i0ov))))))))
                    g$swap$6827$15i0ov)))
               (case-lambda
                 (()
                  ((case-lambda
                     ((g$t$6830$15i0ov)
                      (begin
                        (g$external-pending-libraries$6825$15i0ov
                          g$external-pending-libraries$6826$15i0ov)
                        (set! g$external-pending-libraries$6826$15i0ov
                          g$t$6830$15i0ov))))
                   (g$external-pending-libraries$6825$15i0ov)))))))
           g$external-pending-libraries$6719$15i0ov
           (cons
             g$name$6822$15i0ov
             (g$external-pending-libraries$6719$15i0ov)))))))
   (g$find-library-by-name$6721$15i0ov
     g$find-library-by-name$6925$15i0ov
     (case-lambda
       ((g$name$6831$15i0ov)
        ((case-lambda
           ((g$t$6832$15i0ov)
            (if g$t$6832$15i0ov
              g$t$6832$15i0ov
              (begin
                '#f
                (g$find-external-library$6720$15i0ov g$name$6831$15i0ov)))))
         (g$find-library-by$6709$15i0ov
           (case-lambda
             ((g$x$6833$15i0ov)
              (equal?
                (g$library-name$6680$15i0ov g$x$6833$15i0ov)
                g$name$6831$15i0ov))))))))
   (g$library-exists?$6722$15i0ov
     g$library-exists?$6926$15i0ov
     (case-lambda
       ((g$name$6834$15i0ov)
        (if (g$find-library-by$6709$15i0ov
              (case-lambda
                ((g$x$6835$15i0ov)
                 (equal?
                   (g$library-name$6680$15i0ov g$x$6835$15i0ov)
                   g$name$6834$15i0ov))))
          (begin '#f '#t)
          '#f))))
   (g$find-library-by-spec/die$6723$15i0ov
     g$find-library-by-spec/die$6927$15i0ov
     (case-lambda
       ((g$spec$6836$15i0ov)
        ((case-lambda
           ((g$id$6837$15i0ov)
            ((case-lambda
               ((g$t$6838$15i0ov)
                (if g$t$6838$15i0ov
                  g$t$6838$15i0ov
                  (begin
                    '#f
                    (assertion-violation
                      '#f
                      '"cannot find library with required spec"
                      g$spec$6836$15i0ov)))))
             (g$find-library-by$6709$15i0ov
               (case-lambda
                 ((g$x$6839$15i0ov)
                  (eq? g$id$6837$15i0ov
                       (g$library-id$6679$15i0ov g$x$6839$15i0ov))))))))
         (car g$spec$6836$15i0ov)))))
   (g$label->binding-table$6724$15i0ov
     g$label->binding-table$6928$15i0ov
     (g$make-eq-hashtable$5152$15i0ov))
   (g$install-library-record$6725$15i0ov
     g$install-library-record$6929$15i0ov
     (case-lambda
       ((g$lib$6840$15i0ov)
        (begin
          ((case-lambda
             ((g$exp-env$6841$15i0ov)
              (for-each
                (case-lambda
                  ((g$x$6842$15i0ov)
                   ((case-lambda
                      ((g$label$6843$15i0ov g$binding$6844$15i0ov)
                       ((case-lambda
                          ((g$binding$6845$15i0ov)
                           (g$hashtable-set!$5156$15i0ov
                             g$label->binding-table$6724$15i0ov
                             g$label$6843$15i0ov
                             g$binding$6845$15i0ov)))
                        ((case-lambda
                           ((g$t$6846$15i0ov)
                            (if (memv g$t$6846$15i0ov '(global))
                              (cons
                                'global
                                (cons
                                  g$lib$6840$15i0ov
                                  (cdr g$binding$6844$15i0ov)))
                              (if (memv g$t$6846$15i0ov '(global-macro))
                                (cons
                                  'global-macro
                                  (cons
                                    g$lib$6840$15i0ov
                                    (cdr g$binding$6844$15i0ov)))
                                (if (memv g$t$6846$15i0ov '(global-macro!))
                                  (cons
                                    'global-macro!
                                    (cons
                                      g$lib$6840$15i0ov
                                      (cdr g$binding$6844$15i0ov)))
                                  g$binding$6844$15i0ov)))))
                         (car g$binding$6844$15i0ov)))))
                    (car g$x$6842$15i0ov)
                    (cdr g$x$6842$15i0ov))))
                g$exp-env$6841$15i0ov)))
           (g$library-env$6686$15i0ov g$lib$6840$15i0ov))
          ((g$current-library-collection$6673$15i0ov) g$lib$6840$15i0ov)))))
   (g$install-library$6726$15i0ov
     g$install-library$6930$15i0ov
     (case-lambda
       ((g$id$6847$15i0ov
          g$name$6848$15i0ov
          g$ver$6849$15i0ov
          g$imp*$6850$15i0ov
          g$vis*$6851$15i0ov
          g$inv*$6852$15i0ov
          g$exp-subst$6853$15i0ov
          g$exp-env$6854$15i0ov
          g$visit-proc$6855$15i0ov
          g$invoke-proc$6856$15i0ov
          g$visit-code$6857$15i0ov
          g$invoke-code$6858$15i0ov
          g$visible?$6859$15i0ov
          g$source-file-name$6860$15i0ov)
        ((case-lambda
           ((g$imp-lib*$6861$15i0ov
              g$vis-lib*$6862$15i0ov
              g$inv-lib*$6863$15i0ov)
            (begin
              (if (not (if (symbol? g$id$6847$15i0ov)
                         (if (list? g$name$6848$15i0ov)
                           (begin '#f (list? g$ver$6849$15i0ov))
                           '#f)
                         '#f))
                (assertion-violation
                  'install-library
                  '"invalid spec with id/name/ver"
                  g$id$6847$15i0ov
                  g$name$6848$15i0ov
                  g$ver$6849$15i0ov)
                (void))
              (if (g$library-exists?$6722$15i0ov g$name$6848$15i0ov)
                (assertion-violation
                  'install-library
                  '"library is already installed"
                  g$name$6848$15i0ov)
                (void))
              ((case-lambda
                 ((g$lib$6864$15i0ov)
                  (g$install-library-record$6725$15i0ov g$lib$6864$15i0ov)))
               (g$make-library$6678$15i0ov
                 g$id$6847$15i0ov
                 g$name$6848$15i0ov
                 g$ver$6849$15i0ov
                 g$imp-lib*$6861$15i0ov
                 g$vis-lib*$6862$15i0ov
                 g$inv-lib*$6863$15i0ov
                 g$exp-subst$6853$15i0ov
                 g$exp-env$6854$15i0ov
                 g$visit-proc$6855$15i0ov
                 g$invoke-proc$6856$15i0ov
                 g$visit-code$6857$15i0ov
                 g$invoke-code$6858$15i0ov
                 g$visible?$6859$15i0ov
                 g$source-file-name$6860$15i0ov)))))
         (map g$find-library-by-spec/die$6723$15i0ov g$imp*$6850$15i0ov)
         (map g$find-library-by-spec/die$6723$15i0ov g$vis*$6851$15i0ov)
         (map g$find-library-by-spec/die$6723$15i0ov g$inv*$6852$15i0ov)))))
   (g$imported-label->binding$6727$15i0ov
     g$imported-label->binding$6931$15i0ov
     (case-lambda
       ((g$lab$6865$15i0ov)
        (g$hashtable-ref$5155$15i0ov
          g$label->binding-table$6724$15i0ov
          g$lab$6865$15i0ov
          '#f))))
   (g$invoke-library$6728$15i0ov
     g$invoke-library$6932$15i0ov
     (case-lambda
       ((g$lib$6866$15i0ov)
        ((case-lambda
           ((g$invoke$6867$15i0ov)
            (if (procedure? g$invoke$6867$15i0ov)
              (begin
                (g$set-library-invoke-state!$6702$15i0ov
                  g$lib$6866$15i0ov
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"circularity detected"
                       g$lib$6866$15i0ov))))
                (for-each
                  g$invoke-library$6728$15i0ov
                  (g$library-inv*$6684$15i0ov g$lib$6866$15i0ov))
                (g$set-library-invoke-state!$6702$15i0ov
                  g$lib$6866$15i0ov
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first invoke did not return"
                       g$lib$6866$15i0ov))))
                (g$invoke$6867$15i0ov)
                (g$set-library-invoke-state!$6702$15i0ov g$lib$6866$15i0ov '#t))
              (void))))
         (g$library-invoke-state$6688$15i0ov g$lib$6866$15i0ov)))))
   (g$visit-library$6729$15i0ov
     g$visit-library$6933$15i0ov
     (case-lambda
       ((g$lib$6868$15i0ov)
        ((case-lambda
           ((g$visit$6869$15i0ov)
            (if (procedure? g$visit$6869$15i0ov)
              (begin
                (g$set-library-visit-state!$6701$15i0ov
                  g$lib$6868$15i0ov
                  (case-lambda
                    (()
                     (assertion-violation
                       'visit
                       '"circularity detected"
                       g$lib$6868$15i0ov))))
                (for-each
                  g$invoke-library$6728$15i0ov
                  (g$library-vis*$6683$15i0ov g$lib$6868$15i0ov))
                (g$set-library-visit-state!$6701$15i0ov
                  g$lib$6868$15i0ov
                  (case-lambda
                    (()
                     (assertion-violation
                       'invoke
                       '"first visit did not return"
                       g$lib$6868$15i0ov))))
                (g$visit$6869$15i0ov)
                (g$set-library-visit-state!$6701$15i0ov g$lib$6868$15i0ov '#t))
              (void))))
         (g$library-visit-state$6687$15i0ov g$lib$6868$15i0ov)))))
   (g$invoke-library-by-spec$6730$15i0ov
     g$invoke-library-by-spec$6934$15i0ov
     (case-lambda
       ((g$spec$6870$15i0ov)
        (g$invoke-library$6728$15i0ov
          (g$find-library-by-spec/die$6723$15i0ov g$spec$6870$15i0ov)))))
   (g$installed-libraries$6731$15i0ov
     g$installed-libraries$6935$15i0ov
     (case-lambda
       ((g$all?$6871$15i0ov)
        ((letrec ((g$f$6872$15i0ov
                    (case-lambda
                      ((g$ls$6873$15i0ov)
                       (if (null? g$ls$6873$15i0ov)
                         '()
                         (if ((case-lambda
                                ((g$t$6874$15i0ov)
                                 (if g$t$6874$15i0ov
                                   g$t$6874$15i0ov
                                   (begin
                                     '#f
                                     (g$library-visible?$6691$15i0ov
                                       (car g$ls$6873$15i0ov))))))
                              g$all?$6871$15i0ov)
                           (cons
                             (car g$ls$6873$15i0ov)
                             (g$f$6872$15i0ov (cdr g$ls$6873$15i0ov)))
                           (g$f$6872$15i0ov (cdr g$ls$6873$15i0ov))))))))
           g$f$6872$15i0ov)
         ((g$current-library-collection$6673$15i0ov))))
       (() (g$installed-libraries$6731$15i0ov '#f))))
   (g$library-spec$6732$15i0ov
     g$library-spec$6936$15i0ov
     (case-lambda
       ((g$x$6875$15i0ov)
        (begin
          (if (not (g$library?$6677$15i0ov g$x$6875$15i0ov))
            (assertion-violation 'library-spec '"not a library" g$x$6875$15i0ov)
            (void))
          (list
            (g$library-id$6679$15i0ov g$x$6875$15i0ov)
            (g$library-name$6680$15i0ov g$x$6875$15i0ov)
            (g$library-version$6681$15i0ov g$x$6875$15i0ov)))))))
  (void))

(library-letrec* (psyntax builders)
  ((g$build-global-define$6937$15i0ov
     g$build-global-define$7047$15i0ov
     (case-lambda ((g$x$7018$15i0ov) (g$build-void$7014$15i0ov))))
   (g$build-lambda$6986$15i0ov
     g$build-lambda$7048$15i0ov
     (case-lambda
       ((g$ae$7019$15i0ov g$vars$7020$15i0ov g$exp$7021$15i0ov)
        (list 'case-lambda (list g$vars$7020$15i0ov g$exp$7021$15i0ov)))))
   (g$build-case-lambda$6987$15i0ov
     g$build-case-lambda$7049$15i0ov
     (case-lambda
       ((g$ae$7022$15i0ov g$vars*$7023$15i0ov g$exp*$7024$15i0ov)
        (cons 'case-lambda (map list g$vars*$7023$15i0ov g$exp*$7024$15i0ov)))))
   (g$build-let$6988$15i0ov
     g$build-let$7050$15i0ov
     (case-lambda
       ((g$ae$7025$15i0ov
          g$lhs*$7026$15i0ov
          g$rhs*$7027$15i0ov
          g$body$7028$15i0ov)
        (cons
          (g$build-lambda$6986$15i0ov
            g$ae$7025$15i0ov
            g$lhs*$7026$15i0ov
            g$body$7028$15i0ov)
          g$rhs*$7027$15i0ov))))
   (g$build-sequence$7013$15i0ov
     g$build-sequence$7051$15i0ov
     (case-lambda
       ((g$ae$7029$15i0ov g$exps$7030$15i0ov)
        ((letrec ((g$loop$7031$15i0ov
                    (case-lambda
                      ((g$exps$7032$15i0ov)
                       (if (null? (cdr g$exps$7032$15i0ov))
                         (car g$exps$7032$15i0ov)
                         (if (equal?
                               (car g$exps$7032$15i0ov)
                               (g$build-void$7014$15i0ov))
                           (g$loop$7031$15i0ov (cdr g$exps$7032$15i0ov))
                           (cons 'begin g$exps$7032$15i0ov)))))))
           g$loop$7031$15i0ov)
         g$exps$7030$15i0ov))))
   (g$build-void$7014$15i0ov
     g$build-void$7052$15i0ov
     (case-lambda (() '((primitive void)))))
   (g$build-letrec$7015$15i0ov
     g$build-letrec$7053$15i0ov
     (case-lambda
       ((g$ae$7033$15i0ov
          g$vars$7034$15i0ov
          g$val-exps$7035$15i0ov
          g$body-exp$7036$15i0ov)
        (if (null? g$vars$7034$15i0ov)
          g$body-exp$7036$15i0ov
          (list
            'letrec
            (map list g$vars$7034$15i0ov g$val-exps$7035$15i0ov)
            g$body-exp$7036$15i0ov)))))
   (g$build-letrec*$7016$15i0ov
     g$build-letrec*$7054$15i0ov
     (case-lambda
       ((g$ae$7037$15i0ov
          g$vars$7038$15i0ov
          g$val-exps$7039$15i0ov
          g$body-exp$7040$15i0ov)
        (if (null? g$vars$7038$15i0ov)
          g$body-exp$7040$15i0ov
          (list
            'letrec*
            (map list g$vars$7038$15i0ov g$val-exps$7039$15i0ov)
            g$body-exp$7040$15i0ov)))))
   (g$build-library-letrec*$7017$15i0ov
     g$build-library-letrec*$7055$15i0ov
     (case-lambda
       ((g$ae$7041$15i0ov
          g$name$7042$15i0ov
          g$vars$7043$15i0ov
          g$locs$7044$15i0ov
          g$val-exps$7045$15i0ov
          g$body-exp$7046$15i0ov)
        (list
          'library-letrec*
          g$name$7042$15i0ov
          (map list
               g$vars$7043$15i0ov
               g$locs$7044$15i0ov
               g$val-exps$7045$15i0ov)
          g$body-exp$7046$15i0ov)))))
  (void))

(library-letrec* (psyntax expander)
  ((g$set-cons$7056$15i0ov
     g$set-cons$10688$15i0ov
     (case-lambda
       ((g$x$7512$15i0ov g$ls$7513$15i0ov)
        (if (memq g$x$7512$15i0ov g$ls$7513$15i0ov)
          g$ls$7513$15i0ov
          (cons g$x$7512$15i0ov g$ls$7513$15i0ov)))))
   (g$set-union$7057$15i0ov
     g$set-union$10689$15i0ov
     (case-lambda
       ((g$ls1$7514$15i0ov g$ls2$7515$15i0ov)
        (if (null? g$ls1$7514$15i0ov)
          g$ls2$7515$15i0ov
          (if (memq (car g$ls1$7514$15i0ov) g$ls2$7515$15i0ov)
            (g$set-union$7057$15i0ov (cdr g$ls1$7514$15i0ov) g$ls2$7515$15i0ov)
            (cons
              (car g$ls1$7514$15i0ov)
              (g$set-union$7057$15i0ov
                (cdr g$ls1$7514$15i0ov)
                g$ls2$7515$15i0ov)))))))
   (g$top-mark*$7059$15i0ov g$top-mark*$10690$15i0ov '(top))
   (g$top-marked?$7060$15i0ov
     g$top-marked?$10691$15i0ov
     (case-lambda ((g$m*$7516$15i0ov) (memq 'top g$m*$7516$15i0ov))))
   (g$gen-lexical$7061$15i0ov
     g$gen-lexical$10692$15i0ov
     (case-lambda
       ((g$sym$7517$15i0ov)
        (if (symbol? g$sym$7517$15i0ov)
          (gensym g$sym$7517$15i0ov)
          (if (g$stx?$7089$15i0ov g$sym$7517$15i0ov)
            (g$gen-lexical$7061$15i0ov
              (g$id->sym$7118$15i0ov g$sym$7517$15i0ov))
            (assertion-violation
              'gen-lexical
              '"BUG: invalid arg"
              g$sym$7517$15i0ov))))))
   (g$gen-global$7062$15i0ov
     g$gen-global$10693$15i0ov
     (case-lambda
       ((g$x$7518$15i0ov) (g$gen-lexical$7061$15i0ov g$x$7518$15i0ov))))
   (g$gen-label$7063$15i0ov
     g$gen-label$10694$15i0ov
     (case-lambda ((g$_$7519$15i0ov) (gensym))))
   (g$gen-top-level-label$7064$15i0ov
     g$gen-top-level-label$10695$15i0ov
     (case-lambda
       ((g$id$7520$15i0ov g$rib$7521$15i0ov)
        (letrec* ((g$find$7522$15i0ov
                    (case-lambda
                      ((g$sym$7528$15i0ov
                         g$mark*$7529$15i0ov
                         g$sym*$7530$15i0ov
                         g$mark**$7531$15i0ov
                         g$label*$7532$15i0ov)
                       (if (pair? g$sym*$7530$15i0ov)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7528$15i0ov
                                        (car g$sym*$7530$15i0ov))
                                 (begin
                                   '#f
                                   (g$same-marks?$7119$15i0ov
                                     g$mark*$7529$15i0ov
                                     (car g$mark**$7531$15i0ov)))
                                 '#f)
                             (car g$label*$7532$15i0ov)
                             (g$find$7522$15i0ov
                               g$sym$7528$15i0ov
                               g$mark*$7529$15i0ov
                               (cdr g$sym*$7530$15i0ov)
                               (cdr g$mark**$7531$15i0ov)
                               (cdr g$label*$7532$15i0ov))))
                         '#f)))))
          ((case-lambda
             ((g$sym$7523$15i0ov g$mark*$7524$15i0ov)
              ((case-lambda
                 ((g$sym*$7525$15i0ov)
                  ((case-lambda
                     ((g$t$7526$15i0ov)
                      (if g$t$7526$15i0ov
                        ((case-lambda
                           ((g$label$7527$15i0ov)
                            (if (g$imported-label->binding$6931$15i0ov
                                  g$label$7527$15i0ov)
                              (gensym)
                              g$label$7527$15i0ov)))
                         g$t$7526$15i0ov)
                        (gensym))))
                   (if (memq
                         g$sym$7523$15i0ov
                         (g$rib-sym*$7072$15i0ov g$rib$7521$15i0ov))
                     (begin
                       '#f
                       (g$find$7522$15i0ov
                         g$sym$7523$15i0ov
                         g$mark*$7524$15i0ov
                         g$sym*$7525$15i0ov
                         (g$rib-mark**$7073$15i0ov g$rib$7521$15i0ov)
                         (g$rib-label*$7074$15i0ov g$rib$7521$15i0ov)))
                     '#f))))
               (g$rib-sym*$7072$15i0ov g$rib$7521$15i0ov))))
           (g$id->sym$7118$15i0ov g$id$7520$15i0ov)
           (g$stx-mark*$7092$15i0ov g$id$7520$15i0ov))))))
   (g$gen-define-label+loc$7065$15i0ov
     g$gen-define-label+loc$10696$15i0ov
     (case-lambda
       ((g$id$7533$15i0ov g$rib$7534$15i0ov)
        ((case-lambda
           ((g$t$7535$15i0ov)
            (if g$t$7535$15i0ov
              ((case-lambda
                 ((g$env$7536$15i0ov)
                  ((case-lambda
                     ((g$label$7537$15i0ov g$locs$7538$15i0ov)
                      (values
                        g$label$7537$15i0ov
                        ((case-lambda
                           ((g$t$7539$15i0ov)
                            (if g$t$7539$15i0ov
                              (cdr g$t$7539$15i0ov)
                              ((case-lambda
                                 ((g$loc$7540$15i0ov)
                                  (begin
                                    (g$set-interaction-env-locs!$7478$15i0ov
                                      g$env$7536$15i0ov
                                      (cons
                                        (cons
                                          g$label$7537$15i0ov
                                          g$loc$7540$15i0ov)
                                        g$locs$7538$15i0ov))
                                    g$loc$7540$15i0ov)))
                               (g$gen-lexical$7061$15i0ov g$id$7533$15i0ov)))))
                         (assq g$label$7537$15i0ov g$locs$7538$15i0ov)))))
                   (g$gen-top-level-label$7064$15i0ov
                     g$id$7533$15i0ov
                     g$rib$7534$15i0ov)
                   (g$interaction-env-locs$7475$15i0ov g$env$7536$15i0ov))))
               g$t$7535$15i0ov)
              (values (gensym) (g$gen-lexical$7061$15i0ov g$id$7533$15i0ov)))))
         (g$top-level-context$7511$15i0ov)))))
   (g$gen-define-label$7066$15i0ov
     g$gen-define-label$10697$15i0ov
     (case-lambda
       ((g$id$7541$15i0ov g$rib$7542$15i0ov)
        (if (g$top-level-context$7511$15i0ov)
          (g$gen-top-level-label$7064$15i0ov g$id$7541$15i0ov g$rib$7542$15i0ov)
          (gensym)))))
   (g$8058$7067$15i0ov
     g$8058$10698$15i0ov
     (make-record-type-descriptor
       'rib
       '#f
       'g$8061$15i0ov
       '#t
       '#t
       '#((mutable sym*)
          (mutable mark**)
          (mutable label*)
          (mutable sealed/freq))))
   (g$8060$7068$15i0ov g$8060$10699$15i0ov '#f)
   (g$8059$7069$15i0ov
     g$8059$10700$15i0ov
     (make-record-constructor-descriptor
       g$8058$7067$15i0ov
       '#f
       g$8060$7068$15i0ov))
   (g$rib?$7070$15i0ov
     g$rib?$10701$15i0ov
     (record-predicate g$8058$7067$15i0ov))
   (g$make-rib$7071$15i0ov
     g$make-rib$10702$15i0ov
     (record-constructor g$8059$7069$15i0ov))
   (g$rib-sym*$7072$15i0ov
     g$rib-sym*$10703$15i0ov
     (record-accessor g$8058$7067$15i0ov '0))
   (g$rib-mark**$7073$15i0ov
     g$rib-mark**$10704$15i0ov
     (record-accessor g$8058$7067$15i0ov '1))
   (g$rib-label*$7074$15i0ov
     g$rib-label*$10705$15i0ov
     (record-accessor g$8058$7067$15i0ov '2))
   (g$rib-sealed/freq$7075$15i0ov
     g$rib-sealed/freq$10706$15i0ov
     (record-accessor g$8058$7067$15i0ov '3))
   (g$set-rib-sym*!$7076$15i0ov
     g$set-rib-sym*!$10707$15i0ov
     (record-mutator g$8058$7067$15i0ov '0))
   (g$set-rib-mark**!$7077$15i0ov
     g$set-rib-mark**!$10708$15i0ov
     (record-mutator g$8058$7067$15i0ov '1))
   (g$set-rib-label*!$7078$15i0ov
     g$set-rib-label*!$10709$15i0ov
     (record-mutator g$8058$7067$15i0ov '2))
   (g$set-rib-sealed/freq!$7079$15i0ov
     g$set-rib-sealed/freq!$10710$15i0ov
     (record-mutator g$8058$7067$15i0ov '3))
   (g$make-empty-rib$7080$15i0ov
     g$make-empty-rib$10711$15i0ov
     (case-lambda (() (g$make-rib$7071$15i0ov '() '() '() '#f))))
   (g$extend-rib!$7081$15i0ov
     g$extend-rib!$10712$15i0ov
     (case-lambda
       ((g$rib$7543$15i0ov g$id$7544$15i0ov g$label$7545$15i0ov)
        (letrec* ((g$find$7546$15i0ov
                    (case-lambda
                      ((g$sym$7552$15i0ov
                         g$mark*$7553$15i0ov
                         g$sym*$7554$15i0ov
                         g$mark**$7555$15i0ov
                         g$label*$7556$15i0ov)
                       (if (pair? g$sym*$7554$15i0ov)
                         (begin
                           '#f
                           (if (if (eq? g$sym$7552$15i0ov
                                        (car g$sym*$7554$15i0ov))
                                 (begin
                                   '#f
                                   (g$same-marks?$7119$15i0ov
                                     g$mark*$7553$15i0ov
                                     (car g$mark**$7555$15i0ov)))
                                 '#f)
                             g$label*$7556$15i0ov
                             (g$find$7546$15i0ov
                               g$sym$7552$15i0ov
                               g$mark*$7553$15i0ov
                               (cdr g$sym*$7554$15i0ov)
                               (cdr g$mark**$7555$15i0ov)
                               (cdr g$label*$7556$15i0ov))))
                         '#f)))))
          (begin
            (if (g$rib-sealed/freq$7075$15i0ov g$rib$7543$15i0ov)
              (assertion-violation
                'extend-rib!
                '"BUG: rib is sealed"
                g$rib$7543$15i0ov)
              (void))
            ((case-lambda
               ((g$sym$7547$15i0ov g$mark*$7548$15i0ov)
                ((case-lambda
                   ((g$sym*$7549$15i0ov)
                    ((case-lambda
                       ((g$t$7550$15i0ov)
                        (if g$t$7550$15i0ov
                          ((case-lambda
                             ((g$p$7551$15i0ov)
                              (if (not (eq? g$label$7545$15i0ov
                                            (car g$p$7551$15i0ov)))
                                (if (g$top-level-context$7511$15i0ov)
                                  (set-car! g$p$7551$15i0ov g$label$7545$15i0ov)
                                  (g$syntax-violation$7504$15i0ov
                                    '#f
                                    '"cannot redefine"
                                    g$id$7544$15i0ov))
                                (void))))
                           g$t$7550$15i0ov)
                          (begin
                            (g$set-rib-sym*!$7076$15i0ov
                              g$rib$7543$15i0ov
                              (cons g$sym$7547$15i0ov g$sym*$7549$15i0ov))
                            (g$set-rib-mark**!$7077$15i0ov
                              g$rib$7543$15i0ov
                              (cons
                                g$mark*$7548$15i0ov
                                (g$rib-mark**$7073$15i0ov g$rib$7543$15i0ov)))
                            (g$set-rib-label*!$7078$15i0ov
                              g$rib$7543$15i0ov
                              (cons
                                g$label$7545$15i0ov
                                (g$rib-label*$7074$15i0ov
                                  g$rib$7543$15i0ov)))))))
                     (if (memq
                           g$sym$7547$15i0ov
                           (g$rib-sym*$7072$15i0ov g$rib$7543$15i0ov))
                       (begin
                         '#f
                         (g$find$7546$15i0ov
                           g$sym$7547$15i0ov
                           g$mark*$7548$15i0ov
                           g$sym*$7549$15i0ov
                           (g$rib-mark**$7073$15i0ov g$rib$7543$15i0ov)
                           (g$rib-label*$7074$15i0ov g$rib$7543$15i0ov)))
                       '#f))))
                 (g$rib-sym*$7072$15i0ov g$rib$7543$15i0ov))))
             (g$id->sym$7118$15i0ov g$id$7544$15i0ov)
             (g$stx-mark*$7092$15i0ov g$id$7544$15i0ov)))))))
   (g$make-rib-map$7082$15i0ov
     g$make-rib-map$10713$15i0ov
     (case-lambda
       ((g$sym*$7557$15i0ov)
        ((case-lambda
           ((g$ht$7558$15i0ov)
            ((letrec ((g$f$7559$15i0ov
                        (case-lambda
                          ((g$i$7560$15i0ov g$sym*$7561$15i0ov)
                           (if (null? g$sym*$7561$15i0ov)
                             g$ht$7558$15i0ov
                             (begin
                               (g$hashtable-update!$5159$15i0ov
                                 g$ht$7558$15i0ov
                                 (car g$sym*$7561$15i0ov)
                                 (case-lambda
                                   ((g$x$7562$15i0ov)
                                    (cons g$i$7560$15i0ov g$x$7562$15i0ov)))
                                 '())
                               (g$f$7559$15i0ov
                                 (+ g$i$7560$15i0ov '1)
                                 (cdr g$sym*$7561$15i0ov))))))))
               g$f$7559$15i0ov)
             '0
             g$sym*$7557$15i0ov)))
         (g$make-eq-hashtable$5152$15i0ov)))))
   (g$seal-rib!$7083$15i0ov
     g$seal-rib!$10714$15i0ov
     (case-lambda
       ((g$rib$7563$15i0ov)
        ((case-lambda
           ((g$sym*$7564$15i0ov)
            (if (not (null? g$sym*$7564$15i0ov))
              (begin
                (g$set-rib-sym*!$7076$15i0ov
                  g$rib$7563$15i0ov
                  (list->vector g$sym*$7564$15i0ov))
                (g$set-rib-mark**!$7077$15i0ov
                  g$rib$7563$15i0ov
                  (list->vector (g$rib-mark**$7073$15i0ov g$rib$7563$15i0ov)))
                (g$set-rib-label*!$7078$15i0ov
                  g$rib$7563$15i0ov
                  (list->vector (g$rib-label*$7074$15i0ov g$rib$7563$15i0ov)))
                (g$set-rib-sealed/freq!$7079$15i0ov
                  g$rib$7563$15i0ov
                  (g$make-rib-map$7082$15i0ov g$sym*$7564$15i0ov)))
              (void))))
         (g$rib-sym*$7072$15i0ov g$rib$7563$15i0ov)))))
   (g$unseal-rib!$7084$15i0ov
     g$unseal-rib!$10715$15i0ov
     (case-lambda
       ((g$rib$7565$15i0ov)
        (if (g$rib-sealed/freq$7075$15i0ov g$rib$7565$15i0ov)
          (begin
            (g$set-rib-sealed/freq!$7079$15i0ov g$rib$7565$15i0ov '#f)
            (g$set-rib-sym*!$7076$15i0ov
              g$rib$7565$15i0ov
              (vector->list (g$rib-sym*$7072$15i0ov g$rib$7565$15i0ov)))
            (g$set-rib-mark**!$7077$15i0ov
              g$rib$7565$15i0ov
              (vector->list (g$rib-mark**$7073$15i0ov g$rib$7565$15i0ov)))
            (g$set-rib-label*!$7078$15i0ov
              g$rib$7565$15i0ov
              (vector->list (g$rib-label*$7074$15i0ov g$rib$7565$15i0ov))))
          (void)))))
   (g$make-full-rib$7085$15i0ov
     g$make-full-rib$10716$15i0ov
     (case-lambda
       ((g$id*$7566$15i0ov g$label*$7567$15i0ov)
        ((case-lambda
           ((g$r$7568$15i0ov)
            (begin (g$seal-rib!$7083$15i0ov g$r$7568$15i0ov) g$r$7568$15i0ov)))
         (g$make-rib$7071$15i0ov
           (map g$id->sym$7118$15i0ov g$id*$7566$15i0ov)
           (map g$stx-mark*$7092$15i0ov g$id*$7566$15i0ov)
           g$label*$7567$15i0ov
           '#f)))))
   (g$8084$7086$15i0ov
     g$8084$10717$15i0ov
     (make-record-type-descriptor
       'stx
       '#f
       'g$8087$15i0ov
       '#t
       '#t
       '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*))))
   (g$8086$7087$15i0ov g$8086$10718$15i0ov '#f)
   (g$8085$7088$15i0ov
     g$8085$10719$15i0ov
     (make-record-constructor-descriptor
       g$8084$7086$15i0ov
       '#f
       g$8086$7087$15i0ov))
   (g$stx?$7089$15i0ov
     g$stx?$10720$15i0ov
     (record-predicate g$8084$7086$15i0ov))
   (g$make-stx$7090$15i0ov
     g$make-stx$10721$15i0ov
     (record-constructor g$8085$7088$15i0ov))
   (g$stx-expr$7091$15i0ov
     g$stx-expr$10722$15i0ov
     (record-accessor g$8084$7086$15i0ov '0))
   (g$stx-mark*$7092$15i0ov
     g$stx-mark*$10723$15i0ov
     (record-accessor g$8084$7086$15i0ov '1))
   (g$stx-subst*$7093$15i0ov
     g$stx-subst*$10724$15i0ov
     (record-accessor g$8084$7086$15i0ov '2))
   (g$stx-ae*$7094$15i0ov
     g$stx-ae*$10725$15i0ov
     (record-accessor g$8084$7086$15i0ov '3))
   (g$set-stx-expr!$7095$15i0ov
     g$set-stx-expr!$10726$15i0ov
     (record-mutator g$8084$7086$15i0ov '0))
   (g$set-stx-mark*!$7096$15i0ov
     g$set-stx-mark*!$10727$15i0ov
     (record-mutator g$8084$7086$15i0ov '1))
   (g$set-stx-subst*!$7097$15i0ov
     g$set-stx-subst*!$10728$15i0ov
     (record-mutator g$8084$7086$15i0ov '2))
   (g$set-stx-ae*!$7098$15i0ov
     g$set-stx-ae*!$10729$15i0ov
     (record-mutator g$8084$7086$15i0ov '3))
   (g$rp$7099$15i0ov
     g$rp$10730$15i0ov
     (make-record-printer
       'stx
       (case-lambda
         ((g$x$7569$15i0ov g$p$7570$15i0ov)
          (begin
            (display '"#<syntax " g$p$7570$15i0ov)
            (write (g$stx->datum$7128$15i0ov g$x$7569$15i0ov) g$p$7570$15i0ov)
            ((case-lambda
               ((g$expr$7571$15i0ov)
                (if (annotation? g$expr$7571$15i0ov)
                  ((case-lambda
                     ((g$src$7572$15i0ov)
                      (if (pair? g$src$7572$15i0ov)
                        (begin
                          (display '" [" g$p$7570$15i0ov)
                          (display (cdr g$src$7572$15i0ov) g$p$7570$15i0ov)
                          (display '" of " g$p$7570$15i0ov)
                          (display (car g$src$7572$15i0ov) g$p$7570$15i0ov)
                          (display '"]" g$p$7570$15i0ov))
                        (void))))
                   (annotation-source g$expr$7571$15i0ov))
                  (void))))
             (g$stx-expr$7091$15i0ov g$x$7569$15i0ov))
            (display '">" g$p$7570$15i0ov))))))
   (g$datum->stx$7100$15i0ov
     g$datum->stx$10731$15i0ov
     (case-lambda
       ((g$id$7573$15i0ov g$datum$7574$15i0ov)
        (g$make-stx$7090$15i0ov
          g$datum$7574$15i0ov
          (g$stx-mark*$7092$15i0ov g$id$7573$15i0ov)
          (g$stx-subst*$7093$15i0ov g$id$7573$15i0ov)
          (g$stx-ae*$7094$15i0ov g$id$7573$15i0ov)))))
   (g$gen-mark$7101$15i0ov
     g$gen-mark$10732$15i0ov
     (case-lambda (() (string '#\m))))
   (g$anti-mark$7102$15i0ov g$anti-mark$10733$15i0ov '#f)
   (g$anti-mark?$7103$15i0ov g$anti-mark?$10734$15i0ov not)
   (g$join-wraps$7104$15i0ov
     g$join-wraps$10735$15i0ov
     (case-lambda
       ((g$m1*$7575$15i0ov
          g$s1*$7576$15i0ov
          g$ae1*$7577$15i0ov
          g$e$7578$15i0ov)
        (letrec* ((g$cancel$7579$15i0ov
                    (case-lambda
                      ((g$ls1$7583$15i0ov g$ls2$7584$15i0ov)
                       ((letrec ((g$f$7585$15i0ov
                                   (case-lambda
                                     ((g$x$7586$15i0ov g$ls1$7587$15i0ov)
                                      (if (null? g$ls1$7587$15i0ov)
                                        (cdr g$ls2$7584$15i0ov)
                                        (cons
                                          g$x$7586$15i0ov
                                          (g$f$7585$15i0ov
                                            (car g$ls1$7587$15i0ov)
                                            (cdr g$ls1$7587$15i0ov))))))))
                          g$f$7585$15i0ov)
                        (car g$ls1$7583$15i0ov)
                        (cdr g$ls1$7583$15i0ov))))))
          ((case-lambda
             ((g$m2*$7580$15i0ov g$s2*$7581$15i0ov g$ae2*$7582$15i0ov)
              (if (if (not (null? g$m1*$7575$15i0ov))
                    (if (not (null? g$m2*$7580$15i0ov))
                      (begin
                        '#f
                        (g$anti-mark?$7103$15i0ov (car g$m2*$7580$15i0ov)))
                      '#f)
                    '#f)
                (values
                  (g$cancel$7579$15i0ov g$m1*$7575$15i0ov g$m2*$7580$15i0ov)
                  (g$cancel$7579$15i0ov g$s1*$7576$15i0ov g$s2*$7581$15i0ov)
                  (g$cancel$7579$15i0ov g$ae1*$7577$15i0ov g$ae2*$7582$15i0ov))
                (values
                  (append g$m1*$7575$15i0ov g$m2*$7580$15i0ov)
                  (append g$s1*$7576$15i0ov g$s2*$7581$15i0ov)
                  (append g$ae1*$7577$15i0ov g$ae2*$7582$15i0ov)))))
           (g$stx-mark*$7092$15i0ov g$e$7578$15i0ov)
           (g$stx-subst*$7093$15i0ov g$e$7578$15i0ov)
           (g$stx-ae*$7094$15i0ov g$e$7578$15i0ov))))))
   (g$mkstx$7105$15i0ov
     g$mkstx$10736$15i0ov
     (case-lambda
       ((g$e$7588$15i0ov g$m*$7589$15i0ov g$s*$7590$15i0ov g$ae*$7591$15i0ov)
        (if (g$stx?$7089$15i0ov g$e$7588$15i0ov)
          (call-with-values
            (case-lambda
              (()
               (g$join-wraps$7104$15i0ov
                 g$m*$7589$15i0ov
                 g$s*$7590$15i0ov
                 g$ae*$7591$15i0ov
                 g$e$7588$15i0ov)))
            (case-lambda
              ((g$m*$7595$15i0ov g$s*$7596$15i0ov g$ae*$7597$15i0ov)
               ((case-lambda
                  ((g$ae*$7598$15i0ov g$s*$7599$15i0ov g$m*$7600$15i0ov)
                   (g$make-stx$7090$15i0ov
                     (g$stx-expr$7091$15i0ov g$e$7588$15i0ov)
                     g$m*$7600$15i0ov
                     g$s*$7599$15i0ov
                     g$ae*$7598$15i0ov)))
                g$ae*$7597$15i0ov
                g$s*$7596$15i0ov
                g$m*$7595$15i0ov))))
          (g$make-stx$7090$15i0ov
            g$e$7588$15i0ov
            g$m*$7589$15i0ov
            g$s*$7590$15i0ov
            g$ae*$7591$15i0ov)))))
   (g$add-mark$7106$15i0ov
     g$add-mark$10737$15i0ov
     (case-lambda
       ((g$m$7601$15i0ov g$e$7602$15i0ov g$ae$7603$15i0ov)
        (g$mkstx$7105$15i0ov
          g$e$7602$15i0ov
          (list g$m$7601$15i0ov)
          '(shift)
          (list g$ae$7603$15i0ov)))))
   (g$add-subst$7107$15i0ov
     g$add-subst$10738$15i0ov
     (case-lambda
       ((g$subst$7604$15i0ov g$e$7605$15i0ov)
        (g$mkstx$7105$15i0ov
          g$e$7605$15i0ov
          '()
          (list g$subst$7604$15i0ov)
          '()))))
   (g$syntax-kind?$7108$15i0ov
     g$syntax-kind?$10739$15i0ov
     (case-lambda
       ((g$x$7606$15i0ov g$p?$7607$15i0ov)
        (if (g$stx?$7089$15i0ov g$x$7606$15i0ov)
          (g$syntax-kind?$7108$15i0ov
            (g$stx-expr$7091$15i0ov g$x$7606$15i0ov)
            g$p?$7607$15i0ov)
          (if (annotation? g$x$7606$15i0ov)
            (g$syntax-kind?$7108$15i0ov
              (annotation-expression g$x$7606$15i0ov)
              g$p?$7607$15i0ov)
            (g$p?$7607$15i0ov g$x$7606$15i0ov))))))
   (g$syntax-vector->list$7109$15i0ov
     g$syntax-vector->list$10740$15i0ov
     (case-lambda
       ((g$x$7608$15i0ov)
        (if (g$stx?$7089$15i0ov g$x$7608$15i0ov)
          ((case-lambda
             ((g$ls$7609$15i0ov
                g$m*$7610$15i0ov
                g$s*$7611$15i0ov
                g$ae*$7612$15i0ov)
              (map (case-lambda
                     ((g$x$7613$15i0ov)
                      (g$mkstx$7105$15i0ov
                        g$x$7613$15i0ov
                        g$m*$7610$15i0ov
                        g$s*$7611$15i0ov
                        g$ae*$7612$15i0ov)))
                   g$ls$7609$15i0ov)))
           (g$syntax-vector->list$7109$15i0ov
             (g$stx-expr$7091$15i0ov g$x$7608$15i0ov))
           (g$stx-mark*$7092$15i0ov g$x$7608$15i0ov)
           (g$stx-subst*$7093$15i0ov g$x$7608$15i0ov)
           (g$stx-ae*$7094$15i0ov g$x$7608$15i0ov))
          (if (annotation? g$x$7608$15i0ov)
            (g$syntax-vector->list$7109$15i0ov
              (annotation-expression g$x$7608$15i0ov))
            (if (vector? g$x$7608$15i0ov)
              (vector->list g$x$7608$15i0ov)
              (assertion-violation
                'syntax-vector->list
                '"BUG: not a syntax vector"
                g$x$7608$15i0ov)))))))
   (g$syntax-pair?$7110$15i0ov
     g$syntax-pair?$10741$15i0ov
     (case-lambda
       ((g$x$7614$15i0ov) (g$syntax-kind?$7108$15i0ov g$x$7614$15i0ov pair?))))
   (g$syntax-vector?$7111$15i0ov
     g$syntax-vector?$10742$15i0ov
     (case-lambda
       ((g$x$7615$15i0ov)
        (g$syntax-kind?$7108$15i0ov g$x$7615$15i0ov vector?))))
   (g$syntax-null?$7112$15i0ov
     g$syntax-null?$10743$15i0ov
     (case-lambda
       ((g$x$7616$15i0ov) (g$syntax-kind?$7108$15i0ov g$x$7616$15i0ov null?))))
   (g$syntax-list?$7113$15i0ov
     g$syntax-list?$10744$15i0ov
     (case-lambda
       ((g$x$7617$15i0ov)
        ((case-lambda
           ((g$t$7618$15i0ov)
            (if g$t$7618$15i0ov
              g$t$7618$15i0ov
              (begin
                '#f
                (if (g$syntax-pair?$7110$15i0ov g$x$7617$15i0ov)
                  (begin
                    '#f
                    (g$syntax-list?$7113$15i0ov
                      (g$syntax-cdr$7115$15i0ov g$x$7617$15i0ov)))
                  '#f)))))
         (g$syntax-null?$7112$15i0ov g$x$7617$15i0ov)))))
   (g$syntax-car$7114$15i0ov
     g$syntax-car$10745$15i0ov
     (case-lambda
       ((g$x$7619$15i0ov)
        (if (g$stx?$7089$15i0ov g$x$7619$15i0ov)
          (g$mkstx$7105$15i0ov
            (g$syntax-car$7114$15i0ov (g$stx-expr$7091$15i0ov g$x$7619$15i0ov))
            (g$stx-mark*$7092$15i0ov g$x$7619$15i0ov)
            (g$stx-subst*$7093$15i0ov g$x$7619$15i0ov)
            (g$stx-ae*$7094$15i0ov g$x$7619$15i0ov))
          (if (annotation? g$x$7619$15i0ov)
            (g$syntax-car$7114$15i0ov (annotation-expression g$x$7619$15i0ov))
            (if (pair? g$x$7619$15i0ov)
              (car g$x$7619$15i0ov)
              (assertion-violation
                'syntax-car
                '"BUG: not a pair"
                g$x$7619$15i0ov)))))))
   (g$syntax-cdr$7115$15i0ov
     g$syntax-cdr$10746$15i0ov
     (case-lambda
       ((g$x$7620$15i0ov)
        (if (g$stx?$7089$15i0ov g$x$7620$15i0ov)
          (g$mkstx$7105$15i0ov
            (g$syntax-cdr$7115$15i0ov (g$stx-expr$7091$15i0ov g$x$7620$15i0ov))
            (g$stx-mark*$7092$15i0ov g$x$7620$15i0ov)
            (g$stx-subst*$7093$15i0ov g$x$7620$15i0ov)
            (g$stx-ae*$7094$15i0ov g$x$7620$15i0ov))
          (if (annotation? g$x$7620$15i0ov)
            (g$syntax-cdr$7115$15i0ov (annotation-expression g$x$7620$15i0ov))
            (if (pair? g$x$7620$15i0ov)
              (cdr g$x$7620$15i0ov)
              (assertion-violation
                'syntax-cdr
                '"BUG: not a pair"
                g$x$7620$15i0ov)))))))
   (g$syntax->list$7116$15i0ov
     g$syntax->list$10747$15i0ov
     (case-lambda
       ((g$x$7621$15i0ov)
        (if (g$syntax-pair?$7110$15i0ov g$x$7621$15i0ov)
          (cons
            (g$syntax-car$7114$15i0ov g$x$7621$15i0ov)
            (g$syntax->list$7116$15i0ov
              (g$syntax-cdr$7115$15i0ov g$x$7621$15i0ov)))
          (if (g$syntax-null?$7112$15i0ov g$x$7621$15i0ov)
            '()
            (assertion-violation
              'syntax->list
              '"BUG: invalid argument"
              g$x$7621$15i0ov))))))
   (g$id?$7117$15i0ov
     g$id?$10748$15i0ov
     (case-lambda
       ((g$x$7622$15i0ov)
        (if (g$stx?$7089$15i0ov g$x$7622$15i0ov)
          (begin
            '#f
            ((case-lambda
               ((g$expr$7623$15i0ov)
                (symbol?
                  (if (annotation? g$expr$7623$15i0ov)
                    (annotation-stripped g$expr$7623$15i0ov)
                    g$expr$7623$15i0ov))))
             (g$stx-expr$7091$15i0ov g$x$7622$15i0ov)))
          '#f))))
   (g$id->sym$7118$15i0ov
     g$id->sym$10749$15i0ov
     (case-lambda
       ((g$x$7624$15i0ov)
        (begin
          (if (not (g$stx?$7089$15i0ov g$x$7624$15i0ov))
            (error 'id->sym '"BUG in ikarus: not an id" g$x$7624$15i0ov)
            (void))
          ((case-lambda
             ((g$expr$7625$15i0ov)
              ((case-lambda
                 ((g$sym$7626$15i0ov)
                  (if (symbol? g$sym$7626$15i0ov)
                    g$sym$7626$15i0ov
                    (error
                      'id->sym
                      '"BUG in ikarus: not an id"
                      g$x$7624$15i0ov))))
               (if (annotation? g$expr$7625$15i0ov)
                 (annotation-stripped g$expr$7625$15i0ov)
                 g$expr$7625$15i0ov))))
           (g$stx-expr$7091$15i0ov g$x$7624$15i0ov))))))
   (g$same-marks?$7119$15i0ov
     g$same-marks?$10750$15i0ov
     (case-lambda
       ((g$x$7627$15i0ov g$y$7628$15i0ov)
        ((case-lambda
           ((g$t$7629$15i0ov)
            (if g$t$7629$15i0ov
              g$t$7629$15i0ov
              (begin
                '#f
                (if (pair? g$x$7627$15i0ov)
                  (if (pair? g$y$7628$15i0ov)
                    (if (eq? (car g$x$7627$15i0ov) (car g$y$7628$15i0ov))
                      (begin
                        '#f
                        (g$same-marks?$7119$15i0ov
                          (cdr g$x$7627$15i0ov)
                          (cdr g$y$7628$15i0ov)))
                      '#f)
                    '#f)
                  '#f)))))
         (if (null? g$x$7627$15i0ov)
           (begin '#f (null? g$y$7628$15i0ov))
           '#f)))))
   (g$bound-id=?$7120$15i0ov
     g$bound-id=?$10751$15i0ov
     (case-lambda
       ((g$x$7630$15i0ov g$y$7631$15i0ov)
        (if (eq? (g$id->sym$7118$15i0ov g$x$7630$15i0ov)
                 (g$id->sym$7118$15i0ov g$y$7631$15i0ov))
          (begin
            '#f
            (g$same-marks?$7119$15i0ov
              (g$stx-mark*$7092$15i0ov g$x$7630$15i0ov)
              (g$stx-mark*$7092$15i0ov g$y$7631$15i0ov)))
          '#f))))
   (g$free-id=?$7121$15i0ov
     g$free-id=?$10752$15i0ov
     (case-lambda
       ((g$i$7632$15i0ov g$j$7633$15i0ov)
        ((case-lambda
           ((g$t0$7634$15i0ov g$t1$7635$15i0ov)
            (if ((case-lambda
                   ((g$t$7636$15i0ov)
                    (if g$t$7636$15i0ov
                      g$t$7636$15i0ov
                      (begin '#f g$t1$7635$15i0ov))))
                 g$t0$7634$15i0ov)
              (eq? g$t0$7634$15i0ov g$t1$7635$15i0ov)
              (eq? (g$id->sym$7118$15i0ov g$i$7632$15i0ov)
                   (g$id->sym$7118$15i0ov g$j$7633$15i0ov)))))
         (g$id->real-label$7131$15i0ov g$i$7632$15i0ov)
         (g$id->real-label$7131$15i0ov g$j$7633$15i0ov)))))
   (g$valid-bound-ids?$7122$15i0ov
     g$valid-bound-ids?$10753$15i0ov
     (case-lambda
       ((g$id*$7637$15i0ov)
        (if (g$for-all$5359$15i0ov g$id?$7117$15i0ov g$id*$7637$15i0ov)
          (begin '#f (g$distinct-bound-ids?$7123$15i0ov g$id*$7637$15i0ov))
          '#f))))
   (g$distinct-bound-ids?$7123$15i0ov
     g$distinct-bound-ids?$10754$15i0ov
     (case-lambda
       ((g$id*$7638$15i0ov)
        ((case-lambda
           ((g$t$7639$15i0ov)
            (if g$t$7639$15i0ov
              g$t$7639$15i0ov
              (begin
                '#f
                (if (not (g$bound-id-member?$7124$15i0ov
                           (car g$id*$7638$15i0ov)
                           (cdr g$id*$7638$15i0ov)))
                  (begin
                    '#f
                    (g$distinct-bound-ids?$7123$15i0ov (cdr g$id*$7638$15i0ov)))
                  '#f)))))
         (null? g$id*$7638$15i0ov)))))
   (g$bound-id-member?$7124$15i0ov
     g$bound-id-member?$10755$15i0ov
     (case-lambda
       ((g$id$7640$15i0ov g$id*$7641$15i0ov)
        (if (pair? g$id*$7641$15i0ov)
          (begin
            '#f
            ((case-lambda
               ((g$t$7642$15i0ov)
                (if g$t$7642$15i0ov
                  g$t$7642$15i0ov
                  (begin
                    '#f
                    (g$bound-id-member?$7124$15i0ov
                      g$id$7640$15i0ov
                      (cdr g$id*$7641$15i0ov))))))
             (g$bound-id=?$7120$15i0ov
               g$id$7640$15i0ov
               (car g$id*$7641$15i0ov))))
          '#f))))
   (g$self-evaluating?$7125$15i0ov
     g$self-evaluating?$10756$15i0ov
     (case-lambda
       ((g$x$7643$15i0ov)
        ((case-lambda
           ((g$t$7644$15i0ov)
            (if g$t$7644$15i0ov
              g$t$7644$15i0ov
              ((case-lambda
                 ((g$t$7645$15i0ov)
                  (if g$t$7645$15i0ov
                    g$t$7645$15i0ov
                    ((case-lambda
                       ((g$t$7646$15i0ov)
                        (if g$t$7646$15i0ov
                          g$t$7646$15i0ov
                          ((case-lambda
                             ((g$t$7647$15i0ov)
                              (if g$t$7647$15i0ov
                                g$t$7647$15i0ov
                                (begin '#f (bytevector? g$x$7643$15i0ov)))))
                           (boolean? g$x$7643$15i0ov)))))
                     (char? g$x$7643$15i0ov)))))
               (string? g$x$7643$15i0ov)))))
         (number? g$x$7643$15i0ov)))))
   (g$strip-annotations$7126$15i0ov
     g$strip-annotations$10757$15i0ov
     (case-lambda
       ((g$x$7648$15i0ov)
        (if (pair? g$x$7648$15i0ov)
          (cons
            (g$strip-annotations$7126$15i0ov (car g$x$7648$15i0ov))
            (g$strip-annotations$7126$15i0ov (cdr g$x$7648$15i0ov)))
          (if (vector? g$x$7648$15i0ov)
            (vector-map g$strip-annotations$7126$15i0ov g$x$7648$15i0ov)
            (if (annotation? g$x$7648$15i0ov)
              (annotation-stripped g$x$7648$15i0ov)
              g$x$7648$15i0ov))))))
   (g$strip$7127$15i0ov
     g$strip$10758$15i0ov
     (case-lambda
       ((g$x$7649$15i0ov g$m*$7650$15i0ov)
        (if (g$top-marked?$7060$15i0ov g$m*$7650$15i0ov)
          (if ((case-lambda
                 ((g$t$7651$15i0ov)
                  (if g$t$7651$15i0ov
                    g$t$7651$15i0ov
                    ((case-lambda
                       ((g$t$7652$15i0ov)
                        (if g$t$7652$15i0ov
                          g$t$7652$15i0ov
                          (begin
                            '#f
                            (if (vector? g$x$7649$15i0ov)
                              (if (> (vector-length g$x$7649$15i0ov) '0)
                                (begin
                                  '#f
                                  (annotation? (vector-ref g$x$7649$15i0ov '0)))
                                '#f)
                              '#f)))))
                     (if (pair? g$x$7649$15i0ov)
                       (begin '#f (annotation? (car g$x$7649$15i0ov)))
                       '#f)))))
               (annotation? g$x$7649$15i0ov))
            (g$strip-annotations$7126$15i0ov g$x$7649$15i0ov)
            g$x$7649$15i0ov)
          ((letrec ((g$f$7653$15i0ov
                      (case-lambda
                        ((g$x$7654$15i0ov)
                         (if (g$stx?$7089$15i0ov g$x$7654$15i0ov)
                           (g$strip$7127$15i0ov
                             (g$stx-expr$7091$15i0ov g$x$7654$15i0ov)
                             (g$stx-mark*$7092$15i0ov g$x$7654$15i0ov))
                           (if (annotation? g$x$7654$15i0ov)
                             (annotation-stripped g$x$7654$15i0ov)
                             (if (pair? g$x$7654$15i0ov)
                               ((case-lambda
                                  ((g$a$7655$15i0ov g$d$7656$15i0ov)
                                   (if (if (eq? g$a$7655$15i0ov
                                                (car g$x$7654$15i0ov))
                                         (begin
                                           '#f
                                           (eq? g$d$7656$15i0ov
                                                (cdr g$x$7654$15i0ov)))
                                         '#f)
                                     g$x$7654$15i0ov
                                     (cons g$a$7655$15i0ov g$d$7656$15i0ov))))
                                (g$f$7653$15i0ov (car g$x$7654$15i0ov))
                                (g$f$7653$15i0ov (cdr g$x$7654$15i0ov)))
                               (if (vector? g$x$7654$15i0ov)
                                 ((case-lambda
                                    ((g$old$7657$15i0ov)
                                     ((case-lambda
                                        ((g$new$7658$15i0ov)
                                         (if (g$for-all$5359$15i0ov
                                               eq?
                                               g$old$7657$15i0ov
                                               g$new$7658$15i0ov)
                                           g$x$7654$15i0ov
                                           (list->vector g$new$7658$15i0ov))))
                                      (map g$f$7653$15i0ov g$old$7657$15i0ov))))
                                  (vector->list g$x$7654$15i0ov))
                                 g$x$7654$15i0ov))))))))
             g$f$7653$15i0ov)
           g$x$7649$15i0ov)))))
   (g$stx->datum$7128$15i0ov
     g$stx->datum$10759$15i0ov
     (case-lambda
       ((g$x$7659$15i0ov) (g$strip$7127$15i0ov g$x$7659$15i0ov '()))))
   (g$same-marks*?$7129$15i0ov
     g$same-marks*?$10760$15i0ov
     (case-lambda
       ((g$mark*$7660$15i0ov g$mark**$7661$15i0ov g$si$7662$15i0ov)
        (if (null? g$si$7662$15i0ov)
          '#f
          (if (g$same-marks?$7119$15i0ov
                g$mark*$7660$15i0ov
                (vector-ref g$mark**$7661$15i0ov (car g$si$7662$15i0ov)))
            (car g$si$7662$15i0ov)
            (g$same-marks*?$7129$15i0ov
              g$mark*$7660$15i0ov
              g$mark**$7661$15i0ov
              (cdr g$si$7662$15i0ov)))))))
   (g$id->label$7130$15i0ov
     g$id->label$10761$15i0ov
     (case-lambda
       ((g$id$7663$15i0ov)
        ((case-lambda
           ((g$t$7664$15i0ov)
            (if g$t$7664$15i0ov
              g$t$7664$15i0ov
              (begin
                '#f
                ((case-lambda
                   ((g$t$7665$15i0ov)
                    (if g$t$7665$15i0ov
                      ((case-lambda
                         ((g$env$7666$15i0ov)
                          ((case-lambda
                             ((g$rib$7667$15i0ov)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$gen-define-label+loc$7065$15i0ov
                                     g$id$7663$15i0ov
                                     g$rib$7667$15i0ov)))
                                (case-lambda
                                  ((g$lab$7670$15i0ov g$loc_$7671$15i0ov)
                                   ((case-lambda
                                      ((g$loc_$7672$15i0ov g$lab$7673$15i0ov)
                                       (begin
                                         (g$extend-rib!$7081$15i0ov
                                           g$rib$7667$15i0ov
                                           g$id$7663$15i0ov
                                           g$lab$7673$15i0ov)
                                         g$lab$7673$15i0ov)))
                                    g$loc_$7671$15i0ov
                                    g$lab$7670$15i0ov))))))
                           (g$interaction-env-rib$7473$15i0ov
                             g$env$7666$15i0ov))))
                       g$t$7665$15i0ov)
                      '#f)))
                 (g$top-level-context$7511$15i0ov))))))
         (g$id->real-label$7131$15i0ov g$id$7663$15i0ov)))))
   (g$id->real-label$7131$15i0ov
     g$id->real-label$10762$15i0ov
     (case-lambda
       ((g$id$7674$15i0ov)
        ((case-lambda
           ((g$sym$7675$15i0ov)
            ((letrec ((g$search$7676$15i0ov
                        (case-lambda
                          ((g$subst*$7677$15i0ov g$mark*$7678$15i0ov)
                           (if (null? g$subst*$7677$15i0ov)
                             '#f
                             (if (eq? (car g$subst*$7677$15i0ov) 'shift)
                               (g$search$7676$15i0ov
                                 (cdr g$subst*$7677$15i0ov)
                                 (cdr g$mark*$7678$15i0ov))
                               ((case-lambda
                                  ((g$rib$7679$15i0ov)
                                   ((case-lambda
                                      ((g$t$7680$15i0ov)
                                       (if g$t$7680$15i0ov
                                         ((case-lambda
                                            ((g$ht$7681$15i0ov)
                                             ((case-lambda
                                                ((g$si$7682$15i0ov)
                                                 ((case-lambda
                                                    ((g$i$7683$15i0ov)
                                                     (if g$i$7683$15i0ov
                                                       (vector-ref
                                                         (g$rib-label*$7074$15i0ov
                                                           g$rib$7679$15i0ov)
                                                         g$i$7683$15i0ov)
                                                       (g$search$7676$15i0ov
                                                         (cdr g$subst*$7677$15i0ov)
                                                         g$mark*$7678$15i0ov))))
                                                  (if g$si$7682$15i0ov
                                                    (begin
                                                      '#f
                                                      (g$same-marks*?$7129$15i0ov
                                                        g$mark*$7678$15i0ov
                                                        (g$rib-mark**$7073$15i0ov
                                                          g$rib$7679$15i0ov)
                                                        (reverse
                                                          g$si$7682$15i0ov)))
                                                    '#f))))
                                              (g$hashtable-ref$5155$15i0ov
                                                g$ht$7681$15i0ov
                                                g$sym$7675$15i0ov
                                                '#f))))
                                          g$t$7680$15i0ov)
                                         ((letrec ((g$f$7684$15i0ov
                                                     (case-lambda
                                                       ((g$sym*$7685$15i0ov
                                                          g$mark**$7686$15i0ov
                                                          g$label*$7687$15i0ov)
                                                        (if (null?
                                                              g$sym*$7685$15i0ov)
                                                          (g$search$7676$15i0ov
                                                            (cdr g$subst*$7677$15i0ov)
                                                            g$mark*$7678$15i0ov)
                                                          (if (if (eq? (car g$sym*$7685$15i0ov)
                                                                       g$sym$7675$15i0ov)
                                                                (begin
                                                                  '#f
                                                                  (g$same-marks?$7119$15i0ov
                                                                    (car g$mark**$7686$15i0ov)
                                                                    g$mark*$7678$15i0ov))
                                                                '#f)
                                                            (car g$label*$7687$15i0ov)
                                                            (g$f$7684$15i0ov
                                                              (cdr g$sym*$7685$15i0ov)
                                                              (cdr g$mark**$7686$15i0ov)
                                                              (cdr g$label*$7687$15i0ov))))))))
                                            g$f$7684$15i0ov)
                                          (g$rib-sym*$7072$15i0ov
                                            g$rib$7679$15i0ov)
                                          (g$rib-mark**$7073$15i0ov
                                            g$rib$7679$15i0ov)
                                          (g$rib-label*$7074$15i0ov
                                            g$rib$7679$15i0ov)))))
                                    (g$rib-sealed/freq$7075$15i0ov
                                      g$rib$7679$15i0ov))))
                                (car g$subst*$7677$15i0ov))))))))
               g$search$7676$15i0ov)
             (g$stx-subst*$7093$15i0ov g$id$7674$15i0ov)
             (g$stx-mark*$7092$15i0ov g$id$7674$15i0ov))))
         (g$id->sym$7118$15i0ov g$id$7674$15i0ov)))))
   (g$label->binding$7132$15i0ov
     g$label->binding$10763$15i0ov
     (case-lambda
       ((g$x$7688$15i0ov g$r$7689$15i0ov)
        ((case-lambda
           ((g$t$7690$15i0ov)
            (if g$t$7690$15i0ov
              ((case-lambda
                 ((g$b$7691$15i0ov)
                  (if (if (pair? g$b$7691$15i0ov)
                        (begin '#f (eq? (car g$b$7691$15i0ov) '$core-rtd))
                        '#f)
                    (cons '$rtd (map g$bless$7358$15i0ov (cdr g$b$7691$15i0ov)))
                    (if (if (pair? g$b$7691$15i0ov)
                          (begin '#f (eq? (car g$b$7691$15i0ov) 'global-rtd))
                          '#f)
                      ((case-lambda
                         ((g$lib$7692$15i0ov g$loc$7693$15i0ov)
                          (cons '$rtd (symbol-value g$loc$7693$15i0ov))))
                       (g$cadr$4890$15i0ov g$b$7691$15i0ov)
                       (g$cddr$4892$15i0ov g$b$7691$15i0ov))
                      g$b$7691$15i0ov))))
               g$t$7690$15i0ov)
              ((case-lambda
                 ((g$t$7694$15i0ov)
                  (if g$t$7694$15i0ov
                    (cdr g$t$7694$15i0ov)
                    ((case-lambda
                       ((g$t$7695$15i0ov)
                        (if g$t$7695$15i0ov
                          ((case-lambda
                             ((g$env$7696$15i0ov)
                              ((case-lambda
                                 ((g$t$7697$15i0ov)
                                  (if g$t$7697$15i0ov
                                    ((case-lambda
                                       ((g$p$7698$15i0ov)
                                        (g$cons*$5361$15i0ov
                                          'lexical
                                          (cdr g$p$7698$15i0ov)
                                          '#f)))
                                     g$t$7697$15i0ov)
                                    '(displaced-lexical . #f))))
                               (assq
                                 g$x$7688$15i0ov
                                 (g$interaction-env-locs$7475$15i0ov
                                   g$env$7696$15i0ov)))))
                           g$t$7695$15i0ov)
                          '(displaced-lexical . #f))))
                     (g$top-level-context$7511$15i0ov)))))
               (assq g$x$7688$15i0ov g$r$7689$15i0ov)))))
         (g$imported-label->binding$6931$15i0ov g$x$7688$15i0ov)))))
   (g$make-binding$7133$15i0ov g$make-binding$10764$15i0ov cons)
   (g$binding-type$7134$15i0ov g$binding-type$10765$15i0ov car)
   (g$binding-value$7135$15i0ov g$binding-value$10766$15i0ov cdr)
   (g$raise-unbound-error$7136$15i0ov
     g$raise-unbound-error$10767$15i0ov
     (case-lambda
       ((g$id$7699$15i0ov)
        (g$syntax-violation*$7503$15i0ov
          '#f
          '"unbound identifier"
          g$id$7699$15i0ov
          (g$make-undefined-violation$5695$15i0ov)))))
   (g$syntax-type$7137$15i0ov
     g$syntax-type$10768$15i0ov
     (case-lambda
       ((g$e$7700$15i0ov g$r$7701$15i0ov)
        (if (g$id?$7117$15i0ov g$e$7700$15i0ov)
          ((case-lambda
             ((g$id$7702$15i0ov)
              ((case-lambda
                 ((g$label$7703$15i0ov)
                  ((case-lambda
                     ((g$b$7704$15i0ov)
                      ((case-lambda
                         ((g$type$7705$15i0ov)
                          ((case-lambda
                             (()
                              (begin
                                (if (not g$label$7703$15i0ov)
                                  (g$raise-unbound-error$7136$15i0ov
                                    g$id$7702$15i0ov)
                                  (void))
                                ((case-lambda
                                   ((g$t$7706$15i0ov)
                                    (if (memv
                                          g$t$7706$15i0ov
                                          '(lexical
                                             core-prim
                                             macro
                                             macro!
                                             global
                                             local-macro
                                             local-macro!
                                             global-macro
                                             global-macro!
                                             displaced-lexical
                                             syntax
                                             import
                                             $module
                                             $core-rtd
                                             library
                                             mutable))
                                      (values
                                        g$type$7705$15i0ov
                                        (g$binding-value$7135$15i0ov
                                          g$b$7704$15i0ov)
                                        g$id$7702$15i0ov)
                                      (values 'other '#f '#f))))
                                 g$type$7705$15i0ov)))))))
                       (g$binding-type$7134$15i0ov g$b$7704$15i0ov))))
                   (g$label->binding$7132$15i0ov
                     g$label$7703$15i0ov
                     g$r$7701$15i0ov))))
               (g$id->label$7130$15i0ov g$id$7702$15i0ov))))
           g$e$7700$15i0ov)
          (if (g$syntax-pair?$7110$15i0ov g$e$7700$15i0ov)
            ((case-lambda
               ((g$id$7707$15i0ov)
                (if (g$id?$7117$15i0ov g$id$7707$15i0ov)
                  ((case-lambda
                     ((g$label$7708$15i0ov)
                      ((case-lambda
                         ((g$b$7709$15i0ov)
                          ((case-lambda
                             ((g$type$7710$15i0ov)
                              ((case-lambda
                                 (()
                                  (begin
                                    (if (not g$label$7708$15i0ov)
                                      (g$raise-unbound-error$7136$15i0ov
                                        g$id$7707$15i0ov)
                                      (void))
                                    ((case-lambda
                                       ((g$t$7711$15i0ov)
                                        (if (memv
                                              g$t$7711$15i0ov
                                              '(define define-syntax
                                                 core-macro
                                                 begin
                                                 macro
                                                 macro!
                                                 local-macro
                                                 local-macro!
                                                 global-macro
                                                 global-macro!
                                                 module
                                                 library
                                                 set!
                                                 let-syntax
                                                 letrec-syntax
                                                 import
                                                 $core-rtd))
                                          (values
                                            g$type$7710$15i0ov
                                            (g$binding-value$7135$15i0ov
                                              g$b$7709$15i0ov)
                                            g$id$7707$15i0ov)
                                          (values 'call '#f '#f))))
                                     g$type$7710$15i0ov)))))))
                           (g$binding-type$7134$15i0ov g$b$7709$15i0ov))))
                       (g$label->binding$7132$15i0ov
                         g$label$7708$15i0ov
                         g$r$7701$15i0ov))))
                   (g$id->label$7130$15i0ov g$id$7707$15i0ov))
                  (values 'call '#f '#f))))
             (g$syntax-car$7114$15i0ov g$e$7700$15i0ov))
            ((case-lambda
               ((g$d$7712$15i0ov)
                (if (g$self-evaluating?$7125$15i0ov g$d$7712$15i0ov)
                  (values 'constant g$d$7712$15i0ov '#f)
                  (values 'other '#f '#f))))
             (g$stx->datum$7128$15i0ov g$e$7700$15i0ov)))))))
   (g$sanitize-binding$7145$15i0ov
     g$sanitize-binding$10769$15i0ov
     (case-lambda
       ((g$x$7713$15i0ov g$src$7714$15i0ov)
        (if (procedure? g$x$7713$15i0ov)
          (g$cons*$5361$15i0ov 'local-macro g$x$7713$15i0ov g$src$7714$15i0ov)
          (if (if (pair? g$x$7713$15i0ov)
                (if (eq? (car g$x$7713$15i0ov) 'macro!)
                  (begin '#f (procedure? (cdr g$x$7713$15i0ov)))
                  '#f)
                '#f)
            (g$cons*$5361$15i0ov
              'local-macro!
              (cdr g$x$7713$15i0ov)
              g$src$7714$15i0ov)
            (if (if (pair? g$x$7713$15i0ov)
                  (begin '#f (eq? (car g$x$7713$15i0ov) '$rtd))
                  '#f)
              g$x$7713$15i0ov
              (assertion-violation
                'expand
                '"invalid transformer"
                g$x$7713$15i0ov)))))))
   (g$make-variable-transformer$7146$15i0ov
     g$make-variable-transformer$10770$15i0ov
     (case-lambda
       ((g$x$7715$15i0ov)
        (if (procedure? g$x$7715$15i0ov)
          (cons 'macro! g$x$7715$15i0ov)
          (assertion-violation
            'make-variable-transformer
            '"not a procedure"
            g$x$7715$15i0ov)))))
   (g$variable-transformer?$7147$15i0ov
     g$variable-transformer?$10771$15i0ov
     (case-lambda
       ((g$x$7716$15i0ov)
        (if (pair? g$x$7716$15i0ov)
          (if (eq? (car g$x$7716$15i0ov) 'macro!)
            (begin '#f (procedure? (cdr g$x$7716$15i0ov)))
            '#f)
          '#f))))
   (g$variable-transformer-procedure$7148$15i0ov
     g$variable-transformer-procedure$10772$15i0ov
     (case-lambda
       ((g$x$7717$15i0ov)
        (if (g$variable-transformer?$7147$15i0ov g$x$7717$15i0ov)
          (cdr g$x$7717$15i0ov)
          (assertion-violation
            'variable-transformer-procedure
            '"not a variable transformer"
            g$x$7717$15i0ov)))))
   (g$make-eval-transformer$7149$15i0ov
     g$make-eval-transformer$10773$15i0ov
     (case-lambda
       ((g$x$7718$15i0ov)
        (g$sanitize-binding$7145$15i0ov
          (eval-core (g$expanded->core$6631$15i0ov g$x$7718$15i0ov))
          g$x$7718$15i0ov))))
   (g$parse-define$7335$15i0ov
     g$parse-define$10774$15i0ov
     (case-lambda
       ((g$x$7719$15i0ov)
        ((case-lambda
           ((g$t$7720$15i0ov)
            ((case-lambda
               ((g$ls/false$7721$15i0ov)
                (if (if g$ls/false$7721$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7722$15i0ov
                               g$fmls$7723$15i0ov
                               g$b$7724$15i0ov
                               g$b*$7725$15i0ov)
                             (g$id?$7117$15i0ov g$id$7722$15i0ov)))
                          g$ls/false$7721$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7726$15i0ov
                         g$fmls$7727$15i0ov
                         g$b$7728$15i0ov
                         g$b*$7729$15i0ov)
                       (begin
                         (g$verify-formals$7415$15i0ov
                           g$fmls$7727$15i0ov
                           g$x$7719$15i0ov)
                         (values
                           g$id$7726$15i0ov
                           (cons
                             'defun
                             (cons
                               g$fmls$7727$15i0ov
                               (cons g$b$7728$15i0ov g$b*$7729$15i0ov)))))))
                    g$ls/false$7721$15i0ov)
                  ((case-lambda
                     ((g$t$7730$15i0ov)
                      ((case-lambda
                         ((g$ls/false$7731$15i0ov)
                          (if (if g$ls/false$7731$15i0ov
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id$7732$15i0ov g$val$7733$15i0ov)
                                       (g$id?$7117$15i0ov g$id$7732$15i0ov)))
                                    g$ls/false$7731$15i0ov))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id$7734$15i0ov g$val$7735$15i0ov)
                                 (values
                                   g$id$7734$15i0ov
                                   (cons 'expr g$val$7735$15i0ov))))
                              g$ls/false$7731$15i0ov)
                            ((case-lambda
                               ((g$t$7736$15i0ov)
                                ((case-lambda
                                   ((g$ls/false$7737$15i0ov)
                                    (if (if g$ls/false$7737$15i0ov
                                          (begin
                                            '#f
                                            (apply
                                              (case-lambda
                                                ((g$id$7738$15i0ov)
                                                 (g$id?$7117$15i0ov
                                                   g$id$7738$15i0ov)))
                                              g$ls/false$7737$15i0ov))
                                          '#f)
                                      (apply
                                        (case-lambda
                                          ((g$id$7739$15i0ov)
                                           (values
                                             g$id$7739$15i0ov
                                             (cons
                                               'expr
                                               (g$bless$7358$15i0ov '(void))))))
                                        g$ls/false$7737$15i0ov)
                                      (g$syntax-violation$7504$15i0ov
                                        '#f
                                        '"invalid syntax"
                                        g$t$7736$15i0ov))))
                                 (g$syntax-dispatch$7395$15i0ov
                                   g$t$7736$15i0ov
                                   '(_ any)))))
                             g$t$7730$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$7730$15i0ov
                         '(_ any any)))))
                   g$t$7720$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$7720$15i0ov
               '(_ (any . any) any . each-any)))))
         g$x$7719$15i0ov))))
   (g$parse-define-syntax$7336$15i0ov
     g$parse-define-syntax$10775$15i0ov
     (case-lambda
       ((g$x$7740$15i0ov)
        ((case-lambda
           ((g$t$7741$15i0ov)
            ((case-lambda
               ((g$ls/false$7742$15i0ov)
                (if (if g$ls/false$7742$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7743$15i0ov g$val$7744$15i0ov)
                             (g$id?$7117$15i0ov g$id$7743$15i0ov)))
                          g$ls/false$7742$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7745$15i0ov g$val$7746$15i0ov)
                       (values g$id$7745$15i0ov g$val$7746$15i0ov)))
                    g$ls/false$7742$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7741$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$7741$15i0ov '(_ any any)))))
         g$x$7740$15i0ov))))
   (g$scheme-stx-hashtable$7337$15i0ov
     g$scheme-stx-hashtable$10776$15i0ov
     (g$make-eq-hashtable$5152$15i0ov))
   (g$scheme-stx$7338$15i0ov
     g$scheme-stx$10777$15i0ov
     (case-lambda
       ((g$sym$7747$15i0ov)
        ((case-lambda
           ((g$t$7748$15i0ov)
            (if g$t$7748$15i0ov
              g$t$7748$15i0ov
              (begin
                '#f
                ((case-lambda
                   ((g$subst$7749$15i0ov)
                    ((case-lambda
                       ((g$stx$7750$15i0ov)
                        ((case-lambda
                           ((g$stx$7751$15i0ov)
                            ((case-lambda
                               (()
                                (begin
                                  (g$hashtable-set!$5156$15i0ov
                                    g$scheme-stx-hashtable$7337$15i0ov
                                    g$sym$7747$15i0ov
                                    g$stx$7751$15i0ov)
                                  g$stx$7751$15i0ov))))))
                         ((case-lambda
                            ((g$t$7752$15i0ov)
                             (if g$t$7752$15i0ov
                               ((case-lambda
                                  ((g$x$7753$15i0ov)
                                   ((case-lambda
                                      ((g$name$7754$15i0ov g$label$7755$15i0ov)
                                       (g$add-subst$7107$15i0ov
                                         (g$make-rib$7071$15i0ov
                                           (list g$name$7754$15i0ov)
                                           (list g$top-mark*$7059$15i0ov)
                                           (list g$label$7755$15i0ov)
                                           '#f)
                                         g$stx$7750$15i0ov)))
                                    (car g$x$7753$15i0ov)
                                    (cdr g$x$7753$15i0ov))))
                                g$t$7752$15i0ov)
                               g$stx$7750$15i0ov)))
                          (assq g$sym$7747$15i0ov g$subst$7749$15i0ov)))))
                     (g$make-stx$7090$15i0ov
                       g$sym$7747$15i0ov
                       g$top-mark*$7059$15i0ov
                       '()
                       '()))))
                 (g$library-subst$6889$15i0ov
                   (g$find-library-by-name$6925$15i0ov
                     '(psyntax system $all))))))))
         (g$hashtable-ref$5155$15i0ov
           g$scheme-stx-hashtable$7337$15i0ov
           g$sym$7747$15i0ov
           '#f)))))
   (g$lexical-var$7339$15i0ov g$lexical-var$10778$15i0ov car)
   (g$lexical-mutable?$7340$15i0ov g$lexical-mutable?$10779$15i0ov cdr)
   (g$set-lexical-mutable!$7341$15i0ov
     g$set-lexical-mutable!$10780$15i0ov
     set-cdr!)
   (g$add-lexical$7342$15i0ov
     g$add-lexical$10781$15i0ov
     (case-lambda
       ((g$lab$7756$15i0ov g$lex$7757$15i0ov g$r$7758$15i0ov)
        (cons
          (g$cons*$5361$15i0ov g$lab$7756$15i0ov 'lexical g$lex$7757$15i0ov '#f)
          g$r$7758$15i0ov))))
   (g$add-lexicals$7343$15i0ov
     g$add-lexicals$10782$15i0ov
     (case-lambda
       ((g$lab*$7759$15i0ov g$lex*$7760$15i0ov g$r$7761$15i0ov)
        (if (null? g$lab*$7759$15i0ov)
          g$r$7761$15i0ov
          (g$add-lexicals$7343$15i0ov
            (cdr g$lab*$7759$15i0ov)
            (cdr g$lex*$7760$15i0ov)
            (g$add-lexical$7342$15i0ov
              (car g$lab*$7759$15i0ov)
              (car g$lex*$7760$15i0ov)
              g$r$7761$15i0ov))))))
   (g$letrec-helper$7344$15i0ov
     g$letrec-helper$10783$15i0ov
     (case-lambda
       ((g$e$7762$15i0ov g$r$7763$15i0ov g$mr$7764$15i0ov g$build$7765$15i0ov)
        ((case-lambda
           ((g$t$7766$15i0ov)
            ((case-lambda
               ((g$ls/false$7767$15i0ov)
                (if g$ls/false$7767$15i0ov
                  (apply
                    (case-lambda
                      ((g$lhs*$7768$15i0ov
                         g$rhs*$7769$15i0ov
                         g$b$7770$15i0ov
                         g$b*$7771$15i0ov)
                       (if (not (g$valid-bound-ids?$7122$15i0ov
                                  g$lhs*$7768$15i0ov))
                         (g$invalid-fmls-error$7360$15i0ov
                           g$e$7762$15i0ov
                           g$lhs*$7768$15i0ov)
                         ((case-lambda
                            ((g$lex*$7772$15i0ov g$lab*$7773$15i0ov)
                             ((case-lambda
                                ((g$rib$7774$15i0ov g$r$7775$15i0ov)
                                 ((case-lambda
                                    ((g$body$7776$15i0ov g$rhs*$7777$15i0ov)
                                     (g$build$7765$15i0ov
                                       '#f
                                       g$lex*$7772$15i0ov
                                       g$rhs*$7777$15i0ov
                                       g$body$7776$15i0ov)))
                                  (g$chi-internal$7424$15i0ov
                                    (g$add-subst$7107$15i0ov
                                      g$rib$7774$15i0ov
                                      (cons g$b$7770$15i0ov g$b*$7771$15i0ov))
                                    g$r$7775$15i0ov
                                    g$mr$7764$15i0ov)
                                  (g$chi-expr*$7411$15i0ov
                                    (map (case-lambda
                                           ((g$x$7778$15i0ov)
                                            (g$add-subst$7107$15i0ov
                                              g$rib$7774$15i0ov
                                              g$x$7778$15i0ov)))
                                         g$rhs*$7769$15i0ov)
                                    g$r$7775$15i0ov
                                    g$mr$7764$15i0ov))))
                              (g$make-full-rib$7085$15i0ov
                                g$lhs*$7768$15i0ov
                                g$lab*$7773$15i0ov)
                              (g$add-lexicals$7343$15i0ov
                                g$lab*$7773$15i0ov
                                g$lex*$7772$15i0ov
                                g$r$7763$15i0ov))))
                          (map g$gen-lexical$7061$15i0ov g$lhs*$7768$15i0ov)
                          (map g$gen-label$7063$15i0ov g$lhs*$7768$15i0ov)))))
                    g$ls/false$7767$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7766$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$7766$15i0ov
               '(_ #(each (any any)) any . each-any)))))
         g$e$7762$15i0ov))))
   (g$letrec-transformer$7345$15i0ov
     g$letrec-transformer$10784$15i0ov
     (case-lambda
       ((g$e$7779$15i0ov g$r$7780$15i0ov g$mr$7781$15i0ov)
        (g$letrec-helper$7344$15i0ov
          g$e$7779$15i0ov
          g$r$7780$15i0ov
          g$mr$7781$15i0ov
          g$build-letrec$7053$15i0ov))))
   (g$letrec*-transformer$7346$15i0ov
     g$letrec*-transformer$10785$15i0ov
     (case-lambda
       ((g$e$7782$15i0ov g$r$7783$15i0ov g$mr$7784$15i0ov)
        (g$letrec-helper$7344$15i0ov
          g$e$7782$15i0ov
          g$r$7783$15i0ov
          g$mr$7784$15i0ov
          g$build-letrec*$7054$15i0ov))))
   (g$fluid-let-syntax-transformer$7347$15i0ov
     g$fluid-let-syntax-transformer$10786$15i0ov
     (case-lambda
       ((g$e$7785$15i0ov g$r$7786$15i0ov g$mr$7787$15i0ov)
        (letrec* ((g$lookup$7788$15i0ov
                    (case-lambda
                      ((g$x$7798$15i0ov)
                       ((case-lambda
                          ((g$t$7799$15i0ov)
                           (if g$t$7799$15i0ov
                             g$t$7799$15i0ov
                             (begin
                               '#f
                               (g$syntax-violation$7504$15i0ov
                                 '#f
                                 '"unbound identifier"
                                 g$e$7785$15i0ov
                                 g$x$7798$15i0ov)))))
                        (g$id->label$7130$15i0ov g$x$7798$15i0ov))))))
          ((case-lambda
             ((g$t$7789$15i0ov)
              ((case-lambda
                 ((g$ls/false$7790$15i0ov)
                  (if g$ls/false$7790$15i0ov
                    (apply
                      (case-lambda
                        ((g$lhs*$7791$15i0ov
                           g$rhs*$7792$15i0ov
                           g$b$7793$15i0ov
                           g$b*$7794$15i0ov)
                         (if (not (g$valid-bound-ids?$7122$15i0ov
                                    g$lhs*$7791$15i0ov))
                           (g$invalid-fmls-error$7360$15i0ov
                             g$e$7785$15i0ov
                             g$lhs*$7791$15i0ov)
                           ((case-lambda
                              ((g$lab*$7795$15i0ov g$rhs*$7796$15i0ov)
                               (g$chi-internal$7424$15i0ov
                                 (cons g$b$7793$15i0ov g$b*$7794$15i0ov)
                                 (append
                                   (map cons
                                        g$lab*$7795$15i0ov
                                        g$rhs*$7796$15i0ov)
                                   g$r$7786$15i0ov)
                                 (append
                                   (map cons
                                        g$lab*$7795$15i0ov
                                        g$rhs*$7796$15i0ov)
                                   g$mr$7787$15i0ov))))
                            (map g$lookup$7788$15i0ov g$lhs*$7791$15i0ov)
                            (map (case-lambda
                                   ((g$x$7797$15i0ov)
                                    (g$make-eval-transformer$7149$15i0ov
                                      (g$expand-transformer$7440$15i0ov
                                        g$x$7797$15i0ov
                                        g$mr$7787$15i0ov))))
                                 g$rhs*$7792$15i0ov)))))
                      g$ls/false$7790$15i0ov)
                    (g$syntax-violation$7504$15i0ov
                      '#f
                      '"invalid syntax"
                      g$t$7789$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov
                 g$t$7789$15i0ov
                 '(_ #(each (any any)) any . each-any)))))
           g$e$7785$15i0ov)))))
   (g$type-descriptor-transformer$7348$15i0ov
     g$type-descriptor-transformer$10787$15i0ov
     (case-lambda
       ((g$e$7800$15i0ov g$r$7801$15i0ov g$mr$7802$15i0ov)
        ((case-lambda
           ((g$t$7803$15i0ov)
            ((case-lambda
               ((g$ls/false$7804$15i0ov)
                (if (if g$ls/false$7804$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7805$15i0ov)
                             (g$id?$7117$15i0ov g$id$7805$15i0ov)))
                          g$ls/false$7804$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7806$15i0ov)
                       ((case-lambda
                          ((g$lab$7807$15i0ov)
                           ((case-lambda
                              ((g$b$7808$15i0ov)
                               ((case-lambda
                                  ((g$type$7809$15i0ov)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$7807$15i0ov)
                                           (g$raise-unbound-error$7136$15i0ov
                                             g$id$7806$15i0ov)
                                           (void))
                                         (if (not (if (eq? g$type$7809$15i0ov
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (not (list?
                                                             (g$binding-value$7135$15i0ov
                                                               g$b$7808$15i0ov))))
                                                    '#f))
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"not a record type"
                                             g$e$7800$15i0ov)
                                           (void))
                                         (list
                                           'quote
                                           (g$binding-value$7135$15i0ov
                                             g$b$7808$15i0ov))))))))
                                (g$binding-type$7134$15i0ov g$b$7808$15i0ov))))
                            (g$label->binding$7132$15i0ov
                              g$lab$7807$15i0ov
                              g$r$7801$15i0ov))))
                        (g$id->label$7130$15i0ov g$id$7806$15i0ov))))
                    g$ls/false$7804$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7803$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$7803$15i0ov '(_ any)))))
         g$e$7800$15i0ov))))
   (g$record-type-descriptor-transformer$7349$15i0ov
     g$record-type-descriptor-transformer$10788$15i0ov
     (case-lambda
       ((g$e$7810$15i0ov g$r$7811$15i0ov g$mr$7812$15i0ov)
        ((case-lambda
           ((g$t$7813$15i0ov)
            ((case-lambda
               ((g$ls/false$7814$15i0ov)
                (if (if g$ls/false$7814$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7815$15i0ov)
                             (g$id?$7117$15i0ov g$id$7815$15i0ov)))
                          g$ls/false$7814$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7816$15i0ov)
                       ((case-lambda
                          ((g$lab$7817$15i0ov)
                           ((case-lambda
                              ((g$b$7818$15i0ov)
                               ((case-lambda
                                  ((g$type$7819$15i0ov)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$7817$15i0ov)
                                           (g$raise-unbound-error$7136$15i0ov
                                             g$id$7816$15i0ov)
                                           (void))
                                         (if (not (if (eq? g$type$7819$15i0ov
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7135$15i0ov
                                                          g$b$7818$15i0ov)))
                                                    '#f))
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"not a record type"
                                             g$e$7810$15i0ov)
                                           (void))
                                         (g$chi-expr$7413$15i0ov
                                           (car (g$binding-value$7135$15i0ov
                                                  g$b$7818$15i0ov))
                                           g$r$7811$15i0ov
                                           g$mr$7812$15i0ov)))))))
                                (g$binding-type$7134$15i0ov g$b$7818$15i0ov))))
                            (g$label->binding$7132$15i0ov
                              g$lab$7817$15i0ov
                              g$r$7811$15i0ov))))
                        (g$id->label$7130$15i0ov g$id$7816$15i0ov))))
                    g$ls/false$7814$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7813$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$7813$15i0ov '(_ any)))))
         g$e$7810$15i0ov))))
   (g$record-constructor-descriptor-transformer$7350$15i0ov
     g$record-constructor-descriptor-transformer$10789$15i0ov
     (case-lambda
       ((g$e$7820$15i0ov g$r$7821$15i0ov g$mr$7822$15i0ov)
        ((case-lambda
           ((g$t$7823$15i0ov)
            ((case-lambda
               ((g$ls/false$7824$15i0ov)
                (if (if g$ls/false$7824$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$id$7825$15i0ov)
                             (g$id?$7117$15i0ov g$id$7825$15i0ov)))
                          g$ls/false$7824$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$id$7826$15i0ov)
                       ((case-lambda
                          ((g$lab$7827$15i0ov)
                           ((case-lambda
                              ((g$b$7828$15i0ov)
                               ((case-lambda
                                  ((g$type$7829$15i0ov)
                                   ((case-lambda
                                      (()
                                       (begin
                                         (if (not g$lab$7827$15i0ov)
                                           (g$raise-unbound-error$7136$15i0ov
                                             g$id$7826$15i0ov)
                                           (void))
                                         (if (not (if (eq? g$type$7829$15i0ov
                                                           '$rtd)
                                                    (begin
                                                      '#f
                                                      (list?
                                                        (g$binding-value$7135$15i0ov
                                                          g$b$7828$15i0ov)))
                                                    '#f))
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid type"
                                             g$e$7820$15i0ov)
                                           (void))
                                         (g$chi-expr$7413$15i0ov
                                           (g$cadr$4890$15i0ov
                                             (g$binding-value$7135$15i0ov
                                               g$b$7828$15i0ov))
                                           g$r$7821$15i0ov
                                           g$mr$7822$15i0ov)))))))
                                (g$binding-type$7134$15i0ov g$b$7828$15i0ov))))
                            (g$label->binding$7132$15i0ov
                              g$lab$7827$15i0ov
                              g$r$7821$15i0ov))))
                        (g$id->label$7130$15i0ov g$id$7826$15i0ov))))
                    g$ls/false$7824$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7823$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$7823$15i0ov '(_ any)))))
         g$e$7820$15i0ov))))
   (g$when-macro$7351$15i0ov
     g$when-macro$10790$15i0ov
     (case-lambda
       ((g$e$7830$15i0ov)
        ((case-lambda
           ((g$t$7831$15i0ov)
            ((case-lambda
               ((g$ls/false$7832$15i0ov)
                (if g$ls/false$7832$15i0ov
                  (apply
                    (case-lambda
                      ((g$test$7833$15i0ov g$e$7834$15i0ov g$e*$7835$15i0ov)
                       (g$bless$7358$15i0ov
                         (list
                           'if
                           g$test$7833$15i0ov
                           (cons
                             'begin
                             (cons g$e$7834$15i0ov g$e*$7835$15i0ov))))))
                    g$ls/false$7832$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7831$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$7831$15i0ov
               '(_ any any . each-any)))))
         g$e$7830$15i0ov))))
   (g$unless-macro$7352$15i0ov
     g$unless-macro$10791$15i0ov
     (case-lambda
       ((g$e$7836$15i0ov)
        ((case-lambda
           ((g$t$7837$15i0ov)
            ((case-lambda
               ((g$ls/false$7838$15i0ov)
                (if g$ls/false$7838$15i0ov
                  (apply
                    (case-lambda
                      ((g$test$7839$15i0ov g$e$7840$15i0ov g$e*$7841$15i0ov)
                       (g$bless$7358$15i0ov
                         (list
                           'if
                           (list 'not g$test$7839$15i0ov)
                           (cons
                             'begin
                             (cons g$e$7840$15i0ov g$e*$7841$15i0ov))))))
                    g$ls/false$7838$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7837$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$7837$15i0ov
               '(_ any any . each-any)))))
         g$e$7836$15i0ov))))
   (g$if-transformer$7353$15i0ov
     g$if-transformer$10792$15i0ov
     (case-lambda
       ((g$e$7842$15i0ov g$r$7843$15i0ov g$mr$7844$15i0ov)
        ((case-lambda
           ((g$t$7845$15i0ov)
            ((case-lambda
               ((g$ls/false$7846$15i0ov)
                (if g$ls/false$7846$15i0ov
                  (apply
                    (case-lambda
                      ((g$e0$7847$15i0ov g$e1$7848$15i0ov g$e2$7849$15i0ov)
                       (list
                         'if
                         (g$chi-expr$7413$15i0ov
                           g$e0$7847$15i0ov
                           g$r$7843$15i0ov
                           g$mr$7844$15i0ov)
                         (g$chi-expr$7413$15i0ov
                           g$e1$7848$15i0ov
                           g$r$7843$15i0ov
                           g$mr$7844$15i0ov)
                         (g$chi-expr$7413$15i0ov
                           g$e2$7849$15i0ov
                           g$r$7843$15i0ov
                           g$mr$7844$15i0ov))))
                    g$ls/false$7846$15i0ov)
                  ((case-lambda
                     ((g$t$7850$15i0ov)
                      ((case-lambda
                         ((g$ls/false$7851$15i0ov)
                          (if g$ls/false$7851$15i0ov
                            (apply
                              (case-lambda
                                ((g$e0$7852$15i0ov g$e1$7853$15i0ov)
                                 (list
                                   'if
                                   (g$chi-expr$7413$15i0ov
                                     g$e0$7852$15i0ov
                                     g$r$7843$15i0ov
                                     g$mr$7844$15i0ov)
                                   (g$chi-expr$7413$15i0ov
                                     g$e1$7853$15i0ov
                                     g$r$7843$15i0ov
                                     g$mr$7844$15i0ov)
                                   (g$build-void$7052$15i0ov))))
                              g$ls/false$7851$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$7850$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$7850$15i0ov
                         '(_ any any)))))
                   g$t$7845$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$7845$15i0ov '(_ any any any)))))
         g$e$7842$15i0ov))))
   (g$case-macro$7354$15i0ov
     g$case-macro$10793$15i0ov
     (case-lambda
       ((g$e$7854$15i0ov)
        (letrec* ((g$build-last$7855$15i0ov
                    (case-lambda
                      ((g$cls$7875$15i0ov)
                       ((case-lambda
                          ((g$t$7876$15i0ov)
                           ((case-lambda
                              ((g$ls/false$7877$15i0ov)
                               (if g$ls/false$7877$15i0ov
                                 (apply
                                   (case-lambda
                                     ((g$e$7878$15i0ov g$e*$7879$15i0ov)
                                      (cons
                                        'begin
                                        (cons
                                          g$e$7878$15i0ov
                                          g$e*$7879$15i0ov))))
                                   g$ls/false$7877$15i0ov)
                                 ((case-lambda
                                    ((g$t$7880$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$7881$15i0ov)
                                         (if g$ls/false$7881$15i0ov
                                           (apply
                                             (case-lambda
                                               (()
                                                (g$build-one$7856$15i0ov
                                                  g$cls$7875$15i0ov
                                                  '(if #f #f))))
                                             g$ls/false$7881$15i0ov)
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$t$7880$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$7880$15i0ov
                                        '_))))
                                  g$t$7876$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$7876$15i0ov
                              '(#(scheme-id else) any . each-any)))))
                        g$cls$7875$15i0ov))))
                  (g$build-one$7856$15i0ov
                    (case-lambda
                      ((g$cls$7868$15i0ov g$k$7869$15i0ov)
                       ((case-lambda
                          ((g$t$7870$15i0ov)
                           ((case-lambda
                              ((g$ls/false$7871$15i0ov)
                               (if g$ls/false$7871$15i0ov
                                 (apply
                                   (case-lambda
                                     ((g$d*$7872$15i0ov
                                        g$e$7873$15i0ov
                                        g$e*$7874$15i0ov)
                                      (list
                                        'if
                                        (list
                                          'memv
                                          't
                                          (list 'quote g$d*$7872$15i0ov))
                                        (cons
                                          'begin
                                          (cons
                                            g$e$7873$15i0ov
                                            g$e*$7874$15i0ov))
                                        g$k$7869$15i0ov)))
                                   g$ls/false$7871$15i0ov)
                                 (g$syntax-violation$7504$15i0ov
                                   '#f
                                   '"invalid syntax"
                                   g$t$7870$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$7870$15i0ov
                              '(each-any any . each-any)))))
                        g$cls$7868$15i0ov)))))
          ((case-lambda
             ((g$t$7857$15i0ov)
              ((case-lambda
                 ((g$ls/false$7858$15i0ov)
                  (if g$ls/false$7858$15i0ov
                    (apply
                      (case-lambda
                        ((g$expr$7859$15i0ov)
                         (g$bless$7358$15i0ov
                           (cons
                             'let
                             (cons
                               (list (list 't g$expr$7859$15i0ov))
                               '((if #f #f)))))))
                      g$ls/false$7858$15i0ov)
                    ((case-lambda
                       ((g$t$7860$15i0ov)
                        ((case-lambda
                           ((g$ls/false$7861$15i0ov)
                            (if g$ls/false$7861$15i0ov
                              (apply
                                (case-lambda
                                  ((g$expr$7862$15i0ov
                                     g$cls$7863$15i0ov
                                     g$cls*$7864$15i0ov)
                                   (g$bless$7358$15i0ov
                                     (list
                                       'let
                                       (list (list 't g$expr$7862$15i0ov))
                                       ((letrec ((g$f$7865$15i0ov
                                                   (case-lambda
                                                     ((g$cls$7866$15i0ov
                                                        g$cls*$7867$15i0ov)
                                                      (if (null?
                                                            g$cls*$7867$15i0ov)
                                                        (g$build-last$7855$15i0ov
                                                          g$cls$7866$15i0ov)
                                                        (g$build-one$7856$15i0ov
                                                          g$cls$7866$15i0ov
                                                          (g$f$7865$15i0ov
                                                            (car g$cls*$7867$15i0ov)
                                                            (cdr g$cls*$7867$15i0ov))))))))
                                          g$f$7865$15i0ov)
                                        g$cls$7863$15i0ov
                                        g$cls*$7864$15i0ov)))))
                                g$ls/false$7861$15i0ov)
                              (g$syntax-violation$7504$15i0ov
                                '#f
                                '"invalid syntax"
                                g$t$7860$15i0ov))))
                         (g$syntax-dispatch$7395$15i0ov
                           g$t$7860$15i0ov
                           '(_ any any . each-any)))))
                     g$t$7857$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov g$t$7857$15i0ov '(_ any)))))
           g$e$7854$15i0ov)))))
   (g$quote-transformer$7355$15i0ov
     g$quote-transformer$10794$15i0ov
     (case-lambda
       ((g$e$7882$15i0ov g$r$7883$15i0ov g$mr$7884$15i0ov)
        ((case-lambda
           ((g$t$7885$15i0ov)
            ((case-lambda
               ((g$ls/false$7886$15i0ov)
                (if g$ls/false$7886$15i0ov
                  (apply
                    (case-lambda
                      ((g$datum$7887$15i0ov)
                       (list
                         'quote
                         (g$stx->datum$7128$15i0ov g$datum$7887$15i0ov))))
                    g$ls/false$7886$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7885$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$7885$15i0ov '(_ any)))))
         g$e$7882$15i0ov))))
   (g$case-lambda-transformer$7356$15i0ov
     g$case-lambda-transformer$10795$15i0ov
     (case-lambda
       ((g$e$7888$15i0ov g$r$7889$15i0ov g$mr$7890$15i0ov)
        ((case-lambda
           ((g$t$7891$15i0ov)
            ((case-lambda
               ((g$ls/false$7892$15i0ov)
                (if g$ls/false$7892$15i0ov
                  (apply
                    (case-lambda
                      ((g$fmls*$7893$15i0ov g$b*$7894$15i0ov g$b**$7895$15i0ov)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause*$7417$15i0ov
                              g$e$7888$15i0ov
                              g$fmls*$7893$15i0ov
                              (map cons g$b*$7894$15i0ov g$b**$7895$15i0ov)
                              g$r$7889$15i0ov
                              g$mr$7890$15i0ov)))
                         (case-lambda
                           ((g$fmls*$7898$15i0ov g$body*$7899$15i0ov)
                            ((case-lambda
                               ((g$body*$7900$15i0ov g$fmls*$7901$15i0ov)
                                (g$build-case-lambda$7049$15i0ov
                                  '#f
                                  g$fmls*$7901$15i0ov
                                  g$body*$7900$15i0ov)))
                             g$body*$7899$15i0ov
                             g$fmls*$7898$15i0ov))))))
                    g$ls/false$7892$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7891$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$7891$15i0ov
               '(_ . #(each (any any . each-any)))))))
         g$e$7888$15i0ov))))
   (g$lambda-transformer$7357$15i0ov
     g$lambda-transformer$10796$15i0ov
     (case-lambda
       ((g$e$7902$15i0ov g$r$7903$15i0ov g$mr$7904$15i0ov)
        ((case-lambda
           ((g$t$7905$15i0ov)
            ((case-lambda
               ((g$ls/false$7906$15i0ov)
                (if g$ls/false$7906$15i0ov
                  (apply
                    (case-lambda
                      ((g$fmls$7907$15i0ov g$b$7908$15i0ov g$b*$7909$15i0ov)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$chi-lambda-clause$7416$15i0ov
                              g$e$7902$15i0ov
                              g$fmls$7907$15i0ov
                              (cons g$b$7908$15i0ov g$b*$7909$15i0ov)
                              g$r$7903$15i0ov
                              g$mr$7904$15i0ov)))
                         (case-lambda
                           ((g$fmls$7912$15i0ov g$body$7913$15i0ov)
                            ((case-lambda
                               ((g$body$7914$15i0ov g$fmls$7915$15i0ov)
                                (g$build-lambda$7048$15i0ov
                                  '#f
                                  g$fmls$7915$15i0ov
                                  g$body$7914$15i0ov)))
                             g$body$7913$15i0ov
                             g$fmls$7912$15i0ov))))))
                    g$ls/false$7906$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7905$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$7905$15i0ov
               '(_ any any . each-any)))))
         g$e$7902$15i0ov))))
   (g$bless$7358$15i0ov
     g$bless$10797$15i0ov
     (case-lambda
       ((g$x$7916$15i0ov)
        (g$mkstx$7105$15i0ov
          ((letrec ((g$f$7917$15i0ov
                      (case-lambda
                        ((g$x$7918$15i0ov)
                         (if (g$stx?$7089$15i0ov g$x$7918$15i0ov)
                           g$x$7918$15i0ov
                           (if (pair? g$x$7918$15i0ov)
                             (cons
                               (g$f$7917$15i0ov (car g$x$7918$15i0ov))
                               (g$f$7917$15i0ov (cdr g$x$7918$15i0ov)))
                             (if (symbol? g$x$7918$15i0ov)
                               (g$scheme-stx$7338$15i0ov g$x$7918$15i0ov)
                               (if (vector? g$x$7918$15i0ov)
                                 (vector-map g$f$7917$15i0ov g$x$7918$15i0ov)
                                 g$x$7918$15i0ov))))))))
             g$f$7917$15i0ov)
           g$x$7916$15i0ov)
          '()
          '()
          '()))))
   (g$with-syntax-macro$7359$15i0ov
     g$with-syntax-macro$10798$15i0ov
     (case-lambda
       ((g$e$7919$15i0ov)
        ((case-lambda
           ((g$t$7920$15i0ov)
            ((case-lambda
               ((g$ls/false$7921$15i0ov)
                (if g$ls/false$7921$15i0ov
                  (apply
                    (case-lambda
                      ((g$pat*$7922$15i0ov
                         g$expr*$7923$15i0ov
                         g$b$7924$15i0ov
                         g$b*$7925$15i0ov)
                       ((case-lambda
                          ((g$idn*$7926$15i0ov)
                           (begin
                             (g$verify-formals$7415$15i0ov
                               (map car g$idn*$7926$15i0ov)
                               g$e$7919$15i0ov)
                             ((case-lambda
                                ((g$t*$7927$15i0ov)
                                 (g$bless$7358$15i0ov
                                   (list
                                     'let
                                     (map list
                                          g$t*$7927$15i0ov
                                          g$expr*$7923$15i0ov)
                                     ((letrec ((g$f$7928$15i0ov
                                                 (case-lambda
                                                   ((g$pat*$7929$15i0ov
                                                      g$t*$7930$15i0ov)
                                                    (if (null?
                                                          g$pat*$7929$15i0ov)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '#f
                                                          (cons
                                                            g$b$7924$15i0ov
                                                            g$b*$7925$15i0ov)))
                                                      (list
                                                        'syntax-case
                                                        (car g$t*$7930$15i0ov)
                                                        '()
                                                        (list
                                                          (car g$pat*$7929$15i0ov)
                                                          (g$f$7928$15i0ov
                                                            (cdr g$pat*$7929$15i0ov)
                                                            (cdr g$t*$7930$15i0ov)))
                                                        (list
                                                          '_
                                                          (list
                                                            'assertion-violation
                                                            ''with-syntax
                                                            '"pattern does not match value"
                                                            (list
                                                              'quote
                                                              (car g$pat*$7929$15i0ov))
                                                            (car g$t*$7930$15i0ov)))))))))
                                        g$f$7928$15i0ov)
                                      g$pat*$7922$15i0ov
                                      g$t*$7927$15i0ov)))))
                              (g$generate-temporaries$7494$15i0ov
                                g$expr*$7923$15i0ov)))))
                        ((letrec ((g$f$7931$15i0ov
                                    (case-lambda
                                      ((g$pat*$7932$15i0ov)
                                       (if (null? g$pat*$7932$15i0ov)
                                         '()
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$convert-pattern$7394$15i0ov
                                                (car g$pat*$7932$15i0ov)
                                                '())))
                                           (case-lambda
                                             ((g$pat$7935$15i0ov
                                                g$idn*$7936$15i0ov)
                                              ((case-lambda
                                                 ((g$idn*$7937$15i0ov
                                                    g$pat$7938$15i0ov)
                                                  (append
                                                    g$idn*$7937$15i0ov
                                                    (g$f$7931$15i0ov
                                                      (cdr g$pat*$7932$15i0ov)))))
                                               g$idn*$7936$15i0ov
                                               g$pat$7935$15i0ov)))))))))
                           g$f$7931$15i0ov)
                         g$pat*$7922$15i0ov))))
                    g$ls/false$7921$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$7920$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$7920$15i0ov
               '(_ #(each (any any)) any . each-any)))))
         g$e$7919$15i0ov))))
   (g$invalid-fmls-error$7360$15i0ov
     g$invalid-fmls-error$10799$15i0ov
     (case-lambda
       ((g$stx$7939$15i0ov g$fmls$7940$15i0ov)
        ((case-lambda
           ((g$t$7941$15i0ov)
            ((case-lambda
               ((g$ls/false$7942$15i0ov)
                (if g$ls/false$7942$15i0ov
                  (apply
                    (case-lambda
                      ((g$id*$7943$15i0ov g$last$7944$15i0ov)
                       ((letrec ((g$f$7945$15i0ov
                                   (case-lambda
                                     ((g$id*$7946$15i0ov)
                                      (if (null? g$id*$7946$15i0ov)
                                        (values)
                                        (if (not (g$id?$7117$15i0ov
                                                   (car g$id*$7946$15i0ov)))
                                          (g$syntax-violation$7504$15i0ov
                                            '#f
                                            '"not an identifier"
                                            g$stx$7939$15i0ov
                                            (car g$id*$7946$15i0ov))
                                          (begin
                                            (g$f$7945$15i0ov
                                              (cdr g$id*$7946$15i0ov))
                                            (if (g$bound-id-member?$7124$15i0ov
                                                  (car g$id*$7946$15i0ov)
                                                  (cdr g$id*$7946$15i0ov))
                                              (g$syntax-violation$7504$15i0ov
                                                '#f
                                                '"duplicate binding"
                                                g$stx$7939$15i0ov
                                                (car g$id*$7946$15i0ov))
                                              (void)))))))))
                          g$f$7945$15i0ov)
                        (if (g$id?$7117$15i0ov g$last$7944$15i0ov)
                          (cons g$last$7944$15i0ov g$id*$7943$15i0ov)
                          (if (g$syntax-null?$7112$15i0ov g$last$7944$15i0ov)
                            g$id*$7943$15i0ov
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"not an identifier"
                              g$stx$7939$15i0ov
                              g$last$7944$15i0ov))))))
                    g$ls/false$7942$15i0ov)
                  ((case-lambda
                     ((g$t$7947$15i0ov)
                      ((case-lambda
                         ((g$ls/false$7948$15i0ov)
                          (if g$ls/false$7948$15i0ov
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7504$15i0ov
                                   '#f
                                   '"malformed binding form"
                                   g$stx$7939$15i0ov
                                   g$fmls$7940$15i0ov)))
                              g$ls/false$7948$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$7947$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov g$t$7947$15i0ov '_))))
                   g$t$7941$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$7941$15i0ov
               '#(each+ any () any)))))
         g$fmls$7940$15i0ov))))
   (g$let-macro$7361$15i0ov
     g$let-macro$10800$15i0ov
     (case-lambda
       ((g$stx$7949$15i0ov)
        ((case-lambda
           ((g$t$7950$15i0ov)
            ((case-lambda
               ((g$ls/false$7951$15i0ov)
                (if g$ls/false$7951$15i0ov
                  (apply
                    (case-lambda
                      ((g$lhs*$7952$15i0ov
                         g$rhs*$7953$15i0ov
                         g$b$7954$15i0ov
                         g$b*$7955$15i0ov)
                       (if (g$valid-bound-ids?$7122$15i0ov g$lhs*$7952$15i0ov)
                         (g$bless$7358$15i0ov
                           (cons
                             (cons
                               'lambda
                               (cons
                                 g$lhs*$7952$15i0ov
                                 (cons g$b$7954$15i0ov g$b*$7955$15i0ov)))
                             g$rhs*$7953$15i0ov))
                         (g$invalid-fmls-error$7360$15i0ov
                           g$stx$7949$15i0ov
                           g$lhs*$7952$15i0ov))))
                    g$ls/false$7951$15i0ov)
                  ((case-lambda
                     ((g$t$7956$15i0ov)
                      ((case-lambda
                         ((g$ls/false$7957$15i0ov)
                          (if (if g$ls/false$7957$15i0ov
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$f$7958$15i0ov
                                         g$lhs*$7959$15i0ov
                                         g$rhs*$7960$15i0ov
                                         g$b$7961$15i0ov
                                         g$b*$7962$15i0ov)
                                       (g$id?$7117$15i0ov g$f$7958$15i0ov)))
                                    g$ls/false$7957$15i0ov))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$f$7963$15i0ov
                                   g$lhs*$7964$15i0ov
                                   g$rhs*$7965$15i0ov
                                   g$b$7966$15i0ov
                                   g$b*$7967$15i0ov)
                                 (if (g$valid-bound-ids?$7122$15i0ov
                                       g$lhs*$7964$15i0ov)
                                   (g$bless$7358$15i0ov
                                     (cons
                                       (list
                                         'letrec
                                         (list
                                           (list
                                             g$f$7963$15i0ov
                                             (cons
                                               'lambda
                                               (cons
                                                 g$lhs*$7964$15i0ov
                                                 (cons
                                                   g$b$7966$15i0ov
                                                   g$b*$7967$15i0ov)))))
                                         g$f$7963$15i0ov)
                                       g$rhs*$7965$15i0ov))
                                   (g$invalid-fmls-error$7360$15i0ov
                                     g$stx$7949$15i0ov
                                     g$lhs*$7964$15i0ov))))
                              g$ls/false$7957$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$7956$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$7956$15i0ov
                         '(_ any #(each (any any)) any . each-any)))))
                   g$t$7950$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$7950$15i0ov
               '(_ #(each (any any)) any . each-any)))))
         g$stx$7949$15i0ov))))
   (g$let-values-macro$7362$15i0ov
     g$let-values-macro$10801$15i0ov
     (case-lambda
       ((g$stx$7968$15i0ov)
        (letrec* ((g$rename$7969$15i0ov
                    (case-lambda
                      ((g$x$8020$15i0ov g$old*$8021$15i0ov g$new*$8022$15i0ov)
                       (begin
                         (if (not (g$id?$7117$15i0ov g$x$8020$15i0ov))
                           (g$syntax-violation$7504$15i0ov
                             '#f
                             '"not an indentifier"
                             g$stx$7968$15i0ov
                             g$x$8020$15i0ov)
                           (void))
                         (if (g$bound-id-member?$7124$15i0ov
                               g$x$8020$15i0ov
                               g$old*$8021$15i0ov)
                           (g$syntax-violation$7504$15i0ov
                             '#f
                             '"duplicate binding"
                             g$stx$7968$15i0ov
                             g$x$8020$15i0ov)
                           (void))
                         ((case-lambda
                            ((g$y$8023$15i0ov)
                             (values
                               g$y$8023$15i0ov
                               (cons g$x$8020$15i0ov g$old*$8021$15i0ov)
                               (cons g$y$8023$15i0ov g$new*$8022$15i0ov))))
                          (gensym
                            (g$syntax->datum$7507$15i0ov g$x$8020$15i0ov)))))))
                  (g$rename*$7970$15i0ov
                    (case-lambda
                      ((g$x*$8011$15i0ov g$old*$8012$15i0ov g$new*$8013$15i0ov)
                       (if (null? g$x*$8011$15i0ov)
                         (values '() g$old*$8012$15i0ov g$new*$8013$15i0ov)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$rename$7969$15i0ov
                                (car g$x*$8011$15i0ov)
                                g$old*$8012$15i0ov
                                g$new*$8013$15i0ov)))
                           (case-lambda
                             ((g$x$8014$15i0ov
                                g$old*$8015$15i0ov
                                g$new*$8016$15i0ov)
                              (call-with-values
                                (case-lambda
                                  (()
                                   (g$rename*$7970$15i0ov
                                     (cdr g$x*$8011$15i0ov)
                                     g$old*$8015$15i0ov
                                     g$new*$8016$15i0ov)))
                                (case-lambda
                                  ((g$x*$8017$15i0ov
                                     g$old*$8018$15i0ov
                                     g$new*$8019$15i0ov)
                                   (values
                                     (cons g$x$8014$15i0ov g$x*$8017$15i0ov)
                                     g$old*$8018$15i0ov
                                     g$new*$8019$15i0ov))))))))))))
          ((case-lambda
             ((g$t$7971$15i0ov)
              ((case-lambda
                 ((g$ls/false$7972$15i0ov)
                  (if g$ls/false$7972$15i0ov
                    (apply
                      (case-lambda
                        ((g$b$7973$15i0ov g$b*$7974$15i0ov)
                         (g$cons*$5361$15i0ov
                           (g$bless$7358$15i0ov 'let)
                           '()
                           g$b$7973$15i0ov
                           g$b*$7974$15i0ov)))
                      g$ls/false$7972$15i0ov)
                    ((case-lambda
                       ((g$t$7975$15i0ov)
                        ((case-lambda
                           ((g$ls/false$7976$15i0ov)
                            (if g$ls/false$7976$15i0ov
                              (apply
                                (case-lambda
                                  ((g$lhs*$7977$15i0ov
                                     g$rhs*$7978$15i0ov
                                     g$b$7979$15i0ov
                                     g$b*$7980$15i0ov)
                                   (g$bless$7358$15i0ov
                                     ((letrec ((g$f$7981$15i0ov
                                                 (case-lambda
                                                   ((g$lhs*$7982$15i0ov
                                                      g$rhs*$7983$15i0ov
                                                      g$old*$7984$15i0ov
                                                      g$new*$7985$15i0ov)
                                                    (if (null?
                                                          g$lhs*$7982$15i0ov)
                                                      (cons
                                                        'let
                                                        (cons
                                                          (map list
                                                               g$old*$7984$15i0ov
                                                               g$new*$7985$15i0ov)
                                                          (cons
                                                            g$b$7979$15i0ov
                                                            g$b*$7980$15i0ov)))
                                                      ((case-lambda
                                                         ((g$t$7986$15i0ov)
                                                          ((case-lambda
                                                             ((g$ls/false$7987$15i0ov)
                                                              (if g$ls/false$7987$15i0ov
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$7988$15i0ov)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$rename*$7970$15i0ov
                                                                            g$x*$7988$15i0ov
                                                                            g$old*$7984$15i0ov
                                                                            g$new*$7985$15i0ov)))
                                                                       (case-lambda
                                                                         ((g$y*$7992$15i0ov
                                                                            g$old*$7993$15i0ov
                                                                            g$new*$7994$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$new*$7995$15i0ov
                                                                                g$old*$7996$15i0ov
                                                                                g$y*$7997$15i0ov)
                                                                              (list
                                                                                'call-with-values
                                                                                (list
                                                                                  'lambda
                                                                                  '()
                                                                                  (car g$rhs*$7983$15i0ov))
                                                                                (list
                                                                                  'lambda
                                                                                  g$y*$7997$15i0ov
                                                                                  (g$f$7981$15i0ov
                                                                                    (cdr g$lhs*$7982$15i0ov)
                                                                                    (cdr g$rhs*$7983$15i0ov)
                                                                                    g$old*$7996$15i0ov
                                                                                    g$new*$7995$15i0ov)))))
                                                                           g$new*$7994$15i0ov
                                                                           g$old*$7993$15i0ov
                                                                           g$y*$7992$15i0ov))))))
                                                                  g$ls/false$7987$15i0ov)
                                                                ((case-lambda
                                                                   ((g$t$7998$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$ls/false$7999$15i0ov)
                                                                        (if g$ls/false$7999$15i0ov
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8000$15i0ov
                                                                                 g$x$8001$15i0ov)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$rename$7969$15i0ov
                                                                                      g$x$8001$15i0ov
                                                                                      g$old*$7984$15i0ov
                                                                                      g$new*$7985$15i0ov)))
                                                                                 (case-lambda
                                                                                   ((g$y$8002$15i0ov
                                                                                      g$old*$8003$15i0ov
                                                                                      g$new*$8004$15i0ov)
                                                                                    (call-with-values
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (g$rename*$7970$15i0ov
                                                                                           g$x*$8000$15i0ov
                                                                                           g$old*$8003$15i0ov
                                                                                           g$new*$8004$15i0ov)))
                                                                                      (case-lambda
                                                                                        ((g$y*$8005$15i0ov
                                                                                           g$old*$8006$15i0ov
                                                                                           g$new*$8007$15i0ov)
                                                                                         (list
                                                                                           'call-with-values
                                                                                           (list
                                                                                             'lambda
                                                                                             '()
                                                                                             (car g$rhs*$7983$15i0ov))
                                                                                           (list
                                                                                             'lambda
                                                                                             (append
                                                                                               g$y*$8005$15i0ov
                                                                                               g$y$8002$15i0ov)
                                                                                             (g$f$7981$15i0ov
                                                                                               (cdr g$lhs*$7982$15i0ov)
                                                                                               (cdr g$rhs*$7983$15i0ov)
                                                                                               g$old*$8006$15i0ov
                                                                                               g$new*$8007$15i0ov)))))))))))
                                                                            g$ls/false$7999$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$t$8008$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8009$15i0ov)
                                                                                  (if g$ls/false$8009$15i0ov
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8010$15i0ov)
                                                                                         (g$syntax-violation$7504$15i0ov
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$7968$15i0ov
                                                                                           g$others$8010$15i0ov)))
                                                                                      g$ls/false$8009$15i0ov)
                                                                                    (g$syntax-violation$7504$15i0ov
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8008$15i0ov))))
                                                                               (g$syntax-dispatch$7395$15i0ov
                                                                                 g$t$8008$15i0ov
                                                                                 'any))))
                                                                           g$t$7998$15i0ov))))
                                                                     (g$syntax-dispatch$7395$15i0ov
                                                                       g$t$7998$15i0ov
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$7986$15i0ov))))
                                                           (g$syntax-dispatch$7395$15i0ov
                                                             g$t$7986$15i0ov
                                                             'each-any))))
                                                       (car g$lhs*$7982$15i0ov)))))))
                                        g$f$7981$15i0ov)
                                      g$lhs*$7977$15i0ov
                                      g$rhs*$7978$15i0ov
                                      '()
                                      '()))))
                                g$ls/false$7976$15i0ov)
                              (g$syntax-violation$7504$15i0ov
                                '#f
                                '"invalid syntax"
                                g$t$7975$15i0ov))))
                         (g$syntax-dispatch$7395$15i0ov
                           g$t$7975$15i0ov
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$7971$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov
                 g$t$7971$15i0ov
                 '(_ () any . each-any)))))
           g$stx$7968$15i0ov)))))
   (g$let*-values-macro$7363$15i0ov
     g$let*-values-macro$10802$15i0ov
     (case-lambda
       ((g$stx$8024$15i0ov)
        (letrec* ((g$check$8025$15i0ov
                    (case-lambda
                      ((g$x*$8049$15i0ov)
                       (if (not (null? g$x*$8049$15i0ov))
                         ((case-lambda
                            ((g$x$8050$15i0ov)
                             (begin
                               (if (not (g$id?$7117$15i0ov g$x$8050$15i0ov))
                                 (g$syntax-violation$7504$15i0ov
                                   '#f
                                   '"not an identifier"
                                   g$stx$8024$15i0ov
                                   g$x$8050$15i0ov)
                                 (void))
                               (g$check$8025$15i0ov (cdr g$x*$8049$15i0ov))
                               (if (g$bound-id-member?$7124$15i0ov
                                     g$x$8050$15i0ov
                                     (cdr g$x*$8049$15i0ov))
                                 (g$syntax-violation$7504$15i0ov
                                   '#f
                                   '"duplicate identifier"
                                   g$stx$8024$15i0ov
                                   g$x$8050$15i0ov)
                                 (void)))))
                          (car g$x*$8049$15i0ov))
                         (void))))))
          ((case-lambda
             ((g$t$8026$15i0ov)
              ((case-lambda
                 ((g$ls/false$8027$15i0ov)
                  (if g$ls/false$8027$15i0ov
                    (apply
                      (case-lambda
                        ((g$b$8028$15i0ov g$b*$8029$15i0ov)
                         (g$cons*$5361$15i0ov
                           (g$bless$7358$15i0ov 'let)
                           '()
                           g$b$8028$15i0ov
                           g$b*$8029$15i0ov)))
                      g$ls/false$8027$15i0ov)
                    ((case-lambda
                       ((g$t$8030$15i0ov)
                        ((case-lambda
                           ((g$ls/false$8031$15i0ov)
                            (if g$ls/false$8031$15i0ov
                              (apply
                                (case-lambda
                                  ((g$lhs*$8032$15i0ov
                                     g$rhs*$8033$15i0ov
                                     g$b$8034$15i0ov
                                     g$b*$8035$15i0ov)
                                   (g$bless$7358$15i0ov
                                     ((letrec ((g$f$8036$15i0ov
                                                 (case-lambda
                                                   ((g$lhs*$8037$15i0ov
                                                      g$rhs*$8038$15i0ov)
                                                    (if (null?
                                                          g$lhs*$8037$15i0ov)
                                                      (cons
                                                        'begin
                                                        (cons
                                                          g$b$8034$15i0ov
                                                          g$b*$8035$15i0ov))
                                                      ((case-lambda
                                                         ((g$t$8039$15i0ov)
                                                          ((case-lambda
                                                             ((g$ls/false$8040$15i0ov)
                                                              (if g$ls/false$8040$15i0ov
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x*$8041$15i0ov)
                                                                     (begin
                                                                       (g$check$8025$15i0ov
                                                                         g$x*$8041$15i0ov)
                                                                       (list
                                                                         'call-with-values
                                                                         (list
                                                                           'lambda
                                                                           '()
                                                                           (car g$rhs*$8038$15i0ov))
                                                                         (list
                                                                           'lambda
                                                                           g$x*$8041$15i0ov
                                                                           (g$f$8036$15i0ov
                                                                             (cdr g$lhs*$8037$15i0ov)
                                                                             (cdr g$rhs*$8038$15i0ov)))))))
                                                                  g$ls/false$8040$15i0ov)
                                                                ((case-lambda
                                                                   ((g$t$8042$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8043$15i0ov)
                                                                        (if g$ls/false$8043$15i0ov
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x*$8044$15i0ov
                                                                                 g$x$8045$15i0ov)
                                                                               (begin
                                                                                 (g$check$8025$15i0ov
                                                                                   (cons
                                                                                     g$x$8045$15i0ov
                                                                                     g$x*$8044$15i0ov))
                                                                                 (list
                                                                                   'call-with-values
                                                                                   (list
                                                                                     'lambda
                                                                                     '()
                                                                                     (car g$rhs*$8038$15i0ov))
                                                                                   (list
                                                                                     'lambda
                                                                                     (append
                                                                                       g$x*$8044$15i0ov
                                                                                       g$x$8045$15i0ov)
                                                                                     (g$f$8036$15i0ov
                                                                                       (cdr g$lhs*$8037$15i0ov)
                                                                                       (cdr g$rhs*$8038$15i0ov)))))))
                                                                            g$ls/false$8043$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$t$8046$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8047$15i0ov)
                                                                                  (if g$ls/false$8047$15i0ov
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$others$8048$15i0ov)
                                                                                         (g$syntax-violation$7504$15i0ov
                                                                                           '#f
                                                                                           '"malformed bindings"
                                                                                           g$stx$8024$15i0ov
                                                                                           g$others$8048$15i0ov)))
                                                                                      g$ls/false$8047$15i0ov)
                                                                                    (g$syntax-violation$7504$15i0ov
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8046$15i0ov))))
                                                                               (g$syntax-dispatch$7395$15i0ov
                                                                                 g$t$8046$15i0ov
                                                                                 'any))))
                                                                           g$t$8042$15i0ov))))
                                                                     (g$syntax-dispatch$7395$15i0ov
                                                                       g$t$8042$15i0ov
                                                                       '#(each+
                                                                          any
                                                                          ()
                                                                          any)))))
                                                                 g$t$8039$15i0ov))))
                                                           (g$syntax-dispatch$7395$15i0ov
                                                             g$t$8039$15i0ov
                                                             'each-any))))
                                                       (car g$lhs*$8037$15i0ov)))))))
                                        g$f$8036$15i0ov)
                                      g$lhs*$8032$15i0ov
                                      g$rhs*$8033$15i0ov))))
                                g$ls/false$8031$15i0ov)
                              (g$syntax-violation$7504$15i0ov
                                '#f
                                '"invalid syntax"
                                g$t$8030$15i0ov))))
                         (g$syntax-dispatch$7395$15i0ov
                           g$t$8030$15i0ov
                           '(_ #(each (any any)) any . each-any)))))
                     g$t$8026$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov
                 g$t$8026$15i0ov
                 '(_ () any . each-any)))))
           g$stx$8024$15i0ov)))))
   (g$trace-lambda-macro$7364$15i0ov
     g$trace-lambda-macro$10803$15i0ov
     (case-lambda
       ((g$stx$8051$15i0ov)
        ((case-lambda
           ((g$t$8052$15i0ov)
            ((case-lambda
               ((g$ls/false$8053$15i0ov)
                (if g$ls/false$8053$15i0ov
                  (apply
                    (case-lambda
                      ((g$who$8054$15i0ov
                         g$fmls$8055$15i0ov
                         g$b$8056$15i0ov
                         g$b*$8057$15i0ov)
                       (if (g$valid-bound-ids?$7122$15i0ov g$fmls$8055$15i0ov)
                         (g$bless$7358$15i0ov
                           (list
                             'make-traced-procedure
                             (list 'quote g$who$8054$15i0ov)
                             (cons
                               'lambda
                               (cons
                                 g$fmls$8055$15i0ov
                                 (cons g$b$8056$15i0ov g$b*$8057$15i0ov)))))
                         (g$invalid-fmls-error$7360$15i0ov
                           g$stx$8051$15i0ov
                           g$fmls$8055$15i0ov))))
                    g$ls/false$8053$15i0ov)
                  ((case-lambda
                     ((g$t$8058$15i0ov)
                      ((case-lambda
                         ((g$ls/false$8059$15i0ov)
                          (if g$ls/false$8059$15i0ov
                            (apply
                              (case-lambda
                                ((g$who$8060$15i0ov
                                   g$fmls$8061$15i0ov
                                   g$last$8062$15i0ov
                                   g$b$8063$15i0ov
                                   g$b*$8064$15i0ov)
                                 (if (g$valid-bound-ids?$7122$15i0ov
                                       (cons
                                         g$last$8062$15i0ov
                                         g$fmls$8061$15i0ov))
                                   (g$bless$7358$15i0ov
                                     (list
                                       'make-traced-procedure
                                       (list 'quote g$who$8060$15i0ov)
                                       (cons
                                         'lambda
                                         (cons
                                           (append
                                             g$fmls$8061$15i0ov
                                             g$last$8062$15i0ov)
                                           (cons
                                             g$b$8063$15i0ov
                                             g$b*$8064$15i0ov)))))
                                   (g$invalid-fmls-error$7360$15i0ov
                                     g$stx$8051$15i0ov
                                     (append
                                       g$fmls$8061$15i0ov
                                       g$last$8062$15i0ov)))))
                              g$ls/false$8059$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$8058$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$8058$15i0ov
                         '(_ any #(each+ any () any) any . each-any)))))
                   g$t$8052$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$8052$15i0ov
               '(_ any each-any any . each-any)))))
         g$stx$8051$15i0ov))))
   (g$trace-define-macro$7365$15i0ov
     g$trace-define-macro$10804$15i0ov
     (case-lambda
       ((g$stx$8065$15i0ov)
        ((case-lambda
           ((g$t$8066$15i0ov)
            ((case-lambda
               ((g$ls/false$8067$15i0ov)
                (if g$ls/false$8067$15i0ov
                  (apply
                    (case-lambda
                      ((g$who$8068$15i0ov
                         g$fmls$8069$15i0ov
                         g$b$8070$15i0ov
                         g$b*$8071$15i0ov)
                       (if (g$valid-bound-ids?$7122$15i0ov g$fmls$8069$15i0ov)
                         (g$bless$7358$15i0ov
                           (list
                             'define
                             g$who$8068$15i0ov
                             (list
                               'make-traced-procedure
                               (list 'quote g$who$8068$15i0ov)
                               (cons
                                 'lambda
                                 (cons
                                   g$fmls$8069$15i0ov
                                   (cons g$b$8070$15i0ov g$b*$8071$15i0ov))))))
                         (g$invalid-fmls-error$7360$15i0ov
                           g$stx$8065$15i0ov
                           g$fmls$8069$15i0ov))))
                    g$ls/false$8067$15i0ov)
                  ((case-lambda
                     ((g$t$8072$15i0ov)
                      ((case-lambda
                         ((g$ls/false$8073$15i0ov)
                          (if g$ls/false$8073$15i0ov
                            (apply
                              (case-lambda
                                ((g$who$8074$15i0ov
                                   g$fmls$8075$15i0ov
                                   g$last$8076$15i0ov
                                   g$b$8077$15i0ov
                                   g$b*$8078$15i0ov)
                                 (if (g$valid-bound-ids?$7122$15i0ov
                                       (cons
                                         g$last$8076$15i0ov
                                         g$fmls$8075$15i0ov))
                                   (g$bless$7358$15i0ov
                                     (list
                                       'define
                                       g$who$8074$15i0ov
                                       (list
                                         'make-traced-procedure
                                         (list 'quote g$who$8074$15i0ov)
                                         (cons
                                           'lambda
                                           (cons
                                             (append
                                               g$fmls$8075$15i0ov
                                               g$last$8076$15i0ov)
                                             (cons
                                               g$b$8077$15i0ov
                                               g$b*$8078$15i0ov))))))
                                   (g$invalid-fmls-error$7360$15i0ov
                                     g$stx$8065$15i0ov
                                     (append
                                       g$fmls$8075$15i0ov
                                       g$last$8076$15i0ov)))))
                              g$ls/false$8073$15i0ov)
                            ((case-lambda
                               ((g$t$8079$15i0ov)
                                ((case-lambda
                                   ((g$ls/false$8080$15i0ov)
                                    (if g$ls/false$8080$15i0ov
                                      (apply
                                        (case-lambda
                                          ((g$who$8081$15i0ov
                                             g$expr$8082$15i0ov)
                                           (if (g$id?$7117$15i0ov
                                                 g$who$8081$15i0ov)
                                             (g$bless$7358$15i0ov
                                               (list
                                                 'define
                                                 g$who$8081$15i0ov
                                                 (list
                                                   'let
                                                   (list
                                                     (list
                                                       'v
                                                       g$expr$8082$15i0ov))
                                                   (cons
                                                     'if
                                                     (cons
                                                       '(procedure? v)
                                                       (cons
                                                         (cons
                                                           'make-traced-procedure
                                                           (cons
                                                             (list
                                                               'quote
                                                               g$who$8081$15i0ov)
                                                             '(v)))
                                                         '((assertion-violation
                                                             'trace-define
                                                             "not a procedure"
                                                             v))))))))
                                             (g$syntax-violation$7504$15i0ov
                                               '#f
                                               '"invalid name"
                                               g$stx$8065$15i0ov))))
                                        g$ls/false$8080$15i0ov)
                                      (g$syntax-violation$7504$15i0ov
                                        '#f
                                        '"invalid syntax"
                                        g$t$8079$15i0ov))))
                                 (g$syntax-dispatch$7395$15i0ov
                                   g$t$8079$15i0ov
                                   '(_ any any)))))
                             g$t$8072$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$8072$15i0ov
                         '(_ (any . #(each+ any () any)) any . each-any)))))
                   g$t$8066$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$8066$15i0ov
               '(_ (any . each-any) any . each-any)))))
         g$stx$8065$15i0ov))))
   (g$trace-define-syntax-macro$7366$15i0ov
     g$trace-define-syntax-macro$10805$15i0ov
     (case-lambda
       ((g$stx$8083$15i0ov)
        ((case-lambda
           ((g$t$8084$15i0ov)
            ((case-lambda
               ((g$ls/false$8085$15i0ov)
                (if g$ls/false$8085$15i0ov
                  (apply
                    (case-lambda
                      ((g$who$8086$15i0ov g$expr$8087$15i0ov)
                       (if (g$id?$7117$15i0ov g$who$8086$15i0ov)
                         (g$bless$7358$15i0ov
                           (list
                             'define-syntax
                             g$who$8086$15i0ov
                             (list
                               'make-traced-macro
                               (list 'quote g$who$8086$15i0ov)
                               g$expr$8087$15i0ov)))
                         (g$syntax-violation$7504$15i0ov
                           '#f
                           '"invalid name"
                           g$stx$8083$15i0ov))))
                    g$ls/false$8085$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8084$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8084$15i0ov '(_ any any)))))
         g$stx$8083$15i0ov))))
   (g$trace-let/rec-syntax$7367$15i0ov
     g$trace-let/rec-syntax$10806$15i0ov
     (case-lambda
       ((g$who$8088$15i0ov)
        (case-lambda
          ((g$stx$8089$15i0ov)
           ((case-lambda
              ((g$t$8090$15i0ov)
               ((case-lambda
                  ((g$ls/false$8091$15i0ov)
                   (if g$ls/false$8091$15i0ov
                     (apply
                       (case-lambda
                         ((g$lhs*$8092$15i0ov
                            g$rhs*$8093$15i0ov
                            g$b$8094$15i0ov
                            g$b*$8095$15i0ov)
                          (if (g$valid-bound-ids?$7122$15i0ov
                                g$lhs*$8092$15i0ov)
                            ((case-lambda
                               ((g$rhs*$8096$15i0ov)
                                (g$bless$7358$15i0ov
                                  (cons
                                    g$who$8088$15i0ov
                                    (cons
                                      (map list
                                           g$lhs*$8092$15i0ov
                                           g$rhs*$8096$15i0ov)
                                      (cons
                                        g$b$8094$15i0ov
                                        g$b*$8095$15i0ov))))))
                             (map (case-lambda
                                    ((g$lhs$8097$15i0ov g$rhs$8098$15i0ov)
                                     (list
                                       'make-traced-macro
                                       (list 'quote g$lhs$8097$15i0ov)
                                       g$rhs$8098$15i0ov)))
                                  g$lhs*$8092$15i0ov
                                  g$rhs*$8093$15i0ov))
                            (g$invalid-fmls-error$7360$15i0ov
                              g$stx$8089$15i0ov
                              g$lhs*$8092$15i0ov))))
                       g$ls/false$8091$15i0ov)
                     (g$syntax-violation$7504$15i0ov
                       '#f
                       '"invalid syntax"
                       g$t$8090$15i0ov))))
                (g$syntax-dispatch$7395$15i0ov
                  g$t$8090$15i0ov
                  '(_ #(each (any any)) any . each-any)))))
            g$stx$8089$15i0ov))))))
   (g$trace-let-syntax-macro$7368$15i0ov
     g$trace-let-syntax-macro$10807$15i0ov
     (g$trace-let/rec-syntax$7367$15i0ov 'let-syntax))
   (g$trace-letrec-syntax-macro$7369$15i0ov
     g$trace-letrec-syntax-macro$10808$15i0ov
     (g$trace-let/rec-syntax$7367$15i0ov 'letrec-syntax))
   (g$guard-macro$7370$15i0ov
     g$guard-macro$10809$15i0ov
     (case-lambda
       ((g$x$8099$15i0ov)
        (letrec* ((g$gen-clauses$8100$15i0ov
                    (case-lambda
                      ((g$con$8112$15i0ov
                         g$outerk$8113$15i0ov
                         g$clause*$8114$15i0ov)
                       (letrec* ((g$f$8115$15i0ov
                                   (case-lambda
                                     ((g$x$8143$15i0ov g$k$8144$15i0ov)
                                      ((case-lambda
                                         ((g$t$8145$15i0ov)
                                          ((case-lambda
                                             ((g$ls/false$8146$15i0ov)
                                              (if g$ls/false$8146$15i0ov
                                                (apply
                                                  (case-lambda
                                                    ((g$e$8147$15i0ov
                                                       g$p$8148$15i0ov)
                                                     ((case-lambda
                                                        ((g$t$8149$15i0ov)
                                                         (list
                                                           'let
                                                           (list
                                                             (list
                                                               g$t$8149$15i0ov
                                                               g$e$8147$15i0ov))
                                                           (list
                                                             'if
                                                             g$t$8149$15i0ov
                                                             (list
                                                               g$p$8148$15i0ov
                                                               g$t$8149$15i0ov)
                                                             g$k$8144$15i0ov))))
                                                      (gensym))))
                                                  g$ls/false$8146$15i0ov)
                                                ((case-lambda
                                                   ((g$t$8150$15i0ov)
                                                    ((case-lambda
                                                       ((g$ls/false$8151$15i0ov)
                                                        (if g$ls/false$8151$15i0ov
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8152$15i0ov)
                                                               ((case-lambda
                                                                  ((g$t$8153$15i0ov)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         g$t$8153$15i0ov
                                                                         g$e$8152$15i0ov))
                                                                     (list
                                                                       'if
                                                                       g$t$8153$15i0ov
                                                                       g$t$8153$15i0ov
                                                                       g$k$8144$15i0ov))))
                                                                (gensym))))
                                                            g$ls/false$8151$15i0ov)
                                                          ((case-lambda
                                                             ((g$t$8154$15i0ov)
                                                              ((case-lambda
                                                                 ((g$ls/false$8155$15i0ov)
                                                                  (if g$ls/false$8155$15i0ov
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$e$8156$15i0ov
                                                                           g$v$8157$15i0ov
                                                                           g$v*$8158$15i0ov)
                                                                         (list
                                                                           'if
                                                                           g$e$8156$15i0ov
                                                                           (cons
                                                                             'begin
                                                                             (cons
                                                                               g$v$8157$15i0ov
                                                                               g$v*$8158$15i0ov))
                                                                           g$k$8144$15i0ov)))
                                                                      g$ls/false$8155$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$t$8159$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8160$15i0ov)
                                                                            (if g$ls/false$8160$15i0ov
                                                                              (apply
                                                                                (case-lambda
                                                                                  (()
                                                                                   (g$syntax-violation$7504$15i0ov
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$x$8143$15i0ov)))
                                                                                g$ls/false$8160$15i0ov)
                                                                              (g$syntax-violation$7504$15i0ov
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8159$15i0ov))))
                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                           g$t$8159$15i0ov
                                                                           '_))))
                                                                     g$t$8154$15i0ov))))
                                                               (g$syntax-dispatch$7395$15i0ov
                                                                 g$t$8154$15i0ov
                                                                 '(any any
                                                                       .
                                                                       each-any)))))
                                                           g$t$8150$15i0ov))))
                                                     (g$syntax-dispatch$7395$15i0ov
                                                       g$t$8150$15i0ov
                                                       '(any)))))
                                                 g$t$8145$15i0ov))))
                                           (g$syntax-dispatch$7395$15i0ov
                                             g$t$8145$15i0ov
                                             '(any #(scheme-id =>) any)))))
                                       g$x$8143$15i0ov))))
                                 (g$f*$8116$15i0ov
                                   (case-lambda
                                     ((g$x*$8123$15i0ov)
                                      ((case-lambda
                                         ((g$t$8124$15i0ov)
                                          ((case-lambda
                                             ((g$ls/false$8125$15i0ov)
                                              (if g$ls/false$8125$15i0ov
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (values
                                                       (list
                                                         'raise
                                                         g$con$8112$15i0ov)
                                                       '#t)))
                                                  g$ls/false$8125$15i0ov)
                                                ((case-lambda
                                                   ((g$t$8126$15i0ov)
                                                    ((case-lambda
                                                       ((g$ls/false$8127$15i0ov)
                                                        (if g$ls/false$8127$15i0ov
                                                          (apply
                                                            (case-lambda
                                                              ((g$e$8128$15i0ov
                                                                 g$e*$8129$15i0ov)
                                                               (values
                                                                 (cons
                                                                   'begin
                                                                   (cons
                                                                     g$e$8128$15i0ov
                                                                     g$e*$8129$15i0ov))
                                                                 '#f)))
                                                            g$ls/false$8127$15i0ov)
                                                          ((case-lambda
                                                             ((g$t$8130$15i0ov)
                                                              ((case-lambda
                                                                 ((g$ls/false$8131$15i0ov)
                                                                  (if g$ls/false$8131$15i0ov
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$cls$8132$15i0ov
                                                                           g$cls*$8133$15i0ov)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$f*$8116$15i0ov
                                                                                g$cls*$8133$15i0ov)))
                                                                           (case-lambda
                                                                             ((g$e$8136$15i0ov
                                                                                g$g$8137$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$g$8138$15i0ov
                                                                                    g$e$8139$15i0ov)
                                                                                  (values
                                                                                    (g$f$8115$15i0ov
                                                                                      g$cls$8132$15i0ov
                                                                                      g$e$8139$15i0ov)
                                                                                    g$g$8138$15i0ov)))
                                                                               g$g$8137$15i0ov
                                                                               g$e$8136$15i0ov))))))
                                                                      g$ls/false$8131$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$t$8140$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8141$15i0ov)
                                                                            (if g$ls/false$8141$15i0ov
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$others$8142$15i0ov)
                                                                                   (g$syntax-violation$7504$15i0ov
                                                                                     '#f
                                                                                     '"invalid guard clause"
                                                                                     g$others$8142$15i0ov)))
                                                                                g$ls/false$8141$15i0ov)
                                                                              (g$syntax-violation$7504$15i0ov
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8140$15i0ov))))
                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                           g$t$8140$15i0ov
                                                                           'any))))
                                                                     g$t$8130$15i0ov))))
                                                               (g$syntax-dispatch$7395$15i0ov
                                                                 g$t$8130$15i0ov
                                                                 '(any .
                                                                       any)))))
                                                           g$t$8126$15i0ov))))
                                                     (g$syntax-dispatch$7395$15i0ov
                                                       g$t$8126$15i0ov
                                                       '((#(scheme-id else)
                                                          any
                                                          .
                                                          each-any))))))
                                                 g$t$8124$15i0ov))))
                                           (g$syntax-dispatch$7395$15i0ov
                                             g$t$8124$15i0ov
                                             '()))))
                                       g$x*$8123$15i0ov)))))
                         (call-with-values
                           (case-lambda
                             (() (g$f*$8116$15i0ov g$clause*$8114$15i0ov)))
                           (case-lambda
                             ((g$code$8119$15i0ov g$raisek$8120$15i0ov)
                              ((case-lambda
                                 ((g$raisek$8121$15i0ov g$code$8122$15i0ov)
                                  (if g$raisek$8121$15i0ov
                                    (list
                                      g$outerk$8113$15i0ov
                                      g$code$8122$15i0ov)
                                    g$code$8122$15i0ov)))
                               g$raisek$8120$15i0ov
                               g$code$8119$15i0ov)))))))))
          ((case-lambda
             ((g$t$8101$15i0ov)
              ((case-lambda
                 ((g$ls/false$8102$15i0ov)
                  (if (if g$ls/false$8102$15i0ov
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$con$8103$15i0ov
                                 g$clause*$8104$15i0ov
                                 g$b$8105$15i0ov
                                 g$b*$8106$15i0ov)
                               (g$id?$7117$15i0ov g$con$8103$15i0ov)))
                            g$ls/false$8102$15i0ov))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$con$8107$15i0ov
                           g$clause*$8108$15i0ov
                           g$b$8109$15i0ov
                           g$b*$8110$15i0ov)
                         ((case-lambda
                            ((g$outerk$8111$15i0ov)
                             (g$bless$7358$15i0ov
                               (list
                                 (list
                                   'call/cc
                                   (list
                                     'lambda
                                     (list g$outerk$8111$15i0ov)
                                     (list
                                       'lambda
                                       '()
                                       (list
                                         'with-exception-handler
                                         (list
                                           'lambda
                                           (list g$con$8107$15i0ov)
                                           (g$gen-clauses$8100$15i0ov
                                             g$con$8107$15i0ov
                                             g$outerk$8111$15i0ov
                                             g$clause*$8108$15i0ov))
                                         (cons
                                           'lambda
                                           (cons
                                             '()
                                             (cons
                                               '#f
                                               (cons
                                                 g$b$8109$15i0ov
                                                 g$b*$8110$15i0ov))))))))))))
                          (gensym))))
                      g$ls/false$8102$15i0ov)
                    (g$syntax-violation$7504$15i0ov
                      '#f
                      '"invalid syntax"
                      g$t$8101$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov
                 g$t$8101$15i0ov
                 '(_ (any . each-any) any . each-any)))))
           g$x$8099$15i0ov)))))
   (g$define-enumeration-macro$7371$15i0ov
     g$define-enumeration-macro$10810$15i0ov
     (case-lambda
       ((g$stx$8161$15i0ov)
        (letrec* ((g$set?$8162$15i0ov
                    (case-lambda
                      ((g$x$8175$15i0ov)
                       ((case-lambda
                          ((g$t$8176$15i0ov)
                           (if g$t$8176$15i0ov
                             g$t$8176$15i0ov
                             (begin
                               '#f
                               (if (not (memq
                                          (car g$x$8175$15i0ov)
                                          (cdr g$x$8175$15i0ov)))
                                 (begin
                                   '#f
                                   (g$set?$8162$15i0ov (cdr g$x$8175$15i0ov)))
                                 '#f)))))
                        (null? g$x$8175$15i0ov)))))
                  (g$remove-dups$8163$15i0ov
                    (case-lambda
                      ((g$ls$8174$15i0ov)
                       (if (null? g$ls$8174$15i0ov)
                         '()
                         (cons
                           (car g$ls$8174$15i0ov)
                           (g$remove-dups$8163$15i0ov
                             (g$remq$5366$15i0ov
                               (car g$ls$8174$15i0ov)
                               (cdr g$ls$8174$15i0ov)))))))))
          ((case-lambda
             ((g$t$8164$15i0ov)
              ((case-lambda
                 ((g$ls/false$8165$15i0ov)
                  (if (if g$ls/false$8165$15i0ov
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$name$8166$15i0ov
                                 g$id*$8167$15i0ov
                                 g$maker$8168$15i0ov)
                               (if (g$id?$7117$15i0ov g$name$8166$15i0ov)
                                 (if (g$id?$7117$15i0ov g$maker$8168$15i0ov)
                                   (begin
                                     '#f
                                     (g$for-all$5359$15i0ov
                                       g$id?$7117$15i0ov
                                       g$id*$8167$15i0ov))
                                   '#f)
                                 '#f)))
                            g$ls/false$8165$15i0ov))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$name$8169$15i0ov
                           g$id*$8170$15i0ov
                           g$maker$8171$15i0ov)
                         ((case-lambda
                            ((g$name*$8172$15i0ov g$mk$8173$15i0ov)
                             (g$bless$7358$15i0ov
                               (list
                                 'begin
                                 (list
                                   'define
                                   g$mk$8173$15i0ov
                                   (list
                                     'enum-set-constructor
                                     (list
                                       'make-enumeration
                                       (list 'quote g$name*$8172$15i0ov))))
                                 (list
                                   'define-syntax
                                   g$name$8169$15i0ov
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n)
                                         '(identifier? #'n)
                                         (list
                                           'if
                                           (list
                                             'memq
                                             '(syntax->datum #'n)
                                             (list 'quote g$name*$8172$15i0ov))
                                           '#''n
                                           (cons
                                             'syntax-violation
                                             (cons
                                               (list 'quote g$name$8169$15i0ov)
                                               '("not a member of set"
                                                 x
                                                 #'n))))))))
                                 (list
                                   'define-syntax
                                   g$maker$8171$15i0ov
                                   (list
                                     'lambda
                                     '(x)
                                     (list
                                       'syntax-case
                                       'x
                                       '()
                                       (list
                                         '(_ n* ...)
                                         (list
                                           'begin
                                           (cons
                                             'for-each
                                             (cons
                                               (list
                                                 'lambda
                                                 '(n)
                                                 (list
                                                   'unless
                                                   '(identifier? n)
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8171$15i0ov)
                                                       '("non-identifier argument"
                                                         x
                                                         n))))
                                                 (list
                                                   'unless
                                                   (list
                                                     'memq
                                                     '(syntax->datum n)
                                                     (list
                                                       'quote
                                                       g$name*$8172$15i0ov))
                                                   (cons
                                                     'syntax-violation
                                                     (cons
                                                       (list
                                                         'quote
                                                         g$maker$8171$15i0ov)
                                                       '("not a member of set"
                                                         x
                                                         n)))))
                                               '(#'(n* ...))))
                                           (list
                                             'syntax
                                             (cons
                                               g$mk$8173$15i0ov
                                               '('(n* ...)))))))))))))
                          (g$remove-dups$8163$15i0ov
                            (g$syntax->datum$7507$15i0ov g$id*$8170$15i0ov))
                          (gensym))))
                      g$ls/false$8165$15i0ov)
                    (g$syntax-violation$7504$15i0ov
                      '#f
                      '"invalid syntax"
                      g$t$8164$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov
                 g$t$8164$15i0ov
                 '(_ any each-any any)))))
           g$stx$8161$15i0ov)))))
   (g$time-macro$7372$15i0ov
     g$time-macro$10811$15i0ov
     (case-lambda
       ((g$stx$8177$15i0ov)
        ((case-lambda
           ((g$t$8178$15i0ov)
            ((case-lambda
               ((g$ls/false$8179$15i0ov)
                (if g$ls/false$8179$15i0ov
                  (apply
                    (case-lambda
                      ((g$expr$8180$15i0ov)
                       ((case-lambda
                          ((g$str$8181$15i0ov)
                           (g$bless$7358$15i0ov
                             (list
                               'time-it
                               g$str$8181$15i0ov
                               (list 'lambda '() g$expr$8180$15i0ov)))))
                        (call-with-values
                          (case-lambda
                            (() (g$open-string-output-port$6096$15i0ov)))
                          (case-lambda
                            ((g$p$8184$15i0ov g$e$8185$15i0ov)
                             ((case-lambda
                                ((g$e$8186$15i0ov g$p$8187$15i0ov)
                                 (begin
                                   (write
                                     (g$syntax->datum$7507$15i0ov
                                       g$expr$8180$15i0ov)
                                     g$p$8187$15i0ov)
                                   (g$e$8186$15i0ov))))
                              g$e$8185$15i0ov
                              g$p$8184$15i0ov)))))))
                    g$ls/false$8179$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8178$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8178$15i0ov '(_ any)))))
         g$stx$8177$15i0ov))))
   (g$delay-macro$7373$15i0ov
     g$delay-macro$10812$15i0ov
     (case-lambda
       ((g$stx$8188$15i0ov)
        ((case-lambda
           ((g$t$8189$15i0ov)
            ((case-lambda
               ((g$ls/false$8190$15i0ov)
                (if g$ls/false$8190$15i0ov
                  (apply
                    (case-lambda
                      ((g$expr$8191$15i0ov)
                       (g$bless$7358$15i0ov
                         (list
                           'make-promise
                           (list 'lambda '() g$expr$8191$15i0ov)))))
                    g$ls/false$8190$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8189$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8189$15i0ov '(_ any)))))
         g$stx$8188$15i0ov))))
   (g$assert-macro$7374$15i0ov
     g$assert-macro$10813$15i0ov
     (case-lambda
       ((g$stx$8192$15i0ov)
        ((case-lambda
           ((g$t$8193$15i0ov)
            ((case-lambda
               ((g$ls/false$8194$15i0ov)
                (if g$ls/false$8194$15i0ov
                  (apply
                    (case-lambda
                      ((g$expr$8195$15i0ov)
                       ((case-lambda
                          ((g$pos$8196$15i0ov)
                           (g$bless$7358$15i0ov
                             (list
                               'unless
                               g$expr$8195$15i0ov
                               (list
                                 'assertion-error
                                 (list 'quote g$expr$8195$15i0ov)
                                 (list 'quote g$pos$8196$15i0ov))))))
                        ((case-lambda
                           ((g$t$8197$15i0ov)
                            (if g$t$8197$15i0ov
                              g$t$8197$15i0ov
                              (begin
                                '#f
                                (g$expression-position$7499$15i0ov
                                  g$expr$8195$15i0ov)))))
                         (g$expression-position$7499$15i0ov
                           g$stx$8192$15i0ov)))))
                    g$ls/false$8194$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8193$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8193$15i0ov '(_ any)))))
         g$stx$8192$15i0ov))))
   (g$endianness-macro$7375$15i0ov
     g$endianness-macro$10814$15i0ov
     (case-lambda
       ((g$stx$8198$15i0ov)
        ((case-lambda
           ((g$t$8199$15i0ov)
            ((case-lambda
               ((g$ls/false$8200$15i0ov)
                (if g$ls/false$8200$15i0ov
                  (apply
                    (case-lambda
                      ((g$e$8201$15i0ov)
                       ((case-lambda
                          ((g$t$8202$15i0ov)
                           (if (memv g$t$8202$15i0ov '(little))
                             (g$bless$7358$15i0ov ''little)
                             (if (memv g$t$8202$15i0ov '(big))
                               (g$bless$7358$15i0ov ''big)
                               (g$syntax-violation$7504$15i0ov
                                 '#f
                                 '"endianness must be big or little"
                                 g$stx$8198$15i0ov)))))
                        (g$syntax->datum$7507$15i0ov g$e$8201$15i0ov))))
                    g$ls/false$8200$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8199$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8199$15i0ov '(_ any)))))
         g$stx$8198$15i0ov))))
   (g$identifier-syntax-macro$7376$15i0ov
     g$identifier-syntax-macro$10815$15i0ov
     (case-lambda
       ((g$stx$8203$15i0ov)
        ((case-lambda
           ((g$t$8204$15i0ov)
            ((case-lambda
               ((g$ls/false$8205$15i0ov)
                (if g$ls/false$8205$15i0ov
                  (apply
                    (case-lambda
                      ((g$expr$8206$15i0ov)
                       (g$bless$7358$15i0ov
                         (list
                           'lambda
                           '(x)
                           (list
                             'syntax-case
                             'x
                             '()
                             (list
                               'id
                               '(identifier? #'id)
                               (list 'syntax g$expr$8206$15i0ov))
                             (list
                               '(id e* ...)
                               '(identifier? #'id)
                               (cons
                                 'cons
                                 (cons
                                   (list 'syntax g$expr$8206$15i0ov)
                                   '(#'(e* ...))))))))))
                    g$ls/false$8205$15i0ov)
                  ((case-lambda
                     ((g$t$8207$15i0ov)
                      ((case-lambda
                         ((g$ls/false$8208$15i0ov)
                          (if (if g$ls/false$8208$15i0ov
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$id1$8209$15i0ov
                                         g$expr1$8210$15i0ov
                                         g$id2$8211$15i0ov
                                         g$expr2$8212$15i0ov
                                         g$expr3$8213$15i0ov)
                                       (if (g$id?$7117$15i0ov g$id1$8209$15i0ov)
                                         (if (g$id?$7117$15i0ov
                                               g$id2$8211$15i0ov)
                                           (begin
                                             '#f
                                             (g$id?$7117$15i0ov
                                               g$expr2$8212$15i0ov))
                                           '#f)
                                         '#f)))
                                    g$ls/false$8208$15i0ov))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$id1$8214$15i0ov
                                   g$expr1$8215$15i0ov
                                   g$id2$8216$15i0ov
                                   g$expr2$8217$15i0ov
                                   g$expr3$8218$15i0ov)
                                 (g$bless$7358$15i0ov
                                   (list
                                     'cons
                                     ''macro!
                                     (list
                                       'lambda
                                       '(x)
                                       (list
                                         'syntax-case
                                         'x
                                         '(set!)
                                         (list
                                           'id
                                           '(identifier? #'id)
                                           (list 'syntax g$expr1$8215$15i0ov))
                                         (list
                                           (list 'set! 'id g$expr2$8217$15i0ov)
                                           (list 'syntax g$expr3$8218$15i0ov))
                                         (list
                                           '(id e* ...)
                                           '(identifier? #'id)
                                           (list
                                             'syntax
                                             (cons
                                               g$expr1$8215$15i0ov
                                               '(e* ...))))))))))
                              g$ls/false$8208$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$8207$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$8207$15i0ov
                         '(_ (any any) ((#(scheme-id set!) any any) any))))))
                   g$t$8204$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8204$15i0ov '(_ any)))))
         g$stx$8203$15i0ov))))
   (g$do-macro$7377$15i0ov
     g$do-macro$10816$15i0ov
     (case-lambda
       ((g$stx$8219$15i0ov)
        (letrec* ((g$bind$8220$15i0ov
                    (case-lambda
                      ((g$x$8232$15i0ov)
                       ((case-lambda
                          ((g$t$8233$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8234$15i0ov)
                               (if g$ls/false$8234$15i0ov
                                 (apply
                                   (case-lambda
                                     ((g$x$8235$15i0ov g$init$8236$15i0ov)
                                      (list
                                        g$x$8235$15i0ov
                                        g$init$8236$15i0ov
                                        g$x$8235$15i0ov)))
                                   g$ls/false$8234$15i0ov)
                                 ((case-lambda
                                    ((g$t$8237$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8238$15i0ov)
                                         (if g$ls/false$8238$15i0ov
                                           (apply
                                             (case-lambda
                                               ((g$x$8239$15i0ov
                                                  g$init$8240$15i0ov
                                                  g$step$8241$15i0ov)
                                                (list
                                                  g$x$8239$15i0ov
                                                  g$init$8240$15i0ov
                                                  g$step$8241$15i0ov)))
                                             g$ls/false$8238$15i0ov)
                                           ((case-lambda
                                              ((g$t$8242$15i0ov)
                                               ((case-lambda
                                                  ((g$ls/false$8243$15i0ov)
                                                   (if g$ls/false$8243$15i0ov
                                                     (apply
                                                       (case-lambda
                                                         (()
                                                          (g$syntax-violation$7504$15i0ov
                                                            '#f
                                                            '"invalid binding"
                                                            g$stx$8219$15i0ov)))
                                                       g$ls/false$8243$15i0ov)
                                                     (g$syntax-violation$7504$15i0ov
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8242$15i0ov))))
                                                (g$syntax-dispatch$7395$15i0ov
                                                  g$t$8242$15i0ov
                                                  '_))))
                                            g$t$8237$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8237$15i0ov
                                        '(any any any)))))
                                  g$t$8233$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8233$15i0ov
                              '(any any)))))
                        g$x$8232$15i0ov)))))
          ((case-lambda
             ((g$t$8221$15i0ov)
              ((case-lambda
                 ((g$ls/false$8222$15i0ov)
                  (if g$ls/false$8222$15i0ov
                    (apply
                      (case-lambda
                        ((g$binding*$8223$15i0ov
                           g$test$8224$15i0ov
                           g$expr*$8225$15i0ov
                           g$command*$8226$15i0ov)
                         ((case-lambda
                            ((g$t$8227$15i0ov)
                             ((case-lambda
                                ((g$ls/false$8228$15i0ov)
                                 (if g$ls/false$8228$15i0ov
                                   (apply
                                     (case-lambda
                                       ((g$x*$8229$15i0ov
                                          g$init*$8230$15i0ov
                                          g$step*$8231$15i0ov)
                                        (if (g$valid-bound-ids?$7122$15i0ov
                                              g$x*$8229$15i0ov)
                                          (g$bless$7358$15i0ov
                                            (list
                                              'letrec
                                              (list
                                                (list
                                                  'loop
                                                  (list
                                                    'lambda
                                                    g$x*$8229$15i0ov
                                                    (list
                                                      'if
                                                      g$test$8224$15i0ov
                                                      (cons
                                                        'begin
                                                        (cons
                                                          '(if #f #f)
                                                          g$expr*$8225$15i0ov))
                                                      (cons
                                                        'begin
                                                        (append
                                                          g$command*$8226$15i0ov
                                                          (list
                                                            (cons
                                                              'loop
                                                              g$step*$8231$15i0ov))))))))
                                              (cons 'loop g$init*$8230$15i0ov)))
                                          (g$syntax-violation$7504$15i0ov
                                            '#f
                                            '"invalid bindings"
                                            g$stx$8219$15i0ov))))
                                     g$ls/false$8228$15i0ov)
                                   (g$syntax-violation$7504$15i0ov
                                     '#f
                                     '"invalid syntax"
                                     g$t$8227$15i0ov))))
                              (g$syntax-dispatch$7395$15i0ov
                                g$t$8227$15i0ov
                                '#(each (any any any))))))
                          (map g$bind$8220$15i0ov g$binding*$8223$15i0ov))))
                      g$ls/false$8222$15i0ov)
                    (g$syntax-violation$7504$15i0ov
                      '#f
                      '"invalid syntax"
                      g$t$8221$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov
                 g$t$8221$15i0ov
                 '(_ each-any (any . each-any) . each-any)))))
           g$stx$8219$15i0ov)))))
   (g$let*-macro$7378$15i0ov
     g$let*-macro$10817$15i0ov
     (case-lambda
       ((g$stx$8244$15i0ov)
        ((case-lambda
           ((g$t$8245$15i0ov)
            ((case-lambda
               ((g$ls/false$8246$15i0ov)
                (if (if g$ls/false$8246$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$lhs*$8247$15i0ov
                               g$rhs*$8248$15i0ov
                               g$b$8249$15i0ov
                               g$b*$8250$15i0ov)
                             (g$for-all$5359$15i0ov
                               g$id?$7117$15i0ov
                               g$lhs*$8247$15i0ov)))
                          g$ls/false$8246$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$lhs*$8251$15i0ov
                         g$rhs*$8252$15i0ov
                         g$b$8253$15i0ov
                         g$b*$8254$15i0ov)
                       (g$bless$7358$15i0ov
                         ((letrec ((g$f$8255$15i0ov
                                     (case-lambda
                                       ((g$x*$8256$15i0ov)
                                        (if (null? g$x*$8256$15i0ov)
                                          (cons
                                            'let
                                            (cons
                                              '()
                                              (cons
                                                g$b$8253$15i0ov
                                                g$b*$8254$15i0ov)))
                                          (list
                                            'let
                                            (list (car g$x*$8256$15i0ov))
                                            (g$f$8255$15i0ov
                                              (cdr g$x*$8256$15i0ov))))))))
                            g$f$8255$15i0ov)
                          (map list g$lhs*$8251$15i0ov g$rhs*$8252$15i0ov)))))
                    g$ls/false$8246$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8245$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$8245$15i0ov
               '(_ #(each (any any)) any . each-any)))))
         g$stx$8244$15i0ov))))
   (g$or-macro$7379$15i0ov
     g$or-macro$10818$15i0ov
     (case-lambda
       ((g$stx$8257$15i0ov)
        ((case-lambda
           ((g$t$8258$15i0ov)
            ((case-lambda
               ((g$ls/false$8259$15i0ov)
                (if g$ls/false$8259$15i0ov
                  (apply (case-lambda (() '#f)) g$ls/false$8259$15i0ov)
                  ((case-lambda
                     ((g$t$8260$15i0ov)
                      ((case-lambda
                         ((g$ls/false$8261$15i0ov)
                          (if g$ls/false$8261$15i0ov
                            (apply
                              (case-lambda
                                ((g$e$8262$15i0ov g$e*$8263$15i0ov)
                                 (g$bless$7358$15i0ov
                                   ((letrec ((g$f$8264$15i0ov
                                               (case-lambda
                                                 ((g$e$8265$15i0ov
                                                    g$e*$8266$15i0ov)
                                                  (if (null? g$e*$8266$15i0ov)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8265$15i0ov)
                                                    (list
                                                      'let
                                                      (list
                                                        (list
                                                          't
                                                          g$e$8265$15i0ov))
                                                      (list
                                                        'if
                                                        't
                                                        't
                                                        (g$f$8264$15i0ov
                                                          (car g$e*$8266$15i0ov)
                                                          (cdr g$e*$8266$15i0ov)))))))))
                                      g$f$8264$15i0ov)
                                    g$e$8262$15i0ov
                                    g$e*$8263$15i0ov))))
                              g$ls/false$8261$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$8260$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$8260$15i0ov
                         '(_ any . each-any)))))
                   g$t$8258$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8258$15i0ov '(_)))))
         g$stx$8257$15i0ov))))
   (g$and-macro$7380$15i0ov
     g$and-macro$10819$15i0ov
     (case-lambda
       ((g$stx$8267$15i0ov)
        ((case-lambda
           ((g$t$8268$15i0ov)
            ((case-lambda
               ((g$ls/false$8269$15i0ov)
                (if g$ls/false$8269$15i0ov
                  (apply (case-lambda (() '#t)) g$ls/false$8269$15i0ov)
                  ((case-lambda
                     ((g$t$8270$15i0ov)
                      ((case-lambda
                         ((g$ls/false$8271$15i0ov)
                          (if g$ls/false$8271$15i0ov
                            (apply
                              (case-lambda
                                ((g$e$8272$15i0ov g$e*$8273$15i0ov)
                                 (g$bless$7358$15i0ov
                                   ((letrec ((g$f$8274$15i0ov
                                               (case-lambda
                                                 ((g$e$8275$15i0ov
                                                    g$e*$8276$15i0ov)
                                                  (if (null? g$e*$8276$15i0ov)
                                                    (list
                                                      'begin
                                                      '#f
                                                      g$e$8275$15i0ov)
                                                    (cons
                                                      'if
                                                      (cons
                                                        g$e$8275$15i0ov
                                                        (cons
                                                          (g$f$8274$15i0ov
                                                            (car g$e*$8276$15i0ov)
                                                            (cdr g$e*$8276$15i0ov))
                                                          '(#f)))))))))
                                      g$f$8274$15i0ov)
                                    g$e$8272$15i0ov
                                    g$e*$8273$15i0ov))))
                              g$ls/false$8271$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$8270$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$8270$15i0ov
                         '(_ any . each-any)))))
                   g$t$8268$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8268$15i0ov '(_)))))
         g$stx$8267$15i0ov))))
   (g$cond-macro$7381$15i0ov
     g$cond-macro$10820$15i0ov
     (case-lambda
       ((g$stx$8277$15i0ov)
        ((case-lambda
           ((g$t$8278$15i0ov)
            ((case-lambda
               ((g$ls/false$8279$15i0ov)
                (if g$ls/false$8279$15i0ov
                  (apply
                    (case-lambda
                      ((g$cls$8280$15i0ov g$cls*$8281$15i0ov)
                       (g$bless$7358$15i0ov
                         ((letrec ((g$f$8282$15i0ov
                                     (case-lambda
                                       ((g$cls$8283$15i0ov g$cls*$8284$15i0ov)
                                        (if (null? g$cls*$8284$15i0ov)
                                          ((case-lambda
                                             ((g$t$8285$15i0ov)
                                              ((case-lambda
                                                 ((g$ls/false$8286$15i0ov)
                                                  (if g$ls/false$8286$15i0ov
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8287$15i0ov
                                                           g$e*$8288$15i0ov)
                                                         (cons
                                                           'begin
                                                           (cons
                                                             g$e$8287$15i0ov
                                                             g$e*$8288$15i0ov))))
                                                      g$ls/false$8286$15i0ov)
                                                    ((case-lambda
                                                       ((g$t$8289$15i0ov)
                                                        ((case-lambda
                                                           ((g$ls/false$8290$15i0ov)
                                                            (if g$ls/false$8290$15i0ov
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8291$15i0ov
                                                                     g$p$8292$15i0ov)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8291$15i0ov))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8292$15i0ov
                                                                         '(t))))))
                                                                g$ls/false$8290$15i0ov)
                                                              ((case-lambda
                                                                 ((g$t$8293$15i0ov)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8294$15i0ov)
                                                                      (if g$ls/false$8294$15i0ov
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8295$15i0ov)
                                                                             (cons
                                                                               'or
                                                                               (cons
                                                                                 g$e$8295$15i0ov
                                                                                 '((if #f
                                                                                     #f))))))
                                                                          g$ls/false$8294$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$t$8296$15i0ov)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8297$15i0ov)
                                                                                (if g$ls/false$8297$15i0ov
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8298$15i0ov
                                                                                         g$e*$8299$15i0ov)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8298$15i0ov
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8299$15i0ov))))
                                                                                    g$ls/false$8297$15i0ov)
                                                                                  ((case-lambda
                                                                                     ((g$t$8300$15i0ov)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8301$15i0ov)
                                                                                          (if g$ls/false$8301$15i0ov
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7504$15i0ov
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8277$15i0ov)))
                                                                                              g$ls/false$8301$15i0ov)
                                                                                            (g$syntax-violation$7504$15i0ov
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8300$15i0ov))))
                                                                                       (g$syntax-dispatch$7395$15i0ov
                                                                                         g$t$8300$15i0ov
                                                                                         '_))))
                                                                                   g$t$8296$15i0ov))))
                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                               g$t$8296$15i0ov
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8293$15i0ov))))
                                                                   (g$syntax-dispatch$7395$15i0ov
                                                                     g$t$8293$15i0ov
                                                                     '(any)))))
                                                               g$t$8289$15i0ov))))
                                                         (g$syntax-dispatch$7395$15i0ov
                                                           g$t$8289$15i0ov
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8285$15i0ov))))
                                               (g$syntax-dispatch$7395$15i0ov
                                                 g$t$8285$15i0ov
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8283$15i0ov)
                                          ((case-lambda
                                             ((g$t$8302$15i0ov)
                                              ((case-lambda
                                                 ((g$ls/false$8303$15i0ov)
                                                  (if g$ls/false$8303$15i0ov
                                                    (apply
                                                      (case-lambda
                                                        ((g$e$8304$15i0ov
                                                           g$e*$8305$15i0ov)
                                                         (g$syntax-violation$7504$15i0ov
                                                           '#f
                                                           '"incorrect position of keyword else"
                                                           g$stx$8277$15i0ov)))
                                                      g$ls/false$8303$15i0ov)
                                                    ((case-lambda
                                                       ((g$t$8306$15i0ov)
                                                        ((case-lambda
                                                           ((g$ls/false$8307$15i0ov)
                                                            (if g$ls/false$8307$15i0ov
                                                              (apply
                                                                (case-lambda
                                                                  ((g$e$8308$15i0ov
                                                                     g$p$8309$15i0ov)
                                                                   (list
                                                                     'let
                                                                     (list
                                                                       (list
                                                                         't
                                                                         g$e$8308$15i0ov))
                                                                     (list
                                                                       'if
                                                                       't
                                                                       (cons
                                                                         g$p$8309$15i0ov
                                                                         '(t))
                                                                       (g$f$8282$15i0ov
                                                                         (car g$cls*$8284$15i0ov)
                                                                         (cdr g$cls*$8284$15i0ov))))))
                                                                g$ls/false$8307$15i0ov)
                                                              ((case-lambda
                                                                 ((g$t$8310$15i0ov)
                                                                  ((case-lambda
                                                                     ((g$ls/false$8311$15i0ov)
                                                                      (if g$ls/false$8311$15i0ov
                                                                        (apply
                                                                          (case-lambda
                                                                            ((g$e$8312$15i0ov)
                                                                             (list
                                                                               'or
                                                                               g$e$8312$15i0ov
                                                                               (g$f$8282$15i0ov
                                                                                 (car g$cls*$8284$15i0ov)
                                                                                 (cdr g$cls*$8284$15i0ov)))))
                                                                          g$ls/false$8311$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$t$8313$15i0ov)
                                                                            ((case-lambda
                                                                               ((g$ls/false$8314$15i0ov)
                                                                                (if g$ls/false$8314$15i0ov
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$e$8315$15i0ov
                                                                                         g$e*$8316$15i0ov)
                                                                                       (list
                                                                                         'if
                                                                                         g$e$8315$15i0ov
                                                                                         (cons
                                                                                           'begin
                                                                                           g$e*$8316$15i0ov)
                                                                                         (g$f$8282$15i0ov
                                                                                           (car g$cls*$8284$15i0ov)
                                                                                           (cdr g$cls*$8284$15i0ov)))))
                                                                                    g$ls/false$8314$15i0ov)
                                                                                  ((case-lambda
                                                                                     ((g$t$8317$15i0ov)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$8318$15i0ov)
                                                                                          (if g$ls/false$8318$15i0ov
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7504$15i0ov
                                                                                                   '#f
                                                                                                   '"invalid last clause"
                                                                                                   g$stx$8277$15i0ov)))
                                                                                              g$ls/false$8318$15i0ov)
                                                                                            (g$syntax-violation$7504$15i0ov
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$8317$15i0ov))))
                                                                                       (g$syntax-dispatch$7395$15i0ov
                                                                                         g$t$8317$15i0ov
                                                                                         '_))))
                                                                                   g$t$8313$15i0ov))))
                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                               g$t$8313$15i0ov
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$t$8310$15i0ov))))
                                                                   (g$syntax-dispatch$7395$15i0ov
                                                                     g$t$8310$15i0ov
                                                                     '(any)))))
                                                               g$t$8306$15i0ov))))
                                                         (g$syntax-dispatch$7395$15i0ov
                                                           g$t$8306$15i0ov
                                                           '(any #(scheme-id =>)
                                                                 any)))))
                                                     g$t$8302$15i0ov))))
                                               (g$syntax-dispatch$7395$15i0ov
                                                 g$t$8302$15i0ov
                                                 '(#(scheme-id else)
                                                   any
                                                   .
                                                   each-any)))))
                                           g$cls$8283$15i0ov))))))
                            g$f$8282$15i0ov)
                          g$cls$8280$15i0ov
                          g$cls*$8281$15i0ov))))
                    g$ls/false$8279$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8278$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$8278$15i0ov
               '(_ any . each-any)))))
         g$stx$8277$15i0ov))))
   (g$do-include$7382$15i0ov
     g$do-include$10821$15i0ov
     (case-lambda
       ((g$stx$8319$15i0ov g$id$8320$15i0ov g$filename$8321$15i0ov)
        ((case-lambda
           ((g$filename$8322$15i0ov)
            (begin
              (if (not (if (string? g$filename$8322$15i0ov)
                         (begin '#f (g$id?$7117$15i0ov g$id$8320$15i0ov))
                         '#f))
                (g$syntax-violation$7504$15i0ov
                  '#f
                  '"invalid syntax"
                  g$stx$8319$15i0ov)
                (void))
              (cons
                (g$bless$7358$15i0ov 'begin)
                (g$with-input-from-file$6130$15i0ov
                  g$filename$8322$15i0ov
                  (case-lambda
                    (()
                     ((letrec ((g$f$8323$15i0ov
                                 (case-lambda
                                   ((g$ls$8324$15i0ov)
                                    ((case-lambda
                                       ((g$x$8325$15i0ov)
                                        (if (eof-object? g$x$8325$15i0ov)
                                          (reverse g$ls$8324$15i0ov)
                                          (g$f$8323$15i0ov
                                            (cons
                                              (g$datum->stx$7100$15i0ov
                                                g$id$8320$15i0ov
                                                g$x$8325$15i0ov)
                                              g$ls$8324$15i0ov)))))
                                     (read-annotated))))))
                        g$f$8323$15i0ov)
                      '()))))))))
         (g$stx->datum$7128$15i0ov g$filename$8321$15i0ov)))))
   (g$include-macro$7383$15i0ov
     g$include-macro$10822$15i0ov
     (case-lambda
       ((g$e$8326$15i0ov)
        ((case-lambda
           ((g$t$8327$15i0ov)
            ((case-lambda
               ((g$ls/false$8328$15i0ov)
                (if g$ls/false$8328$15i0ov
                  (apply
                    (case-lambda
                      ((g$id$8329$15i0ov g$filename$8330$15i0ov)
                       (g$do-include$7382$15i0ov
                         g$e$8326$15i0ov
                         g$id$8329$15i0ov
                         g$filename$8330$15i0ov)))
                    g$ls/false$8328$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8327$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8327$15i0ov '(any any)))))
         g$e$8326$15i0ov))))
   (g$include-into-macro$7384$15i0ov
     g$include-into-macro$10823$15i0ov
     (case-lambda
       ((g$e$8331$15i0ov)
        ((case-lambda
           ((g$t$8332$15i0ov)
            ((case-lambda
               ((g$ls/false$8333$15i0ov)
                (if g$ls/false$8333$15i0ov
                  (apply
                    (case-lambda
                      ((g$id$8334$15i0ov g$filename$8335$15i0ov)
                       (g$do-include$7382$15i0ov
                         g$e$8331$15i0ov
                         g$id$8334$15i0ov
                         g$filename$8335$15i0ov)))
                    g$ls/false$8333$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8332$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$8332$15i0ov '(_ any any)))))
         g$e$8331$15i0ov))))
   (g$syntax-rules-macro$7385$15i0ov
     g$syntax-rules-macro$10824$15i0ov
     (case-lambda
       ((g$e$8336$15i0ov)
        ((case-lambda
           ((g$t$8337$15i0ov)
            ((case-lambda
               ((g$ls/false$8338$15i0ov)
                (if g$ls/false$8338$15i0ov
                  (apply
                    (case-lambda
                      ((g$lits$8339$15i0ov
                         g$pat*$8340$15i0ov
                         g$tmp*$8341$15i0ov)
                       (begin
                         (g$verify-literals$7398$15i0ov
                           g$lits$8339$15i0ov
                           g$e$8336$15i0ov)
                         (g$bless$7358$15i0ov
                           (list
                             'lambda
                             '(x)
                             (cons
                               'syntax-case
                               (cons
                                 'x
                                 (cons
                                   g$lits$8339$15i0ov
                                   (map (case-lambda
                                          ((g$pat$8342$15i0ov g$tmp$8343$15i0ov)
                                           ((case-lambda
                                              ((g$t$8344$15i0ov)
                                               ((case-lambda
                                                  ((g$ls/false$8345$15i0ov)
                                                   (if g$ls/false$8345$15i0ov
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8346$15i0ov)
                                                          (list
                                                            (cons
                                                              'g
                                                              g$rest$8346$15i0ov)
                                                            (list
                                                              'syntax
                                                              g$tmp$8343$15i0ov))))
                                                       g$ls/false$8345$15i0ov)
                                                     ((case-lambda
                                                        ((g$t$8347$15i0ov)
                                                         ((case-lambda
                                                            ((g$ls/false$8348$15i0ov)
                                                             (if g$ls/false$8348$15i0ov
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7504$15i0ov
                                                                      '#f
                                                                      '"invalid syntax-rules pattern"
                                                                      g$e$8336$15i0ov
                                                                      g$pat$8342$15i0ov)))
                                                                 g$ls/false$8348$15i0ov)
                                                               (g$syntax-violation$7504$15i0ov
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$8347$15i0ov))))
                                                          (g$syntax-dispatch$7395$15i0ov
                                                            g$t$8347$15i0ov
                                                            '_))))
                                                      g$t$8344$15i0ov))))
                                                (g$syntax-dispatch$7395$15i0ov
                                                  g$t$8344$15i0ov
                                                  '(_ . any)))))
                                            g$pat$8342$15i0ov)))
                                        g$pat*$8340$15i0ov
                                        g$tmp*$8341$15i0ov)))))))))
                    g$ls/false$8338$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8337$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$8337$15i0ov
               '(_ each-any . #(each (any any)))))))
         g$e$8336$15i0ov))))
   (g$quasiquote-macro$7386$15i0ov
     g$quasiquote-macro$10825$15i0ov
     ((case-lambda
        (()
         (letrec* ((g$datum$8349$15i0ov
                     (case-lambda
                       ((g$x$8480$15i0ov)
                        (list
                          (g$scheme-stx$7338$15i0ov 'quote)
                          (g$mkstx$7105$15i0ov g$x$8480$15i0ov '() '() '())))))
                   (g$quasicons*$8365$15i0ov
                     (case-lambda
                       ((g$x$8476$15i0ov g$y$8477$15i0ov)
                        ((letrec ((g$f$8478$15i0ov
                                    (case-lambda
                                      ((g$x$8479$15i0ov)
                                       (if (null? g$x$8479$15i0ov)
                                         g$y$8477$15i0ov
                                         (g$quasicons$8366$15i0ov
                                           (car g$x$8479$15i0ov)
                                           (g$f$8478$15i0ov
                                             (cdr g$x$8479$15i0ov))))))))
                           g$f$8478$15i0ov)
                         g$x$8476$15i0ov))))
                   (g$quasicons$8366$15i0ov
                     (case-lambda
                       ((g$x$8457$15i0ov g$y$8458$15i0ov)
                        ((case-lambda
                           ((g$t$8459$15i0ov)
                            ((case-lambda
                               ((g$ls/false$8460$15i0ov)
                                (if g$ls/false$8460$15i0ov
                                  (apply
                                    (case-lambda
                                      ((g$dy$8461$15i0ov)
                                       ((case-lambda
                                          ((g$t$8462$15i0ov)
                                           ((case-lambda
                                              ((g$ls/false$8463$15i0ov)
                                               (if g$ls/false$8463$15i0ov
                                                 (apply
                                                   (case-lambda
                                                     ((g$dx$8464$15i0ov)
                                                      (list
                                                        (g$scheme-stx$7338$15i0ov
                                                          'quote)
                                                        (cons
                                                          g$dx$8464$15i0ov
                                                          g$dy$8461$15i0ov))))
                                                   g$ls/false$8463$15i0ov)
                                                 ((case-lambda
                                                    ((g$t$8465$15i0ov)
                                                     ((case-lambda
                                                        ((g$ls/false$8466$15i0ov)
                                                         (if g$ls/false$8466$15i0ov
                                                           (apply
                                                             (case-lambda
                                                               (()
                                                                ((case-lambda
                                                                   ((g$t$8467$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8468$15i0ov)
                                                                        (if g$ls/false$8468$15i0ov
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (list
                                                                                 (g$scheme-stx$7338$15i0ov
                                                                                   'list)
                                                                                 g$x$8457$15i0ov)))
                                                                            g$ls/false$8468$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$t$8469$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8470$15i0ov)
                                                                                  (if g$ls/false$8470$15i0ov
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        (()
                                                                                         (list
                                                                                           (g$scheme-stx$7338$15i0ov
                                                                                             'cons)
                                                                                           g$x$8457$15i0ov
                                                                                           g$y$8458$15i0ov)))
                                                                                      g$ls/false$8470$15i0ov)
                                                                                    (g$syntax-violation$7504$15i0ov
                                                                                      '#f
                                                                                      '"invalid syntax"
                                                                                      g$t$8469$15i0ov))))
                                                                               (g$syntax-dispatch$7395$15i0ov
                                                                                 g$t$8469$15i0ov
                                                                                 '_))))
                                                                           g$t$8467$15i0ov))))
                                                                     (g$syntax-dispatch$7395$15i0ov
                                                                       g$t$8467$15i0ov
                                                                       '()))))
                                                                 g$dy$8461$15i0ov)))
                                                             g$ls/false$8466$15i0ov)
                                                           (g$syntax-violation$7504$15i0ov
                                                             '#f
                                                             '"invalid syntax"
                                                             g$t$8465$15i0ov))))
                                                      (g$syntax-dispatch$7395$15i0ov
                                                        g$t$8465$15i0ov
                                                        '_))))
                                                  g$t$8462$15i0ov))))
                                            (g$syntax-dispatch$7395$15i0ov
                                              g$t$8462$15i0ov
                                              '(#(scheme-id quote) any)))))
                                        g$x$8457$15i0ov)))
                                    g$ls/false$8460$15i0ov)
                                  ((case-lambda
                                     ((g$t$8471$15i0ov)
                                      ((case-lambda
                                         ((g$ls/false$8472$15i0ov)
                                          (if g$ls/false$8472$15i0ov
                                            (apply
                                              (case-lambda
                                                ((g$stuff$8473$15i0ov)
                                                 (g$cons*$5361$15i0ov
                                                   (g$scheme-stx$7338$15i0ov
                                                     'list)
                                                   g$x$8457$15i0ov
                                                   g$stuff$8473$15i0ov)))
                                              g$ls/false$8472$15i0ov)
                                            ((case-lambda
                                               ((g$t$8474$15i0ov)
                                                ((case-lambda
                                                   ((g$ls/false$8475$15i0ov)
                                                    (if g$ls/false$8475$15i0ov
                                                      (apply
                                                        (case-lambda
                                                          (()
                                                           (list
                                                             (g$scheme-stx$7338$15i0ov
                                                               'cons)
                                                             g$x$8457$15i0ov
                                                             g$y$8458$15i0ov)))
                                                        g$ls/false$8475$15i0ov)
                                                      (g$syntax-violation$7504$15i0ov
                                                        '#f
                                                        '"invalid syntax"
                                                        g$t$8474$15i0ov))))
                                                 (g$syntax-dispatch$7395$15i0ov
                                                   g$t$8474$15i0ov
                                                   '_))))
                                             g$t$8471$15i0ov))))
                                       (g$syntax-dispatch$7395$15i0ov
                                         g$t$8471$15i0ov
                                         '(#(scheme-id list) . each-any)))))
                                   g$t$8459$15i0ov))))
                             (g$syntax-dispatch$7395$15i0ov
                               g$t$8459$15i0ov
                               '(#(scheme-id quote) any)))))
                         g$y$8458$15i0ov))))
                   (g$quasiappend$8367$15i0ov
                     (case-lambda
                       ((g$x$8444$15i0ov g$y$8445$15i0ov)
                        ((case-lambda
                           ((g$ls$8446$15i0ov)
                            (if (null? g$ls$8446$15i0ov)
                              (list (g$scheme-stx$7338$15i0ov 'quote) '())
                              (if (null? (cdr g$ls$8446$15i0ov))
                                (car g$ls$8446$15i0ov)
                                (g$cons*$5361$15i0ov
                                  (g$scheme-stx$7338$15i0ov 'append)
                                  g$ls$8446$15i0ov)))))
                         ((letrec ((g$f$8447$15i0ov
                                     (case-lambda
                                       ((g$x$8448$15i0ov)
                                        (if (null? g$x$8448$15i0ov)
                                          ((case-lambda
                                             ((g$t$8449$15i0ov)
                                              ((case-lambda
                                                 ((g$ls/false$8450$15i0ov)
                                                  (if g$ls/false$8450$15i0ov
                                                    (apply
                                                      (case-lambda (() '()))
                                                      g$ls/false$8450$15i0ov)
                                                    ((case-lambda
                                                       ((g$t$8451$15i0ov)
                                                        ((case-lambda
                                                           ((g$ls/false$8452$15i0ov)
                                                            (if g$ls/false$8452$15i0ov
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (list
                                                                     g$y$8445$15i0ov)))
                                                                g$ls/false$8452$15i0ov)
                                                              (g$syntax-violation$7504$15i0ov
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8451$15i0ov))))
                                                         (g$syntax-dispatch$7395$15i0ov
                                                           g$t$8451$15i0ov
                                                           '_))))
                                                     g$t$8449$15i0ov))))
                                               (g$syntax-dispatch$7395$15i0ov
                                                 g$t$8449$15i0ov
                                                 '(#(scheme-id quote) ())))))
                                           g$y$8445$15i0ov)
                                          ((case-lambda
                                             ((g$t$8453$15i0ov)
                                              ((case-lambda
                                                 ((g$ls/false$8454$15i0ov)
                                                  (if g$ls/false$8454$15i0ov
                                                    (apply
                                                      (case-lambda
                                                        (()
                                                         (g$f$8447$15i0ov
                                                           (cdr g$x$8448$15i0ov))))
                                                      g$ls/false$8454$15i0ov)
                                                    ((case-lambda
                                                       ((g$t$8455$15i0ov)
                                                        ((case-lambda
                                                           ((g$ls/false$8456$15i0ov)
                                                            (if g$ls/false$8456$15i0ov
                                                              (apply
                                                                (case-lambda
                                                                  (()
                                                                   (cons
                                                                     (car g$x$8448$15i0ov)
                                                                     (g$f$8447$15i0ov
                                                                       (cdr g$x$8448$15i0ov)))))
                                                                g$ls/false$8456$15i0ov)
                                                              (g$syntax-violation$7504$15i0ov
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8455$15i0ov))))
                                                         (g$syntax-dispatch$7395$15i0ov
                                                           g$t$8455$15i0ov
                                                           '_))))
                                                     g$t$8453$15i0ov))))
                                               (g$syntax-dispatch$7395$15i0ov
                                                 g$t$8453$15i0ov
                                                 '(#(scheme-id quote) ())))))
                                           (car g$x$8448$15i0ov)))))))
                            g$f$8447$15i0ov)
                          g$x$8444$15i0ov)))))
                   (g$quasivector$8368$15i0ov
                     (case-lambda
                       ((g$x$8419$15i0ov)
                        ((case-lambda
                           ((g$pat-x$8420$15i0ov)
                            ((case-lambda
                               ((g$t$8421$15i0ov)
                                ((case-lambda
                                   ((g$ls/false$8422$15i0ov)
                                    (if g$ls/false$8422$15i0ov
                                      (apply
                                        (case-lambda
                                          ((g$x*$8423$15i0ov)
                                           (list
                                             (g$scheme-stx$7338$15i0ov 'quote)
                                             (list->vector g$x*$8423$15i0ov))))
                                        g$ls/false$8422$15i0ov)
                                      ((case-lambda
                                         ((g$t$8424$15i0ov)
                                          ((case-lambda
                                             ((g$ls/false$8425$15i0ov)
                                              (if g$ls/false$8425$15i0ov
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     ((letrec ((g$f$8426$15i0ov
                                                                 (case-lambda
                                                                   ((g$x$8427$15i0ov
                                                                      g$k$8428$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$t$8429$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8430$15i0ov)
                                                                            (if g$ls/false$8430$15i0ov
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$x*$8431$15i0ov)
                                                                                   (g$k$8428$15i0ov
                                                                                     (map (case-lambda
                                                                                            ((g$x$8432$15i0ov)
                                                                                             (list
                                                                                               (g$scheme-stx$7338$15i0ov
                                                                                                 'quote)
                                                                                               g$x$8432$15i0ov)))
                                                                                          g$x*$8431$15i0ov))))
                                                                                g$ls/false$8430$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$t$8433$15i0ov)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$8434$15i0ov)
                                                                                      (if g$ls/false$8434$15i0ov
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$x*$8435$15i0ov)
                                                                                             (g$k$8428$15i0ov
                                                                                               g$x*$8435$15i0ov)))
                                                                                          g$ls/false$8434$15i0ov)
                                                                                        ((case-lambda
                                                                                           ((g$t$8436$15i0ov)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$8437$15i0ov)
                                                                                                (if g$ls/false$8437$15i0ov
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$x$8438$15i0ov
                                                                                                         g$y$8439$15i0ov)
                                                                                                       (g$f$8426$15i0ov
                                                                                                         g$y$8439$15i0ov
                                                                                                         (case-lambda
                                                                                                           ((g$ls$8440$15i0ov)
                                                                                                            (g$k$8428$15i0ov
                                                                                                              (cons
                                                                                                                g$x$8438$15i0ov
                                                                                                                g$ls$8440$15i0ov)))))))
                                                                                                    g$ls/false$8437$15i0ov)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$8441$15i0ov)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$8442$15i0ov)
                                                                                                          (if g$ls/false$8442$15i0ov
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (list
                                                                                                                   (g$scheme-stx$7338$15i0ov
                                                                                                                     'list->vector)
                                                                                                                   g$pat-x$8420$15i0ov)))
                                                                                                              g$ls/false$8442$15i0ov)
                                                                                                            (g$syntax-violation$7504$15i0ov
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$8441$15i0ov))))
                                                                                                       (g$syntax-dispatch$7395$15i0ov
                                                                                                         g$t$8441$15i0ov
                                                                                                         '_))))
                                                                                                   g$t$8436$15i0ov))))
                                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                                               g$t$8436$15i0ov
                                                                                               '(#(scheme-id
                                                                                                   cons)
                                                                                                 any
                                                                                                 any)))))
                                                                                         g$t$8433$15i0ov))))
                                                                                   (g$syntax-dispatch$7395$15i0ov
                                                                                     g$t$8433$15i0ov
                                                                                     '(#(scheme-id
                                                                                         list)
                                                                                       .
                                                                                       each-any)))))
                                                                               g$t$8429$15i0ov))))
                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                           g$t$8429$15i0ov
                                                                           '(#(scheme-id
                                                                               quote)
                                                                             each-any)))))
                                                                     g$x$8427$15i0ov)))))
                                                        g$f$8426$15i0ov)
                                                      g$x$8419$15i0ov
                                                      (case-lambda
                                                        ((g$ls$8443$15i0ov)
                                                         (g$cons*$5361$15i0ov
                                                           (g$scheme-stx$7338$15i0ov
                                                             'vector)
                                                           g$ls$8443$15i0ov))))))
                                                  g$ls/false$8425$15i0ov)
                                                (g$syntax-violation$7504$15i0ov
                                                  '#f
                                                  '"invalid syntax"
                                                  g$t$8424$15i0ov))))
                                           (g$syntax-dispatch$7395$15i0ov
                                             g$t$8424$15i0ov
                                             '_))))
                                       g$t$8421$15i0ov))))
                                 (g$syntax-dispatch$7395$15i0ov
                                   g$t$8421$15i0ov
                                   '(#(scheme-id quote) each-any)))))
                             g$pat-x$8420$15i0ov)))
                         g$x$8419$15i0ov))))
                   (g$vquasi$8369$15i0ov
                     (case-lambda
                       ((g$p$8402$15i0ov g$lev$8403$15i0ov)
                        ((case-lambda
                           ((g$t$8404$15i0ov)
                            ((case-lambda
                               ((g$ls/false$8405$15i0ov)
                                (if g$ls/false$8405$15i0ov
                                  (apply
                                    (case-lambda
                                      ((g$p$8406$15i0ov g$q$8407$15i0ov)
                                       ((case-lambda
                                          ((g$t$8408$15i0ov)
                                           ((case-lambda
                                              ((g$ls/false$8409$15i0ov)
                                               (if g$ls/false$8409$15i0ov
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8410$15i0ov)
                                                      (if (= g$lev$8403$15i0ov
                                                             '0)
                                                        (g$quasicons*$8365$15i0ov
                                                          g$p$8410$15i0ov
                                                          (g$vquasi$8369$15i0ov
                                                            g$q$8407$15i0ov
                                                            g$lev$8403$15i0ov))
                                                        (g$quasicons$8366$15i0ov
                                                          (g$quasicons$8366$15i0ov
                                                            (g$datum$8349$15i0ov
                                                              'unquote)
                                                            (g$quasi$8370$15i0ov
                                                              g$p$8410$15i0ov
                                                              (- g$lev$8403$15i0ov
                                                                 '1)))
                                                          (g$vquasi$8369$15i0ov
                                                            g$q$8407$15i0ov
                                                            g$lev$8403$15i0ov)))))
                                                   g$ls/false$8409$15i0ov)
                                                 ((case-lambda
                                                    ((g$t$8411$15i0ov)
                                                     ((case-lambda
                                                        ((g$ls/false$8412$15i0ov)
                                                         (if g$ls/false$8412$15i0ov
                                                           (apply
                                                             (case-lambda
                                                               ((g$p$8413$15i0ov)
                                                                (if (= g$lev$8403$15i0ov
                                                                       '0)
                                                                  (g$quasiappend$8367$15i0ov
                                                                    g$p$8413$15i0ov
                                                                    (g$vquasi$8369$15i0ov
                                                                      g$q$8407$15i0ov
                                                                      g$lev$8403$15i0ov))
                                                                  (g$quasicons$8366$15i0ov
                                                                    (g$quasicons$8366$15i0ov
                                                                      (g$datum$8349$15i0ov
                                                                        'unquote-splicing)
                                                                      (g$quasi$8370$15i0ov
                                                                        g$p$8413$15i0ov
                                                                        (- g$lev$8403$15i0ov
                                                                           '1)))
                                                                    (g$vquasi$8369$15i0ov
                                                                      g$q$8407$15i0ov
                                                                      g$lev$8403$15i0ov)))))
                                                             g$ls/false$8412$15i0ov)
                                                           ((case-lambda
                                                              ((g$t$8414$15i0ov)
                                                               ((case-lambda
                                                                  ((g$ls/false$8415$15i0ov)
                                                                   (if g$ls/false$8415$15i0ov
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$p$8416$15i0ov)
                                                                          (g$quasicons$8366$15i0ov
                                                                            (g$quasi$8370$15i0ov
                                                                              g$p$8416$15i0ov
                                                                              g$lev$8403$15i0ov)
                                                                            (g$vquasi$8369$15i0ov
                                                                              g$q$8407$15i0ov
                                                                              g$lev$8403$15i0ov))))
                                                                       g$ls/false$8415$15i0ov)
                                                                     (g$syntax-violation$7504$15i0ov
                                                                       '#f
                                                                       '"invalid syntax"
                                                                       g$t$8414$15i0ov))))
                                                                (g$syntax-dispatch$7395$15i0ov
                                                                  g$t$8414$15i0ov
                                                                  'any))))
                                                            g$t$8411$15i0ov))))
                                                      (g$syntax-dispatch$7395$15i0ov
                                                        g$t$8411$15i0ov
                                                        '(#(scheme-id
                                                            unquote-splicing)
                                                          .
                                                          each-any)))))
                                                  g$t$8408$15i0ov))))
                                            (g$syntax-dispatch$7395$15i0ov
                                              g$t$8408$15i0ov
                                              '(#(scheme-id unquote)
                                                .
                                                each-any)))))
                                        g$p$8406$15i0ov)))
                                    g$ls/false$8405$15i0ov)
                                  ((case-lambda
                                     ((g$t$8417$15i0ov)
                                      ((case-lambda
                                         ((g$ls/false$8418$15i0ov)
                                          (if g$ls/false$8418$15i0ov
                                            (apply
                                              (case-lambda
                                                (()
                                                 (list
                                                   (g$scheme-stx$7338$15i0ov
                                                     'quote)
                                                   '())))
                                              g$ls/false$8418$15i0ov)
                                            (g$syntax-violation$7504$15i0ov
                                              '#f
                                              '"invalid syntax"
                                              g$t$8417$15i0ov))))
                                       (g$syntax-dispatch$7395$15i0ov
                                         g$t$8417$15i0ov
                                         '()))))
                                   g$t$8404$15i0ov))))
                             (g$syntax-dispatch$7395$15i0ov
                               g$t$8404$15i0ov
                               '(any . any)))))
                         g$p$8402$15i0ov))))
                   (g$quasi$8370$15i0ov
                     (case-lambda
                       ((g$p$8375$15i0ov g$lev$8376$15i0ov)
                        ((case-lambda
                           ((g$t$8377$15i0ov)
                            ((case-lambda
                               ((g$ls/false$8378$15i0ov)
                                (if g$ls/false$8378$15i0ov
                                  (apply
                                    (case-lambda
                                      ((g$p$8379$15i0ov)
                                       (if (= g$lev$8376$15i0ov '0)
                                         g$p$8379$15i0ov
                                         (g$quasicons$8366$15i0ov
                                           (g$datum$8349$15i0ov 'unquote)
                                           (g$quasi$8370$15i0ov
                                             (list g$p$8379$15i0ov)
                                             (- g$lev$8376$15i0ov '1))))))
                                    g$ls/false$8378$15i0ov)
                                  ((case-lambda
                                     ((g$t$8380$15i0ov)
                                      ((case-lambda
                                         ((g$ls/false$8381$15i0ov)
                                          (if g$ls/false$8381$15i0ov
                                            (apply
                                              (case-lambda
                                                ((g$p$8382$15i0ov
                                                   g$q$8383$15i0ov)
                                                 (if (= g$lev$8376$15i0ov '0)
                                                   (g$quasicons*$8365$15i0ov
                                                     g$p$8382$15i0ov
                                                     (g$quasi$8370$15i0ov
                                                       g$q$8383$15i0ov
                                                       g$lev$8376$15i0ov))
                                                   (g$quasicons$8366$15i0ov
                                                     (g$quasicons$8366$15i0ov
                                                       (g$datum$8349$15i0ov
                                                         'unquote)
                                                       (g$quasi$8370$15i0ov
                                                         g$p$8382$15i0ov
                                                         (- g$lev$8376$15i0ov
                                                            '1)))
                                                     (g$quasi$8370$15i0ov
                                                       g$q$8383$15i0ov
                                                       g$lev$8376$15i0ov)))))
                                              g$ls/false$8381$15i0ov)
                                            ((case-lambda
                                               ((g$t$8384$15i0ov)
                                                ((case-lambda
                                                   ((g$ls/false$8385$15i0ov)
                                                    (if g$ls/false$8385$15i0ov
                                                      (apply
                                                        (case-lambda
                                                          ((g$p$8386$15i0ov
                                                             g$q$8387$15i0ov)
                                                           (if (= g$lev$8376$15i0ov
                                                                  '0)
                                                             (g$quasiappend$8367$15i0ov
                                                               g$p$8386$15i0ov
                                                               (g$quasi$8370$15i0ov
                                                                 g$q$8387$15i0ov
                                                                 g$lev$8376$15i0ov))
                                                             (g$quasicons$8366$15i0ov
                                                               (g$quasicons$8366$15i0ov
                                                                 (g$datum$8349$15i0ov
                                                                   'unquote-splicing)
                                                                 (g$quasi$8370$15i0ov
                                                                   g$p$8386$15i0ov
                                                                   (- g$lev$8376$15i0ov
                                                                      '1)))
                                                               (g$quasi$8370$15i0ov
                                                                 g$q$8387$15i0ov
                                                                 g$lev$8376$15i0ov)))))
                                                        g$ls/false$8385$15i0ov)
                                                      ((case-lambda
                                                         ((g$t$8388$15i0ov)
                                                          ((case-lambda
                                                             ((g$ls/false$8389$15i0ov)
                                                              (if g$ls/false$8389$15i0ov
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p$8390$15i0ov)
                                                                     (g$quasicons$8366$15i0ov
                                                                       (g$datum$8349$15i0ov
                                                                         'quasiquote)
                                                                       (g$quasi$8370$15i0ov
                                                                         (list
                                                                           g$p$8390$15i0ov)
                                                                         (+ g$lev$8376$15i0ov
                                                                            '1)))))
                                                                  g$ls/false$8389$15i0ov)
                                                                ((case-lambda
                                                                   ((g$t$8391$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8392$15i0ov)
                                                                        (if g$ls/false$8392$15i0ov
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p$8393$15i0ov
                                                                                 g$q$8394$15i0ov)
                                                                               (g$quasicons$8366$15i0ov
                                                                                 (g$quasi$8370$15i0ov
                                                                                   g$p$8393$15i0ov
                                                                                   g$lev$8376$15i0ov)
                                                                                 (g$quasi$8370$15i0ov
                                                                                   g$q$8394$15i0ov
                                                                                   g$lev$8376$15i0ov))))
                                                                            g$ls/false$8392$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$t$8395$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8396$15i0ov)
                                                                                  (if (if g$ls/false$8396$15i0ov
                                                                                        (begin
                                                                                          '#f
                                                                                          (apply
                                                                                            (case-lambda
                                                                                              ((g$x$8397$15i0ov)
                                                                                               (not (g$stx?$7089$15i0ov
                                                                                                      g$x$8397$15i0ov))))
                                                                                            g$ls/false$8396$15i0ov))
                                                                                        '#f)
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$x$8398$15i0ov)
                                                                                         (g$quasivector$8368$15i0ov
                                                                                           (g$vquasi$8369$15i0ov
                                                                                             g$x$8398$15i0ov
                                                                                             g$lev$8376$15i0ov))))
                                                                                      g$ls/false$8396$15i0ov)
                                                                                    ((case-lambda
                                                                                       ((g$t$8399$15i0ov)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8400$15i0ov)
                                                                                            (if g$ls/false$8400$15i0ov
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8401$15i0ov)
                                                                                                   (list
                                                                                                     (g$scheme-stx$7338$15i0ov
                                                                                                       'quote)
                                                                                                     g$p$8401$15i0ov)))
                                                                                                g$ls/false$8400$15i0ov)
                                                                                              (g$syntax-violation$7504$15i0ov
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$8399$15i0ov))))
                                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                                           g$t$8399$15i0ov
                                                                                           'any))))
                                                                                     g$t$8395$15i0ov))))
                                                                               (g$syntax-dispatch$7395$15i0ov
                                                                                 g$t$8395$15i0ov
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$8391$15i0ov))))
                                                                     (g$syntax-dispatch$7395$15i0ov
                                                                       g$t$8391$15i0ov
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$8388$15i0ov))))
                                                           (g$syntax-dispatch$7395$15i0ov
                                                             g$t$8388$15i0ov
                                                             '(#(scheme-id
                                                                 quasiquote)
                                                               any)))))
                                                       g$t$8384$15i0ov))))
                                                 (g$syntax-dispatch$7395$15i0ov
                                                   g$t$8384$15i0ov
                                                   '((#(scheme-id
                                                        unquote-splicing)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8380$15i0ov))))
                                       (g$syntax-dispatch$7395$15i0ov
                                         g$t$8380$15i0ov
                                         '((#(scheme-id unquote) . each-any)
                                           .
                                           any)))))
                                   g$t$8377$15i0ov))))
                             (g$syntax-dispatch$7395$15i0ov
                               g$t$8377$15i0ov
                               '(#(scheme-id unquote) any)))))
                         g$p$8375$15i0ov)))))
           (case-lambda
             ((g$x$8371$15i0ov)
              ((case-lambda
                 ((g$t$8372$15i0ov)
                  ((case-lambda
                     ((g$ls/false$8373$15i0ov)
                      (if g$ls/false$8373$15i0ov
                        (apply
                          (case-lambda
                            ((g$e$8374$15i0ov)
                             (g$quasi$8370$15i0ov g$e$8374$15i0ov '0)))
                          g$ls/false$8373$15i0ov)
                        (g$syntax-violation$7504$15i0ov
                          '#f
                          '"invalid syntax"
                          g$t$8372$15i0ov))))
                   (g$syntax-dispatch$7395$15i0ov g$t$8372$15i0ov '(_ any)))))
               g$x$8371$15i0ov))))))))
   (g$quasisyntax-macro$7387$15i0ov
     g$quasisyntax-macro$10826$15i0ov
     ((case-lambda
        (()
         (letrec* ((g$quasi$8481$15i0ov
                     (case-lambda
                       ((g$p$8495$15i0ov g$lev$8496$15i0ov)
                        ((case-lambda
                           ((g$t$8497$15i0ov)
                            ((case-lambda
                               ((g$ls/false$8498$15i0ov)
                                (if g$ls/false$8498$15i0ov
                                  (apply
                                    (case-lambda
                                      ((g$p$8499$15i0ov)
                                       (if (= g$lev$8496$15i0ov '0)
                                         ((case-lambda
                                            ((g$g$8500$15i0ov)
                                             (values
                                               (list g$g$8500$15i0ov)
                                               (list g$p$8499$15i0ov)
                                               g$g$8500$15i0ov)))
                                          (gensym))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$quasi$8481$15i0ov
                                                g$p$8499$15i0ov
                                                (- g$lev$8496$15i0ov '1))))
                                           (case-lambda
                                             ((g$lhs*$8504$15i0ov
                                                g$rhs*$8505$15i0ov
                                                g$p$8506$15i0ov)
                                              ((case-lambda
                                                 ((g$p$8507$15i0ov
                                                    g$rhs*$8508$15i0ov
                                                    g$lhs*$8509$15i0ov)
                                                  (values
                                                    g$lhs*$8509$15i0ov
                                                    g$rhs*$8508$15i0ov
                                                    (list
                                                      'unsyntax
                                                      g$p$8507$15i0ov))))
                                               g$p$8506$15i0ov
                                               g$rhs*$8505$15i0ov
                                               g$lhs*$8504$15i0ov)))))))
                                    g$ls/false$8498$15i0ov)
                                  ((case-lambda
                                     ((g$t$8510$15i0ov)
                                      ((case-lambda
                                         ((g$ls/false$8511$15i0ov)
                                          (if (if g$ls/false$8511$15i0ov
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      (()
                                                       (= g$lev$8496$15i0ov
                                                          '0)))
                                                    g$ls/false$8511$15i0ov))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                (()
                                                 (g$syntax-violation$7504$15i0ov
                                                   '#f
                                                   '"incorrect use of unsyntax"
                                                   g$p$8495$15i0ov)))
                                              g$ls/false$8511$15i0ov)
                                            ((case-lambda
                                               ((g$t$8512$15i0ov)
                                                ((case-lambda
                                                   ((g$ls/false$8513$15i0ov)
                                                    (if g$ls/false$8513$15i0ov
                                                      (apply
                                                        (case-lambda
                                                          ((g$p*$8514$15i0ov
                                                             g$q$8515$15i0ov)
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (g$quasi$8481$15i0ov
                                                                  g$q$8515$15i0ov
                                                                  g$lev$8496$15i0ov)))
                                                             (case-lambda
                                                               ((g$lhs*$8519$15i0ov
                                                                  g$rhs*$8520$15i0ov
                                                                  g$q$8521$15i0ov)
                                                                ((case-lambda
                                                                   ((g$q$8522$15i0ov
                                                                      g$rhs*$8523$15i0ov
                                                                      g$lhs*$8524$15i0ov)
                                                                    (if (= g$lev$8496$15i0ov
                                                                           '0)
                                                                      ((case-lambda
                                                                         ((g$g*$8525$15i0ov)
                                                                          (values
                                                                            (append
                                                                              g$g*$8525$15i0ov
                                                                              g$lhs*$8524$15i0ov)
                                                                            (append
                                                                              g$p*$8514$15i0ov
                                                                              g$rhs*$8523$15i0ov)
                                                                            (append
                                                                              g$g*$8525$15i0ov
                                                                              g$q$8522$15i0ov))))
                                                                       (map (case-lambda
                                                                              ((g$x$8526$15i0ov)
                                                                               (gensym)))
                                                                            g$p*$8514$15i0ov))
                                                                      (call-with-values
                                                                        (case-lambda
                                                                          (()
                                                                           (g$quasi$8481$15i0ov
                                                                             g$p*$8514$15i0ov
                                                                             (- g$lev$8496$15i0ov
                                                                                '1))))
                                                                        (case-lambda
                                                                          ((g$lhs2*$8530$15i0ov
                                                                             g$rhs2*$8531$15i0ov
                                                                             g$p*$8532$15i0ov)
                                                                           ((case-lambda
                                                                              ((g$p*$8533$15i0ov
                                                                                 g$rhs2*$8534$15i0ov
                                                                                 g$lhs2*$8535$15i0ov)
                                                                               (values
                                                                                 (append
                                                                                   g$lhs2*$8535$15i0ov
                                                                                   g$lhs*$8524$15i0ov)
                                                                                 (append
                                                                                   g$rhs2*$8534$15i0ov
                                                                                   g$rhs*$8523$15i0ov)
                                                                                 (cons
                                                                                   (cons
                                                                                     'unsyntax
                                                                                     g$p*$8533$15i0ov)
                                                                                   g$q$8522$15i0ov))))
                                                                            g$p*$8532$15i0ov
                                                                            g$rhs2*$8531$15i0ov
                                                                            g$lhs2*$8530$15i0ov)))))))
                                                                 g$q$8521$15i0ov
                                                                 g$rhs*$8520$15i0ov
                                                                 g$lhs*$8519$15i0ov))))))
                                                        g$ls/false$8513$15i0ov)
                                                      ((case-lambda
                                                         ((g$t$8536$15i0ov)
                                                          ((case-lambda
                                                             ((g$ls/false$8537$15i0ov)
                                                              (if g$ls/false$8537$15i0ov
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p*$8538$15i0ov
                                                                       g$q$8539$15i0ov)
                                                                     (call-with-values
                                                                       (case-lambda
                                                                         (()
                                                                          (g$quasi$8481$15i0ov
                                                                            g$q$8539$15i0ov
                                                                            g$lev$8496$15i0ov)))
                                                                       (case-lambda
                                                                         ((g$lhs*$8543$15i0ov
                                                                            g$rhs*$8544$15i0ov
                                                                            g$q$8545$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$q$8546$15i0ov
                                                                                g$rhs*$8547$15i0ov
                                                                                g$lhs*$8548$15i0ov)
                                                                              (if (= g$lev$8496$15i0ov
                                                                                     '0)
                                                                                ((case-lambda
                                                                                   ((g$g*$8549$15i0ov)
                                                                                    (values
                                                                                      (append
                                                                                        (map (case-lambda
                                                                                               ((g$g$8550$15i0ov)
                                                                                                (cons
                                                                                                  g$g$8550$15i0ov
                                                                                                  '(...))))
                                                                                             g$g*$8549$15i0ov)
                                                                                        g$lhs*$8548$15i0ov)
                                                                                      (append
                                                                                        g$p*$8538$15i0ov
                                                                                        g$rhs*$8547$15i0ov)
                                                                                      (append
                                                                                        (apply
                                                                                          append
                                                                                          (map (case-lambda
                                                                                                 ((g$g$8551$15i0ov)
                                                                                                  (cons
                                                                                                    g$g$8551$15i0ov
                                                                                                    '(...))))
                                                                                               g$g*$8549$15i0ov))
                                                                                        g$q$8546$15i0ov))))
                                                                                 (map (case-lambda
                                                                                        ((g$x$8552$15i0ov)
                                                                                         (gensym)))
                                                                                      g$p*$8538$15i0ov))
                                                                                (call-with-values
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$quasi$8481$15i0ov
                                                                                       g$p*$8538$15i0ov
                                                                                       (- g$lev$8496$15i0ov
                                                                                          '1))))
                                                                                  (case-lambda
                                                                                    ((g$lhs2*$8556$15i0ov
                                                                                       g$rhs2*$8557$15i0ov
                                                                                       g$p*$8558$15i0ov)
                                                                                     ((case-lambda
                                                                                        ((g$p*$8559$15i0ov
                                                                                           g$rhs2*$8560$15i0ov
                                                                                           g$lhs2*$8561$15i0ov)
                                                                                         (values
                                                                                           (append
                                                                                             g$lhs2*$8561$15i0ov
                                                                                             g$lhs*$8548$15i0ov)
                                                                                           (append
                                                                                             g$rhs2*$8560$15i0ov
                                                                                             g$rhs*$8547$15i0ov)
                                                                                           (cons
                                                                                             (cons
                                                                                               'unsyntax-splicing
                                                                                               g$p*$8559$15i0ov)
                                                                                             g$q$8546$15i0ov))))
                                                                                      g$p*$8558$15i0ov
                                                                                      g$rhs2*$8557$15i0ov
                                                                                      g$lhs2*$8556$15i0ov)))))))
                                                                           g$q$8545$15i0ov
                                                                           g$rhs*$8544$15i0ov
                                                                           g$lhs*$8543$15i0ov))))))
                                                                  g$ls/false$8537$15i0ov)
                                                                ((case-lambda
                                                                   ((g$t$8562$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$ls/false$8563$15i0ov)
                                                                        (if (if g$ls/false$8563$15i0ov
                                                                              (begin
                                                                                '#f
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (= g$lev$8496$15i0ov
                                                                                        '0)))
                                                                                  g$ls/false$8563$15i0ov))
                                                                              '#f)
                                                                          (apply
                                                                            (case-lambda
                                                                              (()
                                                                               (g$syntax-violation$7504$15i0ov
                                                                                 '#f
                                                                                 '"incorrect use of unsyntax-splicing"
                                                                                 g$p$8495$15i0ov)))
                                                                            g$ls/false$8563$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$t$8564$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$8565$15i0ov)
                                                                                  (if g$ls/false$8565$15i0ov
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p$8566$15i0ov)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$quasi$8481$15i0ov
                                                                                                g$p$8566$15i0ov
                                                                                                (+ g$lev$8496$15i0ov
                                                                                                   '1))))
                                                                                           (case-lambda
                                                                                             ((g$lhs*$8570$15i0ov
                                                                                                g$rhs*$8571$15i0ov
                                                                                                g$p$8572$15i0ov)
                                                                                              ((case-lambda
                                                                                                 ((g$p$8573$15i0ov
                                                                                                    g$rhs*$8574$15i0ov
                                                                                                    g$lhs*$8575$15i0ov)
                                                                                                  (values
                                                                                                    g$lhs*$8575$15i0ov
                                                                                                    g$rhs*$8574$15i0ov
                                                                                                    (list
                                                                                                      'quasisyntax
                                                                                                      g$p$8573$15i0ov))))
                                                                                               g$p$8572$15i0ov
                                                                                               g$rhs*$8571$15i0ov
                                                                                               g$lhs*$8570$15i0ov))))))
                                                                                      g$ls/false$8565$15i0ov)
                                                                                    ((case-lambda
                                                                                       ((g$t$8576$15i0ov)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$8577$15i0ov)
                                                                                            (if g$ls/false$8577$15i0ov
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p$8578$15i0ov
                                                                                                     g$q$8579$15i0ov)
                                                                                                   (call-with-values
                                                                                                     (case-lambda
                                                                                                       (()
                                                                                                        (g$quasi$8481$15i0ov
                                                                                                          g$p$8578$15i0ov
                                                                                                          g$lev$8496$15i0ov)))
                                                                                                     (case-lambda
                                                                                                       ((g$lhs*$8586$15i0ov
                                                                                                          g$rhs*$8587$15i0ov
                                                                                                          g$p$8588$15i0ov)
                                                                                                        (call-with-values
                                                                                                          (case-lambda
                                                                                                            (()
                                                                                                             (g$quasi$8481$15i0ov
                                                                                                               g$q$8579$15i0ov
                                                                                                               g$lev$8496$15i0ov)))
                                                                                                          (case-lambda
                                                                                                            ((g$lhs2*$8589$15i0ov
                                                                                                               g$rhs2*$8590$15i0ov
                                                                                                               g$q$8591$15i0ov)
                                                                                                             ((case-lambda
                                                                                                                ((g$q$8592$15i0ov
                                                                                                                   g$rhs2*$8593$15i0ov
                                                                                                                   g$lhs2*$8594$15i0ov
                                                                                                                   g$p$8595$15i0ov
                                                                                                                   g$rhs*$8596$15i0ov
                                                                                                                   g$lhs*$8597$15i0ov)
                                                                                                                 (values
                                                                                                                   (append
                                                                                                                     g$lhs2*$8594$15i0ov
                                                                                                                     g$lhs*$8597$15i0ov)
                                                                                                                   (append
                                                                                                                     g$rhs2*$8593$15i0ov
                                                                                                                     g$rhs*$8596$15i0ov)
                                                                                                                   (cons
                                                                                                                     g$p$8595$15i0ov
                                                                                                                     g$q$8592$15i0ov))))
                                                                                                              g$q$8591$15i0ov
                                                                                                              g$rhs2*$8590$15i0ov
                                                                                                              g$lhs2*$8589$15i0ov
                                                                                                              g$p$8588$15i0ov
                                                                                                              g$rhs*$8587$15i0ov
                                                                                                              g$lhs*$8586$15i0ov)))))))))
                                                                                                g$ls/false$8577$15i0ov)
                                                                                              ((case-lambda
                                                                                                 ((g$t$8598$15i0ov)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$8599$15i0ov)
                                                                                                      (if g$ls/false$8599$15i0ov
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$x*$8600$15i0ov)
                                                                                                             (call-with-values
                                                                                                               (case-lambda
                                                                                                                 (()
                                                                                                                  (g$quasi$8481$15i0ov
                                                                                                                    g$x*$8600$15i0ov
                                                                                                                    g$lev$8496$15i0ov)))
                                                                                                               (case-lambda
                                                                                                                 ((g$lhs*$8604$15i0ov
                                                                                                                    g$rhs*$8605$15i0ov
                                                                                                                    g$x*$8606$15i0ov)
                                                                                                                  ((case-lambda
                                                                                                                     ((g$x*$8607$15i0ov
                                                                                                                        g$rhs*$8608$15i0ov
                                                                                                                        g$lhs*$8609$15i0ov)
                                                                                                                      (values
                                                                                                                        g$lhs*$8609$15i0ov
                                                                                                                        g$rhs*$8608$15i0ov
                                                                                                                        (list->vector
                                                                                                                          g$x*$8607$15i0ov))))
                                                                                                                   g$x*$8606$15i0ov
                                                                                                                   g$rhs*$8605$15i0ov
                                                                                                                   g$lhs*$8604$15i0ov))))))
                                                                                                          g$ls/false$8599$15i0ov)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$8610$15i0ov)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$8611$15i0ov)
                                                                                                                (if g$ls/false$8611$15i0ov
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (values
                                                                                                                         '()
                                                                                                                         '()
                                                                                                                         g$p$8495$15i0ov)))
                                                                                                                    g$ls/false$8611$15i0ov)
                                                                                                                  (g$syntax-violation$7504$15i0ov
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$8610$15i0ov))))
                                                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                                                               g$t$8610$15i0ov
                                                                                                               '_))))
                                                                                                         g$t$8598$15i0ov))))
                                                                                                   (g$syntax-dispatch$7395$15i0ov
                                                                                                     g$t$8598$15i0ov
                                                                                                     '#(vector
                                                                                                        each-any)))))
                                                                                               g$t$8576$15i0ov))))
                                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                                           g$t$8576$15i0ov
                                                                                           '(any .
                                                                                                 any)))))
                                                                                     g$t$8564$15i0ov))))
                                                                               (g$syntax-dispatch$7395$15i0ov
                                                                                 g$t$8564$15i0ov
                                                                                 '(#(scheme-id
                                                                                     quasisyntax)
                                                                                   any)))))
                                                                           g$t$8562$15i0ov))))
                                                                     (g$syntax-dispatch$7395$15i0ov
                                                                       g$t$8562$15i0ov
                                                                       '#(scheme-id
                                                                          unsyntax-splicing)))))
                                                                 g$t$8536$15i0ov))))
                                                           (g$syntax-dispatch$7395$15i0ov
                                                             g$t$8536$15i0ov
                                                             '((#(scheme-id
                                                                  unsyntax-splicing)
                                                                .
                                                                each-any)
                                                               .
                                                               any)))))
                                                       g$t$8512$15i0ov))))
                                                 (g$syntax-dispatch$7395$15i0ov
                                                   g$t$8512$15i0ov
                                                   '((#(scheme-id unsyntax)
                                                      .
                                                      each-any)
                                                     .
                                                     any)))))
                                             g$t$8510$15i0ov))))
                                       (g$syntax-dispatch$7395$15i0ov
                                         g$t$8510$15i0ov
                                         '#(scheme-id unsyntax)))))
                                   g$t$8497$15i0ov))))
                             (g$syntax-dispatch$7395$15i0ov
                               g$t$8497$15i0ov
                               '(#(scheme-id unsyntax) any)))))
                         g$p$8495$15i0ov)))))
           (case-lambda
             ((g$x$8482$15i0ov)
              ((case-lambda
                 ((g$t$8483$15i0ov)
                  ((case-lambda
                     ((g$ls/false$8484$15i0ov)
                      (if g$ls/false$8484$15i0ov
                        (apply
                          (case-lambda
                            ((g$e$8485$15i0ov)
                             (call-with-values
                               (case-lambda
                                 (() (g$quasi$8481$15i0ov g$e$8485$15i0ov '0)))
                               (case-lambda
                                 ((g$lhs*$8489$15i0ov
                                    g$rhs*$8490$15i0ov
                                    g$v$8491$15i0ov)
                                  ((case-lambda
                                     ((g$v$8492$15i0ov
                                        g$rhs*$8493$15i0ov
                                        g$lhs*$8494$15i0ov)
                                      (g$bless$7358$15i0ov
                                        (list
                                          'syntax-case
                                          (cons 'list g$rhs*$8493$15i0ov)
                                          '()
                                          (list
                                            g$lhs*$8494$15i0ov
                                            (list 'syntax g$v$8492$15i0ov))))))
                                   g$v$8491$15i0ov
                                   g$rhs*$8490$15i0ov
                                   g$lhs*$8489$15i0ov))))))
                          g$ls/false$8484$15i0ov)
                        (g$syntax-violation$7504$15i0ov
                          '#f
                          '"invalid syntax"
                          g$t$8483$15i0ov))))
                   (g$syntax-dispatch$7395$15i0ov g$t$8483$15i0ov '(_ any)))))
               g$x$8482$15i0ov))))))))
   (g$define-struct-macro$7388$15i0ov
     g$define-struct-macro$10827$15i0ov
     (case-lambda
       ((g$stx$8612$15i0ov)
        (g$syntax-violation$7504$15i0ov
          '#f
          '"define-struct not supported"
          g$stx$8612$15i0ov))))
   (g$define-record-type-macro$7389$15i0ov
     g$define-record-type-macro$10828$15i0ov
     (case-lambda
       ((g$x$8613$15i0ov)
        (letrec* ((g$id$8614$15i0ov
                    (case-lambda
                      ((g$ctxt$8866$15i0ov . g$str*$8867$15i0ov)
                       (g$datum->syntax$7506$15i0ov
                         g$ctxt$8866$15i0ov
                         (string->symbol
                           (apply
                             string-append
                             (map (case-lambda
                                    ((g$x$8868$15i0ov)
                                     (if (symbol? g$x$8868$15i0ov)
                                       (symbol->string g$x$8868$15i0ov)
                                       (if (string? g$x$8868$15i0ov)
                                         g$x$8868$15i0ov
                                         (assertion-violation
                                           'define-record-type
                                           '"BUG")))))
                                  g$str*$8867$15i0ov)))))))
                  (g$get-record-name$8615$15i0ov
                    (case-lambda
                      ((g$spec$8857$15i0ov)
                       ((case-lambda
                          ((g$t$8858$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8859$15i0ov)
                               (if g$ls/false$8859$15i0ov
                                 (apply
                                   (case-lambda
                                     ((g$foo$8860$15i0ov
                                        g$make-foo$8861$15i0ov
                                        g$foo?$8862$15i0ov)
                                      g$foo$8860$15i0ov))
                                   g$ls/false$8859$15i0ov)
                                 ((case-lambda
                                    ((g$t$8863$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8864$15i0ov)
                                         (if g$ls/false$8864$15i0ov
                                           (apply
                                             (case-lambda
                                               ((g$foo$8865$15i0ov)
                                                g$foo$8865$15i0ov))
                                             g$ls/false$8864$15i0ov)
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$t$8863$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8863$15i0ov
                                        'any))))
                                  g$t$8858$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8858$15i0ov
                              '(any any any)))))
                        g$spec$8857$15i0ov))))
                  (g$get-record-constructor-name$8616$15i0ov
                    (case-lambda
                      ((g$spec$8847$15i0ov)
                       ((case-lambda
                          ((g$t$8848$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8849$15i0ov)
                               (if g$ls/false$8849$15i0ov
                                 (apply
                                   (case-lambda
                                     ((g$foo$8850$15i0ov
                                        g$make-foo$8851$15i0ov
                                        g$foo?$8852$15i0ov)
                                      g$make-foo$8851$15i0ov))
                                   g$ls/false$8849$15i0ov)
                                 ((case-lambda
                                    ((g$t$8853$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8854$15i0ov)
                                         (if (if g$ls/false$8854$15i0ov
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$8855$15i0ov)
                                                      (g$id?$7117$15i0ov
                                                        g$foo$8855$15i0ov)))
                                                   g$ls/false$8854$15i0ov))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$8856$15i0ov)
                                                (g$id$8614$15i0ov
                                                  g$foo$8856$15i0ov
                                                  '"make-"
                                                  (g$stx->datum$7128$15i0ov
                                                    g$foo$8856$15i0ov))))
                                             g$ls/false$8854$15i0ov)
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$t$8853$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8853$15i0ov
                                        'any))))
                                  g$t$8848$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8848$15i0ov
                              '(any any any)))))
                        g$spec$8847$15i0ov))))
                  (g$get-record-predicate-name$8617$15i0ov
                    (case-lambda
                      ((g$spec$8837$15i0ov)
                       ((case-lambda
                          ((g$t$8838$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8839$15i0ov)
                               (if g$ls/false$8839$15i0ov
                                 (apply
                                   (case-lambda
                                     ((g$foo$8840$15i0ov
                                        g$make-foo$8841$15i0ov
                                        g$foo?$8842$15i0ov)
                                      g$foo?$8842$15i0ov))
                                   g$ls/false$8839$15i0ov)
                                 ((case-lambda
                                    ((g$t$8843$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8844$15i0ov)
                                         (if (if g$ls/false$8844$15i0ov
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$foo$8845$15i0ov)
                                                      (g$id?$7117$15i0ov
                                                        g$foo$8845$15i0ov)))
                                                   g$ls/false$8844$15i0ov))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$foo$8846$15i0ov)
                                                (g$id$8614$15i0ov
                                                  g$foo$8846$15i0ov
                                                  (g$stx->datum$7128$15i0ov
                                                    g$foo$8846$15i0ov)
                                                  '"?")))
                                             g$ls/false$8844$15i0ov)
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$t$8843$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8843$15i0ov
                                        'any))))
                                  g$t$8838$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8838$15i0ov
                              '(any any any)))))
                        g$spec$8837$15i0ov))))
                  (g$get-clause$8618$15i0ov
                    (case-lambda
                      ((g$id$8828$15i0ov g$ls$8829$15i0ov)
                       ((case-lambda
                          ((g$t$8830$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8831$15i0ov)
                               (if g$ls/false$8831$15i0ov
                                 (apply
                                   (case-lambda (() '#f))
                                   g$ls/false$8831$15i0ov)
                                 ((case-lambda
                                    ((g$t$8832$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8833$15i0ov)
                                         (if g$ls/false$8833$15i0ov
                                           (apply
                                             (case-lambda
                                               ((g$x$8834$15i0ov
                                                  g$rest$8835$15i0ov
                                                  g$ls$8836$15i0ov)
                                                (if (g$free-id=?$7121$15i0ov
                                                      (g$bless$7358$15i0ov
                                                        g$id$8828$15i0ov)
                                                      g$x$8834$15i0ov)
                                                  (cons
                                                    g$x$8834$15i0ov
                                                    g$rest$8835$15i0ov)
                                                  (g$get-clause$8618$15i0ov
                                                    g$id$8828$15i0ov
                                                    g$ls$8836$15i0ov))))
                                             g$ls/false$8833$15i0ov)
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$t$8832$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8832$15i0ov
                                        '((any . any) . any)))))
                                  g$t$8830$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8830$15i0ov
                              '()))))
                        g$ls$8829$15i0ov))))
                  (g$foo-rtd-code$8619$15i0ov
                    (case-lambda
                      ((g$name$8787$15i0ov
                         g$clause*$8788$15i0ov
                         g$parent-rtd-code$8789$15i0ov)
                       (letrec* ((g$convert-field-spec*$8790$15i0ov
                                   (case-lambda
                                     ((g$ls$8815$15i0ov)
                                      (list->vector
                                        (map (case-lambda
                                               ((g$x$8816$15i0ov)
                                                ((case-lambda
                                                   ((g$t$8817$15i0ov)
                                                    ((case-lambda
                                                       ((g$ls/false$8818$15i0ov)
                                                        (if g$ls/false$8818$15i0ov
                                                          (apply
                                                            (case-lambda
                                                              ((g$name$8819$15i0ov
                                                                 g$rest$8820$15i0ov)
                                                               (list
                                                                 'mutable
                                                                 g$name$8819$15i0ov)))
                                                            g$ls/false$8818$15i0ov)
                                                          ((case-lambda
                                                             ((g$t$8821$15i0ov)
                                                              ((case-lambda
                                                                 ((g$ls/false$8822$15i0ov)
                                                                  (if g$ls/false$8822$15i0ov
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$name$8823$15i0ov
                                                                           g$rest$8824$15i0ov)
                                                                         (list
                                                                           'immutable
                                                                           g$name$8823$15i0ov)))
                                                                      g$ls/false$8822$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$t$8825$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$ls/false$8826$15i0ov)
                                                                            (if g$ls/false$8826$15i0ov
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$name$8827$15i0ov)
                                                                                   (list
                                                                                     'immutable
                                                                                     g$name$8827$15i0ov)))
                                                                                g$ls/false$8826$15i0ov)
                                                                              (g$syntax-violation$7504$15i0ov
                                                                                '#f
                                                                                '"invalid syntax"
                                                                                g$t$8825$15i0ov))))
                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                           g$t$8825$15i0ov
                                                                           'any))))
                                                                     g$t$8821$15i0ov))))
                                                               (g$syntax-dispatch$7395$15i0ov
                                                                 g$t$8821$15i0ov
                                                                 '(#(scheme-id
                                                                     immutable)
                                                                   any
                                                                   .
                                                                   any)))))
                                                           g$t$8817$15i0ov))))
                                                     (g$syntax-dispatch$7395$15i0ov
                                                       g$t$8817$15i0ov
                                                       '(#(scheme-id mutable)
                                                         any
                                                         .
                                                         any)))))
                                                 g$x$8816$15i0ov)))
                                             g$ls$8815$15i0ov))))))
                         ((case-lambda
                            ((g$uid-code$8791$15i0ov
                               g$sealed?$8792$15i0ov
                               g$opaque?$8793$15i0ov
                               g$fields$8794$15i0ov)
                             (g$bless$7358$15i0ov
                               (list
                                 'make-record-type-descriptor
                                 (list 'quote g$name$8787$15i0ov)
                                 g$parent-rtd-code$8789$15i0ov
                                 g$uid-code$8791$15i0ov
                                 g$sealed?$8792$15i0ov
                                 g$opaque?$8793$15i0ov
                                 g$fields$8794$15i0ov))))
                          ((case-lambda
                             ((g$t$8795$15i0ov)
                              ((case-lambda
                                 ((g$ls/false$8796$15i0ov)
                                  (if g$ls/false$8796$15i0ov
                                    (apply
                                      (case-lambda (() (list 'quote (gensym))))
                                      g$ls/false$8796$15i0ov)
                                    ((case-lambda
                                       ((g$t$8797$15i0ov)
                                        ((case-lambda
                                           ((g$ls/false$8798$15i0ov)
                                            (if g$ls/false$8798$15i0ov
                                              (apply
                                                (case-lambda
                                                  ((g$uid$8799$15i0ov)
                                                   (list
                                                     'quote
                                                     g$uid$8799$15i0ov)))
                                                g$ls/false$8798$15i0ov)
                                              ((case-lambda
                                                 ((g$t$8800$15i0ov)
                                                  ((case-lambda
                                                     ((g$ls/false$8801$15i0ov)
                                                      (if g$ls/false$8801$15i0ov
                                                        (apply
                                                          (case-lambda (() '#f))
                                                          g$ls/false$8801$15i0ov)
                                                        (g$syntax-violation$7504$15i0ov
                                                          '#f
                                                          '"invalid syntax"
                                                          g$t$8800$15i0ov))))
                                                   (g$syntax-dispatch$7395$15i0ov
                                                     g$t$8800$15i0ov
                                                     '_))))
                                               g$t$8797$15i0ov))))
                                         (g$syntax-dispatch$7395$15i0ov
                                           g$t$8797$15i0ov
                                           '(_ any)))))
                                     g$t$8795$15i0ov))))
                               (g$syntax-dispatch$7395$15i0ov
                                 g$t$8795$15i0ov
                                 '(_)))))
                           (g$get-clause$8618$15i0ov
                             'nongenerative
                             g$clause*$8788$15i0ov))
                          ((case-lambda
                             ((g$t$8802$15i0ov)
                              ((case-lambda
                                 ((g$ls/false$8803$15i0ov)
                                  (if g$ls/false$8803$15i0ov
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8803$15i0ov)
                                    ((case-lambda
                                       ((g$t$8804$15i0ov)
                                        ((case-lambda
                                           ((g$ls/false$8805$15i0ov)
                                            (if g$ls/false$8805$15i0ov
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8805$15i0ov)
                                              (g$syntax-violation$7504$15i0ov
                                                '#f
                                                '"invalid syntax"
                                                g$t$8804$15i0ov))))
                                         (g$syntax-dispatch$7395$15i0ov
                                           g$t$8804$15i0ov
                                           '_))))
                                     g$t$8802$15i0ov))))
                               (g$syntax-dispatch$7395$15i0ov
                                 g$t$8802$15i0ov
                                 '(_ #(atom #t))))))
                           (g$get-clause$8618$15i0ov
                             'sealed
                             g$clause*$8788$15i0ov))
                          ((case-lambda
                             ((g$t$8806$15i0ov)
                              ((case-lambda
                                 ((g$ls/false$8807$15i0ov)
                                  (if g$ls/false$8807$15i0ov
                                    (apply
                                      (case-lambda (() '#t))
                                      g$ls/false$8807$15i0ov)
                                    ((case-lambda
                                       ((g$t$8808$15i0ov)
                                        ((case-lambda
                                           ((g$ls/false$8809$15i0ov)
                                            (if g$ls/false$8809$15i0ov
                                              (apply
                                                (case-lambda (() '#f))
                                                g$ls/false$8809$15i0ov)
                                              (g$syntax-violation$7504$15i0ov
                                                '#f
                                                '"invalid syntax"
                                                g$t$8808$15i0ov))))
                                         (g$syntax-dispatch$7395$15i0ov
                                           g$t$8808$15i0ov
                                           '_))))
                                     g$t$8806$15i0ov))))
                               (g$syntax-dispatch$7395$15i0ov
                                 g$t$8806$15i0ov
                                 '(_ #(atom #t))))))
                           (g$get-clause$8618$15i0ov
                             'opaque
                             g$clause*$8788$15i0ov))
                          ((case-lambda
                             ((g$t$8810$15i0ov)
                              ((case-lambda
                                 ((g$ls/false$8811$15i0ov)
                                  (if g$ls/false$8811$15i0ov
                                    (apply
                                      (case-lambda
                                        ((g$field-spec*$8812$15i0ov)
                                         (list
                                           'quote
                                           (g$convert-field-spec*$8790$15i0ov
                                             g$field-spec*$8812$15i0ov))))
                                      g$ls/false$8811$15i0ov)
                                    ((case-lambda
                                       ((g$t$8813$15i0ov)
                                        ((case-lambda
                                           ((g$ls/false$8814$15i0ov)
                                            (if g$ls/false$8814$15i0ov
                                              (apply
                                                (case-lambda (() ''#()))
                                                g$ls/false$8814$15i0ov)
                                              (g$syntax-violation$7504$15i0ov
                                                '#f
                                                '"invalid syntax"
                                                g$t$8813$15i0ov))))
                                         (g$syntax-dispatch$7395$15i0ov
                                           g$t$8813$15i0ov
                                           '_))))
                                     g$t$8810$15i0ov))))
                               (g$syntax-dispatch$7395$15i0ov
                                 g$t$8810$15i0ov
                                 '(_ . each-any)))))
                           (g$get-clause$8618$15i0ov
                             'fields
                             g$clause*$8788$15i0ov)))))))
                  (g$parent-rtd-code$8620$15i0ov
                    (case-lambda
                      ((g$clause*$8775$15i0ov)
                       ((case-lambda
                          ((g$t$8776$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8777$15i0ov)
                               (if g$ls/false$8777$15i0ov
                                 (apply
                                   (case-lambda
                                     ((g$name$8778$15i0ov)
                                      (list
                                        'record-type-descriptor
                                        g$name$8778$15i0ov)))
                                   g$ls/false$8777$15i0ov)
                                 ((case-lambda
                                    ((g$t$8779$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8780$15i0ov)
                                         (if g$ls/false$8780$15i0ov
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8781$15i0ov)
                                                    ((case-lambda
                                                       ((g$ls/false$8782$15i0ov)
                                                        (if g$ls/false$8782$15i0ov
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8783$15i0ov
                                                                 g$rcd$8784$15i0ov)
                                                               g$rtd$8783$15i0ov))
                                                            g$ls/false$8782$15i0ov)
                                                          ((case-lambda
                                                             ((g$t$8785$15i0ov)
                                                              ((case-lambda
                                                                 ((g$ls/false$8786$15i0ov)
                                                                  (if g$ls/false$8786$15i0ov
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8786$15i0ov)
                                                                    (g$syntax-violation$7504$15i0ov
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8785$15i0ov))))
                                                               (g$syntax-dispatch$7395$15i0ov
                                                                 g$t$8785$15i0ov
                                                                 '#(atom #f)))))
                                                           g$t$8781$15i0ov))))
                                                     (g$syntax-dispatch$7395$15i0ov
                                                       g$t$8781$15i0ov
                                                       '(_ any any)))))
                                                 (g$get-clause$8618$15i0ov
                                                   'parent-rtd
                                                   g$clause*$8775$15i0ov))))
                                             g$ls/false$8780$15i0ov)
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$t$8779$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8779$15i0ov
                                        '#(atom #f)))))
                                  g$t$8776$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8776$15i0ov
                              '(_ any)))))
                        (g$get-clause$8618$15i0ov
                          'parent
                          g$clause*$8775$15i0ov)))))
                  (g$parent-rcd-code$8621$15i0ov
                    (case-lambda
                      ((g$clause*$8763$15i0ov)
                       ((case-lambda
                          ((g$t$8764$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8765$15i0ov)
                               (if g$ls/false$8765$15i0ov
                                 (apply
                                   (case-lambda
                                     ((g$name$8766$15i0ov)
                                      (list
                                        'record-constructor-descriptor
                                        g$name$8766$15i0ov)))
                                   g$ls/false$8765$15i0ov)
                                 ((case-lambda
                                    ((g$t$8767$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8768$15i0ov)
                                         (if g$ls/false$8768$15i0ov
                                           (apply
                                             (case-lambda
                                               (()
                                                ((case-lambda
                                                   ((g$t$8769$15i0ov)
                                                    ((case-lambda
                                                       ((g$ls/false$8770$15i0ov)
                                                        (if g$ls/false$8770$15i0ov
                                                          (apply
                                                            (case-lambda
                                                              ((g$rtd$8771$15i0ov
                                                                 g$rcd$8772$15i0ov)
                                                               g$rcd$8772$15i0ov))
                                                            g$ls/false$8770$15i0ov)
                                                          ((case-lambda
                                                             ((g$t$8773$15i0ov)
                                                              ((case-lambda
                                                                 ((g$ls/false$8774$15i0ov)
                                                                  (if g$ls/false$8774$15i0ov
                                                                    (apply
                                                                      (case-lambda
                                                                        (()
                                                                         '#f))
                                                                      g$ls/false$8774$15i0ov)
                                                                    (g$syntax-violation$7504$15i0ov
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8773$15i0ov))))
                                                               (g$syntax-dispatch$7395$15i0ov
                                                                 g$t$8773$15i0ov
                                                                 '#(atom #f)))))
                                                           g$t$8769$15i0ov))))
                                                     (g$syntax-dispatch$7395$15i0ov
                                                       g$t$8769$15i0ov
                                                       '(_ any any)))))
                                                 (g$get-clause$8618$15i0ov
                                                   'parent-rtd
                                                   g$clause*$8763$15i0ov))))
                                             g$ls/false$8768$15i0ov)
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$t$8767$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8767$15i0ov
                                        '#(atom #f)))))
                                  g$t$8764$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8764$15i0ov
                              '(_ any)))))
                        (g$get-clause$8618$15i0ov
                          'parent
                          g$clause*$8763$15i0ov)))))
                  (g$foo-rcd-code$8622$15i0ov
                    (case-lambda
                      ((g$clause*$8759$15i0ov
                         g$foo-rtd$8760$15i0ov
                         g$protocol$8761$15i0ov
                         g$parent-rcd-code$8762$15i0ov)
                       (list
                         'make-record-constructor-descriptor
                         g$foo-rtd$8760$15i0ov
                         g$parent-rcd-code$8762$15i0ov
                         g$protocol$8761$15i0ov))))
                  (g$get-protocol-code$8623$15i0ov
                    (case-lambda
                      ((g$clause*$8753$15i0ov)
                       ((case-lambda
                          ((g$t$8754$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8755$15i0ov)
                               (if g$ls/false$8755$15i0ov
                                 (apply
                                   (case-lambda
                                     ((g$expr$8756$15i0ov) g$expr$8756$15i0ov))
                                   g$ls/false$8755$15i0ov)
                                 ((case-lambda
                                    ((g$t$8757$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8758$15i0ov)
                                         (if g$ls/false$8758$15i0ov
                                           (apply
                                             (case-lambda (() '#f))
                                             g$ls/false$8758$15i0ov)
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$t$8757$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8757$15i0ov
                                        '_))))
                                  g$t$8754$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8754$15i0ov
                              '(_ any)))))
                        (g$get-clause$8618$15i0ov
                          'protocol
                          g$clause*$8753$15i0ov)))))
                  (g$get-fields$8624$15i0ov
                    (case-lambda
                      ((g$clause*$8744$15i0ov)
                       ((case-lambda
                          ((g$t$8745$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8746$15i0ov)
                               (if g$ls/false$8746$15i0ov
                                 (apply
                                   (case-lambda (() '()))
                                   g$ls/false$8746$15i0ov)
                                 ((case-lambda
                                    ((g$t$8747$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8748$15i0ov)
                                         (if g$ls/false$8748$15i0ov
                                           (apply
                                             (case-lambda
                                               ((g$f*$8749$15i0ov)
                                                g$f*$8749$15i0ov))
                                             g$ls/false$8748$15i0ov)
                                           ((case-lambda
                                              ((g$t$8750$15i0ov)
                                               ((case-lambda
                                                  ((g$ls/false$8751$15i0ov)
                                                   (if g$ls/false$8751$15i0ov
                                                     (apply
                                                       (case-lambda
                                                         ((g$rest$8752$15i0ov)
                                                          (g$get-fields$8624$15i0ov
                                                            g$rest$8752$15i0ov)))
                                                       g$ls/false$8751$15i0ov)
                                                     (g$syntax-violation$7504$15i0ov
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$8750$15i0ov))))
                                                (g$syntax-dispatch$7395$15i0ov
                                                  g$t$8750$15i0ov
                                                  '(_ . any)))))
                                            g$t$8747$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8747$15i0ov
                                        '((#(scheme-id fields) . each-any)
                                          .
                                          _)))))
                                  g$t$8745$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8745$15i0ov
                              '()))))
                        g$clause*$8744$15i0ov))))
                  (g$get-mutator-indices$8625$15i0ov
                    (case-lambda
                      ((g$fields$8732$15i0ov)
                       ((letrec ((g$f$8733$15i0ov
                                   (case-lambda
                                     ((g$fields$8734$15i0ov g$i$8735$15i0ov)
                                      ((case-lambda
                                         ((g$t$8736$15i0ov)
                                          ((case-lambda
                                             ((g$ls/false$8737$15i0ov)
                                              (if g$ls/false$8737$15i0ov
                                                (apply
                                                  (case-lambda (() '()))
                                                  g$ls/false$8737$15i0ov)
                                                ((case-lambda
                                                   ((g$t$8738$15i0ov)
                                                    ((case-lambda
                                                       ((g$ls/false$8739$15i0ov)
                                                        (if g$ls/false$8739$15i0ov
                                                          (apply
                                                            (case-lambda
                                                              ((g$rest$8740$15i0ov)
                                                               (cons
                                                                 g$i$8735$15i0ov
                                                                 (g$f$8733$15i0ov
                                                                   g$rest$8740$15i0ov
                                                                   (+ g$i$8735$15i0ov
                                                                      '1)))))
                                                            g$ls/false$8739$15i0ov)
                                                          ((case-lambda
                                                             ((g$t$8741$15i0ov)
                                                              ((case-lambda
                                                                 ((g$ls/false$8742$15i0ov)
                                                                  (if g$ls/false$8742$15i0ov
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$rest$8743$15i0ov)
                                                                         (g$f$8733$15i0ov
                                                                           g$rest$8743$15i0ov
                                                                           (+ g$i$8735$15i0ov
                                                                              '1))))
                                                                      g$ls/false$8742$15i0ov)
                                                                    (g$syntax-violation$7504$15i0ov
                                                                      '#f
                                                                      '"invalid syntax"
                                                                      g$t$8741$15i0ov))))
                                                               (g$syntax-dispatch$7395$15i0ov
                                                                 g$t$8741$15i0ov
                                                                 '(_ . any)))))
                                                           g$t$8738$15i0ov))))
                                                     (g$syntax-dispatch$7395$15i0ov
                                                       g$t$8738$15i0ov
                                                       '((#(scheme-id mutable)
                                                          .
                                                          _)
                                                         .
                                                         any)))))
                                                 g$t$8736$15i0ov))))
                                           (g$syntax-dispatch$7395$15i0ov
                                             g$t$8736$15i0ov
                                             '()))))
                                       g$fields$8734$15i0ov)))))
                          g$f$8733$15i0ov)
                        g$fields$8732$15i0ov
                        '0))))
                  (g$get-mutators$8626$15i0ov
                    (case-lambda
                      ((g$foo$8711$15i0ov g$fields$8712$15i0ov)
                       (letrec* ((g$gen-name$8713$15i0ov
                                   (case-lambda
                                     ((g$x$8731$15i0ov)
                                      (g$datum->syntax$7506$15i0ov
                                        g$foo$8711$15i0ov
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7507$15i0ov
                                                g$foo$8711$15i0ov))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7507$15i0ov
                                                g$x$8731$15i0ov))
                                            '"-set!")))))))
                         ((letrec ((g$f$8714$15i0ov
                                     (case-lambda
                                       ((g$fields$8715$15i0ov)
                                        ((case-lambda
                                           ((g$t$8716$15i0ov)
                                            ((case-lambda
                                               ((g$ls/false$8717$15i0ov)
                                                (if g$ls/false$8717$15i0ov
                                                  (apply
                                                    (case-lambda (() '()))
                                                    g$ls/false$8717$15i0ov)
                                                  ((case-lambda
                                                     ((g$t$8718$15i0ov)
                                                      ((case-lambda
                                                         ((g$ls/false$8719$15i0ov)
                                                          (if g$ls/false$8719$15i0ov
                                                            (apply
                                                              (case-lambda
                                                                ((g$name$8720$15i0ov
                                                                   g$accessor$8721$15i0ov
                                                                   g$mutator$8722$15i0ov
                                                                   g$rest$8723$15i0ov)
                                                                 (cons
                                                                   g$mutator$8722$15i0ov
                                                                   (g$f$8714$15i0ov
                                                                     g$rest$8723$15i0ov))))
                                                              g$ls/false$8719$15i0ov)
                                                            ((case-lambda
                                                               ((g$t$8724$15i0ov)
                                                                ((case-lambda
                                                                   ((g$ls/false$8725$15i0ov)
                                                                    (if g$ls/false$8725$15i0ov
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$name$8726$15i0ov
                                                                             g$rest$8727$15i0ov)
                                                                           (cons
                                                                             (g$gen-name$8713$15i0ov
                                                                               g$name$8726$15i0ov)
                                                                             (g$f$8714$15i0ov
                                                                               g$rest$8727$15i0ov))))
                                                                        g$ls/false$8725$15i0ov)
                                                                      ((case-lambda
                                                                         ((g$t$8728$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$ls/false$8729$15i0ov)
                                                                              (if g$ls/false$8729$15i0ov
                                                                                (apply
                                                                                  (case-lambda
                                                                                    ((g$rest$8730$15i0ov)
                                                                                     (g$f$8714$15i0ov
                                                                                       g$rest$8730$15i0ov)))
                                                                                  g$ls/false$8729$15i0ov)
                                                                                (g$syntax-violation$7504$15i0ov
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$8728$15i0ov))))
                                                                           (g$syntax-dispatch$7395$15i0ov
                                                                             g$t$8728$15i0ov
                                                                             '(_ .
                                                                                 any)))))
                                                                       g$t$8724$15i0ov))))
                                                                 (g$syntax-dispatch$7395$15i0ov
                                                                   g$t$8724$15i0ov
                                                                   '((#(scheme-id
                                                                        mutable)
                                                                      any)
                                                                     .
                                                                     any)))))
                                                             g$t$8718$15i0ov))))
                                                       (g$syntax-dispatch$7395$15i0ov
                                                         g$t$8718$15i0ov
                                                         '((#(scheme-id mutable)
                                                            any
                                                            any
                                                            any)
                                                           .
                                                           any)))))
                                                   g$t$8716$15i0ov))))
                                             (g$syntax-dispatch$7395$15i0ov
                                               g$t$8716$15i0ov
                                               '()))))
                                         g$fields$8715$15i0ov)))))
                            g$f$8714$15i0ov)
                          g$fields$8712$15i0ov)))))
                  (g$get-accessors$8627$15i0ov
                    (case-lambda
                      ((g$foo$8677$15i0ov g$fields$8678$15i0ov)
                       (letrec* ((g$gen-name$8679$15i0ov
                                   (case-lambda
                                     ((g$x$8710$15i0ov)
                                      (g$datum->syntax$7506$15i0ov
                                        g$foo$8677$15i0ov
                                        (string->symbol
                                          (string-append
                                            (symbol->string
                                              (g$syntax->datum$7507$15i0ov
                                                g$foo$8677$15i0ov))
                                            '"-"
                                            (symbol->string
                                              (g$syntax->datum$7507$15i0ov
                                                g$x$8710$15i0ov)))))))))
                         (map (case-lambda
                                ((g$field$8680$15i0ov)
                                 ((case-lambda
                                    ((g$t$8681$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8682$15i0ov)
                                         (if (if g$ls/false$8682$15i0ov
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$name$8683$15i0ov
                                                        g$accessor$8684$15i0ov
                                                        g$mutator$8685$15i0ov)
                                                      (g$id?$7117$15i0ov
                                                        g$accessor$8684$15i0ov)))
                                                   g$ls/false$8682$15i0ov))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$name$8686$15i0ov
                                                  g$accessor$8687$15i0ov
                                                  g$mutator$8688$15i0ov)
                                                g$accessor$8687$15i0ov))
                                             g$ls/false$8682$15i0ov)
                                           ((case-lambda
                                              ((g$t$8689$15i0ov)
                                               ((case-lambda
                                                  ((g$ls/false$8690$15i0ov)
                                                   (if (if g$ls/false$8690$15i0ov
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$name$8691$15i0ov
                                                                  g$accessor$8692$15i0ov)
                                                                (g$id?$7117$15i0ov
                                                                  g$accessor$8692$15i0ov)))
                                                             g$ls/false$8690$15i0ov))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$name$8693$15i0ov
                                                            g$accessor$8694$15i0ov)
                                                          g$accessor$8694$15i0ov))
                                                       g$ls/false$8690$15i0ov)
                                                     ((case-lambda
                                                        ((g$t$8695$15i0ov)
                                                         ((case-lambda
                                                            ((g$ls/false$8696$15i0ov)
                                                             (if (if g$ls/false$8696$15i0ov
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$name$8697$15i0ov)
                                                                          (g$id?$7117$15i0ov
                                                                            g$name$8697$15i0ov)))
                                                                       g$ls/false$8696$15i0ov))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$name$8698$15i0ov)
                                                                    (g$gen-name$8679$15i0ov
                                                                      g$name$8698$15i0ov)))
                                                                 g$ls/false$8696$15i0ov)
                                                               ((case-lambda
                                                                  ((g$t$8699$15i0ov)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8700$15i0ov)
                                                                       (if (if g$ls/false$8700$15i0ov
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$name$8701$15i0ov)
                                                                                    (g$id?$7117$15i0ov
                                                                                      g$name$8701$15i0ov)))
                                                                                 g$ls/false$8700$15i0ov))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$name$8702$15i0ov)
                                                                              (g$gen-name$8679$15i0ov
                                                                                g$name$8702$15i0ov)))
                                                                           g$ls/false$8700$15i0ov)
                                                                         ((case-lambda
                                                                            ((g$t$8703$15i0ov)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8704$15i0ov)
                                                                                 (if (if g$ls/false$8704$15i0ov
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$name$8705$15i0ov)
                                                                                              (g$id?$7117$15i0ov
                                                                                                g$name$8705$15i0ov)))
                                                                                           g$ls/false$8704$15i0ov))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$name$8706$15i0ov)
                                                                                        (g$gen-name$8679$15i0ov
                                                                                          g$name$8706$15i0ov)))
                                                                                     g$ls/false$8704$15i0ov)
                                                                                   ((case-lambda
                                                                                      ((g$t$8707$15i0ov)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8708$15i0ov)
                                                                                           (if g$ls/false$8708$15i0ov
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$others$8709$15i0ov)
                                                                                                  (g$syntax-violation$7504$15i0ov
                                                                                                    '#f
                                                                                                    '"invalid field spec"
                                                                                                    g$field$8680$15i0ov)))
                                                                                               g$ls/false$8708$15i0ov)
                                                                                             (g$syntax-violation$7504$15i0ov
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8707$15i0ov))))
                                                                                        (g$syntax-dispatch$7395$15i0ov
                                                                                          g$t$8707$15i0ov
                                                                                          'any))))
                                                                                    g$t$8703$15i0ov))))
                                                                              (g$syntax-dispatch$7395$15i0ov
                                                                                g$t$8703$15i0ov
                                                                                'any))))
                                                                          g$t$8699$15i0ov))))
                                                                    (g$syntax-dispatch$7395$15i0ov
                                                                      g$t$8699$15i0ov
                                                                      '(#(scheme-id
                                                                          immutable)
                                                                        any)))))
                                                                g$t$8695$15i0ov))))
                                                          (g$syntax-dispatch$7395$15i0ov
                                                            g$t$8695$15i0ov
                                                            '(#(scheme-id
                                                                mutable)
                                                              any)))))
                                                      g$t$8689$15i0ov))))
                                                (g$syntax-dispatch$7395$15i0ov
                                                  g$t$8689$15i0ov
                                                  '(#(scheme-id immutable)
                                                    any
                                                    any)))))
                                            g$t$8681$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8681$15i0ov
                                        '(#(scheme-id mutable) any any any)))))
                                  g$field$8680$15i0ov)))
                              g$fields$8678$15i0ov)))))
                  (g$enumerate$8628$15i0ov
                    (case-lambda
                      ((g$ls$8673$15i0ov)
                       ((letrec ((g$f$8674$15i0ov
                                   (case-lambda
                                     ((g$ls$8675$15i0ov g$i$8676$15i0ov)
                                      (if (null? g$ls$8675$15i0ov)
                                        '()
                                        (cons
                                          g$i$8676$15i0ov
                                          (g$f$8674$15i0ov
                                            (cdr g$ls$8675$15i0ov)
                                            (+ g$i$8676$15i0ov '1))))))))
                          g$f$8674$15i0ov)
                        g$ls$8673$15i0ov
                        '0))))
                  (g$do-define-record$8629$15i0ov
                    (case-lambda
                      ((g$namespec$8653$15i0ov g$clause*$8654$15i0ov)
                       ((case-lambda
                          ((g$foo$8655$15i0ov)
                           ((case-lambda
                              ((g$foo-rtd$8656$15i0ov)
                               ((case-lambda
                                  ((g$foo-rcd$8657$15i0ov)
                                   ((case-lambda
                                      ((g$protocol$8658$15i0ov)
                                       ((case-lambda
                                          ((g$make-foo$8659$15i0ov)
                                           ((case-lambda
                                              ((g$fields$8660$15i0ov)
                                               ((case-lambda
                                                  ((g$idx*$8661$15i0ov)
                                                   ((case-lambda
                                                      ((g$foo-x*$8662$15i0ov)
                                                       ((case-lambda
                                                          ((g$set-foo-x!*$8663$15i0ov)
                                                           ((case-lambda
                                                              ((g$set-foo-idx*$8664$15i0ov)
                                                               ((case-lambda
                                                                  ((g$foo?$8665$15i0ov)
                                                                   ((case-lambda
                                                                      ((g$foo-rtd-code$8666$15i0ov)
                                                                       ((case-lambda
                                                                          ((g$foo-rcd-code$8667$15i0ov)
                                                                           ((case-lambda
                                                                              ((g$protocol-code$8668$15i0ov)
                                                                               ((case-lambda
                                                                                  (()
                                                                                   (g$bless$7358$15i0ov
                                                                                     (cons
                                                                                       'begin
                                                                                       (cons
                                                                                         (list
                                                                                           'define
                                                                                           g$foo-rtd$8656$15i0ov
                                                                                           g$foo-rtd-code$8666$15i0ov)
                                                                                         (cons
                                                                                           (list
                                                                                             'define
                                                                                             g$protocol$8658$15i0ov
                                                                                             g$protocol-code$8668$15i0ov)
                                                                                           (cons
                                                                                             (list
                                                                                               'define
                                                                                               g$foo-rcd$8657$15i0ov
                                                                                               g$foo-rcd-code$8667$15i0ov)
                                                                                             (cons
                                                                                               (list
                                                                                                 'define-syntax
                                                                                                 g$foo$8655$15i0ov
                                                                                                 (list
                                                                                                   'list
                                                                                                   ''$rtd
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rtd$8656$15i0ov)
                                                                                                   (list
                                                                                                     'syntax
                                                                                                     g$foo-rcd$8657$15i0ov)))
                                                                                               (cons
                                                                                                 (list
                                                                                                   'define
                                                                                                   g$foo?$8665$15i0ov
                                                                                                   (list
                                                                                                     'record-predicate
                                                                                                     g$foo-rtd$8656$15i0ov))
                                                                                                 (cons
                                                                                                   (list
                                                                                                     'define
                                                                                                     g$make-foo$8659$15i0ov
                                                                                                     (list
                                                                                                       'record-constructor
                                                                                                       g$foo-rcd$8657$15i0ov))
                                                                                                   (append
                                                                                                     (map (case-lambda
                                                                                                            ((g$foo-x$8669$15i0ov
                                                                                                               g$idx$8670$15i0ov)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$foo-x$8669$15i0ov
                                                                                                               (list
                                                                                                                 'record-accessor
                                                                                                                 g$foo-rtd$8656$15i0ov
                                                                                                                 g$idx$8670$15i0ov))))
                                                                                                          g$foo-x*$8662$15i0ov
                                                                                                          g$idx*$8661$15i0ov)
                                                                                                     (map (case-lambda
                                                                                                            ((g$set-foo-x!$8671$15i0ov
                                                                                                               g$idx$8672$15i0ov)
                                                                                                             (list
                                                                                                               'define
                                                                                                               g$set-foo-x!$8671$15i0ov
                                                                                                               (list
                                                                                                                 'record-mutator
                                                                                                                 g$foo-rtd$8656$15i0ov
                                                                                                                 g$idx$8672$15i0ov))))
                                                                                                          g$set-foo-x!*$8663$15i0ov
                                                                                                          g$set-foo-idx*$8664$15i0ov)))))))))))))))
                                                                            (g$get-protocol-code$8623$15i0ov
                                                                              g$clause*$8654$15i0ov))))
                                                                        (g$foo-rcd-code$8622$15i0ov
                                                                          g$clause*$8654$15i0ov
                                                                          g$foo-rtd$8656$15i0ov
                                                                          g$protocol$8658$15i0ov
                                                                          (g$parent-rcd-code$8621$15i0ov
                                                                            g$clause*$8654$15i0ov)))))
                                                                    (g$foo-rtd-code$8619$15i0ov
                                                                      g$foo$8655$15i0ov
                                                                      g$clause*$8654$15i0ov
                                                                      (g$parent-rtd-code$8620$15i0ov
                                                                        g$clause*$8654$15i0ov)))))
                                                                (g$get-record-predicate-name$8617$15i0ov
                                                                  g$namespec$8653$15i0ov))))
                                                            (g$get-mutator-indices$8625$15i0ov
                                                              g$fields$8660$15i0ov))))
                                                        (g$get-mutators$8626$15i0ov
                                                          g$foo$8655$15i0ov
                                                          g$fields$8660$15i0ov))))
                                                    (g$get-accessors$8627$15i0ov
                                                      g$foo$8655$15i0ov
                                                      g$fields$8660$15i0ov))))
                                                (g$enumerate$8628$15i0ov
                                                  g$fields$8660$15i0ov))))
                                            (g$get-fields$8624$15i0ov
                                              g$clause*$8654$15i0ov))))
                                        (g$get-record-constructor-name$8616$15i0ov
                                          g$namespec$8653$15i0ov))))
                                    (gensym))))
                                (gensym))))
                            (gensym))))
                        (g$get-record-name$8615$15i0ov
                          g$namespec$8653$15i0ov)))))
                  (g$verify-clauses$8630$15i0ov
                    (case-lambda
                      ((g$x$8635$15i0ov g$cls*$8636$15i0ov)
                       (letrec* ((g$valid-kwds$8637$15i0ov
                                   (map g$bless$7358$15i0ov
                                        '(fields
                                           parent
                                           parent-rtd
                                           protocol
                                           sealed
                                           opaque
                                           nongenerative)))
                                 (g$free-id-member?$8638$15i0ov
                                   (case-lambda
                                     ((g$x$8650$15i0ov g$ls$8651$15i0ov)
                                      (if (pair? g$ls$8651$15i0ov)
                                        (begin
                                          '#f
                                          ((case-lambda
                                             ((g$t$8652$15i0ov)
                                              (if g$t$8652$15i0ov
                                                g$t$8652$15i0ov
                                                (begin
                                                  '#f
                                                  (g$free-id-member?$8638$15i0ov
                                                    g$x$8650$15i0ov
                                                    (cdr g$ls$8651$15i0ov))))))
                                           (g$free-id=?$7121$15i0ov
                                             g$x$8650$15i0ov
                                             (car g$ls$8651$15i0ov))))
                                        '#f)))))
                         ((letrec ((g$f$8639$15i0ov
                                     (case-lambda
                                       ((g$cls*$8640$15i0ov g$seen*$8641$15i0ov)
                                        (if (not (null? g$cls*$8640$15i0ov))
                                          ((case-lambda
                                             ((g$t$8642$15i0ov)
                                              ((case-lambda
                                                 ((g$ls/false$8643$15i0ov)
                                                  (if g$ls/false$8643$15i0ov
                                                    (apply
                                                      (case-lambda
                                                        ((g$kwd$8644$15i0ov
                                                           g$rest$8645$15i0ov)
                                                         (if ((case-lambda
                                                                ((g$t$8646$15i0ov)
                                                                 (if g$t$8646$15i0ov
                                                                   g$t$8646$15i0ov
                                                                   (begin
                                                                     '#f
                                                                     (not (g$free-id-member?$8638$15i0ov
                                                                            g$kwd$8644$15i0ov
                                                                            g$valid-kwds$8637$15i0ov))))))
                                                              (not (g$id?$7117$15i0ov
                                                                     g$kwd$8644$15i0ov)))
                                                           (g$syntax-violation$7504$15i0ov
                                                             '#f
                                                             '"not a valid define-record-type keyword"
                                                             g$kwd$8644$15i0ov)
                                                           (if (g$bound-id-member?$7124$15i0ov
                                                                 g$kwd$8644$15i0ov
                                                                 g$seen*$8641$15i0ov)
                                                             (g$syntax-violation$7504$15i0ov
                                                               '#f
                                                               '"duplicate use of keyword "
                                                               g$x$8635$15i0ov
                                                               g$kwd$8644$15i0ov)
                                                             (g$f$8639$15i0ov
                                                               (cdr g$cls*$8640$15i0ov)
                                                               (cons
                                                                 g$kwd$8644$15i0ov
                                                                 g$seen*$8641$15i0ov))))))
                                                      g$ls/false$8643$15i0ov)
                                                    ((case-lambda
                                                       ((g$t$8647$15i0ov)
                                                        ((case-lambda
                                                           ((g$ls/false$8648$15i0ov)
                                                            (if g$ls/false$8648$15i0ov
                                                              (apply
                                                                (case-lambda
                                                                  ((g$cls$8649$15i0ov)
                                                                   (g$syntax-violation$7504$15i0ov
                                                                     '#f
                                                                     '"malformed define-record-type clause"
                                                                     g$cls$8649$15i0ov)))
                                                                g$ls/false$8648$15i0ov)
                                                              (g$syntax-violation$7504$15i0ov
                                                                '#f
                                                                '"invalid syntax"
                                                                g$t$8647$15i0ov))))
                                                         (g$syntax-dispatch$7395$15i0ov
                                                           g$t$8647$15i0ov
                                                           'any))))
                                                     g$t$8642$15i0ov))))
                                               (g$syntax-dispatch$7395$15i0ov
                                                 g$t$8642$15i0ov
                                                 '(any . any)))))
                                           (car g$cls*$8640$15i0ov))
                                          (void))))))
                            g$f$8639$15i0ov)
                          g$cls*$8636$15i0ov
                          '()))))))
          ((case-lambda
             ((g$t$8631$15i0ov)
              ((case-lambda
                 ((g$ls/false$8632$15i0ov)
                  (if g$ls/false$8632$15i0ov
                    (apply
                      (case-lambda
                        ((g$namespec$8633$15i0ov g$clause*$8634$15i0ov)
                         (begin
                           (g$verify-clauses$8630$15i0ov
                             g$x$8613$15i0ov
                             g$clause*$8634$15i0ov)
                           (g$do-define-record$8629$15i0ov
                             g$namespec$8633$15i0ov
                             g$clause*$8634$15i0ov))))
                      g$ls/false$8632$15i0ov)
                    (g$syntax-violation$7504$15i0ov
                      '#f
                      '"invalid syntax"
                      g$t$8631$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov
                 g$t$8631$15i0ov
                 '(_ any . each-any)))))
           g$x$8613$15i0ov)))))
   (g$define-condition-type-macro$7390$15i0ov
     g$define-condition-type-macro$10829$15i0ov
     (case-lambda
       ((g$x$8869$15i0ov)
        (letrec* ((g$mkname$8870$15i0ov
                    (case-lambda
                      ((g$name$8893$15i0ov g$suffix$8894$15i0ov)
                       (g$datum->syntax$7506$15i0ov
                         g$name$8893$15i0ov
                         (string->symbol
                           (string-append
                             (symbol->string
                               (g$syntax->datum$7507$15i0ov g$name$8893$15i0ov))
                             g$suffix$8894$15i0ov)))))))
          ((case-lambda
             ((g$t$8871$15i0ov)
              ((case-lambda
                 ((g$ls/false$8872$15i0ov)
                  (if (if g$ls/false$8872$15i0ov
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$ctxt$8873$15i0ov
                                 g$name$8874$15i0ov
                                 g$super$8875$15i0ov
                                 g$constructor$8876$15i0ov
                                 g$predicate$8877$15i0ov
                                 g$field*$8878$15i0ov
                                 g$accessor*$8879$15i0ov)
                               (if (g$id?$7117$15i0ov g$name$8874$15i0ov)
                                 (if (g$id?$7117$15i0ov g$super$8875$15i0ov)
                                   (if (g$id?$7117$15i0ov
                                         g$constructor$8876$15i0ov)
                                     (if (g$id?$7117$15i0ov
                                           g$predicate$8877$15i0ov)
                                       (if (g$for-all$5359$15i0ov
                                             g$id?$7117$15i0ov
                                             g$field*$8878$15i0ov)
                                         (begin
                                           '#f
                                           (g$for-all$5359$15i0ov
                                             g$id?$7117$15i0ov
                                             g$accessor*$8879$15i0ov))
                                         '#f)
                                       '#f)
                                     '#f)
                                   '#f)
                                 '#f)))
                            g$ls/false$8872$15i0ov))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$ctxt$8880$15i0ov
                           g$name$8881$15i0ov
                           g$super$8882$15i0ov
                           g$constructor$8883$15i0ov
                           g$predicate$8884$15i0ov
                           g$field*$8885$15i0ov
                           g$accessor*$8886$15i0ov)
                         ((case-lambda
                            ((g$aux-accessor*$8887$15i0ov)
                             (g$bless$7358$15i0ov
                               (cons
                                 'begin
                                 (cons
                                   (cons
                                     'define-record-type
                                     (cons
                                       (list
                                         g$name$8881$15i0ov
                                         g$constructor$8883$15i0ov
                                         (gensym))
                                       (cons
                                         (list 'parent g$super$8882$15i0ov)
                                         (cons
                                           (cons
                                             'fields
                                             (map (case-lambda
                                                    ((g$field$8888$15i0ov
                                                       g$aux$8889$15i0ov)
                                                     (list
                                                       'immutable
                                                       g$field$8888$15i0ov
                                                       g$aux$8889$15i0ov)))
                                                  g$field*$8885$15i0ov
                                                  g$aux-accessor*$8887$15i0ov))
                                           '((nongenerative)
                                             (sealed #f)
                                             (opaque #f))))))
                                   (cons
                                     (list
                                       'define
                                       g$predicate$8884$15i0ov
                                       (list
                                         'condition-predicate
                                         (list
                                           'record-type-descriptor
                                           g$name$8881$15i0ov)))
                                     (map (case-lambda
                                            ((g$accessor$8890$15i0ov
                                               g$aux$8891$15i0ov)
                                             (list
                                               'define
                                               g$accessor$8890$15i0ov
                                               (list
                                                 'condition-accessor
                                                 (list
                                                   'record-type-descriptor
                                                   g$name$8881$15i0ov)
                                                 g$aux$8891$15i0ov))))
                                          g$accessor*$8886$15i0ov
                                          g$aux-accessor*$8887$15i0ov)))))))
                          (map (case-lambda ((g$x$8892$15i0ov) (gensym)))
                               g$accessor*$8886$15i0ov))))
                      g$ls/false$8872$15i0ov)
                    (g$syntax-violation$7504$15i0ov
                      '#f
                      '"invalid syntax"
                      g$t$8871$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov
                 g$t$8871$15i0ov
                 '(any any any any any . #(each (any any)))))))
           g$x$8869$15i0ov)))))
   (g$incorrect-usage-macro$7391$15i0ov
     g$incorrect-usage-macro$10830$15i0ov
     (case-lambda
       ((g$e$8895$15i0ov)
        (g$syntax-violation$7504$15i0ov
          '#f
          '"incorrect usage of auxiliary keyword"
          g$e$8895$15i0ov))))
   (g$parameterize-macro$7392$15i0ov
     g$parameterize-macro$10831$15i0ov
     (case-lambda
       ((g$e$8896$15i0ov)
        ((case-lambda
           ((g$t$8897$15i0ov)
            ((case-lambda
               ((g$ls/false$8898$15i0ov)
                (if g$ls/false$8898$15i0ov
                  (apply
                    (case-lambda
                      ((g$b$8899$15i0ov g$b*$8900$15i0ov)
                       (g$bless$7358$15i0ov
                         (cons
                           'begin
                           (cons g$b$8899$15i0ov g$b*$8900$15i0ov)))))
                    g$ls/false$8898$15i0ov)
                  ((case-lambda
                     ((g$t$8901$15i0ov)
                      ((case-lambda
                         ((g$ls/false$8902$15i0ov)
                          (if g$ls/false$8902$15i0ov
                            (apply
                              (case-lambda
                                ((g$olhs*$8903$15i0ov
                                   g$orhs*$8904$15i0ov
                                   g$b$8905$15i0ov
                                   g$b*$8906$15i0ov)
                                 ((case-lambda
                                    ((g$lhs*$8907$15i0ov g$rhs*$8908$15i0ov)
                                     (g$bless$7358$15i0ov
                                       (cons
                                         (list
                                           'lambda
                                           (append
                                             g$lhs*$8907$15i0ov
                                             g$rhs*$8908$15i0ov)
                                           (list
                                             'let
                                             (list
                                               (list
                                                 'swap
                                                 (cons
                                                   'lambda
                                                   (cons
                                                     '()
                                                     (map (case-lambda
                                                            ((g$lhs$8909$15i0ov
                                                               g$rhs$8910$15i0ov)
                                                             (list
                                                               'let
                                                               (list
                                                                 (list
                                                                   't
                                                                   (list
                                                                     g$lhs$8909$15i0ov)))
                                                               (list
                                                                 g$lhs$8909$15i0ov
                                                                 g$rhs$8910$15i0ov)
                                                               (cons
                                                                 'set!
                                                                 (cons
                                                                   g$rhs$8910$15i0ov
                                                                   '(t))))))
                                                          g$lhs*$8907$15i0ov
                                                          g$rhs*$8908$15i0ov)))))
                                             (cons
                                               'dynamic-wind
                                               (cons
                                                 'swap
                                                 (cons
                                                   (cons
                                                     'lambda
                                                     (cons
                                                       '()
                                                       (cons
                                                         g$b$8905$15i0ov
                                                         g$b*$8906$15i0ov)))
                                                   '(swap))))))
                                         (append
                                           g$olhs*$8903$15i0ov
                                           g$orhs*$8904$15i0ov)))))
                                  (g$generate-temporaries$7494$15i0ov
                                    g$olhs*$8903$15i0ov)
                                  (g$generate-temporaries$7494$15i0ov
                                    g$orhs*$8904$15i0ov))))
                              g$ls/false$8902$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$8901$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$8901$15i0ov
                         '(_ #(each (any any)) any . each-any)))))
                   g$t$8897$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$8897$15i0ov
               '(_ () any . each-any)))))
         g$e$8896$15i0ov))))
   (g$foreign-call-transformer$7393$15i0ov
     g$foreign-call-transformer$10832$15i0ov
     (case-lambda
       ((g$e$8911$15i0ov g$r$8912$15i0ov g$mr$8913$15i0ov)
        ((case-lambda
           ((g$t$8914$15i0ov)
            ((case-lambda
               ((g$ls/false$8915$15i0ov)
                (if g$ls/false$8915$15i0ov
                  (apply
                    (case-lambda
                      ((g$name$8916$15i0ov g$arg*$8917$15i0ov)
                       (cons
                         'foreign-call
                         (cons
                           (g$chi-expr$7413$15i0ov
                             g$name$8916$15i0ov
                             g$r$8912$15i0ov
                             g$mr$8913$15i0ov)
                           (g$chi-expr*$7411$15i0ov
                             g$arg*$8917$15i0ov
                             g$r$8912$15i0ov
                             g$mr$8913$15i0ov)))))
                    g$ls/false$8915$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$8914$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$8914$15i0ov
               '(_ any . each-any)))))
         g$e$8911$15i0ov))))
   (g$convert-pattern$7394$15i0ov
     g$convert-pattern$10833$15i0ov
     (case-lambda
       ((g$pattern$8918$15i0ov g$keys$8919$15i0ov)
        (letrec* ((g$cvt*$8920$15i0ov
                    (case-lambda
                      ((g$p*$9000$15i0ov g$n$9001$15i0ov g$ids$9002$15i0ov)
                       (if (null? g$p*$9000$15i0ov)
                         (values '() g$ids$9002$15i0ov)
                         (call-with-values
                           (case-lambda
                             (()
                              (g$cvt*$8920$15i0ov
                                (cdr g$p*$9000$15i0ov)
                                g$n$9001$15i0ov
                                g$ids$9002$15i0ov)))
                           (case-lambda
                             ((g$y$9005$15i0ov g$ids$9006$15i0ov)
                              ((case-lambda
                                 ((g$ids$9007$15i0ov g$y$9008$15i0ov)
                                  (call-with-values
                                    (case-lambda
                                      (()
                                       (g$cvt$8921$15i0ov
                                         (car g$p*$9000$15i0ov)
                                         g$n$9001$15i0ov
                                         g$ids$9007$15i0ov)))
                                    (case-lambda
                                      ((g$x$9011$15i0ov g$ids$9012$15i0ov)
                                       ((case-lambda
                                          ((g$ids$9013$15i0ov g$x$9014$15i0ov)
                                           (values
                                             (cons
                                               g$x$9014$15i0ov
                                               g$y$9008$15i0ov)
                                             g$ids$9013$15i0ov)))
                                        g$ids$9012$15i0ov
                                        g$x$9011$15i0ov))))))
                               g$ids$9006$15i0ov
                               g$y$9005$15i0ov))))))))
                  (g$cvt$8921$15i0ov
                    (case-lambda
                      ((g$p$8922$15i0ov g$n$8923$15i0ov g$ids$8924$15i0ov)
                       ((case-lambda
                          ((g$t$8925$15i0ov)
                           ((case-lambda
                              ((g$ls/false$8926$15i0ov)
                               (if (if g$ls/false$8926$15i0ov
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$id$8927$15i0ov)
                                            (g$id?$7117$15i0ov
                                              g$id$8927$15i0ov)))
                                         g$ls/false$8926$15i0ov))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$id$8928$15i0ov)
                                      (if (g$bound-id-member?$7124$15i0ov
                                            g$p$8922$15i0ov
                                            g$keys$8919$15i0ov)
                                        (values
                                          (vector 'free-id g$p$8922$15i0ov)
                                          g$ids$8924$15i0ov)
                                        (if (g$free-id=?$7121$15i0ov
                                              g$p$8922$15i0ov
                                              (g$scheme-stx$7338$15i0ov '_))
                                          (values '_ g$ids$8924$15i0ov)
                                          (values
                                            'any
                                            (cons
                                              (cons
                                                g$p$8922$15i0ov
                                                g$n$8923$15i0ov)
                                              g$ids$8924$15i0ov))))))
                                   g$ls/false$8926$15i0ov)
                                 ((case-lambda
                                    ((g$t$8929$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$8930$15i0ov)
                                         (if (if g$ls/false$8930$15i0ov
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$p$8931$15i0ov
                                                        g$dots$8932$15i0ov)
                                                      (g$ellipsis?$7396$15i0ov
                                                        g$dots$8932$15i0ov)))
                                                   g$ls/false$8930$15i0ov))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$p$8933$15i0ov
                                                  g$dots$8934$15i0ov)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$cvt$8921$15i0ov
                                                       g$p$8933$15i0ov
                                                       (+ g$n$8923$15i0ov '1)
                                                       g$ids$8924$15i0ov)))
                                                  (case-lambda
                                                    ((g$p$8937$15i0ov
                                                       g$ids$8938$15i0ov)
                                                     ((case-lambda
                                                        ((g$ids$8939$15i0ov
                                                           g$p$8940$15i0ov)
                                                         (values
                                                           (if (eq? g$p$8940$15i0ov
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               g$p$8940$15i0ov))
                                                           g$ids$8939$15i0ov)))
                                                      g$ids$8938$15i0ov
                                                      g$p$8937$15i0ov))))))
                                             g$ls/false$8930$15i0ov)
                                           ((case-lambda
                                              ((g$t$8941$15i0ov)
                                               ((case-lambda
                                                  ((g$ls/false$8942$15i0ov)
                                                   (if (if g$ls/false$8942$15i0ov
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$x$8943$15i0ov
                                                                  g$dots$8944$15i0ov
                                                                  g$ys$8945$15i0ov
                                                                  g$z$8946$15i0ov)
                                                                (g$ellipsis?$7396$15i0ov
                                                                  g$dots$8944$15i0ov)))
                                                             g$ls/false$8942$15i0ov))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$8947$15i0ov
                                                            g$dots$8948$15i0ov
                                                            g$ys$8949$15i0ov
                                                            g$z$8950$15i0ov)
                                                          (call-with-values
                                                            (case-lambda
                                                              (()
                                                               (g$cvt$8921$15i0ov
                                                                 g$z$8950$15i0ov
                                                                 g$n$8923$15i0ov
                                                                 g$ids$8924$15i0ov)))
                                                            (case-lambda
                                                              ((g$z$8953$15i0ov
                                                                 g$ids$8954$15i0ov)
                                                               ((case-lambda
                                                                  ((g$ids$8955$15i0ov
                                                                     g$z$8956$15i0ov)
                                                                   (call-with-values
                                                                     (case-lambda
                                                                       (()
                                                                        (g$cvt*$8920$15i0ov
                                                                          g$ys$8949$15i0ov
                                                                          g$n$8923$15i0ov
                                                                          g$ids$8955$15i0ov)))
                                                                     (case-lambda
                                                                       ((g$ys$8959$15i0ov
                                                                          g$ids$8960$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$ids$8961$15i0ov
                                                                              g$ys$8962$15i0ov)
                                                                            (call-with-values
                                                                              (case-lambda
                                                                                (()
                                                                                 (g$cvt$8921$15i0ov
                                                                                   g$x$8947$15i0ov
                                                                                   (+ g$n$8923$15i0ov
                                                                                      '1)
                                                                                   g$ids$8961$15i0ov)))
                                                                              (case-lambda
                                                                                ((g$x$8965$15i0ov
                                                                                   g$ids$8966$15i0ov)
                                                                                 ((case-lambda
                                                                                    ((g$ids$8967$15i0ov
                                                                                       g$x$8968$15i0ov)
                                                                                     (values
                                                                                       (vector
                                                                                         'each+
                                                                                         g$x$8968$15i0ov
                                                                                         (reverse
                                                                                           g$ys$8962$15i0ov)
                                                                                         g$z$8956$15i0ov)
                                                                                       g$ids$8967$15i0ov)))
                                                                                  g$ids$8966$15i0ov
                                                                                  g$x$8965$15i0ov))))))
                                                                         g$ids$8960$15i0ov
                                                                         g$ys$8959$15i0ov))))))
                                                                g$ids$8954$15i0ov
                                                                g$z$8953$15i0ov))))))
                                                       g$ls/false$8942$15i0ov)
                                                     ((case-lambda
                                                        ((g$t$8969$15i0ov)
                                                         ((case-lambda
                                                            ((g$ls/false$8970$15i0ov)
                                                             (if g$ls/false$8970$15i0ov
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$x$8971$15i0ov
                                                                      g$y$8972$15i0ov)
                                                                    (call-with-values
                                                                      (case-lambda
                                                                        (()
                                                                         (g$cvt$8921$15i0ov
                                                                           g$y$8972$15i0ov
                                                                           g$n$8923$15i0ov
                                                                           g$ids$8924$15i0ov)))
                                                                      (case-lambda
                                                                        ((g$y$8975$15i0ov
                                                                           g$ids$8976$15i0ov)
                                                                         ((case-lambda
                                                                            ((g$ids$8977$15i0ov
                                                                               g$y$8978$15i0ov)
                                                                             (call-with-values
                                                                               (case-lambda
                                                                                 (()
                                                                                  (g$cvt$8921$15i0ov
                                                                                    g$x$8971$15i0ov
                                                                                    g$n$8923$15i0ov
                                                                                    g$ids$8977$15i0ov)))
                                                                               (case-lambda
                                                                                 ((g$x$8981$15i0ov
                                                                                    g$ids$8982$15i0ov)
                                                                                  ((case-lambda
                                                                                     ((g$ids$8983$15i0ov
                                                                                        g$x$8984$15i0ov)
                                                                                      (values
                                                                                        (cons
                                                                                          g$x$8984$15i0ov
                                                                                          g$y$8978$15i0ov)
                                                                                        g$ids$8983$15i0ov)))
                                                                                   g$ids$8982$15i0ov
                                                                                   g$x$8981$15i0ov))))))
                                                                          g$ids$8976$15i0ov
                                                                          g$y$8975$15i0ov))))))
                                                                 g$ls/false$8970$15i0ov)
                                                               ((case-lambda
                                                                  ((g$t$8985$15i0ov)
                                                                   ((case-lambda
                                                                      ((g$ls/false$8986$15i0ov)
                                                                       (if g$ls/false$8986$15i0ov
                                                                         (apply
                                                                           (case-lambda
                                                                             (()
                                                                              (values
                                                                                '()
                                                                                g$ids$8924$15i0ov)))
                                                                           g$ls/false$8986$15i0ov)
                                                                         ((case-lambda
                                                                            ((g$t$8987$15i0ov)
                                                                             ((case-lambda
                                                                                ((g$ls/false$8988$15i0ov)
                                                                                 (if (if g$ls/false$8988$15i0ov
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$p$8989$15i0ov)
                                                                                              (not (g$stx?$7089$15i0ov
                                                                                                     g$p$8989$15i0ov))))
                                                                                           g$ls/false$8988$15i0ov))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$p$8990$15i0ov)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$cvt$8921$15i0ov
                                                                                               g$p$8990$15i0ov
                                                                                               g$n$8923$15i0ov
                                                                                               g$ids$8924$15i0ov)))
                                                                                          (case-lambda
                                                                                            ((g$p$8993$15i0ov
                                                                                               g$ids$8994$15i0ov)
                                                                                             ((case-lambda
                                                                                                ((g$ids$8995$15i0ov
                                                                                                   g$p$8996$15i0ov)
                                                                                                 (values
                                                                                                   (vector
                                                                                                     'vector
                                                                                                     g$p$8996$15i0ov)
                                                                                                   g$ids$8995$15i0ov)))
                                                                                              g$ids$8994$15i0ov
                                                                                              g$p$8993$15i0ov))))))
                                                                                     g$ls/false$8988$15i0ov)
                                                                                   ((case-lambda
                                                                                      ((g$t$8997$15i0ov)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$8998$15i0ov)
                                                                                           (if g$ls/false$8998$15i0ov
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$datum$8999$15i0ov)
                                                                                                  (values
                                                                                                    (vector
                                                                                                      'atom
                                                                                                      (g$stx->datum$7128$15i0ov
                                                                                                        g$datum$8999$15i0ov))
                                                                                                    g$ids$8924$15i0ov)))
                                                                                               g$ls/false$8998$15i0ov)
                                                                                             (g$syntax-violation$7504$15i0ov
                                                                                               '#f
                                                                                               '"invalid syntax"
                                                                                               g$t$8997$15i0ov))))
                                                                                        (g$syntax-dispatch$7395$15i0ov
                                                                                          g$t$8997$15i0ov
                                                                                          'any))))
                                                                                    g$t$8987$15i0ov))))
                                                                              (g$syntax-dispatch$7395$15i0ov
                                                                                g$t$8987$15i0ov
                                                                                '#(vector
                                                                                   each-any)))))
                                                                          g$t$8985$15i0ov))))
                                                                    (g$syntax-dispatch$7395$15i0ov
                                                                      g$t$8985$15i0ov
                                                                      '()))))
                                                                g$t$8969$15i0ov))))
                                                          (g$syntax-dispatch$7395$15i0ov
                                                            g$t$8969$15i0ov
                                                            '(any . any)))))
                                                      g$t$8941$15i0ov))))
                                                (g$syntax-dispatch$7395$15i0ov
                                                  g$t$8941$15i0ov
                                                  '(any any
                                                        .
                                                        #(each+ any () any))))))
                                            g$t$8929$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$8929$15i0ov
                                        '(any any)))))
                                  g$t$8925$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$8925$15i0ov
                              'any))))
                        g$p$8922$15i0ov)))))
          (g$cvt$8921$15i0ov g$pattern$8918$15i0ov '0 '())))))
   (g$syntax-dispatch$7395$15i0ov
     g$syntax-dispatch$10834$15i0ov
     (case-lambda
       ((g$e$9015$15i0ov g$p$9016$15i0ov)
        (letrec* ((g$stx^$9017$15i0ov
                    (case-lambda
                      ((g$e$9125$15i0ov
                         g$m*$9126$15i0ov
                         g$s*$9127$15i0ov
                         g$ae*$9128$15i0ov)
                       (if (if (null? g$m*$9126$15i0ov)
                             (if (null? g$s*$9127$15i0ov)
                               (begin '#f (null? g$ae*$9128$15i0ov))
                               '#f)
                             '#f)
                         g$e$9125$15i0ov
                         (g$mkstx$7105$15i0ov
                           g$e$9125$15i0ov
                           g$m*$9126$15i0ov
                           g$s*$9127$15i0ov
                           g$ae*$9128$15i0ov)))))
                  (g$match-each$9018$15i0ov
                    (case-lambda
                      ((g$e$9109$15i0ov
                         g$p$9110$15i0ov
                         g$m*$9111$15i0ov
                         g$s*$9112$15i0ov
                         g$ae*$9113$15i0ov)
                       (if (pair? g$e$9109$15i0ov)
                         ((case-lambda
                            ((g$first$9114$15i0ov)
                             (if g$first$9114$15i0ov
                               (begin
                                 '#f
                                 ((case-lambda
                                    ((g$rest$9115$15i0ov)
                                     (if g$rest$9115$15i0ov
                                       (begin
                                         '#f
                                         (cons
                                           g$first$9114$15i0ov
                                           g$rest$9115$15i0ov))
                                       '#f)))
                                  (g$match-each$9018$15i0ov
                                    (cdr g$e$9109$15i0ov)
                                    g$p$9110$15i0ov
                                    g$m*$9111$15i0ov
                                    g$s*$9112$15i0ov
                                    g$ae*$9113$15i0ov)))
                               '#f)))
                          (g$match$9024$15i0ov
                            (car g$e$9109$15i0ov)
                            g$p$9110$15i0ov
                            g$m*$9111$15i0ov
                            g$s*$9112$15i0ov
                            g$ae*$9113$15i0ov
                            '()))
                         (if (null? g$e$9109$15i0ov)
                           '()
                           (if (g$stx?$7089$15i0ov g$e$9109$15i0ov)
                             (if (not (g$top-marked?$7060$15i0ov
                                        g$m*$9111$15i0ov))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7104$15i0ov
                                        g$m*$9111$15i0ov
                                        g$s*$9112$15i0ov
                                        g$ae*$9113$15i0ov
                                        g$e$9109$15i0ov)))
                                   (case-lambda
                                     ((g$m*$9119$15i0ov
                                        g$s*$9120$15i0ov
                                        g$ae*$9121$15i0ov)
                                      ((case-lambda
                                         ((g$ae*$9122$15i0ov
                                            g$s*$9123$15i0ov
                                            g$m*$9124$15i0ov)
                                          (g$match-each$9018$15i0ov
                                            (g$stx-expr$7091$15i0ov
                                              g$e$9109$15i0ov)
                                            g$p$9110$15i0ov
                                            g$m*$9124$15i0ov
                                            g$s*$9123$15i0ov
                                            g$ae*$9122$15i0ov)))
                                       g$ae*$9121$15i0ov
                                       g$s*$9120$15i0ov
                                       g$m*$9119$15i0ov)))))
                               '#f)
                             (if (annotation? g$e$9109$15i0ov)
                               (g$match-each$9018$15i0ov
                                 (annotation-expression g$e$9109$15i0ov)
                                 g$p$9110$15i0ov
                                 g$m*$9111$15i0ov
                                 g$s*$9112$15i0ov
                                 g$ae*$9113$15i0ov)
                               '#f)))))))
                  (g$match-each+$9019$15i0ov
                    (case-lambda
                      ((g$e$9077$15i0ov
                         g$x-pat$9078$15i0ov
                         g$y-pat$9079$15i0ov
                         g$z-pat$9080$15i0ov
                         g$m*$9081$15i0ov
                         g$s*$9082$15i0ov
                         g$ae*$9083$15i0ov
                         g$r$9084$15i0ov)
                       ((letrec ((g$f$9085$15i0ov
                                   (case-lambda
                                     ((g$e$9086$15i0ov
                                        g$m*$9087$15i0ov
                                        g$s*$9088$15i0ov
                                        g$ae*$9089$15i0ov)
                                      (if (pair? g$e$9086$15i0ov)
                                        (call-with-values
                                          (case-lambda
                                            (()
                                             (g$f$9085$15i0ov
                                               (cdr g$e$9086$15i0ov)
                                               g$m*$9087$15i0ov
                                               g$s*$9088$15i0ov
                                               g$ae*$9089$15i0ov)))
                                          (case-lambda
                                            ((g$xr*$9093$15i0ov
                                               g$y-pat$9094$15i0ov
                                               g$r$9095$15i0ov)
                                             ((case-lambda
                                                ((g$r$9096$15i0ov
                                                   g$y-pat$9097$15i0ov
                                                   g$xr*$9098$15i0ov)
                                                 (if g$r$9096$15i0ov
                                                   (if (null?
                                                         g$y-pat$9097$15i0ov)
                                                     ((case-lambda
                                                        ((g$xr$9099$15i0ov)
                                                         (if g$xr$9099$15i0ov
                                                           (values
                                                             (cons
                                                               g$xr$9099$15i0ov
                                                               g$xr*$9098$15i0ov)
                                                             g$y-pat$9097$15i0ov
                                                             g$r$9096$15i0ov)
                                                           (values
                                                             '#f
                                                             '#f
                                                             '#f))))
                                                      (g$match$9024$15i0ov
                                                        (car g$e$9086$15i0ov)
                                                        g$x-pat$9078$15i0ov
                                                        g$m*$9087$15i0ov
                                                        g$s*$9088$15i0ov
                                                        g$ae*$9089$15i0ov
                                                        '()))
                                                     (values
                                                       '()
                                                       (cdr g$y-pat$9097$15i0ov)
                                                       (g$match$9024$15i0ov
                                                         (car g$e$9086$15i0ov)
                                                         (car g$y-pat$9097$15i0ov)
                                                         g$m*$9087$15i0ov
                                                         g$s*$9088$15i0ov
                                                         g$ae*$9089$15i0ov
                                                         g$r$9096$15i0ov)))
                                                   (values '#f '#f '#f))))
                                              g$r$9095$15i0ov
                                              g$y-pat$9094$15i0ov
                                              g$xr*$9093$15i0ov))))
                                        (if (g$stx?$7089$15i0ov g$e$9086$15i0ov)
                                          (if (g$top-marked?$7060$15i0ov
                                                g$m*$9087$15i0ov)
                                            (values
                                              '()
                                              g$y-pat$9079$15i0ov
                                              (g$match$9024$15i0ov
                                                g$e$9086$15i0ov
                                                g$z-pat$9080$15i0ov
                                                g$m*$9087$15i0ov
                                                g$s*$9088$15i0ov
                                                g$ae*$9089$15i0ov
                                                g$r$9084$15i0ov))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$join-wraps$7104$15i0ov
                                                   g$m*$9087$15i0ov
                                                   g$s*$9088$15i0ov
                                                   g$ae*$9089$15i0ov
                                                   g$e$9086$15i0ov)))
                                              (case-lambda
                                                ((g$m*$9103$15i0ov
                                                   g$s*$9104$15i0ov
                                                   g$ae*$9105$15i0ov)
                                                 ((case-lambda
                                                    ((g$ae*$9106$15i0ov
                                                       g$s*$9107$15i0ov
                                                       g$m*$9108$15i0ov)
                                                     (g$f$9085$15i0ov
                                                       (g$stx-expr$7091$15i0ov
                                                         g$e$9086$15i0ov)
                                                       g$m*$9108$15i0ov
                                                       g$s*$9107$15i0ov
                                                       g$ae*$9106$15i0ov)))
                                                  g$ae*$9105$15i0ov
                                                  g$s*$9104$15i0ov
                                                  g$m*$9103$15i0ov)))))
                                          (if (annotation? g$e$9086$15i0ov)
                                            (g$f$9085$15i0ov
                                              (annotation-expression
                                                g$e$9086$15i0ov)
                                              g$m*$9087$15i0ov
                                              g$s*$9088$15i0ov
                                              g$ae*$9089$15i0ov)
                                            (values
                                              '()
                                              g$y-pat$9079$15i0ov
                                              (g$match$9024$15i0ov
                                                g$e$9086$15i0ov
                                                g$z-pat$9080$15i0ov
                                                g$m*$9087$15i0ov
                                                g$s*$9088$15i0ov
                                                g$ae*$9089$15i0ov
                                                g$r$9084$15i0ov)))))))))
                          g$f$9085$15i0ov)
                        g$e$9077$15i0ov
                        g$m*$9081$15i0ov
                        g$s*$9082$15i0ov
                        g$ae*$9083$15i0ov))))
                  (g$match-each-any$9020$15i0ov
                    (case-lambda
                      ((g$e$9063$15i0ov
                         g$m*$9064$15i0ov
                         g$s*$9065$15i0ov
                         g$ae*$9066$15i0ov)
                       (if (pair? g$e$9063$15i0ov)
                         ((case-lambda
                            ((g$l$9067$15i0ov)
                             (if g$l$9067$15i0ov
                               (begin
                                 '#f
                                 (cons
                                   (g$stx^$9017$15i0ov
                                     (car g$e$9063$15i0ov)
                                     g$m*$9064$15i0ov
                                     g$s*$9065$15i0ov
                                     g$ae*$9066$15i0ov)
                                   g$l$9067$15i0ov))
                               '#f)))
                          (g$match-each-any$9020$15i0ov
                            (cdr g$e$9063$15i0ov)
                            g$m*$9064$15i0ov
                            g$s*$9065$15i0ov
                            g$ae*$9066$15i0ov))
                         (if (null? g$e$9063$15i0ov)
                           '()
                           (if (g$stx?$7089$15i0ov g$e$9063$15i0ov)
                             (if (not (g$top-marked?$7060$15i0ov
                                        g$m*$9064$15i0ov))
                               (begin
                                 '#f
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$join-wraps$7104$15i0ov
                                        g$m*$9064$15i0ov
                                        g$s*$9065$15i0ov
                                        g$ae*$9066$15i0ov
                                        g$e$9063$15i0ov)))
                                   (case-lambda
                                     ((g$m*$9071$15i0ov
                                        g$s*$9072$15i0ov
                                        g$ae*$9073$15i0ov)
                                      ((case-lambda
                                         ((g$ae*$9074$15i0ov
                                            g$s*$9075$15i0ov
                                            g$m*$9076$15i0ov)
                                          (g$match-each-any$9020$15i0ov
                                            (g$stx-expr$7091$15i0ov
                                              g$e$9063$15i0ov)
                                            g$m*$9076$15i0ov
                                            g$s*$9075$15i0ov
                                            g$ae*$9074$15i0ov)))
                                       g$ae*$9073$15i0ov
                                       g$s*$9072$15i0ov
                                       g$m*$9071$15i0ov)))))
                               '#f)
                             (if (annotation? g$e$9063$15i0ov)
                               (g$match-each-any$9020$15i0ov
                                 (annotation-expression g$e$9063$15i0ov)
                                 g$m*$9064$15i0ov
                                 g$s*$9065$15i0ov
                                 g$ae*$9066$15i0ov)
                               '#f)))))))
                  (g$match-empty$9021$15i0ov
                    (case-lambda
                      ((g$p$9060$15i0ov g$r$9061$15i0ov)
                       (if (null? g$p$9060$15i0ov)
                         g$r$9061$15i0ov
                         (if (eq? g$p$9060$15i0ov '_)
                           g$r$9061$15i0ov
                           (if (eq? g$p$9060$15i0ov 'any)
                             (cons '() g$r$9061$15i0ov)
                             (if (pair? g$p$9060$15i0ov)
                               (g$match-empty$9021$15i0ov
                                 (car g$p$9060$15i0ov)
                                 (g$match-empty$9021$15i0ov
                                   (cdr g$p$9060$15i0ov)
                                   g$r$9061$15i0ov))
                               (if (eq? g$p$9060$15i0ov 'each-any)
                                 (cons '() g$r$9061$15i0ov)
                                 ((case-lambda
                                    ((g$t$9062$15i0ov)
                                     (if (memv g$t$9062$15i0ov '(each))
                                       (g$match-empty$9021$15i0ov
                                         (vector-ref g$p$9060$15i0ov '1)
                                         g$r$9061$15i0ov)
                                       (if (memv g$t$9062$15i0ov '(each+))
                                         (g$match-empty$9021$15i0ov
                                           (vector-ref g$p$9060$15i0ov '1)
                                           (g$match-empty$9021$15i0ov
                                             (reverse
                                               (vector-ref g$p$9060$15i0ov '2))
                                             (g$match-empty$9021$15i0ov
                                               (vector-ref g$p$9060$15i0ov '3)
                                               g$r$9061$15i0ov)))
                                         (if (memv
                                               g$t$9062$15i0ov
                                               '(free-id atom))
                                           g$r$9061$15i0ov
                                           (if (memv
                                                 g$t$9062$15i0ov
                                                 '(scheme-id atom))
                                             g$r$9061$15i0ov
                                             (if (memv
                                                   g$t$9062$15i0ov
                                                   '(vector))
                                               (g$match-empty$9021$15i0ov
                                                 (vector-ref g$p$9060$15i0ov '1)
                                                 g$r$9061$15i0ov)
                                               (assertion-violation
                                                 'syntax-dispatch
                                                 '"invalid pattern"
                                                 g$p$9060$15i0ov))))))))
                                  (vector-ref g$p$9060$15i0ov '0))))))))))
                  (g$combine$9022$15i0ov
                    (case-lambda
                      ((g$r*$9058$15i0ov g$r$9059$15i0ov)
                       (if (null? (car g$r*$9058$15i0ov))
                         g$r$9059$15i0ov
                         (cons
                           (map car g$r*$9058$15i0ov)
                           (g$combine$9022$15i0ov
                             (map cdr g$r*$9058$15i0ov)
                             g$r$9059$15i0ov))))))
                  (g$match*$9023$15i0ov
                    (case-lambda
                      ((g$e$9040$15i0ov
                         g$p$9041$15i0ov
                         g$m*$9042$15i0ov
                         g$s*$9043$15i0ov
                         g$ae*$9044$15i0ov
                         g$r$9045$15i0ov)
                       (if (null? g$p$9041$15i0ov)
                         (if (null? g$e$9040$15i0ov)
                           (begin '#f g$r$9045$15i0ov)
                           '#f)
                         (if (pair? g$p$9041$15i0ov)
                           (if (pair? g$e$9040$15i0ov)
                             (begin
                               '#f
                               (g$match$9024$15i0ov
                                 (car g$e$9040$15i0ov)
                                 (car g$p$9041$15i0ov)
                                 g$m*$9042$15i0ov
                                 g$s*$9043$15i0ov
                                 g$ae*$9044$15i0ov
                                 (g$match$9024$15i0ov
                                   (cdr g$e$9040$15i0ov)
                                   (cdr g$p$9041$15i0ov)
                                   g$m*$9042$15i0ov
                                   g$s*$9043$15i0ov
                                   g$ae*$9044$15i0ov
                                   g$r$9045$15i0ov)))
                             '#f)
                           (if (eq? g$p$9041$15i0ov 'each-any)
                             ((case-lambda
                                ((g$l$9046$15i0ov)
                                 (if g$l$9046$15i0ov
                                   (begin
                                     '#f
                                     (cons g$l$9046$15i0ov g$r$9045$15i0ov))
                                   '#f)))
                              (g$match-each-any$9020$15i0ov
                                g$e$9040$15i0ov
                                g$m*$9042$15i0ov
                                g$s*$9043$15i0ov
                                g$ae*$9044$15i0ov))
                             ((case-lambda
                                ((g$t$9047$15i0ov)
                                 (if (memv g$t$9047$15i0ov '(each))
                                   (if (null? g$e$9040$15i0ov)
                                     (g$match-empty$9021$15i0ov
                                       (vector-ref g$p$9041$15i0ov '1)
                                       g$r$9045$15i0ov)
                                     ((case-lambda
                                        ((g$r*$9048$15i0ov)
                                         (if g$r*$9048$15i0ov
                                           (begin
                                             '#f
                                             (g$combine$9022$15i0ov
                                               g$r*$9048$15i0ov
                                               g$r$9045$15i0ov))
                                           '#f)))
                                      (g$match-each$9018$15i0ov
                                        g$e$9040$15i0ov
                                        (vector-ref g$p$9041$15i0ov '1)
                                        g$m*$9042$15i0ov
                                        g$s*$9043$15i0ov
                                        g$ae*$9044$15i0ov)))
                                   (if (memv g$t$9047$15i0ov '(free-id))
                                     (if (symbol? g$e$9040$15i0ov)
                                       (if (g$top-marked?$7060$15i0ov
                                             g$m*$9042$15i0ov)
                                         (if (g$free-id=?$7121$15i0ov
                                               (g$stx^$9017$15i0ov
                                                 g$e$9040$15i0ov
                                                 g$m*$9042$15i0ov
                                                 g$s*$9043$15i0ov
                                                 g$ae*$9044$15i0ov)
                                               (vector-ref g$p$9041$15i0ov '1))
                                           (begin '#f g$r$9045$15i0ov)
                                           '#f)
                                         '#f)
                                       '#f)
                                     (if (memv g$t$9047$15i0ov '(scheme-id))
                                       (if (symbol? g$e$9040$15i0ov)
                                         (if (g$top-marked?$7060$15i0ov
                                               g$m*$9042$15i0ov)
                                           (if (g$free-id=?$7121$15i0ov
                                                 (g$stx^$9017$15i0ov
                                                   g$e$9040$15i0ov
                                                   g$m*$9042$15i0ov
                                                   g$s*$9043$15i0ov
                                                   g$ae*$9044$15i0ov)
                                                 (g$scheme-stx$7338$15i0ov
                                                   (vector-ref
                                                     g$p$9041$15i0ov
                                                     '1)))
                                             (begin '#f g$r$9045$15i0ov)
                                             '#f)
                                           '#f)
                                         '#f)
                                       (if (memv g$t$9047$15i0ov '(each+))
                                         (call-with-values
                                           (case-lambda
                                             (()
                                              (g$match-each+$9019$15i0ov
                                                g$e$9040$15i0ov
                                                (vector-ref g$p$9041$15i0ov '1)
                                                (vector-ref g$p$9041$15i0ov '2)
                                                (vector-ref g$p$9041$15i0ov '3)
                                                g$m*$9042$15i0ov
                                                g$s*$9043$15i0ov
                                                g$ae*$9044$15i0ov
                                                g$r$9045$15i0ov)))
                                           (case-lambda
                                             ((g$xr*$9052$15i0ov
                                                g$y-pat$9053$15i0ov
                                                g$r$9054$15i0ov)
                                              ((case-lambda
                                                 ((g$r$9055$15i0ov
                                                    g$y-pat$9056$15i0ov
                                                    g$xr*$9057$15i0ov)
                                                  (if g$r$9055$15i0ov
                                                    (if (null?
                                                          g$y-pat$9056$15i0ov)
                                                      (begin
                                                        '#f
                                                        (if (null?
                                                              g$xr*$9057$15i0ov)
                                                          (g$match-empty$9021$15i0ov
                                                            (vector-ref
                                                              g$p$9041$15i0ov
                                                              '1)
                                                            g$r$9055$15i0ov)
                                                          (g$combine$9022$15i0ov
                                                            g$xr*$9057$15i0ov
                                                            g$r$9055$15i0ov)))
                                                      '#f)
                                                    '#f)))
                                               g$r$9054$15i0ov
                                               g$y-pat$9053$15i0ov
                                               g$xr*$9052$15i0ov))))
                                         (if (memv g$t$9047$15i0ov '(atom))
                                           (if (equal?
                                                 (vector-ref g$p$9041$15i0ov '1)
                                                 (g$strip$7127$15i0ov
                                                   g$e$9040$15i0ov
                                                   g$m*$9042$15i0ov))
                                             (begin '#f g$r$9045$15i0ov)
                                             '#f)
                                           (if (memv g$t$9047$15i0ov '(vector))
                                             (if (vector? g$e$9040$15i0ov)
                                               (begin
                                                 '#f
                                                 (g$match$9024$15i0ov
                                                   (vector->list
                                                     g$e$9040$15i0ov)
                                                   (vector-ref
                                                     g$p$9041$15i0ov
                                                     '1)
                                                   g$m*$9042$15i0ov
                                                   g$s*$9043$15i0ov
                                                   g$ae*$9044$15i0ov
                                                   g$r$9045$15i0ov))
                                               '#f)
                                             (assertion-violation
                                               'syntax-dispatch
                                               '"invalid pattern"
                                               g$p$9041$15i0ov)))))))))
                              (vector-ref g$p$9041$15i0ov '0))))))))
                  (g$match$9024$15i0ov
                    (case-lambda
                      ((g$e$9025$15i0ov
                         g$p$9026$15i0ov
                         g$m*$9027$15i0ov
                         g$s*$9028$15i0ov
                         g$ae*$9029$15i0ov
                         g$r$9030$15i0ov)
                       (if (not g$r$9030$15i0ov)
                         '#f
                         (if (eq? g$p$9026$15i0ov '_)
                           g$r$9030$15i0ov
                           (if (eq? g$p$9026$15i0ov 'any)
                             (cons
                               (g$stx^$9017$15i0ov
                                 g$e$9025$15i0ov
                                 g$m*$9027$15i0ov
                                 g$s*$9028$15i0ov
                                 g$ae*$9029$15i0ov)
                               g$r$9030$15i0ov)
                             (if (g$stx?$7089$15i0ov g$e$9025$15i0ov)
                               (if (not (g$top-marked?$7060$15i0ov
                                          g$m*$9027$15i0ov))
                                 (begin
                                   '#f
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$join-wraps$7104$15i0ov
                                          g$m*$9027$15i0ov
                                          g$s*$9028$15i0ov
                                          g$ae*$9029$15i0ov
                                          g$e$9025$15i0ov)))
                                     (case-lambda
                                       ((g$m*$9034$15i0ov
                                          g$s*$9035$15i0ov
                                          g$ae*$9036$15i0ov)
                                        ((case-lambda
                                           ((g$ae*$9037$15i0ov
                                              g$s*$9038$15i0ov
                                              g$m*$9039$15i0ov)
                                            (g$match$9024$15i0ov
                                              (g$stx-expr$7091$15i0ov
                                                g$e$9025$15i0ov)
                                              g$p$9026$15i0ov
                                              g$m*$9039$15i0ov
                                              g$s*$9038$15i0ov
                                              g$ae*$9037$15i0ov
                                              g$r$9030$15i0ov)))
                                         g$ae*$9036$15i0ov
                                         g$s*$9035$15i0ov
                                         g$m*$9034$15i0ov)))))
                                 '#f)
                               (if (annotation? g$e$9025$15i0ov)
                                 (g$match$9024$15i0ov
                                   (annotation-expression g$e$9025$15i0ov)
                                   g$p$9026$15i0ov
                                   g$m*$9027$15i0ov
                                   g$s*$9028$15i0ov
                                   g$ae*$9029$15i0ov
                                   g$r$9030$15i0ov)
                                 (g$match*$9023$15i0ov
                                   g$e$9025$15i0ov
                                   g$p$9026$15i0ov
                                   g$m*$9027$15i0ov
                                   g$s*$9028$15i0ov
                                   g$ae*$9029$15i0ov
                                   g$r$9030$15i0ov))))))))))
          (g$match$9024$15i0ov
            g$e$9015$15i0ov
            g$p$9016$15i0ov
            '()
            '()
            '()
            '())))))
   (g$ellipsis?$7396$15i0ov
     g$ellipsis?$10835$15i0ov
     (case-lambda
       ((g$x$9129$15i0ov)
        (if (g$id?$7117$15i0ov g$x$9129$15i0ov)
          (begin
            '#f
            (g$free-id=?$7121$15i0ov
              g$x$9129$15i0ov
              (g$scheme-stx$7338$15i0ov '...)))
          '#f))))
   (g$underscore?$7397$15i0ov
     g$underscore?$10836$15i0ov
     (case-lambda
       ((g$x$9130$15i0ov)
        (if (g$id?$7117$15i0ov g$x$9130$15i0ov)
          (begin
            '#f
            (g$free-id=?$7121$15i0ov
              g$x$9130$15i0ov
              (g$scheme-stx$7338$15i0ov '_)))
          '#f))))
   (g$verify-literals$7398$15i0ov
     g$verify-literals$10837$15i0ov
     (case-lambda
       ((g$lits$9131$15i0ov g$expr$9132$15i0ov)
        (for-each
          (case-lambda
            ((g$x$9133$15i0ov)
             (if ((case-lambda
                    ((g$t$9134$15i0ov)
                     (if g$t$9134$15i0ov
                       g$t$9134$15i0ov
                       ((case-lambda
                          ((g$t$9135$15i0ov)
                           (if g$t$9135$15i0ov
                             g$t$9135$15i0ov
                             (begin
                               '#f
                               (g$underscore?$7397$15i0ov g$x$9133$15i0ov)))))
                        (g$ellipsis?$7396$15i0ov g$x$9133$15i0ov)))))
                  (not (g$id?$7117$15i0ov g$x$9133$15i0ov)))
               (g$syntax-violation$7504$15i0ov
                 '#f
                 '"invalid literal"
                 g$expr$9132$15i0ov
                 g$x$9133$15i0ov)
               (void))))
          g$lits$9131$15i0ov))))
   (g$syntax-case-transformer$7399$15i0ov
     g$syntax-case-transformer$10838$15i0ov
     ((case-lambda
        (()
         (letrec* ((g$build-dispatch-call$9136$15i0ov
                     (case-lambda
                       ((g$pvars$9193$15i0ov
                          g$expr$9194$15i0ov
                          g$y$9195$15i0ov
                          g$r$9196$15i0ov
                          g$mr$9197$15i0ov)
                        ((case-lambda
                           ((g$ids$9198$15i0ov g$levels$9199$15i0ov)
                            ((case-lambda
                               ((g$labels$9200$15i0ov g$new-vars$9201$15i0ov)
                                ((case-lambda
                                   ((g$body$9202$15i0ov)
                                    (list
                                      '(primitive apply)
                                      (g$build-lambda$7048$15i0ov
                                        '#f
                                        g$new-vars$9201$15i0ov
                                        g$body$9202$15i0ov)
                                      g$y$9195$15i0ov)))
                                 (g$chi-expr$7413$15i0ov
                                   (g$add-subst$7107$15i0ov
                                     (g$make-full-rib$7085$15i0ov
                                       g$ids$9198$15i0ov
                                       g$labels$9200$15i0ov)
                                     g$expr$9194$15i0ov)
                                   (append
                                     (map (case-lambda
                                            ((g$label$9203$15i0ov
                                               g$var$9204$15i0ov
                                               g$level$9205$15i0ov)
                                             (cons
                                               g$label$9203$15i0ov
                                               (g$make-binding$7133$15i0ov
                                                 'syntax
                                                 (cons
                                                   g$var$9204$15i0ov
                                                   g$level$9205$15i0ov)))))
                                          g$labels$9200$15i0ov
                                          g$new-vars$9201$15i0ov
                                          (map cdr g$pvars$9193$15i0ov))
                                     g$r$9196$15i0ov)
                                   g$mr$9197$15i0ov))))
                             (map g$gen-label$7063$15i0ov g$ids$9198$15i0ov)
                             (map g$gen-lexical$7061$15i0ov
                                  g$ids$9198$15i0ov))))
                         (map car g$pvars$9193$15i0ov)
                         (map cdr g$pvars$9193$15i0ov)))))
                   (g$invalid-ids-error$9137$15i0ov
                     (case-lambda
                       ((g$id*$9187$15i0ov g$e$9188$15i0ov g$class$9189$15i0ov)
                        ((letrec ((g$find$9190$15i0ov
                                    (case-lambda
                                      ((g$id*$9191$15i0ov g$ok*$9192$15i0ov)
                                       (if (null? g$id*$9191$15i0ov)
                                         (g$syntax-violation$7504$15i0ov
                                           '#f
                                           '"invalid syntax"
                                           g$e$9188$15i0ov)
                                         (if (g$id?$7117$15i0ov
                                               (car g$id*$9191$15i0ov))
                                           (if (g$bound-id-member?$7124$15i0ov
                                                 (car g$id*$9191$15i0ov)
                                                 g$ok*$9192$15i0ov)
                                             (g$syntax-error$7501$15i0ov
                                               (car g$id*$9191$15i0ov)
                                               '"duplicate "
                                               g$class$9189$15i0ov)
                                             (g$find$9190$15i0ov
                                               (cdr g$id*$9191$15i0ov)
                                               (cons
                                                 (car g$id*$9191$15i0ov)
                                                 g$ok*$9192$15i0ov)))
                                           (g$syntax-error$7501$15i0ov
                                             (car g$id*$9191$15i0ov)
                                             '"invalid "
                                             g$class$9189$15i0ov)))))))
                           g$find$9190$15i0ov)
                         g$id*$9187$15i0ov
                         '()))))
                   (g$gen-clause$9138$15i0ov
                     (case-lambda
                       ((g$x$9167$15i0ov
                          g$keys$9168$15i0ov
                          g$clauses$9169$15i0ov
                          g$r$9170$15i0ov
                          g$mr$9171$15i0ov
                          g$pat$9172$15i0ov
                          g$fender$9173$15i0ov
                          g$expr$9174$15i0ov)
                        (call-with-values
                          (case-lambda
                            (()
                             (g$convert-pattern$7394$15i0ov
                               g$pat$9172$15i0ov
                               g$keys$9168$15i0ov)))
                          (case-lambda
                            ((g$p$9177$15i0ov g$pvars$9178$15i0ov)
                             ((case-lambda
                                ((g$pvars$9179$15i0ov g$p$9180$15i0ov)
                                 (if (not (g$distinct-bound-ids?$7123$15i0ov
                                            (map car g$pvars$9179$15i0ov)))
                                   (g$invalid-ids-error$9137$15i0ov
                                     (map car g$pvars$9179$15i0ov)
                                     g$pat$9172$15i0ov
                                     '"pattern variable")
                                   (if (not (g$for-all$5359$15i0ov
                                              (case-lambda
                                                ((g$x$9181$15i0ov)
                                                 (not (g$ellipsis?$7396$15i0ov
                                                        (car g$x$9181$15i0ov)))))
                                              g$pvars$9179$15i0ov))
                                     (g$syntax-violation$7504$15i0ov
                                       '#f
                                       '"misplaced ellipsis in syntax-case pattern"
                                       g$pat$9172$15i0ov)
                                     ((case-lambda
                                        ((g$y$9182$15i0ov)
                                         ((case-lambda
                                            ((g$test$9183$15i0ov)
                                             ((case-lambda
                                                ((g$conseq$9184$15i0ov)
                                                 ((case-lambda
                                                    ((g$altern$9185$15i0ov)
                                                     (list
                                                       (g$build-lambda$7048$15i0ov
                                                         '#f
                                                         (list g$y$9182$15i0ov)
                                                         (list
                                                           'if
                                                           g$test$9183$15i0ov
                                                           g$conseq$9184$15i0ov
                                                           g$altern$9185$15i0ov))
                                                       (list
                                                         '(primitive
                                                            syntax-dispatch)
                                                         g$x$9167$15i0ov
                                                         (list
                                                           'quote
                                                           g$p$9180$15i0ov)))))
                                                  (g$gen-syntax-case$9139$15i0ov
                                                    g$x$9167$15i0ov
                                                    g$keys$9168$15i0ov
                                                    g$clauses$9169$15i0ov
                                                    g$r$9170$15i0ov
                                                    g$mr$9171$15i0ov))))
                                              (g$build-dispatch-call$9136$15i0ov
                                                g$pvars$9179$15i0ov
                                                g$expr$9174$15i0ov
                                                g$y$9182$15i0ov
                                                g$r$9170$15i0ov
                                                g$mr$9171$15i0ov))))
                                          (if (eq? g$fender$9173$15i0ov '#t)
                                            g$y$9182$15i0ov
                                            ((case-lambda
                                               ((g$call$9186$15i0ov)
                                                (list
                                                  'if
                                                  g$y$9182$15i0ov
                                                  g$call$9186$15i0ov
                                                  (list 'quote '#f))))
                                             (g$build-dispatch-call$9136$15i0ov
                                               g$pvars$9179$15i0ov
                                               g$fender$9173$15i0ov
                                               g$y$9182$15i0ov
                                               g$r$9170$15i0ov
                                               g$mr$9171$15i0ov))))))
                                      (g$gen-lexical$7061$15i0ov 'tmp))))))
                              g$pvars$9178$15i0ov
                              g$p$9177$15i0ov)))))))
                   (g$gen-syntax-case$9139$15i0ov
                     (case-lambda
                       ((g$x$9150$15i0ov
                          g$keys$9151$15i0ov
                          g$clauses$9152$15i0ov
                          g$r$9153$15i0ov
                          g$mr$9154$15i0ov)
                        (if (null? g$clauses$9152$15i0ov)
                          (list '(primitive syntax-error) g$x$9150$15i0ov)
                          ((case-lambda
                             ((g$t$9155$15i0ov)
                              ((case-lambda
                                 ((g$ls/false$9156$15i0ov)
                                  (if g$ls/false$9156$15i0ov
                                    (apply
                                      (case-lambda
                                        ((g$pat$9157$15i0ov g$expr$9158$15i0ov)
                                         (if (if (g$id?$7117$15i0ov
                                                   g$pat$9157$15i0ov)
                                               (if (not (g$bound-id-member?$7124$15i0ov
                                                          g$pat$9157$15i0ov
                                                          g$keys$9151$15i0ov))
                                                 (begin
                                                   '#f
                                                   (not (g$ellipsis?$7396$15i0ov
                                                          g$pat$9157$15i0ov)))
                                                 '#f)
                                               '#f)
                                           (if (g$free-id=?$7121$15i0ov
                                                 g$pat$9157$15i0ov
                                                 (g$scheme-stx$7338$15i0ov '_))
                                             (g$chi-expr$7413$15i0ov
                                               g$expr$9158$15i0ov
                                               g$r$9153$15i0ov
                                               g$mr$9154$15i0ov)
                                             ((case-lambda
                                                ((g$lab$9159$15i0ov
                                                   g$lex$9160$15i0ov)
                                                 ((case-lambda
                                                    ((g$body$9161$15i0ov)
                                                     (list
                                                       (g$build-lambda$7048$15i0ov
                                                         '#f
                                                         (list
                                                           g$lex$9160$15i0ov)
                                                         g$body$9161$15i0ov)
                                                       g$x$9150$15i0ov)))
                                                  (g$chi-expr$7413$15i0ov
                                                    (g$add-subst$7107$15i0ov
                                                      (g$make-full-rib$7085$15i0ov
                                                        (list g$pat$9157$15i0ov)
                                                        (list
                                                          g$lab$9159$15i0ov))
                                                      g$expr$9158$15i0ov)
                                                    (cons
                                                      (cons
                                                        g$lab$9159$15i0ov
                                                        (g$make-binding$7133$15i0ov
                                                          'syntax
                                                          (cons
                                                            g$lex$9160$15i0ov
                                                            '0)))
                                                      g$r$9153$15i0ov)
                                                    g$mr$9154$15i0ov))))
                                              (g$gen-label$7063$15i0ov
                                                g$pat$9157$15i0ov)
                                              (g$gen-lexical$7061$15i0ov
                                                g$pat$9157$15i0ov)))
                                           (g$gen-clause$9138$15i0ov
                                             g$x$9150$15i0ov
                                             g$keys$9151$15i0ov
                                             (cdr g$clauses$9152$15i0ov)
                                             g$r$9153$15i0ov
                                             g$mr$9154$15i0ov
                                             g$pat$9157$15i0ov
                                             '#t
                                             g$expr$9158$15i0ov))))
                                      g$ls/false$9156$15i0ov)
                                    ((case-lambda
                                       ((g$t$9162$15i0ov)
                                        ((case-lambda
                                           ((g$ls/false$9163$15i0ov)
                                            (if g$ls/false$9163$15i0ov
                                              (apply
                                                (case-lambda
                                                  ((g$pat$9164$15i0ov
                                                     g$fender$9165$15i0ov
                                                     g$expr$9166$15i0ov)
                                                   (g$gen-clause$9138$15i0ov
                                                     g$x$9150$15i0ov
                                                     g$keys$9151$15i0ov
                                                     (cdr g$clauses$9152$15i0ov)
                                                     g$r$9153$15i0ov
                                                     g$mr$9154$15i0ov
                                                     g$pat$9164$15i0ov
                                                     g$fender$9165$15i0ov
                                                     g$expr$9166$15i0ov)))
                                                g$ls/false$9163$15i0ov)
                                              (g$syntax-violation$7504$15i0ov
                                                '#f
                                                '"invalid syntax"
                                                g$t$9162$15i0ov))))
                                         (g$syntax-dispatch$7395$15i0ov
                                           g$t$9162$15i0ov
                                           '(any any any)))))
                                     g$t$9155$15i0ov))))
                               (g$syntax-dispatch$7395$15i0ov
                                 g$t$9155$15i0ov
                                 '(any any)))))
                           (car g$clauses$9152$15i0ov)))))))
           (case-lambda
             ((g$e$9140$15i0ov g$r$9141$15i0ov g$mr$9142$15i0ov)
              ((case-lambda
                 ((g$t$9143$15i0ov)
                  ((case-lambda
                     ((g$ls/false$9144$15i0ov)
                      (if g$ls/false$9144$15i0ov
                        (apply
                          (case-lambda
                            ((g$expr$9145$15i0ov
                               g$keys$9146$15i0ov
                               g$clauses$9147$15i0ov)
                             (begin
                               (g$verify-literals$7398$15i0ov
                                 g$keys$9146$15i0ov
                                 g$e$9140$15i0ov)
                               ((case-lambda
                                  ((g$x$9148$15i0ov)
                                   ((case-lambda
                                      ((g$body$9149$15i0ov)
                                       (list
                                         (g$build-lambda$7048$15i0ov
                                           '#f
                                           (list g$x$9148$15i0ov)
                                           g$body$9149$15i0ov)
                                         (g$chi-expr$7413$15i0ov
                                           g$expr$9145$15i0ov
                                           g$r$9141$15i0ov
                                           g$mr$9142$15i0ov))))
                                    (g$gen-syntax-case$9139$15i0ov
                                      g$x$9148$15i0ov
                                      g$keys$9146$15i0ov
                                      g$clauses$9147$15i0ov
                                      g$r$9141$15i0ov
                                      g$mr$9142$15i0ov))))
                                (g$gen-lexical$7061$15i0ov 'tmp)))))
                          g$ls/false$9144$15i0ov)
                        (g$syntax-violation$7504$15i0ov
                          '#f
                          '"invalid syntax"
                          g$t$9143$15i0ov))))
                   (g$syntax-dispatch$7395$15i0ov
                     g$t$9143$15i0ov
                     '(_ any each-any . each-any)))))
               g$e$9140$15i0ov))))))))
   (g$ellipsis-map$7400$15i0ov
     g$ellipsis-map$10839$15i0ov
     (case-lambda
       ((g$proc$9206$15i0ov g$ls$9207$15i0ov . g$ls*$9208$15i0ov)
        (letrec* ((g$who$9209$15i0ov '...))
          (begin
            (if (not (list? g$ls$9207$15i0ov))
              (assertion-violation
                g$who$9209$15i0ov
                '"not a list"
                g$ls$9207$15i0ov)
              (void))
            (if (not (null? g$ls*$9208$15i0ov))
              ((case-lambda
                 ((g$n$9210$15i0ov)
                  (for-each
                    (case-lambda
                      ((g$x$9211$15i0ov)
                       (begin
                         (if (not (list? g$x$9211$15i0ov))
                           (assertion-violation
                             g$who$9209$15i0ov
                             '"not a list"
                             g$x$9211$15i0ov)
                           (void))
                         (if (not (= (length g$x$9211$15i0ov) g$n$9210$15i0ov))
                           (assertion-violation
                             g$who$9209$15i0ov
                             '"length mismatch"
                             g$ls$9207$15i0ov
                             g$x$9211$15i0ov)
                           (void)))))
                    g$ls*$9208$15i0ov)))
               (length g$ls$9207$15i0ov))
              (void))
            (apply
              map
              g$proc$9206$15i0ov
              g$ls$9207$15i0ov
              g$ls*$9208$15i0ov))))))
   (g$syntax-transformer$7401$15i0ov
     g$syntax-transformer$10840$15i0ov
     ((case-lambda
        (()
         (letrec* ((g$gen-syntax$9212$15i0ov
                     (case-lambda
                       ((g$src$9272$15i0ov
                          g$e$9273$15i0ov
                          g$r$9274$15i0ov
                          g$maps$9275$15i0ov
                          g$ellipsis?$9276$15i0ov
                          g$vec?$9277$15i0ov)
                        ((case-lambda
                           ((g$t$9278$15i0ov)
                            ((case-lambda
                               ((g$ls/false$9279$15i0ov)
                                (if (if g$ls/false$9279$15i0ov
                                      (begin
                                        '#f
                                        (apply
                                          (case-lambda
                                            ((g$dots$9280$15i0ov)
                                             (g$ellipsis?$9276$15i0ov
                                               g$dots$9280$15i0ov)))
                                          g$ls/false$9279$15i0ov))
                                      '#f)
                                  (apply
                                    (case-lambda
                                      ((g$dots$9281$15i0ov)
                                       (g$syntax-violation$7504$15i0ov
                                         '#f
                                         '"misplaced ellipsis in syntax form"
                                         g$src$9272$15i0ov)))
                                    g$ls/false$9279$15i0ov)
                                  ((case-lambda
                                     ((g$t$9282$15i0ov)
                                      ((case-lambda
                                         ((g$ls/false$9283$15i0ov)
                                          (if (if g$ls/false$9283$15i0ov
                                                (begin
                                                  '#f
                                                  (apply
                                                    (case-lambda
                                                      ((g$id$9284$15i0ov)
                                                       (g$id?$7117$15i0ov
                                                         g$id$9284$15i0ov)))
                                                    g$ls/false$9283$15i0ov))
                                                '#f)
                                            (apply
                                              (case-lambda
                                                ((g$id$9285$15i0ov)
                                                 ((case-lambda
                                                    ((g$label$9286$15i0ov)
                                                     ((case-lambda
                                                        ((g$b$9287$15i0ov)
                                                         ((case-lambda
                                                            (()
                                                             (if (eq? (g$binding-type$7134$15i0ov
                                                                        g$b$9287$15i0ov)
                                                                      'syntax)
                                                               (call-with-values
                                                                 (case-lambda
                                                                   (()
                                                                    ((case-lambda
                                                                       ((g$var.lev$9290$15i0ov)
                                                                        (g$gen-ref$9213$15i0ov
                                                                          g$src$9272$15i0ov
                                                                          (car g$var.lev$9290$15i0ov)
                                                                          (cdr g$var.lev$9290$15i0ov)
                                                                          g$maps$9275$15i0ov)))
                                                                     (g$binding-value$7135$15i0ov
                                                                       g$b$9287$15i0ov))))
                                                                 (case-lambda
                                                                   ((g$var$9291$15i0ov
                                                                      g$maps$9292$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$maps$9293$15i0ov
                                                                          g$var$9294$15i0ov)
                                                                        (values
                                                                          (list
                                                                            'ref
                                                                            g$var$9294$15i0ov)
                                                                          g$maps$9293$15i0ov)))
                                                                     g$maps$9292$15i0ov
                                                                     g$var$9291$15i0ov))))
                                                               (values
                                                                 (list
                                                                   'quote
                                                                   g$e$9273$15i0ov)
                                                                 g$maps$9275$15i0ov)))))))
                                                      (g$label->binding$7132$15i0ov
                                                        g$label$9286$15i0ov
                                                        g$r$9274$15i0ov))))
                                                  (g$id->label$7130$15i0ov
                                                    g$e$9273$15i0ov))))
                                              g$ls/false$9283$15i0ov)
                                            ((case-lambda
                                               ((g$t$9295$15i0ov)
                                                ((case-lambda
                                                   ((g$ls/false$9296$15i0ov)
                                                    (if (if g$ls/false$9296$15i0ov
                                                          (begin
                                                            '#f
                                                            (apply
                                                              (case-lambda
                                                                ((g$dots$9297$15i0ov
                                                                   g$e$9298$15i0ov)
                                                                 (g$ellipsis?$9276$15i0ov
                                                                   g$dots$9297$15i0ov)))
                                                              g$ls/false$9296$15i0ov))
                                                          '#f)
                                                      (apply
                                                        (case-lambda
                                                          ((g$dots$9299$15i0ov
                                                             g$e$9300$15i0ov)
                                                           (if g$vec?$9277$15i0ov
                                                             (g$syntax-violation$7504$15i0ov
                                                               '#f
                                                               '"misplaced ellipsis in syntax form"
                                                               g$src$9272$15i0ov)
                                                             (g$gen-syntax$9212$15i0ov
                                                               g$src$9272$15i0ov
                                                               g$e$9300$15i0ov
                                                               g$r$9274$15i0ov
                                                               g$maps$9275$15i0ov
                                                               (case-lambda
                                                                 ((g$x$9301$15i0ov)
                                                                  '#f))
                                                               '#f))))
                                                        g$ls/false$9296$15i0ov)
                                                      ((case-lambda
                                                         ((g$t$9302$15i0ov)
                                                          ((case-lambda
                                                             ((g$ls/false$9303$15i0ov)
                                                              (if (if g$ls/false$9303$15i0ov
                                                                    (begin
                                                                      '#f
                                                                      (apply
                                                                        (case-lambda
                                                                          ((g$x$9304$15i0ov
                                                                             g$dots$9305$15i0ov
                                                                             g$y$9306$15i0ov)
                                                                           (g$ellipsis?$9276$15i0ov
                                                                             g$dots$9305$15i0ov)))
                                                                        g$ls/false$9303$15i0ov))
                                                                    '#f)
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$x$9307$15i0ov
                                                                       g$dots$9308$15i0ov
                                                                       g$y$9309$15i0ov)
                                                                     ((letrec ((g$f$9310$15i0ov
                                                                                 (case-lambda
                                                                                   ((g$y$9311$15i0ov
                                                                                      g$k$9312$15i0ov)
                                                                                    ((case-lambda
                                                                                       ((g$t$9313$15i0ov)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9314$15i0ov)
                                                                                            (if g$ls/false$9314$15i0ov
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (g$k$9312$15i0ov
                                                                                                     g$maps$9275$15i0ov)))
                                                                                                g$ls/false$9314$15i0ov)
                                                                                              ((case-lambda
                                                                                                 ((g$t$9315$15i0ov)
                                                                                                  ((case-lambda
                                                                                                     ((g$ls/false$9316$15i0ov)
                                                                                                      (if (if g$ls/false$9316$15i0ov
                                                                                                            (begin
                                                                                                              '#f
                                                                                                              (apply
                                                                                                                (case-lambda
                                                                                                                  ((g$dots$9317$15i0ov
                                                                                                                     g$y$9318$15i0ov)
                                                                                                                   (g$ellipsis?$9276$15i0ov
                                                                                                                     g$dots$9317$15i0ov)))
                                                                                                                g$ls/false$9316$15i0ov))
                                                                                                            '#f)
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$dots$9319$15i0ov
                                                                                                               g$y$9320$15i0ov)
                                                                                                             (g$f$9310$15i0ov
                                                                                                               g$y$9320$15i0ov
                                                                                                               (case-lambda
                                                                                                                 ((g$maps$9321$15i0ov)
                                                                                                                  (call-with-values
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (g$k$9312$15i0ov
                                                                                                                         (cons
                                                                                                                           '()
                                                                                                                           g$maps$9321$15i0ov))))
                                                                                                                    (case-lambda
                                                                                                                      ((g$x$9324$15i0ov
                                                                                                                         g$maps$9325$15i0ov)
                                                                                                                       ((case-lambda
                                                                                                                          ((g$maps$9326$15i0ov
                                                                                                                             g$x$9327$15i0ov)
                                                                                                                           (if (null?
                                                                                                                                 (car g$maps$9326$15i0ov))
                                                                                                                             (g$syntax-violation$7504$15i0ov
                                                                                                                               '#f
                                                                                                                               '"extra ellipsis in syntax form"
                                                                                                                               g$src$9272$15i0ov)
                                                                                                                             (values
                                                                                                                               (g$gen-mappend$9215$15i0ov
                                                                                                                                 g$x$9327$15i0ov
                                                                                                                                 (car g$maps$9326$15i0ov))
                                                                                                                               (cdr g$maps$9326$15i0ov)))))
                                                                                                                        g$maps$9325$15i0ov
                                                                                                                        g$x$9324$15i0ov)))))))))
                                                                                                          g$ls/false$9316$15i0ov)
                                                                                                        ((case-lambda
                                                                                                           ((g$t$9328$15i0ov)
                                                                                                            ((case-lambda
                                                                                                               ((g$ls/false$9329$15i0ov)
                                                                                                                (if g$ls/false$9329$15i0ov
                                                                                                                  (apply
                                                                                                                    (case-lambda
                                                                                                                      (()
                                                                                                                       (call-with-values
                                                                                                                         (case-lambda
                                                                                                                           (()
                                                                                                                            (g$gen-syntax$9212$15i0ov
                                                                                                                              g$src$9272$15i0ov
                                                                                                                              g$y$9311$15i0ov
                                                                                                                              g$r$9274$15i0ov
                                                                                                                              g$maps$9275$15i0ov
                                                                                                                              g$ellipsis?$9276$15i0ov
                                                                                                                              g$vec?$9277$15i0ov)))
                                                                                                                         (case-lambda
                                                                                                                           ((g$y$9332$15i0ov
                                                                                                                              g$maps$9333$15i0ov)
                                                                                                                            ((case-lambda
                                                                                                                               ((g$maps$9334$15i0ov
                                                                                                                                  g$y$9335$15i0ov)
                                                                                                                                (call-with-values
                                                                                                                                  (case-lambda
                                                                                                                                    (()
                                                                                                                                     (g$k$9312$15i0ov
                                                                                                                                       g$maps$9334$15i0ov)))
                                                                                                                                  (case-lambda
                                                                                                                                    ((g$x$9338$15i0ov
                                                                                                                                       g$maps$9339$15i0ov)
                                                                                                                                     ((case-lambda
                                                                                                                                        ((g$maps$9340$15i0ov
                                                                                                                                           g$x$9341$15i0ov)
                                                                                                                                         (values
                                                                                                                                           (g$gen-append$9214$15i0ov
                                                                                                                                             g$x$9341$15i0ov
                                                                                                                                             g$y$9335$15i0ov)
                                                                                                                                           g$maps$9340$15i0ov)))
                                                                                                                                      g$maps$9339$15i0ov
                                                                                                                                      g$x$9338$15i0ov))))))
                                                                                                                             g$maps$9333$15i0ov
                                                                                                                             g$y$9332$15i0ov))))))
                                                                                                                    g$ls/false$9329$15i0ov)
                                                                                                                  (g$syntax-violation$7504$15i0ov
                                                                                                                    '#f
                                                                                                                    '"invalid syntax"
                                                                                                                    g$t$9328$15i0ov))))
                                                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                                                               g$t$9328$15i0ov
                                                                                                               '_))))
                                                                                                         g$t$9315$15i0ov))))
                                                                                                   (g$syntax-dispatch$7395$15i0ov
                                                                                                     g$t$9315$15i0ov
                                                                                                     '(any .
                                                                                                           any)))))
                                                                                               g$t$9313$15i0ov))))
                                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                                           g$t$9313$15i0ov
                                                                                           '()))))
                                                                                     g$y$9311$15i0ov)))))
                                                                        g$f$9310$15i0ov)
                                                                      g$y$9309$15i0ov
                                                                      (case-lambda
                                                                        ((g$maps$9342$15i0ov)
                                                                         (call-with-values
                                                                           (case-lambda
                                                                             (()
                                                                              (g$gen-syntax$9212$15i0ov
                                                                                g$src$9272$15i0ov
                                                                                g$x$9307$15i0ov
                                                                                g$r$9274$15i0ov
                                                                                (cons
                                                                                  '()
                                                                                  g$maps$9342$15i0ov)
                                                                                g$ellipsis?$9276$15i0ov
                                                                                '#f)))
                                                                           (case-lambda
                                                                             ((g$x$9345$15i0ov
                                                                                g$maps$9346$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$maps$9347$15i0ov
                                                                                    g$x$9348$15i0ov)
                                                                                  (if (null?
                                                                                        (car g$maps$9347$15i0ov))
                                                                                    (g$syntax-violation$7504$15i0ov
                                                                                      '#f
                                                                                      '"extra ellipsis in syntax form"
                                                                                      g$src$9272$15i0ov)
                                                                                    (values
                                                                                      (g$gen-map$9216$15i0ov
                                                                                        g$x$9348$15i0ov
                                                                                        (car g$maps$9347$15i0ov))
                                                                                      (cdr g$maps$9347$15i0ov)))))
                                                                               g$maps$9346$15i0ov
                                                                               g$x$9345$15i0ov)))))))))
                                                                  g$ls/false$9303$15i0ov)
                                                                ((case-lambda
                                                                   ((g$t$9349$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$ls/false$9350$15i0ov)
                                                                        (if g$ls/false$9350$15i0ov
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$x$9351$15i0ov
                                                                                 g$y$9352$15i0ov)
                                                                               (call-with-values
                                                                                 (case-lambda
                                                                                   (()
                                                                                    (g$gen-syntax$9212$15i0ov
                                                                                      g$src$9272$15i0ov
                                                                                      g$x$9351$15i0ov
                                                                                      g$r$9274$15i0ov
                                                                                      g$maps$9275$15i0ov
                                                                                      g$ellipsis?$9276$15i0ov
                                                                                      '#f)))
                                                                                 (case-lambda
                                                                                   ((g$xnew$9355$15i0ov
                                                                                      g$maps$9356$15i0ov)
                                                                                    ((case-lambda
                                                                                       ((g$maps$9357$15i0ov
                                                                                          g$xnew$9358$15i0ov)
                                                                                        (call-with-values
                                                                                          (case-lambda
                                                                                            (()
                                                                                             (g$gen-syntax$9212$15i0ov
                                                                                               g$src$9272$15i0ov
                                                                                               g$y$9352$15i0ov
                                                                                               g$r$9274$15i0ov
                                                                                               g$maps$9357$15i0ov
                                                                                               g$ellipsis?$9276$15i0ov
                                                                                               g$vec?$9277$15i0ov)))
                                                                                          (case-lambda
                                                                                            ((g$ynew$9361$15i0ov
                                                                                               g$maps$9362$15i0ov)
                                                                                             ((case-lambda
                                                                                                ((g$maps$9363$15i0ov
                                                                                                   g$ynew$9364$15i0ov)
                                                                                                 (values
                                                                                                   (g$gen-cons$9217$15i0ov
                                                                                                     g$e$9273$15i0ov
                                                                                                     g$x$9351$15i0ov
                                                                                                     g$y$9352$15i0ov
                                                                                                     g$xnew$9358$15i0ov
                                                                                                     g$ynew$9364$15i0ov)
                                                                                                   g$maps$9363$15i0ov)))
                                                                                              g$maps$9362$15i0ov
                                                                                              g$ynew$9361$15i0ov))))))
                                                                                     g$maps$9356$15i0ov
                                                                                     g$xnew$9355$15i0ov))))))
                                                                            g$ls/false$9350$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$t$9365$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$ls/false$9366$15i0ov)
                                                                                  (if g$ls/false$9366$15i0ov
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$ls$9367$15i0ov)
                                                                                         (call-with-values
                                                                                           (case-lambda
                                                                                             (()
                                                                                              (g$gen-syntax$9212$15i0ov
                                                                                                g$src$9272$15i0ov
                                                                                                g$ls$9367$15i0ov
                                                                                                g$r$9274$15i0ov
                                                                                                g$maps$9275$15i0ov
                                                                                                g$ellipsis?$9276$15i0ov
                                                                                                '#t)))
                                                                                           (case-lambda
                                                                                             ((g$lsnew$9370$15i0ov
                                                                                                g$maps$9371$15i0ov)
                                                                                              ((case-lambda
                                                                                                 ((g$maps$9372$15i0ov
                                                                                                    g$lsnew$9373$15i0ov)
                                                                                                  (values
                                                                                                    (g$gen-vector$9218$15i0ov
                                                                                                      g$e$9273$15i0ov
                                                                                                      g$ls$9367$15i0ov
                                                                                                      g$lsnew$9373$15i0ov)
                                                                                                    g$maps$9372$15i0ov)))
                                                                                               g$maps$9371$15i0ov
                                                                                               g$lsnew$9370$15i0ov))))))
                                                                                      g$ls/false$9366$15i0ov)
                                                                                    ((case-lambda
                                                                                       ((g$t$9374$15i0ov)
                                                                                        ((case-lambda
                                                                                           ((g$ls/false$9375$15i0ov)
                                                                                            (if g$ls/false$9375$15i0ov
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  (()
                                                                                                   (values
                                                                                                     (list
                                                                                                       'quote
                                                                                                       g$e$9273$15i0ov)
                                                                                                     g$maps$9275$15i0ov)))
                                                                                                g$ls/false$9375$15i0ov)
                                                                                              (g$syntax-violation$7504$15i0ov
                                                                                                '#f
                                                                                                '"invalid syntax"
                                                                                                g$t$9374$15i0ov))))
                                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                                           g$t$9374$15i0ov
                                                                                           '_))))
                                                                                     g$t$9365$15i0ov))))
                                                                               (g$syntax-dispatch$7395$15i0ov
                                                                                 g$t$9365$15i0ov
                                                                                 '#(vector
                                                                                    each-any)))))
                                                                           g$t$9349$15i0ov))))
                                                                     (g$syntax-dispatch$7395$15i0ov
                                                                       g$t$9349$15i0ov
                                                                       '(any .
                                                                             any)))))
                                                                 g$t$9302$15i0ov))))
                                                           (g$syntax-dispatch$7395$15i0ov
                                                             g$t$9302$15i0ov
                                                             '(any any
                                                                   .
                                                                   any)))))
                                                       g$t$9295$15i0ov))))
                                                 (g$syntax-dispatch$7395$15i0ov
                                                   g$t$9295$15i0ov
                                                   '(any any)))))
                                             g$t$9282$15i0ov))))
                                       (g$syntax-dispatch$7395$15i0ov
                                         g$t$9282$15i0ov
                                         'any))))
                                   g$t$9278$15i0ov))))
                             (g$syntax-dispatch$7395$15i0ov
                               g$t$9278$15i0ov
                               'any))))
                         g$e$9273$15i0ov))))
                   (g$gen-ref$9213$15i0ov
                     (case-lambda
                       ((g$src$9259$15i0ov
                          g$var$9260$15i0ov
                          g$level$9261$15i0ov
                          g$maps$9262$15i0ov)
                        (if (= g$level$9261$15i0ov '0)
                          (values g$var$9260$15i0ov g$maps$9262$15i0ov)
                          (if (null? g$maps$9262$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"missing ellipsis in syntax form"
                              g$src$9259$15i0ov)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$gen-ref$9213$15i0ov
                                   g$src$9259$15i0ov
                                   g$var$9260$15i0ov
                                   (- g$level$9261$15i0ov '1)
                                   (cdr g$maps$9262$15i0ov))))
                              (case-lambda
                                ((g$outer-var$9265$15i0ov
                                   g$outer-maps$9266$15i0ov)
                                 ((case-lambda
                                    ((g$outer-maps$9267$15i0ov
                                       g$outer-var$9268$15i0ov)
                                     ((case-lambda
                                        ((g$t$9269$15i0ov)
                                         (if g$t$9269$15i0ov
                                           ((case-lambda
                                              ((g$b$9270$15i0ov)
                                               (values
                                                 (cdr g$b$9270$15i0ov)
                                                 g$maps$9262$15i0ov)))
                                            g$t$9269$15i0ov)
                                           ((case-lambda
                                              ((g$inner-var$9271$15i0ov)
                                               (values
                                                 g$inner-var$9271$15i0ov
                                                 (cons
                                                   (cons
                                                     (cons
                                                       g$outer-var$9268$15i0ov
                                                       g$inner-var$9271$15i0ov)
                                                     (car g$maps$9262$15i0ov))
                                                   g$outer-maps$9267$15i0ov))))
                                            (g$gen-lexical$7061$15i0ov 'tmp)))))
                                      (assq
                                        g$outer-var$9268$15i0ov
                                        (car g$maps$9262$15i0ov)))))
                                  g$outer-maps$9266$15i0ov
                                  g$outer-var$9265$15i0ov)))))))))
                   (g$gen-append$9214$15i0ov
                     (case-lambda
                       ((g$x$9257$15i0ov g$y$9258$15i0ov)
                        (if (equal? g$y$9258$15i0ov ''())
                          g$x$9257$15i0ov
                          (list 'append g$x$9257$15i0ov g$y$9258$15i0ov)))))
                   (g$gen-mappend$9215$15i0ov
                     (case-lambda
                       ((g$e$9255$15i0ov g$map-env$9256$15i0ov)
                        (list
                          'apply
                          '(primitive append)
                          (g$gen-map$9216$15i0ov
                            g$e$9255$15i0ov
                            g$map-env$9256$15i0ov)))))
                   (g$gen-map$9216$15i0ov
                     (case-lambda
                       ((g$e$9246$15i0ov g$map-env$9247$15i0ov)
                        ((case-lambda
                           ((g$formals$9248$15i0ov g$actuals$9249$15i0ov)
                            (if (eq? (car g$e$9246$15i0ov) 'ref)
                              (car g$actuals$9249$15i0ov)
                              (if (g$for-all$5359$15i0ov
                                    (case-lambda
                                      ((g$x$9250$15i0ov)
                                       (if (eq? (car g$x$9250$15i0ov) 'ref)
                                         (begin
                                           '#f
                                           (memq
                                             (g$cadr$4890$15i0ov
                                               g$x$9250$15i0ov)
                                             g$formals$9248$15i0ov))
                                         '#f)))
                                    (cdr g$e$9246$15i0ov))
                                ((case-lambda
                                   ((g$args$9251$15i0ov)
                                    (cons
                                      'map
                                      (cons
                                        (list 'primitive (car g$e$9246$15i0ov))
                                        g$args$9251$15i0ov))))
                                 (map ((case-lambda
                                         ((g$r$9252$15i0ov)
                                          (case-lambda
                                            ((g$x$9253$15i0ov)
                                             (cdr (assq
                                                    (g$cadr$4890$15i0ov
                                                      g$x$9253$15i0ov)
                                                    g$r$9252$15i0ov))))))
                                       (map cons
                                            g$formals$9248$15i0ov
                                            g$actuals$9249$15i0ov))
                                      (cdr g$e$9246$15i0ov)))
                                (g$cons*$5361$15i0ov
                                  'map
                                  (list
                                    'lambda
                                    g$formals$9248$15i0ov
                                    g$e$9246$15i0ov)
                                  g$actuals$9249$15i0ov)))))
                         (map cdr g$map-env$9247$15i0ov)
                         (map (case-lambda
                                ((g$x$9254$15i0ov)
                                 (list 'ref (car g$x$9254$15i0ov))))
                              g$map-env$9247$15i0ov)))))
                   (g$gen-cons$9217$15i0ov
                     (case-lambda
                       ((g$e$9238$15i0ov
                          g$x$9239$15i0ov
                          g$y$9240$15i0ov
                          g$xnew$9241$15i0ov
                          g$ynew$9242$15i0ov)
                        ((case-lambda
                           ((g$t$9243$15i0ov)
                            (if (memv g$t$9243$15i0ov '(quote))
                              (if (eq? (car g$xnew$9241$15i0ov) 'quote)
                                ((case-lambda
                                   ((g$xnew$9244$15i0ov g$ynew$9245$15i0ov)
                                    (if (if (eq? g$xnew$9244$15i0ov
                                                 g$x$9239$15i0ov)
                                          (begin
                                            '#f
                                            (eq? g$ynew$9245$15i0ov
                                                 g$y$9240$15i0ov))
                                          '#f)
                                      (list 'quote g$e$9238$15i0ov)
                                      (list
                                        'quote
                                        (cons
                                          g$xnew$9244$15i0ov
                                          g$ynew$9245$15i0ov)))))
                                 (g$cadr$4890$15i0ov g$xnew$9241$15i0ov)
                                 (g$cadr$4890$15i0ov g$ynew$9242$15i0ov))
                                (if (null?
                                      (g$cadr$4890$15i0ov g$ynew$9242$15i0ov))
                                  (list 'list g$xnew$9241$15i0ov)
                                  (list
                                    'cons
                                    g$xnew$9241$15i0ov
                                    g$ynew$9242$15i0ov)))
                              (if (memv g$t$9243$15i0ov '(list))
                                (cons
                                  'list
                                  (cons
                                    g$xnew$9241$15i0ov
                                    (cdr g$ynew$9242$15i0ov)))
                                (list
                                  'cons
                                  g$xnew$9241$15i0ov
                                  g$ynew$9242$15i0ov)))))
                         (car g$ynew$9242$15i0ov)))))
                   (g$gen-vector$9218$15i0ov
                     (case-lambda
                       ((g$e$9235$15i0ov g$ls$9236$15i0ov g$lsnew$9237$15i0ov)
                        (if (eq? (car g$lsnew$9237$15i0ov) 'quote)
                          (if (eq? (g$cadr$4890$15i0ov g$lsnew$9237$15i0ov)
                                   g$ls$9236$15i0ov)
                            (list 'quote g$e$9235$15i0ov)
                            (list
                              'quote
                              (list->vector
                                (g$cadr$4890$15i0ov g$lsnew$9237$15i0ov))))
                          (if (eq? (car g$lsnew$9237$15i0ov) 'list)
                            (cons 'vector (cdr g$lsnew$9237$15i0ov))
                            (list 'list->vector g$lsnew$9237$15i0ov))))))
                   (g$regen$9219$15i0ov
                     (case-lambda
                       ((g$x$9232$15i0ov)
                        ((case-lambda
                           ((g$t$9233$15i0ov)
                            (if (memv g$t$9233$15i0ov '(ref))
                              (g$cadr$4890$15i0ov g$x$9232$15i0ov)
                              (if (memv g$t$9233$15i0ov '(primitive))
                                (list
                                  'primitive
                                  (g$cadr$4890$15i0ov g$x$9232$15i0ov))
                                (if (memv g$t$9233$15i0ov '(quote))
                                  (list
                                    'quote
                                    (g$cadr$4890$15i0ov g$x$9232$15i0ov))
                                  (if (memv g$t$9233$15i0ov '(lambda))
                                    (g$build-lambda$7048$15i0ov
                                      '#f
                                      (g$cadr$4890$15i0ov g$x$9232$15i0ov)
                                      (g$regen$9219$15i0ov
                                        (g$caddr$4896$15i0ov g$x$9232$15i0ov)))
                                    (if (memv g$t$9233$15i0ov '(map))
                                      ((case-lambda
                                         ((g$ls$9234$15i0ov)
                                          (cons
                                            '(primitive ellipsis-map)
                                            g$ls$9234$15i0ov)))
                                       (map g$regen$9219$15i0ov
                                            (cdr g$x$9232$15i0ov)))
                                      (cons
                                        (list 'primitive (car g$x$9232$15i0ov))
                                        (map g$regen$9219$15i0ov
                                             (cdr g$x$9232$15i0ov))))))))))
                         (car g$x$9232$15i0ov))))))
           (case-lambda
             ((g$e$9220$15i0ov g$r$9221$15i0ov g$mr$9222$15i0ov)
              ((case-lambda
                 ((g$t$9223$15i0ov)
                  ((case-lambda
                     ((g$ls/false$9224$15i0ov)
                      (if g$ls/false$9224$15i0ov
                        (apply
                          (case-lambda
                            ((g$x$9225$15i0ov)
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$gen-syntax$9212$15i0ov
                                    g$e$9220$15i0ov
                                    g$x$9225$15i0ov
                                    g$r$9221$15i0ov
                                    '()
                                    g$ellipsis?$7396$15i0ov
                                    '#f)))
                               (case-lambda
                                 ((g$e$9228$15i0ov g$maps$9229$15i0ov)
                                  ((case-lambda
                                     ((g$maps$9230$15i0ov g$e$9231$15i0ov)
                                      (g$regen$9219$15i0ov g$e$9231$15i0ov)))
                                   g$maps$9229$15i0ov
                                   g$e$9228$15i0ov))))))
                          g$ls/false$9224$15i0ov)
                        (g$syntax-violation$7504$15i0ov
                          '#f
                          '"invalid syntax"
                          g$t$9223$15i0ov))))
                   (g$syntax-dispatch$7395$15i0ov g$t$9223$15i0ov '(_ any)))))
               g$e$9220$15i0ov))))))))
   (g$core-macro-transformer$7402$15i0ov
     g$core-macro-transformer$10841$15i0ov
     (case-lambda
       ((g$name$9376$15i0ov)
        ((case-lambda
           ((g$t$9377$15i0ov)
            (if (memv g$t$9377$15i0ov '(quote))
              g$quote-transformer$7355$15i0ov
              (if (memv g$t$9377$15i0ov '(lambda))
                g$lambda-transformer$7357$15i0ov
                (if (memv g$t$9377$15i0ov '(case-lambda))
                  g$case-lambda-transformer$7356$15i0ov
                  (if (memv g$t$9377$15i0ov '(letrec))
                    g$letrec-transformer$7345$15i0ov
                    (if (memv g$t$9377$15i0ov '(letrec*))
                      g$letrec*-transformer$7346$15i0ov
                      (if (memv g$t$9377$15i0ov '(if))
                        g$if-transformer$7353$15i0ov
                        (if (memv g$t$9377$15i0ov '(foreign-call))
                          g$foreign-call-transformer$7393$15i0ov
                          (if (memv g$t$9377$15i0ov '(syntax-case))
                            g$syntax-case-transformer$7399$15i0ov
                            (if (memv g$t$9377$15i0ov '(syntax))
                              g$syntax-transformer$7401$15i0ov
                              (if (memv g$t$9377$15i0ov '(type-descriptor))
                                g$type-descriptor-transformer$7348$15i0ov
                                (if (memv
                                      g$t$9377$15i0ov
                                      '(record-type-descriptor))
                                  g$record-type-descriptor-transformer$7349$15i0ov
                                  (if (memv
                                        g$t$9377$15i0ov
                                        '(record-constructor-descriptor))
                                    g$record-constructor-descriptor-transformer$7350$15i0ov
                                    (if (memv
                                          g$t$9377$15i0ov
                                          '(fluid-let-syntax))
                                      g$fluid-let-syntax-transformer$7347$15i0ov
                                      (assertion-violation
                                        'macro-transformer
                                        '"BUG: cannot find transformer"
                                        g$name$9376$15i0ov))))))))))))))))
         g$name$9376$15i0ov))))
   (g$file-options-macro$7403$15i0ov
     g$file-options-macro$10842$15i0ov
     (case-lambda
       ((g$x$9378$15i0ov)
        (letrec* ((g$valid-option?$9379$15i0ov
                    (case-lambda
                      ((g$x$9384$15i0ov)
                       (if (g$id?$7117$15i0ov g$x$9384$15i0ov)
                         (begin
                           '#f
                           (memq
                             (g$id->sym$7118$15i0ov g$x$9384$15i0ov)
                             '(no-fail no-create no-truncate)))
                         '#f)))))
          ((case-lambda
             ((g$t$9380$15i0ov)
              ((case-lambda
                 ((g$ls/false$9381$15i0ov)
                  (if (if g$ls/false$9381$15i0ov
                        (begin
                          '#f
                          (apply
                            (case-lambda
                              ((g$opt*$9382$15i0ov)
                               (if (g$for-all$5359$15i0ov
                                     g$valid-option?$9379$15i0ov
                                     g$opt*$9382$15i0ov)
                                 (begin
                                   '#f
                                   (g$file-options-spec$6386$15i0ov
                                     (map g$id->sym$7118$15i0ov
                                          g$opt*$9382$15i0ov)))
                                 '#f)))
                            g$ls/false$9381$15i0ov))
                        '#f)
                    (apply
                      (case-lambda
                        ((g$opt*$9383$15i0ov)
                         (g$bless$7358$15i0ov
                           (list
                             'quote
                             (g$file-options-spec$6386$15i0ov
                               (map g$id->sym$7118$15i0ov
                                    g$opt*$9383$15i0ov))))))
                      g$ls/false$9381$15i0ov)
                    (g$syntax-violation$7504$15i0ov
                      '#f
                      '"invalid syntax"
                      g$t$9380$15i0ov))))
               (g$syntax-dispatch$7395$15i0ov
                 g$t$9380$15i0ov
                 '(_ . each-any)))))
           g$x$9378$15i0ov)))))
   (g$symbol-macro$7404$15i0ov
     g$symbol-macro$10843$15i0ov
     (case-lambda
       ((g$x$9385$15i0ov g$set$9386$15i0ov)
        ((case-lambda
           ((g$t$9387$15i0ov)
            ((case-lambda
               ((g$ls/false$9388$15i0ov)
                (if (if g$ls/false$9388$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$name$9389$15i0ov)
                             (if (g$id?$7117$15i0ov g$name$9389$15i0ov)
                               (begin
                                 '#f
                                 (memq
                                   (g$id->sym$7118$15i0ov g$name$9389$15i0ov)
                                   g$set$9386$15i0ov))
                               '#f)))
                          g$ls/false$9388$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$name$9390$15i0ov)
                       (g$bless$7358$15i0ov (list 'quote g$name$9390$15i0ov))))
                    g$ls/false$9388$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$9387$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$9387$15i0ov '(_ any)))))
         g$x$9385$15i0ov))))
   (g$macro-transformer$7405$15i0ov
     g$macro-transformer$10844$15i0ov
     (case-lambda
       ((g$x$9391$15i0ov)
        (if (procedure? g$x$9391$15i0ov)
          g$x$9391$15i0ov
          (if (symbol? g$x$9391$15i0ov)
            ((case-lambda
               ((g$t$9392$15i0ov)
                (if (memv g$t$9392$15i0ov '(define-record-type))
                  g$define-record-type-macro$7389$15i0ov
                  (if (memv g$t$9392$15i0ov '(define-struct))
                    g$define-struct-macro$7388$15i0ov
                    (if (memv g$t$9392$15i0ov '(include))
                      g$include-macro$7383$15i0ov
                      (if (memv g$t$9392$15i0ov '(cond))
                        g$cond-macro$7381$15i0ov
                        (if (memv g$t$9392$15i0ov '(let))
                          g$let-macro$7361$15i0ov
                          (if (memv g$t$9392$15i0ov '(do))
                            g$do-macro$7377$15i0ov
                            (if (memv g$t$9392$15i0ov '(or))
                              g$or-macro$7379$15i0ov
                              (if (memv g$t$9392$15i0ov '(and))
                                g$and-macro$7380$15i0ov
                                (if (memv g$t$9392$15i0ov '(let*))
                                  g$let*-macro$7378$15i0ov
                                  (if (memv g$t$9392$15i0ov '(let-values))
                                    g$let-values-macro$7362$15i0ov
                                    (if (memv g$t$9392$15i0ov '(let*-values))
                                      g$let*-values-macro$7363$15i0ov
                                      (if (memv g$t$9392$15i0ov '(syntax-rules))
                                        g$syntax-rules-macro$7385$15i0ov
                                        (if (memv g$t$9392$15i0ov '(quasiquote))
                                          g$quasiquote-macro$7386$15i0ov
                                          (if (memv
                                                g$t$9392$15i0ov
                                                '(quasisyntax))
                                            g$quasisyntax-macro$7387$15i0ov
                                            (if (memv
                                                  g$t$9392$15i0ov
                                                  '(with-syntax))
                                              g$with-syntax-macro$7359$15i0ov
                                              (if (memv g$t$9392$15i0ov '(when))
                                                g$when-macro$7351$15i0ov
                                                (if (memv
                                                      g$t$9392$15i0ov
                                                      '(unless))
                                                  g$unless-macro$7352$15i0ov
                                                  (if (memv
                                                        g$t$9392$15i0ov
                                                        '(case))
                                                    g$case-macro$7354$15i0ov
                                                    (if (memv
                                                          g$t$9392$15i0ov
                                                          '(identifier-syntax))
                                                      g$identifier-syntax-macro$7376$15i0ov
                                                      (if (memv
                                                            g$t$9392$15i0ov
                                                            '(time))
                                                        g$time-macro$7372$15i0ov
                                                        (if (memv
                                                              g$t$9392$15i0ov
                                                              '(delay))
                                                          g$delay-macro$7373$15i0ov
                                                          (if (memv
                                                                g$t$9392$15i0ov
                                                                '(assert))
                                                            g$assert-macro$7374$15i0ov
                                                            (if (memv
                                                                  g$t$9392$15i0ov
                                                                  '(endianness))
                                                              g$endianness-macro$7375$15i0ov
                                                              (if (memv
                                                                    g$t$9392$15i0ov
                                                                    '(guard))
                                                                g$guard-macro$7370$15i0ov
                                                                (if (memv
                                                                      g$t$9392$15i0ov
                                                                      '(define-enumeration))
                                                                  g$define-enumeration-macro$7371$15i0ov
                                                                  (if (memv
                                                                        g$t$9392$15i0ov
                                                                        '(trace-lambda))
                                                                    g$trace-lambda-macro$7364$15i0ov
                                                                    (if (memv
                                                                          g$t$9392$15i0ov
                                                                          '(trace-define))
                                                                      g$trace-define-macro$7365$15i0ov
                                                                      (if (memv
                                                                            g$t$9392$15i0ov
                                                                            '(trace-define-syntax))
                                                                        g$trace-define-syntax-macro$7366$15i0ov
                                                                        (if (memv
                                                                              g$t$9392$15i0ov
                                                                              '(trace-let-syntax))
                                                                          g$trace-let-syntax-macro$7368$15i0ov
                                                                          (if (memv
                                                                                g$t$9392$15i0ov
                                                                                '(trace-letrec-syntax))
                                                                            g$trace-letrec-syntax-macro$7369$15i0ov
                                                                            (if (memv
                                                                                  g$t$9392$15i0ov
                                                                                  '(define-condition-type))
                                                                              g$define-condition-type-macro$7390$15i0ov
                                                                              (if (memv
                                                                                    g$t$9392$15i0ov
                                                                                    '(parameterize))
                                                                                g$parameterize-macro$7392$15i0ov
                                                                                (if (memv
                                                                                      g$t$9392$15i0ov
                                                                                      '(include-into))
                                                                                  g$include-into-macro$7384$15i0ov
                                                                                  (if (memv
                                                                                        g$t$9392$15i0ov
                                                                                        '(eol-style))
                                                                                    (case-lambda
                                                                                      ((g$x$9393$15i0ov)
                                                                                       (g$symbol-macro$7404$15i0ov
                                                                                         g$x$9393$15i0ov
                                                                                         '(none
                                                                                            lf
                                                                                            cr
                                                                                            crlf
                                                                                            nel
                                                                                            crnel
                                                                                            ls))))
                                                                                    (if (memv
                                                                                          g$t$9392$15i0ov
                                                                                          '(error-handling-mode))
                                                                                      (case-lambda
                                                                                        ((g$x$9394$15i0ov)
                                                                                         (g$symbol-macro$7404$15i0ov
                                                                                           g$x$9394$15i0ov
                                                                                           '(ignore
                                                                                              raise
                                                                                              replace))))
                                                                                      (if (memv
                                                                                            g$t$9392$15i0ov
                                                                                            '(buffer-mode))
                                                                                        (case-lambda
                                                                                          ((g$x$9395$15i0ov)
                                                                                           (g$symbol-macro$7404$15i0ov
                                                                                             g$x$9395$15i0ov
                                                                                             '(none
                                                                                                line
                                                                                                block))))
                                                                                        (if (memv
                                                                                              g$t$9392$15i0ov
                                                                                              '(file-options))
                                                                                          g$file-options-macro$7403$15i0ov
                                                                                          (if (memv
                                                                                                g$t$9392$15i0ov
                                                                                                '(... =>
                                                                                                      _
                                                                                                      else
                                                                                                      unquote
                                                                                                      unquote-splicing
                                                                                                      unsyntax
                                                                                                      unsyntax-splicing
                                                                                                      fields
                                                                                                      mutable
                                                                                                      immutable
                                                                                                      parent
                                                                                                      protocol
                                                                                                      sealed
                                                                                                      opaque
                                                                                                      nongenerative
                                                                                                      parent-rtd))
                                                                                            g$incorrect-usage-macro$7391$15i0ov
                                                                                            (error
                                                                                              'macro-transformer
                                                                                              '"BUG: invalid macro"
                                                                                              g$x$9391$15i0ov)))))))))))))))))))))))))))))))))))))))))
             g$x$9391$15i0ov)
            (error
              'core-macro-transformer
              '"BUG: invalid macro"
              g$x$9391$15i0ov))))))
   (g$local-macro-transformer$7406$15i0ov
     g$local-macro-transformer$10845$15i0ov
     (case-lambda ((g$x$9396$15i0ov) (car g$x$9396$15i0ov))))
   (g$do-macro-call$7407$15i0ov
     g$do-macro-call$10846$15i0ov
     (case-lambda
       ((g$transformer$9397$15i0ov g$expr$9398$15i0ov)
        ((case-lambda
           ((g$out$9399$15i0ov)
            (begin
              ((letrec ((g$f$9400$15i0ov
                          (case-lambda
                            ((g$x$9401$15i0ov)
                             (if (not (g$stx?$7089$15i0ov g$x$9401$15i0ov))
                               (if (pair? g$x$9401$15i0ov)
                                 (begin
                                   (g$f$9400$15i0ov (car g$x$9401$15i0ov))
                                   (g$f$9400$15i0ov (cdr g$x$9401$15i0ov)))
                                 (if (vector? g$x$9401$15i0ov)
                                   (vector-for-each
                                     g$f$9400$15i0ov
                                     g$x$9401$15i0ov)
                                   (if (symbol? g$x$9401$15i0ov)
                                     (g$syntax-violation$7504$15i0ov
                                       '#f
                                       '"raw symbol encountered in output of macro"
                                       g$expr$9398$15i0ov
                                       g$x$9401$15i0ov)
                                     (void))))
                               (void))))))
                 g$f$9400$15i0ov)
               g$out$9399$15i0ov)
              (g$add-mark$7106$15i0ov
                (g$gen-mark$7101$15i0ov)
                g$out$9399$15i0ov
                g$expr$9398$15i0ov))))
         (g$transformer$9397$15i0ov
           (g$add-mark$7106$15i0ov
             g$anti-mark$7102$15i0ov
             g$expr$9398$15i0ov
             '#f))))))
   (g$chi-macro$7408$15i0ov
     g$chi-macro$10847$15i0ov
     (case-lambda
       ((g$p$9402$15i0ov g$e$9403$15i0ov)
        (g$do-macro-call$7407$15i0ov
          (g$macro-transformer$7405$15i0ov g$p$9402$15i0ov)
          g$e$9403$15i0ov))))
   (g$chi-local-macro$7409$15i0ov
     g$chi-local-macro$10848$15i0ov
     (case-lambda
       ((g$p$9404$15i0ov g$e$9405$15i0ov)
        (g$do-macro-call$7407$15i0ov
          (g$local-macro-transformer$7406$15i0ov g$p$9404$15i0ov)
          g$e$9405$15i0ov))))
   (g$chi-global-macro$7410$15i0ov
     g$chi-global-macro$10849$15i0ov
     (case-lambda
       ((g$p$9406$15i0ov g$e$9407$15i0ov)
        ((case-lambda
           ((g$lib$9408$15i0ov g$loc$9409$15i0ov)
            (begin
              (g$visit-library$6933$15i0ov g$lib$9408$15i0ov)
              ((case-lambda
                 ((g$x$9410$15i0ov)
                  ((case-lambda
                     ((g$transformer$9411$15i0ov)
                      (g$do-macro-call$7407$15i0ov
                        g$transformer$9411$15i0ov
                        g$e$9407$15i0ov)))
                   (if (procedure? g$x$9410$15i0ov)
                     g$x$9410$15i0ov
                     (assertion-violation
                       'chi-global-macro
                       '"BUG: not a procedure"
                       g$x$9410$15i0ov)))))
               (symbol-value g$loc$9409$15i0ov)))))
         (car g$p$9406$15i0ov)
         (cdr g$p$9406$15i0ov)))))
   (g$chi-expr*$7411$15i0ov
     g$chi-expr*$10850$15i0ov
     (case-lambda
       ((g$e*$9412$15i0ov g$r$9413$15i0ov g$mr$9414$15i0ov)
        (if (null? g$e*$9412$15i0ov)
          '()
          ((case-lambda
             ((g$e$9415$15i0ov)
              (cons
                g$e$9415$15i0ov
                (g$chi-expr*$7411$15i0ov
                  (cdr g$e*$9412$15i0ov)
                  g$r$9413$15i0ov
                  g$mr$9414$15i0ov))))
           (g$chi-expr$7413$15i0ov
             (car g$e*$9412$15i0ov)
             g$r$9413$15i0ov
             g$mr$9414$15i0ov))))))
   (g$chi-application$7412$15i0ov
     g$chi-application$10851$15i0ov
     (case-lambda
       ((g$e$9416$15i0ov g$r$9417$15i0ov g$mr$9418$15i0ov)
        ((case-lambda
           ((g$t$9419$15i0ov)
            ((case-lambda
               ((g$ls/false$9420$15i0ov)
                (if g$ls/false$9420$15i0ov
                  (apply
                    (case-lambda
                      ((g$rator$9421$15i0ov g$rands$9422$15i0ov)
                       ((case-lambda
                          ((g$rator$9423$15i0ov)
                           (cons
                             g$rator$9423$15i0ov
                             (g$chi-expr*$7411$15i0ov
                               g$rands$9422$15i0ov
                               g$r$9417$15i0ov
                               g$mr$9418$15i0ov))))
                        (g$chi-expr$7413$15i0ov
                          g$rator$9421$15i0ov
                          g$r$9417$15i0ov
                          g$mr$9418$15i0ov))))
                    g$ls/false$9420$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$9419$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$9419$15i0ov
               '(any . each-any)))))
         g$e$9416$15i0ov))))
   (g$chi-expr$7413$15i0ov
     g$chi-expr$10852$15i0ov
     (case-lambda
       ((g$e$9424$15i0ov g$r$9425$15i0ov g$mr$9426$15i0ov)
        (call-with-values
          (case-lambda
            (() (g$syntax-type$7137$15i0ov g$e$9424$15i0ov g$r$9425$15i0ov)))
          (case-lambda
            ((g$type$9430$15i0ov g$value$9431$15i0ov g$kwd$9432$15i0ov)
             ((case-lambda
                ((g$kwd$9433$15i0ov g$value$9434$15i0ov g$type$9435$15i0ov)
                 ((case-lambda
                    ((g$t$9436$15i0ov)
                     (if (memv g$t$9436$15i0ov '(core-macro))
                       ((case-lambda
                          ((g$transformer$9437$15i0ov)
                           (g$transformer$9437$15i0ov
                             g$e$9424$15i0ov
                             g$r$9425$15i0ov
                             g$mr$9426$15i0ov)))
                        (g$core-macro-transformer$7402$15i0ov
                          g$value$9434$15i0ov))
                       (if (memv g$t$9436$15i0ov '(global))
                         ((case-lambda
                            ((g$lib$9438$15i0ov)
                             ((case-lambda
                                ((g$loc$9439$15i0ov)
                                 ((case-lambda
                                    (()
                                     (begin
                                       ((g$inv-collector$7447$15i0ov)
                                        g$lib$9438$15i0ov)
                                       g$loc$9439$15i0ov))))))
                              (cdr g$value$9434$15i0ov))))
                          (car g$value$9434$15i0ov))
                         (if (memv g$t$9436$15i0ov '(core-prim))
                           ((case-lambda
                              ((g$name$9440$15i0ov)
                               (list 'primitive g$name$9440$15i0ov)))
                            g$value$9434$15i0ov)
                           (if (memv g$t$9436$15i0ov '(call))
                             (g$chi-application$7412$15i0ov
                               g$e$9424$15i0ov
                               g$r$9425$15i0ov
                               g$mr$9426$15i0ov)
                             (if (memv g$t$9436$15i0ov '(lexical))
                               ((case-lambda
                                  ((g$lex$9441$15i0ov) g$lex$9441$15i0ov))
                                (g$lexical-var$7339$15i0ov g$value$9434$15i0ov))
                               (if (memv
                                     g$t$9436$15i0ov
                                     '(global-macro global-macro!))
                                 (g$chi-expr$7413$15i0ov
                                   (g$chi-global-macro$7410$15i0ov
                                     g$value$9434$15i0ov
                                     g$e$9424$15i0ov)
                                   g$r$9425$15i0ov
                                   g$mr$9426$15i0ov)
                                 (if (memv
                                       g$t$9436$15i0ov
                                       '(local-macro local-macro!))
                                   (g$chi-expr$7413$15i0ov
                                     (g$chi-local-macro$7409$15i0ov
                                       g$value$9434$15i0ov
                                       g$e$9424$15i0ov)
                                     g$r$9425$15i0ov
                                     g$mr$9426$15i0ov)
                                   (if (memv g$t$9436$15i0ov '(macro macro!))
                                     (g$chi-expr$7413$15i0ov
                                       (g$chi-macro$7408$15i0ov
                                         g$value$9434$15i0ov
                                         g$e$9424$15i0ov)
                                       g$r$9425$15i0ov
                                       g$mr$9426$15i0ov)
                                     (if (memv g$t$9436$15i0ov '(constant))
                                       ((case-lambda
                                          ((g$datum$9442$15i0ov)
                                           (list 'quote g$datum$9442$15i0ov)))
                                        g$value$9434$15i0ov)
                                       (if (memv g$t$9436$15i0ov '(set!))
                                         (g$chi-set!$7414$15i0ov
                                           g$e$9424$15i0ov
                                           g$r$9425$15i0ov
                                           g$mr$9426$15i0ov)
                                         (if (memv g$t$9436$15i0ov '(begin))
                                           ((case-lambda
                                              ((g$t$9443$15i0ov)
                                               ((case-lambda
                                                  ((g$ls/false$9444$15i0ov)
                                                   (if g$ls/false$9444$15i0ov
                                                     (apply
                                                       (case-lambda
                                                         ((g$x$9445$15i0ov
                                                            g$x*$9446$15i0ov)
                                                          (g$build-sequence$7051$15i0ov
                                                            '#f
                                                            (g$chi-expr*$7411$15i0ov
                                                              (cons
                                                                g$x$9445$15i0ov
                                                                g$x*$9446$15i0ov)
                                                              g$r$9425$15i0ov
                                                              g$mr$9426$15i0ov))))
                                                       g$ls/false$9444$15i0ov)
                                                     (g$syntax-violation$7504$15i0ov
                                                       '#f
                                                       '"invalid syntax"
                                                       g$t$9443$15i0ov))))
                                                (g$syntax-dispatch$7395$15i0ov
                                                  g$t$9443$15i0ov
                                                  '(_ any . each-any)))))
                                            g$e$9424$15i0ov)
                                           (if (memv
                                                 g$t$9436$15i0ov
                                                 '(let-syntax letrec-syntax))
                                             ((case-lambda
                                                ((g$t$9447$15i0ov)
                                                 ((case-lambda
                                                    ((g$ls/false$9448$15i0ov)
                                                     (if (if g$ls/false$9448$15i0ov
                                                           (begin
                                                             '#f
                                                             (apply
                                                               (case-lambda
                                                                 ((g$xlhs*$9449$15i0ov
                                                                    g$xrhs*$9450$15i0ov
                                                                    g$xbody$9451$15i0ov
                                                                    g$xbody*$9452$15i0ov)
                                                                  (if (not (g$valid-bound-ids?$7122$15i0ov
                                                                             g$xlhs*$9449$15i0ov))
                                                                    (g$syntax-violation$7504$15i0ov
                                                                      '#f
                                                                      '"invalid identifiers"
                                                                      g$e$9424$15i0ov)
                                                                    (void))))
                                                               g$ls/false$9448$15i0ov))
                                                           '#f)
                                                       (apply
                                                         (case-lambda
                                                           ((g$xlhs*$9453$15i0ov
                                                              g$xrhs*$9454$15i0ov
                                                              g$xbody$9455$15i0ov
                                                              g$xbody*$9456$15i0ov)
                                                            ((case-lambda
                                                               ((g$xlab*$9457$15i0ov)
                                                                ((case-lambda
                                                                   ((g$xrib$9458$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$xb*$9459$15i0ov)
                                                                        ((case-lambda
                                                                           (()
                                                                            (g$build-sequence$7051$15i0ov
                                                                              '#f
                                                                              (g$chi-expr*$7411$15i0ov
                                                                                (map (case-lambda
                                                                                       ((g$x$9460$15i0ov)
                                                                                        (g$add-subst$7107$15i0ov
                                                                                          g$xrib$9458$15i0ov
                                                                                          g$x$9460$15i0ov)))
                                                                                     (cons
                                                                                       g$xbody$9455$15i0ov
                                                                                       g$xbody*$9456$15i0ov))
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9457$15i0ov
                                                                                       g$xb*$9459$15i0ov)
                                                                                  g$r$9425$15i0ov)
                                                                                (append
                                                                                  (map cons
                                                                                       g$xlab*$9457$15i0ov
                                                                                       g$xb*$9459$15i0ov)
                                                                                  g$mr$9426$15i0ov))))))))
                                                                     (map (case-lambda
                                                                            ((g$x$9461$15i0ov)
                                                                             (g$make-eval-transformer$7149$15i0ov
                                                                               (g$expand-transformer$7440$15i0ov
                                                                                 (if (eq? g$type$9435$15i0ov
                                                                                          'let-syntax)
                                                                                   g$x$9461$15i0ov
                                                                                   (g$add-subst$7107$15i0ov
                                                                                     g$xrib$9458$15i0ov
                                                                                     g$x$9461$15i0ov))
                                                                                 g$mr$9426$15i0ov))))
                                                                          g$xrhs*$9454$15i0ov))))
                                                                 (g$make-full-rib$7085$15i0ov
                                                                   g$xlhs*$9453$15i0ov
                                                                   g$xlab*$9457$15i0ov))))
                                                             (map g$gen-label$7063$15i0ov
                                                                  g$xlhs*$9453$15i0ov))))
                                                         g$ls/false$9448$15i0ov)
                                                       (g$syntax-violation$7504$15i0ov
                                                         '#f
                                                         '"invalid syntax"
                                                         g$t$9447$15i0ov))))
                                                  (g$syntax-dispatch$7395$15i0ov
                                                    g$t$9447$15i0ov
                                                    '(_ #(each (any any))
                                                        any
                                                        .
                                                        each-any)))))
                                              g$e$9424$15i0ov)
                                             (if (memv
                                                   g$t$9436$15i0ov
                                                   '(displaced-lexical))
                                               (g$syntax-violation$7504$15i0ov
                                                 '#f
                                                 '"identifier out of context"
                                                 g$e$9424$15i0ov)
                                               (if (memv
                                                     g$t$9436$15i0ov
                                                     '(syntax))
                                                 (g$syntax-violation$7504$15i0ov
                                                   '#f
                                                   '"reference to pattern variable outside a syntax form"
                                                   g$e$9424$15i0ov)
                                                 (if (memv
                                                       g$t$9436$15i0ov
                                                       '(define define-syntax
                                                          module
                                                          import
                                                          library))
                                                   (g$syntax-violation$7504$15i0ov
                                                     '#f
                                                     (string-append
                                                       ((case-lambda
                                                          ((g$t$9462$15i0ov)
                                                           (if (memv
                                                                 g$t$9462$15i0ov
                                                                 '(define))
                                                             '"a definition"
                                                             (if (memv
                                                                   g$t$9462$15i0ov
                                                                   '(define-syntax))
                                                               '"a define-syntax"
                                                               (if (memv
                                                                     g$t$9462$15i0ov
                                                                     '(module))
                                                                 '"a module definition"
                                                                 (if (memv
                                                                       g$t$9462$15i0ov
                                                                       '(library))
                                                                   '"a library definition"
                                                                   (if (memv
                                                                         g$t$9462$15i0ov
                                                                         '(import))
                                                                     '"an import declaration"
                                                                     '"a non-expression")))))))
                                                        g$type$9435$15i0ov)
                                                       '" was found where an expression was expected")
                                                     g$e$9424$15i0ov)
                                                   (if (memv
                                                         g$t$9436$15i0ov
                                                         '(mutable))
                                                     (g$syntax-violation$7504$15i0ov
                                                       '#f
                                                       '"attempt to reference an unexportable variable"
                                                       g$e$9424$15i0ov)
                                                     (g$syntax-violation$7504$15i0ov
                                                       '#f
                                                       '"invalid expression"
                                                       g$e$9424$15i0ov)))))))))))))))))))
                  g$type$9435$15i0ov)))
              g$kwd$9432$15i0ov
              g$value$9431$15i0ov
              g$type$9430$15i0ov)))))))
   (g$chi-set!$7414$15i0ov
     g$chi-set!$10853$15i0ov
     (case-lambda
       ((g$e$9463$15i0ov g$r$9464$15i0ov g$mr$9465$15i0ov)
        ((case-lambda
           ((g$t$9466$15i0ov)
            ((case-lambda
               ((g$ls/false$9467$15i0ov)
                (if (if g$ls/false$9467$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$x$9468$15i0ov g$v$9469$15i0ov)
                             (g$id?$7117$15i0ov g$x$9468$15i0ov)))
                          g$ls/false$9467$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$x$9470$15i0ov g$v$9471$15i0ov)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$syntax-type$7137$15i0ov
                              g$x$9470$15i0ov
                              g$r$9464$15i0ov)))
                         (case-lambda
                           ((g$type$9475$15i0ov
                              g$value$9476$15i0ov
                              g$kwd$9477$15i0ov)
                            ((case-lambda
                               ((g$kwd$9478$15i0ov
                                  g$value$9479$15i0ov
                                  g$type$9480$15i0ov)
                                ((case-lambda
                                   ((g$t$9481$15i0ov)
                                    (if (memv g$t$9481$15i0ov '(lexical))
                                      (begin
                                        (g$set-lexical-mutable!$7341$15i0ov
                                          g$value$9479$15i0ov
                                          '#t)
                                        (list
                                          'set!
                                          (g$lexical-var$7339$15i0ov
                                            g$value$9479$15i0ov)
                                          (g$chi-expr$7413$15i0ov
                                            g$v$9471$15i0ov
                                            g$r$9464$15i0ov
                                            g$mr$9465$15i0ov)))
                                      (if (memv g$t$9481$15i0ov '(core-prim))
                                        (g$syntax-violation$7504$15i0ov
                                          '#f
                                          '"cannot modify imported core primitive"
                                          g$e$9463$15i0ov)
                                        (if (memv g$t$9481$15i0ov '(global))
                                          (g$syntax-violation$7504$15i0ov
                                            '#f
                                            '"attempt to modify imported binding"
                                            g$e$9463$15i0ov)
                                          (if (memv
                                                g$t$9481$15i0ov
                                                '(global-macro!))
                                            (g$chi-expr$7413$15i0ov
                                              (g$chi-global-macro$7410$15i0ov
                                                g$value$9479$15i0ov
                                                g$e$9463$15i0ov)
                                              g$r$9464$15i0ov
                                              g$mr$9465$15i0ov)
                                            (if (memv
                                                  g$t$9481$15i0ov
                                                  '(local-macro!))
                                              (g$chi-expr$7413$15i0ov
                                                (g$chi-local-macro$7409$15i0ov
                                                  g$value$9479$15i0ov
                                                  g$e$9463$15i0ov)
                                                g$r$9464$15i0ov
                                                g$mr$9465$15i0ov)
                                              (if (memv
                                                    g$t$9481$15i0ov
                                                    '(mutable))
                                                (g$syntax-violation$7504$15i0ov
                                                  '#f
                                                  '"attempt to assign to an unexportable variable"
                                                  g$e$9463$15i0ov)
                                                (g$syntax-violation$7504$15i0ov
                                                  '#f
                                                  '"invalid syntax"
                                                  g$e$9463$15i0ov)))))))))
                                 g$type$9480$15i0ov)))
                             g$kwd$9477$15i0ov
                             g$value$9476$15i0ov
                             g$type$9475$15i0ov))))))
                    g$ls/false$9467$15i0ov)
                  (g$syntax-violation$7504$15i0ov
                    '#f
                    '"invalid syntax"
                    g$t$9466$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$9466$15i0ov '(_ any any)))))
         g$e$9463$15i0ov))))
   (g$verify-formals$7415$15i0ov
     g$verify-formals$10854$15i0ov
     (case-lambda
       ((g$fmls$9482$15i0ov g$stx$9483$15i0ov)
        ((case-lambda
           ((g$t$9484$15i0ov)
            ((case-lambda
               ((g$ls/false$9485$15i0ov)
                (if g$ls/false$9485$15i0ov
                  (apply
                    (case-lambda
                      ((g$x*$9486$15i0ov)
                       (if (not (g$valid-bound-ids?$7122$15i0ov
                                  g$x*$9486$15i0ov))
                         (g$invalid-fmls-error$7360$15i0ov
                           g$stx$9483$15i0ov
                           g$fmls$9482$15i0ov)
                         (void))))
                    g$ls/false$9485$15i0ov)
                  ((case-lambda
                     ((g$t$9487$15i0ov)
                      ((case-lambda
                         ((g$ls/false$9488$15i0ov)
                          (if g$ls/false$9488$15i0ov
                            (apply
                              (case-lambda
                                ((g$x*$9489$15i0ov g$x$9490$15i0ov)
                                 (if (not (g$valid-bound-ids?$7122$15i0ov
                                            (cons
                                              g$x$9490$15i0ov
                                              g$x*$9489$15i0ov)))
                                   (g$invalid-fmls-error$7360$15i0ov
                                     g$stx$9483$15i0ov
                                     g$fmls$9482$15i0ov)
                                   (void))))
                              g$ls/false$9488$15i0ov)
                            ((case-lambda
                               ((g$t$9491$15i0ov)
                                ((case-lambda
                                   ((g$ls/false$9492$15i0ov)
                                    (if g$ls/false$9492$15i0ov
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$stx$9483$15i0ov)))
                                        g$ls/false$9492$15i0ov)
                                      (g$syntax-violation$7504$15i0ov
                                        '#f
                                        '"invalid syntax"
                                        g$t$9491$15i0ov))))
                                 (g$syntax-dispatch$7395$15i0ov
                                   g$t$9491$15i0ov
                                   '_))))
                             g$t$9487$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$9487$15i0ov
                         '#(each+ any () any)))))
                   g$t$9484$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$9484$15i0ov 'each-any))))
         g$fmls$9482$15i0ov))))
   (g$chi-lambda-clause$7416$15i0ov
     g$chi-lambda-clause$10855$15i0ov
     (case-lambda
       ((g$stx$9493$15i0ov
          g$fmls$9494$15i0ov
          g$body*$9495$15i0ov
          g$r$9496$15i0ov
          g$mr$9497$15i0ov)
        ((case-lambda
           ((g$t$9498$15i0ov)
            ((case-lambda
               ((g$ls/false$9499$15i0ov)
                (if g$ls/false$9499$15i0ov
                  (apply
                    (case-lambda
                      ((g$x*$9500$15i0ov)
                       (begin
                         (g$verify-formals$7415$15i0ov
                           g$fmls$9494$15i0ov
                           g$stx$9493$15i0ov)
                         ((case-lambda
                            ((g$lex*$9501$15i0ov g$lab*$9502$15i0ov)
                             (values
                               g$lex*$9501$15i0ov
                               (g$chi-internal$7424$15i0ov
                                 (g$add-subst$7107$15i0ov
                                   (g$make-full-rib$7085$15i0ov
                                     g$x*$9500$15i0ov
                                     g$lab*$9502$15i0ov)
                                   g$body*$9495$15i0ov)
                                 (g$add-lexicals$7343$15i0ov
                                   g$lab*$9502$15i0ov
                                   g$lex*$9501$15i0ov
                                   g$r$9496$15i0ov)
                                 g$mr$9497$15i0ov))))
                          (map g$gen-lexical$7061$15i0ov g$x*$9500$15i0ov)
                          (map g$gen-label$7063$15i0ov g$x*$9500$15i0ov)))))
                    g$ls/false$9499$15i0ov)
                  ((case-lambda
                     ((g$t$9503$15i0ov)
                      ((case-lambda
                         ((g$ls/false$9504$15i0ov)
                          (if g$ls/false$9504$15i0ov
                            (apply
                              (case-lambda
                                ((g$x*$9505$15i0ov g$x$9506$15i0ov)
                                 (begin
                                   (g$verify-formals$7415$15i0ov
                                     g$fmls$9494$15i0ov
                                     g$stx$9493$15i0ov)
                                   ((case-lambda
                                      ((g$lex*$9507$15i0ov
                                         g$lab*$9508$15i0ov
                                         g$lex$9509$15i0ov
                                         g$lab$9510$15i0ov)
                                       (values
                                         (append
                                           g$lex*$9507$15i0ov
                                           g$lex$9509$15i0ov)
                                         (g$chi-internal$7424$15i0ov
                                           (g$add-subst$7107$15i0ov
                                             (g$make-full-rib$7085$15i0ov
                                               (cons
                                                 g$x$9506$15i0ov
                                                 g$x*$9505$15i0ov)
                                               (cons
                                                 g$lab$9510$15i0ov
                                                 g$lab*$9508$15i0ov))
                                             g$body*$9495$15i0ov)
                                           (g$add-lexicals$7343$15i0ov
                                             (cons
                                               g$lab$9510$15i0ov
                                               g$lab*$9508$15i0ov)
                                             (cons
                                               g$lex$9509$15i0ov
                                               g$lex*$9507$15i0ov)
                                             g$r$9496$15i0ov)
                                           g$mr$9497$15i0ov))))
                                    (map g$gen-lexical$7061$15i0ov
                                         g$x*$9505$15i0ov)
                                    (map g$gen-label$7063$15i0ov
                                         g$x*$9505$15i0ov)
                                    (g$gen-lexical$7061$15i0ov g$x$9506$15i0ov)
                                    (g$gen-label$7063$15i0ov
                                      g$x$9506$15i0ov)))))
                              g$ls/false$9504$15i0ov)
                            ((case-lambda
                               ((g$t$9511$15i0ov)
                                ((case-lambda
                                   ((g$ls/false$9512$15i0ov)
                                    (if g$ls/false$9512$15i0ov
                                      (apply
                                        (case-lambda
                                          (()
                                           (g$syntax-violation$7504$15i0ov
                                             '#f
                                             '"invalid syntax"
                                             g$fmls$9494$15i0ov)))
                                        g$ls/false$9512$15i0ov)
                                      (g$syntax-violation$7504$15i0ov
                                        '#f
                                        '"invalid syntax"
                                        g$t$9511$15i0ov))))
                                 (g$syntax-dispatch$7395$15i0ov
                                   g$t$9511$15i0ov
                                   '_))))
                             g$t$9503$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$9503$15i0ov
                         '#(each+ any () any)))))
                   g$t$9498$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$9498$15i0ov 'each-any))))
         g$fmls$9494$15i0ov))))
   (g$chi-lambda-clause*$7417$15i0ov
     g$chi-lambda-clause*$10856$15i0ov
     (case-lambda
       ((g$stx$9513$15i0ov
          g$fmls*$9514$15i0ov
          g$body**$9515$15i0ov
          g$r$9516$15i0ov
          g$mr$9517$15i0ov)
        (if (null? g$fmls*$9514$15i0ov)
          (values '() '())
          (call-with-values
            (case-lambda
              (()
               (g$chi-lambda-clause$7416$15i0ov
                 g$stx$9513$15i0ov
                 (car g$fmls*$9514$15i0ov)
                 (car g$body**$9515$15i0ov)
                 g$r$9516$15i0ov
                 g$mr$9517$15i0ov)))
            (case-lambda
              ((g$a$9520$15i0ov g$b$9521$15i0ov)
               ((case-lambda
                  ((g$b$9522$15i0ov g$a$9523$15i0ov)
                   (call-with-values
                     (case-lambda
                       (()
                        (g$chi-lambda-clause*$7417$15i0ov
                          g$stx$9513$15i0ov
                          (cdr g$fmls*$9514$15i0ov)
                          (cdr g$body**$9515$15i0ov)
                          g$r$9516$15i0ov
                          g$mr$9517$15i0ov)))
                     (case-lambda
                       ((g$a*$9526$15i0ov g$b*$9527$15i0ov)
                        ((case-lambda
                           ((g$b*$9528$15i0ov g$a*$9529$15i0ov)
                            (values
                              (cons g$a$9523$15i0ov g$a*$9529$15i0ov)
                              (cons g$b$9522$15i0ov g$b*$9528$15i0ov))))
                         g$b*$9527$15i0ov
                         g$a*$9526$15i0ov))))))
                g$b$9521$15i0ov
                g$a$9520$15i0ov))))))))
   (g$chi-defun$7418$15i0ov
     g$chi-defun$10857$15i0ov
     (case-lambda
       ((g$x$9530$15i0ov g$r$9531$15i0ov g$mr$9532$15i0ov)
        ((case-lambda
           ((g$fmls$9533$15i0ov g$body*$9534$15i0ov)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-lambda-clause$7416$15i0ov
                   g$fmls$9533$15i0ov
                   g$fmls$9533$15i0ov
                   g$body*$9534$15i0ov
                   g$r$9531$15i0ov
                   g$mr$9532$15i0ov)))
              (case-lambda
                ((g$fmls$9537$15i0ov g$body$9538$15i0ov)
                 ((case-lambda
                    ((g$body$9539$15i0ov g$fmls$9540$15i0ov)
                     (g$build-lambda$7048$15i0ov
                       '#f
                       g$fmls$9540$15i0ov
                       g$body$9539$15i0ov)))
                  g$body$9538$15i0ov
                  g$fmls$9537$15i0ov))))))
         (car g$x$9530$15i0ov)
         (cdr g$x$9530$15i0ov)))))
   (g$chi-rhs$7419$15i0ov
     g$chi-rhs$10858$15i0ov
     (case-lambda
       ((g$rhs$9541$15i0ov g$r$9542$15i0ov g$mr$9543$15i0ov)
        ((case-lambda
           ((g$t$9544$15i0ov)
            (if (memv g$t$9544$15i0ov '(defun))
              (g$chi-defun$7418$15i0ov
                (cdr g$rhs$9541$15i0ov)
                g$r$9542$15i0ov
                g$mr$9543$15i0ov)
              (if (memv g$t$9544$15i0ov '(expr))
                ((case-lambda
                   ((g$expr$9545$15i0ov)
                    (g$chi-expr$7413$15i0ov
                      g$expr$9545$15i0ov
                      g$r$9542$15i0ov
                      g$mr$9543$15i0ov)))
                 (cdr g$rhs$9541$15i0ov))
                (if (memv g$t$9544$15i0ov '(top-expr))
                  ((case-lambda
                     ((g$expr$9546$15i0ov)
                      (g$build-sequence$7051$15i0ov
                        '#f
                        (list
                          (g$chi-expr$7413$15i0ov
                            g$expr$9546$15i0ov
                            g$r$9542$15i0ov
                            g$mr$9543$15i0ov)
                          (g$build-void$7052$15i0ov)))))
                   (cdr g$rhs$9541$15i0ov))
                  (assertion-violation
                    'chi-rhs
                    '"BUG: invalid rhs"
                    g$rhs$9541$15i0ov))))))
         (car g$rhs$9541$15i0ov)))))
   (g$expand-interaction-rhs*/init*$7420$15i0ov
     g$expand-interaction-rhs*/init*$10859$15i0ov
     (case-lambda
       ((g$lhs*$9547$15i0ov
          g$rhs*$9548$15i0ov
          g$init*$9549$15i0ov
          g$r$9550$15i0ov
          g$mr$9551$15i0ov)
        ((letrec ((g$f$9552$15i0ov
                    (case-lambda
                      ((g$lhs*$9553$15i0ov g$rhs*$9554$15i0ov)
                       (if (null? g$lhs*$9553$15i0ov)
                         (map (case-lambda
                                ((g$x$9555$15i0ov)
                                 (g$chi-expr$7413$15i0ov
                                   g$x$9555$15i0ov
                                   g$r$9550$15i0ov
                                   g$mr$9551$15i0ov)))
                              g$init*$9549$15i0ov)
                         ((case-lambda
                            ((g$lhs$9556$15i0ov g$rhs$9557$15i0ov)
                             ((case-lambda
                                ((g$t$9558$15i0ov)
                                 (if (memv g$t$9558$15i0ov '(defun))
                                   ((case-lambda
                                      ((g$rhs$9559$15i0ov)
                                       (cons
                                         (list
                                           'set!
                                           g$lhs$9556$15i0ov
                                           g$rhs$9559$15i0ov)
                                         (g$f$9552$15i0ov
                                           (cdr g$lhs*$9553$15i0ov)
                                           (cdr g$rhs*$9554$15i0ov)))))
                                    (g$chi-defun$7418$15i0ov
                                      (cdr g$rhs$9557$15i0ov)
                                      g$r$9550$15i0ov
                                      g$mr$9551$15i0ov))
                                   (if (memv g$t$9558$15i0ov '(expr))
                                     ((case-lambda
                                        ((g$rhs$9560$15i0ov)
                                         (cons
                                           (list
                                             'set!
                                             g$lhs$9556$15i0ov
                                             g$rhs$9560$15i0ov)
                                           (g$f$9552$15i0ov
                                             (cdr g$lhs*$9553$15i0ov)
                                             (cdr g$rhs*$9554$15i0ov)))))
                                      (g$chi-expr$7413$15i0ov
                                        (cdr g$rhs$9557$15i0ov)
                                        g$r$9550$15i0ov
                                        g$mr$9551$15i0ov))
                                     (if (memv g$t$9558$15i0ov '(top-expr))
                                       ((case-lambda
                                          ((g$e$9561$15i0ov)
                                           (cons
                                             g$e$9561$15i0ov
                                             (g$f$9552$15i0ov
                                               (cdr g$lhs*$9553$15i0ov)
                                               (cdr g$rhs*$9554$15i0ov)))))
                                        (g$chi-expr$7413$15i0ov
                                          (cdr g$rhs$9557$15i0ov)
                                          g$r$9550$15i0ov
                                          g$mr$9551$15i0ov))
                                       (error
                                         'expand-interaction
                                         '"invallid"
                                         g$rhs$9557$15i0ov))))))
                              (car g$rhs$9557$15i0ov))))
                          (car g$lhs*$9553$15i0ov)
                          (car g$rhs*$9554$15i0ov)))))))
           g$f$9552$15i0ov)
         g$lhs*$9547$15i0ov
         g$rhs*$9548$15i0ov))))
   (g$chi-rhs*$7421$15i0ov
     g$chi-rhs*$10860$15i0ov
     (case-lambda
       ((g$rhs*$9562$15i0ov g$r$9563$15i0ov g$mr$9564$15i0ov)
        ((letrec ((g$f$9565$15i0ov
                    (case-lambda
                      ((g$ls$9566$15i0ov)
                       (if (null? g$ls$9566$15i0ov)
                         '()
                         ((case-lambda
                            ((g$a$9567$15i0ov)
                             (cons
                               g$a$9567$15i0ov
                               (g$f$9565$15i0ov (cdr g$ls$9566$15i0ov)))))
                          (g$chi-rhs$7419$15i0ov
                            (car g$ls$9566$15i0ov)
                            g$r$9563$15i0ov
                            g$mr$9564$15i0ov)))))))
           g$f$9565$15i0ov)
         g$rhs*$9562$15i0ov))))
   (g$find-bound=?$7422$15i0ov
     g$find-bound=?$10861$15i0ov
     (case-lambda
       ((g$x$9568$15i0ov g$lhs*$9569$15i0ov g$rhs*$9570$15i0ov)
        (if (null? g$lhs*$9569$15i0ov)
          '#f
          (if (g$bound-id=?$7120$15i0ov
                g$x$9568$15i0ov
                (car g$lhs*$9569$15i0ov))
            (car g$rhs*$9570$15i0ov)
            (g$find-bound=?$7422$15i0ov
              g$x$9568$15i0ov
              (cdr g$lhs*$9569$15i0ov)
              (cdr g$rhs*$9570$15i0ov)))))))
   (g$find-dups$7423$15i0ov
     g$find-dups$10862$15i0ov
     (case-lambda
       ((g$ls$9571$15i0ov)
        ((letrec ((g$f$9572$15i0ov
                    (case-lambda
                      ((g$ls$9573$15i0ov g$dups$9574$15i0ov)
                       (if (null? g$ls$9573$15i0ov)
                         g$dups$9574$15i0ov
                         ((case-lambda
                            ((g$t$9575$15i0ov)
                             (if g$t$9575$15i0ov
                               ((case-lambda
                                  ((g$x$9576$15i0ov)
                                   (g$f$9572$15i0ov
                                     (cdr g$ls$9573$15i0ov)
                                     (cons
                                       (list
                                         (car g$ls$9573$15i0ov)
                                         g$x$9576$15i0ov)
                                       g$dups$9574$15i0ov))))
                                g$t$9575$15i0ov)
                               (g$f$9572$15i0ov
                                 (cdr g$ls$9573$15i0ov)
                                 g$dups$9574$15i0ov))))
                          (g$find-bound=?$7422$15i0ov
                            (car g$ls$9573$15i0ov)
                            (cdr g$ls$9573$15i0ov)
                            (cdr g$ls$9573$15i0ov))))))))
           g$f$9572$15i0ov)
         g$ls$9571$15i0ov
         '()))))
   (g$chi-internal$7424$15i0ov
     g$chi-internal$10863$15i0ov
     (case-lambda
       ((g$e*$9577$15i0ov g$r$9578$15i0ov g$mr$9579$15i0ov)
        ((case-lambda
           ((g$rib$9580$15i0ov)
            (call-with-values
              (case-lambda
                (()
                 (g$chi-body*$7439$15i0ov
                   (map (case-lambda
                          ((g$x$9588$15i0ov)
                           (g$add-subst$7107$15i0ov
                             g$rib$9580$15i0ov
                             g$x$9588$15i0ov)))
                        (g$syntax->list$7116$15i0ov g$e*$9577$15i0ov))
                   g$r$9578$15i0ov
                   g$mr$9579$15i0ov
                   '()
                   '()
                   '()
                   '()
                   g$rib$9580$15i0ov
                   '#f)))
              (case-lambda
                ((g$e*$9589$15i0ov
                   g$r$9590$15i0ov
                   g$mr$9591$15i0ov
                   g$lex*$9592$15i0ov
                   g$rhs*$9593$15i0ov
                   g$mod**$9594$15i0ov
                   g$kwd*$9595$15i0ov)
                 ((case-lambda
                    ((g$kwd*$9596$15i0ov
                       g$mod**$9597$15i0ov
                       g$rhs*$9598$15i0ov
                       g$lex*$9599$15i0ov
                       g$mr$9600$15i0ov
                       g$r$9601$15i0ov
                       g$e*$9602$15i0ov)
                     (begin
                       (if (null? g$e*$9602$15i0ov)
                         (g$syntax-violation$7504$15i0ov
                           '#f
                           '"no expression in body"
                           g$e*$9602$15i0ov)
                         (void))
                       ((case-lambda
                          ((g$init*$9603$15i0ov)
                           ((case-lambda
                              ((g$rhs*$9604$15i0ov)
                               ((case-lambda
                                  (()
                                   (g$build-letrec*$7054$15i0ov
                                     '#f
                                     (reverse g$lex*$9599$15i0ov)
                                     (reverse g$rhs*$9604$15i0ov)
                                     (g$build-sequence$7051$15i0ov
                                       '#f
                                       g$init*$9603$15i0ov)))))))
                            (g$chi-rhs*$7421$15i0ov
                              g$rhs*$9598$15i0ov
                              g$r$9601$15i0ov
                              g$mr$9600$15i0ov))))
                        (g$chi-expr*$7411$15i0ov
                          (append
                            (apply append (reverse g$mod**$9597$15i0ov))
                            g$e*$9602$15i0ov)
                          g$r$9601$15i0ov
                          g$mr$9600$15i0ov)))))
                  g$kwd*$9595$15i0ov
                  g$mod**$9594$15i0ov
                  g$rhs*$9593$15i0ov
                  g$lex*$9592$15i0ov
                  g$mr$9591$15i0ov
                  g$r$9590$15i0ov
                  g$e*$9589$15i0ov))))))
         (g$make-empty-rib$7080$15i0ov)))))
   (g$parse-module$7425$15i0ov
     g$parse-module$10864$15i0ov
     (case-lambda
       ((g$e$9605$15i0ov)
        ((case-lambda
           ((g$t$9606$15i0ov)
            ((case-lambda
               ((g$ls/false$9607$15i0ov)
                (if g$ls/false$9607$15i0ov
                  (apply
                    (case-lambda
                      ((g$export*$9608$15i0ov g$b*$9609$15i0ov)
                       (begin
                         (if (not (g$for-all$5359$15i0ov
                                    g$id?$7117$15i0ov
                                    g$export*$9608$15i0ov))
                           (g$syntax-violation$7504$15i0ov
                             '#f
                             '"module exports must be identifiers"
                             g$e$9605$15i0ov)
                           (void))
                         (values
                           '#f
                           (list->vector g$export*$9608$15i0ov)
                           g$b*$9609$15i0ov))))
                    g$ls/false$9607$15i0ov)
                  ((case-lambda
                     ((g$t$9610$15i0ov)
                      ((case-lambda
                         ((g$ls/false$9611$15i0ov)
                          (if g$ls/false$9611$15i0ov
                            (apply
                              (case-lambda
                                ((g$name$9612$15i0ov
                                   g$export*$9613$15i0ov
                                   g$b*$9614$15i0ov)
                                 (begin
                                   (if (not (g$id?$7117$15i0ov
                                              g$name$9612$15i0ov))
                                     (g$syntax-violation$7504$15i0ov
                                       '#f
                                       '"module name must be an identifier"
                                       g$e$9605$15i0ov)
                                     (void))
                                   (if (not (g$for-all$5359$15i0ov
                                              g$id?$7117$15i0ov
                                              g$export*$9613$15i0ov))
                                     (g$syntax-violation$7504$15i0ov
                                       '#f
                                       '"module exports must be identifiers"
                                       g$e$9605$15i0ov)
                                     (void))
                                   (values
                                     g$name$9612$15i0ov
                                     (list->vector g$export*$9613$15i0ov)
                                     g$b*$9614$15i0ov))))
                              g$ls/false$9611$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$9610$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$9610$15i0ov
                         '(_ any each-any . each-any)))))
                   g$t$9606$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$9606$15i0ov
               '(_ each-any . each-any)))))
         g$e$9605$15i0ov))))
   (g$8454$7426$15i0ov
     g$8454$10865$15i0ov
     (make-record-type-descriptor
       'module-interface
       '#f
       'g$8457$15i0ov
       '#t
       '#t
       '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec))))
   (g$8456$7427$15i0ov g$8456$10866$15i0ov '#f)
   (g$8455$7428$15i0ov
     g$8455$10867$15i0ov
     (make-record-constructor-descriptor
       g$8454$7426$15i0ov
       '#f
       g$8456$7427$15i0ov))
   (g$module-interface?$7429$15i0ov
     g$module-interface?$10868$15i0ov
     (record-predicate g$8454$7426$15i0ov))
   (g$make-module-interface$7430$15i0ov
     g$make-module-interface$10869$15i0ov
     (record-constructor g$8455$7428$15i0ov))
   (g$module-interface-first-mark$7431$15i0ov
     g$module-interface-first-mark$10870$15i0ov
     (record-accessor g$8454$7426$15i0ov '0))
   (g$module-interface-exp-id-vec$7432$15i0ov
     g$module-interface-exp-id-vec$10871$15i0ov
     (record-accessor g$8454$7426$15i0ov '1))
   (g$module-interface-exp-lab-vec$7433$15i0ov
     g$module-interface-exp-lab-vec$10872$15i0ov
     (record-accessor g$8454$7426$15i0ov '2))
   (g$set-module-interface-first-mark!$7434$15i0ov
     g$set-module-interface-first-mark!$10873$15i0ov
     (record-mutator g$8454$7426$15i0ov '0))
   (g$set-module-interface-exp-id-vec!$7435$15i0ov
     g$set-module-interface-exp-id-vec!$10874$15i0ov
     (record-mutator g$8454$7426$15i0ov '1))
   (g$set-module-interface-exp-lab-vec!$7436$15i0ov
     g$set-module-interface-exp-lab-vec!$10875$15i0ov
     (record-mutator g$8454$7426$15i0ov '2))
   (g$module-interface-exp-id*$7437$15i0ov
     g$module-interface-exp-id*$10876$15i0ov
     (case-lambda
       ((g$iface$9615$15i0ov g$id$9616$15i0ov)
        (letrec* ((g$diff-marks$9617$15i0ov
                    (case-lambda
                      ((g$ls$9621$15i0ov g$x$9622$15i0ov)
                       (begin
                         (if (null? g$ls$9621$15i0ov)
                           (error 'diff-marks '"BUG: should not happen")
                           (void))
                         ((case-lambda
                            ((g$a$9623$15i0ov)
                             (if (eq? g$a$9623$15i0ov g$x$9622$15i0ov)
                               '()
                               (cons
                                 g$a$9623$15i0ov
                                 (g$diff-marks$9617$15i0ov
                                   (cdr g$ls$9621$15i0ov)
                                   g$x$9622$15i0ov)))))
                          (car g$ls$9621$15i0ov)))))))
          ((case-lambda
             ((g$diff$9618$15i0ov g$id-vec$9619$15i0ov)
              (if (null? g$diff$9618$15i0ov)
                g$id-vec$9619$15i0ov
                (vector-map
                  (case-lambda
                    ((g$x$9620$15i0ov)
                     (g$make-stx$7090$15i0ov
                       (g$stx-expr$7091$15i0ov g$x$9620$15i0ov)
                       (append
                         g$diff$9618$15i0ov
                         (g$stx-mark*$7092$15i0ov g$x$9620$15i0ov))
                       '()
                       '())))
                  g$id-vec$9619$15i0ov))))
           (g$diff-marks$9617$15i0ov
             (g$stx-mark*$7092$15i0ov g$id$9616$15i0ov)
             (g$module-interface-first-mark$7431$15i0ov g$iface$9615$15i0ov))
           (g$module-interface-exp-id-vec$7432$15i0ov g$iface$9615$15i0ov))))))
   (g$chi-internal-module$7438$15i0ov
     g$chi-internal-module$10877$15i0ov
     (case-lambda
       ((g$e$9624$15i0ov
          g$r$9625$15i0ov
          g$mr$9626$15i0ov
          g$lex*$9627$15i0ov
          g$rhs*$9628$15i0ov
          g$mod**$9629$15i0ov
          g$kwd*$9630$15i0ov)
        (call-with-values
          (case-lambda (() (g$parse-module$7425$15i0ov g$e$9624$15i0ov)))
          (case-lambda
            ((g$name$9634$15i0ov g$exp-id*$9635$15i0ov g$e*$9636$15i0ov)
             ((case-lambda
                ((g$e*$9637$15i0ov g$exp-id*$9638$15i0ov g$name$9639$15i0ov)
                 ((case-lambda
                    ((g$rib$9640$15i0ov)
                     ((case-lambda
                        ((g$e*$9641$15i0ov)
                         ((case-lambda
                            (()
                             (call-with-values
                               (case-lambda
                                 (()
                                  (g$chi-body*$7439$15i0ov
                                    g$e*$9641$15i0ov
                                    g$r$9625$15i0ov
                                    g$mr$9626$15i0ov
                                    g$lex*$9627$15i0ov
                                    g$rhs*$9628$15i0ov
                                    g$mod**$9629$15i0ov
                                    g$kwd*$9630$15i0ov
                                    g$rib$9640$15i0ov
                                    '#f)))
                               (case-lambda
                                 ((g$e*$9649$15i0ov
                                    g$r$9650$15i0ov
                                    g$mr$9651$15i0ov
                                    g$lex*$9652$15i0ov
                                    g$rhs*$9653$15i0ov
                                    g$mod**$9654$15i0ov
                                    g$kwd*$9655$15i0ov)
                                  ((case-lambda
                                     ((g$kwd*$9656$15i0ov
                                        g$mod**$9657$15i0ov
                                        g$rhs*$9658$15i0ov
                                        g$lex*$9659$15i0ov
                                        g$mr$9660$15i0ov
                                        g$r$9661$15i0ov
                                        g$e*$9662$15i0ov)
                                      ((case-lambda
                                         ((g$exp-lab*$9663$15i0ov
                                            g$mod**$9664$15i0ov)
                                          (if (not g$name$9639$15i0ov)
                                            (values
                                              g$lex*$9659$15i0ov
                                              g$rhs*$9658$15i0ov
                                              g$exp-id*$9638$15i0ov
                                              g$exp-lab*$9663$15i0ov
                                              g$r$9661$15i0ov
                                              g$mr$9660$15i0ov
                                              g$mod**$9664$15i0ov
                                              g$kwd*$9656$15i0ov)
                                            ((case-lambda
                                               ((g$lab$9665$15i0ov
                                                  g$iface$9666$15i0ov)
                                                (values
                                                  g$lex*$9659$15i0ov
                                                  g$rhs*$9658$15i0ov
                                                  (vector g$name$9639$15i0ov)
                                                  (vector g$lab$9665$15i0ov)
                                                  (cons
                                                    (cons
                                                      g$lab$9665$15i0ov
                                                      (cons
                                                        '$module
                                                        g$iface$9666$15i0ov))
                                                    g$r$9661$15i0ov)
                                                  (cons
                                                    (cons
                                                      g$lab$9665$15i0ov
                                                      (cons
                                                        '$module
                                                        g$iface$9666$15i0ov))
                                                    g$mr$9660$15i0ov)
                                                  g$mod**$9664$15i0ov
                                                  g$kwd*$9656$15i0ov)))
                                             (g$gen-label$7063$15i0ov 'module)
                                             (g$make-module-interface$7430$15i0ov
                                               (car (g$stx-mark*$7092$15i0ov
                                                      g$name$9639$15i0ov))
                                               (vector-map
                                                 (case-lambda
                                                   ((g$x$9667$15i0ov)
                                                    (g$make-stx$7090$15i0ov
                                                      (g$stx-expr$7091$15i0ov
                                                        g$x$9667$15i0ov)
                                                      (g$stx-mark*$7092$15i0ov
                                                        g$x$9667$15i0ov)
                                                      '()
                                                      '())))
                                                 g$exp-id*$9638$15i0ov)
                                               g$exp-lab*$9663$15i0ov)))))
                                       (vector-map
                                         (case-lambda
                                           ((g$x$9668$15i0ov)
                                            ((case-lambda
                                               ((g$t$9669$15i0ov)
                                                (if g$t$9669$15i0ov
                                                  g$t$9669$15i0ov
                                                  (begin
                                                    '#f
                                                    (g$syntax-violation$7504$15i0ov
                                                      '#f
                                                      '"cannot find module export"
                                                      g$x$9668$15i0ov)))))
                                             (g$id->label$7130$15i0ov
                                               (g$make-stx$7090$15i0ov
                                                 (g$id->sym$7118$15i0ov
                                                   g$x$9668$15i0ov)
                                                 (g$stx-mark*$7092$15i0ov
                                                   g$x$9668$15i0ov)
                                                 (list g$rib$9640$15i0ov)
                                                 '())))))
                                         g$exp-id*$9638$15i0ov)
                                       (cons
                                         g$e*$9662$15i0ov
                                         g$mod**$9657$15i0ov))))
                                   g$kwd*$9655$15i0ov
                                   g$mod**$9654$15i0ov
                                   g$rhs*$9653$15i0ov
                                   g$lex*$9652$15i0ov
                                   g$mr$9651$15i0ov
                                   g$r$9650$15i0ov
                                   g$e*$9649$15i0ov)))))))))
                      (map (case-lambda
                             ((g$x$9670$15i0ov)
                              (g$add-subst$7107$15i0ov
                                g$rib$9640$15i0ov
                                g$x$9670$15i0ov)))
                           (g$syntax->list$7116$15i0ov g$e*$9637$15i0ov)))))
                  (g$make-empty-rib$7080$15i0ov))))
              g$e*$9636$15i0ov
              g$exp-id*$9635$15i0ov
              g$name$9634$15i0ov)))))))
   (g$chi-body*$7439$15i0ov
     g$chi-body*$10878$15i0ov
     (case-lambda
       ((g$e*$9671$15i0ov
          g$r$9672$15i0ov
          g$mr$9673$15i0ov
          g$lex*$9674$15i0ov
          g$rhs*$9675$15i0ov
          g$mod**$9676$15i0ov
          g$kwd*$9677$15i0ov
          g$rib$9678$15i0ov
          g$top?$9679$15i0ov)
        (if (null? g$e*$9671$15i0ov)
          (values
            g$e*$9671$15i0ov
            g$r$9672$15i0ov
            g$mr$9673$15i0ov
            g$lex*$9674$15i0ov
            g$rhs*$9675$15i0ov
            g$mod**$9676$15i0ov
            g$kwd*$9677$15i0ov)
          ((case-lambda
             ((g$e$9680$15i0ov)
              (call-with-values
                (case-lambda
                  (()
                   (g$syntax-type$7137$15i0ov g$e$9680$15i0ov g$r$9672$15i0ov)))
                (case-lambda
                  ((g$type$9684$15i0ov g$value$9685$15i0ov g$kwd$9686$15i0ov)
                   ((case-lambda
                      ((g$kwd$9687$15i0ov
                         g$value$9688$15i0ov
                         g$type$9689$15i0ov)
                       ((case-lambda
                          ((g$kwd*$9690$15i0ov)
                           ((case-lambda
                              ((g$t$9691$15i0ov)
                               (if (memv g$t$9691$15i0ov '(define))
                                 (call-with-values
                                   (case-lambda
                                     (()
                                      (g$parse-define$7335$15i0ov
                                        g$e$9680$15i0ov)))
                                   (case-lambda
                                     ((g$id$9694$15i0ov g$rhs$9695$15i0ov)
                                      ((case-lambda
                                         ((g$rhs$9696$15i0ov g$id$9697$15i0ov)
                                          (begin
                                            (if (g$bound-id-member?$7124$15i0ov
                                                  g$id$9697$15i0ov
                                                  g$kwd*$9690$15i0ov)
                                              (g$syntax-violation$7504$15i0ov
                                                '#f
                                                '"cannot redefine keyword"
                                                g$e$9680$15i0ov)
                                              (void))
                                            (call-with-values
                                              (case-lambda
                                                (()
                                                 (g$gen-define-label+loc$7065$15i0ov
                                                   g$id$9697$15i0ov
                                                   g$rib$9678$15i0ov)))
                                              (case-lambda
                                                ((g$lab$9700$15i0ov
                                                   g$lex$9701$15i0ov)
                                                 ((case-lambda
                                                    ((g$lex$9702$15i0ov
                                                       g$lab$9703$15i0ov)
                                                     (begin
                                                       (g$extend-rib!$7081$15i0ov
                                                         g$rib$9678$15i0ov
                                                         g$id$9697$15i0ov
                                                         g$lab$9703$15i0ov)
                                                       (g$chi-body*$7439$15i0ov
                                                         (cdr g$e*$9671$15i0ov)
                                                         (g$add-lexical$7342$15i0ov
                                                           g$lab$9703$15i0ov
                                                           g$lex$9702$15i0ov
                                                           g$r$9672$15i0ov)
                                                         g$mr$9673$15i0ov
                                                         (cons
                                                           g$lex$9702$15i0ov
                                                           g$lex*$9674$15i0ov)
                                                         (cons
                                                           g$rhs$9696$15i0ov
                                                           g$rhs*$9675$15i0ov)
                                                         g$mod**$9676$15i0ov
                                                         g$kwd*$9690$15i0ov
                                                         g$rib$9678$15i0ov
                                                         g$top?$9679$15i0ov))))
                                                  g$lex$9701$15i0ov
                                                  g$lab$9700$15i0ov)))))))
                                       g$rhs$9695$15i0ov
                                       g$id$9694$15i0ov))))
                                 (if (memv g$t$9691$15i0ov '(define-syntax))
                                   (call-with-values
                                     (case-lambda
                                       (()
                                        (g$parse-define-syntax$7336$15i0ov
                                          g$e$9680$15i0ov)))
                                     (case-lambda
                                       ((g$id$9706$15i0ov g$rhs$9707$15i0ov)
                                        ((case-lambda
                                           ((g$rhs$9708$15i0ov g$id$9709$15i0ov)
                                            (begin
                                              (if (g$bound-id-member?$7124$15i0ov
                                                    g$id$9709$15i0ov
                                                    g$kwd*$9690$15i0ov)
                                                (g$syntax-violation$7504$15i0ov
                                                  '#f
                                                  '"cannot redefine keyword"
                                                  g$e$9680$15i0ov)
                                                (void))
                                              ((case-lambda
                                                 ((g$lab$9710$15i0ov
                                                    g$expanded-rhs$9711$15i0ov)
                                                  (begin
                                                    (g$extend-rib!$7081$15i0ov
                                                      g$rib$9678$15i0ov
                                                      g$id$9709$15i0ov
                                                      g$lab$9710$15i0ov)
                                                    ((case-lambda
                                                       ((g$b$9712$15i0ov)
                                                        (g$chi-body*$7439$15i0ov
                                                          (cdr g$e*$9671$15i0ov)
                                                          (cons
                                                            (cons
                                                              g$lab$9710$15i0ov
                                                              g$b$9712$15i0ov)
                                                            g$r$9672$15i0ov)
                                                          (cons
                                                            (cons
                                                              g$lab$9710$15i0ov
                                                              g$b$9712$15i0ov)
                                                            g$mr$9673$15i0ov)
                                                          g$lex*$9674$15i0ov
                                                          g$rhs*$9675$15i0ov
                                                          g$mod**$9676$15i0ov
                                                          g$kwd*$9690$15i0ov
                                                          g$rib$9678$15i0ov
                                                          g$top?$9679$15i0ov)))
                                                     (g$make-eval-transformer$7149$15i0ov
                                                       g$expanded-rhs$9711$15i0ov)))))
                                               (g$gen-define-label$7066$15i0ov
                                                 g$id$9709$15i0ov
                                                 g$rib$9678$15i0ov)
                                               (g$expand-transformer$7440$15i0ov
                                                 g$rhs$9708$15i0ov
                                                 g$mr$9673$15i0ov)))))
                                         g$rhs$9707$15i0ov
                                         g$id$9706$15i0ov))))
                                   (if (memv
                                         g$t$9691$15i0ov
                                         '(let-syntax letrec-syntax))
                                     ((case-lambda
                                        ((g$t$9713$15i0ov)
                                         ((case-lambda
                                            ((g$ls/false$9714$15i0ov)
                                             (if (if g$ls/false$9714$15i0ov
                                                   (begin
                                                     '#f
                                                     (apply
                                                       (case-lambda
                                                         ((g$xlhs*$9715$15i0ov
                                                            g$xrhs*$9716$15i0ov
                                                            g$xbody*$9717$15i0ov)
                                                          (if (not (g$valid-bound-ids?$7122$15i0ov
                                                                     g$xlhs*$9715$15i0ov))
                                                            (g$syntax-violation$7504$15i0ov
                                                              '#f
                                                              '"invalid identifiers"
                                                              g$e$9680$15i0ov)
                                                            (void))))
                                                       g$ls/false$9714$15i0ov))
                                                   '#f)
                                               (apply
                                                 (case-lambda
                                                   ((g$xlhs*$9718$15i0ov
                                                      g$xrhs*$9719$15i0ov
                                                      g$xbody*$9720$15i0ov)
                                                    ((case-lambda
                                                       ((g$xlab*$9721$15i0ov)
                                                        ((case-lambda
                                                           ((g$xrib$9722$15i0ov)
                                                            ((case-lambda
                                                               ((g$xb*$9723$15i0ov)
                                                                ((case-lambda
                                                                   (()
                                                                    (g$chi-body*$7439$15i0ov
                                                                      (append
                                                                        (map (case-lambda
                                                                               ((g$x$9724$15i0ov)
                                                                                (g$add-subst$7107$15i0ov
                                                                                  g$xrib$9722$15i0ov
                                                                                  g$x$9724$15i0ov)))
                                                                             g$xbody*$9720$15i0ov)
                                                                        (cdr g$e*$9671$15i0ov))
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9721$15i0ov
                                                                             g$xb*$9723$15i0ov)
                                                                        g$r$9672$15i0ov)
                                                                      (append
                                                                        (map cons
                                                                             g$xlab*$9721$15i0ov
                                                                             g$xb*$9723$15i0ov)
                                                                        g$mr$9673$15i0ov)
                                                                      g$lex*$9674$15i0ov
                                                                      g$rhs*$9675$15i0ov
                                                                      g$mod**$9676$15i0ov
                                                                      g$kwd*$9690$15i0ov
                                                                      g$rib$9678$15i0ov
                                                                      g$top?$9679$15i0ov))))))
                                                             (map (case-lambda
                                                                    ((g$x$9725$15i0ov)
                                                                     (g$make-eval-transformer$7149$15i0ov
                                                                       (g$expand-transformer$7440$15i0ov
                                                                         (if (eq? g$type$9689$15i0ov
                                                                                  'let-syntax)
                                                                           g$x$9725$15i0ov
                                                                           (g$add-subst$7107$15i0ov
                                                                             g$xrib$9722$15i0ov
                                                                             g$x$9725$15i0ov))
                                                                         g$mr$9673$15i0ov))))
                                                                  g$xrhs*$9719$15i0ov))))
                                                         (g$make-full-rib$7085$15i0ov
                                                           g$xlhs*$9718$15i0ov
                                                           g$xlab*$9721$15i0ov))))
                                                     (map g$gen-label$7063$15i0ov
                                                          g$xlhs*$9718$15i0ov))))
                                                 g$ls/false$9714$15i0ov)
                                               (g$syntax-violation$7504$15i0ov
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9713$15i0ov))))
                                          (g$syntax-dispatch$7395$15i0ov
                                            g$t$9713$15i0ov
                                            '(_ #(each (any any))
                                                .
                                                each-any)))))
                                      g$e$9680$15i0ov)
                                     (if (memv g$t$9691$15i0ov '(begin))
                                       ((case-lambda
                                          ((g$t$9726$15i0ov)
                                           ((case-lambda
                                              ((g$ls/false$9727$15i0ov)
                                               (if g$ls/false$9727$15i0ov
                                                 (apply
                                                   (case-lambda
                                                     ((g$x*$9728$15i0ov)
                                                      (g$chi-body*$7439$15i0ov
                                                        (append
                                                          g$x*$9728$15i0ov
                                                          (cdr g$e*$9671$15i0ov))
                                                        g$r$9672$15i0ov
                                                        g$mr$9673$15i0ov
                                                        g$lex*$9674$15i0ov
                                                        g$rhs*$9675$15i0ov
                                                        g$mod**$9676$15i0ov
                                                        g$kwd*$9690$15i0ov
                                                        g$rib$9678$15i0ov
                                                        g$top?$9679$15i0ov)))
                                                   g$ls/false$9727$15i0ov)
                                                 (g$syntax-violation$7504$15i0ov
                                                   '#f
                                                   '"invalid syntax"
                                                   g$t$9726$15i0ov))))
                                            (g$syntax-dispatch$7395$15i0ov
                                              g$t$9726$15i0ov
                                              '(_ . each-any)))))
                                        g$e$9680$15i0ov)
                                       (if (memv
                                             g$t$9691$15i0ov
                                             '(global-macro global-macro!))
                                         (g$chi-body*$7439$15i0ov
                                           (cons
                                             (g$add-subst$7107$15i0ov
                                               g$rib$9678$15i0ov
                                               (g$chi-global-macro$7410$15i0ov
                                                 g$value$9688$15i0ov
                                                 g$e$9680$15i0ov))
                                             (cdr g$e*$9671$15i0ov))
                                           g$r$9672$15i0ov
                                           g$mr$9673$15i0ov
                                           g$lex*$9674$15i0ov
                                           g$rhs*$9675$15i0ov
                                           g$mod**$9676$15i0ov
                                           g$kwd*$9690$15i0ov
                                           g$rib$9678$15i0ov
                                           g$top?$9679$15i0ov)
                                         (if (memv
                                               g$t$9691$15i0ov
                                               '(local-macro local-macro!))
                                           (g$chi-body*$7439$15i0ov
                                             (cons
                                               (g$add-subst$7107$15i0ov
                                                 g$rib$9678$15i0ov
                                                 (g$chi-local-macro$7409$15i0ov
                                                   g$value$9688$15i0ov
                                                   g$e$9680$15i0ov))
                                               (cdr g$e*$9671$15i0ov))
                                             g$r$9672$15i0ov
                                             g$mr$9673$15i0ov
                                             g$lex*$9674$15i0ov
                                             g$rhs*$9675$15i0ov
                                             g$mod**$9676$15i0ov
                                             g$kwd*$9690$15i0ov
                                             g$rib$9678$15i0ov
                                             g$top?$9679$15i0ov)
                                           (if (memv
                                                 g$t$9691$15i0ov
                                                 '(macro macro!))
                                             (g$chi-body*$7439$15i0ov
                                               (cons
                                                 (g$add-subst$7107$15i0ov
                                                   g$rib$9678$15i0ov
                                                   (g$chi-macro$7408$15i0ov
                                                     g$value$9688$15i0ov
                                                     g$e$9680$15i0ov))
                                                 (cdr g$e*$9671$15i0ov))
                                               g$r$9672$15i0ov
                                               g$mr$9673$15i0ov
                                               g$lex*$9674$15i0ov
                                               g$rhs*$9675$15i0ov
                                               g$mod**$9676$15i0ov
                                               g$kwd*$9690$15i0ov
                                               g$rib$9678$15i0ov
                                               g$top?$9679$15i0ov)
                                             (if (memv
                                                   g$t$9691$15i0ov
                                                   '(module))
                                               (call-with-values
                                                 (case-lambda
                                                   (()
                                                    (g$chi-internal-module$7438$15i0ov
                                                      g$e$9680$15i0ov
                                                      g$r$9672$15i0ov
                                                      g$mr$9673$15i0ov
                                                      g$lex*$9674$15i0ov
                                                      g$rhs*$9675$15i0ov
                                                      g$mod**$9676$15i0ov
                                                      g$kwd*$9690$15i0ov)))
                                                 (case-lambda
                                                   ((g$lex*$9737$15i0ov
                                                      g$rhs*$9738$15i0ov
                                                      g$m-exp-id*$9739$15i0ov
                                                      g$m-exp-lab*$9740$15i0ov
                                                      g$r$9741$15i0ov
                                                      g$mr$9742$15i0ov
                                                      g$mod**$9743$15i0ov
                                                      g$kwd*$9744$15i0ov)
                                                    ((case-lambda
                                                       ((g$kwd*$9745$15i0ov
                                                          g$mod**$9746$15i0ov
                                                          g$mr$9747$15i0ov
                                                          g$r$9748$15i0ov
                                                          g$m-exp-lab*$9749$15i0ov
                                                          g$m-exp-id*$9750$15i0ov
                                                          g$rhs*$9751$15i0ov
                                                          g$lex*$9752$15i0ov)
                                                        (begin
                                                          (vector-for-each
                                                            (case-lambda
                                                              ((g$id$9753$15i0ov
                                                                 g$lab$9754$15i0ov)
                                                               (g$extend-rib!$7081$15i0ov
                                                                 g$rib$9678$15i0ov
                                                                 g$id$9753$15i0ov
                                                                 g$lab$9754$15i0ov)))
                                                            g$m-exp-id*$9750$15i0ov
                                                            g$m-exp-lab*$9749$15i0ov)
                                                          (g$chi-body*$7439$15i0ov
                                                            (cdr g$e*$9671$15i0ov)
                                                            g$r$9748$15i0ov
                                                            g$mr$9747$15i0ov
                                                            g$lex*$9752$15i0ov
                                                            g$rhs*$9751$15i0ov
                                                            g$mod**$9746$15i0ov
                                                            g$kwd*$9745$15i0ov
                                                            g$rib$9678$15i0ov
                                                            g$top?$9679$15i0ov))))
                                                     g$kwd*$9744$15i0ov
                                                     g$mod**$9743$15i0ov
                                                     g$mr$9742$15i0ov
                                                     g$r$9741$15i0ov
                                                     g$m-exp-lab*$9740$15i0ov
                                                     g$m-exp-id*$9739$15i0ov
                                                     g$rhs*$9738$15i0ov
                                                     g$lex*$9737$15i0ov))))
                                               (if (memv
                                                     g$t$9691$15i0ov
                                                     '(library))
                                                 (begin
                                                   (g$library-expander$7488$15i0ov
                                                     (g$stx->datum$7128$15i0ov
                                                       g$e$9680$15i0ov))
                                                   (g$chi-body*$7439$15i0ov
                                                     (cdr g$e*$9671$15i0ov)
                                                     g$r$9672$15i0ov
                                                     g$mr$9673$15i0ov
                                                     g$lex*$9674$15i0ov
                                                     g$rhs*$9675$15i0ov
                                                     g$mod**$9676$15i0ov
                                                     g$kwd*$9690$15i0ov
                                                     g$rib$9678$15i0ov
                                                     g$top?$9679$15i0ov))
                                                 (if (memv
                                                       g$t$9691$15i0ov
                                                       '(import))
                                                   (begin
                                                     ((case-lambda
                                                        (()
                                                         (letrec* ((g$module-import?$9755$15i0ov
                                                                     (case-lambda
                                                                       ((g$e$9797$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$t$9798$15i0ov)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9799$15i0ov)
                                                                                (if (if g$ls/false$9799$15i0ov
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9800$15i0ov)
                                                                                             (g$id?$7117$15i0ov
                                                                                               g$id$9800$15i0ov)))
                                                                                          g$ls/false$9799$15i0ov))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9801$15i0ov)
                                                                                       '#t))
                                                                                    g$ls/false$9799$15i0ov)
                                                                                  ((case-lambda
                                                                                     ((g$t$9802$15i0ov)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9803$15i0ov)
                                                                                          (if g$ls/false$9803$15i0ov
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                ((g$imp*$9804$15i0ov)
                                                                                                 '#f))
                                                                                              g$ls/false$9803$15i0ov)
                                                                                            ((case-lambda
                                                                                               ((g$t$9805$15i0ov)
                                                                                                ((case-lambda
                                                                                                   ((g$ls/false$9806$15i0ov)
                                                                                                    (if g$ls/false$9806$15i0ov
                                                                                                      (apply
                                                                                                        (case-lambda
                                                                                                          (()
                                                                                                           (g$syntax-violation$7504$15i0ov
                                                                                                             '#f
                                                                                                             '"malformed import form"
                                                                                                             g$e$9797$15i0ov)))
                                                                                                        g$ls/false$9806$15i0ov)
                                                                                                      (g$syntax-violation$7504$15i0ov
                                                                                                        '#f
                                                                                                        '"invalid syntax"
                                                                                                        g$t$9805$15i0ov))))
                                                                                                 (g$syntax-dispatch$7395$15i0ov
                                                                                                   g$t$9805$15i0ov
                                                                                                   '_))))
                                                                                             g$t$9802$15i0ov))))
                                                                                       (g$syntax-dispatch$7395$15i0ov
                                                                                         g$t$9802$15i0ov
                                                                                         '(_ .
                                                                                             each-any)))))
                                                                                   g$t$9798$15i0ov))))
                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                               g$t$9798$15i0ov
                                                                               '(_ any)))))
                                                                         g$e$9797$15i0ov))))
                                                                   (g$module-import$9756$15i0ov
                                                                     (case-lambda
                                                                       ((g$e$9780$15i0ov
                                                                          g$r$9781$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$t$9782$15i0ov)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9783$15i0ov)
                                                                                (if (if g$ls/false$9783$15i0ov
                                                                                      (begin
                                                                                        '#f
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$id$9784$15i0ov)
                                                                                             (g$id?$7117$15i0ov
                                                                                               g$id$9784$15i0ov)))
                                                                                          g$ls/false$9783$15i0ov))
                                                                                      '#f)
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$id$9785$15i0ov)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$syntax-type$7137$15i0ov
                                                                                              g$id$9785$15i0ov
                                                                                              g$r$9781$15i0ov)))
                                                                                         (case-lambda
                                                                                           ((g$type$9789$15i0ov
                                                                                              g$value$9790$15i0ov
                                                                                              g$kwd$9791$15i0ov)
                                                                                            ((case-lambda
                                                                                               ((g$kwd$9792$15i0ov
                                                                                                  g$value$9793$15i0ov
                                                                                                  g$type$9794$15i0ov)
                                                                                                ((case-lambda
                                                                                                   ((g$t$9795$15i0ov)
                                                                                                    (if (memv
                                                                                                          g$t$9795$15i0ov
                                                                                                          '($module))
                                                                                                      ((case-lambda
                                                                                                         ((g$iface$9796$15i0ov)
                                                                                                          (values
                                                                                                            (g$module-interface-exp-id*$7437$15i0ov
                                                                                                              g$iface$9796$15i0ov
                                                                                                              g$id$9785$15i0ov)
                                                                                                            (g$module-interface-exp-lab-vec$7433$15i0ov
                                                                                                              g$iface$9796$15i0ov))))
                                                                                                       g$value$9793$15i0ov)
                                                                                                      (g$syntax-violation$7504$15i0ov
                                                                                                        '#f
                                                                                                        '"invalid import"
                                                                                                        g$e$9780$15i0ov))))
                                                                                                 g$type$9794$15i0ov)))
                                                                                             g$kwd$9791$15i0ov
                                                                                             g$value$9790$15i0ov
                                                                                             g$type$9789$15i0ov))))))
                                                                                    g$ls/false$9783$15i0ov)
                                                                                  (g$syntax-violation$7504$15i0ov
                                                                                    '#f
                                                                                    '"invalid syntax"
                                                                                    g$t$9782$15i0ov))))
                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                               g$t$9782$15i0ov
                                                                               '(_ any)))))
                                                                         g$e$9780$15i0ov))))
                                                                   (g$library-import$9757$15i0ov
                                                                     (case-lambda
                                                                       ((g$e$9766$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$t$9767$15i0ov)
                                                                            ((case-lambda
                                                                               ((g$ls/false$9768$15i0ov)
                                                                                (if g$ls/false$9768$15i0ov
                                                                                  (apply
                                                                                    (case-lambda
                                                                                      ((g$ctxt$9769$15i0ov
                                                                                         g$imp*$9770$15i0ov)
                                                                                       (call-with-values
                                                                                         (case-lambda
                                                                                           (()
                                                                                            (g$parse-import-spec*$7444$15i0ov
                                                                                              (g$syntax->datum$7507$15i0ov
                                                                                                g$imp*$9770$15i0ov))))
                                                                                         (case-lambda
                                                                                           ((g$subst-names$9773$15i0ov
                                                                                              g$subst-labels$9774$15i0ov)
                                                                                            ((case-lambda
                                                                                               ((g$subst-labels$9775$15i0ov
                                                                                                  g$subst-names$9776$15i0ov)
                                                                                                (values
                                                                                                  (vector-map
                                                                                                    (case-lambda
                                                                                                      ((g$name$9777$15i0ov)
                                                                                                       (g$datum->stx$7100$15i0ov
                                                                                                         g$ctxt$9769$15i0ov
                                                                                                         g$name$9777$15i0ov)))
                                                                                                    g$subst-names$9776$15i0ov)
                                                                                                  g$subst-labels$9775$15i0ov)))
                                                                                             g$subst-labels$9774$15i0ov
                                                                                             g$subst-names$9773$15i0ov))))))
                                                                                    g$ls/false$9768$15i0ov)
                                                                                  ((case-lambda
                                                                                     ((g$t$9778$15i0ov)
                                                                                      ((case-lambda
                                                                                         ((g$ls/false$9779$15i0ov)
                                                                                          (if g$ls/false$9779$15i0ov
                                                                                            (apply
                                                                                              (case-lambda
                                                                                                (()
                                                                                                 (g$syntax-violation$7504$15i0ov
                                                                                                   '#f
                                                                                                   '"invalid import form"
                                                                                                   g$e$9766$15i0ov)))
                                                                                              g$ls/false$9779$15i0ov)
                                                                                            (g$syntax-violation$7504$15i0ov
                                                                                              '#f
                                                                                              '"invalid syntax"
                                                                                              g$t$9778$15i0ov))))
                                                                                       (g$syntax-dispatch$7395$15i0ov
                                                                                         g$t$9778$15i0ov
                                                                                         '_))))
                                                                                   g$t$9767$15i0ov))))
                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                               g$t$9767$15i0ov
                                                                               '(any .
                                                                                     each-any)))))
                                                                         g$e$9766$15i0ov)))))
                                                           (call-with-values
                                                             (case-lambda
                                                               (()
                                                                (if (g$module-import?$9755$15i0ov
                                                                      g$e$9680$15i0ov)
                                                                  (g$module-import$9756$15i0ov
                                                                    g$e$9680$15i0ov
                                                                    g$r$9672$15i0ov)
                                                                  (g$library-import$9757$15i0ov
                                                                    g$e$9680$15i0ov))))
                                                             (case-lambda
                                                               ((g$id*$9760$15i0ov
                                                                  g$lab*$9761$15i0ov)
                                                                ((case-lambda
                                                                   ((g$lab*$9762$15i0ov
                                                                      g$id*$9763$15i0ov)
                                                                    (vector-for-each
                                                                      (case-lambda
                                                                        ((g$id$9764$15i0ov
                                                                           g$lab$9765$15i0ov)
                                                                         (g$extend-rib!$7081$15i0ov
                                                                           g$rib$9678$15i0ov
                                                                           g$id$9764$15i0ov
                                                                           g$lab$9765$15i0ov)))
                                                                      g$id*$9763$15i0ov
                                                                      g$lab*$9762$15i0ov)))
                                                                 g$lab*$9761$15i0ov
                                                                 g$id*$9760$15i0ov))))))))
                                                     (g$chi-body*$7439$15i0ov
                                                       (cdr g$e*$9671$15i0ov)
                                                       g$r$9672$15i0ov
                                                       g$mr$9673$15i0ov
                                                       g$lex*$9674$15i0ov
                                                       g$rhs*$9675$15i0ov
                                                       g$mod**$9676$15i0ov
                                                       g$kwd*$9690$15i0ov
                                                       g$rib$9678$15i0ov
                                                       g$top?$9679$15i0ov))
                                                   (if g$top?$9679$15i0ov
                                                     (g$chi-body*$7439$15i0ov
                                                       (cdr g$e*$9671$15i0ov)
                                                       g$r$9672$15i0ov
                                                       g$mr$9673$15i0ov
                                                       (cons
                                                         (g$gen-lexical$7061$15i0ov
                                                           'dummy)
                                                         g$lex*$9674$15i0ov)
                                                       (cons
                                                         (cons
                                                           'top-expr
                                                           g$e$9680$15i0ov)
                                                         g$rhs*$9675$15i0ov)
                                                       g$mod**$9676$15i0ov
                                                       g$kwd*$9690$15i0ov
                                                       g$rib$9678$15i0ov
                                                       g$top?$9679$15i0ov)
                                                     (values
                                                       g$e*$9671$15i0ov
                                                       g$r$9672$15i0ov
                                                       g$mr$9673$15i0ov
                                                       g$lex*$9674$15i0ov
                                                       g$rhs*$9675$15i0ov
                                                       g$mod**$9676$15i0ov
                                                       g$kwd*$9690$15i0ov))))))))))))))
                            g$type$9689$15i0ov)))
                        (if (g$id?$7117$15i0ov g$kwd$9687$15i0ov)
                          (cons g$kwd$9687$15i0ov g$kwd*$9677$15i0ov)
                          g$kwd*$9677$15i0ov))))
                    g$kwd$9686$15i0ov
                    g$value$9685$15i0ov
                    g$type$9684$15i0ov))))))
           (car g$e*$9671$15i0ov))))))
   (g$expand-transformer$7440$15i0ov
     g$expand-transformer$10879$15i0ov
     (case-lambda
       ((g$expr$9807$15i0ov g$r$9808$15i0ov)
        ((case-lambda
           ((g$rtc$9809$15i0ov)
            ((case-lambda
               ((g$expanded-rhs$9810$15i0ov)
                (begin
                  (for-each
                    ((case-lambda
                       ((g$mark-visit$9811$15i0ov)
                        (case-lambda
                          ((g$x$9812$15i0ov)
                           (begin
                             (g$invoke-library$6932$15i0ov g$x$9812$15i0ov)
                             (g$mark-visit$9811$15i0ov g$x$9812$15i0ov))))))
                     (g$vis-collector$7448$15i0ov))
                    (g$rtc$9809$15i0ov))
                  g$expanded-rhs$9810$15i0ov)))
             ((case-lambda
                ((g$inv-collector$9817$15i0ov
                   g$vis-collector$9818$15i0ov
                   g$inv-collector$9819$15i0ov
                   g$vis-collector$9820$15i0ov)
                 ((case-lambda
                    ((g$swap$9821$15i0ov)
                     (dynamic-wind
                       g$swap$9821$15i0ov
                       (case-lambda
                         (()
                          (g$chi-expr$7413$15i0ov
                            g$expr$9807$15i0ov
                            g$r$9808$15i0ov
                            g$r$9808$15i0ov)))
                       g$swap$9821$15i0ov)))
                  (case-lambda
                    (()
                     (begin
                       ((case-lambda
                          ((g$t$9822$15i0ov)
                           (begin
                             (g$inv-collector$9817$15i0ov
                               g$inv-collector$9819$15i0ov)
                             (set! g$inv-collector$9819$15i0ov
                               g$t$9822$15i0ov))))
                        (g$inv-collector$9817$15i0ov))
                       ((case-lambda
                          ((g$t$9823$15i0ov)
                           (begin
                             (g$vis-collector$9818$15i0ov
                               g$vis-collector$9820$15i0ov)
                             (set! g$vis-collector$9820$15i0ov
                               g$t$9823$15i0ov))))
                        (g$vis-collector$9818$15i0ov))))))))
              g$inv-collector$7447$15i0ov
              g$vis-collector$7448$15i0ov
              g$rtc$9809$15i0ov
              (case-lambda ((g$x$9824$15i0ov) (values)))))))
         (g$make-collector$7446$15i0ov)))))
   (g$parse-exports$7441$15i0ov
     g$parse-exports$10880$15i0ov
     (case-lambda
       ((g$exp*$9825$15i0ov)
        (letrec* ((g$idsyn?$9826$15i0ov
                    (case-lambda
                      ((g$x$9841$15i0ov)
                       (symbol?
                         (g$syntax->datum$7507$15i0ov g$x$9841$15i0ov))))))
          ((letrec ((g$f$9827$15i0ov
                      (case-lambda
                        ((g$exp*$9828$15i0ov
                           g$int*$9829$15i0ov
                           g$ext*$9830$15i0ov)
                         (if (null? g$exp*$9828$15i0ov)
                           (begin
                             ((case-lambda
                                ((g$id*$9831$15i0ov)
                                 (if (not (g$valid-bound-ids?$7122$15i0ov
                                            g$id*$9831$15i0ov))
                                   (g$syntax-violation$7504$15i0ov
                                     'export
                                     '"invalid exports"
                                     (g$find-dups$7423$15i0ov
                                       g$id*$9831$15i0ov))
                                   (void))))
                              (map (case-lambda
                                     ((g$x$9832$15i0ov)
                                      (g$make-stx$7090$15i0ov
                                        g$x$9832$15i0ov
                                        g$top-mark*$7059$15i0ov
                                        '()
                                        '())))
                                   g$ext*$9830$15i0ov))
                             (values
                               (map g$syntax->datum$7507$15i0ov
                                    g$int*$9829$15i0ov)
                               (map g$syntax->datum$7507$15i0ov
                                    g$ext*$9830$15i0ov)))
                           ((case-lambda
                              ((g$t$9833$15i0ov)
                               ((case-lambda
                                  ((g$ls/false$9834$15i0ov)
                                   (if g$ls/false$9834$15i0ov
                                     (apply
                                       (case-lambda
                                         ((g$rename$9835$15i0ov
                                            g$i*$9836$15i0ov
                                            g$e*$9837$15i0ov)
                                          (begin
                                            (if (not (if (eq? (g$syntax->datum$7507$15i0ov
                                                                g$rename$9835$15i0ov)
                                                              'rename)
                                                       (if (g$for-all$5359$15i0ov
                                                             g$idsyn?$9826$15i0ov
                                                             g$i*$9836$15i0ov)
                                                         (begin
                                                           '#f
                                                           (g$for-all$5359$15i0ov
                                                             g$idsyn?$9826$15i0ov
                                                             g$e*$9837$15i0ov))
                                                         '#f)
                                                       '#f))
                                              (g$syntax-violation$7504$15i0ov
                                                'export
                                                '"invalid export specifier"
                                                (car g$exp*$9828$15i0ov))
                                              (void))
                                            (g$f$9827$15i0ov
                                              (cdr g$exp*$9828$15i0ov)
                                              (append
                                                g$i*$9836$15i0ov
                                                g$int*$9829$15i0ov)
                                              (append
                                                g$e*$9837$15i0ov
                                                g$ext*$9830$15i0ov)))))
                                       g$ls/false$9834$15i0ov)
                                     ((case-lambda
                                        ((g$t$9838$15i0ov)
                                         ((case-lambda
                                            ((g$ls/false$9839$15i0ov)
                                             (if g$ls/false$9839$15i0ov
                                               (apply
                                                 (case-lambda
                                                   ((g$ie$9840$15i0ov)
                                                    (begin
                                                      (if (not (g$idsyn?$9826$15i0ov
                                                                 g$ie$9840$15i0ov))
                                                        (g$syntax-violation$7504$15i0ov
                                                          'export
                                                          '"invalid export"
                                                          g$ie$9840$15i0ov)
                                                        (void))
                                                      (g$f$9827$15i0ov
                                                        (cdr g$exp*$9828$15i0ov)
                                                        (cons
                                                          g$ie$9840$15i0ov
                                                          g$int*$9829$15i0ov)
                                                        (cons
                                                          g$ie$9840$15i0ov
                                                          g$ext*$9830$15i0ov)))))
                                                 g$ls/false$9839$15i0ov)
                                               (g$syntax-violation$7504$15i0ov
                                                 '#f
                                                 '"invalid syntax"
                                                 g$t$9838$15i0ov))))
                                          (g$syntax-dispatch$7395$15i0ov
                                            g$t$9838$15i0ov
                                            'any))))
                                      g$t$9833$15i0ov))))
                                (g$syntax-dispatch$7395$15i0ov
                                  g$t$9833$15i0ov
                                  '(any . #(each (any any)))))))
                            (car g$exp*$9828$15i0ov)))))))
             g$f$9827$15i0ov)
           g$exp*$9825$15i0ov
           '()
           '())))))
   (g$parse-library-name$7442$15i0ov
     g$parse-library-name$10881$15i0ov
     (case-lambda
       ((g$spec$9842$15i0ov)
        (letrec* ((g$parse$9843$15i0ov
                    (case-lambda
                      ((g$x$9850$15i0ov)
                       ((case-lambda
                          ((g$t$9851$15i0ov)
                           ((case-lambda
                              ((g$ls/false$9852$15i0ov)
                               (if (if g$ls/false$9852$15i0ov
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$v*$9853$15i0ov)
                                            (g$for-all$5359$15i0ov
                                              (case-lambda
                                                ((g$x$9854$15i0ov)
                                                 ((case-lambda
                                                    ((g$x$9855$15i0ov)
                                                     (if (integer?
                                                           g$x$9855$15i0ov)
                                                       (begin
                                                         '#f
                                                         (exact?
                                                           g$x$9855$15i0ov))
                                                       '#f)))
                                                  (g$syntax->datum$7507$15i0ov
                                                    g$x$9854$15i0ov))))
                                              g$v*$9853$15i0ov)))
                                         g$ls/false$9852$15i0ov))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$v*$9856$15i0ov)
                                      (values
                                        '()
                                        (map g$syntax->datum$7507$15i0ov
                                             g$v*$9856$15i0ov))))
                                   g$ls/false$9852$15i0ov)
                                 ((case-lambda
                                    ((g$t$9857$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$9858$15i0ov)
                                         (if (if g$ls/false$9858$15i0ov
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$x$9859$15i0ov
                                                        g$rest$9860$15i0ov)
                                                      (symbol?
                                                        (g$syntax->datum$7507$15i0ov
                                                          g$x$9859$15i0ov))))
                                                   g$ls/false$9858$15i0ov))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$x$9861$15i0ov
                                                  g$rest$9862$15i0ov)
                                                (call-with-values
                                                  (case-lambda
                                                    (()
                                                     (g$parse$9843$15i0ov
                                                       g$rest$9862$15i0ov)))
                                                  (case-lambda
                                                    ((g$x*$9865$15i0ov
                                                       g$v*$9866$15i0ov)
                                                     ((case-lambda
                                                        ((g$v*$9867$15i0ov
                                                           g$x*$9868$15i0ov)
                                                         (values
                                                           (cons
                                                             (g$syntax->datum$7507$15i0ov
                                                               g$x$9861$15i0ov)
                                                             g$x*$9868$15i0ov)
                                                           g$v*$9867$15i0ov)))
                                                      g$v*$9866$15i0ov
                                                      g$x*$9865$15i0ov))))))
                                             g$ls/false$9858$15i0ov)
                                           ((case-lambda
                                              ((g$t$9869$15i0ov)
                                               ((case-lambda
                                                  ((g$ls/false$9870$15i0ov)
                                                   (if g$ls/false$9870$15i0ov
                                                     (apply
                                                       (case-lambda
                                                         (() (values '() '())))
                                                       g$ls/false$9870$15i0ov)
                                                     ((case-lambda
                                                        ((g$t$9871$15i0ov)
                                                         ((case-lambda
                                                            ((g$ls/false$9872$15i0ov)
                                                             (if g$ls/false$9872$15i0ov
                                                               (apply
                                                                 (case-lambda
                                                                   (()
                                                                    (g$syntax-violation$7504$15i0ov
                                                                      '#f
                                                                      '"invalid library name"
                                                                      g$spec$9842$15i0ov)))
                                                                 g$ls/false$9872$15i0ov)
                                                               (g$syntax-violation$7504$15i0ov
                                                                 '#f
                                                                 '"invalid syntax"
                                                                 g$t$9871$15i0ov))))
                                                          (g$syntax-dispatch$7395$15i0ov
                                                            g$t$9871$15i0ov
                                                            '_))))
                                                      g$t$9869$15i0ov))))
                                                (g$syntax-dispatch$7395$15i0ov
                                                  g$t$9869$15i0ov
                                                  '()))))
                                            g$t$9857$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$9857$15i0ov
                                        '(any . any)))))
                                  g$t$9851$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$9851$15i0ov
                              '(each-any)))))
                        g$x$9850$15i0ov)))))
          (call-with-values
            (case-lambda (() (g$parse$9843$15i0ov g$spec$9842$15i0ov)))
            (case-lambda
              ((g$name*$9846$15i0ov g$ver*$9847$15i0ov)
               ((case-lambda
                  ((g$ver*$9848$15i0ov g$name*$9849$15i0ov)
                   (begin
                     (if (null? g$name*$9849$15i0ov)
                       (g$syntax-violation$7504$15i0ov
                         '#f
                         '"empty library name"
                         g$spec$9842$15i0ov)
                       (void))
                     (values g$name*$9849$15i0ov g$ver*$9848$15i0ov))))
                g$ver*$9847$15i0ov
                g$name*$9846$15i0ov))))))))
   (g$parse-library$7443$15i0ov
     g$parse-library$10882$15i0ov
     (case-lambda
       ((g$e$9873$15i0ov)
        ((case-lambda
           ((g$t$9874$15i0ov)
            ((case-lambda
               ((g$ls/false$9875$15i0ov)
                (if (if g$ls/false$9875$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$library$9876$15i0ov
                               g$name*$9877$15i0ov
                               g$export$9878$15i0ov
                               g$exp*$9879$15i0ov
                               g$import$9880$15i0ov
                               g$imp*$9881$15i0ov
                               g$b*$9882$15i0ov)
                             (if (eq? (g$syntax->datum$7507$15i0ov
                                        g$export$9878$15i0ov)
                                      'export)
                               (if (eq? (g$syntax->datum$7507$15i0ov
                                          g$import$9880$15i0ov)
                                        'import)
                                 (begin
                                   '#f
                                   (eq? (g$syntax->datum$7507$15i0ov
                                          g$library$9876$15i0ov)
                                        'library))
                                 '#f)
                               '#f)))
                          g$ls/false$9875$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$library$9883$15i0ov
                         g$name*$9884$15i0ov
                         g$export$9885$15i0ov
                         g$exp*$9886$15i0ov
                         g$import$9887$15i0ov
                         g$imp*$9888$15i0ov
                         g$b*$9889$15i0ov)
                       (values
                         g$name*$9884$15i0ov
                         g$exp*$9886$15i0ov
                         g$imp*$9888$15i0ov
                         g$b*$9889$15i0ov)))
                    g$ls/false$9875$15i0ov)
                  ((case-lambda
                     ((g$t$9890$15i0ov)
                      ((case-lambda
                         ((g$ls/false$9891$15i0ov)
                          (if g$ls/false$9891$15i0ov
                            (apply
                              (case-lambda
                                (()
                                 (g$syntax-violation$7504$15i0ov
                                   '#f
                                   '"malformed library"
                                   g$e$9873$15i0ov)))
                              g$ls/false$9891$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$9890$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov g$t$9890$15i0ov '_))))
                   g$t$9874$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$9874$15i0ov
               '(any each-any (any . each-any) (any . each-any) . each-any)))))
         g$e$9873$15i0ov))))
   (g$parse-import-spec*$7444$15i0ov
     g$parse-import-spec*$10883$15i0ov
     (case-lambda
       ((g$imp*$9892$15i0ov)
        (letrec* ((g$idsyn?$9893$15i0ov
                    (case-lambda
                      ((g$x$10153$15i0ov)
                       (symbol?
                         (g$syntax->datum$7507$15i0ov g$x$10153$15i0ov)))))
                  (g$dup-error$9894$15i0ov
                    (case-lambda
                      ((g$name$10152$15i0ov)
                       (g$syntax-violation$7504$15i0ov
                         'import
                         '"two imports with different bindings"
                         g$name$10152$15i0ov))))
                  (g$merge-substs$9895$15i0ov
                    (case-lambda
                      ((g$s$10143$15i0ov g$subst$10144$15i0ov)
                       (letrec* ((g$insert-to-subst$10145$15i0ov
                                   (case-lambda
                                     ((g$a$10146$15i0ov g$subst$10147$15i0ov)
                                      ((case-lambda
                                         ((g$name$10148$15i0ov
                                            g$label$10149$15i0ov)
                                          ((case-lambda
                                             ((g$t$10150$15i0ov)
                                              (if g$t$10150$15i0ov
                                                ((case-lambda
                                                   ((g$x$10151$15i0ov)
                                                    (if (eq? (cdr g$x$10151$15i0ov)
                                                             g$label$10149$15i0ov)
                                                      g$subst$10147$15i0ov
                                                      (g$dup-error$9894$15i0ov
                                                        g$name$10148$15i0ov))))
                                                 g$t$10150$15i0ov)
                                                (cons
                                                  g$a$10146$15i0ov
                                                  g$subst$10147$15i0ov))))
                                           (assq
                                             g$name$10148$15i0ov
                                             g$subst$10147$15i0ov))))
                                       (car g$a$10146$15i0ov)
                                       (cdr g$a$10146$15i0ov))))))
                         (if (null? g$s$10143$15i0ov)
                           g$subst$10144$15i0ov
                           (g$insert-to-subst$10145$15i0ov
                             (car g$s$10143$15i0ov)
                             (g$merge-substs$9895$15i0ov
                               (cdr g$s$10143$15i0ov)
                               g$subst$10144$15i0ov)))))))
                  (g$exclude*$9896$15i0ov
                    (case-lambda
                      ((g$sym*$10119$15i0ov g$subst$10120$15i0ov)
                       (letrec* ((g$exclude$10121$15i0ov
                                   (case-lambda
                                     ((g$sym$10134$15i0ov g$subst$10135$15i0ov)
                                      (if (null? g$subst$10135$15i0ov)
                                        (g$syntax-violation$7504$15i0ov
                                          'import
                                          '"cannot rename unbound identifier"
                                          g$sym$10134$15i0ov)
                                        (if (eq? g$sym$10134$15i0ov
                                                 (g$caar$4889$15i0ov
                                                   g$subst$10135$15i0ov))
                                          (values
                                            (g$cdar$4891$15i0ov
                                              g$subst$10135$15i0ov)
                                            (cdr g$subst$10135$15i0ov))
                                          ((case-lambda
                                             ((g$a$10136$15i0ov)
                                              (call-with-values
                                                (case-lambda
                                                  (()
                                                   (g$exclude$10121$15i0ov
                                                     g$sym$10134$15i0ov
                                                     (cdr g$subst$10135$15i0ov))))
                                                (case-lambda
                                                  ((g$old$10139$15i0ov
                                                     g$subst$10140$15i0ov)
                                                   ((case-lambda
                                                      ((g$subst$10141$15i0ov
                                                         g$old$10142$15i0ov)
                                                       (values
                                                         g$old$10142$15i0ov
                                                         (cons
                                                           g$a$10136$15i0ov
                                                           g$subst$10141$15i0ov))))
                                                    g$subst$10140$15i0ov
                                                    g$old$10139$15i0ov))))))
                                           (car g$subst$10135$15i0ov))))))))
                         (if (null? g$sym*$10119$15i0ov)
                           (values '() g$subst$10120$15i0ov)
                           (call-with-values
                             (case-lambda
                               (()
                                (g$exclude$10121$15i0ov
                                  (car g$sym*$10119$15i0ov)
                                  g$subst$10120$15i0ov)))
                             (case-lambda
                               ((g$old$10124$15i0ov g$subst$10125$15i0ov)
                                ((case-lambda
                                   ((g$subst$10126$15i0ov g$old$10127$15i0ov)
                                    (call-with-values
                                      (case-lambda
                                        (()
                                         (g$exclude*$9896$15i0ov
                                           (cdr g$sym*$10119$15i0ov)
                                           g$subst$10126$15i0ov)))
                                      (case-lambda
                                        ((g$old*$10130$15i0ov
                                           g$subst$10131$15i0ov)
                                         ((case-lambda
                                            ((g$subst$10132$15i0ov
                                               g$old*$10133$15i0ov)
                                             (values
                                               (cons
                                                 g$old$10127$15i0ov
                                                 g$old*$10133$15i0ov)
                                               g$subst$10132$15i0ov)))
                                          g$subst$10131$15i0ov
                                          g$old*$10130$15i0ov))))))
                                 g$subst$10125$15i0ov
                                 g$old$10124$15i0ov)))))))))
                  (g$find*$9897$15i0ov
                    (case-lambda
                      ((g$sym*$10115$15i0ov g$subst$10116$15i0ov)
                       (map (case-lambda
                              ((g$x$10117$15i0ov)
                               ((case-lambda
                                  ((g$t$10118$15i0ov)
                                   (if g$t$10118$15i0ov
                                     (cdr g$t$10118$15i0ov)
                                     (g$syntax-violation$7504$15i0ov
                                       'import
                                       '"cannot find identifier"
                                       g$x$10117$15i0ov))))
                                (assq g$x$10117$15i0ov g$subst$10116$15i0ov))))
                            g$sym*$10115$15i0ov))))
                  (g$rem*$9898$15i0ov
                    (case-lambda
                      ((g$sym*$10111$15i0ov g$subst$10112$15i0ov)
                       ((letrec ((g$f$10113$15i0ov
                                   (case-lambda
                                     ((g$subst$10114$15i0ov)
                                      (if (null? g$subst$10114$15i0ov)
                                        '()
                                        (if (memq
                                              (g$caar$4889$15i0ov
                                                g$subst$10114$15i0ov)
                                              g$sym*$10111$15i0ov)
                                          (g$f$10113$15i0ov
                                            (cdr g$subst$10114$15i0ov))
                                          (cons
                                            (car g$subst$10114$15i0ov)
                                            (g$f$10113$15i0ov
                                              (cdr g$subst$10114$15i0ov)))))))))
                          g$f$10113$15i0ov)
                        g$subst$10112$15i0ov))))
                  (g$remove-dups$9899$15i0ov
                    (case-lambda
                      ((g$ls$10110$15i0ov)
                       (if (null? g$ls$10110$15i0ov)
                         '()
                         (if (memq
                               (car g$ls$10110$15i0ov)
                               (cdr g$ls$10110$15i0ov))
                           (g$remove-dups$9899$15i0ov (cdr g$ls$10110$15i0ov))
                           (cons
                             (car g$ls$10110$15i0ov)
                             (g$remove-dups$9899$15i0ov
                               (cdr g$ls$10110$15i0ov))))))))
                  (g$parse-library-name$9900$15i0ov
                    (case-lambda
                      ((g$spec$9994$15i0ov)
                       (letrec* ((g$subversion?$9995$15i0ov
                                   (case-lambda
                                     ((g$x$10108$15i0ov)
                                      ((case-lambda
                                         ((g$x$10109$15i0ov)
                                          (if (integer? g$x$10109$15i0ov)
                                            (if (exact? g$x$10109$15i0ov)
                                              (begin
                                                '#f
                                                (>= g$x$10109$15i0ov '0))
                                              '#f)
                                            '#f)))
                                       (g$syntax->datum$7507$15i0ov
                                         g$x$10108$15i0ov)))))
                                 (g$subversion-pred$9996$15i0ov
                                   (case-lambda
                                     ((g$x*$10060$15i0ov)
                                      ((case-lambda
                                         ((g$t$10061$15i0ov)
                                          ((case-lambda
                                             ((g$ls/false$10062$15i0ov)
                                              (if (if g$ls/false$10062$15i0ov
                                                    (begin
                                                      '#f
                                                      (apply
                                                        (case-lambda
                                                          ((g$n$10063$15i0ov)
                                                           (g$subversion?$9995$15i0ov
                                                             g$n$10063$15i0ov)))
                                                        g$ls/false$10062$15i0ov))
                                                    '#f)
                                                (apply
                                                  (case-lambda
                                                    ((g$n$10064$15i0ov)
                                                     (case-lambda
                                                       ((g$x$10065$15i0ov)
                                                        (= g$x$10065$15i0ov
                                                           (g$syntax->datum$7507$15i0ov
                                                             g$n$10064$15i0ov))))))
                                                  g$ls/false$10062$15i0ov)
                                                ((case-lambda
                                                   ((g$t$10066$15i0ov)
                                                    ((case-lambda
                                                       ((g$ls/false$10067$15i0ov)
                                                        (if (if g$ls/false$10067$15i0ov
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$p?$10068$15i0ov
                                                                       g$sub*$10069$15i0ov)
                                                                     (eq? (g$syntax->datum$7507$15i0ov
                                                                            g$p?$10068$15i0ov)
                                                                          'and)))
                                                                  g$ls/false$10067$15i0ov))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$p?$10070$15i0ov
                                                                 g$sub*$10071$15i0ov)
                                                               ((case-lambda
                                                                  ((g$p*$10072$15i0ov)
                                                                   (case-lambda
                                                                     ((g$x$10073$15i0ov)
                                                                      (g$for-all$5359$15i0ov
                                                                        (case-lambda
                                                                          ((g$p$10074$15i0ov)
                                                                           (g$p$10074$15i0ov
                                                                             g$x$10073$15i0ov)))
                                                                        g$p*$10072$15i0ov)))))
                                                                (map g$subversion-pred$9996$15i0ov
                                                                     g$sub*$10071$15i0ov))))
                                                            g$ls/false$10067$15i0ov)
                                                          ((case-lambda
                                                             ((g$t$10075$15i0ov)
                                                              ((case-lambda
                                                                 ((g$ls/false$10076$15i0ov)
                                                                  (if (if g$ls/false$10076$15i0ov
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$p?$10077$15i0ov
                                                                                 g$sub*$10078$15i0ov)
                                                                               (eq? (g$syntax->datum$7507$15i0ov
                                                                                      g$p?$10077$15i0ov)
                                                                                    'or)))
                                                                            g$ls/false$10076$15i0ov))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$p?$10079$15i0ov
                                                                           g$sub*$10080$15i0ov)
                                                                         ((case-lambda
                                                                            ((g$p*$10081$15i0ov)
                                                                             (case-lambda
                                                                               ((g$x$10082$15i0ov)
                                                                                (g$exists$5360$15i0ov
                                                                                  (case-lambda
                                                                                    ((g$p$10083$15i0ov)
                                                                                     (g$p$10083$15i0ov
                                                                                       g$x$10082$15i0ov)))
                                                                                  g$p*$10081$15i0ov)))))
                                                                          (map g$subversion-pred$9996$15i0ov
                                                                               g$sub*$10080$15i0ov))))
                                                                      g$ls/false$10076$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$t$10084$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10085$15i0ov)
                                                                            (if (if g$ls/false$10085$15i0ov
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$p?$10086$15i0ov
                                                                                           g$sub$10087$15i0ov)
                                                                                         (eq? (g$syntax->datum$7507$15i0ov
                                                                                                g$p?$10086$15i0ov)
                                                                                              'not)))
                                                                                      g$ls/false$10085$15i0ov))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$p?$10088$15i0ov
                                                                                     g$sub$10089$15i0ov)
                                                                                   ((case-lambda
                                                                                      ((g$p$10090$15i0ov)
                                                                                       (case-lambda
                                                                                         ((g$x$10091$15i0ov)
                                                                                          (not (g$p$10090$15i0ov
                                                                                                 g$x$10091$15i0ov))))))
                                                                                    (g$subversion-pred$9996$15i0ov
                                                                                      g$sub$10089$15i0ov))))
                                                                                g$ls/false$10085$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$t$10092$15i0ov)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10093$15i0ov)
                                                                                      (if (if g$ls/false$10093$15i0ov
                                                                                            (begin
                                                                                              '#f
                                                                                              (apply
                                                                                                (case-lambda
                                                                                                  ((g$p?$10094$15i0ov
                                                                                                     g$n$10095$15i0ov)
                                                                                                   (if (eq? (g$syntax->datum$7507$15i0ov
                                                                                                              g$p?$10094$15i0ov)
                                                                                                            '<=)
                                                                                                     (begin
                                                                                                       '#f
                                                                                                       (g$subversion?$9995$15i0ov
                                                                                                         g$n$10095$15i0ov))
                                                                                                     '#f)))
                                                                                                g$ls/false$10093$15i0ov))
                                                                                            '#f)
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$p?$10096$15i0ov
                                                                                               g$n$10097$15i0ov)
                                                                                             (case-lambda
                                                                                               ((g$x$10098$15i0ov)
                                                                                                (<= g$x$10098$15i0ov
                                                                                                    (g$syntax->datum$7507$15i0ov
                                                                                                      g$n$10097$15i0ov))))))
                                                                                          g$ls/false$10093$15i0ov)
                                                                                        ((case-lambda
                                                                                           ((g$t$10099$15i0ov)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10100$15i0ov)
                                                                                                (if (if g$ls/false$10100$15i0ov
                                                                                                      (begin
                                                                                                        '#f
                                                                                                        (apply
                                                                                                          (case-lambda
                                                                                                            ((g$p?$10101$15i0ov
                                                                                                               g$n$10102$15i0ov)
                                                                                                             (if (eq? (g$syntax->datum$7507$15i0ov
                                                                                                                        g$p?$10101$15i0ov)
                                                                                                                      '>=)
                                                                                                               (begin
                                                                                                                 '#f
                                                                                                                 (g$subversion?$9995$15i0ov
                                                                                                                   g$n$10102$15i0ov))
                                                                                                               '#f)))
                                                                                                          g$ls/false$10100$15i0ov))
                                                                                                      '#f)
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      ((g$p?$10103$15i0ov
                                                                                                         g$n$10104$15i0ov)
                                                                                                       (case-lambda
                                                                                                         ((g$x$10105$15i0ov)
                                                                                                          (>= g$x$10105$15i0ov
                                                                                                              (g$syntax->datum$7507$15i0ov
                                                                                                                g$n$10104$15i0ov))))))
                                                                                                    g$ls/false$10100$15i0ov)
                                                                                                  ((case-lambda
                                                                                                     ((g$t$10106$15i0ov)
                                                                                                      ((case-lambda
                                                                                                         ((g$ls/false$10107$15i0ov)
                                                                                                          (if g$ls/false$10107$15i0ov
                                                                                                            (apply
                                                                                                              (case-lambda
                                                                                                                (()
                                                                                                                 (g$syntax-violation$7504$15i0ov
                                                                                                                   'import
                                                                                                                   '"invalid sub-version spec"
                                                                                                                   g$spec$9994$15i0ov
                                                                                                                   g$x*$10060$15i0ov)))
                                                                                                              g$ls/false$10107$15i0ov)
                                                                                                            (g$syntax-violation$7504$15i0ov
                                                                                                              '#f
                                                                                                              '"invalid syntax"
                                                                                                              g$t$10106$15i0ov))))
                                                                                                       (g$syntax-dispatch$7395$15i0ov
                                                                                                         g$t$10106$15i0ov
                                                                                                         '_))))
                                                                                                   g$t$10099$15i0ov))))
                                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                                               g$t$10099$15i0ov
                                                                                               '(any any)))))
                                                                                         g$t$10092$15i0ov))))
                                                                                   (g$syntax-dispatch$7395$15i0ov
                                                                                     g$t$10092$15i0ov
                                                                                     '(any any)))))
                                                                               g$t$10084$15i0ov))))
                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                           g$t$10084$15i0ov
                                                                           '(any any)))))
                                                                     g$t$10075$15i0ov))))
                                                               (g$syntax-dispatch$7395$15i0ov
                                                                 g$t$10075$15i0ov
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10066$15i0ov))))
                                                     (g$syntax-dispatch$7395$15i0ov
                                                       g$t$10066$15i0ov
                                                       '(any . each-any)))))
                                                 g$t$10061$15i0ov))))
                                           (g$syntax-dispatch$7395$15i0ov
                                             g$t$10061$15i0ov
                                             'any))))
                                       g$x*$10060$15i0ov))))
                                 (g$version-pred$9997$15i0ov
                                   (case-lambda
                                     ((g$x*$10020$15i0ov)
                                      ((case-lambda
                                         ((g$t$10021$15i0ov)
                                          ((case-lambda
                                             ((g$ls/false$10022$15i0ov)
                                              (if g$ls/false$10022$15i0ov
                                                (apply
                                                  (case-lambda
                                                    (()
                                                     (case-lambda
                                                       ((g$x$10023$15i0ov)
                                                        '#t))))
                                                  g$ls/false$10022$15i0ov)
                                                ((case-lambda
                                                   ((g$t$10024$15i0ov)
                                                    ((case-lambda
                                                       ((g$ls/false$10025$15i0ov)
                                                        (if (if g$ls/false$10025$15i0ov
                                                              (begin
                                                                '#f
                                                                (apply
                                                                  (case-lambda
                                                                    ((g$c$10026$15i0ov
                                                                       g$ver*$10027$15i0ov)
                                                                     (eq? (g$syntax->datum$7507$15i0ov
                                                                            g$c$10026$15i0ov)
                                                                          'and)))
                                                                  g$ls/false$10025$15i0ov))
                                                              '#f)
                                                          (apply
                                                            (case-lambda
                                                              ((g$c$10028$15i0ov
                                                                 g$ver*$10029$15i0ov)
                                                               ((case-lambda
                                                                  ((g$p*$10030$15i0ov)
                                                                   (case-lambda
                                                                     ((g$x$10031$15i0ov)
                                                                      (g$for-all$5359$15i0ov
                                                                        (case-lambda
                                                                          ((g$p$10032$15i0ov)
                                                                           (g$p$10032$15i0ov
                                                                             g$x$10031$15i0ov)))
                                                                        g$p*$10030$15i0ov)))))
                                                                (map g$version-pred$9997$15i0ov
                                                                     g$ver*$10029$15i0ov))))
                                                            g$ls/false$10025$15i0ov)
                                                          ((case-lambda
                                                             ((g$t$10033$15i0ov)
                                                              ((case-lambda
                                                                 ((g$ls/false$10034$15i0ov)
                                                                  (if (if g$ls/false$10034$15i0ov
                                                                        (begin
                                                                          '#f
                                                                          (apply
                                                                            (case-lambda
                                                                              ((g$c$10035$15i0ov
                                                                                 g$ver*$10036$15i0ov)
                                                                               (eq? (g$syntax->datum$7507$15i0ov
                                                                                      g$c$10035$15i0ov)
                                                                                    'or)))
                                                                            g$ls/false$10034$15i0ov))
                                                                        '#f)
                                                                    (apply
                                                                      (case-lambda
                                                                        ((g$c$10037$15i0ov
                                                                           g$ver*$10038$15i0ov)
                                                                         ((case-lambda
                                                                            ((g$p*$10039$15i0ov)
                                                                             (case-lambda
                                                                               ((g$x$10040$15i0ov)
                                                                                (g$exists$5360$15i0ov
                                                                                  (case-lambda
                                                                                    ((g$p$10041$15i0ov)
                                                                                     (g$p$10041$15i0ov
                                                                                       g$x$10040$15i0ov)))
                                                                                  g$p*$10039$15i0ov)))))
                                                                          (map g$version-pred$9997$15i0ov
                                                                               g$ver*$10038$15i0ov))))
                                                                      g$ls/false$10034$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$t$10042$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$ls/false$10043$15i0ov)
                                                                            (if (if g$ls/false$10043$15i0ov
                                                                                  (begin
                                                                                    '#f
                                                                                    (apply
                                                                                      (case-lambda
                                                                                        ((g$c$10044$15i0ov
                                                                                           g$ver$10045$15i0ov)
                                                                                         (eq? (g$syntax->datum$7507$15i0ov
                                                                                                g$c$10044$15i0ov)
                                                                                              'not)))
                                                                                      g$ls/false$10043$15i0ov))
                                                                                  '#f)
                                                                              (apply
                                                                                (case-lambda
                                                                                  ((g$c$10046$15i0ov
                                                                                     g$ver$10047$15i0ov)
                                                                                   ((case-lambda
                                                                                      ((g$p$10048$15i0ov)
                                                                                       (case-lambda
                                                                                         ((g$x$10049$15i0ov)
                                                                                          (not (g$p$10048$15i0ov
                                                                                                 g$x$10049$15i0ov))))))
                                                                                    (g$version-pred$9997$15i0ov
                                                                                      g$ver$10047$15i0ov))))
                                                                                g$ls/false$10043$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$t$10050$15i0ov)
                                                                                  ((case-lambda
                                                                                     ((g$ls/false$10051$15i0ov)
                                                                                      (if g$ls/false$10051$15i0ov
                                                                                        (apply
                                                                                          (case-lambda
                                                                                            ((g$sub*$10052$15i0ov)
                                                                                             ((case-lambda
                                                                                                ((g$p*$10053$15i0ov)
                                                                                                 (case-lambda
                                                                                                   ((g$x$10054$15i0ov)
                                                                                                    ((letrec ((g$f$10055$15i0ov
                                                                                                                (case-lambda
                                                                                                                  ((g$p*$10056$15i0ov
                                                                                                                     g$x$10057$15i0ov)
                                                                                                                   (if (null?
                                                                                                                         g$p*$10056$15i0ov)
                                                                                                                     '#t
                                                                                                                     (if (null?
                                                                                                                           g$x$10057$15i0ov)
                                                                                                                       '#f
                                                                                                                       (if ((car g$p*$10056$15i0ov)
                                                                                                                            (car g$x$10057$15i0ov))
                                                                                                                         (begin
                                                                                                                           '#f
                                                                                                                           (g$f$10055$15i0ov
                                                                                                                             (cdr g$p*$10056$15i0ov)
                                                                                                                             (cdr g$x$10057$15i0ov)))
                                                                                                                         '#f)))))))
                                                                                                       g$f$10055$15i0ov)
                                                                                                     g$p*$10053$15i0ov
                                                                                                     g$x$10054$15i0ov)))))
                                                                                              (map g$subversion-pred$9996$15i0ov
                                                                                                   g$sub*$10052$15i0ov))))
                                                                                          g$ls/false$10051$15i0ov)
                                                                                        ((case-lambda
                                                                                           ((g$t$10058$15i0ov)
                                                                                            ((case-lambda
                                                                                               ((g$ls/false$10059$15i0ov)
                                                                                                (if g$ls/false$10059$15i0ov
                                                                                                  (apply
                                                                                                    (case-lambda
                                                                                                      (()
                                                                                                       (g$syntax-violation$7504$15i0ov
                                                                                                         'import
                                                                                                         '"invalid version spec"
                                                                                                         g$spec$9994$15i0ov
                                                                                                         g$x*$10020$15i0ov)))
                                                                                                    g$ls/false$10059$15i0ov)
                                                                                                  (g$syntax-violation$7504$15i0ov
                                                                                                    '#f
                                                                                                    '"invalid syntax"
                                                                                                    g$t$10058$15i0ov))))
                                                                                             (g$syntax-dispatch$7395$15i0ov
                                                                                               g$t$10058$15i0ov
                                                                                               '_))))
                                                                                         g$t$10050$15i0ov))))
                                                                                   (g$syntax-dispatch$7395$15i0ov
                                                                                     g$t$10050$15i0ov
                                                                                     'each-any))))
                                                                               g$t$10042$15i0ov))))
                                                                         (g$syntax-dispatch$7395$15i0ov
                                                                           g$t$10042$15i0ov
                                                                           '(any any)))))
                                                                     g$t$10033$15i0ov))))
                                                               (g$syntax-dispatch$7395$15i0ov
                                                                 g$t$10033$15i0ov
                                                                 '(any .
                                                                       each-any)))))
                                                           g$t$10024$15i0ov))))
                                                     (g$syntax-dispatch$7395$15i0ov
                                                       g$t$10024$15i0ov
                                                       '(any . each-any)))))
                                                 g$t$10021$15i0ov))))
                                           (g$syntax-dispatch$7395$15i0ov
                                             g$t$10021$15i0ov
                                             '()))))
                                       g$x*$10020$15i0ov)))))
                         ((letrec ((g$f$9998$15i0ov
                                     (case-lambda
                                       ((g$x$9999$15i0ov)
                                        ((case-lambda
                                           ((g$t$10000$15i0ov)
                                            ((case-lambda
                                               ((g$ls/false$10001$15i0ov)
                                                (if g$ls/false$10001$15i0ov
                                                  (apply
                                                    (case-lambda
                                                      ((g$version-spec*$10002$15i0ov)
                                                       (values
                                                         '()
                                                         (g$version-pred$9997$15i0ov
                                                           g$version-spec*$10002$15i0ov))))
                                                    g$ls/false$10001$15i0ov)
                                                  ((case-lambda
                                                     ((g$t$10003$15i0ov)
                                                      ((case-lambda
                                                         ((g$ls/false$10004$15i0ov)
                                                          (if (if g$ls/false$10004$15i0ov
                                                                (begin
                                                                  '#f
                                                                  (apply
                                                                    (case-lambda
                                                                      ((g$x$10005$15i0ov
                                                                         g$x*$10006$15i0ov)
                                                                       (g$idsyn?$9893$15i0ov
                                                                         g$x$10005$15i0ov)))
                                                                    g$ls/false$10004$15i0ov))
                                                                '#f)
                                                            (apply
                                                              (case-lambda
                                                                ((g$x$10007$15i0ov
                                                                   g$x*$10008$15i0ov)
                                                                 (call-with-values
                                                                   (case-lambda
                                                                     (()
                                                                      (g$f$9998$15i0ov
                                                                        g$x*$10008$15i0ov)))
                                                                   (case-lambda
                                                                     ((g$name$10011$15i0ov
                                                                        g$pred$10012$15i0ov)
                                                                      ((case-lambda
                                                                         ((g$pred$10013$15i0ov
                                                                            g$name$10014$15i0ov)
                                                                          (values
                                                                            (cons
                                                                              (g$syntax->datum$7507$15i0ov
                                                                                g$x$10007$15i0ov)
                                                                              g$name$10014$15i0ov)
                                                                            g$pred$10013$15i0ov)))
                                                                       g$pred$10012$15i0ov
                                                                       g$name$10011$15i0ov))))))
                                                              g$ls/false$10004$15i0ov)
                                                            ((case-lambda
                                                               ((g$t$10015$15i0ov)
                                                                ((case-lambda
                                                                   ((g$ls/false$10016$15i0ov)
                                                                    (if g$ls/false$10016$15i0ov
                                                                      (apply
                                                                        (case-lambda
                                                                          (()
                                                                           (values
                                                                             '()
                                                                             (case-lambda
                                                                               ((g$x$10017$15i0ov)
                                                                                '#t)))))
                                                                        g$ls/false$10016$15i0ov)
                                                                      ((case-lambda
                                                                         ((g$t$10018$15i0ov)
                                                                          ((case-lambda
                                                                             ((g$ls/false$10019$15i0ov)
                                                                              (if g$ls/false$10019$15i0ov
                                                                                (apply
                                                                                  (case-lambda
                                                                                    (()
                                                                                     (g$syntax-violation$7504$15i0ov
                                                                                       '#f
                                                                                       '"invalid import spec"
                                                                                       g$spec$9994$15i0ov)))
                                                                                  g$ls/false$10019$15i0ov)
                                                                                (g$syntax-violation$7504$15i0ov
                                                                                  '#f
                                                                                  '"invalid syntax"
                                                                                  g$t$10018$15i0ov))))
                                                                           (g$syntax-dispatch$7395$15i0ov
                                                                             g$t$10018$15i0ov
                                                                             '_))))
                                                                       g$t$10015$15i0ov))))
                                                                 (g$syntax-dispatch$7395$15i0ov
                                                                   g$t$10015$15i0ov
                                                                   '()))))
                                                             g$t$10003$15i0ov))))
                                                       (g$syntax-dispatch$7395$15i0ov
                                                         g$t$10003$15i0ov
                                                         '(any . any)))))
                                                   g$t$10000$15i0ov))))
                                             (g$syntax-dispatch$7395$15i0ov
                                               g$t$10000$15i0ov
                                               '(each-any)))))
                                         g$x$9999$15i0ov)))))
                            g$f$9998$15i0ov)
                          g$spec$9994$15i0ov)))))
                  (g$import-library$9901$15i0ov
                    (case-lambda
                      ((g$spec*$9986$15i0ov)
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-library-name$9900$15i0ov
                              g$spec*$9986$15i0ov)))
                         (case-lambda
                           ((g$name$9989$15i0ov g$pred$9990$15i0ov)
                            ((case-lambda
                               ((g$pred$9991$15i0ov g$name$9992$15i0ov)
                                (begin
                                  (if (null? g$name$9992$15i0ov)
                                    (g$syntax-violation$7504$15i0ov
                                      'import
                                      '"empty library name"
                                      g$spec*$9986$15i0ov)
                                    (void))
                                  ((case-lambda
                                     ((g$lib$9993$15i0ov)
                                      (begin
                                        (if (not g$lib$9993$15i0ov)
                                          (g$syntax-violation$7504$15i0ov
                                            'import
                                            '"cannot find library with required name"
                                            g$name$9992$15i0ov)
                                          (void))
                                        (if (not (g$pred$9991$15i0ov
                                                   (g$library-version$6885$15i0ov
                                                     g$lib$9993$15i0ov)))
                                          (g$syntax-violation$7504$15i0ov
                                            'import
                                            '"library does not satisfy version specification"
                                            g$spec*$9986$15i0ov
                                            g$lib$9993$15i0ov)
                                          (void))
                                        ((g$imp-collector$7449$15i0ov)
                                         g$lib$9993$15i0ov)
                                        (g$library-subst$6889$15i0ov
                                          g$lib$9993$15i0ov))))
                                   (g$find-library-by-name$6925$15i0ov
                                     g$name$9992$15i0ov)))))
                             g$pred$9990$15i0ov
                             g$name$9989$15i0ov)))))))
                  (g$get-import$9902$15i0ov
                    (case-lambda
                      ((g$spec$9915$15i0ov)
                       ((case-lambda
                          ((g$t$9916$15i0ov)
                           ((case-lambda
                              ((g$ls/false$9917$15i0ov)
                               (if (if g$ls/false$9917$15i0ov
                                     (begin
                                       '#f
                                       (apply
                                         (case-lambda
                                           ((g$x$9918$15i0ov g$x*$9919$15i0ov)
                                            (not (memq
                                                   (g$syntax->datum$7507$15i0ov
                                                     g$x$9918$15i0ov)
                                                   '(for rename
                                                         except
                                                         only
                                                         prefix
                                                         library)))))
                                         g$ls/false$9917$15i0ov))
                                     '#f)
                                 (apply
                                   (case-lambda
                                     ((g$x$9920$15i0ov g$x*$9921$15i0ov)
                                      (g$import-library$9901$15i0ov
                                        (cons
                                          g$x$9920$15i0ov
                                          g$x*$9921$15i0ov))))
                                   g$ls/false$9917$15i0ov)
                                 ((case-lambda
                                    ((g$t$9922$15i0ov)
                                     ((case-lambda
                                        ((g$ls/false$9923$15i0ov)
                                         (if (if g$ls/false$9923$15i0ov
                                               (begin
                                                 '#f
                                                 (apply
                                                   (case-lambda
                                                     ((g$rename$9924$15i0ov
                                                        g$isp$9925$15i0ov
                                                        g$old*$9926$15i0ov
                                                        g$new*$9927$15i0ov)
                                                      (if (eq? (g$syntax->datum$7507$15i0ov
                                                                 g$rename$9924$15i0ov)
                                                               'rename)
                                                        (if (g$for-all$5359$15i0ov
                                                              g$idsyn?$9893$15i0ov
                                                              g$old*$9926$15i0ov)
                                                          (begin
                                                            '#f
                                                            (g$for-all$5359$15i0ov
                                                              g$idsyn?$9893$15i0ov
                                                              g$new*$9927$15i0ov))
                                                          '#f)
                                                        '#f)))
                                                   g$ls/false$9923$15i0ov))
                                               '#f)
                                           (apply
                                             (case-lambda
                                               ((g$rename$9928$15i0ov
                                                  g$isp$9929$15i0ov
                                                  g$old*$9930$15i0ov
                                                  g$new*$9931$15i0ov)
                                                ((case-lambda
                                                   ((g$subst$9932$15i0ov
                                                      g$old*$9933$15i0ov
                                                      g$new*$9934$15i0ov)
                                                    ((case-lambda
                                                       ((g$old-label*$9935$15i0ov)
                                                        ((case-lambda
                                                           ((g$subst$9936$15i0ov)
                                                            (g$merge-substs$9895$15i0ov
                                                              (map cons
                                                                   g$new*$9934$15i0ov
                                                                   g$old-label*$9935$15i0ov)
                                                              g$subst$9936$15i0ov)))
                                                         (g$rem*$9898$15i0ov
                                                           g$old*$9933$15i0ov
                                                           g$subst$9932$15i0ov))))
                                                     (g$find*$9897$15i0ov
                                                       g$old*$9933$15i0ov
                                                       g$subst$9932$15i0ov))))
                                                 (g$get-import$9902$15i0ov
                                                   g$isp$9929$15i0ov)
                                                 (map g$syntax->datum$7507$15i0ov
                                                      g$old*$9930$15i0ov)
                                                 (map g$syntax->datum$7507$15i0ov
                                                      g$new*$9931$15i0ov))))
                                             g$ls/false$9923$15i0ov)
                                           ((case-lambda
                                              ((g$t$9937$15i0ov)
                                               ((case-lambda
                                                  ((g$ls/false$9938$15i0ov)
                                                   (if (if g$ls/false$9938$15i0ov
                                                         (begin
                                                           '#f
                                                           (apply
                                                             (case-lambda
                                                               ((g$except$9939$15i0ov
                                                                  g$isp$9940$15i0ov
                                                                  g$sym*$9941$15i0ov)
                                                                (if (eq? (g$syntax->datum$7507$15i0ov
                                                                           g$except$9939$15i0ov)
                                                                         'except)
                                                                  (begin
                                                                    '#f
                                                                    (g$for-all$5359$15i0ov
                                                                      g$idsyn?$9893$15i0ov
                                                                      g$sym*$9941$15i0ov))
                                                                  '#f)))
                                                             g$ls/false$9938$15i0ov))
                                                         '#f)
                                                     (apply
                                                       (case-lambda
                                                         ((g$except$9942$15i0ov
                                                            g$isp$9943$15i0ov
                                                            g$sym*$9944$15i0ov)
                                                          ((case-lambda
                                                             ((g$subst$9945$15i0ov)
                                                              (g$rem*$9898$15i0ov
                                                                (map g$syntax->datum$7507$15i0ov
                                                                     g$sym*$9944$15i0ov)
                                                                g$subst$9945$15i0ov)))
                                                           (g$get-import$9902$15i0ov
                                                             g$isp$9943$15i0ov))))
                                                       g$ls/false$9938$15i0ov)
                                                     ((case-lambda
                                                        ((g$t$9946$15i0ov)
                                                         ((case-lambda
                                                            ((g$ls/false$9947$15i0ov)
                                                             (if (if g$ls/false$9947$15i0ov
                                                                   (begin
                                                                     '#f
                                                                     (apply
                                                                       (case-lambda
                                                                         ((g$only$9948$15i0ov
                                                                            g$isp$9949$15i0ov
                                                                            g$sym*$9950$15i0ov)
                                                                          (if (eq? (g$syntax->datum$7507$15i0ov
                                                                                     g$only$9948$15i0ov)
                                                                                   'only)
                                                                            (begin
                                                                              '#f
                                                                              (g$for-all$5359$15i0ov
                                                                                g$idsyn?$9893$15i0ov
                                                                                g$sym*$9950$15i0ov))
                                                                            '#f)))
                                                                       g$ls/false$9947$15i0ov))
                                                                   '#f)
                                                               (apply
                                                                 (case-lambda
                                                                   ((g$only$9951$15i0ov
                                                                      g$isp$9952$15i0ov
                                                                      g$sym*$9953$15i0ov)
                                                                    ((case-lambda
                                                                       ((g$subst$9954$15i0ov
                                                                          g$sym*$9955$15i0ov)
                                                                        ((case-lambda
                                                                           ((g$sym*$9956$15i0ov)
                                                                            ((case-lambda
                                                                               ((g$lab*$9957$15i0ov)
                                                                                (map cons
                                                                                     g$sym*$9956$15i0ov
                                                                                     g$lab*$9957$15i0ov)))
                                                                             (g$find*$9897$15i0ov
                                                                               g$sym*$9956$15i0ov
                                                                               g$subst$9954$15i0ov))))
                                                                         (g$remove-dups$9899$15i0ov
                                                                           g$sym*$9955$15i0ov))))
                                                                     (g$get-import$9902$15i0ov
                                                                       g$isp$9952$15i0ov)
                                                                     (map g$syntax->datum$7507$15i0ov
                                                                          g$sym*$9953$15i0ov))))
                                                                 g$ls/false$9947$15i0ov)
                                                               ((case-lambda
                                                                  ((g$t$9958$15i0ov)
                                                                   ((case-lambda
                                                                      ((g$ls/false$9959$15i0ov)
                                                                       (if (if g$ls/false$9959$15i0ov
                                                                             (begin
                                                                               '#f
                                                                               (apply
                                                                                 (case-lambda
                                                                                   ((g$prefix$9960$15i0ov
                                                                                      g$isp$9961$15i0ov
                                                                                      g$p$9962$15i0ov)
                                                                                    (if (eq? (g$syntax->datum$7507$15i0ov
                                                                                               g$prefix$9960$15i0ov)
                                                                                             'prefix)
                                                                                      (begin
                                                                                        '#f
                                                                                        (g$idsyn?$9893$15i0ov
                                                                                          g$p$9962$15i0ov))
                                                                                      '#f)))
                                                                                 g$ls/false$9959$15i0ov))
                                                                             '#f)
                                                                         (apply
                                                                           (case-lambda
                                                                             ((g$prefix$9963$15i0ov
                                                                                g$isp$9964$15i0ov
                                                                                g$p$9965$15i0ov)
                                                                              ((case-lambda
                                                                                 ((g$subst$9966$15i0ov
                                                                                    g$prefix$9967$15i0ov)
                                                                                  (map (case-lambda
                                                                                         ((g$x$9968$15i0ov)
                                                                                          (cons
                                                                                            (string->symbol
                                                                                              (string-append
                                                                                                g$prefix$9967$15i0ov
                                                                                                (symbol->string
                                                                                                  (car g$x$9968$15i0ov))))
                                                                                            (cdr g$x$9968$15i0ov))))
                                                                                       g$subst$9966$15i0ov)))
                                                                               (g$get-import$9902$15i0ov
                                                                                 g$isp$9964$15i0ov)
                                                                               (symbol->string
                                                                                 (g$syntax->datum$7507$15i0ov
                                                                                   g$p$9965$15i0ov)))))
                                                                           g$ls/false$9959$15i0ov)
                                                                         ((case-lambda
                                                                            ((g$t$9969$15i0ov)
                                                                             ((case-lambda
                                                                                ((g$ls/false$9970$15i0ov)
                                                                                 (if (if g$ls/false$9970$15i0ov
                                                                                       (begin
                                                                                         '#f
                                                                                         (apply
                                                                                           (case-lambda
                                                                                             ((g$library$9971$15i0ov
                                                                                                g$spec*$9972$15i0ov)
                                                                                              (eq? (g$syntax->datum$7507$15i0ov
                                                                                                     g$library$9971$15i0ov)
                                                                                                   'library)))
                                                                                           g$ls/false$9970$15i0ov))
                                                                                       '#f)
                                                                                   (apply
                                                                                     (case-lambda
                                                                                       ((g$library$9973$15i0ov
                                                                                          g$spec*$9974$15i0ov)
                                                                                        (g$import-library$9901$15i0ov
                                                                                          g$spec*$9974$15i0ov)))
                                                                                     g$ls/false$9970$15i0ov)
                                                                                   ((case-lambda
                                                                                      ((g$t$9975$15i0ov)
                                                                                       ((case-lambda
                                                                                          ((g$ls/false$9976$15i0ov)
                                                                                           (if (if g$ls/false$9976$15i0ov
                                                                                                 (begin
                                                                                                   '#f
                                                                                                   (apply
                                                                                                     (case-lambda
                                                                                                       ((g$for$9977$15i0ov
                                                                                                          g$isp$9978$15i0ov
                                                                                                          g$rest$9979$15i0ov)
                                                                                                        (eq? (g$syntax->datum$7507$15i0ov
                                                                                                               g$for$9977$15i0ov)
                                                                                                             'for)))
                                                                                                     g$ls/false$9976$15i0ov))
                                                                                                 '#f)
                                                                                             (apply
                                                                                               (case-lambda
                                                                                                 ((g$for$9980$15i0ov
                                                                                                    g$isp$9981$15i0ov
                                                                                                    g$rest$9982$15i0ov)
                                                                                                  (g$get-import$9902$15i0ov
                                                                                                    g$isp$9981$15i0ov)))
                                                                                               g$ls/false$9976$15i0ov)
                                                                                             ((case-lambda
                                                                                                ((g$t$9983$15i0ov)
                                                                                                 ((case-lambda
                                                                                                    ((g$ls/false$9984$15i0ov)
                                                                                                     (if g$ls/false$9984$15i0ov
                                                                                                       (apply
                                                                                                         (case-lambda
                                                                                                           ((g$spec$9985$15i0ov)
                                                                                                            (g$syntax-violation$7504$15i0ov
                                                                                                              'import
                                                                                                              '"invalid import spec"
                                                                                                              g$spec$9985$15i0ov)))
                                                                                                         g$ls/false$9984$15i0ov)
                                                                                                       (g$syntax-violation$7504$15i0ov
                                                                                                         '#f
                                                                                                         '"invalid syntax"
                                                                                                         g$t$9983$15i0ov))))
                                                                                                  (g$syntax-dispatch$7395$15i0ov
                                                                                                    g$t$9983$15i0ov
                                                                                                    'any))))
                                                                                              g$t$9975$15i0ov))))
                                                                                        (g$syntax-dispatch$7395$15i0ov
                                                                                          g$t$9975$15i0ov
                                                                                          '(any any
                                                                                                .
                                                                                                any)))))
                                                                                    g$t$9969$15i0ov))))
                                                                              (g$syntax-dispatch$7395$15i0ov
                                                                                g$t$9969$15i0ov
                                                                                '(any each-any)))))
                                                                          g$t$9958$15i0ov))))
                                                                    (g$syntax-dispatch$7395$15i0ov
                                                                      g$t$9958$15i0ov
                                                                      '(any any
                                                                            any)))))
                                                                g$t$9946$15i0ov))))
                                                          (g$syntax-dispatch$7395$15i0ov
                                                            g$t$9946$15i0ov
                                                            '(any any
                                                                  .
                                                                  each-any)))))
                                                      g$t$9937$15i0ov))))
                                                (g$syntax-dispatch$7395$15i0ov
                                                  g$t$9937$15i0ov
                                                  '(any any . each-any)))))
                                            g$t$9922$15i0ov))))
                                      (g$syntax-dispatch$7395$15i0ov
                                        g$t$9922$15i0ov
                                        '(any any . #(each (any any)))))))
                                  g$t$9916$15i0ov))))
                            (g$syntax-dispatch$7395$15i0ov
                              g$t$9916$15i0ov
                              '(any . each-any)))))
                        g$spec$9915$15i0ov))))
                  (g$add-imports!$9903$15i0ov
                    (case-lambda
                      ((g$imp$9907$15i0ov g$h$9908$15i0ov)
                       ((case-lambda
                          ((g$subst$9909$15i0ov)
                           (for-each
                             (case-lambda
                               ((g$x$9910$15i0ov)
                                ((case-lambda
                                   ((g$name$9911$15i0ov g$label$9912$15i0ov)
                                    ((case-lambda
                                       ((g$t$9913$15i0ov)
                                        (if g$t$9913$15i0ov
                                          ((case-lambda
                                             ((g$l$9914$15i0ov)
                                              (if (not (eq? g$l$9914$15i0ov
                                                            g$label$9912$15i0ov))
                                                (g$dup-error$9894$15i0ov
                                                  g$name$9911$15i0ov)
                                                (void))))
                                           g$t$9913$15i0ov)
                                          (g$hashtable-set!$5156$15i0ov
                                            g$h$9908$15i0ov
                                            g$name$9911$15i0ov
                                            g$label$9912$15i0ov))))
                                     (g$hashtable-ref$5155$15i0ov
                                       g$h$9908$15i0ov
                                       g$name$9911$15i0ov
                                       '#f))))
                                 (car g$x$9910$15i0ov)
                                 (cdr g$x$9910$15i0ov))))
                             g$subst$9909$15i0ov)))
                        (g$get-import$9902$15i0ov g$imp$9907$15i0ov))))))
          ((letrec ((g$f$9904$15i0ov
                      (case-lambda
                        ((g$imp*$9905$15i0ov g$h$9906$15i0ov)
                         (if (null? g$imp*$9905$15i0ov)
                           (hashtable-entries g$h$9906$15i0ov)
                           (begin
                             (g$add-imports!$9903$15i0ov
                               (car g$imp*$9905$15i0ov)
                               g$h$9906$15i0ov)
                             (g$f$9904$15i0ov
                               (cdr g$imp*$9905$15i0ov)
                               g$h$9906$15i0ov)))))))
             g$f$9904$15i0ov)
           g$imp*$9892$15i0ov
           (g$make-eq-hashtable$5152$15i0ov))))))
   (g$make-top-rib$7445$15i0ov
     g$make-top-rib$10884$15i0ov
     (case-lambda
       ((g$names$10154$15i0ov g$labels$10155$15i0ov)
        ((case-lambda
           ((g$rib$10156$15i0ov)
            (begin
              (vector-for-each
                (case-lambda
                  ((g$name$10157$15i0ov g$label$10158$15i0ov)
                   (begin
                     (if (not (symbol? g$name$10157$15i0ov))
                       (error
                         'make-top-rib
                         '"BUG: not a symbol"
                         g$name$10157$15i0ov)
                       (void))
                     (g$extend-rib!$7081$15i0ov
                       g$rib$10156$15i0ov
                       (g$make-stx$7090$15i0ov
                         g$name$10157$15i0ov
                         g$top-mark*$7059$15i0ov
                         '()
                         '())
                       g$label$10158$15i0ov))))
                g$names$10154$15i0ov
                g$labels$10155$15i0ov)
              g$rib$10156$15i0ov)))
         (g$make-empty-rib$7080$15i0ov)))))
   (g$make-collector$7446$15i0ov
     g$make-collector$10885$15i0ov
     (case-lambda
       (()
        ((case-lambda
           ((g$ls$10159$15i0ov)
            (case-lambda
              (() g$ls$10159$15i0ov)
              ((g$x$10160$15i0ov)
               (set! g$ls$10159$15i0ov
                 (g$set-cons$7056$15i0ov
                   g$x$10160$15i0ov
                   g$ls$10159$15i0ov))))))
         '()))))
   (g$inv-collector$7447$15i0ov
     g$inv-collector$10886$15i0ov
     (g$make-parameter$6384$15i0ov
       (case-lambda
         (g$args$10161$15i0ov
          (assertion-violation 'inv-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10162$15i0ov)
          (begin
            (if (not (procedure? g$x$10162$15i0ov))
              (assertion-violation
                'inv-collector
                '"BUG: not a procedure"
                g$x$10162$15i0ov)
              (void))
            g$x$10162$15i0ov)))))
   (g$vis-collector$7448$15i0ov
     g$vis-collector$10887$15i0ov
     (g$make-parameter$6384$15i0ov
       (case-lambda
         (g$args$10163$15i0ov
          (assertion-violation 'vis-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10164$15i0ov)
          (begin
            (if (not (procedure? g$x$10164$15i0ov))
              (assertion-violation
                'vis-collector
                '"BUG: not a procedure"
                g$x$10164$15i0ov)
              (void))
            g$x$10164$15i0ov)))))
   (g$imp-collector$7449$15i0ov
     g$imp-collector$10888$15i0ov
     (g$make-parameter$6384$15i0ov
       (case-lambda
         (g$args$10165$15i0ov
          (assertion-violation 'imp-collector '"BUG: not initialized")))
       (case-lambda
         ((g$x$10166$15i0ov)
          (begin
            (if (not (procedure? g$x$10166$15i0ov))
              (assertion-violation
                'imp-collector
                '"BUG: not a procedure"
                g$x$10166$15i0ov)
              (void))
            g$x$10166$15i0ov)))))
   (g$chi-library-internal$7450$15i0ov
     g$chi-library-internal$10889$15i0ov
     (case-lambda
       ((g$e*$10167$15i0ov g$rib$10168$15i0ov g$top?$10169$15i0ov)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7439$15i0ov
               g$e*$10167$15i0ov
               '()
               '()
               '()
               '()
               '()
               '()
               g$rib$10168$15i0ov
               g$top?$10169$15i0ov)))
          (case-lambda
            ((g$e*$10177$15i0ov
               g$r$10178$15i0ov
               g$mr$10179$15i0ov
               g$lex*$10180$15i0ov
               g$rhs*$10181$15i0ov
               g$mod**$10182$15i0ov
               g$_kwd*$10183$15i0ov)
             ((case-lambda
                ((g$_kwd*$10184$15i0ov
                   g$mod**$10185$15i0ov
                   g$rhs*$10186$15i0ov
                   g$lex*$10187$15i0ov
                   g$mr$10188$15i0ov
                   g$r$10189$15i0ov
                   g$e*$10190$15i0ov)
                 (values
                   (append
                     (apply append (reverse g$mod**$10185$15i0ov))
                     g$e*$10190$15i0ov)
                   g$r$10189$15i0ov
                   g$mr$10188$15i0ov
                   (reverse g$lex*$10187$15i0ov)
                   (reverse g$rhs*$10186$15i0ov))))
              g$_kwd*$10183$15i0ov
              g$mod**$10182$15i0ov
              g$rhs*$10181$15i0ov
              g$lex*$10180$15i0ov
              g$mr$10179$15i0ov
              g$r$10178$15i0ov
              g$e*$10177$15i0ov)))))))
   (g$chi-interaction-expr$7451$15i0ov
     g$chi-interaction-expr$10890$15i0ov
     (case-lambda
       ((g$e$10191$15i0ov g$rib$10192$15i0ov g$r$10193$15i0ov)
        (call-with-values
          (case-lambda
            (()
             (g$chi-body*$7439$15i0ov
               (list g$e$10191$15i0ov)
               g$r$10193$15i0ov
               g$r$10193$15i0ov
               '()
               '()
               '()
               '()
               g$rib$10192$15i0ov
               '#t)))
          (case-lambda
            ((g$e*$10201$15i0ov
               g$r$10202$15i0ov
               g$mr$10203$15i0ov
               g$lex*$10204$15i0ov
               g$rhs*$10205$15i0ov
               g$mod**$10206$15i0ov
               g$_kwd*$10207$15i0ov)
             ((case-lambda
                ((g$_kwd*$10208$15i0ov
                   g$mod**$10209$15i0ov
                   g$rhs*$10210$15i0ov
                   g$lex*$10211$15i0ov
                   g$mr$10212$15i0ov
                   g$r$10213$15i0ov
                   g$e*$10214$15i0ov)
                 ((case-lambda
                    ((g$e*$10215$15i0ov)
                     ((case-lambda
                        ((g$e$10216$15i0ov)
                         (values g$e$10216$15i0ov g$r$10213$15i0ov)))
                      (if (null? g$e*$10215$15i0ov)
                        (g$build-void$7052$15i0ov)
                        (if (null? (cdr g$e*$10215$15i0ov))
                          (car g$e*$10215$15i0ov)
                          (g$build-sequence$7051$15i0ov
                            '#f
                            g$e*$10215$15i0ov))))))
                  (g$expand-interaction-rhs*/init*$7420$15i0ov
                    (reverse g$lex*$10211$15i0ov)
                    (reverse g$rhs*$10210$15i0ov)
                    (append
                      (apply append (reverse g$mod**$10209$15i0ov))
                      g$e*$10214$15i0ov)
                    g$r$10213$15i0ov
                    g$mr$10212$15i0ov))))
              g$_kwd*$10207$15i0ov
              g$mod**$10206$15i0ov
              g$rhs*$10205$15i0ov
              g$lex*$10204$15i0ov
              g$mr$10203$15i0ov
              g$r$10202$15i0ov
              g$e*$10201$15i0ov)))))))
   (g$library-body-expander$7452$15i0ov
     g$library-body-expander$10891$15i0ov
     (case-lambda
       ((g$name$10217$15i0ov
          g$exp*$10218$15i0ov
          g$imp*$10219$15i0ov
          g$b*$10220$15i0ov
          g$top?$10221$15i0ov)
        (letrec* ((g$itc$10222$15i0ov (g$make-collector$7446$15i0ov)))
          ((case-lambda
             ((g$imp-collector$10227$15i0ov
                g$top-level-context$10228$15i0ov
                g$imp-collector$10229$15i0ov
                g$top-level-context$10230$15i0ov)
              ((case-lambda
                 ((g$swap$10231$15i0ov)
                  (dynamic-wind
                    g$swap$10231$15i0ov
                    (case-lambda
                      (()
                       (call-with-values
                         (case-lambda
                           (()
                            (g$parse-exports$7441$15i0ov g$exp*$10218$15i0ov)))
                         (case-lambda
                           ((g$exp-int*$10234$15i0ov g$exp-ext*$10235$15i0ov)
                            ((case-lambda
                               ((g$exp-ext*$10236$15i0ov
                                  g$exp-int*$10237$15i0ov)
                                (call-with-values
                                  (case-lambda
                                    (()
                                     (g$parse-import-spec*$7444$15i0ov
                                       g$imp*$10219$15i0ov)))
                                  (case-lambda
                                    ((g$subst-names$10240$15i0ov
                                       g$subst-labels$10241$15i0ov)
                                     ((case-lambda
                                        ((g$subst-labels$10242$15i0ov
                                           g$subst-names$10243$15i0ov)
                                         ((case-lambda
                                            ((g$rib$10244$15i0ov)
                                             ((case-lambda
                                                ((g$b*$10245$15i0ov
                                                   g$rtc$10246$15i0ov
                                                   g$vtc$10247$15i0ov)
                                                 ((case-lambda
                                                    ((g$inv-collector$10252$15i0ov
                                                       g$vis-collector$10253$15i0ov
                                                       g$inv-collector$10254$15i0ov
                                                       g$vis-collector$10255$15i0ov)
                                                     ((case-lambda
                                                        ((g$swap$10256$15i0ov)
                                                         (dynamic-wind
                                                           g$swap$10256$15i0ov
                                                           (case-lambda
                                                             (()
                                                              (call-with-values
                                                                (case-lambda
                                                                  (()
                                                                   (g$chi-library-internal$7450$15i0ov
                                                                     g$b*$10245$15i0ov
                                                                     g$rib$10244$15i0ov
                                                                     g$top?$10221$15i0ov)))
                                                                (case-lambda
                                                                  ((g$init*$10262$15i0ov
                                                                     g$r$10263$15i0ov
                                                                     g$mr$10264$15i0ov
                                                                     g$lex*$10265$15i0ov
                                                                     g$rhs*$10266$15i0ov)
                                                                   ((case-lambda
                                                                      ((g$rhs*$10267$15i0ov
                                                                         g$lex*$10268$15i0ov
                                                                         g$mr$10269$15i0ov
                                                                         g$r$10270$15i0ov
                                                                         g$init*$10271$15i0ov)
                                                                       (begin
                                                                         (g$seal-rib!$7083$15i0ov
                                                                           g$rib$10244$15i0ov)
                                                                         ((case-lambda
                                                                            ((g$init*$10272$15i0ov)
                                                                             ((case-lambda
                                                                                ((g$rhs*$10273$15i0ov)
                                                                                 ((case-lambda
                                                                                    (()
                                                                                     (begin
                                                                                       (g$unseal-rib!$7084$15i0ov
                                                                                         g$rib$10244$15i0ov)
                                                                                       ((case-lambda
                                                                                          ((g$loc*$10274$15i0ov
                                                                                             g$export-subst$10275$15i0ov)
                                                                                           (letrec* ((g$errstr$10276$15i0ov
                                                                                                       '"attempt to export mutated variable"))
                                                                                             (call-with-values
                                                                                               (case-lambda
                                                                                                 (()
                                                                                                  (g$make-export-env/macros$7493$15i0ov
                                                                                                    g$lex*$10268$15i0ov
                                                                                                    g$loc*$10274$15i0ov
                                                                                                    g$r$10270$15i0ov)))
                                                                                               (case-lambda
                                                                                                 ((g$export-env$10280$15i0ov
                                                                                                    g$global*$10281$15i0ov
                                                                                                    g$macro*$10282$15i0ov)
                                                                                                  ((case-lambda
                                                                                                     ((g$macro*$10283$15i0ov
                                                                                                        g$global*$10284$15i0ov
                                                                                                        g$export-env$10285$15i0ov)
                                                                                                      (begin
                                                                                                        (for-each
                                                                                                          (case-lambda
                                                                                                            ((g$s$10286$15i0ov)
                                                                                                             ((case-lambda
                                                                                                                ((g$name$10287$15i0ov
                                                                                                                   g$label$10288$15i0ov)
                                                                                                                 ((case-lambda
                                                                                                                    ((g$p$10289$15i0ov)
                                                                                                                     (if g$p$10289$15i0ov
                                                                                                                       ((case-lambda
                                                                                                                          ((g$b$10290$15i0ov)
                                                                                                                           ((case-lambda
                                                                                                                              ((g$type$10291$15i0ov)
                                                                                                                               (if (eq? g$type$10291$15i0ov
                                                                                                                                        'mutable)
                                                                                                                                 (g$syntax-violation$7504$15i0ov
                                                                                                                                   'export
                                                                                                                                   g$errstr$10276$15i0ov
                                                                                                                                   g$name$10287$15i0ov)
                                                                                                                                 (void))))
                                                                                                                            (car g$b$10290$15i0ov))))
                                                                                                                        (cdr g$p$10289$15i0ov))
                                                                                                                       (void))))
                                                                                                                  (assq
                                                                                                                    g$label$10288$15i0ov
                                                                                                                    g$export-env$10285$15i0ov))))
                                                                                                              (car g$s$10286$15i0ov)
                                                                                                              (cdr g$s$10286$15i0ov))))
                                                                                                          g$export-subst$10275$15i0ov)
                                                                                                        ((case-lambda
                                                                                                           ((g$invoke-body$10292$15i0ov
                                                                                                              g$invoke-definitions$10293$15i0ov)
                                                                                                            (values
                                                                                                              (g$itc$10222$15i0ov)
                                                                                                              (g$rtc$10246$15i0ov)
                                                                                                              (g$vtc$10247$15i0ov)
                                                                                                              (g$build-sequence$7051$15i0ov
                                                                                                                '#f
                                                                                                                (append
                                                                                                                  g$invoke-definitions$10293$15i0ov
                                                                                                                  (list
                                                                                                                    g$invoke-body$10292$15i0ov)))
                                                                                                              g$macro*$10283$15i0ov
                                                                                                              g$export-subst$10275$15i0ov
                                                                                                              g$export-env$10285$15i0ov)))
                                                                                                         (g$build-library-letrec*$7055$15i0ov
                                                                                                           '#f
                                                                                                           g$name$10217$15i0ov
                                                                                                           g$lex*$10268$15i0ov
                                                                                                           g$loc*$10274$15i0ov
                                                                                                           g$rhs*$10273$15i0ov
                                                                                                           (if (null?
                                                                                                                 g$init*$10272$15i0ov)
                                                                                                             (g$build-void$7052$15i0ov)
                                                                                                             (g$build-sequence$7051$15i0ov
                                                                                                               '#f
                                                                                                               g$init*$10272$15i0ov)))
                                                                                                         (map g$build-global-define$7047$15i0ov
                                                                                                              (map cdr
                                                                                                                   g$global*$10284$15i0ov))))))
                                                                                                   g$macro*$10282$15i0ov
                                                                                                   g$global*$10281$15i0ov
                                                                                                   g$export-env$10280$15i0ov)))))))
                                                                                        (map g$gen-global$7062$15i0ov
                                                                                             g$lex*$10268$15i0ov)
                                                                                        (g$make-export-subst$7492$15i0ov
                                                                                          g$exp-int*$10237$15i0ov
                                                                                          g$exp-ext*$10236$15i0ov
                                                                                          g$rib$10244$15i0ov))))))))
                                                                              (g$chi-rhs*$7421$15i0ov
                                                                                g$rhs*$10267$15i0ov
                                                                                g$r$10270$15i0ov
                                                                                g$mr$10269$15i0ov))))
                                                                          (g$chi-expr*$7411$15i0ov
                                                                            g$init*$10271$15i0ov
                                                                            g$r$10270$15i0ov
                                                                            g$mr$10269$15i0ov)))))
                                                                    g$rhs*$10266$15i0ov
                                                                    g$lex*$10265$15i0ov
                                                                    g$mr$10264$15i0ov
                                                                    g$r$10263$15i0ov
                                                                    g$init*$10262$15i0ov))))))
                                                           g$swap$10256$15i0ov)))
                                                      (case-lambda
                                                        (()
                                                         (begin
                                                           ((case-lambda
                                                              ((g$t$10294$15i0ov)
                                                               (begin
                                                                 (g$inv-collector$10252$15i0ov
                                                                   g$inv-collector$10254$15i0ov)
                                                                 (set! g$inv-collector$10254$15i0ov
                                                                   g$t$10294$15i0ov))))
                                                            (g$inv-collector$10252$15i0ov))
                                                           ((case-lambda
                                                              ((g$t$10295$15i0ov)
                                                               (begin
                                                                 (g$vis-collector$10253$15i0ov
                                                                   g$vis-collector$10255$15i0ov)
                                                                 (set! g$vis-collector$10255$15i0ov
                                                                   g$t$10295$15i0ov))))
                                                            (g$vis-collector$10253$15i0ov))))))))
                                                  g$inv-collector$7447$15i0ov
                                                  g$vis-collector$7448$15i0ov
                                                  g$rtc$10246$15i0ov
                                                  g$vtc$10247$15i0ov)))
                                              (map (case-lambda
                                                     ((g$x$10296$15i0ov)
                                                      (g$make-stx$7090$15i0ov
                                                        g$x$10296$15i0ov
                                                        g$top-mark*$7059$15i0ov
                                                        (list
                                                          g$rib$10244$15i0ov)
                                                        '())))
                                                   g$b*$10220$15i0ov)
                                              (g$make-collector$7446$15i0ov)
                                              (g$make-collector$7446$15i0ov))))
                                          (g$make-top-rib$7445$15i0ov
                                            g$subst-names$10243$15i0ov
                                            g$subst-labels$10242$15i0ov))))
                                      g$subst-labels$10241$15i0ov
                                      g$subst-names$10240$15i0ov))))))
                             g$exp-ext*$10235$15i0ov
                             g$exp-int*$10234$15i0ov))))))
                    g$swap$10231$15i0ov)))
               (case-lambda
                 (()
                  (begin
                    ((case-lambda
                       ((g$t$10297$15i0ov)
                        (begin
                          (g$imp-collector$10227$15i0ov
                            g$imp-collector$10229$15i0ov)
                          (set! g$imp-collector$10229$15i0ov
                            g$t$10297$15i0ov))))
                     (g$imp-collector$10227$15i0ov))
                    ((case-lambda
                       ((g$t$10298$15i0ov)
                        (begin
                          (g$top-level-context$10228$15i0ov
                            g$top-level-context$10230$15i0ov)
                          (set! g$top-level-context$10230$15i0ov
                            g$t$10298$15i0ov))))
                     (g$top-level-context$10228$15i0ov))))))))
           g$imp-collector$7449$15i0ov
           g$top-level-context$7511$15i0ov
           g$itc$10222$15i0ov
           '#f)))))
   (g$core-library-expander$7453$15i0ov
     g$core-library-expander$10892$15i0ov
     (case-lambda
       ((g$e$10299$15i0ov g$verify-name$10300$15i0ov)
        (call-with-values
          (case-lambda (() (g$parse-library$7443$15i0ov g$e$10299$15i0ov)))
          (case-lambda
            ((g$name*$10305$15i0ov
               g$exp*$10306$15i0ov
               g$imp*$10307$15i0ov
               g$b*$10308$15i0ov)
             ((case-lambda
                ((g$b*$10309$15i0ov
                   g$imp*$10310$15i0ov
                   g$exp*$10311$15i0ov
                   g$name*$10312$15i0ov)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$parse-library-name$7442$15i0ov g$name*$10312$15i0ov)))
                   (case-lambda
                     ((g$name$10315$15i0ov g$ver$10316$15i0ov)
                      ((case-lambda
                         ((g$ver$10317$15i0ov g$name$10318$15i0ov)
                          (begin
                            (g$verify-name$10300$15i0ov g$name$10318$15i0ov)
                            (call-with-values
                              (case-lambda
                                (()
                                 (g$library-body-expander$7452$15i0ov
                                   g$name$10318$15i0ov
                                   g$exp*$10311$15i0ov
                                   g$imp*$10310$15i0ov
                                   g$b*$10309$15i0ov
                                   '#f)))
                              (case-lambda
                                ((g$imp*$10326$15i0ov
                                   g$invoke-req*$10327$15i0ov
                                   g$visit-req*$10328$15i0ov
                                   g$invoke-code$10329$15i0ov
                                   g$visit-code$10330$15i0ov
                                   g$export-subst$10331$15i0ov
                                   g$export-env$10332$15i0ov)
                                 ((case-lambda
                                    ((g$export-env$10333$15i0ov
                                       g$export-subst$10334$15i0ov
                                       g$visit-code$10335$15i0ov
                                       g$invoke-code$10336$15i0ov
                                       g$visit-req*$10337$15i0ov
                                       g$invoke-req*$10338$15i0ov
                                       g$imp*$10339$15i0ov)
                                     (values
                                       g$name$10318$15i0ov
                                       g$ver$10317$15i0ov
                                       g$imp*$10339$15i0ov
                                       g$invoke-req*$10338$15i0ov
                                       g$visit-req*$10337$15i0ov
                                       g$invoke-code$10336$15i0ov
                                       g$visit-code$10335$15i0ov
                                       g$export-subst$10334$15i0ov
                                       g$export-env$10333$15i0ov)))
                                  g$export-env$10332$15i0ov
                                  g$export-subst$10331$15i0ov
                                  g$visit-code$10330$15i0ov
                                  g$invoke-code$10329$15i0ov
                                  g$visit-req*$10328$15i0ov
                                  g$invoke-req*$10327$15i0ov
                                  g$imp*$10326$15i0ov)))))))
                       g$ver$10316$15i0ov
                       g$name$10315$15i0ov))))))
              g$b*$10308$15i0ov
              g$imp*$10307$15i0ov
              g$exp*$10306$15i0ov
              g$name*$10305$15i0ov)))))))
   (g$parse-top-level-program$7454$15i0ov
     g$parse-top-level-program$10893$15i0ov
     (case-lambda
       ((g$e*$10340$15i0ov)
        ((case-lambda
           ((g$t$10341$15i0ov)
            ((case-lambda
               ((g$ls/false$10342$15i0ov)
                (if (if g$ls/false$10342$15i0ov
                      (begin
                        '#f
                        (apply
                          (case-lambda
                            ((g$import$10343$15i0ov
                               g$imp*$10344$15i0ov
                               g$b*$10345$15i0ov)
                             (eq? (g$syntax->datum$7507$15i0ov
                                    g$import$10343$15i0ov)
                                  'import)))
                          g$ls/false$10342$15i0ov))
                      '#f)
                  (apply
                    (case-lambda
                      ((g$import$10346$15i0ov
                         g$imp*$10347$15i0ov
                         g$b*$10348$15i0ov)
                       (values g$imp*$10347$15i0ov g$b*$10348$15i0ov)))
                    g$ls/false$10342$15i0ov)
                  ((case-lambda
                     ((g$t$10349$15i0ov)
                      ((case-lambda
                         ((g$ls/false$10350$15i0ov)
                          (if (if g$ls/false$10350$15i0ov
                                (begin
                                  '#f
                                  (apply
                                    (case-lambda
                                      ((g$import$10351$15i0ov
                                         g$x$10352$15i0ov
                                         g$y$10353$15i0ov)
                                       (eq? (g$syntax->datum$7507$15i0ov
                                              g$import$10351$15i0ov)
                                            'import)))
                                    g$ls/false$10350$15i0ov))
                                '#f)
                            (apply
                              (case-lambda
                                ((g$import$10354$15i0ov
                                   g$x$10355$15i0ov
                                   g$y$10356$15i0ov)
                                 (g$syntax-violation$7504$15i0ov
                                   'expander
                                   '"invalid syntax of top-level program"
                                   (g$syntax-car$7114$15i0ov
                                     g$e*$10340$15i0ov))))
                              g$ls/false$10350$15i0ov)
                            ((case-lambda
                               ((g$t$10357$15i0ov)
                                ((case-lambda
                                   ((g$ls/false$10358$15i0ov)
                                    (if g$ls/false$10358$15i0ov
                                      (apply
                                        (case-lambda
                                          (()
                                           (assertion-violation
                                             'expander
                                             '"top-level program is missing an (import ---) clause")))
                                        g$ls/false$10358$15i0ov)
                                      (g$syntax-violation$7504$15i0ov
                                        '#f
                                        '"invalid syntax"
                                        g$t$10357$15i0ov))))
                                 (g$syntax-dispatch$7395$15i0ov
                                   g$t$10357$15i0ov
                                   '_))))
                             g$t$10349$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov
                         g$t$10349$15i0ov
                         '((any . any) . any)))))
                   g$t$10341$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov
               g$t$10341$15i0ov
               '((any . each-any) . each-any)))))
         g$e*$10340$15i0ov))))
   (g$top-level-expander$7455$15i0ov
     g$top-level-expander$10894$15i0ov
     (case-lambda
       ((g$e*$10359$15i0ov)
        (call-with-values
          (case-lambda
            (() (g$parse-top-level-program$7454$15i0ov g$e*$10359$15i0ov)))
          (case-lambda
            ((g$imp*$10362$15i0ov g$b*$10363$15i0ov)
             ((case-lambda
                ((g$b*$10364$15i0ov g$imp*$10365$15i0ov)
                 (call-with-values
                   (case-lambda
                     (()
                      (g$library-body-expander$7452$15i0ov
                        '()
                        '()
                        g$imp*$10365$15i0ov
                        g$b*$10364$15i0ov
                        '#t)))
                   (case-lambda
                     ((g$imp*$10373$15i0ov
                        g$invoke-req*$10374$15i0ov
                        g$visit-req*$10375$15i0ov
                        g$invoke-code$10376$15i0ov
                        g$visit-code$10377$15i0ov
                        g$export-subst$10378$15i0ov
                        g$export-env$10379$15i0ov)
                      ((case-lambda
                         ((g$export-env$10380$15i0ov
                            g$export-subst$10381$15i0ov
                            g$visit-code$10382$15i0ov
                            g$invoke-code$10383$15i0ov
                            g$visit-req*$10384$15i0ov
                            g$invoke-req*$10385$15i0ov
                            g$imp*$10386$15i0ov)
                          (values
                            g$invoke-req*$10385$15i0ov
                            g$invoke-code$10383$15i0ov)))
                       g$export-env$10379$15i0ov
                       g$export-subst$10378$15i0ov
                       g$visit-code$10377$15i0ov
                       g$invoke-code$10376$15i0ov
                       g$visit-req*$10375$15i0ov
                       g$invoke-req*$10374$15i0ov
                       g$imp*$10373$15i0ov))))))
              g$b*$10363$15i0ov
              g$imp*$10362$15i0ov)))))))
   (g$8491$7456$15i0ov
     g$8491$10895$15i0ov
     (make-record-type-descriptor
       'env
       '#f
       'g$8494$15i0ov
       '#t
       '#t
       '#((mutable names) (mutable labels) (mutable itc))))
   (g$8493$7457$15i0ov g$8493$10896$15i0ov '#f)
   (g$8492$7458$15i0ov
     g$8492$10897$15i0ov
     (make-record-constructor-descriptor
       g$8491$7456$15i0ov
       '#f
       g$8493$7457$15i0ov))
   (g$env?$7459$15i0ov
     g$env?$10898$15i0ov
     (record-predicate g$8491$7456$15i0ov))
   (g$make-env$7460$15i0ov
     g$make-env$10899$15i0ov
     (record-constructor g$8492$7458$15i0ov))
   (g$env-names$7461$15i0ov
     g$env-names$10900$15i0ov
     (record-accessor g$8491$7456$15i0ov '0))
   (g$env-labels$7462$15i0ov
     g$env-labels$10901$15i0ov
     (record-accessor g$8491$7456$15i0ov '1))
   (g$env-itc$7463$15i0ov
     g$env-itc$10902$15i0ov
     (record-accessor g$8491$7456$15i0ov '2))
   (g$set-env-names!$7464$15i0ov
     g$set-env-names!$10903$15i0ov
     (record-mutator g$8491$7456$15i0ov '0))
   (g$set-env-labels!$7465$15i0ov
     g$set-env-labels!$10904$15i0ov
     (record-mutator g$8491$7456$15i0ov '1))
   (g$set-env-itc!$7466$15i0ov
     g$set-env-itc!$10905$15i0ov
     (record-mutator g$8491$7456$15i0ov '2))
   (g$rp$7467$15i0ov
     g$rp$10906$15i0ov
     (make-record-printer
       'env
       (case-lambda
         ((g$x$10387$15i0ov g$p$10388$15i0ov)
          (display '"#<environment>" g$p$10388$15i0ov)))))
   (g$8510$7468$15i0ov
     g$8510$10907$15i0ov
     (make-record-type-descriptor
       'interaction-env
       '#f
       'g$8513$15i0ov
       '#t
       '#t
       '#((mutable rib) (mutable r) (mutable locs))))
   (g$8512$7469$15i0ov g$8512$10908$15i0ov '#f)
   (g$8511$7470$15i0ov
     g$8511$10909$15i0ov
     (make-record-constructor-descriptor
       g$8510$7468$15i0ov
       '#f
       g$8512$7469$15i0ov))
   (g$interaction-env?$7471$15i0ov
     g$interaction-env?$10910$15i0ov
     (record-predicate g$8510$7468$15i0ov))
   (g$make-interaction-env$7472$15i0ov
     g$make-interaction-env$10911$15i0ov
     (record-constructor g$8511$7470$15i0ov))
   (g$interaction-env-rib$7473$15i0ov
     g$interaction-env-rib$10912$15i0ov
     (record-accessor g$8510$7468$15i0ov '0))
   (g$interaction-env-r$7474$15i0ov
     g$interaction-env-r$10913$15i0ov
     (record-accessor g$8510$7468$15i0ov '1))
   (g$interaction-env-locs$7475$15i0ov
     g$interaction-env-locs$10914$15i0ov
     (record-accessor g$8510$7468$15i0ov '2))
   (g$set-interaction-env-rib!$7476$15i0ov
     g$set-interaction-env-rib!$10915$15i0ov
     (record-mutator g$8510$7468$15i0ov '0))
   (g$set-interaction-env-r!$7477$15i0ov
     g$set-interaction-env-r!$10916$15i0ov
     (record-mutator g$8510$7468$15i0ov '1))
   (g$set-interaction-env-locs!$7478$15i0ov
     g$set-interaction-env-locs!$10917$15i0ov
     (record-mutator g$8510$7468$15i0ov '2))
   (g$rp$7479$15i0ov
     g$rp$10918$15i0ov
     (make-record-printer
       'interaction-env
       (case-lambda
         ((g$x$10389$15i0ov g$p$10390$15i0ov)
          (display '"#<environment>" g$p$10390$15i0ov)))))
   (g$interaction-environment-symbols$7480$15i0ov
     g$interaction-environment-symbols$10919$15i0ov
     (case-lambda
       (()
        (map (case-lambda ((g$x$10391$15i0ov) g$x$10391$15i0ov))
             (g$rib-sym*$7072$15i0ov
               (g$interaction-env-rib$7473$15i0ov
                 (g$interaction-environment$7510$15i0ov)))))))
   (g$environment-symbols$7481$15i0ov
     g$environment-symbols$10920$15i0ov
     (case-lambda
       ((g$e$10392$15i0ov)
        (vector->list (g$env-names$7461$15i0ov g$e$10392$15i0ov)))))
   (g$environment?$7482$15i0ov
     g$environment?$10921$15i0ov
     (case-lambda
       ((g$x$10393$15i0ov)
        ((case-lambda
           ((g$t$10394$15i0ov)
            (if g$t$10394$15i0ov
              g$t$10394$15i0ov
              (begin '#f (g$interaction-env?$7471$15i0ov g$x$10393$15i0ov)))))
         (g$env?$7459$15i0ov g$x$10393$15i0ov)))))
   (g$environment$7483$15i0ov
     g$environment$10922$15i0ov
     (case-lambda
       (g$imp*$10395$15i0ov
        ((case-lambda
           ((g$itc$10396$15i0ov)
            ((case-lambda
               ((g$imp-collector$10399$15i0ov g$imp-collector$10400$15i0ov)
                ((case-lambda
                   ((g$swap$10401$15i0ov)
                    (dynamic-wind
                      g$swap$10401$15i0ov
                      (case-lambda
                        (()
                         (call-with-values
                           (case-lambda
                             (()
                              (g$parse-import-spec*$7444$15i0ov
                                g$imp*$10395$15i0ov)))
                           (case-lambda
                             ((g$subst-names$10404$15i0ov
                                g$subst-labels$10405$15i0ov)
                              ((case-lambda
                                 ((g$subst-labels$10406$15i0ov
                                    g$subst-names$10407$15i0ov)
                                  (g$make-env$7460$15i0ov
                                    g$subst-names$10407$15i0ov
                                    g$subst-labels$10406$15i0ov
                                    g$itc$10396$15i0ov)))
                               g$subst-labels$10405$15i0ov
                               g$subst-names$10404$15i0ov))))))
                      g$swap$10401$15i0ov)))
                 (case-lambda
                   (()
                    ((case-lambda
                       ((g$t$10408$15i0ov)
                        (begin
                          (g$imp-collector$10399$15i0ov
                            g$imp-collector$10400$15i0ov)
                          (set! g$imp-collector$10400$15i0ov
                            g$t$10408$15i0ov))))
                     (g$imp-collector$10399$15i0ov)))))))
             g$imp-collector$7449$15i0ov
             g$itc$10396$15i0ov)))
         (g$make-collector$7446$15i0ov)))))
   (g$null-environment$7484$15i0ov
     g$null-environment$10923$15i0ov
     (case-lambda
       ((g$n$10409$15i0ov)
        (begin
          (if (not (eqv? g$n$10409$15i0ov '5))
            (assertion-violation 'null-environment '"not 5" g$n$10409$15i0ov)
            (void))
          (g$environment$7483$15i0ov '(psyntax null-environment-5))))))
   (g$scheme-report-environment$7485$15i0ov
     g$scheme-report-environment$10924$15i0ov
     (case-lambda
       ((g$n$10410$15i0ov)
        (begin
          (if (not (eqv? g$n$10410$15i0ov '5))
            (assertion-violation
              'scheme-report-environment
              '"not 5"
              g$n$10410$15i0ov)
            (void))
          (g$environment$7483$15i0ov '(psyntax scheme-report-environment-5))))))
   (g$expand$7486$15i0ov
     g$expand$10925$15i0ov
     (case-lambda
       ((g$x$10411$15i0ov g$env$10412$15i0ov)
        (if (g$env?$7459$15i0ov g$env$10412$15i0ov)
          ((case-lambda
             ((g$rib$10413$15i0ov)
              ((case-lambda
                 ((g$x$10414$15i0ov
                    g$itc$10415$15i0ov
                    g$rtc$10416$15i0ov
                    g$vtc$10417$15i0ov)
                  ((case-lambda
                     ((g$x$10418$15i0ov)
                      (begin
                        (g$seal-rib!$7083$15i0ov g$rib$10413$15i0ov)
                        (values g$x$10418$15i0ov (g$rtc$10416$15i0ov)))))
                   ((case-lambda
                      ((g$inv-collector$10425$15i0ov
                         g$vis-collector$10426$15i0ov
                         g$imp-collector$10427$15i0ov
                         g$inv-collector$10428$15i0ov
                         g$vis-collector$10429$15i0ov
                         g$imp-collector$10430$15i0ov)
                       ((case-lambda
                          ((g$swap$10431$15i0ov)
                           (dynamic-wind
                             g$swap$10431$15i0ov
                             (case-lambda
                               (()
                                (g$chi-expr$7413$15i0ov
                                  g$x$10414$15i0ov
                                  '()
                                  '())))
                             g$swap$10431$15i0ov)))
                        (case-lambda
                          (()
                           (begin
                             ((case-lambda
                                ((g$t$10432$15i0ov)
                                 (begin
                                   (g$inv-collector$10425$15i0ov
                                     g$inv-collector$10428$15i0ov)
                                   (set! g$inv-collector$10428$15i0ov
                                     g$t$10432$15i0ov))))
                              (g$inv-collector$10425$15i0ov))
                             ((case-lambda
                                ((g$t$10433$15i0ov)
                                 (begin
                                   (g$vis-collector$10426$15i0ov
                                     g$vis-collector$10429$15i0ov)
                                   (set! g$vis-collector$10429$15i0ov
                                     g$t$10433$15i0ov))))
                              (g$vis-collector$10426$15i0ov))
                             ((case-lambda
                                ((g$t$10434$15i0ov)
                                 (begin
                                   (g$imp-collector$10427$15i0ov
                                     g$imp-collector$10430$15i0ov)
                                   (set! g$imp-collector$10430$15i0ov
                                     g$t$10434$15i0ov))))
                              (g$imp-collector$10427$15i0ov))))))))
                    g$inv-collector$7447$15i0ov
                    g$vis-collector$7448$15i0ov
                    g$imp-collector$7449$15i0ov
                    g$rtc$10416$15i0ov
                    g$vtc$10417$15i0ov
                    g$itc$10415$15i0ov))))
               (g$make-stx$7090$15i0ov
                 g$x$10411$15i0ov
                 g$top-mark*$7059$15i0ov
                 (list g$rib$10413$15i0ov)
                 '())
               (g$env-itc$7463$15i0ov g$env$10412$15i0ov)
               (g$make-collector$7446$15i0ov)
               (g$make-collector$7446$15i0ov))))
           (g$make-top-rib$7445$15i0ov
             (g$env-names$7461$15i0ov g$env$10412$15i0ov)
             (g$env-labels$7462$15i0ov g$env$10412$15i0ov)))
          (if (g$interaction-env?$7471$15i0ov g$env$10412$15i0ov)
            ((case-lambda
               ((g$rib$10435$15i0ov g$r$10436$15i0ov g$rtc$10437$15i0ov)
                ((case-lambda
                   ((g$x$10438$15i0ov)
                    (call-with-values
                      (case-lambda
                        (()
                         ((case-lambda
                            ((g$top-level-context$10449$15i0ov
                               g$inv-collector$10450$15i0ov
                               g$vis-collector$10451$15i0ov
                               g$imp-collector$10452$15i0ov
                               g$top-level-context$10453$15i0ov
                               g$inv-collector$10454$15i0ov
                               g$vis-collector$10455$15i0ov
                               g$imp-collector$10456$15i0ov)
                             ((case-lambda
                                ((g$swap$10457$15i0ov)
                                 (dynamic-wind
                                   g$swap$10457$15i0ov
                                   (case-lambda
                                     (()
                                      (g$chi-interaction-expr$7451$15i0ov
                                        g$x$10438$15i0ov
                                        g$rib$10435$15i0ov
                                        g$r$10436$15i0ov)))
                                   g$swap$10457$15i0ov)))
                              (case-lambda
                                (()
                                 (begin
                                   ((case-lambda
                                      ((g$t$10458$15i0ov)
                                       (begin
                                         (g$top-level-context$10449$15i0ov
                                           g$top-level-context$10453$15i0ov)
                                         (set! g$top-level-context$10453$15i0ov
                                           g$t$10458$15i0ov))))
                                    (g$top-level-context$10449$15i0ov))
                                   ((case-lambda
                                      ((g$t$10459$15i0ov)
                                       (begin
                                         (g$inv-collector$10450$15i0ov
                                           g$inv-collector$10454$15i0ov)
                                         (set! g$inv-collector$10454$15i0ov
                                           g$t$10459$15i0ov))))
                                    (g$inv-collector$10450$15i0ov))
                                   ((case-lambda
                                      ((g$t$10460$15i0ov)
                                       (begin
                                         (g$vis-collector$10451$15i0ov
                                           g$vis-collector$10455$15i0ov)
                                         (set! g$vis-collector$10455$15i0ov
                                           g$t$10460$15i0ov))))
                                    (g$vis-collector$10451$15i0ov))
                                   ((case-lambda
                                      ((g$t$10461$15i0ov)
                                       (begin
                                         (g$imp-collector$10452$15i0ov
                                           g$imp-collector$10456$15i0ov)
                                         (set! g$imp-collector$10456$15i0ov
                                           g$t$10461$15i0ov))))
                                    (g$imp-collector$10452$15i0ov))))))))
                          g$top-level-context$7511$15i0ov
                          g$inv-collector$7447$15i0ov
                          g$vis-collector$7448$15i0ov
                          g$imp-collector$7449$15i0ov
                          g$env$10412$15i0ov
                          g$rtc$10437$15i0ov
                          (g$make-collector$7446$15i0ov)
                          (g$make-collector$7446$15i0ov))))
                      (case-lambda
                        ((g$e$10462$15i0ov g$r^$10463$15i0ov)
                         ((case-lambda
                            ((g$r^$10464$15i0ov g$e$10465$15i0ov)
                             (begin
                               (g$set-interaction-env-r!$7477$15i0ov
                                 g$env$10412$15i0ov
                                 g$r^$10464$15i0ov)
                               (values g$e$10465$15i0ov (g$rtc$10437$15i0ov)))))
                          g$r^$10463$15i0ov
                          g$e$10462$15i0ov))))))
                 (g$make-stx$7090$15i0ov
                   g$x$10411$15i0ov
                   g$top-mark*$7059$15i0ov
                   (list g$rib$10435$15i0ov)
                   '()))))
             (g$interaction-env-rib$7473$15i0ov g$env$10412$15i0ov)
             (g$interaction-env-r$7474$15i0ov g$env$10412$15i0ov)
             (g$make-collector$7446$15i0ov))
            (assertion-violation
              'expand
              '"not an environment"
              g$env$10412$15i0ov))))))
   (g$eval$7487$15i0ov
     g$eval$10926$15i0ov
     (case-lambda
       ((g$x$10466$15i0ov g$env$10467$15i0ov)
        (begin
          (if (not (g$environment?$7482$15i0ov g$env$10467$15i0ov))
            (error 'eval '"not an environment" g$env$10467$15i0ov)
            (void))
          (call-with-values
            (case-lambda
              (() (g$expand$7486$15i0ov g$x$10466$15i0ov g$env$10467$15i0ov)))
            (case-lambda
              ((g$x$10470$15i0ov g$invoke-req*$10471$15i0ov)
               ((case-lambda
                  ((g$invoke-req*$10472$15i0ov g$x$10473$15i0ov)
                   (begin
                     (for-each
                       g$invoke-library$6932$15i0ov
                       g$invoke-req*$10472$15i0ov)
                     (eval-core
                       (g$expanded->core$6631$15i0ov g$x$10473$15i0ov)))))
                g$invoke-req*$10471$15i0ov
                g$x$10470$15i0ov))))))))
   (g$library-expander$7488$15i0ov
     g$library-expander$10927$15i0ov
     (case-lambda
       ((g$x$10474$15i0ov g$filename$10475$15i0ov g$verify-name$10476$15i0ov)
        (letrec* ((g$build-visit-code$10477$15i0ov
                    (case-lambda
                      ((g$macro*$10520$15i0ov)
                       (if (null? g$macro*$10520$15i0ov)
                         (g$build-void$7052$15i0ov)
                         (g$build-sequence$7051$15i0ov
                           '#f
                           (map (case-lambda
                                  ((g$x$10521$15i0ov)
                                   ((case-lambda
                                      ((g$loc$10522$15i0ov g$src$10523$15i0ov)
                                       (list
                                         'set!
                                         g$loc$10522$15i0ov
                                         g$src$10523$15i0ov)))
                                    (car g$x$10521$15i0ov)
                                    (g$cddr$4892$15i0ov g$x$10521$15i0ov))))
                                g$macro*$10520$15i0ov))))))
                  (g$visit!$10478$15i0ov
                    (case-lambda
                      ((g$macro*$10516$15i0ov)
                       (for-each
                         (case-lambda
                           ((g$x$10517$15i0ov)
                            ((case-lambda
                               ((g$loc$10518$15i0ov g$proc$10519$15i0ov)
                                (set-symbol-value!
                                  g$loc$10518$15i0ov
                                  g$proc$10519$15i0ov)))
                             (car g$x$10517$15i0ov)
                             (g$cadr$4890$15i0ov g$x$10517$15i0ov))))
                         g$macro*$10516$15i0ov)))))
          (call-with-values
            (case-lambda
              (()
               (g$core-library-expander$7453$15i0ov
                 g$x$10474$15i0ov
                 g$verify-name$10476$15i0ov)))
            (case-lambda
              ((g$name$10488$15i0ov
                 g$ver$10489$15i0ov
                 g$imp*$10490$15i0ov
                 g$inv*$10491$15i0ov
                 g$vis*$10492$15i0ov
                 g$invoke-code$10493$15i0ov
                 g$macro*$10494$15i0ov
                 g$export-subst$10495$15i0ov
                 g$export-env$10496$15i0ov)
               ((case-lambda
                  ((g$export-env$10497$15i0ov
                     g$export-subst$10498$15i0ov
                     g$macro*$10499$15i0ov
                     g$invoke-code$10500$15i0ov
                     g$vis*$10501$15i0ov
                     g$inv*$10502$15i0ov
                     g$imp*$10503$15i0ov
                     g$ver$10504$15i0ov
                     g$name$10505$15i0ov)
                   ((case-lambda
                      ((g$id$10506$15i0ov
                         g$name$10507$15i0ov
                         g$ver$10508$15i0ov
                         g$imp*$10509$15i0ov
                         g$vis*$10510$15i0ov
                         g$inv*$10511$15i0ov
                         g$visit-proc$10512$15i0ov
                         g$invoke-proc$10513$15i0ov
                         g$visit-code$10514$15i0ov
                         g$invoke-code$10515$15i0ov)
                       (begin
                         (g$install-library$6930$15i0ov
                           g$id$10506$15i0ov
                           g$name$10507$15i0ov
                           g$ver$10508$15i0ov
                           g$imp*$10509$15i0ov
                           g$vis*$10510$15i0ov
                           g$inv*$10511$15i0ov
                           g$export-subst$10498$15i0ov
                           g$export-env$10497$15i0ov
                           g$visit-proc$10512$15i0ov
                           g$invoke-proc$10513$15i0ov
                           g$visit-code$10514$15i0ov
                           g$invoke-code$10515$15i0ov
                           '#t
                           g$filename$10475$15i0ov)
                         (values
                           g$id$10506$15i0ov
                           g$name$10507$15i0ov
                           g$ver$10508$15i0ov
                           g$imp*$10509$15i0ov
                           g$vis*$10510$15i0ov
                           g$inv*$10511$15i0ov
                           g$invoke-code$10515$15i0ov
                           g$visit-code$10514$15i0ov
                           g$export-subst$10498$15i0ov
                           g$export-env$10497$15i0ov))))
                    (gensym)
                    g$name$10505$15i0ov
                    g$ver$10504$15i0ov
                    (map g$library-spec$6936$15i0ov g$imp*$10503$15i0ov)
                    (map g$library-spec$6936$15i0ov g$vis*$10501$15i0ov)
                    (map g$library-spec$6936$15i0ov g$inv*$10502$15i0ov)
                    (case-lambda
                      (() (g$visit!$10478$15i0ov g$macro*$10499$15i0ov)))
                    (case-lambda
                      (()
                       (eval-core
                         (g$expanded->core$6631$15i0ov
                           g$invoke-code$10500$15i0ov))))
                    (g$build-visit-code$10477$15i0ov g$macro*$10499$15i0ov)
                    g$invoke-code$10500$15i0ov)))
                g$export-env$10496$15i0ov
                g$export-subst$10495$15i0ov
                g$macro*$10494$15i0ov
                g$invoke-code$10493$15i0ov
                g$vis*$10492$15i0ov
                g$inv*$10491$15i0ov
                g$imp*$10490$15i0ov
                g$ver$10489$15i0ov
                g$name$10488$15i0ov))))))
       ((g$x$10524$15i0ov g$filename$10525$15i0ov)
        (g$library-expander$7488$15i0ov
          g$x$10524$15i0ov
          g$filename$10525$15i0ov
          (case-lambda ((g$x$10526$15i0ov) (values)))))
       ((g$x$10527$15i0ov)
        (g$library-expander$7488$15i0ov
          g$x$10527$15i0ov
          '#f
          (case-lambda ((g$x$10528$15i0ov) (values)))))))
   (g$boot-library-expand$7489$15i0ov
     g$boot-library-expand$10928$15i0ov
     (case-lambda
       ((g$x$10529$15i0ov)
        (call-with-values
          (case-lambda (() (g$library-expander$7488$15i0ov g$x$10529$15i0ov)))
          (case-lambda
            ((g$id$10540$15i0ov
               g$name$10541$15i0ov
               g$ver$10542$15i0ov
               g$imp*$10543$15i0ov
               g$vis*$10544$15i0ov
               g$inv*$10545$15i0ov
               g$invoke-code$10546$15i0ov
               g$visit-code$10547$15i0ov
               g$export-subst$10548$15i0ov
               g$export-env$10549$15i0ov)
             ((case-lambda
                ((g$export-env$10550$15i0ov
                   g$export-subst$10551$15i0ov
                   g$visit-code$10552$15i0ov
                   g$invoke-code$10553$15i0ov
                   g$inv*$10554$15i0ov
                   g$vis*$10555$15i0ov
                   g$imp*$10556$15i0ov
                   g$ver$10557$15i0ov
                   g$name$10558$15i0ov
                   g$id$10559$15i0ov)
                 (values
                   g$name$10558$15i0ov
                   g$invoke-code$10553$15i0ov
                   g$export-subst$10551$15i0ov
                   g$export-env$10550$15i0ov)))
              g$export-env$10549$15i0ov
              g$export-subst$10548$15i0ov
              g$visit-code$10547$15i0ov
              g$invoke-code$10546$15i0ov
              g$inv*$10545$15i0ov
              g$vis*$10544$15i0ov
              g$imp*$10543$15i0ov
              g$ver$10542$15i0ov
              g$name$10541$15i0ov
              g$id$10540$15i0ov)))))))
   (g$rev-map-append$7490$15i0ov
     g$rev-map-append$10929$15i0ov
     (case-lambda
       ((g$f$10560$15i0ov g$ls$10561$15i0ov g$ac$10562$15i0ov)
        (if (null? g$ls$10561$15i0ov)
          g$ac$10562$15i0ov
          (g$rev-map-append$7490$15i0ov
            g$f$10560$15i0ov
            (cdr g$ls$10561$15i0ov)
            (cons
              (g$f$10560$15i0ov (car g$ls$10561$15i0ov))
              g$ac$10562$15i0ov))))))
   (g$build-exports$7491$15i0ov
     g$build-exports$10930$15i0ov
     (case-lambda
       ((g$lex*+loc*$10563$15i0ov g$init*$10564$15i0ov)
        (g$build-sequence$7051$15i0ov
          '#f
          (cons
            (g$build-void$7052$15i0ov)
            (g$rev-map-append$7490$15i0ov
              (case-lambda
                ((g$x$10565$15i0ov)
                 (list 'set! (cdr g$x$10565$15i0ov) (car g$x$10565$15i0ov))))
              g$lex*+loc*$10563$15i0ov
              g$init*$10564$15i0ov))))))
   (g$make-export-subst$7492$15i0ov
     g$make-export-subst$10931$15i0ov
     (case-lambda
       ((g$int*$10566$15i0ov g$ext*$10567$15i0ov g$rib$10568$15i0ov)
        (map (case-lambda
               ((g$int$10569$15i0ov g$ext$10570$15i0ov)
                ((case-lambda
                   ((g$id$10571$15i0ov)
                    ((case-lambda
                       ((g$label$10572$15i0ov)
                        ((case-lambda
                           (()
                            (begin
                              (if (not g$label$10572$15i0ov)
                                (g$syntax-violation$7504$15i0ov
                                  '#f
                                  '"cannot export unbound identifier"
                                  g$id$10571$15i0ov)
                                (void))
                              (cons
                                g$ext$10570$15i0ov
                                g$label$10572$15i0ov)))))))
                     (g$id->label$7130$15i0ov g$id$10571$15i0ov))))
                 (g$make-stx$7090$15i0ov
                   g$int$10569$15i0ov
                   g$top-mark*$7059$15i0ov
                   (list g$rib$10568$15i0ov)
                   '()))))
             g$int*$10566$15i0ov
             g$ext*$10567$15i0ov))))
   (g$make-export-env/macros$7493$15i0ov
     g$make-export-env/macros$10932$15i0ov
     (case-lambda
       ((g$lex*$10573$15i0ov g$loc*$10574$15i0ov g$r$10575$15i0ov)
        (letrec* ((g$lookup$10576$15i0ov
                    (case-lambda
                      ((g$x$10591$15i0ov)
                       ((letrec ((g$f$10592$15i0ov
                                   (case-lambda
                                     ((g$x$10593$15i0ov
                                        g$lex*$10594$15i0ov
                                        g$loc*$10595$15i0ov)
                                      (if (pair? g$lex*$10594$15i0ov)
                                        (if (eq? g$x$10593$15i0ov
                                                 (car g$lex*$10594$15i0ov))
                                          (car g$loc*$10595$15i0ov)
                                          (g$f$10592$15i0ov
                                            g$x$10593$15i0ov
                                            (cdr g$lex*$10594$15i0ov)
                                            (cdr g$loc*$10595$15i0ov)))
                                        (assertion-violation
                                          'lookup-make-export
                                          '"BUG"))))))
                          g$f$10592$15i0ov)
                        g$x$10591$15i0ov
                        g$lex*$10573$15i0ov
                        g$loc*$10574$15i0ov)))))
          ((letrec ((g$f$10577$15i0ov
                      (case-lambda
                        ((g$r$10578$15i0ov
                           g$env$10579$15i0ov
                           g$global*$10580$15i0ov
                           g$macro*$10581$15i0ov)
                         (if (null? g$r$10578$15i0ov)
                           (values
                             g$env$10579$15i0ov
                             g$global*$10580$15i0ov
                             g$macro*$10581$15i0ov)
                           ((case-lambda
                              ((g$x$10582$15i0ov)
                               ((case-lambda
                                  ((g$label$10583$15i0ov g$b$10584$15i0ov)
                                   ((case-lambda
                                      ((g$t$10585$15i0ov)
                                       (if (memv g$t$10585$15i0ov '(lexical))
                                         ((case-lambda
                                            ((g$v$10586$15i0ov)
                                             ((case-lambda
                                                ((g$loc$10587$15i0ov
                                                   g$type$10588$15i0ov)
                                                 (g$f$10577$15i0ov
                                                   (cdr g$r$10578$15i0ov)
                                                   (cons
                                                     (g$cons*$5361$15i0ov
                                                       g$label$10583$15i0ov
                                                       g$type$10588$15i0ov
                                                       g$loc$10587$15i0ov)
                                                     g$env$10579$15i0ov)
                                                   (cons
                                                     (cons
                                                       (g$lexical-var$7339$15i0ov
                                                         g$v$10586$15i0ov)
                                                       g$loc$10587$15i0ov)
                                                     g$global*$10580$15i0ov)
                                                   g$macro*$10581$15i0ov)))
                                              (g$lookup$10576$15i0ov
                                                (g$lexical-var$7339$15i0ov
                                                  g$v$10586$15i0ov))
                                              (if (g$lexical-mutable?$7340$15i0ov
                                                    g$v$10586$15i0ov)
                                                'mutable
                                                'global))))
                                          (g$binding-value$7135$15i0ov
                                            g$b$10584$15i0ov))
                                         (if (memv
                                               g$t$10585$15i0ov
                                               '(local-macro))
                                           ((case-lambda
                                              ((g$loc$10589$15i0ov)
                                               (g$f$10577$15i0ov
                                                 (cdr g$r$10578$15i0ov)
                                                 (cons
                                                   (g$cons*$5361$15i0ov
                                                     g$label$10583$15i0ov
                                                     'global-macro
                                                     g$loc$10589$15i0ov)
                                                   g$env$10579$15i0ov)
                                                 g$global*$10580$15i0ov
                                                 (cons
                                                   (cons
                                                     g$loc$10589$15i0ov
                                                     (g$binding-value$7135$15i0ov
                                                       g$b$10584$15i0ov))
                                                   g$macro*$10581$15i0ov))))
                                            (gensym))
                                           (if (memv
                                                 g$t$10585$15i0ov
                                                 '(local-macro!))
                                             ((case-lambda
                                                ((g$loc$10590$15i0ov)
                                                 (g$f$10577$15i0ov
                                                   (cdr g$r$10578$15i0ov)
                                                   (cons
                                                     (g$cons*$5361$15i0ov
                                                       g$label$10583$15i0ov
                                                       'global-macro!
                                                       g$loc$10590$15i0ov)
                                                     g$env$10579$15i0ov)
                                                   g$global*$10580$15i0ov
                                                   (cons
                                                     (cons
                                                       g$loc$10590$15i0ov
                                                       (g$binding-value$7135$15i0ov
                                                         g$b$10584$15i0ov))
                                                     g$macro*$10581$15i0ov))))
                                              (gensym))
                                             (if (memv
                                                   g$t$10585$15i0ov
                                                   '($rtd $module))
                                               (g$f$10577$15i0ov
                                                 (cdr g$r$10578$15i0ov)
                                                 (cons
                                                   g$x$10582$15i0ov
                                                   g$env$10579$15i0ov)
                                                 g$global*$10580$15i0ov
                                                 g$macro*$10581$15i0ov)
                                               (assertion-violation
                                                 'expander
                                                 '"BUG: do not know how to export"
                                                 (g$binding-type$7134$15i0ov
                                                   g$b$10584$15i0ov)
                                                 (g$binding-value$7135$15i0ov
                                                   g$b$10584$15i0ov))))))))
                                    (g$binding-type$7134$15i0ov
                                      g$b$10584$15i0ov))))
                                (car g$x$10582$15i0ov)
                                (cdr g$x$10582$15i0ov))))
                            (car g$r$10578$15i0ov)))))))
             g$f$10577$15i0ov)
           g$r$10575$15i0ov
           '()
           '()
           '())))))
   (g$generate-temporaries$7494$15i0ov
     g$generate-temporaries$10933$15i0ov
     (case-lambda
       ((g$ls$10596$15i0ov)
        ((case-lambda
           ((g$t$10597$15i0ov)
            ((case-lambda
               ((g$ls/false$10598$15i0ov)
                (if g$ls/false$10598$15i0ov
                  (apply
                    (case-lambda
                      ((g$ls$10599$15i0ov)
                       (map (case-lambda
                              ((g$x$10600$15i0ov)
                               (g$make-stx$7090$15i0ov
                                 ((case-lambda
                                    ((g$x$10601$15i0ov)
                                     (if ((case-lambda
                                            ((g$t$10602$15i0ov)
                                             (if g$t$10602$15i0ov
                                               g$t$10602$15i0ov
                                               (begin
                                                 '#f
                                                 (string? g$x$10601$15i0ov)))))
                                          (symbol? g$x$10601$15i0ov))
                                       (gensym g$x$10601$15i0ov)
                                       (gensym 't))))
                                  (g$syntax->datum$7507$15i0ov
                                    g$x$10600$15i0ov))
                                 g$top-mark*$7059$15i0ov
                                 '()
                                 '())))
                            g$ls$10599$15i0ov)))
                    g$ls/false$10598$15i0ov)
                  ((case-lambda
                     ((g$t$10603$15i0ov)
                      ((case-lambda
                         ((g$ls/false$10604$15i0ov)
                          (if g$ls/false$10604$15i0ov
                            (apply
                              (case-lambda
                                (()
                                 (assertion-violation
                                   'generate-temporaries
                                   '"not a list")))
                              g$ls/false$10604$15i0ov)
                            (g$syntax-violation$7504$15i0ov
                              '#f
                              '"invalid syntax"
                              g$t$10603$15i0ov))))
                       (g$syntax-dispatch$7395$15i0ov g$t$10603$15i0ov '_))))
                   g$t$10597$15i0ov))))
             (g$syntax-dispatch$7395$15i0ov g$t$10597$15i0ov 'each-any))))
         g$ls$10596$15i0ov))))
   (g$free-identifier=?$7495$15i0ov
     g$free-identifier=?$10934$15i0ov
     (case-lambda
       ((g$x$10605$15i0ov g$y$10606$15i0ov)
        (if (g$id?$7117$15i0ov g$x$10605$15i0ov)
          (if (g$id?$7117$15i0ov g$y$10606$15i0ov)
            (g$free-id=?$7121$15i0ov g$x$10605$15i0ov g$y$10606$15i0ov)
            (assertion-violation
              'free-identifier=?
              '"not an identifier"
              g$y$10606$15i0ov))
          (assertion-violation
            'free-identifier=?
            '"not an identifier"
            g$x$10605$15i0ov)))))
   (g$bound-identifier=?$7496$15i0ov
     g$bound-identifier=?$10935$15i0ov
     (case-lambda
       ((g$x$10607$15i0ov g$y$10608$15i0ov)
        (if (g$id?$7117$15i0ov g$x$10607$15i0ov)
          (if (g$id?$7117$15i0ov g$y$10608$15i0ov)
            (g$bound-id=?$7120$15i0ov g$x$10607$15i0ov g$y$10608$15i0ov)
            (assertion-violation
              'bound-identifier=?
              '"not an identifier"
              g$y$10608$15i0ov))
          (assertion-violation
            'bound-identifier=?
            '"not an identifier"
            g$x$10607$15i0ov)))))
   (g$make-source-condition$7497$15i0ov
     g$make-source-condition$10936$15i0ov
     (case-lambda
       ((g$x$10609$15i0ov)
        (letrec* ((g$11395$10610$15i0ov
                    (make-record-type-descriptor
                      '&source-information
                      &condition-rtd
                      'g$11398$15i0ov
                      '#f
                      '#f
                      '#((immutable file-name) (immutable character))))
                  (g$11397$10611$15i0ov '#f)
                  (g$11396$10612$15i0ov
                    (make-record-constructor-descriptor
                      g$11395$10610$15i0ov
                      &condition-rcd
                      g$11397$10611$15i0ov))
                  (g$11394$10613$15i0ov (record-predicate g$11395$10610$15i0ov))
                  (g$make-source-condition$10614$15i0ov
                    (record-constructor g$11396$10612$15i0ov))
                  (g$11392$10615$15i0ov
                    (record-accessor g$11395$10610$15i0ov '0))
                  (g$11393$10616$15i0ov
                    (record-accessor g$11395$10610$15i0ov '1))
                  (g$source-condition?$10617$15i0ov
                    (condition-predicate g$11395$10610$15i0ov))
                  (g$source-filename$10618$15i0ov
                    (condition-accessor
                      g$11395$10610$15i0ov
                      g$11392$10615$15i0ov))
                  (g$source-character$10619$15i0ov
                    (condition-accessor
                      g$11395$10610$15i0ov
                      g$11393$10616$15i0ov)))
          (if (pair? g$x$10609$15i0ov)
            (g$make-source-condition$10614$15i0ov
              (car g$x$10609$15i0ov)
              (cdr g$x$10609$15i0ov))
            (condition))))))
   (g$extract-position-condition$7498$15i0ov
     g$extract-position-condition$10937$15i0ov
     (case-lambda
       ((g$x$10620$15i0ov)
        (g$make-source-condition$7497$15i0ov
          (g$expression-position$7499$15i0ov g$x$10620$15i0ov)))))
   (g$expression-position$7499$15i0ov
     g$expression-position$10938$15i0ov
     (case-lambda
       ((g$x$10621$15i0ov)
        (if (g$stx?$7089$15i0ov g$x$10621$15i0ov)
          (begin
            '#f
            ((case-lambda
               ((g$x$10622$15i0ov)
                (if (annotation? g$x$10622$15i0ov)
                  (begin '#f (annotation-source g$x$10622$15i0ov))
                  '#f)))
             (g$stx-expr$7091$15i0ov g$x$10621$15i0ov)))
          '#f))))
   (g$assertion-error$7500$15i0ov
     g$assertion-error$10939$15i0ov
     (case-lambda
       ((g$expr$10623$15i0ov g$pos$10624$15i0ov)
        (raise
          (condition
            (g$make-assertion-violation$5645$15i0ov)
            (g$make-who-condition$5659$15i0ov 'assert)
            (g$make-message-condition$5613$15i0ov '"assertion failed")
            (g$make-irritants-condition$5651$15i0ov (list g$expr$10623$15i0ov))
            (g$make-source-condition$7497$15i0ov g$pos$10624$15i0ov))))))
   (g$syntax-error$7501$15i0ov
     g$syntax-error$10940$15i0ov
     (case-lambda
       ((g$x$10625$15i0ov . g$args$10626$15i0ov)
        (begin
          (if (not (g$for-all$5359$15i0ov string? g$args$10626$15i0ov))
            (assertion-violation
              'syntax-error
              '"invalid argument"
              g$args$10626$15i0ov)
            (void))
          (raise
            (condition
              (g$make-message-condition$5613$15i0ov
                (if (null? g$args$10626$15i0ov)
                  '"invalid syntax"
                  (apply string-append g$args$10626$15i0ov)))
              (g$make-syntax-violation$5685$15i0ov
                (g$syntax->datum$7507$15i0ov g$x$10625$15i0ov)
                '#f)
              (g$extract-position-condition$7498$15i0ov g$x$10625$15i0ov)
              (g$extract-trace$7502$15i0ov g$x$10625$15i0ov)))))))
   (g$extract-trace$7502$15i0ov
     g$extract-trace$10941$15i0ov
     (case-lambda
       ((g$x$10627$15i0ov)
        (letrec* ((g$11422$10628$15i0ov
                    (make-record-type-descriptor
                      '&trace
                      &condition-rtd
                      'g$11425$15i0ov
                      '#f
                      '#f
                      '#((immutable form))))
                  (g$11424$10629$15i0ov '#f)
                  (g$11423$10630$15i0ov
                    (make-record-constructor-descriptor
                      g$11422$10628$15i0ov
                      &condition-rcd
                      g$11424$10629$15i0ov))
                  (g$11421$10631$15i0ov (record-predicate g$11422$10628$15i0ov))
                  (g$make-trace$10632$15i0ov
                    (record-constructor g$11423$10630$15i0ov))
                  (g$11420$10633$15i0ov
                    (record-accessor g$11422$10628$15i0ov '0))
                  (g$trace?$10634$15i0ov
                    (condition-predicate g$11422$10628$15i0ov))
                  (g$trace-form$10635$15i0ov
                    (condition-accessor
                      g$11422$10628$15i0ov
                      g$11420$10633$15i0ov)))
          ((letrec ((g$f$10636$15i0ov
                      (case-lambda
                        ((g$x$10637$15i0ov)
                         (if (g$stx?$7089$15i0ov g$x$10637$15i0ov)
                           (apply
                             condition
                             (g$make-trace$10632$15i0ov g$x$10637$15i0ov)
                             (map g$f$10636$15i0ov
                                  (g$stx-ae*$7094$15i0ov g$x$10637$15i0ov)))
                           (if (annotation? g$x$10637$15i0ov)
                             (g$make-trace$10632$15i0ov
                               (g$make-stx$7090$15i0ov
                                 g$x$10637$15i0ov
                                 '()
                                 '()
                                 '()))
                             (condition)))))))
             g$f$10636$15i0ov)
           g$x$10627$15i0ov)))))
   (g$syntax-violation*$7503$15i0ov
     g$syntax-violation*$10942$15i0ov
     (case-lambda
       ((g$who$10638$15i0ov
          g$msg$10639$15i0ov
          g$form$10640$15i0ov
          g$condition-object$10641$15i0ov)
        (begin
          (if (not (string? g$msg$10639$15i0ov))
            (assertion-violation
              'syntax-violation
              '"message is not a string"
              g$msg$10639$15i0ov)
            (void))
          ((case-lambda
             ((g$who$10642$15i0ov)
              (raise
                (condition
                  (if g$who$10642$15i0ov
                    (g$make-who-condition$5659$15i0ov g$who$10642$15i0ov)
                    (condition))
                  (g$make-message-condition$5613$15i0ov g$msg$10639$15i0ov)
                  g$condition-object$10641$15i0ov
                  (g$extract-position-condition$7498$15i0ov g$form$10640$15i0ov)
                  (g$extract-trace$7502$15i0ov g$form$10640$15i0ov)))))
           (if ((case-lambda
                  ((g$t$10643$15i0ov)
                   (if g$t$10643$15i0ov
                     g$t$10643$15i0ov
                     (begin '#f (symbol? g$who$10638$15i0ov)))))
                (string? g$who$10638$15i0ov))
             g$who$10638$15i0ov
             (if (not g$who$10638$15i0ov)
               ((case-lambda
                  ((g$t$10644$15i0ov)
                   ((case-lambda
                      ((g$ls/false$10645$15i0ov)
                       (if (if g$ls/false$10645$15i0ov
                             (begin
                               '#f
                               (apply
                                 (case-lambda
                                   ((g$id$10646$15i0ov)
                                    (g$id?$7117$15i0ov g$id$10646$15i0ov)))
                                 g$ls/false$10645$15i0ov))
                             '#f)
                         (apply
                           (case-lambda
                             ((g$id$10647$15i0ov)
                              (g$syntax->datum$7507$15i0ov g$id$10647$15i0ov)))
                           g$ls/false$10645$15i0ov)
                         ((case-lambda
                            ((g$t$10648$15i0ov)
                             ((case-lambda
                                ((g$ls/false$10649$15i0ov)
                                 (if (if g$ls/false$10649$15i0ov
                                       (begin
                                         '#f
                                         (apply
                                           (case-lambda
                                             ((g$id$10650$15i0ov
                                                g$rest$10651$15i0ov)
                                              (g$id?$7117$15i0ov
                                                g$id$10650$15i0ov)))
                                           g$ls/false$10649$15i0ov))
                                       '#f)
                                   (apply
                                     (case-lambda
                                       ((g$id$10652$15i0ov g$rest$10653$15i0ov)
                                        (g$syntax->datum$7507$15i0ov
                                          g$id$10652$15i0ov)))
                                     g$ls/false$10649$15i0ov)
                                   ((case-lambda
                                      ((g$t$10654$15i0ov)
                                       ((case-lambda
                                          ((g$ls/false$10655$15i0ov)
                                           (if g$ls/false$10655$15i0ov
                                             (apply
                                               (case-lambda (() '#f))
                                               g$ls/false$10655$15i0ov)
                                             (g$syntax-violation$7504$15i0ov
                                               '#f
                                               '"invalid syntax"
                                               g$t$10654$15i0ov))))
                                        (g$syntax-dispatch$7395$15i0ov
                                          g$t$10654$15i0ov
                                          '_))))
                                    g$t$10648$15i0ov))))
                              (g$syntax-dispatch$7395$15i0ov
                                g$t$10648$15i0ov
                                '(any . any)))))
                          g$t$10644$15i0ov))))
                    (g$syntax-dispatch$7395$15i0ov g$t$10644$15i0ov 'any))))
                g$form$10640$15i0ov)
               (assertion-violation
                 'syntax-violation
                 '"invalid who argument"
                 g$who$10638$15i0ov))))))))
   (g$syntax-violation$7504$15i0ov
     g$syntax-violation$10943$15i0ov
     (case-lambda
       ((g$who$10656$15i0ov g$msg$10657$15i0ov g$form$10658$15i0ov)
        (g$syntax-violation$7504$15i0ov
          g$who$10656$15i0ov
          g$msg$10657$15i0ov
          g$form$10658$15i0ov
          '#f))
       ((g$who$10659$15i0ov
          g$msg$10660$15i0ov
          g$form$10661$15i0ov
          g$subform$10662$15i0ov)
        (g$syntax-violation*$7503$15i0ov
          g$who$10659$15i0ov
          g$msg$10660$15i0ov
          g$form$10661$15i0ov
          (g$make-syntax-violation$5685$15i0ov
            (g$syntax->datum$7507$15i0ov g$form$10661$15i0ov)
            (g$syntax->datum$7507$15i0ov g$subform$10662$15i0ov))))))
   (g$identifier?$7505$15i0ov
     g$identifier?$10944$15i0ov
     (case-lambda ((g$x$10663$15i0ov) (g$id?$7117$15i0ov g$x$10663$15i0ov))))
   (g$datum->syntax$7506$15i0ov
     g$datum->syntax$10945$15i0ov
     (case-lambda
       ((g$id$10664$15i0ov g$datum$10665$15i0ov)
        (if (g$id?$7117$15i0ov g$id$10664$15i0ov)
          (g$datum->stx$7100$15i0ov g$id$10664$15i0ov g$datum$10665$15i0ov)
          (assertion-violation
            'datum->syntax
            '"not an identifier"
            g$id$10664$15i0ov)))))
   (g$syntax->datum$7507$15i0ov
     g$syntax->datum$10946$15i0ov
     (case-lambda
       ((g$x$10666$15i0ov) (g$stx->datum$7128$15i0ov g$x$10666$15i0ov))))
   (g$compile-r6rs-top-level$7508$15i0ov
     g$compile-r6rs-top-level$10947$15i0ov
     (case-lambda
       ((g$x*$10667$15i0ov)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$7455$15i0ov g$x*$10667$15i0ov)))
          (case-lambda
            ((g$lib*$10670$15i0ov g$invoke-code$10671$15i0ov)
             ((case-lambda
                ((g$invoke-code$10672$15i0ov g$lib*$10673$15i0ov)
                 (case-lambda
                   (()
                    (begin
                      (for-each
                        g$invoke-library$6932$15i0ov
                        g$lib*$10673$15i0ov)
                      (eval-core
                        (g$expanded->core$6631$15i0ov
                          g$invoke-code$10672$15i0ov)))))))
              g$invoke-code$10671$15i0ov
              g$lib*$10670$15i0ov)))))))
   (g$pre-compile-r6rs-top-level$7509$15i0ov
     g$pre-compile-r6rs-top-level$10948$15i0ov
     (case-lambda
       ((g$x*$10674$15i0ov)
        (call-with-values
          (case-lambda
            (() (g$top-level-expander$7455$15i0ov g$x*$10674$15i0ov)))
          (case-lambda
            ((g$lib*$10677$15i0ov g$invoke-code$10678$15i0ov)
             ((case-lambda
                ((g$invoke-code$10679$15i0ov g$lib*$10680$15i0ov)
                 (begin
                   (for-each g$invoke-library$6932$15i0ov g$lib*$10680$15i0ov)
                   (compile-core
                     (g$expanded->core$6631$15i0ov
                       g$invoke-code$10679$15i0ov)))))
              g$invoke-code$10678$15i0ov
              g$lib*$10677$15i0ov)))))))
   (g$interaction-environment$7510$15i0ov
     g$interaction-environment$10949$15i0ov
     ((case-lambda
        ((g$the-env$10681$15i0ov)
         (case-lambda
           (()
            ((case-lambda
               ((g$t$10682$15i0ov)
                (if g$t$10682$15i0ov
                  g$t$10682$15i0ov
                  (begin
                    '#f
                    ((case-lambda
                       ((g$lib$10683$15i0ov g$rib$10684$15i0ov)
                        (begin
                          ((case-lambda
                             ((g$subst$10685$15i0ov)
                              (begin
                                (g$set-rib-sym*!$7076$15i0ov
                                  g$rib$10684$15i0ov
                                  (map car g$subst$10685$15i0ov))
                                (g$set-rib-mark**!$7077$15i0ov
                                  g$rib$10684$15i0ov
                                  (map (case-lambda
                                         ((g$x$10686$15i0ov)
                                          g$top-mark*$7059$15i0ov))
                                       g$subst$10685$15i0ov))
                                (g$set-rib-label*!$7078$15i0ov
                                  g$rib$10684$15i0ov
                                  (map cdr g$subst$10685$15i0ov)))))
                           (g$library-subst$6889$15i0ov g$lib$10683$15i0ov))
                          ((case-lambda
                             ((g$env$10687$15i0ov)
                              (begin
                                (set! g$the-env$10681$15i0ov g$env$10687$15i0ov)
                                g$env$10687$15i0ov)))
                           (g$make-interaction-env$7472$15i0ov
                             g$rib$10684$15i0ov
                             '()
                             '())))))
                     (g$find-library-by-name$6925$15i0ov '(ironscheme))
                     (g$make-empty-rib$7080$15i0ov))))))
             g$the-env$10681$15i0ov)))))
      '#f))
   (g$top-level-context$7511$15i0ov
     g$top-level-context$10950$15i0ov
     (g$make-parameter$6384$15i0ov '#f)))
  (g$current-library-expander$6922$15i0ov g$library-expander$7488$15i0ov))

(library-letrec* (psyntax primlocs)
  ()
  (begin
    (g$current-primitive-locations$6628$15i0ov
      (case-lambda
        ((g$x$11003$15i0ov)
         ((case-lambda
            ((g$t$11004$15i0ov)
             (if g$t$11004$15i0ov (cdr g$t$11004$15i0ov) '#f)))
          (assq
            g$x$11003$15i0ov
            '((ellipsis-map . g$ellipsis-map$10839$15i0ov)
              (ironscheme-build . g$ironscheme-build$10996$15i0ov)
              (syntax-error . g$syntax-error$10940$15i0ov)
              (syntax-dispatch . g$syntax-dispatch$10834$15i0ov)
              (compile-system-libraries
                .
                g$compile-system-libraries$10998$15i0ov)
              (compile->closure . g$compile->closure$11000$15i0ov)
              (compile . g$compile$10999$15i0ov)
              (load . g$load$10995$15i0ov)
              (interaction-environment . g$interaction-environment$10949$15i0ov)
              (variable-transformer-procedure
                .
                g$variable-transformer-procedure$10772$15i0ov)
              (variable-transformer? . g$variable-transformer?$10771$15i0ov)
              (make-variable-transformer
                .
                g$make-variable-transformer$10770$15i0ov)
              (identifier? . g$identifier?$10944$15i0ov)
              (generate-temporaries . g$generate-temporaries$10933$15i0ov)
              (free-identifier=? . g$free-identifier=?$10934$15i0ov)
              (syntax->datum . g$syntax->datum$10946$15i0ov)
              (datum->syntax . g$datum->syntax$10945$15i0ov)
              (bound-identifier=? . g$bound-identifier=?$10935$15i0ov)
              (delete-file . g$delete-file$5231$15i0ov)
              (file-exists? . g$file-exists?$5230$15i0ov)
              (list-sort . g$list-sort$5756$15i0ov)
              (make-eqv-hashtable . g$make-eqv-hashtable$5153$15i0ov)
              (make-eq-hashtable . g$make-eq-hashtable$5152$15i0ov)
              (hashtable-update! . g$hashtable-update!$5159$15i0ov)
              (hashtable-size . g$hashtable-size$5154$15i0ov)
              (hashtable-set! . g$hashtable-set!$5156$15i0ov)
              (hashtable-ref . g$hashtable-ref$5155$15i0ov)
              (hashtable-delete! . g$hashtable-delete!$5157$15i0ov)
              (hashtable-contains? . g$hashtable-contains?$5158$15i0ov)
              (hashtable-clear! . g$hashtable-clear!$5160$15i0ov)
              (call-with-output-file . g$call-with-output-file$6133$15i0ov)
              (call-with-input-file . g$call-with-input-file$6132$15i0ov)
              (with-output-to-file . g$with-output-to-file$6131$15i0ov)
              (with-input-from-file . g$with-input-from-file$6130$15i0ov)
              (port? . g$port?$6097$15i0ov)
              (open-string-output-port . g$open-string-output-port$6096$15i0ov)
              (make-i/o-write-error . g$make-i/o-write-error$6022$15i0ov)
              (make-i/o-read-error . g$make-i/o-read-error$6016$15i0ov)
              (make-i/o-port-error . g$make-i/o-port-error$6068$15i0ov)
              (make-i/o-invalid-position-error
                .
                g$make-i/o-invalid-position-error$6028$15i0ov)
              (make-i/o-filename-error . g$make-i/o-filename-error$6036$15i0ov)
              (make-i/o-file-protection-error
                .
                g$make-i/o-file-protection-error$6044$15i0ov)
              (make-i/o-file-is-read-only-error
                .
                g$make-i/o-file-is-read-only-error$6050$15i0ov)
              (make-i/o-file-does-not-exist-error
                .
                g$make-i/o-file-does-not-exist-error$6062$15i0ov)
              (make-i/o-file-already-exists-error
                .
                g$make-i/o-file-already-exists-error$6056$15i0ov)
              (make-i/o-error . g$make-i/o-error$6010$15i0ov)
              (make-i/o-encoding-error . g$make-i/o-encoding-error$6082$15i0ov)
              (make-i/o-decoding-error . g$make-i/o-decoding-error$6076$15i0ov)
              (i/o-write-error? . g$i/o-write-error?$6023$15i0ov)
              (i/o-read-error? . g$i/o-read-error?$6017$15i0ov)
              (i/o-port-error? . g$i/o-port-error?$6070$15i0ov)
              (i/o-invalid-position-error?
                .
                g$i/o-invalid-position-error?$6030$15i0ov)
              (i/o-error-position . g$i/o-error-position$6031$15i0ov)
              (i/o-filename-error? . g$i/o-filename-error?$6038$15i0ov)
              (i/o-file-protection-error?
                .
                g$i/o-file-protection-error?$6045$15i0ov)
              (i/o-file-is-read-only-error?
                .
                g$i/o-file-is-read-only-error?$6051$15i0ov)
              (i/o-file-does-not-exist-error?
                .
                g$i/o-file-does-not-exist-error?$6063$15i0ov)
              (i/o-file-already-exists-error?
                .
                g$i/o-file-already-exists-error?$6057$15i0ov)
              (i/o-error? . g$i/o-error?$6011$15i0ov)
              (i/o-error-port . g$i/o-error-port$6071$15i0ov)
              (i/o-error-filename . g$i/o-error-filename$6039$15i0ov)
              (i/o-encoding-error? . g$i/o-encoding-error?$6084$15i0ov)
              (i/o-encoding-error-char . g$i/o-encoding-error-char$6085$15i0ov)
              (i/o-decoding-error? . g$i/o-decoding-error?$6077$15i0ov)
              (scheme-report-environment
                .
                g$scheme-report-environment$10924$15i0ov)
              (quotient . g$quotient$5723$15i0ov)
              (null-environment . g$null-environment$10923$15i0ov)
              (remainder . g$remainder$5724$15i0ov)
              (modulo . g$modulo$5725$15i0ov)
              (force . g$force$5727$15i0ov)
              (command-line . g$command-line$10992$15i0ov)
              (remove . g$remove$5364$15i0ov)
              (remv . g$remv$5365$15i0ov)
              (remp . g$remp$5350$15i0ov)
              (remq . g$remq$5366$15i0ov)
              (partition . g$partition$5349$15i0ov)
              (memp . g$memp$5356$15i0ov)
              (member . g$member$5355$15i0ov)
              (exists . g$exists$5360$15i0ov)
              (for-all . g$for-all$5359$15i0ov)
              (fold-right . g$fold-right$5363$15i0ov)
              (fold-left . g$fold-left$5362$15i0ov)
              (find . g$find$5348$15i0ov)
              (filter . g$filter$5351$15i0ov)
              (cons* . g$cons*$5361$15i0ov)
              (assv . g$assv$5352$15i0ov)
              (assp . g$assp$5354$15i0ov)
              (assoc . g$assoc$5353$15i0ov)
              (eval . g$eval$10926$15i0ov)
              (environment . g$environment$10922$15i0ov)
              (make-enumeration . g$make-enumeration$6261$15i0ov)
              (enum-set=? . g$enum-set=?$6268$15i0ov)
              (enum-set-universe . g$enum-set-universe$6262$15i0ov)
              (enum-set-union . g$enum-set-union$6269$15i0ov)
              (enum-set-subset? . g$enum-set-subset?$6267$15i0ov)
              (enum-set-projection . g$enum-set-projection$6273$15i0ov)
              (enum-set-member? . g$enum-set-member?$6266$15i0ov)
              (enum-set-intersection . g$enum-set-intersection$6270$15i0ov)
              (enum-set-indexer . g$enum-set-indexer$6263$15i0ov)
              (enum-set-difference . g$enum-set-difference$6271$15i0ov)
              (enum-set-constructor . g$enum-set-constructor$6264$15i0ov)
              (enum-set-complement . g$enum-set-complement$6272$15i0ov)
              (enum-set->list . g$enum-set->list$6265$15i0ov)
              (who-condition? . g$who-condition?$5661$15i0ov)
              (warning? . g$warning?$5622$15i0ov)
              (violation? . g$violation?$5640$15i0ov)
              (undefined-violation? . g$undefined-violation?$5696$15i0ov)
              (syntax-violation? . g$syntax-violation?$5688$15i0ov)
              (syntax-violation-subform
                .
                g$syntax-violation-subform$5690$15i0ov)
              (syntax-violation-form . g$syntax-violation-form$5689$15i0ov)
              (syntax-violation . g$syntax-violation$10943$15i0ov)
              (serious-condition? . g$serious-condition?$5628$15i0ov)
              (non-continuable-violation?
                .
                g$non-continuable-violation?$5668$15i0ov)
              (message-condition? . g$message-condition?$5615$15i0ov)
              (make-who-condition . g$make-who-condition$5659$15i0ov)
              (make-warning . g$make-warning$5621$15i0ov)
              (make-violation . g$make-violation$5639$15i0ov)
              (make-undefined-violation
                .
                g$make-undefined-violation$5695$15i0ov)
              (make-syntax-violation . g$make-syntax-violation$5685$15i0ov)
              (make-serious-condition . g$make-serious-condition$5627$15i0ov)
              (make-non-continuable-violation
                .
                g$make-non-continuable-violation$5667$15i0ov)
              (make-message-condition . g$make-message-condition$5613$15i0ov)
              (make-lexical-violation . g$make-lexical-violation$5679$15i0ov)
              (make-irritants-condition
                .
                g$make-irritants-condition$5651$15i0ov)
              (make-implementation-restriction-violation
                .
                g$make-implementation-restriction-violation$5673$15i0ov)
              (make-error . g$make-error$5633$15i0ov)
              (make-assertion-violation
                .
                g$make-assertion-violation$5645$15i0ov)
              (lexical-violation? . g$lexical-violation?$5680$15i0ov)
              (irritants-condition? . g$irritants-condition?$5653$15i0ov)
              (implementation-restriction-violation?
                .
                g$implementation-restriction-violation?$5674$15i0ov)
              (error? . g$error?$5634$15i0ov)
              (condition-who . g$condition-who$5662$15i0ov)
              (condition-message . g$condition-message$5616$15i0ov)
              (condition-irritants . g$condition-irritants$5654$15i0ov)
              (assertion-violation? . g$assertion-violation?$5646$15i0ov)
              (native-endianness . g$native-endianness$5478$15i0ov)
              (bytevector-u64-set! . g$bytevector-u64-set!$5499$15i0ov)
              (bytevector-u64-ref . g$bytevector-u64-ref$5495$15i0ov)
              (bytevector-u64-native-set!
                .
                g$bytevector-u64-native-set!$5501$15i0ov)
              (bytevector-u64-native-ref
                .
                g$bytevector-u64-native-ref$5497$15i0ov)
              (bytevector-u32-set! . g$bytevector-u32-set!$5491$15i0ov)
              (bytevector-u32-ref . g$bytevector-u32-ref$5487$15i0ov)
              (bytevector-u32-native-set!
                .
                g$bytevector-u32-native-set!$5493$15i0ov)
              (bytevector-u32-native-ref
                .
                g$bytevector-u32-native-ref$5489$15i0ov)
              (bytevector-u16-set! . g$bytevector-u16-set!$5483$15i0ov)
              (bytevector-u16-ref . g$bytevector-u16-ref$5479$15i0ov)
              (bytevector-u16-native-set!
                .
                g$bytevector-u16-native-set!$5485$15i0ov)
              (bytevector-u16-native-ref
                .
                g$bytevector-u16-native-ref$5481$15i0ov)
              (bytevector-s64-set! . g$bytevector-s64-set!$5500$15i0ov)
              (bytevector-s64-ref . g$bytevector-s64-ref$5496$15i0ov)
              (bytevector-s64-native-set!
                .
                g$bytevector-s64-native-set!$5502$15i0ov)
              (bytevector-s64-native-ref
                .
                g$bytevector-s64-native-ref$5498$15i0ov)
              (bytevector-s32-set! . g$bytevector-s32-set!$5492$15i0ov)
              (bytevector-s32-ref . g$bytevector-s32-ref$5488$15i0ov)
              (bytevector-s32-native-set!
                .
                g$bytevector-s32-native-set!$5494$15i0ov)
              (bytevector-s32-native-ref
                .
                g$bytevector-s32-native-ref$5490$15i0ov)
              (bytevector-s16-set! . g$bytevector-s16-set!$5484$15i0ov)
              (bytevector-s16-ref . g$bytevector-s16-ref$5480$15i0ov)
              (bytevector-s16-native-set!
                .
                g$bytevector-s16-native-set!$5486$15i0ov)
              (bytevector-s16-native-ref
                .
                g$bytevector-s16-native-ref$5482$15i0ov)
              (bytevector-ieee-single-native-set!
                .
                g$bytevector-ieee-single-native-set!$5505$15i0ov)
              (bytevector-ieee-single-native-ref
                .
                g$bytevector-ieee-single-native-ref$5503$15i0ov)
              (bytevector-ieee-double-native-set!
                .
                g$bytevector-ieee-double-native-set!$5506$15i0ov)
              (bytevector-ieee-double-native-ref
                .
                g$bytevector-ieee-double-native-ref$5504$15i0ov)
              (no-nans-violation? . g$no-nans-violation?$5925$15i0ov)
              (no-infinities-violation?
                .
                g$no-infinities-violation?$5919$15i0ov)
              (make-no-nans-violation . g$make-no-nans-violation$5924$15i0ov)
              (make-no-infinities-violation
                .
                g$make-no-infinities-violation$5918$15i0ov)
              (fxrotate-bit-field . g$fxrotate-bit-field$5901$15i0ov)
              (fxif . g$fxif$5895$15i0ov)
              (fxcopy-bit-field . g$fxcopy-bit-field$5898$15i0ov)
              (fxcopy-bit . g$fxcopy-bit$5896$15i0ov)
              (fxbit-field . g$fxbit-field$5897$15i0ov)
              (fxarithmetic-shift-right
                .
                g$fxarithmetic-shift-right$5900$15i0ov)
              (fxarithmetic-shift-left . g$fxarithmetic-shift-left$5899$15i0ov)
              (bitwise-rotate-bit-field
                .
                g$bitwise-rotate-bit-field$5847$15i0ov)
              (bitwise-if . g$bitwise-if$5841$15i0ov)
              (bitwise-copy-bit-field . g$bitwise-copy-bit-field$5844$15i0ov)
              (bitwise-copy-bit . g$bitwise-copy-bit$5842$15i0ov)
              (bitwise-arithmetic-shift-right
                .
                g$bitwise-arithmetic-shift-right$5846$15i0ov)
              (bitwise-arithmetic-shift-left
                .
                g$bitwise-arithmetic-shift-left$5845$15i0ov)
              (rationalize . g$rationalize$4917$15i0ov)
              (cddddr . g$cddddr$4916$15i0ov)
              (cdddar . g$cdddar$4915$15i0ov)
              (cddadr . g$cddadr$4914$15i0ov)
              (cddaar . g$cddaar$4913$15i0ov)
              (cdaddr . g$cdaddr$4912$15i0ov)
              (cdadar . g$cdadar$4911$15i0ov)
              (cdaadr . g$cdaadr$4910$15i0ov)
              (cdaaar . g$cdaaar$4909$15i0ov)
              (cadddr . g$cadddr$4908$15i0ov)
              (caddar . g$caddar$4907$15i0ov)
              (cadadr . g$cadadr$4906$15i0ov)
              (cadaar . g$cadaar$4905$15i0ov)
              (caaddr . g$caaddr$4904$15i0ov)
              (caadar . g$caadar$4903$15i0ov)
              (caaadr . g$caaadr$4902$15i0ov)
              (caaaar . g$caaaar$4901$15i0ov)
              (cdddr . g$cdddr$4900$15i0ov)
              (cddar . g$cddar$4899$15i0ov)
              (cdadr . g$cdadr$4898$15i0ov)
              (cdaar . g$cdaar$4897$15i0ov)
              (caddr . g$caddr$4896$15i0ov)
              (cadar . g$cadar$4895$15i0ov)
              (caadr . g$caadr$4894$15i0ov)
              (caaar . g$caaar$4893$15i0ov)
              (cddr . g$cddr$4892$15i0ov)
              (cdar . g$cdar$4891$15i0ov)
              (cadr . g$cadr$4890$15i0ov)
              (caar . g$caar$4889$15i0ov)
              (make-promise . g$make-promise$5726$15i0ov)
              (load/args . g$load/args$10994$15i0ov)
              (printf . g$printf$6297$15i0ov)
              (fprintf . g$fprintf$6298$15i0ov)
              (format . g$format$6299$15i0ov)
              (trace-printer . g$trace-printer$10991$15i0ov)
              (make-traced-macro . g$make-traced-macro$6303$15i0ov)
              (assertion-error . g$assertion-error$10939$15i0ov)
              (make-parameter . g$make-parameter$6384$15i0ov)
              (environment-symbols . g$environment-symbols$10920$15i0ov)
              (interaction-environment-symbols
                .
                g$interaction-environment-symbols$10919$15i0ov)
              (library-path . g$library-path$6914$15i0ov)
              (library-extensions . g$library-extensions$6915$15i0ov)
              (installed-libraries . g$installed-libraries$6935$15i0ov)
              (expand . g$expand$10925$15i0ov)))))))
    (g$install-library$6930$15i0ov
      'g$12165$15i0ov
      '(ironscheme)
      '()
      '()
      '()
      '()
      '((tanh . g$12102$15i0ov)
        (cosh . g$12101$15i0ov)
        (sinh . g$12100$15i0ov)
        (make-guid . g$12099$15i0ov)
        (unspecified? . g$12098$15i0ov)
        (make-trace . g$12097$15i0ov)
        (make-list . g$12096$15i0ov)
        (last-pair . g$12095$15i0ov)
        (load-r5rs . g$12094$15i0ov)
        (license . g$12093$15i0ov)
        (stacktrace . g$12092$15i0ov)
        (ironscheme-build . g$11494$15i0ov)
        (set-symbol-value! . g$12078$15i0ov)
        (symbol-value . g$12077$15i0ov)
        (ungensym . g$12076$15i0ov)
        (gensym . g$12075$15i0ov)
        (void . g$12074$15i0ov)
        (compile-system-libraries . g$11496$15i0ov)
        (compile->closure . g$11498$15i0ov)
        (compile . g$11497$15i0ov)
        (load . g$11493$15i0ov)
        (interaction-environment . g$8559$15i0ov)
        (string-upcase . g$12070$15i0ov)
        (string-titlecase . g$12069$15i0ov)
        (string-normalize-nfkd . g$12068$15i0ov)
        (string-normalize-nfkc . g$12067$15i0ov)
        (string-normalize-nfd . g$12066$15i0ov)
        (string-normalize-nfc . g$12065$15i0ov)
        (string-foldcase . g$12064$15i0ov)
        (string-downcase . g$12063$15i0ov)
        (string-ci>? . g$12062$15i0ov)
        (string-ci>=? . g$12061$15i0ov)
        (string-ci=? . g$12060$15i0ov)
        (string-ci<? . g$12059$15i0ov)
        (string-ci<=? . g$12058$15i0ov)
        (char-whitespace? . g$12057$15i0ov)
        (char-upper-case? . g$12056$15i0ov)
        (char-title-case? . g$12055$15i0ov)
        (char-numeric? . g$12054$15i0ov)
        (char-lower-case? . g$12053$15i0ov)
        (char-general-category . g$12052$15i0ov)
        (char-upcase . g$12051$15i0ov)
        (char-titlecase . g$12050$15i0ov)
        (char-foldcase . g$12049$15i0ov)
        (char-downcase . g$12048$15i0ov)
        (char-ci>? . g$12047$15i0ov)
        (char-ci>=? . g$12046$15i0ov)
        (char-ci=? . g$12045$15i0ov)
        (char-ci<? . g$12044$15i0ov)
        (char-ci<=? . g$12043$15i0ov)
        (char-alphabetic? . g$12042$15i0ov)
        (variable-transformer-procedure . g$8160$15i0ov)
        (variable-transformer? . g$8159$15i0ov)
        (make-variable-transformer . g$8158$15i0ov)
        (identifier? . g$8554$15i0ov)
        (generate-temporaries . g$8543$15i0ov)
        (free-identifier=? . g$8544$15i0ov)
        (syntax->datum . g$8556$15i0ov)
        (datum->syntax . g$8555$15i0ov)
        (bound-identifier=? . g$8545$15i0ov)
        (record-type-descriptor? . g$12041$15i0ov)
        (record-predicate . g$12040$15i0ov)
        (record-mutator . g$12039$15i0ov)
        (record-constructor . g$12038$15i0ov)
        (record-accessor . g$12037$15i0ov)
        (make-record-type-descriptor . g$12036$15i0ov)
        (make-record-constructor-descriptor . g$12035$15i0ov)
        (record? . g$12034$15i0ov)
        (record-type-uid . g$12033$15i0ov)
        (record-type-sealed? . g$12032$15i0ov)
        (record-type-parent . g$12031$15i0ov)
        (record-type-opaque? . g$12030$15i0ov)
        (record-type-name . g$12029$15i0ov)
        (record-type-generative? . g$12028$15i0ov)
        (record-type-field-names . g$12027$15i0ov)
        (record-rtd . g$12026$15i0ov)
        (record-field-mutable? . g$12025$15i0ov)
        (delete-file . g$6174$15i0ov)
        (file-exists? . g$6173$15i0ov)
        (vector-sort! . g$12024$15i0ov)
        (vector-sort . g$12023$15i0ov)
        (list-sort . g$6687$15i0ov)
        (symbol-hash . g$12022$15i0ov)
        (string-ci-hash . g$12021$15i0ov)
        (string-hash . g$12020$15i0ov)
        (equal-hash . g$12019$15i0ov)
        (hashtable-equivalence-function . g$12018$15i0ov)
        (make-hashtable . g$12017$15i0ov)
        (hashtable-hash-function . g$12016$15i0ov)
        (make-eqv-hashtable . g$6141$15i0ov)
        (make-eq-hashtable . g$6140$15i0ov)
        (hashtable? . g$12015$15i0ov)
        (hashtable-update! . g$6147$15i0ov)
        (hashtable-size . g$6142$15i0ov)
        (hashtable-set! . g$6144$15i0ov)
        (hashtable-ref . g$6143$15i0ov)
        (hashtable-mutable? . g$12014$15i0ov)
        (hashtable-keys . g$12013$15i0ov)
        (hashtable-entries . g$12012$15i0ov)
        (hashtable-delete! . g$6145$15i0ov)
        (hashtable-copy . g$12011$15i0ov)
        (hashtable-contains? . g$6146$15i0ov)
        (hashtable-clear! . g$6148$15i0ov)
        (call-with-output-file . g$7099$15i0ov)
        (call-with-input-file . g$7098$15i0ov)
        (write-char . g$12010$15i0ov)
        (write . g$12009$15i0ov)
        (with-output-to-file . g$7097$15i0ov)
        (with-input-from-file . g$7096$15i0ov)
        (read-char . g$12008$15i0ov)
        (read . g$12007$15i0ov)
        (peek-char . g$12006$15i0ov)
        (open-output-file . g$12005$15i0ov)
        (open-input-file . g$12004$15i0ov)
        (newline . g$12003$15i0ov)
        (display . g$12002$15i0ov)
        (close-output-port . g$12001$15i0ov)
        (close-input-port . g$12000$15i0ov)
        (eof-object? . g$11999$15i0ov)
        (eof-object . g$11998$15i0ov)
        (current-error-port . g$11997$15i0ov)
        (current-output-port . g$11996$15i0ov)
        (current-input-port . g$11995$15i0ov)
        (output-port? . g$11994$15i0ov)
        (input-port? . g$11993$15i0ov)
        (utf-8-codec . g$11992$15i0ov)
        (utf-16-codec . g$11991$15i0ov)
        (transcoder-error-handling-mode . g$11990$15i0ov)
        (transcoder-eol-style . g$11989$15i0ov)
        (transcoder-codec . g$11988$15i0ov)
        (transcoded-port . g$11987$15i0ov)
        (textual-port? . g$11986$15i0ov)
        (string->bytevector . g$11985$15i0ov)
        (standard-output-port . g$11984$15i0ov)
        (standard-input-port . g$11983$15i0ov)
        (standard-error-port . g$11982$15i0ov)
        (set-port-position! . g$11981$15i0ov)
        (put-u8 . g$11980$15i0ov)
        (put-string . g$11979$15i0ov)
        (put-datum . g$11978$15i0ov)
        (put-char . g$11977$15i0ov)
        (put-bytevector . g$11976$15i0ov)
        (port? . g$7075$15i0ov)
        (port-transcoder . g$11975$15i0ov)
        (port-position . g$11974$15i0ov)
        (port-has-set-port-position!? . g$11973$15i0ov)
        (port-has-port-position? . g$11972$15i0ov)
        (port-eof? . g$11971$15i0ov)
        (output-port-buffer-mode . g$11970$15i0ov)
        (open-string-output-port . g$7074$15i0ov)
        (open-string-input-port . g$11969$15i0ov)
        (open-file-output-port . g$11968$15i0ov)
        (open-file-input/output-port . g$11967$15i0ov)
        (open-file-input-port . g$11966$15i0ov)
        (open-bytevector-output-port . g$11965$15i0ov)
        (open-bytevector-input-port . g$11964$15i0ov)
        (native-transcoder . g$11963$15i0ov)
        (native-eol-style . g$11962$15i0ov)
        (make-transcoder . g$11961$15i0ov)
        (latin-1-codec . g$11960$15i0ov)
        (make-i/o-write-error . g$6931$15i0ov)
        (make-i/o-read-error . g$6917$15i0ov)
        (make-i/o-port-error . g$7036$15i0ov)
        (make-i/o-invalid-position-error . g$6946$15i0ov)
        (make-i/o-filename-error . g$6963$15i0ov)
        (make-i/o-file-protection-error . g$6979$15i0ov)
        (make-i/o-file-is-read-only-error . g$6993$15i0ov)
        (make-i/o-file-does-not-exist-error . g$7021$15i0ov)
        (make-i/o-file-already-exists-error . g$7007$15i0ov)
        (make-i/o-error . g$6903$15i0ov)
        (make-i/o-encoding-error . g$7067$15i0ov)
        (make-i/o-decoding-error . g$7052$15i0ov)
        (make-custom-textual-output-port . g$11959$15i0ov)
        (make-custom-textual-input/output-port . g$11958$15i0ov)
        (make-custom-textual-input-port . g$11957$15i0ov)
        (make-custom-binary-output-port . g$11956$15i0ov)
        (make-custom-binary-input/output-port . g$11955$15i0ov)
        (make-custom-binary-input-port . g$11954$15i0ov)
        (make-bytevector . g$11953$15i0ov)
        (lookahead-u8 . g$11952$15i0ov)
        (lookahead-char . g$11951$15i0ov)
        (i/o-write-error? . g$6932$15i0ov)
        (i/o-read-error? . g$6918$15i0ov)
        (i/o-port-error? . g$7038$15i0ov)
        (i/o-invalid-position-error? . g$6948$15i0ov)
        (i/o-error-position . g$6949$15i0ov)
        (i/o-filename-error? . g$6965$15i0ov)
        (i/o-file-protection-error? . g$6980$15i0ov)
        (i/o-file-is-read-only-error? . g$6994$15i0ov)
        (i/o-file-does-not-exist-error? . g$7022$15i0ov)
        (i/o-file-already-exists-error? . g$7008$15i0ov)
        (i/o-error? . g$6904$15i0ov)
        (i/o-error-port . g$7039$15i0ov)
        (i/o-error-filename . g$6966$15i0ov)
        (i/o-encoding-error? . g$7069$15i0ov)
        (i/o-encoding-error-char . g$7070$15i0ov)
        (i/o-decoding-error? . g$7053$15i0ov)
        (get-u8 . g$11950$15i0ov)
        (get-string-n! . g$11949$15i0ov)
        (get-string-n . g$11948$15i0ov)
        (get-string-all . g$11947$15i0ov)
        (get-line . g$11946$15i0ov)
        (get-datum . g$11945$15i0ov)
        (get-char . g$11944$15i0ov)
        (get-bytevector-some . g$11943$15i0ov)
        (get-bytevector-n! . g$11942$15i0ov)
        (get-bytevector-n . g$11941$15i0ov)
        (get-bytevector-all . g$11940$15i0ov)
        (flush-output-port . g$11939$15i0ov)
        (close-port . g$11938$15i0ov)
        (call-with-string-output-port . g$11937$15i0ov)
        (call-with-port . g$11936$15i0ov)
        (call-with-bytevector-output-port . g$11935$15i0ov)
        (bytevector->string . g$11934$15i0ov)
        (buffer-mode? . g$11933$15i0ov)
        (binary-port? . g$11932$15i0ov)
        (scheme-report-environment . g$8534$15i0ov)
        (quotient . g$6667$15i0ov)
        (null-environment . g$8533$15i0ov)
        (remainder . g$6668$15i0ov)
        (modulo . g$6669$15i0ov)
        (inexact->exact . g$11931$15i0ov)
        (force . g$6671$15i0ov)
        (exact->inexact . g$11930$15i0ov)
        (exit . g$11929$15i0ov)
        (command-line . g$11490$15i0ov)
        (string-fill! . g$11928$15i0ov)
        (string-set! . g$11927$15i0ov)
        (set-cdr! . g$11926$15i0ov)
        (set-car! . g$11925$15i0ov)
        (remove . g$6254$15i0ov)
        (remv . g$6255$15i0ov)
        (remp . g$6240$15i0ov)
        (remq . g$6256$15i0ov)
        (partition . g$6239$15i0ov)
        (memv . g$11924$15i0ov)
        (memq . g$11923$15i0ov)
        (memp . g$6246$15i0ov)
        (member . g$6245$15i0ov)
        (exists . g$6250$15i0ov)
        (for-all . g$6249$15i0ov)
        (fold-right . g$6253$15i0ov)
        (fold-left . g$6252$15i0ov)
        (find . g$6238$15i0ov)
        (filter . g$6241$15i0ov)
        (cons* . g$6251$15i0ov)
        (assv . g$6242$15i0ov)
        (assq . g$11922$15i0ov)
        (assp . g$6244$15i0ov)
        (assoc . g$6243$15i0ov)
        (with-exception-handler . g$11921$15i0ov)
        (raise-continuable . g$11920$15i0ov)
        (raise . g$11919$15i0ov)
        (eval . g$8536$15i0ov)
        (environment . g$8532$15i0ov)
        (make-enumeration . g$7156$15i0ov)
        (enum-set=? . g$7163$15i0ov)
        (enum-set-universe . g$7157$15i0ov)
        (enum-set-union . g$7164$15i0ov)
        (enum-set-subset? . g$7162$15i0ov)
        (enum-set-projection . g$7168$15i0ov)
        (enum-set-member? . g$7161$15i0ov)
        (enum-set-intersection . g$7165$15i0ov)
        (enum-set-indexer . g$7158$15i0ov)
        (enum-set-difference . g$7166$15i0ov)
        (enum-set-constructor . g$7159$15i0ov)
        (enum-set-complement . g$7167$15i0ov)
        (enum-set->list . g$7160$15i0ov)
        (who-condition? . g$6578$15i0ov)
        (warning? . g$6489$15i0ov)
        (violation? . g$6531$15i0ov)
        (undefined-violation? . g$6655$15i0ov)
        (syntax-violation? . g$6639$15i0ov)
        (syntax-violation-subform . g$6641$15i0ov)
        (syntax-violation-form . g$6640$15i0ov)
        (syntax-violation . g$8553$15i0ov)
        (simple-conditions . g$11918$15i0ov)
        (serious-condition? . g$6503$15i0ov)
        (non-continuable-violation? . g$6593$15i0ov)
        (message-condition? . g$6474$15i0ov)
        (make-who-condition . g$6576$15i0ov)
        (make-warning . g$6488$15i0ov)
        (make-violation . g$6530$15i0ov)
        (make-undefined-violation . g$6654$15i0ov)
        (make-syntax-violation . g$6636$15i0ov)
        (make-serious-condition . g$6502$15i0ov)
        (make-non-continuable-violation . g$6592$15i0ov)
        (make-message-condition . g$6472$15i0ov)
        (make-lexical-violation . g$6620$15i0ov)
        (make-irritants-condition . g$6559$15i0ov)
        (make-implementation-restriction-violation . g$6606$15i0ov)
        (make-error . g$6516$15i0ov)
        (make-assertion-violation . g$6544$15i0ov)
        (lexical-violation? . g$6621$15i0ov)
        (irritants-condition? . g$6561$15i0ov)
        (implementation-restriction-violation? . g$6607$15i0ov)
        (error? . g$6517$15i0ov)
        (condition-who . g$6579$15i0ov)
        (condition-predicate . g$11917$15i0ov)
        (condition-message . g$6475$15i0ov)
        (condition-irritants . g$6562$15i0ov)
        (condition-accessor . g$11916$15i0ov)
        (condition . g$11915$15i0ov)
        (assertion-violation? . g$6545$15i0ov)
        (condition? . g$11914$15i0ov)
        (utf32->string . g$11913$15i0ov)
        (utf16->string . g$11912$15i0ov)
        (utf8->string . g$11911$15i0ov)
        (uint-list->bytevector . g$11910$15i0ov)
        (u8-list->bytevector . g$11909$15i0ov)
        (string->utf8 . g$11908$15i0ov)
        (string->utf32 . g$11907$15i0ov)
        (string->utf16 . g$11906$15i0ov)
        (sint-list->bytevector . g$11905$15i0ov)
        (native-endianness . g$6330$15i0ov)
        (bytevector? . g$11904$15i0ov)
        (bytevector=? . g$11903$15i0ov)
        (bytevector-uint-set! . g$11902$15i0ov)
        (bytevector-uint-ref . g$11901$15i0ov)
        (bytevector-u8-set! . g$11900$15i0ov)
        (bytevector-u8-ref . g$11899$15i0ov)
        (bytevector-u64-set! . g$6351$15i0ov)
        (bytevector-u64-ref . g$6347$15i0ov)
        (bytevector-u64-native-set! . g$6353$15i0ov)
        (bytevector-u64-native-ref . g$6349$15i0ov)
        (bytevector-u32-set! . g$6343$15i0ov)
        (bytevector-u32-ref . g$6339$15i0ov)
        (bytevector-u32-native-set! . g$6345$15i0ov)
        (bytevector-u32-native-ref . g$6341$15i0ov)
        (bytevector-u16-set! . g$6335$15i0ov)
        (bytevector-u16-ref . g$6331$15i0ov)
        (bytevector-u16-native-set! . g$6337$15i0ov)
        (bytevector-u16-native-ref . g$6333$15i0ov)
        (bytevector-sint-set! . g$11898$15i0ov)
        (bytevector-sint-ref . g$11897$15i0ov)
        (bytevector-s8-set! . g$11896$15i0ov)
        (bytevector-s8-ref . g$11895$15i0ov)
        (bytevector-s64-set! . g$6352$15i0ov)
        (bytevector-s64-ref . g$6348$15i0ov)
        (bytevector-s64-native-set! . g$6354$15i0ov)
        (bytevector-s64-native-ref . g$6350$15i0ov)
        (bytevector-s32-set! . g$6344$15i0ov)
        (bytevector-s32-ref . g$6340$15i0ov)
        (bytevector-s32-native-set! . g$6346$15i0ov)
        (bytevector-s32-native-ref . g$6342$15i0ov)
        (bytevector-s16-set! . g$6336$15i0ov)
        (bytevector-s16-ref . g$6332$15i0ov)
        (bytevector-s16-native-set! . g$6338$15i0ov)
        (bytevector-s16-native-ref . g$6334$15i0ov)
        (bytevector-length . g$11894$15i0ov)
        (bytevector-ieee-single-set! . g$11893$15i0ov)
        (bytevector-ieee-single-ref . g$11892$15i0ov)
        (bytevector-ieee-single-native-set! . g$6357$15i0ov)
        (bytevector-ieee-single-native-ref . g$6355$15i0ov)
        (bytevector-ieee-double-set! . g$11891$15i0ov)
        (bytevector-ieee-double-ref . g$11890$15i0ov)
        (bytevector-ieee-double-native-set! . g$6358$15i0ov)
        (bytevector-ieee-double-native-ref . g$6356$15i0ov)
        (bytevector-fill! . g$11889$15i0ov)
        (bytevector-copy! . g$11888$15i0ov)
        (bytevector-copy . g$11887$15i0ov)
        (bytevector->uint-list . g$11886$15i0ov)
        (bytevector->u8-list . g$11885$15i0ov)
        (bytevector->sint-list . g$11884$15i0ov)
        (no-nans-violation? . g$6889$15i0ov)
        (no-infinities-violation? . g$6875$15i0ov)
        (make-no-nans-violation . g$6888$15i0ov)
        (make-no-infinities-violation . g$6874$15i0ov)
        (real->flonum . g$11883$15i0ov)
        (flzero? . g$11882$15i0ov)
        (fltruncate . g$11881$15i0ov)
        (fltan . g$11880$15i0ov)
        (flsqrt . g$11879$15i0ov)
        (flsin . g$11878$15i0ov)
        (flround . g$11877$15i0ov)
        (flpositive? . g$11876$15i0ov)
        (flonum? . g$11875$15i0ov)
        (flodd? . g$11874$15i0ov)
        (flnumerator . g$11873$15i0ov)
        (flnegative? . g$11872$15i0ov)
        (flnan? . g$11871$15i0ov)
        (flmod0 . g$11870$15i0ov)
        (flmod . g$11869$15i0ov)
        (flmin . g$11868$15i0ov)
        (flmax . g$11867$15i0ov)
        (fllog . g$11866$15i0ov)
        (flinteger? . g$11865$15i0ov)
        (flinfinite? . g$11864$15i0ov)
        (flfloor . g$11863$15i0ov)
        (flfinite? . g$11862$15i0ov)
        (flexpt . g$11861$15i0ov)
        (flexp . g$11860$15i0ov)
        (fleven? . g$11859$15i0ov)
        (fldiv0-and-mod0 . g$11858$15i0ov)
        (fldiv0 . g$11857$15i0ov)
        (fldiv-and-mod . g$11856$15i0ov)
        (fldiv . g$11855$15i0ov)
        (fldenominator . g$11854$15i0ov)
        (flcos . g$11853$15i0ov)
        (flceiling . g$11852$15i0ov)
        (flatan . g$11851$15i0ov)
        (flasin . g$11850$15i0ov)
        (flacos . g$11849$15i0ov)
        (flabs . g$11848$15i0ov)
        (fl>? . g$11847$15i0ov)
        (fl>=? . g$11846$15i0ov)
        (fl=? . g$11845$15i0ov)
        (fl<? . g$11844$15i0ov)
        (fl<=? . g$11843$15i0ov)
        (fl/ . g$11842$15i0ov)
        (fl- . g$11841$15i0ov)
        (fl+ . g$11840$15i0ov)
        (fl* . g$11839$15i0ov)
        (fixnum->flonum . g$11838$15i0ov)
        (fxzero? . g$11837$15i0ov)
        (fxxor . g$11836$15i0ov)
        (fxrotate-bit-field . g$6820$15i0ov)
        (fxreverse-bit-field . g$11835$15i0ov)
        (fxpositive? . g$11834$15i0ov)
        (fxodd? . g$11833$15i0ov)
        (fxnot . g$11832$15i0ov)
        (fxnegative? . g$11831$15i0ov)
        (fxmod0 . g$11830$15i0ov)
        (fxmod . g$11829$15i0ov)
        (fxmin . g$11828$15i0ov)
        (fxmax . g$11827$15i0ov)
        (fxlength . g$11826$15i0ov)
        (fxior . g$11825$15i0ov)
        (fxif . g$6814$15i0ov)
        (fxfirst-bit-set . g$11824$15i0ov)
        (fxeven? . g$11823$15i0ov)
        (fxdiv0-and-mod0 . g$11822$15i0ov)
        (fxdiv0 . g$11821$15i0ov)
        (fxdiv-and-mod . g$11820$15i0ov)
        (fxdiv . g$11819$15i0ov)
        (fxcopy-bit-field . g$6817$15i0ov)
        (fxcopy-bit . g$6815$15i0ov)
        (fxbit-set? . g$11818$15i0ov)
        (fxbit-field . g$6816$15i0ov)
        (fxbit-count . g$11817$15i0ov)
        (fxarithmetic-shift-right . g$6819$15i0ov)
        (fxarithmetic-shift-left . g$6818$15i0ov)
        (fxarithmetic-shift . g$11816$15i0ov)
        (fxand . g$11815$15i0ov)
        (fx>? . g$11814$15i0ov)
        (fx>=? . g$11813$15i0ov)
        (fx=? . g$11812$15i0ov)
        (fx<? . g$11811$15i0ov)
        (fx<=? . g$11810$15i0ov)
        (fx-/carry . g$11809$15i0ov)
        (fx- . g$11808$15i0ov)
        (fx+/carry . g$11807$15i0ov)
        (fx+ . g$11806$15i0ov)
        (fx*/carry . g$11805$15i0ov)
        (fx* . g$11804$15i0ov)
        (greatest-fixnum . g$11803$15i0ov)
        (least-fixnum . g$11802$15i0ov)
        (fixnum-width . g$11801$15i0ov)
        (fixnum? . g$11800$15i0ov)
        (bitwise-rotate-bit-field . g$6772$15i0ov)
        (bitwise-reverse-bit-field . g$11799$15i0ov)
        (bitwise-length . g$11798$15i0ov)
        (bitwise-if . g$6766$15i0ov)
        (bitwise-first-bit-set . g$11797$15i0ov)
        (bitwise-copy-bit-field . g$6769$15i0ov)
        (bitwise-copy-bit . g$6767$15i0ov)
        (bitwise-bit-set? . g$11796$15i0ov)
        (bitwise-bit-field . g$11795$15i0ov)
        (bitwise-bit-count . g$11794$15i0ov)
        (bitwise-xor . g$11793$15i0ov)
        (bitwise-ior . g$11792$15i0ov)
        (bitwise-and . g$11791$15i0ov)
        (bitwise-not . g$11790$15i0ov)
        (bitwise-arithmetic-shift-right . g$6771$15i0ov)
        (bitwise-arithmetic-shift-left . g$6770$15i0ov)
        (bitwise-arithmetic-shift . g$11789$15i0ov)
        (zero? . g$11788$15i0ov)
        (vector? . g$11787$15i0ov)
        (vector-set! . g$11786$15i0ov)
        (vector-ref . g$11785$15i0ov)
        (vector-map . g$11784$15i0ov)
        (vector-length . g$11783$15i0ov)
        (vector-for-each . g$11782$15i0ov)
        (vector-fill! . g$11781$15i0ov)
        (vector->list . g$11780$15i0ov)
        (vector . g$11779$15i0ov)
        (values . g$11778$15i0ov)
        (truncate . g$11777$15i0ov)
        (tan . g$11776$15i0ov)
        (symbol? . g$11775$15i0ov)
        (symbol=? . g$11774$15i0ov)
        (symbol->string . g$11773$15i0ov)
        (substring . g$11772$15i0ov)
        (string? . g$11771$15i0ov)
        (string>? . g$11770$15i0ov)
        (string>=? . g$11769$15i0ov)
        (string=? . g$11768$15i0ov)
        (string<? . g$11767$15i0ov)
        (string<=? . g$11766$15i0ov)
        (string-ref . g$11765$15i0ov)
        (string-length . g$11764$15i0ov)
        (string-for-each . g$11763$15i0ov)
        (string-copy . g$11762$15i0ov)
        (string-append . g$11761$15i0ov)
        (string->symbol . g$11760$15i0ov)
        (string->number . g$11759$15i0ov)
        (string->list . g$11758$15i0ov)
        (string . g$11757$15i0ov)
        (sqrt . g$11756$15i0ov)
        (sin . g$11755$15i0ov)
        (round . g$11754$15i0ov)
        (reverse . g$11753$15i0ov)
        (real? . g$11752$15i0ov)
        (real-valued? . g$11751$15i0ov)
        (real-part . g$11750$15i0ov)
        (rationalize . g$5790$15i0ov)
        (rational? . g$11749$15i0ov)
        (rational-valued? . g$11748$15i0ov)
        (procedure? . g$11747$15i0ov)
        (positive? . g$11746$15i0ov)
        (pair? . g$11745$15i0ov)
        (odd? . g$11744$15i0ov)
        (numerator . g$11743$15i0ov)
        (number? . g$11742$15i0ov)
        (number->string . g$11741$15i0ov)
        (null? . g$11740$15i0ov)
        (not . g$11739$15i0ov)
        (negative? . g$11738$15i0ov)
        (nan? . g$11737$15i0ov)
        (min . g$11736$15i0ov)
        (max . g$11735$15i0ov)
        (map . g$11734$15i0ov)
        (make-vector . g$11733$15i0ov)
        (make-string . g$11732$15i0ov)
        (make-rectangular . g$11731$15i0ov)
        (make-polar . g$11730$15i0ov)
        (magnitude . g$11729$15i0ov)
        (log . g$11728$15i0ov)
        (list? . g$11727$15i0ov)
        (list-tail . g$11726$15i0ov)
        (list-ref . g$11725$15i0ov)
        (list->vector . g$11724$15i0ov)
        (list->string . g$11723$15i0ov)
        (list . g$11722$15i0ov)
        (length . g$11721$15i0ov)
        (lcm . g$11720$15i0ov)
        (integer? . g$11719$15i0ov)
        (integer-valued? . g$11718$15i0ov)
        (integer->char . g$11717$15i0ov)
        (infinite? . g$11716$15i0ov)
        (inexact? . g$11715$15i0ov)
        (inexact . g$11714$15i0ov)
        (imag-part . g$11713$15i0ov)
        (gcd . g$11712$15i0ov)
        (for-each . g$11711$15i0ov)
        (floor . g$11710$15i0ov)
        (finite? . g$11709$15i0ov)
        (expt . g$11708$15i0ov)
        (exp . g$11707$15i0ov)
        (exact? . g$11706$15i0ov)
        (exact-integer-sqrt . g$11705$15i0ov)
        (exact . g$11704$15i0ov)
        (even? . g$11703$15i0ov)
        (error . g$11702$15i0ov)
        (eqv? . g$11701$15i0ov)
        (equal? . g$11700$15i0ov)
        (eq? . g$11699$15i0ov)
        (dynamic-wind . g$11698$15i0ov)
        (div0-and-mod0 . g$11697$15i0ov)
        (mod0 . g$11696$15i0ov)
        (div0 . g$11695$15i0ov)
        (div-and-mod . g$11694$15i0ov)
        (mod . g$11693$15i0ov)
        (div . g$11692$15i0ov)
        (denominator . g$11691$15i0ov)
        (cos . g$11690$15i0ov)
        (cons . g$11689$15i0ov)
        (complex? . g$11688$15i0ov)
        (char? . g$11687$15i0ov)
        (char>? . g$11686$15i0ov)
        (char>=? . g$11685$15i0ov)
        (char=? . g$11684$15i0ov)
        (char<? . g$11683$15i0ov)
        (char<=? . g$11682$15i0ov)
        (char->integer . g$11681$15i0ov)
        (ceiling . g$11680$15i0ov)
        (call-with-values . g$11679$15i0ov)
        (call/cc . g$11678$15i0ov)
        (call-with-current-continuation . g$11677$15i0ov)
        (cddddr . g$5789$15i0ov)
        (cdddar . g$5788$15i0ov)
        (cddadr . g$5787$15i0ov)
        (cddaar . g$5786$15i0ov)
        (cdaddr . g$5785$15i0ov)
        (cdadar . g$5784$15i0ov)
        (cdaadr . g$5783$15i0ov)
        (cdaaar . g$5782$15i0ov)
        (cadddr . g$5781$15i0ov)
        (caddar . g$5780$15i0ov)
        (cadadr . g$5779$15i0ov)
        (cadaar . g$5778$15i0ov)
        (caaddr . g$5777$15i0ov)
        (caadar . g$5776$15i0ov)
        (caaadr . g$5775$15i0ov)
        (caaaar . g$5774$15i0ov)
        (cdddr . g$5773$15i0ov)
        (cddar . g$5772$15i0ov)
        (cdadr . g$5771$15i0ov)
        (cdaar . g$5770$15i0ov)
        (caddr . g$5769$15i0ov)
        (cadar . g$5768$15i0ov)
        (caadr . g$5767$15i0ov)
        (caaar . g$5766$15i0ov)
        (cddr . g$5765$15i0ov)
        (cdar . g$5764$15i0ov)
        (cadr . g$5763$15i0ov)
        (caar . g$5762$15i0ov)
        (cdr . g$11676$15i0ov)
        (car . g$11675$15i0ov)
        (boolean? . g$11674$15i0ov)
        (boolean=? . g$11673$15i0ov)
        (atan . g$11672$15i0ov)
        (assertion-violation . g$11671$15i0ov)
        (asin . g$11670$15i0ov)
        (apply . g$11669$15i0ov)
        (append . g$11668$15i0ov)
        (angle . g$11667$15i0ov)
        (acos . g$11666$15i0ov)
        (abs . g$11665$15i0ov)
        (/ . g$11664$15i0ov)
        (* . g$11663$15i0ov)
        (- . g$11662$15i0ov)
        (+ . g$11661$15i0ov)
        (>= . g$11660$15i0ov)
        (> . g$11659$15i0ov)
        (= . g$11658$15i0ov)
        (<= . g$11657$15i0ov)
        (< . g$11656$15i0ov)
        (make-promise . g$6670$15i0ov)
        (load/args . g$11492$15i0ov)
        (printf . g$7240$15i0ov)
        (fprintf . g$7241$15i0ov)
        (format . g$7242$15i0ov)
        (get-arity . g$11651$15i0ov)
        (gc-collect . g$11650$15i0ov)
        (clr-type? . g$11649$15i0ov)
        (get-clr-type . g$11648$15i0ov)
        (vector-append . g$11646$15i0ov)
        (vector-filter . g$11645$15i0ov)
        (vector-reverse! . g$11644$15i0ov)
        (vector-contains? . g$11643$15i0ov)
        (vector-index-of . g$11642$15i0ov)
        (vector-copy . g$11641$15i0ov)
        (vector-binary-search . g$11640$15i0ov)
        (get-output-string . g$11639$15i0ov)
        (open-output-string . g$11638$15i0ov)
        (open-input-string . g$11637$15i0ov)
        (string-format . g$11636$15i0ov)
        (trace-printer . g$11489$15i0ov)
        (make-traced-procedure . g$11635$15i0ov)
        (make-traced-macro . g$7262$15i0ov)
        (pmap . g$11634$15i0ov)
        (time-it . g$11633$15i0ov)
        (make-parameter . g$7267$15i0ov)
        (library-locator . g$11632$15i0ov)
        (get-library-paths . g$11631$15i0ov)
        (environment-symbols . g$8530$15i0ov)
        (interaction-environment-symbols . g$8529$15i0ov)
        (library-path . g$7698$15i0ov)
        (library-extensions . g$7699$15i0ov)
        (installed-libraries . g$7719$15i0ov)
        (expand . g$8535$15i0ov)
        (&no-nans . g$11630$15i0ov)
        (&no-infinities . g$11629$15i0ov)
        (&i/o-encoding . g$11628$15i0ov)
        (&i/o-decoding . g$11627$15i0ov)
        (&i/o-port . g$11626$15i0ov)
        (&i/o-file-does-not-exist . g$11625$15i0ov)
        (&i/o-file-already-exists . g$11624$15i0ov)
        (&i/o-file-is-read-only . g$11623$15i0ov)
        (&i/o-file-protection . g$11622$15i0ov)
        (&i/o-filename . g$11621$15i0ov)
        (&i/o-invalid-position . g$11620$15i0ov)
        (&i/o-write . g$11619$15i0ov)
        (&i/o-read . g$11618$15i0ov)
        (&i/o . g$11617$15i0ov)
        (&non-continuable . g$11616$15i0ov)
        (&undefined . g$11615$15i0ov)
        (&syntax . g$11614$15i0ov)
        (&lexical . g$11613$15i0ov)
        (&implementation-restriction . g$11612$15i0ov)
        (&who . g$11610$15i0ov)
        (&irritants . g$11609$15i0ov)
        (&assertion . g$11608$15i0ov)
        (&violation . g$11607$15i0ov)
        (&error . g$11606$15i0ov)
        (&serious . g$11605$15i0ov)
        (&warning . g$11604$15i0ov)
        (&message . g$11603$15i0ov)
        (&condition . g$11602$15i0ov)
        (define-condition-type . g$11601$15i0ov)
        (define-enumeration . g$11600$15i0ov)
        (define-record-type . g$11599$15i0ov)
        (parent-rtd . g$11598$15i0ov)
        (nongenerative . g$11597$15i0ov)
        (opaque . g$11596$15i0ov)
        (sealed . g$11595$15i0ov)
        (protocol . g$11594$15i0ov)
        (parent . g$11593$15i0ov)
        (immutable . g$11592$15i0ov)
        (mutable . g$11591$15i0ov)
        (fields . g$11590$15i0ov)
        (error-handling-mode . g$11589$15i0ov)
        (file-options . g$11588$15i0ov)
        (buffer-mode . g$11587$15i0ov)
        (eol-style . g$11586$15i0ov)
        (guard . g$11585$15i0ov)
        (trace-letrec-syntax . g$11584$15i0ov)
        (trace-let-syntax . g$11583$15i0ov)
        (trace-define-syntax . g$11582$15i0ov)
        (trace-define . g$11581$15i0ov)
        (trace-lambda . g$11580$15i0ov)
        (unsyntax-splicing . g$11579$15i0ov)
        (unsyntax . g$11578$15i0ov)
        (unquote-splicing . g$11577$15i0ov)
        (unquote . g$11576$15i0ov)
        (_ . g$11575$15i0ov)
        (else . g$11574$15i0ov)
        (=> . g$11573$15i0ov)
        (... . g$11572$15i0ov)
        (assert . g$11571$15i0ov)
        (endianness . g$11570$15i0ov)
        (delay . g$11569$15i0ov)
        (time . g$11568$15i0ov)
        (or . g$11567$15i0ov)
        (and . g$11566$15i0ov)
        (do . g$11565$15i0ov)
        (cond . g$11564$15i0ov)
        (let* . g$11563$15i0ov)
        (let . g$11562$15i0ov)
        (identifier-syntax . g$11561$15i0ov)
        (with-syntax . g$11560$15i0ov)
        (quasisyntax . g$11559$15i0ov)
        (quasiquote . g$11558$15i0ov)
        (syntax-rules . g$11557$15i0ov)
        (include-into . g$11556$15i0ov)
        (include . g$11555$15i0ov)
        (let-values . g$11553$15i0ov)
        (let*-values . g$11552$15i0ov)
        (record-constructor-descriptor . g$11551$15i0ov)
        (record-type-descriptor . g$11550$15i0ov)
        (fluid-let-syntax . g$11549$15i0ov)
        (case . g$11548$15i0ov)
        (parameterize . g$11547$15i0ov)
        (unless . g$11546$15i0ov)
        (when . g$11545$15i0ov)
        (if . g$11544$15i0ov)
        (letrec* . g$11543$15i0ov)
        (letrec . g$11542$15i0ov)
        (case-lambda . g$11540$15i0ov)
        (lambda . g$11539$15i0ov)
        (syntax . g$11538$15i0ov)
        (syntax-case . g$11537$15i0ov)
        (quote . g$11536$15i0ov)
        (letrec-syntax . g$11534$15i0ov)
        (let-syntax . g$11533$15i0ov)
        (set! . g$11532$15i0ov)
        (import . g$11531$15i0ov)
        (library . g$11530$15i0ov)
        (begin . g$11529$15i0ov)
        (module . g$11528$15i0ov)
        (define-syntax . g$11527$15i0ov)
        (define . g$11526$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12166$15i0ov
      '(ironscheme library)
      '()
      '()
      '()
      '()
      '((get-library-paths . g$11631$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6930$15i0ov
      'g$12167$15i0ov
      '(ironscheme reader)
      '()
      '()
      '()
      '()
      '((annotation-stripped . g$12107$15i0ov)
        (annotation-source . g$12106$15i0ov)
        (annotation-expression . g$12105$15i0ov)
        (annotation? . g$12104$15i0ov)
        (read-annotated . g$12103$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6930$15i0ov
      'g$12168$15i0ov
      '(ironscheme serialization)
      '()
      '()
      '()
      '()
      '((load-serialized-library . g$12073$15i0ov)
        (serialize-library . g$12072$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6930$15i0ov
      'g$12169$15i0ov
      '(ironscheme core)
      '()
      '()
      '()
      '()
      '((variable-transformer-procedure . g$8160$15i0ov)
        (variable-transformer? . g$8159$15i0ov)
        (eqv-hash . g$11654$15i0ov)
        (eq-hash . g$11653$15i0ov)
        (reverse! . g$11652$15i0ov)
        (format . g$7242$15i0ov)
        (get-command-line . g$11647$15i0ov)
        (make-traced-procedure . g$11635$15i0ov)
        (assertion-error . g$8549$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6930$15i0ov
      'g$12170$15i0ov
      '(ironscheme records printer)
      '()
      '()
      '()
      '()
      '((make-record-printer . g$11655$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12171$15i0ov
      '(ironscheme clr internal)
      '()
      '()
      '()
      '()
      '((define-clr-class-internal . g$12091$15i0ov)
        (clr-field-set!-internal . g$12090$15i0ov)
        (clr-field-get-internal . g$12089$15i0ov)
        (clr-cast-internal . g$12088$15i0ov)
        (clr-call-internal . g$12087$15i0ov)
        (clr-new-internal . g$12086$15i0ov)
        (clr-new-array-internal . g$12085$15i0ov)
        (clr-is-internal . g$12084$15i0ov)
        (clr-reference-internal . g$12083$15i0ov)
        (clr-using-internal . g$12082$15i0ov)
        (clr-clear-usings-internal . g$12081$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12172$15i0ov
      '(psyntax null-environment-5)
      '()
      '()
      '()
      '()
      '((unquote-splicing . g$11577$15i0ov)
        (unquote . g$11576$15i0ov)
        (else . g$11574$15i0ov)
        (=> . g$11573$15i0ov)
        (delay . g$11569$15i0ov)
        (or . g$11567$15i0ov)
        (and . g$11566$15i0ov)
        (do . g$11565$15i0ov)
        (cond . g$11564$15i0ov)
        (let* . g$11563$15i0ov)
        (let . g$11562$15i0ov)
        (quasiquote . g$11558$15i0ov)
        (syntax-rules . g$11557$15i0ov)
        (case . g$11548$15i0ov)
        (if . g$11544$15i0ov)
        (letrec . g$11542$15i0ov)
        (lambda . g$11539$15i0ov)
        (quote . g$11536$15i0ov)
        (letrec-syntax . g$11534$15i0ov)
        (let-syntax . g$11533$15i0ov)
        (set! . g$11532$15i0ov)
        (begin . g$11529$15i0ov)
        (define-syntax . g$11527$15i0ov)
        (define . g$11526$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6930$15i0ov
      'g$12173$15i0ov
      '(psyntax scheme-report-environment-5)
      '()
      '()
      '()
      '()
      '((interaction-environment . g$8559$15i0ov)
        (char-ready? . g$12071$15i0ov)
        (string-ci>? . g$12062$15i0ov)
        (string-ci>=? . g$12061$15i0ov)
        (string-ci=? . g$12060$15i0ov)
        (string-ci<? . g$12059$15i0ov)
        (string-ci<=? . g$12058$15i0ov)
        (char-whitespace? . g$12057$15i0ov)
        (char-upper-case? . g$12056$15i0ov)
        (char-numeric? . g$12054$15i0ov)
        (char-lower-case? . g$12053$15i0ov)
        (char-upcase . g$12051$15i0ov)
        (char-downcase . g$12048$15i0ov)
        (char-ci>? . g$12047$15i0ov)
        (char-ci>=? . g$12046$15i0ov)
        (char-ci=? . g$12045$15i0ov)
        (char-ci<? . g$12044$15i0ov)
        (char-ci<=? . g$12043$15i0ov)
        (char-alphabetic? . g$12042$15i0ov)
        (call-with-output-file . g$7099$15i0ov)
        (call-with-input-file . g$7098$15i0ov)
        (write-char . g$12010$15i0ov)
        (write . g$12009$15i0ov)
        (with-output-to-file . g$7097$15i0ov)
        (with-input-from-file . g$7096$15i0ov)
        (read-char . g$12008$15i0ov)
        (read . g$12007$15i0ov)
        (peek-char . g$12006$15i0ov)
        (open-output-file . g$12005$15i0ov)
        (open-input-file . g$12004$15i0ov)
        (newline . g$12003$15i0ov)
        (display . g$12002$15i0ov)
        (close-output-port . g$12001$15i0ov)
        (close-input-port . g$12000$15i0ov)
        (eof-object? . g$11999$15i0ov)
        (eof-object . g$11998$15i0ov)
        (current-error-port . g$11997$15i0ov)
        (current-output-port . g$11996$15i0ov)
        (current-input-port . g$11995$15i0ov)
        (output-port? . g$11994$15i0ov)
        (input-port? . g$11993$15i0ov)
        (scheme-report-environment . g$8534$15i0ov)
        (quotient . g$6667$15i0ov)
        (null-environment . g$8533$15i0ov)
        (remainder . g$6668$15i0ov)
        (modulo . g$6669$15i0ov)
        (inexact->exact . g$11931$15i0ov)
        (force . g$6671$15i0ov)
        (exact->inexact . g$11930$15i0ov)
        (string-fill! . g$11928$15i0ov)
        (string-set! . g$11927$15i0ov)
        (set-cdr! . g$11926$15i0ov)
        (set-car! . g$11925$15i0ov)
        (memv . g$11924$15i0ov)
        (memq . g$11923$15i0ov)
        (member . g$6245$15i0ov)
        (assv . g$6242$15i0ov)
        (assq . g$11922$15i0ov)
        (assoc . g$6243$15i0ov)
        (eval . g$8536$15i0ov)
        (zero? . g$11788$15i0ov)
        (vector? . g$11787$15i0ov)
        (vector-set! . g$11786$15i0ov)
        (vector-ref . g$11785$15i0ov)
        (vector-length . g$11783$15i0ov)
        (vector-fill! . g$11781$15i0ov)
        (vector->list . g$11780$15i0ov)
        (vector . g$11779$15i0ov)
        (values . g$11778$15i0ov)
        (truncate . g$11777$15i0ov)
        (tan . g$11776$15i0ov)
        (symbol? . g$11775$15i0ov)
        (symbol->string . g$11773$15i0ov)
        (substring . g$11772$15i0ov)
        (string? . g$11771$15i0ov)
        (string>? . g$11770$15i0ov)
        (string>=? . g$11769$15i0ov)
        (string=? . g$11768$15i0ov)
        (string<? . g$11767$15i0ov)
        (string<=? . g$11766$15i0ov)
        (string-ref . g$11765$15i0ov)
        (string-length . g$11764$15i0ov)
        (string-copy . g$11762$15i0ov)
        (string-append . g$11761$15i0ov)
        (string->symbol . g$11760$15i0ov)
        (string->number . g$11759$15i0ov)
        (string->list . g$11758$15i0ov)
        (string . g$11757$15i0ov)
        (sqrt . g$11756$15i0ov)
        (sin . g$11755$15i0ov)
        (round . g$11754$15i0ov)
        (reverse . g$11753$15i0ov)
        (real? . g$11752$15i0ov)
        (real-part . g$11750$15i0ov)
        (rationalize . g$5790$15i0ov)
        (rational? . g$11749$15i0ov)
        (procedure? . g$11747$15i0ov)
        (positive? . g$11746$15i0ov)
        (pair? . g$11745$15i0ov)
        (odd? . g$11744$15i0ov)
        (numerator . g$11743$15i0ov)
        (number? . g$11742$15i0ov)
        (number->string . g$11741$15i0ov)
        (null? . g$11740$15i0ov)
        (not . g$11739$15i0ov)
        (negative? . g$11738$15i0ov)
        (min . g$11736$15i0ov)
        (max . g$11735$15i0ov)
        (map . g$11734$15i0ov)
        (make-vector . g$11733$15i0ov)
        (make-string . g$11732$15i0ov)
        (make-rectangular . g$11731$15i0ov)
        (make-polar . g$11730$15i0ov)
        (magnitude . g$11729$15i0ov)
        (log . g$11728$15i0ov)
        (list? . g$11727$15i0ov)
        (list-tail . g$11726$15i0ov)
        (list-ref . g$11725$15i0ov)
        (list->vector . g$11724$15i0ov)
        (list->string . g$11723$15i0ov)
        (list . g$11722$15i0ov)
        (length . g$11721$15i0ov)
        (lcm . g$11720$15i0ov)
        (integer? . g$11719$15i0ov)
        (integer->char . g$11717$15i0ov)
        (inexact? . g$11715$15i0ov)
        (imag-part . g$11713$15i0ov)
        (gcd . g$11712$15i0ov)
        (for-each . g$11711$15i0ov)
        (floor . g$11710$15i0ov)
        (expt . g$11708$15i0ov)
        (exp . g$11707$15i0ov)
        (exact? . g$11706$15i0ov)
        (even? . g$11703$15i0ov)
        (eqv? . g$11701$15i0ov)
        (equal? . g$11700$15i0ov)
        (eq? . g$11699$15i0ov)
        (dynamic-wind . g$11698$15i0ov)
        (denominator . g$11691$15i0ov)
        (cos . g$11690$15i0ov)
        (cons . g$11689$15i0ov)
        (complex? . g$11688$15i0ov)
        (char? . g$11687$15i0ov)
        (char>? . g$11686$15i0ov)
        (char>=? . g$11685$15i0ov)
        (char=? . g$11684$15i0ov)
        (char<? . g$11683$15i0ov)
        (char<=? . g$11682$15i0ov)
        (char->integer . g$11681$15i0ov)
        (ceiling . g$11680$15i0ov)
        (call-with-values . g$11679$15i0ov)
        (call-with-current-continuation . g$11677$15i0ov)
        (cddddr . g$5789$15i0ov)
        (cdddar . g$5788$15i0ov)
        (cddadr . g$5787$15i0ov)
        (cddaar . g$5786$15i0ov)
        (cdaddr . g$5785$15i0ov)
        (cdadar . g$5784$15i0ov)
        (cdaadr . g$5783$15i0ov)
        (cdaaar . g$5782$15i0ov)
        (cadddr . g$5781$15i0ov)
        (caddar . g$5780$15i0ov)
        (cadadr . g$5779$15i0ov)
        (cadaar . g$5778$15i0ov)
        (caaddr . g$5777$15i0ov)
        (caadar . g$5776$15i0ov)
        (caaadr . g$5775$15i0ov)
        (caaaar . g$5774$15i0ov)
        (cdddr . g$5773$15i0ov)
        (cddar . g$5772$15i0ov)
        (cdadr . g$5771$15i0ov)
        (cdaar . g$5770$15i0ov)
        (caddr . g$5769$15i0ov)
        (cadar . g$5768$15i0ov)
        (caadr . g$5767$15i0ov)
        (caaar . g$5766$15i0ov)
        (cddr . g$5765$15i0ov)
        (cdar . g$5764$15i0ov)
        (cadr . g$5763$15i0ov)
        (caar . g$5762$15i0ov)
        (cdr . g$11676$15i0ov)
        (car . g$11675$15i0ov)
        (boolean? . g$11674$15i0ov)
        (atan . g$11672$15i0ov)
        (asin . g$11670$15i0ov)
        (apply . g$11669$15i0ov)
        (append . g$11668$15i0ov)
        (angle . g$11667$15i0ov)
        (acos . g$11666$15i0ov)
        (abs . g$11665$15i0ov)
        (/ . g$11664$15i0ov)
        (* . g$11663$15i0ov)
        (- . g$11662$15i0ov)
        (+ . g$11661$15i0ov)
        (>= . g$11660$15i0ov)
        (> . g$11659$15i0ov)
        (= . g$11658$15i0ov)
        (<= . g$11657$15i0ov)
        (< . g$11656$15i0ov)
        (unquote-splicing . g$11577$15i0ov)
        (unquote . g$11576$15i0ov)
        (else . g$11574$15i0ov)
        (=> . g$11573$15i0ov)
        (... . g$11572$15i0ov)
        (delay . g$11569$15i0ov)
        (or . g$11567$15i0ov)
        (and . g$11566$15i0ov)
        (do . g$11565$15i0ov)
        (cond . g$11564$15i0ov)
        (let* . g$11563$15i0ov)
        (let . g$11562$15i0ov)
        (quasiquote . g$11558$15i0ov)
        (syntax-rules . g$11557$15i0ov)
        (case . g$11548$15i0ov)
        (if . g$11544$15i0ov)
        (letrec . g$11542$15i0ov)
        (lambda . g$11539$15i0ov)
        (quote . g$11536$15i0ov)
        (letrec-syntax . g$11534$15i0ov)
        (let-syntax . g$11533$15i0ov)
        (set! . g$11532$15i0ov)
        (begin . g$11529$15i0ov)
        (define-syntax . g$11527$15i0ov)
        (define . g$11526$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6930$15i0ov
      'g$12174$15i0ov
      '(rnrs)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12070$15i0ov)
        (string-titlecase . g$12069$15i0ov)
        (string-normalize-nfkd . g$12068$15i0ov)
        (string-normalize-nfkc . g$12067$15i0ov)
        (string-normalize-nfd . g$12066$15i0ov)
        (string-normalize-nfc . g$12065$15i0ov)
        (string-foldcase . g$12064$15i0ov)
        (string-downcase . g$12063$15i0ov)
        (string-ci>? . g$12062$15i0ov)
        (string-ci>=? . g$12061$15i0ov)
        (string-ci=? . g$12060$15i0ov)
        (string-ci<? . g$12059$15i0ov)
        (string-ci<=? . g$12058$15i0ov)
        (char-whitespace? . g$12057$15i0ov)
        (char-upper-case? . g$12056$15i0ov)
        (char-title-case? . g$12055$15i0ov)
        (char-numeric? . g$12054$15i0ov)
        (char-lower-case? . g$12053$15i0ov)
        (char-general-category . g$12052$15i0ov)
        (char-upcase . g$12051$15i0ov)
        (char-titlecase . g$12050$15i0ov)
        (char-foldcase . g$12049$15i0ov)
        (char-downcase . g$12048$15i0ov)
        (char-ci>? . g$12047$15i0ov)
        (char-ci>=? . g$12046$15i0ov)
        (char-ci=? . g$12045$15i0ov)
        (char-ci<? . g$12044$15i0ov)
        (char-ci<=? . g$12043$15i0ov)
        (char-alphabetic? . g$12042$15i0ov)
        (make-variable-transformer . g$8158$15i0ov)
        (identifier? . g$8554$15i0ov)
        (generate-temporaries . g$8543$15i0ov)
        (free-identifier=? . g$8544$15i0ov)
        (syntax->datum . g$8556$15i0ov)
        (datum->syntax . g$8555$15i0ov)
        (bound-identifier=? . g$8545$15i0ov)
        (record-type-descriptor? . g$12041$15i0ov)
        (record-predicate . g$12040$15i0ov)
        (record-mutator . g$12039$15i0ov)
        (record-constructor . g$12038$15i0ov)
        (record-accessor . g$12037$15i0ov)
        (make-record-type-descriptor . g$12036$15i0ov)
        (make-record-constructor-descriptor . g$12035$15i0ov)
        (record? . g$12034$15i0ov)
        (record-type-uid . g$12033$15i0ov)
        (record-type-sealed? . g$12032$15i0ov)
        (record-type-parent . g$12031$15i0ov)
        (record-type-opaque? . g$12030$15i0ov)
        (record-type-name . g$12029$15i0ov)
        (record-type-generative? . g$12028$15i0ov)
        (record-type-field-names . g$12027$15i0ov)
        (record-rtd . g$12026$15i0ov)
        (record-field-mutable? . g$12025$15i0ov)
        (delete-file . g$6174$15i0ov)
        (file-exists? . g$6173$15i0ov)
        (vector-sort! . g$12024$15i0ov)
        (vector-sort . g$12023$15i0ov)
        (list-sort . g$6687$15i0ov)
        (symbol-hash . g$12022$15i0ov)
        (string-ci-hash . g$12021$15i0ov)
        (string-hash . g$12020$15i0ov)
        (equal-hash . g$12019$15i0ov)
        (hashtable-equivalence-function . g$12018$15i0ov)
        (make-hashtable . g$12017$15i0ov)
        (hashtable-hash-function . g$12016$15i0ov)
        (make-eqv-hashtable . g$6141$15i0ov)
        (make-eq-hashtable . g$6140$15i0ov)
        (hashtable? . g$12015$15i0ov)
        (hashtable-update! . g$6147$15i0ov)
        (hashtable-size . g$6142$15i0ov)
        (hashtable-set! . g$6144$15i0ov)
        (hashtable-ref . g$6143$15i0ov)
        (hashtable-mutable? . g$12014$15i0ov)
        (hashtable-keys . g$12013$15i0ov)
        (hashtable-entries . g$12012$15i0ov)
        (hashtable-delete! . g$6145$15i0ov)
        (hashtable-copy . g$12011$15i0ov)
        (hashtable-contains? . g$6146$15i0ov)
        (hashtable-clear! . g$6148$15i0ov)
        (call-with-output-file . g$7099$15i0ov)
        (call-with-input-file . g$7098$15i0ov)
        (write-char . g$12010$15i0ov)
        (write . g$12009$15i0ov)
        (with-output-to-file . g$7097$15i0ov)
        (with-input-from-file . g$7096$15i0ov)
        (read-char . g$12008$15i0ov)
        (read . g$12007$15i0ov)
        (peek-char . g$12006$15i0ov)
        (open-output-file . g$12005$15i0ov)
        (open-input-file . g$12004$15i0ov)
        (newline . g$12003$15i0ov)
        (display . g$12002$15i0ov)
        (close-output-port . g$12001$15i0ov)
        (close-input-port . g$12000$15i0ov)
        (eof-object? . g$11999$15i0ov)
        (eof-object . g$11998$15i0ov)
        (current-error-port . g$11997$15i0ov)
        (current-output-port . g$11996$15i0ov)
        (current-input-port . g$11995$15i0ov)
        (output-port? . g$11994$15i0ov)
        (input-port? . g$11993$15i0ov)
        (utf-8-codec . g$11992$15i0ov)
        (utf-16-codec . g$11991$15i0ov)
        (transcoder-error-handling-mode . g$11990$15i0ov)
        (transcoder-eol-style . g$11989$15i0ov)
        (transcoder-codec . g$11988$15i0ov)
        (transcoded-port . g$11987$15i0ov)
        (textual-port? . g$11986$15i0ov)
        (string->bytevector . g$11985$15i0ov)
        (standard-output-port . g$11984$15i0ov)
        (standard-input-port . g$11983$15i0ov)
        (standard-error-port . g$11982$15i0ov)
        (set-port-position! . g$11981$15i0ov)
        (put-u8 . g$11980$15i0ov)
        (put-string . g$11979$15i0ov)
        (put-datum . g$11978$15i0ov)
        (put-char . g$11977$15i0ov)
        (put-bytevector . g$11976$15i0ov)
        (port? . g$7075$15i0ov)
        (port-transcoder . g$11975$15i0ov)
        (port-position . g$11974$15i0ov)
        (port-has-set-port-position!? . g$11973$15i0ov)
        (port-has-port-position? . g$11972$15i0ov)
        (port-eof? . g$11971$15i0ov)
        (output-port-buffer-mode . g$11970$15i0ov)
        (open-string-output-port . g$7074$15i0ov)
        (open-string-input-port . g$11969$15i0ov)
        (open-file-output-port . g$11968$15i0ov)
        (open-file-input/output-port . g$11967$15i0ov)
        (open-file-input-port . g$11966$15i0ov)
        (open-bytevector-output-port . g$11965$15i0ov)
        (open-bytevector-input-port . g$11964$15i0ov)
        (native-transcoder . g$11963$15i0ov)
        (native-eol-style . g$11962$15i0ov)
        (make-transcoder . g$11961$15i0ov)
        (latin-1-codec . g$11960$15i0ov)
        (make-i/o-write-error . g$6931$15i0ov)
        (make-i/o-read-error . g$6917$15i0ov)
        (make-i/o-port-error . g$7036$15i0ov)
        (make-i/o-invalid-position-error . g$6946$15i0ov)
        (make-i/o-filename-error . g$6963$15i0ov)
        (make-i/o-file-protection-error . g$6979$15i0ov)
        (make-i/o-file-is-read-only-error . g$6993$15i0ov)
        (make-i/o-file-does-not-exist-error . g$7021$15i0ov)
        (make-i/o-file-already-exists-error . g$7007$15i0ov)
        (make-i/o-error . g$6903$15i0ov)
        (make-i/o-encoding-error . g$7067$15i0ov)
        (make-i/o-decoding-error . g$7052$15i0ov)
        (make-custom-textual-output-port . g$11959$15i0ov)
        (make-custom-textual-input/output-port . g$11958$15i0ov)
        (make-custom-textual-input-port . g$11957$15i0ov)
        (make-custom-binary-output-port . g$11956$15i0ov)
        (make-custom-binary-input/output-port . g$11955$15i0ov)
        (make-custom-binary-input-port . g$11954$15i0ov)
        (make-bytevector . g$11953$15i0ov)
        (lookahead-u8 . g$11952$15i0ov)
        (lookahead-char . g$11951$15i0ov)
        (i/o-write-error? . g$6932$15i0ov)
        (i/o-read-error? . g$6918$15i0ov)
        (i/o-port-error? . g$7038$15i0ov)
        (i/o-invalid-position-error? . g$6948$15i0ov)
        (i/o-error-position . g$6949$15i0ov)
        (i/o-filename-error? . g$6965$15i0ov)
        (i/o-file-protection-error? . g$6980$15i0ov)
        (i/o-file-is-read-only-error? . g$6994$15i0ov)
        (i/o-file-does-not-exist-error? . g$7022$15i0ov)
        (i/o-file-already-exists-error? . g$7008$15i0ov)
        (i/o-error? . g$6904$15i0ov)
        (i/o-error-port . g$7039$15i0ov)
        (i/o-error-filename . g$6966$15i0ov)
        (i/o-encoding-error? . g$7069$15i0ov)
        (i/o-encoding-error-char . g$7070$15i0ov)
        (i/o-decoding-error? . g$7053$15i0ov)
        (get-u8 . g$11950$15i0ov)
        (get-string-n! . g$11949$15i0ov)
        (get-string-n . g$11948$15i0ov)
        (get-string-all . g$11947$15i0ov)
        (get-line . g$11946$15i0ov)
        (get-datum . g$11945$15i0ov)
        (get-char . g$11944$15i0ov)
        (get-bytevector-some . g$11943$15i0ov)
        (get-bytevector-n! . g$11942$15i0ov)
        (get-bytevector-n . g$11941$15i0ov)
        (get-bytevector-all . g$11940$15i0ov)
        (flush-output-port . g$11939$15i0ov)
        (close-port . g$11938$15i0ov)
        (call-with-string-output-port . g$11937$15i0ov)
        (call-with-port . g$11936$15i0ov)
        (call-with-bytevector-output-port . g$11935$15i0ov)
        (bytevector->string . g$11934$15i0ov)
        (buffer-mode? . g$11933$15i0ov)
        (binary-port? . g$11932$15i0ov)
        (exit . g$11929$15i0ov)
        (command-line . g$11490$15i0ov)
        (remove . g$6254$15i0ov)
        (remv . g$6255$15i0ov)
        (remp . g$6240$15i0ov)
        (remq . g$6256$15i0ov)
        (partition . g$6239$15i0ov)
        (memv . g$11924$15i0ov)
        (memq . g$11923$15i0ov)
        (memp . g$6246$15i0ov)
        (member . g$6245$15i0ov)
        (exists . g$6250$15i0ov)
        (for-all . g$6249$15i0ov)
        (fold-right . g$6253$15i0ov)
        (fold-left . g$6252$15i0ov)
        (find . g$6238$15i0ov)
        (filter . g$6241$15i0ov)
        (cons* . g$6251$15i0ov)
        (assv . g$6242$15i0ov)
        (assq . g$11922$15i0ov)
        (assp . g$6244$15i0ov)
        (assoc . g$6243$15i0ov)
        (with-exception-handler . g$11921$15i0ov)
        (raise-continuable . g$11920$15i0ov)
        (raise . g$11919$15i0ov)
        (make-enumeration . g$7156$15i0ov)
        (enum-set=? . g$7163$15i0ov)
        (enum-set-universe . g$7157$15i0ov)
        (enum-set-union . g$7164$15i0ov)
        (enum-set-subset? . g$7162$15i0ov)
        (enum-set-projection . g$7168$15i0ov)
        (enum-set-member? . g$7161$15i0ov)
        (enum-set-intersection . g$7165$15i0ov)
        (enum-set-indexer . g$7158$15i0ov)
        (enum-set-difference . g$7166$15i0ov)
        (enum-set-constructor . g$7159$15i0ov)
        (enum-set-complement . g$7167$15i0ov)
        (enum-set->list . g$7160$15i0ov)
        (who-condition? . g$6578$15i0ov)
        (warning? . g$6489$15i0ov)
        (violation? . g$6531$15i0ov)
        (undefined-violation? . g$6655$15i0ov)
        (syntax-violation? . g$6639$15i0ov)
        (syntax-violation-subform . g$6641$15i0ov)
        (syntax-violation-form . g$6640$15i0ov)
        (syntax-violation . g$8553$15i0ov)
        (simple-conditions . g$11918$15i0ov)
        (serious-condition? . g$6503$15i0ov)
        (non-continuable-violation? . g$6593$15i0ov)
        (message-condition? . g$6474$15i0ov)
        (make-who-condition . g$6576$15i0ov)
        (make-warning . g$6488$15i0ov)
        (make-violation . g$6530$15i0ov)
        (make-undefined-violation . g$6654$15i0ov)
        (make-syntax-violation . g$6636$15i0ov)
        (make-serious-condition . g$6502$15i0ov)
        (make-non-continuable-violation . g$6592$15i0ov)
        (make-message-condition . g$6472$15i0ov)
        (make-lexical-violation . g$6620$15i0ov)
        (make-irritants-condition . g$6559$15i0ov)
        (make-implementation-restriction-violation . g$6606$15i0ov)
        (make-error . g$6516$15i0ov)
        (make-assertion-violation . g$6544$15i0ov)
        (lexical-violation? . g$6621$15i0ov)
        (irritants-condition? . g$6561$15i0ov)
        (implementation-restriction-violation? . g$6607$15i0ov)
        (error? . g$6517$15i0ov)
        (condition-who . g$6579$15i0ov)
        (condition-predicate . g$11917$15i0ov)
        (condition-message . g$6475$15i0ov)
        (condition-irritants . g$6562$15i0ov)
        (condition-accessor . g$11916$15i0ov)
        (condition . g$11915$15i0ov)
        (assertion-violation? . g$6545$15i0ov)
        (condition? . g$11914$15i0ov)
        (utf32->string . g$11913$15i0ov)
        (utf16->string . g$11912$15i0ov)
        (utf8->string . g$11911$15i0ov)
        (uint-list->bytevector . g$11910$15i0ov)
        (u8-list->bytevector . g$11909$15i0ov)
        (string->utf8 . g$11908$15i0ov)
        (string->utf32 . g$11907$15i0ov)
        (string->utf16 . g$11906$15i0ov)
        (sint-list->bytevector . g$11905$15i0ov)
        (native-endianness . g$6330$15i0ov)
        (bytevector? . g$11904$15i0ov)
        (bytevector=? . g$11903$15i0ov)
        (bytevector-uint-set! . g$11902$15i0ov)
        (bytevector-uint-ref . g$11901$15i0ov)
        (bytevector-u8-set! . g$11900$15i0ov)
        (bytevector-u8-ref . g$11899$15i0ov)
        (bytevector-u64-set! . g$6351$15i0ov)
        (bytevector-u64-ref . g$6347$15i0ov)
        (bytevector-u64-native-set! . g$6353$15i0ov)
        (bytevector-u64-native-ref . g$6349$15i0ov)
        (bytevector-u32-set! . g$6343$15i0ov)
        (bytevector-u32-ref . g$6339$15i0ov)
        (bytevector-u32-native-set! . g$6345$15i0ov)
        (bytevector-u32-native-ref . g$6341$15i0ov)
        (bytevector-u16-set! . g$6335$15i0ov)
        (bytevector-u16-ref . g$6331$15i0ov)
        (bytevector-u16-native-set! . g$6337$15i0ov)
        (bytevector-u16-native-ref . g$6333$15i0ov)
        (bytevector-sint-set! . g$11898$15i0ov)
        (bytevector-sint-ref . g$11897$15i0ov)
        (bytevector-s8-set! . g$11896$15i0ov)
        (bytevector-s8-ref . g$11895$15i0ov)
        (bytevector-s64-set! . g$6352$15i0ov)
        (bytevector-s64-ref . g$6348$15i0ov)
        (bytevector-s64-native-set! . g$6354$15i0ov)
        (bytevector-s64-native-ref . g$6350$15i0ov)
        (bytevector-s32-set! . g$6344$15i0ov)
        (bytevector-s32-ref . g$6340$15i0ov)
        (bytevector-s32-native-set! . g$6346$15i0ov)
        (bytevector-s32-native-ref . g$6342$15i0ov)
        (bytevector-s16-set! . g$6336$15i0ov)
        (bytevector-s16-ref . g$6332$15i0ov)
        (bytevector-s16-native-set! . g$6338$15i0ov)
        (bytevector-s16-native-ref . g$6334$15i0ov)
        (bytevector-length . g$11894$15i0ov)
        (bytevector-ieee-single-set! . g$11893$15i0ov)
        (bytevector-ieee-single-ref . g$11892$15i0ov)
        (bytevector-ieee-single-native-set! . g$6357$15i0ov)
        (bytevector-ieee-single-native-ref . g$6355$15i0ov)
        (bytevector-ieee-double-set! . g$11891$15i0ov)
        (bytevector-ieee-double-ref . g$11890$15i0ov)
        (bytevector-ieee-double-native-set! . g$6358$15i0ov)
        (bytevector-ieee-double-native-ref . g$6356$15i0ov)
        (bytevector-fill! . g$11889$15i0ov)
        (bytevector-copy! . g$11888$15i0ov)
        (bytevector-copy . g$11887$15i0ov)
        (bytevector->uint-list . g$11886$15i0ov)
        (bytevector->u8-list . g$11885$15i0ov)
        (bytevector->sint-list . g$11884$15i0ov)
        (no-nans-violation? . g$6889$15i0ov)
        (no-infinities-violation? . g$6875$15i0ov)
        (make-no-nans-violation . g$6888$15i0ov)
        (make-no-infinities-violation . g$6874$15i0ov)
        (real->flonum . g$11883$15i0ov)
        (flzero? . g$11882$15i0ov)
        (fltruncate . g$11881$15i0ov)
        (fltan . g$11880$15i0ov)
        (flsqrt . g$11879$15i0ov)
        (flsin . g$11878$15i0ov)
        (flround . g$11877$15i0ov)
        (flpositive? . g$11876$15i0ov)
        (flonum? . g$11875$15i0ov)
        (flodd? . g$11874$15i0ov)
        (flnumerator . g$11873$15i0ov)
        (flnegative? . g$11872$15i0ov)
        (flnan? . g$11871$15i0ov)
        (flmod0 . g$11870$15i0ov)
        (flmod . g$11869$15i0ov)
        (flmin . g$11868$15i0ov)
        (flmax . g$11867$15i0ov)
        (fllog . g$11866$15i0ov)
        (flinteger? . g$11865$15i0ov)
        (flinfinite? . g$11864$15i0ov)
        (flfloor . g$11863$15i0ov)
        (flfinite? . g$11862$15i0ov)
        (flexpt . g$11861$15i0ov)
        (flexp . g$11860$15i0ov)
        (fleven? . g$11859$15i0ov)
        (fldiv0-and-mod0 . g$11858$15i0ov)
        (fldiv0 . g$11857$15i0ov)
        (fldiv-and-mod . g$11856$15i0ov)
        (fldiv . g$11855$15i0ov)
        (fldenominator . g$11854$15i0ov)
        (flcos . g$11853$15i0ov)
        (flceiling . g$11852$15i0ov)
        (flatan . g$11851$15i0ov)
        (flasin . g$11850$15i0ov)
        (flacos . g$11849$15i0ov)
        (flabs . g$11848$15i0ov)
        (fl>? . g$11847$15i0ov)
        (fl>=? . g$11846$15i0ov)
        (fl=? . g$11845$15i0ov)
        (fl<? . g$11844$15i0ov)
        (fl<=? . g$11843$15i0ov)
        (fl/ . g$11842$15i0ov)
        (fl- . g$11841$15i0ov)
        (fl+ . g$11840$15i0ov)
        (fl* . g$11839$15i0ov)
        (fixnum->flonum . g$11838$15i0ov)
        (fxzero? . g$11837$15i0ov)
        (fxxor . g$11836$15i0ov)
        (fxrotate-bit-field . g$6820$15i0ov)
        (fxreverse-bit-field . g$11835$15i0ov)
        (fxpositive? . g$11834$15i0ov)
        (fxodd? . g$11833$15i0ov)
        (fxnot . g$11832$15i0ov)
        (fxnegative? . g$11831$15i0ov)
        (fxmod0 . g$11830$15i0ov)
        (fxmod . g$11829$15i0ov)
        (fxmin . g$11828$15i0ov)
        (fxmax . g$11827$15i0ov)
        (fxlength . g$11826$15i0ov)
        (fxior . g$11825$15i0ov)
        (fxif . g$6814$15i0ov)
        (fxfirst-bit-set . g$11824$15i0ov)
        (fxeven? . g$11823$15i0ov)
        (fxdiv0-and-mod0 . g$11822$15i0ov)
        (fxdiv0 . g$11821$15i0ov)
        (fxdiv-and-mod . g$11820$15i0ov)
        (fxdiv . g$11819$15i0ov)
        (fxcopy-bit-field . g$6817$15i0ov)
        (fxcopy-bit . g$6815$15i0ov)
        (fxbit-set? . g$11818$15i0ov)
        (fxbit-field . g$6816$15i0ov)
        (fxbit-count . g$11817$15i0ov)
        (fxarithmetic-shift-right . g$6819$15i0ov)
        (fxarithmetic-shift-left . g$6818$15i0ov)
        (fxarithmetic-shift . g$11816$15i0ov)
        (fxand . g$11815$15i0ov)
        (fx>? . g$11814$15i0ov)
        (fx>=? . g$11813$15i0ov)
        (fx=? . g$11812$15i0ov)
        (fx<? . g$11811$15i0ov)
        (fx<=? . g$11810$15i0ov)
        (fx-/carry . g$11809$15i0ov)
        (fx- . g$11808$15i0ov)
        (fx+/carry . g$11807$15i0ov)
        (fx+ . g$11806$15i0ov)
        (fx*/carry . g$11805$15i0ov)
        (fx* . g$11804$15i0ov)
        (greatest-fixnum . g$11803$15i0ov)
        (least-fixnum . g$11802$15i0ov)
        (fixnum-width . g$11801$15i0ov)
        (fixnum? . g$11800$15i0ov)
        (bitwise-rotate-bit-field . g$6772$15i0ov)
        (bitwise-reverse-bit-field . g$11799$15i0ov)
        (bitwise-length . g$11798$15i0ov)
        (bitwise-if . g$6766$15i0ov)
        (bitwise-first-bit-set . g$11797$15i0ov)
        (bitwise-copy-bit-field . g$6769$15i0ov)
        (bitwise-copy-bit . g$6767$15i0ov)
        (bitwise-bit-set? . g$11796$15i0ov)
        (bitwise-bit-field . g$11795$15i0ov)
        (bitwise-bit-count . g$11794$15i0ov)
        (bitwise-xor . g$11793$15i0ov)
        (bitwise-ior . g$11792$15i0ov)
        (bitwise-and . g$11791$15i0ov)
        (bitwise-not . g$11790$15i0ov)
        (bitwise-arithmetic-shift-right . g$6771$15i0ov)
        (bitwise-arithmetic-shift-left . g$6770$15i0ov)
        (bitwise-arithmetic-shift . g$11789$15i0ov)
        (zero? . g$11788$15i0ov)
        (vector? . g$11787$15i0ov)
        (vector-set! . g$11786$15i0ov)
        (vector-ref . g$11785$15i0ov)
        (vector-map . g$11784$15i0ov)
        (vector-length . g$11783$15i0ov)
        (vector-for-each . g$11782$15i0ov)
        (vector-fill! . g$11781$15i0ov)
        (vector->list . g$11780$15i0ov)
        (vector . g$11779$15i0ov)
        (values . g$11778$15i0ov)
        (truncate . g$11777$15i0ov)
        (tan . g$11776$15i0ov)
        (symbol? . g$11775$15i0ov)
        (symbol=? . g$11774$15i0ov)
        (symbol->string . g$11773$15i0ov)
        (substring . g$11772$15i0ov)
        (string? . g$11771$15i0ov)
        (string>? . g$11770$15i0ov)
        (string>=? . g$11769$15i0ov)
        (string=? . g$11768$15i0ov)
        (string<? . g$11767$15i0ov)
        (string<=? . g$11766$15i0ov)
        (string-ref . g$11765$15i0ov)
        (string-length . g$11764$15i0ov)
        (string-for-each . g$11763$15i0ov)
        (string-copy . g$11762$15i0ov)
        (string-append . g$11761$15i0ov)
        (string->symbol . g$11760$15i0ov)
        (string->number . g$11759$15i0ov)
        (string->list . g$11758$15i0ov)
        (string . g$11757$15i0ov)
        (sqrt . g$11756$15i0ov)
        (sin . g$11755$15i0ov)
        (round . g$11754$15i0ov)
        (reverse . g$11753$15i0ov)
        (real? . g$11752$15i0ov)
        (real-valued? . g$11751$15i0ov)
        (real-part . g$11750$15i0ov)
        (rationalize . g$5790$15i0ov)
        (rational? . g$11749$15i0ov)
        (rational-valued? . g$11748$15i0ov)
        (procedure? . g$11747$15i0ov)
        (positive? . g$11746$15i0ov)
        (pair? . g$11745$15i0ov)
        (odd? . g$11744$15i0ov)
        (numerator . g$11743$15i0ov)
        (number? . g$11742$15i0ov)
        (number->string . g$11741$15i0ov)
        (null? . g$11740$15i0ov)
        (not . g$11739$15i0ov)
        (negative? . g$11738$15i0ov)
        (nan? . g$11737$15i0ov)
        (min . g$11736$15i0ov)
        (max . g$11735$15i0ov)
        (map . g$11734$15i0ov)
        (make-vector . g$11733$15i0ov)
        (make-string . g$11732$15i0ov)
        (make-rectangular . g$11731$15i0ov)
        (make-polar . g$11730$15i0ov)
        (magnitude . g$11729$15i0ov)
        (log . g$11728$15i0ov)
        (list? . g$11727$15i0ov)
        (list-tail . g$11726$15i0ov)
        (list-ref . g$11725$15i0ov)
        (list->vector . g$11724$15i0ov)
        (list->string . g$11723$15i0ov)
        (list . g$11722$15i0ov)
        (length . g$11721$15i0ov)
        (lcm . g$11720$15i0ov)
        (integer? . g$11719$15i0ov)
        (integer-valued? . g$11718$15i0ov)
        (integer->char . g$11717$15i0ov)
        (infinite? . g$11716$15i0ov)
        (inexact? . g$11715$15i0ov)
        (inexact . g$11714$15i0ov)
        (imag-part . g$11713$15i0ov)
        (gcd . g$11712$15i0ov)
        (for-each . g$11711$15i0ov)
        (floor . g$11710$15i0ov)
        (finite? . g$11709$15i0ov)
        (expt . g$11708$15i0ov)
        (exp . g$11707$15i0ov)
        (exact? . g$11706$15i0ov)
        (exact-integer-sqrt . g$11705$15i0ov)
        (exact . g$11704$15i0ov)
        (even? . g$11703$15i0ov)
        (error . g$11702$15i0ov)
        (eqv? . g$11701$15i0ov)
        (equal? . g$11700$15i0ov)
        (eq? . g$11699$15i0ov)
        (dynamic-wind . g$11698$15i0ov)
        (div0-and-mod0 . g$11697$15i0ov)
        (mod0 . g$11696$15i0ov)
        (div0 . g$11695$15i0ov)
        (div-and-mod . g$11694$15i0ov)
        (mod . g$11693$15i0ov)
        (div . g$11692$15i0ov)
        (denominator . g$11691$15i0ov)
        (cos . g$11690$15i0ov)
        (cons . g$11689$15i0ov)
        (complex? . g$11688$15i0ov)
        (char? . g$11687$15i0ov)
        (char>? . g$11686$15i0ov)
        (char>=? . g$11685$15i0ov)
        (char=? . g$11684$15i0ov)
        (char<? . g$11683$15i0ov)
        (char<=? . g$11682$15i0ov)
        (char->integer . g$11681$15i0ov)
        (ceiling . g$11680$15i0ov)
        (call-with-values . g$11679$15i0ov)
        (call/cc . g$11678$15i0ov)
        (call-with-current-continuation . g$11677$15i0ov)
        (cddddr . g$5789$15i0ov)
        (cdddar . g$5788$15i0ov)
        (cddadr . g$5787$15i0ov)
        (cddaar . g$5786$15i0ov)
        (cdaddr . g$5785$15i0ov)
        (cdadar . g$5784$15i0ov)
        (cdaadr . g$5783$15i0ov)
        (cdaaar . g$5782$15i0ov)
        (cadddr . g$5781$15i0ov)
        (caddar . g$5780$15i0ov)
        (cadadr . g$5779$15i0ov)
        (cadaar . g$5778$15i0ov)
        (caaddr . g$5777$15i0ov)
        (caadar . g$5776$15i0ov)
        (caaadr . g$5775$15i0ov)
        (caaaar . g$5774$15i0ov)
        (cdddr . g$5773$15i0ov)
        (cddar . g$5772$15i0ov)
        (cdadr . g$5771$15i0ov)
        (cdaar . g$5770$15i0ov)
        (caddr . g$5769$15i0ov)
        (cadar . g$5768$15i0ov)
        (caadr . g$5767$15i0ov)
        (caaar . g$5766$15i0ov)
        (cddr . g$5765$15i0ov)
        (cdar . g$5764$15i0ov)
        (cadr . g$5763$15i0ov)
        (caar . g$5762$15i0ov)
        (cdr . g$11676$15i0ov)
        (car . g$11675$15i0ov)
        (boolean? . g$11674$15i0ov)
        (boolean=? . g$11673$15i0ov)
        (atan . g$11672$15i0ov)
        (assertion-violation . g$11671$15i0ov)
        (asin . g$11670$15i0ov)
        (apply . g$11669$15i0ov)
        (append . g$11668$15i0ov)
        (angle . g$11667$15i0ov)
        (acos . g$11666$15i0ov)
        (abs . g$11665$15i0ov)
        (/ . g$11664$15i0ov)
        (* . g$11663$15i0ov)
        (- . g$11662$15i0ov)
        (+ . g$11661$15i0ov)
        (>= . g$11660$15i0ov)
        (> . g$11659$15i0ov)
        (= . g$11658$15i0ov)
        (<= . g$11657$15i0ov)
        (< . g$11656$15i0ov)
        (&no-nans . g$11630$15i0ov)
        (&no-infinities . g$11629$15i0ov)
        (&i/o-encoding . g$11628$15i0ov)
        (&i/o-decoding . g$11627$15i0ov)
        (&i/o-port . g$11626$15i0ov)
        (&i/o-file-does-not-exist . g$11625$15i0ov)
        (&i/o-file-already-exists . g$11624$15i0ov)
        (&i/o-file-is-read-only . g$11623$15i0ov)
        (&i/o-file-protection . g$11622$15i0ov)
        (&i/o-filename . g$11621$15i0ov)
        (&i/o-invalid-position . g$11620$15i0ov)
        (&i/o-write . g$11619$15i0ov)
        (&i/o-read . g$11618$15i0ov)
        (&i/o . g$11617$15i0ov)
        (&non-continuable . g$11616$15i0ov)
        (&undefined . g$11615$15i0ov)
        (&syntax . g$11614$15i0ov)
        (&lexical . g$11613$15i0ov)
        (&implementation-restriction . g$11612$15i0ov)
        (&who . g$11610$15i0ov)
        (&irritants . g$11609$15i0ov)
        (&assertion . g$11608$15i0ov)
        (&violation . g$11607$15i0ov)
        (&error . g$11606$15i0ov)
        (&serious . g$11605$15i0ov)
        (&warning . g$11604$15i0ov)
        (&message . g$11603$15i0ov)
        (&condition . g$11602$15i0ov)
        (define-condition-type . g$11601$15i0ov)
        (define-enumeration . g$11600$15i0ov)
        (define-record-type . g$11599$15i0ov)
        (parent-rtd . g$11598$15i0ov)
        (nongenerative . g$11597$15i0ov)
        (opaque . g$11596$15i0ov)
        (sealed . g$11595$15i0ov)
        (protocol . g$11594$15i0ov)
        (parent . g$11593$15i0ov)
        (immutable . g$11592$15i0ov)
        (mutable . g$11591$15i0ov)
        (fields . g$11590$15i0ov)
        (error-handling-mode . g$11589$15i0ov)
        (file-options . g$11588$15i0ov)
        (buffer-mode . g$11587$15i0ov)
        (eol-style . g$11586$15i0ov)
        (guard . g$11585$15i0ov)
        (unsyntax-splicing . g$11579$15i0ov)
        (unsyntax . g$11578$15i0ov)
        (unquote-splicing . g$11577$15i0ov)
        (unquote . g$11576$15i0ov)
        (_ . g$11575$15i0ov)
        (else . g$11574$15i0ov)
        (=> . g$11573$15i0ov)
        (... . g$11572$15i0ov)
        (assert . g$11571$15i0ov)
        (endianness . g$11570$15i0ov)
        (or . g$11567$15i0ov)
        (and . g$11566$15i0ov)
        (do . g$11565$15i0ov)
        (cond . g$11564$15i0ov)
        (let* . g$11563$15i0ov)
        (let . g$11562$15i0ov)
        (identifier-syntax . g$11561$15i0ov)
        (with-syntax . g$11560$15i0ov)
        (quasisyntax . g$11559$15i0ov)
        (quasiquote . g$11558$15i0ov)
        (syntax-rules . g$11557$15i0ov)
        (let-values . g$11553$15i0ov)
        (let*-values . g$11552$15i0ov)
        (record-constructor-descriptor . g$11551$15i0ov)
        (record-type-descriptor . g$11550$15i0ov)
        (case . g$11548$15i0ov)
        (unless . g$11546$15i0ov)
        (when . g$11545$15i0ov)
        (if . g$11544$15i0ov)
        (letrec* . g$11543$15i0ov)
        (letrec . g$11542$15i0ov)
        (case-lambda . g$11540$15i0ov)
        (lambda . g$11539$15i0ov)
        (syntax . g$11538$15i0ov)
        (syntax-case . g$11537$15i0ov)
        (quote . g$11536$15i0ov)
        (letrec-syntax . g$11534$15i0ov)
        (let-syntax . g$11533$15i0ov)
        (set! . g$11532$15i0ov)
        (import . g$11531$15i0ov)
        (library . g$11530$15i0ov)
        (begin . g$11529$15i0ov)
        (define-syntax . g$11527$15i0ov)
        (define . g$11526$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12175$15i0ov
      '(rnrs r5rs)
      '(6)
      '()
      '()
      '()
      '((interaction-environment . g$8559$15i0ov)
        (scheme-report-environment . g$8534$15i0ov)
        (quotient . g$6667$15i0ov)
        (null-environment . g$8533$15i0ov)
        (remainder . g$6668$15i0ov)
        (modulo . g$6669$15i0ov)
        (inexact->exact . g$11931$15i0ov)
        (force . g$6671$15i0ov)
        (exact->inexact . g$11930$15i0ov)
        (delay . g$11569$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12176$15i0ov
      '(rnrs control)
      '(6)
      '()
      '()
      '()
      '((do . g$11565$15i0ov)
        (unless . g$11546$15i0ov)
        (when . g$11545$15i0ov)
        (case-lambda . g$11540$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12177$15i0ov
      '(rnrs eval)
      '(6)
      '()
      '()
      '()
      '((eval . g$8536$15i0ov) (environment . g$8532$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12178$15i0ov
      '(rnrs mutable-pairs)
      '(6)
      '()
      '()
      '()
      '((set-cdr! . g$11926$15i0ov) (set-car! . g$11925$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12179$15i0ov
      '(rnrs mutable-strings)
      '(6)
      '()
      '()
      '()
      '((string-fill! . g$11928$15i0ov) (string-set! . g$11927$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12180$15i0ov
      '(rnrs programs)
      '(6)
      '()
      '()
      '()
      '((exit . g$11929$15i0ov) (command-line . g$11490$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12181$15i0ov
      '(rnrs syntax-case)
      '(6)
      '()
      '()
      '()
      '((make-variable-transformer . g$8158$15i0ov)
        (identifier? . g$8554$15i0ov)
        (generate-temporaries . g$8543$15i0ov)
        (free-identifier=? . g$8544$15i0ov)
        (syntax->datum . g$8556$15i0ov)
        (datum->syntax . g$8555$15i0ov)
        (bound-identifier=? . g$8545$15i0ov)
        (syntax-violation . g$8553$15i0ov)
        (unsyntax-splicing . g$11579$15i0ov)
        (unsyntax . g$11578$15i0ov)
        (_ . g$11575$15i0ov)
        (... . g$11572$15i0ov)
        (with-syntax . g$11560$15i0ov)
        (quasisyntax . g$11559$15i0ov)
        (syntax . g$11538$15i0ov)
        (syntax-case . g$11537$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12182$15i0ov
      '(rnrs files)
      '(6)
      '()
      '()
      '()
      '((delete-file . g$6174$15i0ov)
        (file-exists? . g$6173$15i0ov)
        (make-i/o-write-error . g$6931$15i0ov)
        (make-i/o-read-error . g$6917$15i0ov)
        (make-i/o-port-error . g$7036$15i0ov)
        (make-i/o-invalid-position-error . g$6946$15i0ov)
        (make-i/o-filename-error . g$6963$15i0ov)
        (make-i/o-file-protection-error . g$6979$15i0ov)
        (make-i/o-file-is-read-only-error . g$6993$15i0ov)
        (make-i/o-file-does-not-exist-error . g$7021$15i0ov)
        (make-i/o-file-already-exists-error . g$7007$15i0ov)
        (make-i/o-error . g$6903$15i0ov)
        (i/o-write-error? . g$6932$15i0ov)
        (i/o-read-error? . g$6918$15i0ov)
        (i/o-port-error? . g$7038$15i0ov)
        (i/o-invalid-position-error? . g$6948$15i0ov)
        (i/o-error-position . g$6949$15i0ov)
        (i/o-filename-error? . g$6965$15i0ov)
        (i/o-file-protection-error? . g$6980$15i0ov)
        (i/o-file-is-read-only-error? . g$6994$15i0ov)
        (i/o-file-does-not-exist-error? . g$7022$15i0ov)
        (i/o-file-already-exists-error? . g$7008$15i0ov)
        (i/o-error? . g$6904$15i0ov)
        (i/o-error-port . g$7039$15i0ov)
        (i/o-error-filename . g$6966$15i0ov)
        (&i/o-port . g$11626$15i0ov)
        (&i/o-file-does-not-exist . g$11625$15i0ov)
        (&i/o-file-already-exists . g$11624$15i0ov)
        (&i/o-file-is-read-only . g$11623$15i0ov)
        (&i/o-file-protection . g$11622$15i0ov)
        (&i/o-filename . g$11621$15i0ov)
        (&i/o-invalid-position . g$11620$15i0ov)
        (&i/o-write . g$11619$15i0ov)
        (&i/o-read . g$11618$15i0ov)
        (&i/o . g$11617$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12183$15i0ov
      '(rnrs sorting)
      '(6)
      '()
      '()
      '()
      '((vector-sort! . g$12024$15i0ov)
        (vector-sort . g$12023$15i0ov)
        (list-sort . g$6687$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12184$15i0ov
      '(rnrs base)
      '(6)
      '()
      '()
      '()
      '((zero? . g$11788$15i0ov)
        (vector? . g$11787$15i0ov)
        (vector-set! . g$11786$15i0ov)
        (vector-ref . g$11785$15i0ov)
        (vector-map . g$11784$15i0ov)
        (vector-length . g$11783$15i0ov)
        (vector-for-each . g$11782$15i0ov)
        (vector-fill! . g$11781$15i0ov)
        (vector->list . g$11780$15i0ov)
        (vector . g$11779$15i0ov)
        (values . g$11778$15i0ov)
        (truncate . g$11777$15i0ov)
        (tan . g$11776$15i0ov)
        (symbol? . g$11775$15i0ov)
        (symbol=? . g$11774$15i0ov)
        (symbol->string . g$11773$15i0ov)
        (substring . g$11772$15i0ov)
        (string? . g$11771$15i0ov)
        (string>? . g$11770$15i0ov)
        (string>=? . g$11769$15i0ov)
        (string=? . g$11768$15i0ov)
        (string<? . g$11767$15i0ov)
        (string<=? . g$11766$15i0ov)
        (string-ref . g$11765$15i0ov)
        (string-length . g$11764$15i0ov)
        (string-for-each . g$11763$15i0ov)
        (string-copy . g$11762$15i0ov)
        (string-append . g$11761$15i0ov)
        (string->symbol . g$11760$15i0ov)
        (string->number . g$11759$15i0ov)
        (string->list . g$11758$15i0ov)
        (string . g$11757$15i0ov)
        (sqrt . g$11756$15i0ov)
        (sin . g$11755$15i0ov)
        (round . g$11754$15i0ov)
        (reverse . g$11753$15i0ov)
        (real? . g$11752$15i0ov)
        (real-valued? . g$11751$15i0ov)
        (real-part . g$11750$15i0ov)
        (rationalize . g$5790$15i0ov)
        (rational? . g$11749$15i0ov)
        (rational-valued? . g$11748$15i0ov)
        (procedure? . g$11747$15i0ov)
        (positive? . g$11746$15i0ov)
        (pair? . g$11745$15i0ov)
        (odd? . g$11744$15i0ov)
        (numerator . g$11743$15i0ov)
        (number? . g$11742$15i0ov)
        (number->string . g$11741$15i0ov)
        (null? . g$11740$15i0ov)
        (not . g$11739$15i0ov)
        (negative? . g$11738$15i0ov)
        (nan? . g$11737$15i0ov)
        (min . g$11736$15i0ov)
        (max . g$11735$15i0ov)
        (map . g$11734$15i0ov)
        (make-vector . g$11733$15i0ov)
        (make-string . g$11732$15i0ov)
        (make-rectangular . g$11731$15i0ov)
        (make-polar . g$11730$15i0ov)
        (magnitude . g$11729$15i0ov)
        (log . g$11728$15i0ov)
        (list? . g$11727$15i0ov)
        (list-tail . g$11726$15i0ov)
        (list-ref . g$11725$15i0ov)
        (list->vector . g$11724$15i0ov)
        (list->string . g$11723$15i0ov)
        (list . g$11722$15i0ov)
        (length . g$11721$15i0ov)
        (lcm . g$11720$15i0ov)
        (integer? . g$11719$15i0ov)
        (integer-valued? . g$11718$15i0ov)
        (integer->char . g$11717$15i0ov)
        (infinite? . g$11716$15i0ov)
        (inexact? . g$11715$15i0ov)
        (inexact . g$11714$15i0ov)
        (imag-part . g$11713$15i0ov)
        (gcd . g$11712$15i0ov)
        (for-each . g$11711$15i0ov)
        (floor . g$11710$15i0ov)
        (finite? . g$11709$15i0ov)
        (expt . g$11708$15i0ov)
        (exp . g$11707$15i0ov)
        (exact? . g$11706$15i0ov)
        (exact-integer-sqrt . g$11705$15i0ov)
        (exact . g$11704$15i0ov)
        (even? . g$11703$15i0ov)
        (error . g$11702$15i0ov)
        (eqv? . g$11701$15i0ov)
        (equal? . g$11700$15i0ov)
        (eq? . g$11699$15i0ov)
        (dynamic-wind . g$11698$15i0ov)
        (div0-and-mod0 . g$11697$15i0ov)
        (mod0 . g$11696$15i0ov)
        (div0 . g$11695$15i0ov)
        (div-and-mod . g$11694$15i0ov)
        (mod . g$11693$15i0ov)
        (div . g$11692$15i0ov)
        (denominator . g$11691$15i0ov)
        (cos . g$11690$15i0ov)
        (cons . g$11689$15i0ov)
        (complex? . g$11688$15i0ov)
        (char? . g$11687$15i0ov)
        (char>? . g$11686$15i0ov)
        (char>=? . g$11685$15i0ov)
        (char=? . g$11684$15i0ov)
        (char<? . g$11683$15i0ov)
        (char<=? . g$11682$15i0ov)
        (char->integer . g$11681$15i0ov)
        (ceiling . g$11680$15i0ov)
        (call-with-values . g$11679$15i0ov)
        (call/cc . g$11678$15i0ov)
        (call-with-current-continuation . g$11677$15i0ov)
        (cddddr . g$5789$15i0ov)
        (cdddar . g$5788$15i0ov)
        (cddadr . g$5787$15i0ov)
        (cddaar . g$5786$15i0ov)
        (cdaddr . g$5785$15i0ov)
        (cdadar . g$5784$15i0ov)
        (cdaadr . g$5783$15i0ov)
        (cdaaar . g$5782$15i0ov)
        (cadddr . g$5781$15i0ov)
        (caddar . g$5780$15i0ov)
        (cadadr . g$5779$15i0ov)
        (cadaar . g$5778$15i0ov)
        (caaddr . g$5777$15i0ov)
        (caadar . g$5776$15i0ov)
        (caaadr . g$5775$15i0ov)
        (caaaar . g$5774$15i0ov)
        (cdddr . g$5773$15i0ov)
        (cddar . g$5772$15i0ov)
        (cdadr . g$5771$15i0ov)
        (cdaar . g$5770$15i0ov)
        (caddr . g$5769$15i0ov)
        (cadar . g$5768$15i0ov)
        (caadr . g$5767$15i0ov)
        (caaar . g$5766$15i0ov)
        (cddr . g$5765$15i0ov)
        (cdar . g$5764$15i0ov)
        (cadr . g$5763$15i0ov)
        (caar . g$5762$15i0ov)
        (cdr . g$11676$15i0ov)
        (car . g$11675$15i0ov)
        (boolean? . g$11674$15i0ov)
        (boolean=? . g$11673$15i0ov)
        (atan . g$11672$15i0ov)
        (assertion-violation . g$11671$15i0ov)
        (asin . g$11670$15i0ov)
        (apply . g$11669$15i0ov)
        (append . g$11668$15i0ov)
        (angle . g$11667$15i0ov)
        (acos . g$11666$15i0ov)
        (abs . g$11665$15i0ov)
        (/ . g$11664$15i0ov)
        (* . g$11663$15i0ov)
        (- . g$11662$15i0ov)
        (+ . g$11661$15i0ov)
        (>= . g$11660$15i0ov)
        (> . g$11659$15i0ov)
        (= . g$11658$15i0ov)
        (<= . g$11657$15i0ov)
        (< . g$11656$15i0ov)
        (unquote-splicing . g$11577$15i0ov)
        (unquote . g$11576$15i0ov)
        (_ . g$11575$15i0ov)
        (else . g$11574$15i0ov)
        (=> . g$11573$15i0ov)
        (... . g$11572$15i0ov)
        (assert . g$11571$15i0ov)
        (or . g$11567$15i0ov)
        (and . g$11566$15i0ov)
        (cond . g$11564$15i0ov)
        (let* . g$11563$15i0ov)
        (let . g$11562$15i0ov)
        (identifier-syntax . g$11561$15i0ov)
        (quasiquote . g$11558$15i0ov)
        (syntax-rules . g$11557$15i0ov)
        (let-values . g$11553$15i0ov)
        (let*-values . g$11552$15i0ov)
        (case . g$11548$15i0ov)
        (if . g$11544$15i0ov)
        (letrec* . g$11543$15i0ov)
        (letrec . g$11542$15i0ov)
        (lambda . g$11539$15i0ov)
        (quote . g$11536$15i0ov)
        (letrec-syntax . g$11534$15i0ov)
        (let-syntax . g$11533$15i0ov)
        (set! . g$11532$15i0ov)
        (begin . g$11529$15i0ov)
        (define-syntax . g$11527$15i0ov)
        (define . g$11526$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12185$15i0ov
      '(rnrs lists)
      '(6)
      '()
      '()
      '()
      '((remove . g$6254$15i0ov)
        (remv . g$6255$15i0ov)
        (remp . g$6240$15i0ov)
        (remq . g$6256$15i0ov)
        (partition . g$6239$15i0ov)
        (memv . g$11924$15i0ov)
        (memq . g$11923$15i0ov)
        (memp . g$6246$15i0ov)
        (member . g$6245$15i0ov)
        (exists . g$6250$15i0ov)
        (for-all . g$6249$15i0ov)
        (fold-right . g$6253$15i0ov)
        (fold-left . g$6252$15i0ov)
        (find . g$6238$15i0ov)
        (filter . g$6241$15i0ov)
        (cons* . g$6251$15i0ov)
        (assv . g$6242$15i0ov)
        (assq . g$11922$15i0ov)
        (assp . g$6244$15i0ov)
        (assoc . g$6243$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12186$15i0ov
      '(rnrs io simple)
      '(6)
      '()
      '()
      '()
      '((call-with-output-file . g$7099$15i0ov)
        (call-with-input-file . g$7098$15i0ov)
        (write-char . g$12010$15i0ov)
        (write . g$12009$15i0ov)
        (with-output-to-file . g$7097$15i0ov)
        (with-input-from-file . g$7096$15i0ov)
        (read-char . g$12008$15i0ov)
        (read . g$12007$15i0ov)
        (peek-char . g$12006$15i0ov)
        (open-output-file . g$12005$15i0ov)
        (open-input-file . g$12004$15i0ov)
        (newline . g$12003$15i0ov)
        (display . g$12002$15i0ov)
        (close-output-port . g$12001$15i0ov)
        (close-input-port . g$12000$15i0ov)
        (eof-object? . g$11999$15i0ov)
        (eof-object . g$11998$15i0ov)
        (current-error-port . g$11997$15i0ov)
        (current-output-port . g$11996$15i0ov)
        (current-input-port . g$11995$15i0ov)
        (output-port? . g$11994$15i0ov)
        (input-port? . g$11993$15i0ov)
        (make-i/o-write-error . g$6931$15i0ov)
        (make-i/o-read-error . g$6917$15i0ov)
        (make-i/o-port-error . g$7036$15i0ov)
        (make-i/o-invalid-position-error . g$6946$15i0ov)
        (make-i/o-filename-error . g$6963$15i0ov)
        (make-i/o-file-protection-error . g$6979$15i0ov)
        (make-i/o-file-is-read-only-error . g$6993$15i0ov)
        (make-i/o-file-does-not-exist-error . g$7021$15i0ov)
        (make-i/o-file-already-exists-error . g$7007$15i0ov)
        (make-i/o-error . g$6903$15i0ov)
        (i/o-write-error? . g$6932$15i0ov)
        (i/o-read-error? . g$6918$15i0ov)
        (i/o-port-error? . g$7038$15i0ov)
        (i/o-invalid-position-error? . g$6948$15i0ov)
        (i/o-error-position . g$6949$15i0ov)
        (i/o-filename-error? . g$6965$15i0ov)
        (i/o-file-protection-error? . g$6980$15i0ov)
        (i/o-file-is-read-only-error? . g$6994$15i0ov)
        (i/o-file-does-not-exist-error? . g$7022$15i0ov)
        (i/o-file-already-exists-error? . g$7008$15i0ov)
        (i/o-error? . g$6904$15i0ov)
        (i/o-error-port . g$7039$15i0ov)
        (i/o-error-filename . g$6966$15i0ov)
        (&i/o-port . g$11626$15i0ov)
        (&i/o-file-does-not-exist . g$11625$15i0ov)
        (&i/o-file-already-exists . g$11624$15i0ov)
        (&i/o-file-is-read-only . g$11623$15i0ov)
        (&i/o-file-protection . g$11622$15i0ov)
        (&i/o-filename . g$11621$15i0ov)
        (&i/o-invalid-position . g$11620$15i0ov)
        (&i/o-write . g$11619$15i0ov)
        (&i/o-read . g$11618$15i0ov)
        (&i/o . g$11617$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12187$15i0ov
      '(rnrs bytevectors)
      '(6)
      '()
      '()
      '()
      '((make-bytevector . g$11953$15i0ov)
        (utf32->string . g$11913$15i0ov)
        (utf16->string . g$11912$15i0ov)
        (utf8->string . g$11911$15i0ov)
        (uint-list->bytevector . g$11910$15i0ov)
        (u8-list->bytevector . g$11909$15i0ov)
        (string->utf8 . g$11908$15i0ov)
        (string->utf32 . g$11907$15i0ov)
        (string->utf16 . g$11906$15i0ov)
        (sint-list->bytevector . g$11905$15i0ov)
        (native-endianness . g$6330$15i0ov)
        (bytevector? . g$11904$15i0ov)
        (bytevector=? . g$11903$15i0ov)
        (bytevector-uint-set! . g$11902$15i0ov)
        (bytevector-uint-ref . g$11901$15i0ov)
        (bytevector-u8-set! . g$11900$15i0ov)
        (bytevector-u8-ref . g$11899$15i0ov)
        (bytevector-u64-set! . g$6351$15i0ov)
        (bytevector-u64-ref . g$6347$15i0ov)
        (bytevector-u64-native-set! . g$6353$15i0ov)
        (bytevector-u64-native-ref . g$6349$15i0ov)
        (bytevector-u32-set! . g$6343$15i0ov)
        (bytevector-u32-ref . g$6339$15i0ov)
        (bytevector-u32-native-set! . g$6345$15i0ov)
        (bytevector-u32-native-ref . g$6341$15i0ov)
        (bytevector-u16-set! . g$6335$15i0ov)
        (bytevector-u16-ref . g$6331$15i0ov)
        (bytevector-u16-native-set! . g$6337$15i0ov)
        (bytevector-u16-native-ref . g$6333$15i0ov)
        (bytevector-sint-set! . g$11898$15i0ov)
        (bytevector-sint-ref . g$11897$15i0ov)
        (bytevector-s8-set! . g$11896$15i0ov)
        (bytevector-s8-ref . g$11895$15i0ov)
        (bytevector-s64-set! . g$6352$15i0ov)
        (bytevector-s64-ref . g$6348$15i0ov)
        (bytevector-s64-native-set! . g$6354$15i0ov)
        (bytevector-s64-native-ref . g$6350$15i0ov)
        (bytevector-s32-set! . g$6344$15i0ov)
        (bytevector-s32-ref . g$6340$15i0ov)
        (bytevector-s32-native-set! . g$6346$15i0ov)
        (bytevector-s32-native-ref . g$6342$15i0ov)
        (bytevector-s16-set! . g$6336$15i0ov)
        (bytevector-s16-ref . g$6332$15i0ov)
        (bytevector-s16-native-set! . g$6338$15i0ov)
        (bytevector-s16-native-ref . g$6334$15i0ov)
        (bytevector-length . g$11894$15i0ov)
        (bytevector-ieee-single-set! . g$11893$15i0ov)
        (bytevector-ieee-single-ref . g$11892$15i0ov)
        (bytevector-ieee-single-native-set! . g$6357$15i0ov)
        (bytevector-ieee-single-native-ref . g$6355$15i0ov)
        (bytevector-ieee-double-set! . g$11891$15i0ov)
        (bytevector-ieee-double-ref . g$11890$15i0ov)
        (bytevector-ieee-double-native-set! . g$6358$15i0ov)
        (bytevector-ieee-double-native-ref . g$6356$15i0ov)
        (bytevector-fill! . g$11889$15i0ov)
        (bytevector-copy! . g$11888$15i0ov)
        (bytevector-copy . g$11887$15i0ov)
        (bytevector->uint-list . g$11886$15i0ov)
        (bytevector->u8-list . g$11885$15i0ov)
        (bytevector->sint-list . g$11884$15i0ov)
        (endianness . g$11570$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12188$15i0ov
      '(rnrs unicode)
      '(6)
      '()
      '()
      '()
      '((string-upcase . g$12070$15i0ov)
        (string-titlecase . g$12069$15i0ov)
        (string-normalize-nfkd . g$12068$15i0ov)
        (string-normalize-nfkc . g$12067$15i0ov)
        (string-normalize-nfd . g$12066$15i0ov)
        (string-normalize-nfc . g$12065$15i0ov)
        (string-foldcase . g$12064$15i0ov)
        (string-downcase . g$12063$15i0ov)
        (string-ci>? . g$12062$15i0ov)
        (string-ci>=? . g$12061$15i0ov)
        (string-ci=? . g$12060$15i0ov)
        (string-ci<? . g$12059$15i0ov)
        (string-ci<=? . g$12058$15i0ov)
        (char-whitespace? . g$12057$15i0ov)
        (char-upper-case? . g$12056$15i0ov)
        (char-title-case? . g$12055$15i0ov)
        (char-numeric? . g$12054$15i0ov)
        (char-lower-case? . g$12053$15i0ov)
        (char-general-category . g$12052$15i0ov)
        (char-upcase . g$12051$15i0ov)
        (char-titlecase . g$12050$15i0ov)
        (char-foldcase . g$12049$15i0ov)
        (char-downcase . g$12048$15i0ov)
        (char-ci>? . g$12047$15i0ov)
        (char-ci>=? . g$12046$15i0ov)
        (char-ci=? . g$12045$15i0ov)
        (char-ci<? . g$12044$15i0ov)
        (char-ci<=? . g$12043$15i0ov)
        (char-alphabetic? . g$12042$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12189$15i0ov
      '(rnrs exceptions)
      '(6)
      '()
      '()
      '()
      '((with-exception-handler . g$11921$15i0ov)
        (raise-continuable . g$11920$15i0ov)
        (raise . g$11919$15i0ov)
        (guard . g$11585$15i0ov)
        (else . g$11574$15i0ov)
        (=> . g$11573$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12190$15i0ov
      '(rnrs arithmetic bitwise)
      '(6)
      '()
      '()
      '()
      '((bitwise-rotate-bit-field . g$6772$15i0ov)
        (bitwise-reverse-bit-field . g$11799$15i0ov)
        (bitwise-length . g$11798$15i0ov)
        (bitwise-if . g$6766$15i0ov)
        (bitwise-first-bit-set . g$11797$15i0ov)
        (bitwise-copy-bit-field . g$6769$15i0ov)
        (bitwise-copy-bit . g$6767$15i0ov)
        (bitwise-bit-set? . g$11796$15i0ov)
        (bitwise-bit-field . g$11795$15i0ov)
        (bitwise-bit-count . g$11794$15i0ov)
        (bitwise-xor . g$11793$15i0ov)
        (bitwise-ior . g$11792$15i0ov)
        (bitwise-and . g$11791$15i0ov)
        (bitwise-not . g$11790$15i0ov)
        (bitwise-arithmetic-shift-right . g$6771$15i0ov)
        (bitwise-arithmetic-shift-left . g$6770$15i0ov)
        (bitwise-arithmetic-shift . g$11789$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12191$15i0ov
      '(rnrs arithmetic fixnums)
      '(6)
      '()
      '()
      '()
      '((fxzero? . g$11837$15i0ov)
        (fxxor . g$11836$15i0ov)
        (fxrotate-bit-field . g$6820$15i0ov)
        (fxreverse-bit-field . g$11835$15i0ov)
        (fxpositive? . g$11834$15i0ov)
        (fxodd? . g$11833$15i0ov)
        (fxnot . g$11832$15i0ov)
        (fxnegative? . g$11831$15i0ov)
        (fxmod0 . g$11830$15i0ov)
        (fxmod . g$11829$15i0ov)
        (fxmin . g$11828$15i0ov)
        (fxmax . g$11827$15i0ov)
        (fxlength . g$11826$15i0ov)
        (fxior . g$11825$15i0ov)
        (fxif . g$6814$15i0ov)
        (fxfirst-bit-set . g$11824$15i0ov)
        (fxeven? . g$11823$15i0ov)
        (fxdiv0-and-mod0 . g$11822$15i0ov)
        (fxdiv0 . g$11821$15i0ov)
        (fxdiv-and-mod . g$11820$15i0ov)
        (fxdiv . g$11819$15i0ov)
        (fxcopy-bit-field . g$6817$15i0ov)
        (fxcopy-bit . g$6815$15i0ov)
        (fxbit-set? . g$11818$15i0ov)
        (fxbit-field . g$6816$15i0ov)
        (fxbit-count . g$11817$15i0ov)
        (fxarithmetic-shift-right . g$6819$15i0ov)
        (fxarithmetic-shift-left . g$6818$15i0ov)
        (fxarithmetic-shift . g$11816$15i0ov)
        (fxand . g$11815$15i0ov)
        (fx>? . g$11814$15i0ov)
        (fx>=? . g$11813$15i0ov)
        (fx=? . g$11812$15i0ov)
        (fx<? . g$11811$15i0ov)
        (fx<=? . g$11810$15i0ov)
        (fx-/carry . g$11809$15i0ov)
        (fx- . g$11808$15i0ov)
        (fx+/carry . g$11807$15i0ov)
        (fx+ . g$11806$15i0ov)
        (fx*/carry . g$11805$15i0ov)
        (fx* . g$11804$15i0ov)
        (greatest-fixnum . g$11803$15i0ov)
        (least-fixnum . g$11802$15i0ov)
        (fixnum-width . g$11801$15i0ov)
        (fixnum? . g$11800$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12192$15i0ov
      '(rnrs arithmetic flonums)
      '(6)
      '()
      '()
      '()
      '((no-nans-violation? . g$6889$15i0ov)
        (no-infinities-violation? . g$6875$15i0ov)
        (make-no-nans-violation . g$6888$15i0ov)
        (make-no-infinities-violation . g$6874$15i0ov)
        (real->flonum . g$11883$15i0ov)
        (flzero? . g$11882$15i0ov)
        (fltruncate . g$11881$15i0ov)
        (fltan . g$11880$15i0ov)
        (flsqrt . g$11879$15i0ov)
        (flsin . g$11878$15i0ov)
        (flround . g$11877$15i0ov)
        (flpositive? . g$11876$15i0ov)
        (flonum? . g$11875$15i0ov)
        (flodd? . g$11874$15i0ov)
        (flnumerator . g$11873$15i0ov)
        (flnegative? . g$11872$15i0ov)
        (flnan? . g$11871$15i0ov)
        (flmod0 . g$11870$15i0ov)
        (flmod . g$11869$15i0ov)
        (flmin . g$11868$15i0ov)
        (flmax . g$11867$15i0ov)
        (fllog . g$11866$15i0ov)
        (flinteger? . g$11865$15i0ov)
        (flinfinite? . g$11864$15i0ov)
        (flfloor . g$11863$15i0ov)
        (flfinite? . g$11862$15i0ov)
        (flexpt . g$11861$15i0ov)
        (flexp . g$11860$15i0ov)
        (fleven? . g$11859$15i0ov)
        (fldiv0-and-mod0 . g$11858$15i0ov)
        (fldiv0 . g$11857$15i0ov)
        (fldiv-and-mod . g$11856$15i0ov)
        (fldiv . g$11855$15i0ov)
        (fldenominator . g$11854$15i0ov)
        (flcos . g$11853$15i0ov)
        (flceiling . g$11852$15i0ov)
        (flatan . g$11851$15i0ov)
        (flasin . g$11850$15i0ov)
        (flacos . g$11849$15i0ov)
        (flabs . g$11848$15i0ov)
        (fl>? . g$11847$15i0ov)
        (fl>=? . g$11846$15i0ov)
        (fl=? . g$11845$15i0ov)
        (fl<? . g$11844$15i0ov)
        (fl<=? . g$11843$15i0ov)
        (fl/ . g$11842$15i0ov)
        (fl- . g$11841$15i0ov)
        (fl+ . g$11840$15i0ov)
        (fl* . g$11839$15i0ov)
        (fixnum->flonum . g$11838$15i0ov)
        (&no-nans . g$11630$15i0ov)
        (&no-infinities . g$11629$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12193$15i0ov
      '(rnrs hashtables)
      '(6)
      '()
      '()
      '()
      '((symbol-hash . g$12022$15i0ov)
        (string-ci-hash . g$12021$15i0ov)
        (string-hash . g$12020$15i0ov)
        (equal-hash . g$12019$15i0ov)
        (hashtable-equivalence-function . g$12018$15i0ov)
        (make-hashtable . g$12017$15i0ov)
        (hashtable-hash-function . g$12016$15i0ov)
        (make-eqv-hashtable . g$6141$15i0ov)
        (make-eq-hashtable . g$6140$15i0ov)
        (hashtable? . g$12015$15i0ov)
        (hashtable-update! . g$6147$15i0ov)
        (hashtable-size . g$6142$15i0ov)
        (hashtable-set! . g$6144$15i0ov)
        (hashtable-ref . g$6143$15i0ov)
        (hashtable-mutable? . g$12014$15i0ov)
        (hashtable-keys . g$12013$15i0ov)
        (hashtable-entries . g$12012$15i0ov)
        (hashtable-delete! . g$6145$15i0ov)
        (hashtable-copy . g$12011$15i0ov)
        (hashtable-contains? . g$6146$15i0ov)
        (hashtable-clear! . g$6148$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12194$15i0ov
      '(rnrs io ports)
      '(6)
      '()
      '()
      '()
      '((eof-object? . g$11999$15i0ov)
        (eof-object . g$11998$15i0ov)
        (current-error-port . g$11997$15i0ov)
        (current-output-port . g$11996$15i0ov)
        (current-input-port . g$11995$15i0ov)
        (output-port? . g$11994$15i0ov)
        (input-port? . g$11993$15i0ov)
        (utf-8-codec . g$11992$15i0ov)
        (utf-16-codec . g$11991$15i0ov)
        (transcoder-error-handling-mode . g$11990$15i0ov)
        (transcoder-eol-style . g$11989$15i0ov)
        (transcoder-codec . g$11988$15i0ov)
        (transcoded-port . g$11987$15i0ov)
        (textual-port? . g$11986$15i0ov)
        (string->bytevector . g$11985$15i0ov)
        (standard-output-port . g$11984$15i0ov)
        (standard-input-port . g$11983$15i0ov)
        (standard-error-port . g$11982$15i0ov)
        (set-port-position! . g$11981$15i0ov)
        (put-u8 . g$11980$15i0ov)
        (put-string . g$11979$15i0ov)
        (put-datum . g$11978$15i0ov)
        (put-char . g$11977$15i0ov)
        (put-bytevector . g$11976$15i0ov)
        (port? . g$7075$15i0ov)
        (port-transcoder . g$11975$15i0ov)
        (port-position . g$11974$15i0ov)
        (port-has-set-port-position!? . g$11973$15i0ov)
        (port-has-port-position? . g$11972$15i0ov)
        (port-eof? . g$11971$15i0ov)
        (output-port-buffer-mode . g$11970$15i0ov)
        (open-string-output-port . g$7074$15i0ov)
        (open-string-input-port . g$11969$15i0ov)
        (open-file-output-port . g$11968$15i0ov)
        (open-file-input/output-port . g$11967$15i0ov)
        (open-file-input-port . g$11966$15i0ov)
        (open-bytevector-output-port . g$11965$15i0ov)
        (open-bytevector-input-port . g$11964$15i0ov)
        (native-transcoder . g$11963$15i0ov)
        (native-eol-style . g$11962$15i0ov)
        (make-transcoder . g$11961$15i0ov)
        (latin-1-codec . g$11960$15i0ov)
        (make-i/o-write-error . g$6931$15i0ov)
        (make-i/o-read-error . g$6917$15i0ov)
        (make-i/o-port-error . g$7036$15i0ov)
        (make-i/o-invalid-position-error . g$6946$15i0ov)
        (make-i/o-filename-error . g$6963$15i0ov)
        (make-i/o-file-protection-error . g$6979$15i0ov)
        (make-i/o-file-is-read-only-error . g$6993$15i0ov)
        (make-i/o-file-does-not-exist-error . g$7021$15i0ov)
        (make-i/o-file-already-exists-error . g$7007$15i0ov)
        (make-i/o-error . g$6903$15i0ov)
        (make-i/o-encoding-error . g$7067$15i0ov)
        (make-i/o-decoding-error . g$7052$15i0ov)
        (make-custom-textual-output-port . g$11959$15i0ov)
        (make-custom-textual-input/output-port . g$11958$15i0ov)
        (make-custom-textual-input-port . g$11957$15i0ov)
        (make-custom-binary-output-port . g$11956$15i0ov)
        (make-custom-binary-input/output-port . g$11955$15i0ov)
        (make-custom-binary-input-port . g$11954$15i0ov)
        (lookahead-u8 . g$11952$15i0ov)
        (lookahead-char . g$11951$15i0ov)
        (i/o-write-error? . g$6932$15i0ov)
        (i/o-read-error? . g$6918$15i0ov)
        (i/o-port-error? . g$7038$15i0ov)
        (i/o-invalid-position-error? . g$6948$15i0ov)
        (i/o-error-position . g$6949$15i0ov)
        (i/o-filename-error? . g$6965$15i0ov)
        (i/o-file-protection-error? . g$6980$15i0ov)
        (i/o-file-is-read-only-error? . g$6994$15i0ov)
        (i/o-file-does-not-exist-error? . g$7022$15i0ov)
        (i/o-file-already-exists-error? . g$7008$15i0ov)
        (i/o-error? . g$6904$15i0ov)
        (i/o-error-port . g$7039$15i0ov)
        (i/o-error-filename . g$6966$15i0ov)
        (i/o-encoding-error? . g$7069$15i0ov)
        (i/o-encoding-error-char . g$7070$15i0ov)
        (i/o-decoding-error? . g$7053$15i0ov)
        (get-u8 . g$11950$15i0ov)
        (get-string-n! . g$11949$15i0ov)
        (get-string-n . g$11948$15i0ov)
        (get-string-all . g$11947$15i0ov)
        (get-line . g$11946$15i0ov)
        (get-datum . g$11945$15i0ov)
        (get-char . g$11944$15i0ov)
        (get-bytevector-some . g$11943$15i0ov)
        (get-bytevector-n! . g$11942$15i0ov)
        (get-bytevector-n . g$11941$15i0ov)
        (get-bytevector-all . g$11940$15i0ov)
        (flush-output-port . g$11939$15i0ov)
        (close-port . g$11938$15i0ov)
        (call-with-string-output-port . g$11937$15i0ov)
        (call-with-port . g$11936$15i0ov)
        (call-with-bytevector-output-port . g$11935$15i0ov)
        (bytevector->string . g$11934$15i0ov)
        (buffer-mode? . g$11933$15i0ov)
        (binary-port? . g$11932$15i0ov)
        (&i/o-encoding . g$11628$15i0ov)
        (&i/o-decoding . g$11627$15i0ov)
        (&i/o-port . g$11626$15i0ov)
        (&i/o-file-does-not-exist . g$11625$15i0ov)
        (&i/o-file-already-exists . g$11624$15i0ov)
        (&i/o-file-is-read-only . g$11623$15i0ov)
        (&i/o-file-protection . g$11622$15i0ov)
        (&i/o-filename . g$11621$15i0ov)
        (&i/o-invalid-position . g$11620$15i0ov)
        (&i/o-write . g$11619$15i0ov)
        (&i/o-read . g$11618$15i0ov)
        (&i/o . g$11617$15i0ov)
        (error-handling-mode . g$11589$15i0ov)
        (file-options . g$11588$15i0ov)
        (buffer-mode . g$11587$15i0ov)
        (eol-style . g$11586$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12195$15i0ov
      '(rnrs enums)
      '(6)
      '()
      '()
      '()
      '((make-enumeration . g$7156$15i0ov)
        (enum-set=? . g$7163$15i0ov)
        (enum-set-universe . g$7157$15i0ov)
        (enum-set-union . g$7164$15i0ov)
        (enum-set-subset? . g$7162$15i0ov)
        (enum-set-projection . g$7168$15i0ov)
        (enum-set-member? . g$7161$15i0ov)
        (enum-set-intersection . g$7165$15i0ov)
        (enum-set-indexer . g$7158$15i0ov)
        (enum-set-difference . g$7166$15i0ov)
        (enum-set-constructor . g$7159$15i0ov)
        (enum-set-complement . g$7167$15i0ov)
        (enum-set->list . g$7160$15i0ov)
        (define-enumeration . g$11600$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12196$15i0ov
      '(rnrs conditions)
      '(6)
      '()
      '()
      '()
      '((who-condition? . g$6578$15i0ov)
        (warning? . g$6489$15i0ov)
        (violation? . g$6531$15i0ov)
        (undefined-violation? . g$6655$15i0ov)
        (syntax-violation? . g$6639$15i0ov)
        (syntax-violation-subform . g$6641$15i0ov)
        (syntax-violation-form . g$6640$15i0ov)
        (syntax-violation . g$8553$15i0ov)
        (simple-conditions . g$11918$15i0ov)
        (serious-condition? . g$6503$15i0ov)
        (non-continuable-violation? . g$6593$15i0ov)
        (message-condition? . g$6474$15i0ov)
        (make-who-condition . g$6576$15i0ov)
        (make-warning . g$6488$15i0ov)
        (make-violation . g$6530$15i0ov)
        (make-undefined-violation . g$6654$15i0ov)
        (make-syntax-violation . g$6636$15i0ov)
        (make-serious-condition . g$6502$15i0ov)
        (make-non-continuable-violation . g$6592$15i0ov)
        (make-message-condition . g$6472$15i0ov)
        (make-lexical-violation . g$6620$15i0ov)
        (make-irritants-condition . g$6559$15i0ov)
        (make-implementation-restriction-violation . g$6606$15i0ov)
        (make-error . g$6516$15i0ov)
        (make-assertion-violation . g$6544$15i0ov)
        (lexical-violation? . g$6621$15i0ov)
        (irritants-condition? . g$6561$15i0ov)
        (implementation-restriction-violation? . g$6607$15i0ov)
        (error? . g$6517$15i0ov)
        (condition-who . g$6579$15i0ov)
        (condition-predicate . g$11917$15i0ov)
        (condition-message . g$6475$15i0ov)
        (condition-irritants . g$6562$15i0ov)
        (condition-accessor . g$11916$15i0ov)
        (condition . g$11915$15i0ov)
        (assertion-violation? . g$6545$15i0ov)
        (condition? . g$11914$15i0ov)
        (&non-continuable . g$11616$15i0ov)
        (&undefined . g$11615$15i0ov)
        (&syntax . g$11614$15i0ov)
        (&lexical . g$11613$15i0ov)
        (&implementation-restriction . g$11612$15i0ov)
        (&who . g$11610$15i0ov)
        (&irritants . g$11609$15i0ov)
        (&assertion . g$11608$15i0ov)
        (&violation . g$11607$15i0ov)
        (&error . g$11606$15i0ov)
        (&serious . g$11605$15i0ov)
        (&warning . g$11604$15i0ov)
        (&message . g$11603$15i0ov)
        (&condition . g$11602$15i0ov)
        (define-condition-type . g$11601$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12197$15i0ov
      '(rnrs records inspection)
      '(6)
      '()
      '()
      '()
      '((record? . g$12034$15i0ov)
        (record-type-uid . g$12033$15i0ov)
        (record-type-sealed? . g$12032$15i0ov)
        (record-type-parent . g$12031$15i0ov)
        (record-type-opaque? . g$12030$15i0ov)
        (record-type-name . g$12029$15i0ov)
        (record-type-generative? . g$12028$15i0ov)
        (record-type-field-names . g$12027$15i0ov)
        (record-rtd . g$12026$15i0ov)
        (record-field-mutable? . g$12025$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12198$15i0ov
      '(rnrs records procedural)
      '(6)
      '()
      '()
      '()
      '((record-type-descriptor? . g$12041$15i0ov)
        (record-predicate . g$12040$15i0ov)
        (record-mutator . g$12039$15i0ov)
        (record-constructor . g$12038$15i0ov)
        (record-accessor . g$12037$15i0ov)
        (make-record-type-descriptor . g$12036$15i0ov)
        (make-record-constructor-descriptor . g$12035$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12199$15i0ov
      '(rnrs records syntactic)
      '(6)
      '()
      '()
      '()
      '((define-record-type . g$11599$15i0ov)
        (parent-rtd . g$11598$15i0ov)
        (nongenerative . g$11597$15i0ov)
        (opaque . g$11596$15i0ov)
        (sealed . g$11595$15i0ov)
        (protocol . g$11594$15i0ov)
        (parent . g$11593$15i0ov)
        (immutable . g$11592$15i0ov)
        (mutable . g$11591$15i0ov)
        (fields . g$11590$15i0ov)
        (record-constructor-descriptor . g$11551$15i0ov)
        (record-type-descriptor . g$11550$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#t
      '#f)
    (g$install-library$6930$15i0ov
      'g$12200$15i0ov
      '(psyntax system $all)
      '()
      '()
      '()
      '()
      '((ellipsis-map . g$8428$15i0ov)
        (&no-nans-rcd . g$12164$15i0ov)
        (&no-nans-rtd . g$12163$15i0ov)
        (&no-infinities-rcd . g$12162$15i0ov)
        (&no-infinities-rtd . g$12161$15i0ov)
        (&i/o-encoding-rcd . g$12160$15i0ov)
        (&i/o-encoding-rtd . g$12159$15i0ov)
        (&i/o-decoding-rcd . g$12158$15i0ov)
        (&i/o-decoding-rtd . g$12157$15i0ov)
        (&i/o-port-rcd . g$12156$15i0ov)
        (&i/o-port-rtd . g$12155$15i0ov)
        (&i/o-file-does-not-exist-rcd . g$12154$15i0ov)
        (&i/o-file-does-not-exist-rtd . g$12153$15i0ov)
        (&i/o-file-already-exists-rcd . g$12152$15i0ov)
        (&i/o-file-already-exists-rtd . g$12151$15i0ov)
        (&i/o-file-is-read-only-rcd . g$12150$15i0ov)
        (&i/o-file-is-read-only-rtd . g$12149$15i0ov)
        (&i/o-file-protection-rcd . g$12148$15i0ov)
        (&i/o-file-protection-rtd . g$12147$15i0ov)
        (&i/o-filename-rcd . g$12146$15i0ov)
        (&i/o-filename-rtd . g$12145$15i0ov)
        (&i/o-invalid-position-rcd . g$12144$15i0ov)
        (&i/o-invalid-position-rtd . g$12143$15i0ov)
        (&i/o-write-rcd . g$12142$15i0ov)
        (&i/o-write-rtd . g$12141$15i0ov)
        (&i/o-read-rcd . g$12140$15i0ov)
        (&i/o-read-rtd . g$12139$15i0ov)
        (&i/o-rcd . g$12138$15i0ov)
        (&i/o-rtd . g$12137$15i0ov)
        (&undefined-rcd . g$12136$15i0ov)
        (&undefined-rtd . g$12135$15i0ov)
        (&syntax-rcd . g$12134$15i0ov)
        (&syntax-rtd . g$12133$15i0ov)
        (&lexical-rcd . g$12132$15i0ov)
        (&lexical-rtd . g$12131$15i0ov)
        (&implementation-restriction-rcd . g$12130$15i0ov)
        (&implementation-restriction-rtd . g$12129$15i0ov)
        (&non-continuable-rcd . g$12128$15i0ov)
        (&non-continuable-rtd . g$12127$15i0ov)
        (&who-rcd . g$12126$15i0ov)
        (&who-rtd . g$12125$15i0ov)
        (&irritants-rcd . g$12124$15i0ov)
        (&irritants-rtd . g$12123$15i0ov)
        (&assertion-rcd . g$12122$15i0ov)
        (&assertion-rtd . g$12121$15i0ov)
        (&violation-rcd . g$12120$15i0ov)
        (&violation-rtd . g$12119$15i0ov)
        (&error-rcd . g$12118$15i0ov)
        (&error-rtd . g$12117$15i0ov)
        (&serious-rcd . g$12116$15i0ov)
        (&serious-rtd . g$12115$15i0ov)
        (&warning-rcd . g$12114$15i0ov)
        (&warning-rtd . g$12113$15i0ov)
        (&message-rcd . g$12112$15i0ov)
        (&message-rtd . g$12111$15i0ov)
        (&condition-rcd . g$12110$15i0ov)
        (&condition-rtd . g$12109$15i0ov)
        (library-letrec* . g$12108$15i0ov)
        (annotation-stripped . g$12107$15i0ov)
        (annotation-source . g$12106$15i0ov)
        (annotation-expression . g$12105$15i0ov)
        (annotation? . g$12104$15i0ov)
        (read-annotated . g$12103$15i0ov)
        (tanh . g$12102$15i0ov)
        (cosh . g$12101$15i0ov)
        (sinh . g$12100$15i0ov)
        (make-guid . g$12099$15i0ov)
        (unspecified? . g$12098$15i0ov)
        (make-trace . g$12097$15i0ov)
        (make-list . g$12096$15i0ov)
        (last-pair . g$12095$15i0ov)
        (load-r5rs . g$12094$15i0ov)
        (license . g$12093$15i0ov)
        (stacktrace . g$12092$15i0ov)
        (ironscheme-build . g$11494$15i0ov)
        (define-clr-class-internal . g$12091$15i0ov)
        (clr-field-set!-internal . g$12090$15i0ov)
        (clr-field-get-internal . g$12089$15i0ov)
        (clr-cast-internal . g$12088$15i0ov)
        (clr-call-internal . g$12087$15i0ov)
        (clr-new-internal . g$12086$15i0ov)
        (clr-new-array-internal . g$12085$15i0ov)
        (clr-is-internal . g$12084$15i0ov)
        (clr-reference-internal . g$12083$15i0ov)
        (clr-using-internal . g$12082$15i0ov)
        (clr-clear-usings-internal . g$12081$15i0ov)
        (syntax-error . g$8550$15i0ov)
        (syntax-dispatch . g$8423$15i0ov)
        (compile-core . g$12080$15i0ov)
        (eval-core . g$12079$15i0ov)
        (set-symbol-value! . g$12078$15i0ov)
        (symbol-value . g$12077$15i0ov)
        (ungensym . g$12076$15i0ov)
        (gensym . g$12075$15i0ov)
        (void . g$12074$15i0ov)
        (load-serialized-library . g$12073$15i0ov)
        (serialize-library . g$12072$15i0ov)
        (compile-system-libraries . g$11496$15i0ov)
        (compile->closure . g$11498$15i0ov)
        (compile . g$11497$15i0ov)
        (load . g$11493$15i0ov)
        (interaction-environment . g$8559$15i0ov)
        (char-ready? . g$12071$15i0ov)
        (string-upcase . g$12070$15i0ov)
        (string-titlecase . g$12069$15i0ov)
        (string-normalize-nfkd . g$12068$15i0ov)
        (string-normalize-nfkc . g$12067$15i0ov)
        (string-normalize-nfd . g$12066$15i0ov)
        (string-normalize-nfc . g$12065$15i0ov)
        (string-foldcase . g$12064$15i0ov)
        (string-downcase . g$12063$15i0ov)
        (string-ci>? . g$12062$15i0ov)
        (string-ci>=? . g$12061$15i0ov)
        (string-ci=? . g$12060$15i0ov)
        (string-ci<? . g$12059$15i0ov)
        (string-ci<=? . g$12058$15i0ov)
        (char-whitespace? . g$12057$15i0ov)
        (char-upper-case? . g$12056$15i0ov)
        (char-title-case? . g$12055$15i0ov)
        (char-numeric? . g$12054$15i0ov)
        (char-lower-case? . g$12053$15i0ov)
        (char-general-category . g$12052$15i0ov)
        (char-upcase . g$12051$15i0ov)
        (char-titlecase . g$12050$15i0ov)
        (char-foldcase . g$12049$15i0ov)
        (char-downcase . g$12048$15i0ov)
        (char-ci>? . g$12047$15i0ov)
        (char-ci>=? . g$12046$15i0ov)
        (char-ci=? . g$12045$15i0ov)
        (char-ci<? . g$12044$15i0ov)
        (char-ci<=? . g$12043$15i0ov)
        (char-alphabetic? . g$12042$15i0ov)
        (variable-transformer-procedure . g$8160$15i0ov)
        (variable-transformer? . g$8159$15i0ov)
        (make-variable-transformer . g$8158$15i0ov)
        (identifier? . g$8554$15i0ov)
        (generate-temporaries . g$8543$15i0ov)
        (free-identifier=? . g$8544$15i0ov)
        (syntax->datum . g$8556$15i0ov)
        (datum->syntax . g$8555$15i0ov)
        (bound-identifier=? . g$8545$15i0ov)
        (record-type-descriptor? . g$12041$15i0ov)
        (record-predicate . g$12040$15i0ov)
        (record-mutator . g$12039$15i0ov)
        (record-constructor . g$12038$15i0ov)
        (record-accessor . g$12037$15i0ov)
        (make-record-type-descriptor . g$12036$15i0ov)
        (make-record-constructor-descriptor . g$12035$15i0ov)
        (record? . g$12034$15i0ov)
        (record-type-uid . g$12033$15i0ov)
        (record-type-sealed? . g$12032$15i0ov)
        (record-type-parent . g$12031$15i0ov)
        (record-type-opaque? . g$12030$15i0ov)
        (record-type-name . g$12029$15i0ov)
        (record-type-generative? . g$12028$15i0ov)
        (record-type-field-names . g$12027$15i0ov)
        (record-rtd . g$12026$15i0ov)
        (record-field-mutable? . g$12025$15i0ov)
        (delete-file . g$6174$15i0ov)
        (file-exists? . g$6173$15i0ov)
        (vector-sort! . g$12024$15i0ov)
        (vector-sort . g$12023$15i0ov)
        (list-sort . g$6687$15i0ov)
        (symbol-hash . g$12022$15i0ov)
        (string-ci-hash . g$12021$15i0ov)
        (string-hash . g$12020$15i0ov)
        (equal-hash . g$12019$15i0ov)
        (hashtable-equivalence-function . g$12018$15i0ov)
        (make-hashtable . g$12017$15i0ov)
        (hashtable-hash-function . g$12016$15i0ov)
        (make-eqv-hashtable . g$6141$15i0ov)
        (make-eq-hashtable . g$6140$15i0ov)
        (hashtable? . g$12015$15i0ov)
        (hashtable-update! . g$6147$15i0ov)
        (hashtable-size . g$6142$15i0ov)
        (hashtable-set! . g$6144$15i0ov)
        (hashtable-ref . g$6143$15i0ov)
        (hashtable-mutable? . g$12014$15i0ov)
        (hashtable-keys . g$12013$15i0ov)
        (hashtable-entries . g$12012$15i0ov)
        (hashtable-delete! . g$6145$15i0ov)
        (hashtable-copy . g$12011$15i0ov)
        (hashtable-contains? . g$6146$15i0ov)
        (hashtable-clear! . g$6148$15i0ov)
        (call-with-output-file . g$7099$15i0ov)
        (call-with-input-file . g$7098$15i0ov)
        (write-char . g$12010$15i0ov)
        (write . g$12009$15i0ov)
        (with-output-to-file . g$7097$15i0ov)
        (with-input-from-file . g$7096$15i0ov)
        (read-char . g$12008$15i0ov)
        (read . g$12007$15i0ov)
        (peek-char . g$12006$15i0ov)
        (open-output-file . g$12005$15i0ov)
        (open-input-file . g$12004$15i0ov)
        (newline . g$12003$15i0ov)
        (display . g$12002$15i0ov)
        (close-output-port . g$12001$15i0ov)
        (close-input-port . g$12000$15i0ov)
        (eof-object? . g$11999$15i0ov)
        (eof-object . g$11998$15i0ov)
        (current-error-port . g$11997$15i0ov)
        (current-output-port . g$11996$15i0ov)
        (current-input-port . g$11995$15i0ov)
        (output-port? . g$11994$15i0ov)
        (input-port? . g$11993$15i0ov)
        (utf-8-codec . g$11992$15i0ov)
        (utf-16-codec . g$11991$15i0ov)
        (transcoder-error-handling-mode . g$11990$15i0ov)
        (transcoder-eol-style . g$11989$15i0ov)
        (transcoder-codec . g$11988$15i0ov)
        (transcoded-port . g$11987$15i0ov)
        (textual-port? . g$11986$15i0ov)
        (string->bytevector . g$11985$15i0ov)
        (standard-output-port . g$11984$15i0ov)
        (standard-input-port . g$11983$15i0ov)
        (standard-error-port . g$11982$15i0ov)
        (set-port-position! . g$11981$15i0ov)
        (put-u8 . g$11980$15i0ov)
        (put-string . g$11979$15i0ov)
        (put-datum . g$11978$15i0ov)
        (put-char . g$11977$15i0ov)
        (put-bytevector . g$11976$15i0ov)
        (port? . g$7075$15i0ov)
        (port-transcoder . g$11975$15i0ov)
        (port-position . g$11974$15i0ov)
        (port-has-set-port-position!? . g$11973$15i0ov)
        (port-has-port-position? . g$11972$15i0ov)
        (port-eof? . g$11971$15i0ov)
        (output-port-buffer-mode . g$11970$15i0ov)
        (open-string-output-port . g$7074$15i0ov)
        (open-string-input-port . g$11969$15i0ov)
        (open-file-output-port . g$11968$15i0ov)
        (open-file-input/output-port . g$11967$15i0ov)
        (open-file-input-port . g$11966$15i0ov)
        (open-bytevector-output-port . g$11965$15i0ov)
        (open-bytevector-input-port . g$11964$15i0ov)
        (native-transcoder . g$11963$15i0ov)
        (native-eol-style . g$11962$15i0ov)
        (make-transcoder . g$11961$15i0ov)
        (latin-1-codec . g$11960$15i0ov)
        (make-i/o-write-error . g$6931$15i0ov)
        (make-i/o-read-error . g$6917$15i0ov)
        (make-i/o-port-error . g$7036$15i0ov)
        (make-i/o-invalid-position-error . g$6946$15i0ov)
        (make-i/o-filename-error . g$6963$15i0ov)
        (make-i/o-file-protection-error . g$6979$15i0ov)
        (make-i/o-file-is-read-only-error . g$6993$15i0ov)
        (make-i/o-file-does-not-exist-error . g$7021$15i0ov)
        (make-i/o-file-already-exists-error . g$7007$15i0ov)
        (make-i/o-error . g$6903$15i0ov)
        (make-i/o-encoding-error . g$7067$15i0ov)
        (make-i/o-decoding-error . g$7052$15i0ov)
        (make-custom-textual-output-port . g$11959$15i0ov)
        (make-custom-textual-input/output-port . g$11958$15i0ov)
        (make-custom-textual-input-port . g$11957$15i0ov)
        (make-custom-binary-output-port . g$11956$15i0ov)
        (make-custom-binary-input/output-port . g$11955$15i0ov)
        (make-custom-binary-input-port . g$11954$15i0ov)
        (make-bytevector . g$11953$15i0ov)
        (lookahead-u8 . g$11952$15i0ov)
        (lookahead-char . g$11951$15i0ov)
        (i/o-write-error? . g$6932$15i0ov)
        (i/o-read-error? . g$6918$15i0ov)
        (i/o-port-error? . g$7038$15i0ov)
        (i/o-invalid-position-error? . g$6948$15i0ov)
        (i/o-error-position . g$6949$15i0ov)
        (i/o-filename-error? . g$6965$15i0ov)
        (i/o-file-protection-error? . g$6980$15i0ov)
        (i/o-file-is-read-only-error? . g$6994$15i0ov)
        (i/o-file-does-not-exist-error? . g$7022$15i0ov)
        (i/o-file-already-exists-error? . g$7008$15i0ov)
        (i/o-error? . g$6904$15i0ov)
        (i/o-error-port . g$7039$15i0ov)
        (i/o-error-filename . g$6966$15i0ov)
        (i/o-encoding-error? . g$7069$15i0ov)
        (i/o-encoding-error-char . g$7070$15i0ov)
        (i/o-decoding-error? . g$7053$15i0ov)
        (get-u8 . g$11950$15i0ov)
        (get-string-n! . g$11949$15i0ov)
        (get-string-n . g$11948$15i0ov)
        (get-string-all . g$11947$15i0ov)
        (get-line . g$11946$15i0ov)
        (get-datum . g$11945$15i0ov)
        (get-char . g$11944$15i0ov)
        (get-bytevector-some . g$11943$15i0ov)
        (get-bytevector-n! . g$11942$15i0ov)
        (get-bytevector-n . g$11941$15i0ov)
        (get-bytevector-all . g$11940$15i0ov)
        (flush-output-port . g$11939$15i0ov)
        (close-port . g$11938$15i0ov)
        (call-with-string-output-port . g$11937$15i0ov)
        (call-with-port . g$11936$15i0ov)
        (call-with-bytevector-output-port . g$11935$15i0ov)
        (bytevector->string . g$11934$15i0ov)
        (buffer-mode? . g$11933$15i0ov)
        (binary-port? . g$11932$15i0ov)
        (scheme-report-environment . g$8534$15i0ov)
        (quotient . g$6667$15i0ov)
        (null-environment . g$8533$15i0ov)
        (remainder . g$6668$15i0ov)
        (modulo . g$6669$15i0ov)
        (inexact->exact . g$11931$15i0ov)
        (force . g$6671$15i0ov)
        (exact->inexact . g$11930$15i0ov)
        (exit . g$11929$15i0ov)
        (command-line . g$11490$15i0ov)
        (string-fill! . g$11928$15i0ov)
        (string-set! . g$11927$15i0ov)
        (set-cdr! . g$11926$15i0ov)
        (set-car! . g$11925$15i0ov)
        (remove . g$6254$15i0ov)
        (remv . g$6255$15i0ov)
        (remp . g$6240$15i0ov)
        (remq . g$6256$15i0ov)
        (partition . g$6239$15i0ov)
        (memv . g$11924$15i0ov)
        (memq . g$11923$15i0ov)
        (memp . g$6246$15i0ov)
        (member . g$6245$15i0ov)
        (exists . g$6250$15i0ov)
        (for-all . g$6249$15i0ov)
        (fold-right . g$6253$15i0ov)
        (fold-left . g$6252$15i0ov)
        (find . g$6238$15i0ov)
        (filter . g$6241$15i0ov)
        (cons* . g$6251$15i0ov)
        (assv . g$6242$15i0ov)
        (assq . g$11922$15i0ov)
        (assp . g$6244$15i0ov)
        (assoc . g$6243$15i0ov)
        (with-exception-handler . g$11921$15i0ov)
        (raise-continuable . g$11920$15i0ov)
        (raise . g$11919$15i0ov)
        (eval . g$8536$15i0ov)
        (environment . g$8532$15i0ov)
        (make-enumeration . g$7156$15i0ov)
        (enum-set=? . g$7163$15i0ov)
        (enum-set-universe . g$7157$15i0ov)
        (enum-set-union . g$7164$15i0ov)
        (enum-set-subset? . g$7162$15i0ov)
        (enum-set-projection . g$7168$15i0ov)
        (enum-set-member? . g$7161$15i0ov)
        (enum-set-intersection . g$7165$15i0ov)
        (enum-set-indexer . g$7158$15i0ov)
        (enum-set-difference . g$7166$15i0ov)
        (enum-set-constructor . g$7159$15i0ov)
        (enum-set-complement . g$7167$15i0ov)
        (enum-set->list . g$7160$15i0ov)
        (who-condition? . g$6578$15i0ov)
        (warning? . g$6489$15i0ov)
        (violation? . g$6531$15i0ov)
        (undefined-violation? . g$6655$15i0ov)
        (syntax-violation? . g$6639$15i0ov)
        (syntax-violation-subform . g$6641$15i0ov)
        (syntax-violation-form . g$6640$15i0ov)
        (syntax-violation . g$8553$15i0ov)
        (simple-conditions . g$11918$15i0ov)
        (serious-condition? . g$6503$15i0ov)
        (non-continuable-violation? . g$6593$15i0ov)
        (message-condition? . g$6474$15i0ov)
        (make-who-condition . g$6576$15i0ov)
        (make-warning . g$6488$15i0ov)
        (make-violation . g$6530$15i0ov)
        (make-undefined-violation . g$6654$15i0ov)
        (make-syntax-violation . g$6636$15i0ov)
        (make-serious-condition . g$6502$15i0ov)
        (make-non-continuable-violation . g$6592$15i0ov)
        (make-message-condition . g$6472$15i0ov)
        (make-lexical-violation . g$6620$15i0ov)
        (make-irritants-condition . g$6559$15i0ov)
        (make-implementation-restriction-violation . g$6606$15i0ov)
        (make-error . g$6516$15i0ov)
        (make-assertion-violation . g$6544$15i0ov)
        (lexical-violation? . g$6621$15i0ov)
        (irritants-condition? . g$6561$15i0ov)
        (implementation-restriction-violation? . g$6607$15i0ov)
        (error? . g$6517$15i0ov)
        (condition-who . g$6579$15i0ov)
        (condition-predicate . g$11917$15i0ov)
        (condition-message . g$6475$15i0ov)
        (condition-irritants . g$6562$15i0ov)
        (condition-accessor . g$11916$15i0ov)
        (condition . g$11915$15i0ov)
        (assertion-violation? . g$6545$15i0ov)
        (condition? . g$11914$15i0ov)
        (utf32->string . g$11913$15i0ov)
        (utf16->string . g$11912$15i0ov)
        (utf8->string . g$11911$15i0ov)
        (uint-list->bytevector . g$11910$15i0ov)
        (u8-list->bytevector . g$11909$15i0ov)
        (string->utf8 . g$11908$15i0ov)
        (string->utf32 . g$11907$15i0ov)
        (string->utf16 . g$11906$15i0ov)
        (sint-list->bytevector . g$11905$15i0ov)
        (native-endianness . g$6330$15i0ov)
        (bytevector? . g$11904$15i0ov)
        (bytevector=? . g$11903$15i0ov)
        (bytevector-uint-set! . g$11902$15i0ov)
        (bytevector-uint-ref . g$11901$15i0ov)
        (bytevector-u8-set! . g$11900$15i0ov)
        (bytevector-u8-ref . g$11899$15i0ov)
        (bytevector-u64-set! . g$6351$15i0ov)
        (bytevector-u64-ref . g$6347$15i0ov)
        (bytevector-u64-native-set! . g$6353$15i0ov)
        (bytevector-u64-native-ref . g$6349$15i0ov)
        (bytevector-u32-set! . g$6343$15i0ov)
        (bytevector-u32-ref . g$6339$15i0ov)
        (bytevector-u32-native-set! . g$6345$15i0ov)
        (bytevector-u32-native-ref . g$6341$15i0ov)
        (bytevector-u16-set! . g$6335$15i0ov)
        (bytevector-u16-ref . g$6331$15i0ov)
        (bytevector-u16-native-set! . g$6337$15i0ov)
        (bytevector-u16-native-ref . g$6333$15i0ov)
        (bytevector-sint-set! . g$11898$15i0ov)
        (bytevector-sint-ref . g$11897$15i0ov)
        (bytevector-s8-set! . g$11896$15i0ov)
        (bytevector-s8-ref . g$11895$15i0ov)
        (bytevector-s64-set! . g$6352$15i0ov)
        (bytevector-s64-ref . g$6348$15i0ov)
        (bytevector-s64-native-set! . g$6354$15i0ov)
        (bytevector-s64-native-ref . g$6350$15i0ov)
        (bytevector-s32-set! . g$6344$15i0ov)
        (bytevector-s32-ref . g$6340$15i0ov)
        (bytevector-s32-native-set! . g$6346$15i0ov)
        (bytevector-s32-native-ref . g$6342$15i0ov)
        (bytevector-s16-set! . g$6336$15i0ov)
        (bytevector-s16-ref . g$6332$15i0ov)
        (bytevector-s16-native-set! . g$6338$15i0ov)
        (bytevector-s16-native-ref . g$6334$15i0ov)
        (bytevector-length . g$11894$15i0ov)
        (bytevector-ieee-single-set! . g$11893$15i0ov)
        (bytevector-ieee-single-ref . g$11892$15i0ov)
        (bytevector-ieee-single-native-set! . g$6357$15i0ov)
        (bytevector-ieee-single-native-ref . g$6355$15i0ov)
        (bytevector-ieee-double-set! . g$11891$15i0ov)
        (bytevector-ieee-double-ref . g$11890$15i0ov)
        (bytevector-ieee-double-native-set! . g$6358$15i0ov)
        (bytevector-ieee-double-native-ref . g$6356$15i0ov)
        (bytevector-fill! . g$11889$15i0ov)
        (bytevector-copy! . g$11888$15i0ov)
        (bytevector-copy . g$11887$15i0ov)
        (bytevector->uint-list . g$11886$15i0ov)
        (bytevector->u8-list . g$11885$15i0ov)
        (bytevector->sint-list . g$11884$15i0ov)
        (no-nans-violation? . g$6889$15i0ov)
        (no-infinities-violation? . g$6875$15i0ov)
        (make-no-nans-violation . g$6888$15i0ov)
        (make-no-infinities-violation . g$6874$15i0ov)
        (real->flonum . g$11883$15i0ov)
        (flzero? . g$11882$15i0ov)
        (fltruncate . g$11881$15i0ov)
        (fltan . g$11880$15i0ov)
        (flsqrt . g$11879$15i0ov)
        (flsin . g$11878$15i0ov)
        (flround . g$11877$15i0ov)
        (flpositive? . g$11876$15i0ov)
        (flonum? . g$11875$15i0ov)
        (flodd? . g$11874$15i0ov)
        (flnumerator . g$11873$15i0ov)
        (flnegative? . g$11872$15i0ov)
        (flnan? . g$11871$15i0ov)
        (flmod0 . g$11870$15i0ov)
        (flmod . g$11869$15i0ov)
        (flmin . g$11868$15i0ov)
        (flmax . g$11867$15i0ov)
        (fllog . g$11866$15i0ov)
        (flinteger? . g$11865$15i0ov)
        (flinfinite? . g$11864$15i0ov)
        (flfloor . g$11863$15i0ov)
        (flfinite? . g$11862$15i0ov)
        (flexpt . g$11861$15i0ov)
        (flexp . g$11860$15i0ov)
        (fleven? . g$11859$15i0ov)
        (fldiv0-and-mod0 . g$11858$15i0ov)
        (fldiv0 . g$11857$15i0ov)
        (fldiv-and-mod . g$11856$15i0ov)
        (fldiv . g$11855$15i0ov)
        (fldenominator . g$11854$15i0ov)
        (flcos . g$11853$15i0ov)
        (flceiling . g$11852$15i0ov)
        (flatan . g$11851$15i0ov)
        (flasin . g$11850$15i0ov)
        (flacos . g$11849$15i0ov)
        (flabs . g$11848$15i0ov)
        (fl>? . g$11847$15i0ov)
        (fl>=? . g$11846$15i0ov)
        (fl=? . g$11845$15i0ov)
        (fl<? . g$11844$15i0ov)
        (fl<=? . g$11843$15i0ov)
        (fl/ . g$11842$15i0ov)
        (fl- . g$11841$15i0ov)
        (fl+ . g$11840$15i0ov)
        (fl* . g$11839$15i0ov)
        (fixnum->flonum . g$11838$15i0ov)
        (fxzero? . g$11837$15i0ov)
        (fxxor . g$11836$15i0ov)
        (fxrotate-bit-field . g$6820$15i0ov)
        (fxreverse-bit-field . g$11835$15i0ov)
        (fxpositive? . g$11834$15i0ov)
        (fxodd? . g$11833$15i0ov)
        (fxnot . g$11832$15i0ov)
        (fxnegative? . g$11831$15i0ov)
        (fxmod0 . g$11830$15i0ov)
        (fxmod . g$11829$15i0ov)
        (fxmin . g$11828$15i0ov)
        (fxmax . g$11827$15i0ov)
        (fxlength . g$11826$15i0ov)
        (fxior . g$11825$15i0ov)
        (fxif . g$6814$15i0ov)
        (fxfirst-bit-set . g$11824$15i0ov)
        (fxeven? . g$11823$15i0ov)
        (fxdiv0-and-mod0 . g$11822$15i0ov)
        (fxdiv0 . g$11821$15i0ov)
        (fxdiv-and-mod . g$11820$15i0ov)
        (fxdiv . g$11819$15i0ov)
        (fxcopy-bit-field . g$6817$15i0ov)
        (fxcopy-bit . g$6815$15i0ov)
        (fxbit-set? . g$11818$15i0ov)
        (fxbit-field . g$6816$15i0ov)
        (fxbit-count . g$11817$15i0ov)
        (fxarithmetic-shift-right . g$6819$15i0ov)
        (fxarithmetic-shift-left . g$6818$15i0ov)
        (fxarithmetic-shift . g$11816$15i0ov)
        (fxand . g$11815$15i0ov)
        (fx>? . g$11814$15i0ov)
        (fx>=? . g$11813$15i0ov)
        (fx=? . g$11812$15i0ov)
        (fx<? . g$11811$15i0ov)
        (fx<=? . g$11810$15i0ov)
        (fx-/carry . g$11809$15i0ov)
        (fx- . g$11808$15i0ov)
        (fx+/carry . g$11807$15i0ov)
        (fx+ . g$11806$15i0ov)
        (fx*/carry . g$11805$15i0ov)
        (fx* . g$11804$15i0ov)
        (greatest-fixnum . g$11803$15i0ov)
        (least-fixnum . g$11802$15i0ov)
        (fixnum-width . g$11801$15i0ov)
        (fixnum? . g$11800$15i0ov)
        (bitwise-rotate-bit-field . g$6772$15i0ov)
        (bitwise-reverse-bit-field . g$11799$15i0ov)
        (bitwise-length . g$11798$15i0ov)
        (bitwise-if . g$6766$15i0ov)
        (bitwise-first-bit-set . g$11797$15i0ov)
        (bitwise-copy-bit-field . g$6769$15i0ov)
        (bitwise-copy-bit . g$6767$15i0ov)
        (bitwise-bit-set? . g$11796$15i0ov)
        (bitwise-bit-field . g$11795$15i0ov)
        (bitwise-bit-count . g$11794$15i0ov)
        (bitwise-xor . g$11793$15i0ov)
        (bitwise-ior . g$11792$15i0ov)
        (bitwise-and . g$11791$15i0ov)
        (bitwise-not . g$11790$15i0ov)
        (bitwise-arithmetic-shift-right . g$6771$15i0ov)
        (bitwise-arithmetic-shift-left . g$6770$15i0ov)
        (bitwise-arithmetic-shift . g$11789$15i0ov)
        (zero? . g$11788$15i0ov)
        (vector? . g$11787$15i0ov)
        (vector-set! . g$11786$15i0ov)
        (vector-ref . g$11785$15i0ov)
        (vector-map . g$11784$15i0ov)
        (vector-length . g$11783$15i0ov)
        (vector-for-each . g$11782$15i0ov)
        (vector-fill! . g$11781$15i0ov)
        (vector->list . g$11780$15i0ov)
        (vector . g$11779$15i0ov)
        (values . g$11778$15i0ov)
        (truncate . g$11777$15i0ov)
        (tan . g$11776$15i0ov)
        (symbol? . g$11775$15i0ov)
        (symbol=? . g$11774$15i0ov)
        (symbol->string . g$11773$15i0ov)
        (substring . g$11772$15i0ov)
        (string? . g$11771$15i0ov)
        (string>? . g$11770$15i0ov)
        (string>=? . g$11769$15i0ov)
        (string=? . g$11768$15i0ov)
        (string<? . g$11767$15i0ov)
        (string<=? . g$11766$15i0ov)
        (string-ref . g$11765$15i0ov)
        (string-length . g$11764$15i0ov)
        (string-for-each . g$11763$15i0ov)
        (string-copy . g$11762$15i0ov)
        (string-append . g$11761$15i0ov)
        (string->symbol . g$11760$15i0ov)
        (string->number . g$11759$15i0ov)
        (string->list . g$11758$15i0ov)
        (string . g$11757$15i0ov)
        (sqrt . g$11756$15i0ov)
        (sin . g$11755$15i0ov)
        (round . g$11754$15i0ov)
        (reverse . g$11753$15i0ov)
        (real? . g$11752$15i0ov)
        (real-valued? . g$11751$15i0ov)
        (real-part . g$11750$15i0ov)
        (rationalize . g$5790$15i0ov)
        (rational? . g$11749$15i0ov)
        (rational-valued? . g$11748$15i0ov)
        (procedure? . g$11747$15i0ov)
        (positive? . g$11746$15i0ov)
        (pair? . g$11745$15i0ov)
        (odd? . g$11744$15i0ov)
        (numerator . g$11743$15i0ov)
        (number? . g$11742$15i0ov)
        (number->string . g$11741$15i0ov)
        (null? . g$11740$15i0ov)
        (not . g$11739$15i0ov)
        (negative? . g$11738$15i0ov)
        (nan? . g$11737$15i0ov)
        (min . g$11736$15i0ov)
        (max . g$11735$15i0ov)
        (map . g$11734$15i0ov)
        (make-vector . g$11733$15i0ov)
        (make-string . g$11732$15i0ov)
        (make-rectangular . g$11731$15i0ov)
        (make-polar . g$11730$15i0ov)
        (magnitude . g$11729$15i0ov)
        (log . g$11728$15i0ov)
        (list? . g$11727$15i0ov)
        (list-tail . g$11726$15i0ov)
        (list-ref . g$11725$15i0ov)
        (list->vector . g$11724$15i0ov)
        (list->string . g$11723$15i0ov)
        (list . g$11722$15i0ov)
        (length . g$11721$15i0ov)
        (lcm . g$11720$15i0ov)
        (integer? . g$11719$15i0ov)
        (integer-valued? . g$11718$15i0ov)
        (integer->char . g$11717$15i0ov)
        (infinite? . g$11716$15i0ov)
        (inexact? . g$11715$15i0ov)
        (inexact . g$11714$15i0ov)
        (imag-part . g$11713$15i0ov)
        (gcd . g$11712$15i0ov)
        (for-each . g$11711$15i0ov)
        (floor . g$11710$15i0ov)
        (finite? . g$11709$15i0ov)
        (expt . g$11708$15i0ov)
        (exp . g$11707$15i0ov)
        (exact? . g$11706$15i0ov)
        (exact-integer-sqrt . g$11705$15i0ov)
        (exact . g$11704$15i0ov)
        (even? . g$11703$15i0ov)
        (error . g$11702$15i0ov)
        (eqv? . g$11701$15i0ov)
        (equal? . g$11700$15i0ov)
        (eq? . g$11699$15i0ov)
        (dynamic-wind . g$11698$15i0ov)
        (div0-and-mod0 . g$11697$15i0ov)
        (mod0 . g$11696$15i0ov)
        (div0 . g$11695$15i0ov)
        (div-and-mod . g$11694$15i0ov)
        (mod . g$11693$15i0ov)
        (div . g$11692$15i0ov)
        (denominator . g$11691$15i0ov)
        (cos . g$11690$15i0ov)
        (cons . g$11689$15i0ov)
        (complex? . g$11688$15i0ov)
        (char? . g$11687$15i0ov)
        (char>? . g$11686$15i0ov)
        (char>=? . g$11685$15i0ov)
        (char=? . g$11684$15i0ov)
        (char<? . g$11683$15i0ov)
        (char<=? . g$11682$15i0ov)
        (char->integer . g$11681$15i0ov)
        (ceiling . g$11680$15i0ov)
        (call-with-values . g$11679$15i0ov)
        (call/cc . g$11678$15i0ov)
        (call-with-current-continuation . g$11677$15i0ov)
        (cddddr . g$5789$15i0ov)
        (cdddar . g$5788$15i0ov)
        (cddadr . g$5787$15i0ov)
        (cddaar . g$5786$15i0ov)
        (cdaddr . g$5785$15i0ov)
        (cdadar . g$5784$15i0ov)
        (cdaadr . g$5783$15i0ov)
        (cdaaar . g$5782$15i0ov)
        (cadddr . g$5781$15i0ov)
        (caddar . g$5780$15i0ov)
        (cadadr . g$5779$15i0ov)
        (cadaar . g$5778$15i0ov)
        (caaddr . g$5777$15i0ov)
        (caadar . g$5776$15i0ov)
        (caaadr . g$5775$15i0ov)
        (caaaar . g$5774$15i0ov)
        (cdddr . g$5773$15i0ov)
        (cddar . g$5772$15i0ov)
        (cdadr . g$5771$15i0ov)
        (cdaar . g$5770$15i0ov)
        (caddr . g$5769$15i0ov)
        (cadar . g$5768$15i0ov)
        (caadr . g$5767$15i0ov)
        (caaar . g$5766$15i0ov)
        (cddr . g$5765$15i0ov)
        (cdar . g$5764$15i0ov)
        (cadr . g$5763$15i0ov)
        (caar . g$5762$15i0ov)
        (cdr . g$11676$15i0ov)
        (car . g$11675$15i0ov)
        (boolean? . g$11674$15i0ov)
        (boolean=? . g$11673$15i0ov)
        (atan . g$11672$15i0ov)
        (assertion-violation . g$11671$15i0ov)
        (asin . g$11670$15i0ov)
        (apply . g$11669$15i0ov)
        (append . g$11668$15i0ov)
        (angle . g$11667$15i0ov)
        (acos . g$11666$15i0ov)
        (abs . g$11665$15i0ov)
        (/ . g$11664$15i0ov)
        (* . g$11663$15i0ov)
        (- . g$11662$15i0ov)
        (+ . g$11661$15i0ov)
        (>= . g$11660$15i0ov)
        (> . g$11659$15i0ov)
        (= . g$11658$15i0ov)
        (<= . g$11657$15i0ov)
        (< . g$11656$15i0ov)
        (make-record-printer . g$11655$15i0ov)
        (eqv-hash . g$11654$15i0ov)
        (eq-hash . g$11653$15i0ov)
        (reverse! . g$11652$15i0ov)
        (make-promise . g$6670$15i0ov)
        (load/args . g$11492$15i0ov)
        (printf . g$7240$15i0ov)
        (fprintf . g$7241$15i0ov)
        (format . g$7242$15i0ov)
        (get-arity . g$11651$15i0ov)
        (gc-collect . g$11650$15i0ov)
        (clr-type? . g$11649$15i0ov)
        (get-clr-type . g$11648$15i0ov)
        (get-command-line . g$11647$15i0ov)
        (vector-append . g$11646$15i0ov)
        (vector-filter . g$11645$15i0ov)
        (vector-reverse! . g$11644$15i0ov)
        (vector-contains? . g$11643$15i0ov)
        (vector-index-of . g$11642$15i0ov)
        (vector-copy . g$11641$15i0ov)
        (vector-binary-search . g$11640$15i0ov)
        (get-output-string . g$11639$15i0ov)
        (open-output-string . g$11638$15i0ov)
        (open-input-string . g$11637$15i0ov)
        (string-format . g$11636$15i0ov)
        (trace-printer . g$11489$15i0ov)
        (make-traced-procedure . g$11635$15i0ov)
        (make-traced-macro . g$7262$15i0ov)
        (assertion-error . g$8549$15i0ov)
        (pmap . g$11634$15i0ov)
        (time-it . g$11633$15i0ov)
        (make-parameter . g$7267$15i0ov)
        (library-locator . g$11632$15i0ov)
        (get-library-paths . g$11631$15i0ov)
        (environment-symbols . g$8530$15i0ov)
        (interaction-environment-symbols . g$8529$15i0ov)
        (library-path . g$7698$15i0ov)
        (library-extensions . g$7699$15i0ov)
        (installed-libraries . g$7719$15i0ov)
        (expand . g$8535$15i0ov)
        (&no-nans . g$11630$15i0ov)
        (&no-infinities . g$11629$15i0ov)
        (&i/o-encoding . g$11628$15i0ov)
        (&i/o-decoding . g$11627$15i0ov)
        (&i/o-port . g$11626$15i0ov)
        (&i/o-file-does-not-exist . g$11625$15i0ov)
        (&i/o-file-already-exists . g$11624$15i0ov)
        (&i/o-file-is-read-only . g$11623$15i0ov)
        (&i/o-file-protection . g$11622$15i0ov)
        (&i/o-filename . g$11621$15i0ov)
        (&i/o-invalid-position . g$11620$15i0ov)
        (&i/o-write . g$11619$15i0ov)
        (&i/o-read . g$11618$15i0ov)
        (&i/o . g$11617$15i0ov)
        (&non-continuable . g$11616$15i0ov)
        (&undefined . g$11615$15i0ov)
        (&syntax . g$11614$15i0ov)
        (&lexical . g$11613$15i0ov)
        (&implementation-restriction . g$11612$15i0ov)
        (&non . g$11611$15i0ov)
        (&who . g$11610$15i0ov)
        (&irritants . g$11609$15i0ov)
        (&assertion . g$11608$15i0ov)
        (&violation . g$11607$15i0ov)
        (&error . g$11606$15i0ov)
        (&serious . g$11605$15i0ov)
        (&warning . g$11604$15i0ov)
        (&message . g$11603$15i0ov)
        (&condition . g$11602$15i0ov)
        (define-condition-type . g$11601$15i0ov)
        (define-enumeration . g$11600$15i0ov)
        (define-record-type . g$11599$15i0ov)
        (parent-rtd . g$11598$15i0ov)
        (nongenerative . g$11597$15i0ov)
        (opaque . g$11596$15i0ov)
        (sealed . g$11595$15i0ov)
        (protocol . g$11594$15i0ov)
        (parent . g$11593$15i0ov)
        (immutable . g$11592$15i0ov)
        (mutable . g$11591$15i0ov)
        (fields . g$11590$15i0ov)
        (error-handling-mode . g$11589$15i0ov)
        (file-options . g$11588$15i0ov)
        (buffer-mode . g$11587$15i0ov)
        (eol-style . g$11586$15i0ov)
        (guard . g$11585$15i0ov)
        (trace-letrec-syntax . g$11584$15i0ov)
        (trace-let-syntax . g$11583$15i0ov)
        (trace-define-syntax . g$11582$15i0ov)
        (trace-define . g$11581$15i0ov)
        (trace-lambda . g$11580$15i0ov)
        (unsyntax-splicing . g$11579$15i0ov)
        (unsyntax . g$11578$15i0ov)
        (unquote-splicing . g$11577$15i0ov)
        (unquote . g$11576$15i0ov)
        (_ . g$11575$15i0ov)
        (else . g$11574$15i0ov)
        (=> . g$11573$15i0ov)
        (... . g$11572$15i0ov)
        (assert . g$11571$15i0ov)
        (endianness . g$11570$15i0ov)
        (delay . g$11569$15i0ov)
        (time . g$11568$15i0ov)
        (or . g$11567$15i0ov)
        (and . g$11566$15i0ov)
        (do . g$11565$15i0ov)
        (cond . g$11564$15i0ov)
        (let* . g$11563$15i0ov)
        (let . g$11562$15i0ov)
        (identifier-syntax . g$11561$15i0ov)
        (with-syntax . g$11560$15i0ov)
        (quasisyntax . g$11559$15i0ov)
        (quasiquote . g$11558$15i0ov)
        (syntax-rules . g$11557$15i0ov)
        (include-into . g$11556$15i0ov)
        (include . g$11555$15i0ov)
        (define-struct . g$11554$15i0ov)
        (let-values . g$11553$15i0ov)
        (let*-values . g$11552$15i0ov)
        (record-constructor-descriptor . g$11551$15i0ov)
        (record-type-descriptor . g$11550$15i0ov)
        (fluid-let-syntax . g$11549$15i0ov)
        (case . g$11548$15i0ov)
        (parameterize . g$11547$15i0ov)
        (unless . g$11546$15i0ov)
        (when . g$11545$15i0ov)
        (if . g$11544$15i0ov)
        (letrec* . g$11543$15i0ov)
        (letrec . g$11542$15i0ov)
        (type-descriptor . g$11541$15i0ov)
        (case-lambda . g$11540$15i0ov)
        (lambda . g$11539$15i0ov)
        (syntax . g$11538$15i0ov)
        (syntax-case . g$11537$15i0ov)
        (quote . g$11536$15i0ov)
        (foreign-call . g$11535$15i0ov)
        (letrec-syntax . g$11534$15i0ov)
        (let-syntax . g$11533$15i0ov)
        (set! . g$11532$15i0ov)
        (import . g$11531$15i0ov)
        (library . g$11530$15i0ov)
        (begin . g$11529$15i0ov)
        (module . g$11528$15i0ov)
        (define-syntax . g$11527$15i0ov)
        (define . g$11526$15i0ov))
      '((g$8428$15i0ov core-prim . ellipsis-map)
        (g$12164$15i0ov core-prim . &no-nans-rcd)
        (g$12163$15i0ov core-prim . &no-nans-rtd)
        (g$12162$15i0ov core-prim . &no-infinities-rcd)
        (g$12161$15i0ov core-prim . &no-infinities-rtd)
        (g$12160$15i0ov core-prim . &i/o-encoding-rcd)
        (g$12159$15i0ov core-prim . &i/o-encoding-rtd)
        (g$12158$15i0ov core-prim . &i/o-decoding-rcd)
        (g$12157$15i0ov core-prim . &i/o-decoding-rtd)
        (g$12156$15i0ov core-prim . &i/o-port-rcd)
        (g$12155$15i0ov core-prim . &i/o-port-rtd)
        (g$12154$15i0ov core-prim . &i/o-file-does-not-exist-rcd)
        (g$12153$15i0ov core-prim . &i/o-file-does-not-exist-rtd)
        (g$12152$15i0ov core-prim . &i/o-file-already-exists-rcd)
        (g$12151$15i0ov core-prim . &i/o-file-already-exists-rtd)
        (g$12150$15i0ov core-prim . &i/o-file-is-read-only-rcd)
        (g$12149$15i0ov core-prim . &i/o-file-is-read-only-rtd)
        (g$12148$15i0ov core-prim . &i/o-file-protection-rcd)
        (g$12147$15i0ov core-prim . &i/o-file-protection-rtd)
        (g$12146$15i0ov core-prim . &i/o-filename-rcd)
        (g$12145$15i0ov core-prim . &i/o-filename-rtd)
        (g$12144$15i0ov core-prim . &i/o-invalid-position-rcd)
        (g$12143$15i0ov core-prim . &i/o-invalid-position-rtd)
        (g$12142$15i0ov core-prim . &i/o-write-rcd)
        (g$12141$15i0ov core-prim . &i/o-write-rtd)
        (g$12140$15i0ov core-prim . &i/o-read-rcd)
        (g$12139$15i0ov core-prim . &i/o-read-rtd)
        (g$12138$15i0ov core-prim . &i/o-rcd)
        (g$12137$15i0ov core-prim . &i/o-rtd)
        (g$12136$15i0ov core-prim . &undefined-rcd)
        (g$12135$15i0ov core-prim . &undefined-rtd)
        (g$12134$15i0ov core-prim . &syntax-rcd)
        (g$12133$15i0ov core-prim . &syntax-rtd)
        (g$12132$15i0ov core-prim . &lexical-rcd)
        (g$12131$15i0ov core-prim . &lexical-rtd)
        (g$12130$15i0ov core-prim . &implementation-restriction-rcd)
        (g$12129$15i0ov core-prim . &implementation-restriction-rtd)
        (g$12128$15i0ov core-prim . &non-continuable-rcd)
        (g$12127$15i0ov core-prim . &non-continuable-rtd)
        (g$12126$15i0ov core-prim . &who-rcd)
        (g$12125$15i0ov core-prim . &who-rtd)
        (g$12124$15i0ov core-prim . &irritants-rcd)
        (g$12123$15i0ov core-prim . &irritants-rtd)
        (g$12122$15i0ov core-prim . &assertion-rcd)
        (g$12121$15i0ov core-prim . &assertion-rtd)
        (g$12120$15i0ov core-prim . &violation-rcd)
        (g$12119$15i0ov core-prim . &violation-rtd)
        (g$12118$15i0ov core-prim . &error-rcd)
        (g$12117$15i0ov core-prim . &error-rtd)
        (g$12116$15i0ov core-prim . &serious-rcd)
        (g$12115$15i0ov core-prim . &serious-rtd)
        (g$12114$15i0ov core-prim . &warning-rcd)
        (g$12113$15i0ov core-prim . &warning-rtd)
        (g$12112$15i0ov core-prim . &message-rcd)
        (g$12111$15i0ov core-prim . &message-rtd)
        (g$12110$15i0ov core-prim . &condition-rcd)
        (g$12109$15i0ov core-prim . &condition-rtd)
        (g$12108$15i0ov core-prim . library-letrec*)
        (g$12107$15i0ov core-prim . annotation-stripped)
        (g$12106$15i0ov core-prim . annotation-source)
        (g$12105$15i0ov core-prim . annotation-expression)
        (g$12104$15i0ov core-prim . annotation?)
        (g$12103$15i0ov core-prim . read-annotated)
        (g$12102$15i0ov core-prim . tanh)
        (g$12101$15i0ov core-prim . cosh)
        (g$12100$15i0ov core-prim . sinh)
        (g$12099$15i0ov core-prim . make-guid)
        (g$12098$15i0ov core-prim . unspecified?)
        (g$12097$15i0ov core-prim . make-trace)
        (g$12096$15i0ov core-prim . make-list)
        (g$12095$15i0ov core-prim . last-pair)
        (g$12094$15i0ov core-prim . load-r5rs)
        (g$12093$15i0ov core-prim . license)
        (g$12092$15i0ov core-prim . stacktrace)
        (g$11494$15i0ov core-prim . ironscheme-build)
        (g$12091$15i0ov core-prim . define-clr-class-internal)
        (g$12090$15i0ov core-prim . clr-field-set!-internal)
        (g$12089$15i0ov core-prim . clr-field-get-internal)
        (g$12088$15i0ov core-prim . clr-cast-internal)
        (g$12087$15i0ov core-prim . clr-call-internal)
        (g$12086$15i0ov core-prim . clr-new-internal)
        (g$12085$15i0ov core-prim . clr-new-array-internal)
        (g$12084$15i0ov core-prim . clr-is-internal)
        (g$12083$15i0ov core-prim . clr-reference-internal)
        (g$12082$15i0ov core-prim . clr-using-internal)
        (g$12081$15i0ov core-prim . clr-clear-usings-internal)
        (g$8550$15i0ov core-prim . syntax-error)
        (g$8423$15i0ov core-prim . syntax-dispatch)
        (g$12080$15i0ov core-prim . compile-core)
        (g$12079$15i0ov core-prim . eval-core)
        (g$12078$15i0ov core-prim . set-symbol-value!)
        (g$12077$15i0ov core-prim . symbol-value)
        (g$12076$15i0ov core-prim . ungensym)
        (g$12075$15i0ov core-prim . gensym)
        (g$12074$15i0ov core-prim . void)
        (g$12073$15i0ov core-prim . load-serialized-library)
        (g$12072$15i0ov core-prim . serialize-library)
        (g$11496$15i0ov core-prim . compile-system-libraries)
        (g$11498$15i0ov core-prim . compile->closure)
        (g$11497$15i0ov core-prim . compile)
        (g$11493$15i0ov core-prim . load)
        (g$8559$15i0ov core-prim . interaction-environment)
        (g$12071$15i0ov core-prim . char-ready?)
        (g$12070$15i0ov core-prim . string-upcase)
        (g$12069$15i0ov core-prim . string-titlecase)
        (g$12068$15i0ov core-prim . string-normalize-nfkd)
        (g$12067$15i0ov core-prim . string-normalize-nfkc)
        (g$12066$15i0ov core-prim . string-normalize-nfd)
        (g$12065$15i0ov core-prim . string-normalize-nfc)
        (g$12064$15i0ov core-prim . string-foldcase)
        (g$12063$15i0ov core-prim . string-downcase)
        (g$12062$15i0ov core-prim . string-ci>?)
        (g$12061$15i0ov core-prim . string-ci>=?)
        (g$12060$15i0ov core-prim . string-ci=?)
        (g$12059$15i0ov core-prim . string-ci<?)
        (g$12058$15i0ov core-prim . string-ci<=?)
        (g$12057$15i0ov core-prim . char-whitespace?)
        (g$12056$15i0ov core-prim . char-upper-case?)
        (g$12055$15i0ov core-prim . char-title-case?)
        (g$12054$15i0ov core-prim . char-numeric?)
        (g$12053$15i0ov core-prim . char-lower-case?)
        (g$12052$15i0ov core-prim . char-general-category)
        (g$12051$15i0ov core-prim . char-upcase)
        (g$12050$15i0ov core-prim . char-titlecase)
        (g$12049$15i0ov core-prim . char-foldcase)
        (g$12048$15i0ov core-prim . char-downcase)
        (g$12047$15i0ov core-prim . char-ci>?)
        (g$12046$15i0ov core-prim . char-ci>=?)
        (g$12045$15i0ov core-prim . char-ci=?)
        (g$12044$15i0ov core-prim . char-ci<?)
        (g$12043$15i0ov core-prim . char-ci<=?)
        (g$12042$15i0ov core-prim . char-alphabetic?)
        (g$8160$15i0ov core-prim . variable-transformer-procedure)
        (g$8159$15i0ov core-prim . variable-transformer?)
        (g$8158$15i0ov core-prim . make-variable-transformer)
        (g$8554$15i0ov core-prim . identifier?)
        (g$8543$15i0ov core-prim . generate-temporaries)
        (g$8544$15i0ov core-prim . free-identifier=?)
        (g$8556$15i0ov core-prim . syntax->datum)
        (g$8555$15i0ov core-prim . datum->syntax)
        (g$8545$15i0ov core-prim . bound-identifier=?)
        (g$12041$15i0ov core-prim . record-type-descriptor?)
        (g$12040$15i0ov core-prim . record-predicate)
        (g$12039$15i0ov core-prim . record-mutator)
        (g$12038$15i0ov core-prim . record-constructor)
        (g$12037$15i0ov core-prim . record-accessor)
        (g$12036$15i0ov core-prim . make-record-type-descriptor)
        (g$12035$15i0ov core-prim . make-record-constructor-descriptor)
        (g$12034$15i0ov core-prim . record?)
        (g$12033$15i0ov core-prim . record-type-uid)
        (g$12032$15i0ov core-prim . record-type-sealed?)
        (g$12031$15i0ov core-prim . record-type-parent)
        (g$12030$15i0ov core-prim . record-type-opaque?)
        (g$12029$15i0ov core-prim . record-type-name)
        (g$12028$15i0ov core-prim . record-type-generative?)
        (g$12027$15i0ov core-prim . record-type-field-names)
        (g$12026$15i0ov core-prim . record-rtd)
        (g$12025$15i0ov core-prim . record-field-mutable?)
        (g$6174$15i0ov core-prim . delete-file)
        (g$6173$15i0ov core-prim . file-exists?)
        (g$12024$15i0ov core-prim . vector-sort!)
        (g$12023$15i0ov core-prim . vector-sort)
        (g$6687$15i0ov core-prim . list-sort)
        (g$12022$15i0ov core-prim . symbol-hash)
        (g$12021$15i0ov core-prim . string-ci-hash)
        (g$12020$15i0ov core-prim . string-hash)
        (g$12019$15i0ov core-prim . equal-hash)
        (g$12018$15i0ov core-prim . hashtable-equivalence-function)
        (g$12017$15i0ov core-prim . make-hashtable)
        (g$12016$15i0ov core-prim . hashtable-hash-function)
        (g$6141$15i0ov core-prim . make-eqv-hashtable)
        (g$6140$15i0ov core-prim . make-eq-hashtable)
        (g$12015$15i0ov core-prim . hashtable?)
        (g$6147$15i0ov core-prim . hashtable-update!)
        (g$6142$15i0ov core-prim . hashtable-size)
        (g$6144$15i0ov core-prim . hashtable-set!)
        (g$6143$15i0ov core-prim . hashtable-ref)
        (g$12014$15i0ov core-prim . hashtable-mutable?)
        (g$12013$15i0ov core-prim . hashtable-keys)
        (g$12012$15i0ov core-prim . hashtable-entries)
        (g$6145$15i0ov core-prim . hashtable-delete!)
        (g$12011$15i0ov core-prim . hashtable-copy)
        (g$6146$15i0ov core-prim . hashtable-contains?)
        (g$6148$15i0ov core-prim . hashtable-clear!)
        (g$7099$15i0ov core-prim . call-with-output-file)
        (g$7098$15i0ov core-prim . call-with-input-file)
        (g$12010$15i0ov core-prim . write-char)
        (g$12009$15i0ov core-prim . write)
        (g$7097$15i0ov core-prim . with-output-to-file)
        (g$7096$15i0ov core-prim . with-input-from-file)
        (g$12008$15i0ov core-prim . read-char)
        (g$12007$15i0ov core-prim . read)
        (g$12006$15i0ov core-prim . peek-char)
        (g$12005$15i0ov core-prim . open-output-file)
        (g$12004$15i0ov core-prim . open-input-file)
        (g$12003$15i0ov core-prim . newline)
        (g$12002$15i0ov core-prim . display)
        (g$12001$15i0ov core-prim . close-output-port)
        (g$12000$15i0ov core-prim . close-input-port)
        (g$11999$15i0ov core-prim . eof-object?)
        (g$11998$15i0ov core-prim . eof-object)
        (g$11997$15i0ov core-prim . current-error-port)
        (g$11996$15i0ov core-prim . current-output-port)
        (g$11995$15i0ov core-prim . current-input-port)
        (g$11994$15i0ov core-prim . output-port?)
        (g$11993$15i0ov core-prim . input-port?)
        (g$11992$15i0ov core-prim . utf-8-codec)
        (g$11991$15i0ov core-prim . utf-16-codec)
        (g$11990$15i0ov core-prim . transcoder-error-handling-mode)
        (g$11989$15i0ov core-prim . transcoder-eol-style)
        (g$11988$15i0ov core-prim . transcoder-codec)
        (g$11987$15i0ov core-prim . transcoded-port)
        (g$11986$15i0ov core-prim . textual-port?)
        (g$11985$15i0ov core-prim . string->bytevector)
        (g$11984$15i0ov core-prim . standard-output-port)
        (g$11983$15i0ov core-prim . standard-input-port)
        (g$11982$15i0ov core-prim . standard-error-port)
        (g$11981$15i0ov core-prim . set-port-position!)
        (g$11980$15i0ov core-prim . put-u8)
        (g$11979$15i0ov core-prim . put-string)
        (g$11978$15i0ov core-prim . put-datum)
        (g$11977$15i0ov core-prim . put-char)
        (g$11976$15i0ov core-prim . put-bytevector)
        (g$7075$15i0ov core-prim . port?)
        (g$11975$15i0ov core-prim . port-transcoder)
        (g$11974$15i0ov core-prim . port-position)
        (g$11973$15i0ov core-prim . port-has-set-port-position!?)
        (g$11972$15i0ov core-prim . port-has-port-position?)
        (g$11971$15i0ov core-prim . port-eof?)
        (g$11970$15i0ov core-prim . output-port-buffer-mode)
        (g$7074$15i0ov core-prim . open-string-output-port)
        (g$11969$15i0ov core-prim . open-string-input-port)
        (g$11968$15i0ov core-prim . open-file-output-port)
        (g$11967$15i0ov core-prim . open-file-input/output-port)
        (g$11966$15i0ov core-prim . open-file-input-port)
        (g$11965$15i0ov core-prim . open-bytevector-output-port)
        (g$11964$15i0ov core-prim . open-bytevector-input-port)
        (g$11963$15i0ov core-prim . native-transcoder)
        (g$11962$15i0ov core-prim . native-eol-style)
        (g$11961$15i0ov core-prim . make-transcoder)
        (g$11960$15i0ov core-prim . latin-1-codec)
        (g$6931$15i0ov core-prim . make-i/o-write-error)
        (g$6917$15i0ov core-prim . make-i/o-read-error)
        (g$7036$15i0ov core-prim . make-i/o-port-error)
        (g$6946$15i0ov core-prim . make-i/o-invalid-position-error)
        (g$6963$15i0ov core-prim . make-i/o-filename-error)
        (g$6979$15i0ov core-prim . make-i/o-file-protection-error)
        (g$6993$15i0ov core-prim . make-i/o-file-is-read-only-error)
        (g$7021$15i0ov core-prim . make-i/o-file-does-not-exist-error)
        (g$7007$15i0ov core-prim . make-i/o-file-already-exists-error)
        (g$6903$15i0ov core-prim . make-i/o-error)
        (g$7067$15i0ov core-prim . make-i/o-encoding-error)
        (g$7052$15i0ov core-prim . make-i/o-decoding-error)
        (g$11959$15i0ov core-prim . make-custom-textual-output-port)
        (g$11958$15i0ov core-prim . make-custom-textual-input/output-port)
        (g$11957$15i0ov core-prim . make-custom-textual-input-port)
        (g$11956$15i0ov core-prim . make-custom-binary-output-port)
        (g$11955$15i0ov core-prim . make-custom-binary-input/output-port)
        (g$11954$15i0ov core-prim . make-custom-binary-input-port)
        (g$11953$15i0ov core-prim . make-bytevector)
        (g$11952$15i0ov core-prim . lookahead-u8)
        (g$11951$15i0ov core-prim . lookahead-char)
        (g$6932$15i0ov core-prim . i/o-write-error?)
        (g$6918$15i0ov core-prim . i/o-read-error?)
        (g$7038$15i0ov core-prim . i/o-port-error?)
        (g$6948$15i0ov core-prim . i/o-invalid-position-error?)
        (g$6949$15i0ov core-prim . i/o-error-position)
        (g$6965$15i0ov core-prim . i/o-filename-error?)
        (g$6980$15i0ov core-prim . i/o-file-protection-error?)
        (g$6994$15i0ov core-prim . i/o-file-is-read-only-error?)
        (g$7022$15i0ov core-prim . i/o-file-does-not-exist-error?)
        (g$7008$15i0ov core-prim . i/o-file-already-exists-error?)
        (g$6904$15i0ov core-prim . i/o-error?)
        (g$7039$15i0ov core-prim . i/o-error-port)
        (g$6966$15i0ov core-prim . i/o-error-filename)
        (g$7069$15i0ov core-prim . i/o-encoding-error?)
        (g$7070$15i0ov core-prim . i/o-encoding-error-char)
        (g$7053$15i0ov core-prim . i/o-decoding-error?)
        (g$11950$15i0ov core-prim . get-u8)
        (g$11949$15i0ov core-prim . get-string-n!)
        (g$11948$15i0ov core-prim . get-string-n)
        (g$11947$15i0ov core-prim . get-string-all)
        (g$11946$15i0ov core-prim . get-line)
        (g$11945$15i0ov core-prim . get-datum)
        (g$11944$15i0ov core-prim . get-char)
        (g$11943$15i0ov core-prim . get-bytevector-some)
        (g$11942$15i0ov core-prim . get-bytevector-n!)
        (g$11941$15i0ov core-prim . get-bytevector-n)
        (g$11940$15i0ov core-prim . get-bytevector-all)
        (g$11939$15i0ov core-prim . flush-output-port)
        (g$11938$15i0ov core-prim . close-port)
        (g$11937$15i0ov core-prim . call-with-string-output-port)
        (g$11936$15i0ov core-prim . call-with-port)
        (g$11935$15i0ov core-prim . call-with-bytevector-output-port)
        (g$11934$15i0ov core-prim . bytevector->string)
        (g$11933$15i0ov core-prim . buffer-mode?)
        (g$11932$15i0ov core-prim . binary-port?)
        (g$8534$15i0ov core-prim . scheme-report-environment)
        (g$6667$15i0ov core-prim . quotient)
        (g$8533$15i0ov core-prim . null-environment)
        (g$6668$15i0ov core-prim . remainder)
        (g$6669$15i0ov core-prim . modulo)
        (g$11931$15i0ov core-prim . inexact->exact)
        (g$6671$15i0ov core-prim . force)
        (g$11930$15i0ov core-prim . exact->inexact)
        (g$11929$15i0ov core-prim . exit)
        (g$11490$15i0ov core-prim . command-line)
        (g$11928$15i0ov core-prim . string-fill!)
        (g$11927$15i0ov core-prim . string-set!)
        (g$11926$15i0ov core-prim . set-cdr!)
        (g$11925$15i0ov core-prim . set-car!)
        (g$6254$15i0ov core-prim . remove)
        (g$6255$15i0ov core-prim . remv)
        (g$6240$15i0ov core-prim . remp)
        (g$6256$15i0ov core-prim . remq)
        (g$6239$15i0ov core-prim . partition)
        (g$11924$15i0ov core-prim . memv)
        (g$11923$15i0ov core-prim . memq)
        (g$6246$15i0ov core-prim . memp)
        (g$6245$15i0ov core-prim . member)
        (g$6250$15i0ov core-prim . exists)
        (g$6249$15i0ov core-prim . for-all)
        (g$6253$15i0ov core-prim . fold-right)
        (g$6252$15i0ov core-prim . fold-left)
        (g$6238$15i0ov core-prim . find)
        (g$6241$15i0ov core-prim . filter)
        (g$6251$15i0ov core-prim . cons*)
        (g$6242$15i0ov core-prim . assv)
        (g$11922$15i0ov core-prim . assq)
        (g$6244$15i0ov core-prim . assp)
        (g$6243$15i0ov core-prim . assoc)
        (g$11921$15i0ov core-prim . with-exception-handler)
        (g$11920$15i0ov core-prim . raise-continuable)
        (g$11919$15i0ov core-prim . raise)
        (g$8536$15i0ov core-prim . eval)
        (g$8532$15i0ov core-prim . environment)
        (g$7156$15i0ov core-prim . make-enumeration)
        (g$7163$15i0ov core-prim . enum-set=?)
        (g$7157$15i0ov core-prim . enum-set-universe)
        (g$7164$15i0ov core-prim . enum-set-union)
        (g$7162$15i0ov core-prim . enum-set-subset?)
        (g$7168$15i0ov core-prim . enum-set-projection)
        (g$7161$15i0ov core-prim . enum-set-member?)
        (g$7165$15i0ov core-prim . enum-set-intersection)
        (g$7158$15i0ov core-prim . enum-set-indexer)
        (g$7166$15i0ov core-prim . enum-set-difference)
        (g$7159$15i0ov core-prim . enum-set-constructor)
        (g$7167$15i0ov core-prim . enum-set-complement)
        (g$7160$15i0ov core-prim . enum-set->list)
        (g$6578$15i0ov core-prim . who-condition?)
        (g$6489$15i0ov core-prim . warning?)
        (g$6531$15i0ov core-prim . violation?)
        (g$6655$15i0ov core-prim . undefined-violation?)
        (g$6639$15i0ov core-prim . syntax-violation?)
        (g$6641$15i0ov core-prim . syntax-violation-subform)
        (g$6640$15i0ov core-prim . syntax-violation-form)
        (g$8553$15i0ov core-prim . syntax-violation)
        (g$11918$15i0ov core-prim . simple-conditions)
        (g$6503$15i0ov core-prim . serious-condition?)
        (g$6593$15i0ov core-prim . non-continuable-violation?)
        (g$6474$15i0ov core-prim . message-condition?)
        (g$6576$15i0ov core-prim . make-who-condition)
        (g$6488$15i0ov core-prim . make-warning)
        (g$6530$15i0ov core-prim . make-violation)
        (g$6654$15i0ov core-prim . make-undefined-violation)
        (g$6636$15i0ov core-prim . make-syntax-violation)
        (g$6502$15i0ov core-prim . make-serious-condition)
        (g$6592$15i0ov core-prim . make-non-continuable-violation)
        (g$6472$15i0ov core-prim . make-message-condition)
        (g$6620$15i0ov core-prim . make-lexical-violation)
        (g$6559$15i0ov core-prim . make-irritants-condition)
        (g$6606$15i0ov core-prim . make-implementation-restriction-violation)
        (g$6516$15i0ov core-prim . make-error)
        (g$6544$15i0ov core-prim . make-assertion-violation)
        (g$6621$15i0ov core-prim . lexical-violation?)
        (g$6561$15i0ov core-prim . irritants-condition?)
        (g$6607$15i0ov core-prim . implementation-restriction-violation?)
        (g$6517$15i0ov core-prim . error?)
        (g$6579$15i0ov core-prim . condition-who)
        (g$11917$15i0ov core-prim . condition-predicate)
        (g$6475$15i0ov core-prim . condition-message)
        (g$6562$15i0ov core-prim . condition-irritants)
        (g$11916$15i0ov core-prim . condition-accessor)
        (g$11915$15i0ov core-prim . condition)
        (g$6545$15i0ov core-prim . assertion-violation?)
        (g$11914$15i0ov core-prim . condition?)
        (g$11913$15i0ov core-prim . utf32->string)
        (g$11912$15i0ov core-prim . utf16->string)
        (g$11911$15i0ov core-prim . utf8->string)
        (g$11910$15i0ov core-prim . uint-list->bytevector)
        (g$11909$15i0ov core-prim . u8-list->bytevector)
        (g$11908$15i0ov core-prim . string->utf8)
        (g$11907$15i0ov core-prim . string->utf32)
        (g$11906$15i0ov core-prim . string->utf16)
        (g$11905$15i0ov core-prim . sint-list->bytevector)
        (g$6330$15i0ov core-prim . native-endianness)
        (g$11904$15i0ov core-prim . bytevector?)
        (g$11903$15i0ov core-prim . bytevector=?)
        (g$11902$15i0ov core-prim . bytevector-uint-set!)
        (g$11901$15i0ov core-prim . bytevector-uint-ref)
        (g$11900$15i0ov core-prim . bytevector-u8-set!)
        (g$11899$15i0ov core-prim . bytevector-u8-ref)
        (g$6351$15i0ov core-prim . bytevector-u64-set!)
        (g$6347$15i0ov core-prim . bytevector-u64-ref)
        (g$6353$15i0ov core-prim . bytevector-u64-native-set!)
        (g$6349$15i0ov core-prim . bytevector-u64-native-ref)
        (g$6343$15i0ov core-prim . bytevector-u32-set!)
        (g$6339$15i0ov core-prim . bytevector-u32-ref)
        (g$6345$15i0ov core-prim . bytevector-u32-native-set!)
        (g$6341$15i0ov core-prim . bytevector-u32-native-ref)
        (g$6335$15i0ov core-prim . bytevector-u16-set!)
        (g$6331$15i0ov core-prim . bytevector-u16-ref)
        (g$6337$15i0ov core-prim . bytevector-u16-native-set!)
        (g$6333$15i0ov core-prim . bytevector-u16-native-ref)
        (g$11898$15i0ov core-prim . bytevector-sint-set!)
        (g$11897$15i0ov core-prim . bytevector-sint-ref)
        (g$11896$15i0ov core-prim . bytevector-s8-set!)
        (g$11895$15i0ov core-prim . bytevector-s8-ref)
        (g$6352$15i0ov core-prim . bytevector-s64-set!)
        (g$6348$15i0ov core-prim . bytevector-s64-ref)
        (g$6354$15i0ov core-prim . bytevector-s64-native-set!)
        (g$6350$15i0ov core-prim . bytevector-s64-native-ref)
        (g$6344$15i0ov core-prim . bytevector-s32-set!)
        (g$6340$15i0ov core-prim . bytevector-s32-ref)
        (g$6346$15i0ov core-prim . bytevector-s32-native-set!)
        (g$6342$15i0ov core-prim . bytevector-s32-native-ref)
        (g$6336$15i0ov core-prim . bytevector-s16-set!)
        (g$6332$15i0ov core-prim . bytevector-s16-ref)
        (g$6338$15i0ov core-prim . bytevector-s16-native-set!)
        (g$6334$15i0ov core-prim . bytevector-s16-native-ref)
        (g$11894$15i0ov core-prim . bytevector-length)
        (g$11893$15i0ov core-prim . bytevector-ieee-single-set!)
        (g$11892$15i0ov core-prim . bytevector-ieee-single-ref)
        (g$6357$15i0ov core-prim . bytevector-ieee-single-native-set!)
        (g$6355$15i0ov core-prim . bytevector-ieee-single-native-ref)
        (g$11891$15i0ov core-prim . bytevector-ieee-double-set!)
        (g$11890$15i0ov core-prim . bytevector-ieee-double-ref)
        (g$6358$15i0ov core-prim . bytevector-ieee-double-native-set!)
        (g$6356$15i0ov core-prim . bytevector-ieee-double-native-ref)
        (g$11889$15i0ov core-prim . bytevector-fill!)
        (g$11888$15i0ov core-prim . bytevector-copy!)
        (g$11887$15i0ov core-prim . bytevector-copy)
        (g$11886$15i0ov core-prim . bytevector->uint-list)
        (g$11885$15i0ov core-prim . bytevector->u8-list)
        (g$11884$15i0ov core-prim . bytevector->sint-list)
        (g$6889$15i0ov core-prim . no-nans-violation?)
        (g$6875$15i0ov core-prim . no-infinities-violation?)
        (g$6888$15i0ov core-prim . make-no-nans-violation)
        (g$6874$15i0ov core-prim . make-no-infinities-violation)
        (g$11883$15i0ov core-prim . real->flonum)
        (g$11882$15i0ov core-prim . flzero?)
        (g$11881$15i0ov core-prim . fltruncate)
        (g$11880$15i0ov core-prim . fltan)
        (g$11879$15i0ov core-prim . flsqrt)
        (g$11878$15i0ov core-prim . flsin)
        (g$11877$15i0ov core-prim . flround)
        (g$11876$15i0ov core-prim . flpositive?)
        (g$11875$15i0ov core-prim . flonum?)
        (g$11874$15i0ov core-prim . flodd?)
        (g$11873$15i0ov core-prim . flnumerator)
        (g$11872$15i0ov core-prim . flnegative?)
        (g$11871$15i0ov core-prim . flnan?)
        (g$11870$15i0ov core-prim . flmod0)
        (g$11869$15i0ov core-prim . flmod)
        (g$11868$15i0ov core-prim . flmin)
        (g$11867$15i0ov core-prim . flmax)
        (g$11866$15i0ov core-prim . fllog)
        (g$11865$15i0ov core-prim . flinteger?)
        (g$11864$15i0ov core-prim . flinfinite?)
        (g$11863$15i0ov core-prim . flfloor)
        (g$11862$15i0ov core-prim . flfinite?)
        (g$11861$15i0ov core-prim . flexpt)
        (g$11860$15i0ov core-prim . flexp)
        (g$11859$15i0ov core-prim . fleven?)
        (g$11858$15i0ov core-prim . fldiv0-and-mod0)
        (g$11857$15i0ov core-prim . fldiv0)
        (g$11856$15i0ov core-prim . fldiv-and-mod)
        (g$11855$15i0ov core-prim . fldiv)
        (g$11854$15i0ov core-prim . fldenominator)
        (g$11853$15i0ov core-prim . flcos)
        (g$11852$15i0ov core-prim . flceiling)
        (g$11851$15i0ov core-prim . flatan)
        (g$11850$15i0ov core-prim . flasin)
        (g$11849$15i0ov core-prim . flacos)
        (g$11848$15i0ov core-prim . flabs)
        (g$11847$15i0ov core-prim . fl>?)
        (g$11846$15i0ov core-prim . fl>=?)
        (g$11845$15i0ov core-prim . fl=?)
        (g$11844$15i0ov core-prim . fl<?)
        (g$11843$15i0ov core-prim . fl<=?)
        (g$11842$15i0ov core-prim . fl/)
        (g$11841$15i0ov core-prim . fl-)
        (g$11840$15i0ov core-prim . fl+)
        (g$11839$15i0ov core-prim . fl*)
        (g$11838$15i0ov core-prim . fixnum->flonum)
        (g$11837$15i0ov core-prim . fxzero?)
        (g$11836$15i0ov core-prim . fxxor)
        (g$6820$15i0ov core-prim . fxrotate-bit-field)
        (g$11835$15i0ov core-prim . fxreverse-bit-field)
        (g$11834$15i0ov core-prim . fxpositive?)
        (g$11833$15i0ov core-prim . fxodd?)
        (g$11832$15i0ov core-prim . fxnot)
        (g$11831$15i0ov core-prim . fxnegative?)
        (g$11830$15i0ov core-prim . fxmod0)
        (g$11829$15i0ov core-prim . fxmod)
        (g$11828$15i0ov core-prim . fxmin)
        (g$11827$15i0ov core-prim . fxmax)
        (g$11826$15i0ov core-prim . fxlength)
        (g$11825$15i0ov core-prim . fxior)
        (g$6814$15i0ov core-prim . fxif)
        (g$11824$15i0ov core-prim . fxfirst-bit-set)
        (g$11823$15i0ov core-prim . fxeven?)
        (g$11822$15i0ov core-prim . fxdiv0-and-mod0)
        (g$11821$15i0ov core-prim . fxdiv0)
        (g$11820$15i0ov core-prim . fxdiv-and-mod)
        (g$11819$15i0ov core-prim . fxdiv)
        (g$6817$15i0ov core-prim . fxcopy-bit-field)
        (g$6815$15i0ov core-prim . fxcopy-bit)
        (g$11818$15i0ov core-prim . fxbit-set?)
        (g$6816$15i0ov core-prim . fxbit-field)
        (g$11817$15i0ov core-prim . fxbit-count)
        (g$6819$15i0ov core-prim . fxarithmetic-shift-right)
        (g$6818$15i0ov core-prim . fxarithmetic-shift-left)
        (g$11816$15i0ov core-prim . fxarithmetic-shift)
        (g$11815$15i0ov core-prim . fxand)
        (g$11814$15i0ov core-prim . fx>?)
        (g$11813$15i0ov core-prim . fx>=?)
        (g$11812$15i0ov core-prim . fx=?)
        (g$11811$15i0ov core-prim . fx<?)
        (g$11810$15i0ov core-prim . fx<=?)
        (g$11809$15i0ov core-prim . fx-/carry)
        (g$11808$15i0ov core-prim . fx-)
        (g$11807$15i0ov core-prim . fx+/carry)
        (g$11806$15i0ov core-prim . fx+)
        (g$11805$15i0ov core-prim . fx*/carry)
        (g$11804$15i0ov core-prim . fx*)
        (g$11803$15i0ov core-prim . greatest-fixnum)
        (g$11802$15i0ov core-prim . least-fixnum)
        (g$11801$15i0ov core-prim . fixnum-width)
        (g$11800$15i0ov core-prim . fixnum?)
        (g$6772$15i0ov core-prim . bitwise-rotate-bit-field)
        (g$11799$15i0ov core-prim . bitwise-reverse-bit-field)
        (g$11798$15i0ov core-prim . bitwise-length)
        (g$6766$15i0ov core-prim . bitwise-if)
        (g$11797$15i0ov core-prim . bitwise-first-bit-set)
        (g$6769$15i0ov core-prim . bitwise-copy-bit-field)
        (g$6767$15i0ov core-prim . bitwise-copy-bit)
        (g$11796$15i0ov core-prim . bitwise-bit-set?)
        (g$11795$15i0ov core-prim . bitwise-bit-field)
        (g$11794$15i0ov core-prim . bitwise-bit-count)
        (g$11793$15i0ov core-prim . bitwise-xor)
        (g$11792$15i0ov core-prim . bitwise-ior)
        (g$11791$15i0ov core-prim . bitwise-and)
        (g$11790$15i0ov core-prim . bitwise-not)
        (g$6771$15i0ov core-prim . bitwise-arithmetic-shift-right)
        (g$6770$15i0ov core-prim . bitwise-arithmetic-shift-left)
        (g$11789$15i0ov core-prim . bitwise-arithmetic-shift)
        (g$11788$15i0ov core-prim . zero?)
        (g$11787$15i0ov core-prim . vector?)
        (g$11786$15i0ov core-prim . vector-set!)
        (g$11785$15i0ov core-prim . vector-ref)
        (g$11784$15i0ov core-prim . vector-map)
        (g$11783$15i0ov core-prim . vector-length)
        (g$11782$15i0ov core-prim . vector-for-each)
        (g$11781$15i0ov core-prim . vector-fill!)
        (g$11780$15i0ov core-prim . vector->list)
        (g$11779$15i0ov core-prim . vector)
        (g$11778$15i0ov core-prim . values)
        (g$11777$15i0ov core-prim . truncate)
        (g$11776$15i0ov core-prim . tan)
        (g$11775$15i0ov core-prim . symbol?)
        (g$11774$15i0ov core-prim . symbol=?)
        (g$11773$15i0ov core-prim . symbol->string)
        (g$11772$15i0ov core-prim . substring)
        (g$11771$15i0ov core-prim . string?)
        (g$11770$15i0ov core-prim . string>?)
        (g$11769$15i0ov core-prim . string>=?)
        (g$11768$15i0ov core-prim . string=?)
        (g$11767$15i0ov core-prim . string<?)
        (g$11766$15i0ov core-prim . string<=?)
        (g$11765$15i0ov core-prim . string-ref)
        (g$11764$15i0ov core-prim . string-length)
        (g$11763$15i0ov core-prim . string-for-each)
        (g$11762$15i0ov core-prim . string-copy)
        (g$11761$15i0ov core-prim . string-append)
        (g$11760$15i0ov core-prim . string->symbol)
        (g$11759$15i0ov core-prim . string->number)
        (g$11758$15i0ov core-prim . string->list)
        (g$11757$15i0ov core-prim . string)
        (g$11756$15i0ov core-prim . sqrt)
        (g$11755$15i0ov core-prim . sin)
        (g$11754$15i0ov core-prim . round)
        (g$11753$15i0ov core-prim . reverse)
        (g$11752$15i0ov core-prim . real?)
        (g$11751$15i0ov core-prim . real-valued?)
        (g$11750$15i0ov core-prim . real-part)
        (g$5790$15i0ov core-prim . rationalize)
        (g$11749$15i0ov core-prim . rational?)
        (g$11748$15i0ov core-prim . rational-valued?)
        (g$11747$15i0ov core-prim . procedure?)
        (g$11746$15i0ov core-prim . positive?)
        (g$11745$15i0ov core-prim . pair?)
        (g$11744$15i0ov core-prim . odd?)
        (g$11743$15i0ov core-prim . numerator)
        (g$11742$15i0ov core-prim . number?)
        (g$11741$15i0ov core-prim . number->string)
        (g$11740$15i0ov core-prim . null?)
        (g$11739$15i0ov core-prim . not)
        (g$11738$15i0ov core-prim . negative?)
        (g$11737$15i0ov core-prim . nan?)
        (g$11736$15i0ov core-prim . min)
        (g$11735$15i0ov core-prim . max)
        (g$11734$15i0ov core-prim . map)
        (g$11733$15i0ov core-prim . make-vector)
        (g$11732$15i0ov core-prim . make-string)
        (g$11731$15i0ov core-prim . make-rectangular)
        (g$11730$15i0ov core-prim . make-polar)
        (g$11729$15i0ov core-prim . magnitude)
        (g$11728$15i0ov core-prim . log)
        (g$11727$15i0ov core-prim . list?)
        (g$11726$15i0ov core-prim . list-tail)
        (g$11725$15i0ov core-prim . list-ref)
        (g$11724$15i0ov core-prim . list->vector)
        (g$11723$15i0ov core-prim . list->string)
        (g$11722$15i0ov core-prim . list)
        (g$11721$15i0ov core-prim . length)
        (g$11720$15i0ov core-prim . lcm)
        (g$11719$15i0ov core-prim . integer?)
        (g$11718$15i0ov core-prim . integer-valued?)
        (g$11717$15i0ov core-prim . integer->char)
        (g$11716$15i0ov core-prim . infinite?)
        (g$11715$15i0ov core-prim . inexact?)
        (g$11714$15i0ov core-prim . inexact)
        (g$11713$15i0ov core-prim . imag-part)
        (g$11712$15i0ov core-prim . gcd)
        (g$11711$15i0ov core-prim . for-each)
        (g$11710$15i0ov core-prim . floor)
        (g$11709$15i0ov core-prim . finite?)
        (g$11708$15i0ov core-prim . expt)
        (g$11707$15i0ov core-prim . exp)
        (g$11706$15i0ov core-prim . exact?)
        (g$11705$15i0ov core-prim . exact-integer-sqrt)
        (g$11704$15i0ov core-prim . exact)
        (g$11703$15i0ov core-prim . even?)
        (g$11702$15i0ov core-prim . error)
        (g$11701$15i0ov core-prim . eqv?)
        (g$11700$15i0ov core-prim . equal?)
        (g$11699$15i0ov core-prim . eq?)
        (g$11698$15i0ov core-prim . dynamic-wind)
        (g$11697$15i0ov core-prim . div0-and-mod0)
        (g$11696$15i0ov core-prim . mod0)
        (g$11695$15i0ov core-prim . div0)
        (g$11694$15i0ov core-prim . div-and-mod)
        (g$11693$15i0ov core-prim . mod)
        (g$11692$15i0ov core-prim . div)
        (g$11691$15i0ov core-prim . denominator)
        (g$11690$15i0ov core-prim . cos)
        (g$11689$15i0ov core-prim . cons)
        (g$11688$15i0ov core-prim . complex?)
        (g$11687$15i0ov core-prim . char?)
        (g$11686$15i0ov core-prim . char>?)
        (g$11685$15i0ov core-prim . char>=?)
        (g$11684$15i0ov core-prim . char=?)
        (g$11683$15i0ov core-prim . char<?)
        (g$11682$15i0ov core-prim . char<=?)
        (g$11681$15i0ov core-prim . char->integer)
        (g$11680$15i0ov core-prim . ceiling)
        (g$11679$15i0ov core-prim . call-with-values)
        (g$11678$15i0ov core-prim . call/cc)
        (g$11677$15i0ov core-prim . call-with-current-continuation)
        (g$5789$15i0ov core-prim . cddddr)
        (g$5788$15i0ov core-prim . cdddar)
        (g$5787$15i0ov core-prim . cddadr)
        (g$5786$15i0ov core-prim . cddaar)
        (g$5785$15i0ov core-prim . cdaddr)
        (g$5784$15i0ov core-prim . cdadar)
        (g$5783$15i0ov core-prim . cdaadr)
        (g$5782$15i0ov core-prim . cdaaar)
        (g$5781$15i0ov core-prim . cadddr)
        (g$5780$15i0ov core-prim . caddar)
        (g$5779$15i0ov core-prim . cadadr)
        (g$5778$15i0ov core-prim . cadaar)
        (g$5777$15i0ov core-prim . caaddr)
        (g$5776$15i0ov core-prim . caadar)
        (g$5775$15i0ov core-prim . caaadr)
        (g$5774$15i0ov core-prim . caaaar)
        (g$5773$15i0ov core-prim . cdddr)
        (g$5772$15i0ov core-prim . cddar)
        (g$5771$15i0ov core-prim . cdadr)
        (g$5770$15i0ov core-prim . cdaar)
        (g$5769$15i0ov core-prim . caddr)
        (g$5768$15i0ov core-prim . cadar)
        (g$5767$15i0ov core-prim . caadr)
        (g$5766$15i0ov core-prim . caaar)
        (g$5765$15i0ov core-prim . cddr)
        (g$5764$15i0ov core-prim . cdar)
        (g$5763$15i0ov core-prim . cadr)
        (g$5762$15i0ov core-prim . caar)
        (g$11676$15i0ov core-prim . cdr)
        (g$11675$15i0ov core-prim . car)
        (g$11674$15i0ov core-prim . boolean?)
        (g$11673$15i0ov core-prim . boolean=?)
        (g$11672$15i0ov core-prim . atan)
        (g$11671$15i0ov core-prim . assertion-violation)
        (g$11670$15i0ov core-prim . asin)
        (g$11669$15i0ov core-prim . apply)
        (g$11668$15i0ov core-prim . append)
        (g$11667$15i0ov core-prim . angle)
        (g$11666$15i0ov core-prim . acos)
        (g$11665$15i0ov core-prim . abs)
        (g$11664$15i0ov core-prim . /)
        (g$11663$15i0ov core-prim . *)
        (g$11662$15i0ov core-prim . -)
        (g$11661$15i0ov core-prim . +)
        (g$11660$15i0ov core-prim . >=)
        (g$11659$15i0ov core-prim . >)
        (g$11658$15i0ov core-prim . =)
        (g$11657$15i0ov core-prim . <=)
        (g$11656$15i0ov core-prim . <)
        (g$11655$15i0ov core-prim . make-record-printer)
        (g$11654$15i0ov core-prim . eqv-hash)
        (g$11653$15i0ov core-prim . eq-hash)
        (g$11652$15i0ov core-prim . reverse!)
        (g$6670$15i0ov core-prim . make-promise)
        (g$11492$15i0ov core-prim . load/args)
        (g$7240$15i0ov core-prim . printf)
        (g$7241$15i0ov core-prim . fprintf)
        (g$7242$15i0ov core-prim . format)
        (g$11651$15i0ov core-prim . get-arity)
        (g$11650$15i0ov core-prim . gc-collect)
        (g$11649$15i0ov core-prim . clr-type?)
        (g$11648$15i0ov core-prim . get-clr-type)
        (g$11647$15i0ov core-prim . get-command-line)
        (g$11646$15i0ov core-prim . vector-append)
        (g$11645$15i0ov core-prim . vector-filter)
        (g$11644$15i0ov core-prim . vector-reverse!)
        (g$11643$15i0ov core-prim . vector-contains?)
        (g$11642$15i0ov core-prim . vector-index-of)
        (g$11641$15i0ov core-prim . vector-copy)
        (g$11640$15i0ov core-prim . vector-binary-search)
        (g$11639$15i0ov core-prim . get-output-string)
        (g$11638$15i0ov core-prim . open-output-string)
        (g$11637$15i0ov core-prim . open-input-string)
        (g$11636$15i0ov core-prim . string-format)
        (g$11489$15i0ov core-prim . trace-printer)
        (g$11635$15i0ov core-prim . make-traced-procedure)
        (g$7262$15i0ov core-prim . make-traced-macro)
        (g$8549$15i0ov core-prim . assertion-error)
        (g$11634$15i0ov core-prim . pmap)
        (g$11633$15i0ov core-prim . time-it)
        (g$7267$15i0ov core-prim . make-parameter)
        (g$11632$15i0ov core-prim . library-locator)
        (g$11631$15i0ov core-prim . get-library-paths)
        (g$8530$15i0ov core-prim . environment-symbols)
        (g$8529$15i0ov core-prim . interaction-environment-symbols)
        (g$7698$15i0ov core-prim . library-path)
        (g$7699$15i0ov core-prim . library-extensions)
        (g$7719$15i0ov core-prim . installed-libraries)
        (g$8535$15i0ov core-prim . expand)
        (g$11630$15i0ov $core-rtd &no-nans-rtd &no-nans-rcd)
        (g$11629$15i0ov $core-rtd &no-infinities-rtd &no-infinities-rcd)
        (g$11628$15i0ov $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd)
        (g$11627$15i0ov $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd)
        (g$11626$15i0ov $core-rtd &i/o-port-rtd &i/o-port-rcd)
        (g$11625$15i0ov
          $core-rtd
          &i/o-file-does-not-exist-rtd
          &i/o-file-does-not-exist-rcd)
        (g$11624$15i0ov
          $core-rtd
          &i/o-file-already-exists-rtd
          &i/o-file-already-exists-rcd)
        (g$11623$15i0ov
          $core-rtd
          &i/o-file-is-read-only-rtd
          &i/o-fie-is-read-only-rcd)
        (g$11622$15i0ov
          $core-rtd
          &i/o-file-protection-rtd
          &i/o-file-protection-rcd)
        (g$11621$15i0ov $core-rtd &i/o-filename-rtd &i/o-filename-rcd)
        (g$11620$15i0ov
          $core-rtd
          &i/o-invalid-position-rtd
          &i/o-invalid-position-rcd)
        (g$11619$15i0ov $core-rtd &i/o-write-rtd &i/o-write-rcd)
        (g$11618$15i0ov $core-rtd &i/o-read-rtd &i/o-read-rcd)
        (g$11617$15i0ov $core-rtd &i/o-rtd &i/o-rcd)
        (g$11616$15i0ov $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11615$15i0ov $core-rtd &undefined-rtd &undefined-rcd)
        (g$11614$15i0ov $core-rtd &syntax-rtd &syntax-rcd)
        (g$11613$15i0ov $core-rtd &lexical-rtd &lexical-rcd)
        (g$11612$15i0ov
          $core-rtd
          &implementation-restriction-rtd
          &implementation-restriction-rcd)
        (g$11611$15i0ov $core-rtd &non-continuable-rtd &non-continuable-rcd)
        (g$11610$15i0ov $core-rtd &who-rtd &who-rcd)
        (g$11609$15i0ov $core-rtd &irritants-rtd &irritants-rcd)
        (g$11608$15i0ov $core-rtd &assertion-rtd &assertion-rcd)
        (g$11607$15i0ov $core-rtd &violation-rtd &violation-rcd)
        (g$11606$15i0ov $core-rtd &error-rtd &error-rcd)
        (g$11605$15i0ov $core-rtd &serious-rtd &serious-rcd)
        (g$11604$15i0ov $core-rtd &warning-rtd &warning-rcd)
        (g$11603$15i0ov $core-rtd &message-rtd &message-rcd)
        (g$11602$15i0ov $core-rtd &condition-rtd &condition-rcd)
        (g$11601$15i0ov macro . define-condition-type)
        (g$11600$15i0ov macro . define-enumeration)
        (g$11599$15i0ov macro . define-record-type)
        (g$11598$15i0ov macro . parent-rtd)
        (g$11597$15i0ov macro . nongenerative)
        (g$11596$15i0ov macro . opaque)
        (g$11595$15i0ov macro . sealed)
        (g$11594$15i0ov macro . protocol)
        (g$11593$15i0ov macro . parent)
        (g$11592$15i0ov macro . immutable)
        (g$11591$15i0ov macro . mutable)
        (g$11590$15i0ov macro . fields)
        (g$11589$15i0ov macro . error-handling-mode)
        (g$11588$15i0ov macro . file-options)
        (g$11587$15i0ov macro . buffer-mode)
        (g$11586$15i0ov macro . eol-style)
        (g$11585$15i0ov macro . guard)
        (g$11584$15i0ov macro . trace-letrec-syntax)
        (g$11583$15i0ov macro . trace-let-syntax)
        (g$11582$15i0ov macro . trace-define-syntax)
        (g$11581$15i0ov macro . trace-define)
        (g$11580$15i0ov macro . trace-lambda)
        (g$11579$15i0ov macro . unsyntax-splicing)
        (g$11578$15i0ov macro . unsyntax)
        (g$11577$15i0ov macro . unquote-splicing)
        (g$11576$15i0ov macro . unquote)
        (g$11575$15i0ov macro . _)
        (g$11574$15i0ov macro . else)
        (g$11573$15i0ov macro . =>)
        (g$11572$15i0ov macro . ...)
        (g$11571$15i0ov macro . assert)
        (g$11570$15i0ov macro . endianness)
        (g$11569$15i0ov macro . delay)
        (g$11568$15i0ov macro . time)
        (g$11567$15i0ov macro . or)
        (g$11566$15i0ov macro . and)
        (g$11565$15i0ov macro . do)
        (g$11564$15i0ov macro . cond)
        (g$11563$15i0ov macro . let*)
        (g$11562$15i0ov macro . let)
        (g$11561$15i0ov macro . identifier-syntax)
        (g$11560$15i0ov macro . with-syntax)
        (g$11559$15i0ov macro . quasisyntax)
        (g$11558$15i0ov macro . quasiquote)
        (g$11557$15i0ov macro . syntax-rules)
        (g$11556$15i0ov macro . include-into)
        (g$11555$15i0ov macro . include)
        (g$11554$15i0ov macro . define-struct)
        (g$11553$15i0ov macro . let-values)
        (g$11552$15i0ov macro . let*-values)
        (g$11551$15i0ov core-macro . record-constructor-descriptor)
        (g$11550$15i0ov core-macro . record-type-descriptor)
        (g$11549$15i0ov core-macro . fluid-let-syntax)
        (g$11548$15i0ov macro . case)
        (g$11547$15i0ov macro . parameterize)
        (g$11546$15i0ov macro . unless)
        (g$11545$15i0ov macro . when)
        (g$11544$15i0ov core-macro . if)
        (g$11543$15i0ov core-macro . letrec*)
        (g$11542$15i0ov core-macro . letrec)
        (g$11541$15i0ov core-macro . type-descriptor)
        (g$11540$15i0ov core-macro . case-lambda)
        (g$11539$15i0ov core-macro . lambda)
        (g$11538$15i0ov core-macro . syntax)
        (g$11537$15i0ov core-macro . syntax-case)
        (g$11536$15i0ov core-macro . quote)
        (g$11535$15i0ov core-macro . foreign-call)
        (g$11534$15i0ov letrec-syntax)
        (g$11533$15i0ov let-syntax)
        (g$11532$15i0ov set!)
        (g$11531$15i0ov import)
        (g$11530$15i0ov library)
        (g$11529$15i0ov begin)
        (g$11528$15i0ov module)
        (g$11527$15i0ov define-syntax)
        (g$11526$15i0ov define))
      values
      values
      '#f
      '#f
      '#f
      '#f)
    (g$install-library$6930$15i0ov
      'g$12201$15i0ov
      '(psyntax system $bootstrap)
      '()
      '()
      '()
      '()
      '((compile-core . g$12080$15i0ov)
        (eval-core . g$12079$15i0ov)
        (set-symbol-value! . g$12078$15i0ov)
        (symbol-value . g$12077$15i0ov)
        (gensym . g$12075$15i0ov)
        (void . g$12074$15i0ov))
      '()
      values
      values
      '#f
      '#f
      '#f
      '#f)))

(library-letrec* (psyntax main)
  ((g$trace-printer$10951$15i0ov
     g$trace-printer$10991$15i0ov
     (g$make-parameter$6384$15i0ov write))
   (g$command-line$10952$15i0ov
     g$command-line$10992$15i0ov
     (g$make-parameter$6384$15i0ov (get-command-line)))
   (g$local-library-path$10953$15i0ov
     g$local-library-path$10993$15i0ov
     (case-lambda
       ((g$filename$10964$15i0ov)
        (cons
          (g$get-directory-name$5245$15i0ov g$filename$10964$15i0ov)
          (g$library-path$6914$15i0ov)))))
   (g$load/args$10954$15i0ov
     g$load/args$10994$15i0ov
     (case-lambda
       ((g$filename$10965$15i0ov . g$args$10966$15i0ov)
        (begin
          (apply
            g$load-r6rs-top-level$10961$15i0ov
            g$filename$10965$15i0ov
            'load
            g$args$10966$15i0ov)
          (void)))))
   (g$load$10955$15i0ov
     g$load$10995$15i0ov
     (case-lambda
       ((g$filename$10967$15i0ov)
        (begin
          (apply
            g$load-r6rs-top-level$10961$15i0ov
            g$filename$10967$15i0ov
            'load
            (cdr (g$command-line$10952$15i0ov)))
          (void)))))
   (g$ironscheme-build$10956$15i0ov
     g$ironscheme-build$10996$15i0ov
     (case-lambda (() (g$load$10955$15i0ov '"ironscheme-buildscript.ss"))))
   (g$eval-top-level$10957$15i0ov
     g$eval-top-level$10997$15i0ov
     (case-lambda
       ((g$x$10968$15i0ov)
        (g$eval$10926$15i0ov
          g$x$10968$15i0ov
          (g$interaction-environment$10949$15i0ov)))))
   (g$compile-system-libraries$10958$15i0ov
     g$compile-system-libraries$10998$15i0ov
     (case-lambda
       (()
        (g$eval-top-level$10957$15i0ov
          '(begin
             (include "system-libraries.ss")
             (compile "system-libraries.ss"))))))
   (g$compile$10959$15i0ov
     g$compile$10999$15i0ov
     (case-lambda
       ((g$filename$10969$15i0ov)
        (g$load-r6rs-top-level$10961$15i0ov g$filename$10969$15i0ov 'compile))))
   (g$compile->closure$10960$15i0ov
     g$compile->closure$11000$15i0ov
     (case-lambda
       ((g$filename$10970$15i0ov)
        (g$load-r6rs-top-level$10961$15i0ov g$filename$10970$15i0ov 'closure))))
   (g$load-r6rs-top-level$10961$15i0ov
     g$load-r6rs-top-level$11001$15i0ov
     (case-lambda
       ((g$filename$10971$15i0ov g$how$10972$15i0ov . g$args$10973$15i0ov)
        ((case-lambda
           ((g$library-path$10976$15i0ov g$library-path$10977$15i0ov)
            ((case-lambda
               ((g$swap$10978$15i0ov)
                (dynamic-wind
                  g$swap$10978$15i0ov
                  (case-lambda
                    (()
                     ((case-lambda
                        ((g$x*$10979$15i0ov)
                         ((case-lambda
                            ((g$t$10980$15i0ov)
                             (if (memv g$t$10980$15i0ov '(closure))
                               (g$pre-compile-r6rs-top-level$10948$15i0ov
                                 g$x*$10979$15i0ov)
                               (if (memv g$t$10980$15i0ov '(load))
                                 ((case-lambda
                                    ((g$command-line$10983$15i0ov
                                       g$command-line$10984$15i0ov)
                                     ((case-lambda
                                        ((g$swap$10985$15i0ov)
                                         (dynamic-wind
                                           g$swap$10985$15i0ov
                                           (case-lambda
                                             (()
                                              ((g$compile-r6rs-top-level$10947$15i0ov
                                                 g$x*$10979$15i0ov))))
                                           g$swap$10985$15i0ov)))
                                      (case-lambda
                                        (()
                                         ((case-lambda
                                            ((g$t$10986$15i0ov)
                                             (begin
                                               (g$command-line$10983$15i0ov
                                                 g$command-line$10984$15i0ov)
                                               (set! g$command-line$10984$15i0ov
                                                 g$t$10986$15i0ov))))
                                          (g$command-line$10983$15i0ov)))))))
                                  g$command-line$10952$15i0ov
                                  (cons
                                    g$filename$10971$15i0ov
                                    (map (case-lambda
                                           ((g$x$10987$15i0ov)
                                            (g$format$6299$15i0ov
                                              '"~a"
                                              g$x$10987$15i0ov)))
                                         g$args$10973$15i0ov)))
                                 (if (memv g$t$10980$15i0ov '(compile))
                                   (begin
                                     (g$compile-r6rs-top-level$10947$15i0ov
                                       g$x*$10979$15i0ov)
                                     (g$serialize-all$6918$15i0ov
                                       serialize-library
                                       g$compile-core-expr$6632$15i0ov))
                                   (if '#f '#f (void)))))))
                          g$how$10972$15i0ov)))
                      (g$with-input-from-file$6130$15i0ov
                        g$filename$10971$15i0ov
                        (case-lambda
                          (()
                           ((letrec ((g$f$10988$15i0ov
                                       (case-lambda
                                         (()
                                          ((case-lambda
                                             ((g$x$10989$15i0ov)
                                              (if (eof-object? g$x$10989$15i0ov)
                                                '()
                                                (cons
                                                  g$x$10989$15i0ov
                                                  (g$f$10988$15i0ov)))))
                                           (read-annotated))))))
                              g$f$10988$15i0ov))))))))
                  g$swap$10978$15i0ov)))
             (case-lambda
               (()
                ((case-lambda
                   ((g$t$10990$15i0ov)
                    (begin
                      (g$library-path$10976$15i0ov g$library-path$10977$15i0ov)
                      (set! g$library-path$10977$15i0ov g$t$10990$15i0ov))))
                 (g$library-path$10976$15i0ov)))))))
         g$library-path$6914$15i0ov
         (g$local-library-path$10953$15i0ov g$filename$10971$15i0ov)))))
   (g$fo$10962$15i0ov
     g$fo$11002$15i0ov
     (g$make-enumeration$6261$15i0ov '(no-fail no-create no-truncate))))
  (begin
    (g$current-precompiled-library-loader$6919$15i0ov
      load-serialized-library)
    (set-symbol-value!
      'default-exception-handler
      (case-lambda
        ((g$ex$10963$15i0ov)
         (if (g$serious-condition?$5628$15i0ov g$ex$10963$15i0ov)
           (raise g$ex$10963$15i0ov)
           (begin (display g$ex$10963$15i0ov) (newline))))))
    (set-symbol-value! 'load g$load$10955$15i0ov)
    (set-symbol-value! 'compile g$compile$10959$15i0ov)
    (set-symbol-value! 'compile->closure g$compile->closure$10960$15i0ov)
    (set-symbol-value! 'eval-r6rs g$eval-top-level$10957$15i0ov)
    (set-symbol-value!
      'int-env-syms
      g$interaction-environment-symbols$10919$15i0ov)
    (set-symbol-value! 'expanded2core g$expanded->core$6631$15i0ov)
    (set-symbol-value! 'trace-printer g$trace-printer$10951$15i0ov)
    (g$file-options-constructor$6385$15i0ov
      (g$enum-set-constructor$6264$15i0ov g$fo$10962$15i0ov))
    (g$library-path$6914$15i0ov (get-library-paths))))

